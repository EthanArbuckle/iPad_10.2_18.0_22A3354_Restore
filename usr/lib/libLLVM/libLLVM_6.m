void sub_1C49FD2C0(uint64_t a1, llvm::MachineBasicBlock *a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned __int8 *v17;

  v10 = *((_QWORD *)a2 + 7);
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)v10)
  {
LABEL_19:
    v17 = 0;
  }
  else
  {
    while (1)
    {
      v11 = **(unsigned __int16 **)(v10 + 16);
      v12 = v11 > 0x17;
      v13 = (1 << v11) & 0x83E000;
      if (v12 || v13 == 0)
        break;
      v10 = *(_QWORD *)(v10 + 8);
      if ((llvm::MachineBasicBlock *)v10 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
        goto LABEL_19;
    }
    v15 = *(unsigned __int8 **)(v10 + 56);
    v17 = v15;
    if (v15)
      llvm::MetadataTracking::track((uint64_t)&v17, v15, 2);
  }
  if (a3 >= 2)
  {
    v16 = a3 >> 1;
    do
    {
      sub_1C49FEB4C(a2, 0, &v17, a5, a6, 2);
      --v16;
    }
    while (v16);
  }
  if ((a3 & 1) != 0)
    sub_1C49FEB4C(a2, 0, &v17, a5, a6, 1);
  if (v17)
    llvm::MetadataTracking::untrack((uint64_t)&v17, v17);
}

void sub_1C49FD3D0(uint64_t a1, llvm::MachineBasicBlock *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;

  if (!a4 || (v8 = *((_QWORD *)a2 + 7), (llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)v8))
  {
LABEL_14:
    v14 = 0;
  }
  else
  {
    while (1)
    {
      v9 = **(unsigned __int16 **)(v8 + 16);
      v10 = v9 > 0x17;
      v11 = (1 << v9) & 0x83E000;
      if (v10 || v11 == 0)
        break;
      v8 = *(_QWORD *)(v8 + 8);
      if ((llvm::MachineBasicBlock *)v8 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
        goto LABEL_14;
    }
    v13 = *(unsigned __int8 **)(v8 + 56);
    v14 = v13;
    if (v13)
      llvm::MetadataTracking::track((uint64_t)&v14, v13, 2);
  }
  sub_1C49FEB4C(a2, 1, &v14, a5, a4, -1);
  if (v14)
    llvm::MetadataTracking::untrack((uint64_t)&v14, v14);
}

void sub_1C49FD4A0(int a1, llvm::MachineFunction **this, uint64_t a3, int a4, uint64_t a5)
{
  llvm::MachineBasicBlock *FirstTerminator;
  _QWORD *v9;
  llvm::MachineBasicBlock *v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  unsigned __int8 *v15;
  uint64_t v16;
  llvm::MachineFunction *v17;
  uint64_t v18;
  unint64_t v19;
  llvm::MachineFunction *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;

  FirstTerminator = (llvm::MachineBasicBlock *)llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)this);
  v9 = FirstTerminator;
  if (this + 6 == (llvm::MachineFunction **)FirstTerminator)
  {
LABEL_53:
    v35 = 0;
  }
  else
  {
    v10 = FirstTerminator;
    while (1)
    {
      v11 = **((unsigned __int16 **)v10 + 2);
      v12 = v11 > 0x17;
      v13 = (1 << v11) & 0x83E000;
      if (v12 || v13 == 0)
        break;
      v10 = (llvm::MachineBasicBlock *)*((_QWORD *)v10 + 1);
      if (v10 == (llvm::MachineBasicBlock *)(this + 6))
        goto LABEL_53;
    }
    v15 = (unsigned __int8 *)*((_QWORD *)v10 + 7);
    v35 = v15;
    if (v15)
      llvm::MetadataTracking::track((uint64_t)&v35, v15, 2);
  }
  if (a4
    || (v25 = (*(unsigned __int16 *)(*(_QWORD *)this[4] + 18) >> 4) & 0x3FF) == 0
    || (v25 != 255 ? (v26 = v25 == 8) : (v26 = 1), v26))
  {
    v34 = v35;
    if (v35)
      llvm::MetadataTracking::track((uint64_t)&v34, v35, 2);
    sub_1C4AAB114(this);
    v16 = *(_QWORD *)(a5 + 8);
    v17 = this[4];
    v40 = v34;
    if (v34)
      llvm::MetadataTracking::track((uint64_t)&v40, v34, 2);
    v18 = v16 + 26304;
    v19 = *((_QWORD *)v17 + 28);
    if (v19)
      *((_QWORD *)v17 + 28) = *(_QWORD *)v19;
    else
      v19 = sub_1C484358C((uint64_t)v17 + 128, 72, 3);
    v36 = (uint64_t)v40;
    if (v40)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v40, v40, (uint64_t)&v36);
      v40 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v19, v17, v18, (unsigned __int8 **)&v36, 0);
    if (v36)
      llvm::MetadataTracking::untrack((uint64_t)&v36, (unsigned __int8 *)v36);
    if (v40)
      llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
    v20 = this[5];
    *(_QWORD *)(v19 + 24) = v20;
    v21 = *((_QWORD *)v20 + 4);
    v22 = *(unsigned int *)(v19 + 40);
    if ((_DWORD)v22)
    {
      v27 = *(_QWORD *)(v19 + 32);
      v28 = *(_QWORD *)(v21 + 40);
      v29 = 32 * v22;
      do
      {
        if (!*(_BYTE *)v27)
        {
          v30 = *(unsigned int *)(v27 + 4);
          if ((int)v30 >= 0)
            v31 = (uint64_t *)(*(_QWORD *)(v28 + 272) + 8 * v30);
          else
            v31 = (uint64_t *)(*(_QWORD *)(v28 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
          v32 = *v31;
          if (*v31)
          {
            v33 = *(_QWORD *)(v32 + 16);
            *(_QWORD *)(v32 + 16) = v27;
            *(_QWORD *)(v27 + 16) = v33;
            if ((*(_BYTE *)(v27 + 3) & 1) != 0)
            {
              *(_QWORD *)(v27 + 24) = v32;
            }
            else
            {
              *(_QWORD *)(v27 + 24) = 0;
              v31 = (uint64_t *)(v33 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v27 + 16) = v27;
            *(_QWORD *)(v27 + 24) = 0;
          }
          *v31 = v27;
        }
        v27 += 32;
        v29 -= 32;
      }
      while (v29);
    }
    v23 = *(_QWORD *)(v21 + 728);
    if (v23)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 24))(v23, v19);
    v24 = *v9 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v19 = v24 | *(_QWORD *)v19 & 7;
    *(_QWORD *)(v19 + 8) = v9;
    *(_QWORD *)(v24 + 8) = v19;
    *v9 = *v9 & 7 | v19;
    LODWORD(v36) = 1;
    v37 = 0;
    v38 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v17, (const llvm::MachineOperand *)&v36);
    v37 = 0;
    v38 = 0;
    v36 = 0x200000000;
    v39 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v17, (const llvm::MachineOperand *)&v36);
    LODWORD(v36) = 1;
    v37 = 0;
    v38 = 2;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v17, (const llvm::MachineOperand *)&v36);
    if (v34)
      llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  }
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
}

llvm::MachineInstr *sub_1C49FD7AC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t i;
  unsigned __int16 *v12;
  int v13;
  uint64_t v16;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned __int8 *v24;
  uint64_t v25;
  llvm::MachineFunction *v26;
  llvm::MachineInstr *v27;
  BOOL hasPropertyInBundle;
  _QWORD *v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;

  if (a2 == a3)
    return 0;
  v7 = 0;
  v8 = a2[7];
  v9 = a2;
  do
  {
    v10 = v9 + 6;
    for (i = v9[7]; (_QWORD *)i != v10; i = *(_QWORD *)(i + 8))
    {
      v12 = *(unsigned __int16 **)(i + 16);
      v13 = *v12;
      if ((v13 - 9) <= 0x3C && ((1 << (v13 - 9)) & 0x1000000000000605) != 0
        || v13 == 0)
      {
        goto LABEL_19;
      }
      v16 = *((_QWORD *)v12 + 1);
      if ((v16 & 0x10) != 0)
        goto LABEL_19;
      if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
      {
        v30 = v9;
        v31 = v10;
        hasPropertyInBundle = llvm::MachineInstr::hasPropertyInBundle(i, 1024, 1);
        v9 = v30;
        v10 = v31;
        if (hasPropertyInBundle)
          goto LABEL_19;
      }
      else if ((v16 & 0x400) != 0)
      {
        goto LABEL_19;
      }
      v18 = v7++ > 4;
      if (v18)
        break;
LABEL_19:
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    if (++v7 > 5)
      break;
    v9 = (_QWORD *)v9[1];
  }
  while (v9 != a3);
  if (v7 < 6)
    return 0;
  v19 = a2 + 6;
  if (a2 + 6 == (_QWORD *)v8)
  {
LABEL_53:
    v32 = 0;
    goto LABEL_33;
  }
  v20 = v8;
  while (1)
  {
    v21 = **(unsigned __int16 **)(v20 + 16);
    v18 = v21 > 0x17;
    v22 = (1 << v21) & 0x83E000;
    if (v18 || v22 == 0)
      break;
    v20 = *(_QWORD *)(v20 + 8);
    if ((_QWORD *)v20 == v19)
      goto LABEL_53;
  }
  v24 = *(unsigned __int8 **)(v20 + 56);
  v32 = v24;
  if (v24)
  {
    llvm::MetadataTracking::track((uint64_t)&v32, v24, 2);
    v25 = *(_QWORD *)(a4 + 8) + 20448;
    v26 = (llvm::MachineFunction *)a2[4];
    v36 = v32;
    if (v32)
      llvm::MetadataTracking::track((uint64_t)&v36, v32, 2);
  }
  else
  {
LABEL_33:
    v25 = *(_QWORD *)(a4 + 8) + 20448;
    v26 = (llvm::MachineFunction *)a2[4];
    v36 = 0;
  }
  v27 = (llvm::MachineInstr *)*((_QWORD *)v26 + 28);
  if (v27)
    *((_QWORD *)v26 + 28) = *(_QWORD *)v27;
  else
    v27 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v26 + 128, 72, 3);
  v33 = v36;
  if (v36)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v36, v36, (uint64_t)&v33);
    v36 = 0;
  }
  llvm::MachineInstr::MachineInstr(v27, v26, v25, &v33, 0);
  if (v33)
    llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
  if (v36)
    llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
  if (v19 != (_QWORD *)v8 && (*(_WORD *)(v8 + 44) & 4) != 0)
    *((_WORD *)v27 + 22) |= 0xCu;
  sub_1C512CA10(a2 + 5, (uint64_t *)v8, (uint64_t)v27);
  LODWORD(v33) = 1;
  v34 = 0;
  v35 = 0;
  llvm::MachineInstr::addOperand(v27, v26, (const llvm::MachineOperand *)&v33);
  v34 = 0;
  v35 = a3;
  LODWORD(v33) = 4;
  llvm::MachineInstr::addOperand(v27, v26, (const llvm::MachineOperand *)&v33);
  if (v32)
    llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
  return v27;
}

uint64_t sub_1C49FDA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t sub_1C49FDABC(uint64_t a1)
{
  return *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 16);
}

void sub_1C49FDADC(int a1, llvm::MachineBasicBlock *a2, int a3, int a4, unsigned int a5, unsigned int a6, llvm::TargetInstrInfo *this)
{
  unint64_t v12;
  unint64_t FirstTerminator;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  unsigned __int8 *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  llvm::MachineFunction *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v12 = sub_1C49FE550((uint64_t)a2, this);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  v14 = (unint64_t *)FirstTerminator;
  if ((llvm::MachineBasicBlock *)((char *)a2 + 48) == (llvm::MachineBasicBlock *)FirstTerminator)
  {
LABEL_44:
    v39 = 0;
  }
  else
  {
    v15 = FirstTerminator;
    while (1)
    {
      v16 = **(unsigned __int16 **)(v15 + 16);
      v17 = v16 > 0x17;
      v18 = (1 << v16) & 0x83E000;
      if (v17 || v18 == 0)
        break;
      v15 = *(_QWORD *)(v15 + 8);
      if ((llvm::MachineBasicBlock *)v15 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
        goto LABEL_44;
    }
    v20 = *(unsigned __int8 **)(v15 + 56);
    v39 = v20;
    if (v20)
      llvm::MetadataTracking::track((uint64_t)&v39, v20, 2);
  }
  if (v12)
  {
    v41 = xmmword_1C6613C50;
    v21 = sub_1C4C640F8(148, 4, &v41);
    v22 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 4);
    v23 = *((_QWORD *)this + 1);
    v24 = (llvm::MachineFunction *)*((_QWORD *)a2 + 4);
    v40 = v39;
    if (v39)
      llvm::MetadataTracking::track((uint64_t)&v40, v39, 2);
    v25 = v23 + 48 * v21;
    v26 = *((_QWORD *)v24 + 28);
    if (v26)
      *((_QWORD *)v24 + 28) = *(_QWORD *)v26;
    else
      v26 = sub_1C484358C((uint64_t)v24 + 128, 72, 3);
    *(_QWORD *)&v41 = v40;
    if (v40)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v40, v40, (uint64_t)&v41);
      v40 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v26, v24, v25, (unsigned __int8 **)&v41, 0);
    if ((_QWORD)v41)
      llvm::MetadataTracking::untrack((uint64_t)&v41, (unsigned __int8 *)v41);
    if (v40)
      llvm::MetadataTracking::untrack((uint64_t)&v40, v40);
    v27 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v26 + 24) = v27;
    v28 = *(_QWORD *)(v27 + 32);
    v29 = *(unsigned int *)(v26 + 40);
    if ((_DWORD)v29)
    {
      v32 = *(_QWORD *)(v26 + 32);
      v33 = *(_QWORD *)(v28 + 40);
      v34 = 32 * v29;
      do
      {
        if (!*(_BYTE *)v32)
        {
          v35 = *(unsigned int *)(v32 + 4);
          if ((int)v35 >= 0)
            v36 = (uint64_t *)(*(_QWORD *)(v33 + 272) + 8 * v35);
          else
            v36 = (uint64_t *)(*(_QWORD *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
          v37 = *v36;
          if (*v36)
          {
            v38 = *(_QWORD *)(v37 + 16);
            *(_QWORD *)(v37 + 16) = v32;
            *(_QWORD *)(v32 + 16) = v38;
            if ((*(_BYTE *)(v32 + 3) & 1) != 0)
            {
              *(_QWORD *)(v32 + 24) = v37;
            }
            else
            {
              *(_QWORD *)(v32 + 24) = 0;
              v36 = (uint64_t *)(v38 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v32 + 16) = v32;
            *(_QWORD *)(v32 + 24) = 0;
          }
          *v36 = v32;
        }
        v32 += 32;
        v34 -= 32;
      }
      while (v34);
    }
    v30 = *(_QWORD *)(v28 + 728);
    if (v30)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v30 + 24))(v30, v26);
    v31 = *v14 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v26 = v31 | *(_QWORD *)v26 & 7;
    *(_QWORD *)(v26 + 8) = v14;
    *(_QWORD *)(v31 + 8) = v26;
    *v14 = *v14 & 7 | v26;
    *((_QWORD *)&v41 + 1) = 0;
    v42 = 0;
    v43 = 0;
    LODWORD(v41) = 0x1000000;
    DWORD1(v41) = a4;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v24, (const llvm::MachineOperand *)&v41);
    LODWORD(v41) = 1;
    *((_QWORD *)&v41 + 1) = 0;
    v42 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v24, (const llvm::MachineOperand *)&v41);
    *((_QWORD *)&v41 + 1) = 0;
    v42 = 0;
    LODWORD(v41) = 0;
    DWORD1(v41) = v22;
    v43 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v24, (const llvm::MachineOperand *)&v41);
    LODWORD(v41) = 1;
    *((_QWORD *)&v41 + 1) = 0;
    v42 = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v24, (const llvm::MachineOperand *)&v41);
    LODWORD(v41) = 1;
    *((_QWORD *)&v41 + 1) = 0;
    v42 = a6;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v24, (const llvm::MachineOperand *)&v41);
  }
  else
  {
    sub_1C49D63F4((uint64_t)this, (uint64_t)a2, v14, a5, a4, 1, 0, &v39, 0);
  }
  if (v39)
    llvm::MetadataTracking::untrack((uint64_t)&v39, v39);
}

void sub_1C49FDE68(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, unsigned int a5, int a6, uint64_t a7)
{
  unint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  llvm::MachineFunction *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  llvm::MachineFunction *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::MachineFunction *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;

  v12 = (unint64_t *)a2[7];
  if (a2 + 6 == v12)
  {
LABEL_98:
    v18 = 0;
    v68 = 0;
  }
  else
  {
    v13 = a2[7];
    while (1)
    {
      v14 = **(unsigned __int16 **)(v13 + 16);
      v15 = v14 > 0x17;
      v16 = (1 << v14) & 0x83E000;
      if (v15 || v16 == 0)
        break;
      v13 = *(_QWORD *)(v13 + 8);
      if ((_QWORD *)v13 == a2 + 6)
        goto LABEL_98;
    }
    v18 = *(unsigned __int8 **)(v13 + 56);
    v68 = v18;
    if (v18)
    {
      llvm::MetadataTracking::track((uint64_t)&v68, v18, 2);
      v18 = v68;
    }
  }
  if (a6)
  {
    v52 = *(_QWORD *)(a7 + 8);
    v53 = (llvm::MachineFunction *)a2[4];
    v73 = v18;
    if (v18)
      llvm::MetadataTracking::track((uint64_t)&v73, v18, 2);
    v54 = v52 + 26016;
    v55 = *((_QWORD *)v53 + 28);
    if (v55)
      *((_QWORD *)v53 + 28) = *(_QWORD *)v55;
    else
      v55 = sub_1C484358C((uint64_t)v53 + 128, 72, 3);
    v69 = (uint64_t)v73;
    if (v73)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v73, v73, (uint64_t)&v69);
      v73 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v55, v53, v54, (unsigned __int8 **)&v69, 0);
    if (v69)
      llvm::MetadataTracking::untrack((uint64_t)&v69, (unsigned __int8 *)v69);
    if (v73)
      llvm::MetadataTracking::untrack((uint64_t)&v73, v73);
    v56 = a2[5];
    *(_QWORD *)(v55 + 24) = v56;
    v57 = *(_QWORD *)(v56 + 32);
    v58 = *(unsigned int *)(v55 + 40);
    if ((_DWORD)v58)
    {
      v61 = *(_QWORD *)(v55 + 32);
      v62 = *(_QWORD *)(v57 + 40);
      v63 = 32 * v58;
      do
      {
        if (!*(_BYTE *)v61)
        {
          v64 = *(unsigned int *)(v61 + 4);
          if ((int)v64 >= 0)
            v65 = (uint64_t *)(*(_QWORD *)(v62 + 272) + 8 * v64);
          else
            v65 = (uint64_t *)(*(_QWORD *)(v62 + 24) + 16 * (v64 & 0x7FFFFFFF) + 8);
          v66 = *v65;
          if (*v65)
          {
            v67 = *(_QWORD *)(v66 + 16);
            *(_QWORD *)(v66 + 16) = v61;
            *(_QWORD *)(v61 + 16) = v67;
            if ((*(_BYTE *)(v61 + 3) & 1) != 0)
            {
              *(_QWORD *)(v61 + 24) = v66;
            }
            else
            {
              *(_QWORD *)(v61 + 24) = 0;
              v65 = (uint64_t *)(v67 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v61 + 16) = v61;
            *(_QWORD *)(v61 + 24) = 0;
          }
          *v65 = v61;
        }
        v61 += 32;
        v63 -= 32;
      }
      while (v63);
    }
    v59 = *(_QWORD *)(v57 + 728);
    if (v59)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v59 + 24))(v59, v55);
    v60 = *v12 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v55 = v60 | *(_QWORD *)v55 & 7;
    *(_QWORD *)(v55 + 8) = v12;
    *(_QWORD *)(v60 + 8) = v55;
    *v12 = *v12 & 7 | v55;
    LODWORD(v69) = 1;
    v70 = 0;
    v71 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v69);
    v70 = 0;
    v71 = 0;
    v69 = 0x200000000;
    v72 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v69);
    LODWORD(v69) = 1;
    v70 = 0;
    v71 = 1;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v55, v53, (const llvm::MachineOperand *)&v69);
    v19 = 545;
    v18 = v68;
  }
  else
  {
    v19 = 548;
  }
  v20 = *(_QWORD *)(a7 + 8);
  v21 = (llvm::MachineFunction *)a2[4];
  v73 = v18;
  if (v18)
    llvm::MetadataTracking::track((uint64_t)&v73, v18, 2);
  v22 = v20 + 215904;
  v23 = *((_QWORD *)v21 + 28);
  if (v23)
    *((_QWORD *)v21 + 28) = *(_QWORD *)v23;
  else
    v23 = sub_1C484358C((uint64_t)v21 + 128, 72, 3);
  v69 = (uint64_t)v73;
  if (v73)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v73, v73, (uint64_t)&v69);
    v73 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v23, v21, v22, (unsigned __int8 **)&v69, 0);
  if (v69)
    llvm::MetadataTracking::untrack((uint64_t)&v69, (unsigned __int8 *)v69);
  if (v73)
    llvm::MetadataTracking::untrack((uint64_t)&v73, v73);
  v24 = a2[5];
  *(_QWORD *)(v23 + 24) = v24;
  v25 = *(_QWORD *)(v24 + 32);
  v26 = *(unsigned int *)(v23 + 40);
  if ((_DWORD)v26)
  {
    v38 = *(_QWORD *)(v23 + 32);
    v39 = *(_QWORD *)(v25 + 40);
    v40 = 32 * v26;
    do
    {
      if (!*(_BYTE *)v38)
      {
        v41 = *(unsigned int *)(v38 + 4);
        if ((int)v41 >= 0)
          v42 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v41);
        else
          v42 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
        v43 = *v42;
        if (*v42)
        {
          v44 = *(_QWORD *)(v43 + 16);
          *(_QWORD *)(v43 + 16) = v38;
          *(_QWORD *)(v38 + 16) = v44;
          if ((*(_BYTE *)(v38 + 3) & 1) != 0)
          {
            *(_QWORD *)(v38 + 24) = v43;
          }
          else
          {
            *(_QWORD *)(v38 + 24) = 0;
            v42 = (uint64_t *)(v44 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v38 + 16) = v38;
          *(_QWORD *)(v38 + 24) = 0;
        }
        *v42 = v38;
      }
      v38 += 32;
      v40 -= 32;
    }
    while (v40);
  }
  v27 = *(_QWORD *)(v25 + 728);
  if (v27)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v27 + 24))(v27, v23);
  v28 = *v12 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v23 = v28 | *(_QWORD *)v23 & 7;
  *(_QWORD *)(v23 + 8) = v12;
  *(_QWORD *)(v28 + 8) = v23;
  *v12 = *v12 & 7 | v23;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v69 = 0x4A01000000;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v21, (const llvm::MachineOperand *)&v69);
  LODWORD(v69) = 1;
  v70 = 0;
  v71 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v21, (const llvm::MachineOperand *)&v69);
  LODWORD(v69) = 1;
  v70 = 0;
  v71 = 8;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v21, (const llvm::MachineOperand *)&v69);
  v70 = 0;
  v71 = 0;
  LODWORD(v69) = 0;
  HIDWORD(v69) = a4;
  v72 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v21, (const llvm::MachineOperand *)&v69);
  LODWORD(v69) = 1;
  v70 = 0;
  v71 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v21, (const llvm::MachineOperand *)&v69);
  LODWORD(v69) = 1;
  v70 = 0;
  v71 = a5;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v23, v21, (const llvm::MachineOperand *)&v69);
  v29 = *(_QWORD *)(a7 + 8);
  v30 = (llvm::MachineFunction *)a2[4];
  v73 = v68;
  if (v68)
    llvm::MetadataTracking::track((uint64_t)&v73, v68, 2);
  v31 = v29 + 48 * v19;
  v32 = *((_QWORD *)v30 + 28);
  if (v32)
    *((_QWORD *)v30 + 28) = *(_QWORD *)v32;
  else
    v32 = sub_1C484358C((uint64_t)v30 + 128, 72, 3);
  v69 = (uint64_t)v73;
  if (v73)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v73, v73, (uint64_t)&v69);
    v73 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v30, v31, (unsigned __int8 **)&v69, 0);
  if (v69)
    llvm::MetadataTracking::untrack((uint64_t)&v69, (unsigned __int8 *)v69);
  if (v73)
    llvm::MetadataTracking::untrack((uint64_t)&v73, v73);
  v33 = a2[5];
  *(_QWORD *)(v32 + 24) = v33;
  v34 = *(_QWORD *)(v33 + 32);
  v35 = *(unsigned int *)(v32 + 40);
  if ((_DWORD)v35)
  {
    v45 = *(_QWORD *)(v32 + 32);
    v46 = *(_QWORD *)(v34 + 40);
    v47 = 32 * v35;
    do
    {
      if (!*(_BYTE *)v45)
      {
        v48 = *(unsigned int *)(v45 + 4);
        if ((int)v48 >= 0)
          v49 = (uint64_t *)(*(_QWORD *)(v46 + 272) + 8 * v48);
        else
          v49 = (uint64_t *)(*(_QWORD *)(v46 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
        v50 = *v49;
        if (*v49)
        {
          v51 = *(_QWORD *)(v50 + 16);
          *(_QWORD *)(v50 + 16) = v45;
          *(_QWORD *)(v45 + 16) = v51;
          if ((*(_BYTE *)(v45 + 3) & 1) != 0)
          {
            *(_QWORD *)(v45 + 24) = v50;
          }
          else
          {
            *(_QWORD *)(v45 + 24) = 0;
            v49 = (uint64_t *)(v51 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v45 + 16) = v45;
          *(_QWORD *)(v45 + 24) = 0;
        }
        *v49 = v45;
      }
      v45 += 32;
      v47 -= 32;
    }
    while (v47);
  }
  v36 = *(_QWORD *)(v34 + 728);
  if (v36)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v36 + 24))(v36, v32);
  v37 = *v12 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v32 = v37 | *(_QWORD *)v32 & 7;
  *(_QWORD *)(v32 + 8) = v12;
  *(_QWORD *)(v37 + 8) = v32;
  *v12 = *v12 & 7 | v32;
  LODWORD(v69) = 1;
  v70 = 0;
  v71 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v30, (const llvm::MachineOperand *)&v69);
  v70 = 0;
  v71 = 0;
  v69 = 0x4A00000000;
  v72 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v30, (const llvm::MachineOperand *)&v69);
  LODWORD(v69) = 1;
  v70 = 0;
  v71 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v32, v30, (const llvm::MachineOperand *)&v69);
  if (v68)
    llvm::MetadataTracking::untrack((uint64_t)&v68, v68);
}

unint64_t sub_1C49FE550(uint64_t a1, llvm::TargetInstrInfo *this)
{
  uint64_t v2;
  unint64_t v5;
  unsigned __int16 *v6;
  int v7;
  BOOL v8;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 56);
  if (a1 + 48 == v2)
    return 0;
  v5 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (*(_BYTE *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 4) != 0)
      v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    v6 = *(unsigned __int16 **)(v5 + 16);
    v7 = *v6;
    v8 = (v7 - 9) > 0x3C || ((1 << (v7 - 9)) & 0x1000000000000605) == 0;
    v9 = !v8 || v7 == 0;
    if (!v9 && (v6[4] & 0x10) == 0)
      break;
    if (v5 == v2)
      return 0;
    v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    if (!v5 || (*(_BYTE *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 4) != 0)
        v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while (**(_WORD **)(v5 + 16) != 305)
  {
    if (v5 != *(_QWORD *)(a1 + 56))
    {
      v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
      if (!v5 || (*(_BYTE *)v5 & 4) == 0)
      {
        while ((*(_WORD *)(v5 + 44) & 4) != 0)
          v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((llvm::TargetInstrInfo::isUnpredicatedTerminator(this, (const llvm::MachineInstr *)v5) & 1) != 0)
        continue;
    }
    return 0;
  }
  return v5;
}

void sub_1C49FE678(int a1, unint64_t *a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, int a6, int a7, uint64_t a8)
{
  unint64_t *v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::MachineFunction *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;

  if ((unint64_t *)(a3 + 48) == a2)
  {
LABEL_71:
    v55 = 0;
  }
  else
  {
    v16 = a2;
    while (1)
    {
      v17 = *(unsigned __int16 *)v16[2];
      v18 = v17 > 0x17;
      v19 = (1 << v17) & 0x83E000;
      if (v18 || v19 == 0)
        break;
      v16 = (unint64_t *)v16[1];
      if (v16 == (unint64_t *)(a3 + 48))
        goto LABEL_71;
    }
    v21 = (unsigned __int8 *)v16[7];
    v55 = v21;
    if (v21)
      llvm::MetadataTracking::track((uint64_t)&v55, v21, 2);
  }
  sub_1C49D63F4(a8, a3, a2, a5, a7, 1, 0, &v55, 0);
  v22 = *(_QWORD *)(a8 + 8);
  if (a6)
    v23 = 26352;
  else
    v23 = 26304;
  v24 = *(llvm::MachineFunction **)(a3 + 32);
  v60 = v55;
  if (v55)
    llvm::MetadataTracking::track((uint64_t)&v60, v55, 2);
  v25 = v22 + v23;
  v26 = *((_QWORD *)v24 + 28);
  if (v26)
    *((_QWORD *)v24 + 28) = *(_QWORD *)v26;
  else
    v26 = sub_1C484358C((uint64_t)v24 + 128, 72, 3);
  v56 = v60;
  if (v60)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v60, v60, (uint64_t)&v56);
    v60 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v26, v24, v25, &v56, 0);
  if (v56)
    llvm::MetadataTracking::untrack((uint64_t)&v56, v56);
  if (v60)
    llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
  v27 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(v26 + 24) = v27;
  v28 = *(_QWORD *)(v27 + 32);
  v29 = *(unsigned int *)(v26 + 40);
  if ((_DWORD)v29)
  {
    v41 = *(_QWORD *)(v26 + 32);
    v42 = *(_QWORD *)(v28 + 40);
    v43 = 32 * v29;
    do
    {
      if (!*(_BYTE *)v41)
      {
        v44 = *(unsigned int *)(v41 + 4);
        if ((int)v44 >= 0)
          v45 = (uint64_t *)(*(_QWORD *)(v42 + 272) + 8 * v44);
        else
          v45 = (uint64_t *)(*(_QWORD *)(v42 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8);
        v46 = *v45;
        if (*v45)
        {
          v47 = *(_QWORD *)(v46 + 16);
          *(_QWORD *)(v46 + 16) = v41;
          *(_QWORD *)(v41 + 16) = v47;
          if ((*(_BYTE *)(v41 + 3) & 1) != 0)
          {
            *(_QWORD *)(v41 + 24) = v46;
          }
          else
          {
            *(_QWORD *)(v41 + 24) = 0;
            v45 = (uint64_t *)(v47 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v41 + 16) = v41;
          *(_QWORD *)(v41 + 24) = 0;
        }
        *v45 = v41;
      }
      v41 += 32;
      v43 -= 32;
    }
    while (v43);
  }
  v30 = *(_QWORD *)(v28 + 728);
  if (v30)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v30 + 24))(v30, v26);
  v31 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v26 = v31 | *(_QWORD *)v26 & 7;
  *(_QWORD *)(v26 + 8) = a2;
  *(_QWORD *)(v31 + 8) = v26;
  *a2 = *a2 & 7 | v26;
  LODWORD(v56) = 1;
  v57 = 0;
  v58 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v24, (const llvm::MachineOperand *)&v56);
  v57 = 0;
  v58 = 0;
  LODWORD(v56) = 0;
  HIDWORD(v56) = a1;
  v59 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v24, (const llvm::MachineOperand *)&v56);
  LODWORD(v56) = 1;
  v57 = 0;
  v58 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v26, v24, (const llvm::MachineOperand *)&v56);
  sub_1C49D63F4(a8, a3, a2, a4, a7, 1, 0, &v55, 0);
  v32 = *(_QWORD *)(a8 + 8);
  v33 = *(llvm::MachineFunction **)(a3 + 32);
  v60 = v55;
  if (v55)
    llvm::MetadataTracking::track((uint64_t)&v60, v55, 2);
  v34 = v32 + 26112;
  v35 = *((_QWORD *)v33 + 28);
  if (v35)
    *((_QWORD *)v33 + 28) = *(_QWORD *)v35;
  else
    v35 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
  v56 = v60;
  if (v60)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v60, v60, (uint64_t)&v56);
    v60 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v35, v33, v34, &v56, 0);
  if (v56)
    llvm::MetadataTracking::untrack((uint64_t)&v56, v56);
  if (v60)
    llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
  v36 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(v35 + 24) = v36;
  v37 = *(_QWORD *)(v36 + 32);
  v38 = *(unsigned int *)(v35 + 40);
  if ((_DWORD)v38)
  {
    v48 = *(_QWORD *)(v35 + 32);
    v49 = *(_QWORD *)(v37 + 40);
    v50 = 32 * v38;
    do
    {
      if (!*(_BYTE *)v48)
      {
        v51 = *(unsigned int *)(v48 + 4);
        if ((int)v51 >= 0)
          v52 = (uint64_t *)(*(_QWORD *)(v49 + 272) + 8 * v51);
        else
          v52 = (uint64_t *)(*(_QWORD *)(v49 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
        v53 = *v52;
        if (*v52)
        {
          v54 = *(_QWORD *)(v53 + 16);
          *(_QWORD *)(v53 + 16) = v48;
          *(_QWORD *)(v48 + 16) = v54;
          if ((*(_BYTE *)(v48 + 3) & 1) != 0)
          {
            *(_QWORD *)(v48 + 24) = v53;
          }
          else
          {
            *(_QWORD *)(v48 + 24) = 0;
            v52 = (uint64_t *)(v54 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v48 + 16) = v48;
          *(_QWORD *)(v48 + 24) = 0;
        }
        *v52 = v48;
      }
      v48 += 32;
      v50 -= 32;
    }
    while (v50);
  }
  v39 = *(_QWORD *)(v37 + 728);
  if (v39)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 24))(v39, v35);
  v40 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v35 = v40 | *(_QWORD *)v35 & 7;
  *(_QWORD *)(v35 + 8) = a2;
  *(_QWORD *)(v40 + 8) = v35;
  *a2 = *a2 & 7 | v35;
  LODWORD(v56) = 1;
  v57 = 0;
  v58 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v56);
  LODWORD(v56) = 1;
  v57 = 0;
  v58 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v56);
  if (v55)
    llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
}

void sub_1C49FEB4C(llvm::MachineBasicBlock *this, int a2, unsigned __int8 **a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t *FirstInstrTerminator;
  uint64_t v12;
  llvm::MachineFunction *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  llvm::MachineInstr *v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;

  LODWORD(v6) = a6;
  if (a5)
    FirstInstrTerminator = (uint64_t *)*((_QWORD *)this + 7);
  else
    FirstInstrTerminator = (uint64_t *)llvm::MachineBasicBlock::getFirstInstrTerminator(this);
  v12 = *(_QWORD *)(a4 + 8);
  v13 = (llvm::MachineFunction *)*((_QWORD *)this + 4);
  v14 = *a3;
  v21 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v21, v14, 2);
  v15 = v12 + 26112;
  v16 = (llvm::MachineInstr *)*((_QWORD *)v13 + 28);
  if (v16)
    *((_QWORD *)v13 + 28) = *(_QWORD *)v16;
  else
    v16 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v13 + 128, 72, 3);
  v18 = v21;
  if (v21)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v21, v21, (uint64_t)&v18);
    v21 = 0;
  }
  llvm::MachineInstr::MachineInstr(v16, v13, v15, &v18, 0);
  if (v18)
    llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
  if (v21)
    llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
  if ((uint64_t *)((char *)this + 48) != FirstInstrTerminator && (*((_WORD *)FirstInstrTerminator + 22) & 4) != 0)
    *((_WORD *)v16 + 22) |= 0xCu;
  if (a2)
    v17 = 2;
  else
    v17 = 1;
  if ((_DWORD)v6 == -1)
    v6 = v17;
  else
    v6 = v6;
  sub_1C512CA10((uint64_t *)this + 5, FirstInstrTerminator, (uint64_t)v16);
  LODWORD(v18) = 1;
  v19 = 0;
  v20 = 0;
  llvm::MachineInstr::addOperand(v16, v13, (const llvm::MachineOperand *)&v18);
  LODWORD(v18) = 1;
  v19 = 0;
  v20 = v6;
  llvm::MachineInstr::addOperand(v16, v13, (const llvm::MachineOperand *)&v18);
}

void sub_1C49FECDC(uint64_t a1, uint64_t a2, unint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unsigned __int8 *v14;
  uint64_t **v15;
  uint64_t *FixedStack;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  llvm::MachineFunction *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36[4];
  unsigned __int8 *v37;
  unint64_t **v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_DWORD *)(v6 + 48);
  v8 = *(_DWORD *)(v6 + 72);
  v9 = (*(unsigned __int16 *)(*(_QWORD *)a2 + 18) >> 4) & 0x3FF;
  if (v9)
    v10 = v9 == 8;
  else
    v10 = 1;
  if ((v10 || v9 == 255) && sub_1C495C228(a2))
  {
    v13 = a3[7];
    v36[0] = 0;
    sub_1C49D63F4(v5, (uint64_t)a3, v13, 0, 267, 1, 0, v36, 0);
    if (v36[0])
      llvm::MetadataTracking::untrack((uint64_t)v36, v36[0]);
  }
  if (v8 >= 1)
    sub_1C4A13C98(v5, v7, (llvm::MachineBasicBlock *)a3, a3[7]);
  v11 = *(_QWORD *)(a2 + 48);
  if (!v11)
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v11;
  }
  v12 = *(_QWORD *)(v11 + 536);
  if ((v12 & 0xFF00000000) != 0)
  {
    v36[0] = (unsigned __int8 *)&off_1E816EC08;
    v36[1] = (unsigned __int8 *)a2;
    v14 = *(unsigned __int8 **)(a2 + 40);
    v41 = 0;
    v36[3] = v14;
    v36[2] = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
    v37 = 0;
    v38 = a3;
    v15 = *(uint64_t ***)(a2 + 432);
    v39 = a3[7];
    v40 = 0;
    FixedStack = llvm::PseudoSourceValueManager::getFixedStack(v15, v12);
    v17 = (unint64_t)FixedStack | 4;
    if (FixedStack)
      v18 = *((_DWORD *)FixedStack + 3);
    else
      v18 = 0;
    v19 = sub_1C484358C(a2 + 128, 80, 3);
    *(_QWORD *)v19 = v17;
    *(_QWORD *)(v19 + 8) = 0;
    *(_DWORD *)(v19 + 16) = v18;
    *(_BYTE *)(v19 + 20) = 0;
    *(_QWORD *)(v19 + 24) = 257;
    *(_WORD *)(v19 + 32) = 2;
    *(_BYTE *)(v19 + 34) = 2;
    *(_OWORD *)(v19 + 40) = 0u;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_QWORD *)(v19 + 72) = 0;
    *(_WORD *)(v19 + 36) = 1;
    v21 = sub_1C55437B8(v36, 0x233Au);
    v22 = (unint64_t *)v20;
    v23 = v39;
    v24 = v38[5];
    *(_QWORD *)(v20 + 24) = v24;
    v25 = v24[4];
    v26 = *(unsigned int *)(v20 + 40);
    if ((_DWORD)v26)
    {
      v29 = *(_QWORD *)(v20 + 32);
      v30 = *(_QWORD *)(v25 + 40);
      v31 = 32 * v26;
      do
      {
        if (!*(_BYTE *)v29)
        {
          v32 = *(unsigned int *)(v29 + 4);
          if ((int)v32 >= 0)
            v33 = (uint64_t *)(*(_QWORD *)(v30 + 272) + 8 * v32);
          else
            v33 = (uint64_t *)(*(_QWORD *)(v30 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
          v34 = *v33;
          if (*v33)
          {
            v35 = *(_QWORD *)(v34 + 16);
            *(_QWORD *)(v34 + 16) = v29;
            *(_QWORD *)(v29 + 16) = v35;
            if ((*(_BYTE *)(v29 + 3) & 1) != 0)
            {
              *(_QWORD *)(v29 + 24) = v34;
            }
            else
            {
              *(_QWORD *)(v29 + 24) = 0;
              v33 = (uint64_t *)(v35 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v29 + 16) = v29;
            *(_QWORD *)(v29 + 24) = 0;
          }
          *v33 = v29;
        }
        v29 += 32;
        v31 -= 32;
      }
      while (v31);
    }
    v27 = *(_QWORD *)(v25 + 728);
    if (v27)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 24))(v27, v20);
    v28 = *v23 & 0xFFFFFFFFFFFFFFF8;
    *v22 = v28 | *v22 & 7;
    v22[1] = (unint64_t)v23;
    *(_QWORD *)(v28 + 8) = v22;
    *v23 = *v23 & 7 | (unint64_t)v22;
    if (v40)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v40 + 24))(v40, v22);
    v42 = 5;
    v43 = 0;
    LODWORD(v44) = v12;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v21, (const llvm::MachineOperand *)&v42);
    v42 = 1;
    v43 = 0;
    v44 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v21, (const llvm::MachineOperand *)&v42);
    v42 = 1;
    v43 = 0;
    v44 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v22, v21, (const llvm::MachineOperand *)&v42);
    llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v22, v21, (llvm::MachineMemOperand *)v19);
    v36[0] = (unsigned __int8 *)&off_1E816EC08;
    if (v37)
      llvm::MetadataTracking::untrack((uint64_t)&v37, v37);
  }
}

void sub_1C49FF028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *FixedStack;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  llvm::MachineFunction *v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33[4];
  unsigned __int8 *v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v6 = (*(unsigned __int16 *)(*(_QWORD *)a2 + 18) >> 4) & 0x3FF;
  if (v6)
    v7 = v6 == 8;
  else
    v7 = 1;
  if ((v7 || v6 == 255) && sub_1C495C228(a2))
  {
    v10 = *(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (!v10 || (*(_BYTE *)v10 & 4) == 0)
    {
      while ((*(_WORD *)(v10 + 44) & 4) != 0)
        v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8;
    }
    v33[0] = 0;
    sub_1C49D63F4(v5, a3, (unint64_t *)v10, 0, 267, 1, 0, v33, 0);
    if (v33[0])
      llvm::MetadataTracking::untrack((uint64_t)v33, v33[0]);
  }
  v8 = *(_QWORD *)(a2 + 48);
  if (!v8)
  {
    v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v8;
  }
  v9 = *(_QWORD *)(v8 + 536);
  if ((v9 & 0xFF00000000) != 0)
  {
    v35 = 0u;
    v36 = 0u;
    v33[0] = (unsigned __int8 *)&off_1E816EC08;
    v33[1] = (unsigned __int8 *)a2;
    v33[3] = *(unsigned __int8 **)(a2 + 40);
    v33[2] = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
    v34 = 0;
    v11 = *(_QWORD *)(a3 + 48);
    *((_QWORD *)&v35 + 1) = 0;
    *(_QWORD *)&v36 = 0;
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if (!v12 || (*(_BYTE *)v12 & 4) == 0)
    {
      while ((*(_WORD *)(v12 + 44) & 4) != 0)
        v12 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)&v35 = a3;
    *((_QWORD *)&v35 + 1) = v12;
    FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(a2 + 432), v9);
    v14 = (unint64_t)FixedStack | 4;
    if (FixedStack)
      v15 = *((_DWORD *)FixedStack + 3);
    else
      v15 = 0;
    v16 = sub_1C484358C(a2 + 128, 80, 3);
    *(_QWORD *)v16 = v14;
    *(_QWORD *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 16) = v15;
    *(_BYTE *)(v16 + 20) = 0;
    *(_QWORD *)(v16 + 24) = 257;
    *(_WORD *)(v16 + 32) = 1;
    *(_BYTE *)(v16 + 34) = 2;
    *(_OWORD *)(v16 + 40) = 0u;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_QWORD *)(v16 + 72) = 0;
    *(_WORD *)(v16 + 36) = 1;
    v18 = sub_1C55437B8(v33, 0x2337u);
    v19 = (unint64_t *)v17;
    v20 = (unint64_t *)*((_QWORD *)&v35 + 1);
    v21 = *(_QWORD *)(v35 + 40);
    *(_QWORD *)(v17 + 24) = v21;
    v22 = *(_QWORD *)(v21 + 32);
    v23 = *(unsigned int *)(v17 + 40);
    if ((_DWORD)v23)
    {
      v26 = *(_QWORD *)(v17 + 32);
      v27 = *(_QWORD *)(v22 + 40);
      v28 = 32 * v23;
      do
      {
        if (!*(_BYTE *)v26)
        {
          v29 = *(unsigned int *)(v26 + 4);
          if ((int)v29 >= 0)
            v30 = (uint64_t *)(*(_QWORD *)(v27 + 272) + 8 * v29);
          else
            v30 = (uint64_t *)(*(_QWORD *)(v27 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
          v31 = *v30;
          if (*v30)
          {
            v32 = *(_QWORD *)(v31 + 16);
            *(_QWORD *)(v31 + 16) = v26;
            *(_QWORD *)(v26 + 16) = v32;
            if ((*(_BYTE *)(v26 + 3) & 1) != 0)
            {
              *(_QWORD *)(v26 + 24) = v31;
            }
            else
            {
              *(_QWORD *)(v26 + 24) = 0;
              v30 = (uint64_t *)(v32 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v26 + 16) = v26;
            *(_QWORD *)(v26 + 24) = 0;
          }
          *v30 = v26;
        }
        v26 += 32;
        v28 -= 32;
      }
      while (v28);
    }
    v24 = *(_QWORD *)(v22 + 728);
    if (v24)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 24))(v24, v17);
    v25 = *v20 & 0xFFFFFFFFFFFFFFF8;
    *v19 = v25 | *v19 & 7;
    v19[1] = (unint64_t)v20;
    *(_QWORD *)(v25 + 8) = v19;
    *v20 = *v20 & 7 | (unint64_t)v19;
    if ((_QWORD)v36)
      (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v36 + 24))(v36, v19);
    v37 = 1;
    v38 = 0;
    v39 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v37);
    v37 = 5;
    v38 = 0;
    LODWORD(v39) = v9;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v37);
    v37 = 1;
    v38 = 0;
    v39 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v37);
    v37 = 1;
    v38 = 0;
    v39 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v18, (const llvm::MachineOperand *)&v37);
    llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v19, v18, (llvm::MachineMemOperand *)v16);
    v33[0] = (unsigned __int8 *)&off_1E816EC08;
    if (v34)
      llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
  }
}

uint64_t sub_1C49FF3B0()
{
  return 0;
}

void sub_1C49FF3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::MachineFrameInfo *v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  BOOL v16;
  int FixedSpillStackObject;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t i;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  int64_t v39;
  int SpillStackObject;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  _BOOL4 v51;
  uint64_t v52;
  llvm::MachineFrameInfo *v53;
  _QWORD v54[2];
  int v55;
  void *v56[2];
  uint64_t v57;
  void *v58;
  unsigned int v59;
  _QWORD v60[6];

  v60[4] = *MEMORY[0x1E0C80C00];
  v5 = *(llvm::MachineFrameInfo **)(a2 + 56);
  v6 = *((_DWORD *)v5 + 8);
  if (v6)
  {
    v7 = -v6;
    v8 = (uint64_t *)*((_QWORD *)v5 + 1);
    v9 = v7 + 1;
    v10 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      v12 = *v8;
      v8 += 5;
      v11 = v12;
      if (v12 < v10)
        v10 = v11;
    }
    while ((_DWORD)v9++);
  }
  else
  {
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v14 = *((unsigned __int8 *)v5 + 62);
  v15 = *(_QWORD *)(a2 + 48);
  if (!v15)
  {
    v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v15;
  }
  if (*(unsigned __int8 *)(v15 + 496) | v14)
    v16 = ((*(unsigned __int16 *)(*(_QWORD *)a2 + 18) >> 4) & 0x3FFu) - 100 >= 9;
  else
    v16 = 0;
  if (v16)
  {
    if (v10 >= 4)
    {
      FixedSpillStackObject = llvm::MachineFrameInfo::CreateFixedSpillStackObject(v5, 4, 0, 0);
      v10 = 0;
    }
    else
    {
      FixedSpillStackObject = llvm::MachineFrameInfo::CreateSpillStackObject((unsigned __int8 *)v5, 4, 2u);
    }
    v18 = *(unsigned __int8 *)(v15 + 540);
    *(_DWORD *)(v15 + 536) = FixedSpillStackObject;
    if (!v18)
      *(_BYTE *)(v15 + 540) = 1;
  }
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v20 = *(_QWORD *)(a2 + 328);
  v52 = a2 + 320;
  if (v20 == a2 + 320)
    goto LABEL_86;
  v21 = v19;
  v53 = v5;
  v22 = 0;
  while (2)
  {
    for (i = *(_QWORD *)(v20 + 56); i != v20 + 48; i = *(_QWORD *)(i + 8))
    {
      v24 = **(unsigned __int16 **)(i + 16);
      v25 = sub_1C4C915C4(v24);
      v26 = v25 & 0xFF00000000;
      if ((v25 & 0xFF00000000) != 0 && v25 == 65)
        goto LABEL_26;
      v54[0] = i;
      v54[1] = v21;
      v55 = v24;
      v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(i + 24) + 32) + 16);
      if (!*(_BYTE *)(v27 + 372))
        goto LABEL_97;
      if (!v26)
        goto LABEL_42;
      if (v25 > 0x25 || ((1 << v25) & 0x300C000000) == 0)
      {
LABEL_97:
        if (*(_BYTE *)(v27 + 360))
          v28 = v26 == 0;
        else
          v28 = 1;
        if (!v28)
        {
          v29 = (v25 - 61) > 0x3C || ((1 << (v25 - 61)) & 0x100037B180000007) == 0;
          if (!v29 || ((v25 - 190) <= 3 ? (v30 = (_DWORD)v25 == 191) : (v30 = 1), !v30))
          {
            sub_1C4AD642C((int *)v54, (uint64_t)v56);
            sub_1C4AD662C((uint64_t)v54, (uint64_t)v56, 0, 0, 0, &v58);
            if (v56[0] != &v57)
              free(v56[0]);
            if (v59)
            {
              v34 = 8 * v59;
              v35 = (unsigned int *)((char *)v58 + 4);
              do
              {
                v36 = *v35;
                v35 += 2;
                *(_DWORD *)(*(_QWORD *)(i + 32) + 32 * v36) &= ~0x8000000u;
                v34 -= 8;
              }
              while (v34);
              if (v58 != v60)
                free(v58);
              v33 = 3;
              goto LABEL_72;
            }
            if (v58 != v60)
              free(v58);
            v24 = **(unsigned __int16 **)(i + 16);
          }
        }
LABEL_42:
        if (v24 == 332)
          v22 = 1;
        goto LABEL_44;
      }
      v32 = (_DWORD *)(*(_QWORD *)(i + 32) + 32 * sub_1C4C2FD5C(v24));
      if (!*(_BYTE *)v32)
      {
        v50 = v32[1];
        sub_1C6158918((int *)v54, (uint64_t)&v58);
        v51 = sub_1C6158A54((uint64_t)v54, (uint64_t)&v58, v50, 0, 0);
        if (v58 != v60)
          free(v58);
        if (v51)
        {
          *v32 &= ~0x8000000u;
LABEL_26:
          v22 = 1;
        }
      }
LABEL_44:
      if ((*(_BYTE *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          i = *(_QWORD *)(i + 8);
      }
    }
    v20 = *(_QWORD *)(v20 + 8);
    if (v20 != v52)
      continue;
    break;
  }
  if (!v22)
  {
    v5 = v53;
    goto LABEL_86;
  }
  v33 = 1;
  do
  {
LABEL_72:
    v37 = *(_QWORD *)(v21 + 264);
    v38 = *(_DWORD *)(v21 + 272) * ((*(_QWORD *)(v21 + 248) - *(_QWORD *)(v21 + 240)) >> 3) + 10;
    v39 = (unint64_t)*(unsigned int *)(v37 + 24 * v38 + 4) >> 3;
    if (v10 >= v39)
    {
      SpillStackObject = llvm::MachineFrameInfo::CreateFixedSpillStackObject(v53, v39, 0, 0);
      v10 = 0;
    }
    else
    {
      SpillStackObject = llvm::MachineFrameInfo::CreateSpillStackObject((unsigned __int8 *)v53, v39, 63 - __clz((unint64_t)*(unsigned int *)(v37 + 24 * v38 + 8) >> 3));
    }
    v41 = *(unsigned int *)(v15 + 512);
    if (v41 >= *(unsigned int *)(v15 + 516))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15 + 504, v15 + 520, v41 + 1, 4);
      v41 = *(unsigned int *)(v15 + 512);
    }
    *(_DWORD *)(*(_QWORD *)(v15 + 504) + 4 * v41) = SpillStackObject;
    v42 = *(_DWORD *)(v15 + 512) + 1;
    *(_DWORD *)(v15 + 512) = v42;
    --v33;
  }
  while (v33);
  if (v42)
    v43 = **(unsigned int **)(v15 + 504);
  else
    v43 = 0;
  v5 = v53;
  if (a3)
  {
    v44 = *(unsigned int *)(a3 + 56);
    if (v44 >= *(_DWORD *)(a3 + 60))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 48, a3 + 64, v44 + 1, 16);
      LODWORD(v44) = *(_DWORD *)(a3 + 56);
    }
    v45 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v44);
    *v45 = v43;
    v45[1] = 0;
    ++*(_DWORD *)(a3 + 56);
  }
LABEL_86:
  if (v10 >= 1)
  {
    v46 = *((_QWORD *)v5 + 1);
    v47 = *((_DWORD *)v5 + 8);
    v48 = -858993459 * ((unint64_t)(*((_QWORD *)v5 + 2) - v46) >> 3) - v47;
    if ((_DWORD)v48)
    {
      while (!*(_BYTE *)(v46 + 40 * v47 + 33))
      {
        ++v47;
        if (!--v48)
          return;
      }
      if (v10 >= 4)
        v49 = 4;
      else
        v49 = v10;
      llvm::MachineFrameInfo::CreateFixedSpillStackObject(v5, v49, 0, 0);
    }
  }
}

void sub_1C49FF904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  unint64_t v4;
  int *v5;
  const std::nothrow_t *v6;
  unint64_t v7;
  int *v8;
  BOOL v9;
  int *v10;
  uint64_t v11;

  v3 = *(int **)a3;
  v4 = *(unsigned int *)(a3 + 8);
  v5 = (int *)(*(_QWORD *)a3 + 4 * v4);
  v11 = *(_QWORD *)(a2 + 56);
  if (v4 < 0x81)
  {
LABEL_5:
    sub_1C49FFD7C(v3, v5, &v11, v4, 0, 0);
  }
  else
  {
    v6 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v7 = v4;
    while (1)
    {
      v8 = (int *)operator new(4 * v7, v6);
      if (v8)
        break;
      v9 = v7 > 1;
      v7 >>= 1;
      if (!v9)
        goto LABEL_5;
    }
    v10 = v8;
    sub_1C49FFD7C(v3, v5, &v11, v4, v8, v7);
    operator delete(v10);
  }
}

uint64_t sub_1C49FF9C4()
{
  return 0;
}

uint64_t sub_1C49FF9CC()
{
  return 0;
}

BOOL sub_1C49FF9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 56);
  return *(_QWORD *)(v2 + 8) != *(_QWORD *)(v2 + 16) || *(_BYTE *)(v2 + 62) != 0;
}

uint64_t sub_1C49FF9FC()
{
  return 0;
}

void sub_1C49FFA04(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _WORD *v6;
  _WORD *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[8];

  v14[7] = *MEMORY[0x1E0C80C00];
  llvm::TargetFrameLowering::determineCalleeSaves(a1, (llvm::TargetFrameLowering **)a2, (uint64_t)a3);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v6 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
  if (v6)
  {
    v7 = v6;
    if (*v6)
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(&v13, v5, a2);
      v8 = (unsigned __int16)*v7;
      if (*v7)
      {
        v9 = *(_QWORD **)(a2 + 40);
        v10 = 1;
        do
        {
          v11 = 1 << v8;
          v12 = v8 >> 6;
          if (((1 << v8) & *((_QWORD *)v13 + v12)) != 0
            && llvm::MachineRegisterInfo::isPhysRegModified(v9, v8, 0))
          {
            *(_QWORD *)(*a3 + 8 * v12) |= v11;
          }
          v8 = (unsigned __int16)v7[v10++];
        }
        while (v8);
      }
      if (v13 != v14)
        free(v13);
    }
  }
}

uint64_t sub_1C49FFB40(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _BYTE *v4;

  if (a4)
  {
    v4 = a4;
    if ((*a4 & 4) != 0)
      return sub_1C487FE80(a3 + 40, (uint64_t)a4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v4 = 0;
  }
  while ((*((_WORD *)v4 + 22) & 8) != 0)
    v4 = (_BYTE *)*((_QWORD *)v4 + 1);
  return sub_1C487FE80(a3 + 40, (uint64_t)a4, *((_QWORD *)v4 + 1));
}

uint64_t sub_1C49FFB7C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a2 + 56);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *a4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 552))(v8, a2);
  return *(_QWORD *)(*(_QWORD *)(v7 + 8) + 40 * (*(_DWORD *)(v7 + 32) + a3));
}

uint64_t sub_1C49FFBEC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t **v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;

  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 112))(*(_QWORD *)(a2 + 16));
  v11 = a4;
  v9 = *a4;
  v10 = v11[1];
  if (v10 != v9)
  {
    v12 = v8;
    v13 = *(unsigned __int8 **)(a2 + 56);
    v14 = v10;
    do
    {
      v15 = 0;
      v16 = *(_DWORD *)(v14 - 12);
      v14 -= 12;
      v17 = *(uint64_t ***)(v7 + 240);
      v18 = v16 - 0x40000000;
      v19 = (unint64_t)v16 >> 3;
      v20 = 1 << (v16 & 7);
      do
      {
        if (v18 >= 0xC0000001)
        {
          v21 = **v17;
          if (v19 < *(unsigned __int16 *)(v21 + 22)
            && (v20 & *(_BYTE *)(*(_QWORD *)(v21 + 8) + v19)) != 0
            && (!v15
             || *v17 != v15
             && ((*(_DWORD *)(v15[1] + ((*(unsigned __int16 *)(v21 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v21 + 24)) & 1) != 0))
          {
            v15 = *v17;
          }
        }
        ++v17;
      }
      while (v17 != *(uint64_t ***)(v7 + 248));
      v23 = (unsigned int *)(*(_QWORD *)(a3 + 264)
                           + 24
                           * (*(unsigned __int16 *)(*v15 + 24)
                            + *(_DWORD *)(a3 + 272)
                            * ((*(_QWORD *)(a3 + 248) - *(_QWORD *)(a3 + 240)) >> 3))
                           + 4);
      v22 = *v23;
      v24 = 63 - __clz((unint64_t)v23[1] >> 3);
      if (*(unsigned __int8 *)(v12 + 12) >= v24)
        v25 = v24;
      else
        v25 = *(_BYTE *)(v12 + 12);
      *(_DWORD *)(v10 - 8) = llvm::MachineFrameInfo::CreateStackObject(v13, v22 >> 3, v25, 1u, 0, 0);
      *(_BYTE *)(v10 - 3) = 0;
      v10 = v14;
    }
    while (v14 != v9);
  }
  return 1;
}

int *sub_1C49FFD7C(int *result, int *a2, uint64_t *a3, unint64_t a4, int *a5, uint64_t a6)
{
  int *v8;
  int v9;
  int v10;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int *v23;
  int *v25;
  unint64_t v26;
  int *v27;
  unint64_t v28;
  int *v29;
  int *v30;
  uint64_t v31;
  int *v32;
  int *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  int *v42;
  uint64_t v43;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *(a2 - 1);
      v10 = *result;
      if (*(unsigned __int8 *)(*(_QWORD *)(*a3 + 8) + 40 * (*(_DWORD *)(*a3 + 32) + v9) + 16) < *(unsigned __int8 *)(*(_QWORD *)(*a3 + 8) + 40 * (*(_DWORD *)(*a3 + 32) + *result) + 16))
      {
        *result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v25 = a5;
      v26 = a4 >> 1;
      v27 = &result[a4 >> 1];
      v28 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C4A00048(result, v27, a3, v28, a5);
        v29 = &v25[v26];
        result = sub_1C4A00048(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v29);
        v30 = &v25[a4];
        v31 = *a3;
        v32 = v29;
        while (v32 != v30)
        {
          v33 = v32;
          v34 = *v32;
          v35 = *v25;
          v36 = *(_DWORD *)(v31 + 32);
          v37 = *(_QWORD *)(v31 + 8);
          v38 = *(unsigned __int8 *)(v37 + 40 * (v36 + v34) + 16);
          v39 = *(unsigned __int8 *)(v37 + 40 * (v36 + *v25) + 16);
          if (v38 < v39)
            v35 = v34;
          v25 += v38 >= v39;
          v32 = &v33[v38 < v39];
          *v8++ = v35;
          if (v25 == v29)
          {
            if (v32 != v30)
            {
              v40 = 0;
              if (v38 < v39)
                v41 = 1;
              else
                v41 = 2;
              v42 = &v33[v41 & 1];
              do
              {
                v8[v40] = v42[v40];
                ++v40;
              }
              while (&v42[v40] != v30);
            }
            return result;
          }
        }
        if (v25 != v29)
        {
          v43 = 0;
          do
          {
            v8[v43] = v25[v43];
            ++v43;
          }
          while (&v25[v43] != v29);
        }
      }
      else
      {
        sub_1C49FFD7C(result, v27, a3, v28, a5, a6);
        sub_1C49FFD7C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v25, a6);
        return sub_1C4A002C8(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v25, a6);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      if (result + 1 != a2)
      {
        v13 = *a3;
        v14 = *(_QWORD *)(*a3 + 8);
        v15 = 4;
        v16 = result;
        do
        {
          v18 = *v16;
          v17 = v16[1];
          v16 = v12;
          if (*(unsigned __int8 *)(v14 + 40 * (*(_DWORD *)(v13 + 32) + v17) + 16) < *(unsigned __int8 *)(v14 + 40 * (*(_DWORD *)(v13 + 32) + v18) + 16))
          {
            v19 = v15;
            while (1)
            {
              *(int *)((char *)v8 + v19) = v18;
              v20 = v19 - 4;
              if (v19 == 4)
                break;
              v18 = *(int *)((char *)v8 + v19 - 8);
              v21 = *(_DWORD *)(v13 + 32);
              v22 = *(unsigned __int8 *)(v14 + 40 * (v21 + v17) + 16);
              result = (int *)*(unsigned __int8 *)(v14 + 40 * (v21 + v18) + 16);
              v19 = v20;
              if (v22 >= result)
              {
                v23 = (int *)((char *)v8 + v20);
                goto LABEL_15;
              }
            }
            v23 = v8;
LABEL_15:
            *v23 = v17;
          }
          v12 = v16 + 1;
          v15 += 4;
        }
        while (v16 + 1 != a2);
      }
    }
  }
  return result;
}

int *sub_1C4A00048(int *result, int *a2, uint64_t *a3, unint64_t a4, int *a5)
{
  int *v5;
  int *v7;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int v21;
  int v22;
  int *v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  int *v28;
  int *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = *(a2 - 1);
      v11 = *(_DWORD *)(*a3 + 32);
      v12 = *(_QWORD *)(*a3 + 8);
      v13 = *(unsigned __int8 *)(v12 + 40 * (v11 + v10) + 16);
      v14 = *(unsigned __int8 *)(v12 + 40 * (v11 + *result) + 16);
      if (v13 >= v14)
        v10 = *result;
      *a5 = v10;
      v5 = a5 + 1;
      if (v13 >= v14)
        v7 = a2 - 1;
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      v26 = &result[a4 >> 1];
      sub_1C49FFD7C(result, v26, a3, a4 >> 1, a5, a4 >> 1);
      result = (int *)sub_1C49FFD7C(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v27 = *a3;
      v28 = &v7[a4 >> 1];
      while (v28 != a2)
      {
        v29 = v28;
        v30 = *v28;
        v31 = *v7;
        v32 = *(_DWORD *)(v27 + 32);
        v33 = *(_QWORD *)(v27 + 8);
        v34 = *(unsigned __int8 *)(v33 + 40 * (v32 + v30) + 16);
        v35 = *(unsigned __int8 *)(v33 + 40 * (v32 + *v7) + 16);
        if (v34 < v35)
          v31 = v30;
        v28 = &v29[v34 < v35];
        v7 += v34 >= v35;
        *v5++ = v31;
        if (v7 == v26)
        {
          if (v28 != a2)
          {
            v36 = 0;
            v37 = &v29[v34 < v35];
            do
            {
              v5[v36] = v37[v36];
              ++v36;
            }
            while (&v37[v36] != a2);
          }
          return result;
        }
      }
      if (v7 != v26)
      {
        v38 = 0;
        do
        {
          v5[v38] = v7[v38];
          ++v38;
        }
        while (&v7[v38] != v26);
      }
    }
    else if (result != a2)
    {
      v15 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v16 = 0;
        v17 = *a3;
        v18 = *(_QWORD *)(*a3 + 8);
        v19 = a5;
        v20 = a5;
        do
        {
          v22 = *v20++;
          v21 = v22;
          if (*(unsigned __int8 *)(v18 + 40 * (*(_DWORD *)(v17 + 32) + *v15) + 16) >= *(unsigned __int8 *)(v18 + 40 * (*(_DWORD *)(v17 + 32) + v22) + 16))
          {
            *v20 = *v15;
          }
          else
          {
            v19[1] = v21;
            v23 = a5;
            if (v19 != a5)
            {
              v24 = v16;
              while (1)
              {
                v23 = (int *)((char *)a5 + v24);
                v25 = *(int *)((char *)a5 + v24 - 4);
                if (*(unsigned __int8 *)(v18 + 40 * (*(_DWORD *)(v17 + 32) + *v15) + 16) >= *(unsigned __int8 *)(v18 + 40 * (*(_DWORD *)(v17 + 32) + v25) + 16))
                  break;
                *v23 = v25;
                v24 -= 4;
                if (!v24)
                {
                  v23 = a5;
                  break;
                }
              }
            }
            *v23 = *v15;
          }
          ++v15;
          v16 += 4;
          v19 = v20;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

_DWORD *sub_1C4A002C8(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v8;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int *v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int *v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  int64_t v34;
  int v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  _BOOL4 v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  _DWORD *v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  _DWORD *v69;

  if (a6)
  {
    v8 = a6;
    v11 = result;
    while (a5 > a8 && v8 > a8)
    {
      if (!a5)
        return result;
      v12 = *(_DWORD *)(*a4 + 32);
      v13 = *(_QWORD *)(*a4 + 8);
      while (1)
      {
        v14 = *v11;
        if (*(unsigned __int8 *)(v13 + 40 * (v12 + *a2) + 16) < *(unsigned __int8 *)(v13 + 40 * (*v11 + v12) + 16))
          break;
        ++v11;
        if (!--a5)
          return result;
      }
      if (a5 >= v8)
      {
        if (a5 == 1)
        {
          *v11 = *a2;
          *a2 = v14;
          return result;
        }
        if (a5 >= 0)
          v25 = a5;
        else
          v25 = a5 + 1;
        v24 = v25 >> 1;
        v18 = &v11[v25 >> 1];
        v17 = a3;
        if (a3 != a2)
        {
          v26 = a3 - a2;
          v17 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v17[v26 >> 1];
            v30 = *v28;
            v29 = v28 + 1;
            v26 += ~(v26 >> 1);
            if (*(unsigned __int8 *)(v13 + 40 * (v30 + v12) + 16) < *(unsigned __int8 *)(v13 + 40 * (*v18 + v12) + 16))
              v17 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        v16 = v17 - a2;
      }
      else
      {
        if (v8 >= 0)
          v15 = v8;
        else
          v15 = v8 + 1;
        v16 = v15 >> 1;
        v17 = &a2[v15 >> 1];
        v18 = a2;
        if (v11 != a2)
        {
          v19 = a2 - v11;
          v18 = v11;
          do
          {
            v20 = v19 >> 1;
            v21 = &v18[v19 >> 1];
            v23 = *v21;
            v22 = v21 + 1;
            v19 += ~(v19 >> 1);
            if (*(unsigned __int8 *)(v13 + 40 * (*v17 + v12) + 16) < *(unsigned __int8 *)(v13 + 40 * (v23 + v12) + 16))
              v19 = v20;
            else
              v18 = v22;
          }
          while (v19);
        }
        v24 = v18 - v11;
      }
      v31 = v17;
      if (v18 != a2)
      {
        v31 = v18;
        if (a2 != v17)
        {
          v68 = a4;
          v69 = a7;
          v67 = a8;
          if (v18 + 1 == a2)
          {
            v63 = *v18;
            v34 = (char *)v17 - (char *)a2;
            v65 = a3;
            memmove(v18, a2, (char *)v17 - (char *)a2);
            a8 = v67;
            a4 = v68;
            a3 = v65;
            a7 = v69;
            v31 = (_DWORD *)((char *)v18 + v34);
            *v31 = v63;
          }
          else if (a2 + 1 == v17)
          {
            v35 = *(v17 - 1);
            v31 = v18 + 1;
            if (v17 - 1 != v18)
            {
              v66 = a3;
              v64 = *(v17 - 1);
              memmove(v18 + 1, v18, (char *)(v17 - 1) - (char *)v18);
              v35 = v64;
              a8 = v67;
              a4 = v68;
              a3 = v66;
              a7 = v69;
            }
            *v18 = v35;
          }
          else
          {
            v32 = a3;
            v33 = sub_1C4A00770(v18, a2, v17);
            a8 = v67;
            a4 = v68;
            a3 = v32;
            a7 = v69;
            v31 = v33;
          }
        }
      }
      a5 -= v24;
      v8 -= v16;
      if (v24 + v16 >= a5 + v8)
      {
        v42 = v17;
        v43 = a7;
        v44 = a8;
        v45 = a4;
        result = (_DWORD *)sub_1C4A002C8(v31, v42, a3);
        a8 = v44;
        a4 = v45;
        a7 = v43;
        v17 = v18;
        v8 = v16;
        a5 = v24;
        a3 = v31;
      }
      else
      {
        v36 = v11;
        v37 = v18;
        v38 = a3;
        v39 = a7;
        v40 = a8;
        v41 = a4;
        result = (_DWORD *)sub_1C4A002C8(v36, v37, v31);
        a8 = v40;
        a4 = v41;
        a3 = v38;
        a7 = v39;
        v11 = v31;
      }
      a2 = v17;
      if (!v8)
        return result;
    }
    if (a5 <= v8)
    {
      if (v11 != a2)
      {
        v51 = 0;
        do
        {
          a7[v51] = v11[v51];
          ++v51;
        }
        while (&v11[v51] != a2);
        if (v51 * 4)
        {
          v52 = *a4;
          v53 = a7;
          while (a2 != a3)
          {
            v54 = *a2;
            v55 = *(_DWORD *)(v52 + 32);
            v56 = *(_QWORD *)(v52 + 8);
            v57 = *(unsigned __int8 *)(v56 + 40 * (v55 + *a2) + 16);
            v58 = *(unsigned __int8 *)(v56 + 40 * (v55 + *v53) + 16);
            v59 = v57 >= v58;
            v60 = v57 < v58;
            v61 = v59;
            if (v59)
              v54 = *v53;
            v53 += v61;
            a2 += v60;
            *v11++ = v54;
            if (&a7[v51] == v53)
              return result;
          }
          return memmove(v11, v53, (char *)a7 - (char *)v53 + v51 * 4);
        }
      }
    }
    else if (a2 != a3)
    {
      v46 = 0;
      do
      {
        a7[v46] = a2[v46];
        ++v46;
      }
      while (&a2[v46] != a3);
      if (v46 * 4)
      {
        v47 = &a7[v46];
        v48 = *a4;
        v49 = a3 - 1;
        while (a2 != v11)
        {
          v50 = *(v47 - 1);
          result = *(_DWORD **)(v48 + 8);
          if (LOBYTE(result[10 * (*(_DWORD *)(v48 + 32) + v50) + 4]) >= LOBYTE(result[10 * (*(_DWORD *)(v48 + 32) + *(a2 - 1)) + 4]))
            --v47;
          else
            v50 = *--a2;
          *v49-- = v50;
          if (v47 == a7)
            return result;
        }
        if (v47 != a7)
        {
          v62 = 0;
          do
          {
            v49[v62] = v47[v62 - 1];
            --v62;
          }
          while (&v47[v62] != a7);
        }
      }
    }
  }
  return result;
}

_DWORD *sub_1C4A00770(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = 0;
      do
      {
        v5 = a1[v4];
        a1[v4] = a2[v4];
        v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        v7 = (uint64_t)&a2[++v4];
      }
      while ((_DWORD *)v6 != a2 && v7 != (_QWORD)a3);
    }
  }
  else
  {
    v9 = a3 - a2;
    v10 = a2 - a1;
    do
    {
      v11 = v10;
      v10 = v9;
      v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      v12 = &a1[v10];
      do
      {
        v14 = *--v12;
        v13 = v14;
        v15 = &v12[v3];
        v16 = v12;
        do
        {
          v17 = v16;
          v16 = v15;
          *v17 = *v15;
          v18 = __OFSUB__(v3, a3 - v15);
          v20 = v3 - (a3 - v15);
          v19 = (v20 < 0) ^ v18;
          v15 = &a1[v20];
          if (v19)
            v15 = &v16[v3];
        }
        while (v15 != v12);
        *v16 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

_QWORD *sub_1C4A0083C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E819E418;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      return sub_1C47A80D0(a1);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  return sub_1C47A80D0(a1);
}

llvm *sub_1C4A0089C(uint64_t a1, uint64_t a2)
{
  llvm *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  llvm *v12;
  unsigned int v13;
  _DWORD *v14;
  _DWORD *v15;
  _BYTE *v16;
  uint64_t (**v17)(void);
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  llvm *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  result = llvm::dbgs((llvm *)a1);
  v5 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v5) > 0x10)
  {
    *(_BYTE *)(v5 + 16) = 10;
    *(_OWORD *)v5 = *(_OWORD *)"Assigned Reg Map\n";
    *((_QWORD *)result + 4) += 17;
  }
  else
  {
    result = llvm::raw_ostream::write(result, "Assigned Reg Map\n", 0x11uLL);
  }
  v6 = *(_QWORD *)(a1 + 224);
  v7 = *(unsigned int *)(a1 + 240);
  v8 = (unsigned int *)(v6 + 8 * v7);
  if (*(_DWORD *)(a1 + 232))
  {
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      v10 = *(unsigned int **)(a1 + 224);
      while (*v10 >= 0xFFFFFFFE)
      {
        v10 += 2;
        v9 -= 8;
        if (!v9)
          goto LABEL_8;
      }
    }
    else
    {
      v10 = *(unsigned int **)(a1 + 224);
    }
  }
  else
  {
LABEL_8:
    v10 = (unsigned int *)(v6 + 8 * v7);
  }
  v11 = (unsigned int *)(v6 + 8 * v7);
  while (v10 != v11)
  {
    v12 = llvm::dbgs(result);
    v13 = *v10;
    v14 = operator new(0x28uLL);
    *(_QWORD *)v14 = &off_1E814D010;
    v14[2] = v13;
    *((_QWORD *)v14 + 2) = a2;
    v14[6] = 0;
    *((_QWORD *)v14 + 4) = 0;
    v21 = (llvm *)v14;
    sub_1C52C9630((llvm::raw_ostream *)v14, v12);
    v15 = (_DWORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v15 > 3uLL)
    {
      *v15 = 540945696;
      *((_QWORD *)v12 + 4) += 4;
    }
    else
    {
      v12 = llvm::raw_ostream::write(v12, " -> ", 4uLL);
    }
    sub_1C5E21910(v12, v10[1], 0, 0, 0);
    v16 = (_BYTE *)*((_QWORD *)v12 + 4);
    if (*((_BYTE **)v12 + 3) == v16)
    {
      llvm::raw_ostream::write(v12, "\n", 1uLL);
    }
    else
    {
      *v16 = 10;
      ++*((_QWORD *)v12 + 4);
    }
    result = v21;
    if (v21 == (llvm *)&v20)
    {
      v17 = (uint64_t (**)(void))(v20 + 32);
    }
    else
    {
      if (!v21)
        goto LABEL_20;
      v17 = (uint64_t (**)(void))(*(_QWORD *)v21 + 40);
    }
    result = (llvm *)(*v17)();
LABEL_20:
    v18 = v10 + 2;
    while (v18 != v8)
    {
      v19 = *v18;
      v18 += 2;
      if (v19 <= 0xFFFFFFFD)
      {
        v10 = v18 - 2;
        goto LABEL_25;
      }
    }
    v10 = v8;
LABEL_25:
    ;
  }
  return result;
}

uint64_t sub_1C4A00AE8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;
  _QWORD *v9;
  _QWORD v10[2];

  v2 = (_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED7ED280);
  v3 = 0;
  *v2 = &off_1E7FA9C80;
  v2[31] = 0;
  v2[32] = 0;
  v2[33] = 0;
  v2[34] = v2 + 36;
  v2[35] = 0x400000000;
  v2[42] = 0;
  v2[43] = 1;
  v2[40] = v2 + 42;
  v2[41] = 0;
  do
  {
    v4 = a1 + v3;
    *(_DWORD *)(v4 + 352) = 0;
    *(_QWORD *)(v4 + 360) = 0;
    v3 += 16;
  }
  while (v3 != 80);
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 476) = 0u;
  *(_BYTE *)(a1 + 504) = 1;
  *(_QWORD *)(a1 + 512) = a1 + 544;
  *(_QWORD *)(a1 + 520) = a1 + 544;
  *(_QWORD *)(a1 + 528) = 8;
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 608) = a1 + 624;
  *(_QWORD *)(a1 + 616) = 0x800000000;
  *(_QWORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_DWORD *)(a1 + 704) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 764) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 812) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_QWORD *)(a1 + 964) = 0;
  *(_OWORD *)(a1 + 948) = 0u;
  *(_QWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 976) = a1 + 984;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v8 = qword_1ED830BC0[0];
  v6 = atomic_load(&qword_1ED7ED290);
  if (v6 != -1)
  {
    v10[0] = sub_1C4A00C90;
    v10[1] = &v8;
    v9 = v10;
    std::__call_once(&qword_1ED7ED290, &v9, (void (__cdecl *)(void *))sub_1C4776838);
  }
  *(_DWORD *)(a1 + 840) = 64;
  return a1;
}

uint64_t sub_1C4A00C90(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeSlotIndexesPass((uint64_t)a1);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineBlockFrequencyInfoPass(a1, v2);
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "AGX3InterfaceRegAllocation";
  *(_QWORD *)(v3 + 8) = 26;
  *(_QWORD *)(v3 + 16) = "agx3-interfacereg-alloc";
  *(_QWORD *)(v3 + 24) = 23;
  *(_QWORD *)(v3 + 32) = &unk_1ED7ED280;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C4A0EAF0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

void sub_1C4A00D3C(uint64_t a1)
{
  void *v2;
  void *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t i;
  uint64_t v11;
  uint64_t j;
  void *v13;
  void *v14;
  void *v15;

  *(_QWORD *)a1 = &off_1E7FA9C80;
  sub_1C4A0659C(*(_QWORD **)(a1 + 984));
  if (*(char *)(a1 + 943) < 0)
    operator delete(*(void **)(a1 + 920));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 808), 4);
  v2 = *(void **)(a1 + 784);
  if (v2)
  {
    *(_QWORD *)(a1 + 792) = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 760), 4);
  v3 = *(void **)(a1 + 736);
  if (v3)
  {
    *(_QWORD *)(a1 + 744) = v3;
    operator delete(v3);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 712), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 688), 8);
  v4 = *(char **)(a1 + 608);
  v5 = *(unsigned int *)(a1 + 616);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = v4 - 8;
    do
    {
      v8 = *(_QWORD *)&v7[v6];
      *(_QWORD *)&v7[v6] = 0;
      if (v8)
        MEMORY[0x1CAA32FC0](v8, 0x1020C403A5D3213);
      v6 -= 8;
    }
    while (v6);
    v4 = *(char **)(a1 + 608);
  }
  if (v4 != (char *)(a1 + 624))
    free(v4);
  v9 = *(void **)(a1 + 520);
  if (v9 != *(void **)(a1 + 512))
    free(v9);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 472), 4);
  for (i = 464; i != 424; i -= 8)
  {
    v11 = *(_QWORD *)(a1 + i);
    *(_QWORD *)(a1 + i) = 0;
    if (v11)
      sub_1C4A065F0(a1 + i, v11);
  }
  for (j = 416; j != 336; j -= 16)
    llvm::LiveIntervalUnion::Array::clear((llvm::LiveIntervalUnion::Array *)(a1 + j));
  *(_QWORD *)(a1 + 248) = 0;
  sub_1C4926AE8(a1 + 256);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v13 = *(void **)(a1 + 176);
  if (v13 != (void *)(a1 + 192))
    free(v13);
  v14 = *(void **)(a1 + 104);
  if (v14 != (void *)(a1 + 120))
    free(v14);
  v15 = *(void **)(a1 + 32);
  if (v15 != (void *)(a1 + 48))
    free(v15);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C4A00EEC(uint64_t a1)
{
  sub_1C4A00D3C(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4A00F10()
{
  return "AGX3 interface register allocation pass";
}

void *sub_1C4A00F20(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

void sub_1C4A00FDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  llvm::LiveIntervalUnion::Array *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v30;
  int v31;
  unsigned int v32;
  void *v33;

  if (*(_DWORD *)(a1 + 496))
  {
    v2 = 0;
    v3 = a1 + 432;
    v4 = (llvm::LiveIntervalUnion::Array *)(a1 + 352);
    do
    {
      v5 = *(_QWORD *)(v3 + v2);
      *(_QWORD *)(v3 + v2) = 0;
      if (v5)
        sub_1C4A065F0(v3 + v2, v5);
      llvm::LiveIntervalUnion::Array::clear(v4);
      v2 += 8;
      v4 = (llvm::LiveIntervalUnion::Array *)((char *)v4 + 16);
    }
    while (v2 != 40);
    *(_DWORD *)(a1 + 496) = 0;
    sub_1C4A06678((_DWORD *)(a1 + 472));
    *(_DWORD *)(a1 + 500) = 0;
    *(_BYTE *)(a1 + 504) = 1;
  }
  v6 = *(void **)(a1 + 520);
  if (v6 == *(void **)(a1 + 512))
    goto LABEL_8;
  v28 = *(unsigned int *)(a1 + 528);
  if (v28 < 0x21 || 4 * (*(_DWORD *)(a1 + 532) - *(_DWORD *)(a1 + 536)) >= v28)
  {
    memset(v6, 255, 8 * v28);
LABEL_8:
    *(_QWORD *)(a1 + 532) = 0;
    goto LABEL_9;
  }
  free(v6);
  v30 = *(_DWORD *)(a1 + 532) - *(_DWORD *)(a1 + 536);
  v31 = 1 << (33 - __clz(v30 - 1));
  if (v30 <= 0x10)
    v32 = 32;
  else
    v32 = v31;
  *(_DWORD *)(a1 + 528) = v32;
  *(_QWORD *)(a1 + 532) = 0;
  v33 = malloc_type_malloc(8 * v32, 0x4065EBACuLL);
  if (!v33)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 520) = v33;
  memset(v33, 255, 8 * *(unsigned int *)(a1 + 528));
LABEL_9:
  v7 = *(unsigned int *)(a1 + 616);
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    v9 = *(_QWORD *)(a1 + 608) - 8;
    do
    {
      v10 = *(_QWORD *)(v9 + v8);
      *(_QWORD *)(v9 + v8) = 0;
      if (v10)
        MEMORY[0x1CAA32FC0](v10, 0x1020C403A5D3213);
      v8 -= 8;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 616) = 0;
  v11 = (_QWORD *)(a1 + 688);
  v12 = *(_DWORD *)(a1 + 696);
  if (v12)
  {
    v13 = *(unsigned int *)(a1 + 704);
    if (v13 > 4 * v12 && v13 >= 0x41)
    {
      v14 = (_DWORD *)*v11;
      v15 = 1 << (33 - __clz(v12 - 1));
      if (v15 <= 64)
        v16 = 64;
      else
        v16 = v15;
      if (v16 == (_DWORD)v13)
      {
        *(_QWORD *)(a1 + 696) = 0;
        v17 = 16 * v13;
        do
        {
          *v14 = -1;
          v14 += 4;
          v17 -= 16;
        }
        while (v17);
      }
      else
      {
        MEMORY[0x1CAA32FB4](v14, 8);
        v23 = (4 * v16 / 3u + 1) | ((unint64_t)(4 * v16 / 3u + 1) >> 1);
        v24 = v23 | (v23 >> 2) | ((v23 | (v23 >> 2)) >> 4);
        LODWORD(v24) = (((v24 | (v24 >> 8)) >> 16) | v24 | (v24 >> 8)) + 1;
        *(_DWORD *)(a1 + 704) = v24;
        v25 = operator new(16 * v24, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 688) = v25;
        *(_QWORD *)(a1 + 696) = 0;
        v26 = *(unsigned int *)(a1 + 704);
        if ((_DWORD)v26)
        {
          v27 = 16 * v26;
          do
          {
            *v25 = -1;
            v25 += 4;
            v27 -= 16;
          }
          while (v27);
        }
      }
      goto LABEL_31;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 700))
      goto LABEL_31;
    LODWORD(v13) = *(_DWORD *)(a1 + 704);
    if (v13 > 0x40)
    {
      MEMORY[0x1CAA32FB4](*v11, 8);
      *v11 = 0;
      *(_QWORD *)(a1 + 696) = 0;
      *(_DWORD *)(a1 + 704) = 0;
      goto LABEL_31;
    }
  }
  if ((_DWORD)v13)
  {
    v18 = (_DWORD *)*v11;
    v19 = 16 * v13;
    do
    {
      *v18 = -1;
      v18 += 4;
      v19 -= 16;
    }
    while (v19);
  }
  *(_QWORD *)(a1 + 696) = 0;
LABEL_31:
  sub_1C4A067C4((_DWORD *)(a1 + 712));
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a1 + 736);
  v20 = *(_DWORD *)(a1 + 768);
  if (v20 || *(_DWORD *)(a1 + 772))
  {
    v21 = (void **)(a1 + 760);
    v22 = *(unsigned int *)(a1 + 776);
    if (v22 <= 4 * v20 || v22 < 0x41)
    {
      if ((_DWORD)v22)
        memset(*v21, 255, 4 * v22);
      *(_QWORD *)(a1 + 768) = 0;
    }
    else
    {
      sub_1C4A068AC(v21);
    }
  }
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a1 + 784);
  sub_1C4A06678((_DWORD *)(a1 + 808));
  *(_QWORD *)(a1 + 832) = 0;
  sub_1C4A0659C(*(_QWORD **)(a1 + 984));
  *(_QWORD *)(a1 + 976) = a1 + 984;
  *(_QWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 984) = 0;
}

BOOL sub_1C4A01324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  BOOL v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  void **v11;
  void *v12;
  void **v13;
  void *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  unsigned int *v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned __int16 **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  _DWORD *v57;
  int v58;
  _DWORD *v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  _DWORD *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  _DWORD *v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  llvm::SmallPtrSetImplBase *v87;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  size_t v93;
  unint64_t v94;
  __int16 v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  BOOL v99;
  int v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t i;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  int v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  int *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v179;
  int v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  llvm::LiveInterval *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  llvm::LiveInterval *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  int v214;
  uint64_t **v215;
  unsigned int *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t **v224;
  int *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  int v251;
  int v252;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  int *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  __int16 v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unsigned int v269;
  int v270;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  int v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int *v284;
  uint64_t v285;
  int v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  llvm::MachineInstr **v290;
  unsigned int v291;
  uint64_t v292;
  llvm::MachineInstr *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  int v299;
  unint64_t v300;
  uint64_t v301;
  char v302;
  int *v303;
  char *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  uint64_t *v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unsigned int v322;
  unsigned int v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  BOOL v328;
  unsigned int v330;
  BOOL v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  char v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v341;
  unsigned int v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unsigned int v346;
  uint64_t *v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v351;
  uint64_t v352;
  int v353;
  unsigned int v354;
  unint64_t v355;
  unint64_t *v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t *v359;
  unint64_t v360;
  uint64_t *v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  unsigned __int8 v370;
  unsigned __int8 v371;
  unsigned int v372;
  BOOL v373;
  int v374;
  int v375;
  _OWORD *v376;
  llvm::raw_ostream *v377;
  int v378;
  unint64_t v379;
  llvm::raw_ostream *v380;
  int v381;
  _BYTE *v382;
  int v383;
  int v384;
  _QWORD *v385;
  size_t v386;
  uint64_t **v387;
  uint64_t *v388;
  _QWORD *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  void **p_base;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v405;
  unsigned int v406;
  _QWORD *v407;
  _QWORD *v408;
  uint64_t v409;
  uint64_t v410;
  _DWORD *v411;
  _DWORD *v412;
  int v413;
  int v414;
  BOOL v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int *v419;
  int v420;
  int v421;
  int v422;
  int v423;
  __int128 v424;
  BOOL v425;
  unint64_t v426;
  uint64_t v427;
  _DWORD *v428;
  uint64_t v429;
  int v430;
  BOOL v431;
  int *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int *v436;
  int v437;
  int v438;
  _DWORD *v439;
  _QWORD *v440;
  uint64_t *v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t IncompleteVirtualRegister;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unsigned int v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  _QWORD *v455;
  unint64_t v456;
  uint64_t v457;
  int v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  char *v462;
  uint64_t v463;
  uint64_t v464;
  int *v465;
  uint64_t v466;
  llvm::LiveInterval *v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  int v472;
  uint64_t v473;
  llvm::LiveInterval *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  int v480;
  uint64_t v481;
  llvm::LiveInterval *v482;
  uint64_t v483;
  uint64_t v484;
  _DWORD *v485;
  unsigned int v486;
  int v487;
  int v488;
  int v489;
  void *v490;
  uint64_t v491;
  char *v492;
  int v493;
  unint64_t v494;
  char *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  int v501;
  int *v502;
  int *v503;
  int v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  void *v510;
  uint64_t v511;
  llvm::LiveInterval *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  int v516;
  int v518;
  uint64_t v519;
  uint64_t v520;
  void *v521;
  unint64_t v522;
  unint64_t v523;
  uint64_t v524;
  int *v525;
  int *v526;
  int v527;
  int v528;
  uint64_t v529;
  int v530;
  unsigned int v531;
  _DWORD *v532;
  int v533;
  _DWORD *v534;
  int v535;
  BOOL v536;
  unsigned int v537;
  _DWORD *v538;
  uint64_t v539;
  uint64_t v540;
  unsigned int v541;
  uint64_t v542;
  BOOL v543;
  const llvm::LiveInterval *v544;
  uint64_t v545;
  uint64_t v546;
  int *v547;
  int v548;
  uint64_t v549;
  int v550;
  unsigned int v551;
  int v552;
  int v553;
  int v554;
  uint64_t *v555;
  uint64_t *v556;
  uint64_t v557;
  int *v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v562;
  int v563;
  unsigned int v564;
  char v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  int v570;
  unsigned int j;
  unsigned int v572;
  unsigned int v573;
  int v574;
  unsigned int v575;
  unsigned int v576;
  unsigned int v577;
  unsigned int v578;
  int v579;
  unsigned int v580;
  int v581;
  unsigned int v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int v585;
  int v586;
  char *v587;
  char *v588;
  unsigned int v589;
  uint64_t v590;
  int v591;
  uint64_t v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  int *v598;
  int v599;
  uint64_t v600;
  uint64_t *v601;
  uint64_t v602;
  unsigned int v603;
  unsigned int v604;
  llvm::MachineOperand **v605;
  llvm::SmallPtrSetImplBase *v606;
  llvm::MachineOperand *v607;
  unsigned int v608;
  unsigned int v609;
  int v610;
  BOOL v611;
  int v612;
  int v613;
  char *v614;
  uint64_t v615;
  int v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  __int128 v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  unsigned __int8 *v624;
  _BOOL4 v625;
  uint64_t UniqueVRegDef;
  uint64_t v627;
  char v628;
  uint64_t *v629;
  uint64_t v630;
  unsigned int v631;
  int v632;
  BOOL v633;
  int v634;
  int v635;
  _OWORD *v636;
  _OWORD *v637;
  __int128 v638;
  uint64_t v639;
  unint64_t v640;
  _OWORD *v641;
  _OWORD *v642;
  __int128 v643;
  unsigned int v644;
  int v645;
  BOOL v646;
  int v647;
  int v648;
  unsigned int v649;
  uint64_t v650;
  int v651;
  llvm::MachineOperand *v652;
  uint64_t v653;
  llvm::MachineInstr *v654;
  unint64_t v655;
  uint64_t CommonSubClass;
  uint64_t v657;
  uint64_t v658;
  __int128 v659;
  uint64_t *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  void *v667;
  uint64_t v668;
  int32x2_t *v669;
  int32x2_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t *v673;
  uint64_t v674;
  int v675;
  int v676;
  llvm::MachineFunction *v677;
  llvm::MachineInstr *v678;
  int v679;
  unint64_t v680;
  char *v681;
  uint64_t v682;
  __int128 v683;
  unint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  unint64_t *v697;
  unint64_t v698;
  unsigned int v699;
  int v700;
  BOOL v701;
  int v702;
  int v703;
  unsigned int v704;
  uint64_t v705;
  llvm::MachineFunction *v706;
  unint64_t *v707;
  unint64_t *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  char *v714;
  __int128 *v715;
  char *v716;
  __int128 v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t *v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  void *v728;
  void *v729;
  unint64_t v730;
  int64_t v731;
  int v732;
  int v733;
  char *v734;
  char *v735;
  unsigned int *v736;
  unsigned int v737;
  unsigned int v738;
  unsigned int v739;
  int v740;
  unsigned int v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unsigned int **v748;
  unsigned int *v749;
  unsigned int *v750;
  unsigned int *v751;
  int v752;
  int v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t *v756;
  uint64_t *v757;
  uint64_t *v758;
  uint64_t v759;
  __int16 v760;
  unint64_t v761;
  uint64_t v762;
  unint64_t v763;
  unsigned int v764;
  int v765;
  unsigned int v767;
  int32x2_t *v768;
  int32x2_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t *v772;
  uint64_t v773;
  uint64_t v774;
  int v775;
  int v776;
  uint64_t v777;
  uint64_t *v778;
  uint64_t v779;
  int v780;
  int v781;
  unint64_t v782;
  uint64_t v783;
  uint64_t v784;
  _QWORD *v785;
  unint64_t v786;
  _WORD *v787;
  unsigned __int16 v788;
  unint64_t v789;
  uint64_t v790;
  uint64_t v791;
  unint64_t v792;
  __int16 v793;
  unint64_t v794;
  unint64_t v795;
  unsigned int v796;
  int v797;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t *v803;
  uint64_t v804;
  int v805;
  int v806;
  uint64_t v807;
  unint64_t v808;
  _QWORD *v809;
  uint64_t v810;
  unsigned int v811;
  unsigned int v812;
  _QWORD *v813;
  unint64_t v814;
  unint64_t v815;
  uint64_t v816;
  BOOL v817;
  unint64_t v818;
  _QWORD *v819;
  _QWORD *v820;
  int v821;
  uint64_t v822;
  uint64_t v823;
  llvm::LiveInterval *v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  int v828;
  int v830;
  int *k;
  int *v832;
  uint64_t v833;
  llvm::LiveInterval *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  int v838;
  int v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  void *v850;
  uint64_t v851;
  uint64_t v852;
  void *v853;
  char *v855;
  uint64_t v856;
  _QWORD *v857;
  _QWORD *v858;
  _QWORD *v859;
  uint64_t v860;
  unint64_t v861;
  int v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  int v868;
  int v869;
  int v870;
  int v871;
  int v872;
  char *v873;
  uint64_t *v874;
  unsigned int v875;
  int v876;
  unint64_t v877;
  unint64_t v878;
  _QWORD *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t *v882;
  unsigned int *v883;
  uint64_t **v884;
  uint64_t **v885;
  _QWORD *v886;
  llvm::SmallPtrSetImplBase *v887;
  llvm::SmallPtrSetImplBase *v888;
  unsigned int v889;
  llvm::SmallPtrSetImplBase *v890;
  uint64_t **v891;
  uint64_t v892;
  llvm::LiveInterval **v893;
  uint64_t *v894;
  unsigned int v895;
  unint64_t v896;
  unsigned int v897;
  uint64_t v898;
  int *v899;
  uint64_t v900;
  unint64_t v901;
  _QWORD v902[2];
  _QWORD v903[2];
  char v904;
  uint64_t v905[2];
  unsigned int v906;
  void *v907;
  size_t __nel;
  _BYTE v909[16];
  void *v910;
  uint64_t v911;
  _BYTE v912[32];
  __int128 v913;
  __int128 v914;
  int *v915;
  uint64_t v916;
  __int128 v917;
  llvm::MachineInstr *v918;
  void *v919;
  int *v920;
  uint64_t v921;
  void *v922;
  uint64_t v923;
  int v924;
  int *v925;
  int *v926;
  uint64_t v927;
  void *__base;
  uint64_t v929;
  _QWORD v930[160];
  void *v931;
  size_t v932;
  int v933;
  llvm::SmallPtrSetImplBase *v934;
  void *v935;
  uint64_t v936;
  llvm::MachineOperand *v937;
  __int128 v938;
  __int128 __p;
  __int128 v940;
  __int128 v941;
  uint64_t v942;

  v942 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 48);
  if (!v4)
  {
    v4 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v4;
  }
  *(_QWORD *)(a1 + 872) = v4;
  v5 = *(_BYTE **)(a2 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  v6 = v5[300] || v5[301] || v5[298] || v5[299] != 0;
  *(_BYTE *)(a1 + 1000) = v6;
  *(_QWORD *)(a1 + 848) = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v5 + 104))(v5);
  *(_QWORD *)(a1 + 864) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 856) + 176))(*(_QWORD *)(a1 + 856));
  *(_QWORD *)(a1 + 880) = *(_QWORD *)(a2 + 40);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::SlotIndexes::ID);
  *(_QWORD *)(a1 + 832) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::SlotIndexes::ID);
  v9 = **(void ****)(a1 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 896) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::MachineDominatorTree::ID);
  v11 = **(void ****)(a1 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::MachineBlockFrequencyInfo::ID);
  *(_QWORD *)(a1 + 904) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  v13 = **(void ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 888) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::LiveIntervals::ID);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  *(_BYTE *)(a1 + 944) = 0;
  v15 = *(_DWORD *)(*(_QWORD *)(a1 + 880) + 32);
  if (v15)
  {
    v16 = 0;
    v17 = a1 + 712;
    v18 = a1 + 760;
    do
    {
      LODWORD(v931) = v16 | 0x80000000;
      v19 = *(_QWORD *)(a1 + 880);
      v20 = v16 & 0x7FFFFFFF;
      v21 = *(_QWORD *)(v19 + 24);
      v22 = *(_QWORD *)(v21 + 16 * v20 + 8);
      if (v22)
      {
        while ((*(_DWORD *)v22 & 0x80000000) != 0)
        {
          v22 = *(_QWORD *)(v22 + 24);
          if (!v22)
            goto LABEL_30;
        }
        v23 = *(_QWORD *)(a1 + 888);
        v24 = *(unsigned int *)(v23 + 416);
        if (v20 < v24)
        {
          v25 = *(_QWORD *)(v23 + 408);
          if (*(_QWORD *)(v25 + 8 * v20))
          {
            v26 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v21 + 16 * v20) & 0xFFFFFFFFFFFFFFF8) + 24);
            v27 = (v26 - 14) > 0x32 || ((1 << (v26 - 14)) & 0x4000000004001) == 0;
            if (!v27 || v26 == 105 || v26 == 127)
            {
              v892 = v17;
              v898 = v18;
              if ((v16 & 0x7FFFFFFFu) >= v24 || (v28 = *(unsigned int **)(v25 + 8 * (v16 & 0x7FFFFFFF))) == 0)
              {
                v28 = (unsigned int *)sub_1C4851220(v23, v16 | 0x80000000);
                v40 = *(_QWORD *)(v23 + 304);
                v41 = *(_QWORD *)(v23 + 248);
                *(_QWORD *)v40 = v41;
                *(_QWORD *)(v40 + 8) = *(_QWORD *)(v41 + 40);
                *(_OWORD *)(v40 + 16) = *(_OWORD *)(v23 + 288);
                *(_QWORD *)(v40 + 32) = v23 + 312;
                llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v40);
                *(_DWORD *)(v40 + 184) = 0;
                v42 = *(_QWORD *)(v23 + 256);
                v27 = *(_BYTE *)(v42 + 16) == 0;
                v43 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v42 + 24) + 16 * (v28[28] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                         + 34);
                v45 = !v27 && v43 != 0;
                llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v23 + 304), (llvm::LiveInterval *)v28, v45);
                llvm::LiveIntervals::computeDeadValues(v23, (uint64_t)v28, 0);
                v19 = *(_QWORD *)(a1 + 880);
              }
              v29 = *(_QWORD *)(a1 + 864);
              v30 = (_DWORD *)operator new();
              *(_QWORD *)v30 = v28;
              v31 = *(_DWORD *)(*(_QWORD *)(v29 + 264)
                              + 24
                              * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 24)
                                                                             + 16 * (v28[28] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                     + 24)
                               + *(_DWORD *)(v29 + 272)
                               * ((*(_QWORD *)(v29 + 248) - *(_QWORD *)(v29 + 240)) >> 3)));
              if (v31 >= 0x28)
              {
                if (v31 >= 0x48)
                {
                  if (v31 >= 0x88)
                  {
                    if (v31 < 0x108)
                      v32 = 3;
                    else
                      v32 = 4;
                  }
                  else
                  {
                    v32 = 2;
                  }
                }
                else
                {
                  v32 = 1;
                }
              }
              else
              {
                v32 = 0;
              }
              v30[2] = v32;
              __base = v30;
              sub_1C4A06944(a1 + 608, (char *)&__base);
              v33 = __base;
              __base = 0;
              if (v33)
                MEMORY[0x1CAA32FC0](v33, 0x1020C403A5D3213);
              if (!*(_BYTE *)(a1 + 944) && sub_1C4A06A78(*(_QWORD *)(a1 + 880), v28[28]))
                *(_BYTE *)(a1 + 944) = 1;
              v34 = *(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * *(unsigned int *)(a1 + 616) - 8);
              *(_QWORD *)sub_1C4A06B0C(a1 + 688, (int *)&v931) = v34;
              v35 = *(_QWORD *)(a1 + 880);
              v36 = (uint64_t *)((v931 & 0x80000000) != 0
                              ? *(_QWORD *)(v35 + 24) + 16 * (v931 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v35 + 272) + 8 * v931);
              v17 = v892;
              v18 = v898;
              v37 = *v36;
              if (*v36)
              {
                while ((*(_BYTE *)(v37 + 3) & 1) != 0)
                {
                  v37 = *(_QWORD *)(v37 + 24);
                  if (!v37)
                    goto LABEL_30;
                }
                v38 = *(unsigned __int16 ***)(v37 + 8);
LABEL_56:
                v39 = sub_1C4C915C4(*v38[2]);
                if ((v39 & 0xFF00000000) != 0 && ((_DWORD)v39 == 80 || (_DWORD)v39 == 167 || (_DWORD)v39 == 165))
                {
                  __base = v38;
                  sub_1C4A06BC4(v892, &__base);
                  sub_1C4977DA4(v898, &v931);
                  v18 = v898;
                  v38 = *(unsigned __int16 ***)(v37 + 8);
                }
                else
                {
                  v18 = v898;
                }
                v17 = v892;
                while (1)
                {
                  v37 = *(_QWORD *)(v37 + 24);
                  if (!v37)
                    break;
                  if ((*(_BYTE *)(v37 + 3) & 1) == 0 && *(unsigned __int16 ***)(v37 + 8) != v38)
                  {
                    v38 = *(unsigned __int16 ***)(v37 + 8);
                    goto LABEL_56;
                  }
                }
              }
            }
          }
        }
      }
LABEL_30:
      ++v16;
    }
    while (v16 != v15);
  }
  v46 = *(unsigned int **)(a1 + 784);
  v47 = *(unsigned int **)(a1 + 792);
  if (v46 != v47)
  {
    while (1)
    {
      v48 = *v46;
      LODWORD(v937) = v48;
      v49 = *(_QWORD *)(a1 + 880);
      v50 = (uint64_t *)((v48 & 0x80000000) != 0
                      ? *(_QWORD *)(v49 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v49 + 272) + 8 * v48);
      v51 = *v50;
      if (*v50)
      {
        while ((*(_BYTE *)(v51 + 3) & 1) != 0)
        {
          v51 = *(_QWORD *)(v51 + 24);
          if (!v51)
            goto LABEL_81;
        }
        v52 = 0;
        v64 = *(void **)(v51 + 8);
LABEL_100:
        __base = v64;
        v931 = 0;
        if (sub_1C4A07178((uint64_t *)(a1 + 712), &__base, &v931))
        {
          v65 = v931;
          v66 = *(_QWORD *)(a1 + 712);
          v67 = *(unsigned int *)(a1 + 728);
        }
        else
        {
          v66 = *(_QWORD *)(a1 + 712);
          v67 = *(unsigned int *)(a1 + 728);
          v65 = (void *)(v66 + 8 * v67);
        }
        if (v65 != (void *)(v66 + 8 * v67))
          ++v52;
        v68 = *(void **)(v51 + 8);
        while (1)
        {
          v51 = *(_QWORD *)(v51 + 24);
          if (!v51)
            break;
          if ((*(_BYTE *)(v51 + 3) & 1) == 0)
          {
            v64 = *(void **)(v51 + 8);
            if (v64 != v68)
              goto LABEL_100;
          }
        }
      }
      else
      {
LABEL_81:
        v52 = 0;
      }
      v53 = *(_DWORD *)(a1 + 824);
      if (!v53)
        break;
      v54 = *(_QWORD *)(a1 + 808);
      v55 = v53 - 1;
      v56 = (37 * (_DWORD)v937) & v55;
      v57 = (_DWORD *)(v54 + 8 * v56);
      v58 = *v57;
      if ((_DWORD)v937 != *v57)
      {
        v59 = 0;
        v60 = 1;
        while (v58 != -1)
        {
          if (v59)
            v61 = 0;
          else
            v61 = v58 == -2;
          if (v61)
            v59 = v57;
          v62 = v56 + v60++;
          v56 = v62 & v55;
          v57 = (_DWORD *)(v54 + 8 * v56);
          v58 = *v57;
          if ((_DWORD)v937 == *v57)
            goto LABEL_97;
        }
        if (v59)
          v63 = v59;
        else
          v63 = v57;
        goto LABEL_96;
      }
LABEL_97:
      v57[1] = v52;
      if (++v46 == v47)
        goto LABEL_111;
    }
    v63 = 0;
LABEL_96:
    v57 = sub_1C4A07214(a1 + 808, (uint64_t)&v937, (int *)&v937, v63);
    *(_QWORD *)v57 = v937;
    goto LABEL_97;
  }
LABEL_111:
  v69 = *(_DWORD *)(a1 + 616);
  *(_BYTE *)(a1 + 504) = *(_BYTE *)(a1 + 1000);
  v70 = 4 * v69;
  if (v70 >= 0x30)
    v71 = 48;
  else
    v71 = v70;
  sub_1C4A0738C(a1 + 248, v71);
  v73 = dword_1ED7ED330;
  if (!word_1ED7ED2B8)
    v73 = 2;
  *(_DWORD *)(a1 + 912) = v73;
  if (*(char *)(a1 + 943) < 0)
  {
    **(_BYTE **)(a1 + 920) = 0;
    *(_QWORD *)(a1 + 928) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 920) = 0;
    *(_BYTE *)(a1 + 943) = 0;
  }
  v74 = atomic_load((unsigned __int8 *)&qword_1ED7ED298);
  if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED298))
  {
    byte_1ED7ED284 = 1;
    __cxa_guard_release(&qword_1ED7ED298);
  }
  if ((byte_1ED7ED284 & 1) == 0)
  {
    v932 = 0;
    v931 = 0;
    v933 = 0;
    v936 = 0;
    v934 = 0;
    v935 = 0;
    v75 = *(_QWORD *)(a1 + 736);
    v76 = *(_QWORD *)(a1 + 744);
    if (v75 != v76)
    {
      do
      {
        v77 = *(unsigned int *)(*(_QWORD *)v75 + 40);
        if ((_DWORD)v77)
        {
          v78 = *(_DWORD **)(*(_QWORD *)v75 + 32);
          v79 = &v78[8 * v77];
          do
          {
            if ((*v78 & 0x10000FF) == 0)
            {
              v80 = *(_QWORD *)(a1 + 880);
              v81 = v78[1];
              v82 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v80 + 24) + 16 * (v81 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 24);
              v83 = (v82 - 14) > 0x32 || ((1 << (v82 - 14)) & 0x4000000004001) == 0;
              if (!v83 || v82 == 105 || v82 == 127)
              {
                LODWORD(__base) = v78[1];
                if (!sub_1C4778650(v80, v81))
                {
                  v84 = *(_QWORD *)(a1 + 880);
                  if ((__base & 0x80000000) != 0)
                    v85 = (uint64_t *)(*(_QWORD *)(v84 + 24) + 16 * (__base & 0x7FFFFFFF) + 8);
                  else
                    v85 = (uint64_t *)(*(_QWORD *)(v84 + 272) + 8 * __base);
                  v86 = *v85;
                  if (v86)
                  {
                    while ((*(_BYTE *)(v86 + 3) & 1) != 0)
                    {
                      v86 = *(_QWORD *)(v86 + 24);
                      if (!v86)
                        goto LABEL_144;
                    }
                    while (1)
                    {
                      v86 = *(_QWORD *)(v86 + 24);
                      if (!v86)
                        break;
                      if ((*(_BYTE *)(v86 + 3) & 1) == 0)
                        goto LABEL_144;
                    }
                  }
                  else
                  {
LABEL_144:
                    sub_1C4977DA4((uint64_t)&v931, &__base);
                  }
                }
              }
            }
            v78 += 8;
          }
          while (v78 != v79);
        }
        v75 += 8;
      }
      while (v75 != v76);
      v87 = v934;
      v88 = (unsigned int *)v935;
      if (v934 != v935)
      {
        v883 = (unsigned int *)v935;
        while (1)
        {
          v89 = *(unsigned int *)v87;
          LODWORD(v913) = v89;
          __base = v930;
          v929 = 0x600000000;
          v90 = *(_QWORD *)(a1 + 880);
          v91 = (uint64_t *)((v89 & 0x80000000) != 0
                          ? *(_QWORD *)(v90 + 24) + 16 * (v89 & 0x7FFFFFFF) + 8
                          : *(_QWORD *)(v90 + 272) + 8 * v89);
          v92 = *v91;
          if (*v91)
            break;
LABEL_185:
          v112 = *(_QWORD *)(a1 + 880);
          v113 = *(_QWORD *)(v112 + 24);
          if ((__int16 ***)(*(_QWORD *)(v113 + 16 * (v913 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E7FADBF0)
          {
            *(_QWORD *)&v938 = 0;
            v937 = 0;
            DWORD2(v938) = 0;
            *(_QWORD *)&v940 = 0;
            __p = 0uLL;
            if ((v913 & 0x80000000) != 0)
              v114 = (uint64_t *)(v113 + 16 * (v913 & 0x7FFFFFFF) + 8);
            else
              v114 = (uint64_t *)(*(_QWORD *)(v112 + 272) + 8 * v913);
            v115 = *v114;
            v887 = v87;
            if (*v114)
            {
              if ((*(_BYTE *)(v115 + 3) & 1) != 0
                || (v115 = *(_QWORD *)(v115 + 24)) != 0 && (*(_BYTE *)(v115 + 3) & 1) != 0)
              {
                v116 = *(_QWORD *)(v115 + 8);
LABEL_194:
                v922 = *(void **)(v116 + 24);
                sub_1C4A07D1C((uint64_t)&v937, &v922);
                v117 = *(_QWORD *)(v115 + 8);
                while (1)
                {
                  v115 = *(_QWORD *)(v115 + 24);
                  if (!v115 || (*(_BYTE *)(v115 + 3) & 1) == 0)
                    break;
                  v116 = *(_QWORD *)(v115 + 8);
                  if (v116 != v117)
                    goto LABEL_194;
                }
                v118 = (_QWORD *)__p;
                if ((_QWORD)__p != *((_QWORD *)&__p + 1))
                {
                  v119 = 0;
                  v120 = *(_QWORD *)(*(_QWORD *)(a1 + 904) + 248);
                  while (1)
                  {
                    if (!v120)
                      goto LABEL_214;
                    v121 = *(_DWORD *)(v120 + 176);
                    if (!v121)
                      goto LABEL_214;
                    v122 = *(_QWORD *)(v120 + 160);
                    v123 = v121 - 1;
                    v124 = (v121 - 1) & ((*v118 >> 4) ^ (*v118 >> 9));
                    v125 = *(_QWORD *)(v122 + 16 * (v123 & ((*v118 >> 4) ^ (*v118 >> 9))));
                    if (v125 != *v118)
                      break;
LABEL_204:
                    v126 = *(unsigned int *)(v122 + 16 * v124 + 8);
                    if (v126 == 0xFFFFFFFFLL)
                      goto LABEL_214;
                    v127 = *(_QWORD *)(*(_QWORD *)(v120 + 8) + 24 * v126 + 16);
LABEL_206:
                    if (v119 <= v127)
                      v119 = v127;
                    if (++v118 == *((_QWORD **)&__p + 1))
                      goto LABEL_216;
                  }
                  v128 = 1;
                  while (v125 != -4096)
                  {
                    v129 = v124 + v128++;
                    v124 = v129 & v123;
                    v125 = *(_QWORD *)(v122 + 16 * v124);
                    if (v125 == *v118)
                      goto LABEL_204;
                  }
LABEL_214:
                  v127 = 0;
                  goto LABEL_206;
                }
              }
            }
            v119 = 0;
LABEL_216:
            v922 = 0;
            v923 = 0;
            v924 = 0;
            v926 = 0;
            v927 = 0;
            v925 = 0;
            v130 = *(_QWORD *)(a1 + 888);
            v131 = v913 & 0x7FFFFFFF;
            if (v131 >= *(unsigned int *)(v130 + 416) || (v132 = *(_QWORD *)(*(_QWORD *)(v130 + 408) + 8 * v131)) == 0)
            {
              v132 = sub_1C4851220(*(_QWORD *)(a1 + 888), v913);
              v209 = *(_QWORD *)(v130 + 304);
              v210 = *(_QWORD *)(v130 + 248);
              *(_QWORD *)v209 = v210;
              *(_QWORD *)(v209 + 8) = *(_QWORD *)(v210 + 40);
              *(_OWORD *)(v209 + 16) = *(_OWORD *)(v130 + 288);
              *(_QWORD *)(v209 + 32) = v130 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v209);
              *(_DWORD *)(v209 + 184) = 0;
              v211 = *(_QWORD *)(v130 + 256);
              v27 = *(_BYTE *)(v211 + 16) == 0;
              v212 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v211 + 24)
                                                     + 16 * (*(_DWORD *)(v132 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 34);
              v214 = !v27 && v212 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v130 + 304), (llvm::LiveInterval *)v132, v214);
              llvm::LiveIntervals::computeDeadValues(v130, v132, 0);
            }
            if (v929 >= 2)
            {
              for (i = 1; i < v929; ++i)
              {
                v134 = *((_QWORD *)__base + i);
                v135 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 288), v134);
                v136 = *(_QWORD *)(*(_QWORD *)(a1 + 904) + 248);
                if (v136)
                {
                  v137 = *(_DWORD *)(v136 + 176);
                  if (!v137)
                    goto LABEL_271;
                  v138 = *(_QWORD *)(v136 + 160);
                  v139 = v137 - 1;
                  v140 = (v137 - 1) & ((v135 >> 4) ^ (v135 >> 9));
                  v141 = *(_QWORD *)(v138 + 16 * v140);
                  if (v141 != v135)
                  {
                    v150 = 1;
                    while (v141 != -4096)
                    {
                      v151 = v140 + v150++;
                      v140 = v151 & v139;
                      v141 = *(_QWORD *)(v138 + 16 * v140);
                      if (v141 == v135)
                        goto LABEL_223;
                    }
LABEL_271:
                    v136 = 0;
                    goto LABEL_225;
                  }
LABEL_223:
                  v142 = *(unsigned int *)(v138 + 16 * v140 + 8);
                  if (v142 == 0xFFFFFFFFLL)
                    goto LABEL_271;
                  v136 = *(_QWORD *)(*(_QWORD *)(v136 + 8) + 24 * v142 + 16);
                }
LABEL_225:
                v143 = *(_QWORD *)(a1 + 880);
                if ((v913 & 0x80000000) != 0)
                  v144 = (uint64_t *)(*(_QWORD *)(v143 + 24) + 16 * (v913 & 0x7FFFFFFF) + 8);
                else
                  v144 = (uint64_t *)(*(_QWORD *)(v143 + 272) + 8 * v913);
                v145 = *v144;
                if (!v145)
                  continue;
                if ((*(_BYTE *)(v145 + 3) & 1) == 0)
                {
                  v145 = *(_QWORD *)(v145 + 24);
                  if (!v145 || (*(_BYTE *)(v145 + 3) & 1) == 0)
                    continue;
                }
                v146 = *(_QWORD *)(v145 + 24);
                if (v146 && (*(_BYTE *)(v146 + 3) & 1) == 0)
                  v146 = 0;
                if (v136 > v119 || v146)
                  continue;
                v147 = *(_QWORD *)(v132 + 64);
                v148 = *(unsigned int *)(v132 + 72);
                *(_QWORD *)&v917 = &v918;
                *((_QWORD *)&v917 + 1) = 0x200000000;
                if (v134 < 8)
                {
                  v149 = 0;
                  if ((_DWORD)v148)
                  {
LABEL_245:
                    v152 = v147 + 8 * v148;
                    do
                    {
                      ++*(_DWORD *)(a1 + 968);
                      (*(void (**)(_QWORD, _QWORD, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 848) + 176))(*(_QWORD *)(a1 + 848), v149[3], v149, v913, 0, *(_QWORD *)((*(_QWORD *)(*(_QWORD *)v147 + 8) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(a1 + 864));
                      v153 = *v149 & 0xFFFFFFFFFFFFFFF8;
                      if (!v153 || (*(_BYTE *)v153 & 4) == 0)
                      {
                        while ((*(_WORD *)(v153 + 44) & 4) != 0)
                          v153 = *(_QWORD *)v153 & 0xFFFFFFFFFFFFFFF8;
                      }
                      v154 = DWORD2(v917);
                      if (DWORD2(v917) >= (unint64_t)HIDWORD(v917))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v917, (uint64_t)&v918, DWORD2(v917) + 1, 8);
                        v154 = DWORD2(v917);
                      }
                      *(_QWORD *)(v917 + 8 * v154) = v153;
                      v155 = ++DWORD2(v917);
                      v147 += 8;
                    }
                    while (v147 != v152);
                    if ((_DWORD)v155)
                    {
                      v156 = (uint64_t *)v917;
                      v157 = 8 * v155;
                      do
                      {
                        v158 = *v156++;
                        sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 288), v158, 0);
                        v157 -= 8;
                      }
                      while (v157);
                      if (DWORD2(v917))
                      {
                        v159 = v917;
                        v160 = v917 + 8 * DWORD2(v917);
                        do
                        {
                          v161 = *(unsigned int *)(*(_QWORD *)v159 + 40);
                          if ((_DWORD)v161)
                          {
                            v162 = 32 * v161;
                            v163 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)v159 + 32) + 4);
                            do
                            {
                              if ((*(v163 - 1) & 0x10000FF) == 0)
                              {
                                LODWORD(v910) = *v163;
                                sub_1C4977DA4((uint64_t)&v922, &v910);
                              }
                              v163 += 8;
                              v162 -= 32;
                            }
                            while (v162);
                          }
                          v159 += 8;
                        }
                        while (v159 != v160);
                      }
                    }
                  }
                }
                else
                {
                  v149 = *(_QWORD **)((v134 & 0xFFFFFFFFFFFFFFF8) + 16);
                  if ((_DWORD)v148)
                    goto LABEL_245;
                }
                if (v925 != v926)
                  sub_1C4977DA4((uint64_t)&v922, &v913);
                if ((llvm::MachineInstr **)v917 != &v918)
                  free((void *)v917);
              }
            }
            v164 = v925;
            v899 = v926;
            if (v925 != v926)
            {
              do
              {
                v180 = *v164;
                v181 = *(_QWORD *)(a1 + 888);
                v182 = *v164 & 0x7FFFFFFF;
                if (v182 >= *(unsigned int *)(v181 + 416)
                  || (v173 = *(_QWORD *)(*(_QWORD *)(v181 + 408) + 8 * v182)) == 0)
                {
                  v173 = sub_1C4851220(*(_QWORD *)(a1 + 888), *v164);
                  v174 = *(_QWORD *)(v181 + 304);
                  v175 = *(_QWORD *)(v181 + 248);
                  *(_QWORD *)v174 = v175;
                  *(_QWORD *)(v174 + 8) = *(_QWORD *)(v175 + 40);
                  *(_OWORD *)(v174 + 16) = *(_OWORD *)(v181 + 288);
                  *(_QWORD *)(v174 + 32) = v181 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v174);
                  *(_DWORD *)(v174 + 184) = 0;
                  v176 = *(_QWORD *)(v181 + 256);
                  v27 = *(_BYTE *)(v176 + 16) == 0;
                  v177 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v176 + 24)
                                                         + 16 * (*(_DWORD *)(v173 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 34);
                  v179 = !v27 && v177 != 0;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v181 + 304), (llvm::LiveInterval *)v173, v179);
                  llvm::LiveIntervals::computeDeadValues(v181, v173, 0);
                }
                if (v180 == (_DWORD)v913)
                {
                  v893 = *(llvm::LiveInterval ***)sub_1C4A06B0C(a1 + 688, (int *)&v913);
                  v183 = *(_QWORD *)(a1 + 888);
                  v184 = *(_QWORD *)(v183 + 408);
                  v185 = *(_QWORD *)(v184 + 8 * v182);
                  if (v185)
                  {
                    v168 = *(_QWORD *)(v185 + 104);
                    if (v168)
                    {
                      do
                      {
                        v166 = *(_QWORD *)(v168 + 96);
                        v165 = *(_QWORD *)(v168 + 104);
                        *(_QWORD *)(v168 + 96) = 0;
                        if (v166)
                        {
                          sub_1C47655E8(v166, *(_QWORD **)(v166 + 8));
                          MEMORY[0x1CAA32FC0](v166, 0x1020C4062D53EE8);
                        }
                        v167 = *(void **)(v168 + 64);
                        if (v167 != (void *)(v168 + 80))
                          free(v167);
                        if (*(_QWORD *)v168 != v168 + 16)
                          free(*(void **)v168);
                        v168 = v165;
                      }
                      while (v165);
                    }
                    v186 = *(_QWORD *)(v185 + 96);
                    *(_QWORD *)(v185 + 96) = 0;
                    *(_QWORD *)(v185 + 104) = 0;
                    if (v186)
                    {
                      sub_1C47655E8(v186, *(_QWORD **)(v186 + 8));
                      MEMORY[0x1CAA32FC0](v186, 0x1020C4062D53EE8);
                    }
                    v187 = *(void **)(v185 + 64);
                    if (v187 != (void *)(v185 + 80))
                      free(v187);
                    if (*(_QWORD *)v185 != v185 + 16)
                      free(*(void **)v185);
                    MEMORY[0x1CAA32FC0](v185, 0x10A0C408DA535C6);
                    v184 = *(_QWORD *)(v183 + 408);
                  }
                  *(_QWORD *)(v184 + 8 * v182) = 0;
                  v188 = *(_QWORD *)(a1 + 888);
                  v189 = (llvm::LiveInterval *)sub_1C4851220(v188, v180);
                  v190 = *(_QWORD *)(v188 + 304);
                  v191 = *(_QWORD *)(v188 + 248);
                  *(_QWORD *)v190 = v191;
                  *(_QWORD *)(v190 + 8) = *(_QWORD *)(v191 + 40);
                  *(_OWORD *)(v190 + 16) = *(_OWORD *)(v188 + 288);
                  *(_QWORD *)(v190 + 32) = v188 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v190);
                  *(_DWORD *)(v190 + 184) = 0;
                  v192 = *(_QWORD *)(v188 + 256);
                  v27 = *(_BYTE *)(v192 + 16) == 0;
                  v193 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v192 + 24)
                                                         + 16 * (*((_DWORD *)v189 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 34);
                  v195 = !v27 && v193 != 0;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v188 + 304), v189, v195);
                  llvm::LiveIntervals::computeDeadValues(v188, (uint64_t)v189, 0);
                  *v893 = v189;
                }
                else if (*(_QWORD *)(v173 + 104))
                {
                  *(_DWORD *)(v173 + 72) = 0;
                  *(_DWORD *)(v173 + 8) = 0;
                  v196 = *(_QWORD *)(a1 + 888);
                  v197 = *(_QWORD *)(v196 + 408);
                  v198 = *(_QWORD *)(v197 + 8 * v182);
                  if (v198)
                  {
                    v172 = *(_QWORD *)(v198 + 104);
                    if (v172)
                    {
                      do
                      {
                        v170 = *(_QWORD *)(v172 + 96);
                        v169 = *(_QWORD *)(v172 + 104);
                        *(_QWORD *)(v172 + 96) = 0;
                        if (v170)
                        {
                          sub_1C47655E8(v170, *(_QWORD **)(v170 + 8));
                          MEMORY[0x1CAA32FC0](v170, 0x1020C4062D53EE8);
                        }
                        v171 = *(void **)(v172 + 64);
                        if (v171 != (void *)(v172 + 80))
                          free(v171);
                        if (*(_QWORD *)v172 != v172 + 16)
                          free(*(void **)v172);
                        v172 = v169;
                      }
                      while (v169);
                    }
                    v199 = *(_QWORD *)(v198 + 96);
                    *(_QWORD *)(v198 + 96) = 0;
                    *(_QWORD *)(v198 + 104) = 0;
                    if (v199)
                    {
                      sub_1C47655E8(v199, *(_QWORD **)(v199 + 8));
                      MEMORY[0x1CAA32FC0](v199, 0x1020C4062D53EE8);
                    }
                    v200 = *(void **)(v198 + 64);
                    if (v200 != (void *)(v198 + 80))
                      free(v200);
                    if (*(_QWORD *)v198 != v198 + 16)
                      free(*(void **)v198);
                    MEMORY[0x1CAA32FC0](v198, 0x10A0C408DA535C6);
                    v197 = *(_QWORD *)(v196 + 408);
                  }
                  *(_QWORD *)(v197 + 8 * v182) = 0;
                  v201 = *(_QWORD *)(a1 + 888);
                  v202 = (llvm::LiveInterval *)sub_1C4851220(v201, v180);
                  v203 = *(_QWORD *)(v201 + 304);
                  v204 = *(_QWORD *)(v201 + 248);
                  *(_QWORD *)v203 = v204;
                  *(_QWORD *)(v203 + 8) = *(_QWORD *)(v204 + 40);
                  *(_OWORD *)(v203 + 16) = *(_OWORD *)(v201 + 288);
                  *(_QWORD *)(v203 + 32) = v201 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v203);
                  *(_DWORD *)(v203 + 184) = 0;
                  v205 = *(_QWORD *)(v201 + 256);
                  v27 = *(_BYTE *)(v205 + 16) == 0;
                  v206 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v205 + 24)
                                                         + 16 * (*((_DWORD *)v202 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 34);
                  v208 = !v27 && v206 != 0;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v201 + 304), v202, v208);
                  llvm::LiveIntervals::computeDeadValues(v201, (uint64_t)v202, 0);
                }
                else
                {
                  llvm::LiveIntervals::extendToUses(*(llvm::LiveIntervals **)(a1 + 888), (llvm::LiveInterval *)v173);
                }
                ++v164;
              }
              while (v164 != v899);
              v164 = v925;
            }
            v88 = v883;
            v87 = v887;
            if (v164)
            {
              v926 = v164;
              operator delete(v164);
            }
            MEMORY[0x1CAA32FB4](v922, 4);
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            MEMORY[0x1CAA32FB4](v937, 8);
          }
          if (__base != v930)
            free(__base);
          v87 = (llvm::SmallPtrSetImplBase *)((char *)v87 + 4);
          if (v87 == (llvm::SmallPtrSetImplBase *)v88)
          {
            v88 = (unsigned int *)v934;
            goto LABEL_352;
          }
        }
        while ((*(_DWORD *)v92 & 0x81000000) != 0)
        {
          v92 = *(_QWORD *)(v92 + 24);
          if (!v92)
            goto LABEL_185;
        }
        LODWORD(v93) = 0;
        v94 = *(_QWORD *)(v92 + 8);
LABEL_156:
        v95 = *(_WORD *)(v94 + 44);
        v96 = v94;
        if ((v95 & 4) != 0)
        {
          do
            v96 = *(_QWORD *)v96 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v96 + 44) & 4) != 0);
        }
        if ((v95 & 8) != 0)
        {
          do
            v94 = *(_QWORD *)(v94 + 8);
          while ((*(_WORD *)(v94 + 44) & 8) != 0);
        }
        v97 = *(_QWORD *)(v94 + 8);
        if (v96 != v97)
        {
          while (1)
          {
            v98 = **(unsigned __int16 **)(v96 + 16);
            v99 = v98 > 0x17;
            v100 = (1 << v98) & 0x83E000;
            if (v99 || v100 == 0)
              break;
            v96 = *(_QWORD *)(v96 + 8);
            if (v96 == v97)
            {
              v96 = v97;
              break;
            }
          }
        }
        v102 = *(_QWORD *)(*(_QWORD *)(a1 + 888) + 288);
        v103 = *(_QWORD *)(v102 + 368);
        v104 = *(unsigned int *)(v102 + 384);
        if ((_DWORD)v104)
        {
          LODWORD(v105) = ((v96 >> 4) ^ (v96 >> 9)) & (v104 - 1);
          v106 = (uint64_t *)(v103 + 16 * v105);
          v107 = *v106;
          if (v96 == *v106)
            goto LABEL_172;
          v108 = 1;
          while (v107 != -4096)
          {
            v109 = v105 + v108++;
            v105 = v109 & (v104 - 1);
            v107 = *(_QWORD *)(v103 + 16 * v105);
            if (v96 == v107)
            {
              v106 = (uint64_t *)(v103 + 16 * v105);
              goto LABEL_172;
            }
          }
        }
        v106 = (uint64_t *)(v103 + 16 * v104);
LABEL_172:
        v110 = v106[1];
        if (v93 >= HIDWORD(v929))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v930, v93 + 1, 8);
          LODWORD(v93) = v929;
        }
        *((_QWORD *)__base + v93) = v110;
        v93 = (v929 + 1);
        LODWORD(v929) = v929 + 1;
        v111 = *(_QWORD *)(v92 + 8);
        while (1)
        {
          v92 = *(_QWORD *)(v92 + 24);
          if (!v92)
            break;
          if ((*(_DWORD *)v92 & 0x81000000) == 0)
          {
            v94 = *(_QWORD *)(v92 + 8);
            if (v94 != v111)
              goto LABEL_156;
          }
        }
        if (v93 >= 2)
          qsort(__base, v93, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4A07FB0);
        goto LABEL_185;
      }
LABEL_352:
      if (v88)
      {
        v935 = v88;
        operator delete(v88);
      }
    }
    MEMORY[0x1CAA32FB4](v931, 4);
  }
  v215 = *(uint64_t ***)(a1 + 608);
  v216 = dword_1C6404980 + 30336;
  v217 = *(unsigned int *)(a1 + 616);
  if (*(_DWORD *)(a1 + 912))
  {
    v905[0] = a1;
    v910 = v905;
    v911 = a1;
    v218 = *(_QWORD *)(a1 + 888);
    __base = v930;
    v929 = 0x400000000;
    v930[8] = v218;
    v907 = v909;
    __nel = 0;
    if ((_DWORD)v217)
    {
      v219 = 8 * v217;
      do
      {
        v220 = **v215;
        if (*(_DWORD *)(v220 + 8) && sub_1C4A083F0(**v215, *(_QWORD *)(a1 + 880)) - 1 <= 1)
        {
          v221 = *(_QWORD *)(*(_QWORD *)v220 + 24 * *(unsigned int *)(v220 + 8) - 16);
          v222 = __nel;
          if (__nel >= (unint64_t)HIDWORD(__nel))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v907, (uint64_t)v909, __nel + 1, 8);
            v222 = __nel;
          }
          *((_QWORD *)v907 + v222) = v221;
          LODWORD(__nel) = __nel + 1;
        }
        ++v215;
        v219 -= 8;
      }
      while (v219);
      if (__nel >= 2)
        qsort(v907, __nel, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4A07FB0);
    }
    LODWORD(v938) = 0;
    LOBYTE(v940) = 0;
    *((_QWORD *)&v940 + 1) = 0;
    v937 = (llvm::MachineOperand *)&unk_1E81A7208;
    *((_QWORD *)&v941 + 1) = a1 + 920;
    LODWORD(v941) = 0;
    *((_QWORD *)&v938 + 1) = 0;
    __p = 0uLL;
    v223 = *(unsigned int *)(a1 + 616);
    if ((_DWORD)v223)
    {
      v224 = *(uint64_t ***)(a1 + 608);
      v225 = &v924;
      v888 = (llvm::SmallPtrSetImplBase *)(a1 + 512);
      v891 = &v224[v223];
LABEL_368:
      v894 = *v224;
      v226 = **v224;
      *(_QWORD *)&v913 = &v914;
      *((_QWORD *)&v913 + 1) = 0x400000000;
      if (!*(_DWORD *)(v226 + 8))
        goto LABEL_527;
      v227 = *(_QWORD *)(a1 + 880);
      v228 = *(unsigned int *)(v226 + 112);
      v229 = (uint64_t *)((v228 & 0x80000000) != 0
                       ? *(_QWORD *)(v227 + 24) + 16 * (v228 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v227 + 272) + 8 * v228);
      v230 = *v229;
      if (!*v229)
        goto LABEL_527;
      while ((*(_BYTE *)(v230 + 3) & 1) != 0)
      {
        v230 = *(_QWORD *)(v230 + 24);
        if (!v230)
          goto LABEL_527;
      }
      v231 = 0;
      v232 = *(_QWORD *)(v230 + 8);
LABEL_377:
      v233 = *(_QWORD *)(v232 + 16);
      if ((*(_BYTE *)(v233 + 8) & 8) == 0 && (*(_QWORD *)(v233 + 16) & 2) != 0)
      {
        if (v231 >= HIDWORD(v913))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v913, (uint64_t)&v914, v231 + 1, 8);
          v231 = DWORD2(v913);
        }
        *(_QWORD *)(v913 + 8 * v231) = v232;
        v231 = ++DWORD2(v913);
        v232 = *(_QWORD *)(v230 + 8);
      }
      while (1)
      {
        v230 = *(_QWORD *)(v230 + 24);
        if (!v230)
          break;
        if ((*(_BYTE *)(v230 + 3) & 1) == 0 && *(_QWORD *)(v230 + 8) != v232)
        {
          v232 = *(_QWORD *)(v230 + 8);
          goto LABEL_377;
        }
      }
      if (!v231)
        goto LABEL_527;
      v884 = v224;
      v931 = &v933;
      v932 = 0x800000000;
      v234 = (uint64_t *)v913;
      v235 = v913 + 8 * v231;
      while (1)
      {
        v236 = *v234;
        v922 = v225;
        v923 = 0x400000000;
        if (v236)
          break;
LABEL_495:
        if (++v234 == (uint64_t *)v235)
        {
          if ((_DWORD)v932 == 1)
          {
            v302 = 0;
            v303 = (int *)v931;
            v301 = *(_QWORD *)v931;
            v300 = *(_QWORD *)v931 & 0xFFFFFFFFFFFFFF00;
            v224 = v884;
          }
          else
          {
            v224 = v884;
            if ((_DWORD)v932)
            {
              qsort(v931, v932, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4A07FB0);
              v303 = (int *)v931;
              v304 = (char *)v931 + 8 * v932;
              v305 = (char *)v931;
              if ((_DWORD)v932)
              {
                v305 = (char *)v931 - 8;
                v306 = 8 * v932 - 8;
                while (v306)
                {
                  v307 = *((_QWORD *)v305 + 1);
                  v308 = *((_QWORD *)v305 + 2);
                  v305 += 8;
                  v306 -= 8;
                  if (v307 == v308)
                    goto LABEL_516;
                }
              }
              else
              {
LABEL_516:
                if (v305 != v304)
                {
                  v309 = v305 + 16;
                  if (v305 + 16 != v304)
                  {
                    v310 = *(_QWORD *)v305;
                    do
                    {
                      v311 = v310;
                      v310 = *(_QWORD *)v309;
                      if (v311 != *(_QWORD *)v309)
                      {
                        *((_QWORD *)v305 + 1) = v310;
                        v305 += 8;
                      }
                      v309 += 8;
                    }
                    while (v309 != v304);
                  }
                  v304 = v305 + 8;
                }
              }
              v302 = 0;
              v312 = v304 - (char *)v303;
              LODWORD(v932) = v312 >> 3;
              v301 = *(_QWORD *)((char *)v303 + (v312 & 0x7FFFFFFF8) - 8);
              v300 = v301 & 0xFFFFFFFFFFFFFF00;
            }
            else
            {
              v300 = 0;
              LODWORD(v301) = 0;
              v302 = 1;
              v303 = (int *)v931;
            }
          }
          if (v303 != &v933)
            free(v303);
          if ((v302 & 1) == 0)
          {
            v319 = v301 | v300;
            v320 = *(_QWORD *)(*(_QWORD *)v226 + 24 * *(unsigned int *)(v226 + 8) - 16);
            sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 288), v319);
            v321 = v301 & 0xF8 | v300 & 0xFFFFFFFFFFFFFFF8;
            v322 = (v301 >> 1) & 3;
            v323 = *(_DWORD *)((v319 & 0xFFFFFFFFFFFFFFF8) + 24) | v322;
            v878 = v320 & 0xFFFFFFFFFFFFFFF8;
            v895 = (v320 >> 1) & 3;
            if (v323 > (*(_DWORD *)((v320 & 0xFFFFFFFFFFFFFFF8) + 24) | v895))
            {
              sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 288), v320);
              v323 = *(_DWORD *)(v321 + 24) | v322;
            }
            v324 = *(_QWORD *)(*(_QWORD *)v226 + 24 * *(unsigned int *)(v226 + 8) - 16);
            v325 = v324 & 0xFFFFFFFFFFFFFFF8;
            if (v323 <= ((v324 >> 1) & 3 | *(_DWORD *)((v324 & 0xFFFFFFFFFFFFFFF8) + 24)))
              goto LABEL_544;
            v326 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 288), v319);
            v327 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 288), v324);
            v328 = !v326 || v327 == 0;
            if (v328 || v326 == v327)
              goto LABEL_544;
            if (!*(_BYTE *)(*(_QWORD *)(a1 + 856) + 305))
              goto LABEL_544;
            v330 = *(_DWORD *)(a1 + 616);
            v331 = __OFSUB__(v330, 50);
            if (v330 < 0x32)
              goto LABEL_544;
            v366 = *(_DWORD *)(v326 + 24);
            v367 = *(_DWORD *)(v327 + 24);
            v368 = *(_DWORD *)(v321 + 24);
            v369 = *(_DWORD *)(v325 + 24);
            v370 = atomic_load((unsigned __int8 *)&qword_1ED7ED2A0);
            if ((v370 & 1) == 0)
            {
              v871 = v366;
              v868 = *(_DWORD *)(v325 + 24);
              v383 = __cxa_guard_acquire(&qword_1ED7ED2A0);
              v369 = v868;
              v366 = v871;
              if (v383)
              {
                byte_1ED7ED288 = 1;
                __cxa_guard_release(&qword_1ED7ED2A0);
                v369 = v868;
                v366 = v871;
              }
            }
            v371 = atomic_load((unsigned __int8 *)&qword_1ED7ED2A8);
            if ((v371 & 1) == 0)
            {
              v872 = v366;
              v869 = v369;
              v384 = __cxa_guard_acquire(&qword_1ED7ED2A8);
              v369 = v869;
              v366 = v872;
              if (v384)
              {
                byte_1ED7ED28C = 1;
                __cxa_guard_release(&qword_1ED7ED2A8);
                v369 = v869;
                v366 = v872;
              }
            }
            if ((byte_1ED7ED288 & 1) != 0 || (byte_1ED7ED28C & 1) != 0)
            {
LABEL_544:
              v224 = v884;
            }
            else
            {
              v372 = (v324 >> 1) & 3;
              v373 = (((v366 - v367) & ((v368 | v322) - (v369 | v372)) & 0x80000000) != 0) != v331 || v324 == v319;
              v224 = v884;
              if (!v373)
              {
                v374 = *(_DWORD *)(v325 + 24);
                v375 = *(_DWORD *)(v878 + 24);
                v376 = (_OWORD *)*((_QWORD *)&__p + 1);
                if ((_QWORD)__p - *((_QWORD *)&__p + 1) > 0x12uLL)
                {
                  *(_DWORD *)(*((_QWORD *)&__p + 1) + 15) = 543515502;
                  *v376 = *(_OWORD *)"Shrunk to distance ";
                  *((_QWORD *)&__p + 1) += 19;
                  v377 = (llvm::raw_ostream *)&v937;
                }
                else
                {
                  v377 = llvm::raw_ostream::write((llvm::raw_ostream *)&v937, "Shrunk to distance ", 0x13uLL);
                  v372 = (v324 >> 1) & 3;
                }
                v378 = (v374 | v372) - (v375 | v895);
                v379 = v378;
                if (v378 < 0)
                {
                  v379 = -(uint64_t)v378;
                  v380 = v377;
                  v381 = 1;
                }
                else
                {
                  v380 = v377;
                  v381 = 0;
                }
                sub_1C5E21910(v380, v379, 0, 0, v381);
                v382 = (_BYTE *)*((_QWORD *)v377 + 4);
                if (*((_BYTE **)v377 + 3) == v382)
                {
                  llvm::raw_ostream::write(v377, "\n", 1uLL);
                }
                else
                {
                  *v382 = 10;
                  ++*((_QWORD *)v377 + 4);
                }
                v319 = v324;
              }
            }
            v332 = a1;
            v333 = v226;
            v334 = v319;
            goto LABEL_605;
          }
LABEL_527:
          v313 = *v894;
          if (!*(_DWORD *)(*v894 + 8))
            goto LABEL_570;
          if (!*(_BYTE *)(a1 + 944))
            goto LABEL_566;
          v314 = *(_QWORD *)(a1 + 880);
          v315 = *(unsigned int *)(v313 + 112);
          v316 = *(_QWORD *)(v314 + 24);
          if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v316 + 16 * (v315 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 24) == 14)
            goto LABEL_566;
          v317 = sub_1C4A09674(*(_QWORD *)(a1 + 880), *(_DWORD *)(v313 + 112));
          v318 = (uint64_t *)((v315 & 0x80000000) != 0
                           ? v316 + 16 * (v315 & 0x7FFFFFFF) + 8
                           : *(_QWORD *)(v314 + 272) + 8 * v315);
          v335 = *v318;
          if (!*v318)
            goto LABEL_566;
          while ((*(_DWORD *)v335 & 0x81000000) != 0)
          {
            v335 = *(_QWORD *)(v335 + 24);
            if (!v335)
              goto LABEL_566;
          }
          v336 = 0;
LABEL_552:
          if (**(_WORD **)(*(_QWORD *)(v335 + 8) + 16) != 4998)
            goto LABEL_555;
          if (sub_1C4A09728(a1, v335, v317))
          {
LABEL_570:
            sub_1C4774094(v888, v313);
          }
          else
          {
            v336 = 1;
LABEL_555:
            while (1)
            {
              v335 = *(_QWORD *)(v335 + 24);
              if (!v335)
                break;
              if ((*(_DWORD *)v335 & 0x81000000) == 0)
                goto LABEL_552;
            }
            if ((v336 & 1) != 0)
            {
              v337 = *(unsigned int *)(v313 + 72);
              if ((_DWORD)v337)
              {
                v338 = *(_QWORD *)(v313 + 64);
                v339 = 8 * v337;
                while (*(_QWORD *)(*(_QWORD *)v338 + 8) < 8uLL || (*(_QWORD *)(*(_QWORD *)v338 + 8) & 6) != 0)
                {
                  v338 += 8;
                  v339 -= 8;
                  if (!v339)
                    goto LABEL_566;
                }
                goto LABEL_570;
              }
            }
LABEL_566:
            if (*(_DWORD *)(a1 + 912) != 2)
              goto LABEL_570;
            v341 = *(_QWORD *)(*(_QWORD *)v313 + 24 * *(unsigned int *)(v313 + 8) - 16);
            if ((v341 & 6) == 0)
            {
              v342 = (v341 >> 1) & 3;
              v343 = v341 & 0xFFFFFFFFFFFFFFF8;
              if (v342)
                v341 = v343 | (2 * (v342 - 1));
              else
                v341 = *(_QWORD *)v343 | 6;
            }
            v344 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 288), v341);
            v345 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 288) + 392)
                             + 16 * *(unsigned int *)(v344 + 24)
                             + 8);
            v346 = *(_DWORD *)((v345 & 0xFFFFFFFFFFFFFFF8) + 24) - *(_DWORD *)((v341 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v346 < 0x204)
            {
              v896 = v341 & 0xFFFFFFFFFFFFFFF8;
              sub_1C4A083F0(v313, *(_QWORD *)(a1 + 880));
              if ((v346 & 0xFFFFFFFC) == 0x200)
              {
                v334 = v345;
                goto LABEL_604;
              }
              if (!*(_BYTE *)(*(_QWORD *)(a1 + 856) + 380) || !(_DWORD)__nel)
                goto LABEL_594;
              v353 = *(_DWORD *)(v896 + 24);
              v354 = v353 | (v341 >> 1) & 3;
              v355 = __nel;
              v356 = (unint64_t *)v907;
              do
              {
                v357 = v355 >> 1;
                v358 = &v356[v355 >> 1];
                v360 = *v358;
                v359 = v358 + 1;
                v355 += ~(v355 >> 1);
                if ((*(_DWORD *)((v360 & 0xFFFFFFFFFFFFFFF8) + 24) - v353) > 0x203
                  && v354 < ((v360 >> 1) & 3 | *(_DWORD *)((v360 & 0xFFFFFFFFFFFFFFF8) + 24)))
                {
                  v355 = v357;
                }
                else
                {
                  v356 = v359;
                }
              }
              while (v355);
              if (v356 != (unint64_t *)((char *)v907 + 8 * __nel))
              {
                v334 = *v356;
                goto LABEL_604;
              }
              v334 = *(v356 - 1);
              if (((v334 >> 1) & 3 | *(_DWORD *)((v334 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v354)
              {
LABEL_594:
                v885 = v224;
                while (1)
                {
                  v361 = *(uint64_t **)(v344 + 88);
                  v362 = *(uint64_t **)(v344 + 96);
                  if (v361 == v362)
                    break;
                  while (1)
                  {
                    v344 = *v361;
                    if (*v361 + 48 != (*(_QWORD *)(*v361 + 48) & 0xFFFFFFFFFFFFFFF8))
                    {
                      v363 = sub_1C4A089AC((uint64_t)&__base, *v361);
                      if (*(_DWORD *)(v363 + 8))
                      {
                        v364 = sub_1C4A095F0((uint64_t *)v363, *(_QWORD *)(v344 + 56));
                        v334 = v364;
                        v365 = *(_DWORD *)((v364 & 0xFFFFFFFFFFFFFFF8) + 24);
                        if (((v364 >> 1) & 3 | v365) > (*(_DWORD *)((v345 & 0xFFFFFFFFFFFFFFF8) + 24) | (v345 >> 1) & 3))
                          break;
                      }
                    }
                    if (++v361 == v362)
                      goto LABEL_603;
                  }
                  v345 = v364;
                  v224 = v885;
                  if ((v365 - *(_DWORD *)(v896 + 24)) > 0x1FF)
                    goto LABEL_604;
                }
LABEL_603:
                v334 = v345;
                v224 = v885;
              }
            }
            else
            {
              v347 = (uint64_t *)sub_1C4A089AC((uint64_t)&__base, v344);
              v348 = *(_QWORD *)(*(_QWORD *)v313 + 24 * *(unsigned int *)(v313 + 8) - 16);
              v349 = **(_QWORD **)v313;
              if ((v349 & 6) != 0
                && (*(_QWORD *)(*(_QWORD *)v313 + 24 * *(unsigned int *)(v313 + 8) - 16) & 6) != 0)
              {
                v351 = *(_QWORD *)(a1 + 888);
                sub_1C499C548(*(_QWORD *)(v351 + 288), v349);
                sub_1C499C548(*(_QWORD *)(v351 + 288), v348);
              }
              if (v348 < 8)
                v352 = 0;
              else
                v352 = *(_QWORD *)((v348 & 0xFFFFFFFFFFFFFFF8) + 16);
              v334 = sub_1C4A095F0(v347, v352);
            }
LABEL_604:
            v332 = a1;
            v333 = v226;
LABEL_605:
            sub_1C4A0829C(v332, v333, v334);
          }
          if ((__int128 *)v913 != &v914)
            free((void *)v913);
          if (++v224 == v891)
          {
            v72 = *((_QWORD *)&__p + 1) - *((_QWORD *)&v938 + 1);
            if (*((_QWORD *)&__p + 1) != *((_QWORD *)&v938 + 1))
            {
              *((_QWORD *)&__p + 1) = *((_QWORD *)&v938 + 1);
              llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v937, *((const char **)&v938 + 1), v72);
            }
            goto LABEL_634;
          }
          goto LABEL_368;
        }
      }
      v237 = *(_QWORD *)(*(_QWORD *)v226 + 24 * *(unsigned int *)(v226 + 8) - 16);
      v238 = *(_QWORD *)(v236 + 32);
      v239 = *(unsigned int *)(v238 + 4);
      if (sub_1C4778650(*(_QWORD *)(a1 + 880), *(_DWORD *)(v238 + 4)))
      {
        *(_QWORD *)&v917 = &v918;
        *((_QWORD *)&v917 + 1) = 0x400000000;
        if (!(_DWORD)v923)
          goto LABEL_485;
        goto LABEL_484;
      }
      v240 = *(_QWORD *)(a1 + 880);
      if ((v239 & 0x80000000) != 0)
        v241 = (uint64_t *)(*(_QWORD *)(v240 + 24) + 16 * (v239 & 0x7FFFFFFF) + 8);
      else
        v241 = (uint64_t *)(*(_QWORD *)(v240 + 272) + 8 * v239);
      v242 = *v241;
      if (v242
        && ((*(_BYTE *)(v242 + 3) & 1) != 0 || (v242 = *(_QWORD *)(v242 + 24)) != 0 && (*(_BYTE *)(v242 + 3) & 1) != 0))
      {
        v245 = *(_QWORD *)(v242 + 24);
        if (v245)
        {
          LODWORD(v243) = (*(_BYTE *)(v245 + 3) & 1) == 0;
          if ((v239 & 0x80000000) == 0)
            goto LABEL_400;
        }
        else
        {
          LODWORD(v243) = 1;
          if ((v239 & 0x80000000) == 0)
            goto LABEL_400;
        }
      }
      else
      {
        LODWORD(v243) = 0;
        if ((v239 & 0x80000000) == 0)
        {
LABEL_400:
          v244 = (uint64_t *)(*(_QWORD *)(v240 + 272) + 8 * v239);
          goto LABEL_404;
        }
      }
      v244 = (uint64_t *)(*(_QWORD *)(v240 + 24) + 16 * (v239 & 0x7FFFFFFF) + 8);
LABEL_404:
      v246 = *v244;
      if (!*v244)
      {
LABEL_407:
        if ((v239 & 0x80000000) != 0)
        {
LABEL_465:
          v247 = (uint64_t *)(*(_QWORD *)(v240 + 24) + 16 * (v239 & 0x7FFFFFFF) + 8);
LABEL_466:
          v282 = *v247;
          if (*v247)
          {
            while ((*(_BYTE *)(v282 + 3) & 1) != 0)
            {
              v282 = *(_QWORD *)(v282 + 24);
              if (!v282)
                goto LABEL_469;
            }
            v287 = *(_QWORD *)(v282 + 8);
LABEL_475:
            sub_1C4A08714(a1, &v910, v287, v237, (uint64_t)&v922, v243 & 1);
            v288 = *(_QWORD *)(v282 + 8);
            while (1)
            {
              v282 = *(_QWORD *)(v282 + 24);
              if (!v282)
                break;
              if ((*(_BYTE *)(v282 + 3) & 1) == 0)
              {
                v287 = *(_QWORD *)(v282 + 8);
                if (v287 != v288)
                  goto LABEL_475;
              }
            }
          }
          goto LABEL_469;
        }
LABEL_408:
        v247 = (uint64_t *)(*(_QWORD *)(v240 + 272) + 8 * v239);
        goto LABEL_466;
      }
      while ((*(_BYTE *)(v246 + 3) & 1) != 0)
      {
        v246 = *(_QWORD *)(v246 + 24);
        if (!v246)
          goto LABEL_407;
      }
      v248 = v237 & 0xFFFFFFFFFFFFFFF8;
      v249 = (v237 >> 1) & 3;
      v250 = *(_QWORD *)(v246 + 8);
      v251 = 1;
LABEL_410:
      v252 = **(unsigned __int16 **)(v250 + 16);
      if (v252 != 19 && v252 != 11)
      {
LABEL_420:
        if ((v239 & 0x80000000) == 0)
        {
          sub_1C4774094(v888, v226);
          *(_QWORD *)&v917 = &v918;
          *((_QWORD *)&v917 + 1) = 0x400000000;
          goto LABEL_485;
        }
        if ((v252 - 13) >= 5 && v252 != 7)
        {
          v259 = v243;
          v260 = v225;
          v261 = v248;
          v876 = v243;
          v243 = v235;
          v262 = v226;
          v263 = v249;
          sub_1C4A08714(a1, &v910, v250, v237, (uint64_t)&v922, v259);
          v249 = v263;
          v226 = v262;
          v235 = v243;
          LODWORD(v243) = v876;
          v248 = v261;
          v225 = v260;
          v251 = 0;
        }
LABEL_422:
        v258 = *(_QWORD *)(v246 + 8);
        while (1)
        {
          v246 = *(_QWORD *)(v246 + 24);
          if (!v246)
            break;
          if ((*(_BYTE *)(v246 + 3) & 1) == 0)
          {
            v250 = *(_QWORD *)(v246 + 8);
            if (v250 != v258)
              goto LABEL_410;
          }
        }
        if ((v251 & 1) == 0)
        {
LABEL_469:
          v283 = *(_QWORD *)(a1 + 888);
          if ((v239 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v283 + 416)
            || (v284 = *(unsigned int **)(*(_QWORD *)(v283 + 408) + 8 * (v239 & 0x7FFFFFFF))) == 0)
          {
            v284 = (unsigned int *)sub_1C4851220(*(_QWORD *)(a1 + 888), v239);
            v294 = *(_QWORD *)(v283 + 304);
            v295 = *(_QWORD *)(v283 + 248);
            *(_QWORD *)v294 = v295;
            *(_QWORD *)(v294 + 8) = *(_QWORD *)(v295 + 40);
            *(_OWORD *)(v294 + 16) = *(_OWORD *)(v283 + 288);
            *(_QWORD *)(v294 + 32) = v283 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v294);
            *(_DWORD *)(v294 + 184) = 0;
            v296 = *(_QWORD *)(v283 + 256);
            v27 = *(_BYTE *)(v296 + 16) == 0;
            v297 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v296 + 24) + 16 * (v284[28] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v299 = !v27 && v297 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v283 + 304), (llvm::LiveInterval *)v284, v299);
            llvm::LiveIntervals::computeDeadValues(v283, (uint64_t)v284, 0);
          }
          v285 = *(_QWORD *)(*(_QWORD *)v284 + 24 * v284[2] - 16);
          v286 = v923;
          if (((v285 >> 1) & 3 | *(_DWORD *)((v285 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v237 & 0xFFFFFFFFFFFFFFF8) + 24) | (v237 >> 1) & 3))
          {
            if ((_DWORD)v923)
            {
              *(_QWORD *)&v917 = &v918;
              *((_QWORD *)&v917 + 1) = 0x400000000;
              goto LABEL_484;
            }
            if (HIDWORD(v923))
            {
              v289 = 0;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v922, (uint64_t)v225, 1uLL, 8);
              v289 = v923;
            }
            *((_QWORD *)v922 + v289) = v285;
            v286 = v923 + 1;
            LODWORD(v923) = v923 + 1;
          }
          *(_QWORD *)&v917 = &v918;
          *((_QWORD *)&v917 + 1) = 0x400000000;
          if (!v286)
          {
LABEL_485:
            if (v922 != v225)
              free(v922);
            v290 = (llvm::MachineInstr **)v917;
            if (DWORD2(v917))
            {
              v291 = v932;
              v292 = 8 * DWORD2(v917);
              do
              {
                v293 = *v290;
                if (v291 >= HIDWORD(v932))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v931, (uint64_t)&v933, v291 + 1, 8);
                  v291 = v932;
                }
                *((_QWORD *)v931 + v291) = v293;
                v291 = v932 + 1;
                LODWORD(v932) = v932 + 1;
                ++v290;
                v292 -= 8;
              }
              while (v292);
              v290 = (llvm::MachineInstr **)v917;
            }
            if (v290 != &v918)
              free(v290);
            goto LABEL_495;
          }
LABEL_484:
          sub_1C4964480((uint64_t)&v917, (const void **)&v922);
          goto LABEL_485;
        }
        v240 = *(_QWORD *)(a1 + 880);
        if ((v239 & 0x80000000) != 0)
          goto LABEL_465;
        goto LABEL_408;
      }
      v254 = 0;
      v255 = *(unsigned int *)(*(_QWORD *)(v250 + 32) + 4);
      v256 = v255 >> 3;
      while (1)
      {
        if ((v255 - 1) <= 0x3FFFFFFE)
        {
          v257 = (uint64_t)*(&off_1E7FA9D30)[v254];
          if (v256 < *(unsigned __int16 *)(v257 + 22)
            && ((1 << (v255 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v257 + 8) + v256)) != 0)
          {
            break;
          }
        }
        if (++v254 == 8)
          goto LABEL_420;
      }
      v243 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 880) + 272) + 8 * v255);
      if (!v243)
        goto LABEL_422;
      while ((*(_BYTE *)(v243 + 3) & 1) != 0)
      {
        v243 = *(_QWORD *)(v243 + 24);
        if (!v243)
          goto LABEL_422;
      }
      v264 = *(_QWORD *)(v243 + 8);
LABEL_434:
      if (**(unsigned __int16 **)(v264 + 16) - 13 < 5)
        goto LABEL_455;
      v265 = *(_WORD *)(v264 + 44);
      v266 = v264;
      if ((v265 & 4) != 0)
      {
        do
          v266 = *(_QWORD *)v266 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v266 + 44) & 4) != 0);
      }
      v267 = v264;
      if ((v265 & 8) != 0)
      {
        do
          v267 = *(_QWORD *)(v267 + 8);
        while ((*(_WORD *)(v267 + 44) & 8) != 0);
      }
      v268 = *(_QWORD *)(v267 + 8);
      if (v266 != v268)
      {
        while (1)
        {
          v269 = **(unsigned __int16 **)(v266 + 16);
          v99 = v269 > 0x17;
          v270 = (1 << v269) & 0x83E000;
          if (v99 || v270 == 0)
            break;
          v266 = *(_QWORD *)(v266 + 8);
          if (v266 == v268)
          {
            v266 = v268;
            break;
          }
        }
      }
      v272 = *(_QWORD *)(*(_QWORD *)(a1 + 888) + 288);
      v273 = *(_QWORD *)(v272 + 368);
      v274 = *(unsigned int *)(v272 + 384);
      if ((_DWORD)v274)
      {
        LODWORD(v275) = ((v266 >> 4) ^ (v266 >> 9)) & (v274 - 1);
        v276 = (uint64_t *)(v273 + 16 * v275);
        v277 = *v276;
        if (v266 == *v276)
        {
LABEL_451:
          v280 = v276[1];
          if (((v280 >> 1) & 3 | *(_DWORD *)((v280 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v248 + 24) | v249))
          {
            v281 = v923;
            if (v923 >= (unint64_t)HIDWORD(v923))
            {
              v870 = v251;
              v877 = v248;
              v875 = v249;
              v867 = v276[1];
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v922, (uint64_t)v225, v923 + 1, 8);
              v280 = v867;
              v251 = v870;
              v249 = v875;
              v248 = v877;
              v281 = v923;
            }
            *((_QWORD *)v922 + v281) = v280;
            LODWORD(v923) = v923 + 1;
            v264 = *(_QWORD *)(v243 + 8);
          }
LABEL_455:
          while (1)
          {
            v243 = *(_QWORD *)(v243 + 24);
            if (!v243)
              goto LABEL_422;
            if ((*(_BYTE *)(v243 + 3) & 1) == 0 && *(_QWORD *)(v243 + 8) != v264)
            {
              v264 = *(_QWORD *)(v243 + 8);
              goto LABEL_434;
            }
          }
        }
        v278 = 1;
        while (v277 != -4096)
        {
          v279 = v275 + v278++;
          v275 = v279 & (v274 - 1);
          v277 = *(_QWORD *)(v273 + 16 * v275);
          if (v266 == v277)
          {
            v276 = (uint64_t *)(v273 + 16 * v275);
            goto LABEL_451;
          }
        }
      }
      v276 = (uint64_t *)(v273 + 16 * v274);
      goto LABEL_451;
    }
LABEL_634:
    v937 = (llvm::MachineOperand *)off_1E81A6E70;
    v216 = &dword_1C6404980[7584];
    if ((_DWORD)v941 == 1 && *((_QWORD *)&v938 + 1))
      MEMORY[0x1CAA32F9C](*((_QWORD *)&v938 + 1), 0x1000C8077774924, v72);
    if (v907 != v909)
      free(v907);
    v385 = __base;
    if ((_DWORD)v929)
    {
      v855 = (char *)__base - 8;
      v856 = 16 * v929;
      do
      {
        v857 = *(_QWORD **)&v855[v856];
        *(_QWORD *)&v855[v856] = 0;
        if (v857)
        {
          v858 = (_QWORD *)v857[5];
          if (v858 != v857 + 7)
            free(v858);
          v859 = (_QWORD *)v857[3];
          if (v859 != v857 + 5)
            free(v859);
          MEMORY[0x1CAA32FB4](*v857, 8);
          MEMORY[0x1CAA32FC0](v857, 0x10E0C4078A40482);
        }
        v856 -= 16;
      }
      while (v856);
      v385 = __base;
      v216 = dword_1C6404980 + 30336;
    }
    if (v385 != v930)
      free(v385);
    v215 = *(uint64_t ***)(a1 + 608);
    LODWORD(v217) = *(_DWORD *)(a1 + 616);
  }
  __base = v930;
  v386 = *((_QWORD *)v216 + 203);
  v929 = v386;
  v907 = v909;
  __nel = 0x200000000;
  v931 = &v933;
  v932 = v386;
  if ((_DWORD)v217)
  {
    v387 = &v215[v217];
    do
    {
      v388 = *v215;
      if (*(_DWORD *)(a1 + 912)
        && ((v389 = sub_1C477672C(a1 + 512, *v388), v390 = *(_QWORD *)(a1 + 520), v390 != *(_QWORD *)(a1 + 512))
          ? (v391 = 528)
          : (v391 = 532),
            v389 == (_QWORD *)(v390 + 8 * *(unsigned int *)(a1 + v391))))
      {
        if (*(_BYTE *)(a1 + 944))
        {
          v394 = *v388;
          v395 = *(_QWORD *)(a1 + 880);
          v396 = *(unsigned int *)(*v388 + 112);
          if ((sub_1C4A06A78(v395, *(_DWORD *)(*v388 + 112)) & 1) == 0)
          {
            v397 = *(_QWORD *)(v395 + 24);
            if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v397 + 16 * (v396 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 24) != 14)
            {
              v398 = sub_1C4A09674(v395, v396);
              if ((v396 & 0x80000000) != 0)
                v399 = (uint64_t *)(v397 + 16 * (v396 & 0x7FFFFFFF) + 8);
              else
                v399 = (uint64_t *)(*(_QWORD *)(v395 + 272) + 8 * v396);
              v400 = *v399;
              if (*v399)
              {
                while ((*(_DWORD *)v400 & 0x81000000) != 0)
                {
                  v400 = *(_QWORD *)(v400 + 24);
                  if (!v400)
                    goto LABEL_659;
                }
LABEL_672:
                if (sub_1C4A09728(a1, v400, v398))
                  goto LABEL_673;
                while (1)
                {
                  v400 = *(_QWORD *)(v400 + 24);
                  if (!v400)
                    break;
                  if ((*(_DWORD *)v400 & 0x81000000) == 0)
                    goto LABEL_672;
                }
              }
LABEL_659:
              v401 = *(unsigned int *)(v394 + 72);
              if ((_DWORD)v401)
              {
                v402 = *(_QWORD *)(v394 + 64);
                v403 = 8 * v401;
                while (*(_QWORD *)(*(_QWORD *)v402 + 8) < 8uLL || (*(_QWORD *)(*(_QWORD *)v402 + 8) & 6) != 0)
                {
                  v402 += 8;
                  v403 -= 8;
                  if (!v403)
                    goto LABEL_666;
                }
LABEL_673:
                v392 = __nel;
                p_base = &v907;
                if (__nel >= (unint64_t)HIDWORD(__nel))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v907, (uint64_t)v909, __nel + 1, 8);
                  v392 = __nel;
                }
                goto LABEL_668;
              }
            }
          }
        }
LABEL_666:
        v392 = v929;
        p_base = &__base;
        if (v929 >= (unint64_t)HIDWORD(v929))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v930, v929 + 1, 8);
          v392 = v929;
        }
      }
      else
      {
        v392 = v932;
        p_base = &v931;
        if (v932 >= (unint64_t)HIDWORD(v932))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v931, (uint64_t)&v933, v932 + 1, 8);
          v392 = v932;
        }
      }
LABEL_668:
      *((_QWORD *)*p_base + v392) = v388;
      ++*((_DWORD *)p_base + 2);
      ++v215;
    }
    while (v215 != v387);
  }
  LOBYTE(v901) = 0;
  BYTE4(v901) = 0;
  v901 = sub_1C4A0993C((uint64_t *)a1, (uint64_t)&__base, (uint64_t *)&v901, 1);
  v901 = sub_1C4A0993C((uint64_t *)a1, (uint64_t)&v907, (uint64_t *)&v901, 1);
  v405 = sub_1C4A0993C((uint64_t *)a1, (uint64_t)&v931, (uint64_t *)&v901, 0);
  v901 = v405;
  if ((v405 & 0xFF00000000) != 0)
    v406 = v405;
  else
    v406 = 0;
  *(_QWORD *)(a1 + 956) = 0;
  *(_QWORD *)(a1 + 964) = 0;
  *(_QWORD *)(a1 + 948) = 0;
  v407 = *(_QWORD **)(a1 + 736);
  v408 = *(_QWORD **)(a1 + 744);
  if (v407 == v408)
    goto LABEL_964;
  v879 = *(_QWORD **)(a1 + 744);
  v881 = a1 + 688;
  do
  {
    v409 = *v407;
    *(_QWORD *)&v938 = 0;
    v937 = 0;
    DWORD2(v938) = 0;
    *(_QWORD *)&v940 = 0;
    __p = 0uLL;
    v410 = *(unsigned int *)(v409 + 40);
    if ((_DWORD)v410)
    {
      v411 = *(_DWORD **)(v409 + 32);
      v412 = &v411[8 * v410];
      while (1)
      {
        if ((*v411 & 0x10000FF) != 0)
          goto LABEL_692;
        v413 = v411[1];
        v414 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 880) + 24)
                                                           + 16 * (v413 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 24);
        v415 = (v414 - 14) > 0x32 || ((1 << (v414 - 14)) & 0x4000000004001) == 0;
        if (v415 && v414 != 105 && v414 != 127)
          goto LABEL_692;
        LODWORD(v922) = 0;
        v416 = *(_QWORD *)(a1 + 472);
        v417 = *(unsigned int *)(a1 + 488);
        if (!(_DWORD)v417)
          goto LABEL_704;
        LODWORD(v418) = (v417 - 1) & (37 * v413);
        v419 = (int *)(v416 + 8 * v418);
        v420 = *v419;
        if (v413 != *v419)
          break;
LABEL_696:
        if ((int *)(v416 + 8 * v417) == v419)
          v421 = 0;
        else
          v421 = v419[1];
        LODWORD(v922) = v421;
        sub_1C4A0C7B8((uint64_t)&v937, &v922);
LABEL_692:
        v411 += 8;
        if (v411 == v412)
          goto LABEL_705;
      }
      v422 = 1;
      while (v420 != -1)
      {
        v423 = v418 + v422++;
        v418 = v423 & (v417 - 1);
        v420 = *(_DWORD *)(v416 + 8 * v418);
        if (v413 == v420)
        {
          v419 = (int *)(v416 + 8 * v418);
          goto LABEL_696;
        }
      }
LABEL_704:
      v419 = (int *)(v416 + 8 * v417);
      goto LABEL_696;
    }
LABEL_705:
    sub_1C4A0CC74(&v937);
    v424 = __p;
    __p = 0uLL;
    *(_QWORD *)&v940 = 0;
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (*((_QWORD *)&v424 + 1) - (_QWORD)v424 > 4uLL)
    {
      v425 = (*(_DWORD *)(a1 + 840) + *(_DWORD *)v424) > *(_DWORD *)(*((_QWORD *)&v424 + 1) - 4);
LABEL_708:
      operator delete((void *)v424);
      goto LABEL_709;
    }
    v425 = 1;
    if ((_QWORD)v424)
      goto LABEL_708;
LABEL_709:
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    MEMORY[0x1CAA32FB4](v937, 4);
    if (v425)
      goto LABEL_963;
    v886 = v407;
    v889 = v406;
    ++*(_DWORD *)(a1 + 948);
    v905[0] = 0;
    v905[1] = 0;
    v906 = 0;
    v937 = (llvm::MachineOperand *)((char *)&v938 + 8);
    *(_QWORD *)&v938 = 0x400000000;
    v917 = 0uLL;
    LODWORD(v918) = 0;
    v920 = 0;
    v921 = 0;
    v919 = 0;
    v904 = *(_BYTE *)(a1 + 1000);
    v913 = 0uLL;
    LODWORD(v914) = 0;
    v915 = 0;
    v916 = 0;
    *((_QWORD *)&v914 + 1) = 0;
    v426 = *(unsigned int *)(v409 + 40);
    if ((_DWORD)v426)
    {
      v427 = 0;
      while (2)
      {
        v428 = (_DWORD *)(*(_QWORD *)(v409 + 32) + 32 * v427);
        if ((*v428 & 0x10000FF) != 0)
          goto LABEL_722;
        v429 = v428[1];
        v430 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 880) + 24)
                                                           + 16 * (v429 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 24);
        v431 = (v430 - 14) > 0x32 || ((1 << (v430 - 14)) & 0x4000000004001) == 0;
        if (v431 && v430 != 105 && v430 != 127)
          goto LABEL_722;
        LODWORD(v903[0]) = v428[1];
        v432 = sub_1C49781B4(v905, v903);
        if ((int *)(v905[0] + 8 * v906) != v432)
        {
          llvm::MachineOperand::setReg((uint64_t)v428, v432[1]);
          goto LABEL_813;
        }
        v433 = *(_QWORD *)(a1 + 472);
        v434 = *(unsigned int *)(a1 + 488);
        if ((_DWORD)v434)
        {
          LODWORD(v435) = (v434 - 1) & (37 * LODWORD(v903[0]));
          v436 = (int *)(v433 + 8 * v435);
          v437 = *v436;
          if (LODWORD(v903[0]) == *v436)
          {
LABEL_728:
            if ((int *)(v433 + 8 * v434) == v436)
              v438 = 0;
            else
              v438 = v436[1];
            v439 = sub_1C4A06B0C(v881, (int *)v903);
            v440 = *(_QWORD **)(a1 + 880);
            if ((v903[0] & 0x80000000) != 0)
              v441 = (uint64_t *)(v440[3] + 16 * (v903[0] & 0x7FFFFFFF) + 8);
            else
              v441 = (uint64_t *)(v440[34] + 8 * LODWORD(v903[0]));
            v442 = *(_QWORD *)v439;
            v443 = *v441;
            if (v443)
            {
              while ((*(_BYTE *)(v443 + 3) & 1) != 0)
              {
                v443 = *(_QWORD *)(v443 + 24);
                if (!v443)
                  goto LABEL_740;
              }
              while (1)
              {
                v443 = *(_QWORD *)(v443 + 24);
                if (!v443)
                  break;
                if ((*(_BYTE *)(v443 + 3) & 1) == 0)
                  goto LABEL_740;
              }
              ++*(_DWORD *)(a1 + 952);
              sub_1C4977DA4((uint64_t)&v917, v903);
            }
            else
            {
LABEL_740:
              v862 = v438;
              v444 = *(_QWORD *)(v440[3] + 16 * (v903[0] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
              IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v440, "", 0);
              v861 = IncompleteVirtualRegister & 0x7FFFFFFF;
              *(_QWORD *)(v440[3] + 16 * v861) = v444;
              v446 = IncompleteVirtualRegister;
              v447 = v440[1];
              if (v447)
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v447 + 24))(v447, IncompleteVirtualRegister);
              v864 = IncompleteVirtualRegister;
              LODWORD(v902[0]) = IncompleteVirtualRegister;
              v448 = *(_QWORD *)(*(_QWORD *)v442 + 64);
              v449 = *(unsigned int *)(*(_QWORD *)v442 + 72);
              v922 = &v924;
              v923 = 0x200000000;
              if ((_DWORD)v449)
              {
                v450 = 0;
                v451 = v448 + 8 * v449;
                do
                {
                  ++*(_DWORD *)(a1 + 956);
                  v452 = *(_QWORD *)(*(_QWORD *)v448 + 8);
                  if ((v452 & 6) != 0)
                  {
                    if (v452 < 8)
                      v453 = 0;
                    else
                      v453 = *(_QWORD *)((v452 & 0xFFFFFFFFFFFFFFF8) + 16);
                    v454 = v453;
                    if ((*(_BYTE *)v453 & 4) == 0)
                    {
                      v454 = v453;
                      if ((*(_WORD *)(v453 + 44) & 8) != 0)
                      {
                        v454 = v453;
                        do
                          v454 = *(_QWORD *)(v454 + 8);
                        while ((*(_WORD *)(v454 + 44) & 8) != 0);
                      }
                    }
                    v455 = *(_QWORD **)(v454 + 8);
                    (*(void (**)(_QWORD, _QWORD, _QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 848) + 176))(*(_QWORD *)(a1 + 848), *(_QWORD *)(v453 + 24), v455, v446, 0, v453, *(_QWORD *)(a1 + 864));
                    v456 = *v455 & 0xFFFFFFFFFFFFFFF8;
                    if (!v456 || (*(_BYTE *)v456 & 4) == 0)
                    {
                      while ((*(_WORD *)(v456 + 44) & 4) != 0)
                        v456 = *(_QWORD *)v456 & 0xFFFFFFFFFFFFFFF8;
                    }
                    v457 = v923;
                    if (v923 >= (unint64_t)HIDWORD(v923))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v922, (uint64_t)&v924, v923 + 1, 8);
                      v457 = v923;
                    }
                    *((_QWORD *)v922 + v457) = v456;
                    v450 = v923 + 1;
                    LODWORD(v923) = v923 + 1;
                  }
                  v448 += 8;
                }
                while (v448 != v451);
                if (v450)
                {
                  v458 = v446;
                  v459 = (uint64_t *)v922;
                  v460 = 8 * v450;
                  do
                  {
                    v461 = *v459++;
                    sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 288), v461, 0);
                    v460 -= 8;
                  }
                  while (v460);
                  LODWORD(v446) = v458;
                  if ((_DWORD)v923)
                  {
                    v462 = (char *)v922;
                    v873 = (char *)v922 + 8 * v923;
                    do
                    {
                      v463 = *(unsigned int *)(*(_QWORD *)v462 + 40);
                      if ((_DWORD)v463)
                      {
                        v464 = 32 * v463;
                        v465 = (int *)(*(_QWORD *)(*(_QWORD *)v462 + 32) + 4);
                        do
                        {
                          if ((*(v465 - 1) & 0x10000FF) == 0)
                          {
                            LODWORD(v910) = *v465;
                            sub_1C4977DA4((uint64_t)&v913, &v910);
                            v466 = *(_QWORD *)(a1 + 888);
                            if ((*v465 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v466 + 416)
                              || (v467 = *(llvm::LiveInterval **)(*(_QWORD *)(v466 + 408) + 8 * (*v465 & 0x7FFFFFFF))) == 0)
                            {
                              v467 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 888), *v465);
                              v860 = *(_QWORD *)(v466 + 304);
                              v468 = *(_QWORD *)(v466 + 248);
                              *(_QWORD *)v860 = v468;
                              *(_QWORD *)(v860 + 8) = *(_QWORD *)(v468 + 40);
                              *(_OWORD *)(v860 + 16) = *(_OWORD *)(v466 + 288);
                              *(_QWORD *)(v860 + 32) = v466 + 312;
                              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v860);
                              *(_DWORD *)(v860 + 184) = 0;
                              v469 = *(_QWORD *)(v466 + 256);
                              v27 = *(_BYTE *)(v469 + 16) == 0;
                              v470 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v469 + 24)
                                                                     + 16 * (*((_DWORD *)v467 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                        + 34);
                              v472 = !v27 && v470 != 0;
                              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v466 + 304), v467, v472);
                              llvm::LiveIntervals::computeDeadValues(v466, (uint64_t)v467, 0);
                              v466 = *(_QWORD *)(a1 + 888);
                            }
                            llvm::LiveIntervals::extendToUses((llvm::LiveIntervals *)v466, v467);
                          }
                          v465 += 8;
                          v464 -= 32;
                        }
                        while (v464);
                      }
                      v462 += 8;
                    }
                    while (v462 != v873);
                  }
                }
              }
              llvm::MachineOperand::setReg((uint64_t)v428, v446);
              v473 = *(_QWORD *)(a1 + 888);
              v474 = (llvm::LiveInterval *)sub_1C4851220(v473, v446);
              v475 = *(_QWORD *)(v473 + 304);
              v476 = *(_QWORD *)(v473 + 248);
              *(_QWORD *)v475 = v476;
              *(_QWORD *)(v475 + 8) = *(_QWORD *)(v476 + 40);
              *(_OWORD *)(v475 + 16) = *(_OWORD *)(v473 + 288);
              *(_QWORD *)(v475 + 32) = v473 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v475);
              *(_DWORD *)(v475 + 184) = 0;
              v477 = *(_QWORD *)(v473 + 256);
              v27 = *(_BYTE *)(v477 + 16) == 0;
              v478 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v477 + 24)
                                                     + 16 * (*((_DWORD *)v474 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 34);
              v480 = !v27 && v478 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v473 + 304), v474, v480);
              llvm::LiveIntervals::computeDeadValues(v473, (uint64_t)v474, 0);
              v481 = *(_QWORD *)(a1 + 888);
              if (v861 >= *(unsigned int *)(v481 + 416)
                || (v482 = *(llvm::LiveInterval **)(*(_QWORD *)(v481 + 408) + 8 * v861)) == 0)
              {
                v482 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 888), v446);
                v496 = *(_QWORD *)(v481 + 304);
                v497 = *(_QWORD *)(v481 + 248);
                *(_QWORD *)v496 = v497;
                *(_QWORD *)(v496 + 8) = *(_QWORD *)(v497 + 40);
                *(_OWORD *)(v496 + 16) = *(_OWORD *)(v481 + 288);
                *(_QWORD *)(v496 + 32) = v481 + 312;
                llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v496);
                *(_DWORD *)(v496 + 184) = 0;
                v498 = *(_QWORD *)(v481 + 256);
                v27 = *(_BYTE *)(v498 + 16) == 0;
                v499 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v498 + 24)
                                                       + 16 * (*((_DWORD *)v482 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                          + 34);
                v501 = !v27 && v499 != 0;
                llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v481 + 304), v482, v501);
                llvm::LiveIntervals::computeDeadValues(v481, (uint64_t)v482, 0);
              }
              v483 = *(_QWORD *)(a1 + 880);
              v484 = *(_QWORD *)(a1 + 864);
              v485 = (_DWORD *)operator new();
              *(_QWORD *)v485 = v482;
              v486 = *(_DWORD *)(*(_QWORD *)(v484 + 264)
                               + 24
                               * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v483 + 24)
                                                                              + 16
                                                                              * (*((_DWORD *)v482 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                      + 24)
                                + *(_DWORD *)(v484 + 272)
                                * ((*(_QWORD *)(v484 + 248) - *(_QWORD *)(v484 + 240)) >> 3)));
              if (v486 >= 0x28)
              {
                v429 = v864;
                if (v486 >= 0x48)
                {
                  if (v486 >= 0x88)
                  {
                    if (v486 < 0x108)
                      v487 = 3;
                    else
                      v487 = 4;
                  }
                  else
                  {
                    v487 = 2;
                  }
                }
                else
                {
                  v487 = 1;
                }
              }
              else
              {
                v487 = 0;
                v429 = v864;
              }
              v485[2] = v487;
              v910 = v485;
              sub_1C4A06944(a1 + 608, (char *)&v910);
              v490 = v910;
              v910 = 0;
              if (v490)
                MEMORY[0x1CAA32FC0](v490, 0x1020C403A5D3213);
              v491 = *(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * *(unsigned int *)(a1 + 616) - 8);
              *(_QWORD *)sub_1C4A06B0C(v881, (int *)v902) = v491;
              if (v922 != &v924)
                free(v922);
              v438 = v862;
            }
            if (v938 >= DWORD1(v938))
            {
              v493 = v438;
              v494 = LODWORD(v903[0]) | (unint64_t)(v429 << 32);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v937, (uint64_t)&v938 + 8, v938 + 1, 12);
              v495 = (char *)v937 + 12 * v938;
              *(_QWORD *)v495 = v494;
              *((_DWORD *)v495 + 2) = v493;
            }
            else
            {
              v492 = (char *)v937 + 12 * v938;
              *(_QWORD *)v492 = LODWORD(v903[0]) | (unint64_t)(v429 << 32);
              *((_DWORD *)v492 + 2) = v438;
            }
            LODWORD(v938) = v938 + 1;
LABEL_813:
            v426 = *(unsigned int *)(v409 + 40);
LABEL_722:
            if (++v427 >= v426)
            {
              v502 = (int *)*((_QWORD *)&v914 + 1);
              v503 = v915;
              while (v502 != v503)
              {
                v504 = *v502;
                v505 = *(_QWORD *)(a1 + 888);
                v506 = *(_QWORD *)(v505 + 408);
                v507 = *(_QWORD *)(v506 + 8 * (*v502 & 0x7FFFFFFF));
                if (v507)
                {
                  v508 = *(_QWORD *)(v507 + 104);
                  if (v508)
                  {
                    do
                    {
                      v520 = *(_QWORD *)(v508 + 96);
                      v519 = *(_QWORD *)(v508 + 104);
                      *(_QWORD *)(v508 + 96) = 0;
                      if (v520)
                      {
                        sub_1C47655E8(v520, *(_QWORD **)(v520 + 8));
                        MEMORY[0x1CAA32FC0](v520, 0x1020C4062D53EE8);
                      }
                      v521 = *(void **)(v508 + 64);
                      if (v521 != (void *)(v508 + 80))
                        free(v521);
                      if (*(_QWORD *)v508 != v508 + 16)
                        free(*(void **)v508);
                      v508 = v519;
                    }
                    while (v519);
                  }
                  v509 = *(_QWORD *)(v507 + 96);
                  *(_QWORD *)(v507 + 96) = 0;
                  *(_QWORD *)(v507 + 104) = 0;
                  if (v509)
                  {
                    sub_1C47655E8(v509, *(_QWORD **)(v509 + 8));
                    MEMORY[0x1CAA32FC0](v509, 0x1020C4062D53EE8);
                  }
                  v510 = *(void **)(v507 + 64);
                  if (v510 != (void *)(v507 + 80))
                    free(v510);
                  if (*(_QWORD *)v507 != v507 + 16)
                    free(*(void **)v507);
                  MEMORY[0x1CAA32FC0](v507, 0x10A0C408DA535C6);
                  v506 = *(_QWORD *)(v505 + 408);
                }
                *(_QWORD *)(v506 + 8 * (v504 & 0x7FFFFFFF)) = 0;
                v511 = *(_QWORD *)(a1 + 888);
                v512 = (llvm::LiveInterval *)sub_1C4851220(v511, v504);
                v513 = *(_QWORD *)(v511 + 304);
                v514 = *(_QWORD *)(v511 + 248);
                *(_QWORD *)v513 = v514;
                *(_QWORD *)(v513 + 8) = *(_QWORD *)(v514 + 40);
                *(_OWORD *)(v513 + 16) = *(_OWORD *)(v511 + 288);
                *(_QWORD *)(v513 + 32) = v511 + 312;
                llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v513);
                *(_DWORD *)(v513 + 184) = 0;
                v515 = *(_QWORD *)(v511 + 256);
                v27 = *(_BYTE *)(v515 + 16) == 0;
                v516 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v515 + 24)
                                                       + 16 * (*((_DWORD *)v512 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                          + 34);
                v518 = !v27 && v516 != 0;
                llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v511 + 304), v512, v518);
                llvm::LiveIntervals::computeDeadValues(v511, (uint64_t)v512, 0);
                ++v502;
              }
              goto LABEL_848;
            }
            continue;
          }
          v488 = 1;
          while (v437 != -1)
          {
            v489 = v435 + v488++;
            v435 = v489 & (v434 - 1);
            v437 = *(_DWORD *)(v433 + 8 * v435);
            if (LODWORD(v903[0]) == v437)
            {
              v436 = (int *)(v433 + 8 * v435);
              goto LABEL_728;
            }
          }
        }
        break;
      }
      v436 = (int *)(v433 + 8 * v434);
      goto LABEL_728;
    }
LABEL_848:
    v522 = v938;
    if ((_DWORD)v938 == 2)
      ++*(_DWORD *)(a1 + 960);
    else
      ++*(_DWORD *)(a1 + 964);
    v903[0] = a1;
    v903[1] = &v904;
    v523 = 126 - 2 * __clz(v522);
    if ((_DWORD)v522)
      v524 = v523;
    else
      v524 = 0;
    sub_1C4A0D024((uint64_t *)v937, (unint64_t)v937 + 12 * v522, v524, 1);
    v525 = (int *)v919;
    v526 = v920;
    while (v525 != v526)
    {
      v527 = *v525;
      LODWORD(v922) = *v525;
      v528 = *(_DWORD *)(a1 + 704);
      if (v528)
      {
        v529 = *(_QWORD *)(a1 + 688);
        v530 = v528 - 1;
        v531 = v530 & (37 * v527);
        v532 = (_DWORD *)(v529 + 16 * v531);
        v533 = *v532;
        if (v527 == *v532)
          goto LABEL_869;
        v534 = 0;
        v535 = 1;
        while (v533 != -1)
        {
          if (v534)
            v536 = 0;
          else
            v536 = v533 == -2;
          if (v536)
            v534 = v532;
          v537 = v531 + v535++;
          v531 = v537 & v530;
          v532 = (_DWORD *)(v529 + 16 * v531);
          v533 = *v532;
          if (v527 == *v532)
            goto LABEL_869;
        }
        if (v534)
          v538 = v534;
        else
          v538 = v532;
      }
      else
      {
        v538 = 0;
      }
      v532 = sub_1C4A06CE0(v881, (int *)&v922, v538);
      *v532 = v527;
      *((_QWORD *)v532 + 1) = 0;
LABEL_869:
      v539 = *((_QWORD *)v532 + 1);
      v540 = *(int *)(v539 + 8);
      v541 = v540 + 2;
      if ((v540 + 2) >= 3)
      {
        if ((_DWORD)v540 == 1)
        {
          v542 = 82;
        }
        else
        {
          v543 = v541 >= 5;
          v27 = v541 == 5;
          v542 = 84;
          if (!v27)
            v542 = 85;
          if (!v543)
            v542 = 83;
        }
      }
      else
      {
        v542 = 81;
      }
      v544 = *(const llvm::LiveInterval **)v539;
      v545 = *(_QWORD *)(a1 + 472);
      v546 = *(unsigned int *)(a1 + 488);
      if (!(_DWORD)v546)
        goto LABEL_878;
      v548 = *((_DWORD *)v544 + 28);
      LODWORD(v549) = (v546 - 1) & (37 * v548);
      v547 = (int *)(v545 + 8 * v549);
      v550 = *v547;
      if (v548 != *v547)
      {
        v553 = 1;
        while (v550 != -1)
        {
          v554 = v549 + v553++;
          v549 = v554 & (v546 - 1);
          v550 = *(_DWORD *)(v545 + 8 * v549);
          if (v548 == v550)
          {
            v547 = (int *)(v545 + 8 * v549);
            goto LABEL_880;
          }
        }
LABEL_878:
        v547 = (int *)(v545 + 8 * v546);
      }
LABEL_880:
      v551 = v547[1];
      if (*(_BYTE *)(a1 + 504))
      {
        llvm::LiveIntervalUnion::extract((llvm::LiveIntervalUnion *)(*(_QWORD *)(a1 + 352 + 16 * v540 + 8) + 216 * (v551 >> v540)), v544, (uint64_t **)v544);
      }
      else
      {
        v552 = dword_1C6613CA4[v542 - 81];
        do
        {
          llvm::LiveIntervalUnion::extract((llvm::LiveIntervalUnion *)(*(_QWORD *)(a1 + 360) + 216 * v551++), v544, (uint64_t **)v544);
          --v552;
        }
        while (v552);
      }
      *v547 = -2;
      *(int32x2_t *)(a1 + 480) = vadd_s32(*(int32x2_t *)(a1 + 480), (int32x2_t)0x1FFFFFFFFLL);
      ++v525;
    }
    v910 = v912;
    v911 = 0x400000000;
    v555 = (uint64_t *)v912;
    v556 = (uint64_t *)v912;
    if (!(_DWORD)v938)
      goto LABEL_899;
    v557 = 12 * v938;
    v558 = (int *)((char *)v937 + 4);
    do
    {
      v559 = *(_QWORD *)sub_1C4A06B0C(v881, v558);
      v560 = v911;
      if (v911 >= (unint64_t)HIDWORD(v911))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v910, (uint64_t)v912, v911 + 1, 8);
        v560 = v911;
      }
      *((_QWORD *)v910 + v560) = v559;
      v561 = (v911 + 1);
      LODWORD(v911) = v911 + 1;
      v558 += 3;
      v557 -= 12;
    }
    while (v557);
    v556 = (uint64_t *)v910;
    v555 = (uint64_t *)((char *)v910 + 8 * v561);
    if ((_DWORD)v561)
      v562 = 126 - 2 * __clz(v561);
    else
LABEL_899:
      v562 = 0;
    sub_1C4A0DCD0(v556, v555, v562, 1);
    v902[0] = &v910;
    v902[1] = v903;
    v922 = &v924;
    v923 = 0x300000000;
    v563 = v938;
    v564 = *((_DWORD *)v937 + 3 * v938 - 1);
    v565 = sub_1C4A0CE6C(v902, v564 - *(_DWORD *)(a1 + 840), v564, (uint64_t)&v922);
    if (v563 == 2)
    {
      if ((v565 & 1) == 0)
      {
        v566 = *(_DWORD *)(a1 + 840);
        if (v564)
        {
          v567 = 0;
          while (1)
          {
            v568 = v567 + v566;
            v569 = v568 >= 0x1000 ? 4096 : v568;
            if ((sub_1C4A0CE6C(v902, v567, v569, (uint64_t)&v922) & 1) != 0)
              break;
            v566 = *(_DWORD *)(a1 + 840);
            v570 = v566 >> 3;
            if (v566 >> 3 <= 1)
              v570 = 1;
            v567 += v570;
            if (v567 >= v564)
              goto LABEL_911;
          }
        }
        else
        {
LABEL_911:
          for (j = 0; j < 0x1000; j += v574)
          {
            v572 = j + v566;
            if (v572 >= 0x1000)
              v573 = 4096;
            else
              v573 = v572;
            if ((sub_1C4A0CE6C(v902, j, v573, (uint64_t)&v922) & 1) != 0)
              break;
            v566 = *(_DWORD *)(a1 + 840);
            v574 = v566 >> 3;
            if (v566 >> 3 <= 1)
              v574 = 1;
          }
        }
      }
    }
    else if ((v565 & 1) == 0)
    {
      if (v564)
      {
        v575 = 0;
        v576 = *(_DWORD *)(a1 + 840);
        while (1)
        {
          v577 = v575 + v576;
          v578 = v577 >= 0x1000 ? 4096 : v577;
          if ((sub_1C4A0CE6C(v902, v575, v578, (uint64_t)&v922) & 1) != 0)
            break;
          v576 = *(_DWORD *)(a1 + 840);
          v579 = v576 >> 3;
          if (v576 >> 3 <= 1)
            v579 = 1;
          v575 += v579;
          if (v575 >= v564)
            goto LABEL_930;
        }
      }
      else
      {
LABEL_930:
        v580 = *(_DWORD *)(*(_QWORD *)v910 + 8) + 2;
        if (v580 >= 3)
        {
          if (*(_DWORD *)(*(_QWORD *)v910 + 8) == 1)
          {
            v581 = 2;
          }
          else if (v580 >= 5)
          {
            if (*(_DWORD *)(*(_QWORD *)v910 + 8) == 3)
              v581 = 8;
            else
              v581 = 16;
          }
          else
          {
            v581 = 4;
          }
        }
        else
        {
          v581 = 1;
        }
        v582 = (v564 + v581 - 1) & -v581;
        if (v582 <= 0xFFF)
        {
          v583 = *(_DWORD *)(a1 + 840);
          do
          {
            v584 = v582 + v583;
            if (v584 >= 0x1000)
              v585 = 4096;
            else
              v585 = v584;
            if ((sub_1C4A0CE6C(v902, v582, v585, (uint64_t)&v922) & 1) != 0)
              break;
            v583 = *(_DWORD *)(a1 + 840);
            v586 = v583 >> 3;
            if (v583 >> 3 <= 1)
              v586 = 1;
            v582 += v586;
          }
          while (v582 < 0x1000);
        }
      }
    }
    v587 = (char *)v922;
    v588 = (char *)v922 + 16 * v923;
    if ((_DWORD)v923)
    {
      do
      {
        sub_1C4A0A5B8(a1 + 248, *(_DWORD **)v587, *((_DWORD *)v587 + 2));
        v587 += 16;
      }
      while (v587 != v588);
      v587 = (char *)v922;
    }
    v589 = *(_DWORD *)(a1 + 500);
    if (v587 != (char *)&v924)
      free(v587);
    v406 = v889;
    v407 = v886;
    v408 = v879;
    if (v910 != v912)
      free(v910);
    if (*((_QWORD *)&v914 + 1))
    {
      v915 = (int *)*((_QWORD *)&v914 + 1);
      operator delete(*((void **)&v914 + 1));
    }
    MEMORY[0x1CAA32FB4](v913, 4);
    if (v919)
    {
      v920 = (int *)v919;
      operator delete(v919);
    }
    MEMORY[0x1CAA32FB4](v917, 4);
    if (v937 != (llvm::MachineOperand *)((char *)&v938 + 8))
      free(v937);
    MEMORY[0x1CAA32FB4](v905[0], 4);
    if (v889 <= v589)
      v406 = v589;
LABEL_963:
    ++v407;
  }
  while (v407 != v408);
LABEL_964:
  if (*(_DWORD *)(a1 + 616))
  {
    v590 = *(_QWORD *)(a1 + 872);
    v591 = *(unsigned __int8 *)(v590 + 556);
    *(_DWORD *)(v590 + 552) = v406;
    if (!v591)
      *(_BYTE *)(v590 + 556) = 1;
  }
  if (v931 != &v933)
    free(v931);
  if (v907 != v909)
    free(v907);
  if (__base != v930)
    free(__base);
  v931 = &v933;
  v932 = 0x1000000000;
  __base = v930;
  v929 = 0x2000000000;
  v592 = *(unsigned int *)(a1 + 616);
  if ((_DWORD)v592)
  {
    v593 = *(uint64_t **)(a1 + 608);
    v874 = &v593[v592];
    while (1)
    {
      v900 = *v593;
      v594 = *(unsigned int *)(*(_QWORD *)*v593 + 112);
      v595 = *(_QWORD *)(a1 + 472);
      v596 = *(unsigned int *)(a1 + 488);
      if (!(_DWORD)v596)
        goto LABEL_1184;
      LODWORD(v597) = (v596 - 1) & (37 * v594);
      v598 = (int *)(v595 + 8 * v597);
      v599 = *v598;
      if ((_DWORD)v594 != *v598)
        break;
LABEL_977:
      if ((int *)(v595 + 8 * v596) == v598)
        v897 = 0;
      else
        v897 = v598[1];
      v922 = &v924;
      v923 = 0x1000000000;
      v600 = *(_QWORD *)(a1 + 880);
      v882 = v593;
      if ((v594 & 0x80000000) != 0)
        v601 = (uint64_t *)(*(_QWORD *)(v600 + 24) + 16 * (v594 & 0x7FFFFFFF) + 8);
      else
        v601 = (uint64_t *)(*(_QWORD *)(v600 + 272) + 8 * v594);
      v602 = *v601;
      if (*v601)
      {
        while ((*(_DWORD *)v602 & 0x80000000) != 0)
        {
          v602 = *(_QWORD *)(v602 + 24);
          if (!v602)
            goto LABEL_1178;
        }
        v603 = 0;
        v604 = 16;
LABEL_988:
        if (v603 >= v604)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v922, (uint64_t)&v924, v603 + 1, 8);
          v603 = v923;
        }
        *((_QWORD *)v922 + v603) = v602;
        v603 = v923 + 1;
        LODWORD(v923) = v923 + 1;
        while (1)
        {
          v602 = *(_QWORD *)(v602 + 24);
          if (!v602)
            break;
          if ((*(_DWORD *)v602 & 0x80000000) == 0)
          {
            v604 = HIDWORD(v923);
            goto LABEL_988;
          }
        }
        v605 = (llvm::MachineOperand **)v922;
        if (v603)
        {
          v606 = (llvm::SmallPtrSetImplBase *)((char *)v922 + 8 * v603);
          v890 = v606;
          while (1)
          {
            v607 = *v605;
            v608 = *(_DWORD *)*v605;
            if ((v608 & 0x1000000) != 0)
              break;
            v609 = *(_DWORD *)(v900 + 8) + 2;
            if (*(_DWORD *)(v900 + 8) == 3)
              v610 = 84;
            else
              v610 = 85;
            if (v609 < 5)
              v610 = 83;
            v611 = v609 >= 3;
            if (*(_DWORD *)(v900 + 8) == 1)
              v612 = 82;
            else
              v612 = v610;
            if (!v611)
              v612 = 81;
            v613 = (((v608 >> 20) & 0x100 | (v897 >> 22) & 0x200) << 8) | 7;
            if (v929 >= HIDWORD(v929))
            {
              v937 = *v605;
              LODWORD(v938) = v613;
              DWORD1(v938) = v897 & 0x7FFFFFFF;
              *((_QWORD *)&v938 + 1) = 0;
              LODWORD(__p) = v612;
              DWORD2(__p) = 0;
              v680 = sub_1C4A0EA78((uint64_t)&__base, (unint64_t)&v937);
              v681 = (char *)__base + 40 * v929;
              v682 = *(_QWORD *)(v680 + 32);
              v683 = *(_OWORD *)(v680 + 16);
              *(_OWORD *)v681 = *(_OWORD *)v680;
              *((_OWORD *)v681 + 1) = v683;
              *((_QWORD *)v681 + 4) = v682;
            }
            else
            {
              v614 = (char *)__base + 40 * v929;
              *(_QWORD *)v614 = v607;
              *((_DWORD *)v614 + 2) = v613;
              *((_DWORD *)v614 + 3) = v897 & 0x7FFFFFFF;
              *((_QWORD *)v614 + 2) = 0;
              *((_DWORD *)v614 + 6) = v612;
              *((_DWORD *)v614 + 8) = 0;
            }
            LODWORD(v929) = v929 + 1;
LABEL_1148:
            if (++v605 == (llvm::MachineOperand **)v606)
            {
              v605 = (llvm::MachineOperand **)v922;
              goto LABEL_1176;
            }
          }
          v615 = *((_QWORD *)v607 + 1);
          v616 = **(unsigned __int16 **)(v615 + 16);
          if (v616 == 263)
          {
            v630 = *(_QWORD *)(a1 + 848);
            v631 = *(_DWORD *)(v900 + 8) + 2;
            if (*(_DWORD *)(v900 + 8) == 3)
              v632 = 84;
            else
              v632 = 85;
            if (v631 < 5)
              v632 = 83;
            v633 = v631 >= 3;
            if (*(_DWORD *)(v900 + 8) == 1)
              v634 = 82;
            else
              v634 = v632;
            if (v633)
              v635 = v634;
            else
              v635 = 81;
            sub_1C4A0E6BC((uint64_t)&v937, (unsigned int *)*v605, v635, v897);
            *(_QWORD *)(v615 + 16) = *(_QWORD *)(v630 + 8) + 12672;
            sub_1C4A0E9E4((unint64_t)&__base, (uint64_t)v607, (__int128 *)&v937);
            goto LABEL_1148;
          }
          if (v616 != 19)
          {
            v937 = (llvm::MachineOperand *)((char *)&v938 + 8);
            *(_QWORD *)&v938 = v386;
            LODWORD(v917) = 1;
            *((_QWORD *)&v917 + 1) = 0;
            v918 = 0;
            v636 = (_OWORD *)sub_1C47C0F60((uint64_t)&v937, (unint64_t)&v917, 1);
            v637 = (_OWORD *)((char *)v937 + 32 * v938);
            v638 = v636[1];
            *v637 = *v636;
            v637[1] = v638;
            LODWORD(v938) = v938 + 1;
            if (*(_DWORD *)(v615 + 40) >= 2u)
            {
              v639 = 32;
              v640 = 1;
              do
              {
                v641 = (_OWORD *)sub_1C47C0F60((uint64_t)&v937, *(_QWORD *)(v615 + 32) + v639, 1);
                v642 = (_OWORD *)((char *)v937 + 32 * v938);
                v643 = v641[1];
                *v642 = *v641;
                v642[1] = v643;
                LODWORD(v938) = v938 + 1;
                ++v640;
                v639 += 32;
              }
              while (v640 < *(unsigned int *)(v615 + 40));
            }
            v644 = *(_DWORD *)(v900 + 8) + 2;
            if (*(_DWORD *)(v900 + 8) == 3)
              v645 = 84;
            else
              v645 = 85;
            if (v644 < 5)
              v645 = 83;
            v646 = v644 >= 3;
            if (*(_DWORD *)(v900 + 8) == 1)
              v647 = 82;
            else
              v647 = v645;
            if (v646)
              v648 = v647;
            else
              v648 = 81;
            sub_1C4A0E6BC((uint64_t)&v917, (unsigned int *)v607, v648, v897);
            v649 = sub_1C4C915F0(**(unsigned __int16 **)(v615 + 16), 0, 3);
            v650 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v615 + 24) + 32) + 16);
            *(_QWORD *)(v615 + 16) = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v650 + 104))(v650) + 8)
                                   + 48 * v649;
            while (1)
            {
              v651 = *(_DWORD *)(v615 + 40);
              if (v651 == 1)
                break;
              llvm::MachineInstr::removeOperand(v615, v651 - 1);
            }
            if ((_DWORD)v938)
            {
              v652 = v937;
              v653 = 32 * v938;
              do
              {
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v615, *(llvm::MachineFunction **)(*(_QWORD *)(v615 + 24) + 32), v652);
                v652 = (llvm::MachineOperand *)((char *)v652 + 32);
                v653 -= 32;
              }
              while (v653);
            }
            sub_1C4A0E9E4((unint64_t)&__base, *(_QWORD *)(v615 + 32), &v917);
            if (v937 != (llvm::MachineOperand *)((char *)&v938 + 8))
              free(v937);
            v606 = v890;
            goto LABEL_1148;
          }
          v617 = *(_QWORD *)(a1 + 880);
          v618 = *(_QWORD *)(a1 + 864);
          v880 = *(_QWORD *)(a1 + 888);
          v619 = *(_QWORD *)(v615 + 32);
          v620 = *(_OWORD *)(v619 + 48);
          v913 = *(_OWORD *)(v619 + 32);
          v914 = v620;
          v621 = DWORD1(v913);
          v622 = *(_QWORD *)(v615 + 24);
          v940 = 0u;
          v941 = 0u;
          v938 = 0u;
          __p = 0u;
          v623 = *(_QWORD *)(v622 + 32);
          v937 = (llvm::MachineOperand *)&off_1E816EC08;
          *(_QWORD *)&v938 = v623;
          *(_QWORD *)&__p = *(_QWORD *)(v623 + 40);
          *((_QWORD *)&v938 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v623 + 16) + 104))(*(_QWORD *)(v623 + 16));
          *(_QWORD *)&v917 = 0;
          if (*((_QWORD *)&__p + 1))
          {
            llvm::MetadataTracking::untrack((uint64_t)&__p + 8, *((unsigned __int8 **)&__p + 1));
            *((_QWORD *)&__p + 1) = v917;
            if ((_QWORD)v917)
              llvm::MetadataTracking::retrack((uint64_t)&v917, (unsigned __int8 *)v917, (uint64_t)&__p + 8);
          }
          else
          {
            *((_QWORD *)&__p + 1) = 0;
          }
          *(_QWORD *)&v941 = 0;
          *((_QWORD *)&v940 + 1) = v615;
          *(_QWORD *)&v940 = *(_QWORD *)(v615 + 24);
          *((_QWORD *)&v940 + 1) = v615;
          if ((__int128 *)(v615 + 56) != (__int128 *)((char *)&__p + 8))
          {
            if (*((_QWORD *)&__p + 1))
              llvm::MetadataTracking::untrack((uint64_t)&__p + 8, *((unsigned __int8 **)&__p + 1));
            v624 = *(unsigned __int8 **)(v615 + 56);
            *((_QWORD *)&__p + 1) = v624;
            if (v624)
              llvm::MetadataTracking::track((uint64_t)&__p + 8, v624, 2);
          }
          v625 = ((*(_DWORD *)v607 >> 8) & 0xFFFu) - 25 < 0x10 || ((*(_DWORD *)v607 >> 8) & 0xFFF) == 0;
          UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(v617, v621);
          if (!UniqueVRegDef)
            goto LABEL_1063;
          v627 = UniqueVRegDef;
          v628 = !v625;
          if (**(_WORD **)(UniqueVRegDef + 16) != 552)
            v628 = 1;
          if ((v628 & 1) != 0)
          {
LABEL_1063:
            if ((v621 & 0x80000000) != 0)
            {
              if (v625)
              {
                v655 = *(_QWORD *)(*(_QWORD *)(v617 + 24) + 16 * (v621 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                if (((v913 >> 8) & 0xFFF) != 0)
                  CommonSubClass = (*(uint64_t (**)(uint64_t, unint64_t, __int16 ***))(*(_QWORD *)v618 + 184))(v618, v655, &off_1E7FB1568);
                else
                  CommonSubClass = llvm::TargetRegisterInfo::getCommonSubClass(v618, v655, (uint64_t)&off_1E7FB1568);
                if (CommonSubClass == v655)
                {
                  v654 = 0;
                }
                else
                {
                  *(_QWORD *)&v917 = &off_1E7FB1568;
                  DWORD2(v917) = 2;
                  v677 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v937, 19, (uint64_t *)&v917, 1, 0, 0, 0);
                  v654 = v678;
                  llvm::MachineInstr::addOperand(v678, v677, (const llvm::MachineOperand *)&v913);
                  v679 = *(_DWORD *)(*((_QWORD *)v654 + 4) + 4);
                  LODWORD(v913) = 0;
                  DWORD1(v913) = v679;
                  v914 = 0uLL;
                  *((_QWORD *)&v913 + 1) = 0;
                }
              }
              else
              {
                v654 = 0;
              }
            }
            else
            {
              v654 = 0;
            }
          }
          else
          {
            if ((v621 & 0x80000000) != 0)
              v629 = (uint64_t *)(*(_QWORD *)(v617 + 24) + 16 * (v621 & 0x7FFFFFFF) + 8);
            else
              v629 = (uint64_t *)(*(_QWORD *)(v617 + 272) + 8 * v621);
            v657 = *v629;
            if ((*(_BYTE *)(v657 + 3) & 1) == 0)
              v657 = *(_QWORD *)(v657 + 24);
            v658 = *(_QWORD *)(*(_QWORD *)(v657 + 8) + 32);
            v659 = *(_OWORD *)(v658 + 80);
            v913 = *(_OWORD *)(v658 + 64);
            v914 = v659;
            if ((v621 & 0x80000000) != 0)
              v660 = (uint64_t *)(*(_QWORD *)(v617 + 24) + 16 * (v621 & 0x7FFFFFFF) + 8);
            else
              v660 = (uint64_t *)(*(_QWORD *)(v617 + 272) + 8 * v621);
            v661 = *v660;
            if (v661)
            {
              while ((*(_BYTE *)(v661 + 3) & 1) != 0)
              {
                v661 = *(_QWORD *)(v661 + 24);
                if (!v661)
                  goto LABEL_1081;
              }
              while (1)
              {
                v661 = *(_QWORD *)(v661 + 24);
                if (!v661)
                  break;
                if ((*(_BYTE *)(v661 + 3) & 1) == 0)
                  goto LABEL_1081;
              }
              v662 = v621 & 0x7FFFFFFF;
              v663 = *(_QWORD *)(v880 + 408);
              v664 = *(_QWORD *)(v663 + 8 * v662);
              if (v664)
              {
                v665 = *(_QWORD *)(v664 + 104);
                if (v665)
                {
                  do
                  {
                    v726 = *(_QWORD *)(v665 + 96);
                    v727 = *(_QWORD *)(v665 + 104);
                    *(_QWORD *)(v665 + 96) = 0;
                    if (v726)
                    {
                      v863 = v726;
                      v866 = v727;
                      sub_1C47655E8(v726, *(_QWORD **)(v726 + 8));
                      MEMORY[0x1CAA32FC0](v863, 0x1020C4062D53EE8);
                      v727 = v866;
                    }
                    v728 = *(void **)(v665 + 64);
                    if (v728 != (void *)(v665 + 80))
                    {
                      v865 = v727;
                      free(v728);
                      v727 = v865;
                    }
                    v729 = *(void **)v665;
                    if (*(_QWORD *)v665 != v665 + 16)
                    {
                      v725 = v727;
                      free(v729);
                      v727 = v725;
                    }
                    v665 = v727;
                  }
                  while (v727);
                }
                v666 = *(_QWORD *)(v664 + 96);
                *(_QWORD *)(v664 + 96) = 0;
                *(_QWORD *)(v664 + 104) = 0;
                if (v666)
                {
                  sub_1C47655E8(v666, *(_QWORD **)(v666 + 8));
                  MEMORY[0x1CAA32FC0](v666, 0x1020C4062D53EE8);
                }
                v667 = *(void **)(v664 + 64);
                if (v667 != (void *)(v664 + 80))
                  free(v667);
                if (*(_QWORD *)v664 != v664 + 16)
                  free(*(void **)v664);
                MEMORY[0x1CAA32FC0](v664, 0x10A0C408DA535C6);
                v668 = v880;
                v663 = *(_QWORD *)(v880 + 408);
              }
              else
              {
                v668 = v880;
              }
              *(_QWORD *)(v663 + 8 * v662) = 0;
              v669 = *(int32x2_t **)(v668 + 288);
              v670 = v669[46];
              v671 = v669[48].u32[0];
              if ((_DWORD)v671)
              {
                LODWORD(v672) = (v671 - 1) & ((v627 >> 4) ^ (v627 >> 9));
                v673 = (uint64_t *)(*(_QWORD *)&v670 + 16 * v672);
                v674 = *v673;
                if (*v673 != v627)
                {
                  v675 = 1;
                  while (v674 != -4096)
                  {
                    v676 = v672 + v675++;
                    v672 = v676 & (v671 - 1);
                    v674 = *(_QWORD *)(*(_QWORD *)&v670 + 16 * v672);
                    if (v674 == v627)
                    {
                      v673 = (uint64_t *)(*(_QWORD *)&v670 + 16 * v672);
                      goto LABEL_1105;
                    }
                  }
                  goto LABEL_1104;
                }
              }
              else
              {
LABEL_1104:
                v673 = (uint64_t *)(*(_QWORD *)&v670 + 16 * v671);
              }
LABEL_1105:
              if (v673 != (uint64_t *)(*(_QWORD *)&v670 + 16 * v671))
              {
                v684 = v673[1] & 0xFFFFFFFFFFFFFFF8;
                *v673 = -8192;
                v669[47] = vadd_s32(v669[47], (int32x2_t)0x1FFFFFFFFLL);
                *(_QWORD *)(v684 + 16) = 0;
              }
              v685 = *(_QWORD *)(*(_QWORD *)(v627 + 24) + 32);
              if (v685)
              {
                v686 = *(_QWORD *)(v685 + 728);
                if (v686)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v686 + 32))(v686, v627);
                v687 = *(unsigned int *)(v627 + 40);
                if ((_DWORD)v687)
                {
                  v688 = *(_QWORD *)(v627 + 32);
                  v689 = *(_QWORD *)(v685 + 40);
                  v690 = 32 * v687;
                  do
                  {
                    if (!*(_BYTE *)v688)
                    {
                      v691 = *(unsigned int *)(v688 + 4);
                      if ((v691 & 0x80000000) != 0)
                        v692 = (uint64_t *)(*(_QWORD *)(v689 + 24) + 16 * (v691 & 0x7FFFFFFF) + 8);
                      else
                        v692 = (uint64_t *)(*(_QWORD *)(v689 + 272) + 8 * v691);
                      v693 = *v692;
                      v695 = *(_QWORD *)(v688 + 16);
                      v694 = *(_QWORD *)(v688 + 24);
                      if (v688 != *v692)
                        v692 = (uint64_t *)(v695 + 24);
                      *v692 = v694;
                      if (v694)
                        v696 = v694;
                      else
                        v696 = v693;
                      *(_QWORD *)(v696 + 16) = v695;
                      *(_QWORD *)(v688 + 16) = 0;
                      *(_QWORD *)(v688 + 24) = 0;
                    }
                    v688 += 32;
                    v690 -= 32;
                  }
                  while (v690);
                }
              }
              v654 = 0;
              *(_QWORD *)(v627 + 24) = 0;
              v697 = *(unint64_t **)(v627 + 8);
              v698 = *(_QWORD *)v627 & 0xFFFFFFFFFFFFFFF8;
              *v697 = v698 | *v697 & 7;
              *(_QWORD *)(v698 + 8) = v697;
              *(_QWORD *)v627 &= 7uLL;
              *(_QWORD *)(v627 + 8) = 0;
            }
            else
            {
LABEL_1081:
              v654 = 0;
            }
          }
          v699 = *(_DWORD *)(v900 + 8) + 2;
          if (*(_DWORD *)(v900 + 8) == 3)
            v700 = 84;
          else
            v700 = 85;
          if (v699 < 5)
            v700 = 83;
          v701 = v699 >= 3;
          if (*(_DWORD *)(v900 + 8) == 1)
            v702 = 82;
          else
            v702 = v700;
          if (v701)
            v703 = v702;
          else
            v703 = 81;
          sub_1C4A0E6BC((uint64_t)&v910, (unsigned int *)v607, v703, v897);
          if (v625)
            v704 = 558;
          else
            v704 = 559;
          v706 = sub_1C55437B8(&v937, v704);
          v707 = (unint64_t *)v705;
          v708 = (unint64_t *)*((_QWORD *)&v940 + 1);
          v709 = *(_QWORD *)(v940 + 40);
          *(_QWORD *)(v705 + 24) = v709;
          v710 = *(_QWORD *)(v709 + 32);
          v711 = *(unsigned int *)(v705 + 40);
          if ((_DWORD)v711)
          {
            v718 = *(_QWORD *)(v705 + 32);
            v719 = *(_QWORD *)(v710 + 40);
            v720 = 32 * v711;
            do
            {
              if (!*(_BYTE *)v718)
              {
                v721 = *(unsigned int *)(v718 + 4);
                if ((int)v721 >= 0)
                  v722 = (uint64_t *)(*(_QWORD *)(v719 + 272) + 8 * v721);
                else
                  v722 = (uint64_t *)(*(_QWORD *)(v719 + 24) + 16 * (v721 & 0x7FFFFFFF) + 8);
                v723 = *v722;
                if (*v722)
                {
                  v724 = *(_QWORD *)(v723 + 16);
                  *(_QWORD *)(v723 + 16) = v718;
                  *(_QWORD *)(v718 + 16) = v724;
                  if ((*(_BYTE *)(v718 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v718 + 24) = v723;
                  }
                  else
                  {
                    *(_QWORD *)(v718 + 24) = 0;
                    v722 = (uint64_t *)(v724 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v718 + 16) = v718;
                  *(_QWORD *)(v718 + 24) = 0;
                }
                *v722 = v718;
              }
              v718 += 32;
              v720 -= 32;
            }
            while (v720);
          }
          v712 = *(_QWORD *)(v710 + 728);
          if (v712)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v712 + 24))(v712, v705);
          v713 = *v708 & 0xFFFFFFFFFFFFFFF8;
          *v707 = v713 | *v707 & 7;
          v707[1] = (unint64_t)v708;
          *(_QWORD *)(v713 + 8) = v707;
          *v708 = *v708 & 7 | (unint64_t)v707;
          if ((_QWORD)v941)
            (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v941 + 24))(v941, v707);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v707, v706, (const llvm::MachineOperand *)&v910);
          LODWORD(v917) = 1;
          *((_QWORD *)&v917 + 1) = 0;
          v918 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v707, v706, (const llvm::MachineOperand *)&v917);
          LODWORD(v917) = 1;
          *((_QWORD *)&v917 + 1) = 0;
          v918 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v707, v706, (const llvm::MachineOperand *)&v917);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v707, v706, (const llvm::MachineOperand *)&v913);
          LODWORD(v917) = 1;
          *((_QWORD *)&v917 + 1) = 0;
          v918 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v707, v706, (const llvm::MachineOperand *)&v917);
          *(_QWORD *)&v917 = v615;
          *((_QWORD *)&v917 + 1) = v707;
          v918 = v654;
          v714 = (char *)v931;
          v606 = v890;
          if (v932 >= HIDWORD(v932))
          {
            v730 = v932 + 1;
            if (v931 <= &v917 && (char *)v931 + 24 * v932 > (char *)&v917)
            {
              v731 = (char *)&v917 - (_BYTE *)v931;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v931, (uint64_t)&v933, v730, 24);
              v714 = (char *)v931;
              v715 = (__int128 *)((char *)v931 + v731);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v931, (uint64_t)&v933, v730, 24);
              v715 = &v917;
              v714 = (char *)v931;
            }
          }
          else
          {
            v715 = &v917;
          }
          v716 = &v714[24 * v932];
          v717 = *v715;
          *((_QWORD *)v716 + 2) = *((_QWORD *)v715 + 2);
          *(_OWORD *)v716 = v717;
          LODWORD(v932) = v932 + 1;
          v937 = (llvm::MachineOperand *)&off_1E816EC08;
          if (*((_QWORD *)&__p + 1))
            llvm::MetadataTracking::untrack((uint64_t)&__p + 8, *((unsigned __int8 **)&__p + 1));
          goto LABEL_1148;
        }
LABEL_1176:
        if (v605 != (llvm::MachineOperand **)&v924)
          free(v605);
      }
LABEL_1178:
      v593 = v882 + 1;
      if (v882 + 1 == v874)
      {
        if ((_DWORD)v929)
        {
          v734 = (char *)__base;
          v735 = (char *)__base + 40 * v929;
          do
          {
            v736 = *(unsigned int **)v734;
            v737 = *((_DWORD *)v734 + 6);
            v738 = *((_DWORD *)v734 + 8);
            v740 = *((_DWORD *)v734 + 2);
            v739 = *((_DWORD *)v734 + 3);
            v741 = **(_DWORD **)v734;
            if (!(_BYTE)v741)
            {
              v742 = *((_QWORD *)v736 + 2);
              if (v742)
              {
                v743 = *((_QWORD *)v736 + 1);
                if (v743)
                {
                  v744 = *(_QWORD *)(v743 + 24);
                  if (v744)
                  {
                    v745 = *(_QWORD *)(v744 + 32);
                    if (v745)
                    {
                      v746 = *(_QWORD *)(v745 + 40);
                      v747 = v736[1];
                      if ((v747 & 0x80000000) != 0)
                        v748 = (unsigned int **)(*(_QWORD *)(v746 + 24) + 16 * (v747 & 0x7FFFFFFF) + 8);
                      else
                        v748 = (unsigned int **)(*(_QWORD *)(v746 + 272) + 8 * v747);
                      v749 = *v748;
                      v750 = (unsigned int *)*((_QWORD *)v736 + 3);
                      if (*v748 != v736)
                        v748 = (unsigned int **)(v742 + 24);
                      *v748 = v750;
                      if (v750)
                        v751 = v750;
                      else
                        v751 = v749;
                      *((_QWORD *)v751 + 2) = v742;
                      *((_QWORD *)v736 + 2) = 0;
                      *((_QWORD *)v736 + 3) = 0;
                      v741 = *v736;
                    }
                  }
                }
              }
            }
            v27 = v740 == 0;
            v752 = v740 & 0xFFF00 | 7;
            v736[4] = v737;
            v736[6] = v738;
            if (v27)
              v753 = 7;
            else
              v753 = v752;
            *v736 = v753 | v741 & 0xFFF00000;
            v736[1] = v739;
            v754 = *(_QWORD *)(*(_QWORD *)v734 + 8);
            if (**(_WORD **)(v754 + 16) == 265)
              *(_QWORD *)(v754 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 848) + 8) + 12768;
            v734 += 40;
          }
          while (v734 != v735);
        }
        goto LABEL_1208;
      }
    }
    v732 = 1;
    while (v599 != -1)
    {
      v733 = v597 + v732++;
      v597 = v733 & (v596 - 1);
      v599 = *(_DWORD *)(v595 + 8 * v597);
      if ((_DWORD)v594 == v599)
      {
        v598 = (int *)(v595 + 8 * v597);
        goto LABEL_977;
      }
    }
LABEL_1184:
    v598 = (int *)(v595 + 8 * v596);
    goto LABEL_977;
  }
LABEL_1208:
  if (!(_DWORD)v932)
  {
    *(_QWORD *)&v938 = 0;
    v937 = 0;
    DWORD2(v938) = 0;
    *(_QWORD *)&v940 = 0;
    __p = 0uLL;
    goto LABEL_1321;
  }
  v755 = 24 * v932;
  v756 = (uint64_t *)((char *)v931 + 16);
  do
  {
    if (*v756)
      sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 288), *v756, 0);
    sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 288), *(v756 - 1), 0);
    v756 += 3;
    v755 -= 24;
  }
  while (v755);
  v757 = (uint64_t *)v931;
  *(_QWORD *)&v938 = 0;
  v937 = 0;
  DWORD2(v938) = 0;
  *(_QWORD *)&v940 = 0;
  __p = 0uLL;
  if ((_DWORD)v932)
  {
    v758 = (uint64_t *)((char *)v931 + 24 * v932);
    while (1)
    {
      v759 = *v757;
      v760 = *(_WORD *)(*v757 + 44);
      v761 = *v757;
      if ((v760 & 4) != 0)
      {
        do
          v761 = *(_QWORD *)v761 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v761 + 44) & 4) != 0);
      }
      v762 = *v757;
      if ((v760 & 8) != 0)
      {
        do
          v762 = *(_QWORD *)(v762 + 8);
        while ((*(_WORD *)(v762 + 44) & 8) != 0);
      }
      v763 = *(_QWORD *)(v762 + 8);
      if (v761 != v763)
      {
        while (1)
        {
          v764 = **(unsigned __int16 **)(v761 + 16);
          v99 = v764 > 0x17;
          v765 = (1 << v764) & 0x83E000;
          if (v99 || v765 == 0)
            break;
          v761 = *(_QWORD *)(v761 + 8);
          if (v761 == v763)
          {
            v761 = v763;
            break;
          }
        }
      }
      v767 = *(_DWORD *)(*(_QWORD *)(v759 + 32) + 36);
      v768 = *(int32x2_t **)(*(_QWORD *)(a1 + 888) + 288);
      v769 = v768[46];
      v770 = v768[48].u32[0];
      if (!(_DWORD)v770)
        goto LABEL_1231;
      LODWORD(v771) = ((v761 >> 4) ^ (v761 >> 9)) & (v770 - 1);
      v772 = (uint64_t *)(*(_QWORD *)&v769 + 16 * v771);
      v773 = *v772;
      if (v761 != *v772)
        break;
      v774 = v772[1];
LABEL_1233:
      LODWORD(v777) = (v770 - 1) & ((v759 >> 4) ^ (v759 >> 9));
      v778 = (uint64_t *)(*(_QWORD *)&v769 + 16 * v777);
      v779 = *v778;
      if (*v778 == v759)
        goto LABEL_1239;
      v780 = 1;
      while (v779 != -4096)
      {
        v781 = v777 + v780++;
        v777 = v781 & (v770 - 1);
        v779 = *(_QWORD *)(*(_QWORD *)&v769 + 16 * v777);
        if (v779 == v759)
        {
          v778 = (uint64_t *)(*(_QWORD *)&v769 + 16 * v777);
          goto LABEL_1239;
        }
      }
LABEL_1238:
      v778 = (uint64_t *)(*(_QWORD *)&v769 + 16 * v770);
LABEL_1239:
      if (v778 != (uint64_t *)(*(_QWORD *)&v769 + 16 * v770))
      {
        v782 = v778[1] & 0xFFFFFFFFFFFFFFF8;
        *v778 = -8192;
        v768[47] = vadd_s32(v768[47], (int32x2_t)0x1FFFFFFFFLL);
        *(_QWORD *)(v782 + 16) = 0;
        v759 = *v757;
      }
      v783 = v759;
      if ((*(_BYTE *)v759 & 4) == 0)
      {
        v783 = v759;
        if ((*(_WORD *)(v759 + 44) & 8) != 0)
        {
          v783 = v759;
          do
            v783 = *(_QWORD *)(v783 + 8);
          while ((*(_WORD *)(v783 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v759 + 24) + 40, v759, *(_QWORD *)(v783 + 8));
      LODWORD(v922) = v767;
      if ((v767 & 0x80000000) == 0)
      {
        v784 = *(_QWORD *)(a1 + 864);
        if (v784)
          v785 = (_QWORD *)(v784 + 8);
        else
          v785 = 0;
        v786 = *(unsigned int *)(*v785 + 24 * v767 + 16);
        v787 = (_WORD *)(v785[6] + ((v786 >> 3) & 0x1FFFFFFE));
        v788 = *v787 + (v786 & 0xF) * v767;
        v789 = v774 & 0xFFFFFFFFFFFFFFF8 | 4;
        while (1)
        {
          if ((llvm::MachineRegisterInfo::isReservedRegUnit(*(llvm::MachineRegisterInfo **)(a1 + 880), v788) & 1) == 0)
          {
            v790 = *(_QWORD *)(a1 + 888);
            v791 = *(_QWORD *)(*(_QWORD *)(v790 + 680) + 8 * v788);
            if (v791)
              break;
          }
LABEL_1284:
          v821 = (unsigned __int16)v787[1];
          ++v787;
          v788 += v821;
          if (!v821)
            goto LABEL_1292;
        }
        v792 = v757[1];
        v793 = *(_WORD *)(v792 + 44);
        v794 = v792;
        if ((v793 & 4) != 0)
        {
          do
            v794 = *(_QWORD *)v794 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v794 + 44) & 4) != 0);
        }
        if ((v793 & 8) != 0)
        {
          do
            v792 = *(_QWORD *)(v792 + 8);
          while ((*(_WORD *)(v792 + 44) & 8) != 0);
        }
        v795 = *(_QWORD *)(v792 + 8);
        if (v794 != v795)
        {
          while (1)
          {
            v796 = **(unsigned __int16 **)(v794 + 16);
            v99 = v796 > 0x17;
            v797 = (1 << v796) & 0x83E000;
            if (v99 || v797 == 0)
              break;
            v794 = *(_QWORD *)(v794 + 8);
            if (v794 == v795)
            {
              v794 = v795;
              break;
            }
          }
        }
        v799 = *(_QWORD *)(v790 + 288);
        v800 = *(_QWORD *)(v799 + 368);
        v801 = *(unsigned int *)(v799 + 384);
        if ((_DWORD)v801)
        {
          LODWORD(v802) = ((v794 >> 4) ^ (v794 >> 9)) & (v801 - 1);
          v803 = (uint64_t *)(v800 + 16 * v802);
          v804 = *v803;
          if (v794 != *v803)
          {
            v805 = 1;
            while (v804 != -4096)
            {
              v806 = v802 + v805++;
              v802 = v806 & (v801 - 1);
              v804 = *(_QWORD *)(v800 + 16 * v802);
              if (v794 == v804)
              {
                v803 = (uint64_t *)(v800 + 16 * v802);
                goto LABEL_1266;
              }
            }
            goto LABEL_1265;
          }
        }
        else
        {
LABEL_1265:
          v803 = (uint64_t *)(v800 + 16 * v801);
        }
LABEL_1266:
        v807 = v803[1];
        v808 = *(unsigned int *)(v791 + 8);
        v809 = *(_QWORD **)v791;
        if ((_DWORD)v808)
        {
          v810 = v809[3 * v808 - 2];
          v811 = *(_DWORD *)((v807 & 0xFFFFFFFFFFFFFFF8) + 24) | (v807 >> 1) & 3;
          v812 = (v810 >> 1) & 3 | *(_DWORD *)((v810 & 0xFFFFFFFFFFFFFFF8) + 24);
          v813 = v809;
          v814 = v808;
          if (v811 < v812)
          {
            do
            {
              v815 = v814 >> 1;
              v816 = v813[3 * (v814 >> 1) + 1];
              LODWORD(v816) = (v816 >> 1) & 3 | *(_DWORD *)((v816 & 0xFFFFFFFFFFFFFFF8) + 24);
              v814 -= (v814 >> 1) + 1;
              v817 = v811 >= v816;
              if (v811 >= v816)
                v818 = v815 + 1;
              else
                v818 = 0;
              v813 += 3 * v818;
              if (!v817)
                v814 = v815;
            }
            while (v814);
            goto LABEL_1277;
          }
        }
        else
        {
          LODWORD(v808) = 0;
        }
        v813 = &v809[3 * v808];
LABEL_1277:
        v819 = &v809[3 * v808];
        if (v813 == v819
          || ((*v813 >> 1) & 3 | *(_DWORD *)((*v813 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v807 & 0xFFFFFFFFFFFFFFF8) + 24) | (v807 >> 1) & 3))
        {
          v813 = v819;
        }
        if (v813 == v819)
          v820 = 0;
        else
          v820 = v813;
        if (v820[1] == v789)
          v820[1] = v807 & 0xFFFFFFFFFFFFFFF8 | 4;
        goto LABEL_1284;
      }
      sub_1C4977DA4((uint64_t)&v937, &v922);
LABEL_1292:
      v822 = v757[2];
      if (v822)
      {
        v823 = *(_QWORD *)(a1 + 888);
        v824 = (llvm::LiveInterval *)sub_1C4851220(v823, *(_DWORD *)(*(_QWORD *)(v822 + 32) + 4));
        v825 = *(_QWORD *)(v823 + 304);
        v826 = *(_QWORD *)(v823 + 248);
        *(_QWORD *)v825 = v826;
        *(_QWORD *)(v825 + 8) = *(_QWORD *)(v826 + 40);
        *(_OWORD *)(v825 + 16) = *(_OWORD *)(v823 + 288);
        *(_QWORD *)(v825 + 32) = v823 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v825);
        *(_DWORD *)(v825 + 184) = 0;
        v827 = *(_QWORD *)(v823 + 256);
        v27 = *(_BYTE *)(v827 + 16) == 0;
        v828 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v827 + 24) + 16 * (*((_DWORD *)v824 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v830 = !v27 && v828 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v823 + 304), v824, v830);
        llvm::LiveIntervals::computeDeadValues(v823, (uint64_t)v824, 0);
      }
      v757 += 3;
      if (v757 == v758)
      {
        v832 = (int *)*((_QWORD *)&__p + 1);
        for (k = (int *)__p; k != v832; ++k)
        {
          v833 = *(_QWORD *)(a1 + 888);
          if ((*k & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v833 + 416)
            || (v834 = *(llvm::LiveInterval **)(*(_QWORD *)(v833 + 408) + 8 * (*k & 0x7FFFFFFF))) == 0)
          {
            v834 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 888), *k);
            v835 = *(_QWORD *)(v833 + 304);
            v836 = *(_QWORD *)(v833 + 248);
            *(_QWORD *)v835 = v836;
            *(_QWORD *)(v835 + 8) = *(_QWORD *)(v836 + 40);
            *(_OWORD *)(v835 + 16) = *(_OWORD *)(v833 + 288);
            *(_QWORD *)(v835 + 32) = v833 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v835);
            *(_DWORD *)(v835 + 184) = 0;
            v837 = *(_QWORD *)(v833 + 256);
            v27 = *(_BYTE *)(v837 + 16) == 0;
            v838 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v837 + 24)
                                                   + 16 * (*((_DWORD *)v834 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v840 = !v27 && v838 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v833 + 304), v834, v840);
            llvm::LiveIntervals::computeDeadValues(v833, (uint64_t)v834, 0);
            v833 = *(_QWORD *)(a1 + 888);
          }
          llvm::LiveIntervals::shrinkToUses((_QWORD *)v833, (uint64_t)v834, 0);
        }
        goto LABEL_1321;
      }
    }
    v775 = 1;
    while (v773 != -4096)
    {
      v776 = v771 + v775++;
      v771 = v776 & (v770 - 1);
      v773 = *(_QWORD *)(*(_QWORD *)&v769 + 16 * v771);
      if (v761 == v773)
        goto LABEL_1232;
    }
LABEL_1231:
    v771 = v768[48].u32[0];
LABEL_1232:
    v774 = *(_QWORD *)(*(_QWORD *)&v769 + 16 * v771 + 8);
    if (!(_DWORD)v770)
      goto LABEL_1238;
    goto LABEL_1233;
  }
LABEL_1321:
  v841 = *(unsigned int *)(a1 + 616);
  if ((_DWORD)v841)
  {
    v842 = *(_QWORD *)(a1 + 608);
    v843 = v842 + 8 * v841;
    do
    {
      v844 = *(_QWORD *)(a1 + 888);
      v845 = *(_DWORD *)(**(_QWORD **)v842 + 112) & 0x7FFFFFFF;
      v846 = *(_QWORD *)(v844 + 408);
      v847 = *(_QWORD *)(v846 + 8 * v845);
      if (v847)
      {
        v848 = *(_QWORD *)(v847 + 104);
        if (v848)
        {
          do
          {
            v851 = *(_QWORD *)(v848 + 96);
            v852 = *(_QWORD *)(v848 + 104);
            *(_QWORD *)(v848 + 96) = 0;
            if (v851)
            {
              sub_1C47655E8(v851, *(_QWORD **)(v851 + 8));
              MEMORY[0x1CAA32FC0](v851, 0x1020C4062D53EE8);
            }
            v853 = *(void **)(v848 + 64);
            if (v853 != (void *)(v848 + 80))
              free(v853);
            if (*(_QWORD *)v848 != v848 + 16)
              free(*(void **)v848);
            v848 = v852;
          }
          while (v852);
        }
        v849 = *(_QWORD *)(v847 + 96);
        *(_QWORD *)(v847 + 96) = 0;
        *(_QWORD *)(v847 + 104) = 0;
        if (v849)
        {
          sub_1C47655E8(v849, *(_QWORD **)(v849 + 8));
          MEMORY[0x1CAA32FC0](v849, 0x1020C4062D53EE8);
        }
        v850 = *(void **)(v847 + 64);
        if (v850 != (void *)(v847 + 80))
          free(v850);
        if (*(_QWORD *)v847 != v847 + 16)
          free(*(void **)v847);
        MEMORY[0x1CAA32FC0](v847, 0x10A0C408DA535C6);
        v846 = *(_QWORD *)(v844 + 408);
      }
      *(_QWORD *)(v846 + 8 * v845) = 0;
      v842 += 8;
    }
    while (v842 != v843);
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  MEMORY[0x1CAA32FB4](v937, 4);
  if (__base != v930)
    free(__base);
  if (v931 != &v933)
    free(v931);
  return *(_DWORD *)(a1 + 616) != 0;
}

_DWORD *sub_1C4A06480(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(8 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 2;
        v6 -= 8;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

_QWORD *sub_1C4A06510(_QWORD *result, int a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    result = operator new(4 * v4, (std::align_val_t)4uLL);
    *v2 = result;
    v2[1] = 0;
    v5 = *((unsigned int *)v2 + 4);
    if ((_DWORD)v5)
      return memset(result, 255, 4 * v5);
  }
  else
  {
    *result = 0;
    result[1] = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

void sub_1C4A0659C(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_1C4A0659C(*a1);
    sub_1C4A0659C(a1[1]);
    v2 = (void *)a1[8];
    if (v2)
    {
      a1[9] = v2;
      operator delete(v2);
    }
    MEMORY[0x1CAA32FB4](a1[5], 4);
    operator delete(a1);
  }
}

void sub_1C4A065F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 - 8);
    if (v3)
    {
      v4 = 176 * v3;
      do
      {
        v5 = a2 + v4;
        v6 = *(void **)(a2 + v4 - 64);
        if ((void *)(a2 + v4 - 48) != v6)
          free(v6);
        v7 = *(void **)(v5 - 144);
        if ((void *)(v5 - 128) != v7)
          free(v7);
        v4 -= 176;
      }
      while (v4);
    }
    JUMPOUT(0x1CAA32F9CLL);
  }
}

_DWORD *sub_1C4A06678(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64)
        v5 = 64;
      else
        v5 = v4;
LABEL_9:
      if (v5 == v3)
      {
        *((_QWORD *)result + 1) = 0;
        v6 = 8 * v3;
        v7 = *(_DWORD **)result;
        do
        {
          *v7 = -1;
          v7 += 2;
          v6 -= 8;
        }
        while (v6);
      }
      else
      {
        result = (_DWORD *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 4);
        if (v5)
        {
          v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
          v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
          LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
          v1[4] = v9;
          result = operator new(8 * v9, (std::align_val_t)4uLL);
          *(_QWORD *)v1 = result;
          *((_QWORD *)v1 + 1) = 0;
          v10 = v1[4];
          if ((_DWORD)v10)
          {
            v11 = 8 * v10;
            do
            {
              *result = -1;
              result += 2;
              v11 -= 8;
            }
            while (v11);
          }
        }
        else
        {
          *(_QWORD *)v1 = 0;
          *((_QWORD *)v1 + 1) = 0;
          v1[4] = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3])
      return result;
    v3 = result[4];
    if (v3 > 0x40)
    {
      v5 = 0;
      goto LABEL_9;
    }
  }
  if (v3)
  {
    v12 = *(_DWORD **)result;
    v13 = 8 * v3;
    do
    {
      *v12 = -1;
      v12 += 2;
      v13 -= 8;
    }
    while (v13);
  }
  *((_QWORD *)result + 1) = 0;
  return result;
}

_DWORD *sub_1C4A067C4(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C4A06814(result);
    }
  }
  return result;
}

_DWORD *sub_1C4A06814(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD **)result;
      v7 = 8 * v2;
      do
      {
        *v6++ = -4096;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    return sub_1C4A06480(v1, v5);
  }
  return result;
}

_QWORD *sub_1C4A068AC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v1 = result;
  v2 = *((unsigned int *)result + 4);
  v3 = *((_DWORD *)result + 2);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    result[1] = 0;
    if ((_DWORD)v2)
      return memset((void *)*result, 255, 4 * v2);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*result, 4);
    return sub_1C4A06510(v1, v5);
  }
  return result;
}

void sub_1C4A06944(uint64_t a1, char *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _BOOL4 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(char **)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = &v5[8 * v4];
    v10 = v5 <= a2 && v8 > a2;
    if (v10)
      v11 = (a2 - v5) >> 3;
    else
      v11 = -1;
    v21 = 0;
    v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v7, 8, &v21);
    v12 = *(char **)a1;
    v13 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v13)
    {
      v14 = 8 * v13;
      v15 = 8 * v13;
      v16 = v5;
      do
      {
        v17 = *(_QWORD *)v12;
        *(_QWORD *)v12 = 0;
        v12 += 8;
        *(_QWORD *)v16 = v17;
        v16 += 8;
        v15 -= 8;
      }
      while (v15);
      v18 = *(_QWORD *)a1 - 8;
      do
      {
        v19 = *(_QWORD *)(v18 + v14);
        *(_QWORD *)(v18 + v14) = 0;
        if (v19)
          MEMORY[0x1CAA32FC0](v19, 0x1020C403A5D3213);
        v14 -= 8;
      }
      while (v14);
      v12 = *(char **)a1;
    }
    v20 = v21;
    if (v12 != (char *)(a1 + 16))
      free(v12);
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 12) = v20;
    if (v10)
      a2 = &v5[8 * v11];
    v4 = *(unsigned int *)(a1 + 8);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 8) = v4 + 1;
}

uint64_t sub_1C4A06A78(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;

  if ((a2 & 0x80000000) != 0)
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v3 = *v2;
  if (!v3)
    return 0;
  while ((*(_DWORD *)v3 & 0x80000000) != 0)
  {
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3)
      return 0;
  }
  v5 = *(_QWORD *)(v3 + 8);
LABEL_9:
  v6 = **(unsigned __int16 **)(v5 + 16);
  if (v6 != 263 && v6 != 550 && v6 != 4998)
  {
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 24);
      if (!v3)
        return 0;
      if ((*(_DWORD *)v3 & 0x80000000) == 0 && *(_QWORD *)(v3 + 8) != v5)
      {
        v5 = *(_QWORD *)(v3 + 8);
        goto LABEL_9;
      }
    }
  }
  return 1;
}

_DWORD *sub_1C4A06B0C(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _DWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C4A06CE0(a1, a2, v12);
    *v6 = *a2;
    *((_QWORD *)v6 + 1) = 0;
    return v6 + 2;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6 + 2;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6 + 2;
}

BOOL sub_1C4A06BC4(uint64_t a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 v18;

  sub_1C4A06E54((_DWORD *)a1, a2, (uint64_t)&v17);
  v4 = v18;
  if (v18)
  {
    v6 = *(_QWORD **)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v6 >= v5)
    {
      v8 = *(_QWORD **)(a1 + 24);
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = *a2;
      v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          v15 = *--v6;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        v6 = *(_QWORD **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v14;
      *(_QWORD *)(a1 + 32) = v7;
      *(_QWORD *)(a1 + 40) = &v13[8 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    *(_QWORD *)(a1 + 32) = v7;
  }
  return v4 != 0;
}

_DWORD *sub_1C4A06CE0(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C49F41C0((uint64_t *)a1, 2 * v6);
    v7 = *a2;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = (37 * *a2) & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -1)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -2;
        if (v14)
          v12 = a3;
        v15 = v10 + v13++;
        v10 = v15 & v9;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
        v11 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a3;
      goto LABEL_4;
    }
    sub_1C49F41C0((uint64_t *)a1, v6);
    v7 = *a2;
    v16 = *(_DWORD *)(a1 + 16) - 1;
    v17 = (37 * *a2) & v16;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v17);
    v18 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v19 = 1;
      while (v18 != -1)
      {
        if (v12)
          v20 = 0;
        else
          v20 = v18 == -2;
        if (v20)
          v12 = a3;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v17);
        v18 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
LABEL_27:
      if (v12)
        a3 = v12;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C4A06E54@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C4A06ED8((uint64_t)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4A06F6C(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * a1[4];
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C4A06ED8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 8 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v11 & v4));
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

_QWORD *sub_1C4A06F6C(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4A0701C((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4A06ED8((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C4A0701C(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4A070D4(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4A070D4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C4A06ED8(v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4A07178(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_DWORD *sub_1C4A07214(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v8;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C497938C(a1, 2 * v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = (37 * *a3) & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -1)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -2;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C497938C(a1, v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = (37 * *a3) & v17;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -1)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -2;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 8 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_20:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_1C4A0738C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  char *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  const llvm::LiveInterval **v36;
  llvm::LiveIntervalUnion *v37;
  uint64_t v38;
  const llvm::LiveInterval *v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unint64_t v47;
  llvm::LiveIntervalUnion::Array *v48;
  int64x2_t v49;
  __int128 v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[64];
  _QWORD v56[5];
  void *v57;
  uint64_t v58;
  _QWORD v59[7];

  v59[5] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 248) < a2)
  {
    v2 = a1;
    v3 = 0;
    if (a2 >= 0xFF0)
      v4 = 4080;
    else
      v4 = a2;
    v41 = v4;
    v44 = ((_WORD)v4 + 15) & 0x1FF0;
    v45 = *(unsigned __int8 *)(a1 + 256);
    v42 = a1 + 104;
    v43 = a1 + 184;
    v49 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    while (1)
    {
      v5 = v44 >> v3;
      v6 = (_QWORD *)operator new[]();
      *v6 = 176;
      v6[1] = v5;
      v7 = v6 + 2;
      if ((_DWORD)v5)
      {
        v8 = v6 + 2;
        do
        {
          *((_OWORD *)v8 + 1) = 0uLL;
          *((_OWORD *)v8 + 2) = 0uLL;
          *((_OWORD *)v8 + 9) = 0uLL;
          *((_OWORD *)v8 + 10) = 0uLL;
          *((_OWORD *)v8 + 6) = 0uLL;
          *((_OWORD *)v8 + 7) = 0uLL;
          *((_OWORD *)v8 + 4) = 0uLL;
          *((_OWORD *)v8 + 5) = 0uLL;
          *(_OWORD *)v8 = 0uLL;
          *((_OWORD *)v8 + 8) = 0uLL;
          *((_OWORD *)v8 + 3) = 0uLL;
          v8[4] = v8 + 6;
          *((_DWORD *)v8 + 11) = 4;
          v8[14] = v8 + 16;
          *((_DWORD *)v8 + 31) = 4;
          v8 += 22;
        }
        while (v8 != &v7[22 * v5]);
      }
      v9 = (uint64_t *)(v43 + 8 * v3);
      v56[0] = 0;
      v10 = *v9;
      *v9 = (uint64_t)v7;
      if (v10)
      {
        sub_1C4A065F0((uint64_t)v9, v10);
        v11 = v56[0];
        v56[0] = 0;
        if (v11)
          sub_1C4A065F0((uint64_t)v56, v11);
      }
      LODWORD(v50) = 0;
      *((_QWORD *)&v50 + 1) = 0;
      llvm::LiveIntervalUnion::Array::init((llvm::LiveIntervalUnion::Array *)&v50, v2, v5);
      v47 = v3;
      v48 = (llvm::LiveIntervalUnion::Array *)(v42 + 16 * v3);
      v12 = *(unsigned int *)v48;
      if ((_DWORD)v12)
        break;
LABEL_54:
      llvm::LiveIntervalUnion::Array::clear(v48);
      *(_OWORD *)v56 = *(_OWORD *)v48;
      v40 = *(_OWORD *)v56;
      *(_OWORD *)v48 = v50;
      v50 = v40;
      llvm::LiveIntervalUnion::Array::clear((llvm::LiveIntervalUnion::Array *)v56);
      llvm::LiveIntervalUnion::Array::clear((llvm::LiveIntervalUnion::Array *)&v50);
      v2 = a1;
      if (v45)
      {
        v3 = v47 + 1;
        if (v47 < 4)
          continue;
      }
      *(_DWORD *)(a1 + 248) = v41;
      return;
    }
    v13 = 0;
    while (1)
    {
      v14 = *((_QWORD *)v48 + 1);
      v15 = *((_QWORD *)&v50 + 1);
      v56[0] = 1;
      *(int64x2_t *)&v56[1] = v49;
      *(int64x2_t *)&v56[3] = v49;
      v57 = v59;
      v58 = 0x400000000;
      v52 = v14 + 216 * v13 + 8;
      v53 = v55;
      v54 = 0x400000000;
      sub_1C4A0787C(&v52);
      v16 = v54;
      if ((_DWORD)v54)
        break;
LABEL_43:
      if (v53 != v55)
        free(v53);
      v36 = (const llvm::LiveInterval **)v57;
      if ((_DWORD)v58)
      {
        v37 = (llvm::LiveIntervalUnion *)(v15 + 216 * v13);
        v38 = 8 * v58;
        do
        {
          v39 = *v36++;
          llvm::LiveIntervalUnion::unify(v37, v39, (uint64_t **)v39);
          v38 -= 8;
        }
        while (v38);
        v36 = (const llvm::LiveInterval **)v57;
      }
      if (v36 != v59)
        free(v36);
      if ((v56[0] & 1) == 0)
        MEMORY[0x1CAA32FB4](v56[1], 8);
      if (++v13 == v12)
        goto LABEL_54;
    }
    while (1)
    {
      if (*((_DWORD *)v53 + 3) >= *((_DWORD *)v53 + 2))
        goto LABEL_43;
      v17 = *(_QWORD *)(*((_QWORD *)v53 + 2 * v16 - 2) + 8 * *((unsigned int *)v53 + 4 * v16 - 1) + 128);
      v51 = 0;
      if ((sub_1C4A07A58((uint64_t)v56, v17, &v51) & 1) == 0)
        break;
LABEL_27:
      v21 = v53;
      v22 = (char *)v53 + 16 * v54;
      v23 = *((_DWORD *)v22 - 1) + 1;
      *((_DWORD *)v22 - 1) = v23;
      v16 = v54;
      if (v23 == v21[4 * v54 - 2])
      {
        v24 = *(unsigned int *)(v52 + 192);
        if ((_DWORD)v24)
        {
          v25 = 1;
          v26 = v24 + 1;
          v27 = &v21[4 * v24 - 2];
          while (1)
          {
            v28 = v27;
            if (v26 == 2)
              break;
            v30 = *v27;
            v29 = v27[1];
            v31 = *v27 - 1;
            --v26;
            v27 -= 4;
            if (v29 != v31)
            {
              v25 = v26;
              goto LABEL_36;
            }
          }
          v30 = v21[2];
          v29 = v21[3];
LABEL_36:
          v32 = v29 + 1;
          v28[1] = v32;
          if (v32 != v30)
          {
            v33 = *(_QWORD *)(*((_QWORD *)v28 - 1) + 8 * v32);
            if ((_DWORD)v24 != v25)
            {
              do
              {
                v35 = (char *)v53 + 16 * v25;
                *(_QWORD *)v35 = v33 & 0xFFFFFFFFFFFFFFC0;
                *((_DWORD *)v35 + 2) = (v33 & 0x3F) + 1;
                *((_DWORD *)v35 + 3) = 0;
                ++v25;
                v33 = *(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFC0);
              }
              while ((_DWORD)v24 != v25);
              v21 = v53;
            }
            v34 = (char *)&v21[4 * v24];
            *(_QWORD *)v34 = v33 & 0xFFFFFFFFFFFFFFC0;
            *((_DWORD *)v34 + 2) = (v33 & 0x3F) + 1;
            *((_DWORD *)v34 + 3) = 0;
            v16 = v54;
          }
        }
      }
      if (!v16)
        goto LABEL_43;
    }
    v18 = LODWORD(v56[0]) >> 1;
    if ((v56[0] & 1) != 0)
      v19 = 4;
    else
      v19 = v56[2];
    if (4 * v18 + 4 >= 3 * v19)
    {
      v19 *= 2;
    }
    else if (v19 + ~v18 - HIDWORD(v56[0]) > v19 >> 3)
    {
LABEL_22:
      LODWORD(v56[0]) += 2;
      if (*v51 != -4096)
        --HIDWORD(v56[0]);
      *v51 = v17;
      v20 = v58;
      if (v58 >= (unint64_t)HIDWORD(v58))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v58 + 1, 8);
        v20 = v58;
      }
      *((_QWORD *)v57 + v20) = v17;
      LODWORD(v58) = v58 + 1;
      goto LABEL_27;
    }
    sub_1C4A07AFC((uint64_t)v56, v19);
    v51 = 0;
    sub_1C4A07A58((uint64_t)v56, v17, &v51);
    goto LABEL_22;
  }
}

_DWORD *sub_1C4A0787C(_DWORD *a1)
{
  _DWORD *result;
  unsigned int v3;
  unsigned int i;
  uint64_t v5;

  result = sub_1C4A078FC(a1, 0);
  v3 = *(_DWORD *)(*(_QWORD *)a1 + 192);
  if (v3)
  {
    for (i = a1[4] - 1; i < v3; i = a1[4] - 1)
    {
      v5 = *((_QWORD *)a1 + 1) + 16 * i;
      result = sub_1C4A079DC(a1 + 2, *(_QWORD *)(*(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 12)), 0);
    }
  }
  return result;
}

_DWORD *sub_1C4A078FC(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v4 = result + 2;
  v5 = *(_QWORD *)result;
  if (*(_DWORD *)(*(_QWORD *)result + 192))
  {
    v6 = v5 + 8;
    v7 = *(unsigned int *)(v5 + 196);
    result[4] = 0;
    v8 = result + 4;
    if (result[5])
    {
      v9 = 0;
    }
    else
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 2), (uint64_t)(result + 6), 1uLL, 16);
      v9 = v3[4];
    }
    v10 = v7 | (a2 << 32);
    v11 = (_QWORD *)(*v4 + 16 * v9);
    *v11 = v6;
  }
  else
  {
    v12 = *(unsigned int *)(v5 + 196);
    result[4] = 0;
    v8 = result + 4;
    if (result[5])
    {
      v13 = 0;
    }
    else
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 2), (uint64_t)(result + 6), 1uLL, 16);
      v13 = v3[4];
    }
    v10 = v12 | (a2 << 32);
    v11 = (_QWORD *)(*v4 + 16 * v13);
    *v11 = v5;
  }
  v11[1] = v10;
  ++*v8;
  return result;
}

_DWORD *sub_1C4A079DC(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  unint64_t *v7;

  v5 = result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 16);
    LODWORD(v6) = v5[2];
  }
  v7 = (unint64_t *)(*(_QWORD *)v5 + 16 * v6);
  *v7 = a2 & 0xFFFFFFFFFFFFFFC0;
  v7[1] = (a2 & 0x3F | (a3 << 32)) + 1;
  ++v5[2];
  return result;
}

uint64_t sub_1C4A07A58(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4A07AFC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4A07C64(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4A07C64(a1, v14, v8);
}

uint64_t sub_1C4A07C64(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4A07A58((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4A07D1C(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & v5;
    v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
      return 0;
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(*(_QWORD *)a1 + 8 * v6);
      v8 = *v7;
      if (*a2 == *v7)
        return 0;
    }
    if (v9)
      v14 = v9;
    else
      v14 = v7;
  }
  else
  {
    v14 = 0;
  }
  *sub_1C4A07FEC(a1, (uint64_t)a2, a2, v14) = *a2;
  v16 = *(_QWORD **)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v16 >= v15)
  {
    v18 = *(_QWORD **)(a1 + 24);
    v19 = v16 - v18;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      abort();
    v21 = v15 - (_QWORD)v18;
    if (v21 >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        sub_1C4764EE4();
      v23 = (char *)operator new(8 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[8 * v19];
    *(_QWORD *)v24 = *a2;
    v17 = v24 + 8;
    if (v16 != v18)
    {
      do
      {
        v25 = *--v16;
        *((_QWORD *)v24 - 1) = v25;
        v24 -= 8;
      }
      while (v16 != v18);
      v16 = *(_QWORD **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 24) = v24;
    *(_QWORD *)(a1 + 32) = v17;
    *(_QWORD *)(a1 + 40) = &v23[8 * v22];
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v16 = *a2;
    v17 = v16 + 1;
  }
  *(_QWORD *)(a1 + 32) = v17;
  return 1;
}

uint64_t sub_1C4A07EAC(uint64_t a1, unint64_t a2, char a3)
{
  __int16 v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v16;
  int v17;

  v3 = *(_WORD *)(a2 + 44);
  v4 = a2;
  v5 = a2;
  if ((v3 & 0xC) != 0)
  {
    v4 = a2;
    if ((v3 & 4) != 0)
    {
      v4 = a2;
      do
        v4 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v4 + 44) & 4) != 0);
    }
    v5 = a2;
    if ((v3 & 8) != 0)
    {
      do
        v5 = *(_QWORD *)(v5 + 8);
      while ((*(_WORD *)(v5 + 44) & 8) != 0);
    }
  }
  if ((a3 & 1) == 0)
  {
    a2 = *(_QWORD *)(v5 + 8);
    if (v4 != a2)
    {
      while (1)
      {
        v6 = **(unsigned __int16 **)(v4 + 16);
        v7 = v6 > 0x17;
        v8 = (1 << v6) & 0x83E000;
        if (v7 || v8 == 0)
          break;
        v4 = *(_QWORD *)(v4 + 8);
        if (v4 == a2)
          goto LABEL_10;
      }
    }
    a2 = v4;
  }
LABEL_10:
  v10 = *(_QWORD *)(a1 + 368);
  v11 = *(unsigned int *)(a1 + 384);
  if (!(_DWORD)v11)
    goto LABEL_17;
  LODWORD(v12) = ((a2 >> 4) ^ (a2 >> 9)) & (v11 - 1);
  v13 = (uint64_t *)(v10 + 16 * v12);
  v14 = *v13;
  if (a2 != *v13)
  {
    v16 = 1;
    while (v14 != -4096)
    {
      v17 = v12 + v16++;
      v12 = v17 & (v11 - 1);
      v14 = *(_QWORD *)(v10 + 16 * v12);
      if (a2 == v14)
      {
        v13 = (uint64_t *)(v10 + 16 * v12);
        return v13[1];
      }
    }
LABEL_17:
    v13 = (uint64_t *)(v10 + 16 * v11);
  }
  return v13[1];
}

uint64_t sub_1C4A07FB0(_QWORD *a1, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = (*a1 >> 1) & 3 | *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v3 = *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3;
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  else
    return v3 < v2;
}

_QWORD *sub_1C4A07FEC(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4A0811C(a1, v7);
      v17 = 0;
      sub_1C4A06ED8(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4A0811C(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 8 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 8 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4A0811C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4A081D4(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4A081D4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 8 * v3;
    do
    {
      *v4++ = -4096;
      v5 -= 8;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = 0;
    v7 = v3 - 1;
    do
    {
      v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        v10 = (_QWORD *)(*(_QWORD *)result + 8 * v9);
        v11 = *v10;
        if (v8 != *v10)
        {
          v12 = 0;
          v13 = 1;
          while (v11 != -4096)
          {
            if (v12)
              v14 = 0;
            else
              v14 = v11 == -8192;
            if (v14)
              v12 = v10;
            v15 = v9 + v13++;
            v9 = v15 & v7;
            v10 = (_QWORD *)(*(_QWORD *)result + 8 * (v15 & v7));
            v11 = *v10;
            if (v8 == *v10)
              goto LABEL_19;
          }
          if (v12)
            v10 = v12;
        }
LABEL_19:
        *v10 = v8;
        *(_DWORD *)(result + 8) = ++v6;
      }
      ++a2;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_1C4A0829C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8) - 16);
  v6 = (v5 >> 1) & 3 | *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24);
  v7 = a3 & 0xFFFFFFFFFFFFFFF8;
  v8 = (a3 >> 1) & 3;
  if (v6 < (*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | v8))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 888) + 288);
    v11 = *(_QWORD *)(v10 + 344) & 0xFFFFFFFFFFFFFFF8;
    if (v6 >= *(_DWORD *)(v11 + 24))
      v5 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF9 | (2 * ((v5 >> 1) & 3));
    v12 = sub_1C499C548(v10, v5);
    if ((*(_DWORD *)(v7 + 24) | v8) >= *(_DWORD *)(v11 + 24))
      v3 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF9 | (2 * ((v3 >> 1) & 3));
    if (v12 == sub_1C499C548(*(_QWORD *)(*(_QWORD *)(a1 + 888) + 288), v3))
    {
      v13 = *(_QWORD *)(a1 + 888);
      v14 = *(_QWORD *)(v13 + 304);
      v15 = *(_QWORD *)(v13 + 248);
      v16 = *(_QWORD *)(v15 + 40);
      *(_QWORD *)v14 = v15;
      *(_QWORD *)(v14 + 8) = v16;
      *(_OWORD *)(v14 + 16) = *(_OWORD *)(v13 + 288);
      *(_QWORD *)(v14 + 32) = v13 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v14);
      *(_DWORD *)(v14 + 184) = 0;
      llvm::LiveRangeCalc::extend(*(llvm::LiveRangeCalc **)(v13 + 304), (uint64_t *)a2, v3, 0, 0, 0);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8) - 16) = v3;
    }
  }
}

uint64_t sub_1C4A083F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _BYTE *v12;
  BOOL v13;
  uint64_t v14;
  int v16;
  uint64_t *v17;
  _QWORD *v18[2];
  void *__p;
  _BYTE *v20;
  uint64_t v21;

  v17 = (uint64_t *)v18;
  v18[0] = 0;
  v18[1] = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  v4 = *(unsigned int *)(a1 + 112);
  if ((v4 & 0x80000000) != 0)
    v5 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
  else
    v5 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v4);
  v6 = *v5;
  if (*v5)
  {
    if ((*(_BYTE *)(v6 + 3) & 0x81) != 0)
    {
      while (1)
      {
        v6 = *(_QWORD *)(v6 + 24);
        if (!v6)
          break;
        if ((*(_DWORD *)v6 & 0x81000000) == 0)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      v7 = *(_QWORD *)(v6 + 8);
LABEL_9:
      v8 = *(unsigned __int16 **)(v7 + 16);
      if ((v8[4] & 8) == 0)
      {
        v9 = sub_1C4C915C4(*v8);
        if ((v9 & 0xFF00000000) == 0)
          llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
        if ((v9 - 164) >= 4)
        {
          if ((v9 - 78) >= 3)
            v16 = 2;
          else
            v16 = 1;
        }
        else
        {
          v16 = 0;
        }
        sub_1C4A08590(&v17, &v16);
      }
      v10 = *(_QWORD *)(v6 + 8);
      while (1)
      {
        v6 = *(_QWORD *)(v6 + 24);
        if (!v6)
          break;
        if ((*(_DWORD *)v6 & 0x81000000) == 0)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7 != v10)
            goto LABEL_9;
        }
      }
      v11 = __p;
      v12 = v20;
      if (__p != v20)
        goto LABEL_28;
      LODWORD(v4) = *(_DWORD *)(a1 + 112);
    }
  }
  v13 = sub_1C4778650(a2, v4);
  v11 = __p;
  if (v13)
  {
    v14 = 2;
    if (!__p)
      goto LABEL_34;
    goto LABEL_33;
  }
  v12 = v20;
LABEL_28:
  if (v12 - (_BYTE *)v11 == 4)
  {
    if (*v11 == 3)
      v14 = 0;
    else
      v14 = *v11;
    goto LABEL_33;
  }
  v14 = 0;
  if (v11)
  {
LABEL_33:
    v20 = v11;
    operator delete(v11);
  }
LABEL_34:
  sub_1C49F3440(v18[0]);
  return v14;
}

void sub_1C4A08590(uint64_t **a1, int *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  int v6;
  uint64_t **v7;
  int v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;

  v5 = a1 + 1;
  v4 = a1[1];
  v6 = *a2;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = *((_DWORD *)v4 + 7);
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x20uLL);
    v9[7] = v6;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v5 = (uint64_t *)v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v11 = *v5;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v13 = a1[4];
    v12 = (unint64_t)a1[5];
    if ((unint64_t)v13 >= v12)
    {
      v15 = a1[3];
      v16 = ((char *)v13 - (char *)v15) >> 2;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62)
        abort();
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 1 > v17)
        v17 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 62)
          sub_1C4764EE4();
        v20 = (char *)operator new(4 * v19);
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[4 * v16];
      *(_DWORD *)v21 = *a2;
      v14 = (uint64_t *)(v21 + 4);
      if (v13 != v15)
      {
        do
        {
          v22 = *((_DWORD *)v13 - 1);
          v13 = (uint64_t *)((char *)v13 - 4);
          *((_DWORD *)v21 - 1) = v22;
          v21 -= 4;
        }
        while (v13 != v15);
        v13 = a1[3];
      }
      a1[3] = (uint64_t *)v21;
      a1[4] = v14;
      a1[5] = (uint64_t *)&v20[4 * v19];
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_DWORD *)v13 = *a2;
      v14 = (uint64_t *)((char *)v13 + 4);
    }
    a1[4] = v14;
  }
}

uint64_t sub_1C4A08714(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (**(unsigned __int16 **)(a3 + 16) - 13 < 5)
    return result;
  v7 = *(_WORD *)(a3 + 44);
  v8 = a3;
  if ((v7 & 4) != 0)
  {
    v8 = a3;
    do
      v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v8 + 44) & 4) != 0);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(result + 888) + 288);
  if ((v7 & 8) != 0)
  {
    do
      a3 = *(_QWORD *)(a3 + 8);
    while ((*(_WORD *)(a3 + 44) & 8) != 0);
  }
  v10 = *(_QWORD *)(a3 + 8);
  if (v8 != v10)
  {
    while (1)
    {
      v11 = **(unsigned __int16 **)(v8 + 16);
      v12 = v11 > 0x17;
      v13 = (1 << v11) & 0x83E000;
      if (v12 || v13 == 0)
        break;
      v8 = *(_QWORD *)(v8 + 8);
      if (v8 == v10)
      {
        v8 = *(_QWORD *)(a3 + 8);
        break;
      }
    }
  }
  v15 = *(_QWORD *)(v9 + 368);
  v16 = *(unsigned int *)(v9 + 384);
  if ((_DWORD)v16)
  {
    LODWORD(v17) = ((v8 >> 4) ^ (v8 >> 9)) & (v16 - 1);
    v18 = (uint64_t *)(v15 + 16 * v17);
    v19 = *v18;
    if (v8 == *v18)
      goto LABEL_18;
    v20 = 1;
    while (v19 != -4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v16 - 1);
      v19 = *(_QWORD *)(v15 + 16 * v17);
      if (v8 == v19)
      {
        v18 = (uint64_t *)(v15 + 16 * v17);
        goto LABEL_18;
      }
    }
  }
  v18 = (uint64_t *)(v15 + 16 * v16);
LABEL_18:
  v22 = v18[1];
  v23 = (v22 >> 1) & 3;
  if ((v23 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3))
  {
    if (a6 && (v24 = *(unsigned int *)(a5 + 8), (_DWORD)v24))
    {
      v25 = *(unint64_t **)a5;
      v26 = 8 * v24;
      while (1)
      {
        v27 = *v25;
        if (*v25 == v22)
          break;
        v28 = a2[1];
        result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)*a2 + 888) + 288);
        if ((*(_QWORD *)(result + 344) & 0xFFFFFFFFFFFFFFF9) == v27)
        {
          v29 = 0;
          v30 = *v25;
        }
        else
        {
          v29 = sub_1C499C548(result, *v25);
          result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)*a2 + 888) + 288);
          v30 = *(_QWORD *)(result + 344) & 0xFFFFFFFFFFFFFFF9;
        }
        if (v30 != v22)
        {
          result = sub_1C499C548(result, v22);
          if (v29)
          {
            v31 = result;
            if (result)
            {
              if (v29 == result)
              {
                if ((*(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) | (v27 >> 1) & 3) < (*(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24) | v23))
                  return result;
              }
              else
              {
                v32 = *(_QWORD *)(v28 + 896);
                llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v32);
                result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v32 + 1320), v29, v31);
                if ((result & 1) != 0)
                  return result;
              }
            }
          }
        }
        ++v25;
        v26 -= 8;
        if (!v26)
          goto LABEL_34;
      }
    }
    else
    {
LABEL_34:
      v33 = *(unsigned int *)(a5 + 8);
      if (v33 >= *(_DWORD *)(a5 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v33 + 1, 8);
        LODWORD(v33) = *(_DWORD *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v33) = v22;
      ++*(_DWORD *)(a5 + 8);
    }
  }
  return result;
}

uint64_t sub_1C4A089AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  void **v32;
  unint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  _QWORD *v43;
  int v44;
  unint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  _QWORD *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  unint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned __int16 *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int *v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  __int16 v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  int v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  size_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unsigned int v112;
  int v114;
  int v115;
  _BYTE *v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  int v126;
  _QWORD *v127;
  uint64_t v128;
  void **v129;
  _DWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *__p;
  unsigned int *v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD **v141;
  _QWORD *v142;
  uint64_t v143;
  void *p_base;
  uint64_t v145;
  void *__base;
  uint64_t v147;
  _BYTE v148[32];
  void **v149;
  uint64_t v150;
  _QWORD v151[3];

  v151[1] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v4)
  {
LABEL_5:
    v134 = 0;
    v135 = 0;
    __p = &v138;
    v137 = 0;
    v139 = 0;
    v140 = 0;
    v138 = &v140;
    v7 = operator new();
    *(_QWORD *)v7 = 0;
    v133 = 0;
    *(_QWORD *)(v7 + 8) = v134;
    v134 = 0;
    v8 = (int)v137;
    *(_DWORD *)(v7 + 16) = v135;
    LODWORD(v135) = 0;
    *(_QWORD *)(v7 + 24) = v7 + 40;
    v128 = v7 + 24;
    v129 = (void **)(v7 + 40);
    *(_QWORD *)(v7 + 32) = 0;
    if (v8)
      sub_1C4964480(v128, (const void **)&__p);
    *(_DWORD *)(v7 + 48) = 0;
    v9 = (_QWORD *)(v7 + 56);
    *(_QWORD *)(v7 + 40) = v7 + 56;
    *(_DWORD *)(v7 + 52) = 0;
    if ((_DWORD)v139)
      sub_1C4964480((uint64_t)v129, (const void **)&v138);
    v10 = (uint64_t *)v138;
    *v9 = v140;
    if (v10 != &v140)
      free(v10);
    v130 = (_DWORD *)(v7 + 48);
    if (__p != &v138)
      free(__p);
    MEMORY[0x1CAA32FB4](v133, 8);
    v132 = *(_QWORD *)(a1 + 80);
    *v9 = v132;
    v11 = a2 + 48;
    v12 = *(_QWORD *)(a2 + 56);
    v131 = a1;
    v149 = (void **)v151;
    v150 = 0x100000000;
    if (v12 != a2 + 48)
    {
      v13 = 0;
      while (1)
      {
        v133 = 0;
        if (!v12 || (v14 = v12, (*(_BYTE *)v12 & 4) == 0))
        {
          v14 = v12;
          if ((*(_WORD *)(v12 + 44) & 8) != 0)
          {
            v14 = v12;
            do
              v14 = *(_QWORD *)(v14 + 8);
            while ((*(_WORD *)(v14 + 44) & 8) != 0);
          }
        }
        v15 = *(_QWORD *)(v14 + 8);
        v133 = v12;
        if (**(unsigned __int16 **)(v12 + 16) - 13 <= 4)
        {
          v16 = v150;
          if (v150 >= (unint64_t)HIDWORD(v150))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v149, (uint64_t)v151, v150 + 1, 8);
            v16 = v150;
          }
          v149[v16] = (void *)v12;
          LODWORD(v150) = v150 + 1;
          goto LABEL_72;
        }
        v17 = *(_WORD *)(v12 + 44);
        v18 = v12;
        if ((v17 & 4) != 0)
        {
          do
            v18 = *(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v18 + 44) & 4) != 0);
        }
        if ((v17 & 8) != 0)
        {
          do
            v12 = *(_QWORD *)(v12 + 8);
          while ((*(_WORD *)(v12 + 44) & 8) != 0);
        }
        v19 = *(_QWORD *)(v12 + 8);
        if (v18 != v19)
        {
          do
          {
            v20 = **(unsigned __int16 **)(v18 + 16);
            v21 = v20 > 0x17;
            v22 = (1 << v20) & 0x83E000;
            if (v21 || v22 == 0)
              goto LABEL_32;
            v18 = *(_QWORD *)(v18 + 8);
          }
          while (v18 != v19);
          v18 = *(_QWORD *)(v12 + 8);
        }
LABEL_32:
        v24 = *(_QWORD *)(v132 + 288);
        v25 = *(_QWORD *)(v24 + 368);
        v26 = *(unsigned int *)(v24 + 384);
        if ((_DWORD)v26)
        {
          LODWORD(v27) = ((v18 >> 4) ^ (v18 >> 9)) & (v26 - 1);
          v28 = (uint64_t *)(v25 + 16 * v27);
          v29 = *v28;
          if (v18 != *v28)
          {
            v56 = 1;
            do
            {
              if (v29 == -4096)
                goto LABEL_79;
              v57 = v27 + v56++;
              v27 = v57 & (v26 - 1);
              v29 = *(_QWORD *)(v25 + 16 * v27);
            }
            while (v18 != v29);
            v28 = (uint64_t *)(v25 + 16 * v27);
          }
        }
        else
        {
LABEL_79:
          v28 = (uint64_t *)(v25 + 16 * v26);
        }
        v30 = v28[1];
        if ((_DWORD)v150)
        {
          v31 = v149;
          v32 = &v149[v150];
          while (1)
          {
            __base = 0;
            __base = *v31;
            v33 = *(unsigned int *)(v7 + 32);
            if (v33 >= *(unsigned int *)(v7 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v128, (uint64_t)v129, v33 + 1, 8);
              v33 = *(unsigned int *)(v7 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v33) = v30;
            ++*(_DWORD *)(v7 + 32);
            v34 = *(_DWORD *)(v7 + 16);
            if (!v34)
              break;
            v35 = v34 - 1;
            v36 = ((__base >> 4) ^ (__base >> 9)) & v35;
            v37 = (_QWORD *)(*(_QWORD *)v7 + 16 * v36);
            v38 = (void *)*v37;
            if (__base != (void *)*v37)
            {
              v39 = 0;
              v40 = 1;
              while (v38 != (void *)-4096)
              {
                if (v39)
                  v41 = 0;
                else
                  v41 = v38 == (void *)-8192;
                if (v41)
                  v39 = v37;
                v42 = v36 + v40++;
                v36 = v42 & v35;
                v37 = (_QWORD *)(*(_QWORD *)v7 + 16 * v36);
                v38 = (void *)*v37;
                if (__base == (void *)*v37)
                  goto LABEL_53;
              }
              if (v39)
                v43 = v39;
              else
                v43 = v37;
              goto LABEL_52;
            }
LABEL_53:
            v44 = v13 + 1;
            *((_DWORD *)v37 + 2) = v13;
            ++v31;
            ++v13;
            if (v31 == v32)
              goto LABEL_54;
          }
          v43 = 0;
LABEL_52:
          v37 = sub_1C49D7988(v7, (uint64_t)&__base, (uint64_t *)&__base, v43);
          *v37 = __base;
          *((_DWORD *)v37 + 2) = 0;
          goto LABEL_53;
        }
        v44 = v13;
LABEL_54:
        LODWORD(v150) = 0;
        v45 = *(unsigned int *)(v7 + 32);
        if (v45 >= *(unsigned int *)(v7 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v128, (uint64_t)v129, v45 + 1, 8);
          v45 = *(unsigned int *)(v7 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v45) = v30;
        ++*(_DWORD *)(v7 + 32);
        v46 = *(_DWORD *)(v7 + 16);
        if (!v46)
          break;
        v47 = v46 - 1;
        v48 = ((v133 >> 4) ^ (v133 >> 9)) & v47;
        v49 = (_QWORD *)(*(_QWORD *)v7 + 16 * v48);
        v50 = *v49;
        if (v133 != *v49)
        {
          v51 = 0;
          v52 = 1;
          while (v50 != -4096)
          {
            if (v51)
              v53 = 0;
            else
              v53 = v50 == -8192;
            if (v53)
              v51 = v49;
            v54 = v48 + v52++;
            v48 = v54 & v47;
            v49 = (_QWORD *)(*(_QWORD *)v7 + 16 * v48);
            v50 = *v49;
            if (v133 == *v49)
              goto LABEL_71;
          }
          if (v51)
            v55 = v51;
          else
            v55 = v49;
          goto LABEL_70;
        }
LABEL_71:
        v13 = v44 + 1;
        *((_DWORD *)v49 + 2) = v44;
LABEL_72:
        v12 = v15;
        if (v15 == v11)
        {
          if (!(_DWORD)v150)
            goto LABEL_102;
          v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v132 + 288) + 392) + 16 * *(unsigned int *)(a2 + 24) + 8);
          v59 = (uint64_t *)v149;
          v60 = (uint64_t *)&v149[v150];
          while (1)
          {
            v133 = *v59;
            v61 = *(unsigned int *)(v7 + 32);
            if (v61 >= *(unsigned int *)(v7 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v128, (uint64_t)v129, v61 + 1, 8);
              v61 = *(unsigned int *)(v7 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v61) = v58;
            ++*(_DWORD *)(v7 + 32);
            v62 = *(_DWORD *)(v7 + 16);
            if (!v62)
              break;
            v63 = v62 - 1;
            v64 = ((v133 >> 4) ^ (v133 >> 9)) & v63;
            v65 = (_QWORD *)(*(_QWORD *)v7 + 16 * v64);
            v66 = *v65;
            if (v133 != *v65)
            {
              v67 = 0;
              v68 = 1;
              while (v66 != -4096)
              {
                if (v67)
                  v69 = 0;
                else
                  v69 = v66 == -8192;
                if (v69)
                  v67 = v65;
                v70 = v64 + v68++;
                v64 = v70 & v63;
                v65 = (_QWORD *)(*(_QWORD *)v7 + 16 * v64);
                v66 = *v65;
                if (v133 == *v65)
                  goto LABEL_100;
              }
              if (v67)
                v71 = v67;
              else
                v71 = v65;
              goto LABEL_99;
            }
LABEL_100:
            *((_DWORD *)v65 + 2) = v13++;
            if (++v59 == v60)
            {
              LODWORD(v150) = 0;
              goto LABEL_102;
            }
          }
          v71 = 0;
LABEL_99:
          v65 = sub_1C49D7988(v7, (uint64_t)&v133, &v133, v71);
          *v65 = v133;
          *((_DWORD *)v65 + 2) = 0;
          goto LABEL_100;
        }
      }
      v55 = 0;
LABEL_70:
      v49 = sub_1C49D7988(v7, (uint64_t)&v133, &v133, v55);
      *v49 = v133;
      *((_DWORD *)v49 + 2) = 0;
      goto LABEL_71;
    }
LABEL_102:
    v133 = 0;
    v134 = 0;
    LODWORD(v135) = 0;
    v137 = 0;
    v138 = 0;
    __p = 0;
    v72 = *(_QWORD *)(a2 + 56);
    if (v72 != v11)
    {
      while (1)
      {
        v73 = *(unsigned __int16 **)(v72 + 16);
        if ((v73[10] & 4) == 0)
          goto LABEL_115;
        v74 = sub_1C4C915C4(*v73);
        if ((v74 & 0xFF00000000) == 0)
          goto LABEL_115;
        v75 = v74 - 64;
        if (((v74 - 64) > 0x3A || ((1 << (v74 - 64)) & 0x60001F460000001) == 0)
          && ((v74 - 147) > 0x14 || ((1 << (v74 + 109)) & 0x1E0001) == 0))
        {
          goto LABEL_115;
        }
        if (v75 <= 0x3A)
        {
          if (((1 << v75) & 0x60001F040000000) != 0)
            goto LABEL_115;
          if (((1 << v75) & 0x420000001) != 0)
            goto LABEL_122;
        }
        if ((v74 - 164) < 4)
        {
LABEL_122:
          LODWORD(__base) = *(_DWORD *)(*(_QWORD *)(v72 + 32) + 4);
          sub_1C4977DA4((uint64_t)&v133, &__base);
        }
LABEL_115:
        if ((*(_BYTE *)v72 & 4) == 0)
        {
          while ((*(_WORD *)(v72 + 44) & 8) != 0)
            v72 = *(_QWORD *)(v72 + 8);
        }
        v72 = *(_QWORD *)(v72 + 8);
        if (v72 == v11)
        {
          v79 = (unsigned int *)__p;
          v78 = v137;
          goto LABEL_126;
        }
      }
    }
    v78 = 0;
    v79 = 0;
LABEL_126:
    v80 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40);
    v141 = &v142;
    v142 = 0;
    v143 = 0;
    p_base = &__base;
    v145 = 0;
    if (v79 != v78)
    {
      while (1)
      {
        v81 = *v79;
        __base = v148;
        v147 = 0x400000000;
        v82 = (uint64_t *)((v81 & 0x80000000) != 0
                        ? *(_QWORD *)(v80 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(v80 + 272) + 8 * v81);
        v83 = *v82;
        if (*v82)
          break;
LABEL_163:
        if (__base != v148)
          free(__base);
        if (++v79 == v78)
        {
          v105 = v142;
          goto LABEL_170;
        }
      }
      while ((*(_BYTE *)(v83 + 3) & 1) != 0)
      {
        v83 = *(_QWORD *)(v83 + 24);
        if (!v83)
          goto LABEL_163;
      }
      v84 = 0;
      v85 = *(_QWORD *)(v83 + 8);
LABEL_134:
      if (*(_QWORD *)(v85 + 24) != a2 || **(unsigned __int16 **)(v85 + 16) - 13 < 5)
        goto LABEL_135;
      v86 = *(_WORD *)(v85 + 44);
      v87 = v85;
      if ((v86 & 4) != 0)
      {
        do
          v87 = *(_QWORD *)v87 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v87 + 44) & 4) != 0);
      }
      if ((v86 & 8) != 0)
      {
        do
          v85 = *(_QWORD *)(v85 + 8);
        while ((*(_WORD *)(v85 + 44) & 8) != 0);
      }
      v88 = *(_QWORD *)(v85 + 8);
      if (v87 != v88)
      {
        while (1)
        {
          v89 = **(unsigned __int16 **)(v87 + 16);
          v21 = v89 > 0x17;
          v90 = (1 << v89) & 0x83E000;
          if (v21 || v90 == 0)
            break;
          v87 = *(_QWORD *)(v87 + 8);
          if (v87 == v88)
          {
            v87 = v88;
            break;
          }
        }
      }
      v92 = *(_QWORD *)(v132 + 288);
      v93 = *(_QWORD *)(v92 + 368);
      v94 = *(unsigned int *)(v92 + 384);
      if ((_DWORD)v94)
      {
        LODWORD(v95) = ((v87 >> 4) ^ (v87 >> 9)) & (v94 - 1);
        v96 = (uint64_t *)(v93 + 16 * v95);
        v97 = *v96;
        if (v87 == *v96)
          goto LABEL_150;
        v100 = 1;
        while (v97 != -4096)
        {
          v99 = v95 + v100++;
          v95 = v99 & (v94 - 1);
          v97 = *(_QWORD *)(v93 + 16 * v95);
          if (v87 == v97)
          {
            v96 = (uint64_t *)(v93 + 16 * v95);
            goto LABEL_150;
          }
        }
      }
      v96 = (uint64_t *)(v93 + 16 * v94);
LABEL_150:
      v98 = v96[1];
      if (v84 >= HIDWORD(v147))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v148, v84 + 1, 8);
        v84 = v147;
      }
      *((_QWORD *)__base + v84) = v98;
      v84 = v147 + 1;
      LODWORD(v147) = v147 + 1;
      v85 = *(_QWORD *)(v83 + 8);
LABEL_135:
      while (1)
      {
        v83 = *(_QWORD *)(v83 + 24);
        if (!v83)
          break;
        if ((*(_BYTE *)(v83 + 3) & 1) == 0 && *(_QWORD *)(v83 + 8) != v85)
        {
          v85 = *(_QWORD *)(v83 + 8);
          goto LABEL_134;
        }
      }
      if (v84)
      {
        if (v84 != 1)
          qsort(__base, v84, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4A07FB0);
        v101 = (uint64_t *)__base;
        sub_1C4A09820((uint64_t)&v141, __base, (uint64_t *)__base);
        if ((v102 & 1) != 0)
        {
          v103 = *v101;
          v104 = v145;
          if (v145 >= (unint64_t)HIDWORD(v145))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_base, (uint64_t)&__base, v145 + 1, 8);
            v104 = v145;
          }
          *((_QWORD *)p_base + v104) = v103;
          LODWORD(v145) = v145 + 1;
        }
      }
      goto LABEL_163;
    }
    v105 = 0;
LABEL_170:
    sub_1C47655E8((uint64_t)&v141, v105);
    v142 = 0;
    v143 = 0;
    v141 = &v142;
    __base = v148;
    v147 = 0;
    v106 = (uint64_t *)(v7 + 48);
    if ((_DWORD)v145)
    {
      sub_1C4964480((uint64_t)&__base, (const void **)&p_base);
      v114 = v147;
      if (!(_DWORD)v147)
      {
        v116 = __base;
        *v130 = 0;
        v107 = v131;
        if (v116 == v148)
        {
LABEL_174:
          if (p_base != &__base)
            free(p_base);
          sub_1C47655E8((uint64_t)&v141, v142);
          if (__p)
          {
            v137 = (unsigned int *)__p;
            operator delete(__p);
          }
          MEMORY[0x1CAA32FB4](v133, 4);
          if (v149 != v151)
            free(v149);
          v109 = *(unsigned int *)(v107 + 8);
          if (v109 >= *(_DWORD *)(v107 + 12))
          {
            v133 = 0;
            v110 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(v107, 0, 16, (unint64_t *)&v133);
            v117 = *(unsigned int *)(v107 + 8);
            v118 = &v110[2 * v117];
            *v118 = a2;
            v118[1] = v7;
            v119 = *(_QWORD **)v107;
            if ((_DWORD)v117)
            {
              v120 = &v119[2 * v117];
              v121 = v110;
              do
              {
                *v121 = *v119;
                v122 = v119[1];
                v119[1] = 0;
                v121[1] = v122;
                v119 += 2;
                v121 += 2;
              }
              while (v119 != v120);
              v123 = *(_QWORD *)v107 - 8;
              v124 = 16 * v117;
              do
              {
                v125 = *(_QWORD **)(v123 + v124);
                *(_QWORD *)(v123 + v124) = 0;
                if (v125)
                {
                  v127 = sub_1C4A097C8(v125);
                  MEMORY[0x1CAA32FC0](v127, 0x10E0C4078A40482);
                }
                v124 -= 16;
              }
              while (v124);
              v119 = *(_QWORD **)v107;
            }
            v126 = v133;
            if (v119 != (_QWORD *)(v107 + 16))
              free(v119);
            *(_QWORD *)v107 = v110;
            v112 = *(_DWORD *)(v107 + 8) + 1;
            *(_DWORD *)(v107 + 12) = v126;
          }
          else
          {
            v110 = *(_QWORD **)v107;
            v111 = (_QWORD *)(*(_QWORD *)v107 + 16 * v109);
            *v111 = a2;
            v111[1] = v7;
            v112 = v109 + 1;
          }
          *(_DWORD *)(v107 + 8) = v112;
          v5 = (uint64_t)&v110[2 * v112 - 1];
          return *(_QWORD *)v5;
        }
        free(v116);
LABEL_172:
        v108 = *v130;
        if (v108 >= 2)
          qsort(*v129, v108, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C4A07FB0);
        goto LABEL_174;
      }
      v106 = &v147;
      if (*v129 != (void *)(v7 + 56))
      {
        free(*v129);
        v114 = v147;
      }
      *(_QWORD *)(v7 + 40) = __base;
      v115 = HIDWORD(v147);
      *(_DWORD *)(v7 + 48) = v114;
      *(_DWORD *)(v7 + 52) = v115;
    }
    *(_DWORD *)v106 = 0;
    v107 = v131;
    goto LABEL_172;
  }
  v5 = *(_QWORD *)a1 + 8;
  v6 = 16 * v4;
  while (*(_QWORD *)(v5 - 8) != a2)
  {
    v5 += 16;
    v6 -= 16;
    if (!v6)
      goto LABEL_5;
  }
  return *(_QWORD *)v5;
}

uint64_t sub_1C4A095F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  v9 = *((_DWORD *)v5 + 2) + 128;
  if (*((_DWORD *)a1 + 2) - 1 < v9)
    v9 = *((_DWORD *)a1 + 2) - 1;
  return *(_QWORD *)(a1[3] + 8 * v9);
}

uint64_t sub_1C4A09674(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  BOOL v9;
  int v10;

  if ((a2 & 0x80000000) != 0)
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v3 = *v2;
  if (!v3)
    return 0;
  if ((*(_BYTE *)(v3 + 3) & 1) == 0)
  {
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3 || (*(_BYTE *)(v3 + 3) & 1) == 0)
      return 0;
  }
  LODWORD(result) = 0;
  v5 = *(_QWORD *)(v3 + 8);
LABEL_11:
  v6 = **(_DWORD **)(v5 + 32);
  v7 = ((v6 >> 8) & 0xFFF) - 25;
  v8 = BYTE1(v6) - 1;
  if (v7 < 0x10)
    v8 = BYTE1(v6) - 25;
  v9 = ((v6 >> 8) & 0xFFF) == 0;
  v10 = 1 << v8;
  if (v9)
    v10 = 1;
  if (v7 >= 0x10)
    v10 = 0;
  result = v10 | result;
  while (1)
  {
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3 || (*(_BYTE *)(v3 + 3) & 1) == 0)
      return result;
    if (*(_QWORD *)(v3 + 8) != v5)
    {
      v5 = *(_QWORD *)(v3 + 8);
      goto LABEL_11;
    }
  }
}

BOOL sub_1C4A09728(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1C49C802C(a2);
  if ((v6 & 0xFF00000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 864);
    LODWORD(v6) = ~(-1 << (*(_DWORD *)(*(_QWORD *)(v7 + 264)
                                     + 24
                                     * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 880)
                                                                                                + 24)
                                                                                    + 16
                                                                                    * (*(_DWORD *)(a2 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                            + 24)
                                      + *(_DWORD *)(v7 + 272)
                                      * ((*(_QWORD *)(v7 + 248) - *(_QWORD *)(v7 + 240)) >> 3))) >> 5));
  }
  return (v6 & ~a3) != 0;
}

_QWORD *sub_1C4A097C8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v3 = a1 + 5;
  v2 = (_QWORD *)a1[5];
  if (v2 != v3 + 2)
    free(v2);
  v4 = (_QWORD *)a1[3];
  if (v4 != v3)
    free(v4);
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

uint64_t *sub_1C4A09820(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v12;

  v5 = (uint64_t **)sub_1C4A098CC(a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    v8 = v12;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v7 = v6;
    v9 = **(_QWORD **)a1;
    v10 = v6;
    if (v9)
    {
      *(_QWORD *)a1 = v9;
      v10 = *v7;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v10);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

_QWORD *sub_1C4A098CC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (v4[4] >> 1) & 3 | *(_DWORD *)((v4[4] & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v6 >= v8)
          break;
        v4 = (_QWORD *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      result = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = result;
  }
LABEL_10:
  *a2 = v7;
  return result;
}

unint64_t sub_1C4A0993C(uint64_t *a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t v5;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unsigned int **v25;
  _DWORD **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ***v30;
  int64_t v31;
  uint64_t ***v32;
  char *v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t **v38;
  char *v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int **v49;
  unsigned int v50;
  BOOL v51;
  unsigned int **v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t **v64;
  char *v65;
  unsigned int v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  char *v70;
  void *v71;
  _DWORD *v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int v78;
  int v79;
  int v80;
  void *v81;
  int *v82;
  _BYTE *v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned __int8 v89;
  int v90;
  unsigned int v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v99;
  unsigned int v100;
  int v101;
  BOOL v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  unsigned int v118;
  uint64_t v119;
  void *v120;
  int *v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  unsigned int v127;
  _DWORD *v128;
  char *__p;
  void *v130;
  uint64_t v131;
  int v132;
  void *v133[2];
  uint64_t v134;
  uint64_t v135;
  _QWORD v136[2];

  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5)
  {
    v123 = a1[99];
    v124 = a1[98];
    if (v124 == v123)
    {
      sub_1C4A0A724(*(_QWORD *)a2, (uint64_t *)(*(_QWORD *)a2 + 8 * v5), 126 - 2 * __clz(v5), 1);
      LODWORD(v5) = *(_DWORD *)(a2 + 8);
    }
    if ((*(_DWORD *)a3 + 1) < 0xFF0)
      v7 = *(_DWORD *)a3 + 1;
    else
      v7 = 0;
    if (*((_BYTE *)a3 + 4))
      LODWORD(v8) = v7;
    else
      LODWORD(v8) = 0;
    if ((_DWORD)v5)
    {
      v122 = v8;
      __p = 0;
      v9 = 0;
      v10 = 0;
      v11 = *(uint64_t **)a2;
      v12 = *(_QWORD *)a2 + 8 * v5;
      v13 = (uint64_t)a1;
      do
      {
        v14 = *v11;
        if (v9 >= v10)
        {
          v16 = (v9 - __p) >> 3;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61)
            abort();
          if ((v10 - __p) >> 2 > v17)
            v17 = (v10 - __p) >> 2;
          if ((unint64_t)(v10 - __p) >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
          {
            if (v18 >> 61)
              sub_1C4764EE4();
            v19 = (char *)operator new(8 * v18);
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[8 * v16];
          *(_QWORD *)v20 = v14;
          v21 = v20 + 8;
          while (v9 != __p)
          {
            v22 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *((_QWORD *)v20 - 1) = v22;
            v20 -= 8;
          }
          v10 = &v19[8 * v18];
          if (__p)
            operator delete(__p);
          v15 = (_BOOL8)v20;
          v9 = v21;
        }
        else
        {
          *(_QWORD *)v9 = v14;
          v9 += 8;
          v15 = (_BOOL8)__p;
        }
        __p = (char *)v15;
        v130 = a1;
        sub_1C4A0C4E4(v15, (uint64_t)v9, (uint64_t *)&v130, (uint64_t)&v9[-v15] >> 3);
        ++v11;
      }
      while (v11 != (uint64_t *)v12);
      v23 = __p;
      if (__p != v9)
      {
        v23 = __p;
        v24 = *(_QWORD *)a2;
        v25 = (unsigned int **)(a1 + 123);
        v127 = v122;
        v118 = v122;
        v126 = (uint64_t)(a1 + 31);
        while (1)
        {
          if (v124 == v123)
            v26 = (_DWORD **)v24;
          else
            v26 = (_DWORD **)v23;
          v128 = *v26;
          v130 = (void *)v13;
          v27 = v9 - v23;
          if (v9 - v23 >= 9)
          {
            v28 = 0;
            v29 = v27 >> 3;
            v30 = (uint64_t ***)__p;
            v119 = *(_QWORD *)__p;
            v120 = (void *)v24;
            v31 = (unint64_t)((v27 >> 3) - 2) >> 1;
            do
            {
              v32 = &v30[v28];
              v35 = v32[1];
              v33 = (char *)(v32 + 1);
              v34 = v35;
              v36 = (2 * v28) | 1;
              v37 = 2 * v28 + 2;
              if (v37 < v29)
              {
                v38 = (uint64_t **)*((_QWORD *)v33 + 1);
                if (sub_1C4A0C584((uint64_t)v130, v34, v38))
                {
                  v34 = v38;
                  v33 += 8;
                  v36 = v37;
                }
              }
              *v30 = v34;
              v30 = (uint64_t ***)v33;
              v28 = v36;
            }
            while (v36 <= v31);
            v39 = v9 - 8;
            if (v33 == v9 - 8)
            {
              *(_QWORD *)v33 = v119;
            }
            else
            {
              *(_QWORD *)v33 = *(_QWORD *)v39;
              *(_QWORD *)v39 = v119;
              sub_1C4A0C4E4((_BOOL8)__p, (uint64_t)(v33 + 8), (uint64_t *)&v130, (v33 + 8 - __p) >> 3);
            }
            v13 = (uint64_t)a1;
            v24 = (unint64_t)v120;
            v25 = (unsigned int **)(a1 + 123);
          }
          v40 = v127;
          if (a4)
            v40 = v122;
          v127 = v40;
          v41 = *(_DWORD *)(v13 + 776);
          if (!v41)
            goto LABEL_168;
          v42 = *(unsigned int *)(*(_QWORD *)v128 + 112);
          v43 = *(_QWORD *)(v13 + 760);
          v44 = v41 - 1;
          v45 = v44 & (37 * v42);
          v46 = *(_DWORD *)(v43 + 4 * v45);
          if ((_DWORD)v42 != v46)
          {
            v105 = 1;
            do
            {
              if (v46 == -1)
                goto LABEL_168;
              v106 = v45 + v105++;
              v45 = v106 & v44;
              v46 = *(_DWORD *)(v43 + 4 * v45);
            }
            while ((_DWORD)v42 != v46);
          }
          v47 = *v25;
          if (!*v25)
            goto LABEL_61;
          v48 = *v25;
          v49 = v25;
          do
          {
            v50 = v48[8];
            v51 = v50 >= v42;
            if (v50 >= v42)
              v52 = (unsigned int **)v48;
            else
              v52 = (unsigned int **)(v48 + 2);
            if (v51)
              v49 = (unsigned int **)v48;
            v48 = *v52;
          }
          while (*v52);
          if (v49 != v25 && v42 >= *((_DWORD *)v49 + 8))
          {
            v70 = (char *)(v49 + 5);
          }
          else
          {
LABEL_61:
            v130 = 0;
            v131 = 0;
            v132 = 0;
            v133[1] = 0;
            v134 = 0;
            v133[0] = 0;
            v53 = *(_QWORD *)(v13 + 880);
            if ((v42 & 0x80000000) != 0)
              v54 = (uint64_t *)(*(_QWORD *)(v53 + 24) + 16 * (v42 & 0x7FFFFFFF) + 8);
            else
              v54 = (uint64_t *)(*(_QWORD *)(v53 + 272) + 8 * v42);
            v55 = *v54;
            if (*v54)
            {
              while ((*(_BYTE *)(v55 + 3) & 1) != 0)
              {
                v55 = *(_QWORD *)(v55 + 24);
                if (!v55)
                  goto LABEL_90;
              }
              v56 = *(_QWORD *)(v55 + 8);
LABEL_69:
              v135 = 0;
              v136[0] = v56;
              if (sub_1C4A07178(a1 + 89, v136, &v135))
              {
                v57 = *(unsigned int *)(v56 + 40);
                if ((_DWORD)v57)
                {
                  v58 = *(_QWORD *)(v56 + 32);
                  v59 = 32 * v57;
                  v60 = (_DWORD *)(v58 + 4);
                  do
                  {
                    if ((*(v60 - 1) & 0x10000FF) == 0 && *v60 != (_DWORD)v42)
                    {
                      v61 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 880) + 24)
                                                                        + 16 * (*v60 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                + 24);
                      v62 = (v61 - 14) > 0x32
                         || ((1 << (v61 - 14)) & 0x4000000004001) == 0;
                      if (!v62 || v61 == 105 || v61 == 127)
                      {
                        LODWORD(v136[0]) = *v60;
                        sub_1C4977DA4((uint64_t)&v130, v136);
                      }
                    }
                    v60 += 8;
                    v59 -= 32;
                  }
                  while (v59);
                }
              }
              v63 = *(_QWORD *)(v55 + 8);
              v25 = (unsigned int **)(a1 + 123);
              while (1)
              {
                v55 = *(_QWORD *)(v55 + 24);
                if (!v55)
                  break;
                if ((*(_BYTE *)(v55 + 3) & 1) == 0)
                {
                  v56 = *(_QWORD *)(v55 + 8);
                  if (v56 != v63)
                    goto LABEL_69;
                }
              }
              v47 = (unsigned int *)a1[123];
            }
LABEL_90:
            v64 = (uint64_t **)v25;
            v65 = (char *)v25;
            if (v47)
            {
              do
              {
                while (1)
                {
                  v65 = (char *)v47;
                  v66 = v47[8];
                  if (v66 <= v42)
                    break;
                  v47 = *(unsigned int **)v65;
                  v64 = (uint64_t **)v65;
                  if (!*(_QWORD *)v65)
                    goto LABEL_97;
                }
                if (v66 >= v42)
                  goto LABEL_100;
                v47 = (unsigned int *)*((_QWORD *)v65 + 1);
              }
              while (v47);
              v64 = (uint64_t **)(v65 + 8);
            }
LABEL_97:
            v67 = v65;
            v65 = (char *)operator new(0x58uLL);
            *((_DWORD *)v65 + 8) = v42;
            *(_QWORD *)v65 = 0;
            *((_QWORD *)v65 + 1) = 0;
            *(_OWORD *)(v65 + 40) = 0u;
            *(_OWORD *)(v65 + 56) = 0u;
            *(_OWORD *)(v65 + 72) = 0u;
            *((_QWORD *)v65 + 2) = v67;
            *v64 = (uint64_t *)v65;
            v68 = **(_QWORD **)(v13 + 976);
            v69 = (uint64_t *)v65;
            if (v68)
            {
              *(_QWORD *)(v13 + 976) = v68;
              v69 = *v64;
            }
            sub_1C4768E74(*(uint64_t **)(v13 + 984), v69);
            ++*(_QWORD *)(v13 + 992);
LABEL_100:
            v70 = v65 + 40;
            MEMORY[0x1CAA32FB4](*((_QWORD *)v65 + 5), 4);
            *((_QWORD *)v65 + 5) = v130;
            *((_QWORD *)v65 + 6) = v131;
            v130 = 0;
            v131 = 0;
            *((_DWORD *)v65 + 14) = v132;
            v132 = 0;
            v71 = (void *)*((_QWORD *)v65 + 8);
            if (v71)
            {
              *((_QWORD *)v65 + 9) = v71;
              operator delete(v71);
              v71 = v130;
            }
            *((_OWORD *)v65 + 4) = *(_OWORD *)v133;
            *((_QWORD *)v65 + 10) = v134;
            v133[1] = 0;
            v134 = 0;
            v133[0] = 0;
            MEMORY[0x1CAA32FB4](v71, 4);
          }
          v72 = (_DWORD *)*((_QWORD *)v70 + 3);
          v73 = (_DWORD *)*((_QWORD *)v70 + 4);
          if (v72 == v73)
            goto LABEL_168;
          v130 = 0;
          v131 = 0;
          v132 = 0;
          v133[1] = 0;
          v134 = 0;
          v133[0] = 0;
          do
          {
            v74 = *(_QWORD *)(v13 + 472);
            v75 = *(unsigned int *)(v13 + 488);
            if ((_DWORD)v75)
            {
              LODWORD(v76) = (v75 - 1) & (37 * *v72);
              v77 = (int *)(v74 + 8 * v76);
              v78 = *v77;
              if (*v72 == *v77)
                goto LABEL_107;
              v79 = 1;
              while (v78 != -1)
              {
                v80 = v76 + v79++;
                v76 = v80 & (v75 - 1);
                v78 = *(_DWORD *)(v74 + 8 * v76);
                if (*v72 == v78)
                {
                  v77 = (int *)(v74 + 8 * v76);
                  goto LABEL_107;
                }
              }
            }
            v77 = (int *)(v74 + 8 * v75);
LABEL_107:
            if ((int *)(v74 + 8 * v75) != v77)
            {
              v136[0] = v77[1] | 0x100000000;
              sub_1C4A0C7B8((uint64_t)&v130, v136);
            }
            ++v72;
          }
          while (v72 != v73);
          v81 = v133[1];
          if (v133[0] == v133[1])
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            if (v133[1])
              goto LABEL_149;
          }
          else
          {
            sub_1C4A0CC74(&v130);
            v82 = (int *)v133[0];
            v83 = v133[1];
            v133[0] = 0;
            v133[1] = 0;
            v134 = 0;
            std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
            v84 = *v82;
            v121 = v82;
            if (v83 - (_BYTE *)v82 == 4)
            {
              v85 = *(_DWORD *)(v13 + 840);
              v86 = (v84 - v85) & ~((v84 - v85) >> 31);
              v87 = v85 + v84;
              goto LABEL_125;
            }
            v91 = *((_DWORD *)v83 - 1);
            v92 = *(_DWORD *)(v13 + 840);
            if (v92 + v84 < v91)
            {
              v93 = v24;
              goto LABEL_138;
            }
            v86 = (v84 - v92) & ~((v84 - v92) >> 31);
            v87 = v92 + v91;
LABEL_125:
            v93 = v24;
            if (v87 >= 0x1000)
              v94 = 4096;
            else
              v94 = v87;
            if (*(_BYTE *)(v13 + 1000))
              v95 = 1 << v128[2];
            else
              v95 = 1;
            v96 = (v86 + v95 - 1) & -v95;
            if (v96 >= 0xFF0)
              v97 = 0;
            else
              v97 = v96;
            if (v96 <= 0xFEF && v94 >= v97)
            {
              if (sub_1C4A0A2FC(v126, v128, v97))
              {
                v99 = v95 + v96;
                while (1)
                {
                  v88 = 0;
                  v90 = 0;
                  v97 = v99 >= 0xFF0 ? 0 : v99;
                  v89 = 0;
                  if (v99 > 0xFEF || v94 < v97)
                    break;
                  v99 += v95;
                  if (!sub_1C4A0A2FC(v126, v128, v97))
                    goto LABEL_147;
                }
              }
              else
              {
LABEL_147:
                sub_1C4A0A5B8(v126, v128, v97);
                v90 = v97 & 0xFFFFFF00;
                v88 = 0x100000000;
                v89 = v97;
              }
            }
            else
            {
LABEL_138:
              v90 = 0;
              v89 = 0;
              v88 = 0;
            }
            operator delete(v121);
            v81 = v133[0];
            v24 = v93;
            v25 = (unsigned int **)(a1 + 123);
            if (v133[0])
            {
LABEL_149:
              v133[1] = v81;
              operator delete(v81);
            }
          }
          MEMORY[0x1CAA32FB4](v130, 4);
          if ((v88 & 0x100000000) != 0)
          {
            v100 = v128[2] + 2;
            if (v128[2] == 3)
              v101 = 8;
            else
              v101 = 16;
            if (v100 < 5)
              v101 = 4;
            v102 = v100 >= 3;
            if (v128[2] == 1)
              v103 = 2;
            else
              v103 = v101;
            if (!v102)
              v103 = 1;
            v104 = v118;
            if (v118 <= v89 + (v90 & 0xFFFFFF00) + v103 - 1)
              v104 = v89 + (v90 & 0xFFFFFF00) + v103 - 1;
            v118 = v104;
            goto LABEL_191;
          }
LABEL_168:
          if (*(_BYTE *)(v13 + 1000))
            v107 = 1 << v128[2];
          else
            v107 = 1;
          v108 = (v127 + v107 - 1) & -v107;
          if (v108 <= 0xFEF)
          {
            while (sub_1C4A0A2FC(v126, v128, v108))
            {
              v108 = (v108 + v107);
              if (v108 > 0xFEF)
                goto LABEL_191;
            }
            sub_1C4A0A5B8(v126, v128, v108);
            v109 = v128[2] + 2;
            if (v109 >= 3)
            {
              if (v128[2] == 3)
                v111 = 8;
              else
                v111 = 16;
              if (v109 < 5)
                v111 = 4;
              if (v128[2] == 1)
                v110 = 2;
              else
                v110 = v111;
            }
            else
            {
              v110 = 1;
            }
            v112 = v118;
            v113 = v110 + v108 - 1;
            if (v118 <= v113)
              v112 = v113;
            v118 = v112;
            if ((v107 + v108) >= 0xFF0)
              v114 = 0;
            else
              v114 = v107 + v108;
            v127 = v114;
          }
LABEL_191:
          v24 += 8 * (v124 == v123);
          v9 -= 8;
          MEMORY[0x1CAA32FB4](0, 8);
          v23 = __p;
          if (__p == v9)
          {
            if (__p)
              goto LABEL_193;
            goto LABEL_194;
          }
        }
      }
      v118 = v122;
      if (__p)
LABEL_193:
        operator delete(v23);
LABEL_194:
      v115 = 0x100000000;
      LODWORD(v8) = v118;
    }
    else
    {
      v115 = 0x100000000;
    }
  }
  else
  {
    v8 = *a3;
    v115 = *a3 & 0xFFFFFFFF00000000;
  }
  return v115 | v8;
}

uint64_t sub_1C4A0A2FC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v6;
  int v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  llvm::LiveIntervalUnion::Query *v12;
  int v13;
  _BOOL8 v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  llvm::LiveIntervalUnion::Query *v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v37;

  if (!*(_DWORD *)(*(_QWORD *)a2 + 8))
    return 0;
  v3 = a3;
  v6 = a2[2] + 2;
  if (v6 >= 3)
  {
    if (a2[2] == 1)
    {
      v7 = 2;
      if (!*(_BYTE *)(a1 + 256))
      {
LABEL_16:
        v11 = v7 - 1;
        do
        {
          v12 = (llvm::LiveIntervalUnion::Query *)sub_1C4A0CCE0(a1, *(_QWORD *)a2, (v3 << 32) | 0x51);
          v13 = llvm::LiveIntervalUnion::Query::collectInterferingVRegs(v12, 1u);
          v14 = v13 != 0;
          v3 = (v3 + 1);
          if (v13)
            v15 = 1;
          else
            v15 = v11 == 0;
          --v11;
        }
        while (!v15);
        return v14;
      }
    }
    else
    {
      v8 = v6 >= 5;
      v9 = v6 == 5;
      if (!*(_BYTE *)(a1 + 256))
      {
        v10 = 1;
        if (!v9)
          v10 = 2;
        if (!v8)
          v10 = 0;
        v7 = dword_1C6613C98[v10];
        goto LABEL_16;
      }
      if (v6 >= 5)
      {
        if (a2[2] == 3)
          v7 = 8;
        else
          v7 = 16;
      }
      else
      {
        v7 = 4;
      }
    }
  }
  else
  {
    v7 = 1;
    if (!*(_BYTE *)(a1 + 256))
      goto LABEL_16;
  }
  v37 = a1 + 104;
  v16 = 1;
  v17 = a3;
  v14 = 1;
  while (1)
  {
    v18 = 4 * v16;
    if ((4 * v16) < 0x21)
      v19 = 84;
    else
      v19 = 85;
    if (v18 < 0x11)
      v19 = 83;
    if (v18 < 9)
      v19 = 82;
    v20 = v18 >= 5 ? v19 : 81;
    v21 = (llvm::LiveIntervalUnion::Query *)sub_1C4A0CCE0(a1, *(_QWORD *)a2, v20 | (v17 << 32));
    if (llvm::LiveIntervalUnion::Query::collectInterferingVRegs(v21, 1u))
      break;
    v22 = a2[2] + 2;
    if (v22 >= 3)
    {
      if (a2[2] == 3)
        v24 = 84;
      else
        v24 = 85;
      if (v22 < 5)
        v24 = 83;
      if (a2[2] == 1)
        v23 = 82;
      else
        v23 = v24;
    }
    else
    {
      v23 = 81;
    }
    if (v23 != (_DWORD)v20)
    {
      v25 = v17 >> (v20 - 81);
      v26 = *(_QWORD *)(v37 + 16 * (v20 - 81) + 8);
      v27 = *(_DWORD *)(v26 + 216 * v25 + 204);
      if (v27)
      {
        v28 = **(_QWORD ***)a2;
        v29 = v26 + 216 * v25;
        v30 = v27 - 1;
        v31 = v29 + 8 + 16 * v30 + 8;
        v32 = (_QWORD *)(v29 + 8 + 8 * v30 + 96);
        if (!*(_DWORD *)(v29 + 200))
          v32 = (_QWORD *)v31;
        if ((*(_DWORD *)((*v28 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v28 >> 1) & 3) <= ((*v32 >> 1) & 3 | *(_DWORD *)((*v32 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          v33 = v28[3 * *(unsigned int *)(*(_QWORD *)a2 + 8) - 2];
          if ((*(_DWORD *)((*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)(v29 + 8) >> 1) & 3) <= ((v33 >> 1) & 3 | *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24)))
            return 1;
        }
      }
    }
    v17 = (v16 + v17);
    if ((int)v17 >= v7 + (int)v3)
    {
      v34 = v3 & (-2 * v16);
      v35 = v16 <= 15;
      if (v16 <= 15)
        v16 *= 2;
      else
        v16 = -1;
      if (v35)
        v17 = v34;
      else
        v17 = 0xFFFFFFFFLL;
      if (v35)
      {
        LODWORD(v3) = v34;
      }
      else
      {
        v7 = -1;
        LODWORD(v3) = -1;
      }
    }
    if (v16 == -1 && (_DWORD)v17 == -1)
      return 0;
  }
  return v14;
}

void sub_1C4A0A5B8(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  const llvm::LiveInterval *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  int v22;

  v22 = *(_DWORD *)(*(_QWORD *)a2 + 112);
  sub_1C4A0CDB4(a1 + 224, &v22)[1] = a3;
  v6 = a2[2];
  v7 = *(_DWORD *)(a1 + 248);
  v8 = v6;
  if (v7 <= a3)
  {
    sub_1C4A0738C(a1, 2 * v7);
    v8 = a2[2];
  }
  v9 = v8 + 2;
  if (v9 >= 3)
  {
    if (v9 == 3)
    {
      v10 = 1;
    }
    else
    {
      v11 = v9 >= 5;
      v12 = v9 == 5;
      v10 = 3;
      if (!v12)
        v10 = 4;
      if (!v11)
        v10 = 2;
    }
  }
  else
  {
    v10 = 0;
  }
  v13 = *(const llvm::LiveInterval **)a2;
  if (*(_BYTE *)(a1 + 256))
  {
    llvm::LiveIntervalUnion::unify((llvm::LiveIntervalUnion *)(*(_QWORD *)(a1 + 16 * v6 + 112) + 216 * (a3 >> v6)), *(const llvm::LiveInterval **)a2, *(uint64_t ***)a2);
  }
  else
  {
    v14 = dword_1C6613CA4[v10];
    v15 = a3;
    do
    {
      llvm::LiveIntervalUnion::unify((llvm::LiveIntervalUnion *)(*(_QWORD *)(a1 + 112) + 216 * v15++), v13, (uint64_t **)v13);
      --v14;
    }
    while (v14);
  }
  v16 = a2[2] + 2;
  if (a2[2] == 3)
    v17 = 8;
  else
    v17 = 16;
  if (v16 >= 5)
    v18 = v17;
  else
    v18 = 4;
  v19 = v16 >= 3;
  if (a2[2] == 1)
    v20 = 2;
  else
    v20 = v18;
  if (!v19)
    v20 = 1;
  v21 = a3 + v20 - 1;
  if (*(_DWORD *)(a1 + 252) > v21)
    v21 = *(_DWORD *)(a1 + 252);
  *(_DWORD *)(a1 + 252) = v21;
}

unint64_t sub_1C4A0A724(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  _DWORD **v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t *v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  _QWORD *v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v66;
  int v67;
  uint64_t *i;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  BOOL v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  int v77;
  _DWORD *v78;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  _QWORD *v88;
  unsigned int v89;
  int v90;
  _DWORD **v91;
  unsigned int v92;
  unsigned int v93;
  BOOL v94;
  int v95;
  _DWORD *v96;
  _DWORD *v97;
  unsigned int v98;
  int v99;
  int v100;
  BOOL v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  _DWORD **v105;
  unint64_t v106;
  _DWORD *v107;
  _DWORD *v108;
  unsigned int v109;
  int v110;
  int v111;
  BOOL v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t *v116;
  BOOL v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _DWORD *v122;
  _DWORD *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  _QWORD *v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  int64_t v133;
  int64_t v134;
  int64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _DWORD *v138;
  unsigned int v139;
  int v140;
  BOOL v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  BOOL v146;
  _DWORD **v147;
  _DWORD *v148;
  _DWORD *v149;
  unsigned int v150;
  int v151;
  BOOL v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  int v158;
  unsigned int v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  unsigned int v164;
  int v165;
  BOOL v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  BOOL v170;
  BOOL v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  _DWORD *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  unsigned int v181;
  int v182;
  BOOL v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  BOOL v187;
  BOOL v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t *v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int v197;
  unint64_t v198;
  unsigned int v199;
  int v200;
  unint64_t v201;
  unsigned int v202;
  unsigned int v203;
  _DWORD **v205;
  _DWORD *v206;
  _DWORD *v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  BOOL v212;
  int v213;
  int v214;
  unsigned int v215;
  _QWORD *v216;
  _DWORD *v217;
  _DWORD *v218;
  unsigned int v219;
  unsigned int v220;
  BOOL v221;
  BOOL v222;
  _DWORD *v223;
  _DWORD *v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  BOOL v232;
  _DWORD *v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  BOOL v240;
  _DWORD *v241;
  int v242;
  int v243;
  BOOL v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;

  v6 = (_DWORD **)result;
LABEL_2:
  v7 = a2 - 1;
  v8 = (unint64_t)v6;
  while (2)
  {
    v6 = (_DWORD **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v96 = (_DWORD *)*(a2 - 1);
        v97 = *(_DWORD **)v8;
        v98 = v96[2] + 2;
        if (v96[2] == 3)
          v99 = 84;
        else
          v99 = 85;
        if (v98 >= 5)
          v100 = v99;
        else
          v100 = 83;
        v101 = v98 >= 3;
        if (v96[2] == 1)
          v102 = 82;
        else
          v102 = v100;
        if (!v101)
          v102 = 81;
        v103 = v97[2] + 2;
        if (v103 >= 3)
        {
          if (v97[2] == 1)
          {
            v104 = 82;
          }
          else if (v103 >= 5)
          {
            if (v97[2] == 3)
              v104 = 84;
            else
              v104 = 85;
          }
          else
          {
            v104 = 83;
          }
        }
        else
        {
          v104 = 81;
        }
        if (v102 > v104 || v102 == v104 && *(_DWORD *)(*(_QWORD *)v96 + 112) < *(_DWORD *)(*(_QWORD *)v97 + 112))
        {
          *(_QWORD *)v8 = v96;
          *(a2 - 1) = (uint64_t)v97;
        }
        return result;
      case 3:
        return (unint64_t)sub_1C4A0BA50((_DWORD **)v8, v8 + 8, a2 - 1);
      case 4:
        return (unint64_t)sub_1C4A0C2CC((_DWORD **)v8, v8 + 8, (uint64_t *)(v8 + 16), a2 - 1);
      case 5:
        v105 = (_DWORD **)(v8 + 16);
        v106 = v8 + 24;
        result = (unint64_t)sub_1C4A0C2CC((_DWORD **)v8, v8 + 8, (uint64_t *)(v8 + 16), (uint64_t *)(v8 + 24));
        v107 = (_DWORD *)*(a2 - 1);
        v108 = *(_DWORD **)(v8 + 24);
        v109 = v107[2] + 2;
        if (v107[2] == 3)
          v110 = 84;
        else
          v110 = 85;
        if (v109 >= 5)
          v111 = v110;
        else
          v111 = 83;
        v112 = v109 >= 3;
        if (v107[2] == 1)
          v113 = 82;
        else
          v113 = v111;
        if (!v112)
          v113 = 81;
        v114 = v108[2] + 2;
        if (v114 >= 3)
        {
          if (v108[2] == 1)
          {
            v115 = 82;
          }
          else
          {
            v222 = v114 >= 5;
            if (v108[2] == 3)
              v115 = 84;
            else
              v115 = 85;
            if (!v222)
              v115 = 83;
          }
        }
        else
        {
          v115 = 81;
        }
        if (v113 > v115 || v113 == v115 && *(_DWORD *)(*(_QWORD *)v107 + 112) < *(_DWORD *)(*(_QWORD *)v108 + 112))
        {
          *(_QWORD *)v106 = v107;
          *(a2 - 1) = (uint64_t)v108;
          v223 = *(_DWORD **)v106;
          v224 = *v105;
          v225 = *(_DWORD *)(*(_QWORD *)v106 + 8) + 2;
          if (*(_DWORD *)(*(_QWORD *)v106 + 8) == 3)
            v226 = 84;
          else
            v226 = 85;
          if (v225 >= 5)
            v227 = v226;
          else
            v227 = 83;
          if (*(_DWORD *)(*(_QWORD *)v106 + 8) == 1)
            v228 = 82;
          else
            v228 = v227;
          if (v225 >= 3)
            v229 = v228;
          else
            v229 = 81;
          v230 = v224[2] + 2;
          if (v230 >= 3)
          {
            if (v224[2] == 1)
            {
              v231 = 82;
            }
            else
            {
              v232 = v230 >= 5;
              if (v224[2] == 3)
                v231 = 84;
              else
                v231 = 85;
              if (!v232)
                v231 = 83;
            }
          }
          else
          {
            v231 = 81;
          }
          if (v229 > v231
            || v229 == v231 && *(_DWORD *)(*(_QWORD *)v223 + 112) < *(_DWORD *)(*(_QWORD *)v224 + 112))
          {
            *v105 = v223;
            *(_QWORD *)v106 = v224;
            v233 = *(_DWORD **)(v8 + 8);
            if (v225 == 5)
              v234 = 84;
            else
              v234 = 85;
            if (v225 >= 5)
              v235 = v234;
            else
              v235 = 83;
            if (v225 == 3)
              v236 = 82;
            else
              v236 = v235;
            if (v225 >= 3)
              v237 = v236;
            else
              v237 = 81;
            v238 = v233[2] + 2;
            if (v238 >= 3)
            {
              if (v233[2] == 1)
              {
                v239 = 82;
              }
              else
              {
                v240 = v238 >= 5;
                if (v233[2] == 3)
                  v239 = 84;
                else
                  v239 = 85;
                if (!v240)
                  v239 = 83;
              }
            }
            else
            {
              v239 = 81;
            }
            if (v237 > v239
              || v237 == v239 && *(_DWORD *)(*(_QWORD *)v223 + 112) < *(_DWORD *)(*(_QWORD *)v233 + 112))
            {
              *(_QWORD *)(v8 + 8) = v223;
              *(_QWORD *)(v8 + 16) = v233;
              v241 = *(_DWORD **)v8;
              if (v225 == 5)
                v242 = 84;
              else
                v242 = 85;
              if (v225 >= 5)
                v243 = v242;
              else
                v243 = 83;
              v244 = v225 >= 3;
              if (v225 == 3)
                v245 = 82;
              else
                v245 = v243;
              if (!v244)
                v245 = 81;
              v246 = v241[2] + 2;
              if (v246 >= 3)
              {
                if (v241[2] == 1)
                {
                  v247 = 82;
                }
                else if (v246 >= 5)
                {
                  if (v241[2] == 3)
                    v247 = 84;
                  else
                    v247 = 85;
                }
                else
                {
                  v247 = 83;
                }
              }
              else
              {
                v247 = 81;
              }
              if (v245 > v247
                || v245 == v247 && *(_DWORD *)(*(_QWORD *)v223 + 112) < *(_DWORD *)(*(_QWORD *)v241 + 112))
              {
                *(_QWORD *)v8 = v223;
                *(_QWORD *)(v8 + 8) = v241;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v116 = (uint64_t *)(v8 + 8);
          v118 = (uint64_t *)v8 == a2 || v116 == a2;
          if ((a4 & 1) == 0)
          {
            if (!v118)
            {
              do
              {
                v205 = v6;
                v6 = (_DWORD **)v116;
                v207 = *v205;
                v206 = v205[1];
                v208 = v206[2] + 2;
                if (v206[2] == 3)
                  v209 = 84;
                else
                  v209 = 85;
                if (v208 < 5)
                  v209 = 83;
                if (v206[2] == 1)
                  v209 = 82;
                if (v208 < 3)
                  v209 = 81;
                v210 = v207[2] + 2;
                if (v210 >= 3)
                {
                  if (v207[2] == 1)
                  {
                    v211 = 82;
                  }
                  else
                  {
                    v212 = v210 >= 5;
                    if (v207[2] == 3)
                      v211 = 84;
                    else
                      v211 = 85;
                    if (!v212)
                      v211 = 83;
                  }
                }
                else
                {
                  v211 = 81;
                }
                if (v209 > v211
                  || v209 == v211 && *(_DWORD *)(*(_QWORD *)v206 + 112) < *(_DWORD *)(*(_QWORD *)v207 + 112))
                {
                  if (v208 < 3)
                    v213 = 81;
                  else
                    v213 = 82;
                  if (v206[2] == 3)
                    v214 = 84;
                  else
                    v214 = 85;
                  if (v208 < 5)
                    v214 = 83;
                  if (v208 >= 4)
                    v215 = v214;
                  else
                    v215 = v213;
                  while (1)
                  {
                    v216 = v205;
                    v217 = v207;
                    v218 = *--v205;
                    v207 = v218;
                    v205[2] = v217;
                    v219 = v218[2] + 2;
                    if (v219 >= 3)
                    {
                      if (v219 == 3)
                      {
                        v220 = 82;
                      }
                      else
                      {
                        v221 = v219 >= 5;
                        if (v219 == 5)
                          v220 = 84;
                        else
                          v220 = 85;
                        if (!v221)
                          v220 = 83;
                      }
                    }
                    else
                    {
                      v220 = 81;
                    }
                    if (v215 <= v220)
                    {
                      if (v215 != v220)
                        break;
                      result = *(unsigned int *)(*(_QWORD *)v206 + 112);
                      if (result >= *(_DWORD *)(*(_QWORD *)v207 + 112))
                        break;
                    }
                  }
                  *v216 = v206;
                }
                v116 = (uint64_t *)(v6 + 1);
              }
              while (v6 + 1 != (_DWORD **)a2);
            }
            return result;
          }
          if (v118)
            return result;
          v119 = 0;
          v120 = v8;
          while (1)
          {
            v121 = v120;
            v120 = (unint64_t)v116;
            v123 = *(_DWORD **)v121;
            v122 = *(_DWORD **)(v121 + 8);
            v124 = v122[2] + 2;
            if (v122[2] == 3)
              LODWORD(result) = 84;
            else
              LODWORD(result) = 85;
            if (v124 < 5)
              LODWORD(result) = 83;
            if (v122[2] == 1)
              LODWORD(result) = 82;
            if (v124 >= 3)
              result = result;
            else
              result = 81;
            v125 = v123[2] + 2;
            if (v125 >= 3)
            {
              if (v123[2] == 1)
              {
                v126 = 82;
              }
              else if (v125 >= 5)
              {
                if (v123[2] == 3)
                  v126 = 84;
                else
                  v126 = 85;
              }
              else
              {
                v126 = 83;
              }
            }
            else
            {
              v126 = 81;
            }
            if (result > v126
              || (_DWORD)result == v126
              && (result = *(unsigned int *)(*(_QWORD *)v123 + 112),
                  *(_DWORD *)(*(_QWORD *)v122 + 112) < result))
            {
              *(_QWORD *)(v121 + 8) = v123;
              v127 = (_QWORD *)v8;
              if (v121 == v8)
                goto LABEL_355;
              if (v124 < 3)
                v128 = 81;
              else
                v128 = 82;
              if (v124 == 5)
                v129 = 84;
              else
                v129 = 85;
              if (v124 < 5)
                v129 = 83;
              if (v124 >= 4)
                v128 = v129;
              v130 = v119;
              while (1)
              {
                result = *(_QWORD *)(v8 + v130 - 8);
                v131 = *(_DWORD *)(result + 8) + 2;
                if (v131 >= 3)
                {
                  if (*(_DWORD *)(result + 8) == 1)
                  {
                    v132 = 82;
                  }
                  else if (v131 >= 5)
                  {
                    v132 = *(_DWORD *)(result + 8) == 3 ? 84 : 85;
                  }
                  else
                  {
                    v132 = 83;
                  }
                }
                else
                {
                  v132 = 81;
                }
                if (v128 <= v132
                  && (v128 != v132 || *(_DWORD *)(*(_QWORD *)v122 + 112) >= *(_DWORD *)(*(_QWORD *)result + 112)))
                {
                  break;
                }
                *(_QWORD *)(v8 + v130) = result;
                v130 -= 8;
                if (!v130)
                {
                  v127 = (_QWORD *)v8;
                  goto LABEL_355;
                }
              }
              v127 = (_QWORD *)(v8 + v130);
LABEL_355:
              *v127 = v122;
            }
            v116 = (uint64_t *)(v120 + 8);
            v119 += 8;
            if ((uint64_t *)(v120 + 8) == a2)
              return result;
          }
        }
        if (!a3)
        {
          if ((uint64_t *)v8 == a2)
            return result;
          v133 = (unint64_t)(v10 - 2) >> 1;
          v134 = v133;
          do
          {
            v135 = v134;
            if (v133 >= v134)
            {
              v136 = (2 * v134) | 1;
              v137 = (_QWORD *)(v8 + 8 * v136);
              if (2 * v135 + 2 < v10)
              {
                v138 = (_DWORD *)v137[1];
                v139 = *(_DWORD *)(*v137 + 8) + 2;
                if (*(_DWORD *)(*v137 + 8) == 3)
                  v140 = 84;
                else
                  v140 = 85;
                if (v139 < 5)
                  v140 = 83;
                v141 = v139 >= 3;
                if (*(_DWORD *)(*v137 + 8) == 1)
                  v142 = 82;
                else
                  v142 = v140;
                if (!v141)
                  v142 = 81;
                v143 = v138[2] + 2;
                if (v143 >= 3)
                {
                  if (v138[2] == 1)
                  {
                    v144 = 82;
                  }
                  else
                  {
                    v145 = v143 >= 5;
                    if (v138[2] == 3)
                      v144 = 84;
                    else
                      v144 = 85;
                    if (!v145)
                      v144 = 83;
                  }
                }
                else
                {
                  v144 = 81;
                }
                if (v142 > v144
                  || (*(_DWORD *)(*(_QWORD *)*v137 + 112) < *(_DWORD *)(*(_QWORD *)v138 + 112)
                    ? (v146 = v142 == v144)
                    : (v146 = 0),
                      v146))
                {
                  ++v137;
                  v136 = 2 * v135 + 2;
                }
              }
              v147 = (_DWORD **)(v8 + 8 * v135);
              v148 = (_DWORD *)*v137;
              v149 = *v147;
              v150 = *(_DWORD *)(*v137 + 8) + 2;
              if (*(_DWORD *)(*v137 + 8) == 3)
                v151 = 84;
              else
                v151 = 85;
              if (v150 < 5)
                v151 = 83;
              v152 = v150 >= 3;
              v153 = *(_DWORD *)(*v137 + 8) == 1 ? 82 : v151;
              v154 = v152 ? v153 : 81;
              v155 = v149[2] + 2;
              if (v155 >= 3)
              {
                if (v149[2] == 1)
                {
                  v156 = 82;
                }
                else if (v155 >= 5)
                {
                  v156 = v149[2] == 3 ? 84 : 85;
                }
                else
                {
                  v156 = 83;
                }
              }
              else
              {
                v156 = 81;
              }
              if (v154 <= v156
                && (v154 != v156 || *(_DWORD *)(*(_QWORD *)v148 + 112) >= *(_DWORD *)(*(_QWORD *)v149 + 112)))
              {
                if (v155 < 3)
                  v157 = 81;
                else
                  v157 = 82;
                if (v149[2] == 3)
                  v158 = 84;
                else
                  v158 = 85;
                if (v155 < 5)
                  v158 = 83;
                if (v155 >= 4)
                  v159 = v158;
                else
                  v159 = v157;
                while (1)
                {
                  v160 = v137;
                  *v147 = v148;
                  if (v133 < v136)
                    break;
                  v161 = 2 * v136;
                  v136 = (2 * v136) | 1;
                  v137 = (_QWORD *)(v8 + 8 * v136);
                  v162 = v161 + 2;
                  if (v162 < v10)
                  {
                    v163 = (_DWORD *)v137[1];
                    v164 = *(_DWORD *)(*v137 + 8) + 2;
                    if (*(_DWORD *)(*v137 + 8) == 3)
                      v165 = 84;
                    else
                      v165 = 85;
                    if (v164 < 5)
                      v165 = 83;
                    v166 = v164 >= 3;
                    if (*(_DWORD *)(*v137 + 8) == 1)
                      v167 = 82;
                    else
                      v167 = v165;
                    if (!v166)
                      v167 = 81;
                    v168 = v163[2] + 2;
                    if (v168 >= 3)
                    {
                      if (v163[2] == 1)
                      {
                        v169 = 82;
                      }
                      else
                      {
                        v170 = v168 >= 5;
                        if (v163[2] == 3)
                          v169 = 84;
                        else
                          v169 = 85;
                        if (!v170)
                          v169 = 83;
                      }
                    }
                    else
                    {
                      v169 = 81;
                    }
                    if (v167 > v169
                      || (*(_DWORD *)(*(_QWORD *)*v137 + 112) < *(_DWORD *)(*(_QWORD *)v163 + 112)
                        ? (v171 = v167 == v169)
                        : (v171 = 0),
                          v171))
                    {
                      ++v137;
                      v136 = v162;
                    }
                  }
                  v148 = (_DWORD *)*v137;
                  v172 = *(_DWORD *)(*v137 + 8) + 2;
                  if (v172 >= 3)
                  {
                    if (*(_DWORD *)(*v137 + 8) == 1)
                    {
                      v173 = 82;
                    }
                    else if (v172 >= 5)
                    {
                      if (*(_DWORD *)(*v137 + 8) == 3)
                        v173 = 84;
                      else
                        v173 = 85;
                    }
                    else
                    {
                      v173 = 83;
                    }
                    if (v173 > v159)
                      break;
                  }
                  else
                  {
                    v173 = 81;
                  }
                  v147 = (_DWORD **)v160;
                  if (v173 == v159)
                  {
                    v147 = (_DWORD **)v160;
                    if (*(_DWORD *)(*(_QWORD *)v148 + 112) < *(_DWORD *)(*(_QWORD *)v149 + 112))
                      break;
                  }
                }
                *v160 = v149;
              }
            }
            v134 = v135 - 1;
          }
          while (v135);
          while (2)
          {
            v174 = 0;
            v175 = *(_DWORD **)v8;
            v176 = (uint64_t *)v8;
            do
            {
              v177 = v176;
              v176 += v174 + 1;
              v178 = 2 * v174;
              v174 = (2 * v174) | 1;
              v179 = v178 + 2;
              if (v179 < v10)
              {
                v180 = (_DWORD *)v176[1];
                v181 = *(_DWORD *)(*v176 + 8) + 2;
                if (*(_DWORD *)(*v176 + 8) == 3)
                  v182 = 84;
                else
                  v182 = 85;
                if (v181 < 5)
                  v182 = 83;
                v183 = v181 >= 3;
                if (*(_DWORD *)(*v176 + 8) == 1)
                  v184 = 82;
                else
                  v184 = v182;
                if (!v183)
                  v184 = 81;
                v185 = v180[2] + 2;
                if (v185 >= 3)
                {
                  if (v180[2] == 1)
                  {
                    v186 = 82;
                  }
                  else
                  {
                    v187 = v185 >= 5;
                    if (v180[2] == 3)
                      v186 = 84;
                    else
                      v186 = 85;
                    if (!v187)
                      v186 = 83;
                  }
                }
                else
                {
                  v186 = 81;
                }
                if (v184 > v186
                  || (*(_DWORD *)(*(_QWORD *)*v176 + 112) < *(_DWORD *)(*(_QWORD *)v180 + 112)
                    ? (v188 = v184 == v186)
                    : (v188 = 0),
                      v188))
                {
                  ++v176;
                  v174 = v179;
                }
              }
              result = *v176;
              *v177 = *v176;
            }
            while (v174 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
            if (v176 == --a2)
            {
              *v176 = (uint64_t)v175;
            }
            else
            {
              *v176 = *a2;
              *a2 = (uint64_t)v175;
              v189 = (uint64_t)v176 - v8 + 8;
              if (v189 >= 9)
              {
                v190 = ((unint64_t)v189 >> 3) - 2;
                v191 = v190 >> 1;
                v192 = (unint64_t *)(v8 + 8 * (v190 >> 1));
                result = *v192;
                v193 = *(_DWORD *)(*v192 + 8) + 2;
                if (v193 >= 3)
                {
                  if (*(_DWORD *)(*v192 + 8) == 1)
                  {
                    v194 = 82;
                  }
                  else if (v193 >= 5)
                  {
                    v194 = *(_DWORD *)(*v192 + 8) == 3 ? 84 : 85;
                  }
                  else
                  {
                    v194 = 83;
                  }
                }
                else
                {
                  v194 = 81;
                }
                v195 = *v176;
                v196 = *(_DWORD *)(*v176 + 8) + 2;
                if (v196 >= 3)
                {
                  if (*(_DWORD *)(*v176 + 8) == 1)
                  {
                    v197 = 82;
                  }
                  else
                  {
                    if (*(_DWORD *)(*v176 + 8) == 3)
                      v197 = 84;
                    else
                      v197 = 85;
                    if (v196 < 5)
                      v197 = 83;
                  }
                }
                else
                {
                  v197 = 81;
                }
                if (v194 > v197
                  || v194 == v197 && *(_DWORD *)(*(_QWORD *)result + 112) < *(_DWORD *)(*(_QWORD *)v195 + 112))
                {
                  *v176 = result;
                  if (v190 < 2)
                  {
LABEL_518:
                    v198 = (unint64_t)v192;
LABEL_542:
                    *(_QWORD *)v198 = v195;
                    goto LABEL_543;
                  }
                  if (v196 < 3)
                    v199 = 81;
                  else
                    v199 = 82;
                  if (v196 == 5)
                    v200 = 84;
                  else
                    v200 = 85;
                  if (v196 < 5)
                    v200 = 83;
                  if (v196 >= 4)
                    v199 = v200;
                  while (2)
                  {
                    result = v191 - 1;
                    v191 = (v191 - 1) >> 1;
                    v198 = v8 + 8 * v191;
                    v201 = *(_QWORD *)v198;
                    v202 = *(_DWORD *)(*(_QWORD *)v198 + 8) + 2;
                    if (v202 >= 3)
                    {
                      if (*(_DWORD *)(*(_QWORD *)v198 + 8) == 1)
                      {
                        v203 = 82;
                      }
                      else if (v202 >= 5)
                      {
                        if (*(_DWORD *)(*(_QWORD *)v198 + 8) == 3)
                          v203 = 84;
                        else
                          v203 = 85;
                      }
                      else
                      {
                        v203 = 83;
                      }
                      if (v203 <= v199)
                        goto LABEL_539;
                    }
                    else
                    {
                      v203 = 81;
LABEL_539:
                      if (v203 != v199 || *(_DWORD *)(*(_QWORD *)v201 + 112) >= *(_DWORD *)(*(_QWORD *)v195 + 112))
                        goto LABEL_518;
                    }
                    *v192 = v201;
                    v192 = (unint64_t *)(v8 + 8 * v191);
                    if (result <= 1)
                      goto LABEL_542;
                    continue;
                  }
                }
              }
            }
LABEL_543:
            if (v10-- <= 2)
              return result;
            continue;
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (_QWORD *)(v8 + 8 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          sub_1C4A0BA50(&v6[(unint64_t)v10 >> 1], (uint64_t)v6, a2 - 1);
        }
        else
        {
          sub_1C4A0BA50(v6, (uint64_t)&v6[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C4A0BA50(v6 + 1, (uint64_t)(v12 - 1), a2 - 2);
          sub_1C4A0BA50(v6 + 2, (uint64_t)&v6[v11 + 1], a2 - 3);
          sub_1C4A0BA50((_DWORD **)v12 - 1, (uint64_t)v12, (uint64_t *)&v6[v11 + 1]);
          v13 = *v6;
          *v6 = (_DWORD *)*v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v6;
        if ((a4 & 1) == 0)
        {
          v16 = *(v6 - 1);
          v17 = v16[2] + 2;
          if (v16[2] == 3)
            v18 = 84;
          else
            v18 = 85;
          if (v17 < 5)
            v18 = 83;
          v19 = v17 >= 3;
          if (v16[2] == 1)
            v20 = 82;
          else
            v20 = v18;
          if (v19)
            v21 = v20;
          else
            v21 = 81;
          v15 = v14[2] + 2;
          if (v14[2] == 3)
            v22 = 84;
          else
            v22 = 85;
          if (v15 < 5)
            v22 = 83;
          result = 82;
          if (v14[2] == 1)
            v22 = 82;
          if (v15 >= 3)
            v23 = v22;
          else
            v23 = 81;
          if (v21 > v23)
            goto LABEL_35;
          v24 = *(_DWORD *)(*(_QWORD *)v14 + 112);
          if (v21 == v23 && *(_DWORD *)(*(_QWORD *)v16 + 112) < v24)
            goto LABEL_35;
          if (v15 >= 3)
          {
            if (v14[2] == 1)
            {
              v56 = 82;
            }
            else if (v15 >= 5)
            {
              if (v14[2] == 3)
                v56 = 84;
              else
                v56 = 85;
            }
            else
            {
              v56 = 83;
            }
          }
          else
          {
            v56 = 81;
          }
          v57 = *v7;
          v58 = *(_DWORD *)(*v7 + 8);
          if ((v58 + 2) >= 3)
          {
            if (v58 == 1)
            {
              v59 = 82;
            }
            else if ((v58 + 2) >= 5)
            {
              if (v58 == 3)
                v59 = 84;
              else
                v59 = 85;
            }
            else
            {
              v59 = 83;
            }
          }
          else
          {
            v59 = 81;
          }
          if (v56 > v59 || v56 == v59 && v24 < *(_DWORD *)(*(_QWORD *)v57 + 112))
          {
            if (v15 < 3)
              v60 = 81;
            else
              v60 = 82;
            if (v14[2] == 3)
              v61 = 84;
            else
              v61 = 85;
            if (v15 < 5)
              v61 = 83;
            if (v15 >= 4)
              v60 = v61;
            v62 = (uint64_t *)(v6 + 1);
            do
            {
              v8 = (unint64_t)v62;
              v63 = *v62;
              v64 = *(_DWORD *)(*v62 + 8) + 2;
              if (v64 >= 3)
              {
                if (v64 == 3)
                {
                  v65 = 82;
                }
                else
                {
                  v66 = v64 >= 5;
                  if (v64 == 5)
                    v67 = 84;
                  else
                    v67 = 85;
                  if (v66)
                    v65 = v67;
                  else
                    v65 = 83;
                }
              }
              else
              {
                v65 = 81;
              }
              if (v60 > v65)
                break;
              v62 = (uint64_t *)(v8 + 8);
            }
            while (v60 != v65 || v24 >= *(_DWORD *)(*(_QWORD *)v63 + 112));
          }
          else
          {
            if (v15 < 3)
              v89 = 81;
            else
              v89 = 82;
            if (v14[2] == 3)
              v90 = 84;
            else
              v90 = 85;
            if (v15 < 5)
              v90 = 83;
            if (v15 >= 4)
              v89 = v90;
            v91 = v6 + 1;
            do
            {
              v8 = (unint64_t)v91;
              if (v91 >= (_DWORD **)a2)
                break;
              v92 = (*v91)[2] + 2;
              if (v92 >= 3)
              {
                if (v92 == 3)
                {
                  v93 = 82;
                }
                else
                {
                  v94 = v92 >= 5;
                  v95 = v92 == 5 ? 84 : 85;
                  v93 = v94 ? v95 : 83;
                }
              }
              else
              {
                v93 = 81;
              }
              if (v89 > v93)
                break;
              v91 = (_DWORD **)(v8 + 8);
            }
            while (v89 != v93 || v24 >= *(_DWORD *)(**(_QWORD **)v8 + 112));
          }
          i = a2;
          if (v8 < (unint64_t)a2)
          {
            if (v15 < 3)
              v69 = 81;
            else
              v69 = 82;
            if (v14[2] == 3)
              v70 = 84;
            else
              v70 = 85;
            if (v15 < 5)
              v70 = 83;
            if (v15 < 4)
              v70 = v69;
            for (i = a2 - 1; ; --i)
            {
              v71 = v58 + 2;
              if (v71 == 5)
                v72 = 84;
              else
                v72 = 85;
              if (v71 < 5)
                v72 = 83;
              v73 = v71 >= 3;
              if (v71 == 3)
                v74 = 82;
              else
                v74 = v72;
              if (!v73)
                v74 = 81;
              if (v70 <= v74 && (v70 != v74 || v24 >= *(_DWORD *)(*(_QWORD *)v57 + 112)))
                break;
              v75 = *(i - 1);
              v57 = v75;
              v58 = *(_DWORD *)(v75 + 8);
            }
          }
          if (v8 < (unint64_t)i)
          {
            if (v15 < 3)
              v76 = 81;
            else
              v76 = 82;
            if (v14[2] == 3)
              v77 = 84;
            else
              v77 = 85;
            v78 = *(_DWORD **)v8;
            v79 = *i;
            if (v15 < 5)
              v77 = 83;
            if (v15 >= 4)
              v80 = v77;
            else
              v80 = v76;
            do
            {
              *(_QWORD *)v8 = v79;
              *i = (uint64_t)v78;
              v81 = v8 + 8;
              do
              {
                v8 = v81;
                v78 = *(_DWORD **)v81;
                v82 = *(_DWORD *)(*(_QWORD *)v81 + 8) + 2;
                if (v82 >= 3)
                {
                  if (*(_DWORD *)(*(_QWORD *)v81 + 8) == 1)
                  {
                    v83 = 82;
                  }
                  else
                  {
                    v84 = v82 >= 5;
                    if (*(_DWORD *)(*(_QWORD *)v81 + 8) == 3)
                      v83 = 84;
                    else
                      v83 = 85;
                    if (!v84)
                      v83 = 83;
                  }
                }
                else
                {
                  v83 = 81;
                }
                if (v80 > v83)
                  break;
                v81 += 8;
              }
              while (v80 != v83 || *(_DWORD *)(*(_QWORD *)v14 + 112) >= *(_DWORD *)(*(_QWORD *)v78 + 112));
              do
              {
                v85 = *--i;
                v79 = v85;
                v86 = *(_DWORD *)(v85 + 8) + 2;
                if (v86 >= 3)
                {
                  if (v86 == 3)
                  {
                    v87 = 82;
                  }
                  else if (v86 >= 5)
                  {
                    if (v86 == 5)
                      v87 = 84;
                    else
                      v87 = 85;
                  }
                  else
                  {
                    v87 = 83;
                  }
                }
                else
                {
                  v87 = 81;
                }
              }
              while (v80 > v87
                   || v80 == v87 && *(_DWORD *)(*(_QWORD *)v14 + 112) < *(_DWORD *)(*(_QWORD *)v79 + 112));
            }
            while (v8 < (unint64_t)i);
          }
          v88 = (_QWORD *)(v8 - 8);
          if ((_DWORD **)(v8 - 8) != v6)
            *v6 = (_DWORD *)*v88;
          a4 = 0;
          *v88 = v14;
          continue;
        }
        v15 = v14[2] + 2;
LABEL_35:
        if (v15 < 3)
          v25 = 81;
        else
          v25 = 82;
        if (v15 == 5)
          v26 = 84;
        else
          v26 = 85;
        if (v15 < 5)
          v26 = 83;
        if (v15 >= 4)
          v27 = v26;
        else
          v27 = v25;
        v28 = 1;
        while (2)
        {
          v29 = v6[v28];
          v30 = v29[2] + 2;
          if (v30 < 3)
          {
            v31 = 81;
            break;
          }
          if (v29[2] == 1)
          {
            v31 = 82;
          }
          else if (v30 >= 5)
          {
            if (v29[2] == 3)
              v31 = 84;
            else
              v31 = 85;
          }
          else
          {
            v31 = 83;
          }
          if (v31 > v27)
          {
LABEL_59:
            ++v28;
            continue;
          }
          break;
        }
        v32 = *(_DWORD *)(*(_QWORD *)v14 + 112);
        if (v31 == v27 && *(_DWORD *)(*(_QWORD *)v29 + 112) < v32)
          goto LABEL_59;
        v33 = (unint64_t)&v6[v28];
        v34 = a2 - 1;
        if (v28 != 1)
        {
          while (1)
          {
            v35 = v34;
            v36 = *v34;
            v37 = *(_DWORD *)(*v34 + 8) + 2;
            if (v37 >= 3)
            {
              if (*(_DWORD *)(*v34 + 8) == 1)
              {
                v38 = 82;
              }
              else
              {
                v39 = v37 >= 5;
                if (*(_DWORD *)(*v34 + 8) == 3)
                  v38 = 84;
                else
                  v38 = 85;
                if (!v39)
                  v38 = 83;
              }
              if (v38 > v27)
                goto LABEL_90;
            }
            else
            {
              v38 = 81;
            }
            --v34;
            if (v38 == v27 && *(_DWORD *)(*(_QWORD *)v36 + 112) < v32)
              goto LABEL_90;
          }
        }
        v40 = a2 - 1;
        while (v33 < (unint64_t)(v40 + 1))
        {
          v35 = v40;
          v41 = *v40;
          v42 = *(_DWORD *)(*v40 + 8) + 2;
          if (v42 >= 3)
          {
            if (*(_DWORD *)(*v40 + 8) == 1)
            {
              v43 = 82;
            }
            else
            {
              v44 = v42 >= 5;
              if (*(_DWORD *)(*v40 + 8) == 3)
                v43 = 84;
              else
                v43 = 85;
              if (!v44)
                v43 = 83;
            }
            if (v43 > v27)
              goto LABEL_90;
          }
          else
          {
            v43 = 81;
          }
          --v40;
          if (v43 == v27 && *(_DWORD *)(*(_QWORD *)v41 + 112) < v32)
            goto LABEL_90;
        }
        v35 = v40 + 1;
LABEL_90:
        if (v33 >= (unint64_t)v35)
        {
          v8 = v33;
          goto LABEL_122;
        }
        v45 = *v35;
        v8 = v33;
        v46 = v35;
        while (2)
        {
          *(_QWORD *)v8 = v45;
          v8 += 8;
          *v46 = (uint64_t)v29;
          while (2)
          {
            v29 = *(_DWORD **)v8;
            v47 = *(_DWORD *)(*(_QWORD *)v8 + 8) + 2;
            if (v47 < 3)
            {
              v48 = 81;
              break;
            }
            if (*(_DWORD *)(*(_QWORD *)v8 + 8) == 1)
            {
              v48 = 82;
            }
            else if (v47 >= 5)
            {
              if (*(_DWORD *)(*(_QWORD *)v8 + 8) == 3)
                v48 = 84;
              else
                v48 = 85;
            }
            else
            {
              v48 = 83;
            }
            if (v48 > v27)
            {
LABEL_105:
              v8 += 8;
              continue;
            }
            break;
          }
          v49 = *(_DWORD *)(*(_QWORD *)v14 + 112);
          if (v48 == v27 && *(_DWORD *)(*(_QWORD *)v29 + 112) < v49)
            goto LABEL_105;
          v50 = v46 - 1;
          while (2)
          {
            v46 = v50;
            v45 = *v50;
            v51 = *(_DWORD *)(*v50 + 8) + 2;
            if (v51 < 3)
            {
              v52 = 81;
              goto LABEL_117;
            }
            if (*(_DWORD *)(*v50 + 8) == 1)
            {
              v52 = 82;
            }
            else
            {
              v53 = v51 >= 5;
              if (*(_DWORD *)(*v50 + 8) == 3)
                v52 = 84;
              else
                v52 = 85;
              if (!v53)
                v52 = 83;
            }
            if (v52 <= v27)
            {
LABEL_117:
              --v50;
              if (v52 == v27 && *(_DWORD *)(*(_QWORD *)v45 + 112) < v49)
                break;
              continue;
            }
            break;
          }
          if (v8 < (unint64_t)v46)
            continue;
          break;
        }
LABEL_122:
        v54 = (_QWORD *)(v8 - 8);
        if ((_DWORD **)(v8 - 8) != v6)
          *v6 = (_DWORD *)*v54;
        *v54 = v14;
        if (v33 < (unint64_t)v35)
        {
LABEL_127:
          result = sub_1C4A0A724(v6, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v55 = sub_1C4A0BD58((uint64_t)v6, (uint64_t *)(v8 - 8));
        result = sub_1C4A0BD58(v8, a2);
        if (!(_DWORD)result)
        {
          if (v55)
            continue;
          goto LABEL_127;
        }
        a2 = (uint64_t *)(v8 - 8);
        if (!v55)
          goto LABEL_2;
        return result;
    }
  }
}

_DWORD **sub_1C4A0BA50(_DWORD **result, uint64_t a2, uint64_t *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  _DWORD *v35;
  _DWORD *v36;
  unsigned int v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;

  v3 = *(_DWORD **)a2;
  v4 = *result;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 8) + 2;
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 3)
    v6 = 84;
  else
    v6 = 85;
  if (v5 >= 5)
    v7 = v6;
  else
    v7 = 83;
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 1)
    v8 = 82;
  else
    v8 = v7;
  if (v5 >= 3)
    v9 = v8;
  else
    v9 = 81;
  v10 = v4[2] + 2;
  if (v10 >= 3)
  {
    if (v4[2] == 1)
    {
      v11 = 82;
    }
    else
    {
      if (v4[2] == 3)
        v11 = 84;
      else
        v11 = 85;
      if (v10 < 5)
        v11 = 83;
    }
  }
  else
  {
    v11 = 81;
  }
  if (v9 > v11 || (v12 = *(_DWORD *)(*(_QWORD *)v3 + 112), v9 == v11) && v12 < *(_DWORD *)(*(_QWORD *)v4 + 112))
  {
    v13 = (_DWORD *)*a3;
    v14 = *(_DWORD *)(*a3 + 8) + 2;
    if (*(_DWORD *)(*a3 + 8) == 3)
      v15 = 84;
    else
      v15 = 85;
    if (v14 >= 5)
      v16 = v15;
    else
      v16 = 83;
    v17 = v14 >= 3;
    if (*(_DWORD *)(*a3 + 8) == 1)
      v18 = 82;
    else
      v18 = v16;
    if (!v17)
      v18 = 81;
    if (v5 >= 3)
    {
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 1)
      {
        v19 = 82;
      }
      else if (v5 >= 5)
      {
        if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 3)
          v19 = 84;
        else
          v19 = 85;
      }
      else
      {
        v19 = 83;
      }
    }
    else
    {
      v19 = 81;
    }
    if (v18 > v19 || v18 == v19 && *(_DWORD *)(*(_QWORD *)v13 + 112) < *(_DWORD *)(*(_QWORD *)v3 + 112))
    {
      *result = v13;
LABEL_64:
      *a3 = (uint64_t)v4;
      return result;
    }
    *result = v3;
    *(_QWORD *)a2 = v4;
    v27 = *a3;
    v28 = *(_DWORD *)(*a3 + 8) + 2;
    if (*(_DWORD *)(*a3 + 8) == 3)
      v29 = 84;
    else
      v29 = 85;
    if (v28 >= 5)
      v30 = v29;
    else
      v30 = 83;
    v31 = v28 >= 3;
    if (*(_DWORD *)(*a3 + 8) == 1)
      v32 = 82;
    else
      v32 = v30;
    if (!v31)
      v32 = 81;
    if (v10 >= 3)
    {
      if (v10 == 3)
      {
        v33 = 82;
      }
      else if (v10 >= 5)
      {
        if (v10 == 5)
          v33 = 84;
        else
          v33 = 85;
      }
      else
      {
        v33 = 83;
      }
    }
    else
    {
      v33 = 81;
    }
    if (v32 > v33 || v32 == v33 && *(_DWORD *)(*(_QWORD *)v27 + 112) < *(_DWORD *)(*(_QWORD *)v4 + 112))
    {
      *(_QWORD *)a2 = v27;
      goto LABEL_64;
    }
  }
  else
  {
    v20 = *a3;
    v21 = *(_DWORD *)(*a3 + 8) + 2;
    if (*(_DWORD *)(*a3 + 8) == 3)
      v22 = 84;
    else
      v22 = 85;
    if (v21 >= 5)
      v23 = v22;
    else
      v23 = 83;
    v24 = v21 >= 3;
    if (*(_DWORD *)(*a3 + 8) == 1)
      v25 = 82;
    else
      v25 = v23;
    if (!v24)
      v25 = 81;
    if (v5 >= 3)
    {
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 1)
      {
        v26 = 82;
      }
      else
      {
        v34 = v5 >= 5;
        if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 3)
          v26 = 84;
        else
          v26 = 85;
        if (!v34)
          v26 = 83;
      }
    }
    else
    {
      v26 = 81;
    }
    if (v25 > v26 || v25 == v26 && *(_DWORD *)(*(_QWORD *)v20 + 112) < v12)
    {
      *(_QWORD *)a2 = v20;
      *a3 = (uint64_t)v3;
      v35 = *(_DWORD **)a2;
      v36 = *result;
      v37 = *(_DWORD *)(*(_QWORD *)a2 + 8) + 2;
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 3)
        v38 = 84;
      else
        v38 = 85;
      if (v37 >= 5)
        v39 = v38;
      else
        v39 = 83;
      v40 = v37 >= 3;
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 1)
        v41 = 82;
      else
        v41 = v39;
      if (!v40)
        v41 = 81;
      v42 = v36[2] + 2;
      if (v42 >= 3)
      {
        if (v36[2] == 1)
        {
          v43 = 82;
        }
        else if (v42 >= 5)
        {
          if (v36[2] == 3)
            v43 = 84;
          else
            v43 = 85;
        }
        else
        {
          v43 = 83;
        }
      }
      else
      {
        v43 = 81;
      }
      if (v41 > v43 || v41 == v43 && *(_DWORD *)(*(_QWORD *)v35 + 112) < *(_DWORD *)(*(_QWORD *)v36 + 112))
      {
        *result = v35;
        *(_QWORD *)a2 = v36;
      }
    }
  }
  return result;
}

BOOL sub_1C4A0BD58(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  _QWORD *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD **v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  unsigned int v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  _DWORD *v45;
  _DWORD *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  _DWORD *v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  _DWORD *v63;
  int v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;

  v4 = ((uint64_t)a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_DWORD *)*(a2 - 1);
      v7 = *(_DWORD **)a1;
      v8 = v6[2] + 2;
      if (v6[2] == 3)
        v9 = 84;
      else
        v9 = 85;
      if (v8 >= 5)
        v10 = v9;
      else
        v10 = 83;
      v11 = v8 >= 3;
      if (v6[2] == 1)
        v12 = 82;
      else
        v12 = v10;
      if (!v11)
        v12 = 81;
      v13 = v7[2] + 2;
      if (v13 >= 3)
      {
        if (v7[2] == 1)
        {
          v14 = 82;
        }
        else if (v13 >= 5)
        {
          if (v7[2] == 3)
            v14 = 84;
          else
            v14 = 85;
        }
        else
        {
          v14 = 83;
        }
      }
      else
      {
        v14 = 81;
      }
      if (v12 > v14 || v12 == v14 && *(_DWORD *)(*(_QWORD *)v6 + 112) < *(_DWORD *)(*(_QWORD *)v7 + 112))
      {
        *(_QWORD *)a1 = v6;
        *(a2 - 1) = (uint64_t)v7;
      }
      return result;
    case 3:
      sub_1C4A0BA50((_DWORD **)a1, a1 + 8, a2 - 1);
      return 1;
    case 4:
      sub_1C4A0C2CC((_DWORD **)a1, a1 + 8, (uint64_t *)(a1 + 16), a2 - 1);
      return 1;
    case 5:
      v33 = (_DWORD **)(a1 + 16);
      v34 = a1 + 24;
      sub_1C4A0C2CC((_DWORD **)a1, a1 + 8, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 24));
      v35 = (_DWORD *)*(a2 - 1);
      v36 = *(_DWORD **)(a1 + 24);
      v37 = v35[2] + 2;
      if (v35[2] == 3)
        v38 = 84;
      else
        v38 = 85;
      if (v37 >= 5)
        v39 = v38;
      else
        v39 = 83;
      v40 = v37 >= 3;
      if (v35[2] == 1)
        v41 = 82;
      else
        v41 = v39;
      if (!v40)
        v41 = 81;
      v42 = v36[2] + 2;
      if (v42 >= 3)
      {
        if (v36[2] == 1)
        {
          v43 = 82;
        }
        else
        {
          v44 = v42 >= 5;
          if (v36[2] == 3)
            v43 = 84;
          else
            v43 = 85;
          if (!v44)
            v43 = 83;
        }
      }
      else
      {
        v43 = 81;
      }
      if (v41 <= v43)
      {
        result = 1;
        if (v41 != v43 || *(_DWORD *)(*(_QWORD *)v35 + 112) >= *(_DWORD *)(*(_QWORD *)v36 + 112))
          return result;
      }
      *(_QWORD *)v34 = v35;
      *(a2 - 1) = (uint64_t)v36;
      v45 = *(_DWORD **)v34;
      v46 = *v33;
      v47 = *(_DWORD *)(*(_QWORD *)v34 + 8) + 2;
      v48 = *(_DWORD *)(*(_QWORD *)v34 + 8) == 3 ? 84 : 85;
      v49 = v47 >= 5 ? v48 : 83;
      v50 = *(_DWORD *)(*(_QWORD *)v34 + 8) == 1 ? 82 : v49;
      v51 = v47 >= 3 ? v50 : 81;
      v52 = v46[2] + 2;
      if (v52 >= 3)
      {
        if (v46[2] == 1)
        {
          v53 = 82;
        }
        else
        {
          v54 = v52 >= 5;
          if (v46[2] == 3)
            v53 = 84;
          else
            v53 = 85;
          if (!v54)
            v53 = 83;
        }
      }
      else
      {
        v53 = 81;
      }
      if (v51 <= v53)
      {
        result = 1;
        if (v51 != v53 || *(_DWORD *)(*(_QWORD *)v45 + 112) >= *(_DWORD *)(*(_QWORD *)v46 + 112))
          return result;
      }
      *v33 = v45;
      *(_QWORD *)v34 = v46;
      v55 = *(_DWORD **)(a1 + 8);
      v56 = v47 == 5 ? 84 : 85;
      v57 = v47 >= 5 ? v56 : 83;
      v58 = v47 == 3 ? 82 : v57;
      v59 = v47 >= 3 ? v58 : 81;
      v60 = v55[2] + 2;
      if (v60 >= 3)
      {
        if (v55[2] == 1)
        {
          v61 = 82;
        }
        else
        {
          v62 = v60 >= 5;
          if (v55[2] == 3)
            v61 = 84;
          else
            v61 = 85;
          if (!v62)
            v61 = 83;
        }
      }
      else
      {
        v61 = 81;
      }
      if (v59 <= v61)
      {
        result = 1;
        if (v59 != v61 || *(_DWORD *)(*(_QWORD *)v45 + 112) >= *(_DWORD *)(*(_QWORD *)v55 + 112))
          return result;
      }
      *(_QWORD *)(a1 + 8) = v45;
      *(_QWORD *)(a1 + 16) = v55;
      v63 = *(_DWORD **)a1;
      if (v47 == 5)
        v64 = 84;
      else
        v64 = 85;
      if (v47 >= 5)
        v65 = v64;
      else
        v65 = 83;
      v66 = v47 >= 3;
      if (v47 == 3)
        v67 = 82;
      else
        v67 = v65;
      if (!v66)
        v67 = 81;
      v68 = v63[2] + 2;
      if (v68 >= 3)
      {
        if (v63[2] == 1)
        {
          v69 = 82;
        }
        else if (v68 >= 5)
        {
          v69 = v63[2] == 3 ? 84 : 85;
        }
        else
        {
          v69 = 83;
        }
      }
      else
      {
        v69 = 81;
      }
      if (v67 <= v69)
      {
        result = 1;
        if (v67 != v69 || *(_DWORD *)(*(_QWORD *)v45 + 112) >= *(_DWORD *)(*(_QWORD *)v63 + 112))
          return result;
      }
      *(_QWORD *)a1 = v45;
      *(_QWORD *)(a1 + 8) = v63;
      return 1;
    default:
      v15 = (uint64_t *)(a1 + 16);
      sub_1C4A0BA50((_DWORD **)a1, a1 + 8, (uint64_t *)(a1 + 16));
      v16 = (uint64_t *)(a1 + 24);
      if ((uint64_t *)(a1 + 24) == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  do
  {
    v19 = (_DWORD *)*v16;
    v20 = (_DWORD *)*v15;
    v21 = *(_DWORD *)(*v16 + 8) + 2;
    if (*(_DWORD *)(*v16 + 8) == 3)
      v22 = 84;
    else
      v22 = 85;
    if (v21 < 5)
      v22 = 83;
    if (*(_DWORD *)(*v16 + 8) == 1)
      v22 = 82;
    if (v21 < 3)
      v22 = 81;
    v23 = v20[2] + 2;
    if (v23 >= 3)
    {
      if (v20[2] == 1)
      {
        v24 = 82;
      }
      else
      {
        v25 = v23 >= 5;
        if (v20[2] == 3)
          v24 = 84;
        else
          v24 = 85;
        if (!v25)
          v24 = 83;
      }
    }
    else
    {
      v24 = 81;
    }
    if (v22 > v24 || v22 == v24 && *(_DWORD *)(*(_QWORD *)v19 + 112) < *(_DWORD *)(*(_QWORD *)v20 + 112))
    {
      *v16 = (uint64_t)v20;
      v26 = (_QWORD *)a1;
      if (v15 != (uint64_t *)a1)
      {
        if (v21 < 3)
          v27 = 81;
        else
          v27 = 82;
        if (v21 == 5)
          v28 = 84;
        else
          v28 = 85;
        if (v21 < 5)
          v28 = 83;
        if (v21 >= 4)
          v27 = v28;
        v29 = v17;
        while (1)
        {
          v30 = *(_DWORD **)(a1 + v29 + 8);
          v31 = v30[2] + 2;
          if (v31 >= 3)
          {
            if (v30[2] == 1)
            {
              v32 = 82;
            }
            else if (v31 >= 5)
            {
              v32 = v30[2] == 3 ? 84 : 85;
            }
            else
            {
              v32 = 83;
            }
          }
          else
          {
            v32 = 81;
          }
          if (v27 <= v32 && (v27 != v32 || *(_DWORD *)(*(_QWORD *)v19 + 112) >= *(_DWORD *)(*(_QWORD *)v30 + 112)))
            break;
          *(_QWORD *)(a1 + v29 + 16) = v30;
          v29 -= 8;
          if (v29 == -16)
          {
            v26 = (_QWORD *)a1;
            goto LABEL_65;
          }
        }
        v26 = (_QWORD *)(a1 + v29 + 16);
      }
LABEL_65:
      *v26 = v19;
      if (++v18 == 8)
        return v16 + 1 == a2;
    }
    v15 = v16;
    v17 += 8;
    ++v16;
  }
  while (v16 != a2);
  return 1;
}

_DWORD **sub_1C4A0C2CC(_DWORD **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _DWORD **result;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  _DWORD *v29;
  _DWORD *v30;
  unsigned int v31;
  int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;

  result = sub_1C4A0BA50(a1, a2, a3);
  v9 = *a4;
  v10 = (_DWORD *)*a3;
  v11 = *(_DWORD *)(*a4 + 8) + 2;
  if (*(_DWORD *)(*a4 + 8) == 3)
    v12 = 84;
  else
    v12 = 85;
  if (v11 >= 5)
    v13 = v12;
  else
    v13 = 83;
  v14 = v11 >= 3;
  if (*(_DWORD *)(*a4 + 8) == 1)
    v15 = 82;
  else
    v15 = v13;
  if (!v14)
    v15 = 81;
  v16 = v10[2] + 2;
  if (v16 >= 3)
  {
    if (v10[2] == 1)
    {
      v17 = 82;
    }
    else
    {
      v18 = v16 >= 5;
      if (v10[2] == 3)
        v17 = 84;
      else
        v17 = 85;
      if (!v18)
        v17 = 83;
    }
  }
  else
  {
    v17 = 81;
  }
  if (v15 > v17 || v15 == v17 && *(_DWORD *)(*(_QWORD *)v9 + 112) < *(_DWORD *)(*(_QWORD *)v10 + 112))
  {
    *a3 = v9;
    *a4 = (uint64_t)v10;
    v19 = *a3;
    v20 = *(_DWORD **)a2;
    v21 = *(_DWORD *)(*a3 + 8) + 2;
    if (*(_DWORD *)(*a3 + 8) == 3)
      v22 = 84;
    else
      v22 = 85;
    if (v21 >= 5)
      v23 = v22;
    else
      v23 = 83;
    v24 = v21 >= 3;
    if (*(_DWORD *)(*a3 + 8) == 1)
      v25 = 82;
    else
      v25 = v23;
    if (!v24)
      v25 = 81;
    v26 = v20[2] + 2;
    if (v26 >= 3)
    {
      if (v20[2] == 1)
      {
        v27 = 82;
      }
      else
      {
        v28 = v26 >= 5;
        if (v20[2] == 3)
          v27 = 84;
        else
          v27 = 85;
        if (!v28)
          v27 = 83;
      }
    }
    else
    {
      v27 = 81;
    }
    if (v25 > v27 || v25 == v27 && *(_DWORD *)(*(_QWORD *)v19 + 112) < *(_DWORD *)(*(_QWORD *)v20 + 112))
    {
      *(_QWORD *)a2 = v19;
      *a3 = (uint64_t)v20;
      v29 = *(_DWORD **)a2;
      v30 = *a1;
      v31 = *(_DWORD *)(*(_QWORD *)a2 + 8) + 2;
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 3)
        v32 = 84;
      else
        v32 = 85;
      if (v31 >= 5)
        v33 = v32;
      else
        v33 = 83;
      v34 = v31 >= 3;
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 1)
        v35 = 82;
      else
        v35 = v33;
      if (!v34)
        v35 = 81;
      v36 = v30[2] + 2;
      if (v36 >= 3)
      {
        if (v30[2] == 1)
        {
          v37 = 82;
        }
        else if (v36 >= 5)
        {
          if (v30[2] == 3)
            v37 = 84;
          else
            v37 = 85;
        }
        else
        {
          v37 = 83;
        }
      }
      else
      {
        v37 = 81;
      }
      if (v35 > v37 || v35 == v37 && *(_DWORD *)(*(_QWORD *)v29 + 112) < *(_DWORD *)(*(_QWORD *)v30 + 112))
      {
        *a1 = v29;
        *(_QWORD *)a2 = v30;
      }
    }
  }
  return result;
}

BOOL sub_1C4A0C4E4(_BOOL8 result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  uint64_t ***v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t ***v11;
  uint64_t ***v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t ***)(result + 8 * (v4 >> 1));
    v9 = *v8;
    v11 = (uint64_t ***)(a2 - 8);
    v10 = *(uint64_t ***)(a2 - 8);
    result = sub_1C4A0C584(*a3, *v8, v10);
    if (result)
    {
      do
      {
        v12 = v8;
        *v11 = v9;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t ***)(v6 + 8 * v7);
        v9 = *v8;
        result = sub_1C4A0C584(*a3, *v8, v10);
        v11 = v12;
      }
      while (result);
      *v12 = v10;
    }
  }
  return result;
}

BOOL sub_1C4A0C584(uint64_t a1, _DWORD *a2, uint64_t **a3)
{
  unsigned int v3;
  int v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  int *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v39;
  int v40;
  int v41;
  int v42;

  v3 = a2[2] + 2;
  if (a2[2] == 3)
    v4 = 84;
  else
    v4 = 85;
  if (v3 >= 5)
    v5 = v4;
  else
    v5 = 83;
  v6 = v3 >= 3;
  if (a2[2] == 1)
    v7 = 82;
  else
    v7 = v5;
  if (!v6)
    v7 = 81;
  v8 = *((_DWORD *)a3 + 2) + 2;
  if (*((_DWORD *)a3 + 2) == 3)
    v9 = 84;
  else
    v9 = 85;
  if (v8 < 5)
    v9 = 83;
  v10 = v8 >= 3;
  if (*((_DWORD *)a3 + 2) == 1)
    v11 = 82;
  else
    v11 = v9;
  if (!v10)
    v11 = 81;
  v12 = v7 >= v11;
  if (v7 == v11)
  {
    v13 = *(uint64_t **)a2;
    v14 = *(_DWORD *)(*(_QWORD *)a2 + 112);
    v15 = *(_QWORD *)(a1 + 808);
    v16 = *(unsigned int *)(a1 + 824);
    if ((_DWORD)v16)
    {
      LODWORD(v18) = (v16 - 1) & (37 * v14);
      v17 = (int *)(v15 + 8 * v18);
      v19 = *v17;
      if (v14 == *v17)
      {
LABEL_26:
        v20 = *a3;
        v21 = (int *)(v15 + 8 * v16);
        if (v21 == v17)
          v22 = 0;
        else
          v22 = v17[1];
        v23 = *((_DWORD *)v20 + 28);
        if ((_DWORD)v16)
        {
          v30 = v16 - 1;
          LODWORD(v16) = (v16 - 1) & (37 * v23);
          v31 = (int *)(v15 + 8 * v16);
          v32 = *v31;
          if (v23 == *v31)
          {
LABEL_37:
            if (v21 != v31)
            {
              v24 = v31[1];
              goto LABEL_31;
            }
          }
          else
          {
            v41 = 1;
            while (v32 != -1)
            {
              v42 = v16 + v41++;
              v16 = v42 & v30;
              v32 = *(_DWORD *)(v15 + 8 * v16);
              if (v23 == v32)
              {
                v31 = (int *)(v15 + 8 * v16);
                goto LABEL_37;
              }
            }
          }
        }
        v24 = 0;
LABEL_31:
        v12 = v22 >= v24;
        if (v22 == v24)
        {
          v25 = *((unsigned int *)v13 + 2);
          if ((_DWORD)v25)
          {
            v26 = 0;
            v27 = *v13;
            v28 = 24 * v25;
            v29 = (_QWORD *)(v27 + 8);
            do
            {
              v26 = ((*v29 >> 1) & 3 | *(_DWORD *)((*v29 & 0xFFFFFFFFFFFFFFF8) + 24))
                  + v26
                  - ((*(v29 - 1) >> 1) & 3 | *(_DWORD *)((*(v29 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
              v29 += 3;
              v28 -= 24;
            }
            while (v28);
          }
          else
          {
            v26 = 0;
          }
          v33 = *((unsigned int *)v20 + 2);
          if ((_DWORD)v33)
          {
            v34 = 0;
            v35 = *v20;
            v36 = 24 * v33;
            v37 = (_QWORD *)(v35 + 8);
            do
            {
              v34 = ((*v37 >> 1) & 3 | *(_DWORD *)((*v37 & 0xFFFFFFFFFFFFFFF8) + 24))
                  + v34
                  - ((*(v37 - 1) >> 1) & 3 | *(_DWORD *)((*(v37 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
              v37 += 3;
              v36 -= 24;
            }
            while (v36);
          }
          else
          {
            v34 = 0;
          }
          v12 = v26 >= v34;
          if (v26 == v34)
            v12 = v14 >= v23;
        }
        return !v12;
      }
      v39 = 1;
      while (v19 != -1)
      {
        v40 = v18 + v39++;
        v18 = v40 & (v16 - 1);
        v19 = *(_DWORD *)(v15 + 8 * v18);
        if (v14 == v19)
        {
          v17 = (int *)(v15 + 8 * v18);
          goto LABEL_26;
        }
      }
    }
    v17 = (int *)(v15 + 8 * v16);
    goto LABEL_26;
  }
  return !v12;
}

uint64_t sub_1C4A0C7B8(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  int v11;
  uint64_t result;
  BOOL v13;
  unsigned int v14;
  _DWORD *v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)a1;
    v6 = v4 - 1;
    v7 = (37 * *a2) & v6;
    v8 = (_DWORD *)(*(_QWORD *)a1 + 4 * v7);
    v9 = *v8;
    if (*a2 == *v8)
      return 0;
    v10 = 0;
    v11 = 1;
    while (v9 != -1)
    {
      result = 0;
      if (v10)
        v13 = 0;
      else
        v13 = v9 == -2;
      if (v13)
        v10 = v8;
      v14 = v7 + v11++;
      v7 = v14 & v6;
      v8 = (_DWORD *)(v5 + 4 * v7);
      v9 = *v8;
      if (*a2 == *v8)
        return result;
    }
    if (v10)
      v15 = v10;
    else
      v15 = v8;
  }
  else
  {
    v15 = 0;
  }
  *sub_1C4A0C948(a1, (uint64_t)a2, a2, v15) = *a2;
  v17 = *(char **)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v17 >= v16)
  {
    v19 = *(char **)(a1 + 24);
    v20 = (v17 - v19) >> 2;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 62)
      abort();
    v22 = v16 - (_QWORD)v19;
    if (v22 >> 1 > v21)
      v21 = v22 >> 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
      v23 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 62)
        sub_1C4764EE4();
      v24 = (char *)operator new(4 * v23);
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[4 * v20];
    *(_DWORD *)v25 = *a2;
    v18 = v25 + 4;
    while (v17 != v19)
    {
      v26 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *((_DWORD *)v25 - 1) = v26;
      v25 -= 4;
    }
    *(_QWORD *)(a1 + 24) = v25;
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(a1 + 40) = &v24[4 * v23];
    if (v19)
      operator delete(v19);
  }
  else
  {
    *(_DWORD *)v17 = *a2;
    v18 = v17 + 4;
  }
  *(_QWORD *)(a1 + 32) = v18;
  return 1;
}

_DWORD *sub_1C4A0C948(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_1C4A0CAD0(a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v19);
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != -1)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == -2;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v19);
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_10;
    }
LABEL_31:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1C4A0CAD0(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_31;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -2;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_10:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *sub_1C4A0CAD0(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *result;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(4 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4A0CB8C((_QWORD *)a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    return memset(result, 255, 4 * v10);
  return result;
}

_QWORD *sub_1C4A0CB8C(_QWORD *result, int *a2, int *a3)
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v5 = result;
  result[1] = 0;
  v6 = (char *)*result;
  v7 = *((unsigned int *)result + 4);
  if ((_DWORD)v7)
    result = memset((void *)*result, 255, 4 * v7);
  for (; a2 != a3; ++a2)
  {
    v8 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v9 = *((_DWORD *)v5 + 4) - 1;
      v10 = v9 & (37 * v8);
      v11 = &v6[4 * v10];
      v12 = *(_DWORD *)v11;
      if (v8 != *(_DWORD *)v11)
      {
        v13 = 0;
        v14 = 1;
        while (v12 != -1)
        {
          if (v13)
            v15 = 0;
          else
            v15 = v12 == -2;
          if (v15)
            v13 = v11;
          v16 = v10 + v14++;
          v10 = v16 & v9;
          v11 = &v6[4 * (v16 & v9)];
          v12 = *(_DWORD *)v11;
          if (v8 == *(_DWORD *)v11)
            goto LABEL_10;
        }
        if (v13)
          v11 = v13;
      }
LABEL_10:
      *(_DWORD *)v11 = v8;
      ++*((_DWORD *)v5 + 2);
    }
  }
  return result;
}

_QWORD *sub_1C4A0CC74(_QWORD *result)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;

  v1 = result;
  v2 = *((_DWORD *)result + 2);
  if (v2 || *((_DWORD *)result + 3))
  {
    v3 = *((unsigned int *)result + 4);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      return sub_1C4A068AC(result);
    }
    else
    {
      if ((_DWORD)v3)
        result = memset((void *)*result, 255, 4 * v3);
      v1[1] = 0;
    }
  }
  return result;
}

uint64_t sub_1C4A0CCE0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  _DWORD *v11;
  uint64_t v12;

  v5 = HIDWORD(a3);
  v6 = a3 - 81;
  v7 = *(_DWORD *)(a1 + 248);
  if (v7 <= HIDWORD(a3))
    sub_1C4A0738C(a1, 2 * v7);
  v8 = v5 >> v6;
  v9 = *(_QWORD *)(a1 + 8 * v6 + 184);
  result = v9 + 176 * (v5 >> v6);
  v11 = (_DWORD *)(*(_QWORD *)(a1 + 16 * v6 + 112) + 216 * (v5 >> v6));
  if (*(_DWORD *)(result + 168)
    || *(_QWORD *)(v9 + 176 * v8 + 8) != a2
    || *(_DWORD **)result != v11
    || *v11 != *(_DWORD *)(v9 + 176 * v8 + 164))
  {
    *(_QWORD *)result = v11;
    v12 = v9 + 176 * v8;
    *(_QWORD *)(v12 + 8) = a2;
    *(_DWORD *)(v12 + 120) = 0;
    *(_WORD *)(v12 + 160) = 0;
    *(_DWORD *)(v12 + 164) = *v11;
    *(_DWORD *)(result + 168) = 0;
  }
  return result;
}

_DWORD *sub_1C4A0CDB4(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  BOOL v12;
  unsigned int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v10 = 0;
LABEL_8:
    v6 = sub_1C4A07214(a1, (uint64_t)a2, a2, v10);
    *(_QWORD *)v6 = *a2;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 8 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v12 = 0;
      else
        v12 = v7 == -2;
      if (v12)
        v8 = v6;
      v13 = v5 + v9++;
      v5 = v13 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 8 * (v13 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v10 = v8;
    else
      v10 = v6;
    goto LABEL_8;
  }
  return v6;
}

uint64_t sub_1C4A0CE6C(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  _DWORD ***v4;
  uint64_t v5;
  _DWORD **v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  uint64_t result;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_DWORD *)(a4 + 8) = 0;
  v4 = (_DWORD ***)*a1;
  v5 = *(unsigned int *)(*a1 + 8);
  if (!(_DWORD)v5)
    return 1;
  v9 = *v4;
  v26 = a4 + 16;
  v27 = (uint64_t)&(*v4)[v5];
  while (1)
  {
    if (a2 >= a3)
      return 0;
    v10 = *v9;
    v11 = a1[1];
    v12 = **(_BYTE **)(v11 + 8) ? 1 << (*v9)[2] : 1;
    v13 = (a2 + v12 - 1) & -v12;
    v14 = v13 >= 0xFF0 ? 0 : v13;
    if (v13 > 0xFEF || v14 >= a3)
      return 0;
    v16 = *(_QWORD *)v11 + 248;
    if (sub_1C4A0A2FC(v16, *v9, v14))
      break;
LABEL_22:
    v19 = v10[2] + 2;
    if (v10[2] == 3)
      v20 = 8;
    else
      v20 = 16;
    if (v19 < 5)
      v20 = 4;
    v21 = v19 >= 3;
    if (v10[2] == 1)
      v22 = 2;
    else
      v22 = v20;
    if (v21)
      v23 = v22;
    else
      v23 = 1;
    v24 = *(unsigned int *)(a4 + 8);
    if (v24 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v26, v24 + 1, 16);
      v24 = *(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 8);
      *(_QWORD *)v24 = v10;
      *(_QWORD *)(v24 + 8) = v14;
      LODWORD(v24) = *(_DWORD *)(a4 + 8);
    }
    else
    {
      v25 = *(_QWORD *)a4 + 16 * v24;
      *(_QWORD *)v25 = v10;
      *(_DWORD *)(v25 + 8) = v14;
    }
    *(_DWORD *)(a4 + 8) = v24 + 1;
    a2 = v23 + v14;
    if (++v9 == (_DWORD **)v27)
      return 1;
  }
  v17 = v12 + v13;
  while (1)
  {
    result = 0;
    v14 = v17 >= 0xFF0 ? 0 : v17;
    if (v17 > 0xFEF || v14 >= a3)
      return result;
    v17 += v12;
    if (!sub_1C4A0A2FC(v16, v10, v14))
      goto LABEL_22;
  }
}

uint64_t *sub_1C4A0D024(uint64_t *result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 2);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(v8 + 8))
        {
          v114 = *(_DWORD *)(v8 + 8);
          v108 = *(_QWORD *)v8;
          v45 = *(_QWORD *)(a2 - 12);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 4);
          *(_QWORD *)v8 = v45;
          *(_DWORD *)(a2 - 4) = v114;
          *(_QWORD *)(a2 - 12) = v108;
        }
        return result;
      case 3:
        return sub_1C4A0D8A4((uint64_t *)v8, (uint64_t *)(v8 + 12), (uint64_t *)(a2 - 12));
      case 4:
        return sub_1C4A0DC04(v8, v8 + 12, v8 + 24, a2 - 12);
      case 5:
        v46 = (uint64_t *)(v8 + 12);
        v47 = (uint64_t *)(v8 + 24);
        v48 = (uint64_t *)(v8 + 36);
        result = sub_1C4A0DC04(v8, v8 + 12, v8 + 24, v8 + 36);
        if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(v8 + 44))
        {
          v49 = *v48;
          v50 = *(_DWORD *)(v8 + 44);
          v51 = *(_DWORD *)(a2 - 4);
          *v48 = *(_QWORD *)(a2 - 12);
          *(_DWORD *)(v8 + 44) = v51;
          *(_DWORD *)(a2 - 4) = v50;
          *(_QWORD *)(a2 - 12) = v49;
          if (*(_DWORD *)(v8 + 44) < *(_DWORD *)(v8 + 32))
          {
            v52 = *(_DWORD *)(v8 + 32);
            v53 = *v47;
            *v47 = *v48;
            *(_DWORD *)(v8 + 32) = *(_DWORD *)(v8 + 44);
            *v48 = v53;
            *(_DWORD *)(v8 + 44) = v52;
            if (*(_DWORD *)(v8 + 32) < *(_DWORD *)(v8 + 20))
            {
              v54 = *(_DWORD *)(v8 + 20);
              v55 = *v46;
              *v46 = *v47;
              *(_DWORD *)(v8 + 20) = *(_DWORD *)(v8 + 32);
              *v47 = v55;
              *(_DWORD *)(v8 + 32) = v54;
              if (*(_DWORD *)(v8 + 20) < *(_DWORD *)(v8 + 8))
              {
                v115 = *(_DWORD *)(v8 + 8);
                v109 = *(_QWORD *)v8;
                *(_QWORD *)v8 = *v46;
                *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 20);
                *v46 = v109;
                *(_DWORD *)(v8 + 20) = v115;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 287)
        {
          v56 = v8 + 12;
          v58 = v8 == a2 || v56 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = v8;
              do
              {
                v61 = *(_DWORD *)(v60 + 20);
                v62 = *(_DWORD *)(v60 + 8);
                v60 = v56;
                if (v61 < v62)
                {
                  v63 = *(_QWORD *)v56;
                  v64 = v59;
                  while (1)
                  {
                    v65 = v8 + v64;
                    *(_QWORD *)(v65 + 12) = *(_QWORD *)(v8 + v64);
                    *(_DWORD *)(v65 + 20) = *(_DWORD *)(v8 + v64 + 8);
                    if (!v64)
                      break;
                    v64 -= 12;
                    if (v61 >= *(_DWORD *)(v65 - 4))
                    {
                      v66 = v8 + v64 + 12;
                      goto LABEL_80;
                    }
                  }
                  v66 = v8;
LABEL_80:
                  *(_QWORD *)v66 = v63;
                  *(_DWORD *)(v66 + 8) = v61;
                }
                v56 = v60 + 12;
                v59 += 12;
              }
              while (v60 + 12 != a2);
            }
          }
          else if (!v58)
          {
            do
            {
              v100 = *(_DWORD *)(v7 + 20);
              v101 = *(_DWORD *)(v7 + 8);
              v7 = v56;
              if (v100 < v101)
              {
                v102 = *(_QWORD *)v56;
                do
                {
                  v103 = v56;
                  v104 = *(_QWORD *)(v56 - 12);
                  v56 -= 12;
                  *(_QWORD *)v103 = v104;
                  *(_DWORD *)(v103 + 8) = *(_DWORD *)(v103 - 4);
                }
                while (v100 < *(_DWORD *)(v103 - 16));
                *(_QWORD *)v56 = v102;
                *(_DWORD *)(v56 + 8) = v100;
              }
              v56 = v7 + 12;
            }
            while (v7 + 12 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v67 = (unint64_t)(v10 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = v8 + 12 * v70;
                if (2 * v69 + 2 < v10)
                {
                  v72 = *(_DWORD *)(v8 + 12 * v70 + 8);
                  v73 = *(_DWORD *)(v71 + 20);
                  v71 += 12 * (v72 < v73);
                  if (v72 < v73)
                    v70 = 2 * v69 + 2;
                }
                v74 = *(_DWORD *)(v8 + 12 * v69 + 8);
                if (*(_DWORD *)(v71 + 8) >= v74)
                {
                  v75 = v8 + 12 * v69;
                  v76 = *(_QWORD *)v75;
                  do
                  {
                    v77 = v75;
                    v75 = v71;
                    v78 = *(_QWORD *)v71;
                    result = (uint64_t *)*(unsigned int *)(v75 + 8);
                    *(_DWORD *)(v77 + 8) = (_DWORD)result;
                    *(_QWORD *)v77 = v78;
                    if (v67 < v70)
                      break;
                    v79 = (2 * v70) | 1;
                    v71 = v8 + 12 * v79;
                    v80 = 2 * v70 + 2;
                    if (v80 < v10)
                    {
                      v81 = *(_DWORD *)(v8 + 12 * v79 + 8);
                      v82 = *(_DWORD *)(v71 + 20);
                      v71 += 12 * (v81 < v82);
                      if (v81 < v82)
                        v79 = v80;
                    }
                    result = (uint64_t *)*(unsigned int *)(v71 + 8);
                    v70 = v79;
                  }
                  while (result >= v74);
                  *(_QWORD *)v75 = v76;
                  *(_DWORD *)(v75 + 8) = v74;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            do
            {
              v83 = 0;
              v116 = *(_DWORD *)(v8 + 8);
              v110 = *(_QWORD *)v8;
              v84 = v8;
              do
              {
                v85 = v83 + 1;
                v86 = v84 + 12 * (v83 + 1);
                v87 = (2 * v83) | 1;
                v88 = 2 * v83 + 2;
                if (v88 < v10)
                {
                  v89 = *(_DWORD *)(v84 + 12 * v85 + 8);
                  v90 = *(_DWORD *)(v86 + 20);
                  v86 += 12 * (v89 < v90);
                  if (v89 < v90)
                    v87 = v88;
                }
                v91 = *(_QWORD *)v86;
                *(_DWORD *)(v84 + 8) = *(_DWORD *)(v86 + 8);
                *(_QWORD *)v84 = v91;
                v84 = v86;
                v83 = v87;
              }
              while (v87 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              a2 -= 12;
              if (v86 == a2)
              {
                *(_DWORD *)(v86 + 8) = v116;
                *(_QWORD *)v86 = v110;
              }
              else
              {
                v92 = *(_QWORD *)a2;
                *(_DWORD *)(v86 + 8) = *(_DWORD *)(a2 + 8);
                *(_QWORD *)v86 = v92;
                *(_DWORD *)(a2 + 8) = v116;
                *(_QWORD *)a2 = v110;
                v93 = v86 - v8 + 12;
                if (v93 >= 13)
                {
                  v94 = (v93 / 0xCuLL - 2) >> 1;
                  v95 = *(_DWORD *)(v86 + 8);
                  if (*(_DWORD *)(v8 + 12 * v94 + 8) < v95)
                  {
                    v96 = *(_QWORD *)v86;
                    do
                    {
                      v97 = v86;
                      v86 = v8 + 12 * v94;
                      v98 = *(_QWORD *)v86;
                      *(_DWORD *)(v97 + 8) = *(_DWORD *)(v86 + 8);
                      *(_QWORD *)v97 = v98;
                      if (!v94)
                        break;
                      v94 = (v94 - 1) >> 1;
                    }
                    while (*(_DWORD *)(v8 + 12 * v94 + 8) < v95);
                    *(_QWORD *)v86 = v96;
                    *(_DWORD *)(v86 + 8) = v95;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 12 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x601)
        {
          result = sub_1C4A0D8A4((uint64_t *)(v7 + 12 * v11), (uint64_t *)v7, (uint64_t *)(a2 - 12));
        }
        else
        {
          sub_1C4A0D8A4((uint64_t *)v7, (uint64_t *)(v7 + 12 * v11), (uint64_t *)(a2 - 12));
          v13 = 3 * v11;
          v14 = (uint64_t *)(v7 + 12 * v11 - 12);
          sub_1C4A0D8A4((uint64_t *)(v7 + 12), v14, (uint64_t *)(a2 - 24));
          v15 = (uint64_t *)(v7 + 12 + 4 * v13);
          sub_1C4A0D8A4((uint64_t *)(v7 + 24), v15, (uint64_t *)(a2 - 36));
          result = sub_1C4A0D8A4(v14, (uint64_t *)v12, v15);
          v111 = *(_DWORD *)(v7 + 8);
          v105 = *(_QWORD *)v7;
          v16 = *(_DWORD *)(v12 + 8);
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_DWORD *)(v7 + 8) = v16;
          *(_DWORD *)(v12 + 8) = v111;
          *(_QWORD *)v12 = v105;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(_DWORD *)(v7 + 8);
          if (*(_DWORD *)(v7 - 4) < v17)
            goto LABEL_12;
          if (v17 >= *(_DWORD *)(a2 - 4))
          {
            v35 = v7 + 12;
            do
            {
              v8 = v35;
              if (v35 >= a2)
                break;
              v36 = *(_DWORD *)(v35 + 8);
              v35 += 12;
            }
            while (v17 >= v36);
          }
          else
          {
            v33 = v7;
            do
            {
              v8 = v33 + 12;
              v34 = *(_DWORD *)(v33 + 20);
              v33 += 12;
            }
            while (v17 >= v34);
          }
          v37 = a2;
          if (v8 < a2)
          {
            v38 = a2;
            do
            {
              v37 = v38 - 12;
              v39 = *(_DWORD *)(v38 - 4);
              v38 -= 12;
            }
            while (v17 < v39);
          }
          v40 = *(_QWORD *)v7;
          while (v8 < v37)
          {
            v113 = *(_DWORD *)(v8 + 8);
            v107 = *(_QWORD *)v8;
            v41 = *(_QWORD *)v37;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v37 + 8);
            *(_QWORD *)v8 = v41;
            *(_DWORD *)(v37 + 8) = v113;
            *(_QWORD *)v37 = v107;
            do
            {
              v42 = *(_DWORD *)(v8 + 20);
              v8 += 12;
            }
            while (v17 >= v42);
            do
            {
              v43 = *(_DWORD *)(v37 - 4);
              v37 -= 12;
            }
            while (v17 < v43);
          }
          if (v8 - 12 != v7)
          {
            v44 = *(_QWORD *)(v8 - 12);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
            *(_QWORD *)v7 = v44;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 12) = v40;
          *(_DWORD *)(v8 - 4) = v17;
          continue;
        }
        v17 = *(_DWORD *)(v7 + 8);
LABEL_12:
        v18 = 0;
        v19 = *(_QWORD *)v7;
        do
        {
          v20 = *(_DWORD *)(v7 + v18 + 20);
          v18 += 12;
        }
        while (v20 < v17);
        v21 = v7 + v18;
        v22 = a2;
        if (v18 == 12)
        {
          v25 = a2;
          while (v21 < v25)
          {
            v23 = v25 - 12;
            v26 = *(_DWORD *)(v25 - 4);
            v25 -= 12;
            if (v26 < v17)
              goto LABEL_22;
          }
          v23 = v25;
        }
        else
        {
          do
          {
            v23 = v22 - 12;
            v24 = *(_DWORD *)(v22 - 4);
            v22 -= 12;
          }
          while (v24 >= v17);
        }
LABEL_22:
        v8 = v21;
        if (v21 < v23)
        {
          v27 = v23;
          do
          {
            v112 = *(_DWORD *)(v8 + 8);
            v106 = *(_QWORD *)v8;
            v28 = *(_QWORD *)v27;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v27 + 8);
            *(_QWORD *)v8 = v28;
            *(_DWORD *)(v27 + 8) = v112;
            *(_QWORD *)v27 = v106;
            do
            {
              v29 = *(_DWORD *)(v8 + 20);
              v8 += 12;
            }
            while (v29 < v17);
            do
            {
              v30 = *(_DWORD *)(v27 - 4);
              v27 -= 12;
            }
            while (v30 >= v17);
          }
          while (v8 < v27);
        }
        if (v8 - 12 != v7)
        {
          v31 = *(_QWORD *)(v8 - 12);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
          *(_QWORD *)v7 = v31;
        }
        *(_QWORD *)(v8 - 12) = v19;
        *(_DWORD *)(v8 - 4) = v17;
        if (v21 < v23)
        {
LABEL_33:
          result = (uint64_t *)sub_1C4A0D024(v7, v8 - 12, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = sub_1C4A0D994(v7, v8 - 12);
        result = (uint64_t *)sub_1C4A0D994(v8, a2);
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 12;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C4A0D8A4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v3 = *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)a3 + 2);
  if (v3 >= *((_DWORD *)result + 2))
  {
    if (v4 < v3)
    {
      v8 = *((_DWORD *)a2 + 2);
      v9 = *a2;
      v10 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v10;
      *a3 = v9;
      *((_DWORD *)a3 + 2) = v8;
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)result + 2))
      {
        v11 = *((_DWORD *)result + 2);
        v12 = *result;
        v13 = *((_DWORD *)a2 + 2);
        *result = *a2;
        *((_DWORD *)result + 2) = v13;
        *a2 = v12;
        *((_DWORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_DWORD *)result + 2);
      v15 = *result;
      v16 = *((_DWORD *)a2 + 2);
      *result = *a2;
      *((_DWORD *)result + 2) = v16;
      *a2 = v15;
      *((_DWORD *)a2 + 2) = v14;
      if (*((_DWORD *)a3 + 2) >= *((_DWORD *)a2 + 2))
        return result;
      v5 = *((_DWORD *)a2 + 2);
      v6 = *a2;
      v17 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v17;
    }
    else
    {
      v5 = *((_DWORD *)result + 2);
      v6 = *result;
      v7 = *((_DWORD *)a3 + 2);
      *result = *a3;
      *((_DWORD *)result + 2) = v7;
    }
    *a3 = v6;
    *((_DWORD *)a3 + 2) = v5;
  }
  return result;
}

BOOL sub_1C4A0D994(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 8))
      {
        v6 = *(_DWORD *)(a1 + 8);
        v7 = *(_QWORD *)a1;
        v8 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a2 - 12) = v7;
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3uLL:
      sub_1C4A0D8A4((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12));
      return 1;
    case 4uLL:
      sub_1C4A0DC04(a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      v18 = (uint64_t *)(a1 + 12);
      v19 = (uint64_t *)(a1 + 24);
      v20 = (uint64_t *)(a1 + 36);
      sub_1C4A0DC04(a1, a1 + 12, a1 + 24, a1 + 36);
      if (*(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 44))
      {
        v21 = *(_DWORD *)(a1 + 44);
        v22 = *v20;
        v23 = *(_DWORD *)(a2 - 4);
        *v20 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 44) = v23;
        *(_QWORD *)(a2 - 12) = v22;
        *(_DWORD *)(a2 - 4) = v21;
        if (*(_DWORD *)(a1 + 44) < *(_DWORD *)(a1 + 32))
        {
          v24 = *(_DWORD *)(a1 + 32);
          v25 = *v19;
          *v19 = *v20;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 44);
          *v20 = v25;
          *(_DWORD *)(a1 + 44) = v24;
          if (*(_DWORD *)(a1 + 32) < *(_DWORD *)(a1 + 20))
          {
            v26 = *(_DWORD *)(a1 + 20);
            v27 = *v18;
            *v18 = *v19;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
            *v19 = v27;
            *(_DWORD *)(a1 + 32) = v26;
            if (*(_DWORD *)(a1 + 20) < *(_DWORD *)(a1 + 8))
            {
              v28 = *(_DWORD *)(a1 + 8);
              v29 = *(_QWORD *)a1;
              *(_QWORD *)a1 = *v18;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
              *v18 = v29;
              *(_DWORD *)(a1 + 20) = v28;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 24;
      sub_1C4A0D8A4((uint64_t *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24));
      v10 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)(v10 + 8);
    if (v13 < *(_DWORD *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_QWORD *)(v16 + 36) = *(_QWORD *)(a1 + v15 + 24);
        *(_DWORD *)(v16 + 44) = *(_DWORD *)(a1 + v15 + 32);
        if (v15 == -24)
          break;
        v15 -= 12;
        if (v13 >= *(_DWORD *)(v16 + 20))
        {
          v17 = a1 + v15 + 36;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_QWORD *)v17 = v14;
      *(_DWORD *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 12 == a2;
    }
    v9 = v10;
    v11 += 12;
    v10 += 12;
    if (v10 == a2)
      return 1;
  }
}

uint64_t *sub_1C4A0DC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;

  result = sub_1C4A0D8A4((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 8) < *(_DWORD *)(a3 + 8))
  {
    v9 = *(_DWORD *)(a3 + 8);
    v10 = *(_QWORD *)a3;
    v11 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)(a3 + 8) = v11;
    *(_QWORD *)a4 = v10;
    *(_DWORD *)(a4 + 8) = v9;
    if (*(_DWORD *)(a3 + 8) < *(_DWORD *)(a2 + 8))
    {
      v12 = *(_DWORD *)(a2 + 8);
      v13 = *(_QWORD *)a2;
      v14 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = v14;
      *(_QWORD *)a3 = v13;
      *(_DWORD *)(a3 + 8) = v12;
      if (*(_DWORD *)(a2 + 8) < *(_DWORD *)(a1 + 8))
      {
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_QWORD *)a1;
        v17 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = v17;
        *(_QWORD *)a2 = v16;
        *(_DWORD *)(a2 + 8) = v15;
      }
    }
  }
  return result;
}

uint64_t *sub_1C4A0DCD0(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;
  int v90;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*(_DWORD *)(v37 + 8) > *(_DWORD *)(*v8 + 8))
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C4A0E3B8(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C4A0E628(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = sub_1C4A0E628(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*(_DWORD *)(v42 + 8) > *(_DWORD *)(v43 + 8))
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = *(_DWORD *)(*v41 + 8);
          if (v46 > *(_DWORD *)(*v40 + 8))
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 > *(_DWORD *)(*v39 + 8))
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 > *(_DWORD *)(*v8 + 8))
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(_DWORD *)(v54 + 8);
                if (v56 > *(_DWORD *)(v55 + 8))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 <= *(_DWORD *)(v55 + 8))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v49;
              v90 = *(_DWORD *)(v88 + 8);
              if (v90 > *(_DWORD *)(v89 + 8))
              {
                do
                {
                  *v49 = v89;
                  v89 = *(v49 - 2);
                  --v49;
                }
                while (v90 > *(_DWORD *)(v89 + 8));
                *v49 = v88;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < v10 && *(_DWORD *)(v65 + 8) > *(_DWORD *)(v64[1] + 8))
                {
                  v65 = v64[1];
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                result = &v8[v62];
                v66 = *result;
                v67 = *(_DWORD *)(*result + 8);
                if (*(_DWORD *)(v65 + 8) <= v67)
                {
                  do
                  {
                    v68 = v64;
                    *result = v65;
                    if (v60 < v63)
                      break;
                    v69 = (2 * v63) | 1;
                    v64 = &v8[v69];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < v10 && *(_DWORD *)(v65 + 8) > *(_DWORD *)(v64[1] + 8))
                    {
                      v65 = v64[1];
                      ++v64;
                      v69 = v70;
                    }
                    result = v68;
                    v63 = v69;
                  }
                  while (*(_DWORD *)(v65 + 8) <= v67);
                  *v68 = v66;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v71 = 0;
              v72 = *v8;
              v73 = v8;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v79 = 2 * v71 + 2;
                if (v79 < v10)
                {
                  result = (uint64_t *)*(unsigned int *)(v76 + 8);
                  if ((int)result > *(_DWORD *)(v75[1] + 8))
                  {
                    v76 = v75[1];
                    ++v75;
                    v78 = v79;
                  }
                }
                *v73 = v76;
                v73 = v75;
                v71 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v80 = (char *)v75 - (char *)v8 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v8[v81];
                  v83 = *v82;
                  v84 = *v75;
                  v85 = *(_DWORD *)(*v75 + 8);
                  if (*(_DWORD *)(*v82 + 8) > v85)
                  {
                    do
                    {
                      v86 = v82;
                      *v75 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v8[v81];
                      v83 = *v82;
                      v75 = v86;
                    }
                    while (*(_DWORD *)(*v82 + 8) > v85);
                    *v86 = v84;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C4A0E3B8(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C4A0E3B8(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C4A0E3B8(v7 + 1, v12 - 1, a2 - 2);
          sub_1C4A0E3B8(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C4A0E3B8(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 8);
          if (*(_DWORD *)(*(v7 - 1) + 8) > v15)
            goto LABEL_12;
          if (v15 <= *(_DWORD *)(*(a2 - 1) + 8))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 <= *(_DWORD *)(*v8 + 8));
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 <= *(_DWORD *)(v28 + 8));
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 > *(_DWORD *)(v31 + 8));
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 <= *(_DWORD *)(v34 + 8));
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 > *(_DWORD *)(v35 + 8));
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 8);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 8) > v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 8) <= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 8) <= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*(_DWORD *)(v24 + 8) > v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*(_DWORD *)(v25 + 8) <= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C4A0DCD0(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C4A0E440(v7, v8 - 1);
        result = (uint64_t *)sub_1C4A0E440(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C4A0E3B8(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 8);
  v6 = *(_DWORD *)(*result + 8);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 8);
  if (v5 <= v6)
  {
    if (v8 > v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 8) > *(_DWORD *)(*result + 8))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 <= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 8) <= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C4A0E440(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 8) > *(_DWORD *)(*a1 + 8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C4A0E3B8(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C4A0E628(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1C4A0E628(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_DWORD *)(v21 + 8) > *(_DWORD *)(v22 + 8))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_DWORD *)(*v20 + 8);
        if (v25 > *(_DWORD *)(*v19 + 8))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 > *(_DWORD *)(*v18 + 8))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 > *(_DWORD *)(*a1 + 8))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C4A0E3B8(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 8);
    if (v14 > *(_DWORD *)(*v8 + 8))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 <= *(_DWORD *)(v13 + 8))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C4A0E628(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C4A0E3B8(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*a4 + 8) > *(_DWORD *)(*a3 + 8))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)(*a3 + 8) > *(_DWORD *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)(*a2 + 8) > *(_DWORD *)(*a1 + 8))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1C4A0E6BC(uint64_t result, unsigned int *a2, int a3, int a4)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  _BOOL4 v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL4 v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  __int16 v35;
  __int16 v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  _BYTE *v41;
  _BOOL4 v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;

  v6 = result;
  v7 = *a2;
  v8 = (*a2 >> 8) & 0xFFF;
  v9 = v8 - 25;
  if ((v8 - 25) >= 0x10)
    v10 = 16;
  else
    v10 = 32;
  if (v9 >= 0x10)
    v9 = v8 - 1;
  if (v8)
    v11 = (v8 - 25) >= 0x10;
  else
    v11 = 0;
  if (v8)
    v12 = v10;
  else
    v12 = 0;
  if (v8)
    v13 = v9;
  else
    v13 = 0;
  if ((v7 & 0x1000000) != 0
    && (v14 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 32),
        v15 = *(_QWORD *)(v14 + 16),
        *(_BYTE *)(v15 + 362)))
  {
    v46 = v12;
    v16 = *(_QWORD *)(v14 + 40);
    v17 = a2[1];
    if ((v17 & 0x80000000) != 0)
      v18 = (uint64_t *)(*(_QWORD *)(v16 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
    else
      v18 = (uint64_t *)(*(_QWORD *)(v16 + 272) + 8 * v17);
    v20 = *v18;
    if (*v18)
    {
      while ((*(_DWORD *)v20 & 0x81000000) != 0)
      {
        v20 = *(_QWORD *)(v20 + 24);
        if (!v20)
          goto LABEL_24;
      }
      v42 = v11;
      v44 = v15;
      v39 = v16;
      v41 = (_BYTE *)(v15 + 305);
      v21 = *(_QWORD *)(v20 + 8);
LABEL_26:
      result = sub_1C4C915C4(**(unsigned __int16 **)(v21 + 16));
      if ((result & 0xFF00000000) == 0
        || (result - 164) < 4
        || (result - 78) < 3
        || *(_BYTE *)(v44 + 303)
        || *v41)
      {
        v16 = v39;
        while (1)
        {
          v20 = *(_QWORD *)(v20 + 24);
          if (!v20)
            break;
          if ((*(_DWORD *)v20 & 0x81000000) == 0 && *(_QWORD *)(v20 + 8) != v21)
          {
            v21 = *(_QWORD *)(v20 + 8);
            goto LABEL_26;
          }
        }
        v19 = 1;
        v11 = v42;
        v15 = v44;
      }
      else
      {
        v19 = 0;
        v11 = v42;
        v15 = v44;
        v16 = v39;
      }
    }
    else
    {
LABEL_24:
      v41 = (_BYTE *)(v15 + 305);
      v19 = 1;
    }
    if ((v17 & 0x80000000) != 0)
      v22 = (uint64_t *)(*(_QWORD *)(v16 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
    else
      v22 = (uint64_t *)(*(_QWORD *)(v16 + 272) + 8 * v17);
    v23 = *v22;
    if (*v22)
    {
      while ((*(_DWORD *)v23 & 0x81000000) != 0)
      {
        v23 = *(_QWORD *)(v23 + 24);
        if (!v23)
          goto LABEL_58;
      }
      v45 = v15;
      v40 = a4;
      v24 = *(_QWORD *)(v23 + 8);
      result = sub_1C4C915C4(**(unsigned __int16 **)(v24 + 16));
      if ((result & 0xFF00000000) != 0)
      {
        while (2)
        {
          if ((result - 164) >= 4 && (result - 78) >= 3 && !*(_BYTE *)(v45 + 303) && !*v41)
          {
            v43 = v11;
            while (1)
            {
              v23 = *(_QWORD *)(v23 + 24);
              if (!v23)
              {
                a4 = v40;
                LOBYTE(v11) = v43;
                goto LABEL_58;
              }
              if ((*(_DWORD *)v23 & 0x81000000) == 0)
              {
                v25 = *(_QWORD *)(v23 + 8);
                if (v25 != v24)
                  break;
              }
            }
            result = sub_1C4C915C4(**(unsigned __int16 **)(v25 + 16));
            v24 = v25;
            v11 = v43;
            if ((result & 0xFF00000000) != 0)
              continue;
          }
          break;
        }
      }
      if ((v19 & 1) == 0)
        llvm::report_fatal_error((llvm *)"IR Reg used by both PBETPU and FFBRIA inst kinds. Unsupported interleave", (const char *)1);
      v19 = 1;
      a4 = v40;
    }
LABEL_58:
    v12 = v46;
  }
  else
  {
    v19 = 0;
  }
  v26 = v13 * v12;
  if (!v8)
    v26 = 0;
  v27 = a3 != 81;
  v28 = v26 >> 5;
  v29 = v26 >> 3;
  v30 = (v27 & v19) == 0;
  if ((v27 & v19) != 0)
    v31 = v28;
  else
    v31 = 0;
  v32 = v31 + a4;
  if (v30)
    v33 = a3;
  else
    v33 = 81;
  if (!v30)
    LOWORD(v29) = 0;
  v34 = v32 >> 31;
  if (v8 != 0 && v11)
    v35 = 130;
  else
    v35 = 129;
  v36 = v29 + v35;
  v37 = v32 & 0x7FFFFFFF;
  v38 = *(_DWORD *)v6 & 0xFFF00000;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = v33;
  *(_DWORD *)(v6 + 24) = 0;
  *(_DWORD *)v6 = v38 & 0xFFF000FF | ((v36 & 0xFFF | (v7 >> 20) & 0x100 | ((_WORD)v34 << 9) & 0xFFF) << 8) | 7;
  *(_DWORD *)(v6 + 4) = v37;
  return result;
}

unint64_t sub_1C4A0E9E4(unint64_t result, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4 >= *(_DWORD *)(result + 12))
  {
    v11 = a2;
    v7 = a3[1];
    v12 = *a3;
    v13 = v7;
    result = sub_1C4A0EA78(result, (unint64_t)&v11);
    v8 = *(_QWORD *)v3 + 40 * *(unsigned int *)(v3 + 8);
    v9 = *(_QWORD *)(result + 32);
    v10 = *(_OWORD *)(result + 16);
    *(_OWORD *)v8 = *(_OWORD *)result;
    *(_OWORD *)(v8 + 16) = v10;
    *(_QWORD *)(v8 + 32) = v9;
  }
  else
  {
    v5 = *(_QWORD *)result + 40 * v4;
    *(_QWORD *)v5 = a2;
    v6 = *a3;
    *(_OWORD *)(v5 + 24) = a3[1];
    *(_OWORD *)(v5 + 8) = v6;
  }
  ++*(_DWORD *)(v3 + 8);
  return result;
}

unint64_t sub_1C4A0EA78(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 40 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 40);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 40);
    }
  }
  return v2;
}

uint64_t sub_1C4A0EAF0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4A00AE8(v0);
}

__n128 sub_1C4A0EB18(__n128 *a1, int **a2, _WORD *a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7ED2B0, "dense-ipr-alloc", 0xFuLL);
  result = *a1;
  xmmword_1ED7ED2D0 = (__int128)*a1;
  v7 = *a2;
  dword_1ED7ED330 = **a2;
  byte_1ED7ED344 = 1;
  dword_1ED7ED340 = *v7;
  word_1ED7ED2BA = (32 * (*a3 & 3)) | word_1ED7ED2BA & 0xFF9F;
  return result;
}

uint64_t sub_1C4A0EBA0()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Densely allocate IPR regs";
  v4.n128_u64[1] = 25;
  v3 = &v2;
  v1 = 1;
  v2 = 2;
  sub_1C614FF54(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED7ED2B0, &dword_1C475E000);
}

uint64_t sub_1C4A0EC08(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t IncompleteVirtualRegister;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::LiveInterval *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::LiveInterval *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  llvm::LiveInterval *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v71;
  uint64_t v72;
  llvm::MachineFunction *v73;
  llvm::MachineInstr *v74;
  llvm::MachineInstr *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  int v82;
  char v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *i;
  _QWORD *v91;
  _QWORD *v92;
  unsigned int v93;
  uint64_t v94;
  unsigned __int8 *v95[2];
  int v96;
  _DWORD v97[4];
  uint64_t (**v98)();
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char *v103;
  uint64_t v104;
  _QWORD v105[6];

  v105[4] = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  *(_QWORD *)(a1 + 248) = v4;
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  *(_QWORD *)(a1 + 264) = a2[5];
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 272) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::LiveIntervals::ID);
  v7 = (_QWORD *)a2[41];
  for (i = a2 + 40; v7 != i; v7 = (_QWORD *)v91[1])
  {
    v8 = v7 + 6;
    v91 = v7;
    v92 = v7 + 6;
    v9 = v7[7];
    if ((_QWORD *)v9 != v7 + 6)
    {
      do
      {
        v10 = **(unsigned __int16 **)(v9 + 16);
        v11 = sub_1C4C915C4(v10);
        if ((v11 & 0xFF00000000) != 0)
        {
          v12 = (_DWORD)v11 == 85 || (_DWORD)v11 == 18;
          if (v12)
          {
            v13 = *(_QWORD *)(v9 + 32) + 32 * sub_1C4C2FD5C(v10);
            v14 = *(unsigned int *)(v13 + 4);
            v15 = *(_QWORD *)(a1 + 264);
            if (!llvm::MachineRegisterInfo::hasOneNonDBGUse(v15, *(_DWORD *)(v13 + 4)))
            {
              v94 = v14 & 0x7FFFFFFF;
              v16 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 16 * v94) & 0xFFFFFFFFFFFFFFF8;
              IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v15, "", 0);
              *(_QWORD *)(*(_QWORD *)(v15 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v16;
              v18 = *(_QWORD *)(v15 + 8);
              if (v18)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 24))(v18, IncompleteVirtualRegister);
              v103 = (char *)v105;
              v104 = 0x400000000;
              v19 = *(_QWORD *)(a1 + 264);
              v93 = IncompleteVirtualRegister;
              if ((v14 & 0x80000000) != 0)
                v20 = (uint64_t *)(*(_QWORD *)(v19 + 24) + 16 * v94 + 8);
              else
                v20 = (uint64_t *)(*(_QWORD *)(v19 + 272) + 8 * v14);
              v21 = *v20;
              if (*v20)
              {
                if ((*(_BYTE *)(v21 + 3) & 1) != 0
                  || (v21 = *(_QWORD *)(v21 + 24)) != 0 && (*(_BYTE *)(v21 + 3) & 1) != 0)
                {
                  LODWORD(v22) = 0;
                  v23 = *(_QWORD *)(v21 + 8);
                  v24 = 4;
LABEL_23:
                  if (v22 >= v24)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, (uint64_t)v105, v22 + 1, 8);
                    LODWORD(v22) = v104;
                  }
                  *(_QWORD *)&v103[8 * v22] = v23;
                  v22 = (v104 + 1);
                  LODWORD(v104) = v104 + 1;
                  v25 = *(_QWORD *)(v21 + 8);
                  while (1)
                  {
                    v21 = *(_QWORD *)(v21 + 24);
                    if (!v21 || (*(_BYTE *)(v21 + 3) & 1) == 0)
                      break;
                    v23 = *(_QWORD *)(v21 + 8);
                    if (v23 != v25)
                    {
                      v24 = HIDWORD(v104);
                      goto LABEL_23;
                    }
                  }
                  if ((_DWORD)v22)
                  {
                    v26 = v103;
                    v27 = 8 * v22;
                    do
                    {
                      v28 = *(_QWORD *)v26;
                      if (**(_WORD **)(*(_QWORD *)v26 + 16) != 19)
                      {
                        v29 = **(_DWORD **)(v28 + 32);
                        v30 = *(_QWORD *)(a1 + 264);
                        v31 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v30, "", 0);
                        v32 = v31;
                        *(_QWORD *)(*(_QWORD *)(v30 + 24) + 16 * (v31 & 0x7FFFFFFF)) = &off_1E7FB1568;
                        v33 = *(_QWORD *)(v30 + 8);
                        if (v33)
                          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 24))(v33, v31);
                        llvm::MachineOperand::setReg(*(_QWORD *)(v28 + 32), v31);
                        **(_DWORD **)(v28 + 32) &= 0xFFF000FF;
                        **(_DWORD **)(v28 + 32) &= ~0x10000000u;
                        v34 = *(_QWORD *)(v28 + 24);
                        v101 = 0u;
                        v102 = 0u;
                        v99 = 0u;
                        v100 = 0u;
                        v35 = *(_QWORD *)(v34 + 32);
                        v98 = &off_1E816EC08;
                        *(_QWORD *)&v99 = v35;
                        *(_QWORD *)&v100 = *(_QWORD *)(v35 + 40);
                        *((_QWORD *)&v99 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 16) + 104))(*(_QWORD *)(v35 + 16));
                        v95[0] = 0;
                        if (*((_QWORD *)&v100 + 1))
                        {
                          llvm::MetadataTracking::untrack((uint64_t)&v100 + 8, *((unsigned __int8 **)&v100 + 1));
                          *((unsigned __int8 **)&v100 + 1) = v95[0];
                          if (v95[0])
                            llvm::MetadataTracking::retrack((uint64_t)v95, v95[0], (uint64_t)&v100 + 8);
                        }
                        else
                        {
                          *((_QWORD *)&v100 + 1) = 0;
                        }
                        *((_QWORD *)&v101 + 1) = v28;
                        *(_QWORD *)&v102 = 0;
                        *(_QWORD *)&v101 = *(_QWORD *)(v28 + 24);
                        *((_QWORD *)&v101 + 1) = v28;
                        if ((__int128 *)(v28 + 56) != (__int128 *)((char *)&v100 + 8))
                        {
                          if (*((_QWORD *)&v100 + 1))
                            llvm::MetadataTracking::untrack((uint64_t)&v100 + 8, *((unsigned __int8 **)&v100 + 1));
                          v36 = *(unsigned __int8 **)(v28 + 56);
                          *((_QWORD *)&v100 + 1) = v36;
                          if (v36)
                            llvm::MetadataTracking::track((uint64_t)&v100 + 8, v36, 2);
                        }
                        v37 = *(_QWORD *)(v28 + 8);
                        *(_QWORD *)&v101 = *(_QWORD *)(v28 + 24);
                        *((_QWORD *)&v101 + 1) = v37;
                        v97[0] = v14;
                        v97[2] = 1;
                        LODWORD(v95[0]) = v31;
                        v96 = 0;
                        ((void (*)(uint64_t (***)(), uint64_t, _DWORD *, uint64_t, unsigned __int8 **, uint64_t, _QWORD))v98[4])(&v98, 19, v97, 1, v95, 1, 0);
                        **(_DWORD **)(v38 + 32) = **(_DWORD **)(v38 + 32) & 0xFFF000FF | v29 & 0xFFF00;
                        **(_DWORD **)(v38 + 32) = **(_DWORD **)(v38 + 32) & 0xEFFFFFFF | v29 & 0x10000000;
                        sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 288), v38, 0);
                        v39 = *(_QWORD *)(a1 + 272);
                        v40 = (llvm::LiveInterval *)sub_1C4851220(v39, v32);
                        v41 = *(_QWORD *)(v39 + 304);
                        v42 = *(_QWORD *)(v39 + 248);
                        *(_QWORD *)v41 = v42;
                        *(_QWORD *)(v41 + 8) = *(_QWORD *)(v42 + 40);
                        *(_OWORD *)(v41 + 16) = *(_OWORD *)(v39 + 288);
                        *(_QWORD *)(v41 + 32) = v39 + 312;
                        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v41);
                        *(_DWORD *)(v41 + 184) = 0;
                        v43 = *(_QWORD *)(v39 + 256);
                        v12 = *(_BYTE *)(v43 + 16) == 0;
                        v44 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v43 + 24)
                                                              + 16 * (*((_DWORD *)v40 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                 + 34);
                        v46 = !v12 && v44 != 0;
                        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v39 + 304), v40, v46);
                        llvm::LiveIntervals::computeDeadValues(v39, (uint64_t)v40, 0);
                        v98 = &off_1E816EC08;
                        if (*((_QWORD *)&v100 + 1))
                          llvm::MetadataTracking::untrack((uint64_t)&v100 + 8, *((unsigned __int8 **)&v100 + 1));
                      }
                      v26 += 8;
                      v27 -= 8;
                    }
                    while (v27);
                  }
                }
              }
              v47 = *(_QWORD *)(a1 + 264);
              if ((v14 & 0x80000000) != 0)
                v48 = (uint64_t *)(*(_QWORD *)(v47 + 24) + 16 * v94 + 8);
              else
                v48 = (uint64_t *)(*(_QWORD *)(v47 + 272) + 8 * v14);
              v49 = *v48;
              if (*v48)
              {
                if ((*(_BYTE *)(v49 + 3) & 1) != 0
                  || (v49 = *(_QWORD *)(v49 + 24)) != 0 && (*(_BYTE *)(v49 + 3) & 1) != 0)
                {
                  v72 = *(_QWORD *)(v49 + 8);
LABEL_90:
                  v73 = (llvm::MachineFunction *)v91[4];
                  v74 = (llvm::MachineInstr *)*((_QWORD *)v73 + 28);
                  if (v74)
                    *((_QWORD *)v73 + 28) = *(_QWORD *)v74;
                  else
                    v74 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v73 + 128, 72, 3);
                  v75 = llvm::MachineInstr::MachineInstr(v74, v73, (const llvm::MachineInstr *)v72);
                  llvm::MachineInstr::substituteRegister((uint64_t)v75, v14, v93, 0, *(_QWORD **)(a1 + 256));
                  v76 = *(_QWORD *)(v72 + 24);
                  if (v76 + 48 != v72 && (*(_WORD *)(v72 + 44) & 4) != 0)
                    *((_WORD *)v74 + 22) |= 0xCu;
                  sub_1C512CA10((uint64_t *)(v76 + 40), (uint64_t *)v72, (uint64_t)v74);
                  sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 288), (uint64_t)v74, 0);
                  v77 = *(_QWORD *)(v49 + 8);
                  while (1)
                  {
                    v49 = *(_QWORD *)(v49 + 24);
                    if (!v49 || (*(_BYTE *)(v49 + 3) & 1) == 0)
                      break;
                    v72 = *(_QWORD *)(v49 + 8);
                    if (v72 != v77)
                      goto LABEL_90;
                  }
                }
              }
              llvm::MachineInstr::substituteRegister(v9, v14, v93, 0, *(_QWORD **)(a1 + 256));
              v50 = *(_QWORD *)(a1 + 272);
              v51 = (llvm::LiveInterval *)sub_1C4851220(v50, v93);
              v52 = *(_QWORD *)(v50 + 304);
              v53 = *(_QWORD *)(v50 + 248);
              *(_QWORD *)v52 = v53;
              *(_QWORD *)(v52 + 8) = *(_QWORD *)(v53 + 40);
              *(_OWORD *)(v52 + 16) = *(_OWORD *)(v50 + 288);
              *(_QWORD *)(v52 + 32) = v50 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v52);
              *(_DWORD *)(v52 + 184) = 0;
              v54 = *(_QWORD *)(v50 + 256);
              v12 = *(_BYTE *)(v54 + 16) == 0;
              v55 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v54 + 24) + 16
                                                                            * (*((_DWORD *)v51 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                       + 34);
              v57 = !v12 && v55 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v50 + 304), v51, v57);
              llvm::LiveIntervals::computeDeadValues(v50, (uint64_t)v51, 0);
              v58 = *(_QWORD *)(a1 + 272);
              v59 = *(_QWORD *)(v58 + 408);
              v60 = *(_QWORD *)(v59 + 8 * v94);
              if (v60)
              {
                v61 = *(_QWORD *)(v60 + 104);
                if (v61)
                {
                  do
                  {
                    v79 = *(_QWORD *)(v61 + 96);
                    v78 = *(_QWORD *)(v61 + 104);
                    *(_QWORD *)(v61 + 96) = 0;
                    if (v79)
                    {
                      sub_1C47655E8(v79, *(_QWORD **)(v79 + 8));
                      MEMORY[0x1CAA32FC0](v79, 0x1020C4062D53EE8);
                    }
                    v80 = *(void **)(v61 + 64);
                    if (v80 != (void *)(v61 + 80))
                      free(v80);
                    if (*(_QWORD *)v61 != v61 + 16)
                      free(*(void **)v61);
                    v61 = v78;
                  }
                  while (v78);
                }
                v62 = *(_QWORD *)(v60 + 96);
                *(_QWORD *)(v60 + 96) = 0;
                *(_QWORD *)(v60 + 104) = 0;
                if (v62)
                {
                  sub_1C47655E8(v62, *(_QWORD **)(v62 + 8));
                  MEMORY[0x1CAA32FC0](v62, 0x1020C4062D53EE8);
                }
                v63 = *(void **)(v60 + 64);
                if (v63 != (void *)(v60 + 80))
                  free(v63);
                if (*(_QWORD *)v60 != v60 + 16)
                  free(*(void **)v60);
                MEMORY[0x1CAA32FC0](v60, 0x10A0C408DA535C6);
                v59 = *(_QWORD *)(v58 + 408);
              }
              *(_QWORD *)(v59 + 8 * v94) = 0;
              v64 = *(_QWORD *)(a1 + 272);
              v65 = (llvm::LiveInterval *)sub_1C4851220(v64, v14);
              v66 = *(_QWORD *)(v64 + 304);
              v67 = *(_QWORD *)(v64 + 248);
              *(_QWORD *)v66 = v67;
              *(_QWORD *)(v66 + 8) = *(_QWORD *)(v67 + 40);
              *(_OWORD *)(v66 + 16) = *(_OWORD *)(v64 + 288);
              *(_QWORD *)(v66 + 32) = v64 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v66);
              *(_DWORD *)(v66 + 184) = 0;
              v68 = *(_QWORD *)(v64 + 256);
              v12 = *(_BYTE *)(v68 + 16) == 0;
              v69 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v68 + 24) + 16
                                                                            * (*((_DWORD *)v65 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                       + 34);
              v71 = !v12 && v69 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v64 + 304), v65, v71);
              llvm::LiveIntervals::computeDeadValues(v64, (uint64_t)v65, 0);
              if (v103 != (char *)v105)
                free(v103);
              v8 = v92;
              if (!v9)
                goto LABEL_86;
            }
          }
        }
        if ((*(_BYTE *)v9 & 4) == 0)
        {
LABEL_86:
          while ((*(_WORD *)(v9 + 44) & 8) != 0)
            v9 = *(_QWORD *)(v9 + 8);
        }
        v9 = *(_QWORD *)(v9 + 8);
      }
      while ((_QWORD *)v9 != v8);
    }
  }
  v81 = *(_QWORD *)(a1 + 264);
  v82 = *(_DWORD *)(v81 + 32);
  if (v82)
  {
    v83 = 0;
    v84 = 0;
    v85 = *(_QWORD *)(a1 + 272);
    v86 = *(_DWORD *)(v85 + 416);
    do
    {
      v87 = v84 & 0x7FFFFFFF;
      if (v87 < v86)
      {
        if (*(_QWORD *)(*(_QWORD *)(v85 + 408) + 8 * v87))
        {
          v88 = (_QWORD *)(*(_QWORD *)(v81 + 24) + 16 * v87);
          if ((__int16 ***)(*v88 & 0xFFFFFFFFFFFFFFF8) == &off_1E7FADAE8)
          {
            *v88 = &off_1E7FB1568;
            v83 = 1;
          }
        }
      }
      ++v84;
    }
    while (v82 != v84);
  }
  else
  {
    v83 = 0;
  }
  return v83 & 1;
}

uint64_t sub_1C4A0F598(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeSlotIndexesPass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "AGX3IRCanonicalizer";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "agx3-ir-canonicalizer";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &unk_1ED7ED370;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C615023C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

const char *sub_1C4A0F634()
{
  return "AGX3 IR canonicalizer pass";
}

BOOL sub_1C4A0F644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  __int16 ***v12;
  BOOL v13;
  int v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  char v58;
  llvm::LiveInterval *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  unsigned int v86;
  int32x2_t *v87;
  int32x2_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  int v93;
  int v94;
  llvm::LiveInterval *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v103;
  int v104;
  void **v106;
  void **v107;
  llvm::LiveInterval *v108;
  llvm::LiveInterval *v109;
  llvm::LiveInterval *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  llvm::LiveInterval **v114;
  uint64_t v115;
  int64x2_t v116;
  int64x2_t v117;
  void *v118;
  uint64_t v119;
  _BYTE v120[32];
  void *v121;
  uint64_t v122;
  _QWORD v123[18];

  v123[16] = *MEMORY[0x1E0C80C00];
  v121 = v123;
  v122 = 0x1000000000;
  v115 = 1;
  v116 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v117 = v116;
  v118 = v120;
  v119 = 0x400000000;
  v4 = a1 + 48;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 40);
  v7 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v7 || (*(_BYTE *)v7 & 4) == 0)
  {
    while ((*(_WORD *)(v7 + 44) & 4) != 0)
      v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v7 != v4)
  {
    v8 = &v118;
    v9 = a2 + 312;
    while (1)
    {
      if (**(_WORD **)(v7 + 16) != 19)
        goto LABEL_18;
      v10 = *(_DWORD **)(v7 + 32);
      v11 = v10[1];
      if ((v11 & 0x80000000) == 0 || (*v10 & 0xFFF00) != 0)
        goto LABEL_18;
      v12 = (__int16 ***)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 16 * (v11 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      v13 = v12 == &off_1E7FB1568 || v12 == (__int16 ***)&off_1E7FB1B88;
      if (!v13)
        goto LABEL_18;
      v14 = v10[9];
      if ((v14 & 0x80000000) == 0 || (v10[8] & 0xFFF00) != 0)
        goto LABEL_18;
      v15 = *(unsigned int *)(a2 + 416);
      if ((v14 & 0x7FFFFFFFu) >= v15
        || (v16 = *(unsigned int **)(*(_QWORD *)(a2 + 408) + 8 * (v14 & 0x7FFFFFFF))) == 0)
      {
        v106 = v8;
        v112 = v9;
        v109 = (llvm::LiveInterval *)sub_1C4851220(a2, v10[9]);
        v62 = *(_QWORD *)(a2 + 304);
        v63 = *(_QWORD *)(a2 + 248);
        *(_QWORD *)v62 = v63;
        *(_QWORD *)(v62 + 8) = *(_QWORD *)(v63 + 40);
        *(_OWORD *)(v62 + 16) = *(_OWORD *)(a2 + 288);
        *(_QWORD *)(v62 + 32) = v112;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v62);
        *(_DWORD *)(v62 + 184) = 0;
        v64 = *(_QWORD *)(a2 + 256);
        v13 = *(_BYTE *)(v64 + 16) == 0;
        v65 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v64 + 24) + 16 * (*((_DWORD *)v109 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
        v67 = !v13 && v65 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a2 + 304), v109, v67);
        llvm::LiveIntervals::computeDeadValues(a2, (uint64_t)v109, 0);
        v16 = (unsigned int *)v109;
        v9 = v112;
        v8 = v106;
        v11 = v10[1];
        v15 = *(unsigned int *)(a2 + 416);
      }
      if ((v11 & 0x7FFFFFFFu) >= v15 || (v17 = *(_QWORD *)(*(_QWORD *)(a2 + 408) + 8 * (v11 & 0x7FFFFFFF))) == 0)
      {
        v107 = v8;
        v110 = (llvm::LiveInterval *)v16;
        v113 = v9;
        v17 = sub_1C4851220(a2, v11);
        v68 = *(_QWORD *)(a2 + 304);
        v69 = *(_QWORD *)(a2 + 248);
        *(_QWORD *)v68 = v69;
        *(_QWORD *)(v68 + 8) = *(_QWORD *)(v69 + 40);
        *(_OWORD *)(v68 + 16) = *(_OWORD *)(a2 + 288);
        *(_QWORD *)(v68 + 32) = v113;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v68);
        *(_DWORD *)(v68 + 184) = 0;
        v70 = *(_QWORD *)(a2 + 256);
        v13 = *(_BYTE *)(v70 + 16) == 0;
        v71 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v70 + 24) + 16 * (*(_DWORD *)(v17 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
        v73 = !v13 && v71 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a2 + 304), (llvm::LiveInterval *)v17, v73);
        llvm::LiveIntervals::computeDeadValues(a2, v17, 0);
        v16 = (unsigned int *)v110;
        v9 = v113;
        v8 = v107;
      }
      v18 = *(unsigned int *)(v17 + 72);
      if (!(_DWORD)v18)
        goto LABEL_18;
      v19 = *(_QWORD *)(v17 + 64);
      v20 = 8 * v18;
      while ((*(_BYTE *)(*(_QWORD *)v19 + 8) & 6) != 0)
      {
        v19 += 8;
        v20 -= 8;
        if (!v20)
          goto LABEL_18;
      }
      v21 = *(_WORD *)(v7 + 44);
      v22 = v7;
      if ((v21 & 4) != 0)
      {
        do
          v22 = *(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v22 + 44) & 4) != 0);
      }
      v23 = v7;
      if ((v21 & 8) != 0)
      {
        do
          v23 = *(_QWORD *)(v23 + 8);
        while ((*(_WORD *)(v23 + 44) & 8) != 0);
      }
      v24 = *(_QWORD *)(v23 + 8);
      if (v22 != v24)
      {
        while (1)
        {
          v25 = **(unsigned __int16 **)(v22 + 16);
          v26 = v25 > 0x17;
          v27 = (1 << v25) & 0x83E000;
          if (v26 || v27 == 0)
            break;
          v22 = *(_QWORD *)(v22 + 8);
          if (v22 == v24)
          {
            v22 = v24;
            break;
          }
        }
      }
      v29 = *(_QWORD *)(a2 + 288);
      v30 = *(_QWORD *)(v29 + 368);
      v31 = *(unsigned int *)(v29 + 384);
      if ((_DWORD)v31)
      {
        LODWORD(v32) = ((v22 >> 4) ^ (v22 >> 9)) & (v31 - 1);
        v33 = (uint64_t *)(v30 + 16 * v32);
        v34 = *v33;
        if (v22 == *v33)
          goto LABEL_50;
        v35 = 1;
        while (v34 != -4096)
        {
          v36 = v32 + v35++;
          v32 = v36 & (v31 - 1);
          v34 = *(_QWORD *)(v30 + 16 * v32);
          if (v22 == v34)
          {
            v33 = (uint64_t *)(v30 + 16 * v32);
            goto LABEL_50;
          }
        }
      }
      v33 = (uint64_t *)(v30 + 16 * v31);
LABEL_50:
      v37 = v33[1] & 0xFFFFFFFFFFFFFFF8;
      v38 = v16[2];
      v39 = *(_QWORD **)v16;
      if (!(_DWORD)v38)
      {
        LODWORD(v38) = 0;
LABEL_60:
        v43 = &v39[3 * v38];
        goto LABEL_61;
      }
      v40 = v39[3 * v38 - 2];
      v41 = *(_DWORD *)(v37 + 24);
      v42 = (v40 >> 1) & 3 | *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 24);
      v43 = v39;
      v44 = v38;
      if (v41 >= v42)
        goto LABEL_60;
      do
      {
        v45 = v44 >> 1;
        v46 = v43[3 * (v44 >> 1) + 1];
        LODWORD(v46) = (v46 >> 1) & 3 | *(_DWORD *)((v46 & 0xFFFFFFFFFFFFFFF8) + 24);
        v44 -= (v44 >> 1) + 1;
        v47 = v41 >= v46;
        if (v41 >= v46)
          v48 = v45 + 1;
        else
          v48 = 0;
        v43 += 3 * v48;
        if (!v47)
          v44 = v45;
      }
      while (v44);
LABEL_61:
      v49 = &v39[3 * v38];
      if (v43 != v49
        && ((*v43 >> 1) & 3 | *(_DWORD *)((*v43 & 0xFFFFFFFFFFFFFFF8) + 24)) <= *(_DWORD *)(v37 + 24))
      {
        v50 = v43[2];
        v51 = v43[1] & 0xFFFFFFFFFFFFFFF8;
        v52 = v43 + 3;
        if (v37 == v51 && v52 == v49)
        {
          if (v50)
          {
            v54 = *(_QWORD *)(v50 + 8);
LABEL_68:
            if ((v54 & 6) != 4)
              goto LABEL_18;
            v55 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFFFF8) + 16);
            if (**(unsigned __int16 **)(v55 + 16) - 517 > 1)
              goto LABEL_18;
            v56 = v122;
            v108 = *(llvm::LiveInterval **)((v54 & 0xFFFFFFFFFFFFFFF8) + 16);
            v111 = v9;
            v57 = v8;
            if (v122 >= (unint64_t)HIDWORD(v122))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v122 + 1, 8);
              v55 = (uint64_t)v108;
              v56 = v122;
            }
            *((_QWORD *)v121 + v56) = v7;
            LODWORD(v122) = v122 + 1;
            v114 = 0;
            v58 = sub_1C4A11078((uint64_t)&v115, v55, &v114);
            v59 = v108;
            v9 = v111;
            v8 = v57;
            if ((v58 & 1) != 0)
              goto LABEL_18;
            if ((v115 & 1) != 0)
              v60 = 4;
            else
              v60 = v116.u32[2];
            if (4 * (v115 >> 1) + 4 >= 3 * v60)
            {
              v60 *= 2;
            }
            else if (v60 + ~(v115 >> 1) - HIDWORD(v115) > v60 >> 3)
            {
LABEL_77:
              LODWORD(v115) = v115 + 2;
              if (*v114 != (llvm::LiveInterval *)-4096)
                --HIDWORD(v115);
              *v114 = v59;
              v61 = v119;
              if (v119 >= (unint64_t)HIDWORD(v119))
              {
                v74 = v8;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, (uint64_t)v120, v119 + 1, 8);
                v59 = v108;
                v9 = v111;
                v8 = v74;
                v61 = v119;
              }
              *((_QWORD *)v118 + v61) = v59;
              LODWORD(v119) = v119 + 1;
              goto LABEL_18;
            }
            sub_1C4A11124((uint64_t)&v115, v60);
            v114 = 0;
            sub_1C4A11078((uint64_t)&v115, (uint64_t)v108, &v114);
            v8 = v57;
            v59 = v108;
            v9 = v111;
            goto LABEL_77;
          }
        }
        else
        {
          v54 = *(_QWORD *)(v50 + 8);
          if (v54 != v37)
            goto LABEL_68;
        }
      }
LABEL_18:
      v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      if (!v7 || (*(_BYTE *)v7 & 4) == 0)
      {
        while ((*(_WORD *)(v7 + 44) & 4) != 0)
          v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v7 == v4)
      {
        v5 = *(_QWORD *)(a1 + 32);
        break;
      }
    }
  }
  v75 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 104))(*(_QWORD *)(v5 + 16));
  if ((_DWORD)v122)
  {
    v76 = v75;
    v77 = (uint64_t *)v121;
    v78 = 8 * v122;
    do
    {
      v80 = *v77++;
      v79 = v80;
      v81 = *(_QWORD *)(v80 + 32);
      if ((__int16 ***)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 16 * (*(_DWORD *)(v81 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E7FB1568)
        v82 = 24816;
      else
        v82 = 24864;
      *(_QWORD *)(v79 + 16) = *(_QWORD *)(v76 + 8) + v82;
      llvm::MachineOperand::ChangeToImmediate((unsigned int *)(v81 + 32), 0, 0);
      v78 -= 8;
    }
    while (v78);
  }
  v83 = (uint64_t *)v118;
  if ((_DWORD)v119)
  {
    v84 = (uint64_t *)((char *)v118 + 8 * v119);
    while (1)
    {
      v85 = *v83;
      v86 = *(_DWORD *)(*(_QWORD *)(*v83 + 32) + 4);
      if (!sub_1C4778650(v6, v86))
      {
        if ((v86 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(a2 + 416)
          || (v95 = *(llvm::LiveInterval **)(*(_QWORD *)(a2 + 408) + 8 * (v86 & 0x7FFFFFFF))) == 0)
        {
          v95 = (llvm::LiveInterval *)sub_1C4851220(a2, v86);
          v98 = *(_QWORD *)(a2 + 304);
          v99 = *(_QWORD *)(a2 + 248);
          *(_QWORD *)v98 = v99;
          *(_QWORD *)(v98 + 8) = *(_QWORD *)(v99 + 40);
          *(_OWORD *)(v98 + 16) = *(_OWORD *)(a2 + 288);
          *(_QWORD *)(v98 + 32) = a2 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v98);
          *(_DWORD *)(v98 + 184) = 0;
          v100 = *(_QWORD *)(a2 + 256);
          v13 = *(_BYTE *)(v100 + 16) == 0;
          v101 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v100 + 24) + 16 * (*((_DWORD *)v95 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v103 = !v13 && v101 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a2 + 304), v95, v103);
          llvm::LiveIntervals::computeDeadValues(a2, (uint64_t)v95, 0);
        }
        llvm::LiveIntervals::shrinkToUses((_QWORD *)a2, (uint64_t)v95, 0);
        goto LABEL_129;
      }
      v87 = *(int32x2_t **)(a2 + 288);
      v88 = v87[46];
      v89 = v87[48].u32[0];
      if (!(_DWORD)v89)
        goto LABEL_123;
      LODWORD(v90) = (v89 - 1) & ((v85 >> 4) ^ (v85 >> 9));
      v91 = (uint64_t *)(*(_QWORD *)&v88 + 16 * v90);
      v92 = *v91;
      if (*v91 != v85)
        break;
LABEL_124:
      if (v91 != (uint64_t *)(*(_QWORD *)&v88 + 16 * v89))
      {
        v96 = v91[1] & 0xFFFFFFFFFFFFFFF8;
        *v91 = -8192;
        v87[47] = vadd_s32(v87[47], (int32x2_t)0x1FFFFFFFFLL);
        *(_QWORD *)(v96 + 16) = 0;
      }
      v97 = v85;
      if ((*(_BYTE *)v85 & 4) == 0)
      {
        v97 = v85;
        if ((*(_WORD *)(v85 + 44) & 8) != 0)
        {
          v97 = v85;
          do
            v97 = *(_QWORD *)(v97 + 8);
          while ((*(_WORD *)(v97 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v85 + 24) + 40, v85, *(_QWORD *)(v97 + 8));
LABEL_129:
      if (++v83 == v84)
      {
        v83 = (uint64_t *)v118;
        goto LABEL_141;
      }
    }
    v93 = 1;
    while (v92 != -4096)
    {
      v94 = v90 + v93++;
      v90 = v94 & (v89 - 1);
      v92 = *(_QWORD *)(*(_QWORD *)&v88 + 16 * v90);
      if (v92 == v85)
      {
        v91 = (uint64_t *)(*(_QWORD *)&v88 + 16 * v90);
        goto LABEL_124;
      }
    }
LABEL_123:
    v91 = (uint64_t *)(*(_QWORD *)&v88 + 16 * v89);
    goto LABEL_124;
  }
LABEL_141:
  v104 = v122;
  if (v83 != (uint64_t *)v120)
    free(v83);
  if ((v115 & 1) == 0)
    MEMORY[0x1CAA32FB4](v116.i64[0], 8);
  if (v121 != v123)
    free(v121);
  return v104 != 0;
}

BOOL sub_1C4A0FFD4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64x2_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v42;
  _QWORD v43[3];
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _BYTE v49[16];
  void *v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[128];
  _QWORD v56[17];
  _QWORD *v57;
  uint64_t v58;
  _QWORD v59[18];

  v59[16] = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[8];
  if (((a1[9] - (_QWORD)v1) & 0x7FFFFFFF8) != 8)
    return 0;
  v3 = *v1;
  v46 = 0;
  v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v3 + 32) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 16));
  v56[0] = 1;
  v4 = 1;
  v5 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v56[v4] = v5;
    v4 += 2;
  }
  while (v4 != 17);
  v57 = v59;
  v58 = 0x1000000000;
  v44[0] = 0;
  v44[1] = 0;
  v45 = 0;
  v43[0] = &v46;
  v43[1] = v44;
  v43[2] = v56;
  v7 = a1[6];
  v6 = a1 + 6;
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v8 & 4) == 0)
  {
    while ((*(_WORD *)(v8 + 44) & 4) != 0)
      v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((_QWORD *)v8 == v6)
    goto LABEL_54;
  do
  {
    sub_1C4A11344((uint64_t)v43, v8);
    v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
    if (!v8 || (*(_BYTE *)v8 & 4) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 4) != 0)
        v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while ((_QWORD *)v8 != v6);
  if (!(_DWORD)v58)
    goto LABEL_54;
  v53 = v55;
  v54 = 0x1000000000;
  v10 = *(_QWORD *)(v3 + 48);
  v9 = v3 + 48;
  v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v11 & 4) == 0)
  {
    while ((*(_WORD *)(v11 + 44) & 4) != 0)
      v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v11 == v9)
  {
LABEL_54:
    v23 = 0;
  }
  else
  {
    do
    {
      v12 = **(unsigned __int16 **)(v11 + 16);
      if ((v12 - 517) <= 1)
      {
        sub_1C4A114A0(&v50, *(_DWORD *)(*(_QWORD *)(v11 + 32) + 4), v46);
        v47 = v49;
        v48 = 0x200000000;
        if (v51)
        {
          v13 = (int *)v50;
          v14 = 4 * v51;
          do
          {
            v42 = 0;
            v42 = *v13;
            v15 = sub_1C4A1156C(v44, &v42);
            if ((int *)(v44[0] + 16 * v45) != v15)
            {
              v16 = *((_QWORD *)v15 + 1);
              v17 = v48;
              if (v48 >= (unint64_t)HIDWORD(v48))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v48 + 1, 8);
                v17 = v48;
              }
              *((_QWORD *)v47 + v17) = v16;
              LODWORD(v48) = v48 + 1;
            }
            ++v13;
            v14 -= 4;
          }
          while (v14);
          v18 = v47;
          if (v12 == 517)
            v19 = 2;
          else
            v19 = 1;
          if ((_DWORD)v48 == v19)
          {
            v20 = *(_QWORD *)v47;
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v47 + 32) + 4) == *(_DWORD *)(*(_QWORD *)(v11 + 32) + 4))
            {
              v21 = 0;
              while (v20 == *(_QWORD *)((char *)v47 + v21))
              {
                v21 += 8;
                if (8 * v48 == v21)
                {
                  v22 = v54;
                  if (v54 >= (unint64_t)HIDWORD(v54))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 8);
                    v22 = v54;
                  }
                  *((_QWORD *)v53 + v22) = v20;
                  LODWORD(v54) = v54 + 1;
                  v18 = v47;
                  break;
                }
              }
            }
          }
          if (v18 != v49)
            free(v18);
        }
        if (v50 != &v52)
          free(v50);
      }
      sub_1C4A11344((uint64_t)v43, v11);
      v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
      if (!v11 || (*(_BYTE *)v11 & 4) == 0)
      {
        while ((*(_WORD *)(v11 + 44) & 4) != 0)
          v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    while (v11 != v9);
    v23 = (_DWORD)v54 != 0;
    v24 = (uint64_t *)v53;
    if ((_DWORD)v54)
    {
      v25 = (uint64_t *)((char *)v53 + 8 * v54);
      do
      {
        v26 = *v24;
        v27 = *(_QWORD **)(*v24 + 24);
        v28 = *(_DWORD *)(*(_QWORD *)(*v24 + 32) + 4);
        v30 = (char *)v27[20];
        v29 = v27[21];
        if ((unint64_t)v30 >= v29)
        {
          v32 = (char *)v27[19];
          v33 = (v30 - v32) >> 4;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 60)
            abort();
          v35 = v29 - (_QWORD)v32;
          if (v35 >> 3 > v34)
            v34 = v35 >> 3;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
            v36 = 0xFFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            if (v36 >> 60)
              sub_1C4764EE4();
            v37 = (char *)operator new(16 * v36);
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[16 * v33];
          *(_WORD *)v38 = v28;
          *((_QWORD *)v38 + 1) = -1;
          v39 = v38;
          if (v30 != v32)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v30 - 1);
              v39 -= 16;
              v30 -= 16;
            }
            while (v30 != v32);
            v30 = (char *)v27[19];
          }
          v31 = v38 + 16;
          v27[19] = v39;
          v27[20] = v38 + 16;
          v27[21] = &v37[16 * v36];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *(_WORD *)v30 = v28;
          *((_QWORD *)v30 + 1) = -1;
          v31 = v30 + 16;
        }
        v27[20] = v31;
        v40 = v26;
        if ((*(_BYTE *)v26 & 4) == 0)
        {
          v40 = v26;
          if ((*(_WORD *)(v26 + 44) & 8) != 0)
          {
            v40 = v26;
            do
              v40 = *(_QWORD *)(v40 + 8);
            while ((*(_WORD *)(v40 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v26 + 24) + 40, v26, *(_QWORD *)(v40 + 8));
        ++v24;
      }
      while (v24 != v25);
      v24 = (uint64_t *)v53;
      v23 = 1;
    }
    if (v24 != (uint64_t *)v55)
      free(v24);
  }
  MEMORY[0x1CAA32FB4](v44[0], 8);
  if (v57 != v59)
    free(v57);
  if ((v56[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v56[1], 8);
  return v23;
}

BOOL sub_1C4A10518(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned __int16 *v25;
  int v26;
  BOOL v27;
  int v28;
  __int16 ****v29;
  __int16 ***v30;
  __int16 ****v31;
  __int16 **v32;
  __int16 v33;
  int v34;
  unsigned __int16 *v35;
  int *v36;
  int v37;
  int *v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  _BOOL8 v66;
  char *v67;
  char *v68;
  _BYTE *v69;
  _BYTE *v70;
  llvm::MachineFunction *v72;
  int v73;
  _QWORD *v75;
  _OWORD *v76;
  uint64_t v77[2];
  int v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[17];
  void *v84;
  uint64_t v85;
  _BYTE v86[128];
  int *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int *v92;
  unsigned int v93;
  uint64_t v94;
  int *v95;
  unsigned int v96;
  _QWORD v97[3];

  v97[1] = *MEMORY[0x1E0C80C00];
  v1 = a1[8];
  if (((a1[9] - v1) & 0x7FFFFFFF8) != 8)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 32) + 16);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2);
  v4 = v3;
  v77[0] = 0;
  v77[1] = 0;
  v78 = 0;
  v83[0] = 1;
  v5 = 1;
  v6 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v83[v5] = v6;
    v5 += 2;
  }
  while (v5 != 17);
  v84 = v86;
  v85 = 0x1000000000;
  v7 = a1[6];
  v75 = a1 + 6;
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v8 & 4) == 0)
  {
    while ((*(_WORD *)(v8 + 44) & 4) != 0)
      v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((_QWORD *)v8 == v75)
  {
    v66 = 0;
  }
  else
  {
    if (v3)
      v9 = (uint64_t *)(v3 + 8);
    else
      v9 = 0;
    do
    {
      v10 = *(unsigned int *)(v8 + 40);
      if ((_DWORD)v10)
      {
        v11 = *(_DWORD **)(v8 + 32);
        v12 = &v11[8 * v10];
        v76 = (_OWORD *)(v8 + 56);
        do
        {
          if ((*v11 & 0x10000FF) == 0x1000000)
          {
            sub_1C4A114A0(&v95, v11[1], v4);
            sub_1C4A115E0(v95, v96, (uint64_t)v77, 0, v4);
            if (**(_WORD **)(v8 + 16) != 518)
              goto LABEL_68;
            if (v96)
            {
              v13 = v95;
              v14 = 4 * v96;
              do
              {
                LODWORD(v87) = 0;
                v15 = *v13++;
                LODWORD(v87) = v15;
                *((_QWORD *)sub_1C4A118C0((uint64_t)v77, &v87) + 1) = v8;
                v14 -= 4;
              }
              while (v14);
            }
            v16 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 4);
            v17 = *v9;
            v19 = v9[5];
            v18 = v9[6];
            v20 = (_WORD *)(v18 + (((unint64_t)*(unsigned int *)(*v9 + 24 * v16 + 16) >> 3) & 0x1FFFFFFE));
            v21 = (unsigned __int16)*v20 + (*(_DWORD *)(*v9 + 24 * v16 + 16) & 0xF) * v16;
            do
            {
              ++v20;
              LOWORD(v22) = *(_WORD *)(v19 + 4 * (unsigned __int16)v21);
              if ((_WORD)v22)
                break;
LABEL_29:
              v21 += (unsigned __int16)*v20;
              v28 = 3;
            }
            while (*v20);
            v23 = *(unsigned __int16 *)(v19 + 4 * (unsigned __int16)v21 + 2);
            v24 = v23 << 16;
            while (!v18)
            {
LABEL_27:
              v24 = 0;
              LOWORD(v22) = v23;
              v27 = (unsigned __int16)v23 == 0;
              LOWORD(v23) = 0;
              if (v27)
                goto LABEL_29;
            }
            v25 = (unsigned __int16 *)(v18 + 2 * *(unsigned int *)(v17 + 24 * (unsigned __int16)v22 + 8));
            while (v16 == (unsigned __int16)v22)
            {
              v26 = *v25++;
              LOWORD(v22) = v26 + v22;
              if (!v26)
                goto LABEL_27;
            }
            v29 = *(__int16 *****)(v4 + 248);
            while (1)
            {
              if (*(__int16 *****)(v4 + 240) == v29)
              {
                v30 = 0;
              }
              else
              {
                v30 = 0;
                v31 = *(__int16 *****)(v4 + 240);
                do
                {
                  if ((_WORD)v22)
                  {
                    v32 = **v31;
                    if ((unint64_t)(unsigned __int16)v22 >> 3 < *((unsigned __int16 *)v32 + 11)
                      && ((1 << (v22 & 7)) & *((unsigned __int8 *)v32[1] + ((unsigned __int16)v22 >> 3))) != 0
                      && (!v30
                       || *v31 != v30
                       && ((*(_DWORD *)((char *)v30[1] + ((*((unsigned __int16 *)v32 + 12) >> 3) & 0x1FFCLL)) >> *((_WORD *)v32 + 12)) & 1) != 0))
                    {
                      v30 = *v31;
                    }
                  }
                  ++v31;
                }
                while (v31 != v29);
              }
              if (v30 == &off_1E7FB1568 || v30 == (__int16 ***)&off_1E7FADBA0)
                break;
              do
              {
                v34 = *v25++;
                v33 = v34;
                if (v34)
                {
                  LOWORD(v22) = v33 + v22;
                }
                else
                {
                  v22 = HIWORD(v24);
                  if (HIWORD(v24))
                  {
                    v24 >>= 16;
                  }
                  else
                  {
                    if (!*v20)
                      goto LABEL_68;
                    v21 += (unsigned __int16)*v20++;
                    v35 = (unsigned __int16 *)(v19 + 4 * (unsigned __int16)v21);
                    v22 = *v35;
                    v24 = v35[1] << 16;
                  }
                  v25 = (unsigned __int16 *)(v18 + 2 * *(unsigned int *)(v17 + 24 * v22 + 8));
                }
              }
              while (v16 == (unsigned __int16)v22);
              if (!v20)
                goto LABEL_68;
            }
            if ((_WORD)v22)
            {
              v73 = (unsigned __int16)v22;
              sub_1C4A114A0(&v92, (unsigned __int16)v22, v4);
              if (v93)
              {
                v36 = v92;
                if (v78)
                {
                  v37 = v78 - 1;
                  v38 = v92;
                  while (1)
                  {
                    v39 = (37 * *v38) & v37;
                    v40 = *(_DWORD *)(v77[0] + 16 * v39);
                    if (v40 != *v38)
                      break;
LABEL_62:
                    if (++v38 == &v92[v93])
                    {
                      v43 = 4 * v93;
                      do
                      {
                        LODWORD(v87) = 0;
                        v44 = *v36++;
                        LODWORD(v87) = v44;
                        v45 = sub_1C4A1156C(v77, &v87);
                        sub_1C49EAC08((uint64_t)v83, (uint64_t *)v45 + 1);
                        v43 -= 4;
                      }
                      while (v43);
                      goto LABEL_75;
                    }
                  }
                  v41 = 1;
                  while (v40 != -1)
                  {
                    v42 = v39 + v41++;
                    v39 = v42 & v37;
                    v40 = *(_DWORD *)(v77[0] + 16 * (v42 & v37));
                    if (v40 == *v38)
                      goto LABEL_62;
                  }
                }
                v28 = 3;
              }
              else
              {
LABEL_75:
                v46 = *(_QWORD *)(v8 + 24);
                v90 = 0u;
                v91 = 0u;
                v88 = 0u;
                v89 = 0u;
                v47 = *(_QWORD *)(v46 + 32);
                v87 = (int *)&off_1E816EC08;
                *(_QWORD *)&v88 = v47;
                *(_QWORD *)&v89 = *(_QWORD *)(v47 + 40);
                *((_QWORD *)&v88 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v47 + 16) + 104))(*(_QWORD *)(v47 + 16));
                v79 = 0;
                if (*((_QWORD *)&v89 + 1))
                {
                  llvm::MetadataTracking::untrack((uint64_t)&v89 + 8, *((unsigned __int8 **)&v89 + 1));
                  *((_QWORD *)&v89 + 1) = v79;
                  if (v79)
                    llvm::MetadataTracking::retrack((uint64_t)&v79, v79, (uint64_t)&v89 + 8);
                }
                else
                {
                  *((_QWORD *)&v89 + 1) = 0;
                }
                *((_QWORD *)&v90 + 1) = v8;
                *(_QWORD *)&v91 = 0;
                *(_QWORD *)&v90 = *(_QWORD *)(v8 + 24);
                *((_QWORD *)&v90 + 1) = v8;
                if (v76 != (__int128 *)((char *)&v89 + 8))
                {
                  if (*((_QWORD *)&v89 + 1))
                    llvm::MetadataTracking::untrack((uint64_t)&v89 + 8, *((unsigned __int8 **)&v89 + 1));
                  *((_QWORD *)&v89 + 1) = *(_QWORD *)v76;
                  if (*((_QWORD *)&v89 + 1))
                    llvm::MetadataTracking::track((uint64_t)&v89 + 8, *((unsigned __int8 **)&v89 + 1), 2);
                }
                v72 = sub_1C55437B8(&v87, 0x205u);
                v49 = (unint64_t *)v48;
                v50 = (unint64_t *)*((_QWORD *)&v90 + 1);
                v51 = *(_QWORD *)(v90 + 40);
                *(_QWORD *)(v48 + 24) = v51;
                v52 = *(_QWORD *)(v51 + 32);
                v53 = *(unsigned int *)(v48 + 40);
                if ((_DWORD)v53)
                {
                  v56 = *(_QWORD *)(v48 + 32);
                  v57 = *(_QWORD *)(v52 + 40);
                  v58 = 32 * v53;
                  do
                  {
                    if (!*(_BYTE *)v56)
                    {
                      v59 = *(unsigned int *)(v56 + 4);
                      if ((int)v59 >= 0)
                        v60 = (uint64_t *)(*(_QWORD *)(v57 + 272) + 8 * v59);
                      else
                        v60 = (uint64_t *)(*(_QWORD *)(v57 + 24) + 16 * (v59 & 0x7FFFFFFF) + 8);
                      v61 = *v60;
                      if (*v60)
                      {
                        v62 = *(_QWORD *)(v61 + 16);
                        *(_QWORD *)(v61 + 16) = v56;
                        *(_QWORD *)(v56 + 16) = v62;
                        if ((*(_BYTE *)(v56 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v56 + 24) = v61;
                        }
                        else
                        {
                          *(_QWORD *)(v56 + 24) = 0;
                          v60 = (uint64_t *)(v62 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v56 + 16) = v56;
                        *(_QWORD *)(v56 + 24) = 0;
                      }
                      *v60 = v56;
                    }
                    v56 += 32;
                    v58 -= 32;
                  }
                  while (v58);
                }
                v54 = *(_QWORD *)(v52 + 728);
                if (v54)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v54 + 24))(v54, v48);
                v55 = *v50 & 0xFFFFFFFFFFFFFFF8;
                *v49 = v55 | *v49 & 7;
                v49[1] = (unint64_t)v50;
                *(_QWORD *)(v55 + 8) = v49;
                *v50 = *v50 & 7 | (unint64_t)v49;
                if ((_QWORD)v91)
                  (*(void (**)(_QWORD, unint64_t *))(*(_QWORD *)v91 + 24))(v91, v49);
                v80 = 0;
                v81 = 0;
                v82 = 0;
                LODWORD(v79) = 0x1000000;
                HIDWORD(v79) = v73;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v49, v72, (const llvm::MachineOperand *)&v79);
                LODWORD(v79) = 1;
                v80 = 0;
                v81 = 0;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v49, v72, (const llvm::MachineOperand *)&v79);
                v87 = (int *)&off_1E816EC08;
                if (*((_QWORD *)&v89 + 1))
                  llvm::MetadataTracking::untrack((uint64_t)&v89 + 8, *((unsigned __int8 **)&v89 + 1));
                v28 = 2;
                v36 = v92;
              }
              if (v36 != (int *)&v94)
                free(v36);
            }
            else
            {
LABEL_68:
              v28 = 3;
            }
            if (v95 != (int *)v97)
              free(v95);
            if (v28 != 3)
              break;
          }
          v11 += 8;
        }
        while (v11 != v12);
        v63 = *(unsigned int *)(v8 + 40);
        if ((_DWORD)v63)
        {
          v64 = 32 * v63;
          v65 = (unsigned int *)(*(_QWORD *)(v8 + 32) + 4);
          do
          {
            if ((*(v65 - 1) & 0x10000FF) == 0)
            {
              if (*v65)
              {
                sub_1C4A114A0(&v87, *v65, v4);
                sub_1C4A115E0(v87, v88, (uint64_t)v77, 0, v4);
                if (v87 != (int *)((char *)&v88 + 8))
                  free(v87);
              }
            }
            v65 += 8;
            v64 -= 32;
          }
          while (v64);
        }
      }
      v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
      if (!v8 || (*(_BYTE *)v8 & 4) == 0)
      {
        while ((*(_WORD *)(v8 + 44) & 4) != 0)
          v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    while ((_QWORD *)v8 != v75);
    v66 = (_DWORD)v85 != 0;
    v67 = (char *)v84;
    if ((_DWORD)v85)
    {
      v68 = (char *)v84 + 8 * v85;
      do
      {
        v69 = *(_BYTE **)v67;
        v70 = *(_BYTE **)v67;
        if ((**(_BYTE **)v67 & 4) == 0)
        {
          v70 = *(_BYTE **)v67;
          if ((*((_WORD *)v69 + 22) & 8) != 0)
          {
            v70 = *(_BYTE **)v67;
            do
              v70 = (_BYTE *)*((_QWORD *)v70 + 1);
            while ((*((_WORD *)v70 + 22) & 8) != 0);
          }
        }
        sub_1C487FE80(*((_QWORD *)v69 + 3) + 40, (uint64_t)v69, *((_QWORD *)v70 + 1));
        v67 += 8;
      }
      while (v67 != v68);
      v67 = (char *)v84;
    }
    if (v67 != v86)
      free(v67);
  }
  if ((v83[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v83[1], 8);
  MEMORY[0x1CAA32FB4](v77[0], 8);
  return v66;
}

uint64_t sub_1C4A10DC8(uint64_t a1)
{
  unsigned __int8 v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  char v11;
  llvm::MachineBasicBlock *LoopPreheader;
  llvm::MachineBasicBlock *v13;
  uint64_t *v14;
  int v15;
  _QWORD **v16;
  int v17;
  _QWORD **v18;
  uint64_t v19;
  _BOOL4 v20;

  if (!byte_1ED7ED418)
    goto LABEL_24;
  v2 = atomic_load((unsigned __int8 *)&qword_1ED7ED388);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED388))
  {
    byte_1ED7ED381 = 1;
    __cxa_guard_release(&qword_1ED7ED388);
  }
  if (byte_1ED7ED381 != 1)
    goto LABEL_24;
  if (*(_BYTE *)(a1 + 248))
  {
    v3 = **(void ****)(a1 + 8);
    do
    {
      v4 = *v3;
      v3 += 2;
    }
    while (v4 != &llvm::LiveIntervals::ID);
    v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::LiveIntervals::ID);
  }
  else
  {
    v5 = 0;
  }
  v6 = **(void ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::MachineLoopInfo::ID);
  v8 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachineLoopInfo::ID);
  v9 = *(uint64_t **)(v8 + 272);
  v10 = *(uint64_t **)(v8 + 280);
  if (v9 != v10)
  {
    v11 = 0;
    do
    {
      LoopPreheader = llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader(*v9);
      if (LoopPreheader
        && (v13 = LoopPreheader,
            v14 = (uint64_t *)*((_QWORD *)LoopPreheader + 8),
            ((*((_QWORD *)LoopPreheader + 9) - (_QWORD)v14) & 0x7FFFFFFF8) == 8))
      {
        if (*(_BYTE *)(a1 + 248))
        {
          v19 = *v14;
          v20 = sub_1C4A0F644((uint64_t)LoopPreheader, v5);
          v17 = v20 | sub_1C4A0F644(v19, v5);
        }
        else
        {
          v15 = sub_1C4A0FFD4(LoopPreheader);
          v16 = (_QWORD **)*((_QWORD *)v13 + 8);
          if (((*((_QWORD *)v13 + 9) - (_QWORD)v16) & 0x7FFFFFFF8) == 8)
            v15 |= sub_1C4A0FFD4(*v16);
          v17 = v15 | sub_1C4A10518(v13);
          v18 = (_QWORD **)*((_QWORD *)v13 + 8);
          if (((*((_QWORD *)v13 + 9) - (_QWORD)v18) & 0x7FFFFFFF8) == 8)
            v17 |= sub_1C4A10518(*v18);
        }
      }
      else
      {
        LOBYTE(v17) = 0;
      }
      v11 |= v17;
      ++v9;
    }
    while (v9 != v10);
  }
  else
  {
LABEL_24:
    v11 = 0;
  }
  return v11 & 1;
}

uint64_t sub_1C4A10FAC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeSlotIndexesPass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  llvm::initializeMachineLoopInfoPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "AGX3SimplifyRedundantPhiElimValues";
  *(_QWORD *)(v2 + 8) = 34;
  *(_QWORD *)(v2 + 16) = "agx3-simplify-red-phi-values";
  *(_QWORD *)(v2 + 24) = 28;
  *(_QWORD *)(v2 + 32) = &unk_1ED7ED380;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C615049C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

const char *sub_1C4A11050(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 248))
    return "AGX3 Redundant PHI Copy Elim";
  else
    return "AGX3 Redundant PHI Elim CLR";
}

uint64_t sub_1C4A11078(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4A11124(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4A1128C(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4A1128C(a1, v14, v8);
}

uint64_t sub_1C4A1128C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4A11078((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1C4A11344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v5;
  _DWORD *v6;
  unsigned int v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2)
  {
    v5 = *(_DWORD **)(a2 + 32);
    v6 = &v5[8 * v2];
    do
    {
      while ((*v5 & 0x10000FF) != 0x1000000)
      {
        v5 += 8;
        if (v5 == v6)
          return;
      }
      sub_1C4A114A0(&v14, v5[1], **(_QWORD **)a1);
      sub_1C4A115E0((int *)v14, v15, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), **(_QWORD **)a1);
      v7 = **(unsigned __int16 **)(a2 + 16) - 517;
      if (v7 <= 1)
      {
        if (v15)
        {
          v8 = (int *)v14;
          v9 = 4 * v15;
          do
          {
            LODWORD(v13) = 0;
            v10 = *v8++;
            LODWORD(v13) = v10;
            *((_QWORD *)sub_1C4A118C0(*(_QWORD *)(a1 + 8), &v13) + 1) = a2;
            v9 -= 4;
          }
          while (v9);
        }
        v11 = *(_QWORD *)(a1 + 16);
        v13 = a2;
        sub_1C49EAC08(v11, &v13);
      }
      if (v14 != v16)
        free(v14);
      v5 += 8;
    }
    while (v7 >= 2 && v5 != v6);
  }
}

_QWORD *sub_1C4A114A0(_QWORD *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unsigned __int16 *v10;
  __int16 v11;
  unsigned __int16 v12;
  int v13;

  v3 = (uint64_t)result;
  v4 = 0;
  v5 = (_QWORD *)(a3 + 8);
  if (!a3)
    v5 = 0;
  v6 = *v5 + 24 * a2;
  v7 = (uint64_t)(result + 2);
  *result = result + 2;
  result[1] = 0x200000000;
  v8 = *(unsigned int *)(v6 + 16);
  v9 = (_WORD *)(v5[6] + ((v8 >> 3) & 0x1FFFFFFE));
  v11 = *v9;
  v10 = v9 + 1;
  v12 = v11 + (v8 & 0xF) * a2;
  do
  {
    if (v4 >= *(_DWORD *)(v3 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v7, v4 + 1, 4);
      v4 = *(_DWORD *)(v3 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = v12;
    v4 = *(_DWORD *)(v3 + 8) + 1;
    *(_DWORD *)(v3 + 8) = v4;
    v13 = *v10++;
    v12 += v13;
  }
  while (v13);
  return result;
}

int *sub_1C4A1156C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *result;
  int v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    result = (int *)(v2 + 16 * v4);
    v6 = *result;
    if (*a2 == *result)
      return result;
    v7 = 1;
    while (v6 != -1)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_DWORD *)(v2 + 16 * v4);
      if (*a2 == v6)
        return (int *)(v2 + 16 * v4);
    }
  }
  return (int *)(v2 + 16 * v3);
}

void sub_1C4A115E0(int *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v7;
  int *v8;
  int *v9;
  uint64_t *v10;
  char *v11;
  int v12;
  uint64_t *v13;
  int v14;
  unsigned int v15;
  _DWORD *v16;
  int v17;
  _DWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  int *v27;
  int *v28;
  int v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  v34 = 1;
  v35 = -1;
  v36 = -1;
  v37 = v39;
  v38 = 0x400000000;
  if (!a2)
    goto LABEL_42;
  v7 = a1;
  v8 = &a1[a2];
  do
  {
    v30 = *v7;
    v9 = sub_1C4A1156C((uint64_t *)a3, &v30);
    if ((int *)(*(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16)) != v9)
    {
      sub_1C4A114A0(&v31, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 1) + 32) + 4), a5);
      v10 = (uint64_t *)v31;
      if (v32)
      {
        v11 = (char *)v31 + 4 * v32;
        while (1)
        {
          if ((v34 & 1) != 0)
          {
            v12 = 4;
            v13 = &v35;
          }
          else
          {
            v12 = v36;
            if (!(_DWORD)v36)
            {
              v22 = 0;
LABEL_21:
              *sub_1C47686DC((uint64_t)&v34, (uint64_t)v10, v10, v22) = *(_DWORD *)v10;
              v23 = *(_DWORD *)v10;
              v24 = v38;
              if (v38 >= (unint64_t)HIDWORD(v38))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, (uint64_t)v39, v38 + 1, 4);
                v24 = v38;
              }
              *((_DWORD *)v37 + v24) = v23;
              LODWORD(v38) = v38 + 1;
              goto LABEL_24;
            }
            v13 = (uint64_t *)v35;
          }
          v14 = v12 - 1;
          v15 = (37 * *(_DWORD *)v10) & v14;
          v16 = (_DWORD *)v13 + v15;
          v17 = *v16;
          if (*(_DWORD *)v10 != *v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -1)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -2;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = (_DWORD *)v13 + v15;
              v17 = *v16;
              if (*(_DWORD *)v10 == *v16)
                goto LABEL_24;
            }
            if (v18)
              v22 = v18;
            else
              v22 = v16;
            goto LABEL_21;
          }
LABEL_24:
          v10 = (uint64_t *)((char *)v10 + 4);
          if (v10 == (uint64_t *)v11)
          {
            v10 = (uint64_t *)v31;
            break;
          }
        }
      }
      if (v10 != &v33)
        free(v10);
    }
    ++v7;
  }
  while (v7 != v8);
  v25 = v37;
  if ((_DWORD)v38)
  {
    v26 = 4 * v38;
    do
    {
      LODWORD(v31) = *v25;
      v27 = sub_1C4A1156C((uint64_t *)a3, &v31);
      if ((int *)(*(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16)) != v27)
      {
        v28 = v27;
        if (a4)
          sub_1C49EEB5C(a4, (_QWORD *)v27 + 1);
        *v28 = -2;
        *(int32x2_t *)(a3 + 8) = vadd_s32(*(int32x2_t *)(a3 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
      ++v25;
      v26 -= 4;
    }
    while (v26);
    v25 = v37;
  }
  if (v25 != (_DWORD *)v39)
    free(v25);
LABEL_42:
  if ((v34 & 1) == 0)
    MEMORY[0x1CAA32FB4](v35, 4);
}

_DWORD *sub_1C4A118C0(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _DWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C4A1197C(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *((_QWORD *)v6 + 1) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_DWORD *sub_1C4A1197C(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_1C4A11B00(a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v19);
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != -1)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == -2;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v19);
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1C4A11B00(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_28;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -2;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_29:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_1C4A11B00(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4A11BB8(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -1;
      result += 4;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4A11BB8(uint64_t result, int *a2, int *a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -1;
      v4 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 4)
  {
    v6 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & (37 * v6);
      v9 = *(_QWORD *)result + 16 * v8;
      v10 = *(_DWORD *)v9;
      if (v6 != *(_DWORD *)v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -1)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -2;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = *(_QWORD *)result + 16 * (v14 & v7);
          v10 = *(_DWORD *)v9;
          if (v6 == *(_DWORD *)v9)
            goto LABEL_7;
        }
        if (v11)
          v9 = v11;
      }
LABEL_7:
      *(_DWORD *)v9 = v6;
      *(_QWORD *)(v9 + 8) = *((_QWORD *)a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

__n128 sub_1C4A11C90(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7ED398, "enable-agx3-simplify-red-phi-values", 0x23uLL);
  result = *a1;
  xmmword_1ED7ED3B8 = (__int128)*a1;
  v7 = *a2;
  byte_1ED7ED418 = **a2;
  byte_1ED7ED429 = 1;
  byte_1ED7ED428 = *v7;
  word_1ED7ED3A2 = (32 * (*a3 & 3)) | word_1ED7ED3A2 & 0xFF9F;
  return result;
}

uint64_t sub_1C4A11D14()
{
  int v1;
  char v2;
  char *v3;
  __n128 v4;
  int v5;

  v4.n128_u64[0] = (unint64_t)"Eliminate Redundant Values(CLR) after phi elimination";
  v4.n128_u64[1] = 53;
  LOBYTE(v1) = 1;
  v3 = (char *)&v1;
  v5 = 1;
  sub_1C61504C8(&v4, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7ED398, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Run second pass for testing";
  v4.n128_u64[1] = 27;
  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_1C6150564(&v5, &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7ED458, &dword_1C475E000);
}

uint64_t sub_1C4A11DE0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX3 Interpolation Predication";
  *(_QWORD *)(v2 + 8) = 30;
  *(_QWORD *)(v2 + 16) = "agx3-interpolation-predication";
  *(_QWORD *)(v2 + 24) = 30;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6531;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4A11E6C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C4A11E6C()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6531);
  *result = &off_1E7FA9F68;
  return result;
}

void sub_1C4A11EAC(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C4A11F40(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4A11FCC()
{
  return "AGX3 Interpolation Predication Pass";
}

void *sub_1C4A11FDC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C4A1200C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  unsigned __int16 *v31;
  char v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v40;
  int v41;
  _OWORD *v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v56;
  int v57;
  _OWORD *v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  char *v93;
  void *__p;
  char *v95;
  uint64_t v96;
  _QWORD v97[4];
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  void *v106;
  uint64_t v107;
  _BYTE v108[64];
  uint64_t v109;
  _OWORD v110[4];
  _QWORD v111[35];

  v111[33] = *MEMORY[0x1E0C80C00];
  v97[0] = &off_1E816EC08;
  v97[1] = a2;
  v3 = *(_QWORD *)(a2 + 40);
  v100 = 0;
  v97[3] = v3;
  v97[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v4 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 305);
  v98 = 0u;
  v99 = 0u;
  if (v4)
  {
    *(_QWORD *)&v105 = &v106;
    *((_QWORD *)&v105 + 1) = 0x400000000;
    v5 = *(_QWORD *)(a2 + 328);
    if (v5 != a2 + 320)
    {
      v6 = 0;
      do
      {
        for (i = *(_QWORD *)(v5 + 56); i != v5 + 48; i = *(_QWORD *)(i + 8))
        {
          if (**(_WORD **)(i + 16) == 269)
          {
            *((_QWORD *)&v98 + 1) = v5;
            *(_QWORD *)&v99 = i;
            v8 = *(_QWORD *)(i + 32);
            LODWORD(__p) = *(_DWORD *)(v8 + 4);
            LODWORD(v95) = 1;
            LODWORD(v101) = *(_DWORD *)(v8 + 36);
            LODWORD(v103) = 0;
            (*(void (**)(_QWORD *, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))(v97[0] + 32))(v97, 19, &__p, 1, &v101, 1, 0);
            v9 = DWORD2(v105);
            if (DWORD2(v105) >= (unint64_t)HIDWORD(v105))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, (uint64_t)&v106, DWORD2(v105) + 1, 8);
              v9 = DWORD2(v105);
            }
            *(_QWORD *)(v105 + 8 * v9) = i;
            v6 = ++DWORD2(v105);
          }
          if ((*(_BYTE *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              i = *(_QWORD *)(i + 8);
          }
        }
        v5 = *(_QWORD *)(v5 + 8);
      }
      while (v5 != a2 + 320);
      v10 = (void **)v105;
      if (v6)
      {
        v11 = (void **)(v105 + 8 * v6);
        do
        {
          v12 = *v10;
          v13 = *v10;
          if ((*(_BYTE *)*v10 & 4) == 0)
          {
            v13 = *v10;
            if ((*((_WORD *)v12 + 22) & 8) != 0)
            {
              v13 = *v10;
              do
                v13 = (_BYTE *)*((_QWORD *)v13 + 1);
              while ((*((_WORD *)v13 + 22) & 8) != 0);
            }
          }
          sub_1C487FE80(*((_QWORD *)v12 + 3) + 40, (uint64_t)v12, *((_QWORD *)v13 + 1));
          ++v10;
        }
        while (v10 != v11);
        v10 = (void **)v105;
      }
      if (v10 != &v106)
        free(v10);
    }
  }
  v14 = *(_QWORD *)(a2 + 344);
  if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 176))(v14, 18))
    goto LABEL_27;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 128))(&v105, v14, 18);
  v17 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v105 + 32))(v105);
  v18 = v105;
  *(_QWORD *)&v105 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (!v17)
    goto LABEL_27;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 400))(v14, v17);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 176))(v14, 19);
  v21 = v20;
  v22 = v20;
  if (v20)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 128))(&v105, v14, 19);
    v90 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v105 + 32))(v105);
    v91 = v105;
    *(_QWORD *)&v105 = 0;
    if (v91)
      (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
    if (v90)
    {
      v92 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 400))(v14, v90);
      v22 = v92 & 0xFFFFFF00;
      v21 = v92;
      v20 = 0x100000000;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
  }
  if (*(_QWORD *)(a2 + 320) != a2 + 320)
  {
    LODWORD(v105) = v19;
    *(_QWORD *)((char *)&v105 + 4) = v21 | v20 | v22;
    BYTE12(v105) = 0;
    v106 = v108;
    v107 = 0x800000000;
    v109 = 1;
    *(_QWORD *)&v23 = -1;
    *((_QWORD *)&v23 + 1) = -1;
    v110[0] = v23;
    v110[1] = v23;
    v110[2] = v23;
    v110[3] = v23;
    v111[0] = 1;
    v24 = 176;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(__int128 *)((char *)&v105 + v24) = (__int128)v25;
      v24 += 16;
    }
    while (v24 != 432);
    v101 = a2;
    v95 = 0;
    v96 = 0;
    __p = 0;
    sub_1C486DB3C((char **)&__p, (uint64_t)&v101);
    v26 = v95;
    v93 = (char *)__p;
    if (v95 != __p)
    {
      v27 = 0;
      while (1)
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        v29 = v28 + 48;
        for (j = *(_QWORD *)(v28 + 56); j != v29; j = *(_QWORD *)(j + 8))
        {
          v31 = *(unsigned __int16 **)(j + 16);
          if ((v31[10] & 4) == 0)
          {
LABEL_43:
            v32 = 0;
LABEL_44:
            v27 |= v32;
LABEL_45:
            if ((*(_BYTE *)j & 4) != 0)
              continue;
            goto LABEL_103;
          }
          v33 = *v31;
          v34 = sub_1C4C915C4(v33);
          if ((v34 & 0xFF00000000) == 0)
LABEL_142:
            llvm::report_fatal_error((llvm *)"Unknown Opcode", (const char *)1);
          v32 = 0;
          switch((int)v34)
          {
            case '#':
            case '*':
              v35 = sub_1C4C2FD5C(v33);
              v36 = sub_1C4C7CC74(v33);
              if (*(_DWORD *)&sub_1C4C640C0(v33)[4 * v36] != 12)
              {
                v104 = *(_QWORD *)(j + 32) + 32 * v35;
                sub_1C4A130D0((uint64_t)&v101, (uint64_t)v111, &v104);
                goto LABEL_43;
              }
              v37 = *(_QWORD *)(j + 32);
              v38 = *(_DWORD *)(v37 + 32 * v35);
              if ((_BYTE)v38)
                goto LABEL_43;
              if ((v38 & 0xFFF00) != 0 || (*(_QWORD *)(v37 + 32 * (v35 + 1) + 16) & 2) != 0)
                goto LABEL_43;
              v40 = *(_DWORD *)(v37 + 32 * v35 + 4);
              if ((v109 & 1) != 0)
              {
                v41 = 16;
                v42 = v110;
              }
              else
              {
                v41 = DWORD2(v110[0]);
                if (!DWORD2(v110[0]))
                  goto LABEL_43;
                v42 = *(_OWORD **)&v110[0];
              }
              v43 = v41 - 1;
              v44 = v43 & (37 * v40);
              v45 = *((_DWORD *)v42 + v44);
              if (v40 != v45)
              {
                v46 = 1;
                do
                {
                  if (v45 == -1)
                    goto LABEL_100;
                  v47 = v44 + v46++;
                  v44 = v47 & v43;
                  v45 = *((_DWORD *)v42 + v44);
                }
                while (v40 != v45);
              }
              v48 = BYTE12(v105);
              if (BYTE12(v105))
              {
                v49 = sub_1C4C915F0(v33, 16, 22);
                v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(j + 24) + 32) + 16);
                *(_QWORD *)(j + 16) = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 104))(v50) + 8)
                                    + 48 * v49;
                LODWORD(v101) = 1;
                v102 = 0;
                v103 = v105;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)j, *(llvm::MachineFunction **)(*(_QWORD *)(j + 24) + 32), (const llvm::MachineOperand *)&v101);
                v51 = (unsigned int *)&v105;
              }
              else
              {
                if (!BYTE8(v105))
                  goto LABEL_100;
                v70 = sub_1C4C915F0(v33, 16, 22);
                v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(j + 24) + 32) + 16);
                *(_QWORD *)(j + 16) = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 104))(v71) + 8)
                                    + 48 * v70;
                LODWORD(v101) = 1;
                v102 = 0;
                v103 = v105;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)j, *(llvm::MachineFunction **)(*(_QWORD *)(j + 24) + 32), (const llvm::MachineOperand *)&v101);
                v51 = (unsigned int *)&v105 + 1;
              }
              v72 = *v51;
              LODWORD(v101) = 1;
              v102 = 0;
              v103 = v72;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)j, *(llvm::MachineFunction **)(*(_QWORD *)(j + 24) + 32), (const llvm::MachineOperand *)&v101);
              if (!v48)
              {
                v73 = *(_QWORD *)(*(_QWORD *)(j + 24) + 32);
                v74 = *(_QWORD *)(v73 + 48);
                if (!v74)
                {
                  v74 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v73 + 8) + 216))(*(_QWORD *)(v73 + 8), v73 + 128, v73);
                  *(_QWORD *)(v73 + 48) = v74;
                }
                *(_BYTE *)(v74 + 568) = 1;
              }
              v104 = *(_QWORD *)(j + 32) + 32 * v35;
              sub_1C4A130D0((uint64_t)&v101, (uint64_t)v111, &v104);
              v32 = 1;
              goto LABEL_44;
            case '&':
              v66 = sub_1C4C2FD5C(v33);
              v67 = *(_QWORD *)(j + 32);
              if (*(_BYTE *)(v67 + 32 * v66) != 1)
                goto LABEL_43;
              if (*(_QWORD *)(v67 + 32 * v66 + 16) != v105)
                goto LABEL_43;
              if (*(_BYTE *)v67)
                goto LABEL_43;
              v68 = *(_DWORD *)(v67 + 4);
              if ((v68 & 0x80000000) == 0)
                goto LABEL_43;
              LODWORD(v104) = v68;
              sub_1C4A12B14((uint64_t)&v101, (uint64_t)&v109, &v104);
              v69 = v107;
              if (v107 >= (unint64_t)HIDWORD(v107))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v107 + 1, 8);
                v69 = v107;
              }
              v32 = 0;
              *((_QWORD *)v106 + v69) = j;
              LODWORD(v107) = v107 + 1;
              goto LABEL_44;
            case ',':
              v52 = sub_1C4C2FD5C(v33);
              v53 = *(_QWORD *)(j + 32);
              v54 = *(_DWORD *)(v53 + 32 * v52);
              if ((_BYTE)v54)
                goto LABEL_43;
              if ((v54 & 0xFFF00) != 0 || (*(_QWORD *)(v53 + 32 * (v52 + 1) + 16) & 2) != 0)
                goto LABEL_43;
              v56 = *(_DWORD *)(v53 + 32 * v52 + 4);
              if ((v109 & 1) != 0)
              {
                v57 = 16;
                v58 = v110;
              }
              else
              {
                v57 = DWORD2(v110[0]);
                if (!DWORD2(v110[0]))
                  goto LABEL_43;
                v58 = *(_OWORD **)&v110[0];
              }
              v59 = v57 - 1;
              v60 = v59 & (37 * v56);
              v61 = *((_DWORD *)v58 + v60);
              if (v56 == v61)
                goto LABEL_78;
              v62 = 1;
              break;
            default:
              goto LABEL_44;
          }
          while (v61 != -1)
          {
            v63 = v60 + v62++;
            v60 = v63 & v59;
            v61 = *((_DWORD *)v58 + v60);
            if (v56 == v61)
            {
LABEL_78:
              if (!*(_BYTE *)v53)
              {
                v64 = *(_DWORD *)(v53 + 4);
                if (v64 < 0)
                {
                  LODWORD(v104) = v64;
                  sub_1C4A12B14((uint64_t)&v101, (uint64_t)&v109, &v104);
                  v65 = v107;
                  if (v107 >= (unint64_t)HIDWORD(v107))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v107 + 1, 8);
                    v65 = v107;
                  }
                  *((_QWORD *)v106 + v65) = j;
                  LODWORD(v107) = v107 + 1;
                }
              }
              break;
            }
          }
LABEL_100:
          if (j)
            goto LABEL_45;
LABEL_103:
          while ((*(_WORD *)(j + 44) & 8) != 0)
            j = *(_QWORD *)(j + 8);
        }
        if (v26 == v93)
        {
          v26 = (char *)__p;
          goto LABEL_108;
        }
      }
    }
    v27 = 0;
LABEL_108:
    if (v26)
    {
      v95 = v26;
      operator delete(v26);
    }
    if ((_DWORD)v107)
    {
      v75 = 0;
      v76 = (char *)v106;
      v77 = (char *)v106 + 8 * v107;
      v78 = *(_QWORD *)(a2 + 40);
      while (1)
      {
        v80 = *((_QWORD *)v77 - 1);
        v77 -= 8;
        v79 = v80;
        v81 = *(unsigned int *)(*(_QWORD *)(v80 + 32) + 4);
        if ((v81 & 0x80000000) != 0)
          v82 = (uint64_t *)(*(_QWORD *)(v78 + 24) + 16 * (v81 & 0x7FFFFFFF) + 8);
        else
          v82 = (uint64_t *)(*(_QWORD *)(v78 + 272) + 8 * v81);
        v83 = *v82;
        if (!*v82)
          goto LABEL_118;
        while ((*(_DWORD *)v83 & 0x81000000) != 0)
        {
          v83 = *(_QWORD *)(v83 + 24);
          if (!v83)
            goto LABEL_118;
        }
        if (sub_1C4A1320C((uint64_t)v111, v83, &v101))
          break;
LABEL_128:
        if (v77 == v76)
          goto LABEL_131;
      }
      while (1)
      {
        v83 = *(_QWORD *)(v83 + 24);
        if (!v83)
          break;
        if ((*(_DWORD *)v83 & 0x81000000) == 0 && (sub_1C4A1320C((uint64_t)v111, v83, &v101) & 1) == 0)
          goto LABEL_128;
      }
LABEL_118:
      v84 = **(unsigned __int16 **)(v79 + 16);
      v85 = sub_1C4C915C4(v84);
      if ((v85 & 0xFF00000000) == 0)
        goto LABEL_142;
      if ((_DWORD)v85 == 44)
      {
        v88 = sub_1C4C915F0(v84, 16, 22);
        v89 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v79 + 24) + 32) + 16);
        *(_QWORD *)(v79 + 16) = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 104))(v89) + 8)
                              + 48 * v88;
        v75 = 1;
        LODWORD(v101) = 1;
        v102 = 0;
        v103 = v105;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v79, *(llvm::MachineFunction **)(*(_QWORD *)(v79 + 24) + 32), (const llvm::MachineOperand *)&v101);
        __p = (void *)(*(_QWORD *)(v79 + 32) + 32 * sub_1C4C2FD5C(v84));
        sub_1C4A130D0((uint64_t)&v101, (uint64_t)v111, (uint64_t *)&__p);
      }
      else if ((_DWORD)v85 == 38)
      {
        v86 = sub_1C4C915F0(v84, 16, 22);
        v87 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v79 + 24) + 32) + 16);
        *(_QWORD *)(v79 + 16) = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 104))(v87) + 8)
                              + 48 * v86;
        v75 = 1;
      }
      goto LABEL_128;
    }
    v75 = 0;
LABEL_131:
    if ((v111[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](v111[1], 8);
    if ((v109 & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v110[0], 4);
    v15 = v27 | (v75 != 0);
    if (v106 != v108)
      free(v106);
  }
  else
  {
LABEL_27:
    v15 = 0;
  }
  v97[0] = &off_1E816EC08;
  if ((_QWORD)v98)
    llvm::MetadataTracking::untrack((uint64_t)&v98, (unsigned __int8 *)v98);
  return v15 & 1;
}

_DWORD *sub_1C4A12B14(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  _DWORD *result;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v6 = a2 + 8;
  if ((*(_DWORD *)a2 & 1) != 0)
  {
    v7 = 16;
    v8 = a2 + 8;
  }
  else
  {
    v7 = *(_DWORD *)(a2 + 16);
    if (!v7)
    {
      v18 = 0;
      goto LABEL_18;
    }
    v8 = *(_QWORD *)(a2 + 8);
  }
  v9 = v7 - 1;
  v10 = (37 * *a3) & v9;
  result = (_DWORD *)(v8 + 4 * v10);
  v12 = *result;
  if (*a3 == *result)
  {
LABEL_13:
    if ((*(_DWORD *)a2 & 1) != 0)
    {
      v17 = 16;
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 8);
      v17 = *(unsigned int *)(a2 + 16);
    }
    v21 = 0;
    v20 = v6 + 4 * v17;
    goto LABEL_21;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -2;
    if (v15)
      v13 = result;
    v16 = v10 + v14++;
    v10 = v16 & v9;
    result = (_DWORD *)(v8 + 4 * v10);
    v12 = *result;
    if (*a3 == *result)
      goto LABEL_13;
  }
  if (v13)
    v18 = v13;
  else
    v18 = result;
LABEL_18:
  result = sub_1C4A12CDC(a2, (uint64_t)a3, a3, v18);
  *result = *a3;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v19 = 16;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    v19 = *(unsigned int *)(a2 + 16);
  }
  v20 = v6 + 4 * v19;
  v21 = 1;
LABEL_21:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 16) = v21;
  return result;
}

uint64_t sub_1C4A12C34(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (37 * *a2) & (v4 - 1);
  v7 = (_DWORD *)(v3 + 4 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -1)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -2;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_DWORD *)(v3 + 4 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_DWORD *sub_1C4A12CDC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _DWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 16;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4A12E50(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 16;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = (37 * *a3) & v13;
    a4 = (_DWORD *)(v11 + 4 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -2;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_DWORD *)(v11 + 4 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4A12E50(a1, v8);
      v20 = 0;
      sub_1C4A12C34(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

_QWORD *sub_1C4A12E50(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  int v14[16];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(int **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4A12FB4((_QWORD *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 4)
  {
    v10 = *(_DWORD *)(a1 + i);
    if (v10 <= 0xFFFFFFFD)
      *v8++ = v10;
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4A12FB4((_QWORD *)a1, v14, v8);
}

_QWORD *sub_1C4A12FB4(_QWORD *result, int *a2, int *a3)
{
  _QWORD *v5;
  int v6;
  char *v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  unsigned int v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  BOOL v20;
  unsigned int v21;

  v5 = result;
  v6 = *(_DWORD *)result;
  *result = *(_DWORD *)result & 1;
  v7 = (char *)(result + 1);
  if ((v6 & 1) != 0)
  {
    v10 = 64;
    v9 = result + 1;
  }
  else
  {
    v8 = *((unsigned int *)result + 4);
    if (!(_DWORD)v8)
      goto LABEL_5;
    v9 = (void *)result[1];
    v10 = 4 * v8;
  }
  result = memset(v9, 255, v10);
LABEL_5:
  while (a2 != a3)
  {
    v11 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if ((*(_BYTE *)v5 & 1) != 0)
      {
        v13 = 16;
        v12 = v7;
      }
      else
      {
        v12 = (char *)v5[1];
        v13 = *((_DWORD *)v5 + 4);
      }
      v14 = v13 - 1;
      v15 = (v13 - 1) & (37 * v11);
      v16 = &v12[4 * v15];
      v17 = *(_DWORD *)v16;
      if (v11 != *(_DWORD *)v16)
      {
        v18 = 0;
        v19 = 1;
        while (v17 != -1)
        {
          if (v18)
            v20 = 0;
          else
            v20 = v17 == -2;
          if (v20)
            v18 = v16;
          v21 = v15 + v19++;
          v15 = v21 & v14;
          v16 = &v12[4 * (v21 & v14)];
          v17 = *(_DWORD *)v16;
          if (v11 == *(_DWORD *)v16)
            goto LABEL_21;
        }
        if (v18)
          v16 = v18;
      }
LABEL_21:
      *(_DWORD *)v16 = v11;
      *(_DWORD *)v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4A130D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v17 = 0;
  result = sub_1C4A1320C(a2, *a3, &v17);
  v7 = v17;
  v8 = *(_DWORD *)a2;
  if ((_DWORD)result)
  {
    if ((v8 & 1) != 0)
    {
      v15 = a2 + 8;
      v16 = 32;
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 8);
      v16 = *(unsigned int *)(a2 + 16);
    }
    v14 = 0;
    v13 = v15 + 8 * v16;
    goto LABEL_11;
  }
  v9 = v8 >> 1;
  if ((v8 & 1) != 0)
    v10 = 32;
  else
    v10 = *(_DWORD *)(a2 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_15;
  }
  if (v10 + ~v9 - *(_DWORD *)(a2 + 4) <= v10 >> 3)
  {
LABEL_15:
    sub_1C4A132B8(a2, v10);
    v17 = 0;
    result = sub_1C4A1320C(a2, *a3, &v17);
    v7 = v17;
  }
  *(_DWORD *)a2 += 2;
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 4);
  *v7 = *a3;
  v11 = a2 + 8;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v12 = 32;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(unsigned int *)(a2 + 16);
  }
  v13 = v11 + 8 * v12;
  v14 = 1;
LABEL_11:
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_1C4A1320C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4A132B8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4A1342C(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 264; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4A1342C(a1, v14, v8);
}

uint64_t sub_1C4A1342C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4A1320C((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4A134E4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 12) = 1;
  return ((uint64_t (*)(void))((char *)sub_1C4A13508 + 4 * byte_1C6613CC8[a2 - 90]))();
}

uint64_t sub_1C4A13508(uint64_t result)
{
  *(_DWORD *)(result + 8) = 5;
  return result;
}

uint64_t sub_1C4A1351C(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void sub_1C4A13524()
{
  JUMPOUT(0x1C4A13514);
}

uint64_t sub_1C4A1352C(uint64_t result)
{
  *(_BYTE *)(result + 20) = 1;
  return result;
}

uint64_t sub_1C4A13538(uint64_t result)
{
  *(_DWORD *)(result + 12) = 2;
  *(_DWORD *)(result + 8) = 3;
  *(_BYTE *)(result + 22) = 1;
  return result;
}

void sub_1C4A13554()
{
  JUMPOUT(0x1C4A13514);
}

void sub_1C4A1355C()
{
  JUMPOUT(0x1C4A13514);
}

void sub_1C4A13564(uint64_t a1)
{
  *(_BYTE *)(a1 + 21) = 1;
  JUMPOUT(0x1C4A13514);
}

void sub_1C4A13574()
{
  JUMPOUT(0x1C4A13514);
}

void sub_1C4A1357C()
{
  JUMPOUT(0x1C4A13514);
}

void sub_1C4A13584()
{
  JUMPOUT(0x1C4A13514);
}

void sub_1C4A1358C()
{
  JUMPOUT(0x1C4A13514);
}

uint64_t sub_1C4A13598(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  _BOOL4 v10;
  BOOL v11;
  int v12;
  int v13;

  *(_QWORD *)(a1 + 24) = a5;
  result = (**(uint64_t (***)(uint64_t))a1)(a1);
  *(_DWORD *)(a1 + 16) = 0;
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 330))
    v10 = 1;
  else
    v10 = *(unsigned __int8 *)(v9 + 358) != 0;
  if (a3 != 3)
  {
    if (a3 == 1)
    {
      switch(a4)
      {
        case 4:
          goto LABEL_25;
        case 5:
          goto LABEL_26;
        case 6:
          goto LABEL_10;
        case 7:
          if (*(_BYTE *)(a1 + 20))
          {
            if (!*(_BYTE *)(a1 + 21))
            {
LABEL_25:
              v11 = !v10;
              v12 = 7;
              goto LABEL_11;
            }
          }
          else if (!*(_BYTE *)(a1 + 21))
          {
LABEL_10:
            v11 = !v10;
            v12 = 11;
            goto LABEL_11;
          }
LABEL_26:
          v11 = !v10;
          v12 = 3;
LABEL_11:
          if (!v11)
            ++v12;
          break;
        default:
          return result;
      }
      goto LABEL_13;
    }
    switch(a4)
    {
      case 4:
        goto LABEL_32;
      case 5:
        goto LABEL_15;
      case 6:
        goto LABEL_23;
      case 7:
        if (*(_BYTE *)(a1 + 20))
        {
          if (!*(_BYTE *)(a1 + 21))
          {
LABEL_32:
            v12 = 6;
            goto LABEL_13;
          }
        }
        else if (!*(_BYTE *)(a1 + 21))
        {
LABEL_23:
          v12 = 10;
LABEL_13:
          *(_DWORD *)(a1 + 16) = v12;
          return result;
        }
LABEL_15:
        v12 = 2;
        goto LABEL_13;
      default:
        return result;
    }
  }
  v13 = 9;
  switch(a4)
  {
    case 4:
      goto LABEL_28;
    case 5:
      goto LABEL_29;
    case 6:
      goto LABEL_20;
    case 7:
      if (*(_BYTE *)(a1 + 20))
      {
        if (!*(_BYTE *)(a1 + 21))
        {
LABEL_28:
          v13 = 5;
          goto LABEL_20;
        }
      }
      else if (!*(_BYTE *)(a1 + 21))
      {
        v13 = 9;
        goto LABEL_20;
      }
LABEL_29:
      v13 = 1;
LABEL_20:
      *(_DWORD *)(a1 + 16) = v13;
LABEL_5:
      *(_BYTE *)(a1 + 23) = 1;
      break;
    default:
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C4A1371C(uint64_t a1, int a2, int a3, int a4, int a5, char a6)
{
  BOOL v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  _DWORD v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 23))
  {
    v6 = a2 == 0;
    LODWORD(v7) = 92;
    goto LABEL_3;
  }
  if ((a6 & 1) != 0)
  {
    v7 = 61;
  }
  else
  {
    if (a2)
    {
      v6 = *(_BYTE *)(*(_QWORD *)(a1 + 24) + 302) == 0;
      LODWORD(v7) = 63;
LABEL_3:
      if (v6)
        v7 = v7;
      else
        v7 = (v7 + 1);
      goto LABEL_6;
    }
    v7 = 62;
  }
LABEL_6:
  if (a2)
    v8 = 45;
  else
    v8 = 40;
  if (a3)
    v9 = 49;
  else
    v9 = 41;
  v10 = 2 * (a5 != 32);
  if (a4)
    v10 = 42;
  v14[0] = v8;
  v14[1] = v9;
  v14[2] = v10;
  if ((a6 & 1) != 0)
  {
    v12 = 3;
  }
  else
  {
    if (*(_BYTE *)(a1 + 22))
      v11 = 44;
    else
      v11 = 43;
    v12 = 4;
    v14[3] = v11;
  }
  return sub_1C4C640F8(v7, v12, v14);
}

uint64_t sub_1C4A13828(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 - 1;
  if ((a2 - 1) >= 8 || ((0x8Bu >> v3) & 1) == 0)
    llvm::report_fatal_error((llvm *)"Unhandled number of load bytes.", (const char *)1);
  v4 = qword_1C6616140[v3];
  v5 = qword_1C6616180[v3];
  v6 = 2048;
  if (!a3)
    v6 = 0;
  return v4 | v6 | v5;
}

uint64_t sub_1C4A1388C()
{
  return 0;
}

uint64_t sub_1C4A13894(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = atomic_load((unsigned __int8 *)&qword_1EF8F6538);
  if ((v2 & 1) == 0)
  {
    v7 = a2;
    v6 = __cxa_guard_acquire(&qword_1EF8F6538);
    a2 = v7;
    if (v6)
    {
      __cxa_guard_release(&qword_1EF8F6538);
      a2 = v7;
    }
  }
  if ((*(_WORD *)(a2 + 44) & 0xC) == 0 || (*(_WORD *)(a2 + 44) & 4) != 0)
    return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 11) >> 6) & 1;
  while (1)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if ((*(_BYTE *)(v5 + 11) & 0x40) == 0 && *(_WORD *)v5 != 20)
      break;
    if ((*(_WORD *)(a2 + 44) & 8) == 0)
      return 1;
    a2 = *(_QWORD *)(a2 + 8);
  }
  return 0;
}

BOOL sub_1C4A13944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 *v6;
  int v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;

  v6 = *(unsigned __int16 **)(a2 + 16);
  v7 = *v6;
  v8 = sub_1C4C915C4(v7);
  if ((v8 & 0xFF00000000) == 0 || (v8 & 0xFFFFFFFE) != 0xBC)
  {
    if ((*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0)
    {
      if ((*((_QWORD *)v6 + 1) & 0x200) != 0)
        return 1;
      v14 = a2;
      result = 1;
      while ((*(_WORD *)(v14 + 44) & 8) != 0)
      {
        v14 = *(_QWORD *)(v14 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v14 + 16) + 9) & 2) != 0)
          return result;
      }
      if ((v7 - 2) < 5)
        return 1;
    }
    else if ((v7 - 2) < 5 || (*((_QWORD *)v6 + 1) & 0x200) != 0)
    {
      return 1;
    }
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 16) + 120))(*(_QWORD *)(a4 + 16));
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 16) + 176))(*(_QWORD *)(a4 + 16));
    return llvm::MachineInstr::findRegisterDefOperandIdx(a2, *(_DWORD *)(v11 + 88), 0, 1, v12) != -1;
  }
  return 1;
}

unint64_t sub_1C4A13A40(uint64_t a1, llvm::MachineBasicBlock *a2, _QWORD *a3, unsigned __int16 ***a4)
{
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[4];
  _QWORD v19[2];
  void *v20;
  uint64_t v21;
  _QWORD v22[5];
  void *v23;
  uint64_t v24;
  _DWORD v25[14];
  void *v26;
  uint64_t v27;
  _DWORD v28[14];
  void *v29;
  uint64_t v30;
  _DWORD v31[14];
  void *v32;
  uint64_t v33;
  _DWORD v34[14];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v18[3] = 0;
  v19[0] = 0;
  *(_QWORD *)((char *)v19 + 5) = 0;
  v20 = v22;
  v21 = 0x200000000;
  v22[4] = 0;
  v23 = v25;
  v24 = 0x600000000;
  v25[12] = 0;
  v26 = v28;
  v27 = 0x600000000;
  v28[12] = 0;
  v29 = v31;
  v30 = 0x600000000;
  v31[12] = 0;
  v32 = v34;
  v33 = 0x600000000;
  v34[12] = 0;
  llvm::RegScavenger::enterBasicBlockEnd((llvm::RegScavenger *)v18, a2);
  while ((_QWORD *)v19[0] != a3)
    llvm::RegScavenger::backward((llvm::RegScavenger *)v18);
  llvm::RegScavenger::backward((llvm::RegScavenger *)v18);
  result = llvm::RegScavenger::FindUnusedReg((uint64_t)v18, a4);
  if (!(_DWORD)result)
  {
    llvm::RegScavenger::forward((llvm::RegScavenger *)v18);
    v8 = *((_QWORD *)a2 + 4);
    v9 = *(_QWORD *)(v8 + 48);
    if (!v9)
    {
      v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 8) + 216))(*(_QWORD *)(v8 + 8), v8 + 128, v8);
      *(_QWORD *)(v8 + 48) = v9;
    }
    if (*(_DWORD *)(v9 + 512))
      v10 = **(unsigned int **)(v9 + 504);
    else
      v10 = 0;
    v11 = v21;
    if (v21 >= HIDWORD(v21))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v21 + 1, 16);
      v11 = v21;
    }
    v12 = (char *)v20 + 16 * v11;
    *v12 = v10;
    v12[1] = 0;
    LODWORD(v21) = v21 + 1;
    result = llvm::RegScavenger::scavengeRegisterBackwards(v18, (uint64_t)a4, a3, 0, 0, 1);
  }
  if (v32 != v34)
  {
    v13 = result;
    free(v32);
    result = v13;
  }
  if (v29 != v31)
  {
    v14 = result;
    free(v29);
    result = v14;
  }
  if (v26 != v28)
  {
    v15 = result;
    free(v26);
    result = v15;
  }
  if (v23 != v25)
  {
    v16 = result;
    free(v23);
    result = v16;
  }
  if (v20 != v22)
  {
    v17 = result;
    free(v20);
    return v17;
  }
  return result;
}

unint64_t sub_1C4A13C98(uint64_t a1, unsigned int a2, llvm::MachineBasicBlock *a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  llvm::MachineFunction *v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  llvm::MachineInstr *v21;
  llvm::MachineFunction *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::MachineFunction *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::MachineFunction *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  llvm::MachineFunction *v40;
  uint64_t v41;
  llvm::MachineInstr *v42;
  uint64_t v43;
  llvm::MachineFunction *v44;
  uint64_t v45;
  llvm::MachineInstr *v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD v49[4];
  unsigned __int8 *v50;
  llvm::MachineBasicBlock *v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a3 + 4);
  v9 = *(_QWORD *)(v8 + 48);
  if (!v9)
  {
    v33 = *((_QWORD *)a3 + 4);
    v34 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v8 + 8) + 216))(*(_QWORD *)(v8 + 8), v8 + 128, v33);
    v8 = v33;
    v9 = v34;
    *(_QWORD *)(v8 + 48) = v34;
  }
  v54 = 0;
  v49[0] = &off_1E816EC08;
  v49[1] = v8;
  v49[3] = *(_QWORD *)(v8 + 40);
  v49[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 104))(*(_QWORD *)(v8 + 16));
  v50 = 0;
  v51 = a3;
  v10 = *(unsigned __int8 *)(v9 + 560);
  v52 = a4;
  v53 = 0;
  if (!v10)
  {
    v31 = sub_1C55437B8(v49, 0x15F9u);
    v14 = v32;
    sub_1C55438A0(v49, (uint64_t)v31, v32);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v55 = 0x6901000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v31, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v31, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = (int)a2;
    goto LABEL_31;
  }
  v11 = (int)a2;
  if (HIWORD(a2))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 364))
      goto LABEL_33;
    v40 = sub_1C55437B8(v49, 0x1108u);
    v42 = (llvm::MachineInstr *)v41;
    sub_1C55438A0(v49, (uint64_t)v40, v41);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v55 = 0x6901000000;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = 0;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = 0;
    llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v55);
    LODWORD(v40) = sub_1C4A13A40(v43, a3, a4, (unsigned __int16 ***)&off_1E7FB1568);
    v44 = sub_1C55437B8(v49, 0x15F9u);
    v46 = (llvm::MachineInstr *)v45;
    sub_1C55438A0(v49, (uint64_t)v44, v45);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    LODWORD(v55) = 0x1000000;
    HIDWORD(v55) = (_DWORD)v40;
    llvm::MachineInstr::addOperand(v46, v44, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = 0;
    llvm::MachineInstr::addOperand(v46, v44, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = v11;
    llvm::MachineInstr::addOperand(v46, v44, (const llvm::MachineOperand *)&v55);
    v55 = 0;
    LODWORD(v56) = 0;
    v47 = sub_1C4C640F8(67, 3, &v55);
    v31 = sub_1C55437B8(v49, v47);
    v14 = v48;
    sub_1C55438A0(v49, (uint64_t)v31, v48);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v55 = 0x6901000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v31, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v31, (const llvm::MachineOperand *)&v55);
    v56 = 0;
    v57 = 0;
    v55 = 0x6900000000;
    v58 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v31, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v31, (const llvm::MachineOperand *)&v55);
    v56 = 0;
    v57 = 0;
    LODWORD(v55) = 0;
    HIDWORD(v55) = (_DWORD)v40;
    v58 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v31, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = 0;
LABEL_31:
    v21 = (llvm::MachineInstr *)v14;
    v22 = v31;
    goto LABEL_13;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 80) + 364))
  {
    v13 = sub_1C55437B8(v49, 0x1108u);
    v14 = v12;
    v15 = v52;
    v16 = *((_QWORD *)v51 + 5);
    *(_QWORD *)(v12 + 24) = v16;
    v17 = *(_QWORD *)(v16 + 32);
    v18 = *(unsigned int *)(v12 + 40);
    if ((_DWORD)v18)
    {
      v24 = *(_QWORD *)(v12 + 32);
      v25 = *(_QWORD *)(v17 + 40);
      v26 = 32 * v18;
      do
      {
        if (!*(_BYTE *)v24)
        {
          v27 = *(unsigned int *)(v24 + 4);
          if ((int)v27 >= 0)
            v28 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v27);
          else
            v28 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
          v29 = *v28;
          if (*v28)
          {
            v30 = *(_QWORD *)(v29 + 16);
            *(_QWORD *)(v29 + 16) = v24;
            *(_QWORD *)(v24 + 16) = v30;
            if ((*(_BYTE *)(v24 + 3) & 1) != 0)
            {
              *(_QWORD *)(v24 + 24) = v29;
            }
            else
            {
              *(_QWORD *)(v24 + 24) = 0;
              v28 = (uint64_t *)(v30 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v24 + 16) = v24;
            *(_QWORD *)(v24 + 24) = 0;
          }
          *v28 = v24;
        }
        v24 += 32;
        v26 -= 32;
      }
      while (v26);
    }
    v19 = *(_QWORD *)(v17 + 728);
    if (v19)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v19 + 24))(v19, v12);
    v20 = *v15 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v14 = v20 | *(_QWORD *)v14 & 7;
    *(_QWORD *)(v14 + 8) = v15;
    *(_QWORD *)(v20 + 8) = v14;
    *v15 = *v15 & 7 | v14;
    if (v53)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v53 + 24))(v53, v14);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v55 = 0x6901000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v13, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v13, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = v11;
    goto LABEL_12;
  }
LABEL_33:
  v35 = sub_1C55437B8(v49, 0x1108u);
  v14 = v36;
  sub_1C55438A0(v49, (uint64_t)v35, v36);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v55 = 0x6901000000;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v35, (const llvm::MachineOperand *)&v55);
  LODWORD(v55) = 1;
  v56 = 0;
  v57 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v35, (const llvm::MachineOperand *)&v55);
  LODWORD(v55) = 1;
  v56 = 0;
  v57 = (uint64_t)(int)a2 >> 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v35, (const llvm::MachineOperand *)&v55);
  v37 = a2 & 3;
  if ((a2 & 3) != 0)
  {
    v55 = 0;
    LODWORD(v56) = 1;
    v38 = sub_1C4C640F8(67, 3, &v55);
    v13 = sub_1C55437B8(v49, v38);
    v14 = v39;
    sub_1C55438A0(v49, (uint64_t)v13, v39);
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v55 = 0x6901000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v13, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v13, (const llvm::MachineOperand *)&v55);
    v56 = 0;
    v57 = 0;
    v55 = 0x6900000000;
    v58 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v13, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v13, (const llvm::MachineOperand *)&v55);
    LODWORD(v55) = 1;
    v56 = 0;
    v57 = v37;
LABEL_12:
    v21 = (llvm::MachineInstr *)v14;
    v22 = v13;
LABEL_13:
    llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)&v55);
  }
  v49[0] = &off_1E816EC08;
  if (v50)
    llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
  return v14;
}

unint64_t sub_1C4A142D0(_QWORD *a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6, int a7)
{
  unint64_t *v7;
  unsigned int v10;
  int v11;
  unint64_t v12;
  __int16 v13;
  int v14;
  int v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  __int16 v25;
  uint64_t v26;
  _WORD *v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  _WORD *v31;
  unsigned __int16 *v32;
  __int16 v33;
  __int16 v34;
  unsigned __int16 *v35;
  __int16 v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _WORD *v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  _WORD *v53;
  unsigned __int16 v54;
  int v55;
  int v56;
  int v57;
  uint64_t v59;
  uint64_t v60;

  v7 = *(unint64_t **)(a2 + 56);
  if (v7 == a3)
    return 0;
  v10 = 0;
  v11 = a7 ^ 1;
  v12 = (unint64_t)a3;
  while (1)
  {
    v12 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
    if (v12 && (*(_BYTE *)v12 & 4) != 0)
    {
      v13 = *(_WORD *)(v12 + 44);
    }
    else
    {
      while (1)
      {
        v13 = *(_WORD *)(v12 + 44);
        if ((v13 & 4) == 0)
          break;
        v12 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    v14 = v13 & 0xC;
    v15 = v13 & 4;
    v16 = *(unsigned __int16 **)(v12 + 16);
    v17 = *((_QWORD *)v16 + 1);
    if (v14 && v15 == 0)
    {
      v38 = v12;
      if ((v17 & 0x80) != 0)
        return 0;
      while ((*(_WORD *)(v38 + 44) & 8) != 0)
      {
        v38 = *(_QWORD *)(v38 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v38 + 16) + 8) & 0x80) != 0)
          return 0;
      }
    }
    else if ((v17 & 0x80) != 0)
    {
      return 0;
    }
    if ((v17 & 0x2000) != 0)
    {
      v39 = *(_QWORD *)(v12 + 32);
      if (*(_BYTE *)v39)
        goto LABEL_29;
      v40 = *v16;
      v41 = v40 & 0xFFFE;
      v42 = v40 - 517;
      if (v42 >= 2)
      {
        if (*(_BYTE *)(v39 + 64) != 1)
          goto LABEL_29;
        v43 = *(_DWORD *)(v39 + 4);
        if (v43 == a6)
        {
          v59 = *(_QWORD *)(v39 + 80);
          return sub_1C49D63F4((uint64_t)a1, a2, a3, v59, a5, v11, v41 == 5622, a4, *(_QWORD *)(v39 + 48));
        }
      }
      else
      {
        v43 = *(_DWORD *)(v39 + 4);
        if (v43 == a6)
        {
          v59 = 0;
          return sub_1C49D63F4((uint64_t)a1, a2, a3, v59, a5, v11, v41 == 5622, a4, *(_QWORD *)(v39 + 48));
        }
      }
      v44 = v41 != 5622 && v42 >= 2;
      v45 = v44 ? 0 : v11;
      if (v45 == 1)
        break;
    }
LABEL_14:
    v19 = *(unsigned int *)(v12 + 40);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = *(_QWORD *)(v12 + 32);
      while ((*(_DWORD *)(v21 + 32 * v20) & 0x30000FF) != 0x1000000)
      {
LABEL_22:
        if (++v20 == v19)
          goto LABEL_29;
      }
      v22 = *(_DWORD *)(v21 + 32 * v20 + 4);
      v23 = a1[12];
      v24 = *(unsigned int *)(v23 + 24 * v22 + 16);
      v25 = v24 & 0xF;
      v26 = a1[18];
      v27 = (_WORD *)(v26 + ((v24 >> 3) & 0x1FFFFFFE));
      v28 = *v27 + v25 * v22;
      v29 = *(unsigned int *)(v23 + 24 * a6 + 16);
      v30 = v29 & 0xF;
      v31 = (_WORD *)(v26 + ((v29 >> 3) & 0x1FFFFFFE));
      v33 = *v31;
      v32 = v31 + 1;
      v34 = v33 + v30 * a6;
LABEL_18:
      ++v27;
      v35 = v32;
      v36 = v34;
      while (v28 != v36)
      {
        v37 = *v35++;
        v36 += v37;
        if (!v37)
        {
          v28 += *v27;
          if (*v27)
            goto LABEL_18;
          goto LABEL_22;
        }
      }
      return 0;
    }
LABEL_29:
    if ((unint64_t *)v12 != v7)
    {
      v44 = v10++ >= 0xF;
      if (!v44)
        continue;
    }
    return 0;
  }
  v46 = a1[12];
  v47 = a1[18];
  v48 = *(unsigned int *)(v46 + 24 * v43 + 4);
  if (*(_WORD *)(v47 + 2 * v48))
  {
    v49 = v43;
    LOWORD(v43) = *(_WORD *)(v47 + 2 * v48) + v43;
    v50 = (_WORD *)(a1[22] + 2 * *(unsigned int *)(v46 + 24 * v49 + 12));
    v51 = (unsigned __int16 *)(v47 + 2 * v48 + 2);
    v52 = v51;
    v53 = v50;
    v54 = v43;
    while (*v53 != 1)
    {
      v55 = *v52++;
      v54 += v55;
      ++v53;
      if (!v55)
      {
        v56 = 0;
        goto LABEL_51;
      }
    }
    v56 = v54;
LABEL_51:
    while (*v50 != 2)
    {
      v57 = *v51++;
      LOWORD(v43) = v57 + v43;
      ++v50;
      if (!v57)
        goto LABEL_59;
    }
    v43 = (unsigned __int16)v43;
  }
  else
  {
    v56 = 0;
LABEL_59:
    v43 = 0;
  }
  if (v56 != a6)
  {
    if (v43 == a6)
    {
      if (v42 < 2)
        goto LABEL_64;
      v60 = *(uint64_t *)(v39 + 80) >> 16;
      return sub_1C49D63F4((uint64_t)a1, a2, a3, v60, a5, 1, v41 == 5622, a4, *(_QWORD *)(v39 + 48));
    }
    goto LABEL_14;
  }
  if (v42 >= 2)
  {
    v60 = *(unsigned __int16 *)(v39 + 80);
    return sub_1C49D63F4((uint64_t)a1, a2, a3, v60, a5, 1, v41 == 5622, a4, *(_QWORD *)(v39 + 48));
  }
LABEL_64:
  v60 = 0;
  return sub_1C49D63F4((uint64_t)a1, a2, a3, v60, a5, 1, v41 == 5622, a4, *(_QWORD *)(v39 + 48));
}

unint64_t sub_1C4A14600(_QWORD *a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6)
{
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  llvm::MachineFunction *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v12 = *a4;
  v31 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v31, v12, 2);
  v13 = sub_1C4A142D0(a1, a2, a3, &v31, a5, a6, 1);
  if (v31)
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
  if (!v13)
  {
    v14 = a1[1];
    v15 = *(llvm::MachineFunction **)(a2 + 32);
    v16 = *a4;
    v32 = v16;
    if (v16)
      llvm::MetadataTracking::track((uint64_t)&v32, v16, 2);
    v17 = v14 + 26496;
    v13 = *((_QWORD *)v15 + 28);
    if (v13)
      *((_QWORD *)v15 + 28) = *(_QWORD *)v13;
    else
      v13 = sub_1C484358C((uint64_t)v15 + 128, 72, 3);
    v33 = v32;
    if (v32)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v32, v32, (uint64_t)&v33);
      v32 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v13, v15, v17, &v33, 0);
    if (v33)
      llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
    if (v32)
      llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
    v18 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(v13 + 24) = v18;
    v19 = *(_QWORD *)(v18 + 32);
    v20 = *(unsigned int *)(v13 + 40);
    if ((_DWORD)v20)
    {
      v24 = *(_QWORD *)(v13 + 32);
      v25 = *(_QWORD *)(v19 + 40);
      v26 = 32 * v20;
      do
      {
        if (!*(_BYTE *)v24)
        {
          v27 = *(unsigned int *)(v24 + 4);
          if ((int)v27 >= 0)
            v28 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v27);
          else
            v28 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
          v29 = *v28;
          if (*v28)
          {
            v30 = *(_QWORD *)(v29 + 16);
            *(_QWORD *)(v29 + 16) = v24;
            *(_QWORD *)(v24 + 16) = v30;
            if ((*(_BYTE *)(v24 + 3) & 1) != 0)
            {
              *(_QWORD *)(v24 + 24) = v29;
            }
            else
            {
              *(_QWORD *)(v24 + 24) = 0;
              v28 = (uint64_t *)(v30 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v24 + 16) = v24;
            *(_QWORD *)(v24 + 24) = 0;
          }
          *v28 = v24;
        }
        v24 += 32;
        v26 -= 32;
      }
      while (v26);
    }
    v21 = *(_QWORD *)(v19 + 728);
    if (v21)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 24))(v21, v13);
    v22 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v13 = v22 | *(_QWORD *)v13 & 7;
    *(_QWORD *)(v13 + 8) = a3;
    *(_QWORD *)(v22 + 8) = v13;
    *a3 = *a3 & 7 | v13;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    LODWORD(v33) = 0x1000000;
    HIDWORD(v33) = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v15, (const llvm::MachineOperand *)&v33);
    LODWORD(v33) = 1;
    v34 = 0;
    v35 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v15, (const llvm::MachineOperand *)&v33);
    v34 = 0;
    v35 = 0;
    LODWORD(v33) = 0;
    HIDWORD(v33) = a6;
    v36 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v15, (const llvm::MachineOperand *)&v33);
    LODWORD(v33) = 1;
    v34 = 0;
    v35 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v15, (const llvm::MachineOperand *)&v33);
  }
  return v13;
}

unint64_t sub_1C4A148A8(_QWORD *a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6)
{
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  llvm::MachineFunction *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v12 = *a4;
  v31 = v12;
  if (v12)
    llvm::MetadataTracking::track((uint64_t)&v31, v12, 2);
  v13 = sub_1C4A142D0(a1, a2, a3, &v31, a5, a6, 0);
  if (v31)
    llvm::MetadataTracking::untrack((uint64_t)&v31, v31);
  if (!v13)
  {
    v14 = a1[1];
    v15 = *(llvm::MachineFunction **)(a2 + 32);
    v16 = *a4;
    v32 = v16;
    if (v16)
      llvm::MetadataTracking::track((uint64_t)&v32, v16, 2);
    v17 = v14 + 26688;
    v13 = *((_QWORD *)v15 + 28);
    if (v13)
      *((_QWORD *)v15 + 28) = *(_QWORD *)v13;
    else
      v13 = sub_1C484358C((uint64_t)v15 + 128, 72, 3);
    v33 = v32;
    if (v32)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v32, v32, (uint64_t)&v33);
      v32 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v13, v15, v17, &v33, 0);
    if (v33)
      llvm::MetadataTracking::untrack((uint64_t)&v33, v33);
    if (v32)
      llvm::MetadataTracking::untrack((uint64_t)&v32, v32);
    v18 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(v13 + 24) = v18;
    v19 = *(_QWORD *)(v18 + 32);
    v20 = *(unsigned int *)(v13 + 40);
    if ((_DWORD)v20)
    {
      v24 = *(_QWORD *)(v13 + 32);
      v25 = *(_QWORD *)(v19 + 40);
      v26 = 32 * v20;
      do
      {
        if (!*(_BYTE *)v24)
        {
          v27 = *(unsigned int *)(v24 + 4);
          if ((int)v27 >= 0)
            v28 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v27);
          else
            v28 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
          v29 = *v28;
          if (*v28)
          {
            v30 = *(_QWORD *)(v29 + 16);
            *(_QWORD *)(v29 + 16) = v24;
            *(_QWORD *)(v24 + 16) = v30;
            if ((*(_BYTE *)(v24 + 3) & 1) != 0)
            {
              *(_QWORD *)(v24 + 24) = v29;
            }
            else
            {
              *(_QWORD *)(v24 + 24) = 0;
              v28 = (uint64_t *)(v30 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v24 + 16) = v24;
            *(_QWORD *)(v24 + 24) = 0;
          }
          *v28 = v24;
        }
        v24 += 32;
        v26 -= 32;
      }
      while (v26);
    }
    v21 = *(_QWORD *)(v19 + 728);
    if (v21)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 24))(v21, v13);
    v22 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v13 = v22 | *(_QWORD *)v13 & 7;
    *(_QWORD *)(v13 + 8) = a3;
    *(_QWORD *)(v22 + 8) = v13;
    *a3 = *a3 & 7 | v13;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    LODWORD(v33) = 0x1000000;
    HIDWORD(v33) = a5;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v15, (const llvm::MachineOperand *)&v33);
    LODWORD(v33) = 1;
    v34 = 0;
    v35 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v15, (const llvm::MachineOperand *)&v33);
    v34 = 0;
    v35 = 0;
    LODWORD(v33) = 0;
    HIDWORD(v33) = a6;
    v36 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v15, (const llvm::MachineOperand *)&v33);
    LODWORD(v33) = 1;
    v34 = 0;
    v35 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v15, (const llvm::MachineOperand *)&v33);
  }
  return v13;
}

void sub_1C4A14B50(_QWORD *a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, unsigned int a5, unsigned int a6, unsigned __int8 a7)
{
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 **v18;
  int v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  char v28;
  unsigned __int8 *v29;
  llvm::MachineFunction *v30;
  uint64_t v31;
  llvm::MachineFunction *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unsigned __int8 *v39;
  llvm::MachineFunction *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  llvm::MachineFunction *v43;
  uint64_t v44;
  unsigned int v45;
  llvm::MachineFunction *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  llvm::MachineFunction *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned __int16 *v76;
  unsigned __int16 *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int16 v107;
  unsigned __int16 *v108;
  unsigned __int16 *v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  unsigned __int16 v113;
  unsigned __int16 *v114;
  unsigned __int16 *v115;
  int v116;
  int v117;
  unsigned __int8 *v118;
  llvm::MachineInstr *v119;
  unsigned __int8 *v120;
  unsigned __int8 **v121;
  unsigned int v122;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  llvm::MachineFunction *v128;
  int v130;
  uint64_t v131;
  llvm::MachineFunction *v133;
  llvm::MachineInstr *v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  llvm::MachineFunction *v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v13 = a5 - 1;
  if (a5 - 1 >= 0xE7)
  {
    v14 = a6 - 1;
  }
  else
  {
    v14 = a6 - 1;
    if (((byte_1C69FF49A[a5 >> 3] >> (a5 & 7)) & 1) != 0 && v14 <= 0x3FFFFFFE)
    {
      v15 = (unint64_t)a6 >> 3;
      if (a6 <= 0xE7 && ((byte_1C69FF49A[v15] >> (a6 & 7)) & 1) != 0)
      {
        v16 = *a4;
        v141 = v16;
        if (v16)
          llvm::MetadataTracking::track((uint64_t)&v141, v16, 2);
        sub_1C4A14600(a1, a2, a3, &v141, a5, a6);
        v17 = v141;
        if (v141)
        {
          v18 = &v141;
LABEL_106:
          llvm::MetadataTracking::untrack((uint64_t)v18, v17);
          return;
        }
        return;
      }
      goto LABEL_13;
    }
  }
  if (v14 > 0x3FFFFFFE)
  {
    v20 = 0;
    v19 = 0;
    goto LABEL_18;
  }
  LODWORD(v15) = a6 >> 3;
LABEL_13:
  if (v15 > 0x40)
    v19 = 0;
  else
    v19 = (byte_1C69FED14[v15] >> (a6 & 7)) & 1;
  v20 = 1;
LABEL_18:
  if (v13 >= 0x207)
  {
    v23 = v19 ^ 1;
    v22 = 1;
    goto LABEL_26;
  }
  v21 = (1 << (a5 & 7)) & byte_1C69FED14[a5 >> 3];
  v22 = v21 == 0;
  v23 = v19 ^ 1;
  if ((v23 & 1) != 0 || !v21)
  {
LABEL_26:
    if (a6 < 0x58)
      v25 = v20;
    else
      v25 = 0;
    v26 = v25 != 1 || ((byte_1C69FEF42[a6 >> 3] >> (a6 & 7)) & 1) == 0;
    if (v13 > 0x56)
    {
      v27 = 1;
    }
    else
    {
      v27 = ((byte_1C69FEF42[a5 >> 3] >> (a5 & 7)) & 1) == 0;
      v28 = ((byte_1C69FEF42[a5 >> 3] >> (a5 & 7)) & 1) == 0 || v26;
      if ((v28 & 1) == 0)
      {
        v29 = *a4;
        v139 = v29;
        if (v29)
        {
          llvm::MetadataTracking::track((uint64_t)&v139, v29, 2);
          v30 = (llvm::MachineFunction *)v139;
        }
        else
        {
          v30 = 0;
        }
        v54 = a1[1];
        v142 = xmmword_1C6613BA0;
        v55 = sub_1C4C640F8(148, 4, &v142);
        v56 = *(llvm::MachineFunction **)(a2 + 32);
        v133 = v30;
        if (v30)
          llvm::MetadataTracking::track((uint64_t)&v133, (unsigned __int8 *)v30, 2);
        v57 = v54 + 48 * v55;
        v58 = *((_QWORD *)v56 + 28);
        if (v58)
          *((_QWORD *)v56 + 28) = *(_QWORD *)v58;
        else
          v58 = sub_1C484358C((uint64_t)v56 + 128, 72, 3);
        *(_QWORD *)&v142 = v133;
        if (v133)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v133, (unsigned __int8 *)v133, (uint64_t)&v142);
          v133 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v58, v56, v57, (unsigned __int8 **)&v142, 0);
        if ((_QWORD)v142)
          llvm::MetadataTracking::untrack((uint64_t)&v142, (unsigned __int8 *)v142);
        if (v133)
          llvm::MetadataTracking::untrack((uint64_t)&v133, (unsigned __int8 *)v133);
        v59 = *(_QWORD *)(a2 + 40);
        *(_QWORD *)(v58 + 24) = v59;
        v60 = *(_QWORD *)(v59 + 32);
        v61 = *(unsigned int *)(v58 + 40);
        if ((_DWORD)v61)
        {
          v87 = *(_QWORD *)(v58 + 32);
          v88 = *(_QWORD *)(v60 + 40);
          v89 = 32 * v61;
          do
          {
            if (!*(_BYTE *)v87)
            {
              v90 = *(unsigned int *)(v87 + 4);
              if ((int)v90 >= 0)
                v91 = (uint64_t *)(*(_QWORD *)(v88 + 272) + 8 * v90);
              else
                v91 = (uint64_t *)(*(_QWORD *)(v88 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8);
              v92 = *v91;
              if (*v91)
              {
                v93 = *(_QWORD *)(v92 + 16);
                *(_QWORD *)(v92 + 16) = v87;
                *(_QWORD *)(v87 + 16) = v93;
                if ((*(_BYTE *)(v87 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v87 + 24) = v92;
                }
                else
                {
                  *(_QWORD *)(v87 + 24) = 0;
                  v91 = (uint64_t *)(v93 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v87 + 16) = v87;
                *(_QWORD *)(v87 + 24) = 0;
              }
              *v91 = v87;
            }
            v87 += 32;
            v89 -= 32;
          }
          while (v89);
        }
        v62 = *(_QWORD *)(v60 + 728);
        if (v62)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v62 + 24))(v62, v58);
        v63 = *a3 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v58 = v63 | *(_QWORD *)v58 & 7;
        *(_QWORD *)(v58 + 8) = a3;
        *(_QWORD *)(v63 + 8) = v58;
        *a3 = *a3 & 7 | v58;
        *((_QWORD *)&v142 + 1) = 0;
        v143 = 0;
        v144 = 0;
        LODWORD(v142) = 0x1000000;
        DWORD1(v142) = a5;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v56, (const llvm::MachineOperand *)&v142);
        LODWORD(v142) = 1;
        *((_QWORD *)&v142 + 1) = 0;
        v143 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v56, (const llvm::MachineOperand *)&v142);
        *((_QWORD *)&v142 + 1) = 0;
        v143 = 0;
        LODWORD(v142) = 0;
        DWORD1(v142) = a6;
        v144 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v56, (const llvm::MachineOperand *)&v142);
        LODWORD(v142) = 1;
        *((_QWORD *)&v142 + 1) = 0;
        v143 = 1;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v56, (const llvm::MachineOperand *)&v142);
        LODWORD(v142) = 1;
        *((_QWORD *)&v142 + 1) = 0;
        v143 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v58, v56, (const llvm::MachineOperand *)&v142);
        v17 = v139;
        if (v139)
        {
          v18 = &v139;
          goto LABEL_106;
        }
        return;
      }
    }
    if (!v26 && !v22)
    {
      v39 = *a4;
      v138 = v39;
      if (v39)
      {
        llvm::MetadataTracking::track((uint64_t)&v138, v39, 2);
        v40 = (llvm::MachineFunction *)v138;
      }
      else
      {
        v40 = 0;
      }
      v44 = a1[1];
      v142 = xmmword_1C6613C50;
      v45 = sub_1C4C640F8(148, 4, &v142);
      v46 = *(llvm::MachineFunction **)(a2 + 32);
      v133 = v40;
      if (v40)
        llvm::MetadataTracking::track((uint64_t)&v133, (unsigned __int8 *)v40, 2);
      v47 = v44 + 48 * v45;
      v48 = *((_QWORD *)v46 + 28);
      if (v48)
        *((_QWORD *)v46 + 28) = *(_QWORD *)v48;
      else
        v48 = sub_1C484358C((uint64_t)v46 + 128, 72, 3);
      *(_QWORD *)&v142 = v133;
      if (v133)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v133, (unsigned __int8 *)v133, (uint64_t)&v142);
        v133 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v48, v46, v47, (unsigned __int8 **)&v142, 0);
      if ((_QWORD)v142)
        llvm::MetadataTracking::untrack((uint64_t)&v142, (unsigned __int8 *)v142);
      if (v133)
        llvm::MetadataTracking::untrack((uint64_t)&v133, (unsigned __int8 *)v133);
      v49 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(v48 + 24) = v49;
      v50 = *(_QWORD *)(v49 + 32);
      v51 = *(unsigned int *)(v48 + 40);
      if ((_DWORD)v51)
      {
        v79 = *(_QWORD *)(v48 + 32);
        v80 = *(_QWORD *)(v50 + 40);
        v81 = 32 * v51;
        do
        {
          if (!*(_BYTE *)v79)
          {
            v82 = *(unsigned int *)(v79 + 4);
            if ((int)v82 >= 0)
              v83 = (uint64_t *)(*(_QWORD *)(v80 + 272) + 8 * v82);
            else
              v83 = (uint64_t *)(*(_QWORD *)(v80 + 24) + 16 * (v82 & 0x7FFFFFFF) + 8);
            v84 = *v83;
            if (*v83)
            {
              v85 = *(_QWORD *)(v84 + 16);
              *(_QWORD *)(v84 + 16) = v79;
              *(_QWORD *)(v79 + 16) = v85;
              if ((*(_BYTE *)(v79 + 3) & 1) != 0)
              {
                *(_QWORD *)(v79 + 24) = v84;
              }
              else
              {
                *(_QWORD *)(v79 + 24) = 0;
                v83 = (uint64_t *)(v85 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v79 + 16) = v79;
              *(_QWORD *)(v79 + 24) = 0;
            }
            *v83 = v79;
          }
          v79 += 32;
          v81 -= 32;
        }
        while (v81);
      }
      v52 = *(_QWORD *)(v50 + 728);
      if (v52)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v52 + 24))(v52, v48);
      v53 = *a3 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v48 = v53 | *(_QWORD *)v48 & 7;
      *(_QWORD *)(v48 + 8) = a3;
      *(_QWORD *)(v53 + 8) = v48;
      *a3 = *a3 & 7 | v48;
      *((_QWORD *)&v142 + 1) = 0;
      v143 = 0;
      v144 = 0;
      LODWORD(v142) = 0x1000000;
      DWORD1(v142) = a5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v48, v46, (const llvm::MachineOperand *)&v142);
      LODWORD(v142) = 1;
      *((_QWORD *)&v142 + 1) = 0;
      v143 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v48, v46, (const llvm::MachineOperand *)&v142);
      *((_QWORD *)&v142 + 1) = 0;
      v143 = 0;
      LODWORD(v142) = 0;
      DWORD1(v142) = a6;
      v144 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v48, v46, (const llvm::MachineOperand *)&v142);
      LODWORD(v142) = 1;
      *((_QWORD *)&v142 + 1) = 0;
      v143 = 1;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v48, v46, (const llvm::MachineOperand *)&v142);
      LODWORD(v142) = 1;
      *((_QWORD *)&v142 + 1) = 0;
      v143 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v48, v46, (const llvm::MachineOperand *)&v142);
      v17 = v138;
      if (v138)
      {
        v18 = &v138;
        goto LABEL_106;
      }
      return;
    }
    if (((v23 | v27) & 1) == 0)
    {
      v41 = *a4;
      v137 = (llvm::MachineFunction *)v41;
      if (v41)
      {
        llvm::MetadataTracking::track((uint64_t)&v137, v41, 2);
        v42 = a1[1] + 216336;
        v43 = *(llvm::MachineFunction **)(a2 + 32);
        v133 = v137;
        if (v137)
          llvm::MetadataTracking::track((uint64_t)&v133, (unsigned __int8 *)v137, 2);
      }
      else
      {
        v42 = a1[1] + 216336;
        v43 = *(llvm::MachineFunction **)(a2 + 32);
        v133 = 0;
      }
      v64 = *((_QWORD *)v43 + 28);
      if (v64)
        *((_QWORD *)v43 + 28) = *(_QWORD *)v64;
      else
        v64 = sub_1C484358C((uint64_t)v43 + 128, 72, 3);
      *(_QWORD *)&v142 = v133;
      if (v133)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v133, (unsigned __int8 *)v133, (uint64_t)&v142);
        v133 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v64, v43, v42, (unsigned __int8 **)&v142, 0);
      if ((_QWORD)v142)
        llvm::MetadataTracking::untrack((uint64_t)&v142, (unsigned __int8 *)v142);
      if (v133)
        llvm::MetadataTracking::untrack((uint64_t)&v133, (unsigned __int8 *)v133);
      v65 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(v64 + 24) = v65;
      v66 = *(_QWORD *)(v65 + 32);
      v67 = *(unsigned int *)(v64 + 40);
      if ((_DWORD)v67)
      {
        v95 = *(_QWORD *)(v64 + 32);
        v96 = *(_QWORD *)(v66 + 40);
        v97 = 32 * v67;
        do
        {
          if (!*(_BYTE *)v95)
          {
            v98 = *(unsigned int *)(v95 + 4);
            if ((int)v98 >= 0)
              v99 = (uint64_t *)(*(_QWORD *)(v96 + 272) + 8 * v98);
            else
              v99 = (uint64_t *)(*(_QWORD *)(v96 + 24) + 16 * (v98 & 0x7FFFFFFF) + 8);
            v100 = *v99;
            if (*v99)
            {
              v101 = *(_QWORD *)(v100 + 16);
              *(_QWORD *)(v100 + 16) = v95;
              *(_QWORD *)(v95 + 16) = v101;
              if ((*(_BYTE *)(v95 + 3) & 1) != 0)
              {
                *(_QWORD *)(v95 + 24) = v100;
              }
              else
              {
                *(_QWORD *)(v95 + 24) = 0;
                v99 = (uint64_t *)(v101 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v95 + 16) = v95;
              *(_QWORD *)(v95 + 24) = 0;
            }
            *v99 = v95;
          }
          v95 += 32;
          v97 -= 32;
        }
        while (v97);
      }
      v68 = *(_QWORD *)(v66 + 728);
      if (v68)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v68 + 24))(v68, v64);
      v69 = *a3 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v64 = v69 | *(_QWORD *)v64 & 7;
      *(_QWORD *)(v64 + 8) = a3;
      *(_QWORD *)(v69 + 8) = v64;
      *a3 = *a3 & 7 | v64;
      *((_QWORD *)&v142 + 1) = 0;
      v143 = 0;
      v144 = 0;
      LODWORD(v142) = 0x1000000;
      DWORD1(v142) = a5;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v43, (const llvm::MachineOperand *)&v142);
      LODWORD(v142) = 1;
      *((_QWORD *)&v142 + 1) = 0;
      v143 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v43, (const llvm::MachineOperand *)&v142);
      LODWORD(v142) = 1;
      *((_QWORD *)&v142 + 1) = 0;
      v143 = 8;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v43, (const llvm::MachineOperand *)&v142);
      *((_QWORD *)&v142 + 1) = 0;
      v143 = 0;
      LODWORD(v142) = 0;
      DWORD1(v142) = a6;
      v144 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v43, (const llvm::MachineOperand *)&v142);
      LODWORD(v142) = 1;
      *((_QWORD *)&v142 + 1) = 0;
      v143 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v43, (const llvm::MachineOperand *)&v142);
      LODWORD(v142) = 1;
      *((_QWORD *)&v142 + 1) = 0;
      v143 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v64, v43, (const llvm::MachineOperand *)&v142);
      v17 = (unsigned __int8 *)v137;
      if (v137)
      {
        v18 = (unsigned __int8 **)&v137;
        goto LABEL_106;
      }
      return;
    }
    v31 = 0;
    v32 = *(llvm::MachineFunction **)(a2 + 32);
    v131 = *((_QWORD *)v32 + 5);
    v33 = (unint64_t)a5 >> 3;
    v34 = (unint64_t)a6 >> 3;
    while (1)
    {
      if (v13 <= 0x3FFFFFFE)
      {
        v35 = (uint64_t)*(&off_1E7FAA578)[v31];
        v36 = *(unsigned __int16 *)(v35 + 22);
        if (v33 < v36)
        {
          v37 = *(_QWORD *)(v35 + 8);
          v38 = v20 ^ 1;
          if (((1 << (a5 & 7)) & *(unsigned __int8 *)(v37 + v33)) == 0)
            v38 = 1;
          if ((v38 & 1) == 0 && v34 < v36 && ((1 << (a6 & 7)) & *(unsigned __int8 *)(v37 + v34)) != 0)
            break;
        }
      }
      v31 += 3;
      if (v31 == 45)
        return;
    }
    v130 = (int)(&off_1E7FAA578)[v31 + 1];
    v70 = a5;
    v71 = a1 + 12;
    v72 = a1[12];
    v73 = a1[18];
    v74 = *(unsigned int *)(v72 + 24 * a5 + 4);
    v75 = *(unsigned __int16 *)(v73 + 2 * v74);
    if (!*(_WORD *)(v73 + 2 * v74))
      goto LABEL_127;
    LOWORD(v75) = v75 + a5;
    v76 = (unsigned __int16 *)(a1[22] + 2 * *(unsigned int *)(v72 + 24 * a5 + 12));
    v77 = (unsigned __int16 *)(v73 + 2 * v74 + 2);
    while (v130 != *v76)
    {
      v78 = *v77++;
      LOWORD(v75) = v78 + v75;
      ++v76;
      if (!v78)
      {
        v75 = 0;
        goto LABEL_127;
      }
    }
    v75 = (unsigned __int16)v75;
LABEL_127:
    if (v75 == a6)
    {
      v127 = 1;
    }
    else if (v75 - 1 > 0x3FFFFFFE)
    {
      v127 = 0;
    }
    else
    {
      v94 = llvm::MCRegisterInfo::regsOverlap(v71, a6, v75);
      v70 = a5;
      v127 = v94;
    }
    v102 = 0;
    v125 = HIDWORD((&off_1E7FAA578)[v31 + 1]) - v130;
    v126 = HIDWORD((&off_1E7FAA578)[v31 + 1]);
    v124 = LOBYTE((&off_1E7FAA578)[v31 + 2]);
    v128 = v32;
    while (1)
    {
      v103 = v126 - v102;
      if (!v127)
        v103 = v102 + v130;
      v104 = a1[12];
      v105 = a1[18];
      v106 = *(unsigned int *)(v104 + 24 * a6 + 4);
      if (*(_WORD *)(v105 + 2 * v106))
      {
        v107 = *(_WORD *)(v105 + 2 * v106) + a6;
        v108 = (unsigned __int16 *)(a1[22] + 2 * *(unsigned int *)(v104 + 24 * a6 + 12));
        v109 = (unsigned __int16 *)(v105 + 2 * v106 + 2);
        while (v103 != *v108)
        {
          v110 = *v109++;
          v107 += v110;
          ++v108;
          if (!v110)
            goto LABEL_165;
        }
        v111 = v107;
      }
      else
      {
LABEL_165:
        v111 = 0;
      }
      v112 = *(unsigned int *)(v104 + 24 * v70 + 4);
      if (*(_WORD *)(v105 + 2 * v112))
      {
        v113 = *(_WORD *)(v105 + 2 * v112) + a5;
        v114 = (unsigned __int16 *)(a1[22] + 2 * *(unsigned int *)(v104 + 24 * v70 + 12));
        v115 = (unsigned __int16 *)(v105 + 2 * v112 + 2);
        while (v103 != *v114)
        {
          v116 = *v115++;
          v113 += v116;
          ++v114;
          if (!v116)
            goto LABEL_171;
        }
        v117 = v113;
      }
      else
      {
LABEL_171:
        v117 = 0;
      }
      v118 = *a4;
      if (v124)
      {
        v136 = *a4;
        if (v118)
          llvm::MetadataTracking::track((uint64_t)&v136, v118, 2);
        v119 = (llvm::MachineInstr *)sub_1C4A14600(a1, a2, a3, &v136, v117, v111);
        v120 = v136;
        if (!v136)
          goto LABEL_183;
        v121 = &v136;
      }
      else
      {
        v135 = *a4;
        if (v118)
          llvm::MetadataTracking::track((uint64_t)&v135, v118, 2);
        v119 = (llvm::MachineInstr *)sub_1C4A148A8(a1, a2, a3, &v135, v117, v111);
        v120 = v135;
        if (!v135)
          goto LABEL_183;
        v121 = &v135;
      }
      llvm::MetadataTracking::untrack((uint64_t)v121, v120);
LABEL_183:
      v133 = v128;
      v134 = v119;
      if (*(_BYTE *)(v131 + 16))
      {
        if (((v102 != 0) & a7) != 0)
          v122 = 36;
        else
          v122 = 4;
        sub_1C47BF4F4(&v133, a6, v122, 0);
      }
      else
      {
        *((_QWORD *)&v142 + 1) = 0;
        v143 = 0;
        v144 = 0;
        LODWORD(v142) = 50331648;
        DWORD1(v142) = a5;
        llvm::MachineInstr::addOperand(v119, v128, (const llvm::MachineOperand *)&v142);
        if (v102)
        {
          *((_QWORD *)&v142 + 1) = 0;
          v143 = 0;
          v144 = 0;
          LODWORD(v142) = 0x2000000;
          DWORD1(v142) = a5;
          llvm::MachineInstr::addOperand(v134, v133, (const llvm::MachineOperand *)&v142);
        }
      }
      ++v102;
      v70 = a5;
      if (v102 > v125)
        return;
    }
  }
  v24 = *a4;
  v140 = v24;
  if (v24)
    llvm::MetadataTracking::track((uint64_t)&v140, v24, 2);
  sub_1C4A148A8(a1, a2, a3, &v140, a5, a6);
  v17 = v140;
  if (v140)
  {
    v18 = &v140;
    goto LABEL_106;
  }
}

uint64_t sub_1C4A1587C(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4;

  if ((unsigned __int16)(**(_WORD **)(a2 + 16) - 317) > 0xFu)
    return 0;
  *a4 = dword_1C66161C0[(__int16)(**(_WORD **)(a2 + 16) - 317)];
  v4 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)v4 || *(_BYTE *)(v4 + 96) != 5 || *(_BYTE *)(v4 + 128) != 1 || *(_QWORD *)(v4 + 144))
    return 0;
  *a3 = *(_DWORD *)(v4 + 112);
  return *(unsigned int *)(v4 + 4);
}

uint64_t sub_1C4A158EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;

  v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 72))(a1, a2, a3, &v4);
}

uint64_t sub_1C4A15918(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4;

  if ((unsigned __int16)(**(_WORD **)(a2 + 16) - 341) > 0xFu)
    return 0;
  *a4 = dword_1C66161C0[(__int16)(**(_WORD **)(a2 + 16) - 341)];
  v4 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v4 + 64) || *(_BYTE *)(v4 + 96) != 5 || *(_BYTE *)(v4 + 128) != 1 || *(_QWORD *)(v4 + 144))
    return 0;
  *a3 = *(_DWORD *)(v4 + 112);
  return *(unsigned int *)(v4 + 68);
}

uint64_t sub_1C4A15988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;

  v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, a3, &v4);
}

void sub_1C4A159B4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, int a8, uint64_t a9)
{
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *FixedStack;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  llvm::MachineFunction *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  llvm::MachineFunction **v48;
  llvm::MachineInstr *v49;
  llvm::MachineFunction *v50;
  llvm::MachineInstr *v51;
  llvm::MachineFunction *v52;
  llvm::MachineInstr *v53;
  llvm::MachineFunction *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  llvm::MachineFunction *v65[2];
  llvm::MachineFunction *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;

  v66 = 0;
  if (a2 + 48 != a3 && (llvm::MachineFunction **)(a3 + 56) != &v66)
  {
    v16 = *(unsigned __int8 **)(a3 + 56);
    v66 = (llvm::MachineFunction *)v16;
    if (v16)
      llvm::MetadataTracking::track((uint64_t)&v66, v16, 2);
  }
  v17 = *(unsigned __int16 *)(*(_QWORD *)a7 + 24);
  v18 = v17 >> 5;
  v19 = dword_1C676D6D0[v17 >> 5];
  v20 = 1 << v17;
  v63 = a4;
  v62 = a5;
  if ((v20 & v19) != 0)
  {
    v21 = 356;
  }
  else if ((dword_1C676CC6C[v18] & v20) != 0)
  {
    v21 = 343;
  }
  else if ((dword_1C676D910[v18] & v20) != 0)
  {
    v21 = 349;
  }
  else if ((dword_1C676E0A0[v18] & v20) != 0)
  {
    v21 = 351;
  }
  else if ((dword_1C676E5D0[v18] & v20) != 0)
  {
    v21 = 352;
  }
  else if ((dword_1C676EF80[v18] & v20) != 0)
  {
    v21 = 354;
  }
  else if ((dword_1C676F6F0[v18] & v20) != 0)
  {
    v21 = 355;
  }
  else if ((dword_1C676FB70[v18] & v20) != 0)
  {
    v21 = 341;
  }
  else if ((dword_1C67701E0[v18] & v20) != 0)
  {
    v21 = 342;
  }
  else if ((dword_1C6770C80[v18] & v20) != 0)
  {
    v21 = 344;
  }
  else if ((dword_1C6770F50[v18] & v20) != 0)
  {
    v21 = 345;
  }
  else if ((dword_1C6771250[v18] & v20) != 0)
  {
    v21 = 346;
  }
  else if ((dword_1C6771560[v18] & v20) != 0)
  {
    v21 = 347;
  }
  else if ((dword_1C6771D50[v18] & v20) != 0)
  {
    v21 = 348;
  }
  else if ((dword_1C6772020[v18] & v20) != 0)
  {
    v21 = 350;
  }
  else
  {
    v21 = 0;
  }
  v22 = *(_QWORD *)(a2 + 32);
  v23 = *(_QWORD *)(v22 + 56);
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v22 + 432), a6);
  v25 = (unint64_t)FixedStack | 4;
  if (FixedStack)
    v26 = *((_DWORD *)FixedStack + 3);
  else
    v26 = 0;
  v64 = a6;
  v27 = *(_QWORD *)(v23 + 8) + 40 * (*(_DWORD *)(v23 + 32) + a6);
  v28 = *(_QWORD *)(v27 + 8);
  v29 = *(_BYTE *)(v27 + 16);
  v30 = sub_1C484358C(v22 + 128, 80, 3);
  *(_QWORD *)v30 = v25;
  *(_QWORD *)(v30 + 8) = 0;
  *(_DWORD *)(v30 + 16) = v26;
  *(_BYTE *)(v30 + 20) = 0;
  *(_QWORD *)(v30 + 24) = ((unint64_t)(v28 & 0x1FFFFFFF) << 6) | 1;
  *(_WORD *)(v30 + 32) = 2;
  *(_BYTE *)(v30 + 34) = v29;
  *(_OWORD *)(v30 + 40) = 0u;
  *(_OWORD *)(v30 + 56) = 0u;
  *(_QWORD *)(v30 + 72) = 0;
  *(_WORD *)(v30 + 36) = 1;
  v31 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v31 + 329))
  {
    v33 = 0;
  }
  else
  {
    v32 = *(_QWORD *)v22;
    LODWORD(v67) = 0;
    if (sub_1C4AC67E0(v31, v32, "MemoryWriteCacheCtl", (int *)&v67))
      v33 = v67;
    else
      v33 = 0;
    v31 = *(_QWORD *)(a1 + 80);
  }
  v34 = *(_QWORD *)v22;
  LODWORD(v67) = 0;
  v35 = sub_1C4AC67E0(v31, v34, "MemoryWriteL2Pers", (int *)&v67);
  v36 = v67;
  v37 = *(_QWORD *)(a1 + 8);
  v38 = *(llvm::MachineFunction **)(a2 + 32);
  v65[0] = v66;
  if (v66)
    llvm::MetadataTracking::track((uint64_t)v65, (unsigned __int8 *)v66, 2);
  v39 = v37 + 48 * v21;
  v40 = *((_QWORD *)v38 + 28);
  if (v40)
    *((_QWORD *)v38 + 28) = *(_QWORD *)v40;
  else
    v40 = sub_1C484358C((uint64_t)v38 + 128, 72, 3);
  v67 = (unsigned __int8 *)v65[0];
  if (v65[0])
  {
    llvm::MetadataTracking::retrack((uint64_t)v65, (unsigned __int8 *)v65[0], (uint64_t)&v67);
    v65[0] = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v40, v38, v39, &v67, 0);
  if (v67)
    llvm::MetadataTracking::untrack((uint64_t)&v67, v67);
  if (v65[0])
    llvm::MetadataTracking::untrack((uint64_t)v65, (unsigned __int8 *)v65[0]);
  v41 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v40 + 24) = v41;
  v42 = *(_QWORD *)(v41 + 32);
  v43 = *(unsigned int *)(v40 + 40);
  if ((_DWORD)v43)
  {
    v55 = *(_QWORD *)(v40 + 32);
    v56 = *(_QWORD *)(v42 + 40);
    v57 = 32 * v43;
    do
    {
      if (!*(_BYTE *)v55)
      {
        v58 = *(unsigned int *)(v55 + 4);
        if ((int)v58 >= 0)
          v59 = (uint64_t *)(*(_QWORD *)(v56 + 272) + 8 * v58);
        else
          v59 = (uint64_t *)(*(_QWORD *)(v56 + 24) + 16 * (v58 & 0x7FFFFFFF) + 8);
        v60 = *v59;
        if (*v59)
        {
          v61 = *(_QWORD *)(v60 + 16);
          *(_QWORD *)(v60 + 16) = v55;
          *(_QWORD *)(v55 + 16) = v61;
          if ((*(_BYTE *)(v55 + 3) & 1) != 0)
          {
            *(_QWORD *)(v55 + 24) = v60;
          }
          else
          {
            *(_QWORD *)(v55 + 24) = 0;
            v59 = (uint64_t *)(v61 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v55 + 16) = v55;
          *(_QWORD *)(v55 + 24) = 0;
        }
        *v59 = v55;
      }
      v55 += 32;
      v57 -= 32;
    }
    while (v57);
  }
  v44 = *(_QWORD *)(v42 + 728);
  if (v44)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v44 + 24))(v44, v40);
  v45 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v40 = v45 | *(_QWORD *)v40 & 7;
  *(_QWORD *)(v40 + 8) = a3;
  *(_QWORD *)(v45 + 8) = v40;
  *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | v40;
  v65[0] = v38;
  v65[1] = (llvm::MachineFunction *)v40;
  v46 = 4 * v36;
  if (!v35)
    v46 = 4;
  if (v33 == 3)
    v46 = 4;
  LODWORD(v67) = 1;
  v68 = 0;
  v69 = v46 | v33;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v38, (const llvm::MachineOperand *)&v67);
  LODWORD(v67) = 1;
  v68 = 0;
  v69 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v38, (const llvm::MachineOperand *)&v67);
  if (v62)
    v47 = 8;
  else
    v47 = 0;
  v48 = sub_1C47BF4F4(v65, v63, v47, 0);
  v49 = v48[1];
  v50 = *v48;
  LODWORD(v67) = 5;
  v68 = 0;
  LODWORD(v69) = v64;
  llvm::MachineInstr::addOperand(v49, v50, (const llvm::MachineOperand *)&v67);
  v52 = *v48;
  v51 = v48[1];
  LODWORD(v67) = 1;
  v68 = 0;
  v69 = 0;
  llvm::MachineInstr::addOperand(v51, v52, (const llvm::MachineOperand *)&v67);
  v54 = *v48;
  v53 = v48[1];
  LODWORD(v67) = 1;
  v68 = 0;
  v69 = a9;
  llvm::MachineInstr::addOperand(v53, v54, (const llvm::MachineOperand *)&v67);
  llvm::MachineInstr::addMemOperand(v48[1], *v48, (llvm::MachineMemOperand *)v30);
  if (v66)
    llvm::MetadataTracking::untrack((uint64_t)&v66, (unsigned __int8 *)v66);
}

uint64_t sub_1C4A15F74(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  if ((a4 & 0x80000000) == 0)
  {
    v9 = a1;
    llvm::TargetRegisterInfo::getRegSizeInBits(a8, a4, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40));
    a1 = v9;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
}

void sub_1C4A16024(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *FixedStack;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  llvm::MachineFunction *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v56 = 0;
  if (a2 + 48 != a3 && (unsigned __int8 **)(a3 + 56) != &v56)
  {
    v15 = *(unsigned __int8 **)(a3 + 56);
    v56 = v15;
    if (v15)
      llvm::MetadataTracking::track((uint64_t)&v56, v15, 2);
  }
  v16 = *(unsigned __int16 *)(*(_QWORD *)a6 + 24);
  v17 = v16 >> 5;
  v18 = dword_1C676D6D0[v16 >> 5];
  v19 = 1 << v16;
  v55 = a8;
  v53 = a4;
  if ((v19 & v18) != 0)
  {
    v20 = 332;
  }
  else if ((dword_1C676CC6C[v17] & v19) != 0)
  {
    v20 = 319;
  }
  else if ((dword_1C676D910[v17] & v19) != 0)
  {
    v20 = 325;
  }
  else if ((dword_1C676E0A0[v17] & v19) != 0)
  {
    v20 = 327;
  }
  else if ((dword_1C676E5D0[v17] & v19) != 0)
  {
    v20 = 328;
  }
  else if ((dword_1C676EF80[v17] & v19) != 0)
  {
    v20 = 330;
  }
  else if ((dword_1C676F6F0[v17] & v19) != 0)
  {
    v20 = 331;
  }
  else if ((dword_1C676FB70[v17] & v19) != 0)
  {
    v20 = 317;
  }
  else if ((dword_1C67701E0[v17] & v19) != 0)
  {
    v20 = 318;
  }
  else if ((dword_1C6770C80[v17] & v19) != 0)
  {
    v20 = 320;
  }
  else if ((dword_1C6770F50[v17] & v19) != 0)
  {
    v20 = 321;
  }
  else if ((dword_1C6771250[v17] & v19) != 0)
  {
    v20 = 322;
  }
  else if ((dword_1C6771560[v17] & v19) != 0)
  {
    v20 = 323;
  }
  else if ((dword_1C6771D50[v17] & v19) != 0)
  {
    v20 = 324;
  }
  else if ((dword_1C6772020[v17] & v19) != 0)
  {
    v20 = 326;
  }
  else
  {
    v20 = 0;
  }
  v21 = *(_QWORD *)(a2 + 32);
  v22 = *(_QWORD *)(v21 + 56);
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v21 + 432), a5);
  v24 = (unint64_t)FixedStack | 4;
  if (FixedStack)
    v25 = *((_DWORD *)FixedStack + 3);
  else
    v25 = 0;
  v54 = a5;
  v26 = *(_QWORD *)(v22 + 8) + 40 * (*(_DWORD *)(v22 + 32) + a5);
  v27 = *(_QWORD *)(v26 + 8);
  v28 = *(_BYTE *)(v26 + 16);
  v29 = sub_1C484358C(v21 + 128, 80, 3);
  *(_QWORD *)v29 = v24;
  *(_QWORD *)(v29 + 8) = 0;
  *(_DWORD *)(v29 + 16) = v25;
  *(_BYTE *)(v29 + 20) = 0;
  *(_QWORD *)(v29 + 24) = ((unint64_t)(v27 & 0x1FFFFFFF) << 6) | 1;
  *(_WORD *)(v29 + 32) = 1;
  *(_BYTE *)(v29 + 34) = v28;
  *(_OWORD *)(v29 + 40) = 0u;
  *(_OWORD *)(v29 + 56) = 0u;
  *(_QWORD *)(v29 + 72) = 0;
  *(_WORD *)(v29 + 36) = 1;
  v30 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v30 + 329))
  {
    v32 = 0;
  }
  else
  {
    v31 = *(_QWORD *)v21;
    LODWORD(v58) = 0;
    if (sub_1C4AC67E0(v30, v31, "MemoryWriteCacheCtl", (int *)&v58))
      v32 = v58;
    else
      v32 = 0;
    v30 = *(_QWORD *)(a1 + 80);
  }
  v33 = *(_QWORD *)v21;
  LODWORD(v58) = 0;
  v34 = sub_1C4AC67E0(v30, v33, "MemoryWriteL2Pers", (int *)&v58);
  v35 = v58;
  v36 = *(_QWORD *)(a1 + 8);
  v37 = *(llvm::MachineFunction **)(a2 + 32);
  v57 = v56;
  if (v56)
    llvm::MetadataTracking::track((uint64_t)&v57, v56, 2);
  v38 = v36 + 48 * v20;
  v39 = *((_QWORD *)v37 + 28);
  if (v39)
    *((_QWORD *)v37 + 28) = *(_QWORD *)v39;
  else
    v39 = sub_1C484358C((uint64_t)v37 + 128, 72, 3);
  v58 = v57;
  if (v57)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v57, v57, (uint64_t)&v58);
    v57 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v39, v37, v38, &v58, 0);
  if (v58)
    llvm::MetadataTracking::untrack((uint64_t)&v58, v58);
  if (v57)
    llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
  v40 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v39 + 24) = v40;
  v41 = *(_QWORD *)(v40 + 32);
  v42 = *(unsigned int *)(v39 + 40);
  if ((_DWORD)v42)
  {
    v46 = *(_QWORD *)(v39 + 32);
    v47 = *(_QWORD *)(v41 + 40);
    v48 = 32 * v42;
    do
    {
      if (!*(_BYTE *)v46)
      {
        v49 = *(unsigned int *)(v46 + 4);
        if ((int)v49 >= 0)
          v50 = (uint64_t *)(*(_QWORD *)(v47 + 272) + 8 * v49);
        else
          v50 = (uint64_t *)(*(_QWORD *)(v47 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
        v51 = *v50;
        if (*v50)
        {
          v52 = *(_QWORD *)(v51 + 16);
          *(_QWORD *)(v51 + 16) = v46;
          *(_QWORD *)(v46 + 16) = v52;
          if ((*(_BYTE *)(v46 + 3) & 1) != 0)
          {
            *(_QWORD *)(v46 + 24) = v51;
          }
          else
          {
            *(_QWORD *)(v46 + 24) = 0;
            v50 = (uint64_t *)(v52 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v46 + 16) = v46;
          *(_QWORD *)(v46 + 24) = 0;
        }
        *v50 = v46;
      }
      v46 += 32;
      v48 -= 32;
    }
    while (v48);
  }
  v43 = *(_QWORD *)(v41 + 728);
  if (v43)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v43 + 24))(v43, v39);
  v44 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v39 = v44 | *(_QWORD *)v39 & 7;
  *(_QWORD *)(v39 + 8) = a3;
  *(_QWORD *)(v44 + 8) = v39;
  *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | v39;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  LODWORD(v58) = 0x1000000;
  HIDWORD(v58) = v53;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v37, (const llvm::MachineOperand *)&v58);
  v45 = 4 * v35;
  if (!v34)
    v45 = 4;
  if (v32 == 3)
    v45 = 4;
  LODWORD(v58) = 1;
  v59 = 0;
  v60 = v45 | v32;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v37, (const llvm::MachineOperand *)&v58);
  LODWORD(v58) = 1;
  v59 = 0;
  v60 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v37, (const llvm::MachineOperand *)&v58);
  LODWORD(v58) = 5;
  v59 = 0;
  LODWORD(v60) = v54;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v37, (const llvm::MachineOperand *)&v58);
  LODWORD(v58) = 1;
  v59 = 0;
  v60 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v37, (const llvm::MachineOperand *)&v58);
  LODWORD(v58) = 1;
  v59 = 0;
  v60 = v55;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v39, v37, (const llvm::MachineOperand *)&v58);
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v39, v37, (llvm::MachineMemOperand *)v29);
  if (v56)
    llvm::MetadataTracking::untrack((uint64_t)&v56, v56);
}

uint64_t sub_1C4A165E4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((a4 & 0x80000000) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 472))(a1);
  llvm::TargetRegisterInfo::getRegSizeInBits(a7, a4, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 472))(a1);
}

unint64_t sub_1C4A16684(uint64_t a1, llvm::MachineFunction *a2, uint64_t a3, _DWORD *a4, uint64_t a5, unint64_t *a6, int a7)
{
  unsigned __int8 v13;
  unint64_t v14;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int RegSizeInBits;
  int v26;
  uint64_t *FixedStack;
  int v28;
  char v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  llvm::MachineFunction *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  int v63;
  unsigned __int8 **v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v13 = atomic_load((unsigned __int8 *)&qword_1ED7ED520);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED520))
  {
    byte_1ED7ED518 = 1;
    __cxa_guard_release(&qword_1ED7ED520);
  }
  if (byte_1ED7ED518 != 1 || *a4)
    return 0;
  v16 = **(unsigned __int16 **)(a3 + 16);
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 32) + 16);
  v61 = (unsigned __int8 *)&off_1E81316D0;
  v62 = v17;
  v64 = &v61;
  v18 = sub_1C4C0B384(&v61);
  v19 = v64;
  if (v64 == &v61)
  {
    v20 = v61 + 32;
    v19 = &v61;
LABEL_8:
    (*(void (**)(unsigned __int8 **))v20)(v19);
    goto LABEL_9;
  }
  if (v64)
  {
    v20 = *v64 + 40;
    goto LABEL_8;
  }
LABEL_9:
  if (!sub_1C4C9179C(v16, v18))
    return 0;
  if (sub_1C4AD7110(a3))
    return 0;
  if (**(_WORD **)(a3 + 16) == 19)
    return 0;
  if (sub_1C4AD7094(a3))
    return 0;
  v59 = sub_1C4C915F0(**(unsigned __int16 **)(a3 + 16), 0, 3);
  v21 = *(_DWORD **)(a3 + 32);
  v22 = v21[1];
  if ((v22 & 0x80000000) == 0)
    return 0;
  v23 = (*v21 >> 8) & 0xFFF;
  v24 = *((_QWORD *)a2 + 7);
  if (!v23)
  {
    RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(a1 + 88, v22, *((_QWORD *)a2 + 5));
    v26 = 0;
    goto LABEL_16;
  }
  if (v23 >= 0x10 && v23 - 25 > 0xE)
    return 0;
  if (v23 >= 0x10)
    RegSizeInBits = 32;
  else
    RegSizeInBits = 16;
  if (v23 >= 0x10)
    v26 = 2 * v23 - 50;
  else
    v26 = v23 - 1;
LABEL_16:
  FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*((uint64_t ***)a2 + 54), a7);
  v56 = v26;
  v57 = (unint64_t)FixedStack | 4;
  v58 = (2 * v26);
  if (FixedStack)
    v28 = *((_DWORD *)FixedStack + 3);
  else
    v28 = 0;
  v29 = *(_BYTE *)(*(_QWORD *)(v24 + 8) + 40 * (*(_DWORD *)(v24 + 32) + a7) + 16);
  v30 = sub_1C484358C((uint64_t)a2 + 128, 80, 3);
  *(_QWORD *)v30 = v57;
  *(_QWORD *)(v30 + 8) = v58;
  *(_DWORD *)(v30 + 16) = v28;
  *(_BYTE *)(v30 + 20) = 0;
  *(_QWORD *)(v30 + 24) = ((unint64_t)(RegSizeInBits >> 3) << 6) | 1;
  *(_WORD *)(v30 + 32) = 2;
  *(_BYTE *)(v30 + 34) = v29;
  *(_OWORD *)(v30 + 40) = 0u;
  *(_OWORD *)(v30 + 56) = 0u;
  *(_QWORD *)(v30 + 72) = 0;
  *(_WORD *)(v30 + 36) = 1;
  v31 = RegSizeInBits >> sub_1C4C916E0(**(unsigned __int16 **)(a3 + 16));
  if (v31 != 32 && v31 != 16)
    return 0;
  v32 = *(_QWORD *)(a3 + 24);
  v33 = *(_QWORD *)(a1 + 8);
  v34 = *(llvm::MachineFunction **)(v32 + 32);
  v35 = *(unsigned __int8 **)(a3 + 56);
  v60 = v35;
  if (v35)
    llvm::MetadataTracking::track((uint64_t)&v60, v35, 2);
  v36 = v33 + 48 * v59;
  v14 = *((_QWORD *)v34 + 28);
  if (v14)
    *((_QWORD *)v34 + 28) = *(_QWORD *)v14;
  else
    v14 = sub_1C484358C((uint64_t)v34 + 128, 72, 3);
  v61 = v60;
  if (v60)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v60, v60, (uint64_t)&v61);
    v60 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v14, v34, v36, &v61, 0);
  if (v61)
    llvm::MetadataTracking::untrack((uint64_t)&v61, v61);
  if (v60)
    llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
  v37 = *(_QWORD *)(v32 + 40);
  *(_QWORD *)(v14 + 24) = v37;
  v38 = *(_QWORD *)(v37 + 32);
  v39 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v39)
  {
    v49 = *(_QWORD *)(v14 + 32);
    v50 = *(_QWORD *)(v38 + 40);
    v51 = 32 * v39;
    do
    {
      if (!*(_BYTE *)v49)
      {
        v52 = *(unsigned int *)(v49 + 4);
        if ((int)v52 >= 0)
          v53 = (uint64_t *)(*(_QWORD *)(v50 + 272) + 8 * v52);
        else
          v53 = (uint64_t *)(*(_QWORD *)(v50 + 24) + 16 * (v52 & 0x7FFFFFFF) + 8);
        v54 = *v53;
        if (*v53)
        {
          v55 = *(_QWORD *)(v54 + 16);
          *(_QWORD *)(v54 + 16) = v49;
          *(_QWORD *)(v49 + 16) = v55;
          if ((*(_BYTE *)(v49 + 3) & 1) != 0)
          {
            *(_QWORD *)(v49 + 24) = v54;
          }
          else
          {
            *(_QWORD *)(v49 + 24) = 0;
            v53 = (uint64_t *)(v55 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v49 + 16) = v49;
          *(_QWORD *)(v49 + 24) = 0;
        }
        *v53 = v49;
      }
      v49 += 32;
      v51 -= 32;
    }
    while (v51);
  }
  v40 = *(_QWORD *)(v38 + 728);
  if (v40)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v40 + 24))(v40, v14);
  v41 = *a6 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = v41 | *(_QWORD *)v14 & 7;
  *(_QWORD *)(v14 + 8) = a6;
  *(_QWORD *)(v41 + 8) = v14;
  *a6 = *a6 & 7 | v14;
  if (v31 == 16)
    v42 = 86;
  else
    v42 = 87;
  v62 = 0;
  v63 = v42;
  LODWORD(v64) = 0;
  LODWORD(v61) = 7;
  HIDWORD(v61) = v56;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v34, (const llvm::MachineOperand *)&v61);
  LODWORD(v61) = 5;
  v62 = 0;
  v63 = a7;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v34, (const llvm::MachineOperand *)&v61);
  if (*(_DWORD *)(a3 + 40) >= 2u)
  {
    v43 = 1;
    v44 = 32;
    do
    {
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v14, v34, (const llvm::MachineOperand *)(*(_QWORD *)(a3 + 32) + v44));
      ++v43;
      v44 += 32;
    }
    while (v43 < *(unsigned int *)(a3 + 40));
  }
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v14, a2, (llvm::MachineMemOperand *)v30);
  if (*(_BYTE *)(*((_QWORD *)a2 + 2) + 392))
  {
    v45 = *((_QWORD *)a2 + 43);
    v46 = *(_QWORD *)a2;
    if (v46 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 560))(v45))
    {
      v47 = sub_1C4C915C4(v59);
      if ((v47 & 0xFF00000000) != 0 && v47 == 9)
      {
        v48 = *(_QWORD *)(v14 + 32) + 32 * sub_1C4C2FD5C((unsigned __int16)v59);
        *(_QWORD *)(v48 + 16) |= 0x20000uLL;
      }
    }
  }
  return v14;
}

uint64_t sub_1C4A16BD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v5;
  unsigned __int16 *v6;
  int v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = (_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 56);
  if (a2 + 48 == v3)
    return 0;
  v5 = *v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (*(_BYTE *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 4) != 0)
      v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    v6 = *(unsigned __int16 **)(v5 + 16);
    v7 = *v6;
    v8 = (v7 - 9) > 0x3C || ((1 << (v7 - 9)) & 0x1000000000000605) == 0;
    v9 = !v8 || v7 == 0;
    if (!v9 && (v6[4] & 0x10) == 0)
      break;
    if (v5 == v3)
      return 0;
    v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    if (!v5 || (*(_BYTE *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 4) != 0)
        v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v7 != 303 && v7 != 305)
    return 0;
  v10 = v5;
  if ((*(_BYTE *)v5 & 4) == 0)
  {
    v10 = v5;
    if ((*(_WORD *)(v5 + 44) & 8) != 0)
    {
      v10 = v5;
      do
        v10 = *(_QWORD *)(v10 + 8);
      while ((*(_WORD *)(v10 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(v5 + 24) + 40, v5, *(_QWORD *)(v10 + 8));
  if (v2 == *(_QWORD **)(a2 + 56))
    return 1;
  v11 = *v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v11 || (*(_BYTE *)v11 & 4) == 0)
  {
    while ((*(_WORD *)(v11 + 44) & 4) != 0)
      v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
  }
  if (**(_WORD **)(v11 + 16) != 305)
    return 1;
  v12 = v11;
  if ((*(_BYTE *)v11 & 4) == 0)
  {
    v12 = v11;
    if ((*(_WORD *)(v11 + 44) & 8) != 0)
    {
      v12 = v11;
      do
        v12 = *(_QWORD *)(v12 + 8);
      while ((*(_WORD *)(v12 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(v11 + 24) + 40, v11, *(_QWORD *)(v12 + 8));
  return 2;
}

uint64_t sub_1C4A16D74()
{
  return 0;
}

uint64_t sub_1C4A16D7C(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v4 = *(unsigned __int16 **)(a1 + 16);
  v5 = *v4;
  result = sub_1C4C2FD5C(v5);
  v7 = *((_QWORD *)v4 + 2);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(v8 + 32 * result + 16);
  if ((v7 & 0x1D00) == 0x500 || (v7 & 0x1E00) == 0x600)
  {
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 14) = 1;
    if ((v9 & 0x2000000000000000) == 0)
    {
      *(_DWORD *)(a2 + 8) = (v9 >> 54);
      *(_BYTE *)(a2 + 14) = 0;
    }
    v10 = v9 >> 4;
  }
  else
  {
    v10 = v9 >> 4;
    *(_DWORD *)(a2 + 4) = v10;
    result = sub_1C4C2FD5C(v5);
    if (*(_BYTE *)(v8 + 32 * result) == 1)
    {
      *(_DWORD *)(a2 + 8) = *(_QWORD *)(v8 + 32 * result + 16);
      *(_BYTE *)(a2 + 14) = 0;
    }
    else
    {
      *(_DWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 14) = 1;
    }
  }
  v11 = v9 & 0xF;
  v12 = 4;
  v13 = 1;
  if (((1 << (v9 & 0xF)) & 0xF531) == 0)
  {
    if (((1 << v11) & 0xCA) == 0)
    {
LABEL_18:
      v13 = v12;
      goto LABEL_19;
    }
    v13 = 2;
  }
  if ((v11 - 12) >= 4 && v11 != 8)
  {
    v12 = v13;
    goto LABEL_18;
  }
  v10 = 15;
LABEL_19:
  *(_DWORD *)a2 = v13;
  *(_DWORD *)(a2 + 4) = v10;
  return result;
}

uint64_t sub_1C4A16EB0@<X0>(unsigned int *a1@<X0>, llvm::APInt *a2@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  *((_DWORD *)a2 + 2) = 256;
  llvm::APInt::initSlowCase(a2, 0, 0);
  v4 = 8;
  do
  {
    sub_1C4888094((uint64_t)a2, *a1);
    if ((a1[1] & v4) != 0)
    {
      v5 = ~(-1 << *a1);
      v6 = *((_DWORD *)a2 + 2);
      if (v6 > 0x40)
      {
        **(_QWORD **)a2 |= v5;
      }
      else
      {
        v7 = *(_QWORD *)a2 | v5;
        if (v6)
          v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
        else
          v8 = 0;
        *(_QWORD *)a2 = v8 & v7;
      }
    }
    v9 = v4 >= 2;
    v4 >>= 1;
  }
  while (v9);
  return sub_1C4888094((uint64_t)a2, a1[2]);
}

BOOL sub_1C4A16F80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1[3] + 32) + 344);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 560))(v2);
  if (v3 && (*(_WORD *)(v3 + 18) & 0x3FF0) == 0x660)
    return 0;
  v4 = (unsigned __int16 *)a1[2];
  return (*((_BYTE *)v4 + 21) & 1) == 0
      && (*(_QWORD *)(a1[4] + 32 * sub_1C4C2FD5C(*v4) + 16) & 0x380) != 640;
}

uint64_t sub_1C4A17004(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 **a7)
{
  uint64_t v9;
  llvm::MachineFunction *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28[4];
  unsigned __int8 *v29;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = (llvm::MachineFunction *)a2[4];
  v11 = *a7;
  v29 = v11;
  if (v11)
    llvm::MetadataTracking::track((uint64_t)&v29, v11, 2);
  v12 = v9 + 14544;
  v13 = *((_QWORD *)v10 + 28);
  if (v13)
    *((_QWORD *)v10 + 28) = *(_QWORD *)v13;
  else
    v13 = sub_1C484358C((uint64_t)v10 + 128, 72, 3);
  v28[0] = v29;
  if (v29)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v29, v29, (uint64_t)v28);
    v29 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v13, v10, v12, v28, 0);
  if (v28[0])
    llvm::MetadataTracking::untrack((uint64_t)v28, v28[0]);
  if (v29)
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  v14 = a2[5];
  *(_QWORD *)(v13 + 24) = v14;
  v15 = *(_QWORD *)(v14 + 32);
  v16 = *(unsigned int *)(v13 + 40);
  if ((_DWORD)v16)
  {
    v21 = *(_QWORD *)(v13 + 32);
    v22 = *(_QWORD *)(v15 + 40);
    v23 = 32 * v16;
    do
    {
      if (!*(_BYTE *)v21)
      {
        v24 = *(unsigned int *)(v21 + 4);
        if ((int)v24 >= 0)
          v25 = (uint64_t *)(*(_QWORD *)(v22 + 272) + 8 * v24);
        else
          v25 = (uint64_t *)(*(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
        v26 = *v25;
        if (*v25)
        {
          v27 = *(_QWORD *)(v26 + 16);
          *(_QWORD *)(v26 + 16) = v21;
          *(_QWORD *)(v21 + 16) = v27;
          if ((*(_BYTE *)(v21 + 3) & 1) != 0)
          {
            *(_QWORD *)(v21 + 24) = v26;
          }
          else
          {
            *(_QWORD *)(v21 + 24) = 0;
            v25 = (uint64_t *)(v27 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v21 + 16) = v21;
          *(_QWORD *)(v21 + 24) = 0;
        }
        *v25 = v21;
      }
      v21 += 32;
      v23 -= 32;
    }
    while (v23);
  }
  v17 = *(_QWORD *)(v15 + 728);
  if (v17)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 24))(v17, v13);
  v19 = a2[6];
  v18 = a2 + 6;
  *(_QWORD *)v13 = v19 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v13 & 7;
  *(_QWORD *)(v13 + 8) = v18;
  *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 8) = v13;
  *v18 = *v18 & 7 | v13;
  v28[1] = 0;
  v28[2] = a3;
  LODWORD(v28[0]) = 4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v13, v10, (const llvm::MachineOperand *)v28);
  return 1;
}

uint64_t sub_1C4A171E8(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, int *a5)
{
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v9 = **(unsigned __int16 **)(a2 + 16);
  v13 = 0x200000000;
  v14 = 1;
  if (sub_1C4C640F8(67, 3, &v13) == v9)
    goto LABEL_6;
  v13 = 46;
  v14 = 1;
  if (sub_1C4C640F8(67, 3, &v13) == v9)
  {
    v11 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(v11 + 144) || *(_BYTE *)(v11 + 64))
      return 0;
    v12 = 25;
    goto LABEL_9;
  }
  v13 = 0x20000002ELL;
  v14 = 1;
  if (sub_1C4C640F8(67, 3, &v13) == v9)
  {
LABEL_6:
    v11 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(v11 + 144) || *(_BYTE *)(v11 + 64))
      return 0;
    v12 = 1;
LABEL_9:
    *a3 = *(_DWORD *)(v11 + 68);
    *a4 = *(_DWORD *)(v11 + 4);
    *a5 = v12;
    return 1;
  }
  return 0;
}

uint64_t sub_1C4A17330(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v12;

  if ((*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) & 0x400000000) != 0)
    return 0;
  v6 = 1;
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) & 0x1D00) != 0x500
    && (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) & 0x1D00) != 0x900)
  {
    v6 = 0;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) & 0x1E00;
    if (v9 != 2560 && v9 != 1536)
      return 0;
  }
  if (*(_DWORD *)(a1 + 40) != 6)
    return 0;
  v7 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v7 + 32 * v6) != 1)
    return 0;
  if (*(_BYTE *)(v7 + 128) != 1)
    return 0;
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 < 8)
    return 0;
  if ((v8 & 7) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 48) = v8;
    goto LABEL_19;
  }
  v4 = 0;
  if ((*(_QWORD *)(a1 + 48) & 7) != 3 || (v8 & 0xFFFFFFFFFFFFFFF8) == 0)
    return v4;
  if (*(_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8) != 1)
    return 0;
LABEL_19:
  v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  if ((v8 & 7) != 0)
    v10 = *(_QWORD *)(v10 + 8);
  else
    *(_QWORD *)(a1 + 48) = v10;
  *a4 = sub_1C4831E04(v10);
  v11 = sub_1C6150748(*(_QWORD *)(v7 + 32 * v6 + 16));
  v12 = *(_DWORD *)(v7 + 100);
  if (*(_BYTE *)(v7 + 96))
    v12 |= 0x40000000u;
  *a2 = v12;
  *a3 = *(_QWORD *)(v7 + 144) << v11;
  return 1;
}

BOOL sub_1C4A17478(uint64_t a1, llvm::MachineInstr *a2, llvm::MachineInstr *a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  char v10;
  char v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  int v44;
  uint64_t v45;
  char v46;
  _DWORD *v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  int *v51;
  int *v52;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  unint64_t v57;
  uint64_t v58;
  __int128 *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t *v63;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[2];
  _DWORD v71[2];
  _QWORD v72[2];
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v3 = 0;
  v75 = *MEMORY[0x1E0C80C00];
  v73 = 0u;
  v74 = 0u;
  v4 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v5 = *((_QWORD *)v4 + 2);
  v6 = (unsigned __int16 *)*((_QWORD *)a3 + 2);
  v7 = *((_QWORD *)v6 + 2);
  v72[0] = v5;
  v72[1] = v7;
  v66 = v7;
  v8 = *v4;
  v9 = *v6;
  v71[0] = v8;
  v71[1] = v9;
  v70[0] = a2;
  v70[1] = a3;
  v10 = 1;
  do
  {
    v11 = v10;
    v12 = v71[v3];
    v13 = v12 - 566;
    v14 = v12 - 6165;
    if (v13 < 3 || v14 <= 1)
    {
      v16 = v3 ^ 1;
      v17 = v72[v16];
      v18 = sub_1C4C915C4(v71[v16]);
      result = 0;
      v20 = (v18 & 0xFF00000000) == 0 || (v18 - 79) >= 2;
      v21 = !v20;
      v22 = (v17 & 0x1E00) != 0x600 && (v17 & 0x10000000) == 0;
      if (!v22 || v21)
        return result;
    }
    v10 = 0;
    v3 = 1;
  }
  while ((v11 & 1) != 0);
  if (((v5 | v66) & 2) != 0)
  {
    v25 = sub_1C4C915C4(v8);
    if ((v25 & 0xFF00000000) != 0 && (v25 - 79) <= 1)
    {
      v26 = sub_1C4C915C4(v9);
      if ((v26 & 0xFF00000000) != 0 && (v26 - 79) < 2)
        return 0;
    }
    return !llvm::MachineInstr::hasUnmodeledSideEffects(a2) && !llvm::MachineInstr::hasUnmodeledSideEffects(a3);
  }
  if (v8 == 9209)
  {
    v24 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 48);
    v23 = 1;
  }
  else if (v8 == 9211)
  {
    v23 = 1;
    v24 = -1;
  }
  else
  {
    v24 = 0;
    v23 = 0;
  }
  if (v9 == 9211)
  {
    v27 = -1;
    if ((v23 & 1) == 0)
      return 1;
    return (v24 | v27) >= 0 && v24 != v27;
  }
  if (v9 == 9209)
  {
    v27 = *(_DWORD *)(*((_QWORD *)a3 + 4) + 48);
    if ((v23 & 1) == 0)
      return 1;
    return (v24 | v27) >= 0 && v24 != v27;
  }
  if ((v23 & 1) != 0)
    return 1;
  v29 = v8 - 9;
  v31 = ((v8 - 9) <= 0x3C && ((1 << v29) & 0x1000000000000605) != 0
      || !v8
      || *((_QWORD *)v4 + 1) & 0x10 | v5 & 1)
     && (v30 = *((_QWORD *)a2 + 4), *(_BYTE *)v30 == 7)
     && *(_DWORD *)(v30 + 16) == 64;
  v32 = v9 - 9;
  if ((v9 - 9) <= 0x3C && ((1 << v32) & 0x1000000000000605) != 0
    || !v9
    || *((_QWORD *)v6 + 1) & 0x10 | v66 & 1)
  {
    v33 = *((_QWORD *)a3 + 4);
    if (*(_BYTE *)v33 == 7)
      v31 ^= *(_DWORD *)(v33 + 16) == 64;
  }
  if ((v31 & 1) != 0)
    return 1;
  if (v29 <= 0x3C && ((1 << v29) & 0x1000000000000605) != 0 || !v8 || *((_QWORD *)v4 + 1) & 0x10 | v5 & 1)
  {
    v34 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*v34 == 7
      && v34[4] == 64
      && (v32 <= 0x3C && ((1 << v32) & 0x1000000000000605) != 0 || !v9 || *((_QWORD *)v6 + 1) & 0x10 | v66 & 1))
    {
      v35 = (unsigned int *)*((_QWORD *)a3 + 4);
      v36 = *v35;
      if (*v35 == 7 && v35[4] == 64)
      {
        v37 = 0;
        v38 = v34[1];
        v39 = (unint64_t)v34[6] << 33;
        v40 = (*v34 >> 8) & 0xFFF;
        if (v40 <= 2)
        {
          if (v40 == 1)
            goto LABEL_80;
          if (v40 != 2)
            goto LABEL_82;
        }
        else
        {
          if (v40 == 3)
          {
            v37 = 8;
            goto LABEL_82;
          }
          if (v40 != 15)
          {
            if (v40 != 14)
            {
LABEL_82:
              v41 = 0;
              v42 = v39 | (2 * v38);
              v43 = ((unint64_t)v35[6] << 33) | (2 * v35[1]);
              v44 = (v36 >> 8) & 0xFFF;
              if (v44 <= 2)
              {
                if (v44 == 1)
                {
LABEL_90:
                  v41 = 2;
                  goto LABEL_92;
                }
                if (v44 != 2)
                {
LABEL_92:
                  result = 1;
                  if (v37 + v42 <= v43 || v41 + v43 <= v42)
                    return result;
                  goto LABEL_94;
                }
              }
              else
              {
                if (v44 == 3)
                {
                  v41 = 8;
                  goto LABEL_92;
                }
                if (v44 != 15)
                {
                  if (v44 != 14)
                    goto LABEL_92;
                  goto LABEL_90;
                }
              }
              v41 = 4;
              goto LABEL_92;
            }
LABEL_80:
            v37 = 2;
            goto LABEL_82;
          }
        }
        v37 = 4;
        goto LABEL_82;
      }
    }
  }
LABEL_94:
  v45 = 0;
  v46 = 1;
  v47 = (_DWORD *)&v73 + 2;
  do
  {
    v48 = v46;
    v49 = v70[v45];
    v51 = (int *)(v49 + 48);
    v50 = *(_QWORD *)(v49 + 48);
    if (v50 >= 8)
    {
      if ((v50 & 7) == 0)
      {
        *(_QWORD *)(v49 + 48) = v50 & 0xFFFFFFFFFFFFFFF8;
        v56 = (int *)(v49 + 56);
        while (1)
        {
LABEL_104:
          v57 = *(unsigned int *)(*(_QWORD *)v51 + 16);
          if ((_DWORD)v57)
          {
            if (v57 >= 0x51)
              abort();
          }
          else
          {
            v58 = v72[v45];
            if ((v58 & 0x1D00) != 0xD00 && (v58 & 0x1E00) != 0xE00)
              return 0;
          }
          *(_QWORD *)((char *)&v73 + 16 * v45 + ((v57 >> 3) & 0x1FFFFFF8)) |= 1 << v57;
          v51 += 2;
          if (v51 == v56)
            goto LABEL_110;
        }
      }
      v52 = (int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      if ((*(_QWORD *)(v49 + 48) & 7) == 3 && v52 != 0)
      {
        v55 = *v52;
        v51 = v52 + 2;
        v54 = v55;
        if ((_DWORD)v55)
        {
          v56 = &v51[2 * v54];
          goto LABEL_104;
        }
      }
    }
LABEL_110:
    v59 = &v73 + v45;
    if (!*(_QWORD *)v59 && (*v47 & 0x1FFFF) == 0)
    {
      v60 = v72[v45];
      if ((v60 & 0x1D00) != 0xD00 && (v60 & 0x1E00) != 0xE00)
        return 0;
      *(_QWORD *)v59 = 1;
    }
    v46 = 0;
    v47 += 4;
    v45 = 1;
  }
  while ((v48 & 1) != 0);
  if (sub_1C4893EB8(&v73, 0, (uint64_t)&v73 + 8, 0x11u, &v74))
  {
    v68 = 0;
    v69 = 0;
    v67 = 0;
    if (sub_1C4A17330((uint64_t)a2, (_DWORD *)&v67 + 1, (_DWORD *)&v69 + 1, (_DWORD *)&v68 + 1))
    {
      if (sub_1C4A17330((uint64_t)a3, &v67, &v69, &v68) && HIDWORD(v67) == (_DWORD)v67)
      {
        v61 = v69;
        if ((int)v69 >= SHIDWORD(v69))
          v62 = HIDWORD(v69);
        else
          v62 = v69;
        if (SHIDWORD(v69) > (int)v69)
          v61 = HIDWORD(v69);
        v63 = (uint64_t *)((char *)&v68 + 4);
        if (SHIDWORD(v69) > (int)v69)
          v63 = &v68;
        if (*(_DWORD *)v63 + v62 <= v61)
          return 1;
      }
    }
  }
  return ((unint64_t)v74 & (unint64_t)v73 | DWORD2(v73) & DWORD2(v74) & 0x1FFFF) == 0;
}

double sub_1C4A17AB4@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1C64169D0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)a1 = 6222;
  *(_QWORD *)&result = 0x800000001;
  *(_QWORD *)(a1 + 24) = 0x800000001;
  return result;
}

uint64_t sub_1C4A17AE8(uint64_t a1)
{
  char v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = *(_BYTE *)(a1 + 79);
  v2 = v1;
  v3 = v1 & 0x7F;
  if (v2 < 0)
    v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
    return 10;
  v6 = *(_QWORD *)(a1 + 56);
  v4 = a1 + 56;
  v5 = v6;
  v7 = v2 >= 0 ? v4 : v5;
  v8 = v3 - 1;
  if (v8 < 3)
  {
    if (v8 != 2)
      return 0;
  }
  else
  {
    if (*(_WORD *)(v7 + 1) == 14129 && *(_BYTE *)(v7 + 3) == 103)
      return 13;
    if (*(_WORD *)(v7 + 1) == 14129 && *(_BYTE *)(v7 + 3) == 115)
      return 13;
    if (*(_WORD *)(v7 + 1) == 14385 && *(_BYTE *)(v7 + 3) == 103)
      return 15;
  }
  switch(*(_WORD *)(v7 + 1))
  {
    case 0x3531:
      return 10;
    case 0x3631:
      return 11;
    case 0x3731:
      return 12;
    case 0x3831:
      return 14;
  }
  return 0;
}

BOOL sub_1C4A17BEC(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;

  v3 = **(unsigned __int16 **)(a2 + 16);
  v4 = sub_1C4C915C4(v3);
  if ((v4 & 0xFF00000000) == 0 || (_DWORD)v4 != 69 && (_DWORD)v4 != 50)
    return 0;
  v5 = sub_1C4C2FD5C(v3);
  v6 = sub_1C4C2FD5C(v3);
  LOBYTE(v7) = 0;
  do
  {
    while (1)
    {
      v8 = v7;
      v7 = *(_QWORD *)(a2 + 32) + 32 * v5;
      v9 = *(unsigned __int8 *)v7;
      if (v9 != 1)
        break;
      v7 = 1;
      v5 = v6;
      if ((v8 & 1) != 0)
        return v7;
    }
    if (v9 != 7)
      return 0;
    v10 = *(_DWORD *)(v7 + 16);
    LOBYTE(v7) = 1;
    v5 = v6;
  }
  while (!(v8 & 1 | (v10 != 64)));
  return v10 == 64;
}

uint64_t sub_1C4A17CC4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16) >> 1) & 1;
}

uint64_t sub_1C4A17CD4(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  _BOOL8 v14;
  unsigned int v16;
  unsigned int v17;
  uint64_t UniqueVRegDef;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  int *v41;
  int *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  unint64_t v59;
  int v60;
  int v61;
  _QWORD v62[2];
  int v63;
  char *v64;
  char *v65;
  char *v66;
  _BYTE v67[31];

  v9 = atomic_load((unsigned __int8 *)&qword_1ED7ED528);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED528))
  {
    byte_1ED7ED51C = 1;
    __cxa_guard_release(&qword_1ED7ED528);
  }
  if ((byte_1ED7ED51C & 1) == 0)
  {
    v10 = *(_QWORD *)(a5 + 24);
    v11 = *(_QWORD *)(v10 + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    if (v11 == (*(_QWORD *)(v10 + 16 * (a3 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8))
    {
      v12 = *(unsigned __int16 *)(*(_QWORD *)v11 + 24);
      v13 = (v12 - 14) > 0x32 || ((1 << (v12 - 14)) & 0x4000000004001) == 0;
      if (!v13 || v12 == 105 || v12 == 127)
      {
        v16 = a2;
        v17 = a3;
        UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(a5, v16);
        v19 = *(_QWORD *)(UniqueVRegDef + 24);
        v20 = llvm::MachineRegisterInfo::getUniqueVRegDef(a5, v17);
        v21 = *(_QWORD *)(v20 + 24);
        if (v21 != v19)
        {
          v22 = v20;
          v23 = sub_1C49FA70C(a4, v19);
          v24 = sub_1C49FA70C(a4, v21);
          v25 = atomic_load((unsigned __int8 *)&qword_1ED7ED530);
          if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED530))
          {
            __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &stru_1EF8EB0E8, &dword_1C475E000);
            __cxa_guard_release(&qword_1ED7ED530);
          }
          std::mutex::lock(&stru_1EF8EB0E8);
          v26 = 0;
          v27 = 0;
          v28 = *(_DWORD *)(v24 + 16);
          v29 = *(_DWORD *)(v23 + 16);
          v30 = v28 - v29;
          if (v28 - v29 < 0)
            v30 = v29 - v28;
          v62[0] = 0;
          v62[1] = 0;
          v63 = 0;
          v65 = 0;
          v66 = 0;
          v64 = 0;
          if (v30 <= byte_1ED7ED51C << 31 >> 31)
            goto LABEL_48;
          if (**(_WORD **)(UniqueVRegDef + 16) != 269)
          {
            v26 = v30;
            v27 = byte_1ED7ED51C << 31 >> 31;
LABEL_48:
            v14 = v26 <= v27;
LABEL_49:
            sub_1C6150A04(v62);
            std::mutex::unlock(&stru_1EF8EB0E8);
            return v14;
          }
          v60 = v30;
          v31 = *(unsigned int *)(*(_QWORD *)(UniqueVRegDef + 32) + 36);
          if ((v31 & 0x80000000) != 0)
            v32 = (uint64_t *)(*(_QWORD *)(a5 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8);
          else
            v32 = (uint64_t *)(*(_QWORD *)(a5 + 272) + 8 * v31);
          v33 = *v32;
          if (v33)
          {
            v37 = v33;
            if ((*(_BYTE *)(v33 + 3) & 0x81) != 0)
            {
              while (1)
              {
                v37 = *(_QWORD *)(v37 + 24);
                if (!v37)
                  break;
                if ((*(_DWORD *)v37 & 0x81000000) == 0)
                  goto LABEL_52;
              }
            }
            else
            {
LABEL_52:
              v45 = *(_QWORD *)(v37 + 8);
LABEL_53:
              if (v45 == v22 || v45 == UniqueVRegDef)
                goto LABEL_55;
              v46 = *(_DWORD *)(sub_1C49FA70C(a4, *(_QWORD *)(v45 + 24)) + 16);
              v47 = v28 - v46;
              if (v28 - v46 < 0)
                v47 = v46 - v28;
              if (v47 <= byte_1ED7ED51C << 31 >> 31)
                goto LABEL_81;
              v61 = v46;
              sub_1C6150B8C((uint64_t)v62, &v61, (uint64_t)v67);
              if (v67[16])
              {
                v48 = v65;
                if (v65 >= v66)
                {
                  v50 = v64;
                  v51 = (v65 - v64) >> 2;
                  v52 = v51 + 1;
                  if ((unint64_t)(v51 + 1) >> 62)
                    abort();
                  v53 = v66 - v64;
                  if ((v66 - v64) >> 1 > v52)
                    v52 = v53 >> 1;
                  v54 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL;
                  v55 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v54)
                    v55 = v52;
                  v59 = v55;
                  if (v55)
                  {
                    if (v55 >> 62)
                      sub_1C4764EE4();
                    v56 = (char *)operator new(4 * v55);
                  }
                  else
                  {
                    v56 = 0;
                  }
                  v57 = &v56[4 * v51];
                  *(_DWORD *)v57 = v61;
                  v49 = v57 + 4;
                  while (v48 != v50)
                  {
                    v58 = *((_DWORD *)v48 - 1);
                    v48 -= 4;
                    *((_DWORD *)v57 - 1) = v58;
                    v57 -= 4;
                  }
                  v64 = v57;
                  v65 = v49;
                  v66 = &v56[4 * v59];
                  if (v50)
                    operator delete(v50);
                }
                else
                {
                  *(_DWORD *)v65 = v61;
                  v49 = v48 + 4;
                }
                v65 = v49;
              }
              v45 = *(_QWORD *)(v37 + 8);
LABEL_55:
              while (1)
              {
                v37 = *(_QWORD *)(v37 + 24);
                if (!v37)
                  break;
                if ((*(_DWORD *)v37 & 0x81000000) == 0 && *(_QWORD *)(v37 + 8) != v45)
                {
                  v45 = *(_QWORD *)(v37 + 8);
                  goto LABEL_53;
                }
              }
            }
          }
          sub_1C6150F00((uint64_t)v62);
          v34 = v64;
          v35 = v65;
          v64 = 0;
          v65 = 0;
          v66 = 0;
          std::__sort<std::__less<int,int> &,int *>();
          if (v34 == v35)
          {
            if (v60 > byte_1ED7ED51C << 31 >> 31)
            {
              v36 = (int *)v34;
LABEL_39:
              if (v36 != (int *)v35)
                v29 = *v36;
              v44 = 1;
LABEL_43:
              if (v34)
                operator delete(v34);
              if (v44)
              {
                v27 = byte_1ED7ED51C << 31 >> 31;
                v26 = v28 - v29;
                if (v28 - v29 < 0)
                  v26 = v29 - v28;
                goto LABEL_48;
              }
LABEL_81:
              v14 = 1;
              goto LABEL_49;
            }
          }
          else
          {
            if (*((_DWORD *)v35 - 1) < v28)
              v29 = *((_DWORD *)v35 - 1);
            v38 = v28 - v29;
            if (v28 - v29 < 0)
              v38 = v29 - v28;
            if (v38 > byte_1ED7ED51C << 31 >> 31)
            {
              v39 = (v35 - v34) >> 2;
              v36 = (int *)v34;
              do
              {
                v40 = v39 >> 1;
                v41 = &v36[v39 >> 1];
                v43 = *v41;
                v42 = v41 + 1;
                v39 += ~(v39 >> 1);
                if (v43 < v28)
                  v36 = v42;
                else
                  v39 = v40;
              }
              while (v39);
              goto LABEL_39;
            }
          }
          v44 = 0;
          goto LABEL_43;
        }
      }
    }
  }
  return 1;
}

BOOL sub_1C4A1819C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  int v4;
  unint64_t v5;
  _DWORD *v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_1ED7ED538);
  if ((v2 & 1) == 0)
  {
    v9 = a2;
    v4 = __cxa_guard_acquire(&qword_1ED7ED538);
    a2 = v9;
    if (v4)
    {
      byte_1ED7ED51D = 0;
      __cxa_guard_release(&qword_1ED7ED538);
      a2 = v9;
    }
  }
  if (!byte_1ED7ED51D)
    return 1;
  v5 = *(_QWORD *)(a2 + 48);
  if (v5 < 8)
    return 1;
  if ((v5 & 7) != 0)
  {
    v6 = (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
    v7 = (*(_QWORD *)(a2 + 48) & 7) != 3 || v6 == 0;
    if (v7 || !*v6)
      return 1;
  }
  else
  {
    v5 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v5;
  }
  if ((v5 & 7) != 0)
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v8 = v5 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return (*(_WORD *)(v8 + 32) & 1) == 0;
}

uint64_t sub_1C4A1826C()
{
  return 1;
}

uint64_t sub_1C4A18274(uint64_t a1)
{
  return *(_QWORD *)(a1 + 768);
}

void sub_1C4A1827C(uint64_t a1, int a2)
{
  unint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;

  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v4;
    v5 = operator new(4 * v4, (std::align_val_t)4uLL);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = 0;
    v6 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v6)
      memset_pattern16(v5, &unk_1C6613B70, 4 * v6);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

void sub_1C4A1830C(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = operator new(4 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    sub_1C6150E04((void **)a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    memset_pattern16(v9, &unk_1C6613B70, 4 * v10);
}

void sub_1C4A183CC(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *((_DWORD *)a1 + 2);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    a1[1] = 0;
    if ((_DWORD)v2)
      memset_pattern16((void *)*a1, &unk_1C6613B70, 4 * v2);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*a1, 4);
    sub_1C4A1827C((uint64_t)a1, v5);
  }
}

uint64_t sub_1C4A18468(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  sub_1C54E9CDC(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Expand complex instructions like samples";
  *(_QWORD *)(v2 + 8) = 40;
  *(_QWORD *)(v2 + 16) = "agx3-instexpand";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1ED7ED540;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4A185D8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4A18504(uint64_t a1)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v2 = sub_1C4776848(a1, (uint64_t)&unk_1ED7ED540);
  *(_QWORD *)v2 = &off_1E7FAAC70;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 296) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED7ED548);
  if (v4 != -1)
  {
    v8[0] = sub_1C4A18468;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED7ED548, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4A185D8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4A18504(v0);
}

void sub_1C4A18600(llvm::Pass *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E7FAAC70;
  v2 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
}

void sub_1C4A1869C(llvm::Pass *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E7FAAC70;
  v2 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C4A1874C()
{
  return "AGX3InstructionExpansion";
}

void *sub_1C4A1875C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&unk_1EF8F7108);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&unk_1EF8F7108);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C4A187C4(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  char v43;
  char v44;
  int v45;
  int v46;
  char v47;
  char v48;
  char v49;
  void **v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void **v56;
  uint64_t v57;
  BOOL v59;
  _OWORD *v60;
  _OWORD *v61;
  __int128 v62;
  BOOL v64;
  uint64_t v65;
  _OWORD *v66;
  _OWORD *v67;
  __int128 v68;
  void **v69;
  uint64_t v70;
  BOOL v72;
  _OWORD *v73;
  _OWORD *v74;
  __int128 v75;
  BOOL v76;
  uint64_t v77;
  BOOL v78;
  unsigned int v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  BOOL v87;
  uint64_t (***v88)();
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char *v96;
  void **v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  BOOL v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  BOOL v107;
  unsigned int v108;
  unsigned int v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (**v114)();
  _OWORD v115[2];
  uint64_t v116;
  _OWORD v117[2];
  uint64_t v118;
  _OWORD v119[2];
  uint64_t v120;
  _OWORD v121[2];
  uint64_t v122;
  uint64_t v123[2];
  char v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  int v140;
  _OWORD v141[2];
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  int v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  unsigned int v156;
  unsigned __int8 v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  unsigned __int8 v167;
  unsigned __int8 v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t (**v176)(llvm::MachineFunction::Delegate *__hidden);
  void (**v177)();
  _BYTE *v178;
  void *v179;
  uint64_t v180;
  int v181;
  _BYTE v182[32];
  void *v183;
  uint64_t v184;
  _QWORD v185[4];
  uint64_t (**v186)();
  uint64_t (***v187)();
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  _BYTE v197[240];
  void *v198;
  uint64_t v199;
  _BYTE v200[240];
  void *v201;
  uint64_t v202;
  _BYTE v203[240];
  void *v204;
  uint64_t v205;
  _BYTE v206[572];
  int v207;
  _QWORD v208[3];
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  _QWORD *v231;
  uint64_t v232;
  _QWORD v233[10];
  _DWORD v234[14];
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  _BYTE *v241;
  uint64_t v242;
  _BYTE v243[232];
  int v244;
  _BYTE *v245;
  _BYTE *v246;
  uint64_t v247;
  int v248;
  _BYTE v249[72];
  unsigned int *v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  int v256;
  void *v257;
  uint64_t v258;
  _BYTE v259[64];
  void *v260;
  uint64_t v261;
  _QWORD v262[8];
  void *v263;
  uint64_t v264;
  _QWORD v265[8];
  void *v266;
  uint64_t v267;
  _QWORD v268[16];
  void *v269;
  uint64_t v270;
  _QWORD v271[19];

  v271[16] = *MEMORY[0x1E0C80C00];
  if ((**(_BYTE **)(a2 + 360) & 0x10) != 0)
  {
    v14 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 40);
    if (byte_1ED7ED6A8)
    {
      v4 = **(void ****)(a1 + 8);
      do
      {
        v5 = *v4;
        v4 += 2;
      }
      while (v5 != &unk_1EF8F7108);
      v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &unk_1EF8F7108);
      v7 = operator new();
      *(_OWORD *)(v7 + 32) = 0u;
      *(_QWORD *)(v7 + 64) = 0;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_QWORD *)v7 = &off_1E816EC08;
      *(_QWORD *)(v7 + 8) = a2;
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(v7 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
      if (*(_QWORD *)(v7 + 32))
        llvm::MetadataTracking::untrack(v7 + 32, *(unsigned __int8 **)(v7 + 32));
      v8 = v6 + 248;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)v7 = &unk_1E816DC08;
      v9 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v7;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v10 = **(void ****)(a1 + 8);
      do
      {
        v11 = *v10;
        v10 += 2;
      }
      while (v11 != &llvm::TargetPassConfig::ID);
      v12 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::TargetPassConfig::ID);
      *(_QWORD *)(a1 + 296) = v12;
      (*(void (**)(uint64_t (***__return_ptr)()))(*(_QWORD *)v12 + 288))(&v186);
      sub_1C54EB0C0(v8, (uint64_t *)&v186, 0);
      v13 = (uint64_t)v186;
      v186 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      *(_QWORD *)(*(_QWORD *)(a1 + 256) + 64) = v8;
    }
    else
    {
      v15 = operator new();
      *(_OWORD *)(v15 + 32) = 0u;
      *(_QWORD *)(v15 + 64) = 0;
      *(_OWORD *)(v15 + 48) = 0u;
      *(_QWORD *)v15 = &off_1E816EC08;
      *(_QWORD *)(v15 + 8) = a2;
      *(_QWORD *)(v15 + 24) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(v15 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
      if (*(_QWORD *)(v15 + 32))
        llvm::MetadataTracking::untrack(v15 + 32, *(unsigned __int8 **)(v15 + 32));
      *(_QWORD *)(v15 + 32) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      v16 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(a1 + 256) = v15;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    v17 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), *(_QWORD *)a2);
    *(_QWORD *)(a1 + 264) = v17;
    *(_QWORD *)(a1 + 272) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 176))(v17);
    *(_QWORD *)(a1 + 288) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 264) + 104))(*(_QWORD *)(a1 + 264));
    *(_QWORD *)(a1 + 280) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 264) + 184))(*(_QWORD *)(a1 + 264));
    v178 = v182;
    v179 = v182;
    v180 = 4;
    v181 = 0;
    v176 = &off_1E7FA1778;
    v177 = (void (**)())&unk_1E7FA17D0;
    v183 = v185;
    v184 = 0x400000000;
    if (byte_1ED7ED6A8)
    {
      v185[0] = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 64);
      LODWORD(v184) = 1;
    }
    *(_QWORD *)(a2 + 728) = &v176;
    *(_QWORD *)(a2 + 736) = &v177;
    v100 = a2;
    v18 = *(_QWORD *)(a2 + 328);
    v111 = a2 + 320;
    if (v18 != a2 + 320)
    {
      v19 = 0;
      while (1)
      {
        v20 = v18 + 48;
        v112 = v18;
        v21 = *(_QWORD *)(v18 + 56);
        v113 = v18 + 48;
        if (v21 != v18 + 48)
          break;
LABEL_174:
        v18 = *(_QWORD *)(v112 + 8);
        if (v18 == v111)
          goto LABEL_177;
      }
      while (1)
      {
        if (!v21 || (v22 = v21, (*(_BYTE *)v21 & 4) == 0))
        {
          v22 = v21;
          if ((*(_WORD *)(v21 + 44) & 8) != 0)
          {
            v22 = v21;
            do
              v22 = *(_QWORD *)(v22 + 8);
            while ((*(_WORD *)(v22 + 44) & 8) != 0);
          }
        }
        v23 = *(_QWORD *)(v22 + 8);
        if (**(_WORD **)(v21 + 16) == 117)
          break;
LABEL_169:
        v21 = v23;
        if (v23 == v20)
          goto LABEL_174;
      }
      v24 = *(unsigned int *)(v21 + 40);
      v25 = *(_QWORD *)(v21 + 32);
      if ((_DWORD)v24)
      {
        v26 = 0;
        v27 = *(unsigned __int8 **)(v21 + 32);
        while (1)
        {
          v28 = *v27;
          v27 += 32;
          if (v28 == 17)
            break;
          if (v24 == ++v26)
            goto LABEL_34;
        }
      }
      else
      {
LABEL_34:
        LODWORD(v26) = -1;
      }
      v29 = *(_DWORD *)(v25 + 32 * v26 + 16);
      if ((v29 - 1282) >= 0x21C && (v29 - 2824) > 0xB)
        goto LABEL_169;
      if ((_DWORD)v24)
      {
        v30 = 0;
        v31 = *(unsigned __int8 **)(v21 + 32);
        while (1)
        {
          v32 = *v31;
          v31 += 32;
          if (v32 == 17)
            break;
          if (v24 == ++v30)
            goto LABEL_40;
        }
      }
      else
      {
LABEL_40:
        LODWORD(v30) = -1;
      }
      v33 = *(_DWORD *)(v25 + 32 * v30 + 16);
      v34 = 3;
      if ((v33 - 1282) >= 0x190)
      {
        if ((v33 - 1682) >= 0x8C)
        {
          if ((v33 - 2824) >= 0xC)
          {
            v96 = "Invalid sample intrinsic";
            goto LABEL_185;
          }
        }
        else
        {
          v34 = 4;
        }
      }
      v35 = *(_QWORD *)(a1 + 256);
      *(_QWORD *)(v35 + 40) = *(_QWORD *)(v21 + 24);
      *(_QWORD *)(v35 + 48) = v21;
      v36 = *(_QWORD *)(*(_QWORD *)(v21 + 24) + 32);
      v210 = 0;
      v211 = 0;
      v212 = 0;
      v213 = 0;
      v214 = 0;
      v215 = 0;
      v216 = 0;
      v217 = 0;
      v218 = 0;
      v219 = 0;
      v220 = 0;
      v221 = 0;
      v222 = 0;
      v223 = 0;
      v224 = 0;
      v227 = 0;
      v225 = 0;
      v226 = 0;
      v228 = 0;
      v229 = 0;
      v230 = 0;
      v231 = v233;
      v232 = 0x800000000;
      v233[8] = v234;
      v233[9] = 0x600000000;
      v234[12] = 0;
      v237 = 0;
      v235 = 0;
      v236 = 0;
      v240 = 0;
      v238 = 0;
      v239 = 0;
      v241 = v243;
      v242 = 0x3200000000;
      memset(&v243[208], 0, 24);
      v244 = 0;
      v245 = v249;
      v246 = v249;
      v247 = 4;
      v248 = 0;
      memset(&v249[32], 0, 24);
      v250 = &v252;
      v251 = 0;
      v252 = 0x80000000;
      v254 = 1;
      v253 = 0;
      v256 = 1;
      v255 = 0;
      v37 = *(_QWORD *)(v21 + 24);
      v38 = *(_QWORD *)(a1 + 272);
      v191 = *(_QWORD *)(a1 + 288);
      v39 = *(_QWORD *)(a1 + 256);
      v192 = *(_QWORD *)(a1 + 248);
      v193 = v38;
      v194 = v39;
      v188 = v37;
      v190 = v36;
      v114 = &off_1E7FAAD30;
      v189 = v21;
      v187 = &v114;
      v186 = &off_1E7FAAF10;
      v195 = v197;
      v196 = 0x400000000;
      v197[160] = 0;
      v197[192] = 0;
      v197[200] = 0;
      v197[232] = 0;
      v198 = v200;
      v199 = 0x600000000;
      v201 = v203;
      v202 = 0x300000000;
      v203[120] = 0;
      v203[152] = 0;
      v203[160] = 0;
      v203[192] = 0;
      v203[200] = 0;
      v203[232] = 0;
      v204 = v206;
      v205 = 0x400000000;
      v206[160] = 0;
      v206[192] = 0;
      v206[200] = 0;
      v206[232] = 0;
      v206[240] = 0;
      v206[272] = 0;
      v206[280] = 0;
      v206[312] = 0;
      v206[320] = 0;
      v206[352] = 0;
      v206[360] = 0;
      v206[392] = 0;
      v206[400] = 0;
      v206[432] = 0;
      v206[440] = 0;
      v206[472] = 0;
      v206[480] = 0;
      v206[512] = 0;
      v206[520] = 0;
      v206[552] = 0;
      v206[560] = 0;
      v206[568] = 0;
      v207 = 0;
      v40 = *(_QWORD *)(v36 + 344);
      llvm::SampleInfo::SampleInfo((uint64_t)&v155, v33, v34);
      v154 = 0;
      ((void (*)(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X2>, uint64_t@<X3>, _QWORD *@<X4>, uint64_t@<X5>, uint64_t@<X8>))v186[6])((uint64_t)&v186, v40, v21, v161, (_QWORD *)v162, v163, (uint64_t)v141);
      if (v154 || !v153)
        goto LABEL_184;
      v140 = v149;
      v137 = v141[0];
      v138 = v141[1];
      v139 = v142;
      v134 = v143;
      v135 = v144;
      v136 = v145;
      v131 = v146;
      v132 = v147;
      v133 = v148;
      v128 = v150;
      v129 = v151;
      v130 = v152;
      v269 = v271;
      v270 = 0x400000000;
      v41 = (void *)((uint64_t (*)(uint64_t, uint64_t, unsigned int))v186[2])((uint64_t)&v186, v21, v164);
      v42 = v156 + v167;
      v43 = ((uint64_t (*)(uint64_t (***)()))(*v187)[25])(v187);
      if (BYTE2(v155))
        v44 = v43;
      else
        v44 = 0;
      v45 = ((uint64_t (*)(uint64_t (***)()))(*v187)[21])(v187);
      if (v166 == -1)
        v46 = 0;
      else
        v46 = v45;
      v47 = v46 & v44;
      if ((v173 & v165) == 0xFFFFFFFF)
        v47 = v44;
      if ((_DWORD)v42 == 2)
        v48 = ((v171 == -1) | ~(_BYTE)v46) & v47;
      else
        v48 = v47;
      if ((_DWORD)v42 != 1)
      {
        v264 = 0;
        v263 = 0;
        v265[0] = 0;
        if (!(_DWORD)v42)
        {
          v263 = v41;
          if ((v48 & 1) != 0)
          {
            v54 = 0;
            v261 = 0;
            v260 = 0;
            v262[0] = 0;
            goto LABEL_99;
          }
          goto LABEL_115;
        }
        ((void (*)(uint64_t, uint64_t, _QWORD *, unint64_t))v186[15])((uint64_t)&v186, (uint64_t)v41, &v263, v42);
        v50 = &v263;
        v51 = v42;
        while (*v50)
        {
          ++v50;
          if (!--v51)
          {
            if ((v48 & 1) != 0)
            {
              v52 = v42;
              goto LABEL_76;
            }
LABEL_107:
            v69 = &v263;
            do
            {
              v70 = (uint64_t)*v69++;
              ((void (*)(uint64_t@<X1>, uint64_t@<X8>))v186[21])(v70, (uint64_t)&v266);
              v72 = v266 == 1 && v268[0] == 0xFFFFFFFFLL;
              v154 |= v72;
              v73 = (_OWORD *)sub_1C47C0F60((uint64_t)&v269, (unint64_t)&v266, 1);
              v74 = (char *)v269 + 32 * v270;
              v75 = v73[1];
              *v74 = *v73;
              v74[1] = v75;
              LODWORD(v270) = v270 + 1;
              --v42;
            }
            while (v42);
LABEL_115:
            v65 = 0;
            goto LABEL_116;
          }
        }
        ((void (*)(uint64_t *, uint64_t, uint64_t, unsigned int))v186[10])((uint64_t *)&v186, (uint64_t)v41, (uint64_t)&v269, v42);
        goto LABEL_115;
      }
      if (v173 == -1)
      {
        if (v165 == -1)
          LOBYTE(v46) = 0;
        if ((v46 & 1) != 0)
        {
LABEL_60:
          if ((v170 & v172) == 0xFFFFFFFF)
            v49 = v48;
          else
            v49 = 0;
          v264 = 0;
          v265[0] = 0;
          v263 = v41;
          if ((v49 & 1) == 0)
            goto LABEL_107;
LABEL_75:
          v52 = 1;
LABEL_76:
          v53 = 0;
          v54 = 0;
          v261 = 0;
          v260 = 0;
          v262[0] = 0;
          while (1)
          {
            v266 = 0;
            v257 = 0;
            if (((unsigned int (*)(uint64_t, uint64_t, _QWORD *, _QWORD *))v186[16])((uint64_t)&v186, (uint64_t)*(&v263 + v53), &v266, &v257))
            {
              *(&v260 + v53) = v266;
              v55 = v257;
              if (!v54)
                goto LABEL_85;
              if (v54 != v257)
                goto LABEL_90;
            }
            else
            {
              v266 = 0;
              v257 = 0;
              if (!((unsigned int (*)(uint64_t, uint64_t, _QWORD *, _QWORD *))v186[17])((uint64_t)&v186, (uint64_t)*(&v263 + v53), &v266, &v257))goto LABEL_90;
              *(&v260 + v53) = v266;
              v55 = v257;
              if (!v54)
              {
LABEL_85:
                v54 = v55;
                goto LABEL_86;
              }
              if (v54 != v257)
              {
LABEL_90:
                if ((_DWORD)v42 != (_DWORD)v53)
                  goto LABEL_107;
LABEL_91:
                v56 = &v260;
                do
                {
                  v57 = (uint64_t)*v56++;
                  ((void (*)(uint64_t@<X1>, uint64_t@<X8>))v186[21])(v57, (uint64_t)&v266);
                  v59 = v266 == 1 && v268[0] == 0xFFFFFFFFLL;
                  v154 |= v59;
                  v60 = (_OWORD *)sub_1C47C0F60((uint64_t)&v269, (unint64_t)&v266, 1);
                  v61 = (char *)v269 + 32 * v270;
                  v62 = v60[1];
                  *v61 = *v60;
                  v61[1] = v62;
                  LODWORD(v270) = v270 + 1;
                  --v52;
                }
                while (v52);
LABEL_99:
                ((void (*)(uint64_t@<X1>, uint64_t@<X8>))v186[21])((uint64_t)v54, (uint64_t)&v266);
                v64 = v266 == 1 && v268[0] == 0xFFFFFFFFLL;
                v154 |= v64;
                v65 = 1;
                v66 = (_OWORD *)sub_1C47C0F60((uint64_t)&v269, (unint64_t)&v266, 1);
                v67 = (char *)v269 + 32 * v270;
                v68 = v66[1];
                *v67 = *v66;
                v67[1] = v68;
                LODWORD(v270) = v270 + 1;
LABEL_116:
                if (v154)
                {
                  v76 = 0;
                  goto LABEL_155;
                }
                v127 = -1;
                v266 = v268;
                v267 = 0x400000000;
                ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t, _BYTE *))v186[32])((uint64_t)&v186, (uint64_t)&v155, v40, v21, &v127, (uint64_t)&v266, &v154);
                if (v154)
                {
                  v76 = 0;
LABEL_153:
                  if (v266 != v268)
                    free(v266);
LABEL_155:
                  if (v269 != v271)
                    free(v269);
                  if (v76)
                  {
                    v91 = v21;
                    if ((*(_BYTE *)v21 & 4) == 0)
                    {
                      v91 = v21;
                      if ((*(_WORD *)(v21 + 44) & 8) != 0)
                      {
                        v91 = v21;
                        do
                          v91 = *(_QWORD *)(v91 + 8);
                        while ((*(_WORD *)(v91 + 44) & 8) != 0);
                      }
                    }
                    sub_1C487FE80(*(_QWORD *)(v21 + 24) + 40, v21, *(_QWORD *)(v91 + 8));
                    v186 = &off_1E7FAAF10;
                    if (v204 != v206)
                      free(v204);
                    if (v201 != v203)
                      free(v201);
                    if (v198 != v200)
                      free(v198);
                    if (v195 != v197)
                      free(v195);
                    sub_1C48C0B5C((uint64_t)v208);
                    v19 = 1;
                    v20 = v113;
                    goto LABEL_169;
                  }
LABEL_184:
                  v96 = "Unable to expand sample instruction";
LABEL_185:
                  llvm::report_fatal_error((llvm *)v96, (const char *)1);
                }
                v263 = v265;
                v264 = 0x200000000;
                if (v166 != -1 && ((unsigned int (*)(uint64_t (***)()))(*v187)[21])(v187))
                {
                  v77 = ((uint64_t (*)(uint64_t, uint64_t, unsigned int))v186[2])((uint64_t)&v186, v21, v166);
                  ((void (*)(uint64_t *, uint64_t, uint64_t, unsigned int))v186[10])((uint64_t *)&v186, v77, (uint64_t)&v263, 0xFFFFFFFF);
                }
                if (v154)
                {
                  v76 = 0;
LABEL_151:
                  if (v263 != v265)
                    free(v263);
                  goto LABEL_153;
                }
                v78 = (v173 & v169) != -1;
                v260 = v262;
                v261 = 0x200000000;
                ((void (*)(uint64_t, unsigned int *, uint64_t, uint64_t))v186[33])((uint64_t)&v186, &v155, v21, (uint64_t)&v260);
                v79 = v156;
                v80 = v157;
                v126 = -1;
                v81 = v168;
                if (!v168 || v174 == -1)
                {
                  if (!v168)
                  {
LABEL_132:
                    if (v168)
                      v83 = 1;
                    else
                      v83 = v81;
                    v257 = v259;
                    v258 = 0x200000000;
                    if (v159 != -1)
                    {
                      v84 = ((uint64_t (*)(uint64_t, uint64_t, unsigned int))v186[2])((uint64_t)&v186, v21, v175);
                      ((void (*)(uint64_t *, uint64_t, uint64_t, unsigned int))v186[10])((uint64_t *)&v186, v84, (uint64_t)&v257, 0xFFFFFFFF);
                    }
                    if (v154)
                    {
                      v76 = 0;
                    }
                    else
                    {
                      v108 = v83;
                      v109 = v79;
                      v110 = v78;
                      v97 = &v257;
                      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v186[34])((uint64_t)&v186, (uint64_t)&v155, v21, (uint64_t)&v269, (uint64_t)&v266);
                      v125 = -1;
                      if (v160 != -1)
                      {
                        v85 = ((uint64_t (*)(uint64_t, uint64_t, unsigned int))v186[2])((uint64_t)&v186, v21, v160);
                        ((void (*)(uint64_t, uint64_t, _DWORD *, _BYTE *))v186[18])((uint64_t)&v186, v85, &v125, 0);
                      }
                      v107 = v80 == 0;
                      v86 = ((BOOL (*)(uint64_t, uint64_t, uint64_t))v186[25])((uint64_t)&v186, (uint64_t)&v155, v21);
                      v87 = ((BOOL (*)(uint64_t, uint64_t, uint64_t))v186[26])((uint64_t)&v186, (uint64_t)&v155, v21);
                      v88 = v187;
                      v89 = v127;
                      v104 = v159;
                      v105 = v158;
                      v106 = v126;
                      v102 = v169 != -1;
                      v103 = BYTE2(v155);
                      v101 = BYTE1(v155);
                      v90 = ((uint64_t (*)(uint64_t (***)(), _QWORD, unsigned int *, uint64_t))(*v187)[13])(v187, v127, &v155, v65);
                      HIDWORD(v99) = v125;
                      BYTE1(v99) = v87;
                      LOBYTE(v99) = v86;
                      HIDWORD(v98) = v270;
                      LOBYTE(v98) = v90;
                      BYTE3(v97) = v101;
                      BYTE2(v97) = v107;
                      BYTE1(v97) = v102;
                      LOBYTE(v97) = v110;
                      ((void (*)(uint64_t (***)(), uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, void **, int *, uint64_t, uint64_t))(*v88)[14])(v88, v89, v109, v105, v104, v103, v108, v106, v97, &v140, v98, v99);
                      v121[0] = v137;
                      v121[1] = v138;
                      v122 = v139;
                      v119[0] = v134;
                      v119[1] = v135;
                      v120 = v136;
                      v117[0] = v131;
                      v117[1] = v132;
                      v118 = v133;
                      v115[0] = v128;
                      v115[1] = v129;
                      v116 = v130;
                      ((void (*)(uint64_t@<X0>, unsigned int *@<X1>, uint64_t@<X2>, unsigned int *@<X4>, uint64_t@<X5>, unsigned int *@<X6>, llvm::MachineOperand *@<X7>, _BYTE *@<X8>, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, char, char, int, unsigned int))v186[11])((uint64_t)&v186, &v155, v21, (unsigned int *)v121, (uint64_t)v119, (unsigned int *)v117, (llvm::MachineOperand *)v115, v123, (uint64_t)v269, v270, (uint64_t)v266, v267, (uint64_t)v260, v261, (__int128 *)v257, v258, v65, v86, v127,
                        v126);
                      v76 = v124 != 0;
                      if (v124)
                      {
                        ((void (*)(uint64_t (***)(), unsigned int *, uint64_t, uint64_t *))v186[13])(&v186, &v155, v21, v123);
                        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))v186[14])((uint64_t)&v186, (uint64_t)&v155, v21, v123[0], (uint64_t *)v123[1], v126, v125);
                      }
                    }
                    if (v257 != v259)
                      free(v257);
                    if (v260 != v262)
                      free(v260);
                    goto LABEL_151;
                  }
                }
                else
                {
                  v82 = ((uint64_t (*)(uint64_t, uint64_t, unsigned int))v186[2])((uint64_t)&v186, v21, v174);
                  ((void (*)(uint64_t, uint64_t, _DWORD *, _BYTE *))v186[18])((uint64_t)&v186, v82, &v126, 0);
                  if (v126 < 4)
                  {
LABEL_131:
                    v81 = -1;
                    goto LABEL_132;
                  }
                }
                v126 = 0;
                goto LABEL_131;
              }
            }
LABEL_86:
            if (v52 == ++v53)
              goto LABEL_91;
          }
        }
      }
      else if (v46)
      {
        goto LABEL_60;
      }
      v264 = 0;
      v265[0] = 0;
      v263 = v41;
      if ((v48 & 1) == 0)
        goto LABEL_107;
      goto LABEL_75;
    }
    v19 = 0;
LABEL_177:
    *(_QWORD *)(v100 + 728) = 0;
    *(_QWORD *)(v100 + 736) = 0;
    LOWORD(v187) = 1;
    v188 = 0;
    LOWORD(v189) = 1;
    BYTE2(v189) = 0;
    v186 = &off_1E7FAB090;
    v92 = *(_QWORD *)(a1 + 296);
    v208[0] = &v186;
    v208[1] = 0;
    v208[2] = v92;
    v209 = 0;
    v93 = sub_1C54F59B4();
    v94 = v209;
    v209 = 0;
    if (v94)
      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
    v176 = &off_1E7FA1778;
    v177 = (void (**)())&unk_1E7FA17D0;
    if (v183 != v185)
      free(v183);
    v14 = v19 | v93;
    v177 = off_1E7FA1810;
    if (v179 != v178)
      free(v179);
  }
  return v14 & 1;
}

void sub_1C4A19A60()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4A19A74()
{
  return 1;
}

uint64_t sub_1C4A19A7C()
{
  return 0;
}

uint64_t sub_1C4A19A84()
{
  return 1;
}

uint64_t sub_1C4A19A8C()
{
  return 24;
}

uint64_t sub_1C4A19A94()
{
  return 8;
}

uint64_t sub_1C4A19A9C(uint64_t a1, unsigned int a2)
{
  return a2 >> 1;
}

uint64_t sub_1C4A19AA4()
{
  return 1;
}

uint64_t sub_1C4A19AAC()
{
  return 0;
}

uint64_t sub_1C4A19AB4(uint64_t a1, _DWORD *a2)
{
  *a2 = 1;
  return 1;
}

uint64_t sub_1C4A19AC4()
{
  return 1;
}

uint64_t sub_1C4A19ACC()
{
  return 0;
}

uint64_t sub_1C4A19AD4()
{
  return 1;
}

uint64_t sub_1C4A19ADC()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C4A19AE4()
{
  return 0;
}

uint64_t sub_1C4A19AEC()
{
  return 0;
}

uint64_t sub_1C4A19AF4(uint64_t a1, unsigned int a2)
{
  return a2 | 0x200000000;
}

uint64_t sub_1C4A19B08(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1C4A19B1C(uint64_t a1, unsigned int a2)
{
  return a2 | 0x200000000;
}

uint64_t sub_1C4A19B30()
{
  return 391;
}

uint64_t sub_1C4A19B38()
{
  return 0;
}

uint64_t sub_1C4A19B40()
{
  return 0;
}

uint64_t sub_1C4A19B48()
{
  return 1;
}

uint64_t sub_1C4A19B50()
{
  return 0;
}

uint64_t sub_1C4A19B58()
{
  return 0;
}

uint64_t sub_1C4A19B60()
{
  return 3;
}

uint64_t sub_1C4A19B68()
{
  return 0;
}

uint64_t sub_1C4A19B70(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_BYTE *)(a2 + 61))
    v2 = 1;
  else
    v2 = *(_DWORD *)(a2 + 4) == 3;
  if (v2)
    return 6;
  else
    return 4;
}

uint64_t sub_1C4A19B90()
{
  return 0;
}

uint64_t sub_1C4A19B98()
{
  return 1;
}

uint64_t sub_1C4A19BA0(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
    return *(unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2, 1)+ 24);
  else
    return dword_1C6616264[(int)a2 - 2];
}

__int16 ***sub_1C4A19BE0(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  __int16 ****v4;
  __int16 ****v5;

  v3 = a2 - 1;
  v4 = &(&off_1E7FAB0F0)[v3];
  v5 = (__int16 ****)&(&off_1E7FAB0A8)[(int)v3];
  if (!a3)
    v5 = v4;
  return *v5;
}

uint64_t sub_1C4A19C10()
{
  return 0x1900000001;
}

uint64_t sub_1C4A19C1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  _QWORD *v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  int i;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v7 = *(_QWORD *)(a3 + 48);
  if (!v7)
  {
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 8) + 216))(*(_QWORD *)(a3 + 8), a3 + 128, a3);
    *(_QWORD *)(a3 + 48) = v7;
  }
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 112);
  if (v8)
  {
    if (!*(_DWORD *)(v8 + 8))
      goto LABEL_23;
    v8 = *(_QWORD *)(v8 + 40);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 40);
      if (v9)
      {
        v10 = *(_QWORD *)(v8 + 24);
        v11 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        v12 = &unk_1ED7EA000;
        if ((v11 & 1) == 0)
        {
          v26 = v10;
          v27 = v7;
          v25 = v9;
          v22 = __cxa_guard_acquire(&qword_1ED7EAC88);
          v12 = &unk_1ED7EA000;
          v9 = v25;
          v23 = v22;
          v10 = v26;
          v7 = v27;
          if (v23)
          {
            v24 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v24 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v24;
            __cxa_guard_release(&qword_1ED7EAC88);
            v12 = (_QWORD *)&unk_1ED7EA000;
            v9 = v25;
            v10 = v26;
            v7 = v27;
          }
        }
        v13 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v12[400] ^ 0xD476A8E9D5DCE4CELL)) ^ ((0x9DDFEA08EB382D69
                                                                            * (v12[400] ^ 0xD476A8E9D5DCE4CELL)) >> 47) ^ 0xBA05CD85A5B185BDLL);
        v14 = (-348639895 * ((v13 >> 47) ^ v13)) ^ 0x616F6E73;
        v15 = v9 - 1;
        for (i = 1; ; ++i)
        {
          v17 = v14 & v15;
          v18 = v10 + 24 * v17;
          v19 = *(_QWORD **)v18;
          if (*(_QWORD *)v18 == -1)
          {
            if ("samplesnoalias" == (char *)-1)
              goto LABEL_22;
          }
          else if (v19 == (_QWORD *)-2)
          {
            if ("samplesnoalias" == (char *)-2)
              goto LABEL_22;
          }
          else if (*(_QWORD *)(v18 + 8) == 14
                 && *v19 == 0x6E73656C706D6173
                 && *(_QWORD *)((char *)v19 + 6) == 0x7361696C616F6E73)
          {
LABEL_22:
            LOBYTE(v8) = 1;
            return sub_1C4A1A064(v7, a2, a3, v8 & (a4 ^ 1u));
          }
          if (v19 == (_QWORD *)-1)
            break;
          v14 = i + v17;
        }
      }
LABEL_23:
      LOBYTE(v8) = 0;
    }
  }
  return sub_1C4A1A064(v7, a2, a3, v8 & (a4 ^ 1u));
}

uint64_t sub_1C4A19E3C(uint64_t a1, int a2)
{
  return dword_1C6616290[a2];
}

void *sub_1C4A19E50(uint64_t a1, unsigned int a2, int *a3, _QWORD *a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  void *result;

  if (a2)
    v8 = 5626;
  else
    v8 = 518;
  *a3 = v8;
  v9 = *(unsigned int *)(a5 + 8);
  if (v9 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v9 + 1, 16);
    LODWORD(v9) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v9) = xmmword_1C640F7B0;
  v10 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v10;
  if (a2)
  {
    v11 = a2 | 0x100000000;
    if (v10 >= *(_DWORD *)(a5 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v10 + 1, 16);
      LODWORD(v10) = *(_DWORD *)(a5 + 8);
    }
    v12 = (uint64_t *)(*(_QWORD *)a5 + 16 * v10);
    *v12 = v11;
    v12[1] = -1;
    ++*(_DWORD *)(a5 + 8);
  }
  *a4 = &off_1E7FB1B88;
  return result;
}

void *sub_1C4A19F30(uint64_t a1, unsigned int a2, int *a3, _QWORD *a4, uint64_t a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  void *result;

  if (a2)
    v8 = 5625;
  else
    v8 = 517;
  *a3 = v8;
  v9 = *(unsigned int *)(a5 + 8);
  if (v9 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v9 + 1, 16);
    LODWORD(v9) = *(_DWORD *)(a5 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a5 + 16 * v9) = xmmword_1C640F7B0;
  v10 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v10;
  if (a2)
  {
    v11 = a2 | 0x100000000;
    if (v10 >= *(_DWORD *)(a5 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v10 + 1, 16);
      LODWORD(v10) = *(_DWORD *)(a5 + 8);
    }
    v12 = (uint64_t *)(*(_QWORD *)a5 + 16 * v10);
    *v12 = v11;
    v12[1] = -1;
    ++*(_DWORD *)(a5 + 8);
  }
  *a4 = &off_1E7FB1568;
  return result;
}

uint64_t sub_1C4A1A010()
{
  return 0;
}

uint64_t sub_1C4A1A018()
{
  return 0;
}

uint64_t sub_1C4A1A020()
{
  return 1;
}

uint64_t sub_1C4A1A028()
{
  return 0;
}

uint64_t sub_1C4A1A030()
{
  return 1;
}

uint64_t sub_1C4A1A038()
{
  return 0;
}

uint64_t sub_1C4A1A040()
{
  return 313;
}

BOOL sub_1C4A1A048(uint64_t a1, int a2)
{
  return a2 == 313;
}

uint64_t sub_1C4A1A054()
{
  return 0;
}

uint64_t sub_1C4A1A05C()
{
  return 0;
}

uint64_t sub_1C4A1A064(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v16 = a2;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 16) + 104))(*(_QWORD *)(a3 + 16));
  v17 = a2;
  v18 = 0;
  if (!sub_1C4A1A17C((uint64_t *)(a1 + 160), &v17, &v18)
    || v18 == *(_QWORD *)(a1 + 160) + 16 * *(unsigned int *)(a1 + 176))
  {
    v9 = sub_1C4A1A218((uint64_t *)(a1 + 160), &v16);
    v10 = operator new();
    v11 = v16;
    *(_DWORD *)(v10 + 8) = 7;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 632))(v7, 7);
    *(_QWORD *)(v10 + 16) = v11;
    v14 = v9[1];
    v8 = v9 + 1;
    v13 = v14;
    *(_DWORD *)(v10 + 12) = v12;
    *(_QWORD *)v10 = &off_1E7FAAEC8;
    *(_BYTE *)(v10 + 24) = a4;
    *v8 = v10;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  }
  else
  {
    v8 = (uint64_t *)(v18 + 8);
  }
  return *v8;
}

uint64_t sub_1C4A1A17C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 16 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 16 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_3;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

_QWORD *sub_1C4A1A218(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4A1A17C(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4A1A274((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C4A1A274(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1C4A1A324(a1, v7);
    v9 = 0;
    sub_1C4A1A17C((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4A1A324(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6151028(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C4A1A3DC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4A1A3F0()
{
  return 1;
}

uint64_t sub_1C4A1A3F8()
{
  return 1;
}

uint64_t sub_1C4A1A400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  _DWORD *v13;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (***v24)();
  void (**v25)(uint64_t (***)());
  uint64_t (***v26)();
  void (**v27)(uint64_t (***)());
  BOOL (*v28)(_BOOL8);
  uint64_t v29;
  unsigned __int8 v30;
  unsigned int v31;
  char v32;
  char v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t (***v41)();
  void (**v42)(uint64_t (***)());
  uint64_t (**v43)(uint64_t);
  int v44;
  unsigned int v45;
  BOOL (*v46)(_BOOL8);
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t (***v50)();
  unsigned int v51;
  size_t v52;
  void *v53;
  size_t v54;
  _QWORD *v55;
  uint64_t (***v56)();
  int v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  unsigned int v62;
  void *__src;
  unsigned int v64;
  char v65;
  uint64_t (**v66)();
  BOOL (*v67)(_BOOL8);
  uint64_t v68;
  uint64_t (***v69)();
  char v70;
  uint64_t (**v71)();
  _QWORD *(*v72)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t (***v73)();
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3, a4);
  v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, a3, a5);
  LODWORD(a5) = *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3, a6) + 4);
  result = sub_1C554C050((int)a5, *(_QWORD *)(a1 + 48));
  if (!v16 || (result & 0x8000000000000000) == 0)
  {
    v17 = sub_1C554C050(*(_DWORD *)(v12 + 4), *(_QWORD *)(a1 + 48));
    if (v18)
      v19 = v17;
    else
      v19 = 0;
    v20 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), v19);
    v22 = v21;
    v23 = *(_QWORD *)(a1 + 48);
    v66 = &off_1E816EFF0;
    v67 = sub_1C554C7E0;
    v69 = &v66;
    v71 = &off_1E816F038;
    v72 = sub_1C554C7F8;
    v73 = &v71;
    sub_1C554C3AC((int)a5, v23, (uint64_t)&v66, (uint64_t)&v71, 0, 0, &__src);
    v24 = v73;
    if (v73 == &v71)
    {
      v25 = (void (**)(uint64_t (***)()))(v71 + 4);
      v24 = &v71;
    }
    else
    {
      if (!v73)
      {
LABEL_9:
        v26 = v69;
        if (v69 == &v66)
        {
          v27 = (void (**)(uint64_t (***)()))(v66 + 4);
          v26 = &v66;
        }
        else
        {
          if (!v69)
          {
LABEL_12:
            if (v65)
            {
              if (v64 >= 0x41)
              {
                v59 = v20;
                v61 = v22;
                v52 = (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8;
                a5 = (_QWORD *)operator new[]();
                v53 = __src;
                memcpy(a5, __src, v52);
                if (v53)
                  MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
                v29 = *a5;
                MEMORY[0x1CAA32F9C](a5, 0x1000C8000313F17);
                v62 = 0;
                v28 = 0;
                v30 = 1;
                v20 = v59;
                v22 = v61;
              }
              else
              {
                v62 = 0;
                v28 = 0;
                v29 = (uint64_t)((_QWORD)__src << -(char)v64) >> -(char)v64;
                v30 = 1;
              }
            }
            else
            {
              sub_1C4A1F250((uint64_t)&v66, *(_QWORD *)(a1 + 48), a5);
              if (v70)
              {
                v30 = v66;
                LODWORD(a5) = HIDWORD(v66);
                v31 = v66 & 0xFFFFFF00;
                v28 = v67;
                v29 = v68;
                v56 = v69;
              }
              else
              {
                v28 = 0;
                v29 = 0;
                v56 = 0;
                v30 = 0;
                v31 = 0;
              }
              v62 = v31;
            }
            result = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))a2)(a2, 3, 0, 0, 1);
            if (!v32 && !byte_1ED7ED5E8)
              goto LABEL_21;
            v58 = v20;
            v60 = v22;
            v34 = v22 >> 24;
            v35 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a2)(a2, 3, 0, 1, 1);
            v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 336))(a2);
            v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 24))(v36, 4);
            v57 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), (v37 * v35));
            v39 = v38;
            LODWORD(v13) = v13[1];
            v40 = *(_QWORD *)(a1 + 48);
            v66 = &off_1E816EFF0;
            v67 = sub_1C554C7E0;
            v69 = &v66;
            v71 = &off_1E816F038;
            v72 = sub_1C554C7F8;
            v73 = &v71;
            sub_1C554C3AC((int)v13, v40, (uint64_t)&v66, (uint64_t)&v71, 0, 0, &__src);
            v41 = v73;
            if (v73 == &v71)
            {
              v42 = (void (**)(uint64_t (***)()))(v71 + 4);
              v41 = &v71;
            }
            else
            {
              if (!v73)
              {
LABEL_25:
                result = (uint64_t)v69;
                if (v69 == &v66)
                {
                  v43 = (uint64_t (**)(uint64_t))(v66 + 4);
                  result = (uint64_t)&v66;
                }
                else
                {
                  if (!v69)
                  {
LABEL_28:
                    v44 = v34 & 0xFFF00;
                    if (v65)
                    {
                      if (v64 >= 0x41)
                      {
                        v54 = (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8;
                        v55 = (_QWORD *)operator new[]();
                        v13 = __src;
                        memcpy(v55, __src, v54);
                        if (v13)
                          MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
                        v48 = *v55;
                        result = MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
                        v45 = 0;
                        v46 = 0;
                        v49 = 1;
                        v51 = v62;
                        v50 = v56;
                        goto LABEL_35;
                      }
                      v45 = 0;
                      v46 = 0;
                      v47 = (_QWORD)__src << -(char)v64;
                      v48 = v47 >> -(char)v64;
                      v49 = 1;
                    }
                    else
                    {
                      result = sub_1C4A1F250((uint64_t)&v66, *(_QWORD *)(a1 + 48), v13);
                      if (v70)
                      {
                        v49 = v66;
                        LODWORD(v13) = HIDWORD(v66);
                        v45 = v66 & 0xFFFFFF00;
                        v46 = v67;
                        v48 = v68;
                        v47 = (uint64_t)v69;
                      }
                      else
                      {
                        v46 = 0;
                        v48 = 0;
                        v47 = 0;
                        v49 = 0;
                        v45 = 0;
                      }
                    }
                    v50 = v56;
                    v51 = v62;
LABEL_35:
                    *(_DWORD *)a7 = v44 | 7;
                    *(_DWORD *)(a7 + 4) = v58;
                    *(_QWORD *)(a7 + 8) = 0;
                    *(_DWORD *)(a7 + 16) = v60;
                    *(_DWORD *)(a7 + 24) = 0;
                    v33 = 1;
                    *(_BYTE *)(a7 + 32) = 1;
                    *(_DWORD *)(a7 + 40) = v30 | v51;
                    *(_DWORD *)(a7 + 44) = (_DWORD)a5;
                    *(_QWORD *)(a7 + 48) = v28;
                    *(_QWORD *)(a7 + 56) = v29;
                    *(_QWORD *)(a7 + 64) = v50;
                    *(_BYTE *)(a7 + 72) = 1;
                    *(_DWORD *)(a7 + 80) = (v39 >> 24) & 0xFFF00 | 7;
                    *(_DWORD *)(a7 + 84) = v57;
                    *(_QWORD *)(a7 + 88) = 0;
                    *(_DWORD *)(a7 + 96) = v39;
                    *(_DWORD *)(a7 + 104) = 0;
                    *(_BYTE *)(a7 + 112) = 1;
                    *(_DWORD *)(a7 + 120) = 0;
                    *(_DWORD *)(a7 + 128) = v49 | v45;
                    *(_DWORD *)(a7 + 132) = (_DWORD)v13;
                    *(_QWORD *)(a7 + 136) = v46;
                    *(_QWORD *)(a7 + 144) = v48;
                    *(_QWORD *)(a7 + 152) = v47;
                    *(_BYTE *)(a7 + 160) = 1;
                    goto LABEL_36;
                  }
                  v43 = (uint64_t (**)(uint64_t))(*v69 + 5);
                }
                result = (*v43)(result);
                goto LABEL_28;
              }
              v42 = (void (**)(uint64_t (***)()))(*v73 + 5);
            }
            (*v42)(v41);
            goto LABEL_25;
          }
          v27 = (void (**)(uint64_t (***)()))(*v69 + 5);
        }
        (*v27)(v26);
        goto LABEL_12;
      }
      v25 = (void (**)(uint64_t (***)()))(*v73 + 5);
    }
    (*v25)(v24);
    goto LABEL_9;
  }
LABEL_21:
  v33 = 0;
  *(_BYTE *)a7 = 0;
LABEL_36:
  *(_BYTE *)(a7 + 168) = v33;
  return result;
}

void sub_1C4A1A9DC(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X4>, uint64_t a5@<X5>, unsigned int *a6@<X6>, llvm::MachineOperand *a7@<X7>, _BYTE *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 *a15, uint64_t a16, char a17, char a18, int a19, unsigned int a20)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  void **v42;
  void (**v43)(void **);
  unsigned int v44;
  unsigned int *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  __int128 *v49;
  BOOL v50;
  unsigned int v51;
  llvm::MachineBasicBlock *v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  llvm::MachineBasicBlock *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  int *v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int *v66;
  int v67;
  int v68;
  __int128 *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 *v89;
  _BOOL4 v90;
  _BOOL4 v91;
  int v92;
  unsigned __int8 v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  llvm::MachineBasicBlock *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  llvm::MachineBasicBlock *v106;
  BOOL v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  llvm::MachineBasicBlock *v116;
  int v117;
  uint64_t v118;
  int v119;
  unint64_t v120;
  int v121;
  int v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  llvm::MachineBasicBlock *v128;
  int v129;
  int v130;
  uint64_t v131;
  _BOOL4 v132;
  int v133;
  int v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  BOOL v140;
  uint64_t v141;
  uint64_t v142;
  _BOOL4 v143;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  unsigned __int8 v152;
  uint64_t v153;
  unsigned int v154;
  BOOL v155;
  unsigned int v156;
  char v157;
  int v158;
  int v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  unsigned __int8 *v163;
  int v164;
  unsigned int v165;
  unint64_t v166;
  unsigned int v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  BOOL v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  unint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v179;
  unsigned __int8 v180;
  unint64_t v181;
  int v182;
  unint64_t v183;
  unint64_t v184;
  int v185;
  char v186;
  int v187;
  _BOOL4 v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  _OWORD *v200;
  _OWORD *v201;
  __int128 v202;
  __int128 v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  int v209;
  __int128 v210;
  unint64_t v211;
  char v212;
  int v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t FirstInstrTerminator;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  llvm::MachineFunction *v220;
  unint64_t *v221;
  unint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void **v230;
  int v231;
  __int128 v232;
  void **v233;
  int v234;
  __int128 v235;
  llvm::MachineFunction *v236;
  int v237;
  llvm::MachineInstr *v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  int v242;
  uint64_t v243;
  int8x8_t v244;
  int32x2_t v245;
  unsigned int v246;
  int8x8_t v247;
  int8x8_t v248;
  int v250;
  BOOL v251;
  uint8x8_t v252;
  int v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  int v263;
  unsigned int v264;
  char *v265;
  uint64_t i;
  uint64_t j;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned int v279;
  uint64_t *v280;
  char v281;
  uint64_t v282;
  char *v283;
  int v284;
  uint64_t *v285;
  uint64_t v286;
  unsigned int v287;
  int v288;
  int v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  llvm::MachineFunction *v294;
  llvm::MachineInstr *v295;
  llvm::MachineInstr *v296;
  int v297;
  _DWORD *v298;
  int v299;
  int v300;
  uint64_t v301;
  llvm::MachineInstr *v302;
  llvm::MachineFunction *v303;
  llvm::MachineInstr *v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  llvm::MachineFunction *v318;
  llvm::MachineInstr *v319;
  llvm::MachineInstr *v320;
  int v321;
  int v322;
  llvm::MachineFunction *v323;
  llvm::MachineInstr *v324;
  int v325;
  _QWORD *v326;
  uint64_t v327;
  llvm::MachineFunction *v328;
  unint64_t *v329;
  unint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  int GenericVirtualRegister;
  unint64_t v342;
  __n128 v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  __n128 v351;
  uint64_t v352;
  char *v353;
  uint64_t v354;
  char *v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  _OWORD *v359;
  _OWORD *v360;
  __int128 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v365;
  __int128 v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  __int128 v371;
  __int128 v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  __int128 *v393;
  void (**v394)(__int128 *);
  _OWORD *v395;
  void (**v396)(_OWORD *);
  int v397;
  uint64_t v398;
  __int128 v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  __int128 v403;
  uint64_t *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _BOOL4 v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unsigned int *v412;
  uint64_t v413;
  unsigned int v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  __int128 *v422;
  void (**v423)(__int128 *);
  _OWORD *v424;
  void (**v425)(_OWORD *);
  int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  __int128 *v430;
  void (**v431)(__int128 *);
  _OWORD *v432;
  void (**v433)(_OWORD *);
  int v434;
  uint64_t *v435;
  uint64_t v436;
  char v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  _BOOL4 v443;
  uint64_t v444;
  uint64_t *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _BOOL4 v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  size_t v454;
  void *v455;
  int v456;
  llvm::MachineBasicBlock *v457;
  __int128 *v458;
  int v459;
  size_t v460;
  void *v461;
  size_t v462;
  uint64_t *v463;
  void *v464;
  uint64_t v465;
  unsigned int v466;
  unint64_t v467;
  int v468;
  unsigned int v469;
  uint64_t v470;
  uint64_t *v471;
  unint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  __int128 *v476;
  __int128 *v477;
  uint64_t v478;
  llvm::MachineBasicBlock *v479;
  llvm::MachineBasicBlock *v480;
  llvm::MachineBasicBlock *v481;
  llvm::MachineBasicBlock *v482;
  llvm::MachineBasicBlock *v483;
  llvm::MachineBasicBlock *v484;
  uint64_t v485;
  unsigned int *v486;
  _BYTE *v487;
  uint64_t v488;
  uint64_t v489;
  unsigned int *v490;
  llvm::MachineOperand *v491;
  unsigned int *v492;
  uint64_t v494;
  __int128 v495;
  __int128 v496;
  char v497;
  void *__src[2];
  __int128 v499;
  unsigned __int8 v500;
  _BYTE v501[4];
  int v502;
  _QWORD v503[2];
  unint64_t v504;
  char v505;
  unsigned int v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  void *v510[2];
  __int128 v511;
  char v512;
  _OWORD v513[2];
  unsigned int *v514;
  char *v515;
  uint64_t v516;
  __int128 *v517;
  __int128 v518;
  __int128 v519;
  char v520;
  void **v521;
  int v522;
  uint64_t v523;

  v523 = *MEMORY[0x1E0C80C00];
  v27 = a2[6];
  if ((_DWORD)v27 == -1)
    v485 = 0xFFFFFFFFLL;
  else
    v485 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a3 + 32) + 32 * v27 + 4), *(_QWORD *)(a1 + 48));
  v489 = *(_QWORD *)(a1 + 1416);
  if (a2[14] == -1)
  {
    v31 = 0;
  }
  else
  {
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
    v29 = v28;
    v30 = *(_QWORD *)(a1 + 48);
    if (a2[23] == -1)
      sub_1C4AD57F8(v28, v30, 0, 0, (uint64_t)v510);
    else
      sub_1C4AD61BC(v28, v30, (uint64_t)v510);
    if (v512)
    {
      v32 = *(unsigned __int8 *)(a1 + 792);
      v33 = v511;
      *(_OWORD *)(a1 + 760) = *(_OWORD *)v510;
      *(_OWORD *)(a1 + 776) = v33;
      if (!v32)
        *(_BYTE *)(a1 + 792) = 1;
      v34 = *(unsigned __int8 *)(a1 + 1408);
      v35 = v511;
      *(_OWORD *)(a1 + 1376) = *(_OWORD *)v510;
      *(_OWORD *)(a1 + 1392) = v35;
      v31 = 1;
      if (!v34)
        *(_BYTE *)(a1 + 1408) = 1;
    }
    else
    {
      (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(v513, a1, v29);
      v36 = *(unsigned __int8 *)(a1 + 792);
      v37 = v513[1];
      *(_OWORD *)(a1 + 760) = v513[0];
      *(_OWORD *)(a1 + 776) = v37;
      if (!v36)
        *(_BYTE *)(a1 + 792) = 1;
      v31 = 2;
    }
  }
  v490 = a4;
  v491 = a7;
  v492 = a2;
  if (a2[23] == -1)
    v467 = ((unint64_t)sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a3 + 32) + 32 * a2[7] + 4), *(_QWORD *)(a1 + 48)) >> 2) & 1;
  else
    LODWORD(v467) = 0;
  v38 = *(uint64_t **)(*(_QWORD *)(a3 + 24) + 32);
  v39 = v38[1];
  v510[0] = &off_1E81316D0;
  v510[1] = (void *)(v39 + 1328);
  v40 = v39 + 1328;
  *((_QWORD *)&v511 + 1) = v510;
  v41 = sub_1C4C0B384(v510);
  v42 = (void **)*((_QWORD *)&v511 + 1);
  if (*((void ***)&v511 + 1) == v510)
  {
    v43 = (void (**)(void **))((char *)v510[0] + 32);
    v42 = v510;
LABEL_22:
    (*v43)(v42);
    goto LABEL_23;
  }
  if (*((_QWORD *)&v511 + 1))
  {
    v43 = (void (**)(void **))(**((_QWORD **)&v511 + 1) + 40);
    goto LABEL_22;
  }
LABEL_23:
  v486 = a6;
  v506 = v41;
  v44 = v492[1];
  v494 = a3;
  v487 = a8;
  if (v44 != 1)
  {
    if (v44 == 2)
    {
      v45 = v492;
      if (v492[12] != -1)
      {
        v46 = 4;
        goto LABEL_33;
      }
      v47 = v492[13] == -1;
      v48 = 1;
    }
    else
    {
      v45 = v492;
      v47 = *((_BYTE *)v492 + 60) == 0;
      v48 = 3;
    }
    if (v47)
      v46 = v48;
    else
      v46 = v48 + 1;
    goto LABEL_33;
  }
  v46 = 0;
  v45 = v492;
LABEL_33:
  v49 = (__int128 *)a9;
  v50 = (*(_WORD *)(**(_QWORD **)(*(_QWORD *)(a3 + 24) + 32) + 18) & 0x3FF0) == 0x650 && v45[23] == -1;
  v51 = v31;
  if (!v50)
  {
    v52 = 0;
    v53 = v489;
    v54 = v38;
    v55 = v39;
    v56 = (unsigned __int8 *)v45;
    goto LABEL_163;
  }
  if (v45[18] == -1 || v46 != 1)
  {
    v53 = v489;
    v52 = 0;
    v54 = v38;
    v55 = v39;
    v56 = (unsigned __int8 *)v492;
    goto LABEL_163;
  }
  v510[0] = &v511;
  v510[1] = (void *)0x600000000;
  v57 = (llvm::MachineBasicBlock *)&v513[1];
  *(_QWORD *)&v513[0] = &v513[1];
  *((_QWORD *)&v513[0] + 1) = 0x300000000;
  v58 = *(unsigned int *)(a1 + 336);
  if ((_DWORD)v58)
  {
    v59 = 0;
    v60 = 40 * v58;
    v61 = (int *)(*(_QWORD *)(a1 + 328) + 4);
    do
    {
      v63 = *v61;
      v61 += 10;
      v62 = v63;
      if (v59 >= HIDWORD(v510[1]))
      {
        v479 = v57;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v510, (uint64_t)&v511, v59 + 1, 4);
        v57 = v479;
        v59 = v510[1];
      }
      *((_DWORD *)v510[0] + v59) = v62;
      v59 = ++LODWORD(v510[1]);
      v60 -= 40;
    }
    while (v60);
    v64 = DWORD2(v513[0]);
  }
  else
  {
    v64 = 0;
  }
  if (a10)
  {
    v65 = 32 * a10;
    v66 = (int *)(a9 + 4);
    do
    {
      v68 = *v66;
      v66 += 8;
      v67 = v68;
      if (v64 >= HIDWORD(v513[0]))
      {
        v480 = v57;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v513, (uint64_t)v57, v64 + 1, 4);
        v57 = v480;
        v64 = DWORD2(v513[0]);
      }
      *(_DWORD *)(*(_QWORD *)&v513[0] + 4 * v64) = v67;
      v64 = ++DWORD2(v513[0]);
      v65 -= 32;
    }
    while (v65);
  }
  v69 = &v519;
  *(_QWORD *)&v518 = &v519;
  *((_QWORD *)&v518 + 1) = 0x400000000;
  if (v64)
  {
    LODWORD(v70) = 0;
    v71 = 0;
    v51 = v31;
    v72 = (v31 << 32) | 1;
    v54 = v38;
    v55 = v39;
    v56 = (unsigned __int8 *)v492;
    do
    {
      v73 = *((unsigned int *)v510[0] + (2 * v71));
      v74 = *(_QWORD *)(a1 + 48);
      if ((v73 & 0x80000000) != 0)
        v75 = (uint64_t *)(*(_QWORD *)(v74 + 24) + 16 * (v73 & 0x7FFFFFFF) + 8);
      else
        v75 = (uint64_t *)(*(_QWORD *)(v74 + 272) + 8 * v73);
      v76 = *v75;
      if ((*(_BYTE *)(v76 + 3) & 1) == 0)
        v76 = *(_QWORD *)(v76 + 24);
      v77 = *(_QWORD *)(v76 + 8);
      v78 = *(unsigned int *)(v77 + 40);
      if (!(_DWORD)v78)
        break;
      v79 = *((unsigned int *)v510[0] + ((2 * (_DWORD)v71) | 1u));
      v80 = *(_QWORD *)(v77 + 32);
      while (*(_BYTE *)v80 != 17)
      {
        v80 += 32;
        if (!--v78)
          goto LABEL_84;
      }
      if (*(_DWORD *)(v80 + 16) != 2449)
        break;
      v81 = *(_DWORD *)(v80 + 36);
      if (!v81)
        break;
      if (v70 >= HIDWORD(v518))
      {
        v476 = v69;
        v481 = v57;
        v472 = v72;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v518, (uint64_t)v69, v70 + 1, 4);
        v72 = v472;
        v69 = v476;
        v57 = v481;
        LODWORD(v70) = DWORD2(v518);
      }
      *(_DWORD *)(v518 + 4 * v70) = v81;
      v70 = ++DWORD2(v518);
      v82 = *(_QWORD *)(a1 + 48);
      if ((v79 & 0x80000000) != 0)
        v83 = (uint64_t *)(*(_QWORD *)(v82 + 24) + 16 * (v79 & 0x7FFFFFFF) + 8);
      else
        v83 = (uint64_t *)(*(_QWORD *)(v82 + 272) + 8 * v79);
      v84 = *v83;
      if ((*(_BYTE *)(v84 + 3) & 1) == 0)
        v84 = *(_QWORD *)(v84 + 24);
      v85 = *(_QWORD *)(v84 + 8);
      v86 = *(unsigned int *)(v85 + 40);
      if (!(_DWORD)v86)
        break;
      v87 = *(_QWORD *)(v85 + 32);
      while (*(_BYTE *)v87 != 17)
      {
        v87 += 32;
        if (!--v86)
          goto LABEL_84;
      }
      if (*(_DWORD *)(v87 + 16) != 2450)
        break;
      v88 = *(_DWORD *)(v87 + 36);
      if (!v88)
        break;
      if (v70 >= HIDWORD(v518))
      {
        v482 = v57;
        v89 = v69;
        v473 = v72;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v518, (uint64_t)v69, v70 + 1, 4);
        v72 = v473;
        v69 = v89;
        v57 = v482;
        LODWORD(v70) = DWORD2(v518);
      }
      *(_DWORD *)(v518 + 4 * v70) = v88;
      LODWORD(v70) = ++DWORD2(v518);
      ++v71;
    }
    while (v71 < DWORD2(v513[0]));
LABEL_84:
    if ((_DWORD)v70 == 4)
    {
      v90 = *(_DWORD *)v518 == *(_DWORD *)(v518 + 4) && *(_DWORD *)(v518 + 8) == *(_DWORD *)(v518 + 12);
      v91 = *(_DWORD *)v518 == **(_DWORD **)&v513[0] && *(_DWORD *)(v518 + 8) == *(_DWORD *)(*(_QWORD *)&v513[0] + 4);
      v92 = v91 && v90;
      v93 = atomic_load((unsigned __int8 *)&qword_1ED7ED550);
      if ((v93 & 1) == 0)
      {
        v457 = v57;
        v458 = v69;
        v475 = v72;
        v459 = __cxa_guard_acquire(&qword_1ED7ED550);
        v72 = v475;
        v69 = v458;
        v57 = v457;
        if (v459)
        {
          byte_1ED7ED541 = 1;
          __cxa_guard_release(&qword_1ED7ED550);
          v72 = v475;
          v69 = v458;
          v57 = v457;
        }
      }
      v52 = 0;
      if (!v92 || !byte_1ED7ED541)
        goto LABEL_156;
      v94 = *(_QWORD *)(a1 + 48);
      v95 = (unsigned int *)v510[0];
      v96 = *(unsigned int *)v510[0];
      if ((v96 & 0x80000000) != 0)
        v97 = (uint64_t *)(*(_QWORD *)(v94 + 24) + 16 * (v96 & 0x7FFFFFFF) + 8);
      else
        v97 = (uint64_t *)(*(_QWORD *)(v94 + 272) + 8 * v96);
      v98 = *v97;
      if ((*(_BYTE *)(v98 + 3) & 1) == 0)
        v98 = *(_QWORD *)(v98 + 24);
      v99 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(v98 + 8) + 24);
      if (LODWORD(v510[1]))
      {
        v100 = 4 * LODWORD(v510[1]);
        v101 = v100 - 4;
        v102 = (unsigned int *)v510[0];
        do
        {
          v103 = *v102;
          if ((v103 & 0x80000000) != 0)
            v104 = (uint64_t *)(*(_QWORD *)(v94 + 24) + 16 * (v103 & 0x7FFFFFFF) + 8);
          else
            v104 = (uint64_t *)(*(_QWORD *)(v94 + 272) + 8 * v103);
          v105 = *v104;
          if ((*(_BYTE *)(v105 + 3) & 1) == 0)
            v105 = *(_QWORD *)(v105 + 24);
          v106 = *(llvm::MachineBasicBlock **)(*(_QWORD *)(v105 + 8) + 24);
          ++v102;
          v107 = v106 != v99 || v101 == 0;
          v101 -= 4;
        }
        while (!v107);
        do
        {
          v108 = *v95;
          if ((v108 & 0x80000000) != 0)
            v109 = (uint64_t *)(*(_QWORD *)(v94 + 24) + 16 * (v108 & 0x7FFFFFFF) + 8);
          else
            v109 = (uint64_t *)(*(_QWORD *)(v94 + 272) + 8 * v108);
          v110 = *v109;
          if ((*(_BYTE *)(v110 + 3) & 1) == 0)
            v110 = *(_QWORD *)(v110 + 24);
          if (*(_QWORD *)(*(_QWORD *)(v110 + 8) + 24) == *(_QWORD *)(v494 + 24))
          {
            v53 = 0;
            v52 = 0;
            goto LABEL_157;
          }
          ++v95;
          v100 -= 4;
        }
        while (v100);
        if (v106 != v99)
          goto LABEL_155;
      }
      if (v51 != 2)
        goto LABEL_128;
      v111 = *(unsigned int *)(a1 + 764);
      if ((v111 & 0x80000000) != 0)
        v112 = (uint64_t *)(*(_QWORD *)(v94 + 24) + 16 * (v111 & 0x7FFFFFFF) + 8);
      else
        v112 = (uint64_t *)(*(_QWORD *)(v94 + 272) + 8 * v111);
      v113 = *v112;
      if ((*(_BYTE *)(v113 + 3) & 1) == 0)
        v113 = *(_QWORD *)(v113 + 24);
      if (*(llvm::MachineBasicBlock **)(*(_QWORD *)(v113 + 8) + 24) == v99)
      {
LABEL_128:
        if (v492[16] == -1)
        {
          v477 = v69;
          v483 = v57;
          v116 = v99;
          v117 = 0;
LABEL_137:
          v119 = *(_DWORD *)(a1 + 1428);
          v120 = sub_1C4C919CC(v72, v489 & 0xFFFFFFFF00000000, v119, v117, v506);
          if (HIBYTE(v120))
            v121 = 2;
          else
            v121 = v119;
          if (BYTE1(v120) | BYTE4(v120))
            v122 = v121;
          else
            v122 = v119;
          if (BYTE1(v120))
            v123 = BYTE4(v120) == 0;
          else
            v123 = 1;
          v52 = v116;
          v69 = v477;
          v57 = v483;
          if (v123 && (v489 & 0xFFFFFFFF00000000) != 0x200000000)
            goto LABEL_789;
          v124 = *(unsigned int *)(a1 + 292);
          v125 = *(_QWORD *)(a1 + 48);
          if ((v124 & 0x80000000) != 0)
            v126 = (uint64_t *)(*(_QWORD *)(v125 + 24) + 16 * (v124 & 0x7FFFFFFF) + 8);
          else
            v126 = (uint64_t *)(*(_QWORD *)(v125 + 272) + 8 * v124);
          v127 = *v126;
          if ((*(_BYTE *)(v127 + 3) & 1) == 0)
            v127 = *(_QWORD *)(v127 + 24);
          if (*(llvm::MachineBasicBlock **)(*(_QWORD *)(v127 + 8) + 24) == v116)
          {
LABEL_789:
            if (v122 != 2 || (v409 = *(unsigned int *)(a1 + 592), !(_DWORD)v409))
            {
LABEL_598:
              v53 = 0;
              goto LABEL_157;
            }
            v410 = *(_QWORD *)(a1 + 48);
            v411 = 40 * v409;
            v412 = (unsigned int *)(*(_QWORD *)(a1 + 584) + 4);
            while (1)
            {
              v414 = *v412;
              v412 += 10;
              v413 = v414;
              if ((v414 & 0x80000000) != 0)
                v415 = (uint64_t *)(*(_QWORD *)(v410 + 24) + 16 * (v413 & 0x7FFFFFFF) + 8);
              else
                v415 = (uint64_t *)(*(_QWORD *)(v410 + 272) + 8 * v413);
              v416 = *v415;
              if ((*(_BYTE *)(v416 + 3) & 1) == 0)
                v416 = *(_QWORD *)(v416 + 24);
              if (*(llvm::MachineBasicBlock **)(*(_QWORD *)(v416 + 8) + 24) != v116)
                break;
              v411 -= 40;
              if (!v411)
                goto LABEL_598;
            }
          }
          goto LABEL_155;
        }
        v114 = *(unsigned int *)(a1 + 724);
        if ((v114 & 0x80000000) != 0)
          v115 = (uint64_t *)(*(_QWORD *)(v94 + 24) + 16 * (v114 & 0x7FFFFFFF) + 8);
        else
          v115 = (uint64_t *)(*(_QWORD *)(v94 + 272) + 8 * v114);
        v118 = *v115;
        if ((*(_BYTE *)(v118 + 3) & 1) == 0)
          v118 = *(_QWORD *)(v118 + 24);
        if (*(llvm::MachineBasicBlock **)(*(_QWORD *)(v118 + 8) + 24) == v99)
        {
          v477 = v69;
          v483 = v57;
          v116 = v99;
          v117 = 1;
          goto LABEL_137;
        }
      }
    }
LABEL_155:
    v52 = 0;
LABEL_156:
    v53 = v489;
    goto LABEL_157;
  }
  v52 = 0;
  v53 = v489;
  v51 = v31;
  v54 = v38;
  v55 = v39;
  v56 = (unsigned __int8 *)v492;
LABEL_157:
  if ((__int128 *)v518 != v69)
  {
    v128 = v57;
    free((void *)v518);
    v57 = v128;
  }
  if (*(llvm::MachineBasicBlock **)&v513[0] != v57)
    free(*(void **)&v513[0]);
  if (v510[0] != &v511)
    free(v510[0]);
LABEL_163:
  if (v51 == 1 && *(_BYTE *)(a1 + 1376) == 1 && *(_QWORD *)(a1 + 1392) >= 0x800uLL)
    *(_QWORD *)(a1 + 1392) = 0;
  v129 = *((_DWORD *)v56 + 1);
  if (v129 != 1)
  {
    if (v129 == 2)
    {
      if (*((_DWORD *)v56 + 12) == -1)
        goto LABEL_175;
    }
    else if (!v56[60])
    {
      goto LABEL_175;
    }
    if (*(_BYTE *)(a1 + 1216) == 1 && *(_QWORD *)(a1 + 1232) >= 6uLL)
      *(_QWORD *)(a1 + 1232) = 0;
  }
LABEL_175:
  v484 = v52;
  v130 = *(unsigned __int8 *)(v55 + 1683);
  v505 = *(_BYTE *)(v55 + 1683);
  v131 = *v54;
  v132 = *(_BYTE *)(v55 + 1675) == 0;
  LODWORD(v510[0]) = 0;
  if (sub_1C4AC67E0(v40, v131, "SampleWriteL2Pers", (int *)v510))
    v133 = (int)v510[0];
  else
    v133 = v132;
  v466 = v53;
  v468 = v133;
  if (*((_DWORD *)v56 + 23) == -1)
  {
    v474 = 0;
    v478 = 0;
    v488 = 0;
    if (!a16)
      goto LABEL_228;
    goto LABEL_226;
  }
  if (v130)
  {
    v134 = *((_DWORD *)v56 + 1);
    if (v134 == 1)
    {
      v135 = 0;
      goto LABEL_195;
    }
    if (v134 == 2)
    {
      if (*((_DWORD *)v56 + 12) != -1)
      {
        v135 = 4;
        goto LABEL_195;
      }
      v140 = *((_DWORD *)v56 + 13) == -1;
      v141 = 1;
    }
    else
    {
      v140 = v56[60] == 0;
      v141 = 3;
    }
    if (v140)
      v135 = v141;
    else
      v135 = v141 + 1;
LABEL_195:
    if (v53 == 2)
    {
      if (*(_BYTE *)(a1 + 248) == 1)
        LODWORD(v137) = 1;
      else
        LODWORD(v137) = 3;
    }
    else
    {
      LODWORD(v137) = 0;
    }
    if (v51 == 1)
    {
      if (*(_BYTE *)(a1 + 1376) == 1)
        v142 = 1;
      else
        v142 = 3;
      v488 = v142;
    }
    else
    {
      v488 = 0;
    }
    if (v135 == 4)
    {
      LODWORD(v138) = *(unsigned __int8 *)(a1 + 1216);
      if ((_DWORD)v138 != 1)
      {
        if ((_DWORD)v138 == 7)
          LODWORD(v138) = 3;
        else
          LODWORD(v138) = 0;
      }
    }
    else
    {
      LODWORD(v138) = 0;
    }
    v136 = (_DWORD)v137 == 3;
    if ((_DWORD)v137 == 3)
      v139 = 2;
    else
      v139 = 1;
    if ((_DWORD)v488 != 3)
      v139 = v137 == 3;
    goto LABEL_217;
  }
  v136 = 0;
  LODWORD(v137) = 0;
  v488 = 0;
  LODWORD(v138) = 0;
  v139 = 0;
  if (v51 == 1)
    v51 = 2;
LABEL_217:
  if ((_DWORD)v138 == 3)
    ++v139;
  v143 = (_DWORD)v138 == 3 && v139 > 1;
  if ((_DWORD)v138 == 3 && v139 > 1)
    v138 = 0;
  else
    v138 = v138;
  v478 = v138;
  if (v136 && v139 - v143 > 1)
    v137 = 0;
  else
    v137 = v137;
  v474 = v137;
  if (a16)
  {
LABEL_226:
    v145 = 32 * a16;
    do
    {
      v146 = *a15;
      v147 = a15[1];
      a15 += 2;
      *(_OWORD *)v510 = v146;
      v511 = v147;
      v512 = 1;
      v148 = sub_1C4A20B14(a1 + 840, (unint64_t)v510, 1);
      v149 = *(_QWORD *)(a1 + 840) + 40 * *(unsigned int *)(a1 + 848);
      v150 = *(_QWORD *)(v148 + 32);
      v151 = *(_OWORD *)(v148 + 16);
      *(_OWORD *)v149 = *(_OWORD *)v148;
      *(_OWORD *)(v149 + 16) = v151;
      *(_QWORD *)(v149 + 32) = v150;
      ++*(_DWORD *)(a1 + 848);
      v145 -= 32;
    }
    while (v145);
  }
LABEL_228:
  v152 = atomic_load((unsigned __int8 *)&qword_1ED7ED558);
  if ((v152 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED558))
  {
    byte_1ED7ED542 = 1;
    __cxa_guard_release(&qword_1ED7ED558);
  }
  v465 = a1 + 840;
  if (!byte_1ED7ED542 || (v153 = *(unsigned int *)(a1 + 848), !(_DWORD)v153) || !*(_BYTE *)(v54[2] + 354))
  {
    v470 = 0;
    goto LABEL_232;
  }
  v356 = v54[5];
  v510[0] = &v511;
  v510[1] = (void *)0x400000000;
  v357 = *(_QWORD *)(a1 + 840);
  v358 = 40 * v153;
  do
  {
    v359 = (_OWORD *)sub_1C47C0F60((uint64_t)v510, v357, 1);
    v360 = (char *)v510[0] + 32 * LODWORD(v510[1]);
    v361 = v359[1];
    *v360 = *v359;
    v360[1] = v361;
    ++LODWORD(v510[1]);
    v357 += 40;
    v358 -= 40;
  }
  while (v358);
  v362 = *((unsigned int *)v510[0] + 17);
  v363 = *((unsigned int *)v510[0] + 25);
  if (*((_DWORD *)v510[0] + 9) == (_DWORD)v362 && (_DWORD)v362 == (_DWORD)v363)
  {
    if (*((_DWORD *)v510[0] + 1) == (_DWORD)v362)
    {
      v365 = 5;
      goto LABEL_536;
    }
    *(_QWORD *)&v513[0] = &off_1E816EFF0;
    *((_QWORD *)&v513[0] + 1) = sub_1C554C7E0;
    *((_QWORD *)&v513[1] + 1) = v513;
    *(_QWORD *)&v518 = &off_1E816F038;
    *((_QWORD *)&v518 + 1) = sub_1C554C7F8;
    *((_QWORD *)&v519 + 1) = &v518;
    sub_1C554C3AC(v362, v356, (uint64_t)v513, (uint64_t)&v518, 0, 0, __src);
    v422 = (__int128 *)*((_QWORD *)&v519 + 1);
    if (*((__int128 **)&v519 + 1) == &v518)
    {
      v423 = (void (**)(__int128 *))(v518 + 32);
      v422 = &v518;
    }
    else
    {
      if (!*((_QWORD *)&v519 + 1))
      {
LABEL_620:
        v424 = (_OWORD *)*((_QWORD *)&v513[1] + 1);
        if (*((_OWORD **)&v513[1] + 1) == v513)
        {
          v425 = (void (**)(_OWORD *))(*(_QWORD *)&v513[0] + 32);
          v424 = v513;
        }
        else
        {
          if (!*((_QWORD *)&v513[1] + 1))
          {
LABEL_623:
            v426 = BYTE8(v499);
            if (BYTE8(v499))
            {
              LODWORD(v358) = __src[1];
              if (LODWORD(__src[1]) > 0x40)
              {
                v460 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
                v427 = operator new[]();
                v461 = __src[0];
                memcpy((void *)v427, __src[0], v460);
                if (v461)
                  MEMORY[0x1CAA32F9C](v461, 0x1000C8000313F17);
                v56 = (unsigned __int8 *)v492;
              }
              else
              {
                v427 = (uint64_t)__src[0];
              }
            }
            else
            {
              v427 = 0;
            }
            v439 = (uint64_t *)(*(_QWORD *)(v356 + 24) + 16 * (v362 & 0x7FFFFFFF) + 8);
            if ((int)v362 >= 0)
              v439 = (uint64_t *)(*(_QWORD *)(v356 + 272) + 8 * v362);
            v440 = *v439;
            if ((*(_BYTE *)(v440 + 3) & 1) == 0)
              v440 = *(_QWORD *)(v440 + 24);
            v441 = *(_QWORD *)(v440 + 8);
            if (**(_WORD **)(v441 + 16) == 121)
            {
              v442 = *(_QWORD *)(*(_QWORD *)(v441 + 32) + 48);
              if (!v426)
                goto LABEL_656;
            }
            else
            {
              v442 = 0;
              if (!v426)
                goto LABEL_656;
            }
            if (v358 > 0x40)
              v452 = *(_QWORD *)v427;
            else
              v452 = v427 << -(char)v358 >> -(char)v358;
            v56 = (unsigned __int8 *)v492;
            if (!v452)
            {
              v443 = 1;
              goto LABEL_693;
            }
LABEL_656:
            if (v442)
            {
              if (*(_UNKNOWN **)(v442 + 32) == &unk_1C866F1C0)
                v444 = *(_QWORD *)(v442 + 40);
              else
                v444 = v442 + 24;
              v443 = (*(_BYTE *)(v444 + 28) & 7) == 3;
            }
            else
            {
              v443 = 0;
            }
            if (!v426)
            {
LABEL_667:
              if (v443)
                v438 = 4;
              else
                v438 = 7;
LABEL_670:
              v470 = v438;
              goto LABEL_613;
            }
LABEL_693:
            if (v358 >= 0x41 && v427)
              MEMORY[0x1CAA32F9C](v427, 0x1000C8000313F17);
            v56 = (unsigned __int8 *)v492;
            goto LABEL_667;
          }
          v425 = (void (**)(_OWORD *))(**((_QWORD **)&v513[1] + 1) + 40);
        }
        (*v425)(v424);
        goto LABEL_623;
      }
      v423 = (void (**)(__int128 *))(**((_QWORD **)&v519 + 1) + 40);
    }
    (*v423)(v422);
    goto LABEL_620;
  }
  *(_QWORD *)&v513[0] = &off_1E816EFF0;
  *((_QWORD *)&v513[0] + 1) = sub_1C554C7E0;
  *((_QWORD *)&v513[1] + 1) = v513;
  *(_QWORD *)&v518 = &off_1E816F038;
  *((_QWORD *)&v518 + 1) = sub_1C554C7F8;
  *((_QWORD *)&v519 + 1) = &v518;
  sub_1C554C3AC(v363, v356, (uint64_t)v513, (uint64_t)&v518, 0, 0, __src);
  v393 = (__int128 *)*((_QWORD *)&v519 + 1);
  if (*((__int128 **)&v519 + 1) == &v518)
  {
    v394 = (void (**)(__int128 *))(v518 + 32);
    v393 = &v518;
LABEL_567:
    (*v394)(v393);
    goto LABEL_568;
  }
  if (*((_QWORD *)&v519 + 1))
  {
    v394 = (void (**)(__int128 *))(**((_QWORD **)&v519 + 1) + 40);
    goto LABEL_567;
  }
LABEL_568:
  v395 = (_OWORD *)*((_QWORD *)&v513[1] + 1);
  if (*((_OWORD **)&v513[1] + 1) == v513)
  {
    v396 = (void (**)(_OWORD *))(*(_QWORD *)&v513[0] + 32);
    v395 = v513;
LABEL_570:
    (*v396)(v395);
    goto LABEL_571;
  }
  if (*((_QWORD *)&v513[1] + 1))
  {
    v396 = (void (**)(_OWORD *))(**((_QWORD **)&v513[1] + 1) + 40);
    goto LABEL_570;
  }
LABEL_571:
  v397 = BYTE8(v499);
  if (BYTE8(v499))
  {
    LODWORD(v358) = __src[1];
    if (LODWORD(__src[1]) > 0x40)
    {
      v454 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
      v398 = operator new[]();
      v455 = __src[0];
      memcpy((void *)v398, __src[0], v454);
      if (v455)
        MEMORY[0x1CAA32F9C](v455, 0x1000C8000313F17);
      v56 = (unsigned __int8 *)v492;
    }
    else
    {
      v398 = (uint64_t)__src[0];
    }
  }
  else
  {
    v398 = 0;
  }
  v404 = (uint64_t *)(*(_QWORD *)(v356 + 24) + 16 * (v363 & 0x7FFFFFFF) + 8);
  if ((int)v363 >= 0)
    v404 = (uint64_t *)(*(_QWORD *)(v356 + 272) + 8 * v363);
  v405 = *v404;
  if ((*(_BYTE *)(v405 + 3) & 1) == 0)
    v405 = *(_QWORD *)(v405 + 24);
  v406 = *(_QWORD *)(v405 + 8);
  if (**(_WORD **)(v406 + 16) == 121)
  {
    v407 = *(_QWORD *)(*(_QWORD *)(v406 + 32) + 48);
    if (!v397)
    {
LABEL_586:
      if (v407)
      {
        if (*(_UNKNOWN **)(v407 + 32) == &unk_1C866F1C0)
          v417 = *(_QWORD *)(v407 + 40);
        else
          v417 = v407 + 24;
        v408 = (*(_BYTE *)(v417 + 28) & 7) == 3;
      }
      else
      {
        v408 = 0;
      }
      if (!v397)
        goto LABEL_603;
      goto LABEL_632;
    }
  }
  else
  {
    v407 = 0;
    if (!v397)
      goto LABEL_586;
  }
  if (v358 > 0x40)
    v428 = *(_QWORD *)v398;
  else
    v428 = v398 << -(char)v358 >> -(char)v358;
  v56 = (unsigned __int8 *)v492;
  if (v428)
    goto LABEL_586;
  v408 = 1;
LABEL_632:
  if (v358 >= 0x41)
  {
    if (v398)
    {
      MEMORY[0x1CAA32F9C](v398, 0x1000C8000313F17);
      v56 = (unsigned __int8 *)v492;
      if (!v408)
        goto LABEL_604;
      goto LABEL_635;
    }
    v56 = (unsigned __int8 *)v492;
  }
LABEL_603:
  if (!v408)
  {
LABEL_604:
    if (*((_DWORD *)v510[0] + 1) != *((_DWORD *)v510[0] + 17))
    {
      v418 = *((_DWORD *)v510[0] + 25);
LABEL_606:
      if (v418 >= 0)
        v419 = (uint64_t *)(*(_QWORD *)(v356 + 272) + 8 * v418);
      else
        v419 = (uint64_t *)(*(_QWORD *)(v356 + 24) + 16 * (v418 & 0x7FFFFFFF) + 8);
      v420 = *v419;
      if ((*(_BYTE *)(v420 + 3) & 1) == 0)
        v420 = *(_QWORD *)(v420 + 24);
      v421 = *(_QWORD *)(v420 + 8);
      if (**(_WORD **)(v421 + 16) != 121)
        goto LABEL_612;
      v436 = *(_QWORD *)(*(_QWORD *)(v421 + 32) + 48);
      if (!v436)
        goto LABEL_612;
      DWORD2(v513[0]) = 64;
      *(_QWORD *)&v513[0] = 0x3FF0000000000000;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v518, (const llvm::APInt **)v513);
      *(_OWORD *)((char *)v513 + 8) = v518;
      DWORD2(v513[1]) = v519;
      BYTE12(v513[1]) = BYTE4(v519) & 0xF;
      llvm::APFloat::convert((uint64_t)v513, *(void **)(v436 + 32), 1, &v518);
      v437 = sub_1C47ECB98(v436 + 24, (uint64_t)v513);
      if (*((_UNKNOWN **)&v513[0] + 1) == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v513[1]);
      }
      else if ((*(_DWORD *)(*((_QWORD *)&v513[0] + 1) + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v513[1])
      {
        MEMORY[0x1CAA32F9C](*(_QWORD *)&v513[1], 0x1000C8000313F17);
      }
      if ((v437 & 1) == 0)
      {
LABEL_612:
        v470 = 0;
        goto LABEL_613;
      }
      v438 = 2;
      goto LABEL_670;
    }
    v418 = *((_DWORD *)v510[0] + 25);
    if (*((_DWORD *)v510[0] + 9) != v418)
      goto LABEL_606;
    v365 = 6;
LABEL_536:
    v470 = v365;
    goto LABEL_613;
  }
LABEL_635:
  v429 = *((unsigned int *)v510[0] + 17);
  *(_QWORD *)&v513[0] = &off_1E816EFF0;
  *((_QWORD *)&v513[0] + 1) = sub_1C554C7E0;
  *((_QWORD *)&v513[1] + 1) = v513;
  *(_QWORD *)&v518 = &off_1E816F038;
  *((_QWORD *)&v518 + 1) = sub_1C554C7F8;
  *((_QWORD *)&v519 + 1) = &v518;
  sub_1C554C3AC(v429, v356, (uint64_t)v513, (uint64_t)&v518, 0, 0, __src);
  v430 = (__int128 *)*((_QWORD *)&v519 + 1);
  if (*((__int128 **)&v519 + 1) == &v518)
  {
    v431 = (void (**)(__int128 *))(v518 + 32);
    v430 = &v518;
LABEL_637:
    (*v431)(v430);
    goto LABEL_638;
  }
  if (*((_QWORD *)&v519 + 1))
  {
    v431 = (void (**)(__int128 *))(**((_QWORD **)&v519 + 1) + 40);
    goto LABEL_637;
  }
LABEL_638:
  v432 = (_OWORD *)*((_QWORD *)&v513[1] + 1);
  if (*((_OWORD **)&v513[1] + 1) == v513)
  {
    v433 = (void (**)(_OWORD *))(*(_QWORD *)&v513[0] + 32);
    v432 = v513;
LABEL_640:
    (*v433)(v432);
    goto LABEL_641;
  }
  if (*((_QWORD *)&v513[1] + 1))
  {
    v433 = (void (**)(_OWORD *))(**((_QWORD **)&v513[1] + 1) + 40);
    goto LABEL_640;
  }
LABEL_641:
  v434 = BYTE8(v499);
  if (BYTE8(v499))
  {
    LODWORD(v358) = __src[1];
    if (LODWORD(__src[1]) > 0x40)
    {
      v462 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
      v463 = (uint64_t *)operator new[]();
      v464 = __src[0];
      v471 = v463;
      memcpy(v463, __src[0], v462);
      if (v464)
        MEMORY[0x1CAA32F9C](v464, 0x1000C8000313F17);
      v56 = (unsigned __int8 *)v492;
      v435 = v471;
    }
    else
    {
      v435 = (uint64_t *)__src[0];
    }
  }
  else
  {
    v435 = 0;
  }
  v445 = (uint64_t *)(*(_QWORD *)(v356 + 24) + 16 * (v429 & 0x7FFFFFFF) + 8);
  if ((int)v429 >= 0)
    v445 = (uint64_t *)(*(_QWORD *)(v356 + 272) + 8 * v429);
  v446 = *v445;
  if ((*(_BYTE *)(v446 + 3) & 1) == 0)
    v446 = *(_QWORD *)(v446 + 24);
  v447 = *(_QWORD *)(v446 + 8);
  if (**(_WORD **)(v447 + 16) == 121)
  {
    v448 = *(_QWORD *)(*(_QWORD *)(v447 + 32) + 48);
    if (!v434)
      goto LABEL_678;
  }
  else
  {
    v448 = 0;
    if (!v434)
      goto LABEL_678;
  }
  if (v358 > 0x40)
    v453 = *v435;
  else
    v453 = (uint64_t)((_QWORD)v435 << -(char)v358) >> -(char)v358;
  v56 = (unsigned __int8 *)v492;
  if (!v453)
  {
    v449 = 1;
LABEL_700:
    if (v358 >= 0x41 && v435)
      MEMORY[0x1CAA32F9C](v435, 0x1000C8000313F17);
    v56 = (unsigned __int8 *)v492;
    goto LABEL_684;
  }
LABEL_678:
  if (v448)
  {
    if (*(_UNKNOWN **)(v448 + 32) == &unk_1C866F1C0)
      v450 = *(_QWORD *)(v448 + 40);
    else
      v450 = v448 + 24;
    v449 = (*(_BYTE *)(v450 + 28) & 7) == 3;
  }
  else
  {
    v449 = 0;
  }
  if (v434)
    goto LABEL_700;
LABEL_684:
  if (v449)
    v451 = 3;
  else
    v451 = 1;
  v470 = v451;
LABEL_613:
  if (v510[0] != &v511)
    free(v510[0]);
LABEL_232:
  v154 = v506;
  if (v56[62])
    v155 = v506 >= 5;
  else
    v155 = 0;
  if (v155)
    v156 = 4;
  else
    v156 = 0;
  v157 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 208))(a1, v56, v494);
  v158 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 320))(a1, v56, v494);
  v159 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 328))(a1, v56, v494);
  v161 = *(unsigned int *)(v494 + 40);
  if ((_DWORD)v161)
  {
    v162 = 0;
    v163 = *(unsigned __int8 **)(v494 + 32);
    while (1)
    {
      v164 = *v163;
      v163 += 32;
      if (v164 == 17)
        break;
      if (v161 == ++v162)
        goto LABEL_242;
    }
  }
  else
  {
LABEL_242:
    LODWORD(v162) = -1;
  }
  if ((*(_DWORD *)(*(_QWORD *)(v494 + 32) + 32 * v162 + 16) - 2824) < 0xC)
  {
    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 336))(a1, v56, v494))
      v165 = 1;
    else
      v165 = 2;
    if ((v157 & 1) == 0)
      goto LABEL_248;
LABEL_255:
    v156 = 2;
    goto LABEL_256;
  }
  v165 = 0;
  if ((v157 & 1) != 0)
    goto LABEL_255;
LABEL_248:
  if (v158)
  {
    if (v154 > 3 && v485 == 15 && *((_DWORD *)v56 + 3) == 4 && !v56[8])
    {
      v156 = 3;
      goto LABEL_256;
    }
LABEL_268:
    *v487 = 0;
    v487[16] = 0;
    return;
  }
  if (v159)
  {
    if (v154 <= 3 || v56[2] || v56[62] || *(_DWORD *)(a1 + 1428) || *((_DWORD *)v56 + 16) != -1)
      goto LABEL_268;
    v156 = 1;
  }
LABEL_256:
  v166 = *(_QWORD *)(v494 + 48);
  if (v166 < 8)
  {
LABEL_261:
    v167 = 0;
    goto LABEL_274;
  }
  if ((v166 & 7) != 0)
  {
    v167 = 0;
    if ((*(_QWORD *)(v494 + 48) & 7) != 3 || (v166 & 0xFFFFFFFFFFFFFFF8) == 0)
      goto LABEL_274;
    if (*(_DWORD *)(v166 & 0xFFFFFFFFFFFFFFF8) != 1)
      goto LABEL_261;
  }
  else
  {
    v166 &= 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v494 + 48) = v166;
  }
  if ((v166 & 7) != 0)
  {
    v168 = *(_QWORD *)((v166 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v168 = v166 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v494 + 48) = v168;
  }
  v167 = *(unsigned __int16 *)(v168 + 32);
LABEL_274:
  v169 = *((_DWORD *)v56 + 1);
  if (v169 == 1)
  {
    v170 = 0;
  }
  else
  {
    if (v169 == 2)
    {
      if (*((_DWORD *)v56 + 12) != -1)
      {
        v170 = 4;
        goto LABEL_283;
      }
      v171 = *((_DWORD *)v56 + 13) == -1;
      v170 = 1;
    }
    else
    {
      v171 = v56[60] == 0;
      v170 = 3;
    }
    if (!v171)
      ++v170;
  }
LABEL_283:
  v172 = v51;
  if (*((_DWORD *)v56 + 23) == -1)
  {
    v175 = v170 | ((unint64_t)v51 << 32);
    v176 = *((_DWORD *)v56 + 16) != -1;
    v177 = v56[62];
    if (*((_DWORD *)v56 + 21) == -1 || v177 == 0)
      v179 = 0;
    else
      v179 = a20;
    v180 = atomic_load((unsigned __int8 *)&qword_1ED7ED560);
    if ((v180 & 1) == 0)
    {
      v469 = v165;
      v456 = __cxa_guard_acquire(&qword_1ED7ED560);
      v165 = v469;
      if (v456)
      {
        byte_1ED7ED543 = 1;
        __cxa_guard_release(&qword_1ED7ED560);
        v165 = v469;
      }
    }
    v181 = sub_1C4A20B8C(*(_DWORD *)(a1 + 1428), v485 & 0xF, v175, v177, v179, v489 & 0xFFFFFFFF00000000 | v466, v176, byte_1ED7ED543, v467, (v167 >> 5) & 2, v156, v165);
    v182 = *((_DWORD *)v56 + 23);
    v504 = v181;
    memset(v503, 0, 13);
    v154 = v506;
    if (v182 == -1)
    {
      v183 = v181;
      v184 = sub_1C4C919CC((4 * v181) & 0x300000000 | (v181 >> 2) & 7, v489 & 0xFFFFFFFF00000000 | v466, *(_DWORD *)(a1 + 1428), (v181 >> 10) & 1, v506);
      v503[0] = v184;
      LODWORD(v503[1]) = v185;
      BYTE4(v503[1]) = v186;
      v187 = BYTE4(v184);
      v174 = v470;
      if ((v184 & 0xFF00) != 0 && BYTE4(v184))
      {
        v187 = 0;
        WORD2(v503[0]) = 256;
        v183 = v183 & 0xFFFFFFFCFFFFFFFFLL | 0x200000000;
        v504 = v183;
      }
      v189 = (v184 & 0xFF00) != 0 || v187 != 0;
      if (HIBYTE(v184) && v189)
      {
        *(_WORD *)((char *)v503 + 7) = 256;
        v504 = v183 & 0xFFFFFFFFFFFFFFFCLL | 2;
      }
    }
    else
    {
      v174 = v470;
    }
  }
  else
  {
    v173 = 0x1000000;
    if (!v56[8])
      v173 = 0x800000;
    v174 = v470;
    v504 = (v172 << 30) | (v488 << 35) | ((unint64_t)(v468 == 0) << 34) | (v478 << 38) | (v474 << 41) | (v470 << 44) | v173 | ((unint64_t)*v56 << 21) | (4 * v170) | ((unint64_t)(v56[1] == 0) << 26) | ((unint64_t)((v167 >> 5) & 2) << 28);
    memset(v503, 0, 13);
  }
  sub_1C4C9237C((uint64_t)v510, (uint64_t)v56, &v504, v503, v154, v160, 0, 61);
  if (a10)
  {
    v190 = 32 * a10;
    do
    {
      v191 = *v49;
      v192 = v49[1];
      v49 += 2;
      v513[1] = v192;
      v513[0] = v191;
      LOBYTE(v514) = 1;
      v193 = sub_1C4A20B14(a1 + 72, (unint64_t)v513, 1);
      v194 = *(_QWORD *)(a1 + 72) + 40 * *(unsigned int *)(a1 + 80);
      v195 = *(_QWORD *)(v193 + 32);
      v196 = *(_OWORD *)(v193 + 16);
      *(_OWORD *)v194 = *(_OWORD *)v193;
      *(_OWORD *)(v194 + 16) = v196;
      *(_QWORD *)(v194 + 32) = v195;
      ++*(_DWORD *)(a1 + 80);
      v190 -= 32;
    }
    while (v190);
  }
  if (*((_DWORD *)v56 + 23) != -1 && v174)
  {
    *(_QWORD *)&v513[0] = &v513[1];
    *((_QWORD *)&v513[0] + 1) = 0x400000000;
    v197 = *(unsigned int *)(a1 + 848);
    if ((_DWORD)v197)
    {
      v198 = *(_QWORD *)(a1 + 840);
      v199 = 40 * v197;
      do
      {
        v200 = (_OWORD *)sub_1C47C0F60((uint64_t)v513, v198, 1);
        v201 = (_OWORD *)(*(_QWORD *)&v513[0] + 32 * DWORD2(v513[0]));
        v202 = v200[1];
        *v201 = *v200;
        v201[1] = v202;
        ++DWORD2(v513[0]);
        v198 += 40;
        v199 -= 40;
      }
      while (v199);
    }
    *(_DWORD *)(a1 + 848) = 0;
    if ((v174 - 4) >= 2)
    {
      if (((1 << v174) & 6) != 0)
      {
        v366 = *(_OWORD *)(*(_QWORD *)&v513[0] + 16);
        v518 = **(_OWORD **)&v513[0];
        v519 = v366;
        v520 = 1;
        v367 = a1 + 840;
        v368 = sub_1C4A20B14(v465, (unint64_t)&v518, 1);
        v369 = *(_QWORD *)(a1 + 840) + 40 * *(unsigned int *)(a1 + 848);
        v370 = *(_QWORD *)(v368 + 32);
        v371 = *(_OWORD *)(v368 + 16);
        *(_OWORD *)v369 = *(_OWORD *)v368;
        *(_OWORD *)(v369 + 16) = v371;
        *(_QWORD *)(v369 + 32) = v370;
        ++*(_DWORD *)(a1 + 848);
        v372 = *(_OWORD *)(*(_QWORD *)&v513[0] + 48);
        v518 = *(_OWORD *)(*(_QWORD *)&v513[0] + 32);
        v519 = v372;
        v520 = 1;
        v373 = sub_1C4A20B14(v465, (unint64_t)&v518, 1);
        v374 = *(_QWORD *)(a1 + 840) + 40 * *(unsigned int *)(a1 + 848);
        v375 = *(_QWORD *)(v373 + 32);
        v376 = *(_OWORD *)(v373 + 16);
        *(_OWORD *)v374 = *(_OWORD *)v373;
        *(_OWORD *)(v374 + 16) = v376;
        *(_QWORD *)(v374 + 32) = v375;
        ++*(_DWORD *)(a1 + 848);
        v377 = *(_OWORD *)(*(_QWORD *)&v513[0] + 64);
        v378 = *(_OWORD *)(*(_QWORD *)&v513[0] + 80);
      }
      else
      {
        if (((1 << v174) & 0xC8) == 0)
        {
LABEL_319:
          if (*(_OWORD **)&v513[0] != &v513[1])
            free(*(void **)&v513[0]);
          goto LABEL_321;
        }
        v399 = *(_OWORD *)(*(_QWORD *)&v513[0] + 16);
        v518 = **(_OWORD **)&v513[0];
        v519 = v399;
        v520 = 1;
        v367 = a1 + 840;
        v400 = sub_1C4A20B14(v465, (unint64_t)&v518, 1);
        v401 = *(_QWORD *)(a1 + 840) + 40 * *(unsigned int *)(a1 + 848);
        v402 = *(_QWORD *)(v400 + 32);
        v403 = *(_OWORD *)(v400 + 16);
        *(_OWORD *)v401 = *(_OWORD *)v400;
        *(_OWORD *)(v401 + 16) = v403;
        *(_QWORD *)(v401 + 32) = v402;
        ++*(_DWORD *)(a1 + 848);
        v377 = *(_OWORD *)(*(_QWORD *)&v513[0] + 32);
        v378 = *(_OWORD *)(*(_QWORD *)&v513[0] + 48);
      }
      v518 = v377;
      v519 = v378;
      v520 = 1;
      v204 = sub_1C4A20B14(v367, (unint64_t)&v518, 1);
      v205 = *(_QWORD *)(a1 + 840) + 40 * *(unsigned int *)(a1 + 848);
    }
    else
    {
      v203 = *(_OWORD *)(*(_QWORD *)&v513[0] + 16);
      v518 = **(_OWORD **)&v513[0];
      v519 = v203;
      v520 = 1;
      v204 = sub_1C4A20B14(v465, (unint64_t)&v518, 1);
      v205 = *(_QWORD *)(a1 + 840) + 40 * *(unsigned int *)(a1 + 848);
    }
    v206 = *(_QWORD *)(v204 + 32);
    v207 = *(_OWORD *)(v204 + 16);
    *(_OWORD *)v205 = *(_OWORD *)v204;
    *(_OWORD *)(v205 + 16) = v207;
    *(_QWORD *)(v205 + 32) = v206;
    ++*(_DWORD *)(a1 + 848);
    goto LABEL_319;
  }
LABEL_321:
  if (*((_DWORD *)v56 + 13) != -1)
  {
    v208 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v494);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(v513, a1, v208);
    v209 = *(unsigned __int8 *)(a1 + 832);
    v210 = v513[1];
    *(_OWORD *)(a1 + 800) = v513[0];
    *(_OWORD *)(a1 + 816) = v210;
    if (!v209)
      *(_BYTE *)(a1 + 832) = 1;
    v211 = sub_1C554C050(*(_DWORD *)(a1 + 804), *(_QWORD *)(a1 + 48));
    if (v212)
    {
      if (v211 >= 8)
      {
        v213 = *(unsigned __int8 *)(a1 + 832);
        *(_DWORD *)(a1 + 800) = 1;
        *(_QWORD *)(a1 + 816) = 0;
        *(_QWORD *)(a1 + 808) = 0;
        if (!v213)
          *(_BYTE *)(a1 + 832) = 1;
      }
    }
  }
  v214 = *(uint64_t **)(a1 + 64);
  if (v484)
  {
    v215 = v214[6];
    FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator(v484);
    v217 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v217 + 40) = v484;
    *(_QWORD *)(v217 + 48) = FirstInstrTerminator;
    sub_1C4A1F5D0((uint64_t)v501, (uint64_t)v510, (uint64_t *)(a1 + 72), *(uint64_t **)(a1 + 64));
    v218 = *(_QWORD **)(a1 + 64);
    v220 = sub_1C55437B8(v218, 0x109u);
    v221 = (unint64_t *)v219;
    v222 = (unint64_t *)v218[6];
    v223 = *(_QWORD *)(v218[5] + 40);
    *(_QWORD *)(v219 + 24) = v223;
    v224 = *(_QWORD *)(v223 + 32);
    v225 = *(unsigned int *)(v219 + 40);
    if ((_DWORD)v225)
    {
      v386 = *(_QWORD *)(v219 + 32);
      v387 = *(_QWORD *)(v224 + 40);
      v388 = 32 * v225;
      do
      {
        if (!*(_BYTE *)v386)
        {
          v389 = *(unsigned int *)(v386 + 4);
          if ((int)v389 >= 0)
            v390 = (uint64_t *)(*(_QWORD *)(v387 + 272) + 8 * v389);
          else
            v390 = (uint64_t *)(*(_QWORD *)(v387 + 24) + 16 * (v389 & 0x7FFFFFFF) + 8);
          v391 = *v390;
          if (*v390)
          {
            v392 = *(_QWORD *)(v391 + 16);
            *(_QWORD *)(v391 + 16) = v386;
            *(_QWORD *)(v386 + 16) = v392;
            if ((*(_BYTE *)(v386 + 3) & 1) != 0)
            {
              *(_QWORD *)(v386 + 24) = v391;
            }
            else
            {
              *(_QWORD *)(v386 + 24) = 0;
              v390 = (uint64_t *)(v392 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v386 + 16) = v386;
            *(_QWORD *)(v386 + 24) = 0;
          }
          *v390 = v386;
        }
        v386 += 32;
        v388 -= 32;
      }
      while (v388);
    }
    v226 = *(_QWORD *)(v224 + 728);
    if (v226)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v226 + 24))(v226, v219);
    v227 = *v222 & 0xFFFFFFFFFFFFFFF8;
    *v221 = v227 | *v221 & 7;
    v221[1] = (unint64_t)v222;
    *(_QWORD *)(v227 + 8) = v221;
    *v222 = *v222 & 7 | (unint64_t)v221;
    v228 = v218[7];
    if (v228)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v228 + 24))(v228, v221);
    memset((char *)v513 + 8, 0, 24);
    DWORD1(v513[0]) = v502;
    LODWORD(v513[0]) = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v221, v220, (const llvm::MachineOperand *)v513);
    v229 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v229 + 40) = *(_QWORD *)(v215 + 24);
    *(_QWORD *)(v229 + 48) = v215;
  }
  else
  {
    sub_1C4A1F5D0((uint64_t)v501, (uint64_t)v510, (uint64_t *)(a1 + 72), v214);
  }
  LOBYTE(__src[0]) = 0;
  v500 = 0;
  LOBYTE(v495) = 0;
  v497 = 0;
  if (LOWORD(v503[0]))
  {
    v230 = __src;
    if (!LOBYTE(v503[0]))
      v230 = (void **)&v495;
    v231 = *((unsigned __int8 *)v230 + 32);
    v232 = *(_OWORD *)(a1 + 1352);
    *(_OWORD *)v230 = *(_OWORD *)(a1 + 1336);
    *((_OWORD *)v230 + 1) = v232;
    if (!v231)
      *((_BYTE *)v230 + 32) = 1;
  }
  if (*(_WORD *)((char *)v503 + 3))
  {
    v233 = __src;
    if (!BYTE3(v503[0]))
      v233 = (void **)&v495;
    v234 = *((unsigned __int8 *)v233 + 32);
    v235 = *(_OWORD *)(a1 + 1312);
    *(_OWORD *)v233 = *(_OWORD *)(a1 + 1296);
    *((_OWORD *)v233 + 1) = v235;
    if (!v234)
      *((_BYTE *)v233 + 32) = 1;
  }
  if (BYTE6(v503[0]))
  {
    LODWORD(v518) = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 48), 129, "", 0);
    v236 = sub_1C5547D24(*(_QWORD **)(a1 + 64), 2806, (int *)&v518, 1, 0);
    v237 = *(_DWORD *)(a1 + 292);
    memset((char *)v513 + 8, 0, 24);
    DWORD1(v513[0]) = v237;
    LODWORD(v513[0]) = 0;
    llvm::MachineInstr::addOperand(v238, v236, (const llvm::MachineOperand *)v513);
    llvm::MachineOperand::setReg(a1 + 288, v518);
    v239 = *(_OWORD *)(a1 + 304);
    *(_OWORD *)__src = *(_OWORD *)(a1 + 288);
    v499 = v239;
    if (!v500)
      v500 = 1;
  }
  if (HIBYTE(v503[0]))
  {
    v240 = *(_OWORD *)(a1 + 1272);
    v495 = *(_OWORD *)(a1 + 1256);
    v496 = v240;
    if (!v497)
      v497 = 1;
  }
  if (BYTE2(v503[1]))
  {
    v241 = *(_OWORD *)(a1 + 1392);
    *(_OWORD *)__src = *(_OWORD *)(a1 + 1376);
    v499 = v241;
    v242 = 1;
    if (!v500)
      v500 = 1;
  }
  else
  {
    v242 = v500;
  }
  LODWORD(v243) = *(_DWORD *)a5;
  v244.i32[0] = *(_DWORD *)a5;
  v244.i32[1] = *(_DWORD *)v491;
  v245 = (int32x2_t)vand_s8(v244, (int8x8_t)0xFF000000FFLL);
  v246 = v506;
  if (*((_DWORD *)v56 + 3) == -1)
  {
    if ((vceq_s32(v245, (int32x2_t)0x100000001).u8[0] & 1) != 0)
      v260 = 49;
    else
      v260 = 41;
    if ((_DWORD)v488 == 3)
      v261 = 2;
    else
      v261 = 1;
    if ((_DWORD)v478 == 3)
      v262 = 2;
    else
      v262 = 1;
    if ((_DWORD)v474 == 3)
      v263 = 2;
    else
      v263 = 1;
    LODWORD(v513[0]) = 48;
    DWORD1(v513[0]) = v260;
    if (v506 < 5)
      v257 = 79;
    else
      v257 = 80;
    *((_QWORD *)&v513[0] + 1) = __PAIR64__(v262, v261);
    LODWORD(v513[1]) = v263;
    v259 = 5;
  }
  else
  {
    v247.i32[1] = 1;
    v248 = (int8x8_t)vceq_s32(v245, (int32x2_t)0x100000001);
    if (LOBYTE(__src[0]) == 1 || v242 == 0)
      v250 = 1;
    else
      v250 = 2;
    v251 = v495 == 1 || v497 == 0;
    v247.i32[0] = v485;
    v252 = (uint8x8_t)vcnt_s8(v247);
    v252.i16[0] = vaddlv_u8(v252);
    if (v251)
      v253 = 1;
    else
      v253 = 2;
    if (a18)
      v254 = 75;
    else
      v254 = 12;
    if (v56[2])
      v255 = 164;
    else
      v255 = 166;
    if (v56[2])
      v256 = 165;
    else
      v256 = 167;
    if (v506 >= 5)
      v257 = v256;
    else
      v257 = v255;
    if (v56[8])
      v258 = 59;
    else
      v258 = 54;
    *(_QWORD *)&v513[0] = __PAIR64__(dword_1C66162C4[((unint64_t)v252.u32[0] << v56[96]) - 1], v258);
    *((_QWORD *)&v513[0] + 1) = __PAIR64__(v253, v250);
    *(int8x8_t *)&v513[1] = vbsl_s8(v248, (int8x8_t)0x2A00000031, (int8x8_t)0x4C00000029);
    DWORD2(v513[1]) = v254;
    v259 = 7;
  }
  v264 = sub_1C4C640F8(v257, v259, v513);
  *(_QWORD *)&v513[0] = 1;
  v265 = (char *)v513 + 8;
  for (i = 8; i != 136; i += 16)
    *(_QWORD *)((char *)v513 + i) = -4096;
  *(_QWORD *)&v518 = 1;
  for (j = 8; j != 136; j += 16)
    *(_QWORD *)((char *)&v518 + j) = 0x7FFFFFFFFFFFFFFFLL;
  if (*(_BYTE *)v490 == 7)
  {
    v507 = (uint64_t)(v490[1] | ((unint64_t)v490[6] << 32)) / 8;
    v243 = v507;
    v268 = sub_1C4A20F0C((uint64_t)&v518, &v507);
    ++*(_DWORD *)(v268 + 8);
    v521 = (void **)v490;
    sub_1C4A213A0((uint64_t)v513, (uint64_t *)&v521)[1] = v243;
    LOBYTE(v243) = *(_BYTE *)a5;
  }
  if (v243 == 7)
  {
    v507 = (uint64_t)(*(unsigned int *)(a5 + 4) | ((unint64_t)*(unsigned int *)(a5 + 24) << 32)) / 8;
    v269 = v507;
    v270 = sub_1C4A20F0C((uint64_t)&v518, &v507);
    ++*(_DWORD *)(v270 + 8);
    v521 = (void **)a5;
    sub_1C4A213A0((uint64_t)v513, (uint64_t *)&v521)[1] = v269;
  }
  if (*(_BYTE *)v486 == 7)
  {
    v507 = (uint64_t)(v486[1] | ((unint64_t)v486[6] << 32)) / 8;
    v271 = v507;
    v272 = sub_1C4A20F0C((uint64_t)&v518, &v507);
    ++*(_DWORD *)(v272 + 8);
    v521 = (void **)v486;
    sub_1C4A213A0((uint64_t)v513, (uint64_t *)&v521)[1] = v271;
  }
  if (*(_BYTE *)v491 == 7)
  {
    v507 = (uint64_t)(*((unsigned int *)v491 + 1) | ((unint64_t)*((unsigned int *)v491 + 6) << 32)) / 8;
    v273 = v507;
    v274 = sub_1C4A20F0C((uint64_t)&v518, &v507);
    ++*(_DWORD *)(v274 + 8);
    v521 = (void **)v491;
    sub_1C4A213A0((uint64_t)v513, (uint64_t *)&v521)[1] = v273;
  }
  if (v500 && LOBYTE(__src[0]) == 7)
  {
    v275 = (uint64_t)(HIDWORD(__src[0]) | ((unint64_t)DWORD2(v499) << 32)) / 8;
    v507 = v275;
    v276 = sub_1C4A20F0C((uint64_t)&v518, &v507);
    ++*(_DWORD *)(v276 + 8);
    v521 = __src;
    sub_1C4A213A0((uint64_t)v513, (uint64_t *)&v521)[1] = v275;
  }
  if (v497 && v495 == 7)
  {
    v277 = (uint64_t)(DWORD1(v495) | ((unint64_t)DWORD2(v496) << 32)) / 8;
    v507 = v277;
    v278 = sub_1C4A20F0C((uint64_t)&v518, &v507);
    ++*(_DWORD *)(v278 + 8);
    v521 = (void **)&v495;
    sub_1C4A213A0((uint64_t)v513, (uint64_t *)&v521)[1] = v277;
  }
  v279 = v518;
  v280 = sub_1C4A218C8((uint64_t)v513, (uint64_t)v491);
  v281 = v513[0];
  if ((v513[0] & 1) != 0)
  {
    v282 = 8;
    v283 = (char *)v513 + 8;
  }
  else
  {
    v283 = (char *)*((_QWORD *)&v513[0] + 1);
    v282 = LODWORD(v513[1]);
  }
  if (&v283[16 * v282] == (char *)v280)
    v284 = 0;
  else
    v284 = *((_DWORD *)sub_1C4A21964((uint64_t)&v518, v280[1]) + 2);
  v285 = sub_1C4A218C8((uint64_t)v513, a5);
  if ((v281 & 1) != 0)
  {
    v286 = 8;
  }
  else
  {
    v265 = (char *)*((_QWORD *)&v513[0] + 1);
    v286 = LODWORD(v513[1]);
  }
  v287 = v279 >> 1;
  if (&v265[16 * v286] == (char *)v285)
    v288 = 0;
  else
    v288 = *((_DWORD *)sub_1C4A21964((uint64_t)&v518, v285[1]) + 2);
  if (v287 == 5)
  {
    if (v284 == 1)
    {
      v298 = (_DWORD *)((char *)v491 + 4);
      v307 = *((_DWORD *)v491 + 1);
      v308 = (*(_DWORD *)v491 >> 8) & 0xFFF;
      if (!*(_DWORD *)v491)
        v308 = 0;
      if (v308 == 2)
        goto LABEL_446;
      v309 = 1;
      if (v308 > 13)
      {
        v56 = (unsigned __int8 *)v492;
        if (v308 == 15)
        {
LABEL_446:
          v309 = 257;
LABEL_447:
          v310 = *(_QWORD *)(a1 + 64);
          v521 = (void **)v309;
LABEL_463:
          v522 = 0;
          v323 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void ***, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v310 + 32))(v310, 313, &v521, 1, 0, 0, 0);
          v304 = v324;
          LODWORD(v507) = 1;
          v508 = 0;
          v509 = (2 * v307);
          llvm::MachineInstr::addOperand(v324, v323, (const llvm::MachineOperand *)&v507);
          v306 = (uint64_t)v491;
          goto LABEL_464;
        }
        if (v308 != 14)
          goto LABEL_447;
      }
      else
      {
        v56 = (unsigned __int8 *)v492;
        if (v308 != 1)
        {
          if (v308 == 3)
            v309 = 513;
          goto LABEL_447;
        }
      }
      v309 = 129;
      goto LABEL_447;
    }
    v298 = (_DWORD *)(a5 + 4);
    v311 = *(_DWORD *)(a5 + 4);
    if (*(_DWORD *)a5)
      v312 = (*(_DWORD *)a5 >> 8) & 0xFFF;
    else
      v312 = 0;
    if (v288 == 1)
    {
      if (v312 == 2)
      {
LABEL_453:
        v313 = 257;
LABEL_454:
        v314 = *(_QWORD *)(a1 + 64);
        v521 = (void **)v313;
        v522 = 0;
        v303 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void ***, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v314 + 32))(v314, 313, &v521, 1, 0, 0, 0);
        v304 = v302;
        LODWORD(v507) = 1;
        v305 = (2 * v311);
        goto LABEL_441;
      }
      v313 = 1;
      if (v312 > 13)
      {
        v56 = (unsigned __int8 *)v492;
        if (v312 == 15)
          goto LABEL_453;
        if (v312 != 14)
          goto LABEL_454;
      }
      else
      {
        v56 = (unsigned __int8 *)v492;
        if (v312 != 1)
        {
          if (v312 == 3)
            v313 = 513;
          goto LABEL_454;
        }
      }
      v313 = 129;
      goto LABEL_454;
    }
    if (v312 == 2)
      goto LABEL_456;
    v315 = 1;
    if (v312 > 13)
    {
      v56 = (unsigned __int8 *)v492;
      if (v312 == 15)
      {
LABEL_456:
        v315 = 257;
        goto LABEL_457;
      }
      if (v312 != 14)
      {
LABEL_457:
        v316 = *(_QWORD *)(a1 + 64);
        v521 = (void **)v315;
        v522 = 0;
        v317 = 1;
        v318 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void ***, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v316 + 32))(v316, 313, &v521, 1, 0, 0, 0);
        v320 = v319;
        LODWORD(v507) = 1;
        v508 = 0;
        v509 = (2 * v311);
        llvm::MachineInstr::addOperand(v319, v318, (const llvm::MachineOperand *)&v507);
        v321 = *(_DWORD *)(*((_QWORD *)v320 + 4) + 4);
        *(_DWORD *)a5 = 0;
        *(_DWORD *)(a5 + 4) = v321;
        *(_QWORD *)(a5 + 16) = 0;
        *(_QWORD *)(a5 + 24) = 0;
        *(_QWORD *)(a5 + 8) = 0;
        v298 = (_DWORD *)((char *)v491 + 4);
        v307 = *((_DWORD *)v491 + 1);
        if (*(_DWORD *)v491)
          v322 = (*(_DWORD *)v491 >> 8) & 0xFFF;
        else
          v322 = 0;
        if (v322 == 2)
          goto LABEL_461;
        if (v322 > 13)
        {
          v56 = (unsigned __int8 *)v492;
          if (v322 == 15)
          {
LABEL_461:
            v317 = 257;
LABEL_462:
            v310 = *(_QWORD *)(a1 + 64);
            v521 = (void **)v317;
            goto LABEL_463;
          }
          if (v322 != 14)
            goto LABEL_462;
        }
        else
        {
          v56 = (unsigned __int8 *)v492;
          if (v322 != 1)
          {
            if (v322 == 3)
              v317 = 513;
            goto LABEL_462;
          }
        }
        v317 = 129;
        goto LABEL_462;
      }
    }
    else
    {
      v56 = (unsigned __int8 *)v492;
      if (v312 != 1)
      {
        if (v312 == 3)
          v315 = 513;
        goto LABEL_457;
      }
    }
    v315 = 129;
    goto LABEL_457;
  }
  if (v287 != 6)
    goto LABEL_465;
  v289 = *((_DWORD *)v491 + 1);
  v290 = (*(_DWORD *)v491 >> 8) & 0xFFF;
  if (!*(_DWORD *)v491)
    v290 = 0;
  if (v290 == 2)
    goto LABEL_434;
  v291 = 1;
  if (v290 <= 13)
  {
    v56 = (unsigned __int8 *)v492;
    if (v290 != 1)
    {
      if (v290 == 3)
        v291 = 513;
      goto LABEL_435;
    }
LABEL_733:
    v291 = 129;
    goto LABEL_435;
  }
  v56 = (unsigned __int8 *)v492;
  if (v290 == 15)
  {
LABEL_434:
    v291 = 257;
    goto LABEL_435;
  }
  if (v290 == 14)
    goto LABEL_733;
LABEL_435:
  v292 = *(_QWORD *)(a1 + 64);
  v521 = (void **)v291;
  v522 = 0;
  v293 = 1;
  v294 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void ***, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v292 + 32))(v292, 313, &v521, 1, 0, 0, 0);
  v296 = v295;
  LODWORD(v507) = 1;
  v508 = 0;
  v509 = (2 * v289);
  llvm::MachineInstr::addOperand(v295, v294, (const llvm::MachineOperand *)&v507);
  v297 = *(_DWORD *)(*((_QWORD *)v296 + 4) + 4);
  *(_DWORD *)v491 = 0;
  *((_DWORD *)v491 + 1) = v297;
  *((_QWORD *)v491 + 2) = 0;
  *((_QWORD *)v491 + 3) = 0;
  *((_QWORD *)v491 + 1) = 0;
  v298 = (_DWORD *)(a5 + 4);
  v299 = *(_DWORD *)(a5 + 4);
  if (*(_DWORD *)a5)
    v300 = (*(_DWORD *)a5 >> 8) & 0xFFF;
  else
    v300 = 0;
  if (v300 == 2)
    goto LABEL_439;
  if (v300 <= 13)
  {
    v56 = (unsigned __int8 *)v492;
    if (v300 != 1)
    {
      if (v300 == 3)
        v293 = 513;
      goto LABEL_440;
    }
    goto LABEL_736;
  }
  v56 = (unsigned __int8 *)v492;
  if (v300 != 15)
  {
    if (v300 != 14)
      goto LABEL_440;
LABEL_736:
    v293 = 129;
    goto LABEL_440;
  }
LABEL_439:
  v293 = 257;
LABEL_440:
  v301 = *(_QWORD *)(a1 + 64);
  v521 = (void **)v293;
  v522 = 0;
  v303 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void ***, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v301 + 32))(v301, 313, &v521, 1, 0, 0, 0);
  v304 = v302;
  LODWORD(v507) = 1;
  v305 = (2 * v299);
LABEL_441:
  v508 = 0;
  v509 = v305;
  llvm::MachineInstr::addOperand(v302, v303, (const llvm::MachineOperand *)&v507);
  v306 = a5;
LABEL_464:
  v325 = *(_DWORD *)(*((_QWORD *)v304 + 4) + 4);
  *(_DWORD *)v306 = 0;
  *v298 = v325;
  *(_QWORD *)(v306 + 16) = 0;
  *(_QWORD *)(v306 + 24) = 0;
  *(_QWORD *)(v306 + 8) = 0;
  LOBYTE(v279) = v518;
LABEL_465:
  if ((v279 & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)&v518 + 1), 8);
  if ((v513[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)&v513[0] + 1), 8);
  v326 = *(_QWORD **)(a1 + 64);
  v328 = sub_1C55437B8(v326, v264);
  v329 = (unint64_t *)v327;
  v330 = (unint64_t *)v326[6];
  v331 = *(_QWORD *)(v326[5] + 40);
  *(_QWORD *)(v327 + 24) = v331;
  v332 = *(_QWORD *)(v331 + 32);
  v333 = *(unsigned int *)(v327 + 40);
  if ((_DWORD)v333)
  {
    v379 = *(_QWORD *)(v327 + 32);
    v380 = *(_QWORD *)(v332 + 40);
    v381 = 32 * v333;
    do
    {
      if (!*(_BYTE *)v379)
      {
        v382 = *(unsigned int *)(v379 + 4);
        if ((int)v382 >= 0)
          v383 = (uint64_t *)(*(_QWORD *)(v380 + 272) + 8 * v382);
        else
          v383 = (uint64_t *)(*(_QWORD *)(v380 + 24) + 16 * (v382 & 0x7FFFFFFF) + 8);
        v384 = *v383;
        if (*v383)
        {
          v385 = *(_QWORD *)(v384 + 16);
          *(_QWORD *)(v384 + 16) = v379;
          *(_QWORD *)(v379 + 16) = v385;
          if ((*(_BYTE *)(v379 + 3) & 1) != 0)
          {
            *(_QWORD *)(v379 + 24) = v384;
          }
          else
          {
            *(_QWORD *)(v379 + 24) = 0;
            v383 = (uint64_t *)(v385 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v379 + 16) = v379;
          *(_QWORD *)(v379 + 24) = 0;
        }
        *v383 = v379;
      }
      v379 += 32;
      v381 -= 32;
    }
    while (v381);
  }
  v334 = *(_QWORD *)(v332 + 728);
  if (v334)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v334 + 24))(v334, v327);
  v335 = *v330 & 0xFFFFFFFFFFFFFFF8;
  *v329 = v335 | *v329 & 7;
  v329[1] = (unint64_t)v330;
  *(_QWORD *)(v335 + 8) = v329;
  *v330 = *v330 & 7 | (unint64_t)v329;
  v336 = v326[7];
  if (v336)
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v336 + 24))(v336, v329);
  *(_QWORD *)&v518 = v328;
  *((_QWORD *)&v518 + 1) = v329;
  if (*((_DWORD *)v56 + 23) == -1)
  {
    if (v56[8])
      v337 = 32;
    else
      v337 = 16;
    v338 = sub_1C603C244((uint64_t *)a1, (uint64_t)v56, v494);
    v339 = (*(uint64_t (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), v338, v56[8] == 0);
    if ((_DWORD)v338 == 1)
      v340 = (8 * v337) | 1u;
    else
      v340 = (v337 << 19) | 4u | (8 * (unsigned __int16)v338);
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 48), v340, "", 0);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 16 * (GenericVirtualRegister & 0x7FFFFFFF)) = v339 & 0xFFFFFFFFFFFFFFFBLL;
    memset((char *)v513 + 8, 0, 24);
    DWORD1(v513[0]) = GenericVirtualRegister;
    LODWORD(v513[0]) = 0x1000000;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
    LODWORD(v513[0]) = 1;
  }
  else
  {
    LODWORD(v513[0]) = 1;
  }
  *(_QWORD *)&v513[1] = 0;
  *((_QWORD *)&v513[0] + 1) = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
  v342 = v504;
  LODWORD(v513[0]) = 1;
  *((_QWORD *)&v513[0] + 1) = 0;
  *(_QWORD *)&v513[1] = v504;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
  if (*((_DWORD *)v56 + 23) != -1)
    goto LABEL_493;
  if (!v500)
    goto LABEL_485;
  if (LOBYTE(__src[0]) != 1)
  {
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)__src);
LABEL_485:
    LODWORD(v513[0]) = 1;
    *(_QWORD *)&v513[1] = 0;
    *((_QWORD *)&v513[0] + 1) = 0;
    goto LABEL_488;
  }
  LODWORD(v513[0]) = 1;
  *((_QWORD *)&v513[0] + 1) = 0;
  *(_QWORD *)&v513[1] = (unsigned __int16)v499;
LABEL_488:
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
  if (v497)
  {
    if (v495 == 1)
    {
      LODWORD(v513[0]) = 1;
      *((_QWORD *)&v513[0] + 1) = 0;
      *(_QWORD *)&v513[1] = (unsigned __int16)v496;
      goto LABEL_492;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)&v495);
  }
  LODWORD(v513[0]) = 1;
  *(_QWORD *)&v513[1] = 0;
  *((_QWORD *)&v513[0] + 1) = 0;
LABEL_492:
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
LABEL_493:
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v490);
  LODWORD(v513[0]) = 1;
  *(_QWORD *)&v513[1] = 0;
  *((_QWORD *)&v513[0] + 1) = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)a5);
  if (*(_BYTE *)a5 != 1)
  {
    LODWORD(v513[0]) = 1;
    *(_QWORD *)&v513[1] = 0;
    *((_QWORD *)&v513[0] + 1) = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
  }
  if (*((_DWORD *)v56 + 23) == -1)
  {
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v486);
    LODWORD(v513[0]) = 1;
    *(_QWORD *)&v513[1] = 0;
    *((_QWORD *)&v513[0] + 1) = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, v491);
    if (*(_BYTE *)v491 != 1)
    {
      LODWORD(v513[0]) = 1;
      *(_QWORD *)&v513[1] = 0;
      *((_QWORD *)&v513[0] + 1) = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
    }
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v501);
  LODWORD(v513[0]) = 1;
  *(_QWORD *)&v513[1] = 0;
  *((_QWORD *)&v513[0] + 1) = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
  if (*((_DWORD *)v56 + 23) != -1)
  {
    v344 = (v342 >> 35) & 7;
    if (v344 > 1)
    {
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)(a1 + 1376));
      LODWORD(v513[0]) = 1;
      *(_QWORD *)&v513[1] = 0;
      *((_QWORD *)&v513[0] + 1) = 0;
    }
    else
    {
      if ((_DWORD)v344)
        v345 = *(_QWORD *)(a1 + 1392);
      else
        v345 = 0;
      LODWORD(v513[0]) = 1;
      *((_QWORD *)&v513[0] + 1) = 0;
      *(_QWORD *)&v513[1] = v345;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
    v346 = (v342 >> 38) & 7;
    if (v346 > 1)
    {
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)(a1 + 1216));
      LODWORD(v513[0]) = 1;
      *(_QWORD *)&v513[1] = 0;
      *((_QWORD *)&v513[0] + 1) = 0;
    }
    else
    {
      if ((_DWORD)v346)
        v347 = *(_QWORD *)(a1 + 1232);
      else
        v347 = 0;
      LODWORD(v513[0]) = 1;
      *((_QWORD *)&v513[0] + 1) = 0;
      *(_QWORD *)&v513[1] = v347;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
    v348 = (v342 >> 41) & 7;
    if (v348 > 1)
    {
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)(a1 + 248));
      LODWORD(v513[0]) = 1;
      *(_QWORD *)&v513[1] = 0;
      *((_QWORD *)&v513[0] + 1) = 0;
    }
    else
    {
      if ((_DWORD)v348)
        v349 = *(_QWORD *)(a1 + 264);
      else
        v349 = 0;
      LODWORD(v513[0]) = 1;
      *((_QWORD *)&v513[0] + 1) = 0;
      *(_QWORD *)&v513[1] = v349;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v329, v328, (const llvm::MachineOperand *)v513);
  }
  if (v246 >= 5)
  {
    *(_QWORD *)&v513[0] = a1;
    *((_QWORD *)&v513[0] + 1) = v56;
    *(_QWORD *)&v513[1] = &v504;
    *((_QWORD *)&v513[1] + 1) = v503;
    v514 = &v506;
    v515 = &v505;
    v516 = a1 + 72;
    v517 = &v518;
    v350 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v350 + 40) = *(_QWORD *)(v494 + 24);
    *(_QWORD *)(v350 + 48) = v329;
    sub_1C4A209EC((uint64_t *)v513, 94, v343);
    sub_1C4A209EC((uint64_t *)v513, 95, v351);
    v352 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v352 + 40) = *(_QWORD *)(v494 + 24);
    *(_QWORD *)(v352 + 48) = v494;
  }
  *(_OWORD *)v487 = v518;
  v487[16] = 1;
  v353 = (char *)v510[1];
  if ((_DWORD)v511)
  {
    v354 = 96 * v511;
    do
    {
      v355 = *(char **)&v353[v354 - 72];
      if (&v353[v354 - 56] != v355)
        free(v355);
      v354 -= 96;
    }
    while (v354);
    v353 = (char *)v510[1];
  }
  if (v353 != (char *)&v511 + 8)
    free(v353);
}

void sub_1C4A1DA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  _OWORD *v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  int v52;
  int v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  int v58;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  __int128 v65;
  int v66;
  __int128 v67;
  int v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  __int128 v76;
  uint64_t v77;
  _BYTE v78[32];
  char v79;
  _BYTE v80[39];
  _BYTE v81[31];
  _BYTE v82[39];
  _BYTE v83[39];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  if (*(_DWORD *)(a2 + 88) == -1)
  {
    v13 = 0;
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a4);
    *(_DWORD *)v78 = -1;
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _QWORD))(*(_QWORD *)a1 + 152))(a1, v13, v78, 0);
    if (*(int *)v78 >= 0)
      v15 = v14;
    else
      v15 = 0;
    if (!(v15 | v14 ^ 1))
      v13 = 0;
  }
  if (*(_BYTE *)(a2 + 61))
  {
    *a7 = 1;
    return;
  }
  if (*(_DWORD *)(a2 + 72) != -1)
  {
    v77 = v13;
    if (*(_DWORD *)(a2 + 48) == -1)
    {
      v16 = *(_DWORD *)(a2 + 4);
      if (!v16)
        goto LABEL_30;
    }
    else
    {
      v16 = (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 224))(*(_QWORD *)(a1 + 8), a2) >> 1;
      if (!v16)
      {
LABEL_30:
        if (v77)
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 168))(v78, a1);
          v39 = *(unsigned __int8 *)(a1 + 320);
          v40 = *(_OWORD *)&v78[16];
          *(_OWORD *)(a1 + 288) = *(_OWORD *)v78;
          *(_OWORD *)(a1 + 304) = v40;
          if (!v39)
            *(_BYTE *)(a1 + 320) = 1;
          v41 = 0x200000005;
        }
        else
        {
          v41 = 5;
        }
LABEL_62:
        v53 = *(unsigned __int8 *)(a1 + 1424);
        *(_QWORD *)(a1 + 1416) = v41;
        if (!v53)
          *(_BYTE *)(a1 + 1424) = 1;
        return;
      }
    }
    v24 = 0;
    *a5 = 8;
    do
    {
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, a4, (v24 + *(_DWORD *)(a2 + 72)));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v25, a6, 0xFFFFFFFFLL);
      if (!*(_BYTE *)(a2 + 60))
      {
        v26 = *(_DWORD *)(a6 + 8);
        v27 = (_OWORD *)(*(_QWORD *)a6 + 32 * (v26 - 2));
        v28 = v27[1];
        *(_OWORD *)v78 = *v27;
        *(_OWORD *)&v78[16] = v28;
        v79 = 1;
        v29 = sub_1C4A20B14(a1 + 328, (unint64_t)v78, 1);
        v30 = *(_QWORD *)(a1 + 328) + 40 * *(unsigned int *)(a1 + 336);
        v31 = *(_QWORD *)(v29 + 32);
        v32 = *(_OWORD *)(v29 + 16);
        *(_OWORD *)v30 = *(_OWORD *)v29;
        *(_OWORD *)(v30 + 16) = v32;
        *(_QWORD *)(v30 + 32) = v31;
        ++*(_DWORD *)(a1 + 336);
        v33 = (_OWORD *)(*(_QWORD *)a6 + 32 * (v26 - 1));
        v34 = v33[1];
        *(_OWORD *)v78 = *v33;
        *(_OWORD *)&v78[16] = v34;
        v79 = 1;
        v35 = sub_1C4A20B14(a1 + 328, (unint64_t)v78, 1);
        v36 = *(_QWORD *)(a1 + 328) + 40 * *(unsigned int *)(a1 + 336);
        v37 = *(_QWORD *)(v35 + 32);
        v38 = *(_OWORD *)(v35 + 16);
        *(_OWORD *)v36 = *(_OWORD *)v35;
        *(_OWORD *)(v36 + 16) = v38;
        *(_QWORD *)(v36 + 32) = v37;
        ++*(_DWORD *)(a1 + 336);
      }
      ++v24;
    }
    while (v16 != v24);
    goto LABEL_30;
  }
  if (v13)
  {
    v56 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, a4, *(unsigned int *)(a2 + 88));
    sub_1C4AD57F8(v56, *(_QWORD *)(a1 + 48), 0x100000001, 0, (uint64_t)v78);
    if (v79)
    {
      sub_1C4AD57F8(v56, *(_QWORD *)(a1 + 48), 0, 0, (uint64_t)v83);
      LOBYTE(a7) = v78[0];
      *(_OWORD *)v81 = *(_OWORD *)&v78[1];
      *(_OWORD *)&v81[15] = *(_OWORD *)&v78[16];
      *(_OWORD *)&v82[7] = *(_OWORD *)v83;
      *(_OWORD *)&v82[23] = *(_OWORD *)&v83[16];
      *(_OWORD *)v80 = *(_OWORD *)v82;
      *(_OWORD *)&v80[16] = *(_OWORD *)&v82[16];
      *(_QWORD *)&v80[31] = *(_QWORD *)&v83[24];
      v17 = 1;
      v18 = 1;
    }
    else
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(v82, a1, v13);
      LOBYTE(a7) = 0;
      v18 = 0;
      *(_OWORD *)&v83[7] = *(_OWORD *)v82;
      *(_OWORD *)&v83[23] = *(_OWORD *)&v82[16];
      *(_OWORD *)v80 = *(_OWORD *)v83;
      *(_OWORD *)&v80[16] = *(_OWORD *)&v83[16];
      *(_QWORD *)&v80[31] = *(_QWORD *)&v82[24];
      v17 = 2;
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  v19 = *(_DWORD *)(a2 + 76);
  v20 = *(_DWORD *)(a2 + 68);
  if (v19 == -1 && v20 == -1)
  {
    if (*(_DWORD *)(a2 + 92) == -1)
    {
      if (v13)
      {
        v50 = *(unsigned __int8 *)(a1 + 320);
        v51 = *(_OWORD *)&v80[23];
        *(_OWORD *)(a1 + 288) = *(_OWORD *)&v80[7];
        *(_OWORD *)(a1 + 304) = v51;
        if (!v50)
          *(_BYTE *)(a1 + 320) = 1;
        if (v18)
        {
          v52 = *(unsigned __int8 *)(a1 + 1328);
          *(_BYTE *)(a1 + 1296) = (_BYTE)a7;
          *(_OWORD *)(a1 + 1312) = *(_OWORD *)&v81[15];
          *(_OWORD *)(a1 + 1297) = *(_OWORD *)v81;
          if (!v52)
            *(_BYTE *)(a1 + 1328) = 1;
        }
      }
      v41 = v17 << 32;
      goto LABEL_62;
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(v78, a1, 0);
    v21 = *(unsigned __int8 *)(a1 + 280);
    v22 = *(_OWORD *)&v78[16];
    *(_OWORD *)(a1 + 248) = *(_OWORD *)v78;
    *(_OWORD *)(a1 + 264) = v22;
    if (!v21)
      *(_BYTE *)(a1 + 280) = 1;
    if (!*(_BYTE *)(a1 + 1424))
      *(_BYTE *)(a1 + 1424) = 1;
    v23 = 0x100000004;
LABEL_69:
    *(_QWORD *)(a1 + 1416) = v23;
    return;
  }
  if (v20 == -1)
    v42 = v19;
  else
    v42 = v20;
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a4, v42);
  v44 = v43;
  if (*(_DWORD *)(a2 + 92) != -1)
  {
    sub_1C4AD61BC(v43, *(_QWORD *)(a1 + 48), (uint64_t)v78);
    if (v79
      && (v78[0] == 1 ? (v45 = *(_QWORD *)&v78[16] < 255) : (v45 = 0), !v45 ? (v46 = 0) : (v46 = 1), v78[0] == 7 || v46))
    {
      v54 = *(unsigned __int8 *)(a1 + 280);
      v55 = *(_OWORD *)&v78[16];
      *(_OWORD *)(a1 + 248) = *(_OWORD *)v78;
      *(_OWORD *)(a1 + 264) = v55;
      if (!v54)
        *(_BYTE *)(a1 + 280) = 1;
      v49 = 2;
    }
    else
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(v83, a1, v44);
      v47 = *(unsigned __int8 *)(a1 + 280);
      v48 = *(_OWORD *)&v83[16];
      *(_OWORD *)(a1 + 248) = *(_OWORD *)v83;
      *(_OWORD *)(a1 + 264) = v48;
      if (!v47)
        *(_BYTE *)(a1 + 280) = 1;
      v49 = 4;
    }
    v23 = v49 | (v17 << 32);
    if (!*(_BYTE *)(a1 + 1424))
      *(_BYTE *)(a1 + 1424) = 1;
    goto LABEL_69;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v43) & 1) != 0
    || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, v44))
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8)))
      goto LABEL_111;
  }
  else if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, v44) & 1) == 0
         && !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(a1, v44)
         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8)) != 2)
  {
LABEL_111:
    llvm::report_fatal_error((llvm *)"Invalid sample LOD operand for architecture", (const char *)1);
  }
  v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, a2, a4);
  sub_1C4AD57F8(v44, *(_QWORD *)(a1 + 48), 0x100000000, v57, (uint64_t)v78);
  sub_1C4AD57F8(v44, *(_QWORD *)(a1 + 48), 0, 0, (uint64_t)v83);
  if (!v79)
  {
    v62 = 2 * (v20 == -1);
    v63 = 2 * (v20 != -1);
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(v82, a1, v44);
    v64 = *(unsigned __int8 *)(a1 + 280);
    v65 = *(_OWORD *)&v82[16];
    *(_OWORD *)(a1 + 248) = *(_OWORD *)v82;
    *(_OWORD *)(a1 + 264) = v65;
    if (!v64)
      *(_BYTE *)(a1 + 280) = 1;
LABEL_91:
    v61 = 1;
    goto LABEL_92;
  }
  v58 = v78[0];
  if (v78[0] != 1 || *(_QWORD *)&v78[16] == 0)
    v60 = v57;
  else
    v60 = 1;
  if (v20 != -1 || v60)
  {
    v62 = v20 == -1;
    v63 = v20 != -1;
    v66 = *(unsigned __int8 *)(a1 + 1368);
    v67 = *(_OWORD *)&v78[16];
    *(_OWORD *)(a1 + 1336) = *(_OWORD *)v78;
    *(_OWORD *)(a1 + 1352) = v67;
    if (!v66)
      *(_BYTE *)(a1 + 1368) = 1;
    if (v58 != 7)
    {
      v75 = *(unsigned __int8 *)(a1 + 280);
      v76 = *(_OWORD *)&v83[16];
      *(_OWORD *)(a1 + 248) = *(_OWORD *)v83;
      *(_OWORD *)(a1 + 264) = v76;
      v61 = 1;
      if (!v75)
        *(_BYTE *)(a1 + 280) = 1;
      goto LABEL_92;
    }
    goto LABEL_91;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
LABEL_92:
  if (v13)
  {
    v68 = *(unsigned __int8 *)(a1 + 320);
    v69 = *(_OWORD *)&v80[23];
    *(_OWORD *)(a1 + 288) = *(_OWORD *)&v80[7];
    *(_OWORD *)(a1 + 304) = v69;
    if (!v68)
      *(_BYTE *)(a1 + 320) = 1;
    if (v18)
    {
      v70 = *(unsigned __int8 *)(a1 + 1328);
      *(_BYTE *)(a1 + 1296) = (_BYTE)a7;
      *(_OWORD *)(a1 + 1312) = *(_OWORD *)&v81[15];
      *(_OWORD *)(a1 + 1297) = *(_OWORD *)v81;
      if (!v70)
        *(_BYTE *)(a1 + 1328) = 1;
    }
  }
  if (v61)
  {
    v71 = 3;
    if (v62 == 1)
      v71 = 1;
    v72 = 4;
    if (v63 == 1)
      v72 = 2;
    if (!v62)
      v71 = v72;
    v73 = v71 | (v17 << 32);
  }
  else
  {
    v73 = v17 << 32;
  }
  v74 = *(unsigned __int8 *)(a1 + 1424);
  *(_QWORD *)(a1 + 1416) = v73;
  if (!v74)
    *(_BYTE *)(a1 + 1424) = 1;
}

void sub_1C4A1E1C8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 *v33;
  __int128 *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _OWORD v44[2];
  __int128 v45;
  __int128 v46;
  char v47;
  __int128 v48;
  __int128 v49;
  char v50;
  void *v51[2];
  __int128 v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v6 = a2[16];
  v7 = a2[20];
  if ((_DWORD)v6 == -1 && v7 == -1)
    return;
  if ((_DWORD)v6 != -1)
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3, v6);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(v51, a1, v12);
    v13 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)v51, 1);
    v14 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
    v15 = v13[1];
    *v14 = *v13;
    v14[1] = v15;
    ++*(_DWORD *)(a4 + 8);
    LODWORD(v14) = *(unsigned __int8 *)(a1 + 752);
    v16 = v52;
    *(_OWORD *)(a1 + 720) = *(_OWORD *)v51;
    *(_OWORD *)(a1 + 736) = v16;
    if (!(_DWORD)v14)
      *(_BYTE *)(a1 + 752) = 1;
    v7 = a2[20];
  }
  if (v7 == -1)
    return;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3);
  sub_1C4AD57F8(v17, *(_QWORD *)(a1 + 48), 0, 0, (uint64_t)&v48);
  if (!v50)
  {
    *(_DWORD *)(a1 + 1428) = 2;
    v27 = a2[1];
    if ((_DWORD)v27 == 1)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(&v45, a1, v17);
      v28 = a1 + 584;
      *(_OWORD *)v51 = v45;
      v52 = v46;
      v53 = 1;
      goto LABEL_20;
    }
    v51[0] = &v52;
    HIDWORD(v51[1]) = 4;
    if (v27 < 5)
    {
      v33 = &v52;
      v34 = &v52;
      if (!(_DWORD)v27)
      {
LABEL_25:
        LODWORD(v51[1]) = v27;
        (*(void (**)(uint64_t, uint64_t, __int128 *, unint64_t))(*(_QWORD *)a1 + 120))(a1, v17, v34, v27);
        v35 = (char *)v51[0];
        if (LODWORD(v51[1]))
        {
          v36 = 8 * LODWORD(v51[1]);
          do
          {
            v37 = *(_QWORD *)v35;
            v38 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)v35 + 4), *(_QWORD *)(a1 + 48));
            if (v39)
            {
              v4 = v4 & 0xFFF00000 | 1;
              LODWORD(v45) = v4;
              *((_QWORD *)&v45 + 1) = 0;
              *(_QWORD *)&v46 = v38;
            }
            else
            {
              (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(v44, a1, v37);
              v45 = v44[0];
              v46 = v44[1];
            }
            v47 = 1;
            v40 = sub_1C4A20B14(a1 + 584, (unint64_t)&v45, 1);
            v41 = *(_QWORD *)(a1 + 584) + 40 * *(unsigned int *)(a1 + 592);
            v42 = *(_QWORD *)(v40 + 32);
            v43 = *(_OWORD *)(v40 + 16);
            *(_OWORD *)v41 = *(_OWORD *)v40;
            *(_OWORD *)(v41 + 16) = v43;
            *(_QWORD *)(v41 + 32) = v42;
            ++*(_DWORD *)(a1 + 592);
            v35 += 8;
            v36 -= 8;
          }
          while (v36);
          v35 = (char *)v51[0];
        }
        if (v35 != (char *)&v52)
          free(v35);
        return;
      }
    }
    else
    {
      LODWORD(v51[1]) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v51, (uint64_t)&v52, v27, 8);
      v33 = (__int128 *)v51[0];
    }
    bzero(v33, 8 * v27);
    v34 = (__int128 *)v51[0];
    goto LABEL_25;
  }
  v18 = *(unsigned __int8 *)(a1 + 1288);
  v19 = v49;
  *(_OWORD *)(a1 + 1256) = v48;
  *(_OWORD *)(a1 + 1272) = v19;
  if (!v18)
    *(_BYTE *)(a1 + 1288) = 1;
  *(_DWORD *)(a1 + 1428) = 1;
  v20 = a2[1];
  if (v20)
  {
    v21 = v49;
    if (v20 != 1)
    {
      v22 = 0;
      do
      {
        LODWORD(v51[0]) = 1;
        v51[1] = 0;
        *(_QWORD *)&v52 = ((15 << v22) & v21) >> v22;
        v53 = 1;
        v23 = sub_1C4A20B14(a1 + 584, (unint64_t)v51, 1);
        v24 = *(_QWORD *)(a1 + 584) + 40 * *(unsigned int *)(a1 + 592);
        v25 = *(_QWORD *)(v23 + 32);
        v26 = *(_OWORD *)(v23 + 16);
        *(_OWORD *)v24 = *(_OWORD *)v23;
        *(_OWORD *)(v24 + 16) = v26;
        *(_QWORD *)(v24 + 32) = v25;
        ++*(_DWORD *)(a1 + 592);
        v22 += 4;
        --v20;
      }
      while (v20);
      return;
    }
    LODWORD(v51[0]) = 1;
    v51[1] = 0;
    *(_QWORD *)&v52 = v49;
    v53 = 1;
    v28 = a1 + 584;
LABEL_20:
    v29 = sub_1C4A20B14(v28, (unint64_t)v51, 1);
    v30 = *(_QWORD *)(a1 + 584) + 40 * *(unsigned int *)(a1 + 592);
    v31 = *(_QWORD *)(v29 + 32);
    v32 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)v30 = *(_OWORD *)v29;
    *(_OWORD *)(v30 + 16) = v32;
    *(_QWORD *)(v30 + 32) = v31;
    ++*(_DWORD *)(a1 + 592);
  }
}

void sub_1C4A1E59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  llvm::MachineFunction *v18;
  llvm::MachineInstr *v19;
  llvm::MachineInstr *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  llvm::MachineFunction *v37;
  llvm::MachineInstr *v38;
  llvm::MachineInstr *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  llvm::MachineFunction *v47;
  llvm::MachineInstr *v48;
  llvm::MachineInstr *v49;
  int v50;
  _OWORD *v51;
  _OWORD *v52;
  __int128 v53;
  _OWORD *v54;
  _OWORD *v55;
  __int128 v56;
  int v57;
  __int128 v58;
  __int128 v59;
  _DWORD *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  llvm::MachineFunction *v77;
  llvm::MachineInstr *v78;
  llvm::MachineInstr *v79;
  int v80;
  llvm::MachineFunction *v81;
  llvm::MachineInstr *v82;
  llvm::MachineInstr *v83;
  int v84;
  llvm::MachineFunction *v85;
  llvm::MachineInstr *v86;
  llvm::MachineInstr *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129[3];
  unsigned int v130;
  int v131;
  uint64_t v132[2];
  uint64_t v133;
  uint64_t v134;
  void *v135[2];
  uint64_t v136;
  void *v137[2];
  uint64_t v138;
  void *v139[2];
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  int v144;
  __int128 v145;
  __int128 v146;
  char v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v7 == -1)
  {
    if (*(_BYTE *)(a2 + 60))
    {
      v127 = *(_DWORD *)(a2 + 72);
      v134 = 257;
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 16);
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 184))(v13);
      v132[0] = a1;
      v132[1] = (uint64_t)&v133;
      v133 = v14;
      v139[0] = &v140;
      v139[1] = (void *)0x200000000;
      sub_1C4A21A04(v132, 0, *(const llvm::MachineOperand **)a4, *(unsigned int *)(a4 + 8), (uint64_t)v139);
      v16 = *(_DWORD *)v139[0];
      v15 = *((_DWORD *)v139[0] + 1);
      v131 = v15;
      if (!*(_BYTE *)(a1 + 1248))
        *(_BYTE *)(a1 + 1248) = 1;
      *(_DWORD *)(a1 + 1216) = 0;
      *(_DWORD *)(a1 + 1220) = v15;
      *(_QWORD *)(a1 + 1224) = 0;
      *(_QWORD *)(a1 + 1240) = 0;
      *(_QWORD *)(a1 + 1232) = 0;
      v17 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)&v141 = 257;
      DWORD2(v141) = 0;
      v18 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v17 + 32))(v17, 3356, &v141, 1, 0, 0, 0);
      v20 = v19;
      LODWORD(v145) = 1;
      *((_QWORD *)&v145 + 1) = 0;
      *(_QWORD *)&v146 = 0;
      llvm::MachineInstr::addOperand(v19, v18, (const llvm::MachineOperand *)&v145);
      *((_QWORD *)&v145 + 1) = 0;
      v146 = 0uLL;
      LODWORD(v145) = 0;
      DWORD1(v145) = v16;
      llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v145);
      LODWORD(v145) = 1;
      *((_QWORD *)&v145 + 1) = 0;
      *(_QWORD *)&v146 = 0;
      llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v145);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24)
                + 16 * (*(_DWORD *)(*((_QWORD *)v20 + 4) + 4) & 0x7FFFFFFF)) = &off_1E7FB1568;
      sub_1C554AE8C(v20, *(_QWORD *)(a1 + 40), *(_QWORD **)(a1 + 56));
      v21 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)&v141 = 257;
      DWORD2(v141) = 0;
      *(_QWORD *)&v145 = v18;
      *((_QWORD *)&v145 + 1) = v20;
      LODWORD(v146) = 1;
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 19, &v141, 1, &v145, 1, 0);
      v24 = v23;
      v25 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)&v141 = 257;
      DWORD2(v141) = 0;
      *(_QWORD *)&v145 = v22;
      *((_QWORD *)&v145 + 1) = v23;
      LODWORD(v146) = 1;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v25 + 32))(v25, 184, &v141, 1, &v145, 1, 0);
      v27 = v26;
      v137[0] = &v138;
      v137[1] = (void *)0x200000000;
      sub_1C4A21A04(v132, 1u, *(const llvm::MachineOperand **)a4, *(unsigned int *)(a4 + 8), (uint64_t)v137);
      v135[0] = &v136;
      v135[1] = (void *)0x200000000;
      sub_1C4A21A04(v132, 2u, *(const llvm::MachineOperand **)a4, *(unsigned int *)(a4 + 8), (uint64_t)v135);
      v28 = *(_QWORD *)(a1 + 64);
      v29 = v134;
      *(_QWORD *)&v145 = v134;
      DWORD2(v145) = 0;
      sub_1C5545FFC(v28, (unint64_t *)&v145, 0.5);
      v31 = v30;
      v32 = *(_DWORD *)v137[0];
      v33 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)&v141 = v29;
      DWORD2(v141) = 0;
      LODWORD(v145) = v32;
      LODWORD(v146) = 0;
      DWORD2(v146) = *(_DWORD *)(*(_QWORD *)(v27 + 32) + 4);
      v148 = 0;
      v149 = *(_DWORD *)(*(_QWORD *)(v30 + 32) + 4);
      v150 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, 166, &v141, 1, &v145, 3, 0);
      v35 = v34;
      v36 = *(_QWORD **)(a1 + 64);
      LODWORD(v141) = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 48), v29, "", 0);
      v37 = sub_1C5547D24(v36, 2131, (int *)&v141, 1, 0);
      v39 = v38;
      v40 = *(_DWORD *)(*(_QWORD *)(v35 + 32) + 4);
      *((_QWORD *)&v145 + 1) = 0;
      v146 = 0uLL;
      LODWORD(v145) = 0;
      DWORD1(v145) = v40;
      llvm::MachineInstr::addOperand(v38, v37, (const llvm::MachineOperand *)&v145);
      LODWORD(v39) = *(_DWORD *)(*((_QWORD *)v39 + 4) + 4);
      v41 = *(_DWORD *)v135[0];
      v42 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)&v141 = v29;
      DWORD2(v141) = 0;
      LODWORD(v145) = v41;
      LODWORD(v146) = 0;
      DWORD2(v146) = *(_DWORD *)(*(_QWORD *)(v27 + 32) + 4);
      v148 = 0;
      v149 = *(_DWORD *)(*(_QWORD *)(v31 + 32) + 4);
      v150 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 166, &v141, 1, &v145, 3, 0);
      v44 = v43;
      v45 = *(_QWORD **)(a1 + 64);
      v46 = v134;
      LODWORD(v141) = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 48), v134, "", 0);
      v47 = sub_1C5547D24(v45, 2131, (int *)&v141, 1, 0);
      v49 = v48;
      v50 = *(_DWORD *)(*(_QWORD *)(v44 + 32) + 4);
      *((_QWORD *)&v145 + 1) = 0;
      v146 = 0uLL;
      LODWORD(v145) = 0;
      DWORD1(v145) = v50;
      llvm::MachineInstr::addOperand(v48, v47, (const llvm::MachineOperand *)&v145);
      LODWORD(v44) = *(_DWORD *)(*((_QWORD *)v49 + 4) + 4);
      *(_DWORD *)(a4 + 8) = 0;
      *((_QWORD *)&v145 + 1) = 0;
      v146 = 0uLL;
      LODWORD(v145) = 0;
      DWORD1(v145) = (_DWORD)v39;
      v51 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)&v145, 1);
      v52 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
      v53 = v51[1];
      *v52 = *v51;
      v52[1] = v53;
      ++*(_DWORD *)(a4 + 8);
      *((_QWORD *)&v145 + 1) = 0;
      v146 = 0uLL;
      LODWORD(v145) = 0;
      DWORD1(v145) = v44;
      v54 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)&v145, 1);
      v55 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
      v56 = v54[1];
      *v55 = *v54;
      v55[1] = v56;
      ++*(_DWORD *)(a4 + 8);
      if (v127 != -1)
      {
        v60 = *(_DWORD **)a5;
        v61 = *(_DWORD *)(*(_QWORD *)a5 + 4);
        v62 = *(_DWORD *)(*(_QWORD *)a5 + 36);
        v63 = v60[17];
        v64 = v60[25];
        v65 = v60[33];
        v66 = v60[41];
        v145 = xmmword_1C6616250;
        LODWORD(v146) = 0;
        v130 = sub_1C4C640F8(88, 5, &v145);
        v67 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)&v145 = v46;
        DWORD2(v145) = 0;
        sub_1C5545FFC(v67, (unint64_t *)&v145, 1.0);
        v69 = *(_DWORD *)(*(_QWORD *)(v68 + 32) + 4);
        *(_QWORD *)&v141 = a1;
        *((_QWORD *)&v141 + 1) = &v130;
        *(_QWORD *)&v142 = &v134;
        *((_QWORD *)&v142 + 1) = &v133;
        v129[0] = a1;
        v129[1] = (uint64_t)&v134;
        v129[2] = (uint64_t)&v131;
        v126 = sub_1C6151A90((uint64_t *)&v141, v131, 6u, v63, v61);
        v128 = sub_1C6151A90((uint64_t *)&v141, v131, 2u, v61, v65);
        v70 = sub_1C6151A90((uint64_t *)&v141, v131, 6u, v64, v62);
        v71 = sub_1C6151A90((uint64_t *)&v141, v131, 2u, v62, v66);
        v72 = *(_DWORD *)(*(_QWORD *)(v24 + 32) + 4);
        v73 = *(_DWORD *)(*(_QWORD *)(v31 + 32) + 4);
        v74 = *(_QWORD *)(a1 + 64);
        v143 = v134;
        v144 = 0;
        LODWORD(v145) = v72;
        LODWORD(v146) = 0;
        DWORD2(v146) = v73;
        v148 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 165, &v143, 1, &v145, 2, 0);
        v76 = *(_DWORD *)(*(_QWORD *)(v75 + 32) + 4);
        v77 = sub_1C6151C64(v129, v130, 0);
        v79 = v78;
        *((_QWORD *)&v145 + 1) = 0;
        v146 = 0uLL;
        LODWORD(v145) = 0;
        DWORD1(v145) = v69;
        llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v145);
        LODWORD(v145) = 1;
        *((_QWORD *)&v145 + 1) = 0;
        *(_QWORD *)&v146 = 2;
        llvm::MachineInstr::addOperand(v79, v77, (const llvm::MachineOperand *)&v145);
        *((_QWORD *)&v145 + 1) = 0;
        v146 = 0uLL;
        LODWORD(v145) = 0;
        DWORD1(v145) = v69;
        llvm::MachineInstr::addOperand(v79, v77, (const llvm::MachineOperand *)&v145);
        LODWORD(v145) = 1;
        *((_QWORD *)&v145 + 1) = 0;
        *(_QWORD *)&v146 = 0;
        llvm::MachineInstr::addOperand(v79, v77, (const llvm::MachineOperand *)&v145);
        sub_1C554AE8C(v79, *(_QWORD *)(a1 + 40), *(_QWORD **)(a1 + 56));
        v80 = *(_DWORD *)(*((_QWORD *)v79 + 4) + 4);
        v81 = sub_1C6151C64(v129, v130, 5u);
        v83 = v82;
        *((_QWORD *)&v145 + 1) = 0;
        v146 = 0uLL;
        LODWORD(v145) = 0;
        DWORD1(v145) = v80;
        llvm::MachineInstr::addOperand(v82, v81, (const llvm::MachineOperand *)&v145);
        LODWORD(v145) = 1;
        *((_QWORD *)&v145 + 1) = 0;
        *(_QWORD *)&v146 = 2;
        llvm::MachineInstr::addOperand(v83, v81, (const llvm::MachineOperand *)&v145);
        *((_QWORD *)&v145 + 1) = 0;
        v146 = 0uLL;
        LODWORD(v145) = 0;
        DWORD1(v145) = v80;
        llvm::MachineInstr::addOperand(v83, v81, (const llvm::MachineOperand *)&v145);
        LODWORD(v145) = 1;
        *((_QWORD *)&v145 + 1) = 0;
        *(_QWORD *)&v146 = 0;
        llvm::MachineInstr::addOperand(v83, v81, (const llvm::MachineOperand *)&v145);
        sub_1C554AE8C(v83, *(_QWORD *)(a1 + 40), *(_QWORD **)(a1 + 56));
        v84 = *(_DWORD *)(*((_QWORD *)v83 + 4) + 4);
        v85 = sub_1C6151C64(v129, v130, 2u);
        v87 = v86;
        *((_QWORD *)&v145 + 1) = 0;
        v146 = 0uLL;
        LODWORD(v145) = 0;
        DWORD1(v145) = v69;
        llvm::MachineInstr::addOperand(v86, v85, (const llvm::MachineOperand *)&v145);
        LODWORD(v145) = 1;
        *((_QWORD *)&v145 + 1) = 0;
        *(_QWORD *)&v146 = 0;
        llvm::MachineInstr::addOperand(v87, v85, (const llvm::MachineOperand *)&v145);
        *((_QWORD *)&v145 + 1) = 0;
        v146 = 0uLL;
        LODWORD(v145) = 0;
        DWORD1(v145) = v69;
        llvm::MachineInstr::addOperand(v87, v85, (const llvm::MachineOperand *)&v145);
        LODWORD(v145) = 1;
        *((_QWORD *)&v145 + 1) = 0;
        *(_QWORD *)&v146 = 2;
        llvm::MachineInstr::addOperand(v87, v85, (const llvm::MachineOperand *)&v145);
        sub_1C554AE8C(v87, *(_QWORD *)(a1 + 40), *(_QWORD **)(a1 + 56));
        LODWORD(v85) = *(_DWORD *)(*((_QWORD *)v87 + 4) + 4);
        v88 = *(_QWORD *)(a1 + 64);
        v143 = v134;
        v144 = 0;
        LODWORD(v145) = v126;
        LODWORD(v146) = 0;
        DWORD2(v146) = v76;
        v148 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 165, &v143, 1, &v145, 2, 0);
        LODWORD(v87) = *(_DWORD *)(*(_QWORD *)(v89 + 32) + 4);
        v90 = *(_QWORD *)(a1 + 64);
        v143 = v134;
        v144 = 0;
        LODWORD(v145) = v70;
        LODWORD(v146) = 0;
        DWORD2(v146) = v76;
        v148 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v90 + 32))(v90, 165, &v143, 1, &v145, 2, 0);
        v92 = *(_DWORD *)(*(_QWORD *)(v91 + 32) + 4);
        v93 = *(_QWORD *)(a1 + 64);
        v143 = v134;
        v144 = 0;
        LODWORD(v145) = v128;
        LODWORD(v146) = 0;
        DWORD2(v146) = v76;
        v148 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v93 + 32))(v93, 165, &v143, 1, &v145, 2, 0);
        v95 = *(_DWORD *)(*(_QWORD *)(v94 + 32) + 4);
        v96 = *(_QWORD *)(a1 + 64);
        v143 = v134;
        v144 = 0;
        LODWORD(v145) = v71;
        LODWORD(v146) = 0;
        DWORD2(v146) = v76;
        v148 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v96 + 32))(v96, 165, &v143, 1, &v145, 2, 0);
        v98 = *(_DWORD *)(*(_QWORD *)(v97 + 32) + 4);
        v99 = *(_QWORD *)(a1 + 64);
        v143 = v134;
        v144 = 0;
        LODWORD(v145) = (_DWORD)v87;
        LODWORD(v146) = 0;
        DWORD2(v146) = v84;
        v148 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v99 + 32))(v99, 165, &v143, 1, &v145, 2, 0);
        v101 = *(_DWORD *)(*(_QWORD *)(v100 + 32) + 4);
        v102 = *(_QWORD *)(a1 + 64);
        v143 = v134;
        v144 = 0;
        LODWORD(v145) = v92;
        LODWORD(v146) = 0;
        DWORD2(v146) = (_DWORD)v85;
        v148 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v102
                                                                                                  + 32))(v102, 165, &v143, 1, &v145, 2, 0);
        v104 = *(_DWORD *)(*(_QWORD *)(v103 + 32) + 4);
        v105 = *(_QWORD *)(a1 + 64);
        v143 = v134;
        v144 = 0;
        LODWORD(v145) = v95;
        LODWORD(v146) = 0;
        DWORD2(v146) = v84;
        v148 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v105
                                                                                                  + 32))(v105, 165, &v143, 1, &v145, 2, 0);
        LODWORD(v87) = *(_DWORD *)(*(_QWORD *)(v106 + 32) + 4);
        v107 = *(_QWORD *)(a1 + 64);
        v143 = v134;
        v144 = 0;
        LODWORD(v145) = v98;
        LODWORD(v146) = 0;
        DWORD2(v146) = (_DWORD)v85;
        v148 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v107
                                                                                                  + 32))(v107, 165, &v143, 1, &v145, 2, 0);
        v109 = *(_DWORD *)(*(_QWORD *)(v108 + 32) + 4);
        LODWORD(v145) = 0;
        DWORD1(v145) = v101;
        v146 = 0uLL;
        *((_QWORD *)&v145 + 1) = 0;
        v147 = 1;
        v110 = sub_1C4A20B14(a1 + 328, (unint64_t)&v145, 1);
        v111 = *(_QWORD *)(a1 + 328) + 40 * *(unsigned int *)(a1 + 336);
        v112 = *(_QWORD *)(v110 + 32);
        v113 = *(_OWORD *)(v110 + 16);
        *(_OWORD *)v111 = *(_OWORD *)v110;
        *(_OWORD *)(v111 + 16) = v113;
        *(_QWORD *)(v111 + 32) = v112;
        ++*(_DWORD *)(a1 + 336);
        LODWORD(v145) = 0;
        DWORD1(v145) = v104;
        v146 = 0uLL;
        *((_QWORD *)&v145 + 1) = 0;
        v147 = 1;
        v114 = sub_1C4A20B14(a1 + 328, (unint64_t)&v145, 1);
        v115 = *(_QWORD *)(a1 + 328) + 40 * *(unsigned int *)(a1 + 336);
        v116 = *(_QWORD *)(v114 + 32);
        v117 = *(_OWORD *)(v114 + 16);
        *(_OWORD *)v115 = *(_OWORD *)v114;
        *(_OWORD *)(v115 + 16) = v117;
        *(_QWORD *)(v115 + 32) = v116;
        ++*(_DWORD *)(a1 + 336);
        LODWORD(v145) = 0;
        DWORD1(v145) = (_DWORD)v87;
        v146 = 0uLL;
        *((_QWORD *)&v145 + 1) = 0;
        v147 = 1;
        v118 = sub_1C4A20B14(a1 + 328, (unint64_t)&v145, 1);
        v119 = *(_QWORD *)(a1 + 328) + 40 * *(unsigned int *)(a1 + 336);
        v120 = *(_QWORD *)(v118 + 32);
        v121 = *(_OWORD *)(v118 + 16);
        *(_OWORD *)v119 = *(_OWORD *)v118;
        *(_OWORD *)(v119 + 16) = v121;
        *(_QWORD *)(v119 + 32) = v120;
        ++*(_DWORD *)(a1 + 336);
        LODWORD(v145) = 0;
        DWORD1(v145) = v109;
        *((_QWORD *)&v145 + 1) = 0;
        v146 = 0uLL;
        v147 = 1;
        v122 = sub_1C4A20B14(a1 + 328, (unint64_t)&v145, 1);
        v123 = *(_QWORD *)(a1 + 328) + 40 * *(unsigned int *)(a1 + 336);
        v124 = *(_QWORD *)(v122 + 32);
        v125 = *(_OWORD *)(v122 + 16);
        *(_OWORD *)v123 = *(_OWORD *)v122;
        *(_OWORD *)(v123 + 16) = v125;
        *(_QWORD *)(v123 + 32) = v124;
        ++*(_DWORD *)(a1 + 336);
      }
      if (v135[0] != &v136)
        free(v135[0]);
      if (v137[0] != &v138)
        free(v137[0]);
      if (v139[0] != &v140)
        free(v139[0]);
    }
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3, v7);
    v9 = v8;
    v10 = *(_QWORD *)(a1 + 48);
    if (*(_DWORD *)(a2 + 92) == -1)
      sub_1C4AD57F8(v8, v10, 0, 0, (uint64_t)&v145);
    else
      sub_1C4AD61BC(v8, v10, (uint64_t)&v145);
    if (v147)
    {
      v57 = *(unsigned __int8 *)(a1 + 1248);
      v58 = v145;
      v59 = v146;
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 168))(&v141, a1, v9);
      v57 = *(unsigned __int8 *)(a1 + 1248);
      v58 = v141;
      v59 = v142;
    }
    *(_OWORD *)(a1 + 1216) = v58;
    *(_OWORD *)(a1 + 1232) = v59;
    if (!v57)
      *(_BYTE *)(a1 + 1248) = 1;
  }
}

uint64_t sub_1C4A1F250(uint64_t result, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t VRegDef;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;

  v3 = a3;
  v4 = result;
  if ((a3 & 0x80000000) == 0)
    goto LABEL_20;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (v6 && ((*(_BYTE *)(v6 + 3) & 1) != 0 || (v6 = *(_QWORD *)(v6 + 24)) != 0 && (*(_BYTE *)(v6 + 3) & 1) != 0))
    VRegDef = *(_QWORD *)(v6 + 8);
  else
    VRegDef = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(VRegDef + 24) + 32);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 184))(*(_QWORD *)(v8 + 16));
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 176))(*(_QWORD *)(v8 + 16));
  v11 = v10;
  v12 = *(_DWORD *)(*(_QWORD *)(VRegDef + 32) + 4);
  if (v12 - 1 <= 0x3FFFFFFE)
    result = *(unsigned int *)(*(_QWORD *)(v10 + 264)
                             + 24
                             * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v9, v12, v10) + 24)
                              + *(_DWORD *)(v11 + 272)
                              * ((*(_QWORD *)(v11 + 248) - *(_QWORD *)(v11 + 240)) >> 3)));
  else
    result = llvm::TargetRegisterInfo::getRegSizeInBits(v10, v12, a2);
  v13 = **(unsigned __int16 **)(VRegDef + 16);
  if (v13 == 19)
  {
    while (1)
    {
      v15 = *(_QWORD *)(VRegDef + 32);
      if ((*(_DWORD *)(v15 + 32) & 0xFFF00) != 0)
        goto LABEL_20;
      v3 = *(_DWORD *)(v15 + 36);
      if ((v3 & 0x80000000) == 0)
        goto LABEL_20;
      v16 = result;
      VRegDef = llvm::MachineRegisterInfo::getVRegDef(a2, *(_DWORD *)(v15 + 36));
      v13 = **(unsigned __int16 **)(VRegDef + 16);
      result = v16;
      if (v13 != 19)
        goto LABEL_12;
    }
  }
  if ((unint64_t)v3 >> 31)
LABEL_12:
    v14 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  else
    v14 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  v17 = *v14;
  if (!v17
    || (*(_BYTE *)(v17 + 3) & 1) == 0 && ((v17 = *(_QWORD *)(v17 + 24)) == 0 || (*(_BYTE *)(v17 + 3) & 1) == 0)
    || (v20 = *(_QWORD *)(v17 + 8)) == 0
    || **(_WORD **)(v20 + 16) != 313
    || (v21 = *(_QWORD *)(v20 + 32), *(_BYTE *)(v21 + 32) != 1))
  {
    if (v13 == 119 && (_DWORD)result == 16)
    {
      result = sub_1C4A1F538(a2, *(_DWORD *)(*(_QWORD *)(VRegDef + 32) + 36));
      if (v25)
      {
        if (result >= 0)
          v26 = result;
        else
          v26 = result + 1;
        v27 = v26 >> 1;
        v28 = HIDWORD(v27);
        v29 = 263;
        goto LABEL_40;
      }
    }
    else if (v13 == 76 && (_DWORD)result == 64)
    {
      v30 = *(_QWORD *)(VRegDef + 32);
      result = sub_1C4A1F538(a2, *(_DWORD *)(v30 + 36));
      if (v31)
      {
        v32 = result;
        result = sub_1C4A1F538(a2, *(_DWORD *)(v30 + 68));
        if (v33)
        {
          if ((v32 & 7) == 0 && v32 + 4 == result)
          {
            if (v32 >= 0)
              v34 = v32;
            else
              v34 = v32 + 1;
            v27 = v34 >> 1;
            v28 = HIDWORD(v27);
            v29 = 775;
LABEL_40:
            *(_DWORD *)v4 = v29;
            *(_DWORD *)(v4 + 4) = v27;
            *(_QWORD *)(v4 + 8) = 0;
            *(_DWORD *)(v4 + 16) = 64;
            *(_DWORD *)(v4 + 24) = v28;
            v19 = 1;
            goto LABEL_21;
          }
        }
      }
    }
LABEL_20:
    v19 = 0;
    *(_BYTE *)v4 = 0;
    goto LABEL_21;
  }
  v22 = *(_QWORD *)(v21 + 48) / 2;
  v23 = ((result + 7) >> 3) - 2;
  if (v23 > 6)
    v24 = 7;
  else
    v24 = dword_1C66162E4[v23];
  v35 = HIDWORD(v22);
  *(_DWORD *)v4 = v24;
  *(_DWORD *)(v4 + 4) = v22;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 64;
  v19 = 1;
  *(_DWORD *)(v4 + 24) = v35;
LABEL_21:
  *(_BYTE *)(v4 + 32) = v19;
  return result;
}

unint64_t sub_1C4A1F538(uint64_t a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;

  if ((a2 & 0x80000000) != 0)
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v2 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v3 = *v2;
  if (!v3)
    goto LABEL_5;
  if ((*(_BYTE *)(v3 + 3) & 1) == 0)
  {
    v3 = *(_QWORD *)(v3 + 24);
    if (!v3)
      goto LABEL_5;
    if ((*(_BYTE *)(v3 + 3) & 1) == 0)
    {
LABEL_14:
      v3 = 0;
      goto LABEL_5;
    }
  }
  v3 = *(_QWORD *)(v3 + 8);
  if (v3)
  {
    if (**(_WORD **)(v3 + 16) == 313)
    {
      v6 = *(_QWORD *)(v3 + 32);
      if (*(_BYTE *)(v6 + 32) == 1)
      {
        v3 = *(_QWORD *)(v6 + 48);
        v4 = v3 & 0xFFFFFFFFFFFFFF00;
        v3 = v3;
        return v4 | v3;
      }
    }
    goto LABEL_14;
  }
LABEL_5:
  v4 = 0;
  return v4 | v3;
}

void sub_1C4A1F5D0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  const void **v22;
  BOOL v23;
  uint64_t v24;
  llvm::MachineFunction *v25;
  llvm::MachineFunction *v26;
  _DWORD *v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  int *v38;
  char *v39;
  int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v60;
  int v62;
  unsigned int v63;
  uint64_t v64;
  int IncompleteVirtualRegister;
  uint64_t v66;
  int v67;
  __int128 *v68;
  void (**v69)(__int128 *);
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  const llvm::MachineOperand *v82;
  const llvm::MachineOperand *v83;
  const llvm::MachineOperand *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  int64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  char v103;
  uint64_t v104;
  char v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  char *v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int RegSizeInBits;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unsigned int v150;
  void **v151;
  void (**v152)(void **);
  uint64_t v153;
  void *v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int *v164;
  uint64_t v165;
  int *v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int *v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  _DWORD v187[2];
  _BYTE v188[7];
  uint64_t v189;
  int v190;
  _QWORD v191[2];
  int v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  int v197;
  void **v198;
  void *v199;
  uint64_t v200;
  _BYTE v201[32];
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  unint64_t v207[2];
  char v208;
  void *v209;
  uint64_t v210;
  unint64_t v211[2];
  char v212;
  uint64_t v213;

  v178 = 0;
  v6 = 0;
  v213 = *MEMORY[0x1E0C80C00];
  v199 = v201;
  v200 = 0x800000000;
  v179 = *(_QWORD *)(a4[1] + 16);
  while (1)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 16);
    v9 = v7;
    if (v8 >= 2)
    {
      v10 = v7 + 96;
      v11 = 96 * v8 - 96;
      v9 = *(_QWORD *)(a2 + 8);
      do
      {
        if (*(_DWORD *)(v9 + 4) < *(_DWORD *)(v10 + 4))
          v9 = v10;
        v10 += 96;
        v11 -= 96;
      }
      while (v11);
    }
    v12 = v7 + 96 * v8;
    v13 = v9 == v12 ? 0 : *(_DWORD *)(v9 + 4) + 1;
    if (v6 >= v13)
      break;
    v195 = &v197;
    v196 = 0x800000000;
    if (!(_DWORD)v8)
      goto LABEL_36;
    v14 = 0;
    v15 = 96 * v8;
    do
    {
      if (*(_DWORD *)(v7 + 4) != v6)
        goto LABEL_19;
      v16 = sub_1C4A20CD0((uint64_t)&v195, v7, 1);
      v17 = (char *)v195 + 96 * v196;
      v18 = *(_OWORD *)v16;
      *((_QWORD *)v17 + 2) = *(_QWORD *)(v16 + 16);
      *(_OWORD *)v17 = v18;
      v19 = v17 + 40;
      *((_QWORD *)v17 + 4) = 0x200000000;
      *((_QWORD *)v17 + 3) = v17 + 40;
      v20 = (uint64_t)(v17 + 24);
      v21 = *(unsigned int *)(v16 + 32);
      v22 = (const void **)(v16 + 24);
      if ((_DWORD)v21)
        v23 = v20 == (_QWORD)v22;
      else
        v23 = 1;
      if (!v23)
      {
        if (v21 < 3)
        {
          v24 = *(unsigned int *)(v16 + 32);
          goto LABEL_23;
        }
        *(_DWORD *)(v20 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v20, v20 + 16, v21, 28);
        v24 = *(unsigned int *)(v16 + 32);
        if ((_DWORD)v24)
        {
          v19 = *(void **)v20;
LABEL_23:
          memcpy(v19, *v22, 28 * v24);
        }
        *(_DWORD *)(v20 + 8) = v21;
      }
      v14 = v196 + 1;
      LODWORD(v196) = v196 + 1;
LABEL_19:
      v7 += 96;
      v15 -= 96;
    }
    while (v15);
    if (!v14)
    {
LABEL_36:
      if (!(_DWORD)v178)
      {
        v209 = (void *)257;
        LODWORD(v210) = 0;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*a4 + 32))(a4, 68, &v209, 1, 0, 0, 0);
        HIDWORD(v178) = *(_DWORD *)(*(_QWORD *)(v33 + 32) + 4);
      }
      v34 = v200;
      v35 = HIDWORD(v200);
      LODWORD(v178) = 1;
      LODWORD(v25) = HIDWORD(v178);
      goto LABEL_198;
    }
    v181 = v14;
    v25 = (llvm::MachineFunction *)(96 * v14);
    v26 = v25;
    v27 = v195;
    while (2)
    {
      if ((*v27 - 1) <= 1)
      {
        v36 = 0;
        v37 = 0;
        v180 = v6;
        while (1)
        {
          v38 = (int *)((char *)v195 + 96 * v36);
          if (*v38)
            break;
          *(_QWORD *)&v202 = 257;
          DWORD2(v202) = 0;
          sub_1C4C91810(a3, *((_DWORD *)v195 + 24 * v36 + 5), (uint64_t)&v209);
          LODWORD(v205) = HIDWORD(v209);
          LODWORD(v207[0]) = 0;
          (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*a4 + 32))(a4, 118, &v202, 1, &v205, 1, 0);
          LODWORD(v25) = *(_DWORD *)(*(_QWORD *)(v53 + 32) + 4);
LABEL_114:
          ++v36;
          v37 = 1;
          if (v36 == v181)
            goto LABEL_197;
        }
        v39 = (char *)v195 + 96 * v36;
        LODWORD(v182) = 0;
        HIDWORD(v182) = (_DWORD)v25;
        v184 = 0;
        v185 = 0;
        v183 = 0;
        v186 = v37;
        v187[0] = *(_DWORD *)v188;
        *(_DWORD *)((char *)v187 + 3) = *(_DWORD *)&v188[3];
        v40 = *v38;
        v192 = 1;
        v193 = 0;
        v194 = 0;
        LOBYTE(v209) = 0;
        v212 = 0;
        LOBYTE(v205) = 0;
        v208 = 0;
        v43 = *((_QWORD *)v39 + 3);
        v42 = v39 + 24;
        v41 = v43;
        v191[0] = &v209;
        v191[1] = &v205;
        v44 = *((unsigned int *)v42 + 2);
        if ((_DWORD)v44)
        {
          v45 = 28 * v44;
          v46 = (_BYTE *)(v41 + 24);
          do
          {
            if (*v46)
            {
              sub_1C4C91810(a3, *((_DWORD *)v46 - 1), (uint64_t)&v202);
            }
            else
            {
              LOBYTE(v202) = 0;
              LOBYTE(v204) = 0;
            }
            v47 = v191[*((unsigned int *)v46 - 5)];
            v48 = v204;
            v49 = v203;
            *(_OWORD *)v47 = v202;
            *(_OWORD *)(v47 + 16) = v49;
            *(_QWORD *)(v47 + 32) = v48;
            v46 += 28;
            v45 -= 28;
          }
          while (v45);
          v50 = *(_QWORD *)(a4[1] + 40);
          if (v212)
          {
            if (!(_BYTE)v209)
            {
              v93 = sub_1C554C050(SHIDWORD(v209), v50);
              if (v94)
              {
                if (v93 <= 255)
                {
                  LODWORD(v209) = 1;
                  v210 = 0;
                  v211[0] = v93;
                  if (!v212)
                    v212 = 1;
                }
              }
            }
            if (v209 == 1 && (uint64_t)v211[0] >= 256)
            {
              *(_QWORD *)&v202 = 129;
              DWORD2(v202) = 0;
              sub_1C5544694((uint64_t)a4, (unint64_t *)&v202, v211[0]);
              v52 = *(_DWORD *)(*(_QWORD *)(v51 + 32) + 4);
              if (!v212)
                v212 = 1;
              LODWORD(v209) = 0;
              HIDWORD(v209) = v52;
              v211[0] = 0;
              v211[1] = 0;
              v210 = 0;
            }
          }
        }
        else
        {
          v50 = *(_QWORD *)(a4[1] + 40);
        }
        if (v208)
        {
          if (!(_BYTE)v205)
          {
            v89 = sub_1C554C050(SHIDWORD(v205), v50);
            if (v90)
            {
              if (v89 <= 255)
              {
                LODWORD(v205) = 1;
                v206 = 0;
                v207[0] = v89;
                if (!v208)
                  v208 = 1;
              }
            }
          }
          if (v205 == 1 && (uint64_t)v207[0] >= 256)
          {
            *(_QWORD *)&v202 = 129;
            DWORD2(v202) = 0;
            sub_1C5544694((uint64_t)a4, (unint64_t *)&v202, v207[0]);
            v55 = *(_DWORD *)(*(_QWORD *)(v54 + 32) + 4);
            if (!v208)
              v208 = 1;
            LODWORD(v205) = 0;
            HIDWORD(v205) = v55;
            v207[0] = 0;
            v207[1] = 0;
            v206 = 0;
          }
        }
        if (v186)
        {
          if (!(_BYTE)v182)
          {
            v91 = sub_1C554C050(SHIDWORD(v182), v50);
            if (v92)
            {
              if (v91 <= 255)
              {
                LODWORD(v182) = 1;
                v183 = 0;
                v184 = v91;
                if (!v186)
                  v186 = 1;
              }
            }
          }
          if (v182 == 1 && (uint64_t)v184 >= 256)
          {
            *(_QWORD *)&v202 = 129;
            DWORD2(v202) = 0;
            sub_1C5544694((uint64_t)a4, (unint64_t *)&v202, v184);
            v57 = *(_DWORD *)(*(_QWORD *)(v56 + 32) + 4);
            if (!v186)
              v186 = 1;
            LODWORD(v182) = 0;
            HIDWORD(v182) = v57;
            v184 = 0;
            v185 = 0;
            v183 = 0;
          }
        }
        switch(v40)
        {
          case 1:
            v58 = 120;
            break;
          case 2:
            v58 = 119;
            break;
          case 0:
            llvm::report_fatal_error((llvm *)"Expected a pack kind", (const char *)1);
          default:
            v58 = 0;
            break;
        }
        if (v205 == 1 || v208 == 0)
          v60 = 1;
        else
          v60 = 2;
        if (v209 == 1 || v212 == 0)
          v62 = 1;
        else
          v62 = 2;
        LODWORD(v202) = 0;
        *(_QWORD *)((char *)&v202 + 4) = __PAIR64__(v60, v62);
        HIDWORD(v202) = v186 == 0;
        v63 = sub_1C4C640F8(v58, 4, &v202);
        v64 = a4[3];
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v64, "", 0);
        *(_QWORD *)(*(_QWORD *)(v64 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FADAE8;
        v66 = *(_QWORD *)(v64 + 8);
        if (v66)
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66);
        *(_QWORD *)&v202 = &off_1E8131718;
        *((_QWORD *)&v202 + 1) = v179;
        *((_QWORD *)&v203 + 1) = &v202;
        v67 = sub_1C4C0B384(&v202);
        v68 = (__int128 *)*((_QWORD *)&v203 + 1);
        if (*((__int128 **)&v203 + 1) == &v202)
        {
          v69 = (void (**)(__int128 *))(v202 + 32);
          v68 = &v202;
          goto LABEL_92;
        }
        if (*((_QWORD *)&v203 + 1))
        {
          v69 = (void (**)(__int128 *))(**((_QWORD **)&v203 + 1) + 40);
LABEL_92:
          (*v69)(v68);
        }
        v70 = sub_1C4C9782C((uint64_t *)v42, v67);
        v72 = v71;
        v25 = sub_1C55437B8(a4, v63);
        v74 = (unint64_t *)v73;
        v75 = (unint64_t *)a4[6];
        v76 = *(_QWORD *)(a4[5] + 40);
        *(_QWORD *)(v73 + 24) = v76;
        v77 = *(_QWORD *)(v76 + 32);
        v78 = *(unsigned int *)(v73 + 40);
        if ((_DWORD)v78)
        {
          v95 = *(_QWORD *)(v73 + 32);
          v96 = *(_QWORD *)(v77 + 40);
          v97 = 32 * v78;
          do
          {
            if (!*(_BYTE *)v95)
            {
              v98 = *(unsigned int *)(v95 + 4);
              if ((int)v98 >= 0)
                v99 = (uint64_t *)(*(_QWORD *)(v96 + 272) + 8 * v98);
              else
                v99 = (uint64_t *)(*(_QWORD *)(v96 + 24) + 16 * (v98 & 0x7FFFFFFF) + 8);
              v100 = *v99;
              if (*v99)
              {
                v101 = *(_QWORD *)(v100 + 16);
                *(_QWORD *)(v100 + 16) = v95;
                *(_QWORD *)(v95 + 16) = v101;
                if ((*(_BYTE *)(v95 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v95 + 24) = v100;
                }
                else
                {
                  *(_QWORD *)(v95 + 24) = 0;
                  v99 = (uint64_t *)(v101 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v95 + 16) = v95;
                *(_QWORD *)(v95 + 24) = 0;
              }
              *v99 = v95;
            }
            v95 += 32;
            v97 -= 32;
          }
          while (v97);
        }
        v79 = *(_QWORD *)(v77 + 728);
        if (v79)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v79 + 24))(v79, v73);
        v80 = *v75 & 0xFFFFFFFFFFFFFFF8;
        *v74 = v80 | *v74 & 7;
        v74[1] = (unint64_t)v75;
        *(_QWORD *)(v80 + 8) = v74;
        *v75 = *v75 & 7 | (unint64_t)v74;
        v81 = a4[7];
        if (v81)
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v81 + 24))(v81, v74);
        *((_QWORD *)&v202 + 1) = 0;
        v203 = 0uLL;
        DWORD1(v202) = IncompleteVirtualRegister;
        LODWORD(v202) = 0x1000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v25, (const llvm::MachineOperand *)&v202);
        LODWORD(v202) = 1;
        *((_QWORD *)&v202 + 1) = 0;
        *(_QWORD *)&v203 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v25, (const llvm::MachineOperand *)&v202);
        LODWORD(v202) = 1;
        *((_QWORD *)&v202 + 1) = 0;
        *(_QWORD *)&v203 = (v70 >> 28) & 0xFF0 | v70 | ((unint64_t)v72 << 9) | (v72 >> 19) & 0x1FE000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v25, (const llvm::MachineOperand *)&v202);
        if (v212)
        {
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v25, (const llvm::MachineOperand *)&v209);
          if (v209 != 1)
          {
            LODWORD(v202) = 1;
            *((_QWORD *)&v202 + 1) = 0;
            *(_QWORD *)&v203 = 0;
            v82 = (const llvm::MachineOperand *)&v202;
            goto LABEL_102;
          }
        }
        else
        {
          v82 = (const llvm::MachineOperand *)&v192;
LABEL_102:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v25, v82);
        }
        if (v208)
        {
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v25, (const llvm::MachineOperand *)&v205);
          if (v205 != 1)
          {
            LODWORD(v202) = 1;
            *((_QWORD *)&v202 + 1) = 0;
            *(_QWORD *)&v203 = 0;
            v83 = (const llvm::MachineOperand *)&v202;
            goto LABEL_107;
          }
        }
        else
        {
          v83 = (const llvm::MachineOperand *)&v192;
LABEL_107:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v25, v83);
        }
        if (v186)
        {
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v25, (const llvm::MachineOperand *)&v182);
          if (v182 != 1)
          {
            LODWORD(v202) = 1;
            *((_QWORD *)&v202 + 1) = 0;
            *(_QWORD *)&v203 = 0;
            v84 = (const llvm::MachineOperand *)&v202;
            goto LABEL_112;
          }
        }
        else
        {
          v84 = (const llvm::MachineOperand *)&v192;
LABEL_112:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v74, v25, v84);
        }
        v85 = a4[1];
        (*(void (**)(_QWORD))(**(_QWORD **)(v85 + 16) + 184))(*(_QWORD *)(v85 + 16));
        v86 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v85 + 16) + 104))(*(_QWORD *)(v85 + 16));
        v87 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v85 + 16) + 176))(*(_QWORD *)(v85 + 16));
        sub_1C554AE8C(v74, v86, v87);
        v189 = 257;
        v190 = 0;
        *(_QWORD *)&v202 = v25;
        *((_QWORD *)&v202 + 1) = v74;
        LODWORD(v203) = 1;
        (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*a4 + 32))(a4, 19, &v189, 1, &v202, 1, 0);
        LODWORD(v25) = *(_DWORD *)(*(_QWORD *)(v88 + 32) + 4);
        v6 = v180;
        goto LABEL_114;
      }
      v27 += 24;
      v26 = (llvm::MachineFunction *)((char *)v26 - 96);
      if (v26)
        continue;
      break;
    }
    v205 = v207;
    v206 = 0x200000000;
    v28 = (int *)((char *)v195 + 20);
    do
    {
      v29 = *v28;
      v28 += 24;
      sub_1C4C91810(a3, v29, (uint64_t)&v209);
      v30 = HIDWORD(v209);
      v31 = v206;
      if (v206 >= (unint64_t)HIDWORD(v206))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v205, (uint64_t)v207, v206 + 1, 4);
        v31 = v206;
      }
      *((_DWORD *)v205 + v31) = v30;
      v32 = v206 + 1;
      LODWORD(v206) = v206 + 1;
      v25 = (llvm::MachineFunction *)((char *)v25 - 96);
    }
    while (v25);
    if ((_DWORD)v196 == 1 && *((_DWORD *)v195 + 4) == 16 && *((_DWORD *)v195 + 3) == 16)
    {
      v209 = (void *)129;
      LODWORD(v210) = 0;
      sub_1C5544694((uint64_t)a4, (unint64_t *)&v209, 0);
      LODWORD(v209) = *(_DWORD *)(*(_QWORD *)(v142 + 32) + 4);
      sub_1C6151988((uint64_t)&v205, (uint64_t)v205, (int *)&v209);
      v32 = v206;
    }
    v102 = v205;
    if (v32 == 2)
    {
      v103 = 0;
      v104 = 0;
      do
      {
        v105 = v103;
        v106 = v102[v104];
        if ((v106 & 0x80000000) == 0
          || (v107 = a4[3], v108 = v106 & 0x7FFFFFFF, v108 >= *(_DWORD *)(v107 + 432))
          || (*(_QWORD *)(*(_QWORD *)(v107 + 424) + 8 * v108) & 0xFFFFFFFFFFFFFFF9) == 0)
        {
          *(_QWORD *)&v202 = 129;
          DWORD2(v202) = 0;
          LODWORD(v209) = v102[v104];
          LODWORD(v211[0]) = 0;
          (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*a4 + 32))(a4, 19, &v202, 1, &v209, 1, 0);
          v102[v104] = *(_DWORD *)(*(_QWORD *)(v109 + 32) + 4);
        }
        v103 = 1;
        v104 = 1;
      }
      while ((v105 & 1) == 0);
      v110 = v206;
      v111 = (int *)v205;
      *(_QWORD *)&v202 = 8388628;
      DWORD2(v202) = 0;
      v209 = v211;
      v210 = 0x800000000;
      if (v206 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v209, (uint64_t)v211, v206, 24);
        v112 = v210;
        v113 = (char *)v209;
        goto LABEL_157;
      }
      if ((_DWORD)v206)
      {
        v112 = 0;
        v113 = (char *)v211;
LABEL_157:
        v114 = 24 * v112;
        v115 = 4 * v110;
        do
        {
          v116 = *v111++;
          v117 = &v113[v114];
          *(_DWORD *)v117 = v116;
          *((_DWORD *)v117 + 4) = 0;
          v114 += 24;
          v115 -= 4;
        }
        while (v115);
        v118 = v210;
      }
      else
      {
        v118 = 0;
        v113 = (char *)v211;
      }
      LODWORD(v210) = v118 + v110;
      (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, char *))(*a4 + 32))(a4, 77, &v202, 1, v113);
      v135 = v134;
      if (v209 != v211)
        free(v209);
      v136 = *(_DWORD *)(*(_QWORD *)(v135 + 32) + 4);
      if (v136 < 0)
      {
        v137 = *(_QWORD *)(a4[1] + 40);
        if ((v136 & 0x7FFFFFFFu) < *(_DWORD *)(v137 + 432))
        {
          v138 = *(_QWORD *)(*(_QWORD *)(v137 + 424) + 8 * (v136 & 0x7FFFFFFF));
          if (v138 != 257 && (v138 & 0xFFFFFFFFFFFFFFF9) != 0)
          {
            *(_QWORD *)&v202 = 257;
            DWORD2(v202) = 0;
            LODWORD(v209) = v136;
            LODWORD(v211[0]) = 0;
            sub_1C5546EF4(a4, (uint64_t *)&v202, (int *)&v209);
            v136 = *(_DWORD *)(*(_QWORD *)(v140 + 32) + 4);
          }
        }
      }
      *(_QWORD *)&v202 = 257;
      DWORD2(v202) = 0;
      LODWORD(v209) = v136;
    }
    else
    {
      v119 = *(_DWORD *)v205;
      v120 = a4[3];
      if ((*(_DWORD *)v205 & 0x80000000) != 0 && (v119 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v120 + 432))
        v121 = *(_QWORD *)(*(_QWORD *)(v120 + 424) + 8 * (v119 & 0x7FFFFFFF));
      else
        v121 = 0;
      v182 = v121;
      v122 = a4[1];
      v123 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v122 + 16) + 184))(*(_QWORD *)(v122 + 16));
      v124 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v122 + 16) + 176))(*(_QWORD *)(v122 + 16));
      if ((v182 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        if ((v182 & 1) != 0)
        {
          RegSizeInBits = v182 >> 3;
        }
        else if ((v182 & 4) != 0)
        {
          if ((v182 & 2) != 0)
            RegSizeInBits = (unsigned __int16)(v182 >> 19);
          else
            RegSizeInBits = v182 >> 19;
        }
        else
        {
          RegSizeInBits = (unsigned __int16)(v182 >> 3);
        }
      }
      else if (v119 - 1 <= 0x3FFFFFFE)
      {
        RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v124 + 264)
                                  + 24
                                  * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v123, v119, v124)+ 24)+ *(_DWORD *)(v124 + 272)* ((*(_QWORD *)(v124 + 248) - *(_QWORD *)(v124 + 240)) >> 3)));
      }
      else
      {
        RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v124, v119, v120);
      }
      v127 = sub_1C4825F50(&v182);
      if ((_DWORD)v126 == 1)
      if (v127 == 16)
      {
        v182 = 257;
        *(_QWORD *)&v202 = 257;
        DWORD2(v202) = 0;
        LODWORD(v209) = v119;
        LODWORD(v211[0]) = 0;
        (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*a4 + 32))(a4, 118, &v202, 1, &v209, 1, 0);
        v119 = *(_DWORD *)(*(_QWORD *)(v128 + 32) + 4);
        RegSizeInBits = 32;
      }
      v129 = (8 * RegSizeInBits) | 1;
      if ((v119 & 0x80000000) != 0)
      {
        v130 = *(_QWORD *)(a4[1] + 40);
        if ((v119 & 0x7FFFFFFF) < *(_DWORD *)(v130 + 432))
        {
          v131 = *(_QWORD *)(*(_QWORD *)(v130 + 424) + 8 * (v119 & 0x7FFFFFFF));
          if ((v131 & 0xFFFFFFFFFFFFFFF9) != 0 && v131 != v129)
          {
            *(_QWORD *)&v202 = v129;
            DWORD2(v202) = 0;
            LODWORD(v209) = v119;
            LODWORD(v211[0]) = 0;
            sub_1C5546EF4(a4, (uint64_t *)&v202, (int *)&v209);
            v119 = *(_DWORD *)(*(_QWORD *)(v133 + 32) + 4);
          }
        }
      }
      *(_QWORD *)&v202 = v129;
      DWORD2(v202) = 0;
      LODWORD(v209) = v119;
    }
    LODWORD(v211[0]) = 0;
    (*(void (**)(uint64_t *, uint64_t, __int128 *, uint64_t, void **, uint64_t, _QWORD))(*a4 + 32))(a4, 19, &v202, 1, &v209, 1, 0);
    LODWORD(v25) = *(_DWORD *)(*(_QWORD *)(v141 + 32) + 4);
    if (v205 != v207)
      free(v205);
LABEL_197:
    v34 = v200;
    v35 = HIDWORD(v200);
LABEL_198:
    if (v34 >= v35)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v34 + 1, 4);
      v34 = v200;
    }
    *((_DWORD *)v199 + v34) = (_DWORD)v25;
    LODWORD(v200) = v200 + 1;
    sub_1C4A20E80((char **)&v195);
    ++v6;
  }
  if (v8 >= 2)
  {
    v143 = v7 + 96;
    v144 = 96 * v8 - 96;
    do
    {
      if (*(_DWORD *)(v7 + 4) < *(_DWORD *)(v143 + 4))
        v7 = v143;
      v143 += 96;
      v144 -= 96;
    }
    while (v144);
  }
  if (v7 == v12 || 32 * *(_DWORD *)(v7 + 4) == -32)
  {
    v148 = 0;
  }
  else
  {
    v145 = (32 * *(_DWORD *)(v7 + 4) + 32 - 1) | ((unint64_t)(32 * *(_DWORD *)(v7 + 4) + 32 - 1) >> 1);
    v146 = v145 | (v145 >> 2) | ((v145 | (v145 >> 2)) >> 4);
    v147 = v146 | (v146 >> 8) | ((v146 | (v146 >> 8)) >> 16);
    v148 = (HIDWORD(v147) | v147) + 1;
  }
  v149 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v179 + 176))(v179);
  v195 = &off_1E8131718;
  v196 = v179;
  v198 = &v195;
  v150 = sub_1C4C0B384(&v195);
  v151 = v198;
  if (v198 == &v195)
  {
    v152 = (void (**)(void **))((char *)v195 + 32);
    v151 = &v195;
    goto LABEL_217;
  }
  if (v198)
  {
    v152 = (void (**)(void **))((char *)*v198 + 40);
LABEL_217:
    (*v152)(v151);
  }
  if (v150 >= 5)
    v153 = 269;
  else
    v153 = 19;
  if (v148)
  {
    v154 = *(void **)(*(_QWORD *)(v149 + 240) + 8 * sub_1C4C91724(v148));
    v155 = v200;
    v156 = 32 * v200;
    if (32 * (int)v200 < v148)
    {
      v157 = v178;
      do
      {
        if (!v157)
        {
          v195 = (void *)257;
          LODWORD(v196) = 0;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*a4 + 32))(a4, 68, &v195, 1, 0, 0, 0);
          HIDWORD(v178) = *(_DWORD *)(*(_QWORD *)(v158 + 32) + 4);
          v155 = v200;
        }
        if (v155 >= HIDWORD(v200))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v155 + 1, 4);
          v155 = v200;
        }
        *((_DWORD *)v199 + v155) = HIDWORD(v178);
        v155 = v200 + 1;
        LODWORD(v200) = v200 + 1;
        v156 += 32;
        v157 = 1;
      }
      while (v156 < v148);
    }
    if (v155 == 1)
    {
      v159 = *(_DWORD *)v199;
      v209 = v154;
      LODWORD(v210) = 2;
      LODWORD(v195) = v159;
      v197 = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a4 + 32))(a4, v153, &v209, 1, &v195, 1, 0);
      goto LABEL_244;
    }
    v209 = (void *)((8 * (unsigned __int16)v155) | 0x1000004u);
    LODWORD(v210) = 0;
    v164 = (int *)v199;
    v195 = &v197;
    v196 = 0x800000000;
    if (v155 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v195, (uint64_t)&v197, v155, 24);
      v165 = v196;
      v166 = (int *)v195;
      goto LABEL_237;
    }
    if (v155)
    {
      v165 = 0;
      v166 = &v197;
LABEL_237:
      v167 = 6 * v165;
      v168 = 4 * v155;
      do
      {
        v169 = *v164++;
        v170 = &v166[v167];
        *v170 = v169;
        v170[4] = 0;
        v167 += 6;
        v168 -= 4;
      }
      while (v168);
      v171 = v196;
    }
    else
    {
      v171 = 0;
      v166 = &v197;
    }
    LODWORD(v196) = v171 + v155;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, int *))(*a4 + 32))(a4, 77, &v209, 1, v166);
    v173 = v172;
    if (v195 != &v197)
      free(v195);
    v174 = *(_DWORD *)(*(_QWORD *)(v173 + 32) + 4);
    v209 = v154;
    LODWORD(v210) = 2;
    LODWORD(v195) = v174;
    v197 = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a4 + 32))(a4, 19, &v209, 1, &v195, 1, 0);
LABEL_244:
    v175 = *(_DWORD *)(*(_QWORD *)(v160 + 32) + 4);
    *(_DWORD *)a1 = 0;
    *(_DWORD *)(a1 + 4) = v175;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v209 = *(void **)(*(_QWORD *)(v149 + 240) + 112);
    LODWORD(v210) = 2;
    if (!(_DWORD)v178)
    {
      v195 = (void *)257;
      LODWORD(v196) = 0;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))(*a4 + 32))(a4, 68, &v195, 1, 0, 0, 0);
      HIDWORD(v178) = *(_DWORD *)(*(_QWORD *)(v161 + 32) + 4);
    }
    LODWORD(v195) = HIDWORD(v178);
    v197 = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*a4 + 32))(a4, v153, &v209, 1, &v195, 1, 0);
    v163 = *(_DWORD *)(*(_QWORD *)(v162 + 32) + 4);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)a1 = 0x2000000;
    *(_DWORD *)(a1 + 4) = v163;
  }
  if (v199 != v201)
    free(v199);
}

void sub_1C4A209EC(uint64_t *a1, int a2, __n128 a3)
{
  uint64_t v4;
  llvm::MachineFunction **v5;
  llvm::MachineInstr *v6;
  llvm::MachineFunction *v7;
  llvm::MachineFunction **v8;
  llvm::MachineInstr *v9;
  llvm::MachineFunction *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15[4];
  int v16;
  _DWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21[8];
  void *v22;
  unsigned int v23;
  _QWORD v24[193];

  v24[192] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  sub_1C4C9237C((uint64_t)v21, a1[1], (_QWORD *)a1[2], (_BYTE *)a1[3], *(_DWORD *)a1[4], a3, 0, a2);
  sub_1C4A1F5D0((uint64_t)v15, (uint64_t)v21, (uint64_t *)a1[6], *(uint64_t **)(v4 + 64));
  v5 = (llvm::MachineFunction **)a1[7];
  v7 = *v5;
  v6 = v5[1];
  v18 = 0;
  v19 = 0;
  v17[0] = 0;
  v17[1] = v16;
  v20 = 0;
  llvm::MachineInstr::addOperand(v6, v7, (const llvm::MachineOperand *)v17);
  v8 = (llvm::MachineFunction **)a1[7];
  v10 = *v8;
  v9 = v8[1];
  v17[0] = 1;
  v18 = 0;
  v19 = 0;
  llvm::MachineInstr::addOperand(v9, v10, (const llvm::MachineOperand *)v17);
  v11 = (char *)v22;
  if (v23)
  {
    v12 = 96 * v23;
    do
    {
      v13 = *(char **)&v11[v12 - 72];
      if (&v11[v12 - 56] != v13)
      {
        v14 = v11;
        free(v13);
        v11 = v14;
      }
      v12 -= 96;
    }
    while (v12);
    v11 = (char *)v22;
  }
  if (v11 != (char *)v24)
    free(v11);
}

unint64_t sub_1C4A20B14(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 40 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 40);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 40);
    }
  }
  return v3;
}

unint64_t sub_1C4A20B8C(unsigned int a1, unsigned __int8 a2, unint64_t a3, unsigned int a4, unsigned int a5, unint64_t a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12)
{
  uint64_t v12;
  unint64_t v13;

  v12 = 0;
  if (a1 > 3)
    goto LABEL_16;
  v13 = 0;
  if ((a3 & 0xFFFFFFF8) != 0)
    return v13 | v12;
  v12 = 0;
  if (a4 > 1 || (a6 & 0xFFFFFFF8) != 0)
    goto LABEL_16;
  v13 = 0;
  if (a6 >> 34)
    return v13 | v12;
  if (a7 > 1 || a8 > 1 || a5 > 3)
  {
LABEL_17:
    v12 = 0;
    v13 = 0;
    return v13 | v12;
  }
  v12 = 0;
  if (a2 > 0xFuLL)
  {
LABEL_16:
    v13 = 0;
    return v13 | v12;
  }
  v13 = 0;
  if (a3 >> 34)
    return v13 | v12;
  if (a9 > 3 || a10 > 3)
    goto LABEL_17;
  v12 = 0;
  if (a11 > 7)
    goto LABEL_16;
  v13 = 0;
  if (a12 <= 3)
  {
    v13 = a6 & 0xFFFFFFFF00000000 | (a3 >> 2) & 0x3FFFFFFFC0000000 | ((unint64_t)a2 << 13) | ((unint64_t)a5 << 19) | ((unint64_t)a7 << 10) | ((unint64_t)a8 << 11) | ((unint64_t)a9 << 21) | ((unint64_t)a10 << 28) | ((unint64_t)a11 << 47) | ((unint64_t)a12 << 50) | ((4 * a3) | a1 | (32 * a4) | ((unint64_t)a6 << 7)) & 0xFFFFFFFFFFFFFF00;
    v12 = ((4 * a3) | a1 | (32 * a4) | ((_BYTE)a6 << 7));
  }
  return v13 | v12;
}

unint64_t sub_1C4A20CD0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 96 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C6151854(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C6151854(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C4A20D38(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = a2 + 16;
    v3 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = a2;
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v3 = *(const void **)v11;
      }
      *(_QWORD *)a1 = v3;
      v13 = v11;
      v14 = *(_QWORD *)(v11 + 8);
      v6 = (_DWORD *)(v11 + 8);
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *(const void **)a2, 28 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v16 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 28);
      a2 = v16;
    }
    else if ((_DWORD)v7)
    {
      v15 = *(unsigned int *)(a1 + 8);
      v17 = a2;
      memmove(*(void **)a1, v3, 28 * v7);
      v8 = v15;
      a2 = v17;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 28 * v8), (const void *)(*(_QWORD *)a2 + 28 * v8), *(_QWORD *)a2 + 28 * v9 - (*(_QWORD *)a2 + 28 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

char **sub_1C4A20E80(char **result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char **v7;
  char **v8;

  v1 = *result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v3 = 96 * v2;
    do
    {
      v4 = *(char **)&v1[v3 - 72];
      if (&v1[v3 - 56] != v4)
      {
        v8 = result;
        v5 = v3;
        v6 = v1;
        free(v4);
        v3 = v5;
        v1 = v6;
        result = v8;
      }
      v3 -= 96;
    }
    while (v3);
    v1 = *result;
  }
  if (v1 != (char *)(result + 2))
  {
    v7 = result;
    free(v1);
    return v7;
  }
  return result;
}

uint64_t sub_1C4A20F0C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a1 + 8;
  v3 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      v11 = 0;
      goto LABEL_10;
    }
    v2 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (37 * *a2) & (v4 - 1);
  v7 = v2 + 16 * v6;
  v8 = *(_QWORD *)v7;
  if (*a2 == *(_QWORD *)v7)
    return v7;
  v9 = 0;
  v10 = 1;
  while (v8 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v9)
      v14 = 0;
    else
      v14 = v8 == 0x8000000000000000;
    if (v14)
      v9 = v7;
    v15 = v6 + v10++;
    v6 = v15 & v5;
    v7 = v2 + 16 * (v15 & v5);
    v8 = *(_QWORD *)v7;
    if (*a2 == *(_QWORD *)v7)
      return v7;
  }
  if (v9)
    v7 = v9;
  if ((v3 & 1) != 0)
    v11 = 8;
  else
    v11 = *(_DWORD *)(a1 + 16);
LABEL_10:
  v12 = v3 >> 1;
  if (4 * v12 + 4 >= 3 * v11)
  {
    v17 = a2;
    v18 = a1;
    v16 = 2 * v11;
LABEL_26:
    sub_1C4A21114(a1, v16);
    v19 = 0;
    sub_1C4A21078(v18, *v17, &v19);
    a2 = v17;
    a1 = v18;
    v7 = v19;
    goto LABEL_12;
  }
  if (v11 + ~v12 - *(_DWORD *)(a1 + 4) <= v11 >> 3)
  {
    v17 = a2;
    v18 = a1;
    v16 = v11;
    goto LABEL_26;
  }
LABEL_12:
  *(_DWORD *)a1 += 2;
  if (*(_QWORD *)v7 != 0x7FFFFFFFFFFFFFFFLL)
    --*(_DWORD *)(a1 + 4);
  *(_QWORD *)v7 = *a2;
  *(_DWORD *)(v7 + 8) = 0;
  return v7;
}

uint64_t sub_1C4A21078(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == 0x8000000000000000;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

int *sub_1C4A21114(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4A21290((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((unint64_t)(v10 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    {
      *v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4A21290((int *)a1, v14, v9);
}

int *sub_1C4A21290(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 34;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = 0x7FFFFFFFFFFFFFFFLL;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((unint64_t)(*a2 - 0x7FFFFFFFFFFFFFFFLL) >= 2)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 8;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & (37 * v7);
      v12 = (uint64_t *)&v9[4 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != 0x7FFFFFFFFFFFFFFFLL)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == 0x8000000000000000;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)&v9[4 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_14;
        }
        if (v14)
          v12 = v14;
      }
LABEL_14:
      *v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t *sub_1C4A213A0(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t *result;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t *v26;

  v5 = a1 + 8;
  v4 = *(_DWORD *)a1;
  v6 = *(_DWORD *)a1 & 1;
  if (v6)
  {
    v7 = 8;
    v8 = a1 + 8;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
    {
      result = 0;
      v17 = 0;
      goto LABEL_17;
    }
    v8 = *(_QWORD *)(a1 + 8);
  }
  v9 = v7 - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  result = (uint64_t *)(v8 + 16 * v10);
  v12 = *result;
  if (*a2 == *result)
    return result;
  v13 = 0;
  v14 = 1;
  while (v12 != -4096)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -8192;
    if (v15)
      v13 = result;
    v16 = v10 + v14++;
    v10 = v16 & v9;
    result = (uint64_t *)(v8 + 16 * v10);
    v12 = *result;
    if (*a2 == *result)
      return result;
  }
  if (v13)
    result = v13;
  if (v6)
    v17 = 8;
  else
    v17 = *(_DWORD *)(a1 + 16);
LABEL_17:
  if (4 * (v4 >> 1) + 4 < 3 * v17)
  {
    if (v17 + ~(v4 >> 1) - *(_DWORD *)(a1 + 4) <= v17 >> 3)
    {
      sub_1C4A21650(a1, v17);
      v26 = 0;
      sub_1C4A215B8(a1, *a2, &v26);
      result = v26;
      v4 = *(_DWORD *)a1;
      v6 = *(_DWORD *)a1 & 1;
    }
    goto LABEL_20;
  }
  sub_1C4A21650(a1, 2 * v17);
  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v18 = 8;
    goto LABEL_28;
  }
  v18 = *(_DWORD *)(a1 + 16);
  if (v18)
  {
    v5 = *(_QWORD *)(a1 + 8);
LABEL_28:
    v6 = *(_DWORD *)a1 & 1;
    v19 = v18 - 1;
    v20 = ((*a2 >> 4) ^ (*a2 >> 9)) & v19;
    result = (uint64_t *)(v5 + 16 * v20);
    v21 = *result;
    if (*a2 != *result)
    {
      v22 = 0;
      v23 = 1;
      while (v21 != -4096)
      {
        if (v22)
          v24 = 0;
        else
          v24 = v21 == -8192;
        if (v24)
          v22 = result;
        v25 = v20 + v23++;
        v20 = v25 & v19;
        result = (uint64_t *)(v5 + 16 * v20);
        v21 = *result;
        if (*a2 == *result)
          goto LABEL_20;
      }
      if (v22)
        result = v22;
    }
    goto LABEL_20;
  }
  v6 = 0;
  result = 0;
LABEL_20:
  *(_DWORD *)a1 = (v4 & 0xFFFFFFFE | v6) + 2;
  if (*result != -4096)
    --*(_DWORD *)(a1 + 4);
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1C4A215B8(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

int *sub_1C4A21650(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4A217C8((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4A217C8((int *)a1, v14, v9);
}

int *sub_1C4A217C8(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 34;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 8;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v9[4 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[4 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      v18 = a2[1];
      *(_QWORD *)v12 = v7;
      *((_QWORD *)v12 + 1) = v18;
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t *sub_1C4A218C8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v2 = 8;
    v3 = a1 + 8;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
    {
      v10 = 0;
      return (uint64_t *)(v3 + 16 * v10);
    }
  }
  v4 = v2 - 1;
  LODWORD(v5) = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (uint64_t *)(v3 + 16 * v5);
  v7 = *v6;
  if (*v6 != a2)
  {
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
        return (uint64_t *)(v3 + 16 * v5);
    }
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v10 = 8;
      v3 = a1 + 8;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      v10 = *(unsigned int *)(a1 + 16);
    }
    return (uint64_t *)(v3 + 16 * v10);
  }
  return v6;
}

uint64_t *sub_1C4A21964(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v11;

  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v2 = 8;
    v3 = a1 + 8;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
    {
      v9 = 0;
      return (uint64_t *)(v3 + 16 * v9);
    }
  }
  v4 = v2 - 1;
  LODWORD(v5) = (v2 - 1) & (37 * a2);
  v6 = (uint64_t *)(v3 + 16 * v5);
  v7 = *v6;
  if (*v6 != a2)
  {
    v8 = 1;
    while (v7 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v11 = v5 + v8++;
      v5 = v11 & v4;
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
        return (uint64_t *)(v3 + 16 * v5);
    }
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v9 = 8;
      v3 = a1 + 8;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    return (uint64_t *)(v3 + 16 * v9);
  }
  return v6;
}

llvm::MachineFunction *sub_1C4A21A04(uint64_t *a1, unsigned int a2, const llvm::MachineOperand *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _UNKNOWN ***v11;
  uint64_t v12;
  uint64_t v13;
  llvm::MachineFunction *v14;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::MachineFunction *result;
  llvm::MachineInstr *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  llvm::MachineFunction *v32;
  llvm::MachineInstr *v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  if (a2 > 2)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v10 = qword_1C6616300[a2];
    v11 = (&off_1E7FAB198)[a2];
    v12 = 27 * a2 + 436;
  }
  v13 = *(_QWORD *)(v9 + 64);
  v37 = v10;
  v38 = 0;
  v14 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v13 + 32))(v13, v12, &v37, 1, 0, 0, 0);
  v16 = v15;
  LODWORD(v32) = 1;
  v33 = 0;
  v34 = 0;
  llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v32);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 24) + 16 * (*(_DWORD *)(*((_QWORD *)v16 + 4) + 4) & 0x7FFFFFFF)) = v11;
  if (a4)
  {
    v17 = 32 * a4;
    do
    {
      llvm::MachineInstr::addOperand(v16, v14, a3);
      LODWORD(v32) = 1;
      v33 = 0;
      v34 = 0;
      llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v32);
      a3 = (const llvm::MachineOperand *)((char *)a3 + 32);
      v17 -= 32;
    }
    while (v17);
  }
  sub_1C554AE8C(v16, *(_QWORD *)(v9 + 40), *(_QWORD **)(v9 + 56));
  v18 = *(_QWORD *)(v9 + 64);
  v37 = v10;
  v38 = 0;
  v32 = v14;
  v33 = v16;
  LODWORD(v34) = 1;
  result = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, llvm::MachineFunction **, uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 19, &v37, 1, &v32, 1, 0);
  if (a2)
  {
    v21 = *(_DWORD *)(*((_QWORD *)v20 + 4) + 4);
    v22 = *(_DWORD *)(a5 + 8);
    v23 = *(_DWORD *)(a5 + 12);
  }
  else
  {
    v24 = *(uint64_t **)(v9 + 64);
    v32 = result;
    v33 = v20;
    LODWORD(v34) = 1;
    sub_1C5544C30(v24, 129, (int *)&v32);
    v26 = v25;
    v27 = *(_QWORD *)(v9 + 64);
    v37 = 257;
    v38 = 0;
    v28 = *(_QWORD *)(v25 + 32);
    LODWORD(v32) = *(_DWORD *)(v28 + 4);
    LODWORD(v34) = 0;
    v35 = *(_DWORD *)(v28 + 36);
    v36 = 0;
    result = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, llvm::MachineFunction **, uint64_t, _QWORD))(*(_QWORD *)v27 + 32))(v27, 76, &v37, 1, &v32, 2, 0);
    v30 = *(_DWORD *)(*(_QWORD *)(v29 + 32) + 4);
    v31 = *(unsigned int *)(a5 + 8);
    if (v31 >= *(_DWORD *)(a5 + 12))
    {
      result = (llvm::MachineFunction *)llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v31 + 1, 4);
      LODWORD(v31) = *(_DWORD *)(a5 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a5 + 4 * v31) = v30;
    v23 = *(_DWORD *)(a5 + 12);
    v22 = *(_DWORD *)(a5 + 8) + 1;
    *(_DWORD *)(a5 + 8) = v22;
    v21 = *(_DWORD *)(*(_QWORD *)(v26 + 32) + 68);
  }
  if (v22 >= v23)
  {
    result = (llvm::MachineFunction *)llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v22 + 1, 4);
    v22 = *(_DWORD *)(a5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a5 + 4 * v22) = v21;
  ++*(_DWORD *)(a5 + 8);
  return result;
}

uint64_t sub_1C4A21CD8(uint64_t result)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(result + 768);
  if (v1 != (void *)(result + 784))
  {
    v4 = result;
    free(v1);
    result = v4;
  }
  v2 = *(void **)(result + 512);
  if (v2 != (void *)(result + 528))
  {
    v5 = result;
    free(v2);
    result = v5;
  }
  v3 = *(void **)(result + 256);
  if (v3 != (void *)(result + 272))
  {
    v6 = result;
    free(v3);
    result = v6;
  }
  if (*(_QWORD *)result != result + 16)
  {
    v7 = result;
    free(*(void **)result);
    return v7;
  }
  return result;
}

void sub_1C4A21D80()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4A21D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  _QWORD v21[8];

  v6 = *(_QWORD *)(a4 + 8);
  v7 = *(_QWORD *)(v6 + 40);
  v21[0] = a4;
  v21[1] = v7;
  v21[2] = a2;
  memset(&v21[3], 0, 24);
  v21[6] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 184))(*(_QWORD *)(v6 + 16));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a4 + 8) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 16));
  result = 0;
  v21[7] = v8;
  v10 = **(unsigned __int16 **)(a3 + 16);
  if (v10 > 0x4C)
  {
    if (v10 != 205)
    {
      if (v10 != 77)
        return result;
      v11 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 40);
      v12 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 4);
      if ((v12 & 0x80000000) != 0)
        v13 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
      else
        v13 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v12);
      v14 = *v13;
      if (v14)
      {
        while ((*(_BYTE *)(v14 + 3) & 1) != 0)
        {
          v14 = *(_QWORD *)(v14 + 24);
          if (!v14)
            return sub_1C4AEB310(v21, a3);
        }
        v15 = *(_QWORD *)(v14 + 8);
LABEL_16:
        if (**(_WORD **)(v15 + 16) == 19)
        {
          v16 = *(_DWORD *)(*(_QWORD *)(v15 + 32) + 4);
          if (v16 < 0)
          {
            v17 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (v16 & 0x7FFFFFFF));
            if ((v17 & 4) == 0)
            {
              v18 = v17 & 0xFFFFFFFFFFFFFFF8;
              if (v18)
              {
                v19 = *(unsigned __int16 *)(*(_QWORD *)v18 + 24);
                v20 = (v19 - 14) > 0x32 || ((1 << (v19 - 14)) & 0x4000000004001) == 0;
                if (!v20 || v19 == 105 || v19 == 127)
                  return 0;
              }
            }
          }
        }
        while (1)
        {
          v14 = *(_QWORD *)(v14 + 24);
          if (!v14)
            break;
          if ((*(_BYTE *)(v14 + 3) & 1) == 0 && *(_QWORD *)(v14 + 8) != v15)
          {
            v15 = *(_QWORD *)(v14 + 8);
            goto LABEL_16;
          }
        }
      }
    }
    return sub_1C4AEB310(v21, a3);
  }
  if (v10 == 19 || v10 == 74)
    return sub_1C4AEB310(v21, a3);
  return result;
}

uint64_t sub_1C4A21F30()
{
  char v1;
  char *v2;
  int v3;
  __n128 v4;

  v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Assume bindless sampler base allocated for run pass testing purposes.";
  v4.n128_u64[1] = 69;
  v1 = 0;
  v2 = &v1;
  sub_1C6151DC0((llvm::cl::Option *)&unk_1ED7ED568, "assume-bindless-sampler-base-allocated", &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7ED568, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Should enable CSE in AGX3 Instruction Expansion";
  v4.n128_u64[1] = 47;
  v3 = 0;
  v1 = 1;
  v2 = &v1;
  sub_1C614F300((uint64_t)&unk_1ED7ED628, "enable-cse-in-agx3-inst-expansion", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7ED628, &dword_1C475E000);
}

uint64_t sub_1C4A22014(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E7FAB1C0;
  if ((*(_BYTE *)(a1 + 264) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 272), 8);
  sub_1C613ACBC(a1 + 112);
  return a1;
}

void sub_1C4A2205C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E7FAB1C0;
  if ((*(_BYTE *)(a1 + 264) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 272), 8);
  sub_1C613ACBC(a1 + 112);
  JUMPOUT(0x1CAA32FC0);
}

#error "1C4A220B4: too big function (funcsize=0)"

uint64_t sub_1C4A38C3C(uint64_t result)
{
  *(_QWORD *)(result + 104) = 0;
  return result;
}

void *sub_1C4A38C44()
{
  return &unk_1C6616708;
}

uint64_t sub_1C4A38C50(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C4A38C6C + 4 * byte_1C66165AE[a2 - 1]))();
}

BOOL sub_1C4A38C6C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 < 0x80;
}

BOOL sub_1C4A38C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (a3 & 0xFFFFFFFFFFFFFFFCLL) == 12;
}

uint64_t sub_1C4A38C90(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 0x13)
    return 0;
  else
    return (0x700F0u >> a3) & 1;
}

BOOL sub_1C4A38CAC(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v3;

  if (*(_DWORD *)(a3 + 8) >= 0x41u)
    v3 = *(_QWORD **)a3;
  else
    v3 = (_QWORD *)a3;
  return *v3 < qword_1C676A410[a2 - 1];
}

uint64_t sub_1C4A38CDC(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 3)
    return sub_1C48AA9FC(a3);
  if (a2 == 2)
    return sub_1C48AAB00(a3);
  return sub_1C4A3C79C(a3);
}

uint64_t sub_1C4A38D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  _BYTE v7[80];
  int v8;

  result = sub_1C4A3C18C((uint64_t)v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a2, 0, 0, 0, 1u);
  if (v8 < 4)
    return sub_1C4A3BEBC((uint64_t)a3, a1, a2, 0);
  *a3 = 0;
  a3[144] = 0;
  return result;
}

void sub_1C4A38D94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int RegSizeInBits;
  unsigned int v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  char *v23;
  char *v24;
  void *v25;
  void **v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unsigned int v31;
  char *v32;
  char *v33;
  void *v34;
  _BYTE *v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t i;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  int v53;
  void **v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[64];
  void *v58;
  uint64_t v59;
  _QWORD v60[16];
  void *v61;
  uint64_t v62;
  _BYTE v63[24];
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD v67[9];

  v67[8] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a2)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 144) = 0;
    return;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40);
  v7 = *(unsigned int *)(a2 + 4);
  if ((v7 & 0x80000000) != 0)
    v8 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  else
    v8 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v7);
  v9 = *v8;
  if ((*(_BYTE *)(v9 + 3) & 1) == 0)
    v9 = *(_QWORD *)(v9 + 24);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = **(unsigned __int16 **)(v10 + 16);
  v12 = (v11 - 118) > 8 || ((1 << (v11 - 118)) & 0x141) == 0;
  if (v12
    || (v13 = *(_QWORD *)(v10 + 32), *(_BYTE *)(v13 + 32))
    || ((v14 = *(_DWORD *)(v13 + 36), v14 - 1 <= 0x3FFFFFFE)
      ? (v15 = *(_QWORD *)(a1 + 80),
         RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v15 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(a1 + 88), v14, v15)+ 24)+ *(_DWORD *)(v15 + 272)* ((*(_QWORD *)(v15 + 248) - *(_QWORD *)(v15 + 240)) >> 3)))): (RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 80), v14, v6)), RegSizeInBits != 16))
  {
    v17 = 8;
  }
  else
  {
    v17 = 8 * (v11 != 126);
    v18 = *(_QWORD *)(v10 + 32);
    v19 = *(_OWORD *)(v18 + 48);
    *(_OWORD *)a2 = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(a2 + 16) = v19;
  }
  v65 = v67;
  v66 = 0x200000000;
  if (!sub_1C4A3D0C4(a1, v6, (unsigned __int8 *)a2, (uint64_t)&v65, v17, 0, 0))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 144) = 0;
    goto LABEL_75;
  }
  v58 = v60;
  v59 = 0x200000000;
  v20 = v66;
  if ((_DWORD)v66)
  {
    v21 = v60;
    v22 = v66;
    if (v66 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v66, 32);
      v22 = v66;
      if (!(_DWORD)v66)
        goto LABEL_22;
      v21 = v58;
    }
    memcpy(v21, v65, 32 * v22);
LABEL_22:
    LODWORD(v59) = v20;
  }
  v23 = (char *)operator new(0x58uLL);
  v24 = v23;
  *(_QWORD *)v23 = &off_1E7FAB268;
  v25 = v23 + 24;
  *((_QWORD *)v23 + 1) = v23 + 24;
  v26 = (void **)(v23 + 8);
  *((_QWORD *)v23 + 2) = 0x200000000;
  if (!(_DWORD)v20)
    goto LABEL_30;
  if (v58 != v60)
  {
    *((_QWORD *)v23 + 1) = v58;
    v52 = HIDWORD(v59);
    *((_DWORD *)v23 + 4) = v20;
    *((_DWORD *)v23 + 5) = v52;
    v58 = v60;
    HIDWORD(v59) = 0;
    goto LABEL_29;
  }
  if (v20 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v23 + 8), (uint64_t)v25, v20, 32);
    v28 = v59;
    if (!(_DWORD)v59)
      goto LABEL_28;
    v27 = v58;
    v25 = *v26;
  }
  else
  {
    v27 = v60;
    v28 = v20;
  }
  memcpy(v25, v27, 32 * v28);
LABEL_28:
  *((_DWORD *)v24 + 4) = v20;
LABEL_29:
  LODWORD(v59) = 0;
LABEL_30:
  v60[11] = v24;
  v55 = v57;
  v56 = 0x200000000;
  v29 = v66;
  if (!(_DWORD)v66)
    goto LABEL_34;
  v30 = v57;
  v31 = v66;
  if (v66 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, (uint64_t)v57, v66, 32);
    v31 = v66;
    if (!(_DWORD)v66)
      goto LABEL_33;
    v30 = v55;
  }
  memcpy(v30, v65, 32 * v31);
LABEL_33:
  LODWORD(v56) = v29;
LABEL_34:
  v32 = (char *)operator new(0x58uLL);
  v33 = v32;
  *(_QWORD *)v32 = &off_1E7FAB2B0;
  v34 = v32 + 24;
  *((_QWORD *)v32 + 1) = v32 + 24;
  *((_QWORD *)v32 + 2) = 0x200000000;
  if (!(_DWORD)v29)
    goto LABEL_41;
  if (v55 != v57)
  {
    *((_QWORD *)v32 + 1) = v55;
    v53 = HIDWORD(v56);
    *((_DWORD *)v32 + 4) = v29;
    *((_DWORD *)v32 + 5) = v53;
    v55 = v57;
    HIDWORD(v56) = 0;
    goto LABEL_40;
  }
  if (v29 >= 3)
  {
    v54 = (void **)(v32 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v32 + 8), (uint64_t)v34, v29, 32);
    v36 = v56;
    if (!(_DWORD)v56)
      goto LABEL_39;
    v35 = v55;
    v34 = *v54;
  }
  else
  {
    v35 = v57;
    v36 = v29;
  }
  memcpy(v34, v35, 32 * v36);
LABEL_39:
  *((_DWORD *)v33 + 4) = v29;
LABEL_40:
  LODWORD(v56) = 0;
LABEL_41:
  v37 = 0;
  v38 = 0;
  v60[15] = v33;
  v61 = v63;
  v62 = 0x400000000;
  v39 = &v64;
  do
  {
    v40 = v37;
    v41 = &v60[4 * v38 + 8];
    v42 = (_QWORD *)v41[3];
    if (v42)
    {
      if (v42 == v41)
      {
        *v39 = (uint64_t)(v39 - 3);
        (*(void (**)(_QWORD *))(*v41 + 24))(v41);
      }
      else
      {
        *v39 = (*(uint64_t (**)(_QWORD))(*v42 + 16))(v41[3]);
      }
    }
    else
    {
      *v39 = 0;
    }
    v39 += 4;
    v37 = 1;
    v38 = 1;
  }
  while ((v40 & 1) == 0);
  v43 = v62;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  LODWORD(v62) = v43 + 2;
  if (v43 == -2)
  {
    *(_BYTE *)(a3 + 144) = 1;
LABEL_61:
    v45 = (char *)v61;
  }
  else
  {
    sub_1C48AAD34(a3, (uint64_t)&v61);
    v44 = v62;
    *(_BYTE *)(a3 + 144) = 1;
    v45 = (char *)v61;
    if ((_DWORD)v44)
    {
      v46 = 32 * v44;
      while (1)
      {
        v47 = *(char **)&v45[v46 - 8];
        if (&v45[v46 - 32] == v47)
          break;
        if (v47)
        {
          v48 = 5;
          goto LABEL_57;
        }
LABEL_58:
        v46 -= 32;
        if (!v46)
          goto LABEL_61;
      }
      v47 = &v45[v46 - 32];
      v48 = 4;
LABEL_57:
      (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
      goto LABEL_58;
    }
  }
  if (v45 != v63)
    free(v45);
  for (i = 0; i != -8; i -= 4)
  {
    v50 = (_QWORD *)v60[i + 15];
    if (&v60[i + 12] == v50)
    {
      v50 = &v60[i + 12];
      v51 = 4;
    }
    else
    {
      if (!v50)
        continue;
      v51 = 5;
    }
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  if (v55 != v57)
    free(v55);
  if (v58 != v60)
    free(v58);
LABEL_75:
  if (v65 != v67)
    free(v65);
}

_QWORD *sub_1C4A39308@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int v3;
  int v4;
  _DWORD *v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *result;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[24];
  _DWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  _QWORD v31[14];

  v31[13] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v3 = a1[1];
  v21 = *(_OWORD *)(a1 + 2);
  v22 = *((_QWORD *)a1 + 3);
  if (!*a1)
  {
    sub_1C4A3CBB8((uint64_t)&v27, v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 32) + 40));
    if (v30)
    {
      v4 = (int)v27;
      v3 = HIDWORD(v27);
      v21 = v28;
      v22 = v29;
    }
  }
  v5 = operator new(0x28uLL);
  v6 = 0;
  v7 = 0;
  *(_QWORD *)v5 = &off_1E7FAB2F8;
  v5[2] = v4;
  v5[3] = v3;
  *((_OWORD *)v5 + 1) = v21;
  *((_QWORD *)v5 + 4) = v22;
  v24 = v5;
  v25[0] = &off_1E7FAB340;
  v26 = v25;
  v27 = (char *)&v28 + 8;
  v8 = v31;
  *(_QWORD *)&v28 = 0x400000000;
  do
  {
    v9 = v6;
    v10 = &v23[32 * v7];
    v11 = (_QWORD *)v10[3];
    if (v11)
    {
      if (v11 == v10)
      {
        *v8 = v8 - 3;
        (*(void (**)(_QWORD *))(*v10 + 24))(v10);
      }
      else
      {
        *v8 = (*(uint64_t (**)(_QWORD))(*v11 + 16))(v10[3]);
      }
    }
    else
    {
      *v8 = 0;
    }
    v8 += 4;
    v6 = 1;
    v7 = 1;
  }
  while ((v9 & 1) == 0);
  v12 = v28;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  LODWORD(v28) = v12 + 2;
  if (v12 == -2)
  {
    *(_BYTE *)(a2 + 144) = 1;
LABEL_23:
    v14 = (char *)v27;
  }
  else
  {
    sub_1C48AAD34(a2, (uint64_t)&v27);
    v13 = v28;
    *(_BYTE *)(a2 + 144) = 1;
    v14 = (char *)v27;
    if ((_DWORD)v13)
    {
      v15 = 32 * v13;
      while (1)
      {
        v16 = *(char **)&v14[v15 - 8];
        if (&v14[v15 - 32] == v16)
          break;
        if (v16)
        {
          v17 = 5;
          goto LABEL_19;
        }
LABEL_20:
        v15 -= 32;
        if (!v15)
          goto LABEL_23;
      }
      v16 = &v14[v15 - 32];
      v17 = 4;
LABEL_19:
      (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
      goto LABEL_20;
    }
  }
  if (v14 != (char *)&v28 + 8)
    free(v14);
  for (i = 0; i != -8; i -= 4)
  {
    result = (&v26)[i];
    if (&v25[i] == result)
    {
      result = &v25[i];
      v20 = 4;
    }
    else
    {
      if (!result)
        continue;
      v20 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
  }
  return result;
}

uint64_t (***sub_1C4A39574@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>))()
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t i;
  uint64_t (***result)();
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[24];
  _DWORD *v28;
  uint64_t (**v29)();
  int v30;
  uint64_t (***v31)();
  void *v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  _QWORD v36[14];

  v36[13] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 32) + 40);
  v4 = sub_1C4A3CA30(v3, a1, 1);
  v6 = v5;
  v8 = *(_DWORD *)v4;
  v7 = *(_DWORD *)(v4 + 4);
  v25 = *(_OWORD *)(v4 + 8);
  v26 = *(_QWORD *)(v4 + 24);
  if (!*(_DWORD *)v4)
  {
    sub_1C4A3CBB8((uint64_t)&v32, v7, v3);
    if (v35)
    {
      v8 = (int)v32;
      v7 = HIDWORD(v32);
      v25 = v33;
      v26 = v34;
    }
  }
  v9 = operator new(0x28uLL);
  v10 = 0;
  v11 = 0;
  *(_QWORD *)v9 = &off_1E7FAB388;
  v9[2] = v8;
  v9[3] = v7;
  *((_OWORD *)v9 + 1) = v25;
  *((_QWORD *)v9 + 4) = v26;
  v28 = v9;
  v29 = &off_1E7FAB3D0;
  v30 = v6;
  v31 = &v29;
  v32 = (char *)&v33 + 8;
  v12 = v36;
  *(_QWORD *)&v33 = 0x400000000;
  do
  {
    v13 = v10;
    v14 = &v27[32 * v11];
    v15 = (_QWORD *)v14[3];
    if (v15)
    {
      if (v15 == v14)
      {
        *v12 = v12 - 3;
        (*(void (**)(_QWORD *))(*v14 + 24))(v14);
      }
      else
      {
        *v12 = (*(uint64_t (**)(_QWORD))(*v15 + 16))(v14[3]);
      }
    }
    else
    {
      *v12 = 0;
    }
    v12 += 4;
    v10 = 1;
    v11 = 1;
  }
  while ((v13 & 1) == 0);
  v16 = v33;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  LODWORD(v33) = v16 + 2;
  if (v16 == -2)
  {
    *(_BYTE *)(a2 + 144) = 1;
LABEL_23:
    v18 = (char *)v32;
  }
  else
  {
    sub_1C48AAD34(a2, (uint64_t)&v32);
    v17 = v33;
    *(_BYTE *)(a2 + 144) = 1;
    v18 = (char *)v32;
    if ((_DWORD)v17)
    {
      v19 = 32 * v17;
      while (1)
      {
        v20 = *(char **)&v18[v19 - 8];
        if (&v18[v19 - 32] == v20)
          break;
        if (v20)
        {
          v21 = 5;
          goto LABEL_19;
        }
LABEL_20:
        v19 -= 32;
        if (!v19)
          goto LABEL_23;
      }
      v20 = &v18[v19 - 32];
      v21 = 4;
LABEL_19:
      (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
      goto LABEL_20;
    }
  }
  if (v18 != (char *)&v33 + 8)
    free(v18);
  for (i = 0; i != -8; i -= 4)
  {
    result = (&v31)[i];
    if (&(&v29)[i] == result)
    {
      result = &(&v29)[i];
      v24 = 4;
    }
    else
    {
      if (!result)
        continue;
      v24 = 5;
    }
    result = (uint64_t (***)())(*result)[v24]();
  }
  return result;
}

uint64_t (***sub_1C4A397F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>))()
{
  uint64_t v5;
  uint64_t (***result)();
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29[80];
  int v30;
  _BYTE v31[24];
  _DWORD *v32;
  uint64_t (**v33)();
  int v34;
  uint64_t (***v35)();
  char *v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  _QWORD v40[14];

  v40[13] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40);
  result = (uint64_t (***)())sub_1C4A3C18C((uint64_t)v29, v5, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a2, 0, 0, 0, 1u);
  if (v30 < 4)
  {
    v7 = sub_1C4A3CA30(v5, a2, 1);
    v9 = v8;
    v11 = *(_DWORD *)v7;
    v10 = *(_DWORD *)(v7 + 4);
    v27 = *(_OWORD *)(v7 + 8);
    v28 = *(_QWORD *)(v7 + 24);
    if (!*(_DWORD *)v7)
    {
      sub_1C4A3CBB8((uint64_t)&v36, v10, v5);
      if (v39)
      {
        v11 = (int)v36;
        v10 = HIDWORD(v36);
        v27 = v37;
        v28 = v38;
      }
    }
    v12 = operator new(0x28uLL);
    v13 = 0;
    v14 = 0;
    *(_QWORD *)v12 = &off_1E7FAB418;
    v12[2] = v11;
    v12[3] = v10;
    *((_OWORD *)v12 + 1) = v27;
    *((_QWORD *)v12 + 4) = v28;
    v32 = v12;
    v33 = &off_1E7FAB460;
    v34 = v9;
    v35 = &v33;
    v36 = (char *)&v37 + 8;
    v15 = v40;
    *(_QWORD *)&v37 = 0x400000000;
    do
    {
      v16 = v13;
      v17 = &v31[32 * v14];
      v18 = (_QWORD *)v17[3];
      if (v18)
      {
        if (v18 == v17)
        {
          *v15 = v15 - 3;
          (*(void (**)(_QWORD *))(*v17 + 24))(v17);
        }
        else
        {
          *v15 = (*(uint64_t (**)(_QWORD))(*v18 + 16))(v17[3]);
        }
      }
      else
      {
        *v15 = 0;
      }
      v15 += 4;
      v13 = 1;
      v14 = 1;
    }
    while ((v16 & 1) == 0);
    v19 = v37;
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)(a3 + 8) = 0x400000000;
    LODWORD(v37) = v19 + 2;
    if (v19 == -2)
    {
      *(_BYTE *)(a3 + 144) = 1;
LABEL_25:
      v21 = v36;
    }
    else
    {
      sub_1C48AAD34(a3, (uint64_t)&v36);
      v20 = v37;
      *(_BYTE *)(a3 + 144) = 1;
      v21 = v36;
      if ((_DWORD)v20)
      {
        v22 = 32 * v20;
        while (1)
        {
          v23 = *(char **)&v21[v22 - 8];
          if (&v21[v22 - 32] == v23)
            break;
          if (v23)
          {
            v24 = 5;
            goto LABEL_21;
          }
LABEL_22:
          v22 -= 32;
          if (!v22)
            goto LABEL_25;
        }
        v23 = &v21[v22 - 32];
        v24 = 4;
LABEL_21:
        (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
        goto LABEL_22;
      }
    }
    if (v21 != (char *)&v37 + 8)
      free(v21);
    v25 = 0;
    while (1)
    {
      result = (&v35)[v25];
      if (&(&v33)[v25] == result)
        break;
      if (result)
      {
        v26 = 5;
LABEL_33:
        result = (uint64_t (***)())(*result)[v26]();
      }
      v25 -= 4;
      if (v25 == -8)
        return result;
    }
    result = &(&v33)[v25];
    v26 = 4;
    goto LABEL_33;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 144) = 0;
  return result;
}

void sub_1C4A39ABC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1C4A3DA74(a3, a1, a2, 0);
}

void sub_1C4A39AD0(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int RegSizeInBits;
  int v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  void **v27;
  void **v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (***v36)();
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  char *v41;
  char *v42;
  void *v43;
  void **v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  unsigned int v49;
  char *v50;
  char *v51;
  void *v52;
  void **v53;
  _BYTE *v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  _QWORD *v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t i;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  _BYTE v76[64];
  void *v77;
  uint64_t v78;
  _QWORD v79[16];
  void *v80;
  uint64_t v81;
  _BYTE v82[24];
  _BYTE v83[104];
  _QWORD *v84;
  uint64_t v85;
  _QWORD v86[2];
  uint64_t (**v87)();
  unsigned int v88;
  _QWORD v89[4];

  v89[3] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a2)
    goto LABEL_6;
  v6 = (int *)(a2 + 4);
  v5 = *(unsigned int *)(a2 + 4);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40);
  v8 = (uint64_t *)((v5 & 0x80000000) != 0
                 ? *(_QWORD *)(v7 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8
                 : *(_QWORD *)(v7 + 272) + 8 * v5);
  v9 = *v8;
  if (!v9)
    goto LABEL_6;
  v73 = (uint64_t)a3;
  if ((*(_BYTE *)(v9 + 3) & 1) == 0)
  {
    v9 = *(_QWORD *)(v9 + 24);
    if (!v9 || (*(_BYTE *)(v9 + 3) & 1) == 0)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_6;
  v11 = **(unsigned __int16 **)(v10 + 16);
  if (sub_1C4A3E858(a1, a2))
  {
    sub_1C4A3E93C(v73, a1, a2, 1);
    return;
  }
  v12 = (v11 - 118) > 8 || ((1 << (v11 - 118)) & 0x141) == 0;
  if (v12
    || (v13 = *(_QWORD *)(v10 + 32), *(_BYTE *)(v13 + 32))
    || ((v14 = *(_DWORD *)(v13 + 36), v14 - 1 <= 0x3FFFFFFE)
      ? (v15 = *(_QWORD *)(a1 + 80),
         RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v15 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(a1 + 88), v14, v15)+ 24)+ *(_DWORD *)(v15 + 272)* ((*(_QWORD *)(v15 + 248) - *(_QWORD *)(v15 + 240)) >> 3)))): (RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 80), v14, v7)), RegSizeInBits != 16))
  {
    v18 = 0;
    goto LABEL_26;
  }
  v17 = **(unsigned __int16 **)(v10 + 16);
  if (v17 == 124)
  {
    v18 = 8;
  }
  else
  {
    if (v17 == 126)
    {
LABEL_39:
      a3 = (_BYTE *)v73;
LABEL_6:
      *a3 = 0;
      a3[144] = 0;
      return;
    }
    v18 = 0;
  }
  v84 = v86;
  v85 = 0x200000000;
  if (!sub_1C4A3D0C4(a1, v7, (unsigned __int8 *)(*(_QWORD *)(v10 + 32) + 32), (uint64_t)&v84, v18, 0, 0))
  {
    if (v84 != v86)
      free(v84);
LABEL_26:
    if (**(_WORD **)(v10 + 16) == 65)
    {
      v19 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v10 + 32) + 68), v7);
      if (v20)
      {
        if (!(v19 >> 16))
        {
          if (v19 == 0xFFFF)
            v6 = (int *)(*(_QWORD *)(v10 + 32) + 36);
          v21 = *v6;
          v22 = operator new(0x20uLL);
          v23 = 0;
          v24 = 0;
          *v22 = &off_1E7FAB6A0;
          v22[1] = a1;
          v22[2] = v7;
          *((_DWORD *)v22 + 6) = v21;
          v86[1] = v22;
          v87 = &off_1E7FAB6E8;
          v88 = v18;
          v89[0] = &v87;
          v80 = v82;
          v81 = 0x400000000;
          v25 = v83;
          do
          {
            v26 = v23;
            v27 = (void **)&(&v84)[4 * v24];
            v28 = (void **)v27[3];
            if (v28)
            {
              if (v28 == v27)
              {
                *v25 = v25 - 3;
                (*((void (**)(void **))*v27 + 3))(v27);
              }
              else
              {
                *v25 = (*((uint64_t (**)(void *))*v28 + 2))(v27[3]);
              }
            }
            else
            {
              *v25 = 0;
            }
            v25 += 4;
            v23 = 1;
            v24 = 1;
          }
          while ((v26 & 1) == 0);
          v29 = v81;
          *(_QWORD *)v73 = v73 + 16;
          *(_QWORD *)(v73 + 8) = 0x400000000;
          LODWORD(v81) = v29 + 2;
          if (v29 == -2)
          {
            *(_BYTE *)(v73 + 144) = 1;
LABEL_51:
            v31 = (char *)v80;
          }
          else
          {
            sub_1C48AAD34(v73, (uint64_t)&v80);
            v30 = v81;
            *(_BYTE *)(v73 + 144) = 1;
            v31 = (char *)v80;
            if ((_DWORD)v30)
            {
              v32 = 32 * v30;
              while (1)
              {
                v33 = *(char **)&v31[v32 - 8];
                if (&v31[v32 - 32] == v33)
                  break;
                if (v33)
                {
                  v34 = 5;
                  goto LABEL_47;
                }
LABEL_48:
                v32 -= 32;
                if (!v32)
                  goto LABEL_51;
              }
              v33 = &v31[v32 - 32];
              v34 = 4;
LABEL_47:
              (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
              goto LABEL_48;
            }
          }
          if (v31 != v82)
            free(v31);
          v35 = 0;
          while (1)
          {
            v36 = (uint64_t (***)())v89[v35];
            if (&(&v87)[v35] == v36)
              break;
            if (v36)
            {
              v37 = 5;
LABEL_59:
              (*v36)[v37]();
            }
            v35 -= 4;
            if (v35 == -8)
              return;
          }
          v36 = &(&v87)[v35];
          v37 = 4;
          goto LABEL_59;
        }
      }
    }
    goto LABEL_39;
  }
  v77 = v79;
  v78 = 0x200000000;
  v38 = v85;
  if (!(_DWORD)v85)
    goto LABEL_68;
  v39 = v79;
  v40 = v85;
  if (v85 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v85, 32);
    v40 = v85;
    if (!(_DWORD)v85)
      goto LABEL_67;
    v39 = v77;
  }
  memcpy(v39, v84, 32 * v40);
LABEL_67:
  LODWORD(v78) = v38;
LABEL_68:
  v41 = (char *)operator new(0x58uLL);
  v42 = v41;
  *(_QWORD *)v41 = &off_1E7FAB610;
  v43 = v41 + 24;
  *((_QWORD *)v41 + 1) = v41 + 24;
  v44 = (void **)(v41 + 8);
  *((_QWORD *)v41 + 2) = 0x200000000;
  if (!(_DWORD)v38)
    goto LABEL_75;
  if (v77 != v79)
  {
    *((_QWORD *)v41 + 1) = v77;
    v71 = HIDWORD(v78);
    *((_DWORD *)v41 + 4) = v38;
    *((_DWORD *)v41 + 5) = v71;
    v77 = v79;
    HIDWORD(v78) = 0;
    goto LABEL_74;
  }
  if (v38 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v41 + 8), (uint64_t)v43, v38, 32);
    v46 = v78;
    if (!(_DWORD)v78)
      goto LABEL_73;
    v45 = v77;
    v43 = *v44;
  }
  else
  {
    v45 = v79;
    v46 = v38;
  }
  memcpy(v43, v45, 32 * v46);
LABEL_73:
  *((_DWORD *)v42 + 4) = v38;
LABEL_74:
  LODWORD(v78) = 0;
LABEL_75:
  v79[11] = v42;
  v74 = v76;
  v75 = 0x200000000;
  v47 = v85;
  if (!(_DWORD)v85)
    goto LABEL_79;
  v48 = v76;
  v49 = v85;
  if (v85 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, (uint64_t)v76, v85, 32);
    v49 = v85;
    if (!(_DWORD)v85)
      goto LABEL_78;
    v48 = v74;
  }
  memcpy(v48, v84, 32 * v49);
LABEL_78:
  LODWORD(v75) = v47;
LABEL_79:
  v50 = (char *)operator new(0x58uLL);
  v51 = v50;
  *(_QWORD *)v50 = &off_1E7FAB658;
  v52 = v50 + 24;
  *((_QWORD *)v50 + 1) = v50 + 24;
  v53 = (void **)(v50 + 8);
  *((_QWORD *)v50 + 2) = 0x200000000;
  if (!(_DWORD)v47)
    goto LABEL_86;
  if (v74 != v76)
  {
    *((_QWORD *)v50 + 1) = v74;
    v72 = HIDWORD(v75);
    *((_DWORD *)v50 + 4) = v47;
    *((_DWORD *)v50 + 5) = v72;
    v74 = v76;
    HIDWORD(v75) = 0;
    goto LABEL_85;
  }
  if (v47 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v50 + 8), (uint64_t)v52, v47, 32);
    v55 = v75;
    if (!(_DWORD)v75)
      goto LABEL_84;
    v54 = v74;
    v52 = *v53;
  }
  else
  {
    v54 = v76;
    v55 = v47;
  }
  memcpy(v52, v54, 32 * v55);
LABEL_84:
  *((_DWORD *)v51 + 4) = v47;
LABEL_85:
  LODWORD(v75) = 0;
LABEL_86:
  v56 = 0;
  v57 = 0;
  v79[15] = v51;
  v80 = v82;
  v81 = 0x400000000;
  v58 = v83;
  do
  {
    v59 = v56;
    v60 = &v79[4 * v57 + 8];
    v61 = (_QWORD *)v60[3];
    if (v61)
    {
      if (v61 == v60)
      {
        *v58 = v58 - 3;
        (*(void (**)(_QWORD *))(*v60 + 24))(v60);
      }
      else
      {
        *v58 = (*(uint64_t (**)(_QWORD))(*v61 + 16))(v60[3]);
      }
    }
    else
    {
      *v58 = 0;
    }
    v58 += 4;
    v56 = 1;
    v57 = 1;
  }
  while ((v59 & 1) == 0);
  v62 = v81;
  *(_QWORD *)v73 = v73 + 16;
  *(_QWORD *)(v73 + 8) = 0x400000000;
  LODWORD(v81) = v62 + 2;
  if (v62 == -2)
  {
    *(_BYTE *)(v73 + 144) = 1;
LABEL_107:
    v64 = (char *)v80;
  }
  else
  {
    sub_1C48AAD34(v73, (uint64_t)&v80);
    v63 = v81;
    *(_BYTE *)(v73 + 144) = 1;
    v64 = (char *)v80;
    if ((_DWORD)v63)
    {
      v65 = 32 * v63;
      while (1)
      {
        v66 = *(char **)&v64[v65 - 8];
        if (&v64[v65 - 32] == v66)
          break;
        if (v66)
        {
          v67 = 5;
          goto LABEL_101;
        }
LABEL_102:
        v65 -= 32;
        if (!v65)
          goto LABEL_107;
      }
      v66 = &v64[v65 - 32];
      v67 = 4;
LABEL_101:
      (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
      goto LABEL_102;
    }
  }
  if (v64 != v82)
    free(v64);
  for (i = 0; i != -8; i -= 4)
  {
    v69 = (_QWORD *)v79[i + 15];
    if (&v79[i + 12] == v69)
    {
      v69 = &v79[i + 12];
      v70 = 4;
    }
    else
    {
      if (!v69)
        continue;
      v70 = 5;
    }
    (*(void (**)(void))(*v69 + 8 * v70))();
  }
  if (v74 != v76)
    free(v74);
  if (v77 != v79)
    free(v77);
  if (v84 != v86)
    free(v84);
}

void sub_1C4A3A2E0(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int RegSizeInBits;
  unint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  char *v20;
  char *v21;
  void *v22;
  void **v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unsigned int v28;
  char *v29;
  char *v30;
  void *v31;
  void **v32;
  _BYTE *v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  int v49;
  _QWORD *v50;
  char v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  void **v55;
  void **v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (***v64)();
  uint64_t v65;
  uint64_t i;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  _BYTE v74[64];
  void *v75;
  uint64_t v76;
  _QWORD v77[16];
  void *v78;
  uint64_t v79;
  _BYTE v80[24];
  _BYTE v81[104];
  _QWORD *v82;
  uint64_t v83;
  _QWORD v84[2];
  uint64_t (**v85)();
  int v86;
  _QWORD v87[4];

  v87[3] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a2)
    goto LABEL_6;
  v6 = (int *)(a2 + 4);
  v5 = *(unsigned int *)(a2 + 4);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40);
  v8 = (uint64_t *)((v5 & 0x80000000) != 0
                 ? *(_QWORD *)(v7 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8
                 : *(_QWORD *)(v7 + 272) + 8 * v5);
  v9 = *v8;
  if (!v9)
    goto LABEL_6;
  v71 = (uint64_t)a3;
  if ((*(_BYTE *)(v9 + 3) & 1) == 0)
  {
    v9 = *(_QWORD *)(v9 + 24);
    if (!v9 || (*(_BYTE *)(v9 + 3) & 1) == 0)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
    goto LABEL_6;
  v11 = **(unsigned __int16 **)(v10 + 16);
  if (sub_1C4A3E858(a1, a2))
  {
    sub_1C4A3E93C(v71, a1, a2, 1);
    return;
  }
  v12 = (v11 - 118) > 8 || ((1 << (v11 - 118)) & 0x141) == 0;
  if (v12
    || (v13 = *(_QWORD *)(v10 + 32), *(_BYTE *)(v13 + 32))
    || ((v14 = *(_DWORD *)(v13 + 36), v14 - 1 <= 0x3FFFFFFE)
      ? (v15 = *(_QWORD *)(a1 + 80),
         RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v15 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(a1 + 88), v14, v15)+ 24)+ *(_DWORD *)(v15 + 272)* ((*(_QWORD *)(v15 + 248) - *(_QWORD *)(v15 + 240)) >> 3)))): (RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 80), v14, v7)), RegSizeInBits != 16))
  {
LABEL_65:
    if (**(_WORD **)(v10 + 16) == 65)
    {
      v47 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v10 + 32) + 68), v7);
      if (v48)
      {
        if (!(v47 >> 16))
        {
          if (v47 == 0xFFFF)
            v6 = (int *)(*(_QWORD *)(v10 + 32) + 36);
          v49 = *v6;
          v50 = operator new(0x20uLL);
          v51 = 0;
          v52 = 0;
          *v50 = &off_1E7FAB7C0;
          v50[1] = a1;
          v50[2] = v7;
          *((_DWORD *)v50 + 6) = v49;
          v84[1] = v50;
          v85 = &off_1E7FAB808;
          v86 = 0;
          v87[0] = &v85;
          v78 = v80;
          v79 = 0x400000000;
          v53 = v81;
          do
          {
            v54 = v51;
            v55 = (void **)&(&v82)[4 * v52];
            v56 = (void **)v55[3];
            if (v56)
            {
              if (v56 == v55)
              {
                *v53 = v53 - 3;
                (*((void (**)(void **))*v55 + 3))(v55);
              }
              else
              {
                *v53 = (*((uint64_t (**)(void *))*v56 + 2))(v55[3]);
              }
            }
            else
            {
              *v53 = 0;
            }
            v53 += 4;
            v51 = 1;
            v52 = 1;
          }
          while ((v54 & 1) == 0);
          v57 = v79;
          *(_QWORD *)v71 = v71 + 16;
          *(_QWORD *)(v71 + 8) = 0x400000000;
          LODWORD(v79) = v57 + 2;
          if (v57 == -2)
          {
            *(_BYTE *)(v71 + 144) = 1;
LABEL_90:
            v59 = (char *)v78;
          }
          else
          {
            sub_1C48AAD34(v71, (uint64_t)&v78);
            v58 = v79;
            *(_BYTE *)(v71 + 144) = 1;
            v59 = (char *)v78;
            if ((_DWORD)v58)
            {
              v60 = 32 * v58;
              while (1)
              {
                v61 = *(char **)&v59[v60 - 8];
                if (&v59[v60 - 32] == v61)
                  break;
                if (v61)
                {
                  v62 = 5;
                  goto LABEL_86;
                }
LABEL_87:
                v60 -= 32;
                if (!v60)
                  goto LABEL_90;
              }
              v61 = &v59[v60 - 32];
              v62 = 4;
LABEL_86:
              (*(void (**)(void))(*(_QWORD *)v61 + 8 * v62))();
              goto LABEL_87;
            }
          }
          if (v59 != v80)
            free(v59);
          v63 = 0;
          while (1)
          {
            v64 = (uint64_t (***)())v87[v63];
            if (&(&v85)[v63] == v64)
              break;
            if (v64)
            {
              v65 = 5;
LABEL_98:
              (*v64)[v65]();
            }
            v63 -= 4;
            if (v63 == -8)
              return;
          }
          v64 = &(&v85)[v63];
          v65 = 4;
          goto LABEL_98;
        }
      }
    }
    a3 = (_BYTE *)v71;
LABEL_6:
    *a3 = 0;
    a3[144] = 0;
    return;
  }
  v82 = v84;
  v83 = 0x200000000;
  if (!sub_1C4A3D0C4(a1, v7, (unsigned __int8 *)(*(_QWORD *)(v10 + 32) + 32), (uint64_t)&v82, 0, 0, 0))
  {
    if (v82 != v84)
      free(v82);
    goto LABEL_65;
  }
  v75 = v77;
  v76 = 0x200000000;
  v17 = v83;
  if (!(_DWORD)v83)
    goto LABEL_27;
  v18 = v77;
  v19 = v83;
  if (v83 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, (uint64_t)v77, v83, 32);
    v19 = v83;
    if (!(_DWORD)v83)
      goto LABEL_26;
    v18 = v75;
  }
  memcpy(v18, v82, 32 * v19);
LABEL_26:
  LODWORD(v76) = v17;
LABEL_27:
  v20 = (char *)operator new(0x58uLL);
  v21 = v20;
  *(_QWORD *)v20 = &off_1E7FAB730;
  v22 = v20 + 24;
  *((_QWORD *)v20 + 1) = v20 + 24;
  v23 = (void **)(v20 + 8);
  *((_QWORD *)v20 + 2) = 0x200000000;
  if (!(_DWORD)v17)
    goto LABEL_34;
  if (v75 != v77)
  {
    *((_QWORD *)v20 + 1) = v75;
    v69 = HIDWORD(v76);
    *((_DWORD *)v20 + 4) = v17;
    *((_DWORD *)v20 + 5) = v69;
    v75 = v77;
    HIDWORD(v76) = 0;
    goto LABEL_33;
  }
  if (v17 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v20 + 8), (uint64_t)v22, v17, 32);
    v25 = v76;
    if (!(_DWORD)v76)
      goto LABEL_32;
    v24 = v75;
    v22 = *v23;
  }
  else
  {
    v24 = v77;
    v25 = v17;
  }
  memcpy(v22, v24, 32 * v25);
LABEL_32:
  *((_DWORD *)v21 + 4) = v17;
LABEL_33:
  LODWORD(v76) = 0;
LABEL_34:
  v77[11] = v21;
  v72 = v74;
  v73 = 0x200000000;
  v26 = v83;
  if (!(_DWORD)v83)
    goto LABEL_38;
  v27 = v74;
  v28 = v83;
  if (v83 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, (uint64_t)v74, v83, 32);
    v28 = v83;
    if (!(_DWORD)v83)
      goto LABEL_37;
    v27 = v72;
  }
  memcpy(v27, v82, 32 * v28);
LABEL_37:
  LODWORD(v73) = v26;
LABEL_38:
  v29 = (char *)operator new(0x58uLL);
  v30 = v29;
  *(_QWORD *)v29 = &off_1E7FAB778;
  v31 = v29 + 24;
  *((_QWORD *)v29 + 1) = v29 + 24;
  v32 = (void **)(v29 + 8);
  *((_QWORD *)v29 + 2) = 0x200000000;
  if (!(_DWORD)v26)
    goto LABEL_45;
  if (v72 != v74)
  {
    *((_QWORD *)v29 + 1) = v72;
    v70 = HIDWORD(v73);
    *((_DWORD *)v29 + 4) = v26;
    *((_DWORD *)v29 + 5) = v70;
    v72 = v74;
    HIDWORD(v73) = 0;
    goto LABEL_44;
  }
  if (v26 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v29 + 8), (uint64_t)v31, v26, 32);
    v34 = v73;
    if (!(_DWORD)v73)
      goto LABEL_43;
    v33 = v72;
    v31 = *v32;
  }
  else
  {
    v33 = v74;
    v34 = v26;
  }
  memcpy(v31, v33, 32 * v34);
LABEL_43:
  *((_DWORD *)v30 + 4) = v26;
LABEL_44:
  LODWORD(v73) = 0;
LABEL_45:
  v35 = 0;
  v36 = 0;
  v77[15] = v30;
  v78 = v80;
  v79 = 0x400000000;
  v37 = v81;
  do
  {
    v38 = v35;
    v39 = &v77[4 * v36 + 8];
    v40 = (_QWORD *)v39[3];
    if (v40)
    {
      if (v40 == v39)
      {
        *v37 = v37 - 3;
        (*(void (**)(_QWORD *))(*v39 + 24))(v39);
      }
      else
      {
        *v37 = (*(uint64_t (**)(_QWORD))(*v40 + 16))(v39[3]);
      }
    }
    else
    {
      *v37 = 0;
    }
    v37 += 4;
    v35 = 1;
    v36 = 1;
  }
  while ((v38 & 1) == 0);
  v41 = v79;
  *(_QWORD *)v71 = v71 + 16;
  *(_QWORD *)(v71 + 8) = 0x400000000;
  LODWORD(v79) = v41 + 2;
  if (v41 == -2)
  {
    *(_BYTE *)(v71 + 144) = 1;
LABEL_102:
    v43 = (char *)v78;
  }
  else
  {
    sub_1C48AAD34(v71, (uint64_t)&v78);
    v42 = v79;
    *(_BYTE *)(v71 + 144) = 1;
    v43 = (char *)v78;
    if ((_DWORD)v42)
    {
      v44 = 32 * v42;
      while (1)
      {
        v45 = *(char **)&v43[v44 - 8];
        if (&v43[v44 - 32] == v45)
          break;
        if (v45)
        {
          v46 = 5;
          goto LABEL_60;
        }
LABEL_61:
        v44 -= 32;
        if (!v44)
          goto LABEL_102;
      }
      v45 = &v43[v44 - 32];
      v46 = 4;
LABEL_60:
      (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
      goto LABEL_61;
    }
  }
  if (v43 != v80)
    free(v43);
  for (i = 0; i != -8; i -= 4)
  {
    v67 = (_QWORD *)v77[i + 15];
    if (&v77[i + 12] == v67)
    {
      v67 = &v77[i + 12];
      v68 = 4;
    }
    else
    {
      if (!v67)
        continue;
      v68 = 5;
    }
    (*(void (**)(void))(*v67 + 8 * v68))();
  }
  if (v72 != v74)
    free(v72);
  if (v75 != v77)
    free(v75);
  if (v82 != v84)
    free(v82);
}

uint64_t sub_1C4A3AAC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4A3BEBC(a3, a1, a2, 1);
}

void sub_1C4A3AAD8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  char *v7;
  char *v8;
  void *v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  void *v18;
  _BYTE *v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t i;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  void **v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42;
  uint64_t v43;
  _QWORD v44[16];
  void *v45;
  uint64_t v46;
  _BYTE v47[24];
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD v51[9];

  v51[8] = *MEMORY[0x1E0C80C00];
  v49 = v51;
  v50 = 0x200000000;
  if ((sub_1C4A3FE10(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40), (__int128 *)a2, (uint64_t)&v49) & 1) == 0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 144) = 0;
    goto LABEL_58;
  }
  v42 = v44;
  v43 = 0x200000000;
  v4 = v50;
  if ((_DWORD)v50)
  {
    v5 = v44;
    v6 = v50;
    if (v50 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v50, 32);
      v6 = v50;
      if (!(_DWORD)v50)
        goto LABEL_5;
      v5 = v42;
    }
    memcpy(v5, v49, 32 * v6);
LABEL_5:
    LODWORD(v43) = v4;
  }
  v7 = (char *)operator new(0x58uLL);
  v8 = v7;
  *(_QWORD *)v7 = &off_1E7FAB850;
  v9 = v7 + 24;
  *((_QWORD *)v7 + 1) = v7 + 24;
  v10 = (void **)(v7 + 8);
  *((_QWORD *)v7 + 2) = 0x200000000;
  if (!(_DWORD)v4)
    goto LABEL_13;
  if (v42 != v44)
  {
    *((_QWORD *)v7 + 1) = v42;
    v36 = HIDWORD(v43);
    *((_DWORD *)v7 + 4) = v4;
    *((_DWORD *)v7 + 5) = v36;
    v42 = v44;
    HIDWORD(v43) = 0;
    goto LABEL_12;
  }
  if (v4 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v7 + 8), (uint64_t)v9, v4, 32);
    v12 = v43;
    if (!(_DWORD)v43)
      goto LABEL_11;
    v11 = v42;
    v9 = *v10;
  }
  else
  {
    v11 = v44;
    v12 = v4;
  }
  memcpy(v9, v11, 32 * v12);
LABEL_11:
  *((_DWORD *)v8 + 4) = v4;
LABEL_12:
  LODWORD(v43) = 0;
LABEL_13:
  v44[11] = v8;
  v39 = v41;
  v40 = 0x200000000;
  v13 = v50;
  if (!(_DWORD)v50)
    goto LABEL_17;
  v14 = v41;
  v15 = v50;
  if (v50 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v50, 32);
    v15 = v50;
    if (!(_DWORD)v50)
      goto LABEL_16;
    v14 = v39;
  }
  memcpy(v14, v49, 32 * v15);
LABEL_16:
  LODWORD(v40) = v13;
LABEL_17:
  v16 = (char *)operator new(0x58uLL);
  v17 = v16;
  *(_QWORD *)v16 = &off_1E7FAB898;
  v18 = v16 + 24;
  *((_QWORD *)v16 + 1) = v16 + 24;
  *((_QWORD *)v16 + 2) = 0x200000000;
  if (!(_DWORD)v13)
    goto LABEL_24;
  if (v39 != v41)
  {
    *((_QWORD *)v16 + 1) = v39;
    v37 = HIDWORD(v40);
    *((_DWORD *)v16 + 4) = v13;
    *((_DWORD *)v16 + 5) = v37;
    v39 = v41;
    HIDWORD(v40) = 0;
    goto LABEL_23;
  }
  if (v13 >= 3)
  {
    v38 = (void **)(v16 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v16 + 8), (uint64_t)v18, v13, 32);
    v20 = v40;
    if (!(_DWORD)v40)
      goto LABEL_22;
    v19 = v39;
    v18 = *v38;
  }
  else
  {
    v19 = v41;
    v20 = v13;
  }
  memcpy(v18, v19, 32 * v20);
LABEL_22:
  *((_DWORD *)v17 + 4) = v13;
LABEL_23:
  LODWORD(v40) = 0;
LABEL_24:
  v21 = 0;
  v22 = 0;
  v44[15] = v17;
  v45 = v47;
  v46 = 0x400000000;
  v23 = &v48;
  do
  {
    v24 = v21;
    v25 = &v44[4 * v22 + 8];
    v26 = (_QWORD *)v25[3];
    if (v26)
    {
      if (v26 == v25)
      {
        *v23 = (uint64_t)(v23 - 3);
        (*(void (**)(_QWORD *))(*v25 + 24))(v25);
      }
      else
      {
        *v23 = (*(uint64_t (**)(_QWORD))(*v26 + 16))(v25[3]);
      }
    }
    else
    {
      *v23 = 0;
    }
    v23 += 4;
    v21 = 1;
    v22 = 1;
  }
  while ((v24 & 1) == 0);
  v27 = v46;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  LODWORD(v46) = v27 + 2;
  if (v27 == -2)
  {
    *(_BYTE *)(a3 + 144) = 1;
LABEL_44:
    v29 = (char *)v45;
  }
  else
  {
    sub_1C48AAD34(a3, (uint64_t)&v45);
    v28 = v46;
    *(_BYTE *)(a3 + 144) = 1;
    v29 = (char *)v45;
    if ((_DWORD)v28)
    {
      v30 = 32 * v28;
      while (1)
      {
        v31 = *(char **)&v29[v30 - 8];
        if (&v29[v30 - 32] == v31)
          break;
        if (v31)
        {
          v32 = 5;
          goto LABEL_40;
        }
LABEL_41:
        v30 -= 32;
        if (!v30)
          goto LABEL_44;
      }
      v31 = &v29[v30 - 32];
      v32 = 4;
LABEL_40:
      (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
      goto LABEL_41;
    }
  }
  if (v29 != v47)
    free(v29);
  for (i = 0; i != -8; i -= 4)
  {
    v34 = (_QWORD *)v44[i + 15];
    if (&v44[i + 12] == v34)
    {
      v34 = &v44[i + 12];
      v35 = 4;
    }
    else
    {
      if (!v34)
        continue;
      v35 = 5;
    }
    (*(void (**)(void))(*v34 + 8 * v35))();
  }
  if (v39 != v41)
    free(v39);
  if (v42 != v44)
    free(v42);
LABEL_58:
  if (v49 != v51)
    free(v49);
}

uint64_t sub_1C4A3AF2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4A3E93C(a3, a1, a2, 1);
}

void sub_1C4A3AF40(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  _OWORD *v8;
  char *v9;
  __int128 v10;
  _OWORD *v11;
  char *v12;
  __int128 v13;
  int v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  char *v18;
  char *v19;
  void *v20;
  void **v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  unsigned int v26;
  char *v27;
  char *v28;
  void *v29;
  _BYTE *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t i;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  int v48;
  void **v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[64];
  void *v55;
  uint64_t v56;
  _QWORD v57[16];
  __int128 v58;
  __int128 v59;
  char v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD v64[9];

  v64[8] = *MEMORY[0x1E0C80C00];
  v62 = (char *)v64;
  v63 = 0x200000000;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40);
  if (sub_1C4A3E858(a1, a2))
  {
    sub_1C4A3E93C(a3, a1, a2, 0);
    goto LABEL_61;
  }
  v7 = *(_OWORD *)(a2 + 16);
  v50 = *(_OWORD *)a2;
  v51 = v7;
  if (!(_BYTE)v50)
  {
    sub_1C4A3CBB8((uint64_t)&v58, DWORD1(v50), v6);
    if (v60)
    {
      v50 = v58;
      v51 = v59;
    }
  }
  v8 = (_OWORD *)sub_1C47C0F60((uint64_t)&v62, (unint64_t)&v50, 1);
  v9 = &v62[32 * v63];
  v10 = v8[1];
  *(_OWORD *)v9 = *v8;
  *((_OWORD *)v9 + 1) = v10;
  LODWORD(v63) = v63 + 1;
  LODWORD(v58) = 1;
  *((_QWORD *)&v58 + 1) = 0;
  *(_QWORD *)&v59 = 0;
  v11 = (_OWORD *)sub_1C47C0F60((uint64_t)&v62, (unint64_t)&v58, 1);
  v12 = &v62[32 * v63];
  v13 = v11[1];
  *(_OWORD *)v12 = *v11;
  *((_OWORD *)v12 + 1) = v13;
  v14 = v63;
  v55 = v57;
  v56 = 0x200000000;
  v15 = (v63 + 1);
  LODWORD(v63) = v63 + 1;
  if (v14 != -1)
  {
    v16 = v57;
    v17 = v14 + 1;
    if (v15 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, (uint64_t)v57, v15, 32);
      v17 = v63;
      if (!(_DWORD)v63)
        goto LABEL_9;
      v16 = v55;
    }
    memcpy(v16, v62, 32 * v17);
LABEL_9:
    LODWORD(v56) = v15;
  }
  v18 = (char *)operator new(0x58uLL);
  v19 = v18;
  *(_QWORD *)v18 = &off_1E7FAB8E0;
  v20 = v18 + 24;
  *((_QWORD *)v18 + 1) = v18 + 24;
  v21 = (void **)(v18 + 8);
  *((_QWORD *)v18 + 2) = 0x200000000;
  if (!(_DWORD)v15)
    goto LABEL_17;
  if (v55 != v57)
  {
    *((_QWORD *)v18 + 1) = v55;
    v47 = HIDWORD(v56);
    *((_DWORD *)v18 + 4) = v15;
    *((_DWORD *)v18 + 5) = v47;
    v55 = v57;
    HIDWORD(v56) = 0;
    goto LABEL_16;
  }
  if (v15 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v18 + 8), (uint64_t)v20, v15, 32);
    v23 = v56;
    if (!(_DWORD)v56)
      goto LABEL_15;
    v22 = v55;
    v20 = *v21;
  }
  else
  {
    v22 = v57;
    v23 = v15;
  }
  memcpy(v20, v22, 32 * v23);
LABEL_15:
  *((_DWORD *)v19 + 4) = v15;
LABEL_16:
  LODWORD(v56) = 0;
LABEL_17:
  v57[11] = v19;
  v52 = v54;
  v53 = 0x200000000;
  v24 = v63;
  if (!(_DWORD)v63)
    goto LABEL_21;
  v25 = v54;
  v26 = v63;
  if (v63 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v63, 32);
    v26 = v63;
    if (!(_DWORD)v63)
      goto LABEL_20;
    v25 = v52;
  }
  memcpy(v25, v62, 32 * v26);
LABEL_20:
  LODWORD(v53) = v24;
LABEL_21:
  v27 = (char *)operator new(0x58uLL);
  v28 = v27;
  *(_QWORD *)v27 = &off_1E7FAB928;
  v29 = v27 + 24;
  *((_QWORD *)v27 + 1) = v27 + 24;
  *((_QWORD *)v27 + 2) = 0x200000000;
  if (!(_DWORD)v24)
    goto LABEL_28;
  if (v52 != v54)
  {
    *((_QWORD *)v27 + 1) = v52;
    v48 = HIDWORD(v53);
    *((_DWORD *)v27 + 4) = v24;
    *((_DWORD *)v27 + 5) = v48;
    v52 = v54;
    HIDWORD(v53) = 0;
    goto LABEL_27;
  }
  if (v24 >= 3)
  {
    v49 = (void **)(v27 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v27 + 8), (uint64_t)v29, v24, 32);
    v31 = v53;
    if (!(_DWORD)v53)
      goto LABEL_26;
    v30 = v52;
    v29 = *v49;
  }
  else
  {
    v30 = v54;
    v31 = v24;
  }
  memcpy(v29, v30, 32 * v31);
LABEL_26:
  *((_DWORD *)v28 + 4) = v24;
LABEL_27:
  LODWORD(v53) = 0;
LABEL_28:
  v32 = 0;
  v33 = 0;
  v57[15] = v28;
  *(_QWORD *)&v58 = &v59;
  *((_QWORD *)&v58 + 1) = 0x400000000;
  v34 = &v61;
  do
  {
    v35 = v32;
    v36 = &v57[4 * v33 + 8];
    v37 = (_QWORD *)v36[3];
    if (v37)
    {
      if (v37 == v36)
      {
        *v34 = (uint64_t)(v34 - 3);
        (*(void (**)(_QWORD *))(*v36 + 24))(v36);
      }
      else
      {
        *v34 = (*(uint64_t (**)(_QWORD))(*v37 + 16))(v36[3]);
      }
    }
    else
    {
      *v34 = 0;
    }
    v34 += 4;
    v32 = 1;
    v33 = 1;
  }
  while ((v35 & 1) == 0);
  v38 = DWORD2(v58);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  DWORD2(v58) = v38 + 2;
  if (v38 == -2)
  {
    *(_BYTE *)(a3 + 144) = 1;
LABEL_47:
    v40 = (char *)v58;
  }
  else
  {
    sub_1C48AAD34(a3, (uint64_t)&v58);
    v39 = DWORD2(v58);
    *(_BYTE *)(a3 + 144) = 1;
    v40 = (char *)v58;
    if ((_DWORD)v39)
    {
      v41 = 32 * v39;
      while (1)
      {
        v42 = *(char **)&v40[v41 - 8];
        if (&v40[v41 - 32] == v42)
          break;
        if (v42)
        {
          v43 = 5;
          goto LABEL_43;
        }
LABEL_44:
        v41 -= 32;
        if (!v41)
          goto LABEL_47;
      }
      v42 = &v40[v41 - 32];
      v43 = 4;
LABEL_43:
      (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
      goto LABEL_44;
    }
  }
  if (v40 != (char *)&v59)
    free(v40);
  for (i = 0; i != -8; i -= 4)
  {
    v45 = (_QWORD *)v57[i + 15];
    if (&v57[i + 12] == v45)
    {
      v45 = &v57[i + 12];
      v46 = 4;
    }
    else
    {
      if (!v45)
        continue;
      v46 = 5;
    }
    (*(void (**)(void))(*v45 + 8 * v46))();
  }
  if (v52 != v54)
    free(v52);
  if (v55 != v57)
    free(v55);
LABEL_61:
  if (v62 != (char *)v64)
    free(v62);
}

void sub_1C4A3B43C(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _OWORD *v5;
  char *v6;
  __int128 v7;
  _OWORD *v8;
  char *v9;
  __int128 v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  char *v15;
  char *v16;
  void *v17;
  void **v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  char *v24;
  char *v25;
  void *v26;
  _BYTE *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t i;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  int v45;
  void **v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  uint64_t v50;
  _BYTE v51[64];
  void *v52;
  uint64_t v53;
  _QWORD v54[16];
  __int128 v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD v61[9];

  v61[8] = *MEMORY[0x1E0C80C00];
  v59 = (char *)v61;
  v60 = 0x200000000;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 32) + 40);
  v4 = a1[1];
  v47 = *a1;
  v48 = v4;
  if (!(_BYTE)v47)
  {
    sub_1C4A3CBB8((uint64_t)&v55, DWORD1(v47), v3);
    if (v57)
    {
      v47 = v55;
      v48 = v56;
    }
  }
  v5 = (_OWORD *)sub_1C47C0F60((uint64_t)&v59, (unint64_t)&v47, 1);
  v6 = &v59[32 * v60];
  v7 = v5[1];
  *(_OWORD *)v6 = *v5;
  *((_OWORD *)v6 + 1) = v7;
  LODWORD(v60) = v60 + 1;
  LODWORD(v55) = 1;
  *((_QWORD *)&v55 + 1) = 0;
  *(_QWORD *)&v56 = 0;
  v8 = (_OWORD *)sub_1C47C0F60((uint64_t)&v59, (unint64_t)&v55, 1);
  v9 = &v59[32 * v60];
  v10 = v8[1];
  *(_OWORD *)v9 = *v8;
  *((_OWORD *)v9 + 1) = v10;
  v11 = v60;
  v52 = v54;
  v53 = 0x200000000;
  v12 = (v60 + 1);
  LODWORD(v60) = v60 + 1;
  if (v11 != -1)
  {
    v13 = v54;
    v14 = v11 + 1;
    if (v12 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v12, 32);
      v14 = v60;
      if (!(_DWORD)v60)
        goto LABEL_7;
      v13 = v52;
    }
    memcpy(v13, v59, 32 * v14);
LABEL_7:
    LODWORD(v53) = v12;
  }
  v15 = (char *)operator new(0x58uLL);
  v16 = v15;
  *(_QWORD *)v15 = &off_1E7FAB970;
  v17 = v15 + 24;
  *((_QWORD *)v15 + 1) = v15 + 24;
  v18 = (void **)(v15 + 8);
  *((_QWORD *)v15 + 2) = 0x200000000;
  if (!(_DWORD)v12)
    goto LABEL_15;
  if (v52 != v54)
  {
    *((_QWORD *)v15 + 1) = v52;
    v44 = HIDWORD(v53);
    *((_DWORD *)v15 + 4) = v12;
    *((_DWORD *)v15 + 5) = v44;
    v52 = v54;
    HIDWORD(v53) = 0;
    goto LABEL_14;
  }
  if (v12 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v15 + 8), (uint64_t)v17, v12, 32);
    v20 = v53;
    if (!(_DWORD)v53)
      goto LABEL_13;
    v19 = v52;
    v17 = *v18;
  }
  else
  {
    v19 = v54;
    v20 = v12;
  }
  memcpy(v17, v19, 32 * v20);
LABEL_13:
  *((_DWORD *)v16 + 4) = v12;
LABEL_14:
  LODWORD(v53) = 0;
LABEL_15:
  v54[11] = v16;
  v49 = v51;
  v50 = 0x200000000;
  v21 = v60;
  if (!(_DWORD)v60)
    goto LABEL_19;
  v22 = v51;
  v23 = v60;
  if (v60 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, (uint64_t)v51, v60, 32);
    v23 = v60;
    if (!(_DWORD)v60)
      goto LABEL_18;
    v22 = v49;
  }
  memcpy(v22, v59, 32 * v23);
LABEL_18:
  LODWORD(v50) = v21;
LABEL_19:
  v24 = (char *)operator new(0x58uLL);
  v25 = v24;
  *(_QWORD *)v24 = &off_1E7FAB9B8;
  v26 = v24 + 24;
  *((_QWORD *)v24 + 1) = v24 + 24;
  *((_QWORD *)v24 + 2) = 0x200000000;
  if (!(_DWORD)v21)
    goto LABEL_26;
  if (v49 != v51)
  {
    *((_QWORD *)v24 + 1) = v49;
    v45 = HIDWORD(v50);
    *((_DWORD *)v24 + 4) = v21;
    *((_DWORD *)v24 + 5) = v45;
    v49 = v51;
    HIDWORD(v50) = 0;
    goto LABEL_25;
  }
  if (v21 >= 3)
  {
    v46 = (void **)(v24 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v24 + 8), (uint64_t)v26, v21, 32);
    v28 = v50;
    if (!(_DWORD)v50)
      goto LABEL_24;
    v27 = v49;
    v26 = *v46;
  }
  else
  {
    v27 = v51;
    v28 = v21;
  }
  memcpy(v26, v27, 32 * v28);
LABEL_24:
  *((_DWORD *)v25 + 4) = v21;
LABEL_25:
  LODWORD(v50) = 0;
LABEL_26:
  v29 = 0;
  v30 = 0;
  v54[15] = v25;
  *(_QWORD *)&v55 = &v56;
  *((_QWORD *)&v55 + 1) = 0x400000000;
  v31 = &v58;
  do
  {
    v32 = v29;
    v33 = &v54[4 * v30 + 8];
    v34 = (_QWORD *)v33[3];
    if (v34)
    {
      if (v34 == v33)
      {
        *v31 = (uint64_t)(v31 - 3);
        (*(void (**)(_QWORD *))(*v33 + 24))(v33);
      }
      else
      {
        *v31 = (*(uint64_t (**)(_QWORD))(*v34 + 16))(v33[3]);
      }
    }
    else
    {
      *v31 = 0;
    }
    v31 += 4;
    v29 = 1;
    v30 = 1;
  }
  while ((v32 & 1) == 0);
  v35 = DWORD2(v55);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  DWORD2(v55) = v35 + 2;
  if (v35 == -2)
  {
    *(_BYTE *)(a2 + 144) = 1;
LABEL_45:
    v37 = (char *)v55;
  }
  else
  {
    sub_1C48AAD34(a2, (uint64_t)&v55);
    v36 = DWORD2(v55);
    *(_BYTE *)(a2 + 144) = 1;
    v37 = (char *)v55;
    if ((_DWORD)v36)
    {
      v38 = 32 * v36;
      while (1)
      {
        v39 = *(char **)&v37[v38 - 8];
        if (&v37[v38 - 32] == v39)
          break;
        if (v39)
        {
          v40 = 5;
          goto LABEL_41;
        }
LABEL_42:
        v38 -= 32;
        if (!v38)
          goto LABEL_45;
      }
      v39 = &v37[v38 - 32];
      v40 = 4;
LABEL_41:
      (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
      goto LABEL_42;
    }
  }
  if (v37 != (char *)&v56)
    free(v37);
  for (i = 0; i != -8; i -= 4)
  {
    v42 = (_QWORD *)v54[i + 15];
    if (&v54[i + 12] == v42)
    {
      v42 = &v54[i + 12];
      v43 = 4;
    }
    else
    {
      if (!v42)
        continue;
      v43 = 5;
    }
    (*(void (**)(void))(*v42 + 8 * v43))();
  }
  if (v49 != v51)
    free(v49);
  if (v52 != v54)
    free(v52);
  if (v59 != (char *)v61)
    free(v59);
}

void sub_1C4A3B90C(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int RegSizeInBits;
  char v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  char *v22;
  char *v23;
  void *v24;
  void **v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  char *v31;
  char *v32;
  void *v33;
  void **v34;
  _BYTE *v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t i;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  int v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[64];
  void *v57;
  uint64_t v58;
  _QWORD v59[16];
  void *v60;
  uint64_t v61;
  _BYTE v62[24];
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD v66[9];

  v66[8] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40);
  v64 = v66;
  v65 = 0x200000000;
  if (*(_BYTE *)a2)
    goto LABEL_6;
  v5 = *(unsigned int *)(a2 + 4);
  v6 = (uint64_t *)((v5 & 0x80000000) != 0
                 ? *(_QWORD *)(v3 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8
                 : *(_QWORD *)(v3 + 272) + 8 * v5);
  v7 = *v6;
  if (!v7)
    goto LABEL_6;
  v8 = (uint64_t)a3;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
  {
    v7 = *(_QWORD *)(v7 + 24);
    if (!v7 || (*(_BYTE *)(v7 + 3) & 1) == 0)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9)
    goto LABEL_6;
  v10 = **(unsigned __int16 **)(v9 + 16) - 118;
  v11 = v10 > 8;
  v12 = (1 << v10) & 0x141;
  v13 = v11 || v12 == 0;
  if (v13
    || (v14 = *(_QWORD *)(v9 + 32), *(_BYTE *)(v14 + 32))
    || ((v15 = *(_DWORD *)(v14 + 36), v15 - 1 <= 0x3FFFFFFE)
      ? (v16 = *(_QWORD *)(a1 + 80),
         RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v16 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(a1 + 88), v15, v16)+ 24)+ *(_DWORD *)(v16 + 272)* ((*(_QWORD *)(v16 + 248) - *(_QWORD *)(v16 + 240)) >> 3)))): (RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 80), v15, v3)), (a3 = (_BYTE *)v8, RegSizeInBits != 32)|| (v18 = sub_1C4A3D0C4(a1, v3, (unsigned __int8 *)(*(_QWORD *)(v9 + 32) + 32), (uint64_t)&v64, 8 * (**(_WORD **)(v9 + 16) == 124), 0, 0), a3 = (_BYTE *)v8, (v18 & 1) == 0)))
  {
LABEL_6:
    *a3 = 0;
    a3[144] = 0;
    goto LABEL_7;
  }
  v57 = v59;
  v58 = 0x200000000;
  v19 = v65;
  if ((_DWORD)v65)
  {
    v20 = v59;
    v21 = v65;
    if (v65 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v65, 32);
      v21 = v65;
      if (!(_DWORD)v65)
        goto LABEL_26;
      v20 = v57;
    }
    memcpy(v20, v64, 32 * v21);
LABEL_26:
    LODWORD(v58) = v19;
  }
  v22 = (char *)operator new(0x58uLL);
  v23 = v22;
  *(_QWORD *)v22 = &off_1E7FABA00;
  v24 = v22 + 24;
  *((_QWORD *)v22 + 1) = v22 + 24;
  v25 = (void **)(v22 + 8);
  *((_QWORD *)v22 + 2) = 0x200000000;
  if (!(_DWORD)v19)
    goto LABEL_34;
  if (v57 != v59)
  {
    *((_QWORD *)v22 + 1) = v57;
    v52 = HIDWORD(v58);
    *((_DWORD *)v22 + 4) = v19;
    *((_DWORD *)v22 + 5) = v52;
    v57 = v59;
    HIDWORD(v58) = 0;
    goto LABEL_33;
  }
  if (v19 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v22 + 8), (uint64_t)v24, v19, 32);
    v27 = v58;
    if (!(_DWORD)v58)
      goto LABEL_32;
    v26 = v57;
    v24 = *v25;
  }
  else
  {
    v26 = v59;
    v27 = v19;
  }
  memcpy(v24, v26, 32 * v27);
LABEL_32:
  *((_DWORD *)v23 + 4) = v19;
LABEL_33:
  LODWORD(v58) = 0;
LABEL_34:
  v59[11] = v23;
  v54 = v56;
  v55 = 0x200000000;
  v28 = v65;
  if (!(_DWORD)v65)
    goto LABEL_38;
  v29 = v56;
  v30 = v65;
  if (v65 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v65, 32);
    v30 = v65;
    if (!(_DWORD)v65)
      goto LABEL_37;
    v29 = v54;
  }
  memcpy(v29, v64, 32 * v30);
LABEL_37:
  LODWORD(v55) = v28;
LABEL_38:
  v31 = (char *)operator new(0x58uLL);
  v32 = v31;
  *(_QWORD *)v31 = &off_1E7FABA48;
  v33 = v31 + 24;
  *((_QWORD *)v31 + 1) = v31 + 24;
  v34 = (void **)(v31 + 8);
  *((_QWORD *)v31 + 2) = 0x200000000;
  if (!(_DWORD)v28)
    goto LABEL_45;
  if (v54 != v56)
  {
    *((_QWORD *)v31 + 1) = v54;
    v53 = HIDWORD(v55);
    *((_DWORD *)v31 + 4) = v28;
    *((_DWORD *)v31 + 5) = v53;
    v54 = v56;
    HIDWORD(v55) = 0;
    goto LABEL_44;
  }
  if (v28 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v31 + 8), (uint64_t)v33, v28, 32);
    v36 = v55;
    if (!(_DWORD)v55)
      goto LABEL_43;
    v35 = v54;
    v33 = *v34;
  }
  else
  {
    v35 = v56;
    v36 = v28;
  }
  memcpy(v33, v35, 32 * v36);
LABEL_43:
  *((_DWORD *)v32 + 4) = v28;
LABEL_44:
  LODWORD(v55) = 0;
LABEL_45:
  v37 = 0;
  v38 = 0;
  v59[15] = v32;
  v60 = v62;
  v61 = 0x400000000;
  v39 = &v63;
  do
  {
    v40 = v37;
    v41 = &v59[4 * v38 + 8];
    v42 = (_QWORD *)v41[3];
    if (v42)
    {
      if (v42 == v41)
      {
        *v39 = (uint64_t)(v39 - 3);
        (*(void (**)(_QWORD *))(*v41 + 24))(v41);
      }
      else
      {
        *v39 = (*(uint64_t (**)(_QWORD))(*v42 + 16))(v41[3]);
      }
    }
    else
    {
      *v39 = 0;
    }
    v39 += 4;
    v37 = 1;
    v38 = 1;
  }
  while ((v40 & 1) == 0);
  v43 = v61;
  *(_QWORD *)v8 = v8 + 16;
  *(_QWORD *)(v8 + 8) = 0x400000000;
  LODWORD(v61) = v43 + 2;
  if (v43 == -2)
  {
    *(_BYTE *)(v8 + 144) = 1;
LABEL_64:
    v45 = (char *)v60;
  }
  else
  {
    sub_1C48AAD34(v8, (uint64_t)&v60);
    v44 = v61;
    *(_BYTE *)(v8 + 144) = 1;
    v45 = (char *)v60;
    if ((_DWORD)v44)
    {
      v46 = 32 * v44;
      while (1)
      {
        v47 = *(char **)&v45[v46 - 8];
        if (&v45[v46 - 32] == v47)
          break;
        if (v47)
        {
          v48 = 5;
          goto LABEL_60;
        }
LABEL_61:
        v46 -= 32;
        if (!v46)
          goto LABEL_64;
      }
      v47 = &v45[v46 - 32];
      v48 = 4;
LABEL_60:
      (*(void (**)(void))(*(_QWORD *)v47 + 8 * v48))();
      goto LABEL_61;
    }
  }
  if (v45 != v62)
    free(v45);
  for (i = 0; i != -8; i -= 4)
  {
    v50 = (_QWORD *)v59[i + 15];
    if (&v59[i + 12] == v50)
    {
      v50 = &v59[i + 12];
      v51 = 4;
    }
    else
    {
      if (!v50)
        continue;
      v51 = 5;
    }
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  if (v54 != v56)
    free(v54);
  if (v57 != v59)
    free(v57);
LABEL_7:
  if (v64 != v66)
    free(v64);
}

uint64_t sub_1C4A3BEBC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  BOOL v12;
  BOOL v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t (**v22)(void);
  int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  uint64_t v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[17];

  v34[16] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a3 + 8);
  v9 = **(unsigned __int16 **)(v8 + 16);
  v10 = 1;
  if (v9 > 0x10F)
  {
    v13 = v9 - 272 > 0x3D || ((1 << (v9 - 16)) & 0x20000040000000C1) == 0;
    if (!v13 || v9 == 357)
      goto LABEL_18;
  }
  else
  {
    if (v9 - 163 <= 0x38 && ((1 << (v9 + 93)) & 0x18800000039D4EFLL) != 0)
      goto LABEL_18;
    v12 = v9 - 85 > 0x32 || ((1 << (v9 - 85)) & 0x4001000000001) == 0;
    if (!v12 || v9 == 54)
      goto LABEL_18;
  }
  v23 = v9 & 0xFFFE;
  v24 = *(unsigned int *)(v8 + 40);
  if (v23 != 116)
    goto LABEL_44;
  if (!(_DWORD)v24)
  {
LABEL_49:
    v10 = 0;
    goto LABEL_18;
  }
  v25 = (_DWORD *)(*(_QWORD *)(v8 + 32) + 16);
  v26 = *(unsigned int *)(v8 + 40);
  while (*((_BYTE *)v25 - 16) != 17)
  {
    v25 += 8;
    if (!--v26)
      goto LABEL_44;
  }
  if (*v25 != 2131)
  {
LABEL_44:
    if ((_DWORD)v24)
    {
      v27 = (_DWORD *)(*(_QWORD *)(v8 + 32) + 16);
      while (*((_BYTE *)v27 - 16) != 17)
      {
        v10 = 0;
        v27 += 8;
        if (!--v24)
          goto LABEL_18;
      }
      v28 = *v27;
      v10 = v28 == 2483 || v28 == 2624;
      goto LABEL_18;
    }
    goto LABEL_49;
  }
  v10 = 1;
LABEL_18:
  v14 = (char *)operator new(0x20uLL);
  *(_QWORD *)v14 = &off_1E7FAB220;
  *((_QWORD *)v14 + 1) = a2;
  *((_QWORD *)v14 + 2) = a3;
  v14[24] = v10;
  v14[25] = a4;
  v31 = (uint64_t *)v14;
  v32 = v34;
  v15 = (char *)operator new(0x20uLL);
  *(_QWORD *)v15 = &off_1E7FAB220;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(v14 + 8);
  *((_QWORD *)v15 + 3) = *((_QWORD *)v14 + 3);
  v34[3] = v15;
  v33 = 0x400000001;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  sub_1C48AAD34(a1, (uint64_t)&v32);
  v16 = v33;
  *(_BYTE *)(a1 + 144) = 1;
  v17 = (char *)v32;
  if (!(_DWORD)v16)
    goto LABEL_27;
  v18 = 32 * v16;
  do
  {
    v19 = *(char **)&v17[v18 - 8];
    if (&v17[v18 - 32] == v19)
    {
      v19 = &v17[v18 - 32];
      v20 = 4;
    }
    else
    {
      if (!v19)
        goto LABEL_25;
      v20 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_25:
    v18 -= 32;
  }
  while (v18);
  v17 = (char *)v32;
LABEL_27:
  if (v17 != (char *)v34)
    free(v17);
  result = (uint64_t)v31;
  if (v31 == &v30)
  {
    v22 = (uint64_t (**)(void))(v30 + 32);
    return (*v22)();
  }
  else if (v31)
  {
    v22 = (uint64_t (**)(void))(*v31 + 40);
    return (*v22)();
  }
  return result;
}

uint64_t sub_1C4A3C18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, int a6, char a7, __int16 a8, unsigned __int8 a9)
{
  _OWORD *v12;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  int RegSizeInBits;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  char v39;
  int v40;
  unsigned int v41;
  int v42;
  __int128 v43;
  __int128 v44;
  int v46;
  llvm::detail::DoubleAPFloat *v47;
  unsigned int v48;
  _DWORD *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  llvm::detail::DoubleAPFloat *v58;
  void *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int *v66;
  unint64_t v67;
  int v68;
  _DWORD *v69;
  unsigned int v70;

  v12 = a5;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 104) = a3;
  *(_QWORD *)(a1 + 112) = a4;
  if (*a5)
  {
    *(_DWORD *)(a1 + 88) = 16;
    v15 = *a5;
    if (v15 == 3)
    {
      v18 = 0;
      v19 = 0;
      v17 = 0;
      v16 = *((_QWORD *)a5 + 2);
      *(_BYTE *)(a1 + 92) = 1;
    }
    else if (v15 == 1)
    {
      v16 = 0;
      v17 = 0;
      v18 = *((_QWORD *)a5 + 2);
      *(_BYTE *)(a1 + 92) = 0;
      v19 = 1;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v16 = 0;
      v17 = 0;
    }
  }
  else
  {
    v20 = *((unsigned int *)a5 + 1);
    if ((v20 - 1) <= 0x3FFFFFFE)
      RegSizeInBits = *(_DWORD *)(*(_QWORD *)(a3 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(a4, *((_DWORD *)a5 + 1), a3)+ 24)+ *(_DWORD *)(a3 + 272)* ((*(_QWORD *)(a3 + 248) - *(_QWORD *)(a3 + 240)) >> 3)));
    else
      RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(a3, *((_DWORD *)a5 + 1), a2);
    *(_DWORD *)(a1 + 88) = RegSizeInBits;
    v22 = v20 & 0x7FFFFFFF;
    v23 = *(_QWORD *)(a2 + 24) + 16 * v22 + 8;
    if ((int)v20 >= 0)
      v23 = *(_QWORD *)(a2 + 272) + 8 * v20;
    v24 = *(_QWORD *)v23;
    if ((*(_BYTE *)(*(_QWORD *)v23 + 3) & 1) == 0)
      v24 = *(_QWORD *)(v24 + 24);
    v25 = 0;
    v17 = *(_QWORD *)(v24 + 8);
    v26 = **(unsigned __int16 **)(v17 + 16) - 121;
    *(_BYTE *)(a1 + 92) = (v26 < 0x40) & (0xE7039C0000004001 >> v26);
    if ((v20 & 0x80000000) != 0 && v22 < *(unsigned int *)(a2 + 432))
      v25 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v22);
    *(_BYTE *)(a1 + 93) = v25 < 0;
    v27 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * v22 + 8);
    if ((int)v20 >= 0)
      v27 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v20);
    v28 = *v27;
    if ((*(_BYTE *)(v28 + 3) & 1) == 0)
      v28 = *(_QWORD *)(v28 + 24);
    v29 = *(_QWORD *)(v28 + 8);
    if (**(_WORD **)(v29 + 16) == 121)
      v16 = *(_QWORD *)(*(_QWORD *)(v29 + 32) + 48);
    else
      v16 = 0;
    v18 = sub_1C554C050(v20, a2);
  }
  v30 = 4 * (v19 != 0);
  if (v16)
    v30 = 5;
  *(_DWORD *)(a1 + 80) = v30;
  if (v30 > 3)
    v31 = a9;
  else
    v31 = 0;
  if ((a8 & 0xFF00) != 0)
    *(_BYTE *)(a1 + 92) = a8;
  if (!v31)
    goto LABEL_58;
  v32 = *(_DWORD *)(a1 + 88);
  if (v32 == 32)
  {
    if (*(_BYTE *)(a1 + 92))
    {
      if ((sub_1C48AAB00(v16 + 24) & 1) == 0)
        goto LABEL_58;
      goto LABEL_84;
    }
  }
  else if (v32 == 16)
  {
    if (*(_BYTE *)(a1 + 92))
    {
      v33 = v16 + 24;
      if (*(_BYTE *)(a1 + 93))
      {
        if ((sub_1C4A3C79C(v33) & 1) != 0)
          goto LABEL_84;
      }
      else if ((sub_1C48AA9FC(v33) & 1) != 0)
      {
        goto LABEL_84;
      }
      goto LABEL_58;
    }
  }
  else if (*(_BYTE *)(a1 + 92) || v32 != 64)
  {
    goto LABEL_58;
  }
  if (v18 >= 0x100 && a6)
  {
    v34 = v18 & 0xFFFFFFFFFFFFFC03;
    if ((v18 & 0xFFFFFFFFFFFFFE01) != 0 && v34 && (v18 & 0xFFFFFFFFFFFFF807) != 0)
    {
      if ((v18 & 0xFFFFFFFFFFFFF00FLL) != 0)
      {
        *(_DWORD *)(a1 + 84) = 0;
        goto LABEL_58;
      }
      v36 = 4;
    }
    else
    {
      if (v34)
        v35 = 3;
      else
        v35 = 2;
      if ((v18 & 0xFFFFFFFFFFFFFE01) != 0)
        v36 = v35;
      else
        v36 = 1;
    }
    *(_DWORD *)(a1 + 84) = v36;
    goto LABEL_84;
  }
  if (v18 <= 0xFF)
  {
LABEL_84:
    v46 = *(_DWORD *)(a1 + 88);
    if (v46 == 32)
    {
      if (*(_BYTE *)(a1 + 92))
      {
        v59 = *(void **)(v16 + 32);
        v58 = (llvm::detail::DoubleAPFloat *)(v16 + 32);
        if (v59 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v58, (unsigned int *)&v69);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v58, (unsigned int *)&v69);
        v48 = v70;
        v49 = v69;
        v60 = (unsigned int *)&v69;
        if (v70 >= 0x41)
          v60 = v69;
        v61 = *v60;
        v62 = (v61 >> 23);
        v53 = (v61 >> 19) & 0xF;
        v63 = v62 - 124;
        v64 = (v53 | 0x10u) >> (125 - v62);
        if (v62 > 0x7C)
          v64 = (v61 >> 19) & 0xF;
        else
          v63 = 0;
        if (v62 | v53)
        {
          v62 = v63;
          v53 = v64;
        }
        v65 = (16 * v62) | (v61 >> 31 << 7);
        goto LABEL_115;
      }
    }
    else if (v46 == 16 && *(_BYTE *)(a1 + 92))
    {
      v47 = (llvm::detail::DoubleAPFloat *)(v16 + 32);
      if (*(_BYTE *)(a1 + 93))
      {
        if (*(_UNKNOWN **)v47 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v47, (unsigned int *)&v69);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v47, (unsigned int *)&v69);
        v48 = v70;
        v49 = v69;
        v50 = (unsigned int *)&v69;
        if (v70 >= 0x41)
          v50 = v69;
        v51 = *v50;
        v52 = (v51 >> 7);
        v53 = (v51 >> 3) & 7;
        v54 = v52 | v53;
        v55 = v52 - 124;
        v56 = (v53 | 0x10u) >> (125 - v52);
        v57 = v52 > 0x7C;
      }
      else
      {
        if (*(_UNKNOWN **)v47 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v47, (unsigned int *)&v69);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v47, (unsigned int *)&v69);
        v48 = v70;
        v49 = v69;
        v66 = (unsigned int *)&v69;
        if (v70 >= 0x41)
          v66 = v69;
        v51 = *v66;
        v52 = (v51 >> 10) & 0x1F;
        v53 = (v51 >> 6) & 0xF;
        v54 = v52 | v53;
        v55 = v52 - 12;
        v56 = (v53 | 0x10u) >> (13 - ((v51 >> 10) & 0x1F));
        v57 = v52 > 0xC;
      }
      if (v57)
        v56 = v53;
      else
        v55 = 0;
      if (v54)
      {
        v52 = v55;
        v53 = v56;
      }
      v65 = (v51 >> 8) & 0x80 | (16 * v52);
LABEL_115:
      v18 = v65 | v53;
      if (v48 >= 0x41 && v49)
        MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
    }
    v67 = v18 >> *(_DWORD *)(a1 + 84);
    v68 = *(unsigned __int8 *)(a1 + 32);
    *(_DWORD *)a1 = 1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = v67;
    if (!v68)
      *(_BYTE *)(a1 + 32) = 1;
    return a1;
  }
LABEL_58:
  if (a6)
  {
    v37 = **(unsigned __int16 **)(v17 + 16);
    if (v37 == 127 || v37 == 47)
    {
      v38 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v17 + 32) + 68), a2);
      if (v39)
      {
        v40 = **(unsigned __int16 **)(v17 + 16);
        if (v40 == 127 && v38 <= 4)
        {
          v41 = v38;
LABEL_65:
          *(_DWORD *)(a1 + 84) = v41;
          v12 = (_OWORD *)(*(_QWORD *)(v17 + 32) + 32);
          goto LABEL_66;
        }
        if (v40 == 47 && v38 <= 16)
        {
          v41 = 31 - __clz(v38);
          if (1 << v41 == v38)
            goto LABEL_65;
        }
      }
    }
  }
LABEL_66:
  if (v17 && (a7 & 1) != 0)
  {
    v42 = *(unsigned __int8 *)(a1 + 32);
    if (**(_WORD **)(v17 + 16) == 313)
    {
      v43 = v12[1];
      *(_OWORD *)a1 = *v12;
      *(_OWORD *)(a1 + 16) = v43;
      if (!v42)
        *(_BYTE *)(a1 + 32) = 1;
      *(_DWORD *)(a1 + 80) = 2;
      return a1;
    }
  }
  else
  {
    v42 = *(unsigned __int8 *)(a1 + 32);
  }
  v44 = v12[1];
  *(_OWORD *)a1 = *v12;
  *(_OWORD *)(a1 + 16) = v44;
  if (!v42)
    *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

uint64_t sub_1C4A3C79C(uint64_t a1)
{
  uint64_t v1;
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  _BOOL8 v6;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int v13;

  v1 = a1;
  v4 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v3 = v4;
  if (v4 == &unk_1C866F1C0)
    v1 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 28) & 7;
  if (v5 < 2)
    return 0;
  if (v5 == 3)
    return 1;
  if (v3 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v2, (unsigned int *)&v12);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v2, (unsigned int *)&v12);
  v8 = (uint64_t *)&v12;
  if (v13 >= 0x41)
    v8 = v12;
  v9 = *v8;
  v6 = 1;
  if (v9)
  {
    v10 = (v9 >> 7);
    v11 = (v9 & 7) != 0 || v10 - 121 > 0xA;
    if (v11 || v10 <= 0x7C && (((v9 | 0x80uLL) >> (125 - v10)) & 7) != 0)
      v6 = 0;
  }
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C]();
  return v6;
}

void sub_1C4A3C8A4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A3C8B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FAB220;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C4A3C8F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAB220;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C4A3C920(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  llvm::MachineInstr *v11;
  llvm::MachineFunction *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  __int128 v17;
  uint64_t v18;
  unsigned int v19;

  v3 = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 32) + 40);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a1 + 25);
  if (*(_BYTE *)(a1 + 24))
  {
    v5 = sub_1C4A3CA30(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 32) + 40), v5, 0);
    v8 = v7;
  }
  else
  {
    v8 = 0;
  }
  v10 = *(_DWORD *)v5;
  v9 = *(_DWORD *)(v5 + 4);
  v13 = *(_OWORD *)(v5 + 8);
  v14 = *(_QWORD *)(v5 + 24);
  if (!v6 && !(_BYTE)v10)
  {
    sub_1C4A3CBB8((uint64_t)&v15, v9, v4);
    if ((_BYTE)v19)
    {
      v10 = v15;
      v9 = v16;
      v13 = v17;
      v14 = v18;
    }
    v3 = a2[1];
  }
  v15 = v10;
  v16 = v9;
  v17 = v13;
  v18 = v14;
  v19 = v8;
  llvm::MachineInstr::addOperand(v3, *a2, (const llvm::MachineOperand *)&v15);
  v12 = *a2;
  v11 = a2[1];
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  v14 = v19;
  llvm::MachineInstr::addOperand(v11, v12, (const llvm::MachineOperand *)&v13);
}

uint64_t sub_1C4A3CA30(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v3 = a2;
  v4 = *(unsigned int *)(a2 + 4);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 272);
  if ((int)v4 >= 0)
    v7 = (uint64_t *)(v6 + 8 * v4);
  else
    v7 = (uint64_t *)(v5 + 16 * (v4 & 0x7FFFFFFF) + 8);
  v8 = *v7;
  if (!*v7)
    return v3;
  if ((*(_BYTE *)(v8 + 3) & 1) == 0)
  {
    v8 = *(_QWORD *)(v8 + 24);
    if (!v8 || (*(_BYTE *)(v8 + 3) & 1) == 0)
      return v3;
  }
  v10 = 0;
  v11 = *(_QWORD *)(v8 + 8);
  if (a3 && v11)
  {
    if (**(_WORD **)(v11 + 16) != 262)
    {
      v10 = 0;
      goto LABEL_23;
    }
    v12 = *(_QWORD *)(v11 + 32);
    v3 = v12 + 32;
    v13 = *(unsigned int *)(v12 + 36);
    if ((int)v13 >= 0)
      v14 = (uint64_t *)(v6 + 8 * v13);
    else
      v14 = (uint64_t *)(v5 + 16 * (v13 & 0x7FFFFFFF) + 8);
    v15 = *v14;
    if (!v15)
      return v3;
    if ((*(_BYTE *)(v15 + 3) & 1) == 0)
    {
      v15 = *(_QWORD *)(v15 + 24);
      if (!v15 || (*(_BYTE *)(v15 + 3) & 1) == 0)
        return v3;
    }
    v11 = *(_QWORD *)(v15 + 8);
    v10 = 1;
  }
  if (v11)
  {
LABEL_23:
    while (1)
    {
      v16 = **(unsigned __int16 **)(v11 + 16);
      if (v16 != 177)
        break;
      v17 = *(_QWORD *)(v11 + 32);
      v3 = v17 + 32;
      v10 ^= 2u;
      v18 = *(unsigned int *)(v17 + 36);
      if ((int)v18 >= 0)
        v19 = (uint64_t *)(v6 + 8 * v18);
      else
        v19 = (uint64_t *)(v5 + 16 * (v18 & 0x7FFFFFFF) + 8);
      v20 = *v19;
      if (v20)
      {
        if ((*(_BYTE *)(v20 + 3) & 1) != 0 || (v20 = *(_QWORD *)(v20 + 24)) != 0 && (*(_BYTE *)(v20 + 3) & 1) != 0)
        {
          v11 = *(_QWORD *)(v20 + 8);
          if (v11)
            continue;
        }
      }
      return v3;
    }
    if (v16 == 184)
      return *(_QWORD *)(v11 + 32) + 32;
  }
  return v3;
}

uint64_t sub_1C4A3CBB8(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = result;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_57;
  v6 = a2 & 0x7FFFFFFF;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16 * v6 + 8);
  if (v7 && ((*(_BYTE *)(v7 + 3) & 1) != 0 || (v7 = *(_QWORD *)(v7 + 24)) != 0 && (*(_BYTE *)(v7 + 3) & 1) != 0))
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 32);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 184))(*(_QWORD *)(v9 + 16));
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 176))(*(_QWORD *)(v9 + 16));
  v12 = v11;
  v13 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 4);
  if (v13 - 1 <= 0x3FFFFFFE)
    result = *(unsigned int *)(*(_QWORD *)(v11 + 264)
                             + 24
                             * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v10, v13, v11) + 24)
                              + *(_DWORD *)(v12 + 272)
                              * ((*(_QWORD *)(v12 + 248) - *(_QWORD *)(v12 + 240)) >> 3)));
  else
    result = llvm::TargetRegisterInfo::getRegSizeInBits(v11, v13, a3);
  v14 = **(unsigned __int16 **)(v8 + 16);
  v15 = *(_QWORD *)(a3 + 24);
  if (v14 == 19)
  {
    while (1)
    {
      v16 = *(_QWORD *)(v8 + 32);
      if ((*(_DWORD *)(v16 + 32) & 0xFFF00) != 0)
        goto LABEL_57;
      v17 = *(unsigned int *)(v16 + 36);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_57;
      v6 = v17 & 0x7FFFFFFF;
      v18 = *(_QWORD *)(v15 + 16 * v6 + 8);
      if (v18
        && ((*(_BYTE *)(v18 + 3) & 1) != 0 || (v18 = *(_QWORD *)(v18 + 24)) != 0 && (*(_BYTE *)(v18 + 3) & 1) != 0))
      {
        v8 = *(_QWORD *)(v18 + 8);
      }
      else
      {
        v8 = 0;
      }
      v14 = **(unsigned __int16 **)(v8 + 16);
      if (v14 != 19)
        goto LABEL_18;
    }
  }
  v17 = a2;
LABEL_18:
  v19 = *(_QWORD *)(a3 + 272);
  if (v17 >> 31)
    v20 = (uint64_t *)(v15 + 16 * v6 + 8);
  else
    v20 = (uint64_t *)(v19 + 8 * v17);
  v21 = *v20;
  if (!v21
    || (*(_BYTE *)(v21 + 3) & 1) == 0 && ((v21 = *(_QWORD *)(v21 + 24)) == 0 || (*(_BYTE *)(v21 + 3) & 1) == 0)
    || (v42 = *(_QWORD *)(v21 + 8)) == 0
    || **(_WORD **)(v42 + 16) != 313
    || (v43 = *(_QWORD *)(v42 + 32), *(_BYTE *)(v43 + 32) != 1))
  {
    if (v14 != 119 || (_DWORD)result != 16)
    {
      if (v14 != 76 || (_DWORD)result != 64)
        goto LABEL_57;
      v23 = *(_QWORD *)(v8 + 32);
      v24 = *(unsigned int *)(v23 + 36);
      v25 = (uint64_t *)((int)v24 >= 0 ? v19 + 8 * v24 : v15 + 16 * (v24 & 0x7FFFFFFF) + 8);
      v26 = *v25;
      if (!v26)
        goto LABEL_57;
      v27 = v26;
      if ((*(_DWORD *)v26 & 0x1000000) == 0)
      {
        v27 = *(_QWORD *)(v26 + 24);
        if (!v27 || (*(_BYTE *)(v27 + 3) & 1) == 0)
          goto LABEL_57;
      }
      v28 = *(_QWORD *)(v27 + 8);
      if (!v28 || **(_WORD **)(v28 + 16) != 313 || *(_BYTE *)(*(_QWORD *)(v28 + 32) + 32) != 1)
        goto LABEL_57;
      v29 = *(unsigned int *)(v23 + 68);
      v30 = (uint64_t *)(v15 + 16 * (v29 & 0x7FFFFFFF) + 8);
      v31 = (uint64_t *)(v19 + 8 * v29);
      if ((int)v29 >= 0)
        v30 = v31;
      v32 = *v30;
      if (!v32)
        goto LABEL_57;
      v33 = v32;
      if ((*(_DWORD *)v32 & 0x1000000) == 0)
      {
        v33 = *(_QWORD *)(v32 + 24);
        if (!v33 || (*(_BYTE *)(v33 + 3) & 1) == 0)
          goto LABEL_57;
      }
      v34 = *(_QWORD *)(v33 + 8);
      if (!v34 || **(_WORD **)(v34 + 16) != 313 || *(_BYTE *)(*(_QWORD *)(v34 + 32) + 32) != 1)
        goto LABEL_57;
      if ((*(_DWORD *)v26 & 0x1000000) == 0)
      {
        v26 = *(_QWORD *)(v26 + 24);
        if (!v26)
          goto LABEL_92;
        if ((*(_BYTE *)(v26 + 3) & 1) == 0)
        {
LABEL_91:
          v26 = 0;
          goto LABEL_92;
        }
      }
      v26 = *(_QWORD *)(v26 + 8);
      if (v26)
      {
        if (**(_WORD **)(v26 + 16) == 313)
        {
          v35 = *(_QWORD *)(v26 + 32);
          if (*(_BYTE *)(v35 + 32) == 1)
          {
            v26 = *(_QWORD *)(v35 + 48);
            v36 = v26 & 0xFFFFFFFFFFFFFF00;
            v26 = v26;
            goto LABEL_93;
          }
        }
        goto LABEL_91;
      }
LABEL_92:
      v36 = 0;
LABEL_93:
      if ((*(_DWORD *)v32 & 0x1000000) == 0)
      {
        v32 = *(_QWORD *)(v32 + 24);
        if (!v32)
          goto LABEL_101;
        if ((*(_BYTE *)(v32 + 3) & 1) == 0)
        {
LABEL_100:
          v32 = 0;
          goto LABEL_101;
        }
      }
      v32 = *(_QWORD *)(v32 + 8);
      if (v32)
      {
        if (**(_WORD **)(v32 + 16) == 313)
        {
          v55 = *(_QWORD *)(v32 + 32);
          if (*(_BYTE *)(v55 + 32) == 1)
          {
            v32 = *(_QWORD *)(v55 + 48);
            v56 = v32 & 0xFFFFFFFFFFFFFF00;
            v32 = v32;
LABEL_102:
            if ((v26 & 7) == 0)
            {
              v57 = v36 | v26;
              if (v57 + 4 == (v56 | v32))
              {
                if (v57 >= 0)
                  v58 = v57;
                else
                  v58 = v57 + 1;
                v52 = v58 >> 1;
                v53 = HIDWORD(v52);
                v54 = 775;
                goto LABEL_90;
              }
            }
LABEL_57:
            v41 = 0;
            *(_BYTE *)v4 = 0;
            goto LABEL_58;
          }
        }
        goto LABEL_100;
      }
LABEL_101:
      v56 = 0;
      goto LABEL_102;
    }
    v37 = *(unsigned int *)(*(_QWORD *)(v8 + 32) + 36);
    v38 = (uint64_t *)(v15 + 16 * (v37 & 0x7FFFFFFF) + 8);
    v39 = (uint64_t *)(v19 + 8 * v37);
    if ((int)v37 >= 0)
      v38 = v39;
    v40 = *v38;
    if (!v40)
      goto LABEL_57;
    v47 = v40;
    if ((*(_DWORD *)v40 & 0x1000000) == 0)
    {
      v47 = *(_QWORD *)(v40 + 24);
      if (!v47 || (*(_BYTE *)(v47 + 3) & 1) == 0)
        goto LABEL_57;
    }
    v48 = *(_QWORD *)(v47 + 8);
    if (!v48 || **(_WORD **)(v48 + 16) != 313 || *(_BYTE *)(*(_QWORD *)(v48 + 32) + 32) != 1)
      goto LABEL_57;
    if ((*(_DWORD *)v40 & 0x1000000) == 0)
    {
      v40 = *(_QWORD *)(v40 + 24);
      if (!v40)
        goto LABEL_88;
      if ((*(_BYTE *)(v40 + 3) & 1) == 0)
      {
LABEL_87:
        v40 = 0;
        goto LABEL_88;
      }
    }
    v40 = *(_QWORD *)(v40 + 8);
    if (v40)
    {
      if (**(_WORD **)(v40 + 16) == 313)
      {
        v49 = *(_QWORD *)(v40 + 32);
        if (*(_BYTE *)(v49 + 32) == 1)
        {
          v40 = *(_QWORD *)(v49 + 48);
          v50 = v40 & 0xFFFFFFFFFFFFFF00;
          v40 = v40;
LABEL_89:
          v52 = (uint64_t)(v50 | v40) / 2;
          v53 = HIDWORD(v52);
          v54 = 263;
LABEL_90:
          *(_DWORD *)v4 = v54;
          *(_DWORD *)(v4 + 4) = v52;
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 64;
          *(_DWORD *)(v4 + 24) = v53;
          v41 = 1;
          goto LABEL_58;
        }
      }
      goto LABEL_87;
    }
LABEL_88:
    v50 = 0;
    goto LABEL_89;
  }
  v44 = *(_QWORD *)(v43 + 48) / 2;
  v45 = ((result + 7) >> 3) - 2;
  if (v45 > 6)
    v46 = 7;
  else
    v46 = dword_1C676A450[v45];
  v51 = HIDWORD(v44);
  *(_DWORD *)v4 = v46;
  *(_DWORD *)(v4 + 4) = v44;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 64;
  v41 = 1;
  *(_DWORD *)(v4 + 24) = v51;
LABEL_58:
  *(_BYTE *)(v4 + 32) = v41;
  return result;
}

uint64_t sub_1C4A3D0C4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5, int a6, char a7)
{
  uint64_t v10;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  int v31;

  v10 = (uint64_t)a3;
  if ((a7 & 1) != 0
    || (sub_1C4A3C18C((uint64_t)&v26, a2, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a3, 0, 0, 0, 1u),
        v12 = 0,
        v31 <= 3))
  {
    if (a6)
    {
      v10 = sub_1C4A3CA30(a2, v10, 0);
      v14 = v13;
    }
    else
    {
      v14 = 0;
    }
    v16 = *(_DWORD *)v10;
    v15 = *(_DWORD *)(v10 + 4);
    v24 = *(_OWORD *)(v10 + 8);
    v25 = *(_QWORD *)(v10 + 24);
    if (!(_BYTE)v16)
    {
      sub_1C4A3CBB8((uint64_t)&v26, v15, a2);
      if ((_BYTE)v30)
      {
        v16 = v26;
        v15 = v27;
        v24 = v28;
        v25 = v29;
      }
    }
    v26 = v16;
    v27 = v15;
    v28 = v24;
    v29 = v25;
    v30 = v14;
    v12 = 1;
    v17 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)&v26, 1);
    v18 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
    v19 = v17[1];
    *v18 = *v17;
    v18[1] = v19;
    ++*(_DWORD *)(a4 + 8);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    v25 = v30 | a5;
    v20 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)&v24, 1);
    v21 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
    v22 = v20[1];
    *v21 = *v20;
    v21[1] = v22;
    ++*(_DWORD *)(a4 + 8);
  }
  return v12;
}

_QWORD *sub_1C4A3D248(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB268;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A3D288(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB268;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A3D2D8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB268;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A3D394(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB268;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A3D448(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A3D464(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A3D498(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C4A3D4A4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB2B0;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A3D4E4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB2B0;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A3D534(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB2B0;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A3D5F0(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB2B0;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A3D6A4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A3D6C0(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A3D6F4(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

void sub_1C4A3D708()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A3D71C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FAB2F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C4A3D75C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAB2F8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C4A3D784(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(a1 + 8));
}

void sub_1C4A3D794()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A3D7A8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FAB340;
  return result;
}

void sub_1C4A3D7CC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FAB340;
}

void sub_1C4A3D7E4(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr *v2;
  llvm::MachineFunction *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v2 = a2[1];
  v5 = 1;
  v6 = 0;
  v7 = 0;
  llvm::MachineInstr::addOperand(v2, v3, (const llvm::MachineOperand *)&v5);
}

void sub_1C4A3D818()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A3D82C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FAB388;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C4A3D86C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAB388;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C4A3D894(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(a1 + 8));
}

void sub_1C4A3D8A4()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C4A3D8B8(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E7FAB3D0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C4A3D8F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E7FAB3D0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1C4A3D910(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2;
  llvm::MachineInstr *v3;
  llvm::MachineFunction *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  v6 = 1;
  v7 = 0;
  v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

void sub_1C4A3D948()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A3D95C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FAB418;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C4A3D99C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAB418;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C4A3D9C4(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(a1 + 8));
}

void sub_1C4A3D9D4()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C4A3D9E8(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E7FAB460;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C4A3DA20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E7FAB460;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1C4A3DA40(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2;
  llvm::MachineInstr *v3;
  llvm::MachineFunction *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  v6 = 1;
  v7 = 0;
  v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

void sub_1C4A3DA74(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int *v12;
  uint64_t v14;
  _WORD *v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int RegSizeInBits;
  unint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  char *v25;
  char *v26;
  void *v27;
  void **v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  unsigned int v33;
  char *v34;
  char *v35;
  void *v36;
  void **v37;
  _BYTE *v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  int v54;
  _QWORD *v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  void **v60;
  void **v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (***v69)();
  uint64_t v70;
  uint64_t i;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  _BYTE v79[64];
  void *v80;
  uint64_t v81;
  _QWORD v82[16];
  void *v83;
  uint64_t v84;
  _BYTE v85[24];
  _BYTE v86[104];
  _QWORD *v87;
  uint64_t v88;
  _QWORD v89[2];
  uint64_t (**v90)();
  unsigned int v91;
  _QWORD v92[4];

  v92[3] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a3)
    goto LABEL_6;
  v8 = *(_DWORD *)(a3 + 4);
  v6 = a3 + 4;
  v7 = v8;
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 4) + 24) + 32) + 40);
  v10 = (uint64_t *)((v8 & 0x80000000) != 0
                  ? *(_QWORD *)(v9 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v9 + 272) + 8 * v7);
  if ((v11 = *v10) == 0
    || (v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 4) + 24) + 32) + 40),
        v12 = (int *)v6,
        (*(_BYTE *)(v11 + 3) & 1) == 0)
    && ((v11 = *(_QWORD *)(v11 + 24)) == 0 || (*(_BYTE *)(v11 + 3) & 1) == 0)
    || (v14 = *(_QWORD *)(v11 + 8)) == 0)
  {
LABEL_6:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 144) = 0;
    return;
  }
  v15 = *(_WORD **)(v14 + 16);
  v16 = (unsigned __int16)*v15;
  if ((v16 - 118) > 8 || ((1 << (v16 - 118)) & 0x141) == 0)
    goto LABEL_67;
  v18 = *(_QWORD *)(v14 + 32);
  if (*(_BYTE *)(v18 + 32)
    || ((v19 = *(_DWORD *)(v18 + 36), v19 - 1 <= 0x3FFFFFFE)
      ? (v20 = *(_QWORD *)(a2 + 80),
         RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v20 + 264)
                                   + 24
                                   * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*(_QWORD *)(a2 + 88), v19, v20)+ 24)+ *(_DWORD *)(v20 + 272)* ((*(_QWORD *)(v20 + 248) - *(_QWORD *)(v20 + 240)) >> 3)))): (RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a2 + 80), v19, v76)), v15 = *(_WORD **)(v14 + 16), RegSizeInBits != 16))
  {
LABEL_66:
    v16 = (unsigned __int16)*v15;
LABEL_67:
    if (v16 != 65 || (v52 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v14 + 32) + 68), v76), !v53) || v52 >> 16)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 144) = 0;
      return;
    }
    if (v52 == 0xFFFF)
      v12 = (int *)(*(_QWORD *)(v14 + 32) + 36);
    v54 = *v12;
    v55 = operator new(0x20uLL);
    v56 = 0;
    v57 = 0;
    *v55 = &off_1E7FAB538;
    v55[1] = a2;
    v55[2] = v76;
    *((_DWORD *)v55 + 6) = v54;
    v89[1] = v55;
    v90 = &off_1E7FAB580;
    v91 = a4;
    v92[0] = &v90;
    v83 = v85;
    v84 = 0x400000000;
    v58 = v86;
    do
    {
      v59 = v56;
      v60 = (void **)&(&v87)[4 * v57];
      v61 = (void **)v60[3];
      if (v61)
      {
        if (v61 == v60)
        {
          *v58 = v58 - 3;
          (*((void (**)(void **))*v60 + 3))(v60);
        }
        else
        {
          *v58 = (*((uint64_t (**)(void *))*v61 + 2))(v60[3]);
        }
      }
      else
      {
        *v58 = 0;
      }
      v58 += 4;
      v56 = 1;
      v57 = 1;
    }
    while ((v59 & 1) == 0);
    v62 = v84;
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 0x400000000;
    LODWORD(v84) = v62 + 2;
    if (v62 == -2)
    {
      *(_BYTE *)(a1 + 144) = 1;
LABEL_92:
      v64 = (char *)v83;
    }
    else
    {
      sub_1C48AAD34(a1, (uint64_t)&v83);
      v63 = v84;
      *(_BYTE *)(a1 + 144) = 1;
      v64 = (char *)v83;
      if ((_DWORD)v63)
      {
        v65 = 32 * v63;
        while (1)
        {
          v66 = *(char **)&v64[v65 - 8];
          if (&v64[v65 - 32] == v66)
            break;
          if (v66)
          {
            v67 = 5;
            goto LABEL_88;
          }
LABEL_89:
          v65 -= 32;
          if (!v65)
            goto LABEL_92;
        }
        v66 = &v64[v65 - 32];
        v67 = 4;
LABEL_88:
        (*(void (**)(void))(*(_QWORD *)v66 + 8 * v67))();
        goto LABEL_89;
      }
    }
    if (v64 != v85)
      free(v64);
    v68 = 0;
    while (1)
    {
      v69 = (uint64_t (***)())v92[v68];
      if (&(&v90)[v68] == v69)
        break;
      if (v69)
      {
        v70 = 5;
LABEL_100:
        (*v69)[v70]();
      }
      v68 -= 4;
      if (v68 == -8)
        return;
    }
    v69 = &(&v90)[v68];
    v70 = 4;
    goto LABEL_100;
  }
  if (*v15 == 124)
    a4 |= 8u;
  v87 = v89;
  v88 = 0x200000000;
  if (!sub_1C4A3D0C4(a2, v76, (unsigned __int8 *)(*(_QWORD *)(v14 + 32) + 32), (uint64_t)&v87, a4, 0, 0))
  {
    if (v87 != v89)
      free(v87);
    v15 = *(_WORD **)(v14 + 16);
    goto LABEL_66;
  }
  v80 = v82;
  v81 = 0x200000000;
  v22 = v88;
  if (!(_DWORD)v88)
    goto LABEL_27;
  v23 = v82;
  v24 = v88;
  if (v88 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v88, 32);
    v24 = v88;
    if (!(_DWORD)v88)
      goto LABEL_26;
    v23 = v80;
  }
  memcpy(v23, v87, 32 * v24);
LABEL_26:
  LODWORD(v81) = v22;
LABEL_27:
  v25 = (char *)operator new(0x58uLL);
  v26 = v25;
  *(_QWORD *)v25 = &off_1E7FAB4A8;
  v27 = v25 + 24;
  *((_QWORD *)v25 + 1) = v25 + 24;
  v28 = (void **)(v25 + 8);
  *((_QWORD *)v25 + 2) = 0x200000000;
  if (!(_DWORD)v22)
    goto LABEL_34;
  if (v80 != v82)
  {
    *((_QWORD *)v25 + 1) = v80;
    v74 = HIDWORD(v81);
    *((_DWORD *)v25 + 4) = v22;
    *((_DWORD *)v25 + 5) = v74;
    v80 = v82;
    HIDWORD(v81) = 0;
    goto LABEL_33;
  }
  if (v22 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v25 + 8), (uint64_t)v27, v22, 32);
    v30 = v81;
    if (!(_DWORD)v81)
      goto LABEL_32;
    v29 = v80;
    v27 = *v28;
  }
  else
  {
    v29 = v82;
    v30 = v22;
  }
  memcpy(v27, v29, 32 * v30);
LABEL_32:
  *((_DWORD *)v26 + 4) = v22;
LABEL_33:
  LODWORD(v81) = 0;
LABEL_34:
  v82[11] = v26;
  v77 = v79;
  v78 = 0x200000000;
  v31 = v88;
  if (!(_DWORD)v88)
    goto LABEL_38;
  v32 = v79;
  v33 = v88;
  if (v88 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v88, 32);
    v33 = v88;
    if (!(_DWORD)v88)
      goto LABEL_37;
    v32 = v77;
  }
  memcpy(v32, v87, 32 * v33);
LABEL_37:
  LODWORD(v78) = v31;
LABEL_38:
  v34 = (char *)operator new(0x58uLL);
  v35 = v34;
  *(_QWORD *)v34 = &off_1E7FAB4F0;
  v36 = v34 + 24;
  *((_QWORD *)v34 + 1) = v34 + 24;
  v37 = (void **)(v34 + 8);
  *((_QWORD *)v34 + 2) = 0x200000000;
  if (!(_DWORD)v31)
    goto LABEL_45;
  if (v77 != v79)
  {
    *((_QWORD *)v34 + 1) = v77;
    v75 = HIDWORD(v78);
    *((_DWORD *)v34 + 4) = v31;
    *((_DWORD *)v34 + 5) = v75;
    v77 = v79;
    HIDWORD(v78) = 0;
    goto LABEL_44;
  }
  if (v31 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v34 + 8), (uint64_t)v36, v31, 32);
    v39 = v78;
    if (!(_DWORD)v78)
      goto LABEL_43;
    v38 = v77;
    v36 = *v37;
  }
  else
  {
    v38 = v79;
    v39 = v31;
  }
  memcpy(v36, v38, 32 * v39);
LABEL_43:
  *((_DWORD *)v35 + 4) = v31;
LABEL_44:
  LODWORD(v78) = 0;
LABEL_45:
  v40 = 0;
  v41 = 0;
  v82[15] = v35;
  v83 = v85;
  v84 = 0x400000000;
  v42 = v86;
  do
  {
    v43 = v40;
    v44 = &v82[4 * v41 + 8];
    v45 = (_QWORD *)v44[3];
    if (v45)
    {
      if (v45 == v44)
      {
        *v42 = v42 - 3;
        (*(void (**)(_QWORD *))(*v44 + 24))(v44);
      }
      else
      {
        *v42 = (*(uint64_t (**)(_QWORD))(*v45 + 16))(v44[3]);
      }
    }
    else
    {
      *v42 = 0;
    }
    v42 += 4;
    v40 = 1;
    v41 = 1;
  }
  while ((v43 & 1) == 0);
  v46 = v84;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  LODWORD(v84) = v46 + 2;
  if (v46 == -2)
  {
    *(_BYTE *)(a1 + 144) = 1;
LABEL_104:
    v48 = (char *)v83;
  }
  else
  {
    sub_1C48AAD34(a1, (uint64_t)&v83);
    v47 = v84;
    *(_BYTE *)(a1 + 144) = 1;
    v48 = (char *)v83;
    if ((_DWORD)v47)
    {
      v49 = 32 * v47;
      while (1)
      {
        v50 = *(char **)&v48[v49 - 8];
        if (&v48[v49 - 32] == v50)
          break;
        if (v50)
        {
          v51 = 5;
          goto LABEL_60;
        }
LABEL_61:
        v49 -= 32;
        if (!v49)
          goto LABEL_104;
      }
      v50 = &v48[v49 - 32];
      v51 = 4;
LABEL_60:
      (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
      goto LABEL_61;
    }
  }
  if (v48 != v85)
    free(v48);
  for (i = 0; i != -8; i -= 4)
  {
    v72 = (_QWORD *)v82[i + 15];
    if (&v82[i + 12] == v72)
    {
      v72 = &v82[i + 12];
      v73 = 4;
    }
    else
    {
      if (!v72)
        continue;
      v73 = 5;
    }
    (*(void (**)(void))(*v72 + 8 * v73))();
  }
  if (v77 != v79)
    free(v77);
  if (v80 != v82)
    free(v80);
  if (v87 != v89)
    free(v87);
}

_QWORD *sub_1C4A3E218(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB4A8;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A3E258(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB4A8;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A3E2A8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB4A8;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A3E364(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB4A8;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A3E418(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A3E434(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A3E468(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C4A3E474(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB4F0;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A3E4B4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB4F0;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A3E504(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB4F0;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A3E5C0(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB4F0;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A3E674(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A3E690(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A3E6C4(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

void sub_1C4A3E6D8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A3E6EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FAB538;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C4A3E72C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAB538;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C4A3E754(uint64_t a1, uint64_t a2)
{
  int v3;
  llvm::MachineFunction *v4;
  llvm::MachineInstr *v5;
  _DWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = sub_1C48AC2EC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD **)(a1 + 16), 1, *(_DWORD *)(a1 + 24), (uint64_t)&off_1E7FB1B88);
  v4 = *(llvm::MachineFunction **)a2;
  v5 = *(llvm::MachineInstr **)(a2 + 8);
  v7 = 0;
  v8 = 0;
  v6[0] = 0;
  v6[1] = v3;
  v9 = 0;
  llvm::MachineInstr::addOperand(v5, v4, (const llvm::MachineOperand *)v6);
}

void sub_1C4A3E7B8()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C4A3E7CC(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E7FAB580;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C4A3E804(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E7FAB580;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1C4A3E824(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2;
  llvm::MachineInstr *v3;
  llvm::MachineFunction *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  v6 = 1;
  v7 = 0;
  v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

uint64_t sub_1C4A3E858(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  llvm::MachineInstr *v11;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 32) + 40);
  v3 = *(unsigned int *)(a2 + 4);
  if ((v3 & 0x80000000) != 0)
    v4 = (uint64_t *)(*(_QWORD *)(v2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v2 + 272) + 8 * v3);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 120)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v8 + 48);
  if (*(_BYTE *)(v8 + 32) != 1)
  {
    v10 = (unint64_t *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u)
      v10 = (unint64_t *)*v10;
    v9 = *v10;
  }
  if (v9 >> 16)
    return 0;
  v11 = sub_1C4A3EBBC(a1, v7, 129, v9, 0);
  llvm::MachineOperand::setReg(a2, *(_DWORD *)(*((_QWORD *)v11 + 4) + 4));
  return 1;
}

uint64_t sub_1C4A3E93C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  _DWORD *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t (**v23)(void);
  uint64_t v24;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[17];

  v28[16] = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v7 = *(_QWORD *)(a3 + 8);
    v8 = **(unsigned __int16 **)(v7 + 16);
    v9 = 1;
    if (v8 > 0x10F)
    {
      v12 = v8 - 272 > 0x3D || ((1 << (v8 - 16)) & 0x20000040000000C1) == 0;
      if (!v12 || v8 == 357)
        goto LABEL_28;
    }
    else
    {
      if (v8 - 163 <= 0x38 && ((1 << (v8 + 93)) & 0x18800000039D4EFLL) != 0)
        goto LABEL_28;
      v11 = v8 - 85 > 0x32 || ((1 << (v8 - 85)) & 0x4001000000001) == 0;
      if (!v11 || v8 == 54)
        goto LABEL_28;
    }
    if ((v8 & 0xFFFE) == 0x74)
    {
      v13 = *(unsigned int *)(v7 + 40);
      if ((_DWORD)v13)
      {
        v14 = (_DWORD *)(*(_QWORD *)(v7 + 32) + 16);
        while (*((_BYTE *)v14 - 16) != 17)
        {
          v9 = 0;
          v14 += 8;
          if (!--v13)
            goto LABEL_28;
        }
        v9 = *v14 == 2131;
        goto LABEL_28;
      }
    }
  }
  v9 = 0;
LABEL_28:
  v15 = (char *)operator new(0x20uLL);
  *(_QWORD *)v15 = &off_1E7FAB5C8;
  *((_QWORD *)v15 + 1) = a2;
  *((_QWORD *)v15 + 2) = a3;
  v15[24] = v9;
  v25 = (uint64_t *)v15;
  v26 = v28;
  v16 = (char *)operator new(0x20uLL);
  *(_QWORD *)v16 = &off_1E7FAB5C8;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(v15 + 8);
  *((_QWORD *)v16 + 3) = *((_QWORD *)v15 + 3);
  v28[3] = v16;
  v27 = 0x400000001;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  sub_1C48AAD34(a1, (uint64_t)&v26);
  v17 = v27;
  *(_BYTE *)(a1 + 144) = 1;
  v18 = (char *)v26;
  if (!(_DWORD)v17)
    goto LABEL_37;
  v19 = 32 * v17;
  do
  {
    v20 = *(char **)&v18[v19 - 8];
    if (&v18[v19 - 32] == v20)
    {
      v20 = &v18[v19 - 32];
      v21 = 4;
    }
    else
    {
      if (!v20)
        goto LABEL_35;
      v21 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_35:
    v19 -= 32;
  }
  while (v19);
  v18 = (char *)v26;
LABEL_37:
  if (v18 != (char *)v28)
    free(v18);
  result = (uint64_t)v25;
  if (v25 == &v24)
  {
    v23 = (uint64_t (**)(void))(v24 + 32);
    return (*v23)();
  }
  else if (v25)
  {
    v23 = (uint64_t (**)(void))(*v25 + 40);
    return (*v23)();
  }
  return result;
}

llvm::MachineInstr *sub_1C4A3EBBC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  int v15;
  int v16;
  llvm::MachineFunction *v17;
  llvm::MachineInstr *v18;
  llvm::MachineInstr *v19;
  uint64_t v20;
  int v21;
  const char *v22;
  int v23;
  __int16 ***v24;
  const char *v25;
  const char *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  llvm::MachineFunction *v32;
  llvm::MachineInstr *v33;
  uint64_t (**v35)();
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39[5];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v40 = a3;
  v10 = *(_QWORD *)(a2 + 24);
  v39[4] = 0;
  v11 = *(_QWORD *)(v10 + 32);
  v35 = &off_1E816EC08;
  v36 = v11;
  v38 = *(_QWORD *)(v11 + 40);
  v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 104))(*(_QWORD *)(v11 + 16));
  v12 = *(unsigned __int8 **)(a2 + 24);
  v39[2] = (unsigned __int8 *)a2;
  v39[3] = 0;
  v39[0] = 0;
  v39[1] = v12;
  if ((unsigned __int8 **)(a2 + 56) != v39)
  {
    v13 = *(unsigned __int8 **)(a2 + 56);
    v39[0] = v13;
    if (v13)
      llvm::MetadataTracking::track((uint64_t)v39, v13, 2);
  }
  if (a3 == 513)
  {
    v14 = HIDWORD(a4);
    v15 = *(_DWORD *)(*(_QWORD *)(sub_1C4A3EBBC(a1, a2, 257, a4, 0) + 32) + 4);
    v16 = *(_DWORD *)(*(_QWORD *)(sub_1C4A3EBBC(a1, a2, 257, v14, 0) + 32) + 4);
    v41 = v40;
    LODWORD(v42) = 0;
    v17 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v35, 18, &v41, 1, 0, 0, 0);
    v19 = v18;
    v42 = 0;
    v43 = 0;
    LODWORD(v41) = 0;
    HIDWORD(v41) = v15;
    v44 = 0;
    llvm::MachineInstr::addOperand(v18, v17, (const llvm::MachineOperand *)&v41);
    LODWORD(v41) = 1;
    v42 = 0;
    v43 = 25;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v41);
    v42 = 0;
    v43 = 0;
    LODWORD(v41) = 0;
    HIDWORD(v41) = v16;
    v44 = 0;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v41);
    LODWORD(v41) = 1;
    v42 = 0;
    v43 = 26;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v41);
    v20 = *(_QWORD *)(v36 + 40);
    v21 = *(_DWORD *)(*((_QWORD *)v19 + 4) + 4);
    v23 = sub_1C4825F50((unint64_t *)&v40);
    if ((_DWORD)v22 == 1)
    if (v23 <= 111)
    {
      if (v23 <= 47)
      {
        v24 = (__int16 ***)&off_1E7FB1B88;
        if (v23 != 1 && v23 != 16)
          v24 = &off_1E7FB1568;
      }
      else if (v23 > 79)
      {
        if (v23 == 80)
          v24 = (__int16 ***)&off_1E7FB1680;
        else
          v24 = (__int16 ***)&off_1E7FB16B8;
      }
      else if (v23 == 48)
      {
        v24 = (__int16 ***)&off_1E7FB1610;
      }
      else
      {
        v24 = (__int16 ***)&off_1E7FB1BC0;
      }
    }
    else if (v23 > 223)
    {
      if (v23 > 287)
      {
        if (v23 == 288)
          v24 = (__int16 ***)&off_1E7FB1878;
        else
          v24 = (__int16 ***)&off_1E7FB18B0;
      }
      else if (v23 == 224)
      {
        v24 = (__int16 ***)&off_1E7FB1808;
      }
      else
      {
        v24 = (__int16 ***)&off_1E7FB1840;
      }
    }
    else if (v23 > 159)
    {
      if (v23 == 160)
        v24 = (__int16 ***)&off_1E7FB1798;
      else
        v24 = (__int16 ***)&off_1E7FB17D0;
    }
    else if (v23 == 112)
    {
      v24 = (__int16 ***)&off_1E7FB1728;
    }
    else
    {
      v24 = (__int16 ***)&off_1E7FB1760;
    }
    *(_QWORD *)(*(_QWORD *)(v20 + 24) + 16 * (v21 & 0x7FFFFFFF)) = v24;
  }
  else
  {
    sub_1C4825F50((unint64_t *)&v40);
    if ((_DWORD)v25 == 1)
    v27 = sub_1C4825F50((unint64_t *)&v40);
    if ((_DWORD)v26 == 1)
    if (v27 == 16)
      v28 = 5626;
    else
      v28 = 5625;
    if (v27 == 16)
      v29 = 5623;
    else
      v29 = 5622;
    if (a5)
      v28 = v29;
    if (v27 == 16)
      v30 = 518;
    else
      v30 = 517;
    if (a4)
      v31 = v28;
    else
      v31 = v30;
    v41 = v40;
    LODWORD(v42) = 0;
    v32 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v35, v31, &v41, 1, 0, 0, 0);
    v19 = v33;
    LODWORD(v41) = 1;
    v42 = 0;
    v43 = 0;
    llvm::MachineInstr::addOperand(v33, v32, (const llvm::MachineOperand *)&v41);
    if ((v31 - 519) <= 0xFFFFFFFD)
    {
      LODWORD(v41) = 1;
      v42 = 0;
      v43 = a4;
      llvm::MachineInstr::addOperand(v19, v32, (const llvm::MachineOperand *)&v41);
    }
    sub_1C554AE8C(v19, *(_QWORD *)(a1 + 72), *(_QWORD **)(a1 + 80));
  }
  v35 = &off_1E816EC08;
  if (v39[0])
    llvm::MetadataTracking::untrack((uint64_t)v39, v39[0]);
  return v19;
}

void sub_1C4A3F014()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A3F028(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FAB5C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C4A3F068(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAB5C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C4A3F090(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  llvm::MachineInstr *v10;
  llvm::MachineFunction *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;

  v3 = a2[1];
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 32) + 40);
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 24))
  {
    v5 = sub_1C4A3CA30(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 32) + 40), v5, 0);
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v9 = *(_DWORD *)v5;
  v8 = *(_DWORD *)(v5 + 4);
  v12 = *(_OWORD *)(v5 + 8);
  v13 = *(_QWORD *)(v5 + 24);
  if (!(_BYTE)v9)
  {
    sub_1C4A3CBB8((uint64_t)&v14, v8, v4);
    if ((_BYTE)v18)
    {
      v9 = v14;
      v8 = v15;
      v12 = v16;
      v13 = v17;
    }
    v3 = a2[1];
  }
  v14 = v9;
  v15 = v8;
  v16 = v12;
  v17 = v13;
  v18 = v7;
  llvm::MachineInstr::addOperand(v3, *a2, (const llvm::MachineOperand *)&v14);
  v11 = *a2;
  v10 = a2[1];
  LODWORD(v12) = 1;
  *((_QWORD *)&v12 + 1) = 0;
  v13 = v18;
  llvm::MachineInstr::addOperand(v10, v11, (const llvm::MachineOperand *)&v12);
}

_QWORD *sub_1C4A3F190(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB610;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A3F1D0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB610;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A3F220(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB610;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A3F2DC(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB610;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A3F390(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A3F3AC(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A3F3E0(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C4A3F3EC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB658;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A3F42C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB658;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A3F47C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB658;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A3F538(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB658;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A3F5EC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A3F608(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A3F63C(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

void sub_1C4A3F650()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A3F664(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FAB6A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C4A3F6A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAB6A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C4A3F6CC(uint64_t a1, uint64_t a2)
{
  int v3;
  llvm::MachineFunction *v4;
  llvm::MachineInstr *v5;
  _DWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = sub_1C48AC2EC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD **)(a1 + 16), 1, *(_DWORD *)(a1 + 24), (uint64_t)&off_1E7FB1B88);
  v4 = *(llvm::MachineFunction **)a2;
  v5 = *(llvm::MachineInstr **)(a2 + 8);
  v7 = 0;
  v8 = 0;
  v6[0] = 0;
  v6[1] = v3;
  v9 = 0;
  llvm::MachineInstr::addOperand(v5, v4, (const llvm::MachineOperand *)v6);
}

void sub_1C4A3F730()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C4A3F744(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E7FAB6E8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C4A3F77C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E7FAB6E8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1C4A3F79C(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2;
  llvm::MachineInstr *v3;
  llvm::MachineFunction *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  v6 = 1;
  v7 = 0;
  v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

_QWORD *sub_1C4A3F7D0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB730;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A3F810(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB730;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A3F860(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB730;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A3F91C(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB730;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A3F9D0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A3F9EC(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A3FA20(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C4A3FA2C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB778;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A3FA6C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB778;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A3FABC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB778;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A3FB78(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB778;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A3FC2C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A3FC48(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A3FC7C(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

void sub_1C4A3FC90()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A3FCA4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FAB7C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C4A3FCE4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FAB7C0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C4A3FD0C(uint64_t a1, uint64_t a2)
{
  int v3;
  llvm::MachineFunction *v4;
  llvm::MachineInstr *v5;
  _DWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = sub_1C48AC2EC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD **)(a1 + 16), 1, *(_DWORD *)(a1 + 24), (uint64_t)&off_1E7FB1B88);
  v4 = *(llvm::MachineFunction **)a2;
  v5 = *(llvm::MachineInstr **)(a2 + 8);
  v7 = 0;
  v8 = 0;
  v6[0] = 0;
  v6[1] = v3;
  v9 = 0;
  llvm::MachineInstr::addOperand(v5, v4, (const llvm::MachineOperand *)v6);
}

void sub_1C4A3FD70()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C4A3FD84(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E7FAB808;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C4A3FDBC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E7FAB808;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

void sub_1C4A3FDDC(uint64_t a1, llvm::MachineFunction **a2)
{
  uint64_t v2;
  llvm::MachineInstr *v3;
  llvm::MachineFunction *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  v6 = 1;
  v7 = 0;
  v8 = v2;
  llvm::MachineInstr::addOperand(v3, v4, (const llvm::MachineOperand *)&v6);
}

uint64_t sub_1C4A3FE10(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  int RegSizeInBits;
  unsigned int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[80];
  int v25;
  __int128 v26;
  __int128 v27;
  char v28;

  sub_1C4A3C18C((uint64_t)v24, a2, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 *)a3, 0, 0, 0, 1u);
  RegSizeInBits = 0;
  if (!*(_BYTE *)a3)
  {
    v9 = *((_DWORD *)a3 + 1);
    v10 = *(_QWORD *)(a1 + 80);
    if (v9 - 1 <= 0x3FFFFFFE)
    {
      v20 = *(_QWORD *)(a1 + 88);
      v21 = *(_QWORD *)(a1 + 80);
      RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v21 + 264)
                                + 24
                                * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v20, v9, v10)
                                                       + 24)
                                 + *(_DWORD *)(v21 + 272)
                                 * ((*(_QWORD *)(v21 + 248) - *(_QWORD *)(v21 + 240)) >> 3)));
    }
    else
    {
      RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*(_QWORD *)(a1 + 80), v9, a2);
    }
  }
  if (v25 > 3 || RegSizeInBits != 32 && RegSizeInBits != 16)
    return 0;
  v11 = a3[1];
  v22 = *a3;
  v23 = v11;
  if (!(_BYTE)v22)
  {
    sub_1C4A3CBB8((uint64_t)&v26, DWORD1(v22), a2);
    if (v28)
    {
      v22 = v26;
      v23 = v27;
    }
  }
  v12 = 1;
  v13 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)&v22, 1);
  v14 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
  v15 = v13[1];
  *v14 = *v13;
  v14[1] = v15;
  ++*(_DWORD *)(a4 + 8);
  LODWORD(v26) = 1;
  *((_QWORD *)&v26 + 1) = 0;
  *(_QWORD *)&v27 = 0;
  v16 = (_OWORD *)sub_1C47C0F60(a4, (unint64_t)&v26, 1);
  v17 = (_OWORD *)(*(_QWORD *)a4 + 32 * *(unsigned int *)(a4 + 8));
  v18 = v16[1];
  *v17 = *v16;
  v17[1] = v18;
  ++*(_DWORD *)(a4 + 8);
  return v12;
}

_QWORD *sub_1C4A3FFAC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB850;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A3FFEC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB850;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A4003C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB850;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A400F8(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB850;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A401AC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A401C8(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A401FC(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C4A40208(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB898;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A40248(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB898;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A40298(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB898;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A40354(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB898;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A40408(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A40424(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A40458(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

_QWORD *sub_1C4A40468(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB8E0;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A404A8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB8E0;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A404F8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB8E0;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A405B4(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB8E0;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A40668(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A40684(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A406B8(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C4A406C4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB928;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A40704(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB928;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A40754(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB928;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A40810(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB928;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A408C4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A408E0(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A40914(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

_QWORD *sub_1C4A40924(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB970;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A40964(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB970;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A409B4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB970;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A40A70(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB970;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A40B24(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A40B40(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A40B74(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C4A40B80(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB9B8;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A40BC0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FAB9B8;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A40C10(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FAB9B8;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A40CCC(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FAB9B8;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A40D80(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A40D9C(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A40DD0(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

_QWORD *sub_1C4A40DE0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FABA00;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A40E20(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FABA00;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A40E70(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FABA00;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A40F2C(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FABA00;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A40FE0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A40FFC(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A41030(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C4A4103C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FABA48;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A4107C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FABA48;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A410CC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FABA48;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A41188(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FABA48;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A4123C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A41258(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A4128C(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

void sub_1C4A4129C(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v4;
  llvm::detail::DoubleAPFloat *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  llvm::MachineInstr *v21;
  llvm::MachineFunction *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  llvm::MachineInstr *v29;
  llvm::MachineFunction *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  int v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 48);
  v5 = (llvm::detail::DoubleAPFloat *)&v38;
  v6 = *(_QWORD *)(v4 + 32);
  if ((_UNKNOWN *)v6 == &unk_1C866F1C0)
  {
    v5 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v38, (const llvm::detail::DoubleAPFloat *)(v4 + 32));
  }
  else
  {
    v38 = *(_QWORD *)(v4 + 32);
    v7 = *(unsigned int *)(v6 + 8);
    if ((v7 + 64) >= 0x80)
    {
      v31 = v6;
      v7 = operator new[]();
      v6 = v31;
      v5 = (llvm::detail::DoubleAPFloat *)&v38;
      v39 = (char *)v7;
    }
    v8 = *(_BYTE *)(v4 + 52);
    v9 = v8 & 7;
    v41 = v8 & 0xF;
    v40 = *(_DWORD *)(v4 + 48);
    v11 = (v8 & 6) != 0 && v9 != 3;
    if (v9 == 1 || v11)
    {
      v13 = *(unsigned int *)(v6 + 8);
      if ((v13 - 64) > 0xFFFFFF7F)
        v7 = (uint64_t)&v39;
      v16 = *(uint64_t **)(v4 + 40);
      v15 = (uint64_t *)(v4 + 40);
      v14 = v16;
      if ((*(_DWORD *)(*(v15 - 1) + 8) - 64) >= 0xFFFFFF80)
        v14 = v15;
      if (v13 <= 0xFFFFFFBF)
      {
        v17 = (unint64_t)(v13 + 64) >> 6;
        do
        {
          v18 = *v14++;
          *(_QWORD *)v7 = v18;
          v7 += 8;
          --v17;
        }
        while (v17);
      }
    }
  }
  v19 = v39;
  if ((_UNKNOWN *)v38 != &unk_1C866F1C0)
    v19 = &v37;
  v20 = v19[28];
  if ((v20 & 7) == 3)
  {
    v22 = *a2;
    v21 = a2[1];
    if ((v20 & 8) != 0)
    {
      v34 = 1;
      v35 = 0;
      v36 = 128;
    }
    else
    {
      v34 = 1;
      v35 = 0;
      v36 = 0;
    }
    llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)&v34);
  }
  else
  {
    if ((_UNKNOWN *)v38 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (unsigned int *)&v32);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (unsigned int *)&v32);
    v23 = (unsigned int *)&v32;
    if (v33 >= 0x41)
      v23 = v32;
    v24 = *v23;
    v25 = (v24 >> 10) & 0x1F;
    v26 = (v24 >> 6) & 0xF;
    v27 = v25 - 12;
    v28 = (v26 | 0x10u) >> (13 - ((v24 >> 10) & 0x1F));
    if (v25 > 0xC)
      v28 = (v24 >> 6) & 0xF;
    else
      v27 = 0;
    if (v25 | v26)
    {
      v25 = v27;
      v26 = v28;
    }
    v30 = *a2;
    v29 = a2[1];
    v34 = 1;
    v35 = 0;
    v36 = (v24 >> 8) & 0x80 | (16 * v25) | v26;
    llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v34);
    if (v33 >= 0x41 && v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  }
  if ((_UNKNOWN *)v38 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v39);
  }
  else if ((*(_DWORD *)(v38 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  }
}

void sub_1C4A41544(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v4;
  llvm::detail::DoubleAPFloat *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  llvm::MachineInstr *v21;
  llvm::MachineFunction *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  llvm::MachineInstr *v29;
  llvm::MachineFunction *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  int v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 48);
  v5 = (llvm::detail::DoubleAPFloat *)&v38;
  v6 = *(_QWORD *)(v4 + 32);
  if ((_UNKNOWN *)v6 == &unk_1C866F1C0)
  {
    v5 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v38, (const llvm::detail::DoubleAPFloat *)(v4 + 32));
  }
  else
  {
    v38 = *(_QWORD *)(v4 + 32);
    v7 = *(unsigned int *)(v6 + 8);
    if ((v7 + 64) >= 0x80)
    {
      v31 = v6;
      v7 = operator new[]();
      v6 = v31;
      v5 = (llvm::detail::DoubleAPFloat *)&v38;
      v39 = (char *)v7;
    }
    v8 = *(_BYTE *)(v4 + 52);
    v9 = v8 & 7;
    v41 = v8 & 0xF;
    v40 = *(_DWORD *)(v4 + 48);
    v11 = (v8 & 6) != 0 && v9 != 3;
    if (v9 == 1 || v11)
    {
      v13 = *(unsigned int *)(v6 + 8);
      if ((v13 - 64) > 0xFFFFFF7F)
        v7 = (uint64_t)&v39;
      v16 = *(uint64_t **)(v4 + 40);
      v15 = (uint64_t *)(v4 + 40);
      v14 = v16;
      if ((*(_DWORD *)(*(v15 - 1) + 8) - 64) >= 0xFFFFFF80)
        v14 = v15;
      if (v13 <= 0xFFFFFFBF)
      {
        v17 = (unint64_t)(v13 + 64) >> 6;
        do
        {
          v18 = *v14++;
          *(_QWORD *)v7 = v18;
          v7 += 8;
          --v17;
        }
        while (v17);
      }
    }
  }
  v19 = v39;
  if ((_UNKNOWN *)v38 != &unk_1C866F1C0)
    v19 = &v37;
  v20 = v19[28];
  if ((v20 & 7) == 3)
  {
    v22 = *a2;
    v21 = a2[1];
    if ((v20 & 8) != 0)
    {
      v34 = 1;
      v35 = 0;
      v36 = 128;
    }
    else
    {
      v34 = 1;
      v35 = 0;
      v36 = 0;
    }
    llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)&v34);
  }
  else
  {
    if ((_UNKNOWN *)v38 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (unsigned int *)&v32);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (unsigned int *)&v32);
    v23 = (unsigned int *)&v32;
    if (v33 >= 0x41)
      v23 = v32;
    v24 = *v23;
    v25 = (v24 >> 23);
    v26 = (v24 >> 19) & 0xF;
    v27 = v25 - 124;
    v28 = (v26 | 0x10u) >> (125 - v25);
    if (v25 > 0x7C)
      v28 = (v24 >> 19) & 0xF;
    else
      v27 = 0;
    if (v25 | v26)
    {
      v25 = v27;
      v26 = v28;
    }
    v30 = *a2;
    v29 = a2[1];
    v34 = 1;
    v35 = 0;
    v36 = (16 * v25) | (v24 >> 31 << 7) | v26;
    llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v34);
    if (v33 >= 0x41 && v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  }
  if ((_UNKNOWN *)v38 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v39);
  }
  else if ((*(_DWORD *)(v38 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  }
}

void sub_1C4A417EC(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v4;
  llvm::detail::DoubleAPFloat *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  _BOOL4 v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  llvm::MachineInstr *v21;
  llvm::MachineFunction *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  llvm::MachineInstr *v29;
  llvm::MachineFunction *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  int v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 48);
  v5 = (llvm::detail::DoubleAPFloat *)&v38;
  v6 = *(_QWORD *)(v4 + 32);
  if ((_UNKNOWN *)v6 == &unk_1C866F1C0)
  {
    v5 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v38, (const llvm::detail::DoubleAPFloat *)(v4 + 32));
  }
  else
  {
    v38 = *(_QWORD *)(v4 + 32);
    v7 = *(unsigned int *)(v6 + 8);
    if ((v7 + 64) >= 0x80)
    {
      v31 = v6;
      v7 = operator new[]();
      v6 = v31;
      v5 = (llvm::detail::DoubleAPFloat *)&v38;
      v39 = (char *)v7;
    }
    v8 = *(_BYTE *)(v4 + 52);
    v9 = v8 & 7;
    v41 = v8 & 0xF;
    v40 = *(_DWORD *)(v4 + 48);
    v11 = (v8 & 6) != 0 && v9 != 3;
    if (v9 == 1 || v11)
    {
      v13 = *(unsigned int *)(v6 + 8);
      if ((v13 - 64) > 0xFFFFFF7F)
        v7 = (uint64_t)&v39;
      v16 = *(uint64_t **)(v4 + 40);
      v15 = (uint64_t *)(v4 + 40);
      v14 = v16;
      if ((*(_DWORD *)(*(v15 - 1) + 8) - 64) >= 0xFFFFFF80)
        v14 = v15;
      if (v13 <= 0xFFFFFFBF)
      {
        v17 = (unint64_t)(v13 + 64) >> 6;
        do
        {
          v18 = *v14++;
          *(_QWORD *)v7 = v18;
          v7 += 8;
          --v17;
        }
        while (v17);
      }
    }
  }
  v19 = v39;
  if ((_UNKNOWN *)v38 != &unk_1C866F1C0)
    v19 = &v37;
  v20 = v19[28];
  if ((v20 & 7) == 3)
  {
    v22 = *a2;
    v21 = a2[1];
    if ((v20 & 8) != 0)
    {
      v34 = 1;
      v35 = 0;
      v36 = 128;
    }
    else
    {
      v34 = 1;
      v35 = 0;
      v36 = 0;
    }
    llvm::MachineInstr::addOperand(v21, v22, (const llvm::MachineOperand *)&v34);
  }
  else
  {
    if ((_UNKNOWN *)v38 == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v5, (unsigned int *)&v32);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v5, (unsigned int *)&v32);
    v23 = (unsigned int *)&v32;
    if (v33 >= 0x41)
      v23 = v32;
    v24 = *v23;
    v25 = (v24 >> 10) & 0x1F;
    v26 = (v24 >> 6) & 0xF;
    v27 = v25 - 12;
    v28 = (v26 | 0x10u) >> (13 - ((v24 >> 10) & 0x1F));
    if (v25 > 0xC)
      v28 = (v24 >> 6) & 0xF;
    else
      v27 = 0;
    if (v25 | v26)
    {
      v25 = v27;
      v26 = v28;
    }
    v30 = *a2;
    v29 = a2[1];
    v34 = 1;
    v35 = 0;
    v36 = (v24 >> 8) & 0x80 | (16 * v25) | v26;
    llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v34);
    if (v33 >= 0x41 && v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
  }
  if ((_UNKNOWN *)v38 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v39);
  }
  else if ((*(_DWORD *)(v38 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  }
}

void sub_1C4A41A94(uint64_t a1, llvm::MachineFunction **a2, uint64_t a3)
{
  uint64_t v4;
  llvm::MachineFunction *v5;
  llvm::MachineInstr *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a3 + 32) + 4), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 32) + 40));
  v5 = *a2;
  v6 = a2[1];
  v7 = 1;
  v8 = 0;
  v9 = v4;
  llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)&v7);
}

void sub_1C4A41AE8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  char v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  const char *v40;
  int v41;
  __int16 ***v42;
  int v43;
  uint64_t v44;
  llvm::MachineFunction *v45;
  llvm::MachineInstr *v46;
  llvm::MachineInstr *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  BOOL v52;
  int v53;
  int v56;
  uint64_t (**v58)();
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _DWORD *v71;
  uint64_t v72;
  _DWORD v73[4];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_DWORD *)(v8 + 4);
  v10 = 32;
  if (**(_WORD **)(a2 + 16) == 116)
    v10 = 64;
  v11 = *(_DWORD *)(v8 + v10 + 4);
  v12 = 96;
  if (**(_WORD **)(a2 + 16) != 116)
    v12 = 64;
  v13 = *(_DWORD *)(v8 + v12 + 4);
  v56 = *(_DWORD *)(v8 + 4);
  if (v9 < 0 && (v9 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v7 + 432))
    v14 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * (v9 & 0x7FFFFFFF));
  else
    v14 = 0;
  v63 = v14;
  v53 = v11;
  v15 = sub_1C554C050(v11, v7);
  v17 = v16;
  v18 = sub_1C554C050(v13, v7);
  v20 = v18;
  if (v17)
    v21 = v15 >= 0x100;
  else
    v21 = 1;
  v22 = !v21;
  if (v19)
    v23 = v18 >= 0x100;
  else
    v23 = 1;
  v24 = !v23;
  v25 = *(_QWORD *)(a2 + 24);
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v26 = *(_QWORD *)(v25 + 32);
  v27 = *(_QWORD *)(v26 + 40);
  v58 = &off_1E816EC08;
  *(_QWORD *)&v59 = v26;
  *(_QWORD *)&v60 = v27;
  *((_QWORD *)&v59 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 16) + 104))(*(_QWORD *)(v26 + 16));
  v28 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)&v61 + 1) = a2;
  *(_QWORD *)&v62 = 0;
  *((_QWORD *)&v60 + 1) = 0;
  *(_QWORD *)&v61 = v28;
  if ((__int128 *)(a2 + 56) != (__int128 *)((char *)&v60 + 8))
  {
    v29 = *(unsigned __int8 **)(a2 + 56);
    *((_QWORD *)&v60 + 1) = v29;
    if (v29)
      llvm::MetadataTracking::track((uint64_t)&v60 + 8, v29, 2);
  }
  if ((_DWORD)a3 != 81 && (_DWORD)a3 != 76
    || (!v15 ? (v30 = v22) : (v30 = 0), !v20 ? (v31 = v24) : (v31 = 0), (v30 & 1) == 0 && !v31))
  {
    v32 = 2 * (v14 == 129);
    v71 = v73;
    if (v22)
      v33 = 1;
    else
      v33 = 2 * (v14 == 129);
    v73[0] = 2 * (v14 == 129);
    v73[1] = v33;
    if (v24)
      v34 = 1;
    else
      v34 = 2 * (v14 == 129);
    v73[2] = v34;
    v72 = 0x400000003;
    if ((_DWORD)a3 == 81 || (_DWORD)a3 == 76)
    {
      if (a5)
      {
        v51 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 132);
        v50 = sub_1C554C050(v51, v7);
        v52 = v35 != 0 && v50 < 0x100;
        if (v52)
          v32 = 1;
        v36 = v72;
        if (v72 >= HIDWORD(v72))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, (uint64_t)v73, v72 + 1, 4);
          v36 = v72;
        }
        v71[v36] = v32;
        v37 = (v72 + 1);
        LODWORD(v72) = v72 + 1;
        v38 = v71;
        goto LABEL_58;
      }
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v37 = 4;
      v73[3] = 1;
      LODWORD(v72) = 4;
    }
    else
    {
      v50 = 0;
      v51 = 0;
      v52 = 0;
      v37 = 3;
    }
    v38 = v73;
LABEL_58:
    v43 = sub_1C4C640F8(a3, v37, v38);
    if (a4)
      v44 = 8;
    else
      v44 = 0;
    LODWORD(v69) = v56;
    v70 = 1;
    v45 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v58, v43, &v69, 1, 0, 0, 0);
    v47 = v46;
    v64 = 1;
    v66 = 0;
    v67 = 0;
    llvm::MachineInstr::addOperand(v46, v45, (const llvm::MachineOperand *)&v64);
    if (v22)
    {
      v64 = 1;
      v66 = 0;
      v67 = v15;
    }
    else
    {
      v66 = 0;
      v67 = 0;
      v64 = 0;
      v65 = v53;
      v68 = 0;
      llvm::MachineInstr::addOperand(v47, v45, (const llvm::MachineOperand *)&v64);
      v64 = 1;
      v66 = 0;
      v67 = v44;
    }
    llvm::MachineInstr::addOperand(v47, v45, (const llvm::MachineOperand *)&v64);
    if (v24)
    {
      v64 = 1;
      v66 = 0;
      v67 = v20;
    }
    else
    {
      v66 = 0;
      v67 = 0;
      v64 = 0;
      v65 = v13;
      v68 = 0;
      llvm::MachineInstr::addOperand(v47, v45, (const llvm::MachineOperand *)&v64);
      v64 = 1;
      v66 = 0;
      v67 = v44;
    }
    llvm::MachineInstr::addOperand(v47, v45, (const llvm::MachineOperand *)&v64);
    if ((_DWORD)a3 == 81 || (_DWORD)a3 == 76)
    {
      if (a5)
      {
        if (v52)
        {
          v64 = 1;
          v66 = 0;
          v67 = v50;
        }
        else
        {
          v66 = 0;
          v67 = 0;
          v64 = 0;
          v65 = v51;
          v68 = 0;
          llvm::MachineInstr::addOperand(v47, v45, (const llvm::MachineOperand *)&v64);
          v64 = 1;
          v66 = 0;
          v67 = v44;
        }
      }
      else
      {
        v64 = 1;
        v66 = 0;
        v67 = 0;
      }
      llvm::MachineInstr::addOperand(v47, v45, (const llvm::MachineOperand *)&v64);
    }
    v48 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v48 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v48 = a2;
        do
          v48 = *(_QWORD *)(v48 + 8);
        while ((*(_WORD *)(v48 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v48 + 8));
    sub_1C554AE8C(v47, *(_QWORD *)(a1 + 72), *(_QWORD **)(a1 + 80));
    if (v71 != v73)
      free(v71);
    goto LABEL_105;
  }
  v39 = *(_DWORD *)(*((_QWORD *)sub_1C4A3EBBC(a1, a2, v14, 0, 0) + 4) + 4);
  LODWORD(v71) = v56;
  LODWORD(v72) = 1;
  v64 = v39;
  LODWORD(v67) = 0;
  ((void (*)(uint64_t (***)(), uint64_t, _DWORD **, uint64_t, int *, uint64_t, _QWORD))v58[4])(&v58, 19, &v71, 1, &v64, 1, 0);
  v41 = sub_1C4825F50((unint64_t *)&v63);
  if ((_DWORD)v40 == 1)
  if (v41 <= 111)
  {
    if (v41 <= 47)
    {
      v42 = (__int16 ***)&off_1E7FB1B88;
      if (v41 != 1 && v41 != 16)
        v42 = &off_1E7FB1568;
    }
    else if (v41 > 79)
    {
      if (v41 == 80)
        v42 = (__int16 ***)&off_1E7FB1680;
      else
        v42 = (__int16 ***)&off_1E7FB16B8;
    }
    else if (v41 == 48)
    {
      v42 = (__int16 ***)&off_1E7FB1610;
    }
    else
    {
      v42 = (__int16 ***)&off_1E7FB1BC0;
    }
  }
  else if (v41 > 223)
  {
    if (v41 > 287)
    {
      if (v41 == 288)
        v42 = (__int16 ***)&off_1E7FB1878;
      else
        v42 = (__int16 ***)&off_1E7FB18B0;
    }
    else if (v41 == 224)
    {
      v42 = (__int16 ***)&off_1E7FB1808;
    }
    else
    {
      v42 = (__int16 ***)&off_1E7FB1840;
    }
  }
  else if (v41 > 159)
  {
    if (v41 == 160)
      v42 = (__int16 ***)&off_1E7FB1798;
    else
      v42 = (__int16 ***)&off_1E7FB17D0;
  }
  else if (v41 == 112)
  {
    v42 = (__int16 ***)&off_1E7FB1728;
  }
  else
  {
    v42 = (__int16 ***)&off_1E7FB1760;
  }
  *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * (v56 & 0x7FFFFFFF)) = v42;
  v49 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v49 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v49 = a2;
      do
        v49 = *(_QWORD *)(v49 + 8);
      while ((*(_WORD *)(v49 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v49 + 8));
LABEL_105:
  v58 = &off_1E816EC08;
  if (*((_QWORD *)&v60 + 1))
    llvm::MetadataTracking::untrack((uint64_t)&v60 + 8, *((unsigned __int8 **)&v60 + 1));
}

uint64_t sub_1C4A421C4(char a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;

  if (a1)
    goto LABEL_9;
  v5 = *(unsigned int *)(a3 + 32 * a4 + 4);
  v6 = *(_QWORD *)(a5 + 24);
  v7 = *(_QWORD *)(a5 + 272);
  if ((int)v5 >= 0)
    v8 = (uint64_t *)(v7 + 8 * v5);
  else
    v8 = (uint64_t *)(v6 + 16 * (v5 & 0x7FFFFFFF) + 8);
  v9 = *v8;
  if (!*v8)
  {
    v10 = 0;
LABEL_7:
    v11 = 0;
    goto LABEL_8;
  }
  v10 = *v8;
  if ((*(_BYTE *)(v9 + 3) & 1) != 0)
    goto LABEL_19;
  v10 = *(_QWORD *)(v9 + 24);
  if (!v10)
    goto LABEL_20;
  if ((*(_BYTE *)(v10 + 3) & 1) != 0)
LABEL_19:
    v10 = *(_QWORD *)(v10 + 8);
  else
    v10 = 0;
LABEL_20:
  if ((*(_BYTE *)(v9 + 3) & 1) == 0)
  {
    v9 = *(_QWORD *)(v9 + 24);
    if (!v9 || (*(_BYTE *)(v9 + 3) & 1) == 0)
      goto LABEL_7;
  }
  v15 = *(_QWORD *)(v9 + 8);
  if (!v15 || **(_WORD **)(v15 + 16) != 178 || *(_DWORD *)(v15 + 40) != 2)
    goto LABEL_7;
  v16 = *(unsigned int *)(*(_QWORD *)(v15 + 32) + 36);
  v17 = v6 + 16 * (v16 & 0x7FFFFFFF) + 8;
  v18 = (uint64_t *)(v7 + 8 * v16);
  if ((int)v16 >= 0)
    v19 = v18;
  else
    v19 = (uint64_t *)v17;
  v10 = *v19;
  if (v10)
  {
    if ((*(_BYTE *)(v10 + 3) & 1) == 0)
    {
      v10 = *(_QWORD *)(v10 + 24);
      if (!v10)
        goto LABEL_30;
      if ((*(_BYTE *)(v10 + 3) & 1) == 0)
      {
        v10 = 0;
        goto LABEL_30;
      }
    }
    v10 = *(_QWORD *)(v10 + 8);
  }
LABEL_30:
  v11 = v10 != 0;
LABEL_8:
  if (*(_QWORD *)(v10 + 24) != a2)
  {
LABEL_9:
    v12 = 0;
    v11 = 0;
    return v12 | (v11 << 8);
  }
  v12 = 0;
  if (**(unsigned __int16 **)(v10 + 16) - 337 <= 1)
  {
    sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v10 + 32) + 68), a5);
    if (v14)
      v12 = 1;
  }
  return v12 | (v11 << 8);
}

uint64_t sub_1C4A42334(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, unsigned int a7, int a8)
{
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  const char *v25;
  int v26;
  __int16 ***v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t result;
  unint64_t v35;
  int v36;
  uint64_t (**v37)();
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;

  v13 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 32 * a4 + 4);
  if ((v13 & 0x80000000) != 0 && (v13 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432))
    v14 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * (v13 & 0x7FFFFFFF));
  else
    v14 = 0;
  v42 = v14;
  v15 = *(_QWORD *)(a3 + 24);
  v41 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v16 + 40);
  v37 = &off_1E816EC08;
  *(_QWORD *)&v38 = v16;
  *(_QWORD *)&v39 = v17;
  *((_QWORD *)&v38 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 16) + 104))(*(_QWORD *)(v16 + 16));
  v18 = *(_QWORD *)(a3 + 24);
  *((_QWORD *)&v40 + 1) = a3;
  *(_QWORD *)&v41 = 0;
  *((_QWORD *)&v39 + 1) = 0;
  *(_QWORD *)&v40 = v18;
  if ((__int128 *)(a3 + 56) != (__int128 *)((char *)&v39 + 8))
  {
    v19 = *(unsigned __int8 **)(a3 + 56);
    *((_QWORD *)&v39 + 1) = v19;
    if (v19)
      llvm::MetadataTracking::track((uint64_t)&v39 + 8, v19, 2);
  }
  v20 = llvm::MachineRegisterInfo::cloneVirtualRegister(a6, *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4), "", 0);
  LODWORD(v35) = v20;
  v36 = 1;
  sub_1C5545FFC((uint64_t)&v37, &v35, 1.0);
  v22 = v21;
  v23 = *(_QWORD *)(*(_QWORD *)(a6 + 24) + 16 * (v20 & 0x7FFFFFFF)) >= 8uLL
     && (*(_QWORD *)(*(_QWORD *)(a6 + 24) + 16 * (v20 & 0x7FFFFFFF)) & 4) == 0;
  if (!v23)
  {
    v24 = a8;
    v26 = sub_1C4825F50(&v42);
    if ((_DWORD)v25 == 1)
    if (v26 <= 111)
    {
      if (v26 <= 47)
      {
        v27 = (__int16 ***)&off_1E7FB1B88;
        if (v26 != 1)
        {
          v23 = v26 == 16;
          a8 = v24;
          if (!v23)
            v27 = &off_1E7FB1568;
          goto LABEL_42;
        }
      }
      else if (v26 > 79)
      {
        if (v26 == 80)
          v27 = (__int16 ***)&off_1E7FB1680;
        else
          v27 = (__int16 ***)&off_1E7FB16B8;
      }
      else if (v26 == 48)
      {
        v27 = (__int16 ***)&off_1E7FB1610;
      }
      else
      {
        v27 = (__int16 ***)&off_1E7FB1BC0;
      }
    }
    else if (v26 > 223)
    {
      if (v26 > 287)
      {
        if (v26 == 288)
          v27 = (__int16 ***)&off_1E7FB1878;
        else
          v27 = (__int16 ***)&off_1E7FB18B0;
      }
      else if (v26 == 224)
      {
        v27 = (__int16 ***)&off_1E7FB1808;
      }
      else
      {
        v27 = (__int16 ***)&off_1E7FB1840;
      }
    }
    else if (v26 > 159)
    {
      if (v26 == 160)
        v27 = (__int16 ***)&off_1E7FB1798;
      else
        v27 = (__int16 ***)&off_1E7FB17D0;
    }
    else if (v26 == 112)
    {
      v27 = (__int16 ***)&off_1E7FB1728;
    }
    else
    {
      v27 = (__int16 ***)&off_1E7FB1760;
    }
    a8 = v24;
LABEL_42:
    v28 = (_QWORD *)(*(_QWORD *)(a6 + 24) + 16 * (v20 & 0x7FFFFFFF));
    v29 = *v28 & 0xFFFFFFFFFFFFFFF8;
    if ((*v28 & 4) != 0)
    {
      if (!v29
        || ((*(_QWORD *)(*(_QWORD *)(v29 + 24) + (((unint64_t)*((unsigned __int16 *)*v27 + 12) >> 3) & 0x1FF8)) >> *((_WORD *)*v27 + 12)) & 1) != 0)
      {
        *v28 = v27;
      }
    }
    else
    {
      sub_1C51A3F30((_QWORD *)a6, v20, v29, (uint64_t)v27, 0);
    }
  }
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1[9] + 8) + 7968;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)a3, *(llvm::MachineFunction **)(*(_QWORD *)(a3 + 24) + 32), (const llvm::MachineOperand *)(*(_QWORD *)(a3 + 32) + 32 * a5));
  if (a4 == 2)
  {
    llvm::MachineOperand::setReg(*(_QWORD *)(a3 + 32) + 32, v13);
    *(_DWORD *)(*(_QWORD *)(a3 + 32) + 32) = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 32) & 0xFBFFFFFF | (((*(_DWORD *)(*(_QWORD *)(a3 + 32) + 64) >> 26) & ~HIBYTE(*(_DWORD *)(*(_QWORD *)(a3 + 32) + 64)) & 1) << 26);
  }
  llvm::MachineOperand::setReg(*(_QWORD *)(a3 + 32) + 64, v20);
  *(_DWORD *)(*(_QWORD *)(a3 + 32) + 64) &= ~0x4000000u;
  sub_1C4A42754(a1, a2, a3, 1u, 2u, a6, a7, a8);
  if ((*(_BYTE *)v22 & 4) != 0)
  {
    v30 = v22;
  }
  else
  {
    v30 = v22;
    if ((*(_WORD *)(v22 + 44) & 8) != 0)
    {
      v30 = v22;
      do
        v30 = *(_QWORD *)(v30 + 8);
      while ((*(_WORD *)(v30 + 44) & 8) != 0);
    }
  }
  result = sub_1C487FE80(*(_QWORD *)(v22 + 24) + 40, v22, *(_QWORD *)(v30 + 8));
  v37 = &off_1E816EC08;
  if (*((_QWORD *)&v39 + 1))
    return llvm::MetadataTracking::untrack((uint64_t)&v39 + 8, *((unsigned __int8 **)&v39 + 1));
  return result;
}

void sub_1C4A42754(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, unsigned int a7, int a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  int v44;
  const char *v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  llvm::MachineFunction *v59;
  llvm::MachineInstr *v60;
  llvm::MachineInstr *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  int v75;
  llvm::MachineFunction *v77;
  llvm::MachineInstr *v78;
  uint64_t v79[4];
  unsigned __int8 *v80[5];
  _BYTE v81[80];
  int v82;
  int v83;
  _BYTE v84[80];
  int v85;
  int v86;
  unint64_t v87;
  int v88;
  uint64_t (**v89)();
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int v94;
  int v95;
  _OWORD v96[2];
  _OWORD v97[2];
  _OWORD v98[2];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  llvm::MachineFunction **v105;
  uint64_t v106;
  uint64_t *v107;
  void *v108;
  int v109;
  int v110;
  _DWORD v111[6];
  _OWORD v112[5];
  int v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a3 + 32);
  v13 = *(unsigned int *)(v12 + 32 * a4 + 4);
  v14 = *(_QWORD *)(a6 + 24);
  v15 = *(_QWORD *)(a6 + 272);
  if ((int)v13 >= 0)
    v16 = (uint64_t *)(v15 + 8 * v13);
  else
    v16 = (uint64_t *)(v14 + 16 * (v13 & 0x7FFFFFFF) + 8);
  v17 = *v16;
  if (v17 && ((*(_BYTE *)(v17 + 3) & 1) != 0 || (v17 = *(_QWORD *)(v17 + 24)) != 0 && (*(_BYTE *)(v17 + 3) & 1) != 0))
    v18 = *(_QWORD *)(v17 + 8);
  else
    v18 = 0;
  if (a8)
  {
    v19 = *(unsigned int *)(*(_QWORD *)(v18 + 32) + 36);
    v20 = (uint64_t *)(v15 + 8 * v19);
    if ((int)v19 < 0)
      v20 = (uint64_t *)(v14 + 16 * (v19 & 0x7FFFFFFF) + 8);
    v21 = *v20;
    if (v21)
    {
      if ((*(_BYTE *)(v21 + 3) & 1) != 0 || (v21 = *(_QWORD *)(v21 + 24)) != 0 && (*(_BYTE *)(v21 + 3) & 1) != 0)
        v18 = *(_QWORD *)(v21 + 8);
      else
        v18 = 0;
    }
    else
    {
      v18 = 0;
    }
  }
  v22 = **(unsigned __int16 **)(v18 + 16);
  v23 = (__int128 *)(v12 + 32 * a5);
  v24 = v23[1];
  v101 = *v23;
  v102 = v24;
  if ((DWORD1(v101) & 0x80000000) != 0)
  {
    v25 = DWORD1(v101) & 0x7FFFFFFF;
    if (v25 < *(_DWORD *)(a6 + 432) && *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * v25) == 257)
    {
      v26 = *(_QWORD *)(v14 + 16 * v25 + 8);
      if (v26)
      {
        v65 = v26;
        if ((*(_DWORD *)v26 & 0x1000000) != 0 || (v65 = *(_QWORD *)(v26 + 24)) != 0 && (*(_BYTE *)(v65 + 3) & 1) != 0)
        {
          v66 = *(_QWORD *)(v65 + 8);
          if (v66)
          {
            if (**(_WORD **)(v66 + 16) == 178
              && *(_DWORD *)(v66 + 40) == 2
              && ((*(_DWORD *)v26 & 0x1000000) != 0
               || (v26 = *(_QWORD *)(v26 + 24)) != 0 && (*(_BYTE *)(v26 + 3) & 1) != 0))
            {
              v67 = *(_QWORD *)(v26 + 8);
              if (v67)
              {
                v68 = *(_QWORD *)(v67 + 32);
                v69 = *(_OWORD *)(v68 + 48);
                v101 = *(_OWORD *)(v68 + 32);
                v102 = v69;
              }
            }
          }
        }
      }
    }
  }
  v27 = *(_OWORD *)(v12 + 112);
  v99 = *(_OWORD *)(v12 + 96);
  v100 = v27;
  if ((DWORD1(v99) & 0x80000000) != 0)
  {
    v28 = DWORD1(v99) & 0x7FFFFFFF;
    if (v28 < *(_DWORD *)(a6 + 432) && *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * v28) == 257)
    {
      v29 = *(_QWORD *)(v14 + 16 * v28 + 8);
      if (v29)
      {
        v70 = v29;
        if ((*(_DWORD *)v29 & 0x1000000) != 0 || (v70 = *(_QWORD *)(v29 + 24)) != 0 && (*(_BYTE *)(v70 + 3) & 1) != 0)
        {
          v71 = *(_QWORD *)(v70 + 8);
          if (v71)
          {
            if (**(_WORD **)(v71 + 16) == 178
              && *(_DWORD *)(v71 + 40) == 2
              && ((*(_DWORD *)v29 & 0x1000000) != 0
               || (v29 = *(_QWORD *)(v29 + 24)) != 0 && (*(_BYTE *)(v29 + 3) & 1) != 0))
            {
              v72 = *(_QWORD *)(v29 + 8);
              if (v72)
              {
                v73 = *(_QWORD *)(v72 + 32);
                v74 = *(_OWORD *)(v73 + 48);
                v99 = *(_OWORD *)(v73 + 32);
                v100 = v74;
              }
            }
          }
        }
      }
    }
  }
  v30 = *(_OWORD **)(v18 + 32);
  v31 = v30[3];
  v98[0] = v30[2];
  v98[1] = v31;
  v32 = v30[5];
  v97[0] = v30[4];
  v97[1] = v32;
  sub_1C554C050(SDWORD1(v97[0]), a6);
  v33 = *(_QWORD *)(v18 + 32);
  v34 = *(_OWORD *)(v33 + 112);
  v96[0] = *(_OWORD *)(v33 + 96);
  v96[1] = v34;
  v35 = sub_1C554C050(*(_DWORD *)(v33 + 132), a6);
  v36 = v35;
  v75 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  if (v37 && v35 == 5)
  {
    v38 = *(_QWORD *)(v18 + 24);
    v93 = 0u;
    v92 = 0u;
    v91 = 0u;
    v90 = 0u;
    v39 = *(_QWORD *)(v38 + 32);
    v89 = &off_1E816EC08;
    *(_QWORD *)&v90 = v39;
    v91 = *(unint64_t *)(v39 + 40);
    *((_QWORD *)&v90 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v39 + 16) + 104))(*(_QWORD *)(v39 + 16));
    *(_QWORD *)&v93 = 0;
    *((_QWORD *)&v92 + 1) = v18;
    *(_QWORD *)&v92 = *(_QWORD *)(v18 + 24);
    *((_QWORD *)&v92 + 1) = v18;
    if ((__int128 *)(v18 + 56) != (__int128 *)((char *)&v91 + 8))
    {
      v40 = *(unsigned __int8 **)(v18 + 56);
      *((_QWORD *)&v91 + 1) = v40;
      if (v40)
        llvm::MetadataTracking::track((uint64_t)&v91 + 8, v40, 2);
    }
    if ((DWORD1(v98[0]) & 0x80000000) != 0 && (DWORD1(v98[0]) & 0x7FFFFFFFu) < *(_DWORD *)(a6 + 432))
      v41 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * (DWORD1(v98[0]) & 0x7FFFFFFF));
    else
      v41 = 0;
    v87 = v41;
    sub_1C4825F50(&v87);
    if ((_DWORD)v42 == 1)
    __asm { BR              X10 }
  }
  sub_1C4A3C18C((uint64_t)&v89, a6, a1[10], a1[11], (unsigned __int8 *)v98, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)&v87, a6, a1[10], a1[11], (unsigned __int8 *)v96, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)v112, a6, a1[10], a1[11], (unsigned __int8 *)v97, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)v84, a6, a1[10], a1[11], (unsigned __int8 *)&v101, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)v81, a6, a1[10], a1[11], (unsigned __int8 *)&v99, 0, 0, 0, 1u);
  v43 = 0;
  v44 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
  if (v44 < 0)
  {
    if ((v44 & 0x7FFFFFFFu) >= *(_DWORD *)(a6 + 432))
      v43 = 0;
    else
      v43 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * (v44 & 0x7FFFFFFF));
  }
  v79[0] = v43;
  v46 = sub_1C4825F50((unint64_t *)v79);
  if ((_DWORD)v45 == 1)
  if (v22 == 338)
    v47 = 37;
  else
    v47 = 36;
  if (v22 == 338)
    v48 = 27;
  else
    v48 = 26;
  if (v113 > 3)
    v49 = 1;
  else
    v49 = 2;
  v50 = 2 * (v86 == 16);
  if (v85 == 5)
    v50 = 9;
  if (v82 == 5)
    v51 = 9;
  else
    v51 = 2 * (v83 == 16);
  v108 = v111;
  if (v46 == 16)
    v52 = v48;
  else
    v52 = v47;
  v111[0] = 2 * (v46 == 16);
  v111[1] = v49;
  v111[2] = v50;
  v111[3] = v51;
  v111[4] = 2 * (v95 == 16);
  if (v46 == 16)
    v53 = 4;
  else
    v53 = 5;
  v110 = 5;
  v109 = v53;
  v54 = sub_1C4C640F8(v52, v53, v111);
  v55 = *(_QWORD *)(a3 + 24);
  v80[4] = 0;
  v56 = *(_QWORD *)(v55 + 32);
  v79[0] = (uint64_t)&off_1E816EC08;
  v79[1] = v56;
  v79[3] = *(_QWORD *)(v56 + 40);
  v79[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v56 + 16) + 104))(*(_QWORD *)(v56 + 16));
  v57 = *(unsigned __int8 **)(a3 + 24);
  v80[2] = (unsigned __int8 *)a3;
  v80[3] = 0;
  v80[0] = 0;
  v80[1] = v57;
  if ((unsigned __int8 **)(a3 + 56) != v80)
  {
    v58 = *(unsigned __int8 **)(a3 + 56);
    v80[0] = v58;
    if (v58)
      llvm::MetadataTracking::track((uint64_t)v80, v58, 2);
  }
  LODWORD(v105) = v75;
  LODWORD(v106) = 1;
  v59 = (llvm::MachineFunction *)sub_1C5548620(v79, v54, (uint64_t *)&v105, 1, 0, 0, 0);
  v61 = v60;
  LODWORD(v103) = 1;
  *(_QWORD *)&v104 = 0;
  *((_QWORD *)&v103 + 1) = 0;
  llvm::MachineInstr::addOperand(v60, v59, (const llvm::MachineOperand *)&v103);
  v77 = v59;
  v78 = v61;
  v105 = &v77;
  v106 = a6;
  v107 = a1;
  if (v94 == 5)
    v62 = DWORD1(v98[0]);
  else
    v62 = HIDWORD(v89);
  v104 = 0uLL;
  *((_QWORD *)&v103 + 1) = 0;
  DWORD1(v103) = v62;
  LODWORD(v103) = 0;
  llvm::MachineInstr::addOperand(v61, v59, (const llvm::MachineOperand *)&v103);
  LODWORD(v103) = 1;
  *(_QWORD *)&v104 = 0;
  *((_QWORD *)&v103 + 1) = 0;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v103);
  if (v88 == 5)
    v63 = DWORD1(v96[0]);
  else
    v63 = HIDWORD(v87);
  v104 = 0uLL;
  *((_QWORD *)&v103 + 1) = 0;
  DWORD1(v103) = v63;
  LODWORD(v103) = 0;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v103);
  LODWORD(v103) = 1;
  *(_QWORD *)&v104 = 0;
  *((_QWORD *)&v103 + 1) = 0;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v103);
  LODWORD(v103) = 1;
  *((_QWORD *)&v103 + 1) = 0;
  *(_QWORD *)&v104 = a7;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v103);
  v103 = v112[0];
  v104 = v112[1];
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v103);
  if (v46 == 32)
  {
    LODWORD(v103) = 1;
    *(_QWORD *)&v104 = 0;
    *((_QWORD *)&v103 + 1) = 0;
    llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v103);
  }
  sub_1C4A4B340(&v105, (uint64_t)v84);
  sub_1C4A4B340(&v105, (uint64_t)v81);
  LODWORD(v103) = 1;
  *((_QWORD *)&v103 + 1) = 0;
  *(_QWORD *)&v104 = v36 & 7;
  llvm::MachineInstr::addOperand(v78, v77, (const llvm::MachineOperand *)&v103);
  v64 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v64 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v64 = a2;
      do
        v64 = *(_QWORD *)(v64 + 8);
      while ((*(_WORD *)(v64 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v64 + 8));
  sub_1C554AE8C(v78, a1[9], (_QWORD *)a1[10]);
  v79[0] = (uint64_t)&off_1E816EC08;
  if (v80[0])
    llvm::MetadataTracking::untrack((uint64_t)v80, v80[0]);
  if (v108 != v111)
    free(v108);
}

uint64_t sub_1C4A432A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  llvm::detail::DoubleAPFloat *v17;
  void *v18;
  unsigned int **v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  llvm::detail::DoubleAPFloat *v31;
  void *v32;
  unsigned int **v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  llvm::MachineFunction *v56;
  llvm::MachineInstr *v57;
  llvm::MachineInstr *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  char v65;
  uint64_t v67;
  char v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t (***v80)();
  void (**v81)(uint64_t (***)());
  unsigned int **v82;
  void (**v83)(unsigned int **);
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  llvm::MachineFunction *v93;
  llvm::MachineInstr *v94;
  llvm::MachineInstr *v95;
  uint64_t v96;
  const llvm::MachineOperand *v97;
  const llvm::MachineOperand *v98;
  uint64_t v99;
  uint64_t v100;
  size_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  _BOOL4 v106;
  int v107;
  char v108;
  uint64_t v109;
  _BOOL4 v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t (**v113)();
  _QWORD *(*v114)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  unint64_t v115;
  uint64_t (***v116)();
  char v117;
  unsigned int *v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int **v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_DWORD *)(v6 + 4);
  if (v7 < 0
    && (v7 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a3 + 432)
    && *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * (v7 & 0x7FFFFFFF)) == 513)
  {
    return 0;
  }
  v112 = *(_DWORD *)(v6 + 36);
  v8 = **(unsigned __int16 **)(a2 + 16);
  sub_1C554C050(v112, a3);
  if (v9)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v12 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
    if ((v112 & 0x80000000) == 0)
      v12 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * v112);
    v13 = *v12;
    if ((*(_BYTE *)(v13 + 3) & 1) == 0)
      v13 = *(_QWORD *)(v13 + 24);
    v14 = *(_QWORD *)(v13 + 8);
    if (**(_WORD **)(v14 + 16) == 121)
      v10 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 48);
    else
      v10 = 0;
    v11 = v10 != 0;
  }
  sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 68), a3);
  if (v15)
  {
    if (v8 == 45)
      v16 = 0;
    else
      v16 = v11;
    if ((v16 & 1) != 0)
      goto LABEL_18;
    v22 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 68);
    v24 = *(_QWORD *)(a3 + 24);
    v26 = *(_QWORD *)(a3 + 272);
    v23 = v22 & 0x7FFFFFFF;
  }
  else
  {
    v22 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 68);
    v23 = v22 & 0x7FFFFFFF;
    v24 = *(_QWORD *)(a3 + 24);
    v25 = (uint64_t *)(v24 + 16 * v23 + 8);
    v26 = *(_QWORD *)(a3 + 272);
    if ((int)v22 >= 0)
      v25 = (uint64_t *)(v26 + 8 * v22);
    v27 = *v25;
    if ((*(_BYTE *)(v27 + 3) & 1) == 0)
      v27 = *(_QWORD *)(v27 + 24);
    v28 = *(_QWORD *)(v27 + 8);
    if (**(_WORD **)(v28 + 16) == 121)
      v29 = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 48);
    else
      v29 = 0;
    if (v8 == 45)
      v30 = 0;
    else
      v30 = v11;
    if ((v30 & 1) != 0 || v29)
    {
      if (v29)
      {
        v32 = *(void **)(v29 + 32);
        v31 = (llvm::detail::DoubleAPFloat *)(v29 + 32);
        if (v32 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::bitcastToAPInt(v31, (unsigned int *)&v118);
        else
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v31, (unsigned int *)&v118);
        if (v119 >= 0x41)
          v33 = (unsigned int **)v118;
        else
          v33 = &v118;
        v20 = (uint64_t)*v33;
        if (v119 >= 0x41 && v118)
          MEMORY[0x1CAA32F9C]();
        v21 = 1;
LABEL_48:
        if (v20 <= 255)
        {
          if (v7 < 0 && (v7 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a3 + 432))
          {
            v34 = a1;
            v35 = 2 * (*(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * (v7 & 0x7FFFFFFF)) != 257);
          }
          else
          {
            v34 = a1;
            v35 = 2;
          }
          if (v8 == 45)
            v42 = 67;
          else
            v42 = 90;
          if (v8 == 45)
            v43 = 0;
          else
            v43 = v21;
          if (v43 == 1)
          {
            LODWORD(v118) = v35;
            HIDWORD(v118) = v35;
            LODWORD(v119) = 1;
          }
          else
          {
            v118 = (unsigned int *)(v35 | 0x100000000);
            LODWORD(v119) = v35;
          }
          v51 = sub_1C4C640F8(v42, 3, &v118);
          v52 = *(_QWORD *)(a2 + 24);
          v124 = 0;
          v53 = *(_QWORD *)(v52 + 32);
          v118 = (unsigned int *)&off_1E816EC08;
          v119 = (unsigned int *)v53;
          v121 = *(unsigned int ***)(v53 + 40);
          v120 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v53 + 16) + 104))(*(_QWORD *)(v53 + 16));
          v54 = *(_QWORD *)(a2 + 24);
          v123 = (unint64_t)a2;
          *(_QWORD *)&v122 = 0;
          *((_QWORD *)&v122 + 1) = v54;
          if ((__int128 *)(a2 + 56) != &v122)
          {
            v55 = *(unsigned __int8 **)(a2 + 56);
            *(_QWORD *)&v122 = v55;
            if (v55)
              llvm::MetadataTracking::track((uint64_t)&v122, v55, 2);
          }
          LODWORD(v125) = v7;
          LODWORD(v126) = 1;
          v56 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v118, v51, &v125, 1, 0, 0, 0);
          v58 = v57;
          LODWORD(v113) = 1;
          v114 = 0;
          v115 = 0;
          llvm::MachineInstr::addOperand(v57, v56, (const llvm::MachineOperand *)&v113);
          if (v43)
          {
            v114 = 0;
            v115 = 0;
            LODWORD(v113) = 0;
            HIDWORD(v113) = v112;
            v116 = 0;
            llvm::MachineInstr::addOperand(v58, v56, (const llvm::MachineOperand *)&v113);
            LODWORD(v113) = 1;
            v114 = 0;
            v115 = 0;
            llvm::MachineInstr::addOperand(v58, v56, (const llvm::MachineOperand *)&v113);
            LODWORD(v113) = 1;
            v114 = 0;
            v115 = v20;
          }
          else
          {
            LODWORD(v113) = 1;
            v114 = 0;
            v115 = v20;
            llvm::MachineInstr::addOperand(v58, v56, (const llvm::MachineOperand *)&v113);
            if (v8 == 45)
              v59 = v112;
            else
              v59 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68);
            v114 = 0;
            v115 = 0;
            LODWORD(v113) = 0;
            HIDWORD(v113) = v59;
            v116 = 0;
            llvm::MachineInstr::addOperand(v58, v56, (const llvm::MachineOperand *)&v113);
            LODWORD(v113) = 1;
            v114 = 0;
            v115 = 0;
          }
          llvm::MachineInstr::addOperand(v58, v56, (const llvm::MachineOperand *)&v113);
          v61 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v61 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v61 = a2;
              do
                v61 = *(_QWORD *)(v61 + 8);
              while ((*(_WORD *)(v61 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v61 + 8));
          sub_1C554AE8C(v58, *(_QWORD *)(v34 + 72), *(_QWORD **)(v34 + 80));
          v118 = (unsigned int *)&off_1E816EC08;
          if ((_QWORD)v122)
            llvm::MetadataTracking::untrack((uint64_t)&v122, (unsigned __int8 *)v122);
          return 1;
        }
        return 0;
      }
LABEL_18:
      v18 = *(void **)(v10 + 32);
      v17 = (llvm::detail::DoubleAPFloat *)(v10 + 32);
      if (v18 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v17, (unsigned int *)&v118);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v17, (unsigned int *)&v118);
      if (v119 >= 0x41)
        v19 = (unsigned int **)v118;
      else
        v19 = &v118;
      v20 = (uint64_t)*v19;
      if (v119 >= 0x41 && v118)
        MEMORY[0x1CAA32F9C]();
      v21 = 0;
      goto LABEL_48;
    }
  }
  v111 = 0;
  v36 = (uint64_t *)(v24 + 16 * v23 + 8);
  v37 = (uint64_t *)(v26 + 8 * v22);
  if ((int)v22 >= 0)
    v36 = v37;
  v38 = *v36;
  if (!v38)
    goto LABEL_80;
  v39 = v38;
  if ((*(_BYTE *)(v38 + 3) & 1) != 0)
  {
    v39 = v38;
    while (1)
    {
      v39 = *(_QWORD *)(v39 + 24);
      if (!v39)
        break;
      if ((*(_BYTE *)(v39 + 3) & 1) == 0)
        goto LABEL_60;
    }
  }
  else
  {
LABEL_60:
    v40 = *(_QWORD *)(v39 + 8);
    if (**(unsigned __int16 **)(v40 + 16) - 45 > 1)
      goto LABEL_80;
    while (1)
    {
      v39 = *(_QWORD *)(v39 + 24);
      if (!v39)
        break;
      if ((*(_BYTE *)(v39 + 3) & 1) == 0)
      {
        v41 = *(_QWORD *)(v39 + 8);
        if (v41 != v40)
        {
          v40 = *(_QWORD *)(v39 + 8);
          if (**(unsigned __int16 **)(v41 + 16) - 45 >= 2)
            goto LABEL_80;
        }
      }
    }
  }
  if ((*(_BYTE *)(v38 + 3) & 1) != 0 || (v38 = *(_QWORD *)(v38 + 24)) != 0 && (*(_BYTE *)(v38 + 3) & 1) != 0)
  {
    v44 = *(_QWORD *)(v38 + 8);
    if (v44 && **(_WORD **)(v44 + 16) == 127 && *(_DWORD *)(v44 + 40) == 3)
    {
      v62 = *(_QWORD *)(v44 + 32);
      v63 = *(_DWORD *)(v62 + 36);
      v111 = v63;
      v64 = sub_1C554C050(*(_DWORD *)(v62 + 68), a3);
      if (v65 && v64 < 5)
      {
        LODWORD(v22) = v112;
        goto LABEL_129;
      }
    }
  }
LABEL_80:
  if (v8 != 45)
    return 0;
  v45 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8);
  if ((v112 & 0x80000000) == 0)
    v45 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * v112);
  v46 = *v45;
  if (!v46)
    return 0;
  v47 = v46;
  if ((*(_BYTE *)(v46 + 3) & 1) != 0)
  {
    v47 = v46;
    while (1)
    {
      v47 = *(_QWORD *)(v47 + 24);
      if (!v47)
        break;
      if ((*(_BYTE *)(v47 + 3) & 1) == 0)
        goto LABEL_88;
    }
  }
  else
  {
LABEL_88:
    v48 = *(_QWORD *)(v47 + 8);
    if (**(unsigned __int16 **)(v48 + 16) - 45 > 1)
      return 0;
    while (1)
    {
      v47 = *(_QWORD *)(v47 + 24);
      if (!v47)
        break;
      if ((*(_BYTE *)(v47 + 3) & 1) == 0)
      {
        v49 = *(_QWORD *)(v47 + 8);
        if (v49 != v48)
        {
          result = 0;
          v48 = *(_QWORD *)(v47 + 8);
          if (**(unsigned __int16 **)(v49 + 16) - 45 >= 2)
            return result;
        }
      }
    }
  }
  if ((*(_BYTE *)(v46 + 3) & 1) == 0)
  {
    v46 = *(_QWORD *)(v46 + 24);
    if (!v46 || (*(_BYTE *)(v46 + 3) & 1) == 0)
      return 0;
  }
  v60 = *(_QWORD *)(v46 + 8);
  if (!v60)
    return 0;
  if (**(_WORD **)(v60 + 16) != 127)
    return 0;
  if (*(_DWORD *)(v60 + 40) != 3)
    return 0;
  v67 = *(_QWORD *)(v60 + 32);
  v63 = *(_DWORD *)(v67 + 36);
  v111 = v63;
  v64 = sub_1C554C050(*(_DWORD *)(v67 + 68), a3);
  if (!v68 || v64 > 4)
    return 0;
  v112 = v22;
LABEL_129:
  v108 = v64;
  v109 = a1;
  if (v7 < 0 && (v7 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a3 + 432))
    v69 = 2 * (*(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * (v7 & 0x7FFFFFFF)) != 257);
  else
    v69 = 2;
  v70 = *(_QWORD *)(a3 + 24);
  v71 = (uint64_t *)(v70 + 16 * (v22 & 0x7FFFFFFF) + 8);
  v72 = *(_QWORD *)(a3 + 272);
  if ((int)v22 >= 0)
    v71 = (uint64_t *)(v72 + 8 * v22);
  v73 = *v71;
  v106 = v73
      && ((*(_BYTE *)(v73 + 3) & 1) != 0 || (v73 = *(_QWORD *)(v73 + 24)) != 0 && (*(_BYTE *)(v73 + 3) & 1) != 0)
      && (v103 = *(_QWORD *)(v73 + 8)) != 0
      && **(_WORD **)(v103 + 16) == 124
      && *(_DWORD *)(v103 + 40) == 2;
  v74 = (uint64_t *)(v70 + 16 * (v63 & 0x7FFFFFFF) + 8);
  if (v63 >= 0)
    v74 = (uint64_t *)(v72 + 8 * v63);
  v75 = *v74;
  v110 = v75
      && ((*(_BYTE *)(v75 + 3) & 1) != 0 || (v75 = *(_QWORD *)(v75 + 24)) != 0 && (*(_BYTE *)(v75 + 3) & 1) != 0)
      && (v104 = *(_QWORD *)(v75 + 8)) != 0
      && **(_WORD **)(v104 + 16) == 124
      && *(_DWORD *)(v104 + 40) == 2;
  v118 = &v112;
  v119 = &v112;
  v120 = &v112;
  v76 = v69;
  if (sub_1C4A4B864(&v118, v70, v72, v22))
  {
    if ((v112 & 0x80000000) != 0 && (v77 = v112 & 0x7FFFFFFF, v77 < *(_DWORD *)(a3 + 432)))
      v76 = 2 * (*(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v77) != 257);
    else
      v76 = 2;
  }
  v118 = &v111;
  v119 = &v111;
  v120 = &v111;
  v78 = v69;
  if (sub_1C4A4B864(&v118, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 272), v111))
  {
    if ((v111 & 0x80000000) != 0 && (v79 = v111 & 0x7FFFFFFF, v79 < *(_DWORD *)(a3 + 432)))
      v78 = 2 * (*(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v79) != 257);
    else
      v78 = 2;
  }
  v118 = (unsigned int *)&off_1E816EFF0;
  v119 = (unsigned int *)sub_1C554C7E0;
  v121 = &v118;
  v113 = &off_1E816F038;
  v114 = sub_1C554C7F8;
  v116 = &v113;
  sub_1C554C3AC(v112, a3, (uint64_t)&v118, (uint64_t)&v113, 0, 0, &v125);
  v80 = v116;
  if (v116 == &v113)
  {
    v81 = (void (**)(uint64_t (***)()))(v113 + 4);
    v80 = &v113;
LABEL_153:
    (*v81)(v80);
    goto LABEL_154;
  }
  if (v116)
  {
    v81 = (void (**)(uint64_t (***)()))(*v116 + 5);
    goto LABEL_153;
  }
LABEL_154:
  v82 = v121;
  if (v121 == &v118)
  {
    v83 = (void (**)(unsigned int **))(v118 + 8);
    v82 = &v118;
LABEL_156:
    (*v83)(v82);
    goto LABEL_157;
  }
  if (v121)
  {
    v83 = (void (**)(unsigned int **))(*v121 + 10);
    goto LABEL_156;
  }
LABEL_157:
  v107 = v128;
  if (!(_BYTE)v128)
  {
    v84 = 0;
    goto LABEL_164;
  }
  v11 = v126;
  if (v126 < 0x41)
  {
    v84 = v125;
    v85 = v125 << -(char)v126;
    if ((v85 & 0x8000000000000000) != 0)
      goto LABEL_164;
    v86 = v85 >> (64 - v126);
    goto LABEL_161;
  }
  v105 = v8;
  v101 = (((unint64_t)v126 + 63) >> 3) & 0x3FFFFFF8;
  v84 = operator new[]();
  v102 = v125;
  memcpy((void *)v84, (const void *)v125, v101);
  if (v102)
    MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
  v86 = *(_QWORD *)v84;
  v8 = v105;
  if ((*(_QWORD *)v84 & 0x8000000000000000) == 0)
  {
LABEL_161:
    if (v86 < 0x100)
      v76 = 1;
  }
LABEL_164:
  if (v8 == 45)
    v87 = 67;
  else
    v87 = 90;
  v118 = (unsigned int *)__PAIR64__(v76, v69);
  LODWORD(v119) = v78;
  v88 = sub_1C4C640F8(v87, 3, &v118);
  v89 = *(_QWORD *)(a2 + 24);
  v122 = 0u;
  v123 = 0u;
  v124 = 0;
  v90 = *(_QWORD *)(v89 + 32);
  v118 = (unsigned int *)&off_1E816EC08;
  v119 = (unsigned int *)v90;
  v121 = *(unsigned int ***)(v90 + 40);
  v120 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v90 + 16) + 104))(*(_QWORD *)(v90 + 16));
  if ((_QWORD)v122)
    llvm::MetadataTracking::untrack((uint64_t)&v122, (unsigned __int8 *)v122);
  v91 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)&v122 = 0;
  *((_QWORD *)&v122 + 1) = v91;
  v123 = (unint64_t)a2;
  if ((__int128 *)(a2 + 56) != &v122)
  {
    v92 = *(unsigned __int8 **)(a2 + 56);
    *(_QWORD *)&v122 = v92;
    if (v92)
      llvm::MetadataTracking::track((uint64_t)&v122, v92, 2);
  }
  LODWORD(v125) = v7;
  LODWORD(v126) = 1;
  v93 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v118, v88, &v125, 1, 0, 0, 0);
  v95 = v94;
  LODWORD(v113) = 1;
  v114 = 0;
  v115 = 0;
  llvm::MachineInstr::addOperand(v94, v93, (const llvm::MachineOperand *)&v113);
  if (v76 == 1)
  {
    if (v11 > 0x40)
      v96 = *(_QWORD *)v84;
    else
      v96 = v84 << -(char)v11 >> -(char)v11;
    LODWORD(v113) = 1;
  }
  else
  {
    sub_1C4A3CBB8((uint64_t)&v113, v112, a3);
    if (v117)
    {
      v97 = (const llvm::MachineOperand *)&v113;
    }
    else
    {
      v126 = 0;
      v127 = 0;
      LODWORD(v125) = 0;
      HIDWORD(v125) = v112;
      v128 = 0;
      v97 = (const llvm::MachineOperand *)&v125;
    }
    llvm::MachineInstr::addOperand(v95, v93, v97);
    v96 = 8;
    LODWORD(v113) = 1;
    if (!v106)
      v96 = 0;
  }
  v114 = 0;
  v115 = v96;
  llvm::MachineInstr::addOperand(v95, v93, (const llvm::MachineOperand *)&v113);
  sub_1C4A3CBB8((uint64_t)&v113, v111, a3);
  if (v117)
  {
    v98 = (const llvm::MachineOperand *)&v113;
  }
  else
  {
    v126 = 0;
    v127 = 0;
    LODWORD(v125) = 0;
    HIDWORD(v125) = v111;
    v128 = 0;
    v98 = (const llvm::MachineOperand *)&v125;
  }
  llvm::MachineInstr::addOperand(v95, v93, v98);
  v99 = 8;
  if (!v110)
    v99 = 0;
  LODWORD(v113) = 1;
  v114 = 0;
  v115 = v99 & 0xFFFFFFFFFFFFF8FFLL | ((unint64_t)(v108 & 7) << 8);
  llvm::MachineInstr::addOperand(v95, v93, (const llvm::MachineOperand *)&v113);
  sub_1C554AE8C(v95, *(_QWORD *)(v109 + 72), *(_QWORD **)(v109 + 80));
  v100 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v100 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v100 = a2;
      do
        v100 = *(_QWORD *)(v100 + 8);
      while ((*(_WORD *)(v100 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v100 + 8));
  v118 = (unsigned int *)&off_1E816EC08;
  if ((_QWORD)v122)
    llvm::MetadataTracking::untrack((uint64_t)&v122, (unsigned __int8 *)v122);
  result = 1;
  if (v107 && v11 >= 0x41 && v84)
  {
    MEMORY[0x1CAA32F9C](v84, 0x1000C8000313F17);
    return 1;
  }
  return result;
}

uint64_t sub_1C4A43FBC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  llvm::MachineInstr *v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  void (**v36)(uint64_t *);
  llvm::MachineInstr *v37;
  llvm::MachineFunction *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  llvm::MachineInstr *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  llvm::MachineFunction *v48;
  llvm::MachineInstr *v49;
  uint64_t v50[4];
  unsigned __int8 *v51[5];
  void *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  v8 = *(_QWORD *)(v7 + 40);
  v9 = *(unsigned int *)(v6 + 36);
  if ((v9 & 0x80000000) != 0)
    v10 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  else
    v10 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v9);
  v11 = *v10;
  if ((*(_BYTE *)(v11 + 3) & 1) == 0)
    v11 = *(_QWORD *)(v11 + 24);
  v12 = *(_QWORD *)(v11 + 8);
  if (**(_WORD **)(v12 + 16) != 282)
    goto LABEL_10;
  v13 = *(_DWORD *)(v6 + 68);
  v14 = *(_QWORD *)(v7 + 48);
  if (!v14)
  {
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 8) + 216))(*(_QWORD *)(v7 + 8), v7 + 128, v7);
    *(_QWORD *)(v7 + 48) = v14;
  }
  if (*(_BYTE *)(v14 + 560))
  {
LABEL_10:
    v15 = 0;
    LOBYTE(v16) = 0;
    v17 = 0;
    return v15 & 0x100000000 | v17 | v16;
  }
  v19 = sub_1C554C050(v13, v8);
  v20 = v19;
  if (v21)
    v22 = v19 >= 0x100;
  else
    v22 = 1;
  v23 = !v22;
  v52 = 0;
  LODWORD(v53) = v23 == 1;
  v24 = sub_1C4C640F8(67, 3, &v52);
  v25 = *(_QWORD *)(a2 + 24);
  v51[4] = 0;
  v26 = *(_QWORD *)(v25 + 32);
  v50[0] = (uint64_t)&off_1E816EC08;
  v50[1] = v26;
  v50[3] = *(_QWORD *)(v26 + 40);
  v50[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 16) + 104))(*(_QWORD *)(v26 + 16));
  v27 = *(unsigned __int8 **)(a2 + 24);
  v51[2] = (unsigned __int8 *)a2;
  v51[3] = 0;
  v51[0] = 0;
  v51[1] = v27;
  if ((unsigned __int8 **)(a2 + 56) != v51)
  {
    v28 = *(unsigned __int8 **)(a2 + 56);
    v51[0] = v28;
    if (v28)
      llvm::MetadataTracking::track((uint64_t)v51, v28, 2);
  }
  v52 = &off_1E7FB1568;
  LODWORD(v53) = 2;
  v48 = (llvm::MachineFunction *)sub_1C5548620(v50, v24, (uint64_t *)&v52, 1, 0, 0, 0);
  v49 = v29;
  LODWORD(v52) = 1;
  v53 = 0;
  v54 = 0;
  llvm::MachineInstr::addOperand(v29, v48, (const llvm::MachineOperand *)&v52);
  v30 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 48);
  LODWORD(v52) = 5;
  v53 = 0;
  LODWORD(v54) = v30;
  llvm::MachineInstr::addOperand(v49, v48, (const llvm::MachineOperand *)&v52);
  LODWORD(v52) = 1;
  v53 = 0;
  v54 = a3 << 8;
  llvm::MachineInstr::addOperand(v49, v48, (const llvm::MachineOperand *)&v52);
  sub_1C4A4490C((uint64_t)&v52, a1, *(_QWORD *)(a2 + 32) + 64);
  if (v55)
  {
    if ((_DWORD)v53)
    {
      v31 = v52;
      v32 = 32 * v53;
      while (1)
      {
        v33 = (_QWORD *)v31[3];
        if (!v33)
        {
          v59 = 0;
LABEL_60:
          sub_1C485C2F0();
        }
        if (v31 == v33)
        {
          v59 = &v56;
          (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)v31[3] + 24))(v31[3], &v56);
          v34 = (uint64_t)v59;
          if (!v59)
            goto LABEL_60;
        }
        else
        {
          v34 = (*(uint64_t (**)(_QWORD *))(*v33 + 16))(v33);
          v59 = (uint64_t *)v34;
          if (!v34)
            goto LABEL_60;
        }
        (*(void (**)(uint64_t, llvm::MachineFunction **))(*(_QWORD *)v34 + 48))(v34, &v48);
        v35 = v59;
        if (v59 == &v56)
          break;
        if (v59)
        {
          v36 = (void (**)(uint64_t *))(*v59 + 40);
LABEL_33:
          (*v36)(v35);
        }
        v31 += 4;
        v32 -= 32;
        if (!v32)
          goto LABEL_40;
      }
      v36 = (void (**)(uint64_t *))(v56 + 32);
      v35 = &v56;
      goto LABEL_33;
    }
  }
  else
  {
    v38 = v48;
    v37 = v49;
    if (v23)
    {
      LODWORD(v56) = 1;
      v57 = 0;
      v58 = v20;
    }
    else
    {
      v57 = 0;
      v58 = 0;
      LODWORD(v56) = 0;
      HIDWORD(v56) = v13;
      v59 = 0;
      llvm::MachineInstr::addOperand(v49, v48, (const llvm::MachineOperand *)&v56);
      v38 = v48;
      v37 = v49;
      LODWORD(v56) = 1;
      v57 = 0;
      v58 = 0;
    }
    llvm::MachineInstr::addOperand(v37, v38, (const llvm::MachineOperand *)&v56);
  }
LABEL_40:
  if (v55)
  {
    v39 = (char *)v52;
    if ((_DWORD)v53)
    {
      v40 = 32 * v53;
      while (1)
      {
        v41 = *(char **)&v39[v40 - 8];
        if (&v39[v40 - 32] == v41)
          break;
        if (v41)
        {
          v42 = 5;
          goto LABEL_47;
        }
LABEL_48:
        v40 -= 32;
        if (!v40)
        {
          v39 = (char *)v52;
          goto LABEL_50;
        }
      }
      v41 = &v39[v40 - 32];
      v42 = 4;
LABEL_47:
      (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
      goto LABEL_48;
    }
LABEL_50:
    if (v39 != (char *)&v54)
      free(v39);
  }
  v43 = v49;
  if (a3)
  {
    v44 = *((_QWORD *)v49 + 4);
    v45 = *(_DWORD *)(v44 + 176);
    v46 = (v45 >> 8) & 7;
    v22 = v46 >= a3;
    v47 = v46 - a3;
    if (!v22)
    {
      v15 = 0;
      LOBYTE(v16) = 0;
      v17 = 0;
      goto LABEL_57;
    }
    *(_QWORD *)(v44 + 176) = v45 & 0xFFFFF8FF | (v47 << 8);
  }
  sub_1C554AE8C(v43, *(_QWORD *)(a1 + 72), *(_QWORD **)(a1 + 80));
  v16 = *(_DWORD *)(*((_QWORD *)v49 + 4) + 4);
  v17 = v16 & 0xFFFFFF00;
  v15 = 0x100000000;
LABEL_57:
  v50[0] = (uint64_t)&off_1E816EC08;
  if (v51[0])
    llvm::MetadataTracking::untrack((uint64_t)v51, v51[0]);
  return v15 & 0x100000000 | v17 | v16;
}

uint64_t sub_1C4A44434(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  int v22;
  __int16 ***v23;
  unsigned int IncompleteVirtualRegister;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  llvm::MachineInstr *v29;
  llvm::MachineFunction *v30;
  llvm::MachineInstr *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v36;
  unint64_t v37;
  int v38[30];
  int v39[30];
  llvm::MachineFunction *v40;
  llvm::MachineInstr *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t (**v45)();
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49[7];

  v49[5] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
  v10 = (unsigned __int8 *)(v8 + 32);
  v11 = (unsigned __int8 *)(v8 + 64);
  v12 = *(unsigned int *)(v8 + 36);
  if ((v12 & 0x80000000) != 0)
    v13 = (uint64_t *)(v9[3] + 16 * (v12 & 0x7FFFFFFF) + 8);
  else
    v13 = (uint64_t *)(v9[34] + 8 * v12);
  v14 = *v13;
  if (v14)
  {
    if ((*(_BYTE *)(v14 + 3) & 1) != 0 || (v14 = *(_QWORD *)(v14 + 24)) != 0 && (*(_BYTE *)(v14 + 3) & 1) != 0)
    {
      v36 = *(_QWORD *)(v14 + 8);
      if (v36)
      {
        if (**(_WORD **)(v36 + 16) == 178)
          llvm::MachineOperand::setReg((uint64_t)v10, *(_DWORD *)(*(_QWORD *)(v36 + 32) + 36));
      }
    }
  }
  sub_1C4A3C18C((uint64_t)v39, (uint64_t)v9, a1[10], a1[11], v10, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)v38, (uint64_t)v9, a1[10], a1[11], v11, 0, 0, 0, 1u);
  v15 = 2 * (v39[22] == 16);
  if (v39[20] > 3)
    v15 = 9;
  v16 = 257;
  if (a3)
    v16 = 129;
  v37 = v16;
  if (a3)
    v17 = 2;
  else
    v17 = 0;
  if (v38[20] <= 3)
    v18 = 0;
  else
    v18 = 9;
  if (a4)
    v19 = 19;
  else
    v19 = 12;
  LODWORD(v45) = 12;
  HIDWORD(v45) = v19;
  v46 = __PAIR64__(v15, v17);
  LODWORD(v47) = v18;
  v20 = sub_1C4C640F8(42, 5, &v45);
  v22 = sub_1C4825F50(&v37);
  if ((_DWORD)v21 == 1)
  if (v22 <= 111)
  {
    if (v22 <= 47)
    {
      v23 = (__int16 ***)&off_1E7FB1B88;
      if (v22 != 1 && v22 != 16)
        v23 = &off_1E7FB1568;
    }
    else if (v22 > 79)
    {
      if (v22 == 80)
        v23 = (__int16 ***)&off_1E7FB1680;
      else
        v23 = (__int16 ***)&off_1E7FB16B8;
    }
    else if (v22 == 48)
    {
      v23 = (__int16 ***)&off_1E7FB1610;
    }
    else
    {
      v23 = (__int16 ***)&off_1E7FB1BC0;
    }
  }
  else if (v22 > 223)
  {
    if (v22 > 287)
    {
      if (v22 == 288)
        v23 = (__int16 ***)&off_1E7FB1878;
      else
        v23 = (__int16 ***)&off_1E7FB18B0;
    }
    else if (v22 == 224)
    {
      v23 = (__int16 ***)&off_1E7FB1808;
    }
    else
    {
      v23 = (__int16 ***)&off_1E7FB1840;
    }
  }
  else if (v22 > 159)
  {
    if (v22 == 160)
      v23 = (__int16 ***)&off_1E7FB1798;
    else
      v23 = (__int16 ***)&off_1E7FB17D0;
  }
  else if (v22 == 112)
  {
    v23 = (__int16 ***)&off_1E7FB1728;
  }
  else
  {
    v23 = (__int16 ***)&off_1E7FB1760;
  }
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v9, "", 0);
  *(_QWORD *)(v9[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v23;
  v25 = v9[1];
  if (v25)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 24))(v25, IncompleteVirtualRegister);
  v26 = *(_QWORD *)(a2 + 24);
  v49[4] = 0;
  v27 = *(_QWORD *)(v26 + 32);
  v45 = &off_1E816EC08;
  v46 = v27;
  v48 = *(_QWORD *)(v27 + 40);
  v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v27 + 16) + 104))(*(_QWORD *)(v27 + 16));
  v28 = *(unsigned __int8 **)(a2 + 24);
  v49[2] = (unsigned __int8 *)a2;
  v49[3] = 0;
  v49[0] = 0;
  v49[1] = v28;
  if ((unsigned __int8 **)(a2 + 56) != v49)
  {
    v49[0] = *(unsigned __int8 **)(a2 + 56);
    if (v49[0])
      llvm::MetadataTracking::track((uint64_t)v49, v49[0], 2);
  }
  LODWORD(v43) = IncompleteVirtualRegister;
  v44 = 1;
  v30 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v45, v20, &v43, 1, 0, 0, 0);
  v31 = v29;
  v32 = 128;
  LODWORD(v40) = 1;
  if (!a3)
    v32 = 0;
  v41 = 0;
  v42 = v32;
  llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v40);
  v40 = v30;
  v41 = v31;
  v33 = operator new(0x30uLL);
  *v33 = &off_1E7FABB68;
  v33[1] = sub_1C4A3D0C4;
  v33[2] = 0;
  v33[3] = a1;
  v33[4] = v9;
  *((_DWORD *)v33 + 10) = 0;
  *((_WORD *)v33 + 22) = 1;
  sub_1C4A45938(v39, (uint64_t)v33);
  (*(void (**)(_QWORD *))(*v33 + 40))(v33);
  v34 = operator new(0x30uLL);
  *v34 = &off_1E7FABB68;
  v34[1] = sub_1C4A3D0C4;
  v34[2] = 0;
  v34[3] = a1;
  v34[4] = v9;
  *((_DWORD *)v34 + 10) = 0;
  *((_WORD *)v34 + 22) = 1;
  sub_1C4A45938(v38, (uint64_t)v34);
  (*(void (**)(_QWORD *))(*v34 + 40))(v34);
  sub_1C48B7F84(&v40, (uint64_t)v39);
  sub_1C48B7F84(&v40, (uint64_t)v38);
  sub_1C554AE8C(v31, a1[9], (_QWORD *)a1[10]);
  v45 = &off_1E816EC08;
  if (v49[0])
    llvm::MetadataTracking::untrack((uint64_t)v49, v49[0]);
  return IncompleteVirtualRegister | 0x100000000;
}

void sub_1C4A4490C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  void *v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  char *v18;
  char *v19;
  void *v20;
  _BYTE *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t i;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  void **v40;
  _OWORD v41[2];
  _OWORD v42[5];
  int v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[64];
  void *v47;
  uint64_t v48;
  _QWORD v49[16];
  void *v50;
  uint64_t v51;
  _BYTE v52[24];
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[9];

  v56[8] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 32) + 40);
  sub_1C4A3C18C((uint64_t)v42, v5, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), (unsigned __int8 *)a3, 1, 0, 0, 1u);
  v54 = v56;
  v55 = 0x200000000;
  v41[0] = v42[0];
  v41[1] = v42[1];
  if ((sub_1C4A3D0C4(a2, v5, (unsigned __int8 *)v41, (uint64_t)&v54, v43 << 8, 0, 0) & 1) == 0)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 144) = 0;
    goto LABEL_58;
  }
  v47 = v49;
  v48 = 0x200000000;
  v6 = v55;
  if ((_DWORD)v55)
  {
    v7 = v49;
    v8 = v55;
    if (v55 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v55, 32);
      v8 = v55;
      if (!(_DWORD)v55)
        goto LABEL_5;
      v7 = v47;
    }
    memcpy(v7, v54, 32 * v8);
LABEL_5:
    LODWORD(v48) = v6;
  }
  v9 = (char *)operator new(0x58uLL);
  v10 = v9;
  *(_QWORD *)v9 = &off_1E7FABA90;
  v11 = v9 + 24;
  *((_QWORD *)v9 + 1) = v9 + 24;
  v12 = (void **)(v9 + 8);
  *((_QWORD *)v9 + 2) = 0x200000000;
  if (!(_DWORD)v6)
    goto LABEL_13;
  if (v47 != v49)
  {
    *((_QWORD *)v9 + 1) = v47;
    v38 = HIDWORD(v48);
    *((_DWORD *)v9 + 4) = v6;
    *((_DWORD *)v9 + 5) = v38;
    v47 = v49;
    HIDWORD(v48) = 0;
    goto LABEL_12;
  }
  if (v6 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v9 + 8), (uint64_t)v11, v6, 32);
    v14 = v48;
    if (!(_DWORD)v48)
      goto LABEL_11;
    v13 = v47;
    v11 = *v12;
  }
  else
  {
    v13 = v49;
    v14 = v6;
  }
  memcpy(v11, v13, 32 * v14);
LABEL_11:
  *((_DWORD *)v10 + 4) = v6;
LABEL_12:
  LODWORD(v48) = 0;
LABEL_13:
  v49[11] = v10;
  v44 = v46;
  v45 = 0x200000000;
  v15 = v55;
  if (!(_DWORD)v55)
    goto LABEL_17;
  v16 = v46;
  v17 = v55;
  if (v55 >= 3)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v55, 32);
    v17 = v55;
    if (!(_DWORD)v55)
      goto LABEL_16;
    v16 = v44;
  }
  memcpy(v16, v54, 32 * v17);
LABEL_16:
  LODWORD(v45) = v15;
LABEL_17:
  v18 = (char *)operator new(0x58uLL);
  v19 = v18;
  *(_QWORD *)v18 = &off_1E7FABAD8;
  v20 = v18 + 24;
  *((_QWORD *)v18 + 1) = v18 + 24;
  *((_QWORD *)v18 + 2) = 0x200000000;
  if (!(_DWORD)v15)
    goto LABEL_24;
  if (v44 != v46)
  {
    *((_QWORD *)v18 + 1) = v44;
    v39 = HIDWORD(v45);
    *((_DWORD *)v18 + 4) = v15;
    *((_DWORD *)v18 + 5) = v39;
    v44 = v46;
    HIDWORD(v45) = 0;
    goto LABEL_23;
  }
  if (v15 >= 3)
  {
    v40 = (void **)(v18 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v18 + 8), (uint64_t)v20, v15, 32);
    v22 = v45;
    if (!(_DWORD)v45)
      goto LABEL_22;
    v21 = v44;
    v20 = *v40;
  }
  else
  {
    v21 = v46;
    v22 = v15;
  }
  memcpy(v20, v21, 32 * v22);
LABEL_22:
  *((_DWORD *)v19 + 4) = v15;
LABEL_23:
  LODWORD(v45) = 0;
LABEL_24:
  v23 = 0;
  v24 = 0;
  v49[15] = v19;
  v50 = v52;
  v51 = 0x400000000;
  v25 = &v53;
  do
  {
    v26 = v23;
    v27 = &v49[4 * v24 + 8];
    v28 = (_QWORD *)v27[3];
    if (v28)
    {
      if (v28 == v27)
      {
        *v25 = (uint64_t)(v25 - 3);
        (*(void (**)(_QWORD *))(*v27 + 24))(v27);
      }
      else
      {
        *v25 = (*(uint64_t (**)(_QWORD))(*v28 + 16))(v27[3]);
      }
    }
    else
    {
      *v25 = 0;
    }
    v25 += 4;
    v23 = 1;
    v24 = 1;
  }
  while ((v26 & 1) == 0);
  v29 = v51;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  LODWORD(v51) = v29 + 2;
  if (v29 == -2)
  {
    *(_BYTE *)(a1 + 144) = 1;
LABEL_44:
    v31 = (char *)v50;
  }
  else
  {
    sub_1C48AAD34(a1, (uint64_t)&v50);
    v30 = v51;
    *(_BYTE *)(a1 + 144) = 1;
    v31 = (char *)v50;
    if ((_DWORD)v30)
    {
      v32 = 32 * v30;
      while (1)
      {
        v33 = *(char **)&v31[v32 - 8];
        if (&v31[v32 - 32] == v33)
          break;
        if (v33)
        {
          v34 = 5;
          goto LABEL_40;
        }
LABEL_41:
        v32 -= 32;
        if (!v32)
          goto LABEL_44;
      }
      v33 = &v31[v32 - 32];
      v34 = 4;
LABEL_40:
      (*(void (**)(void))(*(_QWORD *)v33 + 8 * v34))();
      goto LABEL_41;
    }
  }
  if (v31 != v52)
    free(v31);
  for (i = 0; i != -8; i -= 4)
  {
    v36 = (_QWORD *)v49[i + 15];
    if (&v49[i + 12] == v36)
    {
      v36 = &v49[i + 12];
      v37 = 4;
    }
    else
    {
      if (!v36)
        continue;
      v37 = 5;
    }
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  if (v44 != v46)
    free(v44);
  if (v47 != v49)
    free(v47);
LABEL_58:
  if (v54 != v56)
    free(v54);
}

uint64_t sub_1C4A44DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  llvm::MachineFunction *v40;
  llvm::MachineInstr *v41;
  llvm::MachineInstr *v42;
  __int16 v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t (**v56)();
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60[6];

  v60[5] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 64);
  if (!*(_BYTE *)(v8 + 303) && !*(_BYTE *)(v8 + 305))
    return 0;
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(unsigned int *)(v9 + 68);
  v11 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  if ((int)v10 >= 0)
    v11 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * v10);
  v12 = *v11;
  if ((*(_BYTE *)(v12 + 3) & 1) == 0)
    v12 = *(_QWORD *)(v12 + 24);
  v13 = *(_QWORD *)(v12 + 8);
  if (**(_WORD **)(v13 + 16) != 121)
    return 0;
  v14 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = *(unsigned __int8 **)(a2 + 32);
    while (1)
    {
      v17 = *v16;
      v16 += 32;
      if (v17 == 17)
        break;
      if (v14 == ++v15)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    LODWORD(v15) = -1;
  }
  v18 = v9 + 32 * v15;
  if (a4)
  {
    v9 = *(_QWORD *)(a4 + 32);
    v19 = 19;
    v20 = a4;
  }
  else
  {
    v19 = 12;
    v20 = a2;
  }
  v22 = *(_DWORD *)(v18 + 16);
  v23 = *(_DWORD *)(v9 + 4);
  if ((v23 & 0x80000000) == 0 || (v24 = v23 & 0x7FFFFFFF, v24 >= *(_DWORD *)(a3 + 432)))
  {
    v25 = 0;
    if (v22 == 2449)
      v26 = 32;
    else
      v26 = 33;
    LODWORD(v56) = v19;
LABEL_32:
    v29 = 86;
    goto LABEL_33;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v24);
  if (v22 == 2449)
    v26 = 32;
  else
    v26 = 33;
  LODWORD(v56) = v19;
  v50 = v25;
  if ((v25 & 0x8000000000000000) != 0)
  {
    v29 = 21;
    goto LABEL_33;
  }
  if ((v25 & 1) == 0)
    goto LABEL_32;
  v28 = sub_1C4825F50(&v50);
  if ((_DWORD)v27 == 1)
  if (v28 != 16)
  {
    if ((v50 & 1) != 0)
    {
      v47 = sub_1C4825F50(&v50);
      if ((_DWORD)v46 == 1)
      if (v47 == 32)
      {
        v29 = 0;
        goto LABEL_33;
      }
    }
    goto LABEL_32;
  }
  v29 = 2;
LABEL_33:
  HIDWORD(v56) = v29;
  v30 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 4);
  if ((v30 & 0x80000000) == 0)
    goto LABEL_37;
  v31 = v30 & 0x7FFFFFFF;
  if (v31 >= *(_DWORD *)(a3 + 432))
    goto LABEL_37;
  v32 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v31);
  v50 = v32;
  if ((v32 & 0x8000000000000000) != 0)
  {
    v33 = v25;
    v34 = 21;
  }
  else
  {
    if ((v32 & 1) == 0)
    {
LABEL_37:
      v33 = v25;
      v34 = 86;
      goto LABEL_38;
    }
    v45 = sub_1C4825F50(&v50);
    if ((_DWORD)v44 == 1)
    if (v45 == 16)
    {
      v33 = v25;
      v34 = 2;
    }
    else
    {
      if ((v50 & 1) == 0)
        goto LABEL_37;
      v49 = sub_1C4825F50(&v50);
      if ((_DWORD)v48 == 1)
      if (v49 != 32)
        goto LABEL_37;
      v33 = v25;
      v34 = 0;
    }
  }
LABEL_38:
  LODWORD(v57) = v34;
  v35 = sub_1C4C640F8(v26, 3, &v56);
  v36 = *(_QWORD *)(v20 + 24);
  v60[4] = 0;
  v37 = *(_QWORD *)(v36 + 32);
  v56 = &off_1E816EC08;
  v57 = v37;
  v59 = *(_QWORD *)(v37 + 40);
  v58 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v37 + 16) + 104))(*(_QWORD *)(v37 + 16));
  v38 = *(unsigned __int8 **)(v20 + 24);
  v60[2] = (unsigned __int8 *)v20;
  v60[3] = 0;
  v60[0] = 0;
  v60[1] = v38;
  if ((unsigned __int8 **)(v20 + 56) != v60)
  {
    v39 = *(unsigned __int8 **)(v20 + 56);
    v60[0] = v39;
    if (v39)
      llvm::MetadataTracking::track((uint64_t)v60, v39, 2);
  }
  v54 = v33;
  v55 = 0;
  v40 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v56, v35, &v54, 1, 0, 0, 0);
  v42 = v41;
  LODWORD(v50) = 1;
  v51 = 0;
  v52 = 0;
  llvm::MachineInstr::addOperand(v41, v40, (const llvm::MachineOperand *)&v50);
  v51 = 0;
  v52 = 0;
  LODWORD(v50) = 0;
  HIDWORD(v50) = v10;
  v53 = 0;
  llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
  LODWORD(v50) = 1;
  v51 = 0;
  v52 = 0;
  llvm::MachineInstr::addOperand(v42, v40, (const llvm::MachineOperand *)&v50);
  v43 = *((_WORD *)v42 + 22) & 0xC;
  *((_WORD *)v42 + 22) = v43 | *(_WORD *)(a2 + 44) & 0xFFF3;
  if (a4)
    *((_WORD *)v42 + 22) = *(_WORD *)(a4 + 44) & 0xFFF3 | v43;
  sub_1C554AE8C(v42, *(_QWORD *)(a1 + 72), *(_QWORD **)(a1 + 80));
  sub_1C48B0CD8((_QWORD *)a3, v20, *(_DWORD *)(*((_QWORD *)v42 + 4) + 4));
  v56 = &off_1E816EC08;
  if (v60[0])
    llvm::MetadataTracking::untrack((uint64_t)v60, v60[0]);
  return 1;
}

void sub_1C4A451F0(_BYTE *a1, char a2, uint64_t a3, int a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  BOOL v43;
  BOOL v44;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned __int16 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _OWORD *v54;
  unsigned __int8 *v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _DWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  int v69;
  __int16 ***v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t (**v75)();
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[16];
  void *v84;
  uint64_t v85;
  _QWORD v86[26];

  v86[24] = *MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_5;
  v4 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (a4 & 0x7FFFFFFF) + 8);
  if (a4 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * a4);
  if ((v5 = *v4) == 0
    || (*(_BYTE *)(v5 + 3) & 1) == 0 && ((v5 = *(_QWORD *)(v5 + 24)) == 0 || (*(_BYTE *)(v5 + 3) & 1) == 0)
    || (v8 = *(_QWORD *)(v5 + 8)) == 0
    || **(_WORD **)(v8 + 16) != 77)
  {
LABEL_5:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  v81 = v83;
  v82 = 0x400000000;
  v9 = *(_DWORD *)(v8 + 40) - 1;
  if (v9 >= 2)
  {
    v10 = 0;
    v11 = 1;
    while (1)
    {
      v12 = *(_QWORD *)(v8 + 32);
      v13 = *(unsigned int *)(v12 + 32 * v11 + 4);
      v14 = v13 & 0x7FFFFFFF;
      v15 = *(_QWORD *)(a3 + 24);
      v16 = (uint64_t *)(v15 + 16 * v14 + 8);
      v17 = *(_QWORD *)(a3 + 272);
      v18 = (uint64_t *)(v17 + 8 * v13);
      if ((int)v13 < 0)
        v18 = (uint64_t *)(v15 + 16 * (v13 & 0x7FFFFFFF) + 8);
      v19 = *v18;
      if (v19)
      {
        if ((*(_BYTE *)(v19 + 3) & 1) != 0)
          goto LABEL_78;
        v19 = *(_QWORD *)(v19 + 24);
        if (v19)
        {
          if ((*(_BYTE *)(v19 + 3) & 1) != 0)
          {
LABEL_78:
            v19 = *(_QWORD *)(v19 + 8);
            goto LABEL_17;
          }
          v19 = 0;
        }
      }
LABEL_17:
      if ((v13 & 0x80000000) == 0)
        goto LABEL_89;
      v20 = *(unsigned int *)(a3 + 432);
      if (v14 >= v20)
        goto LABEL_89;
      v21 = *(_QWORD *)(a3 + 424);
      if (*(_QWORD *)(v21 + 8 * v14) != 0x8000000000000081)
        goto LABEL_89;
      v22 = *(_DWORD *)(v12 + 32 * (v11 + 1) + 4);
      if ((v22 & 0x80000000) == 0)
        goto LABEL_89;
      v23 = v22 & 0x7FFFFFFF;
      if ((v22 & 0x7FFFFFFFu) >= v20 || *(_QWORD *)(v21 + 8 * v23) != 0x8000000000000081)
        goto LABEL_89;
      if (**(_WORD **)(v19 + 16) == 74)
      {
        if (*(_DWORD *)(v19 + 40) != 3)
          goto LABEL_89;
        v24 = *(_DWORD **)(v19 + 32);
        if (v24[1] != (_DWORD)v13 || v24[9] != v22)
          goto LABEL_89;
        v25 = v24[17];
      }
      else
      {
        v33 = *v16;
        if (!*v16)
          goto LABEL_89;
        if ((*(_BYTE *)(v33 + 3) & 1) == 0)
        {
          v33 = *(_QWORD *)(v33 + 24);
          if (!v33 || (*(_BYTE *)(v33 + 3) & 1) == 0)
            goto LABEL_89;
        }
        v34 = *(_QWORD *)(v33 + 8);
        if (!v34)
          goto LABEL_89;
        if (**(_WORD **)(v34 + 16) != 205)
          goto LABEL_89;
        if (*(_DWORD *)(v34 + 40) != 3)
          goto LABEL_89;
        v35 = *(_QWORD *)(v34 + 32);
        v25 = *(unsigned int *)(v35 + 36);
        v72 = sub_1C554C050(*(_DWORD *)(v35 + 68), a3);
        if (!v36)
          goto LABEL_89;
        v37 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16 * v23 + 8);
        if (!v37)
          goto LABEL_89;
        if ((*(_BYTE *)(v37 + 3) & 1) == 0)
        {
          v37 = *(_QWORD *)(v37 + 24);
          if (!v37 || (*(_BYTE *)(v37 + 3) & 1) == 0)
            goto LABEL_89;
        }
        v38 = *(_QWORD *)(v37 + 8);
        if (!v38 || **(_WORD **)(v38 + 16) != 205 || *(_DWORD *)(v38 + 40) != 3)
          goto LABEL_89;
        v39 = *(_QWORD *)(v38 + 32);
        v40 = *(unsigned int *)(v39 + 36);
        v41 = sub_1C554C050(*(_DWORD *)(v39 + 68), a3);
        v43 = v42 && v25 == v40;
        v44 = v43 && v72 == 0;
        if (!v44 || v41 != 1)
          goto LABEL_89;
        v15 = *(_QWORD *)(a3 + 24);
        v17 = *(_QWORD *)(a3 + 272);
      }
      v26 = (uint64_t *)(v15 + 16 * (v25 & 0x7FFFFFFF) + 8);
      v27 = (uint64_t *)(v17 + 8 * v25);
      if ((int)v25 >= 0)
        v26 = v27;
      v28 = *v26;
      if ((*(_BYTE *)(v28 + 3) & 1) == 0)
        v28 = *(_QWORD *)(v28 + 24);
      v29 = *(_QWORD *)(v28 + 8);
      if ((**(_WORD **)(v29 + 16) & 0xFFFE) != 0x74)
        goto LABEL_89;
      v30 = *(unsigned int *)(v29 + 40);
      if (!(_DWORD)v30)
        goto LABEL_89;
      v31 = *(_DWORD **)(v29 + 32);
      v32 = v31 + 4;
      while (*((_BYTE *)v32 - 16) != 17)
      {
        v32 += 8;
        if (!--v30)
          goto LABEL_89;
      }
      if (*v32 != 2844
        || (v46 = v31[20], (~v46 & 0x60) != 0)
        || (v47 = v46 & 3, v11 != 1) && (v43 = (_DWORD)v10 == (_DWORD)v47, v47 = v10, !v43))
      {
LABEL_89:
        *a1 = 0;
        a1[8] = 0;
        goto LABEL_124;
      }
      v48 = v31[25];
      v49 = v82;
      if (v82 >= (unint64_t)HIDWORD(v82))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, (uint64_t)v83, v82 + 1, 4);
        v49 = v82;
      }
      *((_DWORD *)v81 + v49) = v48;
      v50 = v82 + 1;
      LODWORD(v82) = v82 + 1;
      v11 += 2;
      v10 = v47;
      if (v11 >= v9)
      {
        v71 = (8 * v50) | 0x800004u;
        goto LABEL_80;
      }
    }
  }
  LODWORD(v47) = 0;
  v71 = 8388612;
LABEL_80:
  v80 = v71;
  v51 = *(_QWORD *)(v8 + 24);
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v52 = *(_QWORD *)(v51 + 32);
  v53 = *(_QWORD *)(v52 + 40);
  v75 = &off_1E816EC08;
  *(_QWORD *)&v76 = v52;
  v77 = v53;
  *((_QWORD *)&v76 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v52 + 16) + 104))(*(_QWORD *)(v52 + 16));
  v84 = 0;
  *((_QWORD *)&v78 + 1) = 0;
  *(_QWORD *)&v79 = 0;
  *(_QWORD *)&v78 = *(_QWORD *)(v8 + 24);
  *((_QWORD *)&v78 + 1) = v8;
  v54 = (_OWORD *)(v8 + 56);
  if (v54 != (__int128 *)((char *)&v77 + 8))
  {
    v55 = *(unsigned __int8 **)v54;
    *((_QWORD *)&v77 + 1) = v55;
    if (v55)
      llvm::MetadataTracking::track((uint64_t)&v77 + 8, v55, 2);
  }
  v73 = v71;
  v74 = 0;
  v56 = (int *)v81;
  v57 = v82;
  v84 = v86;
  v85 = 0x800000000;
  if (v82 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, (uint64_t)v86, v82, 24);
    v58 = v85;
    v59 = v84;
  }
  else
  {
    if (!(_DWORD)v82)
    {
      v64 = 0;
      v59 = v86;
      goto LABEL_91;
    }
    v58 = 0;
    v59 = v86;
  }
  v60 = 3 * v58;
  v61 = 4 * v57;
  do
  {
    v62 = *v56++;
    v63 = &v59[v60];
    *v63 = v62;
    v63[4] = 0;
    v60 += 3;
    v61 -= 4;
  }
  while (v61);
  v64 = v85;
LABEL_91:
  LODWORD(v85) = v64 + v57;
  ((void (*)(uint64_t (***)(), uint64_t, unint64_t *, uint64_t, _QWORD *))v75[4])(&v75, 77, &v73, 1, v59);
  v66 = v65;
  if (v84 != v86)
    free(v84);
  v67 = *(unsigned int *)(*(_QWORD *)(v66 + 32) + 4);
  v69 = sub_1C4825F50(&v80);
  if ((_DWORD)v68 == 1)
  if (v69 <= 111)
  {
    if (v69 <= 47)
    {
      v70 = (__int16 ***)&off_1E7FB1B88;
      if (v69 != 1 && v69 != 16)
        v70 = &off_1E7FB1568;
    }
    else if (v69 > 79)
    {
      if (v69 == 80)
        v70 = (__int16 ***)&off_1E7FB1680;
      else
        v70 = (__int16 ***)&off_1E7FB16B8;
    }
    else if (v69 == 48)
    {
      v70 = (__int16 ***)&off_1E7FB1610;
    }
    else
    {
      v70 = (__int16 ***)&off_1E7FB1BC0;
    }
  }
  else if (v69 > 223)
  {
    if (v69 > 287)
    {
      if (v69 == 288)
        v70 = (__int16 ***)&off_1E7FB1878;
      else
        v70 = (__int16 ***)&off_1E7FB18B0;
    }
    else if (v69 == 224)
    {
      v70 = (__int16 ***)&off_1E7FB1808;
    }
    else
    {
      v70 = (__int16 ***)&off_1E7FB1840;
    }
  }
  else if (v69 > 159)
  {
    if (v69 == 160)
      v70 = (__int16 ***)&off_1E7FB1798;
    else
      v70 = (__int16 ***)&off_1E7FB17D0;
  }
  else if (v69 == 112)
  {
    v70 = (__int16 ***)&off_1E7FB1728;
  }
  else
  {
    v70 = (__int16 ***)&off_1E7FB1760;
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16 * (v67 & 0x7FFFFFFF)) = v70;
  *(_QWORD *)a1 = v67 | ((unint64_t)(v47 + 1) << 32);
  a1[8] = 1;
  v75 = &off_1E816EC08;
  if (*((_QWORD *)&v77 + 1))
    llvm::MetadataTracking::untrack((uint64_t)&v77 + 8, *((unsigned __int8 **)&v77 + 1));
LABEL_124:
  if (v81 != v83)
    free(v81);
}

void sub_1C4A45938(int *a1, uint64_t a2)
{
  int *v2;
  int v3;
  BOOL v4;
  _OWORD *v5;
  int v6;
  __int128 v7;
  int v8;
  __int128 v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int RegSizeInBits;
  int v14;
  void *v15[2];
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v3 = a1[20];
  if (v3)
    v4 = v3 == 2;
  else
    v4 = 1;
  if (v4)
  {
    v15[0] = v16;
    v15[1] = (void *)0x200000000;
    if (a2)
    {
      v2 = a1;
      if (!(*(unsigned int (**)(uint64_t, int *, void **))(*(_QWORD *)a2 + 48))(a2, a1, v15))
        goto LABEL_11;
      v5 = v15[0];
      v6 = *((unsigned __int8 *)v2 + 32);
      v7 = *((_OWORD *)v15[0] + 1);
      *(_OWORD *)v2 = *(_OWORD *)v15[0];
      *((_OWORD *)v2 + 1) = v7;
      if (v6)
      {
LABEL_9:
        v8 = *((unsigned __int8 *)v2 + 72);
        v9 = v5[3];
        *(_OWORD *)(v2 + 10) = v5[2];
        *(_OWORD *)(v2 + 14) = v9;
        if (!v8)
          *((_BYTE *)v2 + 72) = 1;
LABEL_11:
        v2[20] = 1;
        v10 = *v2;
        if (*v2 != 7)
        {
          v11 = v2[1];
          if (v11 - 1 <= 0x3FFFFFFE)
          {
            v12 = *((_QWORD *)v2 + 13);
            RegSizeInBits = *(_DWORD *)(*(_QWORD *)(v12 + 264)
                                      + 24
                                      * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(*((_QWORD *)v2 + 14), v11, v12)+ 24)+ *(_DWORD *)(v12 + 272)* ((*(_QWORD *)(v12 + 248) - *(_QWORD *)(v12 + 240)) >> 3)));
          }
          else
          {
            RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(*((_QWORD *)v2 + 13), v11, *((_QWORD *)v2 + 12));
          }
          goto LABEL_14;
        }
        if (v2[4] == 64)
          v2[20] = 2;
        v14 = (v10 >> 8) & 0xFFF;
        if (v14 == 2)
          goto LABEL_20;
        RegSizeInBits = 0;
        if (v14 <= 2)
        {
          if (v14 != 1)
            goto LABEL_14;
          goto LABEL_23;
        }
        switch(v14)
        {
          case 3:
            RegSizeInBits = 64;
            break;
          case 15:
LABEL_20:
            RegSizeInBits = 32;
            break;
          case 14:
LABEL_23:
            RegSizeInBits = 16;
            break;
        }
LABEL_14:
        v2[22] = RegSizeInBits;
        if (v15[0] != v16)
          free(v15[0]);
        return;
      }
    }
    else
    {
      sub_1C485C2F0();
    }
    *((_BYTE *)v2 + 32) = 1;
    goto LABEL_9;
  }
}

void sub_1C4A45B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1C4A45B64()
{
  unsigned int **v0;

  return **v0;
}

void sub_1C4A45F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;

  *(_DWORD *)(a1 + 144) = 0;
  if (*(_DWORD *)(a1 + 148))
  {
    v4 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 136, a1 + 152, 1uLL, 8);
    v4 = *(unsigned int *)(a1 + 144);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v4) = a2;
  ++*(_DWORD *)(a1 + 144);
  v5 = (char *)&loc_1C4A4607C
     + 4 * word_1C66165C2[*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1)];
  __asm { BR              X9 }
}

__int16 ***sub_1C4A47FB0(unint64_t *a1, const char *a2)
{
  unint64_t v3;
  const char *v5;
  int v6;
  _UNKNOWN **v7;
  _UNKNOWN **v8;
  BOOL v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  _UNKNOWN ***v20;
  _UNKNOWN ***v21;
  __int16 ***v22;
  _UNKNOWN **v23;
  _UNKNOWN ***v24;
  __int16 ***v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *a1;
  if ((*a1 & 0xFFFFFFFFFFFFFFF9) == 0 || (*a1 & 4) == 0)
    goto LABEL_6;
  v10 = 3;
  if ((v3 & 1) == 0)
    v10 = 19;
  v11 = v3 >> v10;
  v12 = v3 & 0x8000000000000000 | (8 * v11) | 1;
  v13 = 0x8000000000000;
  v14 = (v3 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v11) | 2;
  if ((v3 & 2) != 0)
    v13 = 0x800000000000000;
  else
    v14 = v12;
  v29 = v14;
  if ((v13 & v3) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
    v3 = *a1;
  }
  v15 = (unsigned __int16)(v3 >> 3);
  v16 = sub_1C4825F50((unint64_t *)&v29);
  if ((_DWORD)v17 == 1)
  {
    v27 = v16;
    v16 = v27;
  }
  if (v16 == 8)
  {
    v29 = 129;
    v15 >>= 1;
  }
  v18 = sub_1C4825F50((unint64_t *)&v29);
  if ((_DWORD)v19 == 1)
  {
    v28 = v18;
    v18 = v28;
  }
  switch(v15)
  {
    case 4u:
      v20 = &off_1E7FB1760;
      v21 = &off_1E7FB1648;
LABEL_55:
      if (v18 == 16)
        return (__int16 ***)v21;
      else
        return (__int16 ***)v20;
    case 3u:
      v20 = &off_1E7FB16B8;
      v21 = &off_1E7FB1610;
      goto LABEL_55;
    case 2u:
      v20 = &off_1E7FB1BC0;
      v21 = &off_1E7FB15D8;
      goto LABEL_55;
  }
LABEL_6:
  v6 = sub_1C4825F50(a1);
  if ((_DWORD)v5 == 1)
  if (v6 <= 111)
  {
    v22 = (__int16 ***)&off_1E7FB1B88;
    v23 = &off_1E7FB1680;
    if (v6 != 80)
      v23 = (_UNKNOWN **)&off_1E7FB16B8;
    v24 = &off_1E7FB1610;
    if (v6 != 48)
      v24 = &off_1E7FB1BC0;
    if (v6 <= 79)
      v23 = (_UNKNOWN **)v24;
    v25 = &off_1E7FB1568;
    if (v6 == 16)
      v25 = (__int16 ***)&off_1E7FB1B88;
    if (v6 != 1)
      v22 = v25;
    if (v6 <= 47)
      return v22;
    else
      return (__int16 ***)v23;
  }
  else
  {
    if (v6 > 223)
    {
      v7 = &off_1E7FB1878;
      if (v6 != 288)
        v7 = &off_1E7FB18B0;
      v8 = &off_1E7FB1808;
      if (v6 != 224)
        v8 = &off_1E7FB1840;
      v9 = v6 <= 287;
    }
    else
    {
      v7 = &off_1E7FB1798;
      if (v6 != 160)
        v7 = &off_1E7FB17D0;
      v8 = &off_1E7FB1728;
      if (v6 != 112)
        v8 = (_UNKNOWN **)&off_1E7FB1760;
      v9 = v6 <= 159;
    }
    if (v9)
      return (__int16 ***)v8;
    else
      return (__int16 ***)v7;
  }
}

uint64_t sub_1C4A48224(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8, unsigned __int8 a9, int a10, int a11, int a12, unsigned __int8 a13)
{
  llvm::MachineInstr *v20;
  llvm::MachineInstr *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  _QWORD *v25;
  void (**v26)(_QWORD *);
  uint64_t v27;
  _QWORD *v28;
  void (**v29)(_QWORD *);
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  void (**v33)(void);
  _QWORD *v34;
  uint64_t v35;
  void (**v36)(void);
  _QWORD *v37;
  void (**v38)(void);
  void (**v39)(void);
  uint64_t v40;
  llvm::MachineFunction *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  llvm::MachineInstr *v44;
  unint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void (**v53)(void);
  void (**v54)(void);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::MachineInstr *v64;
  unsigned int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  int v90[30];
  int v91[30];
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  _QWORD v97[3];
  _QWORD *v98;
  _QWORD v99[3];
  _QWORD *v100;
  _QWORD v101[3];
  _QWORD *v102;
  _QWORD v103[3];
  _QWORD *v104;
  _QWORD v105[3];
  _QWORD *v106;
  _QWORD v107[3];
  _QWORD *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v63 = *(_QWORD *)(a3 + 24);
  sub_1C4A3C18C((uint64_t)v91, a2, a1[10], a1[11], a5, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)v90, a2, a1[10], a1[11], a6, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)&v82, a2, a1[10], a1[11], a7, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)&v74, a2, a1[10], a1[11], a8, 0, 0, 0, 1u);
  v20 = 0;
  if (*a7 && (int)v87 <= 3)
  {
    v20 = sub_1C4A3EBBC((uint64_t)a1, a3, 129, *((_QWORD *)a7 + 2), *a7 == 3);
    sub_1C4A3C18C((uint64_t)&v66, a2, a1[10], a1[11], *((unsigned __int8 **)v20 + 4), 0, 0, 0, 1u);
    v86 = v70;
    v87 = v71;
    v88 = v72;
    v89 = v73;
    v82 = v66;
    v83 = v67;
    v84 = v68;
    v85 = v69;
  }
  v21 = 0;
  if (*a8 && (int)v79 <= 3)
  {
    v21 = sub_1C4A3EBBC((uint64_t)a1, a3, 129, *((_QWORD *)a8 + 2), *a8 == 3);
    sub_1C4A3C18C((uint64_t)&v66, a2, a1[10], a1[11], *((unsigned __int8 **)v21 + 4), 0, 0, 0, 1u);
    v79 = v71;
    v80 = v72;
    v74 = v66;
    v75 = v67;
    v76 = v68;
    v81 = v73;
    v77 = v69;
    v78 = v70;
  }
  v64 = v21;
  v22 = (char *)operator new(0x30uLL);
  *(_QWORD *)v22 = &off_1E7FABB68;
  *((_QWORD *)v22 + 1) = sub_1C4A3D0C4;
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = a1;
  *((_QWORD *)v22 + 4) = a2;
  *((_DWORD *)v22 + 10) = 0;
  *((_WORD *)v22 + 22) = 1;
  v108 = v22;
  v23 = operator new(0x28uLL);
  *v23 = &off_1E7FABB20;
  v23[1] = sub_1C4A3FE10;
  v23[2] = 0;
  v23[3] = a1;
  v23[4] = a2;
  v106 = v23;
  v24 = (char *)operator new(0x30uLL);
  *(_QWORD *)v24 = &off_1E7FABB68;
  *(_OWORD *)(v24 + 8) = *(_OWORD *)(v22 + 8);
  *(_OWORD *)(v24 + 24) = *(_OWORD *)(v22 + 24);
  *((_QWORD *)v24 + 5) = *((_QWORD *)v22 + 5);
  v104 = v24;
  sub_1C4A45938(v91, (uint64_t)v24);
  v25 = v104;
  if (v104 == v103)
  {
    v26 = (void (**)(_QWORD *))(v103[0] + 32);
    v25 = v103;
  }
  else
  {
    if (!v104)
      goto LABEL_12;
    v26 = (void (**)(_QWORD *))(*v104 + 40);
  }
  (*v26)(v25);
LABEL_12:
  v65 = a4;
  if (v108)
  {
    if (v108 == v107)
    {
      v102 = v101;
      (*(void (**)(_QWORD *, _QWORD *))(v107[0] + 24))(v107, v101);
      v27 = (uint64_t)v102;
    }
    else
    {
      v27 = (*(uint64_t (**)(_QWORD *))(*v108 + 16))(v108);
      v102 = (_QWORD *)v27;
    }
  }
  else
  {
    v27 = 0;
    v102 = 0;
  }
  sub_1C4A45938(v90, v27);
  v28 = v102;
  if (v102 == v101)
  {
    v29 = (void (**)(_QWORD *))(v101[0] + 32);
    v28 = v101;
  }
  else
  {
    if (!v102)
      goto LABEL_22;
    v29 = (void (**)(_QWORD *))(*v102 + 40);
  }
  (*v29)(v28);
LABEL_22:
  if (a13)
    v30 = v105;
  else
    v30 = v107;
  v31 = (_QWORD *)v30[3];
  if (v31)
  {
    if (v31 == v30)
    {
      v100 = v99;
      (*(void (**)(_QWORD *, _QWORD *))(*v30 + 24))(v30, v99);
      v32 = (uint64_t)v100;
    }
    else
    {
      v32 = (*(uint64_t (**)(_QWORD *))(*v31 + 16))(v31);
      v100 = (_QWORD *)v32;
    }
  }
  else
  {
    v32 = 0;
    v100 = 0;
  }
  sub_1C4A45938((int *)&v82, v32);
  if (v100 == v99)
  {
    v33 = (void (**)(void))(v99[0] + 32);
  }
  else
  {
    if (!v100)
      goto LABEL_35;
    v33 = (void (**)(void))(*v100 + 40);
  }
  (*v33)();
LABEL_35:
  v34 = (_QWORD *)v30[3];
  if (v34)
  {
    if (v34 == v30)
    {
      v98 = v97;
      (*(void (**)(_QWORD *, _QWORD *))(*v30 + 24))(v30, v97);
      v35 = (uint64_t)v98;
    }
    else
    {
      v35 = (*(uint64_t (**)(_QWORD *))(*v34 + 16))(v34);
      v98 = (_QWORD *)v35;
    }
  }
  else
  {
    v35 = 0;
    v98 = 0;
  }
  sub_1C4A45938((int *)&v74, v35);
  if (v98 == v97)
  {
    v36 = (void (**)(void))(v97[0] + 32);
    goto LABEL_44;
  }
  if (v98)
  {
    v36 = (void (**)(void))(*v98 + 40);
LABEL_44:
    (*v36)();
  }
  v37 = operator new(0x30uLL);
  *v37 = &off_1E7FABB68;
  v37[1] = sub_1C4A3D0C4;
  v37[2] = 0;
  v37[3] = a1;
  v37[4] = a2;
  *((_DWORD *)v37 + 10) = 0;
  *((_WORD *)v37 + 22) = 256;
  if ((BYTE8(v86) && (BYTE8(v85) & 7) != 0 || (_DWORD)v87 == 5) && (int)v79 >= 4 && (_DWORD)v79 != 5)
  {
    sub_1C4A3C18C((uint64_t)&v66, a2, a1[10], a1[11], a8, 0, 0, 0, 0);
    v79 = v71;
    v80 = v72;
    v74 = v66;
    v75 = v67;
    v76 = v68;
    v81 = v73;
    v77 = v69;
    v78 = v70;
    v96 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v37 + 16))(v37);
    sub_1C4A45938((int *)&v74, (uint64_t)v96);
    if (v96 == &v95)
    {
      v38 = (void (**)(void))(v95 + 32);
      goto LABEL_54;
    }
    if (v96)
    {
      v38 = (void (**)(void))(*v96 + 40);
LABEL_54:
      (*v38)();
    }
  }
  if ((BYTE8(v78) && (BYTE8(v77) & 7) != 0 || (_DWORD)v79 == 5) && (int)v87 >= 4 && (_DWORD)v87 != 5)
  {
    sub_1C4A3C18C((uint64_t)&v66, a2, a1[10], a1[11], a7, 0, 0, 0, 0);
    v86 = v70;
    v87 = v71;
    v88 = v72;
    v89 = v73;
    v82 = v66;
    v83 = v67;
    v84 = v68;
    v85 = v69;
    v94 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v37 + 16))(v37);
    sub_1C4A45938((int *)&v82, (uint64_t)v94);
    if (v94 == &v93)
    {
      v39 = (void (**)(void))(v93 + 32);
    }
    else
    {
      if (!v94)
        goto LABEL_65;
      v39 = (void (**)(void))(*v94 + 40);
    }
    (*v39)();
  }
LABEL_65:
  v40 = *(_QWORD *)(a1[9] + 8)
      + 48 * sub_1C4A4CBD8(0, a9, a13, v91[20], v91[22], v90[20], v90[22], (uint64_t)&v82, (uint64_t)&v74);
  if ((*(_WORD *)(a3 + 44) & 4) != 0)
  {
    v41 = *(llvm::MachineFunction **)(v63 + 32);
    v46 = *(unsigned __int8 **)(a3 + 56);
    v92 = v46;
    v43 = v65;
    v44 = v20;
    if (v46)
      llvm::MetadataTracking::track((uint64_t)&v92, v46, 2);
    v45 = *((_QWORD *)v41 + 28);
    if (v45)
      *((_QWORD *)v41 + 28) = *(_QWORD *)v45;
    else
      v45 = sub_1C484358C((uint64_t)v41 + 128, 72, 3);
    *(_QWORD *)&v66 = v92;
    if (v92)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v92, v92, (uint64_t)&v66);
      v92 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v45, v41, v40, (unsigned __int8 **)&v66, 0);
    if ((_QWORD)v66)
      llvm::MetadataTracking::untrack((uint64_t)&v66, (unsigned __int8 *)v66);
    if (v92)
      llvm::MetadataTracking::untrack((uint64_t)&v92, v92);
    if (v63 + 48 != a3 && (*(_WORD *)(a3 + 44) & 4) != 0)
      *(_WORD *)(v45 + 44) |= 0xCu;
    sub_1C512CA10((uint64_t *)(v63 + 40), (uint64_t *)a3, v45);
  }
  else
  {
    v41 = *(llvm::MachineFunction **)(v63 + 32);
    v42 = *(unsigned __int8 **)(a3 + 56);
    v92 = v42;
    v43 = v65;
    v44 = v20;
    if (v42)
      llvm::MetadataTracking::track((uint64_t)&v92, v42, 2);
    v45 = *((_QWORD *)v41 + 28);
    if (v45)
      *((_QWORD *)v41 + 28) = *(_QWORD *)v45;
    else
      v45 = sub_1C484358C((uint64_t)v41 + 128, 72, 3);
    *(_QWORD *)&v66 = v92;
    if (v92)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v92, v92, (uint64_t)&v66);
      v92 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v45, v41, v40, (unsigned __int8 **)&v66, 0);
    if ((_QWORD)v66)
      llvm::MetadataTracking::untrack((uint64_t)&v66, (unsigned __int8 *)v66);
    if (v92)
      llvm::MetadataTracking::untrack((uint64_t)&v92, v92);
    v47 = *(_QWORD *)(v63 + 40);
    *(_QWORD *)(v45 + 24) = v47;
    v48 = *(_QWORD *)(v47 + 32);
    v49 = *(unsigned int *)(v45 + 40);
    if ((_DWORD)v49)
    {
      v56 = *(_QWORD *)(v45 + 32);
      v57 = *(_QWORD *)(v48 + 40);
      v58 = 32 * v49;
      do
      {
        if (!*(_BYTE *)v56)
        {
          v59 = *(unsigned int *)(v56 + 4);
          if ((int)v59 >= 0)
            v60 = (uint64_t *)(*(_QWORD *)(v57 + 272) + 8 * v59);
          else
            v60 = (uint64_t *)(*(_QWORD *)(v57 + 24) + 16 * (v59 & 0x7FFFFFFF) + 8);
          v61 = *v60;
          if (*v60)
          {
            v62 = *(_QWORD *)(v61 + 16);
            *(_QWORD *)(v61 + 16) = v56;
            *(_QWORD *)(v56 + 16) = v62;
            if ((*(_BYTE *)(v56 + 3) & 1) != 0)
            {
              *(_QWORD *)(v56 + 24) = v61;
            }
            else
            {
              *(_QWORD *)(v56 + 24) = 0;
              v60 = (uint64_t *)(v62 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v56 + 16) = v56;
            *(_QWORD *)(v56 + 24) = 0;
          }
          *v60 = v56;
        }
        v56 += 32;
        v58 -= 32;
      }
      while (v58);
    }
    v50 = *(_QWORD *)(v48 + 728);
    if (v50)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v50 + 24))(v50, v45);
    v51 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v45 = v51 | *(_QWORD *)v45 & 7;
    *(_QWORD *)(v45 + 8) = a3;
    *(_QWORD *)(v51 + 8) = v45;
    *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | v45;
  }
  *((_QWORD *)&v66 + 1) = 0;
  v67 = 0uLL;
  LODWORD(v66) = 0x1000000;
  DWORD1(v66) = a11;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v41, (const llvm::MachineOperand *)&v66);
  v52 = 1;
  LODWORD(v66) = 1;
  *((_QWORD *)&v66 + 1) = 0;
  *(_QWORD *)&v67 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v41, (const llvm::MachineOperand *)&v66);
  LODWORD(v66) = 1;
  *((_QWORD *)&v66 + 1) = 0;
  *(_QWORD *)&v67 = v43;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v45, v41, (const llvm::MachineOperand *)&v66);
  *(_QWORD *)&v66 = v41;
  *((_QWORD *)&v66 + 1) = v45;
  sub_1C48B7F84((llvm::MachineFunction **)&v66, (uint64_t)v91);
  sub_1C48B7F84((llvm::MachineFunction **)&v66, (uint64_t)v90);
  sub_1C48B7F84((llvm::MachineFunction **)&v66, (uint64_t)&v82);
  sub_1C48B7F84((llvm::MachineFunction **)&v66, (uint64_t)&v74);
  sub_1C554AE8C((_QWORD *)v45, a1[9], (_QWORD *)a1[10]);
  if (v44)
    v52 = (*(uint64_t (**)(uint64_t *, llvm::MachineInstr *))(*a1 + 16))(a1, v44);
  if (v64)
    v52 = v52 & (*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1);
  (*(void (**)(_QWORD *))(*v37 + 40))(v37);
  if (v106 == v105)
  {
    v53 = (void (**)(void))(v105[0] + 32);
  }
  else
  {
    if (!v106)
      goto LABEL_105;
    v53 = (void (**)(void))(*v106 + 40);
  }
  (*v53)();
LABEL_105:
  if (v108 == v107)
  {
    v54 = (void (**)(void))(v107[0] + 32);
    goto LABEL_109;
  }
  if (v108)
  {
    v54 = (void (**)(void))(*v108 + 40);
LABEL_109:
    (*v54)();
  }
  return v52;
}

uint64_t sub_1C4A48D04(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  const llvm::MachineOperand *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  llvm::MachineOperand *v19;
  int *v20;
  BOOL v21;
  _BOOL4 v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  int v32;
  char v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::MachineOperand *v44;
  llvm::MachineOperand *v45;
  llvm::MachineOperand *v46;
  int v47;
  int isIdenticalTo;
  int v49;
  int *v50;
  int *v51;
  int v52;
  int v53;
  char v54;
  uint64_t v55;
  int v56;
  int v57;
  char v58;
  uint64_t v59;
  char v60;
  int v61;
  int v62;
  char v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  int v77;
  uint64_t v78;
  uint64_t (**v79)();
  int v80;
  const char *v81;
  __int16 ***v82;
  int IncompleteVirtualRegister;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _BOOL4 v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  void (**v92)(void);
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  uint64_t v95;
  void (**v96)(void);
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  int v100;
  void (**v101)(void);
  char v102;
  BOOL v103;
  int v104;
  BOOL v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  llvm::MachineFunction *v120;
  llvm::MachineFunction *v121;
  llvm::MachineFunction *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  unsigned __int8 *v136;
  void (**v137)(void);
  void (**v138)(void);
  unsigned int v139;
  int v140;
  uint64_t v141;
  llvm::MachineOperand *v142;
  uint64_t v143;
  int v144;
  const llvm::MachineOperand *v145;
  int v146;
  llvm::MachineFunction *v147[2];
  uint64_t (**v148)();
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  int v153[20];
  int v154;
  int v155;
  char v156;
  int v157[20];
  int v158;
  int v159;
  char v160;
  int v161[20];
  int v162;
  int v163;
  char v164;
  _DWORD v165[2];
  llvm::MachineOperand *v166;
  llvm::MachineOperand *v167;
  unsigned int v168;
  unsigned int v169;
  BOOL v170;
  void *v171[2];
  _DWORD v172[6];
  _QWORD v173[3];
  _QWORD *v174;
  _QWORD v175[3];
  _QWORD *v176;
  _QWORD v177[3];
  _QWORD *v178;
  unsigned __int8 v179[24];
  unsigned __int8 *v180;
  _QWORD v181[3];
  _QWORD *v182;
  _DWORD v183[8];
  unsigned __int8 *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  v4 = a1[8];
  if (!*(_BYTE *)(v4 + 304) || !*(_BYTE *)(v4 + 399))
  {
LABEL_98:
    v74 = 0;
    LOBYTE(v73) = 0;
    v72 = 0;
    return v74 & 0x100000000 | v72 | v73;
  }
  v170 = 0;
  v169 = 0;
  v168 = 0;
  v167 = 0;
  v166 = 0;
  *(_DWORD *)((char *)v165 + 3) = 0;
  v165[0] = 0;
  if (**(_WORD **)(a3 + 16) == 51)
  {
    v9 = *(_QWORD *)(a3 + 32);
    v10 = (const llvm::MachineOperand *)(v9 + 64);
    v11 = v9 + 96;
    v179[0] = 0;
    v161[0] = 0;
    v157[0] = 0;
    v12 = sub_1C4A4D990(a2, v9 + 64, (BOOL *)v179, &v169, &v167, &v166, v161, v157);
    if ((v12 & 1) != 0)
    {
      v145 = (const llvm::MachineOperand *)v11;
      v11 = (uint64_t)v10;
      goto LABEL_7;
    }
    v145 = v10;
    if ((sub_1C4A4D990(a2, v11, (BOOL *)v179, &v169, &v167, &v166, v161, v157) & 1) != 0)
    {
LABEL_7:
      LOBYTE(v147[0]) = 0;
      v13 = *(_QWORD *)(a3 + 32);
      if (sub_1C4A4DB84(*(_DWORD *)(v13 + 48), v12 ^ 1, &v170, (char *)v147, &v168))
      {
        v14 = v179[0];
        if (v179[0] == v170)
        {
          v15 = v13 + 128;
          v16 = v13 + 160;
          v153[0] = 0;
          LODWORD(v148) = 0;
          v17 = LOBYTE(v147[0]);
          v18 = (int *)(LOBYTE(v147[0]) ? v13 + 160 : v13 + 128);
          v19 = v167;
          v142 = v166;
          if (sub_1C4A4DCE8(a2, v18, v167, v166, v145, v11, v153))
          {
            v20 = (int *)(v17 ? v15 : v16);
            if (sub_1C4A4DCE8(a2, v20, v19, v142, v145, v11, (int *)&v148))
            {
              v21 = v161[0] == 1 && v157[0] == 2;
              v22 = !v21;
              if (v21 || v161[0] == 2 && v157[0] == 1)
              {
                v23 = 0;
                v24 = 0;
                LOWORD(v171[0]) = 256;
                v25 = (int)v148;
                v26 = v153[0];
                do
                {
                  v27 = 0;
                  v28 = 0;
                  v29 = v23;
                  v30 = *((_BYTE *)v171 + v24);
                  LOWORD(v184) = 256;
                  v31 = v22 ^ (v30 != 0);
                  if (v31)
                    v32 = 1;
                  else
                    v32 = 2;
                  v33 = 4 * v30;
                  do
                  {
                    v34 = 0;
                    v35 = v27;
                    v36 = *((_BYTE *)&v184 + v28);
                    LOWORD(v181[0]) = 256;
                    do
                    {
                      if (v31)
                        v37 = v36;
                      else
                        v37 = *((_BYTE *)v181 + v34);
                      if (v37)
                        v38 = v26;
                      else
                        v38 = v25;
                      if (!v38)
                        v38 = v32;
                      v183[(v33 | (2 * v36) | *((_BYTE *)v181 + v34++))] = v38;
                    }
                    while (v34 != 2);
                    v27 = 1;
                    v28 = 1;
                  }
                  while ((v35 & 1) == 0);
                  v23 = 1;
                  v24 = 1;
                }
                while ((v29 & 1) == 0);
                goto LABEL_80;
              }
            }
          }
        }
      }
    }
  }
  if (**(_WORD **)(a3 + 16) != 51)
    goto LABEL_102;
  v144 = a4;
  v39 = *(_QWORD *)(a3 + 32);
  v40 = v39 + 128;
  v41 = v39 + 160;
  v179[0] = 0;
  v161[0] = 0;
  v157[0] = 0;
  v42 = v39 + 128;
  if ((sub_1C4A4D990(a2, v39 + 128, (BOOL *)v179, &v169, &v167, &v166, v161, v157) & 1) == 0)
  {
    v42 = v41;
    if (!sub_1C4A4D990(a2, v41, (BOOL *)v179, &v169, &v167, &v166, v161, v157))
      goto LABEL_102;
  }
  v43 = *(_QWORD *)(a3 + 32);
  v44 = (llvm::MachineOperand *)(v43 + 64);
  v45 = (llvm::MachineOperand *)(v43 + 96);
  v19 = v167;
  if ((llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(v43 + 64), v167) & 1) != 0
    || (v46 = v166, (llvm::MachineOperand::isIdenticalTo(v44, v166) & 1) != 0))
  {
    v47 = 0;
    v145 = v45;
    goto LABEL_50;
  }
  if ((llvm::MachineOperand::isIdenticalTo(v45, v19) & 1) == 0
    && !llvm::MachineOperand::isIdenticalTo(v45, v46))
  {
LABEL_102:
    v72 = 0;
    LOBYTE(v73) = 0;
    v74 = 0;
    return v74 & 0x100000000 | v72 | v73;
  }
  v47 = 1;
  v145 = v44;
  v44 = v45;
LABEL_50:
  isIdenticalTo = llvm::MachineOperand::isIdenticalTo(v44, v19);
  LOBYTE(v147[0]) = 0;
  if (!sub_1C4A4DB84(*(_DWORD *)(*(_QWORD *)(a3 + 32) + 48), v47, &v170, (char *)v147, &v168))
    goto LABEL_102;
  v14 = v179[0];
  if (v179[0] != v170)
    goto LABEL_102;
  v153[0] = 0;
  LODWORD(v148) = 0;
  v49 = LOBYTE(v147[0]);
  v50 = (int *)(LOBYTE(v147[0]) ? v41 : v40);
  v142 = v166;
  if (!sub_1C4A4DCE8(a2, v50, v19, v166, v145, v42, v153))
    goto LABEL_102;
  v51 = (int *)(v49 ? v40 : v41);
  if (!sub_1C4A4DCE8(a2, v51, v19, v142, v145, v42, (int *)&v148))
    goto LABEL_102;
  v52 = v153[0];
  v53 = (int)v148;
  if (v153[0])
  {
    if ((_DWORD)v148)
      goto LABEL_102;
  }
  v54 = 0;
  v55 = 0;
  LOWORD(v171[0]) = 256;
  v56 = v157[0];
  v57 = v161[0];
  do
  {
    v58 = 0;
    v59 = 0;
    v60 = v54;
    v61 = *((unsigned __int8 *)v171 + v55);
    LOWORD(v184) = 256;
    if (v61)
      v62 = v57;
    else
      v62 = v56;
    v63 = 4 * v61;
    do
    {
      v64 = 0;
      v65 = v58;
      v66 = *((_BYTE *)&v184 + v59);
      LOWORD(v181[0]) = 256;
      do
      {
        if (isIdenticalTo)
          v67 = v66;
        else
          v67 = *((_BYTE *)v181 + v64);
        if (v67)
          v68 = v52;
        else
          v68 = v53;
        if (!v68)
          v68 = v62;
        v183[(v63 | (2 * v66) | *((_BYTE *)v181 + v64++))] = v68;
      }
      while (v64 != 2);
      v58 = 1;
      v59 = 1;
    }
    while ((v65 & 1) == 0);
    v54 = 1;
    v55 = 1;
  }
  while ((v60 & 1) == 0);
  a4 = v144;
LABEL_80:
  v69 = 0;
  v70 = 1;
  v71 = 1;
  while (2)
  {
    v72 = v183[v69];
    if (a4 && v72 - 9 < 0xFFFFFFFE)
      goto LABEL_102;
    v73 = v183[v69];
    v74 = v73;
    switch(v72)
    {
      case 0u:
        return v74 & 0x100000000 | v72 | v73;
      case 1u:
      case 2u:
      case 3u:
        v71 = 0;
        goto LABEL_87;
      case 4u:
      case 5u:
      case 6u:
        v71 = 0;
        if (!v14)
          goto LABEL_102;
        goto LABEL_87;
      case 7u:
      case 8u:
      case 9u:
        v70 = 0;
        goto LABEL_87;
      default:
LABEL_87:
        if (++v69 != 8)
          continue;
        if (!((v14 == 0) | (v70 | v71) & 1))
          goto LABEL_102;
        if (v14)
          v75 = a4 ^ 1;
        else
          v75 = 0;
        sub_1C4A3C18C((uint64_t)v161, a2, a1[10], a1[11], (unsigned __int8 *)v19, 0, 0, 0, 1u);
        sub_1C4A3C18C((uint64_t)v157, a2, a1[10], a1[11], (unsigned __int8 *)v142, 0, 0, 0, 1u);
        sub_1C4A3C18C((uint64_t)v153, a2, a1[10], a1[11], (unsigned __int8 *)v145, 0, 0, 0, 1u);
        if (*(_BYTE *)v167 && v162 < 4 || *(_BYTE *)v166 && v158 < 4 || *(_BYTE *)v145 && v158 < 4)
          goto LABEL_98;
        v77 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4);
        if (v77 < 0 && (v78 = v77 & 0x7FFFFFFF, v78 < *(_DWORD *)(a2 + 432)))
          v79 = *(uint64_t (***)())(*(_QWORD *)(a2 + 424) + 8 * v78);
        else
          v79 = 0;
        v148 = v79;
        v80 = sub_1C4825F50((unint64_t *)&v148);
        v146 = v80;
        if ((_DWORD)v81 == 1)
        {
          v80 = v146;
          if ((a4 & 1) != 0)
            goto LABEL_110;
        }
        else if ((a4 & 1) != 0)
        {
LABEL_110:
          v82 = &off_1E7FB1BF8;
          goto LABEL_111;
        }
        if (v80 <= 111)
        {
          if (v80 <= 47)
          {
            v82 = (__int16 ***)&off_1E7FB1B88;
            if (v80 != 1 && v146 != 16)
              v82 = &off_1E7FADAE8;
          }
          else if (v80 > 79)
          {
            if (v146 == 80)
              v82 = (__int16 ***)&off_1E7FB1680;
            else
              v82 = (__int16 ***)&off_1E7FB16B8;
          }
          else if (v146 == 48)
          {
            v82 = (__int16 ***)&off_1E7FB1610;
          }
          else
          {
            v82 = (__int16 ***)&off_1E7FB1BC0;
          }
        }
        else if (v80 > 223)
        {
          if (v80 > 287)
          {
            if (v146 == 288)
              v82 = (__int16 ***)&off_1E7FB1878;
            else
              v82 = (__int16 ***)&off_1E7FB18B0;
          }
          else if (v146 == 224)
          {
            v82 = (__int16 ***)&off_1E7FB1808;
          }
          else
          {
            v82 = (__int16 ***)&off_1E7FB1840;
          }
        }
        else if (v80 > 159)
        {
          if (v146 == 160)
            v82 = (__int16 ***)&off_1E7FB1798;
          else
            v82 = (__int16 ***)&off_1E7FB17D0;
        }
        else if (v146 == 112)
        {
          v82 = (__int16 ***)&off_1E7FB1728;
        }
        else
        {
          v82 = (__int16 ***)&off_1E7FB1760;
        }
LABEL_111:
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
        *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v82;
        v84 = *(_QWORD *)(a2 + 8);
        if (v84)
          (*(void (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84);
        v85 = operator new(0x28uLL);
        *v85 = &off_1E7FABB20;
        v85[1] = sub_1C4A3FE10;
        v85[2] = 0;
        v85[3] = a1;
        v85[4] = a2;
        v182 = v85;
        v86 = operator new(0x30uLL);
        *v86 = &off_1E7FABB68;
        v86[1] = sub_1C4A3D0C4;
        v86[2] = 0;
        v86[3] = a1;
        v86[4] = a2;
        *((_DWORD *)v86 + 10) = 0;
        *((_WORD *)v86 + 22) = 1;
        v180 = (unsigned __int8 *)v86;
        v87 = v170;
        v88 = v179;
        if (v170)
          v89 = v179;
        else
          v89 = (unsigned __int8 *)v181;
        v90 = (unsigned __int8 *)*((_QWORD *)v89 + 3);
        if (v90)
        {
          if (!v170)
            v88 = (unsigned __int8 *)v181;
          if (v90 == v88)
          {
            v178 = v177;
            (*(void (**)(unsigned __int8 *, _QWORD *))(*(_QWORD *)v90 + 24))(v90, v177);
            v91 = (uint64_t)v178;
          }
          else
          {
            v91 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v90 + 16))(v90);
            v178 = (_QWORD *)v91;
          }
        }
        else
        {
          v91 = 0;
          v178 = 0;
        }
        sub_1C4A45938(v161, v91);
        if (v178 == v177)
        {
          v92 = (void (**)(void))(v177[0] + 32);
        }
        else
        {
          if (!v178)
            goto LABEL_128;
          v92 = (void (**)(void))(*v178 + 40);
        }
        (*v92)();
LABEL_128:
        v93 = (unsigned __int8 *)*((_QWORD *)v89 + 3);
        if (v93)
        {
          v94 = v179;
          if (!v87)
            v94 = (unsigned __int8 *)v181;
          if (v93 == v94)
          {
            v176 = v175;
            (*(void (**)(unsigned __int8 *, _QWORD *))(*(_QWORD *)v94 + 24))(v94, v175);
            v95 = (uint64_t)v176;
          }
          else
          {
            v95 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v93 + 16))(v93);
            v176 = (_QWORD *)v95;
          }
        }
        else
        {
          v95 = 0;
          v176 = 0;
        }
        sub_1C4A45938(v157, v95);
        if (v176 == v175)
        {
          v96 = (void (**)(void))(v175[0] + 32);
        }
        else
        {
          if (!v176)
            goto LABEL_140;
          v96 = (void (**)(void))(*v176 + 40);
        }
        (*v96)();
LABEL_140:
        v97 = (unsigned __int8 *)*((_QWORD *)v89 + 3);
        if (v97)
        {
          v98 = v179;
          if (!v87)
            v98 = (unsigned __int8 *)v181;
          if (v97 == v98)
          {
            v174 = v173;
            (*(void (**)(unsigned __int8 *, _QWORD *))(*(_QWORD *)v98 + 24))(v98, v173);
            v99 = (uint64_t)v174;
          }
          else
          {
            v99 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v97 + 16))(v97);
            v174 = (_QWORD *)v99;
          }
        }
        else
        {
          v99 = 0;
          v174 = 0;
        }
        v100 = v75 & v71;
        sub_1C4A45938(v153, v99);
        if (v174 == v173)
        {
          v101 = (void (**)(void))(v173[0] + 32);
        }
        else
        {
          if (!v174)
            goto LABEL_152;
          v101 = (void (**)(void))(*v174 + 40);
        }
        (*v101)();
LABEL_152:
        if (v146 == 32)
          v102 = v100;
        else
          v102 = 0;
        if ((v102 & 1) != 0
          || v146 == 16
          && (v169 != 14 ? (v103 = (v169 & 0xFFFFFFFE) == 12) : (v103 = 1),
              !v103 ? (v104 = 0) : (v104 = 1),
              v168 != 14 ? (v105 = (v168 & 0xFFFFFFFE) == 12) : (v105 = 1),
              !v105 ? (v106 = 0) : (v106 = 1),
              v104 != v106))
        {
          v74 = 0;
          LOBYTE(v73) = 0;
          v72 = 0;
          goto LABEL_271;
        }
        if (v87)
          v107 = 9;
        else
          v107 = 1;
        v108 = v107;
        v109 = 2 * (v146 != 32);
        if (a4)
          v109 = 12;
        v110 = v107;
        if ((v162 & 0xFFFFFFFE) != 4)
        {
          if (v163 == 32)
          {
            v110 = 0;
          }
          else if (v164)
          {
            v110 = 21;
          }
          else
          {
            v110 = 2;
          }
        }
        v111 = v107;
        if ((v158 & 0xFFFFFFFE) != 4)
        {
          if (v159 == 32)
          {
            v111 = 0;
          }
          else if (v160)
          {
            v111 = 21;
          }
          else
          {
            v111 = 2;
          }
        }
        if ((v154 & 0xFFFFFFFE) != 4)
        {
          if (v155 == 32)
          {
            v108 = 0;
          }
          else if (v156)
          {
            v108 = 21;
          }
          else
          {
            v108 = 2;
          }
        }
        v171[0] = v172;
        v172[0] = v109;
        v172[1] = v110;
        v172[2] = v111;
        v172[3] = v108;
        v171[1] = (void *)0x500000004;
        v112 = a4;
        if (((a4 | v100) & 1) == 0)
        {
          if (v110 != v107 && v109 != v110 || v111 != v107 && v109 != v111 || (v112 = a4, v108 != v107) && v109 != v108)
          {
            v72 = 0;
            LOBYTE(v73) = 0;
            v74 = 0;
            goto LABEL_271;
          }
        }
        if (v100)
          v113 = 58;
        else
          v113 = 57;
        if (v87)
          v114 = 49;
        else
          v114 = 68;
        if (!v87)
          v113 = 87;
        if (v112)
          v115 = v114;
        else
          v115 = v113;
        v140 = sub_1C4C640F8(v115, 4, v172);
        v116 = *(_QWORD *)(a3 + 24);
        v152 = 0u;
        v151 = 0u;
        v150 = 0u;
        v149 = 0u;
        v117 = *(_QWORD *)(v116 + 32);
        v118 = *(_QWORD *)(v117 + 40);
        v148 = &off_1E816EC08;
        *(_QWORD *)&v149 = v117;
        *(_QWORD *)&v150 = v118;
        *((_QWORD *)&v149 + 1) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v117 + 16) + 104))(*(_QWORD *)(v117 + 16));
        v184 = 0;
        if (*((_QWORD *)&v150 + 1))
        {
          llvm::MetadataTracking::untrack((uint64_t)&v150 + 8, *((unsigned __int8 **)&v150 + 1));
          *((_QWORD *)&v150 + 1) = v184;
          if (v184)
            llvm::MetadataTracking::retrack((uint64_t)&v184, v184, (uint64_t)&v150 + 8);
        }
        else
        {
          *((_QWORD *)&v150 + 1) = 0;
        }
        *((_QWORD *)&v151 + 1) = a3;
        *(_QWORD *)&v152 = 0;
        *(_QWORD *)&v151 = *(_QWORD *)(a3 + 24);
        if ((__int128 *)(a3 + 56) != (__int128 *)((char *)&v150 + 8))
        {
          if (*((_QWORD *)&v150 + 1))
            llvm::MetadataTracking::untrack((uint64_t)&v150 + 8, *((unsigned __int8 **)&v150 + 1));
          v119 = *(unsigned __int8 **)(a3 + 56);
          *((_QWORD *)&v150 + 1) = v119;
          if (v119)
            llvm::MetadataTracking::track((uint64_t)&v150 + 8, v119, 2);
        }
        LODWORD(v184) = IncompleteVirtualRegister;
        LODWORD(v185) = 1;
        v120 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v148, v140, (uint64_t *)&v184, 1, 0, 0, 0);
        v122 = v121;
        v147[0] = v120;
        v147[1] = v121;
        LODWORD(v184) = 1;
        v185 = 0;
        v186 = 0;
        llvm::MachineInstr::addOperand(v121, v120, (const llvm::MachineOperand *)&v184);
        LODWORD(v184) = 1;
        v185 = 0;
        v186 = v169;
        v139 = v169;
        llvm::MachineInstr::addOperand(v122, v120, (const llvm::MachineOperand *)&v184);
        v123 = v168;
        LODWORD(v184) = 1;
        v185 = 0;
        v186 = v168;
        llvm::MachineInstr::addOperand(v122, v120, (const llvm::MachineOperand *)&v184);
        LODWORD(v184) = 1;
        v185 = 0;
        v186 = v123;
        llvm::MachineInstr::addOperand(v122, v120, (const llvm::MachineOperand *)&v184);
        sub_1C48B7F84(v147, (uint64_t)v161);
        sub_1C48B7F84(v147, (uint64_t)v157);
        sub_1C48B7F84(v147, (uint64_t)v153);
        v124 = 0;
        if (a4)
          v125 = 1;
        else
          v125 = 4;
        v126 = 3;
        if (a4)
          v126 = 0;
        v141 = v126;
        v143 = v125;
        do
        {
          switch(v183[v124])
          {
            case 1:
              LODWORD(v184) = 1;
              v185 = 0;
              v186 = 0;
              goto LABEL_229;
            case 2:
              LODWORD(v184) = 1;
              v185 = 0;
              v186 = 1;
              goto LABEL_229;
            case 3:
              LODWORD(v184) = 1;
              v185 = 0;
              v127 = 2;
              goto LABEL_228;
            case 4:
              LODWORD(v184) = 1;
              v185 = 0;
              v127 = 3;
              goto LABEL_228;
            case 5:
              LODWORD(v184) = 1;
              v185 = 0;
              v127 = 4;
              goto LABEL_228;
            case 6:
            case 9:
              LODWORD(v184) = 1;
              v185 = 0;
              v127 = 5;
              goto LABEL_228;
            case 7:
              LODWORD(v184) = 1;
              v185 = 0;
              v127 = v141;
              goto LABEL_228;
            case 8:
              LODWORD(v184) = 1;
              v185 = 0;
              v127 = v143;
LABEL_228:
              v186 = v127;
LABEL_229:
              llvm::MachineInstr::addOperand(v122, v120, (const llvm::MachineOperand *)&v184);
              break;
            default:
              break;
          }
          ++v124;
        }
        while (v124 != 8);
        if (v146 == 16 && v139 - 12 <= 2 && (v123 - 12) < 3)
        {
          if ((v162 & 0xFFFFFFFE) != 4 && v163 != 32 && !v164)
          {
            v128 = *((_QWORD *)v122 + 4) + 32 * (sub_1C4C2FD5C((unsigned __int16)v140) + 1);
            *(_QWORD *)(v128 + 16) |= 8uLL;
          }
          if ((v158 & 0xFFFFFFFE) != 4 && v159 != 32 && !v160)
          {
            v129 = *((_QWORD *)v122 + 4) + 32 * (sub_1C4C2FD5C((unsigned __int16)v140) + 1);
            *(_QWORD *)(v129 + 16) |= 8uLL;
          }
          if ((v154 & 0xFFFFFFFE) != 4 && v155 != 32 && !v156)
          {
            v130 = *((_QWORD *)v122 + 4) + 32 * (sub_1C4C2FD5C((unsigned __int16)v140) + 1);
            *(_QWORD *)(v130 + 16) |= 8uLL;
          }
        }
        sub_1C554AE8C(v122, a1[9], (_QWORD *)a1[10]);
        if ((a4 & 1) == 0)
          sub_1C48B0CD8((_QWORD *)a2, a3, *(_DWORD *)(*((_QWORD *)v122 + 4) + 4));
        v131 = a1[3];
        v132 = *(_QWORD *)(v131 + 48);
        if (!v132)
        {
          v132 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v131 + 8) + 216))(*(_QWORD *)(v131 + 8), v131 + 128, v131);
          *(_QWORD *)(v131 + 48) = v132;
        }
        v133 = *(_QWORD *)(v132 + 232);
        v184 = 0;
        if ((sub_1C4A4E290(v133, *(_DWORD *)(v132 + 248), (uint64_t)v122, &v184) & 1) != 0)
          goto LABEL_266;
        v134 = *(_DWORD *)(v132 + 240);
        v135 = *(_DWORD *)(v132 + 248);
        if (4 * v134 + 4 >= 3 * v135)
        {
          v135 *= 2;
        }
        else if (v135 + ~v134 - *(_DWORD *)(v132 + 244) > v135 >> 3)
        {
          goto LABEL_263;
        }
        sub_1C4A4E324(v132 + 232, v135);
        v184 = 0;
        sub_1C4A4E290(*(_QWORD *)(v132 + 232), *(_DWORD *)(v132 + 248), (uint64_t)v122, &v184);
LABEL_263:
        v136 = v184;
        ++*(_DWORD *)(v132 + 240);
        if (*(_QWORD *)v136 != -4096)
          --*(_DWORD *)(v132 + 244);
        *((_QWORD *)v136 + 1) = 0;
        *((_QWORD *)v136 + 2) = 0;
        *(_QWORD *)v136 = v122;
        *((_DWORD *)v136 + 6) = v165[0];
        *(_DWORD *)(v136 + 27) = *(_DWORD *)((char *)v165 + 3);
        v136[31] = 0;
LABEL_266:
        v73 = *(_DWORD *)(*((_QWORD *)v122 + 4) + 4);
        v72 = v73 & 0xFFFFFF00;
        v148 = &off_1E816EC08;
        if (*((_QWORD *)&v150 + 1))
          llvm::MetadataTracking::untrack((uint64_t)&v150 + 8, *((unsigned __int8 **)&v150 + 1));
        if (v171[0] != v172)
          free(v171[0]);
        v74 = 0x100000000;
LABEL_271:
        if (v180 == v179)
        {
          v137 = (void (**)(void))(*(_QWORD *)v179 + 32);
        }
        else
        {
          if (!v180)
            goto LABEL_276;
          v137 = (void (**)(void))(*(_QWORD *)v180 + 40);
        }
        (*v137)();
LABEL_276:
        if (v182 == v181)
        {
          v138 = (void (**)(void))(v181[0] + 32);
        }
        else
        {
          if (!v182)
            return v74 & 0x100000000 | v72 | v73;
          v138 = (void (**)(void))(*v182 + 40);
        }
        (*v138)();
        break;
    }
    return v74 & 0x100000000 | v72 | v73;
  }
}

uint64_t sub_1C4A49EF4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned __int8 a8, unsigned __int8 a9)
{
  unsigned __int8 v9;
  uint64_t v13;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  int v28;
  __int16 ***v29;
  __int16 ***v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t IncompleteVirtualRegister;
  uint64_t v43;
  uint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  int v57;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t *v70;
  BOOL v71;
  __int16 v72;
  __int16 ***v73;
  unsigned __int8 *v74;
  _DWORD v75[6];
  _DWORD v76[4];
  unint64_t v77[4];
  unsigned __int8 *v78[6];

  v9 = a8;
  v13 = a4;
  v15 = a1;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
  v74 = (unsigned __int8 *)a3;
  v17 = *(unsigned int *)(a3 + 4);
  v18 = *(_DWORD *)(a5 + 4);
  v72 = *(_WORD *)(a1[7] + 1020);
  v71 = (~*(unsigned __int16 *)(a2 + 44) & 0x7C0) == 0;
  if ((_DWORD)v17 != v18 && (_DWORD)v17 != *(_DWORD *)(a6 + 4))
  {
    v19 = (uint64_t *)((v17 & 0x80000000) != 0
                    ? *(_QWORD *)(v16 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v16 + 272) + 8 * v17);
    v20 = *v19;
    if (v20)
    {
      if ((*(_BYTE *)(v20 + 3) & 1) != 0 || (v20 = *(_QWORD *)(v20 + 24)) != 0 && (*(_BYTE *)(v20 + 3) & 1) != 0)
      {
        v59 = *(_QWORD *)(v20 + 8);
        if (v59)
        {
          if (**(_WORD **)(v59 + 16) != 178)
            goto LABEL_7;
          if ((v17 & 0x80000000) != 0)
            v60 = (uint64_t *)(*(_QWORD *)(v16 + 24) + 16 * (v17 & 0x7FFFFFFF) + 8);
          else
            v60 = (uint64_t *)(*(_QWORD *)(v16 + 272) + 8 * v17);
          v63 = *v60;
          if ((*(_BYTE *)(v63 + 3) & 1) == 0)
            v63 = *(_QWORD *)(v63 + 24);
          v74 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v63 + 8) + 32) + 32);
        }
      }
      v9 = a8;
      v15 = a1;
      v13 = a4;
    }
  }
LABEL_7:
  v21 = *(unsigned int *)(v13 + 4);
  if ((_DWORD)v21 != v18 && (_DWORD)v21 != *(_DWORD *)(a6 + 4))
  {
    v22 = (uint64_t *)((v21 & 0x80000000) != 0
                    ? *(_QWORD *)(v16 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8
                    : *(_QWORD *)(v16 + 272) + 8 * v21);
    v23 = *v22;
    if (v23)
    {
      if ((*(_BYTE *)(v23 + 3) & 1) != 0 || (v23 = *(_QWORD *)(v23 + 24)) != 0 && (*(_BYTE *)(v23 + 3) & 1) != 0)
      {
        v61 = *(_QWORD *)(v23 + 8);
        if (v61)
        {
          if (**(_WORD **)(v61 + 16) == 178)
          {
            if ((v21 & 0x80000000) != 0)
              v62 = (uint64_t *)(*(_QWORD *)(v16 + 24) + 16 * (v21 & 0x7FFFFFFF) + 8);
            else
              v62 = (uint64_t *)(*(_QWORD *)(v16 + 272) + 8 * v21);
            v64 = *v62;
            if ((*(_BYTE *)(v64 + 3) & 1) == 0)
              v64 = *(_QWORD *)(v64 + 24);
            v13 = *(_QWORD *)(*(_QWORD *)(v64 + 8) + 32) + 32;
          }
        }
      }
    }
  }
  v24 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
  if (v24 < 0 && (v25 = v24 & 0x7FFFFFFF, v25 < *(_DWORD *)(v16 + 432)))
    v26 = *(_QWORD *)(*(_QWORD *)(v16 + 424) + 8 * v25);
  else
    v26 = 0;
  v77[0] = v26;
  v28 = sub_1C4825F50(v77);
  if ((_DWORD)v27 == 1)
  if (v28 <= 111)
  {
    if (v28 <= 47)
    {
      v29 = (__int16 ***)&off_1E7FB1B88;
      if (v28 != 1 && v28 != 16)
        v29 = &off_1E7FADAE8;
    }
    else if (v28 > 79)
    {
      if (v28 == 80)
        v29 = (__int16 ***)&off_1E7FB1680;
      else
        v29 = (__int16 ***)&off_1E7FB16B8;
    }
    else if (v28 == 48)
    {
      v29 = (__int16 ***)&off_1E7FB1610;
    }
    else
    {
      v29 = (__int16 ***)&off_1E7FB1BC0;
    }
  }
  else if (v28 > 223)
  {
    if (v28 > 287)
    {
      if (v28 == 288)
        v29 = (__int16 ***)&off_1E7FB1878;
      else
        v29 = (__int16 ***)&off_1E7FB18B0;
    }
    else if (v28 == 224)
    {
      v29 = (__int16 ***)&off_1E7FB1808;
    }
    else
    {
      v29 = (__int16 ***)&off_1E7FB1840;
    }
  }
  else if (v28 > 159)
  {
    if (v28 == 160)
      v29 = (__int16 ***)&off_1E7FB1798;
    else
      v29 = (__int16 ***)&off_1E7FB17D0;
  }
  else if (v28 == 112)
  {
    v29 = (__int16 ***)&off_1E7FB1728;
  }
  else
  {
    v29 = (__int16 ***)&off_1E7FB1760;
  }
  v30 = &off_1E7FB1BF8;
  if (!a9)
    v30 = v29;
  v73 = v30;
  if ((a7 - 6) > 3)
  {
    v41 = a7 - 17;
    v45 = 0;
    a7 = 14;
    switch(v41)
    {
      case 0:
        goto LABEL_103;
      case 1:
        v45 = 2;
        goto LABEL_103;
      case 2:
        v45 = 5;
        goto LABEL_103;
      case 3:
        v45 = 1;
        goto LABEL_103;
      case 4:
        v45 = 6;
        goto LABEL_103;
      case 5:
        goto LABEL_97;
      default:
        goto LABEL_65;
    }
  }
  v70 = v15;
  v69 = v9;
  v31 = a7 - 7;
  if (((a7 - 6) < 2) | (v72 | v71) & 1)
    v32 = (unsigned __int8 *)a5;
  else
    v32 = (unsigned __int8 *)a6;
  if (((a7 - 6) < 2) | (v72 | v71) & 1)
    v33 = (unsigned __int8 *)a6;
  else
    v33 = (unsigned __int8 *)a5;
  if (((v72 | v71) & 1) == 0)
  {
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v16, "", 0);
    *(_QWORD *)(*(_QWORD *)(v16 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v29;
    v43 = *(_QWORD *)(v16 + 8);
    if (v43)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 24))(v43, IncompleteVirtualRegister);
    if (!sub_1C4A48224(v70, v16, a2, 1u, v74, (unsigned __int8 *)v13, v32, v33, v69, v65, IncompleteVirtualRegister, SHIDWORD(IncompleteVirtualRegister), 0))goto LABEL_95;
    if ((IncompleteVirtualRegister & 0x80000000) != 0)
      v44 = (uint64_t *)(*(_QWORD *)(v16 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF) + 8);
    else
      v44 = (uint64_t *)(*(_QWORD *)(v16 + 272) + 8 * IncompleteVirtualRegister);
    v46 = *v44;
    if ((*(_BYTE *)(v46 + 3) & 1) == 0)
      v46 = *(_QWORD *)(v46 + 24);
    v47 = *(_QWORD *)(v46 + 8);
    sub_1C554AE8C((_QWORD *)v47, v70[9], (_QWORD *)v70[10]);
    if (v31 < 2)
      v29 = v73;
    LODWORD(v38) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v16, "", 0);
    v68 = v38 & 0x7FFFFFFF;
    *(_QWORD *)(*(_QWORD *)(v16 + 24) + 16 * v68) = v29;
    v48 = *(_QWORD *)(v16 + 8);
    if (v48)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v48 + 24))(v48, v38);
    v49 = a9;
    if (v31 >= 2)
      v49 = 0;
    if (!sub_1C4A48224(v70, v16, a2, 5u, v74, (unsigned __int8 *)v13, v32, *(unsigned __int8 **)(v47 + 32), v69, v66, v38, 0, v49))goto LABEL_95;
    if (v31 > 1)
    {
      if ((v38 & 0x80000000) != 0)
        v50 = (uint64_t *)(*(_QWORD *)(v16 + 24) + 16 * v68 + 8);
      else
        v50 = (uint64_t *)(*(_QWORD *)(v16 + 272) + 8 * v38);
      v51 = *v50;
      if ((*(_BYTE *)(v51 + 3) & 1) == 0)
        v51 = *(_QWORD *)(v51 + 24);
      v52 = *(_QWORD *)(v51 + 8);
      sub_1C554AE8C((_QWORD *)v52, v70[9], (_QWORD *)v70[10]);
      LODWORD(v38) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v16, "", 0);
      *(_QWORD *)(*(_QWORD *)(v16 + 24) + 16 * (v38 & 0x7FFFFFFF)) = v73;
      v53 = *(_QWORD *)(v16 + 8);
      if (v53)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v53 + 24))(v53, v38);
      if (!sub_1C4A48224(v70, v16, a2, 0, v74, (unsigned __int8 *)v13, v33, *(unsigned __int8 **)(v52 + 32), v69, v67, v38, 0, a9))
      {
LABEL_95:
        v54 = 0;
        LOBYTE(v38) = 0;
        v40 = 0;
        return v54 | v40 | v38;
      }
    }
    v40 = v38 & 0xFFFFFF00;
    goto LABEL_94;
  }
  if (v31 <= 1)
  {
    v34 = *(_QWORD *)(a2 + 24);
    v78[4] = 0;
    v35 = *(_QWORD *)(v34 + 32);
    v77[0] = (unint64_t)&off_1E816EC08;
    v77[1] = v35;
    v77[3] = *(_QWORD *)(v35 + 40);
    v77[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 16) + 104))(*(_QWORD *)(v35 + 16));
    v36 = *(unsigned __int8 **)(a2 + 24);
    v78[2] = (unsigned __int8 *)a2;
    v78[3] = 0;
    v78[0] = 0;
    v78[1] = v36;
    if ((unsigned __int8 **)(a2 + 56) != v78)
    {
      v37 = *(unsigned __int8 **)(a2 + 56);
      v78[0] = v37;
      if (v37)
        llvm::MetadataTracking::track((uint64_t)v78, v37, 2);
    }
    LODWORD(v38) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v16, "", 0);
    *(_QWORD *)(*(_QWORD *)(v16 + 24) + 16 * (v38 & 0x7FFFFFFF)) = v29;
    v39 = *(_QWORD *)(v16 + 8);
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
    v76[0] = v38;
    v76[2] = 1;
    v75[0] = *(_DWORD *)(a5 + 4);
    v75[4] = 0;
    (*(void (**)(unint64_t *, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, _QWORD))(v77[0] + 32))(v77, 19, v76, 1, v75, 1, 0);
    v40 = v38 & 0xFFFFFF00;
    v77[0] = (unint64_t)&off_1E816EC08;
    if (v78[0])
      llvm::MetadataTracking::untrack((uint64_t)v78, v78[0]);
LABEL_94:
    v54 = 0x100000000;
    return v54 | v40 | v38;
  }
  v9 = v69;
  v15 = v70;
  if (a7 != 9)
  {
LABEL_65:
    if ((a7 - 9) <= 5)
LABEL_97:
      a7 ^= 0xFu;
    __asm { BR              X11 }
  }
  v45 = 0;
LABEL_103:
  v55 = (unsigned __int8 *)a6;
  v38 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v16, "", 0);
  *(_QWORD *)(*(_QWORD *)(v16 + 24) + 16 * (v38 & 0x7FFFFFFF)) = v73;
  v56 = *(_QWORD *)(v16 + 8);
  if (v56)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 24))(v56, v38);
  v57 = sub_1C4A48224(v15, v16, a2, v45, v74, (unsigned __int8 *)v13, (unsigned __int8 *)a5, v55, v9, v65, v38, SHIDWORD(v38), a9);
  if (v57)
  {
    v40 = v38 & 0xFFFFFF00;
  }
  else
  {
    LOBYTE(v38) = 0;
    v40 = 0;
  }
  v54 = 0x100000000;
  if (!v57)
    v54 = 0;
  return v54 | v40 | v38;
}

void sub_1C4A4A7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  __asm { BR              X12 }
}

uint64_t sub_1C4A4A824(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  const char *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 **v38;
  unsigned __int8 *v39;
  __int16 ***v40;
  uint64_t IncompleteVirtualRegister;
  __int16 ***v42;
  unsigned __int8 v43;
  uint64_t v44;
  unsigned __int8 *v46;
  int v47;
  int v48;
  unint64_t v49[4];
  unsigned __int8 *v50[17];

  v10 = *(unsigned int *)(v6 + 4);
  if ((v10 & 0x80000000) != 0)
    v11 = *(_QWORD *)(v7 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8;
  else
    v11 = *(_QWORD *)(v7 + 272) + 8 * v10;
  v12 = *(_QWORD *)v11;
  if ((*(_BYTE *)(*(_QWORD *)v11 + 3) & 1) == 0)
    v12 = *(_QWORD *)(v12 + 24);
  v13 = *(_DWORD *)(a5 + 4);
  if ((_DWORD)v10 != v13 && (_DWORD)v10 != *(_DWORD *)(a6 + 4))
  {
    v14 = *(_QWORD *)(v12 + 8);
    v15 = **(unsigned __int16 **)(v14 + 16);
    if (v15 == 118 || v15 == 126)
    {
      v16 = *(_QWORD *)(v14 + 32);
      v17 = *(_DWORD *)(v16 + 36);
      if (v17 < 0)
      {
        v18 = v17 & 0x7FFFFFFF;
        if (v18 < *(_DWORD *)(v7 + 432) && *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * v18) == 129)
          v6 = v16 + 32;
      }
    }
  }
  v19 = *(unsigned int *)(v9 + 4);
  if ((v19 & 0x80000000) != 0)
    v20 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
  else
    v20 = (uint64_t *)(*(_QWORD *)(v7 + 272) + 8 * v19);
  v21 = *v20;
  if ((*(_BYTE *)(v21 + 3) & 1) == 0)
    v21 = *(_QWORD *)(v21 + 24);
  if ((_DWORD)v19 != v13 && (_DWORD)v19 != *(_DWORD *)(a6 + 4))
  {
    v22 = *(_QWORD *)(v21 + 8);
    v23 = **(unsigned __int16 **)(v22 + 16);
    if (v23 == 118 || v23 == 126)
    {
      v24 = *(_QWORD *)(v22 + 32);
      v25 = *(_DWORD *)(v24 + 36);
      if (v25 < 0)
      {
        v26 = v25 & 0x7FFFFFFF;
        if (v26 < *(_DWORD *)(v7 + 432) && *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * v26) == 129)
          v9 = v24 + 32;
      }
    }
  }
  v29 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 4);
  if (v29 < 0 && (v30 = v29 & 0x7FFFFFFF, v30 < *(_DWORD *)(v7 + 432)))
  {
    v31 = a1;
    v32 = *(_QWORD *)(*(_QWORD *)(v7 + 424) + 8 * v30);
  }
  else
  {
    v31 = a1;
    v32 = 0;
  }
  v49[0] = v32;
  v34 = sub_1C4825F50(v49);
  if ((_DWORD)v33 == 1)
  if (v34 != 32 && v34 != 16)
    return 0;
  v35 = *(_QWORD *)(v8 + 24);
  v50[4] = 0;
  v36 = *(_QWORD *)(v35 + 32);
  v49[0] = (unint64_t)&off_1E816EC08;
  v49[1] = v36;
  v49[3] = *(_QWORD *)(v36 + 40);
  v49[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v36 + 16) + 104))(*(_QWORD *)(v36 + 16));
  v37 = *(unsigned __int8 **)(v8 + 24);
  v50[2] = (unsigned __int8 *)v8;
  v50[3] = 0;
  v50[0] = 0;
  v50[1] = v37;
  v38 = (unsigned __int8 **)(v8 + 56);
  if (v38 != v50)
  {
    v39 = *v38;
    v50[0] = v39;
    if (v39)
    {
      llvm::MetadataTracking::track((uint64_t)v50, v39, 2);
      if (v50[0])
        llvm::MetadataTracking::untrack((uint64_t)v50, v50[0]);
      v46 = *v38;
      v50[0] = v46;
      if (v46)
        llvm::MetadataTracking::track((uint64_t)v50, v46, 2);
    }
    else
    {
      v50[0] = 0;
    }
  }
  if (v34 == 32)
    v40 = &off_1E7FADAE8;
  else
    v40 = (__int16 ***)&off_1E7FB1B88;
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v7, "", 0);
  v42 = &off_1E7FB1BF8;
  v43 = v48;
  if (!v48)
    v42 = v40;
  *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v42;
  v44 = *(_QWORD *)(v7 + 8);
  if (v44)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 24))(v44, IncompleteVirtualRegister);
    v43 = v48;
  }
  sub_1C4A4C390(v31, v49, 9u, (unsigned __int8 *)v6, (unsigned __int8 *)v9, (unsigned __int8 *)a5, (unsigned __int8 *)a6, v47, IncompleteVirtualRegister, SHIDWORD(IncompleteVirtualRegister), v43);
  v49[0] = (unint64_t)&off_1E816EC08;
  if (v50[0])
    llvm::MetadataTracking::untrack((uint64_t)v50, v50[0]);
  return IncompleteVirtualRegister | 0x100000000;
}

uint64_t sub_1C4A4AE18(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  llvm::MachineFunction *v24;
  llvm::MachineInstr *v25;
  llvm::MachineInstr *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  int v40;
  llvm::MachineFunction *v41;
  llvm::MachineInstr *v42;
  llvm::MachineInstr *v43;
  uint64_t v44;
  llvm::detail::DoubleAPFloat *v45;
  void *v46;
  uint64_t (***v47)();
  uint64_t (**v48)();
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (**(unsigned __int16 **)(a1 + 16) - 65 > 1)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) + 40);
  v7 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 68), v6);
  v9 = v8;
  if (v8)
  {
    v10 = v7;
    goto LABEL_4;
  }
  v29 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 68);
  if ((int)v29 >= 0)
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v29);
  else
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
  v31 = *v30;
  if ((*(_BYTE *)(v31 + 3) & 1) == 0)
    v31 = *(_QWORD *)(v31 + 24);
  v32 = *(_QWORD *)(v31 + 8);
  if (**(_WORD **)(v32 + 16) != 121)
    return 0;
  result = *(_QWORD *)(*(_QWORD *)(v32 + 32) + 48);
  if (!result)
    return result;
  v46 = *(void **)(result + 32);
  v45 = (llvm::detail::DoubleAPFloat *)(result + 32);
  if (v46 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v45, (unsigned int *)&v48);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v45, (unsigned int *)&v48);
  if (v49 >= 0x41)
    v47 = (uint64_t (***)())v48;
  else
    v47 = &v48;
  v10 = (uint64_t)*v47;
  if (v49 >= 0x41 && v48)
    MEMORY[0x1CAA32F9C]();
LABEL_4:
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_DWORD *)(v11 + 4);
  if (v12 < 0 && (v12 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * (v12 & 0x7FFFFFFF)) == 257;
    v14 = 0xFFFFLL;
    if (*(_QWORD *)(*(_QWORD *)(v6 + 424) + 8 * (v12 & 0x7FFFFFFF)) == 257)
      v14 = 0xFFFFFFFFLL;
  }
  else
  {
    v13 = 0;
    v14 = 0xFFFFLL;
  }
  v15 = *(_DWORD *)(v11 + 36);
  v16 = v14 & ~v10;
  if (v16 <= 0xFF)
  {
    v17 = *(_QWORD *)(a1 + 24);
    v56 = 0;
    v18 = *(_QWORD *)(v17 + 32);
    v48 = &off_1E816EC08;
    v49 = v18;
    v51 = *(_QWORD *)(v18 + 40);
    v50 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 16) + 104))(*(_QWORD *)(v18 + 16));
    v19 = *(_QWORD *)(a1 + 24);
    v54 = a1;
    v55 = 0;
    v52 = 0;
    v53 = v19;
    if ((unsigned __int8 **)(a1 + 56) != &v52)
    {
      v20 = *(unsigned __int8 **)(a1 + 56);
      v52 = v20;
      if (v20)
        llvm::MetadataTracking::track((uint64_t)&v52, v20, 2);
    }
    if (v13)
      v21 = 363;
    else
      v21 = 375;
    if (v13)
      v22 = 6286;
    else
      v22 = 6298;
    if (**(_WORD **)(a1 + 16) == 65)
      v23 = v21;
    else
      v23 = v22;
    LODWORD(v62) = v12;
    v63 = 1;
    v24 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v48, v23, &v62, 1, 0, 0, 0);
    v26 = v25;
    v57 = 1;
    v59 = 0;
    v60 = 0;
    llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v57);
    v59 = 0;
    v60 = 0;
    v57 = 0;
    v58 = v15;
    v61 = 0;
    llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v57);
    v57 = 1;
    v59 = 0;
    v60 = 0;
    llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v57);
    v57 = 1;
    v59 = 0;
    v60 = v16;
    llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v57);
    v27 = a1;
    if ((*(_BYTE *)a1 & 4) == 0)
    {
      v27 = a1;
      if ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        v27 = a1;
        do
          v27 = *(_QWORD *)(v27 + 8);
        while ((*(_WORD *)(v27 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v27 + 8));
    sub_1C554AE8C(v26, a2, a3);
    v48 = &off_1E816EC08;
    v28 = v52;
    if (!v52)
      return 1;
    goto LABEL_51;
  }
  result = 0;
  if (!v9 && v10 <= 255)
  {
    v34 = *(_QWORD *)(a1 + 24);
    v56 = 0;
    v35 = *(_QWORD *)(v34 + 32);
    v48 = &off_1E816EC08;
    v49 = v35;
    v51 = *(_QWORD *)(v35 + 40);
    v50 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 16) + 104))(*(_QWORD *)(v35 + 16));
    v36 = *(_QWORD *)(a1 + 24);
    v54 = a1;
    v55 = 0;
    v52 = 0;
    v53 = v36;
    if ((unsigned __int8 **)(a1 + 56) != &v52)
    {
      v37 = *(unsigned __int8 **)(a1 + 56);
      v52 = v37;
      if (v37)
        llvm::MetadataTracking::track((uint64_t)&v52, v37, 2);
    }
    if (v13)
      v38 = 390;
    else
      v38 = 402;
    if (v13)
      v39 = 6313;
    else
      v39 = 6325;
    if (**(_WORD **)(a1 + 16) == 65)
      v40 = v38;
    else
      v40 = v39;
    LODWORD(v62) = v12;
    v63 = 1;
    v41 = (llvm::MachineFunction *)sub_1C5548620((uint64_t *)&v48, v40, &v62, 1, 0, 0, 0);
    v43 = v42;
    v57 = 1;
    v59 = 0;
    v60 = 0;
    llvm::MachineInstr::addOperand(v42, v41, (const llvm::MachineOperand *)&v57);
    v59 = 0;
    v60 = 0;
    v57 = 0;
    v58 = v15;
    v61 = 0;
    llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v57);
    v57 = 1;
    v59 = 0;
    v60 = 0;
    llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v57);
    v57 = 1;
    v59 = 0;
    v60 = v10;
    llvm::MachineInstr::addOperand(v43, v41, (const llvm::MachineOperand *)&v57);
    v44 = a1;
    if ((*(_BYTE *)a1 & 4) == 0)
    {
      v44 = a1;
      if ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        v44 = a1;
        do
          v44 = *(_QWORD *)(v44 + 8);
        while ((*(_WORD *)(v44 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a1 + 24) + 40, a1, *(_QWORD *)(v44 + 8));
    sub_1C554AE8C(v43, a2, a3);
    v48 = &off_1E816EC08;
    v28 = v52;
    if (!v52)
      return 1;
LABEL_51:
    llvm::MetadataTracking::untrack((uint64_t)&v52, v28);
    return 1;
  }
  return result;
}

void sub_1C4A4B340(llvm::MachineFunction ***a1, uint64_t a2)
{
  llvm::MachineFunction **v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  llvm::MachineFunction **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _OWORD v20[2];
  void *v21[2];
  __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 80) == 5)
  {
    v3 = *a1;
    v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v21 = *(_OWORD *)a2;
    v22 = v4;
    llvm::MachineInstr::addOperand(v3[1], *v3, (const llvm::MachineOperand *)v21);
    return;
  }
  v5 = (uint64_t)a1[2];
  v6 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v6;
  if ((DWORD1(v20[0]) & 0x80000000) == 0
    || (v7 = a1[1], v8 = DWORD1(v20[0]) & 0x7FFFFFFF, v8 >= *((_DWORD *)v7 + 108))
    || *((_QWORD *)v7[53] + v8) != 257)
  {
    sub_1C4A397F4(v5, (uint64_t)v20, (uint64_t)v21);
    if (LODWORD(v21[1]))
    {
      v15 = 32 * LODWORD(v21[1]);
      v16 = (char *)v21[0] + 24;
      while (*v16)
      {
        (*(void (**)(_QWORD, llvm::MachineFunction **))(*(_QWORD *)*v16 + 48))(*v16, *a1);
        v16 += 4;
        v15 -= 32;
        if (!v15)
          goto LABEL_24;
      }
LABEL_37:
      sub_1C485C2F0();
    }
LABEL_24:
    if (!v23)
      return;
    v11 = (char *)v21[0];
    if (!LODWORD(v21[1]))
    {
LABEL_34:
      if (v11 != (char *)&v22)
        free(v11);
      return;
    }
    v17 = 32 * LODWORD(v21[1]);
    while (1)
    {
      v18 = *(char **)&v11[v17 - 8];
      if (&v11[v17 - 32] == v18)
        break;
      if (v18)
      {
        v19 = 5;
        goto LABEL_31;
      }
LABEL_32:
      v17 -= 32;
      if (!v17)
      {
LABEL_33:
        v11 = (char *)v21[0];
        goto LABEL_34;
      }
    }
    v18 = &v11[v17 - 32];
    v19 = 4;
LABEL_31:
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
    goto LABEL_32;
  }
  sub_1C4A38D00(v5, (uint64_t)v20, v21);
  if (LODWORD(v21[1]))
  {
    v9 = 32 * LODWORD(v21[1]);
    v10 = (char *)v21[0] + 24;
    while (*v10)
    {
      (*(void (**)(_QWORD, llvm::MachineFunction **))(*(_QWORD *)*v10 + 48))(*v10, *a1);
      v10 += 4;
      v9 -= 32;
      if (!v9)
        goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_10:
  if (v23)
  {
    v11 = (char *)v21[0];
    if (LODWORD(v21[1]))
    {
      v12 = 32 * LODWORD(v21[1]);
      while (1)
      {
        v13 = *(char **)&v11[v12 - 8];
        if (&v11[v12 - 32] == v13)
          break;
        if (v13)
        {
          v14 = 5;
          goto LABEL_17;
        }
LABEL_18:
        v12 -= 32;
        if (!v12)
          goto LABEL_33;
      }
      v13 = &v11[v12 - 32];
      v14 = 4;
LABEL_17:
      (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
      goto LABEL_18;
    }
    goto LABEL_34;
  }
}

llvm::MachineFunction *sub_1C4A4B550(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunction *v4;
  llvm::MachineInstr *v5;
  llvm::MachineInstr *v6;
  int v7;
  llvm::MachineFunction *v8;
  llvm::MachineInstr *v9;
  llvm::MachineInstr *v10;
  llvm::MachineFunction *v11;
  llvm::MachineInstr *v12;
  llvm::MachineInstr *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 ***v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v19 = &off_1E7FB1568;
  v20 = 2;
  v4 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 5625, &v19, 1, 0, 0, 0);
  v6 = v5;
  LODWORD(v15) = 1;
  v16 = 0;
  v17 = 0;
  llvm::MachineInstr::addOperand(v5, v4, (const llvm::MachineOperand *)&v15);
  v16 = 0;
  v17 = a2;
  LODWORD(v18) = 0;
  v15 = 2058;
  llvm::MachineInstr::addOperand(v6, v4, (const llvm::MachineOperand *)&v15);
  v7 = *(_DWORD *)(*((_QWORD *)v6 + 4) + 4);
  v19 = &off_1E7FB1568;
  v20 = 2;
  v8 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 5625, &v19, 1, 0, 0, 0);
  v10 = v9;
  LODWORD(v15) = 1;
  v16 = 0;
  v17 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v15);
  v16 = 0;
  v17 = a2;
  LODWORD(v18) = 0;
  v15 = 2314;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
  LODWORD(v8) = *(_DWORD *)(*((_QWORD *)v10 + 4) + 4);
  v19 = (__int16 ***)&off_1E7FB1BC0;
  v20 = 2;
  v11 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, 18, &v19, 1, 0, 0, 0);
  v13 = v12;
  v16 = 0;
  v17 = 0;
  LODWORD(v15) = 0;
  HIDWORD(v15) = v7;
  v18 = 0;
  llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)&v15);
  LODWORD(v15) = 1;
  v16 = 0;
  v17 = 25;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v15);
  v16 = 0;
  v17 = 0;
  LODWORD(v15) = 0;
  HIDWORD(v15) = (_DWORD)v8;
  v18 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v15);
  LODWORD(v15) = 1;
  v16 = 0;
  v17 = 26;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v15);
  return v11;
}

uint64_t sub_1C4A4B778(uint64_t a1)
{
  uint64_t Metadata;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t result;
  BOOL v11;

  if (!a1 || *(_BYTE *)(a1 + 16) != 3 || (Metadata = llvm::Value::getMetadata(a1, "agx.bind", 8uLL)) == 0)
  {
LABEL_19:
    if ((*(_BYTE *)(a1 + 33) & 0x1C) != 0)
      return 12;
    else
      return 10;
  }
  v3 = (uint64_t *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
  v5 = *v3;
  v4 = v3[1];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 128) + 24) + 8) != 17)
    goto LABEL_8;
  if (*(_BYTE *)v4 != 1 || (v6 = *(_QWORD *)(v4 + 128), *(_BYTE *)(v6 + 16) != 16))
  {
    v4 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8));
LABEL_8:
    v6 = *(_QWORD *)(v4 + 128);
  }
  v7 = (_QWORD *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u)
    v7 = (_QWORD *)*v7;
  v8 = *(_DWORD *)v7;
  result = 11;
  v11 = (v8 - 93) <= 0x15 && ((1 << (v8 - 93)) & 0x300001) != 0 || v8 == 18;
  if (!v11 && v8 != 43)
    goto LABEL_19;
  return result;
}

uint64_t sub_1C4A4B864(_DWORD **a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (uint64_t *)(a2 + 16 * (a4 & 0x7FFFFFFF) + 8);
  if (a4 >= 0)
    v4 = (uint64_t *)(a3 + 8 * a4);
  v5 = *v4;
  if (!v5)
    return 0;
  v7 = v5;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0 && ((v7 = *(_QWORD *)(v5 + 24)) == 0 || (*(_BYTE *)(v7 + 3) & 1) == 0)
    || (v8 = *(_QWORD *)(v7 + 8)) == 0
    || **(_WORD **)(v8 + 16) != 126
    || *(_DWORD *)(v8 + 40) != 2)
  {
    v9 = v5;
    if ((*(_DWORD *)v5 & 0x1000000) != 0)
      goto LABEL_15;
    v9 = *(_QWORD *)(v5 + 24);
    if (!v9)
      return 0;
    if ((*(_BYTE *)(v9 + 3) & 1) != 0)
    {
LABEL_15:
      v8 = *(_QWORD *)(v9 + 8);
      if (v8 && **(_WORD **)(v8 + 16) == 124 && *(_DWORD *)(v8 + 40) == 2)
      {
        ++a1;
        goto LABEL_25;
      }
      if ((*(_DWORD *)v5 & 0x1000000) != 0)
      {
LABEL_22:
        v8 = *(_QWORD *)(v5 + 8);
        if (v8 && **(_WORD **)(v8 + 16) == 118 && *(_DWORD *)(v8 + 40) == 2)
          goto LABEL_25;
        return 0;
      }
      v9 = *(_QWORD *)(v5 + 24);
      if (!v9)
        return 0;
    }
    v5 = v9;
    if ((*(_BYTE *)(v9 + 3) & 1) == 0)
      return 0;
    goto LABEL_22;
  }
  a1 += 2;
LABEL_25:
  **a1 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 36);
  return 1;
}

_QWORD *sub_1C4A4B974(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FABA90;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A4B9B4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FABA90;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A4BA04(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FABA90;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A4BAC0(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FABA90;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A4BB74(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A4BB90(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A4BBC4(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, *(const llvm::MachineOperand **)(a1 + 8));
}

_QWORD *sub_1C4A4BBD0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FABAD8;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  return a1;
}

void sub_1C4A4BC10(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FABAD8;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A4BC60(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v9;

  v2 = operator new(0x58uLL);
  v3 = v2;
  *v2 = &off_1E7FABAD8;
  v4 = v2 + 3;
  v2[1] = v2 + 3;
  v2[2] = 0x200000000;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
    v6 = v2 == (_QWORD *)a1;
  else
    v6 = 1;
  if (!v6)
  {
    if (v5 >= 3)
    {
      v9 = (void **)(v2 + 1);
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v2 + 1), (uint64_t)v4, v5, 32);
      v7 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v7)
        goto LABEL_8;
      v4 = *v9;
    }
    else
    {
      v7 = *(unsigned int *)(a1 + 16);
    }
    memcpy(v4, *(const void **)(a1 + 8), 32 * v7);
LABEL_8:
    *((_DWORD *)v3 + 4) = v5;
  }
  return v3;
}

const void **sub_1C4A4BD1C(const void **result, const void **a2)
{
  void *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unsigned int *v7;
  void **v8;

  *a2 = &off_1E7FABAD8;
  v2 = a2 + 3;
  a2[1] = a2 + 3;
  a2[2] = (const void *)0x200000000;
  v3 = *((unsigned int *)result + 4);
  if ((_DWORD)v3)
    v4 = a2 == result;
  else
    v4 = 1;
  if (!v4)
  {
    if (v3 >= 3)
    {
      v7 = (unsigned int *)result;
      v8 = (void **)(a2 + 1);
      result = (const void **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 1), (uint64_t)(a2 + 3), v3, 32);
      v6 = v7[4];
      if (!(_DWORD)v6)
        goto LABEL_8;
      result = (const void **)v7;
      v2 = *v8;
    }
    else
    {
      v6 = *((unsigned int *)result + 4);
    }
    result = (const void **)memcpy(v2, result[1], 32 * v6);
LABEL_8:
    *((_DWORD *)a2 + 4) = v3;
  }
  return result;
}

void sub_1C4A4BDD0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 24))
    free(v2);
}

void sub_1C4A4BDEC(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[1];
  if (v2 != __p + 3)
    free(v2);
  operator delete(__p);
}

void sub_1C4A4BE20(uint64_t a1, llvm::MachineFunction **a2)
{
  llvm::MachineInstr::addOperand(a2[1], *a2, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 8) + 32));
}

uint64_t sub_1C4A4BE30(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t *v19;
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v23;
  llvm::MachineFunction *v24;
  llvm::MachineInstr *v25;
  llvm::MachineFunction *v26;
  llvm::MachineFunction *v28[2];
  int v29[23];
  char v30;
  int v31[23];
  char v32;
  int v33[23];
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  __int16 ***v38;
  int v39;
  _DWORD v40[4];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v13 = *a1;
  if (!*(_BYTE *)(a5 + 32))
  {
    *(_DWORD *)a5 = 1;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_BYTE *)(a5 + 32) = 1;
  }
  v14 = 1;
  sub_1C4A3C18C((uint64_t)v33, (uint64_t)a1[1], v13[10], v13[11], a6, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)v31, (uint64_t)a1[1], v13[10], v13[11], a7, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)v29, (uint64_t)a1[1], v13[10], v13[11], (unsigned __int8 *)a5, 0, 0, 0, 1u);
  v15 = a1[1];
  v16 = operator new(0x28uLL);
  *v16 = &off_1E7FABB20;
  v16[1] = sub_1C4A3FE10;
  v16[2] = 0;
  v16[3] = v13;
  v16[4] = v15;
  sub_1C4A45938(v33, (uint64_t)v16);
  (*(void (**)(_QWORD *))(*v16 + 40))(v16);
  v17 = a1[1];
  v18 = operator new(0x28uLL);
  *v18 = &off_1E7FABB20;
  v18[1] = sub_1C4A3FE10;
  v18[2] = 0;
  v18[3] = v13;
  v18[4] = v17;
  sub_1C4A45938(v31, (uint64_t)v18);
  (*(void (**)(_QWORD *))(*v18 + 40))(v18);
  v19 = a1[1];
  v20 = operator new(0x28uLL);
  *v20 = &off_1E7FABB20;
  v20[1] = sub_1C4A3FE10;
  v20[2] = 0;
  v20[3] = v13;
  v20[4] = v19;
  sub_1C4A45938(v29, (uint64_t)v20);
  (*(void (**)(_QWORD *))(*v20 + 40))(v20);
  v40[0] = 0;
  if ((v29[20] & 0xFFFFFFFE) != 4)
  {
    if (v29[22] == 32)
    {
      v14 = 0;
    }
    else if (v30)
    {
      v14 = 21;
    }
    else
    {
      v14 = 2;
    }
  }
  v40[1] = v14;
  if ((v33[20] & 0xFFFFFFFE) == 4)
  {
    v21 = 1;
  }
  else if (v33[22] == 32)
  {
    v21 = 0;
  }
  else if (v34)
  {
    v21 = 21;
  }
  else
  {
    v21 = 2;
  }
  v40[2] = v21;
  v22 = 1;
  if ((v31[20] & 0xFFFFFFFE) != 4)
  {
    if (v31[22] == 32)
    {
      v22 = 0;
    }
    else if (v32)
    {
      v22 = 21;
    }
    else
    {
      v22 = 2;
    }
  }
  v40[3] = v22;
  v23 = sub_1C4C640F8(a3, 4, v40);
  v38 = &off_1E7FB1568;
  v39 = 2;
  v24 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v23, &v38, 1, 0, 0, a4 | 0x100000000);
  v26 = v25;
  v35 = 1;
  v36 = 0;
  v37 = 0;
  llvm::MachineInstr::addOperand(v25, v24, (const llvm::MachineOperand *)&v35);
  v28[0] = v24;
  v28[1] = v26;
  sub_1C48B7F84(v28, (uint64_t)v29);
  sub_1C48B7F84(v28, (uint64_t)v33);
  sub_1C48B7F84(v28, (uint64_t)v31);
  v35 = 1;
  v36 = 0;
  v37 = 32;
  llvm::MachineInstr::addOperand(v26, v24, (const llvm::MachineOperand *)&v35);
  sub_1C554AE8C(v26, v13[9], (_QWORD *)v13[10]);
  return *((_QWORD *)v26 + 4);
}

uint64_t sub_1C4A4C188(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  llvm::MachineFunction *v15;
  llvm::MachineInstr *v16;
  llvm::MachineInstr *v17;
  int v19[30];
  int v20[30];
  llvm::MachineFunction *v21;
  llvm::MachineInstr *v22;
  uint64_t v23;
  __int16 ***v24;
  int v25;
  _DWORD v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t *)a1[1];
  sub_1C4A3C18C((uint64_t)v20, *a1, v9[10], v9[11], a4, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)v19, *a1, v9[10], v9[11], a5, 0, 0, 0, 1u);
  v10 = *a1;
  v11 = operator new(0x28uLL);
  *v11 = &off_1E7FABB20;
  v11[1] = sub_1C4A3FE10;
  v11[2] = 0;
  v11[3] = v9;
  v11[4] = v10;
  sub_1C4A45938(v20, (uint64_t)v11);
  (*(void (**)(_QWORD *))(*v11 + 40))(v11);
  v12 = *a1;
  v13 = operator new(0x28uLL);
  *v13 = &off_1E7FABB20;
  v13[1] = sub_1C4A3FE10;
  v13[2] = 0;
  v13[3] = v9;
  v13[4] = v12;
  sub_1C4A45938(v19, (uint64_t)v13);
  (*(void (**)(_QWORD *))(*v13 + 40))(v13);
  v26[0] = 0;
  v26[1] = v20[20] > 3;
  v26[2] = v19[20] > 3;
  v14 = sub_1C4C640F8(90, 3, v26);
  v24 = &off_1E7FB1568;
  v25 = 2;
  v15 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, __int16 ****, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v14, &v24, 1, 0, 0, a3 | 0x100000000);
  v17 = v16;
  LODWORD(v21) = 1;
  v22 = 0;
  v23 = 0;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v21);
  v21 = v15;
  v22 = v17;
  sub_1C48B7F84(&v21, (uint64_t)v20);
  sub_1C48B7F84(&v21, (uint64_t)v19);
  sub_1C554AE8C(v17, v9[9], (_QWORD *)v9[10]);
  return *((_QWORD *)v17 + 4);
}

uint64_t sub_1C4A4C390(uint64_t *a1, _QWORD *a2, unsigned int a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, int a8, int a9, int a10, unsigned __int8 a11)
{
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  void (**v22)(_QWORD *);
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void (**v26)(void);
  _QWORD *v27;
  uint64_t v28;
  void (**v29)(void);
  _QWORD *v30;
  void (**v31)(void);
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  llvm::MachineFunction *v35;
  unint64_t *v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (**v44)(void);
  uint64_t result;
  uint64_t (**v46)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  _OWORD v64[3];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _OWORD v70[3];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  int v76[30];
  int v77[30];
  uint64_t v78;
  uint64_t *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[3];
  _QWORD *v85;
  _QWORD v86[3];
  _QWORD *v87;
  _QWORD v88[3];
  _QWORD *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v16 = *(_QWORD *)(a2[1] + 40);
  sub_1C4A3C18C((uint64_t)v77, v16, a1[10], a1[11], a4, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)v76, v16, a1[10], a1[11], a5, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)v70, v16, a1[10], a1[11], a6, 0, 0, 0, 1u);
  sub_1C4A3C18C((uint64_t)v64, v16, a1[10], a1[11], a7, 0, 0, 0, 1u);
  v17 = operator new(0x28uLL);
  *v17 = &off_1E7FABB20;
  v17[1] = sub_1C4A3FE10;
  v17[2] = 0;
  v17[3] = a1;
  v17[4] = v16;
  v89 = v17;
  v18 = operator new(0x30uLL);
  *v18 = &off_1E7FABB68;
  v18[1] = sub_1C4A3D0C4;
  v18[2] = 0;
  v18[3] = a1;
  v18[4] = v16;
  *((_DWORD *)v18 + 10) = 0;
  *((_WORD *)v18 + 22) = 1;
  v87 = v18;
  v19 = (char *)operator new(0x28uLL);
  *(_QWORD *)v19 = &off_1E7FABB20;
  *(_OWORD *)(v19 + 8) = *(_OWORD *)(v17 + 1);
  *(_OWORD *)(v19 + 24) = *(_OWORD *)(v17 + 3);
  sub_1C4A45938(v77, (uint64_t)v19);
  (*(void (**)(char *))(*(_QWORD *)v19 + 40))(v19);
  if (v89)
  {
    if (v89 == v88)
    {
      v85 = v84;
      (*(void (**)(_QWORD *, _QWORD *))(v88[0] + 24))(v88, v84);
      v20 = (uint64_t)v85;
    }
    else
    {
      v20 = (*(uint64_t (**)(_QWORD *))(*v89 + 16))(v89);
      v85 = (_QWORD *)v20;
    }
  }
  else
  {
    v20 = 0;
    v85 = 0;
  }
  sub_1C4A45938(v76, v20);
  v21 = v85;
  if (v85 == v84)
  {
    v22 = (void (**)(_QWORD *))(v84[0] + 32);
    v21 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_11;
    v22 = (void (**)(_QWORD *))(*v85 + 40);
  }
  (*v22)(v21);
LABEL_11:
  if (a11)
    v23 = v88;
  else
    v23 = v86;
  v24 = (_QWORD *)v23[3];
  if (v24)
  {
    if (v24 == v23)
    {
      v83 = v82;
      (*(void (**)(_QWORD *, _QWORD *))(*v23 + 24))(v23, v82);
      v25 = (uint64_t)v83;
    }
    else
    {
      v25 = (*(uint64_t (**)(_QWORD *))(*v24 + 16))(v24);
      v83 = (_QWORD *)v25;
    }
  }
  else
  {
    v25 = 0;
    v83 = 0;
  }
  sub_1C4A45938((int *)v70, v25);
  if (v83 == v82)
  {
    v26 = (void (**)(void))(v82[0] + 32);
  }
  else
  {
    if (!v83)
      goto LABEL_24;
    v26 = (void (**)(void))(*v83 + 40);
  }
  (*v26)();
LABEL_24:
  v27 = (_QWORD *)v23[3];
  if (v27)
  {
    if (v27 == v23)
    {
      v81 = v80;
      (*(void (**)(_QWORD *, _QWORD *))(*v23 + 24))(v23, v80);
      v28 = (uint64_t)v81;
    }
    else
    {
      v28 = (*(uint64_t (**)(_QWORD *))(*v27 + 16))(v27);
      v81 = (_QWORD *)v28;
    }
  }
  else
  {
    v28 = 0;
    v81 = 0;
  }
  sub_1C4A45938((int *)v64, v28);
  if (v81 == v80)
  {
    v29 = (void (**)(void))(v80[0] + 32);
    goto LABEL_33;
  }
  if (v81)
  {
    v29 = (void (**)(void))(*v81 + 40);
LABEL_33:
    (*v29)();
  }
  v30 = operator new(0x30uLL);
  *v30 = &off_1E7FABB68;
  v30[1] = sub_1C4A3D0C4;
  v30[2] = 0;
  v30[3] = a1;
  v30[4] = v16;
  *((_DWORD *)v30 + 10) = 0;
  *((_WORD *)v30 + 22) = 256;
  if ((BYTE8(v72) && (BYTE8(v71) & 7) != 0 || (_DWORD)v73 == 5) && (int)v67 >= 4 && (_DWORD)v67 != 5)
  {
    sub_1C4A3C18C((uint64_t)&v56, v16, a1[10], a1[11], a7, 0, 0, 0, 0);
    v67 = v61;
    v68 = v62;
    v64[0] = v56;
    v64[1] = v57;
    v64[2] = v58;
    v69 = v63;
    v65 = v59;
    v66 = v60;
    v79 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v30 + 16))(v30);
    sub_1C4A45938((int *)v64, (uint64_t)v79);
    if (v79 == &v78)
    {
      v31 = (void (**)(void))(v78 + 32);
      goto LABEL_43;
    }
    if (v79)
    {
      v31 = (void (**)(void))(*v79 + 40);
LABEL_43:
      (*v31)();
    }
  }
  if ((BYTE8(v66) && (BYTE8(v65) & 7) != 0 || (_DWORD)v67 == 5) && (int)v73 >= 4 && (_DWORD)v73 != 5)
  {
    sub_1C4A3C18C((uint64_t)&v56, v16, a1[10], a1[11], a6, 0, 0, 0, 0);
    v72 = v60;
    v73 = v61;
    v74 = v62;
    v75 = v63;
    v70[0] = v56;
    v70[1] = v57;
    v70[2] = v58;
    v71 = v59;
    v32 = (*(uint64_t (**)(_QWORD *))(*v30 + 16))(v30);
    sub_1C4A45938((int *)v70, v32);
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
  }
  v33 = sub_1C4A4CBD8(1, a8, a11, v77[20], v77[22], v76[20], v76[22], (uint64_t)v70, (uint64_t)v64);
  v35 = sub_1C55437B8(a2, v33);
  v36 = (unint64_t *)v34;
  v37 = (unint64_t *)a2[6];
  v38 = *(_QWORD *)(a2[5] + 40);
  *(_QWORD *)(v34 + 24) = v38;
  v39 = *(_QWORD *)(v38 + 32);
  v40 = *(unsigned int *)(v34 + 40);
  if ((_DWORD)v40)
  {
    v47 = *(_QWORD *)(v34 + 32);
    v48 = *(_QWORD *)(v39 + 40);
    v49 = 32 * v40;
    do
    {
      if (!*(_BYTE *)v47)
      {
        v50 = *(unsigned int *)(v47 + 4);
        if ((int)v50 >= 0)
          v51 = (uint64_t *)(*(_QWORD *)(v48 + 272) + 8 * v50);
        else
          v51 = (uint64_t *)(*(_QWORD *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
        v52 = *v51;
        if (*v51)
        {
          v53 = *(_QWORD *)(v52 + 16);
          *(_QWORD *)(v52 + 16) = v47;
          *(_QWORD *)(v47 + 16) = v53;
          if ((*(_BYTE *)(v47 + 3) & 1) != 0)
          {
            *(_QWORD *)(v47 + 24) = v52;
          }
          else
          {
            *(_QWORD *)(v47 + 24) = 0;
            v51 = (uint64_t *)(v53 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v47 + 16) = v47;
          *(_QWORD *)(v47 + 24) = 0;
        }
        *v51 = v47;
      }
      v47 += 32;
      v49 -= 32;
    }
    while (v49);
  }
  v41 = *(_QWORD *)(v39 + 728);
  if (v41)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 24))(v41, v34);
  v42 = *v37 & 0xFFFFFFFFFFFFFFF8;
  *v36 = v42 | *v36 & 7;
  v36[1] = (unint64_t)v37;
  *(_QWORD *)(v42 + 8) = v36;
  *v37 = *v37 & 7 | (unint64_t)v36;
  v43 = a2[7];
  if (v43)
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v43 + 24))(v43, v36);
  *((_QWORD *)&v56 + 1) = 0;
  v57 = 0uLL;
  LODWORD(v56) = 0x1000000;
  DWORD1(v56) = a9;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v35, (const llvm::MachineOperand *)&v56);
  LODWORD(v56) = 1;
  *((_QWORD *)&v56 + 1) = 0;
  *(_QWORD *)&v57 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v35, (const llvm::MachineOperand *)&v56);
  LODWORD(v56) = 1;
  *((_QWORD *)&v56 + 1) = 0;
  *(_QWORD *)&v57 = a3;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v35, (const llvm::MachineOperand *)&v56);
  *(_QWORD *)&v56 = v35;
  *((_QWORD *)&v56 + 1) = v36;
  sub_1C48B7F84((llvm::MachineFunction **)&v56, (uint64_t)v77);
  sub_1C48B7F84((llvm::MachineFunction **)&v56, (uint64_t)v76);
  sub_1C48B7F84((llvm::MachineFunction **)&v56, (uint64_t)v70);
  sub_1C48B7F84((llvm::MachineFunction **)&v56, (uint64_t)v64);
  sub_1C554AE8C(v36, a1[9], (_QWORD *)a1[10]);
  (*(void (**)(_QWORD *))(*v30 + 40))(v30);
  if (v87 == v86)
  {
    v44 = (void (**)(void))(v86[0] + 32);
  }
  else
  {
    if (!v87)
      goto LABEL_61;
    v44 = (void (**)(void))(*v87 + 40);
  }
  (*v44)();
LABEL_61:
  result = (uint64_t)v89;
  if (v89 == v88)
  {
    v46 = (uint64_t (**)(void))(v88[0] + 32);
  }
  else
  {
    if (!v89)
      return result;
    v46 = (uint64_t (**)(void))(*v89 + 40);
  }
  return (*v46)();
}

void sub_1C4A4CB30()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A4CB44(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7FABB20;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C4A4CB84(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7FABB20;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4A4CBAC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t, uint64_t);
  _QWORD *v5;

  v3 = a1[2];
  v4 = (uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))a1[1];
  v5 = (_QWORD *)(a1[3] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*v5 + v4);
  return v4(v5, a1[4], a2, a3);
}

uint64_t sub_1C4A4CBD8(int a1, int a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  int v9;
  _BOOL4 v11;
  int v13;
  int v14;
  int v16;
  int8x8_t v17;
  int8x8_t v18;
  int8x8_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v24;
  int8x8_t v25;
  int v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a8 + 72))
  {
    v9 = *(_DWORD *)(a8 + 80);
    if ((*(_BYTE *)(a8 + 56) & 7) != 0 || v9 == 5)
      goto LABEL_12;
  }
  else
  {
    v9 = *(_DWORD *)(a8 + 80);
    if (v9 == 5)
    {
      v11 = 1;
LABEL_15:
      if (v9 == 5 || v11)
        v13 = 9;
      else
        v13 = 1;
      goto LABEL_22;
    }
  }
  if (*(_BYTE *)(a9 + 72) && (*(_BYTE *)(a9 + 56) & 7) != 0)
  {
LABEL_12:
    v11 = 1;
    goto LABEL_14;
  }
  v11 = *(_DWORD *)(a9 + 80) == 5;
LABEL_14:
  if (v9 >= 4)
    goto LABEL_15;
  v13 = 2 * (*(_DWORD *)(a8 + 88) == 16);
LABEL_22:
  v14 = *(_DWORD *)(a9 + 80);
  if (v14 < 4)
  {
    v16 = 2 * (*(_DWORD *)(a9 + 88) == 16);
  }
  else if (v14 == 5 || v11)
  {
    v16 = 9;
  }
  else
  {
    v16 = 1;
  }
  v17 = (int8x8_t)vcgt_s32((int32x2_t)__PAIR64__(a6, a4), (int32x2_t)0x300000003);
  v18 = (int8x8_t)vceq_s32((int32x2_t)__PAIR64__(a6, a4), (int32x2_t)0x500000005);
  v19 = (int8x8_t)vceq_s32((int32x2_t)__PAIR64__(a7, a5), (int32x2_t)0x1000000010);
  if (a2)
    v20 = 38;
  else
    v20 = 39;
  if (a2)
    v21 = 0;
  else
    v21 = 2;
  if (!a3)
    v20 = v21;
  v24 = v20;
  v25 = vorr_s8(vand_s8((int8x8_t)vsub_s32((int32x2_t)vand_s8(v18, (int8x8_t)0x900000009), (int32x2_t)vmvn_s8(v18)), v17), vand_s8(vbic_s8(v19, v17), (int8x8_t)0x200000002));
  v26 = v13;
  v27 = v16;
  if (a1)
    v22 = 88;
  else
    v22 = 59;
  return sub_1C4C640F8(v22, 5, &v24);
}

void sub_1C4A4CD80(uint64_t a1, unint64_t a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v13;
  _BOOL4 v15;
  _BOOL4 v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  llvm::MachineInstr *v35;
  llvm::MachineFunction *v36;
  llvm::MachineInstr *v37;
  llvm::MachineFunction *v38;
  llvm::MachineInstr *v39;
  llvm::MachineInstr *v40;
  llvm::MachineInstr *v41;
  llvm::MachineFunction *v42;
  uint64_t v43[4];
  unsigned __int8 *v44[5];
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (a3 >= 2 && a4)
  {
    v48 = v9;
    v49 = v10;
    v13 = a7 == 3 || a8 == 0;
    if ((a2 & 4) == 0)
      v13 = 0;
    v15 = (a4 - 4) < 0xFFFFFFFE || a6 == 0;
    v16 = a3 - 3 <= 2 && v15;
    v17 = (a2 & 1) != 0 && v16;
    if (a5)
      v18 = a7 == 0;
    else
      v18 = 0;
    v19 = a4 & 0xFFFFFFFE;
    v20 = a2 & 4;
    v22 = v18 && v20 != 0;
    if ((a2 & 4) != 0 || v19 == 2 || a9)
    {
      if (a9)
        v23 = 414;
      else
        v23 = 9187;
      if ((a2 & 5) != 0)
      {
        if (a3 == 2)
        {
          LODWORD(v24) = 0;
          v25 = 6;
        }
        else if (a3 == 3)
        {
          LODWORD(v24) = 0;
          v25 = 8;
        }
        else
        {
          v24 = (a2 >> 2) & 1;
          v25 = 10;
          if ((a2 & 4) != 0)
            v25 = 0;
        }
      }
      else if (a3 == 2)
      {
        v25 = 0;
        LODWORD(v24) = 0;
      }
      else
      {
        LODWORD(v24) = 0;
        if (a3 == 3)
          v25 = 2;
        else
          v25 = 4;
      }
      if (a4 == 1)
        v17 = 1;
      if (v22 | v17)
        v26 = v25 | 0x10;
      else
        v26 = v25;
      if (v19 == 2 || v20 != 0)
        v26 |= 0x20uLL;
      if (a4 == 3)
        v13 = 1;
      if (v13)
        v28 = v26 | 0x40;
      else
        v28 = v26;
      v29 = ((_DWORD)a2 << 6) & 0x200 | ((a2 & 3) << 7) | (v20 << 8);
      v30 = *(_QWORD *)(a1 + 24);
      v44[4] = 0;
      v31 = *(_QWORD *)(v30 + 32);
      v43[0] = (uint64_t)&off_1E816EC08;
      v43[1] = v31;
      v43[3] = *(_QWORD *)(v31 + 40);
      v43[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v31 + 16) + 104))(*(_QWORD *)(v31 + 16));
      v32 = *(unsigned __int8 **)(a1 + 24);
      v44[2] = (unsigned __int8 *)a1;
      v44[3] = 0;
      v44[0] = 0;
      v44[1] = v32;
      if ((unsigned __int8 **)(a1 + 56) != v44)
      {
        v33 = *(unsigned __int8 **)(a1 + 56);
        v44[0] = v33;
        if (v33)
          llvm::MetadataTracking::track((uint64_t)v44, v33, 2);
      }
      v34 = v28 | v29;
      v36 = (llvm::MachineFunction *)sub_1C5548620(v43, v23, 0, 0, 0, 0, 0);
      v37 = v35;
      if ((_DWORD)v24)
      {
        v45 = 1;
        v46 = 0;
        v47 = 0;
        llvm::MachineInstr::addOperand(v35, v36, (const llvm::MachineOperand *)&v45);
        v45 = 1;
        v46 = 0;
        v47 = v34 | 8;
        llvm::MachineInstr::addOperand(v37, v36, (const llvm::MachineOperand *)&v45);
        v38 = (llvm::MachineFunction *)sub_1C5548620(v43, v23, 0, 0, 0, 0, 0);
        v40 = v39;
        v45 = 1;
        v46 = 0;
        v47 = 0;
        llvm::MachineInstr::addOperand(v39, v38, (const llvm::MachineOperand *)&v45);
        v45 = 1;
        v46 = 0;
        v47 = v34 | 6;
        v41 = v40;
        v42 = v38;
      }
      else
      {
        v45 = 1;
        v46 = 0;
        v47 = 0;
        llvm::MachineInstr::addOperand(v35, v36, (const llvm::MachineOperand *)&v45);
        v45 = 1;
        v46 = 0;
        v47 = v34;
        v41 = v37;
        v42 = v36;
      }
      llvm::MachineInstr::addOperand(v41, v42, (const llvm::MachineOperand *)&v45);
      v43[0] = (uint64_t)&off_1E816EC08;
      if (v44[0])
        llvm::MetadataTracking::untrack((uint64_t)v44, v44[0]);
    }
  }
}

void sub_1C4A4D08C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4A4D0A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E7FABB68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1C4A4D0E8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7FABB68;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C4A4D118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  _QWORD *v5;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 8);
  v5 = (_QWORD *)(*(_QWORD *)(a1 + 24) + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*v5 + v4);
  return v4(v5, *(_QWORD *)(a1 + 32), a2, a3, *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 44), *(unsigned __int8 *)(a1 + 45));
}

uint64_t sub_1C4A4D150(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  char v10;
  char v11;
  unsigned __int8 v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t (**v24)();
  int v25;
  uint64_t *v26;
  llvm::MachineFunction *v27;
  llvm::MachineInstr *v28;
  llvm::MachineInstr *v29;
  const char *v30;
  uint64_t v31;
  uint64_t *v32;
  llvm::MachineInstr *v33;
  llvm::MachineInstr *v34;
  uint64_t v35;
  unsigned int IncompleteVirtualRegister;
  int v37;
  uint64_t *v38;
  void (**v39)(uint64_t *);
  uint64_t (***v40)();
  void (**v41)(uint64_t (***)());
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t (**v45)();
  const char *v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  llvm::MachineFunction *v52;
  llvm::MachineInstr *v53;
  int v54;
  int64_t v55;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  llvm::MachineFunction *v65;
  llvm::MachineInstr *v66;
  llvm::MachineInstr *v67;
  size_t v69;
  void *v70;
  void *__src;
  unsigned int v72;
  char v73;
  uint64_t v74;
  _QWORD *(*v75)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t *v76;
  uint64_t (**v77)();
  BOOL (*v78)(_BOOL8);
  uint64_t v79;
  unint64_t *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v8 = a1[1];
  v9 = sub_1C554C050(a2, *a1);
  v11 = v10;
  v12 = sub_1C554C050(a3, *a1);
  if (v11)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    v17 = *((_QWORD *)sub_1C4A3EBBC(v8, a1[2], 129, v9 | ((unint64_t)v12 << 8), 0) + 4);
LABEL_33:
    IncompleteVirtualRegister = *(_DWORD *)(v17 + 4);
    return IncompleteVirtualRegister | 0x100000000;
  }
  v15 = *a1;
  if ((a3 & 0x80000000) != 0)
    v16 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  else
    v16 = (uint64_t *)(*(_QWORD *)(v15 + 272) + 8 * a3);
  v18 = *v16;
  if (v18 && ((*(_BYTE *)(v18 + 3) & 1) != 0 || (v18 = *(_QWORD *)(v18 + 24)) != 0 && (*(_BYTE *)(v18 + 3) & 1) != 0))
  {
    v19 = *(_QWORD *)(v18 + 8);
    if ((a2 & 0x80000000) != 0)
      goto LABEL_16;
  }
  else
  {
    v19 = 0;
    if ((a2 & 0x80000000) != 0)
    {
LABEL_16:
      v20 = (uint64_t *)(*(_QWORD *)(v15 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
      goto LABEL_17;
    }
  }
  v20 = (uint64_t *)(*(_QWORD *)(v15 + 272) + 8 * a2);
LABEL_17:
  v21 = *v20;
  if (v21 && ((*(_BYTE *)(v21 + 3) & 1) != 0 || (v21 = *(_QWORD *)(v21 + 24)) != 0 && (*(_BYTE *)(v21 + 3) & 1) != 0))
    v22 = *(_QWORD *)(v21 + 8);
  else
    v22 = 0;
  v23 = **(unsigned __int16 **)(v19 + 16);
  if (v23 == 68)
  {
    if ((a2 & 0x80000000) != 0 && (a2 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v15 + 432))
      v24 = *(uint64_t (***)())(*(_QWORD *)(v15 + 424) + 8 * (a2 & 0x7FFFFFFF));
    else
      v24 = 0;
    v77 = v24;
    v31 = sub_1C4825F50((unint64_t *)&v77);
    if ((_DWORD)v30 == 1)
    if (v31 == 16)
    {
      v32 = (uint64_t *)a1[3];
      v74 = 4194324;
      LODWORD(v75) = 0;
      LODWORD(v77) = a2;
      LODWORD(v79) = 0;
      sub_1C5546EF4(v32, &v74, (int *)&v77);
      v34 = v33;
      v35 = *(unsigned int *)(a4 + 8);
      if (v35 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v35 + 1, 8);
        LODWORD(v35) = *(_DWORD *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v35) = v34;
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_32;
    }
    goto LABEL_79;
  }
  v25 = **(unsigned __int16 **)(v22 + 16);
  if (v25 == 68)
  {
    v26 = (uint64_t *)a1[3];
    v74 = (uint64_t)&off_1E7FB1B88;
    LODWORD(v75) = 2;
    v27 = (llvm::MachineFunction *)sub_1C5548620(v26, 7111, &v74, 1, 0, 0, 0);
    v29 = v28;
    LODWORD(v77) = 1;
    v78 = 0;
    v79 = 0;
    llvm::MachineInstr::addOperand(v28, v27, (const llvm::MachineOperand *)&v77);
    LODWORD(v77) = 1;
    v78 = 0;
    v79 = 0;
    llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v77);
    v78 = 0;
    v79 = 0;
    LODWORD(v77) = 0;
    HIDWORD(v77) = a3;
    v80 = 0;
    llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v77);
    LODWORD(v77) = 1;
    v78 = 0;
    v79 = 0;
    llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v77);
    LODWORD(v77) = 1;
    v78 = 0;
    v79 = 8;
    llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v77);
    LODWORD(v77) = 1;
    v78 = 0;
    v79 = 8;
    llvm::MachineInstr::addOperand(v29, v27, (const llvm::MachineOperand *)&v77);
    sub_1C554AE8C(v29, *(_QWORD *)(v8 + 72), *(_QWORD **)(v8 + 80));
    v17 = *((_QWORD *)v29 + 4);
    goto LABEL_33;
  }
  if (v23 != 128)
  {
    if (v23 == 271 && v25 == 271)
    {
      IncompleteVirtualRegister = *(_DWORD *)(*(_QWORD *)(v22 + 32) + 36);
      if ((IncompleteVirtualRegister & 0x80000000) != 0
        && (IncompleteVirtualRegister & 0x7FFFFFFF) < *(_DWORD *)(v15 + 432))
      {
        v45 = *(uint64_t (***)())(*(_QWORD *)(v15 + 424) + 8 * (IncompleteVirtualRegister & 0x7FFFFFFF));
      }
      else
      {
        v45 = 0;
      }
      v77 = v45;
      v47 = sub_1C4825F50((unint64_t *)&v77);
      if ((_DWORD)v46 == 1)
      v48 = *(_DWORD **)(v19 + 32);
      if (v48[9] == IncompleteVirtualRegister)
      {
        v49 = *(_QWORD *)(v22 + 32);
        if (*(_DWORD *)(v49 + 112) == 8 && v48[28] == 8)
        {
          v50 = *(_DWORD *)(v49 + 80);
          if ((v50 & 1) == 0 && v50 + 1 == v48[20])
          {
            if (v47 == 16)
              return IncompleteVirtualRegister | 0x100000000;
            if (v47 == 32)
            {
              v51 = (uint64_t *)a1[3];
              v74 = (uint64_t)&off_1E7FB1B88;
              LODWORD(v75) = 2;
              v52 = (llvm::MachineFunction *)sub_1C5548620(v51, 19, &v74, 1, 0, 0, 0);
              v34 = v53;
              v78 = 0;
              v79 = 0;
              v80 = 0;
              LODWORD(v77) = ((v50 << 7) + 256) & 0xFFF00;
              HIDWORD(v77) = IncompleteVirtualRegister;
              llvm::MachineInstr::addOperand(v53, v52, (const llvm::MachineOperand *)&v77);
LABEL_32:
              v17 = *((_QWORD *)v34 + 4);
              goto LABEL_33;
            }
          }
        }
      }
    }
    goto LABEL_79;
  }
  v37 = *(_DWORD *)(*(_QWORD *)(v19 + 32) + 68);
  v77 = &off_1E816EFF0;
  v78 = sub_1C554C7E0;
  v80 = (unint64_t *)&v77;
  v74 = (uint64_t)&off_1E816F038;
  v75 = sub_1C554C7F8;
  v76 = &v74;
  sub_1C554C3AC(v37, v15, (uint64_t)&v77, (uint64_t)&v74, 0, 0, &__src);
  v38 = v76;
  if (v76 == &v74)
  {
    v39 = (void (**)(uint64_t *))(v74 + 32);
    v38 = &v74;
LABEL_37:
    (*v39)(v38);
    goto LABEL_38;
  }
  if (v76)
  {
    v39 = (void (**)(uint64_t *))(*v76 + 40);
    goto LABEL_37;
  }
LABEL_38:
  v40 = (uint64_t (***)())v80;
  if (v80 == (unint64_t *)&v77)
  {
    v41 = (void (**)(uint64_t (***)()))(v77 + 4);
    v40 = &v77;
  }
  else
  {
    if (!v80)
      goto LABEL_41;
    v41 = (void (**)(uint64_t (***)()))(*v80 + 40);
  }
  (*v41)(v40);
LABEL_41:
  if (!v73)
  {
LABEL_79:
    v62 = *a1;
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*a1, "", 0);
    *(_QWORD *)(*(_QWORD *)(v62 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FB1B88;
    v63 = *(_QWORD *)(v62 + 8);
    if (v63)
      (*(void (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63);
    v64 = (uint64_t *)a1[3];
    LODWORD(v74) = IncompleteVirtualRegister;
    LODWORD(v75) = 1;
    v65 = (llvm::MachineFunction *)sub_1C5548620(v64, 7129, &v74, 1, 0, 0, 0);
    v67 = v66;
    LODWORD(v77) = 1;
    v78 = 0;
    v79 = 0;
    llvm::MachineInstr::addOperand(v66, v65, (const llvm::MachineOperand *)&v77);
    v78 = 0;
    v79 = 0;
    LODWORD(v77) = 0;
    HIDWORD(v77) = a2;
    v80 = 0;
    llvm::MachineInstr::addOperand(v67, v65, (const llvm::MachineOperand *)&v77);
    LODWORD(v77) = 1;
    v78 = 0;
    v79 = 0;
    llvm::MachineInstr::addOperand(v67, v65, (const llvm::MachineOperand *)&v77);
    v78 = 0;
    v79 = 0;
    LODWORD(v77) = 0;
    HIDWORD(v77) = a3;
    v80 = 0;
    llvm::MachineInstr::addOperand(v67, v65, (const llvm::MachineOperand *)&v77);
    LODWORD(v77) = 1;
    v78 = 0;
    v79 = 0;
    llvm::MachineInstr::addOperand(v67, v65, (const llvm::MachineOperand *)&v77);
    LODWORD(v77) = 1;
    v78 = 0;
    v79 = 8;
    llvm::MachineInstr::addOperand(v67, v65, (const llvm::MachineOperand *)&v77);
    LODWORD(v77) = 1;
    v78 = 0;
    v79 = 8;
    llvm::MachineInstr::addOperand(v67, v65, (const llvm::MachineOperand *)&v77);
    sub_1C554AE8C(v67, *(_QWORD *)(v8 + 72), *(_QWORD **)(v8 + 80));
    return IncompleteVirtualRegister | 0x100000000;
  }
  v42 = v72;
  if (v72 > 0x40)
  {
    v69 = (((unint64_t)v72 + 63) >> 3) & 0x3FFFFFF8;
    v43 = (_QWORD *)operator new[]();
    v70 = __src;
    memcpy(v43, __src, v69);
    if (v70)
      MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
  }
  else
  {
    v43 = __src;
  }
  if (*(_DWORD *)(*(_QWORD *)(v19 + 32) + 36) != a2)
    goto LABEL_76;
  if (v42 > 0x40)
  {
    v54 = 0;
    v55 = (unint64_t)(v42 + 63) >> 6;
    do
    {
      if (v55-- < 1)
        break;
      v57 = v43[v55];
      v54 += __clz(v57);
    }
    while (!v57);
    v58 = v42 | 0xFFFFFFC0;
    if ((v42 & 0x3F) == 0)
      v58 = 0;
    if ((v42 - v54 - v58) > 0x40)
      goto LABEL_76;
    v44 = (_QWORD *)*v43;
  }
  else
  {
    v44 = v43;
  }
  if (v44 != (_QWORD *)8)
  {
LABEL_76:
    if (v42 >= 0x41 && v43)
      MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
    goto LABEL_79;
  }
  v59 = *a1;
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*a1, "", 0);
  *(_QWORD *)(*(_QWORD *)(v59 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FB1B88;
  v60 = *(_QWORD *)(v59 + 8);
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
  v61 = a1[3];
  LODWORD(v74) = IncompleteVirtualRegister;
  LODWORD(v75) = 1;
  LODWORD(v77) = a2;
  LODWORD(v79) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t (***)(), uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 19, &v74, 1, &v77, 1, 0);
  if (v42 >= 0x41 && v43)
    MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
  return IncompleteVirtualRegister | 0x100000000;
}

uint64_t sub_1C4A4D990(uint64_t a1, uint64_t a2, BOOL *a3, _DWORD *a4, const llvm::MachineOperand **a5, const llvm::MachineOperand **a6, int *a7, int *a8)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _BOOL4 v13;
  const llvm::MachineOperand *v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v27;

  if (*(_BYTE *)a2)
    return 0;
  v8 = *(unsigned int *)(a2 + 4);
  v9 = (uint64_t *)((int)v8 >= 0 ? *(_QWORD *)(a1 + 272) + 8 * v8 : *(_QWORD *)(a1 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  v10 = *v9;
  if (!v10)
    return 0;
  if ((*(_BYTE *)(v10 + 3) & 1) == 0)
  {
    v10 = *(_QWORD *)(v10 + 24);
    if (!v10 || (*(_BYTE *)(v10 + 3) & 1) == 0)
      return 0;
  }
  v12 = *(_QWORD *)(v10 + 8);
  if (!v12 || **(_WORD **)(v12 + 16) != 51)
    return 0;
  v27 = 0;
  v13 = sub_1C4A4DB84(*(_DWORD *)(*(_QWORD *)(v12 + 32) + 48), 0, a3, &v27, a4);
  result = 0;
  if (v13)
  {
    *a5 = (const llvm::MachineOperand *)(*(_QWORD *)(v12 + 32) + 64);
    v14 = (const llvm::MachineOperand *)(*(_QWORD *)(v12 + 32) + 96);
    *a6 = v14;
    result = sub_1C4A4DCE8(a1, (int *)(*(_QWORD *)(v12 + 32) + 128), *a5, v14, 0, 0, a7);
    if ((_DWORD)result)
    {
      result = sub_1C4A4DCE8(a1, (int *)(*(_QWORD *)(v12 + 32) + 160), *a5, *a6, 0, 0, a8);
      if ((_DWORD)result)
      {
        if (v27)
        {
          v15 = *a7;
          *a7 = *a8;
          *a8 = v15;
        }
        v16 = *(unsigned int *)(a2 + 4);
        if ((int)v16 >= 0)
          v17 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * v16);
        else
          v17 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (v16 & 0x7FFFFFFF) + 8);
        v18 = *v17;
        if (!v18)
          return 1;
        if ((*(_BYTE *)(v18 + 3) & 0x81) != 0)
        {
          do
          {
            v18 = *(_QWORD *)(v18 + 24);
            if (!v18)
              return 1;
          }
          while ((*(_DWORD *)v18 & 0x81000000) != 0);
        }
        v19 = *(_QWORD *)(v18 + 8);
LABEL_26:
        v20 = **(unsigned __int16 **)(v19 + 16);
        if (v20 == 335 || v20 == 51)
        {
          while (1)
          {
            v18 = *(_QWORD *)(v18 + 24);
            if (!v18)
              return 1;
            if ((*(_DWORD *)v18 & 0x81000000) == 0 && *(_QWORD *)(v18 + 8) != v19)
            {
              v19 = *(_QWORD *)(v18 + 8);
              goto LABEL_26;
            }
          }
        }
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_1C4A4DB84(unsigned int a1, int a2, BOOL *a3, char *a4, _DWORD *a5)
{
  unsigned int v5;
  char v6;
  signed int v7;
  int v8;
  char *v9;
  BOOL v10;

  v5 = a1;
  *a3 = a1 < 0x10;
  if (a1 >= 0x10)
    v5 = dword_1C676A46C[a1 - 32];
  if (a2)
    v5 = (v5 >> 1) & 2 | v5 & 0x19 | (4 * ((v5 >> 1) & 1));
  if (a1 <= 0xF)
  {
    *a4 = 0;
    v8 = 1;
    switch(v5)
    {
      case 0x11u:
        goto LABEL_16;
      case 0x12u:
        v8 = 2;
        goto LABEL_16;
      case 0x13u:
        v8 = 3;
        goto LABEL_16;
      case 0x14u:
        v8 = 4;
        goto LABEL_16;
      case 0x15u:
        v8 = 5;
        goto LABEL_16;
      default:
        v5 = 1;
        v6 = 1;
        goto LABEL_11;
    }
  }
  *a4 = 1;
  v7 = v5 - 11;
  if (v5 - 11 < 0xC && ((0xD0Du >> v7) & 1) != 0)
  {
    v8 = dword_1C676A494[v7];
  }
  else
  {
    v6 = 0;
LABEL_11:
    *a4 = v6;
    if (v5 > 0xF)
    {
      v8 = v5;
    }
    else
    {
      v8 = v5;
      if (((1 << v5) & 0x8181) != 0)
        goto LABEL_19;
    }
  }
LABEL_16:
  v9 = (char *)&unk_1C676A4DC + 4 * v8 - 36;
  if (*a3)
    v9 = (char *)&unk_1C676A4C4 + 4 * v8 - 4;
  *a5 = *(_DWORD *)v9;
  v5 = v8;
LABEL_19:
  if (v5)
    v10 = v5 - 7 > 1;
  else
    v10 = 0;
  return v10 && v5 != 15;
}

uint64_t sub_1C4A4DCE8(uint64_t a1, int *a2, const llvm::MachineOperand *a3, const llvm::MachineOperand *a4, const llvm::MachineOperand *a5, uint64_t a6, int *a7)
{
  int v14;
  unint64_t *v15;
  void (**v16)(unint64_t *);
  uint64_t (***v17)();
  void (**v18)(uint64_t (***)());
  int v19;
  _QWORD *v20;
  int v21;
  int64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  int64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  char v33;
  char v34;
  char v35;
  char isIdenticalTo;
  _QWORD *v38;
  unsigned int v39;
  unsigned __int8 v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t (**v45)();
  BOOL (*v46)(_BOOL8);
  uint64_t v47;
  uint64_t (***v48)();
  char v49;
  unint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  const llvm::APInt **v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v14 = a2[1];
  v45 = &off_1E816EFF0;
  v46 = sub_1C554C7E0;
  v48 = &v45;
  v50 = (unint64_t)&off_1E816F038;
  v51 = sub_1C554C7F8;
  v53 = (const llvm::APInt **)&v50;
  sub_1C554C3AC(v14, a1, (uint64_t)&v45, (uint64_t)&v50, 1, 0, &v38);
  v15 = (unint64_t *)v53;
  if (v53 == (const llvm::APInt **)&v50)
  {
    v16 = (void (**)(unint64_t *))(v50 + 32);
    v15 = &v50;
LABEL_3:
    (*v16)(v15);
    goto LABEL_4;
  }
  if (v53)
  {
    v16 = (void (**)(unint64_t *))((char *)*v53 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v17 = v48;
  if (v48 == &v45)
  {
    v18 = (void (**)(uint64_t (***)()))(v45 + 4);
    v17 = &v45;
LABEL_6:
    (*v18)(v17);
    goto LABEL_7;
  }
  if (v48)
  {
    v18 = (void (**)(uint64_t (***)()))(*v48 + 5);
    goto LABEL_6;
  }
LABEL_7:
  sub_1C554C99C(a2[1], a1, 1, (uint64_t)&v45);
  v19 = v40;
  if (!v40)
    goto LABEL_32;
  if (v39 < 0x41)
  {
    v20 = v38;
    if (v38)
    {
      if (v38 != (_QWORD *)1)
        goto LABEL_30;
LABEL_24:
      v30 = 8;
LABEL_57:
      *a7 = v30;
      a6 = 1;
      goto LABEL_58;
    }
LABEL_42:
    v30 = 7;
    goto LABEL_57;
  }
  v21 = 0;
  v22 = ((unint64_t)v39 + 63) >> 6;
  v23 = v22;
  do
  {
    v24 = v23-- < 1;
    if (v24)
      break;
    v25 = v38[v23];
    v21 += __clz(v25);
  }
  while (!v25);
  v26 = v39 | 0xFFFFFFC0;
  if ((v39 & 0x3F) == 0)
    v26 = 0;
  if (v39 - v21 - v26 < 0x41 && !*v38)
    goto LABEL_42;
  v27 = 0;
  v28 = ((unint64_t)v39 + 63) >> 6;
  do
  {
    v24 = v28-- < 1;
    if (v24)
      break;
    v29 = v38[v28];
    v27 += __clz(v29);
  }
  while (!v29);
  if (v39 - (v26 + v27) <= 0x40 && *v38 == 1)
    goto LABEL_24;
  v31 = 0;
  do
  {
    v24 = v22-- < 1;
    if (v24)
      break;
    v32 = v38[v22];
    v31 += __clz(v32);
  }
  while (!v32);
  if (v39 - (v26 + v31) > 0x40)
    goto LABEL_32;
  v20 = (_QWORD *)*v38;
LABEL_30:
  if (v20 == (_QWORD *)2)
  {
    v30 = 9;
    goto LABEL_57;
  }
LABEL_32:
  if (v49)
  {
    LODWORD(v51) = 64;
    v50 = 0;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v41, (const llvm::APInt **)&v50);
    v51 = v41;
    v52 = v42;
    LODWORD(v53) = v43;
    BYTE4(v53) = v44 & 0xF;
    llvm::APFloat::convert((uint64_t)&v50, v46, 1, &v41);
    v33 = sub_1C47ECB98((uint64_t)&v45, (uint64_t)&v50);
    if (v51 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74(&v52);
    }
    else if ((v51[2] - 64) <= 0xFFFFFF7F && v52)
    {
      MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
    }
    if ((v33 & 1) != 0)
    {
      v30 = 4;
      goto LABEL_57;
    }
    if (v49)
    {
      LODWORD(v51) = 64;
      v50 = 0x3FF0000000000000;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v41, (const llvm::APInt **)&v50);
      v51 = v41;
      v52 = v42;
      LODWORD(v53) = v43;
      BYTE4(v53) = v44 & 0xF;
      llvm::APFloat::convert((uint64_t)&v50, v46, 1, &v41);
      v34 = sub_1C47ECB98((uint64_t)&v45, (uint64_t)&v50);
      if (v51 == (_DWORD *)&unk_1C866F1C0)
      {
        sub_1C4773C74(&v52);
      }
      else if ((v51[2] - 64) <= 0xFFFFFF7F && v52)
      {
        MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
      }
      if ((v34 & 1) != 0)
      {
        v30 = 5;
        goto LABEL_57;
      }
      if (v49)
      {
        LODWORD(v51) = 64;
        v50 = 0xBFF0000000000000;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v41, (const llvm::APInt **)&v50);
        v51 = v41;
        v52 = v42;
        LODWORD(v53) = v43;
        BYTE4(v53) = v44 & 0xF;
        llvm::APFloat::convert((uint64_t)&v50, v46, 1, &v41);
        v35 = sub_1C47ECB98((uint64_t)&v45, (uint64_t)&v50);
        if (v51 == (_DWORD *)&unk_1C866F1C0)
        {
          sub_1C4773C74(&v52);
        }
        else if ((v51[2] - 64) <= 0xFFFFFF7F && v52)
        {
          MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
        }
        if ((v35 & 1) != 0)
        {
          v30 = 6;
          goto LABEL_57;
        }
      }
    }
  }
  if ((llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)a2, a3) & 1) != 0)
  {
    v30 = 1;
    goto LABEL_57;
  }
  if ((llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)a2, a4) & 1) != 0)
  {
    v30 = 2;
    goto LABEL_57;
  }
  if (a5 && (llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)a2, a5) & 1) != 0)
  {
    v30 = 3;
    goto LABEL_57;
  }
  if (a6)
  {
    isIdenticalTo = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)a2, (const llvm::MachineOperand *)a6);
    v30 = 0;
    a6 = 0;
    if ((isIdenticalTo & 1) != 0)
      goto LABEL_57;
  }
LABEL_58:
  if (v49)
  {
    if ((char *)v46 == (char *)&unk_1C866F1C0)
    {
      sub_1C4773C74(&v47);
    }
    else if ((*((_DWORD *)v46 + 2) - 64) <= 0xFFFFFF7F && v47)
    {
      MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
    }
  }
  if (v19 && v39 >= 0x41 && v38)
    MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
  return a6;
}

uint64_t sub_1C4A4E290(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v11 = 1;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      while (v6 != -4096)
      {
        if (v7)
          v9 = 0;
        else
          v9 = v6 == -8192;
        if (v9)
          v7 = v5;
        v10 = v4 + v8++;
        v4 = v10 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v11 = 1;
        if (*v5 == a3)
          goto LABEL_14;
      }
      v11 = 0;
      if (v7)
        v5 = v7;
    }
  }
  else
  {
    v5 = 0;
    v11 = 0;
  }
LABEL_14:
  *a4 = v5;
  return v11;
}

_QWORD *sub_1C4A4E324(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          sub_1C4A4E290(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          *v19 = *(_QWORD *)v13;
          v16 = *(_OWORD *)(v13 + 8);
          v15[3] = *(_QWORD *)(v13 + 24);
          *(_OWORD *)(v15 + 1) = v16;
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 24) = 0;
          *(_QWORD *)(v13 + 8) = 0;
          ++*(_DWORD *)(a1 + 8);
          if (*(char *)(v13 + 31) < 0)
            operator delete(*(void **)(v13 + 8));
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 32 * v17;
    do
    {
      *result = -4096;
      result += 4;
      v18 -= 32;
    }
    while (v18);
  }
  return result;
}

uint64_t sub_1C4A4E478(uint64_t a1, uint64_t a2, llvm::EVT ***a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  const char *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  llvm::EVT ***v19;
  llvm::EVT **v20;
  unsigned int v21;
  BOOL v22;
  llvm::EVT **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  const char *v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  BOOL v42;
  const char *v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  llvm::LLVMContext *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  const char *v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  llvm::EVT ***v59;
  llvm::EVT **v60;
  unsigned int v61;
  llvm::EVT **v62;
  unsigned int v63;
  __int16 v64;
  llvm::EVT ***v65;
  _QWORD *v66;
  int v67;
  llvm::EVT **v68;
  _QWORD *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  llvm::EVT *v73;
  llvm::FixedVectorType *v74;
  llvm::EVT ***v75;
  _QWORD *v76;
  int v77;
  llvm::EVT **v78;
  _QWORD *v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  llvm::EVT *v83;
  llvm::FixedVectorType *v84;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  llvm::EVT **v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  llvm::Type *v95;
  const char *v96;
  int v97;
  llvm::LLVMContext *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  llvm::EVT **v102;
  unsigned int v103;
  unint64_t v104;
  __int16 v105;
  uint64_t v106;
  llvm::EVT **v107;
  llvm::Type *v108;
  const char *v109;
  int PrimitiveSizeInBits;
  __int16 v111;
  llvm::EVT **v112;
  llvm::EVT *v113;
  uint64_t v114;
  llvm::EVT **v115;
  BOOL v116;
  unsigned int v117;
  uint64_t v119;
  llvm::EVT *v120;
  uint64_t v121;
  _DWORD *v122;
  int v123;
  _DWORD *v124;
  int v125;
  uint64_t ExtendedIntegerVT;
  int v127;
  _DWORD v128[8];
  unsigned int v129;
  unsigned int v130;

  v8 = 0;
  switch(a5)
  {
    case 1282:
    case 1285:
    case 1286:
    case 1289:
    case 1290:
    case 1293:
    case 1294:
    case 1297:
    case 1298:
    case 1301:
    case 1302:
    case 1305:
    case 1306:
    case 1309:
    case 1310:
    case 1313:
    case 1314:
    case 1317:
    case 1318:
    case 1321:
    case 1322:
    case 1325:
    case 1326:
    case 1329:
    case 1330:
    case 1333:
    case 1334:
    case 1337:
    case 1338:
    case 1341:
    case 1342:
    case 1345:
    case 1346:
    case 1349:
    case 1350:
    case 1353:
    case 1354:
    case 1357:
    case 1358:
    case 1361:
    case 1362:
    case 1365:
    case 1366:
    case 1369:
    case 1370:
    case 1373:
    case 1374:
    case 1376:
    case 1378:
    case 1380:
    case 1382:
    case 1384:
    case 1386:
    case 1388:
    case 1390:
    case 1393:
    case 1394:
    case 1397:
    case 1398:
    case 1401:
    case 1402:
    case 1405:
    case 1406:
    case 1409:
    case 1410:
    case 1413:
    case 1414:
    case 1417:
    case 1418:
    case 1421:
    case 1422:
    case 1425:
    case 1426:
    case 1429:
    case 1430:
    case 1433:
    case 1434:
    case 1437:
    case 1438:
    case 1441:
    case 1442:
    case 1445:
    case 1446:
    case 1449:
    case 1450:
    case 1453:
    case 1454:
    case 1457:
    case 1458:
    case 1461:
    case 1462:
    case 1465:
    case 1466:
    case 1469:
    case 1470:
    case 1473:
    case 1474:
    case 1476:
    case 1478:
    case 1480:
    case 1482:
    case 1484:
    case 1486:
    case 1488:
    case 1490:
    case 1493:
    case 1494:
    case 1497:
    case 1498:
    case 1501:
    case 1502:
    case 1505:
    case 1506:
    case 1509:
    case 1510:
    case 1513:
    case 1514:
    case 1517:
    case 1518:
    case 1521:
    case 1522:
    case 1525:
    case 1526:
    case 1529:
    case 1530:
    case 1532:
    case 1534:
    case 1536:
    case 1538:
    case 1540:
    case 1542:
    case 1544:
    case 1546:
    case 1548:
    case 1550:
    case 1552:
    case 1554:
    case 1557:
    case 1558:
    case 1561:
    case 1562:
    case 1565:
    case 1566:
    case 1569:
    case 1570:
    case 1573:
    case 1574:
    case 1576:
    case 1578:
    case 1580:
    case 1582:
    case 1585:
    case 1586:
    case 1589:
    case 1590:
    case 1593:
    case 1594:
    case 1596:
    case 1598:
    case 1600:
    case 1602:
    case 1605:
    case 1606:
    case 1609:
    case 1610:
    case 1613:
    case 1614:
    case 1617:
    case 1618:
    case 1621:
    case 1622:
    case 1625:
    case 1626:
    case 1629:
    case 1630:
    case 1633:
    case 1634:
    case 1637:
    case 1638:
    case 1640:
    case 1642:
    case 1644:
    case 1646:
    case 1649:
    case 1650:
    case 1653:
    case 1654:
    case 1657:
    case 1658:
    case 1661:
    case 1662:
    case 1665:
    case 1666:
    case 1669:
    case 1670:
    case 1673:
    case 1674:
    case 1676:
    case 1678:
    case 1680:
      v9 = *((_QWORD *)a3[5][7] + 5) + 272;
      *(_DWORD *)a2 = 47;
      v10 = (uint64_t)*a3;
      sub_1C4768AD0(v9, (uint64_t)*a3);
      v12 = (unint64_t)(v11 + 7) >> 3;
      v14 = v13 == 1;
      llvm::DataLayout::getAlignment(v9, v10);
      v17 = ((1 << v16) + 0x3FFFFFFFFLL + v12) & -(1 << v16);
      if (v14)
      *(_QWORD *)(a2 + 8) = sub_1C4816F98(**a3, 10, 0, v17 >> 2, 0);
      *(_QWORD *)(a2 + 16) = v18;
      llvm::SampleInfo::SampleInfo((uint64_t)v128, a5, 1);
      v19 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      v20 = v19[4 * v130];
      v21 = *((unsigned __int8 *)v20 + 16);
      if (v20)
        v22 = v21 > 0x14;
      else
        v22 = 1;
      if (v22)
        goto LABEL_47;
      v23 = v19[4 * v130];
      if (v21 != 5)
        goto LABEL_12;
      v23 = v19[4 * v130];
      if (*((_WORD *)v20 + 9) == 48)
      {
        v23 = (llvm::EVT **)v20[-4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF)];
        if (!v23)
          goto LABEL_47;
        v21 = *((unsigned __int8 *)v23 + 16);
LABEL_12:
        if (v21 == 19)
          goto LABEL_47;
      }
      goto LABEL_26;
    case 1283:
    case 1284:
    case 1287:
    case 1288:
    case 1291:
    case 1292:
    case 1295:
    case 1296:
    case 1299:
    case 1300:
    case 1303:
    case 1304:
    case 1307:
    case 1308:
    case 1311:
    case 1312:
    case 1315:
    case 1316:
    case 1319:
    case 1320:
    case 1323:
    case 1324:
    case 1327:
    case 1328:
    case 1331:
    case 1332:
    case 1335:
    case 1336:
    case 1339:
    case 1340:
    case 1343:
    case 1344:
    case 1347:
    case 1348:
    case 1351:
    case 1352:
    case 1355:
    case 1356:
    case 1359:
    case 1360:
    case 1363:
    case 1364:
    case 1367:
    case 1368:
    case 1371:
    case 1372:
    case 1375:
    case 1377:
    case 1379:
    case 1381:
    case 1383:
    case 1385:
    case 1387:
    case 1389:
    case 1391:
    case 1392:
    case 1395:
    case 1396:
    case 1399:
    case 1400:
    case 1403:
    case 1404:
    case 1407:
    case 1408:
    case 1411:
    case 1412:
    case 1415:
    case 1416:
    case 1419:
    case 1420:
    case 1423:
    case 1424:
    case 1427:
    case 1428:
    case 1431:
    case 1432:
    case 1435:
    case 1436:
    case 1439:
    case 1440:
    case 1443:
    case 1444:
    case 1447:
    case 1448:
    case 1451:
    case 1452:
    case 1455:
    case 1456:
    case 1459:
    case 1460:
    case 1463:
    case 1464:
    case 1467:
    case 1468:
    case 1471:
    case 1472:
    case 1475:
    case 1477:
    case 1479:
    case 1481:
    case 1483:
    case 1485:
    case 1487:
    case 1489:
    case 1491:
    case 1492:
    case 1495:
    case 1496:
    case 1499:
    case 1500:
    case 1503:
    case 1504:
    case 1507:
    case 1508:
    case 1511:
    case 1512:
    case 1515:
    case 1516:
    case 1519:
    case 1520:
    case 1523:
    case 1524:
    case 1527:
    case 1528:
    case 1531:
    case 1533:
    case 1535:
    case 1537:
    case 1539:
    case 1541:
    case 1543:
    case 1545:
    case 1547:
    case 1549:
    case 1551:
    case 1553:
    case 1555:
    case 1556:
    case 1559:
    case 1560:
    case 1563:
    case 1564:
    case 1567:
    case 1568:
    case 1571:
    case 1572:
    case 1575:
    case 1577:
    case 1579:
    case 1581:
    case 1583:
    case 1584:
    case 1587:
    case 1588:
    case 1591:
    case 1592:
    case 1595:
    case 1597:
    case 1599:
    case 1601:
    case 1603:
    case 1604:
    case 1607:
    case 1608:
    case 1611:
    case 1612:
    case 1615:
    case 1616:
    case 1619:
    case 1620:
    case 1623:
    case 1624:
    case 1627:
    case 1628:
    case 1631:
    case 1632:
    case 1635:
    case 1636:
    case 1639:
    case 1641:
    case 1643:
    case 1645:
    case 1647:
    case 1648:
    case 1651:
    case 1652:
    case 1655:
    case 1656:
    case 1659:
    case 1660:
    case 1663:
    case 1664:
    case 1667:
    case 1668:
    case 1671:
    case 1672:
    case 1675:
    case 1677:
    case 1679:
    case 1681:
      v24 = *((_QWORD *)a3[5][7] + 5) + 272;
      *(_DWORD *)a2 = 47;
      v25 = (uint64_t)*a3;
      sub_1C4768AD0(v24, (uint64_t)*a3);
      v27 = (unint64_t)(v26 + 7) >> 3;
      v29 = v28 == 1;
      llvm::DataLayout::getAlignment(v24, v25);
      v32 = ((1 << v31) + 0x1FFFFFFFFLL + v27) & -(1 << v31);
      if (v29)
      *(_QWORD *)(a2 + 8) = sub_1C4816F98(**a3, 9, 0, v32 >> 1, 0);
      *(_QWORD *)(a2 + 16) = v33;
      llvm::SampleInfo::SampleInfo((uint64_t)v128, a5, 1);
      v19 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      v20 = v19[4 * v130];
      v34 = *((unsigned __int8 *)v20 + 16);
      if (v20)
        v35 = v34 > 0x14;
      else
        v35 = 1;
      if (v35)
        goto LABEL_47;
      v23 = v19[4 * v130];
      if (v34 != 5)
        goto LABEL_24;
      if (*((_WORD *)v20 + 9) != 48)
        goto LABEL_46;
      v23 = (llvm::EVT **)v20[-4 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF)];
      if (!v23)
        goto LABEL_47;
      v34 = *((unsigned __int8 *)v23 + 16);
LABEL_24:
      if (v34 == 19)
        goto LABEL_47;
      if (v34 != 16)
        goto LABEL_46;
LABEL_26:
      v36 = *((_DWORD *)v23 + 8);
      if (v36 > 0x40)
      {
        if ((*(_QWORD *)v23[3] & 0x8000000000000000) == 0)
          goto LABEL_47;
      }
      else if ((((uint64_t)((_QWORD)v23[3] << -(char)v36) >> -(char)v36) & 0x8000000000000000) == 0)
      {
        goto LABEL_47;
      }
LABEL_46:
      v20 = v19[4 * v129];
LABEL_47:
      *(_QWORD *)(a2 + 24) = (unint64_t)v20 & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      v64 = sub_1C4A4F038((uint64_t)a3) | 1;
      goto LABEL_75;
    case 1682:
    case 1683:
    case 1686:
    case 1687:
    case 1691:
    case 1692:
    case 1693:
    case 1696:
    case 1697:
    case 1701:
    case 1702:
    case 1703:
    case 1706:
    case 1707:
    case 1711:
    case 1712:
    case 1713:
    case 1716:
    case 1717:
    case 1721:
    case 1722:
    case 1723:
    case 1726:
    case 1727:
    case 1731:
    case 1732:
    case 1733:
    case 1736:
    case 1737:
    case 1741:
    case 1742:
    case 1743:
    case 1746:
    case 1747:
    case 1751:
    case 1752:
    case 1753:
    case 1756:
    case 1757:
    case 1761:
    case 1762:
    case 1763:
    case 1766:
    case 1767:
    case 1771:
    case 1772:
    case 1773:
    case 1776:
    case 1777:
    case 1781:
    case 1782:
    case 1783:
    case 1786:
    case 1787:
    case 1791:
    case 1792:
    case 1793:
    case 1796:
    case 1797:
    case 1801:
    case 1802:
    case 1803:
    case 1806:
    case 1807:
    case 1811:
    case 1812:
    case 1813:
    case 1816:
    case 1817:
    case 1821:
      v49 = *((_QWORD *)a3[5][7] + 5) + 272;
      *(_DWORD *)a2 = 47;
      v50 = (uint64_t)*(&a3[4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFFu) - 4])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      sub_1C4768AD0(v49, v50);
      v52 = (unint64_t)(v51 + 7) >> 3;
      v54 = v53 == 1;
      llvm::DataLayout::getAlignment(v49, v50);
      v57 = ((1 << v56) + 0x3FFFFFFFFLL + v52) & -(1 << v56);
      if (v54)
      v46 = v57 >> 2;
      v47 = **a3;
      v48 = 10;
      goto LABEL_35;
    case 1684:
    case 1685:
    case 1688:
    case 1689:
    case 1690:
    case 1694:
    case 1695:
    case 1698:
    case 1699:
    case 1700:
    case 1704:
    case 1705:
    case 1708:
    case 1709:
    case 1710:
    case 1714:
    case 1715:
    case 1718:
    case 1719:
    case 1720:
    case 1724:
    case 1725:
    case 1728:
    case 1729:
    case 1730:
    case 1734:
    case 1735:
    case 1738:
    case 1739:
    case 1740:
    case 1744:
    case 1745:
    case 1748:
    case 1749:
    case 1750:
    case 1754:
    case 1755:
    case 1758:
    case 1759:
    case 1760:
    case 1764:
    case 1765:
    case 1768:
    case 1769:
    case 1770:
    case 1774:
    case 1775:
    case 1778:
    case 1779:
    case 1780:
    case 1784:
    case 1785:
    case 1788:
    case 1789:
    case 1790:
    case 1794:
    case 1795:
    case 1798:
    case 1799:
    case 1800:
    case 1804:
    case 1805:
    case 1808:
    case 1809:
    case 1810:
    case 1814:
    case 1815:
    case 1818:
    case 1819:
    case 1820:
      v37 = *((_QWORD *)a3[5][7] + 5) + 272;
      *(_DWORD *)a2 = 47;
      v38 = (uint64_t)*(&a3[4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFFu) - 4])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      sub_1C4768AD0(v37, v38);
      v40 = (unint64_t)(v39 + 7) >> 3;
      v42 = v41 == 1;
      llvm::DataLayout::getAlignment(v37, v38);
      v45 = ((1 << v44) + 0x1FFFFFFFFLL + v40) & -(1 << v44);
      if (v42)
      v46 = v45 >> 1;
      v47 = **a3;
      v48 = 9;
LABEL_35:
      *(_QWORD *)(a2 + 8) = sub_1C4816F98(v47, v48, 0, v46, 0);
      *(_QWORD *)(a2 + 16) = v58;
      llvm::SampleInfo::SampleInfo((uint64_t)v128, a5, 1);
      v59 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      v60 = v59[4 * v130];
      if (!v60)
        goto LABEL_74;
      v61 = *((unsigned __int8 *)v60 + 16);
      if (v61 > 0x14)
        goto LABEL_74;
      v62 = v59[4 * v130];
      if (v61 != 5)
        goto LABEL_41;
      v62 = v59[4 * v130];
      if (*((_WORD *)v60 + 9) == 48)
      {
        v62 = (llvm::EVT **)v60[-4 * (*((_DWORD *)v60 + 5) & 0x7FFFFFF)];
        if (!v62)
          goto LABEL_74;
        v61 = *((unsigned __int8 *)v62 + 16);
LABEL_41:
        if (v61 == 19)
          goto LABEL_74;
      }
      v63 = *((_DWORD *)v62 + 8);
      if (v63 > 0x40)
      {
        if ((*(_QWORD *)v62[3] & 0x8000000000000000) == 0)
          goto LABEL_74;
      }
      else if ((((uint64_t)((_QWORD)v62[3] << -(char)v63) >> -(char)v63) & 0x8000000000000000) == 0)
      {
        goto LABEL_74;
      }
      v60 = v59[4 * v129];
LABEL_74:
      *(_QWORD *)(a2 + 24) = (unint64_t)v60 & 0xFFFFFFFFFFFFFFFBLL;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      v64 = sub_1C4A4F038((uint64_t)a3) | 2;
LABEL_75:
      *(_WORD *)(a2 + 50) = v64;
      return 1;
    case 1822:
    case 1823:
    case 1824:
    case 1825:
    case 1826:
    case 1827:
    case 1828:
    case 1829:
    case 1830:
    case 1831:
    case 1832:
    case 1833:
    case 1834:
    case 1835:
    case 1836:
    case 1837:
    case 1838:
    case 1839:
    case 1840:
    case 1841:
    case 1842:
    case 1843:
    case 1844:
    case 1845:
    case 1846:
    case 1847:
    case 1848:
    case 1849:
    case 1850:
    case 1851:
    case 1852:
    case 1853:
    case 1854:
    case 1855:
    case 1856:
    case 1857:
    case 1858:
    case 1859:
    case 1860:
    case 1861:
    case 1862:
    case 1863:
    case 1864:
    case 1865:
    case 1866:
    case 1867:
    case 1868:
    case 1869:
    case 1870:
    case 1871:
    case 1872:
    case 1873:
    case 1874:
    case 1875:
    case 1876:
    case 1877:
    case 1878:
    case 1879:
    case 1880:
    case 1881:
    case 1882:
    case 1883:
    case 1884:
    case 1885:
    case 1886:
    case 1887:
    case 1888:
    case 1889:
    case 1890:
    case 1891:
    case 1892:
    case 1893:
    case 1894:
    case 1895:
    case 1896:
    case 1897:
    case 1898:
    case 1899:
    case 1900:
    case 1901:
    case 1902:
    case 1903:
    case 1904:
    case 1905:
    case 1906:
    case 1907:
    case 1908:
    case 1909:
    case 1910:
    case 1911:
    case 1912:
    case 1913:
    case 1914:
    case 1915:
    case 1916:
    case 1917:
    case 1918:
    case 1919:
    case 1920:
    case 1921:
    case 1922:
    case 1923:
    case 1924:
    case 1925:
    case 1926:
    case 1927:
    case 1928:
    case 1929:
    case 1930:
    case 1931:
    case 1932:
    case 1933:
    case 1934:
    case 1935:
    case 1936:
    case 1937:
    case 1938:
    case 1939:
    case 1940:
    case 1941:
    case 1942:
    case 1943:
    case 1944:
    case 1945:
    case 1946:
    case 1947:
    case 1948:
    case 1949:
    case 1950:
    case 1951:
    case 1952:
    case 1953:
    case 1954:
    case 1955:
    case 1956:
    case 1957:
    case 1958:
    case 1959:
    case 1960:
    case 1961:
    case 1962:
    case 1963:
    case 1964:
    case 1965:
    case 1966:
    case 1967:
    case 1968:
    case 1969:
    case 1970:
    case 1971:
    case 1972:
    case 1973:
    case 1974:
    case 1975:
    case 1976:
    case 1977:
    case 1978:
    case 1979:
    case 1980:
    case 1981:
    case 1982:
    case 1983:
    case 1984:
    case 1985:
    case 1986:
    case 1987:
    case 1988:
    case 1989:
    case 1990:
    case 1991:
    case 1992:
    case 1993:
    case 1994:
    case 1995:
    case 1996:
    case 1997:
    case 1998:
    case 1999:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 2029:
    case 2030:
    case 2031:
    case 2032:
    case 2033:
    case 2034:
    case 2035:
    case 2036:
    case 2037:
    case 2038:
    case 2039:
    case 2040:
    case 2041:
    case 2042:
    case 2043:
    case 2044:
    case 2045:
    case 2046:
    case 2047:
    case 2048:
    case 2049:
    case 2050:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2060:
    case 2061:
    case 2062:
    case 2063:
    case 2064:
    case 2065:
    case 2066:
    case 2067:
    case 2068:
    case 2069:
    case 2070:
    case 2071:
    case 2072:
    case 2073:
    case 2074:
    case 2075:
    case 2076:
    case 2077:
    case 2078:
    case 2079:
    case 2080:
    case 2081:
    case 2082:
    case 2083:
    case 2084:
    case 2085:
    case 2086:
    case 2087:
    case 2088:
    case 2089:
    case 2090:
    case 2091:
    case 2092:
    case 2093:
    case 2094:
    case 2095:
    case 2096:
    case 2097:
    case 2098:
    case 2099:
    case 2100:
    case 2101:
    case 2102:
    case 2103:
    case 2104:
    case 2105:
    case 2106:
    case 2107:
    case 2108:
    case 2109:
    case 2110:
    case 2111:
    case 2112:
    case 2113:
    case 2114:
    case 2115:
    case 2116:
    case 2117:
    case 2118:
    case 2119:
    case 2120:
    case 2121:
    case 2122:
    case 2123:
    case 2124:
    case 2125:
    case 2126:
    case 2127:
    case 2128:
    case 2129:
    case 2130:
    case 2131:
    case 2132:
    case 2133:
    case 2134:
    case 2135:
    case 2136:
    case 2137:
    case 2138:
    case 2139:
    case 2140:
    case 2141:
    case 2143:
    case 2145:
    case 2146:
    case 2147:
    case 2148:
    case 2149:
    case 2150:
    case 2151:
    case 2152:
    case 2153:
    case 2154:
    case 2155:
    case 2156:
    case 2157:
    case 2158:
    case 2159:
    case 2160:
    case 2161:
    case 2162:
    case 2163:
    case 2164:
    case 2165:
    case 2166:
    case 2167:
    case 2168:
    case 2169:
    case 2170:
    case 2171:
    case 2172:
    case 2173:
    case 2174:
    case 2175:
    case 2176:
    case 2177:
    case 2178:
    case 2179:
    case 2180:
    case 2181:
    case 2182:
    case 2183:
    case 2184:
    case 2185:
    case 2186:
    case 2187:
    case 2188:
    case 2189:
    case 2190:
    case 2191:
    case 2192:
    case 2193:
    case 2194:
    case 2195:
    case 2196:
    case 2197:
    case 2198:
    case 2199:
    case 2200:
    case 2201:
    case 2202:
    case 2203:
    case 2204:
    case 2205:
    case 2206:
    case 2207:
    case 2208:
    case 2209:
    case 2210:
    case 2211:
    case 2212:
    case 2213:
    case 2214:
    case 2215:
    case 2216:
    case 2217:
    case 2218:
    case 2219:
    case 2220:
    case 2221:
    case 2222:
    case 2223:
    case 2224:
    case 2225:
    case 2226:
    case 2227:
    case 2228:
    case 2229:
    case 2230:
    case 2231:
    case 2232:
    case 2233:
    case 2234:
    case 2235:
    case 2236:
    case 2237:
    case 2238:
    case 2239:
    case 2240:
    case 2241:
    case 2242:
    case 2243:
    case 2244:
    case 2245:
    case 2246:
    case 2247:
    case 2248:
    case 2249:
    case 2250:
    case 2251:
    case 2252:
    case 2253:
    case 2254:
    case 2255:
    case 2256:
    case 2257:
    case 2258:
    case 2259:
    case 2260:
    case 2261:
    case 2262:
    case 2263:
    case 2264:
    case 2265:
    case 2266:
    case 2267:
    case 2268:
    case 2269:
    case 2270:
    case 2271:
    case 2272:
    case 2273:
    case 2274:
    case 2275:
    case 2276:
    case 2277:
    case 2278:
    case 2279:
    case 2280:
    case 2281:
    case 2282:
    case 2283:
    case 2284:
    case 2285:
    case 2286:
    case 2287:
    case 2288:
    case 2289:
    case 2290:
    case 2291:
    case 2292:
    case 2293:
    case 2294:
    case 2295:
    case 2296:
    case 2297:
    case 2298:
    case 2299:
    case 2300:
    case 2301:
    case 2302:
    case 2303:
    case 2304:
    case 2305:
    case 2306:
    case 2307:
    case 2308:
    case 2309:
    case 2310:
    case 2311:
    case 2312:
    case 2313:
    case 2314:
    case 2315:
    case 2316:
    case 2317:
    case 2318:
    case 2319:
    case 2320:
    case 2321:
    case 2322:
    case 2323:
    case 2324:
    case 2325:
    case 2326:
    case 2327:
    case 2328:
    case 2329:
    case 2330:
    case 2331:
    case 2332:
    case 2333:
    case 2334:
    case 2335:
    case 2336:
    case 2337:
    case 2338:
    case 2339:
    case 2340:
    case 2341:
    case 2342:
    case 2343:
    case 2344:
    case 2345:
    case 2346:
    case 2347:
    case 2348:
    case 2349:
    case 2350:
    case 2351:
    case 2352:
    case 2353:
    case 2354:
    case 2355:
    case 2356:
    case 2357:
    case 2358:
    case 2359:
    case 2360:
    case 2361:
    case 2362:
    case 2363:
    case 2364:
    case 2365:
    case 2366:
    case 2367:
    case 2368:
    case 2369:
    case 2370:
    case 2371:
    case 2372:
    case 2373:
    case 2374:
    case 2375:
    case 2408:
    case 2409:
    case 2410:
    case 2411:
    case 2412:
    case 2413:
    case 2414:
    case 2415:
    case 2416:
    case 2417:
    case 2418:
    case 2419:
    case 2420:
    case 2421:
    case 2422:
    case 2423:
    case 2424:
    case 2425:
    case 2426:
    case 2427:
    case 2428:
    case 2429:
    case 2430:
    case 2431:
    case 2432:
    case 2433:
    case 2434:
    case 2435:
    case 2436:
    case 2437:
    case 2438:
    case 2439:
    case 2440:
    case 2441:
    case 2442:
    case 2443:
    case 2444:
    case 2445:
    case 2446:
    case 2447:
    case 2448:
    case 2449:
    case 2450:
    case 2451:
    case 2452:
    case 2453:
    case 2454:
    case 2455:
    case 2456:
    case 2457:
    case 2458:
    case 2459:
    case 2460:
    case 2461:
    case 2462:
    case 2463:
    case 2464:
    case 2465:
    case 2466:
    case 2467:
    case 2468:
    case 2469:
    case 2470:
    case 2471:
    case 2472:
    case 2473:
    case 2474:
    case 2475:
    case 2476:
    case 2477:
    case 2478:
    case 2479:
    case 2480:
    case 2481:
    case 2482:
    case 2483:
    case 2484:
    case 2485:
    case 2486:
    case 2487:
    case 2488:
    case 2489:
    case 2490:
    case 2491:
    case 2492:
    case 2493:
    case 2494:
    case 2495:
    case 2496:
    case 2497:
    case 2498:
    case 2499:
    case 2500:
    case 2501:
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2512:
    case 2513:
    case 2514:
    case 2515:
    case 2516:
    case 2517:
    case 2518:
    case 2519:
    case 2520:
    case 2521:
    case 2522:
    case 2523:
    case 2524:
    case 2525:
    case 2526:
    case 2527:
    case 2528:
    case 2529:
    case 2530:
    case 2531:
    case 2532:
    case 2533:
    case 2534:
    case 2535:
    case 2536:
    case 2537:
    case 2538:
    case 2539:
    case 2540:
    case 2541:
    case 2542:
    case 2543:
    case 2544:
    case 2545:
    case 2546:
    case 2547:
    case 2548:
    case 2549:
    case 2550:
    case 2551:
    case 2552:
    case 2553:
    case 2554:
    case 2555:
    case 2556:
    case 2557:
    case 2558:
    case 2559:
    case 2560:
    case 2561:
    case 2562:
    case 2563:
    case 2564:
    case 2565:
    case 2566:
    case 2567:
    case 2568:
    case 2569:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2575:
    case 2576:
    case 2577:
    case 2578:
    case 2579:
    case 2580:
    case 2581:
    case 2582:
    case 2583:
    case 2584:
    case 2585:
    case 2586:
    case 2587:
    case 2588:
    case 2589:
    case 2590:
    case 2591:
    case 2592:
    case 2593:
    case 2594:
    case 2595:
    case 2596:
    case 2597:
    case 2598:
    case 2599:
    case 2600:
    case 2601:
    case 2602:
    case 2603:
    case 2604:
    case 2605:
    case 2606:
    case 2607:
    case 2608:
    case 2609:
    case 2610:
    case 2611:
    case 2612:
    case 2613:
    case 2614:
    case 2615:
    case 2616:
    case 2617:
    case 2618:
    case 2619:
    case 2620:
    case 2621:
    case 2622:
    case 2623:
    case 2624:
    case 2625:
    case 2626:
    case 2627:
    case 2628:
    case 2629:
    case 2662:
    case 2663:
    case 2664:
    case 2665:
    case 2666:
    case 2667:
    case 2668:
    case 2669:
    case 2670:
    case 2671:
    case 2672:
    case 2673:
    case 2674:
    case 2675:
    case 2676:
    case 2677:
    case 2678:
    case 2679:
    case 2680:
    case 2681:
    case 2682:
    case 2683:
    case 2684:
    case 2685:
    case 2686:
    case 2687:
    case 2688:
    case 2689:
    case 2690:
    case 2691:
    case 2692:
    case 2693:
    case 2694:
    case 2695:
    case 2696:
    case 2697:
    case 2698:
    case 2699:
    case 2700:
    case 2701:
    case 2702:
    case 2703:
    case 2704:
    case 2705:
    case 2706:
    case 2707:
    case 2708:
    case 2709:
    case 2710:
    case 2711:
    case 2712:
    case 2713:
    case 2714:
    case 2715:
    case 2716:
    case 2717:
    case 2718:
    case 2719:
    case 2720:
    case 2721:
    case 2722:
    case 2723:
    case 2724:
    case 2725:
    case 2726:
    case 2727:
    case 2728:
    case 2729:
    case 2730:
    case 2731:
    case 2732:
    case 2733:
    case 2734:
    case 2735:
    case 2736:
    case 2737:
    case 2738:
    case 2740:
    case 2744:
    case 2745:
    case 2746:
    case 2747:
    case 2748:
    case 2749:
    case 2750:
    case 2751:
    case 2752:
    case 2753:
    case 2754:
    case 2755:
    case 2756:
    case 2757:
    case 2758:
    case 2759:
    case 2760:
    case 2761:
    case 2762:
    case 2763:
    case 2764:
    case 2765:
    case 2766:
    case 2767:
    case 2768:
    case 2769:
    case 2770:
    case 2771:
    case 2772:
    case 2773:
    case 2776:
    case 2780:
    case 2781:
    case 2782:
    case 2783:
    case 2787:
    case 2788:
    case 2789:
    case 2790:
    case 2791:
      return v8;
    case 2142:
    case 2144:
      if (a5 == 2142)
      {
        v105 = 1;
        v106 = 2;
        v107 = (llvm::EVT **)a3;
      }
      else
      {
        v107 = a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 4];
        v105 = 2;
        v106 = 3;
      }
      v113 = *v107;
      *(_DWORD *)a2 = 47;
      *(_QWORD *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)] & 0xFFFFFFFFFFFFFFFBLL;
      *(_QWORD *)(a2 + 8) = llvm::EVT::getEVT(v113, 0, (BOOL)a3);
      *(_QWORD *)(a2 + 16) = v114;
      *(_DWORD *)(a2 + 32) = 0;
      *(_WORD *)(a2 + 48) = 258;
      *(_WORD *)(a2 + 50) = v105;
      v115 = (&a3[4 * v106])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      if (v115)
        v116 = *((unsigned __int8 *)v115 + 16) > 0x14u;
      else
        v116 = 1;
      if (!v116)
      {
        v117 = *((_DWORD *)v115 + 8);
        if (!(v117 > 0x40 ? *(_QWORD *)v115[3] : (uint64_t)((_QWORD)v115[3] << -(char)v117) >> -(char)v117))
          return 1;
      }
      v64 = v105 | 4;
      goto LABEL_75;
    case 2376:
    case 2377:
    case 2378:
    case 2379:
    case 2380:
    case 2381:
    case 2382:
    case 2383:
    case 2384:
    case 2385:
    case 2386:
    case 2387:
    case 2388:
    case 2389:
    case 2390:
    case 2391:
    case 2392:
    case 2393:
    case 2394:
    case 2395:
    case 2396:
    case 2397:
    case 2398:
    case 2399:
    case 2400:
    case 2401:
    case 2402:
    case 2403:
    case 2404:
    case 2405:
    case 2406:
    case 2407:
      v75 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      v76 = *v75 + 3;
      if (*((_DWORD *)*v75 + 8) >= 0x41u)
        v76 = (_QWORD *)*v76;
      v77 = dword_1C676B1DC[*v76 & 0xFLL];
      v78 = v75[4];
      v79 = v78 + 3;
      if (*((_DWORD *)v78 + 8) >= 0x41u)
        v79 = (_QWORD *)*v79;
      v80 = *(_DWORD *)v79;
      if ((v80 & 2) != 0)
        v81 = 2;
      else
        v81 = 1;
      if ((v80 & 0xC) != 0)
        v82 = 4;
      else
        v82 = v81;
      v83 = **a3;
      v128[0] = v77;
      switch(v77)
      {
        case 32:
          v84 = (llvm::FixedVectorType *)(*(_QWORD *)v83 + 1960);
          break;
        case 16:
          v84 = (llvm::FixedVectorType *)(*(_QWORD *)v83 + 1936);
          break;
        case 8:
          v84 = (llvm::FixedVectorType *)(*(_QWORD *)v83 + 1912);
          break;
        default:
          v124 = sub_1C5270984(*(_QWORD *)v83 + 2168, v128);
          v84 = (llvm::FixedVectorType *)*((_QWORD *)v124 + 1);
          if (!v84)
          {
            v84 = (llvm::FixedVectorType *)sub_1C484358C(*(_QWORD *)v83 + 2040, 24, 3);
            v125 = v128[0];
            *(_QWORD *)v84 = v83;
            *((_QWORD *)v84 + 2) = 0;
            *((_QWORD *)v84 + 1) = (v125 << 8) | 0xDu;
            *((_QWORD *)v124 + 1) = v84;
          }
          break;
      }
      if (v82 >= 2)
        llvm::FixedVectorType::get(v84, (llvm::Type *)v82);
      *(_DWORD *)a2 = 47;
      *(_QWORD *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 8] & 0xFFFFFFFFFFFFFFFBLL;
      *(_QWORD *)(a2 + 8) = llvm::EVT::getEVT(v84, 0, (BOOL)a3);
      *(_QWORD *)(a2 + 16) = v88;
      *(_DWORD *)(a2 + 32) = 0;
      v87 = 65794;
      goto LABEL_88;
    case 2630:
    case 2631:
    case 2632:
    case 2633:
    case 2634:
    case 2635:
    case 2636:
    case 2637:
    case 2638:
    case 2639:
    case 2640:
    case 2641:
    case 2642:
    case 2643:
    case 2644:
    case 2645:
    case 2646:
    case 2647:
    case 2648:
    case 2649:
    case 2650:
    case 2651:
    case 2652:
    case 2653:
    case 2654:
    case 2655:
    case 2656:
    case 2657:
    case 2658:
    case 2659:
    case 2660:
    case 2661:
      v65 = &a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      v66 = *v65 + 3;
      if (*((_DWORD *)*v65 + 8) >= 0x41u)
        v66 = (_QWORD *)*v66;
      v67 = dword_1C676B1DC[*v66 & 0xFLL];
      v68 = v65[4];
      v69 = v68 + 3;
      if (*((_DWORD *)v68 + 8) >= 0x41u)
        v69 = (_QWORD *)*v69;
      v70 = *(_DWORD *)v69;
      if ((v70 & 2) != 0)
        v71 = 2;
      else
        v71 = 1;
      if ((v70 & 0xC) != 0)
        v72 = 4;
      else
        v72 = v71;
      v73 = **a3;
      v128[0] = v67;
      switch(v67)
      {
        case 32:
          v74 = (llvm::FixedVectorType *)(*(_QWORD *)v73 + 1960);
          break;
        case 16:
          v74 = (llvm::FixedVectorType *)(*(_QWORD *)v73 + 1936);
          break;
        case 8:
          v74 = (llvm::FixedVectorType *)(*(_QWORD *)v73 + 1912);
          break;
        default:
          v122 = sub_1C5270984(*(_QWORD *)v73 + 2168, v128);
          v74 = (llvm::FixedVectorType *)*((_QWORD *)v122 + 1);
          if (!v74)
          {
            v74 = (llvm::FixedVectorType *)sub_1C484358C(*(_QWORD *)v73 + 2040, 24, 3);
            v123 = v128[0];
            *(_QWORD *)v74 = v73;
            *((_QWORD *)v74 + 2) = 0;
            *((_QWORD *)v74 + 1) = (v123 << 8) | 0xDu;
            *((_QWORD *)v122 + 1) = v74;
          }
          break;
      }
      if (v72 >= 2)
        llvm::FixedVectorType::get(v74, (llvm::Type *)v72);
      *(_DWORD *)a2 = 47;
      *(_QWORD *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 12] & 0xFFFFFFFFFFFFFFFBLL;
      *(_QWORD *)(a2 + 8) = llvm::EVT::getEVT(v74, 0, (BOOL)a3);
      *(_QWORD *)(a2 + 16) = v86;
      *(_DWORD *)(a2 + 32) = 0;
      v87 = 131330;
LABEL_88:
      *(_DWORD *)(a2 + 48) = v87;
      return 1;
    case 2739:
    case 2741:
    case 2742:
    case 2743:
    case 2774:
    case 2775:
    case 2777:
    case 2778:
    case 2779:
      v89 = (a5 - 2739);
      if (v89 > 0x28)
        goto LABEL_152;
      if (((1 << (a5 + 77)) & 0x1D) != 0)
      {
        v90 = 2;
      }
      else if (((1 << (a5 + 77)) & 0x1C800000000) != 0)
      {
        v90 = 7;
      }
      else
      {
        if (v89 != 36)
LABEL_152:
          llvm::report_fatal_error((llvm *)"Unexpected Intrinsic ID: should never gotten here", (const char *)1);
        v90 = 10;
      }
      v91 = (&a3[4 * v90 + 8])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
      if (*((_BYTE *)v91 + 16) == 16)
      {
        v92 = *((_DWORD *)v91 + 8);
        if (v92 > 0x40)
          v93 = *(_QWORD *)v91[3];
        else
          v93 = (uint64_t)((_QWORD)v91[3] << -(char)v92) >> -(char)v92;
      }
      else
      {
        v93 = 4;
      }
      if (v93 <= 4)
        v93 = 4;
      if (v93 >= 0x100000)
        LODWORD(v93) = 0x100000;
      v98 = (llvm::LLVMContext *)(8 * v93);
      switch((_DWORD)v98)
      {
        case 0x20:
          v99 = 0;
          v100 = 0;
          v101 = 5;
          break;
        case 0x40:
          v99 = 0;
          v100 = 0;
          v101 = 6;
          break;
        case 0x80:
          v99 = 0;
          v100 = 0;
          v101 = 7;
          break;
        default:
          ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(**a3, v98);
          v99 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
          v101 = ExtendedIntegerVT;
          break;
      }
      *(_QWORD *)(a2 + 8) = v101 | v99;
      *(_QWORD *)(a2 + 16) = v100;
      *(_QWORD *)(a2 + 24) = (unint64_t)(&a3[4 * v90])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)] & 0xFFFFFFFFFFFFFFFBLL;
      *(_WORD *)(a2 + 48) = 260;
      if (a5 == 2774 || a5 == 2739)
      {
        v102 = (&a3[4 * v90 + 12])[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)];
        v103 = *((_DWORD *)v102 + 8);
        if (v103 > 0x40)
          v104 = *(_QWORD *)v102[3];
        else
          v104 = (uint64_t)((_QWORD)v102[3] << -(char)v103) >> -(char)v103;
        *(_WORD *)(a2 + 48) = (63 - __clz(v104)) | 0x100;
      }
      v64 = 3;
      goto LABEL_75;
    case 2784:
      goto LABEL_128;
    case 2785:
    case 2786:
      v108 = (llvm::Type *)*((unsigned int *)*a3 + 8);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((*a3)[3]);
      if ((_DWORD)v109 == 1)
      {
        v127 = PrimitiveSizeInBits;
        PrimitiveSizeInBits = v127;
      }
      v8 = 1;
      sub_1C4A4F248(a2, (uint64_t)a3, PrimitiveSizeInBits, v108, 1);
      return v8;
    case 2792:
      *(_QWORD *)(a2 + 8) = llvm::EVT::getEVT(*a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)], 0, (BOOL)a3);
      *(_QWORD *)(a2 + 16) = v119;
      *(_DWORD *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 48) = 131330;
      *(_QWORD *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 4] & 0xFFFFFFFFFFFFFFFBLL;
      return 1;
    default:
      if ((a5 - 2839) >= 2)
      {
        if (a5 == 2838)
        {
LABEL_128:
          if (a5 == 2784)
          {
            v111 = 1;
            v112 = (llvm::EVT **)a3;
          }
          else
          {
            v112 = a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 4];
            v111 = 2;
          }
          v120 = *v112;
          *(_DWORD *)a2 = 47;
          *(_QWORD *)(a2 + 24) = (unint64_t)a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)] & 0xFFFFFFFFFFFFFFFBLL;
          *(_QWORD *)(a2 + 8) = llvm::EVT::getEVT(v120, 0, (BOOL)a3);
          *(_QWORD *)(a2 + 16) = v121;
          *(_DWORD *)(a2 + 32) = 0;
          *(_WORD *)(a2 + 48) = 258;
          v8 = 1;
          *(_WORD *)(a2 + 50) = v111;
        }
      }
      else
      {
        v94 = (uint64_t)*a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 4];
        v95 = (llvm::Type *)*(unsigned int *)(v94 + 32);
        v97 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(v94 + 24));
        if ((_DWORD)v96 == 1)
        sub_1C4A4F248(a2, (uint64_t)a3, v97, v95, 0);
        return 1;
      }
      return v8;
  }
}

uint64_t sub_1C4A4F038(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  int i;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 64);
  if (!v1 || !*(_DWORD *)(v1 + 8) || (v2 = *(_QWORD *)(v1 + 40)) == 0 || (v3 = *(_DWORD *)(v2 + 40)) == 0)
  {
LABEL_24:
    v18 = llvm::CallBase::getFnAttrOnCalledFunction<llvm::StringRef>(a1, "globally-coherent", 0x11uLL);
    return (v18 != 0) << 6;
  }
  v4 = *(_QWORD *)(v2 + 24);
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v6 = &unk_1ED7EA000;
  if ((v5 & 1) == 0)
  {
    v25 = a1;
    v24 = v4;
    v23 = v3;
    v20 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v6 = &unk_1ED7EA000;
    v3 = v23;
    v4 = v24;
    v21 = v20;
    a1 = v25;
    if (v21)
    {
      v22 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v22 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v22;
      __cxa_guard_release(&qword_1ED7EAC88);
      v6 = (_QWORD *)&unk_1ED7EA000;
      v3 = v23;
      v4 = v24;
      a1 = v25;
    }
  }
  v7 = v6[400];
  v8 = __ROR8__(v7 ^ 0xA998C8AA3BC31F8DLL, 30);
  v9 = 0x9DDFEA08EB382D69
     * ((v7 + 0x35F7FFDAEA461458) ^ ((0x9DDFEA08EB382D69
                                      * ((v8 - 0x7CB6A14CA0FD4217) ^ (v7 + 0x35F7FFDAEA461458))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v8 - 0x7CB6A14CA0FD4217) ^ (v7 + 0x35F7FFDAEA461458))));
  v10 = -348639895 * ((v9 >> 47) ^ v9);
  v11 = v3 - 1;
  for (i = 1; ; ++i)
  {
    v13 = v10 & v11;
    v14 = (uint64_t *)(v4 + 24 * v13);
    v15 = *v14;
    if (*v14 == -1)
    {
      if ("globally-coherent" == (char *)-1)
        goto LABEL_23;
      goto LABEL_9;
    }
    if (v15 != -2)
      break;
    if ("globally-coherent" == (char *)-2)
      goto LABEL_23;
LABEL_9:
    if (v15 == -1)
      goto LABEL_24;
    v10 = i + v13;
  }
  if (v14[1] != 17)
    goto LABEL_9;
  v16 = *(_QWORD *)v15 == 0x796C6C61626F6C67 && *(_QWORD *)(v15 + 8) == 0x6E657265686F632DLL;
  if (!v16 || *(_BYTE *)(v15 + 16) != 116)
    goto LABEL_9;
LABEL_23:
  v18 = v14[2];
  if (!v18)
    goto LABEL_24;
  return (v18 != 0) << 6;
}

unint64_t sub_1C4A4F248(uint64_t a1, uint64_t a2, int a3, llvm::Type *a4, int a5)
{
  _QWORD *v9;
  llvm::FixedVectorType *v10;
  llvm::EVT *v11;
  BOOL v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int16 v18;
  _DWORD *v19;
  int v20;
  int v21;

  v9 = **(_QWORD ***)a2;
  v21 = a3;
  if (a3 <= 63)
  {
    if (a3 <= 31)
    {
      switch(a3)
      {
        case 16:
          v10 = (llvm::FixedVectorType *)(*v9 + 1936);
          goto LABEL_9;
        case 8:
          v10 = (llvm::FixedVectorType *)(*v9 + 1912);
          goto LABEL_9;
        case 1:
          v10 = (llvm::FixedVectorType *)(*v9 + 1888);
          goto LABEL_9;
      }
    }
    else if (a3 == 32)
    {
      v10 = (llvm::FixedVectorType *)(*v9 + 1960);
      goto LABEL_9;
    }
  }
  else
  {
    if (a3 == 64)
    {
      v10 = (llvm::FixedVectorType *)(*v9 + 1984);
      goto LABEL_9;
    }
    if (a3 == 128)
    {
      v10 = (llvm::FixedVectorType *)(*v9 + 2008);
      goto LABEL_9;
    }
  }
  v19 = sub_1C5270984(*v9 + 2168, &v21);
  v10 = (llvm::FixedVectorType *)*((_QWORD *)v19 + 1);
  if (!v10)
  {
    v10 = (llvm::FixedVectorType *)sub_1C484358C(*v9 + 2040, 24, 3);
    v20 = v21;
    *(_QWORD *)v10 = v9;
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 1) = (v20 << 8) | 0xDu;
    *((_QWORD *)v19 + 1) = v10;
  }
LABEL_9:
  llvm::FixedVectorType::get(v10, a4);
  *(_DWORD *)a1 = 47;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) & 0xFFFFFFFFFFFFFFFBLL;
  result = llvm::EVT::getEVT(v11, 0, v12);
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = v14;
  *(_DWORD *)(a1 + 32) = 0;
  v15 = 128;
  if (a5)
    v15 = 96;
  v16 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + v15);
  v17 = (_QWORD *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u)
    v17 = (_QWORD *)*v17;
  *(_WORD *)(a1 + 48) = (63 - __clz(*v17 & 0xFLL)) | 0x100;
  if (a5)
    v18 = 1;
  else
    v18 = 2;
  *(_WORD *)(a1 + 50) = v18;
  return result;
}

uint64_t sub_1C4A4F404(uint64_t a1, llvm::MachineInstr *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184296) + 176))(*(_QWORD *)(a1 + 184296));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v6 = 0x6903000000;
  llvm::MachineInstr::addOperand(a2, *(llvm::MachineFunction **)(*((_QWORD *)a2 + 3) + 32), (const llvm::MachineOperand *)&v6);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v6 = 0x6902000000;
  llvm::MachineInstr::addOperand(a2, *(llvm::MachineFunction **)(*((_QWORD *)a2 + 3) + 32), (const llvm::MachineOperand *)&v6);
  return a3;
}

uint64_t sub_1C4A4F498(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6, _BYTE *a7)
{
  int v9;
  unint64_t ExtendedSizeInBits;
  const char *v11;
  llvm::Type *v12;
  const char *v13;
  uint64_t result;
  unint64_t v15;
  llvm::Type *v16;
  _QWORD v17[2];

  v17[0] = a2;
  v17[1] = a3;
  if ((a4 - 64) > 0xB)
    goto LABEL_4;
  v9 = 1 << (a4 - 64);
  if ((v9 & 0x1E2) == 0)
  {
    if ((v9 & 0x81D) != 0)
      goto LABEL_20;
LABEL_4:
    if (((1 << a4) & 0x4CF) == 0)
      goto LABEL_20;
  }
  if ((_BYTE)a2)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v17);
  else
    ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v17);
  if ((_DWORD)v11 == 1)
  {
    v15 = ExtendedSizeInBits;
    ExtendedSizeInBits = v15;
  }
  if (ExtendedSizeInBits <= 0x40 && a5)
    goto LABEL_18;
  v12 = LOBYTE(v17[0])
      ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)v17)
      : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v17);
  if ((_DWORD)v13 == 1)
  {
    v16 = v12;
    v12 = v16;
  }
  if ((unint64_t)v12 <= 0x20)
  {
LABEL_18:
    if (a7)
    {
LABEL_19:
      result = 1;
      *a7 = 1;
      return result;
    }
    return 1;
  }
LABEL_20:
  if ((a5 & 0xFE) != 0)
  {
    if (a7)
      goto LABEL_19;
    return 1;
  }
  return 0;
}

void sub_1C4A4F5C0(int a1, int a2, int a3, llvm::APInt *this, llvm::APInt *a5, uint64_t a6, int a7)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  const void **v16;
  void (**v17)();
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t i;
  llvm *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint8x8_t v35;
  __int32 v36;
  unsigned int v37;
  uint8x8_t v38;
  __int32 v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  char v51;
  char v52;
  unint64_t v53;
  unsigned int v54;
  const char *v55;
  unint64_t v56;
  unsigned int v57;
  void *v58;
  unsigned int v59;
  void *v60;
  const void *v61;
  const char *v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  _QWORD *v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  size_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  size_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  const char *v101;
  unint64_t v102;
  const char *v103;
  unsigned int v104;
  unsigned int v105;
  void *v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  int v121;
  uint64_t v122;
  const void *v123;
  unint64_t v124;
  int8x8_t *v125;
  int8x8_t v126;
  uint8x8_t v127;
  unint64_t v128;
  int8x8_t *v129;
  int8x8_t v130;
  uint8x8_t v131;
  unsigned int v132;
  uint8x8_t v133;
  __int32 v134;
  uint8x8_t v135;
  __int32 v136;
  uint8x8_t v137;
  __int32 v138;
  uint8x8_t v139;
  __int32 v140;
  _QWORD *v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int8x8_t *v151;
  int8x8_t v152;
  uint8x8_t v153;
  unint64_t v154;
  int8x8_t *v155;
  int8x8_t v156;
  uint8x8_t v157;
  char v158;
  unsigned int v159;
  unint64_t v160;
  int8x8_t *v161;
  int8x8_t v162;
  uint8x8_t v163;
  unint64_t v164;
  int8x8_t *v165;
  int8x8_t v166;
  uint8x8_t v167;
  size_t v168;
  void *v169;
  llvm *v170;
  llvm::raw_ostream *v171;
  llvm::raw_ostream *v172;
  char v173;
  void *v174;
  unsigned int v175;
  void *v176;
  unsigned int v177;
  void *v178;
  unsigned int v179;
  void *v180;
  unsigned int v181;
  void *__src;
  unsigned int v183;
  void *v184;
  unsigned int v185;
  unint64_t v186;
  void *v187;
  unsigned int v188;
  void *v189;
  unsigned int v190;
  unint64_t v191;
  void *v192;
  unsigned int v193;
  void *v194;
  unsigned int v195;
  uint64_t v196;
  int v197;
  void (**v198)();
  unsigned int v199[2];
  _QWORD *v200;
  uint64_t v201;
  int v202;
  _QWORD v203[8];
  int v204;
  uint64_t v205;
  _QWORD *v206;
  unsigned int v207;
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  v11 = (uint64_t *)(*(_QWORD *)(a6 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (a3 >= 0)
    v11 = (uint64_t *)(*(_QWORD *)(a6 + 272) + 8 * a3);
  v12 = *v11;
  if (v12 && ((*(_BYTE *)(v12 + 3) & 1) != 0 || (v12 = *(_QWORD *)(v12 + 24)) != 0 && (*(_BYTE *)(v12 + 3) & 1) != 0))
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  v14 = *((_DWORD *)this + 2);
  v15 = **(unsigned __int16 **)(v13 + 16);
  v199[0] = v14;
  if (v14 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v198, 0, 0);
  else
    v198 = 0;
  v16 = (const void **)((char *)this + 16);
  if (*((_DWORD *)this + 6) >= 0x41u && *v16)
    MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
  v17 = v198;
  *((_QWORD *)this + 2) = v198;
  v18 = v199[0];
  *((_DWORD *)this + 6) = v199[0];
  if (*((_DWORD *)this + 2) > 0x40u || v18 > 0x40)
  {
    llvm::APInt::reallocate((uint64_t)this, v18);
    v19 = *((unsigned int *)this + 2);
    if (v19 <= 0x40)
      *(_QWORD *)this = *((_QWORD *)this + 2);
    else
      memcpy(*(void **)this, *((const void **)this + 2), ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)this = v17;
    *((_DWORD *)this + 2) = v18;
  }
  v20 = *(_QWORD **)(*(_QWORD *)(v13 + 24) + 32);
  v200 = v203;
  v201 = 4;
  v202 = 0;
  v198 = (void (**)())off_1E816DB00;
  *(_QWORD *)v199 = v203;
  v203[4] = v20;
  v203[5] = v20[5];
  v203[6] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v20[2] + 120))(v20[2]);
  v203[7] = *(_QWORD *)(*v20 + 40) + 272;
  v204 = 6;
  v205 = 1;
  for (i = 30; i != 190; i += 10)
    v199[i - 2] = -1;
  v22 = (llvm *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v20[1] + 16))(v20[1], *v20);
  if (v15 > 258)
  {
    if (v15 <= 307)
    {
      if (v15 == 259)
      {
        v31 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 80) - v14;
LABEL_48:
        v193 = v14;
        if (v14 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v192, 0, 0);
          v14 = v193;
        }
        else
        {
          v192 = 0;
        }
        sub_1C4912E54(&v192, v31 + v14, v14);
        if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
          MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
        *(_QWORD *)this = v192;
        *((_DWORD *)this + 2) = v193;
        goto LABEL_314;
      }
      if (v15 == 282)
        sub_1C4912E54(this, 0, *(unsigned __int8 *)(*(_QWORD *)(v20[7] + 8)+ 40* (*(_DWORD *)(v20[7] + 32) + *(_DWORD *)(*(_QWORD *)(v13 + 32) + 48))+ 16));
      goto LABEL_314;
    }
    if (v15 != 308)
    {
      if (v15 != 315)
        goto LABEL_314;
      v28 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 48);
      goto LABEL_37;
    }
    v41 = *(_QWORD *)(v13 + 32);
    v42 = *(_DWORD *)(v41 + 4);
    if (v42 < 0 && (v43 = v42 & 0x7FFFFFFF, v43 < *(_DWORD *)(a6 + 432)))
      v44 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * v43);
    else
      v44 = 0;
    v47 = *(_DWORD *)(v41 + 36);
    v48 = *(_DWORD *)(v41 + 100);
    if ((v47 & 0x80000000) != 0 && (v47 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432))
    {
      v49 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * (v47 & 0x7FFFFFFF));
      if ((v49 & 1) != 0)
      {
        v50 = v49 >> 3;
        goto LABEL_69;
      }
      if ((v49 & 4) != 0)
      {
        if ((v49 & 2) != 0)
          v50 = (unsigned __int16)(v49 >> 19);
        else
          v50 = v49 >> 19;
LABEL_69:
        v51 = *(_BYTE *)(v41 + 80);
        v52 = *(_BYTE *)(v41 + 144);
        v193 = v50;
        if (v50 > 0x40)
        {
          v173 = v52;
          v132 = v47;
          llvm::APInt::initSlowCase((llvm::APInt *)&v192, 0, 0);
          v195 = v50;
          llvm::APInt::initSlowCase((llvm::APInt *)&v194, 0, 0);
          v47 = v132;
          v52 = v173;
          if ((v48 & 0x80000000) == 0)
            goto LABEL_282;
        }
        else
        {
          v195 = v50;
          v192 = 0;
          v194 = 0;
          if ((v48 & 0x80000000) == 0)
            goto LABEL_282;
        }
        if ((v48 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432))
        {
          v53 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * (v48 & 0x7FFFFFFF));
          if ((v53 & 1) != 0)
          {
            v54 = v53 >> 3;
            goto LABEL_284;
          }
          if ((v53 & 4) != 0)
          {
            if ((v53 & 2) != 0)
              v54 = (unsigned __int16)(v53 >> 19);
            else
              v54 = v53 >> 19;
            goto LABEL_284;
          }
LABEL_283:
          v54 = (unsigned __int16)(v53 >> 3);
LABEL_284:
          v183 = v54;
          if (v54 > 0x40)
          {
            v158 = v52;
            v159 = v47;
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
            v185 = v54;
            llvm::APInt::initSlowCase((llvm::APInt *)&v184, 0, 0);
            v47 = v159;
            v52 = v158;
          }
          else
          {
            v185 = v54;
            __src = 0;
            v184 = 0;
          }
          sub_1C54EB764((uint64_t)&v198, v47, (llvm::MDNode *)&v192, a5, (a7 + 1));
          if (v193 > 0x40)
          {
            v134 = 0;
            v150 = ((unint64_t)v193 + 63) >> 6;
            v151 = (int8x8_t *)v192;
            do
            {
              v152 = *v151++;
              v153 = (uint8x8_t)vcnt_s8(v152);
              v153.i16[0] = vaddlv_u8(v153);
              v134 += v153.i32[0];
              --v150;
            }
            while (v150);
          }
          else
          {
            v133 = (uint8x8_t)vcnt_s8((int8x8_t)v192);
            v133.i16[0] = vaddlv_u8(v133);
            v134 = v133.i32[0];
          }
          if (v195 > 0x40)
          {
            v136 = 0;
            v154 = ((unint64_t)v195 + 63) >> 6;
            v155 = (int8x8_t *)v194;
            do
            {
              v156 = *v155++;
              v157 = (uint8x8_t)vcnt_s8(v156);
              v157.i16[0] = vaddlv_u8(v157);
              v136 += v157.i32[0];
              --v154;
            }
            while (v154);
          }
          else
          {
            v135 = (uint8x8_t)vcnt_s8((int8x8_t)v194);
            v135.i16[0] = vaddlv_u8(v135);
            v136 = v135.i32[0];
          }
          if (v136 + v134 == v193)
          {
            sub_1C54EB764((uint64_t)&v198, v48, (llvm::MDNode *)&__src, a5, (a7 + 1));
            if (v183 > 0x40)
            {
              v138 = 0;
              v160 = ((unint64_t)v183 + 63) >> 6;
              v161 = (int8x8_t *)__src;
              do
              {
                v162 = *v161++;
                v163 = (uint8x8_t)vcnt_s8(v162);
                v163.i16[0] = vaddlv_u8(v163);
                v138 += v163.i32[0];
                --v160;
              }
              while (v160);
            }
            else
            {
              v137 = (uint8x8_t)vcnt_s8((int8x8_t)__src);
              v137.i16[0] = vaddlv_u8(v137);
              v138 = v137.i32[0];
            }
            if (v185 > 0x40)
            {
              v140 = 0;
              v164 = ((unint64_t)v185 + 63) >> 6;
              v165 = (int8x8_t *)v184;
              do
              {
                v166 = *v165++;
                v167 = (uint8x8_t)vcnt_s8(v166);
                v167.i16[0] = vaddlv_u8(v167);
                v140 += v167.i32[0];
                --v164;
              }
              while (v164);
            }
            else
            {
              v139 = (uint8x8_t)vcnt_s8((int8x8_t)v184);
              v139.i16[0] = vaddlv_u8(v139);
              v140 = v139.i32[0];
            }
            if (v140 + v138 == v183)
            {
              v179 = v193;
              if (v193 > 0x40)
              {
                v178 = (void *)operator new[]();
                memcpy(v178, v192, (((unint64_t)v179 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v178 = v192;
              }
              v181 = v195;
              if (v195 > 0x40)
              {
                v180 = (void *)operator new[]();
                memcpy(v180, v194, (((unint64_t)v181 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v180 = v194;
              }
              v141 = sub_1C4912EB0((llvm::APInt *)&v178, v51, v44);
              v175 = v183;
              if (v183 > 0x40)
              {
                v174 = (void *)operator new[]();
                memcpy(v174, __src, (((unint64_t)v175 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v174 = __src;
              }
              v177 = v185;
              if (v185 > 0x40)
              {
                v176 = (void *)operator new[]();
                memcpy(v176, v184, (((unint64_t)v177 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v176 = v184;
              }
              v142 = (_QWORD)sub_1C4912EB0((llvm::APInt *)&v174, v52, v44) * (_QWORD)v141;
              if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
                MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
              *(_QWORD *)this = ~v142;
              *((_DWORD *)this + 2) = 64;
              if (*((_DWORD *)this + 6) >= 0x41u && *v16)
                MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
              *((_QWORD *)this + 2) = v142;
              *((_DWORD *)this + 6) = 64;
              if (v177 >= 0x41 && v176)
                MEMORY[0x1CAA32F9C](v176, 0x1000C8000313F17);
              if (v175 >= 0x41 && v174)
                MEMORY[0x1CAA32F9C](v174, 0x1000C8000313F17);
              if (v181 >= 0x41 && v180)
                MEMORY[0x1CAA32F9C](v180, 0x1000C8000313F17);
              if (v179 >= 0x41 && v178)
                MEMORY[0x1CAA32F9C](v178, 0x1000C8000313F17);
            }
          }
          if (v185 >= 0x41 && v184)
            MEMORY[0x1CAA32F9C](v184, 0x1000C8000313F17);
          if (v183 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          if (v195 < 0x41)
          {
LABEL_313:
            if (v193 < 0x41)
              goto LABEL_314;
            v120 = v192;
            if (!v192)
              goto LABEL_314;
LABEL_191:
            MEMORY[0x1CAA32F9C](v120, 0x1000C8000313F17);
            goto LABEL_314;
          }
LABEL_346:
          if (v194)
            MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
          goto LABEL_313;
        }
LABEL_282:
        v53 = 0;
        goto LABEL_283;
      }
    }
    else
    {
      v49 = 0;
    }
    v50 = (unsigned __int16)(v49 >> 3);
    goto LABEL_69;
  }
  if ((v15 - 52) < 2)
  {
    v32 = *(_QWORD *)(v13 + 32);
    v33 = *(_DWORD *)(v32 + 36);
    v193 = 1;
    v192 = 0;
    v195 = 1;
    v194 = 0;
    v34 = (a7 + 1);
    sub_1C54EB764((uint64_t)&v198, *(_DWORD *)(v32 + 68), (llvm::MDNode *)&v192, a5, v34);
    if (v193 > 0x40)
    {
      v36 = 0;
      v124 = ((unint64_t)v193 + 63) >> 6;
      v125 = (int8x8_t *)v192;
      do
      {
        v126 = *v125++;
        v127 = (uint8x8_t)vcnt_s8(v126);
        v127.i16[0] = vaddlv_u8(v127);
        v36 += v127.i32[0];
        --v124;
      }
      while (v124);
    }
    else
    {
      v35 = (uint8x8_t)vcnt_s8((int8x8_t)v192);
      v35.i16[0] = vaddlv_u8(v35);
      v36 = v35.i32[0];
    }
    v37 = v195;
    if (v195 > 0x40)
    {
      v39 = 0;
      v128 = ((unint64_t)v195 + 63) >> 6;
      v129 = (int8x8_t *)v194;
      do
      {
        v130 = *v129++;
        v131 = (uint8x8_t)vcnt_s8(v130);
        v131.i16[0] = vaddlv_u8(v131);
        v39 += v131.i32[0];
        --v128;
      }
      while (v128);
    }
    else
    {
      v38 = (uint8x8_t)vcnt_s8((int8x8_t)v194);
      v38.i16[0] = vaddlv_u8(v38);
      v39 = v38.i32[0];
    }
    if (v39 + v36 != v193)
      goto LABEL_172;
    if ((v33 & 0x80000000) != 0 && (v33 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a6 + 432))
      v40 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * (v33 & 0x7FFFFFFF));
    else
      v40 = 0;
    v191 = v40;
    sub_1C54EB764((uint64_t)&v198, v33, this, a5, v34);
    v56 = sub_1C4825F50(&v191);
    if ((_DWORD)v55 == 1)
    if (v56 <= 0x3F)
    {
      v57 = *((_DWORD *)this + 2);
      v58 = *(void **)this;
      v183 = 64;
      __src = v58;
      sub_1C4912E54(&__src, v57, 0x40u);
      v59 = v183;
      if (v183 > 0x40)
      {
        v168 = (((unint64_t)v183 + 63) >> 3) & 0x3FFFFFF8;
        v60 = (void *)operator new[]();
        v169 = __src;
        memcpy(v60, __src, v168);
        v61 = *v16;
        if (v183 >= 0x41 && v169)
          MEMORY[0x1CAA32F9C](v169, 0x1000C8000313F17);
      }
      else
      {
        v60 = __src;
        v61 = *v16;
      }
      if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
        MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
      *(_QWORD *)this = v60;
      *((_DWORD *)this + 2) = v59;
      if (*((_DWORD *)this + 6) >= 0x41u && *v16)
        MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
      *((_QWORD *)this + 2) = v61;
      *((_DWORD *)this + 6) = 64;
      v63 = sub_1C4825F50(&v191);
      if ((_DWORD)v62 == 1)
      sub_1C4912E54(this, v63, *((_DWORD *)this + 2));
    }
    if (v195 >= 0x41)
      v64 = (uint64_t *)v194;
    else
      v64 = (uint64_t *)&v194;
    v65 = *v64;
    if (v15 != 52)
    {
      v183 = *((_DWORD *)this + 2);
      if (v183 > 0x40)
      {
        __src = (void *)operator new[]();
        memcpy(__src, *(const void **)this, (((unint64_t)v183 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        __src = *(void **)this;
      }
      sub_1C4888094((uint64_t)&__src, v65);
      if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
        MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
      *(_QWORD *)this = __src;
      *((_DWORD *)this + 2) = v183;
      v183 = *((_DWORD *)this + 6);
      if (v183 > 0x40)
      {
        __src = (void *)operator new[]();
        memcpy(__src, *v16, (((unint64_t)v183 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        __src = (void *)*v16;
      }
      sub_1C4888094((uint64_t)&__src, v65);
      if (*((_DWORD *)this + 6) >= 0x41u && *v16)
        MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
      *((_QWORD *)this + 2) = __src;
      *((_DWORD *)this + 6) = v183;
      v183 = *((_DWORD *)this + 2);
      if (v183 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      else
        __src = 0;
      sub_1C4912E54(&__src, 0, v65);
      sub_1C4912E54(&__src, *(_DWORD *)(*(_QWORD *)(v13 + 32) + 112) + v65, v183);
      v86 = *((unsigned int *)this + 2);
      if (v86 > 0x40)
      {
        v87 = *(_QWORD **)this;
        v88 = (uint64_t *)__src;
        v89 = (unint64_t)(v86 + 63) >> 6;
        do
        {
          v90 = *v88++;
          *v87++ |= v90;
          --v89;
        }
        while (v89);
      }
      else
      {
        *(_QWORD *)this |= (unint64_t)__src;
      }
      v77 = v183;
      v188 = v183;
      if (v183 > 0x40)
      {
        v92 = (((unint64_t)v183 + 63) >> 3) & 0x3FFFFFF8;
        v187 = (void *)operator new[]();
        memcpy(v187, __src, v92);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v187);
        v77 = v188;
        v79 = (unint64_t)v187;
      }
      else
      {
        v91 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v183;
        if (!v183)
          v91 = 0;
        v79 = v91 & ~(unint64_t)__src;
      }
      v93 = *((unsigned int *)this + 6);
      if (v93 > 0x40)
      {
        v94 = *v16;
        v95 = (unint64_t)(v93 + 63) >> 6;
        v96 = (uint64_t *)v79;
        do
        {
          v97 = *v96++;
          *v94++ &= v97;
          --v95;
        }
        while (v95);
        goto LABEL_153;
      }
      goto LABEL_150;
    }
    v66 = *((unsigned int *)this + 2);
    if (v66 > 0x40)
    {
      v67 = operator new[]();
      v122 = *(_QWORD *)this;
      memcpy((void *)v67, *(const void **)this, ((unint64_t)(v66 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::tcShiftRight((llvm::APInt *)v67, (unint64_t *)((unint64_t)(v66 + 63) >> 6), v65);
      if (*((_DWORD *)this + 2) >= 0x41u && v122)
        MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
    }
    else if ((_DWORD)v66 == (_DWORD)v65)
    {
      v67 = 0;
    }
    else
    {
      v67 = *(_QWORD *)this >> v65;
    }
    *(_QWORD *)this = v67;
    *((_DWORD *)this + 2) = v66;
    v68 = *((unsigned int *)this + 6);
    if (v68 > 0x40)
    {
      v69 = operator new[]();
      v123 = (const void *)*((_QWORD *)this + 2);
      memcpy((void *)v69, v123, ((unint64_t)(v68 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::tcShiftRight((llvm::APInt *)v69, (unint64_t *)((unint64_t)(v68 + 63) >> 6), v65);
      if (*((_DWORD *)this + 6) >= 0x41u && v123)
        MEMORY[0x1CAA32F9C](v123, 0x1000C8000313F17);
    }
    else
    {
      if ((_DWORD)v68 == (_DWORD)v65)
      {
        v69 = 0;
LABEL_99:
        *((_QWORD *)this + 2) = v69;
        *((_DWORD *)this + 6) = v68;
        v183 = v66;
        if (v66 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
          v70 = *((_DWORD *)this + 2);
          LODWORD(v66) = v183;
        }
        else
        {
          __src = 0;
          v70 = v66;
        }
        sub_1C4912E54(&__src, v70 - v65, v66);
        sub_1C4912E54(&__src, *(_DWORD *)(*(_QWORD *)(v13 + 32) + 112), v183);
        v71 = *((unsigned int *)this + 2);
        if (v71 > 0x40)
        {
          v73 = *(_QWORD **)this;
          v74 = (uint64_t *)__src;
          v75 = (unint64_t)(v71 + 63) >> 6;
          do
          {
            v76 = *v74++;
            *v73++ |= v76;
            --v75;
          }
          while (v75);
        }
        else
        {
          *(_QWORD *)this |= (unint64_t)__src;
        }
        v77 = v183;
        v190 = v183;
        if (v183 > 0x40)
        {
          v80 = (((unint64_t)v183 + 63) >> 3) & 0x3FFFFFF8;
          v189 = (void *)operator new[]();
          memcpy(v189, __src, v80);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v189);
          v77 = v190;
          v79 = (unint64_t)v189;
        }
        else
        {
          v78 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v183;
          if (!v183)
            v78 = 0;
          v79 = v78 & ~(unint64_t)__src;
        }
        v81 = *((unsigned int *)this + 6);
        if (v81 > 0x40)
        {
          v82 = *v16;
          v83 = (unint64_t)(v81 + 63) >> 6;
          v84 = (uint64_t *)v79;
          do
          {
            v85 = *v84++;
            *v82++ &= v85;
            --v83;
          }
          while (v83);
          goto LABEL_153;
        }
LABEL_150:
        *v16 = (const void *)((unint64_t)*v16 & v79);
LABEL_153:
        if (v77 >= 0x41 && v79)
          MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
        if (v183 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        v98 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 4);
        if (v98 < 0 && (v99 = v98 & 0x7FFFFFFF, v99 < *(_DWORD *)(a6 + 432)))
          v100 = *(_QWORD *)(*(_QWORD *)(a6 + 424) + 8 * v99);
        else
          v100 = 0;
        v186 = v100;
        v102 = sub_1C4825F50(&v186);
        if ((_DWORD)v101 == 1)
        if (v102 <= 0x3F)
        {
          v104 = sub_1C4825F50(&v186);
          if ((_DWORD)v103 == 1)
          llvm::APInt::trunc(this, v104, (llvm::APInt *)&__src);
          llvm::APInt::trunc((llvm::APInt *)((char *)this + 16), v104, (llvm::APInt *)&v196);
          v105 = v183;
          v106 = __src;
          v107 = v197;
          v108 = v196;
          if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
            MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
          *(_QWORD *)this = v106;
          *((_DWORD *)this + 2) = v105;
          if (*((_DWORD *)this + 6) >= 0x41u && *v16)
            MEMORY[0x1CAA32F9C](*v16, 0x1000C8000313F17);
          *((_QWORD *)this + 2) = v108;
          *((_DWORD *)this + 6) = v107;
        }
        v37 = v195;
LABEL_172:
        if (v37 < 0x41)
          goto LABEL_313;
        goto LABEL_346;
      }
      v69 = (unint64_t)*v16 >> v65;
    }
    LODWORD(v66) = *((_DWORD *)this + 2);
    goto LABEL_99;
  }
  if (v15 == 51)
  {
    v45 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 164);
    v183 = 1;
    __src = (void *)1;
    sub_1C54EB764((uint64_t)&v198, v45, this, (llvm::APInt *)&__src, (a7 + 1));
    v46 = *((_DWORD *)this + 6);
    if (v46 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)((char *)this + 16)) != v46)
        goto LABEL_179;
    }
    else if (*v16)
    {
      goto LABEL_179;
    }
    v72 = *((_DWORD *)this + 2);
    if (v72 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(this) == v72)
        goto LABEL_189;
    }
    else if (!*(_QWORD *)this)
    {
      goto LABEL_189;
    }
LABEL_179:
    v109 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 132);
    v193 = 1;
    v192 = 0;
    v195 = 1;
    v194 = 0;
    sub_1C54EB764((uint64_t)&v198, v109, (llvm::MDNode *)&v192, (llvm::APInt *)&__src, (a7 + 1));
    v110 = *((unsigned int *)this + 6);
    if (v110 > 0x40)
    {
      v111 = *v16;
      v112 = (uint64_t *)v194;
      v113 = (unint64_t)(v110 + 63) >> 6;
      do
      {
        v114 = *v112++;
        *v111++ &= v114;
        --v113;
      }
      while (v113);
    }
    else
    {
      *v16 = (const void *)((unint64_t)*v16 & (unint64_t)v194);
    }
    v115 = *((unsigned int *)this + 2);
    if (v115 > 0x40)
    {
      v116 = *(_QWORD **)this;
      v117 = (uint64_t *)v192;
      v118 = (unint64_t)(v115 + 63) >> 6;
      do
      {
        v119 = *v117++;
        *v116++ &= v119;
        --v118;
      }
      while (v118);
    }
    else
    {
      *(_QWORD *)this &= (unint64_t)v192;
    }
    if (v195 >= 0x41 && v194)
      MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
    if (v193 >= 0x41 && v192)
      MEMORY[0x1CAA32F9C](v192, 0x1000C8000313F17);
LABEL_189:
    if (v183 < 0x41)
      goto LABEL_314;
    v120 = __src;
    if (!__src)
      goto LABEL_314;
    goto LABEL_191;
  }
  if (v15 != 116)
    goto LABEL_314;
  v23 = *(unsigned int *)(v13 + 40);
  if ((_DWORD)v23)
  {
    v24 = 0;
    v25 = *(unsigned __int8 **)(v13 + 32);
    while (1)
    {
      v26 = *v25;
      v25 += 32;
      if (v26 == 17)
        break;
      if (v23 == ++v24)
        goto LABEL_25;
    }
  }
  else
  {
LABEL_25:
    LODWORD(v24) = -1;
  }
  v27 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 32 * v24 + 16);
  if (v27 > 2664)
  {
    if (v27 <= 2707)
    {
      v28 = 59;
      switch(v27)
      {
        case 2665:
          goto LABEL_37;
        case 2666:
          v28 = 60;
          goto LABEL_37;
        case 2667:
          v28 = 61;
          goto LABEL_37;
        case 2668:
          goto LABEL_314;
        case 2669:
          v121 = 39;
          goto LABEL_390;
        case 2670:
          v28 = 52;
          goto LABEL_37;
        case 2671:
          v28 = 53;
          goto LABEL_37;
        case 2672:
          v28 = 54;
          goto LABEL_37;
        case 2673:
          v28 = 55;
          goto LABEL_37;
        case 2674:
          v28 = 56;
          goto LABEL_37;
        case 2675:
          v28 = 57;
          goto LABEL_37;
        case 2676:
          v28 = 12;
          goto LABEL_37;
        case 2677:
          v28 = 64;
          goto LABEL_37;
        case 2678:
          v28 = 63;
          goto LABEL_37;
        case 2679:
          goto LABEL_199;
        default:
          if (v27 == 2706)
          {
            v28 = 65;
          }
          else
          {
            if (v27 != 2707)
              goto LABEL_314;
            v28 = 66;
          }
          break;
      }
      goto LABEL_37;
    }
    if (v27 > 2819)
    {
      if (v27 > 2840)
      {
        if (v27 == 2841)
        {
          v28 = 48;
        }
        else
        {
          if (v27 != 2848)
            goto LABEL_314;
          v28 = 68;
        }
      }
      else if (v27 == 2820)
      {
        v28 = 58;
      }
      else
      {
        if (v27 != 2822)
          goto LABEL_314;
        v28 = 41;
      }
      goto LABEL_37;
    }
    if (v27 > 2794)
    {
      switch(v27)
      {
        case 2795:
          v28 = 13;
          goto LABEL_37;
        case 2796:
          v28 = 15;
          goto LABEL_37;
        case 2807:
          v28 = 32;
          goto LABEL_37;
        case 2808:
          v28 = 39;
          goto LABEL_37;
        case 2809:
          v28 = 46;
          goto LABEL_37;
        case 2810:
          v28 = 47;
          goto LABEL_37;
        case 2814:
          v28 = 69;
          goto LABEL_37;
        case 2815:
        case 2816:
          v28 = 38;
          goto LABEL_37;
        default:
          goto LABEL_314;
      }
      goto LABEL_314;
    }
    if (v27 == 2708)
    {
      v28 = 67;
      goto LABEL_37;
    }
    if (v27 == 2769)
    {
      v28 = 16;
      goto LABEL_37;
    }
    if (v27 != 2732)
      goto LABEL_314;
    v121 = 40;
    goto LABEL_390;
  }
  if (v27 <= 2407)
  {
    if (v27 > 2131)
    {
      switch(v27)
      {
        case 2132:
          v28 = 6;
          goto LABEL_37;
        case 2133:
        case 2134:
        case 2135:
        case 2136:
        case 2137:
        case 2138:
        case 2141:
        case 2142:
        case 2143:
        case 2144:
        case 2148:
        case 2149:
        case 2153:
        case 2157:
        case 2158:
        case 2159:
        case 2160:
        case 2161:
        case 2162:
        case 2163:
        case 2164:
        case 2165:
        case 2166:
        case 2167:
        case 2168:
        case 2171:
        case 2172:
          goto LABEL_314;
        case 2139:
          v121 = 43;
          goto LABEL_390;
        case 2140:
          goto LABEL_226;
        case 2145:
          v28 = 49;
          goto LABEL_37;
        case 2146:
          v28 = 50;
          goto LABEL_37;
        case 2147:
          v28 = 51;
          goto LABEL_37;
        case 2150:
          v121 = 34;
          goto LABEL_390;
        case 2151:
          v121 = 33;
          goto LABEL_390;
        case 2152:
          v121 = 57;
          goto LABEL_390;
        case 2154:
          v121 = 55;
          goto LABEL_390;
        case 2155:
          v121 = 56;
          goto LABEL_390;
        case 2156:
          v121 = 41;
          goto LABEL_390;
        case 2169:
          v28 = 18;
          goto LABEL_37;
        case 2170:
          goto LABEL_389;
        case 2173:
          v28 = 19;
          goto LABEL_37;
        case 2174:
          v28 = 20;
          goto LABEL_37;
        case 2175:
          v28 = 21;
          goto LABEL_37;
        case 2176:
          v28 = 22;
          goto LABEL_37;
        default:
          v121 = 31;
          switch(v27)
          {
            case 2305:
              v121 = 38;
              goto LABEL_390;
            case 2306:
              v28 = 17;
              goto LABEL_37;
            case 2307:
              v121 = 32;
              goto LABEL_390;
            case 2308:
              goto LABEL_390;
            default:
              if (v27 != 2365)
                goto LABEL_314;
              v28 = 23;
              break;
          }
          goto LABEL_37;
      }
    }
    switch(v27)
    {
      case 2107:
        v28 = 5;
LABEL_37:
        v29 = sub_1C4A17AE8((uint64_t)v22);
        v30 = sub_1C4A50F4C(v28, v29);
        if (v30 > 0x1F)
          goto LABEL_314;
        v31 = v30 - v14;
        goto LABEL_48;
      case 1269:
LABEL_389:
        v121 = 16;
        break;
      case 2108:
        v121 = 52;
        break;
      default:
        goto LABEL_314;
    }
LABEL_390:
    v170 = llvm::dbgs(v22);
    v171 = sub_1C4816AD8(v170, "SR type GPUBaseInfo::SRegType::<");
    v172 = sub_1C614D714(v171, v121);
    sub_1C4816AD8(v172, ">\n");
    llvm::report_fatal_error((llvm *)"Special register type not implemented yet for G15", (const char *)1);
  }
  if (v27 <= 2483)
  {
    if (v27 <= 2409)
    {
      if (v27 == 2408)
        v28 = 24;
      else
        v28 = 25;
    }
    else
    {
      switch(v27)
      {
        case 2410:
          v28 = 26;
          break;
        case 2423:
          v28 = 11;
          break;
        case 2444:
LABEL_199:
          v28 = 31;
          break;
        default:
          goto LABEL_314;
      }
    }
    goto LABEL_37;
  }
  if (v27 > 2543)
  {
    switch(v27)
    {
      case 2544:
LABEL_226:
        v28 = 7;
        break;
      case 2586:
LABEL_221:
        v28 = 43;
        break;
      case 2587:
LABEL_207:
        v28 = 44;
        break;
      default:
        goto LABEL_314;
    }
    goto LABEL_37;
  }
  switch(v27)
  {
    case 2484:
      v28 = 36;
      goto LABEL_37;
    case 2485:
      v28 = 35;
      goto LABEL_37;
    case 2486:
      v28 = 34;
      goto LABEL_37;
    case 2491:
      goto LABEL_221;
    case 2492:
      goto LABEL_207;
    default:
      break;
  }
LABEL_314:
  v198 = (void (**)())off_1E816DB00;
  v143 = v205;
  if ((v205 & 1) != 0)
  {
    v144 = 16;
    v145 = &v206;
  }
  else
  {
    v144 = v207;
    if (!v207)
      goto LABEL_326;
    v145 = v206;
  }
  v146 = 40 * v144;
  v147 = v145 + 2;
  do
  {
    if (*((_DWORD *)v147 - 4) <= 0xFFFFFFFD)
    {
      if (*((_DWORD *)v147 + 4) >= 0x41u)
      {
        v149 = v147[1];
        if (v149)
          MEMORY[0x1CAA32F9C](v149, 0x1000C8000313F17);
      }
      if (*(_DWORD *)v147 >= 0x41u)
      {
        v148 = *(v147 - 1);
        if (v148)
          MEMORY[0x1CAA32F9C](v148, 0x1000C8000313F17);
      }
    }
    v147 += 5;
    v146 -= 40;
  }
  while (v146);
  v143 = v205;
LABEL_326:
  if ((v143 & 1) == 0)
    MEMORY[0x1CAA32FB4](v206, 8);
  v198 = off_1E7FA1810;
  if (v200 != *(_QWORD **)v199)
    free(v200);
}

uint64_t sub_1C4A50F4C(int a1, int a2)
{
  int v2;
  uint64_t result;
  int v4;
  unsigned int *v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;

  v2 = a1 - 5;
  result = 15;
  switch(v2)
  {
    case 0:
    case 8:
    case 10:
    case 12:
      goto LABEL_13;
    case 1:
    case 7:
    case 22:
    case 24:
      return 16;
    case 2:
      v4 = a2 - 1;
      if ((a2 - 1) >= 0xF)
        return 5;
      v5 = (unsigned int *)&unk_1C676B294;
      goto LABEL_34;
    case 3:
    case 40:
      v4 = a2 - 1;
      if ((a2 - 1) >= 0xF)
        return 2;
      v5 = (unsigned int *)&unk_1C676B2D0;
      goto LABEL_34;
    case 6:
    case 15:
    case 26:
    case 30:
      return 2;
    case 11:
    case 23:
    case 25:
    case 27:
    case 41:
    case 42:
    case 43:
    case 47:
    case 49:
    case 51:
    case 54:
    case 55:
    case 56:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_2;
    case 13:
      if (a2 > 0xF)
        goto LABEL_38;
      if (((1 << a2) & 0xFC00) != 0)
      {
LABEL_20:
        result = 10;
      }
      else if (((1 << a2) & 0x3E0) != 0)
      {
LABEL_2:
        result = 32;
      }
      else
      {
        if (((1 << a2) & 0x1E) != 0)
        {
          v9 = "LayerID not supported.";
LABEL_42:
          llvm::report_fatal_error((llvm *)v9, (const char *)1);
        }
LABEL_38:
        result = 8;
      }
      break;
    case 14:
      return 4;
    case 16:
    case 17:
    case 44:
    case 45:
    case 46:
    case 48:
    case 50:
    case 52:
      return 11;
    case 18:
      goto LABEL_20;
    case 19:
    case 20:
    case 21:
      v4 = a2 - 1;
      if ((a2 - 1) >= 0xF)
        goto LABEL_38;
      v5 = (unsigned int *)&unk_1C676B21C;
      goto LABEL_34;
    case 29:
    case 58:
      return 3;
    case 31:
      v6 = (a2 - 6) >= 0xA;
      v7 = 2;
      v8 = 5;
      goto LABEL_23;
    case 33:
      if (a2 <= 14)
        return 13;
      else
        return 19;
    case 34:
      return result;
    case 36:
      if ((a2 - 10) < 6 || (a2 - 1) > 8)
        goto LABEL_38;
      v9 = "SGID not supported.";
      goto LABEL_42;
    case 38:
      v4 = a2 - 1;
      if ((a2 - 1) >= 0xF)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v5 = (unsigned int *)&unk_1C676B30C;
LABEL_34:
        result = v5[v4];
      }
      break;
    case 39:
      v4 = a2 - 1;
      if ((a2 - 1) >= 0xF)
        goto LABEL_38;
      v5 = (unsigned int *)&unk_1C676B258;
      goto LABEL_34;
    case 53:
      return 5;
    case 59:
      v6 = (a2 - 6) >= 0xA;
      v7 = 3;
      v8 = 6;
LABEL_23:
      if (v6)
        return v7;
      else
        return v8;
    case 64:
      return 12;
    default:
      v9 = "Special register not implemented yet for G15";
      goto LABEL_42;
  }
  return result;
}

BOOL sub_1C4A51104(int a1, llvm::Type *this, llvm::Type *a3)
{
  const char *v4;
  unsigned int PrimitiveSizeInBits;
  const char *v6;
  unsigned int v7;

  if (*((_BYTE *)this + 8) != 13 || *((_BYTE *)a3 + 8) != 13)
    return 0;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
  if ((_DWORD)v4 == 1)
  v7 = llvm::Type::getPrimitiveSizeInBits(a3);
  if ((_DWORD)v6 == 1)
  return v7 > 0xF && PrimitiveSizeInBits > v7;
}

BOOL sub_1C4A51194(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL8 result;
  BOOL v7;

  v3 = *a3;
  if (!*a3)
    goto LABEL_7;
  v4 = *(_DWORD *)(*(_QWORD *)v3 + 8);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v3 + 16) + 8);
  v5 = v4 >> 8;
  result = 1;
  if (v5 != 3 && v5 != 64)
  {
LABEL_7:
    if (v3)
      v7 = *((_BYTE *)a3 + 16) == 0;
    else
      v7 = 1;
    return v7 || a3[3] == 0;
  }
  return result;
}

BOOL sub_1C4A511F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;

  v2 = a2;
  v20 = &v21;
  v21 = 0;
  if (sub_1C4E7B6EC(&v20, a2) && v21)
    return 0;
  v4 = *(unsigned __int8 *)(v2 + 16);
  if (v4 != 62)
  {
    if (v4 != 84)
      goto LABEL_17;
    v5 = *(_QWORD *)(v2 - 32);
    if (!v5)
      goto LABEL_17;
    if (*(_BYTE *)(v5 + 16))
      goto LABEL_17;
    if (*(_QWORD *)(v5 + 24) != *(_QWORD *)(v2 + 72))
      goto LABEL_17;
    if ((*(_BYTE *)(v5 + 33) & 0x20) == 0)
      goto LABEL_17;
    result = 0;
    v6 = *(_DWORD *)(v5 + 36);
    if (v6 != 139 && v6 != 2484 && v6 != 2677)
      goto LABEL_17;
    return result;
  }
  v7 = **(_QWORD **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
  v8 = *(_DWORD *)(v7 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(v7 + 16) + 8);
  if ((v8 & 0xFFFFFF00) == 0x4000)
    return 0;
  while (1)
  {
LABEL_17:
    v9 = v4 - 54;
    if (v9 > 0x23)
      return 1;
    if (((1 << v9) & 0x800987000) == 0)
      break;
LABEL_19:
    v10 = *(_DWORD *)(v2 + 20);
    if ((v10 & 0x40000000) != 0)
      v11 = *(uint64_t **)(v2 - 8);
    else
      v11 = (uint64_t *)(v2 - 32 * (v10 & 0x7FFFFFF));
    v2 = *v11;
    v4 = *(unsigned __int8 *)(*v11 + 16);
    if (v2)
      v12 = v4 >= 0x1C;
    else
      v12 = 0;
    if (!v12)
      return 1;
  }
  if (!v9)
  {
    v13 = *(_DWORD *)(v2 + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = *(_QWORD *)(v2 - 8);
    else
      v14 = v2 - 32 * (v13 & 0x7FFFFFF);
    v15 = *(_QWORD *)(v14 + 32);
    if (v15)
      v16 = *(_BYTE *)(v15 + 16) == 16;
    else
      v16 = 0;
    if (!v16)
      return 1;
    v17 = (_QWORD *)(v15 + 24);
    if (*(_DWORD *)(v15 + 32) >= 0x41u)
      v17 = (_QWORD *)*v17;
    if (*v17 != 16)
      return 1;
    goto LABEL_19;
  }
  if (v9 != 6)
    return 1;
  v18 = **(_QWORD **)(v2 - 32);
  v19 = *(_DWORD *)(v18 + 8);
  if ((v19 & 0xFE) == 0x12)
    v19 = *(_DWORD *)(**(_QWORD **)(v18 + 16) + 8);
  return (v19 & 0xFFFFFF00) != 0x4000;
}

BOOL sub_1C4A513C0(int a1, llvm::Type ***this, uint64_t a3)
{
  llvm::Type *v4;
  int PrimitiveSizeInBits;
  int v6;

  v4 = (llvm::Type *)this;
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    v4 = *this[2];
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v4);
  if (PrimitiveSizeInBits != 32 && PrimitiveSizeInBits != 16)
    return 0;
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
    a3 = **(_QWORD **)(a3 + 16);
  v6 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3);
  return v6 == 32 || v6 == 64;
}

uint64_t sub_1C4A5144C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t NamedMetadata;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  __int16 v22;

  v2 = **(unsigned __int16 **)(a2 + 16) - 70;
  v3 = v2 > 0x33;
  v4 = (1 << v2) & 0xC000000000001;
  if (!v3 && v4 != 0)
  {
    v7 = *(_QWORD **)(*(_QWORD *)(a2 + 24) + 32);
    v8 = *(_QWORD *)(*v7 + 40);
    v21 = "agx.reduce.reg.pressure";
    v22 = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(v8, (uint64_t)&v21);
    if (NamedMetadata)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                                  - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                      + 128);
      v11 = (_QWORD *)(v10 + 24);
      if (*(_DWORD *)(v10 + 32) >= 0x41u)
        v11 = (_QWORD *)*v11;
      if (*v11)
        return 1;
    }
    if (*(_QWORD *)(a2 + 24) == v7[41])
    {
      v13 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
      v14 = v7[5];
      if ((v13 & 0x80000000) != 0)
        v15 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
      else
        v15 = (uint64_t *)(*(_QWORD *)(v14 + 272) + 8 * v13);
      v16 = *v15;
      if (v16)
      {
        while ((*(_BYTE *)(v16 + 3) & 1) != 0)
        {
          v16 = *(_QWORD *)(v16 + 24);
          if (!v16)
            goto LABEL_18;
        }
        while (1)
        {
          v16 = *(_QWORD *)(v16 + 24);
          if (!v16)
            break;
          if ((*(_BYTE *)(v16 + 3) & 1) == 0)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        if ((v13 & 0x80000000) != 0)
          v17 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
        else
          v17 = (uint64_t *)(*(_QWORD *)(v14 + 272) + 8 * v13);
        v18 = *v17;
        if (v18)
        {
          while ((*(_BYTE *)(v18 + 3) & 1) != 0)
          {
            v18 = *(_QWORD *)(v18 + 24);
            if (!v18)
              return 0;
          }
          v19 = *(_QWORD *)(v18 + 8);
          if (**(_WORD **)(v19 + 16) == 69)
            return 1;
          result = 1;
          while (1)
          {
            v18 = *(_QWORD *)(v18 + 24);
            if (!v18)
              break;
            if ((*(_BYTE *)(v18 + 3) & 1) == 0)
            {
              v20 = *(_QWORD *)(v18 + 8);
              if (v20 != v19)
              {
                v19 = *(_QWORD *)(v18 + 8);
                if (**(_WORD **)(v20 + 16) == 69)
                  return result;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C4A515FC()
{
  return 5;
}

uint64_t sub_1C4A51604()
{
  return 0;
}

uint64_t sub_1C4A5160C()
{
  return 0;
}

uint64_t sub_1C4A51614()
{
  return 0;
}

uint64_t sub_1C4A5161C()
{
  return 1;
}

uint64_t sub_1C4A51624(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  sub_1C54E9CDC(a1);
  sub_1C54EB3A8(a1);
  llvm::initializeMachineDominatorTreePass(a1);
  llvm::initializeMachineLoopInfoPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Preprocess instructions before the instruction selector";
  *(_QWORD *)(v2 + 8) = 55;
  *(_QWORD *)(v2 + 16) = "agx3iselprep";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1ED7ED6F8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C6152694;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4A516D8(_QWORD *a1, _DWORD *a2, int *a3, uint64_t a4, int *a5)
{
  unint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  char *v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t *v45;
  _QWORD *v46;
  int GenericVirtualRegister;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _DWORD v56[4];
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  _DWORD v69[2];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v10 = sub_1C554C050(*a3, a1[34]);
  if (!v11)
    return 0;
  v12 = v10;
  v13 = a1[34];
  v14 = *a2;
  if ((v14 & 0x80000000) != 0)
    v15 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
  else
    v15 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * v14);
  v16 = *v15;
  if ((*(_BYTE *)(v16 + 3) & 1) == 0)
    v16 = *(_QWORD *)(v16 + 24);
  if ((v14 & 0x80000000) == 0)
    return 0;
  v17 = v14 & 0x7FFFFFFF;
  if (v17 >= *(_DWORD *)(v13 + 432))
    return 0;
  v18 = 0;
  if (*(_QWORD *)(*(_QWORD *)(v13 + 424) + 8 * v17) == 129)
  {
    v19 = *(_QWORD *)(v16 + 8);
    if (**(unsigned __int16 **)(v19 + 16) - 67 >= 0xFFFFFFFE)
    {
      v18 = 0;
      if ((*a5 & 0xFFFFFFFE) == 0x20 && v10 <= 1)
      {
        v20 = *(_QWORD *)(v13 + 24);
        v21 = *(_QWORD *)(v20 + 16 * v17 + 8);
        if (v21)
        {
          while ((*(_BYTE *)(v21 + 3) & 1) != 0)
          {
            v21 = *(_QWORD *)(v21 + 24);
            if (!v21)
              goto LABEL_16;
          }
          v25 = *(_QWORD *)(v21 + 8);
          if (**(_WORD **)(v25 + 16) != 51)
            return 0;
          v26 = 1;
          while (1)
          {
            v21 = *(_QWORD *)(v21 + 24);
            if (!v21)
              break;
            if ((*(_BYTE *)(v21 + 3) & 1) == 0)
            {
              v27 = *(_QWORD *)(v21 + 8);
              if (v27 != v25)
              {
                v18 = 0;
                v28 = v26 + 1;
                if (**(_WORD **)(v27 + 16) == 51)
                {
                  ++v26;
                  v29 = v28 >= 4;
                }
                else
                {
                  v29 = 1;
                }
                v25 = *(_QWORD *)(v21 + 8);
                if (v29)
                  return v18;
              }
            }
          }
        }
LABEL_16:
        v22 = *(_QWORD *)(v19 + 32);
        v23 = (const char *)*(unsigned int *)(v22 + 36);
        if ((v23 & 0x80000000) != 0)
          v24 = (uint64_t *)(v20 + 16 * (v23 & 0x7FFFFFFF) + 8);
        else
          v24 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * (_QWORD)v23);
        v54 = **(unsigned __int16 **)(v19 + 16);
        v55 = v19;
        v30 = *v24;
        if (v30
          && ((*(_BYTE *)(v30 + 3) & 1) != 0 || (v30 = *(_QWORD *)(v30 + 24)) != 0 && (*(_BYTE *)(v30 + 3) & 1) != 0))
        {
          v31 = *(_QWORD *)(v30 + 8);
        }
        else
        {
          v31 = 0;
        }
        v32 = *(_QWORD *)(v13 + 272);
        if ((sub_1C491D2A0(v31, v20, v32) & 1) != 0)
          return 0;
        v33 = *(unsigned int *)(v22 + 68);
        v34 = (uint64_t *)((int)v33 >= 0 ? v32 + 8 * v33 : v20 + 16 * (v33 & 0x7FFFFFFF) + 8);
        v35 = *v34;
        if (v35
          && ((*(_BYTE *)(v35 + 3) & 1) != 0 || (v35 = *(_QWORD *)(v35 + 24)) != 0 && (*(_BYTE *)(v35 + 3) & 1) != 0))
        {
          v36 = *(_QWORD *)(v35 + 8);
        }
        else
        {
          v36 = 0;
        }
        if ((sub_1C491D2A0(v36, v20, v32) & 1) != 0)
          return 0;
        for (i = 0; i != 64; i += 32)
        {
          v39 = (char *)&v62 + i;
          *((_DWORD *)v39 + 2) = 1;
          *(_QWORD *)v39 = 0;
          *((_DWORD *)v39 + 6) = 1;
          *((_QWORD *)v39 + 2) = 0;
        }
        sub_1C54EB4A0(a1[33], v23, (uint64_t)&v57);
        if (v63 >= 0x41 && v62)
          MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
        v40 = v57;
        v62 = v57;
        v41 = v58;
        v63 = v58;
        v58 = 0;
        if (v65 >= 0x41 && v64)
        {
          MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
          v64 = v59;
          v65 = v60;
          v60 = 0;
          if (v58 >= 0x41 && v57)
            MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
        }
        else
        {
          v64 = v59;
          v65 = v60;
        }
        sub_1C54EB4A0(a1[33], (const char *)*(unsigned int *)(*(_QWORD *)(v55 + 32) + 68), (uint64_t)&v57);
        if (v67 >= 0x41 && v66)
          MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
        v42 = v57;
        v66 = v57;
        v43 = v58;
        v67 = v58;
        v58 = 0;
        if (v69[0] >= 0x41u && v68)
        {
          MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
          v68 = v59;
          v69[0] = v60;
          v60 = 0;
          if (v58 >= 0x41 && v57)
            MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
        }
        else
        {
          v68 = v59;
          v69[0] = v60;
        }
        v44 = &v62;
        if (v41 >= 0x41)
          v44 = (unint64_t *)v40;
        if (*v44 != 65534)
          goto LABEL_60;
        v45 = &v66;
        if (v43 >= 0x41)
          v45 = (unint64_t *)v42;
        if (*v45 == 65534)
        {
          if (v54 == 66 && v12 == 1 || v54 == 65 && !v12)
          {
            *a5 = dword_1C676B368[*a5];
            v12 ^= 1uLL;
          }
        }
        else
        {
LABEL_60:
          v18 = 0;
          if (v54 != 66 || v12)
          {
LABEL_63:
            for (j = 0; j != -16; j -= 8)
            {
              v51 = (char *)&v62 + j * 4;
              if (v69[j] >= 0x41u)
              {
                v52 = *((_QWORD *)v51 + 6);
                if (v52)
                  MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
              }
              if (*((_DWORD *)v51 + 10) >= 0x41u)
              {
                v53 = *((_QWORD *)v51 + 4);
                if (v53)
                  MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
              }
            }
            return v18;
          }
        }
        v46 = (_QWORD *)a1[31];
        v46[5] = *(_QWORD *)(a4 + 24);
        v46[6] = a4;
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[34], 257, "", 0);
        *a2 = GenericVirtualRegister;
        v18 = 1;
        v56[0] = GenericVirtualRegister;
        v56[2] = 1;
        v48 = *(_QWORD *)(v55 + 32);
        LODWORD(v57) = *(_DWORD *)(v48 + 36);
        LODWORD(v59) = 0;
        v60 = *(_DWORD *)(v48 + 68);
        v61 = 0;
        (*(void (**)(_QWORD *, uint64_t, _DWORD *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v46 + 32))(v46, 76, v56, 1, &v57, 2, 0);
        v57 = 257;
        v58 = 0;
        sub_1C5544694((uint64_t)v46, &v57, 65537 * v12);
        *a3 = *(_DWORD *)(*(_QWORD *)(v49 + 32) + 4);
        goto LABEL_63;
      }
    }
  }
  return v18;
}

uint64_t sub_1C4A51CB4(int a1, uint64_t a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  int v14;

  v2 = atomic_load((unsigned __int8 *)&qword_1ED7ED708);
  if ((v2 & 1) == 0)
  {
    v13 = a2;
    v14 = a1;
    v12 = __cxa_guard_acquire(&qword_1ED7ED708);
    a2 = v13;
    a1 = v14;
    if (v12)
    {
      dword_1ED7ED6FC = 2;
      __cxa_guard_release(&qword_1ED7ED708);
      a2 = v13;
      a1 = v14;
    }
  }
  v3 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v3 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  v4 = *v3;
  if (!v4)
  {
LABEL_19:
    v5 = 0;
    v7 = 1;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(v4 + 3) & 0x81) != 0)
  {
    do
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        goto LABEL_19;
    }
    while ((*(_DWORD *)v4 & 0x81000000) != 0);
  }
  LODWORD(v5) = 0;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = 1;
LABEL_9:
  v8 = **(unsigned __int16 **)(v6 + 16) == 45;
  v9 = v5 + 1;
  if (**(_WORD **)(v6 + 16) == 45)
    v5 = (v5 + 1);
  else
    v5 = v5;
  if (v9 > dword_1ED7ED6FC)
    v8 = 0;
  v7 &= v8;
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      break;
    if ((*(_DWORD *)v4 & 0x81000000) == 0 && *(_QWORD *)(v4 + 8) != v6)
    {
      v6 = *(_QWORD *)(v4 + 8);
      goto LABEL_9;
    }
  }
LABEL_20:
  if ((_DWORD)v5)
    v10 = v7;
  else
    v10 = 0;
  return v10 | (v5 << 32);
}

uint64_t sub_1C4A51DD8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED7ED710);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED710))
  {
    byte_1ED7ED6F9 = 1;
    __cxa_guard_release(&qword_1ED7ED710);
  }
  return byte_1ED7ED6F9;
}

uint64_t sub_1C4A51E28(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if (**(_WORD **)(a1 + 16) != 76 || *(_DWORD *)(a1 + 40) != 3)
    return 0;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned int *)(v5 + 36);
  if ((int)v6 >= 0)
    v7 = (uint64_t *)(a3 + 8 * v6);
  else
    v7 = (uint64_t *)(a2 + 16 * (v6 & 0x7FFFFFFF) + 8);
  v8 = *v7;
  if (v8)
  {
    if ((*(_BYTE *)(v8 + 3) & 1) != 0)
      goto LABEL_26;
    v8 = *(_QWORD *)(v8 + 24);
    if (!v8)
      goto LABEL_10;
    if ((*(_BYTE *)(v8 + 3) & 1) != 0)
LABEL_26:
      v8 = *(_QWORD *)(v8 + 8);
    else
      v8 = 0;
  }
LABEL_10:
  v9 = *(unsigned int *)(v5 + 68);
  if ((int)v9 >= 0)
    v10 = (uint64_t *)(a3 + 8 * v9);
  else
    v10 = (uint64_t *)(a2 + 16 * (v9 & 0x7FFFFFFF) + 8);
  v11 = *v10;
  if (v11)
  {
    if ((*(_BYTE *)(v11 + 3) & 1) == 0)
    {
      v11 = *(_QWORD *)(v11 + 24);
      if (!v11)
        goto LABEL_14;
      if ((*(_BYTE *)(v11 + 3) & 1) == 0)
      {
        v11 = 0;
        goto LABEL_14;
      }
    }
    v11 = *(_QWORD *)(v11 + 8);
  }
LABEL_14:
  if (**(_WORD **)(v8 + 16) == 313 && **(_WORD **)(v11 + 16) == 313)
  {
    *a4 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 4);
    a4[1] = *(_DWORD *)(*(_QWORD *)(v11 + 32) + 4);
    return 1;
  }
  return 0;
}

uint64_t sub_1C4A51F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  int v21;
  _BOOL4 v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL4 v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _BOOL4 v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _DWORD *v131;
  int v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  void *v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  _DWORD *v162;
  unsigned int v163;
  unsigned int v164;
  char v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  char v169;
  BOOL v170;
  int v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  size_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  int v185;
  uint64_t v186;
  char v187;
  char v188;
  uint64_t v189;
  char v190;
  BOOL v191;
  BOOL v192;
  _DWORD *v194;
  const char *v195;
  int v196;
  char v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unsigned __int8 v203;
  unsigned __int8 v204;
  unint64_t v205;
  unsigned __int8 v206;
  unsigned __int8 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  BOOL v222;
  uint64_t v223;
  llvm::detail::DoubleAPFloat *v225;
  void *v226;
  unint64_t *v227;
  llvm::detail::DoubleAPFloat *v228;
  void *v229;
  unint64_t *v230;
  unint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  unsigned int i;
  int v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  BOOL v261;
  int v262;
  int v263;
  uint64_t v264;
  unint64_t v265;
  const char *v266;
  uint64_t v267;
  char v268;
  uint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int *v275;
  unsigned int v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int *v281;
  unsigned int v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v291;
  unint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  int GenericVirtualRegister;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  char v334;
  unsigned __int8 *v335;
  uint64_t v336;
  unsigned __int8 *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  unsigned int v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  int v361;
  _QWORD *v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  int v368;
  _QWORD *v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t v376;
  uint64_t v377;
  char v378;
  int v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unsigned __int8 *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char v396;
  llvm::MachineFunction *v398;
  llvm::MachineFunction *v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t *v402;
  unsigned int v403;
  uint64_t v404;
  char v405;
  uint64_t *v406;
  uint64_t v407;
  unint64_t v408;
  int v409;
  uint64_t v410;
  unint64_t *v411;
  uint64_t v412;
  unsigned int v413;
  int v414;
  int v415;
  int v416;
  uint64_t v417;
  int v418;
  void *v419;
  uint64_t v420;
  _BYTE v421[32];
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t *v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  int v433;
  int v434;
  uint64_t v435;

  v4 = 0;
  v435 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)(a1 + 248);
  v5[5] = *(_QWORD *)(a2 + 24);
  v5[6] = a2;
  v6 = **(unsigned __int16 **)(a2 + 16);
  if (v6 <= 0x4C)
  {
    if (**(unsigned __int16 **)(a2 + 16) <= 0x32u)
    {
      if (v6 != 45)
      {
        if (v6 != 46)
          return v4;
        v7 = *(_DWORD **)(a2 + 32);
        v8 = v7[1];
        if ((v8 & 0x80000000) == 0)
          return 0;
        v9 = *(_QWORD *)(a1 + 272);
        if ((v8 & 0x7FFFFFFFu) >= *(_DWORD *)(v9 + 432))
          return 0;
        v10 = *(unsigned __int16 *)(a2 + 44);
        v11 = *(_QWORD *)(*(_QWORD *)(v9 + 424) + 8 * (v8 & 0x7FFFFFFF));
        if (v11 != 257 && v11 != 129)
          return 0;
        v12 = v7[9];
        if ((v12 & 0x80000000) != 0)
          v13 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
        else
          v13 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v12);
        v341 = *v13;
        if ((*(_BYTE *)(v341 + 3) & 1) == 0)
          v341 = *(_QWORD *)(v341 + 24);
        v342 = *(_QWORD *)(v341 + 8);
        if (**(_WORD **)(v342 + 16) != 47)
          return 0;
        v343 = (uint64_t *)((v12 & 0x80000000) != 0
                         ? *(_QWORD *)(v9 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(v9 + 272) + 8 * v12);
        v350 = *v343;
        if (!v350)
          return 0;
        while ((*(_BYTE *)(v350 + 3) & 1) != 0)
        {
          v350 = *(_QWORD *)(v350 + 24);
          if (!v350)
            return 0;
        }
        v4 = 0;
        while (1)
        {
          v350 = *(_QWORD *)(v350 + 24);
          if (!v350)
            break;
          if ((*(_BYTE *)(v350 + 3) & 1) == 0)
            return v4;
        }
        v353 = *(_QWORD *)(a1 + 288);
        v354 = *(_DWORD *)(v353 + 264);
        if (!v354)
          goto LABEL_692;
        v355 = *(_QWORD *)(v342 + 24);
        v356 = *(_QWORD *)(v353 + 248);
        v357 = v354 - 1;
        v358 = ((v355 >> 4) ^ (v355 >> 9)) & v357;
        v359 = *(_QWORD *)(v356 + 16 * v358);
        if (v355 == v359)
        {
LABEL_677:
          v362 = *(_QWORD **)(v356 + 16 * v358 + 8);
          if (v362)
          {
            v363 = 0;
            do
            {
              v362 = (_QWORD *)*v362;
              ++v363;
            }
            while (v362);
LABEL_682:
            v364 = *(_QWORD *)(a2 + 24);
            v365 = ((v364 >> 4) ^ (v364 >> 9)) & v357;
            v366 = *(_QWORD *)(v356 + 16 * v365);
            if (v364 == v366)
            {
LABEL_686:
              v369 = *(_QWORD **)(v356 + 16 * v365 + 8);
              if (v369)
              {
                v370 = 0;
                do
                {
                  v369 = (_QWORD *)*v369;
                  ++v370;
                }
                while (v369);
LABEL_691:
                if (v363 == v370)
                {
LABEL_692:
                  LODWORD(v410) = v7[1];
                  LODWORD(v411) = 1;
                  v371 = *(_QWORD *)(v342 + 32);
                  LODWORD(v422) = *(_DWORD *)(v371 + 36);
                  LODWORD(v424) = 0;
                  LODWORD(v425) = *(_DWORD *)(v371 + 68);
                  LODWORD(v427) = 0;
                  LODWORD(v428) = v7[17];
                  LODWORD(v430) = 0;
                  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*v5 + 32))(v5, 57, &v410, 1, &v422, 3, v10 | 0x100000000);
                  v338 = *(_QWORD *)(a2 + 24);
                  v339 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v339 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v339 = a2;
                      do
                        v339 = *(_QWORD *)(v339 + 8);
                      while ((*(_WORD *)(v339 + 44) & 8) != 0);
                    }
                  }
                  goto LABEL_639;
                }
                return 0;
              }
            }
            else
            {
              v367 = 1;
              while (v366 != -4096)
              {
                v368 = v365 + v367++;
                v365 = v368 & v357;
                v366 = *(_QWORD *)(v356 + 16 * v365);
                if (v364 == v366)
                  goto LABEL_686;
              }
            }
            v370 = 0;
            goto LABEL_691;
          }
        }
        else
        {
          v360 = 1;
          while (v359 != -4096)
          {
            v361 = v358 + v360++;
            v358 = v361 & v357;
            v359 = *(_QWORD *)(v356 + 16 * v358);
            if (v355 == v359)
              goto LABEL_677;
          }
        }
        v363 = 0;
        goto LABEL_682;
      }
      v121 = *(_DWORD **)(a2 + 32);
      v122 = v121[1];
      if (v122 < 0
        && (v123 = *(_QWORD *)(a1 + 272), v124 = v122 & 0x7FFFFFFF, v124 < *(_DWORD *)(v123 + 432)))
      {
        v410 = *(_QWORD *)(*(_QWORD *)(v123 + 424) + 8 * v124);
        v419 = (void *)513;
        if (v410 == 513)
          v125 = 4;
        else
          v125 = 8;
      }
      else
      {
        v410 = 0;
        v419 = (void *)513;
        v125 = 8;
      }
      LODWORD(v417) = v125;
      v161 = (uint64_t)(v121 + 8);
      v162 = v121 + 16;
      v163 = v121[9];
      v164 = v121[17];
      v422 = (unint64_t)&v410;
      v423 = (uint64_t)&v419;
      v424 = a1;
      v425 = &v417;
      v426 = a2;
      v427 = v5;
      LOBYTE(v409) = 0;
      v4 = sub_1C4A549C0((uint64_t)&v422, (uint64_t)(v121 + 8), &v409, 0);
      if ((_DWORD)v4)
        v163 = v121[9];
      if (sub_1C4A549C0((uint64_t)&v422, (uint64_t)(v121 + 16), &v409, v409))
      {
        v164 = v121[17];
        v4 = 1;
      }
      sub_1C554C050(v164, *(_QWORD *)(a1 + 272));
      if (v165)
        return v4;
      v166 = *(_QWORD *)(a1 + 272);
      v167 = (uint64_t *)((v163 & 0x80000000) != 0
                       ? *(_QWORD *)(v166 + 24) + 16 * (v163 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v166 + 272) + 8 * v163);
      v247 = *v167;
      if (!v247)
        return v4;
      v248 = v417;
      if ((*(_BYTE *)(v247 + 3) & 1) == 0)
      {
        v247 = *(_QWORD *)(v247 + 24);
        if (!v247 || (*(_BYTE *)(v247 + 3) & 1) == 0)
          return v4;
      }
      v249 = *(_QWORD *)(v247 + 8);
      if (!v249 || **(_WORD **)(v249 + 16) != 127 || *(_DWORD *)(v249 + 40) != 3)
        return v4;
      v250 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v249 + 32) + 68), v166);
      if (!v251 || v250 > v248)
        return v4;
      v253 = *(_QWORD *)(a1 + 272);
      v254 = (uint64_t *)((v164 & 0x80000000) != 0
                       ? *(_QWORD *)(v253 + 24) + 16 * (v164 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v253 + 272) + 8 * v164);
      v385 = *v254;
      if (v385)
      {
        v393 = v417;
        if ((*(_BYTE *)(v385 + 3) & 1) != 0 || (v385 = *(_QWORD *)(v385 + 24)) != 0 && (*(_BYTE *)(v385 + 3) & 1) != 0)
        {
          v394 = *(_QWORD *)(v385 + 8);
          if (v394 && **(_WORD **)(v394 + 16) == 127 && *(_DWORD *)(v394 + 40) == 3)
          {
            v395 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v394 + 32) + 68), v253);
            if (v396 && v395 <= v393)
              return v4;
          }
        }
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 280) + 32))(*(_QWORD *)(a1 + 280), a2);
      llvm::MachineOperand::setReg(v161, v164);
      v374 = (uint64_t)v162;
      v375 = v163;
LABEL_701:
      llvm::MachineOperand::setReg(v374, v375);
      goto LABEL_702;
    }
    if (v6 == 51)
    {
      v5[5] = *(_QWORD *)(a2 + 24);
      v5[6] = a2;
      v131 = *(_DWORD **)(a2 + 32);
      LODWORD(v419) = v131[12];
      v132 = v131[1];
      LODWORD(v417) = v131[17];
      v409 = v131[25];
      v133 = v131[33];
      v134 = v131[41];
      if (sub_1C4A516D8((_QWORD *)a1, &v417, &v409, a2, (int *)&v419))
      {
        LODWORD(v410) = v132;
        LODWORD(v411) = 1;
        LODWORD(v422) = (_DWORD)v419;
        LODWORD(v424) = 2;
        LODWORD(v425) = v417;
        LODWORD(v427) = 0;
        LODWORD(v428) = v409;
        LODWORD(v430) = 0;
      }
      else
      {
        v168 = sub_1C554C050(v409, *(_QWORD *)(a1 + 272));
        if (!v169)
          return 0;
        v170 = (_DWORD)v419 == 40 || (_DWORD)v419 == 36;
        if (v170 && v168 == 256)
        {
          if ((_DWORD)v419 == 36)
            v171 = 37;
          else
            v171 = 41;
          v172 = v417;
          if ((v417 & 0x80000000) != 0
            && (v173 = *(_QWORD *)(a1 + 272), (v417 & 0x7FFFFFFF) < *(_DWORD *)(v173 + 432)))
          {
            v174 = *(_QWORD *)(*(_QWORD *)(v173 + 424) + 8 * (v417 & 0x7FFFFFFF));
          }
          else
          {
            v174 = 0;
          }
          v422 = v174;
          LODWORD(v423) = 0;
          v257 = sub_1C5544694((uint64_t)v5, &v422, 255);
          LODWORD(v410) = v132;
          LODWORD(v411) = 1;
          LODWORD(v422) = v171;
          LODWORD(v424) = 2;
        }
        else
        {
          v4 = 0;
          if ((_DWORD)v419 != 38 || v168 != -1)
            return v4;
          v172 = v417;
          if ((v417 & 0x80000000) != 0
            && (v255 = *(_QWORD *)(a1 + 272), (v417 & 0x7FFFFFFF) < *(_DWORD *)(v255 + 432)))
          {
            v256 = *(_QWORD *)(*(_QWORD *)(v255 + 424) + 8 * (v417 & 0x7FFFFFFF));
          }
          else
          {
            v256 = 0;
          }
          v422 = v256;
          LODWORD(v423) = 0;
          v257 = sub_1C5544694((uint64_t)v5, &v422, 0);
          LODWORD(v410) = v132;
          LODWORD(v411) = 1;
          LODWORD(v422) = 39;
          LODWORD(v424) = 2;
        }
        LODWORD(v425) = v172;
        LODWORD(v427) = 0;
        v428 = v257;
        v429 = v258;
        LODWORD(v430) = 1;
      }
      LODWORD(v431) = v133;
      v432 = 0;
      v433 = v134;
      v434 = 0;
      (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v5 + 32))(v5, 51, &v410, 1, &v422, 5, 0);
      v338 = *(_QWORD *)(a2 + 24);
      v339 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v339 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v339 = a2;
          do
            v339 = *(_QWORD *)(v339 + 8);
          while ((*(_WORD *)(v339 + 44) & 8) != 0);
        }
      }
      goto LABEL_639;
    }
    if (v6 != 66)
      return v4;
    v17 = *(_QWORD *)(a2 + 32);
    v18 = (const char *)*(unsigned int *)(v17 + 36);
    v19 = (const char *)*(unsigned int *)(v17 + 68);
    v20 = *(_QWORD *)(a1 + 264);
    sub_1C54EB4A0(v20, v18, (uint64_t)&v422);
    sub_1C54EB4A0(v20, v19, (uint64_t)&v410);
    v21 = v423;
    if (v423 >= 0x41)
    {
      v175 = (((unint64_t)v423 + 63) >> 3) & 0x3FFFFFF8;
      v176 = (char *)operator new[]();
      memcpy(v176, (const void *)v422, v175);
      v177 = 0;
      v178 = v410;
      do
      {
        *(_QWORD *)&v176[v177] |= *(_QWORD *)(v178 + v177);
        v177 += 8;
      }
      while (v175 != v177);
      LODWORD(v420) = v21;
      v419 = v176;
      v22 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v419) == v21;
      MEMORY[0x1CAA32F9C](v176, 0x1000C8000313F17);
    }
    else if ((_DWORD)v423)
    {
      v22 = (v410 | v422) == 0xFFFFFFFFFFFFFFFFLL >> -(char)v423;
    }
    else
    {
      v22 = 1;
    }
    if (v413 >= 0x41 && v412)
      MEMORY[0x1CAA32F9C](v412, 0x1000C8000313F17);
    if (v411 >= 0x41 && v410)
      MEMORY[0x1CAA32F9C](v410, 0x1000C8000313F17);
    if (v425 >= 0x41 && v424)
      MEMORY[0x1CAA32F9C](v424, 0x1000C8000313F17);
    if (v423 >= 0x41 && v422)
      MEMORY[0x1CAA32F9C](v422, 0x1000C8000313F17);
    if (v22)
    {
      sub_1C554C050((int)v19, *(_QWORD *)(a1 + 272));
      if (!v244)
      {
        v245 = *(_QWORD *)(a1 + 272);
        v246 = (uint64_t *)((v18 & 0x80000000) != 0
                         ? *(_QWORD *)(v245 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(v245 + 272) + 8 * (_QWORD)v18);
        v340 = *v246;
        if (v340)
        {
          if ((*(_BYTE *)(v340 + 3) & 1) != 0
            || (v340 = *(_QWORD *)(v340 + 24)) != 0 && (*(_BYTE *)(v340 + 3) & 1) != 0)
          {
            v376 = *(_QWORD *)(v340 + 8);
            if (v376)
            {
              if (**(_WORD **)(v376 + 16) == 127 && *(_DWORD *)(v376 + 40) == 3)
              {
                v377 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v376 + 32) + 68), v245);
                if (v378)
                {
                  if (v377 >= 5)
                    v379 = (int)v19;
                  else
                    v379 = (int)v18;
                  if (v377 < 5)
                    LODWORD(v18) = (_DWORD)v19;
                  LODWORD(v19) = v379;
                }
              }
            }
          }
        }
      }
      LODWORD(v410) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      LODWORD(v411) = 1;
      LODWORD(v422) = (_DWORD)v18;
      LODWORD(v424) = 0;
      LODWORD(v425) = (_DWORD)v19;
      LODWORD(v427) = 0;
      (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v5 + 32))(v5, 45, &v410, 1, &v422, 2, 0);
      v338 = *(_QWORD *)(a2 + 24);
      v339 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v339 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v339 = a2;
          do
            v339 = *(_QWORD *)(v339 + 8);
          while ((*(_WORD *)(v339 + 44) & 8) != 0);
        }
      }
      goto LABEL_639;
    }
    return 0;
  }
  if (**(unsigned __int16 **)(a2 + 16) > 0x7Eu)
  {
    if (v6 == 127)
    {
      v135 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      if ((v135 & 0x80000000) == 0)
        return 0;
      v136 = *(_QWORD *)(a1 + 272);
      v137 = v135 & 0x7FFFFFFF;
      v138 = *(unsigned int *)(v136 + 432);
      if ((v135 & 0x7FFFFFFFu) >= v138)
        return 0;
      v139 = *(_QWORD *)(v136 + 424);
      v140 = *(void **)(v139 + 8 * v137);
      if (v140 != (void *)129 && v140 != (void *)257)
      {
        if (v140 != (void *)513)
          return 0;
        v141 = v135 & 0x7FFFFFFF;
        if (v141 >= v138)
          return 0;
        if (*(_QWORD *)(v139 + 8 * v141) != 513)
          return 0;
        v142 = *(_QWORD *)(*(_QWORD *)(v136 + 24) + 16 * v141 + 8);
        if (!v142)
          return 0;
        v143 = v135;
        v144 = *(_QWORD *)(a1 + 248);
        if ((*(_BYTE *)(v142 + 3) & 1) == 0)
        {
          v142 = *(_QWORD *)(v142 + 24);
          if (!v142 || (*(_BYTE *)(v142 + 3) & 1) == 0)
            return 0;
        }
        v145 = *(_QWORD *)(v142 + 8);
        if (!v145)
          return 0;
        if (**(_WORD **)(v145 + 16) != 127)
          return 0;
        if (*(_DWORD *)(v145 + 40) != 3)
          return 0;
        v146 = *(_QWORD *)(v145 + 32);
        v147 = *(_DWORD *)(v146 + 36);
        v148 = sub_1C554C050(*(_DWORD *)(v146 + 68), v136);
        if (!v149)
          return 0;
        v150 = v148;
        v151 = *(_QWORD *)(a1 + 272);
        LOWORD(v410) = 0;
        LODWORD(v422) = v147;
        v4 = 0;
        if (!sub_1C4925D94((uint64_t)&v410, v151, (unsigned int *)&v422) || v150 > 63)
          return v4;
        v152 = 1 << v150;
        if (1 << v150 != 0x100000000 << v150 >> 32)
          return 0;
        v153 = sub_1C4A51CB4(v143, *(_QWORD *)(a1 + 272));
        if (!(_BYTE)v153)
          return 0;
        if (HIDWORD(v153) == 1 && (sub_1C4A51DD8() & 1) == 0)
        {
          v154 = *(_QWORD *)(a1 + 272);
          v155 = *(_QWORD *)(v154 + 24);
          v156 = *(_QWORD *)(v155 + 16 * v141 + 8);
          if ((*(_BYTE *)(v156 + 3) & 0x81) != 0)
          {
            do
              v156 = *(_QWORD *)(v156 + 24);
            while ((*(_DWORD *)v156 & 0x81000000) != 0);
          }
          v157 = *(_QWORD *)(*(_QWORD *)(v156 + 8) + 32);
          v158 = *(_DWORD *)(v157 + 36);
          if (v158 == v143)
            v158 = *(_DWORD *)(v157 + 68);
          v159 = v158;
          if ((v158 & 0x80000000) != 0)
            v160 = (uint64_t *)(v155 + 16 * (v158 & 0x7FFFFFFF) + 8);
          else
            v160 = (uint64_t *)(*(_QWORD *)(v154 + 272) + 8 * v158);
          v386 = *v160;
          if (v386
            && ((*(_BYTE *)(v386 + 3) & 1) != 0
             || (v386 = *(_QWORD *)(v386 + 24)) != 0 && (*(_BYTE *)(v386 + 3) & 1) != 0))
          {
            v387 = *(_QWORD *)(v386 + 8);
          }
          else
          {
            v387 = 0;
          }
          v422 = (unint64_t)&v424;
          v423 = 0x200000000;
          sub_1C4893E04((char *)&v422, 2uLL, 0);
          if (sub_1C4A51E28(v387, *(_QWORD *)(*(_QWORD *)(a1 + 272) + 24), *(_QWORD *)(*(_QWORD *)(a1 + 272) + 272), (_DWORD *)v422))
          {
            v388 = *(_QWORD *)(a1 + 272);
            v389 = (uint64_t *)((v159 & 0x80000000) != 0
                             ? *(_QWORD *)(v388 + 24) + 16 * (v159 & 0x7FFFFFFF) + 8
                             : *(_QWORD *)(v388 + 272) + 8 * v159);
            v390 = *v389;
            if (v390)
            {
              while ((*(_BYTE *)(v390 + 3) & 1) != 0)
              {
                v390 = *(_QWORD *)(v390 + 24);
                if (!v390)
                  goto LABEL_759;
              }
              while (1)
              {
                v390 = *(_QWORD *)(v390 + 24);
                if (!v390)
                  break;
                if ((*(_BYTE *)(v390 + 3) & 1) == 0)
                  goto LABEL_759;
              }
              if ((uint64_t *)v422 != &v424)
                free((void *)v422);
              return 0;
            }
          }
LABEL_759:
          if ((uint64_t *)v422 != &v424)
            free((void *)v422);
        }
        LODWORD(v410) = v143;
        LODWORD(v411) = 1;
        LODWORD(v422) = v147;
        LODWORD(v424) = 0;
        v425 = 0;
        LODWORD(v427) = 3;
        v419 = (void *)513;
        LODWORD(v420) = 0;
        v428 = sub_1C5544694(v144, (unint64_t *)&v419, v152);
        v429 = v391;
        v431 = 0;
        LODWORD(v430) = 1;
        v432 = 3;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v144 + 32))(v144, 308, &v410, 1, &v422, 4, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
        v338 = *(_QWORD *)(a2 + 24);
        v339 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v339 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v339 = a2;
            do
              v339 = *(_QWORD *)(v339 + 8);
            while ((*(_WORD *)(v339 + 44) & 8) != 0);
          }
        }
        goto LABEL_639;
      }
      v329 = *(_QWORD *)(*(_QWORD *)(v136 + 24) + 16 * v137 + 8);
      if (v329)
      {
        if ((*(_BYTE *)(v329 + 3) & 1) != 0 || (v329 = *(_QWORD *)(v329 + 24)) != 0 && (*(_BYTE *)(v329 + 3) & 1) != 0)
        {
          v330 = *(_QWORD *)(v329 + 8);
          if (v330)
          {
            if (**(_WORD **)(v330 + 16) == 127 && *(_DWORD *)(v330 + 40) == 3)
            {
              v331 = *(_QWORD *)(v330 + 32);
              v332 = *(_DWORD *)(v331 + 36);
              v333 = sub_1C554C050(*(_DWORD *)(v331 + 68), v136);
              if (v334)
              {
                if ((unint64_t)(v333 - 5) > 3)
                {
                  v4 = 0;
                  if (v140 != (void *)257 || v333 != 16)
                    return v4;
                  v422 = 129;
                  LODWORD(v423) = 0;
                  v380 = sub_1C5544694((uint64_t)v5, &v422, 0);
                  v382 = v381;
                  v410 = 129;
                  LODWORD(v411) = 0;
                  LODWORD(v422) = v332;
                  LODWORD(v424) = 0;
                  v383 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v5 + 32))(v5, 119, &v410, 1, &v422, 1, 0);
                  LODWORD(v410) = v135;
                  LODWORD(v411) = 1;
                  v422 = v380;
                  v423 = v382;
                  v425 = (uint64_t *)v383;
                  v426 = (uint64_t)v384;
                  LODWORD(v424) = 1;
                  LODWORD(v427) = 1;
                  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v5 + 32))(v5, 76, &v410, 1, &v422, 2, 0);
                  v338 = *(_QWORD *)(a2 + 24);
                  v339 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v339 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v339 = a2;
                      do
                        v339 = *(_QWORD *)(v339 + 8);
                      while ((*(_WORD *)(v339 + 44) & 8) != 0);
                    }
                  }
                }
                else
                {
                  v410 = (uint64_t)v140;
                  LODWORD(v411) = 0;
                  LODWORD(v422) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
                  LODWORD(v424) = 0;
                  v419 = v140;
                  LODWORD(v420) = 0;
                  v425 = (uint64_t *)sub_1C5544694((uint64_t)v5, (unint64_t *)&v419, v333 - 4);
                  v426 = (uint64_t)v335;
                  LODWORD(v427) = 1;
                  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*v5 + 32))(v5, 127, &v410, 1, &v422, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                  LODWORD(v410) = v135;
                  LODWORD(v411) = 1;
                  LODWORD(v422) = *(_DWORD *)(*(_QWORD *)(v336 + 32) + 4);
                  LODWORD(v424) = 0;
                  v419 = v140;
                  LODWORD(v420) = 0;
                  v425 = (uint64_t *)sub_1C5544694((uint64_t)v5, (unint64_t *)&v419, 4);
                  v426 = (uint64_t)v337;
                  LODWORD(v427) = 1;
                  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*v5 + 32))(v5, 127, &v410, 1, &v422, 2, *(unsigned __int16 *)(a2 + 44) | 0x100000000);
                  v338 = *(_QWORD *)(a2 + 24);
                  v339 = a2;
                  if ((*(_BYTE *)a2 & 4) == 0)
                  {
                    v339 = a2;
                    if ((*(_WORD *)(a2 + 44) & 8) != 0)
                    {
                      v339 = a2;
                      do
                        v339 = *(_QWORD *)(v339 + 8);
                      while ((*(_WORD *)(v339 + 44) & 8) != 0);
                    }
                  }
                }
LABEL_639:
                sub_1C487FE80(v338 + 40, a2, *(_QWORD *)(v339 + 8));
                return 1;
              }
            }
          }
        }
      }
      return 0;
    }
    if (v6 != 166)
      return v4;
    if ((~*(unsigned __int16 *)(a2 + 44) & 0x570) != 0)
      return 0;
    v23 = 0;
    v24 = 0;
    v25 = *(unsigned __int16 *)(a2 + 44);
    v26 = *(_DWORD **)(a2 + 32);
    v27 = v26[1];
    v28 = v26[9];
    v29 = v26[17];
    v30 = v26[25];
    v419 = v421;
    v420 = 0x800000000;
    while (1)
    {
      v31 = *(_QWORD *)(a1 + 272);
      if ((v28 & 0x80000000) != 0)
        v32 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8);
      else
        v32 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v28);
      v33 = *v32;
      if (!*v32
        || (v34 = v28, (*(_BYTE *)(v33 + 3) & 1) == 0)
        && ((v33 = *(_QWORD *)(v33 + 24)) == 0 || (*(_BYTE *)(v33 + 3) & 1) == 0)
        || (v35 = *(_QWORD *)(v33 + 8)) == 0
        || **(_WORD **)(v35 + 16) != 163
        || *(_DWORD *)(v35 + 40) != 3)
      {
        if ((v24 & 1) == 0)
          goto LABEL_723;
        goto LABEL_367;
      }
      if ((v28 & 0x80000000) != 0)
        v36 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8);
      else
        v36 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v28);
      v37 = *v36;
      if (!v37
        || (v38 = *(_QWORD *)(v35 + 32),
            v404 = *(unsigned int *)(v38 + 68),
            v407 = *(unsigned int *)(v38 + 36),
            (*(_BYTE *)(v37 + 3) & 1) == 0)
        && ((v37 = *(_QWORD *)(v37 + 24)) == 0 || (*(_BYTE *)(v37 + 3) & 1) == 0)
        || (v39 = *(_QWORD *)(v37 + 8)) == 0)
      {
        if ((v24 & 1) == 0)
        {
LABEL_723:
          v4 = 0;
          goto LABEL_724;
        }
LABEL_367:
        if (v23 >= HIDWORD(v420))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v419, (uint64_t)v421, v23 + 1, 4);
          v23 = v420;
        }
        *((_DWORD *)v419 + v23) = v28;
        LODWORD(v420) = v420 + 1;
        goto LABEL_370;
      }
      if ((~*(unsigned __int16 *)(v39 + 44) & 0x570) != 0)
        goto LABEL_723;
      v40 = (uint64_t *)((v28 & 0x80000000) != 0
                      ? *(_QWORD *)(v31 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v31 + 272) + 8 * v28);
      v41 = *v40;
      if (!v41)
        goto LABEL_723;
      while ((*(_BYTE *)(v41 + 3) & 1) != 0)
      {
        v41 = *(_QWORD *)(v41 + 24);
        if (!v41)
          goto LABEL_723;
      }
      while (1)
      {
        v41 = *(_QWORD *)(v41 + 24);
        if (!v41)
          break;
        v4 = 0;
        if ((*(_BYTE *)(v41 + 3) & 1) == 0)
          goto LABEL_724;
      }
      if ((v407 & 0x80000000) != 0)
        v42 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v407 & 0x7FFFFFFF) + 8);
      else
        v42 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v407);
      v43 = *v42;
      if (v43
        && ((*(_BYTE *)(v43 + 3) & 1) != 0 || (v43 = *(_QWORD *)(v43 + 24)) != 0 && (*(_BYTE *)(v43 + 3) & 1) != 0)
        && (v44 = *(_QWORD *)(v43 + 8)) != 0
        && **(unsigned __int16 **)(v44 + 16) - 337 < 2)
      {
        LOBYTE(v45) = 1;
      }
      else
      {
        if ((v407 & 0x80000000) != 0)
          v46 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v407 & 0x7FFFFFFF) + 8);
        else
          v46 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v407);
        v45 = *v46;
        if (!v45)
          goto LABEL_83;
        if ((*(_BYTE *)(v45 + 3) & 1) == 0)
        {
          v45 = *(_QWORD *)(v45 + 24);
          if (!v45)
            goto LABEL_83;
          if ((*(_BYTE *)(v45 + 3) & 1) == 0)
            goto LABEL_80;
        }
        v45 = *(_QWORD *)(v45 + 8);
        if (v45)
        {
          if (**(_WORD **)(v45 + 16) != 178)
            goto LABEL_80;
          v45 = *(unsigned int *)(*(_QWORD *)(v45 + 32) + 36);
          if ((_DWORD)v45)
          {
            v47 = (uint64_t *)((v45 & 0x80000000) != 0
                            ? *(_QWORD *)(v31 + 24) + 16 * (v45 & 0x7FFFFFFF) + 8
                            : *(_QWORD *)(v31 + 272) + 8 * v45);
            v45 = *v47;
            if (v45)
            {
              if ((*(_BYTE *)(v45 + 3) & 1) != 0)
                goto LABEL_81;
              v45 = *(_QWORD *)(v45 + 24);
              if (v45)
              {
                if ((*(_BYTE *)(v45 + 3) & 1) != 0)
                {
LABEL_81:
                  v45 = *(_QWORD *)(v45 + 8);
                  if (v45)
                    LOBYTE(v45) = **(unsigned __int16 **)(v45 + 16) - 337 < 2;
                  goto LABEL_83;
                }
LABEL_80:
                LOBYTE(v45) = 0;
              }
            }
          }
        }
      }
LABEL_83:
      if ((v404 & 0x80000000) != 0)
        v48 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v404 & 0x7FFFFFFF) + 8);
      else
        v48 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v404);
      v49 = *v48;
      if (v49)
      {
        if ((*(_BYTE *)(v49 + 3) & 1) != 0 || (v49 = *(_QWORD *)(v49 + 24)) != 0 && (*(_BYTE *)(v49 + 3) & 1) != 0)
        {
          v50 = *(_QWORD *)(v49 + 8);
          if (v50)
          {
            if (**(unsigned __int16 **)(v50 + 16) - 337 < 2)
            {
              LOBYTE(v51) = 1;
              goto LABEL_113;
            }
          }
        }
      }
      if ((v404 & 0x80000000) != 0)
        v52 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v404 & 0x7FFFFFFF) + 8);
      else
        v52 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v404);
      v51 = *v52;
      if (v51)
      {
        if ((*(_BYTE *)(v51 + 3) & 1) == 0)
        {
          v51 = *(_QWORD *)(v51 + 24);
          if (!v51)
            goto LABEL_113;
          if ((*(_BYTE *)(v51 + 3) & 1) == 0)
            goto LABEL_110;
        }
        v51 = *(_QWORD *)(v51 + 8);
        if (!v51)
          goto LABEL_113;
        if (**(_WORD **)(v51 + 16) != 178)
          goto LABEL_110;
        v51 = *(unsigned int *)(*(_QWORD *)(v51 + 32) + 36);
        if ((_DWORD)v51)
        {
          v53 = (uint64_t *)((v51 & 0x80000000) != 0
                          ? *(_QWORD *)(v31 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8
                          : *(_QWORD *)(v31 + 272) + 8 * v51);
          v51 = *v53;
          if (v51)
          {
            if ((*(_BYTE *)(v51 + 3) & 1) != 0)
              goto LABEL_111;
            v51 = *(_QWORD *)(v51 + 24);
            if (v51)
            {
              if ((*(_BYTE *)(v51 + 3) & 1) != 0)
              {
LABEL_111:
                v51 = *(_QWORD *)(v51 + 8);
                if (v51)
                  LOBYTE(v51) = **(unsigned __int16 **)(v51 + 16) - 337 < 2;
                goto LABEL_113;
              }
LABEL_110:
              LOBYTE(v51) = 0;
            }
          }
        }
      }
LABEL_113:
      if ((v45 & 1) != 0)
        goto LABEL_181;
      v54 = (uint64_t *)((v407 & 0x80000000) != 0
                      ? *(_QWORD *)(v31 + 24) + 16 * (v407 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v31 + 272) + 8 * v407);
      v55 = *v54;
      if (v55)
      {
        if ((*(_BYTE *)(v55 + 3) & 1) != 0 || (v55 = *(_QWORD *)(v55 + 24)) != 0 && (*(_BYTE *)(v55 + 3) & 1) != 0)
        {
          v56 = *(_QWORD *)(v55 + 8);
          if (v56)
          {
            if (**(_WORD **)(v56 + 16) == 177 && *(_DWORD *)(v56 + 40) == 2)
            {
              v57 = *(unsigned int *)(*(_QWORD *)(v56 + 32) + 36);
              v58 = (uint64_t *)((v57 & 0x80000000) != 0
                              ? *(_QWORD *)(v31 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v31 + 272) + 8 * v57);
              v59 = *v58;
              if (v59)
              {
                if ((*(_BYTE *)(v59 + 3) & 1) != 0
                  || (v59 = *(_QWORD *)(v59 + 24)) != 0 && (*(_BYTE *)(v59 + 3) & 1) != 0)
                {
                  v60 = *(_QWORD *)(v59 + 8);
                  if (v60)
                  {
                    if (**(unsigned __int16 **)(v60 + 16) - 337 < 2)
                      goto LABEL_181;
                  }
                }
              }
              v61 = (uint64_t *)((v57 & 0x80000000) != 0
                              ? *(_QWORD *)(v31 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v31 + 272) + 8 * v57);
              v62 = *v61;
              if (v62)
              {
                if ((*(_BYTE *)(v62 + 3) & 1) != 0
                  || (v62 = *(_QWORD *)(v62 + 24)) != 0 && (*(_BYTE *)(v62 + 3) & 1) != 0)
                {
                  v63 = *(_QWORD *)(v62 + 8);
                  if (v63)
                  {
                    if (**(_WORD **)(v63 + 16) == 178)
                    {
                      v64 = *(unsigned int *)(*(_QWORD *)(v63 + 32) + 36);
                      if ((_DWORD)v64)
                      {
                        v65 = (uint64_t *)((v64 & 0x80000000) != 0
                                        ? *(_QWORD *)(v31 + 24) + 16 * (v64 & 0x7FFFFFFF) + 8
                                        : *(_QWORD *)(v31 + 272) + 8 * v64);
                        v66 = *v65;
                        if (v66)
                        {
                          if ((*(_BYTE *)(v66 + 3) & 1) != 0
                            || (v66 = *(_QWORD *)(v66 + 24)) != 0 && (*(_BYTE *)(v66 + 3) & 1) != 0)
                          {
                            v67 = *(_QWORD *)(v66 + 8);
                            if (v67)
                            {
                              if (**(unsigned __int16 **)(v67 + 16) - 337 < 2)
                                goto LABEL_181;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((v407 & 0x80000000) != 0)
        v68 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v407 & 0x7FFFFFFF) + 8);
      else
        v68 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v407);
      v69 = *v68;
      if (!v69
        || (*(_BYTE *)(v69 + 3) & 1) == 0 && ((v69 = *(_QWORD *)(v69 + 24)) == 0 || (*(_BYTE *)(v69 + 3) & 1) == 0)
        || (v70 = *(_QWORD *)(v69 + 8)) == 0
        || **(_WORD **)(v70 + 16) != 178
        || (v71 = *(unsigned int *)(*(_QWORD *)(v70 + 32) + 36), !(_DWORD)v71)
        || ((v71 & 0x80000000) != 0
          ? (v72 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v71 & 0x7FFFFFFF) + 8))
          : (v72 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v71)),
            (v73 = *v72) == 0
         || (*(_BYTE *)(v73 + 3) & 1) == 0 && ((v73 = *(_QWORD *)(v73 + 24)) == 0 || (*(_BYTE *)(v73 + 3) & 1) == 0)
         || (v74 = *(_QWORD *)(v73 + 8)) == 0
         || **(_WORD **)(v74 + 16) != 177
         || *(_DWORD *)(v74 + 40) != 2))
      {
LABEL_201:
        v79 = 0;
        goto LABEL_202;
      }
      v75 = *(unsigned int *)(*(_QWORD *)(v74 + 32) + 36);
      v76 = (uint64_t *)((v75 & 0x80000000) != 0
                      ? *(_QWORD *)(v31 + 24) + 16 * (v75 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v31 + 272) + 8 * v75);
      if ((v77 = *v76) != 0
        && ((*(_BYTE *)(v77 + 3) & 1) != 0 || (v77 = *(_QWORD *)(v77 + 24)) != 0 && (*(_BYTE *)(v77 + 3) & 1) != 0)
        && (v78 = *(_QWORD *)(v77 + 8)) != 0
        && **(unsigned __int16 **)(v78 + 16) - 337 < 2)
      {
LABEL_181:
        v79 = 1;
      }
      else
      {
        if ((v75 & 0x80000000) != 0)
          v80 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v75 & 0x7FFFFFFF) + 8);
        else
          v80 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v75);
        v81 = *v80;
        if (!v81)
          goto LABEL_201;
        if ((*(_BYTE *)(v81 + 3) & 1) == 0)
        {
          v81 = *(_QWORD *)(v81 + 24);
          if (!v81 || (*(_BYTE *)(v81 + 3) & 1) == 0)
            goto LABEL_201;
        }
        v82 = *(_QWORD *)(v81 + 8);
        if (!v82)
          goto LABEL_201;
        if (**(_WORD **)(v82 + 16) != 178)
          goto LABEL_201;
        v83 = *(unsigned int *)(*(_QWORD *)(v82 + 32) + 36);
        if (!(_DWORD)v83)
          goto LABEL_201;
        v84 = (uint64_t *)((v83 & 0x80000000) != 0
                        ? *(_QWORD *)(v31 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(v31 + 272) + 8 * v83);
        v85 = *v84;
        if (!v85)
          goto LABEL_201;
        if ((*(_BYTE *)(v85 + 3) & 1) == 0)
        {
          v85 = *(_QWORD *)(v85 + 24);
          if (!v85 || (*(_BYTE *)(v85 + 3) & 1) == 0)
            goto LABEL_201;
        }
        v86 = *(_QWORD *)(v85 + 8);
        if (!v86)
          goto LABEL_201;
        v79 = **(unsigned __int16 **)(v86 + 16) - 337 < 2;
      }
LABEL_202:
      if ((v51 & 1) != 0)
        goto LABEL_270;
      v87 = (uint64_t *)((v404 & 0x80000000) != 0
                      ? *(_QWORD *)(v31 + 24) + 16 * (v404 & 0x7FFFFFFF) + 8
                      : *(_QWORD *)(v31 + 272) + 8 * v404);
      v88 = *v87;
      if (v88)
      {
        if ((*(_BYTE *)(v88 + 3) & 1) != 0 || (v88 = *(_QWORD *)(v88 + 24)) != 0 && (*(_BYTE *)(v88 + 3) & 1) != 0)
        {
          v89 = *(_QWORD *)(v88 + 8);
          if (v89)
          {
            if (**(_WORD **)(v89 + 16) == 177 && *(_DWORD *)(v89 + 40) == 2)
            {
              v90 = *(unsigned int *)(*(_QWORD *)(v89 + 32) + 36);
              v91 = (uint64_t *)((v90 & 0x80000000) != 0
                              ? *(_QWORD *)(v31 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v31 + 272) + 8 * v90);
              v92 = *v91;
              if (v92)
              {
                if ((*(_BYTE *)(v92 + 3) & 1) != 0
                  || (v92 = *(_QWORD *)(v92 + 24)) != 0 && (*(_BYTE *)(v92 + 3) & 1) != 0)
                {
                  v93 = *(_QWORD *)(v92 + 8);
                  if (v93)
                  {
                    if (**(unsigned __int16 **)(v93 + 16) - 337 < 2)
                      goto LABEL_270;
                  }
                }
              }
              v94 = (uint64_t *)((v90 & 0x80000000) != 0
                              ? *(_QWORD *)(v31 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8
                              : *(_QWORD *)(v31 + 272) + 8 * v90);
              v95 = *v94;
              if (v95)
              {
                if ((*(_BYTE *)(v95 + 3) & 1) != 0
                  || (v95 = *(_QWORD *)(v95 + 24)) != 0 && (*(_BYTE *)(v95 + 3) & 1) != 0)
                {
                  v96 = *(_QWORD *)(v95 + 8);
                  if (v96)
                  {
                    if (**(_WORD **)(v96 + 16) == 178)
                    {
                      v97 = *(unsigned int *)(*(_QWORD *)(v96 + 32) + 36);
                      if ((_DWORD)v97)
                      {
                        v98 = (uint64_t *)((v97 & 0x80000000) != 0
                                        ? *(_QWORD *)(v31 + 24) + 16 * (v97 & 0x7FFFFFFF) + 8
                                        : *(_QWORD *)(v31 + 272) + 8 * v97);
                        v99 = *v98;
                        if (v99)
                        {
                          if ((*(_BYTE *)(v99 + 3) & 1) != 0
                            || (v99 = *(_QWORD *)(v99 + 24)) != 0 && (*(_BYTE *)(v99 + 3) & 1) != 0)
                          {
                            v100 = *(_QWORD *)(v99 + 8);
                            if (v100)
                            {
                              if (**(unsigned __int16 **)(v100 + 16) - 337 < 2)
                              {
LABEL_270:
                                v112 = 1;
                                goto LABEL_291;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((v404 & 0x80000000) != 0)
        v101 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v404 & 0x7FFFFFFF) + 8);
      else
        v101 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v404);
      v102 = *v101;
      if (!v102)
        goto LABEL_290;
      if ((*(_BYTE *)(v102 + 3) & 1) == 0)
      {
        v102 = *(_QWORD *)(v102 + 24);
        if (!v102 || (*(_BYTE *)(v102 + 3) & 1) == 0)
          goto LABEL_290;
      }
      v103 = *(_QWORD *)(v102 + 8);
      if (!v103)
        goto LABEL_290;
      if (**(_WORD **)(v103 + 16) != 178)
        goto LABEL_290;
      v104 = *(unsigned int *)(*(_QWORD *)(v103 + 32) + 36);
      if (!(_DWORD)v104)
        goto LABEL_290;
      v105 = (uint64_t *)((v104 & 0x80000000) != 0
                       ? *(_QWORD *)(v31 + 24) + 16 * (v104 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v31 + 272) + 8 * v104);
      v106 = *v105;
      if (!v106)
        goto LABEL_290;
      if ((*(_BYTE *)(v106 + 3) & 1) == 0)
      {
        v106 = *(_QWORD *)(v106 + 24);
        if (!v106 || (*(_BYTE *)(v106 + 3) & 1) == 0)
          goto LABEL_290;
      }
      v107 = *(_QWORD *)(v106 + 8);
      if (!v107 || **(_WORD **)(v107 + 16) != 177 || *(_DWORD *)(v107 + 40) != 2)
        goto LABEL_290;
      v108 = *(unsigned int *)(*(_QWORD *)(v107 + 32) + 36);
      if ((v108 & 0x80000000) != 0)
        v109 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v108 & 0x7FFFFFFF) + 8);
      else
        v109 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v108);
      v110 = *v109;
      if (v110)
      {
        if ((*(_BYTE *)(v110 + 3) & 1) != 0 || (v110 = *(_QWORD *)(v110 + 24)) != 0 && (*(_BYTE *)(v110 + 3) & 1) != 0)
        {
          v111 = *(_QWORD *)(v110 + 8);
          if (v111)
          {
            if (**(unsigned __int16 **)(v111 + 16) - 337 < 2)
              goto LABEL_270;
          }
        }
      }
      v113 = (uint64_t *)((v108 & 0x80000000) != 0
                       ? *(_QWORD *)(v31 + 24) + 16 * (v108 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v31 + 272) + 8 * v108);
      v114 = *v113;
      if (!v114)
        goto LABEL_290;
      if ((*(_BYTE *)(v114 + 3) & 1) == 0)
      {
        v114 = *(_QWORD *)(v114 + 24);
        if (!v114 || (*(_BYTE *)(v114 + 3) & 1) == 0)
          goto LABEL_290;
      }
      if ((v115 = *(_QWORD *)(v114 + 8)) != 0
        && **(_WORD **)(v115 + 16) == 178
        && (v116 = *(unsigned int *)(*(_QWORD *)(v115 + 32) + 36), (_DWORD)v116)
        && ((v116 & 0x80000000) != 0
          ? (v117 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v116 & 0x7FFFFFFF) + 8))
          : (v117 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v116)),
            (v118 = *v117) != 0
         && ((*(_BYTE *)(v118 + 3) & 1) != 0 || (v118 = *(_QWORD *)(v118 + 24)) != 0 && (*(_BYTE *)(v118 + 3) & 1) != 0)
         && (v119 = *(_QWORD *)(v118 + 8)) != 0))
      {
        v112 = **(unsigned __int16 **)(v119 + 16) - 337 < 2;
      }
      else
      {
LABEL_290:
        v112 = 0;
      }
LABEL_291:
      v24 |= v51 | v45;
      if (v79)
      {
        v120 = v420;
        if (v420 >= (unint64_t)HIDWORD(v420))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v419, (uint64_t)v421, v420 + 1, 4);
          v120 = v420;
        }
        *((_DWORD *)v419 + v120) = v407;
        v23 = v420 + 1;
        LODWORD(v420) = v420 + 1;
        if (!v112)
          goto LABEL_301;
      }
      else
      {
        if (!v112)
        {
          if ((v24 & 1) == 0)
            goto LABEL_723;
          v23 = v420;
          v28 = v34;
          goto LABEL_367;
        }
        v23 = v420;
      }
      if (v23 >= HIDWORD(v420))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v419, (uint64_t)v421, v23 + 1, 4);
        v23 = v420;
      }
      *((_DWORD *)v419 + v23) = v404;
      v23 = v420 + 1;
      LODWORD(v420) = v420 + 1;
      if (v79)
      {
        if ((v24 & 1) == 0)
          goto LABEL_723;
LABEL_370:
        if (v27 < 0 && (v179 = *(_QWORD *)(a1 + 272), (v27 & 0x7FFFFFFFu) < *(_DWORD *)(v179 + 432)))
          v180 = *(_QWORD *)(*(_QWORD *)(v179 + 424) + 8 * (v27 & 0x7FFFFFFF));
        else
          v180 = 0;
        v237 = *(_QWORD *)(a2 + 24);
        v430 = 0;
        v238 = *(_QWORD *)(v237 + 32);
        v422 = (unint64_t)&off_1E816EC08;
        v423 = v238;
        v425 = *(uint64_t **)(v238 + 40);
        v424 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v238 + 16) + 104))(*(_QWORD *)(v238 + 16));
        v239 = *(_QWORD **)(a2 + 24);
        v426 = 0;
        v427 = v239;
        v428 = a2;
        v429 = 0;
        if ((uint64_t *)(a2 + 56) != &v426)
        {
          v426 = *(_QWORD *)(a2 + 56);
          if (v426)
            llvm::MetadataTracking::track((uint64_t)&v426, (unsigned __int8 *)v426, 2);
        }
        for (i = v420; (_DWORD)v420; i = v420)
        {
          v241 = *((_DWORD *)v419 + i - 1);
          LODWORD(v420) = i - 1;
          v417 = v180;
          v418 = 0;
          LODWORD(v410) = v241;
          LODWORD(v412) = 0;
          v413 = v29;
          v414 = 0;
          v415 = v30;
          v416 = 0;
          sub_1C5548620((uint64_t *)&v422, 166, &v417, 1, (int *)&v410, 3, v25 | 0x100000000);
          v30 = *(_DWORD *)(*(_QWORD *)(v242 + 32) + 4);
        }
        LODWORD(v417) = v27;
        v418 = 1;
        LODWORD(v410) = v30;
        LODWORD(v412) = 0;
        (*(void (**)(unint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(v422 + 32))(&v422, 19, &v417, 1, &v410, 1, 0);
        v243 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v243 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v243 = a2;
            do
              v243 = *(_QWORD *)(v243 + 8);
            while ((*(_WORD *)(v243 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v243 + 8));
        v422 = (unint64_t)&off_1E816EC08;
        if (v426)
          llvm::MetadataTracking::untrack((uint64_t)&v426, (unsigned __int8 *)v426);
        v4 = 1;
LABEL_724:
        if (v419 != v421)
          free(v419);
        return v4;
      }
LABEL_301:
      if (v79)
        v28 = v404;
      else
        v28 = v407;
    }
  }
  if (v6 != 77)
  {
    if (v6 != 114)
      return v4;
    v14 = *(_QWORD *)(a1 + 272);
    v15 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
    if ((v15 & 0x80000000) != 0)
      v16 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
    else
      v16 = (uint64_t *)(*(_QWORD *)(v14 + 272) + 8 * v15);
    v181 = *v16;
    if ((*(_BYTE *)(v181 + 3) & 1) == 0)
      v181 = *(_QWORD *)(v181 + 24);
    v182 = *(_QWORD *)(v181 + 8);
    if (**(_WORD **)(v182 + 16) != 51)
      return 0;
    v183 = *(_QWORD *)(v182 + 32);
    v184 = *(_DWORD *)(v183 + 132);
    v185 = *(_DWORD *)(v183 + 164);
    v186 = sub_1C554C050(v184, v14);
    v188 = v187;
    v189 = sub_1C554C050(v185, *(_QWORD *)(a1 + 272));
    v191 = !v188 || v190 == 0;
    v192 = !v191 && v186 == 1;
    if (!v192 || v189 != 0)
      return 0;
    v194 = *(_DWORD **)(v182 + 32);
    LODWORD(v419) = v194[17];
    LODWORD(v417) = v194[25];
    v409 = v194[12];
    if (sub_1C4A516D8((_QWORD *)a1, &v419, (int *)&v417, a2, &v409))
    {
      v5[5] = *(_QWORD *)(a2 + 24);
      v5[6] = a2;
      v410 = 129;
      LODWORD(v411) = 0;
      LODWORD(v422) = v409;
      LODWORD(v424) = 2;
      LODWORD(v425) = (_DWORD)v419;
      LODWORD(v427) = 0;
      LODWORD(v428) = v417;
      LODWORD(v430) = 0;
    }
    else
    {
      v259 = sub_1C554C050(v417, *(_QWORD *)(a1 + 272));
      if (!v260)
        return 0;
      v261 = v409 == 40 || v409 == 36;
      if (v261 && v259 == 256)
      {
        if (v409 == 36)
          v262 = 37;
        else
          v262 = 41;
        v263 = (int)v419;
        if ((v419 & 0x80000000) != 0
          && (v264 = *(_QWORD *)(a1 + 272), (v419 & 0x7FFFFFFF) < *(_DWORD *)(v264 + 432)))
        {
          v265 = *(_QWORD *)(*(_QWORD *)(v264 + 424) + 8 * (v419 & 0x7FFFFFFF));
        }
        else
        {
          v265 = 0;
        }
        v422 = v265;
        LODWORD(v423) = 0;
        v346 = sub_1C5544694((uint64_t)v5, &v422, 255);
        if (v184 < 0
          && (v348 = *(_QWORD *)(a1 + 272), (v184 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v348 + 432)))
        {
          v349 = *(_QWORD *)(*(_QWORD *)(v348 + 424) + 8 * (v184 & 0x7FFFFFFF));
        }
        else
        {
          v349 = 0;
        }
        v410 = v349;
        LODWORD(v411) = 0;
        LODWORD(v422) = v262;
        LODWORD(v424) = 2;
      }
      else
      {
        v4 = 0;
        if (v409 != 38 || v259 != -1)
          return v4;
        v263 = (int)v419;
        if ((v419 & 0x80000000) != 0
          && (v344 = *(_QWORD *)(a1 + 272), (v419 & 0x7FFFFFFF) < *(_DWORD *)(v344 + 432)))
        {
          v345 = *(_QWORD *)(*(_QWORD *)(v344 + 424) + 8 * (v419 & 0x7FFFFFFF));
        }
        else
        {
          v345 = 0;
        }
        v422 = v345;
        LODWORD(v423) = 0;
        v346 = sub_1C5544694((uint64_t)v5, &v422, 0);
        v351 = 0;
        if (v184 < 0)
        {
          v352 = *(_QWORD *)(a1 + 272);
          if ((v184 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v352 + 432))
            v351 = 0;
          else
            v351 = *(_QWORD *)(*(_QWORD *)(v352 + 424) + 8 * (v184 & 0x7FFFFFFF));
        }
        v410 = v351;
        LODWORD(v411) = 0;
        LODWORD(v422) = 39;
        LODWORD(v424) = 2;
      }
      LODWORD(v425) = v263;
      LODWORD(v427) = 0;
      v428 = v346;
      v429 = v347;
      LODWORD(v430) = 1;
    }
    LODWORD(v431) = v184;
    v432 = 0;
    v433 = v185;
    v434 = 0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v5 + 32))(v5, 51, &v410, 1, &v422, 5, 0);
    v373 = v372;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 280) + 32))(*(_QWORD *)(a1 + 280), a2);
    v374 = *(_QWORD *)(a2 + 32);
    v375 = *(_DWORD *)(*(_QWORD *)(v373 + 32) + 4);
    goto LABEL_701;
  }
  v126 = *(_DWORD *)(a2 + 40);
  if ((v126 - 6) < 0xFFFFFFFD)
    return 0;
  v127 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
  if (v127 < 0
    && (v128 = *(_QWORD *)(a1 + 272), v129 = v127 & 0x7FFFFFFF, v129 < *(_DWORD *)(v128 + 432)))
  {
    v130 = *(_QWORD *)(*(_QWORD *)(v128 + 424) + 8 * v129);
  }
  else
  {
    v130 = 0;
  }
  v422 = v130;
  v196 = sub_1C4825F50(&v422);
  if ((_DWORD)v195 == 1)
  if (v196 != 16)
    return 0;
  v197 = 0;
  v408 = (v126 - 1);
  v198 = 1;
LABEL_395:
  v405 = v197;
  v199 = *(_QWORD *)(a1 + 272);
  v200 = 32 * v198;
  do
  {
    v201 = *(_QWORD *)(a2 + 32);
    LOWORD(v202) = sub_1C554C050(*(_DWORD *)(v201 + v200 + 4), v199);
    v204 = v203;
    LOWORD(v205) = sub_1C554C050(*(_DWORD *)(v201 + v200 + 36), *(_QWORD *)(a1 + 272));
    v207 = v206;
    v208 = *(unsigned int *)(v201 + v200 + 4);
    v199 = *(_QWORD *)(a1 + 272);
    v209 = *(_QWORD *)(v199 + 24);
    v210 = *(_QWORD *)(v199 + 272);
    if ((int)v208 >= 0)
      v211 = (uint64_t *)(v210 + 8 * v208);
    else
      v211 = (uint64_t *)(v209 + 16 * (v208 & 0x7FFFFFFF) + 8);
    v212 = *v211;
    if ((*(_BYTE *)(v212 + 3) & 1) == 0)
      v212 = *(_QWORD *)(v212 + 24);
    v213 = *(_QWORD *)(v212 + 8);
    if (**(_WORD **)(v213 + 16) == 121)
      v214 = *(_QWORD *)(*(_QWORD *)(v213 + 32) + 48);
    else
      v214 = 0;
    v215 = *(unsigned int *)(v201 + v200 + 36);
    v216 = (uint64_t *)(v209 + 16 * (v215 & 0x7FFFFFFF) + 8);
    v217 = (uint64_t *)(v210 + 8 * v215);
    if ((int)v215 >= 0)
      v216 = v217;
    v218 = *v216;
    if ((*(_BYTE *)(v218 + 3) & 1) == 0)
      v218 = *(_QWORD *)(v218 + 24);
    v219 = *(_QWORD *)(v218 + 8);
    if (**(_WORD **)(v219 + 16) == 121)
      v220 = *(_QWORD *)(*(_QWORD *)(v219 + 32) + 48);
    else
      v220 = 0;
    v221 = v204;
    if (v204)
      v222 = 0;
    else
      v222 = v214 == 0;
    if (!v222)
    {
      v223 = v207;
      if (v207 || v220 != 0)
      {
        if (v221)
        {
          LODWORD(v202) = (unsigned __int16)v202;
        }
        else
        {
          v226 = *(void **)(v214 + 32);
          v225 = (llvm::detail::DoubleAPFloat *)(v214 + 32);
          if (v226 == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v225, (unsigned int *)&v422);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v225, (unsigned int *)&v422);
          v227 = &v422;
          if (v423 >= 0x41)
            v227 = (unint64_t *)v422;
          v202 = *v227;
          if (v423 >= 0x41 && v422)
            MEMORY[0x1CAA32F9C]();
        }
        if (v223)
        {
          LODWORD(v205) = (unsigned __int16)v205;
        }
        else
        {
          v229 = *(void **)(v220 + 32);
          v228 = (llvm::detail::DoubleAPFloat *)(v220 + 32);
          if (v229 == &unk_1C866F1C0)
            llvm::detail::DoubleAPFloat::bitcastToAPInt(v228, (unsigned int *)&v422);
          else
            llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v228, (unsigned int *)&v422);
          v230 = &v422;
          if (v423 >= 0x41)
            v230 = (unint64_t *)v422;
          v205 = *v230;
          if (v423 >= 0x41 && v422)
            MEMORY[0x1CAA32F9C]();
        }
        v422 = 257;
        LODWORD(v423) = 0;
        v410 = sub_1C5544694((uint64_t)v5, &v422, v202 | ((_DWORD)v205 << 16));
        v411 = v231;
        LODWORD(v412) = 1;
        v422 = (unint64_t)&v424;
        v424 = 129;
        v426 = 129;
        LODWORD(v425) = 0;
        LODWORD(v427) = 0;
        v423 = 0x800000002;
        (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*v5 + 32))(v5, 74, &v424, 2, &v410, 1, 0);
        v233 = v232;
        if ((uint64_t *)v422 != &v424)
          free((void *)v422);
        llvm::MachineOperand::setReg(v201 + v200, *(_DWORD *)(*(_QWORD *)(v233 + 32) + 4));
        llvm::MachineOperand::setReg(v201 + v200 + 32, *(_DWORD *)(*(_QWORD *)(v233 + 32) + 36));
        v198 += 2;
        v197 = 1;
        if (v198 >= v408)
          goto LABEL_702;
        goto LABEL_395;
      }
    }
    v198 += 2;
    v200 += 64;
  }
  while (v198 < v408);
  if ((v405 & 1) != 0)
    goto LABEL_702;
  v234 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36);
  if (v234 < 0 && (v235 = v234 & 0x7FFFFFFF, v235 < *(_DWORD *)(v199 + 432)))
    v236 = *(void **)(*(_QWORD *)(v199 + 424) + 8 * v235);
  else
    v236 = 0;
  v419 = v236;
  v267 = sub_1C4825F50((unint64_t *)&v419);
  if ((_DWORD)v266 == 1)
  if (v267 != 16)
    return 0;
  v268 = 0;
  v269 = &v424;
  v270 = 1;
  while (2)
  {
    v271 = *(_QWORD *)(a2 + 32);
    v272 = *(_QWORD *)(a1 + 272);
    while (1)
    {
      v273 = v271 + 32 * v270;
      v276 = *(_DWORD *)(v273 + 4);
      v275 = (unsigned int *)(v273 + 4);
      v274 = v276;
      if ((v276 & 0x80000000) != 0)
        v277 = (uint64_t *)(*(_QWORD *)(v272 + 24) + 16 * (v274 & 0x7FFFFFFF) + 8);
      else
        v277 = (uint64_t *)(*(_QWORD *)(v272 + 272) + 8 * v274);
      v278 = *v277;
      if (v278)
      {
        if ((*(_BYTE *)(v278 + 3) & 1) != 0)
          goto LABEL_555;
        v278 = *(_QWORD *)(v278 + 24);
        if (!v278)
          goto LABEL_515;
        if ((*(_BYTE *)(v278 + 3) & 1) != 0)
LABEL_555:
          v278 = *(_QWORD *)(v278 + 8);
        else
          v278 = 0;
      }
LABEL_515:
      v279 = v271 + 32 * (v270 + 1);
      v282 = *(_DWORD *)(v279 + 4);
      v281 = (unsigned int *)(v279 + 4);
      v280 = v282;
      if ((v282 & 0x80000000) != 0)
        v283 = (uint64_t *)(*(_QWORD *)(v272 + 24) + 16 * (v280 & 0x7FFFFFFF) + 8);
      else
        v283 = (uint64_t *)(*(_QWORD *)(v272 + 272) + 8 * v280);
      v284 = *v283;
      if (!v284)
        goto LABEL_519;
      if ((*(_BYTE *)(v284 + 3) & 1) != 0)
      {
LABEL_556:
        v284 = *(_QWORD *)(v284 + 8);
        goto LABEL_519;
      }
      v284 = *(_QWORD *)(v284 + 24);
      if (v284)
      {
        if ((*(_BYTE *)(v284 + 3) & 1) != 0)
          goto LABEL_556;
        v284 = 0;
      }
LABEL_519:
      if (**(_WORD **)(v278 + 16) == 313 && **(_WORD **)(v284 + 16) == 313)
      {
        v285 = (uint64_t *)((v274 & 0x80000000) != 0
                         ? *(_QWORD *)(v272 + 24) + 16 * (v274 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(v272 + 272) + 8 * v274);
        v286 = *v285;
        if (v286)
        {
          while ((*(_BYTE *)(v286 + 3) & 1) != 0)
          {
            v286 = *(_QWORD *)(v286 + 24);
            if (!v286)
              goto LABEL_545;
          }
          while (1)
          {
            v286 = *(_QWORD *)(v286 + 24);
            if (!v286)
              break;
            if ((*(_BYTE *)(v286 + 3) & 1) == 0)
              goto LABEL_545;
          }
          v287 = (uint64_t *)((v280 & 0x80000000) != 0
                           ? *(_QWORD *)(v272 + 24) + 16 * (v280 & 0x7FFFFFFF) + 8
                           : *(_QWORD *)(v272 + 272) + 8 * v280);
          v288 = *v287;
          if (v288)
          {
            while ((*(_BYTE *)(v288 + 3) & 1) != 0)
            {
              v288 = *(_QWORD *)(v288 + 24);
              if (!v288)
                goto LABEL_545;
            }
            while (1)
            {
              v288 = *(_QWORD *)(v288 + 24);
              if (!v288)
                break;
              if ((*(_BYTE *)(v288 + 3) & 1) == 0)
                goto LABEL_545;
            }
            v289 = *(_QWORD *)(*(_QWORD *)(v278 + 32) + 48);
            if (*(_DWORD *)(*(_QWORD *)(v284 + 32) + 48) - *(_QWORD *)(*(_QWORD *)(v278 + 32) + 48) == 2
              && ((v289 + 3) & 0x1FFFFFFFCLL) == v289)
            {
              break;
            }
          }
        }
      }
LABEL_545:
      v270 += 2;
      if (v270 >= v408)
      {
        if ((v268 & 1) != 0)
          goto LABEL_702;
        return 0;
      }
    }
    v400 = v278;
    v401 = v284;
    v406 = v269;
    v398 = sub_1C55437B8(v5, 0x139u);
    v292 = (unint64_t *)v5[6];
    v293 = *(_QWORD *)(v5[5] + 40);
    *(_QWORD *)(v291 + 24) = v293;
    v294 = *(_QWORD *)(v293 + 32);
    v402 = (unint64_t *)v291;
    v295 = *(unsigned int *)(v291 + 40);
    if ((_DWORD)v295)
    {
      v322 = *(_QWORD *)(v291 + 32);
      v323 = *(_QWORD *)(v294 + 40);
      v324 = 32 * v295;
      do
      {
        if (!*(_BYTE *)v322)
        {
          v325 = *(unsigned int *)(v322 + 4);
          if ((int)v325 >= 0)
            v326 = (uint64_t *)(*(_QWORD *)(v323 + 272) + 8 * v325);
          else
            v326 = (uint64_t *)(*(_QWORD *)(v323 + 24) + 16 * (v325 & 0x7FFFFFFF) + 8);
          v327 = *v326;
          if (*v326)
          {
            v328 = *(_QWORD *)(v327 + 16);
            *(_QWORD *)(v327 + 16) = v322;
            *(_QWORD *)(v322 + 16) = v328;
            if ((*(_BYTE *)(v322 + 3) & 1) != 0)
            {
              *(_QWORD *)(v322 + 24) = v327;
            }
            else
            {
              *(_QWORD *)(v322 + 24) = 0;
              v326 = (uint64_t *)(v328 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v322 + 16) = v322;
            *(_QWORD *)(v322 + 24) = 0;
          }
          *v326 = v322;
        }
        v322 += 32;
        v324 -= 32;
      }
      while (v324);
    }
    v296 = *(_QWORD *)(v294 + 728);
    if (v296)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v296 + 24))(v296, v291);
    v297 = *v292 & 0xFFFFFFFFFFFFFFF8;
    *v402 = v297 | *v402 & 7;
    v402[1] = (unint64_t)v292;
    *(_QWORD *)(v297 + 8) = v402;
    *v292 = *v292 & 7 | (unint64_t)v402;
    v298 = v5[7];
    if (v298)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v298 + 24))(v298, v402);
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 272), 257, "", 0);
    v423 = 0;
    *v406 = 0;
    v406[1] = 0;
    LODWORD(v422) = 0x1000000;
    HIDWORD(v422) = GenericVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v402, v398, (const llvm::MachineOperand *)&v422);
    LODWORD(v422) = 1;
    v423 = 0;
    v424 = v289;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v402, v398, (const llvm::MachineOperand *)&v422);
    v410 = (uint64_t)v398;
    v411 = v402;
    LODWORD(v412) = 1;
    v422 = (unint64_t)v406;
    v424 = 129;
    v426 = 129;
    LODWORD(v425) = 0;
    LODWORD(v427) = 0;
    v423 = 0x800000002;
    (*(void (**)(_QWORD *, uint64_t))(*v5 + 32))(v5, 74);
    v301 = v300;
    if ((uint64_t *)v422 != v406)
      free((void *)v422);
    v302 = *v275;
    v403 = *(_DWORD *)(*(_QWORD *)(v301 + 32) + 4);
    v303 = *(_QWORD **)(a1 + 272);
    v399 = (llvm::MachineFunction *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v303 + 16) + 176))(*(_QWORD *)(*v303 + 16));
    if ((v302 & 0x80000000) != 0)
      v304 = (uint64_t *)(v303[3] + 16 * (v302 & 0x7FFFFFFF) + 8);
    else
      v304 = (uint64_t *)(v303[34] + 8 * v302);
    v305 = *v304;
    if (*v304)
    {
      do
      {
        v306 = *(_QWORD *)(v305 + 24);
        if (v403 - 1 <= 0x3FFFFFFE)
          llvm::MachineOperand::substPhysReg((unsigned int *)v305, v403, (uint64_t)v399);
        else
          llvm::MachineOperand::setReg(v305, v403);
        v305 = v306;
      }
      while (v306);
    }
    v307 = *(_QWORD **)(a1 + 272);
    v308 = v307[3];
    v309 = *(_QWORD *)(v308 + 16 * (v302 & 0x7FFFFFFF));
    if ((v309 & 4) == 0)
    {
      v310 = v309 & 0xFFFFFFFFFFFFFFF8;
      if (v310)
        *(_QWORD *)(v308 + 16 * (v403 & 0x7FFFFFFF)) = v310;
    }
    v311 = *v281;
    v312 = *(_DWORD *)(*(_QWORD *)(v301 + 32) + 36);
    v313 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v307 + 16) + 176))(*(_QWORD *)(*v307 + 16));
    if ((v311 & 0x80000000) != 0)
      v314 = (uint64_t *)(v307[3] + 16 * (v311 & 0x7FFFFFFF) + 8);
    else
      v314 = (uint64_t *)(v307[34] + 8 * v311);
    v315 = *v314;
    if (*v314)
    {
      do
      {
        v316 = *(_QWORD *)(v315 + 24);
        if (v312 - 1 <= 0x3FFFFFFE)
          llvm::MachineOperand::substPhysReg((unsigned int *)v315, v312, v313);
        else
          llvm::MachineOperand::setReg(v315, v312);
        v315 = v316;
      }
      while (v316);
    }
    v317 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 24);
    v318 = *(_QWORD *)(v317 + 16 * (v311 & 0x7FFFFFFF));
    if ((v318 & 4) == 0)
    {
      v319 = v318 & 0xFFFFFFFFFFFFFFF8;
      if (v319)
        *(_QWORD *)(v317 + 16 * (v312 & 0x7FFFFFFF)) = v319;
    }
    v320 = v400;
    if ((*(_BYTE *)v400 & 4) == 0)
    {
      v320 = v400;
      if ((*(_WORD *)(v400 + 44) & 8) != 0)
      {
        v320 = v400;
        do
          v320 = *(_QWORD *)(v320 + 8);
        while ((*(_WORD *)(v320 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v400 + 24) + 40, v400, *(_QWORD *)(v320 + 8));
    v321 = v401;
    if ((*(_BYTE *)v401 & 4) == 0)
    {
      v321 = v401;
      if ((*(_WORD *)(v401 + 44) & 8) != 0)
      {
        v321 = v401;
        do
          v321 = *(_QWORD *)(v321 + 8);
        while ((*(_WORD *)(v321 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v401 + 24) + 40, v401, *(_QWORD *)(v321 + 8));
    v270 += 2;
    v268 = 1;
    v269 = v406;
    if (v270 < v408)
      continue;
    break;
  }
LABEL_702:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 280) + 40))(*(_QWORD *)(a1 + 280), a2);
  return 1;
}

uint64_t sub_1C4A549C0(uint64_t a1, uint64_t a2, _BYTE *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  int v29;
  _DWORD v30[6];
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (**(_QWORD **)a1 == **(_QWORD **)(a1 + 8))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 + 272);
  v7 = *(unsigned int *)(a2 + 4);
  v8 = (uint64_t *)((v7 & 0x80000000) != 0
                 ? *(_QWORD *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8
                 : *(_QWORD *)(v6 + 272) + 8 * v7);
  v9 = *v8;
  if (!v9)
    return 0;
  while ((*(_BYTE *)(v9 + 3) & 1) != 0)
  {
    v9 = *(_QWORD *)(v9 + 24);
    if (!v9)
      return 0;
  }
  while (1)
  {
    v9 = *(_QWORD *)(v9 + 24);
    if (!v9)
      break;
    if ((*(_BYTE *)(v9 + 3) & 1) == 0)
      return 0;
  }
  v10 = (uint64_t *)((v7 & 0x80000000) != 0
                  ? *(_QWORD *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v6 + 272) + 8 * v7);
  v11 = *v10;
  if (!v11)
    return 0;
  v26 = a2;
  if ((*(_BYTE *)(v11 + 3) & 1) == 0)
  {
    v11 = *(_QWORD *)(v11 + 24);
    if (!v11 || (*(_BYTE *)(v11 + 3) & 1) == 0)
      return 0;
  }
  v15 = *(_QWORD *)(v11 + 8);
  if (!v15)
    return 0;
  if (**(_WORD **)(v15 + 16) != 127)
    return 0;
  if (*(_DWORD *)(v15 + 40) != 3)
    return 0;
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_DWORD *)(v16 + 36);
  v18 = sub_1C554C050(*(_DWORD *)(v16 + 68), v6);
  if (!v19)
    return 0;
  *a3 = 1;
  if (v18 <= **(unsigned int **)(a1 + 24) && a4 == 0)
    return 0;
  v21 = *(_QWORD *)(a1 + 40);
  v22 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 44);
  v34 = **(_QWORD **)a1;
  v35 = 0;
  v30[0] = v17;
  v30[4] = 0;
  v28 = v34;
  v29 = 0;
  v31 = sub_1C5544694(v21, &v28, 1 << v18);
  v32 = v23;
  v33 = 1;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, 47, &v34, 1, v30, 2, v22 | 0x100000000);
  v25 = v24;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 280) + 32))(*(_QWORD *)(v5 + 280), *(_QWORD *)(a1 + 32));
  llvm::MachineOperand::setReg(v26, *(_DWORD *)(*(_QWORD *)(v25 + 32) + 4));
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 280) + 40))(*(_QWORD *)(v5 + 280), *(_QWORD *)(a1 + 32));
  return 1;
}

uint64_t sub_1C4A54BEC(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x8_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  int v67;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  const llvm::APFloat *v78;
  llvm::APFloatBase *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  _DWORD *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  int v117;
  uint64_t v118;
  uint64_t *v119;
  unsigned int v120;
  uint64_t v121;
  __int128 v122;
  unint64_t *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  size_t v143;
  size_t v144;
  uint64_t v145;
  size_t v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  size_t v151;
  uint64_t v152;
  size_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  void **v160;
  void (**v161)(void **);
  _BYTE *v162;
  void (**v163)(_BYTE *);
  uint64_t *v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  _DWORD *v168;
  uint64_t v169;
  int v170;
  int v171;
  int v172;
  int v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  void **v178;
  void (**v179)(void **);
  _BYTE *v180;
  void (**v181)(_BYTE *);
  uint64_t *v182;
  int v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  void **v190;
  void (**v191)(void **);
  _BYTE *v192;
  void (**v193)(_BYTE *);
  size_t v194;
  void *v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  void **v199;
  void (**v200)(void **);
  _BYTE *v201;
  void (**v202)(_BYTE *);
  int v203;
  int v204;
  int v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint8x8_t v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int *v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  BOOL v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  BOOL v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _DWORD *v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  unsigned int v293;
  BOOL v294;
  BOOL v295;
  uint64_t v296;
  _BYTE *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  llvm::MachineInstr *v303;
  llvm::MachineInstr *v304;
  int v305;
  llvm::MachineFunction *v306;
  llvm::MachineInstr *v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  llvm::MachineFunction *v313;
  llvm::MachineInstr *v314;
  llvm::MachineInstr *v315;
  uint64_t v316;
  uint64_t v317;
  char v318;
  uint64_t v319;
  int v320;
  int64_t v321;
  BOOL v322;
  unint64_t v323;
  int v324;
  uint64_t v325;
  void **v326;
  void (**v327)(void **);
  _BYTE *v328;
  void (**v329)(_BYTE *);
  unsigned int v330;
  uint64_t v331;
  int v332;
  int64_t v333;
  unint64_t v334;
  unint64_t v335;
  unsigned int v336;
  uint64_t v337;
  void **v338;
  void (**v339)(void **);
  _BYTE *v340;
  void (**v341)(_BYTE *);
  unsigned int v342;
  uint64_t v343;
  char v344;
  uint64_t v345;
  _DWORD *v346;
  unint64_t v347;
  unsigned int v348;
  unsigned int v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  int64_t v359;
  unint64_t v360;
  unsigned int v361;
  uint64_t v362;
  void *v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  _DWORD *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t v382;
  int v383;
  uint64_t v384;
  int v385;
  int v386;
  uint64_t *v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  _BOOL4 v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  uint64_t *v397;
  uint64_t v398;
  char v399;
  int v400;
  BOOL v401;
  int v402;
  uint64_t v403;
  int v404;
  unint64_t v405;
  int v406;
  unint64_t v407;
  BOOL v408;
  uint64_t v410;
  uint64_t v411;
  void **v412;
  void (**v413)(void **);
  _BYTE *v414;
  void (**v415)(_BYTE *);
  unsigned int v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  int v421;
  unint64_t v422;
  unint64_t v423;
  int v424;
  uint64_t v425;
  int v426;
  int v427;
  BOOL v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  size_t v434;
  int v435;
  int v436;
  int *v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  const char *v443;
  unsigned int v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  int v452;
  int v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  char v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  char v462;
  int v463;
  uint64_t v464;
  char v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  char v473;
  uint64_t v474;
  char v475;
  unint64_t v476;
  uint64_t v477;
  int v478;
  uint64_t v479;
  char v480;
  uint64_t v481;
  char v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  unsigned int v487;
  void *v488;
  uint64_t v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  unsigned int GenericVirtualRegister;
  unsigned int v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  char v504;
  uint64_t v505;
  unsigned int v506;
  void *v507;
  unint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  __int128 v517;
  int v518;
  uint64_t v519;
  uint64_t v520;
  size_t v521;
  void *v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unsigned int v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v530;
  uint64_t v531;
  size_t v532;
  uint64_t v533;
  int v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  int v538;
  int v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  uint64_t v545;
  uint64_t v546;
  int v547;
  void *v548;
  void *v549;
  int v550;
  unsigned int v551;
  int v552;
  int v553;
  unsigned int v554;
  uint64_t v555;
  uint64_t v556;
  void *__n;
  size_t __na;
  int __nb;
  unint64_t __nf;
  int __nc;
  size_t __nd;
  int __ne;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  void *v570;
  uint64_t v571;
  unsigned int v572;
  char v573;
  unint64_t v574;
  unsigned int v575;
  int v576;
  char v577;
  void *v578;
  uint64_t v579;
  uint64_t v580;
  void **v581;
  uint64_t v582;
  int v583;
  void *v584;
  uint64_t v585;
  _BYTE v586[32];
  _BYTE v587[32];
  uint64_t v588;
  unint64_t *v589;
  uint64_t v590;
  uint64_t v591;
  __int128 v592;
  size_t v593;
  __int128 v594;
  __int128 v595;
  uint64_t v596;
  __int128 v597;
  uint64_t v598;
  unint64_t v599;
  uint64_t v600;
  int v601;
  unsigned __int8 v602;
  uint64_t v603;

  v603 = *MEMORY[0x1E0C80C00];
  a4[5] = *(_QWORD *)(a2 + 24);
  a4[6] = a2;
  v584 = v586;
  v585 = 0x400000000;
  v8 = **(unsigned __int16 **)(a2 + 16);
  if (v8 <= 0xA2)
  {
    if (**(unsigned __int16 **)(a2 + 16) > 0x7Fu)
    {
      if (v8 - 128 >= 2)
        goto LABEL_1063;
      v16 = *(_DWORD **)(a2 + 32);
      v17 = v16[1];
      if ((v17 & 0x80000000) == 0)
        goto LABEL_1063;
      v18 = a1[4];
      if ((v17 & 0x7FFFFFFFu) >= *(_DWORD *)(v18 + 432))
        goto LABEL_1063;
      v19 = v16[9];
      v20 = v16[17];
      v21 = *(void **)(*(_QWORD *)(v18 + 424) + 8 * (v17 & 0x7FFFFFFF));
      v599 = (unint64_t)v21;
      if (v21 != (void *)257 && v21 != (void *)129)
        goto LABEL_1063;
      v22 = sub_1C554C050(v20, v18);
      if (!v23)
        goto LABEL_1063;
      v24 = v22;
      v26 = sub_1C4825F50(&v599);
      if ((_DWORD)v25 == 1)
      if (v24 != v26 - 1)
        goto LABEL_1063;
      *(_QWORD *)v587 = v599;
      *(_DWORD *)&v587[8] = 0;
      v27 = sub_1C5544694((uint64_t)a4, (unint64_t *)v587, 0);
      v29 = v28;
      if (**(_WORD **)(a2 + 16) == 129)
        v30 = -1;
      else
        v30 = 1;
      *(_QWORD *)v587 = v599;
      *(_DWORD *)&v587[8] = 0;
      v31 = sub_1C5544694((uint64_t)a4, (unint64_t *)v587, v30);
      LODWORD(v578) = v17;
      LODWORD(v579) = 1;
      *(_DWORD *)v587 = 40;
      *(_DWORD *)&v587[16] = 2;
      *(_DWORD *)&v587[24] = v19;
      LODWORD(v589) = 0;
      v590 = v27;
      v591 = v29;
      LODWORD(v592) = 1;
      *((_QWORD *)&v592 + 1) = v31;
      v593 = v32;
      LODWORD(v594) = 1;
      *((_QWORD *)&v594 + 1) = v27;
      *(_QWORD *)&v595 = v29;
      DWORD2(v595) = 1;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 51, &v578, 1, v587, 5, 0);
      v33 = *(_QWORD *)(a2 + 24);
      v34 = a2;
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        v34 = a2;
        if ((*(_WORD *)(a2 + 44) & 8) != 0)
        {
          v34 = a2;
          do
            v34 = *(_QWORD *)(v34 + 8);
          while ((*(_WORD *)(v34 + 44) & 8) != 0);
        }
      }
LABEL_31:
      v35 = *(_QWORD *)(v34 + 8);
      v36 = v33 + 40;
      v37 = a2;
LABEL_32:
      sub_1C487FE80(v36, v37, v35);
      goto LABEL_1033;
    }
    switch(**(_WORD **)(a2 + 16))
    {
      case 'r':
        v9 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
        v10 = a1[4];
        if ((v9 & 0x80000000) != 0)
          v11 = (uint64_t *)(*(_QWORD *)(v10 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
        else
          v11 = (uint64_t *)(*(_QWORD *)(v10 + 272) + 8 * v9);
        v108 = *v11;
        if (v108
          && ((*(_BYTE *)(v108 + 3) & 1) != 0 || (v108 = *(_QWORD *)(v108 + 24)) != 0 && (*(_BYTE *)(v108 + 3) & 1) != 0))
        {
          v109 = *(_QWORD *)(v108 + 8);
        }
        else
        {
          v109 = 0;
        }
        if (**(_WORD **)(v109 + 16) != 51)
          goto LABEL_1063;
        v110 = (uint64_t *)((v9 & 0x80000000) != 0
                         ? *(_QWORD *)(v10 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(v10 + 272) + 8 * v9);
        v167 = *v110;
        if (!v167)
          goto LABEL_1063;
        v168 = *(_DWORD **)(v109 + 32);
        v169 = v168[17];
        v170 = v168[25];
        v171 = v168[33];
        v172 = v168[41];
        v173 = v168[12];
        while ((*(_BYTE *)(v167 + 3) & 1) != 0)
        {
          v167 = *(_QWORD *)(v167 + 24);
          if (!v167)
            goto LABEL_1063;
        }
        while (1)
        {
          v167 = *(_QWORD *)(v167 + 24);
          if (!v167)
            break;
          if ((*(_BYTE *)(v167 + 3) & 1) == 0)
            goto LABEL_1063;
        }
        if ((v169 & 0x80000000) != 0)
          v174 = (uint64_t *)(*(_QWORD *)(v10 + 24) + 16 * (v169 & 0x7FFFFFFF) + 8);
        else
          v174 = (uint64_t *)(*(_QWORD *)(v10 + 272) + 8 * v169);
        v198 = *v174;
        if (!v198)
          goto LABEL_1063;
        while ((*(_BYTE *)(v198 + 3) & 1) != 0)
        {
          v198 = *(_QWORD *)(v198 + 24);
          if (!v198)
            goto LABEL_1063;
        }
        while (1)
        {
          v198 = *(_QWORD *)(v198 + 24);
          if (!v198)
            break;
          if ((*(_BYTE *)(v198 + 3) & 1) == 0)
            goto LABEL_1063;
        }
        if ((v169 & 0x80000000) == 0
          || (v169 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v10 + 432)
          || *(_QWORD *)(*(_QWORD *)(v10 + 424) + 8 * (v169 & 0x7FFFFFFF)) != 129)
        {
          goto LABEL_1063;
        }
        *(_QWORD *)v587 = &off_1E816EFF0;
        *(_QWORD *)&v587[8] = sub_1C554C894;
        *(_QWORD *)&v587[24] = v587;
        v578 = &off_1E816F038;
        v579 = (uint64_t)sub_1C554C8B0;
        v581 = &v578;
        sub_1C554C3AC(v170, v10, (uint64_t)v587, (uint64_t)&v578, 0, 0, &v599);
        v199 = v581;
        if (v581 == &v578)
        {
          v200 = (void (**)(void **))((char *)v578 + 32);
          v199 = &v578;
LABEL_267:
          (*v200)(v199);
          goto LABEL_268;
        }
        if (v581)
        {
          v200 = (void (**)(void **))((char *)*v581 + 40);
          goto LABEL_267;
        }
LABEL_268:
        v201 = *(_BYTE **)&v587[24];
        if (*(_BYTE **)&v587[24] == v587)
        {
          v202 = (void (**)(_BYTE *))(*(_QWORD *)v587 + 32);
          v201 = v587;
LABEL_270:
          (*v202)(v201);
          goto LABEL_271;
        }
        if (*(_QWORD *)&v587[24])
        {
          v202 = (void (**)(_BYTE *))(**(_QWORD **)&v587[24] + 40);
          goto LABEL_270;
        }
LABEL_271:
        v203 = v602;
        v204 = 2;
        if (v173 != 33 || !v602)
          goto LABEL_638;
        v205 = v602;
        v206 = v600;
        if (v600 > 0x40)
        {
          v320 = 0;
          v321 = ((unint64_t)v600 + 63) >> 6;
          do
          {
            v322 = v321-- < 1;
            if (v322)
              break;
            v323 = *(_QWORD *)(v599 + 8 * v321);
            v320 += __clz(v323);
          }
          while (!v323);
          v324 = v600 | 0xFFFFFFC0;
          if ((v600 & 0x3F) == 0)
            v324 = 0;
          if (v320 + v324 != (_DWORD)v600)
          {
            v204 = 2;
LABEL_640:
            if (v206 >= 0x41 && v599)
              MEMORY[0x1CAA32F9C](v599, 0x1000C8000313F17);
            goto LABEL_643;
          }
        }
        else if (v599)
        {
          goto LABEL_1063;
        }
        v325 = a1[4];
        *(_QWORD *)v587 = &off_1E816EFF0;
        *(_QWORD *)&v587[8] = sub_1C554C894;
        *(_QWORD *)&v587[24] = v587;
        v578 = &off_1E816F038;
        v579 = (uint64_t)sub_1C554C8B0;
        v581 = &v578;
        sub_1C554C3AC(v172, v325, (uint64_t)v587, (uint64_t)&v578, 0, 0, &v574);
        v326 = v581;
        if (v581 == &v578)
        {
          v327 = (void (**)(void **))((char *)v578 + 32);
          v326 = &v578;
LABEL_566:
          (*v327)(v326);
          goto LABEL_567;
        }
        if (v581)
        {
          v327 = (void (**)(void **))((char *)*v581 + 40);
          goto LABEL_566;
        }
LABEL_567:
        v328 = *(_BYTE **)&v587[24];
        if (*(_BYTE **)&v587[24] == v587)
        {
          v329 = (void (**)(_BYTE *))(*(_QWORD *)v587 + 32);
          v328 = v587;
LABEL_569:
          (*v329)(v328);
          goto LABEL_570;
        }
        if (*(_QWORD *)&v587[24])
        {
          v329 = (void (**)(_BYTE *))(**(_QWORD **)&v587[24] + 40);
          goto LABEL_569;
        }
LABEL_570:
        if (!v577)
          goto LABEL_573;
        v330 = v575;
        if (v575 > 0x40)
        {
          v332 = 0;
          v333 = ((unint64_t)v575 + 63) >> 6;
          v334 = v574;
          do
          {
            v322 = v333-- < 1;
            if (v322)
              break;
            v335 = *(_QWORD *)(v574 + 8 * v333);
            v332 += __clz(v335);
          }
          while (!v335);
          v336 = v575 | 0xFFFFFFC0;
          if ((v575 & 0x3F) == 0)
            v336 = 0;
          if (v332 + v336 != v575)
          {
            v204 = 2;
            goto LABEL_635;
          }
        }
        else if (v574)
        {
LABEL_573:
          v204 = 2;
          goto LABEL_637;
        }
        v337 = a1[4];
        *(_QWORD *)v587 = &off_1E816EFF0;
        *(_QWORD *)&v587[8] = sub_1C554C894;
        *(_QWORD *)&v587[24] = v587;
        v578 = &off_1E816F038;
        v579 = (uint64_t)sub_1C554C8B0;
        v581 = &v578;
        sub_1C554C3AC(v171, v337, (uint64_t)v587, (uint64_t)&v578, 0, 0, &v571);
        v338 = v581;
        if (v581 == &v578)
        {
          v339 = (void (**)(void **))((char *)v578 + 32);
          v338 = &v578;
LABEL_586:
          (*v339)(v338);
          goto LABEL_587;
        }
        if (v581)
        {
          v339 = (void (**)(void **))((char *)*v581 + 40);
          goto LABEL_586;
        }
LABEL_587:
        v340 = *(_BYTE **)&v587[24];
        if (*(_BYTE **)&v587[24] == v587)
        {
          v341 = (void (**)(_BYTE *))(*(_QWORD *)v587 + 32);
          v340 = v587;
LABEL_589:
          (*v341)(v340);
          goto LABEL_590;
        }
        if (*(_QWORD *)&v587[24])
        {
          v341 = (void (**)(_BYTE *))(**(_QWORD **)&v587[24] + 40);
          goto LABEL_589;
        }
LABEL_590:
        if (!v573)
          goto LABEL_593;
        v342 = v572;
        if (v572 > 0x40)
        {
          v358 = 0;
          v359 = ((unint64_t)v572 + 63) >> 6;
          v343 = v571;
          do
          {
            v322 = v359-- < 1;
            if (v322)
              break;
            v360 = *(_QWORD *)(v571 + 8 * v359);
            v358 += __clz(v360);
          }
          while (!v360);
          v361 = v572 | 0xFFFFFFC0;
          if ((v572 & 0x3F) == 0)
            v361 = 0;
          if (v358 + v361 == v572)
          {
            v204 = 2;
LABEL_631:
            if (v343)
              MEMORY[0x1CAA32F9C](v343, 0x1000C8000313F17);
            goto LABEL_633;
          }
        }
        else
        {
          v343 = v571;
          if (!v571)
          {
LABEL_593:
            v204 = 2;
            goto LABEL_633;
          }
        }
        (*(void (**)(_QWORD *, uint64_t))(*a3 + 32))(a3, a2);
        llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32), v169);
        (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, a2);
        v362 = v109;
        if ((*(_BYTE *)v109 & 4) == 0)
        {
          v362 = v109;
          if ((*(_WORD *)(v109 + 44) & 8) != 0)
          {
            v362 = v109;
            do
              v362 = *(_QWORD *)(v362 + 8);
            while ((*(_WORD *)(v362 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v109 + 24) + 40, v109, *(_QWORD *)(v362 + 8));
        v204 = 1;
        if (v342 >= 0x41)
          goto LABEL_631;
LABEL_633:
        if (v330 < 0x41)
          goto LABEL_637;
        v334 = v574;
LABEL_635:
        if (v334)
          MEMORY[0x1CAA32F9C](v334, 0x1000C8000313F17);
LABEL_637:
        v203 = v205;
LABEL_638:
        if (v203)
        {
          v206 = v600;
          goto LABEL_640;
        }
LABEL_643:
        if (v204 == 2)
          goto LABEL_1063;
        goto LABEL_1033;
      case 's':
      case 'u':
      case 'v':
      case 'w':
        goto LABEL_1063;
      case 't':
        v43 = *(unsigned int *)(a2 + 40);
        v44 = *(_QWORD *)(a2 + 32);
        if (!(_DWORD)v43)
          goto LABEL_45;
        v45 = 0;
        v46 = *(unsigned __int8 **)(a2 + 32);
        while (1)
        {
          v47 = *v46;
          v46 += 32;
          if (v47 == 17)
            break;
          if (v43 == ++v45)
          {
LABEL_45:
            LODWORD(v45) = -1;
            break;
          }
        }
        v48 = *(_DWORD *)(v44 + 32 * v45 + 16);
        if (v48 != 2131)
        {
          if (v48 == 2579 || v48 == 2488)
          {
            v49 = *(unsigned int *)(v44 + 68);
            v50 = a1[4];
            if ((v49 & 0x80000000) != 0)
              v51 = (uint64_t *)(*(_QWORD *)(v50 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
            else
              v51 = (uint64_t *)(*(_QWORD *)(v50 + 272) + 8 * v49);
            v139 = *v51;
            if ((*(_BYTE *)(v139 + 3) & 1) == 0)
              v139 = *(_QWORD *)(v139 + 24);
            v140 = *(_QWORD *)(v139 + 8);
            if (**(_WORD **)(v140 + 16) == 51
              && !(*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 8) + 1020) & 1 | ((~*(unsigned __int16 *)(v140 + 44) & 0x7C0) == 0)))
            {
              v141 = *(_DWORD *)(*(_QWORD *)(v140 + 32) + 48);
              if ((v141 - 32) >= 0xA && (v141 - 10) >= 0xFFFFFFFD)
              {
                *(_QWORD *)v587 = 129;
                *(_DWORD *)&v587[8] = 0;
                v142 = sub_1C5544694((uint64_t)a4, (unint64_t *)v587, 0);
                v144 = v143;
                *(_QWORD *)v587 = 129;
                *(_DWORD *)&v587[8] = 0;
                v145 = sub_1C5544694((uint64_t)a4, (unint64_t *)v587, 1);
                v147 = *(_QWORD *)(v140 + 32);
                v148 = *(_DWORD *)(v147 + 68);
                v149 = *(_DWORD *)(v147 + 100);
                if (v141 == 7)
                  v150 = v145;
                else
                  v150 = v142;
                if (v141 == 7)
                  v151 = v146;
                else
                  v151 = v144;
                __na = v146;
                v566 = v145;
                if (v141 != 7)
                {
                  v142 = v145;
                  v144 = v146;
                }
                v578 = (void *)129;
                LODWORD(v579) = 0;
                *(_DWORD *)v587 = 1;
                *(_DWORD *)&v587[16] = 2;
                *(_DWORD *)&v587[24] = v148;
                LODWORD(v589) = 0;
                LODWORD(v590) = v148;
                LODWORD(v592) = 0;
                *((_QWORD *)&v592 + 1) = v150;
                v593 = v151;
                LODWORD(v594) = 1;
                *((_QWORD *)&v594 + 1) = v142;
                *(_QWORD *)&v595 = v144;
                DWORD2(v595) = 1;
                v152 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 51, &v578, 1, v587, 5, 0);
                v578 = (void *)129;
                LODWORD(v579) = 0;
                *(_DWORD *)v587 = 1;
                *(_DWORD *)&v587[16] = 2;
                *(_DWORD *)&v587[24] = v149;
                LODWORD(v589) = 0;
                LODWORD(v590) = v149;
                LODWORD(v592) = 0;
                *((_QWORD *)&v592 + 1) = v152;
                v593 = v153;
                LODWORD(v594) = 1;
                *((_QWORD *)&v594 + 1) = v142;
                *(_QWORD *)&v595 = v144;
                DWORD2(v595) = 1;
                v154 = (*(uint64_t (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 51, &v578, 1, v587, 5, 0);
                if (v141 == 9)
                {
                  v578 = (void *)129;
                  LODWORD(v579) = 0;
                  *(_DWORD *)v587 = 1;
                  *(_DWORD *)&v587[16] = 2;
                  *(_DWORD *)&v587[24] = v148;
                  LODWORD(v589) = 0;
                  LODWORD(v590) = v149;
                  LODWORD(v592) = 0;
                  *((_QWORD *)&v592 + 1) = v566;
                  v593 = __na;
                  LODWORD(v594) = 1;
                  *((_QWORD *)&v594 + 1) = v154;
                  *(_QWORD *)&v595 = v155;
                  DWORD2(v595) = 1;
                  (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 51, &v578, 1, v587, 5, 0);
                }
                v156 = *(_QWORD *)(a2 + 32) + 64;
                v157 = *(_DWORD *)(*(_QWORD *)(v155 + 32) + 4);
                goto LABEL_1032;
              }
            }
          }
          goto LABEL_1063;
        }
        v133 = *(_DWORD *)(v44 + 4);
        if ((v133 & 0x80000000) == 0)
          goto LABEL_1063;
        v134 = a1[4];
        v135 = v133 & 0x7FFFFFFF;
        if ((v133 & 0x7FFFFFFFu) >= *(_DWORD *)(v134 + 432))
          goto LABEL_1063;
        v136 = *(unsigned int *)(v44 + 68);
        v137 = *(_QWORD *)(*(_QWORD *)(v134 + 424) + 8 * v135);
        if (v137 != 129 && (v137 & 0x8000000000000000) == 0)
          goto LABEL_1063;
        if ((v136 & 0x80000000) != 0)
          v138 = (uint64_t *)(*(_QWORD *)(v134 + 24) + 16 * (v136 & 0x7FFFFFFF) + 8);
        else
          v138 = (uint64_t *)(*(_QWORD *)(v134 + 272) + 8 * v136);
        v243 = *v138;
        if (v243
          && ((*(_BYTE *)(v243 + 3) & 1) != 0 || (v243 = *(_QWORD *)(v243 + 24)) != 0 && (*(_BYTE *)(v243 + 3) & 1) != 0))
        {
          v244 = *(_QWORD *)(v243 + 8);
        }
        else
        {
          v244 = 0;
        }
        v245 = **(unsigned __int16 **)(v244 + 16);
        if (v245 > 0x10F)
        {
          if ((v245 - 272 > 0x3D || ((1 << (v245 - 16)) & 0x20000040000000C1) == 0) && v245 != 357)
            goto LABEL_402;
        }
        else if ((v245 - 163 > 0x38 || ((1 << (v245 + 93)) & 0x18800000000140DLL) == 0)
               && v245 != 85)
        {
          goto LABEL_402;
        }
        if ((v136 & 0x80000000) != 0)
          v258 = (uint64_t *)(*(_QWORD *)(v134 + 24) + 16 * (v136 & 0x7FFFFFFF) + 8);
        else
          v258 = (uint64_t *)(*(_QWORD *)(v134 + 272) + 8 * v136);
        v259 = *v258;
        if (v259)
        {
          while ((*(_BYTE *)(v259 + 3) & 1) != 0)
          {
            v259 = *(_QWORD *)(v259 + 24);
            if (!v259)
              goto LABEL_402;
          }
          do
          {
            v259 = *(_QWORD *)(v259 + 24);
            if (!v259)
              goto LABEL_1063;
          }
          while ((*(_BYTE *)(v259 + 3) & 1) != 0);
        }
LABEL_402:
        v260 = *(_QWORD *)(v134 + 24);
        v261 = *(_QWORD *)(v260 + 16 * v135 + 8);
        if (!v261)
        {
LABEL_406:
          LODWORD(v578) = v133;
          LODWORD(v579) = 1;
          *(_DWORD *)v587 = v136;
          *(_DWORD *)&v587[16] = 0;
          (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 262, &v578, 1, v587, 1, 0);
          v33 = *(_QWORD *)(a2 + 24);
          v34 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v34 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v34 = a2;
              do
                v34 = *(_QWORD *)(v34 + 8);
              while ((*(_WORD *)(v34 + 44) & 8) != 0);
            }
          }
          goto LABEL_31;
        }
        v262 = *(_QWORD *)(v134 + 272);
        while ((*(_BYTE *)(v261 + 3) & 1) != 0)
        {
          v261 = *(_QWORD *)(v261 + 24);
          if (!v261)
            goto LABEL_406;
        }
        v263 = *(_QWORD *)(v261 + 8);
LABEL_415:
        v264 = **(unsigned __int16 **)(v263 + 16);
        if ((v264 - 165) < 2 || v264 == 163)
          goto LABEL_432;
        if (v264 == 177)
        {
          v265 = *(unsigned int *)(*(_QWORD *)(v263 + 32) + 4);
          v266 = (uint64_t *)((int)v265 >= 0 ? v262 + 8 * v265 : v260 + 16 * (v265 & 0x7FFFFFFF) + 8);
          v267 = *v266;
          if (v267)
          {
            v268 = v267;
            if ((*(_DWORD *)v267 & 0x1000000) == 0)
              goto LABEL_426;
            v268 = v267;
            while (1)
            {
              v268 = *(_QWORD *)(v268 + 24);
              if (!v268)
                break;
              if ((*(_BYTE *)(v268 + 3) & 1) == 0)
              {
LABEL_426:
                while (1)
                {
                  v268 = *(_QWORD *)(v268 + 24);
                  if (!v268)
                    break;
                  if ((*(_BYTE *)(v268 + 3) & 1) == 0)
                    goto LABEL_532;
                }
                if ((*(_DWORD *)v267 & 0x1000000) != 0)
                {
                  do
                    v267 = *(_QWORD *)(v267 + 24);
                  while ((*(_BYTE *)(v267 + 3) & 1) != 0);
                }
                if (**(_WORD **)(*(_QWORD *)(v267 + 8) + 16) == 163)
                {
LABEL_432:
                  while (1)
                  {
                    v261 = *(_QWORD *)(v261 + 24);
                    if (!v261)
                      goto LABEL_406;
                    if ((*(_BYTE *)(v261 + 3) & 1) == 0 && *(_QWORD *)(v261 + 8) != v263)
                    {
                      v263 = *(_QWORD *)(v261 + 8);
                      goto LABEL_415;
                    }
                  }
                }
                break;
              }
            }
          }
        }
LABEL_532:
        v308 = v260 + 16 * (v136 & 0x7FFFFFFF) + 8;
        v309 = (uint64_t *)(v262 + 8 * v136);
        if ((int)v136 < 0)
          v309 = (uint64_t *)v308;
        v310 = *v309;
        if (!v310)
          goto LABEL_1063;
        if ((*(_BYTE *)(v310 + 3) & 1) == 0)
        {
          v310 = *(_QWORD *)(v310 + 24);
          if (!v310 || (*(_BYTE *)(v310 + 3) & 1) == 0)
            goto LABEL_1063;
        }
        v311 = *(_QWORD *)(v310 + 8);
        if (!v311 || **(_WORD **)(v311 + 16) != 179 || *(_DWORD *)(v311 + 40) != 2)
          goto LABEL_1063;
        v312 = *(_DWORD *)(*(_QWORD *)(v311 + 32) + 36);
        *(_DWORD *)v587 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v134, 257, "", 0);
        v313 = sub_1C5547D24(a4, 2131, (int *)v587, 1, 0);
        v315 = v314;
        memset(&v587[8], 0, 24);
        *(_DWORD *)&v587[4] = v312;
        *(_DWORD *)v587 = 0;
        llvm::MachineInstr::addOperand(v314, v313, (const llvm::MachineOperand *)v587);
        LODWORD(v578) = v133;
        LODWORD(v579) = 1;
        *(_QWORD *)v587 = v313;
        *(_QWORD *)&v587[8] = v315;
        *(_DWORD *)&v587[16] = 1;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 179, &v578, 1, v587, 1, 0);
        v316 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v316 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v316 = a2;
            do
              v316 = *(_QWORD *)(v316 + 8);
            while ((*(_WORD *)(v316 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v316 + 8));
        if (sub_1C4778650(a1[4], v136))
        {
          v317 = v244;
          if ((*(_BYTE *)v244 & 4) == 0)
          {
            v317 = v244;
            if ((*(_WORD *)(v244 + 44) & 8) != 0)
            {
              v317 = v244;
              do
                v317 = *(_QWORD *)(v317 + 8);
              while ((*(_WORD *)(v317 + 44) & 8) != 0);
            }
          }
          v35 = *(_QWORD *)(v317 + 8);
          v36 = *(_QWORD *)(v244 + 24) + 40;
          v37 = v244;
          goto LABEL_32;
        }
        goto LABEL_1033;
      case 'x':
        v52 = *(_QWORD *)(a2 + 32);
        v53 = *(unsigned int *)(v52 + 4);
        if ((v53 & 0x80000000) == 0)
          goto LABEL_1063;
        v54 = a1[4];
        v564 = v53 & 0x7FFFFFFF;
        if (v564 >= *(unsigned int *)(v54 + 432))
          goto LABEL_1063;
        __n = *(void **)(*(_QWORD *)(v54 + 424) + 8 * v564);
        if (__n != (void *)513 && __n != (void *)257)
          goto LABEL_1063;
        sub_1C4A3C18C((uint64_t)v587, v54, a1[6], a1[7], (unsigned __int8 *)v52, 1, 0, 0, 1u);
        if ((int)v593 >= 4 && (!HIDWORD(v593) || (sub_1C4A58E38(v53, a1[4]) & 1) != 0))
          goto LABEL_285;
        v56 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
        v57 = *(_DWORD *)(v56 + 32);
        if (v57 > 0x40)
          v58 = **(_QWORD **)(v56 + 24);
        else
          v58 = (uint64_t)(*(_QWORD *)(v56 + 24) << -(char)v57) >> -(char)v57;
        v210 = a1[4];
        v211 = *(_QWORD *)(*(_QWORD *)(v210 + 24) + 16 * v564 + 8);
        if (!v211)
          goto LABEL_284;
        while ((*(_BYTE *)(v211 + 3) & 1) != 0)
        {
          v211 = *(_QWORD *)(v211 + 24);
          if (!v211)
            goto LABEL_284;
        }
        v215 = *(_QWORD *)(v211 + 8);
        if (**(_WORD **)(v215 + 16) == 65)
        {
          while (1)
          {
            v211 = *(_QWORD *)(v211 + 24);
            if (!v211)
              break;
            if ((*(_BYTE *)(v211 + 3) & 1) == 0)
            {
              v216 = *(_QWORD *)(v211 + 8);
              if (v216 != v215)
              {
                v215 = *(_QWORD *)(v211 + 8);
                if (**(_WORD **)(v216 + 16) != 65)
                  goto LABEL_298;
              }
            }
          }
LABEL_284:
          v55.i32[0] = v58 + 1;
          v212 = (uint8x8_t)vcnt_s8(v55);
          v212.i16[0] = vaddlv_u8(v212);
          if (v212.i32[0] == 1)
            goto LABEL_285;
        }
LABEL_298:
        if (sub_1C4A58E38(v53, v210))
        {
          v217 = __clz(__rbit64(v58));
          if (v217 >= 4)
            v218 = 4;
          else
            v218 = v217;
          v552 = v218;
          if (v218)
          {
            if (v217 >= 4)
              v217 = 4;
            v555 = -(uint64_t)v217;
            v219 = 1;
            while (1)
            {
              v578 = __n;
              LODWORD(v579) = 0;
              v220 = v58;
              v58 >>= v219;
              sub_1C5544694((uint64_t)a4, (unint64_t *)&v578, v58);
              v222 = v221;
              if (!sub_1C4778650(a1[4], *(_DWORD *)(*(_QWORD *)(v221 + 32) + 4)))
                break;
              v223 = v585;
              if (v585 >= (unint64_t)HIDWORD(v585))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v584, (uint64_t)v586, v585 + 1, 8);
                v223 = v585;
              }
              v58 = v220;
              *((_QWORD *)v584 + v223) = v222;
              LODWORD(v585) = v585 + 1;
              ++v219;
              if (v555 + v219 == 1)
                goto LABEL_315;
            }
            v269 = sub_1C4A590A0(v53, *(_QWORD *)(a1[4] + 24), *(_QWORD *)(a1[4] + 272));
            if (__n != (void *)513 || !v269)
            {
              v228 = (uint64_t)__n;
              goto LABEL_323;
            }
            v227 = 1;
          }
          else
          {
LABEL_315:
            v227 = 0;
            LODWORD(v219) = v552;
            v58 >>= v552;
          }
        }
        else
        {
          LODWORD(v219) = 0;
          v227 = 0;
        }
        if ((unint64_t)(v58 - 0x10000) > 0xFFFFFFFFFFFE7FFFLL)
        {
          v228 = 129;
        }
        else
        {
          if (__n != (void *)257)
            v227 = 1;
          v213 = 1;
          if ((unint64_t)(v58 + 0x80000000) >> 31 > 2 || !v227)
          {
LABEL_335:
            if ((_DWORD)v585)
            {
              v239 = (uint64_t *)v584;
              v240 = (uint64_t *)((char *)v584 + 8 * v585);
              do
              {
                v241 = *v239;
                if (sub_1C4778650(a1[4], *(_DWORD *)(*(_QWORD *)(*v239 + 32) + 4)))
                {
                  v242 = v241;
                  if ((*(_BYTE *)v241 & 4) == 0)
                  {
                    v242 = v241;
                    if ((*(_WORD *)(v241 + 44) & 8) != 0)
                    {
                      v242 = v241;
                      do
                        v242 = *(_QWORD *)(v242 + 8);
                      while ((*(_WORD *)(v242 + 44) & 8) != 0);
                    }
                  }
                  sub_1C487FE80(*(_QWORD *)(v241 + 24) + 40, v241, *(_QWORD *)(v242 + 8));
                }
                ++v239;
              }
              while (v239 != v240);
            }
            if ((v213 & 1) != 0)
              goto LABEL_1063;
LABEL_1033:
            v107 = 1;
            goto LABEL_1064;
          }
          v228 = 257;
        }
LABEL_323:
        v229 = v58;
        v230 = a1[4];
        v231 = *(_QWORD *)(v230 + 24);
        v232 = *(_QWORD *)(v231 + 16 * v564 + 8);
        if (v58 < 0)
        {
          while (1)
          {
            if (!v232)
              goto LABEL_331;
            if ((*(_BYTE *)(v232 + 3) & 1) == 0)
              break;
            v232 = *(_QWORD *)(v232 + 24);
          }
          v270 = *(_QWORD *)(v232 + 8);
LABEL_440:
          v271 = **(unsigned __int16 **)(v270 + 16);
          if ((v271 & 0xFFFE) == 0x32)
          {
            v272 = *(_QWORD *)(v270 + 32);
            if ((v271 != 51 || *(_DWORD *)(v272 + 132) != (_DWORD)v53 && *(_DWORD *)(v272 + 164) != (_DWORD)v53)
              && (*(_DWORD *)(v272 + 32 * (v271 != 50) + 16) - 34) >= 4)
            {
              goto LABEL_455;
            }
          }
          else
          {
            if ((v271 - 46) < 2 || v271 == 308)
              goto LABEL_455;
            if (v271 == 45)
            {
              v273 = *(unsigned int *)(*(_QWORD *)(v270 + 32) + 36);
              if ((v273 & 0x80000000) != 0)
                v274 = (uint64_t *)(v231 + 16 * (v273 & 0x7FFFFFFF) + 8);
              else
                v274 = (uint64_t *)(*(_QWORD *)(v230 + 272) + 8 * v273);
              v275 = *v274;
              if ((*(_BYTE *)(v275 + 3) & 1) == 0)
                v275 = *(_QWORD *)(v275 + 24);
              if (**(_WORD **)(*(_QWORD *)(v275 + 8) + 16) != 282)
              {
LABEL_455:
                while (1)
                {
                  v232 = *(_QWORD *)(v232 + 24);
                  if (!v232)
                    break;
                  if ((*(_BYTE *)(v232 + 3) & 1) == 0 && *(_QWORD *)(v232 + 8) != v270)
                  {
                    v270 = *(_QWORD *)(v232 + 8);
                    goto LABEL_440;
                  }
                }
LABEL_331:
                v233 = 124;
                goto LABEL_332;
              }
            }
          }
          if (__n != (void *)513)
            goto LABEL_285;
          v331 = v228;
          if (!sub_1C4A590A0(v53, v231, *(_QWORD *)(v230 + 272)))
            goto LABEL_285;
          v233 = 124;
          v229 = v58;
          v228 = v331;
        }
        else
        {
          if (v232)
          {
            while ((*(_BYTE *)(v232 + 3) & 1) != 0)
            {
              v232 = *(_QWORD *)(v232 + 24);
              if (!v232)
                goto LABEL_327;
            }
            v248 = *(_QWORD *)(v232 + 8);
LABEL_365:
            v249 = **(unsigned __int16 **)(v248 + 16);
            if ((v249 & 0xFFFE) == 0x32)
            {
              v250 = *(_QWORD *)(v248 + 32);
              if ((v249 != 51 || *(_DWORD *)(v250 + 132) != (_DWORD)v53 && *(_DWORD *)(v250 + 164) != (_DWORD)v53)
                && (*(_DWORD *)(v250 + 32 * (v249 != 50) + 16) - 38) >= 4)
              {
                goto LABEL_390;
              }
              goto LABEL_618;
            }
            if (v249 == 65)
            {
              v568 = v229;
              v253 = v228;
              v254 = sub_1C554C050(v53, v230);
              v228 = v253;
              v229 = v568;
              if (!v255 || v254 != 0xFFFF)
              {
                v248 = *(_QWORD *)(v232 + 8);
                goto LABEL_390;
              }
              goto LABEL_618;
            }
            if (v249 == 45)
            {
              v251 = *(unsigned int *)(*(_QWORD *)(v248 + 32) + 36);
              if ((v251 & 0x80000000) != 0)
                v252 = (uint64_t *)(*(_QWORD *)(v230 + 24) + 16 * (v251 & 0x7FFFFFFF) + 8);
              else
                v252 = (uint64_t *)(*(_QWORD *)(v230 + 272) + 8 * v251);
              v257 = *v252;
              if ((*(_BYTE *)(v257 + 3) & 1) == 0)
                v257 = *(_QWORD *)(v257 + 24);
              if (**(_WORD **)(*(_QWORD *)(v257 + 8) + 16) == 282)
                goto LABEL_618;
LABEL_390:
              while (1)
              {
                v232 = *(_QWORD *)(v232 + 24);
                if (!v232)
                  break;
                if ((*(_BYTE *)(v232 + 3) & 1) == 0 && *(_QWORD *)(v232 + 8) != v248)
                {
                  v248 = *(_QWORD *)(v232 + 8);
                  goto LABEL_365;
                }
              }
            }
            else
            {
              if ((v249 - 127) > 2)
              {
                v256 = (v249 - 46) > 0x15 || ((1 << (v249 - 46)) & 0x300003) == 0;
                if (!v256 || v249 == 308)
                  goto LABEL_390;
LABEL_618:
                if (__n == (void *)513)
                {
                  v356 = v228;
                  v357 = v229;
                  if ((sub_1C4A590A0(v53, *(_QWORD *)(a1[4] + 24), *(_QWORD *)(a1[4] + 272)) & 1) != 0)
                  {
                    v233 = 126;
                    v229 = v357;
                    v228 = v356;
                    goto LABEL_332;
                  }
                }
LABEL_285:
                v213 = 1;
                goto LABEL_335;
              }
              v354 = *(_DWORD *)(*(_QWORD *)(v248 + 32) + 4);
              if (v354 < 0)
              {
                v355 = v354 & 0x7FFFFFFF;
                if (v355 < *(_DWORD *)(v230 + 432)
                  && *(_QWORD *)(*(_QWORD *)(v230 + 424) + 8 * v355) == 513)
                {
                  goto LABEL_618;
                }
              }
            }
          }
LABEL_327:
          v233 = 126;
        }
LABEL_332:
        v578 = (void *)v228;
        LODWORD(v579) = 0;
        v234 = (void *)sub_1C5544694((uint64_t)a4, (unint64_t *)&v578, v229);
        v599 = (unint64_t)__n;
        LODWORD(v600) = 0;
        v578 = v234;
        v579 = v235;
        LODWORD(v580) = 1;
        v236 = (void *)sub_1C5546B4C(a4, v233, &v599, (int *)&v578);
        if ((_DWORD)v219)
        {
          v599 = (unint64_t)__n;
          LODWORD(v600) = 0;
          v578 = v236;
          v579 = v237;
          LODWORD(v580) = 1;
          v574 = (unint64_t)__n;
          v575 = 0;
          v581 = (void **)sub_1C5544694((uint64_t)a4, &v574, v219);
          v582 = v238;
          v583 = 1;
          (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a4 + 32))(a4, 127, &v599, 1, &v578, 2, 0);
        }
        sub_1C4923194((_QWORD *)a1[4], a2, *(_DWORD *)(*(_QWORD *)(v237 + 32) + 4), a3);
        v213 = 0;
        goto LABEL_335;
      case 'y':
        v59 = *(_QWORD *)(a2 + 32);
        v60 = *(_DWORD *)(v59 + 4);
        if ((v60 & 0x80000000) == 0)
          goto LABEL_1063;
        v61 = a1[4];
        if ((v60 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v61 + 432))
          goto LABEL_1063;
        if (*(_QWORD *)(*(_QWORD *)(v61 + 424) + 8 * (v60 & 0x7FFFFFFF)) != 257)
          goto LABEL_1063;
        if (!sub_1C4A58D20(*(_DWORD *)(v59 + 4), *(_QWORD *)(v61 + 24), *(_QWORD *)(v61 + 272)))
          goto LABEL_1063;
        v62 = sub_1C4A3C18C((uint64_t)v587, v61, a1[6], a1[7], (unsigned __int8 *)v59, 0, 0, 0, 1u);
        if ((int)v593 >= 4)
          goto LABEL_1063;
        v63 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48);
        v64 = *(_QWORD *)(v63 + 32);
        if ((_UNKNOWN *)v64 == &unk_1C866F1C0)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v579, (const llvm::detail::DoubleAPFloat *)(v63 + 32));
        }
        else
        {
          v579 = *(_QWORD *)(v63 + 32);
          if ((*(_DWORD *)(v64 + 8) + 64) >= 0x80)
          {
            v62 = operator new[]();
            v580 = v62;
            v65 = BYTE4(v581) & 0xF0;
          }
          else
          {
            v65 = 0;
          }
          v66 = *(_BYTE *)(v63 + 52);
          v67 = v66 & 7;
          BYTE4(v581) = v66 & 0xF | v65;
          LODWORD(v581) = *(_DWORD *)(v63 + 48);
          v69 = (v66 & 6) != 0 && v67 != 3;
          if (v67 == 1 || v69)
          {
            v70 = *(unsigned int *)(v579 + 8);
            if ((v70 - 64) <= 0xFFFFFF7F)
              v71 = (uint64_t *)v62;
            else
              v71 = &v580;
            v74 = *(uint64_t **)(v63 + 40);
            v73 = (uint64_t *)(v63 + 40);
            v72 = v74;
            if ((*(_DWORD *)(*(v73 - 1) + 8) - 64) >= 0xFFFFFF80)
              v72 = v73;
            if (v70 <= 0xFFFFFFBF)
            {
              v75 = (unint64_t)(v70 + 64) >> 6;
              do
              {
                v76 = *v72++;
                *v71++ = v76;
                --v75;
              }
              while (v75);
            }
          }
        }
        LOBYTE(v571) = 0;
        v77 = 1;
        if (!llvm::APFloat::convert((uint64_t)&v578, &unk_1C866F15C, 1, &v571) && !(_BYTE)v571)
        {
          v77 = 1;
          if (!sub_1C4773C58((uint64_t)&v578))
          {
            v79 = llvm::ConstantFP::get(****(llvm::ConstantFP *****)(*(_QWORD *)(a2 + 24) + 32), (llvm::LLVMContext *)&v578, v78);
            v599 = 129;
            LODWORD(v600) = 0;
            v80 = (*(uint64_t (**)(uint64_t *, unint64_t *, llvm::APFloatBase *))(*a4 + 24))(a4, &v599, v79);
            LODWORD(v574) = v60;
            v575 = 1;
            v599 = v80;
            v600 = v81;
            v601 = 1;
            (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 178, &v574, 1, &v599, 1, 0);
            v82 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v82 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v82 = a2;
                do
                  v82 = *(_QWORD *)(v82 + 8);
                while ((*(_WORD *)(v82 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v82 + 8));
            v77 = 0;
          }
        }
        if ((_UNKNOWN *)v579 == &unk_1C866F1C0)
        {
          sub_1C4773C74(&v580);
        }
        else if ((*(_DWORD *)(v579 + 8) - 64) <= 0xFFFFFF7F && v580)
        {
          MEMORY[0x1CAA32F9C](v580, 0x1000C8000313F17);
        }
        if ((v77 & 1) != 0)
          goto LABEL_1063;
        goto LABEL_1033;
      default:
        if (v8 != 45)
        {
          if (v8 != 51)
            goto LABEL_1063;
LABEL_35:
          if (v8 != 335)
          {
            v38 = a1[4];
            v39 = *(_QWORD *)(a2 + 32);
            v40 = *(int *)(v39 + 48);
            v14 = *(unsigned int *)(v39 + 68);
            v41 = *(unsigned int *)(v39 + 100);
            if ((v40 - 32) > 9)
            {
              if (v40 >= 0x10)
                goto LABEL_1030;
              v565 = *(unsigned int *)(v39 + 100);
              v120 = *(unsigned __int16 *)(a2 + 44);
              v121 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 8);
              v122 = *(_OWORD *)(v121 + 1024);
              *(_OWORD *)v587 = *(_OWORD *)(v121 + 1008);
              *(_OWORD *)&v587[16] = v122;
              v123 = *(unint64_t **)(v121 + 1048);
              v588 = *(_QWORD *)(v121 + 1040);
              v589 = v123;
              v124 = *(_QWORD *)(v121 + 1056);
              v590 = v124;
              if (v124)
              {
                v125 = (unint64_t *)(v124 + 8);
                do
                  v126 = __ldxr(v125);
                while (__stxr(v126 + 1, v125));
              }
              LOWORD(v591) = *(_WORD *)(v121 + 1064);
              if (*(char *)(v121 + 1095) < 0)
              {
                sub_1C47EBC30(&v592, *(void **)(v121 + 1072), *(_QWORD *)(v121 + 1080));
              }
              else
              {
                v592 = *(_OWORD *)(v121 + 1072);
                v593 = *(_QWORD *)(v121 + 1088);
              }
              v594 = *(_OWORD *)(v121 + 1096);
              v595 = *(_OWORD *)(v121 + 1112);
              sub_1C4843224((uint64_t)&v596, (uint64_t *)(v121 + 1128));
              if (*(char *)(v121 + 1311) < 0)
              {
                sub_1C47EBC30(&v597, *(void **)(v121 + 1288), *(_QWORD *)(v121 + 1296));
              }
              else
              {
                v597 = *(_OWORD *)(v121 + 1288);
                v598 = *(_QWORD *)(v121 + 1304);
              }
              v183 = (v120 >> 6) & 1;
              if ((~v120 & 0x30) != 0)
                v183 = 0;
              if (v183 | v587[12] & 1)
              {
                v184 = (uint64_t *)((v14 & 0x80000000) != 0
                                 ? *(_QWORD *)(v38 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8
                                 : *(_QWORD *)(v38 + 272) + 8 * v14);
                v185 = *v184;
                if (v185)
                {
                  if ((*(_BYTE *)(v185 + 3) & 1) != 0
                    || (v185 = *(_QWORD *)(v185 + 24)) != 0 && (*(_BYTE *)(v185 + 3) & 1) != 0)
                  {
                    v369 = *(_QWORD *)(v185 + 8);
                    if (v369 && **(_WORD **)(v369 + 16) == 177 && *(_DWORD *)(v369 + 40) == 2)
                    {
                      v370 = (uint64_t *)((v565 & 0x80000000) != 0
                                       ? *(_QWORD *)(v38 + 24) + 16 * (v565 & 0x7FFFFFFF) + 8
                                       : *(_QWORD *)(v38 + 272) + 8 * v565);
                      if ((v525 = *v370) == 0
                        || (*(_BYTE *)(v525 + 3) & 1) == 0
                        && ((v525 = *(_QWORD *)(v525 + 24)) == 0 || (*(_BYTE *)(v525 + 3) & 1) == 0)
                        || (v530 = *(_QWORD *)(v525 + 8)) == 0
                        || **(_WORD **)(v530 + 16) != 177
                        || *(_DWORD *)(v530 + 40) != 2)
                      {
                        sub_1C48433E8((uint64_t)v587);
                        LODWORD(v41) = v565;
                        goto LABEL_1030;
                      }
                    }
                  }
                }
              }
              sub_1C48433E8((uint64_t)v587);
            }
            else
            {
              if ((v14 & 0x80000000) != 0)
                v42 = (uint64_t *)(*(_QWORD *)(v38 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
              else
                v42 = (uint64_t *)(*(_QWORD *)(v38 + 272) + 8 * v14);
              v165 = *v42;
              if (!v165)
                goto LABEL_1063;
              if ((*(_BYTE *)(v165 + 3) & 1) != 0)
              {
                v166 = *(_DWORD *)(v39 + 100);
              }
              else
              {
                v165 = *(_QWORD *)(v165 + 24);
                if (!v165)
                  goto LABEL_1063;
                v166 = *(_DWORD *)(v39 + 100);
                if ((*(_BYTE *)(v165 + 3) & 1) == 0)
                  goto LABEL_1063;
              }
              v367 = *(_QWORD *)(v165 + 8);
              if (v367 && **(_WORD **)(v367 + 16) == 124 && *(_DWORD *)(v367 + 40) == 2)
              {
                if (v166 < 0)
                  v368 = (uint64_t *)(*(_QWORD *)(v38 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
                else
                  v368 = (uint64_t *)(*(_QWORD *)(v38 + 272) + 8 * v41);
                v524 = *v368;
                if (v524)
                {
                  if ((*(_BYTE *)(v524 + 3) & 1) != 0)
                  {
                    LODWORD(v41) = *(_DWORD *)(v39 + 100);
                    goto LABEL_1060;
                  }
                  v524 = *(_QWORD *)(v524 + 24);
                  LODWORD(v41) = *(_DWORD *)(v39 + 100);
                  if (v524 && (*(_BYTE *)(v524 + 3) & 1) != 0)
                  {
LABEL_1060:
                    v528 = *(_QWORD *)(v524 + 8);
                    if (v528 && **(_WORD **)(v528 + 16) == 124 && *(_DWORD *)(v528 + 40) == 2)
                      goto LABEL_1063;
                  }
                }
LABEL_1030:
                v225 = v39 + 64;
                v226 = (unsigned int *)(v39 + 96);
                (*(void (**)(_QWORD *, uint64_t))(*a3 + 32))(a3, a2);
                *(_DWORD *)(v39 + 48) = dword_1C676B410[v40];
                goto LABEL_1031;
              }
            }
          }
LABEL_1063:
          v107 = 0;
          goto LABEL_1064;
        }
        v95 = *(_DWORD **)(a2 + 32);
        v96 = v95[1];
        if ((v96 & 0x80000000) == 0)
          goto LABEL_992;
        v97 = a1[4];
        if ((v96 & 0x7FFFFFFFu) >= *(_DWORD *)(v97 + 432)
          || *(_QWORD *)(*(_QWORD *)(v97 + 424) + 8 * (v96 & 0x7FFFFFFF)) != 513)
        {
          goto LABEL_992;
        }
        v545 = *(unsigned __int16 *)(a2 + 44);
        v98 = v95[9];
        v99 = v95[17];
        if ((v98 & 0x80000000) != 0)
          v100 = (uint64_t *)(*(_QWORD *)(v97 + 24) + 16 * (v98 & 0x7FFFFFFF) + 8);
        else
          v100 = (uint64_t *)(*(_QWORD *)(v97 + 272) + 8 * v98);
        v207 = *v100;
        v547 = v98;
        v550 = v99;
        v567 = a1[4];
        if (v207)
        {
          if ((*(_BYTE *)(v207 + 3) & 1) != 0
            || (v207 = *(_QWORD *)(v207 + 24)) != 0 && (*(_BYTE *)(v207 + 3) & 1) != 0)
          {
            v208 = *(_QWORD *)(v207 + 8);
          }
          else
          {
            v208 = 0;
          }
          if ((v99 & 0x80000000) == 0)
            goto LABEL_279;
        }
        else
        {
          v208 = 0;
          if ((v99 & 0x80000000) == 0)
          {
LABEL_279:
            v209 = (uint64_t *)(*(_QWORD *)(v97 + 272) + 8 * v99);
            goto LABEL_729;
          }
        }
        v209 = (uint64_t *)(*(_QWORD *)(v97 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
LABEL_729:
        v373 = *v209;
        if ((*(_BYTE *)(v373 + 3) & 1) == 0)
          v373 = *(_QWORD *)(v373 + 24);
        v556 = v208;
        __nc = **(unsigned __int16 **)(v208 + 16);
        v546 = *(_QWORD *)(v373 + 8);
        v374 = **(unsigned __int16 **)(v546 + 16);
        if ((sub_1C4A51DD8() & 1) != 0)
          goto LABEL_806;
        v375 = *(_DWORD **)(a2 + 32);
        v376 = v375[9];
        v377 = v375[17];
        if ((v376 & 0x80000000) != 0)
          v378 = (uint64_t *)(*(_QWORD *)(v567 + 24) + 16 * (v376 & 0x7FFFFFFF) + 8);
        else
          v378 = (uint64_t *)(*(_QWORD *)(v567 + 272) + 8 * v376);
        v379 = *v378;
        if (v379)
        {
          if ((*(_BYTE *)(v379 + 3) & 1) != 0
            || (v379 = *(_QWORD *)(v379 + 24)) != 0 && (*(_BYTE *)(v379 + 3) & 1) != 0)
          {
            v380 = *(_QWORD *)(v379 + 8);
          }
          else
          {
            v380 = 0;
          }
          if ((v377 & 0x80000000) == 0)
            goto LABEL_737;
        }
        else
        {
          v380 = 0;
          if ((v377 & 0x80000000) == 0)
          {
LABEL_737:
            v381 = (uint64_t *)(*(_QWORD *)(v567 + 272) + 8 * v377);
            goto LABEL_754;
          }
        }
        v381 = (uint64_t *)(*(_QWORD *)(v567 + 24) + 16 * (v377 & 0x7FFFFFFF) + 8);
LABEL_754:
        v382 = *v381;
        if ((*(_BYTE *)(v382 + 3) & 1) == 0)
          v382 = *(_QWORD *)(v382 + 24);
        v383 = v375[1];
        v384 = *(_QWORD *)(v382 + 8);
        v385 = **(unsigned __int16 **)(v380 + 16);
        if (v385 == 127)
          goto LABEL_782;
        v386 = **(unsigned __int16 **)(v384 + 16);
        if (v386 == 127)
          goto LABEL_782;
        if ((v385 == 308 || v385 == 47)
          && ((v376 & 0x80000000) != 0
            ? (v387 = (uint64_t *)(*(_QWORD *)(v567 + 24) + 16 * (v376 & 0x7FFFFFFF) + 8))
            : (v387 = (uint64_t *)(*(_QWORD *)(v567 + 272) + 8 * v376)),
              (v388 = *v387) != 0))
        {
          while ((*(_BYTE *)(v388 + 3) & 1) != 0)
          {
            v388 = *(_QWORD *)(v388 + 24);
            if (!v388)
              goto LABEL_766;
          }
          while (1)
          {
            v388 = *(_QWORD *)(v388 + 24);
            if (!v388)
              break;
            if ((*(_BYTE *)(v388 + 3) & 1) == 0)
              goto LABEL_766;
          }
        }
        else
        {
LABEL_766:
          if ((v386 == 308 || v386 == 47)
            && ((v377 & 0x80000000) != 0
              ? (v389 = (uint64_t *)(*(_QWORD *)(v567 + 24) + 16 * (v377 & 0x7FFFFFFF) + 8))
              : (v389 = (uint64_t *)(*(_QWORD *)(v567 + 272) + 8 * v377)),
                (v390 = *v389) != 0))
          {
            while ((*(_BYTE *)(v390 + 3) & 1) != 0)
            {
              v390 = *(_QWORD *)(v390 + 24);
              if (!v390)
                goto LABEL_777;
            }
            while (1)
            {
              v390 = *(_QWORD *)(v390 + 24);
              if (!v390)
                break;
              if ((*(_BYTE *)(v390 + 3) & 1) == 0)
                goto LABEL_777;
            }
          }
          else
          {
LABEL_777:
            if (v385 != 124 && v386 != 124)
              goto LABEL_806;
          }
        }
LABEL_782:
        v536 = *(unsigned __int16 *)(a2 + 44);
        v538 = v383;
        v541 = v376;
        v578 = &v580;
        v579 = 0x200000000;
        sub_1C4893E04((char *)&v578, 2uLL, 0);
        v533 = v380;
        v553 = v374;
        if (sub_1C4A51E28(v380, *(_QWORD *)(v567 + 24), *(_QWORD *)(v567 + 272), v578))
        {
          v391 = v567;
          if ((v541 & 0x80000000) != 0)
            v392 = (uint64_t *)(*(_QWORD *)(v567 + 24) + 16 * (v541 & 0x7FFFFFFF) + 8);
          else
            v392 = (uint64_t *)(*(_QWORD *)(v567 + 272) + 8 * v541);
          v394 = v384;
          v395 = *v392;
          v396 = v377;
          if (v395)
          {
            while ((*(_BYTE *)(v395 + 3) & 1) != 0)
            {
              v395 = *(_QWORD *)(v395 + 24);
              if (!v395)
                goto LABEL_790;
            }
            while (1)
            {
              v395 = *(_QWORD *)(v395 + 24);
              v393 = v395 == 0;
              if (!v395)
                break;
              if ((*(_BYTE *)(v395 + 3) & 1) == 0)
                goto LABEL_795;
            }
            v394 = v533;
            LODWORD(v377) = v541;
            LODWORD(v541) = v396;
          }
          else
          {
LABEL_790:
            v393 = 0;
          }
        }
        else
        {
          v393 = 0;
          v394 = v384;
          v391 = v567;
        }
LABEL_795:
        if (sub_1C4A51E28(v394, *(_QWORD *)(v391 + 24), *(_QWORD *)(v391 + 272), v578)
          && ((v377 & 0x80000000) != 0
            ? (v397 = (uint64_t *)(*(_QWORD *)(v391 + 24) + 16 * (v377 & 0x7FFFFFFF) + 8))
            : (v397 = (uint64_t *)(*(_QWORD *)(v391 + 272) + 8 * v377)),
              (v398 = *v397) != 0))
        {
          while ((*(_BYTE *)(v398 + 3) & 1) != 0)
          {
            v398 = *(_QWORD *)(v398 + 24);
            if (!v398)
              goto LABEL_802;
          }
          while (1)
          {
            v398 = *(_QWORD *)(v398 + 24);
            if (!v398)
              break;
            if ((*(_BYTE *)(v398 + 3) & 1) == 0)
              goto LABEL_802;
          }
          v424 = *(_DWORD *)v578;
          v534 = *((_DWORD *)v578 + 1);
          v599 = 513;
          LODWORD(v600) = 0;
          *(_DWORD *)v587 = v424;
          *(_DWORD *)&v587[16] = 0;
          (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 126, &v599, 1, v587, 1, 0);
          v599 = 513;
          LODWORD(v600) = 0;
          if (v393)
          {
            v426 = *(_DWORD *)(*(_QWORD *)(v425 + 32) + 4);
            *(_DWORD *)&v587[16] = 0;
            v427 = v541;
          }
          else
          {
            *(_DWORD *)&v587[16] = 0;
            v426 = v541;
            v427 = *(_DWORD *)(*(_QWORD *)(v425 + 32) + 4);
          }
          *(_DWORD *)v587 = v426;
          *(_DWORD *)&v587[24] = v427;
          LODWORD(v589) = 0;
          (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v599, 1, v587, 2, v536 | 0x100000000);
          v543 = v494;
          GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(v391, 257, "", 0);
          v496 = llvm::MachineRegisterInfo::createGenericVirtualRegister(v391, 257, "", 0);
          v599 = __PAIR64__(v496, GenericVirtualRegister);
          *(_DWORD *)v587 = *(_DWORD *)(*(_QWORD *)(v543 + 32) + 4);
          *(_DWORD *)&v587[16] = 0;
          sub_1C5547540((uint64_t)a4, (char *)&v599, 2, (uint64_t)v587);
          v599 = 257;
          LODWORD(v600) = 0;
          *(_DWORD *)v587 = v496;
          *(_DWORD *)&v587[16] = 0;
          *(_DWORD *)&v587[24] = v534;
          LODWORD(v589) = 0;
          (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v599, 1, v587, 2, v536 | 0x100000000);
          LODWORD(v599) = v538;
          LODWORD(v600) = 1;
          *(_DWORD *)v587 = GenericVirtualRegister;
          *(_DWORD *)&v587[16] = 0;
          *(_DWORD *)&v587[24] = *(_DWORD *)(*(_QWORD *)(v497 + 32) + 4);
          LODWORD(v589) = 0;
          (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 76, &v599, 1, v587, 2, 0);
          v498 = a2;
          if ((*(_BYTE *)a2 & 4) == 0)
          {
            v498 = a2;
            if ((*(_WORD *)(a2 + 44) & 8) != 0)
            {
              v498 = a2;
              do
                v498 = *(_QWORD *)(v498 + 8);
              while ((*(_WORD *)(v498 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v498 + 8));
          v399 = 1;
        }
        else
        {
LABEL_802:
          v399 = 0;
        }
        v374 = v553;
        if (v578 != &v580)
          free(v578);
        if ((v399 & 1) != 0)
          goto LABEL_1033;
LABEL_806:
        v400 = __nc;
        v401 = __nc == 47 || __nc == 308;
        v402 = v401;
        v403 = v567;
        if (!v401 && v374 != 47 && v374 != 308)
          goto LABEL_851;
        if (v402)
          v404 = v547;
        else
          v404 = v550;
        v405 = sub_1C4A51CB4(v404, v567);
        v406 = v405;
        v407 = HIDWORD(v405);
        if ((_BYTE)v405)
          v408 = HIDWORD(v405) == 1;
        else
          v408 = 0;
        if (!v408 || v547 != v550)
          goto LABEL_846;
        v539 = v405;
        v544 = **(unsigned __int16 **)(v556 + 16);
        v410 = 96;
        if (v544 == 47)
          v410 = 64;
        v411 = *(unsigned int *)(*(_QWORD *)(v556 + 32) + v410 + 4);
        *(_QWORD *)v587 = &off_1E816EFF0;
        *(_QWORD *)&v587[8] = sub_1C554C7E0;
        *(_QWORD *)&v587[24] = v587;
        v578 = &off_1E816F038;
        v579 = (uint64_t)sub_1C554C7F8;
        v581 = &v578;
        sub_1C554C3AC(v411, v567, (uint64_t)v587, (uint64_t)&v578, 0, 0, &v599);
        v412 = v581;
        if (v581 == &v578)
        {
          v413 = (void (**)(void **))((char *)v578 + 32);
          v412 = &v578;
LABEL_830:
          (*v413)(v412);
          goto LABEL_831;
        }
        if (v581)
        {
          v413 = (void (**)(void **))((char *)*v581 + 40);
          goto LABEL_830;
        }
LABEL_831:
        v414 = *(_BYTE **)&v587[24];
        if (*(_BYTE **)&v587[24] == v587)
        {
          v415 = (void (**)(_BYTE *))(*(_QWORD *)v587 + 32);
          v414 = v587;
LABEL_833:
          (*v415)(v414);
          goto LABEL_834;
        }
        if (*(_QWORD *)&v587[24])
        {
          v415 = (void (**)(_BYTE *))(**(_QWORD **)&v587[24] + 40);
          goto LABEL_833;
        }
LABEL_834:
        if (v602)
        {
          v416 = v600;
          v554 = v600;
          v542 = v411;
          if (v600 >= 0x41)
          {
            v521 = (((unint64_t)v600 + 63) >> 3) & 0x3FFFFFF8;
            v522 = (void *)operator new[]();
            v523 = v599;
            __nd = (size_t)v522;
            memcpy(v522, (const void *)v599, v521);
            if (v523)
              MEMORY[0x1CAA32F9C](v523, 0x1000C8000313F17);
            v418 = v556;
            v417 = *(_QWORD *)__nd;
            v416 = v554;
            LODWORD(v411) = v542;
            v403 = v567;
          }
          else
          {
            __nd = v599;
            v417 = (uint64_t)(v599 << -(char)v600) >> -(char)v600;
            v418 = v556;
          }
          if (v544 == 47)
          {
            v419 = 2 * v417;
            v420 = v411;
            v421 = *(_DWORD *)(*(_QWORD *)(v418 + 32) + 36);
            if (v420 < 0 && (v422 = v542 & 0x7FFFFFFF, v422 < *(unsigned int *)(v403 + 432)))
              v423 = *(_QWORD *)(*(_QWORD *)(v403 + 424) + 8 * v422);
            else
              v423 = 0;
            v599 = v423;
            LODWORD(v600) = 0;
            v441 = sub_1C5544694((uint64_t)a4, &v599, v419);
            LODWORD(v578) = v96;
            LODWORD(v579) = 1;
            *(_DWORD *)v587 = v421;
            *(_DWORD *)&v587[16] = 0;
            *(_QWORD *)&v587[24] = v441;
            v588 = v442;
            LODWORD(v589) = 1;
            (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 47, &v578, 1, v587, 2, 0);
LABEL_974:
            v511 = a2;
            if ((*(_BYTE *)a2 & 4) == 0)
            {
              v511 = a2;
              if ((*(_WORD *)(a2 + 44) & 8) != 0)
              {
                v511 = a2;
                do
                  v511 = *(_QWORD *)(v511 + 8);
                while ((*(_WORD *)(v511 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v511 + 8));
            v512 = v418;
            if ((*(_BYTE *)v418 & 4) == 0)
            {
              v512 = v418;
              if ((*(_WORD *)(v418 + 44) & 8) != 0)
              {
                v512 = v418;
                do
                  v512 = *(_QWORD *)(v512 + 8);
                while ((*(_WORD *)(v512 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v418 + 24) + 40, v418, *(_QWORD *)(v512 + 8));
            if (sub_1C4778650(v403, v542))
            {
              if ((v542 & 0x80000000) != 0)
                v513 = (uint64_t *)(*(_QWORD *)(v403 + 24) + 16 * (v542 & 0x7FFFFFFF) + 8);
              else
                v513 = (uint64_t *)(*(_QWORD *)(v403 + 272) + 8 * v542);
              v514 = *v513;
              if (v514)
              {
                if ((*(_BYTE *)(v514 + 3) & 1) != 0
                  || (v514 = *(_QWORD *)(v514 + 24)) != 0 && (*(_BYTE *)(v514 + 3) & 1) != 0)
                {
                  v515 = *(_QWORD *)(v514 + 8);
                }
                else
                {
                  v515 = 0;
                }
                v416 = v554;
              }
              else
              {
                v515 = 0;
              }
              v516 = v515;
              if ((*(_BYTE *)v515 & 4) == 0)
              {
                v516 = v515;
                if ((*(_WORD *)(v515 + 44) & 8) != 0)
                {
                  v516 = v515;
                  do
                    v516 = *(_QWORD *)(v516 + 8);
                  while ((*(_WORD *)(v516 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(v515 + 24) + 40, v515, *(_QWORD *)(v516 + 8));
            }
            v504 = 1;
            goto LABEL_988;
          }
          if ((v411 & 0x80000000) != 0
            && (v411 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v403 + 432))
          {
            v440 = *(_QWORD *)(*(_QWORD *)(v403 + 424) + 8 * (v411 & 0x7FFFFFFF));
          }
          else
          {
            v440 = 0;
          }
          *(_QWORD *)v587 = v440;
          v444 = sub_1C4825F50((unint64_t *)v587);
          v445 = *(unsigned __int8 *)(*(_QWORD *)(v556 + 32) + 144);
          v446 = v443;
          if (v443 == 1)
          if (v554 > 0x40)
            v447 = *(_QWORD *)__nd;
          else
            v447 = (uint64_t)(__nd << -(char)v554) >> -(char)v554;
          LODWORD(v579) = v444;
          if (v444 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v578, v447, 0);
            v487 = v579;
          }
          else
          {
            if (v444)
              v486 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v444;
            else
              v486 = 0;
            v578 = (void *)(v486 & v447);
            v487 = v444;
          }
          if (v445 == 2)
          {
            v488 = v578;
            if (v487 > 0x40)
              v489 = *(_QWORD *)v578;
            else
              v489 = (uint64_t)((_QWORD)v578 << -(char)v487) >> -(char)v487;
            v492 = 2 * v489;
          }
          else
          {
            v488 = v578;
            v490 = (uint64_t *)&v578;
            if (v487 >= 0x41)
              v490 = (uint64_t *)v578;
            v491 = *v490;
            v492 = 2 * v491;
            if (v445 == 1)
            {
              v503 = 2 * v491;
              v551 = v487;
              v548 = v578;
              if (v446 == 1)
              if ((v444 & 0xFFFFFFC0) != 0)
              {
                v403 = v567;
                v488 = v548;
                v487 = v551;
                v492 = v503;
              }
              else
              {
                v492 = v503;
                v403 = v567;
                v488 = v548;
                v487 = v551;
                if (0xFFFFFFFFFFFFFFFFLL >> -(char)v444 < v503)
                {
LABEL_961:
                  if (v487 >= 0x41 && v488)
                    MEMORY[0x1CAA32F9C](v488, 0x1000C8000313F17);
                  v504 = 0;
                  v416 = v554;
LABEL_988:
                  if (v416 >= 0x41 && __nd)
                    MEMORY[0x1CAA32F9C](__nd, 0x1000C8000313F17);
                  if ((v504 & 1) != 0)
                    goto LABEL_1033;
                  goto LABEL_992;
                }
              }
LABEL_966:
              LODWORD(v599) = v96;
              LODWORD(v600) = 1;
              v418 = v556;
              v505 = *(_QWORD *)(v556 + 32);
              *(_DWORD *)v587 = *(_DWORD *)(v505 + 36);
              *(_DWORD *)&v587[16] = 0;
              *(_QWORD *)&v587[24] = *(_QWORD *)(v505 + 80);
              LODWORD(v589) = 3;
              if ((v542 & 0x80000000) != 0)
              {
                v506 = v487;
                v507 = v488;
                v508 = v542 & 0x7FFFFFFF;
                if (v508 < *(unsigned int *)(v403 + 432))
                {
                  v509 = *(_QWORD *)(*(_QWORD *)(v403 + 424) + 8 * v508);
LABEL_971:
                  v416 = v554;
                  v574 = v509;
                  v575 = 0;
                  v590 = sub_1C5544694((uint64_t)a4, &v574, v492);
                  v591 = v510;
                  LODWORD(v592) = 1;
                  *((_QWORD *)&v592 + 1) = *(_QWORD *)(*(_QWORD *)(v556 + 32) + 144);
                  LODWORD(v594) = 3;
                  (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 308, &v599, 1, v587, 4, 0);
                  if (v506 >= 0x41 && v507)
                    MEMORY[0x1CAA32F9C](v507, 0x1000C8000313F17);
                  goto LABEL_974;
                }
              }
              else
              {
                v506 = v487;
                v507 = v488;
              }
              v509 = 0;
              goto LABEL_971;
            }
            if (v445)
              goto LABEL_966;
          }
          if (v446 == 1)
          {
            v549 = v488;
            v526 = v487;
            v527 = v492;
            v492 = v527;
            v487 = v526;
            v488 = v549;
          }
          if ((v444 & 0xFFFFFFC0) == 0)
          {
            v502 = -1 << (v444 - 1);
            if (v502 > v492 || v492 > ~v502)
              goto LABEL_961;
          }
          goto LABEL_966;
        }
        v406 = v539;
LABEL_846:
        if (v406)
          v428 = (_DWORD)v407 == 0;
        else
          v428 = 1;
        v400 = __nc;
        if (!v428)
          goto LABEL_992;
LABEL_851:
        if (v400 == 124 || v400 == 127 || v374 == 127 || v374 == 124)
        {
LABEL_992:
          v517 = *((_OWORD *)a1 + 2);
          LOWORD(v599) = *(_WORD *)(a2 + 44);
          v518 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
          LODWORD(v578) = v518;
          if ((v518 & 0x80000000) == 0)
            goto LABEL_1063;
          v519 = v518 & 0x7FFFFFFF;
          if (v519 >= *(_DWORD *)(v517 + 432))
            goto LABEL_1063;
          v520 = *(_QWORD *)(*(_QWORD *)(v517 + 424) + 8 * v519);
          if (v520 != 257 && v520 != 129)
            goto LABEL_1063;
          *(_OWORD *)&v587[8] = v517;
          *(_QWORD *)v587 = a2;
          *(_QWORD *)&v587[24] = a4;
          v588 = (uint64_t)&v578;
          v589 = &v599;
          v107 = 1;
          if ((sub_1C4A5BF28((uint64_t *)v587, 1u) & 1) == 0)
            v107 = sub_1C4A5BF28((uint64_t *)v587, 2u);
          goto LABEL_1064;
        }
        v429 = v374;
        *(_QWORD *)v587 = 257;
        *(_DWORD *)&v587[8] = 0;
        sub_1C5544694((uint64_t)a4, (unint64_t *)v587, 0);
        v531 = v430;
        *(_QWORD *)v587 = 129;
        *(_DWORD *)&v587[8] = 0;
        v431 = sub_1C5544694((uint64_t)a4, (unint64_t *)v587, 0);
        v537 = v432;
        v540 = v431;
        *(_QWORD *)v587 = 129;
        *(_DWORD *)&v587[8] = 0;
        v433 = sub_1C5544694((uint64_t)a4, (unint64_t *)v587, 1);
        v532 = v434;
        v535 = v433;
        v578 = &v580;
        v579 = 0x200000000;
        sub_1C4893E04((char *)&v578, 2uLL, 0);
        v599 = (unint64_t)&v601;
        v600 = 0x200000000;
        sub_1C4893E04((char *)&v599, 2uLL, 0);
        v435 = sub_1C4A51E28(v556, *(_QWORD *)(v567 + 24), *(_QWORD *)(v567 + 272), v578);
        v436 = sub_1C4A51E28(v546, *(_QWORD *)(v567 + 24), *(_QWORD *)(v567 + 272), (_DWORD *)v599);
        if (v435)
        {
          v437 = (int *)((char *)v578 + 4);
          v438 = *(_DWORD *)v578;
          goto LABEL_879;
        }
        if (__nc == 76)
        {
          if (*(_DWORD *)(v556 + 40) == 3)
          {
            v448 = *(_QWORD *)(v556 + 32);
            v438 = *(_DWORD *)(v448 + 36);
            v437 = (int *)(v448 + 68);
            goto LABEL_879;
          }
        }
        else if (__nc == 126)
        {
          v438 = *(_DWORD *)(*(_QWORD *)(v556 + 32) + 36);
          if ((v438 & 0x80000000) == 0
            || (v438 & 0x7FFFFFFFu) >= *(_DWORD *)(v567 + 432)
            || *(_QWORD *)(*(_QWORD *)(v567 + 424) + 8 * (v438 & 0x7FFFFFFF)) != 257)
          {
            v574 = 257;
            v575 = 0;
            *(_DWORD *)v587 = v438;
            *(_DWORD *)&v587[16] = 0;
            (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 126, &v574, 1, v587, 1, 0);
            v438 = *(_DWORD *)(*(_QWORD *)(v439 + 32) + 4);
          }
          v437 = (int *)(*(_QWORD *)(v531 + 32) + 4);
          goto LABEL_879;
        }
        LODWORD(v574) = v547;
        v576 = 0;
        *(_QWORD *)v587 = &v587[16];
        *(_QWORD *)&v587[16] = 257;
        *(_DWORD *)&v587[24] = 0;
        v588 = 257;
        LODWORD(v589) = 0;
        *(_QWORD *)&v587[8] = 0x800000002;
        (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 74, &v587[16], 2, &v574, 1, 0);
        v450 = v449;
        if (*(_BYTE **)v587 != &v587[16])
          free(*(void **)v587);
        v451 = *(_QWORD *)(v450 + 32);
        v438 = *(_DWORD *)(v451 + 4);
        v437 = (int *)(v451 + 36);
LABEL_879:
        __ne = *v437;
        if (v436)
        {
          v452 = *(_DWORD *)v599;
          v453 = *(_DWORD *)(v599 + 4);
        }
        else
        {
          if (v429 == 126)
          {
            v452 = *(_DWORD *)(*(_QWORD *)(v546 + 32) + 36);
            if ((v452 & 0x80000000) == 0
              || (v452 & 0x7FFFFFFFu) >= *(_DWORD *)(v567 + 432)
              || *(_QWORD *)(*(_QWORD *)(v567 + 424) + 8 * (v452 & 0x7FFFFFFF)) != 257)
            {
              v574 = 257;
              v575 = 0;
              *(_DWORD *)v587 = v452;
              *(_DWORD *)&v587[16] = 0;
              (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 126, &v574, 1, v587, 1, 0);
              v452 = *(_DWORD *)(*(_QWORD *)(v454 + 32) + 4);
            }
            v455 = *(_QWORD *)(v531 + 32);
          }
          else
          {
            v456 = sub_1C554C050(v550, v567);
            if (!v457)
            {
              if (v429 == 76 && *(_DWORD *)(v546 + 40) == 3)
              {
                v493 = *(_QWORD *)(v546 + 32);
                v452 = *(_DWORD *)(v493 + 36);
                v453 = *(_DWORD *)(v493 + 68);
              }
              else
              {
                LODWORD(v574) = v550;
                v576 = 0;
                *(_QWORD *)v587 = &v587[16];
                *(_QWORD *)&v587[16] = 257;
                *(_DWORD *)&v587[24] = 0;
                v588 = 257;
                LODWORD(v589) = 0;
                *(_QWORD *)&v587[8] = 0x800000002;
                (*(void (**)(uint64_t *, uint64_t, _BYTE *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a4 + 32))(a4, 74, &v587[16], 2, &v574, 1, 0);
                v500 = v499;
                if (*(_BYTE **)v587 != &v587[16])
                  free(*(void **)v587);
                v501 = *(_QWORD *)(v500 + 32);
                v452 = *(_DWORD *)(v501 + 4);
                v453 = *(_DWORD *)(v501 + 36);
              }
              goto LABEL_890;
            }
            v458 = v456;
            *(_QWORD *)v587 = 257;
            *(_DWORD *)&v587[8] = 0;
            sub_1C5544694((uint64_t)a4, (unint64_t *)v587, v456);
            v452 = *(_DWORD *)(*(_QWORD *)(v459 + 32) + 4);
            *(_QWORD *)v587 = 257;
            *(_DWORD *)&v587[8] = 0;
            sub_1C5544694((uint64_t)a4, (unint64_t *)v587, HIDWORD(v458));
            v455 = *(_QWORD *)(v460 + 32);
          }
          v453 = *(_DWORD *)(v455 + 4);
        }
LABEL_890:
        v461 = sub_1C554C050(v438, v567);
        if (!v462 || v461)
        {
          v464 = sub_1C554C050(v452, v567);
          if (!v465 || (v463 = v438, v464))
          {
            if (v438 < 0 && (v438 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v567 + 432))
              v466 = *(_QWORD *)(*(_QWORD *)(v567 + 424) + 8 * (v438 & 0x7FFFFFFF));
            else
              v466 = 0;
            v574 = v466;
            v575 = 0;
            *(_DWORD *)v587 = v438;
            *(_DWORD *)&v587[16] = 0;
            *(_DWORD *)&v587[24] = v452;
            LODWORD(v589) = 0;
            (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v574, 1, v587, 2, v545 | 0x100000000);
            v463 = *(_DWORD *)(*(_QWORD *)(v467 + 32) + 4);
          }
        }
        else
        {
          v463 = v452;
        }
        v574 = 129;
        v575 = 0;
        *(_DWORD *)v587 = 36;
        *(_DWORD *)&v587[16] = 2;
        *(_DWORD *)&v587[24] = v463;
        LODWORD(v589) = 0;
        LODWORD(v590) = v438;
        LODWORD(v592) = 0;
        *((_QWORD *)&v592 + 1) = v535;
        v593 = v532;
        LODWORD(v594) = 1;
        *((_QWORD *)&v594 + 1) = v540;
        *(_QWORD *)&v595 = v537;
        DWORD2(v595) = 1;
        v468 = (*(uint64_t (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 51, &v574, 1, v587, 5, 0);
        v574 = 257;
        v575 = 0;
        *(_QWORD *)v587 = v468;
        *(_QWORD *)&v587[8] = v469;
        *(_DWORD *)&v587[16] = 1;
        (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 126, &v574, 1, v587, 1, 0);
        v471 = v470;
        v472 = sub_1C554C050(__ne, v567);
        if (!v473 || v472)
        {
          v474 = sub_1C554C050(v453, v567);
          if (!v475 || v474)
          {
            if (__ne < 0 && (__ne & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v567 + 432))
              v476 = *(_QWORD *)(*(_QWORD *)(v567 + 424) + 8 * (__ne & 0x7FFFFFFF));
            else
              v476 = 0;
            v574 = v476;
            v575 = 0;
            *(_DWORD *)v587 = __ne;
            *(_DWORD *)&v587[16] = 0;
            *(_DWORD *)&v587[24] = v453;
            LODWORD(v589) = 0;
            (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v574, 1, v587, 2, v545 | 0x100000000);
            v453 = *(_DWORD *)(*(_QWORD *)(v477 + 32) + 4);
          }
          else
          {
            v453 = __ne;
          }
        }
        v478 = *(_DWORD *)(*(_QWORD *)(v471 + 32) + 4);
        v479 = sub_1C554C050(v478, v567);
        if (!v480 || v479)
        {
          v481 = sub_1C554C050(v453, v567);
          if (!v482 || v481)
          {
            if (v478 < 0 && (v478 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v567 + 432))
              v483 = *(_QWORD *)(*(_QWORD *)(v567 + 424) + 8 * (v478 & 0x7FFFFFFF));
            else
              v483 = 0;
            v574 = v483;
            v575 = 0;
            *(_DWORD *)v587 = v478;
            *(_DWORD *)&v587[16] = 0;
            *(_DWORD *)&v587[24] = v453;
            LODWORD(v589) = 0;
            (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, uint64_t))(*a4 + 32))(a4, 45, &v574, 1, v587, 2, v545 | 0x100000000);
            v453 = *(_DWORD *)(*(_QWORD *)(v484 + 32) + 4);
          }
          else
          {
            v453 = v478;
          }
        }
        LODWORD(v574) = v96;
        v575 = 1;
        *(_DWORD *)v587 = v463;
        *(_DWORD *)&v587[16] = 0;
        *(_DWORD *)&v587[24] = v453;
        LODWORD(v589) = 0;
        (*(void (**)(uint64_t *, uint64_t, unint64_t *, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, 76, &v574, 1, v587, 2, 0);
        v485 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v485 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v485 = a2;
            do
              v485 = *(_QWORD *)(v485 + 8);
            while ((*(_WORD *)(v485 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v485 + 8));
        if ((int *)v599 != &v601)
          free((void *)v599);
        if (v578 != &v580)
          free(v578);
        goto LABEL_1033;
    }
  }
  if (**(unsigned __int16 **)(a2 + 16) <= 0xB1u)
  {
    if (v8 == 163 || v8 == 165)
    {
      if ((sub_1C4A59120(a1[4], a2, (uint64_t)a3) & 1) != 0)
        goto LABEL_1033;
      goto LABEL_1063;
    }
    if (v8 != 166)
      goto LABEL_1063;
    if ((sub_1C4A59120(a1[4], a2, (uint64_t)a3) & 1) != 0)
      goto LABEL_1033;
    v12 = a1[4];
    v13 = *(unsigned int **)(a2 + 32);
    v14 = v13[9];
    if ((v14 & 0x80000000) != 0)
      v15 = (uint64_t *)(*(_QWORD *)(v12 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
    else
      v15 = (uint64_t *)(*(_QWORD *)(v12 + 272) + 8 * v14);
    v41 = v13[17];
    v158 = v13[25];
    v159 = *v15;
    if (v159)
    {
      if ((*(_BYTE *)(v159 + 3) & 1) != 0 || (v159 = *(_QWORD *)(v159 + 24)) != 0 && (*(_BYTE *)(v159 + 3) & 1) != 0)
      {
        v365 = *(_QWORD *)(v159 + 8);
        if (v365)
        {
          if (**(_WORD **)(v365 + 16) == 313
            && *(_DWORD *)(v365 + 40) == 2
            && *(_BYTE *)(*(_QWORD *)(v365 + 32) + 32) == 1)
          {
LABEL_183:
            if ((v41 & 0x80000000) != 0)
              v164 = (uint64_t *)(*(_QWORD *)(v12 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
            else
              v164 = (uint64_t *)(*(_QWORD *)(v12 + 272) + 8 * v41);
            v177 = *v164;
            if (v177)
            {
              if ((*(_BYTE *)(v177 + 3) & 1) != 0
                || (v177 = *(_QWORD *)(v177 + 24)) != 0 && (*(_BYTE *)(v177 + 3) & 1) != 0)
              {
                v366 = *(_QWORD *)(v177 + 8);
                if (v366)
                {
                  if (**(_WORD **)(v366 + 16) == 313
                    && *(_DWORD *)(v366 + 40) == 2
                    && *(_BYTE *)(*(_QWORD *)(v366 + 32) + 32) == 1)
                  {
                    goto LABEL_1063;
                  }
                }
              }
            }
            *(_QWORD *)v587 = &off_1E816EFF0;
            *(_QWORD *)&v587[8] = sub_1C554C7E0;
            *(_QWORD *)&v587[24] = v587;
            v578 = &off_1E816F038;
            v579 = (uint64_t)sub_1C554C7F8;
            v581 = &v578;
            sub_1C554C3AC(v41, v12, (uint64_t)v587, (uint64_t)&v578, 0, 0, &v599);
            v178 = v581;
            if (v581 == &v578)
            {
              v179 = (void (**)(void **))((char *)v578 + 32);
              v178 = &v578;
            }
            else
            {
              if (!v581)
              {
LABEL_211:
                v180 = *(_BYTE **)&v587[24];
                if (*(_BYTE **)&v587[24] == v587)
                {
                  v181 = (void (**)(_BYTE *))(*(_QWORD *)v587 + 32);
                  v180 = v587;
                }
                else
                {
                  if (!*(_QWORD *)&v587[24])
                  {
LABEL_214:
                    if (v602)
                      goto LABEL_249;
                    if ((v158 & 0x80000000) != 0)
                      v182 = (uint64_t *)(*(_QWORD *)(v12 + 24) + 16 * (v158 & 0x7FFFFFFF) + 8);
                    else
                      v182 = (uint64_t *)(*(_QWORD *)(v12 + 272) + 8 * v158);
                    v189 = *v182;
                    if (v189)
                    {
                      if ((*(_BYTE *)(v189 + 3) & 1) != 0
                        || (v189 = *(_QWORD *)(v189 + 24)) != 0 && (*(_BYTE *)(v189 + 3) & 1) != 0)
                      {
                        v371 = *(_QWORD *)(v189 + 8);
                        if (v371)
                        {
                          if (**(_WORD **)(v371 + 16) == 313
                            && *(_DWORD *)(v371 + 40) == 2
                            && *(_BYTE *)(*(_QWORD *)(v371 + 32) + 32) == 1)
                          {
                            goto LABEL_1063;
                          }
                        }
                      }
                    }
                    *(_QWORD *)v587 = &off_1E816EFF0;
                    *(_QWORD *)&v587[8] = sub_1C554C7E0;
                    *(_QWORD *)&v587[24] = v587;
                    v578 = &off_1E816F038;
                    v579 = (uint64_t)sub_1C554C7F8;
                    v581 = &v578;
                    sub_1C554C3AC(v158, v12, (uint64_t)v587, (uint64_t)&v578, 0, 0, &v599);
                    v190 = v581;
                    if (v581 == &v578)
                    {
                      v191 = (void (**)(void **))((char *)v578 + 32);
                      v190 = &v578;
                    }
                    else
                    {
                      if (!v581)
                      {
LABEL_245:
                        v192 = *(_BYTE **)&v587[24];
                        if (*(_BYTE **)&v587[24] == v587)
                        {
                          v193 = (void (**)(_BYTE *))(*(_QWORD *)v587 + 32);
                          v192 = v587;
                        }
                        else
                        {
                          if (!*(_QWORD *)&v587[24])
                          {
LABEL_248:
                            if (!v602)
                            {
                              if ((v41 & 0x80000000) != 0)
                                v197 = (uint64_t *)(*(_QWORD *)(v12 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
                              else
                                v197 = (uint64_t *)(*(_QWORD *)(v12 + 272) + 8 * v41);
                              v224 = *v197;
                              if (v224)
                              {
                                if ((*(_BYTE *)(v224 + 3) & 1) != 0
                                  || (v224 = *(_QWORD *)(v224 + 24)) != 0 && (*(_BYTE *)(v224 + 3) & 1) != 0)
                                {
                                  v372 = *(_QWORD *)(v224 + 8);
                                  if (v372)
                                  {
                                    if (**(_WORD **)(v372 + 16) == 177 && *(_DWORD *)(v372 + 40) == 2)
                                      goto LABEL_1063;
                                  }
                                }
                              }
                              v225 = (uint64_t)(v13 + 8);
                              v226 = v13 + 16;
                              (*(void (**)(_QWORD *, uint64_t))(*a3 + 32))(a3, a2);
LABEL_1031:
                              llvm::MachineOperand::setReg(v225, v41);
                              v156 = (uint64_t)v226;
                              v157 = v14;
LABEL_1032:
                              llvm::MachineOperand::setReg(v156, v157);
                              (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, a2);
                              goto LABEL_1033;
                            }
LABEL_249:
                            if (v600 > 0x40)
                            {
                              v194 = (((unint64_t)v600 + 63) >> 3) & 0x3FFFFFF8;
                              v195 = (void *)operator new[]();
                              v196 = v599;
                              memcpy(v195, (const void *)v599, v194);
                              if (v196)
                                MEMORY[0x1CAA32F9C](v196, 0x1000C8000313F17);
                              MEMORY[0x1CAA32F9C](v195, 0x1000C8000313F17);
                            }
                            goto LABEL_1063;
                          }
                          v193 = (void (**)(_BYTE *))(**(_QWORD **)&v587[24] + 40);
                        }
                        (*v193)(v192);
                        goto LABEL_248;
                      }
                      v191 = (void (**)(void **))((char *)*v581 + 40);
                    }
                    (*v191)(v190);
                    goto LABEL_245;
                  }
                  v181 = (void (**)(_BYTE *))(**(_QWORD **)&v587[24] + 40);
                }
                (*v181)(v180);
                goto LABEL_214;
              }
              v179 = (void (**)(void **))((char *)*v581 + 40);
            }
            (*v179)(v178);
            goto LABEL_211;
          }
        }
      }
    }
    *(_QWORD *)v587 = &off_1E816EFF0;
    *(_QWORD *)&v587[8] = sub_1C554C7E0;
    *(_QWORD *)&v587[24] = v587;
    v578 = &off_1E816F038;
    v579 = (uint64_t)sub_1C554C7F8;
    v581 = &v578;
    sub_1C554C3AC(v14, v12, (uint64_t)v587, (uint64_t)&v578, 0, 0, &v599);
    v160 = v581;
    if (v581 == &v578)
    {
      v161 = (void (**)(void **))((char *)v578 + 32);
      v160 = &v578;
    }
    else
    {
      if (!v581)
      {
LABEL_178:
        v162 = *(_BYTE **)&v587[24];
        if (*(_BYTE **)&v587[24] == v587)
        {
          v163 = (void (**)(_BYTE *))(*(_QWORD *)v587 + 32);
          v162 = v587;
        }
        else
        {
          if (!*(_QWORD *)&v587[24])
            goto LABEL_181;
          v163 = (void (**)(_BYTE *))(**(_QWORD **)&v587[24] + 40);
        }
        (*v163)(v162);
LABEL_181:
        if (!v602)
          goto LABEL_1063;
        if (v600 > 0x40)
        {
          __nf = (((unint64_t)v600 + 63) >> 3) & 0x3FFFFFF8;
          v363 = (void *)operator new[]();
          v364 = v599;
          v570 = v363;
          memcpy(v363, (const void *)v599, __nf);
          if (v364)
            MEMORY[0x1CAA32F9C](v364, 0x1000C8000313F17);
          MEMORY[0x1CAA32F9C](v570, 0x1000C8000313F17);
        }
        goto LABEL_183;
      }
      v161 = (void (**)(void **))((char *)*v581 + 40);
    }
    (*v161)(v160);
    goto LABEL_178;
  }
  if (v8 != 178)
  {
    if (v8 == 308)
    {
      a4[5] = *(_QWORD *)(a2 + 24);
      a4[6] = a2;
      v90 = *(_QWORD *)(a2 + 32);
      v91 = *(_DWORD *)(v90 + 4);
      if (v91 < 0 && (v92 = a4[3], v93 = v91 & 0x7FFFFFFF, v93 < *(_DWORD *)(v92 + 432)))
        v94 = *(void **)(*(_QWORD *)(v92 + 424) + 8 * v93);
      else
        v94 = 0;
      v101 = *(unsigned __int8 *)(v90 + 80);
      if (*(_BYTE *)(v90 + 80))
      {
        v102 = *(_DWORD *)(v90 + 36);
        if (v101 == 2)
          v103 = 124;
        else
          v103 = 126;
        v578 = v94;
        LODWORD(v579) = 0;
        *(_DWORD *)v587 = v102;
        *(_DWORD *)&v587[16] = 0;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, v103, &v578, 1, v587, 1, 0);
        v105 = v104;
        (*(void (**)(_QWORD *, uint64_t))(*a3 + 32))(a3, a2);
        llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 32, *(_DWORD *)(*(_QWORD *)(v105 + 32) + 4));
        *(_QWORD *)(*(_QWORD *)(a2 + 32) + 80) = 0;
        (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, a2);
        v90 = *(_QWORD *)(a2 + 32);
        v106 = *(unsigned __int8 *)(v90 + 144);
        if (!*(_BYTE *)(v90 + 144))
        {
          v107 = 1;
          goto LABEL_1064;
        }
      }
      else
      {
        v106 = *(unsigned __int8 *)(v90 + 144);
        if (!*(_BYTE *)(v90 + 144))
          goto LABEL_1063;
      }
      v127 = *(_DWORD *)(v90 + 100);
      if (v106 == 2)
        v128 = 124;
      else
        v128 = 126;
      v578 = v94;
      LODWORD(v579) = 0;
      *(_DWORD *)v587 = v127;
      *(_DWORD *)&v587[16] = 0;
      v107 = 1;
      (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, v128, &v578, 1, v587, 1, 0);
      v130 = v129;
      (*(void (**)(_QWORD *, uint64_t))(*a3 + 32))(a3, a2);
      llvm::MachineOperand::setReg(*(_QWORD *)(a2 + 32) + 96, *(_DWORD *)(*(_QWORD *)(v130 + 32) + 4));
      *(_QWORD *)(*(_QWORD *)(a2 + 32) + 144) = 0;
      (*(void (**)(_QWORD *, uint64_t))(*a3 + 40))(a3, a2);
      goto LABEL_1064;
    }
    if (v8 != 335)
      goto LABEL_1063;
    goto LABEL_35;
  }
  v84 = *(_QWORD *)(a2 + 24);
  v83 = *(_QWORD *)(a2 + 32);
  v85 = *(_QWORD *)(v84 + 32);
  v86 = *(unsigned int *)(v83 + 4);
  v87 = a1[4];
  v88 = *(unsigned int *)(v83 + 36);
  if ((v88 & 0x80000000) != 0)
    v89 = (uint64_t *)(*(_QWORD *)(v87 + 24) + 16 * (v88 & 0x7FFFFFFF) + 8);
  else
    v89 = (uint64_t *)(*(_QWORD *)(v87 + 272) + 8 * v88);
  v111 = v83 + 32;
  v112 = *v89;
  if (v112
    && ((*(_BYTE *)(v112 + 3) & 1) != 0 || (v112 = *(_QWORD *)(v112 + 24)) != 0 && (*(_BYTE *)(v112 + 3) & 1) != 0))
  {
    v113 = *(_QWORD *)(v112 + 8);
  }
  else
  {
    v113 = 0;
  }
  if ((**(_WORD **)(v113 + 16) & 0xFFFE) == 0x74 && (v114 = *(unsigned int *)(v113 + 40), (_DWORD)v114))
  {
    v115 = *(_QWORD *)(v113 + 32);
    v116 = (_DWORD *)(v115 + 16);
    while (*((_BYTE *)v116 - 16) != 17)
    {
      v116 += 8;
      if (!--v114)
        goto LABEL_204;
    }
    if (*v116 == 2131)
    {
      v175 = *(unsigned int *)(v115 + 68);
      if ((v175 & 0x80000000) != 0)
        v176 = (uint64_t *)(*(_QWORD *)(v87 + 24) + 16 * (v175 & 0x7FFFFFFF) + 8);
      else
        v176 = (uint64_t *)(*(_QWORD *)(v87 + 272) + 8 * v175);
      v214 = *v176;
      if (!*v176)
        goto LABEL_1063;
      if ((*(_BYTE *)(v214 + 3) & 1) == 0)
      {
        v214 = *(_QWORD *)(v214 + 24);
        if (!v214 || (*(_BYTE *)(v214 + 3) & 1) == 0)
          goto LABEL_1063;
      }
      v111 = v115 + 64;
      v113 = *(_QWORD *)(v214 + 8);
      v117 = 1;
      if (!v113)
        goto LABEL_1063;
    }
    else
    {
LABEL_204:
      v117 = 0;
      if (!v113)
        goto LABEL_1063;
    }
  }
  else
  {
    v117 = 0;
  }
  v118 = *(unsigned int *)(v111 + 4);
  if ((v118 & 0x80000000) != 0)
    v119 = (uint64_t *)(*(_QWORD *)(v87 + 24) + 16 * (v118 & 0x7FFFFFFF) + 8);
  else
    v119 = (uint64_t *)(*(_QWORD *)(v87 + 272) + 8 * v118);
  v131 = *v119;
  if (!v131)
    goto LABEL_1063;
  while ((*(_BYTE *)(v131 + 3) & 1) != 0)
  {
    v131 = *(_QWORD *)(v131 + 24);
    if (!v131)
      goto LABEL_1063;
  }
  while (1)
  {
    v131 = *(_QWORD *)(v131 + 24);
    if (!v131)
      break;
    v107 = 0;
    if ((*(_BYTE *)(v131 + 3) & 1) == 0)
      goto LABEL_1064;
  }
  v132 = (uint64_t *)((v86 & 0x80000000) != 0
                   ? *(_QWORD *)(v87 + 24) + 16 * (v86 & 0x7FFFFFFF) + 8
                   : *(_QWORD *)(v87 + 272) + 8 * v86);
  v186 = *v132;
  if (!v186)
    goto LABEL_1063;
  while ((*(_BYTE *)(v186 + 3) & 1) != 0)
  {
    v186 = *(_QWORD *)(v186 + 24);
    if (!v186)
      goto LABEL_1063;
  }
  while (1)
  {
    v186 = *(_QWORD *)(v186 + 24);
    if (!v186)
      break;
    v107 = 0;
    if ((*(_BYTE *)(v186 + 3) & 1) == 0)
      goto LABEL_1064;
  }
  if ((sub_1C4A58D20(v86, *(_QWORD *)(v87 + 24), *(_QWORD *)(v87 + 272)) & 1) != 0)
    goto LABEL_1063;
  v187 = *(unsigned __int16 *)(*(_QWORD *)(v85 + 8) + 1020);
  v188 = *(unsigned __int16 *)(v113 + 44);
  if (**(_WORD **)(v113 + 16) == 335)
  {
    if (((v187 | (v188 >> 4)) & 1) == 0)
      goto LABEL_1063;
  }
  else if ((v187 & 1) == 0 && (v188 & 0x7C0) != 0x7C0)
  {
    goto LABEL_1063;
  }
  a4[5] = v84;
  a4[6] = a2;
  v246 = **(unsigned __int16 **)(v113 + 16);
  if (v246 > 0x10F)
  {
    v276 = (v246 - 272) > 0x3D || ((1 << (v246 - 16)) & 0x20000040000000C1) == 0;
    if (v276 && (_DWORD)v246 != 357)
      goto LABEL_550;
    goto LABEL_463;
  }
  v247 = (v246 - 163);
  if (v247 <= 0x38)
  {
    if (((1 << (v246 + 93)) & 0x18800000000140DLL) != 0)
    {
LABEL_463:
      v277 = *(unsigned int *)(v113 + 40);
      if (v277 <= 1)
      {
        v296 = 0;
        *(_QWORD *)v587 = &v587[16];
        *(_QWORD *)&v587[8] = 0x400000000;
        v297 = &v587[16];
LABEL_524:
        v578 = (void *)257;
        LODWORD(v579) = 0;
        (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, _QWORD))(*a4 + 32))(a4, v246, &v578, 1, v297, v296, 0);
        v304 = v303;
        if (v117)
        {
          v305 = *(_DWORD *)(*((_QWORD *)v303 + 4) + 4);
          LODWORD(v599) = llvm::MachineRegisterInfo::createGenericVirtualRegister(a1[4], 257, "", 0);
          v306 = sub_1C5547D24(a4, 2131, (int *)&v599, 1, 0);
          v304 = v307;
          v579 = 0;
          v580 = 0;
          LODWORD(v578) = 0;
          HIDWORD(v578) = v305;
          v581 = 0;
          llvm::MachineInstr::addOperand(v307, v306, (const llvm::MachineOperand *)&v578);
        }
        *((_WORD *)v304 + 22) = *((_WORD *)v304 + 22) & 0xC | *(_WORD *)(v113 + 44) & 0xFFF3;
        sub_1C4923194((_QWORD *)a1[4], a2, *(_DWORD *)(*((_QWORD *)v304 + 4) + 4), a3);
        v107 = 1;
LABEL_528:
        if (*(_BYTE **)v587 != &v587[16])
          free(*(void **)v587);
        goto LABEL_1064;
      }
      v278 = *(_QWORD *)(v113 + 32);
      v279 = 1;
      while (1)
      {
        if (*(_BYTE *)(v278 + 32 * v279))
          goto LABEL_470;
        v280 = a1[4];
        v281 = *(unsigned int *)(v278 + 32 * v279 + 4);
        v282 = (uint64_t *)((v281 & 0x80000000) != 0
                         ? *(_QWORD *)(v280 + 24) + 16 * (v281 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(v280 + 272) + 8 * v281);
        v283 = *v282;
        if (!v283)
          goto LABEL_470;
        if ((*(_BYTE *)(v283 + 3) & 1) == 0)
        {
          v283 = *(_QWORD *)(v283 + 24);
          if (!v283 || (*(_BYTE *)(v283 + 3) & 1) == 0)
            goto LABEL_470;
        }
        v284 = *(_QWORD *)(v283 + 8);
        if (!v284)
          goto LABEL_470;
        if ((**(_WORD **)(v284 + 16) & 0xFFFE) != 0x74)
          goto LABEL_470;
        v285 = *(unsigned int *)(v284 + 40);
        if (!(_DWORD)v285)
          goto LABEL_470;
        v286 = *(_QWORD *)(v284 + 32);
        v287 = (_DWORD *)(v286 + 16);
        while (*((_BYTE *)v287 - 16) != 17)
        {
          v287 += 8;
          if (!--v285)
            goto LABEL_470;
        }
        if (*v287 != 2131)
          goto LABEL_470;
        v288 = *(unsigned int *)(v286 + 68);
        if ((v288 & 0x80000000) != 0)
          v289 = (uint64_t *)(*(_QWORD *)(v280 + 24) + 16 * (v288 & 0x7FFFFFFF) + 8);
        else
          v289 = (uint64_t *)(*(_QWORD *)(v280 + 272) + 8 * v288);
        v290 = *v289;
        if (v290)
        {
          if ((*(_BYTE *)(v290 + 3) & 1) != 0)
            goto LABEL_515;
          v290 = *(_QWORD *)(v290 + 24);
          if (v290)
          {
            if ((*(_BYTE *)(v290 + 3) & 1) != 0)
            {
LABEL_515:
              v290 = *(_QWORD *)(v290 + 8);
              goto LABEL_487;
            }
            v290 = 0;
          }
        }
LABEL_487:
        if ((v288 & 0x80000000) != 0)
          v291 = (uint64_t *)(*(_QWORD *)(v280 + 24) + 16 * (v288 & 0x7FFFFFFF) + 8);
        else
          v291 = (uint64_t *)(*(_QWORD *)(v280 + 272) + 8 * v288);
        v292 = *v291;
        if (!v292)
          goto LABEL_1063;
        while ((*(_BYTE *)(v292 + 3) & 1) != 0)
        {
          v292 = *(_QWORD *)(v292 + 24);
          if (!v292)
            goto LABEL_1063;
        }
        while (1)
        {
          v292 = *(_QWORD *)(v292 + 24);
          if (!v292)
            break;
          v107 = 0;
          if ((*(_BYTE *)(v292 + 3) & 1) == 0)
            goto LABEL_1064;
        }
        v107 = 0;
        v293 = **(unsigned __int16 **)(v290 + 16);
        if (v293 > 0x10F)
        {
          v295 = v293 - 272 > 0x3D || ((1 << (v293 - 16)) & 0x20000040000000C1) == 0;
          if (v295 && v293 != 357)
            goto LABEL_1064;
        }
        else
        {
          v294 = v293 - 163 > 0x38 || ((1 << (v293 + 93)) & 0x18800000000140DLL) == 0;
          if (v294 && v293 != 85)
            goto LABEL_1064;
        }
LABEL_470:
        if (++v279 == v277)
        {
          v298 = 0;
          *(_QWORD *)v587 = &v587[16];
          *(_QWORD *)&v587[8] = 0x400000000;
          v299 = 1;
          while (1)
          {
            v300 = *(_QWORD *)(v113 + 32) + v298;
            v302 = *(unsigned __int8 *)(v300 + 32);
            v301 = v300 + 32;
            if (v302)
            {
              sub_1C61442C8((uint64_t)v587, v301);
            }
            else
            {
              v578 = (void *)sub_1C4A59888(*(_DWORD *)(*(_QWORD *)(v113 + 32) + v298 + 36), 0, a4, a1[4], 1);
              if (!((unint64_t)v578 >> 32))
              {
                v107 = 0;
                goto LABEL_528;
              }
              sub_1C4923DB4((uint64_t)v587, &v578);
            }
            ++v299;
            v298 += 32;
            if (v299 >= *(unsigned int *)(v113 + 40))
            {
              v297 = *(_BYTE **)v587;
              v296 = *(unsigned int *)&v587[8];
              v246 = **(unsigned __int16 **)(v113 + 16);
              goto LABEL_524;
            }
          }
        }
      }
    }
    if (v247 == 20)
    {
      if ((v117 & 1) != 0)
        goto LABEL_1063;
LABEL_557:
      v578 = (void *)257;
      LODWORD(v579) = 0;
      *(_DWORD *)v587 = *(_DWORD *)(*(_QWORD *)(v113 + 32) + 36);
      *(_DWORD *)&v587[16] = 0;
      v107 = 1;
      (*(void (**)(uint64_t *))(*a4 + 32))(a4);
      sub_1C4923194((_QWORD *)a1[4], a2, *(_DWORD *)(*(_QWORD *)(v319 + 32) + 4), a3);
      goto LABEL_1064;
    }
  }
  if ((_DWORD)v246 == 85)
    goto LABEL_463;
LABEL_550:
  if ((_DWORD)v246 == 182)
    v318 = v117;
  else
    v318 = 1;
  if ((v318 & 1) == 0)
    goto LABEL_557;
  if ((_DWORD)v246 == 335)
  {
    if ((v117 & 1) != 0)
      goto LABEL_1063;
  }
  else
  {
    if ((_DWORD)v246 == 51)
      v344 = v117;
    else
      v344 = 1;
    if ((v344 & 1) != 0)
      goto LABEL_1063;
  }
  v345 = a1[4];
  v346 = *(_DWORD **)(v113 + 32);
  __nb = v346[12];
  LODWORD(v347) = v346[17];
  LODWORD(v569) = v346[25];
  v348 = v346[33];
  v349 = v346[41];
  if (sub_1C4A5C2C0(v345, v348, 0) && sub_1C4A5C2C0(v345, v349, 0))
  {
    v350 = sub_1C4A59888(v348, 1, a4, v345, 0);
    v351 = sub_1C4A59888(v349, 1, a4, v345, 0);
    v107 = 0;
    if (!HIDWORD(v350) || !HIDWORD(v351))
      goto LABEL_1064;
LABEL_602:
    v352 = **(unsigned __int16 **)(v113 + 16);
    v578 = (void *)257;
    LODWORD(v579) = 0;
    *(_DWORD *)v587 = __nb;
    *(_DWORD *)&v587[16] = 2;
    *(_DWORD *)&v587[24] = v347;
    LODWORD(v589) = 0;
    LODWORD(v590) = v569;
    LODWORD(v592) = 0;
    DWORD2(v592) = v350;
    LODWORD(v594) = 0;
    DWORD2(v594) = v351;
    DWORD2(v595) = 0;
    (*(void (**)(uint64_t *, uint64_t, void **, uint64_t, _BYTE *, uint64_t, uint64_t))(*a4 + 32))(a4, v352, &v578, 1, v587, 5, *(unsigned __int16 *)(v113 + 44) | 0x100000000);
    sub_1C4923194((_QWORD *)a1[4], a2, *(_DWORD *)(*(_QWORD *)(v353 + 32) + 4), a3);
    goto LABEL_1033;
  }
  if (v348 != (_DWORD)v347 && v348 != (_DWORD)v569
    || v349 != (_DWORD)v347 && v349 != (_DWORD)v569
    || !sub_1C4A5C2C0(v345, v348, 1)
    || !sub_1C4A5C2C0(v345, v349, 1))
  {
    goto LABEL_1063;
  }
  v347 = sub_1C4A59888(v347, 1, a4, v345, 1);
  v569 = sub_1C4A59888(v569, 1, a4, v345, 1);
  v350 = sub_1C4A59888(v348, 1, a4, v345, 0);
  v351 = sub_1C4A59888(v349, 1, a4, v345, 0);
  v107 = 0;
  if (HIDWORD(v347) && HIDWORD(v569) && HIDWORD(v350) && HIDWORD(v351))
    goto LABEL_602;
LABEL_1064:
  if (v584 != v586)
    free(v584);
  return v107;
}

uint64_t sub_1C4A58D20(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;

  v3 = (uint64_t *)(a2 + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v3 = (uint64_t *)(a3 + 8 * a1);
  v4 = *v3;
  if (!*v3)
    return 1;
  while ((*(_BYTE *)(v4 + 3) & 1) != 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      return 1;
  }
  v7 = *(_QWORD *)(v4 + 8);
LABEL_9:
  v5 = 0;
  v8 = **(unsigned __int16 **)(v7 + 16);
  if (v8 > 0xA2)
  {
    if (v8 - 163 > 0x38 || ((1 << (v8 + 93)) & 0x18800000038540DLL) == 0)
    {
      v10 = v8 - 272;
      if (v10 > 0x3F)
        goto LABEL_28;
      if (((1 << (v8 - 16)) & 0x20000040000000C1) != 0)
        goto LABEL_24;
      if (v10 != 63)
      {
LABEL_28:
        if (v8 == 357)
          goto LABEL_24;
        return v5;
      }
      goto LABEL_22;
    }
LABEL_24:
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        return 1;
      if ((*(_BYTE *)(v4 + 3) & 1) == 0 && *(_QWORD *)(v4 + 8) != v7)
      {
        v7 = *(_QWORD *)(v4 + 8);
        goto LABEL_9;
      }
    }
  }
  if (v8 != 51)
  {
    if (v8 == 54 || v8 == 85)
      goto LABEL_24;
    return v5;
  }
LABEL_22:
  v11 = *(_QWORD *)(v7 + 32);
  if (*(_DWORD *)(v11 + 132) != a1 && *(_DWORD *)(v11 + 164) != a1)
    goto LABEL_24;
  return 0;
}

uint64_t sub_1C4A58E38(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if ((int)a1 >= 0)
    v2 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  v3 = *v2;
  if (*v2)
  {
    while ((*(_BYTE *)(v3 + 3) & 1) != 0)
    {
      v3 = *(_QWORD *)(v3 + 24);
      if (!v3)
        return 1;
    }
    v5 = (_QWORD *)(v3 + 8);
    v6 = *(_QWORD *)(v3 + 8);
    v7 = **(unsigned __int16 **)(v6 + 16);
    if ((v7 - 47) < 0xFFFFFFFE)
      return 0;
LABEL_10:
    v9 = *(unsigned int *)(*(_QWORD *)(v6 + 32) + 36);
    if ((_DWORD)v9 == (_DWORD)a1)
      return 0;
    v10 = (uint64_t *)((int)v9 >= 0 ? *(_QWORD *)(a2 + 272) + 8 * v9 : *(_QWORD *)(a2 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
    v11 = *v10;
    if (v11)
    {
      v25 = v7;
      v26 = v6;
      v27 = v5;
      v31 = v3;
      v29 = a1;
      v33 = a2;
      if ((*(_BYTE *)(v11 + 3) & 1) != 0 || (v11 = *(_QWORD *)(v11 + 24)) != 0 && (*(_BYTE *)(v11 + 3) & 1) != 0)
      {
        v15 = *(_QWORD *)(v11 + 8);
        if (v15)
        {
          if (**(_WORD **)(v15 + 16) == 127 && *(_DWORD *)(v15 + 40) == 3)
          {
            v16 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v15 + 32) + 68), a2);
            v6 = v26;
            v5 = v27;
            v17 = v16;
            a1 = v29;
            v19 = v18 == 0;
            v3 = v31;
            a2 = v33;
            if (!v19 && v25 == 45 && v17 < 5)
              return 0;
          }
        }
      }
    }
    v12 = *(unsigned int *)(*(_QWORD *)(v6 + 32) + 68);
    v13 = (uint64_t *)((int)v12 >= 0
                    ? *(_QWORD *)(a2 + 272) + 8 * v12
                    : *(_QWORD *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
    v14 = *v13;
    if (v14)
    {
      v28 = v5;
      v32 = v3;
      v30 = a1;
      v34 = a2;
      if ((*(_BYTE *)(v14 + 3) & 1) != 0 || (v14 = *(_QWORD *)(v14 + 24)) != 0 && (*(_BYTE *)(v14 + 3) & 1) != 0)
      {
        v20 = *(_QWORD *)(v14 + 8);
        if (v20 && **(_WORD **)(v20 + 16) == 127 && *(_DWORD *)(v20 + 40) == 3)
        {
          v21 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v20 + 32) + 68), a2);
          v5 = v28;
          a1 = v30;
          v23 = v22;
          v3 = v32;
          a2 = v34;
          if (v23 && v21 < 5)
            return 0;
        }
      }
    }
    while (1)
    {
      v3 = *(_QWORD *)(v3 + 24);
      if (!v3)
        break;
      if ((*(_BYTE *)(v3 + 3) & 1) == 0)
      {
        v6 = *(_QWORD *)(v3 + 8);
        if (v6 != *v5)
        {
          v4 = 0;
          v5 = (_QWORD *)(v3 + 8);
          v7 = **(unsigned __int16 **)(v6 + 16);
          if ((v7 - 47) > 0xFFFFFFFD)
            goto LABEL_10;
          return v4;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1C4A590A0(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  int v7;

  v3 = (uint64_t *)(a2 + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v3 = (uint64_t *)(a3 + 8 * a1);
  v4 = *v3;
  if (!v4)
    return 0;
  while ((*(_BYTE *)(v4 + 3) & 1) != 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      return 0;
  }
  v6 = *(_QWORD *)(v4 + 8);
LABEL_8:
  v7 = **(unsigned __int16 **)(v6 + 16);
  if (v7 != 47 && v7 != 308)
  {
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        return 0;
      if ((*(_BYTE *)(v4 + 3) & 1) == 0 && *(_QWORD *)(v4 + 8) != v6)
      {
        v6 = *(_QWORD *)(v4 + 8);
        goto LABEL_8;
      }
    }
  }
  return 1;
}

uint64_t sub_1C4A59120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  void (**v34)(_QWORD *);
  _QWORD *v35;
  void (**v36)(_QWORD *);
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  int64_t v41;
  unint64_t v43;
  int v44;
  _QWORD *v45;
  size_t v46;
  void *v47;
  uint64_t v48;
  unsigned int v49;
  void *__src;
  unsigned int v51;
  char v52;
  _QWORD v53[3];
  _QWORD *v54;
  _QWORD v55[3];
  _QWORD *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(unsigned int *)(v3 + 36);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = (uint64_t *)(v5 + 16 * (v4 & 0x7FFFFFFF) + 8);
  v7 = *(_QWORD *)(a1 + 272);
  if ((int)v4 >= 0)
    v6 = (uint64_t *)(v7 + 8 * v4);
  v8 = *v6;
  if (!v8)
    return 0;
  v49 = *(_DWORD *)(v3 + 36);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(unsigned int *)(v3 + 68);
  if ((*(_BYTE *)(v8 + 3) & 1) == 0)
  {
    v8 = *(_QWORD *)(v8 + 24);
    if (!v8 || (*(_BYTE *)(v8 + 3) & 1) == 0)
      return 0;
  }
  v15 = *(_QWORD *)(v8 + 8);
  if (!v15 || **(_WORD **)(v15 + 16) != 177 || *(_DWORD *)(v15 + 40) != 2)
    return 0;
  v16 = (uint64_t *)(v5 + 16 * (v14 & 0x7FFFFFFF) + 8);
  v17 = (uint64_t *)(v7 + 8 * v14);
  if ((int)v14 >= 0)
    v16 = v17;
  v18 = *v16;
  if (v18)
  {
    if ((*(_BYTE *)(v18 + 3) & 1) != 0 || (v18 = *(_QWORD *)(v18 + 24)) != 0 && (*(_BYTE *)(v18 + 3) & 1) != 0)
    {
      v48 = *(_QWORD *)(v18 + 8);
      if (v48)
      {
        if (**(_WORD **)(v48 + 16) == 177 && *(_DWORD *)(v48 + 40) == 2)
          return 0;
      }
    }
  }
  if (**(_WORD **)(a2 + 16) == 163)
    goto LABEL_17;
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 344);
  if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 176))(v19, 18))
    goto LABEL_17;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v19 + 128))(v55, v19, 18);
  v20 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v55[0] + 32))(v55[0]);
  v21 = v55[0];
  v55[0] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (!v20)
    goto LABEL_17;
  v22 = *(_QWORD *)(a1 + 24);
  v23 = (uint64_t *)(v22 + 16 * (v14 & 0x7FFFFFFF) + 8);
  v24 = *(_QWORD *)(a1 + 272);
  if ((int)v14 >= 0)
    v23 = (uint64_t *)(v24 + 8 * v14);
  v25 = *v23;
  if ((*(_BYTE *)(v25 + 3) & 1) == 0)
    v25 = *(_QWORD *)(v25 + 24);
  v26 = *(_QWORD *)(v25 + 8);
  if (**(_WORD **)(v26 + 16) != 310)
    goto LABEL_17;
  v27 = *(unsigned int *)(*(_QWORD *)(v26 + 32) + 36);
  v28 = (uint64_t *)(v22 + 16 * (v27 & 0x7FFFFFFF) + 8);
  v29 = (uint64_t *)(v24 + 8 * v27);
  if ((int)v27 >= 0)
    v28 = v29;
  v30 = *v28;
  if ((*(_BYTE *)(v30 + 3) & 1) == 0)
    v30 = *(_QWORD *)(v30 + 24);
  v31 = *(_QWORD *)(v30 + 8);
  if (**(_WORD **)(v31 + 16) != 285)
    goto LABEL_17;
  v32 = *(_DWORD *)(*(_QWORD *)(v31 + 32) + 36);
  v55[0] = &off_1E816EFF0;
  v55[1] = sub_1C554C7E0;
  v56 = v55;
  v53[0] = &off_1E816F038;
  v53[1] = sub_1C554C7F8;
  v54 = v53;
  sub_1C554C3AC(v32, a1, (uint64_t)v55, (uint64_t)v53, 0, 0, &__src);
  v33 = v54;
  if (v54 == v53)
  {
    v34 = (void (**)(_QWORD *))(v53[0] + 32);
    v33 = v53;
LABEL_33:
    (*v34)(v33);
    goto LABEL_34;
  }
  if (v54)
  {
    v34 = (void (**)(_QWORD *))(*v54 + 40);
    goto LABEL_33;
  }
LABEL_34:
  v35 = v56;
  if (v56 == v55)
  {
    v36 = (void (**)(_QWORD *))(v55[0] + 32);
    v35 = v55;
LABEL_36:
    (*v36)(v35);
    goto LABEL_37;
  }
  if (v56)
  {
    v36 = (void (**)(_QWORD *))(*v56 + 40);
    goto LABEL_36;
  }
LABEL_37:
  if (!v52)
    goto LABEL_17;
  v37 = v51;
  if (v51 > 0x40)
  {
    v46 = (((unint64_t)v51 + 63) >> 3) & 0x3FFFFFF8;
    v38 = (_QWORD *)operator new[]();
    v47 = __src;
    memcpy(v38, __src, v46);
    if (v47)
      MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
  }
  else
  {
    v38 = __src;
  }
  v39 = (_QWORD *)(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 400))(v19, v20);
  if (v37 > 0x40)
  {
    v40 = 0;
    v41 = (unint64_t)(v37 + 63) >> 6;
    do
    {
      if (v41-- < 1)
        break;
      v43 = v38[v41];
      v40 += __clz(v43);
    }
    while (!v43);
    v44 = v37 | 0xFFFFFFC0;
    if ((v37 & 0x3F) == 0)
      v44 = 0;
    if ((v37 - v40 - v44) > 0x40)
    {
      if (v38)
        MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
      goto LABEL_17;
    }
    v45 = (_QWORD *)*v38;
    if (v38)
      MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
    if (v45 == v39)
      return 0;
LABEL_17:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, a2);
    llvm::MachineOperand::setReg(v13 + 32, v14);
    llvm::MachineOperand::setReg(v13 + 64, v49);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, a2);
    return 1;
  }
  if (v38 != v39)
    goto LABEL_17;
  return 0;
}

uint64_t sub_1C4A595BC(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  llvm::ConstantFP *v17;
  const llvm::APFloat *v18;
  llvm::APFloatBase *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 272);
  v5 = *(_QWORD *)(a2 + 32) + 32 * a3;
  v8 = *(_DWORD *)(v5 + 4);
  v7 = (_DWORD *)(v5 + 4);
  v6 = v8;
  if ((v8 & 0x80000000) != 0)
    v9 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  else
    v9 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * v6);
  v10 = *v9;
  if (!v10)
    return 0;
  v29 = *(_QWORD *)(a2 + 32) + 32 * a3;
  if ((*(_BYTE *)(v10 + 3) & 1) == 0)
  {
    v10 = *(_QWORD *)(v10 + 24);
    if (!v10 || (*(_BYTE *)(v10 + 3) & 1) == 0)
      return 0;
  }
  v13 = *(_QWORD *)(v10 + 8);
  if (!v13 || **(_WORD **)(v13 + 16) != 120)
    return 0;
  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 48);
  if ((v6 & 0x80000000) != 0
    && (v15 = v6 & 0x7FFFFFFF, v15 < *(_DWORD *)(v4 + 432))
    && (*(_QWORD *)(*(_QWORD *)(v4 + 424) + 8 * v15) & 0x8000000000000000) != 0)
  {
    v17 = **(llvm::ConstantFP ***)v14;
    llvm::detail::IEEEFloat::initFromBFloatAPInt((llvm::detail::IEEEFloat *)&v31, (const llvm::APInt **)(v14 + 24));
  }
  else
  {
    v16 = *(_DWORD *)(v14 + 32);
    if (v16 == 32)
    {
      v17 = **(llvm::ConstantFP ***)v14;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v31, (const llvm::APInt **)(v14 + 24));
    }
    else
    {
      v17 = **(llvm::ConstantFP ***)v14;
      if (v16 == 16)
        llvm::detail::IEEEFloat::initFromHalfAPInt((llvm::detail::IEEEFloat *)&v31, (const llvm::APInt **)(v14 + 24));
      else
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v31, (const llvm::APInt **)(v14 + 24));
    }
  }
  v19 = llvm::ConstantFP::get(v17, (llvm::LLVMContext *)&v30, v18);
  if ((_UNKNOWN *)v31 == &unk_1C866F1C0)
  {
    sub_1C4773C74(v32);
  }
  else if ((*(_DWORD *)(v31 + 8) - 64) <= 0xFFFFFF7F && v32[0])
  {
    MEMORY[0x1CAA32F9C](v32[0], 0x1000C8000313F17);
  }
  v20 = a1[1];
  *(_QWORD *)(v20 + 40) = *(_QWORD *)(v13 + 24);
  *(_QWORD *)(v20 + 48) = v13;
  v21 = a1[1];
  if ((*v7 & 0x80000000) != 0
    && (v22 = *(_QWORD *)(v3 + 272), v23 = *v7 & 0x7FFFFFFF, v23 < *(_DWORD *)(v22 + 432)))
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v22 + 424) + 8 * v23);
  }
  else
  {
    v24 = 0;
  }
  v30 = v24;
  LODWORD(v31) = 0;
  (*(void (**)(uint64_t, uint64_t *, llvm::APFloatBase *))(*(_QWORD *)v21 + 24))(v21, &v30, v19);
  v26 = v25;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 280) + 32))(*(_QWORD *)(v3 + 280), a2);
  llvm::MachineOperand::setReg(v29, *(_DWORD *)(*(_QWORD *)(v26 + 32) + 4));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 280) + 40))(*(_QWORD *)(v3 + 280), a2);
  if (sub_1C554B164(v13, *(_QWORD *)(v3 + 272)))
  {
    v27 = v13;
    if ((*(_BYTE *)v13 & 4) == 0)
    {
      v27 = v13;
      if ((*(_WORD *)(v13 + 44) & 8) != 0)
      {
        v27 = v13;
        do
          v27 = *(_QWORD *)(v27 + 8);
        while ((*(_WORD *)(v27 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v13 + 24) + 40, v13, *(_QWORD *)(v27 + 8));
  }
  return 1;
}

uint64_t sub_1C4A59888(unsigned int a1, char a2, _QWORD *a3, uint64_t a4, int a5)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v10;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  _BOOL4 v50;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  llvm::ConstantFP *v59;
  const llvm::APFloat *v60;
  llvm::APFloatBase *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if ((a1 & 0x80000000) != 0)
    v5 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  else
    v5 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * a1);
  v6 = *v5;
  if (!v6)
    goto LABEL_5;
  v10 = a1;
  if ((*(_BYTE *)(v6 + 3) & 1) != 0)
    goto LABEL_10;
  v6 = *(_QWORD *)(v6 + 24);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 3) & 1) == 0)
    {
LABEL_17:
      v6 = 0;
      goto LABEL_5;
    }
LABEL_10:
    v15 = *(_QWORD *)(v6 + 8);
    if (v15)
    {
      v16 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3[1] + 8) + 16))(*(_QWORD *)(a3[1] + 8), *(_QWORD *)a3[1]);
      v17 = *(unsigned __int16 **)(v15 + 16);
      v18 = *((unsigned __int8 *)v17 + 4);
      if ((v17[4] & 2) == 0 || (v28 = *(_DWORD *)(v15 + 40), v28 == v18))
      {
        v19 = *((unsigned __int8 *)v17 + 4);
      }
      else
      {
        v29 = v28 - 1;
        v19 = *((unsigned __int8 *)v17 + 4);
        do
        {
          v30 = *(_DWORD *)(*(_QWORD *)(v15 + 32) + 32 * v18);
          if ((v30 & 0x10000FF) != 0x1000000)
            break;
          v19 += (v30 & 0x2000000) == 0;
          if (v29 == v18)
            break;
          ++v18;
        }
        while ((v30 & 0x2000000) == 0);
      }
      v20 = *((_QWORD *)v17 + 4);
      if (v20)
      {
        v21 = -1;
        do
          ++v21;
        while (*(_WORD *)(v20 + 2 * v21));
      }
      else
      {
        v21 = 0;
      }
      if (v21 + v19 != 1)
        goto LABEL_52;
      v22 = *(_QWORD *)(v15 + 32);
      v23 = *v17;
      v24 = v23;
      v25 = v15;
      if (v23 == 177)
      {
        v26 = *(unsigned int *)(v22 + 36);
        if ((v26 & 0x80000000) != 0)
          v27 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
        else
          v27 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * v26);
        v31 = *v27;
        if (!v31)
          goto LABEL_46;
        if ((*(_BYTE *)(v31 + 3) & 1) == 0)
        {
          v31 = *(_QWORD *)(v31 + 24);
          if (!v31 || (*(_BYTE *)(v31 + 3) & 1) == 0)
            goto LABEL_46;
        }
        v25 = *(_QWORD *)(v31 + 8);
        if (!v25)
          goto LABEL_46;
        v24 = **(unsigned __int16 **)(v25 + 16);
      }
      if (v24 == 184)
      {
        v32 = *(unsigned int *)(*(_QWORD *)(v25 + 32) + 36);
        if ((v32 & 0x80000000) != 0)
          v33 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
        else
          v33 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * v32);
        v38 = *v33;
        if (!v38)
          goto LABEL_46;
        if ((*(_BYTE *)(v38 + 3) & 1) == 0)
        {
          v38 = *(_QWORD *)(v38 + 24);
          if (!v38 || (*(_BYTE *)(v38 + 3) & 1) == 0)
            goto LABEL_46;
        }
        v25 = *(_QWORD *)(v38 + 8);
        if (!v25)
          goto LABEL_46;
        v34 = **(unsigned __int16 **)(v25 + 16);
      }
      else
      {
        v34 = v24;
      }
      if (v34 == 179)
      {
        v35 = *(_QWORD *)(v25 + 32);
        if ((a2 & 1) != 0)
          goto LABEL_85;
        v36 = *(unsigned int *)(v35 + 36);
        v37 = (uint64_t *)((v36 & 0x80000000) != 0
                        ? *(_QWORD *)(a4 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(a4 + 272) + 8 * v36);
        v63 = *v37;
        if (!v63)
          goto LABEL_85;
        while ((*(_BYTE *)(v63 + 3) & 1) != 0)
        {
          v63 = *(_QWORD *)(v63 + 24);
          if (!v63)
            goto LABEL_85;
        }
        while (1)
        {
          v63 = *(_QWORD *)(v63 + 24);
          if (!v63)
            break;
          if ((*(_BYTE *)(v63 + 3) & 1) == 0)
            goto LABEL_85;
        }
        v65 = (uint64_t *)((v36 & 0x80000000) != 0
                        ? *(_QWORD *)(a4 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(a4 + 272) + 8 * v36);
        v66 = *v65;
        if (v66)
        {
          if ((*(_BYTE *)(v66 + 3) & 1) != 0 || (v66 = *(_QWORD *)(v66 + 24)) != 0 && (*(_BYTE *)(v66 + 3) & 1) != 0)
          {
            v67 = *(_QWORD *)(v66 + 8);
            if (v67)
            {
              if (**(_WORD **)(v67 + 16) == 313)
              {
LABEL_85:
                if (v24 == 184)
                {
                  v68 = 257;
                  v69 = 0;
                  v73 = *(_DWORD *)(v35 + 36);
                  LODWORD(v75) = 0;
                  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unsigned int *, uint64_t, _QWORD))(*a3 + 32))(a3, 184, &v68, 1, &v73, 1, 0);
                  v44 = *(_QWORD *)(v64 + 32);
                }
                else
                {
                  v44 = v35 + 32;
                }
                if (v23 != 177)
                  goto LABEL_54;
                v68 = 257;
                v69 = 0;
                v73 = *(_DWORD *)(v44 + 4);
                LODWORD(v75) = 0;
                (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unsigned int *, uint64_t, uint64_t))(*a3 + 32))(a3, 177, &v68, 1, &v73, 1, *(unsigned __int16 *)(v15 + 44) | 0x100000000);
LABEL_53:
                v44 = *(_QWORD *)(v43 + 32);
LABEL_54:
                v7 = *(_DWORD *)(v44 + 4);
                v8 = v7 & 0xFFFFFF00;
LABEL_55:
                v6 = 0x100000000;
                return v6 | v8 | v7;
              }
            }
          }
        }
      }
LABEL_46:
      v39 = *(unsigned int *)(v22 + 4);
      v10 = *(_DWORD *)(v22 + 4);
      if ((int)v39 >= 0)
        v40 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * v39);
      else
        v40 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
      v41 = *v40;
      if ((*(_BYTE *)(v41 + 3) & 1) == 0)
        v41 = *(_QWORD *)(v41 + 24);
      v42 = *(_QWORD *)(v41 + 8);
      if (**(_WORD **)(v42 + 16) == 121)
      {
        v45 = *(_QWORD *)(*(_QWORD *)(v42 + 32) + 48);
        if (v45)
        {
          v46 = *(_QWORD *)(v45 + 32);
          if ((_UNKNOWN *)v46 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v74, (const llvm::detail::DoubleAPFloat *)(v45 + 32));
            if (!a5)
              goto LABEL_80;
          }
          else
          {
            v74 = *(_QWORD *)(v45 + 32);
            if ((*(_DWORD *)(v46 + 8) + 64) >= 0x80)
            {
              v16 = operator new[]();
              v75 = v16;
            }
            v47 = *(_BYTE *)(v45 + 52);
            v48 = v47 & 7;
            v77 = v47 & 0xF;
            v76 = *(_DWORD *)(v45 + 48);
            v50 = (v47 & 6) != 0 && v48 != 3;
            if (v48 == 1 || v50)
            {
              v52 = *(unsigned int *)(v46 + 8);
              if ((v52 - 64) <= 0xFFFFFF7F)
                v53 = (uint64_t *)v16;
              else
                v53 = &v75;
              v56 = *(uint64_t **)(v45 + 40);
              v55 = (uint64_t *)(v45 + 40);
              v54 = v56;
              if ((*(_DWORD *)(*(v55 - 1) + 8) - 64) >= 0xFFFFFF80)
                v54 = v55;
              if (v52 <= 0xFFFFFFBF)
              {
                v57 = (unint64_t)(v52 + 64) >> 6;
                do
                {
                  v58 = *v54++;
                  *v53++ = v58;
                  --v57;
                }
                while (v57);
              }
            }
            if (!a5)
              goto LABEL_80;
          }
          if ((sub_1C48AA9FC((uint64_t)&v73) & 1) == 0)
          {
            v71 = 257;
            v72 = 0;
            LODWORD(v68) = *(_DWORD *)(v22 + 4);
            v70 = 0;
            (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 178, &v71, 1, &v68, 1, 0);
LABEL_95:
            v7 = *(_DWORD *)(*(_QWORD *)(v62 + 32) + 4);
            v8 = v7 & 0xFFFFFF00;
            if ((_UNKNOWN *)v74 == &unk_1C866F1C0)
            {
              sub_1C4773C74(&v75);
            }
            else if ((*(_DWORD *)(v74 + 8) - 64) <= 0xFFFFFF7F && v75)
            {
              MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
            }
            goto LABEL_55;
          }
LABEL_80:
          v59 = ***(llvm::ConstantFP ****)a3[1];
          llvm::APFloat::convert((uint64_t)&v73, &unk_1C866F184, 1, &v71);
          v61 = llvm::ConstantFP::get(v59, (llvm::LLVMContext *)&v73, v60);
          v68 = 257;
          v69 = 0;
          (*(void (**)(_QWORD *, uint64_t *, llvm::APFloatBase *))(*a3 + 24))(a3, &v68, v61);
          goto LABEL_95;
        }
      }
LABEL_52:
      v68 = 257;
      v69 = 0;
      v73 = v10;
      LODWORD(v75) = 0;
      (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unsigned int *, uint64_t, _QWORD))(*a3 + 32))(a3, 178, &v68, 1, &v73, 1, 0);
      goto LABEL_53;
    }
    goto LABEL_17;
  }
LABEL_5:
  LOBYTE(v7) = 0;
  v8 = 0;
  return v6 | v8 | v7;
}

uint64_t sub_1C4A59ECC(uint64_t a1, llvm::SmallPtrSetImplBase *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  char v11;
  BOOL v12;
  uint64_t v13;

  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4);
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!*v4)
    return 1;
  while ((*(_BYTE *)(v5 + 3) & 1) != 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5)
      return 1;
  }
  v9 = *(_QWORD *)(v5 + 8);
LABEL_9:
  result = 0;
  v10 = **(unsigned __int16 **)(v9 + 16);
  if (v10 <= 0x10F)
  {
    v11 = v10 + 93;
    if (v10 - 163 <= 0x38)
    {
      if (((1 << v11) & 0x18800000018140DLL) != 0)
        goto LABEL_19;
      if (((1 << v11) & 0x204000) != 0)
      {
        if ((sub_1C4A59ECC(v9, a2, a3) & 1) == 0)
          return 0;
LABEL_20:
        v13 = *(_QWORD *)(v5 + 8);
        while (1)
        {
          v5 = *(_QWORD *)(v5 + 24);
          if (!v5)
            return 1;
          if ((*(_BYTE *)(v5 + 3) & 1) == 0)
          {
            v9 = *(_QWORD *)(v5 + 8);
            if (v9 != v13)
              goto LABEL_9;
          }
        }
      }
    }
    if (v10 != 54 && v10 != 85)
      return result;
LABEL_19:
    sub_1C4774094(a2, v9);
    if ((*((_DWORD *)a2 + 5) - *((_DWORD *)a2 + 6)) > 2)
      return 0;
    goto LABEL_20;
  }
  v12 = v10 - 272 > 0x3D || ((1 << (v10 - 16)) & 0x20000040000000C1) == 0;
  if (!v12 || v10 == 357)
    goto LABEL_19;
  return result;
}

uint64_t sub_1C4A5A03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;

  v57 = a2;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 == a3)
    return 1;
  v13 = *(_QWORD *)(a1 + 312);
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v13);
  if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v13 + 1320), v6, a3))
    return 1;
  v15 = *((unsigned int *)a6 + 4);
  if (!(_DWORD)v15)
    goto LABEL_12;
  v16 = *a6;
  LODWORD(v17) = (v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v18 = (_QWORD *)(*a6 + 16 * v17);
  v19 = *v18;
  if (*v18 != a2)
  {
    v20 = 1;
    while (v19 != -4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v15 - 1);
      v19 = *(_QWORD *)(v16 + 16 * v17);
      if (v19 == a2)
      {
        v18 = (_QWORD *)(v16 + 16 * v17);
        goto LABEL_10;
      }
    }
    goto LABEL_12;
  }
LABEL_10:
  if (v18 == (_QWORD *)(v16 + 16 * v15))
  {
LABEL_12:
    v18 = sub_1C4A5C498(a4, &v57);
    v22 = 1;
    goto LABEL_13;
  }
  v22 = 0;
  ++*(_DWORD *)(a1 + 332);
LABEL_13:
  v24 = *((_DWORD *)v18 + 2);
  v23 = v18 + 1;
  result = v24;
  if (v24)
    return result;
  result = 2;
  *v23 = 2;
  v25 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(v25 + 3) & 1) == 0)
    return result;
  v56 = 1;
  v26 = *(unsigned __int16 **)(a2 + 16);
  v27 = *v26 - 1;
  if (v27 <= 1 && (*(_BYTE *)(v25 + 48) & 8) != 0)
    return result;
  v28 = *(unsigned __int16 *)(a2 + 44);
  v51 = (v28 & 0xC) == 0;
  v29 = (v28 >> 2) & 1;
  if (v51)
    LOBYTE(v29) = 1;
  v30 = *((_QWORD *)v26 + 1);
  if ((v29 & 1) != 0)
  {
    if ((v30 & 0x80000) != 0)
      return result;
  }
  else
  {
    if ((v30 & 0x80000) != 0)
      return result;
    v53 = a2;
    while ((*(_WORD *)(v53 + 44) & 8) != 0)
    {
      v53 = *(_QWORD *)(v53 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v53 + 16) + 10) & 8) != 0)
        return result;
    }
  }
  if (v27 <= 1 && (*(_BYTE *)(v25 + 48) & 0x20) != 0)
    return 2;
  if ((v29 & 1) != 0)
  {
    if ((v30 & 0x1000000000) != 0)
      return 2;
  }
  else
  {
    if ((v30 & 0x1000000000) != 0)
      return 2;
    v54 = a2;
    result = 2;
    while ((*(_WORD *)(v54 + 44) & 8) != 0)
    {
      v54 = *(_QWORD *)(v54 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v54 + 16) + 12) & 0x10) != 0)
        return result;
    }
  }
  if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)a2, 0, &v56))
    return 2;
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 24) + 16 * (*(_DWORD *)(v25 + 4) & 0x7FFFFFFF));
  if ((v31 & 4) == 0)
  {
    v32 = v31 & 0xFFFFFFFFFFFFFFF8;
    if ((v31 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 104))(*(_QWORD *)(a1 + 256));
      if (!(*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v33 + 840))(v33, v32))
        return 2;
    }
  }
  v34 = *(_DWORD *)(a1 + 332);
  v35 = *(_DWORD *)(a1 + 336);
  if (v34 >= v35)
    v36 = *(_DWORD *)(a1 + 336);
  else
    v36 = *(_DWORD *)(a1 + 332);
  v37 = v34 > v35;
  v38 = v36 - __clz(v34) + 31;
  if (!v37)
    v38 = v36;
  v39 = v22 ? a5 + 1 : 1;
  if (v39 > v38 * *(_DWORD *)(a1 + 328))
    return 2;
  v40 = *(_DWORD *)(a2 + 40);
  if (v40 != 1)
  {
    v41 = 1;
    while (1)
    {
      v42 = *(_QWORD *)(a2 + 32);
      v43 = *(_DWORD *)(v42 + 32 * v41);
      if (!(_BYTE)v43)
      {
        v44 = *(unsigned int *)(v42 + 32 * v41 + 4);
        if ((v43 & 0x1F00000) != 0 || (v44 - 1) < 0x3FFFFFFF)
          return 2;
        v46 = *(_QWORD *)(a1 + 272);
        v47 = (uint64_t *)((v44 & 0x80000000) != 0
                        ? *(_QWORD *)(v46 + 24) + 16 * (v44 & 0x7FFFFFFF) + 8
                        : *(_QWORD *)(v46 + 272) + 8 * v44);
        v48 = *v47;
        if (v48)
        {
          v55 = v41;
          if ((*(_BYTE *)(v48 + 3) & 1) != 0 || (v48 = *(_QWORD *)(v48 + 24)) != 0 && (*(_BYTE *)(v48 + 3) & 1) != 0)
          {
            v49 = *(_QWORD *)(v48 + 8);
            if (v49)
              break;
          }
        }
      }
LABEL_54:
      if (v40 == (_DWORD)++v41)
        goto LABEL_40;
    }
    v50 = *(_QWORD *)(*(_QWORD *)(v49 + 16) + 8);
    v51 = (*(_WORD *)(v49 + 44) & 0xC) != 0 && (*(_WORD *)(v49 + 44) & 4) == 0;
    if (v51)
    {
      v52 = *(_QWORD *)(v48 + 8);
      if ((v50 & 0x200) == 0)
      {
        while ((*(_WORD *)(v52 + 44) & 8) != 0)
        {
          v52 = *(_QWORD *)(v52 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v52 + 16) + 9) & 2) != 0)
            goto LABEL_65;
        }
        goto LABEL_66;
      }
    }
    else if ((v50 & 0x200) == 0)
    {
      goto LABEL_66;
    }
LABEL_65:
    if (*(_QWORD *)(v49 + 24) == a3)
      return 2;
LABEL_66:
    result = sub_1C4A5A03C(a1);
    v41 = v55;
    if ((_DWORD)result == 2)
      return result;
    goto LABEL_54;
  }
LABEL_40:
  if (v22)
    v23 = sub_1C4A5C498(a4, &v57) + 1;
  result = 1;
  *v23 = 1;
  return result;
}

uint64_t sub_1C4A5A418(uint64_t result, uint64_t a2, llvm::MachineBasicBlock *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a2 + 24);
  if ((llvm::MachineBasicBlock *)v3 != a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 312);
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v7);
    result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v7 + 1320), v3, (uint64_t)a3);
    if ((result & 1) == 0)
    {
      v8 = *(_DWORD *)(a2 + 40);
      v9 = v8 - 1;
      if (v8 != 1)
      {
        v10 = 0;
        do
        {
          v11 = *(_QWORD *)(a2 + 32) + v10;
          if (!*(_BYTE *)(v11 + 32))
          {
            v12 = *(unsigned int *)(v11 + 36);
            v13 = *(_QWORD *)(v6 + 272);
            if ((v12 & 0x80000000) != 0)
              v14 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
            else
              v14 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * v12);
            v15 = *v14;
            if (v15
              && ((*(_BYTE *)(v15 + 3) & 1) != 0 || (v15 = *(_QWORD *)(v15 + 24)) != 0 && (*(_BYTE *)(v15 + 3) & 1) != 0))
            {
              v16 = *(_QWORD *)(v15 + 8);
            }
            else
            {
              v16 = 0;
            }
            sub_1C4A5A418(v6, v16, a3);
          }
          v10 += 32;
          --v9;
        }
        while (v9);
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 280) + 32))(*(_QWORD *)(v6 + 280), a2);
      sub_1C6152358(a2, a3);
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 280) + 40))(*(_QWORD *)(v6 + 280), a2);
    }
  }
  return result;
}

unsigned int *sub_1C4A5A548(unsigned int *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1C4926838(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
  }
  return result;
}

uint64_t sub_1C4A5A598(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  return sub_1C4A54BEC(a1, a3, a2, a4);
}

uint64_t sub_1C4A5A5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void **v13;
  void *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  void **v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  int v84;
  int v85;
  void *v86;
  unsigned int v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  __int128 v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t j;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  llvm::MachineFunction *v110;
  llvm::MachineInstr *v111;
  llvm::MachineInstr *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t i;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t k;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t m;
  _QWORD *v178;
  int v179;
  uint64_t v180;
  int v182;
  int v183;
  uint64_t v184;
  unsigned int v185;
  int v186;
  uint64_t v188;
  uint64_t v189;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  void *__p;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t (**v209)(llvm::MachineFunction::Delegate *__hidden);
  void (**v210)();
  _BYTE *v211;
  _BYTE *v212;
  uint64_t v213;
  int v214;
  _BYTE v215[32];
  void *v216;
  uint64_t v217;
  _QWORD v218[4];
  uint64_t v219;
  llvm::MachineInstr *v220;
  _QWORD *v221;
  uint64_t v222;
  _QWORD v223[6];
  _QWORD v224[2];
  void *v225;
  void *v226;
  _BYTE v227[12];
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;

  v231 = *MEMORY[0x1E0C80C00];
  if ((**(_BYTE **)(a2 + 360) & 0x10) != 0)
  {
    LOBYTE(v124) = 0;
    return v124 & 1;
  }
  v2 = a2;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 40);
  if (byte_1ED7ED798)
  {
    v4 = **(void ****)(a1 + 8);
    do
    {
      v5 = *v4;
      v4 += 2;
    }
    while (v5 != &unk_1EF8F7108);
    v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &unk_1EF8F7108) + 248;
    v7 = (_QWORD *)operator new();
    v7[8] = 0;
    v7[1] = v2;
    v7[5] = 0;
    v7[3] = *(_QWORD *)(v2 + 40);
    v7[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 104))(*(_QWORD *)(v2 + 16));
    v7[4] = 0;
    v8 = *(_QWORD *)(a1 + 248);
    v7[6] = 0;
    v7[7] = 0;
    *v7 = &unk_1E816DC08;
    *(_QWORD *)(a1 + 248) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = **(void ****)(a1 + 8);
    do
    {
      v10 = *v9;
      v9 += 2;
    }
    while (v10 != &llvm::TargetPassConfig::ID);
    v11 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::TargetPassConfig::ID);
    *(_QWORD *)(a1 + 320) = v11;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v11 + 288))(&v225);
    sub_1C54EB0C0(v6, (uint64_t *)&v225, 0);
    v12 = v225;
    v225 = 0;
    if (v12)
      (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
    *(_QWORD *)(*(_QWORD *)(a1 + 248) + 64) = v6;
  }
  else
  {
    v188 = operator new();
    *(_OWORD *)(v188 + 16) = 0u;
    *(_QWORD *)(v188 + 64) = 0;
    *(_OWORD *)(v188 + 48) = 0u;
    *(_OWORD *)(v188 + 32) = 0u;
    *(_QWORD *)v188 = &off_1E816EC08;
    *(_QWORD *)(v188 + 8) = v2;
    *(_QWORD *)(v188 + 24) = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v188 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 104))(*(_QWORD *)(v2 + 16));
    if (*(_QWORD *)(v188 + 32))
      llvm::MetadataTracking::untrack(v188 + 32, *(unsigned __int8 **)(v188 + 32));
    *(_QWORD *)(v188 + 32) = 0;
    *(_QWORD *)(v188 + 48) = 0;
    *(_QWORD *)(v188 + 56) = 0;
    v189 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v188;
    v2 = a2;
    if (v189)
      (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  }
  v13 = **(void ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &unk_1EF8F7110);
  v15 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &unk_1EF8F7110);
  *(_QWORD *)(a1 + 264) = sub_1C491CBCC(v15, v2);
  v16 = **(void ****)(a1 + 8);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 288) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::MachineLoopInfo::ID);
  v18 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 8) + 16))(*(_QWORD *)(v2 + 8), *(_QWORD *)v2);
  *(_QWORD *)(a1 + 256) = v18;
  *(_QWORD *)(a1 + 296) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 176))(v18);
  *(_QWORD *)(a1 + 304) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 184))(*(_QWORD *)(a1 + 256));
  v19 = **(void ****)(a1 + 8);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 312) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), &llvm::MachineDominatorTree::ID);
  v211 = v215;
  v212 = v215;
  v213 = 4;
  v214 = 0;
  v209 = &off_1E7FA1778;
  v210 = (void (**)())&unk_1E7FA17D0;
  v216 = v218;
  v217 = 0x400000000;
  if (byte_1ED7ED798)
  {
    v218[0] = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 64);
    LODWORD(v217) = 1;
  }
  *(_QWORD *)(v2 + 728) = &v209;
  *(_QWORD *)(a1 + 280) = &v210;
  v205 = &v207;
  v206 = 0x1000000000;
  v21 = *(_QWORD *)(v2 + 328);
  v192 = v2 + 320;
  if (v21 != v2 + 320)
  {
    v22 = 0;
    v193 = v227;
    while (1)
    {
      v191 = v21;
      v24 = *(_QWORD *)(v21 + 48);
      v23 = v21 + 48;
      v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      if ((v24 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v25 & 4) == 0)
      {
        while ((*(_WORD *)(v25 + 44) & 4) != 0)
          v25 = *(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v25 != v23)
        break;
LABEL_251:
      v21 = *(_QWORD *)(v191 + 8);
      v2 = a2;
      if (v21 == v192)
      {
        v116 = *(_QWORD *)(a2 + 328);
        if (v116 != v192)
        {
          do
          {
            v117 = *(_QWORD *)(v116 + 56);
            if (v117 != v116 + 48)
            {
              do
              {
                v118 = *(_QWORD *)(v117 + 8);
                v22 |= sub_1C4A51F24(a1, v117);
                v117 = v118;
              }
              while (v118 != v116 + 48);
            }
            v116 = *(_QWORD *)(v116 + 8);
          }
          while (v116 != v192);
          for (i = *(_QWORD *)(a2 + 328); i != v192; i = *(_QWORD *)(i + 8))
          {
            v120 = i + 48;
            v121 = *(_QWORD *)(i + 48) & 0xFFFFFFFFFFFFFFF8;
            if (!v121 || (*(_BYTE *)v121 & 4) == 0)
            {
              while ((*(_WORD *)(v121 + 44) & 4) != 0)
                v121 = *(_QWORD *)v121 & 0xFFFFFFFFFFFFFFF8;
            }
            if (v121 != v120)
            {
              do
              {
                v122 = *(_QWORD *)v121 & 0xFFFFFFFFFFFFFFF8;
                if (!v122 || (*(_BYTE *)v122 & 4) == 0)
                {
                  while ((*(_WORD *)(v122 + 44) & 4) != 0)
                    v122 = *(_QWORD *)v122 & 0xFFFFFFFFFFFFFFF8;
                }
                if (sub_1C554B164(v121, *(_QWORD *)(a1 + 272)))
                {
                  v123 = v121;
                  if ((*(_BYTE *)v121 & 4) == 0)
                  {
                    v123 = v121;
                    if ((*(_WORD *)(v121 + 44) & 8) != 0)
                    {
                      v123 = v121;
                      do
                        v123 = *(_QWORD *)(v123 + 8);
                      while ((*(_WORD *)(v123 + 44) & 8) != 0);
                    }
                  }
                  sub_1C487FE80(*(_QWORD *)(v121 + 24) + 40, v121, *(_QWORD *)(v123 + 8));
                  v22 = 1;
                }
                v121 = v122;
              }
              while (v122 != v120);
            }
          }
        }
        goto LABEL_281;
      }
    }
    v26 = 0;
    while (1)
    {
      v27 = **(unsigned __int16 **)(v25 + 16);
      if (v27 > 0x10F)
      {
        v29 = v27 - 272 > 0x3D || ((1 << (v27 - 16)) & 0x20000040000000C1) == 0;
        if (!v29 || v27 == 357)
        {
LABEL_41:
          if (*(_WORD *)(*(_QWORD *)(v2 + 8) + 1020) & 1 | ((~*(unsigned __int16 *)(v25 + 44) & 0x7C0) == 0))
          {
            v30 = *(_DWORD *)(*(_QWORD *)(v25 + 32) + 4);
            if (v30 < 0)
            {
              v31 = *(_QWORD *)(a1 + 272);
              v32 = v30 & 0x7FFFFFFF;
              if (v32 < *(_DWORD *)(v31 + 432) && *(_QWORD *)(*(_QWORD *)(v31 + 424) + 8 * v32) == 129)
              {
                if (v26 >= HIDWORD(v206))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v205, (uint64_t)&v207, v26 + 1, 8);
                  v26 = v206;
                }
                *((_QWORD *)v205 + v26) = v25;
                v26 = v206 + 1;
                LODWORD(v206) = v206 + 1;
              }
            }
          }
        }
      }
      else
      {
        v28 = v27 - 163 > 0x38 || ((1 << (v27 + 93)) & 0x18800000000140DLL) == 0;
        if (!v28 || v27 == 85)
          goto LABEL_41;
      }
      v25 = *(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8;
      if (!v25 || (*(_BYTE *)v25 & 4) == 0)
      {
        while ((*(_WORD *)(v25 + 44) & 4) != 0)
          v25 = *(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v25 == v23)
      {
        while (1)
        {
          if (!v26)
            goto LABEL_251;
          v33 = *((_QWORD *)v205 + v26 - 1);
          LODWORD(v206) = v26 - 1;
          v34 = *(_QWORD **)(a1 + 248);
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v34[1] + 8) + 16))(*(_QWORD *)(v34[1] + 8), *(_QWORD *)v34[1]);
          v34[5] = *(_QWORD *)(v33 + 24);
          v34[6] = v33;
          BYTE2(v194) = 0;
          LOWORD(v194) = 0;
          v35 = **(unsigned __int16 **)(v33 + 16);
          LODWORD(v36) = *(_DWORD *)(v33 + 40);
          if (v36 >= 2)
          {
            v37 = 1;
            while (1)
            {
              v38 = *(_QWORD *)(v33 + 32) + 32 * v37;
              v39 = *(_QWORD *)(a1 + 272);
              v40 = *(unsigned int *)(v38 + 4);
              if ((v40 & 0x80000000) != 0)
                v41 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
              else
                v41 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v40);
              v42 = *v41;
              if ((*(_BYTE *)(v42 + 3) & 1) == 0)
                v42 = *(_QWORD *)(v42 + 24);
              v43 = *(_QWORD *)(v42 + 8);
              v44 = **(unsigned __int16 **)(v43 + 16);
              if ((v44 & 0xFFFE) == 0x74)
              {
                v45 = *(unsigned int *)(v43 + 40);
                if (!(_DWORD)v45)
                  goto LABEL_181;
                v46 = *(_QWORD *)(v43 + 32);
                v47 = (_DWORD *)(v46 + 16);
                while (*((_BYTE *)v47 - 16) != 17)
                {
                  v47 += 8;
                  if (!--v45)
                    goto LABEL_72;
                }
                if (*v47 == 2131)
                {
                  v48 = *(unsigned int *)(v46 + 68);
                  if ((v48 & 0x80000000) != 0)
                    v49 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
                  else
                    v49 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v48);
                  v62 = *v49;
                  if (!v62)
                    goto LABEL_104;
                  if ((*(_BYTE *)(v62 + 3) & 1) == 0)
                  {
                    v62 = *(_QWORD *)(v62 + 24);
                    if (!v62)
                    {
LABEL_104:
                      if ((v48 & 0x80000000) != 0)
                        v63 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
                      else
                        v63 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v48);
                      v64 = *v63;
                      if (!v64)
                        goto LABEL_196;
                      while ((*(_BYTE *)(v64 + 3) & 1) != 0)
                      {
                        v64 = *(_QWORD *)(v64 + 24);
                        if (!v64)
                          goto LABEL_196;
                      }
                      while (1)
                      {
                        v64 = *(_QWORD *)(v64 + 24);
                        if (!v64)
                          break;
                        if ((*(_BYTE *)(v64 + 3) & 1) == 0)
                          goto LABEL_196;
                      }
                      v65 = 0;
                      v66 = **(unsigned __int16 **)(v62 + 16);
                      if (v66 > 0x10F)
                      {
                        v80 = v66 - 272 > 0x3D || ((1 << (v66 - 16)) & 0x20000040000000C1) == 0;
                        if (v80 && v66 != 357)
                          goto LABEL_246;
                      }
                      else
                      {
                        v67 = v66 - 163 > 0x38 || ((1 << (v66 + 93)) & 0x18800000000140DLL) == 0;
                        if (v67 && v66 != 85)
                          goto LABEL_246;
                      }
                      goto LABEL_181;
                    }
                    if ((*(_BYTE *)(v62 + 3) & 1) == 0)
                    {
                      v62 = 0;
                      goto LABEL_104;
                    }
                  }
                  v62 = *(_QWORD *)(v62 + 8);
                  goto LABEL_104;
                }
              }
LABEL_72:
              if (v44 == 177)
              {
                if ((v40 & 0x80000000) != 0)
                  v50 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
                else
                  v50 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v40);
                v51 = *v50;
                if (!v51)
                  goto LABEL_181;
                while ((*(_BYTE *)(v51 + 3) & 1) != 0)
                {
                  v51 = *(_QWORD *)(v51 + 24);
                  if (!v51)
                    goto LABEL_181;
                }
                while (1)
                {
                  v51 = *(_QWORD *)(v51 + 24);
                  if (!v51)
                    break;
                  if ((*(_BYTE *)(v51 + 3) & 1) == 0)
                    goto LABEL_181;
                }
                v52 = *(_QWORD *)(v43 + 32);
                v53 = *(unsigned int *)(v52 + 36);
                if ((v53 & 0x80000000) != 0)
                  v54 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v53 & 0x7FFFFFFF) + 8);
                else
                  v54 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v53);
                v55 = *v54;
                if ((*(_BYTE *)(v55 + 3) & 1) == 0)
                  v55 = *(_QWORD *)(v55 + 24);
                v38 = v52 + 32;
                v43 = *(_QWORD *)(v55 + 8);
                v44 = **(unsigned __int16 **)(v43 + 16);
              }
              if (v44 == 184)
              {
                v56 = *(unsigned int *)(v38 + 4);
                if ((v56 & 0x80000000) != 0)
                  v57 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v56 & 0x7FFFFFFF) + 8);
                else
                  v57 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v56);
                v58 = *v57;
                if (!v58)
                  goto LABEL_181;
                while ((*(_BYTE *)(v58 + 3) & 1) != 0)
                {
                  v58 = *(_QWORD *)(v58 + 24);
                  if (!v58)
                    goto LABEL_181;
                }
                while (1)
                {
                  v58 = *(_QWORD *)(v58 + 24);
                  if (!v58)
                    break;
                  if ((*(_BYTE *)(v58 + 3) & 1) == 0)
                    goto LABEL_181;
                }
                v59 = *(_QWORD *)(v43 + 32);
                v60 = *(unsigned int *)(v59 + 36);
                if ((v60 & 0x80000000) != 0)
                  v61 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
                else
                  v61 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v60);
                v68 = *v61;
                if ((*(_BYTE *)(v68 + 3) & 1) == 0)
                  v68 = *(_QWORD *)(v68 + 24);
                v38 = v59 + 32;
                v43 = *(_QWORD *)(v68 + 8);
                v44 = **(unsigned __int16 **)(v43 + 16);
              }
              if (v44 == 179)
              {
                v69 = *(unsigned int *)(*(_QWORD *)(v43 + 32) + 36);
                if ((v69 & 0x80000000) != 0)
                  v70 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
                else
                  v70 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v69);
                v71 = *v70;
                if (v71
                  && ((*(_BYTE *)(v71 + 3) & 1) != 0
                   || (v71 = *(_QWORD *)(v71 + 24)) != 0 && (*(_BYTE *)(v71 + 3) & 1) != 0))
                {
                  v72 = *(_QWORD *)(v71 + 8);
                }
                else
                {
                  v72 = 0;
                }
                v73 = **(unsigned __int16 **)(v72 + 16);
                if (((v73 == 313) & ~(((v35 - 163) < 4) & (0xDu >> ((v35 + 93) & 0xF)))) != 0)
                  goto LABEL_180;
                v74 = *(unsigned int *)(v38 + 4);
                v75 = (uint64_t *)((v74 & 0x80000000) != 0
                                ? *(_QWORD *)(v39 + 24) + 16 * (v74 & 0x7FFFFFFF) + 8
                                : *(_QWORD *)(v39 + 272) + 8 * v74);
                v76 = *v75;
                if (v76)
                {
                  while ((*(_BYTE *)(v76 + 3) & 1) != 0)
                  {
                    v76 = *(_QWORD *)(v76 + 24);
                    if (!v76)
                      goto LABEL_142;
                  }
                  while (1)
                  {
                    v76 = *(_QWORD *)(v76 + 24);
                    if (!v76)
                      break;
                    if ((*(_BYTE *)(v76 + 3) & 1) == 0)
                      goto LABEL_142;
                  }
                }
                else
                {
LABEL_142:
                  v225 = &v228;
                  v226 = &v228;
                  *(_QWORD *)v227 = 8;
                  *(_DWORD *)&v227[8] = 0;
                  v77 = sub_1C4A59ECC(v43, (llvm::SmallPtrSetImplBase *)&v225, v39);
                  if (v226 != v225)
                    free(v226);
                  if (!v77)
                    goto LABEL_181;
                  v73 = **(unsigned __int16 **)(v72 + 16);
                }
                if (v73 != 313)
                {
                  v78 = *(_QWORD *)(a1 + 272);
                  if ((v69 & 0x80000000) != 0)
                    v79 = (uint64_t *)(*(_QWORD *)(v78 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
                  else
                    v79 = (uint64_t *)(*(_QWORD *)(v78 + 272) + 8 * v69);
                  v81 = *v79;
                  if (v81)
                  {
                    while ((*(_BYTE *)(v81 + 3) & 1) != 0)
                    {
                      v81 = *(_QWORD *)(v81 + 24);
                      if (!v81)
                        goto LABEL_163;
                    }
                    while (1)
                    {
                      v81 = *(_QWORD *)(v81 + 24);
                      if (!v81)
                        break;
                      if ((*(_BYTE *)(v81 + 3) & 1) == 0)
                        goto LABEL_163;
                    }
                  }
                  else
                  {
LABEL_163:
                    *((_BYTE *)&v194 + v37 - 1) = 1;
                  }
                  if (v73 > 271)
                  {
                    if ((v73 - 272) <= 0x3D
                      && ((1 << (v73 - 16)) & 0x20000040000000C1) != 0
                      || v73 == 357)
                    {
                      goto LABEL_181;
                    }
                  }
                  else if ((v73 - 163) <= 0x38
                         && ((1 << (v73 + 93)) & 0x18800000038540DLL) != 0
                         || v73 == 54
                         || v73 == 85)
                  {
                    goto LABEL_181;
                  }
                  if ((v73 & 0xFFFE) == 0x74)
                  {
                    v82 = *(unsigned int *)(v72 + 40);
                    if ((_DWORD)v82)
                    {
                      v83 = (_DWORD *)(*(_QWORD *)(v72 + 32) + 16);
                      while (*((_BYTE *)v83 - 16) != 17)
                      {
                        v83 += 8;
                        if (!--v82)
                          goto LABEL_180;
                      }
                      if (*v83 == 2131)
                        goto LABEL_181;
                    }
                  }
LABEL_180:
                  *((_BYTE *)&v194 + v37 - 1) = 1;
                }
              }
LABEL_181:
              ++v37;
              v36 = *(unsigned int *)(v33 + 40);
              if (v37 >= v36)
              {
                v85 = BYTE1(v194);
                v84 = BYTE2(v194);
                if (!(_BYTE)v194)
                  goto LABEL_194;
                goto LABEL_197;
              }
            }
          }
          v84 = 0;
          v85 = 0;
LABEL_194:
          if (!v85 && !v84)
          {
LABEL_196:
            v65 = 0;
            goto LABEL_246;
          }
LABEL_197:
          v86 = v193;
          v225 = v193;
          v226 = (void *)0x300000000;
          if (v36 >= 2)
          {
            v89 = 0;
            v90 = 36;
            while (1)
            {
              v91 = sub_1C4A59888(*(_DWORD *)(*(_QWORD *)(v33 + 32) + v90), *((_BYTE *)&v194 + v89), v34, *(_QWORD *)(a1 + 272), 1);
              if (!HIDWORD(v91))
                break;
              LODWORD(v219) = v91;
              LODWORD(v221) = 0;
              v92 = sub_1C4926708((uint64_t)&v225, (unint64_t)&v219, 1);
              v93 = (char *)v225 + 24 * v226;
              v94 = *(_OWORD *)v92;
              *((_QWORD *)v93 + 2) = *(_QWORD *)(v92 + 16);
              *(_OWORD *)v93 = v94;
              v87 = (_DWORD)v226 + 1;
              LODWORD(v226) = (_DWORD)v226 + 1;
              v95 = v89 + 2;
              ++v89;
              v90 += 32;
              if (v95 >= *(unsigned int *)(v33 + 40))
              {
                v88 = v225;
                v86 = v193;
                goto LABEL_203;
              }
            }
            v65 = 0;
            v86 = v193;
            goto LABEL_244;
          }
          v87 = 0;
          v88 = v193;
LABEL_203:
          v219 = 257;
          LODWORD(v220) = 0;
          v96 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, void *, _QWORD, _QWORD))(*v34 + 32))(v34, v35, &v219, 1, v88, v87, 0);
          v98 = v97;
          *(_WORD *)(v97 + 44) = *(_WORD *)(v97 + 44) & 0xC | *(_WORD *)(v33 + 44) & 0xFFF3;
          v99 = *(unsigned int *)(*(_QWORD *)(v33 + 32) + 4);
          v100 = *(_QWORD *)(a1 + 272);
          if ((v99 & 0x80000000) != 0)
            v101 = (uint64_t *)(*(_QWORD *)(v100 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
          else
            v101 = (uint64_t *)(*(_QWORD *)(v100 + 272) + 8 * v99);
          for (j = *v101; (*(_BYTE *)(j + 3) & 1) != 0; j = *(_QWORD *)(j + 24))
            ;
          v103 = *(_QWORD *)(j + 8);
          if ((v99 & 0x80000000) != 0)
            v104 = (uint64_t *)(*(_QWORD *)(v100 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
          else
            v104 = (uint64_t *)(*(_QWORD *)(v100 + 272) + 8 * v99);
          v105 = *v104;
          if (!v105)
            goto LABEL_222;
          while ((*(_BYTE *)(v105 + 3) & 1) != 0)
          {
            v105 = *(_QWORD *)(v105 + 24);
            if (!v105)
              goto LABEL_222;
          }
          while (1)
          {
            v105 = *(_QWORD *)(v105 + 24);
            if (!v105)
              break;
            if ((*(_BYTE *)(v105 + 3) & 1) == 0)
              goto LABEL_222;
          }
          if (**(_WORD **)(v103 + 16) == 178)
          {
            sub_1C4923194(*(_QWORD **)(a1 + 272), v103, *(_DWORD *)(*(_QWORD *)(v97 + 32) + 4), *(_QWORD **)(a1 + 280));
          }
          else
          {
LABEL_222:
            if ((v99 & 0x80000000) != 0)
              v106 = (uint64_t *)(*(_QWORD *)(v100 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
            else
              v106 = (uint64_t *)(*(_QWORD *)(v100 + 272) + 8 * v99);
            v107 = *v106;
            if (v107)
            {
              while ((*(_BYTE *)(v107 + 3) & 1) != 0)
              {
                v107 = *(_QWORD *)(v107 + 24);
                if (!v107)
                  goto LABEL_240;
              }
              while (1)
              {
                v107 = *(_QWORD *)(v107 + 24);
                if (!v107)
                  break;
                if ((*(_BYTE *)(v107 + 3) & 1) == 0)
                  goto LABEL_240;
              }
              if ((**(_WORD **)(v103 + 16) & 0xFFFE) == 0x74)
              {
                v108 = *(unsigned int *)(v103 + 40);
                if ((_DWORD)v108)
                {
                  v109 = (_DWORD *)(*(_QWORD *)(v103 + 32) + 16);
                  while (*((_BYTE *)v109 - 16) != 17)
                  {
                    v109 += 8;
                    if (!--v108)
                      goto LABEL_240;
                  }
                  if (*v109 == 2131)
                  {
                    LODWORD(__p) = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 272), 257, "", 0);
                    v110 = sub_1C5547D24(v34, 2131, (int *)&__p, 1, 0);
                    v112 = v111;
                    v113 = *(_DWORD *)(*(_QWORD *)(v98 + 32) + 4);
                    v220 = 0;
                    HIDWORD(v219) = v113;
                    LODWORD(v219) = 0;
                    v221 = 0;
                    v222 = 0;
                    llvm::MachineInstr::addOperand(v111, v110, (const llvm::MachineOperand *)&v219);
                    v200 = 129;
                    LODWORD(v201) = 0;
                    v219 = (uint64_t)v110;
                    v220 = v112;
                    v65 = 1;
                    LODWORD(v221) = 1;
                    (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*v34 + 32))(v34, 179, &v200, 1, &v219, 1, 0);
                    sub_1C4923194(*(_QWORD **)(a1 + 272), v103, *(_DWORD *)(*(_QWORD *)(v114 + 32) + 4), *(_QWORD **)(a1 + 280));
                    goto LABEL_244;
                  }
                }
              }
            }
LABEL_240:
            LODWORD(v200) = *(_DWORD *)(*(_QWORD *)(v33 + 32) + 4);
            LODWORD(v201) = 1;
            v219 = v96;
            v220 = (llvm::MachineInstr *)v97;
            LODWORD(v221) = 1;
            (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*v34 + 32))(v34, 179, &v200, 1, &v219, 1, 0);
            v115 = v33;
            if ((*(_BYTE *)v33 & 4) == 0)
            {
              v115 = v33;
              if ((*(_WORD *)(v33 + 44) & 8) != 0)
              {
                v115 = v33;
                do
                  v115 = *(_QWORD *)(v115 + 8);
                while ((*(_WORD *)(v115 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v33 + 24) + 40, v33, *(_QWORD *)(v115 + 8));
          }
          v65 = 1;
LABEL_244:
          if (v225 != v86)
            free(v225);
LABEL_246:
          v22 |= v65;
          v26 = v206;
        }
      }
    }
  }
  v22 = 0;
LABEL_281:
  v203 = v2;
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v225 = v227;
  v226 = (void *)0x1000000000;
  __p = 0;
  v198 = 0;
  v199 = 0;
  sub_1C486DB3C((char **)&__p, (uint64_t)&v203);
  v126 = (char *)__p;
  v125 = v198;
LABEL_282:
  if (v125 != v126)
  {
    v128 = *((_QWORD *)v125 - 1);
    v125 -= 8;
    v127 = v128;
    v129 = v128 + 48;
    for (k = *(_QWORD *)(v128 + 56); ; k = *(_QWORD *)(k + 8))
    {
      if (k == v129)
        goto LABEL_282;
      v131 = **(unsigned __int16 **)(k + 16);
      if ((v131 - 337) <= 1)
        break;
      if (v131 != 166 && v131 != 163 || !v202)
      {
LABEL_305:
        if ((*(_BYTE *)k & 4) != 0)
          continue;
        goto LABEL_308;
      }
      LODWORD(v135) = (v202 - 1) & ((k >> 4) ^ (k >> 9));
      v136 = (uint64_t *)(v200 + 16 * v135);
      v137 = *v136;
      if (k == *v136)
      {
LABEL_296:
        if (v136 != (uint64_t *)(v200 + 16 * v202))
        {
          v140 = (int)v226;
          if (v226 >= HIDWORD(v226))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, (uint64_t)v227, v226 + 1, 8);
            *((_QWORD *)v225 + v226) = k;
            v140 = (int)v226;
          }
          else
          {
            *((_QWORD *)v225 + v226) = k;
          }
          LODWORD(v226) = v140 + 1;
        }
      }
      else
      {
        v138 = 1;
        while (v137 != -4096)
        {
          v139 = v135 + v138++;
          v135 = v139 & (v202 - 1);
          v137 = *(_QWORD *)(v200 + 16 * v135);
          if (k == v137)
          {
            v136 = (uint64_t *)(v200 + 16 * v135);
            goto LABEL_296;
          }
        }
      }
LABEL_304:
      if (k)
        goto LABEL_305;
LABEL_308:
      while ((*(_WORD *)(k + 44) & 8) != 0)
        k = *(_QWORD *)(k + 8);
    }
    v132 = *(_QWORD *)(a1 + 272);
    v133 = *(unsigned int *)(*(_QWORD *)(k + 32) + 4);
    if ((v133 & 0x80000000) != 0)
      v134 = (uint64_t *)(*(_QWORD *)(v132 + 24) + 16 * (v133 & 0x7FFFFFFF) + 8);
    else
      v134 = (uint64_t *)(*(_QWORD *)(v132 + 272) + 8 * v133);
    v141 = *v134;
    if (!*v134)
      goto LABEL_305;
    while ((*(_BYTE *)(v141 + 3) & 1) != 0)
    {
      v141 = *(_QWORD *)(v141 + 24);
      if (!v141)
        goto LABEL_304;
    }
    v142 = *(_QWORD *)(v141 + 8);
LABEL_311:
    v143 = **(unsigned __int16 **)(v142 + 16);
    if (v143 == 166 || v143 == 163)
    {
      if (*(_QWORD *)(v142 + 24) == v127)
      {
LABEL_324:
        v148 = *(_QWORD *)(v141 + 8);
        while (1)
        {
          v141 = *(_QWORD *)(v141 + 24);
          if (!v141)
            goto LABEL_304;
          if ((*(_BYTE *)(v141 + 3) & 1) == 0)
          {
            v142 = *(_QWORD *)(v141 + 8);
            if (v142 != v148)
              goto LABEL_311;
          }
        }
      }
      v194 = v127;
      v204 = v142;
      sub_1C614481C(&v200, &v204, &v194, (uint64_t)&v219);
      if (!(_BYTE)v221)
        *(_QWORD *)(v219 + 8) = v194;
      v143 = **(unsigned __int16 **)(v142 + 16);
    }
    if (v143 == 178)
    {
      v144 = *(_QWORD *)(a1 + 272);
      v145 = *(unsigned int *)(*(_QWORD *)(v142 + 32) + 4);
      v146 = (uint64_t *)((v145 & 0x80000000) != 0
                       ? *(_QWORD *)(v144 + 24) + 16 * (v145 & 0x7FFFFFFF) + 8
                       : *(_QWORD *)(v144 + 272) + 8 * v145);
      v147 = *v146;
      if (*v146)
      {
        while ((*(_BYTE *)(v147 + 3) & 1) != 0)
        {
          v147 = *(_QWORD *)(v147 + 24);
          if (!v147)
            goto LABEL_324;
        }
        v149 = *(_QWORD *)(v147 + 8);
LABEL_330:
        v150 = **(unsigned __int16 **)(v149 + 16);
        if ((v150 == 166 || v150 == 163) && *(_QWORD *)(v149 + 24) != v127)
        {
          v194 = v127;
          v204 = v149;
          sub_1C614481C(&v200, &v204, &v194, (uint64_t)&v219);
          if (!(_BYTE)v221)
            *(_QWORD *)(v219 + 8) = v194;
          v149 = *(_QWORD *)(v147 + 8);
        }
        while (1)
        {
          v147 = *(_QWORD *)(v147 + 24);
          if (!v147)
            break;
          if ((*(_BYTE *)(v147 + 3) & 1) == 0 && *(_QWORD *)(v147 + 8) != v149)
          {
            v149 = *(_QWORD *)(v147 + 8);
            goto LABEL_330;
          }
        }
      }
    }
    goto LABEL_324;
  }
  v219 = 0;
  v220 = 0;
  v221 = v223;
  v222 = 0x400000000;
  v223[4] = v224;
  v223[5] = 0;
  v224[1] = 0;
  v224[0] = 0;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  v151 = v226;
  if ((_DWORD)v226)
  {
    v152 = (char *)v225;
    v153 = (char *)v225 + 8 * v226;
    do
    {
      v155 = *((_QWORD *)v153 - 1);
      v153 -= 8;
      v154 = v155;
      if (v202)
      {
        LODWORD(v157) = ((v154 >> 4) ^ (v154 >> 9)) & (v202 - 1);
        v156 = (uint64_t *)(v200 + 16 * v157);
        v158 = *v156;
        if (v154 != *v156)
        {
          v162 = 1;
          while (v158 != -4096)
          {
            v163 = v157 + v162++;
            v157 = v163 & (v202 - 1);
            v158 = *(_QWORD *)(v200 + 16 * v157);
            if (v154 == v158)
            {
              v156 = (uint64_t *)(v200 + 16 * v157);
              goto LABEL_346;
            }
          }
          v156 = (uint64_t *)(v200 + 16 * v202);
        }
      }
      else
      {
        v156 = (uint64_t *)v200;
      }
LABEL_346:
      v204 = v156[1];
      v159 = *v156;
      v160 = sub_1C6144E40(&v194, &v204)[1];
      if (!v160)
      {
        v160 = sub_1C484358C((uint64_t)&v219, 144, 3);
        *(_QWORD *)v160 = v160 + 16;
        *(_QWORD *)(v160 + 8) = 0x1000000000;
        sub_1C6144E40(&v194, &v204)[1] = v160;
      }
      v161 = *(unsigned int *)(v160 + 8);
      if (v161 >= *(_DWORD *)(v160 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v160, v160 + 16, v161 + 1, 8);
        *(_QWORD *)(*(_QWORD *)v160 + 8 * *(unsigned int *)(v160 + 8)) = v159;
        LODWORD(v161) = *(_DWORD *)(v160 + 8);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v160 + 8 * v161) = v159;
      }
      *(_DWORD *)(v160 + 8) = v161 + 1;
    }
    while (v153 != v152);
    v164 = v194;
    v151 = v196;
    if ((_DWORD)v195)
    {
      v165 = v194 + 16 * v196;
      if (v196)
      {
        v166 = 0;
        while ((*(_QWORD *)(v194 + v166) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v166 += 16;
          if (16 * v196 == v166)
          {
            v167 = v194 + 16 * v196;
            goto LABEL_366;
          }
        }
        v167 = v194 + v166;
      }
      else
      {
        v167 = v194;
      }
      goto LABEL_366;
    }
  }
  else
  {
    v164 = 0;
  }
  v167 = v164 + 16 * v151;
  v165 = v167;
LABEL_366:
  v168 = v164 + 16 * v151;
  if (v167 == v168)
  {
    v169 = 0;
  }
  else
  {
    v169 = 0;
    do
    {
      v170 = sub_1C61523C0(a1, *(_QWORD *)(v167 + 8), *(llvm::MachineBasicBlock **)v167);
      v171 = v167 + 16;
      v167 = v165;
      if (v171 != v165)
      {
        v167 = v171;
        while ((*(_QWORD *)v167 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v167 += 16;
          if (v167 == v165)
          {
            v167 = v165;
            break;
          }
        }
      }
      v169 |= v170;
    }
    while (v167 != v168);
    v164 = v194;
  }
  MEMORY[0x1CAA32FB4](v164, 8);
  sub_1C4926934((uint64_t)&v219);
  sub_1C4926AE8((uint64_t)&v219);
  if (__p)
  {
    v198 = (char *)__p;
    operator delete(__p);
  }
  if (v225 != v227)
    free(v225);
  MEMORY[0x1CAA32FB4](v200, 8);
  if (v205 != &v207)
    free(v205);
  *(_QWORD *)(a2 + 728) = 0;
  v172 = *(_QWORD *)(a1 + 272);
  v173 = *(_QWORD *)(a1 + 304);
  LOWORD(v226) = 1;
  *(_QWORD *)v227 = 0;
  *(_DWORD *)&v227[7] = 0;
  v225 = &off_1E7FAC570;
  v228 = v172;
  v229 = *(_OWORD *)(a1 + 288);
  v230 = v173;
  v174 = *(_QWORD *)(a1 + 320);
  v205 = &v225;
  v206 = 0;
  v207 = v174;
  v208 = 0;
  v124 = v22 | v169 | sub_1C54F59B4();
  v175 = v208;
  v208 = 0;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  *(_QWORD *)(a2 + 728) = &v209;
  *(_QWORD *)(a1 + 280) = &v210;
  v176 = *(_QWORD *)(a2 + 328);
  if (v176 != v192)
  {
LABEL_385:
    for (m = *(_QWORD *)(v176 + 56); ; m = *(_QWORD *)(m + 8))
    {
      if (m == v176 + 48)
      {
        v176 = *(_QWORD *)(v176 + 8);
        if (v176 == v192)
          break;
        goto LABEL_385;
      }
      v178 = *(_QWORD **)(a1 + 248);
      v178[5] = *(_QWORD *)(m + 24);
      v178[6] = m;
      v225 = (void *)a1;
      v226 = v178;
      v179 = **(unsigned __int16 **)(m + 16);
      v180 = (v179 - 163);
      if (v180 > 0x36)
        goto LABEL_391;
      if (((1 << (v179 + 93)) & 0x67) != 0)
      {
        v183 = sub_1C4A595BC(&v225, m, 1u);
        v184 = m;
        v185 = 2;
        goto LABEL_401;
      }
      if (v180 == 3)
      {
        v186 = sub_1C4A595BC(&v225, m, 1u);
        v183 = v186 | sub_1C4A595BC(&v225, m, 2u);
        goto LABEL_400;
      }
      if (((1 << (v179 + 93)) & 0x7800000027FE80) == 0)
      {
LABEL_391:
        if ((v179 - 310) > 0x2F || ((1 << (v179 - 54)) & 0x800000800001) == 0)
        {
          if (v179 != 135)
          {
            LOBYTE(v182) = 0;
            goto LABEL_403;
          }
          v183 = sub_1C4A595BC(&v225, m, 2u);
LABEL_400:
          v184 = m;
          v185 = 3;
LABEL_401:
          v182 = v183 | sub_1C4A595BC(&v225, v184, v185);
          goto LABEL_403;
        }
      }
      LOBYTE(v182) = sub_1C4A595BC(&v225, m, 1u);
LABEL_403:
      if ((*(_BYTE *)m & 4) == 0)
      {
        while ((*(_WORD *)(m + 44) & 8) != 0)
          m = *(_QWORD *)(m + 8);
      }
      LOBYTE(v124) = v124 | v182;
    }
  }
  *(_QWORD *)(a2 + 728) = 0;
  v209 = &off_1E7FA1778;
  v210 = (void (**)())&unk_1E7FA17D0;
  if (v216 != v218)
    free(v216);
  v210 = off_1E7FA1810;
  if (v212 != v211)
    free(v212);
  return v124 & 1;
}

const char *sub_1C4A5BDE4()
{
  return "AGX3ISelPrepare";
}

void sub_1C4A5BDF4(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 0x21uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

uint64_t sub_1C4A5BF28(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char v44;
  BOOL v45;
  unsigned int v46;
  int v47;
  _DWORD v48[18];
  _DWORD v49[4];
  uint64_t v50;

  v2 = a2;
  v50 = *MEMORY[0x1E0C80C00];
  v4 = 32;
  if (a2 == 1)
    v4 = 64;
  v6 = *a1;
  v5 = a1[1];
  v7 = *(_QWORD *)(*a1 + 32);
  v8 = *(unsigned int *)(v7 + v4 + 4);
  if ((v8 & 0x80000000) != 0)
    v9 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  else
    v9 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v8);
  v10 = *v9;
  if ((*(_BYTE *)(v10 + 3) & 1) == 0)
    v10 = *(_QWORD *)(v10 + 24);
  if (**(_WORD **)(*(_QWORD *)(v10 + 8) + 16) == 282)
    return 0;
  if ((v8 & 0x80000000) != 0)
    v11 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  else
    v11 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v8);
  v12 = *v11;
  if (v12)
  {
    v47 = v8;
    v46 = v2;
    if ((*(_BYTE *)(v12 + 3) & 1) != 0 || (v12 = *(_QWORD *)(v12 + 24)) != 0 && (*(_BYTE *)(v12 + 3) & 1) != 0)
    {
      v42 = *(_QWORD *)(v12 + 8);
      if (v42)
      {
        if (**(_WORD **)(v42 + 16) == 127 && *(_DWORD *)(v42 + 40) == 3)
        {
          v43 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v42 + 32) + 68), v5);
          if (v44)
            v45 = v43 < 5;
          else
            v45 = 0;
          if (v45)
            return 0;
          v6 = *a1;
          v5 = a1[1];
          v7 = *(_QWORD *)(*a1 + 32);
        }
      }
    }
    v2 = v46;
    LODWORD(v8) = v47;
  }
  v13 = *(unsigned int *)(v7 + 32 * v2 + 4);
  if ((v13 & 0x80000000) != 0)
    v14 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
  else
    v14 = (uint64_t *)(*(_QWORD *)(v5 + 272) + 8 * v13);
  v15 = *v14;
  if ((*(_BYTE *)(v15 + 3) & 1) == 0)
    v15 = *(_QWORD *)(v15 + 24);
  v16 = *(_QWORD *)(v15 + 8);
  if (**(_WORD **)(v16 + 16) != 47)
    return 0;
  v17 = (uint64_t *)((v13 & 0x80000000) != 0
                  ? *(_QWORD *)(v5 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v5 + 272) + 8 * v13);
  v18 = *v17;
  if (!v18)
    return 0;
  while ((*(_BYTE *)(v18 + 3) & 1) != 0)
  {
    v18 = *(_QWORD *)(v18 + 24);
    if (!v18)
      return 0;
  }
  while (1)
  {
    v18 = *(_QWORD *)(v18 + 24);
    if (!v18)
      break;
    if ((*(_BYTE *)(v18 + 3) & 1) == 0)
      return 0;
  }
  v19 = a1[2];
  v20 = *(_DWORD *)(v19 + 264);
  if (!v20)
    goto LABEL_48;
  v21 = *(_QWORD *)(v16 + 24);
  v22 = *(_QWORD *)(v19 + 248);
  v23 = v20 - 1;
  v24 = ((v21 >> 4) ^ (v21 >> 9)) & v23;
  v25 = *(_QWORD *)(v22 + 16 * v24);
  if (v21 != v25)
  {
    v26 = 1;
    while (v25 != -4096)
    {
      v27 = v24 + v26++;
      v24 = v27 & v23;
      v25 = *(_QWORD *)(v22 + 16 * v24);
      if (v21 == v25)
        goto LABEL_33;
    }
    goto LABEL_37;
  }
LABEL_33:
  v28 = *(_QWORD **)(v22 + 16 * v24 + 8);
  if (!v28)
  {
LABEL_37:
    v29 = 0;
    goto LABEL_38;
  }
  v29 = 0;
  do
  {
    v28 = (_QWORD *)*v28;
    ++v29;
  }
  while (v28);
LABEL_38:
  v30 = *(_QWORD *)(v6 + 24);
  v31 = ((v30 >> 4) ^ (v30 >> 9)) & v23;
  v32 = *(_QWORD *)(v22 + 16 * v31);
  if (v30 != v32)
  {
    v33 = 1;
    while (v32 != -4096)
    {
      v34 = v31 + v33++;
      v31 = v34 & v23;
      v32 = *(_QWORD *)(v22 + 16 * v31);
      if (v30 == v32)
        goto LABEL_42;
    }
    goto LABEL_46;
  }
LABEL_42:
  v35 = *(_QWORD **)(v22 + 16 * v31 + 8);
  if (!v35)
  {
LABEL_46:
    v36 = 0;
    goto LABEL_47;
  }
  v36 = 0;
  do
  {
    v35 = (_QWORD *)*v35;
    ++v36;
  }
  while (v35);
LABEL_47:
  if (v29 != v36)
    return 0;
LABEL_48:
  v37 = a1[3];
  v49[0] = *(_DWORD *)a1[4];
  v49[2] = 1;
  v38 = *(_QWORD *)(v16 + 32);
  v48[0] = *(_DWORD *)(v38 + 36);
  v48[4] = 0;
  v48[6] = *(_DWORD *)(v38 + 68);
  v48[10] = 0;
  v48[12] = v8;
  v48[16] = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v37 + 32))(v37, 56, v49, 1, v48, 3, *(unsigned __int16 *)a1[5] | 0x100000000);
  v39 = *a1;
  v40 = *a1;
  if ((*(_BYTE *)*a1 & 4) == 0)
  {
    v40 = *a1;
    if ((*(_WORD *)(v39 + 44) & 8) != 0)
    {
      v40 = *a1;
      do
        v40 = *(_QWORD *)(v40 + 8);
      while ((*(_WORD *)(v40 + 44) & 8) != 0);
    }
  }
  sub_1C487FE80(*(_QWORD *)(*a1 + 24) + 40, v39, *(_QWORD *)(v40 + 8));
  return 1;
}

uint64_t sub_1C4A5C2C0(uint64_t a1, int a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;

  if (a2 < 0)
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 8 * a2);
  v4 = *v3;
  if (!v4)
    return 0;
  if ((*(_BYTE *)(v4 + 3) & 1) == 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4 || (*(_BYTE *)(v4 + 3) & 1) == 0)
      return 0;
  }
  v6 = *(_QWORD *)(v4 + 8);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(a1 + 272) + 8 * a2;
  if (a2 < 0)
    v7 = *(_QWORD *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8;
  v8 = *(_QWORD *)v7;
  if ((*(_BYTE *)(*(_QWORD *)v7 + 3) & 1) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = **(_WORD **)(v9 + 16) == 121 && *(_QWORD *)(*(_QWORD *)(v9 + 32) + 48) != 0;
  result = 1;
  if (!v10)
  {
    v11 = **(unsigned __int16 **)(v6 + 16);
    if (v11 != 179)
    {
      v12 = *(_QWORD *)v7;
      if (*(_QWORD *)v7)
      {
        while ((*(_BYTE *)(v12 + 3) & 1) != 0)
        {
          v12 = *(_QWORD *)(v12 + 24);
          if (!v12)
            goto LABEL_21;
        }
        while (1)
        {
          v12 = *(_QWORD *)(v12 + 24);
          if (!v12)
            break;
          if ((*(_BYTE *)(v12 + 3) & 1) == 0)
            goto LABEL_21;
        }
        if (!a3)
        {
LABEL_37:
          v16 = 1;
          if (v11 > 271)
          {
            if (((v11 - 272) > 0x3D || ((1 << (v11 - 16)) & 0x20000040000000C1) == 0)
              && v11 != 357)
            {
              goto LABEL_52;
            }
          }
          else if (((v11 - 163) > 0x38
                  || ((1 << (v11 + 93)) & 0x18800000000140DLL) == 0)
                 && v11 != 85)
          {
LABEL_52:
            v16 = 0;
          }
          if (v11 == 182)
            v16 = 1;
          if (v11 == 183)
            return 1;
          else
            return v16;
        }
      }
      else
      {
LABEL_21:
        if ((a3 & 1) == 0)
          return 0;
      }
      v13 = *(_QWORD *)v7;
      if (!v13)
        goto LABEL_37;
      while ((*(_BYTE *)(v13 + 3) & 1) != 0)
      {
        v13 = *(_QWORD *)(v13 + 24);
        if (!v13)
          goto LABEL_37;
      }
      v14 = 0;
      v15 = *(_QWORD *)(v13 + 8);
LABEL_31:
      ++v14;
      while (1)
      {
        v13 = *(_QWORD *)(v13 + 24);
        if (!v13)
          break;
        if ((*(_BYTE *)(v13 + 3) & 1) == 0 && *(_QWORD *)(v13 + 8) != v15)
        {
          v15 = *(_QWORD *)(v13 + 8);
          goto LABEL_31;
        }
      }
      if ((v14 & 0xFFFFFFFE) == 0)
        goto LABEL_37;
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1C4A5C498(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4A5C588(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_1C4A5C500(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_1C4A5C588(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4A5C63C(a1, v6);
  v8 = 0;
  sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C4A5C63C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61526BC(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4A5C6F4()
{
  int v1;
  int *v2;
  int v3;
  __int128 v4;

  *(_QWORD *)&v4 = "Should enable CSE in AGX3 ISel Prepare";
  *((_QWORD *)&v4 + 1) = 38;
  v3 = 0;
  LOBYTE(v1) = 1;
  v2 = &v1;
  sub_1C6144A08((uint64_t)&unk_1ED7ED718, "enable-cse-in-agx3-iselprepare", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7ED718, &dword_1C475E000);
  *(_QWORD *)&v4 = "Should hoist instructions to allow forming fma.shff up to this hoist depth.";
  *((_QWORD *)&v4 + 1) = 75;
  v3 = 0;
  v1 = 4;
  v2 = &v1;
  sub_1C6144AF4((uint64_t)&unk_1ED7ED7D8, "fma-shff-hoist-depth-agx3", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7ED7D8, &dword_1C475E000);
}

void sub_1C4A5C7D4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, unsigned int a6@<W5>, int *a7@<X8>)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL4 v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  unint64_t *v45;
  void (**v46)(unint64_t *);
  void (**v47)(void);
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  unint64_t *v63;
  void (**v64)(unint64_t *);
  _BOOL4 v65;
  int v66;
  void (**v67)(void);
  int v68;
  void (**v69)(void);
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  const char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  _BOOL4 v80;
  unsigned int v81;
  char v82;
  unsigned int v83;
  int v84;
  int *v85;
  uint64_t **v86;
  char *v87;
  int v88;
  int v89;
  uint64_t *v90;
  int v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  int v95;
  uint64_t v96;
  uint64_t *v97;
  unsigned int v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL (*v102)(_BOOL8);
  uint64_t v103;
  int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t i;
  uint64_t *v109;
  uint64_t v110;
  uint64_t **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  int v115;
  int v116;
  uint64_t *v117;
  unint64_t *v118;
  uint64_t v119;
  unsigned int v120;
  char v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  BOOL v142;
  BOOL v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  unsigned int v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  const char *v162;
  unint64_t v163;
  const char *v164;
  unint64_t v165;
  const char *v166;
  unsigned int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  unint64_t v173;
  const char *v174;
  unsigned int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  unint64_t v183;
  const char *v184;
  unint64_t v185;
  int v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  const char *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t j;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  unint64_t v217;
  int v220;
  unsigned int v221;
  int v222;
  int v223;
  unint64_t v224;
  int v225;
  signed int v226;
  char v227;
  uint64_t v228;
  _QWORD v229[3];
  _QWORD *v230;
  _QWORD v231[3];
  _QWORD *v232;
  _QWORD v233[3];
  _QWORD *v234;
  uint64_t *v235;
  int v236;
  unint64_t v237;
  BOOL (*v238)(_BOOL8);
  BOOL (*v239)(_BOOL8);
  uint64_t v240;
  int v241;
  _DWORD v242[8];
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  _QWORD *v249;
  unsigned int v250;
  uint64_t v251;
  unint64_t *v252;
  uint64_t v253;
  uint64_t **v254;
  int v255;
  uint64_t *v256;
  unsigned int v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;

  v260 = *MEMORY[0x1E0C80C00];
  v217 = a6;
  v216 = (uint64_t *)((8 * a6) | 1);
  v237 = (unint64_t)v216;
  LODWORD(v238) = 0;
  sub_1C5544694((uint64_t)a3, &v237, 0);
  v12 = *(_DWORD *)(*(_QWORD *)(v11 + 32) + 4);
  *a7 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
  a7[1] = v12;
  *(_OWORD *)(a7 + 2) = xmmword_1C64169E0;
  a7[6] = 0;
  *((_QWORD *)a7 + 4) = a2;
  do
  {
    v13 = *a7;
    if ((int)v13 >= 0)
      v14 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v13);
    else
      v14 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
    v15 = *v14;
    if ((*(_BYTE *)(v15 + 3) & 1) == 0)
      v15 = *(_QWORD *)(v15 + 24);
    v16 = *(_QWORD *)(v15 + 8);
    v17 = **(unsigned __int16 **)(v16 + 16);
    if ((v17 - 80) < 2
      || v17 == 221
      || v17 == 19 && (*(_DWORD *)(*(_QWORD *)(v16 + 32) + 36) & 0x80000000) != 0)
    {
      *a7 = *(_DWORD *)(*(_QWORD *)(v16 + 32) + 36);
      v223 = 1;
    }
    else
    {
      v223 = 0;
    }
    sub_1C4A5FBA8(&v237, a7[1], a7[6], a2, (uint64_t)a3, 0);
    v18 = v238;
    if ((_BYTE)v238)
    {
      v19 = HIDWORD(v237);
      a7[1] = v237;
      a7[6] = v19;
    }
    v233[0] = &off_1E7FAC598;
    v233[1] = sub_1C4A5E2D8;
    v234 = v233;
    v20 = sub_1C554C050(*a7, a2);
    if (v21 && (v22 = v20) != 0)
    {
      v237 = 129;
      LODWORD(v238) = 0;
      sub_1C5544694((uint64_t)a3, &v237, 0);
      v24 = *(unsigned int *)(*(_QWORD *)(v23 + 32) + 4);
    }
    else
    {
      LODWORD(v235) = 0;
      LODWORD(v224) = 0;
      v25 = *a7;
      v237 = (unint64_t)&v235;
      v238 = (BOOL (*)(_BOOL8))&v224;
      LODWORD(v251) = v25;
      v26 = sub_1C49BC874((uint64_t)&v237, a2, (unsigned int *)&v251);
      if ((v26 & 1) == 0)
      {
        v27 = *a7;
        v237 = (unint64_t)&v235;
        v238 = (BOOL (*)(_BOOL8))&v224;
        LODWORD(v251) = v27;
        if ((sub_1C4957F68((uint64_t)&v237, a2, (unsigned int *)&v251) & 1) == 0)
        {
          v28 = *a7;
          v251 = (uint64_t)&v235;
          v252 = &v224;
          LODWORD(v256) = v28;
          if ((sub_1C4A6024C((uint64_t)&v251, a2, (unsigned int *)&v256) & 1) == 0)
            goto LABEL_46;
        }
      }
      v29 = *(_QWORD *)(a2 + 24);
      v30 = *(_QWORD *)(a2 + 272);
      if ((int)v235 >= 0)
        v31 = (uint64_t *)(v30 + 8 * v235);
      else
        v31 = (uint64_t *)(v29 + 16 * (v235 & 0x7FFFFFFF) + 8);
      v32 = *v31;
      if (v32)
      {
        if ((*(_BYTE *)(v32 + 3) & 1) != 0 || (v32 = *(_QWORD *)(v32 + 24)) != 0 && (*(_BYTE *)(v32 + 3) & 1) != 0)
        {
          v150 = *(_QWORD *)(v32 + 8);
          if (v150)
          {
            if (**(_WORD **)(v150 + 16) == 80 && *(_DWORD *)(v150 + 40) == 2)
              LODWORD(v235) = *(_DWORD *)(*(_QWORD *)(v150 + 32) + 36);
          }
        }
      }
      v33 = v224;
      v34 = (uint64_t *)(v29 + 16 * (v224 & 0x7FFFFFFF) + 8);
      v35 = (uint64_t *)(v30 + 8 * v224);
      if ((v224 & 0x80000000) == 0)
        v34 = v35;
      v36 = *v34;
      if (v36)
      {
        if ((*(_BYTE *)(v36 + 3) & 1) != 0 || (v36 = *(_QWORD *)(v36 + 24)) != 0 && (*(_BYTE *)(v36 + 3) & 1) != 0)
        {
          v134 = *(_QWORD *)(v36 + 8);
          if (v134)
          {
            if (**(_WORD **)(v134 + 16) == 80 && *(_DWORD *)(v134 + 40) == 2)
            {
              v33 = *(_DWORD *)(*(_QWORD *)(v134 + 32) + 36);
              LODWORD(v224) = v33;
            }
          }
        }
      }
      v37 = sub_1C554C050(v33, a2);
      if (!v38)
        goto LABEL_46;
      v24 = v235;
      if (v26)
        v22 = -v37;
      else
        v22 = v37;
    }
    v39 = *((_QWORD *)a7 + 2) + v22;
    v40 = v39 > -32769;
    if (v39 >= 0)
      v40 = v39 < 0x8000;
    if (v40)
    {
      *((_QWORD *)a7 + 2) = v39;
LABEL_36:
      *a7 = v24;
      v222 = 1;
      goto LABEL_47;
    }
    v41 = a7[1];
    v42 = *((_QWORD *)a7 + 4);
    v237 = (unint64_t)&off_1E816EFF0;
    v238 = sub_1C554C7E0;
    v240 = (uint64_t)&v237;
    v251 = (uint64_t)&off_1E816F038;
    v252 = (unint64_t *)sub_1C554C7F8;
    v254 = (uint64_t **)&v251;
    sub_1C554C3AC(v41, v42, (uint64_t)&v237, (uint64_t)&v251, 1, 0, &v256);
    v43 = (uint64_t *)v254;
    if (v254 == (uint64_t **)&v251)
    {
      v44 = (uint64_t *)(v251 + 32);
      v43 = &v251;
LABEL_39:
      ((void (*)(uint64_t *))*v44)(v43);
      goto LABEL_40;
    }
    if (v254)
    {
      v44 = *v254 + 5;
      goto LABEL_39;
    }
LABEL_40:
    v45 = (unint64_t *)v240;
    if ((unint64_t *)v240 == &v237)
    {
      v46 = (void (**)(unint64_t *))(v237 + 32);
      v45 = &v237;
LABEL_42:
      (*v46)(v45);
      goto LABEL_43;
    }
    if (v240)
    {
      v46 = (void (**)(unint64_t *))(*(_QWORD *)v240 + 40);
      goto LABEL_42;
    }
LABEL_43:
    if ((_BYTE)v259)
    {
      if (v257 > 0x40)
      {
        v137 = *(_DWORD *)v256;
        MEMORY[0x1CAA32F9C]();
        if (!v137)
        {
LABEL_244:
          v138 = 0;
          do
          {
            v139 = *(uint64_t *)((char *)&qword_1C676B4B8 + (_QWORD)v138);
            v237 = v139;
            if (!v234)
            {
              sub_1C485C2F0();
              goto LABEL_375;
            }
            if ((*(unsigned int (**)(_QWORD *, unint64_t *))(*v234 + 48))(v234, &v237))
            {
              v140 = v22 / v139;
              if (!(v22 % v139))
              {
                v141 = v22 <= 0 || (unint64_t)(v140 - 1) >= 0xFFFF;
                v142 = !v141;
                v143 = v140 > -32769 && v22 < 0;
                if (v143 || v142)
                {
                  v237 = 257;
                  LODWORD(v238) = 0;
                  sub_1C5544694((uint64_t)a3, &v237, v22 / (int)v139);
                  v145 = *(_DWORD *)(*(_QWORD *)(v148 + 32) + 4);
                  *((_QWORD *)a7 + 1) = (int)v139;
                  v222 = 1;
                  if (v22 < 0)
                    v149 = 1;
                  else
                    v149 = 2;
                  a7[6] = v149;
                  goto LABEL_268;
                }
              }
            }
            ++v138;
          }
          while (v138 != (_QWORD *)32);
          if ((unint64_t)v22 >= 0xFFFFFFFF80000001)
          {
            v237 = 257;
            LODWORD(v238) = 0;
            sub_1C5544694((uint64_t)a3, &v237, v22);
            v145 = *(_DWORD *)(*(_QWORD *)(v144 + 32) + 4);
            v222 = 1;
            a7[6] = 1;
LABEL_268:
            *a7 = v24;
            a7[1] = v145;
            goto LABEL_47;
          }
          if ((unint64_t)(v22 - 1) > 0xFFFFFFFE)
            goto LABEL_46;
          v237 = 257;
          LODWORD(v238) = 0;
          sub_1C5544694((uint64_t)a3, &v237, v22);
          v147 = *(_DWORD *)(*(_QWORD *)(v146 + 32) + 4);
          a7[6] = 2;
          a7[1] = v147;
          goto LABEL_36;
        }
      }
      else if (!((uint64_t)((_QWORD)v256 << -(char)v257) >> -(char)v257))
      {
        goto LABEL_244;
      }
    }
LABEL_46:
    v222 = 0;
LABEL_47:
    if (v234 == v233)
    {
      v47 = (void (**)(void))(v233[0] + 32);
      goto LABEL_51;
    }
    if (v234)
    {
      v47 = (void (**)(void))(*v234 + 40);
LABEL_51:
      (*v47)();
    }
    v228 = 0;
    v48 = *a7;
    v237 = (unint64_t)&v228 + 4;
    v238 = (BOOL (*)(_BOOL8))&v228;
    LODWORD(v251) = v48;
    v49 = sub_1C49BC874((uint64_t)&v237, a2, (unsigned int *)&v251);
    if ((v49 & 1) == 0)
    {
      v50 = *a7;
      v237 = (unint64_t)&v228 + 4;
      v238 = (BOOL (*)(_BOOL8))&v228;
      LODWORD(v251) = v50;
      if ((sub_1C4957F68((uint64_t)&v237, a2, (unsigned int *)&v251) & 1) == 0)
      {
        v51 = *a7;
        v251 = (uint64_t)&v228 + 4;
        v252 = (unint64_t *)&v228;
        LODWORD(v256) = v51;
        if ((sub_1C4A6024C((uint64_t)&v251, a2, (unsigned int *)&v256) & 1) == 0)
        {
LABEL_71:
          v65 = 0;
          goto LABEL_72;
        }
      }
    }
    v52 = *(_QWORD *)(a2 + 24);
    v53 = *(_QWORD *)(a2 + 272);
    if (v228 >= 0)
      v54 = (uint64_t *)(v53 + 8 * HIDWORD(v228));
    else
      v54 = (uint64_t *)(v52 + 16 * (HIDWORD(v228) & 0x7FFFFFFF) + 8);
    v55 = *v54;
    if (v55)
    {
      if ((*(_BYTE *)(v55 + 3) & 1) != 0 || (v55 = *(_QWORD *)(v55 + 24)) != 0 && (*(_BYTE *)(v55 + 3) & 1) != 0)
      {
        v135 = *(_QWORD *)(v55 + 8);
        if (v135)
        {
          if (**(_WORD **)(v135 + 16) == 80 && *(_DWORD *)(v135 + 40) == 2)
            HIDWORD(v228) = *(_DWORD *)(*(_QWORD *)(v135 + 32) + 36);
        }
      }
    }
    v56 = (uint64_t *)(v52 + 16 * (v228 & 0x7FFFFFFF) + 8);
    v57 = (uint64_t *)(v53 + 8 * v228);
    if ((int)v228 >= 0)
      v56 = v57;
    v58 = *v56;
    if (v58)
    {
      if ((*(_BYTE *)(v58 + 3) & 1) != 0 || (v58 = *(_QWORD *)(v58 + 24)) != 0 && (*(_BYTE *)(v58 + 3) & 1) != 0)
      {
        v136 = *(_QWORD *)(v58 + 8);
        if (v136)
        {
          if (**(_WORD **)(v136 + 16) == 80 && *(_DWORD *)(v136 + 40) == 2)
            LODWORD(v228) = *(_DWORD *)(*(_QWORD *)(v136 + 32) + 36);
        }
      }
    }
    v59 = a7[1];
    v60 = *((_QWORD *)a7 + 4);
    v237 = (unint64_t)&off_1E816EFF0;
    v238 = sub_1C554C7E0;
    v240 = (uint64_t)&v237;
    v251 = (uint64_t)&off_1E816F038;
    v252 = (unint64_t *)sub_1C554C7F8;
    v254 = (uint64_t **)&v251;
    sub_1C554C3AC(v59, v60, (uint64_t)&v237, (uint64_t)&v251, 1, 0, &v256);
    v61 = (uint64_t *)v254;
    if (v254 == (uint64_t **)&v251)
    {
      v62 = (uint64_t *)(v251 + 32);
      v61 = &v251;
LABEL_64:
      ((void (*)(uint64_t *))*v62)(v61);
      goto LABEL_65;
    }
    if (v254)
    {
      v62 = *v254 + 5;
      goto LABEL_64;
    }
LABEL_65:
    v63 = (unint64_t *)v240;
    if ((unint64_t *)v240 == &v237)
    {
      v64 = (void (**)(unint64_t *))(v237 + 32);
      v63 = &v237;
LABEL_67:
      (*v64)(v63);
      goto LABEL_68;
    }
    if (v240)
    {
      v64 = (void (**)(unint64_t *))(*(_QWORD *)v240 + 40);
      goto LABEL_67;
    }
LABEL_68:
    if (!(_BYTE)v259)
      goto LABEL_71;
    if (v257 > 0x40)
    {
      v104 = *(_DWORD *)v256;
      MEMORY[0x1CAA32F9C]();
      if (v104)
        goto LABEL_71;
    }
    else if (((uint64_t)((_QWORD)v256 << -(uint64_t)v257) >> -(uint64_t)v257))
    {
      goto LABEL_71;
    }
    if (!v49)
    {
      sub_1C4A5FBA8(&v256, v228, a7[6], a2, (uint64_t)a3, 0);
      if ((_BYTE)v257)
      {
        v115 = HIDWORD(v228);
        v116 = (int)v256;
        a7[6] = HIDWORD(v256);
      }
      else
      {
        sub_1C4A5FBA8(&v235, HIDWORD(v228), a7[6], a2, (uint64_t)a3, 0);
        if ((_BYTE)v236)
        {
          v115 = v228;
          v116 = (int)v235;
          a7[6] = HIDWORD(v235);
          LOBYTE(v236) = 0;
        }
        else
        {
          v128 = v228;
          v224 = 0;
          v129 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v228 & 0x7FFFFFFF) + 8);
          if ((int)v228 >= 0)
            v129 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v228);
          v130 = *v129;
          if ((*(_BYTE *)(v130 + 3) & 1) == 0)
            v130 = *(_QWORD *)(v130 + 24);
          if (**(_WORD **)(*(_QWORD *)(v130 + 8) + 16) == 127
            || (v237 = 0,
                v238 = (BOOL (*)(_BOOL8))&v224,
                sub_1C4A602DC((uint64_t)&v237, a2, v228))
            || (v251 = (uint64_t)&v224, v252 = 0, sub_1C4A60454((uint64_t **)&v251, a2, v128)))
          {
            v116 = v228;
            v115 = HIDWORD(v228);
          }
          else
          {
            v116 = HIDWORD(v228);
            v224 = 0;
            v131 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (HIDWORD(v228) & 0x7FFFFFFF) + 8);
            if (v228 >= 0)
              v131 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * HIDWORD(v228));
            v132 = *v131;
            if ((*(_BYTE *)(v132 + 3) & 1) == 0)
              v132 = *(_QWORD *)(v132 + 24);
            if (**(_WORD **)(*(_QWORD *)(v132 + 8) + 16) != 127)
            {
              v237 = 0;
              v238 = (BOOL (*)(_BOOL8))&v224;
              if (sub_1C4A602DC((uint64_t)&v237, a2, SHIDWORD(v228)))
              {
                v116 = HIDWORD(v228);
              }
              else
              {
                v251 = (uint64_t)&v224;
                v252 = 0;
                v133 = sub_1C4A60454((uint64_t **)&v251, a2, v116);
                v116 = HIDWORD(v228);
                if (!v133)
                {
                  v115 = HIDWORD(v228);
                  v116 = v228;
                  goto LABEL_202;
                }
              }
            }
            v115 = v228;
          }
        }
      }
LABEL_202:
      *a7 = v115;
      a7[1] = v116;
      v65 = 1;
      goto LABEL_72;
    }
    sub_1C4A5FBA8(&v226, v228, a7[6], a2, (uint64_t)a3, 0);
    if (!v227)
      goto LABEL_71;
    LODWORD(v228) = v226;
    if (v226 >= 0)
      v105 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v226);
    else
      v105 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v226 & 0x7FFFFFFF) + 8);
    v106 = *v105;
    if ((*(_BYTE *)(v106 + 3) & 1) == 0)
      v106 = *(_QWORD *)(v106 + 24);
    v107 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v106 + 8) + 24) + 32);
    v238 = (BOOL (*)(_BOOL8))v242;
    v239 = (BOOL (*)(_BOOL8))v242;
    v240 = 4;
    v241 = 0;
    v237 = (unint64_t)off_1E816DB00;
    v243 = v107;
    v244 = *(_QWORD *)(v107 + 40);
    v245 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v107 + 16) + 120))(*(_QWORD *)(v107 + 16));
    v246 = *(_QWORD *)(*(_QWORD *)v107 + 40) + 272;
    v247 = 6;
    v248 = 1;
    for (i = 120; i != 760; i += 40)
      *(_DWORD *)((char *)&v237 + i) = -1;
    if ((int)v228 >= 0)
      v109 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v228);
    else
      v109 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v228 & 0x7FFFFFFF) + 8);
    v110 = *v109;
    if ((*(_BYTE *)(v110 + 3) & 1) == 0)
      v110 = *(_QWORD *)(v110 + 24);
    sub_1C54EB4A0((uint64_t)&v237, (const char *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v110 + 8) + 32) + 4), (uint64_t)&v256);
    v111 = &v256;
    if (v257 >= 0x41)
      v111 = (uint64_t **)&v256[(v257 - 1) >> 6];
    v112 = (1 << (v257 - 1)) & (unint64_t)*v111;
    v65 = v112 != 0;
    if (v112)
    {
      if ((v228 & 0x80000000) != 0 && (v113 = v228 & 0x7FFFFFFF, v113 < *(_DWORD *)(a2 + 432)))
        v114 = *(uint64_t **)(*(_QWORD *)(a2 + 424) + 8 * v113);
      else
        v114 = 0;
      v224 = (unint64_t)v114;
      v225 = 0;
      v117 = (uint64_t *)sub_1C5544694((uint64_t)a3, &v224, 0);
      v235 = v114;
      v236 = 0;
      v251 = (uint64_t)v117;
      v252 = v118;
      LODWORD(v253) = 1;
      LODWORD(v254) = v228;
      v255 = 0;
      (*(void (**)(uint64_t *, uint64_t, uint64_t **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 46, &v235, 1, &v251, 2, 0);
      v120 = *(_DWORD *)(*(_QWORD *)(v119 + 32) + 4);
      *a7 = HIDWORD(v228);
      a7[1] = v120;
      a7[6] = 1;
    }
    if (v259 >= 0x41 && v258)
      MEMORY[0x1CAA32F9C](v258, 0x1000C8000313F17);
    if (v257 >= 0x41 && v256)
      MEMORY[0x1CAA32F9C](v256, 0x1000C8000313F17);
    v237 = (unint64_t)off_1E816DB00;
    v121 = v248;
    if ((v248 & 1) != 0)
    {
      v122 = &v249;
      v123 = 16;
      goto LABEL_180;
    }
    v123 = v250;
    if (v250)
    {
      v122 = v249;
LABEL_180:
      v124 = 40 * v123;
      v125 = v122 + 2;
      do
      {
        if (*((_DWORD *)v125 - 4) <= 0xFFFFFFFD)
        {
          if (*((_DWORD *)v125 + 4) >= 0x41u)
          {
            v127 = v125[1];
            if (v127)
              MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
          }
          if (*(_DWORD *)v125 >= 0x41u)
          {
            v126 = *(v125 - 1);
            if (v126)
              MEMORY[0x1CAA32F9C](v126, 0x1000C8000313F17);
          }
        }
        v125 += 5;
        v124 -= 40;
      }
      while (v124);
      v121 = v248;
    }
    if ((v121 & 1) == 0)
      MEMORY[0x1CAA32FB4](v249, 8);
    v237 = (unint64_t)off_1E7FA1810;
    if (v239 != v238)
      free(v239);
LABEL_72:
    v231[0] = &off_1E7FAC598;
    v231[1] = sub_1C4A5E2D8;
    v232 = v231;
    v66 = sub_1C4A5E2F4((uint64_t)a7, a2, (uint64_t)a3, v231);
    if (v232 == v231)
    {
      v67 = (void (**)(void))(v231[0] + 32);
    }
    else
    {
      if (!v232)
        goto LABEL_77;
      v67 = (void (**)(void))(*v232 + 40);
    }
    (*v67)();
LABEL_77:
    v229[0] = &off_1E7FAC598;
    v229[1] = sub_1C4A5E2D8;
    v230 = v229;
    v68 = sub_1C4A5EAB4((uint64_t)a7, a2, (uint64_t)v229);
    if (v230 == v229)
    {
      v69 = (void (**)(void))(v229[0] + 32);
      goto LABEL_81;
    }
    if (v230)
    {
      v69 = (void (**)(void))(*v230 + 40);
LABEL_81:
      (*v69)();
    }
    v70 = sub_1C4A5ED34((uint64_t)a7, a2);
    v71 = a7[1];
    if ((v71 & 0x80000000) != 0 && (v72 = v71 & 0x7FFFFFFF, v72 < *(_DWORD *)(a2 + 432)))
      v73 = *(uint64_t **)(*(_QWORD *)(a2 + 424) + 8 * v72);
    else
      v73 = 0;
    v251 = (uint64_t)v73;
    v75 = sub_1C4825F50((unint64_t *)&v251);
    if ((_DWORD)v74 == 1)
    if (v75 <= 0x3F)
      goto LABEL_97;
    sub_1C4A5FBA8(&v237, a7[1], a7[6], a2, (uint64_t)a3, 1);
    if ((_BYTE)v238)
      goto LABEL_97;
    if (*a7 < 0 && (v76 = *a7 & 0x7FFFFFFF, v76 < *(_DWORD *)(a2 + 432)))
      v77 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v76);
    else
      v77 = 0;
    v237 = v77;
    v79 = sub_1C4825F50(&v237);
    if ((_DWORD)v78 == 1)
    if (v79 < 0x40)
    {
LABEL_97:
      v80 = 0;
    }
    else
    {
      v226 = 0;
      HIDWORD(v228) = 0;
      v81 = a7[1];
      v237 = (unint64_t)&v226;
      v238 = (BOOL (*)(_BOOL8))((char *)&v228 + 4);
      LODWORD(v251) = v81;
      v82 = sub_1C4957F68((uint64_t)&v237, a2, (unsigned int *)&v251);
      if ((v82 & 1) != 0
        || (v83 = a7[1],
            v237 = (unint64_t)&v226,
            v238 = (BOOL (*)(_BOOL8))((char *)&v228 + 4),
            LODWORD(v251) = v83,
            v80 = 0,
            sub_1C49BC874((uint64_t)&v237, a2, (unsigned int *)&v251))
        && *((_QWORD *)a7 + 1) == 1)
      {
        sub_1C4A5FBA8(&v235, v226, a7[6], a2, (uint64_t)a3, 1);
        sub_1C4A5FBA8(&v224, HIDWORD(v228), a7[6], a2, (uint64_t)a3, 1);
        v84 = v236 | v225;
        v80 = v84 != 0;
        if (v84)
        {
          v85 = (int *)&v228 + 1;
          if (!(_BYTE)v236)
            v85 = &v226;
          v220 = *v85;
          if ((_BYTE)v236)
            v86 = &v235;
          else
            v86 = (uint64_t **)&v224;
          v221 = *(_DWORD *)v86;
          v87 = (char *)&v224 + 4;
          if ((_BYTE)v236)
            v87 = (char *)&v235 + 4;
          a7[6] = *(_DWORD *)v87;
          *a7 = sub_1C4A605D0(*a7, a2, (uint64_t)a3);
          a7[1] = sub_1C4A605D0(a7[1], a2, (uint64_t)a3);
          if ((v82 & 1) != 0)
          {
            v88 = v220;
            v89 = sub_1C4A605D0(*a7, a2, (uint64_t)a3);
            *a7 = v89;
            if (v89 < 0 && (v89 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432))
              v90 = *(uint64_t **)(*(_QWORD *)(a2 + 424) + 8 * (v89 & 0x7FFFFFFF));
            else
              v90 = 0;
            v93 = *((_QWORD *)a7 + 1);
            if (v93 != 1)
            {
              v94 = v90;
              v95 = sub_1C4A60708((uint64_t)a3, v220, (unint64_t)v90, v93);
              v90 = v94;
              v88 = v95;
              v89 = *a7;
            }
            v251 = (uint64_t)v90;
            LODWORD(v252) = 0;
            LODWORD(v237) = v89;
            LODWORD(v239) = 0;
            LODWORD(v240) = v88;
            v242[0] = 0;
            (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 45, &v251, 1, &v237, 2, 0);
LABEL_129:
            *a7 = *(_DWORD *)(*(_QWORD *)(v96 + 32) + 4);
            v98 = v221;
          }
          else
          {
            v91 = *a7;
            if (v220 == HIDWORD(v228))
            {
              if (v91 < 0 && (v91 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432))
                v92 = *(uint64_t **)(*(_QWORD *)(a2 + 424) + 8 * (v91 & 0x7FFFFFFF));
              else
                v92 = 0;
              v251 = (uint64_t)v92;
              LODWORD(v252) = 0;
              LODWORD(v237) = v91;
              LODWORD(v239) = 0;
              LODWORD(v240) = v220;
              v242[0] = 0;
              (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 46, &v251, 1, &v237, 2, 0);
              goto LABEL_129;
            }
            if (v91 < 0 && (v91 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432))
              v97 = *(uint64_t **)(*(_QWORD *)(a2 + 424) + 8 * (v91 & 0x7FFFFFFF));
            else
              v97 = 0;
            v251 = (uint64_t)v97;
            LODWORD(v252) = 0;
            LODWORD(v237) = v91;
            LODWORD(v239) = 0;
            LODWORD(v240) = v220;
            v242[0] = 0;
            (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 45, &v251, 1, &v237, 2, 0);
            v99 = 0;
            *a7 = *(_DWORD *)(*(_QWORD *)(v100 + 32) + 4);
            if ((v221 & 0x80000000) != 0)
            {
              if ((v221 & 0x7FFFFFFF) >= *(_DWORD *)(a2 + 432))
                v99 = 0;
              else
                v99 = *(uint64_t **)(*(_QWORD *)(a2 + 424) + 8 * (v221 & 0x7FFFFFFF));
            }
            v256 = v99;
            v257 = 0;
            v101 = sub_1C5544694((uint64_t)a3, (unint64_t *)&v256, 0);
            v251 = (uint64_t)v99;
            LODWORD(v252) = 0;
            v237 = v101;
            v238 = v102;
            LODWORD(v239) = 1;
            LODWORD(v240) = v221;
            v242[0] = 0;
            (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 46, &v251, 1, &v237, 2, 0);
            v98 = *(_DWORD *)(*(_QWORD *)(v103 + 32) + 4);
          }
          a7[1] = v98;
        }
      }
    }
  }
  while ((_DWORD)v18 || ((v223 | v222 | v65 | v66 | v68 | v70 | v80) & 1) != 0);
  v235 = a5;
  if (a4 == 1)
  {
    a7[6] = 0;
    if (*a7 < 0 && (v153 = *a7 & 0x7FFFFFFF, v153 < *(_DWORD *)(a2 + 432)))
      v154 = *(uint64_t **)(*(_QWORD *)(a2 + 424) + 8 * v153);
    else
      v154 = 0;
    v256 = v154;
    v155 = a7[1];
    if ((v155 & 0x80000000) != 0 && (v156 = v155 & 0x7FFFFFFF, v156 < *(_DWORD *)(a2 + 432)))
      v157 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v156);
    else
      v157 = 0;
    v224 = v157;
    v158 = sub_1C4825F50((unint64_t *)&v256);
    v160 = v159;
    if (v158 != sub_1C4825F50((unint64_t *)&v235) || v160 != v161)
      goto LABEL_290;
    v163 = sub_1C4825F50(&v224);
    if ((_DWORD)v162 == 1)
    if (v163 > v217)
    {
LABEL_290:
      v165 = sub_1C4825F50((unint64_t *)&v256);
      if ((_DWORD)v164 == 1)
      if (v165 >= 0x20)
      {
        if (((unint64_t)v256 & 0xFFFFFFFFFFFFFFF9) != 0 && (v256 & 6) == 2)
        {
          v167 = sub_1C4825F50((unint64_t *)&v256);
          if ((_DWORD)v166 == 1)
          v251 = (8 * v167) | 1;
          LODWORD(v252) = 0;
          LODWORD(v237) = *a7;
          LODWORD(v239) = 0;
          sub_1C5546EF4(a3, &v251, (int *)&v237);
          v169 = *(_DWORD *)(*(_QWORD *)(v168 + 32) + 4);
          *a7 = v169;
        }
        else
        {
          v169 = *a7;
        }
        v251 = (uint64_t)v235;
        LODWORD(v252) = 0;
        LODWORD(v237) = v169;
        LODWORD(v239) = 0;
        (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 119, &v251, 1, &v237, 1, 0);
        *a7 = *(_DWORD *)(*(_QWORD *)(v171 + 32) + 4);
      }
      v173 = sub_1C4825F50(&v224);
      if ((_DWORD)v172 == 1)
      if (v173 > v217)
      {
        if ((v224 & 0xFFFFFFFFFFFFFFF9) != 0 && (v224 & 6) == 2)
        {
          v175 = sub_1C4825F50(&v224);
          if ((_DWORD)v174 == 1)
          v251 = (8 * v175) | 1;
          LODWORD(v252) = 0;
          LODWORD(v237) = a7[1];
          LODWORD(v239) = 0;
          sub_1C5546EF4(a3, &v251, (int *)&v237);
          v177 = *(_DWORD *)(*(_QWORD *)(v176 + 32) + 4);
          a7[1] = v177;
        }
        else
        {
          v177 = a7[1];
        }
        v178 = sub_1C554C050(v177, a2);
        if (v179)
          v180 = v178;
        else
          v180 = 0;
        if (!v179 || v180 < 0)
        {
          v251 = 129;
          LODWORD(v252) = 0;
          LODWORD(v237) = a7[1];
          LODWORD(v239) = 0;
          (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 119, &v251, 1, &v237, 1, 0);
        }
        else
        {
          v237 = 129;
          LODWORD(v238) = 0;
          sub_1C5544694((uint64_t)a3, &v237, (__int16)v180);
        }
        a7[1] = *(_DWORD *)(*(_QWORD *)(v181 + 32) + 4);
      }
    }
  }
  else if (!a4)
  {
    if (*a7 < 0)
    {
      v170 = *a7 & 0x7FFFFFFF;
      v152 = v217;
      if (v170 >= *(_DWORD *)(a2 + 432))
        v151 = 0;
      else
        v151 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v170);
    }
    else
    {
      v151 = 0;
      v152 = v217;
    }
    v237 = v151;
    v183 = sub_1C4825F50(&v237);
    if ((_DWORD)v182 == 1)
    v185 = sub_1C4825F50((unint64_t *)&v235);
    if ((_DWORD)v184 == 1)
    if (v183 < v185)
    {
      v186 = sub_1C4A605D0(*a7, a2, (uint64_t)a3);
      *a7 = v186;
      v251 = (uint64_t)v235;
      LODWORD(v252) = 0;
      LODWORD(v237) = v186;
      LODWORD(v239) = 0;
      (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 126, &v251, 1, &v237, 1, 0);
      *a7 = *(_DWORD *)(*(_QWORD *)(v187 + 32) + 4);
    }
    v188 = a7[1];
    if ((v188 & 0x80000000) != 0 && (v189 = v188 & 0x7FFFFFFF, v189 < *(_DWORD *)(a2 + 432)))
      v190 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v189);
    else
      v190 = 0;
    v224 = v190;
    v192 = sub_1C4825F50(&v224);
    if ((_DWORD)v191 == 1)
    if (v192 > v152)
    {
      v193 = a7[1];
      if ((int)v193 >= 0)
        v194 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v193);
      else
        v194 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v193 & 0x7FFFFFFF) + 8);
      v195 = *v194;
      if ((*(_BYTE *)(v195 + 3) & 1) == 0)
        v195 = *(_QWORD *)(v195 + 24);
      v196 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v195 + 8) + 24) + 32);
      v239 = (BOOL (*)(_BOOL8))v242;
      v240 = 4;
      v241 = 0;
      v237 = (unint64_t)off_1E816DB00;
      v238 = (BOOL (*)(_BOOL8))v242;
      v243 = v196;
      v244 = *(_QWORD *)(v196 + 40);
      v245 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v196 + 16) + 120))(*(_QWORD *)(v196 + 16));
      v246 = *(_QWORD *)(*(_QWORD *)v196 + 40) + 272;
      v247 = 6;
      v248 = 1;
      v138 = &v249;
      for (j = 120; j != 760; j += 40)
        *(_DWORD *)((char *)&v237 + j) = -1;
      v198 = a7[1];
      if ((int)v198 >= 0)
        v199 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v198);
      else
        v199 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v198 & 0x7FFFFFFF) + 8);
      v200 = *v199;
      if ((*(_BYTE *)(v200 + 3) & 1) == 0)
        v200 = *(_QWORD *)(v200 + 24);
      sub_1C54EB4A0((uint64_t)&v237, (const char *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v200 + 8) + 32) + 4), (uint64_t)&v251);
      v24 = v251;
      LODWORD(v22) = (_DWORD)v252;
      v201 = -1 << v152;
      v202 = v251;
      if (v252 >= 0x41)
        v202 = *(_QWORD *)v251;
      v18 = v253;
      v203 = v254;
      if ((v201 & ~v202) != 0 || a7[6] == 1)
      {
        v205 = *((_QWORD *)a7 + 1);
        if (v205 != 1)
        {
          a7[1] = sub_1C4A60708((uint64_t)a3, a7[1], v224, v205);
          *((_QWORD *)a7 + 1) = 1;
        }
        *a7 = sub_1C4A605D0(*a7, a2, (uint64_t)a3);
        v206 = sub_1C4A605D0(a7[1], a2, (uint64_t)a3);
        a7[1] = v206;
        v207 = *a7;
        v256 = v235;
        v257 = 0;
        LODWORD(v251) = v207;
        LODWORD(v253) = 0;
        LODWORD(v254) = v206;
        v255 = 0;
        (*(void (**)(uint64_t *, uint64_t, uint64_t **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 45, &v256, 1, &v251, 2, 0);
        *a7 = *(_DWORD *)(*(_QWORD *)(v208 + 32) + 4);
        v251 = (uint64_t)v235;
        LODWORD(v252) = 0;
        sub_1C5544694((uint64_t)a3, (unint64_t *)&v251, 0);
        a7[1] = *(_DWORD *)(*(_QWORD *)(v209 + 32) + 4);
      }
      else
      {
        v256 = v216;
        v257 = 0;
        LODWORD(v251) = a7[1];
        LODWORD(v253) = 0;
        (*(void (**)(uint64_t *, uint64_t, uint64_t **, uint64_t, uint64_t *, uint64_t, _QWORD))(*a3 + 32))(a3, 119, &v256, 1, &v251, 1, 0);
        a7[1] = *(_DWORD *)(*(_QWORD *)(v204 + 32) + 4);
        a7[6] = 2;
      }
      if (v203 >= 0x41)
      {
LABEL_375:
        if (v18)
          MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
      }
      if (v22 >= 0x41 && v24)
        MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
      v237 = (unint64_t)off_1E816DB00;
      v210 = v248;
      if ((v248 & 1) != 0)
      {
        v211 = 16;
LABEL_357:
        v212 = 40 * v211;
        v213 = v138 + 2;
        do
        {
          if (*((_DWORD *)v213 - 4) <= 0xFFFFFFFD)
          {
            if (*((_DWORD *)v213 + 4) >= 0x41u)
            {
              v215 = v213[1];
              if (v215)
                MEMORY[0x1CAA32F9C](v215, 0x1000C8000313F17);
            }
            if (*(_DWORD *)v213 >= 0x41u)
            {
              v214 = *(v213 - 1);
              if (v214)
                MEMORY[0x1CAA32F9C](v214, 0x1000C8000313F17);
            }
          }
          v213 += 5;
          v212 -= 40;
        }
        while (v212);
        v210 = v248;
      }
      else
      {
        v211 = v250;
        if (v250)
        {
          v138 = v249;
          goto LABEL_357;
        }
      }
      if ((v210 & 1) == 0)
        MEMORY[0x1CAA32FB4](v249, 8);
      v237 = (unint64_t)off_1E7FA1810;
      if (v239 != v238)
        free(v239);
    }
  }
}

uint64_t sub_1C4A5E2D8(unint64_t a1)
{
  return (a1 < 0x11) & (0x10116u >> a1);
}

uint64_t sub_1C4A5E2F4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t result;
  _QWORD *v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (**v80)(void);
  char v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  _QWORD v92[3];
  _QWORD *v93;
  uint64_t v94;
  char v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  int v101;
  uint64_t v102;

  v4 = a3;
  v5 = a2;
  v102 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 4);
  if ((int)v6 >= 0)
    v7 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v6);
  else
    v7 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  v8 = *v7;
  if (v8)
  {
    v28 = a4;
    v31 = a1;
    if ((*(_BYTE *)(v8 + 3) & 1) != 0)
    {
      v5 = a2;
    }
    else
    {
      v8 = *(_QWORD *)(v8 + 24);
      v5 = a2;
      if (!v8 || (*(_BYTE *)(v8 + 3) & 1) == 0)
        goto LABEL_5;
    }
    v44 = *(_QWORD *)(v8 + 8);
    if (v44 && **(_WORD **)(v44 + 16) == 127 && *(_DWORD *)(v44 + 40) == 3)
    {
      v45 = *(_QWORD *)(v44 + 32);
      v46 = *(_DWORD *)(v45 + 36);
      v47 = sub_1C554C050(*(_DWORD *)(v45 + 68), v5);
      a4 = v28;
      v5 = a2;
      v4 = a3;
      v48 = v47;
      a1 = v31;
      if (v49 && v48 >= 1)
      {
        v51 = 1 << v48;
        v94 = 1 << v48;
        v52 = v28[3];
        if (!v52)
          goto LABEL_119;
        v53 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v52 + 48))(v52, &v94);
        a1 = v31;
        v4 = a3;
        v5 = a2;
        a4 = v28;
        if (v53)
        {
          if (*(_QWORD *)(v31 + 8) == 1)
          {
            sub_1C4A5FBA8(&v94, v46, *(_DWORD *)(v31 + 24), a2, a3, 0);
            if (v95)
            {
              v46 = v94;
              *(_DWORD *)(v31 + 24) = HIDWORD(v94);
            }
            *(_DWORD *)(v31 + 4) = v46;
            *(_QWORD *)(v31 + 8) = v51;
            return 1;
          }
        }
      }
    }
  }
LABEL_5:
  v9 = *(unsigned int *)(a1 + 4);
  v10 = v9 & 0x7FFFFFFF;
  v11 = *(_QWORD *)(v5 + 24);
  v12 = (uint64_t *)(v11 + 16 * v10 + 8);
  v13 = *(_QWORD *)(v5 + 272);
  if ((int)v9 >= 0)
    v12 = (uint64_t *)(v13 + 8 * v9);
  v14 = *v12;
  if (!v14)
    goto LABEL_8;
  v28 = a4;
  v32 = v5;
  v33 = v4;
  v34 = a1;
  if ((*(_BYTE *)(v14 + 3) & 1) == 0)
  {
    v14 = *(_QWORD *)(v14 + 24);
    if (!v14 || (*(_BYTE *)(v14 + 3) & 1) == 0)
      goto LABEL_30;
  }
  v35 = *(_QWORD *)(v14 + 8);
  if (!v35 || **(_WORD **)(v35 + 16) != 47)
    goto LABEL_30;
  if (*(_DWORD *)(v35 + 40) != 3)
    goto LABEL_8;
  v61 = *(_QWORD *)(v35 + 32);
  v58 = *(_DWORD *)(v61 + 36);
  v62 = sub_1C554C050(*(_DWORD *)(v61 + 68), v5);
  if (v63)
  {
    v31 = v62;
    goto LABEL_73;
  }
  v71 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v35 + 32) + 36), v32);
  if (!v72)
  {
    a1 = v34;
    v9 = *(unsigned int *)(v34 + 4);
    v5 = v32;
    v11 = *(_QWORD *)(v32 + 24);
    v13 = *(_QWORD *)(v32 + 272);
    v10 = v9 & 0x7FFFFFFF;
    v4 = v33;
LABEL_30:
    a4 = v28;
LABEL_8:
    v15 = v11 + 16 * v10 + 8;
    if ((int)v9 >= 0)
      v16 = (uint64_t *)(v13 + 8 * v9);
    else
      v16 = (uint64_t *)v15;
    v17 = *v16;
    if (!v17)
      goto LABEL_12;
    v28 = a4;
    v32 = v5;
    v33 = v4;
    v34 = a1;
    if ((*(_BYTE *)(v17 + 3) & 1) == 0)
    {
      v17 = *(_QWORD *)(v17 + 24);
      if (!v17 || (*(_BYTE *)(v17 + 3) & 1) == 0)
        goto LABEL_12;
    }
    v54 = *(_QWORD *)(v17 + 8);
    if (!v54 || **(_WORD **)(v54 + 16) != 47 || *(_DWORD *)(v54 + 40) != 3)
      goto LABEL_12;
    v55 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v54 + 32) + 36), v5);
    v56 = *(_QWORD *)(v54 + 32);
    if (!v57)
    {
      v58 = *(_DWORD *)(v56 + 36);
      v59 = sub_1C554C050(*(_DWORD *)(v56 + 68), v32);
      v5 = v32;
      v31 = v59;
      a1 = v34;
      v4 = v33;
      a4 = v28;
      if (!v60)
        goto LABEL_12;
      goto LABEL_73;
    }
    v31 = v55;
    goto LABEL_123;
  }
  v31 = v71;
  v56 = *(_QWORD *)(v35 + 32);
LABEL_123:
  v58 = *(_DWORD *)(v56 + 68);
LABEL_73:
  v94 = v31;
  v64 = v28[3];
  if (!v64)
    goto LABEL_119;
  v65 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v64 + 48))(v64, &v94);
  a1 = v34;
  v4 = v33;
  v5 = v32;
  a4 = v28;
  if (v65 && *(_QWORD *)(v34 + 8) == 1)
  {
    sub_1C4A5FBA8(&v94, v58, *(_DWORD *)(v34 + 24), v32, v33, 0);
    if (v95)
    {
      v58 = v94;
      *(_DWORD *)(v34 + 24) = HIDWORD(v94);
    }
    *(_DWORD *)(v34 + 4) = v58;
    *(_QWORD *)(v34 + 8) = v31;
    return 1;
  }
LABEL_12:
  v18 = *(unsigned int *)(a1 + 4);
  v19 = v18 & 0x7FFFFFFF;
  v20 = *(_QWORD *)(v5 + 24);
  v21 = (uint64_t *)(v20 + 16 * v19 + 8);
  v22 = *(_QWORD *)(v5 + 272);
  if ((int)v18 >= 0)
    v21 = (uint64_t *)(v22 + 8 * v18);
  v23 = *v21;
  if (!v23)
    goto LABEL_15;
  v28 = a4;
  v88 = v4;
  v89 = v5;
  v31 = a1;
  if ((*(_BYTE *)(v23 + 3) & 1) != 0 || (v23 = *(_QWORD *)(v23 + 24)) != 0 && (*(_BYTE *)(v23 + 3) & 1) != 0)
  {
    v36 = *(_QWORD *)(v23 + 8);
    if (v36)
    {
      if (**(_WORD **)(v36 + 16) == 47)
      {
        if (*(_DWORD *)(v36 + 40) != 3)
          goto LABEL_15;
        v66 = *(_QWORD *)(v36 + 32);
        v41 = *(_DWORD *)(v66 + 36);
        v42 = sub_1C554C050(*(_DWORD *)(v66 + 68), v5);
        if (v67)
        {
LABEL_82:
          v68 = v42;
          while (1)
          {
            if (*(_QWORD *)(v31 + 8) != 1)
              return 0;
            sub_1C4A5FBA8(&v94, v41, 0, v89, v88, 0);
            result = 0;
            if (v95)
              return result;
            v69 = (_QWORD *)v28[3];
            if (v69)
            {
              if (v69 == v28)
              {
                v93 = v92;
                (*(void (**)(_QWORD *, _QWORD *))(*v28 + 24))(v28, v92);
                v70 = (uint64_t)v93;
              }
              else
              {
                v70 = (*(uint64_t (**)(_QWORD *))(*v69 + 16))(v69);
                v93 = (_QWORD *)v70;
              }
              v94 = v68;
              if (v70)
              {
                if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v70 + 48))(v70, &v94) & 1) != 0)
                {
                  v75 = 0;
                  v76 = 0;
                  v77 = 1;
                }
                else
                {
                  v28 = 0;
                  while (1)
                  {
                    v78 = *(uint64_t *)((char *)&qword_1C676B4D8 + (_QWORD)v28);
                    if (v78 < v68 && !(v68 % v78))
                    {
                      v94 = v68 / v78;
                      if (!v93)
                        goto LABEL_119;
                      if ((*(unsigned int (**)(_QWORD *, uint64_t *))(*v93 + 48))(v93, &v94))
                        break;
                    }
                    if (++v28 == (_QWORD *)232)
                    {
                      v77 = 0;
                      v76 = 0;
                      v75 = 1;
                      goto LABEL_103;
                    }
                  }
                  v75 = 0;
                  v76 = v78 & 0xFFFFFFFFFFFFFF00;
                  v77 = v78;
                }
LABEL_103:
                v79 = v76 | v77;
                if (v93 == v92)
                {
                  v80 = (void (**)(void))(v92[0] + 32);
LABEL_107:
                  (*v80)();
                }
                else if (v93)
                {
                  v80 = (void (**)(void))(*v93 + 40);
                  goto LABEL_107;
                }
                if (v79 == 1)
                  v81 = 1;
                else
                  v81 = v75;
                if ((v81 & 1) != 0)
                  return 0;
                v82 = *(_DWORD *)(v31 + 4);
                if (v82 < 0 && (v83 = v82 & 0x7FFFFFFF, v83 < *(_DWORD *)(v89 + 432)))
                  v84 = *(_QWORD *)(*(_QWORD *)(v89 + 424) + 8 * v83);
                else
                  v84 = 0;
                v90 = v84;
                v91 = 0;
                v85 = sub_1C5544694(v88, &v90, v79);
                v100 = v84;
                v101 = 0;
                LODWORD(v94) = v41;
                v96 = 0;
                v97 = v85;
                v98 = v86;
                v99 = 1;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)v88 + 32))(v88, 47, &v100, 1, &v94, 2, 0);
                result = 1;
                *(_DWORD *)(v31 + 4) = *(_DWORD *)(*(_QWORD *)(v87 + 32) + 4);
                *(_QWORD *)(v31 + 8) = v68 / v79;
                return result;
              }
            }
            else
            {
              v93 = 0;
            }
LABEL_119:
            sub_1C485C2F0();
LABEL_120:
            v68 = v38;
LABEL_125:
            v41 = *(_DWORD *)(v39 + 68);
          }
        }
        v73 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v36 + 32) + 36), v89);
        if (v74)
        {
          v68 = v73;
          v39 = *(_QWORD *)(v36 + 32);
          goto LABEL_125;
        }
        a1 = v31;
        v18 = *(unsigned int *)(v31 + 4);
        v4 = v88;
        v5 = v89;
        v20 = *(_QWORD *)(v89 + 24);
        v22 = *(_QWORD *)(v89 + 272);
        v19 = v18 & 0x7FFFFFFF;
      }
    }
  }
  a4 = v28;
LABEL_15:
  v24 = v20 + 16 * v19 + 8;
  if ((int)v18 >= 0)
    v25 = (uint64_t *)(v22 + 8 * v18);
  else
    v25 = (uint64_t *)v24;
  v26 = *v25;
  if (v26)
  {
    v28 = a4;
    v88 = v4;
    v89 = v5;
    v31 = a1;
    if ((*(_BYTE *)(v26 + 3) & 1) != 0 || (v26 = *(_QWORD *)(v26 + 24)) != 0 && (*(_BYTE *)(v26 + 3) & 1) != 0)
    {
      v37 = *(_QWORD *)(v26 + 8);
      if (v37)
      {
        if (**(_WORD **)(v37 + 16) == 47 && *(_DWORD *)(v37 + 40) == 3)
        {
          v38 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v37 + 32) + 36), v5);
          v39 = *(_QWORD *)(v37 + 32);
          if (v40)
            goto LABEL_120;
          v41 = *(_DWORD *)(v39 + 36);
          v42 = sub_1C554C050(*(_DWORD *)(v39 + 68), v89);
          if (v43)
            goto LABEL_82;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C4A5EAB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  if (*(_DWORD *)(a1 + 24) || *(_QWORD *)(a1 + 8) != 1)
    return 0;
  v3 = *(unsigned int *)(a1 + 4);
  v4 = v3 & 0x7FFFFFFF;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = (uint64_t *)(v5 + 16 * v4 + 8);
  v7 = *(_QWORD *)(a2 + 272);
  if ((int)v3 >= 0)
    v6 = (uint64_t *)(v7 + 8 * v3);
  v8 = *v6;
  if (!v8)
    goto LABEL_6;
  v13 = a3;
  v35 = a2;
  v14 = a1;
  if ((*(_BYTE *)(v8 + 3) & 1) != 0 || (v8 = *(_QWORD *)(v8 + 24)) != 0 && (*(_BYTE *)(v8 + 3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v8 + 8);
    if (v15)
    {
      if (**(_WORD **)(v15 + 16) == 48)
      {
        if (*(_DWORD *)(v15 + 40) != 3)
          goto LABEL_6;
        v24 = *(_QWORD *)(v15 + 32);
        v17 = v15 + 32;
        v19 = *(_DWORD *)(v24 + 36);
        v25 = sub_1C554C050(*(_DWORD *)(v24 + 68), a2);
        if (v26)
        {
          v22 = v25;
          v23 = 1;
          goto LABEL_34;
        }
        v29 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)v17 + 36), v35);
        if (v30)
        {
          v22 = v29;
          v23 = 1;
          goto LABEL_33;
        }
        a1 = v14;
        v3 = *(unsigned int *)(v14 + 4);
        a2 = v35;
        v5 = *(_QWORD *)(v35 + 24);
        v7 = *(_QWORD *)(v35 + 272);
        v4 = v3 & 0x7FFFFFFF;
      }
    }
  }
  a3 = v13;
LABEL_6:
  v9 = v5 + 16 * v4 + 8;
  if ((int)v3 >= 0)
    v10 = (uint64_t *)(v7 + 8 * v3);
  else
    v10 = (uint64_t *)v9;
  v11 = *v10;
  if (!v11)
    return 0;
  v13 = a3;
  v35 = a2;
  v14 = a1;
  if ((*(_BYTE *)(v11 + 3) & 1) == 0)
  {
    v11 = *(_QWORD *)(v11 + 24);
    if (!v11 || (*(_BYTE *)(v11 + 3) & 1) == 0)
      return 0;
  }
  v16 = *(_QWORD *)(v11 + 8);
  if (!v16 || **(_WORD **)(v16 + 16) != 49 || *(_DWORD *)(v16 + 40) != 3)
    return 0;
  v18 = *(_QWORD *)(v16 + 32);
  v17 = v16 + 32;
  v19 = *(_DWORD *)(v18 + 36);
  v20 = sub_1C554C050(*(_DWORD *)(v18 + 68), a2);
  if (v21)
  {
    v22 = v20;
    v23 = 2;
    goto LABEL_34;
  }
  v27 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)v17 + 36), v35);
  if (!v28)
    return 0;
  v22 = v27;
  v23 = 2;
LABEL_33:
  v19 = *(_DWORD *)(*(_QWORD *)v17 + 68);
LABEL_34:
  v36 = v22;
  v31 = *(_QWORD *)(v13 + 24);
  if (!v31)
  {
    sub_1C485C2F0();
    goto LABEL_41;
  }
  result = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v31 + 48))(v31, &v36);
  if ((_DWORD)result)
  {
    if (v19 < 0 && (v19 & 0x7FFFFFFFu) < *(_DWORD *)(v35 + 432))
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v35 + 424) + 8 * (v19 & 0x7FFFFFFF));
      goto LABEL_42;
    }
LABEL_41:
    v32 = 0;
LABEL_42:
    v36 = v32;
    v34 = sub_1C4825F50(&v36);
    if ((_DWORD)v33 == 1)
    if (v34 == 32)
    {
      *(_DWORD *)(v14 + 4) = v19;
      *(_QWORD *)(v14 + 8) = v22;
      result = 1;
      *(_DWORD *)(v14 + 24) = v23;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C4A5ED34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  int v40;
  _BOOL4 v41;
  size_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  _BOOL4 v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char *v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  void *__src;
  int *v84;
  uint64_t v85;
  unsigned int v86;
  void (**v87)();
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  int v91;
  _QWORD v92[8];
  int v93;
  uint64_t v94;
  _QWORD *v95;
  unsigned int v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 4);
  if ((int)v4 >= 0)
    v5 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v4);
  else
    v5 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
  v6 = *v5;
  if (v6 && ((*(_BYTE *)(v6 + 3) & 1) != 0 || (v6 = *(_QWORD *)(v6 + 24)) != 0 && (*(_BYTE *)(v6 + 3) & 1) != 0))
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = **(unsigned __int16 **)(v7 + 16);
  if ((v8 - 45) > 0x15 || ((1 << (v8 - 45)) & 0x200003) == 0)
    return 0;
  v76 = 0;
  v75 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 32);
  v89 = v92;
  v90 = 4;
  v91 = 0;
  v87 = (void (**)())off_1E816DB00;
  v88 = v92;
  v92[4] = v10;
  v92[5] = *(_QWORD *)(v10 + 40);
  v92[6] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 16) + 120))(*(_QWORD *)(v10 + 16));
  v92[7] = *(_QWORD *)(*(_QWORD *)v10 + 40) + 272;
  v93 = 6;
  v94 = 1;
  v11 = &v95;
  for (i = 15; i != 95; i += 5)
    LODWORD((&v87)[i]) = -1;
  v13 = *(unsigned int *)(a1 + 4);
  v14 = v13 & 0x7FFFFFFF;
  v15 = *(_QWORD *)(a2 + 24);
  v16 = (uint64_t *)(v15 + 16 * v14 + 8);
  v17 = *(_QWORD *)(a2 + 272);
  if ((int)v13 >= 0)
    v16 = (uint64_t *)(v17 + 8 * v13);
  v18 = *v16;
  if (v18)
  {
    if ((*(_BYTE *)(v18 + 3) & 1) != 0 || (v18 = *(_QWORD *)(v18 + 24)) != 0 && (*(_BYTE *)(v18 + 3) & 1) != 0)
    {
      v64 = *(_QWORD *)(v18 + 8);
      if (v64)
      {
        if (**(_WORD **)(v64 + 16) == 46 && *(_DWORD *)(v64 + 40) == 3)
        {
          v65 = *(_QWORD *)(v64 + 32);
          v76 = *(_DWORD *)(v65 + 36);
          v66 = sub_1C554C050(*(_DWORD *)(v65 + 68), a2);
          if (v67)
          {
            v75 = -v66;
            goto LABEL_54;
          }
          v13 = *(unsigned int *)(a1 + 4);
          v15 = *(_QWORD *)(a2 + 24);
          v17 = *(_QWORD *)(a2 + 272);
          v14 = v13 & 0x7FFFFFFF;
        }
      }
    }
  }
  v19 = (uint64_t *)(v15 + 16 * v14 + 8);
  if ((int)v13 >= 0)
    v19 = (uint64_t *)(v17 + 8 * v13);
  v20 = *v19;
  if (v20 && ((*(_BYTE *)(v20 + 3) & 1) != 0 || (v20 = *(_QWORD *)(v20 + 24)) != 0 && (*(_BYTE *)(v20 + 3) & 1) != 0))
    v21 = *(_QWORD *)(v20 + 8);
  else
    v21 = 0;
  if (v8 == 66)
  {
    if (v21 && **(_WORD **)(v21 + 16) == 66 && *(_DWORD *)(v21 + 40) == 3)
    {
      v22 = *(_QWORD *)(v21 + 32);
      v76 = *(_DWORD *)(v22 + 36);
      v23 = sub_1C554C050(*(_DWORD *)(v22 + 68), a2);
      if (v24)
      {
LABEL_24:
        v25 = 0;
        v75 = v23;
        goto LABEL_42;
      }
      v32 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v21 + 32) + 36), a2);
      if (v33)
      {
        v73 = v21;
        v25 = 0;
        v75 = v32;
        v74 = *(_QWORD *)(v73 + 32);
        goto LABEL_128;
      }
      v13 = *(unsigned int *)(a1 + 4);
      v15 = *(_QWORD *)(a2 + 24);
      v17 = *(_QWORD *)(a2 + 272);
      v14 = v13 & 0x7FFFFFFF;
    }
    v34 = v15 + 16 * v14 + 8;
    v35 = (uint64_t *)(v17 + 8 * v13);
    if ((int)v13 >= 0)
      v36 = v35;
    else
      v36 = (uint64_t *)v34;
    v37 = *v36;
    if (!v37
      || (*(_BYTE *)(v37 + 3) & 1) == 0 && ((v37 = *(_QWORD *)(v37 + 24)) == 0 || (*(_BYTE *)(v37 + 3) & 1) == 0)
      || (v68 = *(_QWORD *)(v37 + 8)) == 0
      || **(_WORD **)(v68 + 16) != 66
      || *(_DWORD *)(v68 + 40) != 3)
    {
LABEL_41:
      v25 = 1;
      goto LABEL_42;
    }
    v69 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v68 + 32) + 36), a2);
    if (!v70)
    {
      v71 = *(_QWORD *)(v68 + 32);
      v76 = *(_DWORD *)(v71 + 36);
      v23 = sub_1C554C050(*(_DWORD *)(v71 + 68), a2);
      if (v72)
        goto LABEL_24;
      goto LABEL_41;
    }
    v25 = 0;
    v75 = v69;
    v74 = *(_QWORD *)(v68 + 32);
LABEL_128:
    v76 = *(_DWORD *)(v74 + 68);
LABEL_42:
    v38 = *(_QWORD *)(v7 + 32);
    v39 = (const char *)*(unsigned int *)(v38 + 68);
    sub_1C54EB4A0((uint64_t)&v87, (const char *)*(unsigned int *)(v38 + 36), (uint64_t)&__src);
    sub_1C54EB4A0((uint64_t)&v87, v39, (uint64_t)&v79);
    v40 = (int)v84;
    if (v84 >= 0x41)
    {
      v42 = (((unint64_t)v84 + 63) >> 3) & 0x3FFFFFF8;
      v43 = (char *)operator new[]();
      memcpy(v43, __src, v42);
      v44 = 0;
      v45 = v79;
      do
      {
        *(_QWORD *)&v43[v44] |= *(_QWORD *)(v45 + v44);
        v44 += 8;
      }
      while (v42 != v44);
      v78 = v40;
      v77 = v43;
      v41 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v77) == v40;
      MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
    }
    else if ((_DWORD)v84)
    {
      v41 = (v79 | (unint64_t)__src) == 0xFFFFFFFFFFFFFFFFLL >> -(char)v84;
    }
    else
    {
      v41 = 1;
    }
    if (v82 >= 0x41 && v81)
      MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
    if (v80 >= 0x41 && v79)
      MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
    if (v86 >= 0x41 && v85)
      MEMORY[0x1CAA32F9C](v85, 0x1000C8000313F17);
    if (v84 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    if (((v25 | !v41) & 1) != 0)
      goto LABEL_73;
    goto LABEL_54;
  }
  if (!v21 || **(_WORD **)(v21 + 16) != 45 || *(_DWORD *)(v21 + 40) != 3)
  {
LABEL_31:
    __src = &v75;
    v84 = &v76;
    LODWORD(v79) = v13;
    if (!sub_1C49BC904((uint64_t)&__src, a2, (unsigned int *)&v79))
      goto LABEL_73;
    goto LABEL_54;
  }
  v26 = *(_QWORD *)(v21 + 32);
  v76 = *(_DWORD *)(v26 + 36);
  v27 = sub_1C554C050(*(_DWORD *)(v26 + 68), a2);
  if (v28)
  {
    v75 = v27;
  }
  else
  {
    v29 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v21 + 32) + 36), a2);
    if (!v30)
    {
      LODWORD(v13) = *(_DWORD *)(a1 + 4);
      goto LABEL_31;
    }
    v75 = v29;
    v76 = *(_DWORD *)(*(_QWORD *)(v21 + 32) + 68);
  }
LABEL_54:
  v46 = *(_DWORD *)(a1 + 24);
  if (v46 == 2)
  {
    v50 = *(unsigned int *)(a1 + 4);
    if ((int)v50 >= 0)
      v51 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v50);
    else
      v51 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
    v52 = *v51;
    if ((*(_BYTE *)(v52 + 3) & 1) == 0)
      v52 = *(_QWORD *)(v52 + 24);
    if ((*(_WORD *)(*(_QWORD *)(v52 + 8) + 44) & 0x800) == 0)
      goto LABEL_73;
  }
  else if (v46 == 1)
  {
    v47 = *(unsigned int *)(a1 + 4);
    if ((int)v47 >= 0)
      v48 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v47);
    else
      v48 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v47 & 0x7FFFFFFF) + 8);
    v49 = *v48;
    if ((*(_BYTE *)(v49 + 3) & 1) == 0)
      v49 = *(_QWORD *)(v49 + 24);
    if ((*(_WORD *)(*(_QWORD *)(v49 + 8) + 44) & 0x1000) == 0)
      goto LABEL_73;
  }
  v53 = *(_QWORD *)(a1 + 16);
  v75 *= *(_QWORD *)(a1 + 8);
  v54 = v53 + v75;
  v55 = v53 + v75 > -32769;
  v56 = v53 + v75 < 0x8000;
  if (v54 >= 0)
    v55 = v56;
  if (v55)
  {
    *(_QWORD *)(a1 + 16) = v54;
    *(_DWORD *)(a1 + 4) = v76;
    v31 = 1;
    goto LABEL_74;
  }
LABEL_73:
  v31 = 0;
LABEL_74:
  v87 = (void (**)())off_1E816DB00;
  v57 = v94;
  if ((v94 & 1) != 0)
  {
    v58 = 16;
    goto LABEL_76;
  }
  v58 = v96;
  if (v96)
  {
    v11 = v95;
LABEL_76:
    v59 = 40 * v58;
    v60 = v11 + 2;
    do
    {
      if (*((_DWORD *)v60 - 4) <= 0xFFFFFFFD)
      {
        if (*((_DWORD *)v60 + 4) >= 0x41u)
        {
          v62 = v60[1];
          if (v62)
            MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
        }
        if (*(_DWORD *)v60 >= 0x41u)
        {
          v61 = *(v60 - 1);
          if (v61)
            MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
        }
      }
      v60 += 5;
      v59 -= 40;
    }
    while (v59);
    v57 = v94;
  }
  if ((v57 & 1) == 0)
    MEMORY[0x1CAA32FB4](v95, 8);
  v87 = off_1E7FA1810;
  if (v89 != v88)
    free(v89);
  return v31;
}

double sub_1C4A5F4F8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  int v25;
  int v26;
  void (**v27)(void);
  int v28;
  void (**v29)(void);
  int v30;
  int v31;
  uint64_t (**v32)();
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  const char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double result;
  __int128 v56;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE v63[32];
  uint64_t v64;
  int v65;
  _QWORD v66[3];
  _QWORD *v67;
  _QWORD v68[3];
  _QWORD *v69;
  uint64_t v70;
  int *v71;
  int v72;
  unint64_t v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4);
  *(_DWORD *)v63 = 0;
  *(_DWORD *)&v63[4] = v7;
  *(_OWORD *)&v63[8] = xmmword_1C64169E0;
  *(_DWORD *)&v63[24] = 0;
  v64 = a2;
  if ((int)v7 >= 0)
    v8 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v7);
  else
    v8 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  v9 = *v8;
  if ((*(_BYTE *)(v9 + 3) & 1) == 0)
    v9 = *(_QWORD *)(v9 + 24);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = **(unsigned __int16 **)(v10 + 16);
  if (v11 == 81)
  {
    v12 = *(_DWORD *)(*(_QWORD *)(v10 + 32) + 4);
    if (v12 < 0 && (v13 = v12 & 0x7FFFFFFF, v13 < *(_DWORD *)(a2 + 432)))
      v14 = *(_DWORD **)(*(_QWORD *)(a2 + 424) + 8 * v13);
    else
      v14 = 0;
    v70 = (uint64_t)v14;
    v16 = sub_1C4825F50((unint64_t *)&v70);
    if ((_DWORD)v15 == 1)
    if (v16 != 64)
      goto LABEL_22;
    v17 = *(_DWORD *)(*(_QWORD *)(v10 + 32) + 36);
    if (v17 < 0 && (v18 = v17 & 0x7FFFFFFF, v18 < *(_DWORD *)(a2 + 432)))
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v18);
    else
      v19 = 0;
    v73 = v19;
    v21 = sub_1C4825F50(&v73);
    if ((_DWORD)v20 == 1)
    if (v21 == 32)
    {
      v73 = 513;
      v74 = 0;
      LODWORD(v70) = *(_DWORD *)(*(_QWORD *)(v10 + 32) + 36);
      v72 = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 126, &v73, 1, &v70, 1, 0);
      v11 = *(_DWORD *)(*(_QWORD *)(v22 + 32) + 4);
    }
    else
    {
LABEL_22:
      v11 = *(_DWORD *)(*(_QWORD *)(v10 + 32) + 36);
    }
    *(_DWORD *)&v63[4] = v11;
  }
  LODWORD(v23) = 0;
  v59 = v11;
  LOBYTE(v60) = 0;
  v24 = &off_1E7FAC5E0;
  v61 = a3;
  do
  {
    do
    {
      while (1)
      {
        while (1)
        {
          sub_1C4A5FBA8(&v70, *(unsigned int *)&v63[4], *(int *)&v63[24], a2, a3, 0);
          v25 = v71;
          if ((_BYTE)v71)
          {
            *(_DWORD *)&v63[24] = HIDWORD(v70);
            *(_DWORD *)&v63[4] = v70;
          }
          v68[0] = v24;
          v69 = v68;
          v26 = sub_1C4A5E2F4((uint64_t)v63, a2, a3, v68);
          if (v69 == v68)
          {
            v27 = (void (**)(void))(v68[0] + 32);
          }
          else
          {
            if (!v69)
              goto LABEL_32;
            v27 = (void (**)(void))(*v69 + 40);
          }
          (*v27)();
LABEL_32:
          v66[0] = v24;
          v67 = v66;
          v28 = sub_1C4A5EAB4((uint64_t)v63, a2, (uint64_t)v66);
          if (v67 == v66)
          {
            v29 = (void (**)(void))(v66[0] + 32);
          }
          else
          {
            if (!v67)
              goto LABEL_37;
            v29 = (void (**)(void))(*v67 + 40);
          }
          (*v29)();
LABEL_37:
          v30 = sub_1C4A5ED34((uint64_t)v63, a2);
          if (!(_DWORD)v23)
            break;
          v31 = 0;
          v23 = 1;
          if (!v25)
            goto LABEL_68;
        }
        v32 = v24;
        v33 = *(_DWORD *)&v63[4];
        v34 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (*(_DWORD *)&v63[4] & 0x7FFFFFFF) + 8);
        if (*(int *)&v63[4] >= 0)
          v34 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * *(unsigned int *)&v63[4]);
        v35 = *v34;
        if ((*(_BYTE *)(v35 + 3) & 1) == 0)
          v35 = *(_QWORD *)(v35 + 24);
        v36 = *(_QWORD *)(v35 + 8);
        v37 = *(_QWORD *)(*(_QWORD *)(v36 + 24) + 32);
        v38 = *(_QWORD *)(v37 + 48);
        if (!v38)
        {
          v38 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v37 + 8) + 216))(*(_QWORD *)(v37 + 8), v37 + 128, v37);
          *(_QWORD *)(v37 + 48) = v38;
        }
        LODWORD(v62) = 0;
        v65 = 0;
        v70 = (uint64_t)&v62;
        v71 = &v65;
        LODWORD(v73) = v33;
        v24 = v32;
        if (sub_1C4957F68((uint64_t)&v70, a2, (unsigned int *)&v73))
        {
          v39 = v62;
          v40 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
          if ((v62 & 0x80000000) == 0)
            v40 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v62);
          v41 = *v40;
          if (v41)
          {
            if (((*(_BYTE *)(v41 + 3) & 1) != 0 || (v41 = *(_QWORD *)(v41 + 24)) != 0 && (*(_BYTE *)(v41 + 3) & 1) != 0)
              && (v47 = *(_QWORD *)(v41 + 8)) != 0
              && **(_WORD **)(v47 + 16) == 80)
            {
              v24 = v32;
              if (*(_DWORD *)(v47 + 40) == 2)
              {
                v39 = *(_DWORD *)(*(_QWORD *)(v47 + 32) + 36);
                LODWORD(v62) = v39;
              }
            }
            else
            {
              v24 = v32;
            }
          }
          v70 = (uint64_t)&v62;
          LODWORD(v73) = v39;
          sub_1C4958594((_DWORD **)&v70, a2, (unsigned int *)&v73);
          if ((v62 & 0x80000000) == 0)
            v42 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v62);
          else
            v42 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
          v43 = *v42;
          if ((*(_BYTE *)(v43 + 3) & 1) == 0)
            v43 = *(_QWORD *)(v43 + 24);
          v44 = *(_QWORD *)(v43 + 8);
          if (**(_WORD **)(v44 + 16) == 70 && !*(_BYTE *)(v38 + 560))
          {
            v60 = *(_DWORD *)(*(_QWORD *)(v44 + 32) + 48);
            v59 = v60 >> 8;
            *(_DWORD *)&v63[4] = v65;
            v23 = 1;
            v31 = 1;
            goto LABEL_64;
          }
        }
        if (**(_WORD **)(v36 + 16) == 70)
          break;
        v23 = 0;
        v31 = 0;
LABEL_64:
        a3 = v61;
        if (!v25)
          goto LABEL_68;
      }
      if (*(_BYTE *)(v38 + 560))
        v45 = 0;
      else
        v45 = *(_QWORD *)&v63[8] == 1;
      a3 = v61;
      if (v45)
      {
        v60 = *(_DWORD *)(*(_QWORD *)(v36 + 32) + 48);
        v59 = v60 >> 8;
        v70 = 129;
        LODWORD(v71) = 0;
        sub_1C5544694(v61, (unint64_t *)&v70, 0);
        *(_DWORD *)&v63[4] = *(_DWORD *)(*(_QWORD *)(v46 + 32) + 4);
        v23 = 1;
        v31 = 1;
      }
      else
      {
        v23 = 0;
        v31 = 0;
      }
    }
    while (v25);
LABEL_68:
    ;
  }
  while (((v26 | v28 | v30 | v31) & 1) != 0);
  v48 = *(_DWORD *)&v63[4];
  if ((*(_DWORD *)&v63[4] & 0x80000000) != 0)
  {
    v50 = v59;
    if ((*(_DWORD *)&v63[4] & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432))
      v49 = 0;
    else
      v49 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (*(_DWORD *)&v63[4] & 0x7FFFFFFF));
  }
  else
  {
    v49 = 0;
    v50 = v59;
  }
  v62 = v49;
  v52 = sub_1C4825F50(&v62);
  if ((_DWORD)v51 == 1)
  if (v52 > a4)
  {
    if ((v62 & 0xFFFFFFFFFFFFFFF9) != 0 && (v62 & 6) == 2)
    {
      v73 = 513;
      v74 = 0;
      LODWORD(v70) = v48;
      v72 = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 80, &v73, 1, &v70, 1, 0);
      v48 = *(_DWORD *)(*(_QWORD *)(v53 + 32) + 4);
    }
    v73 = 257;
    v74 = 0;
    LODWORD(v70) = v48;
    v72 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 119, &v73, 1, &v70, 1, 0);
    *(_DWORD *)&v63[4] = *(_DWORD *)(*(_QWORD *)(v54 + 32) + 4);
  }
  *(_QWORD *)a5 = v60 | ((*(_QWORD *)&v50 & 0xFFFFFFLL) << 8) | (v23 << 32);
  result = *(double *)v63;
  v56 = *(_OWORD *)&v63[16];
  *(_OWORD *)(a5 + 8) = *(_OWORD *)v63;
  *(_OWORD *)(a5 + 24) = v56;
  *(_QWORD *)(a5 + 40) = v64;
  return result;
}

void sub_1C4A5FBA8(_BYTE *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t i;
  uint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  BOOL v38;
  _BOOL4 v39;
  unsigned int v40;
  unint64_t v41;
  const char *v42;
  unint64_t v43;
  void (**v44)();
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  const char *v54;
  int v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unint64_t *v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  void (**v73)();
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  _QWORD v78[8];
  int v79;
  uint64_t v80;
  _QWORD *v81;
  unsigned int v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v11 = a2 & 0x7FFFFFFF;
  v12 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * v11 + 8);
  if ((a2 & 0x80000000) == 0)
    v12 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * a2);
  v13 = *v12;
  if ((*(_BYTE *)(v13 + 3) & 1) == 0)
    v13 = *(_QWORD *)(v13 + 24);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = **(unsigned __int16 **)(v14 + 16);
  if (v15 > 0x7B)
  {
    if (v15 != 124)
    {
      if (v15 != 126)
        goto LABEL_8;
LABEL_33:
      v34 = v15 == 92;
      if (a3 == 1)
        goto LABEL_76;
      v35 = 2;
      if (v34)
      {
LABEL_35:
        v36 = *(_QWORD *)(v14 + 48);
        if (v36 >= 8)
        {
          if ((v36 & 7) != 0)
          {
            v37 = (_DWORD *)(v36 & 0xFFFFFFFFFFFFFFF8);
            v38 = (*(_QWORD *)(v14 + 48) & 7) != 3 || v37 == 0;
            if (v38 || *v37 != 1)
              goto LABEL_76;
          }
          else
          {
            v36 &= 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v14 + 48) = v36;
          }
          if ((v36 & 7) != 0)
          {
            v51 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            v51 = v36 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v14 + 48) = v36 & 0xFFFFFFFFFFFFFFF8;
          }
          v53 = *(_QWORD *)(v51 + 24);
          v52 = (unint64_t *)(v51 + 24);
          if ((v53 & 0xFFFFFFFFFFFFFFF9) == 0)
            goto LABEL_76;
          v55 = sub_1C4825F50(v52);
          if ((_DWORD)v54 == 1)
          v56 = (v55 + 7) & 0xFFFFFFF8;
          if (v56 > 0x20)
            goto LABEL_76;
          v57 = v56 > 0x10;
          v58 = 129;
          if (v57)
            v58 = 257;
          v68 = (unint64_t *)v58;
          v69 = 0;
          LODWORD(v73) = a2;
          LODWORD(v75) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t **, uint64_t, void (***)(), uint64_t, _QWORD))(*(_QWORD *)a5 + 32))(a5, 119, &v68, 1, &v73, 1, 0);
          goto LABEL_79;
        }
LABEL_76:
        *a1 = 0;
        a1[8] = 0;
        return;
      }
LABEL_45:
      v40 = *(_DWORD *)(*(_QWORD *)(v14 + 32) + 36);
      if ((v40 & 0x80000000) != 0 && (v40 & 0x7FFFFFFF) < *(_DWORD *)(a4 + 432))
        v41 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * (v40 & 0x7FFFFFFF));
      else
        v41 = 0;
      v66 = v41;
      v43 = sub_1C4825F50(&v66);
      if ((_DWORD)v42 == 1)
      v44 = 0;
      if ((a2 & 0x80000000) != 0 && v11 < *(unsigned int *)(a4 + 432))
        v44 = *(void (***)())(*(_QWORD *)(a4 + 424) + 8 * v11);
      v73 = v44;
      v46 = sub_1C4825F50((unint64_t *)&v73);
      if ((_DWORD)v45 == 1)
      if (v43 <= 0x10)
        v47 = 16;
      else
        v47 = 32;
      if (v46 == v47)
        goto LABEL_76;
      v49 = sub_1C4825F50(&v66);
      if ((_DWORD)v48 == 1)
      if (v49 == v47)
      {
LABEL_80:
        *(_QWORD *)a1 = v40 | (unint64_t)(v35 << 32);
        a1[8] = 1;
        return;
      }
      v68 = (unint64_t *)((8 * v47) | 1);
      v69 = 0;
      LODWORD(v73) = v40;
      LODWORD(v75) = 0;
      if ((_DWORD)v35 == 2)
        (*(void (**)(uint64_t, uint64_t, unint64_t **, uint64_t, void (***)(), uint64_t, _QWORD))(*(_QWORD *)a5 + 32))(a5, 126, &v68, 1, &v73, 1, 0);
      else
        (*(void (**)(uint64_t, uint64_t, unint64_t **, uint64_t, void (***)(), uint64_t, _QWORD))(*(_QWORD *)a5 + 32))(a5, 124, &v68, 1, &v73, 1, 0);
LABEL_79:
      v40 = *(_DWORD *)(*(_QWORD *)(v50 + 32) + 4);
      goto LABEL_80;
    }
LABEL_43:
    v39 = v15 == 91;
    if (a3 == 2)
      goto LABEL_76;
    v35 = 1;
    if (v39)
      goto LABEL_35;
    goto LABEL_45;
  }
  if (v15 == 91)
    goto LABEL_43;
  if (v15 == 92)
    goto LABEL_33;
LABEL_8:
  if ((a6 & 1) == 0)
    goto LABEL_76;
  v16 = 0;
  if ((a2 & 0x80000000) != 0 && v11 < *(unsigned int *)(a4 + 432))
    v16 = *(_QWORD *)(*(_QWORD *)(a4 + 424) + 8 * v11);
  v72 = v16;
  v17 = sub_1C4825F50(&v72);
  if ((_DWORD)v18 == 1)
  {
    v65 = v17;
    v17 = v65;
  }
  if (a3 == 1)
    goto LABEL_76;
  if (v17 != 64)
    goto LABEL_76;
  sub_1C554C050(a2, a4);
  if (v19)
    goto LABEL_76;
  v20 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * v11 + 8);
  if ((a2 & 0x80000000) == 0)
    v20 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * a2);
  v21 = *v20;
  if ((*(_BYTE *)(v21 + 3) & 1) == 0)
    v21 = *(_QWORD *)(v21 + 24);
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 24) + 32);
  v75 = v78;
  v76 = 4;
  v77 = 0;
  v73 = (void (**)())off_1E816DB00;
  v74 = v78;
  v78[4] = v22;
  v78[5] = *(_QWORD *)(v22 + 40);
  v78[6] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v22 + 16) + 120))(*(_QWORD *)(v22 + 16));
  v78[7] = *(_QWORD *)(*(_QWORD *)v22 + 40) + 272;
  v79 = 6;
  v80 = 1;
  v23 = &v81;
  for (i = 15; i != 95; i += 5)
    LODWORD((&v73)[i]) = -1;
  v25 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * v11 + 8);
  if ((a2 & 0x80000000) == 0)
    v25 = (uint64_t *)(*(_QWORD *)(a4 + 272) + 8 * a2);
  v26 = *v25;
  if ((*(_BYTE *)(v26 + 3) & 1) == 0)
    v26 = *(_QWORD *)(v26 + 24);
  sub_1C54EB4A0((uint64_t)&v73, (const char *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) + 32) + 4), (uint64_t)&v68);
  v27 = v68;
  v28 = v69;
  v29 = (unint64_t)v68;
  if (v69 >= 0x41)
    v29 = *v68;
  v30 = v70;
  v31 = v71;
  if (v29 < 0xFFFFFFFF00000000)
  {
    v32 = 0;
    *a1 = 0;
  }
  else
  {
    v66 = 257;
    v67 = 0;
    LODWORD(v68) = a2;
    LODWORD(v70) = 0;
    v32 = 1;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t **, uint64_t, _QWORD))(*(_QWORD *)a5 + 32))(a5, 119, &v66, 1, &v68, 1, 0);
    *(_QWORD *)a1 = *(unsigned int *)(*(_QWORD *)(v33 + 32) + 4) | 0x200000000;
  }
  a1[8] = v32;
  if (v31 >= 0x41 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  if (v28 >= 0x41 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  v73 = (void (**)())off_1E816DB00;
  v59 = v80;
  if ((v80 & 1) != 0)
  {
    v60 = 16;
    goto LABEL_86;
  }
  v60 = v82;
  if (v82)
  {
    v23 = v81;
LABEL_86:
    v61 = 40 * v60;
    v62 = v23 + 2;
    do
    {
      if (*((_DWORD *)v62 - 4) <= 0xFFFFFFFD)
      {
        if (*((_DWORD *)v62 + 4) >= 0x41u)
        {
          v64 = v62[1];
          if (v64)
            MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
        }
        if (*(_DWORD *)v62 >= 0x41u)
        {
          v63 = *(v62 - 1);
          if (v63)
            MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
        }
      }
      v62 += 5;
      v61 -= 40;
    }
    while (v61);
    v59 = v80;
  }
  if ((v59 & 1) == 0)
    MEMORY[0x1CAA32FB4](v81, 8);
  v73 = off_1E7FA1810;
  if (v75 != v74)
    free(v75);
}

uint64_t sub_1C4A6024C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *a3;
  if ((int)v3 >= 0)
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v3);
  else
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
  v5 = *v4;
  if (!v5)
    return 0;
  if ((*(_BYTE *)(v5 + 3) & 1) == 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5 || (*(_BYTE *)(v5 + 3) & 1) == 0)
      return 0;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7 || **(_WORD **)(v7 + 16) != 193 || *(_DWORD *)(v7 + 40) != 3)
    return 0;
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_DWORD **)(a1 + 8);
  **(_DWORD **)a1 = *(_DWORD *)(v8 + 36);
  *v9 = *(_DWORD *)(v8 + 68);
  return 1;
}

uint64_t sub_1C4A602DC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = (uint64_t *)(v3 + 16 * (a3 & 0x7FFFFFFF) + 8);
  v5 = *(_QWORD *)(a2 + 272);
  if (a3 >= 0)
    v4 = (uint64_t *)(v5 + 8 * a3);
  v6 = *v4;
  if (!v6)
    return 0;
  if ((*(_BYTE *)(v6 + 3) & 1) == 0)
  {
    v6 = *(_QWORD *)(v6 + 24);
    if (!v6 || (*(_BYTE *)(v6 + 3) & 1) == 0)
      return 0;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if (!v8 || **(_WORD **)(v8 + 16) != 45 || *(_DWORD *)(v8 + 40) != 3)
    return 0;
  v9 = *(_QWORD *)(v8 + 32);
  v10 = *(unsigned int *)(v9 + 36);
  v11 = (uint64_t *)(v3 + 16 * (v10 & 0x7FFFFFFF) + 8);
  v12 = (uint64_t *)(v5 + 8 * v10);
  if ((int)v10 >= 0)
    v11 = v12;
  v13 = *v11;
  if (v13)
  {
    if ((*(_BYTE *)(v13 + 3) & 1) != 0 || (v13 = *(_QWORD *)(v13 + 24)) != 0 && (*(_BYTE *)(v13 + 3) & 1) != 0)
    {
      v16 = *(_QWORD *)(v13 + 8);
      if (v16)
      {
        if (**(_WORD **)(v16 + 16) == 127 && *(_DWORD *)(v16 + 40) == 3)
        {
          v17 = sub_1C554C050(*(_DWORD *)(v9 + 68), a2);
          if (v18)
          {
            **(_QWORD **)(a1 + 8) = v17;
            return 1;
          }
          LODWORD(v10) = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 36);
        }
      }
    }
  }
  v14 = sub_1C554C050(v10, a2);
  if (!v15)
    return 0;
  **(_QWORD **)(a1 + 8) = v14;
  result = llvm::MachineRegisterInfo::getVRegDef(a2, *(_DWORD *)(*(_QWORD *)(v8 + 32) + 68));
  if (result)
  {
    if (**(_WORD **)(result + 16) == 127)
      return *(_DWORD *)(result + 40) == 3;
    return 0;
  }
  return result;
}

uint64_t sub_1C4A60454(uint64_t **a1, uint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t VRegDef;

  v3 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (a3 >= 0)
    v3 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a3);
  v4 = *v3;
  if (!v4)
    return 0;
  if ((*(_BYTE *)(v4 + 3) & 1) == 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4 || (*(_BYTE *)(v4 + 3) & 1) == 0)
      return 0;
  }
  v6 = *(_QWORD *)(v4 + 8);
  if (!v6 || **(_WORD **)(v6 + 16) != 45 || *(_DWORD *)(v6 + 40) != 3)
    return 0;
  v7 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v6 + 32) + 36), a2);
  v8 = *(_QWORD *)(v6 + 32);
  if (v9)
  {
    **a1 = v7;
    VRegDef = llvm::MachineRegisterInfo::getVRegDef(a2, *(_DWORD *)(v8 + 68));
    if (VRegDef)
    {
      if (**(_WORD **)(VRegDef + 16) == 127 && *(_DWORD *)(VRegDef + 40) == 3)
        return 1;
    }
  }
  v10 = *(unsigned int *)(v8 + 36);
  v11 = (uint64_t *)((int)v10 >= 0 ? *(_QWORD *)(a2 + 272) + 8 * v10 : *(_QWORD *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  v12 = *v11;
  if (!v12)
    return 0;
  if ((*(_BYTE *)(v12 + 3) & 1) == 0)
  {
    v12 = *(_QWORD *)(v12 + 24);
    if (!v12 || (*(_BYTE *)(v12 + 3) & 1) == 0)
      return 0;
  }
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    return 0;
  if (**(_WORD **)(v13 + 16) != 127)
    return 0;
  if (*(_DWORD *)(v13 + 40) != 3)
    return 0;
  v14 = sub_1C554C050(*(_DWORD *)(v8 + 68), a2);
  if (!v15)
    return 0;
  **a1 = v14;
  return 1;
}

uint64_t sub_1C4A605D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  llvm::DataLayout *v10;
  char v11;
  uint64_t v12;
  _DWORD v14[6];
  unint64_t v15;
  int v16;
  uint64_t v17;

  v4 = a1;
  v17 = *MEMORY[0x1E0C80C00];
  v5 = a1 & 0x7FFFFFFF;
  v6 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * v5 + 8);
  if ((a1 & 0x80000000) == 0)
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * a1);
  v7 = *v6;
  if ((*(_BYTE *)(v7 + 3) & 1) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  if ((a1 & 0x80000000) != 0 && v5 < *(unsigned int *)(a2 + 432))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v5);
    if ((v8 & 0xFFFFFFFFFFFFFFF9) != 0 && (v8 & 6) == 2)
    {
      v10 = (llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 24) + 32) + 40)
                               + 272);
      v11 = 35;
      if ((v8 & 4) == 0)
        v11 = 19;
      v15 = ((((unint64_t)(8 * llvm::DataLayout::getPointerSize(v10, (v8 >> v11) & 0xFFFFFF)) >> 3) & 0x1FFFFFFF) << 6) | 1;
      v16 = 0;
      v14[0] = v4;
      v14[4] = 0;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 80, &v15, 1, v14, 1, 0);
      return *(unsigned int *)(*(_QWORD *)(v12 + 32) + 4);
    }
  }
  return v4;
}

uint64_t sub_1C4A60708(uint64_t a1, int a2, unint64_t a3, unsigned int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v12 = 0;
  sub_1C5544694(a1, &v11, (int)(31 - __clz(a4)));
  v8 = *(_DWORD *)(*(_QWORD *)(v7 + 32) + 4);
  v16 = a3;
  v17 = 0;
  LODWORD(v11) = a2;
  v13 = 0;
  v14 = v8;
  v15 = 0;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 127, &v16, 1, &v11, 2, 0);
  return *(unsigned int *)(*(_QWORD *)(v9 + 32) + 4);
}

uint64_t sub_1C4A607D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FAC598;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4A607F0(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

void sub_1C4A60800()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4A60814()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FAC5E0;
  return result;
}

void sub_1C4A60838(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FAC5E0;
}

uint64_t sub_1C4A60850(uint64_t a1, _QWORD *a2)
{
  return (*a2 < 9uLL) & (0x116u >> *a2);
}

uint64_t sub_1C4A6086C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL (*v26)(_BOOL8);
  uint64_t (***v27)();
  void (**v28)(uint64_t (***)());
  uint64_t (***v29)();
  void (**v30)(uint64_t (***)());
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  const char *v35;
  uint64_t (***v36)();
  void (**v37)(uint64_t (***)());
  uint64_t (***v38)();
  void (**v39)(uint64_t (***)());
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unsigned __int16 v68;
  uint64_t v69;
  const char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  int v76;
  uint64_t v77;
  int GenericVirtualRegister;
  uint64_t v80;
  uint64_t v81;
  char v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _DWORD *v87;
  size_t v88;
  void *v89;
  uint64_t (***v90)();
  uint8x8_t v91;
  __int32 v92;
  unint64_t v93;
  uint64_t (**v94)();
  int8x8_t v95;
  uint8x8_t v96;
  void *__src;
  unsigned int v98;
  unsigned __int8 v99;
  uint64_t (**v100)();
  _QWORD *(*v101)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t (***v102)();
  uint64_t (**v103)();
  BOOL (*v104)(_BOOL8);
  int8x8_t *v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 12) = 0u;
  v6 = (_DWORD *)(a1 + 12);
  *(_BYTE *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_DWORD *)(a1 + 44) = 0;
  v7 = *(_QWORD *)(a2 + 48);
  if ((v7 & 7) != 0)
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a2 + 48) = v7 & 0xFFFFFFFFFFFFFFF8;
  }
  v9 = (_DWORD *)(a1 + 20);
  *(_QWORD *)(a1 + 48) = v8;
  v10 = **(unsigned __int16 **)(a2 + 16);
  if (v10 == 90)
  {
    *(_DWORD *)(a1 + 8) = 1;
    if (!*(_BYTE *)(a1 + 88))
      goto LABEL_20;
    v11 = *(_DWORD **)(a2 + 32);
LABEL_25:
    v17 = v11[1];
    *v6 = v17;
    v23 = v11[17];
LABEL_61:
    *v9 = v23;
    goto LABEL_62;
  }
  if (v10 == 96)
  {
    *(_DWORD *)(a1 + 8) = 4;
    if (*(_BYTE *)(a1 + 88))
    {
      v11 = *(_DWORD **)(a2 + 32);
LABEL_59:
      v17 = v11[17];
      goto LABEL_60;
    }
LABEL_20:
    v11 = *(_DWORD **)(a2 + 32);
    v17 = v11[1];
LABEL_60:
    *v6 = v17;
    v23 = v11[9];
    goto LABEL_61;
  }
  v12 = *(unsigned int *)(a2 + 40);
  v11 = *(_DWORD **)(a2 + 32);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = *(unsigned __int8 **)(a2 + 32);
    while (1)
    {
      v15 = *v14;
      v14 += 32;
      if (v15 == 17)
        break;
      if (v12 == ++v13)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_14:
    LODWORD(v13) = -1;
  }
  v16 = v11[8 * v13 + 4];
  if (v16 <= 2784)
  {
    switch(v16)
    {
      case 2142:
        *(_DWORD *)(a1 + 8) = 1;
        *(_WORD *)(a1 + 88) = 257;
        goto LABEL_25;
      case 2144:
        *(_DWORD *)(a1 + 8) = 4;
        *(_WORD *)(a1 + 88) = 257;
        goto LABEL_59;
      case 2784:
        *(_DWORD *)(a1 + 8) = 1;
        *(_BYTE *)(a1 + 88) = 1;
        goto LABEL_25;
    }
LABEL_145:
    v75 = *(_WORD *)(v8 + 32);
    if ((v75 & 1) != 0)
      v76 = 2;
    else
      v76 = 6;
    *(_DWORD *)(a1 + 8) = v76;
    if ((v75 & 1) != 0)
      v17 = v11[1];
    else
      v17 = v11[25];
    *v6 = v17;
    v23 = v11[33];
    goto LABEL_61;
  }
  if ((v16 - 2785) < 2)
  {
    v20 = 0;
    v19 = 0;
    v18 = 3;
    v21 = (_DWORD *)(a1 + 12);
    v22 = (_DWORD *)(a1 + 20);
  }
  else
  {
    if ((v16 - 2839) >= 2)
    {
      if (v16 == 2838)
      {
        *(_DWORD *)(a1 + 8) = 4;
        *(_BYTE *)(a1 + 88) = 1;
        goto LABEL_59;
      }
      goto LABEL_145;
    }
    v18 = 7;
    v19 = 2;
    v20 = 1;
    v21 = (_DWORD *)(a1 + 20);
    v22 = (_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 8) = v18;
  *v21 = v11[8 * v20 + 1];
  *v22 = v11[17];
  *(_DWORD *)(a1 + 60) = v11[25];
  *(_QWORD *)(a1 + 72) = sub_1C554C050(v11[33], a3);
  v24 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v24 + 164);
  *(_BYTE *)(a1 + 80) = 1;
  v25 = *(_DWORD *)(v24 + 164);
  v26 = sub_1C554C7E0;
  v103 = &off_1E816EFF0;
  v104 = sub_1C554C7E0;
  v105 = (int8x8_t *)&v103;
  v100 = &off_1E816F038;
  v101 = sub_1C554C7F8;
  v102 = &v100;
  sub_1C554C3AC(v25, a3, (uint64_t)&v103, (uint64_t)&v100, 1, 0, &__src);
  v27 = v102;
  if (v102 == &v100)
  {
    v28 = (void (**)(uint64_t (***)()))(v100 + 4);
    v27 = &v100;
LABEL_30:
    (*v28)(v27);
    goto LABEL_31;
  }
  if (v102)
  {
    v28 = (void (**)(uint64_t (***)()))(*v102 + 5);
    goto LABEL_30;
  }
LABEL_31:
  v29 = (uint64_t (***)())v105;
  if (v105 == (int8x8_t *)&v103)
  {
    v30 = (void (**)(uint64_t (***)()))(v103 + 4);
    v29 = &v103;
LABEL_33:
    (*v30)(v29);
    goto LABEL_34;
  }
  if (v105)
  {
    v30 = (void (**)(uint64_t (***)()))(*(_QWORD *)v105 + 40);
    goto LABEL_33;
  }
LABEL_34:
  if (v98 > 0x40)
  {
    v31 = *(_QWORD *)__src;
    if (v99)
      MEMORY[0x1CAA32F9C]();
  }
  else
  {
    v31 = (uint64_t)((_QWORD)__src << -(uint64_t)v98) >> -(uint64_t)v98;
  }
  *(_DWORD *)(a1 + 84) = v31;
  v32 = *(_QWORD *)(a2 + 32);
  v33 = *(_DWORD *)(v32 + 32 * v19 + 4);
  v34 = *(_DWORD *)(v32 + 132);
  v103 = &off_1E816EFF0;
  v104 = sub_1C554C7E0;
  v105 = (int8x8_t *)&v103;
  v100 = &off_1E816F038;
  v101 = sub_1C554C7F8;
  v102 = &v100;
  sub_1C554C3AC(v34, a3, (uint64_t)&v103, (uint64_t)&v100, 0, 0, &__src);
  v36 = v102;
  if (v102 == &v100)
  {
    v37 = (void (**)(uint64_t (***)()))(v100 + 4);
    v36 = &v100;
LABEL_40:
    (*v37)(v36);
    goto LABEL_41;
  }
  if (v102)
  {
    v37 = (void (**)(uint64_t (***)()))(*v102 + 5);
    goto LABEL_40;
  }
LABEL_41:
  v38 = (uint64_t (***)())v105;
  if (v105 == (int8x8_t *)&v103)
  {
    v39 = (void (**)(uint64_t (***)()))(v103 + 4);
    v38 = &v103;
LABEL_43:
    (*v39)(v38);
    goto LABEL_44;
  }
  if (v105)
  {
    v39 = (void (**)(uint64_t (***)()))(*(_QWORD *)v105 + 40);
    goto LABEL_43;
  }
LABEL_44:
  v40 = v99;
  if (v99)
  {
    LODWORD(v26) = v98;
    if (v98 > 0x40)
    {
      v86 = v99;
      v87 = v6;
      v88 = (((unint64_t)v98 + 63) >> 3) & 0x3FFFFFF8;
      v103 = (uint64_t (**)())operator new[]();
      v89 = __src;
      memcpy(v103, __src, v88);
      if (v89)
        MEMORY[0x1CAA32F9C](v89, 0x1000C8000313F17);
      v6 = v87;
      v40 = v86;
      if ((v33 & 0x80000000) == 0)
        goto LABEL_194;
    }
    else
    {
      v103 = (uint64_t (**)())__src;
      if ((v33 & 0x80000000) == 0)
        goto LABEL_194;
    }
  }
  else
  {
    LOBYTE(v103) = 0;
    if ((v33 & 0x80000000) == 0)
      goto LABEL_194;
  }
  if ((v33 & 0x7FFFFFFFu) < *(_DWORD *)(a3 + 432))
  {
    v41 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * (v33 & 0x7FFFFFFF));
    v42 = 1;
    if ((v41 & 0xFFFFFFFFFFFFFFF9) != 0 && (v41 & 4) != 0)
    {
      v43 = 0x800000000000000;
      if ((v41 & 2) == 0)
        v43 = 0x8000000000000;
      if ((v43 & v41) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v35);
      v42 = (unsigned __int16)(v41 >> 3);
    }
    goto LABEL_195;
  }
LABEL_194:
  v42 = 1;
LABEL_195:
  v90 = (uint64_t (***)())&v103[((_DWORD)v26 - 1) >> 6];
  if (v26 < 0x41)
    v90 = &v103;
  if ((((unint64_t)*v90 >> (v26 - 1)) & 1) == 0)
  {
    if (v26 > 0x40)
    {
      v92 = 0;
      v93 = ((unint64_t)v26 + 63) >> 6;
      v94 = v103;
      do
      {
        v95 = (int8x8_t)*v94++;
        v96 = (uint8x8_t)vcnt_s8(v95);
        v96.i16[0] = vaddlv_u8(v96);
        v92 += v96.i32[0];
        --v93;
      }
      while (v93);
    }
    else
    {
      v91 = (uint8x8_t)vcnt_s8((int8x8_t)v103);
      v91.i16[0] = vaddlv_u8(v91);
      v92 = v91.i32[0];
    }
    if (v92 != v42)
      llvm::report_fatal_error((llvm *)"Channel mask must have same number of elements as the intrinsic handles.", (const char *)1);
  }
  if (v40 && v26 >= 0x41 && v103)
    MEMORY[0x1CAA32F9C]();
  v17 = *v6;
LABEL_62:
  v44 = (unint64_t *)(a1 + 24);
  if (v17 < 0 && (v17 & 0x7FFFFFFFu) < *(_DWORD *)(a3 + 432))
    v45 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * (v17 & 0x7FFFFFFF));
  else
    v45 = 0;
  *v44 = v45;
  if ((*v9 & 0x80000000) != 0 && (v46 = *v9 & 0x7FFFFFFF, v46 < *(_DWORD *)(a3 + 432)))
    v47 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v46);
  else
    v47 = 0;
  *(_QWORD *)(a1 + 32) = v45;
  *(_QWORD *)(a1 + 40) = v47;
  v48 = *(_DWORD *)(a1 + 8);
  if (v48 <= 7)
  {
    if (((1 << v48) & 0x12) == 0)
    {
      if (((1 << v48) & 0x44) == 0)
      {
        if (((1 << v48) & 0x88) == 0)
          goto LABEL_157;
        v49 = *(unsigned int *)(a2 + 40);
        if ((_DWORD)v49)
        {
          v50 = 0;
          v51 = *(unsigned __int8 **)(a2 + 32);
          while (1)
          {
            v52 = *v51;
            v51 += 32;
            if (v52 == 17)
              break;
            if (v49 == ++v50)
              goto LABEL_78;
          }
        }
        else
        {
LABEL_78:
          LODWORD(v50) = -1;
        }
        v53 = *(_DWORD *)(*(_QWORD *)(a2 + 32)
                        + ((unint64_t)((*(_DWORD *)(*(_QWORD *)(a2 + 32)
                                                                       + 32 * v50
                                                                       + 16)
                                                           - 2785) > 1) << 6)
                        + 4);
        if ((v53 & 0x80000000) == 0 || (v54 = v53 & 0x7FFFFFFF, v54 >= *(_DWORD *)(a3 + 432)))
        {
          v55 = 0;
          v57 = 1;
LABEL_112:
          v58 = (unsigned __int16)(v55 >> 3);
LABEL_113:
          if (v58 == 8)
            v69 = (v57 + 1) >> 1;
          else
            v69 = v57;
          if (v58 == 8)
            v45 = 129;
          else
            v45 = (8 * v58) | 1;
          if ((_DWORD)v69 != 1)
            v45 = sub_1C4953AD0(v69, v45);
          goto LABEL_156;
        }
        v55 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v54);
        if ((v55 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v54) & 4) == 0)
        {
          v57 = 1;
          if ((v55 & 1) == 0)
            goto LABEL_166;
        }
        else
        {
          v80 = 0x800000000000000;
          if ((v55 & 2) == 0)
            v80 = 0x8000000000000;
          if ((v80 & v55) != 0)
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v45);
          v57 = (unsigned __int16)(v55 >> 3);
          if ((v55 & 1) == 0)
          {
LABEL_166:
            if ((v55 & 4) != 0)
            {
              if ((v55 & 2) != 0)
                v58 = (unsigned __int16)(v55 >> 19);
              else
                v58 = (v55 >> 19);
              goto LABEL_113;
            }
            goto LABEL_112;
          }
        }
        v58 = (v55 >> 3);
        goto LABEL_113;
      }
      v59 = *(unsigned int *)(a2 + 40);
      if ((_DWORD)v59)
      {
        v60 = 0;
        v61 = *(unsigned __int8 **)(a2 + 32);
        while (1)
        {
          v62 = *v61;
          v61 += 32;
          if (v62 == 17)
            break;
          if (v59 == ++v60)
            goto LABEL_92;
        }
      }
      else
      {
LABEL_92:
        LODWORD(v60) = -1;
      }
      v63 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v60 + 16);
      if (v63 > 2645)
      {
        if ((v63 - 2646) >= 4)
        {
          if ((v63 - 2650) > 3)
            goto LABEL_157;
LABEL_123:
          v45 = 16777244;
LABEL_156:
          *(_QWORD *)(a1 + 32) = v45;
          goto LABEL_157;
        }
      }
      else if ((v63 - 2392) >= 4)
      {
        if ((v63 - 2396) >= 4)
          goto LABEL_157;
        goto LABEL_123;
      }
      v45 = 8388636;
      goto LABEL_156;
    }
    if ((v45 & 0xFFFFFFFFFFFFFFF9) != 0 && (v45 & 6) == 4)
    {
      v64 = 3;
      if ((v45 & 1) == 0)
        v64 = 19;
      if ((v45 & 0x8000000000000000 | (8 * (v45 >> v64))) == 0x40)
      {
        if ((v45 & 0x8000000000000) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v45);
          v45 = *v44;
        }
        if ((unsigned __int16)(v45 >> 3) <= 4u)
        {
          v85 = (1 << *(_BYTE *)(*(_QWORD *)(a1 + 48) + 34)) | *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
          if ((v85 & -v85) == 1)
            goto LABEL_103;
        }
      }
    }
    v65 = v45;
    v45 = 4194332;
    if (v65 == 4194332)
    {
LABEL_103:
      v66 = *(_QWORD *)(a1 + 40);
      v67 = 35;
      if ((v66 & 4) == 0)
        v67 = 19;
      if (((v66 >> v67) & 0xFFFFFF) != 0x40)
      {
        v72 = 0x800000000000000;
        if ((v45 & 2) == 0)
          v72 = 0x8000000000000;
        if ((v72 & v45) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v45);
          v45 = *v44;
        }
        if ((v45 & 0x7FFF8) != 0x10)
        {
          v77 = 0x800000000000000;
          if ((v45 & 2) == 0)
            v77 = 0x8000000000000;
          if ((v77 & v45) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v45);
            v45 = *v44;
          }
          v74 = ((v45 >> 1) & 0x3FFFC) + 4;
          goto LABEL_155;
        }
        goto LABEL_136;
      }
      v65 = v45;
    }
    if (v65 <= 4194323)
    {
      if (v65 != 9 && v65 != 65)
      {
        if (v65 == 513)
          goto LABEL_128;
        goto LABEL_169;
      }
    }
    else
    {
      if (v65 > 4194355)
      {
        if (v65 == 4194356)
        {
LABEL_140:
          v73 = 0x800000000000000;
          if ((v65 & 2) == 0)
            v73 = 0x8000000000000;
          if ((v73 & v65) != 0)
          {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v45);
            v65 = *v44;
          }
          v74 = ((unint64_t)v65 >> 1) & 0x3FFF8;
LABEL_155:
          v45 = v74 | 0x800004;
          goto LABEL_156;
        }
        v68 = 68;
        goto LABEL_139;
      }
      if (v65 != 4194324)
      {
        v68 = 36;
LABEL_139:
        if (v65 == (v68 | 0x400000))
          goto LABEL_140;
LABEL_169:
        v81 = v65 & 6;
        if ((v65 & 0xFFFFFFFFFFFFFFF9) == 0 || v81 != 4)
        {
          if ((v65 & 0xFFFFFFFFFFFFFFF9) != 0 && v81 == 2)
          {
            v84 = sub_1C4825F50((unint64_t *)(a1 + 24));
            if ((_DWORD)v83 == 1)
            if (v84 == 32)
              v45 = 257;
            else
              v45 = 16777236;
            goto LABEL_156;
          }
          goto LABEL_184;
        }
        v82 = 3;
        if ((v65 & 1) == 0)
          v82 = 19;
        if ((v65 & 0x8000000000000000 | (8 * ((unint64_t)v65 >> v82))) != 0x200)
        {
LABEL_184:
          v45 = *(_QWORD *)(a1 + 32);
          goto LABEL_157;
        }
LABEL_128:
        v71 = sub_1C4825F50((unint64_t *)(a1 + 24));
        if ((_DWORD)v70 == 1)
        v45 = ((v71 >> 2) & 0x7FFF8 | 0x800004) + 0x800000;
        goto LABEL_156;
      }
    }
LABEL_136:
    v45 = 129;
    goto LABEL_156;
  }
LABEL_157:
  if (*v44 == v45)
    GenericVirtualRegister = *v6;
  else
    GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a3, v45, "", 0);
  *(_DWORD *)(a1 + 16) = GenericVirtualRegister;
  return a1;
}

uint64_t (***sub_1C4A613B0(_DWORD *a1))()
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  const char *v20;
  _BYTE *v21;
  int8x8_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  _QWORD *v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  const char *v54;
  int8x8_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint8x8_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  char v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  char *v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  char v100;
  unsigned int v101;
  char v102;
  uint64_t (***result)();
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unsigned int v112;
  unint64_t v113;
  uint64_t (***v114)();
  uint64_t v115;
  uint64_t v116;
  uint64_t (***v117)();
  void (**v118)(uint64_t (***)());
  uint64_t (**v119)(uint64_t (***)());
  int v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  unsigned int v129;
  unint64_t v130;
  int v131;
  int v132;
  int64_t v133;
  BOOL v134;
  unint64_t v135;
  unsigned int v136;
  uint64_t (**v137)();
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t (***v145)();
  void (**v146)(uint64_t (***)());
  uint64_t (**v147)(uint64_t (***)());
  int v148;
  int64_t v149;
  unint64_t v150;
  unsigned int v151;
  uint64_t (**v152)();
  unsigned int v153;
  int v154;
  unint64_t v155;
  uint64_t (***v156)();
  unsigned int v157;
  char v158;
  uint64_t (**v159)();
  _QWORD *(*v160)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t (***v161)();
  uint64_t (**v162)();
  BOOL (*v163)(_BOOL8);
  uint64_t (***v164)();
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v155 = v3;
  v5 = *(_QWORD *)(v2 + 40);
  v6 = 35;
  if ((v5 & 4) == 0)
    v6 = 19;
  v7 = (v5 >> v6) & 0xFFFFFF;
  a1[14] = v7;
  v8 = *(_QWORD *)(v2 + 48);
  v10 = *(_QWORD *)(v8 + 24);
  v9 = (unint64_t *)(v8 + 24);
  if ((v10 & 0xFFFFFFFFFFFFFFF9) == 0)
    goto LABEL_8;
  v12 = sub_1C4825F50(v9) + 7;
  if ((_DWORD)v11 == 1)
  if ((v12 & 0xFFFFFFFFFFFFFFF8) == 8)
  {
    v13 = 1;
  }
  else
  {
LABEL_8:
    v14 = (v4 & 0xFFFFFFFFFFFFFFF9) == 0 || (v4 & 4) == 0;
    if (v14)
    {
      v13 = 0;
    }
    else
    {
      v15 = 3;
      if ((v4 & 1) == 0)
        v15 = 19;
      v16 = v4 >> v15;
      if ((v4 & 2) != 0)
        v17 = (v4 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v16) | 2;
      else
        v17 = v4 & 0x8000000000000000 | (8 * v16) | 1;
      v13 = v17 == 65;
    }
  }
  v18 = *(uint64_t **)(*(_QWORD *)(**(_QWORD **)a1 + 24) + 32);
  v19 = *v18;
  v21 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18[1] + 16))(v18[1], *v18);
  *((_QWORD *)a1 + 2) = v21;
  v23 = *(_QWORD *)a1;
  v24 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if ((v24 & 0xFFFFFFFB) != 2)
  {
    if (*(_BYTE *)(v23 + 80))
    {
      a1[7] = v24 != 3;
      v28 = *((_QWORD *)a1 + 1);
      v29 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v23 + 32) + 132);
      if ((v29 & 0x80000000) != 0)
        v30 = (uint64_t *)(*(_QWORD *)(v28 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
      else
        v30 = (uint64_t *)(*(_QWORD *)(v28 + 272) + 8 * v29);
      v66 = *v30;
      if ((*(_BYTE *)(v66 + 3) & 1) == 0)
        v66 = *(_QWORD *)(v66 + 24);
      v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 8) + 32) + 48);
      v65 = (_QWORD *)(v67 + 24);
      if (*(_DWORD *)(v67 + 32) >= 0x41u)
        v65 = (_QWORD *)*v65;
      v68 = *(_DWORD *)v65 & 0xF;
      v22.i32[0] = v68;
      v69 = (uint8x8_t)vcnt_s8(v22);
      v69.i16[0] = vaddlv_u8(v69);
      LOWORD(v65) = v69.i16[0];
      if (v13)
      {
        v70 = 0;
        LOWORD(v71) = 1;
      }
      else
      {
        if ((v3 & 1) != 0)
        {
          v72 = v3 >> 3;
        }
        else if ((v3 & 4) != 0)
        {
          if ((v3 & 2) != 0)
            v72 = (unsigned __int16)(v3 >> 19);
          else
            v72 = v3 >> 19;
        }
        else
        {
          v72 = (unsigned __int16)(v3 >> 3);
        }
        LODWORD(v71) = v72 >> 3;
        if ((_DWORD)v71 == 1)
        {
          v70 = 0;
        }
        else if ((_DWORD)v71 == 2)
        {
          v70 = 1;
        }
        else
        {
          v70 = 2;
        }
      }
      v77 = v70 | (16 * v68) | qword_1C676C900[v69.i32[0] - 1];
LABEL_142:
      *((_QWORD *)a1 + 4) = v77;
      goto LABEL_143;
    }
    v60 = *(_QWORD *)(v23 + 48);
    v61 = *(_BYTE *)(v60 + 34);
    v62 = *(_QWORD *)(v60 + 8);
    a1[7] = v24 != 1;
    if ((v4 & 0xFFFFFFFFFFFFFFF9) != 0 && (v4 & 4) != 0)
    {
      v63 = 0x800000000000000;
      if ((v4 & 2) == 0)
        v63 = 0x8000000000000;
      if ((v63 & v4) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
        if ((v4 & 0x7FFF8) == 0x18 && v13)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
LABEL_74:
          v65 = (_QWORD *)(v4 >> 3);
LABEL_95:
          LODWORD(v65) = (unsigned __int16)v65;
          LODWORD(v71) = 1;
          goto LABEL_123;
        }
      }
      else if ((v4 & 0x7FFF8) == 0x18 && v13)
      {
        goto LABEL_74;
      }
    }
    else if (v13)
    {
      LOWORD(v65) = 1;
      goto LABEL_95;
    }
    v79 = 63 - __clz(((1 << v61) | v62) & -((1 << v61) | v62));
    LOWORD(v65) = 1;
    if ((v3 & 0xFFFFFFFFFFFFFFF9) != 0 && (v3 & 4) != 0)
    {
      v80 = 0x800000000000000;
      if ((v3 & 2) == 0)
        v80 = 0x8000000000000;
      if ((v80 & v3) != 0)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
      v65 = (_QWORD *)(v3 >> 3);
    }
    v81 = 1 << v79;
    LODWORD(v65) = (unsigned __int16)v65;
    if ((v3 & 1) != 0)
    {
      v82 = v3 >> 3;
    }
    else if ((v3 & 4) != 0)
    {
      if ((v3 & 2) != 0)
        v82 = (unsigned __int16)(v3 >> 19);
      else
        v82 = v3 >> 19;
    }
    else
    {
      v82 = (unsigned __int16)(v3 >> 3);
    }
    LODWORD(v71) = v82 >> 3;
    if (v81 < v71)
    {
      v83 = v71 * (unsigned __int16)v65;
      v71 = 1 << v79;
      LODWORD(v65) = v83 / v81;
    }
LABEL_123:
    if (a1[14])
      goto LABEL_124;
    if ((_DWORD)v71 == 4 && (_DWORD)v65 == 1)
    {
      LODWORD(v65) = 2;
    }
    else
    {
      if ((_DWORD)v71 != 8 || (_DWORD)v65 != 1)
      {
LABEL_124:
        v84 = ~(-1 << (char)v65);
        v85 = v71 == 1;
        if ((_DWORD)v71 != 2)
        {
          v86 = 2;
LABEL_134:
          if (v85)
            v87 = 0;
          else
            v87 = v86;
          v88 = 1024;
          if ((_DWORD)v65 == 2)
            v88 = 512;
          if ((_DWORD)v65 == 1)
            v88 = 0;
          v77 = v87 | v88 | (16 * (v84 & 0xFu));
          goto LABEL_142;
        }
LABEL_133:
        LOWORD(v71) = 2;
        v86 = 1;
        goto LABEL_134;
      }
      LODWORD(v65) = 4;
    }
    v85 = 0;
    v84 = ~(-1 << (char)v65);
    goto LABEL_133;
  }
  a1[7] = v24 != 2;
  if ((v3 & 0xFFFFFFFFFFFFFFF9) != 0)
    v25 = (v3 >> 2) & 1;
  else
    v25 = 0;
  if (v25 == 1)
  {
    v26 = 0x800000000000000;
    if ((v3 & 2) == 0)
      v26 = 0x8000000000000;
    if ((v26 & v3) != 0)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
    v27 = qword_1C676C900[(uint64_t)((v3 << 45) - 0x1000000000000) >> 48];
  }
  else
  {
    v27 = 0;
  }
  *((_QWORD *)a1 + 4) = v27;
  v31 = *((_QWORD *)a1 + 1);
  v32 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v33 = 96;
  if (v32 != 2)
    v33 = 64;
  v34 = *(_QWORD *)(**(_QWORD **)a1 + 32);
  v35 = *(unsigned int *)(v34 + v33 + 4);
  if ((v35 & 0x80000000) != 0)
    v36 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
  else
    v36 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v35);
  v37 = *v36;
  if ((*(_BYTE *)(v37 + 3) & 1) == 0)
    v37 = *(_QWORD *)(v37 + 24);
  v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 8) + 32) + 48);
  v39 = (_QWORD *)(v38 + 24);
  if (*(_DWORD *)(v38 + 32) >= 0x41u)
    v39 = (_QWORD *)*v39;
  v14 = v32 == 2;
  v40 = 32;
  if (v14)
    v40 = 64;
  v41 = *(unsigned int *)(v34 + v40 + 4);
  if ((v41 & 0x80000000) != 0)
    v42 = (uint64_t *)(*(_QWORD *)(v31 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
  else
    v42 = (uint64_t *)(*(_QWORD *)(v31 + 272) + 8 * v41);
  v43 = *v42;
  if ((*(_BYTE *)(v43 + 3) & 1) == 0)
    v43 = *(_QWORD *)(v43 + 24);
  v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 8) + 32) + 48);
  v45 = (_QWORD *)(v44 + 24);
  if (*(_DWORD *)(v44 + 32) >= 0x41u)
    v45 = (_QWORD *)*v45;
  v46 = *(_DWORD *)v39;
  v47 = (_QWORD *)*v45;
  if (v25)
  {
    v48 = 3;
    if ((v3 & 1) == 0)
      v48 = 19;
    v49 = v3 >> v48;
    if ((v3 & 2) != 0)
      v50 = (v3 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v49) | 2;
    else
      v50 = v3 & 0x8000000000000000 | (8 * v49) | 1;
    v162 = (uint64_t (**)())v50;
    v51 = (unint64_t *)&v162;
  }
  else
  {
    v51 = &v155;
  }
  v52 = v47 & 0xF;
  v53 = sub_1C4825F50(v51);
  if ((_DWORD)v54 == 1)
  {
    v153 = v53;
    v53 = v153;
  }
  if (v52 == 2 && *((_WORD *)a1 + 12) == 2)
    llvm::report_fatal_error((llvm *)"Loading 32-bit sized data into 16-bit registers is undefined.", (const char *)1);
  v55.i32[0] = v46 & 0xF;
  v55.i16[0] = vaddlv_u8((uint8x8_t)vcnt_s8(v55));
  v56 = **(_QWORD **)a1;
  if (*(_DWORD *)(v56 + 40) == 6)
  {
    v57 = *((_QWORD *)a1 + 1);
    v58 = *(unsigned int *)(*(_QWORD *)(v56 + 32) + 164);
    if ((v58 & 0x80000000) != 0)
      v59 = (uint64_t *)(*(_QWORD *)(v57 + 24) + 16 * (v58 & 0x7FFFFFFF) + 8);
    else
      v59 = (uint64_t *)(*(_QWORD *)(v57 + 272) + 8 * v58);
    v73 = *v59;
    if ((*(_BYTE *)(v73 + 3) & 1) == 0)
      v73 = *(_QWORD *)(v73 + 24);
    v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 8) + 32) + 48);
    v75 = (_QWORD *)(v74 + 24);
    if (*(_DWORD *)(v74 + 32) >= 0x41u)
      v75 = (_QWORD *)*v75;
    v76 = *((unsigned __int8 *)a1 + 72);
    *((_QWORD *)a1 + 8) = *v75;
    if (!v76)
      *((_BYTE *)a1 + 72) = 1;
  }
  LOWORD(v65) = v55.i16[0];
  *((_QWORD *)a1 + 4) |= ((_QWORD)v47 << 50) & 0x3FC0000000000000 | (16 * (v46 & 0xFu)) | v52;
  LODWORD(v71) = v53 >> 3;
LABEL_143:
  *((_WORD *)a1 + 13) = (_WORD)v65;
  *((_WORD *)a1 + 12) = v71;
  if ((unsigned __int16)v71 == 1)
  {
    *((_WORD *)a1 + 12) = 2;
    *((_WORD *)a1 + 13) = ((unsigned __int16)v65 + 1) >> 1;
  }
  if (*((_BYTE *)a1 + 72))
  {
    v89 = *((_QWORD *)a1 + 8);
LABEL_175:
    *((_QWORD *)a1 + 5) = v89;
    goto LABEL_176;
  }
  v90 = a1[14];
  if (v90 - 10 <= 0x3D && ((1 << (v90 - 10)) & 0x30C0000000000001) != 0 || v90 < 3)
  {
    v91 = sub_1C4A17AE8((uint64_t)v21);
    if (v21[322])
    {
      v154 = v91;
      v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18[43] + 648))(v18[43]);
      v91 = v154;
    }
    else
    {
      v92 = 1;
    }
    if ((_DWORD)v7 == 1)
    {
      if (v91 != 5)
        v92 = 0;
      if (v21[330])
        v93 = 3;
      else
        v93 = v92;
    }
    else
    {
      v93 = 0;
    }
    if ((*(_DWORD *)(*(_QWORD *)a1 + 8) - 1) > 2)
    {
      if (v21[329])
      {
        v93 = 0;
      }
      else
      {
        LODWORD(v162) = 0;
        if (sub_1C4AC67E0((int)v21, v19, "MemoryWriteCacheCtl", (int *)&v162))
          v93 = v162;
      }
      LODWORD(v162) = 0;
      v94 = "MemoryWriteL2Pers";
    }
    else
    {
      if (v21[329])
      {
        v93 = 0;
      }
      else
      {
        LODWORD(v162) = 0;
        if (sub_1C4AC67E0((int)v21, v19, "MemoryReadCacheCtl", (int *)&v162))
          v93 = v162;
      }
      LODWORD(v162) = 0;
      v94 = "MemoryReadL2Pers";
    }
    v95 = sub_1C4AC67E0((int)v21, v19, v94, (int *)&v162);
    v96 = v162;
    if (!v95)
      v96 = 1;
    v97 = 4 * v96;
    if (v93 == 3)
      v97 = 4;
    v89 = v97 | v93;
    goto LABEL_175;
  }
LABEL_176:
  v98 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if ((v98 - 1) <= 2)
  {
    v100 = 1;
    if (!*(_BYTE *)(*(_QWORD *)a1 + 56) || a1[14] == 3)
    {
      if (v21[382] || ((v99 = a1[14], v99 > 0xA) || ((1 << v99) & 0x446) == 0) && v99 != 71 && v99 != 65 || v98 != 3)
        v100 = 0;
    }
    LODWORD(v162) = 0;
    result = (uint64_t (***)())sub_1C4AC67E0((int)v21, v19, "MemoryReadCacheCtl", (int *)&v162);
    if ((_DWORD)result)
    {
      switch((_DWORD)v162)
      {
        case 3:
          v100 = 4;
          break;
        case 1:
          v100 = 1;
          break;
        case 0:
          v100 = 0;
          break;
      }
    }
    v121 = *(unsigned __int8 **)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 88))
    {
      v122 = *((_QWORD *)a1 + 1);
      v123 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v121 + 32) + 100);
      if ((v123 & 0x80000000) != 0)
        v124 = *(_QWORD *)(v122 + 24) + 16 * (v123 & 0x7FFFFFFF) + 8;
      else
        v124 = *(_QWORD *)(v122 + 272) + 8 * v123;
      v125 = v121[89];
      v126 = *(_QWORD *)v124;
      if ((*(_BYTE *)(*(_QWORD *)v124 + 3) & 1) == 0)
        v126 = *(_QWORD *)(v126 + 24);
      v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v126 + 8) + 32) + 48);
      v128 = (_QWORD *)(v127 + 24);
      v129 = *(_DWORD *)(v127 + 32);
      if (v125)
      {
        if (v129 >= 0x41)
          v128 = (_QWORD *)*v128;
        v130 = *v128 - 9;
        if (v130 < 6)
          v100 = v130;
      }
      else
      {
        if (v129 >= 0x41)
          v128 = (_QWORD *)*v128;
        v131 = *(_DWORD *)v128;
        switch(v131)
        {
          case 3:
            v100 = 4;
            break;
          case 1:
            v100 = 1;
            break;
          case 0:
            v100 = 0;
            break;
        }
      }
      *((_QWORD *)a1 + 4) |= 0x200000uLL;
    }
    *((_QWORD *)a1 + 5) |= (unint64_t)(v100 & 7) << 42;
    return result;
  }
  v102 = 0;
  if (v98 == 7)
  {
    if ((v101 = a1[14], v101 <= 0xA) && ((1 << v101) & 0x446) != 0 || v101 == 71 || v101 == 65)
      v102 = 1;
  }
  LODWORD(v162) = 0;
  result = (uint64_t (***)())sub_1C4AC67E0((int)v21, v19, "MemoryWriteCacheCtl", (int *)&v162);
  if ((_DWORD)result)
  {
    switch((_DWORD)v162)
    {
      case 3:
        v102 = 4;
        break;
      case 1:
        v102 = 1;
        break;
      case 0:
        v102 = 0;
        break;
    }
  }
  v104 = *(unsigned __int8 **)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 88))
  {
    v105 = *((_QWORD *)a1 + 1);
    v106 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v104 + 32) + 100);
    if ((v106 & 0x80000000) != 0)
      v107 = *(_QWORD *)(v105 + 24) + 16 * (v106 & 0x7FFFFFFF) + 8;
    else
      v107 = *(_QWORD *)(v105 + 272) + 8 * v106;
    v108 = v104[89];
    v109 = *(_QWORD *)v107;
    if ((*(_BYTE *)(*(_QWORD *)v107 + 3) & 1) == 0)
      v109 = *(_QWORD *)(v109 + 24);
    v110 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v109 + 8) + 32) + 48);
    v111 = (_QWORD *)(v110 + 24);
    v112 = *(_DWORD *)(v110 + 32);
    if (v108)
    {
      if (v112 >= 0x41)
        v111 = (_QWORD *)*v111;
      v113 = *v111 - 3;
      if (v113 < 6)
        v102 = v113;
    }
    else
    {
      if (v112 >= 0x41)
        v111 = (_QWORD *)*v111;
      v120 = *(_DWORD *)v111;
      switch(v120)
      {
        case 3:
          v102 = 4;
          break;
        case 1:
          v102 = 1;
          break;
        case 0:
          v102 = 0;
          break;
      }
    }
    *((_QWORD *)a1 + 4) |= 0x200000uLL;
  }
  *((_QWORD *)a1 + 5) |= (unint64_t)(v102 & 7) << 42;
  if (!a1[14])
  {
    if (v21[392])
    {
      v114 = (uint64_t (***)())*v18;
      result = (uint64_t (***)())(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18[43] + 560))(v18[43]);
      if (v114 == result)
      {
        v115 = *((_QWORD *)a1 + 1);
        v116 = *(unsigned int *)(*(_QWORD *)a1 + 16);
        v162 = &off_1E816EFF0;
        v163 = sub_1C554C7E0;
        v164 = &v162;
        v159 = &off_1E816F038;
        v160 = sub_1C554C7F8;
        v161 = &v159;
        sub_1C554C3AC(v116, v115, (uint64_t)&v162, (uint64_t)&v159, 1, 0, &v156);
        v117 = v161;
        if (v161 == &v159)
        {
          v118 = (void (**)(uint64_t (***)()))(v159 + 4);
          v117 = &v159;
        }
        else
        {
          if (!v161)
          {
LABEL_216:
            result = v164;
            if (v164 == &v162)
            {
              v119 = (uint64_t (**)(uint64_t (***)()))(v162 + 4);
              result = &v162;
            }
            else
            {
              if (!v164)
              {
LABEL_219:
                if (v158)
                {
                  if (v157 >= 0x41)
                  {
                    v132 = 0;
                    v133 = ((unint64_t)v157 + 63) >> 6;
                    result = v156;
                    do
                    {
                      v134 = v133-- < 1;
                      if (v134)
                        break;
                      v135 = (unint64_t)v156[v133];
                      v132 += __clz(v135);
                    }
                    while (!v135);
                    v136 = v157 | 0xFFFFFFC0;
                    if ((v157 & 0x3F) == 0)
                      v136 = 0;
                    if (v157 - v132 - v136 >= 0x41)
                    {
                      if (v156)
                        result = (uint64_t (***)())MEMORY[0x1CAA32F9C](v156, 0x1000C8000313F17);
                    }
                    else
                    {
                      v137 = *v156;
                      result = (uint64_t (***)())MEMORY[0x1CAA32F9C](v156);
                      if (!v137)
                        goto LABEL_272;
                    }
                  }
                  else if (!v156)
                  {
                    goto LABEL_272;
                  }
                }
                v138 = *((_QWORD *)a1 + 1);
                if ((v116 & 0x80000000) != 0)
                  v139 = (uint64_t *)(*(_QWORD *)(v138 + 24) + 16 * (v116 & 0x7FFFFFFF) + 8);
                else
                  v139 = (uint64_t *)(*(_QWORD *)(v138 + 272) + 8 * v116);
                v140 = *v139;
                if (!v140)
                  return result;
                if ((*(_BYTE *)(v140 + 3) & 1) == 0)
                {
                  v140 = *(_QWORD *)(v140 + 24);
                  if (!v140 || (*(_BYTE *)(v140 + 3) & 1) == 0)
                    return result;
                }
                v141 = *(_QWORD *)(v140 + 8);
                if (!v141 || **(unsigned __int16 **)(v141 + 16) - 77 > 1)
                  return result;
                if (*(_DWORD *)(v141 + 40) >= 2u)
                {
                  v142 = 1;
                  while (1)
                  {
                    v143 = *(_DWORD *)(*(_QWORD *)(v141 + 32) + 32 * v142 + 4);
                    v144 = *((_QWORD *)a1 + 1);
                    v162 = &off_1E816EFF0;
                    v163 = sub_1C554C7E0;
                    v164 = &v162;
                    v159 = &off_1E816F038;
                    v160 = sub_1C554C7F8;
                    v161 = &v159;
                    sub_1C554C3AC(v143, v144, (uint64_t)&v162, (uint64_t)&v159, 1, 0, &v156);
                    v145 = v161;
                    if (v161 == &v159)
                      break;
                    if (v161)
                    {
                      v146 = (void (**)(uint64_t (***)()))(*v161 + 5);
                      goto LABEL_289;
                    }
LABEL_290:
                    result = v164;
                    if (v164 == &v162)
                    {
                      v147 = (uint64_t (**)(uint64_t (***)()))(v162 + 4);
                      result = &v162;
LABEL_292:
                      result = (uint64_t (***)())(*v147)(result);
                      goto LABEL_293;
                    }
                    if (v164)
                    {
                      v147 = (uint64_t (**)(uint64_t (***)()))(*v164 + 5);
                      goto LABEL_292;
                    }
LABEL_293:
                    if (!v158)
                      return result;
                    if (v157 >= 0x41)
                    {
                      v148 = 0;
                      v149 = ((unint64_t)v157 + 63) >> 6;
                      result = v156;
                      do
                      {
                        v134 = v149-- < 1;
                        if (v134)
                          break;
                        v150 = (unint64_t)v156[v149];
                        v148 += __clz(v150);
                      }
                      while (!v150);
                      v151 = v157 | 0xFFFFFFC0;
                      if ((v157 & 0x3F) == 0)
                        v151 = 0;
                      if (v157 - v148 - v151 >= 0x41)
                      {
                        if (v156)
                          return (uint64_t (***)())MEMORY[0x1CAA32F9C](v156, 0x1000C8000313F17);
                        return result;
                      }
                      v152 = *v156;
                      result = (uint64_t (***)())MEMORY[0x1CAA32F9C](v156);
                      if (v152)
                        return result;
                    }
                    else if (v156)
                    {
                      return result;
                    }
                    if (++v142 >= (unint64_t)*(unsigned int *)(v141 + 40))
                      goto LABEL_272;
                  }
                  v146 = (void (**)(uint64_t (***)()))(v159 + 4);
                  v145 = &v159;
LABEL_289:
                  (*v146)(v145);
                  goto LABEL_290;
                }
LABEL_272:
                *((_QWORD *)a1 + 6) = 0x20000;
                return result;
              }
              v119 = (uint64_t (**)(uint64_t (***)()))(*v164 + 5);
            }
            result = (uint64_t (***)())(*v119)(result);
            goto LABEL_219;
          }
          v118 = (void (**)(uint64_t (***)()))(*v161 + 5);
        }
        (*v118)(v117);
        goto LABEL_216;
      }
    }
  }
  return result;
}

uint64_t sub_1C4A622CC(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned int v10;
  const char *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void (**v33)(_QWORD *);
  _QWORD *v34;
  void (**v35)(_QWORD *);
  _QWORD *v36;
  void (**v37)(_QWORD *);
  _QWORD *v38;
  void (**v39)(_QWORD *);
  _QWORD *v40;
  void (**v41)(_QWORD *);
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void (**v58)(_QWORD *);
  _QWORD *v59;
  void (**v60)(_QWORD *);
  _QWORD *v61;
  void (**v62)(_QWORD *);
  _QWORD *v63;
  void (**v64)(_QWORD *);
  _QWORD *v65;
  void (**v66)(_QWORD *);
  unsigned int v67;
  _QWORD *v68;
  void (**v69)(_QWORD *);
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  void (**v86)(_QWORD *);
  _QWORD *v87;
  void (**v88)(_QWORD *);
  _QWORD *v89;
  void (**v90)(_QWORD *);
  uint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  void (**v108)(_QWORD *);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  void (**v115)(_QWORD *);
  int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  void (**v123)(_QWORD *);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  void (**v139)(_QWORD *);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (***v144)();
  void (**v145)(uint64_t (***)());
  uint64_t v146;
  uint64_t (***v147)();
  void (**v148)(uint64_t (***)());
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  void (**v166)(_QWORD *);
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  void (**v173)(_QWORD *);
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  void (**v177)(_QWORD *);
  uint64_t v178;
  uint64_t (***v179)();
  void (**v180)(uint64_t (***)());
  unsigned int v181;
  uint64_t (***v182)();
  void (**v183)(uint64_t (***)());
  unsigned int v184;
  uint64_t v185;
  _QWORD *v186;
  void (**v187)(_QWORD *);
  unsigned int v188;
  uint64_t v189;
  _QWORD *v190;
  void (**v191)(_QWORD *);
  int v192;
  unsigned int v193;
  uint64_t v194;
  _QWORD *v195;
  void (**v196)(_QWORD *);
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  void (**v201)(_QWORD *);
  _QWORD *v202;
  void (**v203)(_QWORD *);
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  void (**v208)(_QWORD *);
  int v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t (***v220)();
  void (**v221)(uint64_t (***)());
  int v222;
  unsigned int v223;
  uint64_t v224;
  _QWORD *v225;
  void (**v226)(_QWORD *);
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  void (**v234)(_QWORD *);
  _QWORD *v235;
  void (**v236)(_QWORD *);
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD *v243;
  void (**v244)(_QWORD *);
  _QWORD *v245;
  void (**v246)(_QWORD *);
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  void (**v262)(_QWORD *);
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  _QWORD *v269;
  void (**v270)(_QWORD *);
  int v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  void (**v276)(_QWORD *);
  int v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  void (**v282)(_QWORD *);
  uint64_t v283;
  _BOOL4 isPositionIndependent;
  uint64_t v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  void (**v307)(_QWORD *);
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  void (**v316)(_QWORD *);
  int v317;
  unsigned int v318;
  _QWORD *v319;
  void (**v320)(_QWORD *);
  int v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  void (**v346)(_QWORD *);
  _DWORD *v347;
  _QWORD *v348;
  void (**v349)(_QWORD *);
  _QWORD *v350;
  void (**v351)(_QWORD *);
  _QWORD *v352;
  void (**v353)(_QWORD *);
  _QWORD *v354;
  void (**v355)(_QWORD *);
  _QWORD *v356;
  void (**v357)(_QWORD *);
  _QWORD *v358;
  void (**v359)(_QWORD *);
  _QWORD *v360;
  void (**v361)(_QWORD *);
  _QWORD *v362;
  void (**v363)(_QWORD *);
  _QWORD *v364;
  void (**v365)(_QWORD *);
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  void (**v375)(_QWORD *);
  int v376;
  unsigned int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  void (**v383)(_QWORD *);
  unsigned int v384;
  uint64_t v385;
  char *v386;
  _QWORD *v387;
  void (**v388)(_QWORD *);
  int v389;
  unsigned int v390;
  uint64_t v391;
  char *v392;
  _QWORD *v393;
  void (**v394)(_QWORD *);
  unsigned int v395;
  uint64_t v396;
  char *v397;
  _QWORD *v398;
  void (**v399)(_QWORD *);
  int v400;
  unsigned int v401;
  uint64_t v402;
  char *v403;
  _QWORD *v404;
  void (**v405)(_QWORD *);
  int v406;
  unsigned int v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _QWORD *v417;
  void (**v418)(_QWORD *);
  _QWORD *v419;
  void (**v420)(_QWORD *);
  _QWORD *v421;
  void (**v422)(_QWORD *);
  _QWORD *v423;
  void (**v424)(_QWORD *);
  _QWORD *v425;
  void (**v426)(_QWORD *);
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  unsigned int v434;
  uint64_t v435;
  _QWORD *v436;
  void (**v437)(_QWORD *);
  uint64_t v438;
  int v439;
  unsigned int v440;
  uint64_t v441;
  uint64_t v442;
  char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  void (**v450)(_QWORD *);
  uint64_t v451;
  int v452;
  unsigned int v453;
  uint64_t v454;
  int v455;
  unsigned int v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  int v460;
  unsigned int v461;
  uint64_t v462;
  int v463;
  unsigned int v464;
  uint64_t v465;
  int v466;
  unsigned int v467;
  uint64_t v468;
  char *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  _QWORD *v482;
  void (**v483)(_QWORD *);
  unsigned int v484;
  _QWORD *v485;
  void (**v486)(_QWORD *);
  _QWORD *v487;
  void (**v488)(_QWORD *);
  uint64_t v489;
  int v490;
  unsigned int v491;
  uint64_t v492;
  int v493;
  unsigned int v494;
  int v495;
  unsigned int v496;
  uint64_t v497;
  char *v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  _QWORD *v502;
  void (**v503)(_QWORD *);
  uint64_t (***v504)();
  void (**v505)(uint64_t (***)());
  int v506;
  unsigned int v507;
  uint64_t v508;
  char *v509;
  uint64_t v510;
  char *v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  _QWORD *v515;
  void (**v516)(_QWORD *);
  _QWORD *v517;
  void (**v518)(_QWORD *);
  uint64_t v519;
  uint64_t v520;
  int v521;
  unsigned int v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  unsigned int v529;
  uint64_t v530;
  int v531;
  unsigned int v532;
  _DWORD *v534;
  _DWORD *v535;
  _DWORD *v536;
  _DWORD *v537;
  unsigned int v538;
  unsigned int v539;
  _DWORD *v540;
  _DWORD *v541;
  _DWORD *v543;
  _DWORD *v544;
  unint64_t v545;
  unint64_t v546;
  _QWORD v547[3];
  _QWORD *v548;
  _QWORD v549[3];
  _QWORD *v550;
  _QWORD v551[3];
  _QWORD *v552;
  uint64_t (**v553)();
  __int128 v554;
  uint64_t (***v555)();
  __int128 v556;
  uint64_t v557;
  __int128 v558;
  unint64_t v559;
  _QWORD v560[3];
  _QWORD *v561;
  _QWORD v562[3];
  _QWORD *v563;
  _QWORD v564[3];
  _QWORD *v565;
  _QWORD v566[3];
  _QWORD *v567;
  _QWORD v568[3];
  _QWORD *v569;
  _QWORD v570[3];
  _QWORD *v571;
  _QWORD v572[3];
  _QWORD *v573;
  _QWORD v574[3];
  _QWORD *v575;
  _QWORD v576[3];
  _QWORD *v577;
  _QWORD v578[3];
  _QWORD *v579;
  _QWORD v580[3];
  _QWORD *v581;
  _QWORD v582[3];
  _QWORD *v583;
  _QWORD v584[3];
  _QWORD *v585;
  _QWORD v586[3];
  _QWORD *v587;
  _QWORD v588[3];
  _QWORD *v589;
  _QWORD v590[3];
  _QWORD *v591;
  _QWORD v592[3];
  _QWORD *v593;
  _QWORD v594[3];
  _QWORD *v595;
  _QWORD v596[3];
  _QWORD *v597;
  _QWORD v598[3];
  _QWORD *v599;
  _QWORD v600[3];
  _QWORD *v601;
  _QWORD v602[3];
  _QWORD *v603;
  _QWORD v604[3];
  _QWORD *v605;
  _QWORD v606[3];
  _QWORD *v607;
  int64x2_t v608;
  int64x2_t v609;
  __int128 v610;
  __int128 v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  __int128 v615;
  __int128 v616;
  __int128 v617;
  __int128 v618;
  __int128 v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  uint64_t v624;
  _QWORD v625[3];
  _QWORD *v626;
  _QWORD v627[3];
  _QWORD *v628;
  _QWORD v629[3];
  _QWORD *v630;
  _QWORD v631[3];
  _QWORD *v632;
  _QWORD v633[3];
  _QWORD *v634;
  uint64_t v635;
  __int128 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  __int128 v640;
  uint64_t v641;
  _QWORD v642[3];
  _QWORD *v643;
  _QWORD v644[3];
  _QWORD *v645;
  _QWORD v646[3];
  _QWORD *v647;
  _QWORD v648[3];
  _QWORD *v649;
  _QWORD v650[3];
  _QWORD *v651;
  _QWORD v652[3];
  _QWORD *v653;
  _QWORD v654[3];
  _QWORD *v655;
  _QWORD v656[3];
  _QWORD *v657;
  _QWORD v658[3];
  _QWORD *v659;
  uint64_t (**v660)();
  __int128 v661;
  uint64_t (***v662)();
  _QWORD v663[3];
  _QWORD *v664;
  _QWORD v665[3];
  _QWORD *v666;
  _QWORD v667[3];
  _QWORD *v668;
  _QWORD v669[3];
  _QWORD *v670;
  _QWORD v671[3];
  _QWORD *v672;
  _QWORD v673[3];
  _QWORD *v674;
  uint64_t (**v675)();
  __int128 v676;
  uint64_t (***v677)();
  uint64_t (**v678)();
  __int128 v679;
  uint64_t (***v680)();
  _QWORD v681[3];
  _QWORD *v682;
  _QWORD v683[3];
  _QWORD *v684;
  _QWORD v685[3];
  _QWORD *v686;
  uint64_t (**v687)();
  __int128 v688;
  uint64_t (***v689)();
  uint64_t (**v690)();
  __int128 v691;
  uint64_t (***v692)();
  _QWORD v693[3];
  _QWORD *v694;
  _QWORD v695[3];
  _QWORD *v696;
  _QWORD v697[3];
  _QWORD *v698;
  _QWORD v699[3];
  _QWORD *v700;
  _QWORD v701[3];
  _QWORD *v702;
  _QWORD v703[3];
  _QWORD *v704;
  _QWORD v705[3];
  _QWORD *v706;
  _QWORD v707[3];
  _QWORD *v708;
  _QWORD v709[3];
  _QWORD *v710;
  _QWORD v711[3];
  _QWORD *v712;
  _QWORD v713[3];
  _QWORD *v714;
  _QWORD v715[3];
  _QWORD *v716;
  _QWORD v717[3];
  _QWORD *v718;
  _QWORD v719[3];
  _QWORD *v720;
  _QWORD v721[3];
  _QWORD *v722;
  _QWORD v723[3];
  _QWORD *v724;
  _QWORD v725[3];
  _QWORD *v726;
  _QWORD v727[3];
  _QWORD *v728;
  uint64_t v729;

  v729 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)(a1 + 29576);
  v541 = (_DWORD *)(a1 + 29072);
  v544 = (_DWORD *)(a1 + 28232);
  v4 = (_DWORD *)(a1 + 27896);
  v537 = (_DWORD *)(a1 + 27056);
  v536 = (_DWORD *)(a1 + 26720);
  v534 = (_DWORD *)(a1 + 25880);
  v543 = (_DWORD *)(a1 + 23528);
  v5 = (_DWORD *)(a1 + 22352);
  v535 = (_DWORD *)(a1 + 20672);
  v540 = (_DWORD *)(a1 + 20000);
  *(_QWORD *)a1 = &off_1E816E938;
  v6 = a1 + 35456;
  v7 = 8;
  do
  {
    v8 = a1 + v7;
    *(_DWORD *)v8 = 0;
    *(_BYTE *)(v8 + 4) = 0;
    *(_QWORD *)(v8 + 8) = a1 + v7 + 24;
    *(_QWORD *)(v8 + 16) = 0x200000000;
    v7 += 168;
  }
  while (v8 + 168 != v6);
  sub_1C553CCC0(a1 + 35456);
  *(_QWORD *)a1 = &off_1E7FAC628;
  v546 = 897;
  v10 = sub_1C4825F50(&v546);
  if ((_DWORD)v9 == 1)
  v545 = 3073;
  v12 = sub_1C4825F50(&v545);
  if ((_DWORD)v11 == 1)
  v13 = *(_DWORD *)(a1 + 3872);
  if (v13)
    v14 = v13 - 45;
  else
    v14 = 23;
  v608 = (int64x2_t)xmmword_1C660B2D0;
  v609 = (int64x2_t)xmmword_1C660B2E0;
  v610 = xmmword_1C660B2F0;
  *(_QWORD *)&v611 = 4194372;
  v15 = sub_1C4952F0C(a1 + 168 * v14 + 8, 0, &v608, 7);
  v538 = v10;
  v539 = v12;
  v16 = v10 | ((unint64_t)v12 << 32);
  v727[0] = &off_1E7FAC6A8;
  v727[1] = v16;
  v728 = v727;
  v17 = sub_1C614534C(v15, v727);
  v18 = sub_1C49329B4(v17, 0, 0x81uLL);
  v19 = sub_1C4932D5C(v18, 0, 0x101uLL);
  v20 = sub_1C49325E4(v19, 0, 16);
  v21 = sub_1C4953808(v20, 0, 9, 4);
  v22 = sub_1C495392C(v21, 0, 9, 4);
  v23 = sub_1C4953808(v22, 0, 65, 2);
  v24 = sub_1C495392C(v23, 0, 65, 8);
  v25 = sub_1C4953808(v24, 0, 129, 2);
  v26 = sub_1C495392C(v25, 0, 129, 8);
  v27 = sub_1C4953808(v26, 0, 0x8000000000000081, 2);
  v28 = sub_1C495392C(v27, 0, 0x8000000000000081, 8);
  v29 = sub_1C4953808(v28, 0, 257, 2);
  v30 = sub_1C495392C(v29, 0, 257, 4);
  *(_QWORD *)&v636 = 129;
  sub_1C6271148(0, &v636, 1, (uint64_t)v723);
  v721[0] = &off_1E816E4E0;
  v721[1] = 0x200000000;
  v722 = v721;
  sub_1C49326DC(v723, v721, (uint64_t)v725);
  v719[0] = &off_1E816E690;
  v719[1] = 0;
  v720 = v719;
  v31 = sub_1C6145434(v30, v725, v719);
  sub_1C61455A0(v31, 0);
  v32 = v720;
  if (v720 == v719)
  {
    v33 = (void (**)(_QWORD *))(v719[0] + 32);
    v32 = v719;
  }
  else
  {
    if (!v720)
      goto LABEL_15;
    v33 = (void (**)(_QWORD *))(*v720 + 40);
  }
  (*v33)(v32);
LABEL_15:
  v34 = v726;
  if (v726 == v725)
  {
    v35 = (void (**)(_QWORD *))(v725[0] + 32);
    v34 = v725;
  }
  else
  {
    if (!v726)
      goto LABEL_20;
    v35 = (void (**)(_QWORD *))(*v726 + 40);
  }
  (*v35)(v34);
LABEL_20:
  v36 = v722;
  if (v722 == v721)
  {
    v37 = (void (**)(_QWORD *))(v721[0] + 32);
    v36 = v721;
  }
  else
  {
    if (!v722)
      goto LABEL_25;
    v37 = (void (**)(_QWORD *))(*v722 + 40);
  }
  (*v37)(v36);
LABEL_25:
  v38 = v724;
  if (v724 == v723)
  {
    v39 = (void (**)(_QWORD *))(v723[0] + 32);
    v38 = v723;
  }
  else
  {
    if (!v724)
      goto LABEL_30;
    v39 = (void (**)(_QWORD *))(*v724 + 40);
  }
  (*v39)(v38);
LABEL_30:
  v40 = v728;
  if (v728 == v727)
  {
    v41 = (void (**)(_QWORD *))(v727[0] + 32);
    v40 = v727;
  }
  else
  {
    if (!v728)
      goto LABEL_35;
    v41 = (void (**)(_QWORD *))(*v728 + 40);
  }
  (*v41)(v40);
LABEL_35:
  v42 = *(_DWORD *)(a1 + 6392);
  if (v42)
    v43 = v42 - 45;
  else
    v43 = 38;
  v717[0] = &off_1E7FAC6A8;
  v717[1] = v16;
  v718 = v717;
  v44 = sub_1C614534C(a1 + 168 * v43 + 8, v717);
  v45 = sub_1C49329B4(v44, 0, 0x81uLL);
  v46 = sub_1C4932D5C(v45, 0, 0x101uLL);
  v47 = sub_1C49325E4(v46, 0, 16);
  v48 = sub_1C4953808(v47, 0, 65, 2);
  v49 = sub_1C495392C(v48, 0, 65, 8);
  v50 = sub_1C4953808(v49, 0, 129, 2);
  v51 = sub_1C495392C(v50, 0, 129, 8);
  v52 = sub_1C4953808(v51, 0, 257, 2);
  v53 = sub_1C495392C(v52, 0, 257, 4);
  v54 = sub_1C4953808(v53, 0, 0x8000000000000081, 2);
  v55 = sub_1C495392C(v54, 0, 0x8000000000000081, 8);
  v608.i64[0] = 129;
  sub_1C6271148(0, &v608, 1, (uint64_t)v713);
  v711[0] = &off_1E816E4E0;
  v711[1] = 0x200000000;
  v712 = v711;
  sub_1C49326DC(v713, v711, (uint64_t)v715);
  v709[0] = &off_1E816E690;
  v709[1] = 0;
  v710 = v709;
  v56 = sub_1C6145434(v55, v715, v709);
  sub_1C61455A0(v56, 0);
  v57 = v710;
  if (v710 == v709)
  {
    v58 = (void (**)(_QWORD *))(v709[0] + 32);
    v57 = v709;
  }
  else
  {
    if (!v710)
      goto LABEL_43;
    v58 = (void (**)(_QWORD *))(*v710 + 40);
  }
  (*v58)(v57);
LABEL_43:
  v59 = v716;
  if (v716 == v715)
  {
    v60 = (void (**)(_QWORD *))(v715[0] + 32);
    v59 = v715;
  }
  else
  {
    if (!v716)
      goto LABEL_48;
    v60 = (void (**)(_QWORD *))(*v716 + 40);
  }
  (*v60)(v59);
LABEL_48:
  v61 = v712;
  if (v712 == v711)
  {
    v62 = (void (**)(_QWORD *))(v711[0] + 32);
    v61 = v711;
  }
  else
  {
    if (!v712)
      goto LABEL_53;
    v62 = (void (**)(_QWORD *))(*v712 + 40);
  }
  (*v62)(v61);
LABEL_53:
  v63 = v714;
  if (v714 == v713)
  {
    v64 = (void (**)(_QWORD *))(v713[0] + 32);
    v63 = v713;
  }
  else
  {
    if (!v714)
      goto LABEL_58;
    v64 = (void (**)(_QWORD *))(*v714 + 40);
  }
  (*v64)(v63);
LABEL_58:
  v65 = v718;
  if (v718 == v717)
  {
    v66 = (void (**)(_QWORD *))(v717[0] + 32);
    v65 = v717;
  }
  else
  {
    if (!v718)
      goto LABEL_63;
    v66 = (void (**)(_QWORD *))(*v718 + 40);
  }
  (*v66)(v65);
LABEL_63:
  if (*v3)
    v67 = *v3 - 45;
  else
    v67 = 176;
  v707[0] = &off_1E7FAC6F0;
  v708 = v707;
  sub_1C614534C(a1 + 168 * v67 + 8, v707);
  v68 = v708;
  if (v708 == v707)
  {
    v69 = (void (**)(_QWORD *))(v707[0] + 32);
    v68 = v707;
  }
  else
  {
    if (!v708)
      goto LABEL_71;
    v69 = (void (**)(_QWORD *))(*v708 + 40);
  }
  (*v69)(v68);
LABEL_71:
  v70 = *(_DWORD *)(a1 + 4040);
  if (v70)
    v71 = v70 - 45;
  else
    v71 = 24;
  v608 = (int64x2_t)xmmword_1C660B300;
  v609 = (int64x2_t)xmmword_1C660B310;
  v610 = xmmword_1C660B320;
  v611 = xmmword_1C660B330;
  v612 = xmmword_1C660B340;
  v613 = xmmword_1C660B350;
  v614 = xmmword_1C676B5D0;
  v615 = xmmword_1C676B5E0;
  v616 = xmmword_1C676B5F0;
  v617 = xmmword_1C660B370;
  v618 = xmmword_1C660B380;
  v619 = xmmword_1C676B600;
  v620 = xmmword_1C676B610;
  v621 = xmmword_1C676B620;
  v72 = sub_1C4952F0C(a1 + 168 * v71 + 8, 0, &v608, 28);
  v705[0] = &off_1E7FAC738;
  v706 = v705;
  v73 = sub_1C49328CC(v72, v705);
  v74 = sub_1C49325E4(v73, 0, 0);
  v75 = sub_1C49329B4(v74, 0, 0x81uLL);
  v76 = sub_1C4932D5C(v75, 0, 0x201uLL);
  v77 = sub_1C4953808(v76, 0, 129, 2);
  v78 = sub_1C495392C(v77, 0, 129, 4);
  v79 = sub_1C4953808(v78, 0, 0x8000000000000081, 2);
  v80 = sub_1C495392C(v79, 0, 0x8000000000000081, 4);
  v81 = sub_1C4953808(v80, 0, 257, 2);
  v82 = sub_1C495392C(v81, 0, 257, 4);
  v703[0] = &off_1E7FAC780;
  v704 = v703;
  v701[0] = &off_1E816E648;
  v701[1] = 0x1000000000;
  v702 = v701;
  v83 = sub_1C61456A0(v82, v703, v701);
  v84 = sub_1C4953808(v83, 0, 513, 2);
  sub_1C495392C(v84, 0, 513, 2);
  v85 = v702;
  if (v702 == v701)
  {
    v86 = (void (**)(_QWORD *))(v701[0] + 32);
    v85 = v701;
  }
  else
  {
    if (!v702)
      goto LABEL_79;
    v86 = (void (**)(_QWORD *))(*v702 + 40);
  }
  (*v86)(v85);
LABEL_79:
  v87 = v704;
  if (v704 == v703)
  {
    v88 = (void (**)(_QWORD *))(v703[0] + 32);
    v87 = v703;
  }
  else
  {
    if (!v704)
      goto LABEL_84;
    v88 = (void (**)(_QWORD *))(*v704 + 40);
  }
  (*v88)(v87);
LABEL_84:
  v89 = v706;
  if (v706 == v705)
  {
    v90 = (void (**)(_QWORD *))(v705[0] + 32);
    v89 = v705;
  }
  else
  {
    if (!v706)
      goto LABEL_89;
    v90 = (void (**)(_QWORD *))(*v706 + 40);
  }
  (*v90)(v89);
LABEL_89:
  v91 = a1 + 8;
  v92 = *(_DWORD *)(a1 + 12608);
  if (v92)
    v93 = v92 - 45;
  else
    v93 = 75;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609.i64[0] = 513;
  v94 = sub_1C4952F0C(v91 + 168 * v93, 0, &v608, 3);
  v95 = sub_1C49329B4(v94, 0, 0x81uLL);
  v96 = sub_1C4932D5C(v95, 0, 0x201uLL);
  sub_1C49325E4(v96, 0, 0);
  v97 = *(_DWORD *)(a1 + 12776);
  if (v97)
    v98 = v97 - 45;
  else
    v98 = 76;
  v608 = (int64x2_t)xmmword_1C676B630;
  v609.i64[0] = 257;
  v99 = sub_1C4952F0C(v91 + 168 * v98, 0, &v608, 3);
  v100 = sub_1C49329B4(v99, 0, 0x81uLL);
  v101 = sub_1C4932D5C(v100, 0, 0x101uLL);
  sub_1C49325E4(v101, 0, 0);
  *(_QWORD *)&v636 = 0x2E0000002DLL;
  v102 = sub_1C553C5E0(a1, (int *)&v636, 2);
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609.i64[0] = 513;
  v103 = sub_1C4952F0C(v102, 0, &v608, 3);
  v104 = sub_1C49329B4(v103, 0, 0x81uLL);
  v105 = sub_1C4932D5C(v104, 0, 0x201uLL);
  v106 = sub_1C49325E4(v105, 0, 0);
  v699[0] = &off_1E7FAC7C8;
  v700 = v699;
  sub_1C49328CC(v106, v699);
  v107 = v700;
  if (v700 == v699)
  {
    v108 = (void (**)(_QWORD *))(v699[0] + 32);
    v107 = v699;
  }
  else
  {
    if (!v700)
      goto LABEL_100;
    v108 = (void (**)(_QWORD *))(*v700 + 40);
  }
  (*v108)(v107);
LABEL_100:
  *(_QWORD *)&v636 = 0x4200000041;
  DWORD2(v636) = 67;
  v109 = sub_1C553C5E0(a1, (int *)&v636, 3);
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v110 = sub_1C4952F0C(v109, 0, &v608, 2);
  v697[0] = &off_1E7FAC810;
  v697[1] = 513;
  v698 = v697;
  v111 = sub_1C49328CC(v110, v697);
  v112 = sub_1C49329B4(v111, 0, 0x81uLL);
  v113 = sub_1C4932D5C(v112, 0, 0x101uLL);
  sub_1C49325E4(v113, 0, 0);
  v114 = v698;
  if (v698 == v697)
  {
    v115 = (void (**)(_QWORD *))(v697[0] + 32);
    v114 = v697;
  }
  else
  {
    if (!v698)
      goto LABEL_105;
    v115 = (void (**)(_QWORD *))(*v698 + 40);
  }
  (*v115)(v114);
LABEL_105:
  v116 = *(_DWORD *)(a1 + 344);
  if (v116)
    v117 = v116 - 45;
  else
    v117 = 2;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v118 = sub_1C4952F0C(a1 + 168 * v117 + 8, 0, &v608, 2);
  v695[0] = &off_1E7FAC858;
  v695[1] = 513;
  v696 = v695;
  v119 = sub_1C49328CC(v118, v695);
  v120 = sub_1C49329B4(v119, 0, 0x81uLL);
  v121 = sub_1C4932D5C(v120, 0, 0x201uLL);
  sub_1C49325E4(v121, 0, 0);
  v122 = v696;
  if (v696 == v695)
  {
    v123 = (void (**)(_QWORD *))(v695[0] + 32);
    v122 = v695;
  }
  else
  {
    if (!v696)
      goto LABEL_113;
    v123 = (void (**)(_QWORD *))(*v696 + 40);
  }
  (*v123)(v122);
LABEL_113:
  v608 = (int64x2_t)xmmword_1C660B3D0;
  v124 = sub_1C553C5E0(a1, v608.i32, 4);
  v636 = xmmword_1C660B3C0;
  v125 = sub_1C4952F0C(v124, 0, &v636, 2);
  v126 = sub_1C614580C(v125, 0);
  v127 = sub_1C49329B4(v126, 0, 0x101uLL);
  v128 = sub_1C49325E4(v127, 0, 0);
  sub_1C6145904(v128);
  v608.i64[0] = 0x8300000082;
  v129 = sub_1C553C5E0(a1, v608.i32, 2);
  sub_1C61459B4(v129);
  *(_QWORD *)&v558 = 0x810000007FLL;
  DWORD2(v558) = 128;
  v130 = sub_1C553C5E0(a1, (int *)&v558, 3);
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609.i64[0] = 513;
  v636 = xmmword_1C660B3C0;
  *(_QWORD *)&v637 = 513;
  v131 = sub_1C6146774(v130, 0, &v608, 3, &v636, 3);
  v132 = sub_1C49325E4(v131, 0, 0);
  v133 = sub_1C49325E4(v132, 1u, 0);
  v134 = sub_1C49329B4(v133, 0, 0x81uLL);
  v135 = sub_1C4932D5C(v134, 0, 0x201uLL);
  v136 = sub_1C49329B4(v135, 1u, 0x81uLL);
  v137 = sub_1C4932D5C(v136, 1u, 0x201uLL);
  v693[0] = &off_1E7FAC7C8;
  v694 = v693;
  sub_1C49328CC(v137, v693);
  v138 = v694;
  if (v694 == v693)
  {
    v139 = (void (**)(_QWORD *))(v693[0] + 32);
    v138 = v693;
  }
  else
  {
    if (!v694)
      goto LABEL_118;
    v139 = (void (**)(_QWORD *))(*v694 + 40);
  }
  (*v139)(v138);
LABEL_118:
  v608.i64[0] = 0x3C0000003BLL;
  v140 = sub_1C553C5E0(a1, v608.i32, 2);
  v691 = xmmword_1C660B3C0;
  v690 = &off_1E7FAC8A0;
  v692 = &v690;
  v141 = sub_1C49328CC(v140, &v690);
  v142 = sub_1C49329B4(v141, 0, 0x81uLL);
  v143 = sub_1C4932D5C(v142, 0, 0x101uLL);
  sub_1C49325E4(v143, 0, 0);
  v144 = v692;
  if (v692 == &v690)
  {
    v145 = (void (**)(uint64_t (***)()))(v690 + 4);
    v144 = &v690;
  }
  else
  {
    if (!v692)
      goto LABEL_123;
    v145 = (void (**)(uint64_t (***)()))(*v692 + 5);
  }
  (*v145)(v144);
LABEL_123:
  v608.i64[0] = 0x9300000094;
  v146 = sub_1C553C5E0(a1, v608.i32, 2);
  v688 = xmmword_1C660B3C0;
  v687 = &off_1E7FAC8E8;
  v689 = &v687;
  sub_1C49328CC(v146, &v687);
  v147 = v689;
  if (v689 == &v687)
  {
    v148 = (void (**)(uint64_t (***)()))(v687 + 4);
    v147 = &v687;
  }
  else
  {
    if (!v689)
      goto LABEL_128;
    v148 = (void (**)(uint64_t (***)()))(*v689 + 5);
  }
  (*v148)(v147);
LABEL_128:
  *(_QWORD *)&v636 = 0x3E0000003DLL;
  v149 = sub_1C553C5E0(a1, (int *)&v636, 2);
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v150 = sub_1C4952F0C(v149, 6, &v608, 2);
  v151 = sub_1C49329B4(v150, 0, 0x81uLL);
  v152 = sub_1C4932D5C(v151, 0, 0x101uLL);
  sub_1C49325E4(v152, 0, 0);
  *(_QWORD *)&v636 = 0x3100000030;
  v153 = sub_1C553C5E0(a1, (int *)&v636, 2);
  v608 = (int64x2_t)xmmword_1C660B3E0;
  sub_1C61468C4(v153, 0, &v608, 1);
  v154 = *(_DWORD *)(a1 + 15968);
  if (v154)
    v155 = v154 - 45;
  else
    v155 = 95;
  sub_1C6145904(a1 + 168 * v155 + 8);
  v608 = (int64x2_t)xmmword_1C676C884;
  v609.i64[0] = 0x8E0000008FLL;
  v156 = sub_1C553C5E0(a1, v608.i32, 6);
  v636 = xmmword_1C660B3C0;
  *(_QWORD *)&v637 = 513;
  *(_QWORD *)&v558 = 9;
  v157 = sub_1C6146774(v156, 8, &v636, 3, &v558, 1);
  v158 = sub_1C49329B4(v157, 0, 0x81uLL);
  v159 = sub_1C4932D5C(v158, 0, 0x201uLL);
  sub_1C49325E4(v159, 0, 0);
  v636 = xmmword_1C660B3F0;
  v160 = sub_1C553C5E0(a1, (int *)&v636, 4);
  v685[0] = &off_1E7FAC7C8;
  v686 = v685;
  v161 = sub_1C49328CC(v160, v685);
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609.i64[0] = 513;
  v162 = sub_1C4952F0C(v161, 6, &v608, 3);
  v163 = sub_1C49329B4(v162, 0, 0x81uLL);
  v164 = sub_1C4932D5C(v163, 0, 0x101uLL);
  sub_1C49325E4(v164, 0, 0);
  v165 = v686;
  if (v686 == v685)
  {
    v166 = (void (**)(_QWORD *))(v685[0] + 32);
    v165 = v685;
  }
  else
  {
    if (!v686)
      goto LABEL_136;
    v166 = (void (**)(_QWORD *))(*v686 + 40);
  }
  (*v166)(v165);
LABEL_136:
  if (*v534)
    v167 = *v534 - 45;
  else
    v167 = 154;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609.i64[0] = 513;
  v168 = sub_1C4952F0C(a1 + 168 * v167 + 8, 8, &v608, 3);
  v169 = sub_1C49329B4(v168, 0, 0x81uLL);
  v170 = sub_1C4932D5C(v169, 0, 0x201uLL);
  v171 = sub_1C49325E4(v170, 0, 0);
  v683[0] = &off_1E7FAC7C8;
  v684 = v683;
  sub_1C49328CC(v171, v683);
  v172 = v684;
  if (v684 == v683)
  {
    v173 = (void (**)(_QWORD *))(v683[0] + 32);
    v172 = v683;
  }
  else
  {
    if (!v684)
      goto LABEL_144;
    v173 = (void (**)(_QWORD *))(*v684 + 40);
  }
  (*v173)(v172);
LABEL_144:
  v608 = (int64x2_t)xmmword_1C676C89C;
  v609 = (int64x2_t)unk_1C676C8AC;
  LODWORD(v610) = 219;
  v174 = sub_1C553C5E0(a1, v608.i32, 9);
  v636 = xmmword_1C660B3C0;
  v175 = sub_1C4952F0C(v174, 0, &v636, 2);
  v681[0] = &off_1E7FAC930;
  v682 = v681;
  sub_1C49328CC(v175, v681);
  v176 = v682;
  if (v682 == v681)
  {
    v177 = (void (**)(_QWORD *))(v681[0] + 32);
    v176 = v681;
  }
  else
  {
    if (!v682)
      goto LABEL_149;
    v177 = (void (**)(_QWORD *))(*v682 + 40);
  }
  (*v177)(v176);
LABEL_149:
  v608.i64[0] = 0xBC000000BBLL;
  v178 = sub_1C553C5E0(a1, v608.i32, 2);
  v679 = xmmword_1C660B3C0;
  v678 = &off_1E7FAC978;
  v680 = &v678;
  sub_1C49328CC(v178, &v678);
  v179 = v680;
  if (v680 == &v678)
  {
    v180 = (void (**)(uint64_t (***)()))(v678 + 4);
    v179 = &v678;
  }
  else
  {
    if (!v680)
      goto LABEL_154;
    v180 = (void (**)(uint64_t (***)()))(*v680 + 5);
  }
  (*v180)(v179);
LABEL_154:
  if (*v535)
    v181 = *v535 - 45;
  else
    v181 = 123;
  v676 = xmmword_1C660B3C0;
  v675 = &off_1E7FAC9C0;
  v677 = &v675;
  sub_1C49328CC(a1 + 168 * v181 + 8, &v675);
  v182 = v677;
  if (v677 == &v675)
  {
    v183 = (void (**)(uint64_t (***)()))(v675 + 4);
    v182 = &v675;
  }
  else
  {
    if (!v677)
      goto LABEL_162;
    v183 = (void (**)(uint64_t (***)()))(*v677 + 5);
  }
  (*v183)(v182);
LABEL_162:
  if (*v540)
    v184 = *v540 - 45;
  else
    v184 = 119;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v185 = sub_1C4952F0C(a1 + 168 * v184 + 8, 6, &v608, 2);
  v673[0] = &off_1E7FACA08;
  v674 = v673;
  sub_1C49328CC(v185, v673);
  v186 = v674;
  if (v674 == v673)
  {
    v187 = (void (**)(_QWORD *))(v673[0] + 32);
    v186 = v673;
  }
  else
  {
    if (!v674)
      goto LABEL_170;
    v187 = (void (**)(_QWORD *))(*v674 + 40);
  }
  (*v187)(v186);
LABEL_170:
  if (*v5)
    v188 = *v5 - 45;
  else
    v188 = 133;
  v608 = (int64x2_t)xmmword_1C660B400;
  v609 = (int64x2_t)xmmword_1C676B640;
  v189 = sub_1C61468C4(a1 + 168 * v188 + 8, 0, &v608, 2);
  v671[0] = &off_1E7FAC7C8;
  v672 = v671;
  sub_1C49328CC(v189, v671);
  v190 = v672;
  if (v672 == v671)
  {
    v191 = (void (**)(_QWORD *))(v671[0] + 32);
    v190 = v671;
  }
  else
  {
    if (!v672)
      goto LABEL_178;
    v191 = (void (**)(_QWORD *))(*v672 + 40);
  }
  (*v191)(v190);
LABEL_178:
  v192 = v5[42];
  if (v192)
    v193 = v192 - 45;
  else
    v193 = 134;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609 = (int64x2_t)xmmword_1C676B650;
  v194 = sub_1C61468C4(a1 + 168 * v193 + 8, 0, &v608, 2);
  v669[0] = &off_1E7FAC7C8;
  v670 = v669;
  sub_1C49328CC(v194, v669);
  v195 = v670;
  if (v670 == v669)
  {
    v196 = (void (**)(_QWORD *))(v669[0] + 32);
    v195 = v669;
  }
  else
  {
    if (!v670)
      goto LABEL_186;
    v196 = (void (**)(_QWORD *))(*v670 + 40);
  }
  (*v196)(v195);
LABEL_186:
  if (*v541)
    v197 = *v541 - 45;
  else
    v197 = 173;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v198 = sub_1C4952F0C(a1 + 168 * v197 + 8, 0, &v608, 2);
  v667[0] = &off_1E7FACA50;
  v667[1] = 0x8000000000000081;
  v668 = v667;
  v199 = sub_1C49328CC(v198, v667);
  v665[0] = &off_1E7FAC7C8;
  v666 = v665;
  sub_1C49328CC(v199, v665);
  v200 = v666;
  if (v666 == v665)
  {
    v201 = (void (**)(_QWORD *))(v665[0] + 32);
    v200 = v665;
  }
  else
  {
    if (!v666)
      goto LABEL_194;
    v201 = (void (**)(_QWORD *))(*v666 + 40);
  }
  (*v201)(v200);
LABEL_194:
  v202 = v668;
  if (v668 == v667)
  {
    v203 = (void (**)(_QWORD *))(v667[0] + 32);
    v202 = v667;
  }
  else
  {
    if (!v668)
      goto LABEL_199;
    v203 = (void (**)(_QWORD *))(*v668 + 40);
  }
  (*v203)(v202);
LABEL_199:
  if (*v543)
    v204 = *v543 - 45;
  else
    v204 = 140;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v636 = xmmword_1C660B3C0;
  v205 = sub_1C6146774(a1 + 168 * v204 + 8, 0, &v608, 2, &v636, 2);
  v663[0] = &off_1E7FACA98;
  v663[1] = 0x8000000000000081;
  v664 = v663;
  v206 = sub_1C49328CC(v205, v663);
  sub_1C614580C(v206, 0);
  v207 = v664;
  if (v664 == v663)
  {
    v208 = (void (**)(_QWORD *))(v663[0] + 32);
    v207 = v663;
  }
  else
  {
    if (!v664)
      goto LABEL_207;
    v208 = (void (**)(_QWORD *))(*v664 + 40);
  }
  (*v208)(v207);
LABEL_207:
  v209 = v4[42];
  if (v209)
    v210 = v209 - 45;
  else
    v210 = 167;
  v608.i64[0] = 257;
  v211 = sub_1C4952F0C(a1 + 8 + 168 * v210, 0, &v608, 1);
  v212 = sub_1C49329B4(v211, 0, 0x101uLL);
  v213 = sub_1C4932D5C(v212, 0, 0x101uLL);
  sub_1C614580C(v213, 0);
  if (*v544)
    v214 = *v544 - 45;
  else
    v214 = 168;
  v608 = (int64x2_t)xmmword_1C660B410;
  v609 = (int64x2_t)xmmword_1C660B320;
  v215 = sub_1C4952F0C(a1 + 8 + 168 * v214, 8, &v608, 4);
  v216 = sub_1C49325E4(v215, 0, 0);
  v217 = sub_1C49329B4(v216, 0, 0x81uLL);
  v218 = sub_1C4932D5C(v217, 0, 0x201uLL);
  sub_1C614580C(v218, 0);
  v608.i64[0] = 0xAE000000ACLL;
  v608.i32[2] = 217;
  v219 = sub_1C553C5E0(a1, v608.i32, 3);
  v661 = xmmword_1C660B3C0;
  v660 = &off_1E7FACAE0;
  v662 = &v660;
  sub_1C49328CC(v219, &v660);
  v220 = v662;
  if (v662 == &v660)
  {
    v221 = (void (**)(uint64_t (***)()))(v660 + 4);
    v220 = &v660;
  }
  else
  {
    if (!v662)
      goto LABEL_218;
    v221 = (void (**)(uint64_t (***)()))(*v662 + 5);
  }
  (*v221)(v220);
LABEL_218:
  v222 = *(_DWORD *)(a1 + 6728);
  if (v222)
    v223 = v222 - 45;
  else
    v223 = 40;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v224 = sub_1C4952F0C(a1 + 168 * v223 + 8, 0, &v608, 2);
  v658[0] = &off_1E7FACB28;
  v659 = v658;
  sub_1C49328CC(v224, v658);
  v225 = v659;
  if (v659 == v658)
  {
    v226 = (void (**)(_QWORD *))(v658[0] + 32);
    v225 = v658;
  }
  else
  {
    if (!v659)
      goto LABEL_226;
    v226 = (void (**)(_QWORD *))(*v659 + 40);
  }
  (*v226)(v225);
LABEL_226:
  if (*v4)
    v227 = *v4 - 45;
  else
    v227 = 166;
  v608 = vdupq_n_s64(0x81uLL);
  v609 = vdupq_n_s64(0x101uLL);
  v228 = sub_1C61468C4(a1 + 168 * v227 + 8, 0, &v608, 2);
  v229 = sub_1C49329B4(v228, 1u, 0x81uLL);
  v230 = sub_1C4932D5C(v229, 1u, 0x101uLL);
  v231 = sub_1C49325E4(v230, 1u, 0);
  v232 = sub_1C6145A60(v231, 0, 1);
  v656[0] = &off_1E7FACB70;
  v657 = v656;
  v654[0] = &off_1E7FACBB8;
  v655 = v654;
  sub_1C6145B5C(v232, v656, v654);
  v233 = v655;
  if (v655 == v654)
  {
    v234 = (void (**)(_QWORD *))(v654[0] + 32);
    v233 = v654;
  }
  else
  {
    if (!v655)
      goto LABEL_234;
    v234 = (void (**)(_QWORD *))(*v655 + 40);
  }
  (*v234)(v233);
LABEL_234:
  v235 = v657;
  if (v657 == v656)
  {
    v236 = (void (**)(_QWORD *))(v656[0] + 32);
    v235 = v656;
  }
  else
  {
    if (!v657)
      goto LABEL_239;
    v236 = (void (**)(_QWORD *))(*v657 + 40);
  }
  (*v236)(v235);
LABEL_239:
  *(_QWORD *)&v636 = 0xD0000000CFLL;
  v237 = sub_1C553C5E0(a1, (int *)&v636, 2);
  v608 = vdupq_n_s64(0x81uLL);
  v609 = vdupq_n_s64(0x101uLL);
  v238 = sub_1C61468C4(v237, 6, &v608, 2);
  v239 = sub_1C49329B4(v238, 1u, 0x81uLL);
  v240 = sub_1C4932D5C(v239, 1u, 0x101uLL);
  v241 = sub_1C49325E4(v240, 1u, 0);
  v242 = sub_1C6145A60(v241, 0, 1);
  v652[0] = &off_1E7FACC00;
  v653 = v652;
  v650[0] = &off_1E7FACC48;
  v651 = v650;
  sub_1C6145B5C(v242, v652, v650);
  v243 = v651;
  if (v651 == v650)
  {
    v244 = (void (**)(_QWORD *))(v650[0] + 32);
    v243 = v650;
  }
  else
  {
    if (!v651)
      goto LABEL_244;
    v244 = (void (**)(_QWORD *))(*v651 + 40);
  }
  (*v244)(v243);
LABEL_244:
  v245 = v653;
  if (v653 == v652)
  {
    v246 = (void (**)(_QWORD *))(v652[0] + 32);
    v245 = v652;
  }
  else
  {
    if (!v653)
      goto LABEL_249;
    v246 = (void (**)(_QWORD *))(*v653 + 40);
  }
  (*v246)(v245);
LABEL_249:
  *(_QWORD *)&v636 = 0xD2000000D1;
  v247 = sub_1C553C5E0(a1, (int *)&v636, 2);
  v248 = sub_1C49325E4(v247, 0, 0);
  v249 = sub_1C49329B4(v248, 0, 0x81uLL);
  v250 = sub_1C4932D5C(v249, 0, 0x201uLL);
  v251 = sub_1C6145A60(v250, 1, 0);
  v252 = sub_1C6152824(v251);
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609.i64[0] = 513;
  sub_1C4952F0C(v252, 8, &v608, 3);
  *(_QWORD *)&v556 = 0xB5000000B4;
  v253 = sub_1C553C5E0(a1, (int *)&v556, 2);
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v636 = xmmword_1C660B3C0;
  v254 = sub_1C6146774(v253, 0, &v608, 2, &v636, 2);
  v558 = xmmword_1C660B3E0;
  v255 = sub_1C4952F0C(v254, 8, &v558, 2);
  v256 = sub_1C49329B4(v255, 1u, 0x81uLL);
  v257 = sub_1C4932D5C(v256, 1u, 0x101uLL);
  v258 = sub_1C49329B4(v257, 0, 0x41uLL);
  v259 = sub_1C4932D5C(v258, 0, 0x101uLL);
  v648[0] = &off_1E7FACC90;
  v648[1] = 65;
  v649 = v648;
  v260 = sub_1C49328CC(v259, v648);
  sub_1C49325E4(v260, 0, 0);
  v261 = v649;
  if (v649 == v648)
  {
    v262 = (void (**)(_QWORD *))(v648[0] + 32);
    v261 = v648;
  }
  else
  {
    if (!v649)
      goto LABEL_254;
    v262 = (void (**)(_QWORD *))(*v649 + 40);
  }
  (*v262)(v261);
LABEL_254:
  *(_QWORD *)&v558 = 0xB7000000B6;
  v263 = sub_1C553C5E0(a1, (int *)&v558, 2);
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v636 = xmmword_1C660B3C0;
  v264 = sub_1C6146774(v263, 0, &v608, 2, &v636, 2);
  v265 = sub_1C49329B4(v264, 1u, 0x81uLL);
  v266 = sub_1C4932D5C(v265, 1u, 0x201uLL);
  v267 = sub_1C49325E4(v266, 1u, 0);
  v268 = (char *)operator new(0x20uLL);
  *(_QWORD *)v268 = &off_1E7FACCD8;
  *(_OWORD *)(v268 + 8) = xmmword_1C660B3C0;
  *((_QWORD *)v268 + 3) = 513;
  v647 = v268;
  sub_1C49328CC(v267, v646);
  v269 = v647;
  if (v647 == v646)
  {
    v270 = (void (**)(_QWORD *))(v646[0] + 32);
    v269 = v646;
  }
  else
  {
    if (!v647)
      goto LABEL_259;
    v270 = (void (**)(_QWORD *))(*v647 + 40);
  }
  (*v270)(v269);
LABEL_259:
  v271 = *(_DWORD *)(a1 + 6056);
  if (v271)
    v272 = v271 - 45;
  else
    v272 = 36;
  v608 = (int64x2_t)xmmword_1C660B420;
  v609 = (int64x2_t)xmmword_1C660B430;
  v610 = xmmword_1C660B390;
  v611 = xmmword_1C676B660;
  v612 = xmmword_1C676B670;
  v613 = xmmword_1C676B680;
  *(_QWORD *)&v558 = 513;
  v273 = sub_1C6146774(a1 + 168 * v272 + 8, 0, &v608, 12, &v558, 1);
  v636 = xmmword_1C676B690;
  *(_QWORD *)&v637 = 39321858;
  *(_QWORD *)&v556 = 257;
  v274 = sub_1C6146774(v273, 0, &v636, 3, &v556, 1);
  v644[0] = &off_1E7FACD20;
  v645 = v644;
  sub_1C49328CC(v274, v644);
  v275 = v645;
  if (v645 == v644)
  {
    v276 = (void (**)(_QWORD *))(v644[0] + 32);
    v275 = v644;
  }
  else
  {
    if (!v645)
      goto LABEL_267;
    v276 = (void (**)(_QWORD *))(*v645 + 40);
  }
  (*v276)(v275);
LABEL_267:
  v277 = *(_DWORD *)(a1 + 5888);
  if (v277)
    v278 = v277 - 45;
  else
    v278 = 35;
  *(_QWORD *)&v558 = 513;
  v608 = (int64x2_t)xmmword_1C660B420;
  v609 = (int64x2_t)xmmword_1C660B430;
  v610 = xmmword_1C660B390;
  v611 = xmmword_1C676B660;
  v612 = xmmword_1C676B670;
  v613 = xmmword_1C676B680;
  v279 = sub_1C6146774(a1 + 168 * v278 + 8, 0, &v558, 1, &v608, 12);
  *(_QWORD *)&v556 = 257;
  v636 = xmmword_1C676B690;
  *(_QWORD *)&v637 = 39321858;
  v280 = sub_1C6146774(v279, 0, &v556, 1, &v636, 3);
  v642[0] = &off_1E7FACD68;
  v643 = v642;
  sub_1C49328CC(v280, v642);
  v281 = v643;
  if (v643 == v642)
  {
    v282 = (void (**)(_QWORD *))(v642[0] + 32);
    v281 = v642;
LABEL_274:
    (*v282)(v281);
    goto LABEL_275;
  }
  if (v643)
  {
    v282 = (void (**)(_QWORD *))(*v643 + 40);
    goto LABEL_274;
  }
LABEL_275:
  v283 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  isPositionIndependent = llvm::TargetMachine::isPositionIndependent(*(llvm::TargetMachine **)(v283 + 8));
  v285 = 0;
  v608 = (int64x2_t)xmmword_1C660B440;
  v609 = (int64x2_t)xmmword_1C660B380;
  v610 = xmmword_1C660B420;
  v611 = xmmword_1C660B450;
  v612 = xmmword_1C676B6A0;
  v613 = xmmword_1C676B6B0;
  v614 = xmmword_1C676B680;
  *(_QWORD *)&v615 = 3146242;
  do
  {
    v286 = v608.i64[v285];
    *(_QWORD *)&v636 = 193;
    *((_QWORD *)&v636 + 1) = v286;
    sub_1C4932AEC(v6, (uint64_t)&v636, 8);
    ++v285;
  }
  while (v285 != 15);
  v608.i64[0] = 70;
  v608.i64[1] = 514;
  sub_1C4932AEC(v6, (uint64_t)&v608, 8);
  v608.i64[0] = 71;
  v608.i64[1] = 33554946;
  sub_1C4932AEC(v6, (uint64_t)&v608, 8);
  v608.i64[0] = 71;
  v608.i64[1] = 1573122;
  sub_1C4932AEC(v6, (uint64_t)&v608, 8);
  v608.i64[0] = 71;
  v608.i64[1] = 1573378;
  sub_1C4932AEC(v6, (uint64_t)&v608, 8);
  v608.i64[0] = 71;
  v608.i64[1] = 1049090;
  if (isPositionIndependent)
    v287 = 0;
  else
    v287 = 8;
  sub_1C4932AEC(v6, (uint64_t)&v608, v287);
  v608.i64[0] = 71;
  v608.i64[1] = 2621698;
  sub_1C4932AEC(v6, (uint64_t)&v608, 8);
  v608.i64[0] = 71;
  v608.i64[1] = 39321858;
  sub_1C4932AEC(v6, (uint64_t)&v608, 8);
  v608.i64[0] = 71;
  v608.i64[1] = 514;
  sub_1C4932AEC(v6, (uint64_t)&v608, 0);
  *(_QWORD *)&v556 = 0x600000005ALL;
  v288 = sub_1C553C5E0(a1, (int *)&v556, 2);
  v608 = (int64x2_t)xmmword_1C660B2D0;
  v609 = (int64x2_t)xmmword_1C676B6C0;
  v610 = xmmword_1C660B320;
  v611 = xmmword_1C676B6D0;
  v612 = xmmword_1C660B2F0;
  v613 = xmmword_1C660B5A0;
  v614 = xmmword_1C660B330;
  v615 = xmmword_1C660B550;
  v616 = xmmword_1C660B560;
  v617 = xmmword_1C660B350;
  v618 = xmmword_1C660B600;
  v619 = xmmword_1C676B5E0;
  *(_QWORD *)&v620 = 0x8000000000800024;
  v636 = xmmword_1C660B420;
  v637 = xmmword_1C660B4E0;
  v638 = xmmword_1C660B4F0;
  v639 = xmmword_1C676B600;
  v640 = xmmword_1C676B610;
  v641 = 41943554;
  v289 = sub_1C6146774(v288, 8, &v608, 25, &v636, 11);
  v635 = 257;
  v558 = xmmword_1C660B3A0;
  v290 = sub_1C6146774(v289, 8, &v635, 1, &v558, 2);
  v291 = (char *)operator new(0x60uLL);
  *(_QWORD *)v291 = &off_1E7FACDB0;
  *(_OWORD *)(v291 + 8) = xmmword_1C660B420;
  *(_OWORD *)(v291 + 24) = xmmword_1C660B4E0;
  *(_OWORD *)(v291 + 40) = xmmword_1C660B4F0;
  *(_OWORD *)(v291 + 56) = xmmword_1C676B600;
  *(_OWORD *)(v291 + 72) = xmmword_1C676B6E0;
  *((_QWORD *)v291 + 11) = 3146242;
  v634 = v291;
  v292 = sub_1C49328CC(v290, v633);
  v293 = sub_1C49329B4(v292, 0, 0x41uLL);
  v294 = sub_1C4932D5C(v293, 0, 0x201uLL);
  v295 = sub_1C49325E4(v294, 0, 0);
  v296 = sub_1C4953808(v295, 0, 65, 2);
  v297 = sub_1C495392C(v296, 0, 65, 16);
  v298 = sub_1C4953808(v297, 0, 129, 2);
  v299 = sub_1C495392C(v298, 0, 129, 8);
  v300 = sub_1C4953808(v299, 0, 257, 2);
  v301 = sub_1C495392C(v300, 0, 257, 4);
  v302 = sub_1C4953808(v301, 0, 513, 2);
  v303 = sub_1C495392C(v302, 0, 513, 2);
  v304 = sub_1C4953808(v303, 0, 0x8000000000000081, 2);
  v305 = sub_1C495392C(v304, 0, 0x8000000000000081, 4);
  sub_1C4932B64(v305);
  v306 = v634;
  if (v634 == v633)
  {
    v307 = (void (**)(_QWORD *))(v633[0] + 32);
    v306 = v633;
    v308 = v539;
  }
  else
  {
    v308 = v539;
    if (!v634)
      goto LABEL_285;
    v307 = (void (**)(_QWORD *))(*v634 + 40);
  }
  (*v307)(v306);
LABEL_285:
  v608.i64[0] = 0x5C0000005BLL;
  v309 = sub_1C553C5E0(a1, v608.i32, 2);
  v310 = sub_1C6145CC8(v309);
  sub_1C6145D70(v310);
  v311 = *(_DWORD *)(a1 + 13448);
  if (v311)
    v312 = v311 - 45;
  else
    v312 = 80;
  sub_1C6145904(a1 + 168 * v312 + 8);
  v608 = (int64x2_t)xmmword_1C676C8C0;
  v609 = (int64x2_t)unk_1C676C8D0;
  v610 = xmmword_1C676C8E0;
  v313 = sub_1C553C5E0(a1, v608.i32, 12);
  *(_QWORD *)&v558 = 257;
  v636 = xmmword_1C660B3A0;
  v637 = xmmword_1C660B3B0;
  v638 = xmmword_1C676B6F0;
  v314 = sub_1C6146774(v313, 8, &v558, 1, &v636, 6);
  v631[0] = &unk_1E7FACDF8;
  v631[1] = 513;
  v632 = v631;
  sub_1C49328CC(v314, v631);
  v315 = v632;
  if (v632 == v631)
  {
    v316 = (void (**)(_QWORD *))(v631[0] + 32);
    v315 = v631;
  }
  else
  {
    if (!v632)
      goto LABEL_293;
    v316 = (void (**)(_QWORD *))(*v632 + 40);
  }
  (*v316)(v315);
LABEL_293:
  v317 = *(_DWORD *)(a1 + 8912);
  if (v317)
    v318 = v317 - 45;
  else
    v318 = 53;
  v629[0] = &off_1E7FACE40;
  v629[1] = 257;
  v630 = v629;
  sub_1C49328CC(a1 + 168 * v318 + 8, v629);
  v319 = v630;
  if (v630 == v629)
  {
    v320 = (void (**)(_QWORD *))(v629[0] + 32);
    v319 = v629;
  }
  else
  {
    if (!v630)
      goto LABEL_301;
    v320 = (void (**)(_QWORD *))(*v630 + 40);
  }
  (*v320)(v319);
LABEL_301:
  v321 = *(_DWORD *)(a1 + 6224);
  if (v321)
    v322 = v321 - 45;
  else
    v322 = 37;
  v323 = a1 + 168 * v322 + 8;
  v625[0] = &off_1E816E408;
  v625[1] = 0x100000000;
  v626 = v625;
  sub_1C4932C0C(v625, (uint64_t)v627);
  v324 = sub_1C6145E60(v323, v627);
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609 = (int64x2_t)xmmword_1C660B500;
  v610 = xmmword_1C660B510;
  v611 = xmmword_1C676B700;
  v612 = xmmword_1C676B710;
  v613 = xmmword_1C676B720;
  v614 = xmmword_1C660B2F0;
  v615 = xmmword_1C660B630;
  v616 = xmmword_1C660B4A0;
  v617 = xmmword_1C660B4B0;
  v618 = xmmword_1C660B4C0;
  v619 = xmmword_1C676B5E0;
  v620 = xmmword_1C676B730;
  v621 = xmmword_1C676B740;
  v622 = xmmword_1C660B350;
  v623 = xmmword_1C660B570;
  v624 = 33554460;
  v325 = sub_1C6146CB0(v324, 0, &v608, 33);
  v326 = sub_1C49329B4(v325, 0, 0x81uLL);
  v327 = sub_1C4932D5C(v326, 0, 0x401uLL);
  v328 = sub_1C49329B4(v327, 1u, 0x81uLL);
  v329 = sub_1C4932D5C(v328, 1u, 0x401uLL);
  v330 = sub_1C6145F48(v329, 0, 0);
  v331 = sub_1C6145F48(v330, 1, 0);
  v332 = sub_1C6146E00(v331, 0, 0x41uLL);
  v333 = sub_1C6146F28(v332, 0, 0x401uLL);
  v334 = sub_1C6146E00(v333, 1, 0x41uLL);
  v335 = sub_1C6146F28(v334, 1, 0x401uLL);
  v606[0] = &off_1E816E258;
  v606[1] = 0x1000000000;
  v607 = v606;
  v604[0] = &off_1E816E6D8;
  v604[1] = 0x1000000000;
  v605 = v604;
  v336 = sub_1C6145434(v335, v606, v604);
  v602[0] = &off_1E816E258;
  v602[1] = 0x1000000001;
  v603 = v602;
  v600[0] = &off_1E816E6D8;
  v600[1] = 0x1000000001;
  v601 = v600;
  v337 = sub_1C6145434(v336, v602, v600);
  v598[0] = &off_1E816E2A0;
  v598[1] = 0x8000000000;
  v599 = v598;
  v596[0] = &off_1E816E720;
  v596[1] = 0x8000000000;
  v597 = v596;
  v338 = sub_1C6146050(v337, v598, v596);
  v594[0] = &off_1E816E2A0;
  v594[1] = 0x8000000001;
  v595 = v594;
  v592[0] = &off_1E816E720;
  v592[1] = 0x8000000001;
  v593 = v592;
  v339 = sub_1C6146050(v338, v594, v592);
  v340 = sub_1C61455A0(v339, 0);
  v341 = sub_1C61455A0(v340, 1);
  v342 = sub_1C4953808(v341, 0, 513, 2);
  v343 = sub_1C495392C(v342, 0, 513, 4);
  v344 = sub_1C4953808(v343, 1u, 513, 2);
  sub_1C495392C(v344, 1u, 513, 4);
  v345 = v593;
  if (v593 == v592)
  {
    v346 = (void (**)(_QWORD *))(v592[0] + 32);
    v345 = v592;
    v347 = v536;
  }
  else
  {
    v347 = v536;
    if (!v593)
      goto LABEL_309;
    v346 = (void (**)(_QWORD *))(*v593 + 40);
  }
  (*v346)(v345);
LABEL_309:
  v348 = v595;
  if (v595 == v594)
  {
    v349 = (void (**)(_QWORD *))(v594[0] + 32);
    v348 = v594;
  }
  else
  {
    if (!v595)
      goto LABEL_314;
    v349 = (void (**)(_QWORD *))(*v595 + 40);
  }
  (*v349)(v348);
LABEL_314:
  v350 = v597;
  if (v597 == v596)
  {
    v351 = (void (**)(_QWORD *))(v596[0] + 32);
    v350 = v596;
  }
  else
  {
    if (!v597)
      goto LABEL_319;
    v351 = (void (**)(_QWORD *))(*v597 + 40);
  }
  (*v351)(v350);
LABEL_319:
  v352 = v599;
  if (v599 == v598)
  {
    v353 = (void (**)(_QWORD *))(v598[0] + 32);
    v352 = v598;
  }
  else
  {
    if (!v599)
      goto LABEL_324;
    v353 = (void (**)(_QWORD *))(*v599 + 40);
  }
  (*v353)(v352);
LABEL_324:
  v354 = v601;
  if (v601 == v600)
  {
    v355 = (void (**)(_QWORD *))(v600[0] + 32);
    v354 = v600;
  }
  else
  {
    if (!v601)
      goto LABEL_329;
    v355 = (void (**)(_QWORD *))(*v601 + 40);
  }
  (*v355)(v354);
LABEL_329:
  v356 = v603;
  if (v603 == v602)
  {
    v357 = (void (**)(_QWORD *))(v602[0] + 32);
    v356 = v602;
  }
  else
  {
    if (!v603)
      goto LABEL_334;
    v357 = (void (**)(_QWORD *))(*v603 + 40);
  }
  (*v357)(v356);
LABEL_334:
  v358 = v605;
  if (v605 == v604)
  {
    v359 = (void (**)(_QWORD *))(v604[0] + 32);
    v358 = v604;
  }
  else
  {
    if (!v605)
      goto LABEL_339;
    v359 = (void (**)(_QWORD *))(*v605 + 40);
  }
  (*v359)(v358);
LABEL_339:
  v360 = v607;
  if (v607 == v606)
  {
    v361 = (void (**)(_QWORD *))(v606[0] + 32);
    v360 = v606;
  }
  else
  {
    if (!v607)
      goto LABEL_344;
    v361 = (void (**)(_QWORD *))(*v607 + 40);
  }
  (*v361)(v360);
LABEL_344:
  v362 = v628;
  if (v628 == v627)
  {
    v363 = (void (**)(_QWORD *))(v627[0] + 32);
    v362 = v627;
  }
  else
  {
    if (!v628)
      goto LABEL_349;
    v363 = (void (**)(_QWORD *))(*v628 + 40);
  }
  (*v363)(v362);
LABEL_349:
  v364 = v626;
  if (v626 == v625)
  {
    v365 = (void (**)(_QWORD *))(v625[0] + 32);
    v364 = v625;
  }
  else
  {
    if (!v626)
      goto LABEL_354;
    v365 = (void (**)(_QWORD *))(*v626 + 40);
  }
  (*v365)(v364);
LABEL_354:
  *(_QWORD *)&v558 = 0x7C00000076;
  DWORD2(v558) = 126;
  v366 = sub_1C553C5E0(a1, (int *)&v558, 3);
  v608 = (int64x2_t)xmmword_1C660B320;
  v636 = xmmword_1C660B3C0;
  v367 = sub_1C6146774(v366, 0, &v608, 2, &v636, 2);
  v368 = sub_1C49329B4(v367, 0, 0x101uLL);
  v369 = sub_1C4932D5C(v368, 0, 0x201uLL);
  v370 = sub_1C49325E4(v369, 0, 0);
  v371 = sub_1C49329B4(v370, 1u, 0x81uLL);
  v372 = sub_1C4932D5C(v371, 1u, 0x101uLL);
  v373 = sub_1C49325E4(v372, 1u, 0);
  v590[0] = &off_1E7FAC7C8;
  v591 = v590;
  sub_1C49328CC(v373, v590);
  v374 = v591;
  if (v591 == v590)
  {
    v375 = (void (**)(_QWORD *))(v590[0] + 32);
    v374 = v590;
  }
  else
  {
    if (!v591)
      goto LABEL_359;
    v375 = (void (**)(_QWORD *))(*v591 + 40);
  }
  (*v375)(v374);
LABEL_359:
  v376 = *(_DWORD *)(a1 + 12440);
  if (v376)
    v377 = v376 - 45;
  else
    v377 = 74;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v636 = xmmword_1C660B320;
  v378 = sub_1C6146774(a1 + 168 * v377 + 8, 0, &v608, 2, &v636, 2);
  v379 = sub_1C4932D5C(v378, 0, 0x101uLL);
  v380 = sub_1C4932D5C(v379, 1u, 0x201uLL);
  v588[0] = &off_1E7FAC7C8;
  v589 = v588;
  v381 = sub_1C49328CC(v380, v588);
  sub_1C61461BC(v381);
  v382 = v589;
  if (v589 == v588)
  {
    v383 = (void (**)(_QWORD *))(v588[0] + 32);
    v382 = v588;
  }
  else
  {
    if (!v589)
      goto LABEL_367;
    v383 = (void (**)(_QWORD *))(*v589 + 40);
  }
  (*v383)(v382);
LABEL_367:
  if (*v347)
    v384 = *v347 - 45;
  else
    v384 = 159;
  v385 = a1 + 168 * v384 + 8;
  v386 = (char *)operator new(0x38uLL);
  *(_QWORD *)v386 = &off_1E7FACE88;
  *(_OWORD *)(v386 + 8) = xmmword_1C660B2D0;
  *(_OWORD *)(v386 + 24) = xmmword_1C676B6C0;
  *(_OWORD *)(v386 + 40) = xmmword_1C660B320;
  v587 = v386;
  sub_1C49328CC(v385, v586);
  v387 = v587;
  if (v587 == v586)
  {
    v388 = (void (**)(_QWORD *))(v586[0] + 32);
    v387 = v586;
  }
  else
  {
    if (!v587)
      goto LABEL_375;
    v388 = (void (**)(_QWORD *))(*v587 + 40);
  }
  (*v388)(v387);
LABEL_375:
  v389 = v347[42];
  if (v389)
    v390 = v389 - 45;
  else
    v390 = 160;
  v636 = xmmword_1C660B3C0;
  *(_QWORD *)&v637 = 0x8000000000000081;
  v608 = (int64x2_t)xmmword_1C660B330;
  v609 = (int64x2_t)xmmword_1C660B550;
  v610 = xmmword_1C660B560;
  v611 = xmmword_1C660B350;
  v612 = xmmword_1C676B5E0;
  v613 = xmmword_1C676B730;
  *(_QWORD *)&v614 = 0x8000000000800044;
  *(_QWORD *)&v558 = 257;
  v391 = sub_1C6147050(a1 + 168 * v390 + 8, 0, &v636, 3, &v608, 13, &v558, 1);
  v392 = (char *)operator new(0x48uLL);
  *(_QWORD *)v392 = &off_1E7FACED0;
  *(_OWORD *)(v392 + 8) = xmmword_1C660B580;
  *(_OWORD *)(v392 + 24) = xmmword_1C660B590;
  *(_OWORD *)(v392 + 40) = xmmword_1C660B3C0;
  *(_OWORD *)(v392 + 56) = xmmword_1C676B750;
  v585 = v392;
  sub_1C49328CC(v391, v584);
  v393 = v585;
  if (v585 == v584)
  {
    v394 = (void (**)(_QWORD *))(v584[0] + 32);
    v393 = v584;
  }
  else
  {
    if (!v585)
      goto LABEL_383;
    v394 = (void (**)(_QWORD *))(*v585 + 40);
  }
  (*v394)(v393);
LABEL_383:
  if (*v537)
    v395 = *v537 - 45;
  else
    v395 = 161;
  v396 = a1 + 168 * v395 + 8;
  v397 = (char *)operator new(0x38uLL);
  *(_QWORD *)v397 = &off_1E7FACF18;
  *(_OWORD *)(v397 + 8) = xmmword_1C660B2D0;
  *(_OWORD *)(v397 + 24) = xmmword_1C676B6C0;
  *(_OWORD *)(v397 + 40) = xmmword_1C660B320;
  v583 = v397;
  sub_1C614626C(v396, v582);
  v398 = v583;
  if (v583 == v582)
  {
    v399 = (void (**)(_QWORD *))(v582[0] + 32);
    v398 = v582;
  }
  else
  {
    if (!v583)
      goto LABEL_391;
    v399 = (void (**)(_QWORD *))(*v583 + 40);
  }
  (*v399)(v398);
LABEL_391:
  v400 = *(_DWORD *)(a1 + 5720);
  if (v400)
    v401 = v400 - 45;
  else
    v401 = 34;
  v402 = a1 + 168 * v401 + 8;
  v403 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v403 = &off_1E7FACF60;
  *(_OWORD *)(v403 + 8) = xmmword_1C660B2E0;
  *(_OWORD *)(v403 + 24) = xmmword_1C660B480;
  *(_OWORD *)(v403 + 40) = xmmword_1C660B5A0;
  *(_OWORD *)(v403 + 56) = xmmword_1C660B330;
  *(_OWORD *)(v403 + 72) = xmmword_1C660B550;
  *(_OWORD *)(v403 + 88) = xmmword_1C676B760;
  *(_OWORD *)(v403 + 104) = xmmword_1C676B770;
  *(_OWORD *)(v403 + 120) = xmmword_1C676B780;
  *(_OWORD *)(v403 + 136) = xmmword_1C660B4D0;
  *(_OWORD *)(v403 + 152) = xmmword_1C660B600;
  *((_QWORD *)v403 + 21) = 33554468;
  v581 = v403;
  sub_1C49328CC(v402, v580);
  v404 = v581;
  if (v581 == v580)
  {
    v405 = (void (**)(_QWORD *))(v580[0] + 32);
    v404 = v580;
  }
  else
  {
    if (!v581)
      goto LABEL_399;
    v405 = (void (**)(_QWORD *))(*v581 + 40);
  }
  (*v405)(v404);
LABEL_399:
  v406 = *(_DWORD *)(a1 + 4712);
  if (v406)
    v407 = v406 - 45;
  else
    v407 = 28;
  v578[0] = &off_1E7FACFA8;
  v579 = v578;
  v408 = sub_1C6145E60(a1 + 168 * v407 + 8, v578);
  v576[0] = &off_1E7FACFF0;
  v576[1] = 65;
  v577 = v576;
  v409 = sub_1C49328CC(v408, v576);
  v410 = (char *)operator new(0x20uLL);
  *(_QWORD *)v410 = &off_1E7FAD038;
  *(_OWORD *)(v410 + 8) = xmmword_1C660B300;
  *((_QWORD *)v410 + 3) = 4194372;
  v575 = v410;
  v411 = sub_1C49328CC(v409, v574);
  v412 = (char *)operator new(0x58uLL);
  *(_QWORD *)v412 = &off_1E7FAD080;
  *(_OWORD *)(v412 + 8) = xmmword_1C660B3C0;
  *(_OWORD *)(v412 + 24) = xmmword_1C660B5C0;
  *(_OWORD *)(v412 + 40) = xmmword_1C660B330;
  *(_OWORD *)(v412 + 56) = xmmword_1C660B340;
  *(_OWORD *)(v412 + 72) = xmmword_1C660B350;
  v573 = v412;
  v413 = sub_1C614534C(v411, v572);
  v570[0] = &off_1E7FAC7C8;
  v571 = v570;
  v414 = sub_1C49328CC(v413, v570);
  v415 = sub_1C49329B4(v414, 1u, 0x81uLL);
  v416 = sub_1C4932D5C(v415, 1u, 0x101uLL);
  sub_1C49325E4(v416, 1u, 0);
  v417 = v571;
  if (v571 == v570)
  {
    v418 = (void (**)(_QWORD *))(v570[0] + 32);
    v417 = v570;
  }
  else
  {
    if (!v571)
      goto LABEL_407;
    v418 = (void (**)(_QWORD *))(*v571 + 40);
  }
  (*v418)(v417);
LABEL_407:
  v419 = v573;
  if (v573 == v572)
  {
    v420 = (void (**)(_QWORD *))(v572[0] + 32);
    v419 = v572;
  }
  else
  {
    if (!v573)
      goto LABEL_412;
    v420 = (void (**)(_QWORD *))(*v573 + 40);
  }
  (*v420)(v419);
LABEL_412:
  v421 = v575;
  if (v575 == v574)
  {
    v422 = (void (**)(_QWORD *))(v574[0] + 32);
    v421 = v574;
  }
  else
  {
    if (!v575)
      goto LABEL_417;
    v422 = (void (**)(_QWORD *))(*v575 + 40);
  }
  (*v422)(v421);
LABEL_417:
  v423 = v577;
  if (v577 == v576)
  {
    v424 = (void (**)(_QWORD *))(v576[0] + 32);
    v423 = v576;
  }
  else
  {
    if (!v577)
      goto LABEL_422;
    v424 = (void (**)(_QWORD *))(*v577 + 40);
  }
  (*v424)(v423);
LABEL_422:
  v425 = v579;
  if (v579 == v578)
  {
    v426 = (void (**)(_QWORD *))(v578[0] + 32);
    v425 = v578;
LABEL_426:
    (*v426)(v425);
    goto LABEL_427;
  }
  if (v579)
  {
    v426 = (void (**)(_QWORD *))(*v579 + 40);
    goto LABEL_426;
  }
LABEL_427:
  v427 = 0;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609 = (int64x2_t)xmmword_1C660B330;
  v610 = xmmword_1C660B340;
  v611 = xmmword_1C660B350;
  do
  {
    v428 = v608.i64[v427];
    *(_QWORD *)&v636 = 75;
    *((_QWORD *)&v636 + 1) = v428;
    sub_1C4932AEC(v6, (uint64_t)&v636, 0);
    ++v427;
  }
  while (v427 != 8);
  v429 = 0;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609 = (int64x2_t)xmmword_1C660B5C0;
  *(_QWORD *)&v610 = 2049;
  do
  {
    v430 = v608.i64[v429];
    *(_QWORD *)&v636 = 0x10000004BLL;
    *((_QWORD *)&v636 + 1) = v430;
    sub_1C4932AEC(v6, (uint64_t)&v636, 0);
    ++v429;
  }
  while (v429 != 5);
  v431 = 0;
  v608 = (int64x2_t)xmmword_1C660B5D0;
  v609 = (int64x2_t)xmmword_1C660B5E0;
  do
  {
    v432 = v608.i64[v431];
    *(_QWORD *)&v636 = 0x10000004BLL;
    *((_QWORD *)&v636 + 1) = v432;
    sub_1C4932AEC(v6, (uint64_t)&v636, 8);
    ++v431;
  }
  while (v431 != 4);
  v433 = *(_DWORD *)(a1 + 11600);
  if (v433)
    v434 = v433 - 45;
  else
    v434 = 69;
  v568[0] = &off_1E7FAD0C8;
  v568[1] = 9;
  v569 = v568;
  v435 = sub_1C49328CC(a1 + 168 * v434 + 8, v568);
  v608.i64[0] = 129;
  sub_1C4952F0C(v435, 0, &v608, 1);
  v436 = v569;
  if (v569 == v568)
  {
    v437 = (void (**)(_QWORD *))(v568[0] + 32);
    v436 = v568;
  }
  else
  {
    if (!v569)
      goto LABEL_441;
    v437 = (void (**)(_QWORD *))(*v569 + 40);
  }
  (*v437)(v436);
LABEL_441:
  v608.i64[0] = 0x8700000086;
  v438 = sub_1C553C5E0(a1, v608.i32, 2);
  sub_1C61459B4(v438);
  v439 = *(_DWORD *)(a1 + 1016);
  if (v439)
    v440 = v439 - 45;
  else
    v440 = 6;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v636 = xmmword_1C660B3C0;
  v441 = sub_1C6146774(a1 + 168 * v440 + 8, 0, &v608, 2, &v636, 2);
  *(_QWORD *)&v556 = 513;
  v558 = xmmword_1C660B3C0;
  v442 = sub_1C6146774(v441, 8, &v556, 1, &v558, 2);
  v443 = (char *)operator new(0x28uLL);
  *(_QWORD *)v443 = &off_1E7FAD110;
  *(_OWORD *)(v443 + 8) = xmmword_1C660B5C0;
  *(_OWORD *)(v443 + 24) = xmmword_1C676B790;
  v567 = v443;
  v444 = sub_1C49328CC(v442, v566);
  v445 = sub_1C49329B4(v444, 0, 0x81uLL);
  v446 = sub_1C4932D5C(v445, 0, 0x101uLL);
  v447 = sub_1C49329B4(v446, 1u, 0x81uLL);
  v448 = sub_1C49325E4(v447, 0, 0);
  sub_1C49325E4(v448, 1u, 0);
  v449 = v567;
  if (v567 == v566)
  {
    v450 = (void (**)(_QWORD *))(v566[0] + 32);
    v449 = v566;
  }
  else
  {
    if (!v567)
      goto LABEL_449;
    v450 = (void (**)(_QWORD *))(*v567 + 40);
  }
  (*v450)(v449);
LABEL_449:
  v451 = a1 + 8;
  v452 = *(_DWORD *)(a1 + 1856);
  if (v452)
    v453 = v452 - 45;
  else
    v453 = 11;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609.i64[0] = 513;
  v454 = sub_1C4952F0C(v451 + 168 * v453, 0, &v608, 3);
  sub_1C61461BC(v454);
  v455 = *(_DWORD *)(a1 + 2024);
  if (v455)
    v456 = v455 - 45;
  else
    v456 = 12;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609.i64[0] = 513;
  v457 = sub_1C4952F0C(v451 + 168 * v456, 0, &v608, 3);
  sub_1C61461BC(v457);
  *(_QWORD *)&v556 = 0x3500000034;
  v458 = sub_1C553C5E0(a1, (int *)&v556, 2);
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v636 = xmmword_1C660B3C0;
  v558 = xmmword_1C660B3C0;
  v459 = sub_1C6147050(v458, 0, &v608, 2, &v636, 2, &v558, 2);
  sub_1C61461BC(v459);
  v460 = *(_DWORD *)(a1 + 1520);
  if (v460)
    v461 = v460 - 45;
  else
    v461 = 9;
  v608 = (int64x2_t)xmmword_1C660B690;
  v609.i64[0] = 257;
  v636 = xmmword_1C660B3C0;
  v462 = sub_1C6146774(v451 + 168 * v461, 0, &v608, 3, &v636, 2);
  sub_1C61461BC(v462);
  v463 = *(_DWORD *)(a1 + 1688);
  if (v463)
    v464 = v463 - 45;
  else
    v464 = 10;
  v608 = (int64x2_t)xmmword_1C660B3C0;
  v609 = (int64x2_t)xmmword_1C676B7A0;
  v610 = xmmword_1C676B7B0;
  v611 = xmmword_1C676B7C0;
  v636 = xmmword_1C660B690;
  *(_QWORD *)&v637 = 257;
  v465 = sub_1C6146774(v451 + 168 * v464, 0, &v608, 8, &v636, 3);
  sub_1C61461BC(v465);
  v466 = *(_DWORD *)(a1 + 15296);
  if (v466)
    v467 = v466 - 45;
  else
    v467 = 91;
  v468 = v451 + 168 * v467;
  v469 = (char *)operator new(0x88uLL);
  *(_QWORD *)v469 = &off_1E7FAD158;
  *(_OWORD *)(v469 + 8) = xmmword_1C676B630;
  *(_OWORD *)(v469 + 24) = xmmword_1C660B320;
  *(_OWORD *)(v469 + 40) = xmmword_1C660B300;
  *(_OWORD *)(v469 + 56) = xmmword_1C676B5E0;
  *(_OWORD *)(v469 + 72) = xmmword_1C676B7D0;
  *(_OWORD *)(v469 + 88) = xmmword_1C660B4B0;
  *(_OWORD *)(v469 + 104) = xmmword_1C660B4D0;
  *(_OWORD *)(v469 + 120) = xmmword_1C660B600;
  v565 = v469;
  v470 = sub_1C49328CC(v468, v564);
  v471 = sub_1C49329B4(v470, 0, 0x81uLL);
  v472 = sub_1C4932D5C(v471, 0, 0x201uLL);
  v473 = sub_1C49325E4(v472, 0, 0);
  v474 = sub_1C4953808(v473, 0, 65, 2);
  v475 = sub_1C495392C(v474, 0, 65, 4);
  v562[0] = &unk_1E7FAD1A0;
  v562[1] = 4194332;
  v563 = v562;
  v560[0] = &off_1E816E690;
  v560[1] = 0;
  v561 = v560;
  v476 = sub_1C6145434(v475, v562, v560);
  v477 = sub_1C4953808(v476, 0, 129, 2);
  v478 = sub_1C495392C(v477, 0, 129, 4);
  v479 = sub_1C4953808(v478, 0, 257, 2);
  v480 = sub_1C495392C(v479, 0, 257, 4);
  v481 = sub_1C4953808(v480, 0, 513, 2);
  sub_1C495392C(v481, 0, 513, 2);
  v482 = v561;
  if (v561 == v560)
  {
    v483 = (void (**)(_QWORD *))(v560[0] + 32);
    v482 = v560;
    v484 = v538;
  }
  else
  {
    v484 = v538;
    if (!v561)
      goto LABEL_469;
    v483 = (void (**)(_QWORD *))(*v561 + 40);
  }
  (*v483)(v482);
LABEL_469:
  v485 = v563;
  if (v563 == v562)
  {
    v486 = (void (**)(_QWORD *))(v562[0] + 32);
    v485 = v562;
  }
  else
  {
    if (!v563)
      goto LABEL_474;
    v486 = (void (**)(_QWORD *))(*v563 + 40);
  }
  (*v486)(v485);
LABEL_474:
  v487 = v565;
  if (v565 == v564)
  {
    v488 = (void (**)(_QWORD *))(v564[0] + 32);
    v487 = v564;
  }
  else
  {
    if (!v565)
      goto LABEL_479;
    v488 = (void (**)(_QWORD *))(*v565 + 40);
  }
  (*v488)(v487);
LABEL_479:
  v489 = a1 + 8;
  v490 = *(_DWORD *)(a1 + 5384);
  if (v490)
    v491 = v490 - 45;
  else
    v491 = 32;
  v608 = (int64x2_t)xmmword_1C660B330;
  v609 = (int64x2_t)xmmword_1C660B610;
  v610 = xmmword_1C660B620;
  v611 = xmmword_1C660B560;
  v612 = xmmword_1C660B350;
  v613 = xmmword_1C676B7E0;
  v614 = xmmword_1C676B7F0;
  v615 = xmmword_1C676B800;
  v616 = xmmword_1C676B770;
  v617 = xmmword_1C676B810;
  v618 = xmmword_1C676B820;
  v558 = xmmword_1C660B3C0;
  v559 = 0x8000000000000081;
  v492 = sub_1C6146774(v489 + 168 * v491, 0, &v608, 22, &v558, 3);
  v636 = xmmword_1C660B2E0;
  v637 = xmmword_1C660B2F0;
  v638 = xmmword_1C660B630;
  v639 = xmmword_1C660B640;
  v556 = xmmword_1C660B2D0;
  v557 = 513;
  sub_1C6146774(v492, 8, &v636, 8, &v556, 3);
  v493 = *(_DWORD *)(a1 + 5552);
  if (v493)
    v494 = v493 - 45;
  else
    v494 = 33;
  v608 = (int64x2_t)xmmword_1C660B2E0;
  v609 = (int64x2_t)xmmword_1C660B2F0;
  v610 = xmmword_1C660B630;
  *(_QWORD *)&v611 = 4194436;
  *(_QWORD *)&v636 = 129;
  sub_1C6146774(v489 + 168 * v494, 0, &v608, 7, &v636, 1);
  v495 = *(_DWORD *)(a1 + 5216);
  if (v495)
    v496 = v495 - 45;
  else
    v496 = 31;
  v553 = &off_1E7FAD1E8;
  v554 = xmmword_1C660B650;
  v555 = &v553;
  v497 = sub_1C49328CC(v489 + 168 * v496, &v553);
  v498 = (char *)operator new(0x30uLL);
  *(_QWORD *)v498 = &off_1E7FAD230;
  *(_OWORD *)(v498 + 8) = xmmword_1C676B6C0;
  *((_DWORD *)v498 + 6) = v484;
  *((_QWORD *)v498 + 4) = 257;
  *((_DWORD *)v498 + 10) = v308;
  v552 = v498;
  v499 = sub_1C614534C(v497, v551);
  v500 = v545;
  v501 = sub_1C49329B4(v499, 0, 0x101uLL);
  sub_1C4932D5C(v501, 0, v500);
  v502 = v552;
  if (v552 == v551)
  {
    v503 = (void (**)(_QWORD *))(v551[0] + 32);
    v502 = v551;
  }
  else
  {
    if (!v552)
      goto LABEL_493;
    v503 = (void (**)(_QWORD *))(*v552 + 40);
  }
  (*v503)(v502);
LABEL_493:
  v504 = v555;
  if (v555 == &v553)
  {
    v505 = (void (**)(uint64_t (***)()))(v553 + 4);
    v504 = &v553;
  }
  else
  {
    if (!v555)
      goto LABEL_498;
    v505 = (void (**)(uint64_t (***)()))(*v555 + 5);
  }
  (*v505)(v504);
LABEL_498:
  v506 = *(_DWORD *)(a1 + 4880);
  if (v506)
    v507 = v506 - 45;
  else
    v507 = 29;
  v508 = a1 + 168 * v507 + 8;
  v509 = (char *)operator new(0x30uLL);
  *(_QWORD *)v509 = &off_1E7FAD278;
  *(_OWORD *)(v509 + 8) = xmmword_1C660B650;
  *(_OWORD *)(v509 + 24) = xmmword_1C660B660;
  *((_QWORD *)v509 + 5) = 0x8000000000800024;
  v550 = v509;
  v510 = sub_1C49328CC(v508, v549);
  v511 = (char *)operator new(0x38uLL);
  *(_QWORD *)v511 = &off_1E7FAD2C0;
  *(_OWORD *)(v511 + 8) = xmmword_1C660B3C0;
  *(_OWORD *)(v511 + 24) = xmmword_1C676B830;
  *((_QWORD *)v511 + 5) = 0x8000000000800014;
  *((_DWORD *)v511 + 12) = v308;
  v548 = v511;
  v512 = sub_1C614534C(v510, v547);
  v513 = v545;
  v514 = sub_1C49329B4(v512, 1u, 0x81uLL);
  sub_1C4932D5C(v514, 1u, v513);
  v515 = v548;
  if (v548 == v547)
  {
    v516 = (void (**)(_QWORD *))(v547[0] + 32);
    v515 = v547;
  }
  else
  {
    if (!v548)
      goto LABEL_506;
    v516 = (void (**)(_QWORD *))(*v548 + 40);
  }
  (*v516)(v515);
LABEL_506:
  v517 = v550;
  if (v550 == v549)
  {
    v518 = (void (**)(_QWORD *))(v549[0] + 32);
    v517 = v549;
  }
  else
  {
    if (!v550)
      goto LABEL_511;
    v518 = (void (**)(_QWORD *))(*v550 + 40);
  }
  (*v518)(v517);
LABEL_511:
  v608 = (int64x2_t)xmmword_1C660B670;
  v519 = sub_1C553C5E0(a1, v608.i32, 4);
  sub_1C6145904(v519);
  v520 = a1 + 8;
  v521 = *(_DWORD *)(a1 + 2192);
  if (v521)
    v522 = v521 - 45;
  else
    v522 = 13;
  v608 = vdupq_n_s64(0x101uLL);
  v523 = sub_1C4952F0C(v520 + 168 * v522, 0, &v608, 2);
  v524 = sub_1C49329B4(v523, 0, 0x101uLL);
  v525 = sub_1C4932D5C(v524, 0, 0x101uLL);
  v526 = sub_1C49329B4(v525, 1u, 0x101uLL);
  v527 = sub_1C4932D5C(v526, 1u, 0x101uLL);
  sub_1C614580C(v527, 0);
  v528 = *(_DWORD *)(a1 + 6560);
  if (v528)
    v529 = v528 - 45;
  else
    v529 = 39;
  v608 = (int64x2_t)xmmword_1C676B6C0;
  *(_QWORD *)&v636 = 257;
  v530 = sub_1C6146774(v520 + 168 * v529, 8, &v608, 2, &v636, 1);
  sub_1C61461BC(v530);
  v531 = *(_DWORD *)(a1 + 6896);
  if (v531)
    v532 = v531 - 45;
  else
    v532 = 41;
  sub_1C61459B4(v520 + 168 * v532);
  sub_1C553D3C4(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  return a1;
}

uint64_t sub_1C4A65DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int *v9;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;
  const char *v23;
  unint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  int v29;
  uint64_t v30;
  const char *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int GenericVirtualRegister;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  unint64_t v46;
  uint64_t v47;
  int *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  int v56;
  void *v57;
  void *v58;
  void *v59;
  const char *v60;
  unsigned int v61;
  void *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char v76;
  void *v77;
  unint64_t v78;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  __int128 v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char v88[12];
  int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  int v96;
  void *v97;
  uint64_t v98;
  _BYTE v99[16];
  void *v100[2];
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;

  v5 = a2;
  v104 = *MEMORY[0x1E0C80C00];
  v6 = a4[1];
  v7 = (unint64_t *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 48);
  if (v8 < 8)
  {
    v11 = 0;
  }
  else
  {
    if ((v8 & 7) == 0)
    {
      v8 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a2 + 48) = v8;
      v12 = (int *)(a2 + 56);
      v11 = (int *)(a2 + 48);
      goto LABEL_13;
    }
    v9 = (int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((*(_QWORD *)(a2 + 48) & 7) != 3 || v9 == 0)
    {
      v11 = 0;
LABEL_17:
      if ((v8 & 7) != 0)
      {
        v15 = 0;
        if ((v8 & 7) == 3 && (v16 = (int *)(v8 & 0xFFFFFFFFFFFFFFF8), (v8 & 0xFFFFFFFFFFFFFFF8) != 0))
        {
          v17 = *v16;
          v15 = v16 + 2;
        }
        else
        {
          v17 = 0;
        }
      }
      else
      {
        v8 &= 0xFFFFFFFFFFFFFFF8;
        *v7 = v8;
        v17 = 1;
        v15 = (int *)(a2 + 48);
      }
      goto LABEL_22;
    }
    v14 = *v9;
    v11 = v9 + 2;
    v13 = v14;
    if (!(_DWORD)v14)
      goto LABEL_17;
    v12 = &v11[2 * v13];
LABEL_13:
    while ((*(_WORD *)(*(_QWORD *)v11 + 36) & 0xF00) == 0)
    {
      v11 += 2;
      if (v11 == v12)
      {
        v11 = v12;
        break;
      }
    }
    if (v8 >= 8)
      goto LABEL_17;
  }
  v15 = 0;
  v17 = 0;
LABEL_22:
  if (v11 != &v15[2 * v17] && *(_QWORD *)v11)
    return 0;
  if ((v8 & 7) != 0)
  {
    v18 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v18 = v8 & 0xFFFFFFFFFFFFFFF8;
    *v7 = v8 & 0xFFFFFFFFFFFFFFF8;
  }
  v19 = *(_BYTE *)(v18 + 34);
  v20 = *(_QWORD *)(v18 + 8);
  if ((*(_QWORD *)(v18 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v22 = (unint64_t)(sub_1C4825F50((unint64_t *)(v18 + 24)) + 7) >> 3;
    if ((_DWORD)v21 == 1)
  }
  else
  {
    v22 = -1;
  }
  sub_1C4A6086C((uint64_t)v88, v5, a3);
  v24 = v91;
  if ((v91 & 0xFFFFFFFFFFFFFFF9) != 0 && (v91 & 6) == 4)
  {
    v25 = 3;
    if ((v91 & 1) == 0)
      v25 = 19;
    if ((v91 & 0x8000000000000000 | (8 * (v91 >> v25))) == 0x40)
    {
      if ((v91 & 0x8000000000000) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v23);
        v24 = v91;
      }
      if ((unsigned __int16)(v24 >> 3) <= 4u)
      {
        v66 = (1 << *(_BYTE *)(v93 + 34)) | *(_QWORD *)(v93 + 8);
        if ((v66 & -v66) == 1)
          return 0;
      }
    }
  }
  result = 0;
  v27 = __clz(((1 << v19) | v20) & -((1 << v19) | v20));
  if ((63 - v27) <= 1u && (1 << (63 - v27)) % v22)
  {
    if (v27 != 63 && v22 < 9)
      return 0;
    v29 = v89;
    v30 = v90;
    v86 = v92;
    v87 = v24;
    v32 = sub_1C4825F50(&v86);
    if ((_DWORD)v31 == 1)
    v78 = v30 & 0x7FFFFFFF;
    v33 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * v78 + 8);
    if ((int)v30 >= 0)
      v33 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * v30);
    v34 = *v33;
    if (v34)
    {
      v67 = v22;
      v68 = v29;
      if (((*(_BYTE *)(v34 + 3) & 1) != 0 || (v34 = *(_QWORD *)(v34 + 24)) != 0 && (*(_BYTE *)(v34 + 3) & 1) != 0)
        && (v69 = *(_QWORD *)(v34 + 8)) != 0
        && ((v70 = **(unsigned __int16 **)(v69 + 16), v70 == 193) || v70 == 45)
        && (v75 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v69 + 32) + 68), a3), v71))
      {
        v76 = 0;
        v74 = *(_DWORD *)(*(_QWORD *)(v69 + 32) + 36);
      }
      else
      {
        v75 = 0;
        v74 = 0;
        v76 = 1;
      }
      v29 = v68;
      v22 = v67;
    }
    else
    {
      v75 = 0;
      v74 = 0;
      v76 = 1;
    }
    v97 = v99;
    v98 = 0x400000000;
    v35 = v22;
    if (v22)
    {
      v72 = v24;
      v73 = v5;
      v36 = 0;
      v77 = (void *)((8 * v32) | 1);
      v37 = v6 + 128;
      v38 = 1;
      do
      {
        GenericVirtualRegister = v30;
        if (v38 != 1)
        {
          v40 = 0;
          if ((v30 & 0x80000000) != 0 && v78 < *(unsigned int *)(a3 + 432))
            v40 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v78);
          GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a3, v40, "", 0);
          v100[0] = v77;
          LODWORD(v100[1]) = 0;
          if ((v76 & 1) != 0)
          {
            sub_1C5544694((uint64_t)a4, (unint64_t *)v100, v36);
            v42 = *(_DWORD *)(*(_QWORD *)(v41 + 32) + 4);
            LODWORD(v94) = GenericVirtualRegister;
            LODWORD(v95) = 1;
            LODWORD(v100[0]) = v30;
          }
          else
          {
            sub_1C5544694((uint64_t)a4, (unint64_t *)v100, v36 + v75);
            v42 = *(_DWORD *)(*(_QWORD *)(v43 + 32) + 4);
            LODWORD(v94) = GenericVirtualRegister;
            LODWORD(v95) = 1;
            LODWORD(v100[0]) = v74;
          }
          LODWORD(v101) = 0;
          v102 = v42;
          v103 = 0;
          (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a4 + 32))(a4, 193, &v94, 1, v100, 2, 0);
        }
        v44 = llvm::MachineRegisterInfo::createGenericVirtualRegister(a3, 65, "", 0);
        sub_1C4824250((uint64_t *)v18, v36, (uint64_t)v100);
        v84 = *(_OWORD *)v100;
        v85 = v101;
        v45 = *(_WORD *)(v18 + 32);
        v46 = sub_1C484358C(v37, 80, 3);
        *(_OWORD *)v46 = v84;
        *(_QWORD *)(v46 + 16) = v85;
        *(_QWORD *)(v46 + 24) = 65;
        *(_WORD *)(v46 + 32) = v45;
        *(_BYTE *)(v46 + 34) = 0;
        *(_OWORD *)(v46 + 40) = 0u;
        *(_OWORD *)(v46 + 56) = 0u;
        *(_QWORD *)(v46 + 72) = 0;
        *(_WORD *)(v46 + 36) = 1;
        v82 = v44;
        v83 = 1;
        LODWORD(v94) = GenericVirtualRegister;
        v96 = 0;
        sub_1C55464EC(a4, 0x5Au, &v82, (int *)&v94, (llvm::MachineMemOperand *)v46);
        v47 = v98;
        if (v98 >= (unint64_t)HIDWORD(v98))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, (uint64_t)v99, v98 + 1, 4);
          v47 = v98;
        }
        *((_DWORD *)v97 + v47) = v44;
        v22 = (v98 + 1);
        LODWORD(v98) = v98 + 1;
        v36 = v38;
      }
      while (v35 > v38++);
      v49 = (int *)v97;
      v24 = v72;
      v5 = v73;
    }
    else
    {
      v49 = (int *)v99;
    }
    v94 = (8 * (unsigned __int16)v35) | 0x400004;
    LODWORD(v95) = 0;
    v100[0] = &v101;
    v100[1] = (void *)0x800000000;
    if (v22 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v100, (uint64_t)&v101, v22, 24);
      v50 = LODWORD(v100[1]);
      v51 = (uint64_t *)v100[0];
    }
    else
    {
      if (!v22)
      {
        v56 = 0;
        v51 = &v101;
LABEL_72:
        LODWORD(v100[1]) = v56 + v22;
        v57 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t *))(*a4 + 32))(a4, 77, &v94, 1, v51);
        v59 = v58;
        if (v100[0] != &v101)
          free(v100[0]);
        if ((v24 & 0xFFFFFFFFFFFFFFF9) != 0 && (v24 & 6) == 2)
        {
          v82 = v29;
          v83 = 1;
          v61 = sub_1C4825F50(&v87);
          if ((_DWORD)v60 == 1)
          v80 = (8 * v61) | 1;
          v81 = 0;
          v94 = (uint64_t)v57;
          v95 = v59;
          v96 = 1;
          v100[0] = (void *)sub_1C5546EF4(a4, &v80, (int *)&v94);
          v100[1] = v62;
          LODWORD(v101) = 1;
          v63 = (uint64_t *)&v82;
          v64 = a4;
        }
        else
        {
          LODWORD(v94) = v29;
          LODWORD(v95) = 1;
          v100[0] = v57;
          v100[1] = v59;
          LODWORD(v101) = 1;
          v63 = &v94;
          v64 = a4;
        }
        sub_1C5546EF4(v64, v63, (int *)v100);
        v65 = v5;
        if ((*(_BYTE *)v5 & 4) == 0)
        {
          v65 = v5;
          if ((*(_WORD *)(v5 + 44) & 8) != 0)
          {
            v65 = v5;
            do
              v65 = *(_QWORD *)(v65 + 8);
            while ((*(_WORD *)(v65 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v5 + 24) + 40, v5, *(_QWORD *)(v65 + 8));
        if (v97 != v99)
          free(v97);
        return 1;
      }
      v50 = 0;
      v51 = &v101;
    }
    v52 = 3 * v50;
    v53 = 4 * v22;
    do
    {
      v54 = *v49++;
      v55 = &v51[v52];
      *(_DWORD *)v55 = v54;
      *((_DWORD *)v55 + 4) = 0;
      v52 += 3;
      v53 -= 4;
    }
    while (v53);
    v56 = (int)v100[1];
    goto LABEL_72;
  }
  return result;
}

uint64_t sub_1C4A6658C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int *v10;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  const char *v24;
  unsigned int v25;
  char v26;
  uint64_t result;
  int v28;
  int v30;
  int v31;
  const char *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  __int128 v87;
  uint64_t v88;
  int v89[4];
  int v90;
  int v91;
  uint64_t v92;
  char v93[12];
  int v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  void *v102;
  uint64_t v103;
  _BYTE v104[64];
  void *v105;
  uint64_t v106;
  _BYTE v107[32];
  __int128 v108;
  _QWORD v109[3];
  int v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v7 = a4[1];
  v8 = (unint64_t *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 48);
  if (v9 < 8)
  {
    v12 = 0;
  }
  else
  {
    if ((v9 & 7) == 0)
    {
      v9 &= 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(a2 + 48) = v9;
      v13 = a2 + 56;
      v12 = (int *)(a2 + 48);
      goto LABEL_13;
    }
    v10 = (int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    if ((*(_QWORD *)(a2 + 48) & 7) != 3 || v10 == 0)
    {
      v12 = 0;
LABEL_17:
      if ((v9 & 7) != 0)
      {
        v16 = 0;
        if ((v9 & 7) == 3 && (v17 = (int *)(v9 & 0xFFFFFFFFFFFFFFF8), (v9 & 0xFFFFFFFFFFFFFFF8) != 0))
        {
          v18 = *v17;
          v16 = v17 + 2;
        }
        else
        {
          v18 = 0;
        }
      }
      else
      {
        v9 &= 0xFFFFFFFFFFFFFFF8;
        *v8 = v9;
        v18 = 1;
        v16 = (int *)(a2 + 48);
      }
      goto LABEL_22;
    }
    v15 = *v10;
    v12 = v10 + 2;
    v14 = v15;
    if (!(_DWORD)v15)
      goto LABEL_17;
    v13 = (uint64_t)&v12[2 * v14];
LABEL_13:
    while ((*(_WORD *)(*(_QWORD *)v12 + 36) & 0xF00) == 0)
    {
      v12 += 2;
      if (v12 == (int *)v13)
      {
        v12 = (int *)v13;
        break;
      }
    }
    if (v9 >= 8)
      goto LABEL_17;
  }
  v16 = 0;
  v18 = 0;
LABEL_22:
  if (v12 != &v16[2 * v18] && *(_QWORD *)v12)
    return 0;
  if ((v9 & 7) != 0)
  {
    v19 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v19 = v9 & 0xFFFFFFFFFFFFFFF8;
    *v8 = v9 & 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *(_BYTE *)(v19 + 34);
  v21 = *(_QWORD *)(v19 + 8);
  if ((*(_QWORD *)(v19 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v23 = (unint64_t)(sub_1C4825F50((unint64_t *)(v19 + 24)) + 7) >> 3;
    if ((_DWORD)v22 == 1)
  }
  else
  {
    v23 = -1;
  }
  sub_1C4A6086C((uint64_t)v93, a2, a3);
  v25 = v96;
  if ((v96 & 0xFFFFFFFFFFFFFFF9) != 0 && (v96 & 6) == 4)
  {
    v26 = 3;
    if ((v96 & 1) == 0)
      v26 = 19;
    if ((v96 & 0x8000000000000000 | (8 * (v96 >> v26))) == 0x40)
    {
      if ((v96 & 0x8000000000000) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
        v25 = v96;
      }
      if ((unsigned __int16)(v25 >> 3) <= 4u)
      {
        v54 = (1 << *(_BYTE *)(v98 + 34)) | *(_QWORD *)(v98 + 8);
        if ((v54 & -v54) == 1)
          return 0;
      }
    }
  }
  result = 0;
  v28 = __clz(((1 << v20) | v21) & -((1 << v20) | v21));
  if ((63 - v28) <= 1u && (1 << (63 - v28)) % v23)
  {
    if (v28 != 63 && v23 < 9)
      return 0;
    v76 = a2;
    v30 = v94;
    v31 = v95;
    v92 = v97;
    v33 = sub_1C4825F50((unint64_t *)&v92);
    if ((_DWORD)v32 == 1)
    v91 = 0;
    v81 = (8 * v33) | 1;
    *(_QWORD *)&v108 = v81;
    *((_QWORD *)&v108 + 1) = &v91;
    LODWORD(v102) = v31;
    if (sub_1C495C174((uint64_t)&v108, a3, (unsigned int *)&v102))
      v34 = v91;
    else
      v34 = v31;
    v79 = v34;
    if ((v96 & 0xFFFFFFFFFFFFFFF9) != 0 && (v96 & 6) == 2)
    {
      v102 = (void *)(((v23 & 0x1FFFFFFF) << 6) | 1);
      LODWORD(v103) = 0;
      LODWORD(v108) = v30;
      LODWORD(v109[0]) = 0;
      sub_1C5546EF4(a4, (uint64_t *)&v102, (int *)&v108);
      v30 = *(_DWORD *)(*(_QWORD *)(v35 + 32) + 4);
    }
    v102 = (void *)((8 * (unsigned __int16)v23) | 0x400004);
    LODWORD(v103) = 0;
    LODWORD(v108) = v30;
    LODWORD(v109[0]) = 0;
    sub_1C5546EF4(a4, (uint64_t *)&v102, (int *)&v108);
    v37 = *(_DWORD *)(*(_QWORD *)(v36 + 32) + 4);
    v105 = v107;
    v106 = 0x800000000;
    v102 = v104;
    v103 = 0x800000000;
    sub_1C495A254((unsigned int *)&v102, v23, 65);
    v38 = (uint64_t *)v102;
    v39 = v103;
    v89[0] = v37;
    v90 = 0;
    *(_QWORD *)&v108 = v109;
    *((_QWORD *)&v108 + 1) = 0x800000000;
    if (v103 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, (uint64_t)v109, v103, 16);
      v40 = DWORD2(v108);
      v41 = (_QWORD *)v108;
    }
    else
    {
      if (!(_DWORD)v103)
      {
        v45 = 0;
        v46 = v109;
        goto LABEL_59;
      }
      v40 = 0;
      v41 = v109;
    }
    v42 = 8 * v39;
    v43 = &v41[2 * v40];
    do
    {
      v44 = *v38++;
      *v43 = v44;
      *((_DWORD *)v43 + 2) = 0;
      v43 += 2;
      v42 -= 8;
    }
    while (v42);
    v45 = DWORD2(v108);
    v46 = (_QWORD *)v108;
LABEL_59:
    DWORD2(v108) = v45 + v39;
    (*(void (**)(uint64_t *, uint64_t, _QWORD *))(*a4 + 32))(a4, 74, v46);
    v48 = v47;
    if ((_QWORD *)v108 == v109)
    {
      if (!v23)
        goto LABEL_74;
    }
    else
    {
      free((void *)v108);
      if (!v23)
        goto LABEL_74;
    }
    v49 = 0;
    v50 = 1;
    v51 = v106;
    do
    {
      v52 = *(_DWORD *)(*(_QWORD *)(v48 + 32) + 32 * v49 + 4);
      if (v51 >= HIDWORD(v106))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, (uint64_t)v107, v51 + 1, 4);
        v51 = v106;
      }
      *((_DWORD *)v105 + v51) = v52;
      v51 = v106 + 1;
      LODWORD(v106) = v106 + 1;
      v49 = v50;
      v53 = v23 > v50++;
    }
    while (v53);
LABEL_74:
    v55 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (v79 & 0x7FFFFFFF) + 8);
    if (v79 >= 0)
      v55 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * v79);
    v56 = *v55;
    if (v56
      && ((*(_BYTE *)(v56 + 3) & 1) != 0 || (v56 = *(_QWORD *)(v56 + 24)) != 0 && (*(_BYTE *)(v56 + 3) & 1) != 0)
      && (v73 = *(_QWORD *)(v56 + 8)) != 0
      && ((v74 = **(unsigned __int16 **)(v73 + 16), v74 == 193) || v74 == 45)
      && (v78 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v73 + 32) + 68), a3), v75))
    {
      v80 = 0;
      v77 = *(_DWORD *)(*(_QWORD *)(v73 + 32) + 36);
      if (!v23)
      {
LABEL_85:
        v72 = v76;
        if ((*(_BYTE *)v76 & 4) == 0)
        {
          v72 = v76;
          if ((*(_WORD *)(v76 + 44) & 8) != 0)
          {
            v72 = v76;
            do
              v72 = *(_QWORD *)(v72 + 8);
            while ((*(_WORD *)(v72 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v76 + 24) + 40, v76, *(_QWORD *)(v72 + 8));
        if (v102 != v104)
          free(v102);
        if (v105 != v107)
          free(v105);
        return 1;
      }
    }
    else
    {
      v78 = 0;
      v77 = 0;
      v80 = 1;
      if (!v23)
        goto LABEL_85;
    }
    v57 = 0;
    v58 = v7 + 128;
    v59 = 1;
    v60 = v79;
    do
    {
      if (v59 != 1)
      {
        *(_QWORD *)&v108 = v81;
        DWORD2(v108) = 0;
        if ((v80 & 1) != 0)
        {
          v61 = sub_1C5544694((uint64_t)a4, (unint64_t *)&v108, v57);
          v63 = v62;
          v82 = v81;
          v83 = 0;
          v89[0] = v79;
        }
        else
        {
          v61 = sub_1C5544694((uint64_t)a4, (unint64_t *)&v108, v57 + v78);
          v63 = v64;
          v82 = v81;
          v83 = 0;
          v89[0] = v77;
        }
        v90 = 0;
        v65 = sub_1C5546EF4(a4, &v82, v89);
        v99 = v81;
        LODWORD(v100) = 0;
        *(_QWORD *)&v108 = v65;
        *((_QWORD *)&v108 + 1) = v66;
        LODWORD(v109[0]) = 1;
        v109[1] = v61;
        v109[2] = v63;
        v110 = 1;
        (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, __int128 *, uint64_t, _QWORD))(*a4 + 32))(a4, 45, &v99, 1, &v108, 2, 0);
        v60 = *(_DWORD *)(*(_QWORD *)(v67 + 32) + 4);
      }
      sub_1C4824250((uint64_t *)v19, v57, (uint64_t)&v108);
      v87 = v108;
      v88 = v109[0];
      v68 = *(_WORD *)(v19 + 32);
      v69 = sub_1C484358C(v58, 80, 3);
      v70 = v88;
      *(_OWORD *)v69 = v87;
      *(_QWORD *)(v69 + 16) = v70;
      *(_QWORD *)(v69 + 24) = 65;
      *(_WORD *)(v69 + 32) = v68;
      *(_BYTE *)(v69 + 34) = 0;
      *(_OWORD *)(v69 + 40) = 0u;
      *(_OWORD *)(v69 + 56) = 0u;
      *(_QWORD *)(v69 + 72) = 0;
      *(_WORD *)(v69 + 36) = 1;
      v89[0] = *((_DWORD *)v105 + v57);
      v90 = 0;
      v85 = v97;
      v86 = 0;
      LODWORD(v82) = v60;
      v84 = 0;
      v99 = sub_1C5546EF4(a4, &v85, (int *)&v82);
      v100 = v71;
      v101 = 1;
      sub_1C5546848(a4, v89, (int *)&v99, (llvm::MachineMemOperand *)v69);
      v57 = v59;
      v53 = v23 > v59++;
    }
    while (v53);
    goto LABEL_85;
  }
  return result;
}

uint64_t sub_1C4A66D78()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 ***v2;
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  uint64_t v5;
  void *v6;
  void **v7;
  void (**v8)(void **);
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  llvm::ConstantFP ***v14;
  int v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  BOOL v19;
  int v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  uint64_t result;
  int v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  __int16 v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void **v46;
  void (**v47)(void **);
  void **v48;
  void (**v49)(void **);
  int v50;
  void **v51;
  unint64_t v52;
  int v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  llvm::ConstantFP *v87;
  const llvm::APFloat *v88;
  llvm::APFloatBase *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  void *v99;
  llvm::ConstantFP ***v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  int v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  char v116;
  llvm::MachineFunction *v117;
  uint64_t v118;
  llvm::MachineInstr *v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  llvm::ConstantFP ***v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  void *v130;
  unsigned __int8 **v131;
  void *v132;
  void *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  unsigned __int8 *v142;
  llvm::MachineFunction *v143;
  llvm::MachineInstr *v144;
  llvm::MachineInstr *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  unsigned __int8 **v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  llvm::MachineFunction *v157;
  llvm::MachineInstr *v158;
  llvm::MachineInstr *v159;
  uint64_t v160;
  llvm::MachineMemOperand *v161;
  uint64_t v162;
  int v163;
  unsigned __int8 **v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  void **v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  llvm::MachineFunction *v179;
  llvm::MachineInstr *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int8 *v186;
  int v187;
  int v188;
  void *v189;
  unsigned int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  unsigned __int8 **v196;
  llvm::MachineFunction *v197;
  int v198;
  llvm::MachineInstr *v199;
  llvm::MachineInstr *v200;
  llvm::MachineFunction *v201;
  llvm::MachineInstr *v202;
  llvm::MachineInstr *v203;
  uint64_t v204;
  int v205;
  llvm::MachineFunction *v206;
  llvm::MachineInstr *v207;
  llvm::MachineInstr *v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  void **v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  int v220;
  int v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  const char *v227;
  int v228;
  uint64_t v229;
  int v230;
  llvm::MachineFunction *v231;
  llvm::MachineInstr *v232;
  llvm::MachineInstr *v233;
  uint64_t v234;
  llvm::MachineMemOperand *v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  int v244;
  int v245;
  void *v246;
  unsigned __int8 **v247;
  uint64_t v248;
  _DWORD *v249;
  uint64_t v250;
  unsigned int v251;
  unint64_t v252;
  void *v253;
  llvm::ConstantFP ***v254;
  uint64_t v255;
  _DWORD *v256;
  int v257;
  int v258;
  int v259;
  int v260;
  void *v261;
  uint64_t v262;
  void *v263;
  uint64_t v264;
  void **v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  void *v269;
  void *v270;
  void *v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  _QWORD *v278;
  _QWORD *v279;
  void *v280;
  llvm::MachineInstr *v281;
  llvm::MachineInstr *v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  void *v299;
  uint64_t v300;
  void *v301;
  void *v302;
  void *v303;
  uint64_t v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  void **v319;
  void (**v320)(void **);
  void **v321;
  void (**v322)(void **);
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  int v327;
  int v328;
  void *v329;
  void *v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  void *v337;
  void *v338;
  uint64_t v339;
  void *v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unsigned int v345;
  uint64_t v346;
  int v347;
  int v348;
  unsigned __int8 **v349;
  uint64_t v350;
  int v351;
  unsigned int v352;
  unsigned __int8 **v353;
  int v354;
  uint64_t v355;
  llvm::MachineFunction *v356;
  unint64_t *v357;
  unint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  unsigned __int8 *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t *v369;
  _DWORD *v370;
  int v371;
  int v372;
  int v373;
  uint64_t v374;
  int v375;
  unsigned __int8 **v376;
  int v377;
  unsigned int v378;
  int v379;
  llvm::MachineFunction *v380;
  llvm::MachineInstr *v381;
  llvm::MachineInstr *v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  void *v387;
  void *v388;
  uint64_t v389;
  int v390;
  int v391;
  void **v392;
  void (**v393)(void **);
  void **v394;
  void (**v395)(void **);
  size_t v396;
  void *v397;
  void *v398;
  unsigned __int8 *v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  _DWORD *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  const char *v410;
  int v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  llvm::MachineMemOperand *v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t v418;
  llvm::MachineMemOperand *v419;
  unsigned __int8 v420;
  uint64_t v421;
  uint64_t v422;
  unsigned int v423;
  uint64_t v424;
  void **v425;
  uint64_t v426;
  uint64_t v427;
  llvm::MachineFunction *v428;
  unint64_t *v429;
  unint64_t *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  unsigned __int8 *v436;
  int v437;
  uint64_t v438;
  int v439;
  uint64_t v440;
  int v441;
  unsigned __int8 **v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  void *v446;
  void *v447;
  void *v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  unint64_t v452;
  int v453;
  uint64_t v454;
  uint64_t v455;
  unsigned int v456;
  BOOL v457;
  uint64_t v459;
  llvm::MachineFunction *v460;
  llvm::MachineInstr *v461;
  llvm::MachineInstr *v462;
  llvm::MachineFunction *v463;
  llvm::MachineInstr *v464;
  llvm::MachineInstr *v465;
  int v466;
  llvm::MachineFunction *v467;
  llvm::MachineInstr *v468;
  llvm::MachineInstr *v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  void *v474;
  void *v475;
  unsigned __int8 **v476;
  int v477;
  uint64_t v478;
  llvm::MachineFunction *v479;
  unint64_t *v480;
  unint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  unsigned __int8 *v487;
  unsigned __int8 **v488;
  uint64_t v489;
  llvm::MachineFunction *v490;
  unint64_t *v491;
  unint64_t *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t *v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  uint64_t v505;
  uint64_t *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t v511;
  int v512;
  void *v513;
  unsigned __int8 **v514;
  unsigned __int8 **v515;
  uint64_t v516;
  llvm::MachineFunction *v517;
  unint64_t *v518;
  unint64_t *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  unint64_t v524;
  unsigned __int8 *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t *v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  uint64_t v532;
  uint64_t *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  int v540;
  unsigned int v541;
  uint64_t v542;
  int v543;
  unint64_t v544;
  char v545;
  unint64_t v546;
  unsigned __int8 **v547;
  uint64_t v548;
  llvm::MachineFunction *v549;
  unint64_t *v550;
  unint64_t *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  unint64_t v556;
  unsigned __int8 *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t *v560;
  uint64_t v561;
  uint64_t v562;
  unsigned int v563;
  uint64_t v564;
  uint64_t *v565;
  uint64_t v566;
  uint64_t *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t *v572;
  uint64_t v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t *v579;
  uint64_t v580;
  uint64_t v581;
  unsigned __int8 **v582;
  int v583;
  char v584;
  int v585;
  unsigned int v586;
  uint64_t v587;
  llvm::MachineFunction *v588;
  unint64_t *v589;
  unint64_t *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unsigned __int8 *v596;
  int v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unsigned int v601;
  int v602;
  llvm::MachineFunction *v603;
  llvm::MachineInstr *v604;
  llvm::MachineInstr *v605;
  _DWORD *v606;
  uint64_t v607;
  char *v608;
  uint64_t v609;
  int v610;
  uint64_t *v611;
  int v612;
  llvm::MachineFunction *v613;
  llvm::MachineInstr *v614;
  llvm::MachineInstr *v615;
  int v616;
  uint64_t v617;
  int v618;
  int v619;
  int v620;
  uint64_t v621;
  uint64_t v622;
  int v623;
  uint64_t v624;
  uint64_t v625;
  void *v626;
  void *v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  uint64_t v631;
  llvm::MachineFunction *v632;
  llvm::MachineInstr *v633;
  unsigned __int8 **v634;
  int v635;
  uint64_t v636;
  llvm::MachineFunction *v637;
  unint64_t *v638;
  unint64_t *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  unint64_t v644;
  unsigned __int8 *v645;
  int v646;
  int v647;
  int v648;
  unsigned int v649;
  char v650;
  unsigned int v651;
  char v652;
  unsigned int v653;
  char v654;
  unsigned int v655;
  char v656;
  void *v657;
  void *v658;
  void *v659;
  int v660;
  uint64_t v661;
  uint64_t v662;
  int v663;
  uint64_t v664;
  int v665;
  uint64_t v666;
  llvm::MachineFunction *v667;
  llvm::MachineInstr *v668;
  llvm::MachineInstr *v669;
  int v670;
  unint64_t v671;
  int v672;
  uint64_t v673;
  uint64_t v674;
  unint64_t v675;
  unsigned __int8 **v676;
  uint64_t v677;
  llvm::MachineFunction *v678;
  unint64_t *v679;
  unint64_t *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  unint64_t v685;
  unsigned __int8 *v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t *v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  uint64_t *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t *v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  unsigned __int8 **v701;
  uint64_t v702;
  llvm::MachineFunction *v703;
  unint64_t *v704;
  unint64_t *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  unint64_t v710;
  unsigned __int8 *v711;
  uint64_t v712;
  int v713;
  unint64_t v714;
  char *v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  unint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  void *v723;
  _QWORD *v724;
  unsigned __int8 **v725;
  void *v726;
  _QWORD *v727;
  _QWORD *v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  int v735;
  llvm::ConstantFP *v736;
  llvm::ConstantFP *v737;
  uint64_t v738;
  llvm::MachineInstr *v739;
  uint64_t v740;
  llvm::MachineFunction *v741;
  llvm::MachineInstr *v742;
  llvm::MachineInstr *v743;
  int v744;
  unsigned __int8 **v745;
  unint64_t v746;
  int v747;
  uint64_t v748;
  void **v749;
  void (**v750)(void **);
  void **v751;
  void (**v752)(void **);
  uint64_t v753;
  llvm::MachineFunction *v754;
  llvm::MachineInstr *v755;
  llvm::MachineInstr *v756;
  int v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  _QWORD *v762;
  uint64_t *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  const char *v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  _DWORD *v771;
  int v772;
  uint64_t v773;
  uint64_t *v774;
  uint64_t v775;
  uint64_t v776;
  unsigned __int8 **v777;
  const char *v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  void *v783;
  _QWORD *v784;
  _QWORD *v785;
  void *v786;
  llvm::MachineFunction *v787;
  llvm::MachineInstr *v788;
  llvm::MachineInstr *v789;
  int v790;
  llvm::ConstantFP *v791;
  void *v792;
  _QWORD *v793;
  _QWORD *v794;
  llvm::MachineFunction *v795;
  int v796;
  llvm::MachineInstr *v797;
  llvm::MachineInstr *v798;
  int v799;
  llvm::MachineInstr *v800;
  void *v801;
  _QWORD *v802;
  _QWORD *v803;
  llvm::MachineFunction *v804;
  llvm::MachineInstr *v805;
  llvm::MachineInstr *v806;
  int v807;
  llvm::MachineInstr *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  llvm::MachineFunction *v812;
  llvm::MachineInstr *v813;
  llvm::MachineInstr *v814;
  int v815;
  uint64_t v816;
  char v817;
  int v818;
  unsigned __int8 **v819;
  uint64_t v820;
  void *v821;
  void *v822;
  unsigned int v823;
  uint64_t v824;
  llvm::MachineFunction *v825;
  llvm::MachineInstr *v826;
  llvm::MachineInstr *v827;
  llvm::MachineInstr *v828;
  uint64_t v829;
  uint64_t v830;
  void *v831;
  void *v832;
  void *v833;
  llvm::MachineFunction *v834;
  void *v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  llvm::ConstantFP *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t *v843;
  uint64_t v844;
  const char *v845;
  uint64_t v846;
  void *v847;
  void *v848;
  const char *v849;
  uint64_t v850;
  const char *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  _BOOL4 v855;
  const llvm::APFloat *v856;
  llvm::APFloatBase *v857;
  llvm::ConstantFP *v858;
  const llvm::APFloat *v859;
  llvm::APFloatBase *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  llvm::MachineInstr *v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  llvm::MachineInstr *v869;
  uint64_t v870;
  llvm::MachineInstr *v871;
  llvm::MachineInstr *v872;
  llvm::ConstantFP *v873;
  llvm::MachineInstr *v874;
  uint64_t v875;
  _BOOL4 v876;
  void *v877;
  void *v878;
  void *v879;
  void *v880;
  void *v881;
  void *v882;
  void *v883;
  void *v884;
  void *v885;
  void *v886;
  void *v887;
  void *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  void *v892;
  void *v893;
  void *v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  void *v898;
  void *v899;
  void *v900;
  void *v901;
  llvm::MachineInstr *v902;
  void *v903;
  llvm::MachineInstr *v904;
  llvm::MachineInstr *v905;
  int v906;
  const llvm::APFloat *v907;
  llvm::APFloatBase *v908;
  uint64_t v909;
  llvm::ConstantFP *v910;
  llvm::ConstantFP *v911;
  unsigned __int8 **v912;
  int v913;
  const llvm::APFloat *v914;
  llvm::APFloatBase *v915;
  uint64_t v916;
  llvm::MachineInstr *v917;
  llvm::MachineInstr *v918;
  llvm::MachineInstr *v919;
  const llvm::APFloat *v920;
  llvm::APFloatBase *v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  llvm::ConstantFP *v926;
  void *v927;
  llvm::MachineInstr *v928;
  uint64_t v929;
  uint64_t v930;
  llvm::MachineInstr *v931;
  llvm::MachineInstr *v932;
  uint64_t v933;
  llvm::MachineInstr *v934;
  llvm::MachineInstr *v935;
  unsigned int v936;
  uint64_t v937;
  uint64_t *v938;
  uint64_t v939;
  uint64_t v940;
  void *v941;
  void *v942;
  void *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t *v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  char v953;
  int v954;
  _BOOL4 v956;
  uint64_t v958;
  uint64_t *v959;
  uint64_t *v960;
  uint64_t *v961;
  uint64_t *v962;
  unint64_t v963;
  uint64_t v964;
  double v965;
  llvm::ConstantFP *v966;
  const char *v967;
  int v968;
  const llvm::APFloat *v969;
  llvm::APFloatBase *v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  char v976;
  int v977;
  _BOOL4 v979;
  uint64_t v981;
  uint64_t *v982;
  uint64_t *v983;
  uint64_t *v984;
  uint64_t *v985;
  unint64_t v986;
  uint64_t v987;
  double v988;
  llvm::ConstantFP *v989;
  const char *v990;
  int v991;
  const llvm::APFloat *v992;
  llvm::APFloatBase *v993;
  uint64_t v994;
  uint64_t *v995;
  uint64_t *v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t *v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  llvm::ConstantFP *v1006;
  const llvm::APFloat *v1007;
  llvm::APFloatBase *v1008;
  uint64_t v1009;
  int v1010;
  const llvm::APFloat *v1011;
  llvm::APFloatBase *v1012;
  uint64_t v1013;
  int v1014;
  const llvm::APFloat *v1015;
  llvm::APFloatBase *v1016;
  uint64_t v1017;
  int v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  llvm::ConstantFP *v1022;
  uint64_t v1023;
  llvm::MachineInstr *v1024;
  llvm::MachineInstr *v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  void *v1029;
  void *v1030;
  void *v1031;
  void *v1032;
  llvm::ConstantFP *v1033;
  llvm::ConstantFP *v1034;
  void *v1035;
  void *v1036;
  void *v1037;
  void *v1038;
  uint64_t v1039;
  llvm::MachineInstr *v1040;
  llvm::MachineInstr *v1041;
  void *v1042;
  void *v1043;
  uint64_t v1044;
  uint64_t v1045;
  void *v1046;
  llvm::MachineInstr *v1047;
  llvm::MachineInstr *v1048;
  uint64_t v1049;
  llvm::MachineInstr *v1050;
  uint64_t v1051;
  llvm::ConstantFP *v1052;
  const llvm::APFloat *v1053;
  llvm::APFloatBase *v1054;
  uint64_t v1055;
  llvm::ConstantFP *v1056;
  llvm::ConstantFP *v1057;
  const llvm::APFloat *v1058;
  llvm::APFloatBase *v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  llvm::MachineInstr *v1064;
  void *v1065;
  void *v1066;
  void *v1067;
  void *v1068;
  llvm::ConstantFP *v1069;
  llvm::ConstantFP *v1070;
  uint64_t v1071;
  llvm::ConstantFP *v1072;
  void *v1073;
  void *v1074;
  void *v1075;
  void *v1076;
  void *v1077;
  uint64_t v1078;
  llvm::ConstantFP *v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  void *v1083;
  void *v1084;
  void *v1085;
  unsigned __int8 **v1086;
  uint64_t v1087;
  llvm::ConstantFP *v1088;
  void *v1089;
  void *v1090;
  uint64_t v1091;
  llvm::MachineInstr *v1092;
  llvm::MachineInstr *v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  llvm::ConstantFP *v1099;
  void *v1100;
  void *v1101;
  void *v1102;
  const llvm::APFloat *v1103;
  llvm::APFloatBase *v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  llvm::MachineInstr *v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t *v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t *v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t *v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t *v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t *v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t *v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t *v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t *v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  unsigned __int8 *v1167;
  BOOL v1168;
  unint64_t v1169;
  size_t v1170;
  llvm::MachineMemOperand *v1171;
  uint64_t v1172;
  uint64_t v1173;
  size_t v1174;
  void *v1175;
  void *v1176;
  int v1177;
  int v1178;
  size_t v1179;
  void *v1180;
  void *v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  char v1188;
  uint64_t v1189;
  unint64_t v1190;
  unsigned int *v1191;
  _DWORD *v1192;
  int v1193;
  char v1194;
  BOOL v1195;
  uint64_t v1196;
  int v1197;
  unint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  unsigned int v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  void **v1205;
  void *v1206;
  uint64_t v1207;
  uint64_t v1208;
  int v1209;
  void *v1210;
  void *v1211;
  unsigned __int8 **v1212;
  uint64_t v1213;
  void *v1214;
  uint64_t v1215;
  uint64_t v1216;
  _QWORD *v1217;
  void *v1218;
  llvm::ConstantFP ****v1219;
  uint64_t v1220;
  uint64_t v1221;
  int v1222;
  uint64_t v1223;
  llvm::MachineInstr *v1224;
  llvm::MachineInstr *v1225;
  uint64_t v1226;
  uint64_t v1227;
  unsigned int v1228;
  uint64_t v1229;
  uint64_t v1230;
  llvm::ConstantFP *v1231;
  uint64_t v1232;
  uint64_t v1233;
  void *v1234;
  int v1235;
  int v1236;
  llvm::ConstantFP *v1237;
  llvm::ConstantFP *v1238;
  int v1239;
  llvm::ConstantFP *v1240;
  uint64_t v1241;
  int v1242;
  int v1243;
  _BOOL4 v1244;
  uint64_t v1245;
  uint64_t v1246;
  unsigned int v1247;
  int v1248;
  int v1249;
  int v1250;
  int v1251;
  llvm::ConstantFP *v1252;
  llvm::ConstantFP *v1253;
  llvm::ConstantFP *v1254;
  llvm::ConstantFP ***v1255;
  int v1256;
  int v1257;
  uint64_t v1258;
  int v1259;
  llvm::ConstantFP *v1260;
  llvm::ConstantFP *v1261;
  uint64_t v1262;
  void *v1263;
  uint64_t v1264;
  uint64_t v1265;
  unsigned __int8 **v1266;
  uint64_t v1267;
  int v1268;
  llvm::GlobalValue *v1269[2];
  char v1270;
  unint64_t v1271;
  void *v1272;
  unsigned int v1273;
  char v1274;
  int v1275;
  int v1276;
  void *v1277[2];
  _OWORD v1278[10];
  char v1279;
  void *v1280[2];
  uint64_t v1281;
  __int128 v1282;
  int v1283;
  uint64_t v1284;
  llvm::ConstantFP *v1285;
  int v1286;
  uint64_t v1287;
  llvm::MachineInstr *v1288;
  int v1289;
  uint64_t v1290;
  llvm::MachineInstr *v1291;
  int v1292;
  char v1293;
  char v1294;
  unint64_t v1295;
  uint64_t v1296;
  int v1297;
  char v1298;
  char v1299;
  char v1300;
  int v1301;
  char v1302;
  int v1303;
  char v1304;
  int v1305;
  char v1306;
  void *__src[2];
  int v1308;
  char v1309;
  uint64_t v1310;
  void *v1311;
  int v1312;
  int v1313;
  void *v1314;
  llvm::MachineInstr *v1315;
  uint64_t v1316;

  MEMORY[0x1E0C80A78]();
  v1 = v0;
  v1316 = *MEMORY[0x1E0C80C00];
  v3 = *v2;
  v4 = v2[1];
  v5 = (uint64_t)(*v2)[3];
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 32) + 16);
  v1280[0] = &off_1E81316D0;
  v1280[1] = v6;
  *(_QWORD *)&v1282 = v1280;
  sub_1C4C0B384(v1280);
  v7 = (void **)v1282;
  if ((void **)v1282 == v1280)
  {
    v8 = (void (**)(void **))((char *)v1280[0] + 32);
    v7 = v1280;
LABEL_3:
    (*v8)(v7);
    goto LABEL_4;
  }
  if ((_QWORD)v1282)
  {
    v8 = (void (**)(void **))(*(_QWORD *)v1282 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v9 = *(unsigned int *)(v1 + 40);
  v1266 = v3;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = *(unsigned __int8 **)(v1 + 32);
    while (1)
    {
      v12 = *v11;
      v11 += 32;
      if (v12 == 17)
        break;
      if (v9 == ++v10)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    LODWORD(v10) = -1;
  }
  v13 = *(_DWORD *)(*(_QWORD *)(v1 + 32) + 32 * v10 + 16);
  v1276 = v13;
  v1219 = *(llvm::ConstantFP *****)(*(_QWORD *)(v1 + 24) + 32);
  v14 = v1219[1];
  v1217 = (_QWORD *)((uint64_t (*)(llvm::ConstantFP ***))v14[166][22])(v14 + 166);
  v1215 = ((uint64_t (*)(llvm::ConstantFP ***))v14[166][13])(v14 + 166);
  ((void (*)(llvm::ConstantFP ***))v14[166][23])(v14 + 166);
  v15 = sub_1C4A17AE8((uint64_t)(v14 + 166));
  v1275 = v15;
  v1266[5] = *(unsigned __int8 **)(v1 + 24);
  v1266[6] = (unsigned __int8 *)v1;
  v1227 = v1;
  v16 = (unsigned __int8 **)(v1 + 56);
  v17 = v1266 + 4;
  if (v16 != v1266 + 4)
  {
    if (*v17)
      llvm::MetadataTracking::untrack((uint64_t)(v1266 + 4), *v17);
    v18 = *v16;
    *v17 = *v16;
    if (v18)
      llvm::MetadataTracking::track((uint64_t)v17, v18, 2);
  }
  v1262 = v5;
  if (v13 <= 2516)
  {
    v19 = (v13 - 253) > 0x1B || ((1 << (v13 + 3)) & 0x8000121) == 0;
    if (v19
      && ((v13 - 140) > 0x3E || ((1 << (v13 + 116)) & 0x4020000000000001) == 0))
    {
      goto LABEL_29;
    }
  }
  else if (v13 != 2517 && v13 != 2628 && v13 != 2526)
  {
    goto LABEL_29;
  }
  v20 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
  if (v20 < 0
    && (v20 & 0x7FFFFFFFu) < *(_DWORD *)(v1262 + 432)
    && *(_QWORD *)(*(_QWORD *)(v1262 + 424) + 8 * (v20 & 0x7FFFFFFF)) == 0x8000000000000081)
  {
    v1280[0] = (void *)257;
    LODWORD(v1280[1]) = 0;
    v117 = sub_1C627573C(v1266, v13, (__int128 *)v1280, 1, 0);
    v119 = (llvm::MachineInstr *)v118;
    *(_WORD *)(v118 + 44) = *(_WORD *)(v118 + 44) & 0xC | *(_WORD *)(v1227 + 44) & 0xFFF3;
    v1266[5] = *(unsigned __int8 **)(v118 + 24);
    v1266[6] = (unsigned __int8 *)v118;
    v120 = (v10 + 1);
    if (v120 < *(_DWORD *)(v1227 + 40))
    {
      v121 = (32 * v120) | 4;
      do
      {
        v122 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + v121);
        v1277[0] = (void *)257;
        LODWORD(v1277[1]) = 0;
        LODWORD(v1280[0]) = v122;
        LODWORD(v1281) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))*v1266 + 4))(v1266, 178, v1277, 1, v1280, 1, *(unsigned __int16 *)(v1227 + 44) | 0x100000000);
        v124 = *(_DWORD *)(*(_QWORD *)(v123 + 32) + 4);
        v1280[1] = 0;
        HIDWORD(v1280[0]) = v124;
        LODWORD(v1280[0]) = 0;
        v1281 = 0;
        *(_QWORD *)&v1282 = 0;
        llvm::MachineInstr::addOperand(v119, v117, (const llvm::MachineOperand *)v1280);
        ++v120;
        v121 += 32;
      }
      while (v120 < *(unsigned int *)(v1227 + 40));
    }
    v1266[5] = *(unsigned __int8 **)(v1227 + 24);
    v1266[6] = (unsigned __int8 *)v1227;
    LODWORD(v1277[0]) = v20;
    LODWORD(v1277[1]) = 1;
    v1280[0] = v117;
    v1280[1] = v119;
    LODWORD(v1281) = 1;
    (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))*v1266 + 4))(v1266, 179, v1277, 1, v1280, 1, *(unsigned __int16 *)(v1227 + 44) | 0x100000000);
    v79 = *(_QWORD *)(v1227 + 24);
    v80 = v1227;
    v78 = v1227;
    if ((*(_BYTE *)v1227 & 4) == 0)
    {
      v80 = v1227;
      if ((*(_WORD *)(v1227 + 44) & 8) != 0)
      {
        v80 = v1227;
        do
          v80 = *(_QWORD *)(v80 + 8);
        while ((*(_WORD *)(v80 + 44) & 8) != 0);
      }
    }
    goto LABEL_944;
  }
LABEL_29:
  v21 = 1;
  v1255 = v14;
  if (v13 <= 279)
  {
    if (v13 <= 201)
    {
      if (v13 <= 139)
      {
        if (v13 == 9)
        {
          v438 = *(_QWORD *)(v1227 + 32);
          v439 = *(_DWORD *)(v438 + 4);
          if (v439 < 0 && (v439 & 0x7FFFFFFFu) < *(_DWORD *)(v1262 + 432))
          {
            v440 = *(_QWORD *)(*(_QWORD *)(v1262 + 424) + 8 * (v439 & 0x7FFFFFFF));
            if (v440 == 257)
              return 1;
            if (v440 == 129)
            {
              v441 = *(_DWORD *)(v438 + 68);
              v1280[0] = (void *)129;
              LODWORD(v1280[1]) = 0;
              v442 = v1266;
              v443 = sub_1C5544694((uint64_t)v1266, (unint64_t *)v1280, 8);
              v445 = v444;
              v1277[0] = (void *)129;
              LODWORD(v1277[1]) = 0;
              LODWORD(v1280[0]) = v441;
              LODWORD(v1281) = 0;
              *(_QWORD *)&v1282 = v443;
              *((_QWORD *)&v1282 + 1) = v444;
              v1283 = 1;
              v446 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v442
                              + 4))(v442, 128, v1277, 1, v1280, 2, 0);
              v448 = v447;
              v1277[0] = (void *)129;
              LODWORD(v1277[1]) = 0;
              LODWORD(v1280[0]) = v441;
              v176 = v1227;
              LODWORD(v1281) = 0;
              *(_QWORD *)&v1282 = v443;
              *((_QWORD *)&v1282 + 1) = v445;
              v1283 = 1;
              v449 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v442
                      + 4))(v442, 127, v1277, 1, v1280, 2, 0);
              LODWORD(v1277[0]) = v439;
              LODWORD(v1277[1]) = 1;
              v1280[0] = v446;
              v1280[1] = v448;
              LODWORD(v1281) = 1;
              *(_QWORD *)&v1282 = v449;
              *((_QWORD *)&v1282 + 1) = v450;
              v1283 = 1;
              (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v442 + 4))(v442, 66, v1277, 1, v1280, 2, 0);
              v181 = *(_QWORD *)(v1227 + 24);
              v182 = v1227;
              if ((*(_BYTE *)v1227 & 4) == 0)
              {
                v182 = v1227;
                if ((*(_WORD *)(v1227 + 44) & 8) != 0)
                {
                  v182 = v1227;
                  do
                    v182 = *(_QWORD *)(v182 + 8);
                  while ((*(_WORD *)(v182 + 44) & 8) != 0);
                }
              }
              goto LABEL_259;
            }
          }
        }
        else
        {
          if (v13 != 53)
            return v21;
          v126 = *(_QWORD *)(v1227 + 32);
          v127 = *(_DWORD *)(v126 + 4);
          if (v127 < 0)
          {
            v128 = v127 & 0x7FFFFFFF;
            if (v128 < *(_DWORD *)(v1262 + 432))
            {
              v129 = *(_DWORD *)(v126 + 68);
              v130 = *(void **)(*(_QWORD *)(v1262 + 424) + 8 * v128);
              if (v130 == (void *)257 || v130 == (void *)129)
              {
                v1277[0] = v130;
                LODWORD(v1277[1]) = 0;
                LODWORD(v1280[0]) = v129;
                LODWORD(v1281) = 0;
                v21 = 1;
                (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                 + 4))(v1266, 270, v1277, 1, v1280, 1, 0);
                sub_1C4923194((_QWORD *)v1262, v1227, *(_DWORD *)(*(_QWORD *)(v997 + 32) + 4), v4);
                return v21;
              }
              if (v130 == (void *)65)
              {
                __src[0] = (void *)129;
                LODWORD(__src[1]) = 0;
                v1314 = (void *)129;
                LODWORD(v1315) = 0;
                LODWORD(v1277[0]) = v129;
                LODWORD(v1278[0]) = 0;
                v131 = v1266;
                v21 = 1;
                v1280[0] = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                                    + 4))(v1266, 126, &v1314, 1, v1277, 1, 0);
                v1280[1] = v132;
                LODWORD(v1281) = 1;
                v133 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v131
                                + 4))(v131, 270, __src, 1, v1280, 1, 0);
                v1277[0] = (void *)65;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v133;
                v1280[1] = v134;
                LODWORD(v1281) = 1;
                (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v131
                 + 4))(v131, 119, v1277, 1, v1280, 1, 0);
                sub_1C4923194((_QWORD *)v1262, v1227, *(_DWORD *)(*(_QWORD *)(v135 + 32) + 4), v4);
                return v21;
              }
            }
          }
        }
        return 0;
      }
      if (v13 == 140)
        goto LABEL_260;
      if (v13 != 193)
        return v21;
    }
    else
    {
      if (v13 > 252)
      {
        if (v13 != 253)
        {
          if (v13 != 258)
          {
            if (v13 != 261)
              return v21;
LABEL_133:
            v97 = *(_QWORD *)(v1227 + 32);
            v98 = *(_DWORD *)(v97 + 4);
            if (v98 < 0)
            {
              v758 = v98 & 0x7FFFFFFF;
              v100 = v14;
              v101 = v1262;
              if (v758 >= *(_DWORD *)(v1262 + 432))
                v99 = 0;
              else
                v99 = *(void **)(*(_QWORD *)(v1262 + 424) + 8 * v758);
            }
            else
            {
              v99 = 0;
              v100 = v14;
              v101 = v1262;
            }
            v1314 = v99;
            v769 = v97 + 32 * (v10 + 1);
            v772 = *(_DWORD *)(v769 + 4);
            v771 = (_DWORD *)(v769 + 4);
            LODWORD(v770) = v772;
            v773 = *(_QWORD *)(v101 + 272) + 8 * v772;
            v774 = (uint64_t *)(*(_QWORD *)(v101 + 24) + 16 * (v772 & 0x7FFFFFFF) + 8);
            if (v772 >= 0)
              v774 = (uint64_t *)v773;
            v775 = *v774;
            if ((*(_BYTE *)(v775 + 3) & 1) == 0)
              v775 = *(_QWORD *)(v775 + 24);
            v776 = *(_QWORD *)(v775 + 8);
            if (**(_WORD **)(v776 + 16) == 121)
            {
              v974 = *(_QWORD *)(*(_QWORD *)(v776 + 32) + 48);
              if (v974)
              {
                v975 = *(_QWORD *)(v974 + 32);
                if ((_UNKNOWN *)v975 == &unk_1C866F1C0)
                {
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v1280[1], (const llvm::detail::DoubleAPFloat *)(v974 + 32));
                }
                else
                {
                  v1280[1] = *(void **)(v974 + 32);
                  if ((*(_DWORD *)(v975 + 8) + 64) >= 0x80)
                    v1281 = operator new[]();
                  v976 = *(_BYTE *)(v974 + 52);
                  v977 = v976 & 7;
                  BYTE4(v1282) = BYTE4(v1282) & 0xF0 | v976 & 8 | v976 & 7;
                  LODWORD(v1282) = *(_DWORD *)(v974 + 48);
                  v979 = (v976 & 6) != 0 && v977 != 3;
                  if (v977 == 1 || v979)
                  {
                    v981 = *((unsigned int *)v1280[1] + 2);
                    if ((v981 - 64) <= 0xFFFFFF7F)
                      v982 = (uint64_t *)v1281;
                    else
                      v982 = &v1281;
                    v985 = *(uint64_t **)(v974 + 40);
                    v984 = (uint64_t *)(v974 + 40);
                    v983 = v985;
                    if ((*(_DWORD *)(*(v984 - 1) + 8) - 64) >= 0xFFFFFF80)
                      v983 = v984;
                    if (v981 <= 0xFFFFFFBF)
                    {
                      v986 = (unint64_t)(v981 + 64) >> 6;
                      do
                      {
                        v987 = *v983++;
                        *v982++ = v987;
                        --v986;
                      }
                      while (v986);
                    }
                  }
                }
                llvm::APFloat::convert((uint64_t)v1280, &unk_1C866F198, 1, __src);
                v988 = 1.0 / sqrt(llvm::APFloat::convertToDouble((llvm::APFloat *)v1280));
                v989 = ***v1219;
                v991 = sub_1C4825F50((unint64_t *)&v1314);
                if ((_DWORD)v990 == 1)
                sub_1C4940308((uint64_t)v1277, v991, v988);
                v993 = llvm::ConstantFP::get(v989, (llvm::LLVMContext *)v1277, v992);
                if (v1277[1] == &unk_1C866F1C0)
                {
                  sub_1C4773C74((uint64_t *)v1278);
                }
                else if ((*((_DWORD *)v1277[1] + 2) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v1278[0])
                {
                  MEMORY[0x1CAA32F9C](*(_QWORD *)&v1278[0], 0x1000C8000313F17);
                }
                v971 = v1227;
                LODWORD(v1277[0]) = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
                LODWORD(v1277[1]) = 1;
                (*((void (**)(unsigned __int8 **, void **, llvm::APFloatBase *))*v1266 + 3))(v1266, v1277, v993);
                v972 = *(_QWORD *)(v1227 + 24);
                v973 = v1227;
                if ((*(_BYTE *)v1227 & 4) == 0)
                {
                  v973 = v1227;
                  if ((*(_WORD *)(v1227 + 44) & 8) != 0)
                  {
                    v973 = v1227;
                    do
                      v973 = *(_QWORD *)(v973 + 8);
                    while ((*(_WORD *)(v973 + 44) & 8) != 0);
                  }
                }
                goto LABEL_1019;
              }
            }
            if (v13 == 2526)
            {
              v176 = v1227;
              v777 = v1266;
              goto LABEL_833;
            }
            v176 = v1227;
            v777 = v1266;
            if ((*((_WORD *)v100 + 510) & 1) != 0 || (*(_WORD *)(v1227 + 44) & 0x200) != 0)
              goto LABEL_833;
            v779 = sub_1C4825F50((unint64_t *)&v1314);
            if ((_DWORD)v778 == 1)
            v770 = *v771;
            if (v779 == 16)
              goto LABEL_833;
            if ((v770 & 0x80000000) != 0)
              v996 = (uint64_t *)(*(_QWORD *)(v101 + 24) + 16 * (v770 & 0x7FFFFFFF) + 8);
            else
              v996 = (uint64_t *)(*(_QWORD *)(v101 + 272) + 8 * v770);
            v1051 = *v996;
            if (!v1051)
              goto LABEL_1056;
            if ((*(_BYTE *)(v1051 + 3) & 1) != 0)
            {
              v176 = v1227;
              v777 = v1266;
            }
            else
            {
              v1051 = *(_QWORD *)(v1051 + 24);
              v176 = v1227;
              v777 = v1266;
              if (!v1051 || (*(_BYTE *)(v1051 + 3) & 1) == 0)
              {
LABEL_1056:
                v1052 = ***(llvm::ConstantFP ****)v777[1];
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                LODWORD(__src[1]) = 32;
                __src[0] = (void *)1593835520;
                llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1280[1], (const llvm::APInt **)__src);
                v1054 = llvm::ConstantFP::get(v1052, (llvm::LLVMContext *)v1280, v1053);
                v1055 = (*((uint64_t (**)(unsigned __int8 **, void **, llvm::APFloatBase *))*v777 + 3))(v777, v1277, v1054);
                v1057 = v1056;
                if (v1280[1] == &unk_1C866F1C0)
                {
                  sub_1C4773C74(&v1281);
                }
                else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
                {
                  MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
                }
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                LODWORD(__src[1]) = 32;
                __src[0] = (void *)528482304;
                llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1280[1], (const llvm::APInt **)__src);
                v1059 = llvm::ConstantFP::get(v1052, (llvm::LLVMContext *)v1280, v1058);
                v1060 = (*((uint64_t (**)(unsigned __int8 **, void **, llvm::APFloatBase *))*v777 + 3))(v777, v1277, v1059);
                v1062 = v1061;
                v1254 = v1052;
                if (v1280[1] == &unk_1C866F1C0)
                {
                  sub_1C4773C74(&v1281);
                }
                else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
                {
                  MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
                }
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                LODWORD(v1280[0]) = *v771;
                LODWORD(v1281) = 0;
                *(_QWORD *)&v1282 = v1060;
                *((_QWORD *)&v1282 + 1) = v1062;
                v1283 = 1;
                v1063 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v777
                         + 4))(v777, 165, v1277, 1, v1280, 2, 0);
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                LODWORD(v1280[0]) = 2;
                LODWORD(v1281) = 2;
                LODWORD(v1282) = *v771;
                v1283 = 0;
                v1261 = v1057;
                v1265 = v1055;
                v1284 = v1055;
                v1285 = v1057;
                v1286 = 1;
                v1287 = v1063;
                v1288 = v1064;
                v1289 = 1;
                LODWORD(v1290) = v1282;
                v1292 = 0;
                v1065 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v777
                                 + 4))(v777, 51, v1277, 1, v1280, 5, 0);
                v1067 = v1066;
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v1065;
                v1280[1] = v1066;
                LODWORD(v1281) = 1;
                v1068 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v777
                                 + 4))(v777, 333, v1277, 1, v1280, 1, 0);
                v1070 = v1069;
                v1280[0] = (void *)257;
                LODWORD(v1280[1]) = 0;
                v1071 = sub_1C5545FFC((uint64_t)v777, (unint64_t *)v1280, 0.5);
                v1240 = v1072;
                v1246 = v1071;
                v1280[0] = (void *)257;
                LODWORD(v1280[1]) = 0;
                v1234 = (void *)sub_1C5545FFC((uint64_t)v777, (unint64_t *)v1280, -0.5);
                v1074 = v1073;
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v1065;
                v1280[1] = v1067;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v1068;
                *((_QWORD *)&v1282 + 1) = v1070;
                v1283 = 1;
                v1075 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v777
                                 + 4))(v777, 165, v1277, 1, v1280, 2, 0);
                v1077 = v1076;
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v1075;
                v1280[1] = v1076;
                LODWORD(v1281) = 1;
                v1078 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                         + 4))(v1266, 177, v1277, 1, v1280, 1, 0);
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v1065;
                v1280[1] = v1067;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v1068;
                *((_QWORD *)&v1282 + 1) = v1070;
                v1283 = 1;
                v1284 = v1078;
                v1285 = v1079;
                v1286 = 1;
                v1080 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                         + 4))(v1266, 166, v1277, 1, v1280, 3, 0);
                v1082 = v1081;
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v1234;
                v1280[1] = v1074;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v1068;
                *((_QWORD *)&v1282 + 1) = v1070;
                v1283 = 1;
                v1083 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                                 + 4))(v1266, 165, v1277, 1, v1280, 2, 0);
                v1085 = v1084;
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v1075;
                v1280[1] = v1077;
                v1086 = v1266;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v1083;
                *((_QWORD *)&v1282 + 1) = v1084;
                v1283 = 1;
                v1284 = v1246;
                v1285 = v1240;
                v1286 = 1;
                v1087 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                         + 4))(v1266, 166, v1277, 1, v1280, 3, 0);
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v1083;
                v1280[1] = v1085;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v1080;
                *((_QWORD *)&v1282 + 1) = v1082;
                v1283 = 1;
                v1284 = v1087;
                v1285 = v1088;
                v1286 = 1;
                v1089 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1086
                                 + 4))(v1086, 166, v1277, 1, v1280, 3, 0);
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v1089;
                v1280[1] = v1090;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v1068;
                *((_QWORD *)&v1282 + 1) = v1070;
                v1283 = 1;
                v1284 = (uint64_t)v1068;
                v1285 = v1070;
                v1286 = 1;
                v1091 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1086
                         + 4))(v1086, 166, v1277, 1, v1280, 3, 0);
                v1093 = v1092;
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v1068;
                v1280[1] = v1070;
                LODWORD(v1281) = 1;
                __src[0] = (void *)257;
                LODWORD(__src[1]) = 0;
                *(_QWORD *)&v1282 = sub_1C5544694((uint64_t)v1266, (unint64_t *)__src, 1);
                *((_QWORD *)&v1282 + 1) = v1094;
                v1283 = 1;
                v1095 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1086
                         + 4))(v1086, 46, v1277, 1, v1280, 2, 0);
                v1097 = v1096;
                v1280[0] = (void *)257;
                LODWORD(v1280[1]) = 0;
                v1098 = sub_1C5544694((uint64_t)v1266, (unint64_t *)v1280, 2139095039);
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                LODWORD(v1280[0]) = 35;
                LODWORD(v1281) = 2;
                *(_QWORD *)&v1282 = v1095;
                *((_QWORD *)&v1282 + 1) = v1097;
                v1283 = 1;
                v1284 = v1098;
                v1285 = v1099;
                v1286 = 1;
                v1287 = (uint64_t)v1068;
                v1288 = v1070;
                v1289 = 1;
                v1290 = v1091;
                v1291 = v1093;
                v1292 = 1;
                v1100 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1086
                                 + 4))(v1086, 51, v1277, 1, v1280, 5, 0);
                v1102 = v1101;
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                LODWORD(__src[1]) = 32;
                __src[0] = (void *)796917760;
                llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1280[1], (const llvm::APInt **)__src);
                v1104 = llvm::ConstantFP::get(v1254, (llvm::LLVMContext *)v1280, v1103);
                v1105 = (*((uint64_t (**)(unsigned __int8 **, void **, llvm::APFloatBase *))*v1086 + 3))(v1086, v1277, v1104);
                v1107 = v1106;
                if (v1280[1] == &unk_1C866F1C0)
                {
                  sub_1C4773C74(&v1281);
                }
                else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
                {
                  MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
                }
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v1100;
                v1280[1] = v1102;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v1105;
                *((_QWORD *)&v1282 + 1) = v1107;
                v1283 = 1;
                v1108 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                         + 4))(v1266, 165, v1277, 1, v1280, 2, 0);
                LODWORD(v1277[0]) = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
                LODWORD(v1277[1]) = 1;
                LODWORD(v1280[0]) = 2;
                LODWORD(v1281) = 2;
                LODWORD(v1282) = *v771;
                v1283 = 0;
                v1284 = v1265;
                v1285 = v1261;
                v1286 = 1;
                v1287 = v1108;
                v1288 = v1109;
                v1289 = 1;
                v1290 = (uint64_t)v1100;
                v1291 = (llvm::MachineInstr *)v1102;
                v1292 = 1;
                v139 = v1227;
                (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                 + 4))(v1266, 51, v1277, 1, v1280, 5, 0);
                v146 = *(_QWORD *)(v1227 + 24);
                v147 = v1227;
                if ((*(_BYTE *)v1227 & 4) == 0)
                {
                  v147 = v1227;
                  if ((*(_WORD *)(v1227 + 44) & 8) != 0)
                  {
                    v147 = v1227;
                    do
                      v147 = *(_QWORD *)(v147 + 8);
                    while ((*(_WORD *)(v147 + 44) & 8) != 0);
                  }
                }
LABEL_643:
                v238 = *(_QWORD *)(v147 + 8);
                v239 = v146 + 40;
                v78 = v139;
                goto LABEL_945;
              }
            }
            v1208 = *(_QWORD *)(v1051 + 8);
            if (v1208 && **(_WORD **)(v1208 + 16) == 178)
            {
LABEL_833:
              LODWORD(v1277[0]) = *(_DWORD *)(*(_QWORD *)(v176 + 32) + 4);
              LODWORD(v1277[1]) = 1;
              LODWORD(v1280[0]) = v770;
              LODWORD(v1281) = 0;
              (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))*v777
               + 4))(v777, 333, v1277, 1, v1280, 1, *(unsigned __int16 *)(v176 + 44) | 0x100000000);
              v181 = *(_QWORD *)(v176 + 24);
              v182 = v176;
              if ((*(_BYTE *)v176 & 4) == 0)
              {
                v182 = v176;
                if ((*(_WORD *)(v176 + 44) & 8) != 0)
                {
                  v182 = v176;
                  do
                    v182 = *(_QWORD *)(v182 + 8);
                  while ((*(_WORD *)(v182 + 44) & 8) != 0);
                }
              }
              goto LABEL_259;
            }
            goto LABEL_1056;
          }
LABEL_260:
          if (v13 == 140)
            v240 = 218;
          else
            v240 = 219;
          v139 = v1227;
          v241 = *(_QWORD *)(v1227 + 32);
          v242 = *(_DWORD *)(v241 + 4);
          LODWORD(v241) = *(_DWORD *)(v241 + 68);
          LODWORD(v1277[0]) = v242;
          LODWORD(v1277[1]) = 1;
          LODWORD(v1280[0]) = v241;
          LODWORD(v1281) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))*v1266 + 4))(v1266, v240, v1277, 1, v1280, 1, *(unsigned __int16 *)(v1227 + 44) | 0x100000000);
          v146 = *(_QWORD *)(v1227 + 24);
          v147 = v1227;
          if ((*(_BYTE *)v1227 & 4) == 0)
          {
            v147 = v1227;
            if ((*(_WORD *)(v1227 + 44) & 8) != 0)
            {
              v147 = v1227;
              do
                v147 = *(_QWORD *)(v147 + 8);
              while ((*(_WORD *)(v147 + 44) & 8) != 0);
            }
          }
          goto LABEL_643;
        }
LABEL_272:
        v248 = *(_QWORD *)(v1227 + 32) + 32 * (v10 + 1);
        v251 = *(_DWORD *)(v248 + 4);
        v249 = (_DWORD *)(v248 + 4);
        v250 = v251;
        v252 = v251 & 0x7FFFFFFF;
        if ((v251 & 0x80000000) != 0)
        {
          v254 = v14;
          v255 = v1262;
          if (v252 >= *(unsigned int *)(v1262 + 432))
            v253 = 0;
          else
            v253 = *(void **)(*(_QWORD *)(v1262 + 424) + 8 * v252);
        }
        else
        {
          v253 = 0;
          v254 = v14;
          v255 = v1262;
        }
        v1314 = v253;
        v763 = (uint64_t *)(*(_QWORD *)(v255 + 24) + 16 * v252 + 8);
        if ((int)v250 >= 0)
          v763 = (uint64_t *)(*(_QWORD *)(v255 + 272) + 8 * v250);
        v764 = *v763;
        if ((*(_BYTE *)(v764 + 3) & 1) == 0)
          v764 = *(_QWORD *)(v764 + 24);
        v765 = *(_QWORD *)(v764 + 8);
        if (**(_WORD **)(v765 + 16) == 121)
        {
          v951 = *(_QWORD *)(*(_QWORD *)(v765 + 32) + 48);
          if (v951)
          {
            v952 = *(_QWORD *)(v951 + 32);
            if ((_UNKNOWN *)v952 == &unk_1C866F1C0)
            {
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v1280[1], (const llvm::detail::DoubleAPFloat *)(v951 + 32));
            }
            else
            {
              v1280[1] = *(void **)(v951 + 32);
              if ((*(_DWORD *)(v952 + 8) + 64) >= 0x80)
                v1281 = operator new[]();
              v953 = *(_BYTE *)(v951 + 52);
              v954 = v953 & 7;
              BYTE4(v1282) = BYTE4(v1282) & 0xF0 | v953 & 8 | v953 & 7;
              LODWORD(v1282) = *(_DWORD *)(v951 + 48);
              v956 = (v953 & 6) != 0 && v954 != 3;
              if (v954 == 1 || v956)
              {
                v958 = *((unsigned int *)v1280[1] + 2);
                if ((v958 - 64) <= 0xFFFFFF7F)
                  v959 = (uint64_t *)v1281;
                else
                  v959 = &v1281;
                v962 = *(uint64_t **)(v951 + 40);
                v961 = (uint64_t *)(v951 + 40);
                v960 = v962;
                if ((*(_DWORD *)(*(v961 - 1) + 8) - 64) >= 0xFFFFFF80)
                  v960 = v961;
                if (v958 <= 0xFFFFFFBF)
                {
                  v963 = (unint64_t)(v958 + 64) >> 6;
                  do
                  {
                    v964 = *v960++;
                    *v959++ = v964;
                    --v963;
                  }
                  while (v963);
                }
              }
            }
            llvm::APFloat::convert((uint64_t)v1280, &unk_1C866F198, 1, __src);
            v965 = 1.0 / llvm::APFloat::convertToDouble((llvm::APFloat *)v1280);
            v966 = ***v1219;
            v968 = sub_1C4825F50((unint64_t *)&v1314);
            if ((_DWORD)v967 == 1)
            sub_1C4940308((uint64_t)v1277, v968, v965);
            v970 = llvm::ConstantFP::get(v966, (llvm::LLVMContext *)v1277, v969);
            if (v1277[1] == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)v1278);
            }
            else if ((*((_DWORD *)v1277[1] + 2) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v1278[0])
            {
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v1278[0], 0x1000C8000313F17);
            }
            v971 = v1227;
            LODWORD(v1277[0]) = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
            LODWORD(v1277[1]) = 1;
            (*((void (**)(unsigned __int8 **, void **, llvm::APFloatBase *))*v1266 + 3))(v1266, v1277, v970);
            v972 = *(_QWORD *)(v1227 + 24);
            v973 = v1227;
            if ((*(_BYTE *)v1227 & 4) == 0)
            {
              v973 = v1227;
              if ((*(_WORD *)(v1227 + 44) & 8) != 0)
              {
                v973 = v1227;
                do
                  v973 = *(_QWORD *)(v973 + 8);
                while ((*(_WORD *)(v973 + 44) & 8) != 0);
              }
            }
LABEL_1019:
            sub_1C487FE80(v972 + 40, v971, *(_QWORD *)(v973 + 8));
            if (v1280[1] == &unk_1C866F1C0)
            {
              sub_1C4773C74(&v1281);
            }
            else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
            {
              MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
            }
            return 1;
          }
        }
        v19 = v13 == 2517;
        v766 = (uint64_t)v1266;
        if (v19 || (*((_WORD *)v254 + 510) & 1) != 0 || (*(_WORD *)(v1227 + 44) & 0x80) != 0)
          goto LABEL_815;
        v768 = sub_1C4825F50((unint64_t *)&v1314);
        if ((_DWORD)v767 == 1)
        if (v768 == 16)
          goto LABEL_815;
        v994 = *v249;
        if ((v994 & 0x80000000) != 0)
          v995 = (uint64_t *)(*(_QWORD *)(v255 + 24) + 16 * (v994 & 0x7FFFFFFF) + 8);
        else
          v995 = (uint64_t *)(*(_QWORD *)(v255 + 272) + 8 * v994);
        v1005 = *v995;
        if (v1005)
        {
          if ((*(_BYTE *)(v1005 + 3) & 1) != 0)
          {
            v766 = (uint64_t)v1266;
          }
          else
          {
            v1005 = *(_QWORD *)(v1005 + 24);
            v766 = (uint64_t)v1266;
            if (!v1005 || (*(_BYTE *)(v1005 + 3) & 1) == 0)
              goto LABEL_1043;
          }
          v1207 = *(_QWORD *)(v1005 + 8);
          if (v1207 && **(_WORD **)(v1207 + 16) == 178)
          {
LABEL_815:
            v176 = v1227;
            LODWORD(v1277[0]) = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
            LODWORD(v1277[1]) = 1;
            LODWORD(v1280[0]) = *v249;
            LODWORD(v1281) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v766
                                                                                                  + 32))(v766, 310, v1277, 1, v1280, 1, *(unsigned __int16 *)(v1227 + 44) | 0x100000000);
            v181 = *(_QWORD *)(v1227 + 24);
            v182 = v1227;
            if ((*(_BYTE *)v1227 & 4) == 0)
            {
              v182 = v1227;
              if ((*(_WORD *)(v1227 + 44) & 8) != 0)
              {
                v182 = v1227;
                do
                  v182 = *(_QWORD *)(v182 + 8);
                while ((*(_WORD *)(v182 + 44) & 8) != 0);
              }
            }
LABEL_259:
            v238 = *(_QWORD *)(v182 + 8);
            v239 = v181 + 40;
            v78 = v176;
LABEL_945:
            sub_1C487FE80(v239, v78, v238);
            return 1;
          }
        }
LABEL_1043:
        v1006 = ***v1219;
        LODWORD(__src[1]) = 32;
        __src[0] = (void *)1602224128;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1280[1], (const llvm::APInt **)__src);
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        v1008 = llvm::ConstantFP::get(v1006, (llvm::LLVMContext *)v1280, v1007);
        (*(void (**)(uint64_t, void **, llvm::APFloatBase *))(*(_QWORD *)v766 + 24))(v766, v1277, v1008);
        v1010 = *(_DWORD *)(*(_QWORD *)(v1009 + 32) + 4);
        if (v1280[1] == &unk_1C866F1C0)
        {
          sub_1C4773C74(&v1281);
        }
        else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
        {
          MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
        }
        LODWORD(__src[1]) = 32;
        __src[0] = (void *)528482304;
        llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1280[1], (const llvm::APInt **)__src);
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        v1012 = llvm::ConstantFP::get(v1006, (llvm::LLVMContext *)v1280, v1011);
        (*(void (**)(uint64_t, void **, llvm::APFloatBase *))(*(_QWORD *)v766 + 24))(v766, v1277, v1012);
        v1014 = *(_DWORD *)(*(_QWORD *)(v1013 + 32) + 4);
        if (v1280[1] == &unk_1C866F1C0)
        {
          sub_1C4773C74(&v1281);
        }
        else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
        {
          MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
        }
        BYTE4(v1282) = BYTE4(v1282) & 0xF0 | 2;
        LODWORD(v1282) = 23;
        v1280[1] = &unk_1C866F184;
        v1281 = 1;
        llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v1280[1], 1, 0);
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        v1016 = llvm::ConstantFP::get(v1006, (llvm::LLVMContext *)v1280, v1015);
        (*(void (**)(uint64_t, void **, llvm::APFloatBase *))(*(_QWORD *)v766 + 24))(v766, v1277, v1016);
        v1018 = *(_DWORD *)(*(_QWORD *)(v1017 + 32) + 4);
        if (v1280[1] == &unk_1C866F1C0)
        {
          sub_1C4773C74(&v1281);
        }
        else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
        {
          MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
        }
        v1280[0] = v1314;
        LODWORD(v1280[1]) = 0;
        v1019 = sub_1C5544694(v766, (unint64_t *)v1280, 1);
        v1245 = v1020;
        v1253 = (llvm::ConstantFP *)v1019;
        v1280[0] = v1314;
        LODWORD(v1280[1]) = 0;
        v1021 = sub_1C5544694(v766, (unint64_t *)v1280, 2139095039);
        v1260 = v1022;
        v1264 = v1021;
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        LODWORD(v1280[0]) = v250;
        LODWORD(v1281) = 0;
        LODWORD(v1282) = v1014;
        v1283 = 0;
        v1268 = v1014;
        v1023 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v766 + 32))(v766, 165, v1277, 1, v1280, 2, 0);
        v1025 = v1024;
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        LODWORD(v1280[0]) = v250;
        LODWORD(v1281) = 0;
        v1026 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v766 + 32))(v766, 184, v1277, 1, v1280, 1, 0);
        v1028 = v1027;
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        LODWORD(v1280[0]) = 2;
        LODWORD(v1281) = 2;
        *(_QWORD *)&v1282 = v1026;
        *((_QWORD *)&v1282 + 1) = v1027;
        v1283 = 1;
        LODWORD(v1284) = v1010;
        v1286 = 0;
        v1287 = v1023;
        v1288 = v1025;
        v1289 = 1;
        LODWORD(v1290) = v250;
        v1292 = 0;
        v1029 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v766 + 32))(v766, 51, v1277, 1, v1280, 5, 0);
        v1031 = v1030;
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v1029;
        v1280[1] = v1030;
        LODWORD(v1281) = 1;
        v1032 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v766 + 32))(v766, 310, v1277, 1, v1280, 1, 0);
        v1239 = v1010;
        v1034 = v1033;
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v1029;
        v1280[1] = v1031;
        LODWORD(v1281) = 1;
        v1035 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v766 + 32))(v766, 177, v1277, 1, v1280, 1, 0);
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v1035;
        v1280[1] = v1036;
        LODWORD(v1281) = 1;
        *(_QWORD *)&v1282 = v1032;
        *((_QWORD *)&v1282 + 1) = v1034;
        v1283 = 1;
        LODWORD(v1284) = v1018;
        v1286 = 0;
        v1037 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v766 + 32))(v766, 166, v1277, 1, v1280, 3, 0);
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v1037;
        v1280[1] = v1038;
        LODWORD(v1281) = 1;
        *(_QWORD *)&v1282 = v1032;
        *((_QWORD *)&v1282 + 1) = v1034;
        v1283 = 1;
        v1284 = (uint64_t)v1032;
        v1285 = v1034;
        v1286 = 1;
        v1039 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v766 + 32))(v766, 166, v1277, 1, v1280, 3, 0);
        v1041 = v1040;
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v1032;
        v1280[1] = v1034;
        LODWORD(v1281) = 1;
        v1042 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v766 + 32))(v766, 184, v1277, 1, v1280, 1, 0);
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v1042;
        v1280[1] = v1043;
        LODWORD(v1281) = 1;
        *(_QWORD *)&v1282 = v1253;
        *((_QWORD *)&v1282 + 1) = v1245;
        v1283 = 1;
        v1044 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v766 + 32))(v766, 46, v1277, 1, v1280, 2, 0);
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        LODWORD(v1280[0]) = 35;
        LODWORD(v1281) = 2;
        *(_QWORD *)&v1282 = v1044;
        *((_QWORD *)&v1282 + 1) = v1045;
        v1283 = 1;
        v1284 = v1264;
        v1285 = v1260;
        v1286 = 1;
        v1287 = (uint64_t)v1032;
        v1288 = v1034;
        v1289 = 1;
        v1290 = v1039;
        v1291 = v1041;
        v1292 = 1;
        v1046 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v766 + 32))(v766, 51, v1277, 1, v1280, 5, 0);
        v1048 = v1047;
        v1277[0] = v1314;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v1046;
        v1280[1] = v1047;
        LODWORD(v1281) = 1;
        LODWORD(v1282) = v1268;
        v1283 = 0;
        v1049 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v766 + 32))(v766, 165, v1277, 1, v1280, 2, 0);
        v176 = v1227;
        LODWORD(v1277[0]) = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
        LODWORD(v1277[1]) = 1;
        LODWORD(v1280[0]) = 2;
        LODWORD(v1281) = 2;
        *(_QWORD *)&v1282 = v1026;
        *((_QWORD *)&v1282 + 1) = v1028;
        v1283 = 1;
        LODWORD(v1284) = v1239;
        v1286 = 0;
        v1287 = v1049;
        v1288 = v1050;
        v1289 = 1;
        v1290 = (uint64_t)v1046;
        v1291 = v1048;
        v1292 = 1;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v766 + 32))(v766, 51, v1277, 1, v1280, 5, 0);
        v181 = *(_QWORD *)(v1227 + 24);
        v182 = v1227;
        if ((*(_BYTE *)v1227 & 4) == 0)
        {
          v182 = v1227;
          if ((*(_WORD *)(v1227 + 44) & 8) != 0)
          {
            v182 = v1227;
            do
              v182 = *(_QWORD *)(v182 + 8);
            while ((*(_WORD *)(v182 + 44) & 8) != 0);
          }
        }
        goto LABEL_259;
      }
      if (v13 != 202)
      {
        if (v13 != 240)
          return v21;
        v78 = v1227;
        v79 = *(_QWORD *)(v1227 + 24);
        v80 = v1227;
        if ((*(_BYTE *)v1227 & 4) == 0)
        {
          v80 = v1227;
          if ((*(_WORD *)(v1227 + 44) & 8) != 0)
          {
            v80 = v1227;
            do
              v80 = *(_QWORD *)(v80 + 8);
            while ((*(_WORD *)(v80 + 44) & 8) != 0);
          }
        }
        goto LABEL_944;
      }
    }
    v183 = *(unsigned int *)(v1227 + 40);
    v184 = *(_QWORD *)(v1227 + 32);
    if ((_DWORD)v183)
    {
      v185 = 0;
      v186 = *(unsigned __int8 **)(v1227 + 32);
      while (1)
      {
        v187 = *v186;
        v186 += 32;
        if (v187 == 17)
          break;
        if (v183 == ++v185)
          goto LABEL_230;
      }
    }
    else
    {
LABEL_230:
      LODWORD(v185) = -1;
    }
    v188 = *(_DWORD *)(v184 + 4);
    if (v188 < 0 && (v188 & 0x7FFFFFFFu) < *(_DWORD *)(v1262 + 432))
      v189 = *(void **)(*(_QWORD *)(v1262 + 424) + 8 * (v188 & 0x7FFFFFFF));
    else
      v189 = 0;
    v1280[0] = v189;
    v411 = sub_1C4825F50((unint64_t *)v1280);
    if ((_DWORD)v410 == 1)
    v21 = v411 == 32 || v411 == 16;
    if (v411 == 32 || v411 == 16)
    {
      if (v13 == 193)
        v412 = 2;
      else
        v412 = 4;
      LODWORD(v1277[0]) = v188;
      LODWORD(v1277[1]) = 1;
      LODWORD(v1280[0]) = v412;
      LODWORD(v1281) = 2;
      LODWORD(v1282) = *(_DWORD *)(v184 + 32 * (v185 + 1) + 4);
      v1283 = 0;
      LODWORD(v1284) = *(_DWORD *)(v184 + 32 * (v185 + 2) + 4);
      v1286 = 0;
      LODWORD(v1287) = v1282;
      v1289 = 0;
      LODWORD(v1290) = v1284;
      v1292 = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))*v1266 + 4))(v1266, 335, v1277, 1, v1280, 5, *(unsigned __int16 *)(v1227 + 44) | 0x100000000);
      v413 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v413 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v413 = v1227;
          do
            v413 = *(_QWORD *)(v413 + 8);
          while ((*(_WORD *)(v413 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v1227 + 24) + 40, v1227, *(_QWORD *)(v413 + 8));
    }
    return v21;
  }
  switch(v13)
  {
    case 1269:
    case 2107:
    case 2108:
    case 2132:
    case 2139:
    case 2145:
    case 2146:
    case 2147:
    case 2150:
    case 2151:
    case 2152:
    case 2154:
    case 2155:
    case 2156:
    case 2167:
    case 2169:
    case 2170:
    case 2173:
    case 2174:
    case 2175:
    case 2176:
    case 2305:
    case 2306:
    case 2307:
    case 2308:
    case 2365:
    case 2408:
    case 2409:
    case 2410:
    case 2423:
    case 2444:
    case 2445:
    case 2446:
    case 2484:
    case 2485:
    case 2486:
    case 2491:
    case 2586:
    case 2587:
    case 2665:
    case 2666:
    case 2667:
    case 2669:
    case 2670:
    case 2671:
    case 2672:
    case 2673:
    case 2674:
    case 2675:
    case 2676:
    case 2677:
    case 2678:
    case 2679:
    case 2732:
    case 2769:
    case 2789:
    case 2790:
    case 2794:
    case 2795:
    case 2796:
    case 2807:
    case 2808:
    case 2809:
    case 2810:
    case 2814:
    case 2815:
    case 2816:
    case 2820:
    case 2822:
    case 2841:
    case 2848:
      v28 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
      if (v28 < 0)
      {
        v30 = (_QWORD *)v1262;
        if ((v28 & 0x7FFFFFFFu) >= *(_DWORD *)(v1262 + 432))
          v29 = 0;
        else
          v29 = *(void **)(*(_QWORD *)(v1262 + 424) + 8 * (v28 & 0x7FFFFFFF));
      }
      else
      {
        v29 = 0;
        v30 = (_QWORD *)v1262;
      }
      v1314 = v29;
      v1277[0] = &v1275;
      v68 = 35;
      v1277[1] = v1266;
      *(_QWORD *)&v1278[0] = &v1276;
      *((_QWORD *)&v1278[0] + 1) = &v1314;
      if ((v13 - 2789) <= 5 && ((1 << (v13 + 27)) & 0x23) != 0)
      {
        if (v13 == 2794)
          v69 = 72;
        else
          v69 = 74;
        if (v13 == 2794)
          v70 = 73;
        else
          v70 = 75;
        sub_1C4A745D0((uint64_t)v1277, v69);
        v72 = v71;
        v73 = (void *)sub_1C4A745D0((uint64_t)v1277, v70);
        __src[0] = (void *)257;
        LODWORD(__src[1]) = 0;
        v1280[0] = v73;
        v1280[1] = v74;
        LODWORD(v1281) = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 126, __src, 1, v1280, 1, 0);
        __src[0] = (void *)513;
        LODWORD(__src[1]) = 0;
        LODWORD(v1280[0]) = *(_DWORD *)(*(_QWORD *)(v72 + 32) + 4);
        LODWORD(v1281) = 0;
        LODWORD(v1282) = *(_DWORD *)(*(_QWORD *)(v75 + 32) + 4);
        v1283 = 0;
        v76 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                       + 4))(v1266, 76, __src, 1, v1280, 2, 0);
        LODWORD(__src[0]) = v28;
        LODWORD(__src[1]) = 1;
        v1280[0] = v76;
        v1280[1] = v77;
        LODWORD(v1281) = 1;
        sub_1C5546EF4((uint64_t *)v1266, (uint64_t *)__src, (int *)v1280);
        v78 = v1227;
        v79 = *(_QWORD *)(v1227 + 24);
        v80 = v1227;
        if ((*(_BYTE *)v1227 & 4) == 0)
        {
          v80 = v1227;
          if ((*(_WORD *)(v1227 + 44) & 8) != 0)
          {
            v80 = v1227;
            do
              v80 = *(_QWORD *)(v80 + 8);
            while ((*(_WORD *)(v80 + 44) & 8) != 0);
          }
        }
        goto LABEL_944;
      }
      if (v13 == 2445)
      {
        v81 = v1227;
      }
      else
      {
        v81 = v1227;
        if (v13 != 2446)
        {
          v93 = sub_1C4A740C0(v13);
          sub_1C4A745D0((uint64_t)v1277, v93);
LABEL_126:
          v94 = *(_DWORD *)(*(_QWORD *)(v92 + 32) + 4);
          v95 = v30;
          v96 = v81;
          goto LABEL_127;
        }
        v68 = 36;
      }
      v82 = (void *)sub_1C4A745D0((uint64_t)v1277, v68);
      __src[0] = v1314;
      LODWORD(__src[1]) = 0;
      v1280[0] = v82;
      v1280[1] = v83;
      LODWORD(v1281) = 1;
      v84 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                     + 4))(v1266, 183, __src, 1, v1280, 1, 0);
      v86 = v85;
      v87 = ****(llvm::ConstantFP *****)(*(_QWORD *)(v81 + 24) + 32);
      LODWORD(v1280[1]) = 32;
      v1280[0] = (void *)1056964608;
      llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)__src, (const llvm::APInt **)v1280);
      v1280[1] = __src[0];
      v1281 = (uint64_t)__src[1];
      LODWORD(v1282) = v1308;
      BYTE4(v1282) = BYTE4(v1282) & 0xF0 | v1309 & 0xF;
      v89 = llvm::ConstantFP::get(v87, (llvm::LLVMContext *)v1280, v88);
      if (v1280[1] == &unk_1C866F1C0)
      {
        sub_1C4773C74(&v1281);
      }
      else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
      {
        MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
      }
      v1280[0] = v1314;
      LODWORD(v1280[1]) = 0;
      v90 = (*((uint64_t (**)(unsigned __int8 **, void **, llvm::APFloatBase *))*v1266 + 3))(v1266, v1280, v89);
      __src[0] = v1314;
      LODWORD(__src[1]) = 0;
      v1280[0] = v84;
      v1280[1] = v86;
      LODWORD(v1281) = 1;
      *(_QWORD *)&v1282 = v90;
      *((_QWORD *)&v1282 + 1) = v91;
      v1283 = 1;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))*v1266 + 4))(v1266, 163, __src, 1, v1280, 2, *(unsigned __int16 *)(v81 + 44) | 0x100000000);
      v30 = (_QWORD *)v1262;
      goto LABEL_126;
    case 1270:
    case 1271:
    case 1272:
    case 1273:
    case 1274:
    case 1275:
    case 1276:
    case 1277:
    case 1278:
    case 1279:
    case 1280:
    case 1824:
    case 1825:
    case 1826:
    case 1827:
    case 1828:
    case 1829:
    case 1830:
    case 1831:
    case 1832:
    case 1833:
    case 1834:
    case 1835:
    case 1836:
    case 1837:
    case 1838:
    case 1839:
    case 1840:
    case 1841:
    case 1842:
    case 1843:
    case 1844:
    case 1845:
    case 1846:
    case 1847:
    case 1848:
    case 1849:
    case 1850:
    case 1851:
    case 1852:
    case 1853:
    case 1854:
    case 1855:
    case 1856:
    case 1857:
    case 1858:
    case 1859:
    case 1860:
    case 1861:
    case 1862:
    case 1863:
    case 1864:
    case 1865:
    case 1866:
    case 1867:
    case 1868:
    case 1869:
    case 1870:
    case 1871:
    case 1872:
    case 1873:
    case 1874:
    case 1875:
    case 1876:
    case 1877:
    case 1878:
    case 1879:
    case 1880:
    case 1881:
    case 1882:
    case 1883:
    case 1884:
    case 1885:
    case 1886:
    case 1887:
    case 1888:
    case 1889:
    case 1890:
    case 1891:
    case 1892:
    case 1893:
    case 1894:
    case 1895:
    case 1896:
    case 1897:
    case 1898:
    case 1899:
    case 1900:
    case 1901:
    case 1902:
    case 1903:
    case 1904:
    case 1905:
    case 1906:
    case 1907:
    case 1908:
    case 1909:
    case 1910:
    case 1911:
    case 1912:
    case 1913:
    case 1914:
    case 1915:
    case 1916:
    case 1917:
    case 1918:
    case 1919:
    case 1920:
    case 1921:
    case 1922:
    case 1923:
    case 1924:
    case 1925:
    case 1926:
    case 1927:
    case 1928:
    case 1929:
    case 1930:
    case 1931:
    case 1932:
    case 1933:
    case 1934:
    case 1935:
    case 1936:
    case 1937:
    case 1938:
    case 1939:
    case 1940:
    case 1941:
    case 1942:
    case 1943:
    case 1944:
    case 1945:
    case 1946:
    case 1947:
    case 1948:
    case 1949:
    case 1950:
    case 1951:
    case 1952:
    case 1953:
    case 1954:
    case 1955:
    case 1956:
    case 1957:
    case 1958:
    case 1959:
    case 1960:
    case 1961:
    case 1962:
    case 1963:
    case 1964:
    case 1965:
    case 1966:
    case 1967:
    case 1968:
    case 1969:
    case 1970:
    case 1971:
    case 1972:
    case 1973:
    case 1974:
    case 1975:
    case 1976:
    case 1977:
    case 1978:
    case 1979:
    case 1980:
    case 1981:
    case 1982:
    case 1983:
    case 1984:
    case 1985:
    case 1986:
    case 1987:
    case 1988:
    case 1989:
    case 1990:
    case 1991:
    case 1992:
    case 1993:
    case 1994:
    case 1995:
    case 1996:
    case 1997:
    case 1998:
    case 1999:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 2029:
    case 2030:
    case 2031:
    case 2032:
    case 2033:
    case 2034:
    case 2035:
    case 2036:
    case 2037:
    case 2038:
    case 2039:
    case 2040:
    case 2041:
    case 2042:
    case 2043:
    case 2044:
    case 2045:
    case 2046:
    case 2047:
    case 2048:
    case 2049:
    case 2050:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2060:
    case 2061:
    case 2062:
    case 2063:
    case 2064:
    case 2065:
    case 2066:
    case 2067:
    case 2068:
    case 2069:
    case 2070:
    case 2071:
    case 2072:
    case 2073:
    case 2074:
    case 2075:
    case 2076:
    case 2077:
    case 2078:
    case 2079:
    case 2080:
    case 2081:
    case 2082:
    case 2083:
    case 2084:
    case 2085:
    case 2086:
    case 2087:
    case 2088:
    case 2089:
    case 2090:
    case 2091:
    case 2092:
    case 2093:
    case 2094:
    case 2095:
    case 2096:
    case 2097:
    case 2098:
    case 2099:
    case 2100:
    case 2101:
    case 2102:
    case 2103:
    case 2104:
    case 2105:
    case 2106:
    case 2109:
    case 2110:
    case 2111:
    case 2112:
    case 2113:
    case 2114:
    case 2115:
    case 2116:
    case 2117:
    case 2118:
    case 2119:
    case 2120:
    case 2121:
    case 2122:
    case 2123:
    case 2124:
    case 2125:
    case 2126:
    case 2127:
    case 2128:
    case 2129:
    case 2130:
    case 2131:
    case 2133:
    case 2141:
    case 2143:
    case 2148:
    case 2149:
    case 2153:
    case 2157:
    case 2158:
    case 2163:
    case 2164:
    case 2165:
    case 2166:
    case 2168:
    case 2309:
    case 2310:
    case 2311:
    case 2312:
    case 2313:
    case 2314:
    case 2315:
    case 2316:
    case 2317:
    case 2318:
    case 2319:
    case 2320:
    case 2321:
    case 2322:
    case 2323:
    case 2324:
    case 2325:
    case 2326:
    case 2327:
    case 2328:
    case 2329:
    case 2330:
    case 2331:
    case 2332:
    case 2333:
    case 2334:
    case 2335:
    case 2336:
    case 2337:
    case 2338:
    case 2339:
    case 2340:
    case 2341:
    case 2342:
    case 2343:
    case 2344:
    case 2345:
    case 2346:
    case 2347:
    case 2348:
    case 2349:
    case 2350:
    case 2351:
    case 2352:
    case 2353:
    case 2354:
    case 2355:
    case 2356:
    case 2357:
    case 2358:
    case 2359:
    case 2360:
    case 2361:
    case 2362:
    case 2363:
    case 2364:
    case 2366:
    case 2367:
    case 2368:
    case 2369:
    case 2370:
    case 2371:
    case 2372:
    case 2373:
    case 2411:
    case 2412:
    case 2413:
    case 2414:
    case 2415:
    case 2416:
    case 2417:
    case 2418:
    case 2421:
    case 2422:
    case 2425:
    case 2442:
    case 2443:
    case 2447:
    case 2449:
    case 2450:
    case 2454:
    case 2455:
    case 2456:
    case 2457:
    case 2458:
    case 2459:
    case 2460:
    case 2461:
    case 2462:
    case 2463:
    case 2464:
    case 2465:
    case 2466:
    case 2467:
    case 2468:
    case 2469:
    case 2479:
    case 2480:
    case 2481:
    case 2482:
    case 2489:
    case 2490:
    case 2493:
    case 2494:
    case 2495:
    case 2496:
    case 2497:
    case 2498:
    case 2499:
    case 2500:
    case 2501:
    case 2502:
    case 2503:
    case 2504:
    case 2505:
    case 2506:
    case 2507:
    case 2508:
    case 2509:
    case 2510:
    case 2511:
    case 2512:
    case 2513:
    case 2514:
    case 2515:
    case 2516:
    case 2518:
    case 2519:
    case 2520:
    case 2521:
    case 2523:
    case 2524:
    case 2525:
    case 2527:
    case 2528:
    case 2529:
    case 2530:
    case 2531:
    case 2532:
    case 2533:
    case 2534:
    case 2535:
    case 2536:
    case 2537:
    case 2538:
    case 2539:
    case 2540:
    case 2541:
    case 2542:
    case 2543:
    case 2577:
    case 2578:
    case 2580:
    case 2581:
    case 2582:
    case 2583:
    case 2584:
    case 2585:
    case 2588:
    case 2589:
    case 2590:
    case 2591:
    case 2592:
    case 2593:
    case 2594:
    case 2595:
    case 2596:
    case 2597:
    case 2598:
    case 2599:
    case 2600:
    case 2601:
    case 2602:
    case 2603:
    case 2604:
    case 2605:
    case 2610:
    case 2611:
    case 2612:
    case 2613:
    case 2614:
    case 2615:
    case 2618:
    case 2619:
    case 2620:
    case 2621:
    case 2622:
    case 2624:
    case 2625:
    case 2626:
    case 2627:
    case 2629:
    case 2662:
    case 2663:
    case 2664:
    case 2668:
    case 2680:
    case 2681:
    case 2682:
    case 2683:
    case 2684:
    case 2705:
    case 2709:
    case 2710:
    case 2711:
    case 2712:
    case 2713:
    case 2714:
    case 2715:
    case 2716:
    case 2717:
    case 2718:
    case 2719:
    case 2720:
    case 2721:
    case 2722:
    case 2723:
    case 2724:
    case 2725:
    case 2726:
    case 2727:
    case 2728:
    case 2729:
    case 2730:
    case 2731:
    case 2738:
    case 2740:
    case 2746:
    case 2747:
    case 2748:
    case 2750:
    case 2751:
    case 2752:
    case 2753:
    case 2754:
    case 2755:
    case 2756:
    case 2757:
    case 2758:
    case 2759:
    case 2760:
    case 2761:
    case 2762:
    case 2763:
    case 2764:
    case 2765:
    case 2766:
    case 2767:
    case 2768:
    case 2776:
    case 2780:
    case 2781:
    case 2782:
    case 2793:
    case 2797:
    case 2798:
    case 2799:
    case 2800:
    case 2801:
    case 2802:
    case 2803:
    case 2804:
    case 2805:
    case 2806:
    case 2813:
    case 2817:
    case 2818:
    case 2823:
    case 2842:
    case 2843:
    case 2844:
    case 2845:
      return v21;
    case 1281:
    case 1822:
      v176 = v1227;
      v365 = *(_QWORD *)(v1227 + 32);
      v366 = *(unsigned int *)(v365 + 68);
      v367 = v1262;
      v368 = sub_1C4A73FE0(*(_DWORD *)(v365 + 68), v1262, 0);
      if (!HIDWORD(v368))
      {
        if (v13 != 1281)
          return 0;
        if ((v366 & 0x80000000) != 0)
          v369 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v366 & 0x7FFFFFFF) + 8);
        else
          v369 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v366);
        v816 = *v369;
        if (v816)
        {
          if (((*(_BYTE *)(v816 + 3) & 1) != 0
             || (v816 = *(_QWORD *)(v816 + 24)) != 0 && (*(_BYTE *)(v816 + 3) & 1) != 0)
            && (v1200 = *(_QWORD *)(v816 + 8)) != 0
            && **(_WORD **)(v1200 + 16) == 81)
          {
            v176 = v1227;
            v367 = v1262;
            if (*(_DWORD *)(v1200 + 40) == 2)
              LODWORD(v366) = *(_DWORD *)(*(_QWORD *)(v1200 + 32) + 36);
          }
          else
          {
            v176 = v1227;
            v367 = v1262;
          }
        }
        LODWORD(v368) = sub_1C554C050(v366, v367);
        if (!v817)
          return 0;
      }
      v818 = *(_DWORD *)(*(_QWORD *)(v176 + 32) + 100);
      v1277[0] = (void *)513;
      LODWORD(v1277[1]) = 0;
      LODWORD(v1280[0]) = v818;
      LODWORD(v1281) = 0;
      __src[0] = (void *)513;
      LODWORD(__src[1]) = 0;
      v819 = v1266;
      *(_QWORD *)&v1282 = sub_1C5544694((uint64_t)v1266, (unint64_t *)__src, v368);
      *((_QWORD *)&v1282 + 1) = v820;
      v1283 = 1;
      v821 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v819
                      + 4))(v819, 45, v1277, 1, v1280, 2, 0);
      LODWORD(v1277[0]) = *(_DWORD *)(*(_QWORD *)(v176 + 32) + 4);
      LODWORD(v1277[1]) = 1;
      v1280[0] = v821;
      v1280[1] = v822;
      LODWORD(v1281) = 1;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v819 + 4))(v819, 81, v1277, 1, v1280, 1, 0);
      v181 = *(_QWORD *)(v176 + 24);
      v182 = v176;
      if ((*(_BYTE *)v176 & 4) == 0)
      {
        v182 = v176;
        if ((*(_WORD *)(v176 + 44) & 8) != 0)
        {
          v182 = v176;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 1282:
    case 1283:
    case 1284:
    case 1285:
    case 1286:
    case 1287:
    case 1288:
    case 1289:
    case 1290:
    case 1291:
    case 1292:
    case 1293:
    case 1294:
    case 1295:
    case 1296:
    case 1297:
    case 1298:
    case 1299:
    case 1300:
    case 1301:
    case 1302:
    case 1303:
    case 1304:
    case 1305:
    case 1306:
    case 1307:
    case 1308:
    case 1309:
    case 1310:
    case 1311:
    case 1312:
    case 1313:
    case 1314:
    case 1315:
    case 1316:
    case 1317:
    case 1318:
    case 1319:
    case 1320:
    case 1321:
    case 1322:
    case 1323:
    case 1324:
    case 1325:
    case 1326:
    case 1327:
    case 1328:
    case 1329:
    case 1330:
    case 1331:
    case 1332:
    case 1333:
    case 1334:
    case 1335:
    case 1336:
    case 1337:
    case 1338:
    case 1339:
    case 1340:
    case 1341:
    case 1342:
    case 1343:
    case 1344:
    case 1345:
    case 1346:
    case 1347:
    case 1348:
    case 1349:
    case 1350:
    case 1351:
    case 1352:
    case 1353:
    case 1354:
    case 1355:
    case 1356:
    case 1357:
    case 1358:
    case 1359:
    case 1360:
    case 1361:
    case 1362:
    case 1363:
    case 1364:
    case 1365:
    case 1366:
    case 1367:
    case 1368:
    case 1369:
    case 1370:
    case 1371:
    case 1372:
    case 1373:
    case 1374:
    case 1375:
    case 1376:
    case 1377:
    case 1378:
    case 1379:
    case 1380:
    case 1381:
    case 1382:
    case 1383:
    case 1384:
    case 1385:
    case 1386:
    case 1387:
    case 1388:
    case 1389:
    case 1390:
    case 1391:
    case 1392:
    case 1393:
    case 1394:
    case 1395:
    case 1396:
    case 1397:
    case 1398:
    case 1399:
    case 1400:
    case 1401:
    case 1402:
    case 1403:
    case 1404:
    case 1405:
    case 1406:
    case 1407:
    case 1408:
    case 1409:
    case 1410:
    case 1411:
    case 1412:
    case 1413:
    case 1414:
    case 1415:
    case 1416:
    case 1417:
    case 1418:
    case 1419:
    case 1420:
    case 1421:
    case 1422:
    case 1423:
    case 1424:
    case 1425:
    case 1426:
    case 1427:
    case 1428:
    case 1429:
    case 1430:
    case 1431:
    case 1432:
    case 1433:
    case 1434:
    case 1435:
    case 1436:
    case 1437:
    case 1438:
    case 1439:
    case 1440:
    case 1441:
    case 1442:
    case 1443:
    case 1444:
    case 1445:
    case 1446:
    case 1447:
    case 1448:
    case 1449:
    case 1450:
    case 1451:
    case 1452:
    case 1453:
    case 1454:
    case 1455:
    case 1456:
    case 1457:
    case 1458:
    case 1459:
    case 1460:
    case 1461:
    case 1462:
    case 1463:
    case 1464:
    case 1465:
    case 1466:
    case 1467:
    case 1468:
    case 1469:
    case 1470:
    case 1471:
    case 1472:
    case 1473:
    case 1474:
    case 1475:
    case 1476:
    case 1477:
    case 1478:
    case 1479:
    case 1480:
    case 1481:
    case 1482:
    case 1483:
    case 1484:
    case 1485:
    case 1486:
    case 1487:
    case 1488:
    case 1489:
    case 1490:
    case 1491:
    case 1492:
    case 1493:
    case 1494:
    case 1495:
    case 1496:
    case 1497:
    case 1498:
    case 1499:
    case 1500:
    case 1501:
    case 1502:
    case 1503:
    case 1504:
    case 1505:
    case 1506:
    case 1507:
    case 1508:
    case 1509:
    case 1510:
    case 1511:
    case 1512:
    case 1513:
    case 1514:
    case 1515:
    case 1516:
    case 1517:
    case 1518:
    case 1519:
    case 1520:
    case 1521:
    case 1522:
    case 1523:
    case 1524:
    case 1525:
    case 1526:
    case 1527:
    case 1528:
    case 1529:
    case 1530:
    case 1531:
    case 1532:
    case 1533:
    case 1534:
    case 1535:
    case 1536:
    case 1537:
    case 1538:
    case 1539:
    case 1540:
    case 1541:
    case 1542:
    case 1543:
    case 1544:
    case 1545:
    case 1546:
    case 1547:
    case 1548:
    case 1549:
    case 1550:
    case 1551:
    case 1552:
    case 1553:
    case 1554:
    case 1555:
    case 1556:
    case 1557:
    case 1558:
    case 1559:
    case 1560:
    case 1561:
    case 1562:
    case 1563:
    case 1564:
    case 1565:
    case 1566:
    case 1567:
    case 1568:
    case 1569:
    case 1570:
    case 1571:
    case 1572:
    case 1573:
    case 1574:
    case 1575:
    case 1576:
    case 1577:
    case 1578:
    case 1579:
    case 1580:
    case 1581:
    case 1582:
    case 1583:
    case 1584:
    case 1585:
    case 1586:
    case 1587:
    case 1588:
    case 1589:
    case 1590:
    case 1591:
    case 1592:
    case 1593:
    case 1594:
    case 1595:
    case 1596:
    case 1597:
    case 1598:
    case 1599:
    case 1600:
    case 1601:
    case 1602:
    case 1603:
    case 1604:
    case 1605:
    case 1606:
    case 1607:
    case 1608:
    case 1609:
    case 1610:
    case 1611:
    case 1612:
    case 1613:
    case 1614:
    case 1615:
    case 1616:
    case 1617:
    case 1618:
    case 1619:
    case 1620:
    case 1621:
    case 1622:
    case 1623:
    case 1624:
    case 1625:
    case 1626:
    case 1627:
    case 1628:
    case 1629:
    case 1630:
    case 1631:
    case 1632:
    case 1633:
    case 1634:
    case 1635:
    case 1636:
    case 1637:
    case 1638:
    case 1639:
    case 1640:
    case 1641:
    case 1642:
    case 1643:
    case 1644:
    case 1645:
    case 1646:
    case 1647:
    case 1648:
    case 1649:
    case 1650:
    case 1651:
    case 1652:
    case 1653:
    case 1654:
    case 1655:
    case 1656:
    case 1657:
    case 1658:
    case 1659:
    case 1660:
    case 1661:
    case 1662:
    case 1663:
    case 1664:
    case 1665:
    case 1666:
    case 1667:
    case 1668:
    case 1669:
    case 1670:
    case 1671:
    case 1672:
    case 1673:
    case 1674:
    case 1675:
    case 1676:
    case 1677:
    case 1678:
    case 1679:
    case 1680:
    case 1681:
    case 2824:
    case 2825:
    case 2826:
    case 2827:
    case 2828:
    case 2829:
    case 2830:
    case 2831:
    case 2832:
    case 2833:
    case 2834:
    case 2835:
      v22 = v1227;
      v23 = v1262;
      v24 = (uint64_t *)v1266;
      v25 = v13;
      v26 = 3;
      return sub_1C4A73508(v22, v23, v24, v25, v26, (uint64_t)v4);
    case 1682:
    case 1683:
    case 1684:
    case 1685:
    case 1686:
    case 1687:
    case 1688:
    case 1689:
    case 1690:
    case 1691:
    case 1692:
    case 1693:
    case 1694:
    case 1695:
    case 1696:
    case 1697:
    case 1698:
    case 1699:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1706:
    case 1707:
    case 1708:
    case 1709:
    case 1710:
    case 1711:
    case 1712:
    case 1713:
    case 1714:
    case 1715:
    case 1716:
    case 1717:
    case 1718:
    case 1719:
    case 1720:
    case 1721:
    case 1722:
    case 1723:
    case 1724:
    case 1725:
    case 1726:
    case 1727:
    case 1728:
    case 1729:
    case 1730:
    case 1731:
    case 1732:
    case 1733:
    case 1734:
    case 1735:
    case 1736:
    case 1737:
    case 1738:
    case 1739:
    case 1740:
    case 1741:
    case 1742:
    case 1743:
    case 1744:
    case 1745:
    case 1746:
    case 1747:
    case 1748:
    case 1749:
    case 1750:
    case 1751:
    case 1752:
    case 1753:
    case 1754:
    case 1755:
    case 1756:
    case 1757:
    case 1758:
    case 1759:
    case 1760:
    case 1761:
    case 1762:
    case 1763:
    case 1764:
    case 1765:
    case 1766:
    case 1767:
    case 1768:
    case 1769:
    case 1770:
    case 1771:
    case 1772:
    case 1773:
    case 1774:
    case 1775:
    case 1776:
    case 1777:
    case 1778:
    case 1779:
    case 1780:
    case 1781:
    case 1782:
    case 1783:
    case 1784:
    case 1785:
    case 1786:
    case 1787:
    case 1788:
    case 1789:
    case 1790:
    case 1791:
    case 1792:
    case 1793:
    case 1794:
    case 1795:
    case 1796:
    case 1797:
    case 1798:
    case 1799:
    case 1800:
    case 1801:
    case 1802:
    case 1803:
    case 1804:
    case 1805:
    case 1806:
    case 1807:
    case 1808:
    case 1809:
    case 1810:
    case 1811:
    case 1812:
    case 1813:
    case 1814:
    case 1815:
    case 1816:
    case 1817:
    case 1818:
    case 1819:
    case 1820:
    case 1821:
      v22 = v1227;
      v23 = v1262;
      v24 = (uint64_t *)v1266;
      v25 = v13;
      v26 = 4;
      return sub_1C4A73508(v22, v23, v24, v25, v26, (uint64_t)v4);
    case 1823:
      v577 = (uint64_t)v1219[6];
      if (!v577)
      {
        v577 = ((uint64_t (*)(llvm::ConstantFP ***, llvm::ConstantFP ****, llvm::ConstantFP ****))(*v1219[1])[27])(v1219[1], v1219 + 16, v1219);
        v1219[6] = (llvm::ConstantFP ***)v577;
      }
      v78 = v1227;
      v578 = *(unsigned int *)(*(_QWORD *)(v1227 + 32) + 36);
      if ((v578 & 0x80000000) != 0)
        v579 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v578 & 0x7FFFFFFF) + 8);
      else
        v579 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v578);
      v759 = *v579;
      if ((*(_BYTE *)(v759 + 3) & 1) == 0)
        v759 = *(_QWORD *)(v759 + 24);
      v760 = *(_QWORD *)(v759 + 8);
      if (**(_WORD **)(v760 + 16) == 120)
      {
        v761 = *(_QWORD *)(*(_QWORD *)(v760 + 32) + 48);
        v762 = (_QWORD *)(v761 + 24);
        if (*(_DWORD *)(v761 + 32) >= 0x41u)
          v762 = (_QWORD *)*v762;
        *(_DWORD *)(v577 + 564) = *v762;
        v79 = *(_QWORD *)(v1227 + 24);
        v80 = v1227;
        if ((*(_BYTE *)v1227 & 4) == 0)
        {
          v80 = v1227;
          if ((*(_WORD *)(v1227 + 44) & 8) != 0)
          {
            v80 = v1227;
            do
              v80 = *(_QWORD *)(v80 + 8);
            while ((*(_WORD *)(v80 + 44) & 8) != 0);
          }
        }
        goto LABEL_944;
      }
      v608 = "TLS alloc only supports constant size.";
      goto LABEL_1181;
    case 2134:
    case 2135:
    case 2136:
    case 2137:
    case 2138:
    case 2733:
    case 2734:
    case 2735:
    case 2736:
    case 2737:
      v1266[5] = *(unsigned __int8 **)(v1227 + 24);
      v1266[6] = (unsigned __int8 *)v1227;
      if (v16 != v17)
      {
        if (*v17)
          llvm::MetadataTracking::untrack((uint64_t)v17, *v17);
        v102 = *v16;
        *v17 = *v16;
        if (v102)
          llvm::MetadataTracking::track((uint64_t)v17, v102, 2);
      }
      v103 = *(_QWORD *)(*(_QWORD *)(v1227 + 24) + 32);
      v104 = *(unsigned __int8 *)(*(_QWORD *)(v103 + 16) + 389);
      v105 = *(_QWORD *)(v103 + 48);
      if (!v105)
      {
        v105 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v103 + 8) + 216))(*(_QWORD *)(v103 + 8), v103 + 128, *(_QWORD *)(*(_QWORD *)(v1227 + 24) + 32));
        *(_QWORD *)(v103 + 48) = v105;
      }
      v106 = *(unsigned int *)(v1227 + 40);
      v107 = *(_QWORD *)(v1227 + 32);
      if (!(_DWORD)v106)
        goto LABEL_146;
      v108 = 0;
      v109 = *(unsigned __int8 **)(v1227 + 32);
      while (1)
      {
        v110 = *v109;
        v109 += 32;
        if (v110 == 17)
          break;
        if (v106 == ++v108)
        {
LABEL_146:
          LODWORD(v108) = -1;
          break;
        }
      }
      v111 = *(_DWORD *)(v107 + 32 * v108 + 16);
      switch(v111)
      {
        case 2134:
          v1241 = v103;
          v1232 = v105;
          v1235 = 0;
          v112 = 0;
          v113 = 0;
          v114 = 0;
          if (v104)
            v115 = 6501;
          else
            v115 = 6497;
          v1247 = v115;
          v116 = 1;
          v1256 = v104;
          goto LABEL_678;
        case 2135:
          v1241 = v103;
          v1232 = v105;
          if (v104)
            v646 = 6502;
          else
            v646 = 6498;
          v1247 = v646;
          v1256 = v104;
          v116 = 0;
          v112 = 0;
          v113 = 0;
          v114 = 0;
          v1235 = *(_DWORD *)(v107 + 68);
          goto LABEL_678;
        case 2136:
          v1232 = v105;
          if (v104)
            v647 = 6502;
          else
            v647 = 6498;
          v1247 = v647;
          v1241 = v103;
          v1256 = v104;
          v648 = *(_DWORD *)(v107 + 68);
          v649 = sub_1C554C050(*(_DWORD *)(v107 + 100), v1262);
          if (!v650)
            goto LABEL_1207;
          v114 = v649;
          v651 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1227 + 32) + 132), v1262);
          if (!v652)
            goto LABEL_1207;
          v1235 = v648;
          v113 = v651;
          v116 = 0;
          v112 = 0;
          goto LABEL_678;
        case 2137:
          v1232 = v105;
          if (v104)
            v630 = 6501;
          else
            v630 = 6497;
          v1247 = v630;
          v1241 = v103;
          v1256 = v104;
          v653 = sub_1C554C050(*(_DWORD *)(v107 + 68), v1262);
          if (v654)
          {
            v114 = v653;
            v655 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1227 + 32) + 100), v1262);
            if (v656)
            {
              v113 = v655;
              v1235 = 0;
              v112 = 0;
LABEL_677:
              v116 = 1;
LABEL_678:
              v1277[0] = (void *)129;
              LODWORD(v1277[1]) = 0;
              v1280[0] = (void *)7;
              LODWORD(v1281) = 3;
              v657 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                              + 4))(v1266, 315, v1277, 1, v1280, 1, 0);
              v659 = v658;
              v660 = *(unsigned __int8 *)(*((_QWORD *)v1266[1] + 2) + 389);
              v1280[0] = (void *)129;
              LODWORD(v1280[1]) = 0;
              if (v660)
                v661 = 255;
              else
                v661 = 15;
              sub_1C5544694((uint64_t)v1266, (unint64_t *)v1280, v661);
              v663 = *(_DWORD *)(*(_QWORD *)(v662 + 32) + 4);
              v1277[0] = (void *)129;
              LODWORD(v1277[1]) = 0;
              v1280[0] = v657;
              v1280[1] = v659;
              LODWORD(v1281) = 1;
              LODWORD(v1282) = v663;
              v1283 = 0;
              (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
               + 4))(v1266, 65, v1277, 1, v1280, 2, 0);
              v665 = *(_DWORD *)(*(_QWORD *)(v664 + 32) + 4);
              v666 = 513;
              if (!v1256)
                v666 = 129;
              __src[0] = (void *)v666;
              LODWORD(__src[1]) = 0;
              v667 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, _QWORD, void **, uint64_t, _QWORD, _QWORD, _QWORD))*v1266
                                               + 4))(v1266, v1247, __src, 1, 0, 0, 0);
              v669 = v668;
              LODWORD(v1280[0]) = 1;
              v1281 = 0;
              v1280[1] = 0;
              llvm::MachineInstr::addOperand(v668, v667, (const llvm::MachineOperand *)v1280);
              v1281 = 0;
              v1280[1] = 0;
              HIDWORD(v1280[0]) = v665;
              LODWORD(v1280[0]) = 0;
              *(_QWORD *)&v1282 = 0;
              llvm::MachineInstr::addOperand(v669, v667, (const llvm::MachineOperand *)v1280);
              LODWORD(v1280[0]) = 1;
              v1281 = 0;
              v1280[1] = 0;
              llvm::MachineInstr::addOperand(v669, v667, (const llvm::MachineOperand *)v1280);
              v1277[0] = v667;
              v1277[1] = v669;
              if ((v116 & 1) == 0)
              {
                v1281 = 0;
                v1280[1] = 0;
                HIDWORD(v1280[0]) = v1235;
                LODWORD(v1280[0]) = 0;
                *(_QWORD *)&v1282 = 0;
                llvm::MachineInstr::addOperand(v669, v667, (const llvm::MachineOperand *)v1280);
              }
              LODWORD(v1280[0]) = 1;
              v1281 = 0;
              v1280[1] = 0;
              llvm::MachineInstr::addOperand(v669, v667, (const llvm::MachineOperand *)v1280);
              LODWORD(v1280[0]) = 1;
              v1280[1] = 0;
              v1281 = v114;
              llvm::MachineInstr::addOperand(v669, v667, (const llvm::MachineOperand *)v1280);
              LODWORD(v1280[0]) = 1;
              v1280[1] = 0;
              v1281 = v113;
              llvm::MachineInstr::addOperand(v669, v667, (const llvm::MachineOperand *)v1280);
              LODWORD(__src[0]) = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
              LODWORD(__src[1]) = 1;
              *(_OWORD *)v1280 = *(_OWORD *)v1277;
              LODWORD(v1281) = 1;
              (*((void (**)(void))*v1266 + 4))();
              sub_1C49400A8((uint64_t)v1277);
              if (v112)
              {
                v670 = sub_1C4902538((unint64_t *)(v112 + 16));
                v671 = *(_QWORD *)(v112 + 16);
                if ((v671 & 1) != 0)
                {
                  v675 = (v671 >> 1) & ~(-1 << (v671 >> 58));
                  if (v675)
                    v672 = __clz(__rbit64(v675));
                  else
                    v672 = -1;
                }
                else
                {
                  v672 = sub_1C476B7EC(v671);
                }
                v713 = v670 - (v672 & ~(v672 >> 31));
                v457 = __CFADD__(v713, 1);
                v714 = (unint64_t)(8 * (v713 + 1)) >> 3;
                if (v457)
                  v674 = 0;
                else
                  v674 = ((v714 & 0x1FFFFFFF) << 6) | 1;
                v673 = v112 | 4;
                v669 = (llvm::MachineInstr *)v1277[1];
              }
              else
              {
                v112 = sub_1C4A90D34(v1232, 0, 256, v1241);
                v673 = v112 | 4;
                v674 = 16385;
                if (!v112)
                  goto LABEL_741;
              }
              LODWORD(v112) = *(_DWORD *)(v112 + 12);
LABEL_741:
              v715 = (char *)sub_1C484358C(v1241 + 128, 80, 3);
              v716 = 0;
              v717 = 0;
              v718 = 0;
              *((_DWORD *)v715 + 4) = v112;
              *(_QWORD *)v715 = v673;
              *((_QWORD *)v715 + 1) = 0;
              *(_WORD *)(v715 + 21) = __src[0];
              v715[23] = BYTE2(__src[0]);
              *((_QWORD *)v715 + 3) = v674;
              v715[34] = 2;
              *((_WORD *)v715 + 16) = 1;
              *((_WORD *)v715 + 18) = 1;
              v715[20] = 0;
              *(_OWORD *)(v715 + 40) = 0u;
              *(_OWORD *)(v715 + 56) = 0u;
              *((_QWORD *)v715 + 9) = 0;
              v1280[0] = v715;
              v719 = *((_QWORD *)v669 + 6);
              if (v719 >= 8)
              {
                v1166 = *((_QWORD *)v669 + 6) & 7;
                v1167 = (unsigned __int8 *)(v719 & 0xFFFFFFFFFFFFFFF8);
                if (v1166 == 1 && v1167)
                {
                  v716 = 0;
                  v718 = 0;
                  v717 = (uint64_t)v1167;
                }
                else if (v1166 == 3 && v1167)
                {
                  v1172 = v1167[4];
                  if (v1167[4])
                    v717 = *(_QWORD *)&v1167[8 * *(int *)v1167 + 8];
                  else
                    v717 = 0;
                  if (v1167[5])
                    v716 = *(_QWORD *)&v1167[8 * *(int *)v1167 + 8 + 8 * v1172];
                  else
                    v716 = 0;
                  if (v1167[6])
                    v718 = *(_QWORD *)&v1167[8 * *(int *)v1167 + 8 + 8 * v1167[5] + 8 * v1172];
                  else
                    v718 = 0;
                }
                else
                {
                  v717 = 0;
                  v718 = 0;
                  if (v1167)
                    v1168 = v1166 == 2;
                  else
                    v1168 = 0;
                  if (v1168)
                    v716 = (uint64_t)v1167;
                  else
                    v716 = 0;
                }
              }
              llvm::MachineInstr::setExtraInfo((unint64_t)v669, v1241, v1280, 1, v717, v716, v718);
              v78 = v1227;
              v79 = *(_QWORD *)(v1227 + 24);
              v80 = v1227;
              if ((*(_BYTE *)v1227 & 4) == 0)
              {
                v80 = v1227;
                if ((*(_WORD *)(v1227 + 44) & 8) != 0)
                {
                  v80 = v1227;
                  do
                    v80 = *(_QWORD *)(v80 + 8);
                  while ((*(_WORD *)(v80 + 44) & 8) != 0);
                }
              }
              goto LABEL_944;
            }
          }
LABEL_1207:
          v608 = "Invalid offset type";
          goto LABEL_1181;
        case 2138:
          v408 = *(unsigned int *)(v107 + 68);
          if ((v408 & 0x80000000) != 0)
            v409 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v408 & 0x7FFFFFFF) + 8);
          else
            v409 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v408);
          v712 = *v409;
          if (!v712)
            return 0;
          v1241 = v103;
          v1256 = v104;
          v1232 = v105;
          if ((*(_BYTE *)(v712 + 3) & 1) == 0)
          {
            v712 = *(_QWORD *)(v712 + 24);
            if (!v712 || (*(_BYTE *)(v712 + 3) & 1) == 0)
              return 0;
          }
          v1186 = *(_QWORD *)(v712 + 8);
          if (!v1186 || **(_WORD **)(v1186 + 16) != 77)
            return 0;
          v1280[0] = &v1281;
          v1280[1] = (void *)0x10000000000;
          sub_1C4893E04((char *)v1280, 8uLL, 0);
          v1187 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1186 + 32) + 36), v1262);
          if (!v1188)
          {
            v1195 = 0;
            v112 = 0;
            v1247 = 0;
            goto LABEL_1391;
          }
          v1189 = 0;
          v1190 = -1;
          while (1)
          {
            v1191 = (unsigned int *)v1280[0];
            v1192 = (char *)v1280[0] + v1189;
            v1193 = *(_DWORD *)((char *)v1280[0] + v1189 + 4) | HIDWORD(v1187);
            *v1192 = *(_DWORD *)((char *)v1280[0] + v1189) | v1187;
            v1192[1] = v1193;
            if (v1190 == 2)
              break;
            v1187 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1186 + 32) + 4 * v1189 + 68), v1262);
            v1189 += 8;
            ++v1190;
            if (!v1194)
            {
              v112 = 0;
              v1247 = 0;
              v1195 = v1190 > 2;
              goto LABEL_1391;
            }
          }
          v1201 = v1280[1];
          v1202 = (32 * LODWORD(v1280[1]));
          if (v1202 > 0x39)
          {
            v1203 = operator new();
            *(_QWORD *)v1203 = v1203 + 16;
            *(_QWORD *)(v1203 + 8) = 0x600000000;
            sub_1C4765AA4((char *)v1203, (v1202 + 63) >> 6, 0);
            *(_DWORD *)(v1203 + 64) = v1202;
          }
          else
          {
            v1203 = (v1202 << 58) | 1;
          }
          v1277[0] = (void *)v1203;
          sub_1C4914168((uint64_t *)v1277, v1191, v1201);
          v1204 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v103 + 16) + 104))(*(_QWORD *)(v103 + 16));
          v1205 = (void **)operator new();
          *((_DWORD *)v1205 + 2) = 7;
          *((_DWORD *)v1205 + 3) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1204 + 632))(v1204, 7);
          *v1205 = off_1E7FAD308;
          v1205[2] = v1277[0];
          v1277[0] = (void *)1;
          __src[0] = v1205;
          sub_1C49141AC(v1232 + 16, (char *)__src);
          v1206 = __src[0];
          __src[0] = 0;
          if (v1206)
            (*(void (**)(void *))(*(_QWORD *)v1206 + 16))(v1206);
          v112 = *(_QWORD *)(*(_QWORD *)(v1232 + 16) + 8 * *(unsigned int *)(v1232 + 24) - 8);
          sub_1C4914448((void ***)v1277);
          if (v111 == 2138)
          {
            if (v1256)
            {
              v1247 = 6501;
              v1195 = 1;
              goto LABEL_1391;
            }
            goto LABEL_1389;
          }
          if (!v1256 && v111 == 2737)
          {
            v608 = "8xMSAA is supported, but non-8xMSAA intrinsic is present";
LABEL_1181:
            llvm::report_fatal_error((llvm *)v608, (const char *)1);
          }
          if (!v1256)
          {
LABEL_1389:
            v1209 = 6497;
            goto LABEL_1390;
          }
          v1209 = 6501;
LABEL_1390:
          v1247 = v1209;
          v1195 = 1;
LABEL_1391:
          if (v1280[0] != &v1281)
            free(v1280[0]);
          v21 = 0;
          if (v1195)
          {
            v1235 = 0;
            v113 = 0;
            v114 = 0;
            goto LABEL_677;
          }
          return v21;
        default:
          __asm { BR              X11 }
          return result;
      }
    case 2140:
    case 2544:
      v377 = sub_1C4A740C0(v13);
      v378 = sub_1C4A8B770(v377);
      v379 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
      v1277[0] = (void *)129;
      LODWORD(v1277[1]) = 0;
      v380 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))*v1266
                                       + 4))(v1266, 314, v1277, 1, 0, 0, 0);
      v382 = v381;
      LODWORD(v1280[0]) = 1;
      v1280[1] = 0;
      v1281 = v378;
      llvm::MachineInstr::addOperand(v381, v380, (const llvm::MachineOperand *)v1280);
      if (v13 == 2140)
      {
        v383 = *(unsigned __int8 *)(*((_QWORD *)v1266[1] + 2) + 389);
        v1280[0] = (void *)129;
        LODWORD(v1280[1]) = 0;
        if (v383)
          v384 = 255;
        else
          v384 = 15;
        sub_1C5544694((uint64_t)v1266, (unint64_t *)v1280, v384);
        v386 = *(_DWORD *)(*(_QWORD *)(v385 + 32) + 4);
        v1277[0] = (void *)129;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v380;
        v1280[1] = v382;
        LODWORD(v1281) = 1;
        LODWORD(v1282) = v386;
        v1283 = 0;
        v387 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                        + 4))(v1266, 65, v1277, 1, v1280, 2, 0);
      }
      else
      {
        __src[0] = (void *)129;
        LODWORD(__src[1]) = 0;
        v1280[0] = v380;
        v1280[1] = v382;
        LODWORD(v1281) = 1;
        v597 = *(unsigned __int8 *)(*((_QWORD *)v1266[1] + 2) + 389);
        v1277[0] = (void *)129;
        LODWORD(v1277[1]) = 0;
        if (v597)
          v598 = 8;
        else
          v598 = 4;
        sub_1C5544694((uint64_t)v1266, (unint64_t *)v1277, v598);
        LODWORD(v1282) = *(_DWORD *)(*(_QWORD *)(v599 + 32) + 4);
        v1283 = 0;
        v387 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                        + 4))(v1266, 128, __src, 1, v1280, 2, 0);
      }
      LODWORD(v1277[0]) = v379;
      LODWORD(v1277[1]) = 1;
      v1280[0] = v387;
      v1280[1] = v388;
      LODWORD(v1281) = 1;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 126, v1277, 1, v1280, 1, 0);
      v78 = v1227;
      v79 = *(_QWORD *)(v1227 + 24);
      v80 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v80 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v80 = v1227;
          do
            v80 = *(_QWORD *)(v80 + 8);
          while ((*(_WORD *)(v80 + 44) & 8) != 0);
        }
      }
      goto LABEL_944;
    case 2142:
    case 2376:
    case 2377:
    case 2378:
    case 2379:
    case 2380:
    case 2381:
    case 2382:
    case 2383:
    case 2384:
    case 2385:
    case 2386:
    case 2387:
    case 2388:
    case 2389:
    case 2390:
    case 2391:
    case 2392:
    case 2393:
    case 2394:
    case 2395:
    case 2396:
    case 2397:
    case 2398:
    case 2399:
    case 2400:
    case 2401:
    case 2402:
    case 2403:
    case 2404:
    case 2405:
    case 2406:
    case 2407:
    case 2784:
    case 2785:
    case 2786:
      return sub_1C4A79804(v1227, v1262, v1266, 0);
    case 2144:
    case 2630:
    case 2631:
    case 2632:
    case 2633:
    case 2634:
    case 2635:
    case 2636:
    case 2637:
    case 2638:
    case 2639:
    case 2640:
    case 2641:
    case 2642:
    case 2643:
    case 2644:
    case 2645:
    case 2646:
    case 2647:
    case 2648:
    case 2649:
    case 2650:
    case 2651:
    case 2652:
    case 2653:
    case 2654:
    case 2655:
    case 2656:
    case 2657:
    case 2658:
    case 2659:
    case 2660:
    case 2661:
    case 2838:
    case 2839:
    case 2840:
      return sub_1C4A7BB08(v1227, v1262, (uint64_t *)v1266);
    case 2159:
    case 2160:
    case 2161:
    case 2162:
      v1266[5] = *(unsigned __int8 **)(v1227 + 24);
      v1266[6] = (unsigned __int8 *)v1227;
      if (v16 != v17)
      {
        if (*v17)
          llvm::MetadataTracking::untrack((uint64_t)v17, *v17);
        v142 = *v16;
        *v17 = *v16;
        if (v142)
          llvm::MetadataTracking::track((uint64_t)v17, v142, 2);
      }
      LODWORD(v1277[0]) = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
      LODWORD(v1277[1]) = 1;
      v143 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, _QWORD, void **, uint64_t, _QWORD, _QWORD, _QWORD))*v1266
                                       + 4))(v1266, (v13 - 1885), v1277, 1, 0, 0, 0);
      v145 = v144;
      llvm::MachineInstr::addOperand(v144, v143, (const llvm::MachineOperand *)(*(_QWORD *)(v1227 + 32) + 64));
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v145, v143, (const llvm::MachineOperand *)v1280);
      llvm::MachineInstr::addOperand(v145, v143, (const llvm::MachineOperand *)(*(_QWORD *)(v1227 + 32) + 96));
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v145, v143, (const llvm::MachineOperand *)v1280);
      llvm::MachineInstr::addOperand(v145, v143, (const llvm::MachineOperand *)(*(_QWORD *)(v1227 + 32) + 128));
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      v139 = v1227;
      llvm::MachineInstr::addOperand(v145, v143, (const llvm::MachineOperand *)v1280);
      v146 = *(_QWORD *)(v1227 + 24);
      v147 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v147 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v147 = v1227;
          do
            v147 = *(_QWORD *)(v147 + 8);
          while ((*(_WORD *)(v147 + 44) & 8) != 0);
        }
      }
      goto LABEL_643;
    case 2171:
    case 2172:
      v1277[0] = v1278;
      v1277[1] = (void *)0x400000000;
      if (v13 == 2172)
        v324 = 4;
      else
        v324 = 3;
      v325 = *(_QWORD *)(v1227 + 32);
      v326 = *(_DWORD *)(v325 + 32 * v324 + 4);
      v327 = *(_DWORD *)(v325 + 32 * (v324 + 1) + 4);
      v328 = *(_DWORD *)(v325 + 32 * (v324 + 2) + 4);
      __src[0] = (void *)513;
      LODWORD(__src[1]) = 0;
      LODWORD(v1280[0]) = v326;
      LODWORD(v1281) = 0;
      v329 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                      + 4))(v1266, 80, __src, 1, v1280, 1, 0);
      v331 = v330;
      __src[0] = v329;
      __src[1] = v330;
      v1308 = 1;
      v1280[0] = &v1281;
      v1281 = 257;
      LODWORD(v1282) = 0;
      *((_QWORD *)&v1282 + 1) = 257;
      v1283 = 0;
      v1280[1] = (void *)0x800000002;
      (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 74, &v1281, 2, __src, 1, 0);
      v333 = v332;
      if (v1280[0] != &v1281)
        free(v1280[0]);
      v334 = *(_DWORD *)(*(_QWORD *)(v333 + 32) + 4);
      v1314 = (void *)513;
      LODWORD(v1315) = 0;
      v335 = sub_1C5544694((uint64_t)v1266, (unint64_t *)&v1314, 0xFF00000000);
      __src[0] = (void *)513;
      LODWORD(__src[1]) = 0;
      v1280[0] = v329;
      v1280[1] = v331;
      LODWORD(v1281) = 1;
      *(_QWORD *)&v1282 = v335;
      *((_QWORD *)&v1282 + 1) = v336;
      v1283 = 1;
      v337 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                      + 4))(v1266, 65, __src, 1, v1280, 2, 0);
      __src[0] = (void *)513;
      LODWORD(__src[1]) = 0;
      v1280[0] = v337;
      v1280[1] = v338;
      LODWORD(v1281) = 1;
      v1314 = (void *)513;
      LODWORD(v1315) = 0;
      *(_QWORD *)&v1282 = sub_1C5544694((uint64_t)v1266, (unint64_t *)&v1314, 32);
      *((_QWORD *)&v1282 + 1) = v339;
      v1283 = 1;
      v340 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                      + 4))(v1266, 128, __src, 1, v1280, 2, 0);
      __src[0] = (void *)129;
      LODWORD(__src[1]) = 0;
      v1280[0] = v340;
      v1280[1] = v341;
      LODWORD(v1281) = 1;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 119, __src, 1, v1280, 1, 0);
      __src[0] = (void *)257;
      LODWORD(__src[1]) = 0;
      LODWORD(v1280[0]) = *(_DWORD *)(*(_QWORD *)(v342 + 32) + 4);
      LODWORD(v1281) = 0;
      LODWORD(v1282) = v327;
      v1283 = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 76, __src, 1, v1280, 2, 0);
      __src[0] = (void *)513;
      LODWORD(__src[1]) = 0;
      LODWORD(v1280[0]) = v334;
      LODWORD(v1281) = 0;
      LODWORD(v1282) = *(_DWORD *)(*(_QWORD *)(v343 + 32) + 4);
      v1283 = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 76, __src, 1, v1280, 2, 0);
      *((_DWORD *)v1277[0] + LODWORD(v1277[1])) = *(_DWORD *)(*(_QWORD *)(v344 + 32) + 4);
      v345 = ++LODWORD(v1277[1]);
      if (v13 == 2172)
      {
        v346 = *(_QWORD *)(v1227 + 32);
        v347 = *(_DWORD *)(v346 + 228);
        v348 = *(_DWORD *)(v346 + 260);
        __src[0] = (void *)513;
        LODWORD(__src[1]) = 0;
        LODWORD(v1280[0]) = v328;
        LODWORD(v1281) = 0;
        LODWORD(v1282) = v347;
        v1283 = 0;
        v349 = v1266;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 76, __src, 1, v1280, 2, 0);
        v351 = *(_DWORD *)(*(_QWORD *)(v350 + 32) + 4);
        v352 = v1277[1];
        if (LODWORD(v1277[1]) >= HIDWORD(v1277[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1277, (uint64_t)v1278, LODWORD(v1277[1]) + 1, 4);
          v352 = v1277[1];
        }
        *((_DWORD *)v1277[0] + v352) = v351;
        v345 = LODWORD(v1277[1]) + 1;
        LODWORD(v1277[1]) = v345;
        v328 = v348;
        if (v345 >= HIDWORD(v1277[1]))
          goto LABEL_301;
      }
      else
      {
        v349 = v1266;
        if (v345 >= HIDWORD(v1277[1]))
        {
LABEL_301:
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1277, (uint64_t)v1278, v345 + 1, 4);
          v345 = v1277[1];
        }
      }
      *((_DWORD *)v1277[0] + v345) = v328;
      v457 = __CFADD__(LODWORD(v1277[1])++, 1);
      if (!v457)
      {
        v574 = 0;
        v575 = 4;
        do
        {
          LODWORD(__src[0]) = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + v575);
          LODWORD(__src[1]) = 1;
          LODWORD(v1280[0]) = *((_DWORD *)v1277[0] + v574);
          LODWORD(v1281) = 0;
          (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v349 + 4))(v349, 19, __src, 1, v1280, 1, 0);
          ++v574;
          v575 += 32;
        }
        while (v574 < LODWORD(v1277[1]));
      }
      v576 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v576 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v576 = v1227;
          do
            v576 = *(_QWORD *)(v576 + 8);
          while ((*(_WORD *)(v576 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v1227 + 24) + 40, v1227, *(_QWORD *)(v576 + 8));
      if (v1277[0] != v1278)
        free(v1277[0]);
      return 1;
    case 2177:
    case 2178:
    case 2179:
    case 2180:
    case 2181:
    case 2182:
    case 2183:
    case 2184:
    case 2185:
    case 2186:
    case 2187:
    case 2188:
    case 2189:
    case 2190:
    case 2191:
    case 2192:
    case 2193:
    case 2194:
    case 2195:
    case 2196:
    case 2197:
    case 2198:
    case 2199:
    case 2200:
    case 2233:
    case 2234:
    case 2235:
    case 2236:
    case 2237:
    case 2238:
    case 2239:
    case 2240:
    case 2241:
    case 2242:
    case 2243:
    case 2244:
    case 2245:
    case 2246:
    case 2247:
    case 2248:
    case 2249:
    case 2250:
    case 2251:
    case 2252:
    case 2253:
    case 2254:
    case 2255:
    case 2256:
    case 2257:
    case 2258:
    case 2259:
    case 2260:
    case 2261:
    case 2262:
    case 2263:
    case 2264:
    case 2297:
    case 2298:
    case 2299:
    case 2300:
    case 2301:
    case 2302:
    case 2303:
    case 2304:
      v608 = "AGX3 does not support imgwblk intrinsics with implicit coords.";
      goto LABEL_1181;
    case 2201:
    case 2202:
    case 2203:
    case 2204:
    case 2205:
    case 2206:
    case 2207:
    case 2208:
    case 2209:
    case 2210:
    case 2211:
    case 2212:
    case 2213:
    case 2214:
    case 2215:
    case 2216:
    case 2217:
    case 2218:
    case 2219:
    case 2220:
    case 2221:
    case 2222:
    case 2223:
    case 2224:
    case 2225:
    case 2226:
    case 2227:
    case 2228:
    case 2229:
    case 2230:
    case 2231:
    case 2232:
    case 2265:
    case 2266:
    case 2267:
    case 2268:
    case 2269:
    case 2270:
    case 2271:
    case 2272:
    case 2273:
    case 2274:
    case 2275:
    case 2276:
    case 2277:
    case 2278:
    case 2279:
    case 2280:
    case 2281:
    case 2282:
    case 2283:
    case 2284:
    case 2285:
    case 2286:
    case 2287:
    case 2288:
    case 2289:
    case 2290:
    case 2291:
    case 2292:
    case 2293:
    case 2294:
    case 2295:
    case 2296:
      v1298 = 0;
      v1299 = 0;
      v1300 = 0;
      LOBYTE(v1301) = 0;
      v1302 = 0;
      LOBYTE(v1303) = 0;
      v1304 = 0;
      LOBYTE(v1305) = 0;
      v1306 = 0;
      v1296 = 0;
      v1295 = 0;
      LOBYTE(v1297) = 0;
      sub_1C4C318E8(v13);
      v31 = v1227;
      v32 = *(_QWORD *)(v1227 + 32);
      v33 = *(unsigned int *)(v32 + 32 * v1296 + 4);
      v34 = v1262;
      v35 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
      if ((int)v33 >= 0)
        v35 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v33);
      v36 = *v35;
      if (!v36)
      {
        v37 = (uint64_t *)v1266;
        goto LABEL_40;
      }
      v1182 = v36;
      if ((*(_DWORD *)v36 & 0x1000000) != 0)
        goto LABEL_1234;
      v1182 = *(_QWORD *)(v36 + 24);
      if (!v1182)
        goto LABEL_1240;
      if ((*(_BYTE *)(v1182 + 3) & 1) == 0)
        goto LABEL_1239;
LABEL_1234:
      v1183 = *(_QWORD *)(v1182 + 8);
      v31 = v1227;
      v34 = v1262;
      v37 = (uint64_t *)v1266;
      if (v1183 && **(_WORD **)(v1183 + 16) == 82 && *(_DWORD *)(v1183 + 40) == 2)
        goto LABEL_1267;
      if ((*(_DWORD *)v36 & 0x1000000) != 0)
        goto LABEL_1264;
      v1182 = *(_QWORD *)(v36 + 24);
      if (!v1182)
        goto LABEL_1240;
LABEL_1239:
      v36 = v1182;
      if ((*(_BYTE *)(v1182 + 3) & 1) == 0)
        goto LABEL_1240;
LABEL_1264:
      v1183 = *(_QWORD *)(v36 + 8);
      if (v1183 && **(_WORD **)(v1183 + 16) == 81)
      {
        v31 = v1227;
        v34 = v1262;
        v37 = (uint64_t *)v1266;
        if (*(_DWORD *)(v1183 + 40) == 2)
LABEL_1267:
          LODWORD(v33) = *(_DWORD *)(*(_QWORD *)(v1183 + 32) + 36);
      }
      else
      {
LABEL_1240:
        v31 = v1227;
        v34 = v1262;
        v37 = (uint64_t *)v1266;
      }
LABEL_40:
      v38 = sub_1C554C050(*(_DWORD *)(v32 + 32 * v1295 + 4), v34);
      v39 = *(unsigned int *)(*(_QWORD *)(v31 + 32) + 32 * HIDWORD(v1296) + 4);
      if ((v39 & 0x80000000) != 0)
        v40 = (uint64_t *)(*(_QWORD *)(v34 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
      else
        v40 = (uint64_t *)(*(_QWORD *)(v34 + 272) + 8 * v39);
      v43 = *v40;
      if (v43)
      {
        if (((*(_BYTE *)(v43 + 3) & 1) != 0 || (v43 = *(_QWORD *)(v43 + 24)) != 0 && (*(_BYTE *)(v43 + 3) & 1) != 0)
          && (v1184 = *(_QWORD *)(v43 + 8)) != 0
          && **(_WORD **)(v1184 + 16) == 126)
        {
          v34 = v1262;
          v37 = (uint64_t *)v1266;
          if (*(_DWORD *)(v1184 + 40) == 2)
            v39 = *(unsigned int *)(*(_QWORD *)(v1184 + 32) + 36);
        }
        else
        {
          v34 = v1262;
          v37 = (uint64_t *)v1266;
        }
      }
      if (v39 >> 31)
        v44 = (uint64_t *)(*(_QWORD *)(v34 + 24) + 16 * (v39 & 0x7FFFFFFF) + 8);
      else
        v44 = (uint64_t *)(*(_QWORD *)(v34 + 272) + 8 * v39);
      v45 = *v44;
      if (v45)
      {
        if (((*(_BYTE *)(v45 + 3) & 1) != 0 || (v45 = *(_QWORD *)(v45 + 24)) != 0 && (*(_BYTE *)(v45 + 3) & 1) != 0)
          && (v1185 = *(_QWORD *)(v45 + 8)) != 0
          && **(_WORD **)(v1185 + 16) == 81)
        {
          v34 = v1262;
          v37 = (uint64_t *)v1266;
          if (*(_DWORD *)(v1185 + 40) == 2)
            LODWORD(v39) = *(_DWORD *)(*(_QWORD *)(v1185 + 32) + 36);
        }
        else
        {
          v34 = v1262;
          v37 = (uint64_t *)v1266;
        }
      }
      sub_1C554C050(v39, v34);
      v1280[0] = &off_1E816EFF0;
      v1280[1] = sub_1C554C7E0;
      *(_QWORD *)&v1282 = v1280;
      v1277[0] = &off_1E816F038;
      v1277[1] = sub_1C554C7F8;
      *((_QWORD *)&v1278[0] + 1) = v1277;
      sub_1C554C3AC(v39, v34, (uint64_t)v1280, (uint64_t)v1277, 0, 0, __src);
      v46 = (void **)*((_QWORD *)&v1278[0] + 1);
      if (*((void ***)&v1278[0] + 1) == v1277)
      {
        v47 = (void (**)(void **))((char *)v1277[0] + 32);
        v46 = v1277;
      }
      else
      {
        if (!*((_QWORD *)&v1278[0] + 1))
        {
LABEL_55:
          v48 = (void **)v1282;
          if ((void **)v1282 == v1280)
          {
            v49 = (void (**)(void **))((char *)v1280[0] + 32);
            v48 = v1280;
          }
          else
          {
            if (!(_QWORD)v1282)
            {
LABEL_58:
              if (!(_BYTE)v1310)
              {
                LOBYTE(v1272) = 0;
                v1274 = 0;
                goto LABEL_70;
              }
              v50 = v39;
              v1273 = __src[1];
              if (LODWORD(__src[1]) > 0x40)
              {
                v1169 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
                v1272 = (void *)operator new[]();
                v39 = (unint64_t)__src[0];
                v1170 = v1169;
                v34 = v1262;
                memcpy(v1272, __src[0], v1170);
                v1274 = 1;
                if (v39)
                {
                  MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
                  LODWORD(v39) = v50;
                  goto LABEL_62;
                }
              }
              else
              {
                v1272 = __src[0];
                v1274 = 1;
              }
              LODWORD(v39) = v50;
LABEL_62:
              v51 = &v1272;
              if (v1273 >= 0x41)
                v51 = (void **)v1272;
              if ((unint64_t)*v51 >= 0x10000)
              {
                LOBYTE(v1280[0]) = 0;
                LOBYTE(v1281) = 0;
                sub_1C6152988((uint64_t)&v1272, (uint64_t)v1280);
                if ((_BYTE)v1281)
                {
                  if (LODWORD(v1280[1]) >= 0x41 && v1280[0])
                    MEMORY[0x1CAA32F9C](v1280[0], 0x1000C8000313F17);
                }
              }
LABEL_70:
              if ((v39 & 0x80000000) != 0 && (v39 & 0x7FFFFFFF) < *(_DWORD *)(v34 + 432))
                v52 = *(_QWORD *)(*(_QWORD *)(v34 + 424) + 8 * (v39 & 0x7FFFFFFF));
              else
                v52 = 0;
              v1271 = v52;
              if (!v1274)
              {
                v53 = v39;
                v55 = sub_1C4825F50(&v1271);
                if ((_DWORD)v54 == 1)
                if (v55 != 32 || (v1271 & 1) == 0)
                {
                  v1277[0] = (void *)257;
                  LODWORD(v1277[1]) = 0;
                  LODWORD(v1280[0]) = v53;
                  LODWORD(v1281) = 0;
                  if ((v1271 & 1) != 0)
                    sub_1C5546B4C(v37, 126, (unint64_t *)v1277, (int *)v1280);
                  else
                    sub_1C5546EF4(v37, (uint64_t *)v1277, (int *)v1280);
                }
              }
              sub_1C493FD84((uint64_t)v1269, v33, v34, 1);
              if (v1270)
                sub_1C5EAB3E0(v1269[0], (uint64_t)v1269[1], (uint64_t)v1219[43], 0);
              v125 = *v1219;
              LODWORD(v1280[0]) = 0;
              sub_1C4AC67E0((int)v14 + 1328, (uint64_t)v125, "ImageWriteBlockL2Pers", (int *)v1280);
              __asm { BR              X11 }
            }
            v49 = (void (**)(void **))(*(_QWORD *)v1282 + 40);
          }
          (*v49)(v48);
          goto LABEL_58;
        }
        v47 = (void (**)(void **))(**((_QWORD **)&v1278[0] + 1) + 40);
      }
      (*v47)(v46);
      goto LABEL_55;
    case 2374:
    case 2375:
      v256 = *(_DWORD **)(v1227 + 32);
      v257 = v256[1];
      v258 = v256[17];
      v259 = v256[25];
      v260 = v256[33];
      v1277[0] = (void *)513;
      LODWORD(v1277[1]) = 0;
      LODWORD(v1280[0]) = v258;
      LODWORD(v1281) = 0;
      v261 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                      + 4))(v1266, 80, v1277, 1, v1280, 1, 0);
      v262 = 0;
      *(int64x2_t *)v1277 = vdupq_n_s64(0x81uLL);
      v1278[0] = *(_OWORD *)v1277;
      __src[0] = v261;
      __src[1] = v263;
      v1308 = 1;
      v1280[0] = &v1281;
      v1280[1] = (void *)0x800000000;
      v264 = 2;
      do
      {
        v265 = &v1280[v264];
        *v265 = v1277[v262];
        *((_DWORD *)v265 + 2) = 0;
        v264 += 2;
        ++v262;
      }
      while (v262 != 4);
      LODWORD(v1280[1]) += 4;
      (*((void (**)(unsigned __int8 **, uint64_t, void *))*v1266 + 4))(v1266, 74, v1280[0]);
      v267 = v266;
      if (v1280[0] != &v1281)
        free(v1280[0]);
      v268 = *(_DWORD *)(*(_QWORD *)(v267 + 32) + 4);
      v1277[0] = (void *)257;
      LODWORD(v1277[1]) = 0;
      LODWORD(v1280[0]) = v268;
      LODWORD(v1281) = 0;
      LODWORD(v1282) = v260;
      v1283 = 0;
      v270 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                      + 4))(v1266, 76, v1277, 1, v1280, 2, 0);
      v271 = v269;
      v139 = v1227;
      if (v13 == 2375)
      {
        v272 = *(_QWORD *)(v1227 + 32);
        v1263 = v269;
        v273 = *(_DWORD *)(v272 + 164);
        v1257 = v257;
        v274 = *(_DWORD *)(v272 + 196);
        __src[0] = (void *)129;
        LODWORD(__src[1]) = 0;
        v275 = sub_1C5544694((uint64_t)v1266, (unint64_t *)__src, 1);
        v1277[0] = (void *)129;
        LODWORD(v1277[1]) = 0;
        LODWORD(v1280[0]) = v274;
        LODWORD(v1281) = 0;
        *(_QWORD *)&v1282 = v275;
        *((_QWORD *)&v1282 + 1) = v276;
        v1283 = 1;
        v277 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                        + 4))(v1266, 46, v1277, 1, v1280, 2, 0);
        v279 = v278;
        v1280[0] = (void *)129;
        LODWORD(v1280[1]) = 0;
        v1249 = v259;
        v280 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))*v1266
                        + 4))(v1266, 4335, v1280, 1, 0, 0, 0);
        v282 = v281;
        __src[0] = v280;
        __src[1] = v281;
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v281, (llvm::MachineFunction *)v280, (const llvm::MachineOperand *)v1280);
        v283 = *(_DWORD *)(v279[4] + 4);
        v1281 = 0;
        v1280[1] = 0;
        HIDWORD(v1280[0]) = v283;
        LODWORD(v1280[0]) = 0;
        *(_QWORD *)&v1282 = 0;
        llvm::MachineInstr::addOperand(v282, (llvm::MachineFunction *)v280, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v282, (llvm::MachineFunction *)v280, (const llvm::MachineOperand *)v1280);
        sub_1C49400A8((uint64_t)__src);
        v1314 = (void *)129;
        LODWORD(v1315) = 0;
        v284 = sub_1C5544694((uint64_t)v1266, (unint64_t *)&v1314, 1);
        v1277[0] = (void *)129;
        LODWORD(v1277[1]) = 0;
        *(_OWORD *)v1280 = *(_OWORD *)__src;
        LODWORD(v1281) = 1;
        *(_QWORD *)&v1282 = v284;
        *((_QWORD *)&v1282 + 1) = v285;
        v1283 = 1;
        __src[0] = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                            + 4))(v1266, 45, v1277, 1, v1280, 2, 0);
        __src[1] = v286;
        v1314 = (void *)129;
        LODWORD(v1315) = 0;
        v287 = sub_1C5544694((uint64_t)v1266, (unint64_t *)&v1314, 1);
        v1277[0] = (void *)129;
        LODWORD(v1277[1]) = 0;
        LODWORD(v1280[0]) = v273;
        LODWORD(v1281) = 0;
        *(_QWORD *)&v1282 = v287;
        *((_QWORD *)&v1282 + 1) = v288;
        v1283 = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 46, v1277, 1, v1280, 2, 0);
        v290 = *(_DWORD *)(*(_QWORD *)(v289 + 32) + 4);
        v1277[0] = (void *)129;
        LODWORD(v1277[1]) = 0;
        LODWORD(v1280[0]) = v290;
        LODWORD(v1281) = 0;
        v1282 = *(_OWORD *)__src;
        v1283 = 1;
        v291 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                        + 4))(v1266, 127, v1277, 1, v1280, 2, 0);
        v1277[0] = (void *)257;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v291;
        v1280[1] = v292;
        LODWORD(v1281) = 1;
        v293 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                        + 4))(v1266, 126, v1277, 1, v1280, 1, 0);
        v295 = v294;
        v1277[0] = (void *)257;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v277;
        v1280[1] = v279;
        LODWORD(v1281) = 1;
        v296 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                + 4))(v1266, 126, v1277, 1, v1280, 1, 0);
        v1277[0] = (void *)257;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v293;
        v1280[1] = v295;
        LODWORD(v1281) = 1;
        *(_QWORD *)&v1282 = v296;
        *((_QWORD *)&v1282 + 1) = v297;
        v1283 = 1;
        v298 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                        + 4))(v1266, 66, v1277, 1, v1280, 2, 0);
        v1277[0] = (void *)257;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v298;
        v1280[1] = v299;
        LODWORD(v1281) = 1;
        v1314 = (void *)257;
        LODWORD(v1315) = 0;
        *(_QWORD *)&v1282 = sub_1C5544694((uint64_t)v1266, (unint64_t *)&v1314, 15);
        *((_QWORD *)&v1282 + 1) = v300;
        v1283 = 1;
        v301 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                        + 4))(v1266, 127, v1277, 1, v1280, 2, 0);
        v303 = v302;
        v1277[0] = (void *)129;
        LODWORD(v1277[1]) = 0;
        *(_OWORD *)v1280 = *(_OWORD *)__src;
        LODWORD(v1281) = 1;
        v1314 = (void *)129;
        LODWORD(v1315) = 0;
        *(_QWORD *)&v1282 = sub_1C5544694((uint64_t)v1266, (unint64_t *)&v1314, 4);
        *((_QWORD *)&v1282 + 1) = v304;
        v1283 = 1;
        v305 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                        + 4))(v1266, 127, v1277, 1, v1280, 2, 0);
        v1277[0] = (void *)129;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v305;
        v1280[1] = v306;
        LODWORD(v1281) = 1;
        LODWORD(v1282) = v1249;
        v1283 = 0;
        v307 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                        + 4))(v1266, 66, v1277, 1, v1280, 2, 0);
        v1277[0] = (void *)257;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v307;
        v1280[1] = v308;
        LODWORD(v1281) = 1;
        v309 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                + 4))(v1266, 126, v1277, 1, v1280, 1, 0);
        v1277[0] = (void *)257;
        v139 = v1227;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v301;
        v1280[1] = v303;
        LODWORD(v1281) = 1;
        *(_QWORD *)&v1282 = v309;
        *((_QWORD *)&v1282 + 1) = v310;
        v1283 = 1;
        v311 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                + 4))(v1266, 66, v1277, 1, v1280, 2, 0);
        LODWORD(v1277[0]) = v1257;
        LODWORD(v1277[1]) = 1;
        v1280[0] = v270;
        v1280[1] = v1263;
      }
      else
      {
        v1277[0] = (void *)257;
        LODWORD(v1277[1]) = 0;
        LODWORD(v1280[0]) = v259;
        LODWORD(v1281) = 0;
        v311 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                + 4))(v1266, 126, v1277, 1, v1280, 1, 0);
        LODWORD(v1277[0]) = v257;
        LODWORD(v1277[1]) = 1;
        v1280[0] = v270;
        v1280[1] = v271;
      }
      LODWORD(v1281) = 1;
      *(_QWORD *)&v1282 = v311;
      *((_QWORD *)&v1282 + 1) = v312;
      v1283 = 1;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 76, v1277, 1, v1280, 2, 0);
      v146 = *(_QWORD *)(v139 + 24);
      v147 = v139;
      if ((*(_BYTE *)v139 & 4) == 0)
      {
        v147 = v139;
        if ((*(_WORD *)(v139 + 44) & 8) != 0)
        {
          v147 = v139;
          do
            v147 = *(_QWORD *)(v147 + 8);
          while ((*(_WORD *)(v147 + 44) & 8) != 0);
        }
      }
      goto LABEL_643;
    case 2419:
    case 2420:
      v608 = "AGX3 does not support agx2.map.* intrinsics";
      goto LABEL_1181;
    case 2424:
      v176 = v1227;
      v700 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1227 + 32) + 36), v1262);
      v701 = v1266;
      v703 = sub_1C55437B8(v1266, 0x1817u);
      v704 = (unint64_t *)v702;
      v705 = (unint64_t *)v1266[6];
      v706 = *((_QWORD *)v1266[5] + 5);
      *(_QWORD *)(v702 + 24) = v706;
      v707 = *(_QWORD *)(v706 + 32);
      v708 = *(unsigned int *)(v702 + 40);
      if ((_DWORD)v708)
      {
        v1159 = *(_QWORD *)(v702 + 32);
        v1160 = *(_QWORD *)(v707 + 40);
        v1161 = 32 * v708;
        v176 = v1227;
        v701 = v1266;
        do
        {
          if (!*(_BYTE *)v1159)
          {
            v1162 = *(unsigned int *)(v1159 + 4);
            if ((int)v1162 >= 0)
              v1163 = (uint64_t *)(*(_QWORD *)(v1160 + 272) + 8 * v1162);
            else
              v1163 = (uint64_t *)(*(_QWORD *)(v1160 + 24) + 16 * (v1162 & 0x7FFFFFFF) + 8);
            v1164 = *v1163;
            if (*v1163)
            {
              v1165 = *(_QWORD *)(v1164 + 16);
              *(_QWORD *)(v1164 + 16) = v1159;
              *(_QWORD *)(v1159 + 16) = v1165;
              if ((*(_BYTE *)(v1159 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1159 + 24) = v1164;
              }
              else
              {
                *(_QWORD *)(v1159 + 24) = 0;
                v1163 = (uint64_t *)(v1165 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1159 + 16) = v1159;
              *(_QWORD *)(v1159 + 24) = 0;
            }
            *v1163 = v1159;
          }
          v1159 += 32;
          v1161 -= 32;
        }
        while (v1161);
      }
      v709 = *(_QWORD *)(v707 + 728);
      if (v709)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v709 + 24))(v709, v702);
      v710 = *v705 & 0xFFFFFFFFFFFFFFF8;
      *v704 = v710 | *v704 & 7;
      v704[1] = (unint64_t)v705;
      *(_QWORD *)(v710 + 8) = v704;
      *v705 = *v705 & 7 | (unint64_t)v704;
      v711 = v701[7];
      if (v711)
        (*(void (**)(unsigned __int8 *, unint64_t *))(*(_QWORD *)v711 + 24))(v711, v704);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v704, v703, (const llvm::MachineOperand *)v1280);
      LODWORD(v1280[0]) = 1;
      v1280[1] = 0;
      v1281 = v700;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v704, v703, (const llvm::MachineOperand *)v1280);
      v181 = *(_QWORD *)(v176 + 24);
      v182 = v176;
      if ((*(_BYTE *)v176 & 4) == 0)
      {
        v182 = v176;
        if ((*(_WORD *)(v176 + 44) & 8) != 0)
        {
          v182 = v176;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 2426:
    case 2427:
    case 2428:
    case 2429:
    case 2430:
    case 2431:
    case 2432:
    case 2433:
    case 2434:
    case 2435:
    case 2436:
    case 2437:
    case 2438:
    case 2439:
    case 2440:
    case 2441:
      v60 = *(_QWORD *)(v1227 + 32);
      v61 = *(_DWORD *)(v60 + 68);
      v62 = *(_DWORD *)(v60 + 32 * (*(_DWORD *)(v1227 + 40) - 1) + 4);
      v1277[0] = v1278;
      v1277[1] = (void *)0x400000000;
      if ((v62 & 0x80000000) == 0
        || (v62 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v1262 + 432)
        || ((*(_QWORD *)(*(_QWORD *)(v1262 + 424) + 8 * (v62 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0
          ? (v63 = (*(_QWORD *)(*(_QWORD *)(v1262 + 424) + 8 * (v62 & 0x7FFFFFFF)) & 4) == 0)
          : (v63 = 1),
            v63))
      {
        LODWORD(v1278[0]) = v62;
        LODWORD(v1277[1]) = 1;
      }
      else
      {
        sub_1C4A79060(v62, v1262, (uint64_t)v1266, (uint64_t)v1277);
      }
      sub_1C554C050(v61, v1262);
      v64 = *(unsigned int *)(v1227 + 40);
      if (!(_DWORD)v64)
        goto LABEL_100;
      v65 = 0;
      v66 = *(unsigned __int8 **)(v1227 + 32);
      do
      {
        v67 = *v66;
        v66 += 32;
        if (v67 == 17)
          goto LABEL_101;
        ++v65;
      }
      while (v64 != v65);
LABEL_100:
      LODWORD(v65) = -1;
LABEL_101:
      __asm { BR              X11 }
      return result;
    case 2448:
    case 2451:
      v176 = v1227;
      v353 = v1266;
      v354 = sub_1C4A75A70(*(_DWORD *)(*(_QWORD *)(v1227 + 32) + 68), 0, *(unsigned int *)(*(_QWORD *)(v1227 + 32) + 36) | 0x100000000, 0, (uint64_t *)v1266);
      v356 = sub_1C55437B8(v1266, 0x236u);
      v357 = (unint64_t *)v355;
      v358 = (unint64_t *)v1266[6];
      v359 = *((_QWORD *)v1266[5] + 5);
      *(_QWORD *)(v355 + 24) = v359;
      v360 = *(_QWORD *)(v359 + 32);
      v361 = *(unsigned int *)(v355 + 40);
      if ((_DWORD)v361)
      {
        v998 = *(_QWORD *)(v355 + 32);
        v999 = *(_QWORD *)(v360 + 40);
        v1000 = 32 * v361;
        do
        {
          if (!*(_BYTE *)v998)
          {
            v1001 = *(unsigned int *)(v998 + 4);
            if ((int)v1001 >= 0)
              v1002 = (uint64_t *)(*(_QWORD *)(v999 + 272) + 8 * v1001);
            else
              v1002 = (uint64_t *)(*(_QWORD *)(v999 + 24) + 16 * (v1001 & 0x7FFFFFFF) + 8);
            v1003 = *v1002;
            if (*v1002)
            {
              v1004 = *(_QWORD *)(v1003 + 16);
              *(_QWORD *)(v1003 + 16) = v998;
              *(_QWORD *)(v998 + 16) = v1004;
              if ((*(_BYTE *)(v998 + 3) & 1) != 0)
              {
                *(_QWORD *)(v998 + 24) = v1003;
              }
              else
              {
                *(_QWORD *)(v998 + 24) = 0;
                v1002 = (uint64_t *)(v1004 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v998 + 16) = v998;
              *(_QWORD *)(v998 + 24) = 0;
            }
            *v1002 = v998;
            v176 = v1227;
            v353 = v1266;
          }
          v998 += 32;
          v1000 -= 32;
        }
        while (v1000);
      }
      v362 = *(_QWORD *)(v360 + 728);
      if (v362)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v362 + 24))(v362, v355);
      v363 = *v358 & 0xFFFFFFFFFFFFFFF8;
      *v357 = v363 | *v357 & 7;
      v357[1] = (unint64_t)v358;
      *(_QWORD *)(v363 + 8) = v357;
      *v358 = *v358 & 7 | (unint64_t)v357;
      v364 = v353[7];
      if (v364)
        (*(void (**)(unsigned __int8 *, unint64_t *))(*(_QWORD *)v364 + 24))(v364, v357);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v357, v356, (const llvm::MachineOperand *)v1280);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v354;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v357, v356, (const llvm::MachineOperand *)v1280);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v357, v356, (const llvm::MachineOperand *)v1280);
      v1280[0] = v356;
      v1280[1] = v357;
      sub_1C49400A8((uint64_t)v1280);
      v181 = *(_QWORD *)(v176 + 24);
      v182 = v176;
      if ((*(_BYTE *)v176 & 4) == 0)
      {
        v182 = v176;
        if ((*(_WORD *)(v176 + 44) & 8) != 0)
        {
          v182 = v176;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 2452:
      v176 = v1227;
      v634 = v1266;
      v635 = sub_1C4A75A70(*(_DWORD *)(*(_QWORD *)(v1227 + 32) + 100), 0, *(unsigned int *)(*(_QWORD *)(v1227 + 32) + 36) | 0x100000000, *(unsigned int *)(*(_QWORD *)(v1227 + 32) + 68) | 0x100000000, (uint64_t *)v1266);
      v637 = sub_1C55437B8(v1266, 0x237u);
      v638 = (unint64_t *)v636;
      v639 = (unint64_t *)v1266[6];
      v640 = *((_QWORD *)v1266[5] + 5);
      *(_QWORD *)(v636 + 24) = v640;
      v641 = *(_QWORD *)(v640 + 32);
      v642 = *(unsigned int *)(v636 + 40);
      if ((_DWORD)v642)
      {
        v1145 = *(_QWORD *)(v636 + 32);
        v1146 = *(_QWORD *)(v641 + 40);
        v1147 = 32 * v642;
        v176 = v1227;
        v634 = v1266;
        do
        {
          if (!*(_BYTE *)v1145)
          {
            v1148 = *(unsigned int *)(v1145 + 4);
            if ((int)v1148 >= 0)
              v1149 = (uint64_t *)(*(_QWORD *)(v1146 + 272) + 8 * v1148);
            else
              v1149 = (uint64_t *)(*(_QWORD *)(v1146 + 24) + 16 * (v1148 & 0x7FFFFFFF) + 8);
            v1150 = *v1149;
            if (*v1149)
            {
              v1151 = *(_QWORD *)(v1150 + 16);
              *(_QWORD *)(v1150 + 16) = v1145;
              *(_QWORD *)(v1145 + 16) = v1151;
              if ((*(_BYTE *)(v1145 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1145 + 24) = v1150;
              }
              else
              {
                *(_QWORD *)(v1145 + 24) = 0;
                v1149 = (uint64_t *)(v1151 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1145 + 16) = v1145;
              *(_QWORD *)(v1145 + 24) = 0;
            }
            *v1149 = v1145;
          }
          v1145 += 32;
          v1147 -= 32;
        }
        while (v1147);
      }
      v643 = *(_QWORD *)(v641 + 728);
      if (v643)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v643 + 24))(v643, v636);
      v644 = *v639 & 0xFFFFFFFFFFFFFFF8;
      *v638 = v644 | *v638 & 7;
      v638[1] = (unint64_t)v639;
      *(_QWORD *)(v644 + 8) = v638;
      *v639 = *v639 & 7 | (unint64_t)v638;
      v645 = v634[7];
      if (v645)
        (*(void (**)(unsigned __int8 *, unint64_t *))(*(_QWORD *)v645 + 24))(v645, v638);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v638, v637, (const llvm::MachineOperand *)v1280);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v635;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v638, v637, (const llvm::MachineOperand *)v1280);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v638, v637, (const llvm::MachineOperand *)v1280);
      v1280[0] = v637;
      v1280[1] = v638;
      sub_1C49400A8((uint64_t)v1280);
      v181 = *(_QWORD *)(v176 + 24);
      v182 = v176;
      if ((*(_BYTE *)v176 & 4) == 0)
      {
        v182 = v176;
        if ((*(_WORD *)(v176 + 44) & 8) != 0)
        {
          v182 = v176;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 2453:
      v176 = v1227;
      v476 = v1266;
      v477 = sub_1C4A75A70(*(_DWORD *)(*(_QWORD *)(v1227 + 32) + 68), 0, 0, *(unsigned int *)(*(_QWORD *)(v1227 + 32) + 36) | 0x100000000, (uint64_t *)v1266);
      v479 = sub_1C55437B8(v1266, 0x238u);
      v480 = (unint64_t *)v478;
      v481 = (unint64_t *)v1266[6];
      v482 = *((_QWORD *)v1266[5] + 5);
      *(_QWORD *)(v478 + 24) = v482;
      v483 = *(_QWORD *)(v482 + 32);
      v484 = *(unsigned int *)(v478 + 40);
      if ((_DWORD)v484)
      {
        v1110 = *(_QWORD *)(v478 + 32);
        v1111 = *(_QWORD *)(v483 + 40);
        v1112 = 32 * v484;
        v176 = v1227;
        v476 = v1266;
        do
        {
          if (!*(_BYTE *)v1110)
          {
            v1113 = *(unsigned int *)(v1110 + 4);
            if ((int)v1113 >= 0)
              v1114 = (uint64_t *)(*(_QWORD *)(v1111 + 272) + 8 * v1113);
            else
              v1114 = (uint64_t *)(*(_QWORD *)(v1111 + 24) + 16 * (v1113 & 0x7FFFFFFF) + 8);
            v1115 = *v1114;
            if (*v1114)
            {
              v1116 = *(_QWORD *)(v1115 + 16);
              *(_QWORD *)(v1115 + 16) = v1110;
              *(_QWORD *)(v1110 + 16) = v1116;
              if ((*(_BYTE *)(v1110 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1110 + 24) = v1115;
              }
              else
              {
                *(_QWORD *)(v1110 + 24) = 0;
                v1114 = (uint64_t *)(v1116 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1110 + 16) = v1110;
              *(_QWORD *)(v1110 + 24) = 0;
            }
            *v1114 = v1110;
          }
          v1110 += 32;
          v1112 -= 32;
        }
        while (v1112);
      }
      v485 = *(_QWORD *)(v483 + 728);
      if (v485)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v485 + 24))(v485, v478);
      v486 = *v481 & 0xFFFFFFFFFFFFFFF8;
      *v480 = v486 | *v480 & 7;
      v480[1] = (unint64_t)v481;
      *(_QWORD *)(v486 + 8) = v480;
      *v481 = *v481 & 7 | (unint64_t)v480;
      v487 = v476[7];
      if (v487)
        (*(void (**)(unsigned __int8 *, unint64_t *))(*(_QWORD *)v487 + 24))(v487, v480);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v480, v479, (const llvm::MachineOperand *)v1280);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v477;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v480, v479, (const llvm::MachineOperand *)v1280);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v480, v479, (const llvm::MachineOperand *)v1280);
      v1280[0] = v479;
      v1280[1] = v480;
      sub_1C49400A8((uint64_t)v1280);
      v181 = *(_QWORD *)(v176 + 24);
      v182 = v176;
      if ((*(_BYTE *)v176 & 4) == 0)
      {
        v182 = v176;
        if ((*(_WORD *)(v176 + 44) & 8) != 0)
        {
          v182 = v176;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 2470:
      v176 = v1227;
      v580 = *(_QWORD *)(v1227 + 32);
      v581 = *(unsigned int *)(v580 + 36);
      v582 = v1266;
      v583 = sub_1C4A75A70(*(_DWORD *)(v580 + 68), v581 | 0x100000000, 0, 0, (uint64_t *)v1266);
      if (sub_1C554C050(v581, v1262))
        v585 = 6165;
      else
        v585 = 6166;
      if (v584)
        v586 = v585;
      else
        v586 = 6165;
      v588 = sub_1C55437B8(v1266, v586);
      v589 = (unint64_t *)v587;
      v590 = (unint64_t *)v1266[6];
      v591 = *((_QWORD *)v1266[5] + 5);
      *(_QWORD *)(v587 + 24) = v591;
      v592 = *(_QWORD *)(v591 + 32);
      v593 = *(unsigned int *)(v587 + 40);
      if ((_DWORD)v593)
      {
        v1138 = *(_QWORD *)(v587 + 32);
        v1139 = *(_QWORD *)(v592 + 40);
        v1140 = 32 * v593;
        v176 = v1227;
        v582 = v1266;
        do
        {
          if (!*(_BYTE *)v1138)
          {
            v1141 = *(unsigned int *)(v1138 + 4);
            if ((int)v1141 >= 0)
              v1142 = (uint64_t *)(*(_QWORD *)(v1139 + 272) + 8 * v1141);
            else
              v1142 = (uint64_t *)(*(_QWORD *)(v1139 + 24) + 16 * (v1141 & 0x7FFFFFFF) + 8);
            v1143 = *v1142;
            if (*v1142)
            {
              v1144 = *(_QWORD *)(v1143 + 16);
              *(_QWORD *)(v1143 + 16) = v1138;
              *(_QWORD *)(v1138 + 16) = v1144;
              if ((*(_BYTE *)(v1138 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1138 + 24) = v1143;
              }
              else
              {
                *(_QWORD *)(v1138 + 24) = 0;
                v1142 = (uint64_t *)(v1144 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1138 + 16) = v1138;
              *(_QWORD *)(v1138 + 24) = 0;
            }
            *v1142 = v1138;
          }
          v1138 += 32;
          v1140 -= 32;
        }
        while (v1140);
      }
      v594 = *(_QWORD *)(v592 + 728);
      if (v594)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v594 + 24))(v594, v587);
      v595 = *v590 & 0xFFFFFFFFFFFFFFF8;
      *v589 = v595 | *v589 & 7;
      v589[1] = (unint64_t)v590;
      *(_QWORD *)(v595 + 8) = v589;
      *v590 = *v590 & 7 | (unint64_t)v589;
      v596 = v582[7];
      if (v596)
        (*(void (**)(unsigned __int8 *, unint64_t *))(*(_QWORD *)v596 + 24))(v596, v589);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v589, v588, (const llvm::MachineOperand *)v1280);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v583;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v589, v588, (const llvm::MachineOperand *)v1280);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v589, v588, (const llvm::MachineOperand *)v1280);
      v1280[0] = v588;
      v1280[1] = v589;
      sub_1C49400A8((uint64_t)v1280);
      v181 = *(_QWORD *)(v176 + 24);
      v182 = v176;
      if ((*(_BYTE *)v176 & 4) == 0)
      {
        v182 = v176;
        if ((*(_WORD *)(v176 + 44) & 8) != 0)
        {
          v182 = v176;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 2471:
    case 2472:
    case 2473:
    case 2474:
    case 2475:
    case 2476:
    case 2477:
    case 2478:
      v41 = v1227;
      v42 = 1;
      return sub_1C4A7665C(v41, v42, v13, v1262, v1266);
    case 2483:
      v139 = v1227;
      v606 = *(_DWORD **)(v1227 + 32);
      LODWORD(v1277[0]) = v606[1];
      LODWORD(v1277[1]) = 1;
      LODWORD(v1280[0]) = v606[17];
      LODWORD(v1281) = 0;
      LODWORD(v1282) = v606[25];
      v1283 = 0;
      LODWORD(v1284) = v606[33];
      v1286 = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 58, v1277, 1, v1280, 3, 0);
      *(_WORD *)(v607 + 44) = *(_WORD *)(v607 + 44) & 0xC | *(_WORD *)(v1227 + 44) & 0xFFF3;
      v146 = *(_QWORD *)(v1227 + 24);
      v147 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v147 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v147 = v1227;
          do
            v147 = *(_QWORD *)(v147 + 8);
          while ((*(_WORD *)(v147 + 44) & 8) != 0);
        }
      }
      goto LABEL_643;
    case 2487:
      v608 = "Unsupported qrefl intrinsic (G15 does not have a qrefl instruction)";
      goto LABEL_1181;
    case 2488:
    case 2579:
      v1266[5] = *(unsigned __int8 **)(v1227 + 24);
      v1266[6] = (unsigned __int8 *)v1227;
      if (v16 != v17)
      {
        if (*v17)
          llvm::MetadataTracking::untrack((uint64_t)v17, *v17);
        v399 = *v16;
        *v17 = *v16;
        if (v399)
          llvm::MetadataTracking::track((uint64_t)v17, v399, 2);
      }
      v400 = *(_QWORD *)(v1227 + 32);
      v401 = *(_DWORD *)(v400 + 68);
      if (v401 < 0
        && (v401 & 0x7FFFFFFFu) < *(_DWORD *)(v1262 + 432)
        && *(_QWORD *)(*(_QWORD *)(v1262 + 424) + 8 * (v401 & 0x7FFFFFFF)) == 9)
      {
        v1277[0] = (void *)129;
        v402 = v400 + 64;
        LODWORD(v1277[1]) = 0;
        LODWORD(v1280[0]) = v401;
        LODWORD(v1281) = 0;
        sub_1C5546B4C((uint64_t *)v1266, 118, (unint64_t *)v1277, (int *)v1280);
        v404 = v403;
        (*((void (**)(unsigned __int8 **, uint64_t))*v4 + 4))(v4, v1227);
        llvm::MachineOperand::setReg(v402, *(_DWORD *)(*(_QWORD *)(v404 + 32) + 4));
        (*((void (**)(unsigned __int8 **, uint64_t))*v4 + 5))(v4, v1227);
      }
      return 1;
    case 2492:
      v512 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
      if (v512 < 0)
      {
        v780 = v512 & 0x7FFFFFFF;
        v514 = v1266;
        if (v780 >= *(_DWORD *)(v1262 + 432))
          v513 = 0;
        else
          v513 = *(void **)(*(_QWORD *)(v1262 + 424) + 8 * v780);
      }
      else
      {
        v513 = 0;
        v514 = v1266;
      }
      v823 = sub_1C4A8B770(22);
      if (sub_1C4A7C79C(v823, v15) >= 0x11)
        v824 = (uint64_t)v513;
      else
        v824 = 129;
      v1277[0] = (void *)v824;
      LODWORD(v1277[1]) = 0;
      v825 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))*v514
                                       + 4))(v514, 315, v1277, 1, 0, 0, 0);
      v827 = v826;
      LODWORD(v1280[0]) = 1;
      v1280[1] = 0;
      v1281 = v823;
      llvm::MachineInstr::addOperand(v826, v825, (const llvm::MachineOperand *)v1280);
      if ((void *)v824 != v513)
      {
        v1277[0] = v513;
        LODWORD(v1277[1]) = 0;
        v1280[0] = v825;
        v1280[1] = v827;
        LODWORD(v1281) = 1;
        v825 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v514
                                         + 4))(v514, 126, v1277, 1, v1280, 1, 0);
        v827 = v828;
      }
      __src[0] = v513;
      LODWORD(__src[1]) = 0;
      v829 = sub_1C5544694((uint64_t)v514, (unint64_t *)__src, 8);
      v1277[0] = v513;
      LODWORD(v1277[1]) = 0;
      v1280[0] = v825;
      v1280[1] = v827;
      LODWORD(v1281) = 1;
      *(_QWORD *)&v1282 = v829;
      *((_QWORD *)&v1282 + 1) = v830;
      v1283 = 1;
      v831 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v514
                      + 4))(v514, 47, v1277, 1, v1280, 2, 0);
      v833 = v832;
      LODWORD(v1280[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1262, (uint64_t)v513, "", 0);
      v834 = sub_1C5547D24(v514, 2586, (int *)v1280, 1, 0);
      v1277[0] = v513;
      LODWORD(v1277[1]) = 0;
      v1280[0] = v834;
      v1280[1] = v835;
      LODWORD(v1281) = 1;
      __src[0] = v513;
      LODWORD(__src[1]) = 0;
      *(_QWORD *)&v1282 = sub_1C5544694((uint64_t)v514, (unint64_t *)__src, 2);
      *((_QWORD *)&v1282 + 1) = v836;
      v1283 = 1;
      v837 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v514
              + 4))(v514, 128, v1277, 1, v1280, 2, 0);
      v1277[0] = v513;
      LODWORD(v1277[1]) = 0;
      v1280[0] = v831;
      v1280[1] = v833;
      LODWORD(v1281) = 1;
      *(_QWORD *)&v1282 = v837;
      *((_QWORD *)&v1282 + 1) = v838;
      v1283 = 1;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v514 + 4))(v514, 45, v1277, 1, v1280, 2, 0);
      sub_1C4923194((_QWORD *)v1262, v1227, *(_DWORD *)(*(_QWORD *)(v839 + 32) + 4), v4);
      return 1;
    case 2517:
      goto LABEL_272;
    case 2522:
      v176 = v1227;
      v453 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
      v454 = *(_QWORD *)(*(_QWORD *)(v1227 + 24) + 16);
      if (!v454)
        goto LABEL_432;
      while (1)
      {
        v454 = *(_QWORD *)(v454 + 8);
        if (!v454)
          break;
        v455 = *(_QWORD *)(v454 + 24);
        v456 = *(unsigned __int8 *)(v455 + 16);
        if (v455)
          v457 = v456 >= 0x1C;
        else
          v457 = 0;
        if (v457 && v456 - 29 < 0xB)
        {
LABEL_432:
          v1280[0] = (void *)0x100000000;
          LODWORD(v1280[1]) = 1;
          v459 = sub_1C4C640F8(155, 3, v1280);
          v1277[0] = (void *)257;
          LODWORD(v1277[1]) = 0;
          v460 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))*v1266
                                           + 4))(v1266, v459, v1277, 1, 0, 0, 0);
          v462 = v461;
          LODWORD(v1280[0]) = 1;
          v1281 = 0;
          v1280[1] = 0;
          llvm::MachineInstr::addOperand(v461, v460, (const llvm::MachineOperand *)v1280);
          LODWORD(v1280[0]) = 1;
          v1280[1] = 0;
          v1281 = 8;
          llvm::MachineInstr::addOperand(v462, v460, (const llvm::MachineOperand *)v1280);
          LODWORD(v1280[0]) = 1;
          v1280[1] = 0;
          v1281 = 1;
          llvm::MachineInstr::addOperand(v462, v460, (const llvm::MachineOperand *)v1280);
          LODWORD(v1280[0]) = 1;
          v1280[1] = 0;
          v1281 = 1;
          llvm::MachineInstr::addOperand(v462, v460, (const llvm::MachineOperand *)v1280);
          sub_1C554AE8C(v462, v1215, v1217);
          LODWORD(v1280[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1262, 257, "", 0);
          v463 = sub_1C5547D24(v1266, 2524, (int *)v1280, 1, 0);
          v465 = v464;
          v466 = *(_DWORD *)(*((_QWORD *)v462 + 4) + 4);
          v1281 = 0;
          v1280[1] = 0;
          HIDWORD(v1280[0]) = v466;
          LODWORD(v1280[0]) = 0;
          *(_QWORD *)&v1282 = 0;
          llvm::MachineInstr::addOperand(v464, v463, (const llvm::MachineOperand *)v1280);
          LODWORD(v1280[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1262, 257, "", 0);
          v467 = sub_1C5547D24(v1266, 2168, (int *)v1280, 1, 0);
          v469 = v468;
          v470 = *(_DWORD *)(*((_QWORD *)v465 + 4) + 4);
          v1281 = 0;
          v1280[1] = 0;
          HIDWORD(v1280[0]) = v470;
          LODWORD(v1280[0]) = 0;
          *(_QWORD *)&v1282 = 0;
          llvm::MachineInstr::addOperand(v468, v467, (const llvm::MachineOperand *)v1280);
          v1277[0] = (void *)129;
          LODWORD(v1277[1]) = 0;
          v1280[0] = v467;
          v1280[1] = v469;
          LODWORD(v1281) = 1;
          v471 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                  + 4))(v1266, 119, v1277, 1, v1280, 1, 0);
          v473 = v472;
          __src[0] = (void *)129;
          LODWORD(__src[1]) = 0;
          v474 = (void *)sub_1C5544694((uint64_t)v1266, (unint64_t *)__src, 31);
          LODWORD(v1277[0]) = v453;
          LODWORD(v1277[1]) = 1;
          v1280[0] = v474;
          v1280[1] = v475;
          LODWORD(v1281) = 1;
          *(_QWORD *)&v1282 = v471;
          *((_QWORD *)&v1282 + 1) = v473;
          v1283 = 1;
          v139 = v1227;
          (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 46, v1277, 1, v1280, 2, 0);
          v146 = *(_QWORD *)(v1227 + 24);
          v147 = v1227;
          if ((*(_BYTE *)v1227 & 4) == 0)
          {
            v147 = v1227;
            if ((*(_WORD *)(v1227 + 44) & 8) != 0)
            {
              v147 = v1227;
              do
                v147 = *(_QWORD *)(v147 + 8);
              while ((*(_WORD *)(v147 + 44) & 8) != 0);
            }
          }
          goto LABEL_643;
        }
      }
      LODWORD(v1280[0]) = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
      LODWORD(v1280[1]) = 1;
      sub_1C5544694((uint64_t)v1266, (unint64_t *)v1280, 0);
      v181 = *(_QWORD *)(v1227 + 24);
      v182 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v182 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v182 = v1227;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 2526:
      goto LABEL_133;
    case 2545:
    case 2546:
    case 2547:
    case 2548:
    case 2549:
    case 2550:
    case 2551:
    case 2552:
    case 2553:
    case 2554:
    case 2555:
    case 2556:
    case 2557:
    case 2558:
    case 2559:
    case 2560:
    case 2561:
    case 2562:
    case 2563:
    case 2564:
    case 2565:
    case 2566:
    case 2567:
    case 2568:
    case 2569:
    case 2570:
    case 2571:
    case 2572:
    case 2573:
    case 2574:
    case 2575:
    case 2576:
      v41 = v1227;
      v42 = 0;
      return sub_1C4A7665C(v41, v42, v13, v1262, v1266);
    case 2606:
    case 2607:
    case 2608:
    case 2609:
      v139 = v1227;
      v140 = sub_1C554C050(*(_DWORD *)(*(_QWORD *)(v1227 + 32) + 100), v1262);
      if (!v141 || v140)
      {
        v405 = dword_1C676B860[v13 - 2606];
        v406 = *(_DWORD **)(v1227 + 32);
        LODWORD(v1277[0]) = v406[1];
        LODWORD(v1277[1]) = 1;
        LODWORD(v1280[0]) = v406[17];
        LODWORD(v1281) = 0;
        LODWORD(v1282) = v406[25];
        v1283 = 0;
        LODWORD(v1284) = v406[33];
        v1286 = 0;
        LODWORD(v1287) = v406[41];
        v1289 = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, v405, v1277, 1, v1280, 4, 0);
        v146 = *(_QWORD *)(v1227 + 24);
        v147 = v1227;
        if ((*(_BYTE *)v1227 & 4) == 0)
        {
          v147 = v1227;
          if ((*(_WORD *)(v1227 + 44) & 8) != 0)
          {
            v147 = v1227;
            do
              v147 = *(_QWORD *)(v147 + 8);
            while ((*(_WORD *)(v147 + 44) & 8) != 0);
          }
        }
        goto LABEL_643;
      }
      v94 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 68);
      v95 = (_QWORD *)v1262;
      v96 = v1227;
LABEL_127:
      sub_1C4923194(v95, v96, v94, v4);
      return 1;
    case 2616:
    case 2617:
      v370 = *(_DWORD **)(v1227 + 32);
      v371 = v370[1];
      v372 = v370[17];
      v373 = v370[25];
      v1243 = v371;
      if (v371 < 0)
      {
        v376 = v1266;
        if ((v371 & 0x7FFFFFFFu) >= *(_DWORD *)(v1262 + 432))
        {
          v374 = 0;
          v375 = 2581;
        }
        else
        {
          v374 = *(_QWORD *)(*(_QWORD *)(v1262 + 424) + 8 * (v371 & 0x7FFFFFFF));
          if (v374 == 129)
            v375 = 2580;
          else
            v375 = 2581;
        }
      }
      else
      {
        v374 = 0;
        v375 = 2581;
        v376 = v1266;
      }
      __src[0] = (void *)129;
      LODWORD(__src[1]) = 0;
      v781 = sub_1C5544694((uint64_t)v376, (unint64_t *)__src, 28);
      v1277[0] = (void *)129;
      LODWORD(v1277[1]) = 0;
      LODWORD(v1280[0]) = v373;
      LODWORD(v1281) = 0;
      *(_QWORD *)&v1282 = v781;
      *((_QWORD *)&v1282 + 1) = v782;
      v1251 = v373;
      v1283 = 1;
      v783 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v376
                      + 4))(v376, 65, v1277, 1, v1280, 2, 0);
      v785 = v784;
      LODWORD(v1280[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1262, v374, "", 0);
      v786 = (void *)v374;
      v787 = sub_1C5547D24(v376, v375, (int *)v1280, 1, 0);
      v789 = v788;
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v372;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v788, v787, (const llvm::MachineOperand *)v1280);
      v790 = *(_DWORD *)(v785[4] + 4);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v790;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v789, v787, (const llvm::MachineOperand *)v1280);
      v1280[0] = (void *)129;
      LODWORD(v1280[1]) = 0;
      v1267 = sub_1C5544694((uint64_t)v376, (unint64_t *)v1280, 1);
      v1237 = v791;
      v1277[0] = (void *)129;
      LODWORD(v1277[1]) = 0;
      v1280[0] = v783;
      v1280[1] = v785;
      LODWORD(v1281) = 1;
      *(_QWORD *)&v1282 = v1267;
      *((_QWORD *)&v1282 + 1) = v791;
      v1283 = 1;
      v792 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v376
                      + 4))(v376, 45, v1277, 1, v1280, 2, 0);
      v794 = v793;
      LODWORD(v1280[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1262, (uint64_t)v786, "", 0);
      v795 = sub_1C5547D24(v376, v375, (int *)v1280, 1, 0);
      v796 = v372;
      v1259 = v372;
      v798 = v797;
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v796;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v797, v795, (const llvm::MachineOperand *)v1280);
      v799 = *(_DWORD *)(v794[4] + 4);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v799;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v798, v795, (const llvm::MachineOperand *)v1280);
      v1277[0] = v786;
      LODWORD(v1277[1]) = 0;
      LODWORD(v1280[0]) = 32;
      LODWORD(v1281) = 2;
      *(_QWORD *)&v1282 = v792;
      *((_QWORD *)&v1282 + 1) = v794;
      v1283 = 1;
      LODWORD(v1284) = v1251;
      v1286 = 0;
      v1287 = (uint64_t)v795;
      v1288 = v798;
      v1289 = 1;
      v1290 = (uint64_t)v787;
      v1291 = v789;
      v1292 = 1;
      v1229 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v376
               + 4))(v376, 51, v1277, 1, v1280, 5, 0);
      v1224 = v800;
      v1277[0] = (void *)129;
      LODWORD(v1277[1]) = 0;
      v1280[0] = v792;
      v1280[1] = v794;
      LODWORD(v1281) = 1;
      *(_QWORD *)&v1282 = v1267;
      *((_QWORD *)&v1282 + 1) = v1237;
      v1283 = 1;
      v801 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v376
                      + 4))(v376, 45, v1277, 1, v1280, 2, 0);
      v803 = v802;
      LODWORD(v1280[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1262, (uint64_t)v786, "", 0);
      v804 = sub_1C5547D24(v376, v375, (int *)v1280, 1, 0);
      v806 = v805;
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v1259;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v805, v804, (const llvm::MachineOperand *)v1280);
      v807 = *(_DWORD *)(v803[4] + 4);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v807;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v806, v804, (const llvm::MachineOperand *)v1280);
      v1277[0] = v786;
      LODWORD(v1277[1]) = 0;
      LODWORD(v1280[0]) = 32;
      LODWORD(v1281) = 2;
      *(_QWORD *)&v1282 = v801;
      *((_QWORD *)&v1282 + 1) = v803;
      v1283 = 1;
      LODWORD(v1284) = v1251;
      v1286 = 0;
      v1287 = (uint64_t)v804;
      v1288 = v806;
      v1289 = 1;
      v1290 = v1229;
      v1291 = v1224;
      v1292 = 1;
      v1230 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v376
               + 4))(v376, 51, v1277, 1, v1280, 5, 0);
      v1225 = v808;
      v1277[0] = (void *)129;
      LODWORD(v1277[1]) = 0;
      v1280[0] = v801;
      v1280[1] = v803;
      LODWORD(v1281) = 1;
      *(_QWORD *)&v1282 = v1267;
      *((_QWORD *)&v1282 + 1) = v1237;
      v1283 = 1;
      v809 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v376
              + 4))(v376, 45, v1277, 1, v1280, 2, 0);
      v811 = v810;
      LODWORD(v1280[0]) = llvm::MachineRegisterInfo::createGenericVirtualRegister(v1262, (uint64_t)v786, "", 0);
      v812 = sub_1C5547D24(v376, v375, (int *)v1280, 1, 0);
      v814 = v813;
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v1259;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v813, v812, (const llvm::MachineOperand *)v1280);
      v815 = *(_DWORD *)(*(_QWORD *)(v811 + 32) + 4);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v815;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v814, v812, (const llvm::MachineOperand *)v1280);
      LODWORD(v1277[0]) = v1243;
      LODWORD(v1277[1]) = 1;
      LODWORD(v1280[0]) = 32;
      LODWORD(v1281) = 2;
      *(_QWORD *)&v1282 = v809;
      *((_QWORD *)&v1282 + 1) = v811;
      v1283 = 1;
      LODWORD(v1284) = v1251;
      v1286 = 0;
      v1287 = (uint64_t)v812;
      v1288 = v814;
      v1289 = 1;
      v1290 = v1230;
      v1291 = v1225;
      v1292 = 1;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v376 + 4))(v376, 51, v1277, 1, v1280, 5, 0);
      v78 = v1227;
      v79 = *(_QWORD *)(v1227 + 24);
      v80 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v80 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v80 = v1227;
          do
            v80 = *(_QWORD *)(v80 + 8);
          while ((*(_WORD *)(v80 + 44) & 8) != 0);
        }
      }
      goto LABEL_944;
    case 2623:
      v608 = "Unsupported sin intrinsic; expected sin to be expanded in the driver";
      goto LABEL_1181;
    case 2628:
      if (!*((_BYTE *)v14 + 1646))
      {
        v608 = "Unsupported sqrt intrinsic.";
        goto LABEL_1181;
      }
      v628 = (v10 + 1);
      v139 = v1227;
      v629 = *(_QWORD *)(v1227 + 32);
      LODWORD(v1277[0]) = *(_DWORD *)(v629 + 4);
      LODWORD(v1277[1]) = 1;
      LODWORD(v1280[0]) = *(_DWORD *)(v629 + 32 * v628 + 4);
      LODWORD(v1281) = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))*v1266 + 4))(v1266, 357, v1277, 1, v1280, 1, *(unsigned __int16 *)(v1227 + 44) | 0x100000000);
      v146 = *(_QWORD *)(v1227 + 24);
      v147 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v147 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v147 = v1227;
          do
            v147 = *(_QWORD *)(v147 + 8);
          while ((*(_WORD *)(v147 + 44) & 8) != 0);
        }
      }
      goto LABEL_643;
    case 2685:
    case 2686:
      v608 = "AGX3 does not support agx2.unmap.* intrinsics";
      goto LABEL_1181;
    case 2687:
    case 2688:
    case 2689:
    case 2690:
    case 2691:
    case 2692:
    case 2693:
    case 2694:
    case 2695:
    case 2696:
    case 2697:
    case 2698:
    case 2699:
    case 2700:
    case 2701:
    case 2702:
      v56 = *(unsigned int *)(v1227 + 40);
      if (!(_DWORD)v56)
        goto LABEL_86;
      v57 = 0;
      v58 = *(unsigned __int8 **)(v1227 + 32);
      do
      {
        v59 = *v58;
        v58 += 32;
        if (v59 == 17)
          goto LABEL_87;
        ++v57;
      }
      while (v56 != v57);
LABEL_86:
      LODWORD(v57) = -1;
LABEL_87:
      __asm { BR              X11 }
      return result;
    case 2703:
    case 2704:
      v608 = "AGX3 does not support agx2.update.hw.coverage.mask.* intrinsics";
      goto LABEL_1181;
    case 2706:
    case 2707:
    case 2708:
      v177 = sub_1C4A740C0(v13);
      v178 = sub_1C4A8B770(v177);
      v176 = v1227;
      LODWORD(v1277[0]) = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
      LODWORD(v1277[1]) = 1;
      v179 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))*v1266
                                       + 4))(v1266, 314, v1277, 1, 0, 0, 0);
      LODWORD(v1280[0]) = 1;
      v1280[1] = 0;
      v1281 = v178;
      llvm::MachineInstr::addOperand(v180, v179, (const llvm::MachineOperand *)v1280);
      v181 = *(_QWORD *)(v1227 + 24);
      v182 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v182 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v182 = v1227;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 2739:
    case 2741:
    case 2742:
    case 2743:
      v148 = *(_QWORD *)(v1227 + 32);
      v149 = *(_DWORD *)(v148 + 36);
      v150 = *(_DWORD *)(v148 + 68);
      v151 = (uint64_t)v1219[6];
      if (!v151)
      {
        v151 = ((uint64_t (*)(llvm::ConstantFP ***, llvm::ConstantFP ****, llvm::ConstantFP ****))(*v1219[1])[27])(v1219[1], v1219 + 16, v1219);
        v1219[6] = (llvm::ConstantFP ***)v151;
      }
      *(_BYTE *)(v151 + 561) = 1;
      v1277[0] = (void *)257;
      LODWORD(v1277[1]) = 0;
      LODWORD(v1280[0]) = v150;
      LODWORD(v1281) = 0;
      LODWORD(v1282) = v149;
      v1283 = 0;
      v152 = v1266;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 76, v1277, 1, v1280, 2, 0);
      v154 = *(_DWORD *)(*(_QWORD *)(v153 + 32) + 4);
      v1277[0] = (void *)257;
      LODWORD(v1277[1]) = 0;
      LODWORD(v1280[0]) = v154;
      LODWORD(v1281) = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v152 + 4))(v152, 19, v1277, 1, v1280, 1, 0);
      v156 = *(_DWORD *)(*(_QWORD *)(v155 + 32) + 4);
      sub_1C4AD6390((uint64_t)v1266, 2u);
      v157 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*v152
                                       + 4))(v152, 550, 0, 0, 0, 0, 0);
      v159 = v158;
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v158, v157, (const llvm::MachineOperand *)v1280);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v156;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v159, v157, (const llvm::MachineOperand *)v1280);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v159, v157, (const llvm::MachineOperand *)v1280);
      v1280[0] = v157;
      v1280[1] = v159;
      sub_1C49400A8((uint64_t)v1280);
      v160 = *(_QWORD *)(v1227 + 48);
      v139 = v1227;
      if ((v160 & 7) != 0)
      {
        v161 = *(llvm::MachineMemOperand **)((v160 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v161 = (llvm::MachineMemOperand *)(v160 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v1227 + 48) = v160 & 0xFFFFFFFFFFFFFFF8;
      }
      llvm::MachineInstr::addMemOperand(v159, v157, v161);
      sub_1C4A74D38((uint64_t)v1266, v1227, v150, 3u, v13 == 2741);
      v146 = *(_QWORD *)(v1227 + 24);
      v147 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v147 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v147 = v1227;
          do
            v147 = *(_QWORD *)(v147 + 8);
          while ((*(_WORD *)(v147 + 44) & 8) != 0);
        }
      }
      goto LABEL_643;
    case 2744:
      v617 = *(_QWORD *)(v1227 + 32);
      v618 = *(_DWORD *)(v617 + 32 * (v10 + 1) + 4);
      v619 = *(_DWORD *)(v617 + 32 * (v10 + 2) + 4);
      v620 = *(unsigned __int8 *)(*((_QWORD *)v1266[1] + 2) + 389);
      v1280[0] = (void *)129;
      LODWORD(v1280[1]) = 0;
      if (v620)
        v621 = 8;
      else
        v621 = 4;
      sub_1C5544694((uint64_t)v1266, (unint64_t *)v1280, v621);
      v623 = *(_DWORD *)(*(_QWORD *)(v622 + 32) + 4);
      v1277[0] = (void *)129;
      LODWORD(v1277[1]) = 0;
      LODWORD(v1280[0]) = v619;
      LODWORD(v1281) = 0;
      LODWORD(v1282) = v623;
      v1283 = 0;
      v624 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
              + 4))(v1266, 127, v1277, 1, v1280, 2, 0);
      v1277[0] = (void *)129;
      LODWORD(v1277[1]) = 0;
      LODWORD(v1280[0]) = v618;
      v176 = v1227;
      LODWORD(v1281) = 0;
      *(_QWORD *)&v1282 = v624;
      *((_QWORD *)&v1282 + 1) = v625;
      v1283 = 1;
      v626 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                      + 4))(v1266, 66, v1277, 1, v1280, 2, 0);
      LODWORD(v1277[0]) = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
      LODWORD(v1277[1]) = 1;
      v1280[0] = v626;
      v1280[1] = v627;
      LODWORD(v1281) = 1;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 267, v1277, 1, v1280, 1, 0);
      v181 = *(_QWORD *)(v1227 + 24);
      v182 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v182 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v182 = v1227;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 2745:
      v176 = v1227;
      v609 = *(_QWORD *)(v1227 + 32);
      LODWORD(v1277[0]) = *(_DWORD *)(v609 + 4);
      LODWORD(v1277[1]) = 1;
      LODWORD(v1280[0]) = *(_DWORD *)(v609 + 32 * (v10 + 1) + 4);
      LODWORD(v1281) = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 268, v1277, 1, v1280, 1, 0);
      v181 = *(_QWORD *)(v1227 + 24);
      v182 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v182 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v182 = v1227;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 2749:
      if (!*((_BYTE *)v14 + 1626))
        return 1;
      v608 = "Intrinsic not supported by subtarget";
      goto LABEL_1181;
    case 2770:
    case 2771:
      v389 = *(_QWORD *)(v1227 + 32);
      v390 = *(_DWORD *)(v389 + 4);
      v391 = sub_1C4A7962C(*(_DWORD *)(v389 + 32 * (v10 + 1) + 4), v1262, (uint64_t *)v1266);
      v1280[0] = &off_1E816EFF0;
      v1280[1] = sub_1C554C7E0;
      *(_QWORD *)&v1282 = v1280;
      v1277[0] = &off_1E816F038;
      v1277[1] = sub_1C554C7F8;
      *((_QWORD *)&v1278[0] + 1) = v1277;
      sub_1C554C3AC(v391, v1262, (uint64_t)v1280, (uint64_t)v1277, 0, 0, __src);
      v392 = (void **)*((_QWORD *)&v1278[0] + 1);
      if (*((void ***)&v1278[0] + 1) == v1277)
      {
        v393 = (void (**)(void **))((char *)v1277[0] + 32);
        v392 = v1277;
LABEL_325:
        (*v393)(v392);
        goto LABEL_326;
      }
      if (*((_QWORD *)&v1278[0] + 1))
      {
        v393 = (void (**)(void **))(**((_QWORD **)&v1278[0] + 1) + 40);
        goto LABEL_325;
      }
LABEL_326:
      v394 = (void **)v1282;
      if ((void **)v1282 == v1280)
      {
        v395 = (void (**)(void **))((char *)v1280[0] + 32);
        v394 = v1280;
      }
      else
      {
        if (!(_QWORD)v1282)
          goto LABEL_329;
        v395 = (void (**)(void **))(*(_QWORD *)v1282 + 40);
      }
      (*v395)(v394);
LABEL_329:
      if ((_BYTE)v1310)
      {
        if (LODWORD(__src[1]) >= 0x41)
        {
          v396 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
          v397 = (void *)operator new[]();
          v398 = __src[0];
          memcpy(v397, __src[0], v396);
          if (v398)
            MEMORY[0x1CAA32F9C](v398, 0x1000C8000313F17);
          MEMORY[0x1CAA32F9C](v397, 0x1000C8000313F17);
        }
      }
      else
      {
        v1277[0] = (void *)16777244;
        LODWORD(v1277[1]) = 0;
        LODWORD(v1280[0]) = v391;
        LODWORD(v1281) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 312, v1277, 1, v1280, 1, 0);
        v391 = *(_DWORD *)(*(_QWORD *)(v753 + 32) + 4);
      }
      LODWORD(v1280[0]) = v390;
      LODWORD(v1280[1]) = 1;
      v754 = (llvm::MachineFunction *)(*((uint64_t (**)(void))*v1266 + 4))();
      v756 = v755;
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v391;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v755, v754, (const llvm::MachineOperand *)v1280);
      if (v13 == 2770)
      {
        v757 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 32 * (v10 + 2) + 4);
        v1281 = 0;
        v1280[1] = 0;
        HIDWORD(v1280[0]) = v757;
        LODWORD(v1280[0]) = 0;
        *(_QWORD *)&v1282 = 0;
        llvm::MachineInstr::addOperand(v756, v754, (const llvm::MachineOperand *)v1280);
      }
      v78 = v1227;
      *((_WORD *)v756 + 22) = *((_WORD *)v756 + 22) & 0xC | *(_WORD *)(v1227 + 44) & 0xFFF3;
      v79 = *(_QWORD *)(v1227 + 24);
      v80 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v80 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v80 = v1227;
          do
            v80 = *(_QWORD *)(v80 + 8);
          while ((*(_WORD *)(v80 + 44) & 8) != 0);
        }
      }
      goto LABEL_944;
    case 2772:
    case 2773:
      v313 = *(_QWORD *)(v1227 + 32);
      v314 = *(_DWORD *)(v313 + 4);
      v315 = sub_1C4A7962C(*(_DWORD *)(v313 + 32 * (v10 + 1) + 4), v1262, (uint64_t *)v1266);
      v316 = v315;
      if (v13 == 2773)
        v317 = 2;
      else
        v317 = 3;
      v1258 = (v317 + v10);
      v318 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 32 * v1258 + 4);
      v1280[0] = &off_1E816EFF0;
      v1280[1] = sub_1C554C7E0;
      *(_QWORD *)&v1282 = v1280;
      v1277[0] = &off_1E816F038;
      v1277[1] = sub_1C554C7F8;
      *((_QWORD *)&v1278[0] + 1) = v1277;
      sub_1C554C3AC(v315, v1262, (uint64_t)v1280, (uint64_t)v1277, 0, 0, __src);
      v319 = (void **)*((_QWORD *)&v1278[0] + 1);
      if (*((void ***)&v1278[0] + 1) == v1277)
      {
        v320 = (void (**)(void **))((char *)v1277[0] + 32);
        v319 = v1277;
LABEL_285:
        (*v320)(v319);
        goto LABEL_286;
      }
      if (*((_QWORD *)&v1278[0] + 1))
      {
        v320 = (void (**)(void **))(**((_QWORD **)&v1278[0] + 1) + 40);
        goto LABEL_285;
      }
LABEL_286:
      v321 = (void **)v1282;
      if ((void **)v1282 == v1280)
      {
        v322 = (void (**)(void **))((char *)v1280[0] + 32);
        v321 = v1280;
      }
      else
      {
        if (!(_QWORD)v1282)
        {
LABEL_289:
          if ((_BYTE)v1310)
          {
            if (LODWORD(__src[1]) >= 0x41)
            {
              v1174 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
              v1175 = (void *)operator new[]();
              v1176 = __src[0];
              memcpy(v1175, __src[0], v1174);
              if (v1176)
                MEMORY[0x1CAA32F9C](v1176, 0x1000C8000313F17);
              MEMORY[0x1CAA32F9C](v1175, 0x1000C8000313F17);
            }
            v323 = v1227;
          }
          else
          {
            v1277[0] = (void *)16777244;
            LODWORD(v1277[1]) = 0;
            LODWORD(v1280[0]) = v316;
            LODWORD(v1281) = 0;
            v1250 = v318;
            v725 = v1266;
            v726 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                            + 4))(v1266, 312, v1277, 1, v1280, 1, 0);
            v728 = v727;
            v1277[0] = (void *)257;
            LODWORD(v1277[1]) = 0;
            __src[0] = (void *)257;
            LODWORD(__src[1]) = 0;
            v729 = sub_1C5544694((uint64_t)v1266, (unint64_t *)__src, 0);
            v1280[0] = v726;
            v1280[1] = v728;
            LODWORD(v1281) = 1;
            *(_QWORD *)&v1282 = v729;
            *((_QWORD *)&v1282 + 1) = v730;
            v1283 = 1;
            v731 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v725
                    + 4))(v725, 205, v1277, 1, v1280, 2, 0);
            v733 = v732;
            v1280[0] = (void *)257;
            LODWORD(v1280[1]) = 0;
            v734 = sub_1C5544694((uint64_t)v1266, (unint64_t *)v1280, 1);
            v735 = v314;
            v737 = v736;
            v1280[0] = (void *)257;
            LODWORD(v1280[1]) = 0;
            v738 = sub_1C5545FFC((uint64_t)v1266, (unint64_t *)v1280, 1.0);
            v1277[0] = (void *)257;
            LODWORD(v1277[1]) = 0;
            LODWORD(v1280[0]) = 32;
            LODWORD(v1281) = 2;
            *(_QWORD *)&v1282 = v731;
            *((_QWORD *)&v1282 + 1) = v733;
            v1283 = 1;
            v1284 = v734;
            v1285 = v737;
            v314 = v735;
            v1286 = 1;
            v1287 = v738;
            v1288 = v739;
            v1289 = 1;
            LODWORD(v1290) = v1250;
            v1292 = 0;
            (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v725 + 4))(v725, 51, v1277, 1, v1280, 5, 0);
            v323 = v1227;
            *(_WORD *)(v740 + 44) = *(_WORD *)(v740 + 44) & 0xC | *(_WORD *)(v1227 + 44) & 0xFFF3;
            v316 = *(_DWORD *)(v728[4] + 4);
            v318 = *(_DWORD *)(*(_QWORD *)(v740 + 32) + 4);
            v13 = v1276;
          }
          v1280[0] = (void *)257;
          LODWORD(v1280[1]) = 0;
          v741 = (llvm::MachineFunction *)(*((uint64_t (**)(void))*v1266 + 4))();
          v743 = v742;
          v1281 = 0;
          v1280[1] = 0;
          HIDWORD(v1280[0]) = v316;
          LODWORD(v1280[0]) = 0;
          *(_QWORD *)&v1282 = 0;
          llvm::MachineInstr::addOperand(v742, v741, (const llvm::MachineOperand *)v1280);
          if (v13 == 2772)
          {
            v744 = *(_DWORD *)(*(_QWORD *)(v323 + 32) + 32 * (v10 + 2) + 4);
            v1281 = 0;
            v1280[1] = 0;
            HIDWORD(v1280[0]) = v744;
            LODWORD(v1280[0]) = 0;
            *(_QWORD *)&v1282 = 0;
            llvm::MachineInstr::addOperand(v743, v741, (const llvm::MachineOperand *)v1280);
          }
          *((_WORD *)v743 + 22) = *((_WORD *)v743 + 22) & 0xC | *(_WORD *)(v323 + 44) & 0xFFF3;
          v745 = v1266;
          v746 = sub_1C4A73FE0(*(_DWORD *)(*(_QWORD *)(v323 + 32) + 32 * (v1258 + 1) + 4), (uint64_t)v1266[3], 0x100u);
          if (HIDWORD(v746))
          {
            v1280[0] = (void *)129;
            LODWORD(v1280[1]) = 0;
            sub_1C5544694((uint64_t)v1266, (unint64_t *)v1280, v746);
            v747 = *(_DWORD *)(*(_QWORD *)(v748 + 32) + 4);
          }
          else
          {
            v747 = 0;
          }
          v1280[0] = &off_1E816EFF0;
          v1280[1] = sub_1C554C7E0;
          *(_QWORD *)&v1282 = v1280;
          v1277[0] = &off_1E816F038;
          v1277[1] = sub_1C554C7F8;
          *((_QWORD *)&v1278[0] + 1) = v1277;
          sub_1C554C3AC(v316, v1262, (uint64_t)v1280, (uint64_t)v1277, 0, 0, __src);
          v749 = (void **)*((_QWORD *)&v1278[0] + 1);
          if (*((void ***)&v1278[0] + 1) == v1277)
          {
            v750 = (void (**)(void **))((char *)v1277[0] + 32);
            v749 = v1277;
          }
          else
          {
            v176 = v1227;
            if (!*((_QWORD *)&v1278[0] + 1))
            {
LABEL_758:
              v751 = (void **)v1282;
              if ((void **)v1282 == v1280)
              {
                v752 = (void (**)(void **))((char *)v1280[0] + 32);
                v751 = v1280;
              }
              else
              {
                if (!(_QWORD)v1282)
                  goto LABEL_761;
                v752 = (void (**)(void **))(*(_QWORD *)v1282 + 40);
              }
              (*v752)(v751);
LABEL_761:
              if ((_BYTE)v1310)
              {
                if (LODWORD(__src[1]) >= 0x41)
                {
                  v1177 = v318;
                  v1178 = v314;
                  v1179 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
                  v1180 = (void *)operator new[]();
                  v1181 = __src[0];
                  memcpy(v1180, __src[0], v1179);
                  if (v1181)
                    MEMORY[0x1CAA32F9C](v1181, 0x1000C8000313F17);
                  MEMORY[0x1CAA32F9C](v1180, 0x1000C8000313F17);
                  v176 = v1227;
                  v745 = v1266;
                  v314 = v1178;
                  v318 = v1177;
                }
                LODWORD(v1277[0]) = v314;
                LODWORD(v1277[1]) = 1;
                LODWORD(v1280[0]) = *(_DWORD *)(*((_QWORD *)v743 + 4) + 4);
                LODWORD(v1281) = 0;
                LODWORD(v1282) = v318;
                v1283 = 0;
                LODWORD(v1284) = v316;
                v1286 = 0;
                LODWORD(v1287) = v747;
                v1289 = 0;
                (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))*v745
                 + 4))(v745, 279, v1277, 1, v1280, 4, *(unsigned __int16 *)(v176 + 44) | 0x100000000);
              }
              else
              {
                LODWORD(v1277[0]) = v314;
                LODWORD(v1277[1]) = 1;
                LODWORD(v1280[0]) = *(_DWORD *)(*((_QWORD *)v743 + 4) + 4);
                LODWORD(v1281) = 0;
                LODWORD(v1282) = v318;
                v1283 = 0;
                (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))*v1266
                 + 4))(v1266, 165, v1277, 1, v1280, 2, *(unsigned __int16 *)(v176 + 44) | 0x100000000);
              }
              v181 = *(_QWORD *)(v176 + 24);
              v182 = v176;
              if ((*(_BYTE *)v176 & 4) == 0)
              {
                v182 = v176;
                if ((*(_WORD *)(v176 + 44) & 8) != 0)
                {
                  v182 = v176;
                  do
                    v182 = *(_QWORD *)(v182 + 8);
                  while ((*(_WORD *)(v182 + 44) & 8) != 0);
                }
              }
              goto LABEL_259;
            }
            v750 = (void (**)(void **))(**((_QWORD **)&v1278[0] + 1) + 40);
          }
          (*v750)(v749);
          v176 = v1227;
          goto LABEL_758;
        }
        v322 = (void (**)(void **))(*(_QWORD *)v1282 + 40);
      }
      (*v322)(v321);
      goto LABEL_289;
    case 2774:
    case 2775:
    case 2777:
    case 2778:
    case 2779:
      v136 = *(_QWORD *)(v1227 + 32);
      v137 = *(_DWORD *)(v136 + 36);
      v138 = v1262;
      if (*(_BYTE *)(v136 + 32) != 7)
      {
        v190 = sub_1C4A73FE0(v137, v1262, 0);
        v136 = *(_QWORD *)(v1227 + 32);
        v137 = v190 >> 1;
      }
      v1236 = v137;
      v1242 = *(_DWORD *)(v136 + 68);
      v1248 = *(_DWORD *)(v136 + 100);
      v191 = *(_DWORD *)(v136 + 132);
      v192 = *(_DWORD *)(v136 + 164);
      v193 = *(_DWORD *)(v136 + 196);
      v194 = *(_DWORD *)(v136 + 228);
      if (v13 == 2775)
      {
        v195 = *(_DWORD *)(v136 + 260);
        v1222 = *(_DWORD *)(v136 + 292);
        v1228 = *(_DWORD *)(v136 + 324);
        __src[0] = (void *)129;
        LODWORD(__src[1]) = 0;
        v196 = v1266;
        v197 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))*v1266
                                         + 4))(v1266, 7129, __src, 1, 0, 0, 0);
        v198 = v194;
        v200 = v199;
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v199, v197, (const llvm::MachineOperand *)v1280);
        v1281 = 0;
        v1280[1] = 0;
        HIDWORD(v1280[0]) = v191;
        LODWORD(v1280[0]) = 0;
        *(_QWORD *)&v1282 = 0;
        llvm::MachineInstr::addOperand(v200, v197, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v200, v197, (const llvm::MachineOperand *)v1280);
        v1281 = 0;
        v1280[1] = 0;
        HIDWORD(v1280[0]) = v198;
        LODWORD(v1280[0]) = 0;
        *(_QWORD *)&v1282 = 0;
        llvm::MachineInstr::addOperand(v200, v197, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v200, v197, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1280[1] = 0;
        v1281 = 12;
        llvm::MachineInstr::addOperand(v200, v197, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1280[1] = 0;
        v1281 = 4;
        llvm::MachineInstr::addOperand(v200, v197, (const llvm::MachineOperand *)v1280);
        v1277[0] = v197;
        v1277[1] = v200;
        sub_1C49400A8((uint64_t)v1277);
        v1314 = (void *)129;
        LODWORD(v1315) = 0;
        v201 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))*v196
                                         + 4))(v196, 7129, &v1314, 1, 0, 0, 0);
        v203 = v202;
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v202, v201, (const llvm::MachineOperand *)v1280);
        v1281 = 0;
        v1280[1] = 0;
        HIDWORD(v1280[0]) = v195;
        LODWORD(v1280[0]) = 0;
        *(_QWORD *)&v1282 = 0;
        llvm::MachineInstr::addOperand(v203, v201, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v203, v201, (const llvm::MachineOperand *)v1280);
        v1281 = 0;
        v1280[1] = 0;
        HIDWORD(v1280[0]) = v192;
        LODWORD(v1280[0]) = 0;
        *(_QWORD *)&v1282 = 0;
        llvm::MachineInstr::addOperand(v203, v201, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v203, v201, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1280[1] = 0;
        v1281 = 8;
        llvm::MachineInstr::addOperand(v203, v201, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1280[1] = 0;
        v1281 = 4;
        llvm::MachineInstr::addOperand(v203, v201, (const llvm::MachineOperand *)v1280);
        __src[0] = v201;
        __src[1] = v203;
        sub_1C49400A8((uint64_t)__src);
        v1314 = (void *)257;
        LODWORD(v1315) = 0;
        *(_OWORD *)v1280 = *(_OWORD *)v1277;
        v1282 = *(_OWORD *)__src;
        LODWORD(v1281) = 1;
        v1283 = 1;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v196 + 4))(v196, 76, &v1314, 1, v1280, 2, 0);
        v205 = *(_DWORD *)(*(_QWORD *)(v204 + 32) + 4);
        v1295 = 257;
        LODWORD(v1296) = 0;
        v206 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))*v196
                                         + 4))(v196, 7093, &v1295, 1, 0, 0, 0);
        v208 = v207;
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v207, v206, (const llvm::MachineOperand *)v1280);
        v1281 = 0;
        v1280[1] = 0;
        HIDWORD(v1280[0]) = v205;
        LODWORD(v1280[0]) = 0;
        *(_QWORD *)&v1282 = 0;
        llvm::MachineInstr::addOperand(v208, v206, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v208, v206, (const llvm::MachineOperand *)v1280);
        v1281 = 0;
        v1280[1] = 0;
        HIDWORD(v1280[0]) = v193;
        LODWORD(v1280[0]) = 0;
        *(_QWORD *)&v1282 = 0;
        llvm::MachineInstr::addOperand(v208, v206, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v208, v206, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1280[1] = 0;
        v1281 = 28;
        llvm::MachineInstr::addOperand(v208, v206, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1280[1] = 0;
        v1281 = 4;
        llvm::MachineInstr::addOperand(v208, v206, (const llvm::MachineOperand *)v1280);
        v1314 = v206;
        v1315 = v208;
        sub_1C49400A8((uint64_t)&v1314);
        v209 = *(_DWORD *)(*((_QWORD *)v208 + 4) + 4);
        v1295 = 257;
        LODWORD(v1296) = 0;
        LODWORD(v1280[0]) = v1222;
        LODWORD(v1281) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, void **, uint64_t, _QWORD))*v196
         + 4))(v196, 118, &v1295, 1, v1280, 1, 0);
        LODWORD(v208) = *(_DWORD *)(*(_QWORD *)(v210 + 32) + 4);
        v1280[0] = (void *)257;
        LODWORD(v1280[1]) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))*v196 + 4))(v196, 68, v1280, 1, 0, 0, 0);
        v211 = 0;
        v213 = *(_DWORD *)(*(_QWORD *)(v212 + 32) + 4);
        v1295 = 16777252;
        LODWORD(v1296) = 0;
        v1311 = (void *)__PAIR64__(v1228, v209);
        v1312 = (int)v208;
        v1313 = v213;
        v1280[0] = &v1281;
        v1280[1] = (void *)0x800000000;
        v214 = 2;
        do
        {
          v215 = &v1280[v214];
          *(_DWORD *)v215 = *(_DWORD *)((char *)&v1311 + v211);
          *((_DWORD *)v215 + 4) = 0;
          v214 += 3;
          v211 += 4;
        }
        while (v211 != 16);
        LODWORD(v1280[1]) += 4;
        (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, uint64_t *))*v1266 + 4))(v1266, 77, &v1295, 1, &v1281);
        v217 = v216;
        if (v1280[0] != &v1281)
          free(v1280[0]);
        v218 = *(_QWORD *)(v217 + 32);
        v219 = 11;
        v220 = *(_DWORD *)(v218 + 4);
        v193 = v1222;
        v221 = v1248;
        v191 = v198;
        v1248 = 0;
        v14 = v1255;
        v138 = v1262;
      }
      else
      {
        v1277[0] = (void *)257;
        LODWORD(v1277[1]) = 0;
        LODWORD(v1280[0]) = v193;
        LODWORD(v1281) = 0;
        LODWORD(v1282) = v192;
        v1283 = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 76, v1277, 1, v1280, 2, 0);
        v223 = *(_DWORD *)(*(_QWORD *)(v222 + 32) + 4);
        v1277[0] = (void *)16777236;
        LODWORD(v1277[1]) = 0;
        v1280[0] = &v1281;
        LODWORD(v1281) = v223;
        DWORD2(v1282) = 0;
        v1283 = v194;
        LODWORD(v1285) = 0;
        v1280[1] = (void *)0x800000002;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, uint64_t *, uint64_t, _QWORD))*v1266 + 4))(v1266, 77, v1277, 1, &v1281, 2, 0);
        v225 = v224;
        if (v1280[0] != &v1281)
          free(v1280[0]);
        v221 = 0;
        v220 = *(_DWORD *)(*(_QWORD *)(v225 + 32) + 4);
        v219 = 8;
      }
      if (v220 < 0 && (v220 & 0x7FFFFFFFu) < *(_DWORD *)(v138 + 432))
        v226 = *(void **)(*(_QWORD *)(v138 + 424) + 8 * (v220 & 0x7FFFFFFF));
      else
        v226 = 0;
      v1280[0] = v226;
      v228 = sub_1C4825F50((unint64_t *)v1280);
      if ((_DWORD)v227 == 1)
      v1277[0] = *(void **)(v1217[30] + 8 * sub_1C4C91724(v228));
      LODWORD(v1277[1]) = 2;
      LODWORD(v1280[0]) = v220;
      LODWORD(v1281) = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 19, v1277, 1, v1280, 1, 0);
      v230 = *(_DWORD *)(*(_QWORD *)(v229 + 32) + 4);
      sub_1C4AD6390((uint64_t)v1266, 2u);
      v231 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*v1266
                                       + 4))(v1266, 4998, 0, 0, 0, 0, 0);
      v233 = v232;
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v232, v231, (const llvm::MachineOperand *)v1280);
      v1280[1] = 0;
      LODWORD(v1281) = 64;
      LODWORD(v1282) = 0;
      HIDWORD(v1280[0]) = v1236;
      LODWORD(v1280[0]) = 775;
      llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v1242;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
      v1277[0] = v231;
      v1277[1] = v233;
      if (*((_BYTE *)v14 + 1631) || *((_BYTE *)v14 + 1633))
      {
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
        v1281 = 0;
        v1280[1] = 0;
        HIDWORD(v1280[0]) = v221;
        LODWORD(v1280[0]) = 0;
        *(_QWORD *)&v1282 = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
      }
      else
      {
        v1281 = 0;
        v1280[1] = 0;
        HIDWORD(v1280[0]) = v1248;
        LODWORD(v1280[0]) = 0;
        *(_QWORD *)&v1282 = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
        v1281 = 0;
        v1280[1] = 0;
        HIDWORD(v1280[0]) = v191;
        LODWORD(v1280[0]) = 0;
        *(_QWORD *)&v1282 = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
        v1281 = 0;
        v1280[1] = 0;
        llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
        LODWORD(v1280[0]) = 1;
      }
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v230;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v233, v231, (const llvm::MachineOperand *)v1280);
      sub_1C49400A8((uint64_t)v1277);
      v139 = v1227;
      v234 = *(_QWORD *)(v1227 + 48);
      if ((v234 & 7) != 0)
      {
        v235 = *(llvm::MachineMemOperand **)((v234 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v235 = (llvm::MachineMemOperand *)(v234 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v1227 + 48) = v234 & 0xFFFFFFFFFFFFFFF8;
      }
      llvm::MachineInstr::addMemOperand(v233, v231, v235);
      if ((v1276 - 2775) <= 4 && ((1 << (v1276 + 41)) & 0x19) != 0)
      {
        v236 = *(unsigned int *)(*(_QWORD *)(v1227 + 32) + 32 * (v219 + 7) + 4);
        if ((v236 & 0x80000000) != 0)
          v237 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v236 & 0x7FFFFFFF) + 8);
        else
          v237 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v236);
        v414 = *v237;
        if ((*(_BYTE *)(v414 + 3) & 1) == 0)
          v414 = *(_QWORD *)(v414 + 24);
        v415 = (llvm::MachineMemOperand *)sub_1C4A748F4(v1227, v219 + 2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v414 + 8) + 32) + 48), v1262);
        llvm::MachineInstr::addMemOperand(v233, v231, v415);
        v416 = *(unsigned int *)(*(_QWORD *)(v1227 + 32) + 32 * (v219 + 8) + 4);
        if ((v416 & 0x80000000) != 0)
          v417 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v416 & 0x7FFFFFFF) + 8);
        else
          v417 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v416);
        v418 = *v417;
        if ((*(_BYTE *)(v418 + 3) & 1) == 0)
          v418 = *(_QWORD *)(v418 + 24);
        v419 = (llvm::MachineMemOperand *)sub_1C4A748F4(v1227, v219 | 4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v418 + 8) + 32) + 48), v1262);
        llvm::MachineInstr::addMemOperand(v233, v231, v419);
      }
      v420 = atomic_load((unsigned __int8 *)&qword_1ED7ED8A0);
      if ((v420 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED8A0))
      {
        byte_1ED7ED898 = 0;
        __cxa_guard_release(&qword_1ED7ED8A0);
      }
      if (!byte_1ED7ED898)
        sub_1C4A74D38((uint64_t)v1266, v1227, v193, v219, v1276 == 2777);
      v146 = *(_QWORD *)(v1227 + 24);
      v147 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v147 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v147 = v1227;
          do
            v147 = *(_QWORD *)(v147 + 8);
          while ((*(_WORD *)(v147 + 44) & 8) != 0);
        }
      }
      goto LABEL_643;
    case 2783:
      v547 = v1266;
      v549 = sub_1C55437B8(v1266, 0x165Cu);
      v550 = (unint64_t *)v548;
      v551 = (unint64_t *)v1266[6];
      v552 = *((_QWORD *)v1266[5] + 5);
      *(_QWORD *)(v548 + 24) = v552;
      v553 = *(_QWORD *)(v552 + 32);
      v554 = *(unsigned int *)(v548 + 40);
      if ((_DWORD)v554)
      {
        v1131 = *(_QWORD *)(v548 + 32);
        v1132 = *(_QWORD *)(v553 + 40);
        v1133 = 32 * v554;
        v547 = v1266;
        do
        {
          if (!*(_BYTE *)v1131)
          {
            v1134 = *(unsigned int *)(v1131 + 4);
            if ((int)v1134 >= 0)
              v1135 = (uint64_t *)(*(_QWORD *)(v1132 + 272) + 8 * v1134);
            else
              v1135 = (uint64_t *)(*(_QWORD *)(v1132 + 24) + 16 * (v1134 & 0x7FFFFFFF) + 8);
            v1136 = *v1135;
            if (*v1135)
            {
              v1137 = *(_QWORD *)(v1136 + 16);
              *(_QWORD *)(v1136 + 16) = v1131;
              *(_QWORD *)(v1131 + 16) = v1137;
              if ((*(_BYTE *)(v1131 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1131 + 24) = v1136;
              }
              else
              {
                *(_QWORD *)(v1131 + 24) = 0;
                v1135 = (uint64_t *)(v1137 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1131 + 16) = v1131;
              *(_QWORD *)(v1131 + 24) = 0;
            }
            *v1135 = v1131;
          }
          v1131 += 32;
          v1133 -= 32;
        }
        while (v1133);
      }
      v555 = *(_QWORD *)(v553 + 728);
      if (v555)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v555 + 24))(v555, v548);
      v556 = *v551 & 0xFFFFFFFFFFFFFFF8;
      *v550 = v556 | *v550 & 7;
      v550[1] = (unint64_t)v551;
      *(_QWORD *)(v556 + 8) = v550;
      *v551 = *v551 & 7 | (unint64_t)v550;
      v557 = v547[7];
      if (v557)
        (*(void (**)(unsigned __int8 *, unint64_t *))(*(_QWORD *)v557 + 24))(v557, v550);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v550, v549, (const llvm::MachineOperand *)v1280);
      v558 = 36;
      while (1)
      {
        v559 = *(unsigned int *)(*(_QWORD *)(v1227 + 32) + v558);
        if ((v559 & 0x80000000) != 0)
          v560 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v559 & 0x7FFFFFFF) + 8);
        else
          v560 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v559);
        v561 = *v560;
        if ((*(_BYTE *)(v561 + 3) & 1) == 0)
          v561 = *(_QWORD *)(v561 + 24);
        v562 = *(_QWORD *)(v561 + 8);
        v563 = **(unsigned __int16 **)(v562 + 16);
        if (v563 > 0x50)
          break;
        if (v563 == 71)
          goto LABEL_548;
        if (v563 == 80)
        {
          v564 = *(unsigned int *)(*(_QWORD *)(v562 + 32) + 36);
          if ((v564 & 0x80000000) != 0)
            v565 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v564 & 0x7FFFFFFF) + 8);
          else
            v565 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v564);
          v568 = *v565;
          if ((*(_BYTE *)(v568 + 3) & 1) == 0)
            v568 = *(_QWORD *)(v568 + 24);
          v562 = *(_QWORD *)(v568 + 8);
LABEL_548:
          v569 = *(_QWORD *)(*(_QWORD *)(v562 + 32) + 48);
          v1280[1] = 0;
          v1281 = v569;
          LODWORD(v1282) = 0;
          v1280[0] = (void *)10;
LABEL_556:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v550, v549, (const llvm::MachineOperand *)v1280);
        }
LABEL_557:
        v558 += 32;
        if (v558 == 132)
        {
          v78 = v1227;
          v79 = *(_QWORD *)(v1227 + 24);
          v80 = v1227;
          if ((*(_BYTE *)v1227 & 4) == 0)
          {
            v80 = v1227;
            if ((*(_WORD *)(v1227 + 44) & 8) != 0)
            {
              v80 = v1227;
              do
                v80 = *(_QWORD *)(v80 + 8);
              while ((*(_WORD *)(v80 + 44) & 8) != 0);
            }
          }
          goto LABEL_944;
        }
      }
      if (v563 == 81)
      {
        v566 = *(unsigned int *)(*(_QWORD *)(v562 + 32) + 36);
        if ((v566 & 0x80000000) != 0)
          v567 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v566 & 0x7FFFFFFF) + 8);
        else
          v567 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v566);
        v570 = *v567;
        if ((*(_BYTE *)(v570 + 3) & 1) == 0)
          v570 = *(_QWORD *)(v570 + 24);
        v562 = *(_QWORD *)(v570 + 8);
      }
      else if (v563 != 120)
      {
        goto LABEL_557;
      }
      v571 = *(_QWORD *)(*(_QWORD *)(v562 + 32) + 48);
      v572 = (uint64_t *)(v571 + 24);
      if (*(_DWORD *)(v571 + 32) >= 0x41u)
        v572 = (uint64_t *)*v572;
      v573 = *v572;
      LODWORD(v1280[0]) = 1;
      v1280[1] = 0;
      v1281 = v573;
      goto LABEL_556;
    case 2787:
    case 2788:
    case 2791:
      if (!*((_BYTE *)v14 + 1628) && !*((_BYTE *)v14 + 1629) && !*((_BYTE *)v14 + 1631) && !*((_BYTE *)v14 + 1633))
        return 0;
      v162 = 96;
      if (v13 == 2787)
        v162 = 64;
      v163 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + v162 + 4);
      v1277[0] = (void *)129;
      LODWORD(v1277[1]) = 0;
      LODWORD(v1280[0]) = v163;
      LODWORD(v1281) = 0;
      v164 = v1266;
      sub_1C5546EF4((uint64_t *)v1266, (uint64_t *)v1277, (int *)v1280);
      v166 = *(_DWORD *)(*(_QWORD *)(v165 + 32) + 4);
      if (v13 == 2787)
      {
        v1280[0] = (void *)129;
        LODWORD(v1280[1]) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))*v1266 + 4))(v1266, 68, v1280, 1, 0, 0, 0);
        v167 = 0;
        v169 = *(_DWORD *)(*(_QWORD *)(v168 + 32) + 4);
        v1277[0] = (void *)8388636;
        v170 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 36);
        LODWORD(v1277[1]) = 0;
        __src[0] = (void *)__PAIR64__(v170, v169);
        LODWORD(__src[1]) = v166;
        v1280[0] = &v1281;
        v1280[1] = (void *)0x800000000;
        v171 = 2;
        do
        {
          v172 = &v1280[v171];
          *(_DWORD *)v172 = *(_DWORD *)((char *)__src + v167);
          *((_DWORD *)v172 + 4) = 0;
          v171 += 3;
          v167 += 4;
        }
        while (v167 != 12);
        LODWORD(v1280[1]) += 3;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, uint64_t *))*v1266 + 4))(v1266, 77, v1277, 1, &v1281);
        v174 = v173;
        if (v1280[0] != &v1281)
          free(v1280[0]);
        v175 = 9206;
        v176 = v1227;
      }
      else
      {
        v421 = 0;
        v422 = *(_QWORD *)(v1227 + 32);
        v1277[0] = (void *)8388636;
        v423 = *(_DWORD *)(v422 + 68);
        LODWORD(v422) = *(_DWORD *)(v422 + 36);
        LODWORD(v1277[1]) = 0;
        __src[0] = (void *)__PAIR64__(v422, v423);
        LODWORD(__src[1]) = v166;
        v1280[0] = &v1281;
        v1280[1] = (void *)0x800000000;
        v424 = 2;
        do
        {
          v425 = &v1280[v424];
          *(_DWORD *)v425 = *(_DWORD *)((char *)__src + v421);
          *((_DWORD *)v425 + 4) = 0;
          v424 += 3;
          v421 += 4;
        }
        while (v421 != 12);
        LODWORD(v1280[1]) += 3;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, uint64_t *))*v1266 + 4))(v1266, 77, v1277, 1, &v1281);
        v174 = v426;
        if (v1280[0] != &v1281)
          free(v1280[0]);
        if (v13 == 2791)
          v175 = 9208;
        else
          v175 = 9207;
        v176 = v1227;
        v164 = v1266;
      }
      v428 = sub_1C55437B8(v164, v175);
      v429 = (unint64_t *)v427;
      v430 = (unint64_t *)v164[6];
      v431 = *((_QWORD *)v164[5] + 5);
      *(_QWORD *)(v427 + 24) = v431;
      v432 = *(_QWORD *)(v431 + 32);
      v433 = *(unsigned int *)(v427 + 40);
      if ((_DWORD)v433)
      {
        v944 = *(_QWORD *)(v427 + 32);
        v945 = *(_QWORD *)(v432 + 40);
        v946 = 32 * v433;
        do
        {
          if (!*(_BYTE *)v944)
          {
            v947 = *(unsigned int *)(v944 + 4);
            if ((int)v947 >= 0)
              v948 = (uint64_t *)(*(_QWORD *)(v945 + 272) + 8 * v947);
            else
              v948 = (uint64_t *)(*(_QWORD *)(v945 + 24) + 16 * (v947 & 0x7FFFFFFF) + 8);
            v949 = *v948;
            if (*v948)
            {
              v950 = *(_QWORD *)(v949 + 16);
              *(_QWORD *)(v949 + 16) = v944;
              *(_QWORD *)(v944 + 16) = v950;
              if ((*(_BYTE *)(v944 + 3) & 1) != 0)
              {
                *(_QWORD *)(v944 + 24) = v949;
              }
              else
              {
                *(_QWORD *)(v944 + 24) = 0;
                v948 = (uint64_t *)(v950 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v944 + 16) = v944;
              *(_QWORD *)(v944 + 24) = 0;
            }
            *v948 = v944;
            v176 = v1227;
            v164 = v1266;
          }
          v944 += 32;
          v946 -= 32;
        }
        while (v946);
      }
      v434 = *(_QWORD *)(v432 + 728);
      if (v434)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v434 + 24))(v434, v427);
      v435 = *v430 & 0xFFFFFFFFFFFFFFF8;
      *v429 = v435 | *v429 & 7;
      v429[1] = (unint64_t)v430;
      *(_QWORD *)(v435 + 8) = v429;
      *v430 = *v430 & 7 | (unint64_t)v429;
      v436 = v164[7];
      if (v436)
        (*(void (**)(unsigned __int8 *, unint64_t *))(*(_QWORD *)v436 + 24))(v436, v429);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v429, v428, (const llvm::MachineOperand *)v1280);
      v437 = *(_DWORD *)(*(_QWORD *)(v174 + 32) + 4);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v437;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v429, v428, (const llvm::MachineOperand *)v1280);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v429, v428, (const llvm::MachineOperand *)v1280);
      sub_1C554AE8C(v429, v1215, v1217);
      v181 = *(_QWORD *)(v176 + 24);
      v182 = v176;
      if ((*(_BYTE *)v176 & 4) == 0)
      {
        v182 = v176;
        if ((*(_WORD *)(v176 + 44) & 8) != 0)
        {
          v182 = v176;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 2792:
      v539 = *(_QWORD *)(v1227 + 32);
      v540 = *(_DWORD *)(v539 + 36);
      if ((v540 & 0x80000000) == 0)
        return 0;
      v541 = *(_DWORD *)(v1262 + 432);
      if ((v540 & 0x7FFFFFFFu) >= v541)
        return 0;
      v542 = *(_QWORD *)(v1262 + 424);
      if (*(_QWORD *)(v542 + 8 * (v540 & 0x7FFFFFFF)) != 16777252)
        return 0;
      v543 = *(_DWORD *)(v539 + 68);
      if ((v543 & 0x80000000) == 0 || (v543 & 0x7FFFFFFFu) >= v541)
        return 0;
      v21 = 0;
      v544 = *(_QWORD *)(v542 + 8 * (v543 & 0x7FFFFFFF));
      if ((v544 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(_QWORD *)(v542 + 8 * (v543 & 0x7FFFFFFF)) & 6) != 2)
        return v21;
      v545 = 35;
      if ((v544 & 4) == 0)
        v545 = 19;
      if (((v544 >> v545) & 0xFFFFFF) != 3)
        return 0;
      v546 = *(_QWORD *)(v1227 + 48);
      if (v546 < 8)
        return 0;
      if ((v546 & 7) != 0)
      {
        v21 = 0;
        if ((*(_QWORD *)(v1227 + 48) & 7) != 3 || (v546 & 0xFFFFFFFFFFFFFFF8) == 0)
          return v21;
        if (*(_DWORD *)(v546 & 0xFFFFFFFFFFFFFFF8) != 1)
          return 0;
      }
      else
      {
        v546 &= 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v1227 + 48) = v546;
      }
      if ((v546 & 7) != 0)
      {
        v1171 = *(llvm::MachineMemOperand **)((v546 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        v1171 = (llvm::MachineMemOperand *)(v546 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v1227 + 48) = v546 & 0xFFFFFFFFFFFFFFF8;
      }
      LODWORD(v1280[0]) = v540;
      LODWORD(v1281) = 0;
      LODWORD(v1277[0]) = v543;
      LODWORD(v1278[0]) = 0;
      sub_1C5546848(v1266, (int *)v1280, (int *)v1277, v1171);
      v1173 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v1173 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v1173 = v1227;
          do
            v1173 = *(_QWORD *)(v1173 + 8);
          while ((*(_WORD *)(v1173 + 44) & 8) != 0);
        }
      }
      v238 = *(_QWORD *)(v1173 + 8);
      v239 = *(_QWORD *)(v1227 + 24) + 40;
      v78 = v1227;
      goto LABEL_945;
    case 2811:
      v176 = v1227;
      v451 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
      v452 = sub_1C4A74814(v1266);
      if (HIDWORD(v452))
      {
        LODWORD(v1277[0]) = v451;
        LODWORD(v1277[1]) = 1;
        LODWORD(v1280[0]) = v452;
        LODWORD(v1281) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 19, v1277, 1, v1280, 1, 0);
      }
      v181 = *(_QWORD *)(v1227 + 24);
      v182 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v182 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v182 = v1227;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 2812:
      v610 = *(_DWORD *)(*(_QWORD *)(v1227 + 32) + 4);
      v611 = (uint64_t *)v1266[1];
      if (sub_1C5EABB98(*(_QWORD *)(*v611 + 40)))
      {
        v612 = sub_1C5EABBE8(v611[43]);
        v1277[0] = (void *)257;
        LODWORD(v1277[1]) = 0;
        v613 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _QWORD, _QWORD, _QWORD))*v1266
                                         + 4))(v1266, 313, v1277, 1, 0, 0, 0);
        v615 = v614;
        LODWORD(v1280[0]) = 1;
        v1280[1] = 0;
        v1281 = (v612 + 4);
        llvm::MachineInstr::addOperand(v614, v613, (const llvm::MachineOperand *)v1280);
        v616 = *(_DWORD *)(*((_QWORD *)v615 + 4) + 4);
        LODWORD(v1277[0]) = v610;
        LODWORD(v1277[1]) = 1;
        LODWORD(v1280[0]) = v616;
        LODWORD(v1281) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266 + 4))(v1266, 19, v1277, 1, v1280, 1, 0);
      }
      v78 = v1227;
      v79 = *(_QWORD *)(v1227 + 24);
      v80 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v80 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v80 = v1227;
          do
            v80 = *(_QWORD *)(v80 + 8);
          while ((*(_WORD *)(v80 + 44) & 8) != 0);
        }
      }
      goto LABEL_944;
    case 2819:
    case 2847:
      if (v13 == 2819)
      {
        v176 = v1227;
        v407 = (uint64_t)v1266;
        if (*((_BYTE *)v14 + 1629) || *((_BYTE *)v14 + 1631))
        {
          v181 = *(_QWORD *)(v1227 + 24);
          v182 = v1227;
          if ((*(_BYTE *)v1227 & 4) == 0)
          {
            v182 = v1227;
            if ((*(_WORD *)(v1227 + 44) & 8) != 0)
            {
              v182 = v1227;
              do
                v182 = *(_QWORD *)(v182 + 8);
              while ((*(_WORD *)(v182 + 44) & 8) != 0);
            }
          }
          goto LABEL_259;
        }
        v631 = 6716;
      }
      else
      {
        v631 = 9205;
        v176 = v1227;
        v407 = (uint64_t)v1266;
      }
      sub_1C4AD6390(v407, 1u);
      v632 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v407 + 32))(v407, v631, 0, 0, 0, 0, 0);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v633, v632, (const llvm::MachineOperand *)v1280);
      v181 = *(_QWORD *)(v176 + 24);
      v182 = v176;
      if ((*(_BYTE *)v176 & 4) == 0)
      {
        v182 = v176;
        if ((*(_WORD *)(v176 + 44) & 8) != 0)
        {
          v182 = v176;
          do
            v182 = *(_QWORD *)(v182 + 8);
          while ((*(_WORD *)(v182 + 44) & 8) != 0);
        }
      }
      goto LABEL_259;
    case 2821:
      v488 = v1266;
      v490 = sub_1C55437B8(v1266, 0x1AB1u);
      v491 = (unint64_t *)v489;
      v492 = (unint64_t *)v1266[6];
      v493 = *((_QWORD *)v1266[5] + 5);
      *(_QWORD *)(v489 + 24) = v493;
      v494 = *(_QWORD *)(v493 + 32);
      v495 = *(unsigned int *)(v489 + 40);
      if ((_DWORD)v495)
      {
        v1117 = *(_QWORD *)(v489 + 32);
        v1118 = *(_QWORD *)(v494 + 40);
        v1119 = 32 * v495;
        v488 = v1266;
        do
        {
          if (!*(_BYTE *)v1117)
          {
            v1120 = *(unsigned int *)(v1117 + 4);
            if ((int)v1120 >= 0)
              v1121 = (uint64_t *)(*(_QWORD *)(v1118 + 272) + 8 * v1120);
            else
              v1121 = (uint64_t *)(*(_QWORD *)(v1118 + 24) + 16 * (v1120 & 0x7FFFFFFF) + 8);
            v1122 = *v1121;
            if (*v1121)
            {
              v1123 = *(_QWORD *)(v1122 + 16);
              *(_QWORD *)(v1122 + 16) = v1117;
              *(_QWORD *)(v1117 + 16) = v1123;
              if ((*(_BYTE *)(v1117 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1117 + 24) = v1122;
              }
              else
              {
                *(_QWORD *)(v1117 + 24) = 0;
                v1121 = (uint64_t *)(v1123 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1117 + 16) = v1117;
              *(_QWORD *)(v1117 + 24) = 0;
            }
            *v1121 = v1117;
          }
          v1117 += 32;
          v1119 -= 32;
        }
        while (v1119);
      }
      v496 = *(_QWORD *)(v494 + 728);
      if (v496)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v496 + 24))(v496, v489);
      v497 = *v492 & 0xFFFFFFFFFFFFFFF8;
      *v491 = v497 | *v491 & 7;
      v491[1] = (unint64_t)v492;
      *(_QWORD *)(v497 + 8) = v491;
      *v492 = *v492 & 7 | (unint64_t)v491;
      v498 = v488[7];
      if (v498)
        (*(void (**)(unsigned __int8 *, unint64_t *))(*(_QWORD *)v498 + 24))(v498, v491);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v491, v490, (const llvm::MachineOperand *)v1280);
      v499 = 36;
      while (1)
      {
        v500 = *(unsigned int *)(*(_QWORD *)(v1227 + 32) + v499);
        if ((v500 & 0x80000000) != 0)
          v501 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v500 & 0x7FFFFFFF) + 8);
        else
          v501 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v500);
        v502 = *v501;
        if ((*(_BYTE *)(v502 + 3) & 1) == 0)
          v502 = *(_QWORD *)(v502 + 24);
        v503 = *(_QWORD *)(v502 + 8);
        v504 = **(unsigned __int16 **)(v503 + 16);
        if (v504 == 80)
          break;
        if (v504 == 120)
        {
          v505 = *(_QWORD *)(*(_QWORD *)(v503 + 32) + 48);
          v506 = (uint64_t *)(v505 + 24);
          if (*(_DWORD *)(v505 + 32) >= 0x41u)
            v506 = (uint64_t *)*v506;
          v507 = *v506;
          LODWORD(v1280[0]) = 1;
          v1280[1] = 0;
          v1281 = v507;
LABEL_469:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v491, v490, (const llvm::MachineOperand *)v1280);
        }
        v499 += 32;
        if (v499 == 132)
        {
          v78 = v1227;
          v79 = *(_QWORD *)(v1227 + 24);
          v80 = v1227;
          if ((*(_BYTE *)v1227 & 4) == 0)
          {
            v80 = v1227;
            if ((*(_WORD *)(v1227 + 44) & 8) != 0)
            {
              v80 = v1227;
              do
                v80 = *(_QWORD *)(v80 + 8);
              while ((*(_WORD *)(v80 + 44) & 8) != 0);
            }
          }
          goto LABEL_944;
        }
      }
      v508 = *(unsigned int *)(*(_QWORD *)(v503 + 32) + 36);
      if ((v508 & 0x80000000) != 0)
        v509 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v508 & 0x7FFFFFFF) + 8);
      else
        v509 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v508);
      v510 = *v509;
      if ((*(_BYTE *)(v510 + 3) & 1) == 0)
        v510 = *(_QWORD *)(v510 + 24);
      v511 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v510 + 8) + 32) + 48);
      v1280[1] = 0;
      v1281 = v511;
      LODWORD(v1282) = 0;
      v1280[0] = (void *)10;
      goto LABEL_469;
    case 2836:
      v515 = v1266;
      v517 = sub_1C55437B8(v1266, 0x21F7u);
      v518 = (unint64_t *)v516;
      v519 = (unint64_t *)v1266[6];
      v520 = *((_QWORD *)v1266[5] + 5);
      *(_QWORD *)(v516 + 24) = v520;
      v521 = *(_QWORD *)(v520 + 32);
      v522 = *(unsigned int *)(v516 + 40);
      if ((_DWORD)v522)
      {
        v1124 = *(_QWORD *)(v516 + 32);
        v1125 = *(_QWORD *)(v521 + 40);
        v1126 = 32 * v522;
        v515 = v1266;
        do
        {
          if (!*(_BYTE *)v1124)
          {
            v1127 = *(unsigned int *)(v1124 + 4);
            if ((int)v1127 >= 0)
              v1128 = (uint64_t *)(*(_QWORD *)(v1125 + 272) + 8 * v1127);
            else
              v1128 = (uint64_t *)(*(_QWORD *)(v1125 + 24) + 16 * (v1127 & 0x7FFFFFFF) + 8);
            v1129 = *v1128;
            if (*v1128)
            {
              v1130 = *(_QWORD *)(v1129 + 16);
              *(_QWORD *)(v1129 + 16) = v1124;
              *(_QWORD *)(v1124 + 16) = v1130;
              if ((*(_BYTE *)(v1124 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1124 + 24) = v1129;
              }
              else
              {
                *(_QWORD *)(v1124 + 24) = 0;
                v1128 = (uint64_t *)(v1130 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1124 + 16) = v1124;
              *(_QWORD *)(v1124 + 24) = 0;
            }
            *v1128 = v1124;
          }
          v1124 += 32;
          v1126 -= 32;
        }
        while (v1126);
      }
      v523 = *(_QWORD *)(v521 + 728);
      if (v523)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v523 + 24))(v523, v516);
      v524 = *v519 & 0xFFFFFFFFFFFFFFF8;
      *v518 = v524 | *v518 & 7;
      v518[1] = (unint64_t)v519;
      *(_QWORD *)(v524 + 8) = v518;
      *v519 = *v519 & 7 | (unint64_t)v518;
      v525 = v515[7];
      if (v525)
        (*(void (**)(unsigned __int8 *, unint64_t *))(*(_QWORD *)v525 + 24))(v525, v518);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v518, v517, (const llvm::MachineOperand *)v1280);
      v526 = 36;
      while (1)
      {
        v527 = *(unsigned int *)(*(_QWORD *)(v1227 + 32) + v526);
        if ((v527 & 0x80000000) != 0)
          v528 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v527 & 0x7FFFFFFF) + 8);
        else
          v528 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v527);
        v529 = *v528;
        if ((*(_BYTE *)(v529 + 3) & 1) == 0)
          v529 = *(_QWORD *)(v529 + 24);
        v530 = *(_QWORD *)(v529 + 8);
        v531 = **(unsigned __int16 **)(v530 + 16);
        if (v531 == 80)
          break;
        if (v531 == 120)
        {
          v532 = *(_QWORD *)(*(_QWORD *)(v530 + 32) + 48);
          v533 = (uint64_t *)(v532 + 24);
          if (*(_DWORD *)(v532 + 32) >= 0x41u)
            v533 = (uint64_t *)*v533;
          v534 = *v533;
          LODWORD(v1280[0]) = 1;
          v1280[1] = 0;
          v1281 = v534;
LABEL_500:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v518, v517, (const llvm::MachineOperand *)v1280);
        }
        v526 += 32;
        if (v526 == 260)
        {
          v78 = v1227;
          v79 = *(_QWORD *)(v1227 + 24);
          v80 = v1227;
          if ((*(_BYTE *)v1227 & 4) == 0)
          {
            v80 = v1227;
            if ((*(_WORD *)(v1227 + 44) & 8) != 0)
            {
              v80 = v1227;
              do
                v80 = *(_QWORD *)(v80 + 8);
              while ((*(_WORD *)(v80 + 44) & 8) != 0);
            }
          }
          goto LABEL_944;
        }
      }
      v535 = *(unsigned int *)(*(_QWORD *)(v530 + 32) + 36);
      if ((v535 & 0x80000000) != 0)
        v536 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v535 & 0x7FFFFFFF) + 8);
      else
        v536 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v535);
      v537 = *v536;
      if ((*(_BYTE *)(v537 + 3) & 1) == 0)
        v537 = *(_QWORD *)(v537 + 24);
      v538 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v537 + 8) + 32) + 48);
      v1280[1] = 0;
      v1281 = v538;
      LODWORD(v1282) = 0;
      v1280[0] = (void *)10;
      goto LABEL_500;
    case 2837:
      v676 = v1266;
      v678 = sub_1C55437B8(v1266, 0x21F8u);
      v679 = (unint64_t *)v677;
      v680 = (unint64_t *)v1266[6];
      v681 = *((_QWORD *)v1266[5] + 5);
      *(_QWORD *)(v677 + 24) = v681;
      v682 = *(_QWORD *)(v681 + 32);
      v683 = *(unsigned int *)(v677 + 40);
      if ((_DWORD)v683)
      {
        v1152 = *(_QWORD *)(v677 + 32);
        v1153 = *(_QWORD *)(v682 + 40);
        v1154 = 32 * v683;
        v676 = v1266;
        do
        {
          if (!*(_BYTE *)v1152)
          {
            v1155 = *(unsigned int *)(v1152 + 4);
            if ((int)v1155 >= 0)
              v1156 = (uint64_t *)(*(_QWORD *)(v1153 + 272) + 8 * v1155);
            else
              v1156 = (uint64_t *)(*(_QWORD *)(v1153 + 24) + 16 * (v1155 & 0x7FFFFFFF) + 8);
            v1157 = *v1156;
            if (*v1156)
            {
              v1158 = *(_QWORD *)(v1157 + 16);
              *(_QWORD *)(v1157 + 16) = v1152;
              *(_QWORD *)(v1152 + 16) = v1158;
              if ((*(_BYTE *)(v1152 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1152 + 24) = v1157;
              }
              else
              {
                *(_QWORD *)(v1152 + 24) = 0;
                v1156 = (uint64_t *)(v1158 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1152 + 16) = v1152;
              *(_QWORD *)(v1152 + 24) = 0;
            }
            *v1156 = v1152;
          }
          v1152 += 32;
          v1154 -= 32;
        }
        while (v1154);
      }
      v684 = *(_QWORD *)(v682 + 728);
      if (v684)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v684 + 24))(v684, v677);
      v685 = *v680 & 0xFFFFFFFFFFFFFFF8;
      *v679 = v685 | *v679 & 7;
      v679[1] = (unint64_t)v680;
      *(_QWORD *)(v685 + 8) = v679;
      *v680 = *v680 & 7 | (unint64_t)v679;
      v686 = v676[7];
      if (v686)
        (*(void (**)(unsigned __int8 *, unint64_t *))(*(_QWORD *)v686 + 24))(v686, v679);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v679, v678, (const llvm::MachineOperand *)v1280);
      v687 = 36;
      while (1)
      {
        v688 = *(unsigned int *)(*(_QWORD *)(v1227 + 32) + v687);
        if ((v688 & 0x80000000) != 0)
          v689 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v688 & 0x7FFFFFFF) + 8);
        else
          v689 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v688);
        v690 = *v689;
        if ((*(_BYTE *)(v690 + 3) & 1) == 0)
          v690 = *(_QWORD *)(v690 + 24);
        v691 = *(_QWORD *)(v690 + 8);
        v692 = **(unsigned __int16 **)(v691 + 16);
        if (v692 == 80)
          break;
        if (v692 == 120)
        {
          v693 = *(_QWORD *)(*(_QWORD *)(v691 + 32) + 48);
          v694 = (uint64_t *)(v693 + 24);
          if (*(_DWORD *)(v693 + 32) >= 0x41u)
            v694 = (uint64_t *)*v694;
          v695 = *v694;
          LODWORD(v1280[0]) = 1;
          v1280[1] = 0;
          v1281 = v695;
LABEL_715:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v679, v678, (const llvm::MachineOperand *)v1280);
        }
        v687 += 32;
        if (v687 == 196)
        {
          v78 = v1227;
          v79 = *(_QWORD *)(v1227 + 24);
          v80 = v1227;
          if ((*(_BYTE *)v1227 & 4) == 0)
          {
            v80 = v1227;
            if ((*(_WORD *)(v1227 + 44) & 8) != 0)
            {
              v80 = v1227;
              do
                v80 = *(_QWORD *)(v80 + 8);
              while ((*(_WORD *)(v80 + 44) & 8) != 0);
            }
          }
          goto LABEL_944;
        }
      }
      v696 = *(unsigned int *)(*(_QWORD *)(v691 + 32) + 36);
      if ((v696 & 0x80000000) != 0)
        v697 = (uint64_t *)(*(_QWORD *)(v1262 + 24) + 16 * (v696 & 0x7FFFFFFF) + 8);
      else
        v697 = (uint64_t *)(*(_QWORD *)(v1262 + 272) + 8 * v696);
      v698 = *v697;
      if ((*(_BYTE *)(v698 + 3) & 1) == 0)
        v698 = *(_QWORD *)(v698 + 24);
      v699 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v698 + 8) + 32) + 48);
      v1280[1] = 0;
      v1281 = v699;
      LODWORD(v1282) = 0;
      v1280[0] = (void *)10;
      goto LABEL_715;
    case 2846:
      v600 = *(_QWORD *)(v1227 + 32);
      v601 = *(_DWORD *)(v600 + 36);
      if (*(_BYTE *)(v600 + 32) != 7)
      {
        v601 = sub_1C4A73FE0(*(_DWORD *)(v600 + 36), v1262, 0) >> 1;
        v600 = *(_QWORD *)(v1227 + 32);
      }
      v602 = *(_DWORD *)(v600 + 68);
      sub_1C4AD6390((uint64_t)v1266, 1u);
      v603 = (llvm::MachineFunction *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*v1266
                                       + 4))(v1266, 9204, 0, 0, 0, 0, 0);
      v605 = v604;
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v604, v603, (const llvm::MachineOperand *)v1280);
      v1280[1] = 0;
      LODWORD(v1281) = 64;
      LODWORD(v1282) = 0;
      HIDWORD(v1280[0]) = v601;
      LODWORD(v1280[0]) = 775;
      llvm::MachineInstr::addOperand(v605, v603, (const llvm::MachineOperand *)v1280);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v605, v603, (const llvm::MachineOperand *)v1280);
      v1281 = 0;
      v1280[1] = 0;
      HIDWORD(v1280[0]) = v602;
      LODWORD(v1280[0]) = 0;
      *(_QWORD *)&v1282 = 0;
      llvm::MachineInstr::addOperand(v605, v603, (const llvm::MachineOperand *)v1280);
      LODWORD(v1280[0]) = 1;
      v1281 = 0;
      v1280[1] = 0;
      llvm::MachineInstr::addOperand(v605, v603, (const llvm::MachineOperand *)v1280);
      v1280[0] = v603;
      v1280[1] = v605;
      sub_1C49400A8((uint64_t)v1280);
      v79 = *(_QWORD *)(v1227 + 24);
      v80 = v1227;
      v78 = v1227;
      if ((*(_BYTE *)v1227 & 4) == 0)
      {
        v80 = v1227;
        if ((*(_WORD *)(v1227 + 44) & 8) != 0)
        {
          v80 = v1227;
          do
            v80 = *(_QWORD *)(v80 + 8);
          while ((*(_WORD *)(v80 + 44) & 8) != 0);
        }
      }
      goto LABEL_944;
    default:
      if (v13 != 280)
      {
        if (v13 != 296)
          return v21;
        v243 = *(_QWORD *)(v1227 + 32);
        v244 = *(_DWORD *)(v243 + 4);
        v245 = *(_DWORD *)(v243 + 68);
        if (v244 < 0)
        {
          v247 = v1266;
          if ((v244 & 0x7FFFFFFFu) >= *(_DWORD *)(v1262 + 432))
            v246 = 0;
          else
            v246 = *(void **)(*(_QWORD *)(v1262 + 424) + 8 * (v244 & 0x7FFFFFFF));
        }
        else
        {
          v246 = 0;
          v247 = v1266;
        }
        __src[0] = v246;
        LODWORD(__src[1]) = 0;
        v1314 = v246;
        LODWORD(v1315) = 0;
        LODWORD(v1277[0]) = v245;
        LODWORD(v1278[0]) = 0;
        v1280[0] = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v247
                            + 4))(v247, 184, &v1314, 1, v1277, 1, 0);
        v1280[1] = v941;
        LODWORD(v1281) = 1;
        v942 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v247
                        + 4))(v247, 218, __src, 1, v1280, 1, 0);
        LODWORD(v1277[0]) = v244;
        LODWORD(v1277[1]) = 1;
        v1280[0] = v942;
        v1280[1] = v943;
        LODWORD(v1281) = 1;
        LODWORD(v1282) = v245;
        v1283 = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v247 + 4))(v247, 185, v1277, 1, v1280, 2, 0);
        v78 = v1227;
        v79 = *(_QWORD *)(v1227 + 24);
        v80 = v1227;
        if ((*(_BYTE *)v1227 & 4) == 0)
        {
          v80 = v1227;
          if ((*(_WORD *)(v1227 + 44) & 8) != 0)
          {
            v80 = v1227;
            do
              v80 = *(_QWORD *)(v80 + 8);
            while ((*(_WORD *)(v80 + 44) & 8) != 0);
          }
        }
LABEL_944:
        v238 = *(_QWORD *)(v80 + 8);
        v239 = v79 + 40;
        goto LABEL_945;
      }
      v720 = (uint64_t)v1266;
      v721 = *(_QWORD *)(v1227 + 32);
      v722 = *(unsigned int *)(v721 + 4);
      if ((v722 & 0x80000000) != 0)
      {
        v724 = (_QWORD *)v1262;
        if ((v722 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v1262 + 432))
          v723 = 0;
        else
          v723 = *(void **)(*(_QWORD *)(v1262 + 424) + 8 * (v722 & 0x7FFFFFFF));
      }
      else
      {
        v723 = 0;
        v724 = (_QWORD *)v1262;
      }
      v840 = ***(llvm::ConstantFP ****)v1266[1];
      v1295 = (unint64_t)v723;
      v1311 = v723;
      v841 = v721 + 32 * (v10 + 1);
      v842 = *(unsigned int *)(v841 + 4);
      if ((v842 & 0x80000000) != 0)
        v843 = (uint64_t *)(v724[3] + 16 * (v842 & 0x7FFFFFFF) + 8);
      else
        v843 = (uint64_t *)(v724[34] + 8 * v842);
      v844 = *v843;
      v1233 = v722;
      if (!v844)
        goto LABEL_870;
      if ((*(_BYTE *)(v844 + 3) & 1) == 0 && ((v844 = *(_QWORD *)(v844 + 24)) == 0 || (*(_BYTE *)(v844 + 3) & 1) == 0)
        || (v1196 = *(_QWORD *)(v844 + 8)) == 0)
      {
        v724 = (_QWORD *)v1262;
        v720 = (uint64_t)v1266;
        goto LABEL_870;
      }
      v1197 = **(unsigned __int16 **)(v1196 + 16);
      if (v1197 == 179)
      {
        v724 = (_QWORD *)v1262;
        v720 = (uint64_t)v1266;
        if ((v1279 & 1) == 0 && (*(_WORD *)(v1227 + 44) & 0x200) == 0)
        {
LABEL_870:
          v846 = sub_1C4825F50(&v1295);
          if ((_DWORD)v845 == 1)
          {
            v1199 = v846;
            v846 = v1199;
          }
          v847 = &unk_1C866F184;
          v1216 = v846;
          if (v846 == 16)
            v848 = &unk_1C866F15C;
          else
            v848 = &unk_1C866F184;
          v1214 = v848;
          v850 = sub_1C4825F50((unint64_t *)&v1311);
          if ((_DWORD)v849 == 1)
          v1220 = v850;
          if (v850 == 16)
            v847 = &unk_1C866F15C;
          v852 = sub_1C4825F50(&v1295);
          if ((_DWORD)v851 == 1)
          v1252 = (llvm::ConstantFP *)v841;
          v853 = v1227;
          if (v852 == 16)
          {
            v1277[0] = (void *)257;
            LODWORD(v1277[1]) = 0;
            LODWORD(v1280[0]) = *(_DWORD *)(v841 + 4);
            LODWORD(v1281) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 178, v1277, 1, v1280, 1, 0);
            v1252 = *(llvm::ConstantFP **)(v854 + 32);
          }
          v1218 = v847;
          v855 = 0;
          if ((v1279 & 1) == 0 && (*(_WORD *)(v1227 + 44) & 0x200) == 0 && v1295 == 257)
            v855 = v1311 == (void *)257;
          v1277[0] = (void *)257;
          LODWORD(v1277[1]) = 0;
          LODWORD(__src[1]) = 32;
          __src[0] = (void *)0x20000000;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1280[1], (const llvm::APInt **)__src);
          v857 = llvm::ConstantFP::get(v840, (llvm::LLVMContext *)v1280, v856);
          v1226 = (*(uint64_t (**)(uint64_t, void **, llvm::APFloatBase *))(*(_QWORD *)v720 + 24))(v720, v1277, v857);
          v1231 = v858;
          if (v1280[1] == &unk_1C866F1C0)
          {
            sub_1C4773C74(&v1281);
          }
          else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
          {
            MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
          }
          v1244 = v855;
          v1238 = v840;
          if (v855 && (!v1293 || v1294))
          {
            v1277[0] = (void *)257;
            LODWORD(v1277[1]) = 0;
            LODWORD(__src[1]) = 32;
            __src[0] = (void *)1333788672;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1280[1], (const llvm::APInt **)__src);
            v860 = llvm::ConstantFP::get(v840, (llvm::LLVMContext *)v1280, v859);
            v861 = (*(uint64_t (**)(uint64_t, void **, llvm::APFloatBase *))(*(_QWORD *)v720 + 24))(v720, v1277, v860);
            v863 = v862;
            if (v1280[1] == &unk_1C866F1C0)
            {
              sub_1C4773C74(&v1281);
            }
            else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
            {
              MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
            }
            v1277[0] = (void *)257;
            LODWORD(v1277[1]) = 0;
            LODWORD(v1280[0]) = *((_DWORD *)v1252 + 1);
            LODWORD(v1281) = 0;
            *(_QWORD *)&v1282 = v861;
            *((_QWORD *)&v1282 + 1) = v863;
            v1283 = 1;
            v864 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 165, v1277, 1, v1280, 2, 0);
            v1277[0] = (void *)257;
            LODWORD(v1277[1]) = 0;
            LODWORD(v1280[0]) = 4;
            LODWORD(v1281) = 2;
            LODWORD(v1282) = *(_DWORD *)(v841 + 4);
            v1283 = 0;
            v1284 = v1226;
            v1285 = v1231;
            v1286 = 1;
            v1287 = v864;
            v1288 = v865;
            v1289 = 1;
            LODWORD(v1290) = *((_DWORD *)v1252 + 1);
            v1292 = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 51, v1277, 1, v1280, 5, 0);
            v1252 = *(llvm::ConstantFP **)(v866 + 32);
            v853 = v1227;
            v855 = v1244;
          }
          v867 = *(unsigned __int16 *)(v853 + 44) | 0x100000000;
          if (v855)
            v868 = 0x100000000;
          else
            v868 = *(unsigned __int16 *)(v853 + 44) | 0x100000000;
          v1221 = v868;
          if (v1293)
          {
            v1277[0] = (void *)257;
            LODWORD(v1277[1]) = 0;
            LODWORD(v1280[0]) = *((_DWORD *)v1252 + 1);
            LODWORD(v1281) = 0;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t))(*(_QWORD *)v720 + 32))(v720, 357, v1277, 1, v1280, 1);
          }
          else
          {
            v1277[0] = (void *)257;
            LODWORD(v1277[1]) = 0;
            LODWORD(v1280[0]) = *((_DWORD *)v1252 + 1);
            LODWORD(v1281) = 0;
            v870 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t))(*(_QWORD *)v720 + 32))(v720, 333, v1277, 1, v1280, 1);
            v872 = v871;
            if ((sub_1C4A7C510(*(_DWORD *)(v841 + 4), (uint64_t)v724, 0) & 1) != 0)
            {
LABEL_903:
              v1223 = v841;
              v875 = *((_QWORD *)v872 + 4);
              v876 = v1244;
              v1213 = v875;
              if (v1244)
              {
                v1280[0] = (void *)257;
                LODWORD(v1280[1]) = 0;
                v1211 = (void *)sub_1C5545FFC(v720, (unint64_t *)v1280, 0.5);
                v878 = v877;
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                LODWORD(v1280[0]) = *((_DWORD *)v1252 + 1);
                LODWORD(v1281) = 0;
                LODWORD(v1282) = *(_DWORD *)(v875 + 4);
                v1283 = 0;
                v879 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 165, v1277, 1, v1280, 2, 0);
                v881 = v880;
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v1211;
                v1280[1] = v878;
                LODWORD(v1281) = 1;
                LODWORD(v1282) = *(_DWORD *)(v875 + 4);
                v1283 = 0;
                v882 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 165, v1277, 1, v1280, 2, 0);
                v1212 = v4;
                v884 = v883;
                __src[0] = (void *)257;
                LODWORD(__src[1]) = 0;
                v1314 = (void *)257;
                LODWORD(v1315) = 0;
                v1277[0] = v879;
                v1277[1] = v881;
                LODWORD(v1278[0]) = 1;
                v1280[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 177, &v1314, 1, v1277, 1, 0);
                v1280[1] = v885;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v879;
                *((_QWORD *)&v1282 + 1) = v881;
                v1283 = 1;
                LODWORD(v1284) = *((_DWORD *)v1252 + 1);
                v1286 = 0;
                v1210 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 166, __src, 1, v1280, 3, 0);
                v887 = v886;
                __src[0] = (void *)257;
                LODWORD(__src[1]) = 0;
                v1314 = (void *)257;
                LODWORD(v1315) = 0;
                v1277[0] = v879;
                v1277[1] = v881;
                LODWORD(v1278[0]) = 1;
                v1280[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 177, &v1314, 1, v1277, 1, 0);
                v1280[1] = v888;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v882;
                *((_QWORD *)&v1282 + 1) = v884;
                v1283 = 1;
                v1284 = (uint64_t)v1211;
                v1285 = (llvm::ConstantFP *)v878;
                v1286 = 1;
                v889 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 166, __src, 1, v1280, 3, 0);
                v891 = v890;
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v1210;
                v1280[1] = v887;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v882;
                *((_QWORD *)&v1282 + 1) = v884;
                v1283 = 1;
                v1284 = (uint64_t)v879;
                v1285 = (llvm::ConstantFP *)v881;
                v1286 = 1;
                v892 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 166, v1277, 1, v1280, 3, 0);
                v894 = v893;
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v882;
                v1280[1] = v884;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v889;
                *((_QWORD *)&v1282 + 1) = v891;
                v1283 = 1;
                v1284 = (uint64_t)v882;
                v1285 = (llvm::ConstantFP *)v884;
                v4 = v1212;
                v1286 = 1;
                v895 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 166, v1277, 1, v1280, 3, 0);
                v897 = v896;
                __src[0] = (void *)257;
                LODWORD(__src[1]) = 0;
                v1314 = (void *)257;
                LODWORD(v1315) = 0;
                v1277[0] = v892;
                v1277[1] = v894;
                LODWORD(v1278[0]) = 1;
                v1280[0] = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 177, &v1314, 1, v1277, 1, 0);
                v1280[1] = v898;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v892;
                *((_QWORD *)&v1282 + 1) = v894;
                v1283 = 1;
                LODWORD(v1284) = *((_DWORD *)v1252 + 1);
                v1286 = 0;
                v899 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 166, __src, 1, v1280, 3, 0);
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v899;
                v1280[1] = v900;
                LODWORD(v1281) = 1;
                *(_QWORD *)&v1282 = v895;
                *((_QWORD *)&v1282 + 1) = v897;
                v724 = (_QWORD *)v1262;
                v1283 = 1;
                v1284 = (uint64_t)v892;
                v876 = v1244;
                v1285 = (llvm::ConstantFP *)v894;
                v1286 = 1;
                v901 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v720 + 32))(v720, 166, v1277, 1, v1280, 3, 0);
              }
              else
              {
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                LODWORD(v1280[0]) = *(_DWORD *)(v875 + 4);
                LODWORD(v1281) = 0;
                LODWORD(v1282) = *((_DWORD *)v1252 + 1);
                v1283 = 0;
                v901 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v720 + 32))(v720, 165, v1277, 1, v1280, 2, v867);
              }
              v903 = v901;
              v904 = v902;
              if (v1311 == (void *)129)
              {
                v1277[0] = (void *)129;
                LODWORD(v1277[1]) = 0;
                v1280[0] = v901;
                v1280[1] = v902;
                LODWORD(v1281) = 1;
                v903 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                                + 4))(v1266, 179, v1277, 1, v1280, 1, 0);
                v904 = v905;
              }
              if (!v1293)
              {
                v1277[0] = (void *)v1295;
                LODWORD(v1277[1]) = 0;
                BYTE4(v1282) = BYTE4(v1282) & 0xF0 | 3;
                if (v1216 == 16)
                  v906 = -15;
                else
                  v906 = -127;
                LODWORD(v1282) = v906;
                v1280[1] = v1214;
                v1281 = 0;
                sub_1C47A8F34((uint64_t)v1280, 0);
                v908 = llvm::ConstantFP::get(v1238, (llvm::LLVMContext *)v1280, v907);
                v909 = (*((uint64_t (**)(unsigned __int8 **, void **, llvm::APFloatBase *))*v1266 + 3))(v1266, v1277, v908);
                v911 = v910;
                v912 = v4;
                if (v1280[1] == &unk_1C866F1C0)
                {
                  sub_1C4773C74(&v1281);
                }
                else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
                {
                  MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
                }
                v1277[0] = v1311;
                LODWORD(v1277[1]) = 0;
                BYTE4(v1282) = BYTE4(v1282) & 0xF0 | 3;
                if (v1220 == 16)
                  v913 = -15;
                else
                  v913 = -127;
                LODWORD(v1282) = v913;
                v1280[1] = v1218;
                v1281 = 0;
                sub_1C47A8F34((uint64_t)v1280, 0);
                v915 = llvm::ConstantFP::get(v1238, (llvm::LLVMContext *)v1280, v914);
                v916 = (*((uint64_t (**)(unsigned __int8 **, void **, llvm::APFloatBase *))*v1266 + 3))(v1266, v1277, v915);
                v918 = v917;
                if (v1280[1] == &unk_1C866F1C0)
                {
                  sub_1C4773C74(&v1281);
                }
                else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
                {
                  MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
                }
                v1277[0] = v1311;
                LODWORD(v1277[1]) = 0;
                LODWORD(v1280[0]) = 1;
                LODWORD(v1281) = 2;
                LODWORD(v1282) = *(_DWORD *)(v1223 + 4);
                v1283 = 0;
                v1284 = v909;
                v1285 = v911;
                v1286 = 1;
                v1287 = v916;
                v1288 = v918;
                v1289 = 1;
                v1290 = (uint64_t)v903;
                v1291 = v904;
                v1292 = 1;
                v903 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, uint64_t))*v1266
                                + 4))(v1266, 51, v1277, 1, v1280, 5, v1221);
                v904 = v919;
                v724 = (_QWORD *)v1262;
                v4 = v912;
                v876 = v1244;
              }
              if (v876)
              {
                v1277[0] = (void *)257;
                LODWORD(v1277[1]) = 0;
                LODWORD(__src[1]) = 32;
                __src[0] = (void *)931135488;
                llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v1280[1], (const llvm::APInt **)__src);
                v921 = llvm::ConstantFP::get(v1238, (llvm::LLVMContext *)v1280, v920);
                v922 = (*((uint64_t (**)(unsigned __int8 **, void **, llvm::APFloatBase *))*v1266 + 3))(v1266, v1277, v921);
                v924 = v923;
                if (v1280[1] == &unk_1C866F1C0)
                {
                  sub_1C4773C74(&v1281);
                }
                else if ((*((_DWORD *)v1280[1] + 2) - 64) <= 0xFFFFFF7F && v1281)
                {
                  MEMORY[0x1CAA32F9C](v1281, 0x1000C8000313F17);
                }
                if (v1293)
                {
                  v1280[0] = (void *)257;
                  LODWORD(v1280[1]) = 0;
                  v925 = sub_1C5545FFC((uint64_t)v1266, (unint64_t *)v1280, 1.0);
                  v1277[0] = v1311;
                  LODWORD(v1277[1]) = 0;
                  LODWORD(v1280[0]) = 1;
                  LODWORD(v1281) = 2;
                  LODWORD(v1282) = *(_DWORD *)(v1213 + 4);
                  v1283 = 0;
                  v1284 = v925;
                  v1285 = v926;
                  v1286 = 1;
                  LODWORD(v1287) = *((_DWORD *)v1252 + 1);
                  v1289 = 0;
                  v1290 = (uint64_t)v903;
                  v1291 = v904;
                  v1292 = 1;
                  v927 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                                  + 4))(v1266, 51, v1277, 1, v1280, 5, 0);
                  v904 = v928;
                  if (v1294)
                  {
                    v929 = (uint64_t)v927;
                    v1277[0] = (void *)257;
                    LODWORD(v1277[1]) = 0;
                    v1280[0] = v927;
                    v1280[1] = v928;
                    LODWORD(v1281) = 1;
                    *(_QWORD *)&v1282 = v922;
                    *((_QWORD *)&v1282 + 1) = v924;
                    v1283 = 1;
                    v930 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                            + 4))(v1266, 165, v1277, 1, v1280, 2, 0);
                    v1277[0] = v1311;
                    LODWORD(v1277[1]) = 0;
                    LODWORD(v1280[0]) = 4;
                    LODWORD(v1281) = 2;
                    LODWORD(v1282) = *(_DWORD *)(v1223 + 4);
                    v1283 = 0;
                    v1284 = v1226;
                    v1285 = v1231;
                    v1286 = 1;
                    v1287 = v930;
                    v1288 = v931;
                    v1289 = 1;
                    v1290 = v929;
                    v1291 = v904;
                    v1292 = 1;
                    (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                     + 4))(v1266, 51, v1277, 1, v1280, 5, 0);
                    v904 = v932;
                  }
                  v724 = (_QWORD *)v1262;
                }
                else
                {
                  v1277[0] = (void *)257;
                  LODWORD(v1277[1]) = 0;
                  v1280[0] = v903;
                  v1280[1] = v904;
                  LODWORD(v1281) = 1;
                  *(_QWORD *)&v1282 = v922;
                  *((_QWORD *)&v1282 + 1) = v924;
                  v1283 = 1;
                  v933 = (*((uint64_t (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                          + 4))(v1266, 165, v1277, 1, v1280, 2, 0);
                  v1277[0] = v1311;
                  LODWORD(v1277[1]) = 0;
                  LODWORD(v1280[0]) = 4;
                  LODWORD(v1281) = 2;
                  LODWORD(v1282) = *(_DWORD *)(v1223 + 4);
                  v1283 = 0;
                  v1284 = v1226;
                  v1285 = v1231;
                  v1286 = 1;
                  v1287 = v933;
                  v1288 = v934;
                  v1289 = 1;
                  v1290 = (uint64_t)v903;
                  v1291 = v904;
                  v1292 = 1;
                  (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, _QWORD))*v1266
                   + 4))(v1266, 51, v1277, 1, v1280, 5, 0);
                  v904 = v935;
                }
              }
              sub_1C54F8CF8(v4, (uint64_t)v724, v1233);
              v936 = *(_DWORD *)(*((_QWORD *)v904 + 4) + 4);
              v937 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v724 + 16) + 176))(*(_QWORD *)(*v724 + 16));
              if ((v1233 & 0x80000000) != 0)
                v938 = (uint64_t *)(v724[3] + 16 * (v1233 & 0x7FFFFFFF) + 8);
              else
                v938 = (uint64_t *)(v724[34] + 8 * v1233);
              v939 = *v938;
              if (*v938)
              {
                do
                {
                  v940 = *(_QWORD *)(v939 + 24);
                  if (v936 - 1 <= 0x3FFFFFFE)
                    llvm::MachineOperand::substPhysReg((unsigned int *)v939, v936, v937);
                  else
                    llvm::MachineOperand::setReg(v939, v936);
                  v939 = v940;
                }
                while (v940);
              }
              sub_1C54F8DA0((uint64_t)v4);
              v78 = v1227;
              v79 = *(_QWORD *)(v1227 + 24);
              v80 = v1227;
              if ((*(_BYTE *)v1227 & 4) == 0)
              {
                v80 = v1227;
                if ((*(_WORD *)(v1227 + 44) & 8) != 0)
                {
                  v80 = v1227;
                  do
                    v80 = *(_QWORD *)(v80 + 8);
                  while ((*(_WORD *)(v80 + 44) & 8) != 0);
                }
              }
              goto LABEL_944;
            }
            v1277[0] = (void *)257;
            LODWORD(v1277[1]) = 0;
            LODWORD(v1280[0]) = 1;
            LODWORD(v1281) = 2;
            LODWORD(v1282) = *(_DWORD *)(v841 + 4);
            v1283 = 0;
            __src[0] = (void *)v1295;
            LODWORD(__src[1]) = 0;
            v1284 = sub_1C5545FFC(v720, (unint64_t *)__src, 0.0);
            v1285 = v873;
            v1286 = 1;
            v1314 = (void *)257;
            LODWORD(v1315) = 0;
            v1287 = sub_1C5545FFC(v720, (unint64_t *)&v1314, 0.0);
            v1288 = v874;
            v1289 = 1;
            v1290 = v870;
            v1291 = v872;
            v1292 = 1;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t))(*(_QWORD *)v720 + 32))(v720, 51, v1277, 1, v1280, 5);
          }
          v872 = v869;
          goto LABEL_903;
        }
        v841 = *(_QWORD *)(v1196 + 32) + 32;
        v1198 = 257;
      }
      else
      {
        v724 = (_QWORD *)v1262;
        v720 = (uint64_t)v1266;
        if (v1197 != 178)
          goto LABEL_870;
        v841 = *(_QWORD *)(v1196 + 32) + 32;
        v1198 = 129;
      }
      v1295 = v1198;
      goto LABEL_870;
  }
}

uint64_t sub_1C4A73508(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5, uint64_t a6)
{
  int v7;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t i;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned __int16 v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _DWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  BOOL v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unsigned int GenericVirtualRegister;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  char v106;
  _BYTE v107[4];
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[16];
  uint64_t v120;
  int v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;

  v7 = a5;
  v128 = *MEMORY[0x1E0C80C00];
  llvm::SampleInfo::SampleInfo((uint64_t)v107, a4, a5);
  v11 = *(_QWORD *)(a1 + 32) + 32 * v109;
  v13 = (unsigned int *)(v11 + 4);
  v12 = *(_DWORD *)(v11 + 4);
  if (v12 < 0 && (v14 = v12 & 0x7FFFFFFF, v14 < *(_DWORD *)(a2 + 432)))
    v15 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v14);
  else
    v15 = 0;
  a3[5] = *(_QWORD *)(a1 + 24);
  a3[6] = a1;
  v16 = (unsigned __int8 **)(a1 + 56);
  v17 = (unsigned __int8 **)(a3 + 4);
  if ((uint64_t *)(a1 + 56) != a3 + 4)
  {
    if (*v17)
      llvm::MetadataTracking::untrack((uint64_t)(a3 + 4), *v17);
    v18 = *v16;
    *v17 = *v16;
    if (v18)
      llvm::MetadataTracking::track((uint64_t)(a3 + 4), v18, 2);
  }
  if ((v15 & 0xFFFFFFFFFFFFFFF9) != 0 && (v15 & 2) != 0 && (v15 & 4) == 0)
  {
    v19 = *v13;
    v20 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (*v13 & 0x7FFFFFFF) + 8);
    if ((*v13 & 0x80000000) == 0)
      v20 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v19);
    v21 = *v20;
    if ((*(_BYTE *)(v21 + 3) & 1) == 0)
      v21 = *(_QWORD *)(v21 + 24);
    if (**(_WORD **)(*(_QWORD *)(v21 + 8) + 16) == 193)
    {
      v22 = sub_1C4A73FE0(v19, a2, 0);
      if (HIDWORD(v22))
      {
        v122 = (void *)257;
        LODWORD(v123) = 0;
        sub_1C5544694((uint64_t)a3, (unint64_t *)&v122, v22);
        goto LABEL_22;
      }
      v19 = *v13;
    }
    v104 = 513;
    v105 = 0;
    LODWORD(v122) = v19;
    LODWORD(v124) = 0;
    v23 = (void *)sub_1C5546EF4(a3, &v104, (int *)&v122);
    v104 = 257;
    v105 = 0;
    v122 = v23;
    v123 = v24;
    LODWORD(v124) = 1;
    (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 119, &v104, 1, &v122, 1, 0);
LABEL_22:
    v26 = v25;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 32))(a6, a1);
    llvm::MachineOperand::setReg(v11, *(_DWORD *)(*(_QWORD *)(v26 + 32) + 4));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, a1);
  }
  v27 = *(_QWORD *)(a1 + 32);
  if (v110 != -1)
  {
    v28 = v27 + 32 * v110;
    v29 = *(_DWORD *)(v28 + 4);
    if (v29 < 0 && (v29 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432))
    {
      v30 = (*(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v29 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0
         && (*(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v29 & 0x7FFFFFFF)) & 6) == 2;
      if (v30)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 16 * (v29 & 0x7FFFFFFF) + 8);
        if ((*(_BYTE *)(v31 + 3) & 1) == 0)
          v31 = *(_QWORD *)(v31 + 24);
        if (**(_WORD **)(*(_QWORD *)(v31 + 8) + 16) == 193 && (v32 = sub_1C4A73FE0(v29, a2, 0), HIDWORD(v32)))
        {
          v122 = (void *)257;
          LODWORD(v123) = 0;
          sub_1C5544694((uint64_t)a3, (unint64_t *)&v122, v32);
        }
        else
        {
          v104 = 513;
          v105 = 0;
          LODWORD(v122) = *(_DWORD *)(v28 + 4);
          LODWORD(v124) = 0;
          v33 = (void *)sub_1C5546EF4(a3, &v104, (int *)&v122);
          v104 = 257;
          v105 = 0;
          v122 = v33;
          v123 = v34;
          LODWORD(v124) = 1;
          (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 119, &v104, 1, &v122, 1, 0);
        }
        v36 = v35;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 32))(a6, a1);
        llvm::MachineOperand::setReg(v28, *(_DWORD *)(*(_QWORD *)(v36 + 32) + 4));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, a1);
        v27 = *(_QWORD *)(a1 + 32);
      }
    }
  }
  v37 = v27 + 32 * v111;
  v38 = *(unsigned int *)(v37 + 4);
  if ((v38 & 0x80000000) != 0 && (v38 & 0x7FFFFFFF) < *(_DWORD *)(a2 + 432))
  {
    v39 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v38 & 0x7FFFFFFF));
    if ((v39 & 0xFFFFFFFFFFFFFFF9) != 0 && (*(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v38 & 0x7FFFFFFF)) & 6) == 2)
    {
      v104 = 257;
      v105 = 0;
      LODWORD(v122) = v38;
      LODWORD(v124) = 0;
      sub_1C5546EF4(a3, &v104, (int *)&v122);
      v41 = v7;
      v43 = v42;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 32))(a6, a1);
      v44 = *(_QWORD *)(v43 + 32);
      v7 = v41;
      llvm::MachineOperand::setReg(v37, *(_DWORD *)(v44 + 4));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, a1);
    }
  }
  else
  {
    LOBYTE(v39) = 0;
  }
  v45 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8);
  if ((int)v38 >= 0)
    v45 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v38);
  v46 = *v45;
  if (v46)
  {
    if ((*(_BYTE *)(v46 + 3) & 1) != 0 || (v46 = *(_QWORD *)(v46 + 24)) != 0 && (*(_BYTE *)(v46 + 3) & 1) != 0)
    {
      v98 = *(_QWORD *)(v46 + 8);
      if (v98)
      {
        if (**(_WORD **)(v98 + 16) == 81 && *(_DWORD *)(v98 + 40) == 2)
          LODWORD(v38) = *(_DWORD *)(*(_QWORD *)(v98 + 32) + 36);
      }
    }
  }
  sub_1C554C050(v38, a2);
  if ((v39 & 1) == 0 && v115 != -1)
  {
    v117 = v119;
    v118 = 0x300000000;
    if (v108 != 1)
    {
      v48 = *(_QWORD *)(a1 + 32) + 32 * v115;
      v49 = *(_DWORD *)(v48 + 4);
      if (v49 < 0 && (v50 = v49 & 0x7FFFFFFF, v50 < *(_DWORD *)(a2 + 432)))
        v51 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * v50);
      else
        LOBYTE(v51) = 0;
      sub_1C4AD57F8(*(_QWORD *)(a1 + 32) + 32 * v115, a2, 0, 0, (uint64_t)&v104);
      if ((v51 & 1) == 0 || v106)
      {
LABEL_76:
        if (v117 != v119)
          free(v117);
        goto LABEL_78;
      }
      v99 = v7;
      v100 = a6;
      v101 = a2;
      v52 = *(_DWORD *)(v48 + 4);
      v122 = (void *)129;
      LODWORD(v123) = 0;
      v53 = sub_1C5544694((uint64_t)a3, (unint64_t *)&v122, 15);
      if (v108)
      {
        v55 = v53;
        v56 = v54;
        v57 = 0;
        for (i = 0; i < v108; ++i)
        {
          v120 = 129;
          v121 = 0;
          LODWORD(v122) = v52;
          LODWORD(v124) = 0;
          v102 = 129;
          v103 = 0;
          v125 = sub_1C5544694((uint64_t)a3, &v102, v57 & 0xFFFFFFFC);
          v126 = v59;
          v127 = 1;
          v60 = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 128, &v120, 1, &v122, 2, 0);
          v120 = 129;
          v121 = 0;
          v122 = v60;
          v123 = v61;
          LODWORD(v124) = 1;
          v125 = v55;
          v126 = v56;
          v127 = 1;
          (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, void **, uint64_t, _QWORD))(*a3 + 32))(a3, 65, &v120, 1, &v122, 2, 0);
          v63 = *(_DWORD *)(*(_QWORD *)(v62 + 32) + 4);
          v64 = v118;
          if (v118 >= (unint64_t)HIDWORD(v118))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v118 + 1, 4);
            v64 = v118;
          }
          *((_DWORD *)v117 + v64) = v63;
          v65 = v118 + 1;
          LODWORD(v118) = v118 + 1;
          v66 = v108;
          v57 += 4;
        }
      }
      else
      {
        v66 = 0;
        v65 = v118;
      }
      v120 = (8 * v66) | 0x800004u;
      v121 = 0;
      v67 = (int *)v117;
      v68 = v65;
      v122 = &v124;
      v123 = 0x800000000;
      a6 = v100;
      if (v65 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v122, (uint64_t)&v124, v65, 24);
        v69 = v123;
        v70 = v122;
      }
      else
      {
        if (!v65)
        {
          v75 = 0;
          v70 = &v124;
LABEL_73:
          LODWORD(v123) = v75 + v68;
          (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, _QWORD *))(*a3 + 32))(a3, 77, &v120, 1, v70);
          v77 = v76;
          if (v122 != &v124)
            free(v122);
          llvm::MachineOperand::setReg(v48, *(_DWORD *)(*(_QWORD *)(v77 + 32) + 4));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 40))(v100, a1);
          a2 = v101;
          v7 = v99;
          goto LABEL_76;
        }
        v69 = 0;
        v70 = &v124;
      }
      v71 = 3 * v69;
      v72 = 4 * v68;
      do
      {
        v73 = *v67++;
        v74 = &v70[v71];
        *v74 = v73;
        v74[4] = 0;
        v71 += 3;
        v72 -= 4;
      }
      while (v72);
      v75 = v123;
      goto LABEL_73;
    }
  }
LABEL_78:
  if (v113 != -1)
  {
    v78 = *(_QWORD *)(a1 + 32) + 32 * v113;
    v79 = *(_DWORD *)(v78 + 4);
    if ((v79 & 0x80000000) == 0
      || (v79 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432)
      || *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v79 & 0x7FFFFFFF)) != 129)
    {
      v104 = 129;
      v105 = 0;
      LODWORD(v122) = v79;
      LODWORD(v124) = 0;
      sub_1C5546B4C(a3, 126, (unint64_t *)&v104, (int *)&v122);
      llvm::MachineOperand::setReg(v78, *(_DWORD *)(*(_QWORD *)(v80 + 32) + 4));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, a1);
    }
  }
  if (!v107[2] && v116 == -1)
  {
    v81 = *(_QWORD *)(a1 + 32) + 32 * v112;
    v82 = *(_DWORD *)(v81 + 4);
    if ((v82 & 0x80000000) == 0 || (v82 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432))
    {
      v83 = 0;
      goto LABEL_99;
    }
    v83 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v82 & 0x7FFFFFFF));
    v84 = (v83 & 0xFFFFFFFFFFFFFFF9) == 0
       || (*(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v82 & 0x7FFFFFFF)) & 4) == 0;
    v85 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v82 & 0x7FFFFFFF));
    if (!v84)
    {
      if ((v83 & 2) != 0)
        goto LABEL_96;
      v86 = 3;
      if ((v83 & 1) == 0)
        v86 = 19;
      v85 = v83 & 0x8000000000000000 | (8 * (v83 >> v86)) | 1;
    }
    if (v85 == 257)
      goto LABEL_105;
LABEL_96:
    if ((v83 & 1) != 0)
    {
      v87 = 257;
LABEL_104:
      v104 = v87;
      v105 = 0;
      LODWORD(v122) = v82;
      LODWORD(v124) = 0;
      sub_1C5546B4C(a3, 126, (unint64_t *)&v104, (int *)&v122);
      llvm::MachineOperand::setReg(v81, *(_DWORD *)(*(_QWORD *)(v89 + 32) + 4));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, a1);
      goto LABEL_105;
    }
LABEL_99:
    v88 = 0x800000000000000;
    if ((v83 & 2) == 0)
      v88 = 0x8000000000000;
    if ((v88 & v83) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v47);
      v82 = *(_DWORD *)(v81 + 4);
    }
    v87 = v83 & 0x7FFF8 | 0x1000004;
    goto LABEL_104;
  }
LABEL_105:
  if (v7 == 3)
  {
    v90 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 36);
    if ((v90 & 0x80000000) == 0 || (v90 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432))
      return 0;
    v91 = *(_QWORD *)(*(_QWORD *)(a2 + 424) + 8 * (v90 & 0x7FFFFFFF));
    if (v91 != 129)
    {
      if (v91 == 65)
      {
        GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(a2, 129, "", 0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 32))(a6, a1);
        llvm::MachineOperand::setReg(*(_QWORD *)(a1 + 32) + 32, GenericVirtualRegister);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a6 + 40))(a6, a1);
        LODWORD(v104) = v90;
        v105 = 1;
        LODWORD(v122) = GenericVirtualRegister;
        LODWORD(v124) = 0;
        sub_1C5546B4C(a3, 126, (unint64_t *)&v104, (int *)&v122);
        goto LABEL_111;
      }
      return 0;
    }
  }
LABEL_111:
  if (v116 != -1)
  {
    sub_1C4AD61BC(*(_QWORD *)(a1 + 32) + 32 * v114, a2, (uint64_t)&v122);
    v93 = *(_QWORD *)(a1 + 24);
    v94 = *(_QWORD *)(*(_QWORD *)(v93 + 32) + 16);
    if (*(_BYTE *)(v94 + 303))
    {
      v95 = 15;
    }
    else
    {
      v30 = *(_BYTE *)(v94 + 305) == 0;
      v95 = 14;
      if (!v30)
        v95 = 15;
    }
    if ((_BYTE)v126 && v122 == 1 && v124 > v95)
    {
      v97 = a1;
      if ((*(_BYTE *)a1 & 4) == 0)
      {
        v97 = a1;
        if ((*(_WORD *)(a1 + 44) & 8) != 0)
        {
          v97 = a1;
          do
            v97 = *(_QWORD *)(v97 + 8);
          while ((*(_WORD *)(v97 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(v93 + 40, a1, *(_QWORD *)(v97 + 8));
    }
  }
  return 1;
}

uint64_t sub_1C4A73FE0(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  llvm::GlobalValue *v12[2];
  char v13;

  v6 = a1;
  sub_1C493FD84((uint64_t)v12, a1, a2, 1);
  if (!v13)
    return 0;
  v7 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v7 = (uint64_t *)(*(_QWORD *)(a2 + 272) + 8 * v6);
  v8 = *v7;
  if ((*(_BYTE *)(v8 + 3) & 1) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 24) + 32);
  v10 = sub_1C4A17AE8(*(_QWORD *)(v9 + 16));
  return sub_1C5EAB3E0(v12[0], (uint64_t)v12[1], *(_QWORD *)(v9 + 344), a3 | ((unint64_t)v10 << 32)) | 0x100000000;
}

uint64_t sub_1C4A740C0(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = 0;
  if (a1 > 2543)
  {
    if (a1 <= 2706)
    {
      if (a1 <= 2664)
      {
        if (a1 == 2544)
        {
          v1 = 0x100000000;
          v2 = 28;
        }
        else if (a1 == 2586)
        {
LABEL_66:
          v1 = 0x100000000;
          v2 = 21;
        }
        else
        {
          v2 = 0;
          if (a1 == 2587)
          {
LABEL_62:
            v1 = 0x100000000;
            v2 = 22;
          }
        }
      }
      else
      {
        v2 = 0;
        switch(a1)
        {
          case 2665:
            v1 = 0x100000000;
            v2 = 35;
            break;
          case 2666:
            v1 = 0x100000000;
            v2 = 36;
            break;
          case 2667:
            v1 = 0x100000000;
            v2 = 37;
            break;
          case 2668:
            return v2 | v1;
          case 2669:
            v1 = 0x100000000;
            v2 = 39;
            break;
          case 2670:
            v2 = 0;
            v1 = 0x100000000;
            break;
          case 2671:
            v1 = 0x100000000;
            v2 = 4;
            break;
          case 2672:
            v1 = 0x100000000;
            v2 = 1;
            break;
          case 2673:
            v1 = 0x100000000;
            v2 = 5;
            break;
          case 2674:
            v1 = 0x100000000;
            v2 = 2;
            break;
          case 2675:
            v1 = 0x100000000;
            v2 = 6;
            break;
          case 2676:
            v1 = 0x100000000;
            v2 = 54;
            break;
          case 2677:
            v1 = 0x100000000;
            v2 = 26;
            break;
          case 2678:
            v1 = 0x100000000;
            v2 = 24;
            break;
          case 2679:
            goto LABEL_65;
          default:
            v1 = 0x100000000;
            v2 = 60;
            if (a1 != 2706)
            {
              v1 = 0;
              v2 = 0;
            }
            break;
        }
      }
      return v2 | v1;
    }
    if (a1 <= 2794)
    {
      v1 = 0x100000000;
      v2 = 40;
      v3 = 0x100000000;
      v4 = 63;
      if (a1 != 2769)
      {
        v3 = 0;
        v4 = 0;
      }
      if (a1 != 2732)
      {
        v1 = v3;
        v2 = v4;
      }
      v5 = 0x100000000;
      v6 = 59;
      v7 = 0x100000000;
      v8 = 61;
      if (a1 != 2708)
      {
        v7 = 0;
        v8 = 0;
      }
      if (a1 != 2707)
      {
        v5 = v7;
        v6 = v8;
      }
      v9 = a1 <= 2731;
    }
    else
    {
      if (a1 <= 2819)
      {
        v2 = 0;
        switch(a1)
        {
          case 2795:
            v1 = 0x100000000;
            v2 = 78;
            break;
          case 2796:
            v1 = 0x100000000;
            v2 = 77;
            break;
          case 2797:
          case 2798:
          case 2799:
          case 2800:
          case 2801:
          case 2802:
          case 2803:
          case 2804:
          case 2805:
          case 2806:
          case 2811:
          case 2812:
          case 2813:
            return v2 | v1;
          case 2807:
            v1 = 0x100000000;
            v2 = 65;
            break;
          case 2808:
            v1 = 0x100000000;
            v2 = 68;
            break;
          case 2809:
            v1 = 0x100000000;
            v2 = 66;
            break;
          case 2810:
            v1 = 0x100000000;
            v2 = 67;
            break;
          case 2814:
            v1 = 0x100000000;
            v2 = 76;
            break;
          case 2815:
          case 2816:
            v1 = 0x100000000;
            v2 = 69;
            break;
          default:
LABEL_112:
            v2 = 0;
            break;
        }
        return v2 | v1;
      }
      v1 = 0x100000000;
      v2 = 64;
      v10 = 0x100000000;
      v11 = 62;
      if (a1 != 2848)
      {
        v10 = 0;
        v11 = 0;
      }
      if (a1 != 2841)
      {
        v1 = v10;
        v2 = v11;
      }
      v5 = 0x100000000;
      v6 = 70;
      v12 = 0x100000000;
      v13 = 79;
      if (a1 != 2822)
      {
        v12 = 0;
        v13 = 0;
      }
      if (a1 != 2820)
      {
        v5 = v12;
        v6 = v13;
      }
      v9 = a1 <= 2840;
    }
LABEL_47:
    if (v9)
      v1 = v5;
    if (v9)
      v2 = v6;
    return v2 | v1;
  }
  if (a1 <= 2304)
  {
    if (a1 <= 2131)
    {
      if (a1 == 1269)
      {
LABEL_67:
        v1 = 0x100000000;
        v2 = 16;
      }
      else
      {
        v1 = 0x100000000;
        v2 = 29;
        v19 = 0x100000000;
        v20 = 52;
        if (a1 != 2108)
        {
          v19 = 0;
          v20 = 0;
        }
        if (a1 != 2107)
        {
          v1 = v19;
          v2 = v20;
        }
      }
    }
    else
    {
      v2 = 0;
      switch(a1)
      {
        case 2132:
          v1 = 0x100000000;
          v2 = 42;
          break;
        case 2133:
        case 2134:
        case 2135:
        case 2136:
        case 2137:
        case 2138:
        case 2141:
        case 2142:
        case 2143:
        case 2144:
        case 2148:
        case 2149:
        case 2153:
        case 2157:
        case 2158:
        case 2159:
        case 2160:
        case 2161:
        case 2162:
        case 2163:
        case 2164:
        case 2165:
        case 2166:
        case 2167:
        case 2168:
        case 2171:
        case 2172:
          return v2 | v1;
        case 2139:
          v1 = 0x100000000;
          v2 = 43;
          break;
        case 2140:
          v1 = 0x100000000;
          v2 = 27;
          break;
        case 2145:
          v1 = 0x100000000;
          v2 = 7;
          break;
        case 2146:
          v1 = 0x100000000;
          v2 = 8;
          break;
        case 2147:
          v1 = 0x100000000;
          v2 = 9;
          break;
        case 2150:
          v1 = 0x100000000;
          v2 = 34;
          break;
        case 2151:
          v1 = 0x100000000;
          v2 = 33;
          break;
        case 2152:
          v1 = 0x100000000;
          v2 = 57;
          break;
        case 2154:
          v1 = 0x100000000;
          v2 = 55;
          break;
        case 2155:
          v1 = 0x100000000;
          v2 = 56;
          break;
        case 2156:
          v1 = 0x100000000;
          v2 = 41;
          break;
        case 2169:
          v1 = 0x100000000;
          v2 = 3;
          break;
        case 2170:
          goto LABEL_67;
        case 2173:
          v1 = 0x100000000;
          v2 = 13;
          break;
        case 2174:
          v1 = 0x100000000;
          v2 = 12;
          break;
        case 2175:
          v1 = 0x100000000;
          v2 = 10;
          break;
        case 2176:
          v1 = 0x100000000;
          v2 = 11;
          break;
        default:
          goto LABEL_112;
      }
    }
    return v2 | v1;
  }
  if (a1 <= 2422)
  {
    if (a1 <= 2364)
    {
      v2 = 0;
      switch(a1)
      {
        case 2305:
          v1 = 0x100000000;
          v2 = 38;
          break;
        case 2306:
          v1 = 0x100000000;
          v2 = 30;
          break;
        case 2307:
          v1 = 0x100000000;
          v2 = 32;
          break;
        case 2308:
          v1 = 0x100000000;
          v2 = 31;
          break;
        default:
          return v2 | v1;
      }
      return v2 | v1;
    }
    v1 = 0x100000000;
    v2 = 18;
    v14 = 0x100000000;
    v15 = 19;
    if (a1 != 2410)
    {
      v14 = 0;
      v15 = 0;
    }
    if (a1 != 2409)
    {
      v1 = v14;
      v2 = v15;
    }
    v5 = 0x100000000;
    v6 = 20;
    v16 = 0x100000000;
    v17 = 17;
    if (a1 != 2408)
    {
      v16 = 0;
      v17 = 0;
    }
    if (a1 != 2365)
    {
      v5 = v16;
      v6 = v17;
    }
    v9 = a1 <= 2408;
    goto LABEL_47;
  }
  v2 = 0;
  switch(a1)
  {
    case 2484:
      v1 = 0x100000000;
      v2 = 25;
      return v2 | v1;
    case 2485:
      v1 = 0x100000000;
      v2 = 23;
      return v2 | v1;
    case 2486:
      v1 = 0x100000000;
      v2 = 44;
      return v2 | v1;
    case 2487:
    case 2488:
    case 2489:
    case 2490:
      return v2 | v1;
    case 2491:
      goto LABEL_66;
    case 2492:
      goto LABEL_62;
    default:
      if (a1 == 2423)
      {
        v1 = 0x100000000;
        v2 = 53;
        return v2 | v1;
      }
      v2 = 0;
      if (a1 != 2444)
        return v2 | v1;
      break;
  }
LABEL_65:
  v1 = 0x100000000;
  v2 = 14;
  return v2 | v1;
}

uint64_t sub_1C4A745D0(uint64_t a1, int a2)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  llvm::MachineFunction *v7;
  llvm::MachineInstr *v8;
  llvm::MachineInstr *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::MachineInstr *v14;
  llvm::MachineInstr *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::MachineInstr *v19;
  llvm::MachineInstr *v20;
  uint64_t v22;
  unint64_t v24;
  llvm::MachineInstr *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::MachineInstr *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = sub_1C4A8B770(a2);
  v4 = sub_1C4A7C79C(v3, **(_DWORD **)a1);
  if (v4 >= 0x11)
    v5 = 257;
  else
    v5 = 129;
  v6 = *(_QWORD *)(a1 + 8);
  v30 = v5;
  v31 = 0;
  v7 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 32))(v6, 315, &v30, 1, 0, 0, 0);
  v9 = v8;
  LODWORD(v24) = 1;
  v25 = 0;
  v26 = v3;
  llvm::MachineInstr::addOperand(v8, v7, (const llvm::MachineOperand *)&v24);
  v10 = **(_DWORD **)(a1 + 16);
  if ((v10 - 2175) <= 1)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v24 = 129;
    LODWORD(v25) = 0;
    v12 = sub_1C5544694(v11, &v24, 1);
    v13 = *(_QWORD *)(a1 + 8);
    v30 = 129;
    v31 = 0;
    v24 = v12;
    v25 = v14;
    LODWORD(v26) = 1;
    v27 = (uint64_t)v7;
    v28 = v9;
    v29 = 1;
    v7 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, 127, &v30, 1, &v24, 2, 0);
    v9 = v15;
    v10 = **(_DWORD **)(a1 + 16);
  }
  if (v10 == 2491)
  {
    v16 = *(_QWORD *)(a1 + 8);
    v24 = v5;
    LODWORD(v25) = 0;
    v17 = sub_1C5544694(v16, &v24, 3);
    v18 = *(_QWORD *)(a1 + 8);
    v30 = v5;
    v31 = 0;
    v24 = (unint64_t)v7;
    v25 = v9;
    LODWORD(v26) = 1;
    v27 = v17;
    v28 = v19;
    v29 = 1;
    v7 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 65, &v30, 1, &v24, 2, 0);
    v9 = v20;
  }
  if (**(_QWORD **)(a1 + 24) == 257 && v4 <= 0x10)
  {
    v22 = *(_QWORD *)(a1 + 8);
    v30 = 257;
    v31 = 0;
    v24 = (unint64_t)v7;
    v25 = v9;
    LODWORD(v26) = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, 126, &v30, 1, &v24, 1, 0);
  }
  return (uint64_t)v7;
}

uint64_t sub_1C4A74814(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t result;
  unsigned int v4;
  llvm::MachineFunction *v5;
  llvm::MachineInstr *v6;
  llvm::MachineInstr *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)a1[1];
  result = sub_1C5EABB98(*(_QWORD *)(*v2 + 40));
  if (result)
  {
    v4 = sub_1C5EABBE8(v2[43]);
    v11 = 257;
    v12 = 0;
    v5 = (llvm::MachineFunction *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*a1 + 32))(a1, 313, &v11, 1, 0, 0, 0);
    v7 = v6;
    v8 = 1;
    v9 = 0;
    v10 = v4;
    llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)&v8);
    return *(unsigned int *)(*((_QWORD *)v7 + 4) + 4) | 0x100000000;
  }
  return result;
}

unint64_t sub_1C4A748F4(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  int v8;
  BOOL (*v9)(_BOOL8);
  uint64_t (***v10)();
  void (**v11)(uint64_t (***)());
  uint64_t (***v12)();
  uint64_t (***v13)();
  void (**v14)(uint64_t (***)());
  int v15;
  int v16;
  uint64_t (***v17)();
  void (**v18)(uint64_t (***)());
  uint64_t (***v19)();
  void (**v20)(uint64_t (***)());
  int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (**v28)();
  unint64_t *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  int v34;
  void *v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *__src;
  unsigned int v41;
  unsigned __int8 v42;
  uint64_t (**v43)();
  _QWORD *(*v44)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t (***v45)();
  uint64_t (**v46)();
  BOOL (*v47)(_BOOL8);
  void **v48;
  uint64_t v49;

  v4 = a3;
  v49 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return v4;
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * a2 + 4);
  v9 = sub_1C554C7E0;
  v46 = &off_1E816EFF0;
  v47 = sub_1C554C7E0;
  v48 = (void **)&v46;
  v43 = &off_1E816F038;
  v44 = sub_1C554C7F8;
  v45 = &v43;
  sub_1C554C3AC(v8, a4, (uint64_t)&v46, (uint64_t)&v43, 0, 0, &__src);
  v10 = v45;
  if (v45 == &v43)
  {
    v11 = (void (**)(uint64_t (***)()))(v43 + 4);
    v10 = &v43;
LABEL_4:
    (*v11)(v10);
    goto LABEL_5;
  }
  if (v45)
  {
    v11 = (void (**)(uint64_t (***)()))(*v45 + 5);
    goto LABEL_4;
  }
LABEL_5:
  v12 = (uint64_t (***)())v48;
  v13 = &v46;
  if (v48 == (void **)&v46)
  {
    v14 = (void (**)(uint64_t (***)()))(v46 + 4);
    v12 = &v46;
LABEL_7:
    (*v14)(v12);
    goto LABEL_8;
  }
  if (v48)
  {
    v14 = (void (**)(uint64_t (***)()))((char *)*v48 + 40);
    goto LABEL_7;
  }
LABEL_8:
  v15 = v42;
  if (v42)
  {
    v38 = v41;
    if (v41 > 0x40)
    {
      v34 = v42;
      v39 = (void *)operator new[]();
      v35 = __src;
      memcpy(v39, __src, ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8);
      if (v35)
        MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
      v15 = v34;
    }
    else
    {
      v39 = __src;
    }
  }
  else
  {
    LOBYTE(v39) = 0;
    LODWORD(v38) = (_DWORD)v13;
  }
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * (a2 + 1) + 4);
  v46 = &off_1E816EFF0;
  v47 = sub_1C554C7E0;
  v48 = (void **)&v46;
  v43 = &off_1E816F038;
  v44 = sub_1C554C7F8;
  v45 = &v43;
  sub_1C554C3AC(v16, a4, (uint64_t)&v46, (uint64_t)&v43, 0, 0, &__src);
  v17 = v45;
  if (v45 == &v43)
  {
    v18 = (void (**)(uint64_t (***)()))(v43 + 4);
    v17 = &v43;
LABEL_14:
    (*v18)(v17);
    goto LABEL_15;
  }
  if (v45)
  {
    v18 = (void (**)(uint64_t (***)()))(*v45 + 5);
    goto LABEL_14;
  }
LABEL_15:
  v19 = (uint64_t (***)())v48;
  if (v48 == (void **)&v46)
  {
    v20 = (void (**)(uint64_t (***)()))(v46 + 4);
    v19 = &v46;
  }
  else
  {
    if (!v48)
      goto LABEL_18;
    v20 = (void (**)(uint64_t (***)()))((char *)*v48 + 40);
  }
  (*v20)(v19);
LABEL_18:
  v21 = v42;
  if (v42)
  {
    LODWORD(v9) = v41;
    if (v41 > 0x40)
    {
      v36 = (((unint64_t)v41 + 63) >> 3) & 0x3FFFFFF8;
      v46 = (uint64_t (**)())operator new[]();
      v37 = __src;
      memcpy(v46, __src, v36);
      if (v37)
        MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
    }
    else
    {
      v46 = (uint64_t (**)())__src;
    }
  }
  else
  {
    LOBYTE(v46) = 0;
  }
  v22 = v4 & 0xFFFFFFFFFFFFFFFBLL;
  v23 = *(_DWORD *)(*(_QWORD *)v4 + 8);
  if ((v23 & 0xFE) == 0x12)
    v23 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v4 + 16) + 8);
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  v25 = v23 >> 8;
  if (v15)
  {
    v26 = (uint64_t *)v39;
    if (v38 < 0x41)
      v26 = (uint64_t *)&v39;
    v27 = *v26;
  }
  else
  {
    v27 = 4;
  }
  v28 = v46;
  v29 = (unint64_t *)&v46;
  if (v9 >= 0x41)
    v29 = (unint64_t *)v46;
  v30 = __clz(*v29);
  v31 = sub_1C484358C(v24 + 128, 80, 3);
  v4 = v31;
  *(_QWORD *)v31 = v22;
  *(_QWORD *)(v31 + 8) = 0;
  v32 = ((unint64_t)(v27 & 0x1FFFFFFF) << 6) | 1;
  *(_DWORD *)(v31 + 16) = v25;
  if (v27 == -1)
    v32 = 0;
  *(_BYTE *)(v31 + 20) = 0;
  *(_QWORD *)(v31 + 24) = v32;
  *(_WORD *)(v31 + 32) = 3;
  *(_BYTE *)(v31 + 34) = 63 - v30;
  *(_OWORD *)(v31 + 40) = 0u;
  *(_OWORD *)(v31 + 56) = 0u;
  *(_QWORD *)(v31 + 72) = 0;
  *(_WORD *)(v31 + 36) = 1;
  if (v21 && v9 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  if (v15 && v38 >= 0x41 && v39)
    MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  return v4;
}

uint64_t sub_1C4A74D38(uint64_t result, uint64_t a2, int a3, unsigned int a4, int a5)
{
  uint64_t v5;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  void (**v15)(uint64_t *);
  unint64_t *v16;
  void (**v17)(unint64_t *);
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  void (**v22)(uint64_t *);
  int v23;
  unint64_t *v24;
  void (**v25)(unint64_t *);
  uint64_t v26;
  llvm::MachineMemOperand *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL (*v32)(_BOOL8);
  BOOL (*v33)(_BOOL8);
  const char *v34;
  uint64_t v35;
  __int128 *MachineMemOperand;
  llvm::MachineMemOperand *v37;
  llvm::MachineFunction *v38;
  BOOL (*v39)(_BOOL8);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::MachineFunction *v43;
  unint64_t *v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  int IncompleteVirtualRegister;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  llvm::MachineFunction *v69;
  unint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  int v116;
  int v117;
  int v118;
  size_t __n;
  unint64_t __na;
  unsigned int v122;
  unsigned int v123;
  uint64_t *v124;
  void *__src;
  unsigned int v126;
  unsigned __int8 v127;
  uint64_t v128;
  _QWORD *(*v129)@<X0>(_QWORD *@<X0>, uint64_t@<X8>);
  uint64_t *v130;
  unint64_t v131;
  BOOL (*v132)(_BOOL8);
  uint64_t v133;
  unint64_t *v134;
  int v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(*(_QWORD *)(v5 + 16) + 367))
    return result;
  v8 = (_QWORD *)result;
  v10 = *(_QWORD *)(result + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v118 = *(_DWORD *)(v11 + 32 * a4 + 4);
  v12 = *(_DWORD *)(v11 + 32 * (a4 + 1) + 4);
  v131 = (unint64_t)&off_1E816EFF0;
  v132 = sub_1C554C7E0;
  v134 = &v131;
  v128 = (uint64_t)&off_1E816F038;
  v129 = sub_1C554C7F8;
  v13 = &v128;
  v130 = &v128;
  sub_1C554C3AC(v12, v10, (uint64_t)&v131, (uint64_t)&v128, 0, 0, &__src);
  v14 = v130;
  if (v130 == &v128)
  {
    v15 = (void (**)(uint64_t *))(v128 + 32);
    v14 = &v128;
LABEL_4:
    (*v15)(v14);
    goto LABEL_5;
  }
  if (v130)
  {
    v15 = (void (**)(uint64_t *))(*v130 + 40);
    goto LABEL_4;
  }
LABEL_5:
  v16 = v134;
  if (v134 == &v131)
  {
    v17 = (void (**)(unint64_t *))(v131 + 32);
    v16 = &v131;
LABEL_7:
    (*v17)(v16);
    goto LABEL_8;
  }
  if (v134)
  {
    v17 = (void (**)(unint64_t *))(*v134 + 40);
    goto LABEL_7;
  }
LABEL_8:
  v117 = v127;
  if (v127)
  {
    LODWORD(v13) = v126;
    if (v126 > 0x40)
    {
      __na = (((unint64_t)v126 + 63) >> 3) & 0x3FFFFFF8;
      v123 = v126;
      v110 = (uint64_t *)operator new[]();
      v111 = __src;
      v124 = v110;
      memcpy(v110, __src, __na);
      if (v111)
        MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
      LODWORD(v13) = v123;
    }
    else
    {
      v124 = (uint64_t *)__src;
    }
  }
  else
  {
    v124 = 0;
  }
  if (a5)
  {
    if (v13 > 0x40)
      v18 = *v124;
    else
      v18 = (uint64_t)((_QWORD)v124 << -(char)v13) >> -(char)v13;
  }
  else
  {
    if (v13 > 0x40)
      v19 = *v124;
    else
      v19 = (uint64_t)((_QWORD)v124 << -(char)v13) >> -(char)v13;
    v18 = v19 / 8;
  }
  v114 = v18;
  v20 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * (a4 + 2) + 4);
  v131 = (unint64_t)&off_1E816EFF0;
  v132 = sub_1C554C7E0;
  v134 = &v131;
  v128 = (uint64_t)&off_1E816F038;
  v129 = sub_1C554C7F8;
  v130 = &v128;
  sub_1C554C3AC(v20, v10, (uint64_t)&v131, (uint64_t)&v128, 0, 0, &__src);
  v21 = v130;
  if (v130 == &v128)
  {
    v22 = (void (**)(uint64_t *))(v128 + 32);
    v21 = &v128;
    v23 = a5;
LABEL_22:
    (*v22)(v21);
    goto LABEL_23;
  }
  v23 = a5;
  if (v130)
  {
    v22 = (void (**)(uint64_t *))(*v130 + 40);
    goto LABEL_22;
  }
LABEL_23:
  v24 = v134;
  if (v134 == &v131)
  {
    v25 = (void (**)(unint64_t *))(v131 + 32);
    v24 = &v131;
  }
  else
  {
    if (!v134)
      goto LABEL_26;
    v25 = (void (**)(unint64_t *))(*v134 + 40);
  }
  (*v25)(v24);
LABEL_26:
  v122 = v13;
  v116 = v127;
  if (v127)
  {
    __n = v126;
    if (v126 > 0x40)
    {
      v112 = (void *)operator new[]();
      v113 = __src;
      v115 = v112;
      memcpy(v112, __src, ((__n + 63) >> 3) & 0x3FFFFFF8);
      if (v113)
        MEMORY[0x1CAA32F9C](v113, 0x1000C8000313F17);
      v23 = a5;
    }
    else
    {
      v115 = __src;
    }
  }
  else
  {
    v115 = 0;
    LODWORD(__n) = 0;
  }
  v26 = *(_QWORD *)(a2 + 48);
  if ((v26 & 7) != 0)
  {
    v27 = *(llvm::MachineMemOperand **)((v26 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v27 = (llvm::MachineMemOperand *)(v26 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(a2 + 48) = v26 & 0xFFFFFFFFFFFFFFF8;
  }
  __src = (void *)65;
  v28 = ((*((_DWORD *)v27 + 4) & 0xFFFFFFLL) << 19) | 0x102;
  if ((v23 & 1) == 0)
  {
    v131 = 257;
    LODWORD(v132) = 0;
    if (v13 > 0x40)
      v29 = *v124;
    else
      v29 = (uint64_t)((_QWORD)v124 << -(char)v13) >> -(char)v13;
    sub_1C5544694((uint64_t)v8, &v131, v29 / 8);
    v12 = *(_DWORD *)(*(_QWORD *)(v30 + 32) + 4);
  }
  v128 = v28;
  LODWORD(v129) = 0;
  LODWORD(v131) = v118;
  LODWORD(v133) = 0;
  LODWORD(v134) = v12;
  v135 = 0;
  v31 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v8 + 32))(v8, 193, &v128, 1, &v131, 2, 0);
  v33 = v32;
  v35 = sub_1C4825F50((unint64_t *)&__src);
  if ((_DWORD)v34 == 1)
  MachineMemOperand = (__int128 *)llvm::MachineFunction::getMachineMemOperand(v5, (uint64_t)v27, v114, (8 * v35 + 56) & 0x7FFFFFFC0 | 1);
  v37 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v5, MachineMemOperand, 1);
  v128 = (uint64_t)__src;
  LODWORD(v129) = 0;
  v131 = v31;
  v132 = v33;
  LODWORD(v133) = 1;
  v38 = sub_1C55464EC(v8, 0x5Au, (int *)&v128, (int *)&v131, v37);
  v128 = 129;
  LODWORD(v129) = 0;
  v131 = (unint64_t)v38;
  v132 = v39;
  LODWORD(v133) = 1;
  (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, _QWORD))(*v8 + 32))(v8, 126, &v128, 1, &v131, 1, 0);
  v41 = v40;
  v128 = 0;
  v129 = 0;
  if ((v23 & 1) != 0)
  {
    v43 = sub_1C55437B8(v8, 0x119Bu);
    v44 = (unint64_t *)v42;
    v45 = (unint64_t *)v8[6];
    v46 = *(_QWORD *)(v8[5] + 40);
    *(_QWORD *)(v42 + 24) = v46;
    v47 = *(_QWORD *)(v46 + 32);
    v48 = *(unsigned int *)(v42 + 40);
    if ((_DWORD)v48)
    {
      v96 = *(_QWORD *)(v42 + 32);
      v97 = *(_QWORD *)(v47 + 40);
      v98 = 32 * v48;
      do
      {
        if (!*(_BYTE *)v96)
        {
          v99 = *(unsigned int *)(v96 + 4);
          if ((int)v99 >= 0)
            v100 = (uint64_t *)(*(_QWORD *)(v97 + 272) + 8 * v99);
          else
            v100 = (uint64_t *)(*(_QWORD *)(v97 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
          v101 = *v100;
          if (*v100)
          {
            v102 = *(_QWORD *)(v101 + 16);
            *(_QWORD *)(v101 + 16) = v96;
            *(_QWORD *)(v96 + 16) = v102;
            if ((*(_BYTE *)(v96 + 3) & 1) != 0)
            {
              *(_QWORD *)(v96 + 24) = v101;
            }
            else
            {
              *(_QWORD *)(v96 + 24) = 0;
              v100 = (uint64_t *)(v102 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v96 + 16) = v96;
            *(_QWORD *)(v96 + 24) = 0;
          }
          *v100 = v96;
        }
        v96 += 32;
        v98 -= 32;
      }
      while (v98);
    }
    v49 = *(_QWORD *)(v47 + 728);
    if (v49)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 24))(v49, v42);
    v50 = v23;
    v51 = *v45 & 0xFFFFFFFFFFFFFFF8;
    *v44 = v51 | *v44 & 7;
    v44[1] = (unint64_t)v45;
    *(_QWORD *)(v51 + 8) = v44;
    *v45 = *v45 & 7 | (unint64_t)v44;
    v52 = v8[7];
    if (v52)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v52 + 24))(v52, v44);
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
    *(_QWORD *)(*(_QWORD *)(v10 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E7FB15A0;
    v54 = *(_QWORD *)(v10 + 8);
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
    v132 = 0;
    v133 = 0;
    v134 = 0;
    LODWORD(v131) = 0x1000000;
    HIDWORD(v131) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    v132 = 0;
    v133 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    v132 = 0;
    v133 = 12;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
    v55 = *(_DWORD *)(*(_QWORD *)(v41 + 32) + 4);
    v132 = 0;
    v133 = 0;
    LODWORD(v131) = 0;
    HIDWORD(v131) = v55;
    v134 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    v132 = 0;
    v133 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    v132 = 0;
    v133 = 0;
  }
  else
  {
    v43 = sub_1C55437B8(v8, 0x1192u);
    v44 = (unint64_t *)v56;
    v57 = (unint64_t *)v8[6];
    v58 = *(_QWORD *)(v8[5] + 40);
    *(_QWORD *)(v56 + 24) = v58;
    v59 = *(_QWORD *)(v58 + 32);
    v60 = *(unsigned int *)(v56 + 40);
    if ((_DWORD)v60)
    {
      v103 = *(_QWORD *)(v56 + 32);
      v104 = *(_QWORD *)(v59 + 40);
      v105 = 32 * v60;
      do
      {
        if (!*(_BYTE *)v103)
        {
          v106 = *(unsigned int *)(v103 + 4);
          if ((int)v106 >= 0)
            v107 = (uint64_t *)(*(_QWORD *)(v104 + 272) + 8 * v106);
          else
            v107 = (uint64_t *)(*(_QWORD *)(v104 + 24) + 16 * (v106 & 0x7FFFFFFF) + 8);
          v108 = *v107;
          if (*v107)
          {
            v109 = *(_QWORD *)(v108 + 16);
            *(_QWORD *)(v108 + 16) = v103;
            *(_QWORD *)(v103 + 16) = v109;
            if ((*(_BYTE *)(v103 + 3) & 1) != 0)
            {
              *(_QWORD *)(v103 + 24) = v108;
            }
            else
            {
              *(_QWORD *)(v103 + 24) = 0;
              v107 = (uint64_t *)(v109 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v103 + 16) = v103;
            *(_QWORD *)(v103 + 24) = 0;
          }
          *v107 = v103;
        }
        v103 += 32;
        v105 -= 32;
      }
      while (v105);
    }
    v61 = *(_QWORD *)(v59 + 728);
    if (v61)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 24))(v61, v56);
    v50 = v23;
    v62 = *v57 & 0xFFFFFFFFFFFFFFF8;
    *v44 = v62 | *v44 & 7;
    v44[1] = (unint64_t)v57;
    *(_QWORD *)(v62 + 8) = v44;
    *v57 = *v57 & 7 | (unint64_t)v44;
    v63 = v8[7];
    if (v63)
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v63 + 24))(v63, v44);
    v64 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
    *(_QWORD *)(*(_QWORD *)(v10 + 24) + 16 * (v64 & 0x7FFFFFFF)) = &off_1E7FB15A0;
    v65 = *(_QWORD *)(v10 + 8);
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65);
    v132 = 0;
    v133 = 0;
    v134 = 0;
    LODWORD(v131) = 0x1000000;
    HIDWORD(v131) = v64;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    v132 = 0;
    v133 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    v132 = 0;
    v133 = 15;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
    v66 = *(_DWORD *)(*(_QWORD *)(v41 + 32) + 4);
    v132 = 0;
    v133 = 0;
    LODWORD(v131) = 0;
    HIDWORD(v131) = v66;
    v134 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
    LODWORD(v131) = 1;
    v132 = 0;
    v133 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
    if (v122 > 0x40)
      v67 = *v124;
    else
      v67 = (uint64_t)((_QWORD)v124 << -(char)v122) >> -(char)v122;
    LODWORD(v131) = 1;
    v132 = 0;
    v133 = 1 << (v67 & 7);
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v44, v43, (const llvm::MachineOperand *)&v131);
  v128 = (uint64_t)v43;
  v129 = (_QWORD *(*)@<X0>(_QWORD *@<X0>, uint64_t@<X8>))v44;
  sub_1C49400A8((uint64_t)&v128);
  v69 = sub_1C55437B8(v8, 0x107u);
  v70 = (unint64_t *)v68;
  v71 = (unint64_t *)v8[6];
  v72 = *(_QWORD *)(v8[5] + 40);
  *(_QWORD *)(v68 + 24) = v72;
  v73 = *(_QWORD *)(v72 + 32);
  v74 = *(unsigned int *)(v68 + 40);
  if ((_DWORD)v74)
  {
    v89 = *(_QWORD *)(v68 + 32);
    v90 = *(_QWORD *)(v73 + 40);
    v91 = 32 * v74;
    do
    {
      if (!*(_BYTE *)v89)
      {
        v92 = *(unsigned int *)(v89 + 4);
        if ((int)v92 >= 0)
          v93 = (uint64_t *)(*(_QWORD *)(v90 + 272) + 8 * v92);
        else
          v93 = (uint64_t *)(*(_QWORD *)(v90 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8);
        v94 = *v93;
        if (*v93)
        {
          v95 = *(_QWORD *)(v94 + 16);
          *(_QWORD *)(v94 + 16) = v89;
          *(_QWORD *)(v89 + 16) = v95;
          if ((*(_BYTE *)(v89 + 3) & 1) != 0)
          {
            *(_QWORD *)(v89 + 24) = v94;
          }
          else
          {
            *(_QWORD *)(v89 + 24) = 0;
            v93 = (uint64_t *)(v95 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v89 + 16) = v89;
          *(_QWORD *)(v89 + 24) = 0;
        }
        *v93 = v89;
      }
      v89 += 32;
      v91 -= 32;
    }
    while (v91);
  }
  v75 = *(_QWORD *)(v73 + 728);
  if (v75)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v75 + 24))(v75, v68);
  v76 = *v71 & 0xFFFFFFFFFFFFFFF8;
  *v70 = v76 | *v70 & 7;
  v70[1] = (unint64_t)v71;
  *(_QWORD *)(v76 + 8) = v70;
  *v71 = *v71 & 7 | (unint64_t)v70;
  v77 = v8[7];
  if (v77)
    (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v77 + 24))(v77, v70);
  v78 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
  *(_QWORD *)(*(_QWORD *)(v10 + 24) + 16 * (v78 & 0x7FFFFFFF)) = &off_1E7FB1B88;
  v79 = *(_QWORD *)(v10 + 8);
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 24))(v79);
  v132 = 0;
  v133 = 0;
  v134 = 0;
  LODWORD(v131) = 0x1000000;
  HIDWORD(v131) = v78;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v131);
  v80 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
  *(_QWORD *)(*(_QWORD *)(v10 + 24) + 16 * (v80 & 0x7FFFFFFF)) = &off_1E7FB15A0;
  v81 = *(_QWORD *)(v10 + 8);
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81);
  v132 = 0;
  v133 = 0;
  v134 = 0;
  LODWORD(v131) = 0x1000000;
  HIDWORD(v131) = v80;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v131);
  v82 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
  *(_QWORD *)(*(_QWORD *)(v10 + 24) + 16 * (v82 & 0x7FFFFFFF)) = &off_1E7FADBF0;
  v83 = *(_QWORD *)(v10 + 8);
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 24))(v83);
  v132 = 0;
  v133 = 0;
  v134 = 0;
  LODWORD(v131) = 0x1000000;
  HIDWORD(v131) = v82;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v131);
  v84 = *(_DWORD *)(v44[4] + 4);
  v132 = 0;
  v133 = 0;
  LODWORD(v131) = 0;
  HIDWORD(v131) = v84;
  v134 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v131);
  v132 = 0;
  v133 = 0;
  LODWORD(v131) = 0;
  HIDWORD(v131) = a3;
  v134 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v131);
  v132 = 0;
  v133 = 0;
  LODWORD(v131) = 0;
  HIDWORD(v131) = v118;
  v134 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v131);
  if (v50)
  {
    v85 = __n;
    v86 = v115;
    if (v122 > 0x40)
      v87 = *v124;
    else
      v87 = (uint64_t)((_QWORD)v124 << -(char)v122) >> -(char)v122;
    v88 = 8 * v87;
  }
  else
  {
    v85 = __n;
    v86 = v115;
    if (v122 > 0x40)
      v88 = *v124;
    else
      v88 = (uint64_t)((_QWORD)v124 << -(char)v122) >> -(char)v122;
  }
  LODWORD(v131) = 1;
  v132 = 0;
  v133 = v88;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v70, v69, (const llvm::MachineOperand *)&v131);
  llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v70, v69, v27);
  v131 = (unint64_t)v69;
  v132 = (BOOL (*)(_BOOL8))v70;
  result = sub_1C49400A8((uint64_t)&v131);
  if (v116 && v85 >= 0x41 && v86)
    result = MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
  if (v117 && v122 >= 0x41)
  {
    if (v124)
      return MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
  }
  return result;
}

