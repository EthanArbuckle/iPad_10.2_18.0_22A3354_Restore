uint64_t sub_1C5831224(uint64_t a1, _OWORD *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;

  v24 = 0;
  v4 = sub_1C5834558(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)a2, &v24);
  v5 = v24;
  if ((v4 & 1) != 0)
    return v5 + 16;
  v25 = v24;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    v8 = 2 * v7;
    goto LABEL_11;
  }
  v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_11:
    v10 = *(_QWORD *)a1;
    v11 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40)
      v14 = v13 + 1;
    else
      v14 = 64;
    *(_DWORD *)(a1 + 16) = v14;
    v15 = operator new(24 * v14, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v15;
    if (v10)
    {
      *(_QWORD *)(a1 + 8) = 0;
      v16 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v16)
      {
        v17 = 24 * v16;
        do
        {
          *v15 = 0;
          v15[1] = 0;
          v15 += 3;
          v17 -= 24;
        }
        while (v17);
      }
      if ((_DWORD)v7)
      {
        v18 = 24 * v7;
        v19 = v10;
        do
        {
          if (*(_QWORD *)v19 || *(_DWORD *)(v19 + 8) > 1u || *(_DWORD *)(v19 + 12))
          {
            v26 = 0;
            sub_1C5834558(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v19, &v26);
            v20 = v26;
            *v26 = *(_OWORD *)v19;
            *((_QWORD *)v20 + 2) = *(_QWORD *)(v19 + 16);
            ++*(_DWORD *)(a1 + 8);
          }
          v19 += 24;
          v18 -= 24;
        }
        while (v18);
      }
      MEMORY[0x1CAA32FB4](v10, 8);
      v15 = *(_QWORD **)a1;
      LODWORD(v21) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      v21 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v21)
      {
        v22 = 0;
        do
        {
          v23 = &v15[v22];
          *v23 = 0;
          v23[1] = 0;
          v22 += 3;
        }
        while (3 * v21 != v22);
      }
    }
    sub_1C5834558((uint64_t)v15, v21, (uint64_t)a2, &v25);
    v6 = *(_DWORD *)(a1 + 8);
    v5 = v25;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*(_QWORD *)v5 || *(_DWORD *)(v5 + 8) || *(_DWORD *)(v5 + 12))
    --*(_DWORD *)(a1 + 12);
  *(_OWORD *)v5 = *a2;
  *(_QWORD *)(v5 + 16) = 0;
  return v5 + 16;
}

_DWORD *sub_1C583143C(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1C476B2A4(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
  }
  return result;
}

llvm::UndefValue **sub_1C583148C(uint64_t a1, uint64_t ***this, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  llvm::UndefValue *v21;
  uint64_t v22;
  llvm::ValueAsMetadata *v23;
  llvm::Value *v24;
  void *ZExtOrBitCast;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t **v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Constant *v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  llvm::Constant **v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  llvm::UndefValue *v52;
  uint64_t v53;
  uint64_t **i;
  int v55;
  unsigned int v56;
  int v57;
  char v58;
  uint64_t ***v59;
  uint64_t ***v60;
  uint64_t ***v61;
  uint64_t **v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t **v66;
  uint64_t **v67;
  uint64_t *j;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  int v75;
  llvm::Value **v76;
  llvm::Value *PointerCast;
  uint64_t **v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  llvm::Value *v83;
  unsigned int v84;
  uint64_t ***v85;
  llvm::Value *v86;
  int v87;
  char v88;
  uint64_t **v89;
  uint64_t *v90;
  llvm *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t ***v96;
  int v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t **v101;
  uint64_t v102;
  uint64_t ***v103;
  uint64_t v104;
  uint64_t ***v105;
  uint64_t ***v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t ***v110;
  uint64_t *ii;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  unint64_t PrimitiveSizeInBits;
  char *v116;
  size_t v117;
  char *v118;
  char *v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  BOOL v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  char v137;
  uint64_t v138;
  size_t *p_nel;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  llvm::Type *v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t *v157;
  int v158;
  llvm::Value **v159;
  llvm::Value *v160;
  uint64_t v161;
  int v162;
  BOOL v163;
  uint64_t v164;
  llvm::Value **v165;
  BOOL v166;
  llvm::Value *v167;
  llvm::Value *v168;
  int v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  llvm::Value *v173;
  char v174;
  uint64_t v175;
  int v176;
  llvm::Value *v177;
  llvm::Type *v178;
  unsigned int v179;
  unsigned int *v180;
  uint64_t v181;
  const char *v182;
  int v183;
  llvm::Value *v184;
  int v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t ****v191;
  uint64_t ***v192;
  int v193;
  int v194;
  uint64_t ***v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t **v201;
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t ***v205;
  int v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t *v210;
  BOOL v211;
  const char *v212;
  int v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  int v221;
  BOOL v222;
  unsigned int v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  llvm::PHINode *v227;
  const char *v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned __int8 *v236;
  unsigned __int8 *v237;
  uint64_t v238;
  llvm::Value **v239;
  uint64_t *v240;
  unsigned __int8 *v241;
  _QWORD *v242;
  unsigned int *v243;
  _BYTE *v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  unint64_t *v248;
  _BYTE *v249;
  uint64_t **v250;
  uint64_t **v251;
  uint64_t *v252;
  llvm::ValueSymbolTable *v253;
  llvm::Value *v254;
  llvm::ValueAsMetadata **v255;
  uint64_t v256;
  llvm::ValueAsMetadata *v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  llvm::Instruction *v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t ***v268;
  uint64_t **v269;
  int v270;
  uint64_t v271;
  uint64_t *v272;
  llvm *v273;
  llvm *v274;
  uint64_t *v275;
  unint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t ***v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  const llvm::APInt *v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  int v290;
  int v291;
  const llvm::BasicBlock *v292;
  uint64_t jj;
  uint64_t kk;
  _QWORD *v295;
  _QWORD *v296;
  unsigned int v297;
  _QWORD *v298;
  int v299;
  BOOL v300;
  uint64_t ***v301;
  uint64_t v302;
  llvm::ValueHandleBase *v303;
  uint64_t v304;
  _QWORD *v305;
  const llvm::APInt *v306;
  uint64_t v307;
  llvm::ValueHandleBase *v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  unsigned int v313;
  uint64_t ****v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  _QWORD *v320;
  uint64_t v321;
  void *v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  int v326;
  uint64_t v327;
  llvm::Type *v328;
  int v329;
  const llvm::BasicBlock **v330;
  uint64_t v331;
  llvm::Type *v332;
  int v333;
  llvm::Constant **v334;
  const llvm::BasicBlock *v335;
  uint64_t *v336;
  llvm::Constant *v337;
  size_t v338;
  unsigned int v339;
  uint64_t *v340;
  uint64_t v341;
  int v342;
  char v343;
  uint64_t Not;
  uint64_t *v345;
  size_t v346;
  unsigned int v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  llvm *v356;
  int v357;
  int v358;
  llvm::Value ***v359;
  uint64_t **v360;
  uint64_t **v361;
  uint64_t *v362;
  unsigned int v363;
  char *v364;
  unsigned __int8 *v365;
  int v366;
  BOOL v367;
  unsigned int *v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  unsigned int *v374;
  unsigned int *v375;
  llvm::Value *v376;
  uint64_t v377;
  llvm::Value ***v378;
  llvm::Value *v379;
  uint64_t v380;
  llvm::Value ***v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  llvm::Value *v385;
  uint64_t v386;
  int v387;
  unsigned __int8 *v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  llvm::ValueHandleBase *v392;
  int v393;
  llvm *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t ***v398;
  uint64_t v399;
  size_t v400;
  uint64_t v401;
  const llvm::APInt *v402;
  int v403;
  uint64_t v404;
  uint64_t ***v405;
  uint64_t v406;
  BOOL v407;
  llvm::APInt *v408;
  unsigned int v409;
  llvm::ConstantInt *v410;
  unsigned int v411;
  char v412;
  BOOL v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  llvm::Value **v417;
  unsigned int v418;
  llvm::Value *v419;
  uint64_t v420;
  uint64_t k;
  uint64_t v422;
  unsigned int v423;
  uint64_t v424;
  int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  llvm *v432;
  int v433;
  int v434;
  _QWORD *v435;
  char *v436;
  void *v437;
  void *v438;
  _QWORD *v439;
  llvm::PHINode *v440;
  char *v441;
  uint64_t v442;
  _QWORD *v443;
  _QWORD *v444;
  uint64_t v445;
  int v446;
  int v447;
  uint64_t ***v448;
  uint64_t **v449;
  uint64_t *v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  uint64_t v454;
  int v455;
  unsigned int v456;
  llvm::PHINode **v457;
  llvm::PHINode *v458;
  llvm::PHINode **v459;
  int v460;
  BOOL v461;
  unsigned int v462;
  llvm::PHINode **v463;
  void **v464;
  void *v465;
  uint64_t v466;
  uint64_t v467;
  llvm::ConstantInt *v468;
  unsigned int v469;
  uint64_t v470;
  void *v472;
  uint64_t v473;
  uint64_t v474;
  void *v475;
  uint64_t v476;
  llvm::ConstantInt *v477;
  unsigned int v478;
  char v479;
  uint64_t *v480;
  llvm::ValueSymbolTable *v481;
  _QWORD *v482;
  char *v483;
  size_t v484;
  size_t v485;
  _QWORD *v486;
  llvm::Value *v487;
  uint64_t v488;
  _QWORD *v489;
  _QWORD *v490;
  llvm::Instruction *v491;
  uint64_t m;
  int v493;
  unsigned int v494;
  llvm::Value *v495;
  unsigned int v496;
  llvm *v497;
  uint64_t v498;
  llvm::CastInst *v499;
  llvm::PHINode *v500;
  uint64_t v501;
  _QWORD *v502;
  llvm::Instruction *v503;
  _QWORD *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  llvm::CastInst **v509;
  llvm::CastInst *v510;
  int v511;
  int v512;
  llvm::CastInst *v513;
  uint64_t v514;
  char *v515;
  uint64_t v516;
  llvm::Value *v517;
  unsigned int v518;
  uint64_t v519;
  uint64_t v520;
  _QWORD **v521;
  _QWORD **n;
  _QWORD **v523;
  _QWORD **v524;
  _QWORD **v525;
  unsigned int v526;
  uint64_t v527;
  uint64_t v529;
  unint64_t v530;
  unsigned int v531;
  uint64_t v532;
  const llvm::BasicBlock *v533;
  uint64_t v534;
  llvm::Type *v535;
  int v536;
  uint64_t ***v537;
  int v538;
  llvm::Type *v539;
  char v540;
  uint64_t v541;
  uint64_t v542[4];
  __int16 v543;
  __int128 v544;
  unint64_t v545;
  __int16 v546;
  uint64_t v547;
  uint64_t v548;
  int v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  void *v553[2];
  __int128 v554;
  _QWORD v555[14];
  void *v556;
  uint64_t v557;
  _QWORD v558[2];
  __int16 v559;
  void *__base;
  size_t __nel;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  char v565;
  uint64_t v566;

  v7 = a1;
  v566 = *MEMORY[0x1E0C80C00];
  v8 = *(_OWORD *)(a1 + 120);
  v9 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)v553 = *(_OWORD *)(a1 + 88);
  v554 = v9;
  v555[1] = *((_QWORD *)&v8 + 1);
  v555[0] = this;
  v10 = *((_DWORD *)this + 5);
  if ((v10 & 0x40000000) != 0)
  {
    v12 = (uint64_t *)*(this - 1);
    v11 = v10 & 0x7FFFFFF;
  }
  else
  {
    v11 = v10 & 0x7FFFFFF;
    v12 = (uint64_t *)&this[-4 * v11];
  }
  __base = &v562;
  __nel = 0x800000000;
  if (v11 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)&v562, v11, 8);
    v13 = __nel;
    v15 = (uint64_t *)__base;
    v14 = __nel;
  }
  else
  {
    v13 = 0;
    if (!v11)
    {
      v19 = &v562;
      goto LABEL_10;
    }
    v14 = 0;
    v15 = &v562;
  }
  v16 = 32 * v11;
  v17 = &v15[v14];
  do
  {
    v18 = *v12;
    v12 += 4;
    *v17++ = v18;
    v16 -= 32;
  }
  while (v16);
  v19 = (uint64_t *)__base;
LABEL_10:
  LODWORD(__nel) = v13 + v11;
  v21 = llvm::SimplifyInstructionWithOperands((llvm *)this, (uint64_t)v19, (v13 + v11), (uint64_t)v553, a5, a6);
  if (__base == &v562)
  {
    if (v21)
    {
LABEL_12:
      v22 = v7;
      v23 = (llvm::ValueAsMetadata *)this;
      v24 = v21;
      return sub_1C577F888(v22, v23, v24);
    }
  }
  else
  {
    free(__base);
    if (v21)
      goto LABEL_12;
  }
  v27 = this[5];
  v28 = (uint64_t **)v27[5];
  v541 = v7;
  if (v28 == v27 + 5
    || (v28 ? (v29 = v28 - 3) : (v29 = 0),
        (v30 = *((unsigned __int8 *)v29 + 16), (v30 - 29) > 0xA)
     || ((v31 = v30 - 38, v51 = v31 > 0x38, v32 = (1 << v31) & 0x100060000000001, !v51)
       ? (v33 = v32 == 0)
       : (v33 = 1),
         v33)))
  {
    v34 = *((_DWORD *)this + 5);
    v35 = v34 & 0x7FFFFFF;
    if ((v34 & 0x7FFFFFFu) >= 3)
    {
      if ((v34 & 0x40000000) != 0)
      {
        v37 = (uint64_t *)*(this - 1);
        v36 = v34 & 0x7FFFFFF;
      }
      else
      {
        v36 = v35;
        v37 = (uint64_t *)&this[-4 * v35];
      }
      v38 = 32 * v36;
      while (1)
      {
        v39 = *v37;
        if (*v37)
        {
          if (*(_BYTE *)(v39 + 16) == 67)
            break;
        }
        v37 += 4;
        v38 -= 32;
        if (!v38)
          goto LABEL_65;
      }
      v40 = **(llvm::Constant ***)(v39 - 32);
      if (v40)
      {
        __base = &v562;
        __nel = 0x400000000;
        if ((v34 & 0x40000000) != 0)
          v41 = (uint64_t *)*(this - 1);
        else
          v41 = (uint64_t *)&this[-4 * v36];
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v45 = &v41[4 * v36];
        do
        {
          v46 = *v41;
          v47 = *(unsigned __int8 *)(*v41 + 16);
          if (*v41 && v47 == 67)
          {
            v48 = *(llvm::Constant ***)(v46 - 32);
            if (*v48 != v40)
              goto LABEL_61;
            v49 = *(_QWORD *)(v46 + 8);
            if (!v49)
              goto LABEL_61;
            v50 = *(_QWORD *)(v49 + 8);
            if (v50)
            {
              while (*(_QWORD *)(v50 + 24) == *(_QWORD *)(v49 + 24))
              {
                v49 = *(_QWORD *)(v49 + 8);
                v50 = *(_QWORD *)(v50 + 8);
                if (!v50)
                  goto LABEL_48;
              }
LABEL_61:
              ZExtOrBitCast = 0;
              v7 = v541;
              goto LABEL_62;
            }
LABEL_48:
            if (v42 >= HIDWORD(__nel))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)&v562, v42 + 1, 8);
              v42 = __nel;
            }
            *((_QWORD *)__base + v42) = v48;
            v42 = __nel + 1;
            LODWORD(__nel) = __nel + 1;
            ++v44;
          }
          else
          {
            if (v46)
              v51 = v47 > 0x14;
            else
              v51 = 1;
            if (v51)
            {
              ZExtOrBitCast = 0;
              goto LABEL_62;
            }
            v52 = sub_1C537D3B8((llvm *)0x26, *v41, v40, 0);
            if (sub_1C537D3B8((llvm *)0x27, (uint64_t)v52, *(llvm::Constant **)v46, 0) != (llvm::UndefValue *)v46)
              goto LABEL_61;
            v53 = __nel;
            if (__nel >= (unint64_t)HIDWORD(__nel))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)&v562, __nel + 1, 8);
              v53 = __nel;
            }
            *((_QWORD *)__base + v53) = v52;
            v42 = __nel + 1;
            LODWORD(__nel) = __nel + 1;
            ++v43;
          }
          v41 += 4;
          v7 = v541;
        }
        while (v41 != v45);
        ZExtOrBitCast = 0;
        if (!v43 || v44 < 2)
          goto LABEL_62;
        if ((*((_BYTE *)this + 23) & 0x10) == 0)
        {
          v437 = 0;
          v436 = &byte_1C871356D;
LABEL_693:
          LOWORD(v555[0]) = 773;
          v553[0] = v436;
          v553[1] = v437;
          *(_QWORD *)&v554 = ".shrunk";
          v439 = operator new(0x48uLL);
          v439[1] = v40;
          v440 = (llvm::PHINode *)(v439 + 1);
          *v439 = 0;
          v439[2] = 0;
          v439[3] = 0x4000000000000053;
          *((_OWORD *)v439 + 2) = 0u;
          v441 = (char *)(v439 + 4);
          *((_OWORD *)v439 + 3) = 0u;
          *((_DWORD *)v439 + 16) = 0;
          *((_DWORD *)v439 + 17) = v35;
          llvm::Value::setName((uint64_t ***)v439 + 1, (uint64_t)v553);
          v442 = *((unsigned int *)v439 + 17);
          v443 = operator new(40 * v442);
          *v439 = v443;
          if ((_DWORD)v442)
          {
            v444 = &v443[4 * v442];
            do
            {
              *v443 = 0;
              v443[1] = 0;
              v443[2] = 0;
              v443[3] = v440;
              v443 += 4;
            }
            while (v443 != v444);
          }
          v445 = 0;
          v446 = v34 & 0x7FFFFFF;
          do
          {
            v447 = *((_DWORD *)this + 5);
            if ((v447 & 0x40000000) != 0)
              v448 = (uint64_t ***)*(this - 1);
            else
              v448 = &this[-4 * (v447 & 0x7FFFFFF)];
            sub_1C477667C(v440, *((_QWORD *)__base + v445), (uint64_t)(&v448[4 * *((unsigned int *)this + 15)])[v445]);
            ++v445;
          }
          while (v446 != (_DWORD)v445);
          v449 = this[5];
          v450 = (uint64_t *)(this + 3);
          v439[6] = v449;
          *((_WORD *)v449 + 9) &= ~0x8000u;
          if ((*((_BYTE *)v439 + 31) & 0x10) != 0)
          {
            v480 = v449[7];
            if (v480)
            {
              v481 = (llvm::ValueSymbolTable *)v480[13];
              if (v481)
                llvm::ValueSymbolTable::reinsertValue(v481, v440);
            }
          }
          v451 = *v450;
          v439[4] = *v450;
          v439[5] = v450;
          *(_QWORD *)(v451 + 8) = v441;
          *v450 = (uint64_t)v441;
          v7 = v541;
          v452 = *(_QWORD *)(v541 + 32);
          v553[0] = v440;
          if ((*(_BYTE *)(v452 + 2088) & 1) != 0)
          {
            v454 = v452 + 2096;
            v453 = 16;
          }
          else
          {
            v453 = *(_DWORD *)(v452 + 2104);
            if (!v453)
            {
              v463 = 0;
              goto LABEL_718;
            }
            v454 = *(_QWORD *)(v452 + 2096);
          }
          v455 = v453 - 1;
          v456 = v455 & ((v440 >> 4) ^ (v440 >> 9));
          v457 = (llvm::PHINode **)(v454 + 8 * v456);
          v458 = *v457;
          if (v440 == *v457)
          {
LABEL_721:
            v467 = (uint64_t)*this;
            LOWORD(v555[0]) = 257;
            ZExtOrBitCast = llvm::CastInst::CreateZExtOrBitCast((uint64_t *)v440, v467, (uint64_t)v553, 0);
LABEL_62:
            if (__base != &v562)
              free(__base);
            if (ZExtOrBitCast)
              return (llvm::UndefValue **)ZExtOrBitCast;
            goto LABEL_65;
          }
          v459 = 0;
          v460 = 1;
          while (v458 != (llvm::PHINode *)-4096)
          {
            if (v459)
              v461 = 0;
            else
              v461 = v458 == (llvm::PHINode *)-8192;
            if (v461)
              v459 = v457;
            v462 = v456 + v460++;
            v456 = v462 & v455;
            v457 = (llvm::PHINode **)(v454 + 8 * v456);
            v458 = *v457;
            if (v440 == *v457)
              goto LABEL_721;
          }
          if (v459)
            v463 = v459;
          else
            v463 = v457;
LABEL_718:
          v464 = (void **)sub_1C4E08FFC(v452 + 2088, (uint64_t)v553, v553, v463);
          *v464 = v553[0];
          v465 = v553[0];
          v466 = *(unsigned int *)(v452 + 2232);
          if (v466 >= *(_DWORD *)(v452 + 2236))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v452 + 2224, v452 + 2240, v466 + 1, 8);
            LODWORD(v466) = *(_DWORD *)(v452 + 2232);
          }
          *(_QWORD *)(*(_QWORD *)(v452 + 2224) + 8 * v466) = v465;
          ++*(_DWORD *)(v452 + 2232);
          goto LABEL_721;
        }
        v351 = ***this;
        v352 = *(_QWORD *)(v351 + 152);
        v353 = *(unsigned int *)(v351 + 168);
        if ((_DWORD)v353)
        {
          LODWORD(v354) = (v353 - 1) & ((this >> 4) ^ (this >> 9));
          v355 = v352 + 16 * v354;
          v356 = *(llvm **)v355;
          if (*(uint64_t ****)v355 == this)
          {
LABEL_692:
            v435 = *(_QWORD **)(v355 + 8);
            v438 = (void *)*v435;
            v436 = (char *)(v435 + 2);
            v437 = v438;
            goto LABEL_693;
          }
          v357 = 1;
          while (v356 != (llvm *)-4096)
          {
            v358 = v354 + v357++;
            v354 = v358 & (v353 - 1);
            v356 = *(llvm **)(v352 + 16 * v354);
            if (v356 == (llvm *)this)
            {
              v355 = v352 + 16 * v354;
              goto LABEL_692;
            }
          }
        }
        v355 = v352 + 16 * v353;
        goto LABEL_692;
      }
    }
  }
LABEL_65:
  for (i = this[1]; i; i = (uint64_t **)i[1])
  {
    if (*((_BYTE *)i[3] + 16) != 75)
    {
      v55 = *((_DWORD *)this + 5);
      goto LABEL_81;
    }
  }
  v55 = *((_DWORD *)this + 5);
  v56 = v55 & 0x7FFFFFF;
  if ((v55 & 0x7FFFFFF) == 0)
    goto LABEL_81;
  v57 = 0;
  v58 = 0;
LABEL_70:
  ++v57;
  do
  {
    if ((v55 & 0x40000000) != 0)
      v59 = (uint64_t ***)*(this - 1);
    else
      v59 = &this[-4 * v56];
    v60 = sub_1C577D4C8(v7, (uint64_t)v59[4 * (v57 - 1)]);
    if (v60)
    {
      sub_1C6125834((uint64_t)this, v57 - 1, (uint64_t)v60);
      v55 = *((_DWORD *)this + 5);
      v56 = v55 & 0x7FFFFFF;
      v58 = 1;
      if ((v55 & 0x7FFFFFF) == v57)
        return (llvm::UndefValue **)this;
      goto LABEL_70;
    }
    v55 = *((_DWORD *)this + 5);
    v56 = v55 & 0x7FFFFFF;
    v33 = v57++ == (v55 & 0x7FFFFFF);
  }
  while (!v33);
  if ((v58 & 1) != 0)
    return (llvm::UndefValue **)this;
LABEL_81:
  if ((v55 & 0x40000000) != 0)
    v61 = (uint64_t ***)*(this - 1);
  else
    v61 = &this[-4 * (v55 & 0x7FFFFFF)];
  v62 = *v61;
  v63 = *((unsigned __int8 *)*v61 + 16);
  if (v63 > 0x1B)
  {
    v64 = *((unsigned __int8 *)v61[4] + 16);
    if (v64 >= 0x1C && v63 == v64)
    {
      v70 = v62[1];
      if (v70)
      {
        v71 = v70[1];
        if (v71)
        {
          while (*(_QWORD *)(v71 + 24) == v70[3])
          {
            v70 = (uint64_t *)v70[1];
            v71 = *(_QWORD *)(v71 + 8);
            if (!v71)
              goto LABEL_100;
          }
        }
        else
        {
LABEL_100:
          ZExtOrBitCast = sub_1C582E294(v7, (uint64_t)this);
          if (ZExtOrBitCast)
            return (llvm::UndefValue **)ZExtOrBitCast;
        }
      }
    }
  }
  if (*((_BYTE *)*this + 8) == 15)
  {
    v66 = this[5];
    v67 = v66 + 5;
    for (j = v66[6]; ; j = (uint64_t *)j[1])
    {
      if (j == (uint64_t *)v67)
        goto LABEL_110;
      v69 = j - 3;
      if (!j)
        v69 = 0;
      if (*((_BYTE *)v69 + 16) != 83)
        break;
    }
    v72 = *((unsigned __int8 *)j - 8) - 38;
    v51 = v72 > 0x38;
    v73 = (1 << v72) & 0x100060000000001;
    if (!v51 && v73 != 0)
      j = (uint64_t *)j[1];
    if (v67 == (uint64_t **)j)
      goto LABEL_110;
    v75 = *((_DWORD *)this + 5);
    if ((v75 & 0x40000000) != 0)
      v76 = (llvm::Value **)*(this - 1);
    else
      v76 = (llvm::Value **)&this[-4 * (v75 & 0x7FFFFFF)];
    v167 = *v76;
    v168 = llvm::Value::stripPointerCasts(*v76);
    __base = &v564;
    __nel = (size_t)&v564;
    v562 = 4;
    LODWORD(v563) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&__base, (uint64_t)v167);
    if (v167 == v168)
    {
LABEL_274:
      PointerCast = 0;
      v176 = 1;
    }
    else
    {
      v169 = *((_DWORD *)this + 5);
      if ((v169 & 0x40000000) != 0)
      {
        v171 = (uint64_t *)*(this - 1);
        v170 = v169 & 0x7FFFFFF;
      }
      else
      {
        v170 = v169 & 0x7FFFFFF;
        v171 = (uint64_t *)&this[-4 * v170];
      }
      if (v170)
      {
        v172 = 32 * v170;
        do
        {
          v173 = (llvm::Value *)*v171;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&__base, *v171);
          if (v174)
          {
            if (llvm::Value::stripPointerCasts(v173) != v168)
              goto LABEL_274;
          }
          v171 += 4;
          v172 -= 32;
        }
        while (v172);
      }
      v175 = (uint64_t)*this;
      LOWORD(v555[0]) = 257;
      PointerCast = llvm::CastInst::CreatePointerCast(v168, v175, (uint64_t)v553, 0);
      v176 = 0;
    }
    if ((void *)__nel != __base)
      free((void *)__nel);
    ZExtOrBitCast = PointerCast;
    if (!v176)
      return (llvm::UndefValue **)ZExtOrBitCast;
    goto LABEL_111;
  }
LABEL_110:
  PointerCast = 0;
LABEL_111:
  v78 = this[1];
  if (!v78 || v78[1])
  {
    ZExtOrBitCast = PointerCast;
    goto LABEL_114;
  }
  if (*((_BYTE *)*this + 8) != 13)
    goto LABEL_572;
  v159 = (llvm::Value **)v78[3];
  if (!v159)
    goto LABEL_572;
  if (*((_BYTE *)v159 + 16) != 76)
    goto LABEL_572;
  v160 = v159[1];
  if (!v160)
    goto LABEL_572;
  while (2)
  {
    v161 = *((_QWORD *)v160 + 3);
    v162 = *(unsigned __int8 *)(v161 + 16);
    if (v161)
      v163 = (v162 - 62) > 0xFFFFFFFD;
    else
      v163 = 0;
    if (!v163)
    {
      if (v161 && v162 == 62)
      {
        v164 = -(uint64_t)(*(_DWORD *)(v161 + 20) & 0x7FFFFFF);
        goto LABEL_255;
      }
      goto LABEL_259;
    }
    v164 = -1;
LABEL_255:
    v165 = *(llvm::Value ***)(v161 + 32 * v164);
    if (v165)
      v166 = v165 == v159;
    else
      v166 = 0;
    if (!v166)
    {
LABEL_259:
      v160 = (llvm::Value *)*((_QWORD *)v160 + 1);
      if (!v160)
        goto LABEL_572;
      continue;
    }
    break;
  }
  v258 = *(_QWORD *)(v7 + 80);
  v259 = *((_DWORD *)*v159 + 2);
  if ((v259 & 0xFE) == 0x12)
    v259 = *(_DWORD *)(**((_QWORD **)*v159 + 2) + 8);
  v260 = *(unsigned int *)(llvm::DataLayout::getPointerAlignElem(*(llvm::DataLayout **)(v7 + 80), v259 >> 8) + 4);
  sub_1C4768AD0(v258, *(_QWORD *)*(v159 - 4));
  v263 = v262;
  if ((_DWORD)v20 == 1)
  if (v263 != v260)
    goto LABEL_572;
  v553[0] = &v554;
  v553[1] = (void *)0x400000000;
  v264 = *((_DWORD *)this + 5);
  v265 = 0;
  v266 = v264 & 0x7FFFFFF;
  if ((v264 & 0x7FFFFFF) != 0)
  {
    LODWORD(v267) = 0;
    while (1)
    {
      if ((v264 & 0x40000000) != 0)
        v268 = (uint64_t ***)*(this - 1);
      else
        v268 = &this[-4 * v266];
      v269 = v268[4 * v267];
      v270 = *((unsigned __int8 *)v269 + 16);
      if (v269 && v270 == 75)
      {
        v271 = (uint64_t)*(v269 - 4);
        if (v265 >= HIDWORD(v553[1]))
        {
          v276 = v265 + 1;
LABEL_416:
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v553, (uint64_t)&v554, v276, 8);
          *((_QWORD *)v553[0] + LODWORD(v553[1])) = v271;
LABEL_418:
          v265 = v553[1];
          goto LABEL_411;
        }
        *((_QWORD *)v553[0] + v265) = v271;
      }
      else
      {
        v272 = v269[1];
        if (v272)
        {
          while (1)
          {
            v271 = v272[3];
            if (*(_BYTE *)(v271 + 16) == 76 && *(llvm::Value **)v271 == *v159)
            {
              v273 = (v264 & 0x40000000) != 0 ? (llvm *)*(this - 1) : (llvm *)&this[-4 * (v264 & 0x7FFFFFF)];
              if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(v541 + 72), (const llvm::Instruction *)v272[3], *((const llvm::BasicBlock **)v273 + 4 * *((unsigned int *)this + 15) + v267)))
              {
                break;
              }
              v264 = *((_DWORD *)this + 5);
              v274 = (v264 & 0x40000000) != 0 ? (llvm *)*(this - 1) : (llvm *)&this[-4 * (v264 & 0x7FFFFFF)];
              if (*(_QWORD *)(v271 + 40) == *((_QWORD *)v274 + 4 * *((unsigned int *)this + 15) + v267))
                break;
            }
            v272 = (uint64_t *)v272[1];
            if (!v272)
            {
              v270 = *((unsigned __int8 *)v269 + 16);
              goto LABEL_404;
            }
          }
          v265 = v553[1];
          if (LODWORD(v553[1]) >= HIDWORD(v553[1]))
          {
            v276 = LODWORD(v553[1]) + 1;
            goto LABEL_416;
          }
          *((_QWORD *)v553[0] + LODWORD(v553[1])) = v271;
        }
        else
        {
LABEL_404:
          if (v270 != 83)
          {
            ZExtOrBitCast = 0;
            if (!v269 || v270 != 60)
              goto LABEL_569;
            v275 = v269[1];
            if (!v275 || v275[1])
              goto LABEL_568;
          }
          v265 = v553[1];
          if (LODWORD(v553[1]) >= HIDWORD(v553[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v553, (uint64_t)&v554, LODWORD(v553[1]) + 1, 8);
            *((_QWORD *)v553[0] + LODWORD(v553[1])) = v269;
            goto LABEL_418;
          }
          *((_QWORD *)v553[0] + LODWORD(v553[1])) = v269;
        }
      }
LABEL_411:
      LODWORD(v553[1]) = ++v265;
      v267 = (v267 + 1);
      v264 = *((_DWORD *)this + 5);
      v266 = v264 & 0x7FFFFFF;
      if ((_DWORD)v267 == (v264 & 0x7FFFFFF))
      {
        v359 = (llvm::Value ***)v553[0];
        goto LABEL_532;
      }
    }
  }
  v267 = 0;
  v359 = (llvm::Value ***)&v554;
LABEL_532:
  v360 = this[5];
  v361 = v360 + 5;
  v362 = v360[6];
  if (v362 == (uint64_t *)v361)
  {
LABEL_563:
    if (!v265)
    {
LABEL_568:
      ZExtOrBitCast = 0;
      goto LABEL_569;
    }
    v377 = v265;
    v378 = &v359[v265];
    v379 = *v159;
    v380 = 8 * v377;
    v381 = v359;
    while (**v381 != v379 || *((_BYTE *)*v381 + 16) == 76)
    {
      ++v381;
      v380 -= 8;
      if (!v380)
        goto LABEL_568;
    }
    do
    {
      v417 = *v359;
      if (**v359 != v379)
      {
        v418 = *((unsigned __int8 *)v417 + 16);
        if (v418 >= 0x1C)
        {
          if (v418 - 29 < 0xB)
            goto LABEL_568;
          if (v418 == 83)
          {
            v419 = v417[5];
            v420 = (uint64_t)v419 + 40;
            for (k = *((_QWORD *)v419 + 6); ; k = *(_QWORD *)(k + 8))
            {
              if (k == v420)
                goto LABEL_568;
              v422 = k - 24;
              if (!k)
                v422 = 0;
              if (*(_BYTE *)(v422 + 16) != 83)
                break;
            }
            v423 = *(unsigned __int8 *)(k - 8) - 38;
            v51 = v423 > 0x38;
            v424 = (1 << v423) & 0x100060000000001;
            if (!v51 && v424 != 0)
              k = *(_QWORD *)(k + 8);
            if (v420 == k)
              goto LABEL_568;
          }
        }
      }
      ++v359;
    }
    while (v359 != v378);
    v426 = v264 & 0x7FFFFFF;
    if ((v264 & 0x10000000) == 0)
    {
      v484 = 0;
      v483 = &byte_1C871356D;
      goto LABEL_756;
    }
    v427 = ***this;
    v428 = *(_QWORD *)(v427 + 152);
    v429 = *(unsigned int *)(v427 + 168);
    if ((_DWORD)v429)
    {
      LODWORD(v430) = (v429 - 1) & ((this >> 4) ^ (this >> 9));
      v431 = v428 + 16 * v430;
      v432 = *(llvm **)v431;
      if (*(uint64_t ****)v431 == this)
      {
LABEL_755:
        v482 = *(_QWORD **)(v431 + 8);
        v485 = *v482;
        v483 = (char *)(v482 + 2);
        v484 = v485;
LABEL_756:
        LOWORD(v564) = 773;
        __base = v483;
        __nel = v484;
        v562 = (uint64_t)".ptr";
        v486 = operator new(0x48uLL);
        v486[1] = v379;
        v487 = (llvm::Value *)(v486 + 1);
        *v486 = 0;
        v486[2] = 0;
        v486[3] = 0x4000000000000053;
        *((_OWORD *)v486 + 2) = 0u;
        *((_OWORD *)v486 + 3) = 0u;
        *((_DWORD *)v486 + 16) = 0;
        *((_DWORD *)v486 + 17) = v426;
        llvm::Value::setName((uint64_t ***)v486 + 1, (uint64_t)&__base);
        v488 = *((unsigned int *)v486 + 17);
        v489 = operator new(40 * v488);
        *v486 = v489;
        if ((_DWORD)v488)
        {
          v490 = &v489[4 * v488];
          do
          {
            *v489 = 0;
            v489[1] = 0;
            v489[2] = 0;
            v489[3] = v487;
            v489 += 4;
          }
          while (v489 != v490);
        }
        sub_1C57D7818(v541, v487, (uint64_t)this);
        __base = (void *)1;
        for (m = 8; m != 72; m += 16)
          *(void **)((char *)&__base + m) = (void *)-4096;
        v493 = *((_DWORD *)this + 5);
        v494 = v493 & 0x7FFFFFF;
        if ((v493 & 0x7FFFFFF) == 0)
        {
LABEL_762:
          v495 = *(llvm::Value **)*(v159 - 4);
          v559 = 257;
          ZExtOrBitCast = llvm::CastInst::CreateBitOrPointerCast(v487, v495, (llvm::Type *)&v556, 0, v491);
          if ((__base & 1) == 0)
            MEMORY[0x1CAA32FB4](__nel, 8);
          goto LABEL_569;
        }
        v496 = 0;
        while (1)
        {
          v497 = (v493 & 0x40000000) != 0 ? (llvm *)*(this - 1) : (llvm *)&this[-4 * v494];
          v498 = *((_QWORD *)v497 + 4 * *((unsigned int *)this + 15) + v496);
          v499 = (llvm::CastInst *)*((_QWORD *)v553[0] + v496);
          *(_QWORD *)&v544 = v499;
          if (*(llvm::Value **)v499 != *v159)
            break;
          v500 = v487;
          v501 = (uint64_t)v499;
LABEL_770:
          sub_1C477667C(v500, v501, v498);
          ++v496;
          v493 = *((_DWORD *)this + 5);
          v494 = v493 & 0x7FFFFFF;
          if (v496 == (v493 & 0x7FFFFFF))
            goto LABEL_762;
        }
        v502 = sub_1C61B5A08(&__base, (uint64_t *)&v544);
        v501 = v502[1];
        if (v501)
        {
LABEL_773:
          v500 = v487;
          goto LABEL_770;
        }
        v504 = v502;
        if ((*((_BYTE *)v499 + 23) & 0x10) == 0)
        {
          v514 = 0;
          v515 = &byte_1C871356D;
LABEL_783:
          v517 = *v159;
          v559 = 773;
          v556 = v515;
          v557 = v514;
          v558[0] = ".ptr";
          v502[1] = llvm::CastInst::CreateBitOrPointerCast(v499, v517, (llvm::Type *)&v556, 0, v503);
          v518 = *((unsigned __int8 *)v499 + 16);
          if (v518 >= 0x1C)
          {
            if (v518 != 83)
            {
              n = (_QWORD **)*((_QWORD *)v499 + 4);
              goto LABEL_807;
            }
            v524 = (_QWORD **)*((_QWORD *)v499 + 5);
            v521 = v524 + 5;
            for (n = (_QWORD **)v524[6]; n != v521; n = (_QWORD **)n[1])
            {
              v525 = n - 3;
              if (!n)
                v525 = 0;
              if (*((_BYTE *)v525 + 16) != 83)
              {
LABEL_802:
                v526 = *((unsigned __int8 *)n - 8) - 38;
                v51 = v526 > 0x38;
                v527 = (1 << v526) & 0x100060000000001;
                if (!v51 && v527 != 0)
                  n = (_QWORD **)n[1];
                goto LABEL_807;
              }
            }
          }
          else
          {
            v519 = *(_QWORD *)(*(_QWORD *)(v498 + 56) + 80);
            if (v519)
              v520 = v519 - 24;
            else
              v520 = 0;
            v521 = (_QWORD **)(v520 + 40);
            for (n = *(_QWORD ***)(v520 + 48); n != v521; n = (_QWORD **)n[1])
            {
              v523 = n - 3;
              if (!n)
                v523 = 0;
              if (*((_BYTE *)v523 + 16) != 83)
                goto LABEL_802;
            }
          }
          n = v521;
LABEL_807:
          if (n)
            v529 = (uint64_t)(n - 3);
          else
            v529 = 0;
          sub_1C57D7818(v541, (llvm::Value *)v504[1], v529);
          v501 = v504[1];
          goto LABEL_773;
        }
        v505 = ***(_QWORD ***)v499;
        v506 = *(_QWORD *)(v505 + 152);
        v507 = *(unsigned int *)(v505 + 168);
        if ((_DWORD)v507)
        {
          LODWORD(v508) = (v507 - 1) & ((v499 >> 4) ^ (v499 >> 9));
          v509 = (llvm::CastInst **)(v506 + 16 * v508);
          v510 = *v509;
          if (*v509 == v499)
          {
LABEL_782:
            v513 = v509[1];
            v516 = *(_QWORD *)v513;
            v515 = (char *)v513 + 16;
            v514 = v516;
            goto LABEL_783;
          }
          v511 = 1;
          while (v510 != (llvm::CastInst *)-4096)
          {
            v512 = v508 + v511++;
            v508 = v512 & (v507 - 1);
            v510 = *(llvm::CastInst **)(v506 + 16 * v508);
            if (v510 == v499)
            {
              v509 = (llvm::CastInst **)(v506 + 16 * v508);
              goto LABEL_782;
            }
          }
        }
        v509 = (llvm::CastInst **)(v506 + 16 * v507);
        goto LABEL_782;
      }
      v433 = 1;
      while (v432 != (llvm *)-4096)
      {
        v434 = v430 + v433++;
        v430 = v434 & (v429 - 1);
        v432 = *(llvm **)(v428 + 16 * v430);
        if (v432 == (llvm *)this)
        {
          v431 = v428 + 16 * v430;
          goto LABEL_755;
        }
      }
    }
    v431 = v428 + 16 * v429;
    goto LABEL_755;
  }
  v363 = 0;
  v364 = (char *)&this[-4 * v267];
  while (1)
  {
    if (v362)
      v365 = (unsigned __int8 *)(v362 - 3);
    else
      v365 = 0;
    v366 = v365[16];
    v367 = v366 == 83;
    if (v366 == 83)
      v368 = (unsigned int *)v365;
    else
      v368 = 0;
    if (!v362 || !v367)
      goto LABEL_563;
    if (v363 > dword_1ED811120)
      goto LABEL_568;
    if (v368 != (unsigned int *)this)
    {
      v20 = *(char **)v368;
      if (*(llvm::Value **)v368 == *v159)
        break;
    }
LABEL_546:
    ++v363;
    v362 = (uint64_t *)v362[1];
    if (v362 == (uint64_t *)v361)
      goto LABEL_563;
  }
  v20 = (char *)v368[5];
  v369 = v20 & 0x7FFFFFF;
  if ((v20 & 0x7FFFFFF) != 0)
  {
    v370 = 0;
    v261 = (llvm::Instruction *)&v368[-8 * v369];
    do
    {
      v371 = v364;
      if ((v264 & 0x40000000) != 0)
        v371 = (char *)*(this - 1);
      v372 = 0;
      v373 = *(_QWORD *)&v371[32 * *((unsigned int *)this + 15) + 8 * v370];
      while (1)
      {
        v374 = &v368[-8 * v369];
        if ((v20 & 0x40000000) != 0)
          v374 = (unsigned int *)*((_QWORD *)v368 - 1);
        if (*(_QWORD *)&v374[8 * v368[15] + 2 * v372] == v373)
          break;
        if (v369 == ++v372)
        {
          LODWORD(v372) = -1;
          break;
        }
      }
      v375 = &v368[-8 * v369];
      if ((v20 & 0x40000000) != 0)
        v375 = (unsigned int *)*((_QWORD *)v368 - 1);
      if (v359[v370] != *(llvm::Value ***)&v375[8 * v372])
        goto LABEL_546;
    }
    while (++v370 != v369);
  }
  v376 = *(llvm::Value **)*(v159 - 4);
  LOWORD(v564) = 257;
  ZExtOrBitCast = llvm::CastInst::CreateBitOrPointerCast((llvm::CastInst *)v365, v376, (llvm::Type *)&__base, 0, v261);
LABEL_569:
  if (v553[0] != &v554)
    free(v553[0]);
  v7 = v541;
  if (ZExtOrBitCast)
    return (llvm::UndefValue **)ZExtOrBitCast;
LABEL_572:
  v382 = (uint64_t)this[1][3];
  if (v382 && *(_BYTE *)(v382 + 16) == 83)
  {
    __base = &v564;
    __nel = (size_t)&v564;
    v562 = 16;
    LODWORD(v563) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&__base, (uint64_t)this);
    v383 = v382;
    while (1)
    {
      v384 = *(_QWORD *)(v383 + 8);
      if (!v384)
        break;
      if (*(_QWORD *)(v384 + 8))
        goto LABEL_581;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&__base, v383);
      if (!(_BYTE)v20)
        break;
      if (HIDWORD(v562) - (_DWORD)v563 == 16)
        goto LABEL_581;
      v383 = *(_QWORD *)(*(_QWORD *)(v383 + 8) + 24);
      if (!v383)
        goto LABEL_582;
      if (*(_BYTE *)(v383 + 16) != 83)
      {
LABEL_581:
        LOBYTE(v383) = 0;
LABEL_582:
        ZExtOrBitCast = PointerCast;
        goto LABEL_585;
      }
    }
    v385 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)*this, (llvm::Type *)v20);
    ZExtOrBitCast = sub_1C577F888(v7, (llvm::ValueAsMetadata *)this, v385);
    LOBYTE(v383) = 1;
LABEL_585:
    if ((void *)__nel != __base)
      free((void *)__nel);
    if ((v383 & 1) != 0)
      return (llvm::UndefValue **)ZExtOrBitCast;
  }
  else
  {
    ZExtOrBitCast = PointerCast;
  }
  v386 = *(_QWORD *)(v382 + 8);
  if (v386)
  {
    v387 = *(unsigned __int8 *)(v382 + 16);
    if (!*(_QWORD *)(v386 + 8)
      && (v387 == 62 || (v387 - 41) <= 0x11)
      && *(uint64_t ****)(v386 + 24) == this)
    {
      v24 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)*this, (llvm::Type *)v20);
      v22 = v7;
      v23 = (llvm::ValueAsMetadata *)this;
      return sub_1C577F888(v22, v23, v24);
    }
  }
  else
  {
    v387 = *(unsigned __int8 *)(v382 + 16);
  }
  if (!v382)
    goto LABEL_114;
  if (v387 != 81)
    goto LABEL_114;
  if (*((_BYTE *)*this + 8) != 13)
    goto LABEL_114;
  if ((*(_WORD *)(v382 + 18) & 0x3E) != 0x20)
    goto LABEL_114;
  v388 = *(unsigned __int8 **)(v382 - 32);
  if (!v388
    || v388[16] > 0x14u
    || (llvm::Constant::isNullValue(*(llvm::Constant **)(v382 - 32)) & 1) == 0
    && (sub_1C4E71060((uint64_t)&__base, (llvm::Constant *)v388) & 1) == 0)
  {
    goto LABEL_114;
  }
  v389 = *((_DWORD *)this + 5);
  v390 = v389 & 0x7FFFFFF;
  if ((v389 & 0x7FFFFFF) == 0)
    goto LABEL_114;
  v391 = 0;
  v540 = 0;
  v392 = 0;
  while (1)
  {
LABEL_605:
    v393 = *((_DWORD *)this + 5);
    v394 = (v393 & 0x40000000) != 0 ? (llvm *)*(this - 1) : (llvm *)&this[-4 * (v393 & 0x7FFFFFF)];
    v395 = *((_QWORD *)v394 + 4 * *((unsigned int *)this + 15) + v391);
    v396 = *(_QWORD *)(v395 + 40);
    if (v396 == v395 + 40)
    {
      v397 = 0;
      if ((v393 & 0x40000000) == 0)
        goto LABEL_615;
    }
    else
    {
      if (v396)
        v397 = v396 - 24;
      else
        v397 = 0;
      if (*(unsigned __int8 *)(v397 + 16) - 29 >= 0xB)
        v397 = 0;
      if ((v393 & 0x40000000) == 0)
      {
LABEL_615:
        v398 = &this[-4 * (v393 & 0x7FFFFFF)];
        goto LABEL_618;
      }
    }
    v398 = (uint64_t ***)*(this - 1);
LABEL_618:
    v399 = (uint64_t)v398[4 * v391];
    if (!v397 || !*(_QWORD *)(v397 + 40))
    {
      v413 = v399 && *(unsigned __int8 *)(v399 + 16) >= 0x1Cu;
      if (!v413 || (v397 = (uint64_t)v398[4 * v391], !*(_QWORD *)(v399 + 40)))
        v397 = 0;
    }
    v400 = *(_QWORD *)(v541 + 56);
    v401 = *(_QWORD *)(v541 + 72);
    __base = *(void **)(v541 + 80);
    __nel = v400;
    v562 = v397;
    v563 = v401;
    v564 = 0;
    v565 = 1;
    if (!sub_1C4F84D74(v399, 0, (uint64_t)&__base))
      break;
    if (!v392)
    {
      v403 = *((_DWORD *)this + 5);
      if ((v403 & 0x40000000) != 0)
      {
        v405 = (uint64_t ***)*(this - 1);
        v404 = v403 & 0x7FFFFFF;
      }
      else
      {
        v404 = v403 & 0x7FFFFFF;
        v405 = &this[-4 * v404];
      }
      if (v404)
      {
        v406 = 32 * v404;
        do
        {
          v392 = (llvm::ValueHandleBase *)*v405;
          if (*v405)
            v407 = *((_BYTE *)*v405 + 16) == 16;
          else
            v407 = 0;
          if (v407)
          {
            v408 = (llvm::ValueHandleBase *)((char *)v392 + 24);
            v409 = *((_DWORD *)v392 + 8);
            if (v409 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(v408) != v409)
                goto LABEL_644;
            }
            else if (*(_QWORD *)v408)
            {
              goto LABEL_644;
            }
          }
          v405 += 4;
          v406 -= 32;
        }
        while (v406);
      }
      v410 = (llvm::ConstantInt *)**this;
      v411 = *((_DWORD *)*this + 2);
      LODWORD(__nel) = v411 >> 8;
      if (v411 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__base, 1, 0);
      }
      else
      {
        if (v411 <= 0xFF)
          v412 = 0;
        else
          v412 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v411);
        __base = (void *)(v412 & 1);
      }
      v392 = llvm::ConstantInt::get(v410, (llvm::LLVMContext *)&__base, v402);
      if (__nel >= 0x41 && __base)
        MEMORY[0x1CAA32F9C](__base, 0x1000C8000313F17);
    }
LABEL_644:
    if (v392 == (llvm::ValueHandleBase *)v399)
      goto LABEL_645;
    sub_1C577E2C8(v541, (uint64_t)this, v391++, (uint64_t)v392);
    v540 = 1;
    if (v391 == v390)
      return (llvm::UndefValue **)this;
  }
  v399 = (uint64_t)v392;
LABEL_645:
  ++v391;
  v392 = (llvm::ValueHandleBase *)v399;
  if (v391 != v390)
    goto LABEL_605;
  v7 = v541;
  if ((v540 & 1) != 0)
    return (llvm::UndefValue **)this;
LABEL_114:
  v79 = *((_DWORD *)this + 5);
  v80 = v79 & 0x7FFFFFF;
  if ((v79 & 0x7FFFFFF) == 0)
  {
LABEL_134:
    v89 = this[5];
    v90 = v89[6];
    if (v90)
      v91 = (llvm *)(v90 - 3);
    else
      v91 = 0;
    if (v91 != (llvm *)this)
    {
      v92 = *((_DWORD *)v91 + 5);
      v93 = v92 & 0x7FFFFFF;
      if ((v92 & 0x7FFFFFF) != 0)
      {
        v94 = 0;
        while (1)
        {
          v95 = *((_DWORD *)this + 5);
          if ((v95 & 0x40000000) != 0)
            v96 = (uint64_t ***)*(this - 1);
          else
            v96 = &this[-4 * (v95 & 0x7FFFFFF)];
          v97 = *((_DWORD *)v91 + 5);
          if ((v97 & 0x40000000) != 0)
            v98 = (_DWORD *)*((_QWORD *)v91 - 1);
          else
            v98 = (_DWORD *)((char *)v91 - 32 * (v97 & 0x7FFFFFF));
          v99 = *((unsigned int *)this + 15);
          v100 = (&v96[4 * v99])[v94];
          v101 = *(uint64_t ***)&v98[8 * *((unsigned int *)v91 + 15) + 2 * v94];
          if (v100 == v101)
            goto LABEL_147;
          if ((v95 & 0x40000000) != 0)
          {
            v103 = (uint64_t ***)*(this - 1);
            v102 = v95 & 0x7FFFFFF;
            if ((*((_DWORD *)this + 5) & 0x7FFFFFF) != 0)
            {
LABEL_153:
              v104 = 0;
              do
              {
                v105 = &this[-4 * v102];
                if ((v95 & 0x40000000) != 0)
                  v105 = (uint64_t ***)*(this - 1);
                if ((&v105[4 * v99])[v104] == v101)
                  goto LABEL_159;
              }
              while (v102 != ++v104);
            }
          }
          else
          {
            v102 = v95 & 0x7FFFFFF;
            v103 = &this[-4 * v102];
            if ((*((_DWORD *)this + 5) & 0x7FFFFFF) != 0)
              goto LABEL_153;
          }
          LODWORD(v104) = -1;
LABEL_159:
          if ((v95 & 0x40000000) != 0)
            v106 = (uint64_t ***)*(this - 1);
          else
            v106 = &this[-4 * v102];
          v107 = (uint64_t)v103[4 * v94];
          v108 = (uint64_t)v106[4 * v104];
          (&v106[4 * v99])[v94] = v101;
          sub_1C6125834((uint64_t)this, v94, v108);
          v109 = *((_DWORD *)this + 5);
          if ((v109 & 0x40000000) != 0)
            v110 = (uint64_t ***)*(this - 1);
          else
            v110 = &this[-4 * (v109 & 0x7FFFFFF)];
          (&v110[4 * *((unsigned int *)this + 15)])[v104] = v100;
          sub_1C6125834((uint64_t)this, v104, v107);
LABEL_147:
          if (++v94 == v93)
          {
            v89 = this[5];
            break;
          }
        }
      }
    }
    v7 = v541;
    if (v89[5] != (uint64_t *)(v89 + 5))
    {
      for (ii = v89[6]; ; ii = (uint64_t *)*((_QWORD *)v21 + 4))
      {
        v21 = (llvm::UndefValue *)(ii - 3);
        v112 = ii ? (uint64_t)(ii - 3) : 0;
        if (!ii || *(_BYTE *)(v112 + 16) != 83)
          break;
        if (v21 != (llvm::UndefValue *)this
          && (llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)this, (const llvm::Instruction *)(ii - 3)) & 1) != 0)
        {
          goto LABEL_12;
        }
      }
    }
    if (*((_BYTE *)*this + 8) == 13)
    {
      v113 = *(_QWORD *)(v541 + 80);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*this);
      if ((_DWORD)v114 == 1)
      v116 = *(char **)(v113 + 32);
      v117 = *(_QWORD *)(v113 + 40);
      v118 = &v116[v117];
      if (PrimitiveSizeInBits <= 0xFF)
      {
        v119 = (char *)memchr(v116, (char)PrimitiveSizeInBits, v117);
        if (v119)
          v118 = v119;
      }
      if (v118 - v116 == v117)
      {
        __base = &v562;
        __nel = 0x1000000000;
        v556 = v558;
        v553[0] = v555;
        v553[1] = v555;
        *(_QWORD *)&v554 = 8;
        DWORD2(v554) = 0;
        v558[0] = this;
        v557 = 0x800000001;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)v553, (uint64_t)this);
        v120 = v557;
        if ((_DWORD)v557)
        {
          v121 = 0;
          v122 = 0;
          while (1)
          {
            v123 = *((_QWORD *)v556 + v121);
            v124 = *(_DWORD *)(v123 + 20);
            if ((v124 & 0x40000000) != 0)
            {
              v126 = *(uint64_t **)(v123 - 8);
              v127 = &v126[4 * *(unsigned int *)(v123 + 60)];
              v125 = v124 & 0x7FFFFFF;
              v128 = &v127[v125];
            }
            else
            {
              v125 = v124 & 0x7FFFFFF;
              v126 = (uint64_t *)(v123 - 32 * v125);
              v127 = &v126[4 * *(unsigned int *)(v123 + 60)];
              v128 = &v127[v125];
            }
            if (v125)
              v129 = v127 == v128;
            else
              v129 = 1;
            if (!v129)
            {
              v130 = 32 * v125 - 32;
              v131 = v127 + 1;
              do
              {
                v132 = *v126;
                if (*v126 && *(_BYTE *)(v132 + 16) == 33 && *(_QWORD *)(v132 + 40) == *(v131 - 1))
                {
LABEL_261:
                  ZExtOrBitCast = 0;
                  goto LABEL_421;
                }
                if (v131 == v128)
                  break;
                v126 += 4;
                v133 = v130;
                v130 -= 32;
                ++v131;
              }
              while (v133);
            }
            v134 = *(_QWORD *)(v123 + 8);
            if (v134)
              break;
LABEL_239:
            v121 = (v122 + 1);
            v122 = v121;
            if (v120 == (_DWORD)v121)
              goto LABEL_240;
          }
          v536 = v122;
          while (1)
          {
            v135 = *(_QWORD *)(v134 + 24);
            v136 = *(unsigned __int8 *)(v135 + 16);
            if (!v135 || v136 != 83)
              break;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)v553, *(_QWORD *)(v134 + 24));
            if (v137)
            {
              v138 = v557;
              if (v557 >= (unint64_t)HIDWORD(v557))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v556, (uint64_t)v558, v557 + 1, 8);
                v138 = v557;
              }
              *((_QWORD *)v556 + v138) = v135;
              p_nel = (size_t *)&v557;
LABEL_236:
              ++*(_DWORD *)p_nel;
            }
            v134 = *(_QWORD *)(v134 + 8);
            if (!v134)
            {
              v120 = v557;
              v122 = v536;
              goto LABEL_239;
            }
          }
          if (v136 == 54)
          {
            v142 = *(_QWORD *)(v135 + 8);
            if (!v142)
              goto LABEL_261;
            if (*(_QWORD *)(v142 + 8))
              goto LABEL_261;
            v143 = *(_QWORD *)(v142 + 24);
            if (*(_BYTE *)(v143 + 16) != 66)
              goto LABEL_261;
            v144 = *(_DWORD *)(v135 + 20);
            v145 = (v144 & 0x40000000) != 0 ? *(_QWORD *)(v135 - 8) : v135 - 32 * (v144 & 0x7FFFFFF);
            if (*(_BYTE *)(*(_QWORD *)(v145 + 32) + 16) != 16)
              goto LABEL_261;
            v146 = *(llvm::Type **)v135;
            if ((*(_DWORD *)(*(_QWORD *)v135 + 8) & 0xFE) == 0x12)
              v146 = (llvm::Type *)**((_QWORD **)v146 + 2);
            v147 = llvm::Type::getPrimitiveSizeInBits(v146);
            if ((v144 & 0x40000000) != 0)
              v148 = *(_QWORD *)(v135 - 8);
            else
              v148 = v135 - 32 * (v144 & 0x7FFFFFF);
            v149 = *(_QWORD *)(v148 + 32);
            v150 = (_QWORD *)(v149 + 24);
            v151 = *(_DWORD *)(v149 + 32);
            if (v151 >= 0x41)
            {
              if (v151 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v149 + 24)) > 0x40)
                goto LABEL_420;
              v150 = (_QWORD *)*v150;
            }
            if (*v150 >= (unint64_t)v147)
            {
LABEL_420:
              ZExtOrBitCast = 0;
              v7 = v541;
              goto LABEL_421;
            }
            v7 = v541;
            if ((v144 & 0x40000000) != 0)
              v152 = *(_QWORD *)(v135 - 8);
            else
              v152 = v135 - 32 * (v144 & 0x7FFFFFF);
            v153 = *(_QWORD *)(v152 + 32);
            v154 = (_QWORD *)(v153 + 24);
            if (*(_DWORD *)(v153 + 32) >= 0x41u)
              v154 = (_QWORD *)*v154;
            v155 = (_QWORD *)*v154;
            v156 = __nel;
            if (__nel >= (unint64_t)HIDWORD(__nel))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)&v562, __nel + 1, 16);
              v156 = __nel;
            }
            v157 = (uint64_t *)((char *)__base + 16 * v156);
            *v157 = v121 | ((_QWORD)v155 << 32);
            v157[1] = v143;
          }
          else
          {
            if (v136 != 66)
              goto LABEL_261;
            v140 = __nel;
            if (__nel >= (unint64_t)HIDWORD(__nel))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)&v562, __nel + 1, 16);
              v140 = __nel;
            }
            v141 = (char *)__base + 16 * v140;
            *v141 = v121;
            v141[1] = v135;
          }
          p_nel = &__nel;
          goto LABEL_236;
        }
LABEL_240:
        if (!(_DWORD)__nel)
        {
          v177 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)*this, 0);
          ZExtOrBitCast = sub_1C577F888(v7, (llvm::ValueAsMetadata *)this, v177);
          goto LABEL_421;
        }
        if ((_DWORD)__nel == 1)
        {
          v550 = 0;
          v551 = 0;
          v552 = 0;
          v547 = 0;
          v548 = 0;
          v158 = 1;
          v549 = 0;
LABEL_281:
          v179 = 0;
          while (1)
          {
            v180 = (unsigned int *)((char *)__base + 16 * v179);
            v181 = v180[1];
            v537 = (uint64_t ***)*((_QWORD *)v556 + *v180);
            v539 = (llvm::Type *)**((_QWORD **)v180 + 1);
            *(_QWORD *)&v544 = v537;
            DWORD2(v544) = v181;
            v183 = llvm::Type::getPrimitiveSizeInBits(v539);
            if ((_DWORD)v182 == 1)
            HIDWORD(v544) = v183;
            v184 = *(llvm::Value **)sub_1C5831224((uint64_t)&v547, &v544);
            if (v184)
              goto LABEL_309;
            v531 = v179;
            v185 = *((_DWORD *)v537 + 5);
            v186 = v530;
            if ((v185 & 0x10000000) == 0)
            {
              v196 = 0;
              v197 = &byte_1C871356D;
              goto LABEL_294;
            }
            v187 = ***v537;
            v188 = *(_QWORD *)(v187 + 152);
            v189 = *(unsigned int *)(v187 + 168);
            if (!(_DWORD)v189)
              goto LABEL_292;
            LODWORD(v190) = (v189 - 1) & ((v537 >> 4) ^ (v537 >> 9));
            v191 = (uint64_t ****)(v188 + 16 * v190);
            v192 = *v191;
            if (*v191 != v537)
              break;
LABEL_293:
            v195 = v191[1];
            v198 = (uint64_t)*v195;
            v197 = (char *)(v195 + 2);
            v196 = v198;
LABEL_294:
            v543 = 773;
            v542[0] = (uint64_t)v197;
            v542[1] = v196;
            v542[2] = (uint64_t)".off";
            *(_QWORD *)&v544 = v542;
            v530 = v530 & 0xFFFFFFFF00000000 | v181;
            v545 = v186 & 0xFFFFFFFF00000000 | v181;
            v546 = 2050;
            v199 = operator new(0x48uLL);
            v200 = v199;
            v199[1] = v539;
            v184 = (llvm::Value *)(v199 + 1);
            *v199 = 0;
            v199[2] = 0;
            v199[3] = 0x4000000000000053;
            *((_OWORD *)v199 + 2) = 0u;
            v201 = (uint64_t **)(v199 + 4);
            *((_OWORD *)v199 + 3) = 0u;
            *((_DWORD *)v199 + 16) = 0;
            if (v537)
            {
              v250 = v537[5];
              v199[6] = v250;
              *((_WORD *)v250 + 9) &= ~0x8000u;
              if ((*((_BYTE *)v199 + 31) & 0x10) != 0)
              {
                v252 = v250[7];
                if (v252)
                {
                  v253 = (llvm::ValueSymbolTable *)v252[13];
                  if (v253)
                    llvm::ValueSymbolTable::reinsertValue(v253, v184);
                }
              }
              v251 = v537[3];
              v200[4] = v251;
              v200[5] = v537 + 3;
              v251[1] = (uint64_t *)v201;
              v537[3] = v201;
            }
            *((_DWORD *)v200 + 17) = v185 & 0x7FFFFFF;
            llvm::Value::setName((uint64_t ***)v184, (uint64_t)&v544);
            v202 = *((unsigned int *)v200 + 17);
            v203 = operator new(40 * v202);
            *v200 = v203;
            if ((_DWORD)v202)
            {
              v204 = &v203[4 * v202];
              do
              {
                *v203 = 0;
                v203[1] = 0;
                v203[2] = 0;
                v203[3] = v184;
                v203 += 4;
              }
              while (v203 != v204);
            }
            v534 = v181;
            v205 = v537;
            v206 = *((_DWORD *)v537 + 5);
            if ((v206 & 0x40000000) != 0)
            {
              v208 = (uint64_t *)*(v537 - 1);
              v209 = &v208[4 * *((unsigned int *)v537 + 15)];
              v207 = v206 & 0x7FFFFFF;
              v210 = &v209[v207];
            }
            else
            {
              v207 = v206 & 0x7FFFFFF;
              v208 = (uint64_t *)&v537[-4 * v207];
              v209 = &v208[4 * *((unsigned int *)v537 + 15)];
              v210 = &v209[v207];
            }
            if (v207)
              v211 = v209 == v210;
            else
              v211 = 1;
            if (!v211)
            {
              v214 = &v208[4 * v207];
              while (1)
              {
                v542[0] = 0;
                v215 = *v209;
                v542[0] = *v209;
                v216 = *v208;
                if (v552)
                {
                  v217 = (v552 - 1) & ((v215 >> 4) ^ (v215 >> 9));
                  v218 = (_QWORD *)(v550 + 16 * v217);
                  v219 = *v218;
                  if (v215 == *v218)
                    goto LABEL_326;
                  v220 = 0;
                  v221 = 1;
                  while (v219 != -4096)
                  {
                    if (v220)
                      v222 = 0;
                    else
                      v222 = v219 == -8192;
                    if (v222)
                      v220 = v218;
                    v223 = v217 + v221++;
                    v217 = v223 & (v552 - 1);
                    v218 = (_QWORD *)(v550 + 16 * v217);
                    v219 = *v218;
                    if (v215 == *v218)
                      goto LABEL_326;
                  }
                  if (v220)
                    v224 = v220;
                  else
                    v224 = v218;
                }
                else
                {
                  v224 = 0;
                }
                v218 = sub_1C4ECCA58((uint64_t)&v550, (uint64_t)v542, v542, v224);
                *v218 = v542[0];
                v218[1] = 0;
LABEL_326:
                v225 = v218[1];
                if (v225)
                {
                  v226 = v542[0];
                  v227 = v184;
                }
                else
                {
                  if ((uint64_t ***)v216 != v205)
                  {
                    *(_QWORD *)&v544 = v205;
                    DWORD2(v544) = v534;
                    v229 = llvm::Type::getPrimitiveSizeInBits(v539);
                    if ((_DWORD)v228 == 1)
                    HIDWORD(v544) = v229;
                    v230 = *(_QWORD *)sub_1C5831224((uint64_t)&v547, &v544);
                    v231 = v542[0];
                    if (v230)
                    {
                      v218[1] = v230;
                      sub_1C477667C(v184, v230, v231);
                    }
                    else
                    {
                      v232 = 0;
                      v233 = *(_QWORD *)(v541 + 24);
                      v234 = *(_QWORD *)(v542[0] + 40);
                      if (v234)
                        v235 = v234 - 24;
                      else
                        v235 = 0;
                      if (*(unsigned __int8 *)(v235 + 16) - 29 >= 0xB)
                        v235 = 0;
                      *(_QWORD *)(v233 + 48) = *(_QWORD *)(v235 + 40);
                      *(_QWORD *)(v233 + 56) = v235 + 24;
                      v236 = *(unsigned __int8 **)(v235 + 48);
                      *(_QWORD *)&v544 = v236;
                      if (v236)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v544, v236, 2);
                        v232 = v544;
                      }
                      sub_1C4774EF4(v233, 0, v232);
                      if ((_QWORD)v544)
                        llvm::MetadataTracking::untrack((uint64_t)&v544, (unsigned __int8 *)v544);
                      v237 = (unsigned __int8 *)v216;
                      if ((_DWORD)v534)
                      {
                        v238 = *(_QWORD *)(v541 + 24);
                        v239 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v216, v534, 0);
                        *(_QWORD *)&v544 = "extract";
                        v546 = 259;
                        v237 = (unsigned __int8 *)sub_1C506ED1C(v238, v216, (uint64_t)v239, (uint64_t)&v544, 0);
                      }
                      v240 = *(uint64_t **)(v541 + 24);
                      *(_QWORD *)&v544 = "extract.t";
                      v546 = 259;
                      v241 = sub_1C4773E38(v240, 38, v237, (uint64_t)v539, (uint64_t)&v544);
                      v218[1] = v241;
                      sub_1C477667C(v184, (uint64_t)v241, v542[0]);
                      if (*(_BYTE *)(v216 + 16) == 83 && v216)
                      {
                        v242 = sub_1C477672C((uint64_t)v553, v216);
                        v243 = v553[1] == v553[0] ? (unsigned int *)((char *)&v554 + 4) : (unsigned int *)&v554;
                        if (v242 != (_QWORD *)((char *)v553[1] + 8 * *v243))
                        {
                          v244 = v556;
                          if ((_DWORD)v557)
                          {
                            v245 = 8 * v557;
                            v246 = (char *)v556;
                            while (*(_QWORD *)v246 != v216)
                            {
                              v246 += 8;
                              v245 -= 8;
                              if (!v245)
                              {
                                v246 = (char *)v556 + 8 * v557;
                                break;
                              }
                            }
                          }
                          else
                          {
                            v246 = (char *)v556;
                          }
                          v247 = __nel;
                          if (__nel >= (unint64_t)HIDWORD(__nel))
                          {
                            v249 = v556;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)&v562, __nel + 1, 16);
                            v244 = v249;
                            v247 = __nel;
                          }
                          v248 = (unint64_t *)((char *)__base + 16 * v247);
                          *v248 = ((unint64_t)(v246 - v244) >> 3) | (unint64_t)(v534 << 32);
                          v248[1] = (unint64_t)v241;
                          LODWORD(__nel) = __nel + 1;
                          ++v158;
                        }
                      }
                    }
                    v205 = v537;
                    goto LABEL_335;
                  }
                  v218[1] = v184;
                  v226 = v542[0];
                  v227 = v184;
                  v225 = (uint64_t)v184;
                }
                sub_1C477667C(v227, v225, v226);
LABEL_335:
                if (++v209 != v210)
                {
                  v208 += 4;
                  if (v208 != v214)
                    continue;
                }
                break;
              }
            }
            sub_1C583143C(&v550);
            *(_QWORD *)&v544 = v205;
            DWORD2(v544) = v534;
            v213 = llvm::Type::getPrimitiveSizeInBits(v539);
            if ((_DWORD)v212 == 1)
            HIDWORD(v544) = v213;
            *(_QWORD *)sub_1C5831224((uint64_t)&v547, &v544) = v184;
            v7 = v541;
            v179 = v531;
LABEL_309:
            sub_1C577F888(v7, *((llvm::ValueAsMetadata **)__base + 2 * v179++ + 1), v184);
            if (v179 == v158)
              goto LABEL_373;
          }
          v193 = 1;
          while (v192 != (uint64_t ***)-4096)
          {
            v194 = v190 + v193++;
            v190 = v194 & (v189 - 1);
            v192 = *(uint64_t ****)(v188 + 16 * v190);
            if (v192 == v537)
            {
              v191 = (uint64_t ****)(v188 + 16 * v190);
              goto LABEL_293;
            }
          }
LABEL_292:
          v191 = (uint64_t ****)(v188 + 16 * v189);
          goto LABEL_293;
        }
        qsort(__base, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1C5834470);
        v158 = __nel;
        v550 = 0;
        v551 = 0;
        v552 = 0;
        v547 = 0;
        v548 = 0;
        v549 = 0;
        if ((_DWORD)__nel)
          goto LABEL_281;
LABEL_373:
        v254 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)*this, v178);
        if ((_DWORD)v557 != 1)
        {
          v255 = (llvm::ValueAsMetadata **)((char *)v556 + 8);
          v256 = 8 * v557 - 8;
          do
          {
            v257 = *v255++;
            sub_1C577F888(v7, v257, v254);
            v256 -= 8;
          }
          while (v256);
        }
        ZExtOrBitCast = sub_1C577F888(v7, (llvm::ValueAsMetadata *)this, v254);
        MEMORY[0x1CAA32FB4](v547, 8);
        MEMORY[0x1CAA32FB4](v550, 8);
LABEL_421:
        if (v553[1] != v553[0])
          free(v553[1]);
        if (v556 != v558)
          free(v556);
        if (__base != &v562)
          free(__base);
        if (ZExtOrBitCast)
          return (llvm::UndefValue **)ZExtOrBitCast;
      }
    }
    v277 = *((_DWORD *)this + 5);
    if ((v277 & 0x40000000) != 0)
    {
      v279 = (uint64_t ***)*(this - 1);
      v278 = v277 & 0x7FFFFFF;
    }
    else
    {
      v278 = v277 & 0x7FFFFFF;
      v279 = &this[-4 * v278];
    }
    v280 = *(_QWORD *)(v7 + 72);
    if (v278)
    {
      v281 = 32 * v278;
      while (*((_BYTE *)*v279 + 16) == 16)
      {
        v279 += 4;
        v281 -= 32;
        if (!v281)
          goto LABEL_435;
      }
      return 0;
    }
LABEL_435:
    v282 = (uint64_t)this[5];
    if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*(_QWORD *)(v7 + 72), v282))
      return 0;
    v284 = **this;
    v285 = *(_QWORD *)(v280 + 24);
    v286 = *(unsigned int *)(v280 + 40);
    if ((_DWORD)v286)
    {
      LODWORD(v287) = (v286 - 1) & ((v282 >> 4) ^ (v282 >> 9));
      v288 = (uint64_t *)(v285 + 16 * v287);
      v289 = *v288;
      if (v282 == *v288)
      {
LABEL_443:
        v292 = **(const llvm::BasicBlock ***)(v288[1] + 8);
        __base = (void *)1;
        for (jj = 8; jj != 136; jj += 16)
          *(void **)((char *)&__base + jj) = (void *)-4096;
        v553[0] = (void *)1;
        for (kk = 1; kk != 17; kk += 2)
          v553[kk] = (void *)-4096;
        v295 = (_QWORD *)*((_QWORD *)v292 + 5);
        if (v295 == (_QWORD *)((char *)v292 + 40))
          goto LABEL_483;
        if (v295)
          v296 = v295 - 3;
        else
          v296 = 0;
        v297 = *((unsigned __int8 *)v296 + 16) - 40;
        if (v297 >= 0xFFFFFFF5)
          v298 = v296;
        else
          v298 = 0;
        v299 = *((unsigned __int8 *)v298 + 16);
        if (v295 && (v299 == 30 ? (v300 = v297 >= 0xFFFFFFF5) : (v300 = 0), v300))
        {
          if ((*((_DWORD *)v298 + 5) & 0x7FFFFFF) == 1)
            goto LABEL_483;
          v301 = (uint64_t ***)*(v298 - 12);
          v302 = *v284;
          v303 = *(llvm::ValueHandleBase **)(*v284 + 1560);
          if (!v303)
          {
            v477 = *(llvm::ConstantInt **)(v302 + 1888);
            v478 = *(_DWORD *)(v302 + 1896);
            LODWORD(v557) = v478 >> 8;
            if (v478 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v556, 1, 0);
            }
            else
            {
              if (v478 <= 0xFF)
                v479 = 0;
              else
                v479 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v478);
              v556 = (void *)(v479 & 1);
            }
            v303 = llvm::ConstantInt::get(v477, (llvm::LLVMContext *)&v556, v283);
            if (v557 >= 0x41 && v556)
              MEMORY[0x1CAA32F9C](v556, 0x1000C8000313F17);
            *(_QWORD *)(v302 + 1560) = v303;
          }
          v304 = *(v298 - 4);
          v556 = v303;
          *(_QWORD *)&v544 = v304;
          sub_1C5833FB4(&__base, (uint64_t *)&v556)[1] = v304;
          v305 = sub_1C5834370(v553, &v544);
          ++*((_DWORD *)v305 + 2);
          v307 = *v284;
          v308 = *(llvm::ValueHandleBase **)(*v284 + 1568);
          if (!v308)
          {
            v468 = *(llvm::ConstantInt **)(v307 + 1888);
            LODWORD(v557) = *(_DWORD *)(v307 + 1896) >> 8;
            if (v557 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v556, 0, 0);
            else
              v556 = 0;
            v308 = llvm::ConstantInt::get(v468, (llvm::LLVMContext *)&v556, v306);
            if (v557 >= 0x41 && v556)
              MEMORY[0x1CAA32F9C](v556, 0x1000C8000313F17);
            *(_QWORD *)(v307 + 1568) = v308;
          }
          v309 = *(v298 - 8);
          v556 = v308;
          *(_QWORD *)&v544 = v309;
          sub_1C5833FB4(&__base, (uint64_t *)&v556)[1] = v309;
          v310 = sub_1C5834370(v553, &v544);
          ++*((_DWORD *)v310 + 2);
        }
        else
        {
          v311 = 0;
          if (!v295)
            goto LABEL_484;
          if (v299 != 31 || v297 < 0xFFFFFFF5)
            goto LABEL_484;
          v313 = *((_DWORD *)v298 + 5);
          if ((v313 & 0x40000000) != 0)
            v314 = (uint64_t ****)*(v298 - 1);
          else
            v314 = (uint64_t ****)&v298[-4 * (v313 & 0x7FFFFFF)];
          v301 = *v314;
          v315 = (v313 >> 1) & 0x3FFFFFF;
          v316 = (v315 - 1);
          if (v315 != 1)
          {
            v317 = 0;
            v318 = 2 * v316;
            do
            {
              v319 = *((_DWORD *)v298 + 5);
              if ((v319 & 0x40000000) != 0)
                v320 = (_QWORD *)*(v298 - 1);
              else
                v320 = &v298[-4 * (v319 & 0x7FFFFFF)];
              v321 = v317 + 2;
              v322 = (void *)v320[4 * ((v317 + 2) & 0xFFFFFFFELL)];
              if (v317 == 0x1FFFFFFFCLL)
                v323 = 1;
              else
                v323 = (v317 + 3);
              v324 = v320[4 * v323];
              v556 = v322;
              *(_QWORD *)&v544 = v324;
              sub_1C5833FB4(&__base, (uint64_t *)&v556)[1] = v324;
              v325 = sub_1C5834370(v553, &v544);
              ++*((_DWORD *)v325 + 2);
              v317 = v321;
            }
            while (v318 != v321);
          }
        }
        if (*v301 == *this)
        {
          v326 = *((_DWORD *)this + 5);
          if ((v326 & 0x40000000) != 0)
          {
            v328 = (llvm::Type *)*(this - 1);
            v327 = v326 & 0x7FFFFFF;
            v535 = (llvm::Type *)((char *)v328 + 32 * v327);
          }
          else
          {
            v327 = v326 & 0x7FFFFFF;
            v328 = (llvm::Type *)&this[-4 * v327];
            v535 = (llvm::Type *)this;
          }
          if (!v327 || v328 == v535)
          {
            v311 = (uint64_t)v301;
            goto LABEL_484;
          }
          v532 = (uint64_t)v301;
          v533 = v292;
          v329 = 0;
          v330 = (const llvm::BasicBlock **)((char *)v328 + 32 * *((unsigned int *)this + 15));
          v331 = 8 * v327 - 8;
          v332 = (llvm::Type *)((char *)v328 + 32);
          v333 = 1;
          do
          {
            v538 = v333;
            v334 = (llvm::Constant **)*((_QWORD *)v332 - 4);
            v335 = *v330;
            v336 = sub_1C58343D0((uint64_t)&__base, (uint64_t)v334);
            v338 = (size_t)&__nel;
            if ((__base & 1) != 0)
            {
              v339 = 8;
            }
            else
            {
              v338 = __nel;
              v339 = v562;
            }
            if ((uint64_t *)(v338 + 16 * v339) != v336
              && (v340 = v336 + 1, *((_DWORD *)sub_1C5834370(v553, v336 + 1) + 2) == 1)
              && ((v341 = *v340, v556 = v533, v557 = v341, v533 == v335) && v341 == v282
               || llvm::DominatorTree::dominates((llvm::DominatorTree *)v280, (const llvm::BasicBlockEdge *)&v556, v335)))
            {
              v342 = 0;
              v343 = 1;
            }
            else
            {
              Not = llvm::ConstantExpr::getNot(v334, v337);
              v345 = sub_1C58343D0((uint64_t)&__base, Not);
              v346 = (size_t)&__nel;
              if ((__base & 1) != 0)
              {
                v347 = 8;
              }
              else
              {
                v346 = __nel;
                v347 = v562;
              }
              if ((uint64_t *)(v346 + 16 * v347) == v345)
                goto LABEL_483;
              v348 = v345 + 1;
              if (*((_DWORD *)sub_1C5834370(v553, v345 + 1) + 2) != 1)
                goto LABEL_483;
              v349 = *v348;
              v556 = v533;
              v557 = v349;
              if ((v533 != v335 || v349 != v282)
                && !llvm::DominatorTree::dominates((llvm::DominatorTree *)v280, (const llvm::BasicBlockEdge *)&v556, v335))
              {
                goto LABEL_483;
              }
              v343 = 0;
              v342 = 1;
            }
            if (((v329 != v342) & ~v538) != 0)
              goto LABEL_483;
            if (v332 == v535)
              break;
            v333 = 0;
            ++v330;
            v350 = v331;
            v331 -= 8;
            v332 = (llvm::Type *)((char *)v332 + 32);
            v329 = v342;
          }
          while (v350);
          if ((v343 & 1) != 0)
          {
            v311 = v532;
            goto LABEL_484;
          }
          v414 = v282 + 40;
          v415 = *(_QWORD *)(v282 + 48);
          if (v415 != v282 + 40)
          {
            while (1)
            {
              v416 = v415 - 24;
              if (!v415)
                v416 = 0;
              if (*(_BYTE *)(v416 + 16) != 83)
                break;
              v311 = 0;
              v415 = *(_QWORD *)(v415 + 8);
              if (v415 == v414)
                goto LABEL_484;
            }
            v469 = *(unsigned __int8 *)(v415 - 8) - 38;
            v51 = v469 > 0x38;
            v470 = (1 << v469) & 0x100060000000001;
            if (!v51 && v470 != 0)
              v415 = *(_QWORD *)(v415 + 8);
            if (v414 != v415)
            {
              v472 = 0;
              v473 = *(_QWORD *)(v541 + 24);
              if (v415)
                v474 = v415 - 24;
              else
                v474 = 0;
              *(_QWORD *)(v473 + 48) = *(_QWORD *)(v474 + 40);
              *(_QWORD *)(v473 + 56) = v474 + 24;
              v475 = *(void **)(v474 + 48);
              v556 = v475;
              if (v475)
              {
                llvm::MetadataTracking::track((uint64_t)&v556, (unsigned __int8 *)v475, 2);
                v472 = v556;
              }
              sub_1C4774EF4(v473, 0, (uint64_t)v472);
              if (v556)
                llvm::MetadataTracking::untrack((uint64_t)&v556, (unsigned __int8 *)v556);
              v476 = *(_QWORD *)(v541 + 24);
              v559 = 257;
              v311 = sub_1C506EAA0(v476, v532, (uint64_t)&v556);
LABEL_484:
              if (((uint64_t)v553[0] & 1) == 0)
                MEMORY[0x1CAA32FB4](v553[1], 8);
              if ((__base & 1) == 0)
                MEMORY[0x1CAA32FB4](__nel, 8);
              if (v311)
              {
                v22 = v541;
                v23 = (llvm::ValueAsMetadata *)this;
                v24 = (llvm::Value *)v311;
                return sub_1C577F888(v22, v23, v24);
              }
              return 0;
            }
          }
        }
LABEL_483:
        v311 = 0;
        goto LABEL_484;
      }
      v290 = 1;
      while (v289 != -4096)
      {
        v291 = v287 + v290++;
        v287 = v291 & (v286 - 1);
        v289 = *(_QWORD *)(v285 + 16 * v287);
        if (v282 == v289)
        {
          v288 = (uint64_t *)(v285 + 16 * v287);
          goto LABEL_443;
        }
      }
    }
    v288 = (uint64_t *)(v285 + 16 * v286);
    goto LABEL_443;
  }
  v81 = 0;
  v82 = 0;
  while (1)
  {
    v83 = (v79 & 0x40000000) != 0 ? (llvm::Value *)(*(this - 1))[v81] : (llvm::Value *)(&this[v81])[-4 * v80];
    if (*((_BYTE *)v83 + 16) != 83)
      break;
    ++v82;
    v81 += 4;
    if (v80 == v82)
      goto LABEL_134;
  }
  if ((_DWORD)v80 - 1 != (_DWORD)v82)
  {
    v84 = v82 + 1;
    do
    {
      v85 = &this[-4 * v80];
      if ((v79 & 0x40000000) != 0)
        v85 = (uint64_t ***)*(this - 1);
      v86 = (llvm::Value *)v85[4 * v84];
      if (v86 != v83 && *((_BYTE *)v86 + 16) != 83)
        goto LABEL_134;
    }
    while ((_DWORD)v80 != ++v84);
  }
  __base = &v564;
  __nel = (size_t)&v564;
  v562 = 16;
  LODWORD(v563) = 0;
  v87 = sub_1C5833EF4((uint64_t)this, (uint64_t)v83, (llvm::SmallPtrSetImplBase *)&__base);
  v88 = v87;
  if (v87)
    ZExtOrBitCast = sub_1C577F888(v7, (llvm::ValueAsMetadata *)this, v83);
  if ((void *)__nel != __base)
    free((void *)__nel);
  if ((v88 & 1) == 0)
    goto LABEL_134;
  return (llvm::UndefValue **)ZExtOrBitCast;
}

uint64_t sub_1C5833EF4(uint64_t a1, uint64_t a2, llvm::SmallPtrSetImplBase *a3)
{
  char v6;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  sub_1C4774094(a3, a1);
  if (!v6)
    return 1;
  if (*((_DWORD *)a3 + 5) - *((_DWORD *)a3 + 6) == 16)
    return 0;
  v8 = *(_DWORD *)(a1 + 20);
  if ((v8 & 0x40000000) == 0)
  {
    v9 = v8 & 0x7FFFFFF;
    v10 = (uint64_t *)(a1 - 32 * v9);
    if (!v9)
      return 1;
LABEL_8:
    v11 = 32 * v9;
    do
    {
      v12 = *v10;
      if (*v10 && *(_BYTE *)(v12 + 16) == 83)
      {
        if ((sub_1C5833EF4() & 1) == 0)
          return 0;
      }
      else if (v12 != a2)
      {
        return 0;
      }
      v10 += 4;
      v11 -= 32;
    }
    while (v11);
    return 1;
  }
  v10 = *(uint64_t **)(a1 - 8);
  v9 = v8 & 0x7FFFFFF;
  if (v9)
    goto LABEL_8;
  return 1;
}

uint64_t *sub_1C5833FB4(_DWORD *a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C5834094((uint64_t)a1, *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_12;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_12:
    sub_1C5834138((uint64_t)a1, v7);
    v8 = 0;
    sub_1C5834094((uint64_t)a1, *a2, &v8);
    result = v8;
  }
  *a1 += 2;
  if (*result != -4096)
    --a1[1];
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1C5834094(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_12;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5834138(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C58342B0(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C58342B0(a1, v14, v9);
}

uint64_t sub_1C58342B0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C5834094((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_1C5834370(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C483DE40((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C483DEE8(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t *sub_1C58343D0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v9;
  int v10;
  uint64_t v11;

  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v2 = 8;
    v3 = a1 + 8;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
    {
      v11 = 0;
      return (uint64_t *)(v3 + 16 * v11);
    }
  }
  v4 = v2 - 1;
  LODWORD(v5) = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (uint64_t *)(v3 + 16 * v5);
  v7 = *v6;
  if (*v6 != a2)
  {
    v9 = 1;
    while (v7 != -4096)
    {
      v10 = v5 + v9++;
      v5 = v10 & v4;
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
        return (uint64_t *)(v3 + 16 * v5);
    }
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v11 = 8;
      v3 = a1 + 8;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      v11 = *(unsigned int *)(a1 + 16);
    }
    return (uint64_t *)(v3 + 16 * v11);
  }
  return v6;
}

uint64_t sub_1C5834470(uint64_t a1, uint64_t a2)
{
  if (sub_1C58344AC(a1, a2))
    return 0xFFFFFFFFLL;
  else
    return sub_1C58344AC(a2, a1);
}

BOOL sub_1C58344AC(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  const char *v6;
  unint64_t PrimitiveSizeInBits;
  const char *v8;
  unint64_t v9;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)a1 > *(_DWORD *)a2)
    return 0;
  v4 = *(_DWORD *)(a1 + 4);
  v5 = *(_DWORD *)(a2 + 4);
  if (v4 < v5)
    return 1;
  if (v4 > v5)
    return 0;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)(a1 + 8));
  if ((_DWORD)v6 == 1)
  v9 = llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)(a2 + 8));
  if ((_DWORD)v8 == 1)
  return PrimitiveSizeInBits < v9;
}

uint64_t sub_1C5834558(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t result;

  if (!a2)
  {
    v11 = 0;
    result = 0;
    goto LABEL_20;
  }
  v4 = 0;
  v5 = *(_DWORD *)(a3 + 8);
  v6 = *(_DWORD *)(a3 + 12);
  v7 = (*(_QWORD *)a3 >> 9) ^ (v5 >> 3) ^ (*(_QWORD *)a3 >> 4) ^ (v6 >> 3);
  v8 = a2 - 1;
  for (i = 1; ; ++i)
  {
    v10 = v7 & v8;
    v11 = a1 + 24 * (v7 & v8);
    if (*(_QWORD *)a3 == *(_QWORD *)v11 && v5 == *(_DWORD *)(v11 + 8) && v6 == *(_DWORD *)(v11 + 12))
    {
      result = 1;
      goto LABEL_20;
    }
    if (*(_QWORD *)v11)
      goto LABEL_7;
    v13 = *(_DWORD *)(v11 + 8);
    if (v13 != 1)
      break;
    v12 = *(_DWORD *)(v11 + 12) == 0;
LABEL_8:
    if (v12 && v4 == 0)
      v4 = a1 + 24 * v10;
    v7 = v10 + i;
  }
  if (v13 || *(_DWORD *)(v11 + 12))
  {
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  result = 0;
  if (v4)
    v11 = v4;
LABEL_20:
  *a4 = v11;
  return result;
}

uint64_t sub_1C5834628()
{
  __int128 v1;
  int v2;
  int *v3;

  v2 = 512;
  v3 = &v2;
  *(_QWORD *)&v1 = "Maximum number phis to handle in intptr/ptrint folding";
  *((_QWORD *)&v1 + 1) = 54;
  sub_1C62A8CFC(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED8110A0, &dword_1C475E000);
}

uint64_t sub_1C5834688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v9;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  llvm::Value **BinOpIdentity;
  unsigned __int8 *v18;
  unsigned int v19;
  llvm::UndefValue *AggregateElement;
  llvm::APInt *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  llvm::Value *Select;
  char v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  llvm::APInt *v41;
  llvm::APInt *v42;
  _QWORD v43[4];
  __int16 v44;
  llvm::APInt *v45;

  v5 = 0;
  if (!a3)
    return v5;
  v7 = *(unsigned __int8 *)(a3 + 16);
  if (v7 < 0x1C || v7 - 59 < 0xFFFFFFEE)
    return v5;
  v9 = *(_QWORD *)(a3 + 8);
  if (!v9 || *(_QWORD *)(v9 + 8) || *(unsigned __int8 *)(a4 + 16) < 0x15u)
    return 0;
  v5 = 0;
  if (v7 > 0x3A)
    return v5;
  if (((1 << v7) & 0x700660000000000) == 0)
  {
    if (((1 << v7) & 0xE2180000000000) == 0)
      return v5;
    if (*(_QWORD *)(a3 - 64) != a4)
      return 0;
    goto LABEL_17;
  }
  if (*(_QWORD *)(a3 - 64) == a4)
  {
LABEL_17:
    v14 = 1;
    goto LABEL_18;
  }
  v5 = 0;
  if (*(_QWORD *)(a3 - 32) != a4)
    return v5;
  v14 = 0;
LABEL_18:
  if (sub_1C4774A9C(a2))
  {
    if (*(unsigned __int8 *)(a2 + 17) >> 1 == 127)
      v15 = -1;
    else
      v15 = *(unsigned __int8 *)(a2 + 17) >> 1;
  }
  else
  {
    v15 = 0;
  }
  v16 = a3 + 32 * v14;
  BinOpIdentity = llvm::ConstantExpr::getBinOpIdentity((llvm::ConstantExpr *)(*(unsigned __int8 *)(a3 + 16) - 28), *(llvm::ConstantFP **)a3, (llvm::Type *)1, (v15 >> 3) & 1);
  v18 = *(unsigned __int8 **)(v16 - 64);
  v45 = 0;
  v43[0] = &v45;
  v43[1] = 0;
  v19 = sub_1C4D89F84((uint64_t)v43, v18);
  if (v18[16] > 0x14u)
    goto LABEL_51;
  if (!v19)
    return 0;
  if (BinOpIdentity && *((_BYTE *)BinOpIdentity + 16) == 16)
    AggregateElement = (llvm::UndefValue *)BinOpIdentity;
  else
    AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)BinOpIdentity, 0);
  v21 = (llvm::UndefValue *)((char *)AggregateElement + 24);
  v42 = v45;
  v22 = *((_DWORD *)AggregateElement + 8);
  if (v22 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AggregateElement + 24)) == v22)
      goto LABEL_42;
LABEL_33:
    v41 = v21;
    v23 = *((_DWORD *)v42 + 2);
    if (v23 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v42) == v23)
        goto LABEL_37;
    }
    else if (!*(_QWORD *)v42)
    {
LABEL_37:
      v21 = v41;
      if (v22 <= 0x40)
      {
        if (!v22 || *(_QWORD *)v41 == 1 || *(_QWORD *)v41 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v22)
          goto LABEL_51;
        goto LABEL_44;
      }
LABEL_42:
      if (llvm::APInt::countLeadingZerosSlowCase(v21) == v22 - 1
        || llvm::APInt::countTrailingOnesSlowCase(v21) == v22)
      {
        goto LABEL_51;
      }
      goto LABEL_44;
    }
    return 0;
  }
  if (*(_QWORD *)v21)
    goto LABEL_33;
  if (!v22)
    goto LABEL_51;
LABEL_44:
  v24 = *((_DWORD *)v42 + 2);
  if (v24 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v42) != v24 - 1
      && llvm::APInt::countTrailingOnesSlowCase(v42) != v24)
    {
      return 0;
    }
  }
  else if (v24)
  {
    if (*(_QWORD *)v42 != 1)
    {
      v5 = 0;
      if (*(_QWORD *)v42 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v24)
        return v5;
    }
  }
LABEL_51:
  v25 = sub_1C4774A9C(a2);
  if ((v15 & 2) == 0 && v25 && !llvm::isKnownNeverNaN(a4, *(uint64_t **)(a1 + 64), 0))
    return 0;
  v26 = *(uint64_t **)(a1 + 24);
  v27 = *(_QWORD *)(a2 - 96);
  if (a5)
    v28 = (uint64_t *)BinOpIdentity;
  else
    v28 = (uint64_t *)v18;
  if (a5)
    v29 = (uint64_t)v18;
  else
    v29 = (uint64_t)BinOpIdentity;
  v44 = 257;
  Select = llvm::IRBuilderBase::CreateSelect(v26, v27, v28, v29, (uint64_t)v43, 0);
  if (sub_1C4774A9C(a2))
    *((_BYTE *)Select + 17) |= 2 * (_BYTE)v15;
  llvm::Value::takeName(Select, (llvm::Value *)a3);
  v31 = *(_BYTE *)(a3 + 16);
  v44 = 257;
  v32 = (char *)operator new(0x80uLL);
  *((_QWORD *)v32 + 8) = *(_QWORD *)a4;
  v5 = (uint64_t)(v32 + 64);
  *((_QWORD *)v32 + 3) = v32 + 64;
  *((_QWORD *)v32 + 5) = 0;
  v33 = v32 + 40;
  *((_QWORD *)v32 + 6) = 0;
  *((_QWORD *)v32 + 7) = v32 + 64;
  *((_QWORD *)v32 + 9) = 0;
  v32[80] = v31;
  v32[81] = 0;
  *((_WORD *)v32 + 41) = 0;
  *((_DWORD *)v32 + 21) = 2;
  *(_OWORD *)(v32 + 88) = 0u;
  *(_OWORD *)(v32 + 104) = 0u;
  *((_DWORD *)v32 + 30) = 0;
  *(_QWORD *)v32 = a4;
  v36 = *(_QWORD *)(a4 + 8);
  v35 = (_QWORD *)(a4 + 8);
  v34 = v36;
  *((_QWORD *)v32 + 1) = v36;
  if (v36)
    *(_QWORD *)(v34 + 16) = v32 + 8;
  *((_QWORD *)v32 + 2) = v35;
  *v35 = v32;
  *((_QWORD *)v32 + 4) = Select;
  if (Select)
  {
    v39 = *((_QWORD *)Select + 1);
    v38 = (_QWORD *)((char *)Select + 8);
    v37 = v39;
    *v33 = v39;
    if (v39)
      *(_QWORD *)(v37 + 16) = v33;
    *((_QWORD *)v32 + 6) = v38;
    *v38 = v32 + 32;
  }
  llvm::Value::setName((uint64_t ***)v32 + 8, (uint64_t)v43);
  llvm::Instruction::copyIRFlags(v5, a3, 1);
  return v5;
}

llvm::UndefValue **sub_1C5834A68(_QWORD *a1, llvm::ValueAsMetadata *a2, uint64_t ***a3)
{
  __int16 v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  _BYTE *v31;
  unsigned int v32;
  llvm::UndefValue **v33;
  int v34;
  int matched;
  const llvm::APInt *v36;
  int v37;
  uint64_t **v38;
  uint64_t v39;
  _DWORD *v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  int v50;
  int v52;
  llvm::Constant **v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  char *v59;
  _BOOL4 v60;
  uint64_t v61;
  llvm::ConstantInt *v62;
  unint64_t v63;
  unint64_t v64;
  llvm::ValueHandleBase *v65;
  uint64_t *v66;
  uint64_t *BinaryIntrinsic;
  llvm::UndefValue **Neg;
  llvm::ValueAsMetadata *v69;
  int v70;
  llvm::ValueAsMetadata *v71;
  unsigned int v72;
  int v73;
  _QWORD ***v74;
  _QWORD **v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  llvm::ValueAsMetadata *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t **v84;
  __int16 v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  void *v89;
  llvm::Constant *v90;
  llvm::Type *v91;
  unsigned int PrimitiveSizeInBits;
  llvm::Constant *v93;
  int v94;
  int v95;
  llvm::ConstantExpr *v96;
  llvm::Value **v97;
  llvm::Type *v98;
  unsigned __int8 *v99;
  unsigned int v100;
  int v101;
  llvm::ValueAsMetadata *v102;
  llvm::Constant *v103;
  llvm::Type *v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t **v108;
  unsigned __int8 *v109;
  llvm::Constant **v110;
  __int16 v111;
  llvm::Type *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t **v115;
  llvm::Constant *v116;
  int v117;
  uint64_t v118;
  int v119;
  unsigned __int8 *v120;
  int v121;
  uint64_t *v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  llvm::ConstantInt **v125;
  __int16 v126;
  int v127;
  unsigned __int8 *v128;
  int v129;
  const llvm::APInt *v130;
  llvm::Constant *v131;
  const void **v132;
  uint64_t v133;
  int v134;
  void *v135;
  uint8x8_t v136;
  unsigned __int8 *v137;
  const void **v138;
  int v139;
  const void **v140;
  uint64_t v141;
  llvm::ConstantInt **v142;
  void **v143;
  unsigned int v144;
  uint64_t v145;
  llvm::ValueAsMetadata *v146;
  llvm::Value *v147;
  uint64_t v148;
  __int16 v149;
  int v150;
  llvm::APInt *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t **v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t **v157;
  uint64_t v158;
  int v159;
  uint64_t **v160;
  uint64_t v161;
  const char *v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  llvm::Constant **v166;
  int v167;
  llvm::APInt **v168;
  int v169;
  unsigned __int8 *v170;
  int v171;
  uint64_t **v172;
  llvm::Type *v173;
  int v174;
  llvm::Constant *v175;
  int v176;
  llvm::Constant *v177;
  llvm::Constant *v178;
  unsigned __int8 v179;
  int v180;
  int v181;
  uint64_t v182;
  llvm::Constant *v183;
  llvm::ConstantInt *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  const llvm::APInt *v189;
  int v190;
  const llvm::APInt *v191;
  int v192;
  llvm::Constant **v193;
  llvm::Constant **v194;
  llvm::Constant *v195;
  uint64_t v196;
  llvm::Constant **v197;
  llvm::Constant **v198;
  llvm::Constant *v199;
  uint64_t v200;
  llvm::Constant *v201;
  uint64_t v202;
  llvm::Type **v203;
  uint64_t v204;
  llvm::Type *v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  llvm::Type *v210;
  llvm::Type *v211;
  llvm::Type *v212;
  uint64_t v213;
  llvm::Value **v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t ****v219;
  uint64_t ***v220;
  int v221;
  int v222;
  const llvm::APInt *v223;
  uint64_t v224;
  llvm::APInt *v225;
  llvm::Value **v226;
  llvm::Value *v227;
  int8x8_t *v228;
  uint64_t v229;
  int v230;
  unsigned __int8 *v231;
  llvm::Value **v232;
  llvm::APInt ***v233;
  llvm::Constant ***v234;
  uint64_t v235;
  llvm::APInt ***v236;
  llvm::APInt **v237;
  llvm::APInt **v238;
  uint64_t v239;
  llvm::Constant ***v240;
  llvm::Constant **v241;
  llvm::Constant **v242;
  uint64_t v243;
  _QWORD **v244;
  uint64_t **v245;
  _QWORD **v246;
  uint64_t v247;
  llvm::Instruction *v248;
  _QWORD **v249;
  uint64_t **v250;
  _QWORD **v251;
  llvm::ConstantInt **v252;
  llvm::UndefValue *v253;
  llvm::UndefValue *v254;
  llvm::Instruction *v255;
  unsigned int v256;
  const void *v257;
  unsigned int v258;
  llvm::ConstantInt **v259;
  unsigned int v260;
  uint64_t v261;
  llvm::ConstantInt *v262;
  unsigned int v263;
  llvm::APInt *v264;
  int8x8_t v265;
  int v266;
  int64_t v267;
  uint64_t v268;
  unint64_t v269;
  unsigned int v270;
  int v271;
  int v272;
  int v273;
  int64_t v274;
  unint64_t v275;
  unsigned int v276;
  uint8x8_t v277;
  uint64_t v278;
  llvm::ConstantInt ***v279;
  uint64_t v280;
  unint64_t v281;
  void *v282;
  uint64_t v283;
  unint64_t v284;
  void *v285;
  uint64_t v286;
  int v287;
  uint8x8_t v288;
  uint64_t v289;
  int v290;
  uint8x8_t v291;
  BOOL v292;
  llvm::Instruction *v293;
  unsigned __int8 *v294;
  llvm::Type *v295;
  uint64_t v296;
  uint64_t v297;
  void **v298;
  llvm::Type *v299;
  unsigned int v300;
  unsigned int v301;
  unint64_t v302;
  llvm::Constant **v303;
  int v304;
  int v305;
  llvm::ConstantExpr *v306;
  llvm::Value **v307;
  uint64_t *v308;
  llvm::Constant *v309;
  llvm::ConstantFP *v310;
  unsigned int v311;
  llvm::Constant *Zero;
  llvm::Constant *v313;
  llvm::Constant *v314;
  uint64_t v315;
  llvm::ValueHandleBase *Sub;
  llvm::Constant *v317;
  llvm::Constant *v318;
  llvm::UndefValue *ICmp;
  llvm::UndefValue *v320;
  void *v321;
  unsigned int v322;
  uint64_t *v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  llvm::Value *Select;
  unsigned __int8 *v328;
  uint64_t v329;
  uint64_t v330;
  int8x8_t ***v331;
  llvm::Type *v332;
  int8x8_t **v333;
  int8x8_t **v334;
  uint64_t v335;
  _QWORD **v336;
  _QWORD **v337;
  _QWORD **v338;
  __int128 v339;
  uint64_t **v340;
  uint64_t v341;
  uint64_t v342;
  llvm::Instruction *v343;
  llvm::Constant *v344;
  llvm::Type *v345;
  size_t v346;
  void *v347;
  const void **v348;
  uint64_t v349;
  llvm::Type *v350;
  void *v351;
  size_t v352;
  unsigned int v353;
  llvm::Constant *v354;
  BOOL v355;
  int v356;
  llvm::Instruction *v357;
  int v358;
  unint64_t v359;
  unsigned int v360;
  int v361;
  llvm::Constant **p_NullValue;
  unsigned int v363;
  int v364;
  int v365;
  int v366;
  int64_t v367;
  unint64_t v368;
  unsigned int v369;
  unsigned int v370;
  unsigned int v371;
  llvm::APInt *v372;
  llvm::Value **v373;
  uint64_t *v374;
  llvm::Value **v375;
  uint64_t *v376;
  const llvm::APInt *v377;
  uint64_t *v378;
  llvm::Value **v379;
  uint64_t *v380;
  uint64_t *v381;
  BOOL v382;
  int v383;
  int64_t v384;
  unint64_t v385;
  unsigned int v386;
  int v387;
  llvm::Value **v388;
  size_t v389;
  size_t v390;
  char *v391;
  uint64_t v392;
  llvm::Constant *v393;
  int v394;
  int v395;
  llvm::Value **v396;
  llvm::APInt *v397;
  llvm::Type **p_p_src;
  size_t v399;
  llvm::Value **v400;
  int8x8_t **v401;
  llvm::Constant *v402;
  char v403;
  uint64_t **v404;
  llvm::Type **v406;
  llvm::Type **v407;
  uint64_t *v408;
  int v409;
  void *v410;
  uint64_t v411;
  llvm::Constant **v412;
  llvm::Constant *v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  llvm::APInt *v417;
  int v418;
  llvm::Constant *v419;
  llvm::Constant *v420;
  llvm::APInt *v421;
  llvm::Value **v422;
  uint64_t v423;
  int v424;
  _QWORD ***v425;
  llvm::Value *v426;
  llvm::Value *v427;
  llvm::Constant *v428;
  llvm::Constant *v429;
  uint64_t v430;
  llvm::Type *v431;
  llvm::Type *v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t ****v439;
  uint64_t ***v440;
  int v441;
  int v442;
  uint64_t v443;
  int v444;
  void *v445;
  uint64_t v446;
  llvm::Constant *v447;
  llvm::APFloatBase *SplatValue;
  llvm::Type *v449;
  int v450;
  void *v451;
  uint64_t *v452;
  uint64_t **v453;
  llvm::Constant *v454;
  int8x8_t **v455;
  _QWORD *v456;
  unsigned int v457;
  int v458;
  int8x8_t **v459;
  _QWORD *v460;
  unsigned int v461;
  int v462;
  int8x8_t **v463;
  char *v464;
  llvm::Type *v465;
  llvm::Value **v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  llvm::Constant *v473;
  uint64_t v474;
  int v475;
  int v476;
  unsigned int v477;
  llvm::Constant *v478;
  int v479;
  int v480;
  uint64_t v481;
  unsigned __int8 *v482;
  __int16 v483;
  int v484;
  int v485;
  char v486;
  char v487;
  llvm::Constant *v488;
  llvm::Constant *v489;
  int v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  _BOOL4 v494;
  uint64_t *v495;
  int v496;
  uint64_t v497;
  uint64_t v498;
  llvm::Type *v499;
  unsigned int v500;
  unsigned int v501;
  int v502;
  _QWORD *v503;
  uint64_t v504;
  int v505;
  llvm::Constant **v506;
  int v507;
  int v508;
  llvm::Constant *v509;
  int v510;
  llvm::Constant **v511;
  unsigned int v512;
  int v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t ****v518;
  uint64_t ***v519;
  int v520;
  int v521;
  int v522;
  int v523;
  llvm::Type *v524;
  unsigned int v525;
  int v526;
  llvm::Constant *v527;
  int v528;
  llvm::Type *v529;
  int v530;
  llvm::Constant *v531;
  unsigned int v532;
  uint64_t **v533;
  uint64_t v534;
  const llvm::APInt *v535;
  llvm::Constant *v536;
  uint64_t v537;
  _QWORD *v538;
  llvm::Value **v539;
  uint64_t v540;
  unsigned __int8 *v541;
  llvm::Value **v542;
  llvm::ConstantInt ***v543;
  const llvm::APInt *v544;
  void *v545;
  llvm::Value **v546;
  void *v547;
  uint64_t v548;
  uint64_t *v549;
  int8x8_t ***v550;
  llvm::Type *v551;
  int8x8_t **v552;
  int8x8_t **v553;
  __int16 v554;
  unsigned __int8 *v555;
  void *v556;
  unsigned __int8 *v557;
  llvm::Constant *v558;
  uint64_t ***v559;
  llvm::Constant *v560;
  unsigned int v561;
  const llvm::APInt *v562;
  _BOOL4 v563;
  uint64_t *v564;
  uint64_t v565;
  llvm::ValueHandleBase *v566;
  uint64_t ***v567;
  llvm::ValueHandleBase **v568;
  uint64_t **v569;
  uint64_t **v570;
  llvm::ValueHandleBase ***v571;
  uint64_t **v572;
  uint64_t **v573;
  int v574;
  int v575;
  uint64_t *v576;
  unsigned __int8 *v577;
  llvm::Constant *v578;
  char isNullValue;
  llvm::Type *v580;
  llvm::Constant *v581;
  int v582;
  llvm::Constant *v583;
  llvm::Type **v584;
  llvm::Constant *v585;
  unsigned int v586;
  uint64_t v587;
  unsigned int v588;
  const void *v589;
  unint64_t v590;
  unsigned int v591;
  void *v592;
  llvm::Type **v593;
  int v594;
  BOOL v595;
  llvm::Type **v596;
  uint64_t v597;
  uint64_t **v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  llvm::Type *v602;
  llvm::Constant **v603;
  llvm::Constant *v604;
  unsigned int v605;
  uint64_t v606;
  unsigned int v607;
  const void *v608;
  unint64_t v609;
  unsigned int v610;
  llvm::APInt *v611;
  llvm::Type **v612;
  int v613;
  char v614;
  llvm::Type **v615;
  uint64_t v616;
  const llvm::APInt *v617;
  uint64_t *v618;
  uint64_t v619;
  llvm::ValueHandleBase *v620;
  uint64_t ***v621;
  llvm::ValueHandleBase **v622;
  uint64_t **v623;
  uint64_t **v624;
  llvm::ValueHandleBase ***v625;
  uint64_t **v626;
  uint64_t **v627;
  uint64_t *v628;
  llvm::APInt *v629;
  unsigned __int8 *v630;
  uint64_t v631;
  llvm::APInt **v632;
  int v633;
  int v634;
  llvm::APInt **v635;
  const llvm::APInt *v636;
  llvm::Instruction *v637;
  const void **v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  void *v642;
  uint64_t v643;
  BOOL v644;
  int v645;
  llvm::APInt *v646;
  llvm::Value **v647;
  uint64_t *v648;
  uint64_t *v649;
  int v650;
  llvm::ConstantInt *v651;
  unsigned __int8 *v652;
  llvm::Value **v653;
  llvm::Type *v654;
  llvm::UndefValue *AggregateElement;
  int v656;
  llvm::Constant **v657;
  int v658;
  llvm::Constant *v659;
  uint64_t *v660;
  uint64_t Declaration;
  uint64_t v662;
  uint64_t **v663;
  char *v664;
  uint64_t v665;
  char *v666;
  int8x8_t ***v667;
  llvm::Type *v668;
  int8x8_t **v669;
  int8x8_t **v670;
  uint64_t v671;
  _QWORD **v672;
  _QWORD **v673;
  _QWORD **v674;
  __int128 v675;
  uint64_t **v676;
  uint64_t v677;
  uint64_t v678;
  llvm::ConstantInt *v679;
  unsigned int v680;
  unint64_t v681;
  llvm::Constant **v682;
  uint64_t v684;
  int v685;
  llvm::APInt *v686;
  llvm::APInt *v687;
  llvm::APInt **v688;
  int v689;
  uint64_t v690;
  void **v691;
  int v692;
  llvm::Type *v693;
  uint64_t v694;
  int v695;
  llvm::Type *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  llvm::Type *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  llvm::Type *v704;
  llvm::Constant **v705;
  uint64_t v706;
  int v707;
  llvm::Type *v708;
  uint64_t v709;
  llvm::Type **v710;
  llvm::Type *v711;
  uint64_t v712;
  llvm::Constant **v713;
  llvm::Constant **v714;
  uint64_t v715;
  int v716;
  llvm::Type *v717;
  uint64_t v718;
  llvm::Type **v719;
  llvm::Type *v720;
  uint64_t v721;
  llvm::Constant **v722;
  int v723;
  llvm::Value **v724;
  llvm::Value ***v725;
  int v726;
  unsigned __int8 *v727;
  llvm::Value **v728;
  unsigned __int8 **v729;
  uint64_t v731;
  uint64_t v732;
  llvm::Constant **v733;
  llvm::Type *v734;
  llvm::Value **v735;
  uint64_t v736;
  char *v737;
  unint64_t v738;
  unint64_t v739;
  unint64_t v740;
  _QWORD **v741;
  uint64_t v742;
  uint64_t *v743;
  unsigned int v744;
  llvm::ConstantInt **v745;
  unsigned int v746;
  llvm::APInt **v747;
  int v748;
  uint64_t v749;
  llvm::Constant *v750;
  llvm::Constant *v751;
  int v752;
  void *v755;
  int v756;
  void *v757;
  int v758;
  void *__src;
  llvm::Constant *v760;
  llvm::Type *v761;
  unsigned int v762;
  llvm::APInt *v763;
  int v764;
  llvm::Constant *NullValue;
  unsigned int v766;
  llvm::APInt *v767;
  unsigned __int16 v768[4];
  llvm::APInt *Add;
  unsigned int v770;
  llvm::Instruction *v771;
  llvm::Type *p_src;
  unint64_t p_Add;
  void *__s1;
  __int128 v775;
  __int128 v776;
  uint64_t v777;
  llvm::Constant *v778;
  __int128 v779;
  llvm::Type *v780;
  __int16 v781;
  uint64_t v782;

  v782 = *MEMORY[0x1E0C80C00];
  v4 = *((_WORD *)a3 + 9);
  if ((v4 & 0x3E) != 0x20 || ((_DWORD)(*a3)[1] & 0xFE) == 0x12)
    goto LABEL_54;
  v5 = v4 & 0x3F;
  if (v5 == 33)
    v6 = (unsigned __int8 *)*((_QWORD *)a2 - 8);
  else
    v6 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  if (v5 == 33)
    v7 = *((_QWORD *)a2 - 4);
  else
    v7 = *((_QWORD *)a2 - 8);
  if (v5 == 33)
    v8 = 2;
  else
    v8 = 1;
  v9 = (uint64_t)*(a3 - 8);
  v10 = (uint64_t)*(a3 - 4);
  if (v7 != v9 && sub_1C4F8BE80((uint64_t ***)*(a3 - 4), a1[14], (uint64_t)a2, a1[9], 0, 0))
  {
    v11 = sub_1C4E69F48(v7, v9, v10, (uint64_t)(a1 + 11), 1, 3);
    if (v11)
    {
      v12 = (uint64_t)v11;
      v13 = (uint64_t)a1;
LABEL_26:
      v18 = sub_1C577E2C8(v13, (uint64_t)a2, v8, v12);
      goto LABEL_48;
    }
    v14 = *(unsigned __int8 *)(v10 + 16);
    v15 = v14 > 0x14 || v14 == 5;
    if (!v15)
    {
      v16 = *(unsigned __int8 *)(v9 + 16);
      if (v16 > 0x14 || v16 == 5)
      {
        if (v7)
        {
          if (*(unsigned __int8 *)(v7 + 16) >= 0x1Cu)
          {
            v54 = *(_QWORD *)(v7 + 8);
            if (v54)
            {
              if (!*(_QWORD *)(v54 + 8) && llvm::isSafeToSpeculativelyExecute(v7, 0, 0, 0))
              {
                v55 = *(_DWORD *)(v7 + 20);
                if ((v55 & 0x40000000) != 0)
                {
                  v57 = *(uint64_t **)(v7 - 8);
                  v56 = v55 & 0x7FFFFFF;
                }
                else
                {
                  v56 = v55 & 0x7FFFFFF;
                  v57 = (uint64_t *)(v7 - 32 * v56);
                }
                if (v56)
                {
                  v411 = 32 * v56;
                  while (*v57 != v9)
                  {
                    v57 += 4;
                    v411 -= 32;
                    if (!v411)
                      goto LABEL_22;
                  }
                  sub_1C5788CC4(a1, v57, v10);
                  return (llvm::UndefValue **)a2;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_22:
  if (v7 != v10)
  {
    if (sub_1C4F8BE80((uint64_t ***)v9, a1[14], (uint64_t)a2, a1[9], 0, 0))
    {
      v17 = sub_1C4E69F48(v7, v10, v9, (uint64_t)(a1 + 11), 1, 3);
      if (v17)
      {
        v12 = (uint64_t)v17;
        v13 = (uint64_t)a1;
        goto LABEL_26;
      }
    }
  }
  v19 = v6[16];
  if (v19 < 0x1C || v6 == 0)
    goto LABEL_54;
  HIDWORD(v22) = v19 - 41;
  LODWORD(v22) = v19 - 41;
  v21 = v22 >> 1;
  v23 = v21 > 6;
  v24 = (1 << v21) & 0x47;
  if (v23 || v24 == 0)
  {
    v28 = 0;
    v27 = 0;
  }
  else
  {
    v26 = v6[17];
    v27 = (v26 >> 1) & 1;
    v28 = (v26 >> 2) & 1;
    v6[17] = v26 & 0xF9;
  }
  v29 = 0;
  if (v19 > 0x3E)
  {
    v30 = 0;
    goto LABEL_40;
  }
  if (((1 << v19) & 0xC1800000000000) != 0)
  {
    v30 = 0;
    v31 = v6 + 17;
    v32 = v6[17];
    v29 = (v32 >> 1) & 1;
  }
  else
  {
    v30 = 0;
    if (v19 != 62)
      goto LABEL_40;
    v29 = 0;
    v31 = v6 + 17;
    v32 = v6[17];
    v30 = (v32 >> 1) & 1;
  }
  *v31 = v32 & 0xFD;
LABEL_40:
  if (sub_1C4E69F48((uint64_t)v6, v9, v10, (uint64_t)(a1 + 11), 0, 3) != (unsigned __int8 *)v7
    && sub_1C4E69F48((uint64_t)v6, v10, v9, (uint64_t)(a1 + 11), 0, 3) != (unsigned __int8 *)v7)
  {
    if (v27)
    {
      v6[17] |= 2u;
      if (!v28)
        goto LABEL_44;
    }
    else if (!v28)
    {
LABEL_44:
      if (v29)
        goto LABEL_45;
      goto LABEL_52;
    }
    v6[17] |= 4u;
    if (v29)
    {
LABEL_45:
      v6[17] |= 2u;
      if (!v30)
        goto LABEL_54;
LABEL_53:
      v6[17] |= 2u;
      goto LABEL_54;
    }
LABEL_52:
    if (!v30)
      goto LABEL_54;
    goto LABEL_53;
  }
  v18 = (uint64_t)sub_1C577F888((uint64_t)a1, a2, (llvm::Value *)v6);
LABEL_48:
  v33 = (llvm::UndefValue **)v18;
  if (v18)
    return v33;
LABEL_54:
  v778 = 0;
  __src = 0;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v34 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  else
    v34 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if (v34 != 13)
    goto LABEL_108;
  matched = llvm::matchSelectPattern((uint64_t)a2, (uint64_t)&v778, &__src, 0, 0);
  v37 = matched;
  if ((matched - 7) > 1)
    __asm { BR              X10 }
  v38 = a3[1];
  if (!v38 || v38[1])
  {
    v39 = *((_QWORD *)__src + 1);
    if (!v39 || *(_QWORD *)(v39 + 8))
      goto LABEL_108;
  }
  if (matched != 7)
  {
    v47 = 0;
    goto LABEL_98;
  }
  v40 = __src;
  p_Add = (unint64_t)v778;
  v41 = *((unsigned __int8 *)__src + 16);
  if (v41 < 0x1C)
  {
    if (v41 != 5)
      goto LABEL_96;
    v46 = *((unsigned __int16 *)__src + 9);
    HIDWORD(v49) = v46 - 13;
    LODWORD(v49) = v46 - 13;
    v48 = v49 >> 1;
    v23 = v48 > 6;
    v50 = (1 << v48) & 0x47;
    if (v23 || v50 == 0)
      goto LABEL_96;
  }
  else
  {
    HIDWORD(v43) = v41 - 41;
    LODWORD(v43) = v41 - 41;
    v42 = v43 >> 1;
    v23 = v42 > 6;
    v44 = (1 << v42) & 0x47;
    if (v23 || v44 == 0)
      goto LABEL_96;
    v46 = v41 - 28;
  }
  if (v46 == 15 && (*((_BYTE *)__src + 17) & 4) != 0)
  {
    v52 = *((_DWORD *)__src + 5);
    v53 = (v52 & 0x40000000) != 0
        ? (llvm::Constant **)*((_QWORD *)__src - 1)
        : (llvm::Constant **)((char *)__src - 32 * (v52 & 0x7FFFFFF));
    if (sub_1C4D8AC3C((uint64_t)&p_src, *v53))
    {
      v58 = v40[5];
      if ((v58 & 0x40000000) != 0)
        v59 = (char *)*((_QWORD *)v40 - 1);
      else
        v59 = (char *)&v40[-8 * (v58 & 0x7FFFFFF)];
      v60 = p_Add == *((_QWORD *)v59 + 4);
      goto LABEL_97;
    }
  }
LABEL_96:
  v60 = 0;
LABEL_97:
  v47 = v60;
LABEL_98:
  v61 = ***(_QWORD ***)a2;
  v62 = *(llvm::ConstantInt **)(v61 + 1888);
  v63 = *(unsigned int *)(v61 + 1896);
  LODWORD(p_Add) = v63 >> 8;
  if (v63 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&p_src, v47, 0);
  }
  else
  {
    if (v63 <= 0xFF)
      v64 = 0;
    else
      v64 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v63);
    p_src = (llvm::Type *)(v64 & v47);
  }
  v65 = llvm::ConstantInt::get(v62, (llvm::LLVMContext *)&p_src, v36);
  if (p_Add >= 0x41 && p_src)
    MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
  v66 = (uint64_t *)a1[3];
  WORD4(v775) = 257;
  BinaryIntrinsic = (uint64_t *)llvm::IRBuilderBase::CreateBinaryIntrinsic(v66, 1, (uint64_t *)v778, (uint64_t)v65, 0, (uint64_t)&p_src);
  if (v37 == 8)
  {
    WORD4(v775) = 257;
    Neg = (llvm::UndefValue **)llvm::BinaryOperator::CreateNeg(BinaryIntrinsic, (llvm::Type *)&p_src, 0);
  }
  else
  {
    Neg = sub_1C577F888((uint64_t)a1, a2, (llvm::Value *)BinaryIntrinsic);
  }
  v33 = Neg;
  if (Neg)
    return v33;
LABEL_108:
  Add = 0;
  LODWORD(v763) = 0;
  p_src = (llvm::Type *)&v763;
  p_Add = (unint64_t)&NullValue;
  __s1 = &Add;
  *(_QWORD *)&v775 = 0;
  v747 = (llvm::APInt **)(a3 - 8);
  if (!*(a3 - 8))
    goto LABEL_128;
  NullValue = (llvm::Constant *)*(a3 - 8);
  if (!sub_1C4D89F84((uint64_t)&__s1, (unsigned __int8 *)*(a3 - 4)))
    goto LABEL_128;
  *(_DWORD *)p_src = *((_WORD *)a3 + 9) & 0x3F;
  v771 = 0;
  p_src = (llvm::Type *)a3;
  *(_QWORD *)v768 = 0;
  p_Add = (unint64_t)v768;
  __s1 = 0;
  *(_QWORD *)&v775 = &v771;
  v69 = a2;
  if (*((_BYTE *)a2 + 16) != 85)
    goto LABEL_123;
  v70 = *((_DWORD *)a2 + 5);
  v71 = (v70 & 0x40000000) != 0
      ? (llvm::ValueAsMetadata *)*((_QWORD *)a2 - 1)
      : (llvm::ValueAsMetadata *)((char *)a2 - 32 * (v70 & 0x7FFFFFF));
  if (*(uint64_t ****)v71 == a3
    && (v72 = sub_1C4D89F84((uint64_t)&p_Add, *((unsigned __int8 **)v71 + 4)), v69 = a2, v72)
    && ((v73 = *((_DWORD *)a2 + 5), (v73 & 0x40000000) != 0)
      ? (v74 = (_QWORD ***)*((_QWORD *)a2 - 1))
      : (v74 = (_QWORD ***)((char *)a2 - 32 * (v73 & 0x7FFFFFF))),
        (v75 = v74[8], v69 = a2, v75) && (v76 = *((unsigned __int8 *)v75 + 16), v76 >= 0x1C) && v76 - 59 >= 0xFFFFFFEE))
  {
    *(_QWORD *)v775 = v75;
    v77 = *((_WORD *)a3 + 9) & 0x3F;
  }
  else
  {
LABEL_123:
    p_src = (llvm::Type *)a3;
    p_Add = (unint64_t)&v771;
    __s1 = v768;
    *(_QWORD *)&v775 = 0;
    if (*((_BYTE *)v69 + 16) != 85)
      goto LABEL_128;
    v78 = *((_DWORD *)a2 + 5);
    v79 = (v78 & 0x40000000) != 0
        ? (llvm::ValueAsMetadata *)*((_QWORD *)a2 - 1)
        : (llvm::ValueAsMetadata *)((char *)a2 - 32 * (v78 & 0x7FFFFFF));
    if (*(uint64_t ****)v79 != a3)
      goto LABEL_128;
    v99 = (unsigned __int8 *)*((_QWORD *)v79 + 4);
    if (!v99)
      goto LABEL_128;
    v100 = v99[16];
    if (v100 < 0x1C || v100 - 59 < 0xFFFFFFEE)
      goto LABEL_128;
    v771 = (llvm::Instruction *)v99;
    v101 = *((_DWORD *)a2 + 5);
    v102 = (v101 & 0x40000000) != 0
         ? (llvm::ValueAsMetadata *)*((_QWORD *)a2 - 1)
         : (llvm::ValueAsMetadata *)((char *)a2 - 32 * (v101 & 0x7FFFFFF));
    if ((sub_1C4D89F84((uint64_t)&__s1, *((unsigned __int8 **)v102 + 8)) & 1) == 0)
      goto LABEL_128;
    v77 = dword_1C8661A80[*((_WORD *)a3 + 9) & 0x3F];
  }
  v767 = 0;
  p_src = NullValue;
  p_Add = (unint64_t)&v767;
  __s1 = 0;
  if (!v771
    || NullValue != *((llvm::Constant **)v771 - 8)
    || (sub_1C4D89F84((uint64_t)&p_Add, *((unsigned __int8 **)v771 - 4)) & 1) == 0)
  {
    goto LABEL_128;
  }
  llvm::ConstantRange::makeExactICmpRegion(&v778, v77, Add);
  v139 = *((unsigned __int8 *)v771 + 16) - 28;
  v140 = (const void **)v767;
  v141 = *((unsigned int *)v767 + 2);
  if (v141 > 0x40)
  {
    v346 = ((unint64_t)(v141 + 63) >> 3) & 0x3FFFFFF8;
    v347 = (void *)operator new[]();
    memcpy(v347, *v140, v346);
    LODWORD(v760) = v141;
    __src = v347;
    LODWORD(p_Add) = v141;
    v142 = (llvm::ConstantInt **)operator new[]();
    memcpy(v142, __src, v346);
  }
  else
  {
    v142 = *(llvm::ConstantInt ***)v767;
    LODWORD(v760) = *((_DWORD *)v767 + 2);
    __src = v142;
    LODWORD(p_Add) = v141;
  }
  p_src = (llvm::Type *)v142;
  llvm::APInt::operator+=((uint64_t)&p_src, 1uLL);
  v762 = p_Add;
  v761 = p_src;
  llvm::ConstantRange::binaryOp((llvm::ConstantRange *)&__src, (unsigned int *)&v778, v139, (llvm::ConstantRange *)&p_src);
  if (v762 >= 0x41 && v761)
    MEMORY[0x1CAA32F9C](v761, 0x1000C8000313F17);
  if (v760 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v780 >= 0x41 && *((_QWORD *)&v779 + 1))
    MEMORY[0x1CAA32F9C](*((_QWORD *)&v779 + 1), 0x1000C8000313F17);
  if (v779 >= 0x41 && v778)
    MEMORY[0x1CAA32F9C](v778, 0x1000C8000313F17);
  v348 = *(const void ***)v768;
  v349 = *(unsigned int *)(*(_QWORD *)v768 + 8);
  if (v349 > 0x40)
  {
    v352 = ((unint64_t)(v349 + 63) >> 3) & 0x3FFFFFF8;
    v350 = (llvm::Type *)operator new[]();
    memcpy(v350, *v348, v352);
    LODWORD(v779) = v349;
    v351 = (void *)operator new[]();
    memcpy(v351, v350, v352);
  }
  else
  {
    v350 = **(llvm::Type ***)v768;
    LODWORD(v779) = *(_DWORD *)(*(_QWORD *)v768 + 8);
    v351 = v350;
  }
  v778 = (llvm::Constant *)v351;
  llvm::APInt::operator+=((uint64_t)&v778, 1uLL);
  v353 = v779;
  v354 = v778;
  if (p_Add > 0x40)
  {
    if (!memcmp(p_src, v350, (((unint64_t)p_Add + 63) >> 3) & 0x3FFFFFF8))
      goto LABEL_617;
LABEL_1399:
    v356 = 0;
    goto LABEL_622;
  }
  if (p_src != v350)
    goto LABEL_1399;
LABEL_617:
  if (v775 > 0x40)
    v355 = memcmp(__s1, v354, (((unint64_t)v775 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v355 = __s1 == v354;
  v356 = v355;
LABEL_622:
  if (v353 >= 0x41 && v354)
    MEMORY[0x1CAA32F9C](v354, 0x1000C8000313F17);
  if (v349 >= 0x41 && v350)
    MEMORY[0x1CAA32F9C](v350, 0x1000C8000313F17);
  if (v356)
  {
    llvm::Instruction::dropPoisonGeneratingFlags(v771);
    v357 = v771;
  }
  else
  {
    v357 = 0;
  }
  if (v775 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  if (p_Add >= 0x41 && p_src)
    MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
  if (v357)
  {
    v145 = (uint64_t)a1;
    v146 = a2;
    v147 = v357;
    return sub_1C577F888(v145, v146, v147);
  }
LABEL_128:
  v80 = (uint64_t *)((char *)a2 - 64);
  v81 = (uint64_t *)a1[3];
  __src = (void *)*((_QWORD *)a2 - 8);
  v83 = (uint64_t *)((char *)a2 - 32);
  v82 = *((_QWORD *)a2 - 4);
  v84 = a3[1];
  if (!v84)
    goto LABEL_164;
  if (v84[1])
    goto LABEL_164;
  v85 = *((_WORD *)a3 + 9);
  v86 = (uint64_t)*(a3 - 8);
  Add = 0;
  v87 = (unsigned __int8 *)*(a3 - 4);
  p_Add = (unint64_t)&Add;
  if (!sub_1C57A0CAC((int)&p_src, (llvm::Constant *)v87) || !v87 || v87[16] > 0x14u)
    goto LABEL_164;
  v88 = v85 & 0x3F;
  *(_QWORD *)p_Add = v87;
  if (*(_BYTE *)(v82 + 16) != 85)
  {
    LODWORD(v88) = dword_1C8661A80[v88];
    v89 = __src;
    __src = (void *)v82;
    v82 = (uint64_t)v89;
  }
  if ((v88 - 35) < 2)
  {
    v103 = Add;
    v104 = *(llvm::Type **)Add;
    if ((*(_DWORD *)(*(_QWORD *)Add + 8) & 0xFE) == 0x12)
      v104 = (llvm::Type *)**((_QWORD **)v104 + 2);
    LODWORD(v779) = llvm::Type::getPrimitiveSizeInBits(v104);
    if (v779 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v778, 0, 0);
    else
      v778 = 0;
    p_src = (llvm::Type *)33;
    p_Add = (unint64_t)&v778;
    sub_1C57A1A3C((uint64_t)&p_src, v103);
    v106 = v105;
    if (v779 >= 0x41 && v778)
      MEMORY[0x1CAA32F9C](v778, 0x1000C8000313F17);
    if ((v106 & 1) == 0)
      goto LABEL_164;
  }
  else
  {
    if ((_DWORD)v88 != 34 && (_DWORD)v88 != 37)
      goto LABEL_164;
    v90 = Add;
    v91 = *(llvm::Type **)Add;
    if ((*(_DWORD *)(*(_QWORD *)Add + 8) & 0xFE) == 0x12)
      v91 = (llvm::Type *)**((_QWORD **)v91 + 2);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v91);
    LODWORD(v779) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v778, -1, 1);
    }
    else
    {
      if (PrimitiveSizeInBits)
        v93 = (llvm::Constant *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
      else
        v93 = 0;
      v778 = v93;
    }
    p_src = (llvm::Type *)33;
    p_Add = (unint64_t)&v778;
    sub_1C57A1A3C((uint64_t)&p_src, v90);
    v95 = v94;
    if (v779 >= 0x41 && v778)
      MEMORY[0x1CAA32F9C](v778, 0x1000C8000313F17);
    if (!v95)
      goto LABEL_164;
    v96 = Add;
    v97 = llvm::ConstantInt::get(*(llvm::ConstantInt **)Add, 1, 0);
    Add = llvm::ConstantExpr::getAdd(v96, (llvm::Constant *)v97, 0, 0);
  }
  v107 = *(_QWORD *)(v82 + 8);
  if (!v107 || *(_QWORD *)(v107 + 8))
    goto LABEL_164;
  v228 = (int8x8_t *)__src;
  if (*(_QWORD *)v86 != *(_QWORD *)__src)
  {
    v229 = *((_QWORD *)__src + 1);
    if (v229)
    {
      if (!*(_QWORD *)(v229 + 8))
      {
        p_src = (llvm::Type *)&__src;
        p_Add = (unint64_t)&__src;
        if ((sub_1C4B03864((_QWORD **)&p_src, (uint64_t)__src) & 1) == 0)
          *(_QWORD *)p_Add = v228;
        v228 = (int8x8_t *)__src;
      }
    }
  }
  NullValue = 0;
  if ((int8x8_t *)v86 == v228)
  {
    NullValue = (llvm::Constant *)llvm::Constant::getNullValue(*(llvm::Constant **)v86, v98);
  }
  else
  {
    p_src = (llvm::Type *)v228;
    __s1 = &NullValue;
    v230 = *(unsigned __int8 *)(v86 + 16);
    if (v230 == 5)
    {
      if (*(_WORD *)(v86 + 18) != 13)
        goto LABEL_164;
      v401 = (int8x8_t **)(v86 - 32 * (*(_DWORD *)(v86 + 20) & 0x7FFFFFF));
      if (v228 != *v401)
        goto LABEL_164;
      v402 = (llvm::Constant *)v401[4];
      if (v402 && *((_BYTE *)v402 + 16) == 16)
      {
        v403 = 1;
      }
      else
      {
        v446 = *(_QWORD *)v402;
        if (!*(_QWORD *)v402 || (*(_DWORD *)(v446 + 8) & 0xFE) != 0x12)
          goto LABEL_164;
        v447 = (llvm::Constant *)v401[4];
        SplatValue = llvm::Constant::getSplatValue(v402, 0);
        if (!SplatValue || *((_BYTE *)SplatValue + 16) != 16)
        {
          if (*(_BYTE *)(v446 + 8) == 18)
          {
            v752 = *(_DWORD *)(v446 + 32);
            if (v752)
            {
              v402 = v447;
              v654 = 0;
              v403 = 0;
              while (1)
              {
                AggregateElement = llvm::Constant::getAggregateElement(v402, v654);
                if (!AggregateElement)
                  break;
                v402 = v447;
                v656 = *((unsigned __int8 *)AggregateElement + 16);
                if ((v656 - 11) >= 2)
                {
                  if (v656 != 16)
                    goto LABEL_164;
                  v403 = 1;
                }
                v654 = (llvm::Type *)((_DWORD)v654 + 1);
                if (v752 == (_DWORD)v654)
                  goto LABEL_705;
              }
            }
          }
          goto LABEL_164;
        }
        v403 = 1;
        v402 = v447;
      }
LABEL_705:
      if (!v402 || (v403 & 1) == 0)
        goto LABEL_164;
      *(_QWORD *)__s1 = v402;
    }
    else
    {
      if (v230 != 41)
        goto LABEL_164;
      if (v228 != *(int8x8_t **)(v86 - 64))
        goto LABEL_164;
      v231 = *(unsigned __int8 **)(v86 - 32);
      if (!sub_1C57A0CAC((int)&p_Add, (llvm::Constant *)v231) || !v231 || v231[16] > 0x14u)
        goto LABEL_164;
      *(_QWORD *)__s1 = v231;
    }
  }
  v771 = 0;
  v764 = 0;
  v767 = 0;
  *(_QWORD *)v768 = 0;
  v763 = 0;
  v778 = (llvm::Constant *)&v771;
  *(_QWORD *)&v779 = &v767;
  *((_QWORD *)&v779 + 1) = &v763;
  if (!sub_1C4FA9CBC((_QWORD **)&v778, v82))
    goto LABEL_164;
  v293 = v771;
  p_src = (llvm::Type *)&v764;
  p_Add = (unint64_t)__src;
  *(_QWORD *)&v775 = v768;
  if (!v771)
    goto LABEL_164;
  if (*((_BYTE *)v771 + 16) != 81)
    goto LABEL_164;
  if (__src != *((void **)v771 - 8))
    goto LABEL_164;
  v294 = (unsigned __int8 *)*((_QWORD *)v771 - 4);
  if (!sub_1C57A0CAC((int)&__s1, (llvm::Constant *)v294) || !v294 || v294[16] >= 0x15u)
    goto LABEL_164;
  *(_QWORD *)v775 = v294;
  *(_DWORD *)p_src = *((_WORD *)v293 + 9) & 0x3F;
  v296 = *((_QWORD *)v771 + 1);
  if (!v296 || *(_QWORD *)(v296 + 8))
  {
    if ((void *)v86 == __src)
      goto LABEL_164;
    v297 = *(_QWORD *)(v86 + 8);
    if (!v297 || *(_QWORD *)(v297 + 8))
      goto LABEL_164;
  }
  if (v764 != 40)
  {
    if (v764 != 39)
    {
      if (v764 != 38)
        goto LABEL_164;
      v298 = *(void ***)v768;
      v299 = **(llvm::Type ***)v768;
      if ((*(_DWORD *)(**(_QWORD **)v768 + 8) & 0xFE) == 0x12)
        v299 = (llvm::Type *)**((_QWORD **)v299 + 2);
      v300 = llvm::Type::getPrimitiveSizeInBits(v299);
      v301 = v300;
      LODWORD(v779) = v300;
      if (v300 > 0x40)
      {
        v303 = &v778;
        llvm::APInt::initSlowCase((llvm::APInt *)&v778, -1, 1);
        LODWORD(v302) = v301 - 1;
        if (v779 >= 0x41)
          v303 = (llvm::Constant **)((char *)v778 + 8 * (v302 >> 6));
      }
      else
      {
        v302 = v300 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v300 : 0;
        v778 = (llvm::Constant *)v302;
        LOBYTE(v302) = v300 - 1;
        v303 = &v778;
      }
      *v303 = (llvm::Constant *)((unint64_t)*v303 & ~(1 << v302));
      p_src = (llvm::Type *)33;
      p_Add = (unint64_t)&v778;
      sub_1C57A1A3C((uint64_t)&p_src, (llvm::Constant *)v298);
      v305 = v304;
      if (v779 >= 0x41 && v778)
        MEMORY[0x1CAA32F9C](v778, 0x1000C8000313F17);
      if (!v305)
        goto LABEL_164;
      v306 = *(llvm::ConstantExpr **)v768;
      v307 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v768, 1, 0);
      *(_QWORD *)v768 = llvm::ConstantExpr::getAdd(v306, (llvm::Constant *)v307, 0, 0);
    }
    v308 = (uint64_t *)v767;
    v767 = v763;
    v763 = (llvm::APInt *)v308;
  }
  v309 = NullValue;
  v310 = *(llvm::ConstantFP **)NullValue;
  if ((*(_DWORD *)(*(_QWORD *)NullValue + 8) & 0xFE) == 0x12)
    v311 = *(unsigned __int8 *)(**((_QWORD **)v310 + 2) + 8);
  else
    v311 = *(_DWORD *)(*(_QWORD *)NullValue + 8);
  if (v311 <= 6)
    Zero = llvm::ConstantFP::getZero(v310, (llvm::Type *)1);
  else
    Zero = (llvm::Constant *)llvm::Constant::getNullValue(v310, v295);
  v314 = Zero;
  v315 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, v309, v313);
  if (!v315)
  {
    v741 = *(_QWORD ***)v314;
    if (*(_QWORD *)v314)
    {
      v778 = v314;
      *(_QWORD *)&v779 = v309;
      v742 = **v741 + 1512;
      LODWORD(p_src) = 15;
      p_Add = (unint64_t)&v778;
      __s1 = (void *)2;
      v775 = 0u;
      v776 = 0u;
      v777 = 0;
      v315 = sub_1C537D4FC(v742, (uint64_t)v741, (unsigned __int8 *)&p_src);
    }
    else
    {
      v315 = 0;
    }
  }
  Sub = llvm::ConstantExpr::getSub(Add, NullValue, 0, 0);
  if ((_DWORD)v88 == 35)
    v317 = (llvm::Constant *)v315;
  else
    v317 = Sub;
  if ((_DWORD)v88 == 35)
    v318 = Sub;
  else
    v318 = (llvm::Constant *)v315;
  ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x27, *(unsigned __int8 **)v768, v318, 0);
  if (sub_1C4D89E3C((uint64_t)&p_src, ICmp))
  {
    v320 = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x29, *(unsigned __int8 **)v768, v317, 0);
    if (sub_1C4D89E3C((uint64_t)&p_src, v320))
    {
      v321 = __src;
      if (*(_QWORD *)__src != *(_QWORD *)a2)
      {
        v322 = *((unsigned __int8 *)v767 + 16);
        if (v322 == 5)
          goto LABEL_164;
        if (!v767)
          goto LABEL_164;
        if (v322 > 0x14)
          goto LABEL_164;
        v323 = (uint64_t *)v763;
        v324 = *((unsigned __int8 *)v763 + 16);
        if (v324 == 5 || !v763 || v324 > 0x14)
          goto LABEL_164;
        v767 = sub_1C537D3B8((llvm *)0x28, (uint64_t)v767, *(llvm::Constant **)__src, 0);
        v763 = sub_1C537D3B8((llvm *)0x28, (uint64_t)v323, *(llvm::Constant **)__src, 0);
        v321 = __src;
      }
      WORD4(v775) = 257;
      v325 = sub_1C4774B48((uint64_t)v81, 40, (uint64_t)v321, (uint64_t)v318, (uint64_t)&p_src);
      WORD4(v775) = 257;
      v326 = sub_1C4774B48((uint64_t)v81, 39, (uint64_t)__src, (uint64_t)v317, (uint64_t)&p_src);
      WORD4(v775) = 257;
      Select = llvm::IRBuilderBase::CreateSelect(v81, v325, (uint64_t *)v767, (uint64_t)__src, (uint64_t)&p_src, 0);
      WORD4(v775) = 257;
      v328 = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect(v81, v326, (uint64_t *)v763, (uint64_t)Select, (uint64_t)&p_src, 0);
      v329 = *(_QWORD *)a2;
      WORD4(v775) = 257;
      v330 = (uint64_t)sub_1C4773E38(v81, 38, v328, v329, (uint64_t)&p_src);
      if (v330)
        goto LABEL_1180;
    }
  }
LABEL_164:
  LODWORD(v771) = 0;
  NullValue = 0;
  p_src = (llvm::Type *)&v771;
  p_Add = (unint64_t)&Add;
  *(_QWORD *)&v775 = &NullValue;
  v108 = a3[1];
  if (!v108)
    goto LABEL_166;
  if (v108[1])
    goto LABEL_166;
  if (!*v747)
    goto LABEL_166;
  Add = *v747;
  v120 = (unsigned __int8 *)*(a3 - 4);
  if (!sub_1C57A0CAC((int)&__s1, (llvm::Constant *)v120))
    goto LABEL_166;
  if (!v120)
    goto LABEL_166;
  if (v120[16] >= 0x15u)
    goto LABEL_166;
  *(_QWORD *)v775 = v120;
  *(_DWORD *)p_src = *((_WORD *)a3 + 9) & 0x3F;
  if ((v771 & 0xFFFFFFFE) == 0x20
    || v771 <= 0x29 && ((1 << (char)v771) & 0x2AA00000068) != 0)
  {
    goto LABEL_166;
  }
  if (*(_QWORD *)NullValue != *(_QWORD *)a2)
    goto LABEL_166;
  if ((_DWORD)v771 == 36)
  {
    v121 = *((unsigned __int8 *)Add + 16);
    if (v121 == 5)
    {
      if (*((_WORD *)Add + 9) == 13)
        goto LABEL_166;
    }
    else if (v121 == 41 && *(unsigned __int8 *)(*((_QWORD *)Add - 4) + 16) < 0x15u)
    {
      goto LABEL_166;
    }
  }
  if (*((_BYTE *)a2 + 16) == 85)
  {
    v424 = *((_DWORD *)a2 + 5);
    if ((v424 & 0x40000000) != 0)
      v425 = (_QWORD ***)*((_QWORD *)a2 - 1);
    else
      v425 = (_QWORD ***)((char *)a2 - 32 * (v424 & 0x7FFFFFF));
    v426 = (llvm::Value *)v425[4];
    if (v426)
    {
      v427 = (llvm::Value *)v425[8];
      goto LABEL_769;
    }
  }
  else
  {
    v426 = 0;
  }
  v427 = 0;
LABEL_769:
  if ((sub_1C57A0CAC((int)&p_src, v426) & 1) != 0 || (sub_1C57A0CAC((int)&v778, v427) & 1) != 0)
  {
    v428 = NullValue;
    if ((llvm::Constant::isElementWiseEqual(NullValue, v426) & 1) == 0
      && (llvm::Constant::isElementWiseEqual(v428, v427) & 1) == 0)
    {
      sub_1C57F39E0(NullValue, v771, (uint64_t)&__src);
      if ((_BYTE)v761)
      {
        v429 = v760;
        if ((llvm::Constant::isElementWiseEqual(v760, v426) & 1) != 0
          || (llvm::Constant::isElementWiseEqual(v429, v427) & 1) != 0)
        {
          v778 = (llvm::Constant *)a1[3];
          v779 = *((_OWORD *)v778 + 3);
          llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v778, (unsigned __int8 **)&v780);
          v430 = a1[3];
          *(_QWORD *)(v430 + 48) = *((_QWORD *)a2 + 5);
          *(_QWORD *)(v430 + 56) = (char *)a2 + 24;
          v431 = (llvm::Type *)*((_QWORD *)a2 + 6);
          p_src = v431;
          if (v431)
          {
            llvm::MetadataTracking::track((uint64_t)&p_src, (unsigned __int8 *)v431, 2);
            v432 = p_src;
          }
          else
          {
            v432 = 0;
          }
          sub_1C4774EF4(v430, 0, (uint64_t)v432);
          if (p_src)
            llvm::MetadataTracking::untrack((uint64_t)&p_src, (unsigned __int8 *)p_src);
          v433 = dword_1C8661B28[(int)v771];
          LODWORD(v771) = v433;
          v434 = a1[3];
          if ((*((_BYTE *)a3 + 23) & 0x10) == 0)
          {
            v669 = 0;
            v668 = (llvm::Type *)&byte_1C871356D;
            goto LABEL_1223;
          }
          v435 = ***a3;
          v436 = *(_QWORD *)(v435 + 152);
          v437 = *(unsigned int *)(v435 + 168);
          if ((_DWORD)v437)
          {
            LODWORD(v438) = (v437 - 1) & ((a3 >> 4) ^ (a3 >> 9));
            v439 = (uint64_t ****)(v436 + 16 * v438);
            v440 = *v439;
            if (*v439 == a3)
            {
LABEL_1222:
              v667 = (int8x8_t ***)v439[1];
              v670 = *v667;
              v668 = (llvm::Type *)(v667 + 2);
              v669 = v670;
LABEL_1223:
              WORD4(v775) = 773;
              p_src = v668;
              p_Add = (unint64_t)v669;
              __s1 = ".inv";
              v671 = sub_1C4774B48(v434, v433, (uint64_t)Add, (uint64_t)v760, (uint64_t)&p_src);
              sub_1C577E2C8((uint64_t)a1, (uint64_t)a2, 0, v671);
              v672 = (_QWORD **)*((_QWORD *)a2 - 8);
              v673 = (_QWORD **)*((_QWORD *)a2 - 4);
              if (v672 != v673)
              {
                v674 = (_QWORD **)*((_QWORD *)a2 - 3);
                *((_QWORD *)a2 - 8) = v673;
                *((_QWORD *)a2 - 4) = v672;
                v675 = *(_OWORD *)((char *)a2 - 56);
                v676 = (uint64_t **)*((_QWORD *)a2 - 2);
                *((_QWORD *)a2 - 7) = v674;
                *((_QWORD *)a2 - 6) = v676;
                *(_OWORD *)((char *)a2 - 24) = v675;
                *v676 = v80;
                v677 = *((_QWORD *)a2 - 7);
                if (v677)
                  *(_QWORD *)(v677 + 16) = (char *)a2 - 56;
                **((_QWORD **)a2 - 2) = v83;
                v678 = *((_QWORD *)a2 - 3);
                if (v678)
                  *(_QWORD *)(v678 + 16) = (char *)a2 - 24;
              }
              v343 = a2;
LABEL_597:
              llvm::Instruction::swapProfMetadata(v343);
              v344 = v778;
              if ((_QWORD)v779)
              {
                sub_1C4D8AE2C((uint64_t)v778, v779, *((uint64_t *)&v779 + 1));
                v344 = v778;
              }
              else
              {
                *((_QWORD *)v778 + 6) = 0;
                *((_QWORD *)v344 + 7) = 0;
              }
              p_src = v780;
              if (v780)
              {
                llvm::MetadataTracking::track((uint64_t)&p_src, (unsigned __int8 *)v780, 2);
                v345 = p_src;
              }
              else
              {
                v345 = 0;
              }
              sub_1C4774EF4((uint64_t)v344, 0, (uint64_t)v345);
              if (p_src)
                llvm::MetadataTracking::untrack((uint64_t)&p_src, (unsigned __int8 *)p_src);
              if (v780)
                llvm::MetadataTracking::untrack((uint64_t)&v780, (unsigned __int8 *)v780);
              return (llvm::UndefValue **)a2;
            }
            v441 = 1;
            while (v440 != (uint64_t ***)-4096)
            {
              v442 = v438 + v441++;
              v438 = v442 & (v437 - 1);
              v440 = *(uint64_t ****)(v436 + 16 * v438);
              if (v440 == a3)
              {
                v439 = (uint64_t ****)(v436 + 16 * v438);
                goto LABEL_1222;
              }
            }
          }
          v439 = (uint64_t ****)(v436 + 16 * v437);
          goto LABEL_1222;
        }
      }
    }
  }
LABEL_166:
  v110 = (llvm::Constant **)(a3 - 4);
  v109 = (unsigned __int8 *)*(a3 - 4);
  v111 = *((_WORD *)a3 + 9);
  v112 = (llvm::Type *)*(a3 - 8);
  v113 = *v80;
  v114 = *v83;
  __src = 0;
  v115 = a3[1];
  if (!v115)
    goto LABEL_187;
  if (v115[1])
    goto LABEL_187;
  p_src = (llvm::Type *)&__src;
  p_Add = 0;
  if ((sub_1C4D89F84((uint64_t)&p_src, v109) & 1) == 0)
    goto LABEL_187;
  v116 = *(llvm::Constant **)a2;
  v117 = *(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE;
  if (v117 == 18)
  {
    v118 = **((_QWORD **)v116 + 2);
    v119 = *(unsigned __int8 *)(v118 + 8);
  }
  else
  {
    v119 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    v118 = *(_QWORD *)a2;
  }
  if (v119 != 13 || (v117 == 18) != (((_DWORD)(*a3)[1] & 0xFE) == 18))
    goto LABEL_187;
  v131 = (llvm::Constant *)(v111 & 0x3F);
  if ((v111 & 0x3B) == 0x22)
  {
    v745 = *(llvm::ConstantInt ***)v109;
    v132 = (const void **)__src;
    LODWORD(v779) = *((_DWORD *)__src + 2);
    v749 = v118;
    v750 = v131;
    if (v779 > 0x40)
    {
      v778 = (llvm::Constant *)operator new[]();
      memcpy(v778, *v132, (((unint64_t)v779 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v778 = *(llvm::Constant **)__src;
    }
    llvm::APInt::operator+=((uint64_t)&v778, 1uLL);
  }
  else
  {
    if ((_DWORD)v131 != 40 && (_DWORD)v131 != 36)
      goto LABEL_187;
    v745 = *(llvm::ConstantInt ***)v109;
    v138 = (const void **)__src;
    LODWORD(v779) = *((_DWORD *)__src + 2);
    v749 = v118;
    v750 = v131;
    if (v779 > 0x40)
    {
      v778 = (llvm::Constant *)operator new[]();
      memcpy(v778, *v138, (((unint64_t)v779 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v778 = *(llvm::Constant **)__src;
    }
    llvm::APInt::operator-=((uint64_t)&v778, 1uLL);
  }
  LODWORD(p_Add) = v779;
  p_src = v778;
  LODWORD(v779) = 0;
  v232 = llvm::ConstantInt::get(v745, (llvm::Type *)&p_src, v223);
  if (p_Add >= 0x41 && p_src)
    MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
  if (v779 >= 0x41 && v778)
    MEMORY[0x1CAA32F9C](v778, 0x1000C8000313F17);
  if (v112 == (llvm::Type *)v113 && v232 == (llvm::Value **)v114)
  {
    v233 = (llvm::APInt ***)v112;
    v234 = (llvm::Constant ***)v114;
    goto LABEL_438;
  }
  if (v112 != (llvm::Type *)v114 || v232 != (llvm::Value **)v113)
  {
    v252 = *(llvm::ConstantInt ***)v109;
    if ((*(_DWORD *)(*(_QWORD *)v109 + 8) & 0xFE) == 0x12)
      v252 = *(llvm::ConstantInt ***)v252[2];
    if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v252) >= *(_DWORD *)(v749 + 8) >> 8)
      goto LABEL_187;
    v253 = sub_1C537D3B8((llvm *)0x28, (uint64_t)v232, v116, 0);
    p_src = v112;
    if (sub_1C4FA3A38(&p_src, v113))
    {
      v233 = (llvm::APInt ***)v113;
      v234 = (llvm::Constant ***)v114;
      if (v253 == (llvm::UndefValue *)v114)
        goto LABEL_438;
    }
    p_src = v112;
    if (sub_1C4FA3A38(&p_src, v114))
    {
      v233 = (llvm::APInt ***)v114;
      v234 = (llvm::Constant ***)v113;
      if (v253 == (llvm::UndefValue *)v113)
        goto LABEL_438;
    }
    if ((*((_WORD *)a3 + 9) & 0x3Eu) - 34 <= 3)
    {
      v254 = sub_1C537D3B8((llvm *)0x27, (uint64_t)v232, v116, 0);
      p_src = v112;
      if (!sub_1C57A1BB8(&p_src, v113)
        || (v233 = (llvm::APInt ***)v113, v234 = (llvm::Constant ***)v114, v254 != (llvm::UndefValue *)v114))
      {
        p_src = v112;
        v748 = 0;
        if (!sub_1C57A1BB8(&p_src, v114))
          goto LABEL_188;
        v233 = (llvm::APInt ***)v114;
        v234 = (llvm::Constant ***)v113;
        if (v254 != (llvm::UndefValue *)v113)
          goto LABEL_188;
      }
      goto LABEL_438;
    }
LABEL_187:
    v748 = 0;
    goto LABEL_188;
  }
  v233 = (llvm::APInt ***)v112;
  v234 = (llvm::Constant ***)v113;
LABEL_438:
  *((_WORD *)a3 + 9) = *((_WORD *)a3 + 9) & 0xFFC0 | asc_1C8661BD0[(_QWORD)v750 - 34];
  if (*(a3 - 8))
  {
    **(a3 - 6) = (uint64_t *)*(a3 - 7);
    v235 = (uint64_t)*(a3 - 7);
    if (v235)
      *(_QWORD *)(v235 + 16) = *(a3 - 6);
  }
  *v747 = (llvm::APInt *)v233;
  if (v233)
  {
    v238 = v233[1];
    v236 = v233 + 1;
    v237 = v238;
    *(a3 - 7) = (uint64_t **)v238;
    if (v238)
      v237[2] = (llvm::APInt *)(a3 - 7);
    *(a3 - 6) = (uint64_t **)v236;
    *v236 = v747;
  }
  if (*v110)
  {
    **(a3 - 2) = (uint64_t *)*(a3 - 3);
    v239 = (uint64_t)*(a3 - 3);
    if (v239)
      *(_QWORD *)(v239 + 16) = *(a3 - 2);
  }
  *v110 = (llvm::Constant *)v234;
  if (v234)
  {
    v242 = v234[1];
    v240 = v234 + 1;
    v241 = v242;
    *(a3 - 3) = (uint64_t **)v242;
    if (v242)
      v241[2] = (llvm::Constant *)(a3 - 3);
    *(a3 - 2) = (uint64_t **)v240;
    *v240 = v110;
  }
  if (*v80)
  {
    **((_QWORD **)a2 - 6) = *((_QWORD *)a2 - 7);
    v243 = *((_QWORD *)a2 - 7);
    if (v243)
      *(_QWORD *)(v243 + 16) = *((_QWORD *)a2 - 6);
  }
  *v80 = v114;
  if (v114)
  {
    v246 = *(_QWORD ***)(v114 + 8);
    v245 = (uint64_t **)(v114 + 8);
    v244 = v246;
    *((_QWORD *)a2 - 7) = v246;
    if (v246)
      v244[2] = (_QWORD *)((char *)a2 - 56);
    *((_QWORD *)a2 - 6) = v245;
    *v245 = v80;
  }
  if (*v83)
  {
    **((_QWORD **)a2 - 2) = *((_QWORD *)a2 - 3);
    v247 = *((_QWORD *)a2 - 3);
    if (v247)
      *(_QWORD *)(v247 + 16) = *((_QWORD *)a2 - 2);
  }
  *v83 = v113;
  v248 = a2;
  if (v113)
  {
    v251 = *(_QWORD ***)(v113 + 8);
    v250 = (uint64_t **)(v113 + 8);
    v249 = v251;
    *((_QWORD *)a2 - 3) = v251;
    if (v251)
      v249[2] = (_QWORD *)((char *)a2 - 24);
    v248 = a2;
    *((_QWORD *)a2 - 2) = v250;
    *v250 = v83;
  }
  llvm::Instruction::swapProfMetadata(v248);
  llvm::Instruction::moveBefore((llvm::Instruction *)a3, v248);
  v748 = 1;
LABEL_188:
  v122 = (uint64_t *)a1[3];
  *(_QWORD *)v768 = 0;
  v123 = (unsigned __int8 *)*v80;
  v771 = 0;
  p_src = (llvm::Type *)&v771;
  p_Add = 0;
  if (!sub_1C4D89F84((uint64_t)&p_src, v123))
    goto LABEL_235;
  v124 = (unsigned __int8 *)*v83;
  v778 = (llvm::Constant *)v768;
  *(_QWORD *)&v779 = 0;
  if ((sub_1C4D89F84((uint64_t)&v778, v124) & 1) == 0)
    goto LABEL_235;
  v125 = *(llvm::ConstantInt ***)a2;
  if (((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18) != (((_DWORD)(*a3)[1] & 0xFE) == 18))
    goto LABEL_235;
  v767 = 0;
  LODWORD(v760) = 1;
  __src = 0;
  v126 = *((_WORD *)a3 + 9);
  LODWORD(v763) = v126 & 0x3F;
  v127 = v126 & 0x3E;
  if (v127 == 32)
  {
    v128 = (unsigned __int8 *)*v110;
    if (*v110
      && v128[16] <= 0x14u
      && ((llvm::Constant::isNullValue(*v110) & 1) != 0
       || (sub_1C4E71060((uint64_t)&p_src, (llvm::Constant *)v128) & 1) != 0))
    {
      v767 = *v747;
      v778 = 0;
      p_Add = (unint64_t)&v778;
      v129 = *((unsigned __int8 *)v767 + 16);
      if (v129 == 5)
      {
        if (*((_WORD *)v767 + 9) == 28
          && sub_1C57BBD9C((int8x8_t ***)&p_Add, ((llvm::Constant **)v767 - 4 * (*((_DWORD *)v767 + 5) & 0x7FFFFFF))[4]))
        {
LABEL_226:
          v143 = (void **)v778;
          if (v760 > 0x40 || (v144 = *((_DWORD *)v778 + 2), v144 > 0x40))
          {
            if (&__src != (void **)v778)
            {
              llvm::APInt::reallocate((uint64_t)&__src, *((_DWORD *)v778 + 2));
              if (v760 <= 0x40)
                __src = *v143;
              else
                memcpy(__src, *v143, (((unint64_t)v760 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            __src = *(void **)v778;
            LODWORD(v760) = v144;
          }
          goto LABEL_481;
        }
      }
      else if (v129 == 56
             && (sub_1C57BBC6C((int8x8_t ***)&p_Add, *((llvm::Constant **)v767 - 4)) & 1) != 0)
      {
        goto LABEL_226;
      }
    }
LABEL_229:
    v137 = 0;
    goto LABEL_230;
  }
  if (!llvm::decomposeBitTestICmp((uint64_t)*v747, (unsigned __int8 *)*v110, (int *)&v763, (uint64_t *)&v767, (int8x8_t ***)&__src, 1))goto LABEL_229;
  if (v760 > 0x40)
  {
    v133 = 0;
    v134 = 0;
    v135 = __src;
    do
    {
      v136 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)__src + v133));
      v136.i16[0] = vaddlv_u8(v136);
      v134 += v136.i32[0];
      v133 += 8;
    }
    while (((((unint64_t)v760 + 63) >> 3) & 0x3FFFFFF8) != v133);
    if (v134 != 1)
    {
      v137 = 0;
LABEL_232:
      MEMORY[0x1CAA32F9C](v135, 0x1000C8000313F17);
      goto LABEL_233;
    }
  }
  else
  {
    if (!__src)
      goto LABEL_235;
    if (((unint64_t)__src & ((unint64_t)__src - 1)) != 0)
      goto LABEL_229;
  }
LABEL_481:
  v255 = v771;
  v256 = *((_DWORD *)v771 + 2);
  v770 = v256;
  if (v256 > 0x40)
  {
    Add = (llvm::APInt *)operator new[]();
    v257 = *(const void **)v255;
    v258 = v770;
    memcpy(Add, v257, (((unint64_t)v770 + 63) >> 3) & 0x3FFFFFF8);
    v256 = v258;
  }
  else
  {
    Add = *(llvm::APInt **)v771;
  }
  v259 = *(llvm::ConstantInt ***)v768;
  v260 = *(_DWORD *)(*(_QWORD *)v768 + 8);
  v766 = v260;
  if (v260 > 0x40)
  {
    v261 = operator new[]();
    NullValue = (llvm::Constant *)v261;
    v262 = *v259;
    v263 = v766;
    memcpy((void *)v261, v262, (((unint64_t)v766 + 63) >> 3) & 0x3FFFFFF8);
    v256 = v770;
    v260 = v263;
  }
  else
  {
    v261 = **(_QWORD **)v768;
    NullValue = **(llvm::Constant ***)v768;
  }
  if (v256 > 0x40)
  {
    v266 = 0;
    v267 = ((unint64_t)v256 + 63) >> 6;
    v264 = Add;
    v268 = v267;
    do
    {
      v23 = v268-- < 1;
      if (v23)
        break;
      v269 = *((_QWORD *)Add + v268);
      v266 += __clz(v269);
    }
    while (!v269);
    v270 = v256 | 0xFFFFFFC0;
    if ((v256 & 0x3F) == 0)
      v270 = 0;
    v271 = v266 + v270;
    v265 = (int8x8_t)Add;
    if (v271 == v256)
    {
LABEL_525:
      v286 = 0;
      v287 = 0;
      do
      {
        v288 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v264 + 8 * v286));
        v288.i16[0] = vaddlv_u8(v288);
        v287 += v288.i32[0];
        ++v286;
      }
      while (v267 != v286);
      if (v287 == 1)
        goto LABEL_632;
      goto LABEL_528;
    }
  }
  else
  {
    v264 = Add;
    if (!Add)
    {
      v265 = 0;
      goto LABEL_528;
    }
    v265 = (int8x8_t)Add;
  }
  if (v260 > 0x40)
  {
    v273 = 0;
    v274 = ((unint64_t)v260 + 63) >> 6;
    do
    {
      v23 = v274-- < 1;
      if (v23)
        break;
      v275 = *(_QWORD *)(v261 + 8 * v274);
      v273 += __clz(v275);
    }
    while (!v275);
    v276 = v260 | 0xFFFFFFC0;
    if ((v260 & 0x3F) == 0)
      v276 = 0;
    if (v273 + v276 != v260)
    {
LABEL_498:
      if (v256 != (_DWORD)v760)
      {
LABEL_710:
        v137 = 0;
        goto LABEL_711;
      }
      v272 = v127;
      if (v256 >= 0x41)
      {
        v390 = (((unint64_t)v256 + 63) >> 3) & 0x3FFFFFF8;
        v391 = (char *)operator new[]();
        memcpy(v391, Add, v390);
        v392 = 0;
        v393 = NullValue;
        do
        {
          *(_QWORD *)&v391[v392] ^= *(_QWORD *)((char *)v393 + v392);
          v392 += 8;
        }
        while (v390 != v392);
        v394 = memcmp(v391, __src, v390);
        MEMORY[0x1CAA32F9C](v391, 0x1000C8000313F17);
        if (v394)
          goto LABEL_710;
      }
      else if ((void *)(v261 ^ *(_QWORD *)&v265) != __src)
      {
        goto LABEL_710;
      }
      if (v272 != 32)
      {
        v404 = a3[1];
        if (!v404 || v404[1])
          goto LABEL_710;
        v421 = v767;
        v422 = llvm::ConstantInt::get(v125, (llvm::Type *)&__src, v130);
        WORD4(v775) = 257;
        v767 = (llvm::APInt *)sub_1C4D89BCC((uint64_t)v122, v421, (uint64_t)v422, (uint64_t)&p_src);
      }
      if (v770 > 0x40)
      {
        v738 = (((unint64_t)v770 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          if (!v738)
          {
            v395 = 0;
            goto LABEL_690;
          }
          v739 = *(_QWORD *)((char *)Add + v738 - 8);
          v740 = *(_QWORD *)((char *)NullValue + v738 - 8);
          v738 -= 8;
        }
        while (v739 == v740);
        if (v739 > v740)
          v395 = 1;
        else
          v395 = -1;
      }
      else if (Add < NullValue)
      {
        v395 = -1;
      }
      else
      {
        v395 = Add > NullValue;
      }
LABEL_690:
      if ((_DWORD)v763 == 32)
      {
        v396 = llvm::ConstantInt::get(v125, (llvm::Type *)&Add, v130);
        v397 = v767;
        if (v395 >= 1)
        {
          WORD4(v775) = 257;
          p_p_src = &p_src;
LABEL_754:
          v423 = (uint64_t)sub_1C506EC1C(v122, v397, (uint64_t)v396, (uint64_t)p_p_src);
          goto LABEL_755;
        }
        v781 = 257;
        v406 = &v778;
      }
      else
      {
        v396 = llvm::ConstantInt::get(v125, (llvm::Type *)&NullValue, v130);
        v397 = v767;
        if (v395 < 1)
        {
          v781 = 257;
          p_p_src = &v778;
          goto LABEL_754;
        }
        WORD4(v775) = 257;
        v406 = &p_src;
      }
      v423 = sub_1C4773594((uint64_t)v122, v397, (uint64_t)v396, (uint64_t)v406);
LABEL_755:
      v137 = (unsigned __int8 *)v423;
      goto LABEL_711;
    }
  }
  else if (v261)
  {
    goto LABEL_498;
  }
  if (v256 >= 0x41)
  {
    v267 = ((unint64_t)v256 + 63) >> 6;
    goto LABEL_525;
  }
  v277 = (uint8x8_t)vcnt_s8(v265);
  v277.i16[0] = vaddlv_u8(v277);
  if (v277.u32[0] != 1)
  {
LABEL_528:
    if (v260 > 0x40)
    {
      v289 = 0;
      v290 = 0;
      do
      {
        v291 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v261 + v289));
        v291.i16[0] = vaddlv_u8(v291);
        v290 += v291.i32[0];
        v289 += 8;
      }
      while (((((unint64_t)v260 + 63) >> 3) & 0x3FFFFFF8) != v289);
      if (v290 != 1)
      {
        v137 = 0;
LABEL_715:
        MEMORY[0x1CAA32F9C](v261, 0x1000C8000313F17);
        goto LABEL_716;
      }
    }
    else
    {
      if (!v261)
      {
        v137 = 0;
        goto LABEL_716;
      }
      if ((v261 & (v261 - 1)) != 0)
        goto LABEL_710;
    }
    if (v256 < 0x41)
      goto LABEL_536;
    v267 = ((unint64_t)v256 + 63) >> 6;
LABEL_632:
    v358 = 0;
    do
    {
      v23 = v267-- < 1;
      if (v23)
        break;
      v359 = *((_QWORD *)v264 + v267);
      v358 += __clz(v359);
    }
    while (!v359);
    v360 = v256 | 0xFFFFFFC0;
    if ((v256 & 0x3F) == 0)
      v360 = 0;
    v292 = v358 + v360 == v256;
    goto LABEL_638;
  }
LABEL_536:
  v292 = *(_QWORD *)&v265 == 0;
LABEL_638:
  v361 = v292;
  if (v361)
    p_NullValue = &NullValue;
  else
    p_NullValue = &Add;
  if (v361)
    v363 = v260;
  else
    v363 = v256;
  if (v363 > 0x40)
    v364 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)p_NullValue);
  else
    v364 = v363 + __clz((unint64_t)*p_NullValue) - 64;
  if (v760 > 0x40)
  {
    v366 = 0;
    v367 = ((unint64_t)v760 + 63) >> 6;
    do
    {
      v23 = v367-- < 1;
      if (v23)
        break;
      v368 = *((_QWORD *)__src + v367);
      v366 += __clz(v368);
    }
    while (!v368);
    v369 = v760 | 0xFFFFFFC0;
    if ((v760 & 0x3F) == 0)
      v369 = 0;
    v365 = v366 + v369;
  }
  else
  {
    v365 = (_DWORD)v760 + __clz((unint64_t)__src) - 64;
  }
  v370 = v363 + ~v364;
  v371 = (_DWORD)v760 + ~v365;
  if (v127 != 32)
  {
    v372 = v767;
    v373 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)v767, (llvm::Type *)&__src, v130);
    WORD4(v775) = 257;
    v767 = (llvm::APInt *)sub_1C4D89BCC((uint64_t)v122, v372, (uint64_t)v373, (uint64_t)&p_src);
  }
  if (v370 <= v371)
  {
    v378 = (uint64_t *)v767;
    WORD4(v775) = 257;
    if (v370 >= v371)
    {
      v381 = v122;
      v380 = (uint64_t *)v767;
    }
    else
    {
      v379 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v767, v371 - v370, 0);
      v380 = (uint64_t *)sub_1C506ED1C((uint64_t)v122, (uint64_t)v378, (uint64_t)v379, (uint64_t)&p_src, 0);
      v767 = (llvm::APInt *)v380;
      WORD4(v775) = 257;
      v381 = v122;
    }
    v376 = (uint64_t *)sub_1C4773690(v381, (unsigned __int8 *)v380, (uint64_t)v125, (uint64_t)&p_src);
  }
  else
  {
    WORD4(v775) = 257;
    v374 = (uint64_t *)sub_1C4773690(v122, (unsigned __int8 *)v767, (uint64_t)v125, (uint64_t)&p_src);
    v767 = (llvm::APInt *)v374;
    WORD4(v775) = 257;
    v375 = llvm::ConstantInt::get((llvm::ConstantInt *)*v374, v370 - v371, 0);
    v376 = (uint64_t *)sub_1C506E874((uint64_t)v122, (uint64_t)v374, (uint64_t)v375, (uint64_t)&p_src, 0, 0);
  }
  v137 = (unsigned __int8 *)v376;
  v767 = (llvm::APInt *)v376;
  if (v770 > 0x40)
  {
    v383 = 0;
    v384 = ((unint64_t)v770 + 63) >> 6;
    do
    {
      v23 = v384-- < 1;
      if (v23)
        break;
      v385 = *((_QWORD *)Add + v384);
      v383 += __clz(v385);
    }
    while (!v385);
    v386 = v770 | 0xFFFFFFC0;
    if ((v770 & 0x3F) == 0)
      v386 = 0;
    v382 = v383 + v386 == v770;
  }
  else
  {
    v382 = Add == 0;
  }
  v387 = v382;
  if (v387 != ((_DWORD)v763 != 33))
  {
    WORD4(v775) = 257;
    v388 = llvm::ConstantInt::get((llvm::ConstantInt **)*v376, (llvm::Type *)p_NullValue, v377);
    v137 = sub_1C506EC1C(v122, v137, (uint64_t)v388, (uint64_t)&p_src);
    v767 = (llvm::APInt *)v137;
  }
LABEL_711:
  v261 = (uint64_t)NullValue;
  if (v766 >= 0x41 && NullValue != 0)
    goto LABEL_715;
LABEL_716:
  if (v770 >= 0x41 && Add)
    MEMORY[0x1CAA32F9C](Add, 0x1000C8000313F17);
LABEL_230:
  if (v760 >= 0x41)
  {
    v135 = __src;
    if (__src)
      goto LABEL_232;
  }
LABEL_233:
  if (v137)
  {
    v145 = (uint64_t)a1;
    v146 = a2;
    v147 = (llvm::Value *)v137;
    return sub_1C577F888(v145, v146, v147);
  }
LABEL_235:
  v148 = *v80;
  v751 = (llvm::Constant *)*v83;
  v149 = *((_WORD *)a3 + 9);
  v150 = v149 & 0x3F;
  v151 = (llvm::APInt *)*(a3 - 8);
  v152 = (uint64_t)*(a3 - 4);
  if ((llvm::APInt *)v152 != v151 && *(unsigned __int8 *)(v152 + 16) <= 0x14u)
  {
    if (v151 == (llvm::APInt *)v148 && v150 == 32)
    {
      if (v148)
      {
        **((_QWORD **)a2 - 6) = *((_QWORD *)a2 - 7);
        v153 = *((_QWORD *)a2 - 7);
        if (v153)
          *(_QWORD *)(v153 + 16) = *((_QWORD *)a2 - 6);
      }
      *((_QWORD *)a2 - 8) = v152;
      v154 = (uint64_t **)(v152 + 8);
      v155 = *(_QWORD *)(v152 + 8);
      *((_QWORD *)a2 - 7) = v155;
      if (v155)
        *(_QWORD *)(v155 + 16) = (char *)a2 - 56;
      *((_QWORD *)a2 - 6) = v154;
      *v154 = v80;
LABEL_253:
      v159 = 0;
      v748 = 1;
      goto LABEL_262;
    }
    if (v151 == v751 && v150 == 33)
    {
      if (v751)
      {
        **((_QWORD **)a2 - 2) = *((_QWORD *)a2 - 3);
        v156 = *((_QWORD *)a2 - 3);
        if (v156)
          *(_QWORD *)(v156 + 16) = *((_QWORD *)a2 - 2);
      }
      *((_QWORD *)a2 - 4) = v152;
      v157 = (uint64_t **)(v152 + 8);
      v158 = *(_QWORD *)(v152 + 8);
      *((_QWORD *)a2 - 3) = v158;
      if (v158)
        *(_QWORD *)(v158 + 16) = (char *)a2 - 24;
      *((_QWORD *)a2 - 2) = v157;
      *v157 = v83;
      goto LABEL_253;
    }
  }
  if (v150 == 38)
  {
    if (!sub_1C4D9ED34((uint64_t)&p_src, (llvm::Constant *)*(a3 - 4))
      || *(unsigned __int8 *)(v148 + 16) < 0x15u
      || *((unsigned __int8 *)v751 + 16) < 0x15u
      || (v160 = a3[1]) == 0
      || v160[1])
    {
      v159 = 1;
      goto LABEL_262;
    }
    v778 = (llvm::Constant *)a1[3];
    v779 = *((_OWORD *)v778 + 3);
    llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v778, (unsigned __int8 **)&v780);
    v209 = a1[3];
    *(_QWORD *)(v209 + 48) = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v209 + 56) = (char *)a2 + 24;
    v210 = (llvm::Type *)*((_QWORD *)a2 + 6);
    p_src = v210;
    if (v210)
    {
      llvm::MetadataTracking::track((uint64_t)&p_src, (unsigned __int8 *)v210, 2);
      v211 = p_src;
    }
    else
    {
      v211 = 0;
    }
    sub_1C4774EF4(v209, 0, (uint64_t)v211);
    v212 = p_src;
    if (p_src)
      llvm::MetadataTracking::untrack((uint64_t)&p_src, (unsigned __int8 *)p_src);
    v213 = a1[3];
    v214 = llvm::Constant::getNullValue(*(llvm::Constant **)v151, v212);
    if ((*((_BYTE *)a3 + 23) & 0x10) == 0)
    {
      v333 = 0;
      v332 = (llvm::Type *)&byte_1C871356D;
      goto LABEL_591;
    }
    v215 = ***a3;
    v216 = *(_QWORD *)(v215 + 152);
    v217 = *(unsigned int *)(v215 + 168);
    if ((_DWORD)v217)
    {
      LODWORD(v218) = (v217 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      v219 = (uint64_t ****)(v216 + 16 * v218);
      v220 = *v219;
      if (*v219 == a3)
      {
LABEL_590:
        v331 = (int8x8_t ***)v219[1];
        v334 = *v331;
        v332 = (llvm::Type *)(v331 + 2);
        v333 = v334;
LABEL_591:
        WORD4(v775) = 261;
        p_src = v332;
        p_Add = (unint64_t)v333;
        v335 = sub_1C4774B48(v213, 40, (uint64_t)v151, (uint64_t)v214, (uint64_t)&p_src);
        sub_1C577E2C8((uint64_t)a1, (uint64_t)a2, 0, v335);
        v336 = (_QWORD **)*((_QWORD *)a2 - 8);
        v337 = (_QWORD **)*((_QWORD *)a2 - 4);
        if (v336 != v337)
        {
          v338 = (_QWORD **)*((_QWORD *)a2 - 3);
          *((_QWORD *)a2 - 8) = v337;
          *((_QWORD *)a2 - 4) = v336;
          v339 = *(_OWORD *)((char *)a2 - 56);
          v340 = (uint64_t **)*((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 7) = v338;
          *((_QWORD *)a2 - 6) = v340;
          *(_OWORD *)((char *)a2 - 24) = v339;
          *v340 = v80;
          v341 = *((_QWORD *)a2 - 7);
          if (v341)
            *(_QWORD *)(v341 + 16) = (char *)a2 - 56;
          **((_QWORD **)a2 - 2) = v83;
          v342 = *((_QWORD *)a2 - 3);
          if (v342)
            *(_QWORD *)(v342 + 16) = (char *)a2 - 24;
        }
        v343 = a2;
        goto LABEL_597;
      }
      v221 = 1;
      while (v220 != (uint64_t ***)-4096)
      {
        v222 = v218 + v221++;
        v218 = v222 & (v217 - 1);
        v220 = *(uint64_t ****)(v216 + 16 * v218);
        if (v220 == a3)
        {
          v219 = (uint64_t ****)(v216 + 16 * v218);
          goto LABEL_590;
        }
      }
    }
    v219 = (uint64_t ****)(v216 + 16 * v217);
    goto LABEL_590;
  }
  v159 = 0;
LABEL_262:
  v161 = *(_QWORD *)v148;
  if ((*(_DWORD *)(*(_QWORD *)v148 + 8) & 0xFE) == 0x12)
    v161 = **(_QWORD **)(v161 + 16);
  sub_1C4768AD0(a1[10], v161);
  v164 = v163;
  if ((_DWORD)v162 == 1)
  LODWORD(v779) = v164;
  if (v164 > 0x40)
  {
    v166 = &v778;
    llvm::APInt::initSlowCase((llvm::APInt *)&v778, 0, 0);
    v165 = v164 - 1;
    if (v779 >= 0x41)
      v166 = (llvm::Constant **)((char *)v778 + 8 * (v165 >> 6));
  }
  else
  {
    v778 = 0;
    LOBYTE(v165) = v164 - 1;
    v166 = &v778;
  }
  *v166 = (llvm::Constant *)((1 << v165) | (unint64_t)*v166);
  Add = 0;
  NullValue = 0;
  v771 = 0;
  if ((v149 & 0x3E) == 0x20)
  {
    p_src = (llvm::Type *)&Add;
    p_Add = (unint64_t)&NullValue;
    v167 = *((unsigned __int8 *)v151 + 16);
    if (v167 == 5)
    {
      if (*((_WORD *)v151 + 9) != 28)
        goto LABEL_283;
      v168 = (llvm::APInt **)((char *)v151 - 32 * (*((_DWORD *)v151 + 5) & 0x7FFFFFF));
      if (!*v168)
        goto LABEL_283;
      Add = *v168;
      if (!sub_1C57BBD9C((int8x8_t ***)&p_Add, v168[4]))
        goto LABEL_283;
    }
    else
    {
      if (v167 != 56)
        goto LABEL_283;
      if (!*((_QWORD *)v151 - 8))
        goto LABEL_283;
      Add = (llvm::APInt *)*((_QWORD *)v151 - 8);
      if ((sub_1C57BBC6C((int8x8_t ***)&p_Add, *((llvm::Constant **)v151 - 4)) & 1) == 0)
        goto LABEL_283;
    }
    if (v152
      && *(unsigned __int8 *)(v152 + 16) <= 0x14u
      && ((llvm::Constant::isNullValue((llvm::Constant *)v152) & 1) != 0
       || (sub_1C4E71060((uint64_t)&__src, (llvm::Constant *)v152) & 1) != 0))
    {
      v151 = Add;
      if (v150 != 32)
        goto LABEL_289;
LABEL_298:
      if ((llvm::APInt *)v148 != v151)
      {
LABEL_299:
        if (v751 != Add)
          goto LABEL_300;
        p_src = v751;
        p_Add = (unint64_t)&v771;
        __s1 = 0;
        v190 = *(unsigned __int8 *)(v148 + 16);
        if (v190 != 5)
        {
          if (v190 != 58 || v751 != *(llvm::Constant **)(v148 - 64))
            goto LABEL_300;
          v170 = *(unsigned __int8 **)(v148 - 32);
          goto LABEL_344;
        }
        if (*(_WORD *)(v148 + 18) != 30)
          goto LABEL_300;
        v197 = (llvm::Constant **)(v148 - 32 * (*(_DWORD *)(v148 + 20) & 0x7FFFFFF));
        if (v751 != *v197)
          goto LABEL_300;
LABEL_374:
        if (!sub_1C4D8A004((uint64_t)&p_Add, v197[4]))
          goto LABEL_300;
LABEL_375:
        v201 = NullValue;
        v202 = *((unsigned int *)NullValue + 2);
        if (v202 > 0x40)
        {
          if (memcmp(*(const void **)NullValue, *(const void **)v771, ((unint64_t)(v202 + 63) >> 3) & 0x3FFFFFF8))
          {
            goto LABEL_300;
          }
        }
        else if (*(_QWORD *)NullValue != *(_QWORD *)v771)
        {
          goto LABEL_300;
        }
        v224 = a1[3];
        v225 = Add;
        WORD4(v775) = 257;
        v226 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)Add, v201, v191);
        v227 = (llvm::Value *)sub_1C4773594(v224, v225, (uint64_t)v226, (uint64_t)&p_src);
        goto LABEL_698;
      }
      p_src = (llvm::Type *)v148;
      p_Add = (unint64_t)&v771;
      __s1 = 0;
      v188 = *((unsigned __int8 *)v751 + 16);
      if (v188 == 5)
      {
        if (*((_WORD *)v751 + 9) != 30)
          goto LABEL_299;
        v194 = (llvm::Constant **)((char *)v751 - 32 * (*((_DWORD *)v751 + 5) & 0x7FFFFFF));
        if ((llvm::Constant *)v148 != *v194 || !sub_1C4D8A004((uint64_t)&p_Add, v194[4]))
          goto LABEL_299;
      }
      else if (v188 != 58
             || v148 != *((_QWORD *)v751 - 8)
             || (sub_1C4D89F84((uint64_t)&p_Add, *((unsigned __int8 **)v751 - 4)) & 1) == 0)
      {
        goto LABEL_299;
      }
      v195 = NullValue;
      v196 = *((unsigned int *)NullValue + 2);
      if (v196 > 0x40)
      {
        if (memcmp(*(const void **)NullValue, *(const void **)v771, ((unint64_t)(v196 + 63) >> 3) & 0x3FFFFFF8))
          goto LABEL_299;
      }
      else if (*(_QWORD *)NullValue != *(_QWORD *)v771)
      {
        goto LABEL_299;
      }
      v278 = a1[3];
      v279 = (llvm::ConstantInt ***)Add;
      v280 = *((unsigned int *)v195 + 2);
      v758 = v280;
      if (v280 > 0x40)
      {
        v389 = ((unint64_t)(v280 + 63) >> 3) & 0x3FFFFFF8;
        v757 = (void *)operator new[]();
        memcpy(v757, *(const void **)v195, v389);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v757);
        LODWORD(v280) = v758;
        v282 = v757;
      }
      else
      {
        if ((_DWORD)v280)
          v281 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v280;
        else
          v281 = 0;
        v282 = (void *)(v281 & ~*(_QWORD *)v195);
        v757 = v282;
      }
      LODWORD(v760) = v280;
      __src = v282;
      v758 = 0;
      goto LABEL_695;
    }
  }
LABEL_283:
  if (v150 != 40
    || !v152
    || *(unsigned __int8 *)(v152 + 16) > 0x14u
    || (llvm::Constant::isNullValue((llvm::Constant *)v152) & 1) == 0
    && (sub_1C4E71060((uint64_t)&p_src, (llvm::Constant *)v152) & 1) == 0)
  {
    if (!v159 || !sub_1C4D9ED34((uint64_t)&p_src, (llvm::Constant *)v152))
      goto LABEL_300;
    Add = v151;
    NullValue = (llvm::Constant *)&v778;
    goto LABEL_298;
  }
  Add = v151;
  NullValue = (llvm::Constant *)&v778;
LABEL_289:
  if (v751 != v151)
  {
LABEL_290:
    if ((llvm::APInt *)v148 != Add)
      goto LABEL_300;
    p_src = (llvm::Type *)v148;
    p_Add = (unint64_t)&v771;
    __s1 = 0;
    v169 = *((unsigned __int8 *)v751 + 16);
    if (v169 != 5)
    {
      if (v169 != 58 || v148 != *((_QWORD *)v751 - 8))
        goto LABEL_300;
      v170 = (unsigned __int8 *)*((_QWORD *)v751 - 4);
LABEL_344:
      if ((sub_1C4D89F84((uint64_t)&p_Add, v170) & 1) == 0)
        goto LABEL_300;
      goto LABEL_375;
    }
    if (*((_WORD *)v751 + 9) != 30)
      goto LABEL_300;
    v197 = (llvm::Constant **)((char *)v751 - 32 * (*((_DWORD *)v751 + 5) & 0x7FFFFFF));
    if ((llvm::Constant *)v148 != *v197)
      goto LABEL_300;
    goto LABEL_374;
  }
  p_src = v751;
  p_Add = (unint64_t)&v771;
  __s1 = 0;
  v192 = *(unsigned __int8 *)(v148 + 16);
  if (v192 == 5)
  {
    if (*(_WORD *)(v148 + 18) != 30)
      goto LABEL_290;
    v198 = (llvm::Constant **)(v148 - 32 * (*(_DWORD *)(v148 + 20) & 0x7FFFFFF));
    if (v751 != *v198 || !sub_1C4D8A004((uint64_t)&p_Add, v198[4]))
      goto LABEL_290;
  }
  else if (v192 != 58
         || v751 != *(llvm::Constant **)(v148 - 64)
         || (sub_1C4D89F84((uint64_t)&p_Add, *(unsigned __int8 **)(v148 - 32)) & 1) == 0)
  {
    goto LABEL_290;
  }
  v199 = NullValue;
  v200 = *((unsigned int *)NullValue + 2);
  if (v200 > 0x40)
  {
    if (memcmp(*(const void **)NullValue, *(const void **)v771, ((unint64_t)(v200 + 63) >> 3) & 0x3FFFFFF8))
      goto LABEL_290;
  }
  else if (*(_QWORD *)NullValue != *(_QWORD *)v771)
  {
    goto LABEL_290;
  }
  v278 = a1[3];
  v279 = (llvm::ConstantInt ***)Add;
  v283 = *((unsigned int *)v199 + 2);
  v756 = v283;
  if (v283 > 0x40)
  {
    v399 = ((unint64_t)(v283 + 63) >> 3) & 0x3FFFFFF8;
    v755 = (void *)operator new[]();
    memcpy(v755, *(const void **)v199, v399);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v755);
    LODWORD(v283) = v756;
    v285 = v755;
  }
  else
  {
    if ((_DWORD)v283)
      v284 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v283;
    else
      v284 = 0;
    v285 = (void *)(v284 & ~*(_QWORD *)v199);
    v755 = v285;
  }
  LODWORD(v760) = v283;
  __src = v285;
  v756 = 0;
LABEL_695:
  WORD4(v775) = 257;
  v400 = llvm::ConstantInt::get(*v279, (llvm::Type *)&__src, v189);
  v227 = (llvm::Value *)sub_1C4D89BCC(v278, v279, (uint64_t)v400, (uint64_t)&p_src);
  if (v760 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
LABEL_698:
  if (v227)
  {
    v33 = sub_1C577F888((uint64_t)a1, a2, v227);
    v171 = 0;
    goto LABEL_301;
  }
LABEL_300:
  v33 = 0;
  v171 = 1;
LABEL_301:
  if (v779 >= 0x41 && v778)
    MEMORY[0x1CAA32F9C](v778, 0x1000C8000313F17);
  if (v171)
  {
    v172 = a3[1];
    if (!v172)
      goto LABEL_307;
    if (v172[1])
      goto LABEL_307;
    v182 = *((_QWORD *)*v747 + 1);
    if (!v182)
      goto LABEL_307;
    if (*(_QWORD *)(v182 + 8))
      goto LABEL_307;
    if ((*((_WORD *)a3 + 9) & 0x3F) != 0x20)
      goto LABEL_307;
    v183 = *v110;
    if (!*v110)
      goto LABEL_307;
    if (*((unsigned __int8 *)v183 + 16) > 0x14u)
      goto LABEL_307;
    v184 = *(llvm::ConstantInt **)a2;
    v185 = a1[3];
    if ((llvm::Constant::isNullValue(*v110) & 1) == 0 && (sub_1C4E71060((uint64_t)&p_src, v183) & 1) == 0)
      goto LABEL_307;
    if ((sub_1C4D89CC8((uint64_t)&v778, v751) & 1) == 0)
      goto LABEL_307;
    p_src = (llvm::Type *)&v778;
    v186 = *(_QWORD *)(v148 + 8);
    if (!v186 || *(_QWORD *)(v186 + 8))
      goto LABEL_307;
    v187 = *(unsigned __int8 *)(v148 + 16);
    if (v187 == 5)
    {
      if (*(_WORD *)(v148 + 18) != 28)
        goto LABEL_307;
      v412 = (llvm::Constant **)(v148 - 32 * (*(_DWORD *)(v148 + 20) & 0x7FFFFFF));
      if (!*v412)
        goto LABEL_307;
      v778 = *v412;
      if ((sub_1C4D89E3C((uint64_t)&p_Add, v412[4]) & 1) == 0)
        goto LABEL_307;
    }
    else
    {
      if (v187 != 56)
        goto LABEL_307;
      if (!*(_QWORD *)(v148 - 64))
        goto LABEL_307;
      v778 = *(llvm::Constant **)(v148 - 64);
      if (!sub_1C4D89CC8((uint64_t)&p_Add, *(llvm::Constant **)(v148 - 32)))
        goto LABEL_307;
    }
    v413 = v778;
    v414 = *((_QWORD *)v778 + 1);
    if (!v414 || *(_QWORD *)(v414 + 8))
      goto LABEL_743;
    v658 = *((unsigned __int8 *)v778 + 16);
    if (v658 == 5)
    {
      if (*((_WORD *)v778 + 9) != 26)
        goto LABEL_743;
      v682 = (llvm::Constant **)((char *)v778 - 32 * (*((_DWORD *)v778 + 5) & 0x7FFFFFF));
      v659 = *v682;
      if (!*v682)
        goto LABEL_743;
      v415 = (uint64_t)v682[4];
      if (!v415)
        goto LABEL_743;
    }
    else if (v658 != 54
           || (v659 = (llvm::Constant *)*((_QWORD *)v778 - 8)) == 0
           || (v415 = *((_QWORD *)v778 - 4)) == 0)
    {
LABEL_743:
      v415 = 0;
      v416 = 0;
LABEL_744:
      v417 = *v747;
      v418 = *((unsigned __int8 *)*v747 + 16);
      if (v418 != 5)
      {
        if (v418 != 56)
          goto LABEL_307;
        v419 = (llvm::Constant *)*((_QWORD *)v417 - 8);
        v420 = (llvm::Constant *)*((_QWORD *)v417 - 4);
        if (v413 != v419 || !v420)
        {
          if (!v419)
            goto LABEL_307;
          v15 = v413 == v420;
          v420 = (llvm::Constant *)*((_QWORD *)v417 - 8);
          if (!v15)
            goto LABEL_307;
        }
        goto LABEL_1381;
      }
      if (*((_WORD *)v417 + 9) == 28)
      {
        if ((v657 = (llvm::Constant **)((char *)v417 - 32 * (*((_DWORD *)v417 + 5) & 0x7FFFFFF)),
              v420 = v657[4],
              v413 == *v657)
          && v420
          || *v657 && (v15 = v413 == v420, v420 = *v657, v15))
        {
LABEL_1381:
          v731 = (uint64_t)llvm::ConstantInt::get(v184, 1, 0);
          if (v416)
          {
            WORD4(v775) = 257;
            v731 = sub_1C506E874(v185, v731, v415, (uint64_t)&p_src, 0, 0);
          }
          WORD4(v775) = 257;
          v732 = sub_1C4773594(v185, v420, v731, (uint64_t)&p_src);
          WORD4(v775) = 257;
          v733 = (llvm::Constant **)sub_1C4D89BCC(v185, v413, v732, (uint64_t)&p_src);
          WORD4(v775) = 257;
          v735 = llvm::Constant::getNullValue(*v733, v734);
          v736 = sub_1C4774B48(v185, 33, (uint64_t)v733, (uint64_t)v735, (uint64_t)&p_src);
          v737 = (char *)operator new(0x60uLL);
          *((_DWORD *)v737 + 13) = *((_DWORD *)v737 + 13) & 0x38000000 | 1;
          v33 = (llvm::UndefValue **)(v737 + 32);
          *(_QWORD *)v737 = 0;
          *((_QWORD *)v737 + 1) = 0;
          *((_QWORD *)v737 + 2) = 0;
          *((_QWORD *)v737 + 3) = v737 + 32;
          WORD4(v775) = 257;
          llvm::ZExtInst::ZExtInst((uint64_t)(v737 + 32), v736, (uint64_t)v184, (uint64_t)&p_src, 0);
          return v33;
        }
      }
LABEL_307:
      __src = (void *)v148;
      v173 = *(llvm::Type **)v148;
      if ((*(_DWORD *)(*(_QWORD *)v148 + 8) & 0xFE) == 0x12)
        v173 = (llvm::Type *)**((_QWORD **)v173 + 2);
      v174 = llvm::Type::getPrimitiveSizeInBits(v173);
      if ((*((_WORD *)a3 + 9) & 0x3E) != 0x20)
        goto LABEL_805;
      v175 = *v110;
      if (!*v110)
        goto LABEL_805;
      if (*((unsigned __int8 *)v175 + 16) > 0x14u)
        goto LABEL_805;
      v176 = v174;
      if ((llvm::Constant::isNullValue(*v110) & 1) == 0 && (sub_1C4E71060((uint64_t)&p_src, v175) & 1) == 0)
        goto LABEL_805;
      v177 = (llvm::Constant *)v148;
      v178 = v751;
      if ((*((_WORD *)a3 + 9) & 0x3F) == 0x21)
      {
        v177 = v751;
        __src = v751;
        v178 = (llvm::Constant *)v148;
      }
      v179 = v176 - 1;
      LODWORD(__s1) = 64;
      p_src = (llvm::Type *)&__src;
      p_Add = (v176 - 1);
      v180 = *((unsigned __int8 *)v178 + 16);
      if (v180 == 58)
      {
        v181 = v177 == *((llvm::Constant **)v178 - 8)
            && sub_1C4D8A7F0((llvm::APInt *)&p_Add, *((unsigned __int8 **)v178 - 4));
      }
      else
      {
        if (v180 == 5)
        {
          v179 = 0;
          if (*((_WORD *)v178 + 9) == 30)
          {
            v193 = (llvm::Constant **)((char *)v178 - 32 * (*((_DWORD *)v178 + 5) & 0x7FFFFFF));
            if (v177 == *v193 && sub_1C4D8A86C((llvm::APInt *)&p_Add, v193[4]))
              v179 = 1;
          }
        }
        v181 = (v180 == 5) & v179;
      }
      if (__s1 >= 0x41 && p_Add)
        MEMORY[0x1CAA32F9C](p_Add, 0x1000C8000313F17);
      if (!v181)
        goto LABEL_805;
      v203 = (llvm::Type **)__src;
      if (!__src)
        goto LABEL_805;
      if (*((_BYTE *)__src + 16) != 84)
        goto LABEL_805;
      v204 = *((_QWORD *)__src - 4);
      if (!v204
        || *(_BYTE *)(v204 + 16)
        || *(_QWORD *)(v204 + 24) != *((_QWORD *)__src + 9)
        || *(_DWORD *)(v204 + 36) != 52)
      {
        goto LABEL_805;
      }
      v205 = *v747;
      v206 = *((_QWORD *)__src - 4 * (*((_DWORD *)__src + 5) & 0x7FFFFFF));
      p_src = v205;
      __s1 = v205;
      v207 = *(unsigned __int8 *)(v206 + 16);
      if (v207 != 5)
      {
        if (v207 != 56)
          goto LABEL_805;
        if (v205 != *(llvm::Type **)(v206 - 64))
          goto LABEL_393;
        v443 = *(_QWORD *)(v206 - 32);
        v444 = *(unsigned __int8 *)(v443 + 16);
        if (v444 == 5)
        {
          if (*(_WORD *)(v443 + 18) != 15
            || !sub_1C4E71060((uint64_t)&p_Add, *(llvm::Constant **)(v443 - 32 * (*(_DWORD *)(v443 + 20) & 0x7FFFFFF))))
          {
            goto LABEL_393;
          }
          v445 = *(void **)(v443 - 32 * (*(_DWORD *)(v443 + 20) & 0x7FFFFFF) + 32);
        }
        else
        {
          if (v444 != 43 || !sub_1C4D8AC3C((uint64_t)&p_Add, *(llvm::Constant **)(v443 - 64)))
            goto LABEL_393;
          v445 = *(void **)(v443 - 32);
        }
        if (__s1 == v445)
          goto LABEL_1210;
LABEL_393:
        if (p_src != *(llvm::Type **)(v206 - 32))
          goto LABEL_805;
        v208 = *(_QWORD *)(v206 - 64);
        goto LABEL_726;
      }
      if (*(_WORD *)(v206 + 18) != 28)
        goto LABEL_805;
      v407 = (llvm::Type **)(v206 - 32 * (*(_DWORD *)(v206 + 20) & 0x7FFFFFF));
      if (v205 == *v407)
      {
        v449 = v407[4];
        v450 = *((unsigned __int8 *)v449 + 16);
        if (v450 == 5)
        {
          if (*((_WORD *)v449 + 9) != 15
            || !sub_1C4E71060((uint64_t)&p_Add, *((llvm::Constant **)v449 - 4 * (*((_DWORD *)v449 + 5) & 0x7FFFFFF))))
          {
            goto LABEL_724;
          }
          v451 = (void *)((_QWORD *)v449 - 4 * (*((_DWORD *)v449 + 5) & 0x7FFFFFF))[4];
        }
        else
        {
          if (v450 != 43 || !sub_1C4D8AC3C((uint64_t)&p_Add, *((llvm::Constant **)v449 - 8)))
            goto LABEL_724;
          v451 = (void *)*((_QWORD *)v449 - 4);
        }
        if (__s1 == v451)
        {
LABEL_1210:
          v660 = *(uint64_t **)(*((_QWORD *)v203[5] + 7) + 40);
          p_src = *v203;
          Declaration = llvm::Intrinsic::getDeclaration(v660, 54, (uint64_t *)&p_src, 1);
          v662 = Declaration;
          if (Declaration)
            v663 = *(uint64_t ***)(Declaration + 24);
          else
            v663 = 0;
          v778 = v205;
          *(_QWORD *)&v779 = v203[-4 * (*((_DWORD *)v203 + 5) & 0x7FFFFFF) + 4];
          WORD4(v775) = 257;
          v664 = (char *)operator new(0xB0uLL);
          v665 = 0;
          v33 = (llvm::UndefValue **)(v664 + 96);
          *((_DWORD *)v664 + 29) = *((_DWORD *)v664 + 29) & 0x38000000 | 3;
          do
          {
            v666 = &v664[v665];
            *(_QWORD *)v666 = 0;
            *((_QWORD *)v666 + 1) = 0;
            *((_QWORD *)v666 + 2) = 0;
            *((_QWORD *)v666 + 3) = v33;
            v665 += 32;
          }
          while (v665 != 96);
          *((_QWORD *)v664 + 12) = *v663[2];
          *((_QWORD *)v664 + 13) = 0;
          v664[112] = 84;
          v664[113] = 0;
          *((_WORD *)v664 + 57) = 0;
          *((_DWORD *)v664 + 29) = *((_DWORD *)v664 + 29) & 0xC0000000 | 3;
          *(_OWORD *)(v664 + 120) = 0u;
          *(_OWORD *)(v664 + 136) = 0u;
          *((_DWORD *)v664 + 38) = 0;
          *((_QWORD *)v664 + 20) = 0;
          llvm::CallInst::init((uint64_t ***)v664 + 12, v663, v662, (uint64_t *)&v778, 2, 0, 0, (uint64_t)&p_src);
          return v33;
        }
      }
LABEL_724:
      v408 = (uint64_t *)(v206 - 32 * (*(_DWORD *)(v206 + 20) & 0x7FFFFFF));
      if (p_src != (llvm::Type *)v408[4])
        goto LABEL_805;
      v208 = *v408;
LABEL_726:
      v409 = *(unsigned __int8 *)(v208 + 16);
      if (v409 == 5)
      {
        if (*(_WORD *)(v208 + 18) != 15
          || !sub_1C4E71060((uint64_t)&p_Add, *(llvm::Constant **)(v208 - 32 * (*(_DWORD *)(v208 + 20) & 0x7FFFFFF))))
        {
          goto LABEL_805;
        }
        v410 = *(void **)(v208 - 32 * (*(_DWORD *)(v208 + 20) & 0x7FFFFFF) + 32);
      }
      else
      {
        if (v409 != 43 || !sub_1C4D8AC3C((uint64_t)&p_Add, *(llvm::Constant **)(v208 - 64)))
          goto LABEL_805;
        v410 = *(void **)(v208 - 32);
      }
      if (__s1 != v410)
      {
LABEL_805:
        v452 = (uint64_t *)a1[3];
        v453 = a3[1];
        if (!v453 || v453[1])
          goto LABEL_838;
        __src = 0;
        v454 = *v110;
        p_src = (llvm::Type *)&__src;
        p_Add = 1;
        if (!sub_1C4D89F84((uint64_t)&p_src, (unsigned __int8 *)v454))
          goto LABEL_837;
        v455 = (int8x8_t **)*(a3 - 8);
        if ((*((_WORD *)a3 + 9) & 0x3F) == 0x24)
        {
          v456 = __src;
          v457 = *((_DWORD *)__src + 2);
          if (v457 >= 0x41)
          {
            if (v457 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__src) > 0x40)
              goto LABEL_822;
            v456 = (_QWORD *)*v456;
          }
          if (*v456 == 2)
          {
            p_Add = (unint64_t)v455;
            v458 = *(unsigned __int8 *)(v148 + 16);
            if (v458 == 5)
            {
              if (*(_WORD *)(v148 + 18) != 15
                || !sub_1C4E71060((uint64_t)&p_src, *(llvm::Constant **)(v148 - 32 * (*(_DWORD *)(v148 + 20) & 0x7FFFFFF))))
              {
                goto LABEL_822;
              }
              v459 = *(int8x8_t ***)(v148 - 32 * (*(_DWORD *)(v148 + 20) & 0x7FFFFFF) + 32);
            }
            else
            {
              if (v458 != 43 || !sub_1C4D8AC3C((uint64_t)&p_src, *(llvm::Constant **)(v148 - 64)))
                goto LABEL_822;
              v459 = *(int8x8_t ***)(v148 - 32);
            }
            if ((int8x8_t **)p_Add == v459 && sub_1C4D9ED34((uint64_t)&v778, v751))
              goto LABEL_836;
          }
        }
LABEL_822:
        if ((*((_WORD *)a3 + 9) & 0x3F) == 0x22)
        {
          v460 = __src;
          v461 = *((_DWORD *)__src + 2);
          if (v461 >= 0x41)
          {
            if (v461 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)__src) > 0x40)
              goto LABEL_837;
            v460 = (_QWORD *)*v460;
          }
          if (*v460 == 1)
          {
            p_Add = (unint64_t)v455;
            v462 = *((unsigned __int8 *)v751 + 16);
            if (v462 == 5)
            {
              if (*((_WORD *)v751 + 9) == 15
                && sub_1C4E71060((uint64_t)&p_src, *((llvm::Constant **)v751 - 4 * (*((_DWORD *)v751 + 5) & 0x7FFFFFF))))
              {
                v463 = (int8x8_t **)((_QWORD *)v751 - 4 * (*((_DWORD *)v751 + 5) & 0x7FFFFFF))[4];
                goto LABEL_834;
              }
            }
            else if (v462 == 43 && sub_1C4D8AC3C((uint64_t)&p_src, *((llvm::Constant **)v751 - 8)))
            {
              v463 = (int8x8_t **)*((_QWORD *)v751 - 4);
LABEL_834:
              if ((int8x8_t **)p_Add == v463 && sub_1C4D9ED34((uint64_t)&v778, (llvm::Constant *)v148))
              {
LABEL_836:
                v464 = (char *)operator new(0x60uLL);
                v33 = (llvm::UndefValue **)(v464 + 32);
                *((_DWORD *)v464 + 13) = *((_DWORD *)v464 + 13) & 0x38000000 | 1;
                *(_QWORD *)v464 = 0;
                *((_QWORD *)v464 + 1) = 0;
                *((_QWORD *)v464 + 2) = 0;
                *((_QWORD *)v464 + 3) = v464 + 32;
                WORD4(v775) = 257;
                v466 = llvm::Constant::getNullValue((llvm::Constant *)*v455, v465);
                v467 = sub_1C4774B48((uint64_t)v452, 33, (uint64_t)v455, (uint64_t)v466, (uint64_t)&p_src);
                v468 = *(_QWORD *)v148;
                v781 = 257;
                llvm::SExtInst::SExtInst((uint64_t)v33, v467, v468, (uint64_t)&v778, 0);
                return v33;
              }
            }
          }
        }
LABEL_837:
        v452 = (uint64_t *)a1[3];
LABEL_838:
        v469 = *(_DWORD *)(*(_QWORD *)v148 + 8);
        if ((v469 & 0xFE) == 0x12)
          v470 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v148 + 16) + 8);
        else
          v470 = *(_DWORD *)(*(_QWORD *)v148 + 8);
        if (v470 != 13 || ((v469 & 0xFE) == 18) != (((_DWORD)(*a3)[1] & 0xFE) == 18))
          goto LABEL_843;
        v481 = (uint64_t)*(a3 - 8);
        v482 = (unsigned __int8 *)*(a3 - 4);
        __src = 0;
        v483 = *((_WORD *)a3 + 9);
        v484 = v483 & 0x3E;
        if (v484 == 32)
        {
          if (!v482
            || v482[16] > 0x14u
            || (llvm::Constant::isNullValue((llvm::Constant *)v482) & 1) == 0
            && (sub_1C4E71060((uint64_t)&p_src, (llvm::Constant *)v482) & 1) == 0)
          {
            goto LABEL_843;
          }
          v778 = 0;
          p_Add = (unint64_t)&v778;
          v485 = *(unsigned __int8 *)(v481 + 16);
          if (v485 == 5)
          {
            if (*(_WORD *)(v481 + 18) != 28
              || !sub_1C57BBD9C((int8x8_t ***)&p_Add, *(llvm::Constant **)(v481 - 32 * (*(_DWORD *)(v481 + 20) & 0x7FFFFFF) + 32)))
            {
              goto LABEL_843;
            }
          }
          else if (v485 != 56
                 || (sub_1C57BBC6C((int8x8_t ***)&p_Add, *(llvm::Constant **)(v481 - 32)) & 1) == 0)
          {
            goto LABEL_843;
          }
          __src = (void *)v481;
          v501 = *((_DWORD *)v778 + 2);
          if (v501 > 0x40)
            v502 = llvm::APInt::countLeadingZerosSlowCase(v778);
          else
            v502 = v501 + __clz(*(_QWORD *)v778) - 64;
          v500 = v501 + ~v502;
          v494 = (*((_WORD *)a3 + 9) & 0x3F) == 32;
        }
        else
        {
          v493 = v483 & 0x3F;
          if (v493 != 40 && v493 != 38)
            goto LABEL_843;
          v494 = v493 == 38;
          if (v493 == 38)
          {
            if ((sub_1C4D9ED34((uint64_t)&v778, (llvm::Constant *)v482) & 1) == 0)
              goto LABEL_843;
          }
          else if (!v482
                 || v482[16] > 0x14u
                 || (llvm::Constant::isNullValue((llvm::Constant *)v482) & 1) == 0
                 && (sub_1C4E71060((uint64_t)&p_src, (llvm::Constant *)v482) & 1) == 0)
          {
            goto LABEL_843;
          }
          p_src = (llvm::Type *)&__src;
          v498 = *(_QWORD *)(v481 + 8);
          if (!v498 || *(_QWORD *)(v498 + 8) || !sub_1C4B03864((_QWORD **)&p_src, v481))
            goto LABEL_843;
          v499 = *(llvm::Type **)v481;
          if ((*(_DWORD *)(*(_QWORD *)v481 + 8) & 0xFE) == 0x12)
            v499 = (llvm::Type *)**((_QWORD **)v499 + 2);
          v500 = llvm::Type::getPrimitiveSizeInBits(v499) - 1;
        }
        Add = 0;
        p_src = (llvm::Type *)v148;
        p_Add = (unint64_t)&Add;
        v505 = *((unsigned __int8 *)v751 + 16);
        if (v505 == 5)
        {
          if (*((_WORD *)v751 + 9) != 29)
            goto LABEL_927;
          v506 = (llvm::Constant **)((char *)v751 - 32 * (*((_DWORD *)v751 + 5) & 0x7FFFFFF));
          if (*v506 != (llvm::Constant *)v148
            || (sub_1C57BBD9C((int8x8_t ***)&p_Add, v506[4]) & 1) == 0)
          {
            goto LABEL_927;
          }
        }
        else if (v505 != 57
               || *((_QWORD *)v751 - 8) != v148
               || !sub_1C57BBC6C((int8x8_t ***)&p_Add, *((llvm::Constant **)v751 - 4)))
        {
LABEL_927:
          p_src = v751;
          p_Add = (unint64_t)&Add;
          v510 = *(unsigned __int8 *)(v148 + 16);
          if (v510 == 5)
          {
            if (*(_WORD *)(v148 + 18) != 29)
              goto LABEL_843;
            v511 = (llvm::Constant **)(v148 - 32 * (*(_DWORD *)(v148 + 20) & 0x7FFFFFF));
            if (*v511 != v751 || (sub_1C57BBD9C((int8x8_t ***)&p_Add, v511[4]) & 1) == 0)
              goto LABEL_843;
          }
          else if (v510 != 57
                 || *(llvm::Constant **)(v148 - 64) != v751
                 || !sub_1C57BBC6C((int8x8_t ***)&p_Add, *(llvm::Constant **)(v148 - 32)))
          {
            goto LABEL_843;
          }
          v744 = v500;
          v508 = 0;
          v507 = 1;
          v509 = v751;
LABEL_936:
          v512 = *((_DWORD *)Add + 2);
          if (v512 > 0x40)
            v513 = llvm::APInt::countLeadingZerosSlowCase(Add);
          else
            v513 = v512 + __clz(*(_QWORD *)Add) - 64;
          v522 = ~v513;
          if (v494)
            v523 = v507;
          else
            v523 = v508;
          v746 = v523;
          v524 = *(llvm::Type **)v509;
          v743 = (uint64_t *)v509;
          if ((*(_DWORD *)(*(_QWORD *)v509 + 8) & 0xFE) == 0x12)
            v524 = (llvm::Type *)**((_QWORD **)v524 + 2);
          v525 = v512 + v522;
          v526 = llvm::Type::getPrimitiveSizeInBits(v524);
          v527 = *(llvm::Constant **)__src;
          v528 = *(_DWORD *)(*(_QWORD *)__src + 8) & 0xFE;
          v529 = *(llvm::Type **)__src;
          if (v528 == 18)
            v529 = (llvm::Type *)**((_QWORD **)v527 + 2);
          v530 = llvm::Type::getPrimitiveSizeInBits(v529);
          if (v508)
            v531 = v751;
          else
            v531 = (llvm::Constant *)v148;
          v532 = v746;
          if (v744 != v525)
            v532 = v746 + 1;
          if (v526 != v530)
            ++v532;
          v533 = a3[1];
          if (v533)
            LODWORD(v533) = v533[1] == 0;
          v534 = *((_QWORD *)v531 + 1);
          if (v534)
            LODWORD(v534) = *(_QWORD *)(v534 + 8) == 0;
          if (v532 > (int)v534 + (int)v533)
            goto LABEL_843;
          if (v484 == 32)
          {
LABEL_975:
            if (v525 <= v744)
            {
              v545 = __src;
              if (v744 <= v525)
              {
                v548 = *v743;
                WORD4(v775) = 257;
                v549 = v452;
                v547 = __src;
              }
              else
              {
                WORD4(v775) = 257;
                v546 = llvm::ConstantInt::get(*(llvm::ConstantInt **)__src, v744 - v525, 0);
                v547 = (void *)sub_1C506ED1C((uint64_t)v452, (uint64_t)v545, (uint64_t)v546, (uint64_t)&p_src, 0);
                __src = v547;
                v548 = *v743;
                WORD4(v775) = 257;
                v549 = v452;
              }
              v543 = (llvm::ConstantInt ***)sub_1C4773690(v549, (unsigned __int8 *)v547, v548, (uint64_t)&p_src);
            }
            else
            {
              v540 = *v743;
              WORD4(v775) = 257;
              v541 = sub_1C4773690(v452, (unsigned __int8 *)__src, v540, (uint64_t)&p_src);
              __src = v541;
              WORD4(v775) = 257;
              v542 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v541, v525 - v744, 0);
              v543 = (llvm::ConstantInt ***)sub_1C506E874((uint64_t)v452, (uint64_t)v541, (uint64_t)v542, (uint64_t)&p_src, 0, 0);
            }
            v652 = (unsigned __int8 *)v543;
            __src = v543;
            if (v746)
            {
              WORD4(v775) = 257;
              v653 = llvm::ConstantInt::get(*v543, Add, v544);
              v652 = sub_1C506EC1C(v452, v652, (uint64_t)v653, (uint64_t)&p_src);
              __src = v652;
            }
            WORD4(v775) = 257;
            v330 = sub_1C4773594((uint64_t)v452, v652, (uint64_t)v743, (uint64_t)&p_src);
            if (v330)
              goto LABEL_1180;
LABEL_843:
            v471 = a1[3];
            v472 = (uint64_t)*(a3 - 8);
            v473 = (llvm::Constant *)*(a3 - 4);
            v474 = *(_QWORD *)v473;
            if ((*(_DWORD *)(*(_QWORD *)v473 + 8) & 0xFE) == 0x12)
            {
              v474 = **(_QWORD **)(v474 + 16);
              v475 = *(unsigned __int8 *)(v474 + 8);
            }
            else
            {
              v475 = *(_DWORD *)(*(_QWORD *)v473 + 8);
            }
            if (v475 != 13)
              goto LABEL_982;
            v476 = *((_WORD *)a3 + 9) & 0x3F;
            v477 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v474);
            if (v476 == 40)
            {
              LODWORD(v779) = v477;
              if (v477 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v778, 0, 0);
              else
                v778 = 0;
              __src = (void *)39;
              v760 = (llvm::Constant *)&v778;
              sub_1C57BEAF0((uint64_t)&__src, v473);
              v487 = v486;
              if (v779 >= 0x41 && v778)
                MEMORY[0x1CAA32F9C](v778, 0x1000C8000313F17);
              if ((v487 & 1) == 0)
                goto LABEL_982;
            }
            else
            {
              if (v476 != 38)
                goto LABEL_982;
              LODWORD(v779) = v477;
              if (v477 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v778, -1, 0);
              }
              else
              {
                if (v477)
                  v478 = (llvm::Constant *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v477);
                else
                  v478 = 0;
                v778 = v478;
              }
              p_src = (llvm::Type *)39;
              p_Add = (unint64_t)&v778;
              sub_1C57BEAF0((uint64_t)&p_src, v473);
              v480 = v479;
              if (v779 > 0x40 && v778)
                MEMORY[0x1CAA32F9C](v778, 0x1000C8000313F17);
              if (!v480)
                goto LABEL_982;
            }
            v488 = v751;
            if (v476 == 40)
              v489 = (llvm::Constant *)v148;
            else
              v489 = v751;
            if (v476 != 40)
              v488 = (llvm::Constant *)v148;
            v490 = *((unsigned __int8 *)v488 + 16);
            if (v490 == 5)
            {
              if (*((_WORD *)v488 + 9) != 26)
                goto LABEL_982;
              v495 = (uint64_t *)((char *)v488 - 32 * (*((_DWORD *)v488 + 5) & 0x7FFFFFF));
              v491 = *v495;
              if (!*v495)
                goto LABEL_982;
              v492 = v495[4];
              if (!v492)
                goto LABEL_982;
            }
            else
            {
              if (v490 != 54)
                goto LABEL_982;
              v491 = *((_QWORD *)v488 - 8);
              if (!v491)
                goto LABEL_982;
              v492 = *((_QWORD *)v488 - 4);
              if (!v492)
                goto LABEL_982;
            }
            v496 = *((unsigned __int8 *)v489 + 16);
            if (v496 == 5)
            {
              if (*((_WORD *)v489 + 9) != 27)
                goto LABEL_982;
              v503 = (_QWORD *)((char *)v489 - 32 * (*((_DWORD *)v489 + 5) & 0x7FFFFFF));
              if (v491 != *v503)
                goto LABEL_982;
              v497 = v503[4];
            }
            else
            {
              if (v496 != 55 || v491 != *((_QWORD *)v489 - 8))
                goto LABEL_982;
              v497 = *((_QWORD *)v489 - 4);
            }
            if (v492 == v497 && v491 == v472)
            {
              if ((*((_BYTE *)v489 + 17) & 2) != 0)
                v504 = (*((unsigned __int8 *)v488 + 17) >> 1) & 1;
              else
                v504 = 0;
              if ((*((_BYTE *)a3 + 23) & 0x10) == 0)
              {
                v552 = 0;
                v551 = (llvm::Type *)&byte_1C871356D;
LABEL_981:
                WORD4(v775) = 261;
                p_src = v551;
                p_Add = (unint64_t)v552;
                v330 = sub_1C534E5D8(v471, v491, v492, (uint64_t)&p_src, v504);
                if (!v330)
                  goto LABEL_982;
LABEL_1180:
                v147 = (llvm::Value *)v330;
                goto LABEL_1372;
              }
              v514 = ***a3;
              v515 = *(_QWORD *)(v514 + 152);
              v516 = *(unsigned int *)(v514 + 168);
              if ((_DWORD)v516)
              {
                LODWORD(v517) = (v516 - 1) & ((a3 >> 4) ^ (a3 >> 9));
                v518 = (uint64_t ****)(v515 + 16 * v517);
                v519 = *v518;
                if (*v518 == a3)
                {
LABEL_980:
                  v550 = (int8x8_t ***)v518[1];
                  v553 = *v550;
                  v551 = (llvm::Type *)(v550 + 2);
                  v552 = v553;
                  goto LABEL_981;
                }
                v520 = 1;
                while (v519 != (uint64_t ***)-4096)
                {
                  v521 = v517 + v520++;
                  v517 = v521 & (v516 - 1);
                  v519 = *(uint64_t ****)(v515 + 16 * v517);
                  if (v519 == a3)
                  {
                    v518 = (uint64_t ****)(v515 + 16 * v517);
                    goto LABEL_980;
                  }
                }
              }
              v518 = (uint64_t ****)(v515 + 16 * v516);
              goto LABEL_980;
            }
LABEL_982:
            v554 = *((_WORD *)a3 + 9);
            if ((v554 & 0x3E) == 0x20)
            {
              v555 = (unsigned __int8 *)*(a3 - 4);
              if (v555)
              {
                if (v555[16] <= 0x14u)
                {
                  v556 = *(a3 - 8);
                  if ((llvm::Constant::isNullValue((llvm::Constant *)*(a3 - 4)) & 1) != 0
                    || (sub_1C4E71060((uint64_t)&p_src, (llvm::Constant *)v555) & 1) != 0)
                  {
                    if ((v554 & 0x3F) == 0x21)
                      v557 = (unsigned __int8 *)v751;
                    else
                      v557 = (unsigned __int8 *)v148;
                    if ((v554 & 0x3F) == 0x21)
                      v558 = (llvm::Constant *)v148;
                    else
                      v558 = v751;
                    __src = 0;
                    p_src = (llvm::Type *)&__src;
                    if ((sub_1C4B0378C((_QWORD **)&p_src, (uint64_t)v558) & 1) == 0)
                    {
                      v778 = (llvm::Constant *)&__src;
                      if ((sub_1C4B03864((_QWORD **)&v778, (uint64_t)v558) & 1) == 0)
                        __src = v558;
                    }
                    LODWORD(p_src) = 54;
                    p_Add = 0;
                    __s1 = v556;
                    if (sub_1C4E7AEB4((uint64_t)&p_src, (uint64_t)__src)
                      || (LODWORD(v778) = 52,
                          *(_QWORD *)&v779 = 0,
                          *((_QWORD *)&v779 + 1) = v556,
                          sub_1C4E7AEB4((uint64_t)&v778, (uint64_t)__src)))
                    {
                      v559 = (uint64_t ***)__src;
                      v560 = *(llvm::Constant **)__src;
                      if ((*(_DWORD *)(*(_QWORD *)__src + 8) & 0xFE) == 0x12)
                        v560 = (llvm::Constant *)**((_QWORD **)v560 + 2);
                      v561 = llvm::Type::getPrimitiveSizeInBits(v560);
                      LODWORD(p_Add) = 64;
                      p_src = (llvm::Type *)v561;
                      v563 = sub_1C4D8A7F0((llvm::APInt *)&p_src, v557);
                      if (p_Add >= 0x41 && p_src)
                        MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
                      if (v563)
                      {
                        v564 = **v559;
                        v565 = *v564;
                        v566 = *(llvm::ValueHandleBase **)(*v564 + 1568);
                        if (!v566)
                        {
                          v651 = *(llvm::ConstantInt **)(v565 + 1888);
                          LODWORD(p_Add) = *(_DWORD *)(v565 + 1896) >> 8;
                          if (p_Add > 0x40)
                            llvm::APInt::initSlowCase((llvm::APInt *)&p_src, 0, 0);
                          else
                            p_src = 0;
                          v566 = llvm::ConstantInt::get(v651, (llvm::LLVMContext *)&p_src, v562);
                          if (p_Add >= 0x41 && p_src)
                            MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
                          *(_QWORD *)(v565 + 1568) = v566;
                        }
                        v567 = &v559[-4 * (*((_DWORD *)v559 + 5) & 0x7FFFFFF)];
                        v568 = (llvm::ValueHandleBase **)(v567 + 4);
                        if (v567[4])
                        {
                          *v567[6] = (uint64_t *)v567[5];
                          v569 = v567[5];
                          if (v569)
                            v569[2] = (uint64_t *)v567[6];
                        }
                        *v568 = v566;
                        if (v566)
                        {
                          v572 = (uint64_t **)*((_QWORD *)v566 + 1);
                          v571 = (llvm::ValueHandleBase ***)((char *)v566 + 8);
                          v570 = v572;
                          v567[5] = v572;
                          if (v572)
                            v570[2] = (uint64_t *)(v567 + 5);
                          v567[6] = (uint64_t **)v571;
                          *v571 = v568;
                        }
                        if (v558)
                        {
                          v145 = (uint64_t)a1;
                          v146 = a2;
                          v147 = v558;
                          return sub_1C577F888(v145, v146, v147);
                        }
                      }
                      else
                      {
                        v573 = v559[1];
                        if (v573)
                        {
                          if (!v573[1])
                          {
                            v616 = *((_QWORD *)v558 + 1);
                            if (v616)
                            {
                              if (!*(_QWORD *)(v616 + 8)
                                && (sub_1C4D89CC8((uint64_t)&p_src, (llvm::Constant *)v559[-4 * (*((_DWORD *)v559 + 5) & 0x7FFFFFF) + 4]) & 1) == 0)
                              {
                                v618 = **v559;
                                v619 = *v618;
                                v620 = *(llvm::ValueHandleBase **)(*v618 + 1560);
                                if (!v620)
                                {
                                  v679 = *(llvm::ConstantInt **)(v619 + 1888);
                                  v680 = *(_DWORD *)(v619 + 1896);
                                  LODWORD(p_Add) = v680 >> 8;
                                  if (v680 >> 8 > 0x40)
                                  {
                                    llvm::APInt::initSlowCase((llvm::APInt *)&p_src, 1, 0);
                                  }
                                  else
                                  {
                                    if (v680 <= 0xFF)
                                      LOBYTE(v681) = 0;
                                    else
                                      v681 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v680);
                                    p_src = (llvm::Type *)(v681 & 1);
                                  }
                                  v620 = llvm::ConstantInt::get(v679, (llvm::LLVMContext *)&p_src, v617);
                                  if (p_Add >= 0x41 && p_src)
                                    MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
                                  *(_QWORD *)(v619 + 1560) = v620;
                                }
                                v621 = &v559[-4 * (*((_DWORD *)v559 + 5) & 0x7FFFFFF)];
                                v622 = (llvm::ValueHandleBase **)(v621 + 4);
                                if (v621[4])
                                {
                                  *v621[6] = (uint64_t *)v621[5];
                                  v623 = v621[5];
                                  if (v623)
                                    v623[2] = (uint64_t *)v621[6];
                                }
                                *v622 = v620;
                                if (v620)
                                {
                                  v626 = (uint64_t **)*((_QWORD *)v620 + 1);
                                  v625 = (llvm::ValueHandleBase ***)((char *)v620 + 8);
                                  v624 = v626;
                                  v621[5] = v626;
                                  if (v626)
                                    v624[2] = (uint64_t *)(v621 + 5);
                                  v621[6] = (uint64_t **)v625;
                                  *v625 = v622;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v574 = *((_WORD *)a3 + 9) & 0x3F;
            v575 = v574 - 34;
            v576 = (uint64_t *)a1[3];
            if (*(unsigned __int8 *)(v148 + 16) > 0x14u)
            {
              v577 = (unsigned __int8 *)v751;
              v578 = (llvm::Constant *)v148;
            }
            else
            {
              isNullValue = llvm::Constant::isNullValue((llvm::Constant *)v148);
              if ((isNullValue & 1) != 0
                || (v577 = (unsigned __int8 *)v751,
                    v578 = (llvm::Constant *)v148,
                    (sub_1C4E71060((uint64_t)&p_src, (llvm::Constant *)v148) & 1) != 0))
              {
                LOBYTE(v574) = 37;
                v577 = (unsigned __int8 *)v148;
                v578 = v751;
                switch(v575)
                {
                  case 0:
                    goto LABEL_1024;
                  case 1:
                    LOBYTE(v574) = 36;
                    break;
                  case 2:
                    LOBYTE(v574) = 35;
                    break;
                  case 3:
                    LOBYTE(v574) = 34;
                    break;
                  default:
                    goto LABEL_1132;
                }
                v577 = (unsigned __int8 *)v148;
                v578 = v751;
              }
            }
LABEL_1024:
            if (!v577
              || v577[16] > 0x14u
              || (llvm::Constant::isNullValue((llvm::Constant *)v577) & 1) == 0
              && (sub_1C4E71060((uint64_t)&p_src, (llvm::Constant *)v577) & 1) == 0)
            {
              goto LABEL_1132;
            }
            if ((v574 & 0x3E) == 0x24)
              v580 = *v747;
            else
              v580 = *v110;
            if ((v574 & 0x3E) == 0x24)
              v581 = *v110;
            else
              v581 = *v747;
            NullValue = 0;
            v582 = *((unsigned __int8 *)v578 + 16);
            if (v582 == 5)
            {
              if (*((_WORD *)v578 + 9) != 15)
                goto LABEL_1042;
              v584 = (llvm::Type **)((char *)v578 - 32 * (*((_DWORD *)v578 + 5) & 0x7FFFFFF));
              if (v580 != *v584)
                goto LABEL_1042;
              v583 = v584[4];
            }
            else
            {
              if (v582 != 43 || v580 != *((llvm::Type **)v578 - 8))
                goto LABEL_1042;
              v583 = (llvm::Constant *)*((_QWORD *)v578 - 4);
            }
            if (v581 == v583)
              goto LABEL_1074;
LABEL_1042:
            v778 = (llvm::Constant *)&NullValue;
            *(_QWORD *)&v779 = 0;
            if ((sub_1C4D89F84((uint64_t)&v778, (unsigned __int8 *)v581) & 1) == 0)
              goto LABEL_1079;
            v585 = NullValue;
            v586 = *((_DWORD *)NullValue + 2);
            LODWORD(v760) = v586;
            if (v586 > 0x40)
            {
              v587 = operator new[]();
              __src = (void *)v587;
              v589 = *(const void **)v585;
              v588 = v760;
              memcpy((void *)v587, v589, (((unint64_t)v760 + 63) >> 3) & 0x3FFFFFF8);
              if (v588 > 0x40)
              {
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&__src);
                goto LABEL_1049;
              }
            }
            else
            {
              v587 = *(_QWORD *)NullValue;
              v588 = v586;
            }
            if (v588)
              v590 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v588;
            else
              v590 = 0;
            __src = (void *)(v590 & ~v587);
LABEL_1049:
            llvm::APInt::operator++((uint64_t)&__src);
            v591 = v760;
            v592 = __src;
            LODWORD(v760) = 0;
            p_src = v580;
            v593 = &p_src;
            LODWORD(__s1) = v591;
            if (v591 > 0x40)
            {
              p_Add = operator new[]();
              memcpy((void *)p_Add, v592, (((unint64_t)__s1 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              p_Add = (unint64_t)__src;
            }
            v594 = *((unsigned __int8 *)v578 + 16);
            if (v594 == 41)
            {
              v595 = p_src == *((llvm::Type **)v578 - 8)
                  && sub_1C4D8A7F0((llvm::APInt *)&p_Add, *((unsigned __int8 **)v578 - 4));
            }
            else
            {
              if (v594 == 5)
                LOBYTE(v593) = *((_WORD *)v578 + 9) == 13
                            && (v596 = (llvm::Type **)((char *)v578 - 32 * (*((_DWORD *)v578 + 5) & 0x7FFFFFF)),
                                p_src == *v596)
                            && sub_1C4D8A86C((llvm::APInt *)&p_Add, v596[4]);
              v595 = (v594 == 5) & v593;
            }
            if (__s1 >= 0x41 && p_Add)
              MEMORY[0x1CAA32F9C](p_Add, 0x1000C8000313F17);
            if (v591 >= 0x41 && v592)
              MEMORY[0x1CAA32F9C](v592, 0x1000C8000313F17);
            if (v760 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            if (v595)
            {
LABEL_1074:
              v597 = *((_QWORD *)v578 + 1);
              if (v597 && !*(_QWORD *)(v597 + 8) || (v598 = a3[1]) != 0 && !v598[1])
              {
                WORD4(v775) = 257;
                v599 = llvm::IRBuilderBase::CreateBinaryIntrinsic(v576, 311, (uint64_t *)v581, (uint64_t)v580, 0, (uint64_t)&p_src);
                WORD4(v775) = 257;
                v600 = (uint64_t)sub_1C5346748((uint64_t)v576, v599, (uint64_t)&p_src, 0, 0);
                goto LABEL_1131;
              }
LABEL_1132:
              v627 = a3[1];
              if (!v627 || v627[1])
                goto LABEL_1376;
              v628 = (uint64_t *)a1[3];
              v629 = (llvm::APInt *)*(a3 - 8);
              v630 = (unsigned __int8 *)*(a3 - 4);
              v631 = *((_WORD *)a3 + 9) & 0x3F;
              Add = 0;
              NullValue = 0;
              v771 = 0;
              if ((_DWORD)v631 == 36)
              {
                v632 = &Add;
                p_src = (llvm::Type *)&Add;
                p_Add = (unint64_t)&NullValue;
                __s1 = 0;
                v633 = *(unsigned __int8 *)(v148 + 16);
                if (v633 == 41)
                {
                  if (!*(_QWORD *)(v148 - 64))
                    goto LABEL_1168;
                  Add = *(llvm::APInt **)(v148 - 64);
                  if ((sub_1C4D89F84((uint64_t)&p_Add, *(unsigned __int8 **)(v148 - 32)) & 1) == 0)
                    goto LABEL_1168;
                  v634 = 1;
                }
                else
                {
                  if (v633 == 5)
                    LOBYTE(v632) = *(_WORD *)(v148 + 18) == 13
                                && (v635 = (llvm::APInt **)(v148 - 32 * (*(_DWORD *)(v148 + 20) & 0x7FFFFFF)), *v635)
                                && (Add = *v635, (sub_1C4D8A004((uint64_t)&p_Add, v635[4]) & 1) != 0);
                  v634 = (v633 == 5) & v632;
                }
                if (v634)
                {
                  if (Add == v629)
                  {
                    if (sub_1C4D9ED34((uint64_t)v768, v751))
                    {
                      v778 = (llvm::Constant *)&v771;
                      *(_QWORD *)&v779 = 0;
                      if (sub_1C4D89F84((uint64_t)&v778, v630))
                      {
                        v637 = v771;
                        v638 = (const void **)NullValue;
                        v639 = *((unsigned int *)NullValue + 2);
                        LODWORD(v760) = v639;
                        if (v639 > 0x40)
                        {
                          __src = (void *)operator new[]();
                          memcpy(__src, *v638, ((unint64_t)(v639 + 63) >> 3) & 0x3FFFFFF8);
                          llvm::APInt::flipAllBitsSlowCase((uint64_t)&__src);
                          LODWORD(v639) = (_DWORD)v760;
                          v642 = __src;
                        }
                        else
                        {
                          v640 = ~*(_QWORD *)NullValue;
                          if ((_DWORD)v639)
                            v641 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v639;
                          else
                            v641 = 0;
                          v642 = (void *)(v641 & v640);
                          __src = (void *)(v641 & v640);
                        }
                        LODWORD(v760) = 0;
                        v643 = *((unsigned int *)v637 + 2);
                        if (v643 > 0x40)
                          v644 = memcmp(*(const void **)v637, v642, ((unint64_t)(v643 + 63) >> 3) & 0x3FFFFFF8) == 0;
                        else
                          v644 = *(_QWORD *)v637 == (_QWORD)v642;
                        v645 = v644;
                        if (v639 >= 0x41 && v642)
                          MEMORY[0x1CAA32F9C](v642, 0x1000C8000313F17);
                        if (v645)
                        {
                          v646 = Add;
                          v647 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)Add, NullValue, v636);
                          WORD4(v775) = 257;
                          v648 = v628;
                          v649 = (uint64_t *)v646;
                          goto LABEL_1371;
                        }
                      }
                    }
                  }
                }
              }
LABEL_1168:
              if (sub_1C4D9ED34((uint64_t)&p_src, v751))
                __asm { BR              X9 }
              v650 = v631;
              if (!sub_1C4D9ED34((uint64_t)&p_src, (llvm::Constant *)v148))
                goto LABEL_1376;
              if ((v631 & 0x3E) == 0x22)
              {
                if ((_DWORD)v631 == 35)
                  v650 = 37;
                else
                  v650 = 36;
                v684 = (uint64_t)v630;
                v630 = (unsigned __int8 *)v629;
              }
              else
              {
                v684 = (uint64_t)v629;
                if ((v631 - 38) < 0xFFFFFFFE)
                  goto LABEL_1376;
              }
              p_src = (llvm::Type *)&Add;
              if ((sub_1C4D9EC28((_QWORD **)&p_src, 30, v684) & 1) == 0)
              {
                v689 = *((unsigned __int8 *)v751 + 16);
                goto LABEL_1277;
              }
              v649 = (uint64_t *)Add;
              v685 = *((unsigned __int8 *)v751 + 16);
              if (v685 == 5)
              {
                if (*((_WORD *)v751 + 9) != 13)
                {
                  v689 = 5;
                  goto LABEL_1277;
                }
                v688 = (llvm::APInt **)((char *)v751 - 32 * (*((_DWORD *)v751 + 5) & 0x7FFFFFF));
                v686 = *v688;
                v687 = v688[4];
                if (Add != v686 || !v687)
                {
                  v689 = 5;
                  if (!v686)
                    goto LABEL_1277;
                  goto LABEL_1276;
                }
              }
              else
              {
                if (v685 != 41)
                {
                  v689 = *((unsigned __int8 *)v751 + 16);
LABEL_1277:
                  v685 = v689;
                  goto LABEL_1278;
                }
                v686 = (llvm::APInt *)*((_QWORD *)v751 - 8);
                v687 = (llvm::APInt *)*((_QWORD *)v751 - 4);
                if (Add != v686 || !v687)
                {
                  v689 = 41;
                  if (!v686)
                    goto LABEL_1277;
LABEL_1276:
                  v15 = Add == v687;
                  v687 = v686;
                  if (!v15)
                    goto LABEL_1277;
                }
              }
              if (v687 == (llvm::APInt *)v630)
              {
                WORD4(v775) = 257;
                v648 = v628;
                v647 = (llvm::Value **)v630;
                goto LABEL_1371;
              }
LABEL_1278:
              Add = (llvm::APInt *)v684;
              p_src = (llvm::Type *)v684;
              __s1 = v630;
              if (v685 != 5)
              {
                if (v685 != 41)
                  goto LABEL_1351;
                v691 = (void **)((char *)v751 - 64);
                v690 = *((_QWORD *)v751 - 8);
                v692 = *(unsigned __int8 *)(v690 + 16);
                if (v692 == 5)
                {
                  if (*(_WORD *)(v690 + 18) == 30)
                  {
                    v697 = *(_DWORD *)(v690 + 20) & 0x7FFFFFF;
                    v698 = v690 - 32 * v697;
                    if (v684 == *(_QWORD *)v698)
                    {
                      if ((sub_1C4D9EED4((uint64_t)&p_Add, *(llvm::Constant **)(v698 + 32)) & 1) != 0)
                        goto LABEL_1312;
                      v700 = p_src;
                      v699 = -(uint64_t)(*(_DWORD *)(v690 + 20) & 0x7FFFFFF);
                    }
                    else
                    {
                      v699 = -v697;
                      v700 = (llvm::Type *)v684;
                    }
                    v705 = (llvm::Constant **)(v690 + 32 * v699);
                    if (v700 != v705[4] || !sub_1C4D9EED4((uint64_t)&p_Add, *v705))
                      goto LABEL_1313;
LABEL_1312:
                    if (__s1 == *((void **)v751 - 4))
                      goto LABEL_1365;
                  }
                }
                else if (v692 == 58)
                {
                  v693 = (llvm::Type *)v684;
                  if (v684 == *(_QWORD *)(v690 - 64))
                  {
                    if ((sub_1C4D9ED34((uint64_t)&p_Add, *(llvm::Constant **)(v690 - 32)) & 1) != 0)
                      goto LABEL_1312;
                    v693 = p_src;
                  }
                  if (v693 != *(llvm::Type **)(v690 - 32)
                    || (sub_1C4D9ED34((uint64_t)&p_Add, *(llvm::Constant **)(v690 - 64)) & 1) == 0)
                  {
                    goto LABEL_1313;
                  }
                  goto LABEL_1312;
                }
LABEL_1313:
                v706 = *((_QWORD *)v751 - 4);
                v707 = *(unsigned __int8 *)(v706 + 16);
                if (v707 != 5)
                {
                  if (v707 != 58)
                    goto LABEL_1351;
                  v708 = p_src;
                  if (p_src != *(llvm::Type **)(v706 - 64))
                  {
LABEL_1318:
                    if (v708 != *(llvm::Type **)(v706 - 32)
                      || (sub_1C4D9ED34((uint64_t)&p_Add, *(llvm::Constant **)(v706 - 64)) & 1) == 0)
                    {
                      goto LABEL_1351;
                    }
                    goto LABEL_1350;
                  }
                  if ((sub_1C4D9ED34((uint64_t)&p_Add, *(llvm::Constant **)(v706 - 32)) & 1) == 0)
                  {
                    v708 = p_src;
                    goto LABEL_1318;
                  }
                  goto LABEL_1350;
                }
                if (*(_WORD *)(v706 + 18) != 30)
                  goto LABEL_1351;
                v709 = *(_DWORD *)(v706 + 20) & 0x7FFFFFF;
                v710 = (llvm::Type **)(v706 - 32 * v709);
                v711 = p_src;
                if (p_src == *v710)
                {
                  if ((sub_1C4D9EED4((uint64_t)&p_Add, v710[4]) & 1) != 0)
                    goto LABEL_1350;
                  v711 = p_src;
                  v712 = -(uint64_t)(*(_DWORD *)(v706 + 20) & 0x7FFFFFF);
                }
                else
                {
                  v712 = -v709;
                }
                v713 = (llvm::Constant **)(v706 + 32 * v712);
                if (v711 == v713[4] && (sub_1C4D9EED4((uint64_t)&p_Add, *v713) & 1) != 0)
                {
LABEL_1350:
                  if (__s1 != *v691)
                    goto LABEL_1351;
LABEL_1365:
                  v649 = (uint64_t *)*((_QWORD *)v751 - 8);
                  v647 = (llvm::Value **)*((_QWORD *)v751 - 4);
                  WORD4(v775) = 257;
                  v648 = v628;
                  goto LABEL_1371;
                }
LABEL_1351:
                if (v650 != 36)
                  goto LABEL_1376;
                v723 = *(unsigned __int8 *)(v684 + 16);
                if (v723 == 5)
                {
                  if (*(_WORD *)(v684 + 18) != 13)
                    goto LABEL_1376;
                  v725 = (llvm::Value ***)(v684 - 32 * (*(_DWORD *)(v684 + 20) & 0x7FFFFFF));
                  v724 = *v725;
                  v647 = v725[4];
                }
                else
                {
                  if (v723 != 41)
                    goto LABEL_1376;
                  v724 = *(llvm::Value ***)(v684 - 64);
                  v647 = *(llvm::Value ***)(v684 - 32);
                }
                if (v630 != (unsigned __int8 *)v724 || !v647)
                {
                  if (!v724)
                    goto LABEL_1376;
                  v15 = v630 == (unsigned __int8 *)v647;
                  v647 = v724;
                  if (!v15)
                    goto LABEL_1376;
                }
                v726 = *((unsigned __int8 *)v751 + 16);
                if (v726 == 5)
                {
                  if (*((_WORD *)v751 + 9) == 13)
                  {
                    v729 = (unsigned __int8 **)((char *)v751 - 32 * (*((_DWORD *)v751 + 5) & 0x7FFFFFF));
                    v727 = *v729;
                    v728 = (llvm::Value **)v729[4];
                    goto LABEL_1368;
                  }
                }
                else if (v726 == 41)
                {
                  v727 = (unsigned __int8 *)*((_QWORD *)v751 - 8);
                  v728 = (llvm::Value **)*((_QWORD *)v751 - 4);
LABEL_1368:
                  if ((v630 != v727 || v647 != v728)
                    && (v630 != (unsigned __int8 *)v728 || v647 != (llvm::Value **)v727))
                  {
                    goto LABEL_1376;
                  }
                  WORD4(v775) = 257;
                  v648 = v628;
                  v649 = (uint64_t *)v630;
LABEL_1371:
                  v147 = (llvm::Value *)llvm::IRBuilderBase::CreateBinaryIntrinsic(v648, 300, v649, (uint64_t)v647, 0, (uint64_t)&p_src);
                  if (v147)
                    goto LABEL_1372;
                }
LABEL_1376:
                if (v748)
                  return (llvm::UndefValue **)a2;
                else
                  return 0;
              }
              if (*((_WORD *)v751 + 9) != 13)
                goto LABEL_1351;
              v694 = *((_QWORD *)v751 - 4 * (*((_DWORD *)v751 + 5) & 0x7FFFFFF));
              v695 = *(unsigned __int8 *)(v694 + 16);
              if (v695 != 5)
              {
                if (v695 != 58)
                  goto LABEL_1334;
                v696 = (llvm::Type *)v684;
                if (v684 != *(_QWORD *)(v694 - 64))
                {
LABEL_1294:
                  if (v696 != *(llvm::Type **)(v694 - 32)
                    || (sub_1C4D9ED34((uint64_t)&p_Add, *(llvm::Constant **)(v694 - 64)) & 1) == 0)
                  {
                    goto LABEL_1334;
                  }
                  goto LABEL_1333;
                }
                if ((sub_1C4D9ED34((uint64_t)&p_Add, *(llvm::Constant **)(v694 - 32)) & 1) == 0)
                {
                  v696 = p_src;
                  goto LABEL_1294;
                }
LABEL_1333:
                if (__s1 == ((void **)v751 - 4 * (*((_DWORD *)v751 + 5) & 0x7FFFFFF))[4])
                  goto LABEL_1365;
LABEL_1334:
                v715 = ((_QWORD *)v751 - 4 * (*((_DWORD *)v751 + 5) & 0x7FFFFFF))[4];
                v716 = *(unsigned __int8 *)(v715 + 16);
                if (v716 == 5)
                {
                  if (*(_WORD *)(v715 + 18) != 30)
                    goto LABEL_1351;
                  v718 = *(_DWORD *)(v715 + 20) & 0x7FFFFFF;
                  v719 = (llvm::Type **)(v715 - 32 * v718);
                  v720 = p_src;
                  if (p_src == *v719)
                  {
                    if ((sub_1C4D9EED4((uint64_t)&p_Add, v719[4]) & 1) != 0)
                      goto LABEL_1349;
                    v720 = p_src;
                    v721 = -(uint64_t)(*(_DWORD *)(v715 + 20) & 0x7FFFFFF);
                  }
                  else
                  {
                    v721 = -v718;
                  }
                  v722 = (llvm::Constant **)(v715 + 32 * v721);
                  if (v720 != v722[4] || !sub_1C4D9EED4((uint64_t)&p_Add, *v722))
                    goto LABEL_1351;
                }
                else
                {
                  if (v716 != 58)
                    goto LABEL_1351;
                  v717 = p_src;
                  if (p_src == *(llvm::Type **)(v715 - 64))
                  {
                    if ((sub_1C4D9ED34((uint64_t)&p_Add, *(llvm::Constant **)(v715 - 32)) & 1) != 0)
                      goto LABEL_1349;
                    v717 = p_src;
                  }
                  if (v717 != *(llvm::Type **)(v715 - 32)
                    || (sub_1C4D9ED34((uint64_t)&p_Add, *(llvm::Constant **)(v715 - 64)) & 1) == 0)
                  {
                    goto LABEL_1351;
                  }
                }
LABEL_1349:
                v691 = (void **)((char *)v751 - 32 * (*((_DWORD *)v751 + 5) & 0x7FFFFFF));
                goto LABEL_1350;
              }
              if (*(_WORD *)(v694 + 18) != 30)
                goto LABEL_1334;
              v701 = *(_DWORD *)(v694 + 20) & 0x7FFFFFF;
              v702 = v694 - 32 * v701;
              if (v684 == *(_QWORD *)v702)
              {
                if ((sub_1C4D9EED4((uint64_t)&p_Add, *(llvm::Constant **)(v702 + 32)) & 1) != 0)
                  goto LABEL_1333;
                v704 = p_src;
                v703 = -(uint64_t)(*(_DWORD *)(v694 + 20) & 0x7FFFFFF);
              }
              else
              {
                v703 = -v701;
                v704 = (llvm::Type *)v684;
              }
              v714 = (llvm::Constant **)(v694 + 32 * v703);
              if (v704 != v714[4] || !sub_1C4D9EED4((uint64_t)&p_Add, *v714))
                goto LABEL_1334;
              goto LABEL_1333;
            }
LABEL_1079:
            v601 = *((unsigned __int8 *)v578 + 16);
            if (v601 == 5)
            {
              if (*((_WORD *)v578 + 9) != 15)
                goto LABEL_1087;
              v603 = (llvm::Constant **)((char *)v578 - 32 * (*((_DWORD *)v578 + 5) & 0x7FFFFFF));
              if (v581 != *v603)
                goto LABEL_1087;
              v602 = v603[4];
            }
            else
            {
              if (v601 != 43 || v581 != *((llvm::Constant **)v578 - 8))
                goto LABEL_1087;
              v602 = (llvm::Type *)*((_QWORD *)v578 - 4);
            }
            if (v580 == v602)
              goto LABEL_1130;
LABEL_1087:
            v778 = (llvm::Constant *)&NullValue;
            *(_QWORD *)&v779 = 0;
            if (!sub_1C4D89F84((uint64_t)&v778, (unsigned __int8 *)v580))
              goto LABEL_1132;
            v604 = NullValue;
            v605 = *((_DWORD *)NullValue + 2);
            v770 = v605;
            if (v605 > 0x40)
            {
              v606 = operator new[]();
              Add = (llvm::APInt *)v606;
              v608 = *(const void **)v604;
              v607 = v770;
              memcpy((void *)v606, v608, (((unint64_t)v770 + 63) >> 3) & 0x3FFFFFF8);
              if (v607 > 0x40)
              {
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&Add);
                goto LABEL_1094;
              }
            }
            else
            {
              v606 = *(_QWORD *)NullValue;
              v607 = v605;
            }
            if (v607)
              v609 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v607;
            else
              v609 = 0;
            Add = (llvm::APInt *)(v609 & ~v606);
LABEL_1094:
            llvm::APInt::operator++((uint64_t)&Add);
            v610 = v770;
            v611 = Add;
            v770 = 0;
            p_src = v581;
            v612 = &p_src;
            LODWORD(__s1) = v610;
            if (v610 > 0x40)
            {
              p_Add = operator new[]();
              memcpy((void *)p_Add, v611, (((unint64_t)__s1 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              p_Add = (unint64_t)Add;
            }
            v613 = *((unsigned __int8 *)v578 + 16);
            if (v613 == 41)
            {
              v614 = p_src != *((llvm::Type **)v578 - 8)
                  || !sub_1C4D8A7F0((llvm::APInt *)&p_Add, *((unsigned __int8 **)v578 - 4));
            }
            else
            {
              if (v613 == 5)
                LOBYTE(v612) = *((_WORD *)v578 + 9) == 13
                            && (v615 = (llvm::Type **)((char *)v578 - 32 * (*((_DWORD *)v578 + 5) & 0x7FFFFFF)),
                                p_src == *v615)
                            && sub_1C4D8A86C((llvm::APInt *)&p_Add, v615[4]);
              v614 = (v613 != 5) | v612 ^ 1;
            }
            if (__s1 >= 0x41 && p_Add)
              MEMORY[0x1CAA32F9C](p_Add, 0x1000C8000313F17);
            if (v610 >= 0x41 && v611)
              MEMORY[0x1CAA32F9C](v611, 0x1000C8000313F17);
            if (v770 >= 0x41 && Add)
              MEMORY[0x1CAA32F9C](Add, 0x1000C8000313F17);
            if ((v614 & 1) != 0)
              goto LABEL_1132;
LABEL_1130:
            WORD4(v775) = 257;
            v600 = llvm::IRBuilderBase::CreateBinaryIntrinsic(v576, 311, (uint64_t *)v581, (uint64_t)v580, 0, (uint64_t)&p_src);
LABEL_1131:
            v147 = (llvm::Value *)v600;
            if (!v600)
              goto LABEL_1132;
LABEL_1372:
            v145 = (uint64_t)a1;
            v146 = a2;
            return sub_1C577F888(v145, v146, v147);
          }
          if (v528 == 18)
            v527 = (llvm::Constant *)**((_QWORD **)v527 + 2);
          LODWORD(v779) = llvm::Type::getPrimitiveSizeInBits(v527);
          if (v779 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v778, 0, 0);
            v537 = 1 << v744;
            if (v779 > 0x40)
            {
              *((_QWORD *)v778 + (v744 >> 6)) |= v537;
              goto LABEL_972;
            }
            v536 = v778;
          }
          else
          {
            v536 = 0;
            v537 = 1 << v744;
          }
          v778 = (llvm::Constant *)(v537 | (unint64_t)v536);
LABEL_972:
          v538 = __src;
          v539 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)__src, (llvm::Type *)&v778, v535);
          WORD4(v775) = 257;
          __src = (void *)sub_1C4D89BCC((uint64_t)v452, v538, (uint64_t)v539, (uint64_t)&p_src);
          if (v779 >= 0x41 && v778)
            MEMORY[0x1CAA32F9C](v778, 0x1000C8000313F17);
          goto LABEL_975;
        }
        v744 = v500;
        v507 = 0;
        v508 = 1;
        v509 = (llvm::Constant *)v148;
        goto LABEL_936;
      }
      goto LABEL_1210;
    }
    v416 = 1;
    v413 = v659;
    goto LABEL_744;
  }
  return v33;
}

llvm::Value *sub_1C583A138(uint64_t a1, llvm *this, uint64_t a3, const llvm::DataLayout *a4)
{
  int v4;
  llvm::Constant **v6;
  uint64_t *v7;
  unsigned __int16 isImpliedCondition;
  llvm::Type *v9;
  int v11;
  llvm::Value **NullValue;
  llvm::Type *v13;
  uint64_t *AllOnesValue;
  llvm *v15;
  uint64_t v16;
  _BYTE v17[32];
  __int16 v18;

  v4 = (int)a4;
  v6 = *(llvm::Constant ***)(a3 - 64);
  v7 = *(uint64_t **)(a3 - 32);
  isImpliedCondition = llvm::isImpliedCondition(this, *(const llvm::Value **)(a3 - 96), *(const llvm::Value **)(a1 + 80), a4, 0);
  if (isImpliedCondition < 0x100u)
    return 0;
  v11 = isImpliedCondition;
  NullValue = llvm::Constant::getNullValue(*v6, v9);
  AllOnesValue = (uint64_t *)llvm::Constant::getAllOnesValue(*v6, v13);
  if (v11)
  {
    if (!v4)
    {
      v18 = 257;
      v15 = this;
      v16 = (uint64_t)v6;
      return sub_1C4FC8748((uint64_t)v15, AllOnesValue, v16, (uint64_t)v17, 0, 0);
    }
    v18 = 257;
    v15 = this;
    AllOnesValue = (uint64_t *)v6;
  }
  else
  {
    if (!v4)
    {
      v18 = 257;
      v15 = this;
      v16 = (uint64_t)v7;
      return sub_1C4FC8748((uint64_t)v15, AllOnesValue, v16, (uint64_t)v17, 0, 0);
    }
    v18 = 257;
    v15 = this;
    AllOnesValue = v7;
  }
  v16 = (uint64_t)NullValue;
  return sub_1C4FC8748((uint64_t)v15, AllOnesValue, v16, (uint64_t)v17, 0, 0);
}

llvm::UndefValue **sub_1C583A228(uint64_t a1, llvm::Value *a2)
{
  llvm *v4;
  unsigned __int8 **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  llvm::ConstantInt *v10;
  _QWORD **v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t UnaryIntrinsic;
  uint64_t v16;
  uint64_t v17;
  llvm::ValueAsMetadata *v18;
  uint64_t v19;
  uint64_t BitOrPointerCast;
  int v21;
  BOOL v22;
  unsigned __int8 *v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  llvm::Type *v27;
  llvm::UndefValue *AggregateElement;
  llvm::Constant *v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  _DWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  llvm::ConstantInt *v36;
  int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t VectorSplat;
  int v45;
  int v46;
  int v47;
  llvm *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm **v65;
  llvm *v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  _DWORD *v71;
  llvm *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  char v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  __int16 v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  llvm::Constant *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  llvm::Constant *v119;
  uint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t ***v123;
  int v124;
  uint64_t v125;
  uint64_t **v126;
  llvm::Type *v127;
  const llvm::APInt *v128;
  llvm *v129;
  char *v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  int v140;
  int v141;
  uint64_t v142;
  _DWORD *v143;
  llvm *v144;
  uint64_t v145;
  uint64_t v146;
  llvm *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  llvm::ConstantInt *v152;
  uint64_t v153;
  uint64_t v154;
  llvm *v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  llvm::ConstantInt *v162;
  uint64_t v163;
  uint64_t v164;
  llvm *v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t *v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  int v176;
  int v177;
  llvm *v178;
  char *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  int8x8_t *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  llvm::Type *v189;
  int v190;
  llvm::Type *v191;
  llvm::Value **True;
  llvm::Type *v193;
  const llvm::APInt *v194;
  llvm::Value **False;
  llvm *v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  llvm *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  llvm *v206;
  int v207;
  int v208;
  uint64_t v209;
  llvm *v210;
  int v211;
  int v212;
  int v213;
  uint64_t v214;
  llvm::UndefValue *v215;
  llvm::Constant *v216;
  _DWORD *v217;
  _DWORD *v218;
  llvm::Value *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t ****v224;
  uint64_t ***v225;
  int v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t v231;
  llvm *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t FCmpHelper;
  uint64_t *v237;
  llvm::Value *v238;
  _QWORD *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  llvm::APInt *v243;
  uint64_t *v244;
  _QWORD *v245;
  uint64_t v246;
  std::string::size_type v247;
  const void **v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  const void *v252;
  uint64_t v253;
  std::string::size_type v254;
  const void **v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  llvm **v261;
  uint64_t v262;
  _QWORD *v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _DWORD *v268;
  uint64_t v269;
  int v270;
  uint64_t *v271;
  uint64_t v272;
  int v273;
  _QWORD *v274;
  uint64_t **v275;
  uint64_t **v276;
  uint64_t ***v277;
  char *v278;
  uint64_t **v279;
  uint64_t **v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  _DWORD *v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  int v288;
  unsigned int v289;
  llvm::Value **v290;
  llvm::Value *v291;
  llvm::Value **v292;
  int v293;
  BOOL v294;
  unsigned int v295;
  llvm::Value **v296;
  int8x8_t *v297;
  int8x8_t v298;
  uint64_t v299;
  int v300;
  uint64_t ****v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  _QWORD **v306;
  int v307;
  uint64_t v308;
  BOOL v309;
  char v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  uint64_t **v334;
  int v335;
  int v336;
  int v337;
  uint64_t **v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD **v347;
  uint64_t v348;
  unsigned int v349;
  uint64_t v350;
  unsigned int v351;
  uint64_t v352;
  BOOL v353;
  int v354;
  uint64_t **v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  unsigned int v359;
  unsigned __int8 *v361;
  int v362;
  uint64_t v363;
  int v364;
  llvm::Constant *v365;
  llvm::UndefValue *v366;
  int v367;
  llvm::Constant *v368;
  llvm::Type *v369;
  const llvm::APInt *v370;
  llvm::Value **v371;
  uint64_t v372;
  uint64_t *Cast;
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t *v378;
  llvm::Value *v379;
  unsigned int v380;
  uint64_t *v381;
  char v382;
  int matched;
  char v384;
  int v385;
  int v386;
  llvm::Type *v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t *v390;
  uint64_t *v391;
  uint64_t *v392;
  uint64_t v393;
  BOOL v394;
  char v395;
  int v396;
  int v397;
  char v398;
  unsigned int v399;
  unsigned int v400;
  _QWORD **v401;
  uint64_t *v402;
  uint64_t v403;
  __int16 v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  llvm::Value **v413;
  llvm::Value *v414;
  int v415;
  int v416;
  _QWORD **v417;
  BOOL v418;
  _BOOL4 v419;
  BOOL v420;
  _BOOL4 v421;
  llvm *v422;
  llvm::Constant *v423;
  llvm *v424;
  unsigned int v425;
  llvm *v426;
  llvm::Constant *v427;
  llvm *v428;
  uint64_t v429;
  uint64_t v430;
  llvm::ConstantInt *v431;
  unsigned int v432;
  _QWORD *v433;
  llvm::Value *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  int v439;
  uint64_t v440;
  int v441;
  unsigned int v442;
  llvm **v443;
  llvm *v444;
  llvm **v445;
  int v446;
  BOOL v447;
  unsigned int v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  int v452;
  uint64_t v453;
  int v454;
  unsigned int v455;
  llvm::Value **v456;
  llvm::Value *v457;
  llvm::Value **v458;
  int v459;
  BOOL v460;
  unsigned int v461;
  uint64_t v462;
  uint64_t *v463;
  llvm::Value **v464;
  llvm::Value *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unsigned int v469;
  uint64_t v470;
  uint64_t *v471;
  uint64_t *AllOnesValue;
  llvm::Value *v473;
  unsigned __int8 *v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  std::string::size_type v478;
  __int32 *v479;
  __int32 *v480;
  uint64_t v481;
  uint64_t *v482;
  std::string::size_type v483;
  __int32 *v484;
  __int32 *v485;
  uint64_t v486;
  llvm::APInt *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  llvm *v491;
  unsigned int v492;
  llvm::Value *v493;
  _QWORD **v494;
  _QWORD **v495;
  _QWORD **v496;
  __int128 v497;
  uint64_t *v498;
  uint64_t v499;
  uint64_t v500;
  int v501;
  int64_t v502;
  unint64_t v503;
  int v504;
  int v505;
  unsigned int v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t *v509;
  uint64_t **v510;
  int v511;
  int v512;
  char v513;
  int v514;
  char v515;
  uint64_t *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  llvm::Value **v521;
  llvm::Value *v522;
  int v523;
  int v524;
  __int16 v525;
  uint64_t *v526;
  int v527;
  int v528;
  int64_t v529;
  unint64_t v530;
  int v531;
  _QWORD *v532;
  unsigned int v533;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t *v539;
  _QWORD **v540;
  _QWORD *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  _QWORD *v545;
  unsigned int v546;
  uint64_t v547;
  unsigned __int8 *v548;
  uint64_t *v549;
  char v550;
  unsigned int v551;
  unsigned int v552;
  uint64_t v553;
  uint64_t v554;
  _QWORD *v555;
  char *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  _DWORD *v560;
  uint64_t *v561;
  uint64_t *v562;
  unsigned int v563;
  llvm::Value *v564;
  char *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t *v574;
  llvm::Value *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t **v578;
  uint64_t v579;
  int v580;
  int v581;
  std::string::size_type v582;
  uint64_t v583;
  BOOL v584;
  int v585;
  int v586;
  uint64_t *NullValue;
  const llvm::APInt *v588;
  llvm::Value **v589;
  llvm::Value *v590;
  char *v591;
  _QWORD *v592;
  uint64_t v593;
  _QWORD *v594;
  uint64_t v595;
  uint64_t v596;
  BOOL v597;
  int v598;
  llvm::Value **v599;
  const llvm::APInt *v600;
  uint64_t *v601;
  uint64_t v602;
  _QWORD *v603;
  uint64_t v604;
  uint64_t v605;
  _QWORD *v606;
  uint64_t v607;
  uint64_t v608;
  unsigned int v609;
  llvm::Value **BinOpIdentity;
  char isCommutative;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  llvm::ValueSymbolTable *v616;
  uint64_t v617;
  uint64_t v618;
  unsigned __int8 *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  llvm::Value **v627;
  llvm::Value *v628;
  int v629;
  int v630;
  llvm::Value *v631;
  char *v632;
  uint64_t v633;
  uint64_t v634;
  llvm::Value *v635;
  llvm::Constant **v636;
  llvm *v637;
  int v638;
  uint64_t v639;
  llvm **v640;
  uint64_t v641;
  uint64_t *v642;
  uint64_t *v643;
  uint64_t *v644;
  llvm::APInt *v645;
  int v646;
  llvm::APInt *v647;
  int v648;
  unsigned int v649;
  llvm::ConstantInt *v650;
  uint64_t *v651;
  uint64_t Declaration;
  uint64_t v653;
  uint64_t **v654;
  llvm::Value *v655;
  char *v656;
  uint64_t v657;
  uint64_t v658;
  llvm::Value *v659;
  unsigned int v660;
  int v661;
  _QWORD **v662;
  _QWORD **v663;
  _QWORD *v664;
  char *v665;
  char *v666;
  _QWORD *v667;
  uint64_t v668;
  _QWORD *v669;
  uint64_t v670;
  uint64_t v671;
  _QWORD *v672;
  uint64_t v673;
  _QWORD *v674;
  char *v675;
  _QWORD *v676;
  uint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  uint64_t v680;
  _QWORD *v681;
  uint64_t v682;
  llvm::Constant **v683;
  int v684;
  int v685;
  int v686;
  uint64_t *v687;
  unsigned __int8 *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  _QWORD *v695;
  int v696;
  int v697;
  int v698;
  uint64_t *v699;
  unsigned __int8 *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  llvm *v705;
  uint64_t v706;
  uint64_t v707;
  llvm *v708;
  uint64_t v709;
  uint64_t *v710;
  unsigned __int8 **v711;
  uint64_t v712;
  uint64_t v713;
  char *v714;
  _QWORD *v715;
  uint64_t v716;
  _QWORD *v717;
  uint64_t v718;
  int v719;
  _QWORD *v720;
  uint64_t v721;
  int v722;
  uint64_t v723;
  int v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t *v728;
  unsigned __int8 **v729;
  uint64_t v730;
  uint64_t v731;
  _QWORD *v732;
  uint64_t v733;
  uint64_t v734;
  _QWORD *v735;
  uint64_t v736;
  llvm::Use **v737;
  uint64_t v738;
  llvm::Value *v739;
  unsigned __int8 *v740;
  _DWORD *v741;
  llvm::Value *v742;
  uint64_t ***v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t ****v748;
  uint64_t ***v749;
  int v750;
  int v751;
  unsigned __int8 *v752;
  uint64_t *v753;
  llvm::Type *v754;
  unsigned int PrimitiveSizeInBits;
  uint8x8_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t *v759;
  uint64_t v760;
  unsigned __int8 *v761;
  unsigned __int8 *v762;
  llvm::ConstantInt *v763;
  llvm::APInt *v764;
  uint64_t v765;
  char v766;
  int v767;
  _BOOL4 v769;
  uint64_t v770;
  _QWORD *v771;
  uint64_t *v772;
  uint64_t *v773;
  uint64_t *v774;
  unint64_t v775;
  uint64_t v776;
  void *v777;
  uint64_t v778;
  uint64_t *v779;
  uint64_t v780;
  char v781;
  int v782;
  _BOOL4 v784;
  uint64_t v785;
  _QWORD *v786;
  uint64_t *v787;
  uint64_t *v788;
  uint64_t *v789;
  unint64_t v790;
  uint64_t v791;
  void *v792;
  std::string::size_type v793;
  int v794;
  uint64_t v795;
  uint64_t v796;
  llvm::APInt *v797;
  void *v798;
  llvm::APInt *v799;
  std::string::size_type v800;
  uint64_t *v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t **v804;
  uint64_t v805;
  int8x8_t v806;
  unsigned int v807;
  _QWORD *v808;
  uint64_t v809;
  unsigned int v810;
  _QWORD *v811;
  int v812;
  BOOL v813;
  char v814;
  _QWORD *v815;
  int8x8_t *v816;
  int8x8_t v817;
  unsigned int v818;
  int v819;
  uint64_t v820;
  int8x8_t **v821;
  int8x8_t **v822;
  BOOL v823;
  int8x8_t v824;
  int v825;
  _BYTE *v826;
  int v827;
  unsigned int v828;
  _QWORD *v829;
  uint64_t v830;
  _QWORD *v831;
  int v832;
  BOOL v833;
  unsigned int v834;
  _QWORD *v835;
  int8x8_t *v836;
  int8x8_t v837;
  uint64_t v838;
  const llvm::BasicBlock **v839;
  uint64_t v840;
  uint64_t v841;
  const llvm::BasicBlock *v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  const llvm::BasicBlock **v846;
  const llvm::BasicBlock *v847;
  int v848;
  int v849;
  const llvm::BasicBlock **v850;
  const llvm::BasicBlock *v851;
  int8x8_t v852;
  _QWORD *v853;
  llvm::APInt **v854;
  int v855;
  llvm::APInt **v856;
  llvm::APInt **v858;
  uint64_t v859;
  int v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  llvm::APInt *v866;
  llvm::APInt *v867;
  llvm::Value **v868;
  llvm::Value **v869;
  uint64_t v870;
  uint64_t v871;
  unsigned int v872;
  BOOL v873;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  unsigned __int8 *v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unsigned int v882;
  BOOL v883;
  uint64_t v885;
  unsigned int v886;
  int8x8_t *v887;
  int8x8_t v888;
  int8x8_t *v889;
  int v890;
  BOOL v891;
  unsigned int v892;
  int8x8_t *v893;
  unsigned int v894;
  BOOL v895;
  const llvm::BasicBlock *v897;
  uint64_t v899;
  int v900;
  std::string::size_type v901;
  unsigned int v902;
  int8x8_t *v903;
  int8x8_t v904;
  int8x8_t *v905;
  int v906;
  BOOL v907;
  unsigned int v908;
  BOOL v909;
  uint64_t v910;
  uint64_t v911;
  unsigned int v912;
  int8x8_t v913;
  int v914;
  BOOL v915;
  unsigned int v916;
  int8x8_t *v917;
  int v918;
  unsigned int v919;
  int8x8_t *v920;
  int8x8_t v921;
  int8x8_t *v922;
  int v923;
  BOOL v924;
  unsigned int v925;
  int8x8_t *v926;
  unsigned __int8 *v927;
  BOOL v928;
  uint64_t v929;
  uint64_t v930;
  const llvm::Instruction *v931;
  unsigned int v932;
  BOOL v933;
  uint64_t *v935;
  unsigned int v936;
  int v937;
  uint64_t v938;
  unsigned int v939;
  uint64_t v940;
  uint64_t *v941;
  unsigned int v942;
  unsigned int v944;
  uint64_t v945;
  uint64_t v946;
  llvm::APInt *v947;
  llvm::APInt *v948;
  _QWORD *v949;
  std::string::size_type v950;
  _QWORD *v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  const llvm::DataLayout *v956;
  llvm::DSOLocalEquivalent **v957;
  uint64_t v959;
  uint64_t *v960;
  _QWORD *v961;
  uint64_t v962;
  uint64_t v963;
  __int128 v964;
  unsigned __int8 *v965;
  llvm::Constant *v966;
  char *v967;
  llvm **v968;
  _QWORD *v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  int v973;
  uint64_t *v974;
  int v975;
  int v976;
  uint64_t v977;
  int v978;
  unsigned int v979;
  llvm *v980;
  int v981;
  BOOL v982;
  unsigned int v983;
  int v984;
  int v985;
  uint64_t v986;
  int v987;
  unsigned int v988;
  llvm::Value *v989;
  int v990;
  BOOL v991;
  unsigned int v992;
  llvm **v993;
  _QWORD *v994;
  uint64_t v995;
  uint64_t v996;
  llvm *v997;
  llvm::Value **v998;
  _QWORD *v999;
  uint64_t *v1000;
  uint64_t *v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  llvm::Value **v1007;
  llvm::Value *v1008;
  int v1009;
  int v1010;
  uint64_t *v1011;
  uint64_t *v1012;
  uint64_t v1013;
  _QWORD *v1014;
  llvm::Value *v1015;
  char *v1016;
  llvm::APInt *v1017;
  void *v1018;
  std::string::size_type size;
  _BYTE **v1020;
  llvm::Value *v1021;
  uint64_t ***v1022;
  char *v1023;
  uint64_t **v1024;
  uint64_t **v1025;
  unsigned __int16 isImpliedCondition;
  unsigned __int16 v1027;
  unsigned __int16 v1028;
  unsigned __int16 v1029;
  llvm::APInt *v1030;
  std::string::size_type v1031;
  int v1032;
  uint64_t *v1033;
  uint64_t v1034;
  llvm::Value *v1035;
  char *v1036;
  llvm::APInt *v1037;
  int v1038;
  llvm::detail::DoubleAPFloat *v1039;
  int v1040;
  llvm::detail::DoubleAPFloat *v1041;
  int v1042;
  llvm::Value *v1043;
  char *v1044;
  uint64_t v1045;
  uint64_t v1046;
  int v1047;
  uint64_t v1048;
  uint64_t *v1049;
  uint64_t *v1050;
  uint64_t v1051;
  int v1052;
  _QWORD *v1053;
  uint64_t v1054;
  uint64_t *v1055;
  uint64_t v1056;
  char *v1057;
  uint64_t v1058;
  char *v1059;
  std::string *p_data;
  uint64_t ***v1061;
  uint64_t **v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t **v1065;
  llvm::Value *Select;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t *v1069;
  uint64_t v1070;
  llvm::Constant **v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t *v1074;
  uint64_t *v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t *v1078;
  uint64_t v1079;
  uint64_t **v1080;
  uint64_t *v1081;
  llvm::Value *v1082;
  uint64_t v1083;
  int v1084;
  uint64_t *v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t *v1089;
  uint64_t v1090;
  uint64_t *v1091;
  uint64_t v1092;
  llvm::CastInst *v1093;
  llvm::Value *v1094;
  llvm::Instruction *v1095;
  uint64_t v1096;
  char *v1097;
  uint64_t *v1098;
  llvm::Value *v1099;
  uint64_t v1100;
  uint64_t **v1101;
  uint64_t v1102;
  _QWORD *v1103;
  uint64_t v1104;
  char *v1105;
  std::string::size_type v1106;
  llvm::APInt *v1107;
  int v1108;
  uint64_t v1109;
  llvm::APInt **v1110;
  uint64_t v1111;
  llvm::APInt *v1112;
  char v1113;
  unsigned __int8 *v1114;
  uint64_t *v1115;
  uint64_t v1116;
  uint64_t *v1117;
  llvm::Value *v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  char *v1122;
  uint64_t v1123;
  char *v1124;
  uint64_t v1125;
  uint64_t *v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  llvm::Value **v1131;
  llvm::Value *v1132;
  int v1133;
  int v1134;
  llvm::Value *v1135;
  char *v1136;
  uint64_t v1137;
  uint64_t v1138;
  llvm::Value *v1139;
  BOOL v1140;
  uint64_t *v1141;
  int8x8_t v1142;
  int v1143;
  uint64_t v1144;
  llvm::GetElementPtrInst *v1145;
  char *v1146;
  uint64_t v1147;
  unsigned int v1148;
  uint64_t v1149;
  uint64_t v1150;
  _QWORD *v1151;
  uint64_t v1152;
  char *v1153;
  _QWORD *v1154;
  uint64_t v1155;
  _QWORD *v1156;
  uint64_t v1157;
  uint64_t v1158;
  _QWORD *v1159;
  uint64_t v1160;
  llvm::Constant **v1161;
  size_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  char *v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  char v1170;
  llvm::APInt *v1171;
  std::string::size_type v1172;
  uint64_t v1173;
  uint64_t v1174;
  int v1175;
  _QWORD *v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t *v1179;
  uint64_t **v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  char *v1184;
  int v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  char *v1189;
  int v1190;
  BOOL v1191;
  unsigned int v1192;
  unsigned int v1193;
  uint64_t v1194;
  uint64_t v1195;
  int v1196;
  uint64_t v1197;
  __int16 v1198;
  char v1199;
  int v1200;
  int v1201;
  uint64_t *v1202;
  uint64_t v1203;
  uint64_t v1204;
  unsigned __int8 *v1205;
  uint64_t **v1206;
  char *v1207;
  uint64_t v1208;
  char *v1209;
  uint64_t v1210;
  llvm::Value *v1211;
  llvm::Value *v1212;
  uint64_t v1213;
  llvm ***v1214;
  int v1215;
  int v1216;
  uint64_t **v1217;
  _OWORD *v1218;
  llvm::Value *v1219;
  llvm::ConstantInt *v1220;
  llvm *v1221;
  int8x8_t *v1222;
  uint64_t *v1223;
  uint64_t *v1224;
  unsigned int v1225;
  llvm *v1226;
  unsigned __int8 *v1227;
  char v1228;
  uint64_t *v1229;
  int v1230;
  int v1231[2];
  uint64_t *v1232;
  int v1233;
  std::string __dst;
  llvm::APInt *v1235[2];
  uint64_t *v1236;
  llvm::APInt *v1237;
  uint64_t v1238;
  _BYTE v1239[48];
  uint64_t p_dst;
  _QWORD v1241[11];
  _QWORD *v1242;
  __int128 v1243;
  int v1244;
  char v1245;
  std::string v1246;
  int v1247;
  char v1248;
  __int128 v1249;
  llvm::Value *v1250;
  int8x8_t data;
  __int128 v1252;
  uint64_t v1253;
  llvm *v1254;
  uint64_t v1255;
  llvm::APInt **v1256;
  uint64_t **v1257;
  uint64_t v1258;

  v1258 = *MEMORY[0x1E0C80C00];
  v5 = (unsigned __int8 **)((char *)a2 - 96);
  v4 = (llvm *)*((_QWORD *)a2 - 12);
  v1226 = v4;
  v6 = (uint64_t *)((char *)a2 - 64);
  v7 = *((_QWORD *)a2 - 8);
  v8 = (uint64_t *)((char *)a2 - 32);
  v9 = *((_QWORD *)a2 - 4);
  v10 = *(llvm::ConstantInt **)a2;
  if ((sub_1C4E7B480(v7) & 1) != 0)
  {
    v11 = (_QWORD **)*((_QWORD *)a2 + 1);
    if (v11)
      goto LABEL_3;
  }
  else
  {
    v21 = sub_1C4E7B480(v9);
    v11 = (_QWORD **)*((_QWORD *)a2 + 1);
    if (v21)
      v22 = v11 == 0;
    else
      v22 = 1;
    if (!v22)
    {
LABEL_3:
      do
      {
        v12 = v11[3];
        if (v12)
        {
          if (*((_BYTE *)v12 + 16) == 81 && (*((_WORD *)v12 + 9) & 0x3E) == 0x20)
            return 0;
        }
        v11 = (_QWORD **)v11[1];
      }
      while (v11);
    }
  }
  v13 = *(_OWORD *)(a1 + 120);
  v14 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)v1239 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&v1239[16] = v14;
  *(_QWORD *)&v1239[40] = *((_QWORD *)&v13 + 1);
  *(_QWORD *)&v1239[32] = a2;
  UnaryIntrinsic = (uint64_t)sub_1C4E6A420((uint64_t)v4, v7, v9, (uint64_t)v1239, 3);
  if (UnaryIntrinsic)
  {
LABEL_8:
    v16 = UnaryIntrinsic;
    goto LABEL_9;
  }
  v1223 = v8;
  v1224 = v6;
  v23 = *v5;
  v24 = *(_QWORD *)*v5;
  if (v24)
    v25 = *(_BYTE *)(v24 + 8) == 18;
  else
    v25 = 0;
  v1222 = (int8x8_t *)v5;
  v1220 = v10;
  if (v25 && v23[16] <= 0x14u)
  {
    v26 = *(unsigned int *)(v24 + 32);
    *(_QWORD *)v1239 = &v1239[16];
    *(_QWORD *)&v1239[8] = 0x1000000000;
    if (v26 < 0x11)
    {
      if (!(_DWORD)v26)
      {
LABEL_36:
        v33 = operator new(0xA8uLL);
        v33[21] = v33[21] & 0x38000000 | 2;
        BitOrPointerCast = (uint64_t)(v33 + 16);
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
        *((_QWORD *)v33 + 2) = 0;
        *((_QWORD *)v33 + 3) = v33 + 16;
        *((_QWORD *)v33 + 4) = 0;
        *((_QWORD *)v33 + 5) = 0;
        *((_QWORD *)v33 + 6) = 0;
        *((_QWORD *)v33 + 7) = v33 + 16;
        v34 = (_QWORD *)*v1224;
        v35 = *v1223;
        LOWORD(v1254) = 257;
        llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v33 + 8, v34, v35, *(void **)v1239, *(unsigned int *)&v1239[8], (uint64_t)&data, 0);
LABEL_38:
        v5 = (unsigned __int8 **)v1222;
        v10 = v1220;
        if (*(_BYTE **)v1239 != &v1239[16])
          free(*(void **)v1239);
        if (BitOrPointerCast)
          return (llvm::UndefValue **)BitOrPointerCast;
        goto LABEL_41;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1239, (uint64_t)&v1239[16], v26, 4);
    }
    v27 = 0;
    while (1)
    {
      AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v23, v27);
      if (!AggregateElement)
        break;
      v29 = AggregateElement;
      if (llvm::Constant::isOneValue(AggregateElement))
      {
        v30 = *(unsigned int *)&v1239[8];
        v31 = *(unsigned int *)&v1239[12];
        v32 = (int)v27;
      }
      else
      {
        if (!llvm::Constant::isNullValue(v29))
          break;
        v32 = (_DWORD)v27 + v26;
        v30 = *(unsigned int *)&v1239[8];
        v31 = *(unsigned int *)&v1239[12];
      }
      if (v30 >= v31)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1239, (uint64_t)&v1239[16], v30 + 1, 4);
        v30 = *(unsigned int *)&v1239[8];
      }
      *(_DWORD *)(*(_QWORD *)v1239 + 4 * v30) = v32;
      ++*(_DWORD *)&v1239[8];
      v27 = (llvm::Type *)((_DWORD)v27 + 1);
      if ((_DWORD)v26 == (_DWORD)v27)
        goto LABEL_36;
    }
    BitOrPointerCast = 0;
    goto LABEL_38;
  }
LABEL_41:
  v36 = *(llvm::ConstantInt **)a2;
  if (*(_QWORD *)a2)
  {
    v37 = *((_DWORD *)v36 + 2);
    if ((v37 & 0xFE) == 0x12)
    {
      v38 = *v5;
      v39 = *((_QWORD *)*v5 + 1);
      if (v39)
      {
        if (!*(_QWORD *)(v39 + 8) && v38[16] == 89)
        {
          v40 = *((_DWORD *)v38 + 5);
          v41 = (v40 & 0x40000000) != 0 ? (unsigned __int8 *)*((_QWORD *)v38 - 1) : &v38[-32 * (v40 & 0x7FFFFFF)];
          if (*(_BYTE *)(*((_QWORD *)v41 + 4) + 16) == 16)
          {
            v42 = *(_QWORD *)(a1 + 24);
            v43 = *((unsigned int *)v36 + 8);
            *(_WORD *)&v1239[32] = 257;
            VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(v42, (llvm::Type *)(v43 | ((unint64_t)(v37 == 19) << 32)), (uint64_t ***)v38, (uint64_t)v1239);
            BitOrPointerCast = sub_1C577E2C8(a1, (uint64_t)a2, 0, VectorSplat);
            if (BitOrPointerCast)
              return (llvm::UndefValue **)BitOrPointerCast;
          }
        }
      }
    }
  }
  v1225 = 0;
  v45 = *((_DWORD *)v10 + 2);
  v46 = v45;
  if ((v45 & 0xFE) == 0x12)
    v46 = *(_DWORD *)(**((_QWORD **)v10 + 2) + 8);
  v1219 = (llvm::Value *)v9;
  v1221 = (llvm *)v7;
  if (v46 == 269 && *((unsigned __int8 *)v1226 + 16) >= 0x15u && *(_QWORD *)v7 == *(_QWORD *)v1226)
  {
    if (sub_1C4D89CC8((uint64_t)v1239, (llvm::Constant *)v7))
    {
      v129 = v1226;
      if (sub_1C4F8BD90(v9, (uint64_t)v1226, 0))
      {
        *(_WORD *)&v1239[32] = 257;
        v130 = (char *)operator new(0x80uLL);
        *((_QWORD *)v130 + 5) = 0;
        v131 = v130 + 40;
        *((_QWORD *)v130 + 6) = 0;
        *((_QWORD *)v130 + 8) = *(_QWORD *)v129;
        BitOrPointerCast = (uint64_t)(v130 + 64);
        *((_QWORD *)v130 + 3) = v130 + 64;
        *((_QWORD *)v130 + 7) = v130 + 64;
        *((_QWORD *)v130 + 9) = 0;
        v130[80] = 57;
        v130[81] = 0;
        *((_WORD *)v130 + 41) = 0;
        *((_DWORD *)v130 + 21) = 2;
        *(_OWORD *)(v130 + 88) = 0u;
        *(_OWORD *)(v130 + 104) = 0u;
        *((_DWORD *)v130 + 30) = 0;
        *(_QWORD *)v130 = v129;
        v134 = *((_QWORD *)v129 + 1);
        v133 = (_QWORD *)((char *)v129 + 8);
        v132 = v134;
        *((_QWORD *)v130 + 1) = v134;
        if (v134)
          *(_QWORD *)(v132 + 16) = v130 + 8;
        *((_QWORD *)v130 + 2) = v133;
        *v133 = v130;
        *((_QWORD *)v130 + 4) = v9;
        if (v9)
        {
          v137 = *(_QWORD *)(v9 + 8);
          v136 = (_QWORD *)(v9 + 8);
          v135 = v137;
          *v131 = v137;
          if (v137)
            *(_QWORD *)(v135 + 16) = v131;
          *((_QWORD *)v130 + 6) = v136;
          *v136 = v130 + 32;
        }
        goto LABEL_328;
      }
      if (v1226)
      {
        if (*((_BYTE *)v1226 + 16) == 82 && *(_BYTE *)(v9 + 16) == 82)
        {
          if (v9)
          {
            UnaryIntrinsic = sub_1C57A7EF8(a1, (uint64_t)v1226, v9, 0, 1);
            if (UnaryIntrinsic)
              goto LABEL_8;
          }
        }
      }
    }
    if (v9
      && *(unsigned __int8 *)(v9 + 16) <= 0x14u
      && ((llvm::Constant::isNullValue((llvm::Constant *)v9) & 1) != 0
       || (sub_1C4E71060((uint64_t)v1239, (llvm::Constant *)v9) & 1) != 0))
    {
      v178 = v1226;
      if (sub_1C4F8BD90(v7, (uint64_t)v1226, 0))
      {
        *(_WORD *)&v1239[32] = 257;
        v179 = (char *)operator new(0x80uLL);
        *((_QWORD *)v179 + 6) = 0;
        *((_QWORD *)v179 + 8) = *(_QWORD *)v178;
        BitOrPointerCast = (uint64_t)(v179 + 64);
        *((_QWORD *)v179 + 3) = v179 + 64;
        *((_QWORD *)v179 + 7) = v179 + 64;
        *((_QWORD *)v179 + 9) = 0;
        v179[80] = 56;
        v179[81] = 0;
        *((_WORD *)v179 + 41) = 0;
        *((_DWORD *)v179 + 21) = 2;
        *(_OWORD *)(v179 + 88) = 0u;
        *(_OWORD *)(v179 + 104) = 0u;
        *((_DWORD *)v179 + 30) = 0;
        *(_QWORD *)v179 = v178;
        v182 = *((_QWORD *)v178 + 1);
        v181 = (_QWORD *)((char *)v178 + 8);
        v180 = v182;
        *((_QWORD *)v179 + 1) = v182;
        if (v182)
          *(_QWORD *)(v180 + 16) = v179 + 8;
        *((_QWORD *)v179 + 2) = v181;
        *v181 = v179;
        v183 = (_QWORD *)(v7 + 8);
        v184 = *(_QWORD *)(v7 + 8);
        *((_QWORD *)v179 + 5) = v184;
        *((_QWORD *)v179 + 4) = v7;
        if (v184)
          *(_QWORD *)(v184 + 16) = v179 + 40;
        *((_QWORD *)v179 + 6) = v183;
        *v183 = v179 + 32;
        goto LABEL_328;
      }
      if (v1226)
      {
        if (*((_BYTE *)v1226 + 16) == 82 && *(_BYTE *)(v7 + 16) == 82)
        {
          UnaryIntrinsic = sub_1C57A7EF8(a1, (uint64_t)v1226, v7, 1, 1);
          if (UnaryIntrinsic)
            goto LABEL_8;
        }
      }
    }
    True = llvm::ConstantInt::getTrue((uint64_t **)v1220, v127, v128);
    False = llvm::ConstantInt::getFalse((uint64_t **)v1220, v193, v194);
    if (False == (llvm::Value **)v7)
    {
      v199 = *(_QWORD *)(a1 + 24);
      v200 = v1226;
      if ((*((_BYTE *)v1226 + 23) & 0x10) != 0)
      {
        v201 = ***(_QWORD ***)v1226;
        v202 = *(_QWORD *)(v201 + 152);
        v203 = *(unsigned int *)(v201 + 168);
        if ((_DWORD)v203)
        {
          LODWORD(v204) = (v203 - 1) & ((v1226 >> 4) ^ (v1226 >> 9));
          v205 = v202 + 16 * v204;
          v206 = *(llvm **)v205;
          if (*(llvm **)v205 != v1226)
          {
            v207 = 1;
            do
            {
              if (v206 == (llvm *)-4096)
                goto LABEL_414;
              v208 = v204 + v207++;
              v204 = v208 & (v203 - 1);
              v206 = *(llvm **)(v202 + 16 * v204);
            }
            while (v206 != v1226);
LABEL_388:
            v205 = v202 + 16 * v204;
          }
          goto LABEL_415;
        }
        goto LABEL_414;
      }
    }
    else
    {
      if (True != (llvm::Value **)v9)
      {
        v196 = v1226;
        if (v1226 == (llvm *)v7)
        {
          v228 = a1;
          v229 = (uint64_t)a2;
          v230 = 1;
          v231 = (uint64_t)True;
        }
        else
        {
          v197 = (uint64_t)False;
          if (v1226 != (llvm *)v9)
          {
            *(_QWORD *)v1239 = v1226;
            v198 = *(unsigned __int8 *)(v7 + 16);
            if (v198 == 5)
            {
              if (*(_WORD *)(v7 + 18) != 30)
                goto LABEL_1138;
              v260 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
              v261 = (llvm **)(v7 - 32 * v260);
              if (v1226 == *v261)
              {
                if ((sub_1C4D9EED4((uint64_t)&v1239[8], v261[4]) & 1) != 0)
                  goto LABEL_1137;
                v196 = *(llvm **)v1239;
                v262 = -(uint64_t)(*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
              }
              else
              {
                v262 = -v260;
              }
              v636 = (llvm::Constant **)(v7 + 32 * v262);
              if (v196 != v636[4] || !sub_1C4D9EED4((uint64_t)&v1239[8], *v636))
              {
LABEL_1138:
                v637 = v1226;
                *(_QWORD *)v1239 = v1226;
                v638 = *(unsigned __int8 *)(v9 + 16);
                if (v638 != 5)
                {
                  if (v638 != 58)
                    goto LABEL_1207;
                  if (v1226 != *(llvm **)(v9 - 64))
                  {
LABEL_1143:
                    if (v637 != *(llvm **)(v9 - 32)
                      || (sub_1C4D9ED34((uint64_t)&v1239[8], *(llvm::Constant **)(v9 - 64)) & 1) == 0)
                    {
                      goto LABEL_1207;
                    }
                    goto LABEL_1206;
                  }
                  if ((sub_1C4D9ED34((uint64_t)&v1239[8], *(llvm::Constant **)(v9 - 32)) & 1) == 0)
                  {
                    v637 = *(llvm **)v1239;
                    goto LABEL_1143;
                  }
LABEL_1206:
                  *(_WORD *)&v1239[32] = 257;
                  v243 = (llvm::APInt *)v9;
                  v244 = (uint64_t *)True;
                  goto LABEL_417;
                }
                if (*(_WORD *)(v9 + 18) != 30)
                  goto LABEL_1207;
                v639 = *(_DWORD *)(v9 + 20) & 0x7FFFFFF;
                v640 = (llvm **)(v9 - 32 * v639);
                if (v1226 == *v640)
                {
                  if ((sub_1C4D9EED4((uint64_t)&v1239[8], v640[4]) & 1) != 0)
                    goto LABEL_1206;
                  v637 = *(llvm **)v1239;
                  v641 = -(uint64_t)(*(_DWORD *)(v9 + 20) & 0x7FFFFFF);
                }
                else
                {
                  v641 = -v639;
                }
                v683 = (llvm::Constant **)(v9 + 32 * v641);
                if (v637 != v683[4] || !sub_1C4D9EED4((uint64_t)&v1239[8], *v683))
                {
LABEL_1207:
                  v1246.__r_.__value_.__r.__words[0] = 0;
                  v1242 = 0;
                  *(_QWORD *)v1239 = &v1246;
                  *(_QWORD *)&v1239[16] = &v1242;
                  v684 = *(_DWORD *)(*(_QWORD *)a2 + 8);
                  if ((v684 & 0xFE) == 0x12)
                    v684 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
                  if (v684 == 269)
                  {
                    v685 = *((unsigned __int8 *)a2 + 16);
                    if (v685 == 85)
                    {
                      v688 = (unsigned __int8 *)*v1223;
                      if (!*v1223)
                        goto LABEL_1229;
                      if (v688[16] > 0x14u)
                        goto LABEL_1229;
                      v689 = (uint64_t)*v1222;
                      v690 = *v1224;
                      if (!llvm::Constant::isNullValue((llvm::Constant *)v688)
                        || !sub_1C4D9EC28((_QWORD **)v1239, 30, v689)
                        || !sub_1C4D9EC28((_QWORD **)&v1239[16], 30, v690))
                      {
                        goto LABEL_1229;
                      }
                    }
                    else
                    {
                      if (v685 != 56)
                        goto LABEL_1229;
                      v686 = *((_DWORD *)a2 + 5);
                      v687 = (v686 & 0x40000000) != 0
                           ? (uint64_t *)*((_QWORD *)a2 - 1)
                           : (uint64_t *)((char *)a2 - 32 * (v686 & 0x7FFFFFF));
                      v691 = v687[4];
                      if (!sub_1C4D9EC28((_QWORD **)v1239, 30, *v687)
                        || (sub_1C4D9EC28((_QWORD **)&v1239[16], 30, v691) & 1) == 0)
                      {
                        goto LABEL_1229;
                      }
                    }
                    v692 = *((_QWORD *)v1226 + 1);
                    if (v692 && !*(_QWORD *)(v692 + 8) || (v693 = *(_QWORD *)(v7 + 8)) != 0 && !*(_QWORD *)(v693 + 8))
                    {
                      v694 = v1246.__r_.__value_.__r.__words[0];
                      if (*(_BYTE *)(v1246.__r_.__value_.__r.__words[0] + 16) != 5)
                      {
                        v695 = v1242;
                        if (*((_BYTE *)v1242 + 16) != 5)
                        {
                          v1050 = *(uint64_t **)(a1 + 24);
                          *(_WORD *)&v1239[32] = 257;
                          v1049 = (uint64_t *)True;
                          goto LABEL_1877;
                        }
                      }
                    }
                  }
LABEL_1229:
                  *(_QWORD *)v1239 = &v1246;
                  *(_QWORD *)&v1239[16] = &v1242;
                  v696 = *(_DWORD *)(*(_QWORD *)a2 + 8);
                  if ((v696 & 0xFE) == 0x12)
                    v696 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
                  if (v696 != 269)
                    goto LABEL_1251;
                  v697 = *((unsigned __int8 *)a2 + 16);
                  if (v697 == 85)
                  {
                    v700 = (unsigned __int8 *)*v1224;
                    if (!*v1224)
                      goto LABEL_1251;
                    if (v700[16] > 0x14u)
                      goto LABEL_1251;
                    v701 = (uint64_t)*v1222;
                    v702 = *v1223;
                    if (!llvm::Constant::isOneValue((llvm::Constant *)v700)
                      || !sub_1C4D9EC28((_QWORD **)v1239, 30, v701))
                    {
                      goto LABEL_1251;
                    }
                    v703 = v702;
                  }
                  else
                  {
                    if (v697 != 57)
                      goto LABEL_1251;
                    v698 = *((_DWORD *)a2 + 5);
                    v699 = (v698 & 0x40000000) != 0
                         ? (uint64_t *)*((_QWORD *)a2 - 1)
                         : (uint64_t *)((char *)a2 - 32 * (v698 & 0x7FFFFFF));
                    v704 = v699[4];
                    if (!sub_1C4D9EC28((_QWORD **)v1239, 30, *v699))
                      goto LABEL_1251;
                    v703 = v704;
                  }
                  if ((sub_1C4D9EC28((_QWORD **)&v1239[16], 30, v703) & 1) != 0)
                  {
                    v705 = v1226;
                    v706 = *((_QWORD *)v1226 + 1);
                    if ((v706 && !*(_QWORD *)(v706 + 8) || (v707 = *(_QWORD *)(v9 + 8)) != 0 && !*(_QWORD *)(v707 + 8))
                      && *(_BYTE *)(v1246.__r_.__value_.__r.__words[0] + 16) != 5)
                    {
                      v1049 = v1242;
                      if (*((_BYTE *)v1242 + 16) != 5)
                      {
                        v1050 = *(uint64_t **)(a1 + 24);
                        *(_WORD *)&v1239[32] = 257;
                        v694 = v1246.__r_.__value_.__r.__words[0];
                        v695 = (_QWORD *)v197;
LABEL_1877:
                        Select = llvm::IRBuilderBase::CreateSelect(v1050, v694, v1049, (uint64_t)v695, (uint64_t)v1239, 0);
                        LOWORD(v1254) = 257;
                        return (llvm::UndefValue **)llvm::BinaryOperator::CreateNot((uint64_t)Select, (llvm::Type *)&data, 0);
                      }
                    }
LABEL_1252:
                    *(_QWORD *)v1239 = &v1246;
                    *(_QWORD *)&v1239[16] = &v1242;
                    if (sub_1C5843A3C((_QWORD **)v1239, (uint64_t)v705)
                      && sub_1C4D89CC8((uint64_t)&data, (llvm::Constant *)v7)
                      && v1242 == (_QWORD *)v9)
                    {
                      goto LABEL_1817;
                    }
                    *(_QWORD *)v1239 = &v1246;
                    *(_QWORD *)&v1239[8] = &v1242;
                    if (sub_1C5843AEC((_QWORD **)v1239, (uint64_t)v1226))
                    {
                      if (v1242 == (_QWORD *)v7
                        && v9
                        && *(unsigned __int8 *)(v9 + 16) <= 0x14u
                        && ((llvm::Constant::isNullValue((llvm::Constant *)v9) & 1) != 0
                         || (sub_1C4E71060((uint64_t)&data, (llvm::Constant *)v9) & 1) != 0))
                      {
                        goto LABEL_1817;
                      }
                    }
                    *(_QWORD *)&v1249 = 0;
                    *(_QWORD *)v1239 = v7;
                    *(_QWORD *)&v1239[16] = &v1249;
                    if (sub_1C57BFE1C((uint64_t *)v1239, 29, (uint64_t)v1226))
                    {
                      v708 = v1226;
                      v709 = *((_QWORD *)v1226 + 1);
                      if (v709 && !*(_QWORD *)(v709 + 8))
                      {
                        v710 = *(uint64_t **)(a1 + 24);
                        *(_WORD *)&v1239[32] = 257;
                        v711 = sub_1C57A4274(v710, (_QWORD *)v9, (uint64_t)v1239);
                        v712 = *(_QWORD *)(a1 + 24);
                        *(_WORD *)&v1239[32] = 257;
                        v713 = sub_1C4773594(v712, (_QWORD *)v1249, (uint64_t)v711, (uint64_t)v1239);
                        LOWORD(v1254) = 257;
                        v714 = (char *)operator new(0x80uLL);
                        *((_QWORD *)v714 + 5) = 0;
                        v715 = v714 + 40;
                        *((_QWORD *)v714 + 6) = 0;
                        *((_QWORD *)v714 + 8) = *(_QWORD *)v7;
                        BitOrPointerCast = (uint64_t)(v714 + 64);
                        *((_QWORD *)v714 + 3) = v714 + 64;
                        *((_QWORD *)v714 + 7) = v714 + 64;
                        *((_QWORD *)v714 + 9) = 0;
                        v714[80] = 56;
                        v714[81] = 0;
                        *((_WORD *)v714 + 41) = 0;
                        *((_DWORD *)v714 + 21) = 2;
                        *(_OWORD *)(v714 + 88) = 0u;
                        *(_OWORD *)(v714 + 104) = 0u;
                        *((_DWORD *)v714 + 30) = 0;
                        *(_QWORD *)v714 = v7;
                        v718 = *(_QWORD *)(v7 + 8);
                        v717 = (_QWORD *)(v7 + 8);
                        v716 = v718;
                        *((_QWORD *)v714 + 1) = v718;
                        if (v718)
                          *(_QWORD *)(v716 + 16) = v714 + 8;
                        *((_QWORD *)v714 + 2) = v717;
                        *v717 = v714;
LABEL_1285:
                        *((_QWORD *)v714 + 4) = v713;
                        if (v713)
                        {
                          v736 = *(_QWORD *)(v713 + 8);
                          v735 = (_QWORD *)(v713 + 8);
                          v734 = v736;
                          *v715 = v736;
                          if (v736)
                            *(_QWORD *)(v734 + 16) = v715;
                          *((_QWORD *)v714 + 6) = v735;
                          *v735 = v714 + 32;
                        }
                        v185 = &data;
                        goto LABEL_329;
                      }
                    }
                    else
                    {
                      v708 = v1226;
                    }
                    *(_QWORD *)v1239 = &v1249;
                    *(_QWORD *)&v1239[16] = v9;
                    v719 = *((unsigned __int8 *)v708 + 16);
                    if (v719 == 5)
                    {
                      if (*((_WORD *)v708 + 9) != 28)
                        goto LABEL_1290;
                      v724 = sub_1C4D9EC28((_QWORD **)v1239, 30, *((_QWORD *)v708 - 4 * (*((_DWORD *)v708 + 5) & 0x7FFFFFF)));
                      v725 = ((_QWORD *)v708 - 4 * (*((_DWORD *)v708 + 5) & 0x7FFFFFF))[4];
                      if (v724 && *(_QWORD *)&v1239[16] == v725)
                        goto LABEL_1280;
                      if (!sub_1C4D9EC28((_QWORD **)v1239, 30, v725))
                        goto LABEL_1290;
                      v720 = (_QWORD *)((char *)v708 - 32 * (*((_DWORD *)v708 + 5) & 0x7FFFFFF));
                    }
                    else
                    {
                      if (v719 != 56)
                        goto LABEL_1290;
                      v721 = *((_QWORD *)v708 - 8);
                      v720 = (_QWORD *)((char *)v708 - 64);
                      v722 = sub_1C4D9EC28((_QWORD **)v1239, 30, v721);
                      v723 = v720[4];
                      if (v722 && *(_QWORD *)&v1239[16] == v723)
                      {
LABEL_1280:
                        v726 = *((_QWORD *)v1226 + 1);
                        if (v726)
                        {
                          v727 = a1 + 88;
                          if (!*(_QWORD *)(v726 + 8))
                          {
                            v728 = *(uint64_t **)(a1 + 24);
                            *(_WORD *)&v1239[32] = 257;
                            v729 = sub_1C57A4274(v728, (_QWORD *)v7, (uint64_t)v1239);
                            v730 = *(_QWORD *)(a1 + 24);
                            *(_WORD *)&v1239[32] = 257;
                            v713 = sub_1C4773594(v730, (_QWORD *)v1249, (uint64_t)v729, (uint64_t)v1239);
                            LOWORD(v1254) = 257;
                            v714 = (char *)operator new(0x80uLL);
                            *((_QWORD *)v714 + 5) = 0;
                            v715 = v714 + 40;
                            *((_QWORD *)v714 + 6) = 0;
                            *((_QWORD *)v714 + 8) = *(_QWORD *)v9;
                            BitOrPointerCast = (uint64_t)(v714 + 64);
                            *((_QWORD *)v714 + 3) = v714 + 64;
                            *((_QWORD *)v714 + 7) = v714 + 64;
                            *((_QWORD *)v714 + 9) = 0;
                            v714[80] = 56;
                            v714[81] = 0;
                            *((_WORD *)v714 + 41) = 0;
                            *((_DWORD *)v714 + 21) = 2;
                            *(_OWORD *)(v714 + 88) = 0u;
                            *(_OWORD *)(v714 + 104) = 0u;
                            *((_DWORD *)v714 + 30) = 0;
                            *(_QWORD *)v714 = v9;
                            v733 = *(_QWORD *)(v9 + 8);
                            v732 = (_QWORD *)(v9 + 8);
                            v731 = v733;
                            *((_QWORD *)v714 + 1) = v733;
                            if (v733)
                              *(_QWORD *)(v731 + 16) = v714 + 8;
                            *((_QWORD *)v714 + 2) = v732;
                            *v732 = v714;
                            goto LABEL_1285;
                          }
                          goto LABEL_1291;
                        }
LABEL_1290:
                        v727 = a1 + 88;
LABEL_1291:
                        if ((*((_DWORD *)v1220 + 2) & 0xFE) != 0x12)
                        {
                          v740 = sub_1C4E69F48(v7, (uint64_t)v1226, (uint64_t)True, v727, 1, 3);
                          if (v740)
                          {
                            v231 = (uint64_t)v740;
LABEL_1304:
                            v228 = a1;
                            v229 = (uint64_t)a2;
                            v230 = 1;
                            return (llvm::UndefValue **)sub_1C577E2C8(v228, v229, v230, v231);
                          }
                          v752 = sub_1C4E69F48(v9, (uint64_t)v1226, v197, v727, 1, 3);
                          if (v752)
                          {
                            v231 = (uint64_t)v752;
LABEL_881:
                            v228 = a1;
                            v229 = (uint64_t)a2;
                            v230 = 2;
                            return (llvm::UndefValue **)sub_1C577E2C8(v228, v229, v230, v231);
                          }
                        }
                        if (v9
                          && *(unsigned __int8 *)(v9 + 16) <= 0x14u
                          && ((llvm::Constant::isNullValue((llvm::Constant *)v9) & 1) != 0
                           || (sub_1C4E71060((uint64_t)v1239, (llvm::Constant *)v9) & 1) != 0)
                          || (sub_1C4D89CC8((uint64_t)v1239, (llvm::Constant *)v7) & 1) != 0)
                        {
                          data = 0;
                          if (v9
                            && *(unsigned __int8 *)(v9 + 16) < 0x15u
                            && (llvm::Constant::isNullValue((llvm::Constant *)v9)
                             || sub_1C4E71060((uint64_t)v1239, (llvm::Constant *)v9)))
                          {
                            v738 = 1;
                            v739 = (llvm::Value *)v7;
                          }
                          else
                          {
                            v738 = 0;
                            v739 = (llvm::Value *)v9;
                          }
                          if (llvm::isCheckForZeroAndMulWithOverflow(v1226, v739, (llvm::Value *)v738, &data, v737))
                          {
                            v741 = operator new(0x60uLL);
                            v742 = (llvm::Value *)(v741 + 8);
                            v741[13] = v741[13] & 0x38000000 | 1;
                            *(_QWORD *)v741 = 0;
                            *((_QWORD *)v741 + 1) = 0;
                            *((_QWORD *)v741 + 2) = 0;
                            *((_QWORD *)v741 + 3) = v741 + 8;
                            v743 = **(uint64_t *****)&data;
                            if ((*(_BYTE *)(**(_QWORD **)&data + 23) & 0x10) != 0)
                            {
                              v744 = ***v743;
                              v745 = *(_QWORD *)(v744 + 152);
                              v746 = *(unsigned int *)(v744 + 168);
                              if ((_DWORD)v746)
                              {
                                LODWORD(v747) = (v746 - 1) & ((v743 >> 4) ^ (v743 >> 9));
                                v748 = (uint64_t ****)(v745 + 16 * v747);
                                v749 = *v748;
                                if (*v748 != v743)
                                {
                                  v750 = 1;
                                  do
                                  {
                                    if (v749 == (uint64_t ***)-4096)
                                      goto LABEL_1794;
                                    v751 = v747 + v750++;
                                    v747 = v751 & (v746 - 1);
                                    v749 = *(uint64_t ****)(v745 + 16 * v747);
                                  }
                                  while (v749 != v743);
                                  v748 = (uint64_t ****)(v745 + 16 * v747);
                                }
                              }
                              else
                              {
LABEL_1794:
                                v748 = (uint64_t ****)(v745 + 16 * v746);
                              }
                              v1022 = v748[1];
                              v1025 = *v1022;
                              v1023 = (char *)(v1022 + 2);
                              v1024 = v1025;
                            }
                            else
                            {
                              v1024 = 0;
                              v1023 = &byte_1C871356D;
                            }
                            *(_WORD *)&v1239[32] = 773;
                            *(_QWORD *)v1239 = v1023;
                            *(_QWORD *)&v1239[8] = v1024;
                            *(_QWORD *)&v1239[16] = ".fr";
                            llvm::FreezeInst::FreezeInst((uint64_t)(v741 + 8), v743, (uint64_t)v1239, 0);
                            sub_1C57D7818(a1, v742, *(_QWORD *)(*(_QWORD *)&data + 24));
                            sub_1C5788CC4((_QWORD *)a1, *(uint64_t **)&data, (uint64_t)v742);
                            v16 = (uint64_t)v739;
                            goto LABEL_9;
                          }
                          if (*((_BYTE *)v739 + 16) == 85)
                          {
                            BitOrPointerCast = (uint64_t)sub_1C583A138(a1, v1226, (uint64_t)v739, (const llvm::DataLayout *)v738);
                            if (BitOrPointerCast)
                              return (llvm::UndefValue **)BitOrPointerCast;
                          }
                          if (v1226)
                          {
                            if (*((_BYTE *)v1226 + 16) == 81 && *((_BYTE *)v739 + 16) == 81)
                            {
                              v16 = sub_1C57A4000(a1, (uint64_t)v1226, (uint64_t)v739, a2, v738, 1);
                              if (v16)
                                goto LABEL_9;
                              v16 = sub_1C57A42F8(a1, (uint64_t)v1226, (uint64_t)v739, v738);
                              if (v16)
                                goto LABEL_9;
                            }
                          }
                        }
                        *(_QWORD *)v1239 = &v1246;
                        *(_QWORD *)&v1239[16] = &v1242;
                        if (sub_1C5843A3C((_QWORD **)v1239, (uint64_t)v1226)
                          && v9
                          && *(unsigned __int8 *)(v9 + 16) <= 0x14u
                          && ((llvm::Constant::isNullValue((llvm::Constant *)v9) & 1) != 0
                           || (sub_1C4E71060((uint64_t)&data, (llvm::Constant *)v9) & 1) != 0))
                        {
                          isImpliedCondition = llvm::isImpliedCondition((llvm *)v7, (const llvm::Value *)v1242, *(const llvm::Value **)(a1 + 80), (const llvm::DataLayout *)1, 0);
                          if (isImpliedCondition >= 0x100u && !(_BYTE)isImpliedCondition)
                            goto LABEL_1817;
                        }
                        *(_QWORD *)v1239 = &v1246;
                        *(_QWORD *)&v1239[16] = &v1242;
                        if (sub_1C5843A3C((_QWORD **)v1239, v7)
                          && v9
                          && *(unsigned __int8 *)(v9 + 16) <= 0x14u
                          && ((llvm::Constant::isNullValue((llvm::Constant *)v9) & 1) != 0
                           || (sub_1C4E71060((uint64_t)&data, (llvm::Constant *)v9) & 1) != 0))
                        {
                          v1027 = llvm::isImpliedCondition(v1226, (const llvm::Value *)v1242, *(const llvm::Value **)(a1 + 80), (const llvm::DataLayout *)1, 0);
                          if (v1027 >= 0x100u && !(_BYTE)v1027)
                          {
                            v231 = v1246.__r_.__value_.__r.__words[0];
                            goto LABEL_1304;
                          }
                        }
                        if (sub_1C4D89CC8((uint64_t)&data, (llvm::Constant *)v7))
                        {
                          *(_QWORD *)v1239 = &v1246;
                          *(_QWORD *)&v1239[8] = &v1242;
                          if (sub_1C5843AEC((_QWORD **)v1239, v9))
                          {
                            v1028 = llvm::isImpliedCondition(v1226, (const llvm::Value *)v1242, *(const llvm::Value **)(a1 + 80), 0, 0);
                            if (v1028 >= 0x100u)
                            {
                              if ((_BYTE)v1028)
                              {
                                v231 = v1246.__r_.__value_.__r.__words[0];
                                goto LABEL_881;
                              }
                            }
                          }
                        }
                        *(_QWORD *)v1239 = &v1246;
                        *(_QWORD *)&v1239[8] = &v1242;
                        if (sub_1C5843AEC((_QWORD **)v1239, (uint64_t)v1226))
                        {
                          if (sub_1C4D89CC8((uint64_t)&data, (llvm::Constant *)v7))
                          {
                            v1029 = llvm::isImpliedCondition((llvm *)v9, (const llvm::Value *)v1242, *(const llvm::Value **)(a1 + 80), 0, 0);
                            if (v1029 >= 0x100u)
                            {
                              if ((_BYTE)v1029)
                              {
LABEL_1817:
                                v231 = v1246.__r_.__value_.__r.__words[0];
                                v228 = a1;
                                v229 = (uint64_t)a2;
                                v230 = 0;
                                return (llvm::UndefValue **)sub_1C577E2C8(v228, v229, v230, v231);
                              }
                            }
                          }
                        }
                        __dst.__r_.__value_.__r.__words[0] = 0;
                        v1235[0] = 0;
                        *(_QWORD *)v1239 = &__dst;
                        *(_QWORD *)&v1239[8] = &v1246;
                        if (!sub_1C5843AEC((_QWORD **)v1239, (uint64_t)v1226))
                          goto LABEL_2032;
                        if (!sub_1C4D89CC8((uint64_t)&v1237, (llvm::Constant *)v7))
                          goto LABEL_2032;
                        data = (int8x8_t)v1235;
                        *(_QWORD *)&v1252 = &v1242;
                        if (!sub_1C5843AEC(&data, v9))
                          goto LABEL_2032;
                        v1030 = v1235[0];
                        v1031 = __dst.__r_.__value_.__r.__words[0];
                        *(_QWORD *)v1239 = __dst.__r_.__value_.__r.__words[0];
                        v1032 = *((unsigned __int8 *)v1235[0] + 16);
                        if (v1032 == 5)
                        {
                          if (*((_WORD *)v1235[0] + 9) != 30)
                            goto LABEL_1939;
                          v1070 = *((_DWORD *)v1235[0] + 5) & 0x7FFFFFF;
                          v1071 = (llvm::Constant **)((char *)v1235[0] - 32 * v1070);
                          if ((llvm::Constant *)__dst.__r_.__value_.__l.__data_ == *v1071)
                          {
                            if ((sub_1C4D9EED4((uint64_t)&v1239[8], v1071[4]) & 1) != 0)
                              goto LABEL_1938;
                            v1031 = *(_QWORD *)v1239;
                            v1072 = -(uint64_t)(*((_DWORD *)v1030 + 5) & 0x7FFFFFF);
                          }
                          else
                          {
                            v1072 = -v1070;
                          }
                          v1105 = (char *)v1030 + 32 * v1072;
                          if (v1031 != *((_QWORD *)v1105 + 4)
                            || !sub_1C4D9EED4((uint64_t)&v1239[8], *(llvm::Constant **)v1105))
                          {
LABEL_1939:
                            v1106 = __dst.__r_.__value_.__r.__words[0];
                            v1107 = v1235[0];
                            *(llvm::APInt **)v1239 = v1235[0];
                            v1108 = *(unsigned __int8 *)(__dst.__r_.__value_.__r.__words[0] + 16);
                            if (v1108 != 5)
                            {
                              if (v1108 != 58)
                                goto LABEL_2032;
                              if (v1235[0] != *(llvm::APInt **)(__dst.__r_.__value_.__r.__words[0] - 64))
                                goto LABEL_1944;
                              if ((sub_1C4D9ED34((uint64_t)&v1239[8], *(llvm::Constant **)(__dst.__r_.__value_.__r.__words[0] - 32)) & 1) == 0)
                              {
                                v1107 = *(llvm::APInt **)v1239;
LABEL_1944:
                                if (v1107 == *(llvm::APInt **)(v1106 - 32)
                                  && (sub_1C4D9ED34((uint64_t)&v1239[8], *(llvm::Constant **)(v1106 - 64)) & 1) != 0)
                                {
                                  goto LABEL_2034;
                                }
LABEL_2032:
                                v45 = *((_DWORD *)v1220 + 2);
                                goto LABEL_56;
                              }
LABEL_2034:
                              v243 = v1235[0];
                              v244 = v1242;
                              v245 = (_QWORD *)v1246.__r_.__value_.__r.__words[0];
                              goto LABEL_2035;
                            }
                            if (*(_WORD *)(__dst.__r_.__value_.__r.__words[0] + 18) != 30)
                              goto LABEL_2032;
                            v1109 = *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 20) & 0x7FFFFFF;
                            v1110 = (llvm::APInt **)(__dst.__r_.__value_.__r.__words[0] - 32 * v1109);
                            if (v1235[0] == *v1110)
                            {
                              if ((sub_1C4D9EED4((uint64_t)&v1239[8], v1110[4]) & 1) != 0)
                                goto LABEL_2034;
                              v1107 = *(llvm::APInt **)v1239;
                              v1111 = -(uint64_t)(*(_DWORD *)(v1106 + 20) & 0x7FFFFFF);
                            }
                            else
                            {
                              v1111 = -v1109;
                            }
                            v1161 = (llvm::Constant **)(v1106 + 32 * v1111);
                            if (v1107 == v1161[4] && sub_1C4D9EED4((uint64_t)&v1239[8], *v1161))
                              goto LABEL_2034;
                            goto LABEL_2032;
                          }
                        }
                        else
                        {
                          if (v1032 != 58)
                            goto LABEL_1939;
                          if (__dst.__r_.__value_.__r.__words[0] == *((_QWORD *)v1235[0] - 8))
                          {
                            if ((sub_1C4D9ED34((uint64_t)&v1239[8], *((llvm::Constant **)v1235[0] - 4)) & 1) != 0)
                              goto LABEL_1938;
                            v1031 = *(_QWORD *)v1239;
                          }
                          if (v1031 != *((_QWORD *)v1030 - 4)
                            || (sub_1C4D9ED34((uint64_t)&v1239[8], *((llvm::Constant **)v1030 - 8)) & 1) == 0)
                          {
                            goto LABEL_1939;
                          }
                        }
LABEL_1938:
                        v243 = (llvm::APInt *)__dst.__r_.__value_.__r.__words[0];
                        v244 = (uint64_t *)v1246.__r_.__value_.__r.__words[0];
                        v245 = v1242;
LABEL_2035:
                        *(_WORD *)&v1239[32] = 257;
                        return (llvm::UndefValue **)sub_1C4FC8748((uint64_t)v243, v244, (uint64_t)v245, (uint64_t)v1239, 0, 0);
                      }
                      if ((sub_1C4D9EC28((_QWORD **)v1239, 30, v723) & 1) == 0)
                        goto LABEL_1290;
                    }
                    if (*(_QWORD *)&v1239[16] != *v720)
                      goto LABEL_1290;
                    goto LABEL_1280;
                  }
LABEL_1251:
                  v705 = v1226;
                  goto LABEL_1252;
                }
                goto LABEL_1206;
              }
            }
            else
            {
              if (v198 != 58)
                goto LABEL_1138;
              if (v1226 == *(llvm **)(v7 - 64))
              {
                if ((sub_1C4D9ED34((uint64_t)&v1239[8], *(llvm::Constant **)(v7 - 32)) & 1) != 0)
                  goto LABEL_1137;
                v196 = *(llvm **)v1239;
              }
              if (v196 != *(llvm **)(v7 - 32)
                || (sub_1C4D9ED34((uint64_t)&v1239[8], *(llvm::Constant **)(v7 - 64)) & 1) == 0)
              {
                goto LABEL_1138;
              }
            }
LABEL_1137:
            *(_WORD *)&v1239[32] = 257;
            v243 = (llvm::APInt *)v7;
            v244 = (uint64_t *)v9;
            v245 = (_QWORD *)v197;
            return (llvm::UndefValue **)sub_1C4FC8748((uint64_t)v243, v244, (uint64_t)v245, (uint64_t)v1239, 0, 0);
          }
          v228 = a1;
          v229 = (uint64_t)a2;
          v230 = 2;
          v231 = v197;
        }
        return (llvm::UndefValue **)sub_1C577E2C8(v228, v229, v230, v231);
      }
      v199 = *(_QWORD *)(a1 + 24);
      v200 = v1226;
      if ((*((_BYTE *)v1226 + 23) & 0x10) != 0)
      {
        v209 = ***(_QWORD ***)v1226;
        v202 = *(_QWORD *)(v209 + 152);
        v203 = *(unsigned int *)(v209 + 168);
        if ((_DWORD)v203)
        {
          LODWORD(v204) = (v203 - 1) & ((v1226 >> 4) ^ (v1226 >> 9));
          v205 = v202 + 16 * v204;
          v210 = *(llvm **)v205;
          if (*(llvm **)v205 == v1226)
          {
LABEL_415:
            v239 = *(_QWORD **)(v205 + 8);
            v242 = *v239;
            v240 = (char *)(v239 + 2);
            v241 = v242;
LABEL_416:
            *(_WORD *)&v1239[32] = 1283;
            *(_QWORD *)v1239 = "not.";
            *(_QWORD *)&v1239[16] = v240;
            *(_QWORD *)&v1239[24] = v241;
            v243 = (llvm::APInt *)sub_1C506EAA0(v199, (uint64_t)v200, (uint64_t)v1239);
            *(_WORD *)&v1239[32] = 257;
            v244 = (uint64_t *)v9;
LABEL_417:
            v245 = (_QWORD *)v7;
            return (llvm::UndefValue **)sub_1C4FC8748((uint64_t)v243, v244, (uint64_t)v245, (uint64_t)v1239, 0, 0);
          }
          v211 = 1;
          while (v210 != (llvm *)-4096)
          {
            v212 = v204 + v211++;
            v204 = v212 & (v203 - 1);
            v210 = *(llvm **)(v202 + 16 * v204);
            if (v210 == v1226)
              goto LABEL_388;
          }
        }
LABEL_414:
        v205 = v202 + 16 * v203;
        goto LABEL_415;
      }
    }
    v241 = 0;
    v240 = &byte_1C871356D;
    goto LABEL_416;
  }
LABEL_56:
  v47 = v45 & 0xFE;
  if (v47 == 18)
    v45 = *(_DWORD *)(**((_QWORD **)v1220 + 2) + 8);
  if (v45 != 13 || v45 == 269 || (v47 == 18) != ((*(_DWORD *)(*(_QWORD *)v1226 + 8) & 0xFE) == 18))
    goto LABEL_61;
  if (sub_1C4D89CC8((uint64_t)&data, (llvm::Constant *)v7)
    && v9
    && *(unsigned __int8 *)(v9 + 16) <= 0x14u
    && ((llvm::Constant::isNullValue((llvm::Constant *)v9) & 1) != 0
     || (sub_1C4E71060((uint64_t)v1239, (llvm::Constant *)v9) & 1) != 0))
  {
    v71 = operator new(0x60uLL);
    BitOrPointerCast = (uint64_t)(v71 + 8);
    v71[13] = v71[13] & 0x38000000 | 1;
    *(_QWORD *)v71 = 0;
    *((_QWORD *)v71 + 1) = 0;
    *((_QWORD *)v71 + 2) = 0;
    *((_QWORD *)v71 + 3) = v71 + 8;
    v72 = v1226;
    *(_WORD *)&v1239[32] = 257;
    v73 = (uint64_t)(v71 + 8);
    v74 = (uint64_t)v1220;
    goto LABEL_447;
  }
  if (sub_1C4D9ED34((uint64_t)&data, (llvm::Constant *)v7)
    && v9
    && *(unsigned __int8 *)(v9 + 16) <= 0x14u
    && ((llvm::Constant::isNullValue((llvm::Constant *)v9) & 1) != 0
     || (sub_1C4E71060((uint64_t)v1239, (llvm::Constant *)v9) & 1) != 0))
  {
    v143 = operator new(0x60uLL);
    BitOrPointerCast = (uint64_t)(v143 + 8);
    v143[13] = v143[13] & 0x38000000 | 1;
    *(_QWORD *)v143 = 0;
    *((_QWORD *)v143 + 1) = 0;
    *((_QWORD *)v143 + 2) = 0;
    *((_QWORD *)v143 + 3) = v143 + 8;
    v144 = v1226;
    *(_WORD *)&v1239[32] = 257;
    v145 = (uint64_t)(v143 + 8);
    v146 = (uint64_t)v1220;
    goto LABEL_998;
  }
  if (v7
    && *(unsigned __int8 *)(v7 + 16) <= 0x14u
    && ((llvm::Constant::isNullValue((llvm::Constant *)v7) & 1) != 0
     || (sub_1C4E71060((uint64_t)v1239, (llvm::Constant *)v7) & 1) != 0)
    && sub_1C4D89CC8((uint64_t)v1239, (llvm::Constant *)v9))
  {
    v148 = *(_QWORD *)(a1 + 24);
    if ((*((_BYTE *)v1226 + 23) & 0x10) != 0)
    {
      v149 = ***(_QWORD ***)v1226;
      v150 = *(_QWORD *)(v149 + 152);
      v151 = *(unsigned int *)(v149 + 168);
      v152 = v1220;
      if ((_DWORD)v151)
      {
        LODWORD(v153) = (v151 - 1) & ((v1226 >> 4) ^ (v1226 >> 9));
        v154 = v150 + 16 * v153;
        v155 = *(llvm **)v154;
        if (*(llvm **)v154 != v1226)
        {
          v156 = 1;
          do
          {
            if (v155 == (llvm *)-4096)
              goto LABEL_444;
            v157 = v153 + v156++;
            v153 = v157 & (v151 - 1);
            v155 = *(llvm **)(v150 + 16 * v153);
          }
          while (v155 != v1226);
          v154 = v150 + 16 * v153;
        }
      }
      else
      {
LABEL_444:
        v154 = v150 + 16 * v151;
      }
      v263 = *(_QWORD **)(v154 + 8);
      v266 = *v263;
      v264 = (char *)(v263 + 2);
      v265 = v266;
    }
    else
    {
      v265 = 0;
      v264 = &byte_1C871356D;
      v152 = v1220;
    }
    *(_WORD *)&v1239[32] = 1283;
    *(_QWORD *)v1239 = "not.";
    *(_QWORD *)&v1239[16] = v264;
    *(_QWORD *)&v1239[24] = v265;
    v267 = sub_1C506EAA0(v148, (uint64_t)v1226, (uint64_t)v1239);
    v268 = operator new(0x60uLL);
    v268[13] = v268[13] & 0x38000000 | 1;
    BitOrPointerCast = (uint64_t)(v268 + 8);
    *(_QWORD *)v268 = 0;
    *((_QWORD *)v268 + 1) = 0;
    *((_QWORD *)v268 + 2) = 0;
    *((_QWORD *)v268 + 3) = v268 + 8;
    *(_WORD *)&v1239[32] = 257;
    v73 = (uint64_t)(v268 + 8);
    v72 = (llvm *)v267;
    v74 = (uint64_t)v152;
LABEL_447:
    llvm::ZExtInst::ZExtInst(v73, (uint64_t)v72, v74, (uint64_t)v1239, 0);
    return (llvm::UndefValue **)BitOrPointerCast;
  }
  if (v7
    && *(unsigned __int8 *)(v7 + 16) <= 0x14u
    && ((llvm::Constant::isNullValue((llvm::Constant *)v7) & 1) != 0
     || (sub_1C4E71060((uint64_t)v1239, (llvm::Constant *)v7) & 1) != 0)
    && sub_1C4D9ED34((uint64_t)v1239, (llvm::Constant *)v9))
  {
    v158 = *(_QWORD *)(a1 + 24);
    if ((*((_BYTE *)v1226 + 23) & 0x10) != 0)
    {
      v159 = ***(_QWORD ***)v1226;
      v160 = *(_QWORD *)(v159 + 152);
      v161 = *(unsigned int *)(v159 + 168);
      v162 = v1220;
      if ((_DWORD)v161)
      {
        LODWORD(v163) = (v161 - 1) & ((v1226 >> 4) ^ (v1226 >> 9));
        v164 = v160 + 16 * v163;
        v165 = *(llvm **)v164;
        if (*(llvm **)v164 != v1226)
        {
          v166 = 1;
          do
          {
            if (v165 == (llvm *)-4096)
              goto LABEL_995;
            v167 = v163 + v166++;
            v163 = v167 & (v161 - 1);
            v165 = *(llvm **)(v160 + 16 * v163);
          }
          while (v165 != v1226);
          v164 = v160 + 16 * v163;
        }
      }
      else
      {
LABEL_995:
        v164 = v160 + 16 * v161;
      }
      v555 = *(_QWORD **)(v164 + 8);
      v558 = *v555;
      v556 = (char *)(v555 + 2);
      v557 = v558;
    }
    else
    {
      v557 = 0;
      v556 = &byte_1C871356D;
      v162 = v1220;
    }
    *(_WORD *)&v1239[32] = 1283;
    *(_QWORD *)v1239 = "not.";
    *(_QWORD *)&v1239[16] = v556;
    *(_QWORD *)&v1239[24] = v557;
    v559 = sub_1C506EAA0(v158, (uint64_t)v1226, (uint64_t)v1239);
    v560 = operator new(0x60uLL);
    v560[13] = v560[13] & 0x38000000 | 1;
    BitOrPointerCast = (uint64_t)(v560 + 8);
    *(_QWORD *)v560 = 0;
    *((_QWORD *)v560 + 1) = 0;
    *((_QWORD *)v560 + 2) = 0;
    *((_QWORD *)v560 + 3) = v560 + 8;
    *(_WORD *)&v1239[32] = 257;
    v145 = (uint64_t)(v560 + 8);
    v144 = (llvm *)v559;
    v146 = (uint64_t)v162;
LABEL_998:
    llvm::SExtInst::SExtInst(v145, (uint64_t)v144, v146, (uint64_t)v1239, 0);
    return (llvm::UndefValue **)BitOrPointerCast;
  }
LABEL_61:
  v1218 = (_OWORD *)(a1 + 88);
  v48 = v1226;
  if (!v1226 || *((_BYTE *)v1226 + 16) != 82)
    goto LABEL_145;
  v49 = (uint64_t *)*((_QWORD *)v1226 - 8);
  v50 = *((_QWORD *)v1226 - 4);
  if (v49 == (uint64_t *)v7 && v50 == v9 || v49 == (uint64_t *)v9 && v50 == v7)
  {
    v51 = *((_QWORD *)v1226 + 1);
    if (v51)
    {
      if (!*(_QWORD *)(v51 + 8))
      {
        v52 = *((_WORD *)v1226 + 9) & 0x3F;
        if ((v52 - 8) <= 6)
        {
          v53 = (15 - v52);
          v54 = *(_QWORD *)(a1 + 24);
          v55 = *(_DWORD *)(v54 + 96);
          v56 = *(_QWORD *)(v54 + 88);
          v57 = *(_BYTE *)(v54 + 100);
          v58 = *(_BYTE *)(v54 + 101);
          v59 = *(_BYTE *)(v54 + 102);
          v60 = *((unsigned __int8 *)v1226 + 17) >> 1;
          if (v60 == 127)
            v60 = -1;
          *(_DWORD *)(v54 + 96) = v60;
          if ((*((_BYTE *)v48 + 23) & 0x10) == 0)
          {
            v234 = 0;
            v233 = &byte_1C871356D;
            goto LABEL_413;
          }
          v61 = ***(_QWORD ***)v48;
          v62 = *(_QWORD *)(v61 + 152);
          v63 = *(unsigned int *)(v61 + 168);
          if ((_DWORD)v63)
          {
            LODWORD(v64) = (v63 - 1) & ((v48 >> 4) ^ (v48 >> 9));
            v65 = (llvm **)(v62 + 16 * v64);
            v66 = *v65;
            if (*v65 == v48)
            {
LABEL_412:
              v232 = v65[1];
              v235 = *(_QWORD *)v232;
              v233 = (char *)v232 + 16;
              v234 = v235;
LABEL_413:
              *(_WORD *)&v1239[32] = 773;
              *(_QWORD *)v1239 = v233;
              *(_QWORD *)&v1239[8] = v234;
              *(_QWORD *)&v1239[16] = ".inv";
              FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper(v54, v53, v49, v50, (uint64_t)v1239, 0, 0);
              v237 = *(uint64_t **)(a1 + 24);
              *(_WORD *)&v1239[32] = 257;
              v238 = llvm::IRBuilderBase::CreateSelect(v237, FCmpHelper, (uint64_t *)v9, (uint64_t)v1221, (uint64_t)v1239, 0);
              BitOrPointerCast = (uint64_t)sub_1C577F888(a1, a2, v238);
              *(_DWORD *)(v54 + 96) = v55;
              *(_QWORD *)(v54 + 88) = v56;
              *(_BYTE *)(v54 + 100) = v57;
              *(_BYTE *)(v54 + 101) = v58;
              *(_BYTE *)(v54 + 102) = v59;
              return (llvm::UndefValue **)BitOrPointerCast;
            }
            v67 = 1;
            while (v66 != (llvm *)-4096)
            {
              v68 = v64 + v67++;
              v64 = v68 & (v63 - 1);
              v66 = *(llvm **)(v62 + 16 * v64);
              if (v66 == v48)
              {
                v65 = (llvm **)(v62 + 16 * v64);
                goto LABEL_412;
              }
            }
          }
          v65 = (llvm **)(v62 + 16 * v63);
          goto LABEL_412;
        }
      }
    }
  }
  v69 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
  if (*(char *)(v69 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(v69 + 216), *(_QWORD *)(v69 + 224));
  else
    __dst = *(std::string *)(v69 + 216);
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v70 = 27;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
  {
    v70 = 28;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
  {
    v70 = 29;
  }
  else
  {
    v70 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v70 == 27)
  {
    v75 = 1830;
  }
  else
  {
    if ((v70 & 0x1E) != 0x1C)
      goto LABEL_118;
    v75 = 2131;
  }
  v76 = *v1224;
  if (*v1224 && *(_BYTE *)(v76 + 16) == 73)
    v76 = *(_QWORD *)(v76 - 32);
  v77 = (_QWORD *)*v1223;
  if (*v1223 && *((_BYTE *)v77 + 16) == 17)
  {
    v1215 = v75;
    v1235[0] = 0;
    v1237 = 0;
    *(_DWORD *)&v1239[8] = 64;
    *(_QWORD *)v1239 = 0;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&data, (const llvm::APInt **)v1239);
    *(int8x8_t *)&v1239[8] = data;
    *(_QWORD *)&v1239[16] = v1252;
    *(_DWORD *)&v1239[24] = DWORD2(v1252);
    v1239[28] = BYTE12(v1252) & 0xF;
    v78 = v77 + 3;
    llvm::APFloat::convert((uint64_t)v1239, (void *)v77[4], 1, &data);
    v79 = sub_1C47ECB98((uint64_t)(v77 + 3), (uint64_t)v1239);
    if (*(_UNKNOWN **)&v1239[8] == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v1239[16]);
    }
    else if ((*(_DWORD *)(*(_QWORD *)&v1239[8] + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v1239[16])
    {
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v1239[16], 0x1000C8000313F17);
    }
    if ((v79 & 1) != 0)
      goto LABEL_116;
    if ((_UNKNOWN *)v77[4] == &unk_1C866F1C0)
      v78 = (_QWORD *)v77[5];
    if ((*((_BYTE *)v78 + 28) & 8) != 0)
    {
LABEL_116:
      v1237 = (llvm::APInt *)v77;
      if ((*((_WORD *)v1226 + 9) & 0x3F) != 2)
        goto LABEL_118;
      if (v77 != *((_QWORD **)v1226 - 4))
        goto LABEL_118;
      v1236 = 0;
      v1233 = 0;
      v1232 = 0;
      data = 0;
      v186 = *((_QWORD *)v1226 - 8);
      *(_QWORD *)v1239 = &v1233;
      *(_QWORD *)&v1239[8] = &v1236;
      *(_QWORD *)&v1239[16] = v1235;
      *(_QWORD *)&v1239[24] = &v1232;
      *(_QWORD *)&v1239[32] = &data;
      if (!sub_1C58429BC((uint64_t)v1239, v186) || v1235[0] != (llvm::APInt *)data)
        goto LABEL_118;
      v82 = 4;
      v81 = 1;
    }
    else
    {
      v1235[0] = (llvm::APInt *)v77;
      if ((*((_WORD *)v1226 + 9) & 0x3F) != 4)
        goto LABEL_118;
      if (v77 != *((_QWORD **)v1226 - 4))
        goto LABEL_118;
      v1236 = 0;
      v1233 = 0;
      v1232 = 0;
      data = 0;
      v80 = *((_QWORD *)v1226 - 8);
      *(_QWORD *)v1239 = &v1233;
      *(_QWORD *)&v1239[8] = &v1236;
      *(_QWORD *)&v1239[16] = &v1237;
      *(_QWORD *)&v1239[24] = &v1232;
      *(_QWORD *)&v1239[32] = &data;
      if (!sub_1C58429BC((uint64_t)v1239, v80) || v1237 != (llvm::APInt *)data)
        goto LABEL_118;
      v81 = 0;
      v82 = 2;
    }
    if (v1233 == v82 && v1236 == v1232)
    {
      *(_QWORD *)v1231 = 0;
      v1230 = 0;
      v1229 = 0;
      if (v81)
      {
        *(_QWORD *)v1239 = &v1230;
        *(_QWORD *)&v1239[8] = v1231;
        *(llvm::APInt **)&v1239[16] = v1235[0];
        *(_QWORD *)&v1239[24] = &v1229;
        *(llvm::APInt **)&v1239[32] = v1235[0];
        if (!sub_1C5842AA8((uint64_t)v1239, v76))
          goto LABEL_118;
      }
      else
      {
        *(_QWORD *)v1239 = &v1230;
        *(_QWORD *)&v1239[8] = v1231;
        *(_QWORD *)&v1239[16] = v1237;
        *(_QWORD *)&v1239[24] = &v1229;
        *(_QWORD *)&v1239[32] = v1237;
        if (!sub_1C5842AA8((uint64_t)v1239, v76))
          goto LABEL_118;
      }
      v642 = *(uint64_t **)v1231;
      if (*(_QWORD *)v1231 && *(_BYTE *)(*(_QWORD *)v1231 + 16) == 73)
      {
        v642 = *(uint64_t **)(*(_QWORD *)v1231 - 32);
        *(_QWORD *)v1231 = v642;
      }
      v643 = v1229;
      if (v1229 && *((_BYTE *)v1229 + 16) == 73)
      {
        v643 = (uint64_t *)*(v1229 - 4);
        v1229 = v643;
      }
      v644 = v1232;
      if (v1232 && *((_BYTE *)v1232 + 16) == 73)
      {
        v644 = (uint64_t *)*(v1232 - 4);
        v1232 = v644;
      }
      if (v1230 == v82 && v642 == v643 && v643 == v644)
      {
        v645 = v1237;
        *(_DWORD *)&v1239[8] = 64;
        *(_QWORD *)v1239 = 0xBFF0000000000000;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&data, (const llvm::APInt **)v1239);
        *(int8x8_t *)&v1239[8] = data;
        *(_QWORD *)&v1239[16] = v1252;
        *(_DWORD *)&v1239[24] = DWORD2(v1252);
        v1239[28] = BYTE12(v1252) & 0xF;
        llvm::APFloat::convert((uint64_t)v1239, *((void **)v645 + 4), 1, &data);
        v646 = sub_1C47ECB98((uint64_t)v645 + 24, (uint64_t)v1239);
        if (*(_UNKNOWN **)&v1239[8] == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v1239[16]);
        }
        else if ((*(_DWORD *)(*(_QWORD *)&v1239[8] + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v1239[16])
        {
          MEMORY[0x1CAA32F9C](*(_QWORD *)&v1239[16], 0x1000C8000313F17);
        }
        if (!v646)
          goto LABEL_1835;
        v647 = v1235[0];
        *(_DWORD *)&v1239[8] = 64;
        *(_QWORD *)v1239 = 0x3FF0000000000000;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&data, (const llvm::APInt **)v1239);
        *(int8x8_t *)&v1239[8] = data;
        *(_QWORD *)&v1239[16] = v1252;
        *(_DWORD *)&v1239[24] = DWORD2(v1252);
        v1239[28] = BYTE12(v1252) & 0xF;
        llvm::APFloat::convert((uint64_t)v1239, *((void **)v647 + 4), 1, &data);
        v648 = sub_1C47ECB98((uint64_t)v647 + 24, (uint64_t)v1239);
        if (*(_UNKNOWN **)&v1239[8] == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v1239[16]);
        }
        else if ((*(_DWORD *)(*(_QWORD *)&v1239[8] + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v1239[16])
        {
          MEMORY[0x1CAA32F9C](*(_QWORD *)&v1239[16], 0x1000C8000313F17);
        }
        if (v648)
        {
          if (*(_BYTE *)(*(_QWORD *)a2 + 8))
            goto LABEL_118;
          if (!v1232)
            goto LABEL_118;
          v649 = *((unsigned __int8 *)v1232 + 16);
          if (v649 < 0x1C || v649 - 59 < 0xFFFFFFEE || (*((_BYTE *)v1232 + 17) & 0x10) == 0)
            goto LABEL_118;
          sub_1C4773D54((uint64_t)v1239, (uint64_t)a2, 0, 0, 0);
          v1246.__r_.__value_.__r.__words[0] = (std::string::size_type)v1232;
          v650 = (llvm::ConstantInt *)*v1232;
          v651 = *(uint64_t **)a2;
          if (*v1232 != *(_QWORD *)a2)
          {
            LOWORD(v1254) = 257;
            v1246.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C4773A70((uint64_t)v1239, v1232, v651, (uint64_t)&data);
            v650 = *(llvm::ConstantInt **)a2;
          }
          v1242 = v650;
          Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)v69, v1215, (uint64_t *)&v1242, 1);
          v653 = Declaration;
          if (Declaration)
            v654 = *(uint64_t ***)(Declaration + 24);
          else
            v654 = 0;
          LOWORD(v1254) = 257;
          v1179 = (uint64_t *)sub_1C4774778((uint64_t *)v1239, v654, Declaration, (uint64_t *)&v1246, 1, (uint64_t)&data, 0);
          LOWORD(v1254) = 257;
          *(_QWORD *)&v1249 = sub_1C4772890((uint64_t *)v1239, (uint64_t)v1246.__r_.__value_.__l.__data_, (uint64_t)&data, 0);
          if (v653)
            v1180 = *(uint64_t ***)(v653 + 24);
          else
            v1180 = 0;
          LOWORD(v1254) = 257;
          *(_QWORD *)&v1249 = sub_1C4774778((uint64_t *)v1239, v1180, v653, (uint64_t *)&v1249, 1, (uint64_t)&data, 0);
          LOWORD(v1254) = 257;
          *(_QWORD *)&v1249 = sub_1C4772890((uint64_t *)v1239, v1249, (uint64_t)&data, 0);
          LOWORD(v1254) = 257;
          v935 = (uint64_t *)sub_1C534554C((uint64_t)v1239, v1179, v1249, (uint64_t)&data, 0);
          if (*(_BYTE **)v1239 != &v1239[16])
            free(*(void **)v1239);
        }
        else
        {
LABEL_1835:
          v1037 = v1237;
          *(_DWORD *)&v1239[8] = 64;
          *(_QWORD *)v1239 = 0;
          llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&data, (const llvm::APInt **)v1239);
          *(int8x8_t *)&v1239[8] = data;
          *(_QWORD *)&v1239[16] = v1252;
          *(_DWORD *)&v1239[24] = DWORD2(v1252);
          v1239[28] = BYTE12(v1252) & 0xF;
          llvm::APFloat::convert((uint64_t)v1239, *((void **)v1037 + 4), 1, &data);
          v1038 = sub_1C47ECB98((uint64_t)v1037 + 24, (uint64_t)v1239);
          if (*(_UNKNOWN **)&v1239[8] == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v1239[16]);
          }
          else if ((*(_DWORD *)(*(_QWORD *)&v1239[8] + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v1239[16])
          {
            MEMORY[0x1CAA32F9C](*(_QWORD *)&v1239[16], 0x1000C8000313F17);
          }
          if (!v1038)
            goto LABEL_118;
          LODWORD(v1252) = 32;
          data = 0;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v1239, (const llvm::APInt **)&data);
          *(_OWORD *)&v1246.__r_.__value_.__r.__words[1] = *(_OWORD *)v1239;
          v1247 = *(_DWORD *)&v1239[16];
          v1248 = v1248 & 0xF0 | v1239[20] & 0xF;
          LODWORD(v1252) = 32;
          data = (int8x8_t)1065353216;
          llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v1239, (const llvm::APInt **)&data);
          v1243 = *(_OWORD *)v1239;
          v1244 = *(_DWORD *)&v1239[16];
          v1245 = v1245 & 0xF0 | v1239[20] & 0xF;
          llvm::APFloat::convert((uint64_t)&v1246, *((void **)v1235[0] + 4), 1, &v1228);
          llvm::APFloat::convert((uint64_t)&v1242, *((void **)v1235[0] + 4), 1, &v1228);
          v1039 = (llvm::APInt *)((char *)v1235[0] + 32);
          if (*((_UNKNOWN **)v1235[0] + 4) == &unk_1C866F1C0)
            v1040 = llvm::detail::DoubleAPFloat::compare(v1039, (const llvm::detail::DoubleAPFloat *)&v1246.__r_.__value_.__r.__words[1]);
          else
            llvm::detail::IEEEFloat::compare(v1039, (const llvm::detail::IEEEFloat *)&v1246.__r_.__value_.__r.__words[1]);
          if (v1040 != 2)
            goto LABEL_1844;
          v1041 = (llvm::APInt *)((char *)v1235[0] + 32);
          if (*((_UNKNOWN **)v1235[0] + 4) == &unk_1C866F1C0)
            v1042 = llvm::detail::DoubleAPFloat::compare(v1041, (const llvm::detail::DoubleAPFloat *)&v1243);
          else
            llvm::detail::IEEEFloat::compare(v1041, (const llvm::detail::IEEEFloat *)&v1243);
          if (v1042 != 2)
          {
            sub_1C4773D54((uint64_t)v1239, (uint64_t)a2, 0, 0, 0);
            v1227 = (unsigned __int8 *)v1232;
            v1077 = *v1232;
            v1078 = *(uint64_t **)a2;
            if (*v1232 != *(_QWORD *)a2)
            {
              LOWORD(v1254) = 257;
              v1227 = sub_1C4773A70((uint64_t)v1239, v1232, v1078, (uint64_t)&data);
              v1077 = *(_QWORD *)a2;
            }
            v1238 = v1077;
            v1079 = llvm::Intrinsic::getDeclaration((uint64_t *)v69, v1215, &v1238, 1);
            if (v1079)
              v1080 = *(uint64_t ***)(v1079 + 24);
            else
              v1080 = 0;
            LOWORD(v1254) = 257;
            v935 = (uint64_t *)sub_1C4774778((uint64_t *)v1239, v1080, v1079, (uint64_t *)&v1227, 1, (uint64_t)&data, 0);
            v1112 = v1235[0];
            LODWORD(v1252) = 64;
            data = (int8x8_t)0x3FF0000000000000;
            llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v1249, (const llvm::APInt **)&data);
            v1252 = v1249;
            LODWORD(v1253) = (_DWORD)v1250;
            BYTE4(v1253) = BYTE4(v1250) & 0xF;
            llvm::APFloat::convert((uint64_t)&data, *((void **)v1112 + 4), 1, &v1249);
            v1113 = sub_1C47ECB98((uint64_t)v1112 + 24, (uint64_t)&data);
            if ((_UNKNOWN *)v1252 == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v1252 + 1);
            }
            else if ((*(_DWORD *)(v1252 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v1252 + 1))
            {
              MEMORY[0x1CAA32F9C](*((_QWORD *)&v1252 + 1), 0x1000C8000313F17);
            }
            if ((v1113 & 1) == 0)
            {
              v1114 = (unsigned __int8 *)v1235[0];
              v1115 = *(uint64_t **)a2;
              if (*v1232 != *(_QWORD *)a2)
              {
                LOWORD(v1254) = 257;
                v1114 = sub_1C4773A70((uint64_t)v1239, (uint64_t *)v1235[0], v1115, (uint64_t)&data);
              }
              LOWORD(v1254) = 257;
              v1116 = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)v1239, 4, v935, (uint64_t)v1114, (uint64_t)&data, 0, 0);
              LOWORD(v1254) = 257;
              v935 = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)v1239, v1116, v935, (uint64_t)v1114, (uint64_t)&data, 0);
            }
            if (*(_BYTE **)v1239 != &v1239[16])
              free(*(void **)v1239);
          }
          else
          {
LABEL_1844:
            v935 = 0;
          }
          if ((_UNKNOWN *)v1243 == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v1243 + 1);
          }
          else if ((*(_DWORD *)(v1243 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v1243 + 1))
          {
            MEMORY[0x1CAA32F9C](*((_QWORD *)&v1243 + 1), 0x1000C8000313F17);
          }
          if ((_UNKNOWN *)v1246.__r_.__value_.__l.__size_ == &unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v1246.__r_.__value_.__r.__words[2]);
          }
          else if ((*(_DWORD *)(v1246.__r_.__value_.__l.__size_ + 8) - 64) <= 0xFFFFFF7F
                 && v1246.__r_.__value_.__r.__words[2])
          {
            MEMORY[0x1CAA32F9C](v1246.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
          }
        }
        if (v935)
        {
LABEL_1663:
          v17 = a1;
          v18 = a2;
          v16 = (uint64_t)v935;
          return sub_1C577F888(v17, v18, (llvm::Value *)v16);
        }
      }
    }
  }
LABEL_118:
  v83 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
  if (*(char *)(v83 + 239) < 0)
    sub_1C47EBC30(&v1246, *(void **)(v83 + 216), *(_QWORD *)(v83 + 224));
  else
    v1246 = *(std::string *)(v83 + 216);
  if (!std::string::compare(&v1246, 0, 4uLL, "agx1"))
  {
    v84 = 27;
  }
  else if (!std::string::compare(&v1246, 0, 4uLL, "agx2"))
  {
    v84 = 28;
  }
  else if (!std::string::compare(&v1246, 0, 4uLL, "agx3"))
  {
    v84 = 29;
  }
  else
  {
    v84 = 0;
  }
  if (SHIBYTE(v1246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1246.__r_.__value_.__l.__data_);
  if (v84 == 27)
  {
    v85 = 1830;
  }
  else
  {
    if ((v84 & 0x1E) != 0x1C)
    {
LABEL_142:
      v7 = (uint64_t)v1221;
      goto LABEL_143;
    }
    v85 = 2131;
  }
  v86 = 0;
  v87 = *((_QWORD *)v1226 - 4);
  if (*(_BYTE *)(v87 + 16) == 17)
    v88 = *((_QWORD *)v1226 - 4);
  else
    v88 = 0;
  v89 = *((_QWORD *)v1226 - 8);
  if (*(_BYTE *)(v89 + 16) == 84)
  {
    v90 = *(_QWORD *)(v89 - 32);
    if (v90 && !*(_BYTE *)(v90 + 16) && *(_QWORD *)(v90 + 24) == *(_QWORD *)(v89 + 72))
    {
      if ((*(_BYTE *)(v90 + 33) & 0x20) != 0)
        v86 = *((_QWORD *)v1226 - 8);
      else
        v86 = 0;
    }
    else
    {
      v86 = 0;
    }
  }
  if (v89 != *v1224 || v87 != *v1223 || !v88)
    goto LABEL_142;
  if ((*((_WORD *)v1226 + 9) & 0x3F) != 4)
    goto LABEL_305;
  *(_DWORD *)&v1239[8] = 64;
  *(_QWORD *)v1239 = 0x3FF0000000000000;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&data, (const llvm::APInt **)v1239);
  *(int8x8_t *)&v1239[8] = data;
  *(_QWORD *)&v1239[16] = v1252;
  *(_DWORD *)&v1239[24] = DWORD2(v1252);
  v1239[28] = BYTE12(v1252) & 0xF;
  llvm::APFloat::convert((uint64_t)v1239, *(void **)(v88 + 32), 1, &data);
  v124 = sub_1C47ECB98(v88 + 24, (uint64_t)v1239);
  if (*(_UNKNOWN **)&v1239[8] == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v1239[16]);
  }
  else if ((*(_DWORD *)(*(_QWORD *)&v1239[8] + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v1239[16])
  {
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v1239[16], 0x1000C8000313F17);
  }
  if (!v124 || !sub_1C4F876C8(*((unsigned __int8 **)v1226 - 8), 0, 0, 0))
  {
LABEL_305:
    if ((*((_WORD *)v1226 + 9) & 0x3F) == 2)
    {
      *(_DWORD *)&v1239[8] = 64;
      *(_QWORD *)v1239 = 0;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&data, (const llvm::APInt **)v1239);
      *(int8x8_t *)&v1239[8] = data;
      *(_QWORD *)&v1239[16] = v1252;
      *(_DWORD *)&v1239[24] = DWORD2(v1252);
      v1239[28] = BYTE12(v1252) & 0xF;
      llvm::APFloat::convert((uint64_t)v1239, *(void **)(v88 + 32), 1, &data);
      v174 = sub_1C47ECB98(v88 + 24, (uint64_t)v1239);
      if (*(_UNKNOWN **)&v1239[8] == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v1239[16]);
      }
      else if ((*(_DWORD *)(*(_QWORD *)&v1239[8] + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v1239[16])
      {
        MEMORY[0x1CAA32F9C](*(_QWORD *)&v1239[16], 0x1000C8000313F17);
      }
      v175 = v86 ? v174 : 0;
      if (v175 == 1)
      {
        v176 = *(_DWORD *)(*(_QWORD *)(v86 - 32) + 36);
        if (v176 == 1830 || v176 == 1851 || v176 == 2131)
        {
          v17 = a1;
          v18 = a2;
          v16 = v86;
          return sub_1C577F888(v17, v18, (llvm::Value *)v16);
        }
      }
    }
    goto LABEL_142;
  }
  sub_1C4773D54((uint64_t)v1239, (uint64_t)a2, 0, 0, 0);
  v1242 = (_QWORD *)*((_QWORD *)v1226 - 8);
  *(_QWORD *)&v1249 = *(_QWORD *)a2;
  v125 = llvm::Intrinsic::getDeclaration((uint64_t *)v83, v85, (uint64_t *)&v1249, 1);
  if (v125)
    v126 = *(uint64_t ***)(v125 + 24);
  else
    v126 = 0;
  v7 = (uint64_t)v1221;
  LOWORD(v1254) = 257;
  v269 = sub_1C4774778((uint64_t *)v1239, v126, v125, (uint64_t *)&v1242, 1, (uint64_t)&data, 0);
  if (*(_BYTE **)v1239 == &v1239[16])
  {
    if (v269)
    {
LABEL_451:
      v17 = a1;
      v18 = a2;
      v16 = v269;
      return sub_1C577F888(v17, v18, (llvm::Value *)v16);
    }
  }
  else
  {
    free(*(void **)v1239);
    if (v269)
      goto LABEL_451;
  }
LABEL_143:
  v91 = (uint64_t *)*((_QWORD *)v1226 - 8);
  v92 = *((_WORD *)v1226 + 9);
  if (sub_1C4E5C310((uint64_t)v1239, *((llvm::Constant **)v1226 - 4)) && (*((_BYTE *)v1226 + 17) & 4) != 0)
  {
    v140 = v92 & 0x3F;
    if (v91 == (uint64_t *)v9 && v140 == 5)
    {
      *(_QWORD *)&v1239[8] = v9;
      v141 = *(unsigned __int8 *)(v7 + 16);
      if (v141 == 5)
      {
        if (*(_WORD *)(v7 + 18) != 16
          || !sub_1C4FA4864((uint64_t)v1239, *(llvm::Constant **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF))))
        {
          goto LABEL_145;
        }
        v142 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32);
      }
      else
      {
        if (v141 != 44 || !sub_1C4E7BA90((uint64_t)v1239, *(llvm::Constant **)(v7 - 64)))
          goto LABEL_145;
        v142 = *(_QWORD *)(v7 - 32);
      }
      v187 = *(_QWORD *)&v1239[8];
    }
    else
    {
      if (v91 != (uint64_t *)v7 || v140 != 2)
        goto LABEL_145;
      *(_QWORD *)&v1252 = v7;
      v177 = *(unsigned __int8 *)(v9 + 16);
      if (v177 == 5)
      {
        if (*(_WORD *)(v9 + 18) != 16
          || !sub_1C4FA4864((uint64_t)&data, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF))))
        {
          goto LABEL_145;
        }
        v142 = *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
      }
      else
      {
        if (v177 != 44 || !sub_1C4E7BA90((uint64_t)&data, *(llvm::Constant **)(v9 - 64)))
          goto LABEL_145;
        v142 = *(_QWORD *)(v9 - 32);
      }
      v187 = v1252;
    }
    if (v187 == v142)
    {
      v138 = *(uint64_t **)(a1 + 24);
      *(_WORD *)&v1239[32] = 257;
      v139 = v91;
      v147 = v1226;
      goto LABEL_265;
    }
  }
LABEL_145:
  *(_QWORD *)v1239 = &v1225;
  *(_QWORD *)&v1239[8] = v9;
  if (!sub_1C5843BC0((uint64_t)v1239, (uint64_t)v1226))
    goto LABEL_155;
  *(_QWORD *)&v1252 = v9;
  v93 = *(unsigned __int8 *)(v7 + 16);
  if (v93 == 5)
  {
    if (*(_WORD *)(v7 + 18) != 16
      || !sub_1C4FA4864((uint64_t)&data, *(llvm::Constant **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF))))
    {
      goto LABEL_155;
    }
    v94 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32);
  }
  else
  {
    if (v93 != 44 || !sub_1C4E7BA90((uint64_t)&data, *(llvm::Constant **)(v7 - 64)))
      goto LABEL_155;
    v94 = *(_QWORD *)(v7 - 32);
  }
  if ((_QWORD)v1252 == v94 && (v1225 & 0xFFFFFFF7) == 5)
  {
LABEL_248:
    v138 = *(uint64_t **)(a1 + 24);
    *(_WORD *)&v1239[32] = 257;
    v139 = (uint64_t *)v9;
LABEL_264:
    v147 = a2;
LABEL_265:
    UnaryIntrinsic = llvm::IRBuilderBase::CreateUnaryIntrinsic(v138, 139, v139, (uint64_t)v147, (uint64_t)v1239);
    goto LABEL_8;
  }
LABEL_155:
  *(_QWORD *)v1239 = &v1225;
  *(_QWORD *)&v1239[8] = v7;
  if (sub_1C5843BC0((uint64_t)v1239, (uint64_t)v1226))
  {
    *(_QWORD *)&v1252 = v7;
    v95 = *(unsigned __int8 *)(v9 + 16);
    if (v95 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 16
        || !sub_1C4FA4864((uint64_t)&data, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF))))
      {
        goto LABEL_165;
      }
      v96 = *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
    }
    else
    {
      if (v95 != 44 || !sub_1C4E7BA90((uint64_t)&data, *(llvm::Constant **)(v9 - 64)))
        goto LABEL_165;
      v96 = *(_QWORD *)(v9 - 32);
    }
    if ((_QWORD)v1252 == v96 && (v1225 & 0xFFFFFFF7) == 2)
      goto LABEL_263;
  }
LABEL_165:
  *(_QWORD *)v1239 = &v1225;
  *(_QWORD *)&v1239[8] = v9;
  if (sub_1C5843BC0((uint64_t)v1239, (uint64_t)v1226))
  {
    data = (int8x8_t)v9;
    if (sub_1C4E7BD14(&data, v7)
      && (*((_BYTE *)a2 + 17) & 0x10) != 0
      && (v1225 <= 0xC && ((1 << v1225) & 0x1030) != 0 || v1225 == 13))
    {
      goto LABEL_248;
    }
  }
  *(_QWORD *)v1239 = &v1225;
  *(_QWORD *)&v1239[8] = v7;
  if (sub_1C5843BC0((uint64_t)v1239, (uint64_t)v1226))
  {
    data = (int8x8_t)v7;
    if (sub_1C4E7BD14(&data, v9)
      && (*((_BYTE *)a2 + 17) & 0x10) != 0
      && (v1225 <= 0xA && ((1 << v1225) & 0x40C) != 0 || v1225 == 11))
    {
LABEL_263:
      v138 = *(uint64_t **)(a1 + 24);
      *(_WORD *)&v1239[32] = 257;
      v139 = (uint64_t *)v7;
      goto LABEL_264;
    }
  }
  if (v1226)
  {
    if (*((_BYTE *)v1226 + 16) == 81)
    {
      BitOrPointerCast = (uint64_t)sub_1C5834A68((_QWORD *)a1, a2, (uint64_t ***)v1226);
      if (BitOrPointerCast)
        return (llvm::UndefValue **)BitOrPointerCast;
    }
  }
  v97 = (uint64_t)*v1222;
  v98 = (unsigned __int8 *)*v1224;
  v99 = *v1223;
  if (*(unsigned __int8 *)(*v1224 + 16) <= 0x1Bu)
    v100 = 0;
  else
    v100 = *v1224;
  if (*(unsigned __int8 *)(v99 + 16) <= 0x1Bu)
    v101 = 0;
  else
    v101 = *v1223;
  if (!v100)
    goto LABEL_184;
  if (!v101)
    goto LABEL_184;
  v102 = *(_QWORD *)(v100 + 8);
  if (!v102)
    goto LABEL_184;
  if (*(_QWORD *)(v102 + 8))
    goto LABEL_184;
  v168 = *(_QWORD *)(v101 + 8);
  if (!v168 || *(_QWORD *)(v168 + 8))
    goto LABEL_184;
  v169 = *(uint64_t **)(a1 + 24);
  v170 = *(unsigned __int8 *)(v100 + 16);
  if (v170 == 43)
  {
    v171 = *(unsigned __int8 *)(v101 + 16);
    v172 = *v1223;
    v173 = *v1224;
    if (v171 == 41)
      goto LABEL_453;
LABEL_437:
    if (v171 == 44)
    {
      v172 = *v1224;
      v173 = *v1223;
      if (v170 != 42)
        goto LABEL_184;
    }
    else
    {
      if (v171 != 43)
        goto LABEL_184;
      v172 = *v1224;
      v173 = *v1223;
      if (v170 != 41)
        goto LABEL_184;
    }
    goto LABEL_453;
  }
  if (v170 != 44)
  {
    v171 = *(unsigned __int8 *)(v101 + 16);
    goto LABEL_437;
  }
  v171 = *(unsigned __int8 *)(v101 + 16);
  v172 = *v1223;
  v173 = *v1224;
  if (v171 != 42)
    goto LABEL_437;
LABEL_453:
  v270 = *(_DWORD *)(v173 + 20);
  if ((v270 & 0x40000000) != 0)
    v271 = *(uint64_t **)(v173 - 8);
  else
    v271 = (uint64_t *)(v173 - 32 * (v270 & 0x7FFFFFF));
  v272 = *v271;
  v273 = *(_DWORD *)(v172 + 20);
  if ((v273 & 0x40000000) != 0)
    v274 = *(_QWORD **)(v172 - 8);
  else
    v274 = (_QWORD *)(v172 - 32 * (v273 & 0x7FFFFFF));
  if (v272 == *v274)
  {
    v276 = (uint64_t **)(v274 + 4);
  }
  else
  {
    if ((v270 & 0x40000000) != 0)
      v275 = *(uint64_t ***)(v173 - 8);
    else
      v275 = (uint64_t **)(v173 - 32 * (v270 & 0x7FFFFFF));
    v561 = *v275;
    if ((v273 & 0x40000000) != 0)
      v276 = *(uint64_t ***)(v172 - 8);
    else
      v276 = (uint64_t **)(v172 - 32 * (v273 & 0x7FFFFFF));
    if (v561 != v276[4])
      goto LABEL_184;
  }
  v562 = *v276;
  if (*v276)
  {
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
      v563 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
    else
      v563 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    if (v563 > 6)
    {
      if ((v270 & 0x40000000) != 0)
        v570 = *(_QWORD *)(v173 - 8);
      else
        v570 = v173 - 32 * (v270 & 0x7FFFFFF);
      v620 = *(_QWORD *)(v570 + 32);
      *(_WORD *)&v1239[32] = 257;
      v619 = sub_1C5346748((uint64_t)v169, v620, (uint64_t)v1239, 0, 0);
    }
    else
    {
      if ((v270 & 0x40000000) != 0)
        v569 = *(_QWORD *)(v173 - 8);
      else
        v569 = v173 - 32 * (v270 & 0x7FFFFFF);
      v618 = *(_QWORD *)(v569 + 32);
      *(_WORD *)&v1239[32] = 257;
      v619 = sub_1C4772890(v169, v618, (uint64_t)v1239, 0);
      if (v619 && v619[16] >= 0x1Cu)
        v619[17] |= *(_BYTE *)(v172 + 17) & *(_BYTE *)(v173 + 17) & 0xFE;
    }
    if (v172 == v100)
      v621 = (uint64_t)v619;
    else
      v621 = (uint64_t)v562;
    if (v172 == v100)
      v622 = v562;
    else
      v622 = (uint64_t *)v619;
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v657 = 0;
      v656 = &byte_1C871356D;
      goto LABEL_1179;
    }
    v623 = ***(_QWORD ***)a2;
    v624 = *(_QWORD *)(v623 + 152);
    v625 = *(unsigned int *)(v623 + 168);
    if ((_DWORD)v625)
    {
      LODWORD(v626) = (v625 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v627 = (llvm::Value **)(v624 + 16 * v626);
      v628 = *v627;
      if (*v627 == a2)
      {
LABEL_1178:
        v655 = v627[1];
        v658 = *(_QWORD *)v655;
        v656 = (char *)v655 + 16;
        v657 = v658;
LABEL_1179:
        *(_WORD *)&v1239[32] = 773;
        *(_QWORD *)v1239 = v656;
        *(_QWORD *)&v1239[8] = v657;
        *(_QWORD *)&v1239[16] = ".p";
        v659 = llvm::IRBuilderBase::CreateSelect(v169, v97, v622, v621, (uint64_t)v1239, (unsigned __int8 *)a2);
        if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
          v660 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
        else
          v660 = *(_DWORD *)(*(_QWORD *)a2 + 8);
        v661 = *(_DWORD *)(v173 + 20);
        if (v660 <= 6)
        {
          if ((v661 & 0x40000000) != 0)
            v662 = *(_QWORD ***)(v173 - 8);
          else
            v662 = (_QWORD **)(v173 - 32 * (v661 & 0x7FFFFFF));
          v664 = *v662;
          *(_WORD *)&v1239[32] = 257;
          v665 = (char *)operator new(0x80uLL);
          v666 = v665;
          *((_QWORD *)v665 + 5) = 0;
          v667 = v665 + 40;
          *((_QWORD *)v665 + 6) = 0;
          *((_QWORD *)v665 + 8) = *v664;
          BitOrPointerCast = (uint64_t)(v665 + 64);
          *((_QWORD *)v665 + 3) = v665 + 64;
          *((_QWORD *)v665 + 7) = v665 + 64;
          *((_QWORD *)v665 + 9) = 0;
          v665[80] = 42;
          v665[81] = 0;
          *((_WORD *)v665 + 41) = 0;
          *((_DWORD *)v665 + 21) = 2;
          *(_OWORD *)(v665 + 88) = 0u;
          *(_OWORD *)(v665 + 104) = 0u;
          *((_DWORD *)v665 + 30) = 0;
          *(_QWORD *)v665 = v664;
          v670 = v664[1];
          v669 = v664 + 1;
          v668 = v670;
          *((_QWORD *)v665 + 1) = v670;
          if (v670)
            *(_QWORD *)(v668 + 16) = v665 + 8;
          *((_QWORD *)v665 + 2) = v669;
          *v669 = v665;
          *((_QWORD *)v665 + 4) = v659;
          if (v659)
          {
            v673 = *((_QWORD *)v659 + 1);
            v672 = (_QWORD *)((char *)v659 + 8);
            v671 = v673;
            *v667 = v673;
            if (v673)
              *(_QWORD *)(v671 + 16) = v667;
            *((_QWORD *)v665 + 6) = v672;
            *v672 = v665 + 32;
          }
          llvm::Value::setName((uint64_t ***)v665 + 8, (uint64_t)v1239);
          v666[81] |= *(_BYTE *)(v172 + 17) & *(_BYTE *)(v173 + 17) & 0xFE;
          return (llvm::UndefValue **)BitOrPointerCast;
        }
        if ((v661 & 0x40000000) != 0)
          v663 = *(_QWORD ***)(v173 - 8);
        else
          v663 = (_QWORD **)(v173 - 32 * (v661 & 0x7FFFFFF));
        v674 = *v663;
        *(_WORD *)&v1239[32] = 257;
        v675 = (char *)operator new(0x80uLL);
        *((_QWORD *)v675 + 5) = 0;
        v676 = v675 + 40;
        *((_QWORD *)v675 + 6) = 0;
        *((_QWORD *)v675 + 8) = *v674;
        BitOrPointerCast = (uint64_t)(v675 + 64);
        *((_QWORD *)v675 + 3) = v675 + 64;
        *((_QWORD *)v675 + 7) = v675 + 64;
        *((_QWORD *)v675 + 9) = 0;
        v675[80] = 41;
        v675[81] = 0;
        *((_WORD *)v675 + 41) = 0;
        *((_DWORD *)v675 + 21) = 2;
        *(_OWORD *)(v675 + 88) = 0u;
        *(_OWORD *)(v675 + 104) = 0u;
        *((_DWORD *)v675 + 30) = 0;
        *(_QWORD *)v675 = v674;
        v679 = v674[1];
        v678 = v674 + 1;
        v677 = v679;
        *((_QWORD *)v675 + 1) = v679;
        if (v679)
          *(_QWORD *)(v677 + 16) = v675 + 8;
        *((_QWORD *)v675 + 2) = v678;
        *v678 = v675;
        *((_QWORD *)v675 + 4) = v659;
        if (v659)
        {
          v682 = *((_QWORD *)v659 + 1);
          v681 = (_QWORD *)((char *)v659 + 8);
          v680 = v682;
          *v676 = v682;
          if (v682)
            *(_QWORD *)(v680 + 16) = v676;
          *((_QWORD *)v675 + 6) = v681;
          *v681 = v675 + 32;
        }
        goto LABEL_328;
      }
      v629 = 1;
      while (v628 != (llvm::Value *)-4096)
      {
        v630 = v626 + v629++;
        v626 = v630 & (v625 - 1);
        v628 = *(llvm::Value **)(v624 + 16 * v626);
        if (v628 == a2)
        {
          v627 = (llvm::Value **)(v624 + 16 * v626);
          goto LABEL_1178;
        }
      }
    }
    v627 = (llvm::Value **)(v624 + 16 * v625);
    goto LABEL_1178;
  }
LABEL_184:
  if (v97)
  {
    if (*(_BYTE *)(v97 + 16) == 92 && *(_DWORD *)(v97 + 72) == 1 && **(_DWORD **)(v97 + 64) == 1)
    {
      v103 = *(_QWORD *)(v97 - 32);
      v104 = sub_1C4E8FD48(v103);
      if (v103)
      {
        if (v104
          && *(_BYTE *)(v99 + 16) == 92
          && *(_DWORD *)(v99 + 72) == 1
          && !**(_DWORD **)(v99 + 64)
          && v103 == *(_QWORD *)(v99 - 32))
        {
          v579 = v103 - 32 * (*(_DWORD *)(v103 + 20) & 0x7FFFFFF);
          v1242 = *(_QWORD **)v579;
          *(_QWORD *)&v1249 = *(_QWORD *)(v579 + 32);
          data = (int8x8_t)&v1242;
          *(_QWORD *)&v1252 = &v1249;
          v580 = *(_DWORD *)(*(_QWORD *)(v103 - 32) + 36);
          if (v580 == 301)
          {
            if ((sub_1C4D9ED34((uint64_t)v1239, (llvm::Constant *)v98) & 1) != 0)
            {
              v581 = 300;
              goto LABEL_1867;
            }
            v580 = *(_DWORD *)(*(_QWORD *)(v103 - 32) + 36);
          }
          if (v580 == 312)
          {
            if (v98[16] > 0x14u)
              goto LABEL_194;
            if ((llvm::Constant::isNullValue((llvm::Constant *)v98) & 1) != 0
              || (sub_1C4E71060((uint64_t)v1239, (llvm::Constant *)v98) & 1) != 0)
            {
              v581 = 311;
              goto LABEL_1867;
            }
            v580 = *(_DWORD *)(*(_QWORD *)(v103 - 32) + 36);
          }
          if (v580 == 263)
          {
            if (sub_1C5842B74((uint64_t **)&data, (uint64_t *)v98, 1))
            {
              v581 = 262;
              goto LABEL_1867;
            }
            v580 = *(_DWORD *)(*(_QWORD *)(v103 - 32) + 36);
          }
          if (v580 != 284 || !sub_1C5842B74((uint64_t **)&data, (uint64_t *)v98, 0))
            goto LABEL_194;
          v581 = 283;
LABEL_1867:
          v1055 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
          *(_QWORD *)v1239 = *(_QWORD *)a2;
          v1056 = llvm::Intrinsic::getDeclaration(v1055, v581, (uint64_t *)v1239, 1);
          v803 = v1056;
          if (v1056)
            v804 = *(uint64_t ***)(v1056 + 24);
          else
            v804 = 0;
          v1246.__r_.__value_.__r.__words[0] = (std::string::size_type)v1242;
          v1246.__r_.__value_.__l.__size_ = v1249;
          *(_WORD *)&v1239[32] = 257;
          v1057 = (char *)operator new(0xB0uLL);
          v1058 = 0;
          BitOrPointerCast = (uint64_t)(v1057 + 96);
          *((_DWORD *)v1057 + 29) = *((_DWORD *)v1057 + 29) & 0x38000000 | 3;
          do
          {
            v1059 = &v1057[v1058];
            *(_QWORD *)v1059 = 0;
            *((_QWORD *)v1059 + 1) = 0;
            *((_QWORD *)v1059 + 2) = 0;
            *((_QWORD *)v1059 + 3) = BitOrPointerCast;
            v1058 += 32;
          }
          while (v1058 != 96);
LABEL_1872:
          *((_QWORD *)v1057 + 12) = *v804[2];
          *((_QWORD *)v1057 + 13) = 0;
          v1057[112] = 84;
          v1057[113] = 0;
          *((_WORD *)v1057 + 57) = 0;
          *((_DWORD *)v1057 + 29) = *((_DWORD *)v1057 + 29) & 0xC0000000 | 3;
          *(_OWORD *)(v1057 + 120) = 0u;
          *(_OWORD *)(v1057 + 136) = 0u;
          *((_DWORD *)v1057 + 38) = 0;
          *((_QWORD *)v1057 + 20) = 0;
          p_data = &v1246;
          v1061 = (uint64_t ***)BitOrPointerCast;
          v1062 = v804;
          v1063 = v803;
          v1064 = 2;
LABEL_1873:
          llvm::CallInst::init(v1061, v1062, v1063, (uint64_t *)p_data, v1064, 0, 0, (uint64_t)v1239);
          return (llvm::UndefValue **)BitOrPointerCast;
        }
      }
    }
  }
LABEL_194:
  v105 = *(uint64_t **)(a1 + 24);
  v106 = *((_QWORD *)a2 - 12);
  v107 = *((_QWORD *)a2 - 8);
  v108 = *((_QWORD *)a2 - 4);
  v109 = *(llvm::Constant **)a2;
  __dst.__r_.__value_.__r.__words[0] = 0;
  v1235[0] = 0;
  *(_QWORD *)v1239 = &v1249;
  *(_QWORD *)&v1239[8] = &__dst;
  *(_QWORD *)&v1239[16] = 0;
  v110 = *(unsigned __int8 *)(v107 + 16);
  if (v110 == 5)
  {
    if (*(_WORD *)(v107 + 18) != 28)
      goto LABEL_204;
    v111 = v107 - 32 * (*(_DWORD *)(v107 + 20) & 0x7FFFFFF);
    if (!*(_QWORD *)v111)
      goto LABEL_204;
    *(_QWORD *)&v1249 = *(_QWORD *)v111;
    if ((sub_1C4D8A004((uint64_t)&v1239[8], *(llvm::Constant **)(v111 + 32)) & 1) == 0)
      goto LABEL_204;
  }
  else
  {
    if (v110 != 56)
      goto LABEL_204;
    if (!*(_QWORD *)(v107 - 64))
      goto LABEL_204;
    *(_QWORD *)&v1249 = *(_QWORD *)(v107 - 64);
    if (!sub_1C4D89F84((uint64_t)&v1239[8], *(unsigned __int8 **)(v107 - 32)))
      goto LABEL_204;
  }
  data = (int8x8_t)v1249;
  *(_QWORD *)&v1252 = v1235;
  *((_QWORD *)&v1252 + 1) = 0;
  v112 = *(_QWORD *)(v108 + 8);
  if (v112 && !*(_QWORD *)(v112 + 8))
  {
    v188 = *(unsigned __int8 *)(v108 + 16);
    if (v188 == 5)
    {
      if (*(_WORD *)(v108 + 18) != 29)
        goto LABEL_204;
      v246 = v108 - 32 * (*(_DWORD *)(v108 + 20) & 0x7FFFFFF);
      if ((_QWORD)v1249 != *(_QWORD *)v246
        || !sub_1C4D8A004((uint64_t)&v1252, *(llvm::Constant **)(v246 + 32)))
      {
        goto LABEL_204;
      }
    }
    else if (v188 != 57
           || (_QWORD)v1249 != *(_QWORD *)(v108 - 64)
           || (sub_1C4D89F84((uint64_t)&v1252, *(unsigned __int8 **)(v108 - 32)) & 1) == 0)
    {
      goto LABEL_204;
    }
    v247 = __dst.__r_.__value_.__r.__words[0];
    v248 = (const void **)v1235[0];
    v249 = *((unsigned int *)v1235[0] + 2);
    LODWORD(v1246.__r_.__value_.__r.__words[1]) = v249;
    if (v249 > 0x40)
    {
      v582 = __dst.__r_.__value_.__r.__words[0];
      v1246.__r_.__value_.__r.__words[0] = operator new[]();
      memcpy(v1246.__r_.__value_.__l.__data_, *v248, ((unint64_t)(v249 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1246);
      v247 = v582;
      LODWORD(v249) = v1246.__r_.__value_.__r.__words[1];
      v252 = (const void *)v1246.__r_.__value_.__r.__words[0];
    }
    else
    {
      v250 = ~*(_QWORD *)v1235[0];
      if ((_DWORD)v249)
        v251 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v249;
      else
        v251 = 0;
      v252 = (const void *)(v251 & v250);
      v1246.__r_.__value_.__r.__words[0] = v251 & v250;
    }
    LODWORD(v1246.__r_.__value_.__r.__words[1]) = 0;
    v583 = *(unsigned int *)(v247 + 8);
    if (v583 > 0x40)
      v584 = memcmp(*(const void **)v247, v252, ((unint64_t)(v583 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v584 = *(_QWORD *)v247 == (_QWORD)v252;
    v585 = v584;
    if (v249 >= 0x41 && v252)
    {
      v586 = v585;
      MEMORY[0x1CAA32F9C](v252, 0x1000C8000313F17);
      v585 = v586;
    }
    if (v585)
    {
      NullValue = (uint64_t *)llvm::Constant::getNullValue(v109, v189);
      v589 = llvm::ConstantInt::get((llvm::ConstantInt **)v109, v1235[0], v588);
      *(_QWORD *)v1239 = "masksel";
      *(_WORD *)&v1239[32] = 259;
      v590 = llvm::IRBuilderBase::CreateSelect(v105, v106, NullValue, (uint64_t)v589, (uint64_t)v1239, (unsigned __int8 *)a2);
      *(_WORD *)&v1239[32] = 257;
      v591 = (char *)operator new(0x80uLL);
      *((_QWORD *)v591 + 5) = 0;
      v592 = v591 + 40;
      *((_QWORD *)v591 + 6) = 0;
      *((_QWORD *)v591 + 8) = *(_QWORD *)v107;
      BitOrPointerCast = (uint64_t)(v591 + 64);
      *((_QWORD *)v591 + 3) = v591 + 64;
      *((_QWORD *)v591 + 7) = v591 + 64;
      *((_QWORD *)v591 + 9) = 0;
      v591[80] = 57;
      v591[81] = 0;
      *((_WORD *)v591 + 41) = 0;
      *((_DWORD *)v591 + 21) = 2;
      *(_OWORD *)(v591 + 88) = 0u;
      *(_OWORD *)(v591 + 104) = 0u;
      *((_DWORD *)v591 + 30) = 0;
      *(_QWORD *)v591 = v107;
      v595 = *(_QWORD *)(v107 + 8);
      v594 = (_QWORD *)(v107 + 8);
      v593 = v595;
      *((_QWORD *)v591 + 1) = v595;
      if (v595)
        *(_QWORD *)(v593 + 16) = v591 + 8;
      *((_QWORD *)v591 + 2) = v594;
      *v594 = v591;
      goto LABEL_1073;
    }
  }
LABEL_204:
  *(_QWORD *)v1239 = &v1249;
  *(_QWORD *)&v1239[8] = &__dst;
  *(_QWORD *)&v1239[16] = 0;
  v113 = *(unsigned __int8 *)(v108 + 16);
  if (v113 == 5)
  {
    if (*(_WORD *)(v108 + 18) != 28)
      goto LABEL_214;
    v114 = v108 - 32 * (*(_DWORD *)(v108 + 20) & 0x7FFFFFF);
    if (!*(_QWORD *)v114)
      goto LABEL_214;
    *(_QWORD *)&v1249 = *(_QWORD *)v114;
    if ((sub_1C4D8A004((uint64_t)&v1239[8], *(llvm::Constant **)(v114 + 32)) & 1) == 0)
      goto LABEL_214;
  }
  else
  {
    if (v113 != 56)
      goto LABEL_214;
    if (!*(_QWORD *)(v108 - 64))
      goto LABEL_214;
    *(_QWORD *)&v1249 = *(_QWORD *)(v108 - 64);
    if (!sub_1C4D89F84((uint64_t)&v1239[8], *(unsigned __int8 **)(v108 - 32)))
      goto LABEL_214;
  }
  data = (int8x8_t)v1249;
  *(_QWORD *)&v1252 = v1235;
  *((_QWORD *)&v1252 + 1) = 0;
  v115 = *(_QWORD *)(v107 + 8);
  if (v115 && !*(_QWORD *)(v115 + 8))
  {
    v190 = *(unsigned __int8 *)(v107 + 16);
    if (v190 == 5)
    {
      if (*(_WORD *)(v107 + 18) != 29)
        goto LABEL_214;
      v253 = v107 - 32 * (*(_DWORD *)(v107 + 20) & 0x7FFFFFF);
      if ((_QWORD)v1249 != *(_QWORD *)v253
        || !sub_1C4D8A004((uint64_t)&v1252, *(llvm::Constant **)(v253 + 32)))
      {
        goto LABEL_214;
      }
    }
    else if (v190 != 57
           || (_QWORD)v1249 != *(_QWORD *)(v107 - 64)
           || (sub_1C4D89F84((uint64_t)&v1252, *(unsigned __int8 **)(v107 - 32)) & 1) == 0)
    {
      goto LABEL_214;
    }
    v254 = __dst.__r_.__value_.__r.__words[0];
    v255 = (const void **)v1235[0];
    v256 = *((unsigned int *)v1235[0] + 2);
    LODWORD(v1243) = v256;
    if (v256 > 0x40)
    {
      v1242 = (_QWORD *)operator new[]();
      memcpy(v1242, *v255, ((unint64_t)(v256 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1242);
      LODWORD(v256) = v1243;
      v259 = v1242;
    }
    else
    {
      v257 = ~*(_QWORD *)v1235[0];
      if ((_DWORD)v256)
        v258 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v256;
      else
        v258 = 0;
      v259 = (_QWORD *)(v258 & v257);
      v1242 = (_QWORD *)(v258 & v257);
    }
    LODWORD(v1243) = 0;
    v596 = *(unsigned int *)(v254 + 8);
    if (v596 > 0x40)
      v597 = memcmp(*(const void **)v254, v259, ((unint64_t)(v596 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v597 = *(_QWORD *)v254 == (_QWORD)v259;
    v598 = v597;
    if (v256 >= 0x41 && v259)
      MEMORY[0x1CAA32F9C](v259, 0x1000C8000313F17);
    if (v598)
    {
      v599 = llvm::Constant::getNullValue(v109, v191);
      v601 = (uint64_t *)llvm::ConstantInt::get((llvm::ConstantInt **)v109, v1235[0], v600);
      *(_QWORD *)v1239 = "masksel";
      *(_WORD *)&v1239[32] = 259;
      v590 = llvm::IRBuilderBase::CreateSelect(v105, v106, v601, (uint64_t)v599, (uint64_t)v1239, (unsigned __int8 *)a2);
      *(_WORD *)&v1239[32] = 257;
      v591 = (char *)operator new(0x80uLL);
      *((_QWORD *)v591 + 5) = 0;
      v592 = v591 + 40;
      *((_QWORD *)v591 + 6) = 0;
      *((_QWORD *)v591 + 8) = *(_QWORD *)v108;
      BitOrPointerCast = (uint64_t)(v591 + 64);
      *((_QWORD *)v591 + 3) = v591 + 64;
      *((_QWORD *)v591 + 7) = v591 + 64;
      *((_QWORD *)v591 + 9) = 0;
      v591[80] = 57;
      v591[81] = 0;
      *((_WORD *)v591 + 41) = 0;
      *((_DWORD *)v591 + 21) = 2;
      *(_OWORD *)(v591 + 88) = 0u;
      *(_OWORD *)(v591 + 104) = 0u;
      *((_DWORD *)v591 + 30) = 0;
      *(_QWORD *)v591 = v108;
      v604 = *(_QWORD *)(v108 + 8);
      v603 = (_QWORD *)(v108 + 8);
      v602 = v604;
      *((_QWORD *)v591 + 1) = v604;
      if (v604)
        *(_QWORD *)(v602 + 16) = v591 + 8;
      *((_QWORD *)v591 + 2) = v603;
      *v603 = v591;
LABEL_1073:
      *((_QWORD *)v591 + 4) = v590;
      if (v590)
      {
        v607 = *((_QWORD *)v590 + 1);
        v606 = (_QWORD *)((char *)v590 + 8);
        v605 = v607;
        *v592 = v607;
        if (v607)
          *(_QWORD *)(v605 + 16) = v592;
        *((_QWORD *)v591 + 6) = v606;
        *v606 = v591 + 32;
      }
LABEL_328:
      v185 = (int8x8_t *)v1239;
LABEL_329:
      llvm::Value::setName((uint64_t ***)BitOrPointerCast, (uint64_t)v185);
      return (llvm::UndefValue **)BitOrPointerCast;
    }
  }
LABEL_214:
  v116 = (uint64_t)*v1222;
  v117 = *v1224;
  v118 = *v1223;
  v1246.__r_.__value_.__r.__words[0] = 0;
  LODWORD(v1242) = 0;
  *(_QWORD *)v1239 = &v1242;
  *(_QWORD *)&v1239[8] = &v1246;
  if (sub_1C4EF292C((uint64_t)v1239, v116) && (v1242 & 0xFFFFFFFE) == 0x20)
  {
    v120 = (_DWORD)v1242 == 33 ? v117 : v118;
    v121 = (unsigned __int8 *)((_DWORD)v1242 == 33 ? v118 : v117);
    if (v121 && v121[16] <= 0x14u && *(_BYTE *)(v120 + 16) == 45)
    {
      if ((v122 = *(_QWORD *)(v120 - 64), v123 = *(uint64_t ****)(v120 - 32), v1246.__r_.__value_.__r.__words[0] == v122)
        && v123
        || v122 && (v22 = v1246.__r_.__value_.__r.__words[0] == (_QWORD)v123, v123 = *(uint64_t ****)(v120 - 64), v22))
      {
        v213 = *(_DWORD *)(v116 + 20);
        v214 = (v213 & 0x40000000) != 0 ? *(_QWORD *)(v116 - 8) : v116 - 32 * (v213 & 0x7FFFFFF);
        if ((v215 = llvm::Constant::mergeUndefsWith((llvm::Constant *)v121, *(llvm::Constant **)(v214 + 32), v119),
              (v216 = v215) != 0)
          && ((llvm::Constant::isNullValue(v215) & 1) != 0 || (sub_1C4E71060((uint64_t)v1239, v216) & 1) != 0)
          || (sub_1C4E7B480((uint64_t)v216) & 1) != 0)
        {
          v217 = operator new(0x60uLL);
          v218 = v217;
          v219 = (llvm::Value *)(v217 + 8);
          v217[13] = v217[13] & 0x38000000 | 1;
          *(_QWORD *)v217 = 0;
          *((_QWORD *)v217 + 1) = 0;
          *((_QWORD *)v217 + 2) = 0;
          *((_QWORD *)v217 + 3) = v217 + 8;
          if ((*((_BYTE *)v123 + 23) & 0x10) == 0)
          {
            v279 = 0;
            v278 = &byte_1C871356D;
            goto LABEL_465;
          }
          v220 = ***v123;
          v221 = *(_QWORD *)(v220 + 152);
          v222 = *(unsigned int *)(v220 + 168);
          if ((_DWORD)v222)
          {
            LODWORD(v223) = (v222 - 1) & ((v123 >> 4) ^ (v123 >> 9));
            v224 = (uint64_t ****)(v221 + 16 * v223);
            v225 = *v224;
            if (*v224 == v123)
            {
LABEL_464:
              v277 = v224[1];
              v280 = *v277;
              v278 = (char *)(v277 + 2);
              v279 = v280;
LABEL_465:
              *(_WORD *)&v1239[32] = 773;
              *(_QWORD *)v1239 = v278;
              *(_QWORD *)&v1239[8] = v279;
              *(_QWORD *)&v1239[16] = ".fr";
              llvm::FreezeInst::FreezeInst((uint64_t)(v217 + 8), v123, (uint64_t)v1239, 0);
              v281 = *(_QWORD *)(v120 + 40);
              v282 = (uint64_t *)(v120 + 24);
              *((_QWORD *)v218 + 9) = v281;
              *(_WORD *)(v281 + 18) &= ~0x8000u;
              if ((*((_BYTE *)v218 + 55) & 0x10) != 0)
              {
                v615 = *(_QWORD *)(v281 + 56);
                if (v615)
                {
                  v616 = *(llvm::ValueSymbolTable **)(v615 + 104);
                  if (v616)
                    llvm::ValueSymbolTable::reinsertValue(v616, v219);
                }
              }
              v283 = *v282;
              *((_QWORD *)v218 + 7) = *v282;
              *((_QWORD *)v218 + 8) = v282;
              v284 = v218 + 14;
              *(_QWORD *)(v283 + 8) = v284;
              *v282 = (uint64_t)v284;
              v285 = *(_QWORD *)(a1 + 32);
              data = (int8x8_t)v219;
              if ((*(_BYTE *)(v285 + 2088) & 1) != 0)
              {
                v287 = v285 + 2096;
                v286 = 16;
              }
              else
              {
                v286 = *(_DWORD *)(v285 + 2104);
                if (!v286)
                {
                  v296 = 0;
                  goto LABEL_482;
                }
                v287 = *(_QWORD *)(v285 + 2096);
              }
              v288 = v286 - 1;
              v289 = v288 & ((v219 >> 4) ^ (v219 >> 9));
              v290 = (llvm::Value **)(v287 + 8 * v289);
              v291 = *v290;
              if (v219 == *v290)
                goto LABEL_485;
              v292 = 0;
              v293 = 1;
              while (v291 != (llvm::Value *)-4096)
              {
                if (v292)
                  v294 = 0;
                else
                  v294 = v291 == (llvm::Value *)-8192;
                if (v294)
                  v292 = v290;
                v295 = v289 + v293++;
                v289 = v295 & v288;
                v290 = (llvm::Value **)(v287 + 8 * v289);
                v291 = *v290;
                if (v219 == *v290)
                  goto LABEL_485;
              }
              if (v292)
                v296 = v292;
              else
                v296 = v290;
LABEL_482:
              v297 = (int8x8_t *)sub_1C4E08FFC(v285 + 2088, (uint64_t)&data, &data, v296);
              *v297 = data;
              v298 = data;
              v299 = *(unsigned int *)(v285 + 2232);
              if (v299 >= *(_DWORD *)(v285 + 2236))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v285 + 2224, v285 + 2240, v299 + 1, 8);
                LODWORD(v299) = *(_DWORD *)(v285 + 2232);
              }
              *(int8x8_t *)(*(_QWORD *)(v285 + 2224) + 8 * v299) = v298;
              ++*(_DWORD *)(v285 + 2232);
LABEL_485:
              v300 = *(_DWORD *)(v120 + 20);
              if ((v300 & 0x40000000) != 0)
                v301 = *(uint64_t *****)(v120 - 8);
              else
                v301 = (uint64_t ****)(v120 - 32 * (v300 & 0x7FFFFFF));
              sub_1C577E2C8(a1, v120, *v301 != v123, (uint64_t)v219);
              BitOrPointerCast = (uint64_t)sub_1C577F888(a1, a2, (llvm::Value *)v120);
              if (BitOrPointerCast)
                return (llvm::UndefValue **)BitOrPointerCast;
              goto LABEL_489;
            }
            v226 = 1;
            while (v225 != (uint64_t ***)-4096)
            {
              v227 = v223 + v226++;
              v223 = v227 & (v222 - 1);
              v225 = *(uint64_t ****)(v221 + 16 * v223);
              if (v225 == v123)
              {
                v224 = (uint64_t ****)(v221 + 16 * v223);
                goto LABEL_464;
              }
            }
          }
          v224 = (uint64_t ****)(v221 + 16 * v222);
          goto LABEL_464;
        }
      }
    }
  }
LABEL_489:
  if (*((unsigned __int8 *)v1221 + 16) <= 0x1Bu)
    v302 = 0;
  else
    v302 = (uint64_t)v1221;
  if (*((unsigned __int8 *)v1219 + 16) <= 0x1Bu)
    v303 = 0;
  else
    v303 = (uint64_t)v1219;
  if (v302 && v303 && *(unsigned __int8 *)(v302 + 16) == *(unsigned __int8 *)(v303 + 16))
  {
    v304 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
    if (*(char *)(v304 + 239) < 0)
      sub_1C47EBC30(&v1246, *(void **)(v304 + 216), *(_QWORD *)(v304 + 224));
    else
      v1246 = *(std::string *)(v304 + 216);
    if (!std::string::compare(&v1246, 0, 4uLL, "agx1"))
    {
      v305 = 27;
    }
    else if (!std::string::compare(&v1246, 0, 4uLL, "agx2"))
    {
      v305 = 28;
    }
    else if (!std::string::compare(&v1246, 0, 4uLL, "agx3"))
    {
      v305 = 29;
    }
    else
    {
      v305 = 0;
    }
    if (SHIBYTE(v1246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1246.__r_.__value_.__l.__data_);
    if ((v305 - 27) > 2
      || (v306 = *(_QWORD ***)(v302 + 40), v306 == *((_QWORD ***)a2 + 5)) && *(_QWORD ***)(v303 + 40) == v306)
    {
      v307 = *((unsigned __int8 *)a2 + 16);
      if (v307 != 84
        || (v308 = *v1223) == 0
        || *(_BYTE *)(v308 + 16)
        || *(_QWORD *)(v308 + 24) != *((_QWORD *)a2 + 9)
        || (*(_BYTE *)(v308 + 33) & 0x20) == 0
        || *(_DWORD *)(v308 + 36) != 275)
      {
        BitOrPointerCast = (uint64_t)*v1222;
        if (*v1222)
          v309 = *(_BYTE *)(*(_QWORD *)v1222 + 16) == 81;
        else
          v309 = 0;
        v310 = !v309;
        if (v309)
        {
          if ((v311 = *v1224,
                v312 = *v1223,
                v313 = *(_QWORD *)(BitOrPointerCast - 64),
                v314 = *(_QWORD *)(BitOrPointerCast - 32),
                *v1224 == v313)
            && v312 == v314
            || v311 == v314 && v312 == v313)
          {
            v315 = *(_WORD *)(BitOrPointerCast + 18) & 0x3E;
            if (v311 == v313)
            {
              if (v315 == 40)
                goto LABEL_613;
            }
            else if (v315 == 38)
            {
              goto LABEL_613;
            }
          }
        }
        if (v307 != 84
          || (v316 = *v1223) == 0
          || *(_BYTE *)(v316 + 16)
          || *(_QWORD *)(v316 + 24) != *((_QWORD *)a2 + 9)
          || (*(_BYTE *)(v316 + 33) & 0x20) == 0
          || *(_DWORD *)(v316 + 36) != 274)
        {
          if ((v310 & 1) == 0)
          {
            if ((v317 = *v1224,
                  v318 = *v1223,
                  v319 = *(_QWORD *)(BitOrPointerCast - 64),
                  v320 = *(_QWORD *)(BitOrPointerCast - 32),
                  *v1224 == v319)
              && v318 == v320
              || v317 == v320 && v318 == v319)
            {
              v321 = *(_WORD *)(BitOrPointerCast + 18) & 0x3E;
              if (v317 == v319)
              {
                if (v321 == 38)
                  goto LABEL_613;
              }
              else if (v321 == 40)
              {
                goto LABEL_613;
              }
            }
          }
          if (v307 != 84
            || (v322 = *v1223) == 0
            || *(_BYTE *)(v322 + 16)
            || *(_QWORD *)(v322 + 24) != *((_QWORD *)a2 + 9)
            || (*(_BYTE *)(v322 + 33) & 0x20) == 0
            || *(_DWORD *)(v322 + 36) != 306)
          {
            if ((v310 & 1) == 0)
            {
              if ((v323 = *v1224,
                    v324 = *v1223,
                    v325 = *(_QWORD *)(BitOrPointerCast - 64),
                    v326 = *(_QWORD *)(BitOrPointerCast - 32),
                    *v1224 == v325)
                && v324 == v326
                || v323 == v326 && v324 == v325)
              {
                v327 = *(_WORD *)(BitOrPointerCast + 18) & 0x3E;
                if (v323 == v325)
                {
                  if (v327 == 36)
                    goto LABEL_613;
                }
                else if (v327 == 34)
                {
                  goto LABEL_613;
                }
              }
            }
            if (v307 != 84
              || (v328 = *v1223) == 0
              || *(_BYTE *)(v328 + 16)
              || *(_QWORD *)(v328 + 24) != *((_QWORD *)a2 + 9)
              || (*(_BYTE *)(v328 + 33) & 0x20) == 0
              || *(_DWORD *)(v328 + 36) != 305)
            {
              if ((v310 & 1) == 0)
              {
                if ((v329 = *v1224,
                      v330 = *v1223,
                      v331 = *(_QWORD *)(BitOrPointerCast - 64),
                      v332 = *(_QWORD *)(BitOrPointerCast - 32),
                      *v1224 == v331)
                  && v330 == v332
                  || v329 == v332 && v330 == v331)
                {
                  v333 = *(_WORD *)(BitOrPointerCast + 18) & 0x3E;
                  if (v329 == v331)
                  {
                    if (v333 == 34)
                      goto LABEL_613;
                  }
                  else if (v333 == 36)
                  {
                    goto LABEL_613;
                  }
                }
              }
              v334 = *(uint64_t ***)BitOrPointerCast;
              v335 = *(_DWORD *)(v302 + 20);
              if ((v335 & 0x7FFFFFF) == 1)
              {
                v336 = *(unsigned __int8 *)(v302 + 16);
                if ((v336 - 66) <= 0xC)
                {
                  v337 = *(_DWORD *)(v303 + 20);
                  if ((v337 & 0x40000000) != 0)
                    v338 = *(uint64_t ***)(v303 - 8);
                  else
                    v338 = (uint64_t **)(v303 - 32 * (v337 & 0x7FFFFFF));
                  v346 = **v338;
                  if ((v335 & 0x40000000) != 0)
                    v347 = *(_QWORD ***)(v302 - 8);
                  else
                    v347 = (_QWORD **)(v302 - 32);
                  if (**v347 != v346)
                    goto LABEL_613;
                  if (((_DWORD)v334[1] & 0xFE) != 0x12 || !v334)
                    goto LABEL_890;
                  if ((*(_DWORD *)(v346 + 8) & 0xFE) != 0x12
                    || (*((_DWORD *)v334 + 2) == 19) != (*(_DWORD *)(v346 + 8) == 19)
                    || *((_DWORD *)v334 + 8) != *(_DWORD *)(v346 + 32))
                  {
                    goto LABEL_613;
                  }
                  if (v336 != 77)
                  {
LABEL_890:
                    v507 = *(_QWORD *)(v302 + 8);
                    if (!v507)
                      goto LABEL_613;
                    if (*(_QWORD *)(v507 + 8))
                      goto LABEL_613;
                    v508 = *(_QWORD *)(v303 + 8);
                    if (!v508 || *(_QWORD *)(v508 + 8))
                      goto LABEL_613;
                  }
                  v509 = *(uint64_t **)(a1 + 24);
                  if ((v335 & 0x40000000) != 0)
                    v510 = *(uint64_t ***)(v302 - 8);
                  else
                    v510 = (uint64_t **)(v302 - 32);
                  v1000 = *v510;
                  if ((v337 & 0x40000000) != 0)
                    v1001 = *(uint64_t **)(v303 - 8);
                  else
                    v1001 = (uint64_t *)(v303 - 32 * (v337 & 0x7FFFFFF));
                  v1002 = *v1001;
                  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
                  {
                    v1045 = 0;
                    v1044 = &byte_1C871356D;
                    goto LABEL_1849;
                  }
                  v1003 = ***(_QWORD ***)a2;
                  v1004 = *(_QWORD *)(v1003 + 152);
                  v1005 = *(unsigned int *)(v1003 + 168);
                  if ((_DWORD)v1005)
                  {
                    LODWORD(v1006) = (v1005 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                    v1007 = (llvm::Value **)(v1004 + 16 * v1006);
                    v1008 = *v1007;
                    if (*v1007 == a2)
                    {
LABEL_1848:
                      v1043 = v1007[1];
                      v1046 = *(_QWORD *)v1043;
                      v1044 = (char *)v1043 + 16;
                      v1045 = v1046;
LABEL_1849:
                      *(_WORD *)&v1239[32] = 773;
                      *(_QWORD *)v1239 = v1044;
                      *(_QWORD *)&v1239[8] = v1045;
                      *(_QWORD *)&v1239[16] = ".v";
                      llvm::IRBuilderBase::CreateSelect(v509, BitOrPointerCast, v1000, v1002, (uint64_t)v1239, (unsigned __int8 *)a2);
                      v1047 = *(unsigned __int8 *)(v302 + 16) - 28;
                      *(_WORD *)&v1239[32] = 257;
                      llvm::CastInst::Create(v1047);
                      BitOrPointerCast = v1048;
                      goto LABEL_606;
                    }
                    v1009 = 1;
                    while (v1008 != (llvm::Value *)-4096)
                    {
                      v1010 = v1006 + v1009++;
                      v1006 = v1010 & (v1005 - 1);
                      v1008 = *(llvm::Value **)(v1004 + 16 * v1006);
                      if (v1008 == a2)
                      {
                        v1007 = (llvm::Value **)(v1004 + 16 * v1006);
                        goto LABEL_1848;
                      }
                    }
                  }
                  v1007 = (llvm::Value **)(v1004 + 16 * v1005);
                  goto LABEL_1848;
                }
              }
              v1242 = 0;
              *(_QWORD *)&v1249 = 0;
              *(_QWORD *)v1239 = &v1242;
              if (!sub_1C4E7B6EC((_QWORD **)v1239, v302)
                || (data = (int8x8_t)&v1249, !sub_1C4E7B6EC(&data, v303))
                || ((v339 = *(_QWORD *)(v302 + 8)) == 0 || *(_QWORD *)(v339 + 8))
                && ((v340 = *(_QWORD *)(v303 + 8)) == 0 || *(_QWORD *)(v340 + 8)))
              {
                if (*(_BYTE *)(v302 + 16) == 84
                  && (v341 = *(_QWORD *)(v302 - 32)) != 0
                  && !*(_BYTE *)(v341 + 16)
                  && *(_QWORD *)(v341 + 24) == *(_QWORD *)(v302 + 72))
                {
                  if ((*(_BYTE *)(v341 + 33) & 0x20) != 0)
                    v342 = v302;
                  else
                    v342 = 0;
                }
                else
                {
                  v342 = 0;
                }
                if (*(_BYTE *)(v303 + 16) == 84)
                {
                  v343 = *(_QWORD *)(v303 - 32);
                  if (v343)
                  {
                    if (!*(_BYTE *)(v343 + 16) && *(_QWORD *)(v343 + 24) == *(_QWORD *)(v303 + 72))
                    {
                      v571 = (*(_BYTE *)(v343 + 33) & 0x20) != 0 ? v303 : 0;
                      if (v342
                        && v571
                        && *(_DWORD *)(*(_QWORD *)(v342 - 32) + 36) == *(_DWORD *)(*(_QWORD *)(v571 - 32) + 36)
                        && ((v572 = *(_QWORD *)(v342 + 8)) != 0 && !*(_QWORD *)(v572 + 8)
                         || (v573 = *(_QWORD *)(v571 + 8)) != 0 && !*(_QWORD *)(v573 + 8)))
                      {
                        __dst.__r_.__value_.__r.__words[0] = 0;
                        v1235[0] = 0;
                        v1236 = 0;
                        v1237 = 0;
                        *(_QWORD *)v1239 = &__dst;
                        *(_QWORD *)&v1239[8] = v1235;
                        *(_QWORD *)&v1239[16] = &__dst;
                        *(_QWORD *)&v1239[24] = v1235;
                        *(_QWORD *)&v1239[32] = &__dst;
                        *(_QWORD *)&v1239[40] = v1235;
                        p_dst = (uint64_t)&__dst;
                        v1241[0] = v1235;
                        if (sub_1C584363C((_QWORD **)v1239, v342))
                        {
                          data = (int8x8_t)&v1237;
                          *(_QWORD *)&v1252 = &v1236;
                          *((_QWORD *)&v1252 + 1) = &v1237;
                          v1253 = (uint64_t)&v1236;
                          v1254 = (llvm *)&v1237;
                          v1255 = (uint64_t)&v1236;
                          v1256 = &v1237;
                          v1257 = &v1236;
                          if (sub_1C584363C(&data, v571))
                          {
                            if ((llvm::APInt *)__dst.__r_.__value_.__l.__data_ == v1237)
                            {
                              v1081 = *(uint64_t **)(a1 + 24);
                              *(_QWORD *)v1239 = "minmaxop";
                              *(_WORD *)&v1239[32] = 259;
                              v1082 = llvm::IRBuilderBase::CreateSelect(v1081, BitOrPointerCast, (uint64_t *)v1235[0], (uint64_t)v1236, (uint64_t)v1239, (unsigned __int8 *)a2);
                              v1083 = *(_QWORD *)(v342 - 32);
                              if (v1083 && !*(_BYTE *)(v1083 + 16))
                              {
                                v1120 = *(_QWORD *)(v1083 + 24);
                                v1121 = *(_QWORD *)(v342 + 72);
                                if (v1120 == v1121)
                                  v577 = *(_QWORD *)(v342 - 32);
                                else
                                  v577 = 0;
                                if (v1120 == v1121)
                                  v578 = *(uint64_t ***)(v1083 + 24);
                                else
                                  v578 = 0;
                              }
                              else
                              {
                                v577 = 0;
                                v578 = 0;
                              }
                              data = (int8x8_t)v1082;
                              *(_QWORD *)&v1252 = __dst.__r_.__value_.__r.__words[0];
                              *(_WORD *)&v1239[32] = 257;
                              v1122 = (char *)operator new(0xB0uLL);
                              v1123 = 0;
                              BitOrPointerCast = (uint64_t)(v1122 + 96);
                              *((_DWORD *)v1122 + 29) = *((_DWORD *)v1122 + 29) & 0x38000000 | 3;
                              do
                              {
                                v1124 = &v1122[v1123];
                                *(_QWORD *)v1124 = 0;
                                *((_QWORD *)v1124 + 1) = 0;
                                *((_QWORD *)v1124 + 2) = 0;
                                *((_QWORD *)v1124 + 3) = BitOrPointerCast;
                                v1123 += 32;
                              }
                              while (v1123 != 96);
                              goto LABEL_2103;
                            }
                            if ((uint64_t *)__dst.__r_.__value_.__l.__data_ == v1236)
                            {
                              v1098 = *(uint64_t **)(a1 + 24);
                              *(_QWORD *)v1239 = "minmaxop";
                              *(_WORD *)&v1239[32] = 259;
                              v1099 = llvm::IRBuilderBase::CreateSelect(v1098, BitOrPointerCast, (uint64_t *)v1235[0], (uint64_t)v1237, (uint64_t)v1239, (unsigned __int8 *)a2);
                              v1100 = *(_QWORD *)(v342 - 32);
                              if (v1100 && !*(_BYTE *)(v1100 + 16))
                              {
                                v1163 = *(_QWORD *)(v1100 + 24);
                                v1164 = *(_QWORD *)(v342 + 72);
                                if (v1163 == v1164)
                                  v577 = *(_QWORD *)(v342 - 32);
                                else
                                  v577 = 0;
                                if (v1163 == v1164)
                                  v578 = *(uint64_t ***)(v1100 + 24);
                                else
                                  v578 = 0;
                              }
                              else
                              {
                                v577 = 0;
                                v578 = 0;
                              }
                              data = (int8x8_t)v1099;
                              *(_QWORD *)&v1252 = __dst.__r_.__value_.__r.__words[0];
                              *(_WORD *)&v1239[32] = 257;
                              v1122 = (char *)operator new(0xB0uLL);
                              v1165 = 0;
                              BitOrPointerCast = (uint64_t)(v1122 + 96);
                              *((_DWORD *)v1122 + 29) = *((_DWORD *)v1122 + 29) & 0x38000000 | 3;
                              do
                              {
                                v1166 = &v1122[v1165];
                                *(_QWORD *)v1166 = 0;
                                *((_QWORD *)v1166 + 1) = 0;
                                *((_QWORD *)v1166 + 2) = 0;
                                *((_QWORD *)v1166 + 3) = BitOrPointerCast;
                                v1165 += 32;
                              }
                              while (v1165 != 96);
                              goto LABEL_2103;
                            }
                            if (v1235[0] == v1237)
                            {
                              v1117 = *(uint64_t **)(a1 + 24);
                              *(_QWORD *)v1239 = "minmaxop";
                              *(_WORD *)&v1239[32] = 259;
                              v1118 = llvm::IRBuilderBase::CreateSelect(v1117, BitOrPointerCast, (uint64_t *)__dst.__r_.__value_.__l.__data_, (uint64_t)v1236, (uint64_t)v1239, (unsigned __int8 *)a2);
                              v1119 = *(_QWORD *)(v342 - 32);
                              if (v1119 && !*(_BYTE *)(v1119 + 16))
                              {
                                v1181 = *(_QWORD *)(v1119 + 24);
                                v1182 = *(_QWORD *)(v342 + 72);
                                if (v1181 == v1182)
                                  v577 = *(_QWORD *)(v342 - 32);
                                else
                                  v577 = 0;
                                if (v1181 == v1182)
                                  v578 = *(uint64_t ***)(v1119 + 24);
                                else
                                  v578 = 0;
                              }
                              else
                              {
                                v577 = 0;
                                v578 = 0;
                              }
                              data = (int8x8_t)v1118;
                              *(llvm::APInt **)&v1252 = v1235[0];
                              *(_WORD *)&v1239[32] = 257;
                              v1122 = (char *)operator new(0xB0uLL);
                              v1183 = 0;
                              BitOrPointerCast = (uint64_t)(v1122 + 96);
                              *((_DWORD *)v1122 + 29) = *((_DWORD *)v1122 + 29) & 0x38000000 | 3;
                              do
                              {
                                v1184 = &v1122[v1183];
                                *(_QWORD *)v1184 = 0;
                                *((_QWORD *)v1184 + 1) = 0;
                                *((_QWORD *)v1184 + 2) = 0;
                                *((_QWORD *)v1184 + 3) = BitOrPointerCast;
                                v1183 += 32;
                              }
                              while (v1183 != 96);
                              goto LABEL_2103;
                            }
                            if ((uint64_t *)v1235[0] == v1236)
                            {
                              v574 = *(uint64_t **)(a1 + 24);
                              *(_QWORD *)v1239 = "minmaxop";
                              *(_WORD *)&v1239[32] = 259;
                              v575 = llvm::IRBuilderBase::CreateSelect(v574, BitOrPointerCast, (uint64_t *)__dst.__r_.__value_.__l.__data_, (uint64_t)v1237, (uint64_t)v1239, (unsigned __int8 *)a2);
                              v576 = *(_QWORD *)(v342 - 32);
                              if (v576 && !*(_BYTE *)(v576 + 16))
                              {
                                v1186 = *(_QWORD *)(v576 + 24);
                                v1187 = *(_QWORD *)(v342 + 72);
                                if (v1186 == v1187)
                                  v577 = *(_QWORD *)(v342 - 32);
                                else
                                  v577 = 0;
                                if (v1186 == v1187)
                                  v578 = *(uint64_t ***)(v576 + 24);
                                else
                                  v578 = 0;
                              }
                              else
                              {
                                v577 = 0;
                                v578 = 0;
                              }
                              data = (int8x8_t)v575;
                              *(llvm::APInt **)&v1252 = v1235[0];
                              *(_WORD *)&v1239[32] = 257;
                              v1122 = (char *)operator new(0xB0uLL);
                              v1188 = 0;
                              BitOrPointerCast = (uint64_t)(v1122 + 96);
                              *((_DWORD *)v1122 + 29) = *((_DWORD *)v1122 + 29) & 0x38000000 | 3;
                              do
                              {
                                v1189 = &v1122[v1188];
                                *(_QWORD *)v1189 = 0;
                                *((_QWORD *)v1189 + 1) = 0;
                                *((_QWORD *)v1189 + 2) = 0;
                                *((_QWORD *)v1189 + 3) = BitOrPointerCast;
                                v1188 += 32;
                              }
                              while (v1188 != 96);
LABEL_2103:
                              *((_QWORD *)v1122 + 12) = *v578[2];
                              *((_QWORD *)v1122 + 13) = 0;
                              v1122[112] = 84;
                              v1122[113] = 0;
                              *((_WORD *)v1122 + 57) = 0;
                              *((_DWORD *)v1122 + 29) = *((_DWORD *)v1122 + 29) & 0xC0000000 | 3;
                              *(_OWORD *)(v1122 + 120) = 0u;
                              *(_OWORD *)(v1122 + 136) = 0u;
                              *((_DWORD *)v1122 + 38) = 0;
                              *((_QWORD *)v1122 + 20) = 0;
                              llvm::CallInst::init((uint64_t ***)BitOrPointerCast, v578, v577, (uint64_t *)&data, 2, 0, 0, (uint64_t)v1239);
                              goto LABEL_606;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if ((*(_DWORD *)(v302 + 20) & 0x7FFFFFF) != 2)
                  goto LABEL_605;
                if ((*(_DWORD *)(v303 + 20) & 0x7FFFFFF) != 2)
                  goto LABEL_605;
                if (!llvm::Instruction::isSameOperationAs((llvm::Instruction *)v302, (const llvm::Instruction *)v303, 0))goto LABEL_605;
                v344 = *(unsigned __int8 *)(v302 + 16);
                if (v344 != 62 && (v344 - 41) > 0x11)
                  goto LABEL_605;
                v345 = *(_QWORD *)(v302 + 8);
                if (!v345)
                  goto LABEL_605;
                if (*(_QWORD *)(v345 + 8))
                  goto LABEL_605;
                v972 = *(_QWORD *)(v303 + 8);
                if (!v972 || *(_QWORD *)(v972 + 8))
                  goto LABEL_605;
                v973 = *(_DWORD *)(v302 + 20);
                if ((v973 & 0x40000000) != 0)
                  v974 = *(uint64_t **)(v302 - 8);
                else
                  v974 = (uint64_t *)(v302 - 32 * (v973 & 0x7FFFFFF));
                v1051 = *v974;
                v1052 = *(_DWORD *)(v303 + 20);
                if ((v1052 & 0x40000000) != 0)
                  v1053 = *(_QWORD **)(v303 - 8);
                else
                  v1053 = (_QWORD *)(v303 - 32 * (v1052 & 0x7FFFFFF));
                if (v1051 == *v1053)
                {
                  if ((v973 & 0x40000000) != 0)
                    v1065 = *(uint64_t ***)(v302 - 8);
                  else
                    v1065 = (uint64_t **)(v302 - 32 * (v973 & 0x7FFFFFF));
                  v1074 = *v1065;
                  v1075 = v1065[4];
                  if ((v1052 & 0x40000000) != 0)
                  {
LABEL_1987:
                    v1076 = *(_QWORD *)(v303 - 8);
                    goto LABEL_1988;
                  }
                }
                else
                {
                  if ((v973 & 0x40000000) != 0)
                    v1054 = *(_QWORD *)(v302 - 8);
                  else
                    v1054 = v302 - 32 * (v973 & 0x7FFFFFF);
                  v1067 = *(_QWORD *)(v1054 + 32);
                  if ((v1052 & 0x40000000) != 0)
                    v1068 = *(_QWORD *)(v303 - 8);
                  else
                    v1068 = v303 - 32 * (v1052 & 0x7FFFFFF);
                  if (v1067 == *(_QWORD *)(v1068 + 32))
                  {
                    if ((v973 & 0x40000000) != 0)
                      v1073 = *(_QWORD *)(v302 - 8);
                    else
                      v1073 = v302 - 32 * (v973 & 0x7FFFFFF);
                    v1074 = *(uint64_t **)(v1073 + 32);
                    v1075 = *(uint64_t **)v1073;
                    v1084 = 0;
                    if ((v1052 & 0x40000000) != 0)
                      v1085 = *(uint64_t **)(v303 - 8);
                    else
                      v1085 = (uint64_t *)(v303 - 32 * (v1052 & 0x7FFFFFF));
LABEL_1990:
                    v1125 = *v1085;
                    if (((_DWORD)v334[1] & 0xFE) != 0x12
                      || (*(_DWORD *)(*v1075 + 8) & 0xFE) == 0x12
                      && (*(_DWORD *)(*(_QWORD *)v1125 + 8) & 0xFE) == 0x12)
                    {
                      v1126 = *(uint64_t **)(a1 + 24);
                      if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
                      {
                        v1137 = 0;
                        v1136 = &byte_1C871356D;
LABEL_2002:
                        *(_WORD *)&v1239[32] = 773;
                        *(_QWORD *)v1239 = v1136;
                        *(_QWORD *)&v1239[8] = v1137;
                        *(_QWORD *)&v1239[16] = ".v";
                        v1139 = llvm::IRBuilderBase::CreateSelect(v1126, BitOrPointerCast, v1075, v1125, (uint64_t)v1239, (unsigned __int8 *)a2);
                        v1140 = v1084 == 0;
                        if (v1084)
                          v1141 = v1074;
                        else
                          v1141 = (uint64_t *)v1139;
                        if (v1140)
                          v1142 = (int8x8_t)v1074;
                        else
                          v1142 = (int8x8_t)v1139;
                        v1143 = *(unsigned __int8 *)(v302 + 16);
                        if ((v1143 - 59) >= 0xFFFFFFEE)
                        {
                          *(_WORD *)&v1239[32] = 257;
                          v1153 = (char *)operator new(0x80uLL);
                          *((_QWORD *)v1153 + 6) = 0;
                          *((_QWORD *)v1153 + 5) = 0;
                          v1154 = v1153 + 40;
                          *((_QWORD *)v1153 + 8) = *v1141;
                          BitOrPointerCast = (uint64_t)(v1153 + 64);
                          *((_QWORD *)v1153 + 3) = v1153 + 64;
                          *((_QWORD *)v1153 + 7) = v1153 + 64;
                          *((_QWORD *)v1153 + 9) = 0;
                          v1153[80] = v1143;
                          v1153[81] = 0;
                          *((_WORD *)v1153 + 41) = 0;
                          *((_DWORD *)v1153 + 21) = 2;
                          *(_OWORD *)(v1153 + 88) = 0u;
                          *(_OWORD *)(v1153 + 104) = 0u;
                          *((_DWORD *)v1153 + 30) = 0;
                          *(_QWORD *)v1153 = v1141;
                          v1157 = v1141[1];
                          v1156 = v1141 + 1;
                          v1155 = v1157;
                          *((_QWORD *)v1153 + 1) = v1157;
                          if (v1157)
                            *(_QWORD *)(v1155 + 16) = v1153 + 8;
                          *((_QWORD *)v1153 + 2) = v1156;
                          *v1156 = v1153;
                          *((int8x8_t *)v1153 + 4) = v1142;
                          if (v1142)
                          {
                            v1160 = *(_QWORD *)(*(_QWORD *)&v1142 + 8);
                            v1159 = (_QWORD *)(*(_QWORD *)&v1142 + 8);
                            v1158 = v1160;
                            *v1154 = v1160;
                            if (v1160)
                              *(_QWORD *)(v1158 + 16) = v1154;
                            *((_QWORD *)v1153 + 6) = v1159;
                            *v1159 = v1153 + 32;
                          }
                          llvm::Value::setName((uint64_t ***)v1153 + 8, (uint64_t)v1239);
                          llvm::Instruction::copyIRFlags(BitOrPointerCast, v302, 1);
                          llvm::Instruction::andIRFlags(BitOrPointerCast, v303);
                        }
                        else
                        {
                          if (v1143 == 62)
                            v1144 = v302;
                          else
                            v1144 = 0;
                          if (v1144)
                          {
                            v1145 = *(llvm::GetElementPtrInst **)(v1144 + 72);
                            if ((*(_BYTE *)(v1144 + 17) & 2) != 0 && (*(_BYTE *)(v303 + 17) & 2) != 0)
                            {
                              data = v1142;
                              *(_WORD *)&v1239[32] = 257;
                              BitOrPointerCast = (uint64_t)sub_1C578372C(v1145, v1141, (llvm::Value *)&data, 1, (uint64_t)v1239, 0);
                            }
                            else
                            {
                              data = v1142;
                              *(_WORD *)&v1239[32] = 257;
                              v1146 = (char *)operator new(0x90uLL);
                              *((_DWORD *)v1146 + 21) = *((_DWORD *)v1146 + 21) & 0x38000000 | 2;
                              BitOrPointerCast = (uint64_t)(v1146 + 64);
                              *(_QWORD *)v1146 = 0;
                              *((_QWORD *)v1146 + 1) = 0;
                              *((_QWORD *)v1146 + 2) = 0;
                              *((_QWORD *)v1146 + 3) = v1146 + 64;
                              *((_QWORD *)v1146 + 4) = 0;
                              *((_QWORD *)v1146 + 5) = 0;
                              *((_QWORD *)v1146 + 6) = 0;
                              *((_QWORD *)v1146 + 7) = v1146 + 64;
                              sub_1C4774650(v1145, v1141, (llvm::Value *)&data, 1);
                              *((_QWORD *)v1146 + 8) = v1147;
                              *((_QWORD *)v1146 + 9) = 0;
                              v1148 = *((_DWORD *)v1146 + 21) & 0xC0000000 | 2;
                              *((_DWORD *)v1146 + 20) = 62;
                              *((_DWORD *)v1146 + 21) = v1148;
                              *(_OWORD *)(v1146 + 88) = 0u;
                              *(_OWORD *)(v1146 + 104) = 0u;
                              *((_DWORD *)v1146 + 30) = 0;
                              v1149 = *(_QWORD *)v1146;
                              *((_QWORD *)v1146 + 16) = v1145;
                              *((_QWORD *)v1146 + 17) = v1145;
                              if (v1149)
                              {
                                **((_QWORD **)v1146 + 2) = *((_QWORD *)v1146 + 1);
                                v1210 = *((_QWORD *)v1146 + 1);
                                if (v1210)
                                  *(_QWORD *)(v1210 + 16) = *((_QWORD *)v1146 + 2);
                              }
                              *(_QWORD *)v1146 = v1141;
                              if (v1141)
                              {
                                v1152 = v1141[1];
                                v1151 = v1141 + 1;
                                v1150 = v1152;
                                *((_QWORD *)v1146 + 1) = v1152;
                                if (v1152)
                                  *(_QWORD *)(v1150 + 16) = v1146 + 8;
                                *((_QWORD *)v1146 + 2) = v1151;
                                *v1151 = v1146;
                              }
                              sub_1C5382FD4((uint64_t)&__dst, (uint64_t *)&data, (uint64_t *)&v1252, BitOrPointerCast - 32 * (*((_DWORD *)v1146 + 21) & 0x7FFFFFF) + 32);
                              llvm::Value::setName((uint64_t ***)BitOrPointerCast, (uint64_t)v1239);
                            }
                          }
                        }
                        goto LABEL_606;
                      }
                      v1127 = ***(_QWORD ***)a2;
                      v1128 = *(_QWORD *)(v1127 + 152);
                      v1129 = *(unsigned int *)(v1127 + 168);
                      if ((_DWORD)v1129)
                      {
                        LODWORD(v1130) = (v1129 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                        v1131 = (llvm::Value **)(v1128 + 16 * v1130);
                        v1132 = *v1131;
                        if (*v1131 == a2)
                        {
LABEL_2001:
                          v1135 = v1131[1];
                          v1138 = *(_QWORD *)v1135;
                          v1136 = (char *)v1135 + 16;
                          v1137 = v1138;
                          goto LABEL_2002;
                        }
                        v1133 = 1;
                        while (v1132 != (llvm::Value *)-4096)
                        {
                          v1134 = v1130 + v1133++;
                          v1130 = v1134 & (v1129 - 1);
                          v1132 = *(llvm::Value **)(v1128 + 16 * v1130);
                          if (v1132 == a2)
                          {
                            v1131 = (llvm::Value **)(v1128 + 16 * v1130);
                            goto LABEL_2001;
                          }
                        }
                      }
                      v1131 = (llvm::Value **)(v1128 + 16 * v1129);
                      goto LABEL_2001;
                    }
LABEL_605:
                    BitOrPointerCast = 0;
                    goto LABEL_606;
                  }
                  if (!llvm::Instruction::isCommutative((llvm::Instruction *)v302))
                    goto LABEL_605;
                  if ((v973 & 0x40000000) != 0)
                    v1069 = *(uint64_t **)(v302 - 8);
                  else
                    v1069 = (uint64_t *)(v302 - 32 * (v973 & 0x7FFFFFF));
                  v1086 = *v1069;
                  if ((v1052 & 0x40000000) != 0)
                    v1087 = *(_QWORD *)(v303 - 8);
                  else
                    v1087 = v303 - 32 * (v1052 & 0x7FFFFFF);
                  if (v1086 == *(_QWORD *)(v1087 + 32))
                  {
                    if ((v973 & 0x40000000) != 0)
                      v1101 = *(uint64_t ***)(v302 - 8);
                    else
                      v1101 = (uint64_t **)(v302 - 32 * (v973 & 0x7FFFFFF));
                    v1074 = *v1101;
                    v1075 = v1101[4];
                    if ((v1052 & 0x40000000) != 0)
                      v1085 = *(uint64_t **)(v303 - 8);
                    else
                      v1085 = (uint64_t *)(v303 - 32 * (v1052 & 0x7FFFFFF));
                    goto LABEL_1989;
                  }
                  if ((v973 & 0x40000000) != 0)
                    v1088 = *(_QWORD *)(v302 - 8);
                  else
                    v1088 = v302 - 32 * (v973 & 0x7FFFFFF);
                  v1102 = *(_QWORD *)(v1088 + 32);
                  if ((v1052 & 0x40000000) != 0)
                    v1103 = *(_QWORD **)(v303 - 8);
                  else
                    v1103 = (_QWORD *)(v303 - 32 * (v1052 & 0x7FFFFFF));
                  if (v1102 != *v1103)
                    goto LABEL_605;
                  if ((v973 & 0x40000000) != 0)
                    v1104 = *(_QWORD *)(v302 - 8);
                  else
                    v1104 = v302 - 32 * (v973 & 0x7FFFFFF);
                  v1074 = *(uint64_t **)(v1104 + 32);
                  v1075 = *(uint64_t **)v1104;
                  if ((v1052 & 0x40000000) != 0)
                    goto LABEL_1987;
                }
                v1076 = v303 - 32 * (v1052 & 0x7FFFFFF);
LABEL_1988:
                v1085 = (uint64_t *)(v1076 + 32);
LABEL_1989:
                v1084 = 1;
                goto LABEL_1990;
              }
              v511 = *(unsigned __int8 *)(v302 + 17) >> 1;
              if (v511 == 127)
                LOBYTE(v511) = -1;
              v512 = *(unsigned __int8 *)(v303 + 17) >> 1;
              if (v512 == 127)
                LOBYTE(v512) = -1;
              v513 = v512 & v511;
              v514 = *((unsigned __int8 *)a2 + 17) >> 1;
              if (v514 == 127)
                LOBYTE(v514) = -1;
              v515 = v513 | v514;
              v516 = *(uint64_t **)(a1 + 24);
              if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
              {
                v633 = 0;
                v632 = &byte_1C871356D;
LABEL_1129:
                *(_WORD *)&v1239[32] = 773;
                *(_QWORD *)v1239 = v632;
                *(_QWORD *)&v1239[8] = v633;
                *(_QWORD *)&v1239[16] = ".v";
                v635 = llvm::IRBuilderBase::CreateSelect(v516, BitOrPointerCast, v1242, v1249, (uint64_t)v1239, (unsigned __int8 *)a2);
                if (v635 && *((unsigned __int8 *)v635 + 16) > 0x1Bu)
                  *((_BYTE *)v635 + 17) |= 2 * v515;
                *(_WORD *)&v1239[32] = 257;
                BitOrPointerCast = llvm::UnaryOperator::Create(12, (uint64_t *)v635, (uint64_t)v1239, 0);
                *(_BYTE *)(BitOrPointerCast + 17) |= 2 * v515;
LABEL_606:
                if (BitOrPointerCast)
                  return (llvm::UndefValue **)BitOrPointerCast;
                goto LABEL_613;
              }
              v517 = ***(_QWORD ***)a2;
              v518 = *(_QWORD *)(v517 + 152);
              v519 = *(unsigned int *)(v517 + 168);
              if ((_DWORD)v519)
              {
                LODWORD(v520) = (v519 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                v521 = (llvm::Value **)(v518 + 16 * v520);
                v522 = *v521;
                if (*v521 == a2)
                {
LABEL_1128:
                  v631 = v521[1];
                  v634 = *(_QWORD *)v631;
                  v632 = (char *)v631 + 16;
                  v633 = v634;
                  goto LABEL_1129;
                }
                v523 = 1;
                while (v522 != (llvm::Value *)-4096)
                {
                  v524 = v520 + v523++;
                  v520 = v524 & (v519 - 1);
                  v522 = *(llvm::Value **)(v518 + 16 * v520);
                  if (v522 == a2)
                  {
                    v521 = (llvm::Value **)(v518 + 16 * v520);
                    goto LABEL_1128;
                  }
                }
              }
              v521 = (llvm::Value **)(v518 + 16 * v519);
              goto LABEL_1128;
            }
          }
        }
      }
    }
  }
LABEL_613:
  v348 = *v1224;
  v349 = *(unsigned __int8 *)(*v1224 + 16);
  v350 = *v1223;
  v351 = *(unsigned __int8 *)(*v1223 + 16);
  if (*v1224 && v349 < 0x15)
  {
    if (!v350)
      goto LABEL_656;
    v352 = *v1224;
    v349 = *(unsigned __int8 *)(*v1223 + 16);
    v348 = *v1223;
    if (v351 < 0x1C)
      goto LABEL_656;
  }
  else
  {
    if (!v350 || !v348)
      goto LABEL_656;
    v353 = v349 < 0x1C || v351 > 0x14;
    v352 = *v1223;
    if (v353)
      goto LABEL_656;
  }
  if (v349 - 69 >= 0xFFFFFFFE)
  {
    v354 = *(_DWORD *)(v348 + 20);
    if ((v354 & 0x40000000) != 0)
      v355 = *(uint64_t ***)(v348 - 8);
    else
      v355 = (uint64_t **)(v348 - 32 * (v354 & 0x7FFFFFF));
    v356 = *v355;
    v357 = **v355;
    v358 = (uint64_t)*v1222;
    v359 = *(unsigned __int8 *)(*(_QWORD *)v1222 + 16);
    if (v359 - 81 < 2 && v359 > 0x1B)
      v361 = (unsigned __int8 *)*v1222;
    else
      v361 = 0;
    v362 = *(_DWORD *)(v357 + 8);
    if ((v362 & 0xFE) == 0x12)
      v362 = *(_DWORD *)(**(_QWORD **)(v357 + 16) + 8);
    if (v362 == 269 || v361 && **((_QWORD **)v361 - 8) == v357)
    {
      v363 = a1;
      v364 = v349 - 28;
      v365 = *(llvm::Constant **)a2;
      v366 = sub_1C537D3B8((llvm *)0x26, v352, (llvm::Constant *)v357, 0);
      v1216 = v364;
      v367 = v364;
      v368 = v365;
      if (llvm::ConstantExpr::getCast(v367) == v352 && (v374 = *(_QWORD *)(v348 + 8)) != 0 && !*(_QWORD *)(v374 + 8))
      {
        v375 = *((_QWORD *)a2 - 4);
        if (v348 == v375)
          v376 = (uint64_t *)v366;
        else
          v376 = v356;
        if (v348 == v375)
          v377 = (uint64_t)v356;
        else
          v377 = (uint64_t)v366;
        a1 = v363;
        v378 = *(uint64_t **)(v363 + 24);
        *(_QWORD *)v1239 = "narrow";
        *(_WORD *)&v1239[32] = 259;
        llvm::IRBuilderBase::CreateSelect(v378, v358, v376, v377, (uint64_t)v1239, (unsigned __int8 *)a2);
        *(_WORD *)&v1239[32] = 257;
        llvm::CastInst::Create(v1216);
      }
      else
      {
        a1 = v363;
        if ((uint64_t *)v358 != v356)
          goto LABEL_656;
        if (v348 == *v1224)
        {
          llvm::ConstantInt::getTrue((uint64_t **)v357, v369, v370);
          Cast = (uint64_t *)llvm::ConstantExpr::getCast(v1216);
          *(_WORD *)&v1239[32] = 257;
          v372 = (uint64_t)v356;
          v371 = (llvm::Value **)v352;
        }
        else
        {
          v371 = llvm::Constant::getNullValue(v368, v369);
          *(_WORD *)&v1239[32] = 257;
          v372 = (uint64_t)v356;
          Cast = (uint64_t *)v352;
        }
        v379 = sub_1C4FC8748(v372, Cast, (uint64_t)v371, (uint64_t)v1239, 0, (uint64_t)a2);
      }
      BitOrPointerCast = (uint64_t)v379;
      if (v379)
        return (llvm::UndefValue **)BitOrPointerCast;
    }
  }
LABEL_656:
  *(_QWORD *)&v1249 = &v1226;
  *((_QWORD *)&v1249 + 1) = a1;
  v1250 = a2;
  if (*((_BYTE *)v1221 + 16) == 62)
  {
    BitOrPointerCast = (uint64_t)sub_1C5842724((uint64_t **)&v1249, (uint64_t)v1221, (uint64_t *)v1219, 0);
    if (BitOrPointerCast)
      return (llvm::UndefValue **)BitOrPointerCast;
  }
  if (*((_BYTE *)v1219 + 16) == 62)
  {
    BitOrPointerCast = (uint64_t)sub_1C5842724((uint64_t **)&v1249, (uint64_t)v1219, (uint64_t *)v1221, 1);
    if (BitOrPointerCast)
      return (llvm::UndefValue **)BitOrPointerCast;
  }
  if ((*((_DWORD *)v1220 + 2) & 0xFE) == 0x12)
    v380 = *(unsigned __int8 *)(**((_QWORD **)v1220 + 2) + 8);
  else
    v380 = *((_DWORD *)v1220 + 2);
  v381 = (uint64_t *)v1222;
  if (v380 == 13 || v380 <= 6)
  {
    v19 = sub_1C5834688(a1, (uint64_t)a2, (uint64_t)v1221, (uint64_t)v1219, 0);
    if (v19)
      return (llvm::UndefValue **)v19;
    BitOrPointerCast = sub_1C5834688(a1, (uint64_t)a2, (uint64_t)v1219, (uint64_t)v1221, 1);
    if (BitOrPointerCast)
      return (llvm::UndefValue **)BitOrPointerCast;
    data = 0;
    v1246.__r_.__value_.__r.__words[0] = 0;
    LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
    matched = llvm::matchSelectPattern((uint64_t)a2, (uint64_t)&data, &v1246, (llvm::Type *)&__dst, 0);
    if (!matched)
      goto LABEL_673;
    v384 = v382;
    *(_QWORD *)v1239 = 0;
    v1242 = 0;
    v385 = llvm::matchSelectPattern(*(_QWORD *)&data, (uint64_t)v1239, &v1242, 0, 0);
    if (v385 && *(_QWORD *)a2 == **(_QWORD **)&data)
    {
      v418 = v1246.__r_.__value_.__l.__data_ == (std::string::pointer)v1242
          || v1246.__r_.__value_.__r.__words[0] == *(_QWORD *)v1239;
      v419 = v418;
      if ((v385 - 9) <= 0xFFFFFFFD && v385 == matched && v419)
      {
        BitOrPointerCast = (uint64_t)sub_1C577F888(a1, a2, *(llvm::Value **)&data);
        if (BitOrPointerCast)
          return (llvm::UndefValue **)BitOrPointerCast;
      }
    }
    v386 = llvm::matchSelectPattern((uint64_t)v1246.__r_.__value_.__l.__data_, (uint64_t)v1239, &v1242, 0, 0);
    if (v386 && *(_QWORD *)a2 == *(_QWORD *)v1246.__r_.__value_.__l.__data_)
    {
      v420 = *(_QWORD **)&data == v1242 || *(_QWORD *)&data == *(_QWORD *)v1239;
      v421 = v420;
      if ((v386 - 9) <= 0xFFFFFFFD && v386 == matched && v421)
      {
        BitOrPointerCast = (uint64_t)sub_1C577F888(a1, a2, (llvm::Value *)v1246.__r_.__value_.__l.__data_);
        if (BitOrPointerCast)
          return (llvm::UndefValue **)BitOrPointerCast;
      }
    }
    if ((matched - 7) < 2
      || (v402 = (uint64_t *)data, v403 = **(_QWORD **)&data, **(llvm::ConstantInt ***)&data == v1220)
      && ((*((_DWORD *)v1220 + 2) & 0xFE) != 0x12
        ? (v506 = *((_DWORD *)v1220 + 2))
        : (v506 = *(unsigned __int8 *)(**((_QWORD **)v1220 + 2) + 8)),
          v506 > 6
       || ((v553 = *((_QWORD *)v1226 - 8), v554 = *((_QWORD *)v1226 - 4), v553 == *(_QWORD *)&data)
        || v553 == v1246.__r_.__value_.__r.__words[0])
       && (v554 == *(_QWORD *)&data || v554 == v1246.__r_.__value_.__r.__words[0])))
    {
LABEL_673:
      v381 = (uint64_t *)v1222;
      goto LABEL_674;
    }
    if (matched == 2)
    {
      v404 = 36;
      v405 = (uint64_t)v1220;
LABEL_710:
      v406 = *(_QWORD *)(a1 + 24);
      *(_WORD *)&v1239[32] = 257;
      v407 = sub_1C4774B48(v406, v404, *(_QWORD *)&data, (uint64_t)v1246.__r_.__value_.__l.__data_, (uint64_t)v1239);
    }
    else
    {
      v405 = (uint64_t)v1220;
      v404 = 40;
      switch(matched)
      {
        case 1:
          goto LABEL_710;
        case 3:
          v404 = 38;
          goto LABEL_710;
        case 4:
          v404 = 34;
          goto LABEL_710;
        case 5:
          v1191 = (v384 & 1) == 0;
          v1192 = 4;
          v1193 = 12;
          break;
        default:
          v1191 = (v384 & 1) == 0;
          v1192 = 2;
          v1193 = 10;
          break;
      }
      if (v1191)
        v1194 = v1193;
      else
        v1194 = v1192;
      v1195 = *(_QWORD *)(a1 + 24);
      v1196 = *(_DWORD *)(v1195 + 96);
      v1197 = *(_QWORD *)(v1195 + 88);
      v1198 = *(_WORD *)(v1195 + 100);
      v1199 = *(_BYTE *)(v1195 + 102);
      v1200 = *(unsigned __int8 *)(*(_QWORD *)v1222 + 17) >> 1;
      if (v1200 == 127)
        v1200 = -1;
      *(_DWORD *)(v1195 + 96) = v1200;
      *(_WORD *)&v1239[32] = 257;
      v407 = llvm::IRBuilderBase::CreateFCmpHelper(v1195, v1194, v402, (uint64_t)v1246.__r_.__value_.__l.__data_, (uint64_t)v1239, 0, 0);
      *(_DWORD *)(v1195 + 96) = v1196;
      *(_QWORD *)(v1195 + 88) = v1197;
      *(_WORD *)(v1195 + 100) = v1198;
      *(_BYTE *)(v1195 + 102) = v1199;
      v405 = (uint64_t)v1220;
    }
    v408 = *(uint64_t **)(a1 + 24);
    if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
    {
      v409 = ***(_QWORD ***)a2;
      v410 = *(_QWORD *)(v409 + 152);
      v411 = *(unsigned int *)(v409 + 168);
      if ((_DWORD)v411)
      {
        LODWORD(v412) = (v411 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v413 = (llvm::Value **)(v410 + 16 * v412);
        v414 = *v413;
        if (*v413 != a2)
        {
          v415 = 1;
          do
          {
            if (v414 == (llvm::Value *)-4096)
              goto LABEL_1008;
            v416 = v412 + v415++;
            v412 = v416 & (v411 - 1);
            v414 = *(llvm::Value **)(v410 + 16 * v412);
          }
          while (v414 != a2);
          v413 = (llvm::Value **)(v410 + 16 * v412);
        }
      }
      else
      {
LABEL_1008:
        v413 = (llvm::Value **)(v410 + 16 * v411);
      }
      v564 = v413[1];
      v567 = *(_QWORD *)v564;
      v565 = (char *)v564 + 16;
      v566 = v567;
    }
    else
    {
      v566 = 0;
      v565 = &byte_1C871356D;
    }
    *(_WORD *)&v1239[32] = 261;
    *(_QWORD *)v1239 = v565;
    *(_QWORD *)&v1239[8] = v566;
    v16 = (uint64_t)llvm::IRBuilderBase::CreateSelect(v408, v407, *(uint64_t **)&data, (uint64_t)v1246.__r_.__value_.__l.__data_, (uint64_t)v1239, (unsigned __int8 *)a2);
    if (v403 != v405)
    {
      v568 = *(uint64_t **)(a1 + 24);
      *(_WORD *)&v1239[32] = 257;
      UnaryIntrinsic = (uint64_t)sub_1C4773E38(v568, LODWORD(__dst.__r_.__value_.__l.__data_), (unsigned __int8 *)v16, v405, (uint64_t)v1239);
      goto LABEL_8;
    }
LABEL_9:
    v17 = a1;
    v18 = a2;
    return sub_1C577F888(v17, v18, (llvm::Value *)v16);
  }
LABEL_674:
  if (!sub_1C4774A9C((uint64_t)a2))
  {
    v388 = *v381;
    v389 = v1223;
    BitOrPointerCast = (uint64_t)v1224;
    goto LABEL_698;
  }
  v388 = *((_QWORD *)a2 - 12);
  v389 = v1223;
  BitOrPointerCast = (uint64_t)v1224;
  if ((~*((unsigned __int8 *)a2 + 17) & 0x14) != 0 || !v388 || *(_BYTE *)(v388 + 16) != 82)
    goto LABEL_698;
  v390 = (uint64_t *)*v1224;
  v391 = (uint64_t *)*v1223;
  v392 = *(uint64_t **)(v388 - 64);
  v393 = *(_QWORD *)(v388 - 32);
  v394 = (uint64_t *)*v1224 == v392 && v391 == (uint64_t *)v393;
  v395 = v394;
  if (!v394 && (v390 != (uint64_t *)v393 || v391 != v392))
    goto LABEL_690;
  v396 = *(_WORD *)(v388 + 18) & 0x3F;
  if (v390 == v392)
  {
    v525 = *(_WORD *)(v388 + 18) & 0x3F;
  }
  else
  {
    if ((v396 - 32) < 0xA)
      goto LABEL_689;
    LOBYTE(v525) = 3;
    if (((1 << v396) & 0xCFFF) != 0)
      goto LABEL_689;
    if (v396 != 12)
      LOBYTE(v525) = 2;
  }
  if (v392 && (v525 & 0x3E) == 2 && v393)
  {
    v526 = *(uint64_t **)(a1 + 24);
    *(_WORD *)&v1239[32] = 257;
    v527 = 193;
LABEL_991:
    UnaryIntrinsic = llvm::IRBuilderBase::CreateBinaryIntrinsic(v526, v527, v392, v393, (uint64_t)a2, (uint64_t)v1239);
    goto LABEL_8;
  }
LABEL_689:
  if ((v395 & 1) == 0)
  {
LABEL_690:
    if (v390 != (uint64_t *)v393 || v391 != v392)
      goto LABEL_698;
  }
  v397 = *(_WORD *)(v388 + 18) & 0x3F;
  if (v390 == v392)
  {
    v398 = *(_WORD *)(v388 + 18) & 0x3F;
  }
  else
  {
    if ((v397 - 32) < 0xA)
      goto LABEL_698;
    v398 = 5;
    if (((1 << v397) & 0xF3FF) != 0)
      goto LABEL_698;
    if (v397 != 10)
      v398 = 4;
  }
  if (v392 && (v398 & 0x3E) == 4 && v393)
  {
    v526 = *(uint64_t **)(a1 + 24);
    *(_WORD *)&v1239[32] = 257;
    v527 = 202;
    goto LABEL_991;
  }
LABEL_698:
  v399 = *((unsigned __int8 *)v1221 + 16);
  if (!v388 || *(_BYTE *)(v388 + 16) != 83)
    goto LABEL_749;
  if (v399 >= 0x1C)
  {
    if (v399 == 83)
    {
      v401 = *(_QWORD ***)(v388 + 40);
      if (*((_QWORD ***)v1221 + 5) == v401)
        goto LABEL_701;
    }
    else
    {
      v401 = *(_QWORD ***)(v388 + 40);
    }
    if (*((_QWORD ***)a2 + 5) != v401 || *((_QWORD ***)v1221 + 5) == v401)
      goto LABEL_749;
  }
LABEL_701:
  v400 = *((unsigned __int8 *)v1219 + 16);
  if (v400 >= 0x1C)
  {
    if (v400 == 83)
    {
      v417 = *(_QWORD ***)(v388 + 40);
      if (*((_QWORD ***)v1219 + 5) == v417)
        goto LABEL_702;
    }
    else
    {
      v417 = *(_QWORD ***)(v388 + 40);
    }
    if (*((_QWORD ***)a2 + 5) != v417 || *((_QWORD ***)v1219 + 5) == v417)
      goto LABEL_749;
  }
LABEL_702:
  BitOrPointerCast = (uint64_t)sub_1C57808D4(a1, a2, v388);
  if (BitOrPointerCast)
    return (llvm::UndefValue **)BitOrPointerCast;
  v399 = *((unsigned __int8 *)v1221 + 16);
  v389 = v1223;
  BitOrPointerCast = (uint64_t)v1224;
LABEL_749:
  if (v399 != 85)
    goto LABEL_751;
  v422 = (llvm *)*((_QWORD *)v1221 - 12);
  v423 = *(llvm::Constant **)v422;
  v424 = v1226;
  if (*(_QWORD *)v422 != *(_QWORD *)v1226)
    goto LABEL_751;
  if (v422 == v1226)
  {
    v231 = *((_QWORD *)v1221 - 8);
    if (*(_QWORD *)BitOrPointerCast == v231)
      return 0;
    goto LABEL_1304;
  }
  if (*((llvm::Value **)v1221 - 4) == v1219)
  {
    v462 = *((_QWORD *)v1221 + 1);
    if (v462)
    {
      if (!*(_QWORD *)(v462 + 8))
      {
        v463 = *(uint64_t **)(a1 + 24);
        *(_WORD *)&v1239[32] = 257;
        v464 = llvm::Constant::getNullValue(v423, v387);
        v465 = llvm::IRBuilderBase::CreateSelect(v463, (uint64_t)v424, (uint64_t *)v422, (uint64_t)v464, (uint64_t)v1239, 0);
        sub_1C577E2C8(a1, (uint64_t)a2, 0, (uint64_t)v465);
        v466 = *((_QWORD *)v1221 - 8);
        v467 = a1;
        v468 = (uint64_t)a2;
        v469 = 1;
        goto LABEL_825;
      }
    }
  }
LABEL_751:
  v425 = *((unsigned __int8 *)v1219 + 16);
  if (v425 == 85)
  {
    v426 = (llvm *)*((_QWORD *)v1219 - 12);
    v427 = *(llvm::Constant **)v426;
    v428 = v1226;
    if (*(_QWORD *)v426 == *(_QWORD *)v1226)
    {
      if (v426 != v1226)
      {
        if (*((llvm **)v1219 - 8) != v1221)
          goto LABEL_753;
        v470 = *((_QWORD *)v1219 + 1);
        if (!v470 || *(_QWORD *)(v470 + 8))
          goto LABEL_753;
        v471 = *(uint64_t **)(a1 + 24);
        *(_WORD *)&v1239[32] = 257;
        AllOnesValue = (uint64_t *)llvm::Constant::getAllOnesValue(v427, v387);
        v473 = llvm::IRBuilderBase::CreateSelect(v471, (uint64_t)v428, AllOnesValue, (uint64_t)v426, (uint64_t)v1239, 0);
        sub_1C577E2C8(a1, (uint64_t)a2, 0, (uint64_t)v473);
        v466 = *((_QWORD *)v1219 - 4);
        v467 = a1;
        v468 = (uint64_t)a2;
        v469 = 2;
LABEL_825:
        sub_1C577E2C8(v467, v468, v469, v466);
        return (llvm::UndefValue **)a2;
      }
      v231 = *((_QWORD *)v1219 - 4);
      if (*v389 == v231)
        return 0;
      goto LABEL_881;
    }
  }
LABEL_753:
  v429 = *((_QWORD *)v1221 + 1);
  if (v429
    && !*(_QWORD *)(v429 + 8)
    && v399 >= 0x1C
    && v399 - 59 >= 0xFFFFFFEE
    && (v399 > 0x33 || ((1 << v399) & 0xD800000000000) == 0))
  {
    v435 = *((_QWORD *)v1221 - 8);
    if (v435 && *(_BYTE *)(v435 + 16) == 85 && *(llvm **)(v435 - 96) == v1226)
    {
      sub_1C577E2C8(a1, (uint64_t)v1221, 0, *(_QWORD *)(v435 - 64));
      v437 = *(_QWORD *)(a1 + 32);
      v975 = *(_DWORD *)(v437 + 8);
      *(_QWORD *)v1239 = v1221;
      *(_DWORD *)&v1239[8] = v975;
      v976 = *(_DWORD *)(v437 + 2080);
      if (v976)
      {
        v977 = *(_QWORD *)(v437 + 2064);
        v978 = v976 - 1;
        v979 = v978 & ((v1221 >> 4) ^ (v1221 >> 9));
        v443 = (llvm **)(v977 + 16 * v979);
        v980 = *v443;
        if (*v443 != v1221)
        {
          v445 = 0;
          v981 = 1;
          while (v980 != (llvm *)-4096)
          {
            if (v445)
              v982 = 0;
            else
              v982 = v980 == (llvm *)-8192;
            if (v982)
              v445 = v443;
            v983 = v979 + v981++;
            v979 = v983 & v978;
            v443 = (llvm **)(v977 + 16 * v979);
            v980 = *v443;
            if (*v443 == v1221)
              return (llvm::UndefValue **)a2;
          }
          goto LABEL_1767;
        }
        return (llvm::UndefValue **)a2;
      }
LABEL_2151:
      v993 = 0;
LABEL_1770:
      v994 = sub_1C4D8D8F4((_DWORD *)(v437 + 2064), (uint64_t)v1239, (uint64_t *)v1239, v993);
      *v994 = *(_QWORD *)v1239;
      *((_DWORD *)v994 + 2) = *(_DWORD *)&v1239[8];
      v995 = *(unsigned int *)(v437 + 8);
      if (v995 >= *(_DWORD *)(v437 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v437, v437 + 16, v995 + 1, 8);
        LODWORD(v995) = *(_DWORD *)(v437 + 8);
      }
      v996 = *(_QWORD *)v437;
      v997 = v1221;
LABEL_1779:
      *(_QWORD *)(v996 + 8 * v995) = v997;
      ++*(_DWORD *)(v437 + 8);
      return (llvm::UndefValue **)a2;
    }
    v436 = *((_QWORD *)v1221 - 4);
    if (v436 && *(_BYTE *)(v436 + 16) == 85 && *(llvm **)(v436 - 96) == v1226)
    {
      sub_1C577E2C8(a1, (uint64_t)v1221, 1u, *(_QWORD *)(v436 - 64));
      v437 = *(_QWORD *)(a1 + 32);
      v438 = *(_DWORD *)(v437 + 8);
      *(_QWORD *)v1239 = v1221;
      *(_DWORD *)&v1239[8] = v438;
      v439 = *(_DWORD *)(v437 + 2080);
      if (v439)
      {
        v440 = *(_QWORD *)(v437 + 2064);
        v441 = v439 - 1;
        v442 = v441 & ((v1221 >> 4) ^ (v1221 >> 9));
        v443 = (llvm **)(v440 + 16 * v442);
        v444 = *v443;
        if (*v443 != v1221)
        {
          v445 = 0;
          v446 = 1;
          while (v444 != (llvm *)-4096)
          {
            if (v445)
              v447 = 0;
            else
              v447 = v444 == (llvm *)-8192;
            if (v447)
              v445 = v443;
            v448 = v442 + v446++;
            v442 = v448 & v441;
            v443 = (llvm **)(v440 + 16 * v442);
            v444 = *v443;
            if (*v443 == v1221)
              return (llvm::UndefValue **)a2;
          }
LABEL_1767:
          if (v445)
            v993 = v445;
          else
            v993 = v443;
          goto LABEL_1770;
        }
        return (llvm::UndefValue **)a2;
      }
      goto LABEL_2151;
    }
  }
  v430 = *((_QWORD *)v1219 + 1);
  if (v430
    && !*(_QWORD *)(v430 + 8)
    && v425 >= 0x1C
    && v425 - 59 >= 0xFFFFFFEE
    && (v425 > 0x33 || ((1 << v425) & 0xD800000000000) == 0))
  {
    v449 = *((_QWORD *)v1219 - 8);
    if (v449 && *(_BYTE *)(v449 + 16) == 85 && *(llvm **)(v449 - 96) == v1226)
    {
      sub_1C577E2C8(a1, (uint64_t)v1219, 0, *(_QWORD *)(v449 - 32));
      v437 = *(_QWORD *)(a1 + 32);
      v984 = *(_DWORD *)(v437 + 8);
      *(_QWORD *)v1239 = v1219;
      *(_DWORD *)&v1239[8] = v984;
      v985 = *(_DWORD *)(v437 + 2080);
      if (v985)
      {
        v986 = *(_QWORD *)(v437 + 2064);
        v987 = v985 - 1;
        v988 = v987 & ((v1219 >> 4) ^ (v1219 >> 9));
        v456 = (llvm::Value **)(v986 + 16 * v988);
        v989 = *v456;
        if (*v456 == v1219)
          return (llvm::UndefValue **)a2;
        v458 = 0;
        v990 = 1;
        while (v989 != (llvm::Value *)-4096)
        {
          if (v458)
            v991 = 0;
          else
            v991 = v989 == (llvm::Value *)-8192;
          if (v991)
            v458 = v456;
          v992 = v988 + v990++;
          v988 = v992 & v987;
          v456 = (llvm::Value **)(v986 + 16 * v988);
          v989 = *v456;
          if (*v456 == v1219)
            return (llvm::UndefValue **)a2;
        }
LABEL_1773:
        if (v458)
          v998 = v458;
        else
          v998 = v456;
        goto LABEL_1776;
      }
LABEL_2152:
      v998 = 0;
LABEL_1776:
      v999 = sub_1C4D8D8F4((_DWORD *)(v437 + 2064), (uint64_t)v1239, (uint64_t *)v1239, v998);
      *v999 = *(_QWORD *)v1239;
      *((_DWORD *)v999 + 2) = *(_DWORD *)&v1239[8];
      v995 = *(unsigned int *)(v437 + 8);
      if (v995 >= *(_DWORD *)(v437 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v437, v437 + 16, v995 + 1, 8);
        LODWORD(v995) = *(_DWORD *)(v437 + 8);
      }
      v996 = *(_QWORD *)v437;
      v997 = v1219;
      goto LABEL_1779;
    }
    v450 = *((_QWORD *)v1219 - 4);
    if (v450 && *(_BYTE *)(v450 + 16) == 85 && *(llvm **)(v450 - 96) == v1226)
    {
      sub_1C577E2C8(a1, (uint64_t)v1219, 1u, *(_QWORD *)(v450 - 32));
      v437 = *(_QWORD *)(a1 + 32);
      v451 = *(_DWORD *)(v437 + 8);
      *(_QWORD *)v1239 = v1219;
      *(_DWORD *)&v1239[8] = v451;
      v452 = *(_DWORD *)(v437 + 2080);
      if (v452)
      {
        v453 = *(_QWORD *)(v437 + 2064);
        v454 = v452 - 1;
        v455 = v454 & ((v1219 >> 4) ^ (v1219 >> 9));
        v456 = (llvm::Value **)(v453 + 16 * v455);
        v457 = *v456;
        if (*v456 == v1219)
          return (llvm::UndefValue **)a2;
        v458 = 0;
        v459 = 1;
        while (v457 != (llvm::Value *)-4096)
        {
          if (v458)
            v460 = 0;
          else
            v460 = v457 == (llvm::Value *)-8192;
          if (v460)
            v458 = v456;
          v461 = v455 + v459++;
          v455 = v461 & v454;
          v456 = (llvm::Value **)(v453 + 16 * v455);
          v457 = *v456;
          if (*v456 == v1219)
            return (llvm::UndefValue **)a2;
        }
        goto LABEL_1773;
      }
      goto LABEL_2152;
    }
  }
  v1232 = 0;
  *(_QWORD *)v1239 = &v1232;
  if (sub_1C4D9EC28((_QWORD **)v1239, 30, (uint64_t)v1226)
    && !sub_1C57BE738((uint64_t)&data, (unsigned __int8 *)a2)
    && !sub_1C57BE7B8((uint64_t)&v1246, (unsigned __int8 *)a2))
  {
    sub_1C577E2C8(a1, (uint64_t)a2, 0, (uint64_t)v1232);
    v494 = (_QWORD **)*((_QWORD *)a2 - 8);
    v495 = (_QWORD **)*((_QWORD *)a2 - 4);
    if (v494 != v495)
    {
      v496 = (_QWORD **)*((_QWORD *)a2 - 3);
      *((_QWORD *)a2 - 8) = v495;
      *((_QWORD *)a2 - 4) = v494;
      v497 = *(_OWORD *)((char *)a2 - 56);
      v498 = (uint64_t *)*((_QWORD *)a2 - 2);
      *((_QWORD *)a2 - 7) = v496;
      *((_QWORD *)a2 - 6) = v498;
      *(_OWORD *)((char *)a2 - 24) = v497;
      *v498 = BitOrPointerCast;
      v499 = *((_QWORD *)a2 - 7);
      if (v499)
        *(_QWORD *)(v499 + 16) = (char *)a2 - 56;
      **((_QWORD **)a2 - 2) = v389;
      v500 = *((_QWORD *)a2 - 3);
      if (v500)
        *(_QWORD *)(v500 + 16) = (char *)a2 - 24;
    }
    llvm::Instruction::swapProfMetadata(a2);
    return (llvm::UndefValue **)a2;
  }
  v431 = *(llvm::ConstantInt **)a2;
  v1214 = (llvm ***)((char *)v1221 + 8);
  v1217 = (uint64_t **)((char *)v1219 + 8);
  if (*(_QWORD *)a2 && *((_BYTE *)v431 + 8) == 18)
  {
    v432 = *((_DWORD *)v431 + 8);
    LODWORD(v1252) = v432;
    if (v432 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&data, 0, 0);
      LODWORD(v1246.__r_.__value_.__r.__words[1]) = v432;
      llvm::APInt::initSlowCase((llvm::APInt *)&v1246, -1, 1);
      v432 = v1246.__r_.__value_.__r.__words[1];
      LODWORD(v1243) = v1246.__r_.__value_.__r.__words[1];
      if (LODWORD(v1246.__r_.__value_.__r.__words[1]) > 0x40)
      {
        v1162 = (((unint64_t)LODWORD(v1246.__r_.__value_.__r.__words[1]) + 63) >> 3) & 0x3FFFFFF8;
        v1242 = (_QWORD *)operator new[]();
        v433 = (_QWORD *)v1246.__r_.__value_.__r.__words[0];
        memcpy(v1242, v1246.__r_.__value_.__l.__data_, v1162);
        v389 = v1223;
        goto LABEL_767;
      }
      v433 = (_QWORD *)v1246.__r_.__value_.__r.__words[0];
      v389 = v1223;
    }
    else
    {
      data = 0;
      LODWORD(v1246.__r_.__value_.__r.__words[1]) = v432;
      if (v432)
        v433 = (_QWORD *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v432);
      else
        v433 = 0;
      v1246.__r_.__value_.__r.__words[0] = (std::string::size_type)v433;
      LODWORD(v1243) = v432;
    }
    v1242 = v433;
LABEL_767:
    v434 = (llvm::Value *)sub_1C58553C4(a1, (uint64_t ***)a2, (unsigned int *)&v1242, (unsigned int *)&data, 0, 0);
    if (v1243 >= 0x41 && v1242)
      MEMORY[0x1CAA32F9C](v1242, 0x1000C8000313F17);
    if (v434)
    {
      BitOrPointerCast = (uint64_t)a2;
      if (v434 != a2)
        BitOrPointerCast = (uint64_t)sub_1C577F888(a1, a2, v434);
LABEL_845:
      if (v432 >= 0x41 && v433)
        MEMORY[0x1CAA32F9C](v433, 0x1000C8000313F17);
      if (v1252 >= 0x41 && *(_QWORD *)&data)
        MEMORY[0x1CAA32F9C](*(_QWORD *)&data, 0x1000C8000313F17);
      if (BitOrPointerCast)
        return (llvm::UndefValue **)BitOrPointerCast;
      goto LABEL_852;
    }
    v474 = (unsigned __int8 *)*v1222;
    v475 = v389;
    v476 = *v1224;
    v477 = *v475;
    v1235[0] = 0;
    v1237 = 0;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    *(_QWORD *)v1239 = v1235;
    *(_QWORD *)&v1239[8] = &v1237;
    *(_QWORD *)&v1239[16] = &__dst;
    if (sub_1C58439D4((uint64_t)v1239, v476))
    {
      v478 = __dst.__r_.__value_.__r.__words[0] + 4 * __dst.__r_.__value_.__l.__size_;
      v479 = wmemchr((__int32 *)__dst.__r_.__value_.__l.__data_, -1, __dst.__r_.__value_.__l.__size_);
      v480 = v479 ? v479 : (__int32 *)v478;
      if (v480 == (__int32 *)(__dst.__r_.__value_.__r.__words[0] + 4 * __dst.__r_.__value_.__l.__size_))
      {
        v481 = *(unsigned int *)(**(_QWORD **)(v476 - 64) + 32);
        if ((_DWORD)v481 == *(_DWORD *)(v476 + 72))
        {
          if (llvm::ShuffleVectorInst::isSelectMask(*(int **)(v476 + 64), v481))
          {
            v482 = (uint64_t *)v1235[0];
            if (v1235[0] == (llvm::APInt *)v477)
            {
              v1011 = *(uint64_t **)(a1 + 24);
              v1012 = (uint64_t *)v1237;
              *(_QWORD *)v1239 = "sel";
              *(_WORD *)&v1239[32] = 259;
              v1013 = (uint64_t)v474;
              v1014 = (_QWORD *)v477;
              goto LABEL_1793;
            }
            if (v1237 == (llvm::APInt *)v477)
            {
              v1033 = *(uint64_t **)(a1 + 24);
              *(_QWORD *)v1239 = "sel";
              *(_WORD *)&v1239[32] = 259;
              v1034 = (uint64_t)v474;
              v487 = (llvm::APInt *)v477;
LABEL_1833:
              v1035 = llvm::IRBuilderBase::CreateSelect(v1033, v1034, v482, (uint64_t)v487, (uint64_t)v1239, (unsigned __int8 *)a2);
              v1036 = (char *)operator new(0xA8uLL);
              *((_DWORD *)v1036 + 21) = *((_DWORD *)v1036 + 21) & 0x38000000 | 2;
              BitOrPointerCast = (uint64_t)(v1036 + 64);
              *(_QWORD *)v1036 = 0;
              *((_QWORD *)v1036 + 1) = 0;
              *((_QWORD *)v1036 + 2) = 0;
              *((_QWORD *)v1036 + 3) = v1036 + 64;
              *((_QWORD *)v1036 + 4) = 0;
              *((_QWORD *)v1036 + 5) = 0;
              *((_QWORD *)v1036 + 6) = 0;
              *((_QWORD *)v1036 + 7) = v1036 + 64;
              v1021 = v1237;
              size = __dst.__r_.__value_.__l.__size_;
              v1018 = (void *)__dst.__r_.__value_.__r.__words[0];
              *(_WORD *)&v1239[32] = 257;
              v1020 = (_BYTE **)(v1036 + 64);
              v1017 = v1035;
              goto LABEL_1834;
            }
          }
        }
      }
    }
    *(_QWORD *)v1239 = v1235;
    *(_QWORD *)&v1239[8] = &v1237;
    *(_QWORD *)&v1239[16] = &__dst;
    if (!sub_1C58439D4((uint64_t)v1239, v477))
      goto LABEL_844;
    v483 = __dst.__r_.__value_.__r.__words[0] + 4 * __dst.__r_.__value_.__l.__size_;
    v484 = wmemchr((__int32 *)__dst.__r_.__value_.__l.__data_, -1, __dst.__r_.__value_.__l.__size_);
    v485 = v484 ? v484 : (__int32 *)v483;
    if (v485 != (__int32 *)(__dst.__r_.__value_.__r.__words[0] + 4 * __dst.__r_.__value_.__l.__size_))
      goto LABEL_844;
    v486 = *(unsigned int *)(**(_QWORD **)(v477 - 64) + 32);
    if ((_DWORD)v486 != *(_DWORD *)(v477 + 72)
      || !llvm::ShuffleVectorInst::isSelectMask(*(int **)(v477 + 64), v486))
    {
      goto LABEL_844;
    }
    v487 = v1235[0];
    if (v1235[0] != (llvm::APInt *)v476)
    {
      if (v1237 != (llvm::APInt *)v476)
      {
LABEL_844:
        BitOrPointerCast = 0;
        goto LABEL_845;
      }
      v1033 = *(uint64_t **)(a1 + 24);
      *(_QWORD *)v1239 = "sel";
      *(_WORD *)&v1239[32] = 259;
      v1034 = (uint64_t)v474;
      v482 = (uint64_t *)v476;
      goto LABEL_1833;
    }
    v1011 = *(uint64_t **)(a1 + 24);
    v1014 = v1237;
    *(_QWORD *)v1239 = "sel";
    *(_WORD *)&v1239[32] = 259;
    v1013 = (uint64_t)v474;
    v1012 = (uint64_t *)v476;
LABEL_1793:
    v1015 = llvm::IRBuilderBase::CreateSelect(v1011, v1013, v1012, (uint64_t)v1014, (uint64_t)v1239, (unsigned __int8 *)a2);
    v1016 = (char *)operator new(0xA8uLL);
    *((_DWORD *)v1016 + 21) = *((_DWORD *)v1016 + 21) & 0x38000000 | 2;
    BitOrPointerCast = (uint64_t)(v1016 + 64);
    *(_QWORD *)v1016 = 0;
    *((_QWORD *)v1016 + 1) = 0;
    *((_QWORD *)v1016 + 2) = 0;
    *((_QWORD *)v1016 + 3) = v1016 + 64;
    *((_QWORD *)v1016 + 4) = 0;
    *((_QWORD *)v1016 + 5) = 0;
    *((_QWORD *)v1016 + 6) = 0;
    *((_QWORD *)v1016 + 7) = v1016 + 64;
    v1017 = v1235[0];
    size = __dst.__r_.__value_.__l.__size_;
    v1018 = (void *)__dst.__r_.__value_.__r.__words[0];
    *(_WORD *)&v1239[32] = 257;
    v1020 = (_BYTE **)(v1016 + 64);
    v1021 = v1015;
LABEL_1834:
    llvm::ShuffleVectorInst::ShuffleVectorInst(v1020, v1017, (uint64_t)v1021, v1018, size, (uint64_t)v1239, 0);
    goto LABEL_845;
  }
LABEL_852:
  if ((*(_DWORD *)(*(_QWORD *)v1226 + 8) & 0xFE) == 0x12)
    goto LABEL_924;
  v488 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(v488 + 184))
    llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)(a1 + 56));
  if (!*(_DWORD *)(v488 + 24))
    goto LABEL_924;
  data = 0;
  LODWORD(v1252) = 1;
  LODWORD(v1253) = 1;
  *((_QWORD *)&v1252 + 1) = 0;
  v489 = *(_QWORD *)(a1 + 56);
  v490 = *(_QWORD *)(a1 + 72);
  v491 = a2;
  if (!*((_QWORD *)a2 + 5))
  {
    if (!v1226 || *((unsigned __int8 *)v1226 + 16) < 0x1Cu || (v491 = v1226, !*((_QWORD *)v1226 + 5)))
      v491 = 0;
  }
  *(_QWORD *)v1239 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v1239[8] = v489;
  *(_QWORD *)&v1239[16] = v491;
  *(_QWORD *)&v1239[24] = v490;
  *(_QWORD *)&v1239[32] = 0;
  v1239[40] = 1;
  sub_1C4F82B7C((uint64_t)v1226, &data, 0, (const llvm::DataLayout **)v1239);
  v492 = v1253;
  v493 = v1221;
  if (v1253 > 0x40)
  {
    v501 = 0;
    v502 = ((unint64_t)v1253 + 63) >> 6;
    do
    {
      v353 = v502-- < 1;
      if (v353)
        break;
      v503 = *(_QWORD *)(*((_QWORD *)&v1252 + 1) + 8 * v502);
      v501 += __clz(v503);
    }
    while (!v503);
    v504 = v1253 | 0xFFFFFFC0;
    if ((v1253 & 0x3F) == 0)
      v504 = 0;
    if (v501 + v504 == (_DWORD)v1253 - 1)
      goto LABEL_920;
  }
  else if (*((_QWORD *)&v1252 + 1) == 1)
  {
    goto LABEL_920;
  }
  if (v1252 > 0x40)
  {
    v528 = 0;
    v529 = ((unint64_t)v1252 + 63) >> 6;
    do
    {
      v353 = v529-- < 1;
      if (v353)
        break;
      v530 = *(_QWORD *)(*(_QWORD *)&data + 8 * v529);
      v528 += __clz(v530);
    }
    while (!v530);
    v531 = v1252 | 0xFFFFFFC0;
    if ((v1252 & 0x3F) == 0)
      v531 = 0;
    v493 = v1219;
    if (v528 + v531 == (_DWORD)v1252 - 1)
      goto LABEL_920;
  }
  else
  {
    v493 = v1219;
    if (*(_QWORD *)&data == 1)
    {
LABEL_920:
      BitOrPointerCast = (uint64_t)sub_1C577F888(a1, a2, v493);
      v505 = 0;
      v492 = v1253;
      goto LABEL_921;
    }
  }
  v505 = 1;
LABEL_921:
  if (v492 >= 0x41 && *((_QWORD *)&v1252 + 1))
    MEMORY[0x1CAA32F9C](*((_QWORD *)&v1252 + 1), 0x1000C8000313F17, v493);
  if (v1252 >= 0x41 && *(_QWORD *)&data)
    MEMORY[0x1CAA32F9C](*(_QWORD *)&data, 0x1000C8000313F17, v493);
  if (!v505)
    return (llvm::UndefValue **)BitOrPointerCast;
LABEL_924:
  v532 = (_QWORD *)*v1222;
  if (!*(_QWORD *)v1222)
    goto LABEL_944;
  v533 = *((unsigned __int8 *)v532 + 16);
  if (v533 < 0x1C || v533 - 83 < 0xFFFFFFFE)
    goto LABEL_944;
  v535 = *(v532 - 8);
  if (!v535)
    goto LABEL_944;
  v536 = *(v532 - 4);
  if (!v536)
    goto LABEL_944;
  v537 = *v1224;
  if (*v1224 == v535)
    goto LABEL_944;
  if (v537 == v536)
    goto LABEL_944;
  v538 = *v1223;
  if (*v1223 == v535)
    goto LABEL_944;
  if (v538 == v536)
    goto LABEL_944;
  v539 = *(uint64_t **)(a1 + 24);
  data = 0;
  v1246.__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)v1239 = &data;
  if (!sub_1C57E819C((_QWORD **)v1239, v535))
    goto LABEL_944;
  v1242 = &v1246;
  if ((sub_1C57E819C(&v1242, v536) & 1) == 0)
    goto LABEL_944;
  v1242 = 0;
  __dst.__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)v1239 = &v1242;
  if (!sub_1C57E819C((_QWORD **)v1239, v537))
    goto LABEL_944;
  v1235[0] = (llvm::APInt *)&__dst;
  if ((sub_1C57E819C((_QWORD **)v1235, v538) & 1) == 0)
    goto LABEL_944;
  if (v1242 == *(_QWORD **)&data && __dst.__r_.__value_.__r.__words[0] == v1246.__r_.__value_.__r.__words[0])
  {
    *(_WORD *)&v1239[32] = 257;
    v1089 = v539;
    v1090 = (uint64_t)v532;
    v1091 = (uint64_t *)v535;
    v1092 = v536;
    goto LABEL_1916;
  }
  if (v1242 == (_QWORD *)v1246.__r_.__value_.__l.__data_ && __dst.__r_.__value_.__r.__words[0] == *(_QWORD *)&data)
  {
    *(_WORD *)&v1239[32] = 257;
    v1089 = v539;
    v1090 = (uint64_t)v532;
    v1091 = (uint64_t *)v536;
    v1092 = v535;
LABEL_1916:
    v1093 = llvm::IRBuilderBase::CreateSelect(v1089, v1090, v1091, v1092, (uint64_t)v1239, (unsigned __int8 *)a2);
    v1094 = *(llvm::Value **)a2;
    *(_WORD *)&v1239[32] = 257;
    BitOrPointerCast = (uint64_t)llvm::CastInst::CreateBitOrPointerCast(v1093, v1094, (llvm::Type *)v1239, 0, v1095);
    if (BitOrPointerCast)
      return (llvm::UndefValue **)BitOrPointerCast;
  }
LABEL_944:
  v540 = (_QWORD **)*((_QWORD *)a2 + 1);
  if (!v540
    || v540[1]
    || (v545 = v540[3]) == 0
    || *((_BYTE *)v545 + 16) != 85
    || (v541 = (_QWORD *)*(v545 - 12), v541 != *(_QWORD **)v1222)
    || *(v545 - 4) != *v1224 && *(v545 - 8) != *v1223)
  {
    v541 = (_QWORD *)*v1222;
    if (*v1222)
    {
      if (*((_BYTE *)v541 + 16) == 92 && *(_DWORD *)v541[8] == 1)
      {
        v542 = *(v541 - 4);
        if (*(_BYTE *)(v542 + 16) == 64)
        {
          v543 = *v1224;
          if (!*v1224 || *(_BYTE *)(v543 + 16) != 92 || **(_DWORD **)(v543 + 64))
            goto LABEL_953;
          v617 = *(_QWORD *)(v543 - 32);
          if (*(_BYTE *)(v617 + 16) != 64)
            v617 = 0;
          if (v617 && v617 == v542 && (v16 = *(_QWORD *)(v542 - 64), v16 == *v1223))
          {
            if (v16)
              goto LABEL_9;
          }
          else
          {
LABEL_953:
            v16 = *v1223;
            if (*v1223 && *(_BYTE *)(v16 + 16) == 92 && !**(_DWORD **)(v16 + 64))
            {
              v544 = *(_QWORD *)(v16 - 32);
              if (*(_BYTE *)(v544 + 16) != 64)
                v544 = 0;
              if (v544 && v544 == v542 && *(_QWORD *)(v542 - 64) == v543)
                goto LABEL_9;
            }
          }
        }
      }
    }
  }
  if (v541)
  {
    v546 = *((unsigned __int8 *)v541 + 16);
    if (v546 >= 0x1C && v546 - 83 >= 0xFFFFFFFE)
    {
      v547 = *(v541 - 8);
      if (v547)
      {
        v548 = (unsigned __int8 *)*(v541 - 4);
        if (v548)
        {
          if (v548[16] <= 0x14u)
          {
            v549 = *(uint64_t **)(a1 + 64);
            v550 = *((_WORD *)v541 + 9);
            v551 = v550 & 0x3F;
            if ((v550 & 0x3E) == 0x20)
            {
              v552 = v551 == 32 ? 1 : 2;
            }
            else if (v551 == 1)
            {
              v552 = 1;
            }
            else
            {
              if (v551 != 14)
                goto LABEL_1335;
              v552 = 2;
            }
            v608 = (uint64_t)v1222[4 * v552];
            if (v608)
            {
              v609 = *(unsigned __int8 *)(v608 + 16);
              if (v609 >= 0x1C && v609 - 59 >= 0xFFFFFFEE)
              {
                BinOpIdentity = llvm::ConstantExpr::getBinOpIdentity((llvm::ConstantExpr *)(v609 - 28), *(llvm::ConstantFP **)v608, (llvm::Type *)1, 0);
                if (BinOpIdentity == (llvm::Value **)v548
                  || v551 <= 0xF
                  && BinOpIdentity
                  && sub_1C4E7BBEC((uint64_t)v1239, (llvm::Constant *)BinOpIdentity)
                  && sub_1C4E7BBEC((uint64_t)&data, (llvm::Constant *)v548))
                {
                  isCommutative = llvm::Instruction::isCommutative((llvm::Instruction *)v608);
                  v613 = *(_QWORD *)(v608 - 64);
                  if ((isCommutative & 1) != 0)
                  {
                    v614 = *(_QWORD *)(v608 - 32);
                    if (!v613 || v547 != v614)
                    {
                      if (!v614)
                        goto LABEL_1335;
                      v22 = v547 == v613;
                      v613 = *(_QWORD *)(v608 - 32);
                      if (!v22)
                        goto LABEL_1335;
                    }
                  }
                  else if (!v613 || v547 != *(_QWORD *)(v608 - 32))
                  {
                    goto LABEL_1335;
                  }
                  if (!sub_1C4774A9C(v608)
                    || (*(_BYTE *)(v608 + 17) & 0x10) != 0
                    || llvm::CannotBeNegativeZero(v613, v549, 0))
                  {
                    BitOrPointerCast = sub_1C577E2C8(a1, (uint64_t)a2, v552, v613);
                    if (BitOrPointerCast)
                      return (llvm::UndefValue **)BitOrPointerCast;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_1335:
  v753 = *(uint64_t **)(a1 + 24);
  v754 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v754 = (llvm::Type *)**((_QWORD **)v754 + 2);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v754);
  v756 = (uint8x8_t)vcnt_s8((int8x8_t)PrimitiveSizeInBits);
  v756.i16[0] = vaddlv_u8(v756);
  if (v756.i32[0] != 1)
    goto LABEL_1340;
  v757 = *v1223;
  v758 = *(_QWORD *)(*v1223 + 8);
  if (!v758 || *(_QWORD *)(v758 + 8))
    goto LABEL_1340;
  v936 = PrimitiveSizeInBits;
  v937 = *(unsigned __int8 *)(v757 + 16);
  if (v937 == 5)
  {
    if (*(_WORD *)(v757 + 18) != 29)
      goto LABEL_1340;
    v941 = (uint64_t *)(v757 - 32 * (*(_DWORD *)(v757 + 20) & 0x7FFFFFF));
    v938 = *v941;
    if (!*v941)
      goto LABEL_1340;
    v942 = *(unsigned __int8 *)(v938 + 16);
    if (v942 < 0x1C || v942 - 59 < 0xFFFFFFEE)
      goto LABEL_1340;
    v940 = v941[4];
    if (!v940)
      goto LABEL_1340;
  }
  else
  {
    if (v937 != 57)
      goto LABEL_1340;
    v938 = *(_QWORD *)(v757 - 64);
    if (!v938)
      goto LABEL_1340;
    v939 = *(unsigned __int8 *)(v938 + 16);
    if (v939 < 0x1C)
      goto LABEL_1340;
    if (v939 - 59 < 0xFFFFFFEE)
      goto LABEL_1340;
    v940 = *(_QWORD *)(v757 - 32);
    if (!v940)
      goto LABEL_1340;
  }
  v944 = *(unsigned __int8 *)(v940 + 16);
  if (v944 < 0x1C)
    goto LABEL_1340;
  if (v944 - 59 < 0xFFFFFFEE)
    goto LABEL_1340;
  v1246.__r_.__value_.__r.__words[0] = 0;
  v1242 = 0;
  __dst.__r_.__value_.__r.__words[0] = 0;
  v1235[0] = 0;
  *(_QWORD *)v1239 = &v1246;
  *(_QWORD *)&v1239[8] = &__dst;
  *(_QWORD *)&v1239[16] = &__dst;
  v945 = *(_QWORD *)(v938 + 8);
  if (!v945)
    goto LABEL_1340;
  if (*(_QWORD *)(v945 + 8))
    goto LABEL_1340;
  if (!sub_1C58435A4((_QWORD **)v1239, v938))
    goto LABEL_1340;
  data = (int8x8_t)&v1242;
  *(_QWORD *)&v1252 = v1235;
  *((_QWORD *)&v1252 + 1) = v1235;
  v946 = *(_QWORD *)(v940 + 8);
  if (!v946
    || *(_QWORD *)(v946 + 8)
    || !sub_1C58435A4(&data, v940)
    || *(unsigned __int8 *)(v938 + 16) == *(unsigned __int8 *)(v940 + 16))
  {
    goto LABEL_1340;
  }
  v947 = v1235[0];
  v948 = (llvm::APInt *)__dst.__r_.__value_.__r.__words[0];
  if (*(_BYTE *)(v938 + 16) == 54)
  {
    v949 = (_QWORD *)v1246.__r_.__value_.__r.__words[0];
    v1246.__r_.__value_.__r.__words[0] = (std::string::size_type)v1242;
    v1242 = v949;
    __dst.__r_.__value_.__l.__data_ = (std::string::pointer)v1235[0];
    v1235[0] = v948;
    v950 = (std::string::size_type)v947;
  }
  else
  {
    v950 = __dst.__r_.__value_.__r.__words[0];
    v948 = v1235[0];
  }
  v1167 = v936;
  *(_DWORD *)&v1239[8] = 64;
  *(_QWORD *)v1239 = v936;
  *(_QWORD *)&v1239[16] = v950;
  v1168 = *((_QWORD *)v948 + 1);
  if (!v1168 || (v1169 = *(_QWORD *)(v1168 + 8)) != 0)
  {
LABEL_2049:
    v1170 = 0;
    goto LABEL_2050;
  }
  v1185 = *((unsigned __int8 *)v948 + 16);
  if (v1185 == 43)
  {
    if (sub_1C4D8A7F0((llvm::APInt *)v1239, *((unsigned __int8 **)v948 - 8))
      && *(_QWORD *)&v1239[16] == *((_QWORD *)v948 - 4))
    {
      v1170 = 1;
      goto LABEL_2050;
    }
    goto LABEL_2049;
  }
  if (v1185 == 5)
    LOBYTE(v1169) = *((_WORD *)v948 + 9) == 15
                 && sub_1C4D8A86C((llvm::APInt *)v1239, *((llvm::Constant **)v948 - 4 * (*((_DWORD *)v948 + 5) & 0x7FFFFFF)))&& *(_QWORD *)&v1239[16] == ((_QWORD *)v948 - 4 * (*((_DWORD *)v948 + 5) & 0x7FFFFFF))[4];
  v1170 = (v1185 == 5) & v1169;
LABEL_2050:
  if (*(_DWORD *)&v1239[8] >= 0x41u && *(_QWORD *)v1239)
    MEMORY[0x1CAA32F9C](*(_QWORD *)v1239, 0x1000C8000313F17);
  v1171 = (llvm::APInt *)__dst.__r_.__value_.__r.__words[0];
  if ((v1170 & 1) == 0)
  {
    *(_DWORD *)&v1239[8] = 64;
    *(_QWORD *)v1239 = v1167;
    *(llvm::APInt **)&v1239[16] = v1235[0];
    v1173 = *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8);
    if (!v1173)
      goto LABEL_2057;
    v1174 = *(_QWORD *)(v1173 + 8);
    if (v1174)
      goto LABEL_2057;
    v1190 = *(unsigned __int8 *)(__dst.__r_.__value_.__r.__words[0] + 16);
    if (v1190 != 43)
    {
      if (v1190 == 5)
        LOBYTE(v1174) = *(_WORD *)(__dst.__r_.__value_.__r.__words[0] + 18) == 15
                     && sub_1C4D8A86C((llvm::APInt *)v1239, *(llvm::Constant **)(__dst.__r_.__value_.__r.__words[0]- 32 * (*(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 20) & 0x7FFFFFF)))&& *(_QWORD *)&v1239[16] == ((_QWORD *)v1171 - 4 * (*((_DWORD *)v1171 + 5) & 0x7FFFFFF))[4];
      v1175 = (v1190 == 5) & v1174;
      goto LABEL_2058;
    }
    if (sub_1C4D8A7F0((llvm::APInt *)v1239, *(unsigned __int8 **)(__dst.__r_.__value_.__r.__words[0] - 64))
      && *(_QWORD *)&v1239[16] == *((_QWORD *)v1171 - 4))
    {
      v1175 = 1;
    }
    else
    {
LABEL_2057:
      v1175 = 0;
    }
LABEL_2058:
    if (*(_DWORD *)&v1239[8] >= 0x41u && *(_QWORD *)v1239)
      MEMORY[0x1CAA32F9C](*(_QWORD *)v1239, 0x1000C8000313F17);
    if (!v1175)
      goto LABEL_1340;
    v1172 = __dst.__r_.__value_.__r.__words[0];
    v1171 = v1235[0];
    goto LABEL_2063;
  }
  v1172 = __dst.__r_.__value_.__r.__words[0];
LABEL_2063:
  v1176 = (_QWORD *)*v1224;
  if ((v1171 != (llvm::APInt *)v1172 || v1176 == (_QWORD *)v1246.__r_.__value_.__l.__data_)
    && (v1171 == (llvm::APInt *)v1172 || v1176 == v1242))
  {
    v1177 = (uint64_t)*v1222;
    LODWORD(v1237) = 0;
    *(_QWORD *)v1239 = &v1237;
    *(_QWORD *)&v1239[8] = v1171;
    v1178 = *(_QWORD *)(v1177 + 8);
    if (v1178)
    {
      if (!*(_QWORD *)(v1178 + 8) && sub_1C4D8ABCC((uint64_t)v1239, v1177) && (_DWORD)v1237 == 32)
      {
        if (v1246.__r_.__value_.__l.__data_ != (std::string::pointer)v1242)
        {
          if (v1171 == (llvm::APInt *)v1172)
          {
            if ((sub_1C4F8BE80((uint64_t ***)v1242, 0, 0, 0, 0, 1) & 1) == 0)
            {
              *(_WORD *)&v1239[32] = 257;
              v1242 = sub_1C57A4274(v753, v1242, (uint64_t)v1239);
            }
          }
          else if ((sub_1C4F8BE80((uint64_t ***)v1246.__r_.__value_.__l.__data_, 0, 0, 0, 0, 1) & 1) == 0)
          {
            *(_WORD *)&v1239[32] = 257;
            v1246.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C57A4274(v753, v1246.__r_.__value_.__l.__data_, (uint64_t)v1239);
          }
        }
        if (v1171 == (llvm::APInt *)v1172)
          v1201 = 148;
        else
          v1201 = 149;
        v1202 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
        *(_QWORD *)v1239 = *(_QWORD *)a2;
        v1203 = llvm::Intrinsic::getDeclaration(v1202, v1201, (uint64_t *)v1239, 1);
        v1204 = *(_QWORD *)a2;
        *(_WORD *)&v1239[32] = 257;
        v1205 = sub_1C4773E38(v753, 39, (unsigned __int8 *)v1171, v1204, (uint64_t)v1239);
        if (v1203)
          v1206 = *(uint64_t ***)(v1203 + 24);
        else
          v1206 = 0;
        data = (int8x8_t)v1246.__r_.__value_.__l.__data_;
        *(_QWORD *)&v1252 = v1242;
        *((_QWORD *)&v1252 + 1) = v1205;
        *(_WORD *)&v1239[32] = 257;
        v1207 = (char *)operator new(0xD0uLL);
        v1208 = 0;
        BitOrPointerCast = (uint64_t)(v1207 + 128);
        *((_DWORD *)v1207 + 37) = *((_DWORD *)v1207 + 37) & 0x38000000 | 4;
        do
        {
          v1209 = &v1207[v1208];
          *(_QWORD *)v1209 = 0;
          *((_QWORD *)v1209 + 1) = 0;
          *((_QWORD *)v1209 + 2) = 0;
          *((_QWORD *)v1209 + 3) = BitOrPointerCast;
          v1208 += 32;
        }
        while (v1208 != 128);
        *((_QWORD *)v1207 + 16) = *v1206[2];
        *((_QWORD *)v1207 + 17) = 0;
        v1207[144] = 84;
        v1207[145] = 0;
        *((_WORD *)v1207 + 73) = 0;
        *((_DWORD *)v1207 + 37) = *((_DWORD *)v1207 + 37) & 0xC0000000 | 4;
        *(_OWORD *)(v1207 + 152) = 0u;
        *(_OWORD *)(v1207 + 168) = 0u;
        *((_DWORD *)v1207 + 46) = 0;
        *((_QWORD *)v1207 + 24) = 0;
        p_data = (std::string *)&data;
        v1061 = (uint64_t ***)(v1207 + 128);
        v1062 = v1206;
        v1063 = v1203;
        v1064 = 3;
        goto LABEL_1873;
      }
    }
  }
LABEL_1340:
  v759 = *(uint64_t **)(a1 + 24);
  v760 = *((_QWORD *)a2 - 12);
  v761 = (unsigned __int8 *)*((_QWORD *)a2 - 8);
  v762 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  v763 = *(llvm::ConstantInt **)a2;
  v1236 = 0;
  v1237 = 0;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = (unint64_t)&v1237;
  if (!sub_1C4E7A604((uint64_t)&__dst, v761))
    goto LABEL_1413;
  v1235[0] = (llvm::APInt *)&v1236;
  v1235[1] = 0;
  if (!sub_1C4E7A604((uint64_t)v1235, v762))
    goto LABEL_1413;
  v764 = v1237;
  v765 = *((_QWORD *)v1237 + 1);
  if ((_UNKNOWN *)v765 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v1252, (llvm::APInt *)((char *)v1237 + 8));
  }
  else
  {
    *(_QWORD *)&v1252 = *((_QWORD *)v1237 + 1);
    if ((*(_DWORD *)(v765 + 8) + 64) >= 0x80)
      *((_QWORD *)&v1252 + 1) = operator new[]();
    BYTE4(v1253) = BYTE4(v1253) & 0xF7 | *((_BYTE *)v764 + 28) & 8;
    v766 = *((_BYTE *)v764 + 28);
    v767 = v766 & 7;
    BYTE4(v1253) = BYTE4(v1253) & 0xF8 | v766 & 7;
    LODWORD(v1253) = *((_DWORD *)v764 + 6);
    v769 = (v766 & 6) != 0 && v767 != 3;
    if (v767 == 1 || v769)
    {
      v770 = *(unsigned int *)(v1252 + 8);
      if ((v770 - 64) <= 0xFFFFFF7F)
        v771 = (_QWORD *)*((_QWORD *)&v1252 + 1);
      else
        v771 = (_QWORD *)&v1252 + 1;
      v774 = (uint64_t *)*((_QWORD *)v764 + 2);
      v773 = (uint64_t *)((char *)v764 + 16);
      v772 = v774;
      if ((*(_DWORD *)(*(v773 - 1) + 8) - 64) >= 0xFFFFFF80)
        v772 = v773;
      if (v770 <= 0xFFFFFFBF)
      {
        v775 = (unint64_t)(v770 + 64) >> 6;
        do
        {
          v776 = *v772++;
          *v771++ = v776;
          --v775;
        }
        while (v775);
      }
    }
  }
  v777 = (void *)v1252;
  if ((_UNKNOWN *)v1252 != &unk_1C866F1C0)
  {
    if ((v1253 & 0x800000000) != 0)
      BYTE4(v1253) ^= 8u;
    goto LABEL_1363;
  }
  if ((*(_BYTE *)(*((_QWORD *)&v1252 + 1) + 28) & 8) != 0)
  {
    llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v1252);
    v777 = (void *)v1252;
    if ((_UNKNOWN *)v1252 != &unk_1C866F1C0)
    {
LABEL_1363:
      v778 = *((_QWORD *)&v1252 + 1);
      *(_DWORD *)&v1239[24] = v1253;
      v1239[28] = v1239[28] & 0xF0 | BYTE4(v1253) & 0xF;
      goto LABEL_1364;
    }
  }
  v778 = *((_QWORD *)&v1252 + 1);
  *((_QWORD *)&v1252 + 1) = 0;
  v777 = &unk_1C866F1C0;
LABEL_1364:
  *(_QWORD *)&v1239[8] = v777;
  *(_QWORD *)&v1239[16] = v778;
  *(_QWORD *)&v1252 = &unk_1C866F210;
  v779 = v1236;
  v780 = v1236[1];
  if ((_UNKNOWN *)v780 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v1243, (const llvm::detail::DoubleAPFloat *)(v1236 + 1));
  }
  else
  {
    *(_QWORD *)&v1243 = v1236[1];
    if ((*(_DWORD *)(v780 + 8) + 64) >= 0x80)
      *((_QWORD *)&v1243 + 1) = operator new[]();
    v1245 = v1245 & 0xF7 | *((_BYTE *)v779 + 28) & 8;
    v781 = *((_BYTE *)v779 + 28);
    v782 = v781 & 7;
    v1245 = v1245 & 0xF8 | v781 & 7;
    v1244 = *((_DWORD *)v779 + 6);
    v784 = (v781 & 6) != 0 && v782 != 3;
    if (v782 == 1 || v784)
    {
      v785 = *(unsigned int *)(v1243 + 8);
      if ((v785 - 64) <= 0xFFFFFF7F)
        v786 = (_QWORD *)*((_QWORD *)&v1243 + 1);
      else
        v786 = (_QWORD *)&v1243 + 1;
      v789 = (uint64_t *)v779[2];
      v788 = v779 + 2;
      v787 = v789;
      if ((*(_DWORD *)(*(v788 - 1) + 8) - 64) >= 0xFFFFFF80)
        v787 = v788;
      if (v785 <= 0xFFFFFFBF)
      {
        v790 = (unint64_t)(v785 + 64) >> 6;
        do
        {
          v791 = *v787++;
          *v786++ = v791;
          --v790;
        }
        while (v790);
      }
    }
  }
  v792 = (void *)v1243;
  if ((_UNKNOWN *)v1243 != &unk_1C866F1C0)
  {
    if ((v1245 & 8) != 0)
      v1245 ^= 8u;
    goto LABEL_1385;
  }
  if ((*(_BYTE *)(*((_QWORD *)&v1243 + 1) + 28) & 8) != 0)
  {
    llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v1243);
    v792 = (void *)v1243;
    if ((_UNKNOWN *)v1243 != &unk_1C866F1C0)
    {
LABEL_1385:
      v793 = *((_QWORD *)&v1243 + 1);
      v1247 = v1244;
      v1248 = v1248 & 0xF0 | v1245 & 0xF;
      goto LABEL_1386;
    }
  }
  v793 = *((_QWORD *)&v1243 + 1);
  *((_QWORD *)&v1243 + 1) = 0;
  v792 = &unk_1C866F1C0;
LABEL_1386:
  v1246.__r_.__value_.__l.__size_ = (std::string::size_type)v792;
  v1246.__r_.__value_.__r.__words[2] = v793;
  *(_QWORD *)&v1243 = &unk_1C866F210;
  v794 = sub_1C47ECB98((uint64_t)v1239, (uint64_t)&v1246);
  if ((_UNKNOWN *)v1246.__r_.__value_.__l.__size_ == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v1246.__r_.__value_.__r.__words[2]);
  }
  else if ((*(_DWORD *)(v1246.__r_.__value_.__l.__size_ + 8) - 64) <= 0xFFFFFF7F
         && v1246.__r_.__value_.__r.__words[2])
  {
    MEMORY[0x1CAA32F9C](v1246.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
  }
  if ((_UNKNOWN *)v1243 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v1243 + 1);
  }
  else if ((*(_DWORD *)(v1243 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v1243 + 1))
  {
    MEMORY[0x1CAA32F9C](*((_QWORD *)&v1243 + 1), 0x1000C8000313F17);
  }
  if (*(_UNKNOWN **)&v1239[8] == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v1239[16]);
  }
  else if ((*(_DWORD *)(*(_QWORD *)&v1239[8] + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v1239[16])
  {
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v1239[16], 0x1000C8000313F17);
  }
  if ((_UNKNOWN *)v1252 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v1252 + 1);
  }
  else if ((*(_DWORD *)(v1252 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v1252 + 1))
  {
    MEMORY[0x1CAA32F9C](*((_QWORD *)&v1252 + 1), 0x1000C8000313F17);
  }
  if (v794)
  {
    __dst.__r_.__value_.__r.__words[0] = 0;
    v1235[0] = 0;
    LOBYTE(v1229) = 0;
    v1231[0] = 0;
    *(_QWORD *)v1239 = v1231;
    *(_QWORD *)&v1239[8] = &__dst;
    *(_QWORD *)&v1239[16] = v1235;
    *(_QWORD *)&v1239[24] = 0;
    v795 = *(_QWORD *)(v760 + 8);
    if (v795)
    {
      if (!*(_QWORD *)(v795 + 8) && *(_BYTE *)(v760 + 16) == 81)
      {
        if (sub_1C57E819C((_QWORD **)&v1239[8], *(_QWORD *)(v760 - 64)))
        {
          if (sub_1C4D89F84((uint64_t)&v1239[16], *(unsigned __int8 **)(v760 - 32)))
          {
            **(_DWORD **)v1239 = *(_WORD *)(v760 + 18) & 0x3F;
            if (sub_1C57921EC(v1231[0], v1235[0], &v1229))
            {
              v796 = (uint64_t)v1221;
              if (*(llvm::ConstantInt **)__dst.__r_.__value_.__l.__data_ == v763)
              {
                v797 = v1237;
                v798 = (void *)*((_QWORD *)v1237 + 1);
                v799 = v1237;
                if (v798 == &unk_1C866F1C0)
                  v799 = (llvm::APInt *)*((_QWORD *)v1237 + 2);
                if (v1229 != ((*((unsigned __int8 *)v799 + 28) >> 3) & 1))
                {
                  *(_WORD *)&v1239[32] = 257;
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C4772890(v759, (uint64_t)__dst.__r_.__value_.__l.__data_, (uint64_t)v1239, 0);
                  v797 = v1237;
                  v798 = (void *)*((_QWORD *)v1237 + 1);
                }
                if (v798 == &unk_1C866F1C0)
                  v797 = (llvm::APInt *)*((_QWORD *)v797 + 2);
                if ((*((_BYTE *)v797 + 28) & 8) != 0)
                  v800 = (std::string::size_type)v762;
                else
                  v800 = (std::string::size_type)v761;
                v801 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
                *(_QWORD *)v1239 = *(_QWORD *)a2;
                v802 = llvm::Intrinsic::getDeclaration(v801, 19, (uint64_t *)v1239, 1);
                v803 = v802;
                if (v802)
                  v804 = *(uint64_t ***)(v802 + 24);
                else
                  v804 = 0;
                v1246.__r_.__value_.__r.__words[0] = v800;
                v1246.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
                *(_WORD *)&v1239[32] = 257;
                v1057 = (char *)operator new(0xB0uLL);
                v1096 = 0;
                BitOrPointerCast = (uint64_t)(v1057 + 96);
                *((_DWORD *)v1057 + 29) = *((_DWORD *)v1057 + 29) & 0x38000000 | 3;
                do
                {
                  v1097 = &v1057[v1096];
                  *(_QWORD *)v1097 = 0;
                  *((_QWORD *)v1097 + 1) = 0;
                  *((_QWORD *)v1097 + 2) = 0;
                  *((_QWORD *)v1097 + 3) = BitOrPointerCast;
                  v1096 += 32;
                }
                while (v1096 != 96);
                goto LABEL_1872;
              }
              goto LABEL_1414;
            }
          }
        }
      }
    }
  }
LABEL_1413:
  v796 = (uint64_t)v1221;
LABEL_1414:
  v805 = *(_QWORD *)(a1 + 72);
  v1213 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v1239 = 1;
  *(int64x2_t *)&v1239[8] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(_OWORD *)&v1239[24] = *(_OWORD *)&v1239[8];
  *(_QWORD *)&v1239[40] = v1241;
  p_dst = 0x400000000;
  v806 = *(int8x8_t *)((char *)a2 + 40);
  data = v806;
  v807 = (((unsigned __int32)v806.i32[0] >> 4) ^ ((unsigned __int32)v806.i32[0] >> 9)) & 3;
  v808 = &v1239[8 * v807 + 8];
  v809 = *v808;
  if (*(_QWORD *)&v806 == *v808)
  {
    v810 = 0;
  }
  else
  {
    v811 = 0;
    v812 = 1;
    while (v809 != -4096)
    {
      v810 = 0;
      if (v811)
        v813 = 0;
      else
        v813 = v809 == -8192;
      if (v813)
        v811 = v808;
      v814 = v807 + v812++;
      v807 = v814 & 3;
      v808 = &v1239[8 * v807 + 8];
      v809 = *v808;
      if (*(_QWORD *)&v806 == *v808)
        goto LABEL_1431;
    }
    if (v811)
      v815 = v811;
    else
      v815 = v808;
    v816 = (int8x8_t *)sub_1C5648ADC((uint64_t)v1239, (uint64_t)&data, &data, v815);
    *v816 = data;
    v817 = data;
    v818 = p_dst;
    if (p_dst >= HIDWORD(p_dst))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1239[40], (uint64_t)v1241, p_dst + 1, 8);
      v818 = p_dst;
    }
    *(int8x8_t *)(*(_QWORD *)&v1239[40] + 8 * v818) = v817;
    v810 = p_dst + 1;
    LODWORD(p_dst) = p_dst + 1;
  }
LABEL_1431:
  v819 = *((_DWORD *)a2 + 5);
  if ((v819 & 0x40000000) != 0)
  {
    v821 = (int8x8_t **)*((_QWORD *)a2 - 1);
    v820 = v819 & 0x7FFFFFF;
  }
  else
  {
    v820 = v819 & 0x7FFFFFF;
    v821 = (int8x8_t **)((char *)a2 - 32 * v820);
  }
  if (v820)
  {
    v822 = &v821[4 * v820];
    do
    {
      if (*v821)
        v823 = (*v821)[2].u8[0] >= 0x1Cu;
      else
        v823 = 0;
      if (v823)
      {
        v824 = (*v821)[5];
        data = v824;
        if ((v1239[0] & 1) != 0)
        {
          v825 = 4;
          v826 = &v1239[8];
        }
        else
        {
          v825 = *(_DWORD *)&v1239[16];
          if (!*(_DWORD *)&v1239[16])
          {
            v835 = 0;
LABEL_1456:
            v836 = (int8x8_t *)sub_1C5648ADC((uint64_t)v1239, (uint64_t)&data, &data, v835);
            *v836 = data;
            v837 = data;
            v838 = p_dst;
            if (p_dst >= (unint64_t)HIDWORD(p_dst))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1239[40], (uint64_t)v1241, p_dst + 1, 8);
              v838 = p_dst;
            }
            *(int8x8_t *)(*(_QWORD *)&v1239[40] + 8 * v838) = v837;
            v810 = p_dst + 1;
            LODWORD(p_dst) = p_dst + 1;
            v796 = (uint64_t)v1221;
            goto LABEL_1459;
          }
          v826 = *(_BYTE **)&v1239[8];
        }
        v827 = v825 - 1;
        v828 = v827 & (((unsigned __int32)v824.i32[0] >> 4) ^ ((unsigned __int32)v824.i32[0] >> 9));
        v829 = &v826[8 * v828];
        v830 = *v829;
        if (*(_QWORD *)&v824 != *v829)
        {
          v831 = 0;
          v832 = 1;
          while (v830 != -4096)
          {
            if (v831)
              v833 = 0;
            else
              v833 = v830 == -8192;
            if (v833)
              v831 = v829;
            v834 = v828 + v832++;
            v828 = v834 & v827;
            v829 = &v826[8 * v828];
            v830 = *v829;
            if (*(_QWORD *)&v824 == *v829)
              goto LABEL_1459;
          }
          if (v831)
            v835 = v831;
          else
            v835 = v829;
          goto LABEL_1456;
        }
      }
LABEL_1459:
      v821 += 4;
    }
    while (v821 != v822);
  }
  v839 = *(const llvm::BasicBlock ***)&v1239[40];
  if (!v810)
  {
    v935 = 0;
    v841 = (uint64_t)v1219;
    goto LABEL_1659;
  }
  v840 = *(_QWORD *)&v1239[40] + 8 * v810;
  v841 = (uint64_t)v1219;
  do
  {
    v842 = *v839;
    v843 = *(_QWORD *)(v805 + 24);
    v844 = *(unsigned int *)(v805 + 40);
    if ((_DWORD)v844)
    {
      LODWORD(v845) = ((v842 >> 4) ^ (v842 >> 9)) & (v844 - 1);
      v846 = (const llvm::BasicBlock **)(v843 + 16 * v845);
      v847 = *v846;
      if (v842 == *v846)
        goto LABEL_1473;
      v848 = 1;
      while (v847 != (const llvm::BasicBlock *)-4096)
      {
        v849 = v845 + v848++;
        v845 = v849 & (v844 - 1);
        v847 = *(const llvm::BasicBlock **)(v843 + 16 * v845);
        if (v842 == v847)
        {
          v846 = (const llvm::BasicBlock **)(v843 + 16 * v845);
          goto LABEL_1473;
        }
      }
    }
    v846 = (const llvm::BasicBlock **)(v843 + 16 * v844);
LABEL_1473:
    v850 = (const llvm::BasicBlock **)*((_QWORD *)v846[1] + 1);
    if (!v850)
      goto LABEL_1513;
    v851 = *v850;
    v852 = *v1222;
    v1235[0] = 0;
    v1237 = 0;
    v853 = (_QWORD *)*((_QWORD *)v851 + 5);
    if (v853 == (_QWORD *)((char *)v851 + 40))
    {
      v858 = 0;
    }
    else
    {
      v854 = (llvm::APInt **)(v853 - 3);
      if (!v853)
        v854 = 0;
      v855 = *((unsigned __int8 *)v854 + 16);
      if ((v855 - 40) >= 0xFFFFFFF5)
        v856 = v854;
      else
        v856 = 0;
      if (v853)
      {
        if (*((_BYTE *)v856 + 16) == 30
          && (v855 - 40) >= 0xFFFFFFF5
          && (*((_DWORD *)v856 + 5) & 0x7FFFFFF) == 3
          && (llvm::APInt *)v852 == *(v856 - 12))
        {
          v866 = *(v856 - 4);
          if (v866)
          {
            v1235[0] = *(v856 - 4);
            v867 = *(v856 - 8);
            if (v867)
            {
              v1237 = v867;
              v869 = (llvm::Value **)v1223;
              v868 = (llvm::Value **)v1224;
              goto LABEL_1518;
            }
          }
        }
      }
      if ((v855 - 29) >= 0xB)
        v858 = 0;
      else
        v858 = v854;
    }
    data = v852;
    *((_QWORD *)&v1252 + 1) = v1235;
    v1253 = (uint64_t)&v1237;
    if (!v858 || *((_BYTE *)v858 + 16) != 30 || (*((_DWORD *)v858 + 5) & 0x7FFFFFF) != 3)
    {
LABEL_1512:
      v841 = (uint64_t)v1219;
      goto LABEL_1513;
    }
    v859 = (uint64_t)*(v858 - 12);
    v860 = *(unsigned __int8 *)(v859 + 16);
    if (v860 == 5)
    {
      if (*(_WORD *)(v859 + 18) != 30)
        goto LABEL_1512;
      v861 = *(_DWORD *)(v859 + 20) & 0x7FFFFFF;
      v862 = v859 - 32 * v861;
      if (*(_QWORD *)&v852 != *(_QWORD *)v862)
        goto LABEL_1507;
      if ((sub_1C4D9EED4((uint64_t)&v1252, *(llvm::Constant **)(v862 + 32)) & 1) == 0)
      {
        v852 = data;
        v861 = *(_DWORD *)(v859 + 20) & 0x7FFFFFF;
LABEL_1507:
        v863 = v859 - 32 * v861;
        if (*(_QWORD *)&v852 != *(_QWORD *)(v863 + 32)
          || !sub_1C4D9EED4((uint64_t)&v1252, *(llvm::Constant **)v863))
        {
          goto LABEL_1512;
        }
      }
    }
    else
    {
      if (v860 != 58)
        goto LABEL_1512;
      if (*(_QWORD *)&v852 != *(_QWORD *)(v859 - 64))
        goto LABEL_1500;
      if ((sub_1C4D9ED34((uint64_t)&v1252, *(llvm::Constant **)(v859 - 32)) & 1) == 0)
      {
        v852 = data;
LABEL_1500:
        if (*(_QWORD *)&v852 != *(_QWORD *)(v859 - 32)
          || (sub_1C4D9ED34((uint64_t)&v1252, *(llvm::Constant **)(v859 - 64)) & 1) == 0)
        {
          goto LABEL_1512;
        }
      }
    }
    v864 = (uint64_t)*(v858 - 4);
    if (!v864)
      goto LABEL_1512;
    **((_QWORD **)&v1252 + 1) = v864;
    v865 = (uint64_t)*(v858 - 8);
    if (!v865)
      goto LABEL_1512;
    *(_QWORD *)v1253 = v865;
    v866 = v1235[0];
    v867 = v1237;
    v868 = (llvm::Value **)v1223;
    v869 = (llvm::Value **)v1224;
    v841 = (uint64_t)v1219;
LABEL_1518:
    if (v866 == v867)
      goto LABEL_1513;
    v1211 = *v869;
    v1212 = *v868;
    v1242 = v851;
    *(_QWORD *)&v1243 = v866;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v851;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v867;
    memset(&v1246, 0, 20);
    v870 = *((_QWORD *)v842 + 1);
    if (!v870)
      goto LABEL_1529;
    while (1)
    {
      v871 = *(_QWORD *)(v870 + 24);
      v872 = *(unsigned __int8 *)(v871 + 16);
      v873 = v871 && v872 >= 0x1C;
      if (v873 && v872 - 29 <= 0xA)
        break;
      v870 = *(_QWORD *)(v870 + 8);
      if (!v870)
        goto LABEL_1529;
    }
LABEL_1574:
    v897 = *(const llvm::BasicBlock **)(v871 + 40);
    data = (int8x8_t)v897;
    if (v851 == v897 && v866 == v842)
      goto LABEL_1580;
    if (llvm::DominatorTree::dominates((llvm::DominatorTree *)v805, (const llvm::BasicBlockEdge *)&v1242, v897))
    {
      v851 = (const llvm::BasicBlock *)data;
LABEL_1580:
      v899 = llvm::Value::DoPHITranslation((uint64_t)v1212, v842, v851);
      v900 = v1246.__r_.__value_.__r.__words[2];
      if (!LODWORD(v1246.__r_.__value_.__r.__words[2]))
      {
        v917 = 0;
        goto LABEL_1610;
      }
      v901 = v1246.__r_.__value_.__r.__words[0];
      v902 = ((v851 >> 4) ^ (v851 >> 9)) & (LODWORD(v1246.__r_.__value_.__r.__words[2]) - 1);
      v903 = (int8x8_t *)(v1246.__r_.__value_.__r.__words[0] + 16 * v902);
      v904 = *v903;
      if (v851 == (const llvm::BasicBlock *)*v903)
        goto LABEL_1655;
      v905 = 0;
      v906 = 1;
      while (*(_QWORD *)&v904 != -4096)
      {
        if (v905)
          v907 = 0;
        else
          v907 = *(_QWORD *)&v904 == -8192;
        if (v907)
          v905 = v903;
        v908 = v902 + v906++;
        v902 = v908 & (LODWORD(v1246.__r_.__value_.__r.__words[2]) - 1);
        v903 = (int8x8_t *)(v1246.__r_.__value_.__r.__words[0] + 16 * v902);
        v904 = *v903;
        if (v851 == (const llvm::BasicBlock *)*v903)
          goto LABEL_1611;
      }
      goto LABEL_1607;
    }
    v909 = (const llvm::BasicBlock *)__dst.__r_.__value_.__l.__data_ == v897
        && __dst.__r_.__value_.__l.__size_ == (_QWORD)v842;
    if (!v909
      && !llvm::DominatorTree::dominates((llvm::DominatorTree *)v805, (const llvm::BasicBlockEdge *)&__dst, v897))
    {
      goto LABEL_1656;
    }
    v851 = (const llvm::BasicBlock *)data;
    v910 = llvm::Value::DoPHITranslation((uint64_t)v1211, v842, *(const llvm::BasicBlock **)&data);
    v911 = v910;
    v900 = v1246.__r_.__value_.__r.__words[2];
    if (!LODWORD(v1246.__r_.__value_.__r.__words[2]))
    {
      v917 = 0;
      v899 = v910;
      goto LABEL_1610;
    }
    v901 = v1246.__r_.__value_.__r.__words[0];
    v912 = ((v851 >> 4) ^ (v851 >> 9)) & (LODWORD(v1246.__r_.__value_.__r.__words[2]) - 1);
    v903 = (int8x8_t *)(v1246.__r_.__value_.__r.__words[0] + 16 * v912);
    v913 = *v903;
    if (v851 == (const llvm::BasicBlock *)*v903)
    {
      v899 = v911;
LABEL_1655:
      v903[1] = (int8x8_t)v899;
      goto LABEL_1613;
    }
    v905 = 0;
    v914 = 1;
    v899 = v911;
    while (*(_QWORD *)&v913 != -4096)
    {
      if (v905)
        v915 = 0;
      else
        v915 = *(_QWORD *)&v913 == -8192;
      if (v915)
        v905 = v903;
      v916 = v912 + v914++;
      v912 = v916 & (LODWORD(v1246.__r_.__value_.__r.__words[2]) - 1);
      v903 = (int8x8_t *)(v1246.__r_.__value_.__r.__words[0] + 16 * v912);
      v913 = *v903;
      if (v851 == (const llvm::BasicBlock *)*v903)
        goto LABEL_1611;
    }
LABEL_1607:
    if (v905)
      v917 = v905;
    else
      v917 = v903;
LABEL_1610:
    v903 = (int8x8_t *)sub_1C4ECCA58((uint64_t)&v1246, (uint64_t)&data, (uint64_t *)&data, v917);
    *v903 = data;
    v903[1] = 0;
    v901 = v1246.__r_.__value_.__r.__words[0];
    v900 = v1246.__r_.__value_.__r.__words[2];
LABEL_1611:
    v903[1] = (int8x8_t)v899;
    if (!v900)
    {
      v926 = 0;
      goto LABEL_1626;
    }
    v851 = (const llvm::BasicBlock *)data;
LABEL_1613:
    v918 = v900 - 1;
    v919 = ((v851 >> 4) ^ (v851 >> 9)) & v918;
    v920 = (int8x8_t *)(v901 + 16 * v919);
    v921 = *v920;
    if (v851 == (const llvm::BasicBlock *)*v920)
      goto LABEL_1627;
    v922 = 0;
    v923 = 1;
    while (*(_QWORD *)&v921 != -4096)
    {
      if (v922)
        v924 = 0;
      else
        v924 = *(_QWORD *)&v921 == -8192;
      if (v924)
        v922 = v920;
      v925 = v919 + v923++;
      v919 = v925 & v918;
      v920 = (int8x8_t *)(v901 + 16 * v919);
      v921 = *v920;
      if (v851 == (const llvm::BasicBlock *)*v920)
        goto LABEL_1627;
    }
    if (v922)
      v926 = v922;
    else
      v926 = v920;
LABEL_1626:
    v920 = (int8x8_t *)sub_1C4ECCA58((uint64_t)&v1246, (uint64_t)&data, (uint64_t *)&data, v926);
    *v920 = data;
    v920[1] = 0;
LABEL_1627:
    v927 = (unsigned __int8 *)v920[1];
    if (v927)
      v928 = v927[16] >= 0x1Cu;
    else
      v928 = 0;
    if (v928)
    {
      v929 = *(_QWORD *)(*(_QWORD *)&data + 40);
      if (v929 == *(_QWORD *)&data + 40)
      {
        v931 = 0;
      }
      else
      {
        v930 = v929 ? v929 - 24 : 0;
        v931 = *(unsigned __int8 *)(v930 + 16) - 29 >= 0xB ? 0 : (const llvm::Instruction *)v930;
      }
      if (!llvm::DominatorTree::dominates((llvm::DominatorTree *)v805, (const llvm::Value *)v927, v931))
      {
LABEL_1656:
        MEMORY[0x1CAA32FB4](v1246.__r_.__value_.__r.__words[0], 8);
        v841 = (uint64_t)v1219;
        goto LABEL_1513;
      }
    }
    v841 = (uint64_t)v1219;
    while (1)
    {
      v870 = *(_QWORD *)(v870 + 8);
      if (!v870)
        break;
      v871 = *(_QWORD *)(v870 + 24);
      v932 = *(unsigned __int8 *)(v871 + 16);
      if (v871)
        v933 = v932 >= 0x1C;
      else
        v933 = 0;
      if (v933 && v932 - 29 <= 0xA)
      {
        v851 = (const llvm::BasicBlock *)v1242;
        v866 = (llvm::APInt *)v1243;
        goto LABEL_1574;
      }
    }
LABEL_1529:
    v875 = 0;
    v876 = *((_QWORD *)v842 + 6);
    if (v876)
      v877 = v876 - 24;
    else
      v877 = 0;
    *(_QWORD *)(v1213 + 48) = *(_QWORD *)(v877 + 40);
    *(_QWORD *)(v1213 + 56) = v877 + 24;
    v878 = *(unsigned __int8 **)(v877 + 48);
    data = (int8x8_t)v878;
    if (v878)
    {
      llvm::MetadataTracking::track((uint64_t)&data, v878, 2);
      v875 = (uint64_t)data;
    }
    sub_1C4774EF4(v1213, 0, v875);
    if (data)
      llvm::MetadataTracking::untrack((uint64_t)&data, *(unsigned __int8 **)&data);
    v879 = *(_QWORD *)a2;
    LOWORD(v1254) = 257;
    v935 = (uint64_t *)sub_1C4867E94(v1213, v879, v1246.__r_.__value_.__r.__words[1], (uint64_t)&data);
    v880 = *((_QWORD *)v842 + 1);
    if (!v880)
      goto LABEL_1546;
    while (1)
    {
      v881 = *(_QWORD *)(v880 + 24);
      v882 = *(unsigned __int8 *)(v881 + 16);
      v883 = v881 && v882 >= 0x1C;
      if (v883 && v882 - 29 <= 0xA)
        break;
      v880 = *(_QWORD *)(v880 + 8);
      if (!v880)
        goto LABEL_1546;
    }
LABEL_1548:
    v885 = *(_QWORD *)(v881 + 40);
    data = (int8x8_t)v885;
    if (LODWORD(v1246.__r_.__value_.__r.__words[2]))
    {
      v886 = ((v885 >> 4) ^ (v885 >> 9)) & (LODWORD(v1246.__r_.__value_.__r.__words[2]) - 1);
      v887 = (int8x8_t *)(v1246.__r_.__value_.__r.__words[0] + 16 * v886);
      v888 = *v887;
      if (v885 == *v887)
        goto LABEL_1563;
      v889 = 0;
      v890 = 1;
      while (*(_QWORD *)&v888 != -4096)
      {
        if (v889)
          v891 = 0;
        else
          v891 = *(_QWORD *)&v888 == -8192;
        if (v891)
          v889 = v887;
        v892 = v886 + v890++;
        v886 = v892 & (LODWORD(v1246.__r_.__value_.__r.__words[2]) - 1);
        v887 = (int8x8_t *)(v1246.__r_.__value_.__r.__words[0] + 16 * v886);
        v888 = *v887;
        if (v885 == *v887)
          goto LABEL_1563;
      }
      if (v889)
        v893 = v889;
      else
        v893 = v887;
    }
    else
    {
      v893 = 0;
    }
    v887 = (int8x8_t *)sub_1C4ECCA58((uint64_t)&v1246, (uint64_t)&data, (uint64_t *)&data, v893);
    *v887 = data;
    v887[1] = 0;
    v885 = (uint64_t)data;
LABEL_1563:
    sub_1C477667C((llvm::PHINode *)v935, *(_QWORD *)&v887[1], v885);
    while (1)
    {
      v880 = *(_QWORD *)(v880 + 8);
      if (!v880)
        break;
      v881 = *(_QWORD *)(v880 + 24);
      v894 = *(unsigned __int8 *)(v881 + 16);
      if (v881)
        v895 = v894 >= 0x1C;
      else
        v895 = 0;
      if (v895 && v894 - 29 < 0xB)
        goto LABEL_1548;
    }
LABEL_1546:
    llvm::Value::takeName((llvm::Value *)v935, a2);
    MEMORY[0x1CAA32FB4](v1246.__r_.__value_.__r.__words[0], 8);
    if (v935)
      goto LABEL_1657;
LABEL_1513:
    ++v839;
  }
  while (v839 != (const llvm::BasicBlock **)v840);
  v935 = 0;
LABEL_1657:
  v839 = *(const llvm::BasicBlock ***)&v1239[40];
  v796 = (uint64_t)v1221;
LABEL_1659:
  if (v839 != v1241)
    free(v839);
  if ((v1239[0] & 1) == 0)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v1239[8], 8);
    if (!v935)
      goto LABEL_1691;
    goto LABEL_1663;
  }
  if (v935)
    goto LABEL_1663;
LABEL_1691:
  v951 = (_QWORD *)*v1222;
  if (*v1222)
  {
    if (*((_BYTE *)v951 + 16) == 95)
    {
      v952 = *(v951 - 4);
      v953 = *v1224;
      v954 = *v1223;
      data.i32[0] = 0;
      v955 = v951[1];
      if (v955)
      {
        if (!*(_QWORD *)(v955 + 8))
        {
          *(_QWORD *)v1239 = &data;
          *(_QWORD *)&v1239[8] = v953;
          *(_QWORD *)&v1239[16] = v954;
          if (sub_1C4E7AF1C((uint64_t)v1239, v952))
          {
            if ((data.i32[0] & 0xFFFFFFFE) == 0x20)
            {
              v16 = data.i32[0] == 32 ? v954 : v953;
              if (v16)
                goto LABEL_9;
            }
          }
        }
      }
    }
  }
  if (*(unsigned __int8 *)(v841 + 16) <= 0x14u
    && ((llvm::Constant::isNullValue((llvm::Constant *)v841) & 1) != 0
     || (sub_1C4E71060((uint64_t)v1239, (llvm::Constant *)v841) & 1) != 0))
  {
    LODWORD(v1246.__r_.__value_.__l.__data_) = 185;
    *(std::string::size_type *)((char *)v1246.__r_.__value_.__r.__words + 4) = 0;
    *(_QWORD *)v1239 = 185;
    *(_DWORD *)&v1239[8] = 0;
    *(_QWORD *)&v1239[12] = 1;
    *(_QWORD *)&v1239[24] = 2;
    *(_QWORD *)&v1239[32] = v1226;
    *(_QWORD *)&v1239[40] = 3;
    if (sub_1C5843C30((uint64_t)v1239, v796))
      goto LABEL_1714;
    LODWORD(v1246.__r_.__value_.__l.__data_) = 184;
    *(std::string::size_type *)((char *)v1246.__r_.__value_.__r.__words + 4) = 0;
    data = (int8x8_t)184;
    LODWORD(v1252) = 0;
    *(_QWORD *)((char *)&v1252 + 4) = 1;
    v1253 = 2;
    v1254 = v1226;
    v1255 = 3;
    if (sub_1C5843C30((uint64_t)&data, v796))
    {
LABEL_1714:
      v959 = v796 - 32 * (*(_DWORD *)(v796 + 20) & 0x7FFFFFF);
      v960 = (uint64_t *)(v959 + 96);
      if (*(unsigned __int8 *)(*(_QWORD *)(v959 + 96) + 16) - 11 <= 1)
      {
        v961 = (_QWORD *)(v959 + 104);
        **(_QWORD **)(v959 + 112) = *(_QWORD *)(v959 + 104);
        v962 = *(_QWORD *)(v959 + 104);
        if (v962)
          *(_QWORD *)(v962 + 16) = *(_QWORD *)(v959 + 112);
        *v960 = v841;
        v963 = *(_QWORD *)(v841 + 8);
        *v961 = v963;
        if (v963)
          *(_QWORD *)(v963 + 16) = v961;
        *(_QWORD *)(v959 + 112) = v1217;
        *v1217 = v960;
      }
      v17 = a1;
      v18 = a2;
      v16 = v796;
      return sub_1C577F888(v17, v18, (llvm::Value *)v16);
    }
  }
  v1242 = 0;
  if (*(unsigned __int8 *)(v796 + 16) > 0x14u
    || (llvm::Constant::isNullValue((llvm::Constant *)v796) & 1) == 0
    && (sub_1C4E71060((uint64_t)v1239, (llvm::Constant *)v796) & 1) == 0)
  {
    return 0;
  }
  LODWORD(v1246.__r_.__value_.__l.__data_) = 185;
  *(std::string::size_type *)((char *)v1246.__r_.__value_.__r.__words + 4) = 0;
  *(_QWORD *)v1239 = 185;
  *(_DWORD *)&v1239[8] = 0;
  *(_QWORD *)&v1239[12] = 1;
  *(_QWORD *)&v1239[24] = 2;
  *(_QWORD *)&v1239[32] = &v1242;
  *(_QWORD *)&v1239[40] = 3;
  if (!sub_1C5843D0C((uint64_t)v1239, v841))
  {
    LODWORD(v1246.__r_.__value_.__l.__data_) = 184;
    *(std::string::size_type *)((char *)v1246.__r_.__value_.__r.__words + 4) = 0;
    data = (int8x8_t)184;
    LODWORD(v1252) = 0;
    *(_QWORD *)((char *)&v1252 + 4) = 1;
    v1253 = 2;
    v1254 = (llvm *)&v1242;
    v1255 = 3;
    if (!sub_1C5843D0C((uint64_t)&data, v841))
      return 0;
  }
  if (*(_QWORD *)v1226 != *v1242)
    return 0;
  v964 = v1218[2];
  *(_OWORD *)&v1239[16] = v1218[1];
  *(_OWORD *)&v1239[32] = v964;
  *(_OWORD *)v1239 = *v1218;
  *(_QWORD *)&v1239[32] = a2;
  v965 = (unsigned __int8 *)sub_1C4E640C8(v1226, (llvm::Constant *)v1242, (uint64_t)v1239, 3, v956, v957);
  if (!v965)
    return 0;
  v966 = (llvm::Constant *)v965;
  if (v965[16] >= 0x15u
    || !llvm::Constant::isNullValue((llvm::Constant *)v965)
    && !sub_1C4E71060((uint64_t)v1239, v966))
  {
    return 0;
  }
  v967 = (char *)v1219 - 32 * (*((_DWORD *)v1219 + 5) & 0x7FFFFFF);
  v968 = (llvm **)(v967 + 96);
  if (*(unsigned __int8 *)(*((_QWORD *)v967 + 12) + 16) - 11 <= 1)
  {
    v969 = v967 + 104;
    **((_QWORD **)v967 + 14) = *((_QWORD *)v967 + 13);
    v970 = *((_QWORD *)v967 + 13);
    if (v970)
      *(_QWORD *)(v970 + 16) = *((_QWORD *)v967 + 14);
    *v968 = v1221;
    v971 = *((_QWORD *)v1221 + 1);
    *v969 = v971;
    if (v971)
      *(_QWORD *)(v971 + 16) = v969;
    *((_QWORD *)v967 + 14) = v1214;
    *v1214 = v968;
  }
  v17 = a1;
  v18 = a2;
  v16 = (uint64_t)v1219;
  return sub_1C577F888(v17, v18, (llvm::Value *)v16);
}

uint64_t ***sub_1C5842724(uint64_t **a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v7;
  uint64_t ***v8;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  llvm::Constant *v16;
  llvm::GetElementPtrInst *v17;
  llvm::Value **NullValue;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[4];
  __int16 v45;
  char v46;
  llvm::Value *Select;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  v5 = (uint64_t **)(a2 - 32 * v4);
  if ((_DWORD)v4 != 2 || *v5 != a3)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  if (!v7)
    return 0;
  if (*(_QWORD *)(v7 + 8))
    return 0;
  v13 = v5[4];
  v14 = a1[1];
  v15 = *(_DWORD *)(*(_QWORD *)**a1 + 8) & 0xFE;
  v16 = (llvm::Constant *)*v13;
  if (v15 == 18 && (*((_DWORD *)v16 + 2) & 0xFE) != 0x12)
    return 0;
  v17 = *(llvm::GetElementPtrInst **)(a2 + 72);
  NullValue = llvm::Constant::getNullValue(v16, (llvm::Type *)a2);
  if (a4)
    v19 = (uint64_t)v13;
  else
    v19 = (uint64_t)NullValue;
  if (a4)
    v20 = (uint64_t *)NullValue;
  else
    v20 = v13;
  v21 = (uint64_t *)v14[3];
  v22 = **a1;
  v23 = (unsigned __int8 *)a1[2];
  if ((v23[23] & 0x10) != 0)
  {
    v24 = ***(_QWORD ***)v23;
    v25 = *(_QWORD *)(v24 + 152);
    v26 = *(unsigned int *)(v24 + 168);
    if ((_DWORD)v26)
    {
      LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
      v28 = (unsigned __int8 **)(v25 + 16 * v27);
      v29 = *v28;
      if (*v28 == v23)
      {
LABEL_26:
        v32 = v28[1];
        v35 = *(_QWORD *)v32;
        v33 = (char *)(v32 + 16);
        v34 = v35;
        goto LABEL_27;
      }
      v30 = 1;
      while (v29 != (unsigned __int8 *)-4096)
      {
        v31 = v27 + v30++;
        v27 = v31 & (v26 - 1);
        v29 = *(unsigned __int8 **)(v25 + 16 * v27);
        if (v29 == v23)
        {
          v28 = (unsigned __int8 **)(v25 + 16 * v27);
          goto LABEL_26;
        }
      }
    }
    v28 = (unsigned __int8 **)(v25 + 16 * v26);
    goto LABEL_26;
  }
  v34 = 0;
  v33 = &byte_1C871356D;
LABEL_27:
  v45 = 773;
  v44[0] = v33;
  v44[1] = v34;
  v44[2] = ".idx";
  Select = llvm::IRBuilderBase::CreateSelect(v21, v22, v20, v19, (uint64_t)v44, v23);
  v45 = 257;
  v36 = (char *)operator new(0x90uLL);
  *((_DWORD *)v36 + 21) = *((_DWORD *)v36 + 21) & 0x38000000 | 2;
  v8 = (uint64_t ***)(v36 + 64);
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v36 + 2) = 0;
  *((_QWORD *)v36 + 3) = v36 + 64;
  *((_QWORD *)v36 + 4) = 0;
  *((_QWORD *)v36 + 5) = 0;
  *((_QWORD *)v36 + 6) = 0;
  *((_QWORD *)v36 + 7) = v36 + 64;
  sub_1C4774650(v17, a3, (llvm::Value *)&Select, 1);
  *((_QWORD *)v36 + 8) = v37;
  *((_QWORD *)v36 + 9) = 0;
  v38 = *((_DWORD *)v36 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v36 + 20) = 62;
  *((_DWORD *)v36 + 21) = v38;
  *(_OWORD *)(v36 + 88) = 0u;
  *(_OWORD *)(v36 + 104) = 0u;
  *((_DWORD *)v36 + 30) = 0;
  v39 = *(_QWORD *)v36;
  *((_QWORD *)v36 + 16) = v17;
  *((_QWORD *)v36 + 17) = v17;
  if (v39)
  {
    **((_QWORD **)v36 + 2) = *((_QWORD *)v36 + 1);
    v43 = *((_QWORD *)v36 + 1);
    if (v43)
      *(_QWORD *)(v43 + 16) = *((_QWORD *)v36 + 2);
  }
  *(_QWORD *)v36 = a3;
  if (a3)
  {
    v42 = a3[1];
    v41 = a3 + 1;
    v40 = v42;
    *((_QWORD *)v36 + 1) = v42;
    if (v42)
      *(_QWORD *)(v40 + 16) = v36 + 8;
    *((_QWORD *)v36 + 2) = v41;
    *v41 = v36;
  }
  sub_1C5382FD4((uint64_t)&v46, (uint64_t *)&Select, &v48, (uint64_t)&v8[-4 * (*((_DWORD *)v36 + 21) & 0x7FFFFFF) + 4]);
  llvm::Value::setName(v8, (uint64_t)v44);
  return v8;
}

uint64_t sub_1C58429BC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(uint64_t **)(a2 - 8);
  else
    v3 = (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  v4 = 0;
  v5 = *v3;
  if (v5)
  {
    if (*(_BYTE *)(v5 + 16) == 82)
    {
      v4 = *(_QWORD *)(v5 - 64);
      if (v4)
      {
        **(_QWORD **)(a1 + 8) = v4;
        v6 = *(_QWORD *)(v5 - 32);
        if (v6)
          v7 = *(_BYTE *)(v6 + 16) == 17;
        else
          v7 = 0;
        if (!v7)
          return 0;
        **(_QWORD **)(a1 + 16) = v6;
        **(_DWORD **)a1 = *(_WORD *)(v5 + 18) & 0x3F;
        v9 = *(_DWORD *)(a2 + 20);
        if ((v9 & 0x40000000) != 0)
          v10 = *(_QWORD *)(a2 - 8);
        else
          v10 = a2 - 32 * (v9 & 0x7FFFFFF);
        v4 = *(_QWORD *)(v10 + 32);
        if (v4)
        {
          **(_QWORD **)(a1 + 24) = v4;
          v11 = *(_DWORD *)(a2 + 20);
          if ((v11 & 0x40000000) != 0)
            v12 = *(_QWORD *)(a2 - 8);
          else
            v12 = a2 - 32 * (v11 & 0x7FFFFFF);
          v4 = 0;
          v13 = *(_QWORD *)(v12 + 64);
          if (v13 && *(_BYTE *)(v13 + 16) == 17)
          {
            **(_QWORD **)(a1 + 32) = v13;
            return 1;
          }
        }
      }
    }
  }
  return v4;
}

BOOL sub_1C5842AA8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(uint64_t **)(a2 - 8);
  else
    v3 = (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  v4 = 0;
  v5 = *v3;
  if (v5)
  {
    if (*(_BYTE *)(v5 + 16) == 82)
    {
      v4 = *(_QWORD *)(v5 - 64);
      if (v4)
      {
        **(_QWORD **)(a1 + 8) = v4;
        if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(v5 - 32))
          return 0;
        **(_DWORD **)a1 = *(_WORD *)(v5 + 18) & 0x3F;
        v7 = *(_DWORD *)(a2 + 20);
        if ((v7 & 0x40000000) != 0)
          v8 = *(_QWORD *)(a2 - 8);
        else
          v8 = a2 - 32 * (v7 & 0x7FFFFFF);
        v4 = *(_QWORD *)(v8 + 32);
        if (v4)
        {
          **(_QWORD **)(a1 + 24) = v4;
          v9 = *(_DWORD *)(a2 + 20);
          if ((v9 & 0x40000000) != 0)
            v10 = *(_QWORD *)(a2 - 8);
          else
            v10 = a2 - 32 * (v9 & 0x7FFFFFF);
          return *(_QWORD *)(a1 + 32) == *(_QWORD *)(v10 + 64);
        }
      }
    }
  }
  return v4;
}

BOOL sub_1C5842B74(uint64_t **a1, uint64_t *a2, int a3)
{
  int v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  unsigned int v18;
  const void **v19;
  int v20;
  const void **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int v25;
  int64_t v26;
  BOOL v27;
  unint64_t v28;
  BOOL v29;
  int v30;
  int v31;
  const void **v33;
  uint64_t v34;
  void *v35;
  int v36;
  int64_t v37;
  unint64_t v38;
  BOOL v39;
  int v40;
  int v41;
  uint64_t v43;
  unsigned int v44;
  int v45;
  const void **v46;
  uint64_t v47;
  size_t v48;
  uint64_t v49;
  void *v50;
  int v51;
  int64_t v52;
  unint64_t v53;
  BOOL v54;
  int v55;
  int v56;
  void *v58;
  size_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  int64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  void *v68;
  unsigned int v69;
  void *v70;
  unsigned int v71;
  void *v72;
  unsigned int v73;
  void *v74;
  unsigned int v75;
  uint64_t *v76[4];
  unsigned __int8 **v77;
  unsigned __int8 **v78;
  llvm::APInt *v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  int v83;
  uint64_t v84;

  v84 = *a2;
  v76[0] = (uint64_t *)&v83;
  v76[1] = &v80;
  v76[2] = (uint64_t *)&v79;
  v76[3] = 0;
  v77 = &v82;
  v78 = &v81;
  if (*((_BYTE *)a2 + 16) != 85)
    return 0;
  v6 = *((_DWORD *)a2 + 5);
  v7 = (v6 & 0x40000000) != 0 ? (uint64_t *)*(a2 - 1) : &a2[-4 * (v6 & 0x7FFFFFF)];
  v83 = 0;
  v81 = 0;
  v82 = 0;
  v79 = 0;
  v80 = 0;
  if (!sub_1C5843534((uint64_t)v76, *v7))
    return 0;
  v8 = *((_DWORD *)a2 + 5);
  v9 = (v8 & 0x40000000) != 0 ? (uint64_t *)*(a2 - 1) : &a2[-4 * (v8 & 0x7FFFFFF)];
  v10 = (unsigned __int8 *)v9[4];
  if (!v10)
    return 0;
  *v77 = v10;
  v11 = *((_DWORD *)a2 + 5);
  v12 = (v11 & 0x40000000) != 0 ? (uint64_t *)*(a2 - 1) : &a2[-4 * (v11 & 0x7FFFFFF)];
  v13 = (unsigned __int8 *)v12[8];
  if (!v13)
    return 0;
  *v78 = v13;
  v76[0] = &v84;
  v14 = v80;
  v15 = **a1;
  if (v80 != v15 && v80 != *a1[1])
    return 0;
  v17 = v83;
  if (!a3)
  {
    if (v80 != v15 || v83 != 40)
    {
LABEL_55:
      if (v14 != v15 || v17 != 38)
      {
LABEL_81:
        v43 = *a1[1];
        if (v14 == v43 && v17 == 40)
        {
          v44 = *((_DWORD *)v79 + 2);
          if (v44 >= 0x41)
          {
            v45 = llvm::APInt::countLeadingZerosSlowCase(v79);
            if (v45 != v44 && v45 != v44 - 1)
              return 0;
          }
          else if (*(_QWORD *)v79 > 1uLL)
          {
            return 0;
          }
          if (sub_1C5843250(v76, v81, v82))
            return 1;
          v14 = v80;
          v43 = *a1[1];
          v17 = v83;
        }
        if (v14 != v43 || v17 != 38)
          return 0;
        v46 = (const void **)v79;
        v47 = *((unsigned int *)v79 + 2);
        v69 = v47;
        if (v47 > 0x40)
        {
          v59 = ((unint64_t)(v47 + 63) >> 3) & 0x3FFFFFF8;
          v68 = (void *)operator new[]();
          memcpy(v68, *v46, v59);
        }
        else
        {
          v68 = *(void **)v79;
        }
        llvm::APInt::operator+=((uint64_t)&v68, 1uLL);
        v60 = v69;
        v61 = v68;
        v69 = 0;
        if (v60 >= 0x41)
        {
          v62 = 0;
          v63 = (unint64_t)(v60 + 63) >> 6;
          do
          {
            v27 = v63-- < 1;
            if (v27)
              break;
            v64 = *((_QWORD *)v68 + v63);
            v62 += __clz(v64);
          }
          while (!v64);
          v54 = 0;
          v65 = v60 | 0xFFFFFFC0;
          if ((v60 & 0x3F) == 0)
            v65 = 0;
          v66 = v62 + v65;
          if (v66 != (_DWORD)v60 && v66 != (_DWORD)v60 - 1)
          {
LABEL_129:
            if (v61)
              MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
LABEL_131:
            if (v69 < 0x41 || (v58 = v68) == 0)
              return v54;
LABEL_133:
            MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
            return v54;
          }
        }
        else if ((unint64_t)v68 > 1)
        {
          return 0;
        }
        v54 = sub_1C5843250(v76, v82, v81);
        if (v60 < 0x41)
          goto LABEL_131;
        goto LABEL_129;
      }
      v33 = (const void **)v79;
      v71 = *((_DWORD *)v79 + 2);
      if (v71 > 0x40)
      {
        v70 = (void *)operator new[]();
        memcpy(v70, *v33, (((unint64_t)v71 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v70 = *(void **)v79;
      }
      llvm::APInt::operator+=((uint64_t)&v70, 2uLL);
      v34 = v71;
      v35 = v70;
      v71 = 0;
      if (v34 >= 0x41)
      {
        v36 = 0;
        v37 = (unint64_t)(v34 + 63) >> 6;
        do
        {
          v27 = v37-- < 1;
          if (v27)
            break;
          v38 = *((_QWORD *)v70 + v37);
          v36 += __clz(v38);
        }
        while (!v38);
        v39 = 0;
        v40 = v34 | 0xFFFFFFC0;
        if ((v34 & 0x3F) == 0)
          v40 = 0;
        v41 = v36 + v40;
        if (v41 != (_DWORD)v34 && v41 != (_DWORD)v34 - 1)
        {
LABEL_74:
          if (v35)
            MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
LABEL_76:
          if (v71 >= 0x41 && v70)
            MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
          if (v39)
            return 1;
          goto LABEL_80;
        }
      }
      else if ((unint64_t)v70 > 1)
      {
LABEL_80:
        v14 = v80;
        v17 = v83;
        goto LABEL_81;
      }
      v39 = sub_1C5843250(v76, v81, v82);
      if (v34 < 0x41)
        goto LABEL_76;
      goto LABEL_74;
    }
    v19 = (const void **)v79;
    v73 = *((_DWORD *)v79 + 2);
    if (v73 > 0x40)
    {
      v72 = (void *)operator new[]();
      memcpy(v72, *v19, (((unint64_t)v73 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v72 = *(void **)v79;
    }
    llvm::APInt::operator+=((uint64_t)&v72, 1uLL);
    v23 = v73;
    v24 = v72;
    v73 = 0;
    if (v23 >= 0x41)
    {
      v25 = 0;
      v26 = (unint64_t)(v23 + 63) >> 6;
      do
      {
        v27 = v26-- < 1;
        if (v27)
          break;
        v28 = *((_QWORD *)v72 + v26);
        v25 += __clz(v28);
      }
      while (!v28);
      v29 = 0;
      v30 = v23 | 0xFFFFFFC0;
      if ((v23 & 0x3F) == 0)
        v30 = 0;
      v31 = v25 + v30;
      if (v31 != (_DWORD)v23 && v31 != (_DWORD)v23 - 1)
      {
LABEL_48:
        if (v24)
          MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
LABEL_50:
        if (v73 >= 0x41 && v72)
          MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
        if (v29)
          return 1;
        goto LABEL_54;
      }
    }
    else if ((unint64_t)v72 > 1)
    {
LABEL_54:
      v14 = v80;
      v15 = **a1;
      v17 = v83;
      goto LABEL_55;
    }
    v29 = sub_1C5843250(v76, v82, v81);
    if (v23 < 0x41)
      goto LABEL_50;
    goto LABEL_48;
  }
  if (v83 != 40)
    goto LABEL_30;
  v18 = *((_DWORD *)v79 + 2);
  if (v18 >= 0x41)
  {
    v20 = llvm::APInt::countLeadingZerosSlowCase(v79);
    if (v20 != v18 && v20 != v18 - 1)
      return 0;
  }
  else if (*(_QWORD *)v79 > 1uLL)
  {
    return 0;
  }
  if (!sub_1C5843250(v76, v82, v81))
  {
    v17 = v83;
LABEL_30:
    if (v17 != 38)
      return 0;
    v21 = (const void **)v79;
    v22 = *((unsigned int *)v79 + 2);
    v75 = v22;
    if (v22 > 0x40)
    {
      v48 = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
      v74 = (void *)operator new[]();
      memcpy(v74, *v21, v48);
    }
    else
    {
      v74 = *(void **)v79;
    }
    llvm::APInt::operator+=((uint64_t)&v74, 1uLL);
    v49 = v75;
    v50 = v74;
    v75 = 0;
    if (v49 >= 0x41)
    {
      v51 = 0;
      v52 = (unint64_t)(v49 + 63) >> 6;
      do
      {
        v27 = v52-- < 1;
        if (v27)
          break;
        v53 = *((_QWORD *)v74 + v52);
        v51 += __clz(v53);
      }
      while (!v53);
      v54 = 0;
      v55 = v49 | 0xFFFFFFC0;
      if ((v49 & 0x3F) == 0)
        v55 = 0;
      v56 = v51 + v55;
      if (v56 != (_DWORD)v49 && v56 != (_DWORD)v49 - 1)
      {
LABEL_109:
        if (v50)
          MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
LABEL_111:
        if (v75 < 0x41)
          return v54;
        v58 = v74;
        if (!v74)
          return v54;
        goto LABEL_133;
      }
    }
    else if ((unint64_t)v74 > 1)
    {
      return 0;
    }
    v54 = sub_1C5843250(v76, v81, v82);
    if (v49 < 0x41)
      goto LABEL_111;
    goto LABEL_109;
  }
  return 1;
}

BOOL sub_1C5843250(uint64_t **a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned int PrimitiveSizeInBits;
  unsigned int v8;
  unsigned int v9;
  void **p_src;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  void **v15;
  void *v16;
  void *v17;
  void *v18;
  _BOOL8 v19;
  void *v21;
  unsigned int v22;
  void *v23;
  unsigned int v24;
  void *v25;
  unsigned int v26;
  void *__src;
  unsigned int v28;

  v6 = **a1;
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    v6 = **(_QWORD **)(v6 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6);
  v8 = PrimitiveSizeInBits;
  v28 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40)
  {
    p_src = &__src;
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    v9 = v8 - 1;
    if (v28 >= 0x41)
      p_src = (void **)((char *)__src + 8 * (v9 >> 6));
    v8 = v28;
  }
  else
  {
    __src = 0;
    LOBYTE(v9) = PrimitiveSizeInBits - 1;
    p_src = &__src;
  }
  *p_src = (void *)((1 << v9) | (unint64_t)*p_src);
  v11 = **a1;
  if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
    v11 = **(_QWORD **)(v11 + 16);
  v12 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
  v13 = v12;
  v26 = v12;
  if (v12 > 0x40)
  {
    v15 = &v25;
    llvm::APInt::initSlowCase((llvm::APInt *)&v25, -1, 1);
    LODWORD(v14) = v13 - 1;
    if (v26 >= 0x41)
      v15 = (void **)((char *)v25 + 8 * (v14 >> 6));
    v13 = v26;
  }
  else
  {
    v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
    if (!v12)
      v14 = 0;
    v25 = (void *)v14;
    LOBYTE(v14) = v12 - 1;
    v15 = &v25;
  }
  *v15 = (void *)((unint64_t)*v15 & ~(1 << v14));
  if (v8 > 0x40)
  {
    v17 = (void *)operator new[]();
    v16 = __src;
    memcpy(v17, __src, (((unint64_t)v8 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v16 = __src;
    v17 = __src;
  }
  v24 = v8;
  v23 = v17;
  if (sub_1C4D8A7F0((llvm::APInt *)&v23, a2))
  {
    if (v13 > 0x40)
    {
      v18 = (void *)operator new[]();
      memcpy(v18, v25, (((unint64_t)v13 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v18 = v25;
    }
    v22 = v13;
    v21 = v18;
    v19 = sub_1C4D8A7F0((llvm::APInt *)&v21, a3);
    if (v22 >= 0x41 && v21)
      MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  }
  else
  {
    v19 = 0;
  }
  if (v24 >= 0x41 && v23)
    MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  if (v13 >= 0x41 && v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  if (v8 >= 0x41 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  return v19;
}

llvm::APFloatBase *sub_1C5843534(uint64_t a1, uint64_t a2)
{
  llvm::APFloatBase *result;
  uint64_t v5;

  result = 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 81)
  {
    v5 = *(_QWORD *)(a2 - 64);
    if (v5)
    {
      **(_QWORD **)(a1 + 8) = v5;
      result = sub_1C4D89F84(a1 + 16, *(unsigned __int8 **)(a2 - 32));
      if ((_DWORD)result)
      {
        **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
        return (llvm::APFloatBase *)1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C58435A4(_QWORD **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned __int8 *)(a2 + 16) - 53 <= 1)
  {
    v3 = *(_DWORD *)(a2 + 20);
    v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
    v5 = *v4;
    if (v5)
    {
      v6 = a1 + 1;
      **a1 = v5;
      v7 = *(_DWORD *)(a2 + 20);
      if ((v7 & 0x40000000) != 0)
        v8 = *(_QWORD *)(a2 - 8);
      else
        v8 = a2 - 32 * (v7 & 0x7FFFFFF);
      v9 = *(_QWORD *)(v8 + 32);
      if ((sub_1C4B0378C(v6, v9) & 1) != 0)
        return 1;
      if (v9)
      {
        *a1[2] = v9;
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1C584363C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;

  v2 = *(_QWORD *)(a2 - 32);
  if (*(_DWORD *)(v2 + 36) == 274)
  {
    v3 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v4 = *v3;
    if (!*v3)
      goto LABEL_25;
    v5 = v3[4];
  }
  else
  {
    if (*(_BYTE *)(a2 + 16) != 85)
      goto LABEL_25;
    v9 = *(_QWORD *)(a2 - 96);
    if (!v9 || *(_BYTE *)(v9 + 16) != 81)
      goto LABEL_25;
    v10 = *(_QWORD *)(a2 - 64);
    v4 = *(_QWORD *)(v9 - 64);
    v5 = *(_QWORD *)(v9 - 32);
    if ((v10 != v4 || v2 != v5) && (v2 != v4 || v10 != v5))
      goto LABEL_25;
    v13 = *(_WORD *)(v9 + 18) & 0x3F;
    if (v10 != v4)
    {
      if (v13 - 32 < 8 || v13 < 0x10)
        goto LABEL_25;
      if (v13 == 40)
        LOBYTE(v13) = 39;
      else
        LOBYTE(v13) = 38;
    }
    if (!v4 || (v13 & 0x3E) != 0x26)
      goto LABEL_25;
  }
  **a1 = v4;
  if (v5)
  {
    v6 = a1 + 1;
LABEL_6:
    **v6 = v5;
    return 1;
  }
LABEL_25:
  v15 = *(_QWORD *)(a2 - 32);
  if (*(_DWORD *)(v15 + 36) == 275)
  {
    v16 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v17 = *v16;
    if (!*v16)
      goto LABEL_44;
    v5 = v16[4];
  }
  else
  {
    if (*(_BYTE *)(a2 + 16) != 85)
      goto LABEL_44;
    v18 = *(_QWORD *)(a2 - 96);
    if (!v18 || *(_BYTE *)(v18 + 16) != 81)
      goto LABEL_44;
    v19 = *(_QWORD *)(a2 - 64);
    v17 = *(_QWORD *)(v18 - 64);
    v5 = *(_QWORD *)(v18 - 32);
    if ((v19 != v17 || v15 != v5) && (v15 != v17 || v19 != v5))
      goto LABEL_44;
    v22 = *(_WORD *)(v18 + 18) & 0x3F;
    if (v19 == v17)
    {
      v37 = v22;
    }
    else
    {
      if ((v22 - 32) < 6)
        goto LABEL_44;
      v37 = 41;
      if (((1 << v22) & 0x3000000FFFFLL) != 0)
        goto LABEL_44;
      if (v22 != 38)
        v37 = 40;
    }
    if (!v17 || (v37 & 0x3E) != 0x28)
      goto LABEL_44;
  }
  *a1[2] = v17;
  if (v5)
  {
    v6 = a1 + 3;
    goto LABEL_6;
  }
LABEL_44:
  v23 = *(_QWORD *)(a2 - 32);
  if (*(_DWORD *)(v23 + 36) == 305)
  {
    v24 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v25 = *v24;
    if (!*v24)
      goto LABEL_56;
    v5 = v24[4];
LABEL_47:
    *a1[4] = v25;
    if (v5)
    {
      v6 = a1 + 5;
      goto LABEL_6;
    }
    goto LABEL_56;
  }
  if (*(_BYTE *)(a2 + 16) == 85)
  {
    v26 = *(_QWORD *)(a2 - 96);
    if (v26)
    {
      if (*(_BYTE *)(v26 + 16) == 81)
      {
        if ((v27 = *(_QWORD *)(a2 - 64), v25 = *(_QWORD *)(v26 - 64), v5 = *(_QWORD *)(v26 - 32), v27 == v25)
          && v23 == v5
          || v23 == v25 && v27 == v5)
        {
          v28 = *(_WORD *)(v26 + 18) & 0x3F;
          if (v27 == v25)
          {
            v29 = v28;
          }
          else
          {
            v29 = 35;
            if (((1 << v28) & 0x3CF0000FFFFLL) != 0)
              goto LABEL_56;
            if (v28 != 36)
              v29 = 34;
          }
          if (v25 && (v29 & 0x3E) == 0x22)
            goto LABEL_47;
        }
      }
    }
  }
LABEL_56:
  v30 = *(_QWORD *)(a2 - 32);
  if (*(_DWORD *)(v30 + 36) == 306)
  {
    v31 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v7 = *v31;
    if (!*v31)
      return v7;
    v5 = v31[4];
    *a1[6] = v7;
    if (v5)
      goto LABEL_59;
    return 0;
  }
  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v7 = 0;
  v32 = *(_QWORD *)(a2 - 96);
  if (v32 && *(_BYTE *)(v32 + 16) == 81)
  {
    if ((v33 = *(_QWORD *)(a2 - 64), v34 = *(_QWORD *)(v32 - 64), v5 = *(_QWORD *)(v32 - 32), v33 == v34) && v30 == v5
      || (v7 = 0, v30 == v34) && v33 == v5)
    {
      v35 = *(_WORD *)(v32 + 18) & 0x3F;
      if (v33 == v34)
      {
        v36 = v35;
      }
      else
      {
        v36 = 37;
        v7 = 0;
        if (((1 << v35) & 0x3F30000FFFFLL) != 0)
          return v7;
        if (v35 != 34)
          v36 = 36;
      }
      v7 = 0;
      if (v34)
      {
        if ((v36 & 0x3E) == 0x24)
        {
          *a1[6] = v34;
          if (v5)
          {
LABEL_59:
            v6 = a1 + 7;
            goto LABEL_6;
          }
          return 0;
        }
      }
    }
  }
  return v7;
}

uint64_t sub_1C58439D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (!v3 || *(_QWORD *)(v3 + 8))
    return 0;
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 91)
  {
    v2 = *(_QWORD *)(a2 - 64);
    if (v2)
    {
      **(_QWORD **)a1 = v2;
      v2 = *(_QWORD *)(a2 - 32);
      if (v2)
      {
        **(_QWORD **)(a1 + 8) = v2;
        v6 = *(unsigned int *)(a2 + 72);
        v7 = *(_QWORD **)(a1 + 16);
        *v7 = *(_QWORD *)(a2 + 64);
        v7[1] = v6;
        LOBYTE(v2) = 1;
      }
    }
  }
  return (v5 == 91) & v2;
}

uint64_t sub_1C5843A3C(_QWORD **a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v4 = *(_DWORD *)(a2 + 20);
  v5 = (v4 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = *v5;
  if (!v6)
    return 0;
  v7 = (uint64_t)(a1 + 1);
  **a1 = v6;
  v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(_QWORD *)(a2 - 8);
  else
    v9 = a2 - 32 * (v8 & 0x7FFFFFF);
  result = sub_1C4D89CC8(v7, *(llvm::Constant **)(v9 + 32));
  if ((_DWORD)result)
  {
    v11 = *(_DWORD *)(a2 + 20);
    if ((v11 & 0x40000000) != 0)
      v12 = *(_QWORD *)(a2 - 8);
    else
      v12 = a2 - 32 * (v11 & 0x7FFFFFF);
    v13 = *(_QWORD *)(v12 + 64);
    if (v13)
    {
      *a1[2] = v13;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C5843AEC(_QWORD **a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  unsigned __int8 *v11;
  char v12;

  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  v4 = *v3;
  if (!v4)
    return 0;
  **a1 = v4;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = (v5 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
  v7 = *(_QWORD *)(v6 + 32);
  if (!v7)
    return 0;
  *a1[1] = v7;
  v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(_QWORD *)(a2 - 8);
  else
    v9 = a2 - 32 * (v8 & 0x7FFFFFF);
  result = 0;
  v11 = *(unsigned __int8 **)(v9 + 64);
  if (v11 && v11[16] <= 0x14u)
  {
    if ((llvm::Constant::isNullValue((llvm::Constant *)v11) & 1) != 0)
      return 1;
    else
      return sub_1C4E71060((uint64_t)&v12, (llvm::Constant *)v11);
  }
  return result;
}

BOOL sub_1C5843BC0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 82)
  {
    if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 - 64))
    {
      result = sub_1C4E5C310(a1 + 16, *(llvm::Constant **)(a2 - 32));
      if (result)
      {
        **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_1C5843C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;

  result = 0;
  if (sub_1C4D9B530((_DWORD *)a1, a2))
  {
    if (a2)
    {
      if (*(_BYTE *)(a2 + 16) == 84)
      {
        v4 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(v4 + 32 * *(unsigned int *)(a1 + 24))
          && (sub_1C5843CAC(*(unsigned __int8 **)(v4 + 32 * *(unsigned int *)(a1 + 40))) & 1) != 0)
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5843CAC(unsigned __int8 *a1)
{
  uint64_t result;
  char v3;

  if ((sub_1C4E7B480((uint64_t)a1) & 1) != 0)
    return 1;
  result = 0;
  if (a1 && a1[16] <= 0x14u)
  {
    if ((llvm::Constant::isNullValue((llvm::Constant *)a1) & 1) == 0)
      return sub_1C4E71060((uint64_t)&v3, (llvm::Constant *)a1);
    return 1;
  }
  return result;
}

BOOL sub_1C5843D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;

  result = 0;
  if (sub_1C4D9B530((_DWORD *)a1, a2))
  {
    if (a2)
    {
      if (*(_BYTE *)(a2 + 16) == 84)
      {
        v4 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 24));
        if (v4)
        {
          **(_QWORD **)(a1 + 32) = v4;
          if ((sub_1C5843CAC(*(unsigned __int8 **)(a2
                                                  - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)
                                                  + 32 * *(unsigned int *)(a1 + 40))) & 1) != 0)
            return 1;
        }
      }
    }
  }
  return result;
}

BOOL canTryToConstantAddTwoShiftAmounts(llvm::Value *a1, llvm::Value *a2, llvm::Type **a3, llvm::Value *a4)
{
  uint64_t v4;
  uint64_t v6;
  int PrimitiveSizeInBits;
  llvm::Type *v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _BOOL8 v13;
  unsigned int v15;
  unint64_t *v16;
  unsigned int v17;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)a4)
    return 0;
  v6 = *(_QWORD *)a1;
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    v6 = **(_QWORD **)(v6 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6);
  v8 = *a3;
  if ((*((_DWORD *)*a3 + 2) & 0xFE) == 0x12)
    v8 = (llvm::Type *)**((_QWORD **)v8 + 2);
  v9 = PrimitiveSizeInBits + llvm::Type::getPrimitiveSizeInBits(v8);
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
    v4 = **(_QWORD **)(v4 + 16);
  v10 = (v9 - 2);
  v11 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v4);
  v17 = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v16, -1, 1);
    v15 = v17;
    if (v17 > 0x40)
    {
      if (v15 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v16) <= 0x40)
      {
        v13 = *v16 >= v10;
      }
      else
      {
        v13 = 1;
        if (!v16)
          return v13;
      }
      MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
      return v13;
    }
    v12 = (unint64_t)v16;
  }
  else
  {
    v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    if (!v11)
      v12 = 0;
  }
  return v12 >= v10;
}

llvm::Type ****sub_1C5843EE8(uint64_t a1, _BYTE *a2, __int128 *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  llvm::ValueHandleBase *v17;
  llvm::Constant *v18;
  llvm::Type *v19;
  unsigned int PrimitiveSizeInBits;
  llvm::Type ***v21;
  unsigned int v22;
  unint64_t v23;
  llvm::Type *v24;
  int v25;
  int v26;
  llvm::UndefValue *ZExtOrBitCast;
  llvm::Type ****v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  llvm::Type ***v32;
  _QWORD *v33;
  llvm::Type ***v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  char v47;
  char v48;
  char v49;
  char v50;
  unint64_t v51;
  unsigned int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  llvm::Value *v56;
  llvm::Type ****v57;
  uint64_t v58;
  llvm::Type **v59;
  llvm *v60;
  uint64_t v61;

  v61 = 0;
  v60 = 0;
  *(_QWORD *)&v53 = &v61;
  *((_QWORD *)&v53 + 1) = &v60;
  *(_QWORD *)&v54 = &v60;
  v8 = 0;
  if (sub_1C584BE38((_QWORD **)&v53, (uint64_t)a2))
  {
    v58 = 0;
    v59 = 0;
    v9 = v61;
    *(_QWORD *)&v53 = &v59;
    *((_QWORD *)&v53 + 1) = &v58;
    *(_QWORD *)&v54 = &v59;
    v10 = sub_1C584BEE8((_QWORD **)&v53, v61, (char)&v59);
    if (v9)
    {
      v11 = 16;
      if (v10)
        v11 = 8;
      **(_QWORD **)((char *)&v53 + v11) = v9;
    }
    v56 = 0;
    v57 = 0;
    *(_QWORD *)&v53 = &v57;
    *((_QWORD *)&v53 + 1) = &v56;
    *(_QWORD *)&v54 = &v56;
    v8 = 0;
    if (sub_1C584BF60((_QWORD **)&v53, (uint64_t)v59))
    {
      if (canTryToConstantAddTwoShiftAmounts((llvm::Value *)a2, v60, v59, v56))
      {
        v12 = a2 && (a2[16] & 0xFE) == 0x36 && v59 && ((_BYTE)v59[2] & 0xFE) == 54;
        if (!a4 || v12)
        {
          v13 = a2[16];
          if ((v13 == *((unsigned __int8 *)v59 + 16) || a4)
            && (!v58
             || (a4 & 1) != 0
             || (v14 = *(_QWORD *)(*((_QWORD *)a2 - 8) + 8)) != 0 && !*(_QWORD *)(v14 + 8)
             || (v15 = *(_QWORD *)(*((_QWORD *)a2 - 4) + 8)) != 0 && !*(_QWORD *)(v15 + 8)))
          {
            v16 = a3[2];
            v54 = a3[1];
            v55 = v16;
            v53 = *a3;
            *(_QWORD *)&v55 = a2;
            v17 = sub_1C4E62AE0(v60, v56, 0, 0, (uint64_t)&v53, (llvm::DSOLocalEquivalent **)3);
            if (v17)
            {
              v18 = v17;
              if (*((unsigned __int8 *)v17 + 16) < 0x15u)
              {
                v19 = *(llvm::Type **)v17;
                if ((*(_DWORD *)(*(_QWORD *)v18 + 8) & 0xFE) == 0x12)
                  v19 = (llvm::Type *)**((_QWORD **)v19 + 2);
                PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v19);
                v21 = *v57;
                if (((_DWORD)(*v57)[1] & 0xFE) == 0x12)
                  v21 = (llvm::Type ***)*v21[2];
                v22 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v21);
                v52 = PrimitiveSizeInBits;
                if (PrimitiveSizeInBits > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v51, v22, 0);
                }
                else
                {
                  if (PrimitiveSizeInBits)
                    v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                  else
                    LODWORD(v23) = 0;
                  v51 = v23 & v22;
                }
                *(_QWORD *)&v53 = 36;
                *((_QWORD *)&v53 + 1) = &v51;
                sub_1C57A1A3C((uint64_t)&v53, v18);
                v26 = v25;
                if (v52 >= 0x41 && v51)
                  MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
                if (v26)
                {
                  if (!v12 || !v58 && !a4)
                  {
LABEL_40:
                    ZExtOrBitCast = llvm::ConstantExpr::getZExtOrBitCast((llvm::Type **)v18, *v57, v24);
                    v28 = v57;
                    LOWORD(v55) = 257;
                    v29 = (char *)operator new(0x80uLL);
                    v30 = v29;
                    *((_QWORD *)v29 + 5) = 0;
                    v31 = v29 + 40;
                    *((_QWORD *)v29 + 6) = 0;
                    *((_QWORD *)v29 + 8) = *v28;
                    v8 = (uint64_t)(v29 + 64);
                    *((_QWORD *)v29 + 3) = v29 + 64;
                    *((_QWORD *)v29 + 7) = v29 + 64;
                    *((_QWORD *)v29 + 9) = 0;
                    v29[80] = v13;
                    v29[81] = 0;
                    *((_WORD *)v29 + 41) = 0;
                    *((_DWORD *)v29 + 21) = 2;
                    *(_OWORD *)(v29 + 88) = 0u;
                    *(_OWORD *)(v29 + 104) = 0u;
                    *((_DWORD *)v29 + 30) = 0;
                    *(_QWORD *)v29 = v28;
                    v34 = v28[1];
                    v33 = v28 + 1;
                    v32 = v34;
                    *((_QWORD *)v29 + 1) = v34;
                    if (v34)
                      v32[2] = (llvm::Type **)(v29 + 8);
                    *((_QWORD *)v29 + 2) = v33;
                    *v33 = v29;
                    *((_QWORD *)v29 + 4) = ZExtOrBitCast;
                    if (ZExtOrBitCast)
                    {
                      v37 = *((_QWORD *)ZExtOrBitCast + 1);
                      v36 = (_QWORD *)((char *)ZExtOrBitCast + 8);
                      v35 = v37;
                      *v31 = v37;
                      if (v37)
                        *(_QWORD *)(v35 + 16) = v31;
                      *((_QWORD *)v29 + 6) = v36;
                      *v36 = v29 + 32;
                    }
                    llvm::Value::setName((uint64_t ***)v29 + 8, (uint64_t)&v53);
                    if (v58)
                    {
                      v38 = *(uint64_t **)(a1 + 24);
                      LOWORD(v55) = 257;
                      sub_1C4773754(v38, v8, (uint64_t)&v53);
                      LOWORD(v55) = 257;
                      llvm::CastInst::Create(38);
                      return (llvm::Type ****)v39;
                    }
                    else
                    {
                      v40 = a2[17];
                      if (v13 == 53)
                      {
                        if ((a2[17] & 2) != 0)
                          v41 = *((_BYTE *)v59 + 17) & 2;
                        else
                          v41 = 0;
                        v48 = v30[81] & 0xFD | v41;
                        v30[81] = v48;
                        if ((v40 & 4) != 0)
                          v49 = *((_BYTE *)v59 + 17) & 4;
                        else
                          v49 = 0;
                        v50 = v49 | v48 & 0xFB;
                      }
                      else
                      {
                        if ((a2[17] & 2) != 0)
                          v47 = *((_BYTE *)v59 + 17) & 2;
                        else
                          v47 = 0;
                        v50 = v30[81] & 0xFD | v47;
                      }
                      v30[81] = v50;
                    }
                    return (llvm::Type ****)v8;
                  }
                  v42 = v22 - 1;
                  v52 = PrimitiveSizeInBits;
                  if (PrimitiveSizeInBits > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v51, v42, 0);
                  }
                  else
                  {
                    if (PrimitiveSizeInBits)
                      v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                    else
                      v43 = 0;
                    v51 = v43 & v42;
                  }
                  *(_QWORD *)&v53 = 32;
                  *((_QWORD *)&v53 + 1) = &v51;
                  sub_1C57A1A3C((uint64_t)&v53, v18);
                  v45 = v44;
                  if (v52 >= 0x41 && v51)
                    MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
                  if (v45)
                  {
                    if (a4)
                      return v57;
                    goto LABEL_40;
                  }
                }
              }
            }
          }
        }
      }
      return 0;
    }
  }
  return (llvm::Type ****)v8;
}

uint64_t sub_1C58443C8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t ***v4;
  uint64_t v5;
  uint64_t ***v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  int v18;
  int v19;
  llvm::ConstantExpr *v20;
  llvm::ConstantExpr *v21;
  llvm::Value **v22;
  uint64_t ***v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int8 *v26;
  llvm::Constant *v27;
  unsigned __int8 v28;
  llvm::Constant *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  char v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t ***v44;
  uint64_t *v45;
  llvm::Constant **v46;
  llvm::Constant **v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::Constant *v68;
  unsigned __int8 v69;
  llvm::Constant *v70;
  _QWORD *v71;
  unsigned __int8 v72;
  uint64_t **v73;
  char *v74;
  uint64_t **v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t **v82;
  uint64_t **v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t *v94;
  int v95;
  _QWORD *v96;
  llvm::ValueHandleBase *Add;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned __int8 *v100;
  char v101;
  char *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t ***v110;
  llvm::Value **v111;
  llvm::ValueHandleBase *Sub;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t ****v118;
  uint64_t ***v119;
  int v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t ***v124;
  uint64_t *v125;
  llvm::Constant **v126;
  llvm::Constant **v127;
  uint64_t v128;
  unsigned int v129;
  unsigned __int8 *v130;
  llvm::Constant *v131;
  unsigned __int8 v132;
  llvm::Constant *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  unsigned __int8 *v144;
  llvm::Constant *v145;
  unsigned __int8 v146;
  llvm::Constant *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD **v154;
  uint64_t v155;
  _QWORD **v156;
  uint64_t v157;
  _QWORD **v158;
  uint64_t v159;
  _QWORD **v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  llvm::Constant *v164;
  uint64_t **v165;
  unsigned __int8 *v166;
  _QWORD *v167;
  uint64_t v168;
  unsigned int v169;
  llvm::Constant *v170;
  llvm::ConstantExpr *v171;
  llvm::Constant **v172;
  llvm::Constant **v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  llvm::Constant *v179;
  __int16 v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t ***)sub_1C578171C(a1, (uint64_t)a2);
  if (v4)
    return (uint64_t)v4;
  v5 = *((_QWORD *)a2 - 8);
  v6 = (uint64_t ***)*((_QWORD *)a2 - 4);
  v166 = 0;
  v172 = (llvm::Constant **)&v166;
  v7 = v6[1];
  if (v7 && !v7[1] && sub_1C4B037F8(&v172, (uint64_t)v6))
  {
    v8 = *(uint64_t **)(a1 + 24);
    v9 = *(_QWORD *)a2;
    if ((*((_BYTE *)v6 + 23) & 0x10) == 0)
    {
      v46 = 0;
      v45 = (uint64_t *)&byte_1C871356D;
      goto LABEL_44;
    }
    v10 = ***v6;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v14 = (uint64_t ****)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 == v6)
      {
LABEL_43:
        v44 = v14[1];
        v47 = (llvm::Constant **)*v44;
        v45 = (uint64_t *)(v44 + 2);
        v46 = v47;
LABEL_44:
        WORD4(v175) = 261;
        v172 = (llvm::Constant **)v45;
        v173 = v46;
        v48 = sub_1C4773E38(v8, 39, v166, v9, (uint64_t)&v172);
        v49 = a2[16];
        WORD4(v175) = 257;
        v50 = (char *)operator new(0x80uLL);
        *((_QWORD *)v50 + 6) = 0;
        *((_QWORD *)v50 + 5) = 0;
        v51 = v50 + 40;
        *((_QWORD *)v50 + 8) = *(_QWORD *)v5;
        v4 = (uint64_t ***)(v50 + 64);
        *((_QWORD *)v50 + 3) = v50 + 64;
        *((_QWORD *)v50 + 7) = v50 + 64;
        *((_QWORD *)v50 + 9) = 0;
        v50[80] = v49;
        v50[81] = 0;
        *((_WORD *)v50 + 41) = 0;
        *((_DWORD *)v50 + 21) = 2;
        *(_OWORD *)(v50 + 88) = 0u;
        *(_OWORD *)(v50 + 104) = 0u;
        *((_DWORD *)v50 + 30) = 0;
        *(_QWORD *)v50 = v5;
        v54 = *(_QWORD *)(v5 + 8);
        v53 = (_QWORD *)(v5 + 8);
        v52 = v54;
        *((_QWORD *)v50 + 1) = v54;
        if (v54)
          *(_QWORD *)(v52 + 16) = v50 + 8;
        *((_QWORD *)v50 + 2) = v53;
        *v53 = v50;
        *((_QWORD *)v50 + 4) = v48;
        if (v48)
        {
          v57 = *((_QWORD *)v48 + 1);
          v56 = v48 + 8;
          v55 = v57;
          *v51 = v57;
          if (v57)
            *(_QWORD *)(v55 + 16) = v51;
          *((_QWORD *)v50 + 6) = v56;
          *v56 = v50 + 32;
        }
LABEL_76:
        v82 = (uint64_t **)&v172;
LABEL_77:
        llvm::Value::setName(v4, (uint64_t)v82);
        return (uint64_t)v4;
      }
      v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == v6)
        {
          v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_43;
        }
      }
    }
    v14 = (uint64_t ****)(v11 + 16 * v12);
    goto LABEL_43;
  }
  if (sub_1C584C4C4(a1, (llvm::UndefValue *)a2))
    return (uint64_t)a2;
  if (*(unsigned __int8 *)(v5 + 16) <= 0x14u && *((_BYTE *)v6 + 16) == 85)
  {
    v4 = (uint64_t ***)sub_1C577FF7C(a1, a2, v6, 0);
    if (v4)
      return (uint64_t)v4;
  }
  if (*((unsigned __int8 *)v6 + 16) <= 0x14u)
  {
    v171 = 0;
    v172 = &v171;
    v173 = 0;
    if (sub_1C4D8A004((uint64_t)&v172, (llvm::Constant *)v6))
    {
      v18 = a2[16];
      v19 = v18 - 28;
      if (v18 != 55)
      {
        v20 = v171;
        if (*((_DWORD *)v171 + 2) >= 0x41u)
          v20 = *(llvm::ConstantExpr **)v171;
        if (sub_1C5845090(v5, *(unsigned int *)v20, v19 == 25, (const llvm::DataLayout **)a1, (llvm::AssumptionCache *)a2))
        {
          v21 = v171;
          if (*((_DWORD *)v171 + 2) >= 0x41u)
            v21 = *(llvm::ConstantExpr **)v171;
          v22 = sub_1C584546C(v5, *(unsigned int *)v21, v19 == 25, a1);
          v23 = (uint64_t ***)sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v22);
LABEL_26:
          v4 = v23;
          if (v23)
            return (uint64_t)v4;
          goto LABEL_66;
        }
      }
      v4 = (uint64_t ***)sub_1C5781CD4(a1, a2);
      if (v4)
        return (uint64_t)v4;
      v24 = *(_QWORD *)(v5 + 8);
      if (!v24 || *(_QWORD *)(v24 + 8))
        goto LABEL_66;
      v25 = *(unsigned __int8 *)(v5 + 16);
      if (v25 >= 0x1C && v25 - 59 >= 0xFFFFFFEE)
      {
        v170 = 0;
        v26 = *(unsigned __int8 **)(v5 - 32);
        v172 = &v170;
        v173 = 0;
        if (sub_1C4D89F84((uint64_t)&v172, v26) && (sub_1C5845AD4(a2[16], v5) & 1) != 0)
        {
          v28 = a2[16] - 28;
          v29 = *(llvm::Constant **)(v5 - 32);
          v30 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)(a2[16] - 28), v29, (llvm::Constant *)v6, v27);
          if (!v30)
          {
            v156 = *(_QWORD ***)v29;
            if (*(_QWORD *)v29)
            {
              v178 = (uint64_t)v29;
              v179 = (llvm::Constant *)v6;
              v157 = **v156 + 1512;
              LODWORD(v172) = v28;
              v173 = (llvm::Constant **)&v178;
              v174 = 2;
              v175 = 0u;
              v176 = 0u;
              v177 = 0;
              v30 = sub_1C537D4FC(v157, (uint64_t)v156, (unsigned __int8 *)&v172);
            }
            else
            {
              v30 = 0;
            }
          }
          v31 = *(_QWORD *)(a1 + 24);
          v32 = a2[16] - 28;
          v33 = *(_QWORD **)(v5 - 64);
          WORD4(v175) = 257;
          v34 = sub_1C4773860(v31, v32, v33, (uint64_t)v6, (uint64_t)&v172, 0);
          llvm::Value::takeName((llvm::Value *)v34, (llvm::Value *)v5);
          v35 = *(_BYTE *)(v5 + 16);
          WORD4(v175) = 257;
          v36 = (char *)operator new(0x80uLL);
          *((_QWORD *)v36 + 6) = 0;
          *((_QWORD *)v36 + 5) = 0;
          v37 = v36 + 40;
          *((_QWORD *)v36 + 8) = *(_QWORD *)v34;
          v4 = (uint64_t ***)(v36 + 64);
          *((_QWORD *)v36 + 3) = v36 + 64;
          *((_QWORD *)v36 + 7) = v36 + 64;
          *((_QWORD *)v36 + 9) = 0;
          v36[80] = v35;
          v36[81] = 0;
          *((_WORD *)v36 + 41) = 0;
          *((_DWORD *)v36 + 21) = 2;
          *(_OWORD *)(v36 + 88) = 0u;
          *(_OWORD *)(v36 + 104) = 0u;
          *((_DWORD *)v36 + 30) = 0;
          *(_QWORD *)v36 = v34;
          v40 = *((_QWORD *)v34 + 1);
          v39 = v34 + 8;
          v38 = v40;
          *((_QWORD *)v36 + 1) = v40;
          if (v40)
            *(_QWORD *)(v38 + 16) = v36 + 8;
          *((_QWORD *)v36 + 2) = v39;
          *v39 = v36;
          *((_QWORD *)v36 + 4) = v30;
          if (v30)
          {
            v43 = *(_QWORD *)(v30 + 8);
            v42 = (_QWORD *)(v30 + 8);
            v41 = v43;
            *v37 = v43;
            if (v43)
              *(_QWORD *)(v41 + 16) = v37;
            *((_QWORD *)v36 + 6) = v42;
            *v42 = v36 + 32;
          }
          goto LABEL_76;
        }
        v25 = *(unsigned __int8 *)(v5 + 16);
      }
      if (v25 != 85)
        goto LABEL_66;
      v58 = *(_DWORD *)(v5 + 20);
      if ((v58 & 0x40000000) != 0)
        v59 = *(uint64_t **)(v5 - 8);
      else
        v59 = (uint64_t *)(v5 - 32 * (v58 & 0x7FFFFFF));
      v60 = *v59;
      if (*v59)
      {
        v61 = v59[4];
        v62 = *(_QWORD *)(v61 + 8);
        if (v62)
        {
          if (!*(_QWORD *)(v62 + 8))
          {
            v122 = *(unsigned __int8 *)(v61 + 16);
            if (v122 >= 0x1C)
            {
              v162 = v61;
              if (v122 - 59 >= 0xFFFFFFEE)
              {
                v123 = (v58 & 0x40000000) != 0 ? *(_QWORD *)(v5 - 8) : v5 - 32 * (v58 & 0x7FFFFFF);
                v143 = *(_QWORD *)(v123 + 64);
                if (v143)
                {
                  v170 = 0;
                  if (*(unsigned __int8 *)(v143 + 16) >= 0x15u && *(_QWORD *)(v162 - 64) == v143)
                  {
                    v144 = *(unsigned __int8 **)(v162 - 32);
                    v172 = &v170;
                    v173 = 0;
                    if (sub_1C4D89F84((uint64_t)&v172, v144))
                    {
                      if ((sub_1C5845AD4(a2[16], v162) & 1) != 0)
                      {
                        v146 = a2[16] - 28;
                        v147 = *(llvm::Constant **)(v162 - 32);
                        v148 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)(a2[16] - 28), v147, (llvm::Constant *)v6, v145);
                        if (!v148)
                        {
                          v158 = *(_QWORD ***)v147;
                          if (*(_QWORD *)v147)
                          {
                            v178 = (uint64_t)v147;
                            v179 = (llvm::Constant *)v6;
                            v159 = **v158 + 1512;
                            LODWORD(v172) = v146;
                            v173 = (llvm::Constant **)&v178;
                            v174 = 2;
                            v175 = 0u;
                            v176 = 0u;
                            v177 = 0;
                            v148 = sub_1C537D4FC(v159, (uint64_t)v158, (unsigned __int8 *)&v172);
                          }
                          else
                          {
                            v148 = 0;
                          }
                        }
                        v149 = *(_QWORD *)(a1 + 24);
                        v150 = a2[16] - 28;
                        WORD4(v175) = 257;
                        v151 = sub_1C4773860(v149, v150, (_QWORD *)v143, (uint64_t)v6, (uint64_t)&v172, 0);
                        v152 = *(_QWORD *)(a1 + 24);
                        v153 = *(unsigned __int8 *)(v162 + 16) - 28;
                        WORD4(v175) = 257;
                        v142 = (uint64_t *)sub_1C4773860(v152, v153, v151, v148, (uint64_t)&v172, 0);
                        WORD4(v175) = 257;
                        v141 = v60;
                        v140 = v151;
LABEL_138:
                        v23 = (uint64_t ***)sub_1C4FC8748(v141, v142, (uint64_t)v140, (uint64_t)&v172, 0, 0);
                        goto LABEL_26;
                      }
                    }
                  }
                  if (*(_BYTE *)(v5 + 16) != 85)
                    goto LABEL_66;
                  v58 = *(_DWORD *)(v5 + 20);
                }
              }
            }
          }
        }
      }
      if ((v58 & 0x40000000) != 0)
        v63 = *(uint64_t **)(v5 - 8);
      else
        v63 = (uint64_t *)(v5 - 32 * (v58 & 0x7FFFFFF));
      v64 = *v63;
      if (!*v63)
        goto LABEL_66;
      v65 = v63[4];
      if (!v65)
        goto LABEL_66;
      v66 = v63[8];
      v67 = *(_QWORD *)(v66 + 8);
      if (!v67)
        goto LABEL_66;
      if (*(_QWORD *)(v67 + 8))
        goto LABEL_66;
      v129 = *(unsigned __int8 *)(v66 + 16);
      if (v129 < 0x1C)
        goto LABEL_66;
      if (v129 - 59 < 0xFFFFFFEE)
        goto LABEL_66;
      v170 = 0;
      v163 = (_QWORD *)v65;
      if (*(unsigned __int8 *)(v65 + 16) < 0x15u)
        goto LABEL_66;
      if (*(_QWORD *)(v66 - 64) != v65)
        goto LABEL_66;
      v130 = *(unsigned __int8 **)(v66 - 32);
      v172 = &v170;
      v173 = 0;
      if (!sub_1C4D89F84((uint64_t)&v172, v130) || (sub_1C5845AD4(a2[16], v66) & 1) == 0)
        goto LABEL_66;
      v132 = a2[16] - 28;
      v133 = *(llvm::Constant **)(v66 - 32);
      v134 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)(a2[16] - 28), v133, (llvm::Constant *)v6, v131);
      if (!v134)
      {
        v160 = *(_QWORD ***)v133;
        if (*(_QWORD *)v133)
        {
          v178 = (uint64_t)v133;
          v179 = (llvm::Constant *)v6;
          v161 = **v160 + 1512;
          LODWORD(v172) = v132;
          v173 = (llvm::Constant **)&v178;
          v174 = 2;
          v175 = 0u;
          v176 = 0u;
          v177 = 0;
          v134 = sub_1C537D4FC(v161, (uint64_t)v160, (unsigned __int8 *)&v172);
        }
        else
        {
          v134 = 0;
        }
      }
      v135 = *(_QWORD *)(a1 + 24);
      v136 = a2[16] - 28;
      WORD4(v175) = 257;
      v137 = sub_1C4773860(v135, v136, v163, (uint64_t)v6, (uint64_t)&v172, 0);
      v138 = *(_QWORD *)(a1 + 24);
      v139 = *(unsigned __int8 *)(v66 + 16) - 28;
      WORD4(v175) = 257;
      v140 = sub_1C4773860(v138, v139, v137, v134, (uint64_t)&v172, 0);
      WORD4(v175) = 257;
      v141 = v64;
      v142 = (uint64_t *)v137;
      goto LABEL_138;
    }
  }
LABEL_66:
  v4 = (uint64_t ***)sub_1C5843EE8(a1, a2, (__int128 *)(a1 + 88), 0);
  if (v4)
    return (uint64_t)v4;
  v164 = 0;
  v165 = 0;
  if (*(unsigned __int8 *)(v5 + 16) <= 0x14u)
  {
    v172 = (llvm::Constant **)&v165;
    v173 = &v164;
    if (sub_1C579ECE4(&v172, (uint64_t)v6))
    {
      v69 = a2[16] - 28;
      v70 = v164;
      v71 = llvm::ConstantFoldBinaryInstruction((llvm *)(a2[16] - 28), (llvm::Constant *)v5, v164, v68);
      if (!v71)
      {
        v154 = *(_QWORD ***)v5;
        if (*(_QWORD *)v5)
        {
          v178 = v5;
          v179 = v70;
          v155 = **v154 + 1512;
          LODWORD(v172) = v69;
          v173 = (llvm::Constant **)&v178;
          v174 = 2;
          v175 = 0u;
          v176 = 0u;
          v177 = 0;
          v71 = (_QWORD *)sub_1C537D4FC(v155, (uint64_t)v154, (unsigned __int8 *)&v172);
        }
        else
        {
          v71 = 0;
        }
      }
      v72 = a2[16];
      v73 = v165;
      WORD4(v175) = 257;
      v74 = (char *)operator new(0x80uLL);
      *((_QWORD *)v74 + 6) = 0;
      *((_QWORD *)v74 + 5) = 0;
      v75 = v74 + 40;
      *((_QWORD *)v74 + 8) = *v71;
      v4 = (uint64_t ***)(v74 + 64);
      *((_QWORD *)v74 + 3) = v74 + 64;
      *((_QWORD *)v74 + 7) = v74 + 64;
      *((_QWORD *)v74 + 9) = 0;
      v74[80] = v72;
      v74[81] = 0;
      *((_WORD *)v74 + 41) = 0;
      *((_DWORD *)v74 + 21) = 2;
      *(_OWORD *)(v74 + 88) = 0u;
      *(_OWORD *)(v74 + 104) = 0u;
      *((_DWORD *)v74 + 30) = 0;
      *(_QWORD *)v74 = v71;
      v78 = v71[1];
      v77 = v71 + 1;
      v76 = v78;
      *((_QWORD *)v74 + 1) = v78;
      if (v78)
        *(_QWORD *)(v76 + 16) = v74 + 8;
      *((_QWORD *)v74 + 2) = v77;
      *v77 = v74;
      *((_QWORD *)v74 + 4) = v73;
      if (v73)
      {
        v81 = v73[1];
        v80 = v73 + 1;
        v79 = (uint64_t)v81;
        *v75 = v81;
        if (v81)
          *(_QWORD *)(v79 + 16) = v75;
        *((_QWORD *)v74 + 6) = v80;
        *v80 = v74 + 32;
      }
      goto LABEL_76;
    }
  }
  v84 = v6[1];
  if (v84 && !v84[1])
  {
    v88 = *((unsigned __int8 *)v6 + 16);
    if (v88 == 5)
    {
      if (*((_WORD *)v6 + 9) != 23)
        goto LABEL_81;
      v110 = &v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)];
      if (!*v110)
        goto LABEL_81;
      v165 = *v110;
      v89 = (unsigned __int8 *)v110[4];
      if (!v89)
        goto LABEL_81;
    }
    else
    {
      if (v88 != 51)
        goto LABEL_81;
      if (!*(v6 - 8))
        goto LABEL_81;
      v165 = *(v6 - 8);
      v89 = (unsigned __int8 *)*(v6 - 4);
      if (!v89 || v89[16] > 0x14u)
        goto LABEL_81;
    }
    if (!sub_1C4E79B78((uint64_t)&v172, (llvm::Constant *)v89))
      goto LABEL_81;
    v111 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 1, 0);
    Sub = llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v89, (llvm::Constant *)v111, 0, 0);
    v113 = *(_QWORD *)(a1 + 24);
    if ((*((_BYTE *)v6 + 23) & 0x10) == 0)
    {
      v126 = 0;
      v125 = (uint64_t *)&byte_1C871356D;
      goto LABEL_121;
    }
    v114 = ***v6;
    v115 = *(_QWORD *)(v114 + 152);
    v116 = *(unsigned int *)(v114 + 168);
    if ((_DWORD)v116)
    {
      LODWORD(v117) = (v116 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v118 = (uint64_t ****)(v115 + 16 * v117);
      v119 = *v118;
      if (*v118 == v6)
      {
LABEL_120:
        v124 = v118[1];
        v127 = (llvm::Constant **)*v124;
        v125 = (uint64_t *)(v124 + 2);
        v126 = v127;
LABEL_121:
        WORD4(v175) = 261;
        v172 = (llvm::Constant **)v125;
        v173 = v126;
        v128 = sub_1C4D89BCC(v113, v165, (uint64_t)Sub, (uint64_t)&v172);
        return sub_1C577E2C8(a1, (uint64_t)a2, 1u, v128);
      }
      v120 = 1;
      while (v119 != (uint64_t ***)-4096)
      {
        v121 = v117 + v120++;
        v117 = v121 & (v116 - 1);
        v119 = *(uint64_t ****)(v115 + 16 * v117);
        if (v119 == v6)
        {
          v118 = (uint64_t ****)(v115 + 16 * v117);
          goto LABEL_120;
        }
      }
    }
    v118 = (uint64_t ****)(v115 + 16 * v116);
    goto LABEL_120;
  }
LABEL_81:
  v4 = 0;
  v85 = *((_QWORD *)a2 - 8);
  if (v85)
  {
    v86 = *(unsigned __int8 *)(v85 + 16);
    if (v86 >= 0x1C && v86 - 59 > 0xFFFFFFFC)
    {
      v87 = *(_QWORD *)(v85 + 8);
      if (!v87 || *(_QWORD *)(v87 + 8))
        return 0;
      v4 = 0;
      v90 = *(_QWORD *)(a1 + 24);
      v171 = 0;
      v91 = *((_QWORD *)a2 - 4);
      if (v91 && *(unsigned __int8 *)(v91 + 16) <= 0x14u)
      {
        v170 = (llvm::Constant *)*((_QWORD *)a2 - 4);
        v169 = a2[16] - 28;
        v92 = *(_QWORD *)a2;
        v167 = 0;
        v168 = v92;
        v172 = (llvm::Constant **)&v168;
        v173 = (llvm::Constant **)&v169;
        v174 = (uint64_t)&v167;
        *(_QWORD *)&v175 = &v171;
        *((_QWORD *)&v175 + 1) = &v170;
        v93 = sub_1C584BAB4((uint64_t **)&v172, *(_QWORD *)(v85 - 64));
        v94 = (uint64_t *)(v85 - 32);
        if ((v93 & 1) != 0 || (v95 = sub_1C584BAB4((uint64_t **)&v172, *v94), v94 = (uint64_t *)(v85 - 64), v95))
        {
          v96 = (_QWORD *)*v94;
          Add = llvm::ConstantExpr::getAdd(v171, v170, 0, 0);
          v180 = 257;
          v98 = sub_1C4773860(v90, v169, v167, (uint64_t)Add, (uint64_t)&v178, 0);
          v99 = *((_QWORD *)a2 - 4);
          v180 = 257;
          v100 = sub_1C4773860(v90, v169, v96, v99, (uint64_t)&v178, 0);
          v101 = *(_BYTE *)(v85 + 16);
          v180 = 257;
          v102 = (char *)operator new(0x80uLL);
          *((_QWORD *)v102 + 6) = 0;
          *((_QWORD *)v102 + 5) = 0;
          v103 = v102 + 40;
          *((_QWORD *)v102 + 8) = *(_QWORD *)v98;
          v4 = (uint64_t ***)(v102 + 64);
          *((_QWORD *)v102 + 3) = v102 + 64;
          *((_QWORD *)v102 + 7) = v102 + 64;
          *((_QWORD *)v102 + 9) = 0;
          v102[80] = v101;
          v102[81] = 0;
          *((_WORD *)v102 + 41) = 0;
          *((_DWORD *)v102 + 21) = 2;
          *(_OWORD *)(v102 + 88) = 0u;
          *(_OWORD *)(v102 + 104) = 0u;
          *((_DWORD *)v102 + 30) = 0;
          *(_QWORD *)v102 = v98;
          v106 = *((_QWORD *)v98 + 1);
          v105 = v98 + 8;
          v104 = v106;
          *((_QWORD *)v102 + 1) = v106;
          if (v106)
            *(_QWORD *)(v104 + 16) = v102 + 8;
          *((_QWORD *)v102 + 2) = v105;
          *v105 = v102;
          *((_QWORD *)v102 + 4) = v100;
          if (v100)
          {
            v109 = *((_QWORD *)v100 + 1);
            v108 = v100 + 8;
            v107 = v109;
            *v103 = v109;
            if (v109)
              *(_QWORD *)(v107 + 16) = v103;
            *((_QWORD *)v102 + 6) = v108;
            *v108 = v102 + 32;
          }
          v82 = (uint64_t **)&v178;
          goto LABEL_77;
        }
        return 0;
      }
    }
  }
  return (uint64_t)v4;
}

uint64_t sub_1C5845090(uint64_t a1, uint64_t a2, uint64_t a3, const llvm::DataLayout **a4, llvm::AssumptionCache *a5)
{
  unsigned int v5;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  llvm::APInt *v25;
  unsigned int v26;
  llvm::APInt *v27;
  llvm::Type *v28;
  unsigned int v29;
  unsigned int PrimitiveSizeInBits;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  llvm::Type *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  size_t v40;
  int v41;
  llvm **v42;
  BOOL IsZero;
  BOOL v44;
  void *__src;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  llvm::APInt *v49;

  v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 < 0x15)
    return 1;
  v11 = a1;
  while (1)
  {
    if (v5 < 0x1C)
      return 0;
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12 || *(_QWORD *)(v12 + 8))
      return 0;
    if (v5 - 56 < 3)
    {
      v13 = *(_DWORD *)(v11 + 20);
      if ((v13 & 0x40000000) != 0)
        v14 = *(_QWORD **)(v11 - 8);
      else
        v14 = (_QWORD *)(v11 - 32 * (v13 & 0x7FFFFFF));
      result = sub_1C5845090(*v14, a2, a3, a4, v11);
      if (!(_DWORD)result)
        return result;
      v15 = *(_DWORD *)(v11 + 20);
      if ((v15 & 0x40000000) != 0)
        v16 = *(_QWORD *)(v11 - 8);
      else
        v16 = v11 - 32 * (v15 & 0x7FFFFFF);
      v17 = *(_QWORD *)(v16 + 32);
      goto LABEL_18;
    }
    if (v5 != 85)
      break;
    v17 = *(_QWORD *)(v11 - 32);
    if ((sub_1C5845090(*(_QWORD *)(v11 - 64), a2, a3, a4, v11) & 1) == 0)
      return 0;
LABEL_18:
    v5 = *(unsigned __int8 *)(v17 + 16);
    a5 = (llvm::AssumptionCache *)v11;
    v11 = v17;
    if (v5 < 0x15)
      return 1;
  }
  if (v5 - 53 < 2)
  {
    v49 = 0;
    v21 = *(_DWORD *)(v11 + 20);
    if ((v21 & 0x40000000) != 0)
      v22 = *(_QWORD *)(v11 - 8);
    else
      v22 = v11 - 32 * (v21 & 0x7FFFFFF);
    v23 = *(unsigned __int8 **)(v22 + 32);
    v47 = &v49;
    v48 = 0;
    result = (uint64_t)sub_1C4D89F84((uint64_t)&v47, v23);
    if (!(_DWORD)result)
      return result;
    v24 = *(unsigned __int8 *)(v11 + 16);
    if ((v24 == 53) == (_DWORD)a3)
      return 1;
    v25 = v49;
    v26 = *((_DWORD *)v49 + 2);
    v27 = v49;
    if (v26 >= 0x41)
    {
      if (v26 - llvm::APInt::countLeadingZerosSlowCase(v49) >= 0x41)
      {
        v36 = *(llvm::Type **)v11;
        if ((*(_DWORD *)(*(_QWORD *)v11 + 8) & 0xFE) == 0x12)
          v36 = (llvm::Type *)**((_QWORD **)v36 + 2);
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v36);
        goto LABEL_50;
      }
      v27 = *(llvm::APInt **)v25;
    }
    if (*(_QWORD *)v27 == a2)
      return 1;
    v28 = *(llvm::Type **)v11;
    if ((*(_DWORD *)(*(_QWORD *)v11 + 8) & 0xFE) == 0x12)
      v28 = (llvm::Type *)**((_QWORD **)v28 + 2);
    v29 = llvm::Type::getPrimitiveSizeInBits(v28);
    PrimitiveSizeInBits = v29;
    if (v26 < 0x41)
    {
      v31 = *(_QWORD *)v25;
      if (*(_QWORD *)v25 <= (unint64_t)a2)
        return 0;
      v32 = v29;
      goto LABEL_53;
    }
LABEL_50:
    if (v26 - llvm::APInt::countLeadingZerosSlowCase(v25) > 0x40)
      return 0;
    v31 = **(_QWORD **)v25;
    if (v31 <= a2)
      return 0;
    v32 = PrimitiveSizeInBits;
LABEL_53:
    if (v31 < v32)
    {
      v37 = PrimitiveSizeInBits - v31;
      v38 = v31 - a2;
      if (v24 == 53)
        v39 = v37;
      else
        v39 = v38;
      v46 = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      else
        __src = 0;
      sub_1C4912E54(&__src, 0, a2);
      LODWORD(v48) = v46;
      if (v46 > 0x40)
      {
        v40 = (((unint64_t)v46 + 63) >> 3) & 0x3FFFFFF8;
        v47 = (void *)operator new[]();
        memcpy(v47, __src, v40);
      }
      else
      {
        v47 = __src;
      }
      sub_1C4888094((uint64_t)&v47, v39);
      if (v46 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      v41 = *(_DWORD *)(v11 + 20);
      if ((v41 & 0x40000000) != 0)
        v42 = *(llvm ***)(v11 - 8);
      else
        v42 = (llvm **)(v11 - 32 * (v41 & 0x7FFFFFF));
      IsZero = llvm::MaskedValueIsZero(*v42, (const llvm::Value *)&v47, a4[10], 0, a4[7], a5, a4[9], (const llvm::DominatorTree *)1, v44);
      if (v48 >= 0x41 && v47)
        MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
      if (IsZero)
        return 1;
    }
    return 0;
  }
  if (v5 != 83)
    return 0;
  v18 = *(_DWORD *)(v11 + 20);
  if ((v18 & 0x40000000) != 0)
  {
    v20 = *(uint64_t **)(v11 - 8);
    v19 = v18 & 0x7FFFFFF;
  }
  else
  {
    v19 = v18 & 0x7FFFFFF;
    v20 = (uint64_t *)(v11 - 32 * v19);
  }
  if (!v19)
    return 1;
  v33 = 32 * v19 - 32;
  do
  {
    v34 = *v20;
    v20 += 4;
    result = sub_1C5845090(v34, a2, a3, a4, v11);
    if ((_DWORD)result)
      v35 = v33 == 0;
    else
      v35 = 1;
    v33 -= 32;
  }
  while (!v35);
  return result;
}

llvm::Value **sub_1C584546C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  llvm::Value **v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  llvm::Value **v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Type *v37;
  llvm::Type *v38;
  uint64_t v39;
  unsigned int PrimitiveSizeInBits;
  unsigned __int8 *v41;
  llvm::Value ***v42;
  int *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  llvm::ConstantInt *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  llvm::Value **v86;
  uint64_t v87;
  llvm::Value ****v88;
  llvm::Value *v89;
  llvm::Value *v90;
  char v91;
  char v92;
  int v93;
  _QWORD *v94;
  const llvm::APInt *v95;
  llvm::Value **v96;
  unsigned __int8 *v97;
  llvm::Value *v98;
  _QWORD *v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  unsigned int v103;
  int *v104;

  v7 = a1;
  v8 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v8 <= 0x14)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v101 = 257;
    if ((_DWORD)a3)
    {
      v10 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a1, a2, 0);
      return (llvm::Value **)sub_1C506E874(v9, v7, (uint64_t)v10, (uint64_t)&v99, 0, 0);
    }
    else
    {
      v24 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a1, a2, 0);
      return (llvm::Value **)sub_1C506ED1C(v9, v7, (uint64_t)v24, (uint64_t)&v99, 0);
    }
  }
  v12 = *(_QWORD *)(a4 + 32);
  v13 = *(_DWORD *)(v12 + 8);
  v99 = (_QWORD *)a1;
  LODWORD(v100) = v13;
  v14 = *(_DWORD *)(v12 + 2080);
  if (v14)
  {
    v15 = *(_QWORD *)(v12 + 2064);
    v16 = v14 - 1;
    v17 = v16 & ((a1 >> 4) ^ (a1 >> 9));
    v18 = (_QWORD *)(v15 + 16 * v17);
    v19 = *v18;
    if (*v18 == a1)
      goto LABEL_24;
    v20 = 0;
    v21 = 1;
    while (v19 != -4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v19 == -8192;
      if (v22)
        v20 = v18;
      v23 = v17 + v21++;
      v17 = v23 & v16;
      v18 = (_QWORD *)(v15 + 16 * v17);
      v19 = *v18;
      if (*v18 == a1)
        goto LABEL_24;
    }
    if (v20)
      v25 = v20;
    else
      v25 = v18;
  }
  else
  {
    v25 = 0;
  }
  v26 = sub_1C4D8D8F4((_DWORD *)(v12 + 2064), (uint64_t)&v99, (uint64_t *)&v99, v25);
  *v26 = v99;
  *((_DWORD *)v26 + 2) = v100;
  v27 = *(unsigned int *)(v12 + 8);
  if (v27 >= *(_DWORD *)(v12 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v12, v12 + 16, v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(v12 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v27) = v7;
  ++*(_DWORD *)(v12 + 8);
  v8 = *(unsigned __int8 *)(v7 + 16);
LABEL_24:
  if (v8 > 82)
  {
    if (v8 == 83)
    {
      v30 = *(_DWORD *)(v7 + 20);
      v31 = v30 & 0x7FFFFFF;
      if ((v30 & 0x7FFFFFF) != 0)
      {
        v32 = 0;
        v33 = 0;
        do
        {
          v34 = *(_DWORD *)(v7 + 20);
          if ((v34 & 0x40000000) != 0)
            v35 = *(_QWORD *)(v7 - 8);
          else
            v35 = v7 - 32 * (v34 & 0x7FFFFFF);
          v36 = sub_1C584546C(*(_QWORD *)(v35 + v32), a2, a3, a4);
          sub_1C6125834(v7, v33++, v36);
          v32 += 32;
        }
        while (v31 != v33);
      }
    }
    else
    {
      v66 = *(_DWORD *)(v7 + 20);
      if ((v66 & 0x40000000) != 0)
        v67 = *(_QWORD *)(v7 - 8);
      else
        v67 = v7 - 32 * (v66 & 0x7FFFFFF);
      v69 = sub_1C584546C(*(_QWORD *)(v67 + 32), a2, a3, a4);
      v70 = *(_DWORD *)(v7 + 20);
      if ((v70 & 0x40000000) != 0)
        v71 = *(_QWORD *)(v7 - 8);
      else
        v71 = v7 - 32 * (v70 & 0x7FFFFFF);
      v72 = (uint64_t *)(v71 + 32);
      if (*(_QWORD *)(v71 + 32))
      {
        **(_QWORD **)(v71 + 48) = *(_QWORD *)(v71 + 40);
        v73 = *(_QWORD *)(v71 + 40);
        if (v73)
          *(_QWORD *)(v73 + 16) = *(_QWORD *)(v71 + 48);
      }
      *v72 = v69;
      if (v69)
      {
        v76 = *(_QWORD *)(v69 + 8);
        v74 = (uint64_t **)(v69 + 8);
        v75 = v76;
        *(_QWORD *)(v71 + 40) = v76;
        if (v76)
          *(_QWORD *)(v75 + 16) = v71 + 40;
        *(_QWORD *)(v71 + 48) = v74;
        *v74 = v72;
      }
      v77 = *(_DWORD *)(v7 + 20);
      if ((v77 & 0x40000000) != 0)
        v78 = *(_QWORD *)(v7 - 8);
      else
        v78 = v7 - 32 * (v77 & 0x7FFFFFF);
      v79 = sub_1C584546C(*(_QWORD *)(v78 + 64), a2, a3, a4);
      v80 = *(_DWORD *)(v7 + 20);
      if ((v80 & 0x40000000) != 0)
        v81 = *(_QWORD *)(v7 - 8);
      else
        v81 = v7 - 32 * (v80 & 0x7FFFFFF);
      v61 = (uint64_t *)(v81 + 64);
      if (*(_QWORD *)(v81 + 64))
      {
        **(_QWORD **)(v81 + 80) = *(_QWORD *)(v81 + 72);
        v82 = *(_QWORD *)(v81 + 72);
        if (v82)
          *(_QWORD *)(v82 + 16) = *(_QWORD *)(v81 + 80);
      }
      *v61 = v79;
      if (v79)
      {
        v84 = *(_QWORD *)(v79 + 8);
        v63 = (uint64_t **)(v79 + 8);
        v83 = v84;
        *(_QWORD *)(v81 + 72) = v84;
        if (v84)
          *(_QWORD *)(v83 + 16) = v81 + 72;
        *(_QWORD *)(v81 + 80) = v63;
        goto LABEL_94;
      }
    }
  }
  else if ((v8 - 56) >= 3)
  {
    v37 = *(llvm::Type **)v7;
    v38 = *(llvm::Type **)v7;
    if ((*(_DWORD *)(*(_QWORD *)v7 + 8) & 0xFE) == 0x12)
      v38 = (llvm::Type *)**((_QWORD **)v37 + 2);
    v39 = *(_QWORD *)(a4 + 24);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v38);
    v104 = 0;
    v42 = (llvm::Value ***)(v7 - 32);
    v41 = *(unsigned __int8 **)(v7 - 32);
    v99 = &v104;
    v100 = 0;
    sub_1C4D89F84((uint64_t)&v99, v41);
    v43 = v104;
    if (v104[2] >= 0x41)
      v43 = *(int **)v104;
    v44 = *v43;
    if ((((v8 == 53) ^ a3) & 1) != 0)
    {
      v45 = (v44 - a2);
      if (v44 == (_DWORD)a2)
      {
        v103 = PrimitiveSizeInBits;
        if (v8 == 53)
        {
          v46 = PrimitiveSizeInBits - a2;
          if (PrimitiveSizeInBits > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v102, 0, 0);
          else
            v102 = 0;
          v47 = 0;
          v48 = v46;
        }
        else
        {
          v93 = a2 - PrimitiveSizeInBits;
          if (PrimitiveSizeInBits > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v102, 0, 0);
            PrimitiveSizeInBits = v103;
          }
          else
          {
            v102 = 0;
          }
          v47 = v93 + PrimitiveSizeInBits;
          v48 = PrimitiveSizeInBits;
        }
        sub_1C4912E54(&v102, v47, v48);
        v94 = *(_QWORD **)(v7 - 64);
        v96 = llvm::ConstantInt::get((llvm::ConstantInt **)v37, (llvm::Type *)&v102, v95);
        v101 = 257;
        v97 = (unsigned __int8 *)sub_1C4D89BCC(v39, v94, (uint64_t)v96, (uint64_t)&v99);
        v98 = (llvm::Value *)v97;
        if (v97 && v97[16] >= 0x1Cu)
        {
          llvm::Instruction::moveBefore((llvm::Instruction *)v97, (llvm::Instruction *)v7);
          llvm::Value::takeName(v98, (llvm::Value *)v7);
        }
        if (v103 >= 0x41 && v102)
          MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
        return (llvm::Value **)v98;
      }
      v68 = v37;
    }
    else
    {
      v45 = (v44 + a2);
      v68 = v37;
      if (v45 >= PrimitiveSizeInBits)
        return llvm::Constant::getNullValue(v37, (llvm::Type *)v45);
    }
    v86 = llvm::ConstantInt::get(v68, v45, 0);
    if (*v42)
    {
      **(_QWORD **)(v7 - 16) = *(_QWORD *)(v7 - 24);
      v87 = *(_QWORD *)(v7 - 24);
      if (v87)
        *(_QWORD *)(v87 + 16) = *(_QWORD *)(v7 - 16);
    }
    *v42 = v86;
    if (v86)
    {
      v90 = v86[1];
      v88 = (llvm::Value ****)(v86 + 1);
      v89 = v90;
      *(_QWORD *)(v7 - 24) = v90;
      if (v90)
        *((_QWORD *)v89 + 2) = v7 - 24;
      *(_QWORD *)(v7 - 16) = v88;
      *v88 = v42;
    }
    v91 = *(_BYTE *)(v7 + 17);
    if (v8 == 53)
      v92 = v91 & 0xF9;
    else
      v92 = v91 & 0xFD;
    *(_BYTE *)(v7 + 17) = v92;
  }
  else
  {
    v28 = *(_DWORD *)(v7 + 20);
    if ((v28 & 0x40000000) != 0)
      v29 = *(_QWORD **)(v7 - 8);
    else
      v29 = (_QWORD *)(v7 - 32 * (v28 & 0x7FFFFFF));
    v49 = sub_1C584546C(*v29, a2, a3, a4);
    v50 = *(_DWORD *)(v7 + 20);
    if ((v50 & 0x40000000) != 0)
      v51 = *(_QWORD *)(v7 - 8);
    else
      v51 = v7 - 32 * (v50 & 0x7FFFFFF);
    if (*(_QWORD *)v51)
    {
      **(_QWORD **)(v51 + 16) = *(_QWORD *)(v51 + 8);
      v52 = *(_QWORD *)(v51 + 8);
      if (v52)
        *(_QWORD *)(v52 + 16) = *(_QWORD *)(v51 + 16);
    }
    *(_QWORD *)v51 = v49;
    if (v49)
    {
      v55 = *(_QWORD *)(v49 + 8);
      v53 = (uint64_t *)(v49 + 8);
      v54 = v55;
      *(_QWORD *)(v51 + 8) = v55;
      if (v55)
        *(_QWORD *)(v54 + 16) = v51 + 8;
      *(_QWORD *)(v51 + 16) = v53;
      *v53 = v51;
    }
    v56 = *(_DWORD *)(v7 + 20);
    if ((v56 & 0x40000000) != 0)
      v57 = *(_QWORD *)(v7 - 8);
    else
      v57 = v7 - 32 * (v56 & 0x7FFFFFF);
    v58 = sub_1C584546C(*(_QWORD *)(v57 + 32), a2, a3, a4);
    v59 = *(_DWORD *)(v7 + 20);
    if ((v59 & 0x40000000) != 0)
      v60 = *(_QWORD *)(v7 - 8);
    else
      v60 = v7 - 32 * (v59 & 0x7FFFFFF);
    v61 = (uint64_t *)(v60 + 32);
    if (*(_QWORD *)(v60 + 32))
    {
      **(_QWORD **)(v60 + 48) = *(_QWORD *)(v60 + 40);
      v62 = *(_QWORD *)(v60 + 40);
      if (v62)
        *(_QWORD *)(v62 + 16) = *(_QWORD *)(v60 + 48);
    }
    *v61 = v58;
    if (v58)
    {
      v65 = *(_QWORD *)(v58 + 8);
      v63 = (uint64_t **)(v58 + 8);
      v64 = v65;
      *(_QWORD *)(v60 + 40) = v65;
      if (v65)
        *(_QWORD *)(v64 + 16) = v60 + 40;
      *(_QWORD *)(v60 + 48) = v63;
LABEL_94:
      *v63 = v61;
    }
  }
  return (llvm::Value **)v7;
}

uint64_t sub_1C5845AD4(unsigned __int8 a1, uint64_t a2)
{
  int v2;
  char v5;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if ((v2 - 56) < 2)
    return 1;
  if (v2 != 58)
    return v2 == 41 && a1 == 53;
  if (a1 - 53 > 1)
    return 1;
  if ((sub_1C4D9ED34((uint64_t)&v5, *(llvm::Constant **)(a2 - 32)) & 1) != 0)
    return 0;
  else
    return sub_1C4D9ED34((uint64_t)&v5, *(llvm::Constant **)(a2 - 64)) ^ 1;
}

llvm::UndefValue **sub_1C5845B70(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  llvm::Value **v6;
  uint64_t ***v8;
  uint64_t *v10;
  int v11;
  llvm::Value **v12;
  llvm::Value *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  int v18;
  uint64_t v19;
  llvm::Constant *v20;
  uint64_t v21;
  int v22;
  llvm::Constant *v23;
  llvm::Constant *v24;
  _QWORD *v25;
  llvm::Type *v26;
  int v27;
  llvm::Value *v28;
  int v29;
  uint64_t v30;
  char v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  char v38;
  llvm *v39;
  char v40;
  unsigned __int8 *v41;
  llvm::Constant *v42;
  llvm::ConstantInt *v43;
  llvm::Type *v44;
  unsigned int v45;
  llvm::Value **v46;
  llvm::Constant *v47;
  llvm::Constant *v48;
  llvm::UndefValue *v49;
  llvm::Type *v50;
  llvm::ConstantExpr *v51;
  llvm::Constant **v52;
  llvm::Constant *v53;
  uint64_t LShr;
  llvm::Value *v55;
  int v56;
  uint64_t v57;
  int v58;
  llvm *v59;
  uint64_t v60;
  int v61;
  llvm *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  int v65;
  llvm *v66;
  uint64_t v67;
  int v68;
  llvm *v69;
  llvm *v70;
  char v71;
  llvm::Value **v72;
  llvm::Constant *v73;
  llvm::Type *v74;
  unsigned int PrimitiveSizeInBits;
  llvm::ConstantInt *v76;
  llvm::Value **v77;
  llvm::Constant *v78;
  llvm::ConstantInt **v79;
  llvm::Value **v80;
  llvm::ValueHandleBase *Sub;
  llvm::UndefValue *v82;
  llvm::Type *v83;
  llvm::ConstantExpr *AllOnesValue;
  llvm::Constant *v85;
  llvm::UndefValue *v86;
  char v87;
  unsigned __int8 *v88;
  char v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  uint64_t *v103;
  _QWORD *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  unsigned __int8 **v109;
  unsigned __int8 **v110;
  llvm::Constant *v111;
  uint64_t v112;
  llvm::Constant *v113;
  llvm::Type *v114;
  unsigned int v115;
  llvm::Constant *v116;
  uint64_t v117;
  _QWORD **v118;
  llvm *v119;
  llvm::Type *v120;
  unsigned int v121;
  unsigned int v122;
  _BOOL4 IsZero;
  char *v124;
  uint64_t v125;
  _QWORD *v126;
  llvm::Value **v127;
  uint64_t v128;
  int v129;
  _QWORD *v130;
  const llvm::APInt *v131;
  llvm::Value **v132;
  char *v133;
  llvm::Value **v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  llvm::Value *v138;
  _QWORD *v139;
  llvm::Value *v140;
  unsigned int v141;
  unsigned int v142;
  llvm *v143;
  unsigned int v144;
  llvm *v145;
  llvm *v146;
  llvm::Value **v147;
  _QWORD *v148;
  char *v149;
  char *v150;
  llvm::Value **v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  llvm::Value *v155;
  _QWORD *v156;
  llvm::Value *v157;
  llvm::Value **v158;
  char v159;
  _QWORD *v160;
  char *v161;
  char *v162;
  llvm::Value **v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  llvm::Value *v167;
  _QWORD *v168;
  llvm::Value *v169;
  _QWORD **v170;
  llvm *v171;
  unsigned int v172;
  llvm *v173;
  llvm *v174;
  llvm::Value **v175;
  _QWORD *v176;
  char *v177;
  char *v178;
  llvm::Value **v179;
  _QWORD *v180;
  uint64_t *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  llvm::Value *v185;
  _QWORD *v186;
  llvm::Value *v187;
  uint64_t *v188;
  int v189;
  const llvm::APInt *v190;
  uint64_t v191;
  llvm::Value **v192;
  char v193;
  _QWORD *v194;
  char *v195;
  char *v196;
  llvm::Value **v197;
  _QWORD *v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  llvm::Value *v202;
  _QWORD *v203;
  llvm::Value *v204;
  uint64_t *v205;
  int v206;
  const llvm::APInt *v207;
  uint64_t v208;
  _QWORD **v209;
  unsigned int v210;
  int v211;
  int v212;
  llvm::Constant *v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  _QWORD ***v217;
  llvm *v218;
  unsigned int v219;
  llvm *v220;
  _QWORD *v221;
  uint64_t v222;
  char *v223;
  _QWORD *v224;
  char v225;
  _QWORD **v226;
  _QWORD **v227;
  char v228;
  unsigned int v229;
  _BOOL4 v230;
  char v231;
  llvm **v232;
  llvm **v233;
  char *v234;
  _QWORD **v235;
  llvm::Type *v236;
  llvm::ValueHandleBase *v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  char *v241;
  _QWORD *v242;
  char v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD **v250;
  int v251;
  llvm::Value **v252;
  uint64_t *Shl;
  llvm::Value *v254;
  llvm::Type *v255;
  llvm::Value **NullValue;
  const llvm::APInt *v257;
  unsigned int v258;
  _QWORD **v259;
  int v260;
  uint64_t v261;
  int v262;
  int v263;
  unsigned __int8 *v264;
  llvm::Value *v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  llvm::Constant **v277;
  llvm::Constant *v278;
  int v279;
  int v280;
  int v281;
  _QWORD **v282;
  llvm::Value **v283;
  _QWORD *v284;
  llvm::Value **v285;
  char *v286;
  llvm::Value **v287;
  char v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  llvm::Value *v292;
  _QWORD *v293;
  llvm::Value *v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  llvm::Constant **v304;
  llvm::Constant *v305;
  int v306;
  int v307;
  const void **v308;
  uint64_t ***v309;
  unint64_t v310;
  int v311;
  unsigned __int8 **v312;
  unsigned __int8 *v313;
  llvm::Value **v314;
  unsigned int v315;
  const llvm::APInt *v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  unsigned int v326;
  int v327;
  _QWORD **v328;
  _DWORD *v329;
  _DWORD *v330;
  int v331;
  char *v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned int v340;
  int v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  llvm::Constant *v345;
  char *v346;
  llvm **v347;
  llvm **v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  int v358;
  int v359;
  _QWORD *v360;
  char *v361;
  llvm **v362;
  llvm **v363;
  llvm::Constant *v364;
  unsigned int v365;
  unint64_t v366;
  int v367;
  int v368;
  int v369;
  const llvm::APInt *v370;
  llvm::Constant **v371;
  llvm::Constant *v372;
  uint64_t v373;
  unsigned int v374;
  int v375;
  _QWORD *v376;
  int v377;
  uint64_t v378;
  llvm *v379;
  unsigned int v380;
  unsigned int v381;
  llvm::Value **v382;
  uint64_t v383;
  uint64_t v384;
  unsigned __int8 *v385;
  uint64_t *v386;
  int v387;
  unsigned __int8 **v388;
  char *v389;
  unsigned __int8 *v390;
  uint64_t v391;
  llvm::Constant *v392;
  char *v393;
  llvm **v394;
  llvm **v395;
  uint64_t v396;
  unsigned __int8 *v397;
  const void **v398;
  uint64_t ***v399;
  unint64_t v400;
  unsigned int v401;
  const llvm::APInt *v402;
  llvm::Value **v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unsigned __int8 *v409;
  int v410;
  int v411;
  _QWORD *v412;
  char *v413;
  llvm **v414;
  llvm **v415;
  char v416;
  BOOL v417;
  uint64_t *v418;
  uint64_t v419;
  llvm::Value *v420;
  unsigned int v421;
  __int16 v422;
  _OWORD v423[2];
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  llvm **v427;
  char *v428;
  llvm **v429;
  llvm **v430;
  unsigned __int8 **v431;
  unsigned __int8 **v432;
  unsigned __int8 *v433;
  llvm *v434;
  _QWORD *v435;
  llvm::Constant *v436[2];

  v4 = *(_OWORD *)(a1 + 120);
  v5 = *(_OWORD *)(a1 + 104);
  v423[0] = *(_OWORD *)(a1 + 88);
  v423[1] = v5;
  v425 = *((_QWORD *)&v4 + 1);
  v424 = a2;
  v6 = sub_1C4E63B54(*(llvm::Constant **)(a2 - 64), *(llvm::Constant **)(a2 - 32), (*(unsigned __int8 *)(a2 + 17) >> 2) & 1, (*(unsigned __int8 *)(a2 + 17) >> 1) & 1, (uint64_t)v423, (llvm::DSOLocalEquivalent **)3);
  if (v6)
    return sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v6);
  v8 = (uint64_t ***)sub_1C57826B8(a1, (unsigned __int8 *)a2);
  if (!v8)
  {
    v8 = (uint64_t ***)sub_1C58443C8(a1, (unsigned __int8 *)a2);
    if (!v8)
    {
      v10 = *(uint64_t **)(a1 + 24);
      v420 = 0;
      v436[0] = 0;
      v426 = (unint64_t)&v420;
      v427 = v436;
      v428 = (char *)v436;
      if (*(unsigned __int8 *)(a2 + 16) - 53 <= 2)
      {
        v11 = *(_DWORD *)(a2 + 20);
        v12 = (v11 & 0x40000000) != 0 ? *(llvm::Value ***)(a2 - 8) : (llvm::Value **)(a2 - 32 * (v11 & 0x7FFFFFF));
        v13 = *v12;
        if (v13)
        {
          v420 = v13;
          v14 = *(_DWORD *)(a2 + 20);
          v15 = (v14 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v14 & 0x7FFFFFF);
          v16 = *(_QWORD *)(v15 + 32);
          if ((sub_1C4B0378C(&v427, v16) & 1) == 0)
          {
            if (v16)
              *(_QWORD *)v428 = v16;
          }
        }
      }
      v435 = 0;
      v17 = v420;
      v426 = (unint64_t)&v420;
      v427 = (llvm **)&v435;
      v18 = sub_1C4B03864((_QWORD **)&v426, (uint64_t)v420);
      if (v17)
      {
        if (v18)
        {
          *v427 = v17;
          v19 = v435[1];
          if (!v19 || *(_QWORD *)(v19 + 8))
            goto LABEL_167;
        }
      }
      v20 = *(llvm::Constant **)a2;
      v21 = *(_QWORD *)v420;
      v22 = *(_DWORD *)(*(_QWORD *)v420 + 8) & 0xFE;
      if (*(_QWORD *)v420 && v22 == 18)
      {
        sub_1C53D3628(*(_QWORD *)v420);
        v24 = v23;
        goto LABEL_34;
      }
      v25 = *(_QWORD **)v21;
      v26 = *(llvm::Type **)v420;
      if (v22 == 18)
        v26 = **(llvm::Type ***)(v21 + 16);
      v27 = 2 * llvm::Type::getPrimitiveSizeInBits(v26);
      LODWORD(v426) = v27;
      if (v27 <= 63)
      {
        switch(v27)
        {
          case 32:
            v24 = (llvm::Constant *)(*v25 + 1960);
            goto LABEL_34;
          case 16:
            v24 = (llvm::Constant *)(*v25 + 1936);
            goto LABEL_34;
          case 8:
            v24 = (llvm::Constant *)(*v25 + 1912);
            goto LABEL_34;
        }
      }
      else
      {
        if (v27 == 64)
        {
          v24 = (llvm::Constant *)(*v25 + 1984);
          goto LABEL_34;
        }
        if (v27 == 128)
        {
          v24 = (llvm::Constant *)(*v25 + 2008);
          goto LABEL_34;
        }
      }
      v329 = sub_1C5270984(*v25 + 2168, &v426);
      v24 = (llvm::Constant *)*((_QWORD *)v329 + 1);
      if (!v24)
      {
        v330 = v329;
        v24 = (llvm::Constant *)sub_1C484358C(*v25 + 2040, 24, 3);
        v331 = v426;
        *(_QWORD *)v24 = v25;
        *((_QWORD *)v24 + 2) = 0;
        *((_QWORD *)v24 + 1) = (v331 << 8) | 0xDu;
        *((_QWORD *)v330 + 1) = v24;
      }
LABEL_34:
      v433 = 0;
      v434 = 0;
      v28 = v420;
      v427 = &v434;
      v430 = &v434;
      v432 = &v433;
      v29 = *((unsigned __int8 *)v420 + 16);
      if (v29 == 5)
      {
        if (*((_WORD *)v420 + 9) != 28)
          goto LABEL_65;
        v34 = *((_QWORD *)v420 - 4 * (*((_DWORD *)v420 + 5) & 0x7FFFFFF));
        if (sub_1C57BF5E8((uint64_t)&v426, 13, v34) || sub_1C584BCA0((uint64_t)&v429, v34, v35))
        {
          v32 = (unsigned __int8 *)((_QWORD *)v28 - 4 * (*((_DWORD *)v28 + 5) & 0x7FFFFFF))[4];
          if (v32)
            goto LABEL_54;
          v36 = 0;
        }
        else
        {
          v36 = ((_QWORD *)v28 - 4 * (*((_DWORD *)v28 + 5) & 0x7FFFFFF))[4];
        }
        if (!sub_1C57BF5E8((uint64_t)&v426, 13, v36) && !sub_1C584BCA0((uint64_t)&v429, v36, v38)
          || (v32 = (unsigned __int8 *)*((_QWORD *)v28 - 4 * (*((_DWORD *)v28 + 5) & 0x7FFFFFF))) == 0)
        {
LABEL_65:
          v55 = v420;
          v427 = &v434;
          v429 = &v434;
          v430 = &v434;
          v431 = &v433;
          v56 = *((unsigned __int8 *)v420 + 16);
          if (v56 != 5)
          {
            if (v56 != 56)
              goto LABEL_138;
            v57 = *((_QWORD *)v420 - 8);
            v58 = *(unsigned __int8 *)(v57 + 16);
            if (v58 == 5)
            {
              if (*(_WORD *)(v57 + 18) != 26
                || !sub_1C4D9EED4((uint64_t)&v426, *(llvm::Constant **)(v57 - 32 * (*(_DWORD *)(v57 + 20) & 0x7FFFFFF)))|| (v59 = *(llvm **)(v57 - 32 * (*(_DWORD *)(v57 + 20) & 0x7FFFFFF) + 32)) == 0)
              {
LABEL_82:
                if (!sub_1C581925C((uint64_t)&v428, 26, v57))
                {
                  v64 = *((_QWORD *)v55 - 4);
                  goto LABEL_86;
                }
LABEL_83:
                v63 = (unsigned __int8 *)*((_QWORD *)v55 - 4);
                if (v63)
                  goto LABEL_115;
                v64 = 0;
LABEL_86:
                v65 = *(unsigned __int8 *)(v64 + 16);
                if (v65 == 5)
                {
                  if (*(_WORD *)(v64 + 18) != 26
                    || !sub_1C4D9EED4((uint64_t)&v426, *(llvm::Constant **)(v64 - 32 * (*(_DWORD *)(v64 + 20) & 0x7FFFFFF)))|| (v66 = *(llvm **)(v64 - 32 * (*(_DWORD *)(v64 + 20) & 0x7FFFFFF) + 32)) == 0)
                  {
LABEL_95:
                    if (!sub_1C581925C((uint64_t)&v428, 26, v64))
                      goto LABEL_138;
LABEL_96:
                    v63 = (unsigned __int8 *)*((_QWORD *)v55 - 8);
                    if (!v63)
                    {
LABEL_138:
                      v101 = *((unsigned __int8 *)v420 + 16);
                      if (v420 && v101 >= 0x1C)
                      {
                        if ((v101 & 0xFE) != 0x36)
                          goto LABEL_167;
                        v102 = *((_DWORD *)v420 + 5);
                        if ((v102 & 0x40000000) != 0)
                          v103 = (uint64_t *)*((_QWORD *)v420 - 1);
                        else
                          v103 = (uint64_t *)((char *)v420 - 32 * (v102 & 0x7FFFFFF));
                        v107 = *v103;
                        v108 = *(unsigned __int8 *)(v107 + 16);
                        if (v108 == 5)
                        {
                          if (*(_WORD *)(v107 + 18) != 25)
                            goto LABEL_167;
                          v109 = (unsigned __int8 **)(v107 - 32 * (*(_DWORD *)(v107 + 20) & 0x7FFFFFF));
                          if (!*v109)
                            goto LABEL_167;
                          v433 = *v109;
                          v70 = (llvm *)v109[4];
                          if (!v70)
                            goto LABEL_167;
                        }
                        else
                        {
                          if (v108 != 53)
                            goto LABEL_167;
                          if (!*(_QWORD *)(v107 - 64))
                            goto LABEL_167;
                          v433 = *(unsigned __int8 **)(v107 - 64);
                          v70 = *(llvm **)(v107 - 32);
                          if (!v70)
                            goto LABEL_167;
                        }
                        v434 = v70;
                        if ((v102 & 0x40000000) != 0)
                          v104 = (_QWORD *)*((_QWORD *)v420 - 1);
                        else
                          v104 = (_QWORD *)((char *)v420 - 32 * (v102 & 0x7FFFFFF));
                      }
                      else
                      {
                        if (v101 != 5 || (*((_WORD *)v420 + 9) & 0xFFFE) != 0x1A)
                          goto LABEL_167;
                        v104 = (_QWORD *)((char *)v420 - 32 * (*((_DWORD *)v420 + 5) & 0x7FFFFFF));
                        v105 = *v104;
                        v106 = *(unsigned __int8 *)(*v104 + 16);
                        if (v106 == 5)
                        {
                          if (*(_WORD *)(v105 + 18) != 25)
                            goto LABEL_167;
                          v110 = (unsigned __int8 **)(v105 - 32 * (*(_DWORD *)(v105 + 20) & 0x7FFFFFF));
                          if (!*v110)
                            goto LABEL_167;
                          v433 = *v110;
                          v70 = (llvm *)v110[4];
                          if (!v70)
                            goto LABEL_167;
                        }
                        else
                        {
                          if (v106 != 53)
                            goto LABEL_167;
                          if (!*(_QWORD *)(v105 - 64))
                            goto LABEL_167;
                          v433 = *(unsigned __int8 **)(v105 - 64);
                          v70 = *(llvm **)(v105 - 32);
                          if (!v70)
                            goto LABEL_167;
                        }
                        v434 = v70;
                      }
                      if (v70 != (llvm *)v104[4])
                        goto LABEL_167;
                      goto LABEL_116;
                    }
LABEL_115:
                    *v431 = v63;
                    v70 = v434;
LABEL_116:
                    v426 = (unint64_t)&v434;
                    v427 = &v434;
                    v71 = sub_1C4B0378C((_QWORD **)&v426, (uint64_t)v70);
                    if (v70 && (v71 & 1) == 0)
                      *v427 = v70;
                    if (!canTryToConstantAddTwoShiftAmounts((llvm::Value *)a2, v436[0], (llvm::Type **)v420, v434))
                      goto LABEL_167;
                    v72 = sub_1C4E62F88((uint64_t)v436[0], (uint64_t)v434, 0, 0, (uint64_t)v423, (llvm::DSOLocalEquivalent **)3);
                    if (!v72)
                      goto LABEL_167;
                    v73 = (llvm::Constant *)v72;
                    if (*((unsigned __int8 *)v72 + 16) > 0x14u)
                      goto LABEL_167;
                    if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
                      v74 = **(llvm::Type ***)(v21 + 16);
                    else
                      v74 = (llvm::Type *)v21;
                    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v74);
                    v76 = *(llvm::ConstantInt **)v73;
                    if ((*(_DWORD *)(*(_QWORD *)v73 + 8) & 0xFE) == 0x12)
                      v76 = (llvm::ConstantInt *)**((_QWORD **)v76 + 2);
                    v77 = llvm::ConstantInt::get(v76, -PrimitiveSizeInBits, 0);
                    v79 = (llvm::ConstantInt **)llvm::Constant::replaceUndefsWith(v73, (llvm::Constant *)v77, v78);
                    v80 = llvm::ConstantInt::get(*v79, PrimitiveSizeInBits, 0);
                    Sub = llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v80, (llvm::Constant *)v79, 0, 0);
                    v82 = sub_1C537D3B8((llvm *)0x27, (uint64_t)Sub, v24, 0);
                    AllOnesValue = llvm::Constant::getAllOnesValue(v24, v83);
                    LShr = llvm::ConstantExpr::getLShr(AllOnesValue, v82, 0, v85);
LABEL_127:
                    v86 = sub_1C537D3B8((llvm *)0x26, LShr, v20, 0);
                    v87 = sub_1C4D9EED4((uint64_t)&v426, v86);
                    if ((v87 & 1) != 0
                      || (v324 = *((_QWORD *)v420 + 1)) != 0
                      && !*(_QWORD *)(v324 + 8)
                      && (v325 = *((unsigned __int8 *)v420 + 16), v325 != 55)
                      && (v325 != 5 || *((_WORD *)v420 + 9) != 27))
                    {
                      v88 = v433;
                      if ((llvm::Constant *)v21 != v20)
                      {
                        LOWORD(v430) = 257;
                        v88 = sub_1C4773E38(v10, 38, v433, (uint64_t)v20, (uint64_t)&v426);
                        v433 = v88;
                      }
                      v89 = *(_BYTE *)(a2 + 16);
                      v90 = *(_QWORD *)(a2 - 32);
                      LOWORD(v430) = 257;
                      v91 = (char *)operator new(0x80uLL);
                      *((_QWORD *)v91 + 6) = 0;
                      *((_QWORD *)v91 + 5) = 0;
                      v92 = v91 + 40;
                      *((_QWORD *)v91 + 8) = *(_QWORD *)v88;
                      v93 = v91 + 64;
                      *((_QWORD *)v91 + 3) = v91 + 64;
                      *((_QWORD *)v91 + 7) = v91 + 64;
                      *((_QWORD *)v91 + 9) = 0;
                      v94 = (uint64_t *)(v91 + 72);
                      v91[80] = v89;
                      v91[81] = 0;
                      *((_WORD *)v91 + 41) = 0;
                      *((_DWORD *)v91 + 21) = 2;
                      *(_OWORD *)(v91 + 88) = 0u;
                      *(_OWORD *)(v91 + 104) = 0u;
                      *((_DWORD *)v91 + 30) = 0;
                      *(_QWORD *)v91 = v88;
                      v97 = *((_QWORD *)v88 + 1);
                      v96 = v88 + 8;
                      v95 = v97;
                      *((_QWORD *)v91 + 1) = v97;
                      if (v97)
                        *(_QWORD *)(v95 + 16) = v91 + 8;
                      *((_QWORD *)v91 + 2) = v96;
                      *v96 = v91;
                      *((_QWORD *)v91 + 4) = v90;
                      if (v90)
                      {
                        v100 = *(_QWORD *)(v90 + 8);
                        v99 = (_QWORD *)(v90 + 8);
                        v98 = v100;
                        *v92 = v100;
                        if (v100)
                          *(_QWORD *)(v98 + 16) = v92;
                        *((_QWORD *)v91 + 6) = v99;
                        *v99 = v91 + 32;
                      }
                      llvm::Value::setName((uint64_t ***)v91 + 8, (uint64_t)&v426);
                      if ((v87 & 1) != 0)
                        return (llvm::UndefValue **)v93;
                      LOWORD(v430) = 257;
                      sub_1C4773754(v10, (uint64_t)v93, (uint64_t)&v426);
                      LOWORD(v430) = 257;
                      v332 = (char *)operator new(0x80uLL);
                      *((_QWORD *)v332 + 8) = *v93;
                      v8 = (uint64_t ***)(v332 + 64);
                      *((_QWORD *)v332 + 3) = v332 + 64;
                      *((_QWORD *)v332 + 5) = 0;
                      v333 = v332 + 40;
                      *((_QWORD *)v332 + 6) = 0;
                      *((_QWORD *)v332 + 7) = v332 + 64;
                      *((_QWORD *)v332 + 9) = 0;
                      *((_QWORD *)v332 + 10) = 0x200000038;
                      *(_OWORD *)(v332 + 88) = 0u;
                      *(_OWORD *)(v332 + 104) = 0u;
                      *((_DWORD *)v332 + 30) = 0;
                      *(_QWORD *)v332 = v93;
                      v334 = *v94;
                      *((_QWORD *)v332 + 1) = *v94;
                      if (v334)
                        *(_QWORD *)(v334 + 16) = v332 + 8;
                      *((_QWORD *)v332 + 2) = v94;
                      *v94 = (uint64_t)v332;
                      *((_QWORD *)v332 + 4) = v86;
                      if (v86)
                      {
                        v337 = *((_QWORD *)v86 + 1);
                        v336 = (_QWORD *)((char *)v86 + 8);
                        v335 = v337;
                        *v333 = v337;
                        if (v337)
                          *(_QWORD *)(v335 + 16) = v333;
                        *((_QWORD *)v332 + 6) = v336;
                        *v336 = v332 + 32;
                      }
LABEL_432:
                      llvm::Value::setName(v8, (uint64_t)&v426);
                      return (llvm::UndefValue **)v8;
                    }
LABEL_167:
                    v111 = *(llvm::Constant **)(a2 - 64);
                    v112 = *(_QWORD *)(a2 - 32);
                    v113 = *(llvm::Constant **)a2;
                    v114 = *(llvm::Type **)a2;
                    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
                      v114 = (llvm::Type *)**((_QWORD **)v113 + 2);
                    v115 = llvm::Type::getPrimitiveSizeInBits(v114);
                    v436[0] = 0;
                    v426 = (unint64_t)v436;
                    v427 = 0;
                    if ((sub_1C4D89F84((uint64_t)&v426, (unsigned __int8 *)v112) & 1) == 0)
                    {
LABEL_307:
                      v435 = 0;
                      v426 = (unint64_t)&v435;
                      v427 = (llvm **)v112;
                      v235 = (_QWORD **)*((_QWORD *)v111 + 1);
                      if (v235 && !v235[1] && sub_1C4E73430((uint64_t)&v426, (uint64_t)v111))
                      {
                        v237 = llvm::Constant::getAllOnesValue(v113, v236);
                        v238 = *(_QWORD *)(a1 + 24);
                        LOWORD(v430) = 257;
                        v239 = (_QWORD *)sub_1C506E874(v238, (uint64_t)v237, v112, (uint64_t)&v426, 0, 0);
                        v240 = v435;
                        LOWORD(v430) = 257;
                        v241 = (char *)operator new(0x80uLL);
                        *((_QWORD *)v241 + 5) = 0;
                        v242 = v241 + 40;
                        *((_QWORD *)v241 + 6) = 0;
                        *((_QWORD *)v241 + 8) = *v239;
                        v8 = (uint64_t ***)(v241 + 64);
                        *((_QWORD *)v241 + 3) = v241 + 64;
                        *((_QWORD *)v241 + 7) = v241 + 64;
                        *((_QWORD *)v241 + 9) = 0;
                        v243 = 56;
LABEL_311:
                        v241[80] = v243;
LABEL_312:
                        v241[81] = 0;
                        *((_WORD *)v241 + 41) = 0;
                        *((_DWORD *)v241 + 21) = 2;
                        *(_OWORD *)(v241 + 88) = 0u;
                        *(_OWORD *)(v241 + 104) = 0u;
                        *((_DWORD *)v241 + 30) = 0;
                        *(_QWORD *)v241 = v239;
                        v246 = v239[1];
                        v245 = v239 + 1;
                        v244 = v246;
                        *((_QWORD *)v241 + 1) = v246;
                        if (v246)
                          *(_QWORD *)(v244 + 16) = v241 + 8;
                        *((_QWORD *)v241 + 2) = v245;
                        *v245 = v241;
                        *((_QWORD *)v241 + 4) = v240;
                        if (v240)
                        {
                          v249 = v240[1];
                          v248 = v240 + 1;
                          v247 = v249;
                          *v242 = v249;
                          if (v249)
                            *(_QWORD *)(v247 + 16) = v242;
                          *((_QWORD *)v241 + 6) = v248;
                          *v248 = v241 + 32;
                        }
                        goto LABEL_432;
                      }
                      if (!v112 || *(unsigned __int8 *)(v112 + 16) > 0x14u)
                      {
LABEL_327:
                        if ((sub_1C4D89CC8((uint64_t)&v420, v111) & 1) == 0)
                          return 0;
                        v258 = v115 - 1;
                        LODWORD(v427) = 64;
                        v426 = v115 - 1;
                        v259 = &v435;
                        v428 = (char *)&v435;
                        v260 = *(unsigned __int8 *)(v112 + 16);
                        if (v260 == 43)
                        {
                          if (sub_1C4D8A7F0((llvm::APInt *)&v426, *(unsigned __int8 **)(v112 - 64))
                            && (v261 = *(_QWORD *)(v112 - 32)) != 0)
                          {
                            *(_QWORD *)v428 = v261;
                            v262 = 1;
                          }
                          else
                          {
                            v262 = 0;
                          }
                        }
                        else
                        {
                          if (v260 == 5)
                          {
                            if (*(_WORD *)(v112 + 18) == 15
                              && sub_1C4D8A86C((llvm::APInt *)&v426, *(llvm::Constant **)(v112 - 32 * (*(_DWORD *)(v112 + 20) & 0x7FFFFFF))))
                            {
                              v259 = *(_QWORD ***)(v112 - 32 * (*(_DWORD *)(v112 + 20) & 0x7FFFFFF) + 32);
                              if (v259)
                              {
                                *(_QWORD *)v428 = v259;
                                LOBYTE(v259) = 1;
                              }
                            }
                            else
                            {
                              LOBYTE(v259) = 0;
                            }
                          }
                          v262 = (v260 == 5) & v259;
                        }
                        if (v427 >= 0x41 && v426)
                          MEMORY[0x1CAA32F9C](v426, 0x1000C8000313F17);
                        if (!v262)
                          return 0;
                        v421 = v115;
                        if (v115 > 0x40)
                        {
                          v283 = &v420;
                          llvm::APInt::initSlowCase((llvm::APInt *)&v420, 0, 0);
                          if (v421 >= 0x41)
                            v283 = (llvm::Value **)((char *)v420 + 8 * (v258 >> 6));
                        }
                        else
                        {
                          v420 = 0;
                          v283 = &v420;
                        }
                        *v283 = (llvm::Value *)((unint64_t)*v283 | (1 << v258));
                        v284 = llvm::ConstantInt::get((llvm::ConstantInt **)v113, (llvm::Type *)&v420, v257);
                        v285 = (llvm::Value **)v435;
                        LOWORD(v430) = 257;
                        v286 = (char *)operator new(0x80uLL);
                        *((_QWORD *)v286 + 5) = 0;
                        v287 = (llvm::Value **)(v286 + 40);
                        *((_QWORD *)v286 + 6) = 0;
                        *((_QWORD *)v286 + 8) = *v284;
                        v8 = (uint64_t ***)(v286 + 64);
                        *((_QWORD *)v286 + 3) = v286 + 64;
                        *((_QWORD *)v286 + 7) = v286 + 64;
                        *((_QWORD *)v286 + 9) = 0;
                        v288 = 54;
                        goto LABEL_377;
                      }
                      v420 = 0;
                      v250 = (_QWORD **)*((_QWORD *)v111 + 1);
                      if (!v250 || v250[1])
                      {
LABEL_322:
                        v426 = (unint64_t)&v420;
                        if (sub_1C4B0378C((_QWORD **)&v426, (uint64_t)v111))
                        {
                          v251 = *(_DWORD *)(*(_QWORD *)v420 + 8);
                          if ((v251 & 0xFE) == 0x12)
                            v251 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v420 + 16) + 8);
                          if (v251 == 269)
                          {
                            v252 = llvm::ConstantInt::get(v113, 1, 0);
                            Shl = (uint64_t *)llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v252, (llvm::Constant *)v112, 0, 0);
                            v254 = v420;
                            NullValue = llvm::Constant::getNullValue(v113, v255);
                            LOWORD(v430) = 257;
                            return (llvm::UndefValue **)sub_1C4FC8748((uint64_t)v254, Shl, (uint64_t)NullValue, (uint64_t)&v426, 0, 0);
                          }
                        }
                        goto LABEL_327;
                      }
                      v263 = *((unsigned __int8 *)v111 + 16);
                      switch(v263)
                      {
                        case 5:
                          v311 = *((unsigned __int16 *)v111 + 9);
                          if (v311 != 17)
                          {
                            if (v311 != 25)
                              goto LABEL_322;
                            v312 = (unsigned __int8 **)((char *)v111 - 32 * (*((_DWORD *)v111 + 5) & 0x7FFFFFF));
                            v264 = *v312;
                            if (!*v312)
                              goto LABEL_322;
                            v265 = (llvm::Value *)v312[4];
                            if (!v265)
                              goto LABEL_322;
                            goto LABEL_411;
                          }
                          v314 = (llvm::Value **)((char *)v111 - 32 * (*((_DWORD *)v111 + 5) & 0x7FFFFFF));
                          v221 = *v314;
                          if (!*v314)
                            goto LABEL_322;
                          v420 = *v314;
                          v313 = (unsigned __int8 *)v314[4];
                          if (!v313)
                            goto LABEL_322;
                          break;
                        case 45:
                          v221 = (_QWORD *)*((_QWORD *)v111 - 8);
                          if (!v221)
                            goto LABEL_322;
                          v420 = (llvm::Value *)*((_QWORD *)v111 - 8);
                          v313 = (unsigned __int8 *)*((_QWORD *)v111 - 4);
                          if (!v313 || v313[16] > 0x14u)
                            goto LABEL_322;
                          break;
                        case 53:
                          v264 = (unsigned __int8 *)*((_QWORD *)v111 - 8);
                          if (!v264)
                            goto LABEL_322;
                          if (v264[16] > 0x14u)
                            goto LABEL_322;
                          v265 = (llvm::Value *)*((_QWORD *)v111 - 4);
                          if (!v265)
                            goto LABEL_322;
LABEL_411:
                          v420 = v265;
                          v239 = llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v264, (llvm::Constant *)v112, 0, 0);
                          v240 = v420;
                          LOWORD(v430) = 257;
                          v241 = (char *)operator new(0x80uLL);
                          *((_QWORD *)v241 + 5) = 0;
                          v242 = v241 + 40;
                          *((_QWORD *)v241 + 6) = 0;
                          *((_QWORD *)v241 + 8) = *v239;
                          v8 = (uint64_t ***)(v241 + 64);
                          *((_QWORD *)v241 + 3) = v241 + 64;
                          *((_QWORD *)v241 + 7) = v241 + 64;
                          *((_QWORD *)v241 + 9) = 0;
                          v243 = 53;
                          goto LABEL_311;
                        default:
                          goto LABEL_322;
                      }
                      v222 = (uint64_t)llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v313, (llvm::Constant *)v112, 0, 0);
                      LOWORD(v430) = 257;
                      v223 = (char *)operator new(0x80uLL);
                      *((_QWORD *)v223 + 5) = 0;
                      v224 = v223 + 40;
                      *((_QWORD *)v223 + 6) = 0;
                      *((_QWORD *)v223 + 8) = *v221;
                      v8 = (uint64_t ***)(v223 + 64);
                      *((_QWORD *)v223 + 3) = v223 + 64;
                      *((_QWORD *)v223 + 7) = v223 + 64;
                      *((_QWORD *)v223 + 9) = 0;
                      v225 = 45;
LABEL_426:
                      v223[80] = v225;
                      v223[81] = 0;
                      *((_WORD *)v223 + 41) = 0;
                      *((_DWORD *)v223 + 21) = 2;
                      *(_OWORD *)(v223 + 88) = 0u;
                      *(_OWORD *)(v223 + 104) = 0u;
                      *((_DWORD *)v223 + 30) = 0;
                      *(_QWORD *)v223 = v221;
                      v320 = v221[1];
                      v319 = v221 + 1;
                      v318 = v320;
                      *((_QWORD *)v223 + 1) = v320;
                      if (v320)
                        *(_QWORD *)(v318 + 16) = v223 + 8;
                      *((_QWORD *)v223 + 2) = v319;
                      *v319 = v223;
                      *((_QWORD *)v223 + 4) = v222;
                      if (v222)
                      {
                        v323 = *(_QWORD *)(v222 + 8);
                        v322 = (_QWORD *)(v222 + 8);
                        v321 = v323;
                        *v224 = v323;
                        if (v323)
                          *(_QWORD *)(v321 + 16) = v224;
                        *((_QWORD *)v223 + 6) = v322;
                        *v322 = v223 + 32;
                      }
                      goto LABEL_432;
                    }
                    v116 = v436[0];
                    if (*((_DWORD *)v436[0] + 2) >= 0x41u)
                      v116 = *(llvm::Constant **)v436[0];
                    v117 = *(_QWORD *)v116;
                    v435 = 0;
                    v426 = (unint64_t)&v435;
                    v118 = (_QWORD **)*((_QWORD *)v111 + 1);
                    if (v118 && !v118[1] && sub_1C4B0378C((_QWORD **)&v426, (uint64_t)v111))
                    {
                      v119 = (llvm *)v435;
                      v120 = (llvm::Type *)*v435;
                      if ((*(_DWORD *)(*v435 + 8) & 0xFE) == 0x12)
                        v120 = (llvm::Type *)**((_QWORD **)v120 + 2);
                      v121 = llvm::Type::getPrimitiveSizeInBits(v120);
                      v122 = v121;
                      if (v121 > v117)
                      {
                        LODWORD(v427) = v121;
                        if (v121 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v426, 0, 0);
                          v122 = v427;
                        }
                        else
                        {
                          v426 = 0;
                        }
                        sub_1C4912E54(&v426, v122 - v117, v122);
                        IsZero = llvm::MaskedValueIsZero(v119, (const llvm::Value *)&v426, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v417);
                        if (v427 >= 0x41 && v426)
                          MEMORY[0x1CAA32F9C](v426, 0x1000C8000313F17);
                        if (IsZero)
                        {
                          v124 = (char *)operator new(0x60uLL);
                          v8 = (uint64_t ***)(v124 + 32);
                          *((_DWORD *)v124 + 13) = *((_DWORD *)v124 + 13) & 0x38000000 | 1;
                          *(_QWORD *)v124 = 0;
                          *((_QWORD *)v124 + 1) = 0;
                          *((_QWORD *)v124 + 2) = 0;
                          *((_QWORD *)v124 + 3) = v124 + 32;
                          v125 = *(_QWORD *)(a1 + 24);
                          v126 = v435;
                          LOWORD(v430) = 257;
                          v127 = llvm::ConstantInt::get((llvm::ConstantInt *)*v435, v117, 0);
                          v128 = sub_1C506E874(v125, (uint64_t)v126, (uint64_t)v127, (uint64_t)&v426, 0, 0);
                          v422 = 257;
                          llvm::ZExtInst::ZExtInst((uint64_t)v8, v128, (uint64_t)v113, (uint64_t)&v420, 0);
                          return (llvm::UndefValue **)v8;
                        }
                      }
                    }
                    v426 = (unint64_t)&v435;
                    v427 = (llvm **)v112;
                    if (sub_1C4E73430((uint64_t)&v426, (uint64_t)v111))
                    {
                      v129 = v117 - v115;
                      v421 = v115;
                      if (v115 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v420, 0, 0);
                        v115 = v421;
                      }
                      else
                      {
                        v420 = 0;
                      }
                      sub_1C4912E54(&v420, v129 + v115, v115);
                      v130 = v435;
                      v132 = llvm::ConstantInt::get((llvm::ConstantInt **)v113, (llvm::Type *)&v420, v131);
                      LOWORD(v430) = 257;
                      v133 = (char *)operator new(0x80uLL);
                      *((_QWORD *)v133 + 5) = 0;
                      v134 = (llvm::Value **)(v133 + 40);
                      *((_QWORD *)v133 + 6) = 0;
                      *((_QWORD *)v133 + 8) = *v130;
                      v8 = (uint64_t ***)(v133 + 64);
                      *((_QWORD *)v133 + 3) = v133 + 64;
                      *((_QWORD *)v133 + 7) = v133 + 64;
                      *((_QWORD *)v133 + 9) = 0;
                      v133[80] = 56;
                      v133[81] = 0;
                      *((_WORD *)v133 + 41) = 0;
                      *((_DWORD *)v133 + 21) = 2;
                      *(_OWORD *)(v133 + 88) = 0u;
                      *(_OWORD *)(v133 + 104) = 0u;
                      *((_DWORD *)v133 + 30) = 0;
                      *(_QWORD *)v133 = v130;
                      v137 = v130[1];
                      v136 = v130 + 1;
                      v135 = v137;
                      *((_QWORD *)v133 + 1) = v137;
                      if (v137)
                        *(_QWORD *)(v135 + 16) = v133 + 8;
                      *((_QWORD *)v133 + 2) = v136;
                      *v136 = v133;
LABEL_191:
                      *((_QWORD *)v133 + 4) = v132;
                      if (v132)
                      {
                        v140 = v132[1];
                        v139 = v132 + 1;
                        v138 = v140;
                        *v134 = v140;
                        if (v140)
                          *((_QWORD *)v138 + 2) = v134;
                        *((_QWORD *)v133 + 6) = v139;
                        *v139 = v133 + 32;
                      }
LABEL_383:
                      llvm::Value::setName(v8, (uint64_t)&v426);
                      if (v421 >= 0x41 && v420)
                        MEMORY[0x1CAA32F9C](v420, 0x1000C8000313F17);
                      return (llvm::UndefValue **)v8;
                    }
                    v434 = 0;
                    v426 = (unint64_t)&v435;
                    v427 = &v434;
                    v428 = 0;
                    v141 = *((unsigned __int8 *)v111 + 16);
                    if (v141 < 0x1C)
                    {
                      if (v141 != 5)
                        goto LABEL_226;
                      v142 = *((unsigned __int16 *)v111 + 9);
                      if (v142 > 0x1B || ((1 << v142) & 0xC180000) == 0)
                        goto LABEL_226;
                    }
                    else if (v141 > 0x37 || ((1 << v141) & 0xC1800000000000) == 0)
                    {
                      goto LABEL_226;
                    }
                    if ((*((_BYTE *)v111 + 17) & 2) != 0
                      && sub_1C5819D30((_QWORD **)&v426, (uint64_t)v111))
                    {
                      v143 = v434;
                      v144 = *((_DWORD *)v434 + 2);
                      v145 = v434;
                      if (v144 >= 0x41)
                      {
                        if (v144 - llvm::APInt::countLeadingZerosSlowCase(v434) > 0x40)
                          goto LABEL_226;
                        v145 = *(llvm **)v143;
                      }
                      if (*(_QWORD *)v145 < (unint64_t)v115)
                      {
                        if (*((_DWORD *)v143 + 2) >= 0x41u)
                          v143 = *(llvm **)v143;
                        v146 = *(llvm **)v143;
                        if (*(_QWORD *)v143 < v117)
                        {
                          v147 = llvm::ConstantInt::get(v113, (v117 - (_DWORD)v146), 0);
                          v148 = v435;
                          LOWORD(v430) = 257;
                          v149 = (char *)operator new(0x80uLL);
                          v150 = v149;
                          *((_QWORD *)v149 + 5) = 0;
                          v151 = (llvm::Value **)(v149 + 40);
                          *((_QWORD *)v149 + 6) = 0;
                          *((_QWORD *)v149 + 8) = *v148;
                          v8 = (uint64_t ***)(v149 + 64);
                          *((_QWORD *)v149 + 3) = v149 + 64;
                          *((_QWORD *)v149 + 7) = v149 + 64;
                          *((_QWORD *)v149 + 9) = 0;
                          v149[80] = 53;
                          v149[81] = 0;
                          *((_WORD *)v149 + 41) = 0;
                          *((_DWORD *)v149 + 21) = 2;
                          *(_OWORD *)(v149 + 88) = 0u;
                          *(_OWORD *)(v149 + 104) = 0u;
                          *((_DWORD *)v149 + 30) = 0;
                          *(_QWORD *)v149 = v148;
                          v154 = v148[1];
                          v153 = v148 + 1;
                          v152 = v154;
                          *((_QWORD *)v149 + 1) = v154;
                          if (v154)
                            *(_QWORD *)(v152 + 16) = v149 + 8;
                          *((_QWORD *)v149 + 2) = v153;
                          *v153 = v149;
                          *((_QWORD *)v149 + 4) = v147;
                          if (v147)
                          {
                            v157 = v147[1];
                            v156 = v147 + 1;
                            v155 = v157;
                            *v151 = v157;
                            if (v157)
                              *((_QWORD *)v155 + 2) = v151;
                            *((_QWORD *)v149 + 6) = v156;
                            *v156 = v149 + 32;
                          }
                          llvm::Value::setName((uint64_t ***)v149 + 8, (uint64_t)&v426);
                          v150[81] = v150[81] & 0xF9 | *(_BYTE *)(a2 + 17) & 6;
                          return (llvm::UndefValue **)v8;
                        }
                        if (*(_QWORD *)v143 > v117)
                        {
                          v158 = llvm::ConstantInt::get(v113, ((_DWORD)v146 - v117), 0);
                          v159 = *((_BYTE *)v111 + 16);
                          v160 = v435;
                          LOWORD(v430) = 257;
                          v161 = (char *)operator new(0x80uLL);
                          v162 = v161;
                          *((_QWORD *)v161 + 6) = 0;
                          *((_QWORD *)v161 + 5) = 0;
                          v163 = (llvm::Value **)(v161 + 40);
                          *((_QWORD *)v161 + 8) = *v160;
                          v8 = (uint64_t ***)(v161 + 64);
                          *((_QWORD *)v161 + 3) = v161 + 64;
                          *((_QWORD *)v161 + 7) = v161 + 64;
                          *((_QWORD *)v161 + 9) = 0;
                          v161[80] = v159;
                          v161[81] = 0;
                          *((_WORD *)v161 + 41) = 0;
                          *((_DWORD *)v161 + 21) = 2;
                          *(_OWORD *)(v161 + 88) = 0u;
                          *(_OWORD *)(v161 + 104) = 0u;
                          *((_DWORD *)v161 + 30) = 0;
                          *(_QWORD *)v161 = v160;
                          v166 = v160[1];
                          v165 = v160 + 1;
                          v164 = v166;
                          *((_QWORD *)v161 + 1) = v166;
                          if (v166)
                            *(_QWORD *)(v164 + 16) = v161 + 8;
                          *((_QWORD *)v161 + 2) = v165;
                          *v165 = v161;
                          *((_QWORD *)v161 + 4) = v158;
                          if (v158)
                          {
                            v169 = v158[1];
                            v168 = v158 + 1;
                            v167 = v169;
                            *v163 = v169;
                            if (v169)
                              *((_QWORD *)v167 + 2) = v163;
                            *((_QWORD *)v161 + 6) = v168;
                            *v168 = v161 + 32;
                          }
                          llvm::Value::setName((uint64_t ***)v161 + 8, (uint64_t)&v426);
                          v162[81] |= 2u;
                          return (llvm::UndefValue **)v8;
                        }
                      }
                    }
LABEL_226:
                    v426 = (unint64_t)&v435;
                    v427 = &v434;
                    v428 = 0;
                    v170 = (_QWORD **)*((_QWORD *)v111 + 1);
                    if (!v170 || v170[1] || !sub_1C5819D30((_QWORD **)&v426, (uint64_t)v111))
                      goto LABEL_261;
                    v171 = v434;
                    v172 = *((_DWORD *)v434 + 2);
                    v173 = v434;
                    if (v172 >= 0x41)
                    {
                      if (v172 - llvm::APInt::countLeadingZerosSlowCase(v434) > 0x40)
                        goto LABEL_261;
                      v173 = *(llvm **)v171;
                    }
                    if (*(_QWORD *)v173 < (unint64_t)v115)
                    {
                      if (*((_DWORD *)v171 + 2) >= 0x41u)
                        v171 = *(llvm **)v171;
                      v174 = *(llvm **)v171;
                      if (*(_QWORD *)v171 < v117)
                      {
                        v175 = llvm::ConstantInt::get(v113, (v117 - (_DWORD)v174), 0);
                        v176 = v435;
                        LOWORD(v430) = 257;
                        v177 = (char *)operator new(0x80uLL);
                        v178 = v177;
                        *((_QWORD *)v177 + 6) = 0;
                        *((_QWORD *)v177 + 5) = 0;
                        v179 = (llvm::Value **)(v177 + 40);
                        *((_QWORD *)v177 + 8) = *v176;
                        v180 = v177 + 64;
                        *((_QWORD *)v177 + 3) = v177 + 64;
                        *((_QWORD *)v177 + 7) = v177 + 64;
                        *((_QWORD *)v177 + 9) = 0;
                        v181 = (uint64_t *)(v177 + 72);
                        v177[80] = 53;
                        v177[81] = 0;
                        *((_WORD *)v177 + 41) = 0;
                        *((_DWORD *)v177 + 21) = 2;
                        *(_OWORD *)(v177 + 88) = 0u;
                        *(_OWORD *)(v177 + 104) = 0u;
                        *((_DWORD *)v177 + 30) = 0;
                        *(_QWORD *)v177 = v176;
                        v184 = v176[1];
                        v183 = v176 + 1;
                        v182 = v184;
                        *((_QWORD *)v177 + 1) = v184;
                        if (v184)
                          *(_QWORD *)(v182 + 16) = v177 + 8;
                        *((_QWORD *)v177 + 2) = v183;
                        *v183 = v177;
                        *((_QWORD *)v177 + 4) = v175;
                        if (v175)
                        {
                          v187 = v175[1];
                          v186 = v175 + 1;
                          v185 = v187;
                          *v179 = v187;
                          if (v187)
                            *((_QWORD *)v185 + 2) = v179;
                          *((_QWORD *)v177 + 6) = v186;
                          *v186 = v177 + 32;
                        }
                        llvm::Value::setName((uint64_t ***)v177 + 8, (uint64_t)&v426);
                        v178[81] = v178[81] & 0xF9 | *(_BYTE *)(a2 + 17) & 6;
                        v188 = *(uint64_t **)(a1 + 24);
                        LOWORD(v430) = 257;
                        sub_1C4773754(v188, (uint64_t)v180, (uint64_t)&v426);
                        v189 = v117 - v115;
                        v421 = v115;
                        if (v115 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v420, 0, 0);
                          v115 = v421;
                        }
                        else
                        {
                          v420 = 0;
                        }
                        sub_1C4912E54(&v420, v189 + v115, v115);
                        v132 = llvm::ConstantInt::get((llvm::ConstantInt **)v113, (llvm::Type *)&v420, v190);
                        LOWORD(v430) = 257;
                        v133 = (char *)operator new(0x80uLL);
                        *((_QWORD *)v133 + 8) = *v180;
                        v8 = (uint64_t ***)(v133 + 64);
                        *((_QWORD *)v133 + 3) = v133 + 64;
                        *((_QWORD *)v133 + 5) = 0;
                        v134 = (llvm::Value **)(v133 + 40);
                        *((_QWORD *)v133 + 6) = 0;
                        *((_QWORD *)v133 + 7) = v133 + 64;
                        *((_QWORD *)v133 + 9) = 0;
                        *((_QWORD *)v133 + 10) = 0x200000038;
                        *(_OWORD *)(v133 + 88) = 0u;
                        *(_OWORD *)(v133 + 104) = 0u;
                        *((_DWORD *)v133 + 30) = 0;
                        *(_QWORD *)v133 = v180;
                        v191 = *v181;
                        *((_QWORD *)v133 + 1) = *v181;
                        if (v191)
                          *(_QWORD *)(v191 + 16) = v133 + 8;
                        *((_QWORD *)v133 + 2) = v181;
                        *v181 = (uint64_t)v133;
                        goto LABEL_191;
                      }
                      if (*(_QWORD *)v171 > v117)
                      {
                        v192 = llvm::ConstantInt::get(v113, ((_DWORD)v174 - v117), 0);
                        v193 = *((_BYTE *)v111 + 16);
                        v194 = v435;
                        LOWORD(v430) = 257;
                        v195 = (char *)operator new(0x80uLL);
                        v196 = v195;
                        *((_QWORD *)v195 + 6) = 0;
                        *((_QWORD *)v195 + 5) = 0;
                        v197 = (llvm::Value **)(v195 + 40);
                        *((_QWORD *)v195 + 8) = *v194;
                        v198 = v195 + 64;
                        *((_QWORD *)v195 + 3) = v195 + 64;
                        *((_QWORD *)v195 + 7) = v195 + 64;
                        *((_QWORD *)v195 + 9) = 0;
                        v418 = (uint64_t *)(v195 + 72);
                        v195[80] = v193;
                        v195[81] = 0;
                        *((_WORD *)v195 + 41) = 0;
                        *((_DWORD *)v195 + 21) = 2;
                        *(_OWORD *)(v195 + 88) = 0u;
                        *(_OWORD *)(v195 + 104) = 0u;
                        *((_DWORD *)v195 + 30) = 0;
                        *(_QWORD *)v195 = v194;
                        v201 = v194[1];
                        v200 = v194 + 1;
                        v199 = v201;
                        *((_QWORD *)v195 + 1) = v201;
                        if (v201)
                          *(_QWORD *)(v199 + 16) = v195 + 8;
                        *((_QWORD *)v195 + 2) = v200;
                        *v200 = v195;
                        *((_QWORD *)v195 + 4) = v192;
                        if (v192)
                        {
                          v204 = v192[1];
                          v203 = v192 + 1;
                          v202 = v204;
                          *v197 = v204;
                          if (v204)
                            *((_QWORD *)v202 + 2) = v197;
                          *((_QWORD *)v195 + 6) = v203;
                          *v203 = v195 + 32;
                        }
                        llvm::Value::setName((uint64_t ***)v195 + 8, (uint64_t)&v426);
                        v196[81] = v196[81] & 0xFD | *((_BYTE *)v111 + 17) & 2;
                        v205 = *(uint64_t **)(a1 + 24);
                        LOWORD(v430) = 257;
                        sub_1C4773754(v205, (uint64_t)v198, (uint64_t)&v426);
                        v206 = v117 - v115;
                        v421 = v115;
                        if (v115 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v420, 0, 0);
                          v115 = v421;
                        }
                        else
                        {
                          v420 = 0;
                        }
                        sub_1C4912E54(&v420, v206 + v115, v115);
                        v132 = llvm::ConstantInt::get((llvm::ConstantInt **)v113, (llvm::Type *)&v420, v207);
                        LOWORD(v430) = 257;
                        v133 = (char *)operator new(0x80uLL);
                        *((_QWORD *)v133 + 8) = *v198;
                        v8 = (uint64_t ***)(v133 + 64);
                        *((_QWORD *)v133 + 3) = v133 + 64;
                        *((_QWORD *)v133 + 5) = 0;
                        v134 = (llvm::Value **)(v133 + 40);
                        *((_QWORD *)v133 + 6) = 0;
                        *((_QWORD *)v133 + 7) = v133 + 64;
                        *((_QWORD *)v133 + 9) = 0;
                        *((_QWORD *)v133 + 10) = 0x200000038;
                        *(_OWORD *)(v133 + 88) = 0u;
                        *(_OWORD *)(v133 + 104) = 0u;
                        *((_DWORD *)v133 + 30) = 0;
                        *(_QWORD *)v133 = v198;
                        v208 = *v418;
                        *((_QWORD *)v133 + 1) = *v418;
                        if (v208)
                          *(_QWORD *)(v208 + 16) = v133 + 8;
                        *((_QWORD *)v133 + 2) = v418;
                        *v418 = (uint64_t)v133;
                        goto LABEL_191;
                      }
                    }
LABEL_261:
                    v209 = (_QWORD **)*((_QWORD *)v111 + 1);
                    if (v209)
                    {
                      if (!v209[1])
                      {
                        v210 = *((unsigned __int8 *)v111 + 16);
                        if (v210 > 0x1B || v210 == 5)
                        {
                          v211 = v210 <= 0x1B ? *((unsigned __int16 *)v111 + 9) : v210 - 28;
                          if (v211 == 38)
                          {
                            v212 = *((_DWORD *)v111 + 5);
                            v213 = (v212 & 0x40000000) != 0
                                 ? (llvm::Constant *)*((_QWORD *)v111 - 1)
                                 : (llvm::Constant *)((char *)v111 - 32 * (v212 & 0x7FFFFFF));
                            v214 = *(_QWORD *)v213;
                            v215 = *(_QWORD *)(*(_QWORD *)v213 + 8);
                            if (v215)
                            {
                              if (!*(_QWORD *)(v215 + 8))
                              {
                                v326 = *(unsigned __int8 *)(v214 + 16);
                                if (v326 >= 0x1C && v326 - 59 > 0xFFFFFFED)
                                {
                                  v426 = (unint64_t)&v435;
                                  v427 = &v434;
                                  v428 = 0;
                                  if ((*(_BYTE *)(v214 + 16) & 0xFE) == 0x36)
                                  {
                                    v327 = *(_DWORD *)(v214 + 20);
                                    v328 = (v327 & 0x40000000) != 0
                                         ? *(_QWORD ***)(v214 - 8)
                                         : (_QWORD **)(v214 - 32 * (v327 & 0x7FFFFFF));
                                    v376 = *v328;
                                    if (v376)
                                    {
                                      v435 = v376;
                                      v377 = *(_DWORD *)(v214 + 20);
                                      v378 = (v377 & 0x40000000) != 0
                                           ? *(_QWORD *)(v214 - 8)
                                           : v214 - 32 * (v377 & 0x7FFFFFF);
                                      if (sub_1C4D89F84((uint64_t)&v427, *(unsigned __int8 **)(v378 + 32)))
                                      {
                                        v379 = v434;
                                        if (*((_DWORD *)v434 + 2) >= 0x41u)
                                          v379 = *(llvm **)v434;
                                        v380 = *(_DWORD *)v379;
                                        v381 = *(_DWORD *)v379 - v117;
                                        if (v380 <= v117)
                                          v381 = v117 - v380;
                                        v382 = llvm::ConstantInt::get((llvm::ConstantInt *)*v435, v381, 0);
                                        if (v380 <= v117)
                                          v383 = 25;
                                        else
                                          v383 = *(unsigned __int8 *)(v214 + 16) - 28;
                                        v384 = *(_QWORD *)(a1 + 24);
                                        v426 = (unint64_t)"sh.diff";
                                        LOWORD(v430) = 259;
                                        v385 = sub_1C4773860(v384, v383, v435, (uint64_t)v382, (uint64_t)&v426, 0);
                                        v386 = *(uint64_t **)(a1 + 24);
                                        v426 = (unint64_t)"tr.sh.diff";
                                        LOWORD(v430) = 259;
                                        v284 = sub_1C4773E38(v386, 38, v385, (uint64_t)v113, (uint64_t)&v426);
                                        v369 = v117 - v115;
                                        goto LABEL_487;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    v426 = (unint64_t)&v435;
                    v427 = &v434;
                    v428 = 0;
                    v216 = *((unsigned __int8 *)v111 + 16);
                    if (v216 == 5)
                    {
                      if (*((_WORD *)v111 + 9) != 25)
                        goto LABEL_290;
                      v217 = (_QWORD ***)((char *)v111 - 32 * (*((_DWORD *)v111 + 5) & 0x7FFFFFF));
                      if (!*v217)
                        goto LABEL_290;
                      v435 = *v217;
                      if (!sub_1C4D8A004((uint64_t)&v427, (llvm::Constant *)v217[4]))
                        goto LABEL_290;
                    }
                    else
                    {
                      if (v216 != 53)
                        goto LABEL_290;
                      if (!*((_QWORD *)v111 - 8))
                        goto LABEL_290;
                      v435 = (_QWORD *)*((_QWORD *)v111 - 8);
                      if ((sub_1C4D89F84((uint64_t)&v427, *((unsigned __int8 **)v111 - 4)) & 1) == 0)
                        goto LABEL_290;
                    }
                    v218 = v434;
                    v219 = *((_DWORD *)v434 + 2);
                    v220 = v434;
                    if (v219 >= 0x41)
                    {
                      if (v219 - llvm::APInt::countLeadingZerosSlowCase(v434) > 0x40)
                        goto LABEL_290;
                      v220 = *(llvm **)v218;
                    }
                    if (*(_QWORD *)v220 < (unint64_t)v115)
                    {
                      if (*((_DWORD *)v218 + 2) >= 0x41u)
                        v218 = *(llvm **)v218;
                      if (v115 > *(_DWORD *)v218 + (int)v117)
                      {
                        v221 = v435;
                        v222 = (uint64_t)llvm::ConstantInt::get(v113, (*(_DWORD *)v218 + v117), 0);
                        LOWORD(v430) = 257;
                        v223 = (char *)operator new(0x80uLL);
                        *((_QWORD *)v223 + 5) = 0;
                        v224 = v223 + 40;
                        *((_QWORD *)v223 + 6) = 0;
                        *((_QWORD *)v223 + 8) = *v221;
                        v8 = (uint64_t ***)(v223 + 64);
                        *((_QWORD *)v223 + 3) = v223 + 64;
                        *((_QWORD *)v223 + 7) = v223 + 64;
                        *((_QWORD *)v223 + 9) = 0;
                        v225 = 53;
                        goto LABEL_426;
                      }
                    }
LABEL_290:
                    v226 = (_QWORD **)*((_QWORD *)v111 + 1);
                    if (!v226)
                      goto LABEL_292;
                    if (v226[1])
                      goto LABEL_292;
                    v266 = *((unsigned __int8 *)v111 + 16);
                    if (v266 < 0x1C
                      || v266 - 59 < 0xFFFFFFEE
                      || v266 > 0x3A
                      || ((1 << v266) & 0x7000A0000000000) == 0)
                    {
                      goto LABEL_292;
                    }
                    v267 = *((_QWORD *)v111 - 8);
                    v268 = *((_QWORD *)v111 - 4);
                    v433 = 0;
                    v419 = 0;
                    if (!llvm::Instruction::isCommutative(v111))
                      goto LABEL_352;
                    v269 = *(_QWORD *)(v268 + 8);
                    if (!v269 || *(_QWORD *)(v269 + 8))
                      goto LABEL_352;
                    if (sub_1C584C004(v112, v268))
                    {
LABEL_447:
                      v270 = v267;
                      v267 = v268;
                      goto LABEL_353;
                    }
                    v427 = (llvm **)v112;
                    v428 = (char *)&v419;
                    v429 = 0;
                    v342 = *(unsigned __int8 *)(v268 + 16);
                    if (v342 != 5)
                    {
                      if (v342 == 56)
                      {
                        v343 = *(_QWORD *)(v268 - 64);
                        v344 = *(_QWORD *)(v343 + 8);
                        if (v344)
                        {
                          if (!*(_QWORD *)(v344 + 8)
                            && sub_1C584C004(v112, v343)
                            && sub_1C4D89F84((uint64_t)&v428, *(unsigned __int8 **)(v268 - 32)))
                          {
                            goto LABEL_447;
                          }
                        }
                      }
LABEL_352:
                      v270 = v268;
LABEL_353:
                      v426 = (unint64_t)&v433;
                      v427 = (llvm **)v112;
                      v271 = *(_QWORD *)(v267 + 8);
                      if (v271 && !*(_QWORD *)(v271 + 8) && sub_1C4E73430((uint64_t)&v426, v267))
                      {
                        v272 = *(_QWORD *)(a1 + 24);
                        if ((*((_BYTE *)v111 + 23) & 0x10) == 0)
                        {
                          v347 = 0;
                          v346 = &byte_1C871356D;
LABEL_471:
                          LOWORD(v430) = 261;
                          v426 = (unint64_t)v346;
                          v427 = v347;
                          v349 = sub_1C506E874(v272, v270, v112, (uint64_t)&v426, 0, 0);
                          v350 = *(_QWORD *)(a1 + 24);
                          v351 = *((unsigned __int8 *)v111 + 16) - 28;
                          if ((*(_BYTE *)(v267 + 23) & 0x10) == 0)
                          {
                            v362 = 0;
                            v361 = &byte_1C871356D;
LABEL_480:
                            LOWORD(v430) = 261;
                            v426 = (unint64_t)v361;
                            v427 = v362;
                            v284 = sub_1C4773860(v350, v351, v433, v349, (uint64_t)&v426, 0);
                            v364 = v436[0];
                            v365 = *((_DWORD *)v436[0] + 2);
                            if (v365 >= 0x41)
                            {
                              v367 = llvm::APInt::countLeadingZerosSlowCase(v436[0]);
                              v368 = v115;
                              if (v365 - v367 > 0x40)
                              {
LABEL_486:
                                v369 = v368 - v115;
LABEL_487:
                                v421 = v115;
                                if (v115 > 0x40)
                                {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v420, 0, 0);
                                  v115 = v421;
                                }
                                else
                                {
                                  v420 = 0;
                                }
                                sub_1C4912E54(&v420, v369 + v115, v115);
                                v285 = llvm::ConstantInt::get((llvm::ConstantInt **)v113, (llvm::Type *)&v420, v370);
                                LOWORD(v430) = 257;
                                v286 = (char *)operator new(0x80uLL);
                                *((_QWORD *)v286 + 5) = 0;
                                v287 = (llvm::Value **)(v286 + 40);
                                *((_QWORD *)v286 + 6) = 0;
                                *((_QWORD *)v286 + 8) = *v284;
                                v8 = (uint64_t ***)(v286 + 64);
                                *((_QWORD *)v286 + 3) = v286 + 64;
                                *((_QWORD *)v286 + 7) = v286 + 64;
                                *((_QWORD *)v286 + 9) = 0;
                                v288 = 56;
LABEL_377:
                                v286[80] = v288;
                                v286[81] = 0;
                                *((_WORD *)v286 + 41) = 0;
                                *((_DWORD *)v286 + 21) = 2;
                                *(_OWORD *)(v286 + 88) = 0u;
                                *(_OWORD *)(v286 + 104) = 0u;
                                *((_DWORD *)v286 + 30) = 0;
                                *(_QWORD *)v286 = v284;
                                v291 = v284[1];
                                v290 = v284 + 1;
                                v289 = v291;
                                *((_QWORD *)v286 + 1) = v291;
                                if (v291)
                                  *(_QWORD *)(v289 + 16) = v286 + 8;
                                *((_QWORD *)v286 + 2) = v290;
                                *v290 = v286;
                                *((_QWORD *)v286 + 4) = v285;
                                if (v285)
                                {
                                  v294 = v285[1];
                                  v293 = v285 + 1;
                                  v292 = v294;
                                  *v287 = v294;
                                  if (v294)
                                    *((_QWORD *)v292 + 2) = v287;
                                  *((_QWORD *)v286 + 6) = v293;
                                  *v293 = v286 + 32;
                                }
                                goto LABEL_383;
                              }
                              v366 = **(_QWORD **)v364;
                            }
                            else
                            {
                              v366 = *(_QWORD *)v436[0];
                            }
                            v368 = v115;
                            if (v366 <= v115)
                              v368 = v366;
                            goto LABEL_486;
                          }
                          v352 = ***(_QWORD ***)v267;
                          v353 = *(_QWORD *)(v352 + 152);
                          v354 = *(unsigned int *)(v352 + 168);
                          if ((_DWORD)v354)
                          {
                            LODWORD(v355) = (v354 - 1) & ((v267 >> 4) ^ (v267 >> 9));
                            v356 = (uint64_t *)(v353 + 16 * v355);
                            v357 = *v356;
                            if (*v356 == v267)
                            {
LABEL_479:
                              v360 = (_QWORD *)v356[1];
                              v363 = (llvm **)*v360;
                              v361 = (char *)(v360 + 2);
                              v362 = v363;
                              goto LABEL_480;
                            }
                            v358 = 1;
                            while (v357 != -4096)
                            {
                              v359 = v355 + v358++;
                              v355 = v359 & (v354 - 1);
                              v357 = *(_QWORD *)(v353 + 16 * v355);
                              if (v357 == v267)
                              {
                                v356 = (uint64_t *)(v353 + 16 * v355);
                                goto LABEL_479;
                              }
                            }
                          }
                          v356 = (uint64_t *)(v353 + 16 * v354);
                          goto LABEL_479;
                        }
                        v273 = ***(_QWORD ***)v111;
                        v274 = *(_QWORD *)(v273 + 152);
                        v275 = *(unsigned int *)(v273 + 168);
                        if ((_DWORD)v275)
                        {
                          LODWORD(v276) = (v275 - 1) & ((v111 >> 4) ^ (v111 >> 9));
                          v277 = (llvm::Constant **)(v274 + 16 * v276);
                          v278 = *v277;
                          if (*v277 == v111)
                          {
LABEL_470:
                            v345 = v277[1];
                            v348 = *(llvm ***)v345;
                            v346 = (char *)v345 + 16;
                            v347 = v348;
                            goto LABEL_471;
                          }
                          v279 = 1;
                          while (v278 != (llvm::Constant *)-4096)
                          {
                            v280 = v276 + v279++;
                            v276 = v280 & (v275 - 1);
                            v278 = *(llvm::Constant **)(v274 + 16 * v276);
                            if (v278 == v111)
                            {
                              v277 = (llvm::Constant **)(v274 + 16 * v276);
                              goto LABEL_470;
                            }
                          }
                        }
                        v277 = (llvm::Constant **)(v274 + 16 * v275);
                        goto LABEL_470;
                      }
                      v426 = (unint64_t)&v433;
                      v427 = (llvm **)v112;
                      v428 = (char *)&v419;
                      v429 = 0;
                      v295 = *(_QWORD *)(v267 + 8);
                      if (!v295 || *(_QWORD *)(v295 + 8))
                        goto LABEL_292;
                      v296 = *(unsigned __int8 *)(v267 + 16);
                      if (v296 != 5)
                      {
                        if (v296 == 56)
                        {
                          v297 = *(_QWORD *)(v267 - 64);
                          v298 = *(_QWORD *)(v297 + 8);
                          if (v298)
                          {
                            if (!*(_QWORD *)(v298 + 8)
                              && sub_1C4E73430((uint64_t)&v426, v297)
                              && sub_1C4D89F84((uint64_t)&v428, *(unsigned __int8 **)(v267 - 32)))
                            {
                              goto LABEL_395;
                            }
                          }
                        }
                        goto LABEL_292;
                      }
                      if (*(_WORD *)(v267 + 18) != 28)
                        goto LABEL_292;
                      v338 = *(_QWORD *)(v267 - 32 * (*(_DWORD *)(v267 + 20) & 0x7FFFFFF));
                      v339 = *(_QWORD *)(v338 + 8);
                      if (!v339 || *(_QWORD *)(v339 + 8))
                        goto LABEL_292;
                      v340 = *(unsigned __int8 *)(v338 + 16);
                      if (v340 >= 0x1C)
                      {
                        if ((v340 & 0xFE) != 0x36)
                          goto LABEL_292;
                        v387 = *(_DWORD *)(v338 + 20);
                        v388 = (v387 & 0x40000000) != 0
                             ? *(unsigned __int8 ***)(v338 - 8)
                             : (unsigned __int8 **)(v338 - 32 * (v387 & 0x7FFFFFF));
                        v390 = *v388;
                        if (!v390)
                          goto LABEL_292;
                        v433 = v390;
                        v341 = *(_DWORD *)(v338 + 20);
                        if ((v341 & 0x40000000) != 0)
                        {
                          v391 = *(_QWORD *)(v338 - 8);
                          goto LABEL_550;
                        }
                      }
                      else
                      {
                        if (v340 != 5
                          || (*(_WORD *)(v338 + 18) & 0xFFFE) != 0x1A
                          || !*(_QWORD *)(v338 - 32 * (*(_DWORD *)(v338 + 20) & 0x7FFFFFF)))
                        {
                          goto LABEL_292;
                        }
                        v433 = *(unsigned __int8 **)(v338 - 32 * (*(_DWORD *)(v338 + 20) & 0x7FFFFFF));
                        v341 = *(_DWORD *)(v338 + 20);
                      }
                      v391 = v338 - 32 * (v341 & 0x7FFFFFF);
LABEL_550:
                      if (v427 == *(llvm ***)(v391 + 32)
                        && (sub_1C4D8A004((uint64_t)&v428, *(llvm::Constant **)(v267- 32 * (*(_DWORD *)(v267 + 20) & 0x7FFFFFF)+ 32)) & 1) != 0)
                      {
LABEL_395:
                        v299 = *(_QWORD *)(a1 + 24);
                        if ((*((_BYTE *)v111 + 23) & 0x10) == 0)
                        {
                          v394 = 0;
                          v393 = &byte_1C871356D;
LABEL_532:
                          LOWORD(v430) = 261;
                          v426 = (unint64_t)v393;
                          v427 = v394;
                          v240 = (_QWORD *)sub_1C506E874(v299, v270, v112, (uint64_t)&v426, 0, 0);
                          v396 = *(_QWORD *)(a1 + 24);
                          v397 = v433;
                          v398 = (const void **)v419;
                          v399 = (uint64_t ***)v436[0];
                          v400 = *(unsigned int *)(v419 + 8);
                          v421 = v400;
                          if (v400 > 0x40)
                          {
                            v420 = (llvm::Value *)operator new[]();
                            memcpy(v420, *v398, ((v400 + 63) >> 3) & 0x3FFFFFF8);
                          }
                          else
                          {
                            v420 = *(llvm::Value **)v419;
                          }
                          v401 = sub_1C47EE5B8(v399, v400);
                          sub_1C4888094((uint64_t)&v420, v401);
                          v403 = llvm::ConstantInt::get((llvm::ConstantInt **)v113, (llvm::Type *)&v420, v402);
                          if ((v433[23] & 0x10) == 0)
                          {
                            v414 = 0;
                            v413 = &byte_1C871356D;
LABEL_544:
                            LOWORD(v430) = 773;
                            v426 = (unint64_t)v413;
                            v427 = v414;
                            v428 = ".mask";
                            v239 = (_QWORD *)sub_1C4D89BCC(v396, v397, (uint64_t)v403, (uint64_t)&v426);
                            if (v421 >= 0x41 && v420)
                              MEMORY[0x1CAA32F9C](v420, 0x1000C8000313F17);
                            v416 = *((_BYTE *)v111 + 16);
                            LOWORD(v430) = 257;
                            v241 = (char *)operator new(0x80uLL);
                            *((_QWORD *)v241 + 6) = 0;
                            *((_QWORD *)v241 + 5) = 0;
                            v242 = v241 + 40;
                            *((_QWORD *)v241 + 8) = *v239;
                            v8 = (uint64_t ***)(v241 + 64);
                            *((_QWORD *)v241 + 3) = v241 + 64;
                            *((_QWORD *)v241 + 7) = v241 + 64;
                            *((_QWORD *)v241 + 9) = 0;
                            v241[80] = v416;
                            goto LABEL_312;
                          }
                          v404 = ***(_QWORD ***)v433;
                          v405 = *(_QWORD *)(v404 + 152);
                          v406 = *(unsigned int *)(v404 + 168);
                          if ((_DWORD)v406)
                          {
                            LODWORD(v407) = (v406 - 1) & ((v433 >> 4) ^ (v433 >> 9));
                            v408 = v405 + 16 * v407;
                            v409 = *(unsigned __int8 **)v408;
                            if (*(unsigned __int8 **)v408 == v433)
                            {
LABEL_543:
                              v412 = *(_QWORD **)(v408 + 8);
                              v415 = (llvm **)*v412;
                              v413 = (char *)(v412 + 2);
                              v414 = v415;
                              goto LABEL_544;
                            }
                            v410 = 1;
                            while (v409 != (unsigned __int8 *)-4096)
                            {
                              v411 = v407 + v410++;
                              v407 = v411 & (v406 - 1);
                              v409 = *(unsigned __int8 **)(v405 + 16 * v407);
                              if (v409 == v433)
                              {
                                v408 = v405 + 16 * v407;
                                goto LABEL_543;
                              }
                            }
                          }
                          v408 = v405 + 16 * v406;
                          goto LABEL_543;
                        }
                        v300 = ***(_QWORD ***)v111;
                        v301 = *(_QWORD *)(v300 + 152);
                        v302 = *(unsigned int *)(v300 + 168);
                        if ((_DWORD)v302)
                        {
                          LODWORD(v303) = (v302 - 1) & ((v111 >> 4) ^ (v111 >> 9));
                          v304 = (llvm::Constant **)(v301 + 16 * v303);
                          v305 = *v304;
                          if (*v304 == v111)
                          {
LABEL_531:
                            v392 = v304[1];
                            v395 = *(llvm ***)v392;
                            v393 = (char *)v392 + 16;
                            v394 = v395;
                            goto LABEL_532;
                          }
                          v306 = 1;
                          while (v305 != (llvm::Constant *)-4096)
                          {
                            v307 = v303 + v306++;
                            v303 = v307 & (v302 - 1);
                            v305 = *(llvm::Constant **)(v301 + 16 * v303);
                            if (v305 == v111)
                            {
                              v304 = (llvm::Constant **)(v301 + 16 * v303);
                              goto LABEL_531;
                            }
                          }
                        }
                        v304 = (llvm::Constant **)(v301 + 16 * v302);
                        goto LABEL_531;
                      }
LABEL_292:
                      v426 = (unint64_t)&v434;
                      v427 = 0;
                      v428 = (char *)&v435;
                      v227 = (_QWORD **)*((_QWORD *)v111 + 1);
                      if (!v227 || v227[1])
                      {
LABEL_294:
                        v228 = *(_BYTE *)(a2 + 17);
                        if ((v228 & 2) == 0)
                        {
                          LODWORD(v427) = v115;
                          if (v115 > 0x40)
                          {
                            llvm::APInt::initSlowCase((llvm::APInt *)&v426, 0, 0);
                            v229 = v427;
                          }
                          else
                          {
                            v426 = 0;
                            v229 = v115;
                          }
                          sub_1C4912E54(&v426, v229 - v117, v229);
                          v230 = llvm::MaskedValueIsZero(v111, (const llvm::Value *)&v426, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v417);
                          if (v427 >= 0x41 && v426)
                            MEMORY[0x1CAA32F9C](v426, 0x1000C8000313F17);
                          v228 = *(_BYTE *)(a2 + 17);
                          if (v230)
                          {
                            v231 = v228 | 2;
LABEL_306:
                            *(_BYTE *)(a2 + 17) = v231;
                            return (llvm::UndefValue **)a2;
                          }
                        }
                        if ((v228 & 4) == 0)
                        {
                          v232 = *(llvm ***)(a1 + 56);
                          v233 = *(llvm ***)(a1 + 72);
                          v234 = (char *)a2;
                          if (!*(_QWORD *)(a2 + 40))
                          {
                            if (*((unsigned __int8 *)v111 + 16) < 0x1Cu
                              || (v234 = (char *)v111, !*((_QWORD *)v111 + 5)))
                            {
                              v234 = 0;
                            }
                          }
                          v426 = *(_QWORD *)(a1 + 80);
                          v427 = v232;
                          v428 = v234;
                          v429 = v233;
                          v430 = 0;
                          LOBYTE(v431) = 1;
                          if (sub_1C4F85990(v111, 0, (uint64_t)&v426) > v117)
                          {
                            v231 = *(_BYTE *)(a2 + 17) | 4;
                            goto LABEL_306;
                          }
                        }
                        goto LABEL_307;
                      }
                      v281 = *((unsigned __int8 *)v111 + 16);
                      if (v281 == 5)
                      {
                        if (*((_WORD *)v111 + 9) != 15)
                          goto LABEL_294;
                        if (!sub_1C4D8A004((uint64_t)&v426, *((llvm::Constant **)v111 - 4 * (*((_DWORD *)v111 + 5) & 0x7FFFFFF))))goto LABEL_294;
                        v282 = (_QWORD **)((_QWORD *)v111 - 4 * (*((_DWORD *)v111 + 5) & 0x7FFFFFF))[4];
                        if (!v282)
                          goto LABEL_294;
                      }
                      else
                      {
                        if (v281 != 43)
                          goto LABEL_294;
                        if (!sub_1C4D89F84((uint64_t)&v426, *((unsigned __int8 **)v111 - 8)))
                          goto LABEL_294;
                        v282 = (_QWORD **)*((_QWORD *)v111 - 4);
                        if (!v282)
                          goto LABEL_294;
                      }
                      *(_QWORD *)v428 = v282;
                      v308 = (const void **)v434;
                      v309 = (uint64_t ***)v436[0];
                      v310 = *((unsigned int *)v434 + 2);
                      LODWORD(v427) = v310;
                      if (v310 > 0x40)
                      {
                        v426 = operator new[]();
                        memcpy((void *)v426, *v308, ((v310 + 63) >> 3) & 0x3FFFFFF8);
                      }
                      else
                      {
                        v426 = *(_QWORD *)v434;
                      }
                      v315 = sub_1C47EE5B8(v309, v310);
                      sub_1C4888094((uint64_t)&v426, v315);
                      v221 = llvm::ConstantInt::get((llvm::ConstantInt **)v113, (llvm::Type *)&v426, v316);
                      if (v427 >= 0x41 && v426)
                        MEMORY[0x1CAA32F9C](v426, 0x1000C8000313F17);
                      v317 = *(_QWORD *)(a1 + 24);
                      LOWORD(v430) = 257;
                      v222 = sub_1C506E874(v317, (uint64_t)v435, v112, (uint64_t)&v426, 0, 0);
                      LOWORD(v430) = 257;
                      v223 = (char *)operator new(0x80uLL);
                      *((_QWORD *)v223 + 5) = 0;
                      v224 = v223 + 40;
                      *((_QWORD *)v223 + 6) = 0;
                      *((_QWORD *)v223 + 8) = *v221;
                      v8 = (uint64_t ***)(v223 + 64);
                      *((_QWORD *)v223 + 3) = v223 + 64;
                      *((_QWORD *)v223 + 7) = v223 + 64;
                      *((_QWORD *)v223 + 9) = 0;
                      v225 = 43;
                      goto LABEL_426;
                    }
                    if (*(_WORD *)(v268 + 18) != 28)
                      goto LABEL_352;
                    v371 = (llvm::Constant **)(v268 - 32 * (*(_DWORD *)(v268 + 20) & 0x7FFFFFF));
                    v372 = *v371;
                    v373 = *((_QWORD *)*v371 + 1);
                    if (!v373 || *(_QWORD *)(v373 + 8))
                      goto LABEL_352;
                    v374 = *((unsigned __int8 *)v372 + 16);
                    if (v374 >= 0x1C)
                    {
                      if ((v374 & 0xFE) != 0x36)
                        goto LABEL_352;
                      v375 = *((_DWORD *)v372 + 5);
                      if ((v375 & 0x40000000) != 0)
                      {
                        v389 = (char *)*((_QWORD *)v372 - 1);
                        goto LABEL_554;
                      }
                    }
                    else
                    {
                      if (v374 != 5 || (*((_WORD *)v372 + 9) & 0xFFFE) != 0x1A)
                        goto LABEL_352;
                      v375 = *((_DWORD *)v372 + 5);
                    }
                    v389 = (char *)v372 - 32 * (v375 & 0x7FFFFFF);
LABEL_554:
                    if (*((_QWORD *)v389 + 4) == v112
                      && (sub_1C4D8A004((uint64_t)&v428, v371[4]) & 1) != 0)
                    {
                      goto LABEL_447;
                    }
                    goto LABEL_352;
                  }
                }
                else
                {
                  if (v65 != 54)
                    goto LABEL_95;
                  if (!sub_1C4D9ED34((uint64_t)&v426, *(llvm::Constant **)(v64 - 64)))
                    goto LABEL_95;
                  v66 = *(llvm **)(v64 - 32);
                  if (!v66)
                    goto LABEL_95;
                }
                *v427 = v66;
                goto LABEL_96;
              }
            }
            else
            {
              if (v58 != 54)
                goto LABEL_82;
              if (!sub_1C4D9ED34((uint64_t)&v426, *(llvm::Constant **)(v57 - 64)))
                goto LABEL_82;
              v59 = *(llvm **)(v57 - 32);
              if (!v59)
                goto LABEL_82;
            }
            *v427 = v59;
            goto LABEL_83;
          }
          if (*((_WORD *)v420 + 9) != 28)
            goto LABEL_138;
          v60 = *((_QWORD *)v420 - 4 * (*((_DWORD *)v420 + 5) & 0x7FFFFFF));
          v61 = *(unsigned __int8 *)(v60 + 16);
          if (v61 == 5)
          {
            if (*(_WORD *)(v60 + 18) != 26
              || !sub_1C4D9EED4((uint64_t)&v426, *(llvm::Constant **)(v60 - 32 * (*(_DWORD *)(v60 + 20) & 0x7FFFFFF)))|| (v62 = *(llvm **)(v60 - 32 * (*(_DWORD *)(v60 + 20) & 0x7FFFFFF) + 32)) == 0)
            {
LABEL_102:
              if (sub_1C581925C((uint64_t)&v428, 26, v60))
                goto LABEL_103;
              v67 = ((_QWORD *)v55 - 4 * (*((_DWORD *)v55 + 5) & 0x7FFFFFF))[4];
              v68 = *(unsigned __int8 *)(v67 + 16);
              if (v68 == 5)
              {
                if (*(_WORD *)(v67 + 18) != 26
                  || !sub_1C4D9EED4((uint64_t)&v426, *(llvm::Constant **)(v67 - 32 * (*(_DWORD *)(v67 + 20) & 0x7FFFFFF)))|| (v69 = *(llvm **)(v67 - 32 * (*(_DWORD *)(v67 + 20) & 0x7FFFFFF) + 32)) == 0)
                {
LABEL_113:
                  if (!sub_1C581925C((uint64_t)&v428, 26, v67))
                    goto LABEL_138;
LABEL_114:
                  v63 = (unsigned __int8 *)*((_QWORD *)v55 - 4 * (*((_DWORD *)v55 + 5) & 0x7FFFFFF));
                  if (!v63)
                    goto LABEL_138;
                  goto LABEL_115;
                }
              }
              else
              {
                if (v68 != 54)
                  goto LABEL_113;
                if (!sub_1C4D9ED34((uint64_t)&v426, *(llvm::Constant **)(v67 - 64)))
                  goto LABEL_113;
                v69 = *(llvm **)(v67 - 32);
                if (!v69)
                  goto LABEL_113;
              }
              *v427 = v69;
              goto LABEL_114;
            }
          }
          else
          {
            if (v61 != 54)
              goto LABEL_102;
            if (!sub_1C4D9ED34((uint64_t)&v426, *(llvm::Constant **)(v60 - 64)))
              goto LABEL_102;
            v62 = *(llvm **)(v60 - 32);
            if (!v62)
              goto LABEL_102;
          }
          *v427 = v62;
LABEL_103:
          v63 = (unsigned __int8 *)((_QWORD *)v55 - 4 * (*((_DWORD *)v55 + 5) & 0x7FFFFFF))[4];
          goto LABEL_115;
        }
      }
      else
      {
        if (v29 != 56)
          goto LABEL_65;
        v30 = *((_QWORD *)v420 - 8);
        if (sub_1C57BF5E8((uint64_t)&v426, 13, v30) || sub_1C584BCA0((uint64_t)&v429, v30, v31))
        {
          v32 = (unsigned __int8 *)*((_QWORD *)v28 - 4);
          if (v32)
            goto LABEL_54;
          v33 = 0;
        }
        else
        {
          v33 = *((_QWORD *)v28 - 4);
        }
        if (!sub_1C57BF5E8((uint64_t)&v426, 13, v33) && !sub_1C584BCA0((uint64_t)&v429, v33, v37))
          goto LABEL_65;
        v32 = (unsigned __int8 *)*((_QWORD *)v28 - 8);
        if (!v32)
          goto LABEL_65;
      }
LABEL_54:
      *v432 = v32;
      v39 = v434;
      v426 = (unint64_t)&v434;
      v427 = &v434;
      v40 = sub_1C4B0378C((_QWORD **)&v426, (uint64_t)v434);
      if (v39 && (v40 & 1) == 0)
        *v427 = v39;
      if (!canTryToConstantAddTwoShiftAmounts((llvm::Value *)a2, v436[0], (llvm::Type **)v420, v434))
        goto LABEL_167;
      v41 = (unsigned __int8 *)sub_1C4E62AE0(v434, v436[0], 0, 0, (uint64_t)v423, (llvm::DSOLocalEquivalent **)3);
      if (!v41)
        goto LABEL_167;
      v42 = (llvm::Constant *)v41;
      if (v41[16] > 0x14u)
        goto LABEL_167;
      v43 = *(llvm::ConstantInt **)v41;
      if ((*(_DWORD *)(*(_QWORD *)v41 + 8) & 0xFE) == 0x12)
        v43 = (llvm::ConstantInt *)**((_QWORD **)v43 + 2);
      v44 = v24;
      if ((*((_DWORD *)v24 + 2) & 0xFE) == 0x12)
        v44 = (llvm::Type *)**((_QWORD **)v24 + 2);
      v45 = llvm::Type::getPrimitiveSizeInBits(v44);
      v46 = llvm::ConstantInt::get(v43, v45, 0);
      v48 = llvm::Constant::replaceUndefsWith(v42, (llvm::Constant *)v46, v47);
      v49 = sub_1C537D3B8((llvm *)0x27, (uint64_t)v48, v24, 0);
      v51 = llvm::Constant::getAllOnesValue(v24, v50);
      v52 = (llvm::Constant **)llvm::ConstantExpr::getShl(v51, v49, 0, 0);
      LShr = llvm::ConstantExpr::getNot(v52, v53);
      goto LABEL_127;
    }
  }
  return (llvm::UndefValue **)v8;
}

llvm::UndefValue **sub_1C5848420(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  llvm::Constant *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  llvm::Value **v9;
  uint64_t ***v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  llvm::Type *v15;
  llvm::APInt *v16;
  uint64_t v17;
  llvm::Type *v18;
  unsigned int PrimitiveSizeInBits;
  int8x8_t v20;
  unsigned int v21;
  uint64_t v22;
  uint8x8_t v23;
  unsigned int v24;
  int v26;
  uint64_t v27;
  llvm::APInt *v28;
  unsigned int v29;
  llvm::APInt *v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  llvm::Value **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  llvm::Value **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Value **v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  llvm::Type *v61;
  const char *v62;
  unsigned int v63;
  const char *v64;
  unsigned int v65;
  uint64_t v66;
  llvm::ConstantInt **v67;
  uint64_t v68;
  llvm::Value **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void **p_src;
  uint64_t v75;
  uint64_t v76;
  llvm::ConstantInt *v77;
  int v78;
  llvm::Type *v79;
  int v80;
  unsigned int v81;
  const llvm::APInt *v82;
  llvm::Type *v83;
  uint64_t *v84;
  llvm::ConstantInt **v85;
  llvm::Value **NullValue;
  const char *v87;
  unsigned int v88;
  const char *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  llvm::ConstantInt **v95;
  llvm::Type *v96;
  llvm::Value **v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  llvm::APInt *v105;
  uint64_t v106;
  llvm::ConstantInt **v107;
  llvm::Value **v108;
  char *v109;
  llvm::Value **v110;
  llvm::ConstantInt *v111;
  _QWORD *v112;
  llvm::ConstantInt *v113;
  llvm::Value *v114;
  _QWORD *v115;
  llvm::Value *v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  llvm::ConstantInt **v121;
  llvm::Value **v122;
  _QWORD *v123;
  llvm::ConstantInt **v124;
  char *v125;
  llvm::ConstantInt **v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  llvm::ConstantInt *v130;
  _QWORD *v131;
  llvm::ConstantInt *v132;
  void **v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  llvm::ConstantInt **v140;
  llvm::Value **v141;
  int v142;
  unsigned __int8 *v143;
  uint64_t v144;
  int v145;
  llvm::ConstantInt **v146;
  char *v147;
  char *v148;
  llvm::Value **v149;
  llvm::ConstantInt *v150;
  _QWORD *v151;
  llvm::ConstantInt *v152;
  llvm::Value *v153;
  _QWORD *v154;
  llvm::Value *v155;
  char v156;
  llvm::ConstantInt **v157;
  char *v158;
  llvm::Value **v159;
  llvm::ConstantInt *v160;
  _QWORD *v161;
  llvm::ConstantInt *v162;
  llvm::Value *v163;
  _QWORD *v164;
  llvm::Value *v165;
  llvm::ConstantInt **v166;
  const llvm::APInt *v167;
  llvm::Value **v168;
  char *v169;
  llvm::Value **v170;
  llvm::ConstantInt *v171;
  _QWORD *v172;
  llvm::ConstantInt *v173;
  int v174;
  unsigned __int8 *v175;
  int v176;
  unsigned __int8 *v177;
  llvm::ConstantInt ***v178;
  uint64_t v179;
  llvm::ConstantInt ***v180;
  uint64_t v181;
  llvm::ConstantInt *v182;
  llvm::Type *v183;
  llvm::APInt *v184;
  unsigned int v185;
  llvm::APInt *v186;
  uint64_t v187;
  unsigned int v188;
  const void **v189;
  uint64_t v190;
  uint64_t v191;
  uint8x8_t v192;
  int v193;
  unint64_t v194;
  int8x8_t *v195;
  int8x8_t v196;
  uint8x8_t v197;
  unsigned int v198;
  int v199;
  _BOOL4 v200;
  llvm::ConstantInt **v201;
  const void **v202;
  uint64_t v203;
  uint64_t v204;
  llvm::APInt *v205;
  unsigned int v206;
  unint64_t v207;
  unint64_t v208;
  llvm::APInt *v209;
  const llvm::APInt *v210;
  uint64_t v211;
  void *v212;
  BOOL v213;
  int v214;
  llvm::ConstantInt **v215;
  llvm::Value **v216;
  char *v217;
  char *v218;
  llvm::Value ***v219;
  llvm::ConstantInt *v220;
  _QWORD *v221;
  llvm::ConstantInt *v222;
  llvm::Value *v223;
  llvm::Value ****v224;
  llvm::Value *v225;
  char v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  llvm::ConstantInt *v231;
  int v232;
  uint64_t v233;
  uint64_t *v234;
  llvm::ConstantInt **UnaryIntrinsic;
  uint64_t v236;
  _BOOL4 IsZero;
  uint64_t v238;
  int v240;
  uint64_t v241;
  unsigned __int8 *v242;
  uint64_t *v243;
  llvm::ValueHandleBase *AllOnesValue;
  uint64_t v245;
  _QWORD *v246;
  char *v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  size_t v253;
  const llvm::APInt *v254;
  llvm::Value **v255;
  char *v256;
  llvm::Value **v257;
  llvm::ConstantInt *v258;
  _QWORD *v259;
  llvm::ConstantInt *v260;
  llvm::Value *v261;
  _QWORD *v262;
  llvm::Value *v263;
  void *v264;
  uint64_t v265;
  _QWORD *v266;
  unsigned int v267;
  llvm::ConstantInt ***v268;
  llvm::ConstantInt ***v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  llvm::ConstantInt **v273;
  char *v274;
  llvm::ConstantInt ***v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  llvm::ConstantInt *v280;
  llvm::ConstantInt ****v281;
  llvm::ConstantInt *v282;
  llvm::APInt *v283;
  unsigned int v284;
  unint64_t v285;
  int v286;
  int v287;
  const llvm::APInt *v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  llvm::Value *v292;
  _QWORD *v293;
  llvm::Value *v294;
  uint64_t v295;
  llvm::Value **v296;
  unsigned __int8 *v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned __int8 **v303;
  unsigned __int8 *v304;
  int v305;
  int v306;
  const void *v307;
  unint64_t v308;
  unsigned __int8 *v309;
  char *v310;
  void *v311;
  void *v312;
  unint64_t v313;
  unint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  llvm::ConstantInt **v319;
  unsigned int v320;
  char v321;
  unsigned int v322;
  void *v323;
  unsigned int v324;
  uint64_t v325;
  unsigned int v326;
  llvm::APInt *v327;
  void *__src;
  unsigned int v329;
  __int16 v330;
  uint64_t v331;
  llvm::APInt *v332;
  llvm::ConstantInt **v333;
  llvm::APInt *v334;
  void *__s2[2];
  __int128 v336;
  unsigned __int8 *v337;
  uint64_t v338;

  v4 = *((_QWORD *)a2 - 8);
  v5 = (llvm::Constant *)*((_QWORD *)a2 - 4);
  v6 = (a2[17] >> 1) & 1;
  v7 = *(_OWORD *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)__s2 = *(_OWORD *)(a1 + 88);
  v336 = v8;
  v338 = *((_QWORD *)&v7 + 1);
  v337 = a2;
  v9 = sub_1C4E63C38(v4, v5, v6, (uint64_t)__s2, (llvm::DSOLocalEquivalent **)3);
  if (v9)
    return sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v9);
  v11 = (uint64_t ***)sub_1C57826B8(a1, a2);
  if (v11)
    return (llvm::UndefValue **)v11;
  v11 = (uint64_t ***)sub_1C58443C8(a1, a2);
  if (v11)
    return (llvm::UndefValue **)v11;
  v12 = *((_QWORD *)a2 - 8);
  v13 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  v14 = *(_QWORD *)a2;
  v334 = 0;
  __s2[0] = &v334;
  __s2[1] = 0;
  if (!sub_1C4D89F84((uint64_t)__s2, v13))
    goto LABEL_317;
  v16 = v334;
  if (*((_DWORD *)v334 + 2) >= 0x41u)
    v16 = *(llvm::APInt **)v334;
  v17 = *(_QWORD *)v16;
  v18 = (llvm::Type *)v14;
  if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
    v18 = **(llvm::Type ***)(v14 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v18);
  v21 = PrimitiveSizeInBits;
  if (*(_BYTE *)(v12 + 16) == 84)
  {
    v22 = *(_QWORD *)(v12 - 32);
    if (v22)
    {
      if (!*(_BYTE *)(v22 + 16) && *(_QWORD *)(v22 + 24) == *(_QWORD *)(v12 + 72))
      {
        v40 = (*(_BYTE *)(v22 + 33) & 0x20) != 0 ? v12 : 0;
        if (v40 && PrimitiveSizeInBits)
        {
          v20.i32[0] = PrimitiveSizeInBits;
          v23 = (uint8x8_t)vcnt_s8(v20);
          v23.i16[0] = vaddlv_u8(v23);
          v24 = __clz(PrimitiveSizeInBits) ^ 0x1F;
          if (v23.i32[0] <= 1u && v24 == (_DWORD)v17)
          {
            v33 = *(_DWORD *)(*(_QWORD *)(v40 - 32) + 36);
            if ((v33 - 52) <= 2)
            {
              if (v33 == 53)
                v34 = -1;
              else
                v34 = 0;
              v35 = llvm::ConstantInt::get((llvm::ConstantInt *)v14, v34, (const llvm::APInt *)1);
              v36 = *(_QWORD *)(a1 + 24);
              v37 = *(_QWORD *)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF));
              LOWORD(v337) = 257;
              v38 = sub_1C4774B48(v36, 32, v37, (uint64_t)v35, (uint64_t)__s2);
              v39 = (char *)operator new(0x60uLL);
              *((_DWORD *)v39 + 13) = *((_DWORD *)v39 + 13) & 0x38000000 | 1;
              v11 = (uint64_t ***)(v39 + 32);
              *(_QWORD *)v39 = 0;
              *((_QWORD *)v39 + 1) = 0;
              *((_QWORD *)v39 + 2) = 0;
              *((_QWORD *)v39 + 3) = v39 + 32;
              LOWORD(v337) = 257;
              goto LABEL_84;
            }
          }
        }
      }
    }
  }
  v332 = 0;
  v333 = 0;
  __s2[0] = &v333;
  __s2[1] = &v332;
  *(_QWORD *)&v336 = 0;
  v26 = *(unsigned __int8 *)(v12 + 16);
  if (v26 != 5)
  {
    if (v26 != 53)
      goto LABEL_55;
    if (!*(_QWORD *)(v12 - 64))
      goto LABEL_55;
    v333 = *(llvm::ConstantInt ***)(v12 - 64);
    if ((sub_1C4D89F84((uint64_t)&__s2[1], *(unsigned __int8 **)(v12 - 32)) & 1) == 0)
      goto LABEL_55;
LABEL_29:
    v28 = v332;
    v29 = *((_DWORD *)v332 + 2);
    v30 = v332;
    if (v29 >= 0x41)
    {
      if (v29 - llvm::APInt::countLeadingZerosSlowCase(v332) > 0x40)
        goto LABEL_55;
      v30 = *(llvm::APInt **)v28;
    }
    if (*(_QWORD *)v30 >= (unint64_t)v21)
      goto LABEL_55;
    v31 = *((_DWORD *)v28 + 2);
    if (v31 >= 0x41)
    {
      v41 = llvm::APInt::countLeadingZerosSlowCase(v28);
      v32 = **(_QWORD **)v28;
      if (v31 - v41 >= 0x41)
        goto LABEL_52;
    }
    else
    {
      v32 = *(_QWORD *)v28;
    }
    if (v32 < v17)
    {
      v42 = llvm::ConstantInt::get((llvm::ConstantInt *)v14, (v17 - v32), 0);
      if ((*(_BYTE *)(v12 + 17) & 2) == 0)
      {
        v43 = *(_QWORD *)(v12 + 8);
        if (!v43 || *(_QWORD *)(v43 + 8))
          goto LABEL_55;
        v44 = *(_QWORD *)(a1 + 24);
        LOWORD(v337) = 257;
        v45 = sub_1C506ED1C(v44, (uint64_t)v333, (uint64_t)v42, (uint64_t)__s2, (a2[17] >> 1) & 1);
        goto LABEL_349;
      }
      v157 = v333;
      LOWORD(v337) = 257;
      v158 = (char *)operator new(0x80uLL);
      v148 = v158;
      *((_QWORD *)v158 + 5) = 0;
      v159 = (llvm::Value **)(v158 + 40);
      *((_QWORD *)v158 + 6) = 0;
      *((_QWORD *)v158 + 8) = *v157;
      v11 = (uint64_t ***)(v158 + 64);
      *((_QWORD *)v158 + 3) = v158 + 64;
      *((_QWORD *)v158 + 7) = v158 + 64;
      *((_QWORD *)v158 + 9) = 0;
      v158[80] = 54;
      v158[81] = 0;
      *((_WORD *)v158 + 41) = 0;
      *((_DWORD *)v158 + 21) = 2;
      *(_OWORD *)(v158 + 88) = 0u;
      *(_OWORD *)(v158 + 104) = 0u;
      *((_DWORD *)v158 + 30) = 0;
      *(_QWORD *)v158 = v157;
      v162 = v157[1];
      v161 = v157 + 1;
      v160 = v162;
      *((_QWORD *)v158 + 1) = v162;
      if (v162)
        *((_QWORD *)v160 + 2) = v158 + 8;
      *((_QWORD *)v158 + 2) = v161;
      *v161 = v158;
      *((_QWORD *)v158 + 4) = v42;
      if (v42)
      {
        v165 = v42[1];
        v164 = v42 + 1;
        v163 = v165;
        *v159 = v165;
        if (v165)
          *((_QWORD *)v163 + 2) = v159;
        *((_QWORD *)v158 + 6) = v164;
        *v164 = v158 + 32;
      }
      llvm::Value::setName((uint64_t ***)v158 + 8, (uint64_t)__s2);
      v156 = v148[81] & 0xFD | a2[17] & 2;
      goto LABEL_199;
    }
    if (v32 <= v17)
    {
      v329 = v21;
      if (v21 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      else
        __src = 0;
      sub_1C4912E54(&__src, 0, v21 - v17);
      v166 = v333;
      v168 = llvm::ConstantInt::get((llvm::ConstantInt **)v14, (llvm::Type *)&__src, v167);
      LOWORD(v337) = 257;
      v169 = (char *)operator new(0x80uLL);
      *((_QWORD *)v169 + 5) = 0;
      v170 = (llvm::Value **)(v169 + 40);
      *((_QWORD *)v169 + 6) = 0;
      *((_QWORD *)v169 + 8) = *v166;
      v11 = (uint64_t ***)(v169 + 64);
      *((_QWORD *)v169 + 3) = v169 + 64;
      *((_QWORD *)v169 + 7) = v169 + 64;
      *((_QWORD *)v169 + 9) = 0;
      v169[80] = 56;
      v169[81] = 0;
      *((_WORD *)v169 + 41) = 0;
      *((_DWORD *)v169 + 21) = 2;
      *(_OWORD *)(v169 + 88) = 0u;
      *(_OWORD *)(v169 + 104) = 0u;
      *((_DWORD *)v169 + 30) = 0;
      *(_QWORD *)v169 = v166;
      v173 = v166[1];
      v172 = v166 + 1;
      v171 = v173;
      *((_QWORD *)v169 + 1) = v173;
      if (v173)
        *((_QWORD *)v171 + 2) = v169 + 8;
      *((_QWORD *)v169 + 2) = v172;
      *v172 = v169;
LABEL_383:
      *((_QWORD *)v169 + 4) = v168;
      if (v168)
      {
        v294 = v168[1];
        v293 = v168 + 1;
        v292 = v294;
        *v170 = v294;
        if (v294)
          *((_QWORD *)v292 + 2) = v170;
        *((_QWORD *)v169 + 6) = v293;
        *v293 = v169 + 32;
      }
      llvm::Value::setName(v11, (uint64_t)__s2);
      if (v329 < 0x41)
        return (llvm::UndefValue **)v11;
      v264 = __src;
      if (!__src)
        return (llvm::UndefValue **)v11;
LABEL_389:
      MEMORY[0x1CAA32F9C](v264, 0x1000C8000313F17);
      return (llvm::UndefValue **)v11;
    }
LABEL_52:
    v46 = llvm::ConstantInt::get((llvm::ConstantInt *)v14, (v32 - v17), 0);
    if ((*(_BYTE *)(v12 + 17) & 2) == 0)
    {
      v47 = *(_QWORD *)(v12 + 8);
      if (!v47 || *(_QWORD *)(v47 + 8))
        goto LABEL_55;
      v265 = *(_QWORD *)(a1 + 24);
      LOWORD(v337) = 257;
      v45 = sub_1C506E874(v265, (uint64_t)v333, (uint64_t)v46, (uint64_t)__s2, 0, 0);
LABEL_349:
      v266 = (_QWORD *)v45;
      v267 = v21 - v17;
LABEL_377:
      v329 = v21;
      if (v21 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      else
        __src = 0;
      sub_1C4912E54(&__src, 0, v267);
      goto LABEL_380;
    }
    v146 = v333;
    LOWORD(v337) = 257;
    v147 = (char *)operator new(0x80uLL);
    v148 = v147;
    *((_QWORD *)v147 + 5) = 0;
    v149 = (llvm::Value **)(v147 + 40);
    *((_QWORD *)v147 + 6) = 0;
    *((_QWORD *)v147 + 8) = *v146;
    v11 = (uint64_t ***)(v147 + 64);
    *((_QWORD *)v147 + 3) = v147 + 64;
    *((_QWORD *)v147 + 7) = v147 + 64;
    *((_QWORD *)v147 + 9) = 0;
    v147[80] = 53;
    v147[81] = 0;
    *((_WORD *)v147 + 41) = 0;
    *((_DWORD *)v147 + 21) = 2;
    *(_OWORD *)(v147 + 88) = 0u;
    *(_OWORD *)(v147 + 104) = 0u;
    *((_DWORD *)v147 + 30) = 0;
    *(_QWORD *)v147 = v146;
    v152 = v146[1];
    v151 = v146 + 1;
    v150 = v152;
    *((_QWORD *)v147 + 1) = v152;
    if (v152)
      *((_QWORD *)v150 + 2) = v147 + 8;
    *((_QWORD *)v147 + 2) = v151;
    *v151 = v147;
    *((_QWORD *)v147 + 4) = v46;
    if (v46)
    {
      v155 = v46[1];
      v154 = v46 + 1;
      v153 = v155;
      *v149 = v155;
      if (v155)
        *((_QWORD *)v153 + 2) = v149;
      *((_QWORD *)v147 + 6) = v154;
      *v154 = v147 + 32;
    }
    llvm::Value::setName((uint64_t ***)v147 + 8, (uint64_t)__s2);
    v156 = v148[81] | 2;
LABEL_199:
    v148[81] = v156;
    return (llvm::UndefValue **)v11;
  }
  if (*(_WORD *)(v12 + 18) == 25)
  {
    v27 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
    if (*(_QWORD *)v27)
    {
      v333 = *(llvm::ConstantInt ***)v27;
      if (sub_1C4D8A004((uint64_t)&__s2[1], *(llvm::Constant **)(v27 + 32)))
        goto LABEL_29;
    }
  }
LABEL_55:
  v331 = 0;
  v48 = *(_QWORD *)(v12 + 8);
  if (!v48 || *(_QWORD *)(v48 + 8))
    goto LABEL_85;
  v49 = *(unsigned __int8 *)(v12 + 16);
  if (v49 == 5)
  {
    if (*(_WORD *)(v12 + 18) != 13)
      goto LABEL_72;
    v56 = (uint64_t *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
    v57 = *v56;
    v58 = *(_QWORD *)(*v56 + 8);
    if (!v58 || *(_QWORD *)(v58 + 8))
    {
LABEL_70:
      v59 = v56[4];
      v60 = *(_QWORD *)(v59 + 8);
      if (!v60 || *(_QWORD *)(v60 + 8))
        goto LABEL_72;
      v176 = *(unsigned __int8 *)(v59 + 16);
      if (v176 == 5)
      {
        if (*(_WORD *)(v59 + 18) != 25)
          goto LABEL_72;
        v269 = (llvm::ConstantInt ***)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF));
        if (!*v269)
          goto LABEL_72;
        v333 = *v269;
        v177 = (unsigned __int8 *)v269[4];
      }
      else
      {
        if (v176 != 53 || !*(_QWORD *)(v59 - 64))
          goto LABEL_72;
        v333 = *(llvm::ConstantInt ***)(v59 - 64);
        v177 = *(unsigned __int8 **)(v59 - 32);
      }
      if (v13 != v177)
        goto LABEL_72;
      v179 = *v56;
      if (!*v56)
        goto LABEL_72;
LABEL_361:
      v331 = v179;
      v270 = *(_QWORD *)(a1 + 24);
      LOWORD(v337) = 257;
      v271 = (_QWORD *)sub_1C506ED1C(v270, v179, (uint64_t)v13, (uint64_t)__s2, 0);
      v272 = *(_QWORD *)(a1 + 24);
      v273 = v333;
      v330 = 257;
      v266 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *, llvm::ConstantInt **, _QWORD, _QWORD))(**(_QWORD **)(v272 + 72) + 16))(*(_QWORD *)(v272 + 72), v271, v333, 0, 0);
      if (!v266)
      {
        LOWORD(v337) = 257;
        v274 = (char *)operator new(0x80uLL);
        *((_QWORD *)v274 + 4) = 0;
        v275 = (llvm::ConstantInt ***)(v274 + 32);
        *((_QWORD *)v274 + 5) = 0;
        *((_QWORD *)v274 + 6) = 0;
        *((_QWORD *)v274 + 8) = *v271;
        v276 = (uint64_t)(v274 + 64);
        *((_QWORD *)v274 + 3) = v274 + 64;
        *((_QWORD *)v274 + 7) = v274 + 64;
        *((_QWORD *)v274 + 9) = 0;
        v274[80] = 41;
        v274[81] = 0;
        *((_WORD *)v274 + 41) = 0;
        *((_DWORD *)v274 + 21) = 2;
        *(_OWORD *)(v274 + 88) = 0u;
        *(_OWORD *)(v274 + 104) = 0u;
        *((_DWORD *)v274 + 30) = 0;
        *(_QWORD *)v274 = v271;
        v279 = v271[1];
        v278 = v271 + 1;
        v277 = v279;
        *((_QWORD *)v274 + 1) = v279;
        if (v279)
          *(_QWORD *)(v277 + 16) = v274 + 8;
        *((_QWORD *)v274 + 2) = v278;
        *v278 = v274;
        if (*((_QWORD *)v274 + 4))
        {
          **((_QWORD **)v274 + 6) = *((_QWORD *)v274 + 5);
          v317 = *((_QWORD *)v274 + 5);
          if (v317)
            *(_QWORD *)(v317 + 16) = *((_QWORD *)v274 + 6);
        }
        *v275 = v273;
        if (v273)
        {
          v282 = v273[1];
          v281 = (llvm::ConstantInt ****)(v273 + 1);
          v280 = v282;
          *((_QWORD *)v274 + 5) = v282;
          if (v282)
            *((_QWORD *)v280 + 2) = v274 + 40;
          *((_QWORD *)v274 + 6) = v281;
          *v281 = v275;
        }
        llvm::Value::setName((uint64_t ***)v274 + 8, (uint64_t)__s2);
        v266 = (_QWORD *)sub_1C4773754((uint64_t *)v272, v276, (uint64_t)&__src);
      }
      v283 = v334;
      v284 = *((_DWORD *)v334 + 2);
      if (v284 >= 0x41)
      {
        v286 = llvm::APInt::countLeadingZerosSlowCase(v334);
        v287 = v21;
        if (v284 - v286 > 0x40)
        {
LABEL_376:
          v267 = v21 - v287;
          goto LABEL_377;
        }
        v285 = **(_QWORD **)v283;
      }
      else
      {
        v285 = *(_QWORD *)v334;
      }
      v287 = v21;
      if (v285 <= v21)
        v287 = v285;
      goto LABEL_376;
    }
    v174 = *(unsigned __int8 *)(v57 + 16);
    if (v174 == 5)
    {
      if (*(_WORD *)(v57 + 18) != 25)
        goto LABEL_70;
      v268 = (llvm::ConstantInt ***)(v57 - 32 * (*(_DWORD *)(v57 + 20) & 0x7FFFFFF));
      if (!*v268)
        goto LABEL_70;
      v333 = *v268;
      v175 = (unsigned __int8 *)v268[4];
    }
    else
    {
      if (v174 != 53 || !*(_QWORD *)(v57 - 64))
        goto LABEL_70;
      v333 = *(llvm::ConstantInt ***)(v57 - 64);
      v175 = *(unsigned __int8 **)(v57 - 32);
    }
    if (v13 == v175)
    {
      v179 = v56[4];
      if (v179)
        goto LABEL_361;
    }
    goto LABEL_70;
  }
  if (v49 != 41)
    goto LABEL_72;
  v50 = *(_QWORD *)(v12 - 64);
  v51 = *(_QWORD *)(v50 + 8);
  if (v51 && !*(_QWORD *)(v51 + 8))
  {
    v142 = *(unsigned __int8 *)(v50 + 16);
    if (v142 == 5)
    {
      if (*(_WORD *)(v50 + 18) != 25)
        goto LABEL_61;
      v178 = (llvm::ConstantInt ***)(v50 - 32 * (*(_DWORD *)(v50 + 20) & 0x7FFFFFF));
      if (!*v178)
        goto LABEL_61;
      v333 = *v178;
      v143 = (unsigned __int8 *)v178[4];
    }
    else
    {
      if (v142 != 53 || !*(_QWORD *)(v50 - 64))
        goto LABEL_61;
      v333 = *(llvm::ConstantInt ***)(v50 - 64);
      v143 = *(unsigned __int8 **)(v50 - 32);
    }
    if (v13 == v143)
    {
      v179 = *(_QWORD *)(v12 - 32);
      if (v179)
        goto LABEL_361;
    }
  }
LABEL_61:
  v52 = *(_QWORD *)(v12 - 32);
  v53 = *(_QWORD *)(v52 + 8);
  if (!v53 || *(_QWORD *)(v53 + 8))
    goto LABEL_72;
  v54 = *(unsigned __int8 *)(v52 + 16);
  if (v54 == 5)
  {
    if (*(_WORD *)(v52 + 18) != 25)
      goto LABEL_72;
    v180 = (llvm::ConstantInt ***)(v52 - 32 * (*(_DWORD *)(v52 + 20) & 0x7FFFFFF));
    if (!*v180)
      goto LABEL_72;
    v333 = *v180;
    v55 = (unsigned __int8 *)v180[4];
  }
  else
  {
    if (v54 != 53 || !*(_QWORD *)(v52 - 64))
      goto LABEL_72;
    v333 = *(llvm::ConstantInt ***)(v52 - 64);
    v55 = *(unsigned __int8 **)(v52 - 32);
  }
  if (v13 == v55)
  {
    v179 = *(_QWORD *)(v12 - 64);
    if (v179)
      goto LABEL_361;
  }
LABEL_72:
  __s2[0] = &v333;
  if (sub_1C4B0378C((_QWORD **)__s2, v12))
  {
    if (*(_BYTE *)(v14 + 8) != 13)
      goto LABEL_80;
    v61 = *v333;
    if (*((_BYTE *)*v333 + 8) == 13)
    {
      v63 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v14);
      if ((_DWORD)v62 == 1)
      v65 = llvm::Type::getPrimitiveSizeInBits(v61);
      if ((_DWORD)v64 == 1)
      if ((sub_1C577D3C0(a1, v63, v65) & 1) != 0)
      {
LABEL_80:
        v66 = *(_QWORD *)(a1 + 24);
        v67 = v333;
        v68 = v17;
LABEL_81:
        LOWORD(v337) = 257;
        v69 = llvm::ConstantInt::get(*v67, v68, 0);
        v70 = v66;
        v71 = (uint64_t)v67;
LABEL_82:
        v72 = sub_1C506ED1C(v70, v71, (uint64_t)v69, (uint64_t)__s2, 0);
LABEL_83:
        v38 = v72;
        v73 = (char *)operator new(0x60uLL);
        *((_DWORD *)v73 + 13) = *((_DWORD *)v73 + 13) & 0x38000000 | 1;
        v11 = (uint64_t ***)(v73 + 32);
        *(_QWORD *)v73 = 0;
        *((_QWORD *)v73 + 1) = 0;
        *((_QWORD *)v73 + 2) = 0;
        *((_QWORD *)v73 + 3) = v73 + 32;
        LOWORD(v337) = 257;
LABEL_84:
        p_src = __s2;
        v75 = (uint64_t)v11;
        v76 = v38;
LABEL_114:
        llvm::ZExtInst::ZExtInst(v75, v76, v14, (uint64_t)p_src, 0);
        return (llvm::UndefValue **)v11;
      }
    }
  }
LABEL_85:
  v322 = v17;
  __s2[0] = &v333;
  if (sub_1C4B037F8((_QWORD **)__s2, v12))
  {
    v77 = *v333;
    v78 = *((_DWORD *)*v333 + 2);
    v79 = *v333;
    if ((v78 & 0xFE) == 0x12)
      v79 = (llvm::Type *)**((_QWORD **)v77 + 2);
    v80 = llvm::Type::getPrimitiveSizeInBits(v79);
    v81 = v80 - 1;
    if (v80 == 1)
    {
      LODWORD(__s2[1]) = v21;
      if (v21 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)__s2, 0, 0);
      else
        __s2[0] = 0;
      sub_1C4912E54(__s2, 0, v21 - v322);
      v84 = (uint64_t *)llvm::ConstantInt::get((llvm::ConstantInt **)v14, (llvm::Type *)__s2, v82);
      if (LODWORD(__s2[1]) >= 0x41 && __s2[0])
        MEMORY[0x1CAA32F9C](__s2[0], 0x1000C8000313F17);
      v85 = v333;
      NullValue = llvm::Constant::getNullValue((llvm::Constant *)v14, v83);
      LOWORD(v337) = 257;
      return (llvm::UndefValue **)sub_1C4FC8748((uint64_t)v85, v84, (uint64_t)NullValue, (uint64_t)__s2, 0, 0);
    }
    if (*(_BYTE *)(v14 + 8) != 13)
      goto LABEL_103;
    if (v78 == 13)
    {
      v88 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v14);
      if ((_DWORD)v87 == 1)
      v90 = llvm::Type::getPrimitiveSizeInBits(v77);
      if ((_DWORD)v89 == 1)
      if (sub_1C577D3C0(a1, v88, v90))
      {
LABEL_103:
        v91 = *(_QWORD *)(v12 + 8);
        if (v91)
        {
          if (!*(_QWORD *)(v91 + 8))
          {
            if (v21 - 1 == v322)
            {
              v66 = *(_QWORD *)(a1 + 24);
              v67 = v333;
              v68 = (v80 - 1);
              goto LABEL_81;
            }
            if (v21 - v80 == v322)
            {
              if (v81 >= v322)
                v138 = v322;
              else
                v138 = v81;
              v139 = *(_QWORD *)(a1 + 24);
              v140 = v333;
              LOWORD(v337) = 257;
              v141 = llvm::ConstantInt::get(*v333, v138, 0);
              v72 = sub_1C534E5D8(v139, (uint64_t)v140, (uint64_t)v141, (uint64_t)__s2, 0);
              goto LABEL_83;
            }
          }
        }
      }
    }
  }
  if (v21 - 1 != v322)
    goto LABEL_121;
  __s2[1] = &v333;
  *(_QWORD *)&v336 = &v333;
  v92 = *(_QWORD *)(v12 + 8);
  if (v92 && !*(_QWORD *)(v92 + 8) && sub_1C584C06C((uint64_t)__s2, v12))
  {
    v93 = (char *)operator new(0x60uLL);
    v11 = (uint64_t ***)(v93 + 32);
    *((_DWORD *)v93 + 13) = *((_DWORD *)v93 + 13) & 0x38000000 | 1;
    *(_QWORD *)v93 = 0;
    *((_QWORD *)v93 + 1) = 0;
    *((_QWORD *)v93 + 2) = 0;
    *((_QWORD *)v93 + 3) = v93 + 32;
    v94 = *(_QWORD *)(a1 + 24);
    v95 = v333;
    LOWORD(v337) = 257;
    v97 = llvm::Constant::getNullValue(*v333, v96);
    v76 = sub_1C4774B48(v94, 33, (uint64_t)v95, (uint64_t)v97, (uint64_t)__s2);
    v330 = 257;
LABEL_113:
    p_src = &__src;
    v75 = (uint64_t)v11;
    goto LABEL_114;
  }
  __s2[0] = &v333;
  __s2[1] = &v331;
  v98 = *(_QWORD *)(v12 + 8);
  if (v98 && !*(_QWORD *)(v98 + 8) && sub_1C57BF450((_QWORD **)__s2, v12))
  {
    v99 = (char *)operator new(0x60uLL);
    *((_DWORD *)v99 + 13) = *((_DWORD *)v99 + 13) & 0x38000000 | 1;
    v11 = (uint64_t ***)(v99 + 32);
    *(_QWORD *)v99 = 0;
    *((_QWORD *)v99 + 1) = 0;
    *((_QWORD *)v99 + 2) = 0;
    *((_QWORD *)v99 + 3) = v99 + 32;
    v100 = *(_QWORD *)(a1 + 24);
    LOWORD(v337) = 257;
    v76 = sub_1C4774B48(v100, 40, (uint64_t)v333, v331, (uint64_t)__s2);
    v330 = 257;
    goto LABEL_113;
  }
  LODWORD(v336) = 64;
  __s2[0] = &v333;
  __s2[1] = (void *)2;
  v101 = *(_QWORD *)(v12 + 8);
  if (!v101)
    goto LABEL_121;
  if (*(_QWORD *)(v101 + 8))
    goto LABEL_117;
  v133 = __s2;
  v134 = *(unsigned __int8 *)(v12 + 16);
  if (v134 != 51)
  {
    if (v134 == 5)
      LOBYTE(v133) = *(_WORD *)(v12 + 18) == 23
                  && (v135 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF), *(_QWORD *)v135)
                  && (v333 = *(llvm::ConstantInt ***)v135,
                      sub_1C4D8A86C((llvm::APInt *)&__s2[1], *(llvm::Constant **)(v135 + 32)));
    v102 = (v134 == 5) & v133;
    goto LABEL_118;
  }
  if (*(_QWORD *)(v12 - 64)
    && (v333 = *(llvm::ConstantInt ***)(v12 - 64),
        sub_1C4D8A7F0((llvm::APInt *)&__s2[1], *(unsigned __int8 **)(v12 - 32))))
  {
    v102 = 1;
  }
  else
  {
LABEL_117:
    v102 = 0;
  }
LABEL_118:
  if (v336 >= 0x41 && __s2[1])
  {
    MEMORY[0x1CAA32F9C](__s2[1], 0x1000C8000313F17);
    if ((v102 & 1) == 0)
      goto LABEL_121;
LABEL_145:
    v120 = *(_QWORD *)(a1 + 24);
    v121 = v333;
    LOWORD(v337) = 257;
    v122 = llvm::ConstantInt::get(*v333, v322, 0);
    v123 = (_QWORD *)sub_1C506ED1C(v120, (uint64_t)v121, (uint64_t)v122, (uint64_t)__s2, 0);
    v124 = v333;
    LOWORD(v337) = 257;
    v125 = (char *)operator new(0x80uLL);
    *((_QWORD *)v125 + 5) = 0;
    v126 = (llvm::ConstantInt **)(v125 + 40);
    *((_QWORD *)v125 + 6) = 0;
    *((_QWORD *)v125 + 8) = *v123;
    v11 = (uint64_t ***)(v125 + 64);
    *((_QWORD *)v125 + 3) = v125 + 64;
    *((_QWORD *)v125 + 7) = v125 + 64;
    *((_QWORD *)v125 + 9) = 0;
    v125[80] = 56;
    v125[81] = 0;
    *((_WORD *)v125 + 41) = 0;
    *((_DWORD *)v125 + 21) = 2;
    *(_OWORD *)(v125 + 88) = 0u;
    *(_OWORD *)(v125 + 104) = 0u;
    *((_DWORD *)v125 + 30) = 0;
    *(_QWORD *)v125 = v123;
    v129 = v123[1];
    v128 = v123 + 1;
    v127 = v129;
    *((_QWORD *)v125 + 1) = v129;
    if (v129)
      *(_QWORD *)(v127 + 16) = v125 + 8;
    *((_QWORD *)v125 + 2) = v128;
    *v128 = v125;
    *((_QWORD *)v125 + 4) = v124;
    if (v124)
    {
      v132 = v124[1];
      v131 = v124 + 1;
      v130 = v132;
      *v126 = v132;
      if (v132)
        *((_QWORD *)v130 + 2) = v126;
      *((_QWORD *)v125 + 6) = v131;
      *v131 = v125 + 32;
    }
    goto LABEL_334;
  }
  if (v102)
    goto LABEL_145;
LABEL_121:
  __s2[0] = &v333;
  __s2[1] = &v332;
  *(_QWORD *)&v336 = 0;
  v103 = *(unsigned __int8 *)(v12 + 16);
  if (v103 == 5)
  {
    if (*(_WORD *)(v12 + 18) != 26)
      goto LABEL_138;
    v104 = v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
    if (!*(_QWORD *)v104)
      goto LABEL_138;
    v333 = *(llvm::ConstantInt ***)v104;
    if ((sub_1C4D8A004((uint64_t)&__s2[1], *(llvm::Constant **)(v104 + 32)) & 1) == 0)
      goto LABEL_138;
  }
  else
  {
    if (v103 != 54)
      goto LABEL_138;
    if (!*(_QWORD *)(v12 - 64))
      goto LABEL_138;
    v333 = *(llvm::ConstantInt ***)(v12 - 64);
    if (!sub_1C4D89F84((uint64_t)&__s2[1], *(unsigned __int8 **)(v12 - 32)))
      goto LABEL_138;
  }
  v105 = v332;
  if (*((_DWORD *)v332 + 2) >= 0x41u)
    v105 = *(llvm::APInt **)v332;
  v106 = *(_DWORD *)v105 + v322;
  if (v106 < v21)
  {
    v107 = v333;
    v108 = llvm::ConstantInt::get((llvm::ConstantInt *)v14, v106, 0);
    LOWORD(v337) = 257;
    v109 = (char *)operator new(0x80uLL);
    *((_QWORD *)v109 + 5) = 0;
    v110 = (llvm::Value **)(v109 + 40);
    *((_QWORD *)v109 + 6) = 0;
    *((_QWORD *)v109 + 8) = *v107;
    v11 = (uint64_t ***)(v109 + 64);
    *((_QWORD *)v109 + 3) = v109 + 64;
    *((_QWORD *)v109 + 7) = v109 + 64;
    *((_QWORD *)v109 + 9) = 0;
    v109[80] = 54;
    v109[81] = 0;
    *((_WORD *)v109 + 41) = 0;
    *((_DWORD *)v109 + 21) = 2;
    *(_OWORD *)(v109 + 88) = 0u;
    *(_OWORD *)(v109 + 104) = 0u;
    *((_DWORD *)v109 + 30) = 0;
    *(_QWORD *)v109 = v107;
    v113 = v107[1];
    v112 = v107 + 1;
    v111 = v113;
    *((_QWORD *)v109 + 1) = v113;
    if (v113)
      *((_QWORD *)v111 + 2) = v109 + 8;
    *((_QWORD *)v109 + 2) = v112;
    *v112 = v109;
    *((_QWORD *)v109 + 4) = v108;
    if (v108)
    {
      v116 = v108[1];
      v115 = v108 + 1;
      v114 = v116;
      *v110 = v116;
      if (v116)
        *((_QWORD *)v114 + 2) = v110;
      *((_QWORD *)v109 + 6) = v115;
      *v115 = v109 + 32;
    }
    goto LABEL_334;
  }
LABEL_138:
  v117 = *(_QWORD *)(v12 + 8);
  if (v117)
  {
    if (!*(_QWORD *)(v117 + 8))
    {
      v118 = *(unsigned __int8 *)(v12 + 16);
      if (v118 > 0x1B || v118 == 5)
      {
        v119 = v118 <= 0x1B ? *(unsigned __int16 *)(v12 + 18) : v118 - 28;
        if (v119 == 38)
        {
          v136 = *(_DWORD *)(v12 + 20);
          v137 = (v136 & 0x40000000) != 0 ? *(uint64_t **)(v12 - 8) : (uint64_t *)(v12 - 32 * (v136 & 0x7FFFFFF));
          v144 = *v137;
          if (*v137)
          {
            if (*(unsigned __int8 *)(v144 + 16) > 0x1Bu)
            {
              __s2[0] = &v333;
              __s2[1] = &v332;
              *(_QWORD *)&v336 = 0;
              v145 = *(unsigned __int8 *)(v144 + 16);
              if (v145 == 5)
              {
                if (*(_WORD *)(v144 + 18) != 26)
                  goto LABEL_239;
                v181 = v144 - 32 * (*(_DWORD *)(v144 + 20) & 0x7FFFFFF);
                if (!*(_QWORD *)v181)
                  goto LABEL_239;
                v333 = *(llvm::ConstantInt ***)v181;
                if ((sub_1C4D8A004((uint64_t)&__s2[1], *(llvm::Constant **)(v181 + 32)) & 1) == 0)
                  goto LABEL_239;
              }
              else
              {
                if (v145 != 54)
                  goto LABEL_239;
                if (!*(_QWORD *)(v144 - 64))
                  goto LABEL_239;
                v333 = *(llvm::ConstantInt ***)(v144 - 64);
                if (!sub_1C4D89F84((uint64_t)&__s2[1], *(unsigned __int8 **)(v144 - 32)))
                  goto LABEL_239;
              }
              v319 = v333;
              v182 = *v333;
              v183 = *v333;
              if ((*((_DWORD *)*v333 + 2) & 0xFE) == 0x12)
                v183 = (llvm::Type *)**((_QWORD **)v182 + 2);
              v320 = llvm::Type::getPrimitiveSizeInBits(v183);
              v184 = v332;
              v185 = *((_DWORD *)v332 + 2);
              v186 = v332;
              if (v185 >= 0x41)
                v186 = *(llvm::APInt **)v332;
              v318 = *(_DWORD *)v186 + v322;
              if (v318 < v320)
              {
                v187 = *(_QWORD *)(v144 + 8);
                if (!v187 || *(_QWORD *)(v187 + 8))
                {
                  if (v185 >= 0x41)
                  {
                    if (v185 - llvm::APInt::countLeadingZerosSlowCase(v332) > 0x40)
                      goto LABEL_390;
                    v184 = *(llvm::APInt **)v184;
                  }
                  if (*(_QWORD *)v184 < (unint64_t)(v320 - v21))
                    goto LABEL_239;
                }
LABEL_390:
                v295 = *(_QWORD *)(a1 + 24);
                __s2[0] = "sum.shift";
                LOWORD(v337) = 259;
                v296 = llvm::ConstantInt::get(v182, v318, 0);
                v297 = (unsigned __int8 *)sub_1C506ED1C(v295, (uint64_t)v319, (uint64_t)v296, (uint64_t)__s2, 0);
                v298 = *(uint64_t **)(a1 + 24);
                if ((a2[23] & 0x10) == 0)
                {
                  v311 = 0;
                  v310 = &byte_1C871356D;
                  goto LABEL_402;
                }
                v299 = ***(_QWORD ***)a2;
                v300 = *(_QWORD *)(v299 + 152);
                v301 = *(unsigned int *)(v299 + 168);
                if ((_DWORD)v301)
                {
                  LODWORD(v302) = (v301 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                  v303 = (unsigned __int8 **)(v300 + 16 * v302);
                  v304 = *v303;
                  if (*v303 == a2)
                  {
LABEL_401:
                    v309 = v303[1];
                    v312 = *(void **)v309;
                    v310 = (char *)(v309 + 16);
                    v311 = v312;
LABEL_402:
                    LOWORD(v337) = 261;
                    __s2[0] = v310;
                    __s2[1] = v311;
                    v266 = sub_1C4773E38(v298, 38, v297, v14, (uint64_t)__s2);
                    LODWORD(__s2[1]) = v21;
                    if (v21 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)__s2, -1, 1);
                      v21 = __s2[1];
                      v329 = __s2[1];
                      if (LODWORD(__s2[1]) > 0x40)
                      {
                        v314 = LODWORD(__s2[1]) + 63;
                        __src = (void *)operator new[]();
                        v315 = __s2[0];
                        memcpy(__src, __s2[0], (v314 >> 3) & 0x3FFFFFF8);
                        llvm::APInt::tcShiftRight((llvm::APInt *)__src, (unint64_t *)(v314 >> 6), v322);
                        if (v315)
                          MEMORY[0x1CAA32F9C](v315, 0x1000C8000313F17);
                        goto LABEL_380;
                      }
                      v313 = (unint64_t)__s2[0];
                    }
                    else
                    {
                      v313 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v21;
                      if (!v21)
                        v313 = 0;
                      v329 = v21;
                    }
                    if (v21 == v322)
                      __src = 0;
                    else
                      __src = (void *)(v313 >> v322);
LABEL_380:
                    v168 = llvm::ConstantInt::get((llvm::ConstantInt **)v14, (llvm::Type *)&__src, v288);
                    LOWORD(v337) = 257;
                    v169 = (char *)operator new(0x80uLL);
                    *((_QWORD *)v169 + 5) = 0;
                    v170 = (llvm::Value **)(v169 + 40);
                    *((_QWORD *)v169 + 6) = 0;
                    *((_QWORD *)v169 + 8) = *v266;
                    v11 = (uint64_t ***)(v169 + 64);
                    *((_QWORD *)v169 + 3) = v169 + 64;
                    *((_QWORD *)v169 + 7) = v169 + 64;
                    *((_QWORD *)v169 + 9) = 0;
                    v169[80] = 56;
                    v169[81] = 0;
                    *((_WORD *)v169 + 41) = 0;
                    *((_DWORD *)v169 + 21) = 2;
                    *(_OWORD *)(v169 + 88) = 0u;
                    *(_OWORD *)(v169 + 104) = 0u;
                    *((_DWORD *)v169 + 30) = 0;
                    *(_QWORD *)v169 = v266;
                    v291 = v266[1];
                    v290 = v266 + 1;
                    v289 = v291;
                    *((_QWORD *)v169 + 1) = v291;
                    if (v291)
                      *(_QWORD *)(v289 + 16) = v169 + 8;
                    *((_QWORD *)v169 + 2) = v290;
                    *v290 = v169;
                    goto LABEL_383;
                  }
                  v305 = 1;
                  while (v304 != (unsigned __int8 *)-4096)
                  {
                    v306 = v302 + v305++;
                    v302 = v306 & (v301 - 1);
                    v304 = *(unsigned __int8 **)(v300 + 16 * v302);
                    if (v304 == a2)
                    {
                      v303 = (unsigned __int8 **)(v300 + 16 * v302);
                      goto LABEL_401;
                    }
                  }
                }
                v303 = (unsigned __int8 **)(v300 + 16 * v301);
                goto LABEL_401;
              }
            }
          }
        }
      }
    }
  }
LABEL_239:
  v327 = 0;
  __s2[0] = &v333;
  __s2[1] = &v327;
  *(_QWORD *)&v336 = 0;
  v188 = v322;
  if (!sub_1C582A658((_QWORD **)__s2, v12))
    goto LABEL_294;
  if (v21 < 3 || 2 * v322 != v21)
    goto LABEL_264;
  v189 = (const void **)v327;
  v326 = *((_DWORD *)v327 + 2);
  if (v326 > 0x40)
  {
    v325 = operator new[]();
    memcpy((void *)v325, *v189, (((unint64_t)v326 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v325 = *(_QWORD *)v327;
  }
  llvm::APInt::operator-=((uint64_t)&v325, 1uLL);
  v190 = v326;
  v191 = v325;
  v326 = 0;
  if (v190 > 0x40)
  {
    v193 = 0;
    v194 = (unint64_t)(v190 + 63) >> 6;
    v195 = (int8x8_t *)v325;
    do
    {
      v196 = *v195++;
      v197 = (uint8x8_t)vcnt_s8(v196);
      v197.i16[0] = vaddlv_u8(v197);
      v193 += v197.i32[0];
      --v194;
    }
    while (v194);
    if (v193 != 1)
    {
      v200 = 0;
      goto LABEL_256;
    }
  }
  else
  {
    v192 = (uint8x8_t)vcnt_s8((int8x8_t)v325);
    v192.i16[0] = vaddlv_u8(v192);
    if (v192.u32[0] != 1)
      goto LABEL_264;
  }
  v198 = *((_DWORD *)v327 + 2);
  if (v198 > 0x40)
    v199 = llvm::APInt::countLeadingZerosSlowCase(v327);
  else
    v199 = v198 + __clz(*(_QWORD *)v327) - 64;
  v200 = v198 + ~v199 == v322;
  if (v190 < 0x41)
  {
LABEL_260:
    if (v200)
      goto LABEL_261;
    goto LABEL_264;
  }
LABEL_256:
  if (!v191)
    goto LABEL_260;
  MEMORY[0x1CAA32F9C](v191, 0x1000C8000313F17);
  if (v326 >= 0x41 && v325)
  {
    MEMORY[0x1CAA32F9C](v325, 0x1000C8000313F17);
    goto LABEL_260;
  }
  if (v200)
  {
LABEL_261:
    v201 = v333;
    v202 = (const void **)v327;
    v203 = *((unsigned int *)v327 + 2);
    v324 = v203;
    if (v203 > 0x40)
    {
      v253 = ((unint64_t)(v203 + 63) >> 3) & 0x3FFFFFF8;
      v323 = (void *)operator new[]();
      memcpy(v323, *v202, v253);
    }
    else
    {
      v323 = *(void **)v327;
    }
    llvm::APInt::operator-=((uint64_t)&v323, 2uLL);
    v329 = v324;
    __src = v323;
    v324 = 0;
    v255 = llvm::ConstantInt::get((llvm::ConstantInt **)v14, (llvm::Type *)&__src, v254);
    LOWORD(v337) = 257;
    v256 = (char *)operator new(0x80uLL);
    *((_QWORD *)v256 + 6) = 0;
    *((_QWORD *)v256 + 5) = 0;
    v257 = (llvm::Value **)(v256 + 40);
    *((_QWORD *)v256 + 8) = *v201;
    v11 = (uint64_t ***)(v256 + 64);
    *((_QWORD *)v256 + 3) = v256 + 64;
    *((_QWORD *)v256 + 7) = v256 + 64;
    *((_QWORD *)v256 + 9) = 0;
    v256[80] = 56;
    v256[81] = 0;
    *((_WORD *)v256 + 41) = 0;
    *((_DWORD *)v256 + 21) = 2;
    *(_OWORD *)(v256 + 88) = 0u;
    *(_OWORD *)(v256 + 104) = 0u;
    *((_DWORD *)v256 + 30) = 0;
    *(_QWORD *)v256 = v201;
    v260 = v201[1];
    v259 = v201 + 1;
    v258 = v260;
    *((_QWORD *)v256 + 1) = v260;
    if (v260)
      *((_QWORD *)v258 + 2) = v256 + 8;
    *((_QWORD *)v256 + 2) = v259;
    *v259 = v256;
    *((_QWORD *)v256 + 4) = v255;
    if (v255)
    {
      v263 = v255[1];
      v262 = v255 + 1;
      v261 = v263;
      *v257 = v263;
      if (v263)
        *((_QWORD *)v261 + 2) = v257;
      *((_QWORD *)v256 + 6) = v262;
      *v262 = v256 + 32;
    }
    llvm::Value::setName((uint64_t ***)v256 + 8, (uint64_t)__s2);
    if (v329 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    if (v324 < 0x41)
      return (llvm::UndefValue **)v11;
    v264 = v323;
    if (!v323)
      return (llvm::UndefValue **)v11;
    goto LABEL_389;
  }
LABEL_264:
  v204 = *(_QWORD *)(v12 + 8);
  if (!v204 || *(_QWORD *)(v204 + 8))
  {
LABEL_294:
    LODWORD(__s2[0]) = 9;
    __s2[1] = 0;
    *(_QWORD *)&v336 = &v333;
    v227 = *(_QWORD *)(v12 + 8);
    if (v227)
    {
      if (!*(_QWORD *)(v227 + 8) && *(_BYTE *)(v12 + 16) == 84)
      {
        v228 = *(_QWORD *)(v12 - 32);
        if (v228)
        {
          if (!*(_BYTE *)(v228 + 16) && *(_QWORD *)(v228 + 24) == *(_QWORD *)(v12 + 72) && *(_DWORD *)(v228 + 36) == 9)
          {
            v15 = *(llvm::Type **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
            v229 = *((_QWORD *)v15 + 1);
            if (v229)
            {
              if (!*(_QWORD *)(v229 + 8) && (sub_1C4B0378C((_QWORD **)&v336, (uint64_t)v15) & 1) != 0)
              {
                v230 = (uint64_t *)v333;
                v231 = *v333;
                if ((*((_DWORD *)*v333 + 2) & 0xFE) == 0x12)
                  v231 = (llvm::ConstantInt *)**((_QWORD **)v231 + 2);
                v232 = llvm::Type::getPrimitiveSizeInBits(v231);
                v188 = v322;
                if ((v232 & 0xF) == 0)
                {
                  v233 = v322 - (v21 - v232);
                  if (v322 >= v21 - v232)
                  {
                    v234 = *(uint64_t **)(a1 + 24);
                    LOWORD(v337) = 257;
                    UnaryIntrinsic = (llvm::ConstantInt **)llvm::IRBuilderBase::CreateUnaryIntrinsic(v234, 9, v230, 0, (uint64_t)__s2);
                    v236 = *(_QWORD *)(a1 + 24);
                    LOWORD(v337) = 257;
                    v69 = llvm::ConstantInt::get(*UnaryIntrinsic, v233, 0);
                    v70 = v236;
                    v71 = (uint64_t)UnaryIntrinsic;
                    goto LABEL_82;
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((a2[17] & 2) == 0)
    {
      LODWORD(__s2[1]) = v21;
      if (v21 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)__s2, 0, 0);
      else
        __s2[0] = 0;
      sub_1C4912E54(__s2, 0, v188);
      IsZero = llvm::MaskedValueIsZero((llvm *)v12, (const llvm::Value *)__s2, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v318);
      if (LODWORD(__s2[1]) >= 0x41 && __s2[0])
        MEMORY[0x1CAA32F9C](__s2[0], 0x1000C8000313F17);
      if (IsZero)
      {
        a2[17] |= 2u;
        return (llvm::UndefValue **)a2;
      }
    }
LABEL_317:
    v238 = *(_QWORD *)(v12 + 8);
    if (!v238 || *(_QWORD *)(v238 + 8))
      return 0;
    v240 = *(unsigned __int8 *)(v12 + 16);
    if (v240 == 5)
    {
      if (*(_WORD *)(v12 + 18) != 25)
        return 0;
      v243 = (uint64_t *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
      v241 = *v243;
      if (!*v243)
        return 0;
      v242 = (unsigned __int8 *)v243[4];
    }
    else
    {
      if (v240 != 53)
        return 0;
      v241 = *(_QWORD *)(v12 - 64);
      if (!v241)
        return 0;
      v242 = *(unsigned __int8 **)(v12 - 32);
    }
    if (v13 == v242)
    {
      AllOnesValue = llvm::Constant::getAllOnesValue((llvm::Constant *)v14, v15);
      v245 = *(_QWORD *)(a1 + 24);
      LOWORD(v337) = 257;
      v246 = (_QWORD *)sub_1C506ED1C(v245, (uint64_t)AllOnesValue, (uint64_t)v13, (uint64_t)__s2, 0);
      LOWORD(v337) = 257;
      v247 = (char *)operator new(0x80uLL);
      *((_QWORD *)v247 + 6) = 0;
      *((_QWORD *)v247 + 8) = *v246;
      v11 = (uint64_t ***)(v247 + 64);
      *((_QWORD *)v247 + 3) = v247 + 64;
      *((_QWORD *)v247 + 7) = v247 + 64;
      *((_QWORD *)v247 + 9) = 0;
      v247[80] = 56;
      v247[81] = 0;
      *((_WORD *)v247 + 41) = 0;
      *((_DWORD *)v247 + 21) = 2;
      *(_OWORD *)(v247 + 88) = 0u;
      *(_OWORD *)(v247 + 104) = 0u;
      *((_DWORD *)v247 + 30) = 0;
      *(_QWORD *)v247 = v246;
      v250 = v246[1];
      v249 = v246 + 1;
      v248 = v250;
      *((_QWORD *)v247 + 1) = v250;
      if (v250)
        *(_QWORD *)(v248 + 16) = v247 + 8;
      *((_QWORD *)v247 + 2) = v249;
      *v249 = v247;
      v251 = (_QWORD *)(v241 + 8);
      v252 = *(_QWORD *)(v241 + 8);
      *((_QWORD *)v247 + 5) = v252;
      *((_QWORD *)v247 + 4) = v241;
      if (v252)
        *(_QWORD *)(v252 + 16) = v247 + 40;
      *((_QWORD *)v247 + 6) = v251;
      *v251 = v247 + 32;
LABEL_334:
      llvm::Value::setName(v11, (uint64_t)__s2);
      return (llvm::UndefValue **)v11;
    }
    return 0;
  }
  v205 = v327;
  v206 = *((_DWORD *)v327 + 2);
  v329 = v206;
  if (v206 > 0x40)
  {
    v207 = operator new[]();
    __src = (void *)v207;
    v307 = *(const void **)v205;
    v206 = v329;
    v308 = v329 + 63;
    memcpy((void *)v207, v307, (v308 >> 3) & 0x3FFFFFF8);
    if (v206 > 0x40)
    {
      llvm::APInt::tcShiftRight((llvm::APInt *)v207, (unint64_t *)(v308 >> 6), v322);
      v209 = v327;
      LODWORD(__s2[1]) = v206;
      goto LABEL_399;
    }
  }
  else
  {
    v207 = *(_QWORD *)v327;
  }
  if (v206 != v322)
  {
    v208 = v207 >> v322;
    __src = (void *)(v207 >> v322);
    v209 = v327;
    LODWORD(__s2[1]) = v206;
LABEL_270:
    __s2[0] = (void *)v208;
    goto LABEL_271;
  }
  __src = 0;
  v209 = v327;
  LODWORD(__s2[1]) = v322;
  if (v322 < 0x41)
  {
    v208 = 0;
    goto LABEL_270;
  }
LABEL_399:
  __s2[0] = (void *)operator new[]();
  memcpy(__s2[0], __src, (((unint64_t)LODWORD(__s2[1]) + 63) >> 3) & 0x3FFFFFF8);
LABEL_271:
  v188 = v322;
  sub_1C4888094((uint64_t)__s2, v322);
  v211 = *((unsigned int *)v209 + 2);
  v212 = __s2[0];
  if (v211 > 0x40)
    v213 = memcmp(*(const void **)v209, __s2[0], ((unint64_t)(v211 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v213 = *(void **)v209 == __s2[0];
  v214 = v213;
  if (LODWORD(__s2[1]) >= 0x41 && v212)
    MEMORY[0x1CAA32F9C](v212, 0x1000C8000313F17);
  if (v214)
  {
    v321 = v214;
    v215 = v333;
    v216 = llvm::ConstantInt::get((llvm::ConstantInt **)v14, (llvm::Type *)&__src, v210);
    LOWORD(v337) = 257;
    v217 = (char *)operator new(0x80uLL);
    v218 = v217;
    *(_QWORD *)v217 = 0;
    *((_QWORD *)v217 + 2) = 0;
    *((_QWORD *)v217 + 1) = 0;
    *((_QWORD *)v217 + 5) = 0;
    *((_QWORD *)v217 + 6) = 0;
    *((_QWORD *)v217 + 4) = 0;
    v219 = (llvm::Value ***)(v217 + 32);
    *((_QWORD *)v217 + 8) = *v215;
    v11 = (uint64_t ***)(v217 + 64);
    *((_QWORD *)v217 + 3) = v217 + 64;
    *((_QWORD *)v217 + 7) = v217 + 64;
    *((_QWORD *)v217 + 9) = 0;
    v217[80] = 45;
    v217[81] = 0;
    *((_WORD *)v217 + 41) = 0;
    *((_DWORD *)v217 + 21) = 2;
    *((_DWORD *)v217 + 30) = 0;
    *(_OWORD *)(v217 + 104) = 0u;
    *(_OWORD *)(v217 + 88) = 0u;
    *(_QWORD *)v217 = v215;
    v222 = v215[1];
    v221 = v215 + 1;
    v220 = v222;
    *((_QWORD *)v217 + 1) = v222;
    if (v222)
      *((_QWORD *)v220 + 2) = v217 + 8;
    *((_QWORD *)v217 + 2) = v221;
    *v221 = v217;
    if (*((_QWORD *)v217 + 4))
    {
      **((_QWORD **)v217 + 6) = *((_QWORD *)v217 + 5);
      v316 = *((_QWORD *)v217 + 5);
      if (v316)
        *(_QWORD *)(v316 + 16) = *((_QWORD *)v217 + 6);
    }
    *v219 = v216;
    LOBYTE(v214) = v321;
    if (v216)
    {
      v225 = v216[1];
      v224 = (llvm::Value ****)(v216 + 1);
      v223 = v225;
      *((_QWORD *)v217 + 5) = v225;
      if (v225)
        *((_QWORD *)v223 + 2) = v217 + 40;
      *((_QWORD *)v217 + 6) = v224;
      *v224 = v219;
    }
    llvm::Value::setName((uint64_t ***)v217 + 8, (uint64_t)__s2);
    v226 = v218[81] | 2;
    v218[81] = v226;
    v218[81] = *(_BYTE *)(v12 + 17) & 4 | v226 & 0xFB;
    v188 = v322;
  }
  else
  {
    v11 = 0;
  }
  if (v329 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if ((v214 & 1) == 0)
    goto LABEL_294;
  return (llvm::UndefValue **)v11;
}

llvm::Value *sub_1C584A294(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm::Constant *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  llvm::Value *v9;
  uint64_t *v11;
  uint64_t ***v13;
  unsigned __int8 *v14;
  uint64_t v15;
  llvm::Type *v16;
  unsigned int PrimitiveSizeInBits;
  llvm::APInt *v18;
  unsigned int v19;
  llvm::APInt *v20;
  llvm::APInt *v21;
  int v22;
  uint64_t **v23;
  llvm::Constant *v24;
  char *v25;
  llvm::Constant **v26;
  uint64_t *v27;
  llvm::APInt *v28;
  unsigned int v29;
  llvm::APInt *v30;
  llvm::APInt *v31;
  llvm::Value **v32;
  llvm::Constant **v33;
  char *v34;
  char *v35;
  llvm::Value **v36;
  llvm::Constant *v37;
  _QWORD *v38;
  llvm::Constant *v39;
  llvm::Value *v40;
  _QWORD *v41;
  llvm::Value *v42;
  llvm::Value **v43;
  llvm::Constant **v44;
  char *v45;
  char *v46;
  llvm::Value **v47;
  llvm::Constant *v48;
  _QWORD *v49;
  llvm::Constant *v50;
  llvm::Value *v51;
  _QWORD *v52;
  llvm::Value *v53;
  int v54;
  llvm::Constant ***v55;
  llvm::APInt *v56;
  unsigned int v57;
  llvm::APInt *v58;
  unsigned int v59;
  uint64_t v60;
  llvm::Constant **v61;
  char *v62;
  _QWORD *v63;
  llvm::Constant *v64;
  _QWORD *v65;
  llvm::Constant *v66;
  uint64_t **v67;
  llvm::Type *v68;
  const char *v69;
  unsigned int v70;
  const char *v71;
  unsigned int v72;
  llvm::Constant **v73;
  llvm::ConstantInt *v74;
  llvm::Type *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  llvm::Value **v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t **v83;
  char *v84;
  uint64_t v85;
  llvm::Constant **v86;
  llvm::Type *v87;
  llvm::Value **NullValue;
  uint64_t **v89;
  char *v90;
  uint64_t v91;
  _BOOL4 IsZero;
  unsigned int v93;
  uint64_t **v94;
  int v95;
  llvm::Value **v96;
  llvm::Constant *v97;
  llvm::UndefValue *v98;
  llvm::Constant *v99;
  int v100;
  uint64_t ***v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  llvm::UndefValue *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  __int128 *v115;
  int v116;
  _QWORD *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t **v121;
  _QWORD *v122;
  int v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  BOOL v132;
  int v133;
  uint64_t *v134;
  uint64_t v135;
  int v136;
  unsigned __int8 *v137;
  uint64_t v138;
  llvm::Constant *v139;
  unsigned __int8 *v140;
  uint64_t v141;
  llvm::Constant *v142;
  llvm::Constant *v143;
  llvm::Type *v144;
  unsigned int v145;
  llvm::Type *v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  int v150;
  llvm::Constant *v151;
  llvm::Type *v152;
  unsigned int v153;
  llvm::Type *v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  int v158;
  llvm::Value *v159;
  char v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  uint64_t *v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  llvm::Constant **v173;
  uint64_t v174;
  llvm::APInt **v175;
  uint64_t v176;
  uint64_t v177;
  llvm::Type *v178;
  unsigned int v179;
  llvm::Type *v180;
  uint64_t v181;
  unint64_t v182;
  char v183;
  char v184;
  uint64_t *TruncOrBitCast;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  __int128 *v198;
  _BOOL4 v199;
  uint64_t **v200;
  _QWORD *v201;
  uint64_t **v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t **v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t ****v212;
  uint64_t ***v213;
  int v214;
  int v215;
  uint64_t ***v216;
  char *v217;
  uint64_t **v218;
  uint64_t **v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  unsigned __int8 *v223;
  unsigned __int8 *v224;
  unsigned __int8 *v225;
  llvm::Constant *v226;
  _QWORD *v227;
  uint64_t *v228;
  llvm::Value *v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  llvm::Constant ***v233;
  __int16 v234;
  llvm::APInt *v235;
  llvm::Constant *v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  llvm::APInt *v240;
  llvm::APInt **v241;
  llvm::APInt **v242;
  llvm::Constant **v243;
  llvm::APInt **v244;
  llvm::APInt **v245;
  llvm::Constant **v246;
  llvm::APInt **v247;
  llvm::APInt **v248;
  llvm::Constant *v249;
  llvm::Constant *v250;
  llvm::Value *v251;
  llvm::APInt *v252;
  llvm::Constant **v253;
  unsigned int v254;

  v4 = *(_QWORD *)(a2 - 64);
  v5 = *(llvm::Constant **)(a2 - 32);
  v6 = (*(unsigned __int8 *)(a2 + 17) >> 1) & 1;
  v7 = *(_OWORD *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 104);
  v238 = *(_OWORD *)(a1 + 88);
  v239 = v8;
  v241 = (llvm::APInt **)*((_QWORD *)&v7 + 1);
  v240 = (llvm::APInt *)a2;
  v9 = sub_1C4E63EA4(v4, v5, v6, (uint64_t)&v238, (llvm::DSOLocalEquivalent **)3);
  if (v9)
    return (llvm::Value *)sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v9);
  v11 = (uint64_t *)sub_1C57826B8(a1, (unsigned __int8 *)a2);
  if (!v11)
  {
    v11 = (uint64_t *)sub_1C58443C8(a1, (unsigned __int8 *)a2);
    if (!v11)
    {
      v13 = *(uint64_t ****)(a2 - 64);
      v14 = *(unsigned __int8 **)(a2 - 32);
      v15 = *(_QWORD *)a2;
      v16 = *(llvm::Type **)a2;
      if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
        v16 = **(llvm::Type ***)(v15 + 16);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v16);
      v235 = 0;
      v238 = (unint64_t)&v235;
      if (!sub_1C4D89F84((uint64_t)&v238, v14))
        goto LABEL_108;
      v18 = v235;
      v19 = *((_DWORD *)v235 + 2);
      v20 = v235;
      if (v19 >= 0x41)
      {
        if (v19 - llvm::APInt::countLeadingZerosSlowCase(v235) > 0x40)
          goto LABEL_108;
        v20 = *(llvm::APInt **)v18;
      }
      if (*(_QWORD *)v20 < (unint64_t)PrimitiveSizeInBits)
      {
        if (*((_DWORD *)v18 + 2) >= 0x41u)
          v18 = *(llvm::APInt **)v18;
        v21 = *(llvm::APInt **)v18;
        v253 = 0;
        *(_QWORD *)&v238 = &v253;
        *((_QWORD *)&v238 + 1) = v14;
        v22 = *((unsigned __int8 *)v13 + 16);
        if (v22 == 5)
        {
          if (*((_WORD *)v13 + 9) != 25
            || !sub_1C4B0378C((_QWORD **)&v238, (uint64_t)v13[-4 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF)]))
          {
            goto LABEL_28;
          }
          v23 = v13[-4 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF) + 4];
        }
        else
        {
          if (v22 != 53 || !sub_1C4B0378C((_QWORD **)&v238, (uint64_t)*(v13 - 8)))
            goto LABEL_28;
          v23 = *(v13 - 4);
        }
        if (*((uint64_t ***)&v238 + 1) == v23)
        {
          v24 = *v253;
          if ((*((_DWORD *)*v253 + 2) & 0xFE) == 0x12)
            v24 = (llvm::Constant *)**((_QWORD **)v24 + 2);
          if (PrimitiveSizeInBits - llvm::Type::getPrimitiveSizeInBits(v24) == (_DWORD)v21)
          {
            v25 = (char *)operator new(0x60uLL);
            v11 = (uint64_t *)(v25 + 32);
            *((_DWORD *)v25 + 13) = *((_DWORD *)v25 + 13) & 0x38000000 | 1;
            *(_QWORD *)v25 = 0;
            *((_QWORD *)v25 + 1) = 0;
            *((_QWORD *)v25 + 2) = 0;
            *((_QWORD *)v25 + 3) = v25 + 32;
            v26 = v253;
            LOWORD(v240) = 257;
            v27 = (uint64_t *)&v238;
LABEL_98:
            v82 = (uint64_t)v11;
LABEL_99:
            llvm::SExtInst::SExtInst(v82, (uint64_t)v26, v15, (uint64_t)v27, 0);
            return (llvm::Value *)v11;
          }
        }
LABEL_28:
        v252 = 0;
        *(_QWORD *)&v238 = &v253;
        *((_QWORD *)&v238 + 1) = &v252;
        *(_QWORD *)&v239 = 0;
        if (!sub_1C582A720((_QWORD **)&v238, (uint64_t)v13))
          goto LABEL_51;
        v28 = v252;
        v29 = *((_DWORD *)v252 + 2);
        v30 = v252;
        if (v29 >= 0x41)
        {
          if (v29 - llvm::APInt::countLeadingZerosSlowCase(v252) > 0x40)
            goto LABEL_51;
          v30 = *(llvm::APInt **)v28;
        }
        if (*(_QWORD *)v30 < (unint64_t)PrimitiveSizeInBits)
        {
          if (*((_DWORD *)v28 + 2) >= 0x41u)
            v28 = *(llvm::APInt **)v28;
          v31 = *(llvm::APInt **)v28;
          if (v21 > *(_QWORD *)v28)
          {
            v32 = llvm::ConstantInt::get((llvm::ConstantInt *)v15, ((_DWORD)v21 - (_DWORD)v31), 0);
            v33 = v253;
            LOWORD(v240) = 257;
            v34 = (char *)operator new(0x80uLL);
            v35 = v34;
            *((_QWORD *)v34 + 5) = 0;
            v36 = (llvm::Value **)(v34 + 40);
            *((_QWORD *)v34 + 6) = 0;
            *((_QWORD *)v34 + 8) = *v33;
            v11 = (uint64_t *)(v34 + 64);
            *((_QWORD *)v34 + 3) = v34 + 64;
            *((_QWORD *)v34 + 7) = v34 + 64;
            *((_QWORD *)v34 + 9) = 0;
            v34[80] = 55;
            v34[81] = 0;
            *((_WORD *)v34 + 41) = 0;
            *((_DWORD *)v34 + 21) = 2;
            *(_OWORD *)(v34 + 88) = 0u;
            *(_OWORD *)(v34 + 104) = 0u;
            *((_DWORD *)v34 + 30) = 0;
            *(_QWORD *)v34 = v33;
            v39 = v33[1];
            v38 = v33 + 1;
            v37 = v39;
            *((_QWORD *)v34 + 1) = v39;
            if (v39)
              *((_QWORD *)v37 + 2) = v34 + 8;
            *((_QWORD *)v34 + 2) = v38;
            *v38 = v34;
            *((_QWORD *)v34 + 4) = v32;
            if (v32)
            {
              v42 = v32[1];
              v41 = v32 + 1;
              v40 = v42;
              *v36 = v42;
              if (v42)
                *((_QWORD *)v40 + 2) = v36;
              *((_QWORD *)v34 + 6) = v41;
              *v41 = v34 + 32;
            }
            llvm::Value::setName((uint64_t ***)v34 + 8, (uint64_t)&v238);
            v35[81] = v35[81] & 0xFD | *(_BYTE *)(a2 + 17) & 2;
            return (llvm::Value *)v11;
          }
          if (v21 < *(_QWORD *)v28)
          {
            v43 = llvm::ConstantInt::get((llvm::ConstantInt *)v15, ((_DWORD)v31 - (_DWORD)v21), 0);
            v44 = v253;
            LOWORD(v240) = 257;
            v45 = (char *)operator new(0x80uLL);
            v46 = v45;
            *((_QWORD *)v45 + 5) = 0;
            v47 = (llvm::Value **)(v45 + 40);
            *((_QWORD *)v45 + 6) = 0;
            *((_QWORD *)v45 + 8) = *v44;
            v11 = (uint64_t *)(v45 + 64);
            *((_QWORD *)v45 + 3) = v45 + 64;
            *((_QWORD *)v45 + 7) = v45 + 64;
            *((_QWORD *)v45 + 9) = 0;
            v45[80] = 53;
            v45[81] = 0;
            *((_WORD *)v45 + 41) = 0;
            *((_DWORD *)v45 + 21) = 2;
            *(_OWORD *)(v45 + 88) = 0u;
            *(_OWORD *)(v45 + 104) = 0u;
            *((_DWORD *)v45 + 30) = 0;
            *(_QWORD *)v45 = v44;
            v50 = v44[1];
            v49 = v44 + 1;
            v48 = v50;
            *((_QWORD *)v45 + 1) = v50;
            if (v50)
              *((_QWORD *)v48 + 2) = v45 + 8;
            *((_QWORD *)v45 + 2) = v49;
            *v49 = v45;
            *((_QWORD *)v45 + 4) = v43;
            if (v43)
            {
              v53 = v43[1];
              v52 = v43 + 1;
              v51 = v53;
              *v47 = v53;
              if (v53)
                *((_QWORD *)v51 + 2) = v47;
              *((_QWORD *)v45 + 6) = v52;
              *v52 = v45 + 32;
            }
            llvm::Value::setName((uint64_t ***)v45 + 8, (uint64_t)&v238);
            v46[81] |= 4u;
            return (llvm::Value *)v11;
          }
        }
LABEL_51:
        *(_QWORD *)&v238 = &v253;
        *((_QWORD *)&v238 + 1) = &v252;
        *(_QWORD *)&v239 = 0;
        v54 = *((unsigned __int8 *)v13 + 16);
        if (v54 == 5)
        {
          if (*((_WORD *)v13 + 9) != 27
            || (v55 = (llvm::Constant ***)&v13[-4 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF)], !*v55)
            || (v253 = *v55, !sub_1C4D8A004((uint64_t)&v238 + 8, (llvm::Constant *)v55[4])))
          {
LABEL_71:
            *(_QWORD *)&v238 = &v253;
            v67 = v13[1];
            if (v67 && !v67[1] && sub_1C4B037F8((_QWORD **)&v238, (uint64_t)v13))
            {
              if ((*(_DWORD *)(v15 + 8) & 0xFE) == 0x12)
                goto LABEL_82;
              if (*(_DWORD *)(v15 + 8) == 13)
              {
                v68 = *v253;
                if (*((_BYTE *)*v253 + 8) == 13)
                {
                  v70 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v15);
                  if ((_DWORD)v69 == 1)
                  v72 = llvm::Type::getPrimitiveSizeInBits(v68);
                  if ((_DWORD)v71 == 1)
                  if ((sub_1C577D3C0(a1, v70, v72) & 1) != 0)
                  {
LABEL_82:
                    v73 = v253;
                    v74 = *v253;
                    v75 = *v253;
                    if ((*((_DWORD *)*v253 + 2) & 0xFE) == 0x12)
                      v75 = (llvm::Type *)**((_QWORD **)v74 + 2);
                    v76 = llvm::Type::getPrimitiveSizeInBits(v75) - 1;
                    if (v76 >= v21)
                      v77 = v21;
                    else
                      v77 = v76;
                    v78 = *(_QWORD *)(a1 + 24);
                    v79 = llvm::ConstantInt::get(v74, v77, 0);
                    LOWORD(v240) = 257;
                    v80 = sub_1C534E5D8(v78, (uint64_t)v73, (uint64_t)v79, (uint64_t)&v238, 0);
                    v81 = (char *)operator new(0x60uLL);
                    *((_DWORD *)v81 + 13) = *((_DWORD *)v81 + 13) & 0x38000000 | 1;
                    v11 = (uint64_t *)(v81 + 32);
                    *(_QWORD *)v81 = 0;
                    *((_QWORD *)v81 + 1) = 0;
                    *((_QWORD *)v81 + 2) = 0;
                    *((_QWORD *)v81 + 3) = v81 + 32;
                    LOWORD(v240) = 257;
                    v27 = (uint64_t *)&v238;
                    v82 = (uint64_t)(v81 + 32);
                    v26 = (llvm::Constant **)v80;
                    goto LABEL_99;
                  }
                }
              }
            }
            if (PrimitiveSizeInBits - 1 == (_DWORD)v21)
            {
              *((_QWORD *)&v238 + 1) = &v253;
              *(_QWORD *)&v239 = &v253;
              v83 = v13[1];
              if (v83 && !v83[1] && sub_1C584C06C((uint64_t)&v238, (uint64_t)v13))
              {
                v84 = (char *)operator new(0x60uLL);
                v11 = (uint64_t *)(v84 + 32);
                *((_DWORD *)v84 + 13) = *((_DWORD *)v84 + 13) & 0x38000000 | 1;
                *(_QWORD *)v84 = 0;
                *((_QWORD *)v84 + 1) = 0;
                *((_QWORD *)v84 + 2) = 0;
                *((_QWORD *)v84 + 3) = v84 + 32;
                v85 = *(_QWORD *)(a1 + 24);
                v86 = v253;
                LOWORD(v240) = 257;
                NullValue = llvm::Constant::getNullValue(*v253, v87);
                v26 = (llvm::Constant **)sub_1C4774B48(v85, 33, (uint64_t)v86, (uint64_t)NullValue, (uint64_t)&v238);
                v234 = 257;
LABEL_97:
                v27 = &v232;
                goto LABEL_98;
              }
              v251 = 0;
              *(_QWORD *)&v238 = &v253;
              *((_QWORD *)&v238 + 1) = &v251;
              v89 = v13[1];
              if (v89 && !v89[1] && (sub_1C57BF450((_QWORD **)&v238, (uint64_t)v13) & 1) != 0)
              {
                v90 = (char *)operator new(0x60uLL);
                *((_DWORD *)v90 + 13) = *((_DWORD *)v90 + 13) & 0x38000000 | 1;
                v11 = (uint64_t *)(v90 + 32);
                *(_QWORD *)v90 = 0;
                *((_QWORD *)v90 + 1) = 0;
                *((_QWORD *)v90 + 2) = 0;
                *((_QWORD *)v90 + 3) = v90 + 32;
                v91 = *(_QWORD *)(a1 + 24);
                LOWORD(v240) = 257;
                v26 = (llvm::Constant **)sub_1C4774B48(v91, 40, (uint64_t)v253, (uint64_t)v251, (uint64_t)&v238);
                v234 = 257;
                goto LABEL_97;
              }
            }
            if ((*(_BYTE *)(a2 + 17) & 2) == 0)
            {
              DWORD2(v238) = PrimitiveSizeInBits;
              if (PrimitiveSizeInBits > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v238, 0, 0);
              else
                *(_QWORD *)&v238 = 0;
              sub_1C4912E54(&v238, 0, v21);
              IsZero = llvm::MaskedValueIsZero((llvm *)v13, (const llvm::Value *)&v238, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, (BOOL)v226);
              if (DWORD2(v238) >= 0x41 && (_QWORD)v238)
                MEMORY[0x1CAA32F9C](v238, 0x1000C8000313F17);
              if (IsZero)
              {
                *(_BYTE *)(a2 + 17) |= 2u;
                return (llvm::Value *)a2;
              }
            }
            goto LABEL_108;
          }
        }
        else
        {
          if (v54 != 55)
            goto LABEL_71;
          if (!*(v13 - 8))
            goto LABEL_71;
          v253 = (llvm::Constant **)*(v13 - 8);
          if ((sub_1C4D89F84((uint64_t)&v238 + 8, (unsigned __int8 *)*(v13 - 4)) & 1) == 0)
            goto LABEL_71;
        }
        v56 = v252;
        v57 = *((_DWORD *)v252 + 2);
        v58 = v252;
        if (v57 >= 0x41)
        {
          if (v57 - llvm::APInt::countLeadingZerosSlowCase(v252) > 0x40)
            goto LABEL_71;
          v58 = *(llvm::APInt **)v56;
        }
        if (*(_QWORD *)v58 < (unint64_t)PrimitiveSizeInBits)
        {
          if (*((_DWORD *)v56 + 2) >= 0x41u)
            v56 = *(llvm::APInt **)v56;
          v59 = *(_DWORD *)v56 + (_DWORD)v21;
          if (PrimitiveSizeInBits - 1 >= v59)
            v60 = v59;
          else
            v60 = PrimitiveSizeInBits - 1;
          v61 = v253;
          v14 = (unsigned __int8 *)llvm::ConstantInt::get((llvm::ConstantInt *)v15, v60, 0);
          LOWORD(v240) = 257;
          v62 = (char *)operator new(0x80uLL);
          *((_QWORD *)v62 + 5) = 0;
          v63 = v62 + 40;
          *((_QWORD *)v62 + 6) = 0;
          *((_QWORD *)v62 + 8) = *v61;
          v11 = (uint64_t *)(v62 + 64);
          *((_QWORD *)v62 + 3) = v62 + 64;
          *((_QWORD *)v62 + 7) = v62 + 64;
          *((_QWORD *)v62 + 9) = 0;
          v62[80] = 55;
          v62[81] = 0;
          *((_WORD *)v62 + 41) = 0;
          *((_DWORD *)v62 + 21) = 2;
          *(_OWORD *)(v62 + 88) = 0u;
          *(_OWORD *)(v62 + 104) = 0u;
          *((_DWORD *)v62 + 30) = 0;
          *(_QWORD *)v62 = v61;
          v66 = v61[1];
          v65 = v61 + 1;
          v64 = v66;
          *((_QWORD *)v62 + 1) = v66;
          if (v66)
            *((_QWORD *)v64 + 2) = v62 + 8;
          *((_QWORD *)v62 + 2) = v65;
          *v65 = v62;
          goto LABEL_322;
        }
        goto LABEL_71;
      }
LABEL_108:
      v93 = PrimitiveSizeInBits - 1;
      LODWORD(v233) = 64;
      v231 = 0;
      v232 = PrimitiveSizeInBits - 1;
      if (!sub_1C57E8F04((llvm::APInt *)&v232, (llvm::Constant *)v14)
        || (LODWORD(v239) = 64,
            *(_QWORD *)&v238 = &v231,
            *((_QWORD *)&v238 + 1) = PrimitiveSizeInBits - 1,
            (v94 = v13[1]) == 0))
      {
        v95 = 0;
        goto LABEL_116;
      }
      if (v94[1])
        goto LABEL_111;
      v115 = &v238;
      v116 = *((unsigned __int8 *)v13 + 16);
      if (v116 != 53)
      {
        if (v116 == 5)
          LOBYTE(v115) = *((_WORD *)v13 + 9) == 25
                      && (v121 = (uint64_t **)&v13[-4 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF)], *v121)
                      && (v231 = *v121, sub_1C57BE190((llvm::APInt *)((char *)&v238 + 8), (llvm::Constant *)v121[4]));
        v95 = (v116 == 5) & v115;
        goto LABEL_112;
      }
      if (*(v13 - 8)
        && (v231 = (uint64_t *)*(v13 - 8), sub_1C57E8F04((llvm::APInt *)((char *)&v238 + 8), (llvm::Constant *)*(v13 - 4))))
      {
        v95 = 1;
      }
      else
      {
LABEL_111:
        v95 = 0;
      }
LABEL_112:
      if (v239 >= 0x41 && *((_QWORD *)&v238 + 1))
        MEMORY[0x1CAA32F9C](*((_QWORD *)&v238 + 1), 0x1000C8000313F17);
LABEL_116:
      if (v233 >= 0x41 && v232)
        MEMORY[0x1CAA32F9C](v232, 0x1000C8000313F17);
      if (v95)
      {
        v96 = llvm::ConstantInt::get((llvm::ConstantInt *)v15, 1, 0);
        v98 = llvm::Constant::mergeUndefsWith((llvm::Constant *)v96, (llvm::Constant *)v14, v97);
        v100 = *((_DWORD *)v13 + 5);
        if ((v100 & 0x40000000) != 0)
          v101 = (uint64_t ***)*(v13 - 1);
        else
          v101 = &v13[-4 * (v100 & 0x7FFFFFF)];
        v107 = llvm::Constant::mergeUndefsWith(v98, (llvm::Constant *)v101[4], v99);
        v108 = *(_QWORD *)(a1 + 24);
        LOWORD(v240) = 257;
        v231 = (uint64_t *)sub_1C4D89BCC(v108, v231, (uint64_t)v107, (uint64_t)&v238);
        LOWORD(v240) = 257;
        return llvm::BinaryOperator::CreateNeg(v231, (llvm::Type *)&v238, 0);
      }
      v251 = 0;
      v252 = 0;
      v249 = 0;
      v250 = 0;
      *(_QWORD *)&v238 = &v251;
      *((_QWORD *)&v238 + 1) = &v250;
      *(_QWORD *)&v239 = &v252;
      *((_QWORD *)&v239 + 1) = &v252;
      v240 = (llvm::APInt *)&v250;
      v241 = &v252;
      v242 = &v252;
      v243 = &v249;
      v244 = &v252;
      v245 = &v252;
      v246 = &v249;
      v247 = &v252;
      v248 = &v252;
      v102 = *(unsigned __int8 *)(a2 + 16);
      if (v102 == 55)
      {
        v103 = *(_QWORD *)(a2 - 64);
        v104 = *(unsigned __int8 *)(v103 + 16);
        if (v104 == 5)
        {
          if (*(_WORD *)(v103 + 18) != 25)
            goto LABEL_313;
          v117 = (_QWORD *)(v103 - 32 * (*(_DWORD *)(v103 + 20) & 0x7FFFFFF));
          if (!*v117 || *(unsigned __int8 *)(*v117 + 16) < 0x1Cu)
            goto LABEL_313;
          v251 = (llvm::Value *)*v117;
          v106 = v117[4];
          if ((sub_1C584C318((_QWORD **)&v238 + 1, v106, (int)v117) & 1) != 0)
            goto LABEL_181;
        }
        else
        {
          if (v104 != 53)
            goto LABEL_313;
          v105 = *(_QWORD *)(v103 - 64);
          if (!v105 || *(unsigned __int8 *)(v105 + 16) < 0x1Cu)
            goto LABEL_313;
          v251 = *(llvm::Value **)(v103 - 64);
          v106 = *(_QWORD *)(v103 - 32);
          if ((sub_1C584C318((_QWORD **)&v238 + 1, v106, v103) & 1) != 0)
            goto LABEL_181;
        }
        v118 = *(unsigned __int8 *)(v106 + 16);
        if (v118 == 5)
        {
          if (*(_WORD *)(v106 + 18) != 15)
            goto LABEL_313;
          v126 = *(_QWORD *)(v106 - 32 * (*(_DWORD *)(v106 + 20) & 0x7FFFFFF));
          if (!v126)
            goto LABEL_313;
          *(_QWORD *)v240 = v126;
          v120 = *(_QWORD *)(v106 - 32 * (*(_DWORD *)(v106 + 20) & 0x7FFFFFF) + 32);
          if ((sub_1C4B0378C(&v241, v120) & 1) != 0)
            goto LABEL_181;
        }
        else
        {
          if (v118 != 43)
            goto LABEL_313;
          v119 = *(_QWORD *)(v106 - 64);
          if (!v119 || *(unsigned __int8 *)(v119 + 16) > 0x14u)
            goto LABEL_313;
          *(_QWORD *)v240 = v119;
          v120 = *(_QWORD *)(v106 - 32);
          if ((sub_1C4B0378C(&v241, v120) & 1) != 0)
            goto LABEL_181;
        }
        if (!v120)
          goto LABEL_313;
        *v242 = (llvm::APInt *)v120;
LABEL_181:
        v127 = *(_QWORD *)(a2 - 32);
LABEL_188:
        v129 = *(unsigned __int8 *)(v127 + 16);
        v130 = v129 - 28;
        v132 = v129 < 0x1C && v129 != 5;
        if (v127 && !v132)
        {
          if (v129 <= 0x1B)
            v130 = *(unsigned __int16 *)(v127 + 18);
          if (v130 == 39)
          {
            v133 = *(_DWORD *)(v127 + 20);
            if ((v133 & 0x40000000) != 0)
              v134 = *(uint64_t **)(v127 - 8);
            else
              v134 = (uint64_t *)(v127 - 32 * (v133 & 0x7FFFFFF));
            v135 = *v134;
            v136 = *(unsigned __int8 *)(v135 + 16);
            if (v136 == 5)
            {
              if (*(_WORD *)(v135 + 18) != 15)
                goto LABEL_212;
              v139 = *(llvm::Constant **)(v135 - 32 * (*(_DWORD *)(v135 + 20) & 0x7FFFFFF));
              if (!v139)
                goto LABEL_212;
              *v243 = v139;
              v138 = *(_QWORD *)(v135 - 32 * (*(_DWORD *)(v135 + 20) & 0x7FFFFFF) + 32);
              if ((sub_1C584C458(&v244, v138) & 1) != 0)
                goto LABEL_222;
            }
            else
            {
              if (v136 != 43)
                goto LABEL_212;
              v137 = *(unsigned __int8 **)(v135 - 64);
              if (!v137 || v137[16] > 0x14u)
                goto LABEL_212;
              *v243 = (llvm::Constant *)v137;
              v138 = *(_QWORD *)(v135 - 32);
              if ((sub_1C584C458(&v244, v138) & 1) != 0)
                goto LABEL_222;
            }
            if (*v245 == (llvm::APInt *)v138)
              goto LABEL_222;
          }
        }
LABEL_212:
        if (v129 == 5)
        {
          if (*(_WORD *)(v127 + 18) != 15)
            goto LABEL_313;
          v142 = *(llvm::Constant **)(v127 - 32 * (*(_DWORD *)(v127 + 20) & 0x7FFFFFF));
          if (!v142)
            goto LABEL_313;
          *v246 = v142;
          v141 = *(_QWORD *)(v127 - 32 * (*(_DWORD *)(v127 + 20) & 0x7FFFFFF) + 32);
          if ((sub_1C584C458(&v247, v141) & 1) != 0)
          {
LABEL_222:
            v143 = v250;
            v144 = *(llvm::Type **)v250;
            if ((*(_DWORD *)(*(_QWORD *)v250 + 8) & 0xFE) == 0x12)
              v144 = (llvm::Type *)**((_QWORD **)v144 + 2);
            v145 = llvm::Type::getPrimitiveSizeInBits(v144);
            v146 = *(llvm::Type **)a2;
            if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
              v146 = (llvm::Type *)**((_QWORD **)v146 + 2);
            v147 = llvm::Type::getPrimitiveSizeInBits(v146);
            v254 = v145;
            if (v145 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v253, v147, 0);
            }
            else
            {
              if (v145)
                v148 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v145;
              else
                v148 = 0;
              v253 = (llvm::Constant **)(v148 & v147);
            }
            v232 = 32;
            v233 = &v253;
            sub_1C57A1A3C((uint64_t)&v232, v143);
            v150 = v149;
            if (v254 >= 0x41 && v253)
              MEMORY[0x1CAA32F9C](v253, 0x1000C8000313F17);
            if (!v150)
              goto LABEL_313;
            v151 = v249;
            v152 = *(llvm::Type **)v249;
            if ((*(_DWORD *)(*(_QWORD *)v249 + 8) & 0xFE) == 0x12)
              v152 = (llvm::Type *)**((_QWORD **)v152 + 2);
            v153 = llvm::Type::getPrimitiveSizeInBits(v152);
            v154 = *(llvm::Type **)a2;
            if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
              v154 = (llvm::Type *)**((_QWORD **)v154 + 2);
            v155 = llvm::Type::getPrimitiveSizeInBits(v154);
            v254 = v153;
            if (v153 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v253, v155, 0);
            }
            else
            {
              if (v153)
                v156 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v153;
              else
                v156 = 0;
              v253 = (llvm::Constant **)(v156 & v155);
            }
            v232 = 32;
            v233 = &v253;
            sub_1C57A1A3C((uint64_t)&v232, v151);
            v158 = v157;
            if (v254 >= 0x41 && v253)
              MEMORY[0x1CAA32F9C](v253, 0x1000C8000313F17);
            if (!v158)
              goto LABEL_313;
            v159 = v251;
            v237 = 0;
            *(_QWORD *)&v238 = &v237;
            *((_QWORD *)&v238 + 1) = &v237;
            v160 = sub_1C584BEE8((_QWORD **)&v238, (uint64_t)v251, (char)&v237);
            if (v159 && (v160 & 1) == 0)
              **((_QWORD **)&v238 + 1) = v159;
            v161 = v237;
            if (!v237 || (*(_BYTE *)(v237 + 16) & 0xFE) != 0x36)
              goto LABEL_313;
            v229 = v251;
            v162 = *(_DWORD *)(v237 + 20);
            v163 = (v162 & 0x40000000) != 0 ? *(_QWORD *)(v237 - 8) : v237 - 32 * (v162 & 0x7FFFFFF);
            v227 = *(_QWORD **)v163;
            if (!*(_QWORD *)v163)
              goto LABEL_313;
            v164 = *(_QWORD *)(v163 + 32);
            if (!v164)
              goto LABEL_313;
            v236 = 0;
            *(_QWORD *)&v238 = &v236;
            *((_QWORD *)&v238 + 1) = v252;
            *(_QWORD *)&v239 = v252;
            *((_QWORD *)&v239 + 1) = &v236;
            v240 = v252;
            v241 = (llvm::APInt **)v252;
            v165 = *(unsigned __int8 *)(v164 + 16);
            if (v165 <= 0x1B && v165 != 5)
              goto LABEL_276;
            if (v165 <= 0x1B)
              v166 = *(unsigned __int16 *)(v164 + 18);
            else
              v166 = v165 - 28;
            if (v166 == 39)
            {
              v167 = *(_DWORD *)(v164 + 20);
              if ((v167 & 0x40000000) != 0)
                v168 = *(uint64_t **)(v164 - 8);
              else
                v168 = (uint64_t *)(v164 - 32 * (v167 & 0x7FFFFFF));
              v169 = *v168;
              v170 = *(unsigned __int8 *)(v169 + 16);
              if (v170 == 5)
              {
                if (*(_WORD *)(v169 + 18) == 15)
                {
                  v173 = (llvm::Constant **)(v169 - 32 * (*(_DWORD *)(v169 + 20) & 0x7FFFFFF));
                  if (*v173)
                  {
                    v236 = *v173;
                    v172 = (uint64_t)v173[4];
                    if ((sub_1C57A1BB8((_QWORD *)&v238 + 1, v172) & 1) != 0)
                      goto LABEL_286;
                    goto LABEL_274;
                  }
                }
              }
              else if (v170 == 43)
              {
                v171 = *(_QWORD *)(v169 - 64);
                if (v171)
                {
                  if (*(unsigned __int8 *)(v171 + 16) <= 0x14u)
                  {
                    v236 = *(llvm::Constant **)(v169 - 64);
                    v172 = *(_QWORD *)(v169 - 32);
                    if ((sub_1C57A1BB8((_QWORD *)&v238 + 1, v172) & 1) != 0)
                      goto LABEL_286;
LABEL_274:
                    if ((_QWORD)v239 == v172)
                      goto LABEL_286;
                  }
                }
              }
            }
            v165 = *(unsigned __int8 *)(v164 + 16);
LABEL_276:
            if (v165 == 5)
            {
              if (*(_WORD *)(v164 + 18) != 15)
                goto LABEL_313;
              v176 = *(_QWORD *)(v164 - 32 * (*(_DWORD *)(v164 + 20) & 0x7FFFFFF));
              if (!v176)
                goto LABEL_313;
              **((_QWORD **)&v239 + 1) = v176;
              v175 = *(llvm::APInt ***)(v164 - 32 * (*(_DWORD *)(v164 + 20) & 0x7FFFFFF) + 32);
              if ((sub_1C57A1BB8(&v240, (uint64_t)v175) & 1) != 0)
                goto LABEL_286;
            }
            else
            {
              if (v165 != 43)
                goto LABEL_313;
              v174 = *(_QWORD *)(v164 - 64);
              if (!v174 || *(unsigned __int8 *)(v174 + 16) > 0x14u)
                goto LABEL_313;
              **((_QWORD **)&v239 + 1) = v174;
              v175 = *(llvm::APInt ***)(v164 - 32);
              if ((sub_1C57A1BB8(&v240, (uint64_t)v175) & 1) != 0)
                goto LABEL_286;
            }
            if (v241 != v175)
              goto LABEL_313;
LABEL_286:
            v177 = v237;
            v226 = v236;
            v178 = *(llvm::Type **)v236;
            if ((*(_DWORD *)(*(_QWORD *)v236 + 8) & 0xFE) == 0x12)
              v178 = (llvm::Type *)**((_QWORD **)v178 + 2);
            v179 = llvm::Type::getPrimitiveSizeInBits(v178);
            v180 = *(llvm::Type **)v177;
            if ((*(_DWORD *)(*(_QWORD *)v177 + 8) & 0xFE) == 0x12)
              v180 = (llvm::Type *)**((_QWORD **)v180 + 2);
            v181 = llvm::Type::getPrimitiveSizeInBits(v180);
            v254 = v179;
            if (v179 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v253, v181, 0);
            }
            else
            {
              if (v179)
                v182 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v179;
              else
                v182 = 0;
              v253 = (llvm::Constant **)(v182 & v181);
            }
            v232 = 32;
            v233 = &v253;
            sub_1C57A1A3C((uint64_t)&v232, v226);
            v184 = v183;
            if (v254 >= 0x41 && v253)
              MEMORY[0x1CAA32F9C](v253, 0x1000C8000313F17);
            if ((v184 & 1) == 0)
              goto LABEL_313;
            LODWORD(v226) = *(unsigned __int8 *)(a2 + 16);
            if (*(unsigned __int8 *)(v237 + 16) == (_DWORD)v226)
            {
              TruncOrBitCast = (uint64_t *)sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v251);
              goto LABEL_312;
            }
            if (v229 != (llvm::Value *)v161)
            {
              v186 = *(_QWORD *)(*(_QWORD *)(a2 - 64) + 8);
              if (!v186 || *(_QWORD *)(v186 + 8))
              {
                v187 = *(_QWORD *)(*(_QWORD *)(a2 - 32) + 8);
                if (!v187 || *(_QWORD *)(v187 + 8))
                  goto LABEL_313;
              }
            }
            LOWORD(v240) = 257;
            v188 = (char *)operator new(0x80uLL);
            v189 = v188;
            *((_QWORD *)v188 + 6) = 0;
            *((_QWORD *)v188 + 8) = *v227;
            v11 = (uint64_t *)(v188 + 64);
            *((_QWORD *)v188 + 3) = v188 + 64;
            *((_QWORD *)v188 + 7) = v188 + 64;
            *((_QWORD *)v188 + 9) = 0;
            v188[80] = (char)v226;
            v188[81] = 0;
            *((_WORD *)v188 + 41) = 0;
            *((_DWORD *)v188 + 21) = 2;
            *(_OWORD *)(v188 + 88) = 0u;
            *(_OWORD *)(v188 + 104) = 0u;
            *((_DWORD *)v188 + 30) = 0;
            *(_QWORD *)v188 = v227;
            v191 = v227 + 1;
            v190 = v227[1];
            *((_QWORD *)v188 + 1) = v190;
            if (v190)
              *(_QWORD *)(v190 + 16) = v188 + 8;
            *((_QWORD *)v188 + 2) = v191;
            *v191 = v188;
            *((_QWORD *)v188 + 4) = v164;
            v194 = *(_QWORD *)(v164 + 8);
            v193 = (_QWORD *)(v164 + 8);
            v192 = v194;
            *((_QWORD *)v188 + 5) = v194;
            if (v194)
              *(_QWORD *)(v192 + 16) = v188 + 40;
            *((_QWORD *)v188 + 6) = v193;
            *v193 = v188 + 32;
            llvm::Value::setName((uint64_t ***)v188 + 8, (uint64_t)&v238);
            llvm::Instruction::copyIRFlags((uint64_t)v11, v237, 1);
            if (v229 == (llvm::Value *)v161)
              return (llvm::Value *)v11;
            v195 = *(uint64_t **)(a1 + 24);
            LOWORD(v240) = 257;
            (*(void (**)(uint64_t, uint64_t *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v195[10] + 16))(v195[10], v11, &v238, v195[6], v195[7]);
            v196 = *((unsigned int *)v195 + 2);
            if (!(_DWORD)v196)
            {
LABEL_311:
              v197 = *(_QWORD *)a2;
              LOWORD(v240) = 257;
              TruncOrBitCast = (uint64_t *)llvm::CastInst::CreateTruncOrBitCast(v11, v197, (uint64_t)&v238, 0);
LABEL_312:
              v11 = TruncOrBitCast;
              if (TruncOrBitCast)
                return (llvm::Value *)v11;
LABEL_313:
              DWORD2(v238) = PrimitiveSizeInBits;
              if (PrimitiveSizeInBits > 0x40)
              {
                v198 = &v238;
                llvm::APInt::initSlowCase((llvm::APInt *)&v238, 0, 0);
                if (DWORD2(v238) >= 0x41)
                  v198 = (__int128 *)(v238 + 8 * (v93 >> 6));
              }
              else
              {
                *(_QWORD *)&v238 = 0;
                v198 = &v238;
              }
              *(_QWORD *)v198 |= 1 << v93;
              v199 = llvm::MaskedValueIsZero((llvm *)v13, (const llvm::Value *)&v238, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, (BOOL)v226);
              if (DWORD2(v238) >= 0x41 && (_QWORD)v238)
                MEMORY[0x1CAA32F9C](v238, 0x1000C8000313F17);
              if (v199)
              {
                LOWORD(v240) = 257;
                v62 = (char *)operator new(0x80uLL);
                *((_QWORD *)v62 + 5) = 0;
                v63 = v62 + 40;
                *((_QWORD *)v62 + 6) = 0;
                *((_QWORD *)v62 + 8) = *v13;
                v11 = (uint64_t *)(v62 + 64);
                *((_QWORD *)v62 + 3) = v62 + 64;
                *((_QWORD *)v62 + 7) = v62 + 64;
                *((_QWORD *)v62 + 9) = 0;
                v62[80] = 54;
                v62[81] = 0;
                *((_WORD *)v62 + 41) = 0;
                *((_DWORD *)v62 + 21) = 2;
                *(_OWORD *)(v62 + 88) = 0u;
                *(_OWORD *)(v62 + 104) = 0u;
                *((_DWORD *)v62 + 30) = 0;
                *(_QWORD *)v62 = v13;
                v202 = v13[1];
                v201 = v13 + 1;
                v200 = v202;
                *((_QWORD *)v62 + 1) = v202;
                if (v202)
                  v200[2] = (uint64_t *)(v62 + 8);
                *((_QWORD *)v62 + 2) = v201;
                *v201 = v62;
LABEL_322:
                *((_QWORD *)v62 + 4) = v14;
                if (v14)
                {
                  v205 = *((_QWORD *)v14 + 1);
                  v204 = v14 + 8;
                  v203 = v205;
                  *v63 = v205;
                  if (v205)
                    *(_QWORD *)(v203 + 16) = v63;
                  *((_QWORD *)v62 + 6) = v204;
                  *v204 = v62 + 32;
                }
                llvm::Value::setName((uint64_t ***)v11, (uint64_t)&v238);
                return (llvm::Value *)v11;
              }
              *(_QWORD *)&v238 = &v231;
              v206 = v13[1];
              if (!v206 || v206[1] || !sub_1C4D9EC28((_QWORD **)&v238, 30, (uint64_t)v13))
                return 0;
              v207 = *(_QWORD *)(a1 + 24);
              if ((*((_BYTE *)v13 + 23) & 0x10) == 0)
              {
                v218 = 0;
                v217 = &byte_1C871356D;
                goto LABEL_340;
              }
              v208 = ***v13;
              v209 = *(_QWORD *)(v208 + 152);
              v210 = *(unsigned int *)(v208 + 168);
              if ((_DWORD)v210)
              {
                LODWORD(v211) = (v210 - 1) & ((v13 >> 4) ^ (v13 >> 9));
                v212 = (uint64_t ****)(v209 + 16 * v211);
                v213 = *v212;
                if (*v212 == v13)
                {
LABEL_339:
                  v216 = v212[1];
                  v219 = *v216;
                  v217 = (char *)(v216 + 2);
                  v218 = v219;
LABEL_340:
                  LOWORD(v240) = 773;
                  *(_QWORD *)&v238 = v217;
                  *((_QWORD *)&v238 + 1) = v218;
                  *(_QWORD *)&v239 = ".not";
                  v220 = sub_1C534E5D8(v207, (uint64_t)v231, (uint64_t)v14, (uint64_t)&v238, 0);
                  LOWORD(v240) = 257;
                  return llvm::BinaryOperator::CreateNot(v220, (llvm::Type *)&v238, 0);
                }
                v214 = 1;
                while (v213 != (uint64_t ***)-4096)
                {
                  v215 = v211 + v214++;
                  v211 = v215 & (v210 - 1);
                  v213 = *(uint64_t ****)(v209 + 16 * v211);
                  if (v213 == v13)
                  {
                    v212 = (uint64_t ****)(v209 + 16 * v211);
                    goto LABEL_339;
                  }
                }
              }
              v212 = (uint64_t ****)(v209 + 16 * v210);
              goto LABEL_339;
            }
            v221 = *v195;
            v228 = (uint64_t *)(v189 + 112);
            v230 = v221 + 16 * v196;
            while (1)
            {
              v222 = *(_DWORD *)v221;
              v223 = *(unsigned __int8 **)(v221 + 8);
              if (v223)
              {
                if (!v222)
                {
                  v232 = *(_QWORD *)(v221 + 8);
                  llvm::MetadataTracking::track((uint64_t)&v232, v223, 2);
                  v224 = (unsigned __int8 *)*v228;
                  goto LABEL_358;
                }
              }
              else
              {
                v224 = (unsigned __int8 *)*v228;
                if (!*v228 && (v189[87] & 0x20) == 0)
                  goto LABEL_355;
                if (!v222)
                {
                  v232 = 0;
LABEL_358:
                  if (v224)
                    llvm::MetadataTracking::untrack((uint64_t)v228, v224);
                  v225 = (unsigned __int8 *)v232;
                  *v228 = v232;
                  if (v225)
                    llvm::MetadataTracking::retrack((uint64_t)&v232, v225, (uint64_t)v228);
                  goto LABEL_355;
                }
              }
              llvm::Value::setMetadata((llvm::Value *)v11, *(_DWORD *)v221, (llvm::MDNode *)v223);
LABEL_355:
              v221 += 16;
              if (v221 == v230)
                goto LABEL_311;
            }
          }
        }
        else
        {
          if (v129 != 43)
            goto LABEL_313;
          v140 = *(unsigned __int8 **)(v127 - 64);
          if (!v140 || v140[16] > 0x14u)
            goto LABEL_313;
          *v246 = (llvm::Constant *)v140;
          v141 = *(_QWORD *)(v127 - 32);
          if ((sub_1C584C458(&v247, v141) & 1) != 0)
            goto LABEL_222;
        }
        if (*v248 != (llvm::APInt *)v141)
          goto LABEL_313;
        goto LABEL_222;
      }
      if (v102 != 5 || *(_WORD *)(a2 + 18) != 27)
        goto LABEL_313;
      v109 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      v110 = *(unsigned __int8 *)(v109 + 16);
      if (v110 == 5)
      {
        if (*(_WORD *)(v109 + 18) != 25)
          goto LABEL_313;
        v122 = (_QWORD *)(v109 - 32 * (*(_DWORD *)(v109 + 20) & 0x7FFFFFF));
        if (!*v122 || *(unsigned __int8 *)(*v122 + 16) < 0x1Cu)
          goto LABEL_313;
        v251 = (llvm::Value *)*v122;
        v112 = v122[4];
        if ((sub_1C584C318((_QWORD **)&v238 + 1, v112, (int)v122) & 1) != 0)
          goto LABEL_187;
        v123 = *(unsigned __int8 *)(v112 + 16);
        if (v123 != 5)
        {
          if (v123 != 43)
            goto LABEL_313;
          v114 = *(_QWORD *)(v112 - 64);
          if (!v114 || *(unsigned __int8 *)(v114 + 16) > 0x14u)
            goto LABEL_313;
LABEL_172:
          *(_QWORD *)v240 = v114;
          v125 = *(_QWORD *)(v112 - 32);
          if ((sub_1C4B0378C(&v241, v125) & 1) != 0)
          {
LABEL_187:
            v127 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
            goto LABEL_188;
          }
LABEL_185:
          if (!v125)
            goto LABEL_313;
          *v242 = (llvm::APInt *)v125;
          goto LABEL_187;
        }
      }
      else
      {
        if (v110 != 53)
          goto LABEL_313;
        v111 = *(_QWORD *)(v109 - 64);
        if (!v111 || *(unsigned __int8 *)(v111 + 16) < 0x1Cu)
          goto LABEL_313;
        v251 = *(llvm::Value **)(v109 - 64);
        v112 = *(_QWORD *)(v109 - 32);
        if ((sub_1C584C318((_QWORD **)&v238 + 1, v112, v109) & 1) != 0)
          goto LABEL_187;
        v113 = *(unsigned __int8 *)(v112 + 16);
        if (v113 != 5)
        {
          if (v113 != 43)
            goto LABEL_313;
          v114 = *(_QWORD *)(v112 - 64);
          if (!v114 || *(unsigned __int8 *)(v114 + 16) > 0x14u)
            goto LABEL_313;
          goto LABEL_172;
        }
      }
      if (*(_WORD *)(v112 + 18) != 15)
        goto LABEL_313;
      v128 = *(_QWORD *)(v112 - 32 * (*(_DWORD *)(v112 + 20) & 0x7FFFFFF));
      if (!v128)
        goto LABEL_313;
      *(_QWORD *)v240 = v128;
      v125 = *(_QWORD *)(v112 - 32 * (*(_DWORD *)(v112 + 20) & 0x7FFFFFF) + 32);
      if ((sub_1C4B0378C(&v241, v125) & 1) != 0)
        goto LABEL_187;
      goto LABEL_185;
    }
  }
  return (llvm::Value *)v11;
}

uint64_t sub_1C584BAB4(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int PrimitiveSizeInBits;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Constant *Add;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  unsigned int v25;

  v4 = **a1;
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
    v4 = **(_QWORD **)(v4 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v4);
  v25 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v24, PrimitiveSizeInBits, 0);
  }
  else
  {
    v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
    if (!PrimitiveSizeInBits)
      LODWORD(v6) = 0;
    v24 = v6 & PrimitiveSizeInBits;
  }
  v7 = *(_DWORD *)a1[1];
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v7 + 28 != v8 && (v8 != 5 || v7 != *(unsigned __int16 *)(a2 + 18)))
    goto LABEL_26;
  v9 = *(_QWORD *)(a2 + 8);
  if (!v9 || *(_QWORD *)(v9 + 8))
    goto LABEL_26;
  v11 = a1[2];
  v10 = a1[3];
  if (v8 >= 0x1C)
  {
    if (v8 - 53 > 2)
      goto LABEL_26;
    v14 = *(_DWORD *)(a2 + 20);
    v15 = (v14 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v14 & 0x7FFFFFF));
    v16 = *v15;
    if (!v16)
      goto LABEL_26;
    *v11 = v16;
    v17 = *(_DWORD *)(a2 + 20);
    if ((v17 & 0x40000000) != 0)
      v18 = *(_QWORD *)(a2 - 8);
    else
      v18 = a2 - 32 * (v17 & 0x7FFFFFF);
    v19 = 0;
    v13 = *(_QWORD *)(v18 + 32);
    if (!v13 || *(unsigned __int8 *)(v13 + 16) > 0x14u)
      goto LABEL_27;
LABEL_34:
    *v10 = v13;
    Add = llvm::ConstantExpr::getAdd((llvm::ConstantExpr *)*a1[3], (llvm::Constant *)*a1[4], 0, 0);
    v23[0] = 36;
    v23[1] = &v24;
    sub_1C57A1A3C((uint64_t)v23, Add);
    v19 = v22;
    goto LABEL_27;
  }
  if (v8 == 5 && *(unsigned __int16 *)(a2 + 18) - 25 <= 2)
  {
    v12 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (v12)
    {
      *v11 = v12;
      v13 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      if (v13)
        goto LABEL_34;
    }
  }
LABEL_26:
  v19 = 0;
LABEL_27:
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  return v19;
}

BOOL sub_1C584BCA0@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 58)
  {
    v6 = *(_QWORD *)(a2 - 64);
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 25)
        return 0;
      if (!sub_1C4D9EED4(a1, *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF))))
        return 0;
      v8 = *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32);
      if (!v8)
        return 0;
    }
    else
    {
      if (v7 != 53)
        return 0;
      if (!sub_1C4D9ED34(a1, *(llvm::Constant **)(v6 - 64)))
        return 0;
      v8 = *(_QWORD *)(v6 - 32);
      if (!v8)
        return 0;
    }
    **(_QWORD **)(a1 + 8) = v8;
    return (sub_1C4D9ED34(a1 + 16, *(llvm::Constant **)(a2 - 32)) & 1) != 0;
  }
  if (v5 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30)
      goto LABEL_25;
    v9 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 25)
        goto LABEL_25;
      if (!sub_1C4D9EED4(a1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF))))
        goto LABEL_25;
      v11 = *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
      if (!v11)
        goto LABEL_25;
    }
    else
    {
      if (v10 != 53)
        goto LABEL_25;
      if (!sub_1C4D9ED34(a1, *(llvm::Constant **)(v9 - 64)))
        goto LABEL_25;
      v11 = *(_QWORD *)(v9 - 32);
      if (!v11)
        goto LABEL_25;
    }
    **(_QWORD **)(a1 + 8) = v11;
    if ((sub_1C4D9EED4(a1 + 16, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
    {
LABEL_25:
      a3 = 0;
      return (v5 == 5) & a3;
    }
    a3 = 1;
  }
  return (v5 == 5) & a3;
}

uint64_t sub_1C584BE38(_QWORD **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD **v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  if (!a2)
    return 0;
  if (*(unsigned __int8 *)(a2 + 16) - 53 > 2)
    return 0;
  v3 = *(_DWORD *)(a2 + 20);
  v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
  v6 = *v4;
  if (!v6 || *(unsigned __int8 *)(v6 + 16) < 0x1Cu)
    return 0;
  v8 = a1 + 1;
  **a1 = v6;
  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD *)(a2 - 8);
  else
    v10 = a2 - 32 * (v9 & 0x7FFFFFF);
  v11 = *(_QWORD *)(v10 + 32);
  if ((sub_1C4B0378C(v8, v11) & 1) == 0)
  {
    if (!v11)
      return 0;
    *a1[2] = v11;
  }
  return 1;
}

uint64_t sub_1C584BEE8@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;

  if (a2)
  {
    v3 = *(unsigned __int8 *)(a2 + 16);
    if (v3 > 0x1B)
      v4 = v3 - 28;
    else
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 38
      && ((v5 = *(_DWORD *)(a2 + 20), (v5 & 0x40000000) != 0)
        ? (v6 = *(uint64_t **)(a2 - 8))
        : (v6 = (uint64_t *)(a2 - 32 * (v5 & 0x7FFFFFF))),
          (v7 = *v6) != 0 ? (v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu) : (v8 = 0),
          v8))
    {
      **a1 = v7;
      a3 = 1;
    }
    else
    {
      a3 = 0;
    }
  }
  return (a2 != 0) & a3;
}

uint64_t sub_1C584BF60(_QWORD **a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v6;
  _QWORD **v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (!a2)
    return 0;
  if (*(unsigned __int8 *)(a2 + 16) - 53 <= 2)
  {
    v3 = *(_DWORD *)(a2 + 20);
    v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
    v6 = *v4;
    if (v6)
    {
      v7 = a1 + 1;
      **a1 = v6;
      v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(_QWORD *)(a2 - 8);
      else
        v9 = a2 - 32 * (v8 & 0x7FFFFFF);
      v10 = *(_QWORD *)(v9 + 32);
      if ((sub_1C4B0378C(v7, v10) & 1) != 0)
        return 1;
      if (v10)
      {
        *a1[2] = v10;
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_1C584C004(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v2 >= 0x1C)
  {
    if ((v2 & 0xFE) == 0x36)
    {
      v3 = *(_DWORD *)(a2 + 20);
      if ((v3 & 0x40000000) != 0)
      {
        v4 = *(_QWORD *)(a2 - 8);
        return *(_QWORD *)(v4 + 32) == a1;
      }
LABEL_9:
      v4 = a2 - 32 * (v3 & 0x7FFFFFF);
      return *(_QWORD *)(v4 + 32) == a1;
    }
  }
  else if (v2 == 5 && (*(_WORD *)(a2 + 18) & 0xFFFE) == 0x1A)
  {
    v3 = *(_DWORD *)(a2 + 20);
    goto LABEL_9;
  }
  return 0;
}

uint64_t sub_1C584C06C(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 29)
      return 0;
    v9 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 15)
        goto LABEL_31;
      if (!sub_1C4E71060(a1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF))))
        goto LABEL_31;
      v11 = *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
      if (!v11)
        goto LABEL_31;
    }
    else
    {
      if (v10 != 43)
        goto LABEL_31;
      if (!sub_1C4D8AC3C(a1, *(llvm::Constant **)(v9 - 64)))
        goto LABEL_31;
      v11 = *(_QWORD *)(v9 - 32);
      if (!v11)
        goto LABEL_31;
    }
    **(_QWORD **)(a1 + 8) = v11;
    if (**(_QWORD **)(a1 + 16) == *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32))
      return 1;
LABEL_31:
    v16 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v17 = *(unsigned __int8 *)(v16 + 16);
    if (v17 == 5)
    {
      if (*(_WORD *)(v16 + 18) != 15)
        return 0;
      result = sub_1C4E71060(a1, *(llvm::Constant **)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)));
      if (!(_DWORD)result)
        return result;
      v18 = *(_QWORD *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32);
      if (!v18)
        return 0;
    }
    else
    {
      if (v17 != 43)
        return 0;
      result = sub_1C4D8AC3C(a1, *(llvm::Constant **)(v16 - 64));
      if (!(_DWORD)result)
        return result;
      v18 = *(_QWORD *)(v16 - 32);
      if (!v18)
        return 0;
    }
    **(_QWORD **)(a1 + 8) = v18;
    v5 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    return **(_QWORD **)(a1 + 16) == *v5;
  }
  if (v4 == 57)
  {
    v5 = (_QWORD *)(a2 - 64);
    v6 = *(_QWORD *)(a2 - 64);
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 15)
        goto LABEL_18;
      if (!sub_1C4E71060(a1, *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF))))
        goto LABEL_18;
      v8 = *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32);
      if (!v8)
        goto LABEL_18;
    }
    else
    {
      if (v7 != 43)
        goto LABEL_18;
      if (!sub_1C4D8AC3C(a1, *(llvm::Constant **)(v6 - 64)))
        goto LABEL_18;
      v8 = *(_QWORD *)(v6 - 32);
      if (!v8)
        goto LABEL_18;
    }
    **(_QWORD **)(a1 + 8) = v8;
    if (**(_QWORD **)(a1 + 16) != *(_QWORD *)(a2 - 32))
    {
LABEL_18:
      v12 = *(_QWORD *)(a2 - 32);
      v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 == 5)
      {
        if (*(_WORD *)(v12 + 18) != 15)
          return 0;
        result = sub_1C4E71060(a1, *(llvm::Constant **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF)));
        if (!(_DWORD)result)
          return result;
        v15 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32);
        if (!v15)
          return 0;
      }
      else
      {
        if (v13 != 43)
          return 0;
        result = sub_1C4D8AC3C(a1, *(llvm::Constant **)(v12 - 64));
        if (!(_DWORD)result)
          return result;
        v15 = *(_QWORD *)(v12 - 32);
        if (!v15)
          return 0;
      }
      **(_QWORD **)(a1 + 8) = v15;
      return **(_QWORD **)(a1 + 16) == *v5;
    }
    return 1;
  }
  return 0;
}

uint64_t sub_1C584C318@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  unsigned int v3;
  uint64_t v4;
  BOOL v6;
  int v7;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v3 = *(unsigned __int8 *)(a2 + 16);
  LODWORD(v4) = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      LODWORD(v4) = *(unsigned __int16 *)(a2 + 18);
    if ((_DWORD)v4 != 39)
    {
LABEL_23:
      a3 = 0;
      return a3 & (v7 ^ 1u);
    }
    v9 = *(_DWORD *)(a2 + 20);
    if ((v9 & 0x40000000) != 0)
      v10 = *(uint64_t **)(a2 - 8);
    else
      v10 = (uint64_t *)(a2 - 32 * (v9 & 0x7FFFFFF));
    v11 = *v10;
    v12 = *(unsigned __int8 *)(v11 + 16);
    if (v12 == 43)
    {
      v13 = *(_QWORD *)(v11 - 64);
      if (v13)
        v14 = *(unsigned __int8 *)(v13 + 16) > 0x14u;
      else
        v14 = 1;
      if (!v14)
      {
        **a1 = v13;
        v16 = *(_QWORD *)(v11 - 32);
        v17 = sub_1C4B0378C(a1 + 1, v16);
        if ((v17 & 1) != 0)
          goto LABEL_34;
        if (v16)
        {
          *a1[2] = v16;
LABEL_34:
          a3 = 1;
          return a3 & (v7 ^ 1u);
        }
      }
      goto LABEL_23;
    }
    if (v12 == 5)
    {
      if (*(_WORD *)(v11 + 18) != 15)
        goto LABEL_35;
      v4 = *(_QWORD *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
      if (v4)
      {
        **a1 = v4;
        v15 = *(_QWORD *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32);
        if ((sub_1C4B0378C(a1 + 1, v15) & 1) != 0)
        {
LABEL_30:
          LOBYTE(v4) = 1;
          goto LABEL_36;
        }
        if (v15)
        {
          *a1[2] = v15;
          goto LABEL_30;
        }
LABEL_35:
        LOBYTE(v4) = 0;
      }
    }
LABEL_36:
    a3 = (v12 == 5) & v4;
  }
  return a3 & (v7 ^ 1u);
}

uint64_t sub_1C584C458(_QWORD **a1, uint64_t a2)
{
  _BOOL4 v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  _QWORD *v9;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 39)
    {
      v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(_QWORD **)(a2 - 8);
      else
        v9 = (_QWORD *)(a2 - 32 * (v8 & 0x7FFFFFF));
      v2 = **a1 == *v9;
    }
    else
    {
      v2 = 0;
    }
  }
  return (v7 ^ 1) & v2;
}

BOOL sub_1C584C4C4(uint64_t a1, llvm::UndefValue *a2)
{
  llvm::Type *v4;
  unsigned int PrimitiveSizeInBits;
  unsigned int v6;
  void *v7;
  llvm::UndefValue *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  size_t v27;
  uint64_t v28;
  unsigned int v29;
  void *__src;
  unsigned int v31;
  int8x8_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;

  v4 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v4 = (llvm::Type *)**((_QWORD **)v4 + 2);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v4);
  v6 = PrimitiveSizeInBits;
  v33 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v32, 0, 0);
    v35 = v6;
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, 0, 0);
    v31 = v6;
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
    v6 = v31;
    v29 = v31;
    if (v31 > 0x40)
    {
      v27 = (((unint64_t)v31 + 63) >> 3) & 0x3FFFFFF8;
      v28 = operator new[]();
      v7 = __src;
      memcpy((void *)v28, __src, v27);
      goto LABEL_9;
    }
    v7 = __src;
  }
  else
  {
    v35 = PrimitiveSizeInBits;
    v32 = 0;
    v34 = 0;
    v31 = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits)
      v7 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
    else
      v7 = 0;
    __src = v7;
    v29 = PrimitiveSizeInBits;
  }
  v28 = (uint64_t)v7;
LABEL_9:
  v8 = sub_1C584C800(a1, (uint64_t)a2, (int8x8_t *)&v28, &v32, 0, a2);
  if (v29 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  if (v8 != a2)
  {
    if (v8)
    {
      v9 = *((_QWORD *)a2 + 1);
      if (v9)
      {
        v10 = *(_QWORD *)(a1 + 32);
        v11 = *(_DWORD *)(v10 + 8);
        while (1)
        {
          v12 = *(_QWORD *)(v9 + 24);
          v36 = v12;
          v37 = v11;
          v13 = *(_DWORD *)(v10 + 2080);
          if (!v13)
            break;
          v14 = *(_QWORD *)(v10 + 2064);
          v15 = v13 - 1;
          v16 = v15 & ((v12 >> 4) ^ (v12 >> 9));
          v17 = (_QWORD *)(v14 + 16 * v16);
          v18 = *v17;
          if (*v17 != v12)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v15;
              v17 = (_QWORD *)(v14 + 16 * v16);
              v18 = *v17;
              if (*v17 == v12)
                goto LABEL_33;
            }
            if (v19)
              v23 = v19;
            else
              v23 = v17;
            goto LABEL_30;
          }
LABEL_33:
          v9 = *(_QWORD *)(v9 + 8);
          if (!v9)
          {
            llvm::Value::doRAUW(a2, v8, (llvm::Value *)1);
            *(_BYTE *)(a1 + 168) = 1;
            goto LABEL_36;
          }
        }
        v23 = 0;
LABEL_30:
        v24 = sub_1C4D8D8F4((_DWORD *)(v10 + 2064), (uint64_t)&v36, &v36, v23);
        *v24 = v36;
        *((_DWORD *)v24 + 2) = v37;
        v25 = *(unsigned int *)(v10 + 8);
        if (v25 >= *(unsigned int *)(v10 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v10 + 16, v25 + 1, 8);
          v25 = *(unsigned int *)(v10 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v10 + 8 * v25) = v12;
        v11 = *(_DWORD *)(v10 + 8) + 1;
        *(_DWORD *)(v10 + 8) = v11;
        goto LABEL_33;
      }
    }
  }
LABEL_36:
  if (v6 >= 0x41 && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  if (v35 >= 0x41 && v34)
    MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
  if (v33 >= 0x41 && *(_QWORD *)&v32)
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v32, 0x1000C8000313F17);
  return v8 != 0;
}

llvm::UndefValue *sub_1C584C800(uint64_t a1, uint64_t a2, int8x8_t *this, int8x8_t *a4, unsigned int a5, llvm::Instruction *a6)
{
  llvm::Instruction *v6;
  unsigned int v11;
  unsigned int *v12;
  void **v13;
  uint64_t *v14;
  llvm::Type *v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t IntegerValue;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Constant ***v26;
  unsigned int *v27;
  void **v28;
  const llvm::APInt *v29;
  uint64_t v30;
  uint64_t v31;
  const llvm::APInt *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int8x8_t *v36;
  llvm::Instruction *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int8 **v49;
  uint64_t v50;
  llvm::Instruction *v51;
  char *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unsigned __int8 *v57;
  uint64_t *v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int *v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  void **v72;
  llvm::Instruction **v73;
  int v74;
  uint64_t *v75;
  uint64_t v76;
  unsigned int *v77;
  void **v78;
  uint64_t v79;
  llvm::Constant ***v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL4 v91;
  unint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  void **v105;
  llvm::Instruction **v106;
  int v107;
  uint64_t *v108;
  uint64_t v109;
  unsigned int *v110;
  void **v111;
  __int32 v112;
  uint64_t *v113;
  __int32 v114;
  llvm::Instruction **v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  _BOOL4 v123;
  unint64_t v124;
  uint64_t *v125;
  unint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _BOOL4 v139;
  uint64_t v140;
  unsigned int *v141;
  void **v142;
  llvm::Instruction **v143;
  int v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  unint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unsigned int *v160;
  void **v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t *v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  _BOOL4 v173;
  unint64_t v174;
  uint64_t *v175;
  unint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  llvm::Constant ***v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _BOOL4 v191;
  unint64_t v192;
  uint64_t *v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  int v201;
  uint64_t *v202;
  BOOL v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  int8x8_t v207;
  unsigned int v208;
  llvm::APInt *v209;
  char v210;
  int v211;
  char *v212;
  unsigned int v213;
  int8x8_t *v214;
  int v215;
  uint64_t *v216;
  int v217;
  char *v218;
  llvm::APInt **v219;
  uint64_t v220;
  llvm::Instruction *v221;
  uint64_t v222;
  uint8x8_t v223;
  unsigned int v224;
  unsigned __int32 v225;
  int v226;
  char *v227;
  int v228;
  char *v229;
  int v230;
  uint64_t **v231;
  int v232;
  uint64_t **v233;
  BOOL v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  int8x8_t v238;
  int v239;
  uint64_t *v240;
  uint64_t v241;
  void *v242;
  uint64_t v243;
  void *v244;
  uint64_t v245;
  llvm::APInt **v246;
  uint64_t v247;
  size_t v248;
  llvm::APInt *v249;
  unint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  _BOOL4 v254;
  unint64_t v255;
  uint64_t *v256;
  unint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  llvm::APInt *v268;
  uint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  size_t v274;
  uint64_t *v275;
  unint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  _BOOL4 v280;
  unint64_t v281;
  uint64_t *v282;
  unint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char v289;
  int v290;
  unint64_t *v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  uint64_t **v301;
  uint64_t v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  _BOOL4 v306;
  BOOL v307;
  unsigned int v308;
  void *v309;
  __int32 v310;
  void *v311;
  _QWORD *v312;
  int v313;
  int64_t v314;
  BOOL v315;
  unint64_t v316;
  int v317;
  int v318;
  unsigned __int8 *v319;
  const void **v320;
  unsigned int v321;
  unsigned __int8 *v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  int v326;
  unsigned __int8 *v327;
  int v328;
  uint64_t *v329;
  unsigned int v330;
  int v331;
  unsigned __int8 *v332;
  llvm::APInt *v333;
  unsigned int v334;
  unsigned int v335;
  unint64_t v336;
  uint64_t v337;
  unsigned int v338;
  unsigned int v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  uint64_t **v345;
  uint64_t v346;
  llvm::APInt **v347;
  uint64_t v348;
  llvm::Instruction *v349;
  uint64_t v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  int v354;
  char *v355;
  int v356;
  char *v357;
  size_t v358;
  uint64_t *v359;
  unint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t *v365;
  unint64_t v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _BOOL4 v372;
  char v373;
  size_t v374;
  uint64_t *v375;
  unint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t *v383;
  unint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  char v390;
  size_t v391;
  int v392;
  int v393;
  unint64_t v394;
  int8x8_t *v395;
  int8x8_t v396;
  uint8x8_t v397;
  int v398;
  char *v399;
  uint64_t v400;
  unsigned int v401;
  int v402;
  uint64_t v403;
  _BOOL4 v404;
  BOOL v405;
  unsigned int v406;
  unint64_t v407;
  char *v408;
  llvm::APInt **v409;
  unsigned int v410;
  int v411;
  size_t v412;
  int v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t v419;
  int8x8_t v420;
  _BOOL4 v421;
  llvm::Constant ***v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t *v429;
  unint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  uint64_t v433;
  _BOOL4 v434;
  unint64_t v435;
  uint64_t *v436;
  unint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  char v443;
  uint64_t v444;
  unint64_t v445;
  unsigned int v446;
  unsigned int v447;
  int8x8_t v448;
  _QWORD *v449;
  uint64_t *v450;
  unint64_t v451;
  uint64_t v452;
  unsigned int v453;
  llvm::APInt *v454;
  unsigned int v455;
  int v456;
  _BOOL4 v457;
  int v458;
  unsigned __int8 *v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  unsigned int v463;
  __int32 v464;
  int v465;
  uint64_t *v466;
  unsigned int v467;
  uint64_t v468;
  llvm::APInt **v469;
  uint64_t v470;
  llvm::Instruction *v471;
  _BOOL4 v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  int8x8_t v476;
  _BOOL4 v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t *v484;
  unint64_t v485;
  _QWORD *v486;
  uint64_t v487;
  uint64_t v488;
  _BOOL4 v489;
  unint64_t v490;
  uint64_t *v491;
  unint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  char v498;
  uint64_t v499;
  unint64_t v500;
  unsigned __int8 *v501;
  unint64_t **v502;
  unint64_t v503;
  unsigned int v504;
  unint64_t v505;
  llvm::APInt **v506;
  uint64_t v507;
  _QWORD *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  llvm::Instruction *v515;
  int v516;
  int v517;
  uint64_t v518;
  unint64_t **v519;
  int8x8_t v520;
  unsigned int v521;
  __int32 v522;
  __int32 v523;
  uint64_t v524;
  _DWORD *v525;
  llvm::Value *v526;
  int v527;
  uint64_t *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  llvm::Instruction *v535;
  int v536;
  int v537;
  uint64_t v538;
  _DWORD *v539;
  llvm::Type *v540;
  unsigned int v541;
  unsigned int v542;
  _QWORD *v543;
  unsigned int v544;
  unsigned int v545;
  uint64_t v546;
  int v547;
  uint8x8_t v548;
  uint64_t v549;
  int v550;
  unint64_t *v551;
  _QWORD *v552;
  char *v553;
  llvm::APInt **v554;
  llvm::APInt **v555;
  size_t v556;
  uint64_t *v557;
  unint64_t v558;
  _QWORD *v559;
  uint64_t v560;
  uint64_t v561;
  _BOOL4 v562;
  unint64_t v563;
  uint64_t *v564;
  unint64_t v565;
  uint64_t *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  char v571;
  uint64_t v572;
  unint64_t v573;
  unsigned int v574;
  unsigned int v575;
  unsigned int v576;
  llvm::Value **v577;
  int v578;
  _QWORD **v579;
  int v580;
  _QWORD *v581;
  llvm::APInt **v582;
  uint64_t v583;
  unsigned int v584;
  int8x8_t *v585;
  int v586;
  _QWORD **v587;
  int v588;
  llvm::APInt **v589;
  size_t v590;
  uint64_t *v591;
  unint64_t v592;
  _QWORD *v593;
  uint64_t v594;
  uint64_t v595;
  _BOOL4 v596;
  unint64_t v597;
  uint64_t *v598;
  unint64_t v599;
  uint64_t *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  char v605;
  uint64_t v606;
  unint64_t v607;
  unsigned int v608;
  unsigned int v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  llvm::Instruction *v613;
  uint64_t v614;
  llvm::APInt *v615;
  llvm::APInt *v616;
  unsigned int v617;
  int v618;
  unint64_t *v619;
  uint64_t v620;
  unsigned int PrimitiveSizeInBits;
  llvm::APInt *v622;
  size_t *v623;
  uint64_t v624;
  uint64_t v625;
  llvm::APInt *v626;
  uint64_t v627;
  unint64_t v628;
  int8x8_t v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  unint64_t v633;
  int8x8_t v634;
  _QWORD *v635;
  char *v636;
  llvm::APInt **v637;
  llvm::APInt **v638;
  char *v639;
  _QWORD *v640;
  uint64_t ***v641;
  char v642;
  uint64_t v643;
  _QWORD *v644;
  uint64_t v645;
  uint64_t v646;
  _QWORD *v647;
  uint64_t v648;
  llvm::Instruction *v649;
  uint64_t v650;
  llvm::Value *v651;
  void *v652;
  int v653;
  unsigned int v654;
  unsigned int v655;
  unsigned __int32 v656;
  int v657;
  uint64_t v658;
  uint64_t v659;
  int v660;
  uint64_t v661;
  uint64_t v662;
  unsigned int v663;
  unsigned int v664;
  int8x8_t *v665;
  int v666;
  uint64_t *v667;
  uint64_t v668;
  llvm::APInt **v669;
  uint64_t v670;
  int8x8_t *v671;
  unsigned int v672;
  uint64_t v673;
  int8x8_t *v674;
  size_t v675;
  uint64_t *v676;
  unint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  uint64_t v680;
  _BOOL4 v681;
  unint64_t v682;
  uint64_t *v683;
  unint64_t v684;
  uint64_t *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  char v690;
  int v691;
  char *v692;
  _QWORD *v693;
  char *v694;
  _QWORD *v695;
  llvm::Value ***v696;
  uint64_t ***v697;
  char v698;
  size_t v699;
  uint64_t *v700;
  unint64_t v701;
  _QWORD *v702;
  uint64_t v703;
  uint64_t v704;
  _BOOL4 v705;
  unint64_t v706;
  uint64_t *v707;
  unint64_t v708;
  uint64_t *v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  char v714;
  llvm::Instruction *v715;
  int v716;
  uint64_t v717;
  unint64_t v718;
  unint64_t v719;
  int8x8_t v720;
  llvm::Instruction *v721;
  int v722;
  unsigned int v723;
  unsigned int v724;
  uint64_t v725;
  uint64_t v726;
  _QWORD *v727;
  uint64_t v728;
  llvm::Value *v729;
  llvm::Value ****v730;
  llvm::Value *v731;
  unsigned int v732;
  unint64_t v733;
  uint64_t v734;
  uint64_t v735;
  llvm::Instruction *v736;
  char *v737;
  unsigned __int8 *v738;
  uint64_t v739;
  uint64_t *v740;
  uint64_t *v741;
  uint64_t *v742;
  uint64_t UnaryIntrinsic;
  llvm::APInt *v744;
  unsigned int v745;
  int8x8_t v746;
  unsigned int v747;
  int8x8_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t *v751;
  unint64_t v752;
  _QWORD *v753;
  uint64_t v754;
  uint64_t v755;
  _BOOL4 v756;
  unint64_t v757;
  uint64_t *v758;
  unint64_t v759;
  uint64_t *v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  char v765;
  llvm::Constant ***v766;
  uint64_t v767;
  unint64_t v768;
  int8x8_t v769;
  uint64_t v770;
  uint64_t v771;
  unint64_t v772;
  uint64_t *v773;
  uint64_t *v774;
  uint64_t *v775;
  unint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  int v780;
  unint64_t *v781;
  uint64_t *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  int v786;
  size_t v787;
  uint64_t *v788;
  unint64_t v789;
  _QWORD *v790;
  uint64_t v791;
  _BOOL4 v792;
  unint64_t v793;
  uint64_t *v794;
  unint64_t v795;
  uint64_t *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  char v801;
  int v802;
  char *v803;
  unsigned int v804;
  unint64_t v805;
  unint64_t v806;
  unsigned int v807;
  int8x8_t *v808;
  llvm::Type *v809;
  uint64_t v810;
  uint64_t *v811;
  uint64_t Declaration;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  llvm::Instruction *v820;
  int v821;
  int v822;
  size_t v823;
  uint64_t v824;
  uint64_t v825;
  unint64_t v826;
  uint64_t *v827;
  uint64_t *v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  _BOOL4 v832;
  int v833;
  const llvm::APInt *v834;
  size_t v835;
  uint64_t v836;
  unsigned int v837;
  uint64_t v838;
  int8x8_t *v839;
  uint64_t v840;
  int v841;
  char *v842;
  _QWORD *v843;
  uint64_t v844;
  char *v845;
  char *v846;
  _QWORD *v847;
  llvm::Value *v848;
  uint64_t v849;
  _QWORD *v850;
  uint64_t v851;
  uint64_t v852;
  _QWORD *v853;
  uint64_t v854;
  llvm::Instruction *v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  unint64_t v859;
  int8x8_t *v860;
  unsigned int v861;
  uint64_t v862;
  int8x8_t v863;
  BOOL v864;
  uint64_t v865;
  unint64_t v866;
  uint64_t v867;
  int v868;
  char *v869;
  uint64_t v870;
  unsigned __int8 *v871;
  uint64_t v872;
  int8x8_t v873;
  unsigned int v874;
  _QWORD *v875;
  char *v876;
  llvm::APInt **v877;
  llvm::APInt **v878;
  uint64_t v879;
  llvm::Instruction *v880;
  char *v881;
  unsigned __int8 *v882;
  uint64_t v883;
  uint64_t *v884;
  uint64_t v885;
  unsigned __int8 *v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t *v889;
  uint64_t v890;
  llvm::Value **v891;
  unsigned int v892;
  int8x8_t *v893;
  unsigned __int8 *v894;
  int v895;
  unsigned int v896;
  int8x8_t v897;
  unsigned int v898;
  unsigned int v899;
  unsigned int v900;
  unsigned int v901;
  int v902;
  unsigned int v903;
  __int32 v904;
  uint64_t v905;
  unint64_t v906;
  int8x8_t v907;
  uint64_t v908;
  uint64_t v909;
  BOOL v910;
  unint64_t v912;
  uint64_t v913;
  uint64_t *v914;
  unint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  char v920;
  uint64_t v921;
  unint64_t v922;
  unint64_t v923;
  int v924;
  char *v925;
  unsigned __int8 *v926;
  llvm::Type *v927;
  llvm::APInt *v928;
  unsigned int v929;
  uint64_t v930;
  uint64_t v931;
  unint64_t v932;
  int8x8_t v933;
  char v934;
  char v935;
  char v936;
  unsigned __int8 *v937;
  unsigned int v938;
  int v939;
  unsigned __int8 *v940;
  unsigned int v941;
  int v942;
  unsigned int v943;
  unsigned int v944;
  _QWORD *v945;
  llvm::ConstantInt *v946;
  llvm::Value **v947;
  char *v948;
  _QWORD *v949;
  llvm::Value ***v950;
  char v951;
  size_t v952;
  unsigned __int32 v953;
  uint64_t v954;
  _QWORD *v955;
  uint64_t v956;
  llvm::Value *v957;
  llvm::Value ****v958;
  llvm::Value *v959;
  uint64_t v960;
  uint64_t v961;
  llvm::Instruction *v962;
  int v963;
  llvm::ValueHandleBase *AllOnesValue;
  int v965;
  char *v966;
  llvm::ValueHandleBase **v967;
  uint64_t v968;
  llvm::ValueHandleBase ***v969;
  uint64_t v970;
  uint64_t v971;
  int v972;
  uint64_t *v973;
  uint64_t v974;
  uint64_t v975;
  llvm::Instruction *v976;
  uint64_t v977;
  int v978;
  uint64_t v979;
  uint64_t *v980;
  unint64_t v981;
  _QWORD *v982;
  uint64_t v983;
  llvm::Value **v984;
  int v985;
  _QWORD **v986;
  _QWORD *v987;
  char *v988;
  llvm::Value **v989;
  uint64_t ***v990;
  uint64_t v991;
  _QWORD *v992;
  uint64_t v993;
  llvm::Value *v994;
  _QWORD *v995;
  llvm::Value *v996;
  uint64_t v997;
  unsigned int v999;
  unsigned int v1000;
  unsigned int v1001;
  unint64_t v1002;
  unint64_t v1003;
  unsigned int v1004;
  uint64_t v1005;
  unint64_t v1006;
  size_t v1007;
  void *v1008;
  llvm::APInt *v1009;
  uint64_t v1010;
  BOOL v1011;
  char v1012;
  uint64_t v1013;
  unint64_t v1014;
  unsigned int v1015;
  unsigned int v1016;
  uint64_t v1017;
  char v1018;
  uint64_t v1019;
  unint64_t v1020;
  int8x8_t v1021;
  void *v1022;
  uint64_t v1023;
  void *v1024;
  BOOL v1025;
  int v1026;
  uint64_t v1027;
  llvm::APInt *v1028;
  unint64_t v1029;
  unsigned int v1030;
  unint64_t v1031;
  uint64_t v1032;
  unint64_t v1033;
  llvm::Instruction *v1034;
  unsigned int v1035;
  unsigned int v1036;
  char v1037;
  int8x8_t *v1038;
  int8x8_t v1039;
  unsigned int v1040;
  char v1041;
  int8x8_t *v1042;
  int8x8_t v1043;
  llvm::Type *v1044;
  unsigned int v1045;
  unsigned int v1046;
  int8x8_t *v1047;
  unsigned int v1048;
  char *v1049;
  uint64_t v1050;
  unint64_t v1051;
  uint64_t *v1052;
  uint64_t *v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  unint64_t v1057;
  uint64_t *v1058;
  unint64_t v1059;
  char *v1060;
  uint64_t v1061;
  uint64_t v1062;
  unint64_t v1063;
  int8x8_t v1064;
  int v1065;
  unint64_t v1066;
  unsigned int v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  llvm::Instruction *v1073;
  int v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  int v1084;
  void *v1085;
  llvm::Instruction *v1086;
  int v1087;
  int v1088;
  char *v1089;
  unint64_t v1090;
  llvm::APInt *v1091;
  llvm::APInt *v1092;
  uint64_t *v1093;
  unint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  int v1098;
  unint64_t *v1099;
  int v1100;
  int64_t v1101;
  unint64_t v1102;
  int v1103;
  uint64_t *v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  unsigned int v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t *v1111;
  unint64_t v1112;
  _QWORD *v1113;
  uint64_t v1114;
  uint64_t v1115;
  _BOOL4 v1116;
  unint64_t v1117;
  uint64_t *v1118;
  unint64_t v1119;
  uint64_t *v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  char v1125;
  uint64_t v1126;
  llvm::Instruction *v1127;
  char *v1128;
  unsigned __int8 *v1129;
  uint64_t v1130;
  uint64_t v1131;
  unsigned __int8 *v1132;
  uint64_t *v1133;
  uint64_t v1134;
  unint64_t v1135;
  unint64_t v1136;
  unint64_t v1137;
  llvm::ConstantInt **v1138;
  unint64_t v1139;
  void *v1140;
  uint64_t *v1141;
  unint64_t v1142;
  _QWORD *v1143;
  unint64_t v1144;
  uint64_t v1145;
  uint64_t *v1146;
  _QWORD *v1147;
  uint64_t v1148;
  void *v1149;
  int v1150;
  llvm::APInt *v1151;
  unint64_t v1152;
  _QWORD *v1153;
  uint64_t v1154;
  uint64_t *v1155;
  unint64_t v1156;
  _QWORD *v1157;
  uint64_t v1158;
  char *v1159;
  uint64_t *v1160;
  uint64_t v1161;
  uint64_t **v1162;
  uint64_t v1163;
  uint64_t *v1164;
  unint64_t v1165;
  _QWORD *v1166;
  uint64_t v1167;
  llvm::Value **v1168;
  int v1169;
  _QWORD **v1170;
  _QWORD *v1171;
  char *v1172;
  llvm::Value ***v1173;
  llvm::Value *v1174;
  uint64_t *v1175;
  uint64_t v1176;
  _QWORD *v1177;
  uint64_t v1178;
  llvm::Value *v1179;
  llvm::Value ****v1180;
  llvm::Value *v1181;
  const llvm::APInt *v1182;
  llvm::ConstantInt **v1183;
  void *v1184;
  unint64_t v1185;
  uint64_t *v1186;
  unint64_t v1187;
  _QWORD *v1188;
  uint64_t v1189;
  llvm::Value **v1190;
  char *v1191;
  llvm::Value *v1192;
  llvm::Value **v1193;
  uint64_t v1194;
  llvm::Value *v1195;
  _QWORD *v1196;
  llvm::Value *v1197;
  void *v1198;
  unint64_t v1199;
  unint64_t v1200;
  unint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  unsigned int v1204;
  unsigned int v1205;
  uint64_t v1206;
  llvm::APInt *v1207;
  uint64_t v1208;
  void *v1209;
  size_t v1210;
  unint64_t v1211;
  uint64_t *v1212;
  _QWORD *v1213;
  uint64_t v1214;
  uint64_t v1215;
  void *v1216;
  size_t v1217;
  unint64_t v1218;
  uint64_t *v1219;
  _QWORD *v1220;
  uint64_t v1221;
  unsigned int v1222;
  int8x8_t *v1223;
  uint64_t v1224;
  unsigned int v1225;
  unint64_t v1226;
  size_t v1227;
  uint64_t v1228;
  unint64_t v1229;
  unint64_t v1230;
  unsigned int v1231;
  uint64_t v1232;
  _QWORD *v1233;
  unint64_t v1234;
  uint64_t *v1235;
  uint64_t v1236;
  unsigned int v1237;
  unint64_t *v1238;
  unint64_t v1239;
  unint64_t v1240;
  unint64_t v1241;
  unsigned int v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  _QWORD *v1246;
  unint64_t v1247;
  uint64_t *v1248;
  uint64_t v1249;
  unint64_t v1250;
  unint64_t v1251;
  unint64_t v1252;
  unsigned int v1253;
  size_t v1254;
  size_t v1255;
  size_t v1256;
  size_t v1257;
  size_t v1258;
  size_t v1259;
  uint64_t *v1260;
  _QWORD *v1261;
  uint64_t v1262;
  unint64_t *v1263;
  uint64_t *v1264;
  _QWORD *v1265;
  uint64_t v1266;
  uint64_t *v1267;
  unint64_t v1268;
  _QWORD *v1269;
  uint64_t v1270;
  uint64_t *v1271;
  unint64_t v1272;
  _QWORD *v1273;
  uint64_t v1274;
  size_t v1275;
  size_t v1276;
  unint64_t v1277;
  uint64_t *v1278;
  llvm::APInt *v1279;
  uint64_t v1280;
  size_t v1281;
  unint64_t v1282;
  size_t v1283;
  size_t v1284;
  unint64_t v1285;
  size_t v1286;
  llvm::APInt *v1287;
  unint64_t v1288;
  _QWORD *v1289;
  uint64_t v1290;
  uint64_t *v1291;
  unint64_t v1292;
  _QWORD *v1293;
  uint64_t v1294;
  uint64_t *v1295;
  unint64_t v1296;
  _QWORD *v1297;
  uint64_t v1298;
  uint64_t *v1299;
  unint64_t v1300;
  _QWORD *v1301;
  uint64_t v1302;
  uint64_t v1303;
  size_t v1304;
  uint64_t *v1305;
  unint64_t v1306;
  _QWORD *v1307;
  uint64_t v1308;
  size_t v1309;
  uint64_t *v1310;
  unint64_t v1311;
  _QWORD *v1312;
  uint64_t v1313;
  uint64_t v1314;
  _QWORD *v1315;
  uint64_t *v1316;
  unint64_t v1317;
  uint64_t v1318;
  unint64_t v1319;
  unint64_t v1320;
  uint64_t *v1321;
  _QWORD *v1322;
  uint64_t v1323;
  uint64_t *v1324;
  unint64_t v1325;
  _QWORD *v1326;
  uint64_t v1327;
  llvm::ConstantInt *v1328;
  llvm::Value **v1329;
  char *v1330;
  char *v1331;
  llvm::Value ***v1332;
  uint64_t ***v1333;
  uint64_t v1334;
  _QWORD *v1335;
  uint64_t v1336;
  llvm::Value *v1337;
  llvm::Value ****v1338;
  llvm::Value *v1339;
  char v1340;
  char v1341;
  llvm::Value **v1342;
  char *v1343;
  _QWORD *v1344;
  llvm::Value ***v1345;
  char v1346;
  uint64_t v1347;
  _QWORD *v1348;
  uint64_t v1349;
  llvm::Value *v1350;
  llvm::Value ****v1351;
  llvm::Value *v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  size_t v1358;
  unint64_t v1359;
  int v1360;
  void *v1361;
  llvm::Instruction *__n;
  unsigned int v1363;
  size_t v1364;
  size_t v1365;
  unint64_t v1366;
  unsigned int v1367[2];
  unsigned int v1368[2];
  llvm::APInt *v1369;
  llvm::APInt *v1370;
  llvm::Type *v1371;
  void *v1372;
  unsigned int v1373;
  unint64_t v1374;
  unsigned int v1375;
  void *v1376;
  unsigned int v1377;
  unint64_t v1378;
  unsigned int v1379;
  void *v1380;
  unsigned int v1381;
  llvm::APInt *v1382;
  void *v1383;
  unsigned int v1384;
  void *v1385;
  unsigned int v1386;
  llvm::APInt *v1387;
  __int128 v1388;
  unsigned __int8 *v1389;
  __int16 v1390;
  llvm::APInt *v1391;
  unint64_t v1392;
  unsigned int v1393;
  void *v1394;
  unsigned int v1395;
  void *v1396;
  unsigned int v1397;
  void *v1398;
  unsigned int v1399;
  void *v1400;
  unsigned int v1401;
  void *v1402;
  unsigned int v1403;
  void *v1404;
  unsigned int v1405;
  void *v1406;
  unsigned int v1407;
  uint64_t *v1408;
  unsigned int *v1409;
  llvm::Instruction **v1410;
  void **v1411;
  int8x8_t *v1412;
  unsigned int *v1413;
  void **v1414;
  void *v1415;
  unsigned int v1416;
  void *v1417;
  unsigned int v1418;
  unint64_t v1419;
  unsigned int v1420;
  unint64_t v1421;
  unsigned int v1422;
  llvm::Instruction *v1423;
  unsigned int v1424;
  unsigned int v1425;
  uint64_t v1426;
  unsigned int v1427;
  int8x8_t v1428;
  llvm::APInt **v1429;
  unint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  char v1433;
  uint64_t v1434;
  __int128 v1435;
  unsigned __int8 *v1436[3];

  v6 = a6;
  v1436[1] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  v11 = this[1].u32[0];
  v1424 = v11;
  v1425 = a5;
  if (*(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    v12 = *(unsigned int **)(a1 + 56);
    v13 = *(void ***)(a1 + 72);
    v14 = *(uint64_t **)(a1 + 80);
    if (a6 && *((_QWORD *)a6 + 5))
      goto LABEL_4;
    goto LABEL_37;
  }
  v16 = *(llvm::Type **)a2;
  v17 = a4[1].u32[0];
  if (v17 > 0x40)
    bzero(*(void **)a4, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
  else
    *a4 = 0;
  v18 = (void **)&a4[2];
  v19 = a4[3].u32[0];
  if (v19 > 0x40)
    bzero(*v18, ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
  else
    *v18 = 0;
  v20 = this[1].u32[0];
  if (v20 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) != v20)
      goto LABEL_13;
  }
  else if (*this)
  {
LABEL_13:
    if (a5 == 6 || *((_BYTE *)v16 + 8) == 19)
      return 0;
    v1371 = v16;
    v23 = *(unsigned __int8 *)(a2 + 16);
    if (v23 <= 0x1B)
      v24 = 0;
    else
      v24 = a2;
    v1423 = (llvm::Instruction *)v24;
    if (!v24)
    {
      v12 = *(unsigned int **)(a1 + 56);
      v13 = *(void ***)(a1 + 72);
      v14 = *(uint64_t **)(a1 + 80);
      if (v6 && *((_QWORD *)v6 + 5))
        goto LABEL_4;
      if (v23 >= 0x1C)
      {
        v6 = (llvm::Instruction *)a2;
        if (*(_QWORD *)(a2 + 40))
          goto LABEL_4;
      }
LABEL_37:
      v6 = 0;
LABEL_4:
      v1408 = v14;
      v1409 = v12;
      v1410 = (llvm::Instruction **)v6;
      v1411 = v13;
      v1412 = 0;
      LOBYTE(v1413) = 1;
      sub_1C4F82B7C(a2, a4, a5, (const llvm::DataLayout **)&v1408);
      return 0;
    }
    if (a5)
    {
      v25 = *(_QWORD *)(v24 + 8);
      if (!v25 || *(_QWORD *)(v25 + 8))
      {
        v26 = *(llvm::Constant ****)v24;
        LODWORD(v1429) = v20;
        if (v20 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v1428, 0, 0);
          LODWORD(v1431) = v20;
          llvm::APInt::initSlowCase((llvm::APInt *)&v1430, 0, 0);
          LODWORD(v1388) = v20;
          llvm::APInt::initSlowCase((llvm::APInt *)&v1387, 0, 0);
          LODWORD(v1389) = v20;
          llvm::APInt::initSlowCase((llvm::APInt *)((char *)&v1388 + 8), 0, 0);
        }
        else
        {
          LODWORD(v1431) = v20;
          v1428 = 0;
          v1430 = 0;
          LODWORD(v1388) = v20;
          v1387 = 0;
          LODWORD(v1389) = v20;
          *((_QWORD *)&v1388 + 1) = 0;
        }
        switch(*(_BYTE *)(v24 + 16))
        {
          case '7':
            v27 = *(unsigned int **)(a1 + 56);
            v28 = *(void ***)(a1 + 72);
            if (!v6 || !*((_QWORD *)v6 + 5))
            {
              if (*(_QWORD *)(v24 + 40))
                v6 = (llvm::Instruction *)a2;
              else
                v6 = 0;
            }
            v1408 = *(uint64_t **)(a1 + 80);
            v1409 = v27;
            v1410 = (llvm::Instruction **)v6;
            v1411 = v28;
            v1412 = 0;
            LOBYTE(v1413) = 1;
            sub_1C4F82B7C(v24, a4, a5, (const llvm::DataLayout **)&v1408);
            v30 = a4[1].u32[0];
            if (v30 > 0x40)
            {
              v31 = operator new[]();
              memcpy((void *)v31, *(const void **)a4, ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8);
              v134 = (uint64_t *)a4[2];
              v135 = (unint64_t)(v30 + 63) >> 6;
              v136 = (_QWORD *)v31;
              do
              {
                v137 = *v134++;
                *v136++ |= v137;
                --v135;
              }
              while (v135);
            }
            else
            {
              v31 = *(_QWORD *)&a4[2] | *(_QWORD *)a4;
            }
            v138 = this[1].u32[0];
            if (v138 > 0x40)
            {
              v146 = (unint64_t)(v138 + 63) >> 6;
              v147 = (uint64_t *)*this;
              v148 = v146 - 1;
              v149 = (uint64_t *)v31;
              do
              {
                v151 = *v147++;
                v150 = v151;
                v152 = *v149++;
                v153 = v150 & ~v152;
                v139 = v153 == 0;
                v1011 = v148-- != 0;
                v154 = v1011;
              }
              while (!v153 && (v154 & 1) != 0);
            }
            else
            {
              v139 = (*(_QWORD *)this & ~v31) == 0;
            }
            if (v30 >= 0x41 && v31)
              MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
            if (v139)
              goto LABEL_229;
            v1415 = 0;
            v1434 = 0;
            v1426 = 0;
            v155 = this[1].u32[0];
            v1408 = &v1426;
            v1409 = (unsigned int *)&v1434;
            v1410 = 0;
            v1411 = &v1415;
            v1412 = 0;
            v156 = *(unsigned __int8 *)(v24 + 16);
            if (v156 == 5)
            {
              if (*(_WORD *)(v24 + 18) != 27)
                goto LABEL_716;
              v296 = *(_QWORD *)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF));
              v297 = *(unsigned __int8 *)(v296 + 16);
              if (v297 == 5)
              {
                if (*(_WORD *)(v296 + 18) != 25)
                  goto LABEL_716;
                v518 = v296 - 32 * (*(_DWORD *)(v296 + 20) & 0x7FFFFFF);
                if (!*(_QWORD *)v518)
                  goto LABEL_716;
                v1426 = *(_QWORD *)v518;
                if (!sub_1C4D8A004((uint64_t)&v1409, *(llvm::Constant **)(v518 + 32)))
                  goto LABEL_716;
              }
              else
              {
                if (v297 != 53)
                  goto LABEL_716;
                if (!*(_QWORD *)(v296 - 64))
                  goto LABEL_716;
                v1426 = *(_QWORD *)(v296 - 64);
                if ((sub_1C4D89F84((uint64_t)&v1409, *(unsigned __int8 **)(v296 - 32)) & 1) == 0)
                  goto LABEL_716;
              }
              if (!sub_1C4D8A004((uint64_t)&v1411, *(llvm::Constant **)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) + 32)))goto LABEL_716;
            }
            else
            {
              if (v156 != 55)
                goto LABEL_716;
              v157 = *(_QWORD *)(v24 - 64);
              v158 = *(unsigned __int8 *)(v157 + 16);
              if (v158 == 5)
              {
                if (*(_WORD *)(v157 + 18) != 25)
                  goto LABEL_716;
                v416 = v157 - 32 * (*(_DWORD *)(v157 + 20) & 0x7FFFFFF);
                if (!*(_QWORD *)v416)
                  goto LABEL_716;
                v1426 = *(_QWORD *)v416;
                if (!sub_1C4D8A004((uint64_t)&v1409, *(llvm::Constant **)(v416 + 32)))
                  goto LABEL_716;
              }
              else
              {
                if (v158 != 53)
                  goto LABEL_716;
                if (!*(_QWORD *)(v157 - 64))
                  goto LABEL_716;
                v1426 = *(_QWORD *)(v157 - 64);
                if ((sub_1C4D89F84((uint64_t)&v1409, *(unsigned __int8 **)(v157 - 32)) & 1) == 0)
                  goto LABEL_716;
              }
              if ((sub_1C4D89F84((uint64_t)&v1411, *(unsigned __int8 **)(v24 - 32)) & 1) == 0)
                goto LABEL_716;
            }
            v519 = (unint64_t **)v1434;
            if ((void *)v1434 != v1415)
              goto LABEL_716;
            v732 = *(_DWORD *)(v1434 + 8);
            if (v732 >= 0x41)
            {
              if (v732 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v1434) >= 0x41)
                goto LABEL_716;
              v733 = **v519;
            }
            else
            {
              v733 = *(_QWORD *)v1434;
            }
            if (v733 >= v155)
              goto LABEL_716;
            v861 = v155 - v733;
            v1420 = v155;
            if (v155 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v1419, 0, 0);
            else
              v1419 = 0;
            sub_1C4912E54(&v1419, 0, v861);
            v862 = this[1].u32[0];
            if (v862 > 0x40)
            {
              v905 = 0;
              v906 = v862 + 63;
              v907 = *this;
              v863 = (int8x8_t)v1419;
              v908 = ((v906 >> 3) & 0x3FFFFFF8) - 8;
              do
              {
                v909 = *(_QWORD *)(*(_QWORD *)&v907 + v905) & ~*(_QWORD *)(v1419 + v905);
                v864 = v909 == 0;
                if (v909)
                  v910 = 1;
                else
                  v910 = v908 == v905;
                v905 += 8;
              }
              while (!v910);
            }
            else
            {
              v863 = (int8x8_t)v1419;
              v864 = (*(_QWORD *)this & ~v1419) == 0;
            }
            if (v1420 >= 0x41 && *(_QWORD *)&v863 != 0)
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v863, 0x1000C8000313F17);
            if (!v864)
              goto LABEL_716;
            IntegerValue = v1426;
            goto LABEL_717;
          case '8':
            v64 = *(_DWORD *)(v24 + 20);
            if ((v64 & 0x40000000) != 0)
              v65 = *(_QWORD *)(v24 - 8);
            else
              v65 = v24 - 32 * (v64 & 0x7FFFFFF);
            v140 = *(_QWORD *)(v65 + 32);
            v141 = *(unsigned int **)(a1 + 56);
            v142 = *(void ***)(a1 + 72);
            if (!v6 || (v143 = (llvm::Instruction **)v6, !*((_QWORD *)v6 + 5)))
            {
              if (!v140
                || *(unsigned __int8 *)(v140 + 16) < 0x1Cu
                || (v143 = (llvm::Instruction **)v140, !*(_QWORD *)(v140 + 40)))
              {
                v143 = 0;
              }
            }
            v1408 = *(uint64_t **)(a1 + 80);
            v1409 = v141;
            v1410 = v143;
            v1411 = v142;
            v1412 = 0;
            LOBYTE(v1413) = 1;
            sub_1C4F82B7C(v140, (int8x8_t *)&v1387, a5 + 1, (const llvm::DataLayout **)&v1408);
            v144 = *(_DWORD *)(v24 + 20);
            if ((v144 & 0x40000000) != 0)
              v145 = *(uint64_t **)(v24 - 8);
            else
              v145 = (uint64_t *)(v24 - 32 * (v144 & 0x7FFFFFF));
            v159 = *v145;
            v160 = *(unsigned int **)(a1 + 56);
            v161 = *(void ***)(a1 + 72);
            if (!v6 || !*((_QWORD *)v6 + 5))
            {
              if (!v159
                || *(unsigned __int8 *)(v159 + 16) < 0x1Cu
                || (v6 = (llvm::Instruction *)v159, !*(_QWORD *)(v159 + 40)))
              {
                v6 = 0;
              }
            }
            v1408 = *(uint64_t **)(a1 + 80);
            v1409 = v160;
            v1410 = (llvm::Instruction **)v6;
            v1411 = v161;
            v1412 = 0;
            LOBYTE(v1413) = 1;
            sub_1C4F82B7C(v159, &v1428, a5 + 1, (const llvm::DataLayout **)&v1408);
            v162 = v1429;
            v80 = v26;
            if (v1429 > 0x40)
            {
              v1257 = (((unint64_t)v1429 + 63) >> 3) & 0x3FFFFFF8;
              v163 = operator new[]();
              memcpy((void *)v163, *(const void **)&v1428, v1257);
            }
            else
            {
              v163 = (uint64_t)v1428;
            }
            v164 = v1431;
            if (v1431 > 0x40)
            {
              v1258 = (((unint64_t)v1431 + 63) >> 3) & 0x3FFFFFF8;
              v165 = operator new[]();
              memcpy((void *)v165, (const void *)v1430, v1258);
            }
            else
            {
              v165 = v1430;
            }
            if (v162 > 0x40)
            {
              v1151 = v1387;
              v1152 = (unint64_t)(v162 + 63) >> 6;
              v1153 = (_QWORD *)v163;
              do
              {
                v1154 = *(_QWORD *)v1151;
                v1151 = (llvm::APInt *)((char *)v1151 + 8);
                *v1153++ |= v1154;
                --v1152;
              }
              while (v1152);
            }
            else
            {
              v163 |= (unint64_t)v1387;
            }
            if (v164 > 0x40)
            {
              v1155 = (uint64_t *)*((_QWORD *)&v1388 + 1);
              v1156 = (unint64_t)(v164 + 63) >> 6;
              v1157 = (_QWORD *)v165;
              do
              {
                v1158 = *v1155++;
                *v1157++ &= v1158;
                --v1156;
              }
              while (v1156);
            }
            else
            {
              v165 &= *((_QWORD *)&v1388 + 1);
            }
            if (a4[1].i32[0] >= 0x41u && *(_QWORD *)a4)
              ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
            *a4 = (int8x8_t)v163;
            a4[1].i32[0] = v162;
            if (a4[3].i32[0] >= 0x41u && *v18)
            {
              MEMORY[0x1CAA32F9C](*v18, 0x1000C8000313F17);
              LODWORD(v162) = a4[1].i32[0];
            }
            a4[2] = (int8x8_t)v165;
            a4[3].i32[0] = v164;
            if (v162 > 0x40)
            {
              v167 = v162 + 63;
              v166 = operator new[]();
              memcpy((void *)v166, *(const void **)a4, (v167 >> 3) & 0x3FFFFFF8);
              v168 = (uint64_t *)a4[2];
              v169 = v167 >> 6;
              v170 = (_QWORD *)v166;
              do
              {
                v171 = *v168++;
                *v170++ |= v171;
                --v169;
              }
              while (v169);
            }
            else
            {
              v166 = *(_QWORD *)a4 | v165;
            }
            v172 = this[1].u32[0];
            if (v172 > 0x40)
            {
              v174 = (unint64_t)(v172 + 63) >> 6;
              v175 = (uint64_t *)*this;
              v176 = v174 - 1;
              v177 = (uint64_t *)v166;
              do
              {
                v179 = *v175++;
                v178 = v179;
                v180 = *v177++;
                v181 = v178 & ~v180;
                v173 = v181 == 0;
                v1011 = v176-- != 0;
                v182 = v1011;
              }
              while (!v181 && (v182 & 1) != 0);
            }
            else
            {
              v173 = (*(_QWORD *)this & ~v166) == 0;
            }
            if (v162 >= 0x41 && v166)
              MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
            if (v173)
              goto LABEL_212;
            v184 = v1429;
            if (v1429 > 0x40)
            {
              v274 = (((unint64_t)v1429 + 63) >> 3) & 0x3FFFFFF8;
              v185 = operator new[]();
              memcpy((void *)v185, *(const void **)&v1428, v274);
              v275 = (uint64_t *)*((_QWORD *)&v1388 + 1);
              v276 = (unint64_t)(v184 + 63) >> 6;
              v277 = (_QWORD *)v185;
              do
              {
                v278 = *v275++;
                *v277++ |= v278;
                --v276;
              }
              while (v276);
            }
            else
            {
              v185 = *((_QWORD *)&v1388 + 1) | *(_QWORD *)&v1428;
            }
            v279 = this[1].u32[0];
            if (v279 > 0x40)
            {
              v281 = (unint64_t)(v279 + 63) >> 6;
              v282 = (uint64_t *)*this;
              v283 = v281 - 1;
              v284 = (uint64_t *)v185;
              do
              {
                v286 = *v282++;
                v285 = v286;
                v287 = *v284++;
                v288 = v285 & ~v287;
                v280 = v288 == 0;
                v1011 = v283-- != 0;
                v289 = v1011;
              }
              while (!v288 && (v289 & 1) != 0);
            }
            else
            {
              v280 = (*(_QWORD *)this & ~v185) == 0;
            }
            if (v184 >= 0x41 && v185)
              MEMORY[0x1CAA32F9C](v185, 0x1000C8000313F17);
            if (v280)
              goto LABEL_336;
            v264 = v1388;
            if (v1388 > 0x40)
            {
              v374 = (((unint64_t)v1388 + 63) >> 3) & 0x3FFFFFF8;
              v265 = operator new[]();
              memcpy((void *)v265, v1387, v374);
              v375 = (uint64_t *)v1430;
              v376 = (unint64_t)(v264 + 63) >> 6;
              v377 = (_QWORD *)v265;
              do
              {
                v378 = *v375++;
                *v377++ |= v378;
                --v376;
              }
              while (v376);
            }
            else
            {
              v265 = v1430 | (unint64_t)v1387;
            }
            v379 = this[1].u32[0];
            if (v379 <= 0x40)
              goto LABEL_453;
            v382 = (unint64_t)(v379 + 63) >> 6;
            v383 = (uint64_t *)*this;
            v384 = v382 - 1;
            v385 = (uint64_t *)v265;
            do
            {
              v387 = *v383++;
              v386 = v387;
              v388 = *v385++;
              v389 = v386 & ~v388;
              v372 = v389 == 0;
              v1011 = v384-- != 0;
              v390 = v1011;
            }
            while (!v389 && (v390 & 1) != 0);
            goto LABEL_454;
          case '9':
            v60 = *(_DWORD *)(v24 + 20);
            if ((v60 & 0x40000000) != 0)
              v61 = *(_QWORD *)(v24 - 8);
            else
              v61 = v24 - 32 * (v60 & 0x7FFFFFF);
            v70 = *(_QWORD *)(v61 + 32);
            v71 = *(unsigned int **)(a1 + 56);
            v72 = *(void ***)(a1 + 72);
            if (!v6 || (v73 = (llvm::Instruction **)v6, !*((_QWORD *)v6 + 5)))
            {
              if (!v70
                || *(unsigned __int8 *)(v70 + 16) < 0x1Cu
                || (v73 = (llvm::Instruction **)v70, !*(_QWORD *)(v70 + 40)))
              {
                v73 = 0;
              }
            }
            v1408 = *(uint64_t **)(a1 + 80);
            v1409 = v71;
            v1410 = v73;
            v1411 = v72;
            v1412 = 0;
            LOBYTE(v1413) = 1;
            sub_1C4F82B7C(v70, (int8x8_t *)&v1387, a5 + 1, (const llvm::DataLayout **)&v1408);
            v74 = *(_DWORD *)(v24 + 20);
            if ((v74 & 0x40000000) != 0)
              v75 = *(uint64_t **)(v24 - 8);
            else
              v75 = (uint64_t *)(v24 - 32 * (v74 & 0x7FFFFFF));
            v76 = *v75;
            v77 = *(unsigned int **)(a1 + 56);
            v78 = *(void ***)(a1 + 72);
            if (!v6 || !*((_QWORD *)v6 + 5))
            {
              if (!v76
                || *(unsigned __int8 *)(v76 + 16) < 0x1Cu
                || (v6 = (llvm::Instruction *)v76, !*(_QWORD *)(v76 + 40)))
              {
                v6 = 0;
              }
            }
            v1408 = *(uint64_t **)(a1 + 80);
            v1409 = v77;
            v1410 = (llvm::Instruction **)v6;
            v1411 = v78;
            v1412 = 0;
            LOBYTE(v1413) = 1;
            sub_1C4F82B7C(v76, &v1428, a5 + 1, (const llvm::DataLayout **)&v1408);
            v79 = v1429;
            v80 = v26;
            if (v1429 > 0x40)
            {
              v1255 = (((unint64_t)v1429 + 63) >> 3) & 0x3FFFFFF8;
              v81 = operator new[]();
              memcpy((void *)v81, *(const void **)&v1428, v1255);
            }
            else
            {
              v81 = (uint64_t)v1428;
            }
            v82 = v1431;
            if (v1431 > 0x40)
            {
              v1256 = (((unint64_t)v1431 + 63) >> 3) & 0x3FFFFFF8;
              v83 = operator new[]();
              memcpy((void *)v83, (const void *)v1430, v1256);
            }
            else
            {
              v83 = v1430;
            }
            if (v79 > 0x40)
            {
              v1287 = v1387;
              v1288 = (unint64_t)(v79 + 63) >> 6;
              v1289 = (_QWORD *)v81;
              do
              {
                v1290 = *(_QWORD *)v1287;
                v1287 = (llvm::APInt *)((char *)v1287 + 8);
                *v1289++ &= v1290;
                --v1288;
              }
              while (v1288);
            }
            else
            {
              v81 &= (unint64_t)v1387;
            }
            if (v82 > 0x40)
            {
              v1291 = (uint64_t *)*((_QWORD *)&v1388 + 1);
              v1292 = (unint64_t)(v82 + 63) >> 6;
              v1293 = (_QWORD *)v83;
              do
              {
                v1294 = *v1291++;
                *v1293++ |= v1294;
                --v1292;
              }
              while (v1292);
            }
            else
            {
              v83 |= *((_QWORD *)&v1388 + 1);
            }
            if (a4[1].i32[0] >= 0x41u && *(_QWORD *)a4)
              ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
            *a4 = (int8x8_t)v81;
            a4[1].i32[0] = v79;
            if (a4[3].i32[0] >= 0x41u && *v18)
            {
              MEMORY[0x1CAA32F9C](*v18, 0x1000C8000313F17);
              LODWORD(v79) = a4[1].i32[0];
            }
            a4[2] = (int8x8_t)v83;
            a4[3].i32[0] = v82;
            if (v79 > 0x40)
            {
              v85 = v79 + 63;
              v84 = operator new[]();
              memcpy((void *)v84, *(const void **)a4, (v85 >> 3) & 0x3FFFFFF8);
              v86 = (uint64_t *)a4[2];
              v87 = v85 >> 6;
              v88 = (_QWORD *)v84;
              do
              {
                v89 = *v86++;
                *v88++ |= v89;
                --v87;
              }
              while (v87);
            }
            else
            {
              v84 = *(_QWORD *)a4 | v83;
            }
            v90 = this[1].u32[0];
            if (v90 > 0x40)
            {
              v92 = (unint64_t)(v90 + 63) >> 6;
              v93 = (uint64_t *)*this;
              v94 = v92 - 1;
              v95 = (uint64_t *)v84;
              do
              {
                v97 = *v93++;
                v96 = v97;
                v98 = *v95++;
                v99 = v96 & ~v98;
                v91 = v99 == 0;
                v1011 = v94-- != 0;
                v100 = v1011;
              }
              while (!v99 && (v100 & 1) != 0);
            }
            else
            {
              v91 = (*(_QWORD *)this & ~v84) == 0;
            }
            if (v79 >= 0x41 && v84)
              MEMORY[0x1CAA32F9C](v84, 0x1000C8000313F17);
            if (v91)
            {
LABEL_212:
              v183 = v80;
LABEL_230:
              IntegerValue = (unint64_t)llvm::Constant::getIntegerValue(v183, (llvm::Type *)v18, v29);
              goto LABEL_717;
            }
            v101 = v1431;
            if (v1431 > 0x40)
            {
              v248 = (((unint64_t)v1431 + 63) >> 3) & 0x3FFFFFF8;
              v102 = operator new[]();
              memcpy((void *)v102, (const void *)v1430, v248);
              v249 = v1387;
              v250 = (unint64_t)(v101 + 63) >> 6;
              v251 = (_QWORD *)v102;
              do
              {
                v252 = *(_QWORD *)v249;
                v249 = (llvm::APInt *)((char *)v249 + 8);
                *v251++ |= v252;
                --v250;
              }
              while (v250);
            }
            else
            {
              v102 = (unint64_t)v1387 | v1430;
            }
            v253 = this[1].u32[0];
            if (v253 > 0x40)
            {
              v255 = (unint64_t)(v253 + 63) >> 6;
              v256 = (uint64_t *)*this;
              v257 = v255 - 1;
              v258 = (uint64_t *)v102;
              do
              {
                v260 = *v256++;
                v259 = v260;
                v261 = *v258++;
                v262 = v259 & ~v261;
                v254 = v262 == 0;
                v1011 = v257-- != 0;
                v263 = v1011;
              }
              while (!v262 && (v263 & 1) != 0);
            }
            else
            {
              v254 = (*(_QWORD *)this & ~v102) == 0;
            }
            if (v101 >= 0x41 && v102)
              MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
            if (v254)
              goto LABEL_336;
            v264 = v1389;
            if (v1389 > 0x40)
            {
              v358 = (((unint64_t)v1389 + 63) >> 3) & 0x3FFFFFF8;
              v265 = operator new[]();
              memcpy((void *)v265, *((const void **)&v1388 + 1), v358);
              v359 = (uint64_t *)v1428;
              v360 = (unint64_t)(v264 + 63) >> 6;
              v361 = (_QWORD *)v265;
              do
              {
                v362 = *v359++;
                *v361++ |= v362;
                --v360;
              }
              while (v360);
            }
            else
            {
              v265 = *(_QWORD *)&v1428 | *((_QWORD *)&v1388 + 1);
            }
            v363 = this[1].u32[0];
            if (v363 <= 0x40)
            {
LABEL_453:
              v372 = (*(_QWORD *)this & ~v265) == 0;
            }
            else
            {
              v364 = (unint64_t)(v363 + 63) >> 6;
              v365 = (uint64_t *)*this;
              v366 = v364 - 1;
              v367 = (uint64_t *)v265;
              do
              {
                v369 = *v365++;
                v368 = v369;
                v370 = *v367++;
                v371 = v368 & ~v370;
                v372 = v371 == 0;
                v1011 = v366-- != 0;
                v373 = v1011;
              }
              while (!v371 && (v373 & 1) != 0);
            }
LABEL_454:
            if (v264 >= 0x41 && v265)
              MEMORY[0x1CAA32F9C](v265, 0x1000C8000313F17);
            if (v372)
              goto LABEL_458;
            goto LABEL_716;
          case ':':
            v62 = *(_DWORD *)(v24 + 20);
            if ((v62 & 0x40000000) != 0)
              v63 = *(_QWORD *)(v24 - 8);
            else
              v63 = v24 - 32 * (v62 & 0x7FFFFFF);
            v103 = *(_QWORD *)(v63 + 32);
            v104 = *(unsigned int **)(a1 + 56);
            v105 = *(void ***)(a1 + 72);
            if (!v6 || (v106 = (llvm::Instruction **)v6, !*((_QWORD *)v6 + 5)))
            {
              if (!v103
                || *(unsigned __int8 *)(v103 + 16) < 0x1Cu
                || (v106 = (llvm::Instruction **)v103, !*(_QWORD *)(v103 + 40)))
              {
                v106 = 0;
              }
            }
            v1408 = *(uint64_t **)(a1 + 80);
            v1409 = v104;
            v1410 = v106;
            v1411 = v105;
            v1412 = 0;
            LOBYTE(v1413) = 1;
            sub_1C4F82B7C(v103, (int8x8_t *)&v1387, a5 + 1, (const llvm::DataLayout **)&v1408);
            v107 = *(_DWORD *)(v24 + 20);
            if ((v107 & 0x40000000) != 0)
              v108 = *(uint64_t **)(v24 - 8);
            else
              v108 = (uint64_t *)(v24 - 32 * (v107 & 0x7FFFFFF));
            v109 = *v108;
            v110 = *(unsigned int **)(a1 + 56);
            v111 = *(void ***)(a1 + 72);
            if (!v6 || !*((_QWORD *)v6 + 5))
            {
              if (!v109
                || *(unsigned __int8 *)(v109 + 16) < 0x1Cu
                || (v6 = (llvm::Instruction *)v109, !*(_QWORD *)(v109 + 40)))
              {
                v6 = 0;
              }
            }
            v1408 = *(uint64_t **)(a1 + 80);
            v1409 = v110;
            v1410 = (llvm::Instruction **)v6;
            v1411 = v111;
            v1412 = 0;
            LOBYTE(v1413) = 1;
            sub_1C4F82B7C(v109, &v1428, a5 + 1, (const llvm::DataLayout **)&v1408);
            LODWORD(v1409) = (_DWORD)v1429;
            if (v1429 > 0x40)
            {
              v1408 = (uint64_t *)operator new[]();
              memcpy(v1408, *(const void **)&v1428, (((unint64_t)v1409 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v1408 = (uint64_t *)v1428;
            }
            LODWORD(v1411) = v1431;
            if (v1431 > 0x40)
            {
              v1410 = (llvm::Instruction **)operator new[]();
              memcpy(v1410, (const void *)v1430, (((unint64_t)v1411 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v1410 = (llvm::Instruction **)v1430;
            }
            llvm::KnownBits::operator^=((const void **)&v1408, &v1387);
            v112 = (int)v1409;
            v113 = v1408;
            v114 = (int)v1411;
            v115 = v1410;
            LODWORD(v1409) = 0;
            LODWORD(v1411) = 0;
            if (a4[1].i32[0] >= 0x41u && *(_QWORD *)a4)
              ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
            *a4 = (int8x8_t)v113;
            a4[1].i32[0] = v112;
            if (a4[3].i32[0] >= 0x41u && *v18)
              MEMORY[0x1CAA32F9C](*v18, 0x1000C8000313F17);
            a4[2] = (int8x8_t)v115;
            a4[3].i32[0] = v114;
            if (v1411 >= 0x41 && v1410)
              MEMORY[0x1CAA32F9C](v1410, 0x1000C8000313F17);
            if (v1409 >= 0x41 && v1408)
              MEMORY[0x1CAA32F9C](v1408, 0x1000C8000313F17);
            v116 = a4[1].u32[0];
            if (v116 > 0x40)
            {
              v117 = operator new[]();
              memcpy((void *)v117, *(const void **)a4, ((unint64_t)(v116 + 63) >> 3) & 0x3FFFFFF8);
              v118 = (uint64_t *)a4[2];
              v119 = (unint64_t)(v116 + 63) >> 6;
              v120 = (_QWORD *)v117;
              do
              {
                v121 = *v118++;
                *v120++ |= v121;
                --v119;
              }
              while (v119);
            }
            else
            {
              v117 = *(_QWORD *)&a4[2] | *(_QWORD *)a4;
            }
            v122 = this[1].u32[0];
            if (v122 > 0x40)
            {
              v124 = (unint64_t)(v122 + 63) >> 6;
              v125 = (uint64_t *)*this;
              v126 = v124 - 1;
              v127 = (uint64_t *)v117;
              do
              {
                v129 = *v125++;
                v128 = v129;
                v130 = *v127++;
                v131 = v128 & ~v130;
                v123 = v131 == 0;
                v1011 = v126-- != 0;
                v132 = v1011;
              }
              while (!v131 && (v132 & 1) != 0);
            }
            else
            {
              v123 = (*(_QWORD *)this & ~v117) == 0;
            }
            if (v116 >= 0x41 && v117)
              MEMORY[0x1CAA32F9C](v117, 0x1000C8000313F17);
            if (v123)
              goto LABEL_229;
            v133 = this[1].u32[0];
            if (v133 > 0x40)
            {
              v266 = (unint64_t)(v133 + 63) >> 6;
              v267 = (uint64_t *)*this;
              v268 = v1387;
              v269 = (uint64_t *)*this;
              v270 = v266;
              while (1)
              {
                v272 = *v269++;
                v271 = v272;
                v273 = *(_QWORD *)v268;
                v268 = (llvm::APInt *)((char *)v268 + 8);
                if ((v271 & ~v273) != 0)
                  break;
                if (!--v270)
                  goto LABEL_336;
              }
              v292 = (uint64_t *)v1428;
              while (1)
              {
                v294 = *v267++;
                v293 = v294;
                v295 = *v292++;
                if ((v293 & ~v295) != 0)
                  break;
                if (!--v266)
                  goto LABEL_458;
              }
            }
            else
            {
              if ((*(_QWORD *)this & ~(unint64_t)v1387) == 0)
              {
LABEL_336:
                v290 = *(_DWORD *)(v24 + 20);
                if ((v290 & 0x40000000) != 0)
                  v291 = *(unint64_t **)(v24 - 8);
                else
                  v291 = (unint64_t *)(v24 - 32 * (v290 & 0x7FFFFFF));
                IntegerValue = *v291;
                goto LABEL_717;
              }
              if ((*(_QWORD *)this & ~*(_QWORD *)&v1428) == 0)
              {
LABEL_458:
                v380 = *(_DWORD *)(v24 + 20);
                if ((v380 & 0x40000000) != 0)
                  v381 = *(_QWORD *)(v24 - 8);
                else
                  v381 = v24 - 32 * (v380 & 0x7FFFFFF);
                IntegerValue = *(_QWORD *)(v381 + 32);
LABEL_717:
                if (v1389 >= 0x41 && *((_QWORD *)&v1388 + 1))
                  MEMORY[0x1CAA32F9C](*((_QWORD *)&v1388 + 1), 0x1000C8000313F17);
                if (v1388 >= 0x41 && v1387)
                  MEMORY[0x1CAA32F9C](v1387, 0x1000C8000313F17);
                if (v1431 >= 0x41 && v1430)
                  MEMORY[0x1CAA32F9C](v1430, 0x1000C8000313F17);
                if (v1429 < 0x41)
                  return (llvm::UndefValue *)IntegerValue;
                v520 = v1428;
                if (!*(_QWORD *)&v1428)
                  return (llvm::UndefValue *)IntegerValue;
                goto LABEL_1668;
              }
            }
LABEL_716:
            IntegerValue = 0;
            goto LABEL_717;
          default:
            v66 = *(unsigned int **)(a1 + 56);
            v67 = *(void ***)(a1 + 72);
            if (!v6 || !*((_QWORD *)v6 + 5))
            {
              if (*(unsigned __int8 *)(v24 + 16) < 0x1Cu || (v6 = (llvm::Instruction *)a2, !*(_QWORD *)(v24 + 40)))
                v6 = 0;
            }
            v1408 = *(uint64_t **)(a1 + 80);
            v1409 = v66;
            v1410 = (llvm::Instruction **)v6;
            v1411 = v67;
            v1412 = 0;
            LOBYTE(v1413) = 1;
            sub_1C4F82B7C(v24, a4, a5, (const llvm::DataLayout **)&v1408);
            v68 = a4[1].u32[0];
            if (v68 > 0x40)
            {
              v69 = operator new[]();
              memcpy((void *)v69, *(const void **)a4, ((unint64_t)(v68 + 63) >> 3) & 0x3FFFFFF8);
              v186 = (uint64_t *)a4[2];
              v187 = (unint64_t)(v68 + 63) >> 6;
              v188 = (_QWORD *)v69;
              do
              {
                v189 = *v186++;
                *v188++ |= v189;
                --v187;
              }
              while (v187);
            }
            else
            {
              v69 = *(_QWORD *)&a4[2] | *(_QWORD *)a4;
            }
            v190 = this[1].u32[0];
            if (v190 > 0x40)
            {
              v192 = (unint64_t)(v190 + 63) >> 6;
              v193 = (uint64_t *)*this;
              v194 = v192 - 1;
              v195 = (uint64_t *)v69;
              do
              {
                v197 = *v193++;
                v196 = v197;
                v198 = *v195++;
                v199 = v196 & ~v198;
                v191 = v199 == 0;
                v1011 = v194-- != 0;
                v200 = v1011;
              }
              while (!v199 && (v200 & 1) != 0);
            }
            else
            {
              v191 = (*(_QWORD *)this & ~v69) == 0;
            }
            if (v68 >= 0x41 && v69)
              MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
            if (!v191)
              goto LABEL_716;
LABEL_229:
            v183 = v26;
            goto LABEL_230;
        }
      }
    }
    v1420 = v11;
    IntegerValue = (unint64_t)&v1421;
    if (v11 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v1419, 0, 0);
      v1422 = v11;
      llvm::APInt::initSlowCase((llvm::APInt *)&v1421, 0, 0);
      v11 = v1424;
      v1416 = v1424;
      if (v1424 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v1415, 0, 0);
        v1418 = v11;
        llvm::APInt::initSlowCase((llvm::APInt *)&v1417, 0, 0);
        goto LABEL_41;
      }
    }
    else
    {
      v1422 = v11;
      v1419 = 0;
      v1421 = 0;
      v1416 = v11;
    }
    v1418 = v11;
    v1415 = 0;
    v1417 = 0;
LABEL_41:
    v32 = (const llvm::APInt *)v1425;
    if (v1425)
      goto LABEL_49;
    v33 = *(_QWORD *)(a2 + 8);
    if (v33)
    {
      if (!*(_QWORD *)(v33 + 8))
        goto LABEL_49;
    }
    v34 = this[1].u32[0];
    if (v34 > 0x40)
    {
      v834 = (const llvm::APInt *)v1425;
      memset(*(void **)this, 255, ((unint64_t)(v34 + 63) >> 3) & 0x3FFFFFF8);
      v32 = v834;
      LODWORD(v34) = this[1].i32[0];
      if ((_DWORD)v34)
      {
LABEL_46:
        v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v34;
        if (v34 >= 0x41)
        {
          v36 = (int8x8_t *)(*(_QWORD *)this
                           + 8 * ((((unint64_t)v34 + 63) >> 6) - 1));
          goto LABEL_48;
        }
LABEL_47:
        v36 = this;
LABEL_48:
        *(_QWORD *)v36 &= v35;
LABEL_49:
        v1408 = (uint64_t *)this;
        v1409 = &v1424;
        v1410 = &v1423;
        v1411 = (void **)a1;
        v1412 = (int8x8_t *)&v1419;
        v1413 = &v1425;
        v1414 = &v1415;
        v37 = v1423;
        switch(*((_BYTE *)v1423 + 16))
        {
          case ')':
            v38 = this[1].u32[0];
            if (v38 < 0x41)
            {
              if ((this->i8[0] & 1) != 0)
                goto LABEL_1605;
              v1426 = 0;
              v1391 = 0;
              IntegerValue = (unint64_t)&v1391;
              v1428 = (int8x8_t)&v1426;
              v1429 = &v1391;
              goto LABEL_53;
            }
            v312 = (_QWORD *)operator new[]();
            memcpy(v312, *(const void **)this, ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8);
            IntegerValue = *v312 & 1;
            *v312 = IntegerValue;
            bzero(v312 + 1, (((unint64_t)(v38 + 63) >> 3) - 8) & 0xFFFFFFF8);
            v313 = 0;
            v314 = (unint64_t)(v38 + 63) >> 6;
            do
            {
              v315 = v314-- < 1;
              if (v315)
                break;
              v316 = v312[v314];
              v313 += __clz(v316);
            }
            while (!v316);
            v317 = v38 | 0xFFFFFFC0;
            if ((v38 & 0x3F) == 0)
              v317 = 0;
            if ((v38 - v313 - v317) >= 0x41)
            {
              MEMORY[0x1CAA32F9C](v312, 0x1000C8000313F17);
              goto LABEL_1605;
            }
            MEMORY[0x1CAA32F9C](v312, 0x1000C8000313F17);
            if (IntegerValue)
              goto LABEL_1605;
            v37 = v1423;
            v318 = *((unsigned __int8 *)v1423 + 16);
            v1426 = 0;
            v1391 = 0;
            IntegerValue = (unint64_t)&v1391;
            v1428 = (int8x8_t)&v1426;
            v1429 = &v1391;
            if (v318 != 5)
            {
              if (v318 != 41)
                goto LABEL_1585;
LABEL_53:
              v39 = *((_QWORD *)v37 - 8);
              v40 = *(_QWORD *)(v39 + 8);
              if (!v40
                || *(_QWORD *)(v40 + 8)
                || !sub_1C4B0378C(&v1428, v39)
                || (v41 = *((_QWORD *)v37 - 4), (v42 = *(_QWORD *)(v41 + 8)) == 0)
                || *(_QWORD *)(v42 + 8)
                || (sub_1C4B037F8(&v1429, v41) & 1) == 0)
              {
                v43 = *((_QWORD *)v37 - 4);
                v44 = *(_QWORD *)(v43 + 8);
                if (!v44)
                  goto LABEL_1585;
                if (*(_QWORD *)(v44 + 8))
                  goto LABEL_1585;
                if (!sub_1C4B0378C(&v1428, v43))
                  goto LABEL_1585;
                v45 = *((_QWORD *)v37 - 8);
                v46 = *(_QWORD *)(v45 + 8);
                if (!v46 || *(_QWORD *)(v46 + 8) || (sub_1C4B037F8(&v1429, v45) & 1) == 0)
                  goto LABEL_1585;
              }
              goto LABEL_65;
            }
            if (*((_WORD *)v1423 + 9) != 13)
              goto LABEL_1584;
            v657 = *((_DWORD *)v1423 + 5);
            v658 = *((_QWORD *)v1423 - 4 * (v657 & 0x7FFFFFF));
            v659 = *(_QWORD *)(v658 + 8);
            if (!v659)
              goto LABEL_1579;
            if (*(_QWORD *)(v659 + 8))
              goto LABEL_1579;
            v660 = sub_1C4B0378C(&v1428, v658);
            v657 = *((_DWORD *)v37 + 5);
            if (!v660)
              goto LABEL_1579;
            v661 = ((_QWORD *)v37 - 4 * (v657 & 0x7FFFFFF))[4];
            v662 = *(_QWORD *)(v661 + 8);
            if (!v662 || *(_QWORD *)(v662 + 8))
              goto LABEL_1579;
            if ((sub_1C4B037F8(&v1429, v661) & 1) != 0)
            {
              IntegerValue = (unint64_t)&v1391;
            }
            else
            {
              v657 = *((_DWORD *)v37 + 5);
LABEL_1579:
              v1069 = ((_QWORD *)v37 - 4 * (v657 & 0x7FFFFFF))[4];
              v1070 = *(_QWORD *)(v1069 + 8);
              if (!v1070
                || *(_QWORD *)(v1070 + 8)
                || !sub_1C4B0378C(&v1428, v1069)
                || (v1071 = *((_QWORD *)v37 - 4 * (*((_DWORD *)v37 + 5) & 0x7FFFFFF)),
                    (v1072 = *(_QWORD *)(v1071 + 8)) == 0)
                || *(_QWORD *)(v1072 + 8))
              {
LABEL_1584:
                IntegerValue = (unint64_t)&v1391;
                goto LABEL_1585;
              }
              IntegerValue = (unint64_t)&v1391;
              if (!sub_1C4B037F8(&v1429, v1071))
                goto LABEL_1585;
            }
LABEL_65:
            v47 = *(_QWORD *)v1426;
            v48 = *(_DWORD *)(*(_QWORD *)v1426 + 8);
            if ((v48 & 0xFE) == 0x12)
              v48 = *(_DWORD *)(**(_QWORD **)(v47 + 16) + 8);
            if (v48 == 269 && v47 == *(_QWORD *)v1391)
            {
              v1434 = *(_QWORD *)(a1 + 24);
              v1435 = *(_OWORD *)(v1434 + 48);
              v49 = v1436;
              llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v1434, v1436);
              v50 = *(_QWORD *)(a1 + 24);
              v51 = v1423;
              v52 = (char *)v1423 + 24;
              *(_QWORD *)(v50 + 48) = *((_QWORD *)v1423 + 5);
              *(_QWORD *)(v50 + 56) = v52;
              v53 = (unsigned __int8 *)*((_QWORD *)v51 + 6);
              v1428 = (int8x8_t)v53;
              if (v53)
              {
                llvm::MetadataTracking::track((uint64_t)&v1428, v53, 2);
                v54 = (uint64_t)v1428;
              }
              else
              {
                v54 = 0;
              }
              sub_1C4774EF4(v50, 0, v54);
              if (v1428)
                llvm::MetadataTracking::untrack((uint64_t)&v1428, *(unsigned __int8 **)&v1428);
              v55 = *(_QWORD *)(a1 + 24);
              LOWORD(v1432) = 257;
              v56 = (_QWORD *)sub_1C506EAA0(v55, v1426, (uint64_t)&v1428);
              v1390 = 257;
              v57 = (unsigned __int8 *)sub_1C4D89BCC(v55, v56, (uint64_t)v1391, (uint64_t)&v1387);
              v58 = *(uint64_t **)(a1 + 24);
              LOWORD(v1432) = 257;
              IntegerValue = (unint64_t)sub_1C4773E38(v58, 40, v57, (uint64_t)v1371, (uint64_t)&v1428);
              v59 = (_QWORD *)v1434;
              if ((_QWORD)v1435)
              {
                sub_1C4D8AE2C(v1434, v1435, *((uint64_t *)&v1435 + 1));
                v59 = (_QWORD *)v1434;
              }
              else
              {
                *(_QWORD *)(v1434 + 48) = 0;
                v59[7] = 0;
              }
              v1428 = (int8x8_t)v1436[0];
              if (v1436[0])
              {
                llvm::MetadataTracking::track((uint64_t)&v1428, v1436[0], 2);
                v1010 = (uint64_t)v1428;
              }
              else
              {
                v1010 = 0;
              }
              sub_1C4774EF4((uint64_t)v59, 0, v1010);
              if (v1428)
                llvm::MetadataTracking::untrack((uint64_t)&v1428, *(unsigned __int8 **)&v1428);
              v871 = v1436[0];
              if (v1436[0])
                goto LABEL_1176;
              goto LABEL_1663;
            }
LABEL_1585:
            v1073 = v1423;
            v1428 = (int8x8_t)&v1426;
            v1429 = &v1391;
            v1074 = *((unsigned __int8 *)v1423 + 16);
            if (v1074 == 5)
            {
              if (*((_WORD *)v1423 + 9) != 13)
                goto LABEL_1605;
              v1079 = *((_QWORD *)v1423 - 4 * (*((_DWORD *)v1423 + 5) & 0x7FFFFFF));
              v1080 = *(_QWORD *)(v1079 + 8);
              if (!v1080)
                goto LABEL_1605;
              if (*(_QWORD *)(v1080 + 8))
                goto LABEL_1605;
              if (!sub_1C4B037F8(&v1428, v1079))
                goto LABEL_1605;
              v1081 = ((_QWORD *)v1073 - 4 * (*((_DWORD *)v1073 + 5) & 0x7FFFFFF))[4];
              v1082 = *(_QWORD *)(v1081 + 8);
              if (!v1082 || *(_QWORD *)(v1082 + 8) || !sub_1C4B037F8(&v1429, v1081))
                goto LABEL_1605;
            }
            else
            {
              if (v1074 != 41)
                goto LABEL_1605;
              v1075 = *((_QWORD *)v1423 - 8);
              v1076 = *(_QWORD *)(v1075 + 8);
              if (!v1076)
                goto LABEL_1605;
              if (*(_QWORD *)(v1076 + 8))
                goto LABEL_1605;
              if (!sub_1C4B037F8(&v1428, v1075))
                goto LABEL_1605;
              v1077 = *((_QWORD *)v1073 - 4);
              v1078 = *(_QWORD *)(v1077 + 8);
              if (!v1078 || *(_QWORD *)(v1078 + 8) || (sub_1C4B037F8(&v1429, v1077) & 1) == 0)
                goto LABEL_1605;
            }
            v1083 = *(_QWORD *)v1426;
            v1084 = *(_DWORD *)(*(_QWORD *)v1426 + 8);
            if ((v1084 & 0xFE) == 0x12)
              v1084 = *(_DWORD *)(**(_QWORD **)(v1083 + 16) + 8);
            if (v1084 == 269 && v1083 == *(_QWORD *)v1391)
            {
              v1387 = *(llvm::APInt **)(a1 + 24);
              v1388 = *((_OWORD *)v1387 + 3);
              v49 = &v1389;
              llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v1387, &v1389);
              v1126 = *(_QWORD *)(a1 + 24);
              v1127 = v1423;
              v1128 = (char *)v1423 + 24;
              *(_QWORD *)(v1126 + 48) = *((_QWORD *)v1423 + 5);
              *(_QWORD *)(v1126 + 56) = v1128;
              v1129 = (unsigned __int8 *)*((_QWORD *)v1127 + 6);
              v1428 = (int8x8_t)v1129;
              if (v1129)
              {
                llvm::MetadataTracking::track((uint64_t)&v1428, v1129, 2);
                v1130 = (uint64_t)v1428;
              }
              else
              {
                v1130 = 0;
              }
              sub_1C4774EF4(v1126, 0, v1130);
              if (v1428)
                llvm::MetadataTracking::untrack((uint64_t)&v1428, *(unsigned __int8 **)&v1428);
              v1131 = *(_QWORD *)(a1 + 24);
              LOWORD(v1432) = 257;
              v1132 = (unsigned __int8 *)sub_1C4773594(v1131, (_QWORD *)v1426, (uint64_t)v1391, (uint64_t)&v1428);
              v1133 = *(uint64_t **)(a1 + 24);
              LOWORD(v1432) = 257;
              UnaryIntrinsic = (uint64_t)sub_1C4773E38(v1133, 40, v1132, (uint64_t)v1371, (uint64_t)&v1428);
              goto LABEL_1016;
            }
            goto LABEL_1605;
          case '+':
LABEL_1605:
            LODWORD(v1388) = 1;
            v1387 = 0;
            if (sub_1C5855234((uint64_t)&v1408, (_QWORD **)&v1387))
              goto LABEL_1606;
            if (v1388 > 0x40)
            {
              v1090 = ((unint64_t)v1388 + 63) >> 6;
              v1091 = v1387;
              v1085 = v1415;
              v1092 = v1387;
              v1093 = (uint64_t *)v1415;
              v1094 = v1090;
              while (1)
              {
                v1096 = *(_QWORD *)v1092;
                v1092 = (llvm::APInt *)((char *)v1092 + 8);
                v1095 = v1096;
                v1097 = *v1093++;
                if ((v1095 & ~v1097) != 0)
                  break;
                if (!--v1094)
                  goto LABEL_1617;
              }
              v1086 = v1423;
              v1087 = *((unsigned __int8 *)v1423 + 16);
              if (v1087 == 41)
                goto LABEL_1626;
              v1100 = 0;
              v1101 = ((unint64_t)v1388 + 63) >> 6;
              do
              {
                v315 = v1101-- < 1;
                if (v315)
                  break;
                v1102 = *((_QWORD *)v1387 + v1101);
                v1100 += __clz(v1102);
              }
              while (!v1102);
              v1103 = v1388 | 0xFFFFFFC0;
              if ((v1388 & 0x3F) == 0)
                v1103 = 0;
              if (v1100 + v1103 == (_DWORD)v1388 - 1)
              {
LABEL_1626:
                v1104 = (uint64_t *)v1419;
                while (1)
                {
                  v1106 = *(_QWORD *)v1091;
                  v1091 = (llvm::APInt *)((char *)v1091 + 8);
                  v1105 = v1106;
                  v1107 = *v1104++;
                  if ((v1105 & ~v1107) != 0)
                    break;
                  if (!--v1090)
                    goto LABEL_1612;
                }
              }
            }
            else
            {
              v1085 = v1415;
              if (((unint64_t)v1387 & ~(unint64_t)v1415) == 0)
              {
LABEL_1617:
                v1098 = *((_DWORD *)v1423 + 5);
                if ((v1098 & 0x40000000) != 0)
                  v1099 = (unint64_t *)*((_QWORD *)v1423 - 1);
                else
                  v1099 = (unint64_t *)((char *)v1423 - 32 * (v1098 & 0x7FFFFFF));
                v210 = 0;
                IntegerValue = *v1099;
                goto LABEL_1640;
              }
              v1086 = v1423;
              v1087 = *((unsigned __int8 *)v1423 + 16);
              if ((v1387 == (llvm::APInt *)1 || v1087 == 41) && ((unint64_t)v1387 & ~v1419) == 0)
              {
LABEL_1612:
                v1088 = *((_DWORD *)v1086 + 5);
                if ((v1088 & 0x40000000) != 0)
                  v1089 = (char *)*((_QWORD *)v1086 - 1);
                else
                  v1089 = (char *)v1086 - 32 * (v1088 & 0x7FFFFFF);
                v210 = 0;
                IntegerValue = *((_QWORD *)v1089 + 4);
                goto LABEL_1640;
              }
            }
            v1108 = *((unsigned __int8 *)v1086 + 17);
            v1384 = v1416;
            if (v1416 > 0x40)
            {
              v1383 = (void *)operator new[]();
              memcpy(v1383, v1415, (((unint64_t)v1384 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v1383 = v1085;
            }
            v1386 = v1418;
            if (v1418 > 0x40)
            {
              v1385 = (void *)operator new[]();
              memcpy(v1385, v1417, (((unint64_t)v1386 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v1385 = v1417;
            }
            llvm::KnownBits::computeForAddSub(v1087 == 41, (v1108 >> 2) & 1, (uint64_t)&v1419, (uint64_t)&v1383, (uint64_t)&v1428);
            if (a4[1].i32[0] >= 0x41u && *(_QWORD *)a4)
              ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
            *a4 = v1428;
            a4[1].i32[0] = (int)v1429;
            LODWORD(v1429) = 0;
            if (a4[3].i32[0] >= 0x41u && *v18)
            {
              MEMORY[0x1CAA32F9C](*v18, 0x1000C8000313F17);
              v1253 = v1429;
              a4[2] = (int8x8_t)v1430;
              a4[3].i32[0] = v1431;
              LODWORD(v1431) = 0;
              if (v1253 >= 0x41 && *(_QWORD *)&v1428)
                MEMORY[0x1CAA32F9C](*(_QWORD *)&v1428, 0x1000C8000313F17);
            }
            else
            {
              a4[2] = (int8x8_t)v1430;
              a4[3].i32[0] = v1431;
              LODWORD(v1431) = 0;
            }
            if (v1386 >= 0x41 && v1385)
              MEMORY[0x1CAA32F9C](v1385, 0x1000C8000313F17);
            if (v1384 >= 0x41 && v1383)
              MEMORY[0x1CAA32F9C](v1383, 0x1000C8000313F17);
            v210 = 1;
            goto LABEL_1640;
          case '-':
            LODWORD(v1388) = 1;
            v1387 = 0;
            if (sub_1C5855234((uint64_t)&v1408, (_QWORD **)&v1387))
            {
LABEL_1606:
              v210 = 0;
              IntegerValue = (unint64_t)v1423;
              goto LABEL_1640;
            }
            v222 = this[1].u32[0];
            if (v222 > 0x40)
            {
              v393 = 0;
              v394 = (unint64_t)(v222 + 63) >> 6;
              v395 = (int8x8_t *)*this;
              do
              {
                v396 = *v395++;
                v397 = (uint8x8_t)vcnt_s8(v396);
                v397.i16[0] = vaddlv_u8(v397);
                v393 += v397.i32[0];
                --v394;
              }
              while (v394);
              if (v393 != 1)
                goto LABEL_789;
              v225 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this);
            }
            else
            {
              v223 = (uint8x8_t)vcnt_s8(*this);
              v223.i16[0] = vaddlv_u8(v223);
              if (v223.u32[0] != 1)
                goto LABEL_789;
              v224 = __clz(__rbit64((unint64_t)*this));
              if (v222 >= v224)
                v225 = v224;
              else
                v225 = this[1].u32[0];
            }
            v1434 = 0;
            v398 = *((_DWORD *)v1423 + 5);
            if ((v398 & 0x40000000) != 0)
              v399 = (char *)*((_QWORD *)v1423 - 1);
            else
              v399 = (char *)v1423 - 32 * (v398 & 0x7FFFFFF);
            v459 = (unsigned __int8 *)*((_QWORD *)v399 + 4);
            v1428 = (int8x8_t)&v1434;
            v1429 = 0;
            if (sub_1C4D89F84((uint64_t)&v1428, v459))
            {
              v460 = *(_DWORD *)(v1434 + 8);
              if (v460 > 0x40)
              {
                v462 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1434);
              }
              else
              {
                v461 = __clz(__rbit64(*(_QWORD *)v1434));
                v462 = v460 >= v461 ? v461 : *(_DWORD *)(v1434 + 8);
              }
              if (v462 == v225)
              {
                v577 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1423, v225, 0);
                v578 = *((_DWORD *)v1423 + 5);
                if ((v578 & 0x40000000) != 0)
                  v579 = (_QWORD **)*((_QWORD *)v1423 - 1);
                else
                  v579 = (_QWORD **)((char *)v1423 - 32 * (v578 & 0x7FFFFFF));
                v693 = *v579;
                LOWORD(v1432) = 257;
                v694 = (char *)operator new(0x80uLL);
                *(_QWORD *)v694 = 0;
                *((_QWORD *)v694 + 2) = 0;
                *((_QWORD *)v694 + 1) = 0;
                v695 = v694 + 8;
                *((_QWORD *)v694 + 5) = 0;
                *((_QWORD *)v694 + 6) = 0;
                *((_QWORD *)v694 + 4) = 0;
                v696 = (llvm::Value ***)(v694 + 32);
                *((_QWORD *)v694 + 8) = *v693;
                v697 = (uint64_t ***)(v694 + 64);
                *((_QWORD *)v694 + 3) = v694 + 64;
                *((_QWORD *)v694 + 7) = v694 + 64;
                *((_QWORD *)v694 + 9) = 0;
                v698 = 53;
LABEL_999:
                v694[80] = v698;
                v694[81] = 0;
                *((_WORD *)v694 + 41) = 0;
                *((_DWORD *)v694 + 21) = 2;
                *((_DWORD *)v694 + 30) = 0;
                *(_OWORD *)(v694 + 104) = 0u;
                *(_OWORD *)(v694 + 88) = 0u;
                *(_QWORD *)v694 = v693;
                v728 = v693[1];
                v727 = v693 + 1;
                v726 = v728;
                *v695 = v728;
                if (v728)
                  *(_QWORD *)(v726 + 16) = v695;
                *((_QWORD *)v694 + 2) = v727;
                *v727 = v694;
                if (*((_QWORD *)v694 + 4))
                {
                  **((_QWORD **)v694 + 6) = *((_QWORD *)v694 + 5);
                  v1303 = *((_QWORD *)v694 + 5);
                  if (v1303)
                    *(_QWORD *)(v1303 + 16) = *((_QWORD *)v694 + 6);
                }
                *v696 = v577;
                if (v577)
                {
                  v731 = v577[1];
                  v730 = (llvm::Value ****)(v577 + 1);
                  v729 = v731;
                  *((_QWORD *)v694 + 5) = v731;
                  if (v731)
                    *((_QWORD *)v729 + 2) = v694 + 40;
                  *((_QWORD *)v694 + 6) = v730;
                  *v730 = v696;
                }
                llvm::Value::setName(v697, (uint64_t)&v1428);
                IntegerValue = (unint64_t)sub_1C577E498(a1, (llvm::Value *)v697, (uint64_t)v1423);
                v210 = 0;
                goto LABEL_1640;
              }
            }
LABEL_789:
            IntegerValue = (unint64_t)v1423;
            v580 = *((_DWORD *)v1423 + 5);
            if ((v580 & 0x40000000) != 0)
              v581 = (_QWORD *)*((_QWORD *)v1423 - 1);
            else
              v581 = (_QWORD *)((char *)v1423 - 32 * (v580 & 0x7FFFFFF));
            if (*v581 != v581[4])
              goto LABEL_793;
            v584 = this[1].u32[0];
            v585 = this;
            if (v584 >= 0x41)
            {
              if (v584 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) > 0x40)
                goto LABEL_793;
              v585 = (int8x8_t *)*this;
            }
            if (*(_QWORD *)v585 <= 3uLL)
            {
              v577 = llvm::ConstantInt::get(v1371, 1, 0);
              v586 = *((_DWORD *)v1423 + 5);
              if ((v586 & 0x40000000) != 0)
                v587 = (_QWORD **)*((_QWORD *)v1423 - 1);
              else
                v587 = (_QWORD **)((char *)v1423 - 32 * (v586 & 0x7FFFFFF));
              v693 = *v587;
              LOWORD(v1432) = 257;
              v694 = (char *)operator new(0x80uLL);
              *(_QWORD *)v694 = 0;
              *((_QWORD *)v694 + 2) = 0;
              *((_QWORD *)v694 + 1) = 0;
              v695 = v694 + 8;
              *((_QWORD *)v694 + 5) = 0;
              *((_QWORD *)v694 + 6) = 0;
              *((_QWORD *)v694 + 4) = 0;
              v696 = (llvm::Value ***)(v694 + 32);
              *((_QWORD *)v694 + 8) = *v693;
              v697 = (uint64_t ***)(v694 + 64);
              *((_QWORD *)v694 + 3) = v694 + 64;
              *((_QWORD *)v694 + 7) = v694 + 64;
              *((_QWORD *)v694 + 9) = 0;
              v698 = 56;
              goto LABEL_999;
            }
LABEL_793:
            v582 = *(llvm::APInt ***)(a1 + 56);
            v583 = *(_QWORD *)(a1 + 72);
            if (!v6 || !*((_QWORD *)v6 + 5))
            {
              if (*(unsigned __int8 *)(IntegerValue + 16) < 0x1Cu
                || (v6 = (llvm::Instruction *)IntegerValue, !*(_QWORD *)(IntegerValue + 40)))
              {
                v6 = 0;
              }
            }
            v1428 = *(int8x8_t *)(a1 + 80);
            v1429 = v582;
            v1430 = (unint64_t)v6;
            v1431 = v583;
            v1432 = 0;
            v210 = 1;
            v1433 = 1;
            sub_1C4F82B7C(IntegerValue, a4, v1425, (const llvm::DataLayout **)&v1428);
LABEL_1640:
            if (v1388 >= 0x41)
            {
              v454 = v1387;
              if (v1387)
LABEL_1642:
                MEMORY[0x1CAA32F9C](v454, 0x1000C8000313F17);
            }
LABEL_1643:
            if ((v210 & 1) != 0)
            {
LABEL_1644:
              v1109 = a4[1].u32[0];
              if (v1109 > 0x40)
              {
                v1110 = operator new[]();
                memcpy((void *)v1110, *(const void **)a4, ((unint64_t)(v1109 + 63) >> 3) & 0x3FFFFFF8);
                v1111 = (uint64_t *)a4[2];
                v1112 = (unint64_t)(v1109 + 63) >> 6;
                v1113 = (_QWORD *)v1110;
                do
                {
                  v1114 = *v1111++;
                  *v1113++ |= v1114;
                  --v1112;
                }
                while (v1112);
              }
              else
              {
                v1110 = *(_QWORD *)&a4[2] | *(_QWORD *)a4;
              }
              v1115 = this[1].u32[0];
              if (v1115 > 0x40)
              {
                v1117 = (unint64_t)(v1115 + 63) >> 6;
                v1118 = (uint64_t *)*this;
                v1119 = v1117 - 1;
                v1120 = (uint64_t *)v1110;
                do
                {
                  v1122 = *v1118++;
                  v1121 = v1122;
                  v1123 = *v1120++;
                  v1124 = v1121 & ~v1123;
                  v1116 = v1124 == 0;
                  v1011 = v1119-- != 0;
                  v1125 = v1011;
                }
                while (!v1124 && (v1125 & 1) != 0);
              }
              else
              {
                v1116 = (*(_QWORD *)this & ~v1110) == 0;
              }
              if (v1109 >= 0x41 && v1110)
                MEMORY[0x1CAA32F9C](v1110, 0x1000C8000313F17);
              v766 = (llvm::Constant ***)v1371;
              if (!v1116)
              {
LABEL_1662:
                IntegerValue = 0;
                goto LABEL_1663;
              }
              goto LABEL_1660;
            }
LABEL_1663:
            if (v1418 >= 0x41 && v1417)
              MEMORY[0x1CAA32F9C](v1417, 0x1000C8000313F17);
            if (v1416 >= 0x41 && v1415)
              MEMORY[0x1CAA32F9C](v1415, 0x1000C8000313F17);
            if (v1422 >= 0x41 && v1421)
              MEMORY[0x1CAA32F9C](v1421, 0x1000C8000313F17);
            if (v1420 < 0x41)
              return (llvm::UndefValue *)IntegerValue;
            v520 = (int8x8_t)v1419;
            if (!v1419)
              return (llvm::UndefValue *)IntegerValue;
LABEL_1668:
            MEMORY[0x1CAA32F9C](*(_QWORD *)&v520, 0x1000C8000313F17);
            return (llvm::UndefValue *)IntegerValue;
          case '/':
            v1387 = 0;
            v217 = *((_DWORD *)v1423 + 5);
            if ((v217 & 0x40000000) != 0)
              v218 = (char *)*((_QWORD *)v1423 - 1);
            else
              v218 = (char *)v1423 - 32 * (v217 & 0x7FFFFFF);
            v322 = (unsigned __int8 *)*((_QWORD *)v218 + 4);
            v1428 = (int8x8_t)&v1387;
            v1429 = 0;
            v323 = sub_1C4D89F84((uint64_t)&v1428, v322);
            v221 = v1423;
            if (!v323)
              goto LABEL_699;
            if ((*((_BYTE *)v1423 + 17) & 2) != 0)
              goto LABEL_1644;
            v324 = *((_DWORD *)v1387 + 2);
            if (v324 > 0x40)
            {
              v326 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1387);
            }
            else
            {
              v325 = __clz(__rbit64(*(_QWORD *)v1387));
              if (v324 >= v325)
                v326 = v325;
              else
                v326 = *((_DWORD *)v1387 + 2);
            }
            v455 = v1424;
            v456 = v326 - v1424;
            LODWORD(v1429) = v1424;
            if (v1424 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v1428, 0, 0);
              v455 = v1429;
            }
            else
            {
              v1428 = 0;
            }
            sub_1C4912E54(&v1428, v456 + v455, v455);
            v457 = sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 0, (uint64_t)&v1428);
            v307 = v457;
            if (v457)
              goto LABEL_646;
            if (v1420 > 0x40)
            {
              v458 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v1419);
            }
            else if (v1420)
            {
              v458 = __clz(~(v1419 << -(char)v1420));
            }
            else
            {
              v458 = 0;
            }
            v574 = v458 + v326;
            if (v458 + v326 >= v1424)
              v574 = v1424;
            v575 = a4[1].u32[0];
            v576 = v575 - v574;
            goto LABEL_848;
          case '2':
            v208 = v1424;
            LODWORD(v1429) = v1424;
            if (v1424 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v1428, 0, 0);
              LODWORD(v1431) = v208;
              llvm::APInt::initSlowCase((llvm::APInt *)&v1430, 0, 0);
              v208 = v1424;
              LODWORD(v1388) = v1424;
              if (v1424 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v1387, -1, 1);
                goto LABEL_243;
              }
            }
            else
            {
              LODWORD(v1431) = v1424;
              v1428 = 0;
              v1430 = 0;
              LODWORD(v1388) = v1424;
            }
            if (v208)
              v209 = (llvm::APInt *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v208);
            else
              v209 = 0;
            v1387 = v209;
LABEL_243:
            if (sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 0, (uint64_t)&v1387)
              || sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 1u, (uint64_t)&v1387))
            {
              v210 = 0;
              IntegerValue = (unint64_t)v1423;
            }
            else
            {
              if (v1429 > 0x40)
              {
                v392 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v1428);
              }
              else if ((_DWORD)v1429)
              {
                v392 = __clz(~(*(_QWORD *)&v1428 << -(char)v1429));
              }
              else
              {
                v392 = 0;
              }
              v446 = v1424;
              v1375 = v1424;
              if (v1424 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v1374, 0, 0);
                v446 = v1375;
              }
              else
              {
                v1374 = 0;
              }
              sub_1C4912E54(&v1374, v446 - v392, v446);
              v447 = v1375;
              if (v1375 > 0x40)
              {
                v449 = (_QWORD *)v1374;
                v450 = (uint64_t *)*this;
                v451 = ((unint64_t)v1375 + 63) >> 6;
                do
                {
                  v452 = *v450++;
                  *v449++ &= v452;
                  --v451;
                }
                while (v451);
                v448 = (int8x8_t)v1374;
              }
              else
              {
                v448 = (int8x8_t)(v1374 & *(_QWORD *)this);
                v1374 = (unint64_t)v448;
              }
              v1375 = 0;
              if (a4[1].i32[0] > 0x40u && *(_QWORD *)a4)
              {
                ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
                v453 = v1375;
                *a4 = v448;
                a4[1].i32[0] = v447;
                if (v453 >= 0x41 && v1374)
                  MEMORY[0x1CAA32F9C](v1374, 0x1000C8000313F17);
              }
              else
              {
                *a4 = v448;
                a4[1].i32[0] = v447;
              }
              v210 = 1;
            }
            if (v1388 >= 0x41 && v1387)
              MEMORY[0x1CAA32F9C](v1387, 0x1000C8000313F17);
            if (v1431 >= 0x41 && v1430)
              MEMORY[0x1CAA32F9C](v1430, 0x1000C8000313F17);
            goto LABEL_613;
          case '3':
            v1426 = 0;
            v211 = *((_DWORD *)v1423 + 5);
            if ((v211 & 0x40000000) != 0)
              v212 = (char *)*((_QWORD *)v1423 - 1);
            else
              v212 = (char *)v1423 - 32 * (v211 & 0x7FFFFFF);
            v319 = (unsigned __int8 *)*((_QWORD *)v212 + 4);
            v1428 = (int8x8_t)&v1426;
            v1429 = 0;
            if (!sub_1C4D89F84((uint64_t)&v1428, v319))
              goto LABEL_923;
            v320 = (const void **)v1426;
            v321 = *(_DWORD *)(v1426 + 8);
            if (!v321)
              goto LABEL_1644;
            if (v321 > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v1426) == v321)
                goto LABEL_1644;
            }
            else if (*(_QWORD *)v1426 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v321)
            {
              goto LABEL_1644;
            }
            sub_1C4DA6CE8(v320, (uint64_t)&v1428);
            v417 = v1429;
            if (v1429 > 0x40)
            {
              v546 = 0;
              v547 = 0;
              do
              {
                v548 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(_QWORD *)&v1428 + v546));
                v548.i16[0] = vaddlv_u8(v548);
                v547 += v548.i32[0];
                v546 += 8;
              }
              while (((((unint64_t)v1429 + 63) >> 3) & 0x3FFFFFF8) != v546);
              if (v547 == 1)
              {
                v549 = this[1].u32[0];
                if (v549 > 0x40)
                {
                  v1199 = ((unint64_t)(v549 + 63) >> 3) & 0x3FFFFFF8;
                  while (v1199)
                  {
                    v1200 = *(_QWORD *)(*(_QWORD *)this - 8 + v1199);
                    v1201 = *(_QWORD *)(*(_QWORD *)&v1428 - 8 + v1199);
                    v1199 -= 8;
                    if (v1200 != v1201)
                    {
                      if (v1200 <= v1201)
                        goto LABEL_755;
                      break;
                    }
                  }
                }
                else if (*(_QWORD *)this < *(_QWORD *)&v1428)
                {
                  goto LABEL_755;
                }
                v1381 = v1429;
                v1380 = (void *)operator new[]();
                memcpy(v1380, *(const void **)&v1428, (((unint64_t)v1381 + 63) >> 3) & 0x3FFFFFF8);
LABEL_1769:
                llvm::APInt::operator-=((uint64_t)&v1380, 1uLL);
                v1202 = v1381;
                v1203 = (uint64_t)v1380;
                v1381 = 0;
                v1204 = v1424;
                LODWORD(v1435) = v1424;
                if (v1424 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v1434, 0, 0);
                  v1206 = v1435;
                  v1205 = v1204 - 1;
                  if (v1435 > 0x40)
                  {
                    v1207 = (llvm::APInt *)v1434;
                    *(_QWORD *)(v1434 + 8 * (v1205 >> 6)) |= 1 << v1205;
                    v1277 = (unint64_t)(v1206 + 63) >> 6;
                    v1278 = (uint64_t *)v1203;
                    v1279 = v1207;
                    do
                    {
                      v1280 = *v1278++;
                      *(_QWORD *)v1279 |= v1280;
                      v1279 = (llvm::APInt *)((char *)v1279 + 8);
                      --v1277;
                    }
                    while (v1277);
LABEL_1772:
                    LODWORD(v1388) = v1206;
                    v1387 = v1207;
                    if (sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 0, (uint64_t)&v1387))
                    {
                      v833 = 1;
                      IntegerValue = (unint64_t)v1423;
                      goto LABEL_1824;
                    }
                    v1208 = v1420;
                    if (v1420 > 0x40)
                    {
                      v1210 = (((unint64_t)v1420 + 63) >> 3) & 0x3FFFFFF8;
                      v1209 = (void *)operator new[]();
                      memcpy(v1209, (const void *)v1419, v1210);
                      v1211 = (unint64_t)(v1208 + 63) >> 6;
                      v1212 = (uint64_t *)v1203;
                      v1213 = v1209;
                      do
                      {
                        v1214 = *v1212++;
                        *v1213++ &= v1214;
                        --v1211;
                      }
                      while (v1211);
                    }
                    else
                    {
                      v1209 = (void *)(v1419 & v1203);
                    }
                    if (a4[1].i32[0] >= 0x41u && *(_QWORD *)a4)
                      ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
                    *a4 = (int8x8_t)v1209;
                    a4[1].i32[0] = v1208;
                    v1215 = v1422;
                    if (v1422 > 0x40)
                    {
                      v1217 = (((unint64_t)v1422 + 63) >> 3) & 0x3FFFFFF8;
                      v1216 = (void *)operator new[]();
                      memcpy(v1216, (const void *)v1421, v1217);
                      v1218 = (unint64_t)(v1215 + 63) >> 6;
                      v1219 = (uint64_t *)v1203;
                      v1220 = v1216;
                      do
                      {
                        v1221 = *v1219++;
                        *v1220++ &= v1221;
                        --v1218;
                      }
                      while (v1218);
                    }
                    else
                    {
                      v1216 = (void *)(v1421 & v1203);
                    }
                    if (a4[3].i32[0] >= 0x41u && *v18)
                      MEMORY[0x1CAA32F9C](*v18, 0x1000C8000313F17);
                    a4[2] = (int8x8_t)v1216;
                    a4[3].i32[0] = v1215;
                    v1222 = v1420 - 1;
                    v1223 = (int8x8_t *)&v1419;
                    if (v1420 >= 0x41)
                      v1223 = (int8x8_t *)(v1419 + 8 * (v1222 >> 6));
                    if (((*(unint64_t *)v1223 >> v1222) & 1) != 0)
                    {
                      v1379 = v1202;
                      v1224 = v1203;
                      v1225 = v1202;
                      if (v1202 >= 0x41)
                      {
                        v1226 = v1202 + 63;
LABEL_1793:
                        v1227 = (v1226 >> 3) & 0x3FFFFFF8;
                        v1224 = operator new[]();
                        v1378 = v1224;
                        memcpy((void *)v1224, (const void *)v1203, v1227);
                        v1225 = v1379;
                        if (v1379 > 0x40)
                        {
                          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1378);
                          v1230 = v1378;
LABEL_1798:
                          v1231 = v1379;
                          v1379 = 0;
                          v1232 = a4[1].u32[0];
                          if (v1232 > 0x40)
                          {
                            v1233 = (_QWORD *)*a4;
                            v1234 = (unint64_t)(v1232 + 63) >> 6;
                            v1235 = (uint64_t *)v1230;
                            do
                            {
                              v1236 = *v1235++;
                              *v1233++ |= v1236;
                              --v1234;
                            }
                            while (v1234);
                          }
                          else
                          {
                            *(_QWORD *)a4 |= v1230;
                          }
                          if (v1231 >= 0x41 && v1230)
                            MEMORY[0x1CAA32F9C](v1230, 0x1000C8000313F17);
                          if (v1379 >= 0x41 && v1378)
                            MEMORY[0x1CAA32F9C](v1378, 0x1000C8000313F17);
                          goto LABEL_1811;
                        }
                      }
                    }
                    else
                    {
                      if (v1202 > 0x40)
                      {
                        v1244 = 0;
                        v1226 = v1202 + 63;
                        while ((*(_QWORD *)(v1203 + v1244) & ~*(_QWORD *)(v1419 + v1244)) == 0)
                        {
                          v1244 += 8;
                          if ((((unint64_t)(v1202 + 63) >> 3) & 0x3FFFFFF8) == v1244)
                          {
                            v1379 = v1202;
                            goto LABEL_1793;
                          }
                        }
LABEL_1811:
                        v1237 = v1422 - 1;
                        if (v1422 >= 0x41)
                          v1238 = (unint64_t *)(v1421 + 8 * (v1237 >> 6));
                        else
                          v1238 = &v1421;
                        if (((*v1238 >> v1237) & 1) != 0)
                        {
                          if (v1202 > 0x40)
                          {
                            v1243 = 0;
                            while ((*(_QWORD *)(v1421 + v1243) & *(_QWORD *)(v1203 + v1243)) == 0)
                            {
                              v1243 += 8;
                              if ((((unint64_t)(v1202 + 63) >> 3) & 0x3FFFFFF8) == v1243)
                                goto LABEL_1823;
                            }
                            v1377 = v1202;
                            v1376 = (void *)operator new[]();
                            memcpy(v1376, (const void *)v1203, ((unint64_t)(v1202 + 63) >> 3) & 0x3FFFFFF8);
                            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1376);
                            v1241 = (unint64_t)v1376;
                            v1242 = v1377;
                            goto LABEL_1841;
                          }
                          if ((v1203 & v1421) != 0)
                          {
                            v1239 = ~v1203;
                            v1240 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1202;
                            if (!(_DWORD)v1202)
                              v1240 = 0;
                            v1241 = v1240 & v1239;
                            v1376 = (void *)(v1240 & v1239);
                            v1242 = v1202;
LABEL_1841:
                            v1377 = 0;
                            v1245 = a4[3].u32[0];
                            if (v1245 > 0x40)
                            {
                              v1246 = *v18;
                              v1247 = (unint64_t)(v1245 + 63) >> 6;
                              v1248 = (uint64_t *)v1241;
                              do
                              {
                                v1249 = *v1248++;
                                *v1246++ |= v1249;
                                --v1247;
                              }
                              while (v1247);
                            }
                            else
                            {
                              *v18 = (void *)((unint64_t)*v18 | v1241);
                            }
                            v833 = 2;
                            if (v1242 >= 0x41)
                            {
                              if (v1241)
                              {
                                MEMORY[0x1CAA32F9C](v1241, 0x1000C8000313F17);
                                if (v1377 >= 0x41)
                                  MEMORY[0x1CAA32F9C](v1241, 0x1000C8000313F17);
                              }
                            }
                            goto LABEL_1824;
                          }
                        }
LABEL_1823:
                        v833 = 2;
LABEL_1824:
                        if (v1388 >= 0x41 && v1387)
                          MEMORY[0x1CAA32F9C](v1387, 0x1000C8000313F17);
                        if (v1202 >= 0x41 && v1203)
                          MEMORY[0x1CAA32F9C](v1203, 0x1000C8000313F17);
                        v417 = v1429;
LABEL_1831:
                        if (v417 > 0x40 && *(_QWORD *)&v1428)
                          MEMORY[0x1CAA32F9C](*(_QWORD *)&v1428, 0x1000C8000313F17);
                        if (v833 == 2)
                          goto LABEL_1644;
                        goto LABEL_1663;
                      }
                      if ((v1203 & ~v1419) != 0)
                        goto LABEL_1811;
                      v1379 = v1202;
                      v1224 = v1203;
                      v1225 = v1202;
                    }
                    v1228 = ~v1224;
                    if (v1225)
                      v1229 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1225;
                    else
                      v1229 = 0;
                    v1230 = v1229 & v1228;
                    v1378 = v1229 & v1228;
                    goto LABEL_1798;
                  }
                }
                else
                {
                  v1434 = 0;
                  LOBYTE(v1205) = v1424 - 1;
                  LODWORD(v1206) = v1424;
                }
                v1434 |= 1 << v1205;
                v1207 = (llvm::APInt *)(v1434 | v1203);
                goto LABEL_1772;
              }
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v1428, 0x1000C8000313F17);
            }
            else if (*(_QWORD *)&v1428 && (*(_QWORD *)&v1428 & (*(_QWORD *)&v1428 - 1)) == 0)
            {
              v418 = this[1].u32[0];
              if (v418 > 0x40)
              {
                v1250 = ((unint64_t)(v418 + 63) >> 3) & 0x3FFFFFF8;
                while (v1250)
                {
                  v1251 = *(_QWORD *)(*(_QWORD *)this - 8 + v1250);
                  v1252 = *(_QWORD *)(*(_QWORD *)&v1428 - 8 + v1250);
                  v1250 -= 8;
                  if (v1251 != v1252)
                  {
                    if (v1251 <= v1252)
                      goto LABEL_755;
                    goto LABEL_555;
                  }
                }
                goto LABEL_555;
              }
              if (*(_QWORD *)this >= *(_QWORD *)&v1428)
              {
LABEL_555:
                v1381 = v1429;
                v1380 = (void *)v1428;
                goto LABEL_1769;
              }
LABEL_755:
              v550 = *((_DWORD *)v1423 + 5);
              if ((v550 & 0x40000000) != 0)
                v551 = (unint64_t *)*((_QWORD *)v1423 - 1);
              else
                v551 = (unint64_t *)((char *)v1423 - 32 * (v550 & 0x7FFFFFF));
              IntegerValue = *v551;
              v833 = 1;
              goto LABEL_1831;
            }
LABEL_923:
            v663 = this[1].u32[0];
            v664 = v663 - 1;
            v665 = this;
            if (v663 >= 0x41)
              v665 = (int8x8_t *)(*(_QWORD *)this + 8 * (v664 >> 6));
            if (((*(unint64_t *)v665 >> v664) & 1) != 0)
            {
              v666 = *((_DWORD *)v1423 + 5);
              if ((v666 & 0x40000000) != 0)
                v667 = (uint64_t *)*((_QWORD *)v1423 - 1);
              else
                v667 = (uint64_t *)((char *)v1423 - 32 * (v666 & 0x7FFFFFF));
              v668 = *v667;
              v669 = *(llvm::APInt ***)(a1 + 56);
              v670 = *(_QWORD *)(a1 + 72);
              if (!v6 || !*((_QWORD *)v6 + 5))
              {
                v1011 = v668 && *(unsigned __int8 *)(v668 + 16) >= 0x1Cu;
                if (!v1011 || (v6 = (llvm::Instruction *)v668, !*(_QWORD *)(v668 + 40)))
                  v6 = 0;
              }
              v1428 = *(int8x8_t *)(a1 + 80);
              v1429 = v669;
              v1430 = (unint64_t)v6;
              v1431 = v670;
              v1432 = 0;
              v1433 = 1;
              sub_1C4F82B7C(v668, (int8x8_t *)&v1419, v1425 + 1, (const llvm::DataLayout **)&v1428);
              if (v1420 >= 0x41)
                v671 = (int8x8_t *)(v1419 + 8 * ((v1420 - 1) >> 6));
              else
                v671 = (int8x8_t *)&v1419;
              if (((*(unint64_t *)v671 >> (v1420 - 1)) & 1) != 0)
              {
                v672 = a4[1].u32[0];
                v673 = 1 << (v672 - 1);
                if (v672 >= 0x41)
                  v674 = (int8x8_t *)(*(_QWORD *)a4 + 8 * ((v672 - 1) >> 6));
                else
                  v674 = a4;
                *(_QWORD *)v674 |= v673;
              }
            }
            goto LABEL_1644;
          case '5':
            v1391 = 0;
            v226 = *((_DWORD *)v1423 + 5);
            if ((v226 & 0x40000000) != 0)
              v227 = (char *)*((_QWORD *)v1423 - 1);
            else
              v227 = (char *)v1423 - 32 * (v226 & 0x7FFFFFF);
            v327 = (unsigned __int8 *)*((_QWORD *)v227 + 4);
            v1428 = (int8x8_t)&v1391;
            v1429 = 0;
            if (sub_1C4D89F84((uint64_t)&v1428, v327))
            {
              v1382 = 0;
              v328 = *((_DWORD *)v1423 + 5);
              if ((v328 & 0x40000000) != 0)
                v329 = (uint64_t *)*((_QWORD *)v1423 - 1);
              else
                v329 = (uint64_t *)((char *)v1423 - 32 * (v328 & 0x7FFFFFF));
              v400 = *v329;
              v1429 = &v1382;
              v1430 = 0;
              v401 = *(unsigned __int8 *)(v400 + 16);
              if (v400 && v401 >= 0x1C)
              {
                if ((v401 & 0xFE) != 0x36)
                  goto LABEL_1516;
                v402 = *(_DWORD *)(v400 + 20);
                v403 = (v402 & 0x40000000) != 0 ? *(_QWORD *)(v400 - 8) : v400 - 32 * (v402 & 0x7FFFFFF);
                if (!sub_1C4D89F84((uint64_t)&v1429, *(unsigned __int8 **)(v403 + 32)))
                  goto LABEL_1516;
              }
              else if (v401 != 5
                     || (*(_WORD *)(v400 + 18) & 0xFFFE) != 0x1A
                     || (sub_1C4D8A004((uint64_t)&v1429, *(llvm::Constant **)(v400 - 32 * (*(_DWORD *)(v400 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
              {
                goto LABEL_1516;
              }
              v588 = *((_DWORD *)v1423 + 5);
              __n = v1423;
              if ((v588 & 0x40000000) != 0)
                v589 = (llvm::APInt **)*((_QWORD *)v1423 - 1);
              else
                v589 = (llvm::APInt **)((char *)v1423 - 32 * (v588 & 0x7FFFFFF));
              v1369 = *v589;
              if (!*v589 || *((unsigned __int8 *)v1369 + 16) < 0x1Cu)
                goto LABEL_1516;
              v615 = v1382;
              v616 = v1391;
              v617 = *((_DWORD *)v1391 + 2);
              if (v617 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(v1391) == v617)
                  goto LABEL_1516;
              }
              else if (!*(_QWORD *)v1391)
              {
                goto LABEL_1516;
              }
              v1363 = *((_DWORD *)v615 + 2);
              if (v1363 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(v615) == v1363)
                  goto LABEL_1516;
              }
              else if (!*(_QWORD *)v615)
              {
                goto LABEL_1516;
              }
              v618 = *((_DWORD *)v1369 + 5);
              if ((v618 & 0x40000000) != 0)
                v619 = (unint64_t *)*((_QWORD *)v1369 - 1);
              else
                v619 = (unint64_t *)((char *)v1369 - 32 * (v618 & 0x7FFFFFF));
              IntegerValue = *v619;
              v620 = *(_QWORD *)*v619;
              if ((*(_DWORD *)(v620 + 8) & 0xFE) == 0x12)
                v620 = **(_QWORD **)(v620 + 16);
              PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v620);
              if (v617 >= 0x41 && v617 - llvm::APInt::countLeadingZerosSlowCase(v616) > 0x40)
                goto LABEL_1516;
              v622 = *(llvm::APInt **)v616;
              if (v617 < 0x41)
                v622 = v616;
              *(_QWORD *)v1367 = *(_QWORD *)v622;
              if (*(_QWORD *)v622 >= (unint64_t)PrimitiveSizeInBits
                || v1363 >= 0x41 && v1363 - llvm::APInt::countLeadingZerosSlowCase(v615) > 0x40)
              {
                goto LABEL_1516;
              }
              v623 = *(size_t **)v615;
              if (v1363 < 0x41)
                v623 = (size_t *)v615;
              v1364 = *v623;
              if (*v623 >= PrimitiveSizeInBits)
              {
LABEL_1516:
                v1028 = v1391;
                v1029 = v1424 - 1;
                v1030 = *((_DWORD *)v1391 + 2);
                if (v1030 >= 0x41)
                {
                  if (v1030 - llvm::APInt::countLeadingZerosSlowCase(v1391) > 0x40)
                    goto LABEL_1522;
                  v1031 = **(_QWORD **)v1028;
                }
                else
                {
                  v1031 = *(_QWORD *)v1391;
                }
                if (v1031 <= v1029)
                  v1029 = v1031;
LABEL_1522:
                LODWORD(v1032) = this[1].i32[0];
                LODWORD(v1429) = v1032;
                if (v1032 > 0x40)
                {
                  v1033 = operator new[]();
                  v1428 = (int8x8_t)v1033;
                  v1032 = v1429;
                  memcpy((void *)v1033, *(const void **)this, (((unint64_t)v1429 + 63) >> 3) & 0x3FFFFFF8);
                  if (v1032 > 0x40)
                  {
                    llvm::APInt::tcShiftRight((llvm::APInt *)v1033, (unint64_t *)((unint64_t)(v1032 + 63) >> 6), v1029);
                    goto LABEL_1526;
                  }
                }
                else
                {
                  v1033 = (unint64_t)*this;
                }
                if ((_DWORD)v1032 == (_DWORD)v1029)
                {
                  v1428 = 0;
                  LODWORD(v1032) = v1029;
                }
                else
                {
                  v1428 = (int8x8_t)(v1033 >> v1029);
                }
LABEL_1526:
                v1034 = v1423;
                if ((*((_BYTE *)v1423 + 17) & 4) != 0)
                {
                  v1035 = v1032 + ~(_DWORD)v1029;
                }
                else
                {
                  if ((*((_BYTE *)v1423 + 17) & 2) == 0)
                    goto LABEL_1531;
                  v1035 = v1032 - v1029;
                }
                sub_1C4912E54(&v1428, v1035, v1032);
LABEL_1531:
                if (sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 0, (uint64_t)&v1428))
                {
                  v210 = 0;
                  IntegerValue = (unint64_t)v1423;
LABEL_613:
                  if (v1429 >= 0x41)
                  {
                    v454 = (llvm::APInt *)v1428;
                    if (v1428)
                      goto LABEL_1642;
                  }
                  goto LABEL_1643;
                }
                v1036 = a4[1].u32[0];
                v1037 = v1036 - 1;
                if (v1036 >= 0x41)
                  v1038 = (int8x8_t *)(*(_QWORD *)a4 + 8 * ((v1036 - 1) >> 6));
                else
                  v1038 = a4;
                v1039 = *v1038;
                v1040 = a4[3].u32[0];
                v1041 = v1040 - 1;
                if (v1040 >= 0x41)
                  v1042 = (int8x8_t *)(*(_QWORD *)&a4[2] + 8 * ((v1040 - 1) >> 6));
                else
                  v1042 = a4 + 2;
                v1043 = *v1042;
                sub_1C4888094((uint64_t)a4, v1029);
                sub_1C4888094((uint64_t)&a4[2], v1029);
                if (v1029)
                  sub_1C4912E54(a4, 0, v1029);
                if ((*((_BYTE *)v1034 + 17) & 4) == 0)
                {
LABEL_1542:
                  IntegerValue = 0;
                  v210 = 1;
                  goto LABEL_613;
                }
                if (((1 << v1037) & *(_QWORD *)&v1039) != 0)
                {
                  v1045 = a4[1].u32[0];
                  v1046 = v1045 - 1;
                  if (v1045 < 0x41)
                  {
                    v1047 = a4;
LABEL_1552:
                    *(_QWORD *)v1047 |= 1 << v1046;
LABEL_1553:
                    v1050 = a4[1].u32[0];
                    if (v1050 > 0x40)
                    {
                      v1051 = (unint64_t)(v1050 + 63) >> 6;
                      v1052 = (uint64_t *)*a4;
                      v1053 = (uint64_t *)a4[2];
                      while (1)
                      {
                        v1055 = *v1052++;
                        v1054 = v1055;
                        v1056 = *v1053++;
                        if ((v1056 & v1054) != 0)
                          break;
                        if (!--v1051)
                          goto LABEL_1542;
                      }
                    }
                    else if ((*(_QWORD *)&a4[2] & *(_QWORD *)a4) == 0)
                    {
                      goto LABEL_1542;
                    }
                    IntegerValue = (unint64_t)llvm::UndefValue::get(*(llvm::UndefValue **)v1423, v1044);
                    v210 = 0;
                    goto LABEL_613;
                  }
                  v1049 = (char *)*a4;
                }
                else
                {
                  if (((1 << v1041) & *(_QWORD *)&v1043) == 0)
                    goto LABEL_1553;
                  v1048 = a4[3].u32[0];
                  v1046 = v1048 - 1;
                  if (v1048 < 0x41)
                  {
                    v1047 = a4 + 2;
                    goto LABEL_1552;
                  }
                  v1049 = (char *)*v18;
                }
                v1047 = (int8x8_t *)&v1049[8 * (v1046 >> 6)];
                goto LABEL_1552;
              }
              v624 = a4[3].u32[0];
              if (v624 > 0x40)
                bzero(*v18, ((unint64_t)(v624 + 63) >> 3) & 0x3FFFFFF8);
              else
                *v18 = 0;
              sub_1C4912E54(a4, 0, v1367[0] - 1);
              v625 = a4[1].u32[0];
              if (v625 > 0x40)
              {
                v1315 = (_QWORD *)*a4;
                v1316 = (uint64_t *)*this;
                v1317 = (unint64_t)(v625 + 63) >> 6;
                do
                {
                  v1318 = *v1316++;
                  *v1315++ &= v1318;
                  --v1317;
                }
                while (v1317);
              }
              else
              {
                *(_QWORD *)a4 &= *(_QWORD *)this;
              }
              LODWORD(v1388) = PrimitiveSizeInBits;
              if (PrimitiveSizeInBits > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v1387, -1, 1);
                LODWORD(v1435) = PrimitiveSizeInBits;
                llvm::APInt::initSlowCase((llvm::APInt *)&v1434, -1, 1);
              }
              else
              {
                if (PrimitiveSizeInBits)
                  v626 = (llvm::APInt *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
                else
                  v626 = 0;
                v1387 = v626;
                LODWORD(v1435) = PrimitiveSizeInBits;
                v1434 = (uint64_t)v626;
              }
              v1360 = *((unsigned __int8 *)v1369 + 16);
              if (v1360 == 54)
              {
                v627 = v1388;
                if (v1388 <= 0x40)
                {
                  v628 = (unint64_t)v1387 >> v1364;
                  if ((_DWORD)v1388 == (_DWORD)v1364)
                    v628 = 0;
                  LODWORD(v1429) = v1388;
                  v1428 = (int8x8_t)v628;
                  sub_1C4888094((uint64_t)&v1428, v1367[0]);
                  v629 = v1428;
                  v1387 = (llvm::APInt *)v1428;
                  v630 = v1429;
                  LODWORD(v1388) = (_DWORD)v1429;
                  goto LABEL_886;
                }
                v1007 = (((unint64_t)v1388 + 63) >> 3) & 0x3FFFFFF8;
                v1008 = (void *)operator new[]();
                v1009 = v1387;
                memcpy(v1008, v1387, v1007);
                llvm::APInt::tcShiftRight((llvm::APInt *)v1008, (unint64_t *)((unint64_t)(v627 + 63) >> 6), v1364);
                LODWORD(v1429) = v627;
                v1428 = (int8x8_t)operator new[]();
                memcpy(*(void **)&v1428, v1008, v1007);
              }
              else
              {
                v1427 = v1388;
                if (v1388 <= 0x40)
                {
                  v1012 = v1364;
                  if ((_DWORD)v1388 == (_DWORD)v1364)
                    v1012 = 63;
                  v1013 = (uint64_t)((_QWORD)v1387 << -(char)v1388) >> -(char)v1388 >> v1012;
                  v1014 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1388;
                  if (!(_DWORD)v1388)
                    v1014 = 0;
                  v1426 = v1014 & v1013;
                  LODWORD(v1429) = v1388;
                  v1428 = (int8x8_t)(v1014 & v1013);
                  sub_1C4888094((uint64_t)&v1428, v1367[0]);
                  v629 = v1428;
                  v1387 = (llvm::APInt *)v1428;
                  v630 = v1429;
                  LODWORD(v1388) = (_DWORD)v1429;
                  LODWORD(v1429) = 0;
                  goto LABEL_1486;
                }
                v1008 = (void *)((((unint64_t)v1388 + 63) >> 3) & 0x3FFFFFF8);
                v1426 = operator new[]();
                v1009 = v1387;
                memcpy((void *)v1426, v1387, (size_t)v1008);
                llvm::APInt::ashrSlowCase((unsigned int *)&v1426, v1364);
                LODWORD(v1429) = v1427;
                if (v1427 >= 0x41)
                {
                  v1428 = (int8x8_t)operator new[]();
                  memcpy(*(void **)&v1428, (const void *)v1426, (((unint64_t)v1429 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v1428 = (int8x8_t)v1426;
                }
              }
              sub_1C4888094((uint64_t)&v1428, v1367[0]);
              if (v1009)
                MEMORY[0x1CAA32F9C](v1009, 0x1000C8000313F17);
              v629 = v1428;
              v1387 = (llvm::APInt *)v1428;
              v630 = v1429;
              LODWORD(v1388) = (_DWORD)v1429;
              LODWORD(v1429) = 0;
              if (v1360 == 54)
              {
                if (v1008)
                  MEMORY[0x1CAA32F9C](v1008, 0x1000C8000313F17);
LABEL_886:
                v631 = v1364 - v1367[0];
                if (v1364 > v1367[0])
                {
                  v632 = v1435;
                  LODWORD(v1429) = v1435;
                  if (v1435 > 0x40)
                  {
                    v633 = operator new[]();
                    v1428 = (int8x8_t)v633;
                    v632 = v1429;
                    v1358 = v1429 + 63;
                    memcpy((void *)v633, (const void *)v1434, (v1358 >> 3) & 0x3FFFFFF8);
                    if (v632 > 0x40)
                    {
                      llvm::APInt::tcShiftRight((llvm::APInt *)v633, (unint64_t *)(v1358 >> 6), v631);
                      goto LABEL_892;
                    }
                  }
                  else
                  {
                    v633 = v1434;
                  }
                  if (v632 != v631)
                  {
                    v634 = (int8x8_t)(v633 >> v631);
LABEL_891:
                    v1428 = v634;
                    goto LABEL_892;
                  }
                  v1428 = 0;
LABEL_892:
                  if (v1435 >= 0x41 && v1434)
                    MEMORY[0x1CAA32F9C](v1434, 0x1000C8000313F17);
                  v1434 = (uint64_t)v1428;
                  LODWORD(v1435) = (_DWORD)v1429;
LABEL_1497:
                  if (v630 > 0x40)
                  {
                    v1319 = v630 + 63;
                    v1022 = (void *)operator new[]();
                    memcpy(v1022, *(const void **)&v629, (v1319 >> 3) & 0x3FFFFFF8);
                    v1021 = *this;
                    v1320 = v1319 >> 6;
                    v1321 = (uint64_t *)*this;
                    v1322 = v1022;
                    do
                    {
                      v1323 = *v1321++;
                      *v1322++ &= v1323;
                      --v1320;
                    }
                    while (v1320);
                  }
                  else
                  {
                    v1021 = *this;
                    v1022 = (void *)(*(_QWORD *)this & *(_QWORD *)&v629);
                  }
                  v1023 = v1435;
                  if (v1435 > 0x40)
                  {
                    v1359 = (((unint64_t)v1435 + 63) >> 3) & 0x3FFFFFF8;
                    v1024 = (void *)operator new[]();
                    memcpy(v1024, (const void *)v1434, v1359);
                    v1324 = (uint64_t *)*this;
                    v1325 = (unint64_t)(v1023 + 63) >> 6;
                    v1326 = v1024;
                    do
                    {
                      v1327 = *v1324++;
                      *v1326++ &= v1327;
                      --v1325;
                    }
                    while (v1325);
                  }
                  else
                  {
                    v1024 = (void *)(v1434 & *(_QWORD *)&v1021);
                  }
                  if (v630 > 0x40)
                    v1025 = memcmp(v1022, v1024, (((unint64_t)v630 + 63) >> 3) & 0x3FFFFFF8) == 0;
                  else
                    v1025 = v1022 == v1024;
                  v1026 = v1025;
                  if (v1023 >= 0x41 && v1024)
                    MEMORY[0x1CAA32F9C](v1024, 0x1000C8000313F17);
                  if (v630 >= 0x41 && v1022)
                    MEMORY[0x1CAA32F9C](v1022, 0x1000C8000313F17);
                  if (!v1026)
                    goto LABEL_1512;
                  if ((_DWORD)v1364 != v1367[0])
                  {
                    v1027 = *((_QWORD *)v1369 + 1);
                    if (!v1027 || *(_QWORD *)(v1027 + 8))
                    {
LABEL_1512:
                      IntegerValue = 0;
                      goto LABEL_1513;
                    }
                    v1328 = *(llvm::ConstantInt **)IntegerValue;
                    if (v1364 >= v1367[0])
                    {
                      v1342 = llvm::ConstantInt::get(v1328, (v1364 - v1367[0]), 0);
                      LOWORD(v1432) = 257;
                      v1343 = (char *)operator new(0x80uLL);
                      *(_QWORD *)v1343 = 0;
                      *((_QWORD *)v1343 + 2) = 0;
                      *((_QWORD *)v1343 + 1) = 0;
                      v1344 = v1343 + 8;
                      *((_QWORD *)v1343 + 5) = 0;
                      *((_QWORD *)v1343 + 6) = 0;
                      *((_QWORD *)v1343 + 4) = 0;
                      v1345 = (llvm::Value ***)(v1343 + 32);
                      *((_QWORD *)v1343 + 8) = *(_QWORD *)IntegerValue;
                      v1333 = (uint64_t ***)(v1343 + 64);
                      *((_QWORD *)v1343 + 3) = v1343 + 64;
                      *((_QWORD *)v1343 + 7) = v1343 + 64;
                      *((_QWORD *)v1343 + 9) = 0;
                      if (v1360 == 54)
                        v1346 = 54;
                      else
                        v1346 = 55;
                      v1343[80] = v1346;
                      v1343[81] = 0;
                      *((_WORD *)v1343 + 41) = 0;
                      *((_DWORD *)v1343 + 21) = 2;
                      *((_DWORD *)v1343 + 30) = 0;
                      *(_OWORD *)(v1343 + 104) = 0u;
                      *(_OWORD *)(v1343 + 88) = 0u;
                      *(_QWORD *)v1343 = IntegerValue;
                      v1349 = *(_QWORD *)(IntegerValue + 8);
                      v1348 = (_QWORD *)(IntegerValue + 8);
                      v1347 = v1349;
                      *v1344 = v1349;
                      if (v1349)
                        *(_QWORD *)(v1347 + 16) = v1344;
                      *((_QWORD *)v1343 + 2) = v1348;
                      *v1348 = v1343;
                      if (*((_QWORD *)v1343 + 4))
                      {
                        **((_QWORD **)v1343 + 6) = *((_QWORD *)v1343 + 5);
                        v1357 = *((_QWORD *)v1343 + 5);
                        if (v1357)
                          *(_QWORD *)(v1357 + 16) = *((_QWORD *)v1343 + 6);
                      }
                      *v1345 = v1342;
                      if (v1342)
                      {
                        v1352 = v1342[1];
                        v1351 = (llvm::Value ****)(v1342 + 1);
                        v1350 = v1352;
                        *((_QWORD *)v1343 + 5) = v1352;
                        if (v1352)
                          *((_QWORD *)v1350 + 2) = v1343 + 40;
                        *((_QWORD *)v1343 + 6) = v1351;
                        *v1351 = v1345;
                      }
                      llvm::Value::setName(v1333, (uint64_t)&v1428);
                      if ((*((_BYTE *)v1369 + 17) & 2) != 0)
                        *((_BYTE *)v1333 + 17) |= 2u;
                    }
                    else
                    {
                      v1329 = llvm::ConstantInt::get(v1328, v1367[0] - v1364, 0);
                      LOWORD(v1432) = 257;
                      v1330 = (char *)operator new(0x80uLL);
                      v1331 = v1330;
                      *(_QWORD *)v1330 = 0;
                      *((_QWORD *)v1330 + 2) = 0;
                      *((_QWORD *)v1330 + 1) = 0;
                      *((_QWORD *)v1330 + 5) = 0;
                      *((_QWORD *)v1330 + 6) = 0;
                      *((_QWORD *)v1330 + 4) = 0;
                      v1332 = (llvm::Value ***)(v1330 + 32);
                      *((_QWORD *)v1330 + 8) = *(_QWORD *)IntegerValue;
                      v1333 = (uint64_t ***)(v1330 + 64);
                      *((_QWORD *)v1330 + 3) = v1330 + 64;
                      *((_QWORD *)v1330 + 7) = v1330 + 64;
                      *((_QWORD *)v1330 + 9) = 0;
                      v1330[80] = 53;
                      v1330[81] = 0;
                      *((_WORD *)v1330 + 41) = 0;
                      *((_DWORD *)v1330 + 21) = 2;
                      *((_DWORD *)v1330 + 30) = 0;
                      *(_OWORD *)(v1330 + 104) = 0u;
                      *(_OWORD *)(v1330 + 88) = 0u;
                      *(_QWORD *)v1330 = IntegerValue;
                      v1336 = *(_QWORD *)(IntegerValue + 8);
                      v1335 = (_QWORD *)(IntegerValue + 8);
                      v1334 = v1336;
                      *((_QWORD *)v1330 + 1) = v1336;
                      if (v1336)
                        *(_QWORD *)(v1334 + 16) = v1330 + 8;
                      *((_QWORD *)v1330 + 2) = v1335;
                      *v1335 = v1330;
                      if (*((_QWORD *)v1330 + 4))
                      {
                        **((_QWORD **)v1330 + 6) = *((_QWORD *)v1330 + 5);
                        v1356 = *((_QWORD *)v1330 + 5);
                        if (v1356)
                          *(_QWORD *)(v1356 + 16) = *((_QWORD *)v1330 + 6);
                      }
                      *v1332 = v1329;
                      if (v1329)
                      {
                        v1339 = v1329[1];
                        v1338 = (llvm::Value ****)(v1329 + 1);
                        v1337 = v1339;
                        *((_QWORD *)v1330 + 5) = v1339;
                        if (v1339)
                          *((_QWORD *)v1337 + 2) = v1330 + 40;
                        *((_QWORD *)v1330 + 6) = v1338;
                        *v1338 = v1332;
                      }
                      llvm::Value::setName((uint64_t ***)v1330 + 8, (uint64_t)&v1428);
                      if (llvm::Instruction::hasNoSignedWrap(__n))
                        v1340 = 4;
                      else
                        v1340 = 0;
                      v1331[81] = v1331[81] & 0xFB | v1340;
                      if (llvm::Instruction::hasNoUnsignedWrap(__n))
                        v1341 = 2;
                      else
                        v1341 = 0;
                      v1331[81] = v1331[81] & 0xFD | v1341;
                    }
                    IntegerValue = (unint64_t)sub_1C577E498(a1, (llvm::Value *)v1333, (uint64_t)__n);
                  }
LABEL_1513:
                  if (v1435 >= 0x41 && v1434)
                    MEMORY[0x1CAA32F9C](v1434, 0x1000C8000313F17);
                  if (v1388 >= 0x41 && v1387)
                    MEMORY[0x1CAA32F9C](v1387, 0x1000C8000313F17);
                  if (IntegerValue)
                    goto LABEL_1663;
                  goto LABEL_1516;
                }
                goto LABEL_1496;
              }
LABEL_1486:
              if (v1427 >= 0x41 && v1426)
                MEMORY[0x1CAA32F9C](v1426, 0x1000C8000313F17);
              v1015 = v1364 - v1367[0];
              if (v1364 > v1367[0])
              {
                v1016 = v1435;
                LODWORD(v1429) = v1435;
                if (v1435 > 0x40)
                {
                  v1017 = operator new[]();
                  v1428 = (int8x8_t)v1017;
                  v1016 = v1429;
                  memcpy((void *)v1017, (const void *)v1434, (((unint64_t)v1429 + 63) >> 3) & 0x3FFFFFF8);
                  if (v1016 > 0x40)
                  {
                    llvm::APInt::ashrSlowCase((unsigned int *)&v1428, v1015);
                    goto LABEL_892;
                  }
                }
                else
                {
                  v1017 = v1434;
                }
                if (v1016 == v1015)
                  v1018 = 63;
                else
                  v1018 = v1364 - LOBYTE(v1367[0]);
                v1019 = v1017 << -(char)v1016 >> -(char)v1016 >> v1018;
                if (v1016)
                  v1020 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1016;
                else
                  v1020 = 0;
                v634 = (int8x8_t)(v1020 & v1019);
                goto LABEL_891;
              }
LABEL_1496:
              sub_1C4888094((uint64_t)&v1434, v1367[0] - v1364);
              goto LABEL_1497;
            }
            v330 = this[1].u32[0];
            if (v330 > 0x40)
              v331 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this);
            else
              v331 = v330 + __clz((unint64_t)*this) - 64;
            if (v331)
            {
              IntegerValue = v1424 - v331;
              LODWORD(v1429) = v1424;
              if (v1424 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v1428, 0, 0);
              else
                v1428 = 0;
              sub_1C4912E54(&v1428, 0, IntegerValue);
              v404 = sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 0, (uint64_t)&v1428);
              v405 = v404;
              if (v404)
              {
                llvm::Instruction::dropPoisonGeneratingFlags(v1423);
                IntegerValue = (unint64_t)v1423;
              }
              if (v1429 >= 0x41 && *(_QWORD *)&v1428)
                MEMORY[0x1CAA32F9C](*(_QWORD *)&v1428, 0x1000C8000313F17);
              if (v405)
                goto LABEL_1663;
            }
            goto LABEL_698;
          case '6':
            v1387 = 0;
            v228 = *((_DWORD *)v1423 + 5);
            if ((v228 & 0x40000000) != 0)
              v229 = (char *)*((_QWORD *)v1423 - 1);
            else
              v229 = (char *)v1423 - 32 * (v228 & 0x7FFFFFF);
            v332 = (unsigned __int8 *)*((_QWORD *)v229 + 4);
            v1428 = (int8x8_t)&v1387;
            v1429 = 0;
            if (!sub_1C4D89F84((uint64_t)&v1428, v332))
              goto LABEL_698;
            v333 = v1387;
            v334 = v1424;
            IntegerValue = v1424 - 1;
            v335 = *((_DWORD *)v1387 + 2);
            if (v335 >= 0x41)
            {
              if (v335 - llvm::APInt::countLeadingZerosSlowCase(v1387) > 0x40)
                goto LABEL_507;
              v336 = **(_QWORD **)v333;
            }
            else
            {
              v336 = *(_QWORD *)v1387;
            }
            if (v336 <= IntegerValue)
              IntegerValue = v336;
LABEL_507:
            v406 = this[1].u32[0];
            if (v406 > 0x40)
            {
              if (IntegerValue > llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this))
              {
                LODWORD(v1429) = v406;
                goto LABEL_642;
              }
              v464 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this);
            }
            else
            {
              v407 = (unint64_t)*this;
              if (IntegerValue > v406 + __clz((unint64_t)*this) - 64)
              {
                LODWORD(v1429) = this[1].i32[0];
LABEL_641:
                v1428 = (int8x8_t)v407;
                goto LABEL_643;
              }
              v463 = __clz(__rbit64(v407));
              if (v406 >= v463)
                v464 = v463;
              else
                v464 = this[1].i32[0];
            }
            v465 = *((_DWORD *)v1423 + 5);
            if ((v465 & 0x40000000) != 0)
              v466 = (uint64_t *)*((_QWORD *)v1423 - 1);
            else
              v466 = (uint64_t *)((char *)v1423 - 32 * (v465 & 0x7FFFFFF));
            v467 = v334 - v464;
            v468 = *v466;
            v469 = *(llvm::APInt ***)(a1 + 56);
            v470 = *(_QWORD *)(a1 + 72);
            if (!v6 || !*((_QWORD *)v6 + 5))
            {
              if (!v468
                || *(unsigned __int8 *)(v468 + 16) < 0x1Cu
                || (v6 = (llvm::Instruction *)v468, !*(_QWORD *)(v468 + 40)))
              {
                v6 = 0;
              }
            }
            v1428 = *(int8x8_t *)(a1 + 80);
            v1429 = v469;
            v1430 = (unint64_t)v6;
            v1431 = v470;
            v1432 = 0;
            v1433 = 1;
            if (sub_1C4F85990((llvm::Constant *)v468, v1425 + 1, (uint64_t)&v1428) >= v467)
              goto LABEL_1051;
            LODWORD(v1429) = this[1].i32[0];
            if (v1429 <= 0x40)
            {
              v407 = (unint64_t)*this;
              goto LABEL_641;
            }
LABEL_642:
            v1428 = (int8x8_t)operator new[]();
            memcpy(*(void **)&v1428, *(const void **)this, (((unint64_t)v1429 + 63) >> 3) & 0x3FFFFFF8);
LABEL_643:
            sub_1C4888094((uint64_t)&v1428, IntegerValue);
            v471 = v1423;
            if ((*((_BYTE *)v1423 + 17) & 2) != 0)
            {
              sub_1C4912E54(&v1428, 0, IntegerValue);
              v471 = v1423;
            }
            v472 = sub_1C5854B78((_QWORD *)a1, (uint64_t)v471, 0, (uint64_t)&v1428);
            v307 = v472;
            if (v472)
            {
LABEL_646:
              IntegerValue = (unint64_t)v1423;
            }
            else
            {
              v473 = a4[1].u32[0];
              if (v473 > 0x40)
              {
                llvm::APInt::tcShiftRight(*(llvm::APInt **)a4, (unint64_t *)((unint64_t)(v473 + 63) >> 6), IntegerValue);
              }
              else if ((_DWORD)v473 == (_DWORD)IntegerValue)
              {
                *a4 = 0;
              }
              else
              {
                *a4 = (int8x8_t)(*(unint64_t *)a4 >> IntegerValue);
              }
              v614 = a4[3].u32[0];
              if (v614 > 0x40)
              {
                llvm::APInt::tcShiftRight((llvm::APInt *)*v18, (unint64_t *)((unint64_t)(v614 + 63) >> 6), IntegerValue);
              }
              else if ((_DWORD)v614 == (_DWORD)IntegerValue)
              {
                *v18 = 0;
              }
              else
              {
                *v18 = (void *)((unint64_t)*v18 >> IntegerValue);
              }
              if (IntegerValue)
              {
                v575 = a4[1].u32[0];
                v576 = v575 - IntegerValue;
LABEL_848:
                sub_1C4912E54(a4, v576, v575);
              }
            }
            if (v1429 >= 0x41)
            {
              v415 = (uint64_t)v1428;
              if (v1428)
LABEL_851:
                MEMORY[0x1CAA32F9C](v415, 0x1000C8000313F17);
            }
LABEL_852:
            if (!v307)
              goto LABEL_1644;
            goto LABEL_1663;
          case '7':
            v239 = *((_DWORD *)v1423 + 5);
            if ((v239 & 0x40000000) != 0)
              v240 = (uint64_t *)*((_QWORD *)v1423 - 1);
            else
              v240 = (uint64_t *)((char *)v1423 - 32 * (v239 & 0x7FFFFFF));
            v346 = *v240;
            v347 = *(llvm::APInt ***)(a1 + 56);
            v348 = *(_QWORD *)(a1 + 72);
            if (!v6 || (v349 = v6, !*((_QWORD *)v6 + 5)))
            {
              if (!v346
                || *(unsigned __int8 *)(v346 + 16) < 0x1Cu
                || (v349 = (llvm::Instruction *)v346, !*(_QWORD *)(v346 + 40)))
              {
                v349 = 0;
              }
            }
            v1428 = *(int8x8_t *)(a1 + 80);
            v1429 = v347;
            v1430 = (unint64_t)v349;
            v1431 = v348;
            v1432 = 0;
            v1433 = 1;
            v350 = sub_1C4F85990((llvm::Constant *)v346, (int)v32 + 1, (uint64_t)&v1428);
            IntegerValue = v350;
            v351 = v1424;
            v352 = this[1].u32[0];
            if (v352 > 0x40)
            {
              if (v350 >= v351
                                       - llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this))
                goto LABEL_1051;
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) != v352 - 1)
                goto LABEL_434;
              goto LABEL_438;
            }
            v353 = __clz(__rbit64((unint64_t)*this));
            if (v352 < v353)
              v353 = this[1].u32[0];
            if (v350 < v1424 - v353)
            {
              if (*this != 1)
              {
LABEL_434:
                v1426 = 0;
                v354 = *((_DWORD *)v1423 + 5);
                if ((v354 & 0x40000000) != 0)
                  v355 = (char *)*((_QWORD *)v1423 - 1);
                else
                  v355 = (char *)v1423 - 32 * (v354 & 0x7FFFFFF);
                v501 = (unsigned __int8 *)*((_QWORD *)v355 + 4);
                v1428 = (int8x8_t)&v1426;
                v1429 = 0;
                if (sub_1C4D89F84((uint64_t)&v1428, v501))
                {
                  v502 = (unint64_t **)v1426;
                  v503 = v1424 - 1;
                  v504 = *(_DWORD *)(v1426 + 8);
                  if (v504 >= 0x41)
                  {
                    if (v504 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v1426) > 0x40)
                      goto LABEL_826;
                    v505 = **v502;
                  }
                  else
                  {
                    v505 = *(_QWORD *)v1426;
                  }
                  if (v505 <= v503)
                    LODWORD(v503) = v505;
LABEL_826:
                  LODWORD(v1388) = this[1].i32[0];
                  if (v1388 > 0x40)
                  {
                    v1387 = (llvm::APInt *)operator new[]();
                    memcpy(v1387, *(const void **)this, (((unint64_t)v1388 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v1387 = (llvm::APInt *)*this;
                  }
                  sub_1C4888094((uint64_t)&v1387, v503);
                  v608 = this[1].u32[0];
                  if (v608 > 0x40)
                    v609 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this);
                  else
                    v609 = v608 + __clz((unint64_t)*this) - 64;
                  if (v609 <= v503)
                  {
                    v610 = 1 << (v1388 - 1);
                    if (v1388 > 0x40)
                      *((_QWORD *)v1387 + ((v1388 - 1) >> 6)) |= v610;
                    else
                      v1387 = (llvm::APInt *)((unint64_t)v1387 | v610);
                  }
                  v721 = v1423;
                  if ((*((_BYTE *)v1423 + 17) & 2) != 0)
                  {
                    sub_1C4912E54(&v1387, 0, v503);
                    v721 = v1423;
                  }
                  if (sub_1C5854B78((_QWORD *)a1, (uint64_t)v721, 0, (uint64_t)&v1387))
                  {
                    v722 = 1;
                    IntegerValue = (unint64_t)v1423;
                    goto LABEL_1144;
                  }
                  v723 = v1424;
                  if (v1424 >= (int)IntegerValue + (int)v503 - 1)
                    v724 = IntegerValue + v503 - 1;
                  else
                    v724 = v1424;
                  LODWORD(v1435) = v1424;
                  if (v1424 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v1434, 0, 0);
                    v723 = v1435;
                  }
                  else
                  {
                    v1434 = 0;
                  }
                  sub_1C4912E54(&v1434, v723 - v724, v723);
                  v725 = a4[1].u32[0];
                  if (v725 > 0x40)
                  {
                    llvm::APInt::tcShiftRight(*(llvm::APInt **)a4, (unint64_t *)((unint64_t)(v725 + 63) >> 6), v503);
                  }
                  else if ((_DWORD)v725 == (_DWORD)v503)
                  {
                    *a4 = 0;
                  }
                  else
                  {
                    *a4 = (int8x8_t)(*(unint64_t *)a4 >> v503);
                  }
                  v836 = a4[3].u32[0];
                  if (v836 > 0x40)
                  {
                    llvm::APInt::tcShiftRight((llvm::APInt *)*v18, (unint64_t *)((unint64_t)(v836 + 63) >> 6), v503);
                  }
                  else if ((_DWORD)v836 == (_DWORD)v503)
                  {
                    *v18 = 0;
                  }
                  else
                  {
                    *v18 = (void *)((unint64_t)*v18 >> v503);
                  }
                  v837 = v1424 + ~(_DWORD)v503;
                  v838 = v837 >> 6;
                  v839 = (int8x8_t *)(*(_QWORD *)a4 + 8 * v838);
                  if (a4[1].i32[0] < 0x41u)
                    v839 = a4;
                  v840 = 1 << v837;
                  if (((1 << v837) & *(_QWORD *)v839) != 0)
                    goto LABEL_1130;
                  v856 = this[1].u32[0];
                  if (v856 > 0x40)
                  {
                    v865 = 0;
                    v866 = v856 + 63;
                    v857 = v1434;
                    v867 = (v866 >> 3) & 0x3FFFFFF8;
                    while ((*(_QWORD *)(v1434 + v865) & *(_QWORD *)(*(_QWORD *)this + v865)) == 0)
                    {
                      v865 += 8;
                      if (v867 == v865)
                        goto LABEL_1130;
                    }
                  }
                  else
                  {
                    v857 = v1434;
                    if ((v1434 & *(_QWORD *)this) == 0)
                    {
LABEL_1130:
                      v841 = *((_DWORD *)v1423 + 5);
                      if ((v841 & 0x40000000) != 0)
                        v842 = (char *)*((_QWORD *)v1423 - 1);
                      else
                        v842 = (char *)v1423 - 32 * (v841 & 0x7FFFFFF);
                      v843 = *(_QWORD **)v842;
                      v844 = *((_QWORD *)v842 + 4);
                      LOWORD(v1432) = 257;
                      v845 = (char *)operator new(0x80uLL);
                      v846 = v845;
                      *(_QWORD *)v845 = 0;
                      *((_QWORD *)v845 + 2) = 0;
                      *((_QWORD *)v845 + 1) = 0;
                      *((_QWORD *)v845 + 5) = 0;
                      *((_QWORD *)v845 + 6) = 0;
                      *((_QWORD *)v845 + 4) = 0;
                      v847 = v845 + 32;
                      *((_QWORD *)v845 + 8) = *v843;
                      v848 = (llvm::Value *)(v845 + 64);
                      *((_QWORD *)v845 + 3) = v845 + 64;
                      *((_QWORD *)v845 + 7) = v845 + 64;
                      *((_QWORD *)v845 + 9) = 0;
                      v845[80] = 54;
                      v845[81] = 0;
                      *((_WORD *)v845 + 41) = 0;
                      *((_DWORD *)v845 + 21) = 2;
                      *((_DWORD *)v845 + 30) = 0;
                      *(_OWORD *)(v845 + 104) = 0u;
                      *(_OWORD *)(v845 + 88) = 0u;
                      *(_QWORD *)v845 = v843;
                      v851 = v843[1];
                      v850 = v843 + 1;
                      v849 = v851;
                      *((_QWORD *)v845 + 1) = v851;
                      if (v851)
                        *(_QWORD *)(v849 + 16) = v845 + 8;
                      *((_QWORD *)v845 + 2) = v850;
                      *v850 = v845;
                      if (*((_QWORD *)v845 + 4))
                      {
                        **((_QWORD **)v845 + 6) = *((_QWORD *)v845 + 5);
                        v1314 = *((_QWORD *)v845 + 5);
                        if (v1314)
                          *(_QWORD *)(v1314 + 16) = *((_QWORD *)v845 + 6);
                      }
                      *v847 = v844;
                      if (v844)
                      {
                        v854 = *(_QWORD *)(v844 + 8);
                        v853 = (_QWORD *)(v844 + 8);
                        v852 = v854;
                        *((_QWORD *)v845 + 5) = v854;
                        if (v854)
                          *(_QWORD *)(v852 + 16) = v845 + 40;
                        *((_QWORD *)v845 + 6) = v853;
                        *v853 = v847;
                      }
                      llvm::Value::setName((uint64_t ***)v845 + 8, (uint64_t)&v1428);
                      v855 = v1423;
                      v846[81] = v846[81] & 0xFD | *((_BYTE *)v1423 + 17) & 2;
                      IntegerValue = (unint64_t)sub_1C577E498(a1, v848, (uint64_t)v855);
                      v722 = 1;
LABEL_1141:
                      if (v1435 >= 0x41 && v1434)
                        MEMORY[0x1CAA32F9C](v1434, 0x1000C8000313F17);
LABEL_1144:
                      if (v1388 >= 0x41 && v1387)
                        MEMORY[0x1CAA32F9C](v1387, 0x1000C8000313F17);
                      if (v722)
                        goto LABEL_1663;
                      goto LABEL_1644;
                    }
                  }
                  v858 = a4[3].u32[0];
                  v859 = (unint64_t)a4[2];
                  v860 = (int8x8_t *)(v859 + 8 * v838);
                  if (v858 < 0x41)
                    v860 = a4 + 2;
                  if ((*(_QWORD *)v860 & v840) != 0)
                  {
                    if (v858 > 0x40)
                    {
                      v912 = (unint64_t)(v858 + 63) >> 6;
                      v722 = 0;
                      do
                      {
                        v913 = *(_QWORD *)v857;
                        v857 += 8;
                        *(_QWORD *)v859 |= v913;
                        v859 += 8;
                        --v912;
                      }
                      while (v912);
                    }
                    else
                    {
                      v722 = 0;
                      *v18 = (void *)(v857 | v859);
                    }
                  }
                  else
                  {
                    v722 = 0;
                  }
                  goto LABEL_1141;
                }
LABEL_698:
                v221 = v1423;
LABEL_699:
                LODWORD(v32) = v1425;
                v506 = *(llvm::APInt ***)(a1 + 56);
                v507 = *(_QWORD *)(a1 + 72);
                if (!v6 || !*((_QWORD *)v6 + 5))
                {
                  if (!v221 || *((unsigned __int8 *)v221 + 16) < 0x1Cu || (v6 = v221, !*((_QWORD *)v221 + 5)))
                    v6 = 0;
                }
                v1428 = *(int8x8_t *)(a1 + 80);
                v1429 = v506;
                v1430 = (unint64_t)v6;
                v1431 = v507;
                v1432 = 0;
                v1433 = 1;
LABEL_702:
                sub_1C4F82B7C((uint64_t)v221, a4, v32, (const llvm::DataLayout **)&v1428);
                goto LABEL_1644;
              }
LABEL_438:
              v356 = *((_DWORD *)v1423 + 5);
              if ((v356 & 0x40000000) != 0)
                v357 = (char *)*((_QWORD *)v1423 - 1);
              else
                v357 = (char *)v1423 - 32 * (v356 & 0x7FFFFFF);
              v508 = *(_QWORD **)v357;
              v509 = *((_QWORD *)v357 + 4);
              if ((v356 & 0x10000000) != 0)
              {
                v510 = ***(_QWORD ***)v1423;
                v511 = *(_QWORD *)(v510 + 152);
                v512 = *(unsigned int *)(v510 + 168);
                if ((_DWORD)v512)
                {
                  LODWORD(v513) = (v512 - 1) & ((v1423 >> 4) ^ (v1423 >> 9));
                  v514 = v511 + 16 * v513;
                  v515 = *(llvm::Instruction **)v514;
                  if (*(llvm::Instruction **)v514 != v1423)
                  {
                    v516 = 1;
                    do
                    {
                      if (v515 == (llvm::Instruction *)-4096)
                        goto LABEL_894;
                      v517 = v513 + v516++;
                      v513 = v517 & (v512 - 1);
                      v515 = *(llvm::Instruction **)(v511 + 16 * v513);
                    }
                    while (v515 != v1423);
                    v514 = v511 + 16 * v513;
                  }
                }
                else
                {
LABEL_894:
                  v514 = v511 + 16 * v512;
                }
                v635 = *(_QWORD **)(v514 + 8);
                v638 = (llvm::APInt **)*v635;
                v636 = (char *)(v635 + 2);
                v637 = v638;
              }
              else
              {
                v637 = 0;
                v636 = &byte_1C871356D;
              }
              LOWORD(v1432) = 261;
              v1428 = (int8x8_t)v636;
              v1429 = v637;
              v639 = (char *)operator new(0x80uLL);
              *((_QWORD *)v639 + 5) = 0;
              v640 = v639 + 40;
              *((_QWORD *)v639 + 6) = 0;
              *((_QWORD *)v639 + 8) = *v508;
              v641 = (uint64_t ***)(v639 + 64);
              *((_QWORD *)v639 + 3) = v639 + 64;
              *((_QWORD *)v639 + 7) = v639 + 64;
              *((_QWORD *)v639 + 9) = 0;
              v642 = 54;
              goto LABEL_897;
            }
            goto LABEL_1051;
          case '8':
            v234 = sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 1u, (uint64_t)this);
            IntegerValue = (unint64_t)v1423;
            if (v234)
              goto LABEL_1663;
            LODWORD(v235) = v1416;
            v1407 = v1416;
            if (v1416 <= 0x40)
            {
              v236 = ~(unint64_t)v1415;
              if (v1416)
                v237 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1416;
              else
                v237 = 0;
              v238 = (int8x8_t)(v237 & v236);
              v1406 = (void *)(v237 & v236);
              v1407 = 0;
              goto LABEL_526;
            }
            v412 = (((unint64_t)v1416 + 63) >> 3) & 0x3FFFFFF8;
            v1406 = (void *)operator new[]();
            memcpy(v1406, v1415, v412);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1406);
            v235 = v1407;
            v238 = (int8x8_t)v1406;
            v1407 = 0;
            if (v235 <= 0x40)
            {
LABEL_526:
              *(_QWORD *)&v238 &= *(_QWORD *)this;
              goto LABEL_661;
            }
            v475 = 0;
            v476 = *this;
            do
            {
              *(_QWORD *)(*(_QWORD *)&v238 + v475) &= *(_QWORD *)(*(_QWORD *)&v476 + v475);
              v475 += 8;
            }
            while ((((unint64_t)(v235 + 63) >> 3) & 0x3FFFFFF8) != v475);
LABEL_661:
            LODWORD(v1429) = v235;
            v1428 = v238;
            v477 = sub_1C5854B78((_QWORD *)a1, IntegerValue, 0, (uint64_t)&v1428);
            if (v235 >= 0x41 && *(_QWORD *)&v238)
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v238, 0x1000C8000313F17);
            v422 = (llvm::Constant ***)v1371;
            if (v477)
              goto LABEL_665;
            v478 = v1420;
            if (v1420 > 0x40)
            {
              v1284 = (((unint64_t)v1420 + 63) >> 3) & 0x3FFFFFF8;
              v479 = operator new[]();
              memcpy((void *)v479, (const void *)v1419, v1284);
            }
            else
            {
              v479 = v1419;
            }
            v480 = v1422;
            if (v1422 > 0x40)
            {
              v1285 = (((unint64_t)v1422 + 63) >> 3) & 0x3FFFFFF8;
              v481 = operator new[]();
              v1286 = v1285;
              v422 = (llvm::Constant ***)v1371;
              memcpy((void *)v481, (const void *)v1421, v1286);
            }
            else
            {
              v481 = v1421;
            }
            if (v478 > 0x40)
            {
              v1267 = (uint64_t *)v1415;
              v1268 = (unint64_t)(v478 + 63) >> 6;
              v1269 = (_QWORD *)v479;
              do
              {
                v1270 = *v1267++;
                *v1269++ |= v1270;
                --v1268;
              }
              while (v1268);
              v422 = (llvm::Constant ***)v1371;
            }
            else
            {
              v479 |= (unint64_t)v1415;
            }
            if (v480 > 0x40)
            {
              v1271 = (uint64_t *)v1417;
              v1272 = (unint64_t)(v480 + 63) >> 6;
              v1273 = (_QWORD *)v481;
              do
              {
                v1274 = *v1271++;
                *v1273++ &= v1274;
                --v1272;
              }
              while (v1272);
              v422 = (llvm::Constant ***)v1371;
            }
            else
            {
              v481 &= (unint64_t)v1417;
            }
            if (a4[1].i32[0] >= 0x41u && *(_QWORD *)a4)
              ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
            *a4 = (int8x8_t)v479;
            a4[1].i32[0] = v478;
            if (a4[3].i32[0] >= 0x41u && *v18)
            {
              MEMORY[0x1CAA32F9C](*v18, 0x1000C8000313F17);
              LODWORD(v478) = a4[1].i32[0];
            }
            a4[2] = (int8x8_t)v481;
            a4[3].i32[0] = v480;
            if (v478 > 0x40)
            {
              v483 = v478 + 63;
              v482 = operator new[]();
              memcpy((void *)v482, *(const void **)a4, (v483 >> 3) & 0x3FFFFFF8);
              v484 = (uint64_t *)a4[2];
              v485 = v483 >> 6;
              v486 = (_QWORD *)v482;
              do
              {
                v487 = *v484++;
                *v486++ |= v487;
                --v485;
              }
              while (v485);
            }
            else
            {
              v482 = v481 | *(_QWORD *)a4;
            }
            v488 = this[1].u32[0];
            if (v488 > 0x40)
            {
              v490 = (unint64_t)(v488 + 63) >> 6;
              v491 = (uint64_t *)*this;
              v492 = v490 - 1;
              v493 = (uint64_t *)v482;
              do
              {
                v495 = *v491++;
                v494 = v495;
                v496 = *v493++;
                v497 = v494 & ~v496;
                v489 = v497 == 0;
                v1011 = v492-- != 0;
                v498 = v1011;
              }
              while (!v497 && (v498 & 1) != 0);
            }
            else
            {
              v489 = (*(_QWORD *)this & ~v482) == 0;
            }
            if (v478 >= 0x41 && v482)
              MEMORY[0x1CAA32F9C](v482, 0x1000C8000313F17);
            if (v489)
              goto LABEL_1042;
            v499 = v1420;
            if (v1420 > 0x40)
            {
              v590 = (((unint64_t)v1420 + 63) >> 3) & 0x3FFFFFF8;
              v500 = operator new[]();
              memcpy((void *)v500, (const void *)v1419, v590);
              v591 = (uint64_t *)v1417;
              v592 = (unint64_t)(v499 + 63) >> 6;
              v593 = (_QWORD *)v500;
              do
              {
                v594 = *v591++;
                *v593++ |= v594;
                --v592;
              }
              while (v592);
            }
            else
            {
              v500 = (unint64_t)v1417 | v1419;
            }
            v595 = this[1].u32[0];
            if (v595 > 0x40)
            {
              v597 = (unint64_t)(v595 + 63) >> 6;
              v598 = (uint64_t *)*this;
              v599 = v597 - 1;
              v600 = (uint64_t *)v500;
              do
              {
                v602 = *v598++;
                v601 = v602;
                v603 = *v600++;
                v604 = v601 & ~v603;
                v596 = v604 == 0;
                v1011 = v599-- != 0;
                v605 = v1011;
              }
              while (!v604 && (v605 & 1) != 0);
            }
            else
            {
              v596 = (*(_QWORD *)this & ~v500) == 0;
            }
            if (v499 >= 0x41 && v500)
              MEMORY[0x1CAA32F9C](v500, 0x1000C8000313F17);
            if (v596)
              goto LABEL_1051;
            v606 = v1416;
            if (v1416 > 0x40)
            {
              v699 = (((unint64_t)v1416 + 63) >> 3) & 0x3FFFFFF8;
              v607 = operator new[]();
              memcpy((void *)v607, v1415, v699);
              v700 = (uint64_t *)v1421;
              v701 = (unint64_t)(v606 + 63) >> 6;
              v702 = (_QWORD *)v607;
              do
              {
                v703 = *v700++;
                *v702++ |= v703;
                --v701;
              }
              while (v701);
            }
            else
            {
              v607 = v1421 | (unint64_t)v1415;
            }
            v704 = this[1].u32[0];
            if (v704 > 0x40)
            {
              v706 = (unint64_t)(v704 + 63) >> 6;
              v707 = (uint64_t *)*this;
              v708 = v706 - 1;
              v709 = (uint64_t *)v607;
              do
              {
                v711 = *v707++;
                v710 = v711;
                v712 = *v709++;
                v713 = v710 & ~v712;
                v705 = v713 == 0;
                v1011 = v708-- != 0;
                v714 = v1011;
              }
              while (!v713 && (v714 & 1) != 0);
            }
            else
            {
              v705 = (*(_QWORD *)this & ~v607) == 0;
            }
            if (v606 >= 0x41 && v607)
              MEMORY[0x1CAA32F9C](v607, 0x1000C8000313F17);
            v715 = v1423;
            if (v705)
            {
              v716 = *((_DWORD *)v1423 + 5);
              if ((v716 & 0x40000000) != 0)
                v692 = (char *)*((_QWORD *)v1423 - 1);
              else
                v692 = (char *)v1423 - 32 * (v716 & 0x7FFFFFF);
LABEL_1185:
              IntegerValue = *((_QWORD *)v692 + 4);
              goto LABEL_1663;
            }
            LODWORD(v717) = v1420;
            v1405 = v1420;
            if (v1420 > 0x40)
            {
              v835 = (((unint64_t)v1420 + 63) >> 3) & 0x3FFFFFF8;
              v1404 = (void *)operator new[]();
              memcpy(v1404, (const void *)v1419, v835);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1404);
              v717 = v1405;
              v720 = (int8x8_t)v1404;
              v1405 = 0;
              if (v717 > 0x40)
              {
                v872 = 0;
                v873 = *this;
                do
                {
                  *(_QWORD *)(*(_QWORD *)&v720 + v872) &= *(_QWORD *)(*(_QWORD *)&v873 + v872);
                  v872 += 8;
                }
                while ((((unint64_t)(v717 + 63) >> 3) & 0x3FFFFFF8) != v872);
LABEL_1179:
                LODWORD(v1429) = v717;
                v1428 = v720;
                v874 = sub_1C5854D2C((uint64_t)v715, 1u, &v1428);
                if (v717 >= 0x41 && *(_QWORD *)&v720)
                  MEMORY[0x1CAA32F9C](*(_QWORD *)&v720, 0x1000C8000313F17);
                if (!v874)
                  goto LABEL_1644;
                goto LABEL_665;
              }
            }
            else
            {
              v718 = ~v1419;
              v719 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1420;
              if (!v1420)
                v719 = 0;
              v720 = (int8x8_t)(v719 & v718);
              v1404 = (void *)(v719 & v718);
              v1405 = 0;
            }
            *(_QWORD *)&v720 &= *(_QWORD *)this;
            goto LABEL_1179;
          case '9':
            v203 = sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 1u, (uint64_t)this);
            IntegerValue = (unint64_t)v1423;
            if (v203)
              goto LABEL_1663;
            LODWORD(v204) = v1418;
            v1403 = v1418;
            if (v1418 > 0x40)
            {
              v391 = (((unint64_t)v1418 + 63) >> 3) & 0x3FFFFFF8;
              v1402 = (void *)operator new[]();
              memcpy(v1402, v1417, v391);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1402);
              v204 = v1403;
              v207 = (int8x8_t)v1402;
              v1403 = 0;
              if (v204 > 0x40)
              {
                v419 = 0;
                v420 = *this;
                do
                {
                  *(_QWORD *)(*(_QWORD *)&v207 + v419) &= *(_QWORD *)(*(_QWORD *)&v420 + v419);
                  v419 += 8;
                }
                while ((((unint64_t)(v204 + 63) >> 3) & 0x3FFFFFF8) != v419);
LABEL_562:
                LODWORD(v1429) = v204;
                v1428 = v207;
                v421 = sub_1C5854B78((_QWORD *)a1, IntegerValue, 0, (uint64_t)&v1428);
                if (v204 >= 0x41 && *(_QWORD *)&v207)
                  MEMORY[0x1CAA32F9C](*(_QWORD *)&v207, 0x1000C8000313F17);
                v422 = (llvm::Constant ***)v1371;
                if (!v421)
                {
                  v423 = v1420;
                  if (v1420 > 0x40)
                  {
                    v1281 = (((unint64_t)v1420 + 63) >> 3) & 0x3FFFFFF8;
                    v424 = operator new[]();
                    memcpy((void *)v424, (const void *)v1419, v1281);
                  }
                  else
                  {
                    v424 = v1419;
                  }
                  v425 = v1422;
                  if (v1422 > 0x40)
                  {
                    v1282 = (((unint64_t)v1422 + 63) >> 3) & 0x3FFFFFF8;
                    v426 = operator new[]();
                    v1283 = v1282;
                    v422 = (llvm::Constant ***)v1371;
                    memcpy((void *)v426, (const void *)v1421, v1283);
                  }
                  else
                  {
                    v426 = v1421;
                  }
                  if (v423 > 0x40)
                  {
                    v1295 = (uint64_t *)v1415;
                    v1296 = (unint64_t)(v423 + 63) >> 6;
                    v1297 = (_QWORD *)v424;
                    do
                    {
                      v1298 = *v1295++;
                      *v1297++ &= v1298;
                      --v1296;
                    }
                    while (v1296);
                    v422 = (llvm::Constant ***)v1371;
                  }
                  else
                  {
                    v424 &= (unint64_t)v1415;
                  }
                  if (v425 > 0x40)
                  {
                    v1299 = (uint64_t *)v1417;
                    v1300 = (unint64_t)(v425 + 63) >> 6;
                    v1301 = (_QWORD *)v426;
                    do
                    {
                      v1302 = *v1299++;
                      *v1301++ |= v1302;
                      --v1300;
                    }
                    while (v1300);
                    v422 = (llvm::Constant ***)v1371;
                  }
                  else
                  {
                    v426 |= (unint64_t)v1417;
                  }
                  if (a4[1].i32[0] >= 0x41u && *(_QWORD *)a4)
                    ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
                  *a4 = (int8x8_t)v424;
                  a4[1].i32[0] = v423;
                  if (a4[3].i32[0] >= 0x41u && *v18)
                  {
                    MEMORY[0x1CAA32F9C](*v18, 0x1000C8000313F17);
                    LODWORD(v423) = a4[1].i32[0];
                  }
                  a4[2] = (int8x8_t)v426;
                  a4[3].i32[0] = v425;
                  if (v423 > 0x40)
                  {
                    v428 = v423 + 63;
                    v427 = operator new[]();
                    memcpy((void *)v427, *(const void **)a4, (v428 >> 3) & 0x3FFFFFF8);
                    v429 = (uint64_t *)a4[2];
                    v430 = v428 >> 6;
                    v431 = (_QWORD *)v427;
                    do
                    {
                      v432 = *v429++;
                      *v431++ |= v432;
                      --v430;
                    }
                    while (v430);
                  }
                  else
                  {
                    v427 = v426 | *(_QWORD *)a4;
                  }
                  v433 = this[1].u32[0];
                  if (v433 > 0x40)
                  {
                    v435 = (unint64_t)(v433 + 63) >> 6;
                    v436 = (uint64_t *)*this;
                    v437 = v435 - 1;
                    v438 = (uint64_t *)v427;
                    do
                    {
                      v440 = *v436++;
                      v439 = v440;
                      v441 = *v438++;
                      v442 = v439 & ~v441;
                      v434 = v442 == 0;
                      v1011 = v437-- != 0;
                      v443 = v1011;
                    }
                    while (!v442 && (v443 & 1) != 0);
                  }
                  else
                  {
                    v434 = (*(_QWORD *)this & ~v427) == 0;
                  }
                  if (v423 >= 0x41 && v427)
                    MEMORY[0x1CAA32F9C](v427, 0x1000C8000313F17);
                  if (v434)
                  {
LABEL_1042:
                    v766 = v422;
LABEL_1660:
                    v652 = llvm::Constant::getIntegerValue(v766, (llvm::Type *)&a4[2], v32);
                    goto LABEL_1661;
                  }
                  v444 = v1422;
                  if (v1422 > 0x40)
                  {
                    v556 = (((unint64_t)v1422 + 63) >> 3) & 0x3FFFFFF8;
                    v445 = operator new[]();
                    memcpy((void *)v445, (const void *)v1421, v556);
                    v557 = (uint64_t *)v1415;
                    v558 = (unint64_t)(v444 + 63) >> 6;
                    v559 = (_QWORD *)v445;
                    do
                    {
                      v560 = *v557++;
                      *v559++ |= v560;
                      --v558;
                    }
                    while (v558);
                  }
                  else
                  {
                    v445 = (unint64_t)v1415 | v1421;
                  }
                  v561 = this[1].u32[0];
                  if (v561 > 0x40)
                  {
                    v563 = (unint64_t)(v561 + 63) >> 6;
                    v564 = (uint64_t *)*this;
                    v565 = v563 - 1;
                    v566 = (uint64_t *)v445;
                    do
                    {
                      v568 = *v564++;
                      v567 = v568;
                      v569 = *v566++;
                      v570 = v567 & ~v569;
                      v562 = v570 == 0;
                      v1011 = v565-- != 0;
                      v571 = v1011;
                    }
                    while (!v570 && (v571 & 1) != 0);
                  }
                  else
                  {
                    v562 = (*(_QWORD *)this & ~v445) == 0;
                  }
                  if (v444 >= 0x41 && v445)
                    MEMORY[0x1CAA32F9C](v445, 0x1000C8000313F17);
                  if (v562)
                  {
LABEL_1051:
                    v780 = *((_DWORD *)v1423 + 5);
                    if ((v780 & 0x40000000) != 0)
                      v781 = (unint64_t *)*((_QWORD *)v1423 - 1);
                    else
                      v781 = (unint64_t *)((char *)v1423 - 32 * (v780 & 0x7FFFFFF));
LABEL_1054:
                    IntegerValue = *v781;
                    goto LABEL_1663;
                  }
                  v572 = v1418;
                  if (v1418 > 0x40)
                  {
                    v675 = (((unint64_t)v1418 + 63) >> 3) & 0x3FFFFFF8;
                    v573 = operator new[]();
                    memcpy((void *)v573, v1417, v675);
                    v676 = (uint64_t *)v1419;
                    v677 = (unint64_t)(v572 + 63) >> 6;
                    v678 = (_QWORD *)v573;
                    do
                    {
                      v679 = *v676++;
                      *v678++ |= v679;
                      --v677;
                    }
                    while (v677);
                  }
                  else
                  {
                    v573 = v1419 | (unint64_t)v1417;
                  }
                  v680 = this[1].u32[0];
                  if (v680 > 0x40)
                  {
                    v682 = (unint64_t)(v680 + 63) >> 6;
                    v683 = (uint64_t *)*this;
                    v684 = v682 - 1;
                    v685 = (uint64_t *)v573;
                    do
                    {
                      v687 = *v683++;
                      v686 = v687;
                      v688 = *v685++;
                      v689 = v686 & ~v688;
                      v681 = v689 == 0;
                      v1011 = v684-- != 0;
                      v690 = v1011;
                    }
                    while (!v689 && (v690 & 1) != 0);
                  }
                  else
                  {
                    v681 = (*(_QWORD *)this & ~v573) == 0;
                  }
                  if (v572 >= 0x41 && v573)
                    MEMORY[0x1CAA32F9C](v573, 0x1000C8000313F17);
                  if (v681)
                  {
                    v691 = *((_DWORD *)v1423 + 5);
                    if ((v691 & 0x40000000) != 0)
                      v692 = (char *)*((_QWORD *)v1423 - 1);
                    else
                      v692 = (char *)v1423 - 32 * (v691 & 0x7FFFFFF);
                    goto LABEL_1185;
                  }
                  if (!sub_1C5854D2C((uint64_t)v1423, 1u, this))
                    goto LABEL_1644;
                }
LABEL_665:
                IntegerValue = (unint64_t)v1423;
                goto LABEL_1663;
              }
            }
            else
            {
              v205 = ~(unint64_t)v1417;
              if (v1418)
                v206 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1418;
              else
                v206 = 0;
              v207 = (int8x8_t)(v206 & v205);
              v1402 = (void *)(v206 & v205);
              v1403 = 0;
            }
            *(_QWORD *)&v207 &= *(_QWORD *)this;
            goto LABEL_562;
          case ':':
            if (sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 1u, (uint64_t)this)
              || sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 0, (uint64_t)this))
            {
              goto LABEL_665;
            }
            v1434 = 0;
            v1426 = 0;
            v213 = this[1].u32[0];
            v214 = this;
            if (v213 < 0x41)
              goto LABEL_253;
            if (v213 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) <= 0x40)
            {
              v214 = (int8x8_t *)*this;
LABEL_253:
              if (*v214 == 1)
              {
                v215 = *((_DWORD *)v1423 + 5);
                v216 = (v215 & 0x40000000) != 0
                     ? (uint64_t *)*((_QWORD *)v1423 - 1)
                     : (uint64_t *)((char *)v1423 - 32 * (v215 & 0x7FFFFFF));
                v611 = *v216;
                v1428.i32[0] = 53;
                v1429 = 0;
                v1430 = (unint64_t)&v1434;
                if (sub_1C4E75A6C((uint64_t)&v1428, v611))
                {
                  v612 = *((_DWORD *)v1423 + 5);
                  v613 = (v612 & 0x40000000) != 0
                       ? (llvm::Instruction *)*((_QWORD *)v1423 - 1)
                       : (llvm::Instruction *)((char *)v1423 - 32 * (v612 & 0x7FFFFFF));
                  v734 = *((_QWORD *)v613 + 4);
                  LODWORD(v1387) = 53;
                  *(_QWORD *)&v1388 = 0;
                  *((_QWORD *)&v1388 + 1) = &v1426;
                  if (sub_1C4E75A6C((uint64_t)&v1387, v734))
                  {
                    v1387 = *(llvm::APInt **)(a1 + 24);
                    v1388 = *((_OWORD *)v1387 + 3);
                    v49 = &v1389;
                    llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v1387, &v1389);
                    v735 = *(_QWORD *)(a1 + 24);
                    v736 = v1423;
                    v737 = (char *)v1423 + 24;
                    *(_QWORD *)(v735 + 48) = *((_QWORD *)v1423 + 5);
                    *(_QWORD *)(v735 + 56) = v737;
                    v738 = (unsigned __int8 *)*((_QWORD *)v736 + 6);
                    v1428 = (int8x8_t)v738;
                    if (v738)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v1428, v738, 2);
                      v739 = (uint64_t)v1428;
                    }
                    else
                    {
                      v739 = 0;
                    }
                    sub_1C4774EF4(v735, 0, v739);
                    if (v1428)
                      llvm::MetadataTracking::untrack((uint64_t)&v1428, *(unsigned __int8 **)&v1428);
                    v740 = *(uint64_t **)(a1 + 24);
                    LOWORD(v1432) = 257;
                    v741 = (uint64_t *)sub_1C506EC1C(v740, (_QWORD *)v1434, v1426, (uint64_t)&v1428);
                    v742 = *(uint64_t **)(a1 + 24);
                    LOWORD(v1432) = 257;
                    UnaryIntrinsic = llvm::IRBuilderBase::CreateUnaryIntrinsic(v742, 53, v741, 0, (uint64_t)&v1428);
LABEL_1016:
                    IntegerValue = UnaryIntrinsic;
                    v744 = v1387;
                    if ((_QWORD)v1388)
                    {
                      sub_1C4D8AE2C((uint64_t)v1387, v1388, *((uint64_t *)&v1388 + 1));
                      v744 = v1387;
                    }
                    else
                    {
                      *((_QWORD *)v1387 + 6) = 0;
                      *((_QWORD *)v744 + 7) = 0;
                    }
                    v1428 = (int8x8_t)v1389;
                    if (v1389)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v1428, v1389, 2);
                      v870 = (uint64_t)v1428;
                    }
                    else
                    {
                      v870 = 0;
                    }
                    sub_1C4774EF4((uint64_t)v744, 0, v870);
                    if (v1428)
                      llvm::MetadataTracking::untrack((uint64_t)&v1428, *(unsigned __int8 **)&v1428);
                    v871 = v1389;
                    if (v1389)
LABEL_1176:
                      llvm::MetadataTracking::untrack((uint64_t)v49, v871);
                    goto LABEL_1663;
                  }
                }
              }
            }
            v1399 = v1420;
            if (v1420 > 0x40)
            {
              v1398 = (void *)operator new[]();
              memcpy(v1398, (const void *)v1419, (((unint64_t)v1399 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v1398 = (void *)v1419;
            }
            v1401 = v1422;
            if (v1422 > 0x40)
            {
              v1400 = (void *)operator new[]();
              memcpy(v1400, (const void *)v1421, (((unint64_t)v1401 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v1400 = (void *)v1421;
            }
            llvm::KnownBits::operator^=((const void **)&v1398, &v1415);
            v745 = v1399;
            v746 = (int8x8_t)v1398;
            v747 = v1401;
            v748 = (int8x8_t)v1400;
            v1399 = 0;
            v1401 = 0;
            if (a4[1].i32[0] >= 0x41u && *(_QWORD *)a4)
              ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
            *a4 = v746;
            a4[1].i32[0] = v745;
            if (a4[3].i32[0] >= 0x41u && *v18)
              MEMORY[0x1CAA32F9C](*v18, 0x1000C8000313F17);
            a4[2] = v748;
            a4[3].i32[0] = v747;
            if (v1401 >= 0x41 && v1400)
              MEMORY[0x1CAA32F9C](v1400, 0x1000C8000313F17);
            if (v1399 >= 0x41 && v1398)
              MEMORY[0x1CAA32F9C](v1398, 0x1000C8000313F17);
            v749 = a4[1].u32[0];
            if (v749 > 0x40)
            {
              v750 = operator new[]();
              memcpy((void *)v750, *(const void **)a4, ((unint64_t)(v749 + 63) >> 3) & 0x3FFFFFF8);
              v751 = (uint64_t *)a4[2];
              v752 = (unint64_t)(v749 + 63) >> 6;
              v753 = (_QWORD *)v750;
              do
              {
                v754 = *v751++;
                *v753++ |= v754;
                --v752;
              }
              while (v752);
            }
            else
            {
              v750 = *(_QWORD *)&a4[2] | *(_QWORD *)a4;
            }
            v422 = (llvm::Constant ***)v1371;
            v755 = this[1].u32[0];
            if (v755 > 0x40)
            {
              v757 = (unint64_t)(v755 + 63) >> 6;
              v758 = (uint64_t *)*this;
              v759 = v757 - 1;
              v760 = (uint64_t *)v750;
              do
              {
                v762 = *v758++;
                v761 = v762;
                v763 = *v760++;
                v764 = v761 & ~v763;
                v756 = v764 == 0;
                v1011 = v759-- != 0;
                v765 = v1011;
              }
              while (!v764 && (v765 & 1) != 0);
            }
            else
            {
              v756 = (*(_QWORD *)this & ~v750) == 0;
            }
            if (v749 >= 0x41 && v750)
              MEMORY[0x1CAA32F9C](v750, 0x1000C8000313F17);
            if (v756)
              goto LABEL_1042;
            v767 = this[1].u32[0];
            if (v767 > 0x40)
            {
              v772 = (unint64_t)(v767 + 63) >> 6;
              v773 = (uint64_t *)*this;
              v768 = (unint64_t)v1415;
              v774 = (uint64_t *)*this;
              v775 = (uint64_t *)v1415;
              v776 = v772;
              while (1)
              {
                v778 = *v774++;
                v777 = v778;
                v779 = *v775++;
                if ((v777 & ~v779) != 0)
                  break;
                if (!--v776)
                  goto LABEL_1051;
              }
              v769 = (int8x8_t)v1419;
              v782 = (uint64_t *)v1419;
              while (1)
              {
                v784 = *v773++;
                v783 = v784;
                v785 = *v782++;
                if ((v783 & ~v785) != 0)
                  break;
                if (!--v772)
                  goto LABEL_1058;
              }
            }
            else
            {
              v768 = (unint64_t)v1415;
              if ((*(_QWORD *)this & ~(unint64_t)v1415) == 0)
                goto LABEL_1051;
              v769 = (int8x8_t)v1419;
              if ((*(_QWORD *)this & ~v1419) == 0)
              {
LABEL_1058:
                v786 = *((_DWORD *)v1423 + 5);
                if ((v786 & 0x40000000) != 0)
                  v692 = (char *)*((_QWORD *)v1423 - 1);
                else
                  v692 = (char *)v1423 - 32 * (v786 & 0x7FFFFFF);
                goto LABEL_1185;
              }
            }
            v770 = v1416;
            if (v1416 > 0x40)
            {
              v787 = (((unint64_t)v1416 + 63) >> 3) & 0x3FFFFFF8;
              v771 = operator new[]();
              memcpy((void *)v771, v1415, v787);
              v788 = (uint64_t *)v1419;
              v789 = (unint64_t)(v770 + 63) >> 6;
              v790 = (_QWORD *)v771;
              do
              {
                v791 = *v788++;
                *v790++ |= v791;
                --v789;
              }
              while (v789);
              LODWORD(v767) = this[1].i32[0];
            }
            else
            {
              v771 = *(_QWORD *)&v769 | v768;
            }
            if (v767 > 0x40)
            {
              v793 = ((unint64_t)v767 + 63) >> 6;
              v794 = (uint64_t *)*this;
              v795 = v793 - 1;
              v796 = (uint64_t *)v771;
              do
              {
                v798 = *v794++;
                v797 = v798;
                v799 = *v796++;
                v800 = v797 & ~v799;
                v792 = v800 == 0;
                v1011 = v795-- != 0;
                v801 = v1011;
              }
              while (!v800 && (v801 & 1) != 0);
            }
            else
            {
              v792 = (*(_QWORD *)this & ~v771) == 0;
            }
            if (v770 >= 0x41 && v771)
              MEMORY[0x1CAA32F9C](v771, 0x1000C8000313F17);
            if (v792)
            {
              v802 = *((_DWORD *)v1423 + 5);
              if ((v802 & 0x40000000) != 0)
                v803 = (char *)*((_QWORD *)v1423 - 1);
              else
                v803 = (char *)v1423 - 32 * (v802 & 0x7FFFFFF);
              v508 = *(_QWORD **)v803;
              v509 = *((_QWORD *)v803 + 4);
              if ((v802 & 0x10000000) == 0)
              {
                v877 = 0;
                v876 = &byte_1C871356D;
LABEL_1189:
                LOWORD(v1432) = 261;
                v1428 = (int8x8_t)v876;
                v1429 = v877;
                v639 = (char *)operator new(0x80uLL);
                *((_QWORD *)v639 + 5) = 0;
                v640 = v639 + 40;
                *((_QWORD *)v639 + 6) = 0;
                *((_QWORD *)v639 + 8) = *v508;
                v641 = (uint64_t ***)(v639 + 64);
                *((_QWORD *)v639 + 3) = v639 + 64;
                *((_QWORD *)v639 + 7) = v639 + 64;
                *((_QWORD *)v639 + 9) = 0;
                v642 = 57;
LABEL_897:
                v639[80] = v642;
                v639[81] = 0;
                *((_WORD *)v639 + 41) = 0;
                *((_DWORD *)v639 + 21) = 2;
                *(_OWORD *)(v639 + 88) = 0u;
                *(_OWORD *)(v639 + 104) = 0u;
                *((_DWORD *)v639 + 30) = 0;
                *(_QWORD *)v639 = v508;
                v645 = v508[1];
                v644 = v508 + 1;
                v643 = v645;
                *((_QWORD *)v639 + 1) = v645;
                if (v645)
                  *(_QWORD *)(v643 + 16) = v639 + 8;
                *((_QWORD *)v639 + 2) = v644;
                *v644 = v639;
                *((_QWORD *)v639 + 4) = v509;
                if (v509)
                {
                  v648 = *(_QWORD *)(v509 + 8);
                  v647 = (_QWORD *)(v509 + 8);
                  v646 = v648;
                  *v640 = v648;
                  if (v648)
                    *(_QWORD *)(v646 + 16) = v640;
                  *((_QWORD *)v639 + 6) = v647;
                  *v647 = v639 + 32;
                }
                llvm::Value::setName(v641, (uint64_t)&v1428);
                goto LABEL_904;
              }
              v815 = ***(_QWORD ***)v1423;
              v816 = *(_QWORD *)(v815 + 152);
              v817 = *(unsigned int *)(v815 + 168);
              if ((_DWORD)v817)
              {
                LODWORD(v818) = (v817 - 1) & ((v1423 >> 4) ^ (v1423 >> 9));
                v819 = v816 + 16 * v818;
                v820 = *(llvm::Instruction **)v819;
                if (*(llvm::Instruction **)v819 == v1423)
                {
LABEL_1188:
                  v875 = *(_QWORD **)(v819 + 8);
                  v878 = (llvm::APInt **)*v875;
                  v876 = (char *)(v875 + 2);
                  v877 = v878;
                  goto LABEL_1189;
                }
                v821 = 1;
                while (v820 != (llvm::Instruction *)-4096)
                {
                  v822 = v818 + v821++;
                  v818 = v822 & (v817 - 1);
                  v820 = *(llvm::Instruction **)(v816 + 16 * v818);
                  if (v820 == v1423)
                  {
                    v819 = v816 + 16 * v818;
                    goto LABEL_1188;
                  }
                }
              }
              v819 = v816 + 16 * v817;
              goto LABEL_1188;
            }
            v804 = v1416;
            if (v1416 > 0x40)
            {
              v823 = (((unint64_t)v1416 + 63) >> 3) & 0x3FFFFFF8;
              v806 = operator new[]();
              memcpy((void *)v806, v1415, v823);
              v824 = 0;
              v805 = (unint64_t)v1417;
              do
              {
                *(_QWORD *)(v806 + v824) |= *(_QWORD *)(v805 + v824);
                v824 += 8;
              }
              while (v823 != v824);
            }
            else
            {
              v805 = (unint64_t)v1417;
              v806 = (unint64_t)v1417 | (unint64_t)v1415;
            }
            v825 = this[1].u32[0];
            if (v825 > 0x40)
            {
              v826 = (unint64_t)(v825 + 63) >> 6;
              v827 = (uint64_t *)*this;
              v828 = (uint64_t *)v806;
              while (1)
              {
                v830 = *v827++;
                v829 = v830;
                v831 = *v828++;
                if ((v829 & ~v831) != 0)
                  goto LABEL_1104;
                if (!--v826)
                  goto LABEL_1110;
              }
            }
            if ((*(_QWORD *)this & ~v806) != 0)
            {
LABEL_1104:
              if (v804 >= 0x41 && v806)
                MEMORY[0x1CAA32F9C](v806, 0x1000C8000313F17);
              goto LABEL_1288;
            }
LABEL_1110:
            if (v1418 > 0x40)
            {
              v914 = (uint64_t *)v1421;
              v915 = (((unint64_t)v1418 + 63) >> 6) - 1;
              do
              {
                v917 = *(_QWORD *)v805;
                v805 += 8;
                v916 = v917;
                v918 = *v914++;
                v919 = v916 & ~v918;
                v832 = v919 == 0;
                v1011 = v915-- != 0;
                v920 = v1011;
              }
              while (!v919 && (v920 & 1) != 0);
            }
            else
            {
              v832 = (v805 & ~v1421) == 0;
            }
            if (v804 >= 0x41 && v806)
              MEMORY[0x1CAA32F9C](v806, 0x1000C8000313F17);
            if (!v832)
            {
LABEL_1288:
              v1387 = 0;
              v924 = *((_DWORD *)v1423 + 5);
              if ((v924 & 0x40000000) != 0)
                v925 = (char *)*((_QWORD *)v1423 - 1);
              else
                v925 = (char *)v1423 - 32 * (v924 & 0x7FFFFFF);
              v926 = (unsigned __int8 *)*((_QWORD *)v925 + 4);
              v1428 = (int8x8_t)&v1387;
              v1429 = 0;
              if (!sub_1C4D89F84((uint64_t)&v1428, v926))
                goto LABEL_1375;
              v928 = v1387;
              v929 = *((_DWORD *)v1387 + 2);
              if (!v929)
                goto LABEL_1375;
              if (v929 > 0x40)
              {
                if (llvm::APInt::countTrailingOnesSlowCase(v1387) == v929)
                  goto LABEL_1375;
              }
              else if (*(_QWORD *)v1387 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v929)
              {
                goto LABEL_1375;
              }
              v930 = this[1].u32[0];
              v1395 = v930;
              if (v930 > 0x40)
              {
                v1394 = (void *)operator new[]();
                memcpy(v1394, *(const void **)this, ((unint64_t)(v930 + 63) >> 3) & 0x3FFFFFF8);
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1394);
                v930 = v1395;
                v933 = (int8x8_t)v1394;
                v1395 = 0;
                if (v930 > 0x40)
                {
                  v960 = 0;
                  v961 = *(_QWORD *)v928;
                  do
                  {
                    *(_QWORD *)(*(_QWORD *)&v933 + v960) |= *(_QWORD *)(v961 + v960);
                    v960 += 8;
                  }
                  while ((((unint64_t)(v930 + 63) >> 3) & 0x3FFFFFF8) != v960);
LABEL_1357:
                  LODWORD(v1429) = v930;
                  v1428 = v933;
                  if ((_DWORD)v930)
                  {
                    if (v930 > 0x40)
                    {
                      v963 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v1428);
                      if (v933)
                        MEMORY[0x1CAA32F9C](*(_QWORD *)&v933, 0x1000C8000313F17);
                      v962 = v1423;
                      if (v963 != (_DWORD)v930)
                      {
LABEL_1374:
                        if (sub_1C5854D2C((uint64_t)v962, 1u, this))
                          goto LABEL_665;
LABEL_1375:
                        v972 = *((_DWORD *)v1423 + 5);
                        if ((v972 & 0x40000000) != 0)
                          v973 = (uint64_t *)*((_QWORD *)v1423 - 1);
                        else
                          v973 = (uint64_t *)((char *)v1423 - 32 * (v972 & 0x7FFFFFF));
                        v974 = *v973;
                        if (!v974)
                          goto LABEL_1644;
                        if (*(_BYTE *)(v974 + 16) != 56)
                          goto LABEL_1644;
                        v975 = *(_QWORD *)(v974 + 8);
                        if (!v975 || *(_QWORD *)(v975 + 8))
                          goto LABEL_1644;
                        v976 = (v972 & 0x40000000) != 0
                             ? (llvm::Instruction *)*((_QWORD *)v1423 - 1)
                             : (llvm::Instruction *)((char *)v1423 - 32 * (v972 & 0x7FFFFFF));
                        v977 = *((_QWORD *)v976 + 4);
                        if (!v977 || *(_BYTE *)(v977 + 16) != 16)
                          goto LABEL_1644;
                        v978 = *(_DWORD *)(v974 + 20);
                        v979 = (v978 & 0x40000000) != 0 ? *(_QWORD *)(v974 - 8) : v974 - 32 * (v978 & 0x7FFFFFF);
                        v997 = *(_QWORD *)(v979 + 32);
                        if (!v997 || *(_BYTE *)(v997 + 16) != 16)
                          goto LABEL_1644;
                        v999 = v1422;
                        if (v1422 >= 0x41)
                        {
                          v1057 = v1422 + 63;
                          v1058 = (uint64_t *)operator new[]();
                          memcpy(v1058, (const void *)v1421, (v1057 >> 3) & 0x3FFFFFF8);
                          v1059 = 0;
                          v1060 = (char *)v1417;
                          v1061 = v1057 >> 6;
                          v1062 = 8 * (v1057 >> 6);
                          do
                          {
                            v1058[v1059 / 8] &= *(_QWORD *)&v1060[v1059];
                            v1059 += 8;
                          }
                          while (v1062 != v1059);
                          v1063 = 0;
                          v1064 = *this;
                          do
                          {
                            v1058[v1063 / 8] &= *(_QWORD *)(*(_QWORD *)&v1064 + v1063);
                            v1063 += 8;
                          }
                          while (v1062 != v1063);
                          v1065 = 0;
                          do
                          {
                            v315 = v1061-- < 1;
                            if (v315)
                              break;
                            v1066 = v1058[v1061];
                            v1065 += __clz(v1066);
                          }
                          while (!v1066);
                          v1067 = v999 | 0xFFFFFFC0;
                          if ((v999 & 0x3F) == 0)
                            v1067 = 0;
                          if (v999 - v1065 - v1067 >= 0x41)
                          {
                            MEMORY[0x1CAA32F9C](v1058, 0x1000C8000313F17);
                          }
                          else
                          {
                            v1068 = *v1058;
                            MEMORY[0x1CAA32F9C](v1058, 0x1000C8000313F17);
                            if (!v1068)
                              goto LABEL_1644;
                          }
                        }
                        else if (((unint64_t)v1417 & v1421 & *(_QWORD *)this) == 0)
                        {
                          goto LABEL_1644;
                        }
                        LODWORD(v1134) = v1422;
                        if (v1422 >= 0x41)
                        {
                          v1139 = v1422 + 63;
                          v1140 = (void *)operator new[]();
                          memcpy(v1140, (const void *)v1421, (v1139 >> 3) & 0x3FFFFFF8);
                          v1141 = (uint64_t *)v1417;
                          v1142 = v1139 >> 6;
                          v1143 = v1140;
                          v1144 = v1139 >> 6;
                          do
                          {
                            v1145 = *v1141++;
                            *v1143++ &= v1145;
                            --v1144;
                          }
                          while (v1144);
                          v1146 = (uint64_t *)*this;
                          v1147 = v1140;
                          do
                          {
                            v1148 = *v1146++;
                            *v1147++ &= v1148;
                            --v1142;
                          }
                          while (v1142);
                          v1393 = v1134;
                          v1392 = (unint64_t)v1140;
                          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1392);
                          v1134 = v1393;
                          v1137 = v1392;
                          v1393 = 0;
                          v1138 = *(llvm::ConstantInt ***)v1423;
                          if (v1134 > 0x40)
                          {
                            v1149 = (void *)operator new[]();
                            memcpy(v1149, (const void *)v1137, ((unint64_t)(v1134 + 63) >> 3) & 0x3FFFFFF8);
                            v1164 = *(uint64_t **)(v997 + 24);
                            v1165 = (unint64_t)(v1134 + 63) >> 6;
                            v1166 = v1149;
                            do
                            {
                              v1167 = *v1164++;
                              *v1166++ &= v1167;
                              --v1165;
                            }
                            while (v1165);
                            v1150 = 0;
                            goto LABEL_1726;
                          }
                        }
                        else
                        {
                          v1135 = ~((unint64_t)v1417 & v1421 & *(_QWORD *)this);
                          v1136 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1422;
                          if (!v1422)
                            v1136 = 0;
                          v1137 = v1136 & v1135;
                          v1392 = v1136 & v1135;
                          v1393 = 0;
                          v1138 = *(llvm::ConstantInt ***)v1423;
                        }
                        v1149 = (void *)(*(_QWORD *)(v997 + 24) & v1137);
                        v1150 = 1;
LABEL_1726:
                        LODWORD(v1429) = v1134;
                        v1428 = (int8x8_t)v1149;
                        v1168 = llvm::ConstantInt::get(v1138, (llvm::Type *)&v1428, v32);
                        if (v1429 >= 0x41 && *(_QWORD *)&v1428)
                          MEMORY[0x1CAA32F9C](*(_QWORD *)&v1428, 0x1000C8000313F17);
                        v1169 = *((_DWORD *)v1423 + 5);
                        if ((v1169 & 0x40000000) != 0)
                          v1170 = (_QWORD **)*((_QWORD *)v1423 - 1);
                        else
                          v1170 = (_QWORD **)((char *)v1423 - 32 * (v1169 & 0x7FFFFFF));
                        v1171 = *v1170;
                        LOWORD(v1432) = 257;
                        v1172 = (char *)operator new(0x80uLL);
                        *(_QWORD *)v1172 = 0;
                        *((_QWORD *)v1172 + 2) = 0;
                        *((_QWORD *)v1172 + 1) = 0;
                        *((_QWORD *)v1172 + 4) = 0;
                        v1173 = (llvm::Value ***)(v1172 + 32);
                        *((_QWORD *)v1172 + 5) = 0;
                        *((_QWORD *)v1172 + 6) = 0;
                        *((_QWORD *)v1172 + 8) = *v1171;
                        v1174 = (llvm::Value *)(v1172 + 64);
                        *((_QWORD *)v1172 + 3) = v1172 + 64;
                        *((_QWORD *)v1172 + 7) = v1172 + 64;
                        *((_QWORD *)v1172 + 9) = 0;
                        v1175 = (uint64_t *)(v1172 + 72);
                        v1172[80] = 56;
                        v1172[81] = 0;
                        *((_WORD *)v1172 + 41) = 0;
                        *((_DWORD *)v1172 + 21) = 2;
                        *((_DWORD *)v1172 + 30) = 0;
                        *(_OWORD *)(v1172 + 104) = 0u;
                        *(_OWORD *)(v1172 + 88) = 0u;
                        *(_QWORD *)v1172 = v1171;
                        v1178 = v1171[1];
                        v1177 = v1171 + 1;
                        v1176 = v1178;
                        *((_QWORD *)v1172 + 1) = v1178;
                        if (v1178)
                          *(_QWORD *)(v1176 + 16) = v1172 + 8;
                        *((_QWORD *)v1172 + 2) = v1177;
                        *v1177 = v1172;
                        if (*((_QWORD *)v1172 + 4))
                        {
                          **((_QWORD **)v1172 + 6) = *((_QWORD *)v1172 + 5);
                          v1354 = *((_QWORD *)v1172 + 5);
                          if (v1354)
                            *(_QWORD *)(v1354 + 16) = *((_QWORD *)v1172 + 6);
                        }
                        *v1173 = v1168;
                        if (v1168)
                        {
                          v1181 = v1168[1];
                          v1180 = (llvm::Value ****)(v1168 + 1);
                          v1179 = v1181;
                          *((_QWORD *)v1172 + 5) = v1181;
                          if (v1181)
                            *((_QWORD *)v1179 + 2) = v1172 + 40;
                          *((_QWORD *)v1172 + 6) = v1180;
                          *v1180 = v1173;
                        }
                        llvm::Value::setName((uint64_t ***)v1172 + 8, (uint64_t)&v1428);
                        sub_1C577E498(a1, v1174, (uint64_t)v1423);
                        v1183 = *(llvm::ConstantInt ***)v1423;
                        if (v1150)
                        {
                          v1184 = (void *)(*(_QWORD *)(v977 + 24) & v1137);
                        }
                        else
                        {
                          v1185 = v1134 + 63;
                          v1184 = (void *)operator new[]();
                          memcpy(v1184, (const void *)v1137, (v1185 >> 3) & 0x3FFFFFF8);
                          v1186 = *(uint64_t **)(v977 + 24);
                          v1187 = v1185 >> 6;
                          v1188 = v1184;
                          do
                          {
                            v1189 = *v1186++;
                            *v1188++ &= v1189;
                            --v1187;
                          }
                          while (v1187);
                        }
                        LODWORD(v1429) = v1134;
                        v1428 = (int8x8_t)v1184;
                        v1190 = llvm::ConstantInt::get(v1183, (llvm::Type *)&v1428, v1182);
                        if (v1429 >= 0x41 && *(_QWORD *)&v1428)
                          MEMORY[0x1CAA32F9C](*(_QWORD *)&v1428, 0x1000C8000313F17);
                        LOWORD(v1432) = 257;
                        v1191 = (char *)operator new(0x80uLL);
                        *((_QWORD *)v1191 + 8) = *(_QWORD *)v1174;
                        v1192 = (llvm::Value *)(v1191 + 64);
                        *((_QWORD *)v1191 + 3) = v1191 + 64;
                        *((_QWORD *)v1191 + 5) = 0;
                        v1193 = (llvm::Value **)(v1191 + 40);
                        *((_QWORD *)v1191 + 6) = 0;
                        *((_QWORD *)v1191 + 7) = v1191 + 64;
                        *((_QWORD *)v1191 + 9) = 0;
                        *((_QWORD *)v1191 + 10) = 0x20000003ALL;
                        *(_OWORD *)(v1191 + 88) = 0u;
                        *(_OWORD *)(v1191 + 104) = 0u;
                        *((_DWORD *)v1191 + 30) = 0;
                        *(_QWORD *)v1191 = v1174;
                        v1194 = *v1175;
                        *((_QWORD *)v1191 + 1) = *v1175;
                        if (v1194)
                          *(_QWORD *)(v1194 + 16) = v1191 + 8;
                        *((_QWORD *)v1191 + 2) = v1175;
                        *v1175 = (uint64_t)v1191;
                        *((_QWORD *)v1191 + 4) = v1190;
                        if (v1190)
                        {
                          v1197 = v1190[1];
                          v1196 = v1190 + 1;
                          v1195 = v1197;
                          *v1193 = v1197;
                          if (v1197)
                            *((_QWORD *)v1195 + 2) = v1193;
                          *((_QWORD *)v1191 + 6) = v1196;
                          *v1196 = v1191 + 32;
                        }
                        llvm::Value::setName((uint64_t ***)v1191 + 8, (uint64_t)&v1428);
                        IntegerValue = (unint64_t)sub_1C577E498(a1, v1192, (uint64_t)v1423);
                        if (v1134 >= 0x41 && v1137)
                          MEMORY[0x1CAA32F9C](v1137, 0x1000C8000313F17);
                        goto LABEL_1663;
                      }
                    }
                    else
                    {
                      v962 = v1423;
                      if (*(_QWORD *)&v933 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v930)
                        goto LABEL_1374;
                    }
                  }
                  else
                  {
                    v962 = v1423;
                  }
                  AllOnesValue = llvm::Constant::getAllOnesValue(v1371, v927);
                  v965 = *((_DWORD *)v962 + 5);
                  if ((v965 & 0x40000000) != 0)
                    v966 = (char *)*((_QWORD *)v962 - 1);
                  else
                    v966 = (char *)v962 - 32 * (v965 & 0x7FFFFFF);
                  v967 = (llvm::ValueHandleBase **)(v966 + 32);
                  if (*((_QWORD *)v966 + 4))
                  {
                    **((_QWORD **)v966 + 6) = *((_QWORD *)v966 + 5);
                    v968 = *((_QWORD *)v966 + 5);
                    if (v968)
                      *(_QWORD *)(v968 + 16) = *((_QWORD *)v966 + 6);
                  }
                  *v967 = AllOnesValue;
                  if (AllOnesValue)
                  {
                    v971 = *((_QWORD *)AllOnesValue + 1);
                    v969 = (llvm::ValueHandleBase ***)((char *)AllOnesValue + 8);
                    v970 = v971;
                    *((_QWORD *)v966 + 5) = v971;
                    if (v971)
                      *(_QWORD *)(v970 + 16) = v966 + 40;
                    *((_QWORD *)v966 + 6) = v969;
                    *v969 = v967;
                  }
                  goto LABEL_665;
                }
              }
              else
              {
                v931 = ~*(_QWORD *)this;
                if ((_DWORD)v930)
                  v932 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v930;
                else
                  v932 = 0;
                v933 = (int8x8_t)(v932 & v931);
                v1394 = (void *)(v932 & v931);
                v1395 = 0;
              }
              *(_QWORD *)&v933 |= *(_QWORD *)v928;
              goto LABEL_1357;
            }
            LODWORD(v921) = v1418;
            v1397 = v1418;
            if (v1418 > 0x40)
            {
              v952 = (((unint64_t)v1418 + 63) >> 3) & 0x3FFFFFF8;
              v1396 = (void *)operator new[]();
              memcpy(v1396, v1417, v952);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1396);
              v921 = v1397;
              v923 = (unint64_t)v1396;
              v1397 = 0;
              if (v921 > 0x40)
              {
                v980 = (uint64_t *)*this;
                v981 = (unint64_t)(v921 + 63) >> 6;
                v982 = v1396;
                do
                {
                  v983 = *v980++;
                  *v982++ &= v983;
                  --v981;
                }
                while (v981);
                goto LABEL_1393;
              }
            }
            else
            {
              if (v1418)
                v922 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1418;
              else
                v922 = 0;
              v923 = v922 & ~(unint64_t)v1417;
              v1396 = (void *)v923;
              v1397 = 0;
            }
            v923 &= *(_QWORD *)this;
LABEL_1393:
            LODWORD(v1429) = v921;
            v1428 = (int8x8_t)v923;
            v984 = llvm::Constant::getIntegerValue((llvm::Constant ***)v1371, (llvm::Type *)&v1428, v32);
            if (v1429 >= 0x41 && *(_QWORD *)&v1428)
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v1428, 0x1000C8000313F17);
            v985 = *((_DWORD *)v1423 + 5);
            if ((v985 & 0x40000000) != 0)
              v986 = (_QWORD **)*((_QWORD *)v1423 - 1);
            else
              v986 = (_QWORD **)((char *)v1423 - 32 * (v985 & 0x7FFFFFF));
            v987 = *v986;
            LOWORD(v1432) = 257;
            v988 = (char *)operator new(0x80uLL);
            *((_QWORD *)v988 + 5) = 0;
            v989 = (llvm::Value **)(v988 + 40);
            *((_QWORD *)v988 + 6) = 0;
            *((_QWORD *)v988 + 8) = *v987;
            v990 = (uint64_t ***)(v988 + 64);
            *((_QWORD *)v988 + 3) = v988 + 64;
            *((_QWORD *)v988 + 7) = v988 + 64;
            *((_QWORD *)v988 + 9) = 0;
            v988[80] = 56;
            v988[81] = 0;
            *((_WORD *)v988 + 41) = 0;
            *((_DWORD *)v988 + 21) = 2;
            *(_OWORD *)(v988 + 88) = 0u;
            *(_OWORD *)(v988 + 104) = 0u;
            *((_DWORD *)v988 + 30) = 0;
            *(_QWORD *)v988 = v987;
            v993 = v987[1];
            v992 = v987 + 1;
            v991 = v993;
            *((_QWORD *)v988 + 1) = v993;
            if (v993)
              *(_QWORD *)(v991 + 16) = v988 + 8;
            *((_QWORD *)v988 + 2) = v992;
            *v992 = v988;
            *((_QWORD *)v988 + 4) = v984;
            if (v984)
            {
              v996 = v984[1];
              v995 = v984 + 1;
              v994 = v996;
              *v989 = v996;
              if (v996)
                *((_QWORD *)v994 + 2) = v989;
              *((_QWORD *)v988 + 6) = v995;
              *v995 = v988 + 32;
            }
LABEL_1405:
            llvm::Value::setName(v990, (uint64_t)&v1428);
            v649 = v1423;
            v650 = a1;
            v651 = (llvm::Value *)v990;
            goto LABEL_905;
          case 'B':
            v1434 = 0;
            v1426 = 0;
            v201 = *((_DWORD *)v1423 + 5);
            if ((v201 & 0x40000000) != 0)
              v202 = (uint64_t *)*((_QWORD *)v1423 - 1);
            else
              v202 = (uint64_t *)((char *)v1423 - 32 * (v201 & 0x7FFFFFF));
            v298 = *v202;
            v1428 = (int8x8_t)&v1434;
            v1429 = (llvm::APInt **)&v1426;
            v1430 = 0;
            v299 = *(_QWORD *)(v298 + 8);
            if (!v299 || *(_QWORD *)(v299 + 8))
              goto LABEL_355;
            v413 = *(unsigned __int8 *)(v298 + 16);
            if (v413 == 5)
            {
              if (*(_WORD *)(v298 + 18) != 26)
                goto LABEL_355;
              v538 = v298 - 32 * (*(_DWORD *)(v298 + 20) & 0x7FFFFFF);
              if (!*(_QWORD *)v538)
                goto LABEL_355;
              v1434 = *(_QWORD *)v538;
              if ((sub_1C4D8A004((uint64_t)&v1429, *(llvm::Constant **)(v538 + 32)) & 1) == 0)
                goto LABEL_355;
            }
            else
            {
              if (v413 != 54)
                goto LABEL_355;
              if (!*(_QWORD *)(v298 - 64))
                goto LABEL_355;
              v1434 = *(_QWORD *)(v298 - 64);
              if (!sub_1C4D89F84((uint64_t)&v1429, *(unsigned __int8 **)(v298 - 32)))
                goto LABEL_355;
            }
            v539 = (_DWORD *)v1426;
            v540 = *(llvm::Type **)v1423;
            if ((*(_DWORD *)(*(_QWORD *)v1423 + 8) & 0xFE) == 0x12)
              v540 = (llvm::Type *)**((_QWORD **)v540 + 2);
            v541 = llvm::Type::getPrimitiveSizeInBits(v540);
            v542 = v539[2];
            v543 = v539;
            if (v542 >= 0x41)
            {
              if (v542 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v539) > 0x40)
                goto LABEL_355;
              v543 = *(_QWORD **)v539;
            }
            if (*v543 < (unint64_t)v541)
            {
              v544 = this[1].u32[0];
              if (v544 > 0x40)
                v545 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this);
              else
                v545 = v544 + __clz((unint64_t)*this) - 64;
              if (v542 >= 0x41)
              {
                if (v542 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v539) > 0x40)
                  goto LABEL_355;
                v539 = *(_DWORD **)v539;
              }
              if (*(_QWORD *)v539 <= (unint64_t)v545)
              {
                v1387 = *(llvm::APInt **)(a1 + 24);
                v1388 = *((_OWORD *)v1387 + 3);
                v49 = &v1389;
                llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v1387, &v1389);
                v879 = *(_QWORD *)(a1 + 24);
                v880 = v1423;
                v881 = (char *)v1423 + 24;
                *(_QWORD *)(v879 + 48) = *((_QWORD *)v1423 + 5);
                *(_QWORD *)(v879 + 56) = v881;
                v882 = (unsigned __int8 *)*((_QWORD *)v880 + 6);
                v1428 = (int8x8_t)v882;
                if (v882)
                {
                  llvm::MetadataTracking::track((uint64_t)&v1428, v882, 2);
                  v883 = (uint64_t)v1428;
                }
                else
                {
                  v883 = 0;
                }
                sub_1C4774EF4(v879, 0, v883);
                if (v1428)
                  llvm::MetadataTracking::untrack((uint64_t)&v1428, *(unsigned __int8 **)&v1428);
                v884 = *(uint64_t **)(a1 + 24);
                v885 = *(_QWORD *)v1423;
                LOWORD(v1432) = 257;
                v886 = sub_1C4773E38(v884, 38, (unsigned __int8 *)v1434, v885, (uint64_t)&v1428);
                v887 = (uint64_t)v886;
                v888 = *(_QWORD *)(a1 + 24);
                v889 = (uint64_t *)v1426;
                if (*(_DWORD *)(v1426 + 8) >= 0x41u)
                  v889 = *(uint64_t **)v1426;
                v890 = *v889;
                LOWORD(v1432) = 257;
                v891 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v886, v890, 0);
                UnaryIntrinsic = sub_1C506ED1C(v888, v887, (uint64_t)v891, (uint64_t)&v1428, 0);
                goto LABEL_1016;
              }
            }
LABEL_355:
            v37 = v1423;
LABEL_356:
            v300 = *((_DWORD *)v37 + 5);
            if ((v300 & 0x40000000) != 0)
              v301 = (uint64_t **)*((_QWORD *)v37 - 1);
            else
              v301 = (uint64_t **)((char *)v37 - 32 * (v300 & 0x7FFFFFF));
            v302 = **v301;
            if ((*(_DWORD *)(v302 + 8) & 0xFE) == 0x12)
              v302 = **(_QWORD **)(v302 + 16);
            v303 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v302);
            v304 = v303;
            v305 = this[1].u32[0];
            if (v305 >= v303)
            {
              if (v305 > v303)
                llvm::APInt::trunc((llvm::APInt *)this, v303, (llvm::APInt *)&v1426);
              else
                sub_1C5DD14E0((uint64_t)&v1426, (uint64_t)this);
            }
            else
            {
              llvm::APInt::zext((llvm::APInt *)this, v303, (uint64_t)&v1426);
            }
            LODWORD(v1429) = v304;
            if (v304 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v1428, 0, 0);
              LODWORD(v1431) = v304;
              llvm::APInt::initSlowCase((llvm::APInt *)&v1430, 0, 0);
            }
            else
            {
              LODWORD(v1431) = v304;
              v1428 = 0;
              v1430 = 0;
            }
            v306 = sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 0, (uint64_t)&v1426);
            v307 = v306;
            if (v306)
            {
              IntegerValue = (unint64_t)v1423;
            }
            else
            {
              v308 = v1424;
              IntegerValue = v1429;
              if (v1429 < v1424)
              {
                llvm::APInt::zext((llvm::APInt *)&v1428, v1424, (uint64_t)&v1387);
                sub_1C4912E54(&v1387, IntegerValue, v1388);
                v414 = v1388;
                if (v1388 > 0x40)
                {
                  v1254 = (((unint64_t)v1388 + 63) >> 3) & 0x3FFFFFF8;
                  v309 = (void *)operator new[]();
                  memcpy(v309, v1387, v1254);
                }
                else
                {
                  v309 = v1387;
                }
                llvm::APInt::zext((llvm::APInt *)&v1430, v308, (uint64_t)&v1434);
                v310 = v1435;
                v311 = (void *)v1434;
                LODWORD(v1435) = 0;
                if (v1388 >= 0x41 && v1387)
                  MEMORY[0x1CAA32F9C](v1387, 0x1000C8000313F17);
                IntegerValue = v414;
              }
              else if (v1429 > v1424)
              {
                llvm::APInt::trunc((llvm::APInt *)&v1428, v1424, (llvm::APInt *)&v1387);
                llvm::APInt::trunc((llvm::APInt *)&v1430, v308, (llvm::APInt *)&v1434);
                IntegerValue = v1388;
                v309 = v1387;
                v310 = v1435;
                v311 = (void *)v1434;
              }
              else
              {
                if (v1429 > 0x40)
                {
                  v1275 = (((unint64_t)v1429 + 63) >> 3) & 0x3FFFFFF8;
                  v309 = (void *)operator new[]();
                  memcpy(v309, *(const void **)&v1428, v1275);
                }
                else
                {
                  v309 = (void *)v1428;
                }
                v310 = v1431;
                if (v1431 > 0x40)
                {
                  v1276 = (((unint64_t)v1431 + 63) >> 3) & 0x3FFFFFF8;
                  v311 = (void *)operator new[]();
                  memcpy(v311, (const void *)v1430, v1276);
                }
                else
                {
                  v311 = (void *)v1430;
                }
              }
              if (a4[1].i32[0] >= 0x41u && *(_QWORD *)a4)
                ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
              *a4 = (int8x8_t)v309;
              a4[1].i32[0] = IntegerValue;
              if (a4[3].i32[0] >= 0x41u && *v18)
                MEMORY[0x1CAA32F9C](*v18, 0x1000C8000313F17);
              a4[2] = (int8x8_t)v311;
              a4[3].i32[0] = v310;
            }
            if (v1431 >= 0x41 && v1430)
              MEMORY[0x1CAA32F9C](v1430, 0x1000C8000313F17);
            if (v1429 >= 0x41 && *(_QWORD *)&v1428)
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v1428, 0x1000C8000313F17);
            if (v1427 < 0x41)
              goto LABEL_852;
            v415 = v1426;
            if (!v1426)
              goto LABEL_852;
            goto LABEL_851;
          case 'C':
            goto LABEL_356;
          case 'D':
            v230 = *((_DWORD *)v1423 + 5);
            if ((v230 & 0x40000000) != 0)
              v231 = (uint64_t **)*((_QWORD *)v1423 - 1);
            else
              v231 = (uint64_t **)((char *)v1423 - 32 * (v230 & 0x7FFFFFF));
            v337 = **v231;
            if ((*(_DWORD *)(v337 + 8) & 0xFE) == 0x12)
              v337 = **(_QWORD **)(v337 + 16);
            v338 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v337);
            llvm::APInt::trunc((llvm::APInt *)this, v338, (llvm::APInt *)&v1426);
            v339 = this[1].u32[0];
            if (v339 > 0x40)
              v340 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this);
            else
              v340 = v339 + __clz((unint64_t)*this) - 64;
            if (v339 - v340 > v338)
            {
              v341 = 1 << (v338 - 1);
              if (v1427 > 0x40)
                *(_QWORD *)(v1426 + 8 * ((v338 - 1) >> 6)) |= v341;
              else
                v1426 |= v341;
            }
            LODWORD(v1388) = v338;
            if (v338 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v1387, 0, 0);
              LODWORD(v1389) = v338;
              llvm::APInt::initSlowCase((llvm::APInt *)((char *)&v1388 + 8), 0, 0);
            }
            else
            {
              LODWORD(v1389) = v338;
              v1387 = 0;
              *((_QWORD *)&v1388 + 1) = 0;
            }
            if (sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 0, (uint64_t)&v1426))
            {
              v210 = 0;
              IntegerValue = (unint64_t)v1423;
              goto LABEL_760;
            }
            if (v1388 >= 0x41)
              v409 = (llvm::APInt **)((char *)v1387 + 8 * ((v1388 - 1) >> 6));
            else
              v409 = &v1387;
            if ((((unint64_t)*v409 >> (v1388 - 1)) & 1) != 0
              || ((v410 = this[1].u32[0], v410 > 0x40)
                ? (v411 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this))
                : (v411 = v410 + __clz((unint64_t)*this) - 64),
                  v410 - v411 <= v338))
            {
              v525 = operator new(0x60uLL);
              v526 = (llvm::Value *)(v525 + 8);
              v525[13] = v525[13] & 0x38000000 | 1;
              *(_QWORD *)v525 = 0;
              *((_QWORD *)v525 + 1) = 0;
              *((_QWORD *)v525 + 2) = 0;
              *((_QWORD *)v525 + 3) = v525 + 8;
              v527 = *((_DWORD *)v1423 + 5);
              if ((v527 & 0x40000000) != 0)
                v528 = (uint64_t *)*((_QWORD *)v1423 - 1);
              else
                v528 = (uint64_t *)((char *)v1423 - 32 * (v527 & 0x7FFFFFF));
              v529 = *v528;
              if ((v527 & 0x10000000) != 0)
              {
                v530 = ***(_QWORD ***)v1423;
                v531 = *(_QWORD *)(v530 + 152);
                v532 = *(unsigned int *)(v530 + 168);
                if ((_DWORD)v532)
                {
                  LODWORD(v533) = (v532 - 1) & ((v1423 >> 4) ^ (v1423 >> 9));
                  v534 = v531 + 16 * v533;
                  v535 = *(llvm::Instruction **)v534;
                  if (*(llvm::Instruction **)v534 != v1423)
                  {
                    v536 = 1;
                    do
                    {
                      if (v535 == (llvm::Instruction *)-4096)
                        goto LABEL_757;
                      v537 = v533 + v536++;
                      v533 = v537 & (v532 - 1);
                      v535 = *(llvm::Instruction **)(v531 + 16 * v533);
                    }
                    while (v535 != v1423);
                    v534 = v531 + 16 * v533;
                  }
                }
                else
                {
LABEL_757:
                  v534 = v531 + 16 * v532;
                }
                v552 = *(_QWORD **)(v534 + 8);
                v555 = (llvm::APInt **)*v552;
                v553 = (char *)(v552 + 2);
                v554 = v555;
              }
              else
              {
                v554 = 0;
                v553 = &byte_1C871356D;
              }
              LOWORD(v1432) = 261;
              v1428 = (int8x8_t)v553;
              v1429 = v554;
              llvm::ZExtInst::ZExtInst((uint64_t)(v525 + 8), v529, (uint64_t)v1371, (uint64_t)&v1428, 0);
              IntegerValue = (unint64_t)sub_1C577E498(a1, v526, (uint64_t)v1423);
              v210 = 0;
              goto LABEL_760;
            }
            v521 = v1424;
            llvm::APInt::sext((llvm::APInt *)&v1387, v1424, (llvm::APInt *)&v1428);
            llvm::APInt::sext((llvm::APInt *)((char *)&v1388 + 8), v521, (llvm::APInt *)&v1434);
            v522 = (int)v1429;
            IntegerValue = (unint64_t)v1428;
            v523 = v1435;
            v524 = v1434;
            if (a4[1].i32[0] >= 0x41u && *(_QWORD *)a4)
              ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
            *a4 = (int8x8_t)IntegerValue;
            a4[1].i32[0] = v522;
            if (a4[3].i32[0] >= 0x41u && *v18)
              MEMORY[0x1CAA32F9C](*v18, 0x1000C8000313F17);
            a4[2] = (int8x8_t)v524;
            a4[3].i32[0] = v523;
            v210 = 1;
LABEL_760:
            if (v1389 >= 0x41 && *((_QWORD *)&v1388 + 1))
              MEMORY[0x1CAA32F9C](*((_QWORD *)&v1388 + 1), 0x1000C8000313F17);
            if (v1388 >= 0x41 && v1387)
              MEMORY[0x1CAA32F9C](v1387, 0x1000C8000313F17);
            if (v1427 < 0x41)
              goto LABEL_1643;
            v454 = (llvm::APInt *)v1426;
            if (!v1426)
              goto LABEL_1643;
            goto LABEL_1642;
          case 'M':
            v232 = *((_DWORD *)v1423 + 5);
            if ((v232 & 0x40000000) != 0)
              v233 = (uint64_t **)*((_QWORD *)v1423 - 1);
            else
              v233 = (uint64_t **)((char *)v1423 - 32 * (v232 & 0x7FFFFFF));
            v342 = **v233;
            if ((*(_DWORD *)(v342 + 8) & 0xFE) == 0x12)
              v343 = *(unsigned __int8 *)(**(_QWORD **)(v342 + 16) + 8);
            else
              v343 = *(_DWORD *)(v342 + 8);
            if (v343 != 13)
              goto LABEL_1662;
            v344 = *(_QWORD *)v1423;
            if (*(_QWORD *)v1423 && (*(_DWORD *)(v344 + 8) & 0xFE) == 0x12)
            {
              if ((v232 & 0x40000000) != 0)
                v345 = (uint64_t **)*((_QWORD *)v1423 - 1);
              else
                v345 = (uint64_t **)((char *)v1423 - 32 * (v232 & 0x7FFFFFF));
              IntegerValue = 0;
              v474 = **v345;
              if (!v474 || (*(_DWORD *)(v474 + 8) & 0xFE) != 0x12)
                goto LABEL_1663;
              if (*(_DWORD *)(v344 + 32) != *(_DWORD *)(v474 + 32))
                goto LABEL_1662;
            }
            else
            {
              if ((v232 & 0x40000000) != 0)
                v408 = (char *)*((_QWORD *)v1423 - 1);
              else
                v408 = (char *)v1423 - 32 * (v232 & 0x7FFFFFF);
              if ((*(_DWORD *)(**(_QWORD **)v408 + 8) & 0xFE) == 0x12)
                goto LABEL_1662;
            }
            if (sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 0, (uint64_t)this))
              goto LABEL_665;
            goto LABEL_1644;
          case 'T':
            LOBYTE(v1391) = 0;
            v245 = *((_QWORD *)v1423 - 4);
            if (!v245)
              goto LABEL_299;
            if (*(_BYTE *)(v245 + 16)
              || *(_QWORD *)(v245 + 24) != *((_QWORD *)v1423 + 9)
              || (*(_BYTE *)(v245 + 33) & 0x20) == 0)
            {
              goto LABEL_297;
            }
            v653 = *(_DWORD *)(v245 + 36);
            if (v653 > 147)
            {
              if ((v653 - 148) < 2)
              {
                v1426 = 0;
                v868 = *((_DWORD *)v1423 + 5);
                if ((v868 & 0x40000000) != 0)
                  v869 = (char *)*((_QWORD *)v1423 - 1);
                else
                  v869 = (char *)v1423 - 32 * (v868 & 0x7FFFFFF);
                v894 = (unsigned __int8 *)*((_QWORD *)v869 + 8);
                v1428 = (int8x8_t)&v1426;
                v1429 = 0;
                if ((sub_1C4D89F84((uint64_t)&v1428, v894) & 1) != 0)
                {
                  v895 = llvm::APInt::urem((uint64_t **)v1426, v1424);
                  v896 = *(_DWORD *)(*((_QWORD *)v37 - 4) + 36) == 149 ? v1424 - v895 : v895;
                  LODWORD(v1429) = this[1].i32[0];
                  v1370 = (llvm::APInt *)v1429;
                  if (v1429 > 0x40)
                  {
                    v1198 = (void *)operator new[]();
                    v1428 = (int8x8_t)v1198;
                    v897 = *this;
                    memcpy(v1198, *(const void **)this, (((unint64_t)v1370 + 63) >> 3) & 0x3FFFFFF8);
                    *(_QWORD *)v1368 = v1198;
                    llvm::APInt::tcShiftRight((llvm::APInt *)v1198, (unint64_t *)(((unint64_t)v1370 + 63) >> 6), v896);
                  }
                  else
                  {
                    v897 = *this;
                    if ((_DWORD)v1429 == v896)
                    {
                      *(_QWORD *)v1368 = 0;
                      v1428 = 0;
                    }
                    else
                    {
                      *(_QWORD *)v1368 = *(_QWORD *)&v897 >> v896;
                      v1428 = (int8x8_t)(*(_QWORD *)&v897 >> v896);
                    }
                  }
                  v898 = v1424 - v896;
                  LODWORD(v1388) = this[1].i32[0];
                  if (v1388 > 0x40)
                  {
                    v1387 = (llvm::APInt *)operator new[]();
                    memcpy(v1387, *(const void **)this, (((unint64_t)v1388 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v1387 = (llvm::APInt *)v897;
                  }
                  sub_1C4888094((uint64_t)&v1387, v898);
                  if (sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 0, (uint64_t)&v1428)
                    || sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 1u, (uint64_t)&v1387))
                  {
                    v936 = 0;
                    IntegerValue = (unint64_t)v1423;
                  }
                  else
                  {
                    LODWORD(v1435) = v1420;
                    if (v1420 > 0x40)
                    {
                      v1434 = operator new[]();
                      memcpy((void *)v1434, (const void *)v1419, (((unint64_t)v1435 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v1434 = v1419;
                    }
                    sub_1C4888094((uint64_t)&v1434, v896);
                    v1000 = v1424 - v896;
                    v1001 = v1416;
                    if (v1416 > 0x40)
                    {
                      v1365 = v1416 + 63;
                      v1361 = (void *)operator new[]();
                      memcpy(v1361, v1415, (v1365 >> 3) & 0x3FFFFFF8);
                      v1259 = v1365 >> 6;
                      llvm::APInt::tcShiftRight((llvm::APInt *)v1361, (unint64_t *)(v1365 >> 6), v1000);
                      v1260 = (uint64_t *)v1434;
                      v1261 = v1361;
                      v1003 = (unint64_t)v1361;
                      do
                      {
                        v1262 = *v1260++;
                        *v1261++ |= v1262;
                        --v1259;
                      }
                      while (v1259);
                    }
                    else
                    {
                      v1002 = (unint64_t)v1415 >> v1000;
                      if (v1416 == v1000)
                        v1002 = 0;
                      v1003 = v1002 | v1434;
                    }
                    if (a4[1].i32[0] >= 0x41u && *(_QWORD *)a4)
                      ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
                    *a4 = (int8x8_t)v1003;
                    a4[1].i32[0] = v1001;
                    if (v1435 >= 0x41 && v1434)
                      MEMORY[0x1CAA32F9C](v1434, 0x1000C8000313F17);
                    LODWORD(v1435) = v1422;
                    if (v1422 > 0x40)
                    {
                      v1434 = operator new[]();
                      memcpy((void *)v1434, (const void *)v1421, (((unint64_t)v1435 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v1434 = v1421;
                    }
                    sub_1C4888094((uint64_t)&v1434, v896);
                    v1004 = v1424 - v896;
                    v1005 = v1418;
                    if (v1418 > 0x40)
                    {
                      v1366 = (((unint64_t)v1418 + 63) >> 3) & 0x3FFFFFF8;
                      IntegerValue = operator new[]();
                      memcpy((void *)IntegerValue, v1417, v1366);
                      v1263 = (unint64_t *)((unint64_t)(v1005 + 63) >> 6);
                      llvm::APInt::tcShiftRight((llvm::APInt *)IntegerValue, v1263, v1004);
                      v1264 = (uint64_t *)v1434;
                      v1265 = (_QWORD *)IntegerValue;
                      do
                      {
                        v1266 = *v1264++;
                        *v1265++ |= v1266;
                        v1263 = (unint64_t *)((char *)v1263 - 1);
                      }
                      while (v1263);
                    }
                    else
                    {
                      if (v1418 == v1004)
                      {
                        v1006 = 0;
                      }
                      else
                      {
                        v1006 = (unint64_t)v1417 >> v1004;
                        v1004 = v1418;
                      }
                      IntegerValue = v1434 | v1006;
                      LODWORD(v1005) = v1004;
                    }
                    if (a4[3].i32[0] >= 0x41u && *v18)
                      MEMORY[0x1CAA32F9C](*v18, 0x1000C8000313F17);
                    a4[2] = (int8x8_t)IntegerValue;
                    a4[3].i32[0] = v1005;
                    if (v1435 >= 0x41 && v1434)
                      MEMORY[0x1CAA32F9C](v1434, 0x1000C8000313F17);
                    v936 = 1;
                    LOBYTE(v1391) = 1;
                  }
                  if (v1388 >= 0x41 && v1387)
                    MEMORY[0x1CAA32F9C](v1387, 0x1000C8000313F17);
                  if (v1370 >= 0x41 && *(_QWORD *)v1368)
                    MEMORY[0x1CAA32F9C](*(_QWORD *)v1368, 0x1000C8000313F17);
                  if ((v936 & 1) == 0)
                    goto LABEL_1663;
                }
                goto LABEL_297;
              }
              if (v653 == 305)
              {
                v1387 = 0;
                v899 = this[1].u32[0];
                if (v899 > 0x40)
                {
                  v656 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this);
                }
                else
                {
                  v900 = __clz(__rbit64((unint64_t)*this));
                  if (v899 >= v900)
                    v656 = v900;
                  else
                    v656 = this[1].u32[0];
                }
                v940 = (unsigned __int8 *)((_QWORD *)v37 - 4 * (*((_DWORD *)v37 + 5) & 0x7FFFFFF))[4];
                v1428 = (int8x8_t)&v1387;
                v1429 = 0;
                if (!sub_1C4D89F84((uint64_t)&v1428, v940))
                  goto LABEL_297;
                v941 = *((_DWORD *)v1387 + 2);
                if (v941 > 0x40)
                  v942 = llvm::APInt::countLeadingZerosSlowCase(v1387);
                else
                  v942 = v941 + __clz(*(_QWORD *)v1387) - 64;
                v953 = v941 - v942;
LABEL_1344:
                if (v656 >= v953)
                {
LABEL_1345:
                  v781 = (unint64_t *)((char *)v37 - 32 * (*((_DWORD *)v37 + 5) & 0x7FFFFFF));
                  goto LABEL_1054;
                }
                goto LABEL_297;
              }
              if (v653 == 306)
              {
                v1387 = 0;
                v654 = this[1].u32[0];
                if (v654 > 0x40)
                {
                  v656 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this);
                }
                else
                {
                  v655 = __clz(__rbit64((unint64_t)*this));
                  if (v654 >= v655)
                    v656 = v655;
                  else
                    v656 = this[1].u32[0];
                }
                v937 = (unsigned __int8 *)((_QWORD *)v37 - 4 * (*((_DWORD *)v37 + 5) & 0x7FFFFFF))[4];
                v1428 = (int8x8_t)&v1387;
                v1429 = 0;
                if (!sub_1C4D89F84((uint64_t)&v1428, v937))
                  goto LABEL_297;
                v938 = *((_DWORD *)v1387 + 2);
                if (v938 > 0x40)
                {
                  v939 = llvm::APInt::countLeadingOnesSlowCase(v1387);
                }
                else if (v938)
                {
                  v939 = __clz(~(*(_QWORD *)v1387 << -(char)v938));
                }
                else
                {
                  v939 = 0;
                }
                v953 = v938 - v939;
                goto LABEL_1344;
              }
LABEL_1207:
              v1373 = this[1].u32[0];
              if (v1373 > 0x40)
              {
                v1372 = (void *)operator new[]();
                memcpy(v1372, *(const void **)this, (((unint64_t)v1373 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v1372 = (void *)*this;
              }
              IntegerValue = sub_1C577D02C(a1, (uint64_t)v37, (uint64_t)&v1372);
              v935 = v934;
              if (v1373 >= 0x41 && v1372)
                MEMORY[0x1CAA32F9C](v1372, 0x1000C8000313F17);
              if (v935)
                goto LABEL_1663;
              goto LABEL_297;
            }
            switch(v653)
            {
              case 1:
                v892 = this[1].u32[0];
                v893 = this;
                if (v892 >= 0x41)
                {
                  if (v892 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) > 0x40)
                    break;
                  v893 = (int8x8_t *)*this;
                }
                if (*v893 == 1)
                  goto LABEL_1345;
                break;
              case 9:
                v901 = this[1].u32[0];
                if (v901 > 0x40)
                {
                  v902 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this);
                  v904 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this);
                }
                else
                {
                  v902 = v901 + __clz((unint64_t)*this) - 64;
                  v903 = __clz(__rbit64((unint64_t)*this));
                  if (v901 >= v903)
                    v904 = v903;
                  else
                    v904 = this[1].i32[0];
                }
                v943 = v902 & 0xFFFFFFF8;
                v944 = v904 & 0xFFFFFFF8;
                if (v1424 - ((v904 & 0xFFFFFFF8) + (v902 & 0xFFFFFFF8)) == 8)
                {
                  v945 = (_QWORD *)*((_QWORD *)v37 - 4 * (*((_DWORD *)v37 + 5) & 0x7FFFFFF));
                  v946 = *(llvm::ConstantInt **)v37;
                  if (v943 <= v944)
                  {
                    v947 = llvm::ConstantInt::get(v946, (v944 - v943) & 0xFFFFFFF8, 0);
                    LOWORD(v1432) = 257;
                    v948 = (char *)operator new(0x80uLL);
                    *(_QWORD *)v948 = 0;
                    *((_QWORD *)v948 + 2) = 0;
                    *((_QWORD *)v948 + 1) = 0;
                    v949 = v948 + 8;
                    *((_QWORD *)v948 + 5) = 0;
                    *((_QWORD *)v948 + 6) = 0;
                    *((_QWORD *)v948 + 4) = 0;
                    v950 = (llvm::Value ***)(v948 + 32);
                    *((_QWORD *)v948 + 8) = *v945;
                    v641 = (uint64_t ***)(v948 + 64);
                    *((_QWORD *)v948 + 3) = v948 + 64;
                    *((_QWORD *)v948 + 7) = v948 + 64;
                    *((_QWORD *)v948 + 9) = 0;
                    v951 = 53;
                  }
                  else
                  {
                    v947 = llvm::ConstantInt::get(v946, (v943 - v944) & 0xFFFFFFF8, 0);
                    LOWORD(v1432) = 257;
                    v948 = (char *)operator new(0x80uLL);
                    *(_QWORD *)v948 = 0;
                    *((_QWORD *)v948 + 2) = 0;
                    *((_QWORD *)v948 + 1) = 0;
                    v949 = v948 + 8;
                    *((_QWORD *)v948 + 5) = 0;
                    *((_QWORD *)v948 + 6) = 0;
                    *((_QWORD *)v948 + 4) = 0;
                    v950 = (llvm::Value ***)(v948 + 32);
                    *((_QWORD *)v948 + 8) = *v945;
                    v641 = (uint64_t ***)(v948 + 64);
                    *((_QWORD *)v948 + 3) = v948 + 64;
                    *((_QWORD *)v948 + 7) = v948 + 64;
                    *((_QWORD *)v948 + 9) = 0;
                    v951 = 54;
                  }
                  v948[80] = v951;
                  v948[81] = 0;
                  *((_WORD *)v948 + 41) = 0;
                  *((_DWORD *)v948 + 21) = 2;
                  *((_DWORD *)v948 + 30) = 0;
                  *(_OWORD *)(v948 + 104) = 0u;
                  *(_OWORD *)(v948 + 88) = 0u;
                  *(_QWORD *)v948 = v945;
                  v956 = v945[1];
                  v955 = v945 + 1;
                  v954 = v956;
                  *v949 = v956;
                  if (v956)
                    *(_QWORD *)(v954 + 16) = v949;
                  *((_QWORD *)v948 + 2) = v955;
                  *v955 = v948;
                  if (*((_QWORD *)v948 + 4))
                  {
                    **((_QWORD **)v948 + 6) = *((_QWORD *)v948 + 5);
                    v1353 = *((_QWORD *)v948 + 5);
                    if (v1353)
                      *(_QWORD *)(v1353 + 16) = *((_QWORD *)v948 + 6);
                  }
                  *v950 = v947;
                  if (v947)
                  {
                    v959 = v947[1];
                    v958 = (llvm::Value ****)(v947 + 1);
                    v957 = v959;
                    *((_QWORD *)v948 + 5) = v959;
                    if (v959)
                      *((_QWORD *)v957 + 2) = v948 + 40;
                    *((_QWORD *)v948 + 6) = v958;
                    *v958 = v950;
                  }
                  llvm::Value::setName(v641, (uint64_t)&v1428);
                  llvm::Value::takeName((llvm::Value *)v641, v1423);
LABEL_904:
                  v649 = v1423;
                  v650 = a1;
                  v651 = (llvm::Value *)v641;
LABEL_905:
                  v652 = sub_1C577E498(v650, v651, (uint64_t)v649);
LABEL_1661:
                  IntegerValue = (unint64_t)v652;
                  goto LABEL_1663;
                }
                break;
              case 53:
                v1387 = 0;
                v807 = this[1].u32[0];
                v808 = this;
                if (v807 >= 0x41)
                {
                  if (v807 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) > 0x40)
                    break;
                  v808 = (int8x8_t *)*this;
                }
                if (*v808 == 1)
                {
                  v809 = v1371;
                  if ((*((_DWORD *)v1371 + 2) & 0xFE) == 0x12)
                    v809 = (llvm::Type *)**((_QWORD **)v1371 + 2);
                  if ((llvm::Type::getPrimitiveSizeInBits(v809) & 1) == 0)
                  {
                    v810 = *((_QWORD *)v37 - 4 * (*((_DWORD *)v37 + 5) & 0x7FFFFFF));
                    v1428 = (int8x8_t)&v1387;
                    if (sub_1C4D9EC28(&v1428, 30, v810))
                    {
                      v811 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v37 + 5) + 56) + 40);
                      v1428 = *(int8x8_t *)v37;
                      Declaration = llvm::Intrinsic::getDeclaration(v811, 53, (uint64_t *)&v1428, 1);
                      v813 = Declaration;
                      if (Declaration)
                        v814 = *(_QWORD *)(Declaration + 24);
                      else
                        v814 = 0;
                      v1434 = (uint64_t)v1387;
                      LOWORD(v1432) = 257;
                      v1159 = (char *)operator new(0x90uLL);
                      v990 = (uint64_t ***)(v1159 + 64);
                      *((_DWORD *)v1159 + 21) = *((_DWORD *)v1159 + 21) & 0x38000000 | 2;
                      *(_QWORD *)v1159 = 0;
                      *((_QWORD *)v1159 + 1) = 0;
                      *((_QWORD *)v1159 + 2) = 0;
                      *((_QWORD *)v1159 + 3) = v1159 + 64;
                      *((_QWORD *)v1159 + 4) = 0;
                      v1160 = (uint64_t *)(v1159 + 32);
                      *((_QWORD *)v1159 + 5) = 0;
                      *((_QWORD *)v1159 + 6) = 0;
                      *((_QWORD *)v1159 + 7) = v1159 + 64;
                      *((_QWORD *)v1159 + 8) = **(_QWORD **)(v814 + 16);
                      *((_QWORD *)v1159 + 9) = 0;
                      v1159[80] = 84;
                      v1159[81] = 0;
                      *((_WORD *)v1159 + 41) = 0;
                      *((_DWORD *)v1159 + 21) = 2;
                      *((_DWORD *)v1159 + 30) = 0;
                      *(_OWORD *)(v1159 + 104) = 0u;
                      *(_OWORD *)(v1159 + 88) = 0u;
                      *((_QWORD *)v1159 + 16) = 0;
                      *((_QWORD *)v1159 + 17) = v814;
                      sub_1C5382FD4((uint64_t)&v1426, &v1434, (uint64_t *)&v1435, (uint64_t)v1159);
                      if (*((_QWORD *)v1159 + 4))
                      {
                        **((_QWORD **)v1159 + 6) = *((_QWORD *)v1159 + 5);
                        v1355 = *((_QWORD *)v1159 + 5);
                        if (v1355)
                          *(_QWORD *)(v1355 + 16) = *((_QWORD *)v1159 + 6);
                      }
                      *v1160 = v813;
                      if (v813)
                      {
                        v1163 = *(_QWORD *)(v813 + 8);
                        v1162 = (uint64_t **)(v813 + 8);
                        v1161 = v1163;
                        *((_QWORD *)v1159 + 5) = v1163;
                        if (v1163)
                          *(_QWORD *)(v1161 + 16) = v1159 + 40;
                        *((_QWORD *)v1159 + 6) = v1162;
                        *v1162 = v1160;
                      }
                      llvm::CallBase::populateBundleOperandInfos((uint64_t)v990, 0, 0, 1u);
                      goto LABEL_1405;
                    }
                  }
                }
                break;
              default:
                goto LABEL_1207;
            }
LABEL_297:
            if ((_BYTE)v1391)
              goto LABEL_1644;
            LODWORD(v32) = v1425;
LABEL_299:
            v246 = *(llvm::APInt ***)(a1 + 56);
            v247 = *(_QWORD *)(a1 + 72);
            if (!v6 || !*((_QWORD *)v6 + 5))
            {
              if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu || (v6 = (llvm::Instruction *)a2, !*(_QWORD *)(a2 + 40)))
                v6 = 0;
            }
            v1428 = *(int8x8_t *)(a1 + 80);
            v1429 = v246;
            v1430 = (unint64_t)v6;
            v1431 = v247;
            v1432 = 0;
            v1433 = 1;
            v221 = (llvm::Instruction *)a2;
            goto LABEL_702;
          case 'U':
            if (sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 2u, (uint64_t)this)
              || sub_1C5854B78((_QWORD *)a1, (uint64_t)v1423, 1u, (uint64_t)this)
              || (sub_1C5854F20((uint64_t)v1423, 1u, (unint64_t *)this) & 1) != 0
              || (sub_1C5854F20((uint64_t)v1423, 2u, (unint64_t *)this) & 1) != 0)
            {
              goto LABEL_665;
            }
            v241 = v1420;
            if (v1420 > 0x40)
            {
              v1304 = (((unint64_t)v1420 + 63) >> 3) & 0x3FFFFFF8;
              v242 = (void *)operator new[]();
              memcpy(v242, (const void *)v1419, v1304);
              v1305 = (uint64_t *)v1415;
              v1306 = (unint64_t)(v241 + 63) >> 6;
              v1307 = v242;
              do
              {
                v1308 = *v1305++;
                *v1307++ &= v1308;
                --v1306;
              }
              while (v1306);
            }
            else
            {
              v242 = (void *)((unint64_t)v1415 & v1419);
            }
            v243 = v1422;
            if (v1422 > 0x40)
            {
              v1309 = (((unint64_t)v1422 + 63) >> 3) & 0x3FFFFFF8;
              v244 = (void *)operator new[]();
              memcpy(v244, (const void *)v1421, v1309);
              v1310 = (uint64_t *)v1417;
              v1311 = (unint64_t)(v243 + 63) >> 6;
              v1312 = v244;
              do
              {
                v1313 = *v1310++;
                *v1312++ &= v1313;
                --v1311;
              }
              while (v1311);
            }
            else
            {
              v244 = (void *)((unint64_t)v1417 & v1421);
            }
            if (a4[1].i32[0] >= 0x41u && *(_QWORD *)a4)
              ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a4, 0x1000C8000313F17);
            *a4 = (int8x8_t)v242;
            a4[1].i32[0] = v241;
            if (a4[3].i32[0] >= 0x41u && *v18)
              MEMORY[0x1CAA32F9C](*v18, 0x1000C8000313F17);
            a4[2] = (int8x8_t)v244;
            a4[3].i32[0] = v243;
            goto LABEL_1644;
          default:
            v219 = *(llvm::APInt ***)(a1 + 56);
            v220 = *(_QWORD *)(a1 + 72);
            if (!v6 || !*((_QWORD *)v6 + 5))
            {
              if (*((unsigned __int8 *)v1423 + 16) < 0x1Cu || (v6 = v1423, !*((_QWORD *)v1423 + 5)))
                v6 = 0;
            }
            v1428 = *(int8x8_t *)(a1 + 80);
            v1429 = v219;
            v1430 = (unint64_t)v6;
            v1431 = v220;
            v1432 = 0;
            v1433 = 1;
            v221 = v1423;
            goto LABEL_702;
        }
      }
    }
    else
    {
      *this = (int8x8_t)-1;
      if ((_DWORD)v34)
        goto LABEL_46;
    }
    v35 = 0;
    goto LABEL_47;
  }
  return llvm::UndefValue::get(v16, (llvm::Type *)a2);
}

BOOL sub_1C5854B78(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  uint64_t v13;
  llvm::CastInst *v14;
  BOOL v15;
  void *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(_QWORD *)(a2 - 8);
  else
    v7 = a2 - 32 * (v6 & 0x7FFFFFF);
  v8 = (uint64_t *)(v7 + 32 * a3);
  v9 = *v8;
  v10 = *(unsigned int *)(a4 + 8);
  v18 = v10;
  if (v10 > 0x40)
  {
    v12 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
    v11 = (void *)operator new[]();
    memcpy(v11, *(const void **)a4, v12);
  }
  else
  {
    v11 = *(void **)a4;
  }
  v17 = v11;
  v13 = sub_1C584C800((int)a1, v9, (llvm::APInt *)&v17);
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  if (v13)
  {
    v14 = (llvm::CastInst *)*v8;
    if (*v8)
      v15 = *(unsigned __int8 *)(*v8 + 16) >= 0x1Cu;
    else
      v15 = 0;
    if (v15)
    {
      v19 = v21;
      v20 = 0x100000000;
      llvm::findDbgUsers((uint64_t)&v19, (uint64_t)v14);
      llvm::salvageDebugInfoForDbgValues(v14, (uint64_t *)v19, v20);
      if (v19 != v21)
        free(v19);
    }
    sub_1C5788CC4(a1, v8, v13);
  }
  return v13 != 0;
}

llvm::APFloatBase *sub_1C5854D2C(uint64_t a1, unsigned int a2, _QWORD **a3)
{
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  llvm::APFloatBase *result;
  const llvm::APInt *v10;
  const void **v11;
  uint64_t v12;
  llvm::ConstantInt **v13;
  void *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  llvm::Value **v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(_QWORD *)(a1 - 8);
  else
    v7 = a1 - 32 * (v6 & 0x7FFFFFF);
  v8 = *(unsigned __int8 **)(v7 + 32 * a2);
  v35 = 0;
  v36 = 0;
  v34 = &v36;
  result = sub_1C4D89F84((uint64_t)&v34, v8);
  if ((_DWORD)result)
  {
    v11 = (const void **)v36;
    v12 = *(unsigned int *)(v36 + 8);
    if (v12 > 0x40)
    {
      v15 = (unint64_t)(v12 + 63) >> 6;
      v16 = *(uint64_t **)v36;
      v17 = *a3;
      v18 = v15;
      while (1)
      {
        v20 = *v16++;
        v19 = v20;
        v21 = *v17++;
        if ((v19 & ~v21) != 0)
          break;
        result = 0;
        if (!--v18)
          return result;
      }
      v13 = *(llvm::ConstantInt ***)v8;
      v14 = (void *)operator new[]();
      memcpy(v14, *v11, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
      v22 = *a3;
      v23 = v14;
      do
      {
        v24 = *v22++;
        *v23++ &= v24;
        --v15;
      }
      while (v15);
    }
    else
    {
      if ((*(_QWORD *)v36 & ~(unint64_t)*a3) == 0)
        return 0;
      v13 = *(llvm::ConstantInt ***)v8;
      v14 = (void *)((unint64_t)*a3 & *(_QWORD *)v36);
    }
    LODWORD(v35) = v12;
    v34 = (uint64_t *)v14;
    v25 = llvm::ConstantInt::get(v13, (llvm::Type *)&v34, v10);
    v26 = *(_DWORD *)(a1 + 20);
    if ((v26 & 0x40000000) != 0)
      v27 = *(_QWORD *)(a1 - 8);
    else
      v27 = a1 - 32 * (v26 & 0x7FFFFFF);
    v28 = v27 + 32 * a2;
    if (*(_QWORD *)v28)
    {
      **(_QWORD **)(v28 + 16) = *(_QWORD *)(v28 + 8);
      v29 = *(_QWORD *)(v28 + 8);
      if (v29)
        *(_QWORD *)(v29 + 16) = *(_QWORD *)(v28 + 16);
    }
    *(_QWORD *)v28 = v25;
    if (v25)
    {
      v32 = v25[1];
      v30 = v25 + 1;
      v31 = v32;
      v33 = v27 + 32 * a2;
      *(_QWORD *)(v33 + 8) = v32;
      if (v32)
        *((_QWORD *)v31 + 2) = v33 + 8;
      *(_QWORD *)(v33 + 16) = v30;
      *v30 = v28;
    }
    if (v35 >= 0x41)
    {
      if (v34)
        MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
    }
    return (llvm::APFloatBase *)1;
  }
  return result;
}

llvm::APFloatBase *sub_1C5854F20(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  llvm::APFloatBase *result;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  const llvm::APInt *v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  llvm::Value **v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  llvm::Value *v37;
  llvm::Value *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  llvm::Type **v42;
  uint64_t v43;
  int v44;
  llvm::Type *v45;
  uint64_t v46;
  uint64_t v47;

  v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(_QWORD *)(a1 - 8);
  else
    v7 = a1 - 32 * (v6 & 0x7FFFFFF);
  v47 = 0;
  v8 = *(unsigned __int8 **)(v7 + 32 * a2);
  v40 = &v47;
  v41 = 0;
  result = sub_1C4D89F84((uint64_t)&v40, v8);
  if ((_DWORD)result)
  {
    v45 = 0;
    v46 = 0;
    v44 = 0;
    v10 = *(_DWORD *)(a1 + 20);
    if ((v10 & 0x40000000) != 0)
      v11 = *(uint64_t **)(a1 - 8);
    else
      v11 = (uint64_t *)(a1 - 32 * (v10 & 0x7FFFFFF));
    v12 = *v11;
    v40 = (uint64_t *)&v44;
    v41 = &v46;
    v42 = &v45;
    v43 = 0;
    if (!sub_1C5843534((uint64_t)&v40, v12))
      return sub_1C5854D2C(a1, a2, (_QWORD **)a3);
    if (*(unsigned __int8 *)(v46 + 16) < 0x15u)
      return sub_1C5854D2C(a1, a2, (_QWORD **)a3);
    v14 = (const void **)v45;
    v15 = v47;
    if (*((_DWORD *)v45 + 2) != *(_DWORD *)(v47 + 8))
      return sub_1C5854D2C(a1, a2, (_QWORD **)a3);
    v16 = *((unsigned int *)v45 + 2);
    if (v16 > 0x40)
    {
      result = (llvm::APFloatBase *)memcmp(*(const void **)v45, *(const void **)v47, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
      if (!(_DWORD)result)
        return result;
      v17 = (void *)operator new[]();
      memcpy(v17, *v14, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
      v18 = *a3;
      v19 = (unint64_t)(v16 + 63) >> 6;
      v20 = (uint64_t *)*a3;
      v21 = v17;
      do
      {
        v22 = *v20++;
        *v21++ &= v22;
        --v19;
      }
      while (v19);
      v15 = v47;
    }
    else
    {
      if (*(_QWORD *)v45 == *(_QWORD *)v47)
        return 0;
      v18 = *a3;
      v17 = (void *)(*a3 & *(_QWORD *)v45);
    }
    v23 = *(unsigned int *)(v15 + 8);
    if (v23 > 0x40)
    {
      v24 = (void *)operator new[]();
      memcpy(v24, *(const void **)v15, ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8);
      v25 = (uint64_t *)*a3;
      v26 = (unint64_t)(v23 + 63) >> 6;
      v27 = v24;
      do
      {
        v28 = *v25++;
        *v27++ &= v28;
        --v26;
      }
      while (v26);
    }
    else
    {
      v24 = (void *)(v18 & *(_QWORD *)v15);
    }
    if (v16 > 0x40)
      v29 = memcmp(v17, v24, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v29 = v17 == v24;
    v30 = v29;
    if (v23 >= 0x41 && v24)
      MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
    if (v16 >= 0x41 && v17)
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    if (v30)
    {
      v31 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)a1, v45, v13);
      v32 = *(_DWORD *)(a1 + 20);
      if ((v32 & 0x40000000) != 0)
        v33 = *(_QWORD *)(a1 - 8);
      else
        v33 = a1 - 32 * (v32 & 0x7FFFFFF);
      v34 = v33 + 32 * a2;
      if (*(_QWORD *)v34)
      {
        **(_QWORD **)(v34 + 16) = *(_QWORD *)(v34 + 8);
        v35 = *(_QWORD *)(v34 + 8);
        if (v35)
          *(_QWORD *)(v35 + 16) = *(_QWORD *)(v34 + 16);
      }
      *(_QWORD *)v34 = v31;
      if (v31)
      {
        v38 = v31[1];
        v36 = (uint64_t *)(v31 + 1);
        v37 = v38;
        v39 = v33 + 32 * a2;
        *(_QWORD *)(v39 + 8) = v38;
        if (v38)
          *((_QWORD *)v37 + 2) = v39 + 8;
        *(_QWORD *)(v39 + 16) = v36;
        *v36 = v34;
      }
      return (llvm::APFloatBase *)1;
    }
    else
    {
      return sub_1C5854D2C(a1, a2, (_QWORD **)a3);
    }
  }
  return result;
}

BOOL sub_1C5855234(uint64_t a1, _QWORD **a2)
{
  _QWORD *v4;
  llvm::APInt *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  _BOOL8 result;
  _QWORD *v11;
  unsigned int v12;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = *(llvm::APInt **)a1;
  v6 = *((_DWORD *)v5 + 2);
  if (v6 > 0x40)
    v7 = llvm::APInt::countLeadingZerosSlowCase(v5);
  else
    v7 = v6 + __clz(*(_QWORD *)v5) - 64;
  v8 = **(_DWORD **)(a1 + 8);
  v9 = v8 - v7;
  v12 = v8;
  if (v8 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v11, 0, 0);
  else
    v11 = 0;
  sub_1C4912E54(&v11, 0, v9);
  if (*((_DWORD *)a2 + 2) >= 0x41u && *a2)
    MEMORY[0x1CAA32F9C](*a2, 0x1000C8000313F17);
  *a2 = v11;
  *((_DWORD *)a2 + 2) = v12;
  if ((sub_1C5854D2C(**(_QWORD **)(a1 + 16), 0, a2) & 1) != 0
    || sub_1C5854B78(v4, **(_QWORD **)(a1 + 16), 0, (uint64_t)a2)
    || (sub_1C5854D2C(**(_QWORD **)(a1 + 16), 1u, a2) & 1) != 0
    || (result = sub_1C5854B78(v4, **(_QWORD **)(a1 + 16), 1u, (uint64_t)a2)))
  {
    if (v7)
    {
      *(_BYTE *)(**(_QWORD **)(a1 + 16) + 17) &= ~4u;
      *(_BYTE *)(**(_QWORD **)(a1 + 16) + 17) &= ~2u;
    }
    return 1;
  }
  return result;
}

size_t sub_1C58553C4(uint64_t a1, uint64_t ***a2, unsigned int *a3, unsigned int *a4, int a5, char a6)
{
  size_t v6;
  uint64_t v12;
  void *v13;
  llvm::Type *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Type *v18;
  int v19;
  int v20;
  uint64_t **v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  llvm::Type *v26;
  llvm::Type *v27;
  unsigned int *v28;
  llvm::UndefValue *v29;
  uint64_t v30;
  unsigned int *v31;
  llvm::UndefValue *v32;
  uint64_t **v33;
  llvm::FixedVectorType ***v35;
  uint64_t Impl;
  _QWORD **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t **v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t ***v62;
  size_t v63;
  void *v64;
  void **v65;
  uint64_t v66;
  void **v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t ***v71;
  uint64_t **v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  void *v82;
  unsigned int v83;
  uint64_t ***v84;
  unint64_t v85;
  unint64_t i;
  uint64_t ***v87;
  uint64_t *v88;
  uint64_t ***v89;
  uint64_t v90;
  size_t v91;
  void *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  size_t v98;
  const llvm::APInt *v99;
  unsigned int v100;
  size_t v101;
  uint64_t v102;
  unsigned int *v103;
  char v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  char v110;
  char v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  unsigned int *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t *v121;
  size_t v122;
  unint64_t v123;
  size_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  llvm::Constant *v130;
  llvm::Type *v131;
  llvm::UndefValue *v132;
  int isNullValue;
  uint64_t v134;
  void *v135;
  unsigned int v136;
  void *v137;
  uint64_t v138;
  void *v139;
  size_t v140;
  uint64_t *v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  BOOL v145;
  int v146;
  int64_t v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int *v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  int v157;
  uint64_t ***v158;
  llvm::Type *v159;
  int v160;
  uint64_t ***v161;
  _QWORD *v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  uint64_t ***v167;
  _QWORD *v168;
  int v169;
  uint64_t ***v170;
  uint64_t *v171;
  uint64_t **v172;
  uint64_t **v173;
  _QWORD **v174;
  _QWORD **v175;
  unint64_t v176;
  void *v177;
  _BYTE *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  BOOL v182;
  unsigned int v183;
  uint64_t v184;
  size_t v185;
  void *v186;
  uint64_t v187;
  size_t v188;
  void *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  llvm::ConstantInt *v202;
  unint64_t v203;
  unint64_t v204;
  llvm::ValueHandleBase *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t ****v210;
  uint64_t ***v211;
  int v212;
  int v213;
  unsigned int v214;
  uint64_t j;
  unsigned int *v216;
  unsigned int v217;
  _DWORD *v218;
  uint64_t **v219;
  int v220;
  void **v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  unint64_t v225;
  unsigned int v226;
  uint8x8_t v227;
  __int32 v228;
  unint64_t v229;
  int8x8_t *v230;
  int8x8_t v231;
  uint8x8_t v232;
  unsigned int *v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  void **v238;
  unsigned int *v239;
  void *v240;
  int v241;
  uint64_t **v242;
  void *v243;
  unsigned int *v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  int v248;
  uint64_t v249;
  int v250;
  unsigned int v251;
  uint64_t ****v252;
  uint64_t ***v253;
  uint64_t ****v254;
  int v255;
  BOOL v256;
  unsigned int v257;
  uint64_t ****v258;
  _QWORD *v259;
  uint64_t v260;
  int v261;
  size_t *v262;
  uint64_t v263;
  uint64_t ***v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  _DWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  llvm::Constant *v271;
  llvm::Type *v272;
  unsigned int v273;
  llvm::UndefValue *AggregateElement;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  char v278;
  void (**v279)(void);
  size_t v280;
  void *v281;
  void *v282;
  uint64_t v283;
  void *v284;
  size_t v285;
  uint64_t *v286;
  unint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  size_t v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  unint64_t v294;
  void *v295;
  int v296;
  void *v297;
  int v298;
  void *v299;
  unsigned int v300;
  uint64_t v301;
  int v302;
  unint64_t v303;
  int v304;
  void *v305;
  int v306;
  void *v307;
  unsigned int v308;
  uint64_t v309;
  unsigned int v310;
  uint64_t v311;
  int v312;
  void *v313;
  int v314;
  size_t v315;
  unsigned int v316;
  uint64_t v317;
  unsigned int v318;
  size_t v319;
  unsigned int v320;
  uint64_t v321;
  unsigned int v322;
  void *v323;
  unsigned int v324;
  uint64_t v325;
  unsigned int v326;
  void *v327;
  unsigned int v328;
  uint64_t v329;
  unsigned int v330;
  void *v331;
  int v332;
  void *v333;
  int v334;
  unint64_t v335;
  unsigned int v336;
  void *v337;
  unsigned int v338;
  __int128 v339;
  char *v340;
  char v341;
  void *__src;
  unsigned int v343;
  int v344;
  _QWORD v345[3];
  _QWORD *v346;
  unint64_t v347;
  uint64_t v348;
  _DWORD v349[4];
  __int16 v350;
  uint64_t v351;

  v351 = *MEMORY[0x1E0C80C00];
  v344 = a5;
  if (*((_BYTE *)*a2 + 8) == 19)
    return 0;
  v12 = *((unsigned int *)*a2 + 8);
  v343 = v12;
  if (v12 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  }
  else
  {
    v13 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v12);
    if (!(_DWORD)v12)
      v13 = 0;
    __src = v13;
  }
  if (!sub_1C4E7B480((uint64_t)a2))
  {
    v6 = a3[2];
    if (v6 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a3) != (_DWORD)v6)
        goto LABEL_13;
    }
    else if (*(_QWORD *)a3)
    {
LABEL_13:
      v16 = a4[2];
      if (v16 > 0x40)
      {
        **(_QWORD **)a4 = 0;
        bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v16 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        *(_QWORD *)a4 = 0;
      }
      if (*((unsigned __int8 *)a2 + 16) > 0x14u)
      {
        if (v344 != 10)
        {
          if ((a6 & 1) == 0)
          {
            v33 = a2[1];
            if (!v33 || v33[1])
            {
              if (v344)
                goto LABEL_64;
              v14 = (llvm::Type *)v343;
              if (a3[2] > 0x40 || v343 > 0x40)
              {
                llvm::APInt::reallocate((uint64_t)a3, v343);
                v45 = a3[2];
                if (v45 <= 0x40)
                  *(_QWORD *)a3 = __src;
                else
                  memcpy(*(void **)a3, __src, ((unint64_t)(v45 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                *(_QWORD *)a3 = __src;
                a3[2] = v14;
              }
            }
          }
          v19 = *((unsigned __int8 *)a2 + 16);
          if (v19 >= 0x1C)
          {
            v341 = 0;
            *(_QWORD *)&v339 = a1;
            *((_QWORD *)&v339 + 1) = &v344;
            v340 = &v341;
            v338 = v12;
            if (v12 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v337, 0, 0);
              v336 = v12;
              llvm::APInt::initSlowCase((llvm::APInt *)&v335, 0, 0);
              v19 = *((unsigned __int8 *)a2 + 16);
            }
            else
            {
              v337 = 0;
              v336 = v12;
              v335 = 0;
            }
            if (v19 <= 83)
            {
              if ((v19 - 73) >= 2)
              {
                if (v19 == 62)
                {
                  v68 = (unint64_t)a2[8];
                  v69 = *((_DWORD *)a2 + 5);
                  if ((v69 & 0x40000000) != 0)
                  {
                    v71 = (uint64_t ***)*(a2 - 1);
                    v70 = v69 & 0x7FFFFFF;
                  }
                  else
                  {
                    v70 = v69 & 0x7FFFFFF;
                    v71 = &a2[-4 * v70];
                  }
                  v347 = (unint64_t)(v71 + 4);
                  v348 = v68 | 4;
                  if (v70 != 1)
                  {
                    v84 = &v71[4 * v70];
                    do
                    {
                      if ((v348 & 4) == 0)
                        goto LABEL_372;
                      sub_1C4774E38((uint64_t)&v347);
                    }
                    while ((uint64_t ***)v347 != v84);
                    v69 = *((_DWORD *)a2 + 5);
                  }
                  v85 = v69 & 0x7FFFFFF;
                  if ((v69 & 0x7FFFFFF) != 0)
                  {
                    for (i = 0; i < v85; ++i)
                    {
                      if (i)
                      {
                        if ((v69 & 0x40000000) != 0)
                          v87 = (uint64_t ***)*(a2 - 1);
                        else
                          v87 = &a2[-4 * v85];
                        if (*((_BYTE *)v87[4 * i] + 16) == 12)
                          goto LABEL_311;
                      }
                      else
                      {
                        if ((v69 & 0x40000000) != 0)
                          v88 = (uint64_t *)*(a2 - 1);
                        else
                          v88 = (uint64_t *)&a2[-4 * v85];
                        if ((sub_1C4E7B480(*v88) & 1) != 0)
                        {
LABEL_311:
                          v156 = v343;
                          if (a4[2] > 0x40 || v343 > 0x40)
                          {
                            llvm::APInt::reallocate((uint64_t)a4, v343);
                            v195 = a4[2];
                            if (v195 <= 0x40)
                            {
                              v6 = 0;
                              *(_QWORD *)a4 = __src;
                            }
                            else
                            {
                              memcpy(*(void **)a4, __src, ((unint64_t)(v195 + 63) >> 3) & 0x3FFFFFF8);
                              v6 = 0;
                            }
                          }
                          else
                          {
                            v6 = 0;
                            *(_QWORD *)a4 = __src;
                            a4[2] = v156;
                          }
                          goto LABEL_385;
                        }
                        v69 = *((_DWORD *)a2 + 5);
                      }
                      if ((v69 & 0x40000000) != 0)
                        v89 = (uint64_t ***)*(a2 - 1);
                      else
                        v89 = &a2[-4 * (v69 & 0x7FFFFFF)];
                      if (((*v89[4 * i])[1] & 0xFE) == 0x12)
                      {
                        LODWORD(v348) = v12;
                        if (v12 > 0x40)
                          llvm::APInt::initSlowCase((llvm::APInt *)&v347, 0, 0);
                        else
                          v347 = 0;
                        v90 = a3[2];
                        v334 = v90;
                        if (v90 > 0x40)
                        {
                          v91 = ((unint64_t)(v90 + 63) >> 3) & 0x3FFFFFF8;
                          v92 = (void *)operator new[]();
                          v333 = v92;
                          memcpy(v92, *(const void **)a3, v91);
                          sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, i, (uint64_t)&v333, (uint64_t)&v347);
                          MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
                        }
                        else
                        {
                          v333 = *(void **)a3;
                          sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, i, (uint64_t)&v333, (uint64_t)&v347);
                        }
                        if (!i)
                        {
                          v93 = a4[2];
                          if (v93 > 0x40)
                          {
                            v94 = *(_QWORD **)a4;
                            v95 = (uint64_t *)v347;
                            v96 = (unint64_t)(v93 + 63) >> 6;
                            do
                            {
                              v97 = *v95++;
                              *v94++ |= v97;
                              --v96;
                            }
                            while (v96);
                          }
                          else
                          {
                            *(_QWORD *)a4 |= v347;
                          }
                        }
                        if (v348 >= 0x41 && v347)
                          MEMORY[0x1CAA32F9C](v347, 0x1000C8000313F17);
                        v69 = *((_DWORD *)a2 + 5);
                      }
                      v85 = v69 & 0x7FFFFFF;
                    }
                  }
                }
                else if (v19 == 77)
                {
                  v20 = *((_DWORD *)a2 + 5);
                  v21 = (v20 & 0x40000000) != 0 ? *(a2 - 1) : (uint64_t **)&a2[-4 * (v20 & 0x7FFFFFF)];
                  v79 = **v21;
                  if (v79)
                  {
                    if ((*(_DWORD *)(v79 + 8) & 0xFE) == 0x12)
                    {
                      v80 = *(_DWORD *)(v79 + 32);
                      LODWORD(v348) = v80;
                      if (v80 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v347, 0, 0);
                        v328 = v80;
                        llvm::APInt::initSlowCase((llvm::APInt *)&v327, 0, 0);
                      }
                      else
                      {
                        v347 = 0;
                        v328 = v80;
                        v327 = 0;
                      }
                      if (v338 >= 0x41 && v337)
                        MEMORY[0x1CAA32F9C](v337, 0x1000C8000313F17);
                      v337 = v327;
                      v338 = v328;
                      if ((_DWORD)v12 == v80)
                      {
                        v81 = a3[2];
                        if (v348 <= 0x40 && v81 <= 0x40)
                        {
                          v82 = *(void **)a3;
                          v347 = *(_QWORD *)a3;
                          LODWORD(v348) = v81;
LABEL_156:
                          v308 = v81;
                          v83 = 1;
LABEL_454:
                          v307 = v82;
                          goto LABEL_456;
                        }
                        llvm::APInt::reallocate((uint64_t)&v347, a3[2]);
                        v81 = v348;
                        if (v348 <= 0x40)
                        {
                          v82 = *(void **)a3;
                          v347 = *(_QWORD *)a3;
                          goto LABEL_156;
                        }
                        memcpy((void *)v347, *(const void **)a3, (((unint64_t)v348 + 63) >> 3) & 0x3FFFFFF8);
                        v308 = v81;
                        v83 = 1;
                      }
                      else
                      {
                        v83 = v12 / v80;
                        v81 = v348;
                        if (v12 % v80)
                        {
                          v83 = v80 / v12;
                          if (v80 % v12)
                          {
LABEL_509:
                            if (v81 < 0x41)
                              goto LABEL_372;
LABEL_510:
                            v123 = v347;
                            if (!v347)
                              goto LABEL_372;
                            goto LABEL_371;
                          }
                          v151 = 0;
                          v152 = a3[2];
                          do
                          {
                            v153 = a3;
                            v154 = v151 / v83;
                            if (v152 >= 0x41)
                              v153 = (unsigned int *)(*(_QWORD *)a3 + 8 * (v154 >> 6));
                            if (((*(_QWORD *)v153 >> v154) & 1) != 0)
                            {
                              v155 = 1 << v151;
                              if (v81 > 0x40)
                                *(_QWORD *)(v347 + 8 * (v151 >> 6)) |= v155;
                              else
                                v347 |= v155;
                            }
                            ++v151;
                          }
                          while (v80 != v151);
                        }
                        else if ((_DWORD)v12)
                        {
                          v196 = 0;
                          v197 = a3[2];
                          do
                          {
                            v198 = a3;
                            if (v197 >= 0x41)
                              v198 = (unsigned int *)(*(_QWORD *)a3 + 8 * (v196 >> 6));
                            if (((*(_QWORD *)v198 >> v196) & 1) != 0)
                            {
                              v199 = 1 << (v196 / v83);
                              if (v81 > 0x40)
                                *(_QWORD *)(v347 + 8 * ((v196 / v83) >> 6)) |= v199;
                              else
                                v347 |= v199;
                            }
                            ++v196;
                          }
                          while ((_DWORD)v12 != v196);
                        }
                        else
                        {
                          v83 = 0;
                        }
                        v308 = v81;
                        if (v81 <= 0x40)
                        {
                          v82 = (void *)v347;
                          goto LABEL_454;
                        }
                      }
                      v82 = (void *)operator new[]();
                      v307 = v82;
                      memcpy(v82, (const void *)v347, (((unint64_t)v81 + 63) >> 3) & 0x3FFFFFF8);
LABEL_456:
                      sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 0, (uint64_t)&v307, (uint64_t)&v337);
                      if (v308 >= 0x41 && v82)
                        MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
                      if ((_DWORD)v12 == v80)
                      {
                        v14 = (llvm::Type *)v338;
                        if (a4[2] > 0x40 || v338 > 0x40)
                        {
                          if (&v337 != (void **)a4)
                          {
                            llvm::APInt::reallocate((uint64_t)a4, v338);
                            v234 = a4[2];
                            if (v234 <= 0x40)
                              *(_QWORD *)a4 = v337;
                            else
                              memcpy(*(void **)a4, v337, ((unint64_t)(v234 + 63) >> 3) & 0x3FFFFFF8);
                          }
                        }
                        else
                        {
                          *(_QWORD *)a4 = v337;
                          a4[2] = v14;
                        }
                        goto LABEL_509;
                      }
                      if (!(v12 % v80))
                      {
                        if ((_DWORD)v12)
                        {
                          v235 = 0;
                          v236 = v338;
                          v237 = a4[2];
                          do
                          {
                            v238 = (void **)((char *)v337 + 8 * ((v235 / v83) >> 6));
                            if (v236 < 0x41)
                              v238 = &v337;
                            if ((((unint64_t)*v238 >> (v235 / v83)) & 1) != 0)
                            {
                              v239 = (unsigned int *)(*(_QWORD *)a4 + 8 * (v235 >> 6));
                              if (v237 < 0x41)
                                v239 = a4;
                              *(_QWORD *)v239 |= 1 << v235;
                            }
                            ++v235;
                          }
                          while ((_DWORD)v12 != v235);
                        }
                        goto LABEL_509;
                      }
                      v222 = 0;
                      while (1)
                      {
                        v223 = v83 * v222;
                        v224 = v338;
                        v324 = v338;
                        if (v338 > 0x40)
                        {
                          v225 = operator new[]();
                          v323 = (void *)v225;
                          v224 = v324;
                          v294 = v324 + 63;
                          memcpy((void *)v225, v337, (v294 >> 3) & 0x3FFFFFF8);
                          if (v224 > 0x40)
                          {
                            llvm::APInt::tcShiftRight((llvm::APInt *)v225, (unint64_t *)(v294 >> 6), v83 * v222);
                            goto LABEL_469;
                          }
                        }
                        else
                        {
                          v225 = (unint64_t)v337;
                        }
                        if (v224 == v223)
                        {
                          v225 = 0;
                          v323 = 0;
                          goto LABEL_470;
                        }
                        v225 >>= v223;
                        v323 = (void *)v225;
LABEL_469:
                        v223 = v224;
LABEL_470:
                        if (v223 >= v83)
                        {
                          if (v223 > v83)
                          {
                            llvm::APInt::trunc((llvm::APInt *)&v323, v83, (llvm::APInt *)&v327);
                          }
                          else
                          {
                            v328 = v223;
                            if (v223 > 0x40)
                            {
                              v327 = (void *)operator new[]();
                              memcpy(v327, v323, (((unint64_t)v328 + 63) >> 3) & 0x3FFFFFF8);
                            }
                            else
                            {
                              v327 = (void *)v225;
                            }
                          }
                        }
                        else
                        {
                          llvm::APInt::zext((llvm::APInt *)&v323, v83, (uint64_t)&v327);
                        }
                        if (v324 >= 0x41 && v323)
                          MEMORY[0x1CAA32F9C](v323, 0x1000C8000313F17);
                        v226 = v328;
                        if (v328 > 0x40)
                        {
                          v228 = 0;
                          v229 = ((unint64_t)v328 + 63) >> 6;
                          v230 = (int8x8_t *)v327;
                          do
                          {
                            v231 = *v230++;
                            v232 = (uint8x8_t)vcnt_s8(v231);
                            v232.i16[0] = vaddlv_u8(v232);
                            v228 += v232.i32[0];
                            --v229;
                          }
                          while (v229);
                        }
                        else
                        {
                          v227 = (uint8x8_t)vcnt_s8((int8x8_t)v327);
                          v227.i16[0] = vaddlv_u8(v227);
                          v228 = v227.i32[0];
                        }
                        if (v228 == v83)
                        {
                          if (a4[2] >= 0x41)
                            v233 = (unsigned int *)(*(_QWORD *)a4 + 8 * (v222 >> 6));
                          else
                            v233 = a4;
                          *(_QWORD *)v233 |= 1 << v222;
                        }
                        if (v226 >= 0x41 && v327)
                          MEMORY[0x1CAA32F9C](v327, 0x1000C8000313F17);
                        if (++v222 == v12)
                          goto LABEL_509;
                      }
                    }
                  }
                }
LABEL_372:
                v181 = *((unsigned __int8 *)a2 + 16);
                if (v181 - 59 >= 0xFFFFFFEE)
                {
                  v182 = v181 > 0x33 || ((1 << v181) & 0xD800000000000) == 0;
                  if (v182 && v181 - 53 >= 3)
                  {
                    v184 = a3[2];
                    v298 = v184;
                    if (v184 > 0x40)
                    {
                      v185 = ((unint64_t)(v184 + 63) >> 3) & 0x3FFFFFF8;
                      v186 = (void *)operator new[]();
                      v297 = v186;
                      memcpy(v186, *(const void **)a3, v185);
                      sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 0, (uint64_t)&v297, (uint64_t)a4);
                      MEMORY[0x1CAA32F9C](v186, 0x1000C8000313F17);
                    }
                    else
                    {
                      v297 = *(void **)a3;
                      sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 0, (uint64_t)&v297, (uint64_t)a4);
                    }
                    v187 = a3[2];
                    v296 = v187;
                    if (v187 > 0x40)
                    {
                      v188 = ((unint64_t)(v187 + 63) >> 3) & 0x3FFFFFF8;
                      v189 = (void *)operator new[]();
                      v295 = v189;
                      memcpy(v189, *(const void **)a3, v188);
                      sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 1u, (uint64_t)&v295, (uint64_t)&v337);
                      MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
                    }
                    else
                    {
                      v295 = *(void **)a3;
                      sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 1u, (uint64_t)&v295, (uint64_t)&v337);
                    }
                    v190 = a4[2];
                    if (v190 > 0x40)
                    {
                      v191 = *(_QWORD **)a4;
                      v192 = (uint64_t *)v337;
                      v193 = (unint64_t)(v190 + 63) >> 6;
                      do
                      {
                        v194 = *v192++;
                        *v191++ &= v194;
                        --v193;
                      }
                      while (v193);
                    }
                    else
                    {
                      *(_QWORD *)a4 &= (unint64_t)v337;
                    }
                  }
                }
                v183 = a4[2];
                if (v183)
                {
                  if (v183 > 0x40)
                  {
                    if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a4) != v183)
                    {
LABEL_380:
                      if (v341)
                        v6 = (size_t)a2;
                      else
                        v6 = 0;
                      goto LABEL_385;
                    }
                  }
                  else if (*(_QWORD *)a4 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v183)
                  {
                    goto LABEL_380;
                  }
                }
                v6 = (size_t)llvm::UndefValue::get((llvm::UndefValue *)*a2, v14);
                goto LABEL_385;
              }
              v41 = a3[2];
              v306 = v41;
              if (v41 <= 0x40)
              {
                v305 = *(void **)a3;
                v42 = &v305;
                v43 = (uint64_t)a2;
                v44 = (void **)a4;
LABEL_143:
                sub_1C5857D78((uint64_t)&v339, v43, 0, (uint64_t)v42, (uint64_t)v44);
                goto LABEL_372;
              }
              v63 = ((unint64_t)(v41 + 63) >> 3) & 0x3FFFFFF8;
              v64 = (void *)operator new[]();
              v305 = v64;
              memcpy(v64, *(const void **)a3, v63);
              v65 = &v305;
              v66 = (uint64_t)a2;
              v67 = (void **)a4;
LABEL_249:
              sub_1C5857D78((uint64_t)&v339, v66, 0, (uint64_t)v65, (uint64_t)v67);
              v123 = (unint64_t)v64;
LABEL_371:
              MEMORY[0x1CAA32F9C](v123, 0x1000C8000313F17);
              goto LABEL_372;
            }
            switch(v19)
            {
              case 'T':
                v38 = (uint64_t)*(a2 - 4);
                if (!v38
                  || *(_BYTE *)(v38 + 16)
                  || *(uint64_t ***)(v38 + 24) != a2[9]
                  || (*(_BYTE *)(v38 + 33) & 0x20) == 0)
                {
                  goto LABEL_372;
                }
                if ((*(_DWORD *)(v38 + 36) & 0xFFFFFFFE) == 0xB8)
                {
                  LODWORD(v348) = v12;
                  if (v12 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v347, -1, 1);
                  }
                  else
                  {
                    v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
                    if (!(_DWORD)v12)
                      v39 = 0;
                    v347 = v39;
                  }
                  v291 = a3[2];
                  if (v291 > 0x40)
                  {
                    v40 = operator new[]();
                    memcpy((void *)v40, *(const void **)a3, ((unint64_t)(v291 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v40 = *(_QWORD *)a3;
                  }
                  if (*((_BYTE *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8] + 16) == 10)
                    v271 = (llvm::Constant *)a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 8];
                  else
                    v271 = 0;
                  if ((_DWORD)v12 && v271)
                  {
                    v272 = 0;
                    v273 = v348;
                    do
                    {
                      AggregateElement = llvm::Constant::getAggregateElement(v271, v272);
                      if (llvm::Constant::isNullValue(AggregateElement))
                      {
                        v275 = ~(1 << (char)v272);
                        if (v273 > 0x40)
                          *(_QWORD *)(v347 + 8 * (v272 >> 6)) &= v275;
                        else
                          v347 &= v275;
                      }
                      else if (llvm::Constant::isAllOnesValue(AggregateElement))
                      {
                        v276 = ~(1 << (char)v272);
                        if (v291 > 0x40)
                          *(_QWORD *)(v40 + 8 * (v272 >> 6)) &= v276;
                        else
                          v40 &= v276;
                      }
                      v272 = (llvm::Type *)((_DWORD)v272 + 1);
                    }
                    while ((_DWORD)v12 != (_DWORD)v272);
                  }
                  if (*((_DWORD *)*(a2 - 4) + 9) == 184)
                  {
                    v304 = v348;
                    if (v348 > 0x40)
                    {
                      v280 = (((unint64_t)v348 + 63) >> 3) & 0x3FFFFFF8;
                      v281 = (void *)operator new[]();
                      v303 = (unint64_t)v281;
                      memcpy(v281, (const void *)v347, v280);
                      sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 0, (uint64_t)&v303, (uint64_t)&v337);
                      MEMORY[0x1CAA32F9C](v281, 0x1000C8000313F17);
                    }
                    else
                    {
                      v303 = v347;
                      sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 0, (uint64_t)&v303, (uint64_t)&v337);
                    }
                  }
                  v302 = v291;
                  if (v291 > 0x40)
                  {
                    v282 = (void *)operator new[]();
                    v301 = (uint64_t)v282;
                    memcpy(v282, (const void *)v40, ((unint64_t)(v291 + 63) >> 3) & 0x3FFFFFF8);
                    sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 3u, (uint64_t)&v301, (uint64_t)&v335);
                    MEMORY[0x1CAA32F9C](v282, 0x1000C8000313F17);
                  }
                  else
                  {
                    v301 = v40;
                    sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 3u, (uint64_t)&v301, (uint64_t)&v335);
                  }
                  v283 = v338;
                  if (v338 > 0x40)
                  {
                    v285 = (((unint64_t)v338 + 63) >> 3) & 0x3FFFFFF8;
                    v284 = (void *)operator new[]();
                    memcpy(v284, v337, v285);
                    v286 = (uint64_t *)v335;
                    v287 = (unint64_t)(v283 + 63) >> 6;
                    v288 = v284;
                    do
                    {
                      v289 = *v286++;
                      *v288++ &= v289;
                      --v287;
                    }
                    while (v287);
                  }
                  else
                  {
                    v284 = (void *)(v335 & (unint64_t)v337);
                  }
                  if (a4[2] >= 0x41 && *(_QWORD *)a4)
                    MEMORY[0x1CAA32F9C](*(_QWORD *)a4, 0x1000C8000313F17);
                  *(_QWORD *)a4 = v284;
                  a4[2] = v283;
                  if (v291 >= 0x41 && v40)
                    MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
                  if (v348 < 0x41)
                    goto LABEL_372;
                  goto LABEL_510;
                }
                v300 = a3[2];
                if (v300 > 0x40)
                {
                  v299 = (void *)operator new[]();
                  memcpy(v299, *(const void **)a3, (((unint64_t)v300 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v299 = *(void **)a3;
                }
                v277 = (char *)operator new(0x20uLL);
                *(_QWORD *)v277 = &off_1E817D418;
                *(_OWORD *)(v277 + 8) = v339;
                *((_QWORD *)v277 + 3) = v340;
                v346 = v277;
                v6 = sub_1C577D148(a1, (uint64_t)a2, (uint64_t)&v299, (uint64_t)a4, (uint64_t)&v337, (uint64_t)&v335, v345);
                v278 = (char)v14;
                if (v346 == v345)
                {
                  v279 = (void (**)(void))(v345[0] + 32);
                }
                else
                {
                  if (!v346)
                    goto LABEL_617;
                  v279 = (void (**)(void))(*v346 + 40);
                }
                (*v279)();
LABEL_617:
                if (v300 >= 0x41 && v299)
                  MEMORY[0x1CAA32F9C](v299, 0x1000C8000313F17);
                if (v278)
                  goto LABEL_385;
                goto LABEL_372;
              case 'U':
                if (((**(a2 - 12))[1] & 0xFE) == 0x12)
                {
                  v60 = a3[2];
                  v314 = v60;
                  if (v60 > 0x40)
                  {
                    v124 = ((unint64_t)(v60 + 63) >> 3) & 0x3FFFFFF8;
                    v125 = (void *)operator new[]();
                    v313 = v125;
                    memcpy(v125, *(const void **)a3, v124);
                    sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 0, (uint64_t)&v313, (uint64_t)a4);
                    MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
                  }
                  else
                  {
                    v313 = *(void **)a3;
                    sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 0, (uint64_t)&v313, (uint64_t)a4);
                  }
                }
                v126 = a3[2];
                if (v126 > 0x40)
                {
                  v129 = operator new[]();
                  v127 = *(_QWORD *)a3;
                  memcpy((void *)v129, *(const void **)a3, ((unint64_t)(v126 + 63) >> 3) & 0x3FFFFFF8);
                  v128 = a3[2];
                  if (v128 >= 0x41)
                  {
                    v127 = operator new[]();
                    memcpy((void *)v127, *(const void **)a3, ((unint64_t)(v128 + 63) >> 3) & 0x3FFFFFF8);
                  }
                }
                else
                {
                  v127 = *(_QWORD *)a3;
                  LODWORD(v128) = a3[2];
                  v129 = *(_QWORD *)a3;
                }
                v292 = v128;
                if (*((_BYTE *)*(a2 - 12) + 16) == 10)
                  v130 = (llvm::Constant *)*(a2 - 12);
                else
                  v130 = 0;
                if ((_DWORD)v12 && v130)
                {
                  v131 = 0;
                  do
                  {
                    v132 = llvm::Constant::getAggregateElement(v130, v131);
                    if (*((_BYTE *)v132 + 16) != 5)
                    {
                      isNullValue = llvm::Constant::isNullValue(v132);
                      v134 = ~(1 << (char)v131);
                      if (isNullValue)
                      {
                        if (v126 > 0x40)
                          *(_QWORD *)(v129 + 8 * (v131 >> 6)) &= v134;
                        else
                          v129 &= v134;
                      }
                      else if (v292 > 0x40)
                      {
                        *(_QWORD *)(v127 + 8 * (v131 >> 6)) &= v134;
                      }
                      else
                      {
                        v127 &= v134;
                      }
                    }
                    v131 = (llvm::Type *)((_DWORD)v131 + 1);
                  }
                  while ((_DWORD)v12 != (_DWORD)v131);
                }
                v312 = v126;
                if (v126 > 0x40)
                {
                  v135 = (void *)operator new[]();
                  v311 = (uint64_t)v135;
                  memcpy(v135, (const void *)v129, ((unint64_t)(v126 + 63) >> 3) & 0x3FFFFFF8);
                  sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 1u, (uint64_t)&v311, (uint64_t)&v337);
                  MEMORY[0x1CAA32F9C](v135, 0x1000C8000313F17);
                }
                else
                {
                  v311 = v129;
                  sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 1u, (uint64_t)&v311, (uint64_t)&v337);
                }
                v136 = v292;
                v310 = v292;
                if (v292 > 0x40)
                {
                  v137 = (void *)operator new[]();
                  v309 = (uint64_t)v137;
                  memcpy(v137, (const void *)v127, (((unint64_t)v292 + 63) >> 3) & 0x3FFFFFF8);
                  sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 2u, (uint64_t)&v309, (uint64_t)&v335);
                  MEMORY[0x1CAA32F9C](v137, 0x1000C8000313F17);
                }
                else
                {
                  v309 = v127;
                  sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 2u, (uint64_t)&v309, (uint64_t)&v335);
                }
                v138 = v338;
                if (v338 > 0x40)
                {
                  v140 = (((unint64_t)v338 + 63) >> 3) & 0x3FFFFFF8;
                  v139 = (void *)operator new[]();
                  memcpy(v139, v337, v140);
                  v141 = (uint64_t *)v335;
                  v142 = (unint64_t)(v138 + 63) >> 6;
                  v143 = v139;
                  do
                  {
                    v144 = *v141++;
                    *v143++ &= v144;
                    --v142;
                  }
                  while (v142);
                  v136 = v292;
                }
                else
                {
                  v139 = (void *)(v335 & (unint64_t)v337);
                }
                if (a4[2] >= 0x41 && *(_QWORD *)a4)
                  MEMORY[0x1CAA32F9C](*(_QWORD *)a4, 0x1000C8000313F17);
                *(_QWORD *)a4 = v139;
                a4[2] = v138;
                if (v136 >= 0x41 && v127)
                  MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
                if (v126 < 0x41)
                  goto LABEL_372;
                goto LABEL_369;
              case 'Z':
                v61 = *((_DWORD *)a2 + 5);
                if ((v61 & 0x40000000) != 0)
                  v62 = (uint64_t ***)*(a2 - 1);
                else
                  v62 = &a2[-4 * (v61 & 0x7FFFFFF)];
                v72 = v62[8];
                if (!v72 || *((_BYTE *)v72 + 16) != 16)
                {
                  v78 = a3[2];
                  v332 = v78;
                  if (v78 <= 0x40)
                  {
                    v331 = *(void **)a3;
                    v42 = &v331;
                    v44 = &v337;
                    v43 = (uint64_t)a2;
                    goto LABEL_143;
                  }
                  v122 = ((unint64_t)(v78 + 63) >> 3) & 0x3FFFFFF8;
                  v64 = (void *)operator new[]();
                  v331 = v64;
                  memcpy(v64, *(const void **)a3, v122);
                  v65 = &v331;
                  v67 = &v337;
                  v66 = (uint64_t)a2;
                  goto LABEL_249;
                }
                v73 = v72 + 3;
                if (*((_DWORD *)v72 + 8) >= 0x41u)
                  v73 = (_QWORD *)*v73;
                v74 = (_QWORD *)*v73;
                v75 = a3[2];
                if (v75 > 0x40)
                {
                  v6 = ((unint64_t)(v75 + 63) >> 3) & 0x3FFFFFF8;
                  v76 = operator new[]();
                  memcpy((void *)v76, *(const void **)a3, v6);
                  v145 = v12 > v74;
                  v77 = v12 > v74;
                  if (v145)
                    *(_QWORD *)(v76 + 8 * (v74 >> 6)) &= ~(1 << (char)v74);
                  v146 = 0;
                  v327 = 0;
                  v147 = (unint64_t)(v75 + 63) >> 6;
                  do
                  {
                    v145 = v147-- < 1;
                    if (v145)
                      break;
                    v148 = *(_QWORD *)(v76 + 8 * v147);
                    v146 += __clz(v148);
                  }
                  while (!v148);
                  v149 = v75 | 0xFFFFFFC0;
                  if ((v75 & 0x3F) == 0)
                    v149 = 0;
                  if ((v75 - v146 - v149) >= 0x41)
                  {
                    v330 = v75;
                    goto LABEL_534;
                  }
                  v150 = *(_QWORD *)v76;
                }
                else
                {
                  v76 = *(_QWORD *)a3;
                  if (v12 <= v74)
                  {
                    v77 = 0;
                  }
                  else
                  {
                    v77 = 1;
                    v76 &= ~(1 << (char)v74);
                  }
                  v327 = 0;
                  v150 = v76;
                }
                if (!v150)
                {
                  v166 = *((_DWORD *)a2 + 5);
                  if ((v166 & 0x40000000) != 0)
                    v167 = (uint64_t ***)*(a2 - 1);
                  else
                    v167 = &a2[-4 * (v166 & 0x7FFFFFF)];
                  v219 = v167[4];
                  v349[0] = 64;
                  v347 = (unint64_t)&v327;
                  v348 = v74;
                  v6 = *((_BYTE *)v219 + 16) == 89
                    && ((v220 = *((_DWORD *)v219 + 5), (v220 & 0x40000000) != 0)
                      ? (v221 = (void **)*(v219 - 1))
                      : (v221 = (void **)&v219[-4 * (v220 & 0x7FFFFFF)]),
                        (v240 = *v221) != 0
                     && ((v327 = v240, v241 = *((_DWORD *)v219 + 5), (v241 & 0x40000000) != 0)
                       ? (v242 = (uint64_t **)*(v219 - 1))
                       : (v242 = &v219[-4 * (v241 & 0x7FFFFFF)]),
                         sub_1C4D8A7F0((llvm::APInt *)&v348, (unsigned __int8 *)v242[4])))
                    && *(_QWORD *)v327 == (_QWORD)*a2;
                  if (v349[0] >= 0x41u && v348)
                    MEMORY[0x1CAA32F9C](v348, 0x1000C8000313F17);
                  if ((_DWORD)v6)
                  {
                    v104 = 0;
                    v6 = (size_t)v327;
                    goto LABEL_567;
                  }
                }
                v330 = v75;
                if (v75 < 0x41)
                {
                  v329 = v76;
                  v243 = (void *)v76;
                  goto LABEL_535;
                }
                v6 = ((unint64_t)(v75 + 63) >> 3) & 0x3FFFFFF8;
LABEL_534:
                v243 = (void *)operator new[]();
                v329 = (uint64_t)v243;
                memcpy(v243, (const void *)v76, v6);
LABEL_535:
                sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 0, (uint64_t)&v329, (uint64_t)a4);
                if (v330 >= 0x41 && v243)
                  MEMORY[0x1CAA32F9C](v243, 0x1000C8000313F17);
                if (v77)
                {
                  v244 = a3;
                  if (a3[2] >= 0x41)
                    v244 = (unsigned int *)(*(_QWORD *)a3 + 8 * (v74 >> 6));
                  if ((*(_QWORD *)v244 & (1 << (char)v74)) != 0)
                  {
                    v245 = ~(1 << (char)v74);
                    if (a4[2] > 0x40)
                      *(_QWORD *)(*(_QWORD *)a4 + 8 * (v74 >> 6)) &= v245;
                    else
                      *(_QWORD *)a4 &= v245;
                    v104 = 1;
                    goto LABEL_567;
                  }
                }
                v246 = *(_QWORD *)(a1 + 32);
                v247 = *(_DWORD *)(v246 + 8);
                v347 = (unint64_t)a2;
                LODWORD(v348) = v247;
                v248 = *(_DWORD *)(v246 + 2080);
                if (v248)
                {
                  v249 = *(_QWORD *)(v246 + 2064);
                  v250 = v248 - 1;
                  v251 = v250 & ((a2 >> 4) ^ (a2 >> 9));
                  v252 = (uint64_t ****)(v249 + 16 * v251);
                  v253 = *v252;
                  if (*v252 == a2)
                    goto LABEL_561;
                  v254 = 0;
                  v255 = 1;
                  while (v253 != (uint64_t ***)-4096)
                  {
                    if (v254)
                      v256 = 0;
                    else
                      v256 = v253 == (uint64_t ***)-8192;
                    if (v256)
                      v254 = v252;
                    v257 = v251 + v255++;
                    v251 = v257 & v250;
                    v252 = (uint64_t ****)(v249 + 16 * v251);
                    v253 = *v252;
                    if (*v252 == a2)
                      goto LABEL_561;
                  }
                  if (v254)
                    v258 = v254;
                  else
                    v258 = v252;
                }
                else
                {
                  v258 = 0;
                }
                v259 = sub_1C4D8D8F4((_DWORD *)(v246 + 2064), (uint64_t)&v347, (uint64_t *)&v347, v258);
                *v259 = v347;
                *((_DWORD *)v259 + 2) = v348;
                v260 = *(unsigned int *)(v246 + 8);
                if (v260 >= *(_DWORD *)(v246 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v246, v246 + 16, v260 + 1, 8);
                  LODWORD(v260) = *(_DWORD *)(v246 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v246 + 8 * v260) = a2;
                ++*(_DWORD *)(v246 + 8);
LABEL_561:
                v261 = *((_DWORD *)a2 + 5);
                if ((v261 & 0x40000000) != 0)
                  v262 = (size_t *)*(a2 - 1);
                else
                  v262 = (size_t *)&a2[-4 * (v261 & 0x7FFFFFF)];
                v104 = 0;
                v6 = *v262;
LABEL_567:
                if (v75 >= 0x41 && v76)
                {
                  v263 = v76;
                  goto LABEL_589;
                }
                goto LABEL_590;
              case '[':
                v46 = *((_DWORD *)**(a2 - 8) + 8);
                v47 = *((unsigned int *)a2 + 18);
                if (!(_DWORD)v47)
                  goto LABEL_102;
                v48 = a2[8];
                v49 = 4 * v47;
                break;
              default:
                goto LABEL_372;
            }
            do
            {
              if (*(_DWORD *)v48)
                goto LABEL_105;
              v48 = (uint64_t **)((char *)v48 + 4);
              v49 -= 4;
            }
            while (v49);
LABEL_102:
            v50 = a3[2];
            if (v50)
            {
              if (v50 > 0x40)
              {
                if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a3) != v50)
                {
LABEL_105:
                  v328 = v46;
                  if (v46 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v327, 0, 0);
                    v324 = v46;
                    llvm::APInt::initSlowCase((llvm::APInt *)&v323, 0, 0);
                    if (!(_DWORD)v12)
                      goto LABEL_120;
                  }
                  else
                  {
                    v327 = 0;
                    v324 = v46;
                    v323 = 0;
                    if (!(_DWORD)v12)
                      goto LABEL_120;
                  }
                  v51 = 0;
                  v52 = a3[2];
                  v53 = v328;
                  v54 = v324;
                  do
                  {
                    v55 = a3;
                    if (v52 >= 0x41)
                      v55 = (unsigned int *)(*(_QWORD *)a3 + 8 * (v51 >> 6));
                    if (((*(_QWORD *)v55 >> v51) & 1) != 0)
                    {
                      v56 = *((unsigned int *)a2[8] + v51);
                      if ((_DWORD)v56 != -1)
                      {
                        if (v56 >= v46)
                        {
                          v58 = v56 - v46;
                          v59 = 1 << (v56 - v46);
                          if (v54 > 0x40)
                            *((_QWORD *)v323 + (v58 >> 6)) |= v59;
                          else
                            v323 = (void *)((unint64_t)v323 | v59);
                        }
                        else
                        {
                          v57 = 1 << v56;
                          if (v53 > 0x40)
                            *(_QWORD *)((char *)v327 + ((v56 >> 3) & 0x1FFFFFF8)) |= v57;
                          else
                            v327 = (void *)((unint64_t)v327 | v57);
                        }
                      }
                    }
                    ++v51;
                  }
                  while (v12 != v51);
LABEL_120:
                  v322 = v46;
                  if (v46 > 0x40)
                    llvm::APInt::initSlowCase((llvm::APInt *)&v321, 0, 0);
                  else
                    v321 = 0;
                  v320 = v328;
                  if (v328 > 0x40)
                  {
                    v98 = (((unint64_t)v328 + 63) >> 3) & 0x3FFFFFF8;
                    v6 = operator new[]();
                    v319 = v6;
                    memcpy((void *)v6, v327, v98);
                    sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 0, (uint64_t)&v319, (uint64_t)&v321);
                    MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
                  }
                  else
                  {
                    v319 = (size_t)v327;
                    sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 0, (uint64_t)&v319, (uint64_t)&v321);
                  }
                  v318 = v46;
                  if (v46 > 0x40)
                    llvm::APInt::initSlowCase((llvm::APInt *)&v317, 0, 0);
                  else
                    v317 = 0;
                  v316 = v324;
                  if (v324 > 0x40)
                  {
                    v101 = (((unint64_t)v324 + 63) >> 3) & 0x3FFFFFF8;
                    v6 = operator new[]();
                    v315 = v6;
                    memcpy((void *)v6, v323, v101);
                    sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 1u, (uint64_t)&v315, (uint64_t)&v317);
                    MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
                  }
                  else
                  {
                    v315 = (size_t)v323;
                    sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 1u, (uint64_t)&v315, (uint64_t)&v317);
                  }
                  if ((_DWORD)v12 == v46)
                  {
                    if (!(_DWORD)v12)
                    {
LABEL_211:
                      v104 = 0;
                      v6 = (size_t)*(a2 - 8);
                      goto LABEL_578;
                    }
                    v102 = 0;
                    while (1)
                    {
                      v103 = a3;
                      if (a3[2] >= 0x41)
                        v103 = (unsigned int *)(*(_QWORD *)a3 + 8 * (v102 >> 6));
                      if (((*(_QWORD *)v103 >> v102) & 1) != 0 && v102 != *((_DWORD *)a2[8] + v102))
                        break;
                      if (v12 == ++v102)
                        goto LABEL_211;
                    }
                  }
                  if ((_DWORD)v12)
                  {
                    v105 = 0;
                    v106 = 0;
                    v107 = v318;
                    v108 = a4[2];
                    v109 = -1;
                    v14 = (llvm::Type *)&v321;
                    v99 = (const llvm::APInt *)&v317;
                    v100 = v322;
                    v110 = 1;
                    v111 = 1;
                    v112 = -1;
                    v113 = -1;
                    v114 = -1;
                    while (1)
                    {
                      v115 = *((unsigned int *)a2[8] + v105);
                      if ((_DWORD)v115 == -1)
                      {
                        v119 = 1 << v105;
                        if (v108 > 0x40)
                          *(_QWORD *)(*(_QWORD *)a4 + 8 * (v105 >> 6)) |= v119;
                        else
                          *(_QWORD *)a4 |= v119;
                      }
                      else
                      {
                        v116 = a3;
                        if (a3[2] >= 0x41)
                          v116 = (unsigned int *)(*(_QWORD *)a3 + 8 * (v105 >> 6));
                        v117 = 1 << v105;
                        if ((*(_QWORD *)v116 & (1 << v105)) == 0)
                          goto LABEL_234;
                        if (v115 >= v46)
                        {
                          v120 = v115 - v46;
                          v121 = (uint64_t *)(v317 + 8 * (v120 >> 6));
                          if (v107 < 0x41)
                            v121 = &v317;
                          if ((((unint64_t)*v121 >> v120) & 1) == 0)
                          {
                            if (v112 == -1)
                              v112 = v105;
                            else
                              v112 = v46;
                            if (v109 == -1)
                              v109 = v120;
                            else
                              v109 = v46;
                            v110 &= v105 == v120;
                            goto LABEL_246;
                          }
LABEL_234:
                          if (v108 > 0x40)
                            *(_QWORD *)(*(_QWORD *)a4 + 8 * (v105 >> 6)) |= v117;
                          else
                            *(_QWORD *)a4 |= v117;
                          v106 = 1;
                          goto LABEL_246;
                        }
                        v118 = (uint64_t *)(v321 + ((v115 >> 3) & 0x1FFFFFF8));
                        if (v100 < 0x41)
                          v118 = &v321;
                        if ((((unint64_t)*v118 >> v115) & 1) != 0)
                          goto LABEL_234;
                        if (v114 == -1)
                          v114 = v105;
                        else
                          v114 = v46;
                        if (v113 == -1)
                          v113 = *((_DWORD *)a2[8] + v105);
                        else
                          v113 = v46;
                        v111 &= v105 == v115;
                      }
LABEL_246:
                      if (v12 == ++v105)
                        goto LABEL_322;
                    }
                  }
                  v106 = 0;
                  v111 = 1;
                  v114 = -1;
                  v113 = -1;
                  v112 = -1;
                  v109 = -1;
                  v110 = 1;
LABEL_322:
                  if (v46 != *((_DWORD *)*a2 + 8))
                    goto LABEL_434;
                  if (((v114 < v46) & v110) == 1)
                  {
                    v162 = 0;
                    v163 = (uint64_t)*(a2 - 8);
                    v164 = -1;
                    if (v163)
                    {
                      v165 = 0;
                      if (*(_BYTE *)(v163 + 16) == 10)
                      {
                        v162 = *(a2 - 4);
                        v165 = *(_QWORD *)(v163 - 32 * (*(_DWORD *)(v163 + 20) & 0x7FFFFFF) + 32 * v113);
                        v164 = v114;
                      }
                    }
                    else
                    {
                      v165 = 0;
                    }
                  }
                  else
                  {
                    v162 = 0;
                    v165 = 0;
                    v164 = -1;
                  }
                  if (((v112 < v46) & v111) == 1)
                  {
                    v200 = (uint64_t)*(a2 - 4);
                    if (v200)
                    {
                      if (*(_BYTE *)(v200 + 16) == 10)
                      {
                        v162 = *(a2 - 8);
                        v165 = *(_QWORD *)(v200 - 32 * (*(_DWORD *)(v200 + 20) & 0x7FFFFFF) + 32 * v109);
                        v164 = v112;
                      }
                    }
                  }
                  if (!v162 || !v165)
                  {
LABEL_434:
                    if ((v106 & 1) != 0)
                    {
                      v347 = (unint64_t)v349;
                      v348 = 0x1000000000;
                      v214 = 0;
                      if ((_DWORD)v12)
                      {
                        for (j = 0; j != v12; ++j)
                        {
                          if (a4[2] >= 0x41)
                            v216 = (unsigned int *)(*(_QWORD *)a4 + 8 * (j >> 6));
                          else
                            v216 = a4;
                          if (((*(_QWORD *)v216 >> j) & 1) != 0)
                          {
                            v217 = HIDWORD(v348);
                            v6 = 0xFFFFFFFFLL;
                          }
                          else
                          {
                            v6 = *((unsigned int *)a2[8] + j);
                            v217 = HIDWORD(v348);
                          }
                          if (v214 >= v217)
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v347, (uint64_t)v349, v214 + 1, 4);
                            v214 = v348;
                          }
                          *(_DWORD *)(v347 + 4 * v214) = v6;
                          v214 = v348 + 1;
                          LODWORD(v348) = v348 + 1;
                        }
                        v218 = (_DWORD *)v347;
                      }
                      else
                      {
                        v218 = v349;
                      }
                      llvm::ShuffleVectorInst::setShuffleMask((uint64_t)a2, v218, v214, v100);
                      v341 = 1;
                      if ((_DWORD *)v347 != v349)
                        free((void *)v347);
                    }
                    v104 = 1;
LABEL_578:
                    if (v318 >= 0x41 && v317)
                      MEMORY[0x1CAA32F9C](v317, 0x1000C8000313F17);
                    if (v322 >= 0x41 && v321)
                      MEMORY[0x1CAA32F9C](v321, 0x1000C8000313F17);
                    if (v324 >= 0x41 && v323)
                      MEMORY[0x1CAA32F9C](v323, 0x1000C8000313F17);
                    if (v328 >= 0x41)
                    {
                      v263 = (uint64_t)v327;
                      if (v327)
LABEL_589:
                        MEMORY[0x1CAA32F9C](v263, 0x1000C8000313F17);
                    }
LABEL_590:
                    if ((v104 & 1) == 0)
                    {
LABEL_385:
                      if (v336 >= 0x41 && v335)
                        MEMORY[0x1CAA32F9C](v335, 0x1000C8000313F17);
                      if (v338 >= 0x41 && v337)
                        MEMORY[0x1CAA32F9C](v337, 0x1000C8000313F17);
                      goto LABEL_65;
                    }
                    goto LABEL_372;
                  }
                  v201 = ***a2;
                  v202 = *(llvm::ConstantInt **)(v201 + 1960);
                  v203 = *(unsigned int *)(v201 + 1968);
                  LODWORD(v348) = v203 >> 8;
                  v293 = v165;
                  if (v203 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v347, v164, 0);
                  }
                  else
                  {
                    v204 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v203);
                    if (v203 <= 0xFF)
                      LODWORD(v204) = 0;
                    v347 = v204 & v164;
                  }
                  v205 = llvm::ConstantInt::get(v202, (llvm::LLVMContext *)&v347, v99);
                  if (v348 >= 0x41 && v347)
                    MEMORY[0x1CAA32F9C](v347, 0x1000C8000313F17);
                  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
                  {
                    v266 = 0;
                    v265 = &byte_1C871356D;
LABEL_575:
                    v350 = 261;
                    v347 = (unint64_t)v265;
                    v348 = v266;
                    v268 = operator new(0xA0uLL);
                    v269 = 0;
                    v6 = (size_t)(v268 + 24);
                    v268[29] = v268[29] & 0x38000000 | 3;
                    do
                    {
                      v270 = &v268[v269];
                      *v270 = 0;
                      v270[1] = 0;
                      v270[2] = 0;
                      v270[3] = v6;
                      v269 += 8;
                    }
                    while (v269 != 24);
                    llvm::InsertElementInst::InsertElementInst((uint64_t)(v268 + 24), v162, v293, (uint64_t)v205, (uint64_t)&v347, 0);
                    sub_1C577E498(a1, (llvm::Value *)v6, (uint64_t)a2);
                    v104 = 0;
                    goto LABEL_578;
                  }
                  v206 = ***a2;
                  v207 = *(_QWORD *)(v206 + 152);
                  v208 = *(unsigned int *)(v206 + 168);
                  if ((_DWORD)v208)
                  {
                    LODWORD(v209) = (v208 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                    v210 = (uint64_t ****)(v207 + 16 * v209);
                    v211 = *v210;
                    if (*v210 == a2)
                    {
LABEL_574:
                      v264 = v210[1];
                      v267 = (uint64_t)*v264;
                      v265 = (char *)(v264 + 2);
                      v266 = v267;
                      goto LABEL_575;
                    }
                    v212 = 1;
                    while (v211 != (uint64_t ***)-4096)
                    {
                      v213 = v209 + v212++;
                      v209 = v213 & (v208 - 1);
                      v211 = *(uint64_t ****)(v207 + 16 * v209);
                      if (v211 == a2)
                      {
                        v210 = (uint64_t ****)(v207 + 16 * v209);
                        goto LABEL_574;
                      }
                    }
                  }
                  v210 = (uint64_t ****)(v207 + 16 * v208);
                  goto LABEL_574;
                }
              }
              else if (*(_QWORD *)a3 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v50)
              {
                goto LABEL_105;
              }
            }
            v157 = *((_DWORD *)a2 + 5);
            if ((v157 & 0x40000000) != 0)
              v158 = (uint64_t ***)*(a2 - 1);
            else
              v158 = &a2[-4 * (v157 & 0x7FFFFFF)];
            if ((sub_1C4E7B480((uint64_t)v158[4]) & 1) == 0)
            {
              v160 = *((_DWORD *)a2 + 5);
              if ((v160 & 0x40000000) != 0)
                v161 = (uint64_t ***)*(a2 - 1);
              else
                v161 = &a2[-4 * (v160 & 0x7FFFFFF)];
              v168 = llvm::PoisonValue::get((llvm::PoisonValue *)*v161[4], v159);
              v169 = *((_DWORD *)a2 + 5);
              if ((v169 & 0x40000000) != 0)
                v170 = (uint64_t ***)*(a2 - 1);
              else
                v170 = &a2[-4 * (v169 & 0x7FFFFFF)];
              v171 = (uint64_t *)(v170 + 4);
              if (v170[4])
              {
                *v170[6] = (uint64_t *)v170[5];
                v172 = v170[5];
                if (v172)
                  v172[2] = (uint64_t *)v170[6];
              }
              *v171 = (uint64_t)v168;
              if (v168)
              {
                v175 = (_QWORD **)v168[1];
                v173 = (uint64_t **)(v168 + 1);
                v174 = v175;
                v170[5] = v175;
                if (v175)
                  v174[2] = v170 + 5;
                v170[6] = v173;
                *v173 = v171;
              }
              v341 = 1;
            }
            LODWORD(v348) = v46;
            if (v46 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v347, 1, 0);
              v328 = v46;
              llvm::APInt::initSlowCase((llvm::APInt *)&v327, 0, 0);
              v46 = v348;
              v326 = v348;
              if (v348 > 0x40)
              {
                v290 = (((unint64_t)v348 + 63) >> 3) & 0x3FFFFFF8;
                v177 = (void *)operator new[]();
                v325 = (uint64_t)v177;
                v129 = v347;
                memcpy(v177, (const void *)v347, v290);
LABEL_351:
                sub_1C5857D78((uint64_t)&v339, (uint64_t)a2, 0, (uint64_t)&v325, (uint64_t)&v327);
                if (v326 >= 0x41 && v177)
                  MEMORY[0x1CAA32F9C](v177, 0x1000C8000313F17);
                v178 = v327;
                if (v328 < 0x41)
                  v178 = &v327;
                v179 = a4[2];
                if ((*v178 & 1) != 0)
                {
                  v14 = (llvm::Type *)v343;
                  if (v179 > 0x40 || v343 > 0x40)
                  {
                    llvm::APInt::reallocate((uint64_t)a4, v343);
                    v180 = a4[2];
                    if (v180 <= 0x40)
                      *(_QWORD *)a4 = __src;
                    else
                      memcpy(*(void **)a4, __src, ((unint64_t)(v180 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    *(_QWORD *)a4 = __src;
                    a4[2] = v14;
                  }
                }
                else if (v179 > 0x40)
                {
                  bzero(*(void **)a4, ((unint64_t)(v179 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  *(_QWORD *)a4 = 0;
                }
                if (v328 >= 0x41 && v327)
                  MEMORY[0x1CAA32F9C](v327, 0x1000C8000313F17);
                if (v46 < 0x41)
                  goto LABEL_372;
LABEL_369:
                if (!v129)
                  goto LABEL_372;
                v123 = v129;
                goto LABEL_371;
              }
              v129 = v347;
            }
            else
            {
              if (v46)
                v176 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v46;
              else
                LOBYTE(v176) = 0;
              v129 = v176 & 1;
              v347 = v129;
              v328 = v46;
              v327 = 0;
              v326 = v46;
            }
            v325 = v129;
            v177 = (void *)v129;
            goto LABEL_351;
          }
        }
LABEL_64:
        v6 = 0;
        goto LABEL_65;
      }
      v22 = a3[2];
      if (!v22)
        goto LABEL_64;
      if (v22 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a3) == v22)
          goto LABEL_64;
      }
      else
      {
        v6 = 0;
        if (*(_QWORD *)a3 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v22)
          goto LABEL_65;
      }
      v24 = llvm::PoisonValue::get((llvm::PoisonValue *)(*a2)[3], v14);
      v347 = (unint64_t)v349;
      v348 = 0x1000000000;
      if (!(_DWORD)v12)
      {
        v26 = 0;
        v35 = (llvm::FixedVectorType ***)v349;
LABEL_70:
        Impl = (uint64_t)llvm::ConstantVector::getImpl(v35, (llvm::Type *)v26);
        if (!Impl)
        {
          llvm::FixedVectorType::get(**v35, v26);
          Impl = sub_1C537B3A4(**v37 + 1288, (uint64_t)v37, v35, v26);
        }
        if ((uint64_t ***)Impl == a2)
          v6 = 0;
        else
          v6 = Impl;
LABEL_88:
        if ((_DWORD *)v347 != v349)
          free((void *)v347);
        goto LABEL_65;
      }
      v25 = v24;
      LODWORD(v26) = 0;
      v27 = 0;
      while (1)
      {
        v28 = a3;
        if (a3[2] >= 0x41)
          v28 = (unsigned int *)(*(_QWORD *)a3 + 8 * (v27 >> 6));
        if ((*(_QWORD *)v28 & (1 << (char)v27)) == 0)
          break;
        v29 = llvm::Constant::getAggregateElement((llvm::Constant *)a2, v27);
        if (!v29)
        {
          v6 = 0;
          goto LABEL_88;
        }
        v30 = v348;
        if (v348 >= (unint64_t)HIDWORD(v348))
        {
          v32 = v29;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v347, (uint64_t)v349, v348 + 1, 8);
          v29 = v32;
          v30 = v348;
        }
        *(_QWORD *)(v347 + 8 * v30) = v29;
        v26 = (llvm::Type *)(v348 + 1);
        LODWORD(v348) = v348 + 1;
        if (*((unsigned __int8 *)v29 + 16) - 11 <= 1)
          goto LABEL_55;
LABEL_59:
        v27 = (llvm::Type *)((_DWORD)v27 + 1);
        if ((_DWORD)v12 == (_DWORD)v27)
        {
          v35 = (llvm::FixedVectorType ***)v347;
          goto LABEL_70;
        }
      }
      if (v26 >= HIDWORD(v348))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v347, (uint64_t)v349, v26 + 1, 8);
        LODWORD(v26) = v348;
      }
      *(_QWORD *)(v347 + 8 * v26) = v25;
      v26 = (llvm::Type *)(v348 + 1);
      LODWORD(v348) = v348 + 1;
LABEL_55:
      if (a4[2] >= 0x41)
        v31 = (unsigned int *)(*(_QWORD *)a4 + 8 * (v27 >> 6));
      else
        v31 = a4;
      *(_QWORD *)v31 |= 1 << (char)v27;
      goto LABEL_59;
    }
    v18 = (llvm::Type *)v343;
    if (a4[2] > 0x40 || v343 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)a4, v343);
      v23 = a4[2];
      if (v23 <= 0x40)
        *(_QWORD *)a4 = __src;
      else
        memcpy(*(void **)a4, __src, ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *(_QWORD *)a4 = __src;
      a4[2] = v18;
    }
    v6 = (size_t)llvm::PoisonValue::get((llvm::PoisonValue *)*a2, v18);
    goto LABEL_65;
  }
  v15 = v343;
  if (a4[2] > 0x40 || v343 > 0x40)
  {
    llvm::APInt::reallocate((uint64_t)a4, v343);
    v17 = a4[2];
    if (v17 <= 0x40)
    {
      v6 = 0;
      *(_QWORD *)a4 = __src;
      goto LABEL_65;
    }
    memcpy(*(void **)a4, __src, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
    goto LABEL_64;
  }
  v6 = 0;
  *(_QWORD *)a4 = __src;
  a4[2] = v15;
LABEL_65:
  if (v343 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v6;
}

uint64_t sub_1C5857D78(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  size_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;

  v10 = *(_QWORD *)a1;
  if (*(_BYTE *)(a2 + 16) == 84)
  {
    v11 = *(_QWORD *)(a2 - 32);
    if (v11)
    {
      if (!*(_BYTE *)(v11 + 16) && *(_QWORD *)(v11 + 24) == *(_QWORD *)(a2 + 72) && (*(_BYTE *)(v11 + 33) & 0x20) != 0)
      {
        v12 = *(_DWORD *)(a2 + 20);
        goto LABEL_7;
      }
    }
  }
  v12 = *(_DWORD *)(a2 + 20);
  if ((v12 & 0x40000000) == 0)
  {
LABEL_7:
    v13 = a2 - 32 * (v12 & 0x7FFFFFF);
    goto LABEL_9;
  }
  v13 = *(_QWORD *)(a2 - 8);
LABEL_9:
  v14 = *(_QWORD *)(v13 + 32 * a3);
  v15 = *(unsigned int *)(a4 + 8);
  v21 = v15;
  if (v15 > 0x40)
  {
    v17 = ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8;
    v16 = (void *)operator new[]();
    memcpy(v16, *(const void **)a4, v17);
  }
  else
  {
    v16 = *(void **)a4;
  }
  v20 = (uint64_t)v16;
  result = sub_1C58553C4(v10, v14, &v20, a5, (**(_DWORD **)(a1 + 8) + 1), 0);
  v19 = result;
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  }
  if (v19)
  {
    result = sub_1C577E2C8(v10, a2, a3, v19);
    **(_BYTE **)(a1 + 16) = 1;
  }
  return result;
}

void sub_1C5857EF4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5857F08(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E817D418;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C5857F48(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817D418;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5857F70(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;

  v5 = *a2;
  v6 = *a3;
  v12 = *((_DWORD *)a4 + 2);
  v7 = v12;
  v8 = *a4;
  v11 = *a4;
  *((_DWORD *)a4 + 2) = 0;
  result = sub_1C5857D78(a1 + 8, v5, v6, (uint64_t)&v11, a5);
  if (v7 >= 0x41 && v8 != 0)
    JUMPOUT(0x1CAA32F9CLL);
  return result;
}

BOOL sub_1C5857FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  _BOOL8 result;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21[2];
  uint64_t v22;
  llvm::Constant *v23;

  if (*(_BYTE *)(a2 + 16) == 16)
    v4 = a2;
  else
    v4 = 0;
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v5 <= 0x14)
  {
    if (!v4)
      return llvm::Constant::getSplatValue((llvm::Constant *)a1, 0) != 0;
    return 1;
  }
  result = v4 != 0;
  if (a1)
  {
    if (v5 == 84 && v4 != 0)
    {
      v8 = *(_QWORD *)(a1 - 32);
      if (v8 && !*(_BYTE *)(v8 + 16) && *(_QWORD *)(v8 + 24) == *(_QWORD *)(a1 + 72) && *(_DWORD *)(v8 + 36) == 130)
      {
        v9 = *(unsigned int *)(*(_QWORD *)a1 + 32);
        v10 = (unint64_t *)(v4 + 24);
        v11 = *(_DWORD *)(v4 + 32);
        if (v11 < 0x41)
          return *v10 < v9;
        if (v11 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v4 + 24)) <= 0x40)
        {
          v10 = (unint64_t *)*v10;
          return *v10 < v9;
        }
        return 0;
      }
LABEL_26:
      v14 = *(_QWORD *)(a1 + 8);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        v16 = v5 == 40 || v5 == 60;
        if (v16 && v15 == 0)
          return 1;
      }
      v22 = 0;
      v23 = 0;
      v21[0] = &v23;
      v21[1] = &v22;
      if (sub_1C57DCBA4(v21, a1))
      {
        if ((sub_1C5857FE8(v23, a2) & 1) != 0 || (sub_1C5857FE8(v22, a2) & 1) != 0)
          return 1;
      }
      v18 = *(_QWORD *)(a1 + 8);
      if (v18)
      {
        if (!*(_QWORD *)(v18 + 8))
        {
          if (a1)
          {
            v19 = *(unsigned __int8 *)(a1 + 16);
            if (v19 >= 0x1C && v19 - 83 >= 0xFFFFFFFE)
            {
              v20 = *(_QWORD *)(a1 - 64);
              if (v20)
              {
                v23 = *(llvm::Constant **)(a1 - 64);
                if (*(_QWORD *)(a1 - 32))
                {
                  v22 = *(_QWORD *)(a1 - 32);
                  if ((sub_1C5857FE8(v20, a2) & 1) != 0 || (sub_1C5857FE8(v22, a2) & 1) != 0)
                    return 1;
                }
              }
            }
          }
        }
      }
      return 0;
    }
  }
  if (v5 != 90)
    goto LABEL_26;
  v12 = *(_DWORD *)(a1 + 20);
  v13 = (v12 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v12 & 0x7FFFFFF);
  if (*(_BYTE *)(*(_QWORD *)(v13 + 64) + 16) != 16)
    goto LABEL_26;
  return result;
}

llvm::ValueHandleBase *getPreferredVectorIndex(llvm::ConstantInt *a1, uint64_t a2, const llvm::APInt *a3)
{
  llvm::ConstantInt **v3;
  llvm::ValueHandleBase *v4;
  unint64_t *v6;
  unsigned int v7;
  int v8;
  llvm::ConstantInt *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;

  v3 = *(llvm::ConstantInt ***)a1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFFFFFF00) == 0x4000)
    return 0;
  v6 = (unint64_t *)((char *)a1 + 24);
  v7 = *((_DWORD *)a1 + 8);
  if (v7 > 0x40)
  {
    v12 = (unint64_t *)((char *)a1 + 24);
    v11 = *((_DWORD *)a1 + 8);
    v8 = llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantInt *)((char *)a1 + 24));
    v7 = v11;
    v6 = v12;
  }
  else
  {
    v8 = v7 + __clz(*v6) - 64;
  }
  if (v7 - v8 > 0x40)
    return 0;
  v9 = *v3;
  if (v7 > 0x3F)
  {
    if (v7 == 64)
    {
      sub_1C5DD14E0((uint64_t)&v13, (uint64_t)v6);
      goto LABEL_10;
    }
    v10 = *(_QWORD *)*v6;
  }
  else
  {
    v10 = *v6;
  }
  v14 = 64;
  v13 = v10;
LABEL_10:
  v4 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v13, a3);
  if (v14 >= 0x41 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  return v4;
}

llvm::UndefValue **sub_1C58582D0(uint64_t a1, llvm::UndefValue **a2)
{
  llvm::UndefValue **v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  llvm::UndefValue *ElementInst;
  uint64_t v9;
  const llvm::APInt *v10;
  llvm::Value *v11;
  uint64_t v12;
  llvm::ValueAsMetadata *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v17;
  llvm::ConstantInt **v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t *v26;
  unsigned int v27;
  int v28;
  llvm::ConstantInt *v29;
  void *v30;
  llvm::ValueHandleBase *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  llvm::ConstantInt **v36;
  unsigned int v37;
  llvm::Value *v38;
  unint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  llvm::APFloatBase *ScalarElement;
  unsigned __int8 *v48;
  _DWORD *v49;
  void **v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  char *v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t *v59;
  unsigned int v60;
  unsigned int v61;
  const llvm::APInt *v62;
  _BOOL4 v63;
  unsigned int v64;
  _BOOL4 v65;
  int PrimitiveSizeInBits;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  llvm::Value **v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _BOOL4 v76;
  _DWORD *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  llvm::UndefValue *v82;
  _QWORD *v83;
  llvm::Value *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  llvm::Value *v88;
  llvm::PHINode *v89;
  int v90;
  unint64_t v91;
  llvm::Type *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  llvm::Value *v97;
  unsigned int v98;
  BOOL v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t ***v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t ****v110;
  uint64_t ***v111;
  int v112;
  int v113;
  uint64_t *v114;
  unsigned int v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t ***v120;
  uint64_t **v121;
  char *v122;
  uint64_t **v123;
  _DWORD *v124;
  llvm::Value *v125;
  llvm::Value *v126;
  char *v127;
  llvm::Value **v128;
  llvm::Value *v129;
  uint64_t v130;
  uint64_t v131;
  llvm::Value ***v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  unsigned __int8 *v144;
  uint64_t *v145;
  unsigned __int8 *v146;
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int16 v157;
  uint64_t *v158;
  unsigned __int8 *v159;
  uint64_t *v160;
  unsigned __int8 *v161;
  int v162;
  uint64_t v163;
  unsigned int *v164;
  int v165;
  _QWORD *v166;
  int v167;
  BOOL v168;
  int v169;
  llvm::Value **v170;
  _DWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t *v185;
  unsigned int v186;
  llvm::Value *v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v191;
  unsigned int v192;
  unsigned int v193;
  unint64_t v194;
  uint64_t v195;
  unsigned int v196;
  BOOL v197;
  unint64_t v198;
  llvm::Value **v199;
  uint64_t v200;
  _QWORD **v202;
  unsigned int v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  unsigned int v207;
  unsigned int *v208;
  unint64_t v209;
  unsigned int v210;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  llvm::Value **v218;
  llvm::Value **v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  llvm::Value **v227;
  void *v228;
  size_t v229;
  unint64_t v230;
  llvm::Value *v231;
  BOOL v232;
  int v233;
  char v234;
  llvm::ValueAsMetadata **v235;
  uint64_t v236;
  llvm::ValueAsMetadata *v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t *v240;
  unsigned __int8 *v241;
  uint64_t v242;
  llvm::GetElementPtrInst *TypeAtIndex;
  uint64_t v244;
  uint64_t v245;
  BOOL v246;
  _QWORD *v247;
  llvm::Value *v248;
  uint64_t v249;
  int v250;
  llvm::Type **v251;
  uint64_t v252;
  llvm::Type *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t **v256;
  uint64_t v257;
  uint64_t ***v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  _DWORD *v263;
  uint64_t *v264;
  uint64_t *v265;
  _DWORD *v266;
  _DWORD *v267;
  int v268;
  _DWORD *v269;
  _DWORD *v270;
  int v271;
  uint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  llvm::Value *v277;
  unsigned int v278;
  int v279;
  uint64_t v280;
  unsigned int v281;
  llvm::Type *v282;
  int v283;
  llvm::Type *v284;
  llvm::Type *v285;
  void *v286;
  unsigned int v287;
  void *__src;
  unsigned int v289;
  void *v290;
  unsigned int v291;
  uint64_t v292;
  unsigned __int8 *v293;
  llvm::Value *v294;
  void *v295[2];
  __int128 v296;
  llvm::UndefValue **v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  _BYTE v301[16];
  __int16 v302;
  uint64_t v303;

  v2 = a2;
  v303 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t)*(a2 - 8);
  v5 = (uint64_t)*(a2 - 4);
  v6 = *(_OWORD *)(a1 + 120);
  v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)v295 = *(_OWORD *)(a1 + 88);
  v296 = v7;
  v298 = *((_QWORD *)&v6 + 1);
  v297 = a2;
  ElementInst = llvm::SimplifyExtractElementInst((unsigned __int8 *)v4, v5, (llvm::Constant *)v295);
  if (ElementInst)
    goto LABEL_2;
  if (*(_BYTE *)(v5 + 16) == 16)
    v17 = (unint64_t *)v5;
  else
    v17 = 0;
  if (!v17)
    goto LABEL_172;
  v18 = (llvm::ConstantInt **)*v17;
  if ((*(_DWORD *)(*v17 + 8) & 0xFFFFFF00) != 0x4000)
  {
    v26 = v17 + 3;
    v27 = *((_DWORD *)v17 + 8);
    v28 = v27 > 0x40
        ? llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v17 + 3))
        : v27 + __clz(*v26) - 64;
    if (v27 - v28 <= 0x40)
    {
      v29 = *v18;
      if (v27 > 0x3F)
      {
        if (v27 == 64)
        {
          sub_1C5DD14E0((uint64_t)v295, (uint64_t)(v17 + 3));
          goto LABEL_29;
        }
        v30 = *(void **)*v26;
      }
      else
      {
        v30 = (void *)*v26;
      }
      LODWORD(v295[1]) = 64;
      v295[0] = v30;
LABEL_29:
      v31 = llvm::ConstantInt::get(v29, (llvm::LLVMContext *)v295, v10);
      if (LODWORD(v295[1]) >= 0x41 && v295[0])
        MEMORY[0x1CAA32F9C](v295[0], 0x1000C8000313F17);
      if (v31)
      {
        v32 = a1;
        v33 = (uint64_t)v2;
        v34 = 1;
        v35 = (uint64_t)v31;
        return (llvm::UndefValue **)sub_1C577E2C8(v32, v33, v34, v35);
      }
    }
  }
  v19 = (uint64_t)*(v2 - 8);
  v20 = *(unsigned int *)(*(_QWORD *)v19 + 32);
  v21 = *(unsigned __int8 *)(*(_QWORD *)v19 + 8);
  if (*(_BYTE *)(v4 + 16) == 84)
  {
    v22 = *(_QWORD *)(v4 - 32);
    if (v22)
    {
      if (!*(_BYTE *)(v22 + 16)
        && *(_QWORD *)(v22 + 24) == *(_QWORD *)(v4 + 72)
        && (*(_BYTE *)(v22 + 33) & 0x20) != 0
        && *(_DWORD *)(v22 + 36) == 130)
      {
        v23 = v17 + 3;
        v24 = *((_DWORD *)v17 + 8);
        if (v24 >= 0x41)
        {
          v25 = v24 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v17 + 3));
          if (v25 < 0x41 && *(_QWORD *)*v23 < v20)
            goto LABEL_36;
        }
        else if (*v23 < v20)
        {
          v25 = 64 - __clz(*v23);
LABEL_36:
          v36 = (llvm::ConstantInt **)*v2;
          v37 = *((_DWORD *)*v2 + 2);
          if (v25 <= v37 >> 8)
          {
            v61 = v37 >> 8;
            if (v24 >= v37 >> 8)
            {
              if (v24 > v61)
                llvm::APInt::trunc((llvm::APInt *)(v17 + 3), v61, (llvm::APInt *)v295);
              else
                sub_1C5DD14E0((uint64_t)v295, (uint64_t)(v17 + 3));
            }
            else
            {
              llvm::APInt::zext((llvm::APInt *)(v17 + 3), v61, (uint64_t)v295);
            }
            v38 = (llvm::Value *)llvm::ConstantInt::get(v36, (llvm::Type *)v295, v62);
            if (LODWORD(v295[1]) >= 0x41 && v295[0])
              MEMORY[0x1CAA32F9C](v295[0], 0x1000C8000313F17);
          }
          else
          {
            v38 = llvm::UndefValue::get(*v2, (llvm::Type *)v9);
          }
          v12 = a1;
          v13 = (llvm::ValueAsMetadata *)v2;
          v11 = v38;
          return sub_1C577F888(v12, v13, v11);
        }
      }
    }
  }
  if (v21 != 19)
  {
    v39 = v17 + 3;
    v40 = *((_DWORD *)v17 + 8);
    if (v40 >= 0x41)
    {
      if (v40 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v17 + 3)) > 0x40)
        return 0;
      v39 = (unint64_t *)*v39;
    }
    if (*v39 >= v20)
      return 0;
  }
  __src = 0;
  v294 = 0;
  v295[0] = &__src;
  if (!sub_1C57E819C((_QWORD **)v295, v19))
    goto LABEL_95;
  v41 = (uint64_t)*(v2 - 4);
  v299 = (unint64_t)&v294;
  if ((sub_1C4E7B154((_QWORD **)&v299, v41) & 1) == 0)
    goto LABEL_95;
  v42 = *(_QWORD *)__src;
  if ((*(_DWORD *)(*(_QWORD *)__src + 8) & 0xFE) != 0x12)
    goto LABEL_95;
  v43 = *(_QWORD *)*(v2 - 8);
  v44 = *(_DWORD *)(v43 + 32);
  v282 = *v2;
  v45 = **(unsigned __int8 **)(a1 + 80);
  v46 = *(_DWORD *)(v42 + 32);
  if (v46 == v44 && (*(_DWORD *)(*(_QWORD *)__src + 8) != 19) != (*(_BYTE *)(v43 + 8) == 19))
  {
    ScalarElement = llvm::findScalarElement((llvm *)__src, (llvm::Value *)v294);
    if (ScalarElement)
    {
      v48 = (unsigned __int8 *)ScalarElement;
      v49 = operator new(0x60uLL);
      v49[13] = v49[13] & 0x38000000 | 1;
      v15 = (uint64_t)(v49 + 8);
      *(_QWORD *)v49 = 0;
      *((_QWORD *)v49 + 1) = 0;
      *((_QWORD *)v49 + 2) = 0;
      *((_QWORD *)v49 + 3) = v49 + 8;
      LOWORD(v297) = 257;
      v50 = v295;
      v51 = (uint64_t)(v49 + 8);
      v52 = v48;
LABEL_50:
      llvm::BitCastInst::BitCastInst(v51, (uint64_t)v52, (uint64_t)v282, (uint64_t)v50, 0);
      return (llvm::UndefValue **)v15;
    }
  }
  if (v46 >= v44)
    goto LABEL_95;
  v292 = 0;
  v293 = 0;
  v295[1] = &v293;
  *(_QWORD *)&v296 = &v292;
  if (*((_BYTE *)__src + 16) != 90)
    goto LABEL_95;
  v53 = *((_DWORD *)__src + 5);
  if ((v53 & 0x40000000) != 0)
  {
    if (!*(_QWORD *)(*((_QWORD *)__src - 1) + 32))
      goto LABEL_95;
    v293 = *(unsigned __int8 **)(*((_QWORD *)__src - 1) + 32);
    v54 = (char *)*((_QWORD *)__src - 1);
  }
  else
  {
    v54 = (char *)__src - 32 * (v53 & 0x7FFFFFF);
    if (!*((_QWORD *)v54 + 4))
      goto LABEL_95;
    v293 = (unsigned __int8 *)*((_QWORD *)v54 + 4);
  }
  if (!sub_1C4E7B154((_QWORD **)&v296, *((_QWORD *)v54 + 8)))
    goto LABEL_95;
  v55 = v44 / v46;
  if ((unint64_t)v294 / v55 != v292)
    goto LABEL_95;
  v56 = (unint64_t)v294 % v55;
  v57 = v55 + ~v56;
  v58 = v45 ? v57 : v56;
  if ((*(_DWORD *)(v42 + 8) & 0xFE) == 0x12)
  {
    v59 = *(uint64_t **)(v42 + 16);
    v42 = *v59;
    v60 = *(unsigned __int8 *)(*v59 + 8);
  }
  else
  {
    v60 = *(_DWORD *)(v42 + 8);
  }
  v63 = v60 < 7;
  v64 = *((unsigned __int8 *)v282 + 8);
  v65 = v64 < 7;
  if (v60 <= 6 && v64 < 7)
    goto LABEL_95;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v42);
  v67 = llvm::Type::getPrimitiveSizeInBits(v282);
  if ((_DWORD)v9 == 1)
  v68 = *((_QWORD *)__src + 1);
  if (v68 && !*(_QWORD *)(v68 + 8))
  {
    v279 = v58;
    v75 = *((_QWORD *)*(v2 - 8) + 1);
    if (v75)
      v76 = *(_QWORD *)(v75 + 8) != 0;
    else
      v76 = 1;
    if (v76 && (v63 || v65))
      goto LABEL_95;
    if (!v63)
      goto LABEL_75;
    v261 = **(_QWORD ***)v293;
    LODWORD(v295[0]) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits <= 63)
    {
      if (PrimitiveSizeInBits <= 31)
      {
        switch(PrimitiveSizeInBits)
        {
          case 16:
            v262 = (_QWORD *)(*v261 + 1936);
            goto LABEL_430;
          case 8:
            v262 = (_QWORD *)(*v261 + 1912);
            goto LABEL_430;
          case 1:
            v262 = (_QWORD *)(*v261 + 1888);
            goto LABEL_430;
        }
      }
      else if (PrimitiveSizeInBits == 32)
      {
        v262 = (_QWORD *)(*v261 + 1960);
        goto LABEL_430;
      }
    }
    else
    {
      if (PrimitiveSizeInBits == 64)
      {
        v262 = (_QWORD *)(*v261 + 1984);
LABEL_430:
        v265 = *(uint64_t **)(a1 + 24);
        LOWORD(v297) = 257;
        v293 = sub_1C4773E38(v265, 49, v293, (uint64_t)v262, (uint64_t)v295);
        v58 = v279;
        goto LABEL_75;
      }
      if (PrimitiveSizeInBits == 128)
      {
        v262 = (_QWORD *)(*v261 + 2008);
        goto LABEL_430;
      }
    }
    v269 = sub_1C5270984(*v261 + 2168, v295);
    v262 = (_QWORD *)*((_QWORD *)v269 + 1);
    if (!v262)
    {
      v270 = v269;
      v262 = (_QWORD *)sub_1C484358C(*v261 + 2040, 24, 3);
      v271 = (int)v295[0];
      *v262 = v261;
      v262[2] = 0;
      v262[1] = (v271 << 8) | 0xDu;
      *((_QWORD *)v270 + 1) = v262;
    }
    goto LABEL_430;
  }
  if (!v63 && !v65)
  {
LABEL_75:
    v9 = (v58 * v67);
    if (!(_DWORD)v9)
      goto LABEL_79;
    v69 = *((_QWORD *)*(v2 - 8) + 1);
    if (v69 && !*(_QWORD *)(v69 + 8))
    {
      v70 = *(_QWORD *)(a1 + 24);
      v71 = v293;
      LOWORD(v297) = 257;
      v72 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v293, v9, 0);
      v293 = (unsigned __int8 *)sub_1C506ED1C(v70, (uint64_t)v71, (uint64_t)v72, (uint64_t)v295, 0);
LABEL_79:
      if (!v65)
      {
        v77 = operator new(0x60uLL);
        v15 = (uint64_t)(v77 + 8);
        v77[13] = v77[13] & 0x38000000 | 1;
        *(_QWORD *)v77 = 0;
        *((_QWORD *)v77 + 1) = 0;
        *((_QWORD *)v77 + 2) = 0;
        *((_QWORD *)v77 + 3) = v77 + 8;
        LOWORD(v297) = 257;
        llvm::TruncInst::TruncInst((uint64_t)(v77 + 8), (uint64_t)v293, (uint64_t)v282, (uint64_t)v295, 0);
        return (llvm::UndefValue **)v15;
      }
      v73 = **(_QWORD ***)v293;
      LODWORD(v295[0]) = v67;
      if (v67 <= 63)
      {
        if (v67 <= 31)
        {
          switch(v67)
          {
            case 16:
              v74 = (_QWORD *)(*v73 + 1936);
              goto LABEL_427;
            case 8:
              v74 = (_QWORD *)(*v73 + 1912);
              goto LABEL_427;
            case 1:
              v74 = (_QWORD *)(*v73 + 1888);
              goto LABEL_427;
          }
        }
        else if (v67 == 32)
        {
          v74 = (_QWORD *)(*v73 + 1960);
          goto LABEL_427;
        }
      }
      else
      {
        if (v67 == 64)
        {
          v74 = (_QWORD *)(*v73 + 1984);
LABEL_427:
          v263 = operator new(0x60uLL);
          v15 = (uint64_t)(v263 + 8);
          v263[13] = v263[13] & 0x38000000 | 1;
          *(_QWORD *)v263 = 0;
          *((_QWORD *)v263 + 1) = 0;
          *((_QWORD *)v263 + 2) = 0;
          *((_QWORD *)v263 + 3) = v263 + 8;
          v264 = *(uint64_t **)(a1 + 24);
          LOWORD(v297) = 257;
          v52 = sub_1C4773E38(v264, 38, v293, (uint64_t)v74, (uint64_t)v295);
          v302 = 257;
          v50 = (void **)&v299;
          v51 = v15;
          goto LABEL_50;
        }
        if (v67 == 128)
        {
          v74 = (_QWORD *)(*v73 + 2008);
          goto LABEL_427;
        }
      }
      v266 = sub_1C5270984(*v73 + 2168, v295);
      v74 = (_QWORD *)*((_QWORD *)v266 + 1);
      if (!v74)
      {
        v267 = v266;
        v74 = (_QWORD *)sub_1C484358C(*v73 + 2040, 24, 3);
        v268 = (int)v295[0];
        *v74 = v73;
        v74[2] = 0;
        v74[1] = (v268 << 8) | 0xDu;
        *((_QWORD *)v267 + 1) = v74;
      }
      goto LABEL_427;
    }
  }
LABEL_95:
  if (*(_BYTE *)(v4 + 16) != 83)
    goto LABEL_172;
  v299 = (unint64_t)v301;
  v300 = 0x200000000;
  v78 = *(_QWORD *)(v4 + 8);
  if (!v78)
    goto LABEL_168;
  v79 = 0;
  v80 = 0;
  do
  {
    v15 = *(_QWORD *)(v78 + 24);
    if (v15 && *(_BYTE *)(v15 + 16) == 89)
    {
      if (*(v2 - 4) != *(llvm::UndefValue **)(v15 - 32))
        goto LABEL_168;
      if (v79 >= HIDWORD(v300))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v299, (uint64_t)v301, v79 + 1, 8);
        v79 = v300;
      }
      *(_QWORD *)(v299 + 8 * v79) = v15;
      v79 = v300 + 1;
      LODWORD(v300) = v300 + 1;
      v15 = v80;
    }
    else if (v80)
    {
      goto LABEL_168;
    }
    v78 = *(_QWORD *)(v78 + 8);
    v80 = v15;
  }
  while (v78);
  if (!v15)
    goto LABEL_169;
  v81 = *(_QWORD *)(v15 + 8);
  if (!v81
    || *(_QWORD *)(v81 + 8)
    || *(_QWORD *)(v81 + 24) != v4
    || *(unsigned __int8 *)(v15 + 16) - 41 > 0x11
    || !sub_1C5857FE8(v15, (uint64_t)*(v2 - 4)))
  {
LABEL_168:
    v15 = 0;
    goto LABEL_169;
  }
  v82 = *v2;
  v283 = *(_DWORD *)(v4 + 20) & 0x7FFFFFF;
  LOWORD(v297) = 257;
  v83 = operator new(0x48uLL);
  v83[1] = v82;
  v84 = (llvm::Value *)(v83 + 1);
  *v83 = 0;
  v83[2] = 0;
  v83[3] = 0x4000000000000053;
  *((_OWORD *)v83 + 2) = 0u;
  *((_OWORD *)v83 + 3) = 0u;
  *((_DWORD *)v83 + 16) = 0;
  *((_DWORD *)v83 + 17) = v283;
  llvm::Value::setName((uint64_t ***)v83 + 1, (uint64_t)v295);
  v85 = *((unsigned int *)v83 + 17);
  v86 = operator new(40 * v85);
  *v83 = v86;
  if ((_DWORD)v85)
  {
    v87 = &v86[4 * v85];
    do
    {
      *v86 = 0;
      v86[1] = 0;
      v86[2] = 0;
      v86[3] = v84;
      v86 += 4;
    }
    while (v86 != v87);
  }
  v88 = sub_1C577E498(a1, v84, v4);
  v89 = v88;
  v90 = *(_DWORD *)(v4 + 20);
  v91 = v90 & 0x7FFFFFF;
  if ((v90 & 0x7FFFFFF) != 0)
  {
    v92 = 0;
    v276 = (_QWORD *)((char *)v88 + 8);
    v277 = v88;
    while (1)
    {
      if ((v90 & 0x40000000) != 0)
        v93 = *(_QWORD *)(v4 - 8);
      else
        v93 = v4 - 32 * v91;
      v94 = *(_QWORD *)(v93 + 32 * (_QWORD)v92);
      v280 = *(_QWORD *)(v93 + 32 * *(unsigned int *)(v4 + 60) + 8 * (_QWORD)v92);
      v284 = v92;
      v95 = (uint64_t)*(v2 - 4);
      if (v94 == v15)
      {
        v105 = *(uint64_t ****)(v15 - 64 + 32 * (*(_QWORD *)(v15 - 64) == v4));
        if ((*((_BYTE *)v105 + 23) & 0x10) != 0)
        {
          v106 = ***v105;
          v107 = *(_QWORD *)(v106 + 152);
          v108 = *(unsigned int *)(v106 + 168);
          if (!(_DWORD)v108)
            goto LABEL_152;
          LODWORD(v109) = (v108 - 1) & ((v105 >> 4) ^ (v105 >> 9));
          v110 = (uint64_t ****)(v107 + 16 * v109);
          v111 = *v110;
          if (*v110 != v105)
          {
            v112 = 1;
            while (v111 != (uint64_t ***)-4096)
            {
              v113 = v109 + v112++;
              v109 = v113 & (v108 - 1);
              v111 = *(uint64_t ****)(v107 + 16 * v109);
              if (v111 == v105)
              {
                v110 = (uint64_t ****)(v107 + 16 * v109);
                goto LABEL_153;
              }
            }
LABEL_152:
            v110 = (uint64_t ****)(v107 + 16 * v108);
          }
LABEL_153:
          v120 = v110[1];
          v123 = *v120;
          v122 = (char *)(v120 + 2);
          v121 = v123;
        }
        else
        {
          v121 = 0;
          v122 = &byte_1C871356D;
        }
        LOWORD(v297) = 773;
        v295[0] = v122;
        v295[1] = v121;
        *(_QWORD *)&v296 = ".Elt";
        v124 = operator new(0x80uLL);
        v124[21] = v124[21] & 0x38000000 | 2;
        v125 = (llvm::Value *)(v124 + 16);
        *(_QWORD *)v124 = 0;
        *((_QWORD *)v124 + 1) = 0;
        *((_QWORD *)v124 + 2) = 0;
        *((_QWORD *)v124 + 3) = v124 + 16;
        *((_QWORD *)v124 + 4) = 0;
        *((_QWORD *)v124 + 5) = 0;
        *((_QWORD *)v124 + 6) = 0;
        *((_QWORD *)v124 + 7) = v124 + 16;
        llvm::ExtractElementInst::ExtractElementInst((uint64_t)(v124 + 16), v105, v95, (uint64_t)v295, 0);
        v126 = sub_1C577E498(a1, v125, v15);
        LOBYTE(v125) = *(_BYTE *)(v15 + 16);
        LOWORD(v297) = 257;
        v127 = (char *)operator new(0x80uLL);
        *((_QWORD *)v127 + 5) = 0;
        *((_QWORD *)v127 + 6) = 0;
        *((_QWORD *)v127 + 4) = 0;
        v128 = (llvm::Value **)(v127 + 32);
        *((_QWORD *)v127 + 8) = *(_QWORD *)v277;
        v129 = (llvm::Value *)(v127 + 64);
        *((_QWORD *)v127 + 3) = v127 + 64;
        *((_QWORD *)v127 + 7) = v127 + 64;
        *((_QWORD *)v127 + 9) = 0;
        v127[80] = (char)v125;
        v89 = v277;
        v127[81] = 0;
        *((_WORD *)v127 + 41) = 0;
        *((_DWORD *)v127 + 21) = 2;
        *(_OWORD *)(v127 + 88) = 0u;
        *(_OWORD *)(v127 + 104) = 0u;
        *((_DWORD *)v127 + 30) = 0;
        *(_QWORD *)v127 = v277;
        v130 = *((_QWORD *)v277 + 1);
        *((_QWORD *)v127 + 1) = v130;
        if (v130)
          *(_QWORD *)(v130 + 16) = v127 + 8;
        *((_QWORD *)v127 + 2) = v276;
        *v276 = v127;
        if (*((_QWORD *)v127 + 4))
        {
          **((_QWORD **)v127 + 6) = *((_QWORD *)v127 + 5);
          v134 = *((_QWORD *)v127 + 5);
          if (v134)
            *(_QWORD *)(v134 + 16) = *((_QWORD *)v127 + 6);
        }
        *v128 = v126;
        if (v126)
        {
          v133 = *((_QWORD *)v126 + 1);
          v132 = (llvm::Value ***)((char *)v126 + 8);
          v131 = v133;
          *((_QWORD *)v127 + 5) = v133;
          if (v133)
            *(_QWORD *)(v131 + 16) = v127 + 40;
          *((_QWORD *)v127 + 6) = v132;
          *v132 = v128;
        }
        llvm::Value::setName((uint64_t ***)v127 + 8, (uint64_t)v295);
        llvm::Instruction::copyIRFlags((uint64_t)v129, v15, 1);
        v97 = sub_1C577E498(a1, v129, v15);
        v101 = v280;
        goto LABEL_162;
      }
      LOWORD(v297) = 257;
      v96 = operator new(0x80uLL);
      v96[21] = v96[21] & 0x38000000 | 2;
      v97 = (llvm::Value *)(v96 + 16);
      *(_QWORD *)v96 = 0;
      *((_QWORD *)v96 + 1) = 0;
      *((_QWORD *)v96 + 2) = 0;
      *((_QWORD *)v96 + 3) = v96 + 16;
      *((_QWORD *)v96 + 4) = 0;
      *((_QWORD *)v96 + 5) = 0;
      *((_QWORD *)v96 + 6) = 0;
      *((_QWORD *)v96 + 7) = v96 + 16;
      llvm::ExtractElementInst::ExtractElementInst((uint64_t)(v96 + 16), (_QWORD *)v94, v95, (uint64_t)v295, 0);
      v98 = *(unsigned __int8 *)(v94 + 16);
      v99 = v98 == 83 || v94 == 0;
      if (!v99 && v98 >= 0x1C)
        break;
      v89 = v277;
      v101 = v280;
      v102 = v280 + 40;
      v103 = *(_QWORD *)(v280 + 48);
      if (v103 != v280 + 40)
      {
        while (1)
        {
          v104 = v103 - 24;
          if (!v103)
            v104 = 0;
          if (*(_BYTE *)(v104 + 16) != 83)
            break;
          v103 = *(_QWORD *)(v103 + 8);
          if (v103 == v102)
            goto LABEL_148;
        }
        v115 = *(unsigned __int8 *)(v103 - 8) - 38;
        v116 = v115 > 0x38;
        v117 = (1 << v115) & 0x100060000000001;
        if (v116 || v117 == 0)
        {
          v102 = v103;
          goto LABEL_148;
        }
        v114 = (uint64_t *)(v103 + 8);
        goto LABEL_147;
      }
LABEL_148:
      if (v102)
        v119 = v102 - 24;
      else
        v119 = 0;
      sub_1C577E498(a1, v97, v119);
LABEL_162:
      sub_1C477667C(v89, (uint64_t)v97, v101);
      v92 = (llvm::Type *)((char *)v284 + 1);
      v90 = *(_DWORD *)(v4 + 20);
      v91 = v90 & 0x7FFFFFF;
      if ((unint64_t)v284 + 1 >= v91)
        goto LABEL_385;
    }
    v114 = (uint64_t *)(v94 + 32);
    v89 = v277;
    v101 = v280;
LABEL_147:
    v102 = *v114;
    goto LABEL_148;
  }
LABEL_385:
  v15 = (uint64_t)v2;
  if ((_DWORD)v300)
  {
    v235 = (llvm::ValueAsMetadata **)v299;
    v236 = 8 * v300;
    do
    {
      v237 = *v235++;
      sub_1C577F888(a1, v237, v89);
      v236 -= 8;
    }
    while (v236);
    v15 = (uint64_t)v2;
  }
LABEL_169:
  if ((_BYTE *)v299 != v301)
    free((void *)v299);
  if (v15)
    return (llvm::UndefValue **)v15;
LABEL_172:
  v135 = *(unsigned __int8 *)(v4 + 16);
  if (v4 && v135 == 40)
  {
    if (sub_1C5857FE8(v4, v5))
    {
      v136 = *(_QWORD *)(v4 - 32);
      v137 = *(uint64_t **)(a1 + 24);
      LOWORD(v297) = 257;
      v138 = (uint64_t *)sub_1C4772EE0(v137, v136, v5, (uint64_t)v295);
      v139 = *(_BYTE *)(v4 + 16) - 28;
      LOWORD(v297) = 257;
      v140 = llvm::UnaryOperator::Create(v139, v138, (uint64_t)v295, 0);
      v15 = v140;
LABEL_187:
      llvm::Instruction::copyIRFlags(v140, v4, 1);
      return (llvm::UndefValue **)v15;
    }
    v135 = *(unsigned __int8 *)(v4 + 16);
  }
  if (v135 >= 0x1C && v135 - 59 >= 0xFFFFFFEE)
  {
    if (sub_1C5857FE8(v4, v5))
    {
      v141 = *(_QWORD *)(v4 - 64);
      v142 = *(_QWORD *)(v4 - 32);
      v143 = *(uint64_t **)(a1 + 24);
      LOWORD(v297) = 257;
      v144 = sub_1C4772EE0(v143, v141, v5, (uint64_t)v295);
      v145 = *(uint64_t **)(a1 + 24);
      LOWORD(v297) = 257;
      v146 = sub_1C4772EE0(v145, v142, v5, (uint64_t)v295);
      LOBYTE(v142) = *(_BYTE *)(v4 + 16);
      LOWORD(v297) = 257;
      v147 = (char *)operator new(0x80uLL);
      *((_QWORD *)v147 + 6) = 0;
      *((_QWORD *)v147 + 5) = 0;
      v148 = v147 + 40;
      *((_QWORD *)v147 + 8) = *(_QWORD *)v144;
      v15 = (uint64_t)(v147 + 64);
      *((_QWORD *)v147 + 3) = v147 + 64;
      *((_QWORD *)v147 + 7) = v147 + 64;
      *((_QWORD *)v147 + 9) = 0;
      v147[80] = v142;
      v147[81] = 0;
      *((_WORD *)v147 + 41) = 0;
      *((_DWORD *)v147 + 21) = 2;
      *(_OWORD *)(v147 + 88) = 0u;
      *(_OWORD *)(v147 + 104) = 0u;
      *((_DWORD *)v147 + 30) = 0;
      *(_QWORD *)v147 = v144;
      v151 = *((_QWORD *)v144 + 1);
      v150 = v144 + 8;
      v149 = v151;
      *((_QWORD *)v147 + 1) = v151;
      if (v151)
        *(_QWORD *)(v149 + 16) = v147 + 8;
      *((_QWORD *)v147 + 2) = v150;
      *v150 = v147;
      *((_QWORD *)v147 + 4) = v146;
      if (v146)
      {
        v154 = *((_QWORD *)v146 + 1);
        v153 = v146 + 8;
        v152 = v154;
        *v148 = v154;
        if (v154)
          *(_QWORD *)(v152 + 16) = v148;
        *((_QWORD *)v147 + 6) = v153;
        *v153 = v147 + 32;
      }
      llvm::Value::setName((uint64_t ***)v147 + 8, (uint64_t)v295);
      v140 = v15;
      goto LABEL_187;
    }
    v135 = *(unsigned __int8 *)(v4 + 16);
  }
  if (v135 >= 0x1C && v135 - 83 >= 0xFFFFFFFE)
  {
    v155 = *(_QWORD *)(v4 - 64);
    if (!v155)
      goto LABEL_197;
    v156 = *(_QWORD *)(v4 - 32);
    if (!v156)
      goto LABEL_197;
    v157 = *(_WORD *)(v4 + 18);
    if (sub_1C5857FE8(v4, v5))
    {
      v158 = *(uint64_t **)(a1 + 24);
      LOWORD(v297) = 257;
      v159 = sub_1C4772EE0(v158, v155, v5, (uint64_t)v295);
      v160 = *(uint64_t **)(a1 + 24);
      LOWORD(v297) = 257;
      v161 = sub_1C4772EE0(v160, v156, v5, (uint64_t)v295);
      v162 = *(unsigned __int8 *)(v4 + 16) - 28;
      LOWORD(v297) = 257;
      return (llvm::UndefValue **)llvm::CmpInst::Create(v162, v157 & 0x3F, (uint64_t)v159, (uint64_t)v161, (uint64_t)v295, 0);
    }
    v135 = *(unsigned __int8 *)(v4 + 16);
  }
  if (v135 < 0x1C)
    goto LABEL_238;
LABEL_197:
  if (v135 == 62)
  {
    if (!v17)
      return 0;
    v172 = v17 + 3;
    if (*((_DWORD *)v17 + 8) >= 0x41u)
      v172 = (_QWORD *)*v172;
    if (*v172 >= (unint64_t)*(unsigned int *)(*(_QWORD *)v4 + 32))
      goto LABEL_239;
    v173 = *(_QWORD *)(v4 + 8);
    if (!v173 || *(_QWORD *)(v173 + 8))
      goto LABEL_239;
    v174 = *(_DWORD *)(v4 + 20);
    if ((v174 & 0x40000000) != 0)
    {
      v176 = *(uint64_t **)(v4 - 8);
      v175 = v174 & 0x7FFFFFF;
    }
    else
    {
      v175 = v174 & 0x7FFFFFF;
      v176 = (uint64_t *)(v4 - 32 * v175);
    }
    if (!v175)
      goto LABEL_239;
    v181 = 0;
    v182 = 32 * v175;
    do
    {
      v183 = *v176;
      v176 += 4;
      if ((*(_DWORD *)(*(_QWORD *)v183 + 8) & 0xFE) == 0x12)
        ++v181;
      v182 -= 32;
    }
    while (v182);
    if (v181 != 1)
    {
LABEL_238:
      if (!v17)
        return 0;
LABEL_239:
      v188 = *(_QWORD *)*(v2 - 8);
      v189 = *(_DWORD *)(v188 + 32);
      if (*(_BYTE *)(v188 + 8) != 19 && v189 != 1)
      {
        v191 = *(_QWORD *)(v4 + 8);
        if (v191 && !*(_QWORD *)(v191 + 8))
        {
          LODWORD(v295[1]) = *(_DWORD *)(v188 + 32);
          if (v189 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)v295, 0, 0);
            LODWORD(v300) = v189;
            llvm::APInt::initSlowCase((llvm::APInt *)&v299, 0, 0);
          }
          else
          {
            v295[0] = 0;
            LODWORD(v300) = v189;
            v299 = 0;
          }
          v223 = v17 + 3;
          if (*((_DWORD *)v17 + 8) >= 0x41u)
            v223 = (_QWORD *)*v223;
          v224 = (_QWORD *)*v223;
          v225 = 1 << *v223;
          v226 = v300;
          if (v300 > 0x40)
          {
            v227 = (llvm::Value **)v299;
            *(_QWORD *)(v299 + 8 * (v224 >> 6)) |= v225;
            v291 = v226;
            v290 = (void *)operator new[]();
            memcpy(v290, v227, ((unint64_t)(v226 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v227 = (llvm::Value **)(v299 | v225);
            v291 = v300;
            v290 = (void *)(v299 | v225);
          }
          v229 = sub_1C58553C4(a1, (uint64_t ***)v4, (unsigned int *)&v290, (unsigned int *)v295, 0, 0);
          if (v291 >= 0x41 && v290)
            MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
          if (v229)
            v2 = (llvm::UndefValue **)sub_1C577E2C8(a1, (uint64_t)v2, 0, v229);
          if (v226 >= 0x41)
            MEMORY[0x1CAA32F9C](v227, 0x1000C8000313F17);
          if (LODWORD(v295[1]) >= 0x41 && v295[0])
            MEMORY[0x1CAA32F9C](v295[0], 0x1000C8000313F17);
          if (!v229)
            return 0;
          return v2;
        }
        v192 = *(_DWORD *)(*(_QWORD *)v4 + 32);
        v289 = v192;
        if (v192 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
          v191 = *(_QWORD *)(v4 + 8);
        }
        else
        {
          __src = 0;
        }
        v281 = v189;
        if (!v191)
        {
          v193 = v289;
LABEL_339:
          if (!v193)
            goto LABEL_378;
LABEL_340:
          if (v193 > 0x40)
          {
LABEL_342:
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__src) == v193)
              goto LABEL_378;
            goto LABEL_358;
          }
          v220 = (unint64_t)__src;
          v230 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v193;
LABEL_357:
          if (v220 == v230)
            goto LABEL_378;
LABEL_358:
          LODWORD(v295[1]) = v281;
          if (v281 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)v295, 0, 0);
            v193 = v289;
          }
          else
          {
            v295[0] = 0;
          }
          v287 = v193;
          if (v193 > 0x40)
          {
            v286 = (void *)operator new[]();
            memcpy(v286, __src, (((unint64_t)v193 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v286 = __src;
          }
          v231 = (llvm::Value *)sub_1C58553C4(a1, (uint64_t ***)v4, (unsigned int *)&v286, (unsigned int *)v295, 0, 1);
          if (v287 >= 0x41 && v286)
            MEMORY[0x1CAA32F9C](v286, 0x1000C8000313F17);
          if (v231)
            v232 = v231 == (llvm::Value *)v4;
          else
            v232 = 1;
          v233 = v232;
          if (!v232)
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v4, v231, (llvm::Value *)1);
          if (LODWORD(v295[1]) >= 0x41 && v295[0])
            MEMORY[0x1CAA32F9C](v295[0], 0x1000C8000313F17);
          if (!v233)
          {
            v234 = 0;
            goto LABEL_379;
          }
LABEL_378:
          v234 = 1;
LABEL_379:
          if (v289 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          if ((v234 & 1) != 0)
            return 0;
          return v2;
        }
        v278 = v192;
        v193 = v289;
        v285 = (llvm::Type *)(0xFFFFFFFFFFFFFFFFLL >> -(uint64_t)v289);
        v194 = (((unint64_t)v289 + 63) >> 3) & 0x3FFFFFF8;
        while (1)
        {
          v195 = *(_QWORD *)(v191 + 24);
          v196 = *(unsigned __int8 *)(v195 + 16);
          if (v195)
            v197 = v196 >= 0x1C;
          else
            v197 = 0;
          if (!v197)
          {
            LODWORD(v295[1]) = v278;
            if (v278 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)v295, -1, 1);
            }
            else
            {
              if (v278)
                v228 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v278);
              else
                v228 = 0;
              v295[0] = v228;
            }
            if (v289 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            __src = v295[0];
            v193 = v295[1];
            v289 = v295[1];
            goto LABEL_339;
          }
          v198 = *(unsigned int *)(*(_QWORD *)v4 + 32);
          LODWORD(v300) = v198;
          if (v198 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v299, -1, 1);
            v196 = *(unsigned __int8 *)(v195 + 16);
          }
          else
          {
            v199 = (llvm::Value **)(0xFFFFFFFFFFFFFFFFLL >> -(char)v198);
            if (!(_DWORD)v198)
              v199 = 0;
            v299 = (unint64_t)v199;
          }
          if (v196 == 91)
            break;
          if (v196 == 89)
          {
            v200 = *(_QWORD *)(v195 - 32);
            if (v200 && *(_BYTE *)(v200 + 16) == 16)
            {
              v202 = (_QWORD **)(v200 + 24);
              v203 = *(_DWORD *)(v200 + 32);
              if (v203 >= 0x41)
              {
                if (v203 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v200 + 24)) >= 0x41)
                  goto LABEL_303;
                v204 = (_QWORD *)**v202;
              }
              else
              {
                v204 = *v202;
              }
              if ((unint64_t)v204 < v198)
              {
                LODWORD(v295[1]) = v198;
                if (v198 <= 0x40)
                {
                  v216 = 0;
                  v217 = 1 << (char)v204;
                  goto LABEL_298;
                }
                llvm::APInt::initSlowCase((llvm::APInt *)v295, 0, 0);
                LODWORD(v198) = v295[1];
                v217 = 1 << (char)v204;
                if (LODWORD(v295[1]) > 0x40)
                {
                  v218 = (llvm::Value **)v295[0];
                  *((_QWORD *)v295[0] + (v204 >> 6)) |= v217;
                }
                else
                {
                  v216 = (unint64_t)v295[0];
LABEL_298:
                  v218 = (llvm::Value **)(v217 | v216);
                }
                if (v300 >= 0x41 && v299)
                  MEMORY[0x1CAA32F9C](v299, 0x1000C8000313F17);
                v299 = (unint64_t)v218;
                LODWORD(v300) = v198;
              }
            }
          }
LABEL_303:
          if (v193 > 0x40)
          {
            v221 = 0;
            v220 = (unint64_t)__src;
            v219 = (llvm::Value **)v299;
            do
            {
              *(_QWORD *)(v220 + v221) |= (unint64_t)v219[v221 / 8];
              v221 += 8;
            }
            while (v194 != v221);
          }
          else
          {
            v219 = (llvm::Value **)v299;
            v220 = (unint64_t)__src | v299;
            __src = (void *)((unint64_t)__src | v299);
          }
          if (v300 >= 0x41 && v219 != 0)
            MEMORY[0x1CAA32F9C]();
          if (!v193)
            goto LABEL_378;
          if (v193 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__src) == v193)
              goto LABEL_342;
          }
          else if ((llvm::Type *)v220 == v285)
          {
            v230 = (unint64_t)v285;
            goto LABEL_357;
          }
          v191 = *(_QWORD *)(v191 + 8);
          if (!v191)
            goto LABEL_340;
        }
        v205 = *(unsigned int *)(*(_QWORD *)v195 + 32);
        LODWORD(v295[1]) = v198;
        if (v198 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)v295, 0, 0);
        else
          v295[0] = 0;
        if (v300 >= 0x41 && v299)
          MEMORY[0x1CAA32F9C](v299, 0x1000C8000313F17);
        v206 = (unint64_t)v295[0];
        v299 = (unint64_t)v295[0];
        v207 = v295[1];
        LODWORD(v300) = v295[1];
        if (!(_DWORD)v205)
          goto LABEL_303;
        v208 = *(unsigned int **)(v195 + 64);
        while (1)
        {
          v210 = *v208++;
          v209 = v210;
          if (v210 < 2 * (int)v198)
          {
            if (v209 < v198 && *(_QWORD *)(v195 - 64) == v4)
            {
              v215 = 1 << v209;
              if (v207 >= 0x41)
              {
                v206 = v299;
                *(_QWORD *)(v299 + ((v209 >> 3) & 0x1FFFFFF8)) |= v215;
                goto LABEL_291;
              }
              v206 = v299 | v215;
            }
            else
            {
              if (v209 < v198 || *(_QWORD *)(v195 - 32) != v4)
                goto LABEL_291;
              v213 = v209 - v198;
              v214 = 1 << (v209 - v198);
              if (v207 > 0x40)
              {
                *(_QWORD *)(v206 + 8 * (v213 >> 6)) |= v214;
                goto LABEL_291;
              }
              v206 |= v214;
            }
            v299 = v206;
          }
LABEL_291:
          if (!--v205)
            goto LABEL_303;
        }
      }
      return 0;
    }
    v184 = *(uint64_t **)(v4 - 32 * v175);
    if ((*(_DWORD *)(*v184 + 8) & 0xFE) == 0x12)
    {
      v185 = *(uint64_t **)(a1 + 24);
      LOWORD(v297) = 257;
      v184 = (uint64_t *)sub_1C4772EE0(v185, (uint64_t)v184, (uint64_t)v17, (uint64_t)v295);
      LODWORD(v175) = *(_DWORD *)(v4 + 20) & 0x7FFFFFF;
    }
    v295[0] = &v296;
    v295[1] = (void *)0x600000000;
    if ((_DWORD)v175 == 1)
    {
      v186 = 0;
      v187 = (llvm::Value *)&v296;
    }
    else
    {
      v186 = 0;
      v238 = 1;
      do
      {
        v239 = *(_QWORD *)(v4 - 32 * v175 + 32 * v238);
        if ((*(_DWORD *)(*(_QWORD *)v239 + 8) & 0xFE) == 0x12)
        {
          v240 = *(uint64_t **)(a1 + 24);
          v302 = 257;
          v241 = sub_1C4772EE0(v240, v239, (uint64_t)v17, (uint64_t)&v299);
          v242 = LODWORD(v295[1]);
          if (LODWORD(v295[1]) >= (unint64_t)HIDWORD(v295[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v295, (uint64_t)&v296, LODWORD(v295[1]) + 1, 8);
            v242 = LODWORD(v295[1]);
          }
          *((_QWORD *)v295[0] + v242) = v241;
        }
        else
        {
          if (v186 >= HIDWORD(v295[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v295, (uint64_t)&v296, v186 + 1, 8);
            v186 = v295[1];
          }
          *((_QWORD *)v295[0] + v186) = v239;
        }
        v186 = ++LODWORD(v295[1]);
        ++v238;
        LODWORD(v175) = *(_DWORD *)(v4 + 20) & 0x7FFFFFF;
      }
      while (v238 != (_DWORD)v175);
      v187 = (llvm::Value *)v295[0];
    }
    TypeAtIndex = *(llvm::GetElementPtrInst **)(v4 + 64);
    v244 = v186;
    v245 = v186 + 1;
    v246 = v186 == -1;
    v302 = 257;
    v247 = operator new(32 * v245 + 80);
    v15 = (uint64_t)&v247[4 * v245];
    *(_DWORD *)(v15 + 20) = *(_DWORD *)(v15 + 20) & 0x38000000 | v245 & 0x7FFFFFF;
    if (!v246)
    {
      do
      {
        *v247 = 0;
        v247[1] = 0;
        v247[2] = 0;
        v247[3] = v15;
        v247 += 4;
      }
      while (v247 != (_QWORD *)v15);
    }
    sub_1C4774650(TypeAtIndex, v184, v187, v244);
    *(_QWORD *)v15 = v249;
    *(_QWORD *)(v15 + 8) = 0;
    v250 = *(_DWORD *)(v15 + 20) & 0xC0000000 | v245 & 0x7FFFFFF;
    *(_DWORD *)(v15 + 16) = 62;
    *(_DWORD *)(v15 + 20) = v250;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_DWORD *)(v15 + 56) = 0;
    *(_QWORD *)(v15 + 64) = TypeAtIndex;
    if ((_DWORD)v244)
    {
      v251 = (llvm::Type **)((char *)v187 + 8);
      v252 = 8 * v244 - 8;
      do
      {
        if (!v252)
          break;
        v253 = *v251++;
        TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v253, v248);
        v252 -= 8;
      }
      while (TypeAtIndex);
      v254 = *(_DWORD *)(v15 + 20) & 0x7FFFFFF;
    }
    else
    {
      v254 = 1;
    }
    *(_QWORD *)(v15 + 72) = TypeAtIndex;
    v255 = -v254;
    v256 = (uint64_t **)(v15 - 32 * v254);
    if (*v256)
    {
      v272 = v15 + 32 * v255;
      v274 = *(_QWORD **)(v272 + 16);
      v273 = (_QWORD *)(v272 + 16);
      *v274 = *(v273 - 1);
      v275 = *(v273 - 1);
      if (v275)
        *(_QWORD *)(v275 + 16) = *v273;
    }
    *v256 = v184;
    if (v184)
    {
      v259 = v184[1];
      v258 = (uint64_t ***)(v184 + 1);
      v257 = v259;
      v260 = v15 + 32 * v255;
      *(_QWORD *)(v260 + 8) = v259;
      if (v259)
        *(_QWORD *)(v257 + 16) = v260 + 8;
      *(_QWORD *)(v260 + 16) = v258;
      *v258 = v256;
    }
    sub_1C5382FD4((uint64_t)&__src, (uint64_t *)v187, (uint64_t *)v187 + v244, v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) + 32);
    llvm::Value::setName((uint64_t ***)v15, (uint64_t)&v299);
    *(_BYTE *)(v15 + 17) = *(_BYTE *)(v15 + 17) & 0xFD | *(_BYTE *)(v4 + 17) & 2;
    if (v295[0] != &v296)
      free(v295[0]);
  }
  else
  {
    if (v135 != 91)
    {
      if (v135 == 90)
      {
        v163 = *(_QWORD *)(v4 - 32);
        if (v163 == v5)
        {
          v11 = *(llvm::Value **)(v4 - 64);
          goto LABEL_3;
        }
        if (v17 && *(unsigned __int8 *)(v163 + 16) <= 0x14u)
        {
          v35 = *(_QWORD *)(v4 - 96);
          v32 = a1;
          v33 = (uint64_t)v2;
          v34 = 0;
          return (llvm::UndefValue **)sub_1C577E2C8(v32, v33, v34, v35);
        }
      }
      else if (v135 - 79 >= 0xFFFFFFF3)
      {
        v177 = *(_QWORD *)(v4 + 8);
        if (v177)
        {
          if (v135 != 77 && !*(_QWORD *)(v177 + 8))
          {
            v178 = *(uint64_t **)(a1 + 24);
            v179 = *(_QWORD *)(v4 - 32);
            LOWORD(v297) = 257;
            sub_1C4772EE0(v178, v179, v5, (uint64_t)v295);
            v180 = *(unsigned __int8 *)(v4 + 16) - 28;
            LOWORD(v297) = 257;
            llvm::CastInst::Create(v180);
            return (llvm::UndefValue **)v14;
          }
        }
      }
      goto LABEL_238;
    }
    if (*(_BYTE *)(*(_QWORD *)v4 + 8) != 18 || *(_BYTE *)(v5 + 16) != 16)
      goto LABEL_238;
    v164 = (unsigned int *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u)
      v164 = *(unsigned int **)v164;
    v165 = *(_DWORD *)(*(_QWORD *)(v4 + 64) + 4 * *v164);
    if (v165 < 0)
    {
      ElementInst = llvm::UndefValue::get(*v2, (llvm::Type *)v9);
LABEL_2:
      v11 = ElementInst;
LABEL_3:
      v12 = a1;
      v13 = (llvm::ValueAsMetadata *)v2;
      return sub_1C577F888(v12, v13, v11);
    }
    v166 = *(_QWORD **)(v4 - 64);
    v167 = *(_DWORD *)(*v166 + 32);
    v168 = __OFSUB__(v165, v167);
    v169 = v165 - v167;
    if (v169 < 0 == v168)
    {
      v166 = *(_QWORD **)(v4 - 32);
      v165 = v169;
    }
    v170 = llvm::ConstantInt::get((llvm::ConstantInt *)(**(_QWORD **)*v2 + 1960), v165, 0);
    LOWORD(v297) = 257;
    v171 = operator new(0x80uLL);
    v171[21] = v171[21] & 0x38000000 | 2;
    v15 = (uint64_t)(v171 + 16);
    *(_QWORD *)v171 = 0;
    *((_QWORD *)v171 + 1) = 0;
    *((_QWORD *)v171 + 2) = 0;
    *((_QWORD *)v171 + 3) = v171 + 16;
    *((_QWORD *)v171 + 4) = 0;
    *((_QWORD *)v171 + 5) = 0;
    *((_QWORD *)v171 + 6) = 0;
    *((_QWORD *)v171 + 7) = v171 + 16;
    llvm::ExtractElementInst::ExtractElementInst((uint64_t)(v171 + 16), v166, (uint64_t)v170, (uint64_t)v295, 0);
  }
  return (llvm::UndefValue **)v15;
}

llvm::UndefValue **sub_1C5859EF0(uint64_t a1, llvm::ValueAsMetadata *this)
{
  uint64_t v4;
  unsigned int v5;
  llvm::UndefValue **v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  int v10;
  llvm::ValueAsMetadata *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  llvm::Value *v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  llvm::Value *v29;
  int v30;
  const llvm::BasicBlock *v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t i;
  unsigned __int8 **v46;
  unsigned __int8 *v47;
  _QWORD *v48;
  const llvm::BasicBlock *v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  _QWORD *j;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  llvm::ValueAsMetadata *v74;
  int v75;
  int v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  llvm::PHINode *v81;
  unsigned __int8 **v82;
  uint64_t v83;
  unsigned __int8 *v84;
  _QWORD *v85;
  _QWORD *v86;
  unsigned __int8 *v87;
  char *v88;
  _QWORD *v89;
  unsigned __int8 **v90;
  char v91;
  unsigned __int8 *v92;
  uint64_t v93;
  const char *v94;
  __int16 v95;
  _QWORD *v96;
  __int128 v97;
  unsigned __int8 *v98;
  _QWORD v99[9];
  void *v100;
  uint64_t v101;
  _BYTE v102[32];
  unsigned __int8 *v103;
  unsigned int v104;
  int v105;
  _QWORD v106[6];

  v106[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 8) == 16)
    v5 = *(_DWORD *)(v4 + 12);
  else
    v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 2)
    return 0;
  v103 = (unsigned __int8 *)v106;
  v105 = 2;
  if (v5)
    bzero(v106, 16 * v5);
  v104 = v5;
  v7 = atomic_load((unsigned __int8 *)&qword_1ED811168);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED811168))
  {
    dword_1ED811160 = 2 * v5;
    __cxa_guard_release(&qword_1ED811168);
  }
  v8 = dword_1ED811160;
  v9 = v104;
  if (dword_1ED811160 >= 1)
  {
    if (v104)
    {
      v10 = 0;
      v11 = this;
      while (1)
      {
        v12 = v103 + 8;
        v13 = 16 * v9;
        while (1)
        {
          v14 = *v12;
          v12 += 16;
          if (!v14)
            break;
          v13 -= 16;
          if (!v13)
            goto LABEL_27;
        }
        v15 = *((_QWORD *)v11 - 4);
        v16 = v15 && *(unsigned __int8 *)(v15 + 16) >= 0x1Cu;
        if (!v16 || *((_DWORD *)v11 + 18) != 1)
          break;
        v17 = (char *)&v103[16 * **((unsigned int **)v11 + 8)];
        if (!v17[8])
        {
          *(_QWORD *)v17 = v15;
          v17[8] = 1;
        }
        if (++v10 < v8)
        {
          v11 = (llvm::ValueAsMetadata *)*((_QWORD *)v11 - 8);
          if (v11)
          {
            if (*((_BYTE *)v11 + 16) == 93)
              continue;
          }
        }
        goto LABEL_27;
      }
    }
LABEL_73:
    v6 = 0;
    goto LABEL_74;
  }
LABEL_27:
  if (!(_DWORD)v9)
    goto LABEL_73;
  v18 = v103;
  v19 = v103 + 8;
  v20 = 16 * v9;
  v21 = v20;
  do
  {
    v22 = *v19;
    v19 += 16;
    if (!v22)
      goto LABEL_73;
    v21 -= 16;
  }
  while (v21);
  v23 = 0;
  v24 = 0;
  v25 = -1;
  v26 = v20;
  v27 = v103;
  do
  {
    v28 = *(_QWORD *)v27;
    if (!*(_QWORD *)v27 || *(_BYTE *)(v28 + 16) != 92)
    {
      v31 = 0;
      do
      {
        v32 = v31 != *(const llvm::BasicBlock **)(*(_QWORD *)v18 + 40);
        if (!v31)
          v32 = 7;
        if (v32 != 7 && v32 != 0)
          goto LABEL_73;
        if (!v31)
          v31 = *(const llvm::BasicBlock **)(*(_QWORD *)v18 + 40);
        v18 += 16;
        v20 -= 16;
      }
      while (v20);
      if (!v31)
        goto LABEL_73;
      v34 = *((_QWORD *)v31 + 1);
      if (!v34)
        goto LABEL_73;
      v35 = *((_QWORD *)v31 + 1);
      while (1)
      {
        v36 = *(_QWORD *)(v35 + 24);
        v37 = *(unsigned __int8 *)(v36 + 16);
        v38 = v36 && v37 >= 0x1C;
        if (v38 && v37 - 29 <= 0xA)
          break;
        v6 = 0;
        v35 = *(_QWORD *)(v35 + 8);
        if (!v35)
          goto LABEL_74;
      }
      v100 = v102;
      v101 = 0x400000000;
      while (1)
      {
        v41 = *(_QWORD *)(v34 + 24);
        v42 = *(unsigned __int8 *)(v41 + 16);
        v43 = v41 && v42 >= 0x1C;
        if (v43 && v42 - 29 <= 0xA)
          break;
        v34 = *(_QWORD *)(v34 + 8);
        if (!v34)
        {
          LODWORD(v61) = 0;
          goto LABEL_87;
        }
      }
      v60 = 0;
      LODWORD(v61) = 0;
LABEL_117:
      v62 = *(_QWORD *)(v41 + 40);
      if (v61 >= HIDWORD(v101))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, (uint64_t)v102, v60 + 1, 8);
        *((_QWORD *)v100 + v101) = v62;
        LODWORD(v61) = v101;
      }
      else
      {
        *((_QWORD *)v100 + v60) = v62;
      }
      v61 = (v61 + 1);
      LODWORD(v101) = v61;
      while (1)
      {
        v34 = *(_QWORD *)(v34 + 8);
        if (!v34)
          break;
        v41 = *(_QWORD *)(v34 + 24);
        v63 = *(unsigned __int8 *)(v41 + 16);
        if (v41)
          v64 = v63 >= 0x1C;
        else
          v64 = 0;
        if (v64 && v63 - 29 <= 0xA)
        {
          v6 = 0;
          v60 = v61;
          if (v61 < 0x40)
            goto LABEL_117;
          goto LABEL_158;
        }
      }
LABEL_87:
      v99[0] = 1;
      for (i = 1; i != 9; i += 2)
        v99[i] = -4096;
      if ((_DWORD)v61)
      {
        v46 = (unsigned __int8 **)v100;
        v88 = (char *)v100 + 8 * v61;
        while (1)
        {
          v90 = v46;
          v47 = *v46;
          v92 = v47;
          v93 = 0;
          v96 = 0;
          if (!sub_1C4E85724((uint64_t)v99, (uint64_t)v47, &v96))
            break;
LABEL_110:
          v46 = v90 + 1;
          if (v90 + 1 == (unsigned __int8 **)v88)
            goto LABEL_111;
        }
        v48 = sub_1C585F5B8(v99, (uint64_t *)&v92, v96);
        *v48 = v47;
        v48[1] = 0;
        v89 = v48;
        if (v104)
        {
          v49 = (const llvm::BasicBlock *)v47;
          v91 = 0;
          v50 = 0;
          v51 = (uint64_t *)v103;
          v52 = 16 * v104;
          v53 = -1;
          while (1)
          {
            v54 = llvm::Value::DoPHITranslation(*v51, v31, v49);
            if (*(_BYTE *)(v54 + 16) != 92)
              break;
            v55 = *(_QWORD **)(v54 - 32);
            if (*v55 != v4)
              break;
            if (*(_DWORD *)(v54 + 72) != 1)
              break;
            if (++v53 != **(_DWORD **)(v54 + 64))
              break;
            if (v50)
              v56 = 1;
            else
              v56 = 2;
            if (!v91)
              v56 = 0;
            if (v56 == 1)
            {
              if (v50 != v55)
                break;
            }
            else if (!v56)
            {
              v50 = *(_QWORD **)(v54 - 32);
              v91 = 1;
            }
            v51 += 2;
            v52 -= 16;
            if (!v52)
            {
              if (v50)
              {
                v89[1] = v50;
                goto LABEL_110;
              }
              break;
            }
          }
          v6 = 0;
        }
        else
        {
          v6 = 0;
        }
LABEL_156:
        if ((v99[0] & 1) == 0)
          MEMORY[0x1CAA32FB4](v99[1], 8);
LABEL_158:
        if (v100 != v102)
          free(v100);
        goto LABEL_74;
      }
LABEL_111:
      v96 = *(_QWORD **)(a1 + 24);
      v97 = *((_OWORD *)v96 + 3);
      llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v96, &v98);
      v57 = *(_QWORD *)(a1 + 24);
      for (j = (_QWORD *)*((_QWORD *)v31 + 6); ; j = (_QWORD *)j[1])
      {
        v59 = j - 3;
        if (!j)
          v59 = 0;
        if (*((_BYTE *)v59 + 16) != 83)
          break;
      }
      *(_QWORD *)(v57 + 48) = j[2];
      *(_QWORD *)(v57 + 56) = j;
      v66 = (unsigned __int8 *)j[3];
      v92 = v66;
      if (v66)
      {
        llvm::MetadataTracking::track((uint64_t)&v92, v66, 2);
        v67 = v92;
      }
      else
      {
        v67 = 0;
      }
      sub_1C4774EF4(v57, 0, (uint64_t)v67);
      if (v92)
        llvm::MetadataTracking::untrack((uint64_t)&v92, v92);
      v68 = *(_QWORD *)(a1 + 24);
      if ((*((_BYTE *)this + 23) & 0x10) == 0)
      {
        v79 = 0;
        v78 = (unsigned __int8 *)&byte_1C871356D;
        goto LABEL_144;
      }
      v69 = ***(_QWORD ***)this;
      v70 = *(_QWORD *)(v69 + 152);
      v71 = *(unsigned int *)(v69 + 168);
      if ((_DWORD)v71)
      {
        LODWORD(v72) = (v71 - 1) & ((this >> 4) ^ (this >> 9));
        v73 = v70 + 16 * v72;
        v74 = *(llvm::ValueAsMetadata **)v73;
        if (*(llvm::ValueAsMetadata **)v73 == this)
        {
LABEL_143:
          v77 = *(_QWORD **)(v73 + 8);
          v80 = *v77;
          v78 = (unsigned __int8 *)(v77 + 2);
          v79 = v80;
LABEL_144:
          v95 = 773;
          v92 = v78;
          v93 = v79;
          v94 = ".merged";
          v81 = (llvm::PHINode *)sub_1C4867E94(v68, v4, v101, (uint64_t)&v92);
          if ((_DWORD)v101)
          {
            v82 = (unsigned __int8 **)v100;
            v83 = 8 * v101;
            do
            {
              v84 = *v82++;
              v92 = v84;
              v85 = sub_1C62A8E94(v99, (uint64_t *)&v92);
              sub_1C477667C(v81, v85[1], (uint64_t)v84);
              v83 -= 8;
            }
            while (v83);
          }
          v6 = sub_1C577F888(a1, this, v81);
          v86 = v96;
          if ((_QWORD)v97)
          {
            sub_1C4D8AE2C((uint64_t)v96, v97, *((uint64_t *)&v97 + 1));
            v86 = v96;
          }
          else
          {
            v96[6] = 0;
            v86[7] = 0;
          }
          v92 = v98;
          if (v98)
          {
            llvm::MetadataTracking::track((uint64_t)&v92, v98, 2);
            v87 = v92;
          }
          else
          {
            v87 = 0;
          }
          sub_1C4774EF4((uint64_t)v86, 0, (uint64_t)v87);
          if (v92)
            llvm::MetadataTracking::untrack((uint64_t)&v92, v92);
          if (v98)
            llvm::MetadataTracking::untrack((uint64_t)&v98, v98);
          goto LABEL_156;
        }
        v75 = 1;
        while (v74 != (llvm::ValueAsMetadata *)-4096)
        {
          v76 = v72 + v75++;
          v72 = v76 & (v71 - 1);
          v74 = *(llvm::ValueAsMetadata **)(v70 + 16 * v72);
          if (v74 == this)
          {
            v73 = v70 + 16 * v72;
            goto LABEL_143;
          }
        }
      }
      v73 = v70 + 16 * v71;
      goto LABEL_143;
    }
    v29 = *(llvm::Value **)(v28 - 32);
    if (*(_QWORD *)v29 != v4)
      goto LABEL_73;
    if (*(_DWORD *)(v28 + 72) != 1)
      goto LABEL_73;
    if (++v25 != **(_DWORD **)(v28 + 64))
      goto LABEL_73;
    if (v24)
      v30 = 1;
    else
      v30 = 2;
    if (!v23)
      v30 = 0;
    if (v30 == 1)
    {
      if (v24 != v29)
        goto LABEL_73;
    }
    else if (!v30)
    {
      v24 = v29;
      v23 = 1;
    }
    v27 += 16;
    v26 -= 16;
  }
  while (v26);
  if (!v24)
    goto LABEL_73;
  v6 = sub_1C577F888(a1, this, v24);
LABEL_74:
  if (v103 != (unsigned __int8 *)v106)
    free(v103);
  return v6;
}

llvm::UndefValue **sub_1C585A668(uint64_t a1, llvm::ValueAsMetadata *this)
{
  uint64_t v4;
  unsigned int v5;
  const void *v6;
  uint64_t v7;
  llvm::ValueAsMetadata *v8;
  uint64_t v10;
  int v11;
  llvm::ValueAsMetadata **v12;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = 0;
    v6 = (const void *)*((_QWORD *)this + 8);
    v7 = *((unsigned int *)this + 18);
    v8 = this;
    do
    {
      if (*(_QWORD *)(v4 + 8) || v5 > 9)
        break;
      v10 = *(_QWORD *)(v4 + 24);
      if (!v10 || *(_BYTE *)(v10 + 16) != 93)
        break;
      v11 = *(_DWORD *)(v10 + 20);
      v12 = (v11 & 0x40000000) != 0
          ? *(llvm::ValueAsMetadata ***)(v10 - 8)
          : (llvm::ValueAsMetadata **)(v10 - 32 * (v11 & 0x7FFFFFF));
      if (*v12 != v8)
        break;
      if (*(_DWORD *)(v10 + 72) == (_DWORD)v7 && !memcmp(*(const void **)(v10 + 64), v6, 4 * v7))
        return sub_1C577F888(a1, this, *((llvm::Value **)this - 8));
      ++v5;
      v4 = *(_QWORD *)(v10 + 8);
      v8 = (llvm::ValueAsMetadata *)v10;
    }
    while (v4);
  }
  return sub_1C5859EF0(a1, this);
}

llvm::UndefValue **sub_1C585A760(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t v7;
  uint64_t v8;
  llvm::UndefValue **v9;
  __int128 v10;
  __int128 v11;
  llvm *inserted;
  const llvm::APInt *v13;
  llvm::ConstantInt **v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t **v18;
  llvm::Type *v19;
  llvm::UndefValue *v20;
  llvm::Type *v21;
  llvm::UndefValue *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  unint64_t *v32;
  unsigned int v33;
  int v34;
  llvm::ConstantInt *v35;
  unint64_t v36;
  llvm::ValueHandleBase *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  llvm::UndefValue **v43;
  llvm::UndefValue *v44;
  BOOL v45;
  char v46;
  llvm::UndefValue **v47;
  llvm::UndefValue *v48;
  char *v49;
  uint64_t v50;
  unsigned int v51;
  void *v52;
  llvm::Value *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::ValueAsMetadata *v65;
  uint64_t v66;
  BOOL v67;
  llvm::ValueAsMetadata *v68;
  uint64_t v69;
  uint64_t v70;
  llvm::APInt *v71;
  unsigned int v72;
  unsigned int *v73;
  llvm::Type *v74;
  llvm::ConstantInt *v75;
  _QWORD *v76;
  llvm::Value **v77;
  uint64_t v78;
  llvm::APInt *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  _QWORD **v103;
  uint64_t v104;
  unsigned __int8 *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  llvm::Type *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  llvm::Type *v129;
  char v130;
  uint64_t v131;
  _QWORD *v132;
  char v133;
  uint64_t v134;
  uint64_t i;
  llvm::UndefValue *v136;
  char *v137;
  _QWORD *v138;
  llvm::FixedVectorType ***v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD **v142;
  void *v143;
  _DWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  void **v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  unint64_t v152;
  char *v153;
  void *v154;
  uint64_t v155;
  llvm::Type *v156;
  _QWORD *v157;
  unint64_t v158;
  void **v159;
  void **v160;
  uint64_t v161;
  int v162;
  char *v163;
  void *v164;
  uint64_t v165;
  llvm::Type *v166;
  _QWORD *v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  _BOOL4 v171;
  llvm::Type *v172;
  int v173;
  llvm::UndefValue *AggregateElement;
  std::string *v175;
  char *v176;
  _QWORD *v177;
  llvm::FixedVectorType ***v178;
  uint64_t v179;
  uint64_t Impl;
  _QWORD **v181;
  unint64_t v182;
  _DWORD *v183;
  void **v184;
  uint64_t v185;
  void **v186;
  _DWORD *v187;
  _DWORD *v188;
  char *v189;
  uint64_t v190;
  void *v191;
  unsigned int v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  llvm::UndefValue *v196;
  uint64_t ***v197;
  std::string v198;
  void **v199[4];
  __int16 v200;
  _QWORD v201[2];
  _QWORD v202[2];
  uint64_t v203;
  std::string __dst;
  __int16 v205;
  __int128 v206;
  __int128 v207;
  llvm::ValueAsMetadata *v208;
  uint64_t v209;
  uint64_t v210;

  v210 = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)a2 - 12);
  v8 = *((_QWORD *)a2 - 8);
  v9 = (llvm::UndefValue **)*((_QWORD *)a2 - 4);
  v10 = *(_OWORD *)(a1 + 120);
  v11 = *(_OWORD *)(a1 + 104);
  v206 = *(_OWORD *)(a1 + 88);
  v207 = v11;
  v209 = *((_QWORD *)&v10 + 1);
  v208 = a2;
  inserted = llvm::SimplifyInsertElementInst((unsigned __int8 *)v7, (unsigned __int8 *)v8, (unsigned __int8 *)v9, (uint64_t)&v206, a5);
  if (inserted)
    return sub_1C577F888(a1, a2, inserted);
  if (v9)
  {
    if (*((_BYTE *)v9 + 16) == 16)
    {
      v15 = (llvm::ConstantInt **)*v9;
      if ((*((_DWORD *)*v9 + 2) & 0xFFFFFF00) != 0x4000)
      {
        v32 = (unint64_t *)(v9 + 3);
        v33 = *((_DWORD *)v9 + 8);
        v34 = v33 > 0x40
            ? llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v9 + 3))
            : v33 + __clz(*v32) - 64;
        if (v33 - v34 <= 0x40)
        {
          v35 = *v15;
          if (v33 > 0x3F)
          {
            if (v33 == 64)
            {
              sub_1C5DD14E0((uint64_t)&v206, (uint64_t)(v9 + 3));
              goto LABEL_38;
            }
            v36 = *(_QWORD *)*v32;
          }
          else
          {
            v36 = *v32;
          }
          DWORD2(v206) = 64;
          *(_QWORD *)&v206 = v36;
LABEL_38:
          v37 = llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v206, v13);
          if (DWORD2(v206) >= 0x41 && (_QWORD)v206)
            MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
          if (v37)
            return (llvm::UndefValue **)sub_1C577E2C8(a1, (uint64_t)a2, 2u, (uint64_t)v37);
        }
      }
    }
  }
  v197 = 0;
  if (sub_1C4E7B480(v7))
  {
    *(_QWORD *)&v206 = &v197;
    v16 = *(_QWORD *)(v8 + 8);
    if (v16)
    {
      if (!*(_QWORD *)(v16 + 8))
      {
        if (sub_1C57E819C((_QWORD **)&v206, v8))
        {
          v17 = *((unsigned __int8 *)*v197 + 8);
          if (v17 == 13 || v17 < 7)
          {
            v18 = *v197;
            v19 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)a2 + 32);
            if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 19)
              llvm::ScalableVectorType::get(v18, v19);
            else
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v18, v19);
            v22 = llvm::UndefValue::get(v20, v21);
            v23 = *(uint64_t **)(a1 + 24);
            v24 = (uint64_t)v197;
            goto LABEL_15;
          }
        }
      }
    }
  }
  v196 = 0;
  *(_QWORD *)&v206 = &v196;
  if (sub_1C57E819C((_QWORD **)&v206, v7))
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
    if (sub_1C57E819C(&__dst, v8))
    {
      if ((v28 = *(_QWORD *)(v7 + 8)) != 0 && !*(_QWORD *)(v28 + 8)
        || (v29 = *(_QWORD *)(v8 + 8)) != 0 && !*(_QWORD *)(v29 + 8))
      {
        v22 = v196;
        if ((*(_DWORD *)(*(_QWORD *)v196 + 8) & 0xFE) == 0x12)
        {
          v24 = (uint64_t)v197;
          if (((_DWORD)(*v197)[1] & 0xFE) != 0x12 && *(uint64_t ***)(*(_QWORD *)v196 + 24) == *v197)
          {
            v23 = *(uint64_t **)(a1 + 24);
LABEL_15:
            LOWORD(v208) = 257;
            v25 = sub_1C4773154(v23, (uint64_t)v22, v24, (uint64_t)v9, (uint64_t)&v206);
            v26 = (char *)operator new(0x60uLL);
            v9 = (llvm::UndefValue **)(v26 + 32);
            *((_DWORD *)v26 + 13) = *((_DWORD *)v26 + 13) & 0x38000000 | 1;
            *(_QWORD *)v26 = 0;
            *((_QWORD *)v26 + 1) = 0;
            *((_QWORD *)v26 + 2) = 0;
            *((_QWORD *)v26 + 3) = v26 + 32;
            v27 = *(_QWORD *)a2;
            LOWORD(v208) = 257;
            llvm::BitCastInst::BitCastInst((uint64_t)(v26 + 32), (uint64_t)v25, v27, (uint64_t)&v206, 0);
            return v9;
          }
        }
      }
    }
  }
  v194 = 0;
  v195 = 0;
  v193 = 0;
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 18)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
    if (sub_1C4E7B154(&__dst, (uint64_t)v9))
    {
      *(_QWORD *)&v206 = &v193;
      *((_QWORD *)&v206 + 1) = &v194;
      if (*(_BYTE *)(v8 + 16) == 89)
      {
        v30 = *(_DWORD *)(v8 + 20);
        v31 = (v30 & 0x40000000) != 0 ? *(uint64_t **)(v8 - 8) : (uint64_t *)(v8 - 32 * (v30 & 0x7FFFFFF));
        v39 = *v31;
        if (v39)
        {
          v193 = v39;
          v40 = *(_DWORD *)(v8 + 20);
          v41 = (v40 & 0x40000000) != 0 ? *(_QWORD *)(v8 - 8) : v8 - 32 * (v40 & 0x7FFFFFF);
          if (sub_1C4E7B154((_QWORD **)&v206 + 1, *(_QWORD *)(v41 + 32)))
          {
            if (*(_BYTE *)(*(_QWORD *)v193 + 8) == 18 && v194 < *(unsigned int *)(*(_QWORD *)v193 + 32))
            {
              v42 = *((_QWORD *)a2 + 1);
              if (!v42 || *(_QWORD *)(v42 + 8) || (v168 = *(_QWORD *)(v42 + 24)) == 0 || *(_BYTE *)(v168 + 16) != 90)
              {
                *(_QWORD *)&v206 = &v207;
                *((_QWORD *)&v206 + 1) = 0x1000000000;
                v43 = (llvm::UndefValue **)sub_1C585BCD0((uint64_t)a2, (uint64_t)&v206, 0, a1);
                v45 = v43 == (llvm::UndefValue **)a2 || v44 == a2;
                v46 = v45;
                if (!v45)
                {
                  v47 = v43;
                  v48 = v44;
                  if (!v44)
                    v48 = llvm::UndefValue::get(*v43, 0);
                  v49 = (char *)operator new(0xA8uLL);
                  *((_DWORD *)v49 + 21) = *((_DWORD *)v49 + 21) & 0x38000000 | 2;
                  v9 = (llvm::UndefValue **)(v49 + 64);
                  *(_QWORD *)v49 = 0;
                  *((_QWORD *)v49 + 1) = 0;
                  *((_QWORD *)v49 + 2) = 0;
                  *((_QWORD *)v49 + 3) = v49 + 64;
                  *((_QWORD *)v49 + 4) = 0;
                  *((_QWORD *)v49 + 5) = 0;
                  *((_QWORD *)v49 + 6) = 0;
                  *((_QWORD *)v49 + 7) = v49 + 64;
                  v205 = 257;
                  llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v49 + 8, v47, (uint64_t)v48, (void *)v206, DWORD2(v206), (uint64_t)&__dst, 0);
                }
                if ((__int128 *)v206 != &v207)
                  free((void *)v206);
                if ((v46 & 1) == 0)
                  return v9;
              }
            }
          }
        }
      }
    }
  }
  v50 = *(_QWORD *)v7;
  if (*(_QWORD *)v7 && *(_BYTE *)(v50 + 8) == 18)
  {
    v51 = *(_DWORD *)(v50 + 32);
    DWORD2(v206) = v51;
    if (v51 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v206, 0, 0);
      LODWORD(__dst.__r_.__value_.__r.__words[1]) = v51;
      llvm::APInt::initSlowCase((llvm::APInt *)&__dst, -1, 1);
      v51 = __dst.__r_.__value_.__r.__words[1];
      v192 = __dst.__r_.__value_.__r.__words[1];
      if (LODWORD(__dst.__r_.__value_.__r.__words[1]) > 0x40)
      {
        v191 = (void *)operator new[]();
        v52 = (void *)__dst.__r_.__value_.__r.__words[0];
        memcpy(v191, __dst.__r_.__value_.__l.__data_, (((unint64_t)v192 + 63) >> 3) & 0x3FFFFFF8);
        goto LABEL_72;
      }
      v52 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    else
    {
      *(_QWORD *)&v206 = 0;
      LODWORD(__dst.__r_.__value_.__r.__words[1]) = v51;
      if (v51)
        v52 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v51);
      else
        v52 = 0;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
      v192 = v51;
    }
    v191 = v52;
LABEL_72:
    v53 = (llvm::Value *)sub_1C58553C4(a1, (uint64_t ***)a2, (unsigned int *)&v191, (unsigned int *)&v206, 0, 0);
    if (v192 >= 0x41 && v191)
      MEMORY[0x1CAA32F9C](v191, 0x1000C8000313F17);
    if (v53)
    {
      v9 = (llvm::UndefValue **)a2;
      if (v53 != a2)
        v9 = sub_1C577F888(a1, a2, v53);
    }
    if (v51 >= 0x41 && v52)
      MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
    if (DWORD2(v206) >= 0x41 && (_QWORD)v206)
      MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
    if (v53)
      return v9;
  }
  v54 = *((_QWORD *)a2 - 12);
  if (v54)
  {
    v55 = *(unsigned __int8 *)(v54 + 16);
    if (v55 >= 0x1C)
    {
      v56 = *(_QWORD *)(v54 + 8);
      if (v56)
      {
        if (!*(_QWORD *)(v56 + 8))
        {
          if (v55 == 91)
          {
            v202[0] = 0;
            v105 = *(unsigned __int8 **)(v54 - 32);
            if (!v105)
              goto LABEL_89;
            if (v105[16] > 0x14u)
              goto LABEL_89;
            v106 = *((_QWORD *)a2 - 8);
            if (!v106)
              goto LABEL_89;
            if (*(unsigned __int8 *)(v106 + 16) > 0x14u)
              goto LABEL_89;
            v107 = *((_QWORD *)a2 - 4);
            *(_QWORD *)&v206 = v202;
            if ((sub_1C4E7B154((_QWORD **)&v206, v107) & 1) == 0)
              goto LABEL_89;
            v108 = **(_QWORD **)(v54 - 64);
            if (*(_BYTE *)(v108 + 8) == 19)
              goto LABEL_89;
            v109 = (llvm::Type *)*(unsigned int *)(v54 + 72);
            if (*(_DWORD *)(v108 + 32) != (_DWORD)v109)
              goto LABEL_89;
            v110 = *(_QWORD *)(v54 + 64);
            if ((_DWORD)v109)
            {
              v111 = 0;
              while (1)
              {
                v112 = *(unsigned int *)(v110 + 4 * v111);
                v113 = (_DWORD)v112 == -1 || v111 == v112;
                if (!v113 && (_DWORD)v109 + (_DWORD)v111 != (_DWORD)v112)
                  break;
                if (v109 == (llvm::Type *)++v111)
                {
                  v115 = *(unsigned int *)(v54 + 72);
                  goto LABEL_288;
                }
              }
LABEL_272:
              v9 = 0;
              goto LABEL_273;
            }
            v115 = 0;
LABEL_288:
            *(_QWORD *)&v206 = &v207;
            *((_QWORD *)&v206 + 1) = 0x1000000000;
            sub_1C4848C0C((unsigned int *)&v206, v115, 0);
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
            __dst.__r_.__value_.__l.__size_ = 0x1000000000;
            sub_1C4893E04((char *)&__dst, v115, 0);
            if ((_DWORD)v109)
            {
              v172 = 0;
              while (1)
              {
                if (v172 == (llvm::Type *)v202[0])
                {
                  *(_QWORD *)(v206 + 8 * (_QWORD)v172) = v106;
                  v173 = (_DWORD)v109 + (_DWORD)v172;
                }
                else
                {
                  AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v105, v172);
                  *(_QWORD *)(v206 + 8 * (_QWORD)v172) = AggregateElement;
                  v173 = *(_DWORD *)(v110 + 4 * (_QWORD)v172);
                }
                v175 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 4 * (_QWORD)v172) = v173;
                if (!*(_QWORD *)(v206 + 8 * (_QWORD)v172))
                  break;
                v172 = (llvm::Type *)((char *)v172 + 1);
                if (v109 == v172)
                  goto LABEL_295;
              }
              v9 = 0;
            }
            else
            {
LABEL_295:
              v176 = (char *)operator new(0xA8uLL);
              *((_DWORD *)v176 + 21) = *((_DWORD *)v176 + 21) & 0x38000000 | 2;
              v9 = (llvm::UndefValue **)(v176 + 64);
              *(_QWORD *)v176 = 0;
              *((_QWORD *)v176 + 1) = 0;
              *((_QWORD *)v176 + 2) = 0;
              *((_QWORD *)v176 + 3) = v176 + 64;
              *((_QWORD *)v176 + 4) = 0;
              *((_QWORD *)v176 + 5) = 0;
              *((_QWORD *)v176 + 6) = 0;
              *((_QWORD *)v176 + 7) = v176 + 64;
              v177 = *(_QWORD **)(v54 - 64);
              v178 = (llvm::FixedVectorType ***)v206;
              v179 = DWORD2(v206);
              Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v206, (llvm::Type *)DWORD2(v206));
              if (!Impl)
              {
                llvm::FixedVectorType::get(**v178, (llvm::Type *)v179);
                Impl = sub_1C537B3A4(**v181 + 1288, (uint64_t)v181, v178, v179);
              }
              v200 = 257;
              llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v9, v177, Impl, __dst.__r_.__value_.__l.__data_, LODWORD(__dst.__r_.__value_.__r.__words[1]), (uint64_t)v199, 0);
              v175 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if (v175 != (std::string *)&__dst.__r_.__value_.__r.__words[2])
              free(v175);
            v143 = (void *)v206;
            if ((__int128 *)v206 == &v207)
              goto LABEL_273;
          }
          else
          {
            v122 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 40) + 56) + 40);
            if (*(char *)(v122 + 239) < 0)
              sub_1C47EBC30(&v198, *(void **)(v122 + 216), *(_QWORD *)(v122 + 224));
            else
              v198 = *(std::string *)(v122 + 216);
            if (!std::string::compare(&v198, 0, 4uLL, "agx1"))
            {
              v123 = 27;
            }
            else if (!std::string::compare(&v198, 0, 4uLL, "agx2"))
            {
              v123 = 28;
            }
            else if (!std::string::compare(&v198, 0, 4uLL, "agx3"))
            {
              v123 = 29;
            }
            else
            {
              v123 = 0;
            }
            if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v198.__r_.__value_.__l.__data_);
            if (v123 == 27 || *(_BYTE *)(v54 + 16) != 90 || *(_BYTE *)(*(_QWORD *)a2 + 8) == 19)
              goto LABEL_89;
            v124 = *(unsigned int *)(*(_QWORD *)a2 + 32);
            v125 = *((_QWORD *)a2 - 4);
            *(_QWORD *)&v206 = v202;
            if (!sub_1C4E7B154((_QWORD **)&v206, v125))
              goto LABEL_272;
            v126 = *((_QWORD *)a2 - 8);
            if (!v126)
              goto LABEL_272;
            if (*(unsigned __int8 *)(v126 + 16) > 0x14u)
              goto LABEL_272;
            v201[0] = *((_QWORD *)a2 - 8);
            v127 = *(_QWORD *)(v54 - 32);
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203;
            if (!sub_1C4E7B154(&__dst, v127))
              goto LABEL_272;
            v128 = *(_QWORD *)(v54 - 64);
            if (!v128 || *(unsigned __int8 *)(v128 + 16) > 0x14u)
              goto LABEL_272;
            v201[1] = *(_QWORD *)(v54 - 64);
            *(_QWORD *)&v206 = &v207;
            *((_QWORD *)&v206 + 1) = 0x1000000000;
            sub_1C4848C0C((unsigned int *)&v206, v124, 0);
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
            __dst.__r_.__value_.__l.__size_ = 0x1000000000;
            sub_1C4893E04((char *)&__dst, v124, 0);
            v130 = 0;
            v131 = 0;
            v132 = v201;
            do
            {
              v133 = v130;
              v134 = v202[v131];
              if (!*(_QWORD *)(v206 + 8 * v134))
              {
                *(_QWORD *)(v206 + 8 * v134) = *v132;
                *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 4 * v134) = v124 + v134;
              }
              ++v132;
              v130 = 1;
              v131 = 1;
            }
            while ((v133 & 1) == 0);
            if ((_DWORD)v124)
            {
              for (i = 0; i != v124; ++i)
              {
                if (!*(_QWORD *)(v206 + 8 * i))
                {
                  v136 = llvm::UndefValue::get(*(llvm::UndefValue **)(*(_QWORD *)a2 + 24), v129);
                  *(_QWORD *)(v206 + 8 * i) = v136;
                  *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 4 * i) = i;
                }
              }
            }
            v137 = (char *)operator new(0xA8uLL);
            *((_DWORD *)v137 + 21) = *((_DWORD *)v137 + 21) & 0x38000000 | 2;
            v9 = (llvm::UndefValue **)(v137 + 64);
            *(_QWORD *)v137 = 0;
            *((_QWORD *)v137 + 1) = 0;
            *((_QWORD *)v137 + 2) = 0;
            *((_QWORD *)v137 + 3) = v137 + 64;
            *((_QWORD *)v137 + 4) = 0;
            *((_QWORD *)v137 + 5) = 0;
            *((_QWORD *)v137 + 6) = 0;
            *((_QWORD *)v137 + 7) = v137 + 64;
            v138 = *(_QWORD **)(v54 - 96);
            v139 = (llvm::FixedVectorType ***)v206;
            v140 = DWORD2(v206);
            v141 = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v206, (llvm::Type *)DWORD2(v206));
            if (!v141)
            {
              llvm::FixedVectorType::get(**v139, (llvm::Type *)v140);
              v141 = sub_1C537B3A4(**v142 + 1288, (uint64_t)v142, v139, v140);
            }
            v200 = 257;
            llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v9, v138, v141, __dst.__r_.__value_.__l.__data_, LODWORD(__dst.__r_.__value_.__r.__words[1]), (uint64_t)v199, 0);
            if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
              free(__dst.__r_.__value_.__l.__data_);
            v143 = (void *)v206;
            if ((__int128 *)v206 == &v207)
            {
LABEL_273:
              if (v9)
                return v9;
              goto LABEL_89;
            }
          }
          free(v143);
          goto LABEL_273;
        }
      }
    }
  }
LABEL_89:
  v57 = *(uint64_t **)(a1 + 24);
  v58 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
  if (*(char *)(v58 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(v58 + 216), *(_QWORD *)(v58 + 224));
  else
    __dst = *(std::string *)(v58 + 216);
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v59 = 27;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
  {
    v59 = 28;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
  {
    v59 = 29;
  }
  else
  {
    v59 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v59 != 27)
  {
    v81 = *((_QWORD *)a2 - 12);
    if (v81)
    {
      if (*(_BYTE *)(v81 + 16) == 90)
      {
        v82 = *(_QWORD *)(v81 + 8);
        if (v82)
        {
          if (!*(_QWORD *)(v82 + 8))
          {
            v83 = *(_QWORD *)(v81 - 96);
            if (v83)
            {
              v84 = *(_QWORD *)(v81 - 64);
              if (v84)
              {
                if (*(unsigned __int8 *)(v84 + 16) >= 0x15u)
                {
                  v85 = *(_QWORD *)(v81 - 32);
                  if (v85)
                  {
                    if (*(_BYTE *)(v85 + 16) == 16)
                    {
                      v86 = *((_QWORD *)a2 - 8);
                      if (v86)
                      {
                        if (*(unsigned __int8 *)(v86 + 16) <= 0x14u)
                        {
                          v87 = *((_QWORD *)a2 - 4);
                          if (v85 != v87 && v87 && *(_BYTE *)(v87 + 16) == 16)
                          {
                            LOWORD(v208) = 257;
                            v88 = sub_1C4773154(v57, v83, v86, v87, (uint64_t)&v206);
                            LOWORD(v208) = 257;
                            v89 = (char *)operator new(0xA0uLL);
                            v90 = 0;
                            v9 = (llvm::UndefValue **)(v89 + 96);
                            *((_DWORD *)v89 + 29) = *((_DWORD *)v89 + 29) & 0x38000000 | 3;
                            do
                            {
                              v91 = &v89[v90];
                              *(_QWORD *)v91 = 0;
                              *((_QWORD *)v91 + 1) = 0;
                              *((_QWORD *)v91 + 2) = 0;
                              *((_QWORD *)v91 + 3) = v9;
                              v90 += 32;
                            }
                            while (v90 != 96);
                            llvm::InsertElementInst::InsertElementInst((uint64_t)(v89 + 96), v88, v84, v85, (uint64_t)&v206, 0);
                            return v9;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v60 = *((_QWORD *)a2 + 1);
  if (!v60 || *(_QWORD *)(v60 + 8) || *(_BYTE *)(*(_QWORD *)(v60 + 24) + 16) != 90)
  {
    v61 = *(unsigned int **)a2;
    if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 19)
    {
      v62 = v61[8];
      if ((_DWORD)v62 != 1)
      {
        v63 = *((_QWORD *)a2 - 8);
        if (v62 > 0x39)
        {
          v64 = operator new();
          *(_QWORD *)v64 = v64 + 16;
          *(_QWORD *)(v64 + 8) = 0x600000000;
          sub_1C4765AA4((char *)v64, (v62 + 63) >> 6, 0);
          *(_DWORD *)(v64 + 64) = v62;
        }
        else
        {
          v64 = (v62 << 58) | 1;
        }
        v199[0] = (void **)v64;
        v65 = a2;
        do
        {
          v66 = *((_QWORD *)v65 - 4);
          if (v66)
            v67 = *(_BYTE *)(v66 + 16) == 16;
          else
            v67 = 0;
          if (!v67)
            goto LABEL_152;
          v68 = v65;
          if (*((_QWORD *)v65 - 8) != v63)
            goto LABEL_152;
          v65 = (llvm::ValueAsMetadata *)*((_QWORD *)v65 - 12);
          if (*((_BYTE *)v65 + 16) == 90)
            v69 = *((_QWORD *)v68 - 12);
          else
            v69 = 0;
          if (v68 != a2)
          {
            v70 = *((_QWORD *)v68 + 1);
            if (!v70 || *(_QWORD *)(v70 + 8))
            {
              if (v69)
                goto LABEL_152;
              v71 = (llvm::APInt *)(v66 + 24);
              v72 = *(_DWORD *)(v66 + 32);
              if (v72 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(v71) != v72)
                  goto LABEL_152;
              }
              else if (*(_QWORD *)v71)
              {
                goto LABEL_152;
              }
            }
          }
          v73 = (unsigned int *)(v66 + 24);
          if (*(_DWORD *)(v66 + 32) >= 0x41u)
            v73 = *(unsigned int **)v73;
          sub_1C496F8DC((unint64_t *)v199, *v73);
        }
        while (v69);
        if (v68 != a2
          && ((sub_1C4E7B480(*((_QWORD *)v68 - 12)) & 1) != 0 || sub_1C54F8768((unint64_t *)v199)))
        {
          v75 = (llvm::ConstantInt *)(***(_QWORD ***)a2 + 1960);
          v76 = llvm::PoisonValue::get((llvm::PoisonValue *)v61, v74);
          v77 = llvm::ConstantInt::get(v75, 0, 0);
          v78 = *((_QWORD *)v68 - 4);
          v79 = (llvm::APInt *)(v78 + 24);
          v80 = *(_DWORD *)(v78 + 32);
          if (v80 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v79) == v80)
            {
LABEL_253:
              *(_QWORD *)&v206 = &v207;
              *((_QWORD *)&v206 + 1) = 0x1000000000;
              sub_1C4893E04((char *)&v206, v62, 0);
              if ((_DWORD)v62)
              {
                v147 = 0;
                v148 = v199[0];
                v149 = v206;
                v150 = ((unint64_t)v199[0] >> 1) & ~(-1 << ((unint64_t)v199[0] >> 58));
                do
                {
                  v151 = v147;
                  v152 = v150;
                  if ((v148 & 1) == 0)
                  {
                    v151 = v147 & 0x3F;
                    v152 = *((_QWORD *)*v148 + (v147 >> 6));
                  }
                  if (((v152 >> v151) & 1) == 0)
                    *(_DWORD *)(v149 + 4 * v147) = -1;
                  ++v147;
                }
                while (v62 != v147);
              }
              v153 = (char *)operator new(0xA8uLL);
              *((_DWORD *)v153 + 21) = *((_DWORD *)v153 + 21) & 0x38000000 | 2;
              v9 = (llvm::UndefValue **)(v153 + 64);
              *(_QWORD *)v153 = 0;
              *((_QWORD *)v153 + 1) = 0;
              *((_QWORD *)v153 + 2) = 0;
              *((_QWORD *)v153 + 3) = v153 + 64;
              *((_QWORD *)v153 + 4) = 0;
              *((_QWORD *)v153 + 5) = 0;
              *((_QWORD *)v153 + 6) = 0;
              *((_QWORD *)v153 + 7) = v153 + 64;
              v154 = (void *)v206;
              v155 = DWORD2(v206);
              v205 = 257;
              v157 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v68, v156);
              llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v9, v68, (uint64_t)v157, v154, v155, (uint64_t)&__dst, 0);
              if ((__int128 *)v206 != &v207)
                free((void *)v206);
              sub_1C4914448(v199);
              return v9;
            }
          }
          else if (!*(_QWORD *)v79)
          {
            goto LABEL_253;
          }
          LOWORD(v208) = 257;
          v144 = operator new(0xA0uLL);
          v145 = 0;
          v68 = (llvm::ValueAsMetadata *)(v144 + 24);
          v144[29] = v144[29] & 0x38000000 | 3;
          do
          {
            v146 = &v144[v145];
            *v146 = 0;
            v146[1] = 0;
            v146[2] = 0;
            v146[3] = v68;
            v145 += 8;
          }
          while (v145 != 24);
          llvm::InsertElementInst::InsertElementInst((uint64_t)(v144 + 24), v76, v63, (uint64_t)v77, (uint64_t)&v206, (uint64_t)a2);
          goto LABEL_253;
        }
LABEL_152:
        sub_1C4914448(v199);
      }
    }
  }
  v92 = (_QWORD *)*((_QWORD *)a2 - 12);
  v93 = *((unsigned __int8 *)v92 + 16);
  if (v92 && v93 == 91)
  {
    v94 = *(unsigned int *)(*(_QWORD *)*(v92 - 8) + 32);
    if ((_DWORD)v94 == *((_DWORD *)v92 + 18)
      && llvm::ShuffleVectorInst::isZeroEltSplatMask((int *)v92[8], v94)
      && *(_BYTE *)(*v92 + 8) != 19)
    {
      v199[0] = 0;
      v116 = *((_QWORD *)a2 - 4);
      *(_QWORD *)&v206 = v199;
      if (sub_1C4E7B154((_QWORD **)&v206, v116))
      {
        v117 = *(v92 - 8);
        *((_QWORD *)&v206 + 1) = *((_QWORD *)a2 - 8);
        if (*(_BYTE *)(v117 + 16) == 90)
        {
          v118 = *(_DWORD *)(v117 + 20);
          v119 = (v118 & 0x40000000) != 0 ? *(uint64_t **)(v117 - 8) : (uint64_t *)(v117 - 32 * (v118 & 0x7FFFFFF));
          if (sub_1C4E7B480(*v119))
          {
            v120 = *(_DWORD *)(v117 + 20);
            v121 = (v120 & 0x40000000) != 0 ? *(_QWORD *)(v117 - 8) : v117 - 32 * (v120 & 0x7FFFFFF);
            if (*((_QWORD *)&v206 + 1) == *(_QWORD *)(v121 + 32)
              && sub_1C4D8AC3C((uint64_t)&v207, *(llvm::Constant **)(v121 + 64)))
            {
              v158 = *(unsigned int *)(*v92 + 32);
              *(_QWORD *)&v206 = &v207;
              *((_QWORD *)&v206 + 1) = 0x1000000000;
              sub_1C4893E04((char *)&v206, v158, 0);
              if ((_DWORD)v158)
              {
                v159 = 0;
                v160 = v199[0];
                v161 = v206;
                do
                {
                  if (v160 == v159)
                    v162 = 0;
                  else
                    v162 = *(_DWORD *)(v92[8] + 4 * (_QWORD)v159);
                  *(_DWORD *)(v161 + 4 * (_QWORD)v159) = v162;
                  v159 = (void **)((char *)v159 + 1);
                }
                while ((void **)v158 != v159);
              }
              v163 = (char *)operator new(0xA8uLL);
              *((_DWORD *)v163 + 21) = *((_DWORD *)v163 + 21) & 0x38000000 | 2;
              v9 = (llvm::UndefValue **)(v163 + 64);
              *(_QWORD *)v163 = 0;
              *((_QWORD *)v163 + 1) = 0;
              *((_QWORD *)v163 + 2) = 0;
              *((_QWORD *)v163 + 3) = v163 + 64;
              *((_QWORD *)v163 + 4) = 0;
              *((_QWORD *)v163 + 5) = 0;
              *((_QWORD *)v163 + 6) = 0;
              *((_QWORD *)v163 + 7) = v163 + 64;
              v164 = (void *)v206;
              v165 = DWORD2(v206);
              v205 = 257;
              v167 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v117, v166);
              llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v9, (_QWORD *)v117, (uint64_t)v167, v164, v165, (uint64_t)&__dst, 0);
              if ((__int128 *)v206 != &v207)
                free((void *)v206);
              return v9;
            }
          }
        }
      }
      v92 = (_QWORD *)*((_QWORD *)a2 - 12);
      v93 = *((unsigned __int8 *)v92 + 16);
    }
    else
    {
      v93 = 91;
    }
  }
  if (v93 != 91
    || !sub_1C4E7B480(*(v92 - 4))
    || (llvm::ShuffleVectorInst::isIdentityWithExtract((llvm::ShuffleVectorInst *)v92) & 1) == 0
    && !llvm::ShuffleVectorInst::isIdentityWithPadding((llvm::ShuffleVectorInst *)v92))
  {
    goto LABEL_166;
  }
  if (*(_BYTE *)(*v92 + 8) == 19)
    goto LABEL_166;
  v199[0] = 0;
  v95 = *((_QWORD *)a2 - 4);
  *(_QWORD *)&v206 = v199;
  if (!sub_1C4E7B154((_QWORD **)&v206, v95))
    goto LABEL_166;
  v96 = *((_QWORD *)a2 - 8);
  v97 = (_QWORD *)*(v92 - 8);
  LODWORD(v207) = 64;
  *(_QWORD *)&v206 = v97;
  *((void ***)&v206 + 1) = v199[0];
  if (*(_BYTE *)(v96 + 16) != 89)
    goto LABEL_166;
  v169 = *(_DWORD *)(v96 + 20);
  v170 = (v169 & 0x40000000) != 0 ? *(_QWORD *)(v96 - 8) : v96 - 32 * (v169 & 0x7FFFFFF);
  if (v97 != *(_QWORD **)v170)
    goto LABEL_166;
  v171 = sub_1C4D8A7F0((llvm::APInt *)((char *)&v206 + 8), *(unsigned __int8 **)(v170 + 32));
  if (v207 >= 0x41 && *((_QWORD *)&v206 + 1))
  {
    MEMORY[0x1CAA32F9C](*((_QWORD *)&v206 + 1), 0x1000C8000313F17);
    if (!v171)
      goto LABEL_166;
  }
  else if (!v171)
  {
    goto LABEL_166;
  }
  v182 = *(unsigned int *)(*v92 + 32);
  *(_QWORD *)&v206 = &v207;
  *((_QWORD *)&v206 + 1) = 0x1000000000;
  sub_1C4893E04((char *)&v206, v182, 0);
  if (!(_DWORD)v182)
  {
LABEL_311:
    v189 = (char *)operator new(0xA8uLL);
    *((_DWORD *)v189 + 21) = *((_DWORD *)v189 + 21) & 0x38000000 | 2;
    v9 = (llvm::UndefValue **)(v189 + 64);
    *(_QWORD *)v189 = 0;
    *((_QWORD *)v189 + 1) = 0;
    *((_QWORD *)v189 + 2) = 0;
    *((_QWORD *)v189 + 3) = v189 + 64;
    *((_QWORD *)v189 + 4) = 0;
    *((_QWORD *)v189 + 5) = 0;
    *((_QWORD *)v189 + 6) = 0;
    *((_QWORD *)v189 + 7) = v189 + 64;
    v190 = *(v92 - 4);
    v205 = 257;
    llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v189 + 8, v97, v190, (void *)v206, DWORD2(v206), (uint64_t)&__dst, 0);
    goto LABEL_312;
  }
  v183 = (_DWORD *)v92[8];
  v184 = v199[0];
  v185 = v206;
  v186 = v199[0];
  v187 = (_DWORD *)v206;
  v188 = v183;
  while (v186)
  {
    *v187 = *v188;
LABEL_310:
    ++v188;
    ++v187;
    v186 = (void **)((char *)v186 - 1);
    if (!--v182)
      goto LABEL_311;
  }
  if (v183[(_QWORD)v184] != (_DWORD)v184)
  {
    *(_DWORD *)(v185 + 4 * (_QWORD)v184) = (_DWORD)v184;
    goto LABEL_310;
  }
  v9 = 0;
LABEL_312:
  if ((__int128 *)v206 != &v207)
    free((void *)v206);
  if (!v9)
  {
LABEL_166:
    v98 = *((_QWORD *)a2 - 12);
    v99 = *(_QWORD *)(v98 + 8);
    if (!v99 || *(_QWORD *)(v99 + 8))
      return 0;
    v100 = *(uint64_t **)(a1 + 24);
    v101 = *((_QWORD *)a2 - 8);
    __dst.__r_.__value_.__r.__words[0] = 0;
    v199[0] = 0;
    *(_QWORD *)&v206 = &__dst;
    if (sub_1C57DCAD0((_QWORD **)&v206, v98)
      && (v198.__r_.__value_.__r.__words[0] = (std::string::size_type)v199, (sub_1C57DCAD0(&v198, v101) & 1) != 0))
    {
      v102 = 46;
    }
    else
    {
      *(_QWORD *)&v206 = &__dst;
      if (sub_1C4B037F8((_QWORD **)&v206, v98)
        && (v198.__r_.__value_.__r.__words[0] = (std::string::size_type)v199, (sub_1C4B037F8(&v198, v101) & 1) != 0))
      {
        v102 = 40;
      }
      else
      {
        *(_QWORD *)&v206 = &__dst;
        if (!sub_1C4B0378C((_QWORD **)&v206, v98))
          return 0;
        v198.__r_.__value_.__r.__words[0] = (std::string::size_type)v199;
        if ((sub_1C4B0378C(&v198, v101) & 1) == 0)
          return 0;
        v102 = 39;
      }
    }
    v103 = *(_QWORD ***)__dst.__r_.__value_.__l.__data_;
    if ((*(_DWORD *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 8) & 0xFE) == 0x12)
      v103 = (_QWORD **)*v103[2];
    if (v103 == *(_QWORD ***)v199[0])
    {
      v104 = *((_QWORD *)a2 - 4);
      LOWORD(v208) = 257;
      sub_1C4773154(v100, (uint64_t)__dst.__r_.__value_.__l.__data_, (uint64_t)v199[0], v104, (uint64_t)&v206);
      LOWORD(v208) = 257;
      llvm::CastInst::Create(v102);
      return (llvm::UndefValue **)v38;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

llvm::UndefValue *sub_1C585BCD0(uint64_t a1, uint64_t a2, llvm::UndefValue **a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  llvm::Type *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  llvm::UndefValue **v16;
  int v17;
  unsigned int v18;
  llvm::UndefValue **v19;
  llvm::UndefValue *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  int i;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  llvm::Type *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t j;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t k;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  llvm::Value *v54;
  uint64_t v55;
  uint64_t v56;
  void *v58;
  llvm::Value *v59;
  _BYTE v60[32];
  __int16 v61;
  void *v62;
  uint64_t v63;
  _QWORD v64[10];

  v7 = a1;
  v64[8] = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(*(_QWORD *)a1 + 32);
  if (sub_1C4E7B480(a1))
  {
    sub_1C4893E04((char *)a2, v8, -1);
    if (a3)
      return llvm::UndefValue::get(*a3, v9);
    return (llvm::UndefValue *)v7;
  }
  v10 = *(unsigned __int8 *)(v7 + 16);
  if (v10 != 90)
  {
    if (v10 == 13)
    {
      sub_1C4893E04((char *)a2, v8, 0);
      return (llvm::UndefValue *)v7;
    }
    goto LABEL_21;
  }
  v11 = *(_QWORD *)(v7 - 64);
  if (!v11)
    goto LABEL_21;
  if (*(_BYTE *)(v11 + 16) != 89)
    goto LABEL_21;
  v12 = *(_QWORD *)(v11 - 32);
  if (*(_BYTE *)(v12 + 16) != 16)
    goto LABEL_21;
  v13 = *(_QWORD *)(v7 - 32);
  if (*(_BYTE *)(v13 + 16) != 16)
    goto LABEL_21;
  v14 = (_QWORD *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u)
    v14 = (_QWORD *)*v14;
  v15 = (_QWORD *)(v13 + 24);
  if (*(_DWORD *)(v13 + 32) >= 0x41u)
    v15 = (_QWORD *)*v15;
  v16 = *(llvm::UndefValue ***)(v7 - 96);
  v17 = *(_DWORD *)v14;
  v18 = *(_DWORD *)v15;
  v19 = *(llvm::UndefValue ***)(v11 - 64);
  if (a3 && v19 != a3)
  {
    v20 = *v19;
    if (v16 == a3)
    {
      if (!(_DWORD)v8)
        return *(llvm::UndefValue **)(v11 - 64);
      v30 = *((_DWORD *)v20 + 8);
      v31 = *(_DWORD *)(a2 + 8);
      do
      {
        if (v18)
          v32 = v30;
        else
          v32 = v17;
        if (v31 >= *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v31 + 1, 4);
          v31 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v31) = v32;
        v31 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v31;
        ++v30;
        --v18;
        LODWORD(v8) = v8 - 1;
      }
      while ((_DWORD)v8);
      return *(llvm::UndefValue **)(v11 - 64);
    }
    if (v20 == *a3 && sub_1C585F294((_BYTE *)v7, *(_BYTE **)(v11 - 64), a3, a2))
      return *(llvm::UndefValue **)(v11 - 64);
LABEL_21:
    if ((_DWORD)v8)
    {
      v21 = 0;
      v22 = *(_DWORD *)(a2 + 8);
      do
      {
        if (v22 >= *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v22 + 1, 4);
          v22 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v22) = v21;
        v22 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v22;
        ++v21;
      }
      while ((_DWORD)v8 != v21);
    }
    return (llvm::UndefValue *)v7;
  }
  v23 = sub_1C585BCD0(v16, a2, *(_QWORD *)(v11 - 64), a4);
  if (*(llvm::UndefValue **)v23 == *v19)
  {
    *(_DWORD *)(*(_QWORD *)a2 + 4 * (v18 % v8)) = *(_DWORD *)(*(_QWORD *)v23 + 32) + v17;
    return (llvm::UndefValue *)v23;
  }
  else
  {
    v24 = **(_QWORD **)(v11 - 64);
    v25 = *(_DWORD *)(*(_QWORD *)v7 + 32);
    v26 = *(_DWORD *)(v24 + 32);
    v27 = *(_QWORD *)(*(_QWORD *)v7 + 24) == *(_QWORD *)(v24 + 24) && v25 > v26;
    if (v27)
    {
      v62 = v64;
      v63 = 0x1000000000;
      v28 = 0;
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          if (v28 >= HIDWORD(v63))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v28 + 1, 4);
            v28 = v63;
          }
          *((_DWORD *)v62 + v28) = i;
          v28 = v63 + 1;
          LODWORD(v63) = v63 + 1;
        }
      }
      v33 = v25 - v26;
      do
      {
        if (v28 >= HIDWORD(v63))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v28 + 1, 4);
          v28 = v63;
        }
        *((_DWORD *)v62 + v28) = -1;
        v28 = v63 + 1;
        LODWORD(v63) = v63 + 1;
        --v33;
      }
      while (v33);
      v34 = *(_QWORD *)(v11 - 64);
      if (*(unsigned __int8 *)(v34 + 16) <= 0x1Bu)
        v35 = 0;
      else
        v35 = *(_QWORD *)(v11 - 64);
      if (!v35 || (v36 = *(_QWORD *)(v11 - 64), *(_BYTE *)(v35 + 16) == 83))
        v36 = v11;
      if (*(_QWORD *)(v36 + 40) == *(_QWORD *)(v7 + 40))
      {
        v37 = *(_QWORD *)(v7 + 8);
        if (!v37 || *(_QWORD *)(v37 + 8) || *(_BYTE *)(*(_QWORD *)(v37 + 24) + 16) != 90)
        {
          v38 = operator new(0xA8uLL);
          v38[21] = v38[21] & 0x38000000 | 2;
          *(_QWORD *)v38 = 0;
          *((_QWORD *)v38 + 1) = 0;
          *((_QWORD *)v38 + 2) = 0;
          *((_QWORD *)v38 + 3) = v38 + 16;
          *((_QWORD *)v38 + 4) = 0;
          *((_QWORD *)v38 + 5) = 0;
          *((_QWORD *)v38 + 6) = 0;
          *((_QWORD *)v38 + 7) = v38 + 16;
          v58 = v62;
          v39 = v63;
          v61 = 257;
          v41 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v34, v40);
          v59 = (llvm::Value *)(v38 + 16);
          llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v38 + 8, (_QWORD *)v34, (uint64_t)v41, v58, v39, (uint64_t)v60, 0);
          if (v35 && *(_BYTE *)(v35 + 16) != 83)
          {
            sub_1C53DF664((_QWORD *)(*(_QWORD *)(v35 + 40) + 40), v35 + 24, (uint64_t)v59);
          }
          else
          {
            v42 = *(_QWORD *)(v11 + 40);
            v43 = v42 + 40;
            for (j = *(_QWORD *)(v42 + 48); j != v43; j = *(_QWORD *)(j + 8))
            {
              v45 = j - 24;
              if (!j)
                v45 = 0;
              if (*(_BYTE *)(v45 + 16) != 83)
              {
                v46 = *(unsigned __int8 *)(j - 8) - 38;
                v27 = v46 > 0x38;
                v47 = (1 << v46) & 0x100060000000001;
                if (v27 || v47 == 0)
                  v43 = j;
                else
                  v43 = *(_QWORD *)(j + 8);
                break;
              }
            }
            if (v43)
              v49 = v43 - 24;
            else
              v49 = 0;
            sub_1C577E498(a4, v59, v49);
          }
          for (k = *(_QWORD *)(v34 + 8); k; k = *(_QWORD *)(k + 8))
          {
            v51 = *(_QWORD *)(k + 24);
            if (v51 && *(_BYTE *)(v51 + 16) == 89 && *(_QWORD *)(v51 + 40) == *((_QWORD *)v38 + 13))
            {
              v52 = *(_QWORD *)(v51 - 32);
              v61 = 257;
              v53 = operator new(0x80uLL);
              v53[21] = v53[21] & 0x38000000 | 2;
              v54 = (llvm::Value *)(v53 + 16);
              *(_QWORD *)v53 = 0;
              *((_QWORD *)v53 + 1) = 0;
              *((_QWORD *)v53 + 2) = 0;
              *((_QWORD *)v53 + 3) = v53 + 16;
              *((_QWORD *)v53 + 4) = 0;
              *((_QWORD *)v53 + 5) = 0;
              *((_QWORD *)v53 + 6) = 0;
              *((_QWORD *)v53 + 7) = v53 + 16;
              llvm::ExtractElementInst::ExtractElementInst((uint64_t)(v53 + 16), v59, v52, (uint64_t)v60, 0);
              sub_1C53DF664((_QWORD *)(*(_QWORD *)(v51 + 40) + 40), v51 + 24, (uint64_t)v54);
              sub_1C577F888(a4, (llvm::ValueAsMetadata *)v51, v54);
            }
          }
        }
      }
      if (v62 != v64)
        free(v62);
    }
    if ((_DWORD)v8)
    {
      v55 = 0;
      v56 = *(_QWORD *)a2;
      do
      {
        *(_DWORD *)(v56 + 4 * v55) = v55;
        ++v55;
      }
      while (v8 != v55);
    }
  }
  return (llvm::UndefValue *)v7;
}

uint64_t sub_1C585C2BC(uint64_t result, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t v3;
  llvm *v4;
  unsigned __int8 *v5;
  llvm::Constant *v6;
  int v7;
  llvm::Value **v9;
  llvm::Type *v10;
  BOOL v12;
  _QWORD v13[2];
  llvm::Value *v14;

  v3 = result;
  v4 = *(llvm **)(a2 - 64);
  v5 = *(unsigned __int8 **)(a2 - 32);
  v6 = *(llvm::Constant **)a2;
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 43)
  {
    result = sub_1C4D8AC3C((uint64_t)v13, *(llvm::Constant **)(a2 - 64));
    if ((_DWORD)result)
    {
      result = (uint64_t)llvm::Constant::getAllOnesValue(v6, v10);
      *(_DWORD *)v3 = 17;
      *(_QWORD *)(v3 + 8) = v5;
      *(_QWORD *)(v3 + 16) = result;
      return result;
    }
  }
  else if (v7 == 57)
  {
    v13[1] = 0;
    v14 = 0;
    v13[0] = &v14;
    result = (uint64_t)sub_1C4D89F84((uint64_t)v13, v5);
    if ((_DWORD)result)
    {
      result = llvm::MaskedValueIsZero(v4, v14, a3, 0, 0, 0, 0, (const llvm::DominatorTree *)1, v12);
      if ((_DWORD)result)
      {
        *(_DWORD *)v3 = 13;
        *(_QWORD *)(v3 + 8) = v4;
        *(_QWORD *)(v3 + 16) = v5;
        return result;
      }
    }
  }
  else if (v7 == 53 && v5[16] <= 0x14u && v5 != 0)
  {
    v9 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 1, 0);
    result = (uint64_t)llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v9, (llvm::Constant *)v5, 0, 0);
    *(_DWORD *)v3 = 17;
    *(_QWORD *)(v3 + 8) = v4;
    *(_QWORD *)(v3 + 16) = result;
    return result;
  }
  *(_DWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  return result;
}

llvm::UndefValue **sub_1C585C3E0(uint64_t a1, llvm::ValueAsMetadata *a2)
{
  llvm::UndefValue **v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  llvm::UndefValue *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::UndefValue *v12;
  uint64_t v13;
  int PrimitiveSizeInBits;
  llvm::UndefValue *v15;
  llvm::Type *v16;
  llvm::UndefValue *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::ValueAsMetadata **v26;
  llvm::ValueAsMetadata *v27;
  int v28;
  int v29;
  llvm::UndefValue *v30;
  unsigned int v31;
  llvm::Type *v32;
  llvm *v33;
  llvm::UndefValue *v34;
  uint64_t v35;
  char v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  llvm::Type *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  llvm::Type *v56;
  uint64_t v57;
  int *v58;
  llvm::ValueAsMetadata *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  llvm::UndefValue *v65;
  const llvm::APInt *v66;
  llvm::UndefValue *v67;
  uint64_t v68;
  llvm::ConstantInt *v69;
  llvm::ValueHandleBase *v70;
  unsigned __int8 *v71;
  unint64_t v72;
  char *v73;
  int v74;
  _DWORD *v75;
  char *v76;
  uint64_t v77;
  llvm::Type *v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  BOOL v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  llvm::Value **BinOpIdentity;
  llvm *v101;
  int *v102;
  size_t v103;
  llvm::UndefValue *ShuffleVector;
  __int32 *v105;
  __int32 *v106;
  char v107;
  char *v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  __int32 *v116;
  __int32 *v117;
  char v118;
  BOOL v119;
  int *v120;
  size_t v121;
  __int32 *v122;
  __int32 *v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  __int32 *v136;
  __int32 *v137;
  char v138;
  int v139;
  llvm::UndefValue *v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  llvm::Type *v145;
  unsigned int v146;
  llvm::Type *v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  int *v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  _DWORD *v164;
  uint64_t v165;
  llvm::Type *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  llvm::Type *v173;
  _QWORD *v174;
  uint64_t v175;
  void *v176;
  size_t v177;
  uint64_t v178;
  llvm::ValueAsMetadata *v179;
  llvm::UndefValue *v180;
  uint64_t v181;
  unsigned int v182;
  unsigned int v183;
  BOOL v185;
  int v186;
  uint64_t *v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  llvm::Type **v191;
  unsigned __int8 *v192;
  unint64_t v193;
  int v194;
  int v195;
  int v196;
  _DWORD *v197;
  llvm::UndefValue *v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD **v203;
  unint64_t v204;
  unsigned int v205;
  int v206;
  _QWORD **v207;
  uint64_t v208;
  __int32 *v209;
  __int32 *v210;
  __int32 *v211;
  __int32 *v212;
  __int32 *v213;
  __int32 *v214;
  const llvm::APInt *v215;
  uint64_t v216;
  int *v217;
  int v218;
  int v219;
  unsigned int v221;
  llvm::ConstantInt *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  int v228;
  int v229;
  const llvm::APInt *v230;
  uint64_t v231;
  int v232;
  int v233;
  unsigned int v235;
  llvm::ConstantInt *v236;
  llvm::ConstantInt *v237;
  unsigned int v238;
  unint64_t v239;
  llvm::ValueHandleBase *v240;
  uint64_t v241;
  _DWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  llvm::ConstantInt *v245;
  unsigned int v246;
  unint64_t v247;
  llvm::ValueHandleBase *v248;
  uint64_t v249;
  _DWORD *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  llvm::ShuffleVectorInst *v254;
  _QWORD *v255;
  _QWORD *v256;
  uint8x8_t v257;
  uint8x8_t v258;
  uint8x8_t v259;
  llvm::Type *v260;
  unint64_t v261;
  int v262;
  unsigned int v263;
  unsigned int v264;
  uint64_t v265;
  char *v266;
  int v267;
  llvm::PoisonValue *v268;
  const char *v269;
  unsigned int v270;
  _QWORD **v271;
  unsigned int v272;
  _QWORD *v273;
  unsigned __int8 ***v274;
  unsigned __int8 **v275;
  unsigned int v276;
  unsigned __int8 *v277;
  unsigned int v278;
  const char *v279;
  unsigned int v280;
  llvm::Type *v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  llvm::Type *v285;
  llvm::ShuffleVectorInst *v286;
  llvm::ShuffleVectorInst *v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  llvm::ValueAsMetadata **v295;
  llvm::ValueAsMetadata *v296;
  int v297;
  int v298;
  llvm::ValueAsMetadata *v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  _QWORD *v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  llvm::ValueAsMetadata **v310;
  llvm::ValueAsMetadata *v311;
  int v312;
  int v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t v316;
  llvm::ShuffleVectorInst *v317;
  uint64_t v318;
  uint64_t *v319;
  unsigned __int8 *v320;
  llvm::ShuffleVectorInst *v321;
  unsigned int v322;
  uint64_t *v323;
  llvm::Value **v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  llvm::ValueAsMetadata **v329;
  llvm::ValueAsMetadata *v330;
  int v331;
  int v332;
  uint64_t *v333;
  uint64_t v334;
  llvm::ShuffleVectorInst *v335;
  uint64_t v336;
  unsigned __int8 *v337;
  int v338;
  unsigned int v339;
  uint64_t v340;
  int *v341;
  unint64_t v342;
  int *v343;
  int *v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  _DWORD *v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  llvm::UndefValue **v355;
  llvm::UndefValue **v356;
  llvm::UndefValue *v357;
  char v358;
  llvm::UndefValue **v360;
  uint64_t v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  char v367;
  int v368;
  uint64_t v369;
  int v370;
  BOOL v372;
  int v373;
  BOOL v375;
  uint64_t v376;
  uint64_t v377;
  _DWORD *v378;
  llvm::UndefValue *v379;
  int v380;
  int v381;
  unsigned int *v382;
  unint64_t v383;
  char *v384;
  uint64_t v385;
  unsigned int v386;
  _DWORD *v387;
  unint64_t v388;
  llvm::ConstantInt *v389;
  int v390;
  llvm::ShuffleVectorInst *v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  int *v395;
  size_t __n;
  llvm::ValueAsMetadata *__na;
  llvm::UndefValue *__nb;
  llvm::UndefValue *v399;
  unsigned __int8 *v400;
  _DWORD *v401;
  unsigned int __s2;
  _DWORD *__s2a;
  uint64_t v404;
  int v405;
  char v406;
  _QWORD **v407;
  _QWORD *v408;
  unsigned int v409;
  unsigned __int8 *v410;
  unsigned int v411;
  unsigned int v412;
  _QWORD **v413;
  uint64_t *v414;
  uint64_t v415;
  unsigned int v416;
  int v417;
  uint64_t v418;
  char *v419;
  int v420;
  uint64_t v421;
  int v422;
  unint64_t v423;
  int v424;
  char *v425;
  uint64_t v426[4];
  __int16 v427;
  __int32 __c[2];
  uint64_t v429;
  int v430;
  void *v431;
  unsigned int v432;
  void *__src;
  unsigned int v434;
  llvm *v435;
  unsigned int v436;
  llvm::UndefValue **v437;
  llvm::UndefValue **v438;
  _OWORD v439[2];
  llvm::ValueAsMetadata *v440;
  uint64_t v441;
  llvm::ConstantInt ***v442;
  uint64_t v443;
  llvm::ShuffleVectorInst *v444;
  uint64_t p_src;
  _QWORD v446[2];
  __int16 v447;
  char *v448;
  uint64_t v449;
  _QWORD *v450[2];
  __int16 v451;
  uint64_t v452;

  v452 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::UndefValue **)*((_QWORD *)a2 - 8);
  v5 = *((_QWORD *)a2 - 4);
  v6 = *(_OWORD *)(a1 + 120);
  v7 = *(_OWORD *)(a1 + 104);
  v439[0] = *(_OWORD *)(a1 + 88);
  v439[1] = v7;
  v441 = *((_QWORD *)&v6 + 1);
  v440 = a2;
  v8 = llvm::SimplifyShuffleVectorInst((llvm *)v4, (llvm::Type *)v5, *((char **)a2 + 8), *((unsigned int *)a2 + 18), *(llvm::UndefValue **)a2, (uint64_t)v439);
  if (v8)
    return sub_1C577F888(a1, a2, v8);
  if (*((_BYTE *)*v4 + 8) == 19)
    return 0;
  v10 = (uint64_t)v4;
  v9 = *(unsigned int *)(*(_QWORD *)a2 + 32);
  v424 = *((_DWORD *)*v4 + 8);
  v437 = 0;
  v438 = 0;
  v448 = (char *)&v438;
  if (!sub_1C57E819C((_QWORD **)&v448, (uint64_t)v4))
    goto LABEL_23;
  v444 = (llvm::ShuffleVectorInst *)&v437;
  if (!sub_1C57E819C((_QWORD **)&v444, v5))
    goto LABEL_23;
  v11 = (uint64_t)v438;
  v12 = *v438;
  if ((*((_DWORD *)*v438 + 2) & 0xFE) != 0x12)
    goto LABEL_23;
  v13 = (uint64_t)v437;
  if (v12 != *v437)
    goto LABEL_23;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**((llvm::Type ***)v12 + 2));
  v15 = *(llvm::UndefValue **)a2;
  v16 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v16 = (llvm::Type *)**((_QWORD **)v15 + 2);
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(v16))
  {
    v17 = v4[1];
    if (v17 && !*((_QWORD *)v17 + 1) || (v18 = *(_QWORD *)(v5 + 8)) != 0 && !*(_QWORD *)(v18 + 8))
    {
      v19 = *(_QWORD *)(a1 + 24);
      v20 = (_QWORD **)*((_QWORD *)a2 + 8);
      v21 = *((unsigned int *)a2 + 18);
      if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      {
        v61 = 0;
        v60 = &byte_1C871356D;
        goto LABEL_67;
      }
      v22 = **(_QWORD **)v15;
      v23 = *(_QWORD *)(v22 + 152);
      v24 = *(unsigned int *)(v22 + 168);
      if ((_DWORD)v24)
      {
        LODWORD(v25) = (v24 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v26 = (llvm::ValueAsMetadata **)(v23 + 16 * v25);
        v27 = *v26;
        if (*v26 == a2)
        {
LABEL_66:
          v59 = v26[1];
          v62 = *(_QWORD *)v59;
          v60 = (char *)v59 + 16;
          v61 = v62;
LABEL_67:
          v451 = 773;
          v448 = v60;
          v449 = v61;
          v450[0] = ".uncasted";
          v63 = sub_1C486AD20(v19, v11, v13, v20, v21, (uint64_t)&v448);
          v64 = operator new(0x60uLL);
          v9 = (uint64_t)(v64 + 8);
          v64[13] = v64[13] & 0x38000000 | 1;
          *(_QWORD *)v64 = 0;
          *((_QWORD *)v64 + 1) = 0;
          *((_QWORD *)v64 + 2) = 0;
          *((_QWORD *)v64 + 3) = v64 + 8;
          v65 = *(llvm::UndefValue **)a2;
          v451 = 257;
          llvm::BitCastInst::BitCastInst((uint64_t)(v64 + 8), v63, (uint64_t)v65, (uint64_t)&v448, 0);
          return (llvm::UndefValue **)v9;
        }
        v28 = 1;
        while (v27 != (llvm::ValueAsMetadata *)-4096)
        {
          v29 = v25 + v28++;
          v25 = v29 & (v24 - 1);
          v27 = *(llvm::ValueAsMetadata **)(v23 + 16 * v25);
          if (v27 == a2)
          {
            v26 = (llvm::ValueAsMetadata **)(v23 + 16 * v25);
            goto LABEL_66;
          }
        }
      }
      v26 = (llvm::ValueAsMetadata **)(v23 + 16 * v24);
      goto LABEL_66;
    }
  }
  else
  {
LABEL_23:
    v15 = *(llvm::UndefValue **)a2;
  }
  v425 = (char *)*((_QWORD *)a2 + 8);
  v423 = *((unsigned int *)a2 + 18);
  v418 = **(_QWORD **)v15;
  v448 = (char *)&v438;
  v421 = v9;
  if (sub_1C57E819C((_QWORD **)&v448, (uint64_t)v4)
    && sub_1C4E7B480(v5)
    && (*((_DWORD *)*v438 + 2) & 0xFE) == 0x12
    && (_DWORD)v9 == v424)
  {
    v30 = *v438;
    v31 = *((_DWORD *)*v438 + 8);
    v448 = (char *)v450;
    v449 = 0x1000000000;
    if (v31 >= v9)
    {
      llvm::narrowShuffleMaskElts((void *)(v31 / v9), v425, v423, (uint64_t)&v448);
    }
    else if ((llvm::widenShuffleMaskElts(v9 / v31, v425, v423, (uint64_t)&v448) & 1) == 0)
    {
      LODWORD(v449) = 0;
      goto LABEL_35;
    }
    if ((_DWORD)v449)
    {
      v33 = (llvm *)v438;
      v34 = llvm::UndefValue::get(v30, v32);
      if (llvm::SimplifyShuffleVectorInst(v33, v34, v448, v449, v30, (uint64_t)v439))
      {
        v447 = 257;
        llvm::CastInst::Create(49);
        v9 = v35;
        v36 = 0;
        goto LABEL_36;
      }
    }
LABEL_35:
    v36 = 1;
LABEL_36:
    if (v448 != (char *)v450)
      free(v448);
    if ((v36 & 1) == 0)
      return (llvm::UndefValue **)v9;
  }
  if (v4 == (llvm::UndefValue **)v5)
  {
    v37 = operator new(0xA8uLL);
    v37[21] = v37[21] & 0x38000000 | 2;
    v9 = (uint64_t)(v37 + 16);
    *(_QWORD *)v37 = 0;
    *((_QWORD *)v37 + 1) = 0;
    *((_QWORD *)v37 + 2) = 0;
    *((_QWORD *)v37 + 3) = v37 + 16;
    *((_QWORD *)v37 + 4) = 0;
    *((_QWORD *)v37 + 5) = 0;
    *((_QWORD *)v37 + 6) = 0;
    *((_QWORD *)v37 + 7) = v37 + 16;
    llvm::createUnaryMask(v425, v423, v424, (uint64_t)&v448);
    v38 = v448;
    v39 = v449;
    v447 = 257;
    v41 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v10, v40);
    llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v9, (_QWORD *)v10, (uint64_t)v41, v38, v39, (uint64_t)&v444, 0);
    v42 = v448;
    if (v448 == (char *)v450)
      return (llvm::UndefValue **)v9;
    goto LABEL_43;
  }
  if (sub_1C4E7B480((uint64_t)v4))
  {
LABEL_41:
    llvm::ShuffleVectorInst::commute(a2);
    return (llvm::UndefValue **)a2;
  }
  v43 = *(_QWORD *)(a1 + 24);
  v44 = *((_QWORD *)a2 - 8);
  v45 = *((_QWORD *)a2 - 4);
  v46 = (int *)*((_QWORD *)a2 + 8);
  v47 = *((unsigned int *)a2 + 18);
  v426[0] = 0;
  *(_QWORD *)__c = 0;
  v449 = (uint64_t)v426;
  v450[0] = __c;
  v48 = *(_QWORD *)(v44 + 8);
  if (v48 && !*(_QWORD *)(v48 + 8) && *(_BYTE *)(v44 + 16) == 90)
  {
    v49 = *(_DWORD *)(v44 + 20);
    v50 = (v49 & 0x40000000) != 0 ? *(uint64_t **)(v44 - 8) : (uint64_t *)(v44 - 32 * (v49 & 0x7FFFFFF));
    if (sub_1C4E7B480(*v50))
    {
      v51 = *(_DWORD *)(v44 + 20);
      v52 = (v51 & 0x40000000) != 0 ? *(_QWORD *)(v44 - 8) : v44 - 32 * (v51 & 0x7FFFFFF);
      v53 = *(_QWORD *)(v52 + 32);
      if (v53)
      {
        *(_QWORD *)v449 = v53;
        v54 = *(_DWORD *)(v44 + 20);
        v55 = (v54 & 0x40000000) != 0 ? *(_QWORD *)(v44 - 8) : v44 - 32 * (v54 & 0x7FFFFFF);
        if (sub_1C4E7B154(v450, *(_QWORD *)(v55 + 64)) && sub_1C4E7B480(v45) && (_DWORD)v47)
        {
          v57 = 4 * v47;
          v58 = v46;
          while ((*v58 + 1) < 2)
          {
            ++v58;
            v57 -= 4;
            if (!v57)
              goto LABEL_79;
          }
          if (*(_QWORD *)__c)
          {
            v67 = llvm::UndefValue::get(*(llvm::UndefValue **)a2, v56);
            v68 = **(_QWORD **)(v43 + 64);
            v69 = *(llvm::ConstantInt **)(v68 + 1960);
            LODWORD(v449) = *(_DWORD *)(v68 + 1968) >> 8;
            if (v449 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v448, 0, 0);
            else
              v448 = 0;
            v70 = llvm::ConstantInt::get(v69, (llvm::LLVMContext *)&v448, v66);
            if (v449 >= 0x41 && v448)
              MEMORY[0x1CAA32F9C](v448, 0x1000C8000313F17);
            v451 = 257;
            v71 = sub_1C4773154((uint64_t *)v43, (uint64_t)v67, v426[0], (uint64_t)v70, (uint64_t)&v448);
            v72 = *(unsigned int *)(*(_QWORD *)a2 + 32);
            v448 = (char *)v450;
            v449 = 0x1000000000;
            sub_1C4893E04((char *)&v448, v72, 0);
            if ((_DWORD)v72)
            {
              v73 = v448;
              do
              {
                v74 = *v46++;
                if (v74 == -1)
                  *(_DWORD *)v73 = -1;
                v73 += 4;
                --v72;
              }
              while (v72);
            }
            v75 = operator new(0xA8uLL);
            v75[21] = v75[21] & 0x38000000 | 2;
            v9 = (uint64_t)(v75 + 16);
            *(_QWORD *)v75 = 0;
            *((_QWORD *)v75 + 1) = 0;
            *((_QWORD *)v75 + 2) = 0;
            *((_QWORD *)v75 + 3) = v75 + 16;
            *((_QWORD *)v75 + 4) = 0;
            *((_QWORD *)v75 + 5) = 0;
            *((_QWORD *)v75 + 6) = 0;
            *((_QWORD *)v75 + 7) = v75 + 16;
            v76 = v448;
            v77 = v449;
            v447 = 257;
            v79 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v71, v78);
            llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v9, v71, (uint64_t)v79, v76, v77, (uint64_t)&v444, 0);
            v42 = v448;
            if (v448 == (char *)v450)
              return (llvm::UndefValue **)v9;
LABEL_43:
            free(v42);
            return (llvm::UndefValue **)v9;
          }
        }
      }
    }
  }
LABEL_79:
  v80 = *(unsigned int *)(**((_QWORD **)a2 - 8) + 32);
  if ((_DWORD)v80 != *((_DWORD *)a2 + 18)
    || !llvm::ShuffleVectorInst::isSelectMask(*((int **)a2 + 8), v80))
  {
    goto LABEL_195;
  }
  v81 = *(_DWORD *)(*(_QWORD *)a2 + 32);
  if ((sub_1C4E7B480(*((_QWORD *)a2 - 4)) & 1) == 0 && **((_DWORD **)a2 + 8) >= v81)
    goto LABEL_41;
  v82 = *((_QWORD *)a2 - 8);
  v83 = *((_QWORD *)a2 - 4);
  v84 = *(unsigned __int8 *)(v82 + 16);
  v85 = v84 - 59;
  if (v82
    && (v84 >= 0x1C ? (v86 = v85 >= 0xFFFFFFEE) : (v86 = 0),
        v86
     && v83 == *(_QWORD *)(v82 - 64)
     && (v98 = *(_QWORD *)(v82 - 32)) != 0
     && *(unsigned __int8 *)(v98 + 16) < 0x15u))
  {
    v99 = 1;
    v404 = *((_QWORD *)a2 - 8);
  }
  else
  {
    if (!v83)
      goto LABEL_94;
    v87 = *(unsigned __int8 *)(v83 + 16);
    if (v87 < 0x1C)
      goto LABEL_94;
    if (v87 - 59 < 0xFFFFFFEE)
      goto LABEL_94;
    if (v82 != *(_QWORD *)(v83 - 64))
      goto LABEL_94;
    v98 = *(_QWORD *)(v83 - 32);
    if (!v98 || *(unsigned __int8 *)(v98 + 16) > 0x14u)
      goto LABEL_94;
    v99 = 0;
    v84 = *(unsigned __int8 *)(v83 + 16);
    v404 = *((_QWORD *)a2 - 4);
  }
  v411 = v84 - 28;
  BinOpIdentity = llvm::ConstantExpr::getBinOpIdentity((llvm::ConstantExpr *)(v84 - 28), *(llvm::ConstantFP **)a2, (llvm::Type *)1, 0);
  if (BinOpIdentity)
  {
    v101 = (llvm *)BinOpIdentity;
    v102 = (int *)*((_QWORD *)a2 + 8);
    v103 = *((unsigned int *)a2 + 18);
    if (v99)
      BinOpIdentity = (llvm::Value **)v98;
    else
      v101 = (llvm *)v98;
    ShuffleVector = llvm::ConstantExpr::getShuffleVector((llvm *)BinOpIdentity, v101, v102, v103, 0);
    v105 = wmemchr(v102, -1, v103);
    if (v105)
      v106 = v105;
    else
      v106 = &v102[v103];
    if (v103 != v106 - v102 && (v84 <= 0x33 && ((1 << v84) & 0xD800000000000) != 0 || v84 - 53 <= 2))
    {
      v107 = 1;
      ShuffleVector = sub_1C62A7210((llvm::ConstantExpr *)v411, ShuffleVector, (llvm::Type *)1);
    }
    else
    {
      v107 = 0;
    }
    if (!v99)
      v83 = v82;
    v451 = 257;
    v108 = (char *)operator new(0x80uLL);
    *((_QWORD *)v108 + 5) = 0;
    v109 = v108 + 40;
    *((_QWORD *)v108 + 6) = 0;
    *((_QWORD *)v108 + 8) = *(_QWORD *)v83;
    v9 = (uint64_t)(v108 + 64);
    *((_QWORD *)v108 + 3) = v108 + 64;
    *((_QWORD *)v108 + 7) = v108 + 64;
    *((_QWORD *)v108 + 9) = 0;
    v108[80] = v411 + 28;
    v108[81] = 0;
    *((_WORD *)v108 + 41) = 0;
    *((_DWORD *)v108 + 21) = 2;
    *(_OWORD *)(v108 + 88) = 0u;
    *(_OWORD *)(v108 + 104) = 0u;
    *((_DWORD *)v108 + 30) = 0;
    *(_QWORD *)v108 = v83;
    v112 = *(_QWORD *)(v83 + 8);
    v111 = (_QWORD *)(v83 + 8);
    v110 = v112;
    *((_QWORD *)v108 + 1) = v112;
    if (v112)
      *(_QWORD *)(v110 + 16) = v108 + 8;
    *((_QWORD *)v108 + 2) = v111;
    *v111 = v108;
    *((_QWORD *)v108 + 4) = ShuffleVector;
    if (ShuffleVector)
    {
      v115 = *((_QWORD *)ShuffleVector + 1);
      v114 = (_QWORD *)((char *)ShuffleVector + 8);
      v113 = v115;
      *v109 = v115;
      if (v115)
        *(_QWORD *)(v113 + 16) = v109;
      *((_QWORD *)v108 + 6) = v114;
      *v114 = v108 + 32;
    }
    llvm::Value::setName((uint64_t ***)v108 + 8, (uint64_t)&v448);
    llvm::Instruction::copyIRFlags(v9, v404, 1);
    v116 = wmemchr(v102, -1, v103);
    if (v116)
      v117 = v116;
    else
      v117 = &v102[v103];
    if (v103 == v117 - v102)
      v118 = 1;
    else
      v118 = v107;
    if ((v118 & 1) == 0)
      llvm::Instruction::dropPoisonGeneratingFlags((llvm::Instruction *)v9);
    return (llvm::UndefValue **)v9;
  }
  v82 = *((_QWORD *)a2 - 8);
  v84 = *(unsigned __int8 *)(v82 + 16);
  v85 = v84 - 59;
LABEL_94:
  if (v84 < 0x1C)
    goto LABEL_195;
  if (v85 < 0xFFFFFFEE)
    goto LABEL_195;
  v88 = *((_QWORD *)a2 - 4);
  if (!v88)
    goto LABEL_195;
  v89 = *(unsigned __int8 *)(v88 + 16);
  v90 = v89 - 28;
  if (v89 < 0x1C || v89 - 59 < 0xFFFFFFEE)
    goto LABEL_195;
  v426[0] = 0;
  *(_QWORD *)__c = 0;
  v435 = 0;
  __src = 0;
  v91 = *(_QWORD *)(v82 - 64);
  if (v91
    && *(unsigned __int8 *)(v91 + 16) <= 0x14u
    && (v435 = *(llvm **)(v82 - 64), *(_QWORD *)(v82 - 32))
    && (v426[0] = *(_QWORD *)(v82 - 32), (v92 = *(_QWORD *)(v88 - 64)) != 0)
    && *(unsigned __int8 *)(v92 + 16) <= 0x14u
    && (__src = *(void **)(v88 - 64), *(_QWORD *)(v88 - 32)))
  {
    v93 = 0;
    v94 = 0;
    *(_QWORD *)__c = *(_QWORD *)(v88 - 32);
    LODWORD(v95) = v84 - 28;
  }
  else
  {
    v448 = (char *)v426;
    v449 = (uint64_t)&v435;
    v450[1] = v426;
    if (!sub_1C585F7F0((uint64_t)&v448, v82))
      goto LABEL_195;
    v444 = (llvm::ShuffleVectorInst *)__c;
    p_src = (uint64_t)&__src;
    v446[1] = __c;
    if (!sub_1C585F7F0((uint64_t)&v444, v88))
      goto LABEL_195;
    v96 = *(unsigned __int8 *)(v82 + 16);
    LODWORD(v95) = v96 - 28;
    v97 = *(unsigned __int8 *)(v88 + 16);
    v90 = v97 - 28;
    if (v96 == v97)
    {
      v94 = 0;
    }
    else
    {
      v119 = v96 == 53 || v90 == 25;
      v94 = v119;
      sub_1C585C2BC((uint64_t)&v448, v82, *(const llvm::APInt **)(a1 + 80));
      if ((_DWORD)v448)
      {
        v435 = (llvm *)v450[0];
        LODWORD(v95) = (_DWORD)v448;
      }
      else
      {
        sub_1C585C2BC((uint64_t)&v444, v88, *(const llvm::APInt **)(a1 + 80));
        if ((_DWORD)v444)
        {
          __src = (void *)v446[0];
          v90 = v444;
        }
      }
    }
    v93 = 1;
  }
  if ((_DWORD)v95 != v90 || !v435 || !__src)
    goto LABEL_195;
  v412 = v93;
  v405 = v94;
  v120 = (int *)*((_QWORD *)a2 + 8);
  v121 = *((unsigned int *)a2 + 18);
  v399 = llvm::ConstantExpr::getShuffleVector(v435, (llvm *)__src, v120, v121, 0);
  v122 = wmemchr(v120, -1, v121);
  v395 = &v120[v121];
  __n = v121;
  if (v122)
    v123 = v122;
  else
    v123 = &v120[v121];
  if (v121 == v123 - v120)
  {
    v124 = 0;
    v125 = v405;
    v95 = v95;
  }
  else
  {
    v95 = v95;
    if (v95 <= 0x17 && ((1 << v95) & 0xD80000) != 0 || (v95 - 25) <= 2)
    {
      v379 = sub_1C62A7210((llvm::ConstantExpr *)v95, v399, (llvm::Type *)v412);
      v126 = v412;
      v399 = v379;
      v124 = 1;
      v125 = v405;
      goto LABEL_170;
    }
    v124 = 0;
    v125 = v405;
  }
  v126 = v412;
LABEL_170:
  v127 = v426[0];
  if (v426[0] == *(_QWORD *)__c)
  {
    v406 = v124;
  }
  else
  {
    v128 = *(_QWORD *)(v82 + 8);
    if (v128 && !*(_QWORD *)(v128 + 8))
    {
      if ((v126 | v124 ^ 1) != 1)
        goto LABEL_195;
    }
    else
    {
      v129 = *(_QWORD *)(v88 + 8);
      if (!v129 || (v126 | v124 ^ 1) != 1 || *(_QWORD *)(v129 + 8))
        goto LABEL_195;
    }
    v406 = v124;
    v130 = *(_QWORD *)(a1 + 24);
    v451 = 257;
    v131 = sub_1C486AD20(v130, v426[0], *(uint64_t *)__c, v120, __n, (uint64_t)&v448);
    v126 = v412;
    v127 = v131;
  }
  v132 = *(_QWORD *)(a1 + 24);
  v451 = 257;
  if (v126)
  {
    v133 = (_QWORD *)v127;
    v127 = (uint64_t)v399;
  }
  else
  {
    v133 = v399;
  }
  v134 = sub_1C4773860(v132, v95, v133, v127, (uint64_t)&v448, 0);
  v135 = v134;
  if (v134 && v134[16] >= 0x1Cu)
  {
    llvm::Instruction::copyIRFlags((uint64_t)v134, v82, 1);
    llvm::Instruction::andIRFlags((uint64_t)v135, v88);
    if (v125)
      v135[17] &= ~4u;
    v136 = wmemchr(v120, -1, __n);
    v137 = v395;
    if (v136)
      v137 = v136;
    v119 = __n == v137 - v120;
    v138 = v406;
    if (v119)
      v138 = 1;
    if ((v138 & 1) == 0)
      llvm::Instruction::dropPoisonGeneratingFlags((llvm::Instruction *)v135);
  }
  v9 = (uint64_t)sub_1C577F888(a1, a2, (llvm::Value *)v135);
  if (v9)
    return (llvm::UndefValue **)v9;
LABEL_195:
  v139 = **(unsigned __int8 **)(a1 + 80);
  v140 = *(llvm::UndefValue **)a2;
  v444 = 0;
  v141 = *((_QWORD *)a2 - 8);
  v448 = (char *)&v444;
  if (sub_1C57E819C((_QWORD **)&v448, v141) && sub_1C4E7B480(*((_QWORD *)a2 - 4)))
  {
    v142 = *((_DWORD *)v140 + 2) & 0xFE;
    v143 = v142 == 18 ? *(unsigned __int8 *)(**((_QWORD **)v140 + 2) + 8) : *((_DWORD *)v140 + 2);
    if (v143 == 13)
    {
      v144 = *(_QWORD *)v444;
      if ((*(_DWORD *)(*(_QWORD *)v444 + 8) & 0xFE) == 0x12)
      {
        v145 = **(llvm::Type ***)(v144 + 16);
        if (*((_BYTE *)v145 + 8) == 13 && *(_DWORD *)(v144 + 32) == *((_DWORD *)v140 + 8))
        {
          v146 = llvm::Type::getPrimitiveSizeInBits(v145);
          v147 = v140;
          if (v142 == 18)
            v147 = (llvm::Type *)**((_QWORD **)v140 + 2);
          v148 = llvm::Type::getPrimitiveSizeInBits(v147);
          v149 = v146 / v148;
          if (!(v146 % v148))
          {
            v157 = *((unsigned int *)a2 + 18);
            if (!(_DWORD)v157)
            {
LABEL_224:
              v164 = operator new(0x60uLL);
              v9 = (uint64_t)(v164 + 8);
              v164[13] = v164[13] & 0x38000000 | 1;
              *(_QWORD *)v164 = 0;
              *((_QWORD *)v164 + 1) = 0;
              *((_QWORD *)v164 + 2) = 0;
              *((_QWORD *)v164 + 3) = v164 + 8;
              v451 = 257;
              llvm::TruncInst::TruncInst((uint64_t)(v164 + 8), (uint64_t)v444, (uint64_t)v140, (uint64_t)&v448, 0);
              return (llvm::UndefValue **)v9;
            }
            v158 = 0;
            v159 = (int *)*((_QWORD *)a2 + 8);
            while (1)
            {
              v161 = *v159++;
              v160 = v161;
              v162 = v158 + 1;
              if (v161 != -1)
              {
                v163 = v149 * v158;
                if (v139)
                  v163 = v149 * v162 - 1;
                if (v160 != v163)
                  break;
              }
              v158 = v162;
              if (!--v157)
                goto LABEL_224;
            }
          }
        }
      }
    }
  }
  v150 = *(_QWORD *)(a1 + 24);
  if ((sub_1C4E7B480(*((_QWORD *)a2 - 4)) & 1) != 0)
  {
    if (llvm::ShuffleVectorInst::isIdentityWithExtract(a2))
    {
      v444 = 0;
      v426[0] = 0;
      *(_QWORD *)__c = 0;
      v151 = *((_QWORD *)a2 - 8);
      v448 = (char *)&v444;
      v449 = (uint64_t)v426;
      v450[0] = __c;
      v152 = *(_QWORD *)(v151 + 8);
      if (v152)
      {
        if (!*(_QWORD *)(v152 + 8))
        {
          if (sub_1C4FA9CBC((_QWORD **)&v448, v151))
          {
            v153 = *((_QWORD *)v444 + 1);
            if (v153)
            {
              if (!*(_QWORD *)(v153 + 8) && *((_BYTE *)v444 + 16) == 91)
              {
                v154 = *(_DWORD *)(*(_QWORD *)a2 + 32);
                v155 = *((_DWORD *)v444 + 5);
                v156 = (v155 & 0x40000000) != 0
                     ? (uint64_t *)*((_QWORD *)v444 - 1)
                     : (uint64_t *)((char *)v444 - 32 * (v155 & 0x7FFFFFF));
                v165 = *v156;
                if (*v156)
                {
                  if (sub_1C4E7B480(v156[4]))
                  {
                    if (*(_DWORD *)(*(_QWORD *)v165 + 32) == v154
                      && (llvm::ShuffleVectorInst::isIdentityWithPadding(v444) & 1) != 0)
                    {
                      v167 = v426[0];
                      v413 = (_QWORD **)*((_QWORD *)a2 + 8);
                      v168 = *((unsigned int *)a2 + 18);
                      v451 = 257;
                      v169 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v426[0], v166);
                      v170 = sub_1C486AD20(v150, v167, (uint64_t)v169, v413, v168, (uint64_t)&v448);
                      v171 = *(_QWORD *)__c;
                      v407 = (_QWORD **)*((_QWORD *)a2 + 8);
                      v414 = (uint64_t *)v170;
                      v172 = *((unsigned int *)a2 + 18);
                      v451 = 257;
                      v174 = llvm::PoisonValue::get(**(llvm::PoisonValue ***)__c, v173);
                      v175 = sub_1C486AD20(v150, v171, (uint64_t)v174, v407, v172, (uint64_t)&v448);
                      v451 = 257;
                      v9 = (uint64_t)sub_1C4FC8748(v165, v414, v175, (uint64_t)&v448, 0, 0);
                      if (v9)
                        return (llvm::UndefValue **)v9;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v436 = v421;
  if (v421 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v435, 0, 0);
    v434 = v421;
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
    v432 = v434;
    if (v434 > 0x40)
    {
      v431 = (void *)operator new[]();
      memcpy(v431, __src, (((unint64_t)v432 + 63) >> 3) & 0x3FFFFFF8);
      goto LABEL_236;
    }
    v176 = __src;
  }
  else
  {
    v435 = 0;
    v434 = v421;
    if ((_DWORD)v421)
      v176 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v421);
    else
      v176 = 0;
    __src = v176;
    v432 = v421;
  }
  v431 = v176;
LABEL_236:
  v177 = sub_1C58553C4(a1, (uint64_t ***)a2, (unsigned int *)&v431, (unsigned int *)&v435, 0, 0);
  if (v432 >= 0x41 && v431)
    MEMORY[0x1CAA32F9C](v431, 0x1000C8000313F17);
  if (v177)
  {
    if ((llvm::ValueAsMetadata *)v177 == a2)
    {
      v9 = (uint64_t)a2;
      goto LABEL_504;
    }
    v178 = a1;
    v179 = a2;
    v180 = (llvm::UndefValue *)v177;
    goto LABEL_242;
  }
  v181 = *((_QWORD *)a2 - 8);
  if (llvm::ShuffleVectorInst::isIdentityWithExtract(a2)
    && sub_1C4E7B480(*((_QWORD *)a2 - 4)))
  {
    v182 = *(unsigned __int8 *)(v181 + 16);
    v183 = v182 - 28;
    v185 = v182 < 0x1C && v182 != 5;
    if (v181 && !v185)
    {
      if (v182 <= 0x1B)
        v183 = *(unsigned __int16 *)(v181 + 18);
      if (v183 == 49)
      {
        v186 = *(_DWORD *)(v181 + 20);
        v187 = (v186 & 0x40000000) != 0 ? *(uint64_t **)(v181 - 8) : (uint64_t *)(v181 - 32 * (v186 & 0x7FFFFFF));
        v188 = *v187;
        if (*(_BYTE *)(v188 + 16) == 90)
        {
          v189 = *(_DWORD *)(v188 + 20);
          v190 = (v189 & 0x40000000) != 0 ? *(_QWORD *)(v188 - 8) : v188 - 32 * (v189 & 0x7FFFFFF);
          v191 = *(llvm::Type ***)(v190 + 32);
          if (v191)
          {
            v192 = *(unsigned __int8 **)(v190 + 64);
            if (v192)
            {
              if (v192[16] < 0x15u
                && ((llvm::Constant::isNullValue((llvm::Constant *)v192) & 1) != 0
                 || (sub_1C4E71060((uint64_t)&v448, (llvm::Constant *)v192) & 1) != 0))
              {
                v193 = llvm::Type::getPrimitiveSizeInBits(*v191);
                v195 = v194;
                if (v193 == llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2) && v195 == v196)
                {
                  v197 = operator new(0x60uLL);
                  v9 = (uint64_t)(v197 + 8);
                  v197[13] = v197[13] & 0x38000000 | 1;
                  *(_QWORD *)v197 = 0;
                  *((_QWORD *)v197 + 1) = 0;
                  *((_QWORD *)v197 + 2) = 0;
                  *((_QWORD *)v197 + 3) = v197 + 8;
                  v198 = *(llvm::UndefValue **)a2;
                  v451 = 257;
                  llvm::BitCastInst::BitCastInst((uint64_t)(v197 + 8), (uint64_t)v191, (uint64_t)v198, (uint64_t)&v448, 0);
                  goto LABEL_504;
                }
              }
            }
          }
        }
      }
    }
    if (*(_BYTE *)(v181 + 16) == 91)
    {
      v199 = *(_QWORD **)(v181 - 64);
      if (v199)
      {
        v200 = *(_QWORD *)(v181 - 32);
        if (v200)
        {
          v201 = *(_QWORD *)(v181 + 8);
          if (v201)
          {
            if (!*(_QWORD *)(v201 + 8))
            {
              v341 = *(int **)(v181 + 64);
              v342 = *(unsigned int *)(*(_QWORD *)a2 + 32);
              v448 = (char *)v450;
              v449 = 0x1000000000;
              sub_1C4893E04((char *)&v448, v342, 0);
              if ((_DWORD)v342)
              {
                v343 = (int *)*((_QWORD *)a2 + 8);
                v344 = (int *)v448;
                do
                {
                  v346 = *v343++;
                  v345 = v346;
                  v348 = *v341++;
                  v347 = v348;
                  if (v345 == -1)
                    v349 = -1;
                  else
                    v349 = v347;
                  *v344++ = v349;
                  --v342;
                }
                while (v342);
              }
              v350 = operator new(0xA8uLL);
              v350[21] = v350[21] & 0x38000000 | 2;
              v9 = (uint64_t)(v350 + 16);
              *(_QWORD *)v350 = 0;
              *((_QWORD *)v350 + 1) = 0;
              *((_QWORD *)v350 + 2) = 0;
              *((_QWORD *)v350 + 3) = v350 + 16;
              *((_QWORD *)v350 + 4) = 0;
              *((_QWORD *)v350 + 5) = 0;
              *((_QWORD *)v350 + 6) = 0;
              *((_QWORD *)v350 + 7) = v350 + 16;
              v447 = 257;
              llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v350 + 8, v199, v200, v448, v449, (uint64_t)&v444, 0);
              v351 = v448;
              if (v448 != (char *)v450)
                goto LABEL_558;
              goto LABEL_504;
            }
          }
        }
      }
    }
  }
  v202 = (_QWORD *)*((_QWORD *)a2 - 8);
  v408 = (_QWORD *)*((_QWORD *)a2 - 4);
  v448 = (char *)v450;
  v203 = (_QWORD **)*((_QWORD *)a2 + 8);
  v204 = *((unsigned int *)a2 + 18);
  v449 = 0x1000000000;
  if (v204 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v448, (uint64_t)v450, v204, 4);
    v205 = v449;
    v207 = (_QWORD **)v448;
    goto LABEL_279;
  }
  v205 = 0;
  v206 = 0;
  v207 = v450;
  if ((_DWORD)v204)
  {
LABEL_279:
    memcpy((char *)v207 + 4 * v205, v203, 4 * v204);
    v206 = v449;
  }
  v208 = (v206 + v204);
  LODWORD(v449) = v206 + v204;
  v415 = *(int *)(*v202 + 32);
  v426[0] = 0;
  *(_QWORD *)__c = 0;
  v444 = (llvm::ShuffleVectorInst *)v426;
  v446[0] = __c;
  if (sub_1C585F4E4((_QWORD **)&v444, (uint64_t)v202))
  {
    v209 = (__int32 *)&v448[4 * v449];
    v210 = wmemchr((__int32 *)v448, __c[0], v449);
    v211 = v210 ? v210 : v209;
    v10 = (uint64_t)v4;
    if (v211 == (__int32 *)&v448[4 * v449])
    {
      v223 = v426[0];
      v224 = a1;
      v225 = (uint64_t)a2;
      v226 = 0;
LABEL_333:
      v9 = sub_1C577E2C8(v224, v225, v226, v223);
      goto LABEL_354;
    }
  }
  v444 = (llvm::ShuffleVectorInst *)v426;
  v446[0] = __c;
  if (sub_1C585F4E4((_QWORD **)&v444, (uint64_t)v408))
  {
    *(_QWORD *)__c += v415;
    v212 = (__int32 *)&v448[4 * v449];
    v213 = wmemchr((__int32 *)v448, __c[0], v449);
    v214 = v213 ? v213 : v212;
    if (v214 == (__int32 *)&v448[4 * v449])
    {
      v223 = v426[0];
      v224 = a1;
      v225 = (uint64_t)a2;
      v226 = 1;
      goto LABEL_333;
    }
  }
  if ((_DWORD)v208 != (_DWORD)v415)
    goto LABEL_331;
  v442 = 0;
  v443 = 0;
  p_src = (uint64_t)&v443;
  v446[0] = &v442;
  if ((sub_1C585F540((uint64_t)&v444, (uint64_t)v202) & 1) == 0)
  {
    v217 = (int *)v448;
LABEL_308:
    if ((_DWORD)v449)
    {
      v227 = 4 * v449;
      do
      {
        v228 = *v217;
        if (*v217 != -1)
        {
          if (v228 >= (int)v208)
            v229 = -(int)v208;
          else
            v229 = v208;
          *v217 = v229 + v228;
        }
        ++v217;
        v227 -= 4;
      }
      while (v227);
    }
    p_src = (uint64_t)&v443;
    v446[0] = &v442;
    if (sub_1C585F540((uint64_t)&v444, (uint64_t)v408))
    {
      if ((_DWORD)v208)
      {
        v231 = 0;
        v232 = -1;
        while (1)
        {
          v233 = *(_DWORD *)&v448[4 * v231];
          if (v233 != -1 && (_DWORD)v208 + (_DWORD)v231 != v233)
          {
            if (v232 != -1)
              goto LABEL_331;
            v235 = *((_DWORD *)v442 + 8);
            v236 = v235 > 0x40
                 ? *v442[3]
                 : (llvm::ConstantInt *)((uint64_t)((_QWORD)v442[3] << -(char)v235) >> -(char)v235);
            if (v236 != (llvm::ConstantInt *)v233)
              goto LABEL_331;
            v232 = v231;
          }
          if (v208 == ++v231)
            goto LABEL_345;
        }
      }
      v232 = -1;
LABEL_345:
      v245 = **v442;
      v246 = *((_DWORD *)*v442 + 2);
      LODWORD(p_src) = v246 >> 8;
      if (v246 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v444, v232, 0);
      }
      else
      {
        if (v246 <= 0xFF)
          v247 = 0;
        else
          v247 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v246);
        v444 = (llvm::ShuffleVectorInst *)(v247 & v232);
      }
      v248 = llvm::ConstantInt::get(v245, (llvm::LLVMContext *)&v444, v230);
      if (p_src >= 0x41 && v444)
        MEMORY[0x1CAA32F9C](v444, 0x1000C8000313F17);
      v442 = (llvm::ConstantInt ***)v248;
      v249 = v443;
      v447 = 257;
      v250 = operator new(0xA0uLL);
      v251 = 0;
      v9 = (uint64_t)(v250 + 24);
      v250[29] = v250[29] & 0x38000000 | 3;
      do
      {
        v252 = &v250[v251];
        *v252 = 0;
        v252[1] = 0;
        v252[2] = 0;
        v252[3] = v9;
        v251 += 8;
      }
      while (v251 != 24);
      llvm::InsertElementInst::InsertElementInst((uint64_t)(v250 + 24), v202, v249, (uint64_t)v248, (uint64_t)&v444, 0);
      goto LABEL_354;
    }
LABEL_331:
    v9 = 0;
    goto LABEL_354;
  }
  if ((_DWORD)v208)
  {
    v216 = 0;
    v217 = (int *)v448;
    v218 = -1;
    while (1)
    {
      v219 = *(_DWORD *)&v448[4 * v216];
      if (v219 != -1 && (_DWORD)v208 + (_DWORD)v216 != v219)
      {
        if (v218 != -1)
          goto LABEL_308;
        v221 = *((_DWORD *)v442 + 8);
        v222 = v221 > 0x40 ? *v442[3] : (llvm::ConstantInt *)((uint64_t)((_QWORD)v442[3] << -(char)v221) >> -(char)v221);
        if (v222 != (llvm::ConstantInt *)v219)
          goto LABEL_308;
        v218 = v216;
      }
      if (v208 == ++v216)
        goto LABEL_335;
    }
  }
  v218 = -1;
LABEL_335:
  v237 = **v442;
  v238 = *((_DWORD *)*v442 + 2);
  LODWORD(p_src) = v238 >> 8;
  if (v238 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v444, v218, 0);
  }
  else
  {
    if (v238 <= 0xFF)
      v239 = 0;
    else
      v239 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v238);
    v444 = (llvm::ShuffleVectorInst *)(v239 & v218);
  }
  v240 = llvm::ConstantInt::get(v237, (llvm::LLVMContext *)&v444, v215);
  if (p_src >= 0x41 && v444)
    MEMORY[0x1CAA32F9C](v444, 0x1000C8000313F17);
  v442 = (llvm::ConstantInt ***)v240;
  v241 = v443;
  v447 = 257;
  v242 = operator new(0xA0uLL);
  v243 = 0;
  v9 = (uint64_t)(v242 + 24);
  v242[29] = v242[29] & 0x38000000 | 3;
  do
  {
    v244 = &v242[v243];
    *v244 = 0;
    v244[1] = 0;
    v244[2] = 0;
    v244[3] = v9;
    v243 += 8;
  }
  while (v243 != 24);
  llvm::InsertElementInst::InsertElementInst((uint64_t)(v242 + 24), v408, v241, (uint64_t)v240, (uint64_t)&v444, 0);
LABEL_354:
  if (v448 != (char *)v450)
    free(v448);
  if (v9)
    goto LABEL_504;
  v253 = *((_QWORD *)a2 - 8);
  if (*(_BYTE *)(*((_QWORD *)a2 - 4) + 16) == 91)
    v254 = (llvm::ShuffleVectorInst *)*((_QWORD *)a2 - 4);
  else
    v254 = 0;
  if (v253)
  {
    if (*(_BYTE *)(v253 + 16) == 91)
    {
      if (llvm::ShuffleVectorInst::isIdentityWithPadding(*((llvm::ShuffleVectorInst **)a2 - 8)))
      {
        if (v254)
        {
          if (llvm::ShuffleVectorInst::isIdentityWithPadding(v254))
          {
            v255 = *(_QWORD **)(v253 - 64);
            v256 = (_QWORD *)*((_QWORD *)v254 - 8);
            if (*v255 == *v256)
            {
              v257 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(*(_QWORD *)a2 + 32));
              v257.i16[0] = vaddlv_u8(v257);
              if (v257.i32[0] == 1)
              {
                v258 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(*(_QWORD *)v253 + 32));
                v258.i16[0] = vaddlv_u8(v258);
                if (v258.i32[0] == 1)
                {
                  v259 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(*v255 + 32));
                  v259.i16[0] = vaddlv_u8(v259);
                  if (v259.i32[0] == 1
                    && (sub_1C4E7B480(*(_QWORD *)(v253 - 64)) & 1) == 0
                    && (sub_1C4E7B480((uint64_t)v256) & 1) == 0)
                  {
                    v380 = *(_DWORD *)(*v255 + 32);
                    v381 = *(_DWORD *)(*(_QWORD *)v253 + 32);
                    v382 = (unsigned int *)*((_QWORD *)a2 + 8);
                    v383 = *((unsigned int *)a2 + 18);
                    v448 = (char *)v450;
                    v449 = 0x1000000000;
                    sub_1C4893E04((char *)&v448, v383, -1);
                    if (!(_DWORD)v383)
                    {
LABEL_581:
                      v387 = operator new(0xA8uLL);
                      v387[21] = v387[21] & 0x38000000 | 2;
                      v9 = (uint64_t)(v387 + 16);
                      *(_QWORD *)v387 = 0;
                      *((_QWORD *)v387 + 1) = 0;
                      *((_QWORD *)v387 + 2) = 0;
                      *((_QWORD *)v387 + 3) = v387 + 16;
                      *((_QWORD *)v387 + 4) = 0;
                      *((_QWORD *)v387 + 5) = 0;
                      *((_QWORD *)v387 + 6) = 0;
                      *((_QWORD *)v387 + 7) = v387 + 16;
                      v447 = 257;
                      llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v387 + 8, v255, (uint64_t)v256, v448, v449, (uint64_t)&v444, 0);
                      v351 = v448;
                      if (v448 != (char *)v450)
                        goto LABEL_558;
                      goto LABEL_504;
                    }
                    v384 = v448;
                    while (1)
                    {
                      v386 = *v382++;
                      v385 = v386;
                      if (v386 != -1)
                      {
                        if ((int)v385 < v381)
                        {
                          if (*(_DWORD *)(*(_QWORD *)(v253 + 64) + 4 * v385) == -1)
                            goto LABEL_580;
                          goto LABEL_579;
                        }
                        if (*(_DWORD *)(*((_QWORD *)v254 + 8) + 4 * (v385 - v381)) != -1)
                        {
                          LODWORD(v385) = v380 - v381 + v385;
LABEL_579:
                          *(_DWORD *)v384 = v385;
                        }
                      }
LABEL_580:
                      v384 += 4;
                      if (!--v383)
                        goto LABEL_581;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v261 = v423;
  if (sub_1C4E7B480(v5) && sub_1C585E838(v10, (__int32 *)v425, v423, 5))
  {
    v180 = sub_1C585EA68((unsigned __int8 *)v10, (int *)v425, (llvm::Type *)v423);
    v178 = a1;
    v179 = a2;
LABEL_242:
    v9 = (uint64_t)sub_1C577F888(v178, v179, v180);
    goto LABEL_504;
  }
  v262 = 0;
  v263 = *(_DWORD *)v425;
  v264 = *(_DWORD *)&v425[4 * v423 - 4];
  if (v264 < *(_DWORD *)v425)
  {
    v265 = v421;
    goto LABEL_465;
  }
  v265 = v421;
  if (v264 < *(_DWORD *)(**((_QWORD **)a2 - 8) + 32))
  {
    if (v264 - *(_DWORD *)v425 != (_DWORD)v423 - 1)
    {
LABEL_393:
      v262 = 0;
      goto LABEL_465;
    }
    if ((_DWORD)v423)
    {
      v266 = v425;
      do
      {
        v267 = *(_DWORD *)v266;
        v266 += 4;
        if (v263 != v267)
          goto LABEL_393;
        ++v263;
      }
      while (--v261);
    }
    v268 = *(llvm::PoisonValue **)v10;
    v409 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v10);
    sub_1C4768AD0(*(_QWORD *)(a1 + 80), *((_QWORD *)v268 + 3));
    __s2 = v270;
    if ((_DWORD)v269 == 1)
    v388 = *((unsigned int *)v268 + 8);
    v448 = (char *)v450;
    v449 = 0x800000000;
    *(_QWORD *)__c = 0;
    v429 = 0;
    v430 = 0;
    v271 = (_QWORD **)*((_QWORD *)a2 + 1);
    if (v271)
    {
      v272 = 0;
      v389 = (llvm::ConstantInt *)(v418 + 1960);
      do
      {
        v273 = v271[3];
        if (v273 && *((_BYTE *)v273 + 16) == 77 && v273[1])
        {
          if (v272 >= HIDWORD(v449))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v448, (uint64_t)v450, v272 + 1, 8);
            v272 = v449;
          }
          *(_QWORD *)&v448[8 * v272] = v273;
          v272 = v449 + 1;
          LODWORD(v449) = v449 + 1;
        }
        v271 = (_QWORD **)v271[1];
      }
      while (v271);
      if (v272)
      {
        v393 = 0;
        v274 = (unsigned __int8 ***)v448;
        v419 = &v448[8 * v272];
        v416 = (a2 >> 4) ^ (a2 >> 9);
        v400 = (unsigned __int8 *)v10;
        while (1)
        {
          v275 = *v274;
          v276 = *(_DWORD *)v425;
          v277 = **v274;
          sub_1C4768AD0(*(_QWORD *)(a1 + 80), (uint64_t)v277);
          v280 = v278;
          if ((_DWORD)v279 == 1)
          {
            if (!v280)
              goto LABEL_449;
          }
          else if (!v278)
          {
            goto LABEL_449;
          }
          v281 = (llvm::Type *)(v409 / v280);
          if ((_DWORD)v281 * v280 != v409
            || (v282 = v277[8], v282 > 0x14)
            || (__na = (llvm::ValueAsMetadata *)v275, ((1 << v282) & 0x10A07F) == 0))
          {
LABEL_449:
            v265 = v421;
            goto LABEL_450;
          }
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v277, v281);
          v284 = v283;
          if (v276 * __s2 % v280)
            break;
LABEL_417:
          if (v430)
          {
            v304 = (v430 - 1) & ((v284 >> 4) ^ (v284 >> 9));
            v305 = *(_QWORD *)(*(_QWORD *)__c + 16 * v304);
            if (v284 == v305)
            {
LABEL_419:
              if (v304 != v430)
              {
                v426[0] = v284;
                v314 = sub_1C585F8E0((uint64_t)__c, v426)[1];
                goto LABEL_431;
              }
            }
            else
            {
              v338 = 1;
              while (v305 != -4096)
              {
                v339 = v304 + v338++;
                v304 = v339 & (v430 - 1);
                v305 = *(_QWORD *)(*(_QWORD *)__c + 16 * v304);
                if (v284 == v305)
                  goto LABEL_419;
              }
            }
          }
          if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
          {
            v316 = 0;
            v317 = (llvm::ShuffleVectorInst *)&byte_1C871356D;
            goto LABEL_430;
          }
          v306 = ***(_QWORD ***)a2;
          v307 = *(_QWORD *)(v306 + 152);
          v308 = *(unsigned int *)(v306 + 168);
          if (!(_DWORD)v308)
            goto LABEL_428;
          LODWORD(v309) = (v308 - 1) & v416;
          v310 = (llvm::ValueAsMetadata **)(v307 + 16 * v309);
          v311 = *v310;
          if (*v310 != a2)
          {
            v312 = 1;
            while (v311 != (llvm::ValueAsMetadata *)-4096)
            {
              v313 = v309 + v312++;
              v309 = v313 & (v308 - 1);
              v311 = *(llvm::ValueAsMetadata **)(v307 + 16 * v309);
              if (v311 == a2)
              {
                v310 = (llvm::ValueAsMetadata **)(v307 + 16 * v309);
                goto LABEL_429;
              }
            }
LABEL_428:
            v310 = (llvm::ValueAsMetadata **)(v307 + 16 * v308);
          }
LABEL_429:
          v315 = (uint64_t *)v310[1];
          v318 = *v315;
          v317 = (llvm::ShuffleVectorInst *)(v315 + 2);
          v316 = v318;
LABEL_430:
          v319 = *(uint64_t **)(a1 + 24);
          v447 = 773;
          v444 = v317;
          p_src = v316;
          v446[0] = ".bc";
          v320 = sub_1C4773E38(v319, 49, v400, v284, (uint64_t)&v444);
          v321 = (llvm::ShuffleVectorInst *)v284;
          v314 = (uint64_t)v320;
          v444 = v321;
          sub_1C585F8E0((uint64_t)__c, (uint64_t *)&v444)[1] = (uint64_t)v320;
LABEL_431:
          v322 = v280 / __s2;
          v323 = *(uint64_t **)(a1 + 24);
          v324 = llvm::ConstantInt::get(v389, v276 / v322, 0);
          if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
          {
            v334 = 0;
            v335 = (llvm::ShuffleVectorInst *)&byte_1C871356D;
            v265 = v421;
            goto LABEL_440;
          }
          v325 = ***(_QWORD ***)a2;
          v326 = *(_QWORD *)(v325 + 152);
          v327 = *(unsigned int *)(v325 + 168);
          v265 = v421;
          if (!(_DWORD)v327)
            goto LABEL_438;
          LODWORD(v328) = (v327 - 1) & v416;
          v329 = (llvm::ValueAsMetadata **)(v326 + 16 * v328);
          v330 = *v329;
          if (*v329 != a2)
          {
            v331 = 1;
            while (v330 != (llvm::ValueAsMetadata *)-4096)
            {
              v332 = v328 + v331++;
              v328 = v332 & (v327 - 1);
              v330 = *(llvm::ValueAsMetadata **)(v326 + 16 * v328);
              if (v330 == a2)
              {
                v329 = (llvm::ValueAsMetadata **)(v326 + 16 * v328);
                goto LABEL_439;
              }
            }
LABEL_438:
            v329 = (llvm::ValueAsMetadata **)(v326 + 16 * v327);
          }
LABEL_439:
          v333 = (uint64_t *)v329[1];
          v336 = *v333;
          v335 = (llvm::ShuffleVectorInst *)(v333 + 2);
          v334 = v336;
LABEL_440:
          v447 = 773;
          v444 = v335;
          p_src = v334;
          v446[0] = ".extract";
          v337 = sub_1C4772EE0(v323, v314, (uint64_t)v324, (uint64_t)&v444);
          sub_1C577F888(a1, __na, (llvm::Value *)v337);
          v393 = 1;
LABEL_450:
          if (++v274 == (unsigned __int8 ***)v419)
          {
            v340 = *(_QWORD *)__c;
            LODWORD(v271) = v393;
            goto LABEL_462;
          }
        }
        v444 = (llvm::ShuffleVectorInst *)v446;
        p_src = 0x1000000000;
        sub_1C4893E04((char *)&v444, v388, -1);
        v286 = v444;
        v287 = v444;
        v288 = v423;
        if ((_DWORD)v423)
        {
          do
          {
            *(_DWORD *)v287 = v276;
            v287 = (llvm::ShuffleVectorInst *)((char *)v287 + 4);
            ++v276;
            --v288;
          }
          while (v288);
        }
        v289 = *(_QWORD *)(a1 + 24);
        v290 = p_src;
        v391 = v286;
        if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
        {
          v300 = 0;
          v301 = &byte_1C871356D;
          goto LABEL_414;
        }
        v291 = ***(_QWORD ***)a2;
        v292 = *(_QWORD *)(v291 + 152);
        v293 = *(unsigned int *)(v291 + 168);
        if ((_DWORD)v293)
        {
          LODWORD(v294) = (v293 - 1) & v416;
          v295 = (llvm::ValueAsMetadata **)(v292 + 16 * v294);
          v296 = *v295;
          if (*v295 == a2)
          {
LABEL_413:
            v299 = v295[1];
            v302 = *(_QWORD *)v299;
            v301 = (char *)v299 + 16;
            v300 = v302;
LABEL_414:
            v427 = 773;
            v426[0] = (uint64_t)v301;
            v426[1] = v300;
            v426[2] = (uint64_t)".extract";
            v303 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v400, v285);
            v400 = (unsigned __int8 *)sub_1C486AD20(v289, (uint64_t)v400, (uint64_t)v303, v391, v290, (uint64_t)v426);
            if (v444 != (llvm::ShuffleVectorInst *)v446)
              free(v444);
            v276 = 0;
            goto LABEL_417;
          }
          v297 = 1;
          while (v296 != (llvm::ValueAsMetadata *)-4096)
          {
            v298 = v294 + v297++;
            v294 = v298 & (v293 - 1);
            v296 = *(llvm::ValueAsMetadata **)(v292 + 16 * v294);
            if (v296 == a2)
            {
              v295 = (llvm::ValueAsMetadata **)(v292 + 16 * v294);
              goto LABEL_413;
            }
          }
        }
        v295 = (llvm::ValueAsMetadata **)(v292 + 16 * v293);
        goto LABEL_413;
      }
      v340 = 0;
      LOBYTE(v271) = 0;
    }
    else
    {
      v340 = 0;
    }
LABEL_462:
    MEMORY[0x1CAA32FB4](v340, 8);
    if (v448 != (char *)v450)
      free(v448);
    v262 = (int)v271;
  }
LABEL_465:
  v352 = 0;
  if (*(_BYTE *)(v5 + 16) == 91)
    v353 = v5;
  else
    v353 = 0;
  if (*(_BYTE *)(v10 + 16) == 91)
  {
    v352 = v10;
    if ((sub_1C4E7B480(*(_QWORD *)(v10 - 32)) & 1) == 0)
    {
      if (sub_1C4E7B480(v5))
        v352 = (uint64_t)v4;
      else
        v352 = 0;
    }
  }
  if (v353)
  {
    if (sub_1C4E7B480(*(_QWORD *)(v353 - 32)))
      v354 = v353;
    else
      v354 = 0;
  }
  else
  {
    v354 = 0;
  }
  if (!(v352 | v354))
    goto LABEL_501;
  if (v352)
  {
    v355 = *(llvm::UndefValue ***)(v352 - 64);
    v410 = *(unsigned __int8 **)(v352 - 32);
    v422 = *((_DWORD *)*v355 + 8);
  }
  else
  {
    v410 = 0;
    v355 = 0;
    v422 = 0;
  }
  if (v354)
  {
    v356 = *(llvm::UndefValue ***)(v354 - 64);
    v417 = *((_DWORD *)*v356 + 8);
  }
  else
  {
    v356 = 0;
    v417 = 0;
  }
  v357 = (llvm::UndefValue *)v5;
  if (v352)
  {
    v358 = sub_1C4E7B480(v5);
    v10 = (uint64_t)v355;
    v357 = (llvm::UndefValue *)v410;
    if ((v358 & 1) == 0)
    {
      if (v422 == v424)
        v10 = (uint64_t)v355;
      else
        v10 = (uint64_t)v4;
      v357 = (llvm::UndefValue *)v5;
    }
  }
  if (v417 == v424 && v354 != 0)
    v357 = (llvm::UndefValue *)v356;
  if (v355 == v356)
  {
    v360 = 0;
  }
  else
  {
    v355 = (llvm::UndefValue **)v10;
    v360 = (llvm::UndefValue **)v357;
  }
  if (v355 == v4 && v360 == (llvm::UndefValue **)v5)
  {
LABEL_501:
    if (v262)
      v9 = (uint64_t)a2;
    else
      v9 = 0;
    goto LABEL_504;
  }
  if (v355 == v4)
  {
    v362 = 0;
    __s2a = 0;
  }
  else
  {
    __s2a = *(_DWORD **)(v352 + 64);
    v362 = *(unsigned int *)(v352 + 72);
  }
  v390 = v262;
  v363 = 0;
  __nb = v357;
  if (v354)
  {
    v401 = 0;
    if (v360 != (llvm::UndefValue **)v5)
    {
      v401 = *(_DWORD **)(v354 + 64);
      v363 = *(unsigned int *)(v354 + 72);
    }
  }
  else
  {
    v401 = 0;
  }
  v364 = v424;
  if (v355 != v4)
    v364 = v422;
  v420 = v364;
  v448 = (char *)v450;
  v449 = 0x1000000000;
  if (!(_DWORD)v265)
    goto LABEL_554;
  v392 = v362;
  v394 = v363;
  v365 = 0;
  v366 = 4 * v265;
  v367 = 1;
  v368 = -1;
  do
  {
    v369 = *(unsigned int *)&v425[v365];
    if ((v369 & 0x80000000) != 0)
    {
LABEL_527:
      LODWORD(v369) = -1;
      goto LABEL_550;
    }
    if ((int)v369 >= v424)
    {
      if ((sub_1C4E7B480(v5) & 1) != 0)
      {
        v370 = -1;
      }
      else
      {
        v370 = *(_DWORD *)&v425[v365] - v424;
        if (v360 != (llvm::UndefValue **)v5)
        {
          v370 = v401[v370];
          if (v370 >= v417)
            v370 = -1;
        }
      }
      v372 = v355 == v360 || v360 == 0 || v370 < 0;
      v373 = v420;
      if (v372)
        v373 = 0;
      LODWORD(v369) = v373 + v370;
      goto LABEL_542;
    }
    if (v355 != v4)
    {
      LODWORD(v369) = __s2a[v369];
      if ((int)v369 >= v422 && v410[16] - 11 < 2)
        goto LABEL_527;
LABEL_542:
      if ((v369 & 0x80000000) != 0)
        goto LABEL_550;
    }
    v375 = v368 < 0 || v368 == (_DWORD)v369;
    v367 &= v375;
    v368 = v369;
LABEL_550:
    v376 = v449;
    if (v449 >= (unint64_t)HIDWORD(v449))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v448, (uint64_t)v450, v449 + 1, 4);
      v376 = v449;
    }
    *(_DWORD *)&v448[4 * v376] = v369;
    v377 = (v449 + 1);
    LODWORD(v449) = v449 + 1;
    v365 += 4;
  }
  while (v366 != v365);
  if ((v367 & 1) == 0
    && (v392 != v377 || memcmp(v448, __s2a, 4 * v392))
    && (v394 != v377 || memcmp(v448, v401, 4 * v394))
    && ((_DWORD)v423 != (_DWORD)v377 || memcmp(v448, v425, 4 * v377)))
  {
    if (v390)
      v9 = (uint64_t)a2;
    else
      v9 = 0;
    goto LABEL_557;
  }
LABEL_554:
  if (!v360)
    __nb = llvm::UndefValue::get(*v355, v260);
  v378 = operator new(0xA8uLL);
  v378[21] = v378[21] & 0x38000000 | 2;
  v9 = (uint64_t)(v378 + 16);
  *(_QWORD *)v378 = 0;
  *((_QWORD *)v378 + 1) = 0;
  *((_QWORD *)v378 + 2) = 0;
  *((_QWORD *)v378 + 3) = v378 + 16;
  *((_QWORD *)v378 + 4) = 0;
  *((_QWORD *)v378 + 5) = 0;
  *((_QWORD *)v378 + 6) = 0;
  *((_QWORD *)v378 + 7) = v378 + 16;
  v447 = 257;
  llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v378 + 8, v355, (uint64_t)__nb, v448, v449, (uint64_t)&v444, 0);
LABEL_557:
  v351 = v448;
  if (v448 != (char *)v450)
LABEL_558:
    free(v351);
LABEL_504:
  if (v434 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v436 >= 0x41 && v435)
    MEMORY[0x1CAA32F9C](v435, 0x1000C8000313F17);
  return (llvm::UndefValue **)v9;
}

uint64_t sub_1C585E838(uint64_t a1, __int32 *a2, size_t a3, int a4)
{
  unsigned int v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  int v18;
  char v19;
  __int32 *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  __int32 *v32;
  __int32 *v33;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 < 0x15)
    return 1;
  v9 = a1;
  v10 = a3;
  while (1)
  {
    if (v4 < 0x1C)
      return 0;
    v11 = *(_QWORD *)(v9 + 8);
    if (!v11)
      return 0;
    result = 0;
    if (!a4 || *(_QWORD *)(v11 + 8))
      return result;
    v12 = v4 - 41;
    if (v12 > 0x31)
      return 0;
    if (v12 != 49)
      break;
    v13 = *(_DWORD *)(v9 + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = *(_QWORD *)(v9 - 8);
    else
      v14 = v9 - 32 * (v13 & 0x7FFFFFF);
    result = 0;
    v15 = *(_QWORD *)(v14 + 64);
    if (!v15 || *(_BYTE *)(v15 + 16) != 16)
      return result;
    v16 = (_QWORD *)(v15 + 24);
    v17 = *(_DWORD *)(v15 + 32);
    if (v17 >= 0x41)
    {
      if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v15 + 24)) > 0x40)
      {
        v18 = -1;
        if (v10)
          goto LABEL_21;
        goto LABEL_25;
      }
      v16 = (_QWORD *)*v16;
    }
    v18 = *(_DWORD *)v16;
    if (v10)
    {
LABEL_21:
      v19 = 0;
      v20 = a2;
      v21 = v10;
      do
      {
        v23 = *v20++;
        v22 = v23;
        if (v23 == v18 && (v19 & 1) != 0)
          return 0;
        v19 |= v22 == v18;
      }
      while (--v21);
    }
LABEL_25:
    if ((v13 & 0x40000000) != 0)
      v24 = *(uint64_t **)(v9 - 8);
    else
      v24 = (uint64_t *)(v9 - 32 * (v13 & 0x7FFFFFF));
    v9 = *v24;
    --a4;
    v4 = *(unsigned __int8 *)(*v24 + 16);
    result = 1;
    if (v4 <= 0x14)
      return result;
  }
  if (((1 << v12) & 0x303FE23F93FLL) == 0)
  {
    result = 0;
    if (((1 << v12) & 0x6C0) == 0)
      return result;
    v32 = wmemchr(a2, -1, a3);
    v33 = v32 ? v32 : &a2[a3];
    if (a3 != v33 - a2)
      return 0;
  }
  if ((*(_DWORD *)(*(_QWORD *)v9 + 8) & 0xFE) == 0x12 && a3 > *(unsigned int *)(*(_QWORD *)v9 + 32))
    return 0;
  v25 = *(_DWORD *)(v9 + 20);
  if ((v25 & 0x40000000) != 0)
  {
    v27 = *(uint64_t **)(v9 - 8);
    v26 = v25 & 0x7FFFFFF;
    if (!v26)
      return 1;
  }
  else
  {
    v26 = v25 & 0x7FFFFFF;
    v27 = (uint64_t *)(v9 - 32 * v26);
    if (!v26)
      return 1;
  }
  v28 = (a4 - 1);
  v29 = 32 * v26 - 32;
  do
  {
    v30 = *v27;
    v27 += 4;
    result = sub_1C585E838(v30, a2, a3, v28);
    if ((_DWORD)result)
      v31 = v29 == 0;
    else
      v31 = 1;
    v29 -= 32;
  }
  while (!v31);
  return result;
}

llvm::UndefValue *sub_1C585EA68(unsigned __int8 *a1, int *a2, llvm::Type *a3)
{
  uint64_t v6;
  llvm::FixedVectorType *v7;
  llvm::FixedVectorType *v8;
  uint64_t v9;
  llvm::Type *v10;
  unsigned int v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  llvm::Value **v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  _QWORD *v29;
  llvm::UndefValue *v31;
  llvm::Type *v32;
  llvm::ConstantAggregateZero *v33;
  llvm::Type *v34;
  llvm *v35;
  llvm::Type *v36;
  char v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  void *v45;
  uint64_t v46;
  _WORD v47[32];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  while (1)
  {
    v7 = *(llvm::FixedVectorType **)a1;
    v8 = *(llvm::FixedVectorType **)a1;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
      v8 = (llvm::FixedVectorType *)**((_QWORD **)v7 + 2);
    v9 = **(_QWORD **)v7;
    if (sub_1C4E7B480((uint64_t)a1))
    {
      llvm::FixedVectorType::get(v8, a3);
      return llvm::UndefValue::get(v31, v32);
    }
    v11 = a1[16];
    if (v11 == 13)
    {
      llvm::FixedVectorType::get(v8, a3);
      return (llvm::UndefValue *)llvm::ConstantAggregateZero::get(v33, v34);
    }
    if (v11 <= 0x14)
    {
      v35 = (llvm *)llvm::PoisonValue::get(*(llvm::PoisonValue **)a1, v10);
      return llvm::ConstantExpr::getShuffleVector((llvm *)a1, v35, a2, (_BOOL8)a3, 0);
    }
    if (v11 != 90)
    {
      v45 = v47;
      v46 = 0x800000000;
      v36 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)a1 + 32);
      v37 = a3 != v36;
      v38 = *((_DWORD *)a1 + 5);
      if ((v38 & 0x7FFFFFF) != 0)
      {
        v39 = 0;
        v40 = 0;
        v41 = 32 * (v38 & 0x7FFFFFF);
        do
        {
          if ((v38 & 0x40000000) != 0)
            v42 = (unsigned __int8 *)*((_QWORD *)a1 - 1);
          else
            v42 = &a1[-32 * (v38 & 0x7FFFFFF)];
          v43 = *(_QWORD *)&v42[v39];
          if ((*(_DWORD *)(*(_QWORD *)v43 + 8) & 0xFE) == 0x12)
          {
            v43 = sub_1C585EA68(v43, a2, a3);
            v40 = v46;
          }
          if (v40 >= HIDWORD(v46))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v40 + 1, 8);
            v40 = v46;
          }
          *((_QWORD *)v45 + v40) = v43;
          v40 = v46 + 1;
          LODWORD(v46) = v46 + 1;
          v38 = *((_DWORD *)a1 + 5);
          if ((v38 & 0x40000000) != 0)
            v44 = (unsigned __int8 *)*((_QWORD *)a1 - 1);
          else
            v44 = &a1[-32 * (v38 & 0x7FFFFFF)];
          v37 |= v43 != *(_QWORD *)&v44[v39];
          v39 += 32;
        }
        while (v41 != v39);
        if ((v37 & 1) != 0)
        {
          v11 = a1[16];
          goto LABEL_53;
        }
      }
      else if (a3 != v36)
      {
LABEL_53:
        __asm { BR              X11 }
      }
      v28 = a1;
      if (v45 != v47)
        free(v45);
      return (llvm::UndefValue *)v28;
    }
    v12 = *((_DWORD *)a1 + 5);
    if ((v12 & 0x40000000) != 0)
      v13 = (unsigned __int8 *)*((_QWORD *)a1 - 1);
    else
      v13 = &a1[-32 * (v12 & 0x7FFFFFF)];
    v14 = *((_QWORD *)v13 + 8);
    v15 = (_QWORD *)(v14 + 24);
    v16 = *(_DWORD *)(v14 + 32);
    if (v16 < 0x41)
      goto LABEL_16;
    if (v16 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v14 + 24)) <= 0x40)
      break;
    v17 = -1;
    if ((_DWORD)a3)
      goto LABEL_17;
LABEL_20:
    if ((v12 & 0x40000000) != 0)
      v19 = (unsigned __int8 **)*((_QWORD *)a1 - 1);
    else
      v19 = (unsigned __int8 **)&a1[-32 * (v12 & 0x7FFFFFF)];
    a1 = *v19;
  }
  v15 = (_QWORD *)*v15;
LABEL_16:
  v17 = *(_DWORD *)v15;
  if (!(_DWORD)a3)
    goto LABEL_20;
LABEL_17:
  v18 = 0;
  while (a2[v18] != v17)
  {
    if (v6 == ++v18)
      goto LABEL_20;
  }
  if ((v12 & 0x40000000) != 0)
    v20 = (unsigned __int8 *)*((_QWORD *)a1 - 1);
  else
    v20 = &a1[-32 * (v12 & 0x7FFFFFF)];
  v21 = (_QWORD *)sub_1C585EA68(*(_QWORD *)v20, a2, a3);
  v22 = *((_DWORD *)a1 + 5);
  if ((v22 & 0x40000000) != 0)
    v23 = (unsigned __int8 *)*((_QWORD *)a1 - 1);
  else
    v23 = &a1[-32 * (v22 & 0x7FFFFFF)];
  v24 = *((_QWORD *)v23 + 4);
  v25 = llvm::ConstantInt::get((llvm::ConstantInt *)(v9 + 1960), v18, 0);
  v47[8] = 257;
  v26 = operator new(0xA0uLL);
  v27 = 0;
  v28 = (unsigned __int8 *)(v26 + 24);
  v26[29] = v26[29] & 0x38000000 | 3;
  do
  {
    v29 = &v26[v27];
    *v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = v28;
    v27 += 8;
  }
  while (v27 != 24);
  llvm::InsertElementInst::InsertElementInst((uint64_t)(v26 + 24), v21, v24, (uint64_t)v25, (uint64_t)&v45, (uint64_t)a1);
  return (llvm::UndefValue *)v28;
}

uint64_t sub_1C585F294(_BYTE *a1, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  unint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  _BYTE *v27;

  v8 = *(unsigned int *)(*(_QWORD *)a1 + 32);
  if (sub_1C4E7B480((uint64_t)a1))
  {
    sub_1C4893E04((char *)a4, v8, -1);
    return 1;
  }
  if (a1 == a2)
  {
    if ((_DWORD)v8)
    {
      v19 = 0;
      v20 = *(_DWORD *)(a4 + 8);
      do
      {
        if (v20 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v20 + 1, 4);
          v20 = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v20) = v19;
        v20 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v20;
        ++v19;
      }
      while ((_DWORD)v8 != v19);
    }
    return 1;
  }
  if (a1 == a3)
  {
    if ((_DWORD)v8)
    {
      v21 = 0;
      v22 = *(_DWORD *)(a4 + 8);
      do
      {
        if (v22 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v22 + 1, 4);
          v22 = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v22) = v8 + v21;
        v22 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v22;
        ++v21;
      }
      while ((_DWORD)v8 != v21);
    }
    return 1;
  }
  if (a1[16] == 90)
  {
    v11 = *((_QWORD *)a1 - 4);
    if (*(_BYTE *)(v11 + 16) != 16)
    {
      v9 = 0;
      goto LABEL_28;
    }
    v12 = *((_QWORD *)a1 - 12);
    v13 = *((_QWORD *)a1 - 8);
    v14 = (_QWORD *)(v11 + 24);
    if (*(_DWORD *)(v11 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    v15 = (_QWORD *)*v14;
    v16 = *(unsigned __int8 *)(v13 + 16);
    if ((v16 - 11) > 1)
    {
      if (v16 == 89)
      {
        v24 = *(_QWORD *)(v13 - 32);
        if (*(_BYTE *)(v24 + 16) == 16)
        {
          v25 = (_QWORD *)(v24 + 24);
          if (*(_DWORD *)(v24 + 32) >= 0x41u)
            v25 = (_QWORD *)*v25;
          v18 = *(_DWORD *)v25;
          v26 = *(_DWORD *)(*(_QWORD *)a2 + 32);
          v27 = *(_BYTE **)(v13 - 64);
          if (v27 == a2 || v27 == a3)
          {
            if (sub_1C585F294(v12, a2, a3, a4))
            {
              if (*(_BYTE **)(v13 - 64) != a2)
                v18 += v26;
              v17 = v15 % v8;
              goto LABEL_13;
            }
          }
        }
      }
    }
    else if (sub_1C585F294(v12, a2, a3, a4))
    {
      v17 = v15;
      v18 = -1;
LABEL_13:
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v17) = v18;
      v9 = 1;
LABEL_28:
      v23 = 1;
      return v9 & v23;
    }
    v23 = 0;
    v9 = 1;
    return v9 & v23;
  }
  v23 = 0;
  return v9 & v23;
}

uint64_t sub_1C585F4E4(_QWORD **a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16) != 90)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  v4 = *v3;
  if (!v4)
    return 0;
  v6 = *a1;
  v5 = a1 + 2;
  *v6 = v4;
  v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) != 0)
    v8 = *(_QWORD *)(a2 - 8);
  else
    v8 = a2 - 32 * (v7 & 0x7FFFFFF);
  return sub_1C4E7B154(v5, *(_QWORD *)(v8 + 64));
}

uint64_t sub_1C585F540(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16) != 90)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  v3 = (v2 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v2 & 0x7FFFFFF);
  v4 = *(_QWORD *)(v3 + 32);
  if (!v4)
    return 0;
  **(_QWORD **)(a1 + 8) = v4;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = (v5 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
  v7 = *(_QWORD *)(v6 + 64);
  if (!v7 || *(_BYTE *)(v7 + 16) != 16)
    return 0;
  **(_QWORD **)(a1 + 16) = v7;
  return 1;
}

_QWORD *sub_1C585F5B8(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v7;
  _QWORD *v8;

  v3 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v4 = 4;
  else
    v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  v7 = (uint64_t)a1;
  sub_1C585F678((uint64_t)a1, v4);
  v8 = 0;
  sub_1C4E85724(v7, *a2, &v8);
  a1 = (_DWORD *)v7;
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C585F678(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C62A8DD4(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C62A8DD4(a1, v14, v9);
}

uint64_t sub_1C585F7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t result;
  _QWORD *v9;

  v4 = *(_QWORD *)(a2 - 64);
  if (v4)
  {
    **(_QWORD **)a1 = v4;
    v4 = *(_QWORD *)(a2 - 32);
    if (v4 && *(unsigned __int8 *)(v4 + 16) <= 0x14u)
    {
      v9 = *(_QWORD **)(a1 + 8);
LABEL_16:
      *v9 = v4;
      return 1;
    }
  }
  v6 = a1 + 16;
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 43)
  {
    result = sub_1C4D8AC3C(v6, *(llvm::Constant **)(a2 - 64));
    if ((_DWORD)result)
    {
      v4 = *(_QWORD *)(a2 - 32);
      if (v4)
      {
        v9 = *(_QWORD **)(a1 + 24);
        goto LABEL_16;
      }
      return 0;
    }
  }
  else
  {
    if (v7 == 5)
    {
      if (*(_WORD *)(a2 + 18) == 15
        && sub_1C4E71060(v6, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))))
      {
        v4 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
        if (v4)
        {
          **(_QWORD **)(a1 + 24) = v4;
          LOBYTE(v4) = 1;
        }
      }
      else
      {
        LOBYTE(v4) = 0;
      }
    }
    return (v7 == 5) & v4;
  }
  return result;
}

uint64_t *sub_1C585F8E0(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C585F9BC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_5;
  }
  else
  {
    v7 *= 2;
  }
  sub_1C585FA50(a1, v7);
  v8 = 0;
  sub_1C585F9BC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1C585F9BC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v6 = a2 - 1;
    v7 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(a1 + 16 * v7);
    v8 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v4;
        v13 = v7 + v10++;
        v7 = v13 & v6;
        v4 = (_QWORD *)(a1 + 16 * (v13 & v6));
        v8 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_8;
      }
      v5 = 0;
      if (v9)
        v4 = v9;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_8:
  *a4 = v4;
  return v5;
}

_QWORD *sub_1C585FA50(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62A8EF0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::getAddressSanitizerParams(llvm *this, const llvm::Triple *a2, int a3, _QWORD *a4, unint64_t *a5, int *a6, BOOL *a7)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  result = sub_1C585FB70((uint64_t)&v11, (int *)this, (int)a2, a3);
  *a4 = v12;
  *(_DWORD *)a5 = v11;
  *(_BYTE *)a6 = v13;
  return result;
}

uint64_t sub_1C585FB70(uint64_t result, int *a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  _BOOL4 v8;
  int v9;
  BOOL v12;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  char v22;
  char v23;

  v4 = result;
  v6 = a2[9];
  v5 = a2[10];
  v8 = v6 == 7 || v6 == 28 || (v6 - 29) < 3;
  if ((v6 & 0xFFFFFFFE) == 0x20)
    v8 = 1;
  v9 = a2[6];
  v12 = v9 == 42 && a2[8] == 3 && v6 == 25;
  v14 = (v9 - 1) < 2 || (v9 - 39) < 2;
  v15 = 3;
  *(_DWORD *)result = 3;
  if (word_1EF8F3EB8)
  {
    v15 = dword_1EF8F3F30;
    *(_DWORD *)result = dword_1EF8F3F30;
  }
  v16 = v9 & 0xFFFFFFFE;
  if (a3 != 32)
  {
    if (v6 == 6)
      goto LABEL_30;
    if ((v9 - 23) <= 1)
    {
LABEL_34:
      v17 = 0x100000000000;
      goto LABEL_74;
    }
    if (v9 == 36)
    {
      v17 = 0x10000000000000;
      goto LABEL_74;
    }
    if (v6 != 5 || v16 == 18)
    {
      if (v6 != 12)
      {
        if (v12)
        {
          v17 = 0x10000000000;
          goto LABEL_74;
        }
        if (v6 == 9 && v9 == 42)
        {
          if (a4)
          {
            v18 = 0xFC0000000000;
            goto LABEL_51;
          }
        }
        else
        {
          if (v6 == 15 && v9 == 42)
            goto LABEL_28;
          if (v16 == 18)
          {
            v17 = 0x2000000000;
            goto LABEL_74;
          }
          if (v8 || (v6 & 0xFFFFFFF7) == 3 && v9 == 3)
            goto LABEL_28;
          if (v9 == 3)
          {
            v17 = 0x1000000000;
            goto LABEL_74;
          }
          if (v9 != 25 && v9 != 30)
          {
            if (v9 == 32)
            {
              v17 = 0xD55550000;
              goto LABEL_74;
            }
            goto LABEL_34;
          }
        }
        v17 = (-4096 << v15) & 0x7FFFF000;
        goto LABEL_74;
      }
      if (a4)
      {
        v18 = 0x900000000000;
        goto LABEL_51;
      }
    }
    else if (a4)
    {
      v18 = 0xF7C000000000;
LABEL_51:
      v17 = v18 & 0xFFFFFFFFFFFFLL | 0xDFFF000000000000;
      goto LABEL_74;
    }
    v17 = 0x400000000000;
    goto LABEL_74;
  }
  if (v5 != 11)
  {
    if (v16 == 16)
    {
      v17 = 178913280;
      goto LABEL_74;
    }
    if (v6 == 5 || v6 == 12)
    {
      v17 = 0x40000000;
      goto LABEL_74;
    }
    if (!v8)
    {
      if (v6 == 15)
      {
        v17 = 805306368;
        goto LABEL_74;
      }
      if (v6 != 40)
      {
        v17 = 0x20000000;
        goto LABEL_74;
      }
LABEL_30:
      v17 = 0;
      *(_QWORD *)(result + 8) = 0;
      goto LABEL_75;
    }
  }
LABEL_28:
  v17 = -1;
LABEL_74:
  *(_QWORD *)(result + 8) = v17;
LABEL_75:
  if (byte_1ED8118C0)
  {
    v17 = -1;
    *(_QWORD *)(result + 8) = -1;
  }
  if (word_1EF8F4AB8)
  {
    v17 = xmmword_1EF8F4B30;
    *(_QWORD *)(result + 8) = xmmword_1EF8F4B30;
  }
  v19 = !v12
     && ((v20 = v9 - 3, v20 >= 0x22) || ((0x220300001uLL >> v20) & 1) == 0)
     && (v17 & (v17 - 1)) == 0
     && v17 != -1;
  *(_BYTE *)(result + 16) = v19;
  if (v5 == 11)
  {
    result = sub_1C4F7A460(a2, 0x15u);
    v22 = result ^ 1;
  }
  else
  {
    v22 = 0;
  }
  if (byte_1ED811980)
    v23 = v22 & v14;
  else
    v23 = 0;
  *(_BYTE *)(v4 + 17) = v23;
  return result;
}

uint64_t llvm::ASanAccessInfo::ASanAccessInfo(uint64_t this, unsigned int a2)
{
  *(_DWORD *)this = a2;
  *(_BYTE *)(this + 4) = (a2 >> 1) & 0xF;
  *(_BYTE *)(this + 5) = (a2 & 0x20) != 0;
  *(_BYTE *)(this + 6) = a2 & 1;
  return this;
}

{
  *(_DWORD *)this = a2;
  *(_BYTE *)(this + 4) = (a2 >> 1) & 0xF;
  *(_BYTE *)(this + 5) = (a2 & 0x20) != 0;
  *(_BYTE *)(this + 6) = a2 & 1;
  return this;
}

uint64_t llvm::ASanAccessInfo::ASanAccessInfo(uint64_t this, int a2, int a3, int a4)
{
  int v4;

  if (a2)
    v4 = 32;
  else
    v4 = 0;
  *(_DWORD *)this = (v4 | a3) + 2 * a4;
  *(_BYTE *)(this + 4) = a4;
  *(_BYTE *)(this + 5) = a2;
  *(_BYTE *)(this + 6) = a3;
  return this;
}

{
  int v4;

  if (a2)
    v4 = 32;
  else
    v4 = 0;
  *(_DWORD *)this = (v4 | a3) + 2 * a4;
  *(_BYTE *)(this + 4) = a4;
  *(_BYTE *)(this + 5) = a2;
  *(_BYTE *)(this + 6) = a3;
  return this;
}

_QWORD *llvm::LocationMetadata::parse(_QWORD *this, llvm::MDNode *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int *v11;
  unsigned int v12;
  int v13;

  v2 = this;
  v3 = (_QWORD *)((char *)a2 - 8 * *((unsigned int *)a2 + 2));
  v4 = *(uint64_t **)(*v3 + 8);
  v5 = *v4;
  *this = v4 + 3;
  this[1] = v5;
  v6 = *(_QWORD *)(v3[1] + 128);
  v7 = (_QWORD *)(v6 + 24);
  v8 = *(_DWORD *)(v6 + 32);
  if (v8 >= 0x41)
  {
    this = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v6 + 24));
    if (v8 - this > 0x40)
    {
      v9 = -1;
      goto LABEL_6;
    }
    v7 = (_QWORD *)*v7;
  }
  v9 = *(_DWORD *)v7;
LABEL_6:
  *((_DWORD *)v2 + 4) = v9;
  v10 = *(_QWORD *)(v3[2] + 128);
  v11 = (int *)(v10 + 24);
  v12 = *(_DWORD *)(v10 + 32);
  if (v12 < 0x41)
  {
LABEL_10:
    v13 = *v11;
    goto LABEL_11;
  }
  this = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v10 + 24));
  if (v12 - this <= 0x40)
  {
    v11 = *(int **)v11;
    goto LABEL_10;
  }
  v13 = -1;
LABEL_11:
  *((_DWORD *)v2 + 5) = v13;
  return this;
}

uint64_t llvm::ModuleAddressSanitizerPass::ModuleAddressSanitizerPass(uint64_t result, _QWORD *a2, char a3, char a4, int a5)
{
  *(_QWORD *)result = *a2;
  *(_BYTE *)(result + 8) = a3;
  *(_BYTE *)(result + 9) = a4;
  *(_DWORD *)(result + 12) = a5;
  return result;
}

{
  *(_QWORD *)result = *a2;
  *(_BYTE *)(result + 8) = a3;
  *(_BYTE *)(result + 9) = a4;
  *(_DWORD *)(result + 12) = a5;
  return result;
}

void llvm::ModuleAddressSanitizerPass::run(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  uint64_t ResultImpl;
  uint64_t v14;
  _BYTE v15[8];
  void *__p;
  char v17;
  uint64_t v18;
  _BYTE v19[40];
  void *v20;
  char v21;

  v8 = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::ASanGlobalsMetadataAnalysis::Key, (uint64_t)a2) + 8;
  sub_1C5860150((uint64_t)v19, (uint64_t)a2, v8, *(_BYTE *)a1, *(_BYTE *)(a1 + 1), *(_BYTE *)(a1 + 8), *(_BYTE *)(a1 + 9), *(_DWORD *)(a1 + 12));
  v9 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)a2)+ 8);
  if (byte_1ED8115C0)
    v10 = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::StackSafetyGlobalAnalysis::Key, (uint64_t)a2) + 8;
  else
    v10 = 0;
  for (i = (_QWORD *)a2[4]; i != a2 + 3; i = (_QWORD *)i[1])
  {
    if (i)
      v12 = (uint64_t)(i - 7);
    else
      v12 = 0;
    sub_1C58603D0((uint64_t)v15, (uint64_t)a2, v8, v10, *(_BYTE *)a1, *(_BYTE *)(a1 + 1), *(_BYTE *)(a1 + 2), *(_DWORD *)(a1 + 4));
    ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(v9, &llvm::TargetLibraryAnalysis::Key, v12);
    sub_1C5860654((uint64_t)v15, v12, ResultImpl + 8, v14);
    MEMORY[0x1CAA32FB4](v18, 8);
    if (v17 < 0)
      operator delete(__p);
  }
  sub_1C58634BC((uint64_t)v19, a2);
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_QWORD *)(a4 + 88) = 0;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_DWORD *)(a4 + 64) = 2;
  if (v21 < 0)
    operator delete(v20);
}

uint64_t sub_1C5860150(uint64_t a1, uint64_t a2, uint64_t a3, BOOL a4, BOOL a5, char a6, char a7, int a8)
{
  BOOL v11;
  char v12;
  BOOL v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  _DWORD *v22;
  int v23;
  _QWORD v24[4];
  __int16 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  *(_QWORD *)a1 = a3;
  if (word_1ED811188)
    a4 = byte_1ED811200 != 0;
  *(_BYTE *)(a1 + 8) = a4;
  v11 = byte_1ED8112C0 != 0;
  if (!word_1ED811248)
    v11 = a5;
  *(_BYTE *)(a1 + 9) = v11;
  if (byte_1EF8F46B0)
    v12 = a6;
  else
    v12 = 0;
  v13 = !a4;
  *(_BYTE *)(a1 + 10) = v12 & v13;
  if (byte_1EF8F4530)
    v14 = 1;
  else
    v14 = a7;
  *(_BYTE *)(a1 + 11) = v14;
  if (byte_1EF8F45F0)
    v15 = 1;
  else
    v15 = a7;
  *(_BYTE *)(a1 + 12) = v15;
  if (byte_1EF8F4770)
    v16 = a6;
  else
    v16 = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v17 = a1 + 40;
  *(_BYTE *)(a1 + 13) = v16 & v13;
  *(_DWORD *)(a1 + 16) = a8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  v18 = *(_QWORD **)a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a2;
  v19 = *(_DWORD *)(*(_QWORD *)(a2 + 504) + 4);
  LODWORD(v26) = v19;
  if (v19 <= 63)
  {
    if (v19 <= 31)
    {
      switch(v19)
      {
        case 16:
          v20 = (_QWORD *)(*v18 + 1936);
          goto LABEL_26;
        case 8:
          v20 = (_QWORD *)(*v18 + 1912);
          goto LABEL_26;
        case 1:
          v20 = (_QWORD *)(*v18 + 1888);
          goto LABEL_26;
      }
    }
    else if (v19 == 32)
    {
      v20 = (_QWORD *)(*v18 + 1960);
      goto LABEL_26;
    }
  }
  else
  {
    if (v19 == 64)
    {
      v20 = (_QWORD *)(*v18 + 1984);
      goto LABEL_26;
    }
    if (v19 == 128)
    {
      v20 = (_QWORD *)(*v18 + 2008);
      goto LABEL_26;
    }
  }
  v22 = sub_1C5270984(*v18 + 2168, &v26);
  v20 = (_QWORD *)*((_QWORD *)v22 + 1);
  if (!v20)
  {
    v20 = (_QWORD *)sub_1C484358C(*v18 + 2040, 24, 3);
    v23 = v26;
    *v20 = v18;
    v20[2] = 0;
    v20[1] = (v23 << 8) | 0xDu;
    *((_QWORD *)v22 + 1) = v20;
  }
LABEL_26:
  *(_QWORD *)(a1 + 24) = v20;
  v25 = 260;
  v24[0] = a2 + 216;
  llvm::Triple::Triple((uint64_t)&v26, (llvm::Twine *)v24);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)v17);
  *(_OWORD *)v17 = v26;
  *(_QWORD *)(v17 + 16) = v27;
  *(_OWORD *)(v17 + 24) = v28;
  *(_QWORD *)(v17 + 40) = v29;
  sub_1C585FB70((uint64_t)&v26, (int *)v17, v19, *(unsigned __int8 *)(a1 + 8));
  *(_QWORD *)(a1 + 104) = v27;
  *(_OWORD *)(a1 + 88) = v26;
  if (dword_1EF8F5020 != 2)
    *(_DWORD *)(a1 + 16) = dword_1EF8F5020;
  return a1;
}

uint64_t sub_1C58603D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL a5, BOOL a6, char a7, int a8)
{
  uint64_t v12;
  int v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  _DWORD *v21;
  int v22;
  _QWORD v23[4];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  *(_OWORD *)(a1 + 8) = 0u;
  v12 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  if (word_1ED811188)
    a5 = byte_1ED811200 != 0;
  *(_BYTE *)(a1 + 60) = a5;
  if (word_1ED811248)
    a6 = byte_1ED8112C0 != 0;
  *(_BYTE *)(a1 + 61) = a6;
  if (byte_1ED811E00)
    a7 = 1;
  *(_BYTE *)(a1 + 62) = a7;
  v16 = dword_1EF8F4DC8;
  if (!word_1EF8F4D50)
    v16 = a8;
  *(_DWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 136) = 0uLL;
  *(_OWORD *)(a1 + 152) = 0uLL;
  bzero((void *)(a1 + 176), 0x338uLL);
  *(_QWORD *)(a1 + 1000) = a3;
  *(_QWORD *)(a1 + 1008) = a4;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  v17 = *(_QWORD **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v18 = *(_DWORD *)(*(_QWORD *)(a2 + 504) + 4);
  *(_DWORD *)(a1 + 56) = v18;
  LODWORD(v25) = v18;
  if (v18 <= 63)
  {
    if (v18 <= 31)
    {
      switch(v18)
      {
        case 16:
          v19 = (_QWORD *)(*v17 + 1936);
          goto LABEL_20;
        case 8:
          v19 = (_QWORD *)(*v17 + 1912);
          goto LABEL_20;
        case 1:
          v19 = (_QWORD *)(*v17 + 1888);
          goto LABEL_20;
      }
    }
    else if (v18 == 32)
    {
      v19 = (_QWORD *)(*v17 + 1960);
      goto LABEL_20;
    }
  }
  else
  {
    if (v18 == 64)
    {
      v19 = (_QWORD *)(*v17 + 1984);
      goto LABEL_20;
    }
    if (v18 == 128)
    {
      v19 = (_QWORD *)(*v17 + 2008);
      goto LABEL_20;
    }
  }
  v21 = sub_1C5270984(*v17 + 2168, &v25);
  v19 = (_QWORD *)*((_QWORD *)v21 + 1);
  if (!v19)
  {
    v19 = (_QWORD *)sub_1C484358C(*v17 + 2040, 24, 3);
    v22 = v25;
    *v19 = v17;
    v19[2] = 0;
    v19[1] = (v22 << 8) | 0xDu;
    *((_QWORD *)v21 + 1) = v19;
  }
LABEL_20:
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)a1 + 1912), 0);
  *(_QWORD *)(a1 + 88) = **(_QWORD **)a1 + 1960;
  v24 = 260;
  v23[0] = a2 + 216;
  llvm::Triple::Triple((uint64_t)&v25, (llvm::Twine *)v23);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v12);
  *(_OWORD *)v12 = v25;
  *(_QWORD *)(v12 + 16) = v26;
  *(_OWORD *)(a1 + 32) = v27;
  *(_QWORD *)(a1 + 48) = v28;
  sub_1C585FB70((uint64_t)&v25, (int *)v12, *(_DWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 60));
  *(_OWORD *)(a1 + 96) = v25;
  *(_QWORD *)(a1 + 112) = v26;
  return a1;
}

uint64_t sub_1C5860654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ***v5;
  _QWORD *v6;
  uint64_t ***v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v11;
  unint64_t v12;
  size_t v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ****v21;
  uint64_t ***v22;
  int v23;
  int v24;
  uint64_t ***v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  int v33;
  int v34;
  uint64_t *v35;
  int v36;
  int v37;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  int v42;
  int v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  const char *v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const std::string::value_type *p_dst;
  std::string::size_type v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  std::string::size_type v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  std::string *v73;
  std::string::size_type v74;
  unsigned __int8 *v75;
  unint64_t v76;
  llvm::PointerType *v77;
  llvm::PointerType *inserted;
  uint64_t v79;
  uint64_t v80;
  const std::string::value_type *v81;
  std::string::size_type v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  std::string::size_type v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  std::string::size_type v90;
  unsigned __int8 *v91;
  unint64_t v92;
  llvm::PointerType *v93;
  llvm::PointerType *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t i;
  uint64_t v98;
  unint64_t v99;
  const std::string::value_type *v100;
  std::string::size_type v101;
  std::string *v102;
  std::string::size_type v103;
  void **v104;
  std::string::size_type v105;
  std::string *v106;
  std::string::size_type v107;
  const std::string::value_type *v108;
  std::string::size_type v109;
  std::string *v110;
  std::string::size_type v111;
  std::string *v112;
  unint64_t size;
  llvm::PointerType *v114;
  llvm::PointerType *v115;
  uint64_t v116;
  uint64_t v117;
  void **v118;
  std::string::size_type v119;
  std::string *v120;
  std::string::size_type v121;
  const std::string::value_type *v122;
  std::string::size_type v123;
  std::string *v124;
  std::string::size_type v125;
  std::string *v126;
  unint64_t v127;
  llvm::PointerType *v128;
  llvm::PointerType *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t **inited;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  size_t v138;
  void *v139;
  void **v140;
  unsigned __int8 *v141;
  unint64_t v142;
  uint64_t **v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  size_t v147;
  void *v148;
  void **v149;
  unsigned __int8 *v150;
  unint64_t v151;
  uint64_t **v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  size_t v156;
  void *v157;
  void **v158;
  unsigned __int8 *v159;
  unint64_t v160;
  uint64_t **v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  llvm::PointerType *v167;
  uint64_t **v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t **v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  llvm::UndefValue *v179;
  uint64_t v180;
  char v181;
  char v182;
  char *v183;
  char *v184;
  llvm::Value *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  unsigned __int8 *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t **v192;
  llvm::PointerType *v193;
  uint64_t v194;
  uint64_t **v195;
  _BOOL4 v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  int v206;
  uint64_t v207;
  int v208;
  int v209;
  uint64_t v210;
  llvm::DataLayout *v211;
  int v212;
  unint64_t v213;
  std::string::size_type *v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t **v218;
  uint64_t v219;
  BOOL v220;
  _OWORD *v221;
  _OWORD *v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t *v227;
  char v228;
  int v229;
  int v230;
  _BYTE **v231;
  int v232;
  _BYTE **v233;
  _BYTE *v234;
  uint64_t v235;
  _BYTE *v236;
  int v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  _BYTE *v244;
  uint64_t v245;
  _BYTE *v246;
  uint64_t v247;
  unsigned int data;
  char k;
  uint64_t v250;
  int v251;
  int v252;
  uint64_t v253;
  int HasAttr;
  BOOL v255;
  uint64_t v256;
  int v257;
  unsigned int v258;
  void *v259;
  uint64_t *v260;
  __int16 v261;
  char *v262;
  uint64_t v263;
  unsigned int v264;
  unint64_t *v265;
  unint64_t v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  unsigned int v271;
  void *v272;
  BOOL v273;
  char v274;
  int v275;
  uint64_t v276;
  _QWORD *v277;
  BOOL v278;
  uint64_t v279;
  BOOL v280;
  llvm *UnderlyingObject;
  BOOL v282;
  uint64_t v283;
  uint64_t v284;
  BOOL v285;
  uint64_t v286;
  uint64_t v287;
  llvm::ConstantInt *v288;
  uint64_t *v289;
  const char *v290;
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  BOOL v298;
  char *v299;
  llvm::APInt *v300;
  unsigned int v301;
  const llvm::APInt *v302;
  llvm::ConstantInt *v303;
  unsigned int v304;
  unint64_t v305;
  llvm::ValueHandleBase *v306;
  unsigned __int8 *v307;
  unsigned __int8 *v308;
  uint64_t *v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  BOOL v313;
  int v314;
  BOOL v315;
  uint64_t v316;
  llvm *v317;
  uint64_t v318;
  uint64_t **v319;
  uint64_t v320;
  unsigned __int8 *v321;
  uint64_t v322;
  unsigned __int8 *v323;
  uint64_t v324;
  unsigned __int8 *v325;
  unsigned __int8 *v326;
  uint64_t v327;
  unsigned __int8 *v328;
  uint64_t v329;
  unsigned __int8 *v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  llvm::PointerType *v334;
  uint64_t v335;
  uint64_t v336;
  BOOL v337;
  uint64_t v338;
  int v340;
  uint64_t *v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t **v345;
  uint64_t v346;
  int v347;
  uint64_t *v348;
  char v349;
  uint64_t *v350;
  uint64_t v351;
  char v352;
  unsigned __int8 *v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t **v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t j;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  unsigned __int8 **v369;
  int v370;
  unsigned __int8 *v371;
  unsigned __int8 *v372;
  unsigned __int8 *v373;
  int v374;
  uint64_t v375;
  llvm::Value **v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  llvm::Value *v381;
  llvm::Value *v382;
  llvm::Value *v383;
  uint64_t v384;
  _QWORD *v385;
  uint64_t *v386;
  _QWORD *v387;
  int v388;
  unsigned __int8 v389;
  uint64_t v390;
  llvm::ConstantInt *v391;
  int v392;
  llvm::Value **v393;
  uint64_t ***v394;
  uint64_t v395;
  char v396;
  int v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int *v400;
  uint64_t v401;
  uint64_t v402;
  unsigned int v403;
  unint64_t v404;
  char v405;
  unsigned __int8 *v406;
  llvm *v407;
  _QWORD *v408;
  uint64_t v409;
  std::string::value_type *__dst;
  _QWORD *v411;
  __int128 v412;
  uint64_t v413;
  unsigned int v414;
  _BYTE *v415;
  _BYTE *v416;
  uint64_t v417;
  int v418;
  _BYTE v419[64];
  unsigned __int8 v420[32];
  __int16 v421;
  void *v422;
  uint64_t v423;
  _BYTE v424[32];
  uint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  void **v428;
  _QWORD *v429;
  uint64_t v430;
  int v431;
  __int16 v432;
  char v433;
  uint64_t v434;
  uint64_t v435;
  void *v436;
  _QWORD v437[45];
  __int128 v438;
  uint64_t v439;
  void *v440;
  uint64_t v441;
  _BYTE v442[128];
  void *v443;
  uint64_t v444;
  _BYTE v445[128];
  void *v446;
  uint64_t v447;
  _BYTE v448[64];
  uint64_t v449;
  void *v450;
  uint64_t v451;
  _BYTE v452[256];
  void *v453;
  uint64_t v454;
  _BYTE v455[264];
  void *v456;
  uint64_t v457;
  uint64_t v458;
  void *v459;
  uint64_t v460;
  _BYTE v461[24];
  __int16 v462;
  BOOL v463;
  void *__p[2];
  _QWORD v465[16];
  void *v466;
  uint64_t v467;
  _BYTE v468[7];
  char v469;
  std::string v470[3];
  void *v471;
  uint64_t v472;
  _BYTE v473[7];
  char v474;
  void *v475[2];
  _QWORD v476[2];
  __int16 v477;
  void *v478;
  void *__b;
  uint64_t v480;
  int v481;
  _WORD v482[64];
  uint64_t v483;
  uint64_t v484;
  __int16 v485;
  uint64_t v486[3];
  std::string v487;
  int v488;
  __int16 v489;
  std::string v490;
  __int16 v491;
  uint64_t v492;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v492 = *MEMORY[0x1E0C80C00];
  v7 = v5 + 9;
  if (v5[9] == (uint64_t **)(v5 + 9))
    return 0;
  v8 = (uint64_t *)v5;
  if (((_DWORD)v5[4] & 0xF) == 1)
    return 0;
  v11 = v6;
  v12 = v4;
  if (byte_1EF8F4CF7 >= 0)
    v13 = byte_1EF8F4CF7 & 0x7F;
  else
    v13 = qword_1EF8F4CE8;
  v14 = *((_DWORD *)v5 + 5);
  if (v13)
    v15 = (v14 & 0x10000000) == 0;
  else
    v15 = 1;
  v16 = v5 >> 4;
  if (!v15)
  {
    v17 = ***v5;
    v18 = *(_QWORD *)(v17 + 152);
    v19 = *(unsigned int *)(v17 + 168);
    if ((_DWORD)v19)
    {
      LODWORD(v20) = (v19 - 1) & (v16 ^ (v5 >> 9));
      v21 = (uint64_t ****)(v18 + 16 * v20);
      v22 = *v21;
      if (*v21 == v5)
      {
LABEL_19:
        v25 = v21[1];
        if ((uint64_t **)v13 == *v25)
        {
          v26 = byte_1EF8F4CF7 >= 0 ? &qword_1EF8F4CE0 : (uint64_t *)qword_1EF8F4CE0;
          if (!memcmp(v26, v25 + 2, v13))
            return 0;
        }
        goto LABEL_24;
      }
      v23 = 1;
      while (v22 != (uint64_t ***)-4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v19 - 1);
        v22 = *(uint64_t ****)(v18 + 16 * v20);
        if (v22 == v5)
        {
          v21 = (uint64_t ****)(v18 + 16 * v20);
          goto LABEL_19;
        }
      }
    }
    v21 = (uint64_t ****)(v18 + 16 * v19);
    goto LABEL_19;
  }
LABEL_24:
  if ((v14 & 0x10000000) == 0)
  {
    v46 = 0;
    v45 = &byte_1C871356D;
    goto LABEL_45;
  }
  v27 = **(_QWORD **)*v8;
  v28 = *(_QWORD *)(v27 + 152);
  v29 = *(unsigned int *)(v27 + 168);
  if (!(_DWORD)v29)
    goto LABEL_31;
  LODWORD(v30) = (v29 - 1) & (v16 ^ (v8 >> 9));
  v31 = (uint64_t **)(v28 + 16 * v30);
  v32 = *v31;
  if (*v31 != v8)
  {
    v33 = 1;
    while (v32 != (uint64_t *)-4096)
    {
      v34 = v30 + v33++;
      v30 = v34 & (v29 - 1);
      v32 = *(uint64_t **)(v28 + 16 * v30);
      if (v32 == v8)
      {
        v31 = (uint64_t **)(v28 + 16 * v30);
        goto LABEL_32;
      }
    }
LABEL_31:
    v31 = (uint64_t **)(v28 + 16 * v29);
  }
LABEL_32:
  v35 = v31[1];
  if ((unint64_t)*v35 >= 7)
  {
    v36 = *((_DWORD *)v35 + 4);
    v37 = *(_DWORD *)((char *)v35 + 19);
    if (v36 == 1935761247 && v37 == 1601069427)
      return 0;
  }
  if (!(_DWORD)v29)
    goto LABEL_43;
  LODWORD(v39) = (v29 - 1) & (v16 ^ (v8 >> 9));
  v40 = (uint64_t **)(v28 + 16 * v39);
  v41 = *v40;
  if (*v40 != v8)
  {
    v42 = 1;
    while (v41 != (uint64_t *)-4096)
    {
      v43 = v39 + v42++;
      v39 = v43 & (v29 - 1);
      v41 = *(uint64_t **)(v28 + 16 * v39);
      if (v41 == v8)
      {
        v40 = (uint64_t **)(v28 + 16 * v39);
        goto LABEL_44;
      }
    }
LABEL_43:
    v40 = (uint64_t **)(v28 + 16 * v29);
  }
LABEL_44:
  v44 = v40[1];
  v47 = *v44;
  v45 = (char *)(v44 + 2);
  v46 = v47;
LABEL_45:
  v422 = v45;
  v423 = v46;
  v48 = llvm::StringRef::find((uint64_t *)&v422, " load]", 6uLL, 0);
  v9 = v48 != -1;
  if (v48 != -1)
  {
    inited = (uint64_t **)llvm::declareSanitizerInitFunction(v8[5], "__asan_init", 0xBuLL, 0, 0);
    v135 = v134;
    v136 = v8[10];
    v137 = v136 ? v136 - 24 : 0;
    sub_1C4D8ADA0((uint64_t)&v422, (uint64_t **)v137, *(_QWORD *)(v137 + 48), 0, 0, 0);
    v477 = 257;
    sub_1C4774778((uint64_t *)&v422, inited, v135, 0, 0, (uint64_t)v475, 0);
    if (v422 != v424)
      free(v422);
  }
  v49 = v8[14];
  if (!v49 || (*(_BYTE *)(v49 + 18) & 4) == 0 || *(char *)(v49 + 12) < 0)
    return v9;
  v390 = v48;
  v394 = v7;
  v50 = 0;
  v386 = v8;
  v51 = v8[5];
  v52 = *(uint64_t **)v12;
  v422 = v424;
  v423 = 0x200000000;
  v427 = v52;
  v428 = &v436;
  v429 = v437;
  v430 = 0;
  v431 = 0;
  v432 = 512;
  v433 = 7;
  v425 = 0;
  v426 = 0;
  v434 = 0;
  v435 = 0;
  v436 = &unk_1E8167888;
  v437[0] = &unk_1E8167A08;
  v53 = 1;
  v409 = v12;
  do
  {
    v54 = 0;
    v405 = v53;
    v15 = (v53 & 1) == 0;
    v55 = 4;
    if (!v15)
      v55 = 0;
    v401 = v55;
    v56 = 1;
    do
    {
      v396 = v56;
      if ((v56 & 1) != 0)
        v57 = "load";
      else
        v57 = "store";
      if ((v56 & 1) != 0)
        v58 = 4;
      else
        v58 = 5;
      BYTE7(v412) = v58;
      memcpy(&__dst, v57, v58);
      *(_BYTE *)((unint64_t)&__dst | v58) = 0;
      v474 = v401;
      if ((v405 & 1) == 0)
        LODWORD(v471) = 1601206373;
      *(_BYTE *)((unint64_t)&v471 | v401) = 0;
      v59 = *(unsigned __int8 *)(v12 + 61);
      v469 = 8 * v59;
      if (v59)
        v466 = (void *)0x74726F62616F6E5FLL;
      *((_BYTE *)&v466 + 8 * v59) = 0;
      v60 = *(_QWORD *)(v12 + 72);
      v475[0] = v476;
      v476[0] = v60;
      v476[1] = v60;
      v475[1] = (void *)0x300000002;
      v478 = &v480;
      __b = (void *)0x200000000;
      sub_1C4848C0C((unsigned int *)&v478, 1uLL, v60);
      if ((v405 & 1) == 0)
      {
        v61 = **(_QWORD **)v12;
        v62 = LODWORD(v475[1]);
        if (LODWORD(v475[1]) >= (unint64_t)HIDWORD(v475[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v475, (uint64_t)v476, LODWORD(v475[1]) + 1, 8);
          v62 = LODWORD(v475[1]);
        }
        v63 = v61 + 1960;
        *((_QWORD *)v475[0] + v62) = v63;
        ++LODWORD(v475[1]);
        v64 = __b;
        if (__b >= (unint64_t)HIDWORD(__b))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v478, (uint64_t)&v480, __b + 1, 8);
          v64 = __b;
        }
        *((_QWORD *)v478 + v64) = v63;
        LODWORD(__b) = (_DWORD)__b + 1;
      }
      std::operator+<char>();
      if ((SBYTE7(v412) & 0x80u) == 0)
        p_dst = (const std::string::value_type *)&__dst;
      else
        p_dst = __dst;
      if ((SBYTE7(v412) & 0x80u) == 0)
        v66 = BYTE7(v412) & 0x7F;
      else
        v66 = (std::string::size_type)v411;
      v67 = std::string::append(&v490, p_dst, v66);
      v68 = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v470[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v470[0].__r_.__value_.__r.__words[2] = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      v69 = std::string::append(v470, "_n");
      v70 = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v487.__r_.__value_.__l.__data_ = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v487.__r_.__value_.__r.__words[2] = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      if (v469 >= 0)
        v71 = (const std::string::value_type *)&v466;
      else
        v71 = (const std::string::value_type *)v466;
      if (v469 >= 0)
        v72 = v469 & 0x7F;
      else
        v72 = v467;
      v73 = std::string::append(&v487, v71, v72);
      v74 = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v465[0] = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      if (v465[0] >= 0)
        v75 = (unsigned __int8 *)__p;
      else
        v75 = (unsigned __int8 *)__p[0];
      if (v465[0] >= 0)
        v76 = HIBYTE(v465[0]) & 0x7F;
      else
        v76 = (unint64_t)__p[1];
      v77 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v427 + 1576), (uint64_t *)v475[0], LODWORD(v475[1]), 0);
      inserted = llvm::Module::getOrInsertFunction(v51, v75, v76, v77, 0);
      v79 = v12 + 32 * v54 + 16 * v50;
      *(_QWORD *)(v79 + 816) = inserted;
      *(_QWORD *)(v79 + 824) = v80;
      if (SHIBYTE(v465[0]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v487.__r_.__value_.__l.__data_);
      if (SHIBYTE(v470[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v470[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v490.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v490.__r_.__value_.__l.__data_);
      sub_1C4842EB8((const void **)&xmmword_1EF8F4BF8, (const void **)&v471, (uint64_t)&v490);
      if ((SBYTE7(v412) & 0x80u) == 0)
        v81 = (const std::string::value_type *)&__dst;
      else
        v81 = __dst;
      if ((SBYTE7(v412) & 0x80u) == 0)
        v82 = BYTE7(v412) & 0x7F;
      else
        v82 = (std::string::size_type)v411;
      v83 = std::string::append(&v490, v81, v82);
      v84 = v83->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v470[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v470[0].__r_.__value_.__r.__words[2] = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      v85 = std::string::append(v470, "N");
      v86 = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v487.__r_.__value_.__l.__data_ = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v487.__r_.__value_.__r.__words[2] = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      if (v469 >= 0)
        v87 = (const std::string::value_type *)&v466;
      else
        v87 = (const std::string::value_type *)v466;
      if (v469 >= 0)
        v88 = v469 & 0x7F;
      else
        v88 = v467;
      v89 = std::string::append(&v487, v87, v88);
      v90 = v89->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      v465[0] = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      if (v465[0] >= 0)
        v91 = (unsigned __int8 *)__p;
      else
        v91 = (unsigned __int8 *)__p[0];
      if (v465[0] >= 0)
        v92 = HIBYTE(v465[0]) & 0x7F;
      else
        v92 = (unint64_t)__p[1];
      v93 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v427 + 1576), (uint64_t *)v475[0], LODWORD(v475[1]), 0);
      v94 = llvm::Module::getOrInsertFunction(v51, v91, v92, v93, 0);
      v95 = v12 + 32 * v54 + 16 * v50;
      *(_QWORD *)(v95 + 880) = v94;
      *(_QWORD *)(v95 + 888) = v96;
      if (SHIBYTE(v465[0]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v487.__r_.__value_.__l.__data_);
      if (SHIBYTE(v470[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v470[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v490.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v490.__r_.__value_.__l.__data_);
      for (i = 0; i != 5; ++i)
      {
        v98 = 0;
        v99 = 1 << i;
        do
        {
          *((_BYTE *)v465 + v98-- + 4) = (v99 % 0xA) | 0x30;
          v273 = v99 > 9;
          v99 /= 0xAuLL;
        }
        while (v273);
        sub_1C4E61270(&v487, (char *)v465 + v98 + 5, (char *)v465 + 5, -v98);
        if ((SBYTE7(v412) & 0x80u) == 0)
          v100 = (const std::string::value_type *)&__dst;
        else
          v100 = __dst;
        if ((SBYTE7(v412) & 0x80u) == 0)
          v101 = BYTE7(v412) & 0x7F;
        else
          v101 = (std::string::size_type)v411;
        v102 = std::string::insert(&v487, 0, v100, v101);
        v103 = v102->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
        v465[0] = v103;
        v102->__r_.__value_.__l.__size_ = 0;
        v102->__r_.__value_.__r.__words[2] = 0;
        v102->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v487.__r_.__value_.__l.__data_);
        std::operator+<char>();
        if (v465[0] >= 0)
          v104 = __p;
        else
          v104 = (void **)__p[0];
        if (v465[0] >= 0)
          v105 = HIBYTE(v465[0]) & 0x7F;
        else
          v105 = (std::string::size_type)__p[1];
        v106 = std::string::append(&v490, (const std::string::value_type *)v104, v105);
        v107 = v106->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v470[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
        v470[0].__r_.__value_.__r.__words[2] = v107;
        v106->__r_.__value_.__l.__size_ = 0;
        v106->__r_.__value_.__r.__words[2] = 0;
        v106->__r_.__value_.__r.__words[0] = 0;
        if (v469 >= 0)
          v108 = (const std::string::value_type *)&v466;
        else
          v108 = (const std::string::value_type *)v466;
        if (v469 >= 0)
          v109 = v469 & 0x7F;
        else
          v109 = v467;
        v110 = std::string::append(v470, v108, v109);
        v111 = v110->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v487.__r_.__value_.__l.__data_ = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
        v487.__r_.__value_.__r.__words[2] = v111;
        v110->__r_.__value_.__l.__size_ = 0;
        v110->__r_.__value_.__r.__words[2] = 0;
        v110->__r_.__value_.__r.__words[0] = 0;
        if ((v487.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v112 = &v487;
        else
          v112 = (std::string *)v487.__r_.__value_.__r.__words[0];
        if ((v487.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v487.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v487.__r_.__value_.__l.__size_;
        v114 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v427 + 1576), (uint64_t *)v478, __b, 0);
        v115 = llvm::Module::getOrInsertFunction(v51, (unsigned __int8 *)v112, size, v114, 0);
        v116 = v409 + 160 * v54 + 80 * v50 + 16 * i;
        *(_QWORD *)(v116 + 176) = v115;
        *(_QWORD *)(v116 + 184) = v117;
        if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v487.__r_.__value_.__l.__data_);
        if (SHIBYTE(v470[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v470[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v490.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v490.__r_.__value_.__l.__data_);
        sub_1C4842EB8((const void **)&xmmword_1EF8F4BF8, (const void **)&v471, (uint64_t)&v490);
        if (v465[0] >= 0)
          v118 = __p;
        else
          v118 = (void **)__p[0];
        if (v465[0] >= 0)
          v119 = HIBYTE(v465[0]) & 0x7F;
        else
          v119 = (std::string::size_type)__p[1];
        v120 = std::string::append(&v490, (const std::string::value_type *)v118, v119);
        v121 = v120->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v470[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
        v470[0].__r_.__value_.__r.__words[2] = v121;
        v120->__r_.__value_.__l.__size_ = 0;
        v120->__r_.__value_.__r.__words[2] = 0;
        v120->__r_.__value_.__r.__words[0] = 0;
        if (v469 >= 0)
          v122 = (const std::string::value_type *)&v466;
        else
          v122 = (const std::string::value_type *)v466;
        if (v469 >= 0)
          v123 = v469 & 0x7F;
        else
          v123 = v467;
        v124 = std::string::append(v470, v122, v123);
        v125 = v124->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v487.__r_.__value_.__l.__data_ = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
        v487.__r_.__value_.__r.__words[2] = v125;
        v124->__r_.__value_.__l.__size_ = 0;
        v124->__r_.__value_.__r.__words[2] = 0;
        v124->__r_.__value_.__r.__words[0] = 0;
        if ((v487.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v126 = &v487;
        else
          v126 = (std::string *)v487.__r_.__value_.__r.__words[0];
        if ((v487.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v127 = *((_BYTE *)&v487.__r_.__value_.__s + 23) & 0x7F;
        else
          v127 = v487.__r_.__value_.__l.__size_;
        v128 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v427 + 1576), (uint64_t *)v478, __b, 0);
        v129 = llvm::Module::getOrInsertFunction(v51, (unsigned __int8 *)v126, v127, v128, 0);
        v130 = v409 + 160 * v54 + 80 * v50 + 16 * i;
        *(_QWORD *)(v130 + 496) = v129;
        *(_QWORD *)(v130 + 504) = v131;
        if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v487.__r_.__value_.__l.__data_);
        if (SHIBYTE(v470[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v470[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v490.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v490.__r_.__value_.__l.__data_);
        if (SHIBYTE(v465[0]) < 0)
          operator delete(__p[0]);
      }
      if (v478 != &v480)
        free(v478);
      v12 = v409;
      if (v475[0] != v476)
        free(v475[0]);
      if (v469 < 0)
        operator delete(v466);
      if (v474 < 0)
        operator delete(v471);
      if (SBYTE7(v412) < 0)
        operator delete(__dst);
      v56 = 0;
      v54 = 1;
    }
    while ((v396 & 1) != 0);
    v53 = 0;
    v50 = 1;
  }
  while ((v405 & 1) != 0);
  if (!*(_BYTE *)(v409 + 60) || byte_1EF8F3CF0)
  {
    v132 = v386;
    if (byte_1EF8F4C0F < 0)
    {
      sub_1C47EBC30(v475, (void *)xmmword_1EF8F4BF8, *((unint64_t *)&xmmword_1EF8F4BF8 + 1));
    }
    else
    {
      *(_OWORD *)v475 = xmmword_1EF8F4BF8;
      v476[0] = unk_1EF8F4C08;
    }
  }
  else
  {
    HIBYTE(v476[0]) = 0;
    LOBYTE(v475[0]) = 0;
    v132 = v386;
  }
  if (v476[0] >= 0)
    v138 = HIBYTE(v476[0]) & 0x7F;
  else
    v138 = (size_t)v475[1];
  sub_1C484371C((uint64_t)&v478, v138 + 7);
  if (v480 >= 0)
    v139 = &v478;
  else
    v139 = v478;
  if (v138)
  {
    if (v476[0] >= 0)
      v140 = v475;
    else
      v140 = (void **)v475[0];
    memmove(v139, v140, v138);
  }
  strcpy((char *)v139 + v138, "memmove");
  if (v480 >= 0)
    v141 = (unsigned __int8 *)&v478;
  else
    v141 = (unsigned __int8 *)v478;
  if (v480 >= 0)
    v142 = HIBYTE(v480) & 0x7F;
  else
    v142 = (unint64_t)__b;
  v143 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
  v144 = llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
  v145 = llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
  *(_QWORD *)(v409 + 944) = sub_1C62A98B0(v51, v141, v142, 0, v143, v144, v145, *(_QWORD *)(v409 + 72));
  *(_QWORD *)(v409 + 952) = v146;
  if (SHIBYTE(v480) < 0)
    operator delete(v478);
  if (v476[0] >= 0)
    v147 = HIBYTE(v476[0]) & 0x7F;
  else
    v147 = (size_t)v475[1];
  sub_1C484371C((uint64_t)&v478, v147 + 6);
  if (v480 >= 0)
    v148 = &v478;
  else
    v148 = v478;
  if (v147)
  {
    if (v476[0] >= 0)
      v149 = v475;
    else
      v149 = (void **)v475[0];
    memmove(v148, v149, v147);
  }
  strcpy((char *)v148 + v147, "memcpy");
  if (v480 >= 0)
    v150 = (unsigned __int8 *)&v478;
  else
    v150 = (unsigned __int8 *)v478;
  if (v480 >= 0)
    v151 = HIBYTE(v480) & 0x7F;
  else
    v151 = (unint64_t)__b;
  v152 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
  v153 = llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
  v154 = llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
  *(_QWORD *)(v409 + 960) = sub_1C62A98B0(v51, v150, v151, 0, v152, v153, v154, *(_QWORD *)(v409 + 72));
  *(_QWORD *)(v409 + 968) = v155;
  if (SHIBYTE(v480) < 0)
    operator delete(v478);
  if (v476[0] >= 0)
    v156 = HIBYTE(v476[0]) & 0x7F;
  else
    v156 = (size_t)v475[1];
  sub_1C484371C((uint64_t)&v478, v156 + 6);
  if (v480 >= 0)
    v157 = &v478;
  else
    v157 = v478;
  if (v156)
  {
    if (v476[0] >= 0)
      v158 = v475;
    else
      v158 = (void **)v475[0];
    memmove(v157, v158, v156);
  }
  strcpy((char *)v157 + v156, "memset");
  if (v480 >= 0)
    v159 = (unsigned __int8 *)&v478;
  else
    v159 = (unsigned __int8 *)v478;
  if (v480 >= 0)
    v160 = HIBYTE(v480) & 0x7F;
  else
    v160 = (unint64_t)__b;
  v161 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
  v162 = llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
  *(_QWORD *)(v409 + 976) = sub_1C62A98B0(v51, v159, v160, 0, v161, v162, *v427 + 1960, *(_QWORD *)(v409 + 72));
  *(_QWORD *)(v409 + 984) = v163;
  if (SHIBYTE(v480) < 0)
    operator delete(v478);
  *(_QWORD *)(v409 + 120) = sub_1C6210688(v51, "__asan_handle_no_return", 0x17uLL, 0, (uint64_t **)(*v427 + 1576));
  *(_QWORD *)(v409 + 128) = v164;
  *(_QWORD *)(v409 + 136) = sub_1C6291FE0(v51, "__sanitizer_ptr_cmp", 0x13uLL, 0, (uint64_t **)(*v427 + 1576), *(_QWORD *)(v409 + 72), *(_QWORD *)(v409 + 72));
  *(_QWORD *)(v409 + 144) = v165;
  *(_QWORD *)(v409 + 152) = sub_1C6291FE0(v51, "__sanitizer_ptr_sub", 0x13uLL, 0, (uint64_t **)(*v427 + 1576), *(_QWORD *)(v409 + 72), *(_QWORD *)(v409 + 72));
  *(_QWORD *)(v409 + 160) = v166;
  if (*(_BYTE *)(v409 + 113))
  {
    llvm::ArrayType::get((llvm::ArrayType *)(*v427 + 1912), 0);
    *(_QWORD *)(v409 + 168) = llvm::Module::getOrInsertGlobal(v51, "__asan_shadow", 0xDuLL, v167);
  }
  v168 = (uint64_t **)(*v427 + 1888);
  v169 = llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
  *(_QWORD *)(v409 + 1040) = sub_1C6212CB8(v51, "llvm.amdgcn.is.shared", 0x15uLL, 0, v168, v169);
  *(_QWORD *)(v409 + 1048) = v170;
  v171 = (uint64_t **)(*v427 + 1888);
  v172 = llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
  *(_QWORD *)(v409 + 1056) = sub_1C6212CB8(v51, "llvm.amdgcn.is.private", 0x16uLL, 0, v171, v172);
  *(_QWORD *)(v409 + 1064) = v173;
  if (SHIBYTE(v476[0]) < 0)
    operator delete(v475[0]);
  if (v422 != v424)
    free(v422);
  v174 = *(_QWORD *)(v409 + 104);
  if (v174 != -1)
    goto LABEL_292;
  v175 = v132[10];
  if (v175)
    v176 = v175 - 24;
  else
    v176 = 0;
  v177 = *(_QWORD *)(v176 + 48);
  if (v177)
    v178 = v177 - 24;
  else
    v178 = 0;
  sub_1C4773D54((uint64_t)&v422, v178, 0, 0, 0);
  if (*(_BYTE *)(v409 + 113))
  {
    if (byte_1ED811A40)
    {
      v192 = *(uint64_t ***)(v409 + 72);
      v475[0] = **(void ***)(v409 + 168);
      v193 = (llvm::PointerType *)llvm::FunctionType::get(v192, (uint64_t *)v475, 1, 0);
      v194 = llvm::InlineAsm::get(v193, (uint64_t)"", 0, (uint64_t)"=r,0", 4, 0, 0, 0, 0);
      v195 = 0;
      if (v194)
        v195 = *(uint64_t ***)(v194 + 72);
      v478 = *(void **)(v409 + 168);
      v475[0] = ".asan.shadow";
      v477 = 259;
      v191 = sub_1C4774778((uint64_t *)&v422, v195, v194, (uint64_t *)&v478, 1, (uint64_t)v475, 0);
    }
    else
    {
      v189 = *(unsigned __int8 **)(v409 + 168);
      v190 = *(_QWORD *)(v409 + 72);
      v475[0] = ".asan.shadow";
      v477 = 259;
      v191 = (uint64_t)sub_1C5098D9C((uint64_t *)&v422, v189, v190, (uint64_t)v475);
    }
    *(_QWORD *)(v409 + 992) = v191;
    goto LABEL_290;
  }
  v179 = llvm::Module::getOrInsertGlobal(v132[5], "__asan_shadow_memory_dynamic_address", 0x24uLL, *(llvm::PointerType **)(v409 + 72));
  v180 = *(_QWORD *)(v409 + 72);
  v482[0] = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v425 + 56) + 40) + 272, v180);
  v182 = v181;
  v183 = (char *)operator new(0x60uLL);
  v184 = v183;
  v185 = (llvm::Value *)(v183 + 32);
  *((_QWORD *)v183 + 2) = 0;
  *((_QWORD *)v183 + 3) = v183 + 32;
  v477 = 257;
  *((_QWORD *)v183 + 4) = v180;
  *((_QWORD *)v183 + 5) = 0;
  *((_WORD *)v183 + 24) = 60;
  *((_DWORD *)v183 + 13) = 1;
  *(_OWORD *)(v183 + 56) = 0u;
  *(_OWORD *)(v183 + 72) = 0u;
  *((_DWORD *)v183 + 22) = 0;
  *(_QWORD *)v183 = v179;
  *((_QWORD *)v183 + 1) = 0;
  if (v179)
  {
    v188 = *((_QWORD *)v179 + 1);
    v187 = (_QWORD *)((char *)v179 + 8);
    v186 = v188;
    *((_QWORD *)v183 + 1) = v188;
    if (v188)
      *(_QWORD *)(v186 + 16) = v183 + 8;
    *((_QWORD *)v183 + 2) = v187;
    *v187 = v183;
  }
  *((_WORD *)v183 + 25) = 2 * (v182 & 0x3F);
  v183[92] = 1;
  llvm::Value::setName((uint64_t ***)v183 + 4, (uint64_t)v475);
  (*(void (**)(_QWORD *, llvm::Value *, void **, uint64_t, uint64_t))(*v429 + 16))(v429, v185, &v478, v425, v426);
  if ((_DWORD)v423)
  {
    v367 = (char *)v422;
    v368 = (char *)v422 + 16 * v423;
    v369 = (unsigned __int8 **)(v184 + 80);
    do
    {
      v370 = *(_DWORD *)v367;
      v371 = (unsigned __int8 *)*((_QWORD *)v367 + 1);
      if (v371)
      {
        if (!v370)
        {
          __dst = (std::string::value_type *)*((_QWORD *)v367 + 1);
          llvm::MetadataTracking::track((uint64_t)&__dst, v371, 2);
          v372 = *v369;
          goto LABEL_674;
        }
      }
      else
      {
        v372 = *v369;
        if (!*v369 && (v184[55] & 0x20) == 0)
          goto LABEL_671;
        if (!v370)
        {
          __dst = 0;
LABEL_674:
          if (v372)
            llvm::MetadataTracking::untrack((uint64_t)(v184 + 80), v372);
          v373 = (unsigned __int8 *)__dst;
          *v369 = (unsigned __int8 *)__dst;
          if (v373)
            llvm::MetadataTracking::retrack((uint64_t)&__dst, v373, (uint64_t)(v184 + 80));
          goto LABEL_671;
        }
      }
      llvm::Value::setMetadata(v185, *(_DWORD *)v367, (llvm::MDNode *)v371);
LABEL_671:
      v367 += 16;
    }
    while (v367 != v368);
  }
  v12 = v409;
  *(_QWORD *)(v409 + 992) = v185;
  v132 = v386;
LABEL_290:
  if (v422 != v424)
    free(v422);
LABEL_292:
  v197 = v390 != -1 || v174 == -1;
  v198 = sub_1C4FB7E80(*(uint64_t **)(v132[5] + 112), "llvm.localescape", 0x10uLL);
  if (v198 && !*(_BYTE *)(v198 + 16))
  {
    v360 = v132[10];
    if (v360)
      v361 = v360 - 24;
    else
      v361 = 0;
    v362 = v361 + 40;
    for (j = *(_QWORD *)(v361 + 48); j != v362; j = *(_QWORD *)(j + 8))
    {
      v364 = j - 24;
      if (j)
        v365 = j - 24;
      else
        v365 = 0;
      if (*(_BYTE *)(v365 + 16) == 84)
      {
        v366 = *(_QWORD *)(v365 - 32);
        if (v366)
        {
          if (!*(_BYTE *)(v366 + 16)
            && *(_QWORD *)(v366 + 24) == *(_QWORD *)(v365 + 72)
            && (*(_BYTE *)(v366 + 33) & 0x20) != 0
            && *(_DWORD *)(*(_QWORD *)(j - 56) + 36) == 173)
          {
            v374 = *(_DWORD *)(j - 4);
            v375 = v374 & 0x7FFFFFF;
            v376 = (llvm::Value **)(v364 - 32 * v375);
            v377 = *(unsigned __int8 *)(j - 8);
            if (v377 == 84)
            {
              v378 = 0;
            }
            else if (v377 == 39)
            {
              v378 = (*(_DWORD *)(j + 56) + 1);
            }
            else
            {
              v378 = 2;
            }
            if (v374 < 0 && (v384 = (uint64_t)*(v376 - 1), (v384 & 0xFFFFFFFF0) != 0))
              v379 = (*((_DWORD *)v376 - 3) - *(_DWORD *)((char *)v376 - v384));
            else
              v379 = 0;
            v12 = v409;
            v132 = v386;
            if (v376 != (llvm::Value **)(v364 - 32 * v378 - 32 * v379 - 32))
            {
              v380 = 32 * v375 - 32 * v378 - 32 * v379 - 32;
              do
              {
                v381 = *v376;
                v376 += 4;
                v382 = llvm::Value::stripPointerCasts(v381);
                if (*((_BYTE *)v382 + 16) == 59)
                  v383 = v382;
                else
                  v383 = 0;
                v422 = v383;
                *((_BYTE *)sub_1C62A9984(v409 + 1016, (uint64_t *)&v422) + 8) = 0;
                v380 -= 32;
              }
              while (v380);
            }
            break;
          }
        }
      }
    }
  }
  v478 = v482;
  __b = v482;
  v480 = 16;
  v481 = 0;
  v475[0] = v476;
  v475[1] = (void *)0x1000000000;
  v471 = v473;
  v472 = 0x1000000000;
  v470[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v470[0].__r_.__value_.__r.__words[2];
  v470[0].__r_.__value_.__l.__size_ = 0x800000000;
  v466 = v468;
  v467 = 0x1000000000;
  __p[0] = v465;
  __p[1] = (void *)0x1000000000;
  v199 = v132[10];
  if ((uint64_t ***)v199 == v394)
  {
    v200 = 0;
    v201 = 0;
    v202 = v476;
    goto LABEL_482;
  }
  do
  {
    if (v199)
      v203 = v199 - 24;
    else
      v203 = 0;
    v204 = v467;
    if (v467 >= (unint64_t)HIDWORD(v467))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v466, (uint64_t)v468, v467 + 1, 8);
      v204 = v467;
    }
    *((_QWORD *)v466 + v204) = v203;
    LODWORD(v467) = v467 + 1;
    v402 = v199;
    if (__b == v478)
      goto LABEL_307;
    if (v480 < 0x21 || 4 * (HIDWORD(v480) - v481) >= v480)
    {
      memset(__b, 255, 8 * v480);
LABEL_307:
      v481 = 0;
      HIDWORD(v480) = 0;
      goto LABEL_308;
    }
    free(__b);
    v270 = 1 << (33 - __clz(HIDWORD(v480) - v481 - 1));
    v273 = (HIDWORD(v480) - v481) > 0x10;
    v481 = 0;
    if (v273)
      v271 = v270;
    else
      v271 = 32;
    v480 = v271;
    v272 = malloc_type_malloc(8 * v271, 0x4065EBACuLL);
    if (!v272)
LABEL_689:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    __b = v272;
    memset(v272, 255, 8 * v480);
LABEL_308:
    v205 = *(_QWORD **)(v203 + 48);
    v408 = (_QWORD *)(v203 + 40);
    if (v205 != (_QWORD *)(v203 + 40))
    {
      v206 = 0;
      while (1)
      {
        if (v205)
          v207 = (uint64_t)(v205 - 3);
        else
          v207 = 0;
        if (*(_DWORD *)(v409 + 56) == 32
          && v205
          && *(_BYTE *)(v207 + 16) == 84
          && *(_BYTE *)(*(_QWORD *)(v207 - 32) + 16) == 24)
        {
          v208 = *(_DWORD *)(v207 + 20);
          if (v208 < 0
            && (v268 = v207 - 32 * (v208 & 0x7FFFFFF), v269 = *(_QWORD *)(v268 - 8), (v269 & 0xFFFFFFFF0) != 0))
          {
            v210 = -(uint64_t)(v208 & 0x7FFFFFF);
            v209 = *(_DWORD *)(v268 - 12) - *(_DWORD *)(v268 - v269);
          }
          else
          {
            v209 = 0;
            v210 = -(uint64_t)(v208 & 0x7FFFFFF);
          }
          if (((32 * (unint64_t)-v209 - 32 - 32 * v210) >> 5) > 5)
          {
            v9 = 0;
            v12 = v409;
            goto LABEL_634;
          }
        }
        v422 = v424;
        v423 = 0x100000000;
        __dst = (std::string::value_type *)v207;
        if (*(_QWORD *)(v207 + 48) || (v211 = (llvm::DataLayout *)(v205 - 3), (*(_BYTE *)(v207 + 23) & 0x20) != 0))
        {
          if (llvm::Instruction::getMetadataImpl((uint64_t ***)v207, "nosanitize", 0xAuLL))
            goto LABEL_360;
          v211 = (llvm::DataLayout *)__dst;
        }
        if (*(llvm::DataLayout **)(v409 + 992) != v211)
        {
          v212 = *((unsigned __int8 *)v211 + 16);
          if (v211 && v212 == 60)
          {
            if (byte_1ED811440 && !sub_1C586C18C(v409, v211, *((llvm::Value **)v211 - 4)))
            {
              LODWORD(v490.__r_.__value_.__l.__data_) = 0;
              LOBYTE(v483) = 0;
              v487.__r_.__value_.__r.__words[0] = *(_QWORD *)v211;
              v213 = (unint64_t)*((unsigned __int16 *)v211 + 9) >> 1;
LABEL_335:
              v420[0] = __clz(1 << v213) ^ 0x3F;
              sub_1C62A9B54((uint64_t)&v422, (uint64_t *)&__dst, (unsigned int *)&v490, (char *)&v483, (uint64_t *)&v487, v420);
            }
          }
          else if (v211 && v212 == 61)
          {
            if (byte_1ED811500 && !sub_1C586C18C(v409, v211, *((llvm::Value **)v211 - 4)))
            {
              LODWORD(v490.__r_.__value_.__l.__data_) = 1;
              LOBYTE(v483) = 1;
              v487.__r_.__value_.__r.__words[0] = **((_QWORD **)v211 - 8);
              v213 = (unint64_t)*((unsigned __int16 *)v211 + 9) >> 1;
              goto LABEL_335;
            }
          }
          else if (v211 && v212 == 65)
          {
            if (byte_1ED811680 && !sub_1C586C18C(v409, v211, *((llvm::Value **)v211 - 8)))
            {
              LODWORD(v490.__r_.__value_.__l.__data_) = 0;
              LOBYTE(v483) = 1;
              v214 = (std::string::size_type *)*((_QWORD *)v211 - 4);
LABEL_346:
              v487.__r_.__value_.__r.__words[0] = *v214;
              sub_1C62A9BD0((uint64_t)&v422, (uint64_t *)&__dst, (unsigned int *)&v490, (char *)&v483, (uint64_t *)&v487);
            }
          }
          else if (v211 && v212 == 64)
          {
            if (byte_1ED811680 && !sub_1C586C18C(v409, v211, *((llvm::Value **)v211 - 12)))
            {
              LODWORD(v490.__r_.__value_.__l.__data_) = 0;
              LOBYTE(v483) = 1;
              v214 = (std::string::size_type *)*((_QWORD *)v211 - 8);
              goto LABEL_346;
            }
          }
          else
          {
            if (!v211 || v212 != 84)
              goto LABEL_360;
            v215 = *((_QWORD *)v211 - 4);
            if (v215 && !*(_BYTE *)(v215 + 16))
            {
              if (*(_QWORD *)(v215 + 24) == *((_QWORD *)v211 + 9) && *(_DWORD *)(v215 + 36) == 185)
              {
                if (!byte_1ED811440)
                  goto LABEL_360;
                v399 = 0;
                v216 = 0;
                v217 = 1;
LABEL_359:
                if (!sub_1C586C18C(v409, v211, *((llvm::Value **)v211 + 4 * v216 + -4 * (*((_DWORD *)v211 + 5) & 0x7FFFFFF))))
                {
                  v260 = (uint64_t *)v211;
                  if ((v217 & 1) == 0)
                    v260 = (uint64_t *)*((_QWORD *)v211 - 4 * (*((_DWORD *)v211 + 5) & 0x7FFFFFF));
                  v261 = 0;
                  v262 = (char *)v211 - 32 * (*((_DWORD *)v211 + 5) & 0x7FFFFFF);
                  v263 = *(_QWORD *)&v262[32 * v399 + 32];
                  LOWORD(v264) = 1;
                  if (v263 && *(_BYTE *)(v263 + 16) == 16)
                  {
                    v265 = (unint64_t *)(v263 + 24);
                    if (*(_DWORD *)(v263 + 32) >= 0x41u)
                      v265 = (unint64_t *)*v265;
                    v266 = *v265;
                    v267 = __clz(v266) ^ 0x3F | 0x100;
                    if (!v266)
                      v267 = 0;
                    v261 = v267 & 0x7F;
                    v264 = v267 >> 8;
                  }
                  sub_1C62A9C48((uint64_t)&v422, (uint64_t)__dst, v399, v399, *v260, v261 | ((_WORD)v264 << 8), *(_QWORD *)&v262[32 * (v399 | 2)]);
                }
                goto LABEL_360;
              }
              if (*(_QWORD *)(v215 + 24) == *((_QWORD *)v211 + 9) && *(_DWORD *)(v215 + 36) == 187)
              {
                if (!byte_1ED811500)
                  goto LABEL_360;
                v217 = 0;
                v399 = 1;
                v216 = 1;
                goto LABEL_359;
              }
            }
            data = 0;
            for (k = 84; ; k = *((_BYTE *)v211 + 16))
            {
              LODWORD(v490.__r_.__value_.__l.__data_) = data;
              if (k == 84)
                v250 = 0;
              else
                v250 = k == 39 ? (*((_DWORD *)v211 + 20) + 1) : 2;
              v251 = *((_DWORD *)v211 + 5);
              if (v251 < 0 && (v256 = v251 & 0x7FFFFFF, (*((_QWORD *)v211 - 4 * v256 - 1) & 0xFFFFFFFF0) != 0))
              {
                v253 = -v256;
                v252 = *((_DWORD *)v211 - 8 * v256 - 3)
                     - *(_DWORD *)((char *)v211 - *((_QWORD *)v211 - 4 * v256 - 1) + -32 * v256);
              }
              else
              {
                v252 = 0;
                v253 = -(uint64_t)(v251 & 0x7FFFFFF);
              }
              if (data >= ((-32 - 32 * v250 + 32 * (unint64_t)-v252 - 32 * v253) >> 5))
                break;
              if (byte_1ED811740)
              {
                HasAttr = llvm::CallBase::paramHasAttr((uint64_t)v211, data, 69);
                data = v490.__r_.__value_.__l.__data_;
                if (HasAttr)
                {
                  v255 = sub_1C586C18C(v409, (const llvm::Instruction *)__dst, *((llvm::Value **)v211+ 4 * LODWORD(v490.__r_.__value_.__l.__data_)+ -4 * (*((_DWORD *)v211 + 5) & 0x7FFFFFF)));
                  data = v490.__r_.__value_.__l.__data_;
                  if (!v255)
                  {
                    v487.__r_.__value_.__r.__words[0] = 0;
                    v487.__r_.__value_.__r.__words[0] = sub_1C6199478((uint64_t)v211, (int)v490.__r_.__value_.__l.__data_);
                    LOBYTE(v483) = 0;
                    v420[0] = 0;
                    sub_1C62A9B54((uint64_t)&v422, (uint64_t *)&__dst, (unsigned int *)&v490, (char *)&v483, (uint64_t *)&v487, v420);
                    data = v490.__r_.__value_.__l.__data_;
                  }
                }
              }
              ++data;
            }
          }
        }
LABEL_360:
        if ((_DWORD)v423)
        {
          v218 = (uint64_t **)v422;
          v219 = 48 * v423;
          while (1)
          {
            if (byte_1EF8F3FF0)
              v220 = byte_1EF8F4170 == 0;
            else
              v220 = 1;
            if (!v220)
            {
              v225 = **v218;
              if (v218[5])
              {
                v226 = sub_1C477672C((uint64_t)&v478, v225);
                if (__b == v478)
                  v227 = (uint64_t *)((char *)&v480 + 4);
                else
                  v227 = &v480;
                if (v226 != (_QWORD *)((char *)__b + 8 * *(unsigned int *)v227))
                  goto LABEL_375;
              }
              else
              {
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v478, v225);
                if (!v228)
                  goto LABEL_375;
              }
            }
            v221 = (_OWORD *)sub_1C52B9D4C((uint64_t)v475, (unint64_t)v218, 1);
            v222 = (char *)v475[0] + 48 * LODWORD(v475[1]);
            v224 = v221[1];
            v223 = v221[2];
            *v222 = *v221;
            v222[1] = v224;
            v222[2] = v223;
            ++LODWORD(v475[1]);
            ++v206;
LABEL_375:
            v218 += 6;
            v219 -= 48;
            if (!v219)
              goto LABEL_376;
          }
        }
        if (byte_1ED812040 | byte_1ED812100
          && v205
          && *(_BYTE *)(v207 + 16) == 81
          && (*(_WORD *)(v207 + 18) & 0x3E) != 0x20)
        {
          v232 = *(_DWORD *)(v207 + 20);
          v233 = (v232 & 0x40000000) != 0 ? *(_BYTE ***)(v207 - 8) : (_BYTE **)(v207 - 32 * (v232 & 0x7FFFFFF));
          v244 = *v233;
          if (*(_BYTE *)(*(_QWORD *)v244 + 8) == 15 || v244[16] == 75)
          {
            v245 = (v232 & 0x40000000) != 0 ? *(_QWORD *)(v207 - 8) : v207 - 32 * (v232 & 0x7FFFFFF);
            v246 = *(_BYTE **)(v245 + 32);
            if (*(_BYTE *)(*(_QWORD *)v246 + 8) == 15 || v246[16] == 75)
              goto LABEL_432;
          }
        }
        if (byte_1ED812040 | byte_1EF8F3AB0 && v205 && *(_BYTE *)(v207 + 16) == 43)
        {
          v230 = *(_DWORD *)(v207 + 20);
          v231 = (v230 & 0x40000000) != 0 ? *(_BYTE ***)(v207 - 8) : (_BYTE **)(v207 - 32 * (v230 & 0x7FFFFFF));
          v234 = *v231;
          if (*(_BYTE *)(*(_QWORD *)v234 + 8) == 15 || v234[16] == 75)
          {
            v235 = (v230 & 0x40000000) != 0 ? *(_QWORD *)(v207 - 8) : v207 - 32 * (v230 & 0x7FFFFFF);
            v236 = *(_BYTE **)(v235 + 32);
            if (*(_BYTE *)(*(_QWORD *)v236 + 8) == 15 || v236[16] == 75)
            {
LABEL_432:
              v247 = LODWORD(__p[1]);
              if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)v465, LODWORD(__p[1]) + 1, 8);
                v247 = LODWORD(__p[1]);
              }
              *((_QWORD *)__p[0] + v247) = v207;
              ++LODWORD(__p[1]);
              goto LABEL_376;
            }
          }
        }
        v237 = sub_1C4DE85D0(v207);
        if (!v205 || (v238 = v237) == 0)
        {
          v241 = *(unsigned __int8 *)(v207 + 16) - 33;
          if (v241 <= 0x33 && ((1 << v241) & 0x8000000000041) != 0)
          {
            if (__b == v478)
              goto LABEL_411;
            if (v480 >= 0x21 && 4 * (HIDWORD(v480) - v481) < v480)
            {
              free(__b);
              v257 = 1 << (33 - __clz(HIDWORD(v480) - v481 - 1));
              v273 = (HIDWORD(v480) - v481) > 0x10;
              v481 = 0;
              if (v273)
                v258 = v257;
              else
                v258 = 32;
              v480 = v258;
              v259 = malloc_type_malloc(8 * v258, 0x4065EBACuLL);
              if (!v259)
                goto LABEL_689;
              __b = v259;
              memset(v259, 255, 8 * v480);
            }
            else
            {
              memset(__b, 255, 8 * v480);
LABEL_411:
              v481 = 0;
              HIDWORD(v480) = 0;
            }
            v242 = v205[5];
            if ((v242 && (*(_BYTE *)(v242 + 16) & 1) != 0
               || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v205 - 3), 32))
              && (!v205[3] && (*((_BYTE *)v205 - 1) & 0x20) == 0
               || !llvm::Instruction::getMetadataImpl((uint64_t ***)v205 - 3, "nosanitize", 0xAuLL)))
            {
              v243 = LODWORD(v470[0].__r_.__value_.__r.__words[1]);
              if (LODWORD(v470[0].__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v470[0].__r_.__value_.__r.__words[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v470, (uint64_t)&v470[0].__r_.__value_.__r.__words[2], LODWORD(v470[0].__r_.__value_.__r.__words[1]) + 1, 8);
                v243 = LODWORD(v470[0].__r_.__value_.__r.__words[1]);
              }
              *(_QWORD *)(v470[0].__r_.__value_.__r.__words[0] + 8 * v243) = v205 - 3;
              ++LODWORD(v470[0].__r_.__value_.__r.__words[1]);
            }
          }
          if (v205 && *(_BYTE *)(v207 + 16) == 84)
            llvm::maybeMarkSanitizerLibraryCallNoBuiltin(v207, v11);
          goto LABEL_376;
        }
        v239 = v472;
        if (v472 >= (unint64_t)HIDWORD(v472))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v471, (uint64_t)v473, v472 + 1, 8);
          v239 = v472;
        }
        if (v238)
          v240 = v207;
        else
          v240 = 0;
        *((_QWORD *)v471 + v239) = v240;
        LODWORD(v472) = v472 + 1;
        ++v206;
LABEL_376:
        v229 = dword_1ED811B00;
        if (v422 != v424)
          free(v422);
        if (v206 < v229)
        {
          v205 = (_QWORD *)v205[1];
          if (v205 != v408)
            continue;
        }
        break;
      }
    }
    v199 = *(_QWORD *)(v402 + 8);
    v12 = v409;
  }
  while ((uint64_t ***)v199 != v394);
  v201 = v475[1];
  v200 = v472;
  v202 = v475[0];
  v132 = v386;
LABEL_482:
  v273 = dword_1EF8F3C30 >= 0 && v201 + (unint64_t)v200 > dword_1EF8F3C30;
  v274 = v273;
  v389 = v274;
  __dst = (std::string::value_type *)(v132[5] + 272);
  v411 = v11;
  v412 = xmmword_1C8661C80;
  v414 = 1;
  v413 = 0;
  v415 = v419;
  v416 = v419;
  v417 = 8;
  v418 = 0;
  v275 = 0;
  if (!v201)
  {
    v276 = v200;
    goto LABEL_557;
  }
  v277 = &v202[6 * v201];
  v385 = v277;
  while (2)
  {
    if (dword_1EF8F49B0 < 0 || dword_1EF8F4A70 < 0)
    {
      ++v275;
    }
    else
    {
      v278 = v275 >= dword_1EF8F49B0 && v275 <= dword_1EF8F4A70;
      ++v275;
      if (!v278)
        goto LABEL_555;
    }
    v279 = v132[5];
    v406 = *(unsigned __int8 **)*v202;
    v403 = dword_1EF8F4470;
    if (byte_1EF8F3FF0)
      v280 = byte_1EF8F4230 == 0;
    else
      v280 = 1;
    if (v280
      || ((UnderlyingObject = llvm::getUnderlyingObject((llvm *)v406, (const llvm::Value *)6)) != 0
        ? (v282 = *((_BYTE *)UnderlyingObject + 16) == 3)
        : (v282 = 0),
          !v282
       || byte_1ED811F80
       && ((*((_DWORD *)UnderlyingObject + 5) & 0x7FFFFFF) == 0
        || (v283 = *(_QWORD *)(v12 + 1000),
            v284 = sub_1C5867374(v283, (uint64_t)UnderlyingObject),
            *(_QWORD *)v283 + 56 * *(unsigned int *)(v283 + 16) != v284)
        && *(_BYTE *)(v284 + 48))
       || !sub_1C586C4D8((llvm::DataLayout **)&__dst, (llvm::Value *)v406, v202[3])))
    {
      v285 = !byte_1EF8F3FF0 || byte_1EF8F42F0 == 0;
      if (v285
        || *((_BYTE *)llvm::getUnderlyingObject((llvm *)v406, (const llvm::Value *)6) + 16) != 59
        || !sub_1C586C4D8((llvm::DataLayout **)&__dst, (llvm::Value *)v406, v202[3]))
      {
        v286 = v202[5];
        if (!v286)
        {
          sub_1C586C5E0(v12, *(_QWORD *)(*v202 + 24), *(_QWORD *)(*v202 + 24), v406, *((_WORD *)v202 + 16), 1 << *(_DWORD *)(v12 + 96), *((_DWORD *)v202 + 6), *((unsigned __int8 *)v202 + 8) != 0, v389, v403);
          goto LABEL_555;
        }
        v397 = *((unsigned __int8 *)v202 + 8);
        v398 = 1 << *(_DWORD *)(v12 + 96);
        v287 = v202[2];
        v400 = (unsigned int *)v287;
        if ((*(_DWORD *)(v287 + 8) & 0xFE) == 0x12)
          v287 = **(_QWORD **)(v287 + 16);
        v388 = v275;
        v288 = *(llvm::ConstantInt **)(v12 + 72);
        v289 = *(uint64_t **)(*v202 + 24);
        v395 = *((unsigned __int16 *)v202 + 16);
        sub_1C4768AD0(v279 + 272, v287);
        v292 = v291;
        if ((_DWORD)v290 == 1)
        v293 = v400[8];
        v393 = llvm::ConstantInt::get(v288, 0, 0);
        if ((_DWORD)v293)
        {
          v391 = v288;
          v387 = v202;
          v294 = 0;
          v295 = (v292 + 7) & 0xFFFFFFF8;
          v296 = v286;
          while (*(_BYTE *)(v286 + 16) == 10)
          {
            v297 = *(_QWORD *)(v296 - 32 * (*(_DWORD *)(v286 + 20) & 0x7FFFFFF));
            if (v297)
              v298 = *(_BYTE *)(v297 + 16) == 16;
            else
              v298 = 0;
            v299 = (char *)v289;
            if (!v298)
              goto LABEL_543;
            v300 = (llvm::APInt *)(v297 + 24);
            v301 = *(_DWORD *)(v297 + 32);
            if (v301 > 0x40)
            {
              v299 = (char *)v289;
              if (llvm::APInt::countLeadingZerosSlowCase(v300) != v301)
                goto LABEL_543;
            }
            else
            {
              v299 = (char *)v289;
              if (*(_QWORD *)v300)
                goto LABEL_543;
            }
LABEL_545:
            ++v294;
            v296 += 32;
            if (v293 == v294)
            {
              v12 = v409;
              v132 = v386;
              v202 = v387;
              v275 = v388;
              goto LABEL_554;
            }
          }
          sub_1C4773D54((uint64_t)&v422, (uint64_t)v289, 0, 0, 0);
          v489 = 257;
          v303 = *(llvm::ConstantInt **)(*v427 + 1984);
          v304 = *(_DWORD *)(*v427 + 1992);
          LODWORD(v490.__r_.__value_.__r.__words[1]) = v304 >> 8;
          if (v304 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v490, v294, 0);
          }
          else
          {
            if (v304 <= 0xFF)
              v305 = 0;
            else
              v305 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v304);
            v490.__r_.__value_.__r.__words[0] = v305 & v294;
          }
          v306 = llvm::ConstantInt::get(v303, (llvm::LLVMContext *)&v490, v302);
          if (LODWORD(v490.__r_.__value_.__r.__words[1]) >= 0x41 && v490.__r_.__value_.__r.__words[0])
            MEMORY[0x1CAA32F9C](v490.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
          v307 = sub_1C4772EE0((uint64_t *)&v422, v286, (uint64_t)v306, (uint64_t)&v487);
          v299 = sub_1C5EBFBC0((llvm::Value *)v307, v289, 0, 0, 0, 0, 0, 0);
          if (v422 != v424)
            free(v422);
LABEL_543:
          sub_1C4773D54((uint64_t)&v422, (uint64_t)v299, 0, 0, 0);
          v490.__r_.__value_.__r.__words[0] = (std::string::size_type)v393;
          v490.__r_.__value_.__l.__size_ = (std::string::size_type)llvm::ConstantInt::get(v391, v294, 0);
          v489 = 257;
          v308 = (unsigned __int8 *)sub_1C509D7B0((uint64_t *)&v422, (llvm::GetElementPtrInst *)v400, (uint64_t *)v406, (llvm::Value *)&v490, 2, (uint64_t)&v487);
          v12 = v12 & 0xFFFFFFFFFFFF0000 | v395;
          sub_1C586C5E0(v409, (uint64_t)v289, (uint64_t)v299, v308, v12, v398, v295, v397 != 0, v389, v403);
          if (v422 != v424)
            free(v422);
          goto LABEL_545;
        }
        v132 = v386;
        v275 = v388;
LABEL_554:
        v277 = v385;
      }
    }
LABEL_555:
    v202 += 6;
    if (v202 != v277)
      continue;
    break;
  }
  v276 = v472;
  v197 = 1;
  v200 = v472;
LABEL_557:
  if (!v200)
    goto LABEL_581;
  v404 = v12 + 960;
  v407 = (llvm *)(v12 + 944);
  v309 = (uint64_t *)v471;
  v310 = 8 * v276;
  v311 = v275;
  while (2)
  {
    v312 = *v309;
    if (dword_1EF8F49B0 < 0 || dword_1EF8F4A70 < 0)
    {
      ++v311;
    }
    else
    {
      v313 = v311 >= dword_1EF8F49B0 && v311 <= dword_1EF8F4A70;
      ++v311;
      if (!v313)
        goto LABEL_579;
    }
    sub_1C4773D54((uint64_t)&v422, *v309, 0, 0, 0);
    v314 = *(_DWORD *)(*(_QWORD *)(v312 - 32) + 36);
    if ((v314 - 196) < 2)
    {
LABEL_570:
      v315 = v314 == 197;
      v316 = 960;
      if (v315)
        v316 = 944;
      v317 = v407;
      if (!v315)
        v317 = (llvm *)v404;
      v318 = v409;
      v319 = *(uint64_t ***)(v409 + v316);
      v320 = *((_QWORD *)v317 + 1);
      v321 = *(unsigned __int8 **)(v312 - 32 * (*(_DWORD *)(v312 + 20) & 0x7FFFFFF));
      v322 = llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
      v489 = 257;
      v486[0] = (uint64_t)sub_1C5098D9C((uint64_t *)&v422, v321, v322, (uint64_t)&v487);
      v323 = *(unsigned __int8 **)(v312 - 32 * (*(_DWORD *)(v312 + 20) & 0x7FFFFFF) + 32);
      v324 = llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
      v491 = 257;
      v325 = sub_1C5098D9C((uint64_t *)&v422, v323, v324, (uint64_t)&v490);
      goto LABEL_576;
    }
    if (v314 == 199)
    {
      v318 = v409;
      v319 = *(uint64_t ***)(v409 + 976);
      v320 = *(_QWORD *)(v409 + 984);
      v326 = *(unsigned __int8 **)(v312 - 32 * (*(_DWORD *)(v312 + 20) & 0x7FFFFFF));
      v327 = llvm::PointerType::get((llvm::PointerType *)(*v427 + 1912), 0);
      v489 = 257;
      v486[0] = (uint64_t)sub_1C5098D9C((uint64_t *)&v422, v326, v327, (uint64_t)&v487);
      v328 = *(unsigned __int8 **)(v312 - 32 * (*(_DWORD *)(v312 + 20) & 0x7FFFFFF) + 32);
      v329 = *v427 + 1960;
      v491 = 257;
      v325 = sub_1C4D8D514((uint64_t *)&v422, v328, v329, 0, (uint64_t)&v490);
LABEL_576:
      v486[1] = (uint64_t)v325;
      v330 = *(unsigned __int8 **)(v312 - 32 * (*(_DWORD *)(v312 + 20) & 0x7FFFFFF) + 64);
      v331 = *(_QWORD *)(v318 + 72);
      v485 = 257;
      v486[2] = (uint64_t)sub_1C4D8D514((uint64_t *)&v422, v330, v331, 0, (uint64_t)&v483);
      v421 = 257;
      sub_1C4774778((uint64_t *)&v422, v319, v320, v486, 3, (uint64_t)v420, 0);
      goto LABEL_577;
    }
    if (v314 == 194)
      goto LABEL_570;
LABEL_577:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v312 + 40) + 40, (uint64_t ***)v312);
    v332 = *(_QWORD *)(v312 + 24);
    v333 = *(_QWORD **)(v312 + 32);
    *v333 = v332;
    *(_QWORD *)(v332 + 8) = v333;
    *(_QWORD *)(v312 + 24) = 0;
    *(_QWORD *)(v312 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v312);
    if (v422 != v424)
      free(v422);
LABEL_579:
    ++v309;
    v310 -= 8;
    if (v310)
      continue;
    break;
  }
  v197 = 1;
  v12 = v409;
  v132 = v386;
LABEL_581:
  v422 = v132;
  v423 = v12;
  llvm::DIBuilder::DIBuilder((uint64_t)v424, (_QWORD *)v132[5], 0, 0);
  v334 = *(llvm::PointerType **)(v12 + 72);
  v437[42] = *(_QWORD *)v12;
  v437[43] = v334;
  v335 = llvm::PointerType::get(v334, 0);
  v438 = *(_OWORD *)(v12 + 96);
  v336 = *(_QWORD *)(v12 + 112);
  v437[44] = v335;
  v439 = v336;
  v440 = v442;
  v441 = 0x1000000000;
  v443 = v445;
  v444 = 0x1000000000;
  v446 = v448;
  v447 = 0x800000000;
  bzero(&v449, 0x11A0uLL);
  v450 = v452;
  v451 = 0x800000000;
  v453 = v455;
  v454 = 0x800000000;
  v455[256] = 0;
  v456 = &v458;
  v457 = 0x100000000;
  v459 = v461;
  v460 = 0x100000000;
  *(_OWORD *)&v461[8] = 0u;
  v462 = 0;
  if (byte_1ED811BC0)
  {
    v338 = v132[5] + 216;
    v491 = 260;
    v490.__r_.__value_.__r.__words[0] = v338;
    llvm::Triple::Triple((uint64_t)&v487, (llvm::Twine *)&v490);
    v337 = v488 != 25 && v488 != 30;
    if (SHIBYTE(v487.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v487.__r_.__value_.__l.__data_);
  }
  else
  {
    v337 = 0;
  }
  v463 = v337;
  v340 = sub_1C5867B6C((uint64_t)&v422);
  if (LODWORD(v470[0].__r_.__value_.__r.__words[1]))
  {
    v355 = (uint64_t *)v470[0].__r_.__value_.__r.__words[0];
    v356 = 8 * LODWORD(v470[0].__r_.__value_.__r.__words[1]);
    do
    {
      sub_1C4773D54((uint64_t)&v487, *v355, 0, 0, 0);
      v357 = *(uint64_t ***)(v12 + 120);
      v358 = *(_QWORD *)(v12 + 128);
      v491 = 257;
      sub_1C4774778((uint64_t *)&v487, v357, v358, 0, 0, (uint64_t)&v490, 0);
      if ((std::string::size_type *)v487.__r_.__value_.__l.__data_ != &v487.__r_.__value_.__r.__words[2])
        free(v487.__r_.__value_.__l.__data_);
      ++v355;
      v356 -= 8;
    }
    while (v356);
  }
  if (LODWORD(__p[1]))
  {
    v392 = v340;
    v341 = (uint64_t *)__p[0];
    v342 = (uint64_t *)((char *)__p[0] + 8 * LODWORD(__p[1]));
    do
    {
      v343 = *v341;
      sub_1C4773D54((uint64_t)&v487, *v341, 0, 0, 0);
      v344 = v409 + 136;
      if (*(_BYTE *)(v343 + 16) != 81)
        v344 = v409 + 152;
      v345 = *(uint64_t ***)v344;
      v346 = *(_QWORD *)(v344 + 8);
      v484 = 0;
      v483 = 0;
      v347 = *(_DWORD *)(v343 + 20);
      if ((v347 & 0x40000000) != 0)
      {
        v483 = **(_QWORD **)(v343 - 8);
        v348 = *(uint64_t **)(v343 - 8);
      }
      else
      {
        v348 = (uint64_t *)(v343 - 32 * (v347 & 0x7FFFFFF));
        v483 = *v348;
      }
      v349 = 0;
      v484 = v348[4];
      v350 = &v483;
      v351 = 1;
      do
      {
        v352 = v349;
        v353 = (unsigned __int8 *)*v350;
        if (*(_BYTE *)(*(_QWORD *)*v350 + 8) == 15)
        {
          v354 = *(_QWORD *)(v409 + 72);
          v491 = 257;
          *v350 = (uint64_t)sub_1C5098D9C((uint64_t *)&v487, v353, v354, (uint64_t)&v490);
        }
        v350 = &v483 + v351;
        v349 = 1;
        v351 = 2;
      }
      while ((v352 & 1) == 0);
      v491 = 257;
      sub_1C4774778((uint64_t *)&v487, v345, v346, &v483, 2, (uint64_t)&v490, 0);
      if ((std::string::size_type *)v487.__r_.__value_.__l.__data_ != &v487.__r_.__value_.__r.__words[2])
        free(v487.__r_.__value_.__l.__data_);
      ++v341;
    }
    while (v341 != v342);
    v197 = 1;
    v12 = v409;
    v340 = v392;
  }
  if (LODWORD(v470[0].__r_.__value_.__r.__words[1]))
    v359 = 1;
  else
    v359 = v340;
  if (v459 != v461)
    free(v459);
  if (v456 != &v458)
    free(v456);
  if (v453 != v455)
    free(v453);
  if (v450 != v452)
    free(v450);
  if (v446 != v448)
    free(v446);
  if (v443 != v445)
    free(v443);
  if (v440 != v442)
    free(v440);
  sub_1C50F023C((uint64_t)v424);
  if (v416 != v415)
    free(v416);
  v9 = v197 | v359;
  if (v414 >= 0x41 && v413)
    MEMORY[0x1CAA32F9C](v413, 0x1000C8000313F17);
LABEL_634:
  if (__p[0] != v465)
    free(__p[0]);
  if (v466 != v468)
    free(v466);
  if ((std::string::size_type *)v470[0].__r_.__value_.__l.__data_ != &v470[0].__r_.__value_.__r.__words[2])
    free(v470[0].__r_.__value_.__l.__data_);
  if (v471 != v473)
    free(v471);
  if (v475[0] != v476)
    free(v475[0]);
  if (__b != v478)
    free(__b);
  *(_QWORD *)(v12 + 992) = 0;
  sub_1C61446F0((unsigned int *)(v12 + 1016));
  return v9;
}

void sub_1C58634BC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v16;
  char v17;
  BOOL v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  llvm::ConstantExpr *v30;
  llvm::GlobalObject *v31;
  size_t *inserted;
  llvm::GlobalObject *v33;
  size_t *v34;
  char *v35;
  void *v36[2];
  char v37;
  __int16 v38;
  std::string __p;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void **v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _QWORD v53[2];

  v53[1] = *MEMORY[0x1E0C80C00];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  __p.__r_.__value_.__l.__size_ = 0x200000000;
  v4 = *(_QWORD *)(a1 + 24);
  v43 = *(_QWORD *)(a1 + 32);
  v44 = &v52;
  v45 = v53;
  v46 = 0;
  v47 = 0;
  v48 = 512;
  v49 = 7;
  v41 = 0;
  v42 = 0;
  v50 = 0;
  v51 = 0;
  v52 = &unk_1E8167888;
  v53[0] = &unk_1E8167A08;
  *(_QWORD *)(a1 + 112) = sub_1C6212CB8((uint64_t)a2, "__asan_before_dynamic_init", 0x1AuLL, 0, (uint64_t **)(*(_QWORD *)v43 + 1576), v4);
  *(_QWORD *)(a1 + 120) = v5;
  *(_QWORD *)(a1 + 128) = sub_1C6210688((uint64_t)a2, "__asan_after_dynamic_init", 0x19uLL, 0, (uint64_t **)(*(_QWORD *)v43 + 1576));
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = sub_1C6291FE0((uint64_t)a2, "__asan_register_globals", 0x17uLL, 0, (uint64_t **)(*(_QWORD *)v43 + 1576), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 152) = v7;
  *(_QWORD *)(a1 + 160) = sub_1C6291FE0((uint64_t)a2, "__asan_unregister_globals", 0x19uLL, 0, (uint64_t **)(*(_QWORD *)v43 + 1576), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 168) = v8;
  *(_QWORD *)(a1 + 176) = sub_1C6212CB8((uint64_t)a2, "__asan_register_image_globals", 0x1DuLL, 0, (uint64_t **)(*(_QWORD *)v43 + 1576), *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 184) = v9;
  *(_QWORD *)(a1 + 192) = sub_1C6212CB8((uint64_t)a2, "__asan_unregister_image_globals", 0x1FuLL, 0, (uint64_t **)(*(_QWORD *)v43 + 1576), *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 200) = v10;
  *(_QWORD *)(a1 + 208) = sub_1C5867298((uint64_t)a2, "__asan_register_elf_globals", 0x1BuLL, 0, (uint64_t **)(*(_QWORD *)v43 + 1576), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 216) = v11;
  *(_QWORD *)(a1 + 224) = sub_1C5867298((uint64_t)a2, "__asan_unregister_elf_globals", 0x1DuLL, 0, (uint64_t **)(*(_QWORD *)v43 + 1576), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 232) = v12;
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
    free(__p.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)(a1 + 240) = llvm::createSanitizerCtor((llvm::Module *)a2, (llvm::UndefValue *)"asan.module_ctor", (llvm::UndefValue *)0x10);
  }
  else
  {
    v13 = *(_DWORD *)(a2[63] + 4);
    v38 = 260;
    v36[0] = a2 + 27;
    llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v36);
    v14 = v40;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v14 == 11 && v13 == 32)
      v16 = 9;
    else
      v16 = 8;
    std::to_string(&__p, v16);
    v17 = byte_1ED811380;
    if (byte_1ED811380)
    {
      std::operator+<char>();
      v17 = v37;
    }
    else
    {
      v37 = 0;
      LOBYTE(v36[0]) = 0;
    }
    v18 = v17 < 0;
    v19 = (unsigned __int8 *)v36;
    if (v17 < 0)
      v19 = (unsigned __int8 *)v36[0];
    v20 = v17 & 0x7F;
    if (v18)
      v20 = (unint64_t)v36[1];
    llvm::createSanitizerCtorAndInitFunctions((llvm::Module *)a2, (llvm::UndefValue *)"asan.module_ctor", (llvm::UndefValue *)0x10, "__asan_init", 0xBuLL, 0, 0, &v35, 0, 0, v19, v20);
    *(_QWORD *)(a1 + 240) = v35;
    if (v37 < 0)
      operator delete(v36[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  LOBYTE(v36[0]) = 1;
  if (byte_1ED811EC0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 80);
    v22 = v21 - 24;
    if (!v21)
      v22 = 0;
    v23 = *(_QWORD *)(v22 + 40);
    if (v23 == v22 + 40)
    {
      v25 = 0;
    }
    else
    {
      if (v23)
        v24 = v23 - 24;
      else
        v24 = 0;
      if (*(unsigned __int8 *)(v24 + 16) - 29 >= 0xB)
        v25 = 0;
      else
        v25 = v24;
    }
    sub_1C4773D54((uint64_t)&__p, v25, 0, 0, 0);
    sub_1C58645D8(a1, (uint64_t)&__p, (uint64_t)a2, v36);
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
      free(__p.__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 76) == 40)
    v26 = 50;
  else
    v26 = 1;
  if (!*(_BYTE *)(a1 + 13) || *(_DWORD *)(a1 + 84) != 3 || !LOBYTE(v36[0]))
  {
    sub_1C5F50894("llvm.global_ctors", (uint64_t)a2, *(_QWORD *)(a1 + 240), v26, 0);
    v27 = *(_QWORD *)(a1 + 248);
    if (!v27)
      return;
    v28 = (uint64_t)a2;
    v29 = v26;
    v30 = 0;
    goto LABEL_45;
  }
  v31 = *(llvm::GlobalObject **)(a1 + 240);
  inserted = llvm::Module::getOrInsertComdat((uint64_t)a2, "asan.module_ctor", 0x10uLL);
  llvm::GlobalObject::setComdat(v31, (llvm::Comdat *)inserted);
  sub_1C5F50894("llvm.global_ctors", (uint64_t)a2, *(_QWORD *)(a1 + 240), v26, *(llvm::ConstantExpr **)(a1 + 240));
  v33 = *(llvm::GlobalObject **)(a1 + 248);
  if (v33)
  {
    v34 = llvm::Module::getOrInsertComdat((uint64_t)a2, "asan.module_dtor", 0x10uLL);
    llvm::GlobalObject::setComdat(v33, (llvm::Comdat *)v34);
    v27 = *(_QWORD *)(a1 + 248);
    v28 = (uint64_t)a2;
    v29 = v26;
    v30 = (llvm::ConstantExpr *)v27;
LABEL_45:
    sub_1C5F50894("llvm.global_dtors", v28, v27, v29, v30);
  }
}

void llvm::initializeASanGlobalsMetadataWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED811178);
  if (v2 != -1)
  {
    v5[0] = sub_1C5863A0C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED811178, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5863A0C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Read metadata to mark which globals should be instrumented when running ASan.";
  *(_QWORD *)(v2 + 8) = 77;
  *(_QWORD *)(v2 + 16) = "asan-globals-md";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1ED811170;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5863EBC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeAddressSanitizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F7170);
  if (v2 != -1)
  {
    v5[0] = sub_1C5863B00;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F7170, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5863B00(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v3;
  uint64_t v4;
  llvm *v6;
  _QWORD *v7;
  _QWORD v8[2];

  v6 = this;
  v3 = atomic_load(&qword_1ED811178);
  if (v3 != -1)
  {
    v8[0] = sub_1C5863A0C;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED811178, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  llvm::initializeStackSafetyGlobalInfoWrapperPassPass(this, a2);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)this);
  v4 = operator new();
  *(_QWORD *)v4 = "AddressSanitizer: detects use-after-free and out-of-bounds bugs.";
  *(_QWORD *)(v4 + 8) = 64;
  *(_QWORD *)(v4 + 16) = "asan";
  *(_QWORD *)(v4 + 24) = 4;
  *(_QWORD *)(v4 + 32) = &unk_1ED811171;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C58640AC;
  llvm::PassRegistry::registerPass((uint64_t)this, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5863BF0(uint64_t a1, char a2, char a3, char a4, int a5)
{
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED811171;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E817D728;
  *(_BYTE *)(a1 + 28) = a2;
  *(_BYTE *)(a1 + 29) = a3;
  *(_BYTE *)(a1 + 30) = a4;
  *(_DWORD *)(a1 + 32) = a5;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v9 = qword_1ED830BC0[0];
  v7 = atomic_load(&qword_1EF8F7170);
  if (v7 != -1)
  {
    v11[0] = sub_1C5863B00;
    v11[1] = &v9;
    v10 = v11;
    std::__call_once(&qword_1EF8F7170, &v10, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::initializeModuleAddressSanitizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F7178);
  if (v2 != -1)
  {
    v5[0] = sub_1C5863D28;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F7178, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5863D28(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AddressSanitizer: detects use-after-free and out-of-bounds bugs.ModulePass";
  *(_QWORD *)(v2 + 8) = 74;
  *(_QWORD *)(v2 + 16) = "asan-module";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F3A28;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C58644AC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5863DB8(uint64_t a1, char a2, char a3, char a4, char a5, int a6)
{
  unint64_t v8;
  unint64_t v10;
  _QWORD *v11;
  _QWORD v12[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F3A28;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817D7C8;
  *(_BYTE *)(a1 + 28) = a2;
  *(_BYTE *)(a1 + 29) = a3;
  *(_BYTE *)(a1 + 30) = a4;
  *(_BYTE *)(a1 + 31) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v10 = qword_1ED830BC0[0];
  v8 = atomic_load(&qword_1EF8F7178);
  if (v8 != -1)
  {
    v12[0] = sub_1C5863D28;
    v12[1] = &v10;
    v11 = v12;
    std::__call_once(&qword_1EF8F7178, &v11, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5863E94(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C5863EA8(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C5863EBC()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1ED811170;
  *(_DWORD *)(v0 + 24) = 4;
  *(_QWORD *)v0 = &off_1E817D688;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 48) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED811178);
  if (v2 != -1)
  {
    v6[0] = sub_1C5863A0C;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED811178, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5863FA4(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817D688;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);
}

void sub_1C5863FDC(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817D688;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5864028()
{
  return "ASanGlobalsMetadataWrapperPass";
}

void sub_1C5864038(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C5864044(uint64_t a1, llvm::Module *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  llvm::GlobalsMetadata::GlobalsMetadata((llvm::GlobalsMetadata *)&v4, a2);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 32), 8);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  v4 = 0;
  v5 = 0;
  *(_DWORD *)(a1 + 48) = v6;
  v6 = 0;
  MEMORY[0x1CAA32FB4](0, 8);
  return 0;
}

uint64_t sub_1C58640AC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5863BF0(v0, 0, 0, 0, 1);
}

void sub_1C58640E8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C586410C()
{
  return "AddressSanitizerFunctionPass";
}

void *sub_1C586411C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&unk_1ED811170);
  if (byte_1ED8115C0)
    sub_1C4771E64(a2, a2, (uint64_t)&llvm::StackSafetyGlobalInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1C5864178(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  void **v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24[2];
  int v25;
  uint64_t v26[2];
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void *__src;
  unsigned int v33;
  _BYTE v34[48];
  int v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &unk_1ED811170);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &unk_1ED811170);
  if (byte_1ED8115C0)
  {
    v7 = **(void ****)(a1 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
    }
    while (v8 != &llvm::StackSafetyGlobalInfoWrapperPass::ID);
    v9 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::StackSafetyGlobalInfoWrapperPass::ID)+ 32;
  }
  else
  {
    v9 = 0;
  }
  v10 = **(char ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::TargetLibraryInfoWrapperPass::ID);
  v12 = v6 + 32;
  v13 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  llvm::TargetLibraryAnalysis::run(v13 + 32, a2, (uint64_t)&v31);
  *(_QWORD *)(v13 + 240) = v31;
  if (*(_BYTE *)(v13 + 320))
  {
    if ((uint64_t *)(v13 + 240) == &v31)
    {
LABEL_23:
      *(_DWORD *)(v13 + 312) = v35;
      goto LABEL_24;
    }
    v14 = (void **)(v13 + 248);
    v15 = v33;
    v16 = *(unsigned int *)(v13 + 256);
    if (v16 >= v33)
    {
      if (v33)
        memmove(*v14, __src, 8 * v33);
      goto LABEL_22;
    }
    if (*(_DWORD *)(v13 + 260) < v33)
    {
      *(_DWORD *)(v13 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13 + 248, v13 + 264, v15, 8);
    }
    else if ((_DWORD)v16)
    {
      memmove(*v14, __src, 8 * v16);
      goto LABEL_20;
    }
    v16 = 0;
LABEL_20:
    if (v16 != v33)
      memcpy((char *)*v14 + 8 * v16, (char *)__src + 8 * v16, 8 * v33 - 8 * v16);
LABEL_22:
    *(_DWORD *)(v13 + 256) = v15;
    goto LABEL_23;
  }
  v20 = (void *)(v13 + 264);
  *(_QWORD *)(v13 + 248) = v13 + 264;
  v21 = (void **)(v13 + 248);
  *(_QWORD *)(v13 + 256) = 0x600000000;
  v22 = v33;
  if (v33 && v21 != &__src)
  {
    if (v33 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13 + 248, v13 + 264, v33, 8);
      v23 = v33;
      if (!v33)
      {
LABEL_36:
        *(_DWORD *)(v13 + 256) = v22;
        goto LABEL_37;
      }
      v20 = *v21;
    }
    else
    {
      v23 = v33;
    }
    memcpy(v20, __src, 8 * v23);
    goto LABEL_36;
  }
LABEL_37:
  *(_DWORD *)(v13 + 312) = v35;
  *(_BYTE *)(v13 + 320) = 1;
LABEL_24:
  if (__src != v34)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v26);
  sub_1C4D8B52C(v24);
  sub_1C58603D0((uint64_t)&v31, *(_QWORD *)(a2 + 40), v12, v9, *(_BYTE *)(a1 + 28), *(_BYTE *)(a1 + 29), *(_BYTE *)(a1 + 30), *(_DWORD *)(a1 + 32));
  v18 = sub_1C5860654((uint64_t)&v31, a2, v13 + 240, v17);
  MEMORY[0x1CAA32FB4](v36, 8);
  if ((v34[7] & 0x80000000) != 0)
    operator delete(__src);
  return v18;
}

uint64_t sub_1C58644AC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5863DB8(v0, 0, 0, 1, 0, 1);
}

void sub_1C58644EC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5864510()
{
  return "ModuleAddressSanitizer";
}

void *sub_1C5864520(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2, (uint64_t)&unk_1ED811170);
}

uint64_t sub_1C5864530(uint64_t a1, _QWORD *a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  _BYTE v8[40];
  void *__p;
  char v10;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &unk_1ED811170);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &unk_1ED811170);
  sub_1C5860150((uint64_t)v8, (uint64_t)a2, v6 + 32, *(_BYTE *)(a1 + 28), *(_BYTE *)(a1 + 29), *(_BYTE *)(a1 + 30), *(_BYTE *)(a1 + 31), *(_DWORD *)(a1 + 32));
  sub_1C58634BC((uint64_t)v8, a2);
  if (v10 < 0)
    operator delete(__p);
  return 1;
}

void sub_1C58645D8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  uint64_t ***v18;
  llvm::Value *v19;
  uint64_t v20;
  uint64_t ***v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  char v30;
  uint64_t **v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t ****v39;
  uint64_t ***v40;
  int v41;
  int v42;
  int v43;
  uint64_t **v44;
  unsigned int v45;
  uint64_t ***v46;
  int v47;
  int v48;
  uint64_t v50;
  uint64_t ****v51;
  uint64_t ***v52;
  int v53;
  int v54;
  uint64_t ***v56;
  uint64_t **v57;
  int v58;
  uint64_t v60;
  uint64_t ****v61;
  uint64_t ***v62;
  int v63;
  int v64;
  uint64_t ***v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t ****v70;
  uint64_t ***v71;
  int v72;
  int v73;
  uint64_t ***v74;
  uint64_t **v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t ****v79;
  uint64_t ***v80;
  int v81;
  int v82;
  uint64_t ***v83;
  uint64_t **v84;
  uint64_t v85;
  int v87;
  char v88;
  unint64_t v89;
  llvm::GlobalValue *Section;
  uint64_t v91;
  llvm::Module *v92;
  uint64_t **v93;
  llvm::GlobalValue *v94;
  uint64_t v95;
  llvm::Module *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t ****v101;
  uint64_t ***v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  uint64_t ****v110;
  uint64_t ***v111;
  size_t v112;
  uint64_t ***v113;
  uint64_t ***v116;
  uint64_t v117;
  uint64_t ****v118;
  int v119;
  BOOL v120;
  unsigned int v121;
  uint64_t ****v122;
  uint64_t ***v123;
  int v127;
  int v128;
  BOOL v129;
  int v132;
  BOOL v135;
  _BYTE *v136;
  BOOL v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t *v142;
  _BYTE *v143;
  char v144;
  int v145;
  char *v146;
  llvm::Type *v147;
  llvm::Type *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  llvm::Type *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  int v163;
  int v164;
  _QWORD *v165;
  char *v166;
  llvm::Type *v167;
  llvm::Type *v168;
  char *v169;
  llvm::Type *v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  BOOL v176;
  const char *v177;
  char v178;
  char v179;
  unint64_t v180;
  unsigned int v181;
  unint64_t v182;
  unint64_t v183;
  llvm::Type *v184;
  llvm::Constant *v185;
  llvm::Constant *v186;
  uint64_t *v187;
  llvm::ConstantAggregateZero *v188;
  void *v189;
  llvm::Type *v190;
  llvm::Value **NullValue;
  llvm::UndefValue *v192;
  int v193;
  unsigned __int8 v194;
  _DWORD *v195;
  _DWORD *v196;
  llvm::GlobalObject *v197;
  char v198;
  char v199;
  llvm::GlobalObject *v200;
  int v201;
  unsigned int v202;
  const llvm::APInt *v203;
  uint64_t v204;
  llvm::ConstantInt *v205;
  const llvm::APInt *v206;
  llvm::ValueHandleBase *v207;
  uint64_t v208;
  llvm::ConstantInt *v209;
  llvm::ValueHandleBase *v210;
  llvm::Value *ElementPtr;
  llvm::Type *v212;
  llvm::Constant *v213;
  llvm::Type *v214;
  llvm::Type *v215;
  llvm::GlobalValue *v216;
  unsigned int v217;
  llvm::Value **v218;
  llvm::Constant *v219;
  _DWORD *v220;
  llvm::Constant *v221;
  llvm::Type *v222;
  llvm::Value **v223;
  int v224;
  int v225;
  unsigned int v226;
  llvm::ConstantExpr *v227;
  llvm::Value **v228;
  llvm::Value **v229;
  llvm::Type *v230;
  llvm::ConstantExpr *v231;
  llvm::Type *v232;
  llvm::ConstantExpr *v233;
  llvm::Value **v234;
  llvm::Type *v235;
  llvm::ConstantExpr *v236;
  llvm::UndefValue *v237;
  BOOL v238;
  int v239;
  llvm::ConstantDataSequential *v240;
  llvm::GlobalObject *v241;
  llvm::GlobalObject *v242;
  llvm::GlobalObject *v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  int v247;
  unsigned int v248;
  llvm::GlobalObject **v249;
  llvm::GlobalObject *v250;
  const llvm::APInt *v251;
  uint64_t v252;
  llvm::ConstantInt *v253;
  unint64_t v254;
  unint64_t v255;
  const llvm::APInt *v256;
  llvm::ValueHandleBase *v257;
  uint64_t v258;
  llvm::ConstantInt *v259;
  unsigned int v260;
  unint64_t v261;
  llvm::ValueHandleBase *v262;
  llvm::ConstantAggregateZero *TypeForElements;
  llvm::UndefValue *v264;
  _DWORD *v265;
  llvm::PointerType *v266;
  llvm::ConstantExpr *v267;
  llvm::Type *v268;
  char hasExternalWeakLinkage;
  llvm::GlobalObject **v270;
  int v271;
  BOOL v272;
  unsigned int v273;
  llvm::GlobalObject **v274;
  llvm::GlobalObject *v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t ***v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t ****v283;
  uint64_t ***v284;
  int v285;
  int v286;
  int v287;
  std::string::size_type v288;
  _QWORD *v289;
  uint64_t v290;
  llvm::PointerType ***v291;
  int v292;
  uint64_t v293;
  llvm::ValueAsMetadata *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  llvm::ValueAsMetadata **v299;
  llvm::ValueAsMetadata *v300;
  int v301;
  int v302;
  llvm::ValueAsMetadata *v303;
  unsigned __int8 *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t ***v307;
  uint64_t *v308;
  llvm::Value *v309;
  llvm::MDNode *v310;
  std::string::value_type *p_p;
  std::string::size_type v312;
  int v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  llvm::ValueAsMetadata *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  llvm::ValueAsMetadata **v322;
  llvm::ValueAsMetadata *v323;
  int v324;
  int v325;
  llvm::ValueAsMetadata *v326;
  unsigned __int8 *v327;
  uint64_t v328;
  uint64_t v329;
  llvm::PointerType **v330;
  uint64_t ***v331;
  uint64_t *v332;
  llvm::Value *v333;
  llvm::MDNode *Impl;
  llvm::PointerType *v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  BOOL v339;
  const char *v340;
  char v341;
  char v342;
  int v343;
  uint64_t v344;
  unsigned int v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t **v351;
  uint64_t *v352;
  llvm::ConstantAggregateZero *v353;
  uint64_t v354;
  uint64_t ***v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t ****v361;
  uint64_t ***v362;
  int v363;
  int v364;
  uint64_t ***v365;
  unsigned __int8 *v366;
  uint64_t v367;
  uint64_t v368;
  llvm::PointerType **v369;
  uint64_t ***v370;
  llvm::UndefValue *AggregateElement;
  llvm::Type *v372;
  llvm::ConstantExpr *v373;
  llvm::UndefValue *v374;
  _DWORD *v375;
  _DWORD *v376;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t ****v382;
  uint64_t ***v383;
  int v384;
  int v385;
  uint64_t ***v386;
  uint64_t **v387;
  char *v388;
  uint64_t **v389;
  _BYTE *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  uint64_t v395;
  int v396;
  unsigned int v397;
  _QWORD *v398;
  void *v399;
  _QWORD *v400;
  int v401;
  BOOL v402;
  unsigned int v403;
  _QWORD *v404;
  void *v405;
  llvm::Value ***v406;
  _DWORD *v407;
  llvm::GlobalValue *v408;
  llvm::ConstantInt *v409;
  llvm::Value **v410;
  int v411;
  unsigned int v412;
  _DWORD *v413;
  llvm::GlobalValue *v414;
  llvm::PointerType *v415;
  uint64_t v416;
  uint64_t **v417;
  int v418;
  unsigned int v419;
  _DWORD *v420;
  llvm::GlobalValue *v421;
  llvm::PointerType *v422;
  uint64_t v423;
  uint64_t **v424;
  int v425;
  unsigned int v426;
  uint64_t **v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t **v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  llvm::Type *v439;
  uint64_t v440;
  llvm::PoisonValue *v441;
  llvm::PoisonValue *v442;
  char *v443;
  unsigned __int8 *v444;
  llvm::Value **v445;
  uint64_t **v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t **v450;
  uint64_t v451;
  uint64_t v452;
  _DWORD *v453;
  llvm::GlobalValue *v454;
  llvm::ConstantInt *v455;
  llvm::Value **v456;
  int v457;
  unsigned int v458;
  uint64_t **v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t **v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t *v472;
  uint64_t ***v473;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t ****v479;
  uint64_t ***v480;
  int v481;
  int v482;
  uint64_t ***v483;
  uint64_t **v484;
  uint64_t **v485;
  uint64_t v487;
  unint64_t *v488;
  unsigned int v489;
  unint64_t v490;
  uint64_t **v491;
  uint64_t **v492;
  uint64_t v493;
  uint64_t i;
  uint64_t v495;
  unsigned int v496;
  BOOL v497;
  uint64_t v498;
  llvm::Type *v500;
  uint64_t **v501;
  uint64_t v502;
  uint64_t ***v503;
  uint64_t **j;
  uint64_t **v505;
  uint64_t **v506;
  uint64_t v507;
  unsigned int v508;
  llvm::Instruction *v509;
  llvm::Type ***v511;
  llvm::Value *v512;
  _DWORD *v513;
  char *v514;
  int v515;
  int v516;
  char v517;
  char *v518;
  llvm::ConstantExpr *v519;
  llvm::ConstantAggregateZero *v520;
  llvm::ConstantExpr *PrivateGlobalForString;
  llvm::Type *v522;
  uint64_t **PointerCast;
  llvm::Type *v524;
  llvm::Type *v525;
  llvm::ConstantExpr *v526;
  uint64_t v527;
  int v528;
  char v529;
  uint64_t v530;
  uint64_t v531;
  _QWORD *v532;
  _BYTE *v533;
  _QWORD *v534;
  _QWORD *v536;
  uint64_t *v537;
  void *__p;
  std::string::size_type v539;
  unsigned __int8 v540;
  char *v541;
  char *v542;
  uint64_t v543;
  int v544;
  _BYTE v545[128];
  void *v546;
  uint64_t v547;
  _QWORD v548[16];
  void *v549;
  unint64_t v550;
  _BYTE v551[128];
  void *v552;
  llvm::Type *v553;
  _BYTE v554[128];
  void *v555;
  uint64_t v556;
  _BYTE v557[128];
  uint64_t v558[4];
  __int16 v559;
  uint64_t v560[3];
  uint64_t v561[4];
  __int16 v562;
  uint64_t v563[4];
  __int16 v564;
  void *v565;
  llvm::ValueHandleBase *v566;
  uint64_t v567;
  uint64_t **v568;
  __int16 v569;
  void *OSVersion;
  uint64_t v571;
  llvm::Value **v572;
  llvm::ConstantExpr *v573;
  llvm::ConstantExpr *v574;
  llvm::Value **v575;
  uint64_t **v576;
  llvm::ConstantExpr *v577;
  uint64_t v578[4];
  __int16 v579;
  uint64_t v580;

  v580 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  v541 = v545;
  v542 = v545;
  v543 = 16;
  v544 = 0;
  if (*(_BYTE *)(a1 + 8))
  {
    v7 = a3 + 40;
    v8 = *(_QWORD *)(a3 + 48);
    if (v8 != a3 + 40)
    {
      while (1)
      {
        v9 = (uint64_t ***)(v8 - 48);
        if (!v8)
          v9 = 0;
        if ((*((_BYTE *)v9 + 23) & 0x10) == 0)
          goto LABEL_17;
        v10 = ***v9;
        v11 = *(_QWORD *)(v10 + 152);
        v12 = *(unsigned int *)(v10 + 168);
        if (!(_DWORD)v12)
          goto LABEL_12;
        LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
        v14 = (uint64_t ****)(v11 + 16 * v13);
        v15 = *v14;
        if (*v14 != v9)
          break;
LABEL_13:
        v18 = v14[1];
        if ((unint64_t)*v18 >= 2 && *((_WORD *)v18 + 8) == 24415)
        {
          v19 = llvm::Value::stripPointerCastsAndAliases((llvm::Value *)*(v9 - 4));
          if (*((_BYTE *)v19 + 16) == 3)
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v541, (uint64_t)v19);
        }
LABEL_17:
        v8 = *(_QWORD *)(v8 + 8);
        if (v8 == v7)
          goto LABEL_18;
      }
      v16 = 1;
      while (v15 != (uint64_t ***)-4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(uint64_t ****)(v11 + 16 * v13);
        if (v15 == v9)
        {
          v14 = (uint64_t ****)(v11 + 16 * v13);
          goto LABEL_13;
        }
      }
LABEL_12:
      v14 = (uint64_t ****)(v11 + 16 * v12);
      goto LABEL_13;
    }
  }
LABEL_18:
  v555 = v557;
  v556 = 0x1000000000;
  v537 = (uint64_t *)a3;
  v20 = *(_QWORD *)(a3 + 16);
  if (v20 == a3 + 8)
    goto LABEL_279;
  v533 = a4;
  do
  {
    if (v20)
      v21 = (uint64_t ***)(v20 - 56);
    else
      v21 = 0;
    v22 = (char *)sub_1C477672C((uint64_t)&v541, (uint64_t)v21);
    if (v542 == v541)
      v23 = (uint64_t *)((char *)&v543 + 4);
    else
      v23 = &v543;
    if (v22 != &v542[8 * *(unsigned int *)v23])
      goto LABEL_27;
    v24 = (uint64_t)v21[3];
    v25 = *(_QWORD *)a1;
    v26 = sub_1C5867374(*(_QWORD *)a1, (uint64_t)v21);
    if (*(_QWORD *)v25 + 56 * *(unsigned int *)(v25 + 16) != v26)
    {
      if (*(_BYTE *)(v26 + 49))
        goto LABEL_27;
    }
    v27 = *(unsigned __int8 *)(v24 + 8);
    if (v27 > 0x11)
      goto LABEL_77;
    if (((1 << v27) & 0xAC7F) != 0)
      goto LABEL_33;
    if (((1 << v27) & 0x30000) == 0)
    {
LABEL_77:
      if ((v27 & 0xFE) != 0x12 && v27 != 21)
        goto LABEL_27;
    }
    if (!llvm::Type::isSizedDerivedType(v24, 0))
      goto LABEL_27;
LABEL_33:
    v28 = *((unsigned __int8 *)v21 + 16);
    if (v20)
      v29 = v28 == 3;
    else
      v29 = 0;
    v30 = !v29;
    if (v29)
    {
      if ((*((_DWORD *)v21 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_27;
    }
    else if (!*((_BYTE *)v21 + 16) && v21[9] == (uint64_t **)(v21 + 9) && (*((_BYTE *)v21 + 34) & 0x80) == 0)
    {
      goto LABEL_27;
    }
    v31 = *v21;
    v32 = *((_DWORD *)*v21 + 2);
    if (v32 >= 0x100)
    {
      v43 = *(_DWORD *)(a1 + 64);
      if (v43 != 30 && v43 != 25)
        goto LABEL_27;
      v44 = *v21;
      if (((_DWORD)(*v21)[1] & 0xFE) == 0x12)
      {
        v44 = (uint64_t **)*v31[2];
        v32 = *((_DWORD *)v44 + 2);
      }
      if ((v32 & 0xFE) == 0x12)
        v32 = *(_DWORD *)(*v44[2] + 8);
      v45 = v32 >> 8;
      if (v45 == 3 || v45 == 5)
        goto LABEL_27;
    }
    v33 = *((_DWORD *)v21 + 5);
    if ((v33 & 0x10000000) != 0)
    {
      v34 = **v31;
      v35 = *(_QWORD *)(v34 + 152);
      v36 = *(unsigned int *)(v34 + 168);
      v37 = v21 >> 4;
      if (!(_DWORD)v36)
        goto LABEL_65;
      LODWORD(v38) = (v36 - 1) & (v37 ^ (v21 >> 9));
      v39 = (uint64_t ****)(v35 + 16 * v38);
      v40 = *v39;
      if (*v39 != v21)
      {
        v41 = 1;
        while (v40 != (uint64_t ***)-4096)
        {
          v42 = v38 + v41++;
          v38 = v42 & (v36 - 1);
          v40 = *(uint64_t ****)(v35 + 16 * v38);
          if (v40 == v21)
          {
            v39 = (uint64_t ****)(v35 + 16 * v38);
            goto LABEL_66;
          }
        }
LABEL_65:
        v39 = (uint64_t ****)(v35 + 16 * v36);
      }
LABEL_66:
      v46 = v39[1];
      if ((unint64_t)*v46 >= 5)
      {
        v47 = *((_DWORD *)v46 + 4);
        v48 = *((unsigned __int8 *)v46 + 20);
        if (v47 == 1836477548 && v48 == 46)
          goto LABEL_27;
      }
      if ((_DWORD)v36)
      {
        LODWORD(v50) = (v36 - 1) & (v37 ^ (v21 >> 9));
        v51 = (uint64_t ****)(v35 + 16 * v50);
        v52 = *v51;
        if (*v51 != v21)
        {
          v53 = 1;
          while (v52 != (uint64_t ***)-4096)
          {
            v54 = v50 + v53++;
            v50 = v54 & (v36 - 1);
            v52 = *(uint64_t ****)(v35 + 16 * v50);
            if (v52 == v21)
            {
              v51 = (uint64_t ****)(v35 + 16 * v50);
              goto LABEL_84;
            }
          }
          goto LABEL_83;
        }
      }
      else
      {
LABEL_83:
        v51 = (uint64_t ****)(v35 + 16 * v36);
      }
LABEL_84:
      v56 = v51[1];
      if ((unint64_t)*v56 >= 0xC)
      {
        v57 = v56[2];
        v58 = *((_DWORD *)v56 + 6);
        if (v57 == (uint64_t **)0x5F6E6173615F5F5FLL && v58 == 1601070439)
          goto LABEL_27;
      }
      if ((_DWORD)v36)
      {
        LODWORD(v60) = (v36 - 1) & (v37 ^ (v21 >> 9));
        v61 = (uint64_t ****)(v35 + 16 * v60);
        v62 = *v61;
        if (*v61 != v21)
        {
          v63 = 1;
          while (v62 != (uint64_t ***)-4096)
          {
            v64 = v60 + v63++;
            v60 = v64 & (v36 - 1);
            v62 = *(uint64_t ****)(v35 + 16 * v60);
            if (v62 == v21)
            {
              v61 = (uint64_t ****)(v35 + 16 * v60);
              goto LABEL_96;
            }
          }
          goto LABEL_95;
        }
      }
      else
      {
LABEL_95:
        v61 = (uint64_t ****)(v35 + 16 * v36);
      }
LABEL_96:
      v65 = v61[1];
      if ((unint64_t)*v65 >= 0xD)
      {
        v66 = v65[2];
        v67 = *(uint64_t *)((char *)v65 + 21);
        if (v66 == (uint64_t **)0x766F636E61735F5FLL && v67 == 0x5F6E65675F766F63)
          goto LABEL_27;
      }
      if ((_DWORD)v36)
      {
        LODWORD(v69) = (v36 - 1) & (v37 ^ (v21 >> 9));
        v70 = (uint64_t ****)(v35 + 16 * v69);
        v71 = *v70;
        if (*v70 != v21)
        {
          v72 = 1;
          while (v71 != (uint64_t ***)-4096)
          {
            v73 = v69 + v72++;
            v69 = v73 & (v36 - 1);
            v71 = *(uint64_t ****)(v35 + 16 * v69);
            if (v71 == v21)
            {
              v70 = (uint64_t ****)(v35 + 16 * v69);
              goto LABEL_108;
            }
          }
          goto LABEL_107;
        }
      }
      else
      {
LABEL_107:
        v70 = (uint64_t ****)(v35 + 16 * v36);
      }
LABEL_108:
      v74 = v70[1];
      if ((unint64_t)*v74 >= 0xF)
      {
        v75 = v74[2];
        v76 = *(uint64_t *)((char *)v74 + 23);
        if (v75 == (uint64_t **)0x73615F72646F5F5FLL && v76 == 0x5F6E65675F6E6173)
          goto LABEL_27;
      }
      if ((_DWORD)v36)
      {
        LODWORD(v78) = (v36 - 1) & (v37 ^ (v21 >> 9));
        v79 = (uint64_t ****)(v35 + 16 * v78);
        v80 = *v79;
        if (*v79 != v21)
        {
          v81 = 1;
          while (v80 != (uint64_t ***)-4096)
          {
            v82 = v78 + v81++;
            v78 = v82 & (v36 - 1);
            v80 = *(uint64_t ****)(v35 + 16 * v78);
            if (v80 == v21)
            {
              v79 = (uint64_t ****)(v35 + 16 * v78);
              goto LABEL_120;
            }
          }
          goto LABEL_119;
        }
      }
      else
      {
LABEL_119:
        v79 = (uint64_t ****)(v35 + 16 * v36);
      }
LABEL_120:
      v83 = v79[1];
      if (*v83 == (uint64_t **)15)
      {
        v84 = v83[2];
        v85 = *(uint64_t *)((char *)v83 + 23);
        if (v84 == (uint64_t **)0x675F6D766C6C5F5FLL && v85 == 0x7274635F766F6367)
          goto LABEL_27;
      }
    }
    v87 = *((_DWORD *)v21 + 8);
    if ((v87 & 0x1C00) == 0)
    {
      v88 = (BYTE2(v87) & 0x3F) - 1;
      if ((v87 & 0x3F0000) == 0)
        v88 = 0;
      LODWORD(v89) = 1 << *(_DWORD *)(a1 + 88);
      v89 = v89 <= 0x20 ? 32 : v89;
      if ((v87 & 0x3F0000) == 0 || v89 >> v88)
      {
        if (*(_DWORD *)(a1 + 84) == 1)
        {
          if (v28 == 3)
          {
            Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v21);
            if (v91 == 12
              && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
              && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
            {
              goto LABEL_27;
            }
          }
          if (((_DWORD)v21[4] & 0xFu) - 5 >= 4 && ((1 << ((_DWORD)v21[4] & 0xF)) & 0x614) != 0)
            goto LABEL_27;
          v92 = (llvm::Module *)v21[5];
          if (v92)
          {
            if (llvm::Module::getSemanticInterposition(v92) && (*((_BYTE *)v21 + 33) & 0x40) == 0)
              goto LABEL_27;
          }
          v93 = v21[6];
          if (v93)
          {
            if (((*((_DWORD *)v93 + 2) - 2) & 0xFFFFFFFD) == 0)
              goto LABEL_27;
          }
LABEL_155:
          if ((*((_BYTE *)v21 + 34) & 0x40) == 0)
          {
            if (*(_BYTE *)(a1 + 8))
              goto LABEL_157;
            goto LABEL_189;
          }
          if (*(_BYTE *)(a1 + 8))
            goto LABEL_27;
          v105 = ***v21;
          v552 = v21;
          v106 = *(_DWORD *)(v105 + 2520);
          if (v106)
          {
            v107 = *(_QWORD *)(v105 + 2504);
            v108 = v106 - 1;
            v109 = v108 & ((v21 >> 4) ^ (v21 >> 9));
            v110 = (uint64_t ****)(v107 + 24 * v109);
            v111 = *v110;
            if (*v110 == v21)
              goto LABEL_167;
            v118 = 0;
            v119 = 1;
            while (v111 != (uint64_t ***)-4096)
            {
              if (v118)
                v120 = 0;
              else
                v120 = v111 == (uint64_t ***)-8192;
              if (v120)
                v118 = v110;
              v121 = v109 + v119++;
              v109 = v121 & v108;
              v110 = (uint64_t ****)(v107 + 24 * v109);
              v111 = *v110;
              if (*v110 == v21)
                goto LABEL_167;
            }
            if (v118)
              v122 = v118;
            else
              v122 = v110;
          }
          else
          {
            v122 = 0;
          }
          v110 = (uint64_t ****)sub_1C53D65B8(v105 + 2504, (uint64_t)&v552, (uint64_t *)&v552, v122);
          v123 = (uint64_t ***)v552;
          v110[1] = 0;
          v110[2] = 0;
          *v110 = v123;
LABEL_167:
          v113 = v110[1];
          v112 = (size_t)v110[2];
          OSVersion = v113;
          v571 = v112;
          if (v112 == 12)
          {
            if (*v113 == (uint64_t **)0x7274702E6D766C6CLL && *((_DWORD *)v113 + 2) == 1752462689)
              goto LABEL_27;
          }
          else if (v112 == 13
                 && *v113 == (uint64_t **)0x74656D2E6D766C6CLL
                 && *(uint64_t ***)((char *)v113 + 5) == (uint64_t **)0x617461646174656DLL)
          {
            goto LABEL_27;
          }
          if (llvm::StringRef::find((uint64_t *)&OSVersion, "__llvm", 6uLL, 0) != -1
            || llvm::StringRef::find((uint64_t *)&OSVersion, "__LLVM", 6uLL, 0) != -1)
          {
            goto LABEL_27;
          }
          if (v112 >= 0xE)
          {
            if (*v113 == (uint64_t **)0x74696E696572702ELL
              && *(uint64_t ***)((char *)v113 + 6) == (uint64_t **)0x79617272615F7469)
            {
              goto LABEL_27;
            }
          }
          else if (v112 < 0xB)
          {
            goto LABEL_219;
          }
          if (*v113 == (uint64_t **)0x72615F74696E692ELL
            && *(uint64_t ***)((char *)v113 + 3) == (uint64_t **)0x79617272615F7469)
          {
            goto LABEL_27;
          }
          if (*v113 == (uint64_t **)0x72615F696E69662ELL
            && *(uint64_t ***)((char *)v113 + 3) == (uint64_t **)0x79617272615F696ELL)
          {
            goto LABEL_27;
          }
LABEL_219:
          v127 = *(_DWORD *)(a1 + 84);
          switch(v127)
          {
            case 1:
              if (v112)
              {
                v136 = memchr(v113, 36, v112);
                if (v136)
                {
                  if (v136 - (_BYTE *)v113 != -1)
                    goto LABEL_27;
                }
              }
              break;
            case 5:
              v553 = 0;
              v552 = 0;
              v550 = 0;
              v549 = 0;
              LODWORD(v565) = 0;
              LODWORD(v578[0]) = 0;
              LOBYTE(v563[0]) = 0;
              llvm::MCSectionMachO::ParseSectionSpecifier((uint64_t)v113, v112, (uint64_t *)&v552, (uint64_t *)&v549, (int *)&v565, v563, v578, &v546);
              if (v553 == (llvm::Type *)6)
              {
                if (*(_DWORD *)v552 == 1112498015 && *((_WORD *)v552 + 2) == 17226)
                  goto LABEL_27;
                v132 = *(_DWORD *)v552 ^ 0x41445F5F | *((unsigned __int16 *)v552 + 2) ^ 0x4154;
                if (!v132 && v550 >= 7 && *(_DWORD *)v549 == 1651466079 && *(_DWORD *)((char *)v549 + 3) == 1600350818)
                  goto LABEL_27;
                if (!v132 && v550 == 10 && *(_QWORD *)v549 == 0x6972747366635F5FLL && *((_WORD *)v549 + 4) == 26478)
                  goto LABEL_27;
                v135 = *(_DWORD *)v552 == 1163157343 && *((_WORD *)v552 + 2) == 21592;
                if (v135 && (v565 & 2) != 0)
                  goto LABEL_27;
              }
              break;
            case 3:
              if (!v112)
                goto LABEL_27;
              while (1)
              {
                v128 = *(unsigned __int8 *)v113;
                v129 = v128 != 95 && (v128 - 48) >= 0xA;
                if (v129 && (v128 & 0xFFFFFFDF) - 65 >= 0x1A)
                  break;
                v113 = (uint64_t ***)((char *)v113 + 1);
                if (!--v112)
                  goto LABEL_27;
              }
              break;
          }
          if (!*(_BYTE *)(a1 + 8))
            goto LABEL_189;
LABEL_157:
          if ((*((_BYTE *)v21 + 23) & 0x10) == 0)
          {
LABEL_189:
            v117 = v556;
            if (v556 >= (unint64_t)HIDWORD(v556))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v555, (uint64_t)v557, v556 + 1, 8);
              v117 = v556;
            }
            *((_QWORD *)v555 + v117) = v21;
            LODWORD(v556) = v556 + 1;
            goto LABEL_27;
          }
          v97 = ***v21;
          v98 = *(_QWORD *)(v97 + 152);
          v99 = *(unsigned int *)(v97 + 168);
          if ((_DWORD)v99)
          {
            LODWORD(v100) = (v99 - 1) & ((v21 >> 4) ^ (v21 >> 9));
            v101 = (uint64_t ****)(v98 + 16 * v100);
            v102 = *v101;
            if (*v101 != v21)
            {
              v103 = 1;
              while (v102 != (uint64_t ***)-4096)
              {
                v104 = v100 + v103++;
                v100 = v104 & (v99 - 1);
                v102 = *(uint64_t ****)(v98 + 16 * v100);
                if (v102 == v21)
                {
                  v101 = (uint64_t ****)(v98 + 16 * v100);
                  goto LABEL_187;
                }
              }
              goto LABEL_186;
            }
          }
          else
          {
LABEL_186:
            v101 = (uint64_t ****)(v98 + 16 * v99);
          }
LABEL_187:
          v116 = v101[1];
          if ((unint64_t)*v116 >= 2 && *((_WORD *)v116 + 8) == 24415)
            goto LABEL_27;
          goto LABEL_189;
        }
        if ((v30 & 1) != 0)
        {
          if (!*((_BYTE *)v21 + 16) && (v87 & 0x800000) == 0 && v21[9] == (uint64_t **)(v21 + 9))
            goto LABEL_27;
        }
        else if ((v33 & 0x7FFFFFF) == 0)
        {
          goto LABEL_27;
        }
        if (((1 << (v87 & 0xF)) & 0x7D5) != 0)
        {
          if (v28 != 3
            || (v94 = llvm::GlobalValue::getSection((llvm::GlobalValue *)v21), v95 != 12)
            || (*(_QWORD *)v94 == *(_QWORD *)"llvm.ptrauth"
              ? (v138 = *((unsigned int *)v94 + 2) == (unint64_t)*(unsigned int *)"auth")
              : (v138 = 0),
                !v138))
          {
            if (((_DWORD)v21[4] & 0xFu) - 5 < 4 || ((1 << ((_DWORD)v21[4] & 0xF)) & 0x614) == 0)
            {
              v96 = (llvm::Module *)v21[5];
              if ((!v96 || !llvm::Module::getSemanticInterposition(v96) || (*((_BYTE *)v21 + 33) & 0x40) != 0)
                && !v21[6])
              {
                goto LABEL_155;
              }
            }
          }
        }
      }
    }
LABEL_27:
    v20 = *(_QWORD *)(v20 + 8);
  }
  while (v20 != a3 + 8);
  v139 = v556;
  if (!(_DWORD)v556)
  {
LABEL_279:
    *a4 = 1;
    goto LABEL_280;
  }
  v140 = a3;
  v531 = a3 + 272;
  v141 = *(uint64_t ***)(a1 + 24);
  v142 = *v141;
  OSVersion = v141;
  v571 = (uint64_t)v141;
  v572 = (llvm::Value **)v141;
  v573 = (llvm::ConstantExpr *)v141;
  v574 = (llvm::ConstantExpr *)v141;
  v575 = (llvm::Value **)v141;
  v576 = v141;
  v577 = (llvm::ConstantExpr *)v141;
  v520 = (llvm::ConstantAggregateZero *)llvm::StructType::get(v142, (uint64_t)&OSVersion, 8, 0);
  v552 = v554;
  HIDWORD(v553) = 16;
  if (v139 < 0x11)
  {
    v143 = v554;
  }
  else
  {
    LODWORD(v553) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v552, (uint64_t)v554, v139, 8);
    v143 = v552;
  }
  bzero(v143, 8 * v139);
  LODWORD(v553) = v139;
  v549 = v551;
  v550 = 0x1000000000;
  sub_1C4848C0C((unsigned int *)&v549, v139, 0);
  v144 = *(_BYTE *)(a3 + 191);
  v145 = v144;
  if (v144 >= 0)
    v146 = (char *)(a3 + 168);
  else
    v146 = *(char **)(a3 + 168);
  v147 = (llvm::Type *)(v144 & 0x7F);
  if (v145 >= 0)
    v148 = v147;
  else
    v148 = *(llvm::Type **)(a3 + 176);
  PrivateGlobalForString = (llvm::ConstantExpr *)llvm::createPrivateGlobalForString((uint64_t *)a3, v146, v148, 0, "___asan_gen_");
  v149 = 0;
  v150 = 0;
  v151 = a2;
  while (2)
  {
    v528 = v149;
    v152 = *((_QWORD *)v555 + v150);
    v153 = *(_QWORD *)a1;
    v154 = sub_1C5867374(*(_QWORD *)a1, v152);
    if (*(_QWORD *)v153 + 56 * *(unsigned int *)(v153 + 16) == v154)
    {
      v527 = 0;
      v155 = 0;
      v156 = 0;
      v515 = 0;
      v516 = 0;
      v522 = 0;
      v514 = 0;
    }
    else
    {
      v522 = *(llvm::Type **)(v154 + 16);
      v514 = *(char **)(v154 + 8);
      v515 = *(_DWORD *)(v154 + 24);
      v516 = *(_DWORD *)(v154 + 28);
      v156 = *(char **)(v154 + 32);
      v155 = *(llvm::Type **)(v154 + 40);
      v527 = *(unsigned __int8 *)(v154 + 48);
    }
    if ((*(_BYTE *)(v152 + 23) & 0x10) != 0)
    {
      v157 = ***(_QWORD ***)v152;
      v158 = *(_QWORD *)(v157 + 152);
      v159 = *(unsigned int *)(v157 + 168);
      if (!(_DWORD)v159)
        goto LABEL_305;
      LODWORD(v160) = (v159 - 1) & ((v152 >> 4) ^ (v152 >> 9));
      v161 = (uint64_t *)(v158 + 16 * v160);
      v162 = *v161;
      if (*v161 != v152)
      {
        v163 = 1;
        while (v162 != -4096)
        {
          v164 = v160 + v163++;
          v160 = v164 & (v159 - 1);
          v162 = *(_QWORD *)(v158 + 16 * v160);
          if (v162 == v152)
          {
            v161 = (uint64_t *)(v158 + 16 * v160);
            goto LABEL_306;
          }
        }
LABEL_305:
        v161 = (uint64_t *)(v158 + 16 * v159);
      }
LABEL_306:
      v165 = (_QWORD *)v161[1];
      v168 = (llvm::Type *)*v165;
      v166 = (char *)(v165 + 2);
      v167 = v168;
    }
    else
    {
      v167 = 0;
      v166 = &byte_1C871356D;
    }
    v518 = v166;
    v519 = v167;
    if (v155)
      v169 = v156;
    else
      v169 = v166;
    if (v155)
      v170 = v155;
    else
      v170 = v167;
    v171 = llvm::createPrivateGlobalForString((uint64_t *)v140, v169, v170, 1, "___asan_gen_");
    v172 = *(uint64_t ***)(v152 + 24);
    sub_1C4768AD0(v531, (uint64_t)v172);
    v174 = v173;
    v176 = v175 == 1;
    llvm::DataLayout::getAlignment(v531, (uint64_t)v172);
    v179 = v178;
    if (v176)
    v180 = ((1 << v179) + ((unint64_t)(v174 + 7) >> 3) - 1) & -(1 << v179);
    v181 = *(_DWORD *)(a1 + 88);
    LODWORD(v182) = 1 << v181;
    if ((1 << v181) <= 0x20)
      v182 = 32;
    else
      v182 = v182;
    v530 = v150;
    v525 = (llvm::Type *)(((1 << v179) + ((unint64_t)(v174 + 7) >> 3) - 1) & -(1 << v179));
    v526 = (llvm::ConstantExpr *)v171;
    if (v180 <= v182 >> 1)
    {
      v184 = (llvm::Type *)(v182 - v180);
    }
    else
    {
      if (v181 <= 5)
        LOBYTE(v181) = 5;
      v183 = v180 >> v181 >> 2 << v181;
      if (v183 >= 0x40000)
        v183 = 0x40000;
      if (v183 <= v182)
        v184 = (llvm::Type *)v182;
      else
        v184 = (llvm::Type *)v183;
      if (((v182 - 1) & v180) != 0)
        v184 = (llvm::Type *)((char *)v184 + v182 - ((v182 - 1) & v180));
    }
    v524 = v184;
    llvm::ArrayType::get((llvm::ArrayType *)(**(_QWORD **)(v151 + 64) + 1912), v184);
    v186 = v185;
    v187 = *v172;
    OSVersion = v172;
    v571 = (uint64_t)v186;
    v188 = (llvm::ConstantAggregateZero *)llvm::StructType::get(v187, (uint64_t)&OSVersion, 2, 0);
    v189 = *(void **)(v152 - 32);
    NullValue = llvm::Constant::getNullValue(v186, v190);
    OSVersion = v189;
    v571 = (uint64_t)NullValue;
    v192 = llvm::ConstantStruct::get(v188, (llvm::Type *)&OSVersion, 2);
    v193 = *(_DWORD *)(v152 + 32) & 0xF;
    v194 = *(_BYTE *)(v152 + 80);
    v195 = operator new(0x78uLL);
    v196 = v195;
    v197 = (llvm::GlobalObject *)(v195 + 8);
    v195[13] = v195[13] & 0x38000000 | 1;
    *(_QWORD *)v195 = 0;
    *((_QWORD *)v195 + 1) = 0;
    *((_QWORD *)v195 + 2) = 0;
    *((_QWORD *)v195 + 3) = v195 + 8;
    if ((v194 & (v193 == 8)) != 0)
      v198 = 7;
    else
      v198 = v193;
    v199 = *(_BYTE *)(v152 + 80) & 1;
    LOWORD(v574) = 257;
    v517 = v198;
    v200 = (llvm::GlobalObject *)llvm::GlobalVariable::GlobalVariable((uint64_t)(v195 + 8), (uint64_t)v537, v188, v199, v198, (uint64_t)v192, (uint64_t)&OSVersion, v152, (*(_DWORD *)(v152 + 32) >> 10) & 7, ((unint64_t)*(unsigned int *)(*(_QWORD *)v152 + 8) >> 8) | 0x100000000, 0);
    llvm::GlobalObject::copyAttributesFrom(v200, (const llvm::GlobalObject *)v152);
    *((_BYTE *)v196 + 112) = v196[28] & 0xFD | *(_BYTE *)(v152 + 80) & 2;
    *((_QWORD *)v196 + 13) = *(_QWORD *)(v152 + 72);
    llvm::GlobalObject::setComdat(v197, *(llvm::Comdat **)(v152 + 48));
    v201 = *(_DWORD *)(a1 + 84);
    v202 = 1 << *(_DWORD *)(a1 + 88);
    if (v202 <= 0x20)
      v202 = 32;
    v196[16] = ((__clz(__rbit32(v202)) << 16) + 0x10000) | v196[16] & 0xFFC0FF3F;
    if (v201 == 5 && (*(_BYTE *)(v152 + 34) & 0x40) == 0 && (*(_BYTE *)(v152 + 80) & 1) != 0)
    {
      v240 = *(llvm::ConstantDataSequential **)(v152 - 32);
      if (v240)
      {
        if ((*((_BYTE *)v240 + 16) & 0xFE) == 0xE && llvm::ConstantDataSequential::isCString(v240))
        {
          v241 = (llvm::GlobalObject *)llvm::UniqueStringSaver::save(***(_QWORD ***)v197 + 2136, "__TEXT,__asan_cstring,regular", 0x1DuLL);
          v243 = v242;
          v244 = ***(_QWORD ***)v197;
          OSVersion = v197;
          v245 = *(_DWORD *)(v244 + 2520);
          if (v245)
          {
            v246 = *(_QWORD *)(v244 + 2504);
            v247 = v245 - 1;
            v248 = v247 & ((v197 >> 4) ^ (v197 >> 9));
            v249 = (llvm::GlobalObject **)(v246 + 24 * v248);
            v250 = *v249;
            if (*v249 == v197)
              goto LABEL_368;
            v270 = 0;
            v271 = 1;
            while (v250 != (llvm::GlobalObject *)-4096)
            {
              if (v270)
                v272 = 0;
              else
                v272 = v250 == (llvm::GlobalObject *)-8192;
              if (v272)
                v270 = v249;
              v273 = v248 + v271++;
              v248 = v273 & v247;
              v249 = (llvm::GlobalObject **)(v246 + 24 * v248);
              v250 = *v249;
              if (*v249 == v197)
                goto LABEL_368;
            }
            if (v270)
              v274 = v270;
            else
              v274 = v249;
          }
          else
          {
            v274 = 0;
          }
          v249 = (llvm::GlobalObject **)sub_1C53D65B8(v244 + 2504, (uint64_t)&OSVersion, (uint64_t *)&OSVersion, v274);
          v275 = (llvm::GlobalObject *)OSVersion;
          v249[1] = 0;
          v249[2] = 0;
          *v249 = v275;
LABEL_368:
          v249[1] = v241;
          v249[2] = v243;
          v196[16] = v196[16] & 0xFFBFFFFF | ((v243 != 0) << 22);
        }
      }
    }
    llvm::GlobalObject::copyMetadata(v197, (const llvm::GlobalObject *)v152, 0);
    v566 = 0;
    v565 = 0;
    v204 = **(_QWORD **)(a2 + 64);
    v205 = *(llvm::ConstantInt **)(v204 + 1960);
    LODWORD(v571) = *(_DWORD *)(v204 + 1968) >> 8;
    if (v571 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&OSVersion, 0, 0);
    else
      OSVersion = 0;
    v207 = llvm::ConstantInt::get(v205, (llvm::LLVMContext *)&OSVersion, v203);
    if (v571 >= 0x41 && OSVersion)
      MEMORY[0x1CAA32F9C](OSVersion, 0x1000C8000313F17);
    v565 = v207;
    v208 = **(_QWORD **)(a2 + 64);
    v209 = *(llvm::ConstantInt **)(v208 + 1960);
    LODWORD(v571) = *(_DWORD *)(v208 + 1968) >> 8;
    if (v571 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&OSVersion, 0, 0);
    else
      OSVersion = 0;
    v210 = llvm::ConstantInt::get(v209, (llvm::LLVMContext *)&OSVersion, v206);
    if (v571 >= 0x41 && OSVersion)
      MEMORY[0x1CAA32F9C](OSVersion, 0x1000C8000313F17);
    v566 = v210;
    ElementPtr = (llvm::Value *)llvm::ConstantExpr::getGetElementPtr(v188, (uint64_t *)v197, (llvm::Value *)&v565, 2, 1, 0, 0);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v152, ElementPtr, (llvm::Value *)1);
    llvm::Value::takeName(v197, (llvm::Value *)v152);
    llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v152);
    *((_QWORD *)v552 + v530) = v197;
    if (v522)
    {
      v546 = 0;
      v547 = 0;
      v548[0] = 0;
      v546 = (void *)llvm::createPrivateGlobalForString(v537, v514, v522, 1, "___asan_gen_");
      v252 = *(_QWORD *)*v537;
      v253 = *(llvm::ConstantInt **)(v252 + 1960);
      v254 = *(unsigned int *)(v252 + 1968);
      LODWORD(v571) = v254 >> 8;
      v212 = v524;
      if (v254 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&OSVersion, v515, 0);
      }
      else
      {
        if (v254 <= 0xFF)
          v255 = 0;
        else
          v255 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v254);
        OSVersion = (void *)(v255 & v515);
      }
      v257 = llvm::ConstantInt::get(v253, (llvm::LLVMContext *)&OSVersion, v251);
      if (v571 >= 0x41 && OSVersion)
        MEMORY[0x1CAA32F9C](OSVersion, 0x1000C8000313F17);
      v547 = (uint64_t)v257;
      v258 = *(_QWORD *)*v537;
      v259 = *(llvm::ConstantInt **)(v258 + 1960);
      v260 = *(_DWORD *)(v258 + 1968);
      LODWORD(v571) = v260 >> 8;
      if (v260 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&OSVersion, v516, 0);
      }
      else
      {
        if (v260 <= 0xFF)
          v261 = 0;
        else
          v261 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v260);
        OSVersion = (void *)(v261 & v516);
      }
      v262 = llvm::ConstantInt::get(v259, (llvm::LLVMContext *)&OSVersion, v256);
      if (v571 >= 0x41 && OSVersion)
        MEMORY[0x1CAA32F9C](OSVersion, 0x1000C8000313F17);
      v548[0] = v262;
      TypeForElements = (llvm::ConstantAggregateZero *)llvm::ConstantStruct::getTypeForElements(**(uint64_t ***)v546, (uint64_t)&v546, 3u, 0);
      v264 = llvm::ConstantStruct::get(TypeForElements, (llvm::Type *)&v546, 3);
      v265 = operator new(0x78uLL);
      v265[13] = v265[13] & 0x38000000 | 1;
      *(_QWORD *)v265 = 0;
      *((_QWORD *)v265 + 1) = 0;
      *((_QWORD *)v265 + 2) = 0;
      *((_QWORD *)v265 + 3) = v265 + 8;
      v266 = *(llvm::PointerType **)v264;
      OSVersion = "___asan_gen_";
      LOWORD(v574) = 259;
      v267 = (llvm::ConstantExpr *)llvm::GlobalVariable::GlobalVariable((uint64_t)(v265 + 8), (uint64_t)v537, v266, 1, 8, (uint64_t)v264, (uint64_t)&OSVersion, 0, 0, 0, 0);
      v265[16] = v265[16] & 0xFFFFFF3F | 0x80;
      PointerCast = (uint64_t **)llvm::ConstantExpr::getPointerCast(v267, *(llvm::Constant **)(a1 + 24), v268);
    }
    else
    {
      PointerCast = (uint64_t **)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 24), 0, 0);
      v212 = v524;
    }
    v213 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a2 + 64) + 1912), 0);
    v216 = (llvm::GlobalValue *)llvm::Constant::getNullValue(v213, v214);
    v217 = *(_DWORD *)(a1 + 84);
    if (v217 <= 7 && ((1 << v217) & 0xA8) != 0 && *(_BYTE *)(a1 + 11))
    {
      LOWORD(v574) = 257;
      v197 = (llvm::GlobalObject *)llvm::GlobalAlias::create(8, (uint64_t)&OSVersion, v197);
    }
    if ((v196[16] & 0xFu) - 7 > 1)
    {
      if (*(_BYTE *)(a1 + 12))
      {
        v220 = operator new(0x78uLL);
        v216 = (llvm::GlobalValue *)(v220 + 8);
        v220[13] = v220[13] & 0x38000000 | 1;
        *(_QWORD *)v220 = 0;
        *((_QWORD *)v220 + 1) = 0;
        *((_QWORD *)v220 + 2) = 0;
        *((_QWORD *)v220 + 3) = v220 + 8;
        v221 = (llvm::Constant *)(**(_QWORD **)(a2 + 64) + 1912);
        v223 = llvm::Constant::getNullValue(v221, v222);
        LOWORD(v574) = 1283;
        OSVersion = "__odr_asan_gen_";
        v572 = (llvm::Value **)v518;
        v573 = v519;
        llvm::GlobalVariable::GlobalVariable((uint64_t)(v220 + 8), (uint64_t)v537, v221, 0, v517, (uint64_t)v223, (uint64_t)&OSVersion, 0, (v196[16] >> 10) & 7, 0, 0);
        v224 = v196[16] & 0x30;
        v225 = v220[16];
        v226 = v225 & 0xFFFFFFCF | v224;
        v220[16] = v226;
        if ((v225 & 0xFu) - 7 < 2
          || v224
          && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v216),
              v226 = v220[16],
              (hasExternalWeakLinkage & 1) == 0))
        {
          v226 |= 0x4000u;
        }
        v220[16] = v226 & 0xFFC0FCFF | v196[16] & 0x300 | 0x10000;
      }
    }
    else
    {
      v218 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 24), -1, 0);
      v219 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a2 + 64) + 1912), 0);
      v216 = sub_1C537D3B8((llvm *)0x30, (uint64_t)v218, v219, 0);
    }
    v227 = llvm::ConstantExpr::getPointerCast(v197, *(llvm::Constant **)(a1 + 24), v215);
    v228 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 24), (uint64_t)v525, 0);
    v229 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 24), (uint64_t)v525 + (_QWORD)v212, 0);
    v231 = llvm::ConstantExpr::getPointerCast(v526, *(llvm::Constant **)(a1 + 24), v230);
    v233 = llvm::ConstantExpr::getPointerCast(PrivateGlobalForString, *(llvm::Constant **)(a1 + 24), v232);
    v234 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 24), v527, 0);
    v236 = llvm::ConstantExpr::getPointerCast(v216, *(llvm::Constant **)(a1 + 24), v235);
    OSVersion = v227;
    v571 = (uint64_t)v228;
    v572 = v229;
    v573 = v231;
    v574 = v233;
    v575 = v234;
    v576 = PointerCast;
    v577 = v236;
    v237 = llvm::ConstantStruct::get(v520, (llvm::Type *)&OSVersion, 8);
    if (byte_1ED811F80)
      v238 = v527 == 0;
    else
      v238 = 1;
    v239 = !v238;
    v149 = v239 | v528;
    *((_QWORD *)v549 + v530) = v237;
    v150 = v530 + 1;
    v140 = (uint64_t)v537;
    v151 = a2;
    if (v530 + 1 != v139)
      continue;
    break;
  }
  v276 = 0;
  v277 = 0;
  v546 = v548;
  v547 = 0x1000000000;
  while (2)
  {
    v278 = (uint64_t ***)*((_QWORD *)v552 + v277);
    if ((*((_BYTE *)v278 + 23) & 0x10) != 0)
    {
      v279 = ***v278;
      v280 = *(_QWORD *)(v279 + 152);
      v281 = *(unsigned int *)(v279 + 168);
      if (!(_DWORD)v281)
        goto LABEL_418;
      LODWORD(v282) = (v281 - 1) & ((v278 >> 4) ^ (v278 >> 9));
      v283 = (uint64_t ****)(v280 + 16 * v282);
      v284 = *v283;
      if (*v283 != v278)
      {
        v285 = 1;
        while (v284 != (uint64_t ***)-4096)
        {
          v286 = v282 + v285++;
          v282 = v286 & (v281 - 1);
          v284 = *(uint64_t ****)(v280 + 16 * v282);
          if (v284 == v278)
          {
            v283 = (uint64_t ****)(v280 + 16 * v282);
            goto LABEL_419;
          }
        }
LABEL_418:
        v283 = (uint64_t ****)(v280 + 16 * v281);
      }
LABEL_419:
      if (*v283[1])
      {
        if (v276 >= HIDWORD(v547))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v546, (uint64_t)v548, v276 + 1, 8);
          v276 = v547;
        }
        *((_QWORD *)v546 + v276) = v278;
        v276 = v547 + 1;
        LODWORD(v547) = v547 + 1;
      }
    }
    if (++v277 != v139)
      continue;
    break;
  }
  sub_1C5F50CB4((uint64_t **)v537, "llvm.compiler.used", 0x12uLL, (llvm::UndefValue **)v546, v276);
  v287 = *(unsigned __int8 *)(a1 + 10);
  v529 = v149;
  if (!*(_BYTE *)(a1 + 10) || *(_DWORD *)(a1 + 84) != 3)
  {
    v540 = 0;
    LOBYTE(__p) = 0;
    if (!v287)
      goto LABEL_548;
    goto LABEL_452;
  }
  llvm::getUniqueModuleId((llvm *)v537, (uint64_t)&__p);
  v288 = v540;
  if ((v540 & 0x80u) != 0)
    v288 = v539;
  if (!v288)
  {
    if (!*(_BYTE *)(a1 + 10))
      goto LABEL_548;
LABEL_452:
    v313 = *(_DWORD *)(a1 + 84);
    if (v313 == 1)
    {
      v314 = v553;
      v315 = v549;
      v536 = v552;
      OSVersion = &v572;
      v571 = 0x1000000000;
      sub_1C5867ADC((uint64_t)&OSVersion, v553);
      if (!(_DWORD)v314)
      {
LABEL_524:
        if ((_DWORD)v571)
          sub_1C5F50CB4((uint64_t **)v140, "llvm.compiler.used", 0x12uLL, (llvm::UndefValue **)OSVersion, v571);
        v406 = (llvm::Value ***)OSVersion;
        goto LABEL_562;
      }
      v316 = 0;
      while (1)
      {
        v317 = (llvm::ValueAsMetadata *)v536[v316];
        if ((*((_BYTE *)v317 + 23) & 0x10) == 0)
        {
          v328 = 0;
          v327 = (unsigned __int8 *)&byte_1C871356D;
          goto LABEL_464;
        }
        v318 = ***(_QWORD ***)v317;
        v319 = *(_QWORD *)(v318 + 152);
        v320 = *(unsigned int *)(v318 + 168);
        if (!(_DWORD)v320)
          goto LABEL_462;
        LODWORD(v321) = (v320 - 1) & ((v317 >> 4) ^ (v317 >> 9));
        v322 = (llvm::ValueAsMetadata **)(v319 + 16 * v321);
        v323 = *v322;
        if (*v322 != v317)
          break;
LABEL_463:
        v326 = v322[1];
        v329 = *(_QWORD *)v326;
        v327 = (unsigned __int8 *)v326 + 16;
        v328 = v329;
LABEL_464:
        v330 = (llvm::PointerType **)v315[v316];
        v331 = sub_1C58673CC(a1, v140, v330, v327, v328);
        v332 = *(uint64_t **)v140;
        v565 = llvm::ValueAsMetadata::get(v317, v333);
        Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v332, &v565, 1, 0, 1);
        llvm::Value::setMetadata((llvm::Value *)v331, 22, Impl);
        *((_QWORD *)OSVersion + v316) = v331;
        v335 = *v330;
        sub_1C4768AD0(v531, (uint64_t)*v330);
        v337 = v336;
        v339 = v338 == 1;
        llvm::DataLayout::getAlignment(v531, (uint64_t)v335);
        v342 = v341;
        if (v339)
        v343 = (1 << v342) - 1 + ((unint64_t)(v337 + 7) >> 3);
        v344 = -(1 << v342);
        v29 = (v344 & v343) == 0;
        v345 = ((4128768 - (__clz(v344 & v343) << 16)) & 0xFF0000) + 0x10000;
        if (v29)
          v345 = 0x10000;
        *((_DWORD *)v331 + 8) = (_DWORD)v331[4] & 0xFFC0FFFF | v345;
        sub_1C58675C8(a1, (uint64_t ***)v317, (llvm::GlobalObject *)v331, "", 0);
        ++v316;
        v140 = (uint64_t)v537;
        if (v316 == v314)
          goto LABEL_524;
      }
      v324 = 1;
      while (v323 != (llvm::ValueAsMetadata *)-4096)
      {
        v325 = v321 + v324++;
        v321 = v325 & (v320 - 1);
        v323 = *(llvm::ValueAsMetadata **)(v319 + 16 * v321);
        if (v323 == v317)
        {
          v322 = (llvm::ValueAsMetadata **)(v319 + 16 * v321);
          goto LABEL_463;
        }
      }
LABEL_462:
      v322 = (llvm::ValueAsMetadata **)(v319 + 16 * v320);
      goto LABEL_463;
    }
    if (v313 == 5)
    {
      v346 = *(_DWORD *)(a1 + 76);
      if ((v346 & 0xFFFFFFF7) == 3)
      {
        if (!llvm::Triple::isMacOSXVersionLT((llvm::Triple *)(a1 + 40), 0xAu, 11, 0))
          goto LABEL_484;
        v346 = *(_DWORD *)(a1 + 76);
      }
      if (v346 == 28 || v346 == 7)
      {
        OSVersion = (void *)llvm::Triple::getOSVersion((llvm::Triple *)(a1 + 40));
        v571 = v347;
        v566 = 0;
        v565 = (void *)9;
        if (!sub_1C4F7A4D8(&OSVersion, &v565))
          goto LABEL_484;
        v346 = *(_DWORD *)(a1 + 76);
      }
      if (v346 == 29)
      {
        OSVersion = (void *)llvm::Triple::getOSVersion((llvm::Triple *)(a1 + 40));
        v571 = v348;
        v566 = 0;
        v565 = (void *)2;
        if (!sub_1C4F7A4D8(&OSVersion, &v565))
          goto LABEL_484;
        v346 = *(_DWORD *)(a1 + 76);
      }
      if (v346 == 30)
      {
        OSVersion = (void *)llvm::Triple::getOSVersion((llvm::Triple *)(a1 + 40));
        v571 = v349;
        v566 = 0;
        v565 = (void *)2;
        if (!sub_1C4F7A4D8(&OSVersion, &v565))
          goto LABEL_484;
        v346 = *(_DWORD *)(a1 + 76);
      }
      if ((v346 - 31) <= 2)
      {
LABEL_484:
        v350 = v553;
        v532 = v549;
        v534 = v552;
        v351 = *(uint64_t ***)(a1 + 24);
        v352 = *v351;
        OSVersion = v351;
        v571 = (uint64_t)v351;
        v353 = (llvm::ConstantAggregateZero *)llvm::StructType::get(v352, (uint64_t)&OSVersion, 2, 0);
        OSVersion = &v572;
        v571 = 0x1000000000;
        sub_1C5867ADC((uint64_t)&OSVersion, v350);
        if ((_DWORD)v350)
        {
          v354 = 0;
          while (1)
          {
            v355 = (uint64_t ***)v534[v354];
            v356 = v355 >> 4;
            if ((*((_BYTE *)v355 + 23) & 0x10) != 0)
              break;
            v367 = 0;
            v366 = (unsigned __int8 *)&byte_1C871356D;
LABEL_495:
            v369 = (llvm::PointerType **)v532[v354];
            v370 = sub_1C58673CC(a1, v140, v369, v366, v367);
            AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v369, 0);
            v373 = llvm::ConstantExpr::getPointerCast((llvm::ConstantExpr *)v370, *(llvm::Constant **)(a1 + 24), v372);
            v565 = AggregateElement;
            v566 = v373;
            v374 = llvm::ConstantStruct::get(v353, (llvm::Type *)&v565, 2);
            v375 = operator new(0x78uLL);
            v376 = v375;
            v377 = v375 + 8;
            v375[13] = v375[13] & 0x38000000 | 1;
            *(_QWORD *)v375 = 0;
            *((_QWORD *)v375 + 1) = 0;
            *((_QWORD *)v375 + 2) = 0;
            *((_QWORD *)v375 + 3) = v375 + 8;
            if ((*((_BYTE *)v355 + 23) & 0x10) != 0)
            {
              v378 = ***v355;
              v379 = *(_QWORD *)(v378 + 152);
              v380 = *(unsigned int *)(v378 + 168);
              if (!(_DWORD)v380)
                goto LABEL_502;
              LODWORD(v381) = (v380 - 1) & (v356 ^ (v355 >> 9));
              v382 = (uint64_t ****)(v379 + 16 * v381);
              v383 = *v382;
              if (*v382 != v355)
              {
                v384 = 1;
                while (v383 != (uint64_t ***)-4096)
                {
                  v385 = v381 + v384++;
                  v381 = v385 & (v380 - 1);
                  v383 = *(uint64_t ****)(v379 + 16 * v381);
                  if (v383 == v355)
                  {
                    v382 = (uint64_t ****)(v379 + 16 * v381);
                    goto LABEL_503;
                  }
                }
LABEL_502:
                v382 = (uint64_t ****)(v379 + 16 * v380);
              }
LABEL_503:
              v386 = v382[1];
              v389 = *v386;
              v388 = (char *)(v386 + 2);
              v387 = v389;
              goto LABEL_504;
            }
            v387 = 0;
            v388 = &byte_1C871356D;
LABEL_504:
            v565 = "__asan_binder_";
            v567 = (uint64_t)v388;
            v568 = (uint64_t)v387;
            v569 = 1283;
            llvm::GlobalVariable::GlobalVariable((uint64_t)(v375 + 8), (uint64_t)v537, v353, 0, 7, (uint64_t)v374, (uint64_t)&v565, 0, 0, 0, 0);
            v390 = llvm::UniqueStringSaver::save(***((_QWORD ***)v376 + 4) + 2136, "__DATA,__asan_liveness,regular,live_support", 0x2BuLL);
            v392 = v391;
            v393 = ***((_QWORD ***)v376 + 4);
            v565 = v377;
            v394 = *(_DWORD *)(v393 + 2520);
            if (!v394)
            {
              v404 = 0;
LABEL_520:
              v398 = sub_1C53D65B8(v393 + 2504, (uint64_t)&v565, (uint64_t *)&v565, v404);
              v405 = v565;
              v398[1] = 0;
              v398[2] = 0;
              *v398 = v405;
              goto LABEL_506;
            }
            v395 = *(_QWORD *)(v393 + 2504);
            v396 = v394 - 1;
            v397 = v396 & ((v377 >> 4) ^ (v377 >> 9));
            v398 = (_QWORD *)(v395 + 24 * v397);
            v399 = (void *)*v398;
            if ((void *)*v398 != v377)
            {
              v400 = 0;
              v401 = 1;
              while (v399 != (void *)-4096)
              {
                if (v400)
                  v402 = 0;
                else
                  v402 = v399 == (void *)-8192;
                if (v402)
                  v400 = v398;
                v403 = v397 + v401++;
                v397 = v403 & v396;
                v398 = (_QWORD *)(v395 + 24 * v397);
                v399 = (void *)*v398;
                if ((void *)*v398 == v377)
                  goto LABEL_506;
              }
              if (v400)
                v404 = v400;
              else
                v404 = v398;
              goto LABEL_520;
            }
LABEL_506:
            v398[1] = v390;
            v398[2] = v392;
            v376[16] = v376[16] & 0xFFBFFFFF | ((v392 != 0) << 22);
            *((_QWORD *)OSVersion + v354++) = v377;
            v140 = (uint64_t)v537;
            if (v354 == v350)
              goto LABEL_552;
          }
          v357 = ***v355;
          v358 = *(_QWORD *)(v357 + 152);
          v359 = *(unsigned int *)(v357 + 168);
          if ((_DWORD)v359)
          {
            LODWORD(v360) = (v359 - 1) & (v356 ^ (v355 >> 9));
            v361 = (uint64_t ****)(v358 + 16 * v360);
            v362 = *v361;
            if (*v361 == v355)
            {
LABEL_494:
              v365 = v361[1];
              v368 = (uint64_t)*v365;
              v366 = (unsigned __int8 *)(v365 + 2);
              v367 = v368;
              goto LABEL_495;
            }
            v363 = 1;
            while (v362 != (uint64_t ***)-4096)
            {
              v364 = v360 + v363++;
              v360 = v364 & (v359 - 1);
              v362 = *(uint64_t ****)(v358 + 16 * v360);
              if (v362 == v355)
              {
                v361 = (uint64_t ****)(v358 + 16 * v360);
                goto LABEL_494;
              }
            }
          }
          v361 = (uint64_t ****)(v358 + 16 * v359);
          goto LABEL_494;
        }
LABEL_552:
        if ((_DWORD)v571)
          sub_1C5F50CB4((uint64_t **)v140, "llvm.compiler.used", 0x12uLL, (llvm::UndefValue **)OSVersion, v571);
        v453 = operator new(0x78uLL);
        v454 = (llvm::GlobalValue *)(v453 + 8);
        v453[13] = v453[13] & 0x38000000 | 1;
        *(_QWORD *)v453 = 0;
        *((_QWORD *)v453 + 1) = 0;
        *((_QWORD *)v453 + 2) = 0;
        *((_QWORD *)v453 + 3) = v453 + 8;
        v455 = *(llvm::ConstantInt **)(a1 + 24);
        v456 = llvm::ConstantInt::get(v455, 0, 0);
        v565 = "___asan_globals_registered";
        v569 = 259;
        llvm::GlobalVariable::GlobalVariable((uint64_t)(v453 + 8), v140, v455, 0, 10, (uint64_t)v456, (uint64_t)&v565, 0, 0, 0, 0);
        v457 = v453[16];
        v458 = v457 & 0xFFFFFFCF | 0x10;
        v453[16] = v458;
        if ((v457 & 0xFu) - 7 >= 2)
        {
          if ((llvm::GlobalValue::hasExternalWeakLinkage(v454) & 1) != 0)
            goto LABEL_558;
          v458 = v453[16];
        }
        v453[16] = v458 | 0x4000;
LABEL_558:
        v459 = *(uint64_t ***)(a1 + 176);
        v460 = *(_QWORD *)(a1 + 184);
        v461 = *(_QWORD *)(a1 + 24);
        v569 = 257;
        v563[0] = (uint64_t)sub_1C5098D9C((uint64_t *)a2, (unsigned __int8 *)v454, v461, (uint64_t)&v565);
        v579 = 257;
        sub_1C4774778((uint64_t *)a2, v459, v460, v563, 1, (uint64_t)v578, 0);
        if (*(_DWORD *)(a1 + 16))
        {
          sub_1C586790C(a1, (llvm::Module *)v140);
          sub_1C4773D54((uint64_t)&v565, v462, 0, 0, 0);
          v463 = *(uint64_t ***)(a1 + 192);
          v464 = *(_QWORD *)(a1 + 200);
          v465 = *(_QWORD *)(a1 + 24);
          v579 = 257;
          v561[0] = (uint64_t)sub_1C5098D9C((uint64_t *)a2, (unsigned __int8 *)v454, v465, (uint64_t)v578);
          v564 = 257;
          sub_1C4774778((uint64_t *)&v565, v463, v464, v561, 1, (uint64_t)v563, 0);
          if (v565 != &v567)
            free(v565);
        }
        v406 = (llvm::Value ***)OSVersion;
        goto LABEL_562;
      }
    }
LABEL_548:
    v438 = v553;
    v439 = (llvm::Type *)v549;
    v440 = v550;
    llvm::ArrayType::get(**(llvm::ArrayType ***)v549, (llvm::Type *)v553);
    v442 = v441;
    v443 = (char *)operator new(0x78uLL);
    *((_DWORD *)v443 + 13) = *((_DWORD *)v443 + 13) & 0x38000000 | 1;
    v444 = (unsigned __int8 *)(v443 + 32);
    *(_QWORD *)v443 = 0;
    *((_QWORD *)v443 + 1) = 0;
    *((_QWORD *)v443 + 2) = 0;
    *((_QWORD *)v443 + 3) = v443 + 32;
    v445 = llvm::ConstantArray::get(v442, v439, v440);
    LOWORD(v574) = 257;
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v443 + 32), (uint64_t)v537, v442, 0, 7, (uint64_t)v445, (uint64_t)&OSVersion, 0, 0, 0, 0);
    if (*(int *)(a1 + 88) >= 4)
      *((_DWORD *)v443 + 16) = *((_DWORD *)v443 + 16) & 0xFFC0FFFF | ((*(_DWORD *)(a1 + 88) << 16)
                                                                    + 0x10000);
    v446 = *(uint64_t ***)(a1 + 144);
    v447 = *(_QWORD *)(a1 + 152);
    v448 = *(_QWORD *)(a1 + 24);
    LOWORD(v574) = 257;
    v578[0] = (uint64_t)sub_1C5098D9C((uint64_t *)a2, v444, v448, (uint64_t)&OSVersion);
    v578[1] = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 24), v438, 0);
    v569 = 257;
    sub_1C4774778((uint64_t *)a2, v446, v447, v578, 2, (uint64_t)&v565, 0);
    if (!*(_DWORD *)(a1 + 16))
      goto LABEL_564;
    sub_1C586790C(a1, (llvm::Module *)v537);
    sub_1C4773D54((uint64_t)&OSVersion, v449, 0, 0, 0);
    v450 = *(uint64_t ***)(a1 + 160);
    v451 = *(_QWORD *)(a1 + 168);
    v452 = *(_QWORD *)(a1 + 24);
    v569 = 257;
    v563[0] = (uint64_t)sub_1C5098D9C((uint64_t *)a2, v444, v452, (uint64_t)&v565);
    v563[1] = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 24), v438, 0);
    v579 = 257;
    sub_1C4774778((uint64_t *)&OSVersion, v450, v451, v563, 2, (uint64_t)v578, 0);
    v406 = (llvm::Value ***)OSVersion;
LABEL_562:
    if (v406 != &v572)
      free(v406);
    goto LABEL_564;
  }
  v289 = v552;
  v290 = v553;
  v291 = (llvm::PointerType ***)v549;
  v292 = *(unsigned __int8 *)(a1 + 12);
  OSVersion = &v572;
  v571 = 0x1000000000;
  sub_1C5867ADC((uint64_t)&OSVersion, v553);
  if ((_DWORD)v290)
  {
    v293 = 0;
    while (1)
    {
      v294 = (llvm::ValueAsMetadata *)v289[v293];
      if ((*((_BYTE *)v294 + 23) & 0x10) == 0)
      {
        v305 = 0;
        v304 = (unsigned __int8 *)&byte_1C871356D;
        goto LABEL_440;
      }
      v295 = ***(_QWORD ***)v294;
      v296 = *(_QWORD *)(v295 + 152);
      v297 = *(unsigned int *)(v295 + 168);
      if (!(_DWORD)v297)
        goto LABEL_438;
      LODWORD(v298) = (v297 - 1) & ((v294 >> 4) ^ (v294 >> 9));
      v299 = (llvm::ValueAsMetadata **)(v296 + 16 * v298);
      v300 = *v299;
      if (*v299 != v294)
        break;
LABEL_439:
      v303 = v299[1];
      v306 = *(_QWORD *)v303;
      v304 = (unsigned __int8 *)v303 + 16;
      v305 = v306;
LABEL_440:
      v307 = sub_1C58673CC(a1, (uint64_t)v537, v291[v293], v304, v305);
      v308 = (uint64_t *)*v537;
      v565 = llvm::ValueAsMetadata::get(v294, v309);
      v310 = (llvm::MDNode *)llvm::MDTuple::getImpl(v308, &v565, 1, 0, 1);
      llvm::Value::setMetadata((llvm::Value *)v307, 22, v310);
      *((_QWORD *)OSVersion + v293) = v307;
      if (v292)
      {
        if ((v540 & 0x80u) == 0)
          p_p = (std::string::value_type *)&__p;
        else
          p_p = (std::string::value_type *)__p;
        if ((v540 & 0x80u) == 0)
          v312 = v540 & 0x7F;
        else
          v312 = v539;
        sub_1C58675C8(a1, (uint64_t ***)v294, (llvm::GlobalObject *)v307, p_p, v312);
      }
      if (++v293 == v290)
        goto LABEL_527;
    }
    v301 = 1;
    while (v300 != (llvm::ValueAsMetadata *)-4096)
    {
      v302 = v298 + v301++;
      v298 = v302 & (v297 - 1);
      v300 = *(llvm::ValueAsMetadata **)(v296 + 16 * v298);
      if (v300 == v294)
      {
        v299 = (llvm::ValueAsMetadata **)(v296 + 16 * v298);
        goto LABEL_439;
      }
    }
LABEL_438:
    v299 = (llvm::ValueAsMetadata **)(v296 + 16 * v297);
    goto LABEL_439;
  }
LABEL_527:
  v140 = (uint64_t)v537;
  if ((_DWORD)v571)
    sub_1C5F50CB4((uint64_t **)v537, "llvm.compiler.used", 0x12uLL, (llvm::UndefValue **)OSVersion, v571);
  v407 = operator new(0x78uLL);
  v408 = (llvm::GlobalValue *)(v407 + 8);
  v407[13] = v407[13] & 0x38000000 | 1;
  *(_QWORD *)v407 = 0;
  *((_QWORD *)v407 + 1) = 0;
  *((_QWORD *)v407 + 2) = 0;
  *((_QWORD *)v407 + 3) = v407 + 8;
  v409 = *(llvm::ConstantInt **)(a1 + 24);
  v410 = llvm::ConstantInt::get(v409, 0, 0);
  v565 = "___asan_globals_registered";
  v569 = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v407 + 8), (uint64_t)v537, v409, 0, 10, (uint64_t)v410, (uint64_t)&v565, 0, 0, 0, 0);
  v411 = v407[16];
  v412 = v411 & 0xFFFFFFCF | 0x10;
  v407[16] = v412;
  if ((v411 & 0xFu) - 7 < 2)
  {
LABEL_532:
    v407[16] = v412 | 0x4000;
  }
  else if ((llvm::GlobalValue::hasExternalWeakLinkage(v408) & 1) == 0)
  {
    v412 = v407[16];
    goto LABEL_532;
  }
  v413 = operator new(0x78uLL);
  v414 = (llvm::GlobalValue *)(v413 + 8);
  v413[13] = v413[13] & 0x38000000 | 1;
  *(_QWORD *)v413 = 0;
  *((_QWORD *)v413 + 1) = 0;
  *((_QWORD *)v413 + 2) = 0;
  *((_QWORD *)v413 + 3) = v413 + 8;
  v415 = *(llvm::PointerType **)(a1 + 24);
  v416 = sub_1C58678A8(*(_DWORD *)(a1 + 84));
  v569 = 1283;
  v565 = "__start_";
  v567 = v416;
  v568 = v417;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v413 + 8), (uint64_t)v537, v415, 0, 9, 0, (uint64_t)&v565, 0, 0, 0, 0);
  v418 = v413[16];
  v419 = v418 & 0xFFFFFFCF | 0x10;
  v413[16] = v419;
  if ((v418 & 0xFu) - 7 < 2)
  {
LABEL_536:
    v413[16] = v419 | 0x4000;
  }
  else if ((llvm::GlobalValue::hasExternalWeakLinkage(v414) & 1) == 0)
  {
    v419 = v413[16];
    goto LABEL_536;
  }
  v420 = operator new(0x78uLL);
  v421 = (llvm::GlobalValue *)(v420 + 8);
  v420[13] = v420[13] & 0x38000000 | 1;
  *(_QWORD *)v420 = 0;
  *((_QWORD *)v420 + 1) = 0;
  *((_QWORD *)v420 + 2) = 0;
  *((_QWORD *)v420 + 3) = v420 + 8;
  v422 = *(llvm::PointerType **)(a1 + 24);
  v423 = sub_1C58678A8(*(_DWORD *)(a1 + 84));
  v569 = 1283;
  v565 = "__stop_";
  v567 = v423;
  v568 = v424;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v420 + 8), (uint64_t)v537, v422, 0, 9, 0, (uint64_t)&v565, 0, 0, 0, 0);
  v425 = v420[16];
  v426 = v425 & 0xFFFFFFCF | 0x10;
  v420[16] = v426;
  if ((v425 & 0xFu) - 7 < 2)
  {
LABEL_540:
    v420[16] = v426 | 0x4000;
  }
  else if ((llvm::GlobalValue::hasExternalWeakLinkage(v421) & 1) == 0)
  {
    v426 = v420[16];
    goto LABEL_540;
  }
  v427 = *(uint64_t ***)(a1 + 208);
  v428 = *(_QWORD *)(a1 + 216);
  v429 = *(_QWORD *)(a1 + 24);
  v569 = 257;
  v558[0] = (uint64_t)sub_1C5098D9C((uint64_t *)a2, (unsigned __int8 *)v408, v429, (uint64_t)&v565);
  v430 = *(_QWORD *)(a1 + 24);
  v579 = 257;
  v558[1] = (uint64_t)sub_1C5098D9C((uint64_t *)a2, (unsigned __int8 *)v414, v430, (uint64_t)v578);
  v431 = *(_QWORD *)(a1 + 24);
  v564 = 257;
  v558[2] = (uint64_t)sub_1C5098D9C((uint64_t *)a2, (unsigned __int8 *)v421, v431, (uint64_t)v563);
  v562 = 257;
  sub_1C4774778((uint64_t *)a2, v427, v428, v558, 3, (uint64_t)v561, 0);
  if (*(_DWORD *)(a1 + 16))
  {
    sub_1C586790C(a1, (llvm::Module *)v537);
    sub_1C4773D54((uint64_t)&v565, v432, 0, 0, 0);
    v433 = *(uint64_t ***)(a1 + 224);
    v434 = *(_QWORD *)(a1 + 232);
    v435 = *(_QWORD *)(a1 + 24);
    v579 = 257;
    v560[0] = (uint64_t)sub_1C5098D9C((uint64_t *)a2, (unsigned __int8 *)v408, v435, (uint64_t)v578);
    v436 = *(_QWORD *)(a1 + 24);
    v564 = 257;
    v560[1] = (uint64_t)sub_1C5098D9C((uint64_t *)a2, (unsigned __int8 *)v414, v436, (uint64_t)v563);
    v437 = *(_QWORD *)(a1 + 24);
    v562 = 257;
    v560[2] = (uint64_t)sub_1C5098D9C((uint64_t *)a2, (unsigned __int8 *)v421, v437, (uint64_t)v561);
    v559 = 257;
    sub_1C4774778((uint64_t *)&v565, v433, v434, v560, 3, (uint64_t)v558, 0);
    if (v565 != &v567)
      free(v565);
  }
  if (OSVersion != &v572)
    free(OSVersion);
  *v533 = 1;
LABEL_564:
  if ((v529 & 1) != 0)
  {
    v466 = sub_1C4FB7E80(*(uint64_t **)(v140 + 112), "llvm.global_ctors", 0x11uLL);
    if (v466)
    {
      if (*(_BYTE *)(v466 + 16) == 3 && (*(_DWORD *)(v466 + 32) & 0xFu) - 7 >= 2)
      {
        v467 = *(_QWORD *)(v466 - 32);
        if (v467)
        {
          if (*(_BYTE *)(v467 + 16) == 8)
          {
            v468 = *(_DWORD *)(v467 + 20);
            if ((v468 & 0x40000000) != 0)
            {
              v470 = *(_QWORD *)(v467 - 8);
              v469 = v468 & 0x7FFFFFF;
            }
            else
            {
              v469 = v468 & 0x7FFFFFF;
              v470 = v467 - 32 * v469;
            }
            if (v469)
            {
              v471 = v470 + 32 * v469;
              while (1)
              {
                if (*(_BYTE *)(*(_QWORD *)v470 + 16) == 13)
                  goto LABEL_646;
                v472 = (uint64_t *)(*(_QWORD *)v470 - 32 * (*(_DWORD *)(*(_QWORD *)v470 + 20) & 0x7FFFFFF));
                v473 = (uint64_t ***)v472[4];
                if (!v473 || *((_BYTE *)v473 + 16) != 0)
                  goto LABEL_646;
                if ((*((_BYTE *)v473 + 23) & 0x10) != 0)
                  break;
LABEL_605:
                v487 = *v472;
                v488 = (unint64_t *)(v487 + 24);
                v489 = *(_DWORD *)(v487 + 32);
                if (v489 >= 0x41)
                {
                  if (v489 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v487 + 24)) > 0x40)
                    goto LABEL_611;
                  v488 = (unint64_t *)*v488;
                }
                v490 = 50;
                if (*(_DWORD *)(a1 + 76) != 40)
                  v490 = 1;
                if (*v488 > v490)
                {
LABEL_611:
                  v491 = v473[10];
                  if (v491)
                    v492 = v491 - 3;
                  else
                    v492 = 0;
                  v493 = (uint64_t)(v492 + 5);
                  for (i = (uint64_t)v492[6]; i != v493; i = *(_QWORD *)(i + 8))
                  {
                    v495 = i - 24;
                    if (!i)
                      v495 = 0;
                    if (*(_BYTE *)(v495 + 16) != 83)
                    {
                      v496 = *(unsigned __int8 *)(i - 8) - 38;
                      v497 = v496 > 0x38;
                      v498 = (1 << v496) & 0x100060000000001;
                      if (v497 || v498 == 0)
                        v493 = i;
                      else
                        v493 = *(_QWORD *)(i + 8);
                      break;
                    }
                  }
                  sub_1C4D8ADA0((uint64_t)&OSVersion, v492, v493, 0, 0, 0);
                  v578[0] = 0;
                  v578[0] = (uint64_t)llvm::ConstantExpr::getPointerCast(PrivateGlobalForString, *(llvm::Constant **)(a1 + 24), v500);
                  v501 = *(uint64_t ***)(a1 + 112);
                  v502 = *(_QWORD *)(a1 + 120);
                  v569 = 257;
                  sub_1C4774778((uint64_t *)&OSVersion, v501, v502, v578, 1, (uint64_t)&v565, 0);
                  v503 = v473 + 9;
                  for (j = v473[10]; j != (uint64_t **)v503; j = (uint64_t **)j[1])
                  {
                    if (j)
                      v505 = j - 3;
                    else
                      v505 = 0;
                    v506 = (uint64_t **)v505[5];
                    if (v506 != v505 + 5)
                    {
                      v507 = v506 ? (uint64_t)(v506 - 3) : 0;
                      v508 = *(unsigned __int8 *)(v507 + 16) - 40;
                      v509 = v508 >= 0xFFFFFFF5 ? (llvm::Instruction *)v507 : 0;
                      if (v506)
                      {
                        if (*((_BYTE *)v509 + 16) == 29 && v508 >= 0xFFFFFFF5)
                        {
                          v511 = *(llvm::Type ****)(a1 + 128);
                          v512 = *(llvm::Value **)(a1 + 136);
                          v569 = 257;
                          v513 = operator new(0x70uLL);
                          v513[13] = v513[13] & 0x38000000 | 1;
                          *(_QWORD *)v513 = 0;
                          *((_QWORD *)v513 + 1) = 0;
                          *((_QWORD *)v513 + 2) = 0;
                          *((_QWORD *)v513 + 3) = v513 + 8;
                          llvm::CallInst::CallInst((llvm::CallInst *)(v513 + 8), v511, v512, (const llvm::Twine *)&v565, v509);
                        }
                      }
                    }
                  }
                  if (OSVersion != &v572)
                    free(OSVersion);
                }
LABEL_646:
                v470 += 32;
                if (v470 == v471)
                  goto LABEL_566;
              }
              v475 = ***v473;
              v476 = *(_QWORD *)(v475 + 152);
              v477 = *(unsigned int *)(v475 + 168);
              if ((_DWORD)v477)
              {
                LODWORD(v478) = (v477 - 1) & ((v473 >> 4) ^ (v473 >> 9));
                v479 = (uint64_t ****)(v476 + 16 * v478);
                v480 = *v479;
                if (*v479 != v473)
                {
                  v481 = 1;
                  while (v480 != (uint64_t ***)-4096)
                  {
                    v482 = v478 + v481++;
                    v478 = v482 & (v477 - 1);
                    v480 = *(uint64_t ****)(v476 + 16 * v478);
                    if (v480 == v473)
                    {
                      v479 = (uint64_t ****)(v476 + 16 * v478);
                      goto LABEL_600;
                    }
                  }
                  goto LABEL_599;
                }
              }
              else
              {
LABEL_599:
                v479 = (uint64_t ****)(v476 + 16 * v477);
              }
LABEL_600:
              v483 = v479[1];
              if (*v483 == (uint64_t **)16)
              {
                v485 = v483[2];
                v484 = v483[3];
                if (v485 == (uint64_t **)0x646F6D2E6E617361 && v484 == (uint64_t **)0x726F74635F656C75)
                  goto LABEL_646;
              }
              goto LABEL_605;
            }
          }
        }
      }
    }
  }
LABEL_566:
  if ((char)v540 < 0)
    operator delete(__p);
  if (v546 != v548)
    free(v546);
  if (v549 != v551)
    free(v549);
  if (v552 != v554)
    free(v552);
LABEL_280:
  if (v555 != v557)
    free(v555);
  if (v542 != v541)
    free(v542);
}

llvm::PointerType *sub_1C5867298(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  llvm::PointerType *v12;
  uint64_t v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  v14[0] = a6;
  v14[1] = a7;
  v14[2] = a8;
  v12 = (llvm::PointerType *)llvm::FunctionType::get(a5, v14, 3, 0);
  return llvm::Module::getOrInsertFunction(a1, a2, a3, v12, a4);
}

uint64_t sub_1C5867374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (sub_1C61A45F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16);
}

uint64_t ***sub_1C58673CC(uint64_t a1, uint64_t a2, llvm::PointerType **a3, unsigned __int8 *a4, uint64_t a5)
{
  int v10;
  char *v11;
  char *v12;
  uint64_t ***v13;
  llvm::PointerType *v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  size_t v19;
  uint64_t ***v20;
  uint64_t ***v21;
  uint64_t ***v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t ****v28;
  uint64_t ***v29;
  uint64_t ****v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t ****v35;
  uint64_t v36;
  uint64_t v37[4];
  __int16 v38;

  v10 = *(_DWORD *)(a1 + 84);
  v11 = (char *)operator new(0x78uLL);
  v12 = v11;
  v13 = (uint64_t ***)(v11 + 32);
  *((_DWORD *)v11 + 13) = *((_DWORD *)v11 + 13) & 0x38000000 | 1;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = v11 + 32;
  v14 = *a3;
  if (a5)
  {
    v15 = *a4;
    v16 = v15 == 1;
    if (v15 == 1)
      v17 = a5 - 1;
    else
      v17 = a5;
    if (v16)
      ++a4;
  }
  else
  {
    v17 = 0;
  }
  if (v10 == 5)
    v18 = 7;
  else
    v18 = 8;
  v37[0] = (uint64_t)"__asan_global_";
  v37[2] = (uint64_t)a4;
  v37[3] = v17;
  v38 = 1283;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v11 + 32), a2, v14, 0, v18, (uint64_t)a3, (uint64_t)v37, 0, 0, 0, 0);
  v20 = (uint64_t ***)sub_1C58678A8(*(_DWORD *)(a1 + 84));
  if ((v12[66] & 0x40) != 0 || v19)
  {
    if (v19)
    {
      v20 = (uint64_t ***)llvm::UniqueStringSaver::save(***v13 + 2136, v20, v19);
      v22 = v21;
    }
    else
    {
      v22 = 0;
    }
    v23 = ***v13;
    v37[0] = (uint64_t)v13;
    v24 = *(_DWORD *)(v23 + 2520);
    if (v24)
    {
      v25 = *(_QWORD *)(v23 + 2504);
      v26 = v24 - 1;
      v27 = v26 & ((v13 >> 4) ^ (v13 >> 9));
      v28 = (uint64_t ****)(v25 + 24 * v27);
      v29 = *v28;
      if (*v28 == v13)
      {
LABEL_18:
        v28[1] = v20;
        v28[2] = v22;
        *((_DWORD *)v12 + 16) = *((_DWORD *)v12 + 16) & 0xFFBFFFFF | ((v22 != 0) << 22);
        return v13;
      }
      v31 = 0;
      v32 = 1;
      while (v29 != (uint64_t ***)-4096)
      {
        if (v31)
          v33 = 0;
        else
          v33 = v29 == (uint64_t ***)-8192;
        if (v33)
          v31 = v28;
        v34 = v27 + v32++;
        v27 = v34 & v26;
        v28 = (uint64_t ****)(v25 + 24 * v27);
        v29 = *v28;
        if (*v28 == v13)
          goto LABEL_18;
      }
      if (v31)
        v35 = v31;
      else
        v35 = v28;
    }
    else
    {
      v35 = 0;
    }
    v28 = (uint64_t ****)sub_1C53D65B8(v23 + 2504, (uint64_t)v37, v37, v35);
    v36 = v37[0];
    v28[1] = 0;
    v28[2] = 0;
    *v28 = (uint64_t ***)v36;
    goto LABEL_18;
  }
  return v13;
}

_QWORD *sub_1C58675C8(uint64_t a1, uint64_t ***a2, llvm::GlobalObject *this, std::string::value_type *__s, std::string::size_type __n)
{
  llvm::Comdat *v7;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ****v18;
  uint64_t ***v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ****v26;
  uint64_t ***v27;
  int v28;
  int v29;
  uint64_t ***v30;
  unsigned __int8 *v31;
  size_t v32;
  size_t v33;
  size_t *inserted;
  unint64_t *v35;
  std::string::size_type v36;
  const void *v37;
  unint64_t v38;
  std::string *p_dst;
  uint64_t v40;
  uint64_t v41;
  std::string *v42;
  size_t size;
  std::string __dst;
  __int16 v45;

  v7 = (llvm::Comdat *)a2[6];
  if (v7)
    return llvm::GlobalObject::setComdat(this, v7);
  v12 = (uint64_t)a2[5];
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"___asan_gen_";
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)"_anon_global";
    v45 = 771;
    llvm::Value::setName(a2, (uint64_t)&__dst);
  }
  if (!__n)
  {
    v13 = *((_DWORD *)a2 + 5);
    goto LABEL_15;
  }
  v13 = *((_DWORD *)a2 + 5);
  if (((_DWORD)a2[4] & 0xFu) - 7 <= 1)
  {
    if ((v13 & 0x10000000) == 0)
    {
      v36 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_38;
    }
    v14 = ***a2;
    v15 = *(_QWORD *)(v14 + 152);
    v16 = *(unsigned int *)(v14 + 168);
    if ((_DWORD)v16)
    {
      LODWORD(v17) = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v18 = (uint64_t ****)(v15 + 16 * v17);
      v19 = *v18;
      if (*v18 == a2)
        goto LABEL_30;
      v20 = 1;
      while (v19 != (uint64_t ***)-4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(uint64_t ****)(v15 + 16 * v17);
        if (v19 == a2)
        {
          v18 = (uint64_t ****)(v15 + 16 * v17);
          goto LABEL_30;
        }
      }
    }
    v18 = (uint64_t ****)(v15 + 16 * v16);
LABEL_30:
    v35 = (unint64_t *)v18[1];
    v38 = *v35;
    v37 = v35 + 2;
    v36 = v38;
    if (v38 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v36 >= 0x17)
    {
      v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17)
        v40 = v36 | 7;
      v41 = v40 + 1;
      p_dst = (std::string *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v36;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36;
      p_dst = &__dst;
      if (!v36)
      {
LABEL_38:
        p_dst->__r_.__value_.__s.__data_[v36] = 0;
        std::string::append(&__dst, __s, __n);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &__dst;
        else
          v42 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        else
          size = __dst.__r_.__value_.__l.__size_;
        inserted = llvm::Module::getOrInsertComdat(v12, (unsigned __int8 *)v42, size);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_25;
      }
    }
    memmove(p_dst, v37, v36);
    goto LABEL_38;
  }
LABEL_15:
  if ((v13 & 0x10000000) == 0)
  {
    v32 = 0;
    v31 = (unsigned __int8 *)&byte_1C871356D;
    goto LABEL_24;
  }
  v22 = ***a2;
  v23 = *(_QWORD *)(v22 + 152);
  v24 = *(unsigned int *)(v22 + 168);
  if (!(_DWORD)v24)
    goto LABEL_22;
  LODWORD(v25) = (v24 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v26 = (uint64_t ****)(v23 + 16 * v25);
  v27 = *v26;
  if (*v26 != a2)
  {
    v28 = 1;
    while (v27 != (uint64_t ***)-4096)
    {
      v29 = v25 + v28++;
      v25 = v29 & (v24 - 1);
      v27 = *(uint64_t ****)(v23 + 16 * v25);
      if (v27 == a2)
      {
        v26 = (uint64_t ****)(v23 + 16 * v25);
        goto LABEL_23;
      }
    }
LABEL_22:
    v26 = (uint64_t ****)(v23 + 16 * v24);
  }
LABEL_23:
  v30 = v26[1];
  v33 = (size_t)*v30;
  v31 = (unsigned __int8 *)(v30 + 2);
  v32 = v33;
LABEL_24:
  inserted = llvm::Module::getOrInsertComdat(v12, v31, v32);
LABEL_25:
  if (*(_DWORD *)(a1 + 84) == 1)
  {
    *((_DWORD *)inserted + 2) = 3;
    if (((_DWORD)a2[4] & 0xF) == 8)
      *((_DWORD *)a2 + 8) = (_DWORD)a2[4] & 0xFFFFBFC0 | 0x4007;
  }
  llvm::GlobalObject::setComdat((llvm::GlobalObject *)a2, (llvm::Comdat *)inserted);
  v7 = (llvm::Comdat *)a2[6];
  return llvm::GlobalObject::setComdat(this, v7);
}

uint64_t sub_1C58678A8(int a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1C58678D4 + 4 * byte_1C8661C90[a1 - 1]))(".ASAN$GL", 8);
}

const char *sub_1C58678D4()
{
  return "asan_globals";
}

const char *sub_1C58678E4()
{
  return "__DATA,__asan_globals,regular";
}

void sub_1C58678F4()
{
  llvm::report_fatal_error((llvm *)"ModuleAddressSanitizer not implemented for object file format", (const char *)1);
}

double sub_1C586790C(uint64_t a1, llvm::Module *a2)
{
  llvm::PointerType *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  llvm::UndefValue *v17[4];
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(_QWORD **)(a1 + 32) + 1576), 0, 0, 0);
  v17[0] = (llvm::UndefValue *)"asan.module_dtor";
  v18 = 259;
  v5 = llvm::Function::createWithDefaultAttr(v4, 7, 0, (uint64_t)v17, a2);
  *(_QWORD *)(a1 + 248) = v5;
  *((_QWORD *)v5 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5 + 14, **(uint64_t ***)v5, -1, 37);
  v17[0] = *(llvm::UndefValue **)(a1 + 248);
  sub_1C5F50CB4((uint64_t **)a2, "llvm.used", 9uLL, v17, 1);
  v6 = *(_QWORD **)(a1 + 32);
  v18 = 257;
  v7 = *(_QWORD *)(a1 + 248);
  v8 = operator new();
  *(_QWORD *)v8 = *v6 + 1600;
  *(_QWORD *)(v8 + 8) = 0;
  v9 = *(_DWORD *)(v8 + 20) & 0xC0000000;
  *(_QWORD *)(v8 + 24) = 0;
  v10 = v8 + 24;
  *(_DWORD *)(v8 + 16) = 22;
  *(_DWORD *)(v8 + 20) = v9;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = v8 + 40;
  *(_QWORD *)(v8 + 48) = v8 + 40;
  *(_QWORD *)(v8 + 56) = 0;
  if (v7)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v7 + 72, (_QWORD *)v8);
    v11 = *(_QWORD *)(v7 + 72);
    *(_QWORD *)(v8 + 24) = v11;
    *(_QWORD *)(v8 + 32) = v7 + 72;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(v7 + 72) = v10;
  }
  llvm::Value::setName((uint64_t ***)v8, (uint64_t)v17);
  v12 = *(_QWORD **)(a1 + 32);
  v13 = (char *)operator new(0x40uLL);
  v14 = *v12 + 1576;
  v13[16] = 29;
  result = 0.0;
  *(_OWORD *)(v13 + 44) = 0u;
  *(_OWORD *)(v13 + 33) = 0u;
  *(_OWORD *)(v13 + 17) = 0u;
  *(_WORD *)(v8 + 18) &= ~0x8000u;
  v16 = *(_QWORD *)(v8 + 40);
  *((_QWORD *)v13 + 4) = v8 + 40;
  *((_QWORD *)v13 + 5) = v8;
  *((_QWORD *)v13 + 3) = v16;
  *(_QWORD *)v13 = v14;
  *((_QWORD *)v13 + 1) = 0;
  *(_QWORD *)(v16 + 8) = v13 + 24;
  *(_QWORD *)(v8 + 40) = v13 + 24;
  return result;
}

void sub_1C5867ADC(uint64_t a1, unint64_t a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (*(unsigned int *)(a1 + 12) < a2)
  {
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 8);
    v4 = *(void **)a1;
    v5 = a2;
LABEL_10:
    bzero(v4, 8 * v5);
    goto LABEL_11;
  }
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= a2)
    v7 = a2;
  else
    v7 = *(unsigned int *)(a1 + 8);
  if (v7)
    bzero(*(void **)a1, 8 * v7);
  v5 = a2 - v6;
  if (a2 > v6)
  {
    v4 = (void *)(*(_QWORD *)a1 + 8 * v6);
    goto LABEL_10;
  }
LABEL_11:
  *(_DWORD *)(a1 + 8) = a2;
}

uint64_t sub_1C5867B6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::AttributeList *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  llvm::PointerType *ParamByValType;
  unsigned __int16 ParamAlignment;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  char v29;
  const char **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _BYTE *v36;
  int v37;
  int v38;
  _QWORD *v39;
  unint64_t v40;
  unsigned __int8 **v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  const char *v46;
  const llvm::APInt *v47;
  char v48;
  char v49;
  unint64_t v50;
  llvm::ConstantInt *v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  const char **v56;
  _WORD *v57;
  void *v58;
  void *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  __int128 *v63;
  void *v64;
  void *v65;
  unsigned int v66;
  unsigned int v67;
  char *v68;
  char *v69;
  char *v70;
  int v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  unint64_t i;
  char *v80;
  unint64_t v81;
  unsigned __int8 *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  const std::ios_base *v97;
  const std::locale::facet *v98;
  unsigned __int8 *v99;
  unint64_t v100;
  llvm::PointerType *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unsigned __int8 *v113;
  llvm::Value **v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t **v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  llvm::PointerType *v123;
  llvm::Type *v124;
  uint64_t *NullValue;
  uint64_t v126;
  char v127;
  char v128;
  char *v129;
  char *v130;
  _QWORD *v131;
  llvm::Value *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  llvm::Type *v144;
  uint64_t v145;
  llvm::Value **v146;
  llvm::Value **v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  BOOL v153;
  const char *v154;
  char v155;
  char v156;
  unint64_t v157;
  unsigned __int8 *v158;
  uint64_t v159;
  unsigned __int8 *v160;
  llvm::Value **v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  llvm::Value *Select;
  llvm::Value **v167;
  _QWORD *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  llvm::Value **v172;
  llvm::Value *v173;
  _QWORD *v174;
  llvm::Value *v175;
  uint64_t v176;
  llvm::Value ***v177;
  uint64_t v178;
  char *v179;
  char *v180;
  unsigned __int8 **v181;
  int v182;
  unsigned __int8 *v183;
  unsigned __int8 *v184;
  unsigned __int8 *v185;
  llvm::Value *v186;
  char *v187;
  char *v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  unsigned __int8 **v197;
  int v198;
  unsigned __int8 *v199;
  unsigned __int8 *v200;
  unsigned __int8 *v201;
  llvm::PointerType *v202;
  unsigned __int8 **v203;
  uint64_t v204;
  unsigned __int8 *v205;
  llvm::Value **v206;
  llvm::Value *v207;
  char *v208;
  char *v209;
  llvm::Value ***v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  llvm::Value *v214;
  llvm::Value ****v215;
  llvm::Value *v216;
  char *v217;
  char *v218;
  unsigned __int8 **v219;
  int v220;
  unsigned __int8 *v221;
  unsigned __int8 *v222;
  unsigned __int8 *v223;
  uint64_t **v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  char v229;
  char v230;
  char *v231;
  char *v232;
  _QWORD *v233;
  llvm::Value *v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  unsigned __int8 *v242;
  uint64_t v243;
  uint64_t *v244;
  char *v245;
  char *v246;
  unsigned __int8 **v247;
  int v248;
  unsigned __int8 *v249;
  unsigned __int8 *v250;
  unsigned __int8 *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  unsigned __int8 **v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t ***v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  int v272;
  unsigned int v273;
  uint64_t ****v274;
  uint64_t ***v275;
  uint64_t ****v276;
  int v277;
  BOOL v278;
  unsigned int v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  void *Impl;
  llvm::Instruction *v287;
  uint64_t v288;
  uint64_t v289;
  llvm::Instruction **v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t NextNonDebugInstruction;
  __n128 v294;
  llvm::Instruction **v295;
  uint64_t v296;
  llvm::Instruction *v297;
  uint64_t v298;
  llvm::Instruction *v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v317;
  unsigned __int8 *v318;
  int v319;
  uint64_t v321;
  _QWORD *v322;
  unsigned int v323;
  BOOL v324;
  _BOOL4 v325;
  unsigned int v327;
  _WORD **v328;
  uint64_t v329;
  _WORD *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  _WORD *v336;
  int v337;
  int v338;
  char *v339;
  char *v340;
  __n128 *v341;
  char *v342;
  __n128 v343;
  __n128 v344;
  unint64_t v345;
  int64_t v346;
  BOOL v347;
  _BOOL4 v348;
  int v349;
  unsigned __int8 *v350;
  uint64_t v351;
  unsigned int v352;
  uint64_t v353;
  llvm::PointerType *v354;
  unsigned __int8 **v355;
  uint64_t v356;
  llvm::UndefValue *inserted;
  uint64_t v358;
  char v359;
  char v360;
  char *v361;
  char *v362;
  llvm::Value *v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  llvm::Type *v367;
  llvm::Value **v368;
  llvm::Value *v369;
  char *v370;
  unint64_t k;
  uint64_t v372;
  uint64_t **v373;
  uint64_t v374;
  uint64_t v375;
  void *v376;
  void *v377;
  llvm::Value **v378;
  llvm::Type *v379;
  uint64_t v380;
  unint64_t j;
  char *v382;
  unsigned __int8 **v383;
  int v384;
  unsigned __int8 *v385;
  unsigned __int8 *v386;
  unsigned __int8 *v387;
  uint64_t v388;
  uint64_t **v389;
  uint64_t v390;
  llvm::Value **v391;
  llvm::Value *v392;
  char *v393;
  void *v394;
  void *v395;
  uint64_t *v396;
  char v397;
  char v398;
  char *v399;
  char *v400;
  unsigned __int8 **v401;
  llvm::Value *v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  unsigned __int8 ***v406;
  uint64_t v407;
  unsigned __int8 *v408;
  uint64_t v409;
  uint64_t *v410;
  char v411;
  char v412;
  char *v413;
  char *v414;
  unsigned __int8 **v415;
  llvm::Value *v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  unsigned __int8 ***v420;
  uint64_t v421;
  llvm::Value **v422;
  unsigned __int8 *v423;
  char *v424;
  char *v425;
  llvm::Value ***v426;
  _QWORD *v427;
  uint64_t v428;
  llvm::Value *v429;
  llvm::Value ****v430;
  llvm::Value *v431;
  uint64_t v432;
  unsigned __int8 *v433;
  unsigned __int8 *PrivateGlobalForString;
  uint64_t v435;
  uint64_t *v436;
  char v437;
  char v438;
  char *v439;
  char *v440;
  unsigned __int8 **v441;
  llvm::Value *v442;
  uint64_t v443;
  _QWORD *v444;
  uint64_t v445;
  uint64_t v446;
  unsigned __int8 ***v447;
  uint64_t v448;
  llvm::Value **v449;
  unsigned __int8 *v450;
  char *v451;
  char *v452;
  llvm::Value ***v453;
  _QWORD *v454;
  uint64_t v455;
  llvm::Value *v456;
  llvm::Value ****v457;
  llvm::Value *v458;
  uint64_t v459;
  unsigned __int8 *v460;
  unsigned __int8 *v461;
  uint64_t v462;
  uint64_t *v463;
  char v464;
  char v465;
  char *v466;
  char *v467;
  unsigned __int8 **v468;
  llvm::Value *v469;
  uint64_t v470;
  _QWORD *v471;
  uint64_t v472;
  uint64_t v473;
  unsigned __int8 ***v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t *v478;
  unsigned __int8 ***v479;
  uint64_t *v480;
  llvm::Value *v481;
  uint64_t *v482;
  char v483;
  char v484;
  char *v485;
  char *v486;
  unsigned __int8 **v487;
  llvm::Value *v488;
  uint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  unsigned __int8 **v492;
  llvm::Type *v493;
  llvm::Value **v494;
  llvm *v495;
  llvm::MDNode *v496;
  unint64_t v497;
  llvm::Value **v498;
  llvm::Value *v499;
  char *v500;
  char *v501;
  llvm::Value ***v502;
  llvm::Value *v503;
  llvm::Value *v504;
  llvm::Value ****v505;
  llvm::Value *v506;
  char *v507;
  char *v508;
  unsigned __int8 **v509;
  int v510;
  unsigned __int8 *v511;
  unsigned __int8 *v512;
  unsigned __int8 *v513;
  uint64_t **v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unsigned __int8 *v518;
  char v519;
  char v520;
  char *v521;
  char *v522;
  unsigned __int8 *v523;
  uint64_t v524;
  _QWORD *v525;
  uint64_t v526;
  llvm::Type *v527;
  uint64_t *v528;
  uint64_t v529;
  unsigned __int8 *v530;
  char v531;
  char v532;
  char *v533;
  char *v534;
  unsigned __int8 **v535;
  llvm::Value *v536;
  uint64_t v537;
  _QWORD *v538;
  uint64_t v539;
  uint64_t v540;
  unsigned __int8 ***v541;
  uint64_t v542;
  char *v543;
  char *v544;
  llvm::Type **v545;
  int v546;
  unsigned __int8 *v547;
  uint64_t v548;
  uint64_t v549;
  llvm::Type **v550;
  int v551;
  unsigned __int8 *v552;
  char *v553;
  char *v554;
  unsigned __int8 **v555;
  int v556;
  unsigned __int8 *v557;
  unsigned __int8 *v558;
  unsigned __int8 *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  _QWORD *v568;
  char *v569;
  llvm::Value *v570;
  llvm *v571;
  unsigned __int8 *v572;
  llvm::Value **v573;
  llvm::Value *v574;
  char *v575;
  unsigned __int8 *v576;
  char *v577;
  llvm::Value ***v578;
  uint64_t v579;
  llvm::Value *v580;
  llvm::Value ****v581;
  llvm::Value *v582;
  const char **v583;
  const char **v584;
  unsigned __int8 **v585;
  int v586;
  unsigned __int8 *v587;
  unsigned __int8 *v588;
  unsigned __int8 *v589;
  uint64_t v590;
  unsigned __int8 *v591;
  uint64_t v592;
  const char **v593;
  const char **v594;
  unsigned __int8 **v595;
  int v596;
  unsigned __int8 *v597;
  unsigned __int8 *v598;
  unsigned __int8 *v599;
  const char **v600;
  const char **v601;
  unsigned __int8 **v602;
  int v603;
  unsigned __int8 *v604;
  unsigned __int8 *v605;
  unsigned __int8 *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t *v609;
  _QWORD *v610;
  unint64_t v611;
  unint64_t v612;
  void *v613;
  int v614;
  uint64_t ****v615;
  uint64_t ***v616;
  const char **v617;
  const char **v618;
  unsigned __int8 **v619;
  int v620;
  unsigned __int8 *v621;
  unsigned __int8 *v622;
  unsigned __int8 *v623;
  const char **v624;
  const char **v625;
  unsigned __int8 **v626;
  int v627;
  unsigned __int8 *v628;
  unsigned __int8 *v629;
  unsigned __int8 *v630;
  const char **v631;
  const char **v632;
  unsigned __int8 **v633;
  int v634;
  unsigned __int8 *v635;
  unsigned __int8 *v636;
  unsigned __int8 *v637;
  const char **v638;
  const char **v639;
  llvm::Type **v640;
  int v641;
  unsigned __int8 *v642;
  const char **v643;
  const char **v644;
  unsigned __int8 **v645;
  int v646;
  unsigned __int8 *v647;
  unsigned __int8 *v648;
  unsigned __int8 *v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  _QWORD *v657;
  unint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t *v661;
  llvm::Type *v662;
  uint64_t *v663;
  int v664;
  _WORD ***v665;
  llvm::Value **v666;
  _BYTE *v667;
  unsigned __int8 *v668;
  _QWORD *v669;
  llvm::Value **v670;
  char *v671;
  unsigned __int8 *v672;
  uint64_t *v673;
  _BOOL4 v674;
  unsigned int v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t *v678;
  unsigned __int8 *v679;
  _QWORD *v680;
  char *v681;
  _QWORD v683[4];
  __int16 v684;
  llvm::Instruction *v685;
  uint64_t v686;
  _QWORD v687[2];
  int v688;
  unint64_t v689[2];
  unint64_t v690;
  unsigned __int8 *v691;
  llvm::Type *v692;
  void *v693[2];
  uint64_t v694;
  __int16 v695;
  uint64_t v696[4];
  __int16 v697;
  void *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  __int16 v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  void *v708;
  __int128 v709;
  _BYTE v710[64];
  void *v711;
  __int128 v712;
  _BYTE v713[64];
  void *v714;
  int v715[2];
  uint64_t v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  void *__p;
  _BYTE *v724;
  uint64_t v725;
  void *v726[3];
  uint64_t v727;
  void *v728;
  void *__src;
  unsigned int v730;
  unsigned int v731;
  _DWORD v732[6];
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  void *v736;
  uint64_t v737;
  char v738;
  void *v739;
  _BYTE *v740;
  uint64_t v741;
  void *v742;
  void *v743;
  unsigned int v744;
  unsigned int v745;
  unsigned int v746;
  void *v747;
  _BYTE *v748;
  void *v749;
  uint64_t v750;
  _BYTE v751[64];
  const char **v752;
  uint64_t v753;
  const char *v754;
  int v755;
  _WORD v756[8];
  uint64_t v757;
  _QWORD *v758;
  uint64_t v759;
  void **v760;
  _QWORD *v761;
  uint64_t v762;
  char *v763;
  char *v764;
  uint64_t v765;
  void *v766;
  _QWORD v767[4];

  v767[1] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 6010))
    return 0;
  v2 = *(_QWORD *)a1;
  v667 = (_BYTE *)(a1 + 5936);
  if (!byte_1ED811D40)
    goto LABEL_55;
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 48);
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1 + 8) + 992))
  {
    v7 = *(_QWORD *)(v6 + 32);
    if (v7)
      v8 = v7 == *(_QWORD *)(v6 + 40) + 40;
    else
      v8 = 1;
    if (v8)
      v6 = 0;
    else
      v6 = v7 - 24;
  }
  sub_1C4773D54((uint64_t)&v728, v6, 0, 0, 0);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if ((*(_WORD *)(v9 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v9);
    v11 = *(_BYTE **)(v9 + 88);
    if ((*(_WORD *)(v9 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v9);
      v12 = *(_BYTE **)(v9 + 88);
      goto LABEL_19;
    }
  }
  else
  {
    v11 = *(_BYTE **)(v9 + 88);
  }
  v12 = v11;
LABEL_19:
  v13 = &v12[40 * *(_QWORD *)(v9 + 96)];
  if (v11 != v13)
  {
    v14 = v10 + 272;
    v15 = "Arg";
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)v11 + 8) == 15)
      {
        v16 = *((_QWORD *)v11 + 3);
        v19 = *(_QWORD *)(v16 + 112);
        v18 = (llvm::AttributeList *)(v16 + 112);
        v17 = v19;
        if (v19)
        {
          v20 = *((_DWORD *)v11 + 8);
          if ((v20 + 2) < *(_DWORD *)(v17 + 8))
          {
            v21 = *(_QWORD *)(v17 + 8 * (v20 + 2) + 40);
            if (v21)
            {
              if ((*(_BYTE *)(v21 + 20) & 0x20) != 0)
                break;
            }
          }
        }
      }
LABEL_24:
      v11 += 40;
      if (v11 == v13)
        goto LABEL_52;
    }
    ParamByValType = (llvm::PointerType *)llvm::AttributeList::getParamByValType(v18, *((_DWORD *)v11 + 8));
    ParamAlignment = llvm::AttributeList::getParamAlignment(v18, v20);
    v24 = ParamAlignment;
    if (ParamAlignment <= 0xFFu)
    {
      llvm::DataLayout::getAlignment(v14, (uint64_t)ParamByValType);
      v24 = v25;
    }
    if ((v11[23] & 0x10) == 0)
    {
      v26 = v676 & 0xFFFFFFFF00000000;
      v27 = v676 & 0xFFFFFFFF00000000 | *((unsigned int *)v11 + 8);
      v28 = v15;
      *(_QWORD *)&v717 = v15;
      v676 = v27;
      *(_QWORD *)&v718 = v27;
      LOWORD(v719) = 2051;
      v29 = 2;
      v30 = (const char **)&v717;
LABEL_40:
      v752 = v30;
      v753 = v26;
      v754 = ".byval";
      LOBYTE(v756[0]) = v29;
      HIBYTE(v756[0]) = 3;
      v41 = sub_1C486A5CC((uint64_t *)&v728, ParamByValType, 0, (uint64_t)&v752);
      *((_WORD *)v41 + 9) = *((_WORD *)v41 + 9) & 0xFFC0 | v24;
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, (llvm::Value *)v41, (llvm::Value *)1);
      sub_1C4768AD0(v14, (uint64_t)ParamByValType);
      v43 = v42;
      v45 = v44 == 1;
      llvm::DataLayout::getAlignment(v14, (uint64_t)ParamByValType);
      v49 = v48;
      if (v45)
      v50 = ((1 << v49) + ((unint64_t)(v43 + 7) >> 3) - 1) & -(1 << v49);
      v51 = *(llvm::ConstantInt **)(*(_QWORD *)v735 + 1984);
      v52 = *(_DWORD *)(*(_QWORD *)v735 + 1992);
      LODWORD(v753) = v52 >> 8;
      if (v52 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v752, v50, 0);
      }
      else
      {
        if (v52 <= 0xFF)
          v53 = 0;
        else
          v53 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v52);
        v752 = (const char **)(v53 & v50);
      }
      v15 = v28;
      v54 = (uint64_t *)llvm::ConstantInt::get(v51, (llvm::LLVMContext *)&v752, v47);
      if (v753 >= 0x41 && v752)
        MEMORY[0x1CAA32F9C](v752, 0x1000C8000313F17);
      llvm::IRBuilderBase::CreateMemTransferInst((uint64_t)&v728, 194, (llvm::Value *)v41, v24 | 0x100, (llvm::Value *)v11, v24 | 0x100, v54, 0, 0, 0, 0, 0);
      goto LABEL_24;
    }
    v31 = ***(_QWORD ***)v11;
    v32 = *(_QWORD *)(v31 + 152);
    v33 = *(unsigned int *)(v31 + 168);
    if ((_DWORD)v33)
    {
      LODWORD(v34) = (v33 - 1) & ((v11 >> 4) ^ (v11 >> 9));
      v35 = (_QWORD *)(v32 + 16 * v34);
      v36 = (_BYTE *)*v35;
      if ((_BYTE *)*v35 == v11)
      {
LABEL_39:
        v28 = v15;
        v39 = (_QWORD *)v35[1];
        v40 = *v39;
        v30 = (const char **)(v39 + 2);
        v26 = v40;
        LOWORD(v719) = 261;
        *(_QWORD *)&v717 = v30;
        *((_QWORD *)&v717 + 1) = v40;
        v29 = 5;
        goto LABEL_40;
      }
      v37 = 1;
      while (v36 != (_BYTE *)-4096)
      {
        v38 = v34 + v37++;
        v34 = v38 & (v33 - 1);
        v36 = *(_BYTE **)(v32 + 16 * v34);
        if (v36 == v11)
        {
          v35 = (_QWORD *)(v32 + 16 * v34);
          goto LABEL_39;
        }
      }
    }
    v35 = (_QWORD *)(v32 + 16 * v33);
    goto LABEL_39;
  }
LABEL_52:
  if (v728 != &v730)
    free(v728);
  v2 = *(_QWORD *)a1;
LABEL_55:
  v55 = *(_QWORD *)(v2 + 80);
  if (v55)
    v56 = (const char **)(v55 - 24);
  else
    v56 = 0;
  v752 = v56;
  sub_1C586DB8C((uint64_t *)&v752, (uint64_t)&v728);
  v57 = v756;
  v752 = (const char **)v756;
  v58 = __src;
  if (__src == v728)
  {
    v753 = (uint64_t)v756;
    v59 = __src;
  }
  else
  {
    v266 = v730;
    v57 = malloc_type_malloc(8 * v730, 0x4065EBACuLL);
    if (!v57)
    {
      if (v266)
        goto LABEL_844;
      v57 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v57)
        goto LABEL_844;
    }
    v753 = (uint64_t)v57;
    v59 = v728;
    v58 = __src;
  }
  v60 = v731;
  LODWORD(v754) = v730;
  if (v58 == v59)
    v61 = v731;
  else
    v61 = v730;
  v62 = a1;
  if (v61)
  {
    memmove(v57, v58, 8 * v61);
    v60 = v731;
  }
  HIDWORD(v754) = v60;
  v755 = v732[0];
  v764 = 0;
  v765 = 0;
  v763 = 0;
  sub_1C4E19D7C(&v763, v739, v740, (v740 - (_BYTE *)v739) >> 5);
  v63 = &v719;
  *(_QWORD *)&v717 = &v719;
  v64 = v743;
  if (v743 != v742)
  {
    v267 = v744;
    v63 = (__int128 *)malloc_type_malloc(8 * v744, 0x4065EBACuLL);
    if (v63 || !v267 && (v63 = (__int128 *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      *((_QWORD *)&v717 + 1) = v63;
      v65 = v742;
      v64 = v743;
      v62 = a1;
      goto LABEL_67;
    }
LABEL_844:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  *((_QWORD *)&v717 + 1) = &v719;
  v65 = v743;
LABEL_67:
  v66 = v745;
  LODWORD(v718) = v744;
  if (v64 == v65)
    v67 = v745;
  else
    v67 = v744;
  if (v67)
  {
    memmove(v63, v64, 8 * v67);
    v66 = v745;
  }
  *(_QWORD *)((char *)&v718 + 4) = __PAIR64__(v746, v66);
  v725 = 0;
  __p = 0;
  v724 = 0;
  sub_1C4E19D7C(&__p, v747, v748, (v748 - (_BYTE *)v747) >> 5);
  v665 = (_WORD ***)(v62 + 512);
  while (1)
  {
    if (v764 - v763 != v724 - (_BYTE *)__p)
      goto LABEL_87;
    if (v763 == v764)
      break;
    v68 = (char *)__p + 16;
    v69 = v763 + 16;
    while (1)
    {
      v70 = v69 - 16;
      if (*((_QWORD *)v69 - 2) != *((_QWORD *)v68 - 2))
        break;
      v71 = v68[8];
      if (v69[8])
        v72 = v71 == 0;
      else
        v72 = 1;
      if (v72)
      {
        if ((v69[8] == 0) == (v71 != 0))
          break;
      }
      else if (*(_DWORD *)v69 != *(_DWORD *)v68)
      {
        break;
      }
      v68 += 32;
      v69 += 32;
      if (v70 + 32 == v764)
        goto LABEL_93;
    }
LABEL_87:
    v73 = *((_QWORD *)v764 - 4);
    v74 = *(_QWORD *)(v73 + 48);
    if (v74 != v73 + 40)
    {
      if (v74)
        v75 = v74 - 24;
      else
        v75 = 0;
      __asm { BR              X9 }
    }
    sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v752);
  }
LABEL_93:
  if (__p)
  {
    v724 = __p;
    operator delete(__p);
  }
  if (*((_QWORD *)&v717 + 1) != (_QWORD)v717)
    free(*((void **)&v717 + 1));
  if (v763)
  {
    v764 = v763;
    operator delete(v763);
  }
  if ((const char **)v753 != v752)
    free((void *)v753);
  if (v747)
  {
    v748 = v747;
    operator delete(v747);
  }
  if (v743 != v742)
    free(v743);
  if (v739)
  {
    v740 = v739;
    operator delete(v739);
  }
  if (__src != v728)
    free(__src);
  if (!*(_DWORD *)(v62 + 520) && !*(_DWORD *)(v62 + 5952))
    return 0;
  v77 = *(_QWORD *)(v62 + 8);
  v677 = *(_QWORD *)(*(_QWORD *)v62 + 40);
  v78 = *(_QWORD *)(v62 + 464);
  v752 = &v754;
  v753 = 0x200000000;
  v759 = v78;
  v760 = &v766;
  v761 = v767;
  v762 = 0;
  LODWORD(v763) = 0;
  WORD2(v763) = 512;
  BYTE6(v763) = 7;
  v757 = 0;
  v758 = 0;
  v764 = 0;
  v765 = 0;
  v766 = &unk_1E8167888;
  v767[0] = &unk_1E8167A08;
  if ((*(_DWORD *)(v77 + 64) - 1) <= 1)
  {
    for (i = 0; i != 11; ++i)
    {
      v80 = (char *)&v718 + 5;
      v81 = i;
      if (i)
      {
        do
        {
          *--v80 = (v81 % 0xA) | 0x30;
          v324 = v81 > 9;
          v81 /= 0xAuLL;
        }
        while (v324);
      }
      else
      {
        BYTE4(v718) = 48;
        v80 = (char *)&v718 + 4;
      }
      sub_1C4E61270(&v728, v80, (char *)&v718 + 5, (char *)&v718 + 5 - v80);
      std::operator+<char>();
      if ((SBYTE7(v718) & 0x80u) == 0)
        v82 = (unsigned __int8 *)&v717;
      else
        v82 = (unsigned __int8 *)v717;
      if ((SBYTE7(v718) & 0x80u) == 0)
        v83 = BYTE7(v718) & 0x7F;
      else
        v83 = *((_QWORD *)&v717 + 1);
      v84 = (_QWORD *)(a1 + 16 * i);
      v84[110] = sub_1C6212CB8(v677, v82, v83, 0, *(uint64_t ***)(a1 + 472), *(_QWORD *)(a1 + 472));
      v84[111] = v85;
      if (SBYTE7(v718) < 0)
        operator delete((void *)v717);
      std::operator+<char>();
      if ((SBYTE7(v718) & 0x80u) == 0)
        v86 = (unsigned __int8 *)&v717;
      else
        v86 = (unsigned __int8 *)v717;
      if ((SBYTE7(v718) & 0x80u) == 0)
        v87 = BYTE7(v718) & 0x7F;
      else
        v87 = *((_QWORD *)&v717 + 1);
      v84[132] = sub_1C6291FE0(v677, v86, v87, 0, (uint64_t **)(*(_QWORD *)v759 + 1576), *(_QWORD *)(a1 + 472), *(_QWORD *)(a1 + 472));
      v84[133] = v88;
      if (SBYTE7(v718) < 0)
        operator delete((void *)v717);
      if (SHIBYTE(v731) < 0)
        operator delete(v728);
    }
    v62 = a1;
    v77 = *(_QWORD *)(a1 + 8);
  }
  if (*(_BYTE *)(v77 + 62))
  {
    *(_QWORD *)(v62 + 5328) = sub_1C6291FE0(v677, "__asan_poison_stack_memory", 0x1AuLL, 0, (uint64_t **)(*(_QWORD *)v759 + 1576), *(_QWORD *)(v62 + 472), *(_QWORD *)(v62 + 472));
    *(_QWORD *)(v62 + 5336) = v89;
    *(_QWORD *)(v62 + 5344) = sub_1C6291FE0(v677, "__asan_unpoison_stack_memory", 0x1CuLL, 0, (uint64_t **)(*(_QWORD *)v759 + 1576), *(_QWORD *)(v62 + 472), *(_QWORD *)(v62 + 472));
    *(_QWORD *)(v62 + 5352) = v90;
  }
  v91 = 0;
  v92 = (void *)*MEMORY[0x1E0DE4F60];
  v93 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v94 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  do
  {
    v95 = dword_1C8661F6C[v91];
    sub_1C4D82D08((uint64_t)&v728);
    sub_1C4D7C62C(&v728, (uint64_t)"__asan_set_shadow_", 18);
    v96 = v728;
    *(_QWORD *)((char *)v732 + *((_QWORD *)v728 - 3)) = 2;
    v97 = (const std::ios_base *)((char *)&v728 + *(v96 - 3));
    if (v97[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v97);
      v98 = std::locale::use_facet((const std::locale *)&v717, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v98->__vftable[2].~facet_0)(v98, 32);
      std::locale::~locale((std::locale *)&v717);
      v96 = v728;
    }
    v97[1].__fmtflags_ = 48;
    *(_DWORD *)((char *)&__src + *(v96 - 3)) = *(_DWORD *)((_BYTE *)&__src + *(v96 - 3)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::stringbuf::str();
    if ((SBYTE7(v718) & 0x80u) == 0)
      v99 = (unsigned __int8 *)&v717;
    else
      v99 = (unsigned __int8 *)v717;
    if ((SBYTE7(v718) & 0x80u) == 0)
      v100 = BYTE7(v718) & 0x7F;
    else
      v100 = *((_QWORD *)&v717 + 1);
    v101 = sub_1C6291FE0(v677, v99, v100, 0, (uint64_t **)(*(_QWORD *)v759 + 1576), *(_QWORD *)(a1 + 472), *(_QWORD *)(a1 + 472));
    v102 = a1 + 16 * v95;
    *(_QWORD *)(v102 + 1232) = v101;
    *(_QWORD *)(v102 + 1240) = v103;
    if (SBYTE7(v718) < 0)
      operator delete((void *)v717);
    v728 = v92;
    *(void **)((char *)&v728 + *((_QWORD *)v92 - 3)) = v93;
    __src = v94;
    if (v738 < 0)
      operator delete(v736);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA32F18](&v741);
    ++v91;
  }
  while (v91 != 6);
  *(_QWORD *)(a1 + 5360) = sub_1C6291FE0(v677, "__asan_alloca_poison", 0x14uLL, 0, (uint64_t **)(*(_QWORD *)v759 + 1576), *(_QWORD *)(a1 + 472), *(_QWORD *)(a1 + 472));
  *(_QWORD *)(a1 + 5368) = v104;
  *(_QWORD *)(a1 + 5376) = sub_1C6291FE0(v677, "__asan_allocas_unpoison", 0x17uLL, 0, (uint64_t **)(*(_QWORD *)v759 + 1576), *(_QWORD *)(a1 + 472), *(_QWORD *)(a1 + 472));
  *(_QWORD *)(a1 + 5384) = v105;
  if (v752 != &v754)
    free(v752);
  if (*v667)
  {
    *(_DWORD *)(a1 + 5672) = 0;
    *(_DWORD *)(a1 + 5400) = 0;
  }
  if (!byte_1EF8F3DB0 || !*(_DWORD *)(a1 + 5952))
    goto LABEL_309;
  v106 = *(unsigned int *)(a1 + 5400);
  if ((_DWORD)v106)
  {
    v107 = *(_QWORD *)(a1 + 5392);
    v108 = v107 + 32 * v106;
    do
    {
      sub_1C4773D54((uint64_t)&v728, *(_QWORD *)v107, 0, 0, 0);
      v109 = *(unsigned __int8 **)(v107 + 8);
      v110 = *(_QWORD *)(v107 + 16);
      v111 = *(unsigned __int8 *)(v107 + 24);
      v112 = *(_QWORD *)(a1 + 472);
      v756[0] = 257;
      v113 = sub_1C5098D9C((uint64_t *)&v728, v109, v112, (uint64_t)&v752);
      v114 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), v110, 0);
      v115 = 5328;
      if (v111)
      {
        v116 = a1 + 5328;
      }
      else
      {
        v115 = 5344;
        v116 = a1 + 5344;
      }
      v117 = *(uint64_t ***)(a1 + v115);
      v118 = *(_QWORD *)(v116 + 8);
      *(_QWORD *)&v717 = v113;
      *((_QWORD *)&v717 + 1) = v114;
      v756[0] = 257;
      sub_1C4774778((uint64_t *)&v728, v117, v118, (uint64_t *)&v717, 2, (uint64_t)&v752, 0);
      if (v728 != &v730)
        free(v728);
      v107 += 32;
    }
    while (v107 != v108);
  }
  v119 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  if (v119)
    v120 = v119 - 24;
  else
    v120 = 0;
  v121 = *(_QWORD *)(v120 + 48);
  if (v121)
    v122 = v121 - 24;
  else
    v122 = 0;
  sub_1C4773D54((uint64_t)&v728, v122, 0, 0, 0);
  v123 = *(llvm::PointerType **)(a1 + 472);
  v756[0] = 257;
  *(_QWORD *)(a1 + 5992) = sub_1C486A5CC((uint64_t *)&v728, v123, 0, (uint64_t)&v752);
  NullValue = (uint64_t *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 472), v124);
  v126 = *(_QWORD *)(a1 + 5992);
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v733 + 56) + 40) + 272, *NullValue);
  v128 = v127;
  v129 = (char *)operator new(0x80uLL);
  v130 = v129;
  *((_DWORD *)v129 + 21) = *((_DWORD *)v129 + 21) & 0x38000000 | 2;
  *(_QWORD *)v129 = 0;
  *((_QWORD *)v129 + 2) = 0;
  *((_QWORD *)v129 + 1) = 0;
  *((_QWORD *)v129 + 5) = 0;
  *((_QWORD *)v129 + 6) = 0;
  *((_QWORD *)v129 + 4) = 0;
  v131 = v129 + 32;
  *((_QWORD *)v129 + 8) = **(_QWORD **)*NullValue + 1576;
  v132 = (llvm::Value *)(v129 + 64);
  *((_QWORD *)v129 + 3) = v129 + 64;
  *((_QWORD *)v129 + 7) = v129 + 64;
  *((_QWORD *)v129 + 9) = 0;
  v129[80] = 61;
  v129[81] = 0;
  *((_WORD *)v129 + 41) = 0;
  *((_DWORD *)v129 + 21) = 2;
  *(_OWORD *)(v129 + 88) = 0u;
  *(_OWORD *)(v129 + 104) = 0u;
  *((_DWORD *)v129 + 30) = 0;
  *(_QWORD *)v129 = NullValue;
  v135 = NullValue[1];
  v134 = NullValue + 1;
  v133 = v135;
  *((_QWORD *)v129 + 1) = v135;
  if (v135)
    *(_QWORD *)(v133 + 16) = v129 + 8;
  *((_QWORD *)v129 + 2) = v134;
  *v134 = v129;
  if (*((_QWORD *)v129 + 4))
  {
    **((_QWORD **)v129 + 6) = *((_QWORD *)v129 + 5);
    v650 = *((_QWORD *)v129 + 5);
    if (v650)
      *(_QWORD *)(v650 + 16) = *((_QWORD *)v129 + 6);
  }
  *v131 = v126;
  if (v126)
  {
    v138 = *(_QWORD *)(v126 + 8);
    v137 = (_QWORD *)(v126 + 8);
    v136 = v138;
    *((_QWORD *)v129 + 5) = v138;
    if (v138)
      *(_QWORD *)(v136 + 16) = v129 + 40;
    *((_QWORD *)v129 + 6) = v137;
    *v137 = v131;
  }
  *((_WORD *)v129 + 41) = 2 * (v128 & 0x3F);
  v129[124] = 1;
  v756[0] = 257;
  (*(void (**)(uint64_t, llvm::Value *, const char ***, uint64_t, uint64_t))(*(_QWORD *)v737 + 16))(v737, v132, &v752, v733, v734);
  v139 = (char *)v728;
  if ((_DWORD)__src)
  {
    v382 = (char *)v728 + 16 * __src;
    v383 = (unsigned __int8 **)(v130 + 112);
    while (1)
    {
      v384 = *(_DWORD *)v139;
      v385 = (unsigned __int8 *)*((_QWORD *)v139 + 1);
      if (v385)
      {
        if (!v384)
        {
          *(_QWORD *)&v717 = *((_QWORD *)v139 + 1);
          llvm::MetadataTracking::track((uint64_t)&v717, v385, 2);
          v386 = *v383;
          goto LABEL_477;
        }
      }
      else
      {
        v386 = *v383;
        if (!*v383 && (v130[87] & 0x20) == 0)
          goto LABEL_474;
        if (!v384)
        {
          *(_QWORD *)&v717 = 0;
LABEL_477:
          if (v386)
            llvm::MetadataTracking::untrack((uint64_t)(v130 + 112), v386);
          v387 = (unsigned __int8 *)v717;
          *v383 = (unsigned __int8 *)v717;
          if (v387)
            llvm::MetadataTracking::retrack((uint64_t)&v717, v387, (uint64_t)(v130 + 112));
          goto LABEL_474;
        }
      }
      llvm::Value::setMetadata(v132, *(_DWORD *)v139, (llvm::MDNode *)v385);
LABEL_474:
      v139 += 16;
      if (v139 == v382)
      {
        v139 = (char *)v728;
        break;
      }
    }
  }
  v140 = a1;
  *(_WORD *)(*(_QWORD *)(a1 + 5992) + 18) = *(_WORD *)(*(_QWORD *)(a1 + 5992) + 18) & 0xFFC0 | 5;
  if (v139 != (char *)&v730)
    free(v139);
  v141 = *(unsigned int *)(a1 + 5952);
  if ((_DWORD)v141)
  {
    v142 = *(uint64_t **)(a1 + 5944);
    v663 = &v142[v141];
    while (1)
    {
      v678 = v142;
      v143 = *v142;
      sub_1C4773D54((uint64_t)&v728, *v142, 0, 0, 0);
      if ((unint64_t)(1 << *(_WORD *)(v143 + 18)) <= 0x20)
        v145 = 32;
      else
        v145 = 1 << *(_WORD *)(v143 + 18);
      v670 = llvm::Constant::getNullValue(*(llvm::Constant **)(v140 + 472), v144);
      v146 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v140 + 472), 32, 0);
      v147 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v140 + 472), 31, 0);
      v148 = *(_QWORD *)(*(_QWORD *)v140 + 40) + 272;
      v149 = *(_QWORD *)(v143 + 64);
      sub_1C4768AD0(v148, v149);
      v151 = v150;
      v153 = v152 == 1;
      llvm::DataLayout::getAlignment(v148, v149);
      v156 = v155;
      if (v153)
      v157 = (1 << v156) + 0xFFFFFFFFLL + ((unint64_t)(v151 + 7) >> 3);
      v673 = (uint64_t *)v143;
      v158 = *(unsigned __int8 **)(v143 - 32);
      v159 = *(_QWORD *)(v140 + 472);
      v756[0] = 257;
      v160 = sub_1C4D8D514((uint64_t *)&v728, v158, v159, 0, (uint64_t)&v752);
      v161 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v140 + 472), -(1 << v156) & v157, 0);
      LOWORD(v719) = 257;
      v162 = (_QWORD *)sub_1C4EC4040((uint64_t)&v728, (uint64_t)v160, (uint64_t)v161, (uint64_t)&v717, 0, 0);
      v756[0] = 257;
      v163 = sub_1C4D89BCC((uint64_t)&v728, v162, (uint64_t)v147, (uint64_t)&v752);
      v756[0] = 257;
      v164 = (uint64_t *)sub_1C47733F8((uint64_t)&v728, (uint64_t)v146, v163, (uint64_t)&v752, 0, 0);
      v756[0] = 257;
      v165 = sub_1C4774B48((uint64_t)&v728, 33, (uint64_t)v164, (uint64_t)v146, (uint64_t)&v752);
      v756[0] = 257;
      Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v728, v165, v164, (uint64_t)v670, (uint64_t)&v752, 0);
      v167 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v140 + 472), v145 + 32, 0);
      LOWORD(v719) = 257;
      v168 = (_QWORD *)(*(uint64_t (**)(void *, llvm::Value **, llvm::Value *, _QWORD, _QWORD))(*(_QWORD *)v736 + 16))(v736, v167, Select, 0, 0);
      v169 = v140;
      if (!v168)
      {
        v756[0] = 257;
        v170 = (char *)operator new(0x80uLL);
        v171 = v170;
        *(_QWORD *)v170 = 0;
        *((_QWORD *)v170 + 1) = 0;
        *((_QWORD *)v170 + 2) = 0;
        *((_QWORD *)v170 + 5) = 0;
        *((_QWORD *)v170 + 6) = 0;
        *((_QWORD *)v170 + 4) = 0;
        v172 = (llvm::Value **)(v170 + 32);
        *((_QWORD *)v170 + 8) = *v167;
        v168 = v170 + 64;
        *((_QWORD *)v170 + 3) = v170 + 64;
        *((_QWORD *)v170 + 7) = v170 + 64;
        *((_QWORD *)v170 + 9) = 0;
        v170[80] = 41;
        v170[81] = 0;
        *((_WORD *)v170 + 41) = 0;
        *((_DWORD *)v170 + 21) = 2;
        *((_DWORD *)v170 + 30) = 0;
        *(_OWORD *)(v170 + 104) = 0u;
        *(_OWORD *)(v170 + 88) = 0u;
        *(_QWORD *)v170 = v167;
        v175 = v167[1];
        v174 = v167 + 1;
        v173 = v175;
        *((_QWORD *)v170 + 1) = v175;
        if (v175)
          *((_QWORD *)v173 + 2) = v170 + 8;
        *((_QWORD *)v170 + 2) = v174;
        *v174 = v170;
        if (*((_QWORD *)v170 + 4))
        {
          **((_QWORD **)v170 + 6) = *((_QWORD *)v170 + 5);
          v253 = *((_QWORD *)v170 + 5);
          if (v253)
            *(_QWORD *)(v253 + 16) = *((_QWORD *)v170 + 6);
        }
        *v172 = Select;
        if (Select)
        {
          v178 = *((_QWORD *)Select + 1);
          v177 = (llvm::Value ***)((char *)Select + 8);
          v176 = v178;
          *((_QWORD *)v170 + 5) = v178;
          if (v178)
            *(_QWORD *)(v176 + 16) = v170 + 40;
          *((_QWORD *)v170 + 6) = v177;
          *v177 = v172;
        }
        llvm::Value::setName((uint64_t ***)v170 + 8, (uint64_t)&v752);
        (*(void (**)(uint64_t, _QWORD *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v737 + 16))(v737, v168, &v717, v733, v734);
        if ((_DWORD)__src)
        {
          v179 = (char *)v728;
          v180 = (char *)v728 + 16 * __src;
          v181 = (unsigned __int8 **)(v171 + 112);
          do
          {
            v182 = *(_DWORD *)v179;
            v183 = (unsigned __int8 *)*((_QWORD *)v179 + 1);
            if (v183)
            {
              if (!v182)
              {
                v698 = (void *)*((_QWORD *)v179 + 1);
                llvm::MetadataTracking::track((uint64_t)&v698, v183, 2);
                v184 = *v181;
                if (!*v181)
                {
LABEL_214:
                  v185 = (unsigned __int8 *)v698;
                  *v181 = (unsigned __int8 *)v698;
                  if (v185)
                    llvm::MetadataTracking::retrack((uint64_t)&v698, v185, (uint64_t)(v171 + 112));
                  goto LABEL_211;
                }
LABEL_208:
                llvm::MetadataTracking::untrack((uint64_t)(v171 + 112), v184);
                goto LABEL_214;
              }
            }
            else
            {
              v184 = *v181;
              if (!*v181 && (v171[87] & 0x20) == 0)
                goto LABEL_211;
              if (!v182)
              {
                v698 = 0;
                if (!v184)
                  goto LABEL_214;
                goto LABEL_208;
              }
            }
            llvm::Value::setMetadata((llvm::Value *)v168, *(_DWORD *)v179, (llvm::MDNode *)v183);
LABEL_211:
            v179 += 16;
          }
          while (v179 != v180);
        }
        v169 = a1;
      }
      LOWORD(v719) = 257;
      v186 = (llvm::Value *)(*(uint64_t (**)(void *, _QWORD *, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)v736
                                                                                                  + 16))(v736, v162, v168, 0, 0);
      if (!v186)
      {
        v756[0] = 257;
        v187 = (char *)operator new(0x80uLL);
        v188 = v187;
        *(_QWORD *)v187 = 0;
        *((_QWORD *)v187 + 2) = 0;
        *((_QWORD *)v187 + 1) = 0;
        *((_QWORD *)v187 + 5) = 0;
        *((_QWORD *)v187 + 6) = 0;
        *((_QWORD *)v187 + 4) = 0;
        v189 = v187 + 32;
        *((_QWORD *)v187 + 8) = *v162;
        v186 = (llvm::Value *)(v187 + 64);
        *((_QWORD *)v187 + 3) = v187 + 64;
        *((_QWORD *)v187 + 7) = v187 + 64;
        *((_QWORD *)v187 + 9) = 0;
        v187[80] = 41;
        v187[81] = 0;
        *((_WORD *)v187 + 41) = 0;
        *((_DWORD *)v187 + 21) = 2;
        *((_DWORD *)v187 + 30) = 0;
        *(_OWORD *)(v187 + 104) = 0u;
        *(_OWORD *)(v187 + 88) = 0u;
        *(_QWORD *)v187 = v162;
        v190 = v162 + 1;
        v191 = v162[1];
        *((_QWORD *)v187 + 1) = v191;
        if (v191)
          *(_QWORD *)(v191 + 16) = v187 + 8;
        *((_QWORD *)v187 + 2) = v190;
        *v190 = v187;
        if (*((_QWORD *)v187 + 4))
        {
          **((_QWORD **)v187 + 6) = *((_QWORD *)v187 + 5);
          v254 = *((_QWORD *)v187 + 5);
          if (v254)
            *(_QWORD *)(v254 + 16) = *((_QWORD *)v187 + 6);
        }
        *v189 = v168;
        if (v168)
        {
          v194 = v168[1];
          v193 = v168 + 1;
          v192 = v194;
          *((_QWORD *)v187 + 5) = v194;
          if (v194)
            *(_QWORD *)(v192 + 16) = v187 + 40;
          *((_QWORD *)v187 + 6) = v193;
          *v193 = v189;
        }
        llvm::Value::setName((uint64_t ***)v187 + 8, (uint64_t)&v752);
        (*(void (**)(uint64_t, llvm::Value *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v737 + 16))(v737, v186, &v717, v733, v734);
        if ((_DWORD)__src)
        {
          v195 = (char *)v728;
          v196 = (char *)v728 + 16 * __src;
          v197 = (unsigned __int8 **)(v188 + 112);
          do
          {
            v198 = *(_DWORD *)v195;
            v199 = (unsigned __int8 *)*((_QWORD *)v195 + 1);
            if (v199)
            {
              if (!v198)
              {
                v698 = (void *)*((_QWORD *)v195 + 1);
                llvm::MetadataTracking::track((uint64_t)&v698, v199, 2);
                v200 = *v197;
                if (!*v197)
                {
LABEL_238:
                  v201 = (unsigned __int8 *)v698;
                  *v197 = (unsigned __int8 *)v698;
                  if (v201)
                    llvm::MetadataTracking::retrack((uint64_t)&v698, v201, (uint64_t)(v188 + 112));
                  goto LABEL_235;
                }
LABEL_232:
                llvm::MetadataTracking::untrack((uint64_t)(v188 + 112), v200);
                goto LABEL_238;
              }
            }
            else
            {
              v200 = *v197;
              if (!*v197 && (v188[87] & 0x20) == 0)
                goto LABEL_235;
              if (!v198)
              {
                v698 = 0;
                if (!v200)
                  goto LABEL_238;
                goto LABEL_232;
              }
            }
            llvm::Value::setMetadata(v186, *(_DWORD *)v195, (llvm::MDNode *)v199);
LABEL_235:
            v195 += 16;
          }
          while (v195 != v196);
        }
        v169 = a1;
      }
      v202 = (llvm::PointerType *)(*(_QWORD *)v735 + 1912);
      v756[0] = 257;
      v203 = sub_1C486A5CC((uint64_t *)&v728, v202, v186, (uint64_t)&v752);
      *((_WORD *)v203 + 9) = *((_WORD *)v203 + 9) & 0xFFC0 | __clz(v145) ^ 0x3F;
      v204 = *(_QWORD *)(v169 + 472);
      LOWORD(v719) = 257;
      v205 = sub_1C4773E38((uint64_t *)&v728, 47, (unsigned __int8 *)v203, v204, (uint64_t)&v717);
      v206 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v169 + 472), v145, 0);
      v702 = 257;
      v207 = (llvm::Value *)(*(uint64_t (**)(void *, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v736 + 16))(v736, v205, v206, 0, 0);
      if (!v207)
      {
        v756[0] = 257;
        v208 = (char *)operator new(0x80uLL);
        v209 = v208;
        *(_QWORD *)v208 = 0;
        *((_QWORD *)v208 + 1) = 0;
        *((_QWORD *)v208 + 2) = 0;
        *((_QWORD *)v208 + 5) = 0;
        *((_QWORD *)v208 + 6) = 0;
        *((_QWORD *)v208 + 4) = 0;
        v210 = (llvm::Value ***)(v208 + 32);
        *((_QWORD *)v208 + 8) = *(_QWORD *)v205;
        v207 = (llvm::Value *)(v208 + 64);
        *((_QWORD *)v208 + 3) = v208 + 64;
        *((_QWORD *)v208 + 7) = v208 + 64;
        *((_QWORD *)v208 + 9) = 0;
        v208[80] = 41;
        v208[81] = 0;
        *((_WORD *)v208 + 41) = 0;
        *((_DWORD *)v208 + 21) = 2;
        *((_DWORD *)v208 + 30) = 0;
        *(_OWORD *)(v208 + 104) = 0u;
        *(_OWORD *)(v208 + 88) = 0u;
        *(_QWORD *)v208 = v205;
        v213 = *((_QWORD *)v205 + 1);
        v212 = v205 + 8;
        v211 = v213;
        *((_QWORD *)v208 + 1) = v213;
        if (v213)
          *(_QWORD *)(v211 + 16) = v208 + 8;
        *((_QWORD *)v208 + 2) = v212;
        *v212 = v208;
        if (*((_QWORD *)v208 + 4))
        {
          **((_QWORD **)v208 + 6) = *((_QWORD *)v208 + 5);
          v255 = *((_QWORD *)v208 + 5);
          if (v255)
            *(_QWORD *)(v255 + 16) = *((_QWORD *)v208 + 6);
        }
        *v210 = v206;
        if (v206)
        {
          v216 = v206[1];
          v215 = (llvm::Value ****)(v206 + 1);
          v214 = v216;
          *((_QWORD *)v208 + 5) = v216;
          if (v216)
            *((_QWORD *)v214 + 2) = v208 + 40;
          *((_QWORD *)v208 + 6) = v215;
          *v215 = v210;
        }
        llvm::Value::setName((uint64_t ***)v208 + 8, (uint64_t)&v752);
        (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v737 + 16))(v737, v207, &v698, v733, v734);
        if ((_DWORD)__src)
        {
          v217 = (char *)v728;
          v218 = (char *)v728 + 16 * __src;
          v219 = (unsigned __int8 **)(v209 + 112);
          do
          {
            v220 = *(_DWORD *)v217;
            v221 = (unsigned __int8 *)*((_QWORD *)v217 + 1);
            if (v221)
            {
              if (!v220)
              {
                v693[0] = *((void **)v217 + 1);
                llvm::MetadataTracking::track((uint64_t)v693, v221, 2);
                v222 = *v219;
                if (!*v219)
                {
LABEL_262:
                  v223 = (unsigned __int8 *)v693[0];
                  *v219 = (unsigned __int8 *)v693[0];
                  if (v223)
                    llvm::MetadataTracking::retrack((uint64_t)v693, v223, (uint64_t)(v209 + 112));
                  goto LABEL_259;
                }
LABEL_256:
                llvm::MetadataTracking::untrack((uint64_t)(v209 + 112), v222);
                goto LABEL_262;
              }
            }
            else
            {
              v222 = *v219;
              if (!*v219 && (v209[87] & 0x20) == 0)
                goto LABEL_259;
              if (!v220)
              {
                v693[0] = 0;
                if (!v222)
                  goto LABEL_262;
                goto LABEL_256;
              }
            }
            llvm::Value::setMetadata(v207, *(_DWORD *)v217, (llvm::MDNode *)v221);
LABEL_259:
            v217 += 16;
          }
          while (v217 != v218);
        }
        v169 = a1;
      }
      v224 = *(uint64_t ***)(v169 + 5360);
      v225 = *(_QWORD *)(v169 + 5368);
      *(_QWORD *)&v717 = v207;
      *((_QWORD *)&v717 + 1) = v162;
      v756[0] = 257;
      sub_1C4774778((uint64_t *)&v728, v224, v225, (uint64_t *)&v717, 2, (uint64_t)&v752, 0);
      v226 = *(_QWORD *)(v169 + 472);
      LOWORD(v719) = 257;
      v227 = (uint64_t *)sub_1C4773E38((uint64_t *)&v728, 47, (unsigned __int8 *)v203, v226, (uint64_t)&v717);
      v228 = *(_QWORD *)(v169 + 5992);
      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v733 + 56) + 40) + 272, *v227);
      v230 = v229;
      v231 = (char *)operator new(0x80uLL);
      v232 = v231;
      *((_DWORD *)v231 + 21) = *((_DWORD *)v231 + 21) & 0x38000000 | 2;
      *(_QWORD *)v231 = 0;
      *((_QWORD *)v231 + 2) = 0;
      *((_QWORD *)v231 + 1) = 0;
      *((_QWORD *)v231 + 5) = 0;
      *((_QWORD *)v231 + 6) = 0;
      *((_QWORD *)v231 + 4) = 0;
      v233 = v231 + 32;
      *((_QWORD *)v231 + 8) = **(_QWORD **)*v227 + 1576;
      v234 = (llvm::Value *)(v231 + 64);
      *((_QWORD *)v231 + 3) = v231 + 64;
      *((_QWORD *)v231 + 7) = v231 + 64;
      *((_QWORD *)v231 + 9) = 0;
      v231[80] = 61;
      v231[81] = 0;
      *((_WORD *)v231 + 41) = 0;
      *((_DWORD *)v231 + 21) = 2;
      *(_OWORD *)(v231 + 88) = 0u;
      *(_OWORD *)(v231 + 104) = 0u;
      *((_DWORD *)v231 + 30) = 0;
      *(_QWORD *)v231 = v227;
      v237 = v227[1];
      v236 = v227 + 1;
      v235 = v237;
      *((_QWORD *)v231 + 1) = v237;
      if (v237)
        *(_QWORD *)(v235 + 16) = v231 + 8;
      *((_QWORD *)v231 + 2) = v236;
      *v236 = v231;
      if (*((_QWORD *)v231 + 4))
      {
        **((_QWORD **)v231 + 6) = *((_QWORD *)v231 + 5);
        v252 = *((_QWORD *)v231 + 5);
        if (v252)
          *(_QWORD *)(v252 + 16) = *((_QWORD *)v231 + 6);
      }
      *v233 = v228;
      if (v228)
      {
        v240 = *(_QWORD *)(v228 + 8);
        v239 = (_QWORD *)(v228 + 8);
        v238 = v240;
        *((_QWORD *)v231 + 5) = v240;
        if (v240)
          *(_QWORD *)(v238 + 16) = v231 + 40;
        *((_QWORD *)v231 + 6) = v239;
        *v239 = v233;
      }
      *((_WORD *)v231 + 41) = 2 * (v230 & 0x3F);
      v231[124] = 1;
      v756[0] = 257;
      (*(void (**)(uint64_t, llvm::Value *, const char ***, uint64_t, uint64_t))(*(_QWORD *)v737 + 16))(v737, v234, &v752, v733, v734);
      if ((_DWORD)__src)
        break;
LABEL_273:
      v241 = *v673;
      v756[0] = 257;
      v242 = sub_1C4773E38((uint64_t *)&v728, 48, (unsigned __int8 *)v207, v241, (uint64_t)&v752);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v673, (llvm::Value *)v242, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v673[5] + 40, (uint64_t ***)v673);
      v243 = v673[3];
      v244 = (uint64_t *)v673[4];
      *v244 = v243;
      *(_QWORD *)(v243 + 8) = v244;
      v673[3] = 0;
      v673[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v673);
      if (v728 != &v730)
        free(v728);
      v140 = a1;
      v142 = v678 + 1;
      if (v678 + 1 == v663)
        goto LABEL_300;
    }
    v245 = (char *)v728;
    v246 = (char *)v728 + 16 * __src;
    v247 = (unsigned __int8 **)(v232 + 112);
    while (1)
    {
      v248 = *(_DWORD *)v245;
      v249 = (unsigned __int8 *)*((_QWORD *)v245 + 1);
      if (v249)
      {
        if (!v248)
        {
          v698 = (void *)*((_QWORD *)v245 + 1);
          llvm::MetadataTracking::track((uint64_t)&v698, v249, 2);
          v250 = *v247;
          goto LABEL_288;
        }
      }
      else
      {
        v250 = *v247;
        if (!*v247 && (v232[87] & 0x20) == 0)
          goto LABEL_285;
        if (!v248)
        {
          v698 = 0;
LABEL_288:
          if (v250)
            llvm::MetadataTracking::untrack((uint64_t)(v232 + 112), v250);
          v251 = (unsigned __int8 *)v698;
          *v247 = (unsigned __int8 *)v698;
          if (v251)
            llvm::MetadataTracking::retrack((uint64_t)&v698, v251, (uint64_t)(v232 + 112));
          goto LABEL_285;
        }
      }
      llvm::Value::setMetadata(v234, *(_DWORD *)v245, (llvm::MDNode *)v249);
LABEL_285:
      v245 += 16;
      if (v245 == v246)
        goto LABEL_273;
    }
  }
LABEL_300:
  v256 = *(unsigned int *)(v140 + 808);
  if ((_DWORD)v256)
  {
    v257 = *(uint64_t **)(v140 + 800);
    v258 = 8 * v256;
    do
    {
      v259 = *v257++;
      sub_1C586E094((_QWORD *)v140, v259, *(unsigned __int8 **)(v140 + 5992));
      v258 -= 8;
    }
    while (v258);
  }
  v260 = *(unsigned int *)(v140 + 5976);
  if ((_DWORD)v260)
  {
    v261 = *(uint64_t **)(a1 + 5968);
    v262 = 8 * v260;
    do
    {
      v263 = *v261;
      v264 = *(_DWORD *)(*v261 + 20);
      if ((v264 & 0x40000000) != 0)
        v265 = *(unsigned __int8 ***)(v263 - 8);
      else
        v265 = (unsigned __int8 **)(v263 - 32 * (v264 & 0x7FFFFFF));
      sub_1C586E094((_QWORD *)a1, v263, *v265);
      ++v261;
      v262 -= 8;
    }
    while (v262);
  }
LABEL_309:
  if (*(_DWORD *)(a1 + 520))
  {
    v691 = 0;
    v268 = *(uint64_t ****)a1;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 23) & 0x20) == 0)
    {
LABEL_340:
      v287 = **(llvm::Instruction ***)(a1 + 512);
      sub_1C4773D54((uint64_t)&v752, (uint64_t)v287, 0, 0, 0);
      v288 = *(unsigned int *)(a1 + 664);
      if ((_DWORD)v288)
      {
        v289 = *((_QWORD *)v287 + 5);
        v290 = *(llvm::Instruction ***)(a1 + 656);
        v291 = 8 * v288;
        do
        {
          if (*((_QWORD *)*v290 + 5) == v289)
            llvm::Instruction::moveBefore(*v290, v287);
          ++v290;
          v291 -= 8;
        }
        while (v291);
      }
      v749 = v751;
      v750 = 0x800000000;
      v292 = *(_QWORD *)(a1 + 8);
      NextNonDebugInstruction = llvm::Instruction::getNextNonDebugInstruction(v287, 0);
      if (NextNonDebugInstruction)
      {
        v318 = (unsigned __int8 *)NextNonDebugInstruction;
        do
        {
          v319 = v318[16];
          if (v319 != 59 && (v319 - 66) >= 0xD)
          {
            if (v319 != 61)
              break;
            v321 = *((_QWORD *)v318 - 4);
            if (v321 && *(_BYTE *)(v321 + 16) == 59 && !sub_1C586C2B4(v292, v321))
            {
              v322 = (_QWORD *)*((_QWORD *)v318 - 8);
              v323 = *((unsigned __int8 *)v322 + 16);
              v324 = v323 < 0x1C || v323 - 66 > 0xC;
              v325 = !v324
                  && *(_BYTE *)(*(v322 - 4) + 16) == 21
                  && v322 == llvm::Instruction::getPrevNonDebugInstruction((llvm::Instruction *)v318, 0);
              if (v323 == 21 || v325)
              {
                v327 = v750;
                if (v325)
                {
                  if (v750 >= HIDWORD(v750))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v749, (uint64_t)v751, v750 + 1, 8);
                    v327 = v750;
                  }
                  *((_QWORD *)v749 + v327) = v322;
                  v327 = v750 + 1;
                  LODWORD(v750) = v750 + 1;
                }
                if (v327 >= HIDWORD(v750))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v749, (uint64_t)v751, v327 + 1, 8);
                  v327 = v750;
                }
                *((_QWORD *)v749 + v327) = v318;
                LODWORD(v750) = v750 + 1;
              }
            }
          }
          v318 = (unsigned __int8 *)llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)v318, 0);
        }
        while (v318);
      }
      if ((_DWORD)v750)
      {
        v295 = (llvm::Instruction **)v749;
        v296 = 8 * v750;
        do
        {
          v297 = *v295++;
          llvm::Instruction::moveBefore(v297, v287);
          v296 -= 8;
        }
        while (v296);
      }
      v298 = a1;
      v299 = *(llvm::Instruction **)(a1 + 6000);
      if (v299)
        llvm::Instruction::moveBefore(v299, v287);
      v728 = &v730;
      v294.n128_u64[0] = 0x1000000000;
      __src = (void *)0x1000000000;
      v300 = *(unsigned int *)(a1 + 520);
      if (v300 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v728, (uint64_t)&v730, v300, 56);
        LODWORD(v300) = *(_DWORD *)(a1 + 520);
      }
      if (!(_DWORD)v300)
      {
LABEL_354:
        v301 = 1 << *(_DWORD *)(v298 + 488);
        if ((unint64_t)*(int *)(*(_QWORD *)(v298 + 8) + 56) >> 1 <= v301)
          v302 = 1 << *(_DWORD *)(v298 + 488);
        else
          v302 = (unint64_t)*(int *)(*(_QWORD *)(v298 + 8) + 56) >> 1;
        llvm::ComputeASanStackFrameLayout((unsigned int *)&v728, v301, v302, v689, v294);
        v687[0] = 0;
        v687[1] = 0;
        v688 = 0;
        if ((_DWORD)__src)
        {
          v303 = (uint64_t *)v728;
          v304 = 56 * __src;
          do
          {
            sub_1C6180A54((uint64_t)v687, v303 + 4)[1] = v303;
            v303 += 7;
            v304 -= 56;
          }
          while (v304);
        }
        v305 = *(unsigned int *)(a1 + 5672);
        if ((_DWORD)v305)
        {
          v306 = 32 * v305;
          v307 = (uint64_t *)(*(_QWORD *)(a1 + 5664) + 8);
          do
          {
            v308 = sub_1C6180A54((uint64_t)v687, v307)[1];
            *(_QWORD *)(v308 + 16) = *(_QWORD *)(v308 + 8);
            if (v691)
            {
              v309 = *(_QWORD *)(*(v307 - 1) + 48);
              if (v309)
              {
                v310 = *(_QWORD *)(v309 - 8 * *(unsigned int *)(v309 + 8));
                if (*(_BYTE *)v310 != 15)
                  v310 = *(_QWORD *)(v310 - 8 * *(unsigned int *)(v310 + 8));
                v311 = *(_QWORD *)&v691[-8 * *((unsigned int *)v691 + 2)];
                if (*(_BYTE *)v311 != 15)
                  v311 = *(_QWORD *)(v311 - 8 * *(unsigned int *)(v311 + 8));
                if (v310 == v311)
                {
                  v312 = *(_DWORD *)(v309 + 4);
                  if (v312)
                  {
                    v313 = *(_DWORD *)(v308 + 48);
                    if (!v313)
                      v313 = v312;
                    if (v312 >= v313)
                      v312 = v313;
                    *(_DWORD *)(v308 + 48) = v312;
                  }
                }
              }
            }
            v307 += 4;
            v306 -= 32;
          }
          while (v306);
        }
        llvm::ComputeASanStackFrameDescription((unsigned int *)&v728, (uint64_t)v726);
        v314 = v690;
        v315 = a1;
        v316 = *(_QWORD *)(a1 + 8);
        if (*(_DWORD *)(v316 + 64))
        {
          if (*(_BYTE *)(v316 + 60))
            v347 = 1;
          else
            v347 = v690 > 0x10000;
          v317 = !v347;
        }
        else
        {
          v317 = 0;
        }
        v662 = (llvm::Type *)v690;
        if (v667[72])
        {
          v350 = sub_1C586E544(a1, (uint64_t)&v752, (uint64_t)v689, 0);
        }
        else
        {
          if (v667[73])
            v348 = 0;
          else
            v348 = byte_1EF8F43B0 != 0;
          if (v667[73])
            v349 = 0;
          else
            v349 = v317;
          if (v348)
          {
            if (v349)
            {
              v350 = 0;
              v315 = a1;
LABEL_445:
              v672 = v350;
              v354 = *(llvm::PointerType **)(v315 + 472);
              *(_QWORD *)&v717 = "asan_local_stack_base";
              LOWORD(v719) = 259;
              v355 = sub_1C486A5CC((uint64_t *)&v752, v354, 0, (uint64_t)&v717);
              v350 = (unsigned __int8 *)v355;
              v356 = v315;
              if (*(_DWORD *)(*(_QWORD *)(v315 + 8) + 64) != 1)
              {
                if (v314 < 0x41)
                {
                  v352 = 0;
                }
                else
                {
                  v352 = 0;
                  for (j = 64; j < v314; j *= 2)
                    ++v352;
                }
                v388 = v315 + 16 * v352;
                v389 = *(uint64_t ***)(v388 + 880);
                v390 = *(_QWORD *)(v388 + 888);
                v698 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v356 + 472), v314, 0);
                LOWORD(v719) = 257;
                v380 = sub_1C4774778((uint64_t *)&v752, v389, v390, (uint64_t *)&v698, 1, (uint64_t)&v717, 0);
LABEL_484:
                v391 = llvm::Constant::getNullValue(*(llvm::Constant **)(v356 + 472), v379);
                LOWORD(v719) = 257;
                v666 = (llvm::Value **)v380;
                v392 = (llvm::Value *)sub_1C4774B48((uint64_t)&v752, 32, v380, (uint64_t)v391, (uint64_t)&v717);
                v393 = sub_1C5EBFBC0(v392, (uint64_t *)v287, 0, 0, 0, 0, 0, 0);
                sub_1C4773D54((uint64_t)&v717, (uint64_t)v393, 0, 0, 0);
                if (v348)
                  v672 = sub_1C586E544(v356, (uint64_t)&v717, (uint64_t)v689, 1);
                v757 = *((_QWORD *)v287 + 5);
                v758 = (_QWORD *)((char *)v287 + 24);
                v394 = (void *)*((_QWORD *)v287 + 6);
                v698 = v394;
                if (v394)
                {
                  llvm::MetadataTracking::track((uint64_t)&v698, (unsigned __int8 *)v394, 2);
                  v395 = v698;
                }
                else
                {
                  v395 = 0;
                }
                sub_1C4774EF4((uint64_t)&v752, 0, (uint64_t)v395);
                if (v698)
                  llvm::MetadataTracking::untrack((uint64_t)&v698, (unsigned __int8 *)v698);
                v396 = (uint64_t *)sub_1C586E6C4(*(_QWORD *)(v356 + 472), (uint64_t)&v752, (uint64_t)v392, (uint64_t)v672, (uint64_t)v393, (uint64_t)v666);
                llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v757 + 56) + 40) + 272, *v396);
                v398 = v397;
                v399 = (char *)operator new(0x80uLL);
                v400 = v399;
                *((_DWORD *)v399 + 21) = *((_DWORD *)v399 + 21) & 0x38000000 | 2;
                *(_QWORD *)v399 = 0;
                *((_QWORD *)v399 + 2) = 0;
                *((_QWORD *)v399 + 1) = 0;
                *((_QWORD *)v399 + 5) = 0;
                *((_QWORD *)v399 + 6) = 0;
                *((_QWORD *)v399 + 4) = 0;
                v401 = (unsigned __int8 **)(v399 + 32);
                *((_QWORD *)v399 + 8) = **(_QWORD **)*v396 + 1576;
                v402 = (llvm::Value *)(v399 + 64);
                *((_QWORD *)v399 + 3) = v399 + 64;
                *((_QWORD *)v399 + 7) = v399 + 64;
                *((_QWORD *)v399 + 9) = 0;
                v399[80] = 61;
                v399[81] = 0;
                *((_WORD *)v399 + 41) = 0;
                *((_DWORD *)v399 + 21) = 2;
                *(_OWORD *)(v399 + 88) = 0u;
                *(_OWORD *)(v399 + 104) = 0u;
                *((_DWORD *)v399 + 30) = 0;
                *(_QWORD *)v399 = v396;
                v671 = (char *)v396;
                v405 = v396[1];
                v404 = v396 + 1;
                v403 = v405;
                *((_QWORD *)v399 + 1) = v405;
                if (v405)
                  *(_QWORD *)(v403 + 16) = v399 + 8;
                *((_QWORD *)v399 + 2) = v404;
                *v404 = v399;
                if (*((_QWORD *)v399 + 4))
                {
                  **((_QWORD **)v399 + 6) = *((_QWORD *)v399 + 5);
                  v656 = *((_QWORD *)v399 + 5);
                  if (v656)
                    *(_QWORD *)(v656 + 16) = *((_QWORD *)v399 + 6);
                }
                *v401 = v350;
                if (v350)
                {
                  v406 = (unsigned __int8 ***)(v350 + 8);
                  v407 = *((_QWORD *)v350 + 1);
                  *((_QWORD *)v399 + 5) = v407;
                  if (v407)
                    *(_QWORD *)(v407 + 16) = v399 + 40;
                  *((_QWORD *)v399 + 6) = v406;
                  *v406 = v401;
                }
                *((_WORD *)v399 + 41) = 2 * (v398 & 0x3F);
                v399[124] = 1;
                v702 = 257;
                (*(void (**)(_QWORD *, llvm::Value *, void **, uint64_t, _QWORD *))(*v761 + 16))(v761, v402, &v698, v757, v758);
                if (!(_DWORD)v753)
                {
LABEL_498:
                  if ((__int128 *)v717 != &v718)
                    free((void *)v717);
                  v351 = 1;
                  v353 = a1;
                  goto LABEL_501;
                }
                v643 = v752;
                v644 = &v752[2 * v753];
                v645 = (unsigned __int8 **)(v400 + 112);
                while (1)
                {
                  v646 = *(_DWORD *)v643;
                  v647 = (unsigned __int8 *)v643[1];
                  if (v647)
                  {
                    if (!v646)
                    {
                      v693[0] = (void *)v643[1];
                      llvm::MetadataTracking::track((uint64_t)v693, v647, 2);
                      v648 = *v645;
                      goto LABEL_832;
                    }
                  }
                  else
                  {
                    v648 = *v645;
                    if (!*v645 && (v400[87] & 0x20) == 0)
                      goto LABEL_829;
                    if (!v646)
                    {
                      v693[0] = 0;
LABEL_832:
                      if (v648)
                        llvm::MetadataTracking::untrack((uint64_t)(v400 + 112), v648);
                      v649 = (unsigned __int8 *)v693[0];
                      *v645 = (unsigned __int8 *)v693[0];
                      if (v649)
                        llvm::MetadataTracking::retrack((uint64_t)v693, v649, (uint64_t)(v400 + 112));
                      goto LABEL_829;
                    }
                  }
                  llvm::Value::setMetadata(v402, *(_DWORD *)v643, (llvm::MDNode *)v647);
LABEL_829:
                  v643 += 2;
                  if (v643 == v644)
                    goto LABEL_498;
                }
              }
              v674 = v348;
              v679 = (unsigned __int8 *)v355;
              inserted = llvm::Module::getOrInsertGlobal(*(_QWORD *)(*(_QWORD *)v315 + 40), "__asan_option_detect_stack_use_after_return", 0x2BuLL, (llvm::PointerType *)(*(_QWORD *)v759 + 1960));
              v358 = *(_QWORD *)v759 + 1960;
              v702 = 257;
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v757 + 56) + 40) + 272, v358);
              v360 = v359;
              v361 = (char *)operator new(0x60uLL);
              v362 = v361;
              v363 = (llvm::Value *)(v361 + 32);
              *((_QWORD *)v361 + 2) = 0;
              *((_QWORD *)v361 + 3) = v361 + 32;
              LOWORD(v719) = 257;
              *((_QWORD *)v361 + 4) = v358;
              *((_QWORD *)v361 + 5) = 0;
              *((_WORD *)v361 + 24) = 60;
              *((_DWORD *)v361 + 13) = 1;
              *(_OWORD *)(v361 + 56) = 0u;
              *(_OWORD *)(v361 + 72) = 0u;
              *((_DWORD *)v361 + 22) = 0;
              *(_QWORD *)v361 = inserted;
              *((_QWORD *)v361 + 1) = 0;
              if (inserted)
              {
                v366 = *((_QWORD *)inserted + 1);
                v365 = (_QWORD *)((char *)inserted + 8);
                v364 = v366;
                *((_QWORD *)v361 + 1) = v366;
                if (v366)
                  *(_QWORD *)(v364 + 16) = v361 + 8;
                *((_QWORD *)v361 + 2) = v365;
                *v365 = v361;
              }
              *((_WORD *)v361 + 25) = 2 * (v360 & 0x3F);
              v361[92] = 1;
              llvm::Value::setName((uint64_t ***)v361 + 4, (uint64_t)&v717);
              (*(void (**)(_QWORD *, llvm::Value *, void **, uint64_t, _QWORD *))(*v761 + 16))(v761, v363, &v698, v757, v758);
              if (!(_DWORD)v753)
              {
LABEL_451:
                v368 = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v759 + 1960), v367);
                LOWORD(v719) = 257;
                v369 = (llvm::Value *)sub_1C4774B48((uint64_t)&v752, 33, (uint64_t)v363, (uint64_t)v368, (uint64_t)&v717);
                v370 = sub_1C5EBFBC0(v369, (uint64_t *)v287, 0, 0, 0, 0, 0, 0);
                sub_1C4773D54((uint64_t)&v717, (uint64_t)v370, 0, 0, 0);
                v352 = 0;
                if (v314 >= 0x41)
                {
                  v352 = 0;
                  for (k = 64; k < v314; k *= 2)
                    ++v352;
                }
                v372 = a1 + 16 * v352;
                v373 = *(uint64_t ***)(v372 + 880);
                v374 = *(_QWORD *)(v372 + 888);
                v693[0] = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), v314, 0);
                v702 = 257;
                v375 = sub_1C4774778((uint64_t *)&v717, v373, v374, (uint64_t *)v693, 1, (uint64_t)&v698, 0);
                v376 = 0;
                v757 = *((_QWORD *)v287 + 5);
                v758 = (_QWORD *)((char *)v287 + 24);
                v377 = (void *)*((_QWORD *)v287 + 6);
                v698 = v377;
                v348 = v674;
                if (v377)
                {
                  llvm::MetadataTracking::track((uint64_t)&v698, (unsigned __int8 *)v377, 2);
                  v376 = v698;
                }
                sub_1C4774EF4((uint64_t)&v752, 0, (uint64_t)v376);
                if (v698)
                  llvm::MetadataTracking::untrack((uint64_t)&v698, (unsigned __int8 *)v698);
                v356 = a1;
                v378 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), 0, 0);
                v380 = (uint64_t)sub_1C586E6C4(*(_QWORD *)(a1 + 472), (uint64_t)&v752, (uint64_t)v369, v375, (uint64_t)v370, (uint64_t)v378);
                if ((__int128 *)v717 != &v718)
                  free((void *)v717);
                v350 = v679;
                goto LABEL_484;
              }
              v638 = v752;
              v639 = &v752[2 * v753];
              v640 = (llvm::Type **)(v362 + 80);
              v314 = (unint64_t)v662;
              while (1)
              {
                v641 = *(_DWORD *)v638;
                v642 = (unsigned __int8 *)v638[1];
                if (v642)
                {
                  if (!v641)
                  {
                    v693[0] = (void *)v638[1];
                    llvm::MetadataTracking::track((uint64_t)v693, v642, 2);
                    v367 = *v640;
                    goto LABEL_817;
                  }
                }
                else
                {
                  v367 = *v640;
                  if (!*v640 && (v362[55] & 0x20) == 0)
                    goto LABEL_814;
                  if (!v641)
                  {
                    v693[0] = 0;
LABEL_817:
                    if (v367)
                      llvm::MetadataTracking::untrack((uint64_t)(v362 + 80), (unsigned __int8 *)v367);
                    v367 = (llvm::Type *)v693[0];
                    *v640 = (llvm::Type *)v693[0];
                    if (v367)
                      llvm::MetadataTracking::retrack((uint64_t)v693, (unsigned __int8 *)v367, (uint64_t)(v362 + 80));
                    goto LABEL_814;
                  }
                }
                llvm::Value::setMetadata(v363, *(_DWORD *)v638, (llvm::MDNode *)v642);
LABEL_814:
                v638 += 2;
                if (v638 == v639)
                  goto LABEL_451;
              }
            }
            v353 = a1;
            v666 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), 0, 0);
            v350 = sub_1C586E544(a1, (uint64_t)&v752, (uint64_t)v689, 1);
            v351 = 0;
            v352 = -1;
            v671 = (char *)v350;
LABEL_501:
            v664 = v352;
            if (v350[16] == 75)
              v350 = (unsigned __int8 *)*((_QWORD *)v350 - 4);
            v408 = (unsigned __int8 *)v671;
            v675 = v351;
            if (!(_DWORD)__src)
            {
LABEL_504:
              v409 = *(_QWORD *)(v353 + 480);
              LOWORD(v719) = 257;
              v668 = sub_1C4773E38((uint64_t *)&v752, 48, v408, v409, (uint64_t)&v717);
              v410 = (uint64_t *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(v353 + 472), 1102416563, 0);
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v757 + 56) + 40) + 272, *v410);
              v412 = v411;
              v413 = (char *)operator new(0x80uLL);
              v414 = v413;
              *((_DWORD *)v413 + 21) = *((_DWORD *)v413 + 21) & 0x38000000 | 2;
              *(_QWORD *)v413 = 0;
              *((_QWORD *)v413 + 2) = 0;
              *((_QWORD *)v413 + 1) = 0;
              *((_QWORD *)v413 + 5) = 0;
              *((_QWORD *)v413 + 6) = 0;
              *((_QWORD *)v413 + 4) = 0;
              v415 = (unsigned __int8 **)(v413 + 32);
              *((_QWORD *)v413 + 8) = **(_QWORD **)*v410 + 1576;
              v416 = (llvm::Value *)(v413 + 64);
              *((_QWORD *)v413 + 3) = v413 + 64;
              *((_QWORD *)v413 + 7) = v413 + 64;
              *((_QWORD *)v413 + 9) = 0;
              v413[80] = 61;
              v413[81] = 0;
              *((_WORD *)v413 + 41) = 0;
              *((_DWORD *)v413 + 21) = 2;
              *(_OWORD *)(v413 + 88) = 0u;
              *(_OWORD *)(v413 + 104) = 0u;
              *((_DWORD *)v413 + 30) = 0;
              *(_QWORD *)v413 = v410;
              v419 = v410[1];
              v418 = v410 + 1;
              v417 = v419;
              *((_QWORD *)v413 + 1) = v419;
              if (v419)
                *(_QWORD *)(v417 + 16) = v413 + 8;
              *((_QWORD *)v413 + 2) = v418;
              *v418 = v413;
              if (*((_QWORD *)v413 + 4))
              {
                **((_QWORD **)v413 + 6) = *((_QWORD *)v413 + 5);
                v651 = *((_QWORD *)v413 + 5);
                if (v651)
                  *(_QWORD *)(v651 + 16) = *((_QWORD *)v413 + 6);
              }
              *v415 = v668;
              if (v668)
              {
                v420 = (unsigned __int8 ***)(v668 + 8);
                v421 = *((_QWORD *)v668 + 1);
                *((_QWORD *)v413 + 5) = v421;
                if (v421)
                  *(_QWORD *)(v421 + 16) = v413 + 40;
                *((_QWORD *)v413 + 6) = v420;
                *v420 = v415;
              }
              *((_WORD *)v413 + 41) = 2 * (v412 & 0x3F);
              v413[124] = 1;
              LOWORD(v719) = 257;
              (*(void (**)(_QWORD *, llvm::Value *, __int128 *, uint64_t, _QWORD *))(*v761 + 16))(v761, v416, &v717, v757, v758);
              if (!(_DWORD)v753)
              {
LABEL_512:
                v422 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), (uint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56)+ (*(int *)(*(_QWORD *)(a1 + 8) + 56) < 0 ? 7 : 0)) >> 3, 0);
                v702 = 257;
                v423 = (unsigned __int8 *)(*((uint64_t (**)(void **, char *, llvm::Value **, _QWORD, _QWORD))*v760
                                           + 2))(v760, v671, v422, 0, 0);
                if (v423)
                  goto LABEL_521;
                LOWORD(v719) = 257;
                v424 = (char *)operator new(0x80uLL);
                v425 = v424;
                *(_QWORD *)v424 = 0;
                *((_QWORD *)v424 + 2) = 0;
                *((_QWORD *)v424 + 1) = 0;
                *((_QWORD *)v424 + 5) = 0;
                *((_QWORD *)v424 + 6) = 0;
                *((_QWORD *)v424 + 4) = 0;
                v426 = (llvm::Value ***)(v424 + 32);
                *((_QWORD *)v424 + 8) = *(_QWORD *)v671;
                v423 = (unsigned __int8 *)(v424 + 64);
                *((_QWORD *)v424 + 3) = v424 + 64;
                *((_QWORD *)v424 + 7) = v424 + 64;
                *((_QWORD *)v424 + 9) = 0;
                v424[80] = 41;
                v424[81] = 0;
                *((_WORD *)v424 + 41) = 0;
                *((_DWORD *)v424 + 21) = 2;
                *((_DWORD *)v424 + 30) = 0;
                *(_OWORD *)(v424 + 104) = 0u;
                *(_OWORD *)(v424 + 88) = 0u;
                *(_QWORD *)v424 = v671;
                v427 = v671 + 8;
                v428 = *((_QWORD *)v671 + 1);
                *((_QWORD *)v424 + 1) = v428;
                if (v428)
                  *(_QWORD *)(v428 + 16) = v424 + 8;
                *((_QWORD *)v424 + 2) = v427;
                *v427 = v424;
                if (*((_QWORD *)v424 + 4))
                {
                  **((_QWORD **)v424 + 6) = *((_QWORD *)v424 + 5);
                  v654 = *((_QWORD *)v424 + 5);
                  if (v654)
                    *(_QWORD *)(v654 + 16) = *((_QWORD *)v424 + 6);
                }
                *v426 = v422;
                if (v422)
                {
                  v431 = v422[1];
                  v430 = (llvm::Value ****)(v422 + 1);
                  v429 = v431;
                  *((_QWORD *)v424 + 5) = v431;
                  if (v431)
                    *((_QWORD *)v429 + 2) = v424 + 40;
                  *((_QWORD *)v424 + 6) = v430;
                  *v430 = v426;
                }
                llvm::Value::setName((uint64_t ***)v424 + 8, (uint64_t)&v717);
                (*(void (**)(_QWORD *, unsigned __int8 *, void **, uint64_t, _QWORD *))(*v761 + 16))(v761, v423, &v698, v757, v758);
                if (!(_DWORD)v753)
                {
LABEL_521:
                  v432 = *(_QWORD *)(a1 + 480);
                  LOWORD(v719) = 257;
                  v433 = sub_1C4773E38((uint64_t *)&v752, 48, v423, v432, (uint64_t)&v717);
                  PrivateGlobalForString = (unsigned __int8 *)llvm::createPrivateGlobalForString(*(uint64_t **)(*(_QWORD *)a1 + 40), (char *)v726[0], (llvm::Type *)v726[1], 1, "___asan_gen_");
                  v435 = *(_QWORD *)(a1 + 472);
                  LOWORD(v719) = 257;
                  v436 = (uint64_t *)sub_1C5098D9C((uint64_t *)&v752, PrivateGlobalForString, v435, (uint64_t)&v717);
                  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v757 + 56) + 40) + 272, *v436);
                  v438 = v437;
                  v439 = (char *)operator new(0x80uLL);
                  v440 = v439;
                  *((_DWORD *)v439 + 21) = *((_DWORD *)v439 + 21) & 0x38000000 | 2;
                  *(_QWORD *)v439 = 0;
                  *((_QWORD *)v439 + 2) = 0;
                  *((_QWORD *)v439 + 1) = 0;
                  *((_QWORD *)v439 + 5) = 0;
                  *((_QWORD *)v439 + 6) = 0;
                  *((_QWORD *)v439 + 4) = 0;
                  v441 = (unsigned __int8 **)(v439 + 32);
                  *((_QWORD *)v439 + 8) = **(_QWORD **)*v436 + 1576;
                  v442 = (llvm::Value *)(v439 + 64);
                  *((_QWORD *)v439 + 3) = v439 + 64;
                  *((_QWORD *)v439 + 7) = v439 + 64;
                  *((_QWORD *)v439 + 9) = 0;
                  v439[80] = 61;
                  v439[81] = 0;
                  *((_WORD *)v439 + 41) = 0;
                  *((_DWORD *)v439 + 21) = 2;
                  *(_OWORD *)(v439 + 88) = 0u;
                  *(_OWORD *)(v439 + 104) = 0u;
                  *((_DWORD *)v439 + 30) = 0;
                  *(_QWORD *)v439 = v436;
                  v445 = v436[1];
                  v444 = v436 + 1;
                  v443 = v445;
                  *((_QWORD *)v439 + 1) = v445;
                  if (v445)
                    *(_QWORD *)(v443 + 16) = v439 + 8;
                  *((_QWORD *)v439 + 2) = v444;
                  *v444 = v439;
                  if (*((_QWORD *)v439 + 4))
                  {
                    **((_QWORD **)v439 + 6) = *((_QWORD *)v439 + 5);
                    v652 = *((_QWORD *)v439 + 5);
                    if (v652)
                      *(_QWORD *)(v652 + 16) = *((_QWORD *)v439 + 6);
                  }
                  *v441 = v433;
                  if (v433)
                  {
                    v448 = *((_QWORD *)v433 + 1);
                    v447 = (unsigned __int8 ***)(v433 + 8);
                    v446 = v448;
                    *((_QWORD *)v439 + 5) = v448;
                    if (v448)
                      *(_QWORD *)(v446 + 16) = v439 + 40;
                    *((_QWORD *)v439 + 6) = v447;
                    *v447 = v441;
                  }
                  *((_WORD *)v439 + 41) = 2 * (v438 & 0x3F);
                  v439[124] = 1;
                  LOWORD(v719) = 257;
                  (*(void (**)(_QWORD *, llvm::Value *, __int128 *, uint64_t, _QWORD *))(*v761 + 16))(v761, v442, &v717, v757, v758);
                  if (!(_DWORD)v753)
                  {
LABEL_529:
                    v449 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), (uint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 8) + 56)+ (*(int *)(*(_QWORD *)(a1 + 8) + 56) < 0 ? 3 : 0)) >> 2, 0);
                    v702 = 257;
                    v450 = (unsigned __int8 *)(*((uint64_t (**)(void **, char *, llvm::Value **, _QWORD, _QWORD))*v760
                                               + 2))(v760, v671, v449, 0, 0);
                    if (v450)
                      goto LABEL_538;
                    LOWORD(v719) = 257;
                    v451 = (char *)operator new(0x80uLL);
                    v452 = v451;
                    *(_QWORD *)v451 = 0;
                    *((_QWORD *)v451 + 2) = 0;
                    *((_QWORD *)v451 + 1) = 0;
                    *((_QWORD *)v451 + 5) = 0;
                    *((_QWORD *)v451 + 6) = 0;
                    *((_QWORD *)v451 + 4) = 0;
                    v453 = (llvm::Value ***)(v451 + 32);
                    *((_QWORD *)v451 + 8) = *(_QWORD *)v671;
                    v450 = (unsigned __int8 *)(v451 + 64);
                    *((_QWORD *)v451 + 3) = v451 + 64;
                    *((_QWORD *)v451 + 7) = v451 + 64;
                    *((_QWORD *)v451 + 9) = 0;
                    v451[80] = 41;
                    v451[81] = 0;
                    *((_WORD *)v451 + 41) = 0;
                    *((_DWORD *)v451 + 21) = 2;
                    *((_DWORD *)v451 + 30) = 0;
                    *(_OWORD *)(v451 + 104) = 0u;
                    *(_OWORD *)(v451 + 88) = 0u;
                    *(_QWORD *)v451 = v671;
                    v454 = v671 + 8;
                    v455 = *((_QWORD *)v671 + 1);
                    *((_QWORD *)v451 + 1) = v455;
                    if (v455)
                      *(_QWORD *)(v455 + 16) = v451 + 8;
                    *((_QWORD *)v451 + 2) = v454;
                    *v454 = v451;
                    if (*((_QWORD *)v451 + 4))
                    {
                      **((_QWORD **)v451 + 6) = *((_QWORD *)v451 + 5);
                      v655 = *((_QWORD *)v451 + 5);
                      if (v655)
                        *(_QWORD *)(v655 + 16) = *((_QWORD *)v451 + 6);
                    }
                    *v453 = v449;
                    if (v449)
                    {
                      v458 = v449[1];
                      v457 = (llvm::Value ****)(v449 + 1);
                      v456 = v458;
                      *((_QWORD *)v451 + 5) = v458;
                      if (v458)
                        *((_QWORD *)v456 + 2) = v451 + 40;
                      *((_QWORD *)v451 + 6) = v457;
                      *v457 = v453;
                    }
                    llvm::Value::setName((uint64_t ***)v451 + 8, (uint64_t)&v717);
                    (*(void (**)(_QWORD *, unsigned __int8 *, void **, uint64_t, _QWORD *))(*v761 + 16))(v761, v450, &v698, v757, v758);
                    if (!(_DWORD)v753)
                    {
LABEL_538:
                      v459 = *(_QWORD *)(a1 + 480);
                      LOWORD(v719) = 257;
                      v460 = sub_1C4773E38((uint64_t *)&v752, 48, v450, v459, (uint64_t)&v717);
                      v461 = *(unsigned __int8 **)a1;
                      v462 = *(_QWORD *)(a1 + 472);
                      v702 = 257;
                      v463 = (uint64_t *)sub_1C5098D9C((uint64_t *)&v752, v461, v462, (uint64_t)&v698);
                      llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v757 + 56) + 40) + 272, *v463);
                      v465 = v464;
                      v466 = (char *)operator new(0x80uLL);
                      v467 = v466;
                      *((_DWORD *)v466 + 21) = *((_DWORD *)v466 + 21) & 0x38000000 | 2;
                      *(_QWORD *)v466 = 0;
                      *((_QWORD *)v466 + 2) = 0;
                      *((_QWORD *)v466 + 1) = 0;
                      *((_QWORD *)v466 + 5) = 0;
                      *((_QWORD *)v466 + 6) = 0;
                      *((_QWORD *)v466 + 4) = 0;
                      v468 = (unsigned __int8 **)(v466 + 32);
                      *((_QWORD *)v466 + 8) = **(_QWORD **)*v463 + 1576;
                      v469 = (llvm::Value *)(v466 + 64);
                      *((_QWORD *)v466 + 3) = v466 + 64;
                      *((_QWORD *)v466 + 7) = v466 + 64;
                      *((_QWORD *)v466 + 9) = 0;
                      v466[80] = 61;
                      v466[81] = 0;
                      *((_WORD *)v466 + 41) = 0;
                      *((_DWORD *)v466 + 21) = 2;
                      *(_OWORD *)(v466 + 88) = 0u;
                      *(_OWORD *)(v466 + 104) = 0u;
                      *((_DWORD *)v466 + 30) = 0;
                      *(_QWORD *)v466 = v463;
                      v472 = v463[1];
                      v471 = v463 + 1;
                      v470 = v472;
                      *((_QWORD *)v466 + 1) = v472;
                      if (v472)
                        *(_QWORD *)(v470 + 16) = v466 + 8;
                      *((_QWORD *)v466 + 2) = v471;
                      *v471 = v466;
                      if (*((_QWORD *)v466 + 4))
                      {
                        **((_QWORD **)v466 + 6) = *((_QWORD *)v466 + 5);
                        v653 = *((_QWORD *)v466 + 5);
                        if (v653)
                          *(_QWORD *)(v653 + 16) = *((_QWORD *)v466 + 6);
                      }
                      *v468 = v460;
                      if (v460)
                      {
                        v475 = *((_QWORD *)v460 + 1);
                        v474 = (unsigned __int8 ***)(v460 + 8);
                        v473 = v475;
                        *((_QWORD *)v466 + 5) = v475;
                        if (v475)
                          *(_QWORD *)(v473 + 16) = v466 + 40;
                        *((_QWORD *)v466 + 6) = v474;
                        *v474 = v468;
                      }
                      *((_WORD *)v466 + 41) = 2 * (v465 & 0x3F);
                      v466[124] = 1;
                      LOWORD(v719) = 257;
                      (*(void (**)(_QWORD *, llvm::Value *, __int128 *, uint64_t, _QWORD *))(*v761 + 16))(v761, v469, &v717, v757, v758);
                      if (!(_DWORD)v753)
                      {
LABEL_546:
                        llvm::GetShadowBytesAfterScope((uint64_t)&v728, v689, &v714);
                        v476 = a1;
                        v680 = (_QWORD *)sub_1C586D9F0(*(_QWORD *)(a1 + 8), (llvm::ConstantInt **)v671, (uint64_t)&v752);
                        sub_1C586E748((llvm::ConstantInt **)a1, (uint64_t)v714, v715[0], (uint64_t)v714, v715[0], 0, *(unint64_t *)v715, (uint64_t)&v752, v680);
                        if (*(_DWORD *)(a1 + 5672))
                        {
                          llvm::GetShadowBytes((uint64_t *)&v728, v689, (uint64_t)&v698);
                          v607 = *(unsigned int *)(a1 + 5672);
                          if ((_DWORD)v607)
                          {
                            v608 = 32 * v607;
                            v609 = (uint64_t *)(*(_QWORD *)(a1 + 5664) + 24);
                            do
                            {
                              v610 = sub_1C6180A54((uint64_t)v687, v609 - 2);
                              v611 = *(_QWORD *)(v610[1] + 40) / v689[0];
                              v612 = (v689[0] + *(v609 - 1) - 1) / v689[0] + v611;
                              sub_1C4773D54((uint64_t)&v717, *(v609 - 3), 0, 0, 0);
                              if (*(_BYTE *)v609)
                                v613 = v714;
                              else
                                v613 = v698;
                              if (*(_BYTE *)v609)
                                v614 = v715[0];
                              else
                                v614 = v699;
                              sub_1C586E748((llvm::ConstantInt **)a1, (uint64_t)v714, v715[0], (uint64_t)v613, v614, (llvm::Type *)v611, v612, (uint64_t)&v717, v680);
                              if ((__int128 *)v717 != &v718)
                                free((void *)v717);
                              v609 += 4;
                              v608 -= 32;
                            }
                            while (v608);
                          }
                          if (v698 != &v701)
                            free(v698);
                          v476 = a1;
                        }
                        v711 = v713;
                        v712 = xmmword_1C64638C0;
                        sub_1C538606C((size_t *)&v711, *(unint64_t *)v715, 0);
                        v708 = v710;
                        v709 = xmmword_1C64638C0;
                        v477 = *(unsigned int *)(v476 + 808);
                        if (!(_DWORD)v477)
                        {
LABEL_664:
                          v563 = *(unsigned int *)(v476 + 520);
                          if ((_DWORD)v563)
                          {
                            v564 = *(uint64_t **)(v476 + 512);
                            v565 = 8 * v563;
                            do
                            {
                              v566 = *v564++;
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v566 + 40) + 40, (uint64_t ***)v566);
                              v567 = *(_QWORD *)(v566 + 24);
                              v568 = *(_QWORD **)(v566 + 32);
                              *v568 = v567;
                              *(_QWORD *)(v567 + 8) = v568;
                              *(_QWORD *)(v566 + 24) = 0;
                              *(_QWORD *)(v566 + 32) = 0;
                              llvm::Value::deleteValue((llvm::Value *)v566);
                              v565 -= 8;
                            }
                            while (v565);
                          }
                          if (v708 != v710)
                            free(v708);
                          if (v711 != v713)
                            free(v711);
                          if (v714 != &v716)
                            free(v714);
                          if (v726[0] != &v727)
                            free(v726[0]);
                          MEMORY[0x1CAA32FB4](v687[0], 8);
                          if (v728 != &v730)
                            free(v728);
                          if (v749 != v751)
                            free(v749);
                          if (v752 != &v754)
                            free(v752);
                          if (v691)
                            llvm::MetadataTracking::untrack((uint64_t)&v691, v691);
                          return 1;
                        }
                        v659 = 64 << v352;
                        v660 = v476 + 16 * v352 + 1056;
                        v478 = *(uint64_t **)(v476 + 800);
                        v479 = (unsigned __int8 ***)(v668 + 8);
                        v657 = v666 + 1;
                        v658 = 0x4000000000 << v664 >> 32;
                        v480 = &v478[v477];
                        v661 = v480;
                        while (1)
                        {
                          v481 = (llvm::Value *)*v478;
                          sub_1C4773D54((uint64_t)&v717, *v478, 0, 0, 0);
                          v482 = (uint64_t *)llvm::ConstantInt::get(*(llvm::ConstantInt **)(v476 + 472), 1172321806, 0);
                          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v720 + 56) + 40) + 272, *v482);
                          v484 = v483;
                          v485 = (char *)operator new(0x80uLL);
                          v486 = v485;
                          *((_DWORD *)v485 + 21) = *((_DWORD *)v485 + 21) & 0x38000000 | 2;
                          *(_QWORD *)v485 = 0;
                          *((_QWORD *)v485 + 2) = 0;
                          *((_QWORD *)v485 + 1) = 0;
                          *((_QWORD *)v485 + 5) = 0;
                          *((_QWORD *)v485 + 6) = 0;
                          *((_QWORD *)v485 + 4) = 0;
                          v487 = (unsigned __int8 **)(v485 + 32);
                          *((_QWORD *)v485 + 8) = **(_QWORD **)*v482 + 1576;
                          v488 = (llvm::Value *)(v485 + 64);
                          *((_QWORD *)v485 + 3) = v485 + 64;
                          *((_QWORD *)v485 + 7) = v485 + 64;
                          *((_QWORD *)v485 + 9) = 0;
                          v485[80] = 61;
                          v485[81] = 0;
                          *((_WORD *)v485 + 41) = 0;
                          *((_DWORD *)v485 + 21) = 2;
                          *(_OWORD *)(v485 + 88) = 0u;
                          *(_OWORD *)(v485 + 104) = 0u;
                          *((_DWORD *)v485 + 30) = 0;
                          *(_QWORD *)v485 = v482;
                          v491 = v482[1];
                          v490 = v482 + 1;
                          v489 = v491;
                          *((_QWORD *)v485 + 1) = v491;
                          if (v491)
                            *(_QWORD *)(v489 + 16) = v485 + 8;
                          *((_QWORD *)v485 + 2) = v490;
                          *v490 = v485;
                          if (*((_QWORD *)v485 + 4))
                          {
                            **((_QWORD **)v485 + 6) = *((_QWORD *)v485 + 5);
                            v560 = *((_QWORD *)v485 + 5);
                            if (v560)
                              *(_QWORD *)(v560 + 16) = *((_QWORD *)v485 + 6);
                          }
                          *v487 = v668;
                          if (v668)
                          {
                            v492 = *v479;
                            *((_QWORD *)v485 + 5) = *v479;
                            if (v492)
                              v492[2] = (unsigned __int8 *)(v485 + 40);
                            *((_QWORD *)v485 + 6) = v479;
                            *v479 = v487;
                          }
                          *((_WORD *)v485 + 41) = 2 * (v484 & 0x3F);
                          v485[124] = 1;
                          v702 = 257;
                          (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v722 + 16))(v722, v488, &v698, v720, v721);
                          if (DWORD2(v717))
                            break;
LABEL_557:
                          if (v675)
                          {
                            v476 = a1;
                            v494 = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 472), v493);
                            v702 = 257;
                            v495 = (llvm *)sub_1C4774B48((uint64_t)&v717, 33, (uint64_t)v666, (uint64_t)v494, (uint64_t)&v698);
                            v685 = 0;
                            v686 = 0;
                            llvm::SplitBlockAndInsertIfThenElse(v495, v481, (llvm::Instruction *)&v686, &v685, 0, v496);
                            sub_1C4773D54((uint64_t)&v698, v686, 0, 0, 0);
                            if (v664 > 4)
                            {
                              v514 = *(uint64_t ***)v660;
                              v515 = *(_QWORD *)(v660 + 8);
                              v696[0] = (uint64_t)v666;
                              v696[1] = (uint64_t)llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), (uint64_t)v662, 0);
                              v695 = 257;
                              sub_1C4774778((uint64_t *)&v698, v514, v515, v696, 2, (uint64_t)v693, 0);
LABEL_603:
                              sub_1C4773D54((uint64_t)v693, (uint64_t)v685, 0, 0, 0);
                              sub_1C586E748((llvm::ConstantInt **)v476, (uint64_t)v714, v715[0], (uint64_t)v711, v712, 0, *(unint64_t *)v715, (uint64_t)v693, v680);
                              if (v693[0] != &v694)
                                free(v693[0]);
                              if (v698 != &v700)
                                free(v698);
                              goto LABEL_607;
                            }
                            v497 = v658 / v689[0];
                            if (v658 / v689[0] != (_QWORD)v709)
                            {
                              if (v658 / v689[0] >= (unint64_t)v709)
                              {
                                sub_1C62A9EF4(&v708, v658 / v689[0] - v709, 245);
                                v497 = v709;
                              }
                              else
                              {
                                *(_QWORD *)&v709 = v658 / v689[0];
                              }
                            }
                            sub_1C586E748((llvm::ConstantInt **)a1, (uint64_t)v708, v497, (uint64_t)v708, v497, 0, v497, (uint64_t)&v698, v680);
                            v498 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 472), (int)v659 - *(_DWORD *)(*(_QWORD *)(a1 + 8) + 56) / 8, 0);
                            v697 = 257;
                            v499 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value **, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v706 + 16))(v706, v666, v498, 0, 0);
                            if (!v499)
                            {
                              v695 = 257;
                              v500 = (char *)operator new(0x80uLL);
                              v501 = v500;
                              *(_QWORD *)v500 = 0;
                              *((_QWORD *)v500 + 2) = 0;
                              *((_QWORD *)v500 + 1) = 0;
                              *((_QWORD *)v500 + 4) = 0;
                              v502 = (llvm::Value ***)(v500 + 32);
                              *((_QWORD *)v500 + 5) = 0;
                              *((_QWORD *)v500 + 6) = 0;
                              *((_QWORD *)v500 + 8) = *v666;
                              v499 = (llvm::Value *)(v500 + 64);
                              *((_QWORD *)v500 + 3) = v500 + 64;
                              *((_QWORD *)v500 + 7) = v500 + 64;
                              *((_QWORD *)v500 + 9) = 0;
                              v500[80] = 41;
                              v500[81] = 0;
                              *((_WORD *)v500 + 41) = 0;
                              *((_DWORD *)v500 + 21) = 2;
                              *((_DWORD *)v500 + 30) = 0;
                              *(_OWORD *)(v500 + 104) = 0u;
                              *(_OWORD *)(v500 + 88) = 0u;
                              *(_QWORD *)v500 = v666;
                              v503 = v666[1];
                              *((_QWORD *)v500 + 1) = v503;
                              if (v503)
                                *((_QWORD *)v503 + 2) = v500 + 8;
                              *((_QWORD *)v500 + 2) = v657;
                              *v657 = v500;
                              if (*((_QWORD *)v500 + 4))
                              {
                                **((_QWORD **)v500 + 6) = *((_QWORD *)v500 + 5);
                                v562 = *((_QWORD *)v500 + 5);
                                if (v562)
                                  *(_QWORD *)(v562 + 16) = *((_QWORD *)v500 + 6);
                              }
                              *v502 = v498;
                              if (v498)
                              {
                                v506 = v498[1];
                                v505 = (llvm::Value ****)(v498 + 1);
                                v504 = v506;
                                *((_QWORD *)v500 + 5) = v506;
                                if (v506)
                                  *((_QWORD *)v504 + 2) = v500 + 40;
                                *((_QWORD *)v500 + 6) = v505;
                                *v505 = v502;
                              }
                              llvm::Value::setName((uint64_t ***)v500 + 8, (uint64_t)v693);
                              (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v707 + 16))(v707, v499, v696, v703, v704);
                              if ((_DWORD)v699)
                              {
                                v507 = (char *)v698;
                                v508 = (char *)v698 + 16 * v699;
                                v509 = (unsigned __int8 **)(v501 + 112);
                                do
                                {
                                  v510 = *(_DWORD *)v507;
                                  v511 = (unsigned __int8 *)*((_QWORD *)v507 + 1);
                                  if (v511)
                                  {
                                    if (!v510)
                                    {
                                      v683[0] = *((_QWORD *)v507 + 1);
                                      llvm::MetadataTracking::track((uint64_t)v683, v511, 2);
                                      v512 = *v509;
                                      goto LABEL_582;
                                    }
                                  }
                                  else
                                  {
                                    v512 = *v509;
                                    if (!*v509 && (v501[87] & 0x20) == 0)
                                      goto LABEL_579;
                                    if (!v510)
                                    {
                                      v683[0] = 0;
LABEL_582:
                                      if (v512)
                                        llvm::MetadataTracking::untrack((uint64_t)(v501 + 112), v512);
                                      v513 = (unsigned __int8 *)v683[0];
                                      *v509 = (unsigned __int8 *)v683[0];
                                      if (v513)
                                        llvm::MetadataTracking::retrack((uint64_t)v683, v513, (uint64_t)(v501 + 112));
                                      goto LABEL_579;
                                    }
                                  }
                                  llvm::Value::setMetadata(v499, *(_DWORD *)v507, (llvm::MDNode *)v511);
LABEL_579:
                                  v507 += 16;
                                }
                                while (v507 != v508);
                              }
                              v476 = a1;
                            }
                            v517 = *(_QWORD *)(v476 + 472);
                            v516 = *(_QWORD *)(v476 + 480);
                            v697 = 257;
                            v518 = sub_1C4773E38((uint64_t *)&v698, 48, (unsigned __int8 *)v499, v516, (uint64_t)v696);
                            v684 = 257;
                            llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v703 + 56) + 40) + 272, v517);
                            v520 = v519;
                            v521 = (char *)operator new(0x60uLL);
                            v522 = v521;
                            v523 = (unsigned __int8 *)(v521 + 32);
                            *((_QWORD *)v521 + 2) = 0;
                            *((_QWORD *)v521 + 3) = v521 + 32;
                            v695 = 257;
                            *((_QWORD *)v521 + 4) = v517;
                            *((_QWORD *)v521 + 5) = 0;
                            *((_WORD *)v521 + 24) = 60;
                            *((_DWORD *)v521 + 13) = 1;
                            *(_OWORD *)(v521 + 56) = 0u;
                            *(_OWORD *)(v521 + 72) = 0u;
                            *((_DWORD *)v521 + 22) = 0;
                            *(_QWORD *)v521 = v518;
                            *((_QWORD *)v521 + 1) = 0;
                            if (v518)
                            {
                              v526 = *((_QWORD *)v518 + 1);
                              v525 = v518 + 8;
                              v524 = v526;
                              *((_QWORD *)v521 + 1) = v526;
                              if (v526)
                                *(_QWORD *)(v524 + 16) = v521 + 8;
                              *((_QWORD *)v521 + 2) = v525;
                              *v525 = v521;
                            }
                            *((_WORD *)v521 + 25) = 2 * (v520 & 0x3F);
                            v521[92] = 1;
                            llvm::Value::setName((uint64_t ***)v521 + 4, (uint64_t)v693);
                            (*(void (**)(uint64_t, unsigned __int8 *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v707 + 16))(v707, v523, v683, v703, v704);
                            v480 = v661;
                            if (!(_DWORD)v699)
                            {
LABEL_594:
                              v528 = (uint64_t *)llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v705 + 1912), v527);
                              v529 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v705 + 1912), 0);
                              v697 = 257;
                              v530 = sub_1C4773E38((uint64_t *)&v698, 48, v523, v529, (uint64_t)v696);
                              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v703 + 56) + 40) + 272, *v528);
                              v532 = v531;
                              v533 = (char *)operator new(0x80uLL);
                              v534 = v533;
                              *((_DWORD *)v533 + 21) = *((_DWORD *)v533 + 21) & 0x38000000 | 2;
                              *(_QWORD *)v533 = 0;
                              *((_QWORD *)v533 + 2) = 0;
                              *((_QWORD *)v533 + 1) = 0;
                              *((_QWORD *)v533 + 5) = 0;
                              *((_QWORD *)v533 + 6) = 0;
                              *((_QWORD *)v533 + 4) = 0;
                              v535 = (unsigned __int8 **)(v533 + 32);
                              *((_QWORD *)v533 + 8) = **(_QWORD **)*v528 + 1576;
                              v536 = (llvm::Value *)(v533 + 64);
                              *((_QWORD *)v533 + 3) = v533 + 64;
                              *((_QWORD *)v533 + 7) = v533 + 64;
                              *((_QWORD *)v533 + 9) = 0;
                              v533[80] = 61;
                              v533[81] = 0;
                              *((_WORD *)v533 + 41) = 0;
                              *((_DWORD *)v533 + 21) = 2;
                              *(_OWORD *)(v533 + 88) = 0u;
                              *(_OWORD *)(v533 + 104) = 0u;
                              *((_DWORD *)v533 + 30) = 0;
                              *(_QWORD *)v533 = v528;
                              v539 = v528[1];
                              v538 = v528 + 1;
                              v537 = v539;
                              *((_QWORD *)v533 + 1) = v539;
                              if (v539)
                                *(_QWORD *)(v537 + 16) = v533 + 8;
                              *((_QWORD *)v533 + 2) = v538;
                              *v538 = v533;
                              if (*((_QWORD *)v533 + 4))
                              {
                                **((_QWORD **)v533 + 6) = *((_QWORD *)v533 + 5);
                                v561 = *((_QWORD *)v533 + 5);
                                if (v561)
                                  *(_QWORD *)(v561 + 16) = *((_QWORD *)v533 + 6);
                              }
                              *v535 = v530;
                              if (v530)
                              {
                                v542 = *((_QWORD *)v530 + 1);
                                v541 = (unsigned __int8 ***)(v530 + 8);
                                v540 = v542;
                                *((_QWORD *)v533 + 5) = v542;
                                if (v542)
                                  *(_QWORD *)(v540 + 16) = v533 + 40;
                                *((_QWORD *)v533 + 6) = v541;
                                *v541 = v535;
                              }
                              *((_WORD *)v533 + 41) = 2 * (v532 & 0x3F);
                              v533[124] = 1;
                              v695 = 257;
                              (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v707 + 16))(v707, v536, v693, v703, v704);
                              if (!(_DWORD)v699)
                              {
LABEL_602:
                                v476 = a1;
                                goto LABEL_603;
                              }
                              v553 = (char *)v698;
                              v554 = (char *)v698 + 16 * v699;
                              v555 = (unsigned __int8 **)(v534 + 112);
                              while (2)
                              {
                                v556 = *(_DWORD *)v553;
                                v557 = (unsigned __int8 *)*((_QWORD *)v553 + 1);
                                if (v557)
                                {
                                  if (v556)
                                    goto LABEL_649;
                                  v683[0] = *((_QWORD *)v553 + 1);
                                  llvm::MetadataTracking::track((uint64_t)v683, v557, 2);
                                  v558 = *v555;
LABEL_653:
                                  if (v558)
                                    llvm::MetadataTracking::untrack((uint64_t)(v534 + 112), v558);
                                  v559 = (unsigned __int8 *)v683[0];
                                  *v555 = (unsigned __int8 *)v683[0];
                                  if (v559)
                                    llvm::MetadataTracking::retrack((uint64_t)v683, v559, (uint64_t)(v534 + 112));
                                  v480 = v661;
                                }
                                else
                                {
                                  v558 = *v555;
                                  if (*v555 || (v534[87] & 0x20) != 0)
                                  {
                                    if (!v556)
                                    {
                                      v683[0] = 0;
                                      goto LABEL_653;
                                    }
LABEL_649:
                                    llvm::Value::setMetadata(v536, *(_DWORD *)v553, (llvm::MDNode *)v557);
                                  }
                                }
                                v553 += 16;
                                if (v553 == v554)
                                  goto LABEL_602;
                                continue;
                              }
                            }
                            v543 = (char *)v698;
                            v544 = (char *)v698 + 16 * v699;
                            v545 = (llvm::Type **)(v522 + 80);
                            while (2)
                            {
                              v546 = *(_DWORD *)v543;
                              v547 = (unsigned __int8 *)*((_QWORD *)v543 + 1);
                              if (v547)
                              {
                                if (v546)
                                  goto LABEL_618;
                                v692 = (llvm::Type *)*((_QWORD *)v543 + 1);
                                llvm::MetadataTracking::track((uint64_t)&v692, v547, 2);
                                v527 = *v545;
LABEL_622:
                                if (v527)
                                  llvm::MetadataTracking::untrack((uint64_t)(v522 + 80), (unsigned __int8 *)v527);
                                v527 = v692;
                                *v545 = v692;
                                if (v527)
                                  llvm::MetadataTracking::retrack((uint64_t)&v692, (unsigned __int8 *)v527, (uint64_t)(v522 + 80));
                              }
                              else
                              {
                                v527 = *v545;
                                if (*v545 || (v522[55] & 0x20) != 0)
                                {
                                  if (!v546)
                                  {
                                    v692 = 0;
                                    goto LABEL_622;
                                  }
LABEL_618:
                                  llvm::Value::setMetadata((llvm::Value *)v523, *(_DWORD *)v543, (llvm::MDNode *)v547);
                                }
                              }
                              v543 += 16;
                              if (v543 == v544)
                                goto LABEL_594;
                              continue;
                            }
                          }
                          v476 = a1;
                          sub_1C586E748((llvm::ConstantInt **)a1, (uint64_t)v714, v715[0], (uint64_t)v711, v712, 0, *(unint64_t *)v715, (uint64_t)&v717, v680);
LABEL_607:
                          if ((__int128 *)v717 != &v718)
                            free((void *)v717);
                          if (++v478 == v480)
                            goto LABEL_664;
                        }
                        v548 = v717;
                        v549 = v717 + 16 * DWORD2(v717);
                        v550 = (llvm::Type **)(v486 + 112);
                        while (1)
                        {
                          v551 = *(_DWORD *)v548;
                          v552 = *(unsigned __int8 **)(v548 + 8);
                          if (v552)
                          {
                            if (!v551)
                            {
                              v693[0] = *(void **)(v548 + 8);
                              llvm::MetadataTracking::track((uint64_t)v693, v552, 2);
                              v493 = *v550;
                              goto LABEL_637;
                            }
                          }
                          else
                          {
                            v493 = *v550;
                            if (!*v550 && (v486[87] & 0x20) == 0)
                              goto LABEL_634;
                            if (!v551)
                            {
                              v693[0] = 0;
LABEL_637:
                              if (v493)
                                llvm::MetadataTracking::untrack((uint64_t)(v486 + 112), (unsigned __int8 *)v493);
                              v493 = (llvm::Type *)v693[0];
                              *v550 = (llvm::Type *)v693[0];
                              if (v493)
                                llvm::MetadataTracking::retrack((uint64_t)v693, (unsigned __int8 *)v493, (uint64_t)(v486 + 112));
                              goto LABEL_634;
                            }
                          }
                          llvm::Value::setMetadata(v488, *(_DWORD *)v548, (llvm::MDNode *)v552);
LABEL_634:
                          v548 += 16;
                          if (v548 == v549)
                            goto LABEL_557;
                        }
                      }
                      v631 = v752;
                      v632 = &v752[2 * v753];
                      v633 = (unsigned __int8 **)(v467 + 112);
                      while (1)
                      {
                        v634 = *(_DWORD *)v631;
                        v635 = (unsigned __int8 *)v631[1];
                        if (v635)
                        {
                          if (!v634)
                          {
                            v693[0] = (void *)v631[1];
                            llvm::MetadataTracking::track((uint64_t)v693, v635, 2);
                            v636 = *v633;
                            goto LABEL_801;
                          }
                        }
                        else
                        {
                          v636 = *v633;
                          if (!*v633 && (v467[87] & 0x20) == 0)
                            goto LABEL_798;
                          if (!v634)
                          {
                            v693[0] = 0;
LABEL_801:
                            if (v636)
                              llvm::MetadataTracking::untrack((uint64_t)(v467 + 112), v636);
                            v637 = (unsigned __int8 *)v693[0];
                            *v633 = (unsigned __int8 *)v693[0];
                            if (v637)
                              llvm::MetadataTracking::retrack((uint64_t)v693, v637, (uint64_t)(v467 + 112));
                            goto LABEL_798;
                          }
                        }
                        llvm::Value::setMetadata(v469, *(_DWORD *)v631, (llvm::MDNode *)v635);
LABEL_798:
                        v631 += 2;
                        if (v631 == v632)
                          goto LABEL_546;
                      }
                    }
                    v600 = v752;
                    v601 = &v752[2 * v753];
                    v602 = (unsigned __int8 **)(v452 + 112);
                    while (1)
                    {
                      v603 = *(_DWORD *)v600;
                      v604 = (unsigned __int8 *)v600[1];
                      if (v604)
                      {
                        if (!v603)
                        {
                          v693[0] = (void *)v600[1];
                          llvm::MetadataTracking::track((uint64_t)v693, v604, 2);
                          v605 = *v602;
                          goto LABEL_738;
                        }
                      }
                      else
                      {
                        v605 = *v602;
                        if (!*v602 && (v452[87] & 0x20) == 0)
                          goto LABEL_735;
                        if (!v603)
                        {
                          v693[0] = 0;
LABEL_738:
                          if (v605)
                            llvm::MetadataTracking::untrack((uint64_t)(v452 + 112), v605);
                          v606 = (unsigned __int8 *)v693[0];
                          *v602 = (unsigned __int8 *)v693[0];
                          if (v606)
                            llvm::MetadataTracking::retrack((uint64_t)v693, v606, (uint64_t)(v452 + 112));
                          goto LABEL_735;
                        }
                      }
                      llvm::Value::setMetadata((llvm::Value *)v450, *(_DWORD *)v600, (llvm::MDNode *)v604);
LABEL_735:
                      v600 += 2;
                      if (v600 == v601)
                        goto LABEL_538;
                    }
                  }
                  v624 = v752;
                  v625 = &v752[2 * v753];
                  v626 = (unsigned __int8 **)(v440 + 112);
                  while (1)
                  {
                    v627 = *(_DWORD *)v624;
                    v628 = (unsigned __int8 *)v624[1];
                    if (v628)
                    {
                      if (!v627)
                      {
                        v698 = (void *)v624[1];
                        llvm::MetadataTracking::track((uint64_t)&v698, v628, 2);
                        v629 = *v626;
                        goto LABEL_786;
                      }
                    }
                    else
                    {
                      v629 = *v626;
                      if (!*v626 && (v440[87] & 0x20) == 0)
                        goto LABEL_783;
                      if (!v627)
                      {
                        v698 = 0;
LABEL_786:
                        if (v629)
                          llvm::MetadataTracking::untrack((uint64_t)(v440 + 112), v629);
                        v630 = (unsigned __int8 *)v698;
                        *v626 = (unsigned __int8 *)v698;
                        if (v630)
                          llvm::MetadataTracking::retrack((uint64_t)&v698, v630, (uint64_t)(v440 + 112));
                        goto LABEL_783;
                      }
                    }
                    llvm::Value::setMetadata(v442, *(_DWORD *)v624, (llvm::MDNode *)v628);
LABEL_783:
                    v624 += 2;
                    if (v624 == v625)
                      goto LABEL_529;
                  }
                }
                v593 = v752;
                v594 = &v752[2 * v753];
                v595 = (unsigned __int8 **)(v425 + 112);
                while (1)
                {
                  v596 = *(_DWORD *)v593;
                  v597 = (unsigned __int8 *)v593[1];
                  if (v597)
                  {
                    if (!v596)
                    {
                      v693[0] = (void *)v593[1];
                      llvm::MetadataTracking::track((uint64_t)v693, v597, 2);
                      v598 = *v595;
                      goto LABEL_723;
                    }
                  }
                  else
                  {
                    v598 = *v595;
                    if (!*v595 && (v425[87] & 0x20) == 0)
                      goto LABEL_720;
                    if (!v596)
                    {
                      v693[0] = 0;
LABEL_723:
                      if (v598)
                        llvm::MetadataTracking::untrack((uint64_t)(v425 + 112), v598);
                      v599 = (unsigned __int8 *)v693[0];
                      *v595 = (unsigned __int8 *)v693[0];
                      if (v599)
                        llvm::MetadataTracking::retrack((uint64_t)v693, v599, (uint64_t)(v425 + 112));
                      goto LABEL_720;
                    }
                  }
                  llvm::Value::setMetadata((llvm::Value *)v423, *(_DWORD *)v593, (llvm::MDNode *)v597);
LABEL_720:
                  v593 += 2;
                  if (v593 == v594)
                    goto LABEL_521;
                }
              }
              v617 = v752;
              v618 = &v752[2 * v753];
              v619 = (unsigned __int8 **)(v414 + 112);
              while (1)
              {
                v620 = *(_DWORD *)v617;
                v621 = (unsigned __int8 *)v617[1];
                if (v621)
                {
                  if (!v620)
                  {
                    v698 = (void *)v617[1];
                    llvm::MetadataTracking::track((uint64_t)&v698, v621, 2);
                    v622 = *v619;
                    goto LABEL_771;
                  }
                }
                else
                {
                  v622 = *v619;
                  if (!*v619 && (v414[87] & 0x20) == 0)
                    goto LABEL_768;
                  if (!v620)
                  {
                    v698 = 0;
LABEL_771:
                    if (v622)
                      llvm::MetadataTracking::untrack((uint64_t)(v414 + 112), v622);
                    v623 = (unsigned __int8 *)v698;
                    *v619 = (unsigned __int8 *)v698;
                    if (v623)
                      llvm::MetadataTracking::retrack((uint64_t)&v698, v623, (uint64_t)(v414 + 112));
                    goto LABEL_768;
                  }
                }
                llvm::Value::setMetadata(v416, *(_DWORD *)v617, (llvm::MDNode *)v621);
LABEL_768:
                v617 += 2;
                if (v617 == v618)
                  goto LABEL_512;
              }
            }
            v569 = (char *)v728;
            v681 = (char *)v728 + 56 * __src;
            v570 = (llvm::Value *)(v353 + 16);
            v669 = v671 + 8;
            while (1)
            {
              v571 = (llvm *)*((_QWORD *)v569 + 4);
              v572 = v350;
              llvm::replaceDbgDeclare(v571, (llvm::Value *)v350, v570, (llvm::DIBuilder *)v351, *((_DWORD *)v569 + 10));
              v573 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v353 + 472), *((_QWORD *)v569 + 5), 0);
              v702 = 257;
              v574 = (llvm::Value *)(*((uint64_t (**)(void **, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))*v760
                                     + 2))(v760, v408, v573, 0, 0);
              if (!v574)
              {
                LOWORD(v719) = 257;
                v575 = (char *)operator new(0x80uLL);
                v576 = v408;
                v577 = v575;
                *(_QWORD *)v575 = 0;
                *((_QWORD *)v575 + 2) = 0;
                *((_QWORD *)v575 + 1) = 0;
                *((_QWORD *)v575 + 4) = 0;
                v578 = (llvm::Value ***)(v575 + 32);
                *((_QWORD *)v575 + 5) = 0;
                *((_QWORD *)v575 + 6) = 0;
                *((_QWORD *)v575 + 8) = *(_QWORD *)v576;
                v574 = (llvm::Value *)(v575 + 64);
                *((_QWORD *)v575 + 3) = v575 + 64;
                *((_QWORD *)v575 + 7) = v575 + 64;
                *((_QWORD *)v575 + 9) = 0;
                v575[80] = 41;
                v575[81] = 0;
                *((_WORD *)v575 + 41) = 0;
                *((_DWORD *)v575 + 21) = 2;
                *((_DWORD *)v575 + 30) = 0;
                *(_OWORD *)(v575 + 104) = 0u;
                *(_OWORD *)(v575 + 88) = 0u;
                *(_QWORD *)v575 = v576;
                v579 = *((_QWORD *)v576 + 1);
                *((_QWORD *)v575 + 1) = v579;
                if (v579)
                  *(_QWORD *)(v579 + 16) = v575 + 8;
                *((_QWORD *)v575 + 2) = v669;
                *v669 = v575;
                if (*((_QWORD *)v575 + 4))
                {
                  **((_QWORD **)v575 + 6) = *((_QWORD *)v575 + 5);
                  v592 = *((_QWORD *)v575 + 5);
                  if (v592)
                    *(_QWORD *)(v592 + 16) = *((_QWORD *)v575 + 6);
                }
                *v578 = v573;
                if (v573)
                {
                  v582 = v573[1];
                  v581 = (llvm::Value ****)(v573 + 1);
                  v580 = v582;
                  *((_QWORD *)v575 + 5) = v582;
                  if (v582)
                    *((_QWORD *)v580 + 2) = v575 + 40;
                  *((_QWORD *)v575 + 6) = v581;
                  *v581 = v578;
                }
                llvm::Value::setName((uint64_t ***)v575 + 8, (uint64_t)&v717);
                (*(void (**)(_QWORD *, llvm::Value *, void **, uint64_t, _QWORD *))(*v761 + 16))(v761, v574, &v698, v757, v758);
                if ((_DWORD)v753)
                {
                  v583 = v752;
                  v584 = &v752[2 * v753];
                  v585 = (unsigned __int8 **)(v577 + 112);
                  do
                  {
                    v586 = *(_DWORD *)v583;
                    v587 = (unsigned __int8 *)v583[1];
                    if (v587)
                    {
                      if (!v586)
                      {
                        v693[0] = (void *)v583[1];
                        llvm::MetadataTracking::track((uint64_t)v693, v587, 2);
                        v588 = *v585;
                        if (!*v585)
                        {
LABEL_705:
                          v589 = (unsigned __int8 *)v693[0];
                          *v585 = (unsigned __int8 *)v693[0];
                          if (v589)
                            llvm::MetadataTracking::retrack((uint64_t)v693, v589, (uint64_t)(v577 + 112));
                          goto LABEL_702;
                        }
LABEL_699:
                        llvm::MetadataTracking::untrack((uint64_t)(v577 + 112), v588);
                        goto LABEL_705;
                      }
                    }
                    else
                    {
                      v588 = *v585;
                      if (!*v585 && (v577[87] & 0x20) == 0)
                        goto LABEL_702;
                      if (!v586)
                      {
                        v693[0] = 0;
                        if (!v588)
                          goto LABEL_705;
                        goto LABEL_699;
                      }
                    }
                    llvm::Value::setMetadata(v574, *(_DWORD *)v583, (llvm::MDNode *)v587);
LABEL_702:
                    v583 += 2;
                  }
                  while (v583 != v584);
                }
                v353 = a1;
                v351 = v675;
                v408 = (unsigned __int8 *)v671;
              }
              v590 = *(_QWORD *)v571;
              LOWORD(v719) = 257;
              v591 = sub_1C4773E38((uint64_t *)&v752, 48, (unsigned __int8 *)v574, v590, (uint64_t)&v717);
              llvm::Value::doRAUW(v571, (llvm::Value *)v591, (llvm::Value *)1);
              v569 += 56;
              v350 = v572;
              if (v569 == v681)
                goto LABEL_504;
            }
          }
          v315 = a1;
          v350 = sub_1C586E544(a1, (uint64_t)&v752, (uint64_t)v689, 0);
          if ((v349 & 1) != 0)
            goto LABEL_445;
        }
        v666 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v315 + 472), 0, 0);
        v351 = 0;
        v352 = -1;
        v671 = (char *)v350;
        v353 = v315;
        goto LABEL_501;
      }
      v328 = *v665;
      v329 = (uint64_t)&(*v665)[v300];
      while (1)
      {
        v330 = *v328;
        v720 = 0;
        v718 = 0u;
        v719 = 0u;
        v717 = 0u;
        if ((*((_BYTE *)v330 + 23) & 0x10) == 0)
        {
          v339 = &byte_1C871356D;
          goto LABEL_417;
        }
        v331 = ***(_QWORD ***)v330;
        v332 = *(_QWORD *)(v331 + 152);
        v333 = *(unsigned int *)(v331 + 168);
        if (!(_DWORD)v333)
          goto LABEL_415;
        LODWORD(v334) = (v333 - 1) & ((v330 >> 4) ^ (v330 >> 9));
        v335 = (_QWORD *)(v332 + 16 * v334);
        v336 = (_WORD *)*v335;
        if ((_WORD *)*v335 != v330)
          break;
LABEL_416:
        v339 = (char *)(v335[1] + 16);
LABEL_417:
        *(_QWORD *)&v717 = v339;
        *((_QWORD *)&v717 + 1) = sub_1C586C400((llvm::AllocaInst *)v330);
        *(_QWORD *)&v718 = 0;
        *((_QWORD *)&v718 + 1) = 1 << v330[9];
        v719 = (unint64_t)v330;
        LODWORD(v720) = 0;
        v340 = (char *)v728;
        if (__src >= HIDWORD(__src))
        {
          v345 = __src + 1;
          if (v728 <= &v717 && (char *)v728 + 56 * __src > (char *)&v717)
          {
            v346 = (char *)&v717 - (_BYTE *)v728;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v728, (uint64_t)&v730, v345, 56);
            v340 = (char *)v728;
            v341 = (__n128 *)((char *)v728 + v346);
            v298 = a1;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v728, (uint64_t)&v730, v345, 56);
            v341 = (__n128 *)&v717;
            v340 = (char *)v728;
          }
        }
        else
        {
          v341 = (__n128 *)&v717;
        }
        v342 = &v340[56 * __src];
        v294 = *v341;
        v343 = v341[1];
        v344 = v341[2];
        *((_QWORD *)v342 + 6) = v341[3].n128_u64[0];
        *((__n128 *)v342 + 1) = v343;
        *((__n128 *)v342 + 2) = v344;
        *(__n128 *)v342 = v294;
        LODWORD(__src) = (_DWORD)__src + 1;
        if (++v328 == (_WORD **)v329)
          goto LABEL_354;
      }
      v337 = 1;
      while (v336 != (_WORD *)-4096)
      {
        v338 = v334 + v337++;
        v334 = v338 & (v333 - 1);
        v336 = *(_WORD **)(v332 + 16 * v334);
        if (v336 == v330)
        {
          v335 = (_QWORD *)(v332 + 16 * v334);
          goto LABEL_416;
        }
      }
LABEL_415:
      v335 = (_QWORD *)(v332 + 16 * v333);
      goto LABEL_416;
    }
    v269 = ***v268;
    v728 = *(void **)a1;
    v270 = *(_DWORD *)(v269 + 2496);
    if (v270)
    {
      v271 = *(_QWORD *)(v269 + 2480);
      v272 = v270 - 1;
      v273 = v272 & ((v268 >> 4) ^ (v268 >> 9));
      v274 = (uint64_t ****)(v271 + 40 * v273);
      v275 = *v274;
      if (*v274 == v268)
        goto LABEL_326;
      v276 = 0;
      v277 = 1;
      while (v275 != (uint64_t ***)-4096)
      {
        if (v276)
          v278 = 0;
        else
          v278 = v275 == (uint64_t ***)-8192;
        if (v278)
          v276 = v274;
        v279 = v273 + v277++;
        v273 = v279 & v272;
        v274 = (uint64_t ****)(v271 + 40 * v273);
        v275 = *v274;
        if (*v274 == v268)
          goto LABEL_326;
      }
      if (v276)
        v615 = v276;
      else
        v615 = v274;
    }
    else
    {
      v615 = 0;
    }
    v274 = (uint64_t ****)sub_1C541AB24(v269 + 2480, (uint64_t)&v728, (uint64_t *)&v728, v615);
    v616 = (uint64_t ***)v728;
    v274[3] = 0;
    v274[4] = 0;
    *v274 = v616;
    v274[1] = (uint64_t ***)(v274 + 3);
    v274[2] = (uint64_t ***)0x100000000;
LABEL_326:
    v280 = *((unsigned int *)v274 + 4);
    if ((_DWORD)v280)
    {
      v281 = (uint64_t *)(v274[1] + 1);
      v282 = 16 * v280;
      while (*((_DWORD *)v281 - 2))
      {
        v281 += 2;
        v282 -= 16;
        if (!v282)
          goto LABEL_340;
      }
      v283 = *v281;
      if (*v281)
      {
        v284 = *(_QWORD *)(v283 + 16);
        v285 = (uint64_t *)(v284 & 0xFFFFFFFFFFFFFFF8);
        if ((v284 & 4) != 0)
          v285 = (uint64_t *)*v285;
        Impl = (void *)llvm::DILocation::getImpl(v285, *(_DWORD *)(v283 + 28), 0, v283, 0, 0, 0, 1);
        v728 = Impl;
        if (Impl)
          llvm::MetadataTracking::track((uint64_t)&v728, (unsigned __int8 *)Impl, 2);
        if (v691)
          llvm::MetadataTracking::untrack((uint64_t)&v691, v691);
        v691 = (unsigned __int8 *)v728;
        if (v728)
          llvm::MetadataTracking::retrack((uint64_t)&v728, (unsigned __int8 *)v728, (uint64_t)&v691);
      }
    }
    goto LABEL_340;
  }
  return 1;
}

_QWORD *sub_1C586C0D4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62A9AA0(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1C586C18C(uint64_t a1, const llvm::Instruction *a2, llvm::Value *this)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  llvm::StackSafetyGlobalInfo *v10;
  int v12;

  v6 = *(_QWORD *)this;
  v7 = *(_DWORD *)(*(_QWORD *)this + 8);
  v8 = v7;
  v9 = *(_QWORD *)this;
  if ((v7 & 0xFE) == 0x12)
  {
    v9 = **(_QWORD **)(v6 + 16);
    v8 = *(_DWORD *)(v9 + 8);
  }
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(v9 + 16) + 8);
  if (v8 >= 0x100)
  {
    v12 = *(_DWORD *)(a1 + 32);
    if (v12 != 30 && v12 != 25)
      return 1;
    if ((v7 & 0xFE) == 0x12)
    {
      v6 = **(_QWORD **)(v6 + 16);
      v7 = *(_DWORD *)(v6 + 8);
    }
    if ((v7 & 0xFE) == 0x12)
      v7 = *(_DWORD *)(**(_QWORD **)(v6 + 16) + 8);
    if (v7 >> 8 == 3 || v7 >> 8 == 5)
      return 1;
  }
  if (llvm::Value::isSwiftError(this)
    || *((_BYTE *)this + 16) == 59 && byte_1EF8F3E70 && !sub_1C586C2B4(a1, (uint64_t)this))
  {
    return 1;
  }
  v10 = *(llvm::StackSafetyGlobalInfo **)(a1 + 1008);
  return v10 && llvm::StackSafetyGlobalInfo::stackAccessIsSafe(v10, a2) && llvm::findAllocaForValue(this, 0);
}

BOOL sub_1C586C2B4(uint64_t a1, uint64_t a2)
{
  const llvm::AllocaInst *v4;
  BOOL v5;
  _BOOL8 v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v16;

  v16 = 0;
  if (sub_1C6144BDC(*(_QWORD *)(a1 + 1016), *(_DWORD *)(a1 + 1032), a2, &v16))
    v5 = v16 == *(_QWORD *)(a1 + 1016) + 16 * *(unsigned int *)(a1 + 1032);
  else
    v5 = 1;
  if (v5)
  {
    v8 = a1 + 1016;
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(unsigned __int8 *)(v9 + 8);
    if (v10 > 0x11)
      goto LABEL_21;
    if (((1 << v10) & 0xAC7F) != 0)
    {
LABEL_9:
      if (*(_BYTE *)(*(_QWORD *)(a2 - 32) + 16) != 16
        || ((v11 = *(_QWORD *)(a2 + 40), (v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80)) != 0)
          ? (v13 = v12 - 24)
          : (v13 = 0),
            v11 != v13 || (*(_WORD *)(a2 + 18) & 0x40) != 0 || sub_1C586C400((llvm::AllocaInst *)a2)))
      {
        if (!byte_1EF8F3E70 || (llvm::isAllocaPromotable((llvm *)a2, v4) & 1) == 0)
        {
          v14 = *(_WORD *)(a2 + 18);
          if ((v14 & 0x40) == 0)
          {
            v6 = (v14 & 0x80) == 0;
LABEL_28:
            v16 = a2;
            *((_BYTE *)sub_1C62A9984(v8, &v16) + 8) = v6;
            return v6;
          }
        }
      }
LABEL_27:
      v6 = 0;
      goto LABEL_28;
    }
    if (((1 << v10) & 0x30000) == 0)
    {
LABEL_21:
      if ((v10 & 0xFE) != 0x12 && v10 != 21)
        goto LABEL_27;
    }
    if (!llvm::Type::isSizedDerivedType(v9, 0))
      goto LABEL_27;
    goto LABEL_9;
  }
  return *(_BYTE *)(v16 + 8) != 0;
}

uint64_t sub_1C586C400(llvm::AllocaInst *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  BOOL v10;
  const char *v11;
  char v12;
  char v13;

  if (llvm::AllocaInst::isArrayAllocation(a1))
  {
    if (*(_BYTE *)(*((_QWORD *)a1 - 4) + 16) == 16)
      v2 = *((_QWORD *)a1 - 4);
    else
      v2 = 0;
    v3 = (uint64_t *)(v2 + 24);
    if (*(_DWORD *)(v2 + 32) >= 0x41u)
      v3 = (uint64_t *)*v3;
    v4 = *v3;
  }
  else
  {
    v4 = 1;
  }
  v5 = *((_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 56) + 40) + 272;
  sub_1C4768AD0(v6, v5);
  v8 = (unint64_t)(v7 + 7) >> 3;
  v10 = v9 == 1;
  llvm::DataLayout::getAlignment(v6, v5);
  v13 = v12;
  if (v10)
  return (((1 << v13) + v8 - 1) & -(1 << v13)) * v4;
}

BOOL sub_1C586C4D8(llvm::DataLayout **a1, llvm::Value *a2, unint64_t a3)
{
  unsigned int v4;
  _BOOL8 result;
  void **v7;
  char *v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL8 v11;
  _BOOL8 v12;
  void **v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;

  llvm::ObjectSizeOffsetVisitor::compute((void **)&v13, a1, a2);
  v4 = v14;
  if (v14 >= 2 && v16 >= 2)
  {
    v7 = v13;
    if (v14 < 0x41)
      v7 = (void **)&v13;
    v8 = (char *)*v7;
    if (v16 > 0x40)
      v9 = *v15;
    else
      v9 = (uint64_t)((_QWORD)v15 << -(char)v16) >> -(char)v16;
    v10 = (unint64_t)v8 >= v9 && (unint64_t)&v8[-v9] >= a3 >> 3;
    result = v9 >= 0 && v10;
  }
  else
  {
    result = 0;
  }
  if (v16 >= 0x41 && v15)
  {
    v11 = result;
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
    result = v11;
    v4 = v14;
  }
  if (v4 >= 0x41)
  {
    if (v13)
    {
      v12 = result;
      MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
      return v12;
    }
  }
  return result;
}

void sub_1C586C5E0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, __int16 a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned __int8 a9, unsigned int a10)
{
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  const llvm::APInt *v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  uint64_t **v21;
  uint64_t v22;
  llvm::ConstantInt *v23;
  unsigned int v24;
  int v25;
  llvm::ValueHandleBase *v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value **v30;
  llvm::Value *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  char *v34;
  char *v35;
  llvm::Value ***v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  llvm::Value *v40;
  llvm::Value ****v41;
  llvm::Value *v42;
  char *v43;
  char *v44;
  unsigned __int8 **v45;
  int v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  llvm::Value **v52;
  uint64_t v53;
  unsigned int v54;
  __int16 v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  llvm::Value **v58;
  llvm::ValueHandleBase *v59;
  __int16 v60;
  void *v61;
  unsigned int v62;
  _QWORD v63[6];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (a7 - 8 <= 0x38 && ((1 << (a7 - 8)) & 0x100000001000101) != 0 || a7 == 128)
  {
    if ((a5 & 0xFF00) == 0 || 1 << a5 >= (unint64_t)a6 || (v15 = a7 >> 3, 1 << a5 >= v15))
    {
      sub_1C586CADC(a1, a2, a3, a4, a7, a8, 0, a9, a10);
      return;
    }
  }
  else
  {
    v15 = a7 >> 3;
  }
  sub_1C4773D54((uint64_t)&v61, a3, 0, 0, 0);
  v52 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 72), v15, 0);
  v16 = *(_QWORD *)(a1 + 72);
  v55 = 257;
  v17 = sub_1C5098D9C((uint64_t *)&v61, a4, v16, (uint64_t)&v53);
  v19 = v17;
  if (a9)
  {
    v20 = (_QWORD *)(a1 + 32 * a8);
    if (a10)
    {
      v21 = (uint64_t **)v20[112];
      v22 = v20[113];
      v57 = v17;
      v58 = v52;
      v23 = *(llvm::ConstantInt **)(*(_QWORD *)v64 + 1960);
      v24 = *(_DWORD *)(*(_QWORD *)v64 + 1968);
      v54 = v24 >> 8;
      if (v24 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v53, a10, 0);
      }
      else
      {
        if (v24 <= 0xFF)
          v25 = 0;
        else
          v25 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v24);
        v53 = v25 & a10;
      }
      v26 = llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v53, v18);
      if (v54 >= 0x41 && v53)
        MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
      v59 = v26;
      v55 = 257;
      v27 = v21;
      v28 = v22;
      v29 = 3;
    }
    else
    {
      v27 = (uint64_t **)v20[110];
      v28 = v20[111];
      v57 = v17;
      v58 = v52;
      v55 = 257;
      v29 = 2;
    }
    sub_1C4774778((uint64_t *)&v61, v27, v28, (uint64_t *)&v57, v29, (uint64_t)&v53, 0);
    goto LABEL_22;
  }
  v51 = a2;
  v30 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 72), (v15 - 1), 0);
  v60 = 257;
  v31 = (llvm::Value *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v65 + 16))(v65, v19, v30, 0, 0);
  if (!v31)
  {
    v55 = 257;
    v34 = (char *)operator new(0x80uLL);
    v35 = v34;
    *((_QWORD *)v34 + 4) = 0;
    v36 = (llvm::Value ***)(v34 + 32);
    *((_QWORD *)v34 + 5) = 0;
    *((_QWORD *)v34 + 6) = 0;
    *((_QWORD *)v34 + 8) = *(_QWORD *)v19;
    v31 = (llvm::Value *)(v34 + 64);
    *((_QWORD *)v34 + 3) = v34 + 64;
    *((_QWORD *)v34 + 7) = v34 + 64;
    *((_QWORD *)v34 + 9) = 0;
    v34[80] = 41;
    v34[81] = 0;
    *((_WORD *)v34 + 41) = 0;
    *((_DWORD *)v34 + 21) = 2;
    *(_OWORD *)(v34 + 88) = 0u;
    *(_OWORD *)(v34 + 104) = 0u;
    *((_DWORD *)v34 + 30) = 0;
    *(_QWORD *)v34 = v19;
    v39 = *((_QWORD *)v19 + 1);
    v38 = v19 + 8;
    v37 = v39;
    *((_QWORD *)v34 + 1) = v39;
    if (v39)
      *(_QWORD *)(v37 + 16) = v34 + 8;
    *((_QWORD *)v34 + 2) = v38;
    *v38 = v34;
    if (*((_QWORD *)v34 + 4))
    {
      **((_QWORD **)v34 + 6) = *((_QWORD *)v34 + 5);
      v50 = *((_QWORD *)v34 + 5);
      if (v50)
        *(_QWORD *)(v50 + 16) = *((_QWORD *)v34 + 6);
    }
    *v36 = v30;
    if (v30)
    {
      v42 = v30[1];
      v41 = (llvm::Value ****)(v30 + 1);
      v40 = v42;
      *((_QWORD *)v34 + 5) = v42;
      if (v42)
        *((_QWORD *)v40 + 2) = v34 + 40;
      *((_QWORD *)v34 + 6) = v41;
      *v41 = v36;
    }
    llvm::Value::setName((uint64_t ***)v34 + 8, (uint64_t)&v53);
    (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, _QWORD, _QWORD))(*(_QWORD *)v66 + 16))(v66, v31, &v57, v63[4], v63[5]);
    if (v62)
    {
      v43 = (char *)v61;
      v44 = (char *)v61 + 16 * v62;
      v45 = (unsigned __int8 **)(v35 + 112);
      do
      {
        v46 = *(_DWORD *)v43;
        v47 = (unsigned __int8 *)*((_QWORD *)v43 + 1);
        if (v47)
        {
          if (!v46)
          {
            v56 = (unsigned __int8 *)*((_QWORD *)v43 + 1);
            llvm::MetadataTracking::track((uint64_t)&v56, v47, 2);
            v48 = *v45;
            goto LABEL_44;
          }
        }
        else
        {
          v48 = *v45;
          if (!*v45 && (v35[87] & 0x20) == 0)
            goto LABEL_41;
          if (!v46)
          {
            v56 = 0;
LABEL_44:
            if (v48)
              llvm::MetadataTracking::untrack((uint64_t)(v35 + 112), v48);
            v49 = v56;
            *v45 = v56;
            if (v49)
              llvm::MetadataTracking::retrack((uint64_t)&v56, v49, (uint64_t)(v35 + 112));
            goto LABEL_41;
          }
        }
        llvm::Value::setMetadata(v31, *(_DWORD *)v43, (llvm::MDNode *)v47);
LABEL_41:
        v43 += 16;
      }
      while (v43 != v44);
    }
  }
  v32 = *(_QWORD *)a4;
  v55 = 257;
  v33 = sub_1C4773E38((uint64_t *)&v61, 48, (unsigned __int8 *)v31, v32, (uint64_t)&v53);
  sub_1C586CADC(a1, v51, a3, a4, 8u, a8, v52, 0, a10);
  sub_1C586CADC(a1, v51, a3, v33, 8u, a8, v52, 0, a10);
LABEL_22:
  if (v61 != v63)
    free(v61);
}

void sub_1C586CADC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5, unsigned int a6, llvm::Value **a7, int a8, unsigned int a9)
{
  llvm::Value **v10;
  unsigned int v11;
  uint64_t *v14;
  uint64_t v15;
  int v17;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  const llvm::APInt *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::ValueHandleBase *v36;
  llvm::Value *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t Declaration;
  uint64_t v43;
  uint64_t **v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t *v47;
  int v48;
  llvm::PointerType *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  const llvm::APInt *v52;
  _QWORD *v53;
  uint64_t **v54;
  uint64_t v55;
  llvm::ConstantInt *v56;
  unsigned int v57;
  int v58;
  llvm::ValueHandleBase *v59;
  uint64_t *v60;
  unint64_t *v61;
  uint64_t **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  llvm::Type *v68;
  llvm::Value **NullValue;
  unsigned __int8 *v70;
  char v71;
  char v72;
  char *v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  llvm::Value *v78;
  llvm::Value *v79;
  llvm::Value *v80;
  _BOOL4 v81;
  uint64_t *v82;
  char *v83;
  uint64_t v84;
  llvm::Value **v85;
  uint64_t v86;
  uint64_t *v87;
  const llvm::APInt *v88;
  llvm::ConstantInt *v89;
  unsigned int v90;
  int v91;
  llvm::ValueHandleBase *v92;
  uint64_t v93;
  uint64_t **v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unsigned __int8 **v103;
  unsigned __int8 *v104;
  char *v105;
  char *v106;
  unsigned __int8 **v107;
  int v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  llvm::MDNode *BranchWeights;
  char *v113;
  llvm::BasicBlock *Successor;
  uint64_t *v115;
  uint64_t *v116;
  llvm::Value **v117;
  uint64_t v118;
  llvm::Value **v119;
  llvm::Value *v120;
  char *v121;
  char *v122;
  llvm::Value ***v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  llvm::Value *v127;
  llvm::Value ****v128;
  llvm::Value *v129;
  char *v130;
  char *v131;
  unsigned __int8 **v132;
  int v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  uint64_t v137;
  unsigned __int8 *v138;
  llvm::Value *v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  uint64_t v149;
  llvm::Value *v150;
  _QWORD *v151;
  uint64_t *v152;
  _DWORD *v153;
  _DWORD *v154;
  int v155;
  llvm::ConstantInt *v156;
  unsigned int v157;
  char v158;
  uint64_t v159;
  uint64_t *v160;
  char *v161;
  uint64_t v162;
  llvm::Value **v164;
  unsigned int v166;
  uint64_t v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  unsigned __int8 *v172;
  llvm::Value **v173;
  llvm::ValueHandleBase *v174;
  __int16 v175;
  void *v176;
  unsigned int v177;
  uint64_t v178;
  __int16 v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  llvm::ValueHandleBase *v186;
  __int16 v187;
  unint64_t v188;
  unsigned int v189;
  _BYTE v190[16];
  __int16 v191;
  uint64_t *v192;
  uint64_t v193;

  v10 = a7;
  v11 = a6;
  v14 = (uint64_t *)a3;
  v15 = a2;
  v193 = *MEMORY[0x1E0C80C00];
  v17 = *(_DWORD *)(a1 + 32);
  if (v17 != 30 && v17 != 25)
    goto LABEL_24;
  v19 = *(_QWORD *)a4;
  v20 = *(_DWORD *)(*(_QWORD *)a4 + 8);
  v21 = v20;
  v22 = *(_QWORD *)a4;
  if ((v20 & 0xFE) == 0x12)
  {
    v22 = **(_QWORD **)(v19 + 16);
    v21 = *(_DWORD *)(v22 + 8);
  }
  if ((v21 & 0xFE) == 0x12)
    v21 = *(_DWORD *)(**(_QWORD **)(v22 + 16) + 8);
  v23 = v21 >> 8;
  if (v23 != 3 && v23 != 5)
  {
    if ((v20 & 0xFE) == 0x12)
    {
      v19 = **(_QWORD **)(v19 + 16);
      v20 = *(_DWORD *)(v19 + 8);
    }
    if ((v20 & 0xFE) == 0x12)
      v20 = *(_DWORD *)(**(_QWORD **)(v19 + 16) + 8);
    if (v20 <= 0xFF)
    {
      sub_1C4773D54((uint64_t)&v188, a3, 0, 0, 0);
      v25 = llvm::PointerType::get((llvm::PointerType *)(*v192 + 1912), 0);
      v179 = 257;
      v26 = (uint64_t *)sub_1C5098D9C((uint64_t *)&v188, a4, v25, (uint64_t)&v176);
      v27 = *(uint64_t ***)(a1 + 1040);
      v28 = *(_QWORD *)(a1 + 1048);
      v185 = (unint64_t)v26;
      v179 = 257;
      v29 = (_QWORD *)sub_1C4774778((uint64_t *)&v188, v27, v28, (uint64_t *)&v185, 1, (uint64_t)&v176, 0);
      v30 = *(uint64_t ***)(a1 + 1056);
      v31 = *(_QWORD *)(a1 + 1064);
      v185 = (unint64_t)v26;
      v179 = 257;
      v32 = sub_1C4774778((uint64_t *)&v188, v30, v31, (uint64_t *)&v185, 1, (uint64_t)&v176, 0);
      v179 = 257;
      v34 = sub_1C4773594((uint64_t)&v188, v29, v32, (uint64_t)&v176);
      v35 = *v192;
      v36 = *(llvm::ValueHandleBase **)(*v192 + 1560);
      if (!v36)
      {
        v156 = *(llvm::ConstantInt **)(v35 + 1888);
        v157 = *(_DWORD *)(v35 + 1896);
        v177 = v157 >> 8;
        if (v157 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v176, 1, 0);
        }
        else
        {
          if (v157 <= 0xFF)
            v158 = 0;
          else
            v158 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v157);
          v176 = (void *)(v158 & 1);
        }
        v36 = llvm::ConstantInt::get(v156, (llvm::LLVMContext *)&v176, v33);
        if (v177 >= 0x41 && v176)
          MEMORY[0x1CAA32F9C](v176, 0x1000C8000313F17);
        *(_QWORD *)(v35 + 1560) = v36;
      }
      v179 = 257;
      v37 = (llvm::Value *)sub_1C4774B48((uint64_t)&v188, 33, (uint64_t)v36, v34, (uint64_t)&v176);
      v14 = (uint64_t *)sub_1C5EBFBC0(v37, v14, 0, 0, 0, 0, 0, 0);
      v10 = a7;
      if ((_BYTE *)v188 != v190)
        free((void *)v188);
      v15 = a2;
      v11 = a6;
    }
    if (v14)
    {
LABEL_24:
      sub_1C4773D54((uint64_t)&v176, (uint64_t)v14, 0, 0, 0);
      v38 = __clz(__rbit32(a5 >> 3));
      if (a5 >= 8)
        v39 = v38;
      else
        v39 = 32;
      if (v11)
        v40 = 32;
      else
        v40 = 0;
      if (a8)
      {
        if (byte_1EF8F40B0)
        {
          v41 = (2 * (_DWORD)v39 + v40) | *(unsigned __int8 *)(a1 + 60);
          Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(v180 + 56) + 40), 6, 0, 0);
          v43 = Declaration;
          if (Declaration)
            v44 = *(uint64_t ***)(Declaration + 24);
          else
            v44 = 0;
          v64 = *(_QWORD *)(a1 + 80);
          v191 = 257;
          v172 = sub_1C5098D9C((uint64_t *)&v176, a4, v64, (uint64_t)&v188);
          v173 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 88), v41, 0);
          v187 = 257;
          v60 = (uint64_t *)&v172;
          v61 = &v185;
          v62 = v44;
          v63 = v43;
        }
        else
        {
          v50 = *(_QWORD *)(a1 + 72);
          v191 = 257;
          v51 = sub_1C5098D9C((uint64_t *)&v176, a4, v50, (uint64_t)&v188);
          v170 = v51;
          v53 = (_QWORD *)(a1 + 160 * v11 + 16 * v39);
          if (!a9)
          {
            v62 = (uint64_t **)v53[62];
            v63 = v53[63];
            v191 = 257;
            v60 = (uint64_t *)&v170;
            v61 = &v188;
            v65 = 1;
            goto LABEL_52;
          }
          v54 = (uint64_t **)v53[72];
          v55 = v53[73];
          v185 = (unint64_t)v51;
          v56 = *(llvm::ConstantInt **)(*(_QWORD *)v182 + 1960);
          v57 = *(_DWORD *)(*(_QWORD *)v182 + 1968);
          v189 = v57 >> 8;
          if (v57 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v188, a9, 0);
          }
          else
          {
            if (v57 <= 0xFF)
              v58 = 0;
            else
              v58 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v57);
            v188 = v58 & a9;
          }
          v59 = llvm::ConstantInt::get(v56, (llvm::LLVMContext *)&v188, v52);
          if (v189 >= 0x41 && v188)
            MEMORY[0x1CAA32F9C](v188, 0x1000C8000313F17);
          v186 = v59;
          v191 = 257;
          v60 = (uint64_t *)&v185;
          v61 = &v188;
          v62 = v54;
          v63 = v55;
        }
        v65 = 2;
LABEL_52:
        sub_1C4774778((uint64_t *)&v176, v62, v63, v60, v65, (uint64_t)v61, 0);
LABEL_88:
        if (v176 != &v178)
          free(v176);
        return;
      }
      v45 = *(_QWORD *)(a1 + 72);
      v191 = 257;
      v46 = sub_1C5098D9C((uint64_t *)&v176, a4, v45, (uint64_t)&v188);
      v170 = v46;
      v47 = *(uint64_t **)a1;
      v48 = a5 >> *(_DWORD *)(a1 + 96);
      if (v48 <= 8)
        v48 = 8;
      LODWORD(v188) = v48;
      v168 = v15;
      v166 = v11;
      v162 = v39;
      v164 = v10;
      if (v48 <= 63)
      {
        switch(v48)
        {
          case 32:
            v49 = (llvm::PointerType *)(*v47 + 1960);
            goto LABEL_56;
          case 16:
            v49 = (llvm::PointerType *)(*v47 + 1936);
            goto LABEL_56;
          case 8:
            v49 = (llvm::PointerType *)(*v47 + 1912);
            goto LABEL_56;
        }
      }
      else
      {
        if (v48 == 64)
        {
          v49 = (llvm::PointerType *)(*v47 + 1984);
LABEL_56:
          v66 = llvm::PointerType::get(v49, 0);
          v67 = (unsigned __int8 *)sub_1C586D9F0(a1, (llvm::ConstantInt **)v46, (uint64_t)&v176);
          NullValue = llvm::Constant::getNullValue(v49, v68);
          v187 = 257;
          v70 = sub_1C4773E38((uint64_t *)&v176, 48, v67, v66, (uint64_t)&v185);
          v175 = 257;
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v180 + 56) + 40) + 272, (uint64_t)v49);
          v72 = v71;
          v73 = (char *)operator new(0x60uLL);
          v74 = v73;
          *((_QWORD *)v73 + 2) = 0;
          *((_QWORD *)v73 + 3) = v73 + 32;
          v191 = 257;
          *((_QWORD *)v73 + 4) = v49;
          *((_QWORD *)v73 + 5) = 0;
          *((_WORD *)v73 + 24) = 60;
          *((_DWORD *)v73 + 13) = 1;
          *(_OWORD *)(v73 + 56) = 0u;
          *(_OWORD *)(v73 + 72) = 0u;
          *((_DWORD *)v73 + 22) = 0;
          *(_QWORD *)v73 = v70;
          *((_QWORD *)v73 + 1) = 0;
          if (v70)
          {
            v77 = *((_QWORD *)v70 + 1);
            v76 = v70 + 8;
            v75 = v77;
            *((_QWORD *)v73 + 1) = v77;
            if (v77)
              *(_QWORD *)(v75 + 16) = v73 + 8;
            *((_QWORD *)v73 + 2) = v76;
            *v76 = v73;
          }
          *((_WORD *)v73 + 25) = 2 * (v72 & 0x3F);
          v73[92] = 1;
          v78 = (llvm::Value *)(v73 + 32);
          llvm::Value::setName((uint64_t ***)v73 + 4, (uint64_t)&v188);
          (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, char *))(*(_QWORD *)v184 + 16))(v184, v78, &v172, v180, v181);
          if (!v177)
          {
LABEL_61:
            v191 = 257;
            v79 = (llvm::Value *)sub_1C4774B48((uint64_t)&v176, 33, (uint64_t)v78, (uint64_t)NullValue, (uint64_t)&v188);
            v80 = v79;
            if (!byte_1ED811800 && 8 << *(_DWORD *)(a1 + 96) <= (unint64_t)a5)
            {
              v81 = *(_BYTE *)(a1 + 61) == 0;
              v82 = v14;
              goto LABEL_64;
            }
            v185 = *(_QWORD *)a1;
            v188 = 0x186A000000001;
            BranchWeights = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v185, (uint64_t)&v188, 2);
            v113 = sub_1C5EBFBC0(v80, v14, 0, BranchWeights, 0, 0, 0, 0);
            Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v113, 0);
            v115 = 0;
            v180 = *((_QWORD *)v113 + 5);
            v181 = v113 + 24;
            v160 = (uint64_t *)(v113 + 24);
            v116 = (uint64_t *)*((_QWORD *)v113 + 6);
            v188 = (unint64_t)v116;
            if (v116)
            {
              llvm::MetadataTracking::track((uint64_t)&v188, (unsigned __int8 *)v116, 2);
              v115 = (uint64_t *)v188;
            }
            sub_1C4774EF4((uint64_t)&v176, 0, (uint64_t)v115);
            if (v188)
              llvm::MetadataTracking::untrack((uint64_t)&v188, (unsigned __int8 *)v188);
            v117 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 72), ~(-1 << *(_DWORD *)(a1 + 96)), 0);
            v191 = 257;
            v118 = sub_1C4D89BCC((uint64_t)&v176, v170, (uint64_t)v117, (uint64_t)&v188);
            if (a5 >= 0x10)
            {
              v119 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 72), (a5 >> 3) - 1, 0);
              v187 = 257;
              v120 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v183 + 16))(v183, v118, v119, 0, 0);
              if (!v120)
              {
                v191 = 257;
                v121 = (char *)operator new(0x80uLL);
                v122 = v121;
                *(_QWORD *)v121 = 0;
                *((_QWORD *)v121 + 2) = 0;
                *((_QWORD *)v121 + 1) = 0;
                *((_QWORD *)v121 + 5) = 0;
                *((_QWORD *)v121 + 6) = 0;
                *((_QWORD *)v121 + 4) = 0;
                v123 = (llvm::Value ***)(v121 + 32);
                *((_QWORD *)v121 + 8) = *(_QWORD *)v118;
                v120 = (llvm::Value *)(v121 + 64);
                *((_QWORD *)v121 + 3) = v121 + 64;
                *((_QWORD *)v121 + 7) = v121 + 64;
                *((_QWORD *)v121 + 9) = 0;
                v121[80] = 41;
                v121[81] = 0;
                *((_WORD *)v121 + 41) = 0;
                *((_DWORD *)v121 + 21) = 2;
                *((_DWORD *)v121 + 30) = 0;
                *(_OWORD *)(v121 + 104) = 0u;
                *(_OWORD *)(v121 + 88) = 0u;
                *(_QWORD *)v121 = v118;
                v126 = *(_QWORD *)(v118 + 8);
                v125 = (_QWORD *)(v118 + 8);
                v124 = v126;
                *((_QWORD *)v121 + 1) = v126;
                if (v126)
                  *(_QWORD *)(v124 + 16) = v121 + 8;
                v161 = v113;
                *((_QWORD *)v121 + 2) = v125;
                *v125 = v121;
                if (*((_QWORD *)v121 + 4))
                {
                  **((_QWORD **)v121 + 6) = *((_QWORD *)v121 + 5);
                  v159 = *((_QWORD *)v121 + 5);
                  if (v159)
                    *(_QWORD *)(v159 + 16) = *((_QWORD *)v121 + 6);
                }
                *v123 = v119;
                if (v119)
                {
                  v129 = v119[1];
                  v128 = (llvm::Value ****)(v119 + 1);
                  v127 = v129;
                  *((_QWORD *)v121 + 5) = v129;
                  if (v129)
                    *((_QWORD *)v127 + 2) = v121 + 40;
                  *((_QWORD *)v121 + 6) = v128;
                  *v128 = v123;
                }
                llvm::Value::setName((uint64_t ***)v121 + 8, (uint64_t)&v188);
                (*(void (**)(uint64_t, llvm::Value *, unint64_t *, uint64_t, char *))(*(_QWORD *)v184 + 16))(v184, v120, &v185, v180, v181);
                if (v177)
                {
                  v130 = (char *)v176;
                  v131 = (char *)v176 + 16 * v177;
                  v132 = (unsigned __int8 **)(v122 + 112);
                  do
                  {
                    v133 = *(_DWORD *)v130;
                    v134 = (unsigned __int8 *)*((_QWORD *)v130 + 1);
                    if (v134)
                    {
                      if (!v133)
                      {
                        v172 = (unsigned __int8 *)*((_QWORD *)v130 + 1);
                        llvm::MetadataTracking::track((uint64_t)&v172, v134, 2);
                        v135 = *v132;
                        goto LABEL_131;
                      }
                    }
                    else
                    {
                      v135 = *v132;
                      if (!*v132 && (v122[87] & 0x20) == 0)
                        goto LABEL_128;
                      if (!v133)
                      {
                        v172 = 0;
LABEL_131:
                        if (v135)
                          llvm::MetadataTracking::untrack((uint64_t)(v122 + 112), v135);
                        v136 = v172;
                        *v132 = v172;
                        if (v136)
                          llvm::MetadataTracking::retrack((uint64_t)&v172, v136, (uint64_t)(v122 + 112));
                        goto LABEL_128;
                      }
                    }
                    llvm::Value::setMetadata(v120, *(_DWORD *)v130, (llvm::MDNode *)v134);
LABEL_128:
                    v130 += 16;
                  }
                  while (v130 != v131);
                }
                v113 = v161;
              }
              v118 = (uint64_t)v120;
            }
            v137 = *(_QWORD *)v78;
            v191 = 257;
            v138 = sub_1C4D8D514((uint64_t *)&v176, (unsigned __int8 *)v118, v137, 0, (uint64_t)&v188);
            v191 = 257;
            v79 = (llvm::Value *)sub_1C4774B48((uint64_t)&v176, 39, (uint64_t)v138, (uint64_t)v78, (uint64_t)&v188);
            v139 = v79;
            if (!*(_BYTE *)(a1 + 61))
            {
              v140 = v113;
              v141 = *(uint64_t **)a1;
              v191 = 257;
              v142 = *((_QWORD *)Successor + 7);
              v143 = operator new();
              *(_QWORD *)v143 = *v141 + 1600;
              *(_QWORD *)(v143 + 8) = 0;
              v144 = *(_DWORD *)(v143 + 20) & 0xC0000000;
              *(_QWORD *)(v143 + 24) = 0;
              v145 = v143 + 24;
              *(_DWORD *)(v143 + 16) = 22;
              *(_DWORD *)(v143 + 20) = v144;
              *(_QWORD *)(v143 + 32) = 0;
              *(_QWORD *)(v143 + 40) = v143 + 40;
              *(_QWORD *)(v143 + 48) = v143 + 40;
              *(_QWORD *)(v143 + 56) = 0;
              v85 = v164;
              if (v142)
              {
                llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v142 + 72, (_QWORD *)v143);
                v146 = *((_QWORD *)Successor + 3);
                *(_QWORD *)(v143 + 24) = v146;
                *(_QWORD *)(v143 + 32) = (char *)Successor + 24;
                *(_QWORD *)(v146 + 8) = v145;
                *((_QWORD *)Successor + 3) = v145;
              }
              llvm::Value::setName((uint64_t ***)v143, (uint64_t)&v188);
              v83 = (char *)operator new(0x40uLL);
              *((_DWORD *)v83 + 5) &= 0x38000000u;
              *(_QWORD *)v83 = **(_QWORD **)a1 + 1576;
              *((_QWORD *)v83 + 1) = 0;
              v83[16] = 35;
              *(_OWORD *)(v83 + 44) = 0u;
              *(_OWORD *)(v83 + 33) = 0u;
              *(_OWORD *)(v83 + 17) = 0u;
              *(_WORD *)(v143 + 18) &= ~0x8000u;
              v147 = *(_QWORD *)(v143 + 40);
              *((_QWORD *)v83 + 4) = v143 + 40;
              *((_QWORD *)v83 + 5) = v143;
              *((_QWORD *)v83 + 3) = v147;
              *(_QWORD *)(v147 + 8) = v83 + 24;
              *(_QWORD *)(v143 + 40) = v83 + 24;
              v148 = operator new(0xA0uLL);
              v149 = 0;
              v150 = (llvm::Value *)(v148 + 24);
              v148[29] = v148[29] & 0x38000000 | 3;
              v86 = v162;
              do
              {
                v151 = &v148[v149];
                *v151 = 0;
                v151[1] = 0;
                v151[2] = 0;
                v151[3] = v150;
                v149 += 8;
              }
              while (v149 != 24);
              llvm::BranchInst::BranchInst((llvm::BranchInst *)(v148 + 24), (llvm::BasicBlock *)v143, Successor, v139, 0);
              v152 = v160;
              if (!v140)
                v152 = 0;
              v188 = (unint64_t)v152;
              llvm::ReplaceInstWithInst(*((_QWORD *)v140 + 5) + 40, (uint64_t **)&v188, v150);
              v84 = v168;
LABEL_65:
              v171 = v170;
              v87 = (uint64_t *)sub_1C4773D54((uint64_t)&v188, (uint64_t)v83, 0, 0, 0);
              if (a9)
              {
                v89 = *(llvm::ConstantInt **)(*v192 + 1960);
                v90 = *(_DWORD *)(*v192 + 1968);
                LODWORD(v186) = v90 >> 8;
                if (v90 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v185, a9, 0);
                }
                else
                {
                  if (v90 <= 0xFF)
                    v91 = 0;
                  else
                    v91 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v90);
                  v185 = v91 & a9;
                }
                v92 = llvm::ConstantInt::get(v89, (llvm::LLVMContext *)&v185, v88);
                if (v186 >= 0x41 && v185)
                  MEMORY[0x1CAA32F9C](v185, 0x1000C8000313F17);
                if (v85)
                {
                  v93 = a1 + 32 * v166;
                  v94 = *(uint64_t ***)(v93 + 832);
                  v95 = *(_QWORD *)(v93 + 840);
                  v172 = v170;
                  v173 = v85;
                  v174 = v92;
                  v187 = 257;
                  v87 = (uint64_t *)&v188;
                  v96 = (uint64_t *)&v172;
                  v97 = 3;
LABEL_79:
                  v101 = sub_1C4774778(v87, v94, v95, v96, v97, (uint64_t)&v185, 0);
                  *(_QWORD *)(v101 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v101 + 64), **(uint64_t ***)v101, -1, 28);
                  if ((_BYTE *)v188 != v190)
                    free((void *)v188);
                  v102 = *(unsigned __int8 **)(v84 + 48);
                  v169 = v102;
                  if (v102)
                    llvm::MetadataTracking::track((uint64_t)&v169, v102, 2);
                  v103 = (unsigned __int8 **)(v101 + 48);
                  if (&v169 == v103)
                  {
                    if (v169)
                      llvm::MetadataTracking::untrack((uint64_t)&v169, v169);
                  }
                  else
                  {
                    if (*v103)
                      llvm::MetadataTracking::untrack((uint64_t)v103, *v103);
                    v104 = v169;
                    *v103 = v169;
                    if (v104)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v169, v104, (uint64_t)v103);
                      v169 = 0;
                    }
                  }
                  goto LABEL_88;
                }
                v99 = a1 + 160 * v166 + 16 * v86;
                v94 = *(uint64_t ***)(v99 + 256);
                v95 = *(_QWORD *)(v99 + 264);
                v172 = v170;
                v173 = (llvm::Value **)v92;
                v187 = 257;
                v87 = (uint64_t *)&v188;
              }
              else
              {
                if (!v85)
                {
                  v100 = a1 + 160 * v166 + 16 * v86;
                  v94 = *(uint64_t ***)(v100 + 176);
                  v95 = *(_QWORD *)(v100 + 184);
                  v187 = 257;
                  v96 = (uint64_t *)&v171;
                  v97 = 1;
                  goto LABEL_79;
                }
                v98 = a1 + 32 * v166;
                v94 = *(uint64_t ***)(v98 + 816);
                v95 = *(_QWORD *)(v98 + 824);
                v172 = v170;
                v173 = v85;
                v187 = 257;
              }
              v96 = (uint64_t *)&v172;
              v97 = 2;
              goto LABEL_79;
            }
            v82 = (uint64_t *)v113;
            v81 = 0;
LABEL_64:
            v83 = sub_1C5EBFBC0(v79, v82, v81, 0, 0, 0, 0, 0);
            v84 = v168;
            v86 = v162;
            v85 = v164;
            goto LABEL_65;
          }
          v105 = (char *)v176;
          v106 = (char *)v176 + 16 * v177;
          v107 = (unsigned __int8 **)(v74 + 80);
          while (1)
          {
            v108 = *(_DWORD *)v105;
            v109 = (unsigned __int8 *)*((_QWORD *)v105 + 1);
            if (v109)
            {
              if (!v108)
              {
                v171 = (unsigned __int8 *)*((_QWORD *)v105 + 1);
                llvm::MetadataTracking::track((uint64_t)&v171, v109, 2);
                v110 = *v107;
                goto LABEL_102;
              }
            }
            else
            {
              v110 = *v107;
              if (!*v107 && (v74[55] & 0x20) == 0)
                goto LABEL_99;
              if (!v108)
              {
                v171 = 0;
LABEL_102:
                if (v110)
                  llvm::MetadataTracking::untrack((uint64_t)(v74 + 80), v110);
                v111 = v171;
                *v107 = v171;
                if (v111)
                  llvm::MetadataTracking::retrack((uint64_t)&v171, v111, (uint64_t)(v74 + 80));
                goto LABEL_99;
              }
            }
            llvm::Value::setMetadata(v78, *(_DWORD *)v105, (llvm::MDNode *)v109);
LABEL_99:
            v105 += 16;
            if (v105 == v106)
              goto LABEL_61;
          }
        }
        if (v48 == 128)
        {
          v49 = (llvm::PointerType *)(*v47 + 2008);
          goto LABEL_56;
        }
      }
      v153 = sub_1C5270984(*v47 + 2168, &v188);
      v49 = (llvm::PointerType *)*((_QWORD *)v153 + 1);
      if (!v49)
      {
        v154 = v153;
        v49 = (llvm::PointerType *)sub_1C484358C(*v47 + 2040, 24, 3);
        v155 = v188;
        *(_QWORD *)v49 = v47;
        *((_QWORD *)v49 + 2) = 0;
        *((_QWORD *)v49 + 1) = (v155 << 8) | 0xDu;
        *((_QWORD *)v154 + 1) = v49;
      }
      goto LABEL_56;
    }
  }
}

uint64_t sub_1C586D9F0(uint64_t a1, llvm::ConstantInt **a2, uint64_t a3)
{
  uint64_t v6;
  llvm::Value **v7;
  _QWORD *v8;
  uint64_t v9;
  llvm::Value **v10;
  uint64_t v11;
  char *v12;
  llvm::Value **v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::Value *v18;
  _QWORD *v19;
  llvm::Value *v20;
  _WORD v22[20];
  _BYTE v23[32];
  __int16 v24;

  v6 = *(int *)(a1 + 96);
  v24 = 257;
  v7 = llvm::ConstantInt::get(*a2, v6, 0);
  v8 = (_QWORD *)sub_1C506ED1C(a3, (uint64_t)a2, (uint64_t)v7, (uint64_t)v23, 0);
  v9 = *(_QWORD *)(a1 + 104);
  if (v9)
  {
    v10 = *(llvm::Value ***)(a1 + 992);
    if (!v10)
      v10 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a1 + 72), v9, 0);
    if (*(_BYTE *)(a1 + 112))
    {
      v24 = 257;
      return sub_1C4773594(a3, v8, (uint64_t)v10, (uint64_t)v23);
    }
    else
    {
      v22[16] = 257;
      v11 = (*(uint64_t (**)(_QWORD, _QWORD *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a3 + 72) + 16))(*(_QWORD *)(a3 + 72), v8, v10, 0, 0);
      if (!v11)
      {
        v24 = 257;
        v12 = (char *)operator new(0x80uLL);
        *((_QWORD *)v12 + 5) = 0;
        v13 = (llvm::Value **)(v12 + 40);
        *((_QWORD *)v12 + 6) = 0;
        *((_QWORD *)v12 + 8) = *v8;
        v14 = (uint64_t)(v12 + 64);
        *((_QWORD *)v12 + 3) = v12 + 64;
        *((_QWORD *)v12 + 7) = v12 + 64;
        *((_QWORD *)v12 + 9) = 0;
        v12[80] = 41;
        v12[81] = 0;
        *((_WORD *)v12 + 41) = 0;
        *((_DWORD *)v12 + 21) = 2;
        *(_OWORD *)(v12 + 88) = 0u;
        *(_OWORD *)(v12 + 104) = 0u;
        *((_DWORD *)v12 + 30) = 0;
        *(_QWORD *)v12 = v8;
        v17 = v8[1];
        v16 = v8 + 1;
        v15 = v17;
        *((_QWORD *)v12 + 1) = v17;
        if (v17)
          *(_QWORD *)(v15 + 16) = v12 + 8;
        *((_QWORD *)v12 + 2) = v16;
        *v16 = v12;
        *((_QWORD *)v12 + 4) = v10;
        if (v10)
        {
          v20 = v10[1];
          v19 = v10 + 1;
          v18 = v20;
          *v13 = v20;
          if (v20)
            *((_QWORD *)v18 + 2) = v13;
          *((_QWORD *)v12 + 6) = v19;
          *v19 = v12 + 32;
        }
        llvm::Value::setName((uint64_t ***)v12 + 8, (uint64_t)v23);
        return sub_1C4773754((uint64_t *)a3, v14, (uint64_t)v22);
      }
    }
    return v11;
  }
  return (uint64_t)v8;
}

void sub_1C586DB8C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  void *__p;
  void *v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[64];
  void *v27;
  char *v28;
  char *v29;

  v3 = *a1;
  v22 = v26;
  v23 = v26;
  v24 = 8;
  v25 = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, v3);
  v4 = v28;
  if (v28 < v29)
  {
    *(_QWORD *)v28 = v3;
    v4[8] = 0;
    v12 = v4 + 32;
    v4[24] = 0;
  }
  else
  {
    v5 = v27;
    v6 = (v28 - (_BYTE *)v27) >> 5;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 59)
      abort();
    v8 = v29 - (_BYTE *)v27;
    if ((v29 - (_BYTE *)v27) >> 4 > v7)
      v7 = v8 >> 4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 >> 59)
        sub_1C4764EE4();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v11 = &v10[32 * v6];
    *(_QWORD *)v11 = v3;
    v11[8] = 0;
    v11[24] = 0;
    v12 = v11 + 32;
    if (v4 != v5)
    {
      do
      {
        v13 = *((_OWORD *)v4 - 1);
        *((_OWORD *)v11 - 2) = *((_OWORD *)v4 - 2);
        *((_OWORD *)v11 - 1) = v13;
        v11 -= 32;
        v4 -= 32;
      }
      while (v4 != v5);
      v4 = v27;
    }
    v27 = v11;
    v28 = v12;
    v29 = &v10[32 * v9];
    if (v4)
      operator delete(v4);
  }
  v28 = v12;
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  __p = 0;
  v14 = (char *)v17 + 8;
  v15 = (char *)v17 + 8;
  v16 = 8;
  v20 = 0;
  v21 = 0;
  sub_1C4E1F928((uint64_t)&v22, (uint64_t)&v14, a2);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v15 != v14)
    free(v15);
  if (v27)
  {
    v28 = (char *)v27;
    operator delete(v27);
  }
  if (v23 != v22)
    free(v23);
}

uint64_t sub_1C586DD60(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  BOOL v3;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 16) == 84)
  {
    v2 = (_BYTE *)(result + 6008);
    v3 = *(_BYTE *)(*(_QWORD *)(a2 - 32) + 16) == 24 && *(_QWORD *)(*(_QWORD *)(result + 8) + 992) != a2;
    *v2 |= v3;
    v4 = *(_QWORD *)(a2 + 64);
    if (v4 && *(char *)(v4 + 17) < 0)
      result = 1;
    else
      result = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 47);
    v2[1] |= result;
  }
  return result;
}

__n128 sub_1C586DDF0(uint64_t a1, llvm::Instruction *this)
{
  int v4;
  uint64_t v5;
  llvm **v6;
  llvm *v7;
  unsigned int v8;
  llvm::APInt *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t AllocaForValue;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  _OWORD *v22;
  __int128 v23;
  __n128 result;
  unint64_t v25;
  BOOL v26;
  char *v27;
  _QWORD v28[4];

  v4 = *(_DWORD *)(*((_QWORD *)this - 4) + 36);
  if (v4 == 173)
  {
    *(_QWORD *)(a1 + 6000) = this;
  }
  else if (v4 == 287)
  {
    v5 = *(unsigned int *)(a1 + 5976);
    if (v5 >= *(_DWORD *)(a1 + 5980))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 5968, a1 + 5984, v5 + 1, 8);
      LODWORD(v5) = *(_DWORD *)(a1 + 5976);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 5968) + 8 * v5) = this;
    ++*(_DWORD *)(a1 + 5976);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 62))
  {
    if (llvm::Instruction::isLifetimeStartOrEnd(this))
    {
      v6 = (llvm **)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      v7 = *v6;
      v8 = *((_DWORD *)*v6 + 8);
      if (v8)
      {
        v9 = (llvm *)((char *)v7 + 24);
        if (v8 > 0x40)
        {
          if (llvm::APInt::countTrailingOnesSlowCase((llvm *)((char *)v7 + 24)) == v8
            || v8 - llvm::APInt::countLeadingZerosSlowCase(v9) > 0x40)
          {
            return result;
          }
          v10 = **(_QWORD **)v9;
        }
        else
        {
          v10 = *(_QWORD *)v9;
          if (*(_QWORD *)v9 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v8)
            return result;
        }
        if (v10 == -1)
          return result;
        v11 = *(_DWORD *)(*(_QWORD *)(a1 + 472) + 8);
        if (v11 == 13 && *(_DWORD *)(*(_QWORD *)(a1 + 472) + 8) >> 8 == 1)
        {
          if (v10 >= 2)
            return result;
        }
        else if (!(v11 >> 14) && 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11) < v10)
        {
          return result;
        }
        AllocaForValue = llvm::findAllocaForValue(v6[4], (llvm::Value *)1);
        if (!AllocaForValue)
        {
          *(_BYTE *)(a1 + 5936) = 1;
          return result;
        }
        v13 = AllocaForValue;
        if (sub_1C586C2B4(*(_QWORD *)(a1 + 8), AllocaForValue))
        {
          v28[0] = this;
          v28[1] = v13;
          v28[2] = v10;
          v28[3] = v4 == 167;
          if (*(_BYTE *)(*(_QWORD *)(v13 - 32) + 16) == 16
            && ((v14 = *(_QWORD *)(v13 + 40), (v15 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 80)) != 0)
              ? (v16 = v15 - 24)
              : (v16 = 0),
                v14 == v16 && (*(_WORD *)(v13 + 18) & 0x40) == 0))
          {
            v17 = 5664;
          }
          else
          {
            if (!byte_1EF8F3DB0)
              return result;
            v17 = 5392;
          }
          v18 = a1 + v17;
          v19 = *(unsigned int *)(v18 + 8);
          v20 = *(_QWORD *)v18;
          v21 = (char *)v28;
          if (v19 >= *(_DWORD *)(v18 + 12))
          {
            v25 = v19 + 1;
            v26 = v20 + 32 * v19 > (unint64_t)v28;
            if (v20 <= (unint64_t)v28 && v26)
            {
              v27 = (char *)v28 - v20;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v18, v18 + 16, v25, 32);
              v20 = *(_QWORD *)v18;
              v21 = &v27[*(_QWORD *)v18];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v18, v18 + 16, v25, 32);
              v20 = *(_QWORD *)v18;
              v21 = (char *)v28;
            }
          }
          v22 = (_OWORD *)(v20 + 32 * *(unsigned int *)(v18 + 8));
          result = *(__n128 *)v21;
          v23 = *((_OWORD *)v21 + 1);
          *v22 = *(_OWORD *)v21;
          v22[1] = v23;
          ++*(_DWORD *)(v18 + 8);
        }
      }
    }
  }
  return result;
}

void sub_1C586E094(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  llvm::Value *v8;
  uint64_t *v9;
  uint64_t Declaration;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char *v21;
  char *v22;
  llvm::Value *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unsigned __int8 **v38;
  int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  char *v43;
  char *v44;
  unsigned __int8 **v45;
  int v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  _BYTE v51[32];
  __int16 v52;
  unsigned __int8 *v53;
  uint64_t v54[4];
  __int16 v55;
  void *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[4];
  __int16 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v56, a2, 0, 0, 0);
  v6 = a1[59];
  v64 = 257;
  v7 = sub_1C4773E38((uint64_t *)&v56, 47, a3, v6, (uint64_t)v63);
  if (*(_BYTE *)(a2 + 16) == 29)
  {
    v8 = (llvm::Value *)v7;
    goto LABEL_7;
  }
  v9 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40);
  v63[0] = a1[59];
  Declaration = llvm::Intrinsic::getDeclaration(v9, 154, v63, 1);
  if (Declaration)
    v11 = *(uint64_t ***)(Declaration + 24);
  else
    v11 = 0;
  v64 = 257;
  v12 = sub_1C4774778((uint64_t *)&v56, v11, Declaration, 0, 0, (uint64_t)v63, 0);
  v13 = a1[59];
  v52 = 257;
  v14 = sub_1C4773E38((uint64_t *)&v56, 47, a3, v13, (uint64_t)v51);
  v55 = 257;
  v8 = (llvm::Value *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v61 + 16))(v61, v14, v12, 0, 0);
  if (!v8)
  {
    v64 = 257;
    v27 = (char *)operator new(0x80uLL);
    v28 = v27;
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 2) = 0;
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 5) = 0;
    *((_QWORD *)v27 + 6) = 0;
    *((_QWORD *)v27 + 4) = 0;
    v29 = (uint64_t *)(v27 + 32);
    *((_QWORD *)v27 + 8) = *(_QWORD *)v14;
    v8 = (llvm::Value *)(v27 + 64);
    *((_QWORD *)v27 + 3) = v27 + 64;
    *((_QWORD *)v27 + 7) = v27 + 64;
    *((_QWORD *)v27 + 9) = 0;
    v27[80] = 41;
    v27[81] = 0;
    *((_WORD *)v27 + 41) = 0;
    *((_DWORD *)v27 + 21) = 2;
    *((_DWORD *)v27 + 30) = 0;
    *(_OWORD *)(v27 + 104) = 0u;
    *(_OWORD *)(v27 + 88) = 0u;
    *(_QWORD *)v27 = v14;
    v32 = *((_QWORD *)v14 + 1);
    v31 = v14 + 8;
    v30 = v32;
    *((_QWORD *)v27 + 1) = v32;
    if (v32)
      *(_QWORD *)(v30 + 16) = v27 + 8;
    *((_QWORD *)v27 + 2) = v31;
    *v31 = v27;
    if (*((_QWORD *)v27 + 4))
    {
      **((_QWORD **)v27 + 6) = *((_QWORD *)v27 + 5);
      v50 = *((_QWORD *)v27 + 5);
      if (v50)
        *(_QWORD *)(v50 + 16) = *((_QWORD *)v27 + 6);
    }
    *v29 = v12;
    if (v12)
    {
      v35 = *(_QWORD *)(v12 + 8);
      v34 = (uint64_t **)(v12 + 8);
      v33 = v35;
      *((_QWORD *)v27 + 5) = v35;
      if (v35)
        *(_QWORD *)(v33 + 16) = v27 + 40;
      *((_QWORD *)v27 + 6) = v34;
      *v34 = v29;
    }
    llvm::Value::setName((uint64_t ***)v27 + 8, (uint64_t)v63);
    (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, v8, v54, v59, v60);
    if (v57)
    {
      v36 = (char *)v56;
      v37 = (char *)v56 + 16 * v57;
      v38 = (unsigned __int8 **)(v28 + 112);
      do
      {
        v39 = *(_DWORD *)v36;
        v40 = (unsigned __int8 *)*((_QWORD *)v36 + 1);
        if (v40)
        {
          if (!v39)
          {
            v53 = (unsigned __int8 *)*((_QWORD *)v36 + 1);
            llvm::MetadataTracking::track((uint64_t)&v53, v40, 2);
            v41 = *v38;
            if (!*v38)
            {
LABEL_35:
              v42 = v53;
              *v38 = v53;
              if (v42)
                llvm::MetadataTracking::retrack((uint64_t)&v53, v42, (uint64_t)(v28 + 112));
              goto LABEL_32;
            }
LABEL_29:
            llvm::MetadataTracking::untrack((uint64_t)(v28 + 112), v41);
            goto LABEL_35;
          }
        }
        else
        {
          v41 = *v38;
          if (!*v38 && (v28[87] & 0x20) == 0)
            goto LABEL_32;
          if (!v39)
          {
            v53 = 0;
            if (!v41)
              goto LABEL_35;
            goto LABEL_29;
          }
        }
        llvm::Value::setMetadata(v8, *(_DWORD *)v36, (llvm::MDNode *)v40);
LABEL_32:
        v36 += 16;
      }
      while (v36 != v37);
    }
  }
LABEL_7:
  v15 = (uint64_t **)a1[672];
  v16 = a1[673];
  v17 = a1[59];
  v18 = a1[749];
  v52 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v59 + 56) + 40) + 272, v17);
  v20 = v19;
  v21 = (char *)operator new(0x60uLL);
  v22 = v21;
  v23 = (llvm::Value *)(v21 + 32);
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = v21 + 32;
  v64 = 257;
  *((_QWORD *)v21 + 4) = v17;
  *((_QWORD *)v21 + 5) = 0;
  *((_WORD *)v21 + 24) = 60;
  *((_DWORD *)v21 + 13) = 1;
  *(_OWORD *)(v21 + 56) = 0u;
  *(_OWORD *)(v21 + 72) = 0u;
  *((_DWORD *)v21 + 22) = 0;
  *(_QWORD *)v21 = v18;
  *((_QWORD *)v21 + 1) = 0;
  if (v18)
  {
    v26 = *(_QWORD *)(v18 + 8);
    v25 = (_QWORD *)(v18 + 8);
    v24 = v26;
    *((_QWORD *)v21 + 1) = v26;
    if (v26)
      *(_QWORD *)(v24 + 16) = v21 + 8;
    *((_QWORD *)v21 + 2) = v25;
    *v25 = v21;
  }
  *((_WORD *)v21 + 25) = 2 * (v20 & 0x3F);
  v21[92] = 1;
  llvm::Value::setName((uint64_t ***)v21 + 4, (uint64_t)v63);
  (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, v23, v51, v59, v60);
  if (v57)
  {
    v43 = (char *)v56;
    v44 = (char *)v56 + 16 * v57;
    v45 = (unsigned __int8 **)(v22 + 80);
    do
    {
      v46 = *(_DWORD *)v43;
      v47 = (unsigned __int8 *)*((_QWORD *)v43 + 1);
      if (v47)
      {
        if (!v46)
        {
          v54[0] = *((_QWORD *)v43 + 1);
          llvm::MetadataTracking::track((uint64_t)v54, v47, 2);
          v48 = *v45;
          goto LABEL_48;
        }
      }
      else
      {
        v48 = *v45;
        if (!*v45 && (v22[55] & 0x20) == 0)
          goto LABEL_45;
        if (!v46)
        {
          v54[0] = 0;
LABEL_48:
          if (v48)
            llvm::MetadataTracking::untrack((uint64_t)(v22 + 80), v48);
          v49 = (unsigned __int8 *)v54[0];
          *v45 = (unsigned __int8 *)v54[0];
          if (v49)
            llvm::MetadataTracking::retrack((uint64_t)v54, v49, (uint64_t)(v22 + 80));
          goto LABEL_45;
        }
      }
      llvm::Value::setMetadata(v23, *(_DWORD *)v43, (llvm::MDNode *)v47);
LABEL_45:
      v43 += 16;
    }
    while (v43 != v44);
  }
  v54[0] = (uint64_t)v23;
  v54[1] = (uint64_t)v8;
  v64 = 257;
  sub_1C4774778((uint64_t *)&v56, v15, v16, v54, 2, (uint64_t)v63, 0);
  if (v56 != &v58)
    free(v56);
}

unsigned __int8 *sub_1C586E544(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  llvm::PointerType *v8;
  uint64_t v9;
  llvm::ConstantInt *v10;
  unint64_t v11;
  unint64_t v12;
  llvm::ValueHandleBase *v13;
  uint64_t *v14;
  llvm::PointerType *v15;
  llvm::PointerType *v16;
  unsigned __int8 **v17;
  unint64_t v18;
  uint64_t v19;
  llvm::ConstantInt *v21;
  llvm::ValueHandleBase *v22;
  const char *v23;
  unsigned int v24;
  __int16 v25;

  v7 = **(_QWORD **)(a2 + 64);
  v8 = (llvm::PointerType *)(v7 + 1912);
  if (a4)
  {
    v9 = *(_QWORD *)(a3 + 16);
    v10 = *(llvm::ConstantInt **)(v7 + 1984);
    v11 = *(unsigned int *)(v7 + 1992);
    v24 = v11 >> 8;
    if (v11 >> 8 > 0x40)
    {
      v21 = v10;
      llvm::APInt::initSlowCase((llvm::APInt *)&v23, v9, 0);
      v10 = v21;
    }
    else
    {
      if (v11 <= 0xFF)
        v12 = 0;
      else
        v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
      v23 = (const char *)(v12 & v9);
    }
    v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v23, (const llvm::APInt *)a3);
    if (v24 >= 0x41 && v23)
    {
      v22 = v13;
      MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
      v13 = v22;
    }
    v23 = "MyAlloca";
    v25 = 259;
    v14 = (uint64_t *)a2;
    v15 = v8;
  }
  else
  {
    llvm::ArrayType::get((llvm::ArrayType *)(v7 + 1912), *(llvm::Type **)(a3 + 16));
    v15 = v16;
    v23 = "MyAlloca";
    v25 = 259;
    v14 = (uint64_t *)a2;
    v13 = 0;
  }
  v17 = sub_1C486A5CC(v14, v15, v13, (uint64_t)&v23);
  v18 = dword_1EF8F3B70;
  if (*(_QWORD *)(a3 + 8) > (unint64_t)dword_1EF8F3B70)
    v18 = *(_QWORD *)(a3 + 8);
  *((_WORD *)v17 + 9) = *((_WORD *)v17 + 9) & 0xFFC0 | (63 - __clz(v18));
  v19 = *(_QWORD *)(a1 + 472);
  v25 = 257;
  return sub_1C5098D9C((uint64_t *)a2, (unsigned __int8 *)v17, v19, (uint64_t)&v23);
}

llvm::PHINode *sub_1C586E6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  llvm::PHINode *v10;
  _BYTE v12[32];
  __int16 v13;

  v13 = 257;
  v10 = (llvm::PHINode *)sub_1C4867E94(a2, a1, 2, (uint64_t)v12);
  sub_1C477667C(v10, a6, *(_QWORD *)(a3 + 40));
  sub_1C477667C(v10, a4, *(_QWORD *)(a5 + 40));
  return v10;
}

llvm::Value *sub_1C586E748(llvm::ConstantInt **a1, uint64_t a2, int a3, uint64_t a4, int a5, llvm::Type *a6, unint64_t a7, uint64_t a8, _QWORD *a9)
{
  __int128 *v14;
  unint64_t v15;
  llvm::Type *v16;
  uint64_t v17;
  llvm::ConstantInt **v18;
  llvm::ConstantInt **v19;
  uint64_t v20;
  llvm::Value **v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Value **v26;
  llvm::Value *v27;
  _QWORD *v28;
  llvm::Value *v29;
  _QWORD *v31;
  uint64_t **v34;
  llvm::Type *v35;
  char v36[32];
  __int16 v37;
  _BYTE v38[32];
  __int16 v39;
  uint64_t v40[4];

  v40[2] = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a6 < a7)
  {
    v31 = a9 + 1;
    v14 = &xmmword_1ED811000;
    v15 = (unint64_t)a6;
    do
    {
      v16 = (llvm::Type *)(v15 + 1);
      if (*(_BYTE *)(a2 + v15))
      {
        v17 = *(unsigned __int8 *)(a4 + v15);
        v18 = &a1[2 * v17];
        if (v18[155])
        {
          if ((unint64_t)v16 < a7)
          {
            while (*((_BYTE *)v16 + a2) && (_DWORD)v17 == *((unsigned __int8 *)v16 + a4))
            {
              v16 = (llvm::Type *)((char *)v16 + 1);
              if ((llvm::Type *)a7 == v16)
              {
                v16 = (llvm::Type *)a7;
                break;
              }
            }
          }
          if ((unint64_t)v16 - v15 >= *((unsigned int *)v14 + 800))
          {
            v35 = (llvm::Type *)((char *)v16 - v15);
            v19 = v18 + 154;
            sub_1C586E9D8((llvm::Value *)a1, a2, a3, a4, a5, a6, v15, a8, a9);
            v20 = (uint64_t)v19[1];
            v34 = (uint64_t **)*v19;
            v21 = llvm::ConstantInt::get(a1[59], v15, 0);
            v37 = 257;
            v22 = (*(uint64_t (**)(_QWORD, _QWORD *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a8 + 72)
                                                                                              + 16))(*(_QWORD *)(a8 + 72), a9, v21, 0, 0);
            if (!v22)
            {
              v39 = 257;
              v23 = (char *)operator new(0x80uLL);
              v24 = a9[1];
              *((_QWORD *)v23 + 8) = *a9;
              v25 = (uint64_t)(v23 + 64);
              *((_QWORD *)v23 + 5) = 0;
              v26 = (llvm::Value **)(v23 + 40);
              *((_QWORD *)v23 + 3) = v23 + 64;
              *((_QWORD *)v23 + 6) = 0;
              *((_QWORD *)v23 + 7) = v23 + 64;
              *((_QWORD *)v23 + 9) = 0;
              *((_QWORD *)v23 + 10) = 0x200000029;
              *(_OWORD *)(v23 + 88) = 0u;
              *(_OWORD *)(v23 + 104) = 0u;
              *((_DWORD *)v23 + 30) = 0;
              *(_QWORD *)v23 = a9;
              *((_QWORD *)v23 + 1) = v24;
              if (v24)
                *(_QWORD *)(v24 + 16) = v23 + 8;
              *((_QWORD *)v23 + 2) = v31;
              *v31 = v23;
              *((_QWORD *)v23 + 4) = v21;
              if (v21)
              {
                v29 = v21[1];
                v28 = v21 + 1;
                v27 = v29;
                *v26 = v29;
                if (v29)
                  *((_QWORD *)v27 + 2) = v26;
                *((_QWORD *)v23 + 6) = v28;
                *v28 = v23 + 32;
              }
              llvm::Value::setName((uint64_t ***)v23 + 8, (uint64_t)v38);
              v22 = sub_1C4773754((uint64_t *)a8, v25, (uint64_t)v36);
            }
            v40[0] = v22;
            v40[1] = (uint64_t)llvm::ConstantInt::get(a1[59], (uint64_t)v35, 0);
            v39 = 257;
            sub_1C4774778((uint64_t *)a8, v34, v20, v40, 2, (uint64_t)v38, 0);
            a6 = v16;
            v14 = &xmmword_1ED811000;
          }
        }
      }
      v15 = (unint64_t)v16;
    }
    while ((unint64_t)v16 < a7);
  }
  return sub_1C586E9D8((llvm::Value *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

llvm::Value *sub_1C586E9D8(llvm::Value *result, uint64_t a2, int a3, uint64_t a4, int a5, llvm::Type *a6, unint64_t a7, uint64_t a8, _QWORD *a9)
{
  llvm::Type *v11;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  llvm::Value **v23;
  const llvm::APInt *v24;
  unsigned __int8 *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Value **v29;
  llvm::Value *v30;
  _QWORD *v31;
  llvm::Value *v32;
  _QWORD *v33;
  unint64_t v34;
  llvm::ConstantInt *v35;
  unsigned int v36;
  unint64_t v37;
  llvm::PointerType **v38;
  uint64_t v39;
  unsigned __int8 *v40;
  _DWORD *v41;
  int v42;
  _DWORD *v43;
  _QWORD *v44;
  uint64_t v46;
  llvm::Value *v47;
  char v48[32];
  __int16 v49;
  unint64_t v50;
  unsigned int v51;
  __int16 v52;

  v47 = result;
  if ((unint64_t)a6 < a7)
  {
    v11 = a6;
    LODWORD(v13) = *(_DWORD *)(*((_QWORD *)result + 1) + 56) / 8;
    if (v13 >= 8)
      v13 = 8;
    else
      v13 = v13;
    v46 = v13;
    v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)result + 40) + 272);
    v44 = a9 + 1;
    do
    {
      if (*((_BYTE *)v11 + a2))
      {
        v15 = v46;
        do
        {
          v16 = v15;
          v15 >>= 1;
        }
        while (v16 > a7 - (unint64_t)v11);
        v17 = v16 - 1;
        if (v16 == 1)
          goto LABEL_14;
        do
        {
          v18 = v16;
          if (*((_BYTE *)v11 + v17 + a2))
            break;
          do
          {
            v16 = v18;
            v18 >>= 1;
          }
          while (v17 <= v16 >> 1);
          --v17;
        }
        while (v17);
        if (v16)
        {
LABEL_14:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = (char *)v11 + a4;
          do
          {
            if (v14)
              v21 = v22[v20] | (unint64_t)(v21 << 8);
            else
              v21 |= (unint64_t)v22[v20] << v19;
            ++v20;
            v19 += 8;
          }
          while (v16 != v20);
        }
        else
        {
          v21 = 0;
        }
        v23 = llvm::ConstantInt::get(*((llvm::ConstantInt **)v47 + 59), (uint64_t)v11, 0);
        v49 = 257;
        v25 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(a8 + 72) + 16))(*(_QWORD *)(a8 + 72), a9, v23, 0, 0);
        if (!v25)
        {
          v52 = 257;
          v26 = (char *)operator new(0x80uLL);
          v27 = a9[1];
          *((_QWORD *)v26 + 8) = *a9;
          v28 = (uint64_t)(v26 + 64);
          *((_QWORD *)v26 + 5) = 0;
          v29 = (llvm::Value **)(v26 + 40);
          *((_QWORD *)v26 + 3) = v26 + 64;
          *((_QWORD *)v26 + 6) = 0;
          *((_QWORD *)v26 + 7) = v26 + 64;
          *((_QWORD *)v26 + 9) = 0;
          *((_QWORD *)v26 + 10) = 0x200000029;
          *(_OWORD *)(v26 + 88) = 0u;
          *(_OWORD *)(v26 + 104) = 0u;
          *((_DWORD *)v26 + 30) = 0;
          *(_QWORD *)v26 = a9;
          *((_QWORD *)v26 + 1) = v27;
          if (v27)
            *(_QWORD *)(v27 + 16) = v26 + 8;
          *((_QWORD *)v26 + 2) = v44;
          *v44 = v26;
          *((_QWORD *)v26 + 4) = v23;
          if (v23)
          {
            v32 = v23[1];
            v31 = v23 + 1;
            v30 = v32;
            *v29 = v32;
            if (v32)
              *((_QWORD *)v30 + 2) = v29;
            *((_QWORD *)v26 + 6) = v31;
            *v31 = v26 + 32;
          }
          llvm::Value::setName((uint64_t ***)v26 + 8, (uint64_t)&v50);
          v25 = (unsigned __int8 *)sub_1C4773754((uint64_t *)a8, v28, (uint64_t)v48);
        }
        v33 = *(_QWORD **)(a8 + 64);
        LODWORD(v50) = 8 * v16;
        switch((8 * v16 - 8) >> 3)
        {
          case 0u:
            v34 = *v33 + 1912;
            break;
          case 1u:
            v34 = *v33 + 1936;
            break;
          case 3u:
            v34 = *v33 + 1960;
            break;
          case 7u:
            v34 = *v33 + 1984;
            break;
          default:
            v41 = sub_1C5270984(*v33 + 2168, &v50);
            v34 = *((_QWORD *)v41 + 1);
            if (!v34)
            {
              v43 = v41;
              v34 = sub_1C484358C(*v33 + 2040, 24, 3);
              v42 = v50;
              *(_QWORD *)v34 = v33;
              *(_QWORD *)(v34 + 16) = 0;
              *(_DWORD *)(v34 + 8) = (v42 << 8) | 0xD;
              *(_DWORD *)(v34 + 12) = 0;
              *((_QWORD *)v43 + 1) = v34;
            }
            break;
        }
        v35 = *(llvm::ConstantInt **)v34;
        v36 = *(_DWORD *)(v34 + 8);
        v51 = v36 >> 8;
        if (v36 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v50, v21, 0);
        }
        else
        {
          if (v36 <= 0xFF)
            v37 = 0;
          else
            v37 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v36);
          v50 = v37 & v21;
        }
        v38 = (llvm::PointerType **)llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v50, v24);
        if (v51 >= 0x41)
        {
          if (v50)
            MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
        }
        v39 = llvm::PointerType::get(*v38, 0);
        v52 = 257;
        v40 = sub_1C4773E38((uint64_t *)a8, 48, v25, v39, (uint64_t)&v50);
        result = sub_1C509CCE8((uint64_t *)a8, (uint64_t *)v38, (uint64_t)v40, 256, 0);
        v11 = (llvm::Type *)((char *)v11 + v16);
      }
      else
      {
        v11 = (llvm::Type *)((char *)v11 + 1);
      }
    }
    while ((unint64_t)v11 < a7);
  }
  return result;
}

__n128 sub_1C586EDA4(int **a1, __n128 *a2, _WORD *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED811A80, "asan-max-ins-per-bb", 0x13uLL);
  v6 = *a1;
  dword_1ED811B00 = **a1;
  byte_1ED811B14 = 1;
  dword_1ED811B10 = *v6;
  result = *a2;
  xmmword_1ED811AA0 = (__int128)*a2;
  word_1ED811A8A = (32 * (*a3 & 3)) | word_1ED811A8A & 0xFF9F;
  return result;
}

__n128 sub_1C586EE28(__n128 *a1, _WORD *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED811B40, "asan-stack", 0xAuLL);
  result = *a1;
  xmmword_1ED811B60 = (__int128)*a1;
  word_1ED811B4A = (32 * (*a2 & 3)) | word_1ED811B4A & 0xFF9F;
  v7 = *a3;
  byte_1ED811BC0 = **a3;
  byte_1ED811BD1 = 1;
  byte_1ED811BD0 = *v7;
  return result;
}

void sub_1C586EEAC(__int128 *a1, uint64_t *a2, _WORD *a3, int **a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1EF8F4D48, "asan-use-after-return", 0x15uLL);
  xmmword_1EF8F4D68 = *a1;
  v8 = *((_DWORD *)a2 + 2);
  if (v8)
  {
    v9 = *a2;
    v10 = v9 + 40 * v8;
    do
    {
      sub_1C62AA320(*(unsigned __int8 **)v9, *(_QWORD *)(v9 + 8), *(_DWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32));
      v9 += 40;
    }
    while (v9 != v10);
  }
  word_1EF8F4D52 = (32 * (*a3 & 3)) | word_1EF8F4D52 & 0xFF9F;
  v11 = *a4;
  dword_1EF8F4DC8 = **a4;
  byte_1EF8F4DDC = 1;
  unk_1EF8F4DD8 = *v11;
}

unint64_t sub_1C586EF74(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1EF8F4DF8 >= HIDWORD(qword_1EF8F4DF8))
  {
    v3 = qword_1EF8F4DF8 + 1;
    if (qword_1EF8F4DF0 <= a1 && qword_1EF8F4DF0 + 48 * (unint64_t)qword_1EF8F4DF8 > a1)
    {
      v5 = a1 - qword_1EF8F4DF0;
      sub_1C62AA3D4(v3);
      return qword_1EF8F4DF0 + v5;
    }
    else
    {
      sub_1C62AA3D4(v3);
    }
  }
  return a1;
}

void sub_1C586EFE8(const char *a1)
{
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  std::string __dst;

  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
  p_dst = &__dst;
  if (v2)
LABEL_8:
    memcpy(p_dst, a1, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  std::string::operator=((std::string *)&xmmword_1EF8F4BF8, &__dst);
  byte_1EF8F4C30 = 1;
  std::string::operator=((std::string *)&qword_1EF8F4C18, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

__n128 sub_1C586F0C0(__n128 *a1, _WORD *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1EF8F3F70, "asan-opt", 8uLL);
  result = *a1;
  xmmword_1EF8F3F90 = (__int128)*a1;
  word_1EF8F3F7A = (32 * (*a2 & 3)) | word_1EF8F3F7A & 0xFF9F;
  v7 = *a3;
  byte_1EF8F3FF0 = **a3;
  byte_1EF8F4001 = 1;
  byte_1EF8F4000 = *v7;
  return result;
}

__n128 sub_1C586F144(__n128 *a1, _WORD *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1EF8F40F0, "asan-opt-same-temp", 0x12uLL);
  result = *a1;
  xmmword_1EF8F4110 = (__int128)*a1;
  word_1EF8F40FA = (32 * (*a2 & 3)) | word_1EF8F40FA & 0xFF9F;
  v7 = *a3;
  byte_1EF8F4170 = **a3;
  byte_1EF8F4181 = 1;
  byte_1EF8F4180 = *v7;
  return result;
}

void sub_1C586F1C8(__int128 *a1, uint64_t *a2, int **a3, _WORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1EF8F4FA0, "asan-destructor-kind", 0x14uLL);
  xmmword_1EF8F4FC0 = *a1;
  v8 = *((_DWORD *)a2 + 2);
  if (v8)
  {
    v9 = *a2;
    v10 = v9 + 40 * v8;
    do
    {
      sub_1C62AA920(*(unsigned __int8 **)v9, *(_QWORD *)(v9 + 8), *(_DWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32));
      v9 += 40;
    }
    while (v9 != v10);
  }
  v11 = *a3;
  dword_1EF8F5020 = **a3;
  byte_1EF8F5034 = 1;
  unk_1EF8F5030 = *v11;
  word_1EF8F4FAA = (32 * (*a4 & 3)) | word_1EF8F4FAA & 0xFF9F;
}

unint64_t sub_1C586F290(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1EF8F5050 >= HIDWORD(qword_1EF8F5050))
  {
    v3 = qword_1EF8F5050 + 1;
    if (qword_1EF8F5048 <= a1 && qword_1EF8F5048 + 48 * (unint64_t)qword_1EF8F5050 > a1)
    {
      v5 = a1 - qword_1EF8F5048;
      sub_1C62AA9D4(v3);
      return qword_1EF8F5048 + v5;
    }
    else
    {
      sub_1C62AA9D4(v3);
    }
  }
  return a1;
}

__n128 sub_1C586F304(__n128 *a1, _WORD *a2, int **a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1EF8F47B0, "asan-debug", 0xAuLL);
  result = *a1;
  xmmword_1EF8F47D0 = (__int128)*a1;
  word_1EF8F47BA = (32 * (*a2 & 3)) | word_1EF8F47BA & 0xFF9F;
  v7 = *a3;
  dword_1EF8F4830 = **a3;
  byte_1EF8F4844 = 1;
  dword_1EF8F4840 = *v7;
  return result;
}

__n128 sub_1C586F388(__n128 *a1, _WORD *a2, int **a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1EF8F4870, "asan-debug-stack", 0x10uLL);
  result = *a1;
  xmmword_1EF8F4890 = (__int128)*a1;
  word_1EF8F487A = (32 * (*a2 & 3)) | word_1EF8F487A & 0xFF9F;
  v7 = *a3;
  dword_1EF8F48F0 = **a3;
  byte_1EF8F4904 = 1;
  dword_1EF8F4900 = *v7;
  return result;
}

_QWORD *sub_1C586F40C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62AAD00(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

char *sub_1C586F4D0()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleAddressSanitizerPass]";
  v10[1] = 82;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x52)
    v1 = 82;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_14[v1];
  v3 = 82 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C586F588()
{
  uint64_t v0;
  char v2;
  int v3;
  int *v4;
  __int128 v5;
  int v6;
  __n128 v7;
  const char *v8;
  uint64_t v9;
  int v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7.n128_u64[0] = (unint64_t)"Enable KernelAddressSanitizer instrumentation";
  v7.n128_u64[1] = 45;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED811180, "asan-kernel", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED811180, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Enable recovery mode (continue-after-error).";
  v7.n128_u64[1] = 44;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED811240, "asan-recover", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED811240, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Guard against compiler/runtime version mismatch.";
  v7.n128_u64[1] = 48;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED811300, "asan-guard-against-version-mismatch", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED811300, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"instrument read instructions";
  v7.n128_u64[1] = 28;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8113C0, "asan-instrument-reads", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8113C0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"instrument write instructions";
  v7.n128_u64[1] = 29;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&algn_1ED811441[63], "asan-instrument-writes", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED811441[63], &dword_1C475E000);
  v3 = 0;
  LODWORD(v4) = 1;
  v2 = 0;
  *(_QWORD *)&v5 = &v2;
  v6 = 1;
  v7.n128_u64[0] = (unint64_t)"Use Stack Safety analysis results";
  v7.n128_u64[1] = 33;
  sub_1C62A9F6C(&v4, (char **)&v5, &v6, &v7, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED811540, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"instrument atomic instructions (rmw, cmpxchg)";
  v7.n128_u64[1] = 45;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED811600, "asan-instrument-atomics", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED811600, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"instrument byval call arguments";
  v7.n128_u64[1] = 31;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8116C0, "asan-instrument-byval", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8116C0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"use instrumentation with slow path for all accesses";
  v7.n128_u64[1] = 51;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&algn_1ED811741[63], "asan-always-slow-path", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED811741[63], &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Load shadow address into a local variable for each function";
  v7.n128_u64[1] = 59;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED811840, "asan-force-dynamic-shadow", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED811840, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Access dynamic shadow through an ifunc global on platforms that support this";
  v7.n128_u64[1] = 76;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED811900, "asan-with-ifunc", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED811900, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Suppress rematerialization of dynamic shadow address by passing it through inline asm in prologue.";
  v7.n128_u64[1] = 98;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8119C0, "asan-with-ifunc-suppress-remat", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8119C0, &dword_1C475E000);
  LODWORD(v4) = 10000;
  *(_QWORD *)&v5 = &v4;
  v7.n128_u64[0] = (unint64_t)"maximal number of instructions to instrument in any given BB";
  v7.n128_u64[1] = 60;
  v6 = 1;
  sub_1C62AA0D0((int **)&v5, &v7, &v6);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED811A80, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Handle stack memory";
  v7.n128_u64[1] = 19;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C62AA16C(&v7, &v4, (char **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED811B40, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Inline shadow poisoning for blocks up to the given size in bytes.";
  v7.n128_u64[1] = 65;
  LODWORD(v4) = 1;
  v6 = 64;
  *(_QWORD *)&v5 = &v6;
  sub_1C61DFB30((uint64_t)&unk_1ED811C00, "asan-max-inline-poisoning-size", &v7, &v4, (int **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED811C00, &dword_1C475E000);
  *(_QWORD *)&v5 = "Sets the mode of detection for stack-use-after-return.";
  *((_QWORD *)&v5 + 1) = 54;
  v7.n128_u64[0] = (unint64_t)&v8;
  v8 = "never";
  v9 = 5;
  v10 = 0;
  v11 = "Never detect stack use after return.";
  v12 = 36;
  v13 = "runtime";
  v14 = 7;
  v15 = 1;
  v16 = "Detect stack use after return if binary flag 'ASAN_OPTIONS=detect_stack_use_after_return' is set.";
  v17 = 97;
  v18 = "always";
  v19 = 6;
  v20 = 2;
  v21 = "Always detect stack use after return.";
  v22 = 37;
  v7.n128_u64[1] = 0x400000003;
  v6 = 1;
  v3 = 1;
  v4 = &v3;
  sub_1C62AA210(&v5, (uint64_t *)&v7, &v6, &v4);
  if ((const char **)v7.n128_u64[0] != &v8)
    free((void *)v7.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C62A8F9C, &qword_1EF8F4D48, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Create redzones for byval arguments (extra copy required)";
  v7.n128_u64[1] = 57;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED811CC0, "asan-redzone-byval-args", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED811CC0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Check stack-use-after-scope";
  v7.n128_u64[1] = 27;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&algn_1ED811D41[63], "asan-use-after-scope", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED811D41[63], &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Handle global objects";
  v7.n128_u64[1] = 21;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED811E40, "asan-globals", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED811E40, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Handle C++ initializer order";
  v7.n128_u64[1] = 28;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED811F00, "asan-initialization-order", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED811F00, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Instrument <, <=, >, >=, - with pointer operands";
  v7.n128_u64[1] = 48;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED811FC0, "asan-detect-invalid-pointer-pair", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED811FC0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Instrument <, <=, >, >= with pointer operands";
  v7.n128_u64[1] = 45;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&algn_1ED812041[63], "asan-detect-invalid-pointer-cmp", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &algn_1ED812041[63], &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Instrument - operations with pointer operands";
  v7.n128_u64[1] = 45;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F3A30, "asan-detect-invalid-pointer-sub", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F3A30, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Realign stack to the value of this flag (power of two)";
  v7.n128_u64[1] = 54;
  LODWORD(v4) = 1;
  v6 = 32;
  *(_QWORD *)&v5 = &v6;
  sub_1C61DFB30((uint64_t)&unk_1EF8F3AF0, "asan-realign-stack", &v7, &v4, (int **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1EF8F3AF0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"If the function being instrumented contains more than this number of memory accesse"
                                     "s, use callbacks instead of inline checks (-1 means never use callbacks).";
  v7.n128_u64[1] = 156;
  LODWORD(v4) = 1;
  v6 = 7000;
  *(_QWORD *)&v5 = &v6;
  sub_1C61F8494((llvm::cl::Option *)&unk_1EF8F3BB0, "asan-instrumentation-with-call-threshold", &v7, &v4, (_DWORD **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1EF8F3BB0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Prefix for memory access callbacks";
  v7.n128_u64[1] = 34;
  LODWORD(v4) = 1;
  *(_QWORD *)&v5 = "__asan_";
  sub_1C47AD050((uint64_t)&qword_1EF8F4B78, 0, 0);
  xmmword_1EF8F4BF8 = 0uLL;
  qword_1EF8F4C20 = 0;
  unk_1EF8F4C28 = 0;
  qword_1EF8F4C18 = 0;
  byte_1EF8F4C30 = 0;
  unk_1EF8F4C08 = 0;
  unk_1EF8F4C10 = &unk_1E819E950;
  qword_1EF8F4B78 = (uint64_t)&unk_1E819E480;
  qword_1EF8F4C38 = (uint64_t)&unk_1E819E970;
  qword_1EF8F4C40[0] = &off_1E7FA8CB8;
  qword_1EF8F4C58 = (uint64_t)qword_1EF8F4C40;
  sub_1C62AA4A0((__int128 *)&v7, &v4, (const char **)&v5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F4B78);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1EF8F4B78, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Use prefix for memory intrinsics in KASAN mode";
  v7.n128_u64[1] = 46;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F3C70, "asan-kernel-mem-intrinsic-prefix", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F3C70, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"instrument dynamic allocas";
  v7.n128_u64[1] = 26;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F3D30, "asan-instrument-dynamic-allocas", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F3D30, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Do not instrument promotable allocas";
  v7.n128_u64[1] = 36;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F3DF0, "asan-skip-promotable-allocas", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F3DF0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"scale of asan shadow mapping";
  v7.n128_u64[1] = 28;
  LODWORD(v4) = 1;
  v6 = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61F8494((llvm::cl::Option *)&unk_1EF8F3EB0, "asan-mapping-scale", &v7, &v4, (_DWORD **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1EF8F3EB0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"offset of asan shadow mapping [EXPERIMENTAL]";
  v7.n128_u64[1] = 44;
  LODWORD(v4) = 1;
  v6 = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C62AA50C((__int128 *)&v7, &v4, (int **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C56031FC, &qword_1EF8F4AB0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Optimize instrumentation";
  v7.n128_u64[1] = 24;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C62AA5EC(&v7, &v4, (char **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1EF8F3F70, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Optimize callbacks";
  v7.n128_u64[1] = 18;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F4030, "asan-optimize-callbacks", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F4030, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Instrument the same temp just once";
  v7.n128_u64[1] = 34;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C62AA690(&v7, &v4, (char **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1EF8F40F0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Don't instrument scalar globals";
  v7.n128_u64[1] = 31;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F41B0, "asan-opt-globals", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F41B0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Don't instrument scalar stack variables";
  v7.n128_u64[1] = 39;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F4270, "asan-opt-stack", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F4270, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Use dynamic alloca to represent stack variables";
  v7.n128_u64[1] = 47;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F4330, "asan-stack-dynamic-alloca", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F4330, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Force optimization experiment (for testing)";
  v7.n128_u64[1] = 43;
  LODWORD(v4) = 1;
  v6 = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C62AA734((__int128 *)&v7, &v4, (int **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1EF8F43F0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Use private aliases for global variables";
  v7.n128_u64[1] = 40;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F44B0, "asan-use-private-alias", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F44B0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Use odr indicators to improve ODR reporting";
  v7.n128_u64[1] = 43;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F4570, "asan-use-odr-indicator", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F4570, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Use linker features to support dead code stripping of globals";
  v7.n128_u64[1] = 61;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F4630, "asan-globals-live-support", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F4630, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Place ASan constructors in comdat sections";
  v7.n128_u64[1] = 42;
  LODWORD(v4) = 1;
  LOBYTE(v6) = 1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61B091C((llvm::cl::Option *)&unk_1EF8F46F0, "asan-with-comdat", &v7, &v4, (_BYTE **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1EF8F46F0, &dword_1C475E000);
  *(_QWORD *)&v5 = "Sets the ASan destructor kind. The default is to use the value provided to the pass constructor";
  *((_QWORD *)&v5 + 1) = 95;
  v7.n128_u64[0] = (unint64_t)&v8;
  v8 = "none";
  v9 = 4;
  v10 = 0;
  v11 = "No destructors";
  v12 = 14;
  v13 = "global";
  v14 = 6;
  v15 = 1;
  v16 = "Use global destructors";
  v17 = 22;
  v7.n128_u64[1] = 0x400000002;
  v6 = 2;
  v4 = &v6;
  v3 = 1;
  sub_1C62AA810(&v5, (uint64_t *)&v7, &v4, &v3);
  if ((const char **)v7.n128_u64[0] != &v8)
    free((void *)v7.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C62A8FA0, &qword_1EF8F4FA0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"debug";
  v7.n128_u64[1] = 5;
  LODWORD(v4) = 1;
  v6 = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C62AAAA0(&v7, &v4, (int **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1EF8F47B0, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"debug stack";
  v7.n128_u64[1] = 11;
  LODWORD(v4) = 1;
  v6 = 0;
  *(_QWORD *)&v5 = &v6;
  sub_1C62AAB3C(&v7, &v4, (int **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1EF8F4870, &dword_1C475E000);
  v0 = sub_1C47AD050((uint64_t)&qword_1EF8F4C60, 0, 0);
  qword_1EF8F4CE8 = 0;
  qword_1EF8F4CE0 = 0;
  unk_1EF8F4CF0 = 0;
  qword_1EF8F4D00 = 0;
  qword_1EF8F4D10 = 0;
  qword_1EF8F4D08 = 0;
  byte_1EF8F4D18 = 0;
  qword_1EF8F4CF8 = (uint64_t)&unk_1E819E950;
  qword_1EF8F4C60 = (uint64_t)&unk_1E819E480;
  qword_1EF8F4D20 = (uint64_t)&unk_1E819E970;
  qword_1EF8F4D28 = (uint64_t)&off_1E7FA8CB8;
  qword_1EF8F4D40 = (uint64_t)&qword_1EF8F4D28;
  llvm::cl::Option::setArgStr(v0, "asan-debug-func", 0xFuLL);
  word_1EF8F4C6A = word_1EF8F4C6A & 0xFF9F | 0x20;
  qword_1EF8F4C80 = (uint64_t)"Debug func";
  qword_1EF8F4C88 = 10;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F4C60);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1EF8F4C60, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Debug min inst";
  v7.n128_u64[1] = 14;
  LODWORD(v4) = 1;
  v6 = -1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61F8494((llvm::cl::Option *)&unk_1EF8F4930, "asan-debug-min", &v7, &v4, (_DWORD **)&v5);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1EF8F4930, &dword_1C475E000);
  v7.n128_u64[0] = (unint64_t)"Debug max inst";
  v7.n128_u64[1] = 14;
  LODWORD(v4) = 1;
  v6 = -1;
  *(_QWORD *)&v5 = &v6;
  sub_1C61F8494((llvm::cl::Option *)&unk_1EF8F49F0, "asan-debug-max", &v7, &v4, (_DWORD **)&v5);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1EF8F49F0, &dword_1C475E000);
}

BOOL sub_1C5870608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BOOL8 v6;
  llvm::DataLayout *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  llvm::Type ***v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _BYTE *v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t Declaration;
  uint64_t **v46;
  uint64_t v47;
  unsigned __int8 **v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  _DWORD *v52;
  uint64_t v53;
  llvm::BranchInst *v54;
  _QWORD *v55;
  _DWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  llvm::BasicBlock *v60;
  char v61;
  _QWORD v62[2];
  _QWORD v63[2];
  unsigned __int8 *v64;
  unsigned __int8 *v65[4];
  __int16 v66;
  void **v67;
  __int128 v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  void *v71[6];
  __int128 v72;
  void *v73;
  uint64_t v74;
  _BYTE v75[64];
  _BYTE v76[24];
  void *v77;
  _QWORD v78[16];
  _BYTE v79[24];
  _BYTE *v80;
  uint64_t v81[4];
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  if (v5 && (*(_BYTE *)(v5 + 16) & 2) != 0)
    return 0;
  v7 = (llvm::DataLayout *)(*(_QWORD *)(a1 + 40) + 272);
  llvm::ObjectSizeOffsetEvaluator::ObjectSizeOffsetEvaluator((uint64_t)v76, (uint64_t)v7, a2, **(_QWORD **)a1, 256, 0);
  v73 = v75;
  v74 = 0x400000000;
  v8 = a1 + 72;
  for (i = *(_QWORD *)(a1 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v8)
    {
      v6 = 0;
      goto LABEL_115;
    }
    v10 = i - 24;
    if (!i)
      v10 = 0;
    v11 = *(_QWORD *)(v10 + 48);
    if (v11 != v10 + 40)
      break;
  }
  while (1)
  {
    if (v11)
      v12 = v11 - 24;
    else
      v12 = 0;
    v13 = *(uint64_t ***)(v12 + 40);
    if (v11)
      v14 = v12 + 24;
    else
      v14 = 0;
    v63[0] = &unk_1E8135C10;
    v63[1] = v7;
    sub_1C62AAEAC((uint64_t)v71, v13, v14, (uint64_t)v63);
    v15 = *(unsigned __int8 *)(v12 + 16);
    if (v15 == 60)
      v16 = v12;
    else
      v16 = 0;
    if (v11 && v15 == 60)
    {
      if ((*(_WORD *)(v16 + 18) & 1) != 0)
        goto LABEL_42;
      v17 = (llvm::Type ***)(v16 - 32);
      goto LABEL_38;
    }
    if (v15 == 61)
      v18 = v12;
    else
      v18 = 0;
    if (v11 && v15 == 61)
    {
      if ((*(_WORD *)(v18 + 18) & 1) != 0)
        goto LABEL_42;
      v17 = (llvm::Type ***)(v18 - 32);
LABEL_37:
      v16 = *(_QWORD *)(v18 - 64);
      goto LABEL_38;
    }
    if (v15 == 64)
      v18 = v12;
    else
      v18 = 0;
    if (v11 && v15 == 64)
    {
      if ((*(_WORD *)(v18 + 18) & 1) != 0)
        goto LABEL_42;
      v17 = (llvm::Type ***)(v18 - 96);
      goto LABEL_37;
    }
    if (v15 == 65)
      v25 = v12;
    else
      v25 = 0;
    if (!v11 || v15 != 65 || (*(_WORD *)(v25 + 18) & 1) != 0)
      goto LABEL_42;
    v17 = (llvm::Type ***)(v25 - 64);
    v16 = *(_QWORD *)(v25 - 32);
LABEL_38:
    v19 = sub_1C5870F40(*v17, *(_QWORD *)v16, v7, (llvm::ObjectSizeOffsetEvaluator *)v76, (uint64_t)v71, a3);
    if (v19)
    {
      v20 = v19;
      v21 = v74;
      if (v74 >= (unint64_t)HIDWORD(v74))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, (uint64_t)v75, v74 + 1, 16);
        v21 = v74;
      }
      v22 = (char *)v73 + 16 * v21;
      *v22 = v12;
      v22[1] = v20;
      LODWORD(v74) = v74 + 1;
    }
LABEL_42:
    sub_1C61A4038(v71);
    v11 = *(_QWORD *)(v11 + 8);
    v23 = i - 24;
    if (!i)
      v23 = 0;
    if (v11 == v23 + 40)
      break;
LABEL_49:
    if (i == v8)
      goto LABEL_58;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v8)
      break;
    v24 = i - 24;
    if (!i)
      v24 = 0;
    v11 = *(_QWORD *)(v24 + 48);
    if (v11 != v24 + 40)
      goto LABEL_49;
  }
LABEL_58:
  v26 = (char *)v73;
  if (!(_DWORD)v74)
  {
    v6 = 0;
    goto LABEL_113;
  }
  v27 = 0;
  v28 = (char *)v73 + 16 * v74;
  v29 = &unk_1ED812000;
  while (2)
  {
    v30 = *(uint64_t ***)(*(_QWORD *)v26 + 40);
    if (*(_QWORD *)v26)
      v31 = *(_QWORD *)v26 + 24;
    else
      v31 = 0;
    v62[0] = &unk_1E8135C10;
    v62[1] = v7;
    sub_1C62AAEAC((uint64_t)v71, v30, v31, (uint64_t)v62);
    v32 = *((_QWORD *)v26 + 1);
    if (v32 && *(_BYTE *)(v32 + 16) == 16)
    {
      v33 = (_QWORD *)(v32 + 24);
      if (*(_DWORD *)(v32 + 32) >= 0x41u)
        v33 = (_QWORD *)*v33;
      if (*v33)
      {
        v61 = 0;
        goto LABEL_70;
      }
    }
    else
    {
      v61 = 1;
LABEL_70:
      v34 = *((_QWORD *)&v72 + 1) - 24;
      if (!*((_QWORD *)&v72 + 1))
        v34 = 0;
      v35 = *(uint64_t **)(v34 + 40);
      v66 = 257;
      v60 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v35, *((uint64_t **)&v72 + 1), (uint64_t)v65, 0);
      v36 = 0;
      v37 = (uint64_t *)v35[5];
      if (v37 != v35 + 5)
      {
        if (v37)
          v38 = v37 - 3;
        else
          v38 = 0;
        if (*((unsigned __int8 *)v38 + 16) - 29 >= 0xB)
          v36 = 0;
        else
          v36 = v38;
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v36[5] + 40, (uint64_t ***)v36);
      v39 = v36[3];
      v40 = (_QWORD *)v36[4];
      *v40 = v39;
      *(_QWORD *)(v39 + 8) = v40;
      v36[3] = 0;
      v36[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v36);
      if (!v27 || !v29[448])
      {
        v41 = *(_QWORD *)(v72 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v71, &v70);
        v67 = v71;
        v68 = v72;
        llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v71, &v69);
        v42 = **(_QWORD ***)v41;
        v65[0] = "trap";
        v66 = 259;
        v27 = operator new();
        *(_QWORD *)v27 = *v42 + 1600;
        *(_QWORD *)(v27 + 8) = 0;
        v43 = *(_DWORD *)(v27 + 20) & 0xC0000000;
        *(_DWORD *)(v27 + 16) = 22;
        *(_DWORD *)(v27 + 20) = v43;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0;
        *(_QWORD *)(v27 + 40) = v27 + 40;
        *(_QWORD *)(v27 + 48) = v27 + 40;
        *(_QWORD *)(v27 + 56) = 0;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v41 + 72, (_QWORD *)v27);
        v44 = *(_QWORD *)(v41 + 72);
        *(_QWORD *)(v27 + 32) = v41 + 72;
        *(_QWORD *)(v27 + 24) = v44;
        *(_QWORD *)(v44 + 8) = v27 + 24;
        *(_QWORD *)(v41 + 72) = v27 + 24;
        llvm::Value::setName((uint64_t ***)v27, (uint64_t)v65);
        *(_QWORD *)&v72 = v27;
        *((_QWORD *)&v72 + 1) = v27 + 40;
        Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v41 + 40), 295, 0, 0);
        v46 = 0;
        if (Declaration)
          v46 = *(uint64_t ***)(Declaration + 24);
        v66 = 257;
        v47 = sub_1C4774778((uint64_t *)v71, v46, Declaration, 0, 0, (uint64_t)v65, 0);
        *(_QWORD *)(v47 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v47 + 64), **(uint64_t ***)v47, -1, 32);
        *(_QWORD *)(v47 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v47 + 64), **(uint64_t ***)v47, -1, 37);
        v64 = v70;
        if (v70)
          llvm::MetadataTracking::track((uint64_t)&v64, v70, 2);
        v48 = (unsigned __int8 **)(v47 + 48);
        v29 = (_BYTE *)&unk_1ED812000;
        if (&v64 == v48)
        {
          if (v64)
            llvm::MetadataTracking::untrack((uint64_t)&v64, v64);
        }
        else
        {
          if (*v48)
            llvm::MetadataTracking::untrack((uint64_t)v48, *v48);
          v49 = v64;
          *v48 = v64;
          if (v49)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v64, v49, (uint64_t)v48);
            v64 = 0;
          }
        }
        LLVMBuildUnreachable_0((uint64_t)v71);
        v50 = (uint64_t)v67;
        if ((_QWORD)v68)
        {
          sub_1C4D8AE2C((uint64_t)v67, v68, *((uint64_t *)&v68 + 1));
          v50 = (uint64_t)v67;
        }
        else
        {
          v67[6] = 0;
          *(_QWORD *)(v50 + 56) = 0;
        }
        v65[0] = v69;
        if (v69)
        {
          llvm::MetadataTracking::track((uint64_t)v65, v69, 2);
          v51 = v65[0];
        }
        else
        {
          v51 = 0;
        }
        sub_1C4774EF4(v50, 0, (uint64_t)v51);
        if (v65[0])
          llvm::MetadataTracking::untrack((uint64_t)v65, v65[0]);
        if (v69)
          llvm::MetadataTracking::untrack((uint64_t)&v69, v69);
        if (v70)
          llvm::MetadataTracking::untrack((uint64_t)&v70, v70);
      }
      if ((v61 & 1) != 0)
      {
        v52 = operator new(0xA0uLL);
        v53 = 0;
        v54 = (llvm::BranchInst *)(v52 + 24);
        v52[29] = v52[29] & 0x38000000 | 3;
        do
        {
          v55 = &v52[v53];
          *v55 = 0;
          v55[1] = 0;
          v55[2] = 0;
          v55[3] = v54;
          v53 += 8;
        }
        while (v53 != 24);
        llvm::BranchInst::BranchInst(v54, (llvm::BasicBlock *)v27, v60, (llvm::Value *)v32, (llvm::BasicBlock *)v35);
      }
      else
      {
        v56 = operator new(0x60uLL);
        v56[13] = v56[13] & 0x38000000 | 1;
        *(_QWORD *)v56 = 0;
        *((_QWORD *)v56 + 1) = 0;
        *((_QWORD *)v56 + 2) = 0;
        *((_QWORD *)v56 + 3) = v56 + 8;
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v56 + 8), (llvm::BasicBlock *)v27, (llvm::BasicBlock *)v35);
      }
    }
    sub_1C61A4038(v71);
    v26 += 16;
    if (v26 != v28)
      continue;
    break;
  }
  v26 = (char *)v73;
  v6 = (_DWORD)v74 != 0;
LABEL_113:
  if (v26 != v75)
    free(v26);
LABEL_115:
  if (v84 != v83)
    free(v84);
  if (v82 != (void *)v81[3])
    free(v82);
  sub_1C4EC4314(v81);
  v78[15] = &off_1E8167568;
  v57 = v80;
  if (v80 == v79)
  {
    v58 = 4;
    v57 = v79;
    goto LABEL_121;
  }
  if (v80)
  {
    v58 = 5;
LABEL_121:
    (*(void (**)(void))(*v57 + 8 * v58))();
  }
  if (v77 != v78)
    free(v77);
  return v6;
}

void llvm::initializeBoundsCheckingLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F7180);
  if (v2 != -1)
  {
    v5[0] = sub_1C5870DE4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F7180, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5870DE4(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Run-time bounds checking";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "bounds-checking";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F51F8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C587191C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5870E78(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F51F8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E817D8F8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F7180);
  if (v3 != -1)
  {
    v7[0] = sub_1C5870DE4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F7180, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5870F40(llvm::Type **a1, uint64_t a2, llvm::DataLayout *a3, llvm::ObjectSizeOffsetEvaluator *a4, uint64_t a5, uint64_t a6)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::ValueHandleBase *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  llvm::ValueHandleBase *v19;
  llvm::ConstantInt *v20;
  llvm::ConstantInt *v21;
  llvm::Value **v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t SCEVIter;
  uint64_t RangeRef;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  llvm::Value **v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const llvm::APInt *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  const llvm::APInt *v67;
  uint64_t v68;
  llvm::ConstantInt *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  llvm::Value **v78;
  _QWORD *v79;
  llvm::ConstantInt *v81;
  size_t v82;
  size_t v83;
  size_t v84;
  size_t v85;
  size_t v86;
  size_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  __int16 v98;
  void *v99;
  unsigned int v100;
  void *v101;
  unsigned int v102;
  void *v103;
  unsigned int v104;
  void *v105;
  unsigned int v106;
  void *v107;
  unsigned int v108;
  void *v109;
  unsigned int v110;
  unint64_t v111;
  unsigned int v112;

  sub_1C4768AD0((uint64_t)a3, a2);
  v13 = v12;
  if ((_DWORD)v11 == 1)
  v14 = llvm::ObjectSizeOffsetEvaluator::compute(a4, a1);
  v16 = 0;
  if (v14)
  {
    v17 = v15;
    if (v15)
    {
      v18 = (unint64_t)v14;
      if (*((_BYTE *)v14 + 16) == 16)
        v19 = v14;
      else
        v19 = 0;
      llvm::DataLayout::getIntPtrType(a3, *a1);
      v21 = v20;
      v22 = llvm::ConstantInt::get(v20, (unint64_t)(v13 + 7) >> 3, 0);
      v23 = *(_QWORD *)(a6 + 104);
      v24 = *(_DWORD *)(a6 + 120);
      if (v24)
      {
        v25 = (v24 - 1) & ((v18 >> 4) ^ (v18 >> 9));
        v26 = v23 + 48 * v25;
        v27 = *(_QWORD *)(v26 + 24);
        if (v27 == v18)
        {
LABEL_15:
          if (v26 == v23 + 48 * v24 || (SCEVIter = *(_QWORD *)(v26 + 40)) == 0)
            SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a6, v18);
          RangeRef = llvm::ScalarEvolution::getRangeRef(a6, SCEVIter, 0, 0);
          v32 = RangeRef;
          v33 = *(unsigned int *)(RangeRef + 8);
          v108 = v33;
          if (v33 > 0x40)
          {
            v82 = ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8;
            v107 = (void *)operator new[]();
            memcpy(v107, *(const void **)v32, v82);
          }
          else
          {
            v107 = *(void **)RangeRef;
          }
          v34 = *(unsigned int *)(v32 + 24);
          v110 = v34;
          if (v34 > 0x40)
          {
            v83 = ((unint64_t)(v34 + 63) >> 3) & 0x3FFFFFF8;
            v109 = (void *)operator new[]();
            memcpy(v109, *(const void **)(v32 + 16), v83);
          }
          else
          {
            v109 = *(void **)(v32 + 16);
          }
          v35 = *(_QWORD *)(a6 + 104);
          v36 = *(_DWORD *)(a6 + 120);
          if (v36)
          {
            v37 = (v36 - 1) & ((v17 >> 4) ^ (v17 >> 9));
            v38 = v35 + 48 * v37;
            v39 = *(_QWORD *)(v38 + 24);
            if (v39 == v17)
            {
LABEL_29:
              if (v38 == v35 + 48 * v36 || (v42 = *(_QWORD *)(v38 + 40)) == 0)
                v42 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a6, v17);
              v43 = llvm::ScalarEvolution::getRangeRef(a6, v42, 0, 0);
              v44 = v43;
              v45 = *(unsigned int *)(v43 + 8);
              v104 = v45;
              if (v45 > 0x40)
              {
                v84 = ((unint64_t)(v45 + 63) >> 3) & 0x3FFFFFF8;
                v103 = (void *)operator new[]();
                memcpy(v103, *(const void **)v44, v84);
              }
              else
              {
                v103 = *(void **)v43;
              }
              v46 = *(unsigned int *)(v44 + 24);
              v106 = v46;
              if (v46 > 0x40)
              {
                v85 = ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8;
                v105 = (void *)operator new[]();
                memcpy(v105, *(const void **)(v44 + 16), v85);
              }
              else
              {
                v105 = *(void **)(v44 + 16);
              }
              v47 = *(_QWORD *)(a6 + 104);
              v48 = *(_DWORD *)(a6 + 120);
              if (v48)
              {
                v49 = (v48 - 1) & ((v22 >> 4) ^ (v22 >> 9));
                v50 = v47 + 48 * v49;
                v51 = *(llvm::Value ***)(v50 + 24);
                if (v51 == v22)
                {
LABEL_43:
                  if (v50 == v47 + 48 * v48 || (v54 = *(_QWORD *)(v50 + 40)) == 0)
                    v54 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a6, (unint64_t)v22);
                  v55 = llvm::ScalarEvolution::getRangeRef(a6, v54, 0, 0);
                  v56 = v55;
                  v57 = *(unsigned int *)(v55 + 8);
                  v100 = v57;
                  if (v57 > 0x40)
                  {
                    v86 = ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8;
                    v99 = (void *)operator new[]();
                    memcpy(v99, *(const void **)v56, v86);
                  }
                  else
                  {
                    v99 = *(void **)v55;
                  }
                  v58 = *(unsigned int *)(v56 + 24);
                  v102 = v58;
                  if (v58 > 0x40)
                  {
                    v87 = ((unint64_t)(v58 + 63) >> 3) & 0x3FFFFFF8;
                    v101 = (void *)operator new[]();
                    memcpy(v101, *(const void **)(v56 + 16), v87);
                  }
                  else
                  {
                    v101 = *(void **)(v56 + 16);
                  }
                  v98 = 257;
                  v59 = sub_1C47733F8(a5, v18, v17, (uint64_t)&v96, 0, 0);
                  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)&v107, (llvm::APInt *)&v111);
                  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&v103, (llvm::APInt *)&v94);
                  if (v112 > 0x40)
                  {
                    v62 = (((unint64_t)v112 + 63) >> 3) & 0x3FFFFFF8;
                    while (v62)
                    {
                      v63 = *(_QWORD *)(v111 - 8 + v62);
                      v64 = *(_QWORD *)(v94 - 8 + v62);
                      v62 -= 8;
                      if (v63 != v64)
                      {
                        if (v63 <= v64)
                          goto LABEL_52;
                        break;
                      }
                    }
                  }
                  else if (v111 < v94)
                  {
LABEL_52:
                    v98 = 257;
                    v61 = (_QWORD *)sub_1C4774B48(a5, 36, v18, v17, (uint64_t)&v96);
                    goto LABEL_58;
                  }
                  v65 = *(uint64_t **)*a1;
                  v66 = *v65;
                  v61 = *(_QWORD **)(*v65 + 1568);
                  if (!v61)
                  {
                    v69 = *(llvm::ConstantInt **)(v66 + 1888);
                    v91 = *(_DWORD *)(v66 + 1896) >> 8;
                    if (v91 > 0x40)
                      llvm::APInt::initSlowCase((llvm::APInt *)&v90, 0, 0);
                    else
                      v90 = 0;
                    v61 = llvm::ConstantInt::get(v69, (llvm::LLVMContext *)&v90, v60);
                    if (v91 >= 0x41 && v90)
                      MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
                    *(_QWORD *)(v66 + 1568) = v61;
                  }
LABEL_58:
                  if (v95 >= 0x41 && v94)
                    MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
                  if (v112 >= 0x41 && v111)
                    MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
                  llvm::ConstantRange::sub((llvm::ConstantRange *)&v107, (const llvm::ConstantRange *)&v103, (uint64_t)&v90);
                  llvm::ConstantRange::getUnsignedMin((llvm::APInt *)&v90, (llvm::APInt *)&v94);
                  llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&v99, (llvm::APInt *)&v88);
                  if (v95 > 0x40)
                  {
                    v70 = (((unint64_t)v95 + 63) >> 3) & 0x3FFFFFF8;
                    while (v70)
                    {
                      v71 = *(_QWORD *)(v94 - 8 + v70);
                      v72 = *(_QWORD *)(v88 - 8 + v70);
                      v70 -= 8;
                      if (v71 != v72)
                      {
                        if (v71 <= v72)
                          goto LABEL_66;
                        break;
                      }
                    }
                  }
                  else if (v94 < v88)
                  {
LABEL_66:
                    v98 = 257;
                    v68 = sub_1C4774B48(a5, 36, v59, (uint64_t)v22, (uint64_t)&v96);
LABEL_76:
                    if (v89 >= 0x41 && v88)
                      MEMORY[0x1CAA32F9C](v88, 0x1000C8000313F17);
                    if (v95 >= 0x41 && v94)
                      MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
                    if (v93 >= 0x41 && v92)
                      MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
                    if (v91 >= 0x41 && v90)
                      MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
                    v98 = 257;
                    v16 = sub_1C4773594(a5, v61, v68, (uint64_t)&v96);
                    if (!v19 || sub_1C4DA9220((llvm::ValueHandleBase *)((char *)v19 + 24), 0))
                    {
                      llvm::ConstantRange::getSignedMin((uint64_t)&v107, (llvm::APInt *)&v96);
                      v75 = v97 - 1;
                      if (v97 >= 0x41)
                        v76 = (uint64_t *)(v96 + 8 * (v75 >> 6));
                      else
                        v76 = &v96;
                      v77 = (1 << v75) & *v76;
                      if (v97 >= 0x41 && v96)
                        MEMORY[0x1CAA32F9C]();
                      if (v77)
                      {
                        v78 = llvm::ConstantInt::get(v21, 0, 0);
                        v98 = 257;
                        v79 = (_QWORD *)sub_1C4774B48(a5, 40, v17, (uint64_t)v78, (uint64_t)&v96);
                        v98 = 257;
                        v16 = sub_1C4773594(a5, v79, v16, (uint64_t)&v96);
                      }
                    }
                    if (v102 >= 0x41 && v101)
                      MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
                    if (v100 >= 0x41 && v99)
                      MEMORY[0x1CAA32F9C](v99, 0x1000C8000313F17);
                    if (v106 >= 0x41 && v105)
                      MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
                    if (v104 >= 0x41 && v103)
                      MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
                    if (v110 >= 0x41 && v109)
                      MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
                    if (v108 >= 0x41 && v107)
                      MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
                    return v16;
                  }
                  v73 = *(uint64_t **)*a1;
                  v74 = *v73;
                  v68 = *(_QWORD *)(*v73 + 1568);
                  if (!v68)
                  {
                    v81 = *(llvm::ConstantInt **)(v74 + 1888);
                    v112 = *(_DWORD *)(v74 + 1896) >> 8;
                    if (v112 > 0x40)
                      llvm::APInt::initSlowCase((llvm::APInt *)&v111, 0, 0);
                    else
                      v111 = 0;
                    v68 = (uint64_t)llvm::ConstantInt::get(v81, (llvm::LLVMContext *)&v111, v67);
                    if (v112 >= 0x41 && v111)
                      MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
                    *(_QWORD *)(v74 + 1568) = v68;
                  }
                  goto LABEL_76;
                }
                v52 = 1;
                while (v51 != (llvm::Value **)-4096)
                {
                  v53 = v49 + v52++;
                  v49 = v53 & (v48 - 1);
                  v50 = v47 + 48 * v49;
                  v51 = *(llvm::Value ***)(v50 + 24);
                  if (v51 == v22)
                    goto LABEL_43;
                }
              }
              v50 = v47 + 48 * v48;
              goto LABEL_43;
            }
            v40 = 1;
            while (v39 != -4096)
            {
              v41 = v37 + v40++;
              v37 = v41 & (v36 - 1);
              v38 = v35 + 48 * v37;
              v39 = *(_QWORD *)(v38 + 24);
              if (v39 == v17)
                goto LABEL_29;
            }
          }
          v38 = v35 + 48 * v36;
          goto LABEL_29;
        }
        v28 = 1;
        while (v27 != -4096)
        {
          v29 = v25 + v28++;
          v25 = v29 & (v24 - 1);
          v26 = v23 + 48 * v25;
          v27 = *(_QWORD *)(v26 + 24);
          if (v27 == v18)
            goto LABEL_15;
        }
      }
      v26 = v23 + 48 * v24;
      goto LABEL_15;
    }
  }
  return v16;
}

uint64_t sub_1C587191C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5870E78(v0);
}

void sub_1C5871948(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C587196C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
}

BOOL sub_1C58719A8(uint64_t a1, uint64_t a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  uint64_t v12;
  void *v14;
  void **v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18[2];
  int v19;
  uint64_t v20[2];
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *__src;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::TargetLibraryInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  llvm::TargetLibraryAnalysis::run(v6 + 32, a2, (uint64_t)&v25);
  *(_QWORD *)(v6 + 240) = v25;
  if (*(_BYTE *)(v6 + 320))
  {
    if ((uint64_t *)(v6 + 240) == &v25)
    {
LABEL_16:
      *(_DWORD *)(v6 + 312) = v29;
      goto LABEL_17;
    }
    v7 = (void **)(v6 + 248);
    v8 = v27;
    v9 = *(unsigned int *)(v6 + 256);
    if (v9 >= v27)
    {
      if (v27)
        memmove(*v7, __src, 8 * v27);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v6 + 260) < v27)
    {
      *(_DWORD *)(v6 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 248, v6 + 264, v8, 8);
    }
    else if ((_DWORD)v9)
    {
      memmove(*v7, __src, 8 * v9);
      goto LABEL_13;
    }
    v9 = 0;
LABEL_13:
    if (v9 != v27)
      memcpy((char *)*v7 + 8 * v9, (char *)__src + 8 * v9, 8 * v27 - 8 * v9);
LABEL_15:
    *(_DWORD *)(v6 + 256) = v8;
    goto LABEL_16;
  }
  v14 = (void *)(v6 + 264);
  *(_QWORD *)(v6 + 248) = v6 + 264;
  v15 = (void **)(v6 + 248);
  *(_QWORD *)(v6 + 256) = 0x600000000;
  v16 = v27;
  if (v27 && v15 != &__src)
  {
    if (v27 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 248, v6 + 264, v27, 8);
      v17 = v27;
      if (!v27)
      {
LABEL_29:
        *(_DWORD *)(v6 + 256) = v16;
        goto LABEL_30;
      }
      v14 = *v15;
    }
    else
    {
      v17 = v27;
    }
    memcpy(v14, __src, 8 * v17);
    goto LABEL_29;
  }
LABEL_30:
  *(_DWORD *)(v6 + 312) = v29;
  *(_BYTE *)(v6 + 320) = 1;
LABEL_17:
  if (__src != &v28)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v20);
  sub_1C4D8B52C(v18);
  v10 = **(void ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::ScalarEvolutionWrapperPass::ID);
  v12 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::ScalarEvolutionWrapperPass::ID);
  return sub_1C5870608(a2, v6 + 240, *(_QWORD *)(v12 + 32));
}

uint64_t sub_1C5871C40()
{
  __int128 v1;

  *(_QWORD *)&v1 = "Use one trap block per function";
  *((_QWORD *)&v1 + 1) = 31;
  sub_1C62AAF3C(&v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED812140, &dword_1C475E000);
}

void llvm::initializeCGProfileLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F7188);
  if (v2 != -1)
  {
    v5[0] = sub_1C5871CE8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F7188, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5871CE8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Call Graph Profile";
  *(_QWORD *)(v2 + 8) = 18;
  *(_QWORD *)(v2 + 16) = "cg-profile";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F51F9;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C58723FC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5871D78(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F51F9;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817D998;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F7188);
  if (v3 != -1)
  {
    v7[0] = sub_1C5871CE8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F7188, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5871E40(llvm::Module *a1, uint64_t (*a2)(uint64_t, _QWORD *), uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD *), uint64_t a5, int a6)
{
  llvm::Value *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const llvm::BasicBlock *v14;
  uint64_t *BlockProfileCount;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  unsigned int v25;
  BOOL v27;
  _QWORD *v28;
  unint64_t v29;
  _BOOL4 v30;
  int ValueProfDataFromInst;
  __int128 *v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v45;
  uint64_t *v46;
  char *v47;
  uint64_t *v48;
  llvm::ValueAsMetadata *v49;
  llvm::ValueAsMetadata *v50;
  uint64_t v51;
  llvm::Value *v52;
  const llvm::APInt *v53;
  llvm::ConstantInt *v54;
  unsigned int v55;
  unint64_t v56;
  llvm::Value *v57;
  llvm::ValueHandleBase *v58;
  uint64_t Impl;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  _QWORD *v75;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t **v80;
  _QWORD *v81;
  uint64_t v82;
  unsigned int v83;
  _BYTE v84[44];
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[25];
  _QWORD v90[2];
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  _QWORD *v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90[0] = 0;
  v90[1] = 0;
  v91 = 0;
  v93 = 0;
  v94 = 0;
  v92 = 0;
  memset(v84, 0, sizeof(v84));
  v85 = 8;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  memset(v89, 0, sizeof(v89));
  llvm::InstrProfSymtab::create((llvm::InstrProfSymtab *)v84, a1, 0, (uint64_t *)&v96);
  if ((_QWORD)v96)
    (*(void (**)(_QWORD))(*(_QWORD *)v96 + 8))(v96);
  v8 = (_QWORD *)*((_QWORD *)a1 + 4);
  v77 = (_QWORD *)((char *)a1 + 24);
  if (v8 == (_QWORD *)((char *)a1 + 24))
  {
LABEL_79:
    v43 = 0;
    goto LABEL_80;
  }
  v70 = (uint64_t **)a1;
  do
  {
    if (v8)
      v9 = v8 - 7;
    else
      v9 = 0;
    v78 = v8;
    if (v8 && *((_BYTE *)v9 + 16) == 3)
    {
      if ((*((_DWORD *)v9 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_77;
    }
    else if (!*((_BYTE *)v9 + 16) && (_QWORD *)v9[9] == v9 + 9 && (v9[4] & 0x800000) == 0)
    {
      goto LABEL_77;
    }
    if (a6)
    {
      v10 = v9;
      llvm::Function::getEntryCount((uint64_t ***)v9, 0, (uint64_t)&v96);
      if (!(_BYTE)v97)
        goto LABEL_77;
    }
    else
    {
      v10 = v9;
    }
    v11 = a2(a3, v10);
    v80 = (uint64_t **)v11;
    if (*(_QWORD *)v11 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 16))
    {
      v81 = (_QWORD *)a4(a5, v10);
      v12 = v10 + 9;
      v75 = v10;
      v13 = (_QWORD *)v10[10];
      v79 = v10 + 9;
      while (v13 != v12)
      {
        if (v13)
          v14 = (const llvm::BasicBlock *)(v13 - 3);
        else
          v14 = 0;
        BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(v80, v14, 0);
        if ((_BYTE)v7)
        {
          v16 = (_QWORD *)((char *)v14 + 40);
          v17 = (_QWORD *)*((_QWORD *)v14 + 6);
          if (v17 != (_QWORD *)((char *)v14 + 40))
          {
            v18 = BlockProfileCount;
            do
            {
              if (v17)
                v19 = v17 - 3;
              else
                v19 = 0;
              v20 = *((unsigned __int8 *)v19 + 16) - 33;
              v21 = v20 > 0x33;
              v22 = (1 << v20) & 0x8000000000041;
              if (!v21 && v22 != 0)
              {
                v24 = *(v17 - 7);
                v25 = *(unsigned __int8 *)(v24 + 16);
                if (v25 < 0x15 || v25 == 24)
                {
                  if (!*(_BYTE *)(v24 + 16))
                  {
                    v27 = *(_QWORD *)(v24 + 24) != v17[6] || v18 == 0;
                    if (!v27
                      && (*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v81 + 176))(*v81, *(v17 - 7))
                      && (*(_DWORD *)(v24 + 32) & 0x300) != 0x100)
                    {
                      *(_QWORD *)&v96 = v75;
                      *((_QWORD *)&v96 + 1) = v24;
                      v28 = (_QWORD *)sub_1C62AB0EC((uint64_t)v90, &v96);
                      v29 = (unint64_t)v18 + *v28;
                      v30 = __CFADD__(*v28, v18);
                      if (v29 < (unint64_t)v18)
                        v30 = 1;
                      if (v30)
                        v29 = -1;
                      *v28 = v29;
                    }
                  }
                }
                else
                {
                  v83 = 0;
                  v82 = 0;
                  ValueProfDataFromInst = llvm::getValueProfDataFromInst((uint64_t)(v17 - 3), 0, 8u, (uint64_t)&v96, &v83, &v82, 0);
                  if (ValueProfDataFromInst && v83)
                  {
                    v32 = &v96 + v83;
                    v33 = (unint64_t *)&v96;
                    do
                    {
                      v34 = sub_1C62AB070((uint64_t *)v84, *v33);
                      v35 = v33[1];
                      if (v34)
                        v36 = v35 == 0;
                      else
                        v36 = 1;
                      if (!v36)
                      {
                        v37 = v34;
                        if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v81 + 176))(*v81, v34))
                        {
                          if ((*(_DWORD *)(v37 + 32) & 0x300) != 0x100)
                          {
                            *(_QWORD *)&v95 = v75;
                            *((_QWORD *)&v95 + 1) = v37;
                            v38 = (_QWORD *)sub_1C62AB0EC((uint64_t)v90, &v95);
                            v39 = *v38 + v35;
                            v40 = __CFADD__(*v38, v35);
                            if (v39 < v35)
                              v40 = 1;
                            if (v40)
                              v39 = -1;
                            *v38 = v39;
                          }
                        }
                      }
                      v33 += 2;
                    }
                    while (v33 != (unint64_t *)v32);
                  }
                }
              }
              v17 = (_QWORD *)v17[1];
            }
            while (v17 != v16);
          }
        }
        v13 = (_QWORD *)v13[1];
        v12 = v79;
      }
    }
LABEL_77:
    v8 = (_QWORD *)v78[1];
  }
  while (v8 != v77);
  v41 = v92;
  v42 = v93;
  if (v92 == v93)
    goto LABEL_79;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = *v70;
  do
  {
    v49 = *(llvm::ValueAsMetadata **)v41;
    v50 = *(llvm::ValueAsMetadata **)(v41 + 8);
    v51 = *(_QWORD *)(v41 + 16);
    v96 = 0uLL;
    v97 = 0;
    *(_QWORD *)&v96 = llvm::ValueAsMetadata::get(v49, v7);
    *((_QWORD *)&v96 + 1) = llvm::ValueAsMetadata::get(v50, v52);
    v54 = *(llvm::ConstantInt **)(*v48 + 1984);
    v55 = *(_DWORD *)(*v48 + 1992);
    DWORD2(v95) = v55 >> 8;
    if (v55 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v95, v51, 0);
    }
    else
    {
      if (v55 <= 0xFF)
        v56 = 0;
      else
        v56 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v55);
      *(_QWORD *)&v95 = v56 & v51;
    }
    v58 = llvm::ConstantInt::get(v54, (llvm::LLVMContext *)&v95, v53);
    if (DWORD2(v95) >= 0x41 && (_QWORD)v95)
      MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
    v97 = llvm::ValueAsMetadata::get(v58, v57);
    Impl = llvm::MDTuple::getImpl(v48, &v96, 3, 0, 1);
    v60 = Impl;
    if (v46 >= v45)
    {
      v61 = ((char *)v46 - v47) >> 3;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61)
        abort();
      if (((char *)v45 - v47) >> 2 > v62)
        v62 = ((char *)v45 - v47) >> 2;
      if ((unint64_t)((char *)v45 - v47) >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v62;
      if (v63)
      {
        if (v63 >> 61)
          sub_1C4764EE4();
        v64 = (char *)operator new(8 * v63);
      }
      else
      {
        v64 = 0;
      }
      v65 = (uint64_t *)&v64[8 * v61];
      *v65 = v60;
      v66 = v65 + 1;
      if (v46 != (uint64_t *)v47)
      {
        do
        {
          v67 = *--v46;
          *--v65 = v67;
        }
        while (v46 != (uint64_t *)v47);
        v46 = (uint64_t *)v47;
      }
      v47 = (char *)v65;
      v45 = (uint64_t *)&v64[8 * v63];
      if (v46)
        operator delete(v46);
      v46 = v66;
    }
    else
    {
      *v46++ = Impl;
    }
    v41 += 24;
  }
  while (v41 != v42);
  v68 = ((char *)v46 - v47) >> 3;
  v43 = 1;
  v69 = llvm::MDTuple::getImpl(v48, v47, v68, 0, 1);
  llvm::Module::addModuleFlag(v70, (llvm::Type *)5, "CG Profile", 0xAuLL, v69);
  if (v47)
    operator delete(v47);
LABEL_80:
  sub_1C624BA64(v84);
  sub_1C6176BF8(v90);
  return v43;
}

uint64_t sub_1C58723FC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5871D78(v0);
}

void sub_1C5872428(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C587244C(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::LazyBlockFrequencyInfoPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
}

uint64_t sub_1C5872494(uint64_t a1, llvm::Module *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1;
  v4 = a1;
  return sub_1C5871E40(a2, (uint64_t (*)(uint64_t, _QWORD *))sub_1C58724D8, (uint64_t)&v4, (uint64_t (*)(uint64_t, _QWORD *))sub_1C587252C, (uint64_t)&v3, 1);
}

uint64_t sub_1C58724D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  v3 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v2 + 96))(v2, llvm::LazyBlockFrequencyInfoPass::ID);
  return sub_1C619C0A4(v3 + 32);
}

uint64_t *sub_1C587252C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13[2];
  int v14;
  _QWORD v15[2];
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v4 = **(char ****)(*(_QWORD *)a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::TargetTransformInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v7 = *(_QWORD *)(v6 + 56);
  if (!v7)
  {
    sub_1C485C2F0();
    goto LABEL_10;
  }
  v2 = v15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(&v12, v7, a2);
  a2 = (uint64_t *)(v6 + 64);
  v8 = v12;
  if (!*(_BYTE *)(v6 + 72))
  {
    *(_QWORD *)(v6 + 64) = v12;
    *(_BYTE *)(v6 + 72) = 1;
    goto LABEL_7;
  }
  v12 = 0;
  v9 = *a2;
  *a2 = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v12;
    v12 = 0;
    if (v10)
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_7:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(v13);
  return a2;
}

_OWORD *sub_1C587264C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62AB320(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5872714(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::BlockFrequencyAnalysis::Key, a2) + 8;
}

uint64_t sub_1C587273C(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::TargetIRAnalysis::Key, a2) + 8;
}

void llvm::initializeControlHeightReductionLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F7190);
  if (v2 != -1)
  {
    v5[0] = sub_1C58727C4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F7190, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C58727C4(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeRegionInfoPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "Reduce control height in the hot paths";
  *(_QWORD *)(v5 + 8) = 38;
  *(_QWORD *)(v5 + 16) = "chr";
  *(_QWORD *)(v5 + 24) = 3;
  *(_QWORD *)(v5 + 32) = &unk_1EF8F5200;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C5875D70;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C5872870(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5200;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E817DA38;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F7190);
  if (v3 != -1)
  {
    v7[0] = sub_1C58727C4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F7190, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  sub_1C5872960();
  return a1;
}

llvm::ControlHeightReductionPass *llvm::ControlHeightReductionPass::ControlHeightReductionPass(llvm::ControlHeightReductionPass *this)
{
  sub_1C5872960();
  return this;
}

{
  sub_1C5872960();
  return this;
}

void sub_1C5872960()
{
  uint64_t v0;
  llvm *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  size_t v7;
  uint64_t v8;
  llvm *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  unsigned __int8 *v14;
  size_t v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  uint64_t *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  uint64_t v21[3];
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __int16 v26;
  _QWORD v27[2];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v0 = qword_1ED812510;
  if (byte_1ED81251F >= 0)
    v0 = byte_1ED81251F & 0x7F;
  if (v0)
  {
    v26 = 260;
    v24 = &qword_1ED812508;
    v1 = (llvm *)sub_1C5E1F6CC((unsigned __int8 *)&v24, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v27);
    if ((v28 & 1) != 0)
    {
      v16 = (llvm::raw_ostream *)llvm::errs(v1);
      v17 = sub_1C4816AD8(v16, "Error: Couldn't read the chr-module-list file ");
      v18 = &qword_1ED812508;
      goto LABEL_32;
    }
    v2 = v27[0];
    v3 = *(_QWORD *)(v27[0] + 16) - *(_QWORD *)(v27[0] + 8);
    v24 = *(uint64_t **)(v27[0] + 8);
    v25 = v3;
    v22 = &v24;
    v23 = 0;
    llvm::StringRef::split((char *)&v24, (uint64_t)&v22, 10, -1, 1);
    v4 = (uint64_t **)v22;
    if ((_DWORD)v23)
    {
      v5 = 16 * v23;
      do
      {
        *(_OWORD *)v21 = *(_OWORD *)v4;
        v6 = (unsigned __int8 *)sub_1C534E9D8(v21, " \t\n\v\f\r", 6);
        v21[0] = (uint64_t)v6;
        v21[1] = v7;
        if (v7)
          sub_1C4F024D8((llvm::StringMapImpl *)&qword_1ED812200, v6, v7);
        v4 += 2;
        v5 -= 16;
      }
      while (v5);
      v4 = (uint64_t **)v22;
    }
    if (v4 != &v24)
      free(v4);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v8 = qword_1ED8125F8;
  if (byte_1ED812607 >= 0)
    v8 = byte_1ED812607 & 0x7F;
  if (v8)
  {
    v26 = 260;
    v24 = &qword_1ED8125F0;
    v9 = (llvm *)sub_1C5E1F6CC((unsigned __int8 *)&v24, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v27);
    if ((v28 & 1) == 0)
    {
      v10 = v27[0];
      v11 = *(_QWORD *)(v27[0] + 16) - *(_QWORD *)(v27[0] + 8);
      v24 = *(uint64_t **)(v27[0] + 8);
      v25 = v11;
      v22 = &v24;
      v23 = 0;
      llvm::StringRef::split((char *)&v24, (uint64_t)&v22, 10, -1, 1);
      v12 = (uint64_t **)v22;
      if ((_DWORD)v23)
      {
        v13 = 16 * v23;
        do
        {
          *(_OWORD *)v21 = *(_OWORD *)v12;
          v14 = (unsigned __int8 *)sub_1C534E9D8(v21, " \t\n\v\f\r", 6);
          v21[0] = (uint64_t)v14;
          v21[1] = v15;
          if (v15)
            sub_1C4F024D8((llvm::StringMapImpl *)&qword_1ED812220, v14, v15);
          v12 += 2;
          v13 -= 16;
        }
        while (v13);
        v12 = (uint64_t **)v22;
      }
      if (v12 != &v24)
        free(v12);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      return;
    }
    v19 = (llvm::raw_ostream *)llvm::errs(v9);
    v17 = sub_1C4816AD8(v19, "Error: Couldn't read the chr-function-list file ");
    v18 = &qword_1ED8125F0;
LABEL_32:
    v20 = sub_1C620429C(v17, v18);
    sub_1C4816AD8(v20, "\n");
    exit(1);
  }
}

uint64_t sub_1C5872C40(uint64_t ****a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  void **v12;
  void **v13;
  void **v14;
  __int128 *v15;
  _QWORD ***v16;
  llvm::OptimizationRemarkEmitter *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void **v28;
  void **v29;
  void **v30;
  unint64_t v31;
  void **v32;
  void **v33;
  unint64_t v34;
  void **v35;
  unsigned int v36;
  _BYTE *v37;
  unint64_t v38;
  const std::nothrow_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t ***v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t *v48;
  char v49;
  unsigned __int8 *v50;
  size_t v51;
  size_t v52;
  int v53;
  size_t v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  _QWORD **v66;
  _QWORD ***v67;
  _QWORD **v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t *BlockProfileCount;
  char v72;
  unsigned int v73;
  _QWORD **v74;
  uint64_t v75;
  void *v76;
  _WORD *v77;
  void *v78;
  int v79;
  unsigned int v80;
  void *v81;
  _BYTE *v82;
  void *v83;
  unsigned int v84;
  unsigned int v85;
  char *v86;
  char *v87;
  char *v88;
  int v89;
  BOOL v90;
  int v91;
  unsigned int v92;
  llvm::BasicBlock *v93;
  uint64_t v94;
  uint64_t i;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  int64x2_t *v99;
  unsigned int v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  BOOL v108;
  BOOL v109;
  uint64_t v110;
  uint64_t *v111;
  _QWORD *v112;
  _QWORD *v113;
  llvm::Value *v114;
  char *v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  BOOL v122;
  char *v124;
  char *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  std::string::size_type v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  BOOL v141;
  int v143;
  uint64_t v144;
  unsigned int v145;
  BOOL v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  llvm::ValueSymbolTable *v151;
  llvm::BasicBlock *v152;
  uint64_t v153;
  char *v154;
  unint64_t v155;
  _QWORD *v156;
  unsigned int v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t ***v170;
  uint64_t v171;
  llvm::LLVMContext *v172;
  llvm::LLVMContext *v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD **v176;
  uint64_t v177;
  char *v178;
  void *v179;
  void *v180;
  int v181;
  unsigned int v182;
  void *v183;
  _WORD *v184;
  void *v185;
  unsigned int v186;
  unsigned int v187;
  char *v188;
  char *v189;
  char *v190;
  int v191;
  BOOL v192;
  uint64_t ***v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v197;
  unint64_t v198;
  uint64_t ***v199;
  int32x2_t *v200;
  unint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t ****v205;
  uint64_t ***v206;
  int v207;
  int v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t *v211;
  uint64_t v212;
  int32x2_t *v213;
  unint64_t v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  unsigned int v223;
  uint64_t j;
  uint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  _QWORD *v241;
  unint64_t v242;
  uint64_t v243;
  int32x2_t *v244;
  unint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  int v251;
  int v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD **v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  const llvm::APInt *v263;
  unint64_t v264;
  uint64_t v265;
  int32x2_t *v266;
  unint64_t v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  int v273;
  int v274;
  llvm::BasicBlock *v275;
  uint64_t *v276;
  uint64_t v277;
  llvm::Value *v278;
  _DWORD *v279;
  _DWORD *v280;
  uint64_t v281;
  llvm::Value *v282;
  _QWORD *v283;
  _QWORD *v284;
  uint64_t v285;
  const llvm::Instruction *v286;
  void *v287;
  llvm::DominatorTree *v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  int v293;
  int v294;
  BOOL v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  int v303;
  const llvm::APInt *v304;
  llvm::BasicBlock *v305;
  uint64_t *v306;
  uint64_t v307;
  llvm::ValueHandleBase *v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unsigned int v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  uint64_t **v317;
  uint64_t v318;
  uint64_t *v319;
  int v320;
  unsigned int v321;
  llvm::ValueHandleBase **v322;
  const llvm::APInt *v323;
  uint64_t v324;
  llvm::ValueHandleBase *v325;
  llvm::ConstantInt *v326;
  unsigned int v327;
  char v328;
  uint64_t v329;
  uint64_t v330;
  llvm::ValueHandleBase ***v331;
  uint64_t v332;
  llvm::ConstantInt *v333;
  uint64_t *v334;
  int v335;
  unint64_t v336;
  uint64_t v337;
  unsigned __int8 *v338;
  unsigned __int8 *v339;
  unsigned int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  BOOL v344;
  uint64_t v345;
  llvm::ValueHandleBase **v346;
  uint64_t v347;
  const llvm::APInt *v348;
  uint64_t v349;
  llvm::ValueHandleBase *v350;
  llvm::ConstantInt *v351;
  uint64_t v352;
  uint64_t v353;
  llvm::ValueHandleBase ***v354;
  uint64_t v355;
  llvm::ConstantInt *v356;
  unsigned int v357;
  char v358;
  uint64_t v359;
  llvm::OptimizationRemarkEmitter *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  void **v369;
  unint64_t v370;
  void **v371;
  void **v372;
  unint64_t v373;
  void **v374;
  uint64_t v375;
  uint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  uint64_t v379;
  llvm::MDNode *BranchWeights;
  _QWORD *v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t *v386;
  uint64_t v387;
  int32x2_t *v388;
  unint64_t v389;
  uint64_t v390;
  unsigned int v391;
  uint64_t v392;
  uint64_t *v393;
  uint64_t v394;
  int v395;
  int v396;
  unint64_t v398;
  unint64_t *v399;
  uint64_t v400;
  int32x2_t *v401;
  unint64_t v402;
  uint64_t v403;
  unsigned int v404;
  uint64_t v405;
  uint64_t *v406;
  uint64_t v407;
  int v408;
  int v409;
  uint64_t v410;
  llvm::ValueSymbolTable *v411;
  llvm::ConstantInt *v412;
  unsigned int v413;
  char v414;
  llvm::ConstantInt *v415;
  unsigned int v416;
  char v417;
  llvm::OptimizationRemarkEmitter *v418;
  uint64_t v419;
  uint64_t result;
  uint64_t **v421;
  uint64_t v422;
  uint64_t *v423;
  uint64_t v424;
  unsigned int v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t ****v430;
  uint64_t ***v431;
  int v432;
  int v433;
  unsigned int v434;
  uint64_t ***v435;
  size_t v436;
  char *v437;
  size_t v438;
  uint64_t v439;
  int v440;
  char v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  int v447;
  uint64_t v448;
  _QWORD *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  void **v453;
  unint64_t v454;
  void **v455;
  void **v456;
  unint64_t v457;
  void **v458;
  int64x2_t v459;
  char *v460;
  int v461;
  llvm::Value *v462;
  char v463;
  uint64_t *v464;
  _QWORD **v465;
  _QWORD *v466;
  _QWORD *v467;
  char *v468;
  _DWORD *v469;
  llvm::BasicBlock *v470;
  llvm::BasicBlock *v471;
  llvm::BasicBlock *v472;
  uint64_t v473;
  __int128 *v474;
  unint64_t v475;
  int v476[2];
  int v477[2];
  uint64_t v478;
  uint64_t v479;
  _QWORD v481[2];
  int v482;
  uint64_t v483[2];
  unsigned int v484;
  uint64_t v485[3];
  char v486;
  unsigned int v487;
  llvm::ValueHandleBase *v488;
  const char *v489;
  uint64_t v490;
  unint64_t *v491;
  uint64_t ***v492;
  uint64_t *v493;
  void *v494;
  uint64_t v495;
  _BYTE v496[64];
  void *v497;
  uint64_t v498;
  _BYTE v499[64];
  void *v500;
  uint64_t v501;
  _BYTE v502[64];
  void *v503;
  uint64_t v504;
  _BYTE v505[64];
  std::string v506;
  void *v507;
  char v508;
  std::string v509;
  void *v510;
  _BYTE v511[15];
  char v512;
  void *v513;
  _BYTE *v514;
  uint64_t v515;
  std::string v516;
  void *__p;
  _WORD v518[7];
  char v519;
  void *v520;
  char *v521;
  uint64_t v522;
  uint64_t v523;
  int64x2_t v524;
  _OWORD v525[3];
  void *v526;
  void *v527;
  unsigned int v528;
  void *v529;
  char *v530;
  uint64_t v531;
  void *v532;
  void *__src;
  unint64_t *v534;
  __int128 v535;
  const char *v536;
  const char *v537;
  uint64_t v538;
  char v539;
  char v540;
  void *v541;
  uint64_t v542;
  void *v543;
  _BYTE *v544;
  void *v545;
  void *v546;
  unsigned int v547;
  unsigned int v548;
  int v549;
  void *v550;
  _BYTE *v551;
  char v552;
  int v553;
  uint64_t v554;
  uint64_t v555;

  v555 = *MEMORY[0x1E0C80C00];
  if (byte_1ED8122C0)
    goto LABEL_2;
  v42 = *a1;
  v43 = qword_1ED812510;
  if (byte_1ED81251F >= 0)
    v43 = byte_1ED81251F & 0x7F;
  if (!v43)
  {
    v44 = qword_1ED8125F8;
    if (byte_1ED812607 >= 0)
      v44 = byte_1ED812607 & 0x7F;
    if (!v44)
    {
      if (!llvm::ProfileSummaryInfo::isFunctionEntryHot((llvm::ProfileSummaryInfo *)a1[3], *a1))
        return 0;
LABEL_2:
      v506.__r_.__value_.__r.__words[0] = (std::string::size_type)&v506.__r_.__value_.__r.__words[2];
      v506.__r_.__value_.__l.__size_ = 0x800000000;
      v1 = sub_1C5875FF4((uint64_t)a1, (uint64_t)a1[4][4], (uint64_t)&v506);
      v2 = v506.__r_.__value_.__r.__words[1];
      if (v1)
      {
        v3 = v1;
        if (LODWORD(v506.__r_.__value_.__r.__words[1]) >= HIDWORD(v506.__r_.__value_.__r.__words[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v506, (uint64_t)&v506.__r_.__value_.__r.__words[2], LODWORD(v506.__r_.__value_.__r.__words[1]) + 1, 8);
          v2 = v506.__r_.__value_.__r.__words[1];
        }
        *(_QWORD *)(v506.__r_.__value_.__r.__words[0] + 8 * v2) = v3;
        v2 = ++LODWORD(v506.__r_.__value_.__r.__words[1]);
      }
      v503 = v505;
      v504 = 0x800000000;
      if (!v2)
        goto LABEL_56;
      v4 = (uint64_t *)v506.__r_.__value_.__r.__words[0];
      v5 = 8 * v2;
      do
      {
        v6 = *v4;
        v524.i64[0] = 0;
        v523 = 0;
        v524.i32[2] = 0;
        sub_1C587876C(v6, (uint64_t)&v523);
        sub_1C587881C((uint64_t)&v532, (uint64_t)a1, v6, 0, 0, 0, (uint64_t)&v503, &v523);
        if (v532 != &v534)
          free(v532);
        MEMORY[0x1CAA32FB4](v523, 8);
        ++v4;
        v5 -= 8;
      }
      while (v5);
      if ((_DWORD)v504)
      {
        v7 = (uint64_t **)v503;
        v8 = 8 * v504;
        do
        {
          v9 = *v7++;
          sub_1C587A864((uint64_t)a1, v9, (uint64_t)v9);
          v8 -= 8;
        }
        while (v8);
        v10 = (char *)v503;
        v500 = v502;
        v501 = 0x800000000;
        if ((_DWORD)v504)
        {
          v11 = (char *)v503 + 8 * v504;
          v12 = &v541;
          v13 = &v543;
          v14 = &v529;
          v15 = &v535;
          do
          {
            v16 = *(_QWORD ****)v10;
            if (*(_DWORD *)(*(_QWORD *)v10 + 904)
               + *(_DWORD *)(*(_QWORD *)v10 + 880)
               + *(_DWORD *)(*(_QWORD *)v10 + 1712)
               + *(_DWORD *)(*(_QWORD *)v10 + 1736) >= dword_1ED812380)
            {
              v22 = v501;
              if (v501 >= (unint64_t)HIDWORD(v501))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v500, (uint64_t)v502, v501 + 1, 8);
                v22 = v501;
              }
              *((_QWORD *)v500 + v22) = v16;
              LODWORD(v501) = v501 + 1;
            }
            else
            {
              v17 = (llvm::OptimizationRemarkEmitter *)a1[5];
              v18 = ****(_QWORD ****)v17;
              if (*(_QWORD *)(v18 + 128)
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v18 + 72) + 48))(*(_QWORD *)(v18 + 72)))
              {
                v19 = ***v16 & 0xFFFFFFFFFFFFFFF8;
                v20 = *(_QWORD *)(v19 + 40);
                if (v20 == v19 + 40)
                {
                  v21 = 0;
                }
                else
                {
                  if (v20)
                    v23 = v20 - 24;
                  else
                    v23 = 0;
                  if (*(unsigned __int8 *)(v23 + 16) - 29 >= 0xB)
                    v21 = 0;
                  else
                    v21 = v23;
                }
                v24 = *(unint64_t **)(*(_QWORD *)(v21 + 40) + 56);
                llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v516, (const llvm::DebugLoc *)(v21 + 48));
                v25 = *(_QWORD *)(v21 + 40);
                LODWORD(__src) = 10;
                BYTE4(__src) = 2;
                *v15 = *(_OWORD *)&v516.__r_.__value_.__l.__data_;
                v534 = v24;
                v536 = "chr";
                v537 = "DropScopeWithOneBranchOrSelect";
                v538 = 30;
                v539 = 0;
                v540 = 0;
                v541 = v13;
                v542 = 0x400000000;
                v552 = 0;
                v553 = -1;
                v554 = v25;
                v532 = &off_1E814E538;
                v516.__r_.__value_.__r.__words[0] = (std::string::size_type)"Drop scope with < ";
                v516.__r_.__value_.__l.__size_ = 18;
                sub_1C53B17B4((uint64_t)v12, (const void **)&v516.__r_.__value_.__l.__data_);
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v516, "CHRMergeThreshold", 0x11uLL, dword_1ED812380);
                v26 = sub_1C47E3888((uint64_t)&v532, (uint64_t)&v516);
                v509.__r_.__value_.__r.__words[0] = (std::string::size_type)" biased branch(es) or select(s)";
                v509.__r_.__value_.__l.__size_ = 31;
                sub_1C53B17B4(v26 + 80, (const void **)&v509.__r_.__value_.__l.__data_);
                sub_1C61998EC((uint64_t)&v523, v26);
                v523 = (uint64_t)&off_1E814E538;
                if (v519 < 0)
                  operator delete(__p);
                if (SHIBYTE(v516.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v516.__r_.__value_.__l.__data_);
                v532 = &off_1E814E790;
                v27 = (void **)v541;
                if ((_DWORD)v542)
                {
                  v474 = v15;
                  v28 = v13;
                  v29 = v14;
                  v30 = v12;
                  v31 = (unint64_t)v542 << 6;
                  do
                  {
                    v32 = (void **)((char *)v27 + v31);
                    if (*((char *)v27 + v31 - 17) < 0)
                      operator delete(*(v32 - 5));
                    if (*((char *)v32 - 41) < 0)
                      operator delete(*(v32 - 8));
                    v31 -= 64;
                  }
                  while (v31);
                  v27 = (void **)v541;
                  v12 = v30;
                  v14 = v29;
                  v13 = v28;
                  v15 = v474;
                }
                if (v27 != v13)
                  free(v27);
                llvm::OptimizationRemarkEmitter::emit(v17, (llvm::DiagnosticInfoOptimizationBase *)&v523);
                v523 = (uint64_t)&off_1E814E790;
                v33 = (void **)v527;
                if (v528)
                {
                  v34 = (unint64_t)v528 << 6;
                  do
                  {
                    v35 = (void **)((char *)v33 + v34);
                    if (*((char *)v33 + v34 - 17) < 0)
                      operator delete(*(v35 - 5));
                    if (*((char *)v35 - 41) < 0)
                      operator delete(*(v35 - 8));
                    v34 -= 64;
                  }
                  while (v34);
                  v33 = (void **)v527;
                }
                if (v33 != v14)
                  free(v33);
              }
            }
            v10 += 8;
          }
          while (v10 != v11);
          v421 = (uint64_t **)v500;
          v497 = v499;
          v498 = 0x800000000;
          if ((_DWORD)v501)
          {
            v422 = 8 * v501;
            do
            {
              v423 = *v421;
              sub_1C587AA40((uint64_t)a1, *v421, (uint64_t)*v421);
              v424 = v498;
              if (v498 >= (unint64_t)HIDWORD(v498))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v497, (uint64_t)v499, v498 + 1, 8);
                v424 = v498;
              }
              *((_QWORD *)v497 + v424) = v423;
              v38 = (v498 + 1);
              LODWORD(v498) = v498 + 1;
              ++v421;
              v422 -= 8;
            }
            while (v422);
            v37 = v496;
            v494 = v496;
            v495 = 0x800000000;
            if ((_DWORD)v38)
            {
              if (v38 < 9)
              {
                v425 = 0;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v494, (uint64_t)v496, v38, 8);
                v37 = v494;
                v425 = v495;
              }
              if (v425 != (_DWORD)v38)
              {
                bzero(&v37[8 * v425], 8 * (v38 - v425));
                v37 = v494;
              }
              LODWORD(v495) = v38;
              if (!(_DWORD)v498)
              {
                v36 = v38;
LABEL_60:
                v532 = sub_1C587AD08;
                if (v36 < 0x81)
                {
LABEL_64:
                  sub_1C587AD44((uint64_t)v37, (uint64_t *)&v37[8 * v38], (uint64_t (**)(uint64_t, uint64_t))&v532, v38, 0, 0);
                }
                else
                {
                  v39 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
                  v40 = v38;
                  while (1)
                  {
                    v41 = (uint64_t *)operator new(8 * v40, v39);
                    if (v41)
                      break;
                    v109 = v40 > 1;
                    v40 >>= 1;
                    if (!v109)
                      goto LABEL_64;
                  }
                  v65 = v41;
                  sub_1C587AD44((uint64_t)v37, (uint64_t *)&v37[8 * v38], (uint64_t (**)(uint64_t, uint64_t))&v532, v38, v41, v40);
                  operator delete(v65);
                }
                v461 = v495;
                if ((_DWORD)v495)
                {
                  v66 = (_QWORD **)v494;
                  v460 = (char *)v494 + 8 * v495;
                  v481[0] = 0;
                  v481[1] = 0;
                  v482 = 0;
                  v459 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
                  while (1)
                  {
                    v465 = v66;
                    v67 = (_QWORD ***)*v66;
                    v68 = (_QWORD **)**v66;
                    v466 = *v68;
                    v69 = v68[12 * *((unsigned int *)*v66 + 2) - 12];
                    v70 = (_QWORD *)v69[4];
                    v475 = **v68 & 0xFFFFFFFFFFFFFFF8;
                    BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount((uint64_t **)a1[1], (const llvm::BasicBlock *)v475, 0);
                    v463 = v72;
                    v464 = BlockProfileCount;
                    v473 = (uint64_t)v67;
                    if (v70)
                    {
                      v523 = 1;
                      v524 = v459;
                      v525[0] = v459;
                      v525[1] = v459;
                      v525[2] = v459;
                      v526 = &v528;
                      v527 = (void *)0x800000000;
                      v73 = *((_DWORD *)v67 + 2);
                      if (v73)
                      {
                        v74 = *v67;
                        v75 = (uint64_t)&(*v67)[12 * v73];
                        do
                        {
                          llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks(*v74, &v532);
                          v516.__r_.__value_.__r.__words[0] = (std::string::size_type)v518;
                          v76 = __src;
                          if (__src == v532)
                          {
                            v516.__r_.__value_.__l.__size_ = (std::string::size_type)v518;
                            v77 = v518;
                            v78 = __src;
                          }
                          else
                          {
                            v91 = (int)v534;
                            v77 = malloc_type_malloc(8 * v534, 0x4065EBACuLL);
                            if (!v77 && (v91 || (v77 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_784:
                              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
                            v516.__r_.__value_.__l.__size_ = (std::string::size_type)v77;
                            v78 = v532;
                            v76 = __src;
                          }
                          v79 = HIDWORD(v534);
                          LODWORD(v516.__r_.__value_.__r.__words[2]) = (_DWORD)v534;
                          if (v76 == v78)
                            v80 = HIDWORD(v534);
                          else
                            v80 = v534;
                          if (v80)
                          {
                            memmove(v77, v76, 8 * v80);
                            v79 = HIDWORD(v534);
                          }
                          HIDWORD(v516.__r_.__value_.__r.__words[2]) = v79;
                          LODWORD(__p) = v535;
                          v521 = 0;
                          v522 = 0;
                          v520 = 0;
                          sub_1C4E19D7C(&v520, v543, v544, (v544 - (_BYTE *)v543) >> 5);
                          v509.__r_.__value_.__r.__words[0] = (std::string::size_type)v511;
                          v81 = v546;
                          if (v546 == v545)
                          {
                            v509.__r_.__value_.__l.__size_ = (std::string::size_type)v511;
                            v82 = v511;
                            v83 = v546;
                          }
                          else
                          {
                            v92 = v547;
                            v82 = malloc_type_malloc(8 * v547, 0x4065EBACuLL);
                            if (!v82)
                            {
                              if (v92)
                                goto LABEL_784;
                              v82 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                              if (!v82)
                                goto LABEL_784;
                            }
                            v509.__r_.__value_.__l.__size_ = (std::string::size_type)v82;
                            v83 = v545;
                            v81 = v546;
                          }
                          v84 = v548;
                          LODWORD(v509.__r_.__value_.__r.__words[2]) = v547;
                          if (v81 == v83)
                            v85 = v548;
                          else
                            v85 = v547;
                          if (v85)
                          {
                            memmove(v82, v81, 8 * v85);
                            v84 = v548;
                          }
                          HIDWORD(v509.__r_.__value_.__r.__words[2]) = v84;
                          LODWORD(v510) = v549;
                          v514 = 0;
                          v515 = 0;
                          v513 = 0;
                          sub_1C4E19D7C(&v513, v550, v551, (v551 - (_BYTE *)v550) >> 5);
                          while (1)
                          {
                            if (v521 - (_BYTE *)v520 != v514 - (_BYTE *)v513)
                              goto LABEL_124;
                            if (v520 == v521)
                              break;
                            v86 = (char *)v513 + 16;
                            v87 = (char *)v520 + 16;
                            while (1)
                            {
                              v88 = v87 - 16;
                              if (*((_QWORD *)v87 - 2) != *((_QWORD *)v86 - 2))
                                break;
                              v89 = v86[8];
                              if (v87[8])
                                v90 = v89 == 0;
                              else
                                v90 = 1;
                              if (v90)
                              {
                                if ((v87[8] == 0) == (v89 != 0))
                                  break;
                              }
                              else if (*(_DWORD *)v87 != *(_DWORD *)v86)
                              {
                                break;
                              }
                              v86 += 32;
                              v87 += 32;
                              if (v88 + 32 == v521)
                                goto LABEL_125;
                            }
LABEL_124:
                            v483[0] = 0;
                            v483[0] = *((_QWORD *)v521 - 4);
                            sub_1C50878C8((uint64_t)&v523, v483);
                            sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v516);
                          }
LABEL_125:
                          if (v513)
                          {
                            v514 = v513;
                            operator delete(v513);
                          }
                          if (v509.__r_.__value_.__l.__size_ != v509.__r_.__value_.__r.__words[0])
                            free((void *)v509.__r_.__value_.__l.__size_);
                          if (v520)
                          {
                            v521 = (char *)v520;
                            operator delete(v520);
                          }
                          if (v516.__r_.__value_.__l.__size_ != v516.__r_.__value_.__r.__words[0])
                            free((void *)v516.__r_.__value_.__l.__size_);
                          if (v550)
                          {
                            v551 = v550;
                            operator delete(v550);
                          }
                          if (v546 != v545)
                            free(v546);
                          if (v543)
                          {
                            v544 = v543;
                            operator delete(v543);
                          }
                          if (__src != v532)
                            free(__src);
                          v74 += 12;
                        }
                        while (v74 != (_QWORD **)v75);
                        v93 = (llvm::BasicBlock *)v526;
                        v468 = (char *)v526 + 8 * v527;
                        if ((_DWORD)v527)
                        {
LABEL_154:
                          v470 = v93;
                          v94 = *(_QWORD *)v93 + 40;
                          for (i = *(_QWORD *)(*(_QWORD *)v93 + 48); ; i = *(_QWORD *)(i + 8))
                          {
                            if (i == v94)
                            {
                              v93 = (llvm::BasicBlock *)((char *)v470 + 8);
                              if ((char *)v470 + 8 == v468)
                              {
                                v93 = (llvm::BasicBlock *)v526;
                                break;
                              }
                              goto LABEL_154;
                            }
                            if (i)
                              v96 = (uint64_t *)(i - 24);
                            else
                              v96 = 0;
                            v532 = &v534;
                            __src = (void *)0x800000000;
                            v97 = v96[1];
                            if (!v97)
                              goto LABEL_221;
                            do
                            {
                              v103 = *(_QWORD *)(v97 + 24);
                              if (v103)
                                v104 = *(unsigned __int8 *)(v103 + 16) >= 0x1Cu;
                              else
                                v104 = 0;
                              if (!v104)
                                goto LABEL_178;
                              v98 = sub_1C62ABE2C((uint64_t)&v523, *(_QWORD *)(v103 + 40));
                              v99 = &v524;
                              if ((v523 & 1) != 0)
                              {
                                v100 = 8;
                              }
                              else
                              {
                                v99 = (int64x2_t *)v524.i64[0];
                                v100 = v524.u32[2];
                              }
                              if ((int64x2_t *)((char *)v99 + 8 * v100) != (int64x2_t *)v98)
                              {
                                v101 = *(_QWORD **)(v103 + 40);
LABEL_166:
                                if (v101 != (_QWORD *)v475 || *(_BYTE *)(v103 + 16) != 83)
                                  goto LABEL_178;
                                goto LABEL_171;
                              }
                              if (*(_BYTE *)(v103 + 16) == 83)
                              {
                                v101 = v70;
                                if (*(_QWORD **)(v103 + 40) == v70)
                                  goto LABEL_166;
                              }
LABEL_171:
                              v102 = __src;
                              if (__src >= (unint64_t)HIDWORD(__src))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v532, (uint64_t)&v534, __src + 1, 8);
                                v102 = __src;
                              }
                              *((_QWORD *)v532 + v102) = v103;
                              LODWORD(__src) = (_DWORD)__src + 1;
LABEL_178:
                              v97 = *(_QWORD *)(v97 + 8);
                            }
                            while (v97);
                            if ((_DWORD)__src)
                            {
                              v509.__r_.__value_.__r.__words[0] = 0;
                              v105 = v70[1];
                              if (v105)
                              {
                                while (1)
                                {
                                  v106 = *(_QWORD *)(v105 + 24);
                                  v107 = *(unsigned __int8 *)(v106 + 16);
                                  v108 = v106 && v107 >= 0x1C;
                                  v109 = !v108 || v107 - 29 > 0xA;
                                  if (!v109)
                                    break;
                                  v105 = *(_QWORD *)(v105 + 8);
                                  if (!v105)
                                    goto LABEL_190;
                                }
                                v143 = 0;
LABEL_234:
                                ++v143;
                                while (1)
                                {
                                  v105 = *(_QWORD *)(v105 + 8);
                                  if (!v105)
                                    break;
                                  v144 = *(_QWORD *)(v105 + 24);
                                  v145 = *(unsigned __int8 *)(v144 + 16);
                                  if (v144)
                                    v146 = v145 >= 0x1C;
                                  else
                                    v146 = 0;
                                  if (v146 && v145 - 29 < 0xB)
                                    goto LABEL_234;
                                }
                              }
                              else
                              {
LABEL_190:
                                v143 = 0;
                              }
                              v110 = *v96;
                              v518[0] = 257;
                              v111 = (uint64_t *)v70[6];
                              v112 = operator new(0x48uLL);
                              v113 = v112;
                              v112[1] = v110;
                              v114 = (llvm::Value *)(v112 + 1);
                              *v112 = 0;
                              v112[2] = 0;
                              v112[3] = 0x4000000000000053;
                              *((_OWORD *)v112 + 2) = 0u;
                              v115 = (char *)(v112 + 4);
                              *((_OWORD *)v112 + 3) = 0u;
                              *((_DWORD *)v112 + 16) = 0;
                              if (v111)
                              {
                                v148 = v111[2];
                                v112[6] = v148;
                                *(_WORD *)(v148 + 18) &= ~0x8000u;
                                if ((*((_BYTE *)v112 + 31) & 0x10) != 0)
                                {
                                  v150 = *(_QWORD *)(v148 + 56);
                                  if (v150)
                                  {
                                    v151 = *(llvm::ValueSymbolTable **)(v150 + 104);
                                    if (v151)
                                      llvm::ValueSymbolTable::reinsertValue(v151, v114);
                                  }
                                }
                                v149 = *v111;
                                v113[4] = *v111;
                                v113[5] = v111;
                                *(_QWORD *)(v149 + 8) = v115;
                                *v111 = (uint64_t)v115;
                              }
                              *((_DWORD *)v113 + 17) = v143;
                              llvm::Value::setName((uint64_t ***)v114, (uint64_t)&v516);
                              v116 = *((unsigned int *)v113 + 17);
                              v117 = operator new(40 * v116);
                              *v113 = v117;
                              if ((_DWORD)v116)
                              {
                                v118 = &v117[4 * v116];
                                do
                                {
                                  *v117 = 0;
                                  v117[1] = 0;
                                  v117[2] = 0;
                                  v117[3] = v114;
                                  v117 += 4;
                                }
                                while (v117 != v118);
                              }
                              v509.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
                              v119 = v70[1];
                              if (v119)
                              {
                                while (1)
                                {
                                  v120 = *(_QWORD *)(v119 + 24);
                                  v121 = *(unsigned __int8 *)(v120 + 16);
                                  v122 = v120 && v121 >= 0x1C;
                                  if (v122 && v121 - 29 <= 0xA)
                                    break;
                                  v119 = *(_QWORD *)(v119 + 8);
                                  if (!v119)
                                    goto LABEL_205;
                                }
LABEL_224:
                                sub_1C477667C(v114, (uint64_t)v96, *(_QWORD *)(v120 + 40));
                                while (1)
                                {
                                  v119 = *(_QWORD *)(v119 + 8);
                                  if (!v119)
                                    break;
                                  v120 = *(_QWORD *)(v119 + 24);
                                  v140 = *(unsigned __int8 *)(v120 + 16);
                                  if (v120)
                                    v141 = v140 >= 0x1C;
                                  else
                                    v141 = 0;
                                  if (v141 && v140 - 29 <= 0xA)
                                  {
                                    v114 = (llvm::Value *)v509.__r_.__value_.__r.__words[0];
                                    goto LABEL_224;
                                  }
                                }
                              }
LABEL_205:
                              sub_1C5818A48((uint64_t)v481, &v509, (uint64_t)&v516);
                              if ((_DWORD)__src)
                              {
                                v124 = (char *)v532;
                                v125 = (char *)v532 + 8 * __src;
                                do
                                {
                                  v126 = *(_QWORD *)v124;
                                  v127 = *(_DWORD *)(*(_QWORD *)v124 + 20);
                                  v128 = v127 & 0x7FFFFFF;
                                  if ((v127 & 0x7FFFFFF) != 0)
                                  {
                                    v129 = 0;
                                    v130 = 32 * v128;
                                    do
                                    {
                                      v131 = *(_DWORD *)(v126 + 20);
                                      if ((v131 & 0x40000000) != 0)
                                        v132 = *(_QWORD *)(v126 - 8);
                                      else
                                        v132 = v126 - 32 * (v131 & 0x7FFFFFF);
                                      if (*(uint64_t **)(v132 + v129) == v96)
                                      {
                                        v133 = v509.__r_.__value_.__r.__words[0];
                                        v134 = v132 + v129;
                                        v135 = (_QWORD *)(v134 + 8);
                                        **(_QWORD **)(v134 + 16) = *(_QWORD *)(v134 + 8);
                                        v136 = *(_QWORD *)(v134 + 8);
                                        if (v136)
                                          *(_QWORD *)(v136 + 16) = *(_QWORD *)(v134 + 16);
                                        *(_QWORD *)v134 = v133;
                                        if (v133)
                                        {
                                          v139 = *(_QWORD *)(v133 + 8);
                                          v137 = (_QWORD *)(v133 + 8);
                                          v138 = v139;
                                          *v135 = v139;
                                          if (v139)
                                            *(_QWORD *)(v138 + 16) = v135;
                                          *(_QWORD *)(v134 + 16) = v137;
                                          *v137 = v134;
                                        }
                                      }
                                      v129 += 32;
                                    }
                                    while (v130 != v129);
                                  }
                                  v124 += 8;
                                }
                                while (v124 != v125);
                              }
                            }
LABEL_221:
                            if (v532 != &v534)
                              free(v532);
                          }
                        }
                        if (v93 != (llvm::BasicBlock *)&v528)
                          free(v93);
                      }
                      if ((v523 & 1) == 0)
                        MEMORY[0x1CAA32FB4](v524.i64[0], 8);
                      v67 = (_QWORD ***)v473;
                    }
                    v152 = (llvm::BasicBlock *)v67[108];
                    v153 = (uint64_t)a1[2];
                    WORD4(v535) = 257;
                    v471 = (llvm::BasicBlock *)sub_1C5EBD70C((llvm *)v475, v152, 0, v153, 0, 0, (llvm::Twine *)&v532, 0);
                    llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::replaceEntryRecursive(v466, (uint64_t)v471);
                    v484 = 128;
                    v154 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
                    v483[0] = (uint64_t)v154;
                    v483[1] = 0;
                    if (v484)
                    {
                      v155 = (unint64_t)v484 << 6;
                      v156 = v154 + 16;
                      do
                      {
                        *v156 = 0;
                        v156[1] = -4096;
                        *(v156 - 2) = &unk_1E814DA10;
                        *(v156 - 1) = 2;
                        v156[2] = 0;
                        v156 += 8;
                        v155 -= 64;
                      }
                      while (v155);
                    }
                    LOBYTE(v485[0]) = 0;
                    v486 = 0;
                    v509.__r_.__value_.__r.__words[0] = (std::string::size_type)&v509.__r_.__value_.__r.__words[2];
                    v509.__r_.__value_.__l.__size_ = 0x800000000;
                    v157 = *((_DWORD *)v67 + 2);
                    if (v157)
                      break;
LABEL_260:
                    if (v70)
                    {
                      v158 = (uint64_t *)(*a1 + 9);
                      v159 = v70 + 3;
                      v160 = (uint64_t *)(*(_QWORD *)v509.__r_.__value_.__l.__data_ + 24);
                      if (v160 != v158 && v159 != v158)
                      {
                        v162 = *v158;
                        v163 = *v160;
                        *(_QWORD *)(v163 + 8) = v158;
                        *v158 = v163;
                        v164 = *v159;
                        *(_QWORD *)(v162 + 8) = v159;
                        *v160 = v164;
                        *(_QWORD *)(v164 + 8) = v160;
                        *v159 = v162;
                      }
                    }
                    v165 = LODWORD(v509.__r_.__value_.__r.__words[1]);
                    if (LODWORD(v509.__r_.__value_.__r.__words[1]))
                    {
                      v166 = 0;
                      do
                      {
                        v167 = *(_QWORD *)(v509.__r_.__value_.__r.__words[0] + 8 * v166);
                        v168 = v167 + 40;
                        v169 = *(_QWORD *)(v167 + 48);
                        if (v169 != v167 + 40)
                        {
                          do
                          {
                            if (v169)
                              v170 = (uint64_t ***)(v169 - 24);
                            else
                              v170 = 0;
                            v171 = operator new();
                            *(_DWORD *)v171 = 3;
                            *(_QWORD *)(v171 + 8) = 0;
                            *(_DWORD *)(v171 + 16) = 0;
                            *(_QWORD *)(v171 + 40) = v483;
                            *(_QWORD *)(v171 + 24) = v171 + 40;
                            *(_QWORD *)(v171 + 48) = 0;
                            *(_QWORD *)(v171 + 32) = 0x200000001;
                            *(_QWORD *)(v171 + 72) = v171 + 88;
                            *(_QWORD *)(v171 + 80) = 0x400000000;
                            *(_QWORD *)(v171 + 184) = v171 + 200;
                            *(_QWORD *)(v171 + 192) = 0x100000000;
                            *(_QWORD *)(v171 + 216) = v171 + 232;
                            *(_QWORD *)(v171 + 224) = 0x1000000000;
                            v523 = v171;
                            v532 = (void *)v171;
                            sub_1C5FD706C(v171, v170);
                            sub_1C5FD3718((uint64_t *)&v532, v172);
                            llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v523, v173);
                            v169 = *(_QWORD *)(v169 + 8);
                          }
                          while (v169 != v168);
                        }
                        ++v166;
                      }
                      while (v166 != v165);
                    }
                    if (v70 && (_QWORD *)v70[5] != v70 + 5)
                    {
                      for (j = v70[6]; ; j = *(_QWORD *)(v225 + 32))
                      {
                        v225 = j - 24;
                        v226 = j ? j - 24 : 0;
                        if (!j || *(_BYTE *)(v226 + 16) != 83)
                          break;
                        v227 = *(_DWORD *)(j - 4);
                        v228 = v227 & 0x7FFFFFF;
                        if ((v227 & 0x7FFFFFF) != 0)
                        {
                          v229 = 0;
                          do
                          {
                            v230 = *(_DWORD *)(v225 + 20);
                            if ((v230 & 0x40000000) != 0)
                              v231 = *(_QWORD *)(v225 - 8);
                            else
                              v231 = v225 - 32 * (v230 & 0x7FFFFFF);
                            v232 = *(_QWORD *)(v231 + 32 * *(unsigned int *)(v225 + 60) + 8 * v229);
                            if (llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v69, v232))
                            {
                              v233 = *(_DWORD *)(v225 + 20);
                              if ((v233 & 0x40000000) != 0)
                                v234 = *(_QWORD *)(v225 - 8);
                              else
                                v234 = v225 - 32 * (v233 & 0x7FFFFFF);
                              v235 = *(_QWORD *)(v234 + 32 * v229);
                              if (v484)
                              {
                                v236 = ((v235 >> 4) ^ (v235 >> 9)) & (v484 - 1);
                                v237 = v483[0] + (v236 << 6);
                                v238 = *(_QWORD *)(v237 + 24);
                                if (v235 == v238)
                                {
LABEL_400:
                                  if (v237 != v483[0] + ((unint64_t)v484 << 6))
                                    v235 = *(_QWORD *)(v237 + 56);
                                }
                                else
                                {
                                  v239 = 1;
                                  while (v238 != -4096)
                                  {
                                    v240 = v236 + v239++;
                                    v236 = v240 & (v484 - 1);
                                    v237 = v483[0] + (v236 << 6);
                                    v238 = *(_QWORD *)(v237 + 24);
                                    if (v235 == v238)
                                      goto LABEL_400;
                                  }
                                }
                              }
                              __src = (void *)2;
                              v534 = 0;
                              *(_QWORD *)&v535 = v232;
                              if (v232 != -8192 && v232 != -4096 && v232)
                                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__src);
                              v532 = &unk_1E814DA10;
                              *((_QWORD *)&v535 + 1) = v483;
                              v241 = sub_1C52E2ED8((uint64_t)v483, &v532);
                              if ((_QWORD)v535 != -8192 && (_QWORD)v535 != -4096 && (_QWORD)v535)
                              {
                                v242 = (unint64_t)__src & 0xFFFFFFFFFFFFFFF8;
                                *(_QWORD *)((unint64_t)__src & 0xFFFFFFFFFFFFFFF8) = v534;
                                if (v534)
                                {
                                  *v534 = *v534 & 7 | v242;
                                }
                                else
                                {
                                  v243 = v535;
                                  v244 = ***(int32x2_t ****)v535;
                                  v245 = (unint64_t)v244[303];
                                  if (v245 <= v242)
                                  {
                                    v246 = v244[305].u32[0];
                                    if (v245 + 16 * v246 > v242)
                                    {
                                      v247 = v246 - 1;
                                      LODWORD(v248) = v247 & ((v535 >> 4) ^ (v535 >> 9));
                                      v249 = (uint64_t *)(v245 + 16 * v248);
                                      v250 = *v249;
                                      if ((_QWORD)v535 == *v249)
                                      {
LABEL_417:
                                        *v249 = -8192;
                                        v244[304] = vadd_s32(v244[304], (int32x2_t)0x1FFFFFFFFLL);
                                        v243 = v535;
                                      }
                                      else
                                      {
                                        v251 = 1;
                                        while (v250 != -4096)
                                        {
                                          v252 = v248 + v251++;
                                          v248 = v252 & v247;
                                          v250 = *(_QWORD *)(v245 + 16 * v248);
                                          if ((_QWORD)v535 == v250)
                                          {
                                            v249 = (uint64_t *)(v245 + 16 * v248);
                                            goto LABEL_417;
                                          }
                                        }
                                      }
                                      *(_BYTE *)(v243 + 17) &= ~1u;
                                    }
                                  }
                                }
                              }
                              sub_1C477667C((llvm::PHINode *)v225, v235, v241[7]);
                            }
                            ++v229;
                          }
                          while (v229 != v228);
                        }
                      }
                    }
                    if ((std::string::size_type *)v509.__r_.__value_.__l.__data_ != &v509.__r_.__value_.__r.__words[2])
                      free(v509.__r_.__value_.__l.__data_);
                    v174 = *(_QWORD *)(v475 + 40);
                    if (v174 == v475 + 40)
                    {
                      v175 = 0;
                    }
                    else
                    {
                      if (v174)
                        v253 = v174 - 24;
                      else
                        v253 = 0;
                      if (*(unsigned __int8 *)(v253 + 16) - 29 >= 0xB)
                        v175 = 0;
                      else
                        v175 = v253;
                    }
                    v254 = *(_DWORD *)(v175 + 20);
                    if ((v254 & 0x40000000) != 0)
                    {
                      v256 = *(_QWORD *)(v175 - 8);
                      v255 = v254 & 0x7FFFFFF;
                      if (v255)
                      {
LABEL_431:
                        v257 = 32 * v255;
                        v258 = (_QWORD **)(v256 + 16);
                        do
                        {
                          if (*(v258 - 2))
                          {
                            **v258 = *(v258 - 1);
                            v259 = (uint64_t)*(v258 - 1);
                            if (v259)
                              *(_QWORD *)(v259 + 16) = *v258;
                          }
                          *(v258 - 2) = 0;
                          v258 += 4;
                          v257 -= 32;
                        }
                        while (v257);
                      }
                    }
                    else
                    {
                      v255 = v254 & 0x7FFFFFF;
                      v256 = v175 - 32 * v255;
                      if (v255)
                        goto LABEL_431;
                    }
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v175 + 40) + 40, (uint64_t ***)v175);
                    v260 = *(_QWORD *)(v175 + 24);
                    v261 = *(_QWORD **)(v175 + 32);
                    *v261 = v260;
                    *(_QWORD *)(v260 + 8) = v261;
                    *(_QWORD *)(v175 + 24) = 0;
                    *(_QWORD *)(v175 + 32) = 0;
                    llvm::Value::deleteValue((llvm::Value *)v175);
                    __src = (void *)2;
                    v534 = 0;
                    *(_QWORD *)&v535 = v471;
                    if (v471 != (llvm::BasicBlock *)-8192 && v471 != (llvm::BasicBlock *)-4096 && v471)
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&__src);
                    v532 = &unk_1E814DA10;
                    *((_QWORD *)&v535 + 1) = v483;
                    v262 = sub_1C52E2ED8((uint64_t)v483, &v532);
                    if ((_QWORD)v535 != -8192 && (_QWORD)v535 != -4096 && (_QWORD)v535)
                    {
                      v264 = (unint64_t)__src & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)((unint64_t)__src & 0xFFFFFFFFFFFFFFF8) = v534;
                      if (v534)
                      {
                        *v534 = *v534 & 7 | v264;
                      }
                      else
                      {
                        v265 = v535;
                        v266 = ***(int32x2_t ****)v535;
                        v267 = (unint64_t)v266[303];
                        if (v267 <= v264)
                        {
                          v268 = v266[305].u32[0];
                          if (v267 + 16 * v268 > v264)
                          {
                            v269 = v268 - 1;
                            LODWORD(v270) = v269 & ((v535 >> 4) ^ (v535 >> 9));
                            v271 = (uint64_t *)(v267 + 16 * v270);
                            v272 = *v271;
                            if ((_QWORD)v535 == *v271)
                            {
LABEL_451:
                              *v271 = -8192;
                              v266[304] = vadd_s32(v266[304], (int32x2_t)0x1FFFFFFFFLL);
                              v265 = v535;
                            }
                            else
                            {
                              v273 = 1;
                              while (v272 != -4096)
                              {
                                v274 = v270 + v273++;
                                v270 = v274 & v269;
                                v272 = *(_QWORD *)(v267 + 16 * v270);
                                if ((_QWORD)v535 == v272)
                                {
                                  v271 = (uint64_t *)(v267 + 16 * v270);
                                  goto LABEL_451;
                                }
                              }
                            }
                            *(_BYTE *)(v265 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    v467 = (_QWORD *)(v475 + 40);
                    v275 = (llvm::BasicBlock *)v262[7];
                    v276 = ***a1;
                    v277 = *v276;
                    v278 = *(llvm::Value **)(*v276 + 1560);
                    if (!v278)
                    {
                      v412 = *(llvm::ConstantInt **)(v277 + 1888);
                      v413 = *(_DWORD *)(v277 + 1896);
                      LODWORD(__src) = v413 >> 8;
                      if (v413 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v532, 1, 0);
                      }
                      else
                      {
                        if (v413 <= 0xFF)
                          v414 = 0;
                        else
                          v414 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v413);
                        v532 = (void *)(v414 & 1);
                      }
                      v278 = llvm::ConstantInt::get(v412, (llvm::LLVMContext *)&v532, v263);
                      if (__src >= 0x41 && v532)
                        MEMORY[0x1CAA32F9C](v532, 0x1000C8000313F17);
                      *(_QWORD *)(v277 + 1560) = v278;
                    }
                    v279 = operator new(0xA0uLL);
                    v280 = v279;
                    v281 = 0;
                    v282 = (llvm::Value *)(v279 + 24);
                    v279[29] = v279[29] & 0x38000000 | 3;
                    do
                    {
                      v283 = &v279[v281];
                      *v283 = 0;
                      v283[1] = 0;
                      v283[2] = 0;
                      v283[3] = v282;
                      v281 += 8;
                    }
                    while (v281 != 24);
                    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v279 + 24), v471, v275, v278, 0);
                    *((_QWORD *)v280 + 17) = v475;
                    *(_WORD *)(v475 + 18) &= ~0x8000u;
                    if ((*((_BYTE *)v280 + 119) & 0x10) != 0)
                    {
                      v410 = *(_QWORD *)(v475 + 56);
                      if (v410)
                      {
                        v411 = *(llvm::ValueSymbolTable **)(v410 + 104);
                        if (v411)
                          llvm::ValueSymbolTable::reinsertValue(v411, v282);
                      }
                    }
                    v284 = (_QWORD *)(v475 + 40);
                    v285 = *v467;
                    *((_QWORD *)v280 + 15) = *v467;
                    *((_QWORD *)v280 + 16) = v467;
                    *(_QWORD *)(v285 + 8) = v280 + 30;
                    *v467 = v280 + 30;
                    v462 = v282;
                    v469 = v280;
                    if (v280 + 30 == (_DWORD *)v467)
                    {
                      v286 = 0;
                    }
                    else if (*((unsigned __int8 *)v280 + 112) - 29 >= 0xB)
                    {
                      v286 = 0;
                    }
                    else
                    {
                      v286 = v282;
                    }
                    v287 = 0;
                    v288 = (llvm::DominatorTree *)a1[2];
                    __src = 0;
                    v532 = 0;
                    LODWORD(v534) = 0;
                    v289 = *(_DWORD *)(v473 + 928);
                    if (v289)
                    {
                      v290 = *(_QWORD *)(v473 + 920);
                      *(_QWORD *)v476 = v290 + 96 * v289;
                      v291 = v473 + 1752;
                      do
                      {
                        v292 = *(_QWORD **)v290;
                        v293 = sub_1C61B75F0(*(_QWORD *)(v473 + 872), *(_DWORD *)(v473 + 888), *(_QWORD *)v290, &v523);
                        v294 = v293 | sub_1C61B75F0(*(_QWORD *)(v473 + 896), *(_DWORD *)(v473 + 912), (uint64_t)v292, &v523);
                        if (*(_BYTE *)(v290 + 8))
                          v295 = v294 == 0;
                        else
                          v295 = 1;
                        if (!v295)
                        {
                          v296 = *(_QWORD *)((*v292 & 0xFFFFFFFFFFFFFFF8) + 40);
                          if (v296)
                            v297 = v296 - 24;
                          else
                            v297 = 0;
                          if (*(unsigned __int8 *)(v297 + 16) - 29 >= 0xB)
                            v297 = 0;
                          sub_1C587B528(*(unsigned __int8 **)(v297 - 96), v286, (uint64_t)v292, v291, (uint64_t *)&v532, (uint64_t)v481, v288);
                        }
                        v298 = *(unsigned int *)(v290 + 24);
                        if ((_DWORD)v298)
                        {
                          v299 = *(uint64_t **)(v290 + 16);
                          v300 = 8 * v298;
                          do
                          {
                            v301 = *v299;
                            v302 = sub_1C61B75F0(*(_QWORD *)(v473 + 1704), *(_DWORD *)(v473 + 1720), *v299, &v523);
                            v303 = sub_1C61B75F0(*(_QWORD *)(v473 + 1728), *(_DWORD *)(v473 + 1744), v301, &v523);
                            if ((v302 & 1) != 0 || v303)
                              sub_1C587B528(*(unsigned __int8 **)(v301 - 96), v286, (uint64_t)v292, v291, (uint64_t *)&v532, (uint64_t)v481, v288);
                            ++v299;
                            v300 -= 8;
                          }
                          while (v300);
                        }
                        v290 += 96;
                      }
                      while (v290 != *(_QWORD *)v476);
                      v287 = v532;
                      v284 = v467;
                    }
                    MEMORY[0x1CAA32FB4](v287, 8);
                    if (v463)
                      v305 = (llvm::BasicBlock *)v464;
                    else
                      v305 = 0;
                    v306 = ***a1;
                    v307 = *v306;
                    v308 = *(llvm::ValueHandleBase **)(*v306 + 1560);
                    if (!v308)
                    {
                      v415 = *(llvm::ConstantInt **)(v307 + 1888);
                      v416 = *(_DWORD *)(v307 + 1896);
                      LODWORD(__src) = v416 >> 8;
                      if (v416 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v532, 1, 0);
                      }
                      else
                      {
                        if (v416 <= 0xFF)
                          v417 = 0;
                        else
                          v417 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v416);
                        v532 = (void *)(v417 & 1);
                      }
                      v308 = llvm::ConstantInt::get(v415, (llvm::LLVMContext *)&v532, v304);
                      if (__src >= 0x41 && v532)
                        MEMORY[0x1CAA32F9C](v532, 0x1000C8000313F17);
                      *(_QWORD *)(v307 + 1560) = v308;
                    }
                    v488 = v308;
                    v487 = 0x80000000;
                    v309 = (_QWORD *)*v284;
                    v472 = v305;
                    if ((_QWORD *)*v284 == v284)
                    {
                      v310 = 0;
                    }
                    else
                    {
                      if (v309)
                        v311 = (uint64_t)(v309 - 3);
                      else
                        v311 = 0;
                      if (*(unsigned __int8 *)(v311 + 16) - 29 >= 0xB)
                        v310 = 0;
                      else
                        v310 = v311;
                    }
                    sub_1C4773D54((uint64_t)&v516, v310, 0, 0, 0);
                    v312 = 0;
                    v313 = *(_DWORD *)(v473 + 928);
                    if (v313)
                    {
                      v312 = 0;
                      v314 = *(_QWORD *)(v473 + 920);
                      *(_QWORD *)v477 = v314 + 96 * v313;
                      v315 = 0x80000000;
                      do
                      {
                        if (*(_BYTE *)(v314 + 8))
                        {
                          v334 = *(uint64_t **)v314;
                          v523 = (uint64_t)v334;
                          v335 = sub_1C61B75F0(*(_QWORD *)(v473 + 872), *(_DWORD *)(v473 + 888), (uint64_t)v334, &v532);
                          v336 = *v334 & 0xFFFFFFFFFFFFFFF8;
                          v337 = *(_QWORD *)(v336 + 40);
                          if (v337 == v336 + 40)
                          {
                            v338 = 0;
                          }
                          else
                          {
                            if (v337)
                              v339 = (unsigned __int8 *)(v337 - 24);
                            else
                              v339 = 0;
                            if (v339[16] - 29 >= 0xB)
                              v338 = 0;
                            else
                              v338 = v339;
                          }
                          v340 = *((_DWORD *)sub_1C62156AC((uint64_t)(a1 + 21), &v523) + 2);
                          if (v315 >= v340)
                            v315 = v340;
                          v341 = *((_QWORD *)v338 - 8);
                          v342 = *((_QWORD *)v338 - 4);
                          v343 = v334[4];
                          v344 = v341 == v343;
                          if (v341 == v343)
                            v345 = *((_QWORD *)v338 - 4);
                          else
                            v345 = *((_QWORD *)v338 - 8);
                          if (!v344)
                            v341 = *((_QWORD *)v338 - 4);
                          v346 = (llvm::ValueHandleBase **)(v338 - 96);
                          if (v335)
                            v347 = v345;
                          else
                            v347 = v341;
                          sub_1C587B6AC(a1, v347 == v342, *((_QWORD *)v338 - 12), v338, v473, (uint64_t *)&v516, (uint64_t *)&v488);
                          v349 = ****a1;
                          if (v347 == v342)
                          {
                            v350 = *(llvm::ValueHandleBase **)(v349 + 1560);
                            if (!v350)
                            {
                              v356 = *(llvm::ConstantInt **)(v349 + 1888);
                              v357 = *(_DWORD *)(v349 + 1896);
                              LODWORD(__src) = v357 >> 8;
                              if (v357 >> 8 > 0x40)
                              {
                                llvm::APInt::initSlowCase((llvm::APInt *)&v532, 1, 0);
                              }
                              else
                              {
                                if (v357 <= 0xFF)
                                  v358 = 0;
                                else
                                  v358 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v357);
                                v532 = (void *)(v358 & 1);
                              }
                              v350 = llvm::ConstantInt::get(v356, (llvm::LLVMContext *)&v532, v348);
                              if (__src >= 0x41 && v532)
                                MEMORY[0x1CAA32F9C](v532, 0x1000C8000313F17);
                              *(_QWORD *)(v349 + 1560) = v350;
                            }
                          }
                          else
                          {
                            v350 = *(llvm::ValueHandleBase **)(v349 + 1568);
                            if (!v350)
                            {
                              v351 = *(llvm::ConstantInt **)(v349 + 1888);
                              LODWORD(__src) = *(_DWORD *)(v349 + 1896) >> 8;
                              if (__src > 0x40)
                                llvm::APInt::initSlowCase((llvm::APInt *)&v532, 0, 0);
                              else
                                v532 = 0;
                              v350 = llvm::ConstantInt::get(v351, (llvm::LLVMContext *)&v532, v348);
                              if (__src >= 0x41 && v532)
                                MEMORY[0x1CAA32F9C](v532, 0x1000C8000313F17);
                              *(_QWORD *)(v349 + 1568) = v350;
                            }
                          }
                          if (*v346)
                          {
                            **((_QWORD **)v338 - 10) = *((_QWORD *)v338 - 11);
                            v352 = *((_QWORD *)v338 - 11);
                            if (v352)
                              *(_QWORD *)(v352 + 16) = *((_QWORD *)v338 - 10);
                          }
                          *v346 = v350;
                          if (v350)
                          {
                            v355 = *((_QWORD *)v350 + 1);
                            v354 = (llvm::ValueHandleBase ***)((char *)v350 + 8);
                            v353 = v355;
                            *((_QWORD *)v338 - 11) = v355;
                            if (v355)
                              *(_QWORD *)(v353 + 16) = v338 - 88;
                            *((_QWORD *)v338 - 10) = v354;
                            *v354 = v346;
                          }
                          ++v312;
                        }
                        v316 = *(unsigned int *)(v314 + 24);
                        if ((_DWORD)v316)
                        {
                          v317 = *(uint64_t ***)(v314 + 16);
                          v318 = 8 * v316;
                          do
                          {
                            v319 = *v317;
                            v523 = (uint64_t)v319;
                            v320 = sub_1C61B75F0(*(_QWORD *)(v473 + 1704), *(_DWORD *)(v473 + 1720), (uint64_t)v319, &v532);
                            v321 = *((_DWORD *)sub_1C62156AC((uint64_t)(a1 + 24), &v523) + 2);
                            if (v315 >= v321)
                              v315 = v321;
                            v322 = (llvm::ValueHandleBase **)(v319 - 12);
                            sub_1C587B6AC(a1, v320, *(v319 - 12), (unsigned __int8 *)v319, v473, (uint64_t *)&v516, (uint64_t *)&v488);
                            v324 = ****a1;
                            if (v320)
                            {
                              v325 = *(llvm::ValueHandleBase **)(v324 + 1560);
                              if (!v325)
                              {
                                v326 = *(llvm::ConstantInt **)(v324 + 1888);
                                v327 = *(_DWORD *)(v324 + 1896);
                                LODWORD(__src) = v327 >> 8;
                                if (v327 >> 8 > 0x40)
                                {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v532, 1, 0);
                                }
                                else
                                {
                                  if (v327 <= 0xFF)
                                    v328 = 0;
                                  else
                                    v328 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v327);
                                  v532 = (void *)(v328 & 1);
                                }
                                v325 = llvm::ConstantInt::get(v326, (llvm::LLVMContext *)&v532, v323);
                                if (__src >= 0x41 && v532)
                                  MEMORY[0x1CAA32F9C](v532, 0x1000C8000313F17);
                                *(_QWORD *)(v324 + 1560) = v325;
                              }
                            }
                            else
                            {
                              v325 = *(llvm::ValueHandleBase **)(v324 + 1568);
                              if (!v325)
                              {
                                v333 = *(llvm::ConstantInt **)(v324 + 1888);
                                LODWORD(__src) = *(_DWORD *)(v324 + 1896) >> 8;
                                if (__src > 0x40)
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v532, 0, 0);
                                else
                                  v532 = 0;
                                v325 = llvm::ConstantInt::get(v333, (llvm::LLVMContext *)&v532, v323);
                                if (__src >= 0x41 && v532)
                                  MEMORY[0x1CAA32F9C](v532, 0x1000C8000313F17);
                                *(_QWORD *)(v324 + 1568) = v325;
                              }
                            }
                            if (*v322)
                            {
                              *(_QWORD *)*(v319 - 10) = *(v319 - 11);
                              v329 = *(v319 - 11);
                              if (v329)
                                *(_QWORD *)(v329 + 16) = *(v319 - 10);
                            }
                            *v322 = v325;
                            if (v325)
                            {
                              v332 = *((_QWORD *)v325 + 1);
                              v331 = (llvm::ValueHandleBase ***)((char *)v325 + 8);
                              v330 = v332;
                              *(v319 - 11) = v332;
                              if (v332)
                                *(_QWORD *)(v330 + 16) = v319 - 11;
                              *(v319 - 10) = (uint64_t)v331;
                              *v331 = v322;
                            }
                            ++v312;
                            ++v317;
                            v318 -= 8;
                          }
                          while (v318);
                        }
                        v314 += 96;
                      }
                      while (v314 != *(_QWORD *)v477);
                      v487 = v315;
                    }
                    v359 = (uint64_t)a1[8] + (v312 - 1) * (_QWORD)v472;
                    a1[7] = (uint64_t ***)((char *)a1[7] + v312 - 1);
                    a1[8] = (uint64_t ***)v359;
                    v360 = (llvm::OptimizationRemarkEmitter *)a1[5];
                    v361 = ****(_QWORD ****)v360;
                    if (*(_QWORD *)(v361 + 128)
                      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v361 + 72) + 48))(*(_QWORD *)(v361 + 72)))
                    {
                      v362 = *((_QWORD *)v469 + 8);
                      v363 = *(_QWORD *)(v362 + 40);
                      if (v363 == v362 + 40)
                      {
                        v364 = 0;
                      }
                      else
                      {
                        if (v363)
                          v365 = v363 - 24;
                        else
                          v365 = 0;
                        if (*(unsigned __int8 *)(v365 + 16) - 29 >= 0xB)
                          v364 = 0;
                        else
                          v364 = v365;
                      }
                      v366 = *(unint64_t **)(*(_QWORD *)(v364 + 40) + 56);
                      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v509, (const llvm::DebugLoc *)(v364 + 48));
                      v367 = *(_QWORD *)(v364 + 40);
                      LODWORD(__src) = 9;
                      BYTE4(__src) = 2;
                      v535 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
                      v534 = v366;
                      v536 = "chr";
                      v537 = "CHR";
                      v538 = 3;
                      v539 = 0;
                      v540 = 0;
                      v541 = &v543;
                      v542 = 0x400000000;
                      v552 = 0;
                      v553 = -1;
                      v554 = v367;
                      v532 = &off_1E814E500;
                      v509.__r_.__value_.__r.__words[0] = (std::string::size_type)"Merged ";
                      v509.__r_.__value_.__l.__size_ = 7;
                      sub_1C53B17B4((uint64_t)&v541, (const void **)&v509.__r_.__value_.__l.__data_);
                      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v509, "NumCHRedBranches", 0x10uLL, v312);
                      v368 = sub_1C47E3888((uint64_t)&v532, (uint64_t)&v509);
                      v489 = " branches or selects";
                      v490 = 20;
                      sub_1C53B17B4(v368 + 80, (const void **)&v489);
                      sub_1C61998EC((uint64_t)&v523, v368);
                      v523 = (uint64_t)&off_1E814E500;
                      if (v512 < 0)
                        operator delete(v510);
                      if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v509.__r_.__value_.__l.__data_);
                      v532 = &off_1E814E790;
                      v369 = (void **)v541;
                      if ((_DWORD)v542)
                      {
                        v370 = (unint64_t)v542 << 6;
                        do
                        {
                          v371 = (void **)((char *)v369 + v370);
                          if (*((char *)v369 + v370 - 17) < 0)
                            operator delete(*(v371 - 5));
                          if (*((char *)v371 - 41) < 0)
                            operator delete(*(v371 - 8));
                          v370 -= 64;
                        }
                        while (v370);
                        v369 = (void **)v541;
                      }
                      if (v369 != &v543)
                        free(v369);
                      llvm::OptimizationRemarkEmitter::emit(v360, (llvm::DiagnosticInfoOptimizationBase *)&v523);
                      v523 = (uint64_t)&off_1E814E790;
                      v372 = (void **)v527;
                      if (v528)
                      {
                        v373 = (unint64_t)v528 << 6;
                        do
                        {
                          v374 = (void **)((char *)v372 + v373);
                          if (*((char *)v372 + v373 - 17) < 0)
                            operator delete(*(v374 - 5));
                          if (*((char *)v374 - 41) < 0)
                            operator delete(*(v374 - 8));
                          v373 -= 64;
                        }
                        while (v373);
                        v372 = (void **)v527;
                      }
                      if (v372 != &v529)
                        free(v372);
                    }
                    v375 = (uint64_t)v488;
                    if (*(_QWORD *)v469)
                    {
                      **((_QWORD **)v469 + 2) = *((_QWORD *)v469 + 1);
                      v376 = *((_QWORD *)v469 + 1);
                      if (v376)
                        *(_QWORD *)(v376 + 16) = *((_QWORD *)v469 + 2);
                    }
                    *(_QWORD *)v469 = v375;
                    if (v375)
                    {
                      v379 = *(_QWORD *)(v375 + 8);
                      v377 = (_QWORD *)(v375 + 8);
                      v378 = v379;
                      *((_QWORD *)v469 + 1) = v379;
                      if (v379)
                        *(_QWORD *)(v378 + 16) = v469 + 2;
                      *((_QWORD *)v469 + 2) = v377;
                      *v377 = v469;
                    }
                    LODWORD(v532) = llvm::BranchProbability::scale((llvm::BranchProbability *)&v487, 1000);
                    LODWORD(v523) = 0x80000000 - v487;
                    HIDWORD(v532) = llvm::BranchProbability::scale((llvm::BranchProbability *)&v523, 1000);
                    v523 = (uint64_t)***a1;
                    BranchWeights = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v523, (uint64_t)&v532, 2);
                    if (BranchWeights || *((_QWORD *)v469 + 18) || (*((_BYTE *)v469 + 119) & 0x20) != 0)
                      llvm::Value::setMetadata(v462, 2, BranchWeights);
                    if ((std::string::size_type *)v516.__r_.__value_.__l.__data_ != &v516.__r_.__value_.__r.__words[2])
                      free(v516.__r_.__value_.__l.__data_);
                    if (v486)
                    {
                      sub_1C4E43068((uint64_t)v485);
                      MEMORY[0x1CAA32FB4](v485[0], 8);
                      v486 = 0;
                    }
                    v381 = (_QWORD *)v483[0];
                    if (v484)
                    {
                      v382 = v483[0] + ((unint64_t)v484 << 6);
                      do
                      {
                        v383 = v381[3];
                        if ((v383 | 0x1000) != 0xFFFFFFFFFFFFF000)
                        {
                          v384 = v381[7];
                          if (v384)
                          {
                            if (v384 != -8192 && v384 != -4096)
                            {
                              v385 = v381[5] & 0xFFFFFFFFFFFFFFF8;
                              *(_QWORD *)v385 = v381[6];
                              v386 = (unint64_t *)v381[6];
                              if (v386)
                              {
                                *v386 = *v386 & 7 | v385;
                              }
                              else
                              {
                                v387 = v381[7];
                                v388 = ***(int32x2_t ****)v387;
                                v389 = (unint64_t)v388[303];
                                if (v389 <= v385)
                                {
                                  v390 = v388[305].u32[0];
                                  if (v389 + 16 * v390 > v385)
                                  {
                                    v391 = v390 - 1;
                                    LODWORD(v392) = v391 & ((v387 >> 4) ^ (v387 >> 9));
                                    v393 = (uint64_t *)(v389 + 16 * v392);
                                    v394 = *v393;
                                    if (v387 == *v393)
                                    {
LABEL_642:
                                      *v393 = -8192;
                                      v388[304] = vadd_s32(v388[304], (int32x2_t)0x1FFFFFFFFLL);
                                      v387 = v381[7];
                                    }
                                    else
                                    {
                                      v395 = 1;
                                      while (v394 != -4096)
                                      {
                                        v396 = v392 + v395++;
                                        v392 = v396 & v391;
                                        v394 = *(_QWORD *)(v389 + 16 * v392);
                                        if (v387 == v394)
                                        {
                                          v393 = (uint64_t *)(v389 + 16 * v392);
                                          goto LABEL_642;
                                        }
                                      }
                                    }
                                    *(_BYTE *)(v387 + 17) &= ~1u;
                                  }
                                }
                              }
                              v383 = v381[3];
                            }
                          }
                        }
                        if (v383 != -4096 && v383 != -8192 && v383 != 0)
                        {
                          v398 = v381[1] & 0xFFFFFFFFFFFFFFF8;
                          *(_QWORD *)v398 = v381[2];
                          v399 = (unint64_t *)v381[2];
                          if (v399)
                          {
                            *v399 = *v399 & 7 | v398;
                          }
                          else
                          {
                            v400 = v381[3];
                            v401 = ***(int32x2_t ****)v400;
                            v402 = (unint64_t)v401[303];
                            if (v402 <= v398)
                            {
                              v403 = v401[305].u32[0];
                              if (v402 + 16 * v403 > v398)
                              {
                                v404 = v403 - 1;
                                LODWORD(v405) = v404 & ((v400 >> 4) ^ (v400 >> 9));
                                v406 = (uint64_t *)(v402 + 16 * v405);
                                v407 = *v406;
                                if (v400 == *v406)
                                {
LABEL_661:
                                  *v406 = -8192;
                                  v401[304] = vadd_s32(v401[304], (int32x2_t)0x1FFFFFFFFLL);
                                  v400 = v381[3];
                                }
                                else
                                {
                                  v408 = 1;
                                  while (v407 != -4096)
                                  {
                                    v409 = v405 + v408++;
                                    v405 = v409 & v404;
                                    v407 = *(_QWORD *)(v402 + 16 * v405);
                                    if (v400 == v407)
                                    {
                                      v406 = (uint64_t *)(v402 + 16 * v405);
                                      goto LABEL_661;
                                    }
                                  }
                                }
                                *(_BYTE *)(v400 + 17) &= ~1u;
                              }
                            }
                          }
                        }
                        v381 += 8;
                      }
                      while (v381 != (_QWORD *)v382);
                      v381 = (_QWORD *)v483[0];
                    }
                    MEMORY[0x1CAA32FB4](v381, 8);
                    v66 = v465 + 1;
                    if (v465 + 1 == (_QWORD **)v460)
                    {
                      MEMORY[0x1CAA32FB4](v481[0], 8);
                      goto LABEL_691;
                    }
                  }
                  v176 = *(_QWORD ***)v473;
                  v177 = *(_QWORD *)v473 + 96 * v157;
LABEL_280:
                  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks(*v176, &v532);
                  v178 = (char *)v525 + 8;
                  v523 = (uint64_t)v525 + 8;
                  v179 = __src;
                  if (__src == v532)
                  {
                    v524.i64[0] = (uint64_t)v525 + 8;
                    v180 = __src;
                  }
                  else
                  {
                    v222 = (int)v534;
                    v178 = (char *)malloc_type_malloc(8 * v534, 0x4065EBACuLL);
                    if (!v178)
                    {
                      if (v222)
                        goto LABEL_784;
                      v178 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
                      if (!v178)
                        goto LABEL_784;
                    }
                    v524.i64[0] = (uint64_t)v178;
                    v180 = v532;
                    v179 = __src;
                  }
                  v181 = HIDWORD(v534);
                  v524.i32[2] = (int)v534;
                  if (v179 == v180)
                    v182 = HIDWORD(v534);
                  else
                    v182 = v534;
                  if (v182)
                  {
                    memmove(v178, v179, 8 * v182);
                    v181 = HIDWORD(v534);
                  }
                  v524.i32[3] = v181;
                  LODWORD(v525[0]) = v535;
                  v530 = 0;
                  v531 = 0;
                  v529 = 0;
                  sub_1C4E19D7C(&v529, v543, v544, (v544 - (_BYTE *)v543) >> 5);
                  v516.__r_.__value_.__r.__words[0] = (std::string::size_type)v518;
                  v183 = v546;
                  if (v546 == v545)
                  {
                    v516.__r_.__value_.__l.__size_ = (std::string::size_type)v518;
                    v184 = v518;
                    v185 = v546;
                  }
                  else
                  {
                    v223 = v547;
                    v184 = malloc_type_malloc(8 * v547, 0x4065EBACuLL);
                    if (!v184)
                    {
                      if (v223)
                        goto LABEL_784;
                      v184 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                      if (!v184)
                        goto LABEL_784;
                    }
                    v516.__r_.__value_.__l.__size_ = (std::string::size_type)v184;
                    v185 = v545;
                    v183 = v546;
                  }
                  v186 = v548;
                  LODWORD(v516.__r_.__value_.__r.__words[2]) = v547;
                  if (v183 == v185)
                    v187 = v548;
                  else
                    v187 = v547;
                  if (v187)
                  {
                    memmove(v184, v183, 8 * v187);
                    v186 = v548;
                  }
                  HIDWORD(v516.__r_.__value_.__r.__words[2]) = v186;
                  LODWORD(__p) = v549;
                  v521 = 0;
                  v522 = 0;
                  v520 = 0;
                  sub_1C4E19D7C(&v520, v550, v551, (v551 - (_BYTE *)v550) >> 5);
                  while (1)
                  {
                    if (v530 - (_BYTE *)v529 == v521 - (_BYTE *)v520)
                    {
                      if (v529 == v530)
                      {
LABEL_351:
                        if (v520)
                        {
                          v521 = (char *)v520;
                          operator delete(v520);
                        }
                        if (v516.__r_.__value_.__l.__size_ != v516.__r_.__value_.__r.__words[0])
                          free((void *)v516.__r_.__value_.__l.__size_);
                        if (v529)
                        {
                          v530 = (char *)v529;
                          operator delete(v529);
                        }
                        if (v524.i64[0] != v523)
                          free((void *)v524.i64[0]);
                        if (v550)
                        {
                          v551 = v550;
                          operator delete(v550);
                        }
                        if (v546 != v545)
                          free(v546);
                        if (v543)
                        {
                          v544 = v543;
                          operator delete(v543);
                        }
                        if (__src != v532)
                          free(__src);
                        v176 += 12;
                        if (v176 == (_QWORD **)v177)
                          goto LABEL_260;
                        goto LABEL_280;
                      }
                      v188 = (char *)v520 + 16;
                      v189 = (char *)v529 + 16;
                      while (1)
                      {
                        v190 = v189 - 16;
                        if (*((_QWORD *)v189 - 2) != *((_QWORD *)v188 - 2))
                          break;
                        v191 = v188[8];
                        if (v189[8])
                          v192 = v191 == 0;
                        else
                          v192 = 1;
                        if (v192)
                        {
                          if ((v189[8] == 0) == (v191 != 0))
                            break;
                        }
                        else if (*(_DWORD *)v189 != *(_DWORD *)v188)
                        {
                          break;
                        }
                        v188 += 32;
                        v189 += 32;
                        if (v190 + 32 == v530)
                          goto LABEL_351;
                      }
                    }
                    v193 = (uint64_t ***)*((_QWORD *)v530 - 4);
                    v489 = ".nonchr";
                    LOWORD(v493) = 259;
                    v194 = llvm::CloneBasicBlock(v193, (uint64_t)v483, (uint64_t)&v489, (uint64_t)*a1, 0, 0);
                    v195 = LODWORD(v509.__r_.__value_.__r.__words[1]);
                    if (LODWORD(v509.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(v509.__r_.__value_.__r.__words[1]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v509, (uint64_t)&v509.__r_.__value_.__r.__words[2], LODWORD(v509.__r_.__value_.__r.__words[1]) + 1, 8);
                      v195 = LODWORD(v509.__r_.__value_.__r.__words[1]);
                    }
                    *(_QWORD *)(v509.__r_.__value_.__r.__words[0] + 8 * v195) = v194;
                    ++LODWORD(v509.__r_.__value_.__r.__words[1]);
                    v490 = 2;
                    v491 = 0;
                    v492 = v193;
                    if (v193 != (uint64_t ***)-8192 && v193 != (uint64_t ***)-4096 && v193 != 0)
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v490);
                    v489 = (const char *)&unk_1E814DA10;
                    v493 = v483;
                    v197 = sub_1C52E2ED8((uint64_t)v483, &v489);
                    if (v492 != (uint64_t ***)-8192 && v492 != (uint64_t ***)-4096 && v492)
                    {
                      v198 = v490 & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)(v490 & 0xFFFFFFFFFFFFFFF8) = v491;
                      if (v491)
                      {
                        *v491 = *v491 & 7 | v198;
                      }
                      else
                      {
                        v199 = v492;
                        v200 = (int32x2_t *)***v492;
                        v201 = (unint64_t)v200[303];
                        if (v201 <= v198)
                        {
                          v202 = v200[305].u32[0];
                          if (v201 + 16 * v202 > v198)
                          {
                            v203 = v202 - 1;
                            LODWORD(v204) = v203 & ((v492 >> 4) ^ (v492 >> 9));
                            v205 = (uint64_t ****)(v201 + 16 * v204);
                            v206 = *v205;
                            if (v492 == *v205)
                            {
LABEL_328:
                              *v205 = (uint64_t ***)-8192;
                              v200[304] = vadd_s32(v200[304], (int32x2_t)0x1FFFFFFFFLL);
                              v199 = v492;
                            }
                            else
                            {
                              v207 = 1;
                              while (v206 != (uint64_t ***)-4096)
                              {
                                v208 = v204 + v207++;
                                v204 = v208 & v203;
                                v206 = *(uint64_t ****)(v201 + 16 * v204);
                                if (v492 == v206)
                                {
                                  v205 = (uint64_t ****)(v201 + 16 * v204);
                                  goto LABEL_328;
                                }
                              }
                            }
                            *((_BYTE *)v199 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    v209 = v197[7];
                    if (v209 != v194)
                    {
                      if (v209 && v209 != -8192 && v209 != -4096)
                      {
                        v210 = v197[5] & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v210 = v197[6];
                        v211 = (unint64_t *)v197[6];
                        if (v211)
                        {
                          *v211 = *v211 & 7 | v210;
                        }
                        else
                        {
                          v212 = v197[7];
                          v213 = ***(int32x2_t ****)v212;
                          v214 = (unint64_t)v213[303];
                          if (v214 <= v210)
                          {
                            v215 = v213[305].u32[0];
                            if (v214 + 16 * v215 > v210)
                            {
                              v216 = v215 - 1;
                              LODWORD(v217) = v216 & ((v212 >> 4) ^ (v212 >> 9));
                              v218 = (uint64_t *)(v214 + 16 * v217);
                              v219 = *v218;
                              if (v212 == *v218)
                              {
LABEL_348:
                                *v218 = -8192;
                                v213[304] = vadd_s32(v213[304], (int32x2_t)0x1FFFFFFFFLL);
                                v212 = v197[7];
                              }
                              else
                              {
                                v220 = 1;
                                while (v219 != -4096)
                                {
                                  v221 = v217 + v220++;
                                  v217 = v221 & v216;
                                  v219 = *(_QWORD *)(v214 + 16 * v217);
                                  if (v212 == v219)
                                  {
                                    v218 = (uint64_t *)(v214 + 16 * v217);
                                    goto LABEL_348;
                                  }
                                }
                              }
                              *(_BYTE *)(v212 + 17) &= ~1u;
                            }
                          }
                        }
                      }
                      v197[7] = v194;
                      if (v194 != -8192 && v194 != -4096 && v194)
                        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v197 + 5));
                    }
                    sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v523);
                  }
                }
LABEL_691:
                if (v494 != v496)
                  free(v494);
                if (v497 != v499)
                  free(v497);
                if (v500 != v502)
                  free(v500);
                if (v503 != v505)
                  free(v503);
                if ((std::string::size_type *)v506.__r_.__value_.__l.__data_ != &v506.__r_.__value_.__r.__words[2])
                  free(v506.__r_.__value_.__l.__data_);
                if (v461)
                {
                  v418 = (llvm::OptimizationRemarkEmitter *)a1[5];
                  v419 = ****(_QWORD ****)v418;
                  if (*(_QWORD *)(v419 + 128)
                    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v419 + 72) + 48))(*(_QWORD *)(v419 + 72)))
                  {
                    llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v532, (uint64_t)"chr", (uint64_t)"Stats", 5, (uint64_t)*a1);
                    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v516, "Function", 8uLL, *a1);
                    v450 = sub_1C47E3888((uint64_t)&v532, (uint64_t)&v516);
                    v523 = (uint64_t)" ";
                    v524.i64[0] = 1;
                    sub_1C53B17B4(v450 + 80, (const void **)&v523);
                    v523 = (uint64_t)"Reduced the number of branches in hot paths by ";
                    v524.i64[0] = 47;
                    sub_1C53B17B4(v450 + 80, (const void **)&v523);
                    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v509, "NumBranchesDelta", 0x10uLL, (unint64_t)a1[7]);
                    v451 = sub_1C47E3888(v450, (uint64_t)&v509);
                    v523 = (uint64_t)" (static) and ";
                    v524.i64[0] = 14;
                    sub_1C53B17B4(v451 + 80, (const void **)&v523);
                    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v506, "WeightedNumBranchesDelta", 0x18uLL, (unint64_t)a1[8]);
                    v452 = sub_1C47E3888(v451, (uint64_t)&v506);
                    v523 = (uint64_t)" (weighted by PGO count)";
                    v524.i64[0] = 24;
                    sub_1C53B17B4(v452 + 80, (const void **)&v523);
                    sub_1C61998EC((uint64_t)&v523, v452);
                    v523 = (uint64_t)&off_1E814E500;
                    if (v508 < 0)
                      operator delete(v507);
                    if (SHIBYTE(v506.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v506.__r_.__value_.__l.__data_);
                    if (v512 < 0)
                      operator delete(v510);
                    if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v509.__r_.__value_.__l.__data_);
                    if (v519 < 0)
                      operator delete(__p);
                    if (SHIBYTE(v516.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v516.__r_.__value_.__l.__data_);
                    v532 = &off_1E814E790;
                    v453 = (void **)v541;
                    if ((_DWORD)v542)
                    {
                      v454 = (unint64_t)v542 << 6;
                      do
                      {
                        v455 = (void **)((char *)v453 + v454);
                        if (*((char *)v453 + v454 - 17) < 0)
                          operator delete(*(v455 - 5));
                        if (*((char *)v455 - 41) < 0)
                          operator delete(*(v455 - 8));
                        v454 -= 64;
                      }
                      while (v454);
                      v453 = (void **)v541;
                    }
                    if (v453 != &v543)
                      free(v453);
                    llvm::OptimizationRemarkEmitter::emit(v418, (llvm::DiagnosticInfoOptimizationBase *)&v523);
                    v523 = (uint64_t)&off_1E814E790;
                    v456 = (void **)v527;
                    if (v528)
                    {
                      v457 = (unint64_t)v528 << 6;
                      do
                      {
                        v458 = (void **)((char *)v456 + v457);
                        if (*((char *)v456 + v457 - 17) < 0)
                          operator delete(*(v458 - 5));
                        if (*((char *)v458 - 41) < 0)
                          operator delete(*(v458 - 8));
                        v457 -= 64;
                      }
                      while (v457);
                      v456 = (void **)v527;
                    }
                    if (v456 != &v529)
                      free(v456);
                  }
                  return 1;
                }
                return 0;
              }
              memmove(v37, v497, 8 * v498);
              v36 = v495;
              v37 = v494;
            }
            else
            {
              v36 = 0;
            }
LABEL_59:
            v38 = v36;
            goto LABEL_60;
          }
LABEL_58:
          v36 = 0;
          v37 = v496;
          v494 = v496;
          v495 = 0x800000000;
          goto LABEL_59;
        }
      }
      else
      {
LABEL_56:
        v500 = v502;
        v501 = 0x800000000;
      }
      v497 = v499;
      v498 = 0x800000000;
      goto LABEL_58;
    }
  }
  v45 = v42[5];
  v48 = v45[21];
  v46 = v45 + 21;
  v47 = v48;
  v49 = *((_BYTE *)v46 + 23);
  if (v49 >= 0)
    v50 = (unsigned __int8 *)v46;
  else
    v50 = (unsigned __int8 *)v47;
  v51 = (size_t)v46[1];
  if (v49 >= 0)
    v52 = v49 & 0x7F;
  else
    v52 = v51;
  v478 = dword_1ED812208;
  if (dword_1ED812208)
  {
    v53 = 0;
    if (v52)
    {
      v54 = v52;
      v55 = v50;
      do
      {
        v56 = *v55++;
        v53 = 33 * v53 + v56;
        --v54;
      }
      while (v54);
    }
    v57 = dword_1ED812208 - 1;
    v58 = qword_1ED812200;
    v59 = qword_1ED812200 + 8 * dword_1ED812208 + 8;
    v60 = dword_1ED812214;
    v61 = 1;
    v62 = v53;
    while (1)
    {
      v63 = v62 & v57;
      v64 = *(_QWORD **)(v58 + 8 * v63);
      if (v64 != (_QWORD *)-8)
      {
        if (!v64)
          goto LABEL_719;
        if (*(_DWORD *)(v59 + 4 * v63) == v53 && v52 == *v64 && (!v52 || !memcmp(v50, (char *)v64 + v60, v52)))
          break;
      }
      v62 = v61 + v63;
      ++v61;
    }
    if ((_DWORD)v63 != -1 && (int)v63 != v478)
      goto LABEL_2;
  }
LABEL_719:
  if ((*((_BYTE *)v42 + 23) & 0x10) == 0)
  {
    v434 = dword_1ED812228;
    if (!dword_1ED812228)
      return 0;
    v436 = 0;
    v440 = 0;
    v441 = 1;
    v437 = &byte_1C871356D;
    goto LABEL_732;
  }
  v426 = ***v42;
  v427 = *(_QWORD *)(v426 + 152);
  v428 = *(unsigned int *)(v426 + 168);
  if (!(_DWORD)v428)
    goto LABEL_726;
  LODWORD(v429) = (v428 - 1) & ((v42 >> 4) ^ (v42 >> 9));
  v430 = (uint64_t ****)(v427 + 16 * v429);
  v431 = *v430;
  if (*v430 != v42)
  {
    v432 = 1;
    while (v431 != (uint64_t ***)-4096)
    {
      v433 = v429 + v432++;
      v429 = v433 & (v428 - 1);
      v431 = *(uint64_t ****)(v427 + 16 * v429);
      if (v431 == v42)
      {
        v430 = (uint64_t ****)(v427 + 16 * v429);
        goto LABEL_727;
      }
    }
LABEL_726:
    v430 = (uint64_t ****)(v427 + 16 * v428);
  }
LABEL_727:
  v434 = dword_1ED812228;
  if (!dword_1ED812228)
    return 0;
  v435 = v430[1];
  v438 = (size_t)*v435;
  v437 = (char *)(v435 + 2);
  v436 = v438;
  if (v438)
  {
    v439 = 0;
    v440 = 0;
    do
      v440 = 33 * v440 + v437[v439++];
    while (v436 != v439);
    v441 = 0;
  }
  else
  {
    v440 = 0;
    v441 = 1;
  }
LABEL_732:
  v442 = v434 - 1;
  v443 = qword_1ED812220;
  v479 = v434;
  v444 = qword_1ED812220 + 8 * v434 + 8;
  v445 = dword_1ED812234;
  v446 = 1;
  v447 = v440;
  while (1)
  {
    v448 = v447 & v442;
    v449 = *(_QWORD **)(v443 + 8 * v448);
    if (v449 != (_QWORD *)-8)
    {
      if (!v449)
        return 0;
      if (*(_DWORD *)(v444 + 4 * v448) == v440
        && v436 == *v449
        && ((v441 & 1) != 0 || !memcmp(v437, (char *)v449 + v445, v436)))
      {
        break;
      }
    }
    v447 = v446 + v448;
    ++v446;
  }
  result = 0;
  if ((_DWORD)v448 != -1 && (int)v448 != v479)
    goto LABEL_2;
  return result;
}

uint64_t sub_1C5875BD0(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  char **v12;

  v2 = *(_DWORD *)(a1 + 224);
  v3 = *(uint64_t **)(a1 + 216);
  v4 = *(unsigned int *)(a1 + 232);
  v5 = &v3[v4];
  if (v2)
  {
    if ((_DWORD)v4)
    {
      v6 = 8 * v4;
      v7 = v3;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v7;
        v6 -= 8;
        if (!v6)
          goto LABEL_6;
      }
    }
    else
    {
      v7 = v3;
    }
  }
  else
  {
LABEL_6:
    v7 = &v3[v4];
  }
  v8 = &v3[v4];
  if (v7 != v8)
  {
    do
    {
      v9 = *v7;
      if (*v7)
      {
        sub_1C54E61C4(v9 + 1752);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v9 + 1752), 8);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v9 + 1728), 8);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v9 + 1704), 8);
        sub_1C5879FAC((char **)(v9 + 920));
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v9 + 896), 8);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v9 + 872), 8);
        v11 = *(void **)(v9 + 784);
        if (v11 != (void *)(v9 + 800))
          free(v11);
        v12 = sub_1C5879FAC((char **)v9);
        MEMORY[0x1CAA32FC0](v12, 0x10A0C4016CFE34FLL);
      }
      v10 = v7 + 1;
      v7 = v5;
      if (v10 != v5)
      {
        v7 = v10;
        while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
    }
    while (v7 != v8);
    v3 = *(uint64_t **)(a1 + 216);
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 192), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 168), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 144), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 120), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 96), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 72), 8);
  return a1;
}

uint64_t sub_1C5875D70()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5872870(v0);
}

void sub_1C5875D9C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5875DC0(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::RegionInfoPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1C5875E38(uint64_t a1, uint64_t ***a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t ***v12;
  void **v13;
  void *v14;
  uint64_t ***v15;
  llvm::OptimizationRemarkEmitter *v16;
  uint64_t v17;
  uint64_t ***v19[6];
  __int128 v20;
  _BYTE v21[28];
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::BlockFrequencyInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::BlockFrequencyInfoWrapperPass::ID);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::DominatorTreeWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v10 = **(char ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::ProfileSummaryInfoWrapperPass::ID);
  v12 = *(uint64_t ****)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  v13 = **(void ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::RegionInfoPass::ID);
  v15 = (uint64_t ***)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::RegionInfoPass::ID)+ 32);
  v16 = (llvm::OptimizationRemarkEmitter *)operator new();
  v19[0] = a2;
  v19[1] = (uint64_t ***)(v6 + 32);
  v19[2] = (uint64_t ***)(v9 + 32);
  v19[3] = v12;
  v19[4] = v15;
  v19[5] = (uint64_t ***)llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v16, (const llvm::Function *)a2);
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v33 = 0;
  v31 = 0;
  v32 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v17 = sub_1C5872C40(v19);
  sub_1C5875BD0((uint64_t)v19);
  v19[0] = 0;
  sub_1C4EF268C((uint64_t)v19, (uint64_t)v16);
  return v17;
}

uint64_t sub_1C5875FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD **v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _DWORD *v41;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[9];

  v46[8] = *MEMORY[0x1E0C80C00];
  v6 = sub_1C58763D4(a1, (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))a2);
  v7 = v6;
  v44 = v46;
  v45 = 0x800000000;
  v8 = *(uint64_t **)(a2 + 40);
  if (v8 == *(uint64_t **)(a2 + 48))
    return v7;
  v43 = v6;
  v9 = 0;
  do
  {
    v10 = *v8++;
    v11 = (_QWORD *)sub_1C5875FF4(a1, v10, a3);
    if (v11)
    {
      v12 = v11;
      if (!v9)
        goto LABEL_9;
      v13 = (_QWORD **)*v11;
      v14 = **(_QWORD **)*v11 & 0xFFFFFFFFFFFFFFF8;
      v15 = *(unsigned int *)(v9 + 8);
      v16 = *(_QWORD **)(*(_QWORD *)v9 + 96 * v15 - 96);
      if (v16[4] != v14)
      {
LABEL_6:
        v17 = v45;
        if (v45 >= (unint64_t)HIDWORD(v45))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v45 + 1, 8);
          v17 = v45;
        }
        *((_QWORD *)v44 + v17) = v9;
        LODWORD(v45) = v45 + 1;
LABEL_9:
        v9 = (uint64_t)v12;
        continue;
      }
      v19 = *(_QWORD *)(v14 + 8);
      if (v19)
      {
        while (1)
        {
          v20 = *(_QWORD *)(v19 + 24);
          v21 = *(unsigned __int8 *)(v20 + 16);
          v22 = v20 && v21 >= 0x1C;
          if (v22 && v21 - 29 <= 0xA)
            break;
          v19 = *(_QWORD *)(v19 + 8);
          if (!v19)
            goto LABEL_37;
        }
        if (!llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(*(_QWORD **)(*(_QWORD *)v9 + 96 * v15 - 96), *(_QWORD *)(v20 + 40)))goto LABEL_6;
        while (1)
        {
          v19 = *(_QWORD *)(v19 + 8);
          if (!v19)
            break;
          v25 = *(_QWORD *)(v19 + 24);
          v26 = *(unsigned __int8 *)(v25 + 16);
          if (v25)
            v27 = v26 >= 0x1C;
          else
            v27 = 0;
          v28 = !v27 || v26 - 29 > 0xA;
          if (!v28 && !llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(v16, *(_QWORD *)(v25 + 40)))
            goto LABEL_6;
        }
        v13 = (_QWORD **)*v12;
        v15 = *(unsigned int *)(v9 + 8);
      }
LABEL_37:
      v29 = *((unsigned int *)v12 + 2);
      if (v15 + v29 > (unint64_t)*(unsigned int *)(v9 + 12))
      {
        sub_1C58782D4(v9, v15 + v29);
        LODWORD(v15) = *(_DWORD *)(v9 + 8);
      }
      if ((_DWORD)v29)
      {
        v30 = &v13[12 * v29];
        v31 = (_QWORD *)(*(_QWORD *)v9 + 96 * v15 + 16);
        v32 = (uint64_t)(v13 + 2);
        do
        {
          v34 = v32 - 16;
          v33 = *(_QWORD *)(v32 - 16);
          *((_BYTE *)v31 - 8) = *(_BYTE *)(v32 - 8);
          *(v31 - 2) = v33;
          *v31 = v31 + 2;
          v31[1] = 0x800000000;
          if (*(_DWORD *)(v32 + 8))
            v31 = (_QWORD *)llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v31, v32);
          v31 += 12;
          v32 += 96;
        }
        while ((_QWORD **)(v34 + 96) != v30);
        LODWORD(v15) = *(_DWORD *)(v9 + 8);
      }
      *(_DWORD *)(v9 + 8) = v15 + v29;
      sub_1C618A450((unsigned int *)(v9 + 784), (_BYTE *)v12[98], (_BYTE *)(v12[98] + 8 * *((unsigned int *)v12 + 198)));
      v7 = v43;
    }
    else if (v9)
    {
      v18 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v45 + 1, 8);
        v18 = v45;
      }
      *((_QWORD *)v44 + v18) = v9;
      v9 = 0;
      LODWORD(v45) = v45 + 1;
    }
  }
  while (v8 != *(uint64_t **)(a2 + 48));
  v35 = v45;
  if (v9)
  {
    if (v45 >= HIDWORD(v45))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v45 + 1, 8);
      v35 = v45;
    }
    *((_QWORD *)v44 + v35) = v9;
    v35 = v45 + 1;
    LODWORD(v45) = v45 + 1;
  }
  v36 = (uint64_t *)v44;
  if (v35)
  {
    v37 = 8 * v35;
    do
    {
      v38 = *v36;
      if (v7)
      {
        v39 = *(unsigned int *)(v7 + 792);
        if (v39 >= *(unsigned int *)(v7 + 796))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v7 + 784, v7 + 800, v39 + 1, 8);
          v39 = *(unsigned int *)(v7 + 792);
        }
        v40 = (_QWORD *)(v7 + 784);
        v41 = (_DWORD *)(v7 + 792);
      }
      else
      {
        v39 = *(unsigned int *)(a3 + 8);
        if (v39 >= *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v39 + 1, 8);
          v39 = *(unsigned int *)(a3 + 8);
        }
        v40 = (_QWORD *)a3;
        v41 = (_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*v40 + 8 * v39) = v38;
      ++*v41;
      ++v36;
      v37 -= 8;
    }
    while (v37);
    v36 = (uint64_t *)v44;
  }
  if (v36 != v46)
    free(v36);
  return v7;
}

uint64_t sub_1C58763D4(uint64_t a1, uint64_t (**a2)(llvm::DiagnosticInfoWithLocationBase *__hidden this))
{
  uint64_t (**v4)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (*v5)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t *v6;
  int v7;
  uint64_t (**v8)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v9;
  uint64_t (*v11)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  _BYTE *v16;
  uint64_t (**v17)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v18)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v19;
  unsigned int v20;
  uint64_t (**v21)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  void *v22;
  void *v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  BOOL v32;
  uint64_t (**v34)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  _BYTE *v35;
  uint64_t (**v36)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v37)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v38;
  unsigned int v39;
  uint64_t (**v40)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  void *v41;
  void *v42;
  unsigned int v43;
  unsigned int v44;
  char *v45;
  char *v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t i;
  uint64_t v54;
  uint64_t v55;
  uint64_t (**v56)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  unsigned int v57;
  uint64_t (**v58)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (*v60)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (*v61)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  __int8 v63;
  int v64;
  uint64_t v65;
  uint64_t (*v66)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (*v67)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  const llvm::Instruction *v75;
  unsigned __int8 *v76;
  const llvm::Instruction *v77;
  const llvm::Instruction **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const llvm::Instruction **v82;
  const llvm::Instruction **v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  void **p_p;
  const llvm::Instruction *v88;
  llvm::OptimizationRemarkEmitter *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (**v94)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  const llvm::Instruction *v95;
  void *v96;
  uint64_t (*v97)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  void **v98;
  unint64_t v99;
  void **v100;
  void **v101;
  unint64_t v102;
  void **v103;
  int v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  const llvm::Instruction *v109;
  BOOL v110;
  int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  char *v115;
  uint64_t v116;
  char *v117;
  void **v118;
  uint64_t v119;
  llvm::OptimizationRemarkEmitter *v120;
  uint64_t v121;
  void *v122;
  uint64_t (*v123)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  void **v124;
  void **v125;
  unint64_t v126;
  void **v127;
  void **v128;
  unint64_t v129;
  void **v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t (***v142)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v143)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (***v144)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v145;
  BOOL v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  llvm::OptimizationRemarkEmitter *v153;
  uint64_t v154;
  void *v155;
  uint64_t (*v156)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  void **v157;
  unint64_t v158;
  void **v159;
  void **v160;
  unint64_t v161;
  void **v162;
  uint64_t (***v163)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v164)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  const llvm::Instruction *v165;
  void **v166;
  void **v167;
  uint64_t v168;
  __int128 v169;
  uint64_t (**v170)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  char v171;
  void *v172[2];
  _BYTE v173[64];
  void *v174;
  uint64_t v175;
  _DWORD v176[16];
  uint64_t (**v177)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  __int8 v178;
  void *v179[2];
  _BYTE v180[64];
  uint64_t (**v181)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v182)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  void *v183;
  uint64_t v184;
  _BYTE v185[64];
  char *v186;
  char *v187;
  uint64_t v188;
  __int128 v189;
  int v190;
  int v191;
  int v192;
  _BYTE v193[48];
  void *v194;
  unsigned int v195;
  void *__p;
  char *v197;
  uint64_t v198;
  uint64_t (**v199)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  void *__src;
  void *v201;
  __int128 v202;
  const char *v203;
  const char *v204;
  uint64_t v205;
  char v206;
  char v207;
  void *v208;
  uint64_t v209;
  void *v210;
  _BYTE *v211;
  void *v212;
  void *v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  void *v217;
  _BYTE *v218;
  char v219;
  int v220;
  uint64_t (*v221)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v168 = 0;
  v4 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))((unint64_t)*a2 & 0xFFFFFFFFFFFFFFF8);
  v5 = a2[4];
  v6 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40);
  v199 = v4;
  *(_QWORD *)&v189 = 0;
  v7 = sub_1C61252B8(v6, &v199, &v189);
  v8 = 0;
  if (v7)
    v8 = *(uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v189 + 8);
  if (v8 != a2)
    return 0;
  v11 = v4[1];
  if (v11)
  {
    while (1)
    {
      v12 = *((_QWORD *)v11 + 3);
      v13 = *(unsigned __int8 *)(v12 + 16);
      v14 = v12 && v13 >= 0x1C;
      if (v14 && v13 - 29 <= 0xA)
        break;
      v11 = (uint64_t (*)(llvm::DiagnosticInfoWithLocationBase *__hidden))*((_QWORD *)v11 + 1);
      if (!v11)
        goto LABEL_16;
    }
LABEL_55:
    if (llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::contains(a2, *(_QWORD *)(v12 + 40)))
      return 0;
    while (1)
    {
      v11 = (uint64_t (*)(llvm::DiagnosticInfoWithLocationBase *__hidden))*((_QWORD *)v11 + 1);
      if (!v11)
        break;
      v12 = *((_QWORD *)v11 + 3);
      v31 = *(unsigned __int8 *)(v12 + 16);
      if (v12)
        v32 = v31 >= 0x1C;
      else
        v32 = 0;
      if (v32 && v31 - 29 <= 0xA)
        goto LABEL_55;
    }
  }
LABEL_16:
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::blocks(a2, &v199);
  v16 = v193;
  *(_QWORD *)&v189 = v193;
  v17 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))__src;
  if (__src == v199)
  {
    *((_QWORD *)&v189 + 1) = v193;
    v18 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))__src;
  }
  else
  {
    v111 = (int)v201;
    v16 = malloc_type_malloc(8 * v201, 0x4065EBACuLL);
    if (!v16)
    {
      if (v111)
        goto LABEL_397;
      v16 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v16)
        goto LABEL_397;
    }
    *((_QWORD *)&v189 + 1) = v16;
    v18 = v199;
    v17 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))__src;
  }
  v19 = HIDWORD(v201);
  v190 = (int)v201;
  if (v17 == v18)
    v20 = HIDWORD(v201);
  else
    v20 = v201;
  if (v20)
  {
    memmove(v16, v17, 8 * v20);
    v19 = HIDWORD(v201);
  }
  v191 = v19;
  v192 = v202;
  v198 = 0;
  __p = 0;
  v197 = 0;
  sub_1C4E19D7C(&__p, v210, v211, (v211 - (_BYTE *)v210) >> 5);
  v21 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v185;
  v181 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v185;
  v22 = v213;
  if (v213 == v212)
  {
    v182 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v185;
    v23 = v213;
  }
  else
  {
    v112 = v214;
    v21 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))malloc_type_malloc(8 * v214, 0x4065EBACuLL);
    if (!v21)
    {
      if (v112)
        goto LABEL_397;
      v21 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v21)
        goto LABEL_397;
    }
    v182 = v21;
    v23 = v212;
    v22 = v213;
  }
  v24 = v215;
  LODWORD(v183) = v214;
  if (v22 == v23)
    v25 = v215;
  else
    v25 = v214;
  if (v25)
  {
    memmove(v21, v22, 8 * v25);
    v24 = v215;
  }
  HIDWORD(v183) = v24;
  LODWORD(v184) = v216;
  v187 = 0;
  v188 = 0;
  v186 = 0;
  sub_1C4E19D7C(&v186, v217, v218, (v218 - (_BYTE *)v217) >> 5);
  while (1)
  {
    if (v197 - (_BYTE *)__p != v187 - v186)
      goto LABEL_45;
    if (__p == v197)
      break;
    v26 = v186 + 16;
    v27 = (char *)__p + 16;
    while (1)
    {
      v28 = v27 - 16;
      if (*((_QWORD *)v27 - 2) != *((_QWORD *)v26 - 2))
        break;
      v29 = v26[8];
      if (v27[8])
        v30 = v29 == 0;
      else
        v30 = 1;
      if (v30)
      {
        if ((v27[8] == 0) == (v29 != 0))
          break;
      }
      else if (*(_DWORD *)v27 != *(_DWORD *)v26)
      {
        break;
      }
      v26 += 32;
      v27 += 32;
      if (v28 + 32 == v197)
        goto LABEL_73;
    }
LABEL_45:
    if ((*(_WORD *)(*((_QWORD *)v197 - 4) + 18) & 0x7FFF) != 0)
    {
      if (v186)
      {
        v187 = v186;
        operator delete(v186);
      }
      if (v182 != v181)
        free(v182);
      if (__p)
      {
        v197 = (char *)__p;
        operator delete(__p);
      }
      if (*((_QWORD *)&v189 + 1) != (_QWORD)v189)
        free(*((void **)&v189 + 1));
      if (v217)
      {
        v218 = v217;
        operator delete(v217);
      }
      if (v213 != v212)
        free(v213);
      if (v210)
      {
        v211 = v210;
        operator delete(v210);
      }
      if (__src != v199)
        free(__src);
      return 0;
    }
    sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v189);
  }
LABEL_73:
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (v182 != v181)
    free(v182);
  if (__p)
  {
    v197 = (char *)__p;
    operator delete(__p);
  }
  if (*((_QWORD *)&v189 + 1) != (_QWORD)v189)
    free(*((void **)&v189 + 1));
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v213 != v212)
    free(v213);
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (__src != v199)
    free(__src);
  if (!v5 || (v34 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v4[5], v34 == v4 + 5))
  {
LABEL_91:
    v9 = 0;
    goto LABEL_92;
  }
  v9 = 0;
  if (v34)
    v56 = v34 - 3;
  else
    v56 = 0;
  v57 = *((unsigned __int8 *)v56 + 16) - 40;
  if (v57 >= 0xFFFFFFF5)
    v58 = v56;
  else
    v58 = 0;
  if (v34)
  {
    if (*((_BYTE *)v58 + 16) == 30 && v57 >= 0xFFFFFFF5)
    {
      if ((*((_DWORD *)v58 + 5) & 0x7FFFFFF) != 3)
        goto LABEL_91;
      v60 = *(v58 - 4);
      v61 = *(v58 - 8);
      if (v60 == v61)
        goto LABEL_91;
      if (v60 != v5 && v61 != v5)
        goto LABEL_91;
      v63 = 0;
      v181 = a2;
      LOBYTE(v182) = 0;
      v183 = v185;
      v184 = 0x800000000;
      v64 = *((_DWORD *)v58 + 5);
      if ((v64 & 0x7FFFFFF) != 3)
        goto LABEL_351;
      LODWORD(v174) = -1;
      LODWORD(v169) = -1;
      if ((v64 & 0x20000000) == 0)
        goto LABEL_177;
      v137 = **(_QWORD **)*v58;
      v199 = v58;
      v138 = *(_DWORD *)(v137 + 2496);
      if (v138)
      {
        v139 = *(_QWORD *)(v137 + 2480);
        v140 = v138 - 1;
        v141 = v140 & ((v58 >> 4) ^ (v58 >> 9));
        v142 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v139 + 40 * v141);
        v143 = *v142;
        if (*v142 == v58)
          goto LABEL_336;
        v144 = 0;
        v145 = 1;
        while (v143 != (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-4096)
        {
          if (v144)
            v146 = 0;
          else
            v146 = v143 == (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-8192;
          if (v146)
            v144 = v142;
          v147 = v141 + v145++;
          v141 = v147 & v140;
          v142 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v139 + 40 * v141);
          v143 = *v142;
          if (*v142 == v58)
            goto LABEL_336;
        }
        if (v144)
          v163 = v144;
        else
          v163 = v142;
      }
      else
      {
        v163 = 0;
      }
      v142 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))sub_1C541AB24(v137 + 2480, (uint64_t)&v199, (uint64_t *)&v199, v163);
      v164 = v199;
      v142[3] = 0;
      v142[4] = 0;
      *v142 = v164;
      v142[1] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v142 + 3);
      v142[2] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))0x100000000;
LABEL_336:
      v148 = *((unsigned int *)v142 + 4);
      if ((_DWORD)v148)
      {
        v149 = (uint64_t *)(v142[1] + 1);
        v150 = 16 * v148;
        while (*((_DWORD *)v149 - 2) != 2)
        {
          v65 = 0;
          v149 += 2;
          v150 -= 16;
          if (!v150)
            goto LABEL_178;
        }
        v65 = *v149;
LABEL_178:
        if (sub_1C58780BC(v65, &v174, &v169))
        {
          v66 = *(v58 - 4);
          v67 = a2[4];
          if (v66 == v67)
            v68 = v174;
          else
            v68 = v169;
          if (v66 == v67)
            v69 = v169;
          else
            v69 = v174;
          *(_QWORD *)&v189 = a2;
          v70 = (((unint64_t)(unint64_t)(*(double *)&xmmword_1ED812440 * 1000000.0) << 31) | 0x7A100)
              / 0xF4240;
          if (v69 >= v70)
          {
            sub_1C61B7564((uint64_t)&v199, a1 + 72, (uint64_t *)&v189);
          }
          else
          {
            if (v68 < v70)
              goto LABEL_187;
            sub_1C61B7564((uint64_t)&v199, a1 + 96, (uint64_t *)&v189);
            v69 = v68;
          }
          *((_DWORD *)sub_1C62156AC(a1 + 168, (uint64_t *)&v189) + 2) = v69;
          v63 = 1;
          goto LABEL_351;
        }
LABEL_187:
        v63 = 0;
LABEL_351:
        LOBYTE(v182) = v63;
        v9 = operator new();
        v177 = v181;
        v178 = (char)v182;
        v179[0] = v180;
        v179[1] = (void *)0x800000000;
        if ((_DWORD)v184)
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v179, (uint64_t)&v183);
        *(_QWORD *)v9 = v9 + 16;
        *(_QWORD *)(v9 + 8) = 0x800000000;
        *(_QWORD *)(v9 + 784) = v9 + 800;
        *(_QWORD *)(v9 + 792) = 0x800000000;
        *(_QWORD *)(v9 + 864) = 0;
        *(_DWORD *)(v9 + 888) = 0;
        *(_OWORD *)(v9 + 872) = 0u;
        *(_OWORD *)(v9 + 896) = 0u;
        *(_DWORD *)(v9 + 912) = 0;
        *(_QWORD *)(v9 + 920) = v9 + 936;
        *(_QWORD *)(v9 + 928) = 0x800000000;
        *(_DWORD *)(v9 + 1720) = 0;
        *(_OWORD *)(v9 + 1704) = 0u;
        *(_DWORD *)(v9 + 1744) = 0;
        *(_OWORD *)(v9 + 1728) = 0u;
        *(_DWORD *)(v9 + 1768) = 0;
        *(_OWORD *)(v9 + 1752) = 0u;
        sub_1C5878214(v9, (uint64_t *)&v177);
        v168 = v9;
        if (v179[0] != v180)
          free(v179[0]);
        sub_1C5877A0C((uint64_t)&v199, a1 + 216, &v168);
        ++*(_QWORD *)(a1 + 48);
        if (!(_BYTE)v182)
        {
          v153 = *(llvm::OptimizationRemarkEmitter **)(a1 + 40);
          v154 = ****(_QWORD ****)v153;
          if (*(_QWORD *)(v154 + 128)
            || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v154 + 72) + 48))(*(_QWORD *)(v154 + 72)))
          {
            v155 = (void *)*((_QWORD *)v58[5] + 7);
            llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v189, (const llvm::DebugLoc *)(v58 + 6));
            v156 = v58[5];
            LODWORD(__src) = 10;
            BYTE4(__src) = 2;
            v201 = v155;
            v202 = v189;
            v203 = "chr";
            v204 = "BranchNotBiased";
            v205 = 15;
            v206 = 0;
            v207 = 0;
            v208 = &v210;
            v209 = 0x400000000;
            v219 = 0;
            v220 = -1;
            v221 = v156;
            v199 = &off_1E814E538;
            *(_QWORD *)&v189 = "Branch not biased";
            *((_QWORD *)&v189 + 1) = 17;
            sub_1C53B17B4((uint64_t)&v208, (const void **)&v189);
            sub_1C61998EC((uint64_t)&v189, (uint64_t)&v199);
            *(_QWORD *)&v189 = &off_1E814E538;
            v199 = &off_1E814E790;
            v157 = (void **)v208;
            if ((_DWORD)v209)
            {
              v158 = (unint64_t)v209 << 6;
              do
              {
                v159 = (void **)((char *)v157 + v158);
                if (*((char *)v157 + v158 - 17) < 0)
                  operator delete(*(v159 - 5));
                if (*((char *)v159 - 41) < 0)
                  operator delete(*(v159 - 8));
                v158 -= 64;
              }
              while (v158);
              v157 = (void **)v208;
            }
            if (v157 != &v210)
              free(v157);
            llvm::OptimizationRemarkEmitter::emit(v153, (llvm::DiagnosticInfoOptimizationBase *)&v189);
            *(_QWORD *)&v189 = &off_1E814E790;
            v160 = (void **)v194;
            if (v195)
            {
              v161 = (unint64_t)v195 << 6;
              do
              {
                v162 = (void **)((char *)v160 + v161);
                if (*((char *)v160 + v161 - 17) < 0)
                  operator delete(*(v162 - 5));
                if (*((char *)v162 - 41) < 0)
                  operator delete(*(v162 - 8));
                v161 -= 64;
              }
              while (v161);
              v160 = (void **)v194;
            }
            if (v160 != &__p)
              free(v160);
          }
        }
        if (v183 != v185)
          free(v183);
        goto LABEL_92;
      }
LABEL_177:
      v65 = 0;
      goto LABEL_178;
    }
  }
LABEL_92:
  v174 = v176;
  v175 = 0x800000000;
  llvm::RegionBase<llvm::RegionTraits<llvm::Function>>::elements(a2, &v199);
  v35 = v193;
  *(_QWORD *)&v189 = v193;
  v36 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))__src;
  if (__src == v199)
  {
    *((_QWORD *)&v189 + 1) = v193;
    v37 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))__src;
    goto LABEL_94;
  }
  v113 = (int)v201;
  v35 = malloc_type_malloc(8 * v201, 0x4065EBACuLL);
  if (!v35 && (v113 || (v35 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_397:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *((_QWORD *)&v189 + 1) = v35;
  v37 = v199;
  v36 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))__src;
LABEL_94:
  v38 = HIDWORD(v201);
  v190 = (int)v201;
  if (v36 == v37)
    v39 = HIDWORD(v201);
  else
    v39 = v201;
  if (v39)
  {
    memmove(v35, v36, 8 * v39);
    v38 = HIDWORD(v201);
  }
  v191 = v38;
  v192 = v202;
  v198 = 0;
  __p = 0;
  v197 = 0;
  sub_1C4EFB920(&__p, v210, v211, 0xCCCCCCCCCCCCCCCDLL * ((v211 - (_BYTE *)v210) >> 3));
  v40 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v185;
  v181 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v185;
  v41 = v213;
  if (v213 == v212)
  {
    v182 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v185;
    v42 = v213;
  }
  else
  {
    v114 = v214;
    v40 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))malloc_type_malloc(8 * v214, 0x4065EBACuLL);
    if (!v40)
    {
      if (v114)
        goto LABEL_397;
      v40 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v40)
        goto LABEL_397;
    }
    v182 = v40;
    v42 = v212;
    v41 = v213;
  }
  v43 = v215;
  LODWORD(v183) = v214;
  if (v41 == v42)
    v44 = v215;
  else
    v44 = v214;
  if (v44)
  {
    memmove(v40, v41, 8 * v44);
    v43 = v215;
  }
  HIDWORD(v183) = v43;
  LODWORD(v184) = v216;
  v187 = 0;
  v188 = 0;
  v186 = 0;
  sub_1C4EFB920(&v186, v217, v218, 0xCCCCCCCCCCCCCCCDLL * ((v218 - (_BYTE *)v217) >> 3));
  while (2)
  {
    v45 = (char *)__p;
    if (v197 - (_BYTE *)__p != v187 - v186)
    {
LABEL_124:
      v50 = **((_QWORD **)v197 - 5);
      if ((v50 & 4) == 0)
      {
        v51 = v50 & 0xFFFFFFFFFFFFFFF8;
        v52 = v51 + 40;
        for (i = *(_QWORD *)(v51 + 48); i != v52; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v54 = i - 24;
          else
            v54 = 0;
          if (i && *(_BYTE *)(v54 + 16) == 85)
          {
            v55 = v175;
            if (v175 >= (unint64_t)HIDWORD(v175))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v174, (uint64_t)v176, v175 + 1, 8);
              v55 = v175;
            }
            *((_QWORD *)v174 + v55) = v54;
            LODWORD(v175) = v175 + 1;
            ++*(_QWORD *)(a1 + 48);
          }
        }
      }
      sub_1C4EFBFFC((llvm::SmallPtrSetImplBase *)&v189);
      continue;
    }
    break;
  }
  if (__p != v197)
  {
    v46 = v186;
    while (*(_QWORD *)v45 == *(_QWORD *)v46)
    {
      v47 = v46[32];
      if (v45[32])
        v48 = v47 == 0;
      else
        v48 = 1;
      if (v48)
      {
        if ((v45[32] == 0) == (v47 != 0))
          goto LABEL_124;
      }
      else
      {
        v49 = *((_QWORD *)v45 + 1);
        if ((v49 & 6) != 0)
        {
          if (((*((_DWORD *)v46 + 2) ^ v49) & 6) != 0)
            goto LABEL_124;
        }
        else if (*((_DWORD *)v45 + 6) != *((_DWORD *)v46 + 6))
        {
          goto LABEL_124;
        }
      }
      v45 += 40;
      v46 += 40;
      if (v45 == v197)
        goto LABEL_137;
    }
    goto LABEL_124;
  }
LABEL_137:
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (v182 != v181)
    free(v182);
  if (__p)
  {
    v197 = (char *)__p;
    operator delete(__p);
  }
  if (*((_QWORD *)&v189 + 1) != (_QWORD)v189)
    free(*((void **)&v189 + 1));
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
  if (v213 != v212)
    free(v213);
  if (v210)
  {
    v211 = v210;
    operator delete(v210);
  }
  if (__src != v199)
    free(__src);
  if ((_DWORD)v175)
  {
    if (v9)
    {
      sub_1C5877C0C((uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))v174, v175, a1, *(_QWORD *)v9);
    }
    else
    {
      v199 = a2;
      LOBYTE(__src) = 0;
      v201 = (char *)&v202 + 8;
      *(_QWORD *)&v202 = 0x800000000;
      sub_1C5877C0C((uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))v174, v175, a1, (uint64_t)&v199);
      v9 = operator new();
      v170 = v199;
      v171 = (char)__src;
      v172[0] = v173;
      v172[1] = (void *)0x800000000;
      if ((_DWORD)v202)
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v172, (uint64_t)&v201);
      *(_QWORD *)v9 = v9 + 16;
      *(_QWORD *)(v9 + 8) = 0x800000000;
      *(_QWORD *)(v9 + 784) = v9 + 800;
      *(_QWORD *)(v9 + 792) = 0x800000000;
      *(_QWORD *)(v9 + 864) = 0;
      *(_DWORD *)(v9 + 888) = 0;
      *(_OWORD *)(v9 + 872) = 0u;
      *(_OWORD *)(v9 + 896) = 0u;
      *(_DWORD *)(v9 + 912) = 0;
      *(_QWORD *)(v9 + 920) = v9 + 936;
      *(_QWORD *)(v9 + 928) = 0x800000000;
      *(_DWORD *)(v9 + 1720) = 0;
      *(_OWORD *)(v9 + 1704) = 0u;
      *(_DWORD *)(v9 + 1744) = 0;
      *(_OWORD *)(v9 + 1728) = 0u;
      *(_DWORD *)(v9 + 1768) = 0;
      *(_OWORD *)(v9 + 1752) = 0u;
      sub_1C5878214(v9, (uint64_t *)&v170);
      v168 = v9;
      if (v172[0] != v173)
        free(v172[0]);
      sub_1C5877A0C((uint64_t)&v189, a1 + 216, &v168);
      if (v201 != (char *)&v202 + 8)
        free(v201);
    }
  }
  if (v174 != v176)
    free(v174);
  if (!v9)
    return v9;
  v71 = *(_QWORD *)v9;
  v72 = ***(_QWORD ***)v9 & 0xFFFFFFFFFFFFFFF8;
  if (!*(_BYTE *)(*(_QWORD *)v9 + 8))
  {
    if (*(_DWORD *)(v71 + 24))
    {
      v75 = 0;
      v73 = *(_QWORD *)(v72 + 40);
      goto LABEL_206;
    }
    return v9;
  }
  v73 = *(_QWORD *)(v72 + 40);
  if (v73 == v72 + 40)
  {
    v75 = 0;
LABEL_214:
    v77 = 0;
    goto LABEL_215;
  }
  v74 = (unsigned __int8 *)(v73 - 24);
  if (!v73)
    v74 = 0;
  if (v74[16] - 29 >= 0xB)
    v75 = 0;
  else
    v75 = (const llvm::Instruction *)v74;
LABEL_206:
  if (v73 == v72 + 40)
    goto LABEL_214;
  if (v73)
    v76 = (unsigned __int8 *)(v73 - 24);
  else
    v76 = 0;
  if (v76[16] - 29 >= 0xB)
    v77 = 0;
  else
    v77 = (const llvm::Instruction *)v76;
LABEL_215:
  v78 = *(const llvm::Instruction ***)(v71 + 16);
  v79 = *(unsigned int *)(v71 + 24);
  if ((_DWORD)v79)
  {
    v80 = 8 * v79;
    v81 = 8 * v79;
    v82 = *(const llvm::Instruction ***)(v71 + 16);
    while (*((_QWORD *)*v82 + 5) != v72)
    {
      ++v82;
      v81 -= 8;
      if (!v81)
        goto LABEL_222;
    }
    v77 = *v82;
LABEL_222:
    v181 = 0;
    v182 = 0;
    LODWORD(v183) = 0;
    do
    {
      v84 = (uint64_t)*v78++;
      *(_QWORD *)&v189 = v84;
      sub_1C627F8FC((uint64_t)&v181, &v189, (uint64_t)&v199);
      v80 -= 8;
    }
    while (v80);
    v78 = *(const llvm::Instruction ***)(v71 + 16);
    v85 = *(unsigned int *)(v71 + 24);
    if ((_DWORD)v85)
    {
      v86 = &v208;
      p_p = &__p;
      v83 = *(const llvm::Instruction ***)(v71 + 16);
      do
      {
        v88 = *v83;
        if (*v83 == v77)
        {
          ++v83;
        }
        else
        {
          v174 = 0;
          v175 = 0;
          v176[0] = 0;
          if ((sub_1C58784A8(*((unsigned __int8 **)v88 - 12), v77, *(unsigned __int8 **)(a1 + 16), (uint64_t *)&v181, 0, (uint64_t)&v174) & 1) != 0)
          {
            ++v83;
          }
          else
          {
            v89 = *(llvm::OptimizationRemarkEmitter **)(a1 + 40);
            v90 = ****(_QWORD ****)v89;
            if (*(_QWORD *)(v90 + 128)
              || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v90 + 72) + 48))(*(_QWORD *)(v90 + 72)))
            {
              v166 = p_p;
              v96 = *(void **)(*((_QWORD *)v88 + 5) + 56);
              llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v169, (const llvm::Instruction *)((char *)v88 + 48));
              v97 = (uint64_t (*)(llvm::DiagnosticInfoWithLocationBase *__hidden))*((_QWORD *)v88 + 5);
              LODWORD(__src) = 10;
              BYTE4(__src) = 2;
              v202 = v169;
              v201 = v96;
              v203 = "chr";
              v204 = "DropUnhoistableSelect";
              v205 = 21;
              v206 = 0;
              v207 = 0;
              v208 = &v210;
              v209 = 0x400000000;
              v219 = 0;
              v220 = -1;
              v221 = v97;
              v199 = &off_1E814E538;
              *(_QWORD *)&v169 = "Dropped unhoistable select";
              *((_QWORD *)&v169 + 1) = 26;
              sub_1C53B17B4((uint64_t)v86, (const void **)&v169);
              sub_1C61998EC((uint64_t)&v189, (uint64_t)&v199);
              *(_QWORD *)&v189 = &off_1E814E538;
              v199 = &off_1E814E790;
              v98 = (void **)v208;
              v167 = v86;
              if ((_DWORD)v209)
              {
                v165 = v75;
                v99 = (unint64_t)v209 << 6;
                do
                {
                  v100 = (void **)((char *)v98 + v99);
                  if (*((char *)v98 + v99 - 17) < 0)
                    operator delete(*(v100 - 5));
                  if (*((char *)v100 - 41) < 0)
                    operator delete(*(v100 - 8));
                  v99 -= 64;
                }
                while (v99);
                v98 = (void **)v208;
                v75 = v165;
                v86 = v167;
              }
              if (v98 != &v210)
                free(v98);
              llvm::OptimizationRemarkEmitter::emit(v89, (llvm::DiagnosticInfoOptimizationBase *)&v189);
              *(_QWORD *)&v189 = &off_1E814E790;
              v101 = (void **)v194;
              if (v195)
              {
                v102 = (unint64_t)v195 << 6;
                do
                {
                  v103 = (void **)((char *)v101 + v102);
                  if (*((char *)v101 + v102 - 17) < 0)
                    operator delete(*(v103 - 5));
                  if (*((char *)v103 - 41) < 0)
                    operator delete(*(v103 - 8));
                  v102 -= 64;
                }
                while (v102);
                v101 = (void **)v194;
                v86 = v167;
              }
              p_p = v166;
              if (v101 != v166)
                free(v101);
            }
            v91 = *(unsigned int *)(v71 + 24);
            v92 = *(_QWORD *)(v71 + 16) + 8 * v91;
            if ((const llvm::Instruction **)v92 != v83 + 1)
            {
              memmove(v83, v83 + 1, v92 - (_QWORD)(v83 + 1));
              LODWORD(v91) = *(_DWORD *)(v71 + 24);
            }
            *(_DWORD *)(v71 + 24) = v91 - 1;
            if ((_DWORD)v183)
            {
              LODWORD(v93) = ((_DWORD)v183 - 1) & ((v88 >> 4) ^ (v88 >> 9));
              v94 = &v181[v93];
              v95 = (const llvm::Instruction *)*v94;
              if (v88 == (const llvm::Instruction *)*v94)
              {
LABEL_236:
                *v94 = (uint64_t (*)(llvm::DiagnosticInfoWithLocationBase *__hidden))-8192;
                v182 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))vadd_s32((int32x2_t)v182, (int32x2_t)0x1FFFFFFFFLL);
              }
              else
              {
                v104 = 1;
                while (v95 != (const llvm::Instruction *)-4096)
                {
                  v105 = v93 + v104++;
                  v93 = v105 & ((_DWORD)v183 - 1);
                  v95 = (const llvm::Instruction *)v181[v93];
                  if (v88 == v95)
                  {
                    v94 = &v181[v93];
                    goto LABEL_236;
                  }
                }
              }
            }
          }
          MEMORY[0x1CAA32FB4](v174, 8);
          v78 = *(const llvm::Instruction ***)(v71 + 16);
          v85 = *(unsigned int *)(v71 + 24);
        }
      }
      while (v83 != &v78[v85]);
    }
    else
    {
      v83 = &v78[v85];
    }
  }
  else
  {
    v181 = 0;
    v182 = 0;
    v83 = v78;
    LODWORD(v183) = 0;
  }
  v106 = **(_QWORD **)v71 & 0xFFFFFFFFFFFFFFF8;
  v107 = *(_QWORD *)(v106 + 40);
  if (v107 == v106 + 40)
  {
    v109 = 0;
  }
  else
  {
    if (v107)
      v108 = (unsigned __int8 *)(v107 - 24);
    else
      v108 = 0;
    if (v108[16] - 29 >= 0xB)
      v109 = 0;
    else
      v109 = (const llvm::Instruction *)v108;
  }
  while (v78 != v83)
  {
    if (*((_QWORD *)*v78 + 5) == (**(_QWORD **)v71 & 0xFFFFFFFFFFFFFFF8))
    {
      v109 = *v78;
      break;
    }
    ++v78;
  }
  if (*(_BYTE *)(v71 + 8))
    v110 = v109 == v75;
  else
    v110 = 1;
  if (!v110)
  {
    v174 = 0;
    v175 = 0;
    v176[0] = 0;
    if ((sub_1C58784A8(*((unsigned __int8 **)v75 - 12), v109, *(unsigned __int8 **)(a1 + 16), (uint64_t *)&v181, 0, (uint64_t)&v174) & 1) == 0)
    {
      v115 = *(char **)(v71 + 16);
      v116 = *(unsigned int *)(v71 + 24);
      if (!(_DWORD)v116)
        goto LABEL_320;
      v117 = &v115[8 * v116];
      v118 = &v208;
      do
      {
        v119 = *(_QWORD *)v115;
        v120 = *(llvm::OptimizationRemarkEmitter **)(a1 + 40);
        v121 = ****(_QWORD ****)v120;
        if (*(_QWORD *)(v121 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v121 + 72) + 48))(*(_QWORD *)(v121 + 72)))
        {
          v122 = *(void **)(*(_QWORD *)(v119 + 40) + 56);
          llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v169, (const llvm::DebugLoc *)(v119 + 48));
          v123 = *(uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v119 + 40);
          LODWORD(__src) = 10;
          BYTE4(__src) = 2;
          v202 = v169;
          v201 = v122;
          v203 = "chr";
          v204 = "DropSelectUnhoistableBranch";
          v205 = 27;
          v206 = 0;
          v207 = 0;
          v208 = &v210;
          v209 = 0x400000000;
          v219 = 0;
          v220 = -1;
          v221 = v123;
          v199 = &off_1E814E538;
          *(_QWORD *)&v169 = "Dropped select due to unhoistable branch";
          *((_QWORD *)&v169 + 1) = 40;
          sub_1C53B17B4((uint64_t)v118, (const void **)&v169);
          sub_1C61998EC((uint64_t)&v189, (uint64_t)&v199);
          *(_QWORD *)&v189 = &off_1E814E538;
          v199 = &off_1E814E790;
          v124 = (void **)v208;
          if ((_DWORD)v209)
          {
            v125 = v118;
            v126 = (unint64_t)v209 << 6;
            do
            {
              v127 = (void **)((char *)v124 + v126);
              if (*((char *)v124 + v126 - 17) < 0)
                operator delete(*(v127 - 5));
              if (*((char *)v127 - 41) < 0)
                operator delete(*(v127 - 8));
              v126 -= 64;
            }
            while (v126);
            v124 = (void **)v208;
            v118 = v125;
          }
          if (v124 != &v210)
            free(v124);
          llvm::OptimizationRemarkEmitter::emit(v120, (llvm::DiagnosticInfoOptimizationBase *)&v189);
          *(_QWORD *)&v189 = &off_1E814E790;
          v128 = (void **)v194;
          if (v195)
          {
            v129 = (unint64_t)v195 << 6;
            do
            {
              v130 = (void **)((char *)v128 + v129);
              if (*((char *)v128 + v129 - 17) < 0)
                operator delete(*(v130 - 5));
              if (*((char *)v130 - 41) < 0)
                operator delete(*(v130 - 8));
              v129 -= 64;
            }
            while (v129);
            v128 = (void **)v194;
          }
          if (v128 != &__p)
            free(v128);
        }
        v115 += 8;
      }
      while (v115 != v117);
      v115 = *(char **)(v71 + 16);
      v131 = *(unsigned int *)(v71 + 24);
      if ((_DWORD)v131)
      {
        v132 = &v115[8 * v131];
        v133 = 8 * v131 - 8;
        v134 = *(char **)(v71 + 16);
        v135 = v134;
        while (1)
        {
          v136 = *(_QWORD *)v135;
          v135 += 8;
          if (*(_QWORD *)(v136 + 40) == v72)
            break;
          v133 -= 8;
          v134 = v135;
          if (v135 == v132)
            goto LABEL_321;
        }
        if (v135 == v132)
        {
          v132 = v134;
        }
        else
        {
          v151 = 8;
          v132 = v134;
          do
          {
            v152 = *(_QWORD *)&v134[v151];
            if (*(_QWORD *)(v152 + 40) != v72)
            {
              *(_QWORD *)v132 = v152;
              v132 += 8;
            }
            v151 += 8;
            v133 -= 8;
          }
          while (v133);
          v115 = *(char **)(v71 + 16);
        }
      }
      else
      {
LABEL_320:
        v132 = v115;
      }
LABEL_321:
      *(_DWORD *)(v71 + 24) = (unint64_t)(v132 - v115) >> 3;
      sub_1C619D588(&v181);
    }
    MEMORY[0x1CAA32FB4](v174, 8);
  }
  MEMORY[0x1CAA32FB4](v181, 8);
  return v168;
}

uint64_t sub_1C5877A0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;

  v27 = 0;
  result = sub_1C4EBC5C8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v27);
  v7 = v27;
  if ((result & 1) != 0)
  {
    v8 = 0;
    goto LABEL_8;
  }
  v28 = v27;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(unsigned int *)(a2 + 16);
  if (4 * v9 + 4 >= (3 * v10))
  {
    v11 = 2 * v10;
    goto LABEL_10;
  }
  v11 = *(_DWORD *)(a2 + 16);
  if ((int)v10 + ~v9 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_10:
    v13 = *(_QWORD *)a2;
    v14 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
    v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
    if ((v16 + 1) > 0x40)
      v17 = v16 + 1;
    else
      v17 = 64;
    *(_DWORD *)(a2 + 16) = v17;
    v18 = operator new(8 * v17, (std::align_val_t)8uLL);
    *(_QWORD *)a2 = v18;
    if (v13)
    {
      *(_QWORD *)(a2 + 8) = 0;
      v19 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v19)
      {
        v20 = 8 * v19;
        do
        {
          *v18++ = -4096;
          v20 -= 8;
        }
        while (v20);
      }
      if ((_DWORD)v10)
      {
        v21 = 0;
        v22 = 8 * v10;
        v23 = (uint64_t *)v13;
        do
        {
          v24 = *v23;
          if ((*v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v29 = 0;
            sub_1C4EBC5C8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v24, &v29);
            *v29 = v24;
            *(_DWORD *)(a2 + 8) = ++v21;
          }
          ++v23;
          v22 -= 8;
        }
        while (v22);
      }
      MEMORY[0x1CAA32FB4](v13, 8);
      v18 = *(_QWORD **)a2;
      LODWORD(v25) = *(_DWORD *)(a2 + 16);
    }
    else
    {
      *(_QWORD *)(a2 + 8) = 0;
      v25 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v25)
      {
        for (i = 0; i != v25; ++i)
          v18[i] = -4096;
      }
    }
    result = sub_1C4EBC5C8((uint64_t)v18, v25, *a3, &v28);
    v9 = *(_DWORD *)(a2 + 8);
    v7 = v28;
  }
  *(_DWORD *)(a2 + 8) = v9 + 1;
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v7 = *a3;
  v8 = 1;
LABEL_8:
  v12 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

void sub_1C5877C0C(uint64_t (***a1)(llvm::DiagnosticInfoWithLocationBase *__hidden this), int a2, uint64_t a3, uint64_t a4)
{
  uint64_t (***v6)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (***v7)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v8)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t (***v14)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v15)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (***v16)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  llvm::OptimizationRemarkEmitter *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  char *v31;
  unint64_t v32;
  void **v33;
  char *v34;
  unint64_t v35;
  void **v36;
  unint64_t v37;
  uint64_t (***v38)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v39)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  __int128 v46;
  uint64_t v47[10];
  void *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t (**v51)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v52;
  char v53;
  uint64_t v54;
  __int128 v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  char v59;
  char v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[260];
  int v64;
  uint64_t (*v65)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v6 = a1;
    v7 = &a1[a2];
    v42 = a3 + 144;
    v43 = a3 + 120;
    v40 = a4 + 32;
    v41 = a4 + 16;
    v44 = a3 + 192;
    do
    {
      v8 = *v6;
      LODWORD(v46) = -1;
      v45 = -1;
      if ((*((_BYTE *)v8 + 23) & 0x20) == 0)
      {
LABEL_19:
        v23 = 0;
        goto LABEL_20;
      }
      v9 = **(_QWORD **)*v8;
      v51 = v8;
      v10 = *(_DWORD *)(v9 + 2496);
      if (v10)
      {
        v11 = *(_QWORD *)(v9 + 2480);
        v12 = v10 - 1;
        v13 = v12 & ((v8 >> 4) ^ (v8 >> 9));
        v14 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v11 + 40 * v13);
        v15 = *v14;
        if (*v14 == v8)
          goto LABEL_14;
        v16 = 0;
        v17 = 1;
        while (v15 != (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-4096)
        {
          if (v16)
            v18 = 0;
          else
            v18 = v15 == (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))-8192;
          if (v18)
            v16 = v14;
          v19 = v13 + v17++;
          v13 = v19 & v12;
          v14 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v11 + 40 * v13);
          v15 = *v14;
          if (*v14 == v8)
            goto LABEL_14;
        }
        if (v16)
          v38 = v16;
        else
          v38 = v14;
      }
      else
      {
        v38 = 0;
      }
      v14 = (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))sub_1C541AB24(v9 + 2480, (uint64_t)&v51, (uint64_t *)&v51, v38);
      v39 = v51;
      v14[4] = 0;
      v14[3] = 0;
      *v14 = v39;
      v14[1] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v14 + 3);
      v14[2] = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))0x100000000;
LABEL_14:
      v20 = *((unsigned int *)v14 + 4);
      if (!(_DWORD)v20)
        goto LABEL_19;
      v21 = (uint64_t *)(v14[1] + 1);
      v22 = 16 * v20;
      while (*((_DWORD *)v21 - 2) != 2)
      {
        v23 = 0;
        v21 += 2;
        v22 -= 16;
        if (!v22)
          goto LABEL_20;
      }
      v23 = *v21;
LABEL_20:
      if (sub_1C58780BC(v23, &v46, &v45))
      {
        v24 = v46;
        v25 = v45;
        v47[0] = (uint64_t)v8;
        v26 = (((unint64_t)(unint64_t)(*(double *)&xmmword_1ED812440 * 1000000.0) << 31) | 0x7A100)
            / 0xF4240;
        if (v46 >= v26)
        {
          sub_1C62AB604(v43, v47, (uint64_t)&v51);
LABEL_50:
          *((_DWORD *)sub_1C62156AC(v44, v47) + 2) = v24;
          v37 = *(unsigned int *)(a4 + 24);
          if (v37 >= *(unsigned int *)(a4 + 28))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v41, v40, v37 + 1, 8);
            v37 = *(unsigned int *)(a4 + 24);
          }
          *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * v37) = v8;
          ++*(_DWORD *)(a4 + 24);
          goto LABEL_25;
        }
        if (v45 >= v26)
        {
          sub_1C62AB604(v42, v47, (uint64_t)&v51);
          v24 = v25;
          goto LABEL_50;
        }
      }
      v27 = *(llvm::OptimizationRemarkEmitter **)(a3 + 40);
      v28 = ****(_QWORD ****)v27;
      if (*(_QWORD *)(v28 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v28 + 72) + 48))(*(_QWORD *)(v28 + 72)))
      {
        v29 = *((_QWORD *)v8[5] + 7);
        llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v46, (const llvm::DebugLoc *)(v8 + 6));
        v30 = v8[5];
        v52 = 10;
        v53 = 2;
        v55 = v46;
        v54 = v29;
        v56 = "chr";
        v57 = "SelectNotBiased";
        v58 = 15;
        v59 = 0;
        v60 = 0;
        v61 = v63;
        v62 = 0x400000000;
        v63[256] = 0;
        v64 = -1;
        v65 = v30;
        v51 = &off_1E814E538;
        *(_QWORD *)&v46 = "Select not biased";
        *((_QWORD *)&v46 + 1) = 17;
        sub_1C53B17B4((uint64_t)&v61, (const void **)&v46);
        sub_1C61998EC((uint64_t)v47, (uint64_t)&v51);
        v47[0] = (uint64_t)&off_1E814E538;
        v51 = &off_1E814E790;
        v31 = (char *)v61;
        if ((_DWORD)v62)
        {
          v32 = (unint64_t)v62 << 6;
          do
          {
            v33 = (void **)&v31[v32];
            if (v31[v32 - 17] < 0)
              operator delete(*(v33 - 5));
            if (*((char *)v33 - 41) < 0)
              operator delete(*(v33 - 8));
            v32 -= 64;
          }
          while (v32);
          v31 = (char *)v61;
        }
        if (v31 != v63)
          free(v31);
        llvm::OptimizationRemarkEmitter::emit(v27, (llvm::DiagnosticInfoOptimizationBase *)v47);
        v47[0] = (uint64_t)&off_1E814E790;
        v34 = (char *)v48;
        if (v49)
        {
          v35 = (unint64_t)v49 << 6;
          do
          {
            v36 = (void **)&v34[v35];
            if (v34[v35 - 17] < 0)
              operator delete(*(v36 - 5));
            if (*((char *)v36 - 41) < 0)
              operator delete(*(v36 - 8));
            v35 -= 64;
          }
          while (v35);
          v34 = (char *)v48;
        }
        if (v34 != (char *)&v50)
          free(v34);
      }
LABEL_25:
      ++v6;
    }
    while (v6 != v7);
  }
}

uint64_t sub_1C58780BC(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  if (!result)
    return result;
  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(_QWORD **)(*(_QWORD *)(result - 8 * v4) + 8);
  if (*v5 != 14)
    return 0;
  result = 0;
  v6 = v5[3];
  v7 = *(_QWORD *)((char *)v5 + 30);
  v9 = v6 != 0x775F68636E617262 || v7 != 0x737468676965775FLL;
  if ((_DWORD)v4 != 3 || v9)
    return result;
  v10 = *(_QWORD *)(*(_QWORD *)(v3 - 16) + 128);
  v11 = *(_QWORD *)(*(_QWORD *)(v3 - 8) + 128);
  if (!v10 || v11 == 0)
    return 0;
  v13 = (unint64_t *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u)
    v13 = (unint64_t *)*v13;
  v14 = *v13;
  v15 = (unint64_t *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u)
    v15 = (unint64_t *)*v15;
  v16 = *v15;
  v17 = v16 + v14;
  if (!(v16 + v14))
    return 0;
  v18 = 0;
  if (HIDWORD(v17))
  {
    v23 = v16 + v14;
    do
    {
      v19 = v23 >> 1;
      ++v18;
      v24 = v23 >> 33;
      v23 >>= 1;
    }
    while (v24);
  }
  else
  {
    v19 = v16 + v14;
  }
  v20 = v14 >> v18;
  if (v19 != 0x80000000)
    v20 = (((unint64_t)v20 << 31) | (v19 >> 1)) / v19;
  *a2 = v20;
  v21 = 0;
  if (HIDWORD(v17))
  {
    v25 = v17;
    do
    {
      v17 = v25 >> 1;
      ++v21;
      v26 = v25 >> 33;
      v25 >>= 1;
    }
    while (v26);
  }
  v22 = v16 >> v21;
  if (v17 != 0x80000000)
    v22 = (((unint64_t)v22 << 31) | (v17 >> 1)) / v17;
  *a3 = v22;
  return 1;
}

uint64_t sub_1C5878214(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v9 = v4 + 1;
    v10 = v5 + 96 * v4;
    if (v5 <= (unint64_t)a2 && v10 > (unint64_t)a2)
    {
      v12 = (uint64_t)a2 - v5;
      sub_1C58782D4(a1, v9);
      v5 = *(_QWORD *)a1;
      a2 = (uint64_t *)(*(_QWORD *)a1 + v12);
    }
    else
    {
      sub_1C58782D4(a1, v9);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 96 * *(unsigned int *)(a1 + 8);
  v7 = *a2;
  *(_BYTE *)(v6 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)v6 = v7;
  *(_QWORD *)(v6 + 24) = 0x800000000;
  *(_QWORD *)(v6 + 16) = v6 + 32;
  result = v6 + 16;
  if (*((_DWORD *)a2 + 6))
    result = llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(result, (uint64_t)(a2 + 2));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1C58782D4(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  int v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;

  v16 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 96, &v16);
  v4 = v3;
  v5 = *(char **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    v7 = &v5[96 * v6];
    v8 = v3 + 16;
    v9 = (uint64_t)(v5 + 16);
    do
    {
      v11 = v9 - 16;
      v10 = *(_QWORD *)(v9 - 16);
      *((_BYTE *)v8 - 8) = *(_BYTE *)(v9 - 8);
      *(v8 - 2) = v10;
      *v8 = v8 + 2;
      v8[1] = 0x800000000;
      if (*(_DWORD *)(v9 + 8))
        sub_1C614D378((uint64_t)v8, v9);
      v8 += 12;
      v9 += 96;
    }
    while ((char *)(v11 + 96) != v7);
    v5 = *(char **)a1;
    v12 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v12)
    {
      v13 = 96 * v12;
      do
      {
        v14 = *(char **)&v5[v13 - 80];
        if (&v5[v13 - 64] != v14)
          free(v14);
        v13 -= 96;
      }
      while (v13);
      v5 = *(char **)a1;
    }
  }
  v15 = v16;
  if (v5 != (char *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v15;
}

_QWORD *sub_1C58783F0(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62AB738(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C58784A8(unsigned __int8 *a1, const llvm::Instruction *a2, unsigned __int8 *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  BOOL v6;
  llvm::Value *v7;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *v22;
  llvm::Value *v23;
  uint64_t v24;
  unsigned int v25;
  llvm::Value *v26;
  _QWORD v27[3];

  if (a1[16] <= 0x1Bu)
    v7 = 0;
  else
    v7 = (llvm::Value *)a1;
  v26 = v7;
  if (!v7)
    return (v7 == 0) | v6;
  v23 = v7;
  v27[0] = 0;
  if (sub_1C61252B8((uint64_t *)a6, &v23, v27)
    && v27[0] != *(_QWORD *)a6 + 16 * *(unsigned int *)(a6 + 16))
  {
    v6 = *(_BYTE *)(v27[0] + 8) != 0;
    return (v7 == 0) | v6;
  }
  v27[0] = v26;
  v23 = 0;
  if (sub_1C61DB414(a4, v27, &v23))
  {
LABEL_10:
    v6 = 0;
    *((_BYTE *)sub_1C617F758((uint64_t *)a6, &v26) + 8) = 0;
    return (v7 == 0) | v6;
  }
  if (llvm::DominatorTree::dominates((llvm::DominatorTree *)a3, v26, a2))
  {
    if (a5)
      sub_1C61DB390(a5, &v26, (uint64_t)v27);
    v6 = 1;
    *((_BYTE *)sub_1C617F758((uint64_t *)a6, &v26) + 8) = 1;
  }
  else
  {
    if (!sub_1C587871C((uint64_t)v26, a3))
      goto LABEL_10;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v14 = *((_DWORD *)v26 + 5);
    if ((v14 & 0x40000000) != 0)
    {
      v16 = (_QWORD *)*((_QWORD *)v26 - 1);
      v15 = v14 & 0x7FFFFFF;
    }
    else
    {
      v15 = v14 & 0x7FFFFFF;
      v16 = (_QWORD *)((char *)v26 - 32 * v15);
    }
    if (v15)
    {
      v17 = 32 * v15;
      while ((sub_1C58784A8(*v16, a2, a3, a4, &v23, a6) & 1) != 0)
      {
        v16 += 4;
        v17 -= 32;
        if (!v17)
          goto LABEL_23;
      }
      MEMORY[0x1CAA32FB4](v23, 8);
      goto LABEL_10;
    }
LABEL_23:
    if (a5)
    {
      v18 = (llvm::Value *)((char *)v23 + 8 * v25);
      if ((_DWORD)v24)
      {
        if (v25)
        {
          v20 = 8 * v25;
          v19 = v23;
          while ((*(_QWORD *)v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v19 = (llvm::Value *)((char *)v19 + 8);
            v20 -= 8;
            if (!v20)
              goto LABEL_32;
          }
        }
        else
        {
          v19 = v23;
        }
      }
      else
      {
LABEL_32:
        v19 = (llvm::Value *)((char *)v23 + 8 * v25);
      }
      v21 = (llvm::Value *)((char *)v23 + 8 * v25);
LABEL_34:
      while (v19 != v21)
      {
        sub_1C61DB390(a5, v19, (uint64_t)v27);
        v22 = (llvm::Value *)((char *)v19 + 8);
        v19 = v18;
        if (v22 != v18)
        {
          v19 = v22;
          while ((*(_QWORD *)v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v19 = (llvm::Value *)((char *)v19 + 8);
            if (v19 == v18)
            {
              v19 = v18;
              goto LABEL_34;
            }
          }
        }
      }
    }
    v6 = 1;
    *((_BYTE *)sub_1C617F758((uint64_t *)a6, &v26) + 8) = 1;
    MEMORY[0x1CAA32FB4](v23, 8);
  }
  return (v7 == 0) | v6;
}

uint64_t sub_1C587871C(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if ((v2 - 89) >= 5
    && v2 != 62
    && (v2 != 85 ? (v3 = (v2 - 41) >= 0x12) : (v3 = 0),
        v3 ? (v4 = (v2 - 66) >= 0xD) : (v4 = 0),
        v4 ? (v5 = (v2 - 81) > 1) : (v5 = 0),
        v5))
  {
    return 0;
  }
  else
  {
    return llvm::isSafeToSpeculativelyExecute(a1, 0, a2, 0);
  }
}

uint64_t sub_1C587876C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[31];

  v3 = result;
  v4 = *(_DWORD *)(result + 8);
  if (v4)
  {
    v5 = *(_QWORD *)result;
    v6 = *(_QWORD *)result + 96 * v4;
    do
    {
      v7 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v7)
      {
        v8 = *(uint64_t **)(v5 + 16);
        v9 = 8 * v7;
        do
        {
          v10 = *v8++;
          v15 = v10;
          result = sub_1C627F8FC(a2, &v15, (uint64_t)v16);
          v9 -= 8;
        }
        while (v9);
      }
      v5 += 96;
    }
    while (v5 != v6);
  }
  v11 = *(unsigned int *)(v3 + 792);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)(v3 + 784);
    v13 = 8 * v11;
    do
    {
      v14 = *v12++;
      result = sub_1C587876C(v14, a2);
      v13 -= 8;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_1C587881C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, const llvm::Instruction *a6, uint64_t a7, uint64_t *a8)
{
  unsigned int v10;
  char *v11;
  char v12;
  unint64_t v13;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  const llvm::Instruction *v28;
  uint64_t v29;
  const llvm::Instruction **v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::OptimizationRemarkEmitter *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x16_t *v54;
  uint64_t v55;
  uint64_t v56;
  int8x16_t *v57;
  _QWORD *v58;
  _QWORD *v59;
  unsigned int v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  int8x16_t *v70;
  int64_t v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  llvm::OptimizationRemarkEmitter *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  BOOL v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  void **v102;
  char *v103;
  unint64_t v104;
  void **v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  void **v111;
  char *v112;
  unint64_t v113;
  void **v114;
  int8x16_t *v115;
  uint64_t *v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  unsigned int v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  _QWORD *v129;
  uint64_t v130;
  void **v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  const llvm::Instruction *v141;
  uint64_t *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int8x16_t *v148;
  uint64_t *v149;
  char *v150;
  uint64_t v151;
  const llvm::Instruction *v153;
  const llvm::Instruction *v154;
  char v155;
  uint64_t v156;
  const llvm::Instruction *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unsigned int v161;
  _QWORD v162[2];
  int v163;
  __int128 v164;
  char *v165;
  uint64_t v166;
  _BYTE v167[768];
  void *v168;
  uint64_t v169;
  _BYTE v170[25];
  char *v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  __int128 v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  _BYTE v179[64];
  void *v180;
  uint64_t v181;
  int v182;
  void *v183;
  unsigned int v184;
  _BYTE v185[272];
  void *__src;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  const char *v190;
  const char *v191;
  uint64_t v192;
  char v193;
  char v194;
  void *v195;
  uint64_t v196;
  _BYTE v197[256];
  char v198;
  int v199;
  uint64_t v200;
  uint64_t v201;

  v10 = 0;
  v157 = 0;
  v201 = *MEMORY[0x1E0C80C00];
  v162[0] = 0;
  v162[1] = 0;
  v163 = 0;
  v177 = v179;
  v178 = 0x800000000;
  v174 = &v176;
  v175 = xmmword_1C6464ED0;
  v171 = (char *)&v173;
  v172 = 0x800000000;
  v168 = v170;
  v169 = 0x800000000;
  v11 = v167;
  v165 = v167;
  v12 = 1;
  v166 = 0x800000000;
  if (&v165 == (char **)a3)
    goto LABEL_201;
  v13 = *(unsigned int *)(a3 + 8);
  if (!(_DWORD)v13)
    goto LABEL_201;
  v156 = a3;
  if (v13 <= 8)
  {
    v18 = *(char **)a3;
    v19 = *(_QWORD *)a3 + 96 * v13;
LABEL_7:
    v20 = v11 + 16;
    v21 = (uint64_t)(v18 + 16);
    do
    {
      v23 = v21 - 16;
      v22 = *(_QWORD *)(v21 - 16);
      *((_BYTE *)v20 - 8) = *(_BYTE *)(v21 - 8);
      *(v20 - 2) = v22;
      *v20 = v20 + 2;
      v20[1] = 0x800000000;
      if (*(_DWORD *)(v21 + 8))
        v20 = (_QWORD *)llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v20, v21);
      v20 += 12;
      v21 += 96;
    }
    while (v23 + 96 != v19);
    v11 = v165;
    goto LABEL_12;
  }
  sub_1C58782D4((uint64_t)&v165, v13);
  v17 = *(_DWORD *)(v156 + 8);
  v11 = v165;
  if (v17)
  {
    v18 = *(char **)v156;
    v19 = *(_QWORD *)v156 + 96 * v17;
    goto LABEL_7;
  }
LABEL_12:
  LODWORD(v166) = v13;
  v24 = &v11[96 * v13];
  v157 = 0;
  v155 = 1;
  v141 = a6;
  v142 = a8;
  v150 = v24;
  v143 = a5;
  do
  {
    v25 = **(_QWORD **)v11 & 0xFFFFFFFFFFFFFFF8;
    v26 = *(_QWORD *)(v25 + 40);
    if (v26 == v25 + 40)
    {
      v28 = 0;
    }
    else
    {
      if (v26)
        v27 = (unsigned __int8 *)(v26 - 24);
      else
        v27 = 0;
      if (v27[16] - 29 >= 0xB)
        v28 = 0;
      else
        v28 = (const llvm::Instruction *)v27;
    }
    v29 = *((unsigned int *)v11 + 6);
    if ((_DWORD)v29)
    {
      v30 = (const llvm::Instruction **)*((_QWORD *)v11 + 2);
      v31 = 8 * v29;
      while (*((_QWORD *)*v30 + 5) != (**(_QWORD **)v11 & 0xFFFFFFFFFFFFFFF8))
      {
        ++v30;
        v31 -= 8;
        if (!v31)
          goto LABEL_27;
      }
      v28 = *v30;
    }
LABEL_27:
    v161 = 0;
    v159 = 0;
    v160 = 0;
    if (!v11[8])
    {
      if (!(_DWORD)v29)
        goto LABEL_31;
LABEL_29:
      v32 = (uint64_t *)*((_QWORD *)v11 + 2);
      v33 = 8 * v29;
      do
      {
        v34 = *v32++;
        v180 = *(void **)(v34 - 96);
        sub_1C62AB7E4((uint64_t)&v159, &v180, (uint64_t)&__src);
        v33 -= 8;
      }
      while (v33);
      goto LABEL_31;
    }
    v63 = *(_QWORD *)((**(_QWORD **)v11 & 0xFFFFFFFFFFFFFFF8) + 40);
    if (v63)
      v64 = v63 - 24;
    else
      v64 = 0;
    if (*(unsigned __int8 *)(v64 + 16) - 29 >= 0xB)
      v64 = 0;
    v180 = *(void **)(v64 - 96);
    sub_1C62AB7E4((uint64_t)&v159, &v180, (uint64_t)&__src);
    v29 = *((unsigned int *)v11 + 6);
    if ((_DWORD)v29)
      goto LABEL_29;
LABEL_31:
    if (*(_QWORD *)v11 == *(_QWORD *)v165)
    {
      if (!a4)
      {
        sub_1C4DFE328((uint64_t)v162, (uint64_t)&v159);
LABEL_51:
        v157 = v28;
        goto LABEL_126;
      }
      if (sub_1C5879AAC(a6, (uint64_t)a5, (uint64_t)&v159, *(unsigned __int8 **)(a2 + 16), a8))
      {
        sub_1C4DFE328((uint64_t)v162, (uint64_t)&v159);
        v40 = *(llvm::OptimizationRemarkEmitter **)(a2 + 40);
        v41 = ****(_QWORD ****)v40;
        if (!*(_QWORD *)(v41 + 128)
          && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v41 + 72) + 48))(*(_QWORD *)(v41 + 72)))
        {
          goto LABEL_51;
        }
        v42 = **(_QWORD **)v11 & 0xFFFFFFFFFFFFFFF8;
        v43 = *(_QWORD *)(v42 + 40);
        v154 = v28;
        if (v43 == v42 + 40)
        {
          v44 = 0;
        }
        else
        {
          if (v43)
            v106 = v43 - 24;
          else
            v106 = 0;
          if (*(unsigned __int8 *)(v106 + 16) - 29 >= 0xB)
            v44 = 0;
          else
            v44 = v106;
        }
        v107 = *(_QWORD *)(*(_QWORD *)(v44 + 40) + 56);
        llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v164, (const llvm::DebugLoc *)(v44 + 48));
        v108 = *(_QWORD *)(v44 + 40);
        LODWORD(v187) = 10;
        BYTE4(v187) = 2;
        v189 = v164;
        v188 = v107;
        v190 = "chr";
        v191 = "SplitScopeFromOuter";
        v192 = 19;
        v193 = 0;
        v194 = 0;
        v195 = v197;
        v196 = 0x400000000;
        v198 = 0;
        v199 = -1;
        v200 = v108;
        __src = &off_1E814E538;
        *(_QWORD *)&v164 = "Split scope from outer due to unhoistable branch/select ";
        *((_QWORD *)&v164 + 1) = 56;
        sub_1C53B17B4((uint64_t)&v195, (const void **)&v164);
        *(_QWORD *)&v164 = "and/or lack of common condition values";
        *((_QWORD *)&v164 + 1) = 38;
        sub_1C53B17B4((uint64_t)&v195, (const void **)&v164);
        sub_1C61998EC((uint64_t)&v180, (uint64_t)&__src);
        v180 = &off_1E814E538;
        __src = &off_1E814E790;
        v109 = (char *)v195;
        if ((_DWORD)v196)
        {
          v110 = (unint64_t)v196 << 6;
          do
          {
            v111 = (void **)&v109[v110];
            if (v109[v110 - 17] < 0)
              operator delete(*(v111 - 5));
            if (*((char *)v111 - 41) < 0)
              operator delete(*(v111 - 8));
            v110 -= 64;
          }
          while (v110);
          v109 = (char *)v195;
          v24 = v150;
        }
        if (v109 != v197)
          free(v109);
        llvm::OptimizationRemarkEmitter::emit(v40, (llvm::DiagnosticInfoOptimizationBase *)&v180);
        v180 = &off_1E814E790;
        v112 = (char *)v183;
        if (v184)
        {
          v113 = (unint64_t)v184 << 6;
          do
          {
            v114 = (void **)&v112[v113];
            if (v112[v113 - 17] < 0)
              operator delete(*(v114 - 5));
            if (*((char *)v114 - 41) < 0)
              operator delete(*(v114 - 8));
            v113 -= 64;
          }
          while (v113);
          v112 = (char *)v183;
        }
        if (v112 != v185)
          free(v112);
        v157 = v154;
      }
      else
      {
        if (v162 != a5)
          sub_1C4DFE328((uint64_t)v162, (uint64_t)a5);
        v48 = &v159[v161];
        if ((_DWORD)v160)
        {
          if (v161)
          {
            v49 = 8 * v161;
            v50 = v159;
            while ((*v50 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              ++v50;
              v49 -= 8;
              if (!v49)
                goto LABEL_60;
            }
          }
          else
          {
            v50 = v159;
          }
        }
        else
        {
LABEL_60:
          v50 = &v159[v161];
        }
        v84 = &v159[v161];
LABEL_119:
        while (v50 != v84)
        {
          sub_1C4D95920((uint64_t)v162, v50, (uint64_t)&__src);
          v85 = v50 + 1;
          v50 = v48;
          if (v85 != v48)
          {
            v50 = v85;
            while ((*v50 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              if (++v50 == v48)
              {
                v50 = v48;
                goto LABEL_119;
              }
            }
          }
        }
        v155 = 0;
        v157 = a6;
      }
    }
    else if (sub_1C5879AAC(v157, (uint64_t)v162, (uint64_t)&v159, *(unsigned __int8 **)(a2 + 16), a8))
    {
      v158 = 0;
      v35 = *(unsigned int *)(v156 + 8);
      v153 = v28;
      if ((_DWORD)v35)
      {
        v36 = *(char **)v156;
        v37 = 96 * v35;
        v38 = -*(_QWORD *)v156;
        while (*(_QWORD *)v11 != *(_QWORD *)v36)
        {
          v36 += 96;
          v38 -= 96;
          v37 -= 96;
          if (!v37)
          {
            v39 = 0;
            a5 = v143;
            goto LABEL_107;
          }
        }
        v51 = v37 / 96;
        v151 = 3 * (v37 / 96);
        v181 = 0;
        v180 = 0;
        v182 = 0;
        if (v37)
        {
          v52 = 0;
          do
          {
            sub_1C61B7564((uint64_t)&__src, (uint64_t)&v180, (uint64_t *)&v36[v52]);
            v52 += 96;
          }
          while (96 * (v37 / 96) != v52);
        }
        v53 = v156;
        v54 = *(int8x16_t **)(v156 + 784);
        v55 = *(unsigned int *)(v156 + 792);
        *(_QWORD *)&v164 = &v180;
        if ((_DWORD)v55)
        {
          v56 = 8 * v55;
          v57 = (int8x16_t *)((char *)v54 + 8 * v55);
          while (!sub_1C61B75F0(*(_QWORD *)v164, *(_DWORD *)(v164 + 16), *(_QWORD *)(**(_QWORD **)v54->i64[0] + 8), &__src))
          {
            v54 = (int8x16_t *)((char *)v54 + 8);
            v56 -= 8;
            if (v54 == v57)
            {
              v54 = v57;
              goto LABEL_69;
            }
          }
          while (1)
          {
            v56 -= 8;
            if (!v56)
              break;
            v149 = &v57[-1].i64[1];
            v89 = sub_1C61B75F0(*(_QWORD *)v164, *(_DWORD *)(v164 + 16), *(_QWORD *)(**(_QWORD **)v57[-1].i64[1] + 8), &__src);
            v90 = &v57[-1].i64[1];
            v57 = (int8x16_t *)((char *)v57 - 8);
            if ((v89 & 1) == 0)
            {
              v91 = (v56 >> 3) + 1;
              if (v56 < 17)
              {
                v96 = 0;
                a8 = v142;
                v51 = v37 / 96;
                v93 = 0;
              }
              else
              {
                v92 = 0xFFFFFFFFFFFFFFFLL;
                v147 = (v56 >> 3) + 1;
                if (v91 < 0xFFFFFFFFFFFFFFFLL)
                  v92 = (v56 >> 3) + 1;
                a8 = v142;
                v51 = v37 / 96;
                v93 = v92;
                while (1)
                {
                  v94 = (uint64_t *)operator new(8 * v93, MEMORY[0x1E0DE4E10]);
                  if (v94)
                    break;
                  v95 = v93 > 1;
                  v93 >>= 1;
                  if (!v95)
                  {
                    v96 = 0;
                    v93 = 0;
                    goto LABEL_194;
                  }
                }
                v96 = v94;
LABEL_194:
                v91 = v147;
                v90 = v149;
              }
              v115 = v54;
              v116 = v96;
              v117 = sub_1C587A3B4(v115, v90, (uint64_t **)&v164, v91, v96, v93);
              v118 = v116;
              v54 = (int8x16_t *)v117;
              if (v118)
                operator delete(v118);
              v53 = v156;
              goto LABEL_70;
            }
          }
LABEL_69:
          a8 = v142;
          v53 = v156;
          v51 = v37 / 96;
        }
LABEL_70:
        v144 = *(unsigned int *)(v53 + 792);
        v145 = *(_QWORD *)(v53 + 784);
        v58 = (_QWORD *)operator new();
        v39 = (uint64_t)v58;
        v59 = v58 + 2;
        *v58 = v58 + 2;
        v58[1] = 0x800000000;
        v148 = v54;
        if (v51 < 9)
        {
          v60 = 0;
        }
        else
        {
          sub_1C58782D4((uint64_t)v58, v51);
          v59 = *(_QWORD **)v39;
          v60 = *(_DWORD *)(v39 + 8);
        }
        v146 = v51;
        if (v37)
        {
          v65 = 0;
          v66 = &v59[12 * v60];
          do
          {
            v67 = &v66[v65];
            v68 = &v36[v65 * 8];
            v69 = *(_QWORD *)&v36[v65 * 8];
            *((_BYTE *)v67 + 8) = v36[v65 * 8 + 8];
            *v67 = v69;
            v67[3] = 0x800000000;
            v67[2] = &v66[v65 + 4];
            if (*(_DWORD *)&v36[v65 * 8 + 24])
              llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v66[v65 + 2], (uint64_t)(v68 + 16));
            v65 += 12;
          }
          while (&v36[32 * v151] != v68 + 96);
          v60 = *(_DWORD *)(v39 + 8);
          a8 = v142;
        }
        v70 = (int8x16_t *)(v145 + 8 * v144);
        v71 = (char *)v70 - (char *)v148;
        *(_DWORD *)(v39 + 8) = v60 + v146;
        *(_QWORD *)(v39 + 784) = v39 + 800;
        *(_QWORD *)(v39 + 792) = 0x800000000;
        if ((unint64_t)((char *)v70 - (char *)v148) < 0x41)
        {
          v72 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v39 + 784, v39 + 800, v71 >> 3, 8);
          v72 = *(_DWORD *)(v39 + 792);
        }
        if (v70 != v148)
        {
          memcpy((void *)(*(_QWORD *)(v39 + 784) + 8 * v72), v148, v71);
          v72 = *(_DWORD *)(v39 + 792);
        }
        *(_DWORD *)(v39 + 792) = v72 + ((unint64_t)v71 >> 3);
        *(_QWORD *)(v39 + 864) = 0;
        *(_DWORD *)(v39 + 888) = 0;
        *(_OWORD *)(v39 + 872) = 0u;
        *(_DWORD *)(v39 + 912) = 0;
        *(_OWORD *)(v39 + 896) = 0u;
        *(_QWORD *)(v39 + 920) = v39 + 936;
        *(_QWORD *)(v39 + 928) = 0x800000000;
        *(_DWORD *)(v39 + 1720) = 0;
        *(_OWORD *)(v39 + 1704) = 0u;
        *(_OWORD *)(v39 + 1728) = 0u;
        *(_DWORD *)(v39 + 1744) = 0;
        *(_DWORD *)(v39 + 1768) = 0;
        *(_OWORD *)(v39 + 1752) = 0u;
        v73 = v156;
        v74 = *(char **)v156;
        v75 = *(_QWORD *)v156 + 96 * *(unsigned int *)(v156 + 8);
        if (v36 == (char *)v75)
        {
          a5 = v143;
        }
        else
        {
          a5 = v143;
          do
          {
            v76 = *(void **)(v75 - 80);
            if ((void *)(v75 - 64) != v76)
              free(v76);
            v75 -= 96;
          }
          while ((char *)v75 != v36);
          v73 = v156;
          v74 = *(char **)v156;
        }
        *(_DWORD *)(v73 + 8) = -1431655765 * ((unint64_t)(-(uint64_t)v74 - v38) >> 5);
        *(_DWORD *)(v73 + 792) = ((unint64_t)v148 - *(_QWORD *)(v73 + 784)) >> 3;
        MEMORY[0x1CAA32FB4](v180, 8);
        a6 = v141;
LABEL_107:
        v24 = v150;
      }
      else
      {
        v39 = 0;
      }
      v158 = v39;
      sub_1C5877A0C((uint64_t)&__src, a2 + 216, &v158);
      v77 = v178;
      if (v178 >= (unint64_t)HIDWORD(v178))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, (uint64_t)v179, v178 + 1, 8);
        v77 = v178;
      }
      *((_QWORD *)v177 + v77) = v156;
      LODWORD(v178) = v178 + 1;
      v78 = v175;
      if ((unint64_t)(v175 + 1) > *((_QWORD *)&v175 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v174, &v176, v175 + 1, 1);
        v78 = v175;
      }
      *((_BYTE *)v174 + v78) = v155 & 1;
      *(_QWORD *)&v175 = v175 + 1;
      v79 = sub_1C587A7FC((uint64_t)&v171, (unint64_t)v162);
      v80 = &v171[24 * v172];
      *(_QWORD *)v80 = 0;
      *((_QWORD *)v80 + 1) = 0;
      *((_DWORD *)v80 + 4) = 0;
      sub_1C4DFE328((uint64_t)v80, v79);
      LODWORD(v172) = v172 + 1;
      v81 = v169;
      if (v169 >= (unint64_t)HIDWORD(v169))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, (uint64_t)v170, v169 + 1, 8);
        v81 = v169;
      }
      *((_QWORD *)v168 + v81) = v157;
      LODWORD(v169) = v169 + 1;
      sub_1C4DFE328((uint64_t)v162, (uint64_t)&v159);
      v82 = *(llvm::OptimizationRemarkEmitter **)(a2 + 40);
      v83 = ****(_QWORD ****)v82;
      if (*(_QWORD *)(v83 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v83 + 72) + 48))(*(_QWORD *)(v83 + 72)))
      {
        v86 = **(_QWORD **)v11 & 0xFFFFFFFFFFFFFFF8;
        v87 = *(_QWORD *)(v86 + 40);
        if (v87 == v86 + 40)
        {
          v88 = 0;
        }
        else
        {
          if (v87)
            v97 = v87 - 24;
          else
            v97 = 0;
          if (*(unsigned __int8 *)(v97 + 16) - 29 >= 0xB)
            v88 = 0;
          else
            v88 = v97;
        }
        v98 = *(_QWORD *)(*(_QWORD *)(v88 + 40) + 56);
        llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v164, (const llvm::DebugLoc *)(v88 + 48));
        v99 = *(_QWORD *)(v88 + 40);
        LODWORD(v187) = 10;
        BYTE4(v187) = 2;
        v189 = v164;
        v188 = v98;
        v190 = "chr";
        v191 = "SplitScopeFromPrev";
        v192 = 18;
        v193 = 0;
        v194 = 0;
        v195 = v197;
        v196 = 0x400000000;
        v198 = 0;
        v199 = -1;
        v200 = v99;
        __src = &off_1E814E538;
        *(_QWORD *)&v164 = "Split scope from previous due to unhoistable branch/select ";
        *((_QWORD *)&v164 + 1) = 59;
        sub_1C53B17B4((uint64_t)&v195, (const void **)&v164);
        *(_QWORD *)&v164 = "and/or lack of common condition values";
        *((_QWORD *)&v164 + 1) = 38;
        sub_1C53B17B4((uint64_t)&v195, (const void **)&v164);
        sub_1C61998EC((uint64_t)&v180, (uint64_t)&__src);
        v180 = &off_1E814E538;
        __src = &off_1E814E790;
        v100 = (char *)v195;
        if ((_DWORD)v196)
        {
          v101 = (unint64_t)v196 << 6;
          do
          {
            v102 = (void **)&v100[v101];
            if (v100[v101 - 17] < 0)
              operator delete(*(v102 - 5));
            if (*((char *)v102 - 41) < 0)
              operator delete(*(v102 - 8));
            v101 -= 64;
          }
          while (v101);
          v100 = (char *)v195;
          a6 = v141;
        }
        if (v100 != v197)
          free(v100);
        llvm::OptimizationRemarkEmitter::emit(v82, (llvm::DiagnosticInfoOptimizationBase *)&v180);
        v180 = &off_1E814E790;
        v103 = (char *)v183;
        if (v184)
        {
          v104 = (unint64_t)v184 << 6;
          do
          {
            v105 = (void **)&v103[v104];
            if (v103[v104 - 17] < 0)
              operator delete(*(v105 - 5));
            if (*((char *)v105 - 41) < 0)
              operator delete(*(v105 - 8));
            v104 -= 64;
          }
          while (v104);
          v103 = (char *)v183;
        }
        v24 = v150;
        if (v103 != v185)
          free(v103);
      }
      v155 = 1;
      v156 = v39;
      v157 = v153;
    }
    else
    {
      v45 = &v159[v161];
      if ((_DWORD)v160)
      {
        if (v161)
        {
          v46 = 8 * v161;
          v47 = v159;
          while ((*v47 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            ++v47;
            v46 -= 8;
            if (!v46)
              goto LABEL_49;
          }
        }
        else
        {
          v47 = v159;
        }
      }
      else
      {
LABEL_49:
        v47 = &v159[v161];
      }
      v61 = &v159[v161];
LABEL_74:
      while (v47 != v61)
      {
        sub_1C4D95920((uint64_t)v162, v47, (uint64_t)&__src);
        v62 = v47 + 1;
        v47 = v45;
        if (v62 != v45)
        {
          v47 = v62;
          while ((*v47 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            if (++v47 == v45)
            {
              v47 = v45;
              goto LABEL_74;
            }
          }
        }
      }
    }
LABEL_126:
    MEMORY[0x1CAA32FB4](v159, 8);
    v11 += 96;
  }
  while (v11 != v24);
  v10 = v178;
  if (v178 >= HIDWORD(v178))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v177, (uint64_t)v179, v178 + 1, 8);
    v10 = v178;
  }
  v12 = v155;
  a3 = v156;
LABEL_201:
  *((_QWORD *)v177 + v10) = a3;
  LODWORD(v178) = v178 + 1;
  v119 = v175;
  if ((unint64_t)(v175 + 1) > *((_QWORD *)&v175 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v174, &v176, v175 + 1, 1);
    v119 = v175;
  }
  *((_BYTE *)v174 + v119) = v12 & 1;
  *(_QWORD *)&v175 = v175 + 1;
  v120 = sub_1C587A7FC((uint64_t)&v171, (unint64_t)v162);
  v121 = &v171[24 * v172];
  *(_QWORD *)v121 = 0;
  *((_QWORD *)v121 + 1) = 0;
  *((_DWORD *)v121 + 4) = 0;
  sub_1C4DFE328((uint64_t)v121, v120);
  LODWORD(v172) = v172 + 1;
  v122 = v169;
  if (v169 >= HIDWORD(v169))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, (uint64_t)v170, v169 + 1, 8);
    v122 = v169;
  }
  *((_QWORD *)v168 + v122) = v157;
  LODWORD(v169) = v169 + 1;
  if (!(_DWORD)v178)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 0x800000000;
    goto LABEL_229;
  }
  v123 = 0;
  while (2)
  {
    v124 = *((_QWORD *)v177 + v123);
    v125 = *((_QWORD *)v168 + v123);
    v126 = v171;
    __src = &v188;
    v187 = 0x800000000;
    v159 = 0;
    v160 = 0;
    v161 = 0;
    sub_1C587876C(v124, (uint64_t)&v159);
    v127 = *(unsigned int *)(v124 + 792);
    if ((_DWORD)v127)
    {
      v128 = &v126[24 * v123];
      v129 = *(_QWORD **)(v124 + 784);
      v130 = 8 * v127;
      do
      {
        sub_1C587881C(&v180, a2, *v129, v124, v128, v125, a7, &v159);
        sub_1C618A450((unsigned int *)&__src, v180, (_BYTE *)v180 + 8 * v181);
        if (v180 != &v182)
          free(v180);
        ++v129;
        v130 -= 8;
      }
      while (v130);
    }
    v131 = (void **)(v124 + 784);
    if ((void **)(v124 + 784) != &__src)
    {
      v132 = v187;
      v133 = *(unsigned int *)(v124 + 792);
      if (v133 >= v187)
      {
        if ((_DWORD)v187)
          memmove(*v131, __src, 8 * v187);
      }
      else
      {
        if (*(_DWORD *)(v124 + 796) < v187)
        {
          *(_DWORD *)(v124 + 792) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v124 + 784, v124 + 800, v132, 8);
          goto LABEL_221;
        }
        if ((_DWORD)v133)
          memmove(*v131, __src, 8 * v133);
        else
LABEL_221:
          v133 = 0;
        if (v133 != v187)
          memcpy((char *)*v131 + 8 * v133, (char *)__src + 8 * v133, 8 * v187 - 8 * v133);
      }
      *(_DWORD *)(v124 + 792) = v132;
    }
    MEMORY[0x1CAA32FB4](v159, 8);
    if (__src != &v188)
      free(__src);
    ++v123;
    v134 = v178;
    if (v123 < v178)
      continue;
    break;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x800000000;
  if (v134)
  {
    v136 = 0;
    do
    {
      v137 = *((_QWORD *)v177 + v136);
      if (*((_BYTE *)v174 + v136))
      {
        v138 = *(unsigned int *)(a7 + 8);
        if (v138 >= *(unsigned int *)(a7 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a7, a7 + 16, v138 + 1, 8);
          v138 = *(unsigned int *)(a7 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a7 + 8 * v138) = v137;
        ++*(_DWORD *)(a7 + 8);
        *(_QWORD *)(v137 + 864) = *((_QWORD *)v168 + v136);
      }
      else
      {
        v139 = *(unsigned int *)(a1 + 8);
        if (v139 >= *(unsigned int *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v139 + 1, 8);
          v139 = *(unsigned int *)(a1 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v139) = v137;
        ++*(_DWORD *)(a1 + 8);
      }
      ++v136;
    }
    while (v136 < v178);
  }
LABEL_229:
  sub_1C5879FAC(&v165);
  if (v168 != v170)
    free(v168);
  sub_1C61D47A0(&v171);
  if (v174 != &v176)
    free(v174);
  if (v177 != v179)
    free(v177);
  return MEMORY[0x1CAA32FB4](v162[0], 8);
}

BOOL sub_1C5879AAC(const llvm::Instruction *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t *a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63[2];
  int v64;
  _QWORD *v65;
  _QWORD *v66[2];
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;

  v10 = *(_DWORD *)(a3 + 8);
  v11 = *(unsigned int *)(a3 + 16);
  v12 = *(_QWORD *)a3 + 8 * v11;
  if (v10)
  {
    if ((_DWORD)v11)
    {
      v13 = 8 * v11;
      v14 = *(_QWORD **)a3;
      while ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_6;
      }
    }
    else
    {
      v14 = *(_QWORD **)a3;
    }
  }
  else
  {
LABEL_6:
    v14 = (_QWORD *)(*(_QWORD *)a3 + 8 * v11);
  }
  v15 = *(_QWORD *)a3 + 8 * v11;
  if (v14 != (_QWORD *)v15)
  {
    while (1)
    {
      v16 = (unsigned __int8 *)*v14;
      v67 = 0;
      v68 = 0;
      LODWORD(v69) = 0;
      v17 = sub_1C58784A8(v16, a1, a4, a5, 0, (uint64_t)&v67);
      MEMORY[0x1CAA32FB4](v67, 8);
      if (!v17)
        return 1;
      v18 = v14 + 1;
      v14 = (_QWORD *)v12;
      if (v18 != (_QWORD *)v12)
      {
        v14 = v18;
        while ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v14 == (_QWORD *)v12)
          {
            v14 = (_QWORD *)v12;
            break;
          }
        }
      }
      if (v14 == (_QWORD *)v15)
      {
        v10 = *(_DWORD *)(a3 + 8);
        break;
      }
    }
  }
  if (*(_DWORD *)(a2 + 8))
    v19 = v10 == 0;
  else
    v19 = 1;
  if (v19)
    return 0;
  v68 = 0;
  v69 = 0;
  v66[1] = 0;
  v67 = &v68;
  v65 = v66;
  v66[0] = 0;
  v63[0] = 0;
  v63[1] = 0;
  v64 = 0;
  v21 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v21)
  {
    v30 = 8 * v21;
    v22 = *(_QWORD **)a2;
    while ((*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++v22;
      v30 -= 8;
      if (!v30)
        goto LABEL_41;
    }
  }
  else
  {
    v22 = *(_QWORD **)a2;
  }
  v23 = *(_QWORD *)a2 + 8 * v21;
  if (v22 != (_QWORD *)v23)
  {
    v24 = (uint64_t *)*v22;
LABEL_27:
    v25 = sub_1C587A020(v24, a4, (uint64_t)v63);
    v26 = v25 + 1;
    v27 = (_QWORD *)*v25;
    if ((uint64_t *)*v25 != v25 + 1)
    {
      do
      {
        sub_1C62ABB00(&v67, &v68, v27 + 4, v27 + 4);
        v28 = (uint64_t *)v27[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (uint64_t *)v27[2];
            v19 = *v29 == (_QWORD)v27;
            v27 = v29;
          }
          while (!v19);
        }
        v27 = v29;
      }
      while (v29 != v26);
    }
    while (++v22 != (_QWORD *)v23)
    {
      v24 = (uint64_t *)*v22;
      if ((*v22 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (v22 != (_QWORD *)v23)
          goto LABEL_27;
        break;
      }
    }
    v10 = *(_DWORD *)(a3 + 8);
  }
LABEL_41:
  v31 = *(unsigned int *)(a3 + 16);
  v32 = *(_QWORD *)a3 + 8 * v31;
  if (v10)
  {
    if ((_DWORD)v31)
    {
      v34 = 8 * v31;
      v33 = *(uint64_t ***)a3;
      while (((unint64_t)*v33 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v33;
        v34 -= 8;
        if (!v34)
          goto LABEL_47;
      }
    }
    else
    {
      v33 = *(uint64_t ***)a3;
    }
  }
  else
  {
LABEL_47:
    v33 = (uint64_t **)(*(_QWORD *)a3 + 8 * v31);
  }
  v35 = *(_QWORD *)a3 + 8 * v31;
LABEL_49:
  while (v33 != (uint64_t **)v35)
  {
    v36 = sub_1C587A020(*v33, a4, (uint64_t)v63);
    v37 = v36 + 1;
    v38 = (_QWORD *)*v36;
    if ((uint64_t *)*v36 != v36 + 1)
    {
      do
      {
        sub_1C62ABB00(&v65, v66, v38 + 4, v38 + 4);
        v39 = (uint64_t *)v38[1];
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = (uint64_t *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = (uint64_t *)v38[2];
            v19 = *v40 == (_QWORD)v38;
            v38 = v40;
          }
          while (!v19);
        }
        v38 = v40;
      }
      while (v40 != v37);
    }
    v41 = v33 + 1;
    v33 = (uint64_t **)v32;
    if (v41 != (_QWORD *)v32)
    {
      while ((*v41 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v41 == (_QWORD *)v32)
        {
          v33 = (uint64_t **)v32;
          goto LABEL_49;
        }
      }
      v33 = (uint64_t **)v41;
    }
  }
  v42 = v67;
  v43 = v65;
  if (v67 != &v68 && v65 != v66)
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
    do
    {
      v48 = v42[4];
      v49 = v43[4];
      if (v48 >= v49)
      {
        if (v49 >= v48)
        {
          if (v46 >= v47)
          {
            v53 = (v46 - v45) >> 3;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 61)
              abort();
            if ((v47 - v45) >> 2 > v54)
              v54 = (v47 - v45) >> 2;
            if ((unint64_t)(v47 - v45) >= 0x7FFFFFFFFFFFFFF8)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            if (v55)
            {
              if (v55 >> 61)
                sub_1C4764EE4();
              v56 = (char *)operator new(8 * v55);
              v48 = v42[4];
            }
            else
            {
              v56 = 0;
            }
            v57 = &v56[8 * v53];
            *(_QWORD *)v57 = v48;
            v52 = v57 + 8;
            while (v46 != v45)
            {
              v58 = *((_QWORD *)v46 - 1);
              v46 -= 8;
              *((_QWORD *)v57 - 1) = v58;
              v57 -= 8;
            }
            v47 = &v56[8 * v55];
            if (v45)
              operator delete(v45);
            v45 = v57;
          }
          else
          {
            *(_QWORD *)v46 = v48;
            v52 = v46 + 8;
          }
          v59 = (_QWORD *)v42[1];
          if (v59)
          {
            do
            {
              v42 = v59;
              v59 = (_QWORD *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              v60 = v42;
              v42 = (_QWORD *)v42[2];
            }
            while ((_QWORD *)*v42 != v60);
          }
          v46 = v52;
        }
        v61 = (_QWORD *)v43[1];
        if (v61)
        {
          do
          {
            v43 = v61;
            v61 = (_QWORD *)*v61;
          }
          while (v61);
        }
        else
        {
          do
          {
            v62 = v43;
            v43 = (_QWORD *)v43[2];
          }
          while ((_QWORD *)*v43 != v62);
        }
      }
      else
      {
        v50 = (_QWORD *)v42[1];
        if (v50)
        {
          do
          {
            v42 = v50;
            v50 = (_QWORD *)*v50;
          }
          while (v50);
        }
        else
        {
          do
          {
            v51 = v42;
            v42 = (_QWORD *)v42[2];
          }
          while ((_QWORD *)*v42 != v51);
        }
      }
    }
    while (v43 != v66 && v42 != &v68);
    if (v45)
      operator delete(v45);
    sub_1C51D7534(v63);
    sub_1C47655E8((uint64_t)&v65, v66[0]);
    sub_1C47655E8((uint64_t)&v67, v68);
    return v45 == v46;
  }
  sub_1C51D7534(v63);
  sub_1C47655E8((uint64_t)&v65, v66[0]);
  sub_1C47655E8((uint64_t)&v67, v68);
  return 1;
}

char **sub_1C5879FAC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 96 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 80];
      if (&v2[v4 - 64] != v5)
        free(v5);
      v4 -= 96;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t *sub_1C587A020(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30[3];
  uint64_t **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;

  v5 = a1;
  v34 = a1;
  v31 = (uint64_t **)a1;
  v26 = 0;
  if (!sub_1C61805E8((uint64_t *)a3, &v31, &v26)
    || v26 == (uint64_t *)(*(_QWORD *)a3 + 32 * *(unsigned int *)(a3 + 16)))
  {
    v32 = 0;
    v33 = 0;
    v31 = &v32;
    v8 = *((unsigned __int8 *)v5 + 16);
    if (v5 && v8 >= 0x1C)
    {
      if ((sub_1C587871C((uint64_t)v5, a2) & 1) != 0)
      {
        v9 = *((_DWORD *)v5 + 5);
        if ((v9 & 0x40000000) != 0)
        {
          v11 = (uint64_t *)*(v5 - 1);
          v10 = v9 & 0x7FFFFFF;
        }
        else
        {
          v10 = v9 & 0x7FFFFFF;
          v11 = &v5[-4 * v10];
        }
        if (v10)
        {
          v19 = &v11[4 * v10];
          do
          {
            v20 = (_QWORD *)sub_1C587A020(*v11, a2, a3);
            v21 = v20 + 1;
            v22 = (_QWORD *)*v20;
            if ((_QWORD *)*v20 != v20 + 1)
            {
              do
              {
                sub_1C62ABB00(&v31, &v32, v22 + 4, v22 + 4);
                v23 = (_QWORD *)v22[1];
                if (v23)
                {
                  do
                  {
                    v24 = v23;
                    v23 = (_QWORD *)*v23;
                  }
                  while (v23);
                }
                else
                {
                  do
                  {
                    v24 = (_QWORD *)v22[2];
                    v25 = *v24 == (_QWORD)v22;
                    v22 = v24;
                  }
                  while (!v25);
                }
                v22 = v24;
              }
              while (v24 != v21);
            }
            v11 += 4;
          }
          while (v11 != v19);
          v5 = v34;
        }
        v26 = v5;
        v27 = (uint64_t *)v31;
        v28 = v32;
        v29 = v33;
        if (!v33)
        {
          v27 = (uint64_t *)&v28;
          goto LABEL_45;
        }
        v32[2] = (uint64_t)&v28;
LABEL_44:
        v31 = &v32;
        v32 = 0;
        v33 = 0;
        goto LABEL_45;
      }
      v12 = v32;
      v13 = &v32;
      v14 = &v32;
      if (v32)
      {
        v15 = v32;
        while (1)
        {
          while (1)
          {
            v14 = (uint64_t **)v15;
            v16 = v15[4];
            if (v16 <= (unint64_t)v5)
              break;
            v15 = *v14;
            v13 = v14;
            if (!*v14)
              goto LABEL_21;
          }
          if (v16 >= (unint64_t)v5)
            break;
          v15 = v14[1];
          if (!v15)
          {
            v13 = v14 + 1;
            goto LABEL_21;
          }
        }
        v18 = v33;
      }
      else
      {
LABEL_21:
        v17 = (uint64_t *)operator new(0x28uLL);
        v17[4] = (uint64_t)v5;
        *v17 = 0;
        v17[1] = 0;
        v17[2] = (uint64_t)v14;
        *v13 = v17;
        if (*v31)
        {
          v31 = (uint64_t **)*v31;
          v17 = *v13;
        }
        sub_1C4768E74(v32, v17);
        v12 = v32;
        v18 = ++v33;
      }
      v26 = v5;
      v27 = (uint64_t *)v31;
      v28 = v12;
      v29 = v18;
      if (v18)
      {
        v12[2] = (uint64_t)&v28;
        goto LABEL_44;
      }
      v27 = (uint64_t *)&v28;
    }
    else
    {
      if (v8 == 21)
      {
        sub_1C47BC21C((uint64_t **)&v31, (unint64_t *)&v34, &v34);
        v26 = v34;
        v27 = (uint64_t *)v31;
        v28 = v32;
        v29 = v33;
        if (v33)
        {
          v32[2] = (uint64_t)&v28;
          goto LABEL_44;
        }
      }
      else
      {
        v28 = 0;
        v29 = 0;
        v26 = v5;
      }
      v27 = (uint64_t *)&v28;
    }
LABEL_45:
    sub_1C62AB868((uint64_t)v30, a3, &v26, &v27);
    v6 = v30[0] + 8;
    sub_1C47655E8((uint64_t)&v27, v28);
    sub_1C47655E8((uint64_t)&v31, v32);
    return (uint64_t *)v6;
  }
  return v26 + 1;
}

_QWORD *sub_1C587A2FC(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62ABA08(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

char *sub_1C587A3B4(int8x16_t *a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  int8x16_t *v7;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;

  v6 = a2;
  v7 = a1;
  if (a4 == 2)
  {
    v16 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_12:
    *v6 = v16;
    return (char *)v6;
  }
  if (a4 == 3)
  {
    if ((sub_1C61B75F0(**a3, *((_DWORD *)*a3 + 4), *(_QWORD *)(**(_QWORD **)a1->i64[1] + 8), &v34) & 1) != 0)
    {
      v19 = v7->i64[1];
      v7->i64[1] = *v6;
      *v6 = v19;
      *v7 = vextq_s8(*v7, *v7, 8uLL);
      return &v7->i8[8];
    }
    v16 = v7->i64[0];
    v7->i64[0] = v7->i64[1];
    v7->i64[1] = v16;
    v7->i64[1] = *v6;
    goto LABEL_12;
  }
  if (a6 >= a4)
  {
    v12 = &a1->i64[1];
    *a5 = a1->i64[0];
    v13 = a5 + 1;
    if (&a1->u64[1] == (unint64_t *)a2)
    {
      a1->i64[0] = *a2;
    }
    else
    {
      do
      {
        v14 = sub_1C61B75F0(**a3, *((_DWORD *)*a3 + 4), *(_QWORD *)(**(_QWORD **)*v12 + 8), &v34);
        v15 = *v12;
        if ((v14 & 1) != 0)
        {
          *v13++ = v15;
        }
        else
        {
          v7->i64[0] = v15;
          v7 = (int8x16_t *)((char *)v7 + 8);
        }
        ++v12;
      }
      while (v12 != v6);
      v7->i64[0] = *v6;
      v6 = &v7->i64[1];
      if (v13 <= a5)
        return (char *)v6;
    }
    v17 = 0;
    do
    {
      v6[v17] = a5[v17];
      ++v17;
    }
    while (&a5[v17] < v13);
    return (char *)v6;
  }
  if (a4 >= 0)
    v20 = a4;
  else
    v20 = a4 + 1;
  v21 = v20 >> 1;
  v22 = &a1->i8[8 * (v20 >> 1)];
  v23 = v22 - 8;
  if (sub_1C61B75F0(**a3, *((_DWORD *)*a3 + 4), *(_QWORD *)(***((_QWORD ***)v22 - 1) + 8), &v34))
  {
    v24 = 8 - 8 * v21;
    v25 = v21;
    while (v24)
    {
      v26 = v25 - 1;
      v27 = sub_1C61B75F0(**a3, *((_DWORD *)*a3 + 4), *(_QWORD *)(**(_QWORD **)v7[-1].i64[v25] + 8), &v34);
      v24 += 8;
      v25 = v26;
      if ((v27 & 1) == 0)
      {
        v23 = &v7->i8[-v24];
        goto LABEL_29;
      }
    }
    v28 = (char *)v7;
  }
  else
  {
    v26 = v21;
LABEL_29:
    v28 = (char *)sub_1C587A3B4(v7, v23, a3, v26, a5, a6);
  }
  v29 = a4 - v21;
  if ((sub_1C61B75F0(**a3, *((_DWORD *)*a3 + 4), *(_QWORD *)(**(_QWORD **)v7->i64[v21] + 8), &v34) & 1) != 0)
  {
    v30 = v22;
LABEL_33:
    v31 = (char *)sub_1C587A3B4(v30, v6, a3, v29, a5, a6);
  }
  else
  {
    v31 = (char *)(v6 + 1);
    v32 = &v7->i64[v21 + 1];
    while (v32 != v6)
    {
      --v29;
      v33 = *v32++;
      if (sub_1C61B75F0(**a3, *((_DWORD *)*a3 + 4), *(_QWORD *)(**(_QWORD **)v33 + 8), &v34))
      {
        v30 = (char *)(v32 - 1);
        goto LABEL_33;
      }
    }
  }
  return sub_1C587A69C(v28, v22, v31);
}

char *sub_1C587A69C(char *__src, char *a2, char *a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  int64_t v12;
  char *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  BOOL v25;
  char v26;
  uint64_t v27;

  v3 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      v11 = *(_QWORD *)__src;
      v12 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v3 = &__src[v12];
      *(_QWORD *)v3 = v11;
    }
    else if (a2 + 8 == a3)
    {
      v13 = a3 - 8;
      v14 = *((_QWORD *)a3 - 1);
      v3 = __src + 8;
      v15 = a3 - 8 - __src;
      if (v13 != __src)
        memmove(__src + 8, __src, v15);
      *(_QWORD *)__src = v14;
    }
    else
    {
      v5 = (a2 - __src) >> 3;
      if (v5 == (a3 - a2) >> 3)
      {
        v6 = 0;
        do
        {
          v7 = *(_QWORD *)&__src[v6];
          *(_QWORD *)&__src[v6] = *(_QWORD *)&a2[v6];
          v8 = &__src[v6 + 8];
          *(_QWORD *)&a2[v6] = v7;
          v9 = (uint64_t)&a2[v6 + 8];
          v6 += 8;
        }
        while (v8 != a2 && v9 != (_QWORD)a3);
        return a2;
      }
      else
      {
        v16 = (a3 - a2) >> 3;
        v17 = (a2 - __src) >> 3;
        do
        {
          v18 = v17;
          v17 = v16;
          v16 = v18 % v16;
        }
        while (v16);
        if (v17)
        {
          v19 = &__src[8 * v17];
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            v20 = v21;
            v22 = &v19[8 * v5];
            v23 = v19;
            do
            {
              v24 = v23;
              v23 = v22;
              *(_QWORD *)v24 = *(_QWORD *)v22;
              v25 = __OFSUB__(v5, (a3 - v22) >> 3);
              v27 = v5 - ((a3 - v22) >> 3);
              v26 = (v27 < 0) ^ v25;
              v22 = &__src[8 * v27];
              if (v26)
                v22 = &v23[8 * v5];
            }
            while (v22 != v19);
            *(_QWORD *)v23 = v20;
          }
          while (v19 != __src);
        }
        return &__src[8 * ((a3 - a2) >> 3)];
      }
    }
  }
  return v3;
}

unint64_t sub_1C587A7FC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 24 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C62ABBAC(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C62ABBAC(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C587A864(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];

  v5 = result;
  v6 = *((_DWORD *)a2 + 2);
  if (v6)
  {
    v7 = *a2;
    v8 = *a2 + 96 * v6;
    v25 = a3 + 872;
    do
    {
      if (*(_BYTE *)(v7 + 8))
      {
        v16 = *(_QWORD *)v7;
        v26 = v16;
        v27[0] = 0;
        if (sub_1C61B75F0(*(_QWORD *)(v5 + 72), *(_DWORD *)(v5 + 88), v16, v27))
        {
          v17 = v27[0];
          v18 = *(_QWORD *)(v5 + 72);
          v19 = *(unsigned int *)(v5 + 88);
        }
        else
        {
          v18 = *(_QWORD *)(v5 + 72);
          v19 = *(unsigned int *)(v5 + 88);
          v17 = v18 + 8 * v19;
        }
        if (v17 == v18 + 8 * v19)
        {
          v27[0] = 0;
          sub_1C61B75F0(*(_QWORD *)(v5 + 96), *(_DWORD *)(v5 + 112), v16, v27);
          v20 = a3 + 896;
        }
        else
        {
          v20 = v25;
        }
        result = sub_1C61B7564((uint64_t)v27, v20, &v26);
      }
      v9 = *(unsigned int *)(v7 + 24);
      if ((_DWORD)v9)
      {
        v10 = *(uint64_t **)(v7 + 16);
        v11 = 8 * v9;
        do
        {
          v26 = 0;
          v26 = *v10;
          v27[0] = 0;
          if (sub_1C61B75F0(*(_QWORD *)(v5 + 120), *(_DWORD *)(v5 + 136), v26, v27))
          {
            v12 = v27[0];
            v13 = *(_QWORD *)(v5 + 120);
            v14 = *(unsigned int *)(v5 + 136);
          }
          else
          {
            v13 = *(_QWORD *)(v5 + 120);
            v14 = *(unsigned int *)(v5 + 136);
            v12 = v13 + 8 * v14;
          }
          if (v12 == v13 + 8 * v14)
          {
            v27[0] = 0;
            sub_1C61B75F0(*(_QWORD *)(v5 + 144), *(_DWORD *)(v5 + 160), v26, v27);
            v15 = a3 + 1728;
          }
          else
          {
            v15 = a3 + 1704;
          }
          result = sub_1C62AB604(v15, &v26, (uint64_t)v27);
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
      v7 += 96;
    }
    while (v7 != v8);
  }
  v21 = *((unsigned int *)a2 + 198);
  if ((_DWORD)v21)
  {
    v22 = (uint64_t *)a2[98];
    v23 = 8 * v21;
    do
    {
      v24 = *v22++;
      result = sub_1C587A864(v5, v24, a3);
      v23 -= 8;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1C587AA40(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  const llvm::Instruction *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  uint64_t v34[2];
  int v35;
  _QWORD v36[2];
  int v37;

  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v6 = *((_DWORD *)a2 + 2);
  if (v6)
  {
    v7 = *a2;
    v8 = *a2 + 96 * v6;
    do
    {
      v9 = *(unsigned int *)(v7 + 24);
      if ((_DWORD)v9)
      {
        v10 = *(uint64_t **)(v7 + 16);
        v11 = 8 * v9;
        do
        {
          v12 = *v10++;
          v30 = v12;
          sub_1C627F8FC((uint64_t)v34, &v30, (uint64_t)v36);
          v11 -= 8;
        }
        while (v11);
      }
      v7 += 96;
    }
    while (v7 != v8);
    v13 = *((_DWORD *)a2 + 2);
    if (v13)
    {
      v14 = *a2;
      v15 = *(const llvm::Instruction **)(a3 + 864);
      v16 = *a2 + 96 * v13;
      while (1)
      {
        v17 = *(_QWORD **)v14;
        v33 = *(_QWORD **)v14;
        v37 = 0;
        v36[0] = 0;
        v36[1] = 0;
        if (*(_BYTE *)(v14 + 8))
          break;
        v18 = *(unsigned int *)(v14 + 24);
        if ((_DWORD)v18)
          goto LABEL_19;
LABEL_11:
        MEMORY[0x1CAA32FB4](v36[0], 8);
        v14 += 96;
        if (v14 == v16)
          goto LABEL_23;
      }
      v19 = *(_QWORD *)((*v17 & 0xFFFFFFFFFFFFFFF8) + 40);
      if (v19)
        v20 = v19 - 24;
      else
        v20 = 0;
      if (*(unsigned __int8 *)(v20 + 16) - 29 >= 0xB)
        v20 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      sub_1C58784A8(*(unsigned __int8 **)(v20 - 96), v15, *(unsigned __int8 **)(a1 + 16), v34, (uint64_t)v36, (uint64_t)&v30);
      MEMORY[0x1CAA32FB4](v30, 8);
      v18 = *(unsigned int *)(v14 + 24);
      if ((_DWORD)v18)
      {
LABEL_19:
        v21 = *(uint64_t **)(v14 + 16);
        v22 = &v21[v18];
        do
        {
          v23 = *v21++;
          v30 = 0;
          v31 = 0;
          v32 = 0;
          sub_1C58784A8(*(unsigned __int8 **)(v23 - 96), v15, *(unsigned __int8 **)(a1 + 16), v34, (uint64_t)v36, (uint64_t)&v30);
          MEMORY[0x1CAA32FB4](v30, 8);
        }
        while (v21 != v22);
      }
      sub_1C5878214(a3 + 920, (uint64_t *)v14);
      v24 = sub_1C62ABC18(a3 + 1752, (uint64_t *)&v33) + 1;
      if (v36 != v24)
        sub_1C4DFE328((uint64_t)v24, (uint64_t)v36);
      goto LABEL_11;
    }
  }
LABEL_23:
  v25 = *((unsigned int *)a2 + 198);
  if ((_DWORD)v25)
  {
    v26 = (uint64_t *)a2[98];
    v27 = 8 * v25;
    do
    {
      v28 = *v26++;
      sub_1C587AA40(a1, v28, a3);
      v27 -= 8;
    }
    while (v27);
  }
  return MEMORY[0x1CAA32FB4](v34[0], 8);
}

_QWORD *sub_1C587AC50(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62ABD34(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1C587AD08(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  v2 = **a1;
  v3 = -1;
  do
  {
    v2 = *(_QWORD *)(v2 + 8);
    ++v3;
  }
  while (v2);
  v4 = **a2;
  v5 = -1;
  do
  {
    v4 = *(_QWORD *)(v4 + 8);
    ++v5;
  }
  while (v4);
  return v3 < v5;
}

uint64_t sub_1C587AD44(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  if (a4 >= 2)
  {
    v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      result = (*a3)(*(a2 - 1), *(_QWORD *)result);
      if ((_DWORD)result)
      {
        v9 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v20 = (char *)a5;
      v21 = a4 >> 1;
      v22 = (uint64_t *)(result + 8 * (a4 >> 1));
      v23 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C587AF8C((uint64_t *)result, v22, a3, v23, a5);
        v24 = (uint64_t *)&v20[8 * v21];
        result = (uint64_t)sub_1C587AF8C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v24);
        v25 = &v20[8 * a4];
        v26 = v24;
        while (v26 != (uint64_t *)v25)
        {
          result = (*a3)(*v26, *(_QWORD *)v20);
          if ((_DWORD)result)
            v27 = (char *)v26;
          else
            v27 = v20;
          v20 += 8 * (result ^ 1);
          v26 += result;
          *v8++ = *(_QWORD *)v27;
          if (v20 == (char *)v24)
          {
            if (v26 != (uint64_t *)v25)
            {
              v28 = 0;
              do
              {
                v8[v28] = v26[v28];
                ++v28;
              }
              while (&v26[v28] != (uint64_t *)v25);
            }
            return result;
          }
        }
        if (v20 != (char *)v24)
        {
          v29 = 0;
          do
          {
            v8[v29] = *(_QWORD *)&v20[v29 * 8];
            ++v29;
          }
          while (&v20[v29 * 8] != (char *)v24);
        }
      }
      else
      {
        sub_1C587AD44(result, v22, a3, v23, a5, a6);
        sub_1C587AD44(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v20, a6);
        return sub_1C587B180((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, (unsigned int (**)(_QWORD, uint64_t))a3, a4 >> 1, a4 - (a4 >> 1), v20, a6);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v11 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = (uint64_t *)result;
        do
        {
          v15 = *v13;
          v14 = v13[1];
          v13 = v11;
          result = (*a3)(v14, v15);
          if ((_DWORD)result)
          {
            v16 = *v13;
            v17 = v12;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v17 + 8) = *(uint64_t *)((char *)v8 + v17);
              if (!v17)
                break;
              result = (*a3)(v16, *(uint64_t *)((char *)v8 + v17 - 8));
              v17 -= 8;
              if ((result & 1) == 0)
              {
                v18 = (uint64_t *)((char *)v8 + v17 + 8);
                goto LABEL_15;
              }
            }
            v18 = v8;
LABEL_15:
            *v18 = v16;
          }
          v11 = v13 + 1;
          v12 += 8;
        }
        while (v13 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *sub_1C587AF8C(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      result = (uint64_t *)(*a3)(*(a2 - 1), *result);
      if ((_DWORD)result)
        v11 = v10;
      else
        v11 = v7;
      *v5++ = *v11;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v20 = &result[a4 >> 1];
      sub_1C587AD44(result, v20, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)sub_1C587AD44(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v21 = &v7[a4 >> 1];
      while (v21 != a2)
      {
        result = (uint64_t *)(*a3)(*v21, *v7);
        if ((_DWORD)result)
          v22 = v21;
        else
          v22 = v7;
        v21 += result;
        v7 += result ^ 1;
        *v5++ = *v22;
        if (v7 == v20)
        {
          if (v21 != a2)
          {
            v23 = 0;
            do
            {
              v5[v23] = v21[v23];
              ++v23;
            }
            while (&v21[v23] != a2);
          }
          return result;
        }
      }
      if (v7 != v20)
      {
        v24 = 0;
        do
        {
          v5[v24] = v7[v24];
          ++v24;
        }
        while (&v7[v24] != v20);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = v14;
          v16 = *v14++;
          result = (uint64_t *)(*a3)(*v12, v16);
          v17 = v14;
          if ((_DWORD)result)
          {
            v15[1] = *v15;
            v17 = v5;
            if (v15 != v5)
            {
              v18 = v13;
              while (1)
              {
                v17 = (uint64_t *)((char *)v5 + v18);
                result = (uint64_t *)(*a3)(*v12, *(uint64_t *)((char *)v5 + v18 - 8));
                if (!(_DWORD)result)
                  break;
                *v17 = *(v17 - 1);
                v18 -= 8;
                if (!v18)
                {
                  v17 = v5;
                  break;
                }
              }
            }
          }
          v19 = *v12++;
          *v17 = v19;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C587B180(uint64_t result, char *a2, char *a3, unsigned int (**a4)(_QWORD, uint64_t), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unsigned int (**v21)(_QWORD, uint64_t);
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unsigned int (*v27)(uint64_t, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *__src;
  uint64_t v47;

  if (!a6)
    return result;
  v10 = a6;
  v15 = (char *)result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*(_QWORD *)a2, *(_QWORD *)v15);
      if ((result & 1) != 0)
        break;
      v15 += 8;
      if (!--a5)
        return result;
    }
    v45 = a3;
    __src = a7;
    v47 = v10;
    if (a5 < v10)
    {
      if (v10 >= 0)
        v16 = v10;
      else
        v16 = v10 + 1;
      v17 = v16 >> 1;
      v18 = &a2[8 * (v16 >> 1)];
      v19 = (a2 - v15) >> 3;
      if (a2 == v15)
      {
        v20 = a2;
        goto LABEL_35;
      }
      v44 = a8;
      v20 = v15;
      v21 = a4;
      do
      {
        v22 = &v20[8 * (v19 >> 1)];
        v24 = *(_QWORD *)v22;
        v23 = v22 + 8;
        if ((*v21)(*(_QWORD *)v18, v24))
        {
          v19 >>= 1;
        }
        else
        {
          v20 = v23;
          v19 += ~(v19 >> 1);
        }
      }
      while (v19);
      v19 = (v20 - v15) >> 3;
      a4 = v21;
      goto LABEL_33;
    }
    if (a5 == 1)
    {
      v42 = *(_QWORD *)v15;
      *(_QWORD *)v15 = *(_QWORD *)a2;
      *(_QWORD *)a2 = v42;
      return result;
    }
    if (a5 >= 0)
      v25 = a5;
    else
      v25 = a5 + 1;
    v19 = v25 >> 1;
    v20 = &v15[8 * (v25 >> 1)];
    v26 = a3 == a2;
    v18 = a3;
    v17 = (a3 - a2) >> 3;
    if (!v26)
    {
      v44 = a8;
      v27 = *a4;
      v18 = a2;
      do
      {
        v28 = &v18[8 * (v17 >> 1)];
        v30 = *(_QWORD *)v28;
        v29 = v28 + 8;
        v31 = v27(v30, *(_QWORD *)v20);
        if (v31)
          v17 += ~(v17 >> 1);
        else
          v17 >>= 1;
        if (v31)
          v18 = v29;
      }
      while (v17);
      v17 = (v18 - a2) >> 3;
LABEL_33:
      a8 = v44;
    }
LABEL_35:
    a5 -= v19;
    v32 = v47 - v17;
    v33 = sub_1C587A69C(v20, a2, v18);
    v34 = v33;
    if ((uint64_t)(v19 + v17) >= (uint64_t)(a5 + v47 - v17))
    {
      a7 = __src;
      result = sub_1C587B180(v33, v18, v45, a4, a5, v47 - v17, __src, a8);
      v18 = v20;
      v10 = v17;
      a5 = v19;
      a3 = v34;
    }
    else
    {
      result = sub_1C587B180(v15, v20, v33, a4, v19, v17, __src, a8);
      v15 = v34;
      a3 = v45;
      v10 = v32;
      a7 = __src;
    }
    a2 = v18;
    if (!v10)
      return result;
  }
  if (a5 <= v10)
  {
    if (v15 != a2)
    {
      v39 = 0;
      do
      {
        *(_QWORD *)&a7[v39] = *(_QWORD *)&v15[v39];
        v39 += 8;
      }
      while (&v15[v39] != a2);
      if (v39)
      {
        v40 = a7;
        while (a2 != a3)
        {
          result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*(_QWORD *)a2, *(_QWORD *)v40);
          if ((_DWORD)result)
            v41 = a2;
          else
            v41 = v40;
          v40 += 8 * (result ^ 1);
          a2 += 8 * result;
          *(_QWORD *)v15 = *(_QWORD *)v41;
          v15 += 8;
          if (&a7[v39] == v40)
            return result;
        }
        return (uint64_t)memmove(v15, v40, a7 - v40 + v39);
      }
    }
  }
  else if (a2 != a3)
  {
    v35 = 0;
    do
    {
      *(_QWORD *)&a7[v35] = *(_QWORD *)&a2[v35];
      v35 += 8;
    }
    while (&a2[v35] != a3);
    if (v35)
    {
      v36 = &a7[v35];
      v37 = a3 - 8;
      while (a2 != v15)
      {
        result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*((_QWORD *)v36 - 1), *((_QWORD *)a2 - 1));
        if ((_DWORD)result)
          v38 = a2;
        else
          v38 = v36;
        if ((_DWORD)result)
          a2 -= 8;
        else
          v36 -= 8;
        *(_QWORD *)v37 = *((_QWORD *)v38 - 1);
        v37 -= 8;
        if (v36 == a7)
          return result;
      }
      if (v36 != a7)
      {
        v43 = 0;
        do
        {
          *(_QWORD *)&v37[v43] = *(_QWORD *)&v36[v43 - 8];
          v43 -= 8;
        }
        while (&v36[v43] != a7);
      }
    }
  }
  return result;
}

uint64_t sub_1C587B528(unsigned __int8 *a1, const llvm::Instruction *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, llvm::DominatorTree *a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Instruction *v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Instruction *v26;
  uint64_t v27;
  _QWORD v28[3];

  v28[0] = 0;
  result = sub_1C614ECAC(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), a3, v28);
  v15 = v28[0];
  v16 = *(_QWORD *)a4;
  v17 = *(unsigned int *)(a4 + 16);
  if (a1[16] <= 0x1Bu)
    v18 = 0;
  else
    v18 = (llvm::Instruction *)a1;
  v26 = v18;
  if (v18)
    v19 = v18 == a2;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = v16 + 32 * v17;
    if (!(_DWORD)result)
      v15 = v20;
    v27 = 0;
    v28[0] = v18;
    result = sub_1C61DB414((uint64_t *)(v15 + 8), v28, &v27);
    if ((result & 1) == 0)
    {
      if (!v26
        || *((_BYTE *)v26 + 16) != 83
        || (result = sub_1C61B75F0(*(_QWORD *)a6, *(_DWORD *)(a6 + 16), (uint64_t)v26, v28), (result & 1) == 0))
      {
        v27 = 0;
        v28[0] = v26;
        result = sub_1C61DB414(a5, v28, &v27);
        if ((result & 1) == 0)
        {
          result = llvm::DominatorTree::dominates(a7, v26, a2);
          if ((result & 1) == 0)
          {
            v21 = *((_DWORD *)v26 + 5);
            if ((v21 & 0x40000000) != 0)
            {
              v23 = (uint64_t *)*((_QWORD *)v26 - 1);
              v22 = v21 & 0x7FFFFFF;
            }
            else
            {
              v22 = v21 & 0x7FFFFFF;
              v23 = (uint64_t *)((char *)v26 - 32 * v22);
            }
            if (v22)
            {
              v24 = 32 * v22;
              do
              {
                v25 = *v23;
                v23 += 4;
                sub_1C587B528(v25, a2, a3, a4, a5, a6, a7);
                v24 -= 32;
              }
              while (v24);
            }
            llvm::Instruction::moveBefore(v26, a2);
            return sub_1C61DB390((uint64_t)a5, &v26, (uint64_t)v28);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C587B6AC(uint64_t ****a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  BOOL v18;
  llvm::Instruction *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  llvm::ValueHandleBase *v31;
  unsigned __int8 *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t result;
  llvm::ConstantInt *v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  unsigned int v40;
  __int16 v41;
  llvm::Instruction *v42;

  if (a2)
    goto LABEL_38;
  if (!a3 || *(_BYTE *)(a3 + 16) != 81)
    goto LABEL_35;
  v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
LABEL_37:
    *(_WORD *)(a3 + 18) = word_1C8661FF0[*(_WORD *)(a3 + 18) & 0x3FLL] | *(_WORD *)(a3 + 18) & 0xFFC0;
LABEL_38:
    v33 = (_QWORD *)*a7;
    v41 = 257;
    v34 = (uint64_t)a6;
    v32 = (unsigned __int8 *)a3;
    goto LABEL_39;
  }
  v13 = *(_QWORD *)(a3 + 8);
  while (1)
  {
    v14 = *(_QWORD *)(v13 + 24);
    if ((unsigned __int8 *)v14 != a4)
    {
      v15 = *(unsigned __int8 *)(v14 + 16);
      if (v15 == 85)
      {
        if (*(_QWORD *)(v14 - 96) != a3)
          break;
        goto LABEL_12;
      }
      if (v15 != 30 || (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) != 3)
        break;
    }
LABEL_12:
    v13 = *(_QWORD *)(v13 + 8);
    if (!v13)
    {
      while (1)
      {
        v16 = *(unsigned __int8 **)(v10 + 24);
        if (v16 != a4)
        {
          v17 = v16[16];
          if (v16)
            v18 = v17 == 30;
          else
            v18 = 0;
          if (v18)
          {
            llvm::BranchInst::swapSuccessors((llvm::Instruction *)v16);
          }
          else
          {
            if (v17 == 85)
              v19 = *(llvm::Instruction **)(v10 + 24);
            else
              v19 = 0;
            v42 = v19;
            if (!v19)
              goto LABEL_31;
            v20 = *((_QWORD *)v19 - 8);
            v21 = *((_QWORD *)v19 - 4);
            if (v20 != v21)
            {
              v22 = (char *)v19 - 24;
              v23 = *((_QWORD *)v19 - 3);
              *((_QWORD *)v19 - 8) = v21;
              *((_QWORD *)v19 - 4) = v20;
              v24 = *(_OWORD *)((char *)v19 - 56);
              v25 = (_QWORD *)*((_QWORD *)v19 - 2);
              *((_QWORD *)v19 - 7) = v23;
              *((_QWORD *)v19 - 6) = v25;
              *(_OWORD *)((char *)v19 - 24) = v24;
              *v25 = (char *)v19 - 64;
              v26 = *((_QWORD *)v19 - 7);
              if (v26)
                *(_QWORD *)(v26 + 16) = (char *)v19 - 56;
              **((_QWORD **)v19 - 2) = (char *)v19 - 32;
              v27 = *((_QWORD *)v19 - 3);
              if (v27)
                *(_QWORD *)(v27 + 16) = v22;
            }
            llvm::Instruction::swapProfMetadata(v42);
            if (sub_1C61B75F0(*(_QWORD *)(a5 + 1704), *(_DWORD *)(a5 + 1720), (uint64_t)v42, &v39))
            {
              v28 = a5 + 1728;
            }
            else
            {
              if (!sub_1C61B75F0(*(_QWORD *)(a5 + 1728), *(_DWORD *)(a5 + 1744), (uint64_t)v42, &v39))
                goto LABEL_31;
              v28 = a5 + 1704;
            }
            sub_1C62AB604(v28, &v42, (uint64_t)&v39);
          }
        }
LABEL_31:
        v10 = *(_QWORD *)(v10 + 8);
        if (!v10)
          goto LABEL_37;
      }
    }
  }
LABEL_35:
  v29 = ***a1;
  v30 = *v29;
  v31 = *(llvm::ValueHandleBase **)(*v29 + 1560);
  if (!v31)
  {
    v36 = *(llvm::ConstantInt **)(v30 + 1888);
    v37 = *(_DWORD *)(v30 + 1896);
    v40 = v37 >> 8;
    if (v37 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v39, 1, 0);
    }
    else
    {
      if (v37 <= 0xFF)
        v38 = 0;
      else
        v38 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v37);
      v39 = v38 & 1;
    }
    v31 = llvm::ConstantInt::get(v36, (llvm::LLVMContext *)&v39, (const llvm::APInt *)a3);
    if (v40 >= 0x41 && v39)
      MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
    *(_QWORD *)(v30 + 1560) = v31;
  }
  v41 = 257;
  v32 = sub_1C506EC1C(a6, v31, a3, (uint64_t)&v39);
  v33 = (_QWORD *)*a7;
  v41 = 257;
  v34 = (uint64_t)a6;
LABEL_39:
  result = sub_1C4D89BCC(v34, v33, (uint64_t)v32, (uint64_t)&v39);
  *a7 = result;
  return result;
}

__n128 sub_1C587B988(uint64_t **a1, _WORD *a2, __n128 *a3)
{
  uint64_t *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED8123C0, "chr-bias-threshold", 0x12uLL);
  v6 = *a1;
  *(_QWORD *)&xmmword_1ED812440 = **a1;
  byte_1ED812458 = 1;
  qword_1ED812450 = *v6;
  word_1ED8123CA = (32 * (*a2 & 3)) | word_1ED8123CA & 0xFF9F;
  result = *a3;
  xmmword_1ED8123E0 = (__int128)*a3;
  return result;
}

uint64_t sub_1C587BA0C()
{
  uint64_t v1;
  int v2;
  __n128 v3;
  const char *v4;

  LOBYTE(v2) = 0;
  v4 = (const char *)&v2;
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Apply CHR for all functions";
  v3.n128_u64[1] = 27;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED812240, "force-chr", (_BYTE **)&v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED812240, &dword_1C475E000);
  v1 = 0x3FEFAE147AE147AELL;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"CHR considers a branch bias greater than this ratio as biased";
  v3.n128_u64[1] = 61;
  v4 = (const char *)&v1;
  sub_1C62ABE8C((uint64_t **)&v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4DB7184, &qword_1ED8123C0, &dword_1C475E000);
  LODWORD(v1) = 2;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"CHR merges a group of N branches/selects where N >= this value";
  v3.n128_u64[1] = 62;
  v4 = (const char *)&v1;
  sub_1C4DB1928((uint64_t)&unk_1ED812300, "chr-merge-threshold", (int **)&v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED812300, &dword_1C475E000);
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Specify file to retrieve the list of modules to apply CHR to";
  v3.n128_u64[1] = 60;
  v4 = "";
  sub_1C47AD050((uint64_t)&qword_1ED812488, 0, 0);
  qword_1ED812510 = 0;
  qword_1ED812508 = 0;
  unk_1ED812518 = 0;
  qword_1ED812528 = 0;
  qword_1ED812538 = 0;
  qword_1ED812530 = 0;
  byte_1ED812540 = 0;
  qword_1ED812520 = (uint64_t)&unk_1E819E950;
  qword_1ED812488 = (uint64_t)&unk_1E819E480;
  qword_1ED812548 = (uint64_t)&unk_1E819E970;
  qword_1ED812550 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED812568 = (uint64_t)&qword_1ED812550;
  sub_1C62ABF34(&v4, &v1, &v3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED812488);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED812488, &dword_1C475E000);
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Specify file to retrieve the list of functions to apply CHR to";
  v3.n128_u64[1] = 62;
  v4 = "";
  sub_1C47AD050((uint64_t)&qword_1ED812570, 0, 0);
  qword_1ED8125F8 = 0;
  qword_1ED8125F0 = 0;
  unk_1ED812600 = 0;
  qword_1ED812610 = 0;
  qword_1ED812620 = 0;
  qword_1ED812618 = 0;
  byte_1ED812628 = 0;
  qword_1ED812608 = (uint64_t)&unk_1E819E950;
  qword_1ED812570 = (uint64_t)&unk_1E819E480;
  qword_1ED812630 = (uint64_t)&unk_1E819E970;
  qword_1ED812638 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED812650 = (uint64_t)&qword_1ED812638;
  sub_1C62ABFA8(&v4, &v1, &v3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED812570);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED812570, &dword_1C475E000);
  qword_1ED812200 = 0;
  *(_QWORD *)&dword_1ED812208 = 0;
  unk_1ED812210 = 0x800000000;
  __cxa_atexit((void (*)(void *))sub_1C5324B8C, &qword_1ED812200, &dword_1C475E000);
  qword_1ED812220 = 0;
  *(_QWORD *)&dword_1ED812228 = 0;
  unk_1ED812230 = 0x800000000;
  return __cxa_atexit((void (*)(void *))sub_1C5324B8C, &qword_1ED812220, &dword_1C475E000);
}

llvm::Value *StripPointerGEPsAndCasts(llvm::Value *a1)
{
  llvm::Value *v1;
  _BYTE *v2;
  _BYTE *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  llvm::Value **v7;
  int v8;
  llvm::Value **v9;
  char v10;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  _BYTE v16[32];

  v1 = a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 8) != 15)
    return v1;
  v12 = v16;
  v13 = v16;
  v14 = 4;
  v15 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v12, (uint64_t)a1);
  v3 = v12;
  v2 = v13;
  while (1)
  {
    v4 = *((unsigned __int8 *)v1 + 16);
    if (v4 == 62)
    {
LABEL_6:
      v6 = *((_DWORD *)v1 + 5);
      if ((v6 & 0x40000000) != 0)
        v7 = (llvm::Value **)*((_QWORD *)v1 - 1);
      else
        v7 = (llvm::Value **)((char *)v1 - 32 * (v6 & 0x7FFFFFF));
      goto LABEL_15;
    }
    if (v4 == 5)
    {
      v5 = *((unsigned __int16 *)v1 + 9);
      if (v5 == 34)
        goto LABEL_6;
    }
    else
    {
      v5 = v4 - 28;
      if (v4 < 0x1C)
        goto LABEL_12;
    }
    if (v5 == 49)
      break;
LABEL_12:
    if (v4 == 1)
    {
      v7 = (llvm::Value **)((char *)v1 - 32);
LABEL_15:
      v1 = *v7;
    }
LABEL_16:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v12, (uint64_t)v1);
    v3 = v12;
    v2 = v13;
    if (!v10)
      goto LABEL_20;
  }
  v8 = *((_DWORD *)v1 + 5);
  if ((v8 & 0x40000000) != 0)
    v9 = (llvm::Value **)*((_QWORD *)v1 - 1);
  else
    v9 = (llvm::Value **)((char *)v1 - 32 * (v8 & 0x7FFFFFF));
  v1 = *v9;
  if (*(_BYTE *)(*(_QWORD *)*v9 + 8) == 15)
    goto LABEL_16;
LABEL_20:
  if (v2 != v3)
    free(v2);
  return v1;
}

void llvm::initializeDataFlowSanitizerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F7198);
  if (v2 != -1)
  {
    v5[0] = sub_1C587BE58;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F7198, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C587BE58(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "DataFlowSanitizer: dynamic data flow analysis.";
  *(_QWORD *)(v2 + 8) = 46;
  *(_QWORD *)(v2 + 16) = "dfsan";
  *(_QWORD *)(v2 + 24) = 5;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5208;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C587E308;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C587BEE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::StringMapImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  char *v32;
  uint64_t v33;
  std::string *v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  void **p_data;
  void **v45;
  uint64_t v46;
  uint64_t *v47;
  void **v48;
  void **v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  BOOL v56;
  unsigned __int8 *v57;
  size_t v58;
  size_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  std::string *v66;
  std::string *v67;
  void **v68;
  void **v69[5];

  v2 = a1;
  *(_OWORD *)(a1 + 248) = 0u;
  v3 = a1 + 248;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 520) = a1 + 552;
  *(_QWORD *)(a1 + 528) = a1 + 552;
  *(_QWORD *)(a1 + 536) = 16;
  *(_DWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_QWORD *)(a1 + 744) = a1 + 752;
  v4 = (llvm::StringMapImpl *)(a1 + 768);
  *(_OWORD *)(a1 + 768) = 0u;
  *(_QWORD *)(a1 + 784) = 0x800000000;
  *(_QWORD *)(a1 + 808) = 200;
  v6 = *a2;
  v5 = a2[1];
  v7 = (v5 - *a2) >> 3;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  sub_1C484333C(&v66, v6, v5, 0xAAAAAAAAAAAAAAABLL * v7);
  v9 = qword_1ED812F28;
  v8 = unk_1ED812F30;
  if (unk_1ED812F30 - qword_1ED812F28 < 1)
    goto LABEL_47;
  v63 = v2;
  v10 = (unk_1ED812F30 - qword_1ED812F28) / 24;
  v11 = v67;
  v12 = v67 - v66;
  v13 = &v66[v12];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v68 - (char *)v67) >> 3)) < v10)
  {
    v14 = (unk_1ED812F30 - qword_1ED812F28) / 24;
    v15 = v12 + v10;
    if (v15 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v16 = 0x5555555555555556 * (((char *)v68 - (char *)v66) >> 3);
    if (v16 <= v15)
      v16 = v15;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v68 - (char *)v66) >> 3) >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v16;
    v69[4] = (void **)&v68;
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v18 = (char *)operator new(24 * v17);
    }
    else
    {
      v18 = 0;
    }
    v32 = &v18[24 * v12];
    v33 = 3 * v14;
    v34 = (std::string *)&v32[24 * v14];
    v35 = 8 * v33;
    v36 = v32;
    do
    {
      if (*(char *)(v9 + 23) < 0)
      {
        sub_1C47EBC30(v36, *(void **)v9, *(_QWORD *)(v9 + 8));
      }
      else
      {
        v37 = *(_OWORD *)v9;
        *((_QWORD *)v36 + 2) = *(_QWORD *)(v9 + 16);
        *(_OWORD *)v36 = v37;
      }
      v36 += 24;
      v9 += 24;
      v35 -= 24;
    }
    while (v35);
    v38 = (uint64_t)v66;
    if (v13 == v66)
    {
      v39 = (uint64_t)v32;
      v2 = v63;
    }
    else
    {
      v40 = v13;
      v2 = v63;
      do
      {
        v39 = (uint64_t)(v32 - 24);
        v41 = *(_OWORD *)&v40[-1].__r_.__value_.__l.__data_;
        *((_QWORD *)v32 - 1) = *((_QWORD *)&v40[-1].__r_.__value_.__l + 2);
        *(_OWORD *)(v32 - 24) = v41;
        v40[-1].__r_.__value_.__l.__size_ = 0;
        v40[-1].__r_.__value_.__r.__words[2] = 0;
        v40[-1].__r_.__value_.__r.__words[0] = 0;
        --v40;
        v32 -= 24;
      }
      while (v40 != (std::string *)v38);
    }
    v42 = v67;
    if (v13 != v67)
    {
      do
      {
        v43 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v34->__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v43;
        ++v34;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        ++v13;
      }
      while (v13 != v42);
      v13 = v67;
    }
    p_data = (void **)&v66->__r_.__value_.__l.__data_;
    v45 = v68;
    v66 = (std::string *)v39;
    v67 = v34;
    v68 = (void **)&v18[24 * v17];
    v69[0] = p_data;
    v69[2] = (void **)&v13->__r_.__value_.__l.__data_;
    v69[3] = v45;
    v69[1] = p_data;
    sub_1C4D868F0((uint64_t)v69);
    goto LABEL_47;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v67 - (char *)v13) >> 3)) >= v10)
  {
    v19 = qword_1ED812F28 + 24 * v10;
    v20 = v67;
    v2 = v63;
    goto LABEL_21;
  }
  v61 = (unk_1ED812F30 - qword_1ED812F28) / 24;
  v62 = (char *)v67 - (char *)v13;
  v19 = qword_1ED812F28 + 8 * (((char *)v67 - (char *)v13) >> 3);
  v20 = v67;
  if (v19 != unk_1ED812F30)
  {
    v20 = v67;
    v21 = qword_1ED812F28 + 8 * (((char *)v67 - (char *)v13) >> 3);
    v22 = v67;
    do
    {
      if (*(char *)(v21 + 23) < 0)
      {
        sub_1C47EBC30(v22, *(void **)v21, *(_QWORD *)(v21 + 8));
      }
      else
      {
        v23 = *(_OWORD *)v21;
        v22->__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 16);
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
      }
      v21 += 24;
      ++v22;
      ++v20;
    }
    while (v21 != v8);
  }
  v67 = v20;
  v2 = v63;
  if (v62 >= 1)
  {
    v10 = v61;
LABEL_21:
    v24 = &v13[v10];
    v25 = &v20[-v10];
    v26 = v20;
    if (v25 < v11)
    {
      v26 = v20;
      do
      {
        v27 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v26->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
        ++v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        ++v25;
      }
      while (v25 < v11);
    }
    v67 = v26;
    if (v20 != v24)
    {
      v28 = v20 - 1;
      v29 = 8 * (((char *)v20 - (char *)v24) >> 3);
      do
      {
        if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28->__r_.__value_.__l.__data_);
        v30 = (__int128 *)((char *)&v13[-1] + v29);
        v31 = *v30;
        v28->__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[(unint64_t)v29 / 8 - 1];
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v31;
        --v28;
        v13->__r_.__value_.__s.__data_[v29 - 1] = 0;
        *(_BYTE *)v30 = 0;
        v29 -= 24;
      }
      while (v29);
    }
    for (; v9 != v19; ++v13)
    {
      std::string::operator=(v13, (const std::string *)v9);
      v9 += 24;
    }
  }
LABEL_47:
  llvm::vfs::getRealFileSystem(&v64);
  v46 = v64;
  llvm::SpecialCaseList::createOrDie((uint64_t *)&v66, v64, &v65);
  v47 = v65;
  v65 = 0;
  v48 = *(void ***)(v3 + 448);
  *(_QWORD *)(v3 + 448) = v47;
  if (v48)
  {
    v69[0] = v48;
    sub_1C5E39EAC(v69);
    MEMORY[0x1CAA32FC0](v48, 0x20C40960023A9);
    v49 = (void **)v65;
    v65 = 0;
    if (v49)
    {
      v69[0] = v49;
      sub_1C5E39EAC(v69);
      MEMORY[0x1CAA32FC0](v49, 0x20C40960023A9);
    }
  }
  v50 = (unsigned int *)(v46 + 8);
  do
  {
    v51 = __ldaxr(v50);
    v52 = v51 - 1;
  }
  while (__stlxr(v52, v50));
  if (!v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v53 = qword_1ED813000;
  v54 = unk_1ED813008;
  while (v53 != v54)
  {
    v55 = *(_BYTE *)(v53 + 23);
    v56 = v55 < 0;
    if (v55 >= 0)
      v57 = (unsigned __int8 *)v53;
    else
      v57 = *(unsigned __int8 **)v53;
    v58 = v55 & 0x7F;
    if (v56)
      v59 = *(_QWORD *)(v53 + 8);
    else
      v59 = v58;
    sub_1C4F024D8(v4, v57, v59);
    v53 += 24;
  }
  v69[0] = (void **)&v66;
  sub_1C4765410(v69);
  return v2;
}

BOOL sub_1C587C424(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  llvm::PointerType *v5;
  llvm::PointerType *v6;
  const llvm::APInt *v7;
  const llvm::APInt *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unsigned __int8 *v31;
  size_t v32;
  _BOOL8 v33;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  llvm::PointerType *v41;
  llvm::UndefValue *inserted;
  BOOL v43;
  int v44;
  llvm::PointerType *v45;
  llvm::UndefValue *v46;
  BOOL v47;
  int v48;
  llvm::PointerType *v49;
  llvm::UndefValue *v50;
  int v51;
  llvm::UndefValue *v52;
  int v53;
  uint64_t v54;
  llvm::PointerType *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  llvm::Value *v75;
  llvm::Value *v76;
  llvm::Value *v77;
  llvm::Value *v78;
  llvm::Value *v79;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  llvm::Value *v85;
  llvm::Value *v86;
  llvm::Value *v87;
  llvm::Value *v88;
  llvm::Value *v89;
  llvm::Value *v90;
  llvm::Value *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  llvm::Value **v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t *v112;
  llvm::Value **v113;
  uint64_t v114;
  uint64_t *v115;
  int v116;
  llvm::Value **v117;
  llvm::Value *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  llvm::Value **v123;
  uint64_t ***v124;
  llvm::Value **v125;
  llvm::Value **i;
  unint64_t *v127;
  _QWORD *v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  llvm::Value **v132;
  llvm::GlobalAlias *v133;
  llvm::GlobalAlias *v134;
  uint64_t AliaseeObject;
  BOOL v136;
  uint64_t ***v137;
  _QWORD **v138;
  _QWORD **v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  char v142;
  unsigned __int8 *v143;
  size_t v144;
  size_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  llvm::Value *v150;
  llvm::UndefValue *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  llvm::GlobalAlias **v157;
  llvm::GlobalAlias *v158;
  int v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  llvm::Value **v165;
  llvm::Value **v166;
  llvm::Value *v167;
  llvm::GlobalAlias *v168;
  unsigned __int8 *v169;
  size_t v170;
  size_t v171;
  uint64_t **v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  _QWORD **v180;
  size_t v181;
  unsigned __int8 *v182;
  size_t v183;
  uint64_t ***v184;
  uint64_t ***v185;
  uint64_t v186;
  _BOOL4 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  llvm::MemorySSAUpdater *v194;
  int v195;
  int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t ****v202;
  uint64_t ***v203;
  int v204;
  int v205;
  unint64_t *v206;
  const void *v207;
  size_t v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  void **v212;
  std::string::size_type v213;
  std::string *v214;
  _DWORD *v215;
  void **v216;
  uint64_t v217;
  uint64_t ***v218;
  llvm::Constant *v219;
  llvm::UndefValue *v220;
  uint64_t *v221;
  uint64_t *v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  uint64_t v229;
  llvm **v230;
  llvm **v231;
  llvm *v232;
  _QWORD *v233;
  uint64_t *v234;
  BOOL v235;
  _QWORD *v236;
  uint64_t *v237;
  BOOL v238;
  uint64_t v239;
  void *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  BOOL v246;
  uint64_t v247;
  int v248;
  unsigned int v249;
  uint64_t v250;
  int v251;
  unsigned int v252;
  _QWORD *j;
  _QWORD *v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  llvm::Value *v268;
  uint64_t **k;
  uint64_t **v270;
  uint64_t *v271;
  BOOL v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t m;
  uint64_t v278;
  uint64_t v279;
  BOOL v280;
  int v281;
  uint64_t *v282;
  uint64_t v283;
  llvm::Value *v284;
  char *v285;
  uint64_t **v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  _QWORD *v291;
  char *v292;
  char v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  char *v297;
  uint64_t ***v298;
  _QWORD *v299;
  uint64_t *v300;
  unint64_t v301;
  unint64_t v302;
  int v303;
  uint64_t *v304;
  unint64_t *v305;
  _QWORD *v306;
  llvm::Value **v307;
  uint64_t *v308;
  uint64_t v309[4];
  __int16 v310;
  void *v311[2];
  __int128 v312;
  __int16 v313;
  std::string v314;
  uint64_t v315;
  __int16 v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  void *__p[2];
  _DWORD *v327;
  uint64_t v328;
  _DWORD v329[2];
  uint64_t v330[2];
  int v331;
  uint64_t v332;
  llvm *v333;
  char v334;
  int v335;
  BOOL v336;
  BOOL v337;
  __int128 v338;
  __int128 v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  __int128 v350;
  _QWORD v351[4];
  __int128 v352;
  _QWORD v353[4];
  uint64_t v354;
  uint64_t v355;
  int v356;
  uint64_t v357[2];
  int v358;
  int v359;
  uint64_t *v360;
  void *v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  void *v365[2];
  uint64_t v366;
  int v367;
  _BYTE v368[16];
  _BYTE *v369;
  _BYTE *v370;
  uint64_t v371;
  int v372;
  _BYTE v373[16];
  __int128 v374;
  uint64_t v375[2];
  uint64_t v376[2];
  _QWORD v377[3];

  v377[1] = *MEMORY[0x1E0C80C00];
  v316 = 260;
  v314.__r_.__value_.__r.__words[0] = (std::string::size_type)(a2 + 27);
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v314);
  if (v329[1] != 9)
  {
    v292 = "unsupported operating system";
    goto LABEL_374;
  }
  if ((_DWORD)v328 != 42)
  {
    v292 = "unsupported architecture";
LABEL_374:
    llvm::report_fatal_error((llvm *)v292, (const char *)1);
  }
  *(_QWORD *)(a1 + 800) = &unk_1C86620F0;
  *(_QWORD *)a1 = a2;
  v4 = (uint64_t *)*a2;
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = llvm::PointerType::get((llvm::PointerType *)(*v4 + 1912), 0);
  v5 = (llvm::PointerType *)(**(_QWORD **)(a1 + 8) + 1960);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = llvm::PointerType::get(v5, 0);
  v6 = (llvm::PointerType *)(**(_QWORD **)(a1 + 8) + 1912);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = llvm::PointerType::get(v6, 0);
  *(_QWORD *)(a1 + 64) = llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(a2 + 34), *(llvm::LLVMContext **)(a1 + 8), 0);
  *(_QWORD *)(a1 + 72) = llvm::ConstantInt::getSigned(*(llvm::ConstantInt ***)(a1 + 48), 0, v7);
  *(_QWORD *)(a1 + 40) = llvm::ConstantInt::getSigned(*(llvm::ConstantInt ***)(a1 + 24), 0, v8);
  *(_OWORD *)v365 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = llvm::FunctionType::get(*(uint64_t ***)(a1 + 48), (uint64_t *)v365, 2, 0);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 8);
  v323 = *(void **)(a1 + 16);
  v324 = v9;
  *(_QWORD *)(a1 + 128) = llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v10 + 1984), (uint64_t *)&v323, 2, 0);
  v11 = **(_QWORD **)(a1 + 8);
  v12 = (uint64_t **)(v11 + 1576);
  v314.__r_.__value_.__r.__words[0] = llvm::PointerType::get((llvm::PointerType *)(v11 + 1912), 0);
  *(_QWORD *)(a1 + 136) = llvm::FunctionType::get(v12, (uint64_t *)&v314, 1, 0);
  v13 = *(_QWORD *)(a1 + 8);
  v360 = *(uint64_t **)(a1 + 16);
  v361 = v360;
  *(_QWORD *)(a1 + 144) = llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v13 + 1576), (uint64_t *)&v360, 2, 0);
  v315 = 0;
  v14 = *(_QWORD *)(a1 + 24);
  v314.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 48);
  *(_OWORD *)&v314.__r_.__value_.__r.__words[1] = v14;
  v15 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 8) + 1912), 0);
  v16 = *(_QWORD *)(a1 + 64);
  v314.__r_.__value_.__r.__words[2] = v15;
  v315 = v16;
  *(_QWORD *)(a1 + 152) = llvm::FunctionType::get((uint64_t **)(**(_QWORD **)(a1 + 8) + 1576), (uint64_t *)&v314, 4, 0);
  *(_QWORD *)(a1 + 160) = llvm::FunctionType::get((uint64_t **)(**(_QWORD **)(a1 + 8) + 1576), 0, 0, 0);
  v17 = **(_QWORD **)(a1 + 8);
  v18 = (uint64_t **)(v17 + 1576);
  v311[0] = (void *)llvm::PointerType::get((llvm::PointerType *)(v17 + 1912), 0);
  *(_QWORD *)(a1 + 168) = llvm::FunctionType::get(v18, (uint64_t *)v311, 1, 0);
  v19 = (uint64_t **)(**(_QWORD **)(a1 + 8) + 1576);
  v311[0] = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 176) = llvm::FunctionType::get(v19, (uint64_t *)v311, 1, 0);
  v20 = *(_QWORD *)(a1 + 24);
  v309[0] = *(_QWORD *)(a1 + 48);
  v309[1] = v20;
  *(_QWORD *)(a1 + 184) = llvm::FunctionType::get((uint64_t **)(**(_QWORD **)(a1 + 8) + 1576), v309, 2, 0);
  v21 = (uint64_t **)(**(_QWORD **)(a1 + 8) + 1576);
  v311[0] = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 192) = llvm::FunctionType::get(v21, (uint64_t *)v311, 1, 0);
  v311[0] = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 216) = llvm::FunctionType::get((uint64_t **)v311[0], (uint64_t *)v311, 1, 0);
  v22 = *(uint64_t ***)(a1 + 24);
  v376[0] = *(_QWORD *)(a1 + 48);
  v376[1] = (uint64_t)v22;
  *(_QWORD *)(a1 + 224) = llvm::FunctionType::get(v22, v376, 2, 0);
  *(_OWORD *)v311 = 0u;
  v312 = 0u;
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(void **)(a1 + 16);
  v311[0] = (void *)(*(_QWORD *)v23 + 1912);
  v311[1] = v24;
  v25 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v312 = *(_QWORD *)(a1 + 64);
  *((_QWORD *)&v312 + 1) = v25;
  *(_QWORD *)(a1 + 240) = llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v23 + 1576), (uint64_t *)v311, 4, 0);
  v26 = *(_QWORD *)(a1 + 8);
  v369 = *(_BYTE **)(a1 + 16);
  v370 = v369;
  v371 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 232) = llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v26 + 1576), (uint64_t *)&v369, 3, 0);
  v28 = *(_QWORD *)(a1 + 8);
  v27 = *(_QWORD *)(a1 + 16);
  v375[0] = *(_QWORD *)(a1 + 48);
  v375[1] = v27;
  *(_QWORD *)(a1 + 200) = llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v28 + 1576), v375, 2, 0);
  v374 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 208) = llvm::FunctionType::get((uint64_t **)(**(_QWORD **)(a1 + 8) + 1576), (uint64_t *)&v374, 2, 0);
  v308 = *(uint64_t **)(a1 + 8);
  v377[0] = 0x3E800000001;
  *(_QWORD *)(a1 + 680) = llvm::MDBuilder::createBranchWeights(&v308, (uint64_t)v377, 2);
  v308 = *(uint64_t **)(a1 + 8);
  v377[0] = 0x3E800000001;
  *(_QWORD *)(a1 + 688) = llvm::MDBuilder::createBranchWeights(&v308, (uint64_t)v377, 2);
  if (SHIBYTE(v327) < 0)
    operator delete(__p[0]);
  v30 = *((_BYTE *)a2 + 191);
  if (v30 >= 0)
    v31 = (unsigned __int8 *)(a2 + 21);
  else
    v31 = (unsigned __int8 *)a2[21];
  if (v30 >= 0)
    v32 = v30 & 0x7F;
  else
    v32 = a2[22];
  if (llvm::SpecialCaseList::inSectionBlame(*(uint64_t ***)(a1 + 696), "dataflow", 8uLL, "src", 3uLL, v31, v32, v29, "skip", 4uLL))return 0;
  v35 = a2 + 1;
  LODWORD(v36) = -1;
  v37 = a2 + 1;
  do
  {
    v37 = (_QWORD *)v37[1];
    v36 = (v36 + 1);
  }
  while (v37 != v35);
  v38 = a2 + 3;
  LODWORD(v39) = -1;
  v40 = a2 + 3;
  do
  {
    v40 = (_QWORD *)v40[1];
    v39 = (v39 + 1);
  }
  while (v40 != v38);
  LOBYTE(v376[0]) = 0;
  llvm::ArrayType::get((llvm::ArrayType *)(**(_QWORD **)(a1 + 8) + 1984), (llvm::Type *)0x64);
  inserted = llvm::Module::getOrInsertGlobal(*(_QWORD *)a1, "__dfsan_arg_tls", 0xFuLL, v41);
  if (inserted)
    v43 = *((_BYTE *)inserted + 16) == 3;
  else
    v43 = 0;
  if (v43)
  {
    v44 = *((_DWORD *)inserted + 8);
    LOBYTE(v376[0]) |= (v44 & 0x1C00) != 3072;
    *((_DWORD *)inserted + 8) = v44 & 0xFFFFE3FF | 0xC00;
  }
  *(_QWORD *)(a1 + 80) = inserted;
  llvm::ArrayType::get((llvm::ArrayType *)(**(_QWORD **)(a1 + 8) + 1984), (llvm::Type *)0x64);
  v46 = llvm::Module::getOrInsertGlobal(*(_QWORD *)a1, "__dfsan_retval_tls", 0x12uLL, v45);
  if (v46)
    v47 = *((_BYTE *)v46 + 16) == 3;
  else
    v47 = 0;
  if (v47)
  {
    v48 = *((_DWORD *)v46 + 8);
    LOBYTE(v376[0]) |= (v48 & 0x1C00) != 3072;
    *((_DWORD *)v46 + 8) = v48 & 0xFFFFE3FF | 0xC00;
  }
  *(_QWORD *)(a1 + 104) = v46;
  llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 24), *(llvm::Type **)(a1 + 808));
  *(_QWORD *)(a1 + 88) = v49;
  v50 = llvm::Module::getOrInsertGlobal(*(_QWORD *)a1, "__dfsan_arg_origin_tls", 0x16uLL, v49);
  if (v50 && *((_BYTE *)v50 + 16) == 3)
  {
    v51 = *((_DWORD *)v50 + 8);
    LOBYTE(v376[0]) |= (v51 & 0x1C00) != 3072;
    *((_DWORD *)v50 + 8) = v51 & 0xFFFFE3FF | 0xC00;
  }
  *(_QWORD *)(a1 + 96) = v50;
  v52 = llvm::Module::getOrInsertGlobal(*(_QWORD *)a1, "__dfsan_retval_origin_tls", 0x19uLL, *(llvm::PointerType **)(a1 + 24));
  if (v52 && *((_BYTE *)v52 + 16) == 3)
  {
    v53 = *((_DWORD *)v52 + 8);
    LOBYTE(v376[0]) |= (v53 & 0x1C00) != 3072;
    *((_DWORD *)v52 + 8) = v53 & 0xFFFFE3FF | 0xC00;
  }
  *(_QWORD *)(a1 + 112) = v52;
  v54 = *(_QWORD *)a1;
  v55 = *(llvm::PointerType **)(a1 + 24);
  __p[0] = v376;
  __p[1] = a2;
  v327 = (_DWORD *)a1;
  llvm::Module::getOrInsertGlobal(v54, "__dfsan_track_origins", 0x15uLL, v55, sub_1C5883ACC, (uint64_t)__p);
  v314.__r_.__value_.__r.__words[0] = 0;
  v56 = *(_QWORD *)a1;
  v314.__r_.__value_.__r.__words[0] = **(_QWORD **)(a1 + 8) + 1960;
  __p[0] = a2;
  __p[1] = &v314;
  llvm::Module::getOrInsertGlobal(v56, "__dfsan_shadow_width_bits", 0x19uLL, (llvm::PointerType *)v314.__r_.__value_.__l.__data_, sub_1C5883B94, (uint64_t)__p);
  v57 = *(_QWORD *)a1;
  __p[0] = a2;
  __p[1] = &v314;
  llvm::Module::getOrInsertGlobal(v57, "__dfsan_shadow_width_bytes", 0x1AuLL, (llvm::PointerType *)v314.__r_.__value_.__l.__data_, sub_1C5883C40, (uint64_t)__p);
  *(_QWORD *)(a1 + 360) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_load_callback", 0x15uLL, *(llvm::PointerType **)(a1 + 200), 0);
  *(_QWORD *)(a1 + 368) = v58;
  *(_QWORD *)(a1 + 376) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_store_callback", 0x16uLL, *(llvm::PointerType **)(a1 + 200), 0);
  *(_QWORD *)(a1 + 384) = v59;
  *(_QWORD *)(a1 + 392) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_mem_transfer_callback", 0x1DuLL, *(llvm::PointerType **)(a1 + 208), 0);
  *(_QWORD *)(a1 + 400) = v60;
  *(_QWORD *)(a1 + 440) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_cmp_callback", 0x14uLL, *(llvm::PointerType **)(a1 + 192), 0);
  *(_QWORD *)(a1 + 448) = v61;
  *(_QWORD *)(a1 + 408) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_conditional_callback", 0x1CuLL, *(llvm::PointerType **)(a1 + 176), 0);
  *(_QWORD *)(a1 + 416) = v62;
  *(_QWORD *)(a1 + 424) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_conditional_callback_origin", 0x23uLL, *(llvm::PointerType **)(a1 + 184), 0);
  *(_QWORD *)(a1 + 432) = v63;
  __p[0] = 0;
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, -1, 37);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, -1, 45);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 0, 67);
  *(_QWORD *)(a1 + 248) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_union_load", 0x12uLL, *(llvm::PointerType **)(a1 + 120), (uint64_t)__p[0]);
  *(_QWORD *)(a1 + 256) = v64;
  __p[0] = 0;
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, -1, 37);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, -1, 45);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 0, 67);
  *(_QWORD *)(a1 + 264) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_load_label_and_origin", 0x1DuLL, *(llvm::PointerType **)(a1 + 128), (uint64_t)__p[0]);
  *(_QWORD *)(a1 + 272) = v65;
  *(_QWORD *)(a1 + 280) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_unimplemented", 0x15uLL, *(llvm::PointerType **)(a1 + 136), 0);
  *(_QWORD *)(a1 + 288) = v66;
  *(_QWORD *)(a1 + 296) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_wrapper_extern_weak_null", 0x20uLL, *(llvm::PointerType **)(a1 + 144), 0);
  *(_QWORD *)(a1 + 304) = v67;
  __p[0] = 0;
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 1, 67);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 2, 67);
  *(_QWORD *)(a1 + 312) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_set_label", 0x11uLL, *(llvm::PointerType **)(a1 + 152), (uint64_t)__p[0]);
  *(_QWORD *)(a1 + 320) = v68;
  *(_QWORD *)(a1 + 328) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_nonzero_label", 0x15uLL, *(llvm::PointerType **)(a1 + 160), 0);
  *(_QWORD *)(a1 + 336) = v69;
  *(_QWORD *)(a1 + 344) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_vararg_wrapper", 0x16uLL, *(llvm::PointerType **)(a1 + 168), 0);
  *(_QWORD *)(a1 + 352) = v70;
  __p[0] = 0;
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 1, 67);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 0, 67);
  *(_QWORD *)(a1 + 456) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_chain_origin", 0x14uLL, *(llvm::PointerType **)(a1 + 216), (uint64_t)__p[0]);
  *(_QWORD *)(a1 + 464) = v71;
  __p[0] = 0;
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 1, 67);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 2, 67);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 0, 67);
  *(_QWORD *)(a1 + 472) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_chain_origin_if_tainted", 0x1FuLL, *(llvm::PointerType **)(a1 + 224), (uint64_t)__p[0]);
  *(_QWORD *)(a1 + 480) = v72;
  *(_QWORD *)(a1 + 488) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_mem_origin_transfer", 0x1BuLL, *(llvm::PointerType **)(a1 + 232), 0);
  *(_QWORD *)(a1 + 496) = v73;
  __p[0] = 0;
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 1, 67);
  __p[0] = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)__p, (uint64_t *)*a2, 4, 67);
  *(_QWORD *)(a1 + 504) = llvm::Module::getOrInsertFunction(*(_QWORD *)a1, "__dfsan_maybe_store_origin", 0x1AuLL, *(llvm::PointerType **)(a1 + 240), (uint64_t)__p[0]);
  *(_QWORD *)(a1 + 512) = v74;
  v75 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 256));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v75);
  v76 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 272));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v76);
  v77 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 288));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v77);
  v78 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 304));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v78);
  v79 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 320));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v79);
  v80 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 336));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v80);
  v81 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 352));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v81);
  v82 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 368));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v82);
  v83 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 384));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v83);
  v84 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 400));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v84);
  v85 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 416));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v85);
  v86 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 432));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v86);
  v87 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 448));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v87);
  v88 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 464));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v88);
  v89 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 480));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v89);
  v90 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 496));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v90);
  v91 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 + 512));
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 520), (uint64_t)v91);
  v369 = v373;
  v370 = v373;
  v371 = 2;
  v372 = 0;
  v365[0] = v368;
  v365[1] = v368;
  v366 = 2;
  v367 = 0;
  v360 = &v364;
  v361 = &v364;
  v362 = 1;
  v363 = 0;
  v298 = (uint64_t ***)(a1 + 696);
  v299 = a2;
  v96 = (_QWORD *)a2[4];
  if (v96 != v38)
  {
    v97 = 0;
    v98 = 0;
    v99 = 0;
    while (1)
    {
      if (v96)
        v100 = (uint64_t)(v96 - 7);
      else
        v100 = 0;
      if ((*(_BYTE *)(v100 + 33) & 0x20) != 0)
        goto LABEL_68;
      v101 = sub_1C477672C(a1 + 520, v100);
      v102 = *(_QWORD *)(a1 + 528);
      v103 = 536;
      if (v102 == *(_QWORD *)(a1 + 520))
        v103 = 540;
      if (v101 != (_QWORD *)(v102 + 8 * *(unsigned int *)(a1 + v103)))
        goto LABEL_68;
      if (v98 < v97)
        break;
      v105 = v97;
      v106 = v98 - v99;
      v107 = v106 + 1;
      if ((unint64_t)(v106 + 1) >> 61)
LABEL_375:
        abort();
      v108 = (char *)v105 - (char *)v99;
      v109 = ((char *)v105 - (char *)v99) >> 2;
      if (v109 > v107)
        v107 = v109;
      if (v108 >= 0x7FFFFFFFFFFFFFF8)
        v110 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v110 = v107;
      if (v110)
      {
        if (v110 >> 61)
LABEL_376:
          sub_1C4764EE4();
        v301 = v110;
        v111 = (char *)operator new(8 * v110);
        v110 = v301;
      }
      else
      {
        v111 = 0;
      }
      v112 = (uint64_t *)&v111[8 * v106];
      *v112 = v100;
      v113 = (llvm::Value **)(v112 + 1);
      if (v98 != v99)
      {
        do
        {
          v114 = *--v98;
          *--v112 = v114;
        }
        while (v98 != v99);
        v98 = v99;
      }
      v99 = v112;
      v97 = (uint64_t *)&v111[8 * v110];
      if (v98)
      {
        v115 = v98;
        v104 = v113;
        operator delete(v115);
        goto LABEL_62;
      }
LABEL_63:
      if ((*(_WORD *)(v100 + 18) & 8) != 0)
      {
        v116 = *(_DWORD *)(v100 + 20);
        v98 = (uint64_t *)v113;
        if ((v116 & 0x40000000) != 0)
          v117 = *(llvm::Value ***)(v100 - 8);
        else
          v117 = (llvm::Value **)(v100 - 32 * (v116 & 0x7FFFFFF));
        v118 = llvm::Value::stripPointerCasts(*v117);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v360, (uint64_t)v118);
LABEL_68:
        v113 = (llvm::Value **)v98;
      }
      v96 = (_QWORD *)v96[1];
      v98 = (uint64_t *)v113;
      if (v96 == v38)
        goto LABEL_72;
    }
    *v98 = v100;
    v104 = (llvm::Value **)(v98 + 1);
LABEL_62:
    v113 = v104;
    goto LABEL_63;
  }
  v99 = 0;
  v113 = 0;
  v97 = 0;
LABEL_72:
  v297 = (char *)v97;
  if (!byte_1ED812E68)
    goto LABEL_104;
  v119 = v361 == v360 ? (uint64_t *)((char *)&v362 + 4) : &v362;
  v120 = *(unsigned int *)v119;
  if ((_DWORD)v120)
  {
    v121 = 8 * v120;
    v122 = (unint64_t *)v361;
    while (*v122 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v122;
      v121 -= 8;
      if (!v121)
        goto LABEL_104;
    }
  }
  else
  {
    v122 = (unint64_t *)v361;
  }
  if (v122 == (unint64_t *)((char *)v361 + 8 * v120))
  {
LABEL_104:
    v128 = v299;
  }
  else
  {
    v305 = (unint64_t *)((char *)v361 + 8 * v120);
    v123 = v113;
    v124 = (uint64_t ***)*v122;
LABEL_84:
    if (sub_1C5883CEC(v298, v124, "uninstrumented", 0xEuLL, v92, v93, v94, v95))
    {
      v113 = v123;
      if (v99 == (uint64_t *)v123)
      {
        v125 = (llvm::Value **)v99;
      }
      else
      {
        v125 = (llvm::Value **)v99;
        while (*v125 != (llvm::Value *)v124)
        {
          if (++v125 == v113)
          {
            v125 = v113;
            break;
          }
        }
      }
      if (v125 != v113)
      {
        for (i = v125 + 1; i != v113; ++i)
        {
          if (*i != (llvm::Value *)v124)
            *v125++ = *i;
        }
      }
      if (v125 != v113)
        v113 = v125;
    }
    else
    {
      v113 = v123;
    }
    v127 = v122 + 1;
    v128 = v299;
    while (v127 != v305)
    {
      v129 = *v127++;
      v124 = (uint64_t ***)v129;
      if (v129 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v123 = v113;
        v122 = v127 - 1;
        goto LABEL_84;
      }
    }
  }
  v130 = v128 + 5;
  v131 = (_QWORD *)v128[6];
  v306 = v128 + 5;
  while (v131 != v130)
  {
    v132 = v113;
    v133 = (llvm::GlobalAlias *)(v131 - 6);
    v43 = v131 == 0;
    v131 = (_QWORD *)v131[1];
    if (v43)
      v134 = 0;
    else
      v134 = v133;
    AliaseeObject = llvm::GlobalAlias::getAliaseeObject(v134);
    if (AliaseeObject)
      v136 = *(_BYTE *)(AliaseeObject + 16) == 0;
    else
      v136 = 0;
    if (!v136)
      goto LABEL_114;
    v137 = (uint64_t ***)AliaseeObject;
    v138 = (_QWORD **)*((_QWORD *)v134 + 5);
    v141 = (unsigned __int8 *)v138[21];
    v139 = v138 + 21;
    v140 = v141;
    v142 = *((_BYTE *)v139 + 23);
    if (v142 >= 0)
      v143 = (unsigned __int8 *)v139;
    else
      v143 = v140;
    v144 = (size_t)v139[1];
    if (v142 >= 0)
      v145 = v142 & 0x7F;
    else
      v145 = v144;
    if (llvm::SpecialCaseList::inSectionBlame(*v298, "dataflow", 8uLL, "src", 3uLL, v143, v145, v95, "uninstrumented", 0xEuLL))
    {
LABEL_123:
      if ((sub_1C5883CEC(v298, v137, "uninstrumented", 0xEuLL, v146, v147, v148, v149) & 1) != 0)
        goto LABEL_114;
      goto LABEL_124;
    }
    if ((*((_BYTE *)v134 + 23) & 0x10) != 0)
    {
      v153 = ***(_QWORD ***)v134;
      v154 = *(_QWORD *)(v153 + 152);
      v155 = *(unsigned int *)(v153 + 168);
      if (!(_DWORD)v155)
        goto LABEL_150;
      LODWORD(v156) = (v155 - 1) & ((v134 >> 4) ^ (v134 >> 9));
      v157 = (llvm::GlobalAlias **)(v154 + 16 * v156);
      v158 = *v157;
      if (*v157 != v134)
      {
        v159 = 1;
        while (v158 != (llvm::GlobalAlias *)-4096)
        {
          v160 = v156 + v159++;
          v156 = v160 & (v155 - 1);
          v158 = *(llvm::GlobalAlias **)(v154 + 16 * v156);
          if (v158 == v134)
          {
            v157 = (llvm::GlobalAlias **)(v154 + 16 * v156);
            goto LABEL_151;
          }
        }
LABEL_150:
        v157 = (llvm::GlobalAlias **)(v154 + 16 * v155);
      }
LABEL_151:
      v168 = v157[1];
      v171 = *(_QWORD *)v168;
      v169 = (unsigned __int8 *)v168 + 16;
      v170 = v171;
      goto LABEL_152;
    }
    v170 = 0;
    v169 = (unsigned __int8 *)&byte_1C871356D;
LABEL_152:
    v172 = *v298;
    if (*(_BYTE *)(*((_QWORD *)v134 + 3) + 8) == 14)
    {
      v173 = llvm::SpecialCaseList::inSectionBlame(v172, "dataflow", 8uLL, "fun", 3uLL, v169, v170, v149, "uninstrumented", 0xEuLL);
    }
    else
    {
      if (llvm::SpecialCaseList::inSectionBlame(v172, "dataflow", 8uLL, "global", 6uLL, v169, v170, v149, "uninstrumented", 0xEuLL))goto LABEL_123;
      v180 = (_QWORD **)*((_QWORD *)v134 + 3);
      if (v180)
      {
        v181 = 14;
        v182 = "<unknown type>";
        if (((_DWORD)v180[1] & 0x4FF) == 0x10)
        {
          v182 = (unsigned __int8 *)v180[3];
          if (v182)
          {
            v183 = *(_QWORD *)v182;
            v182 += 16;
            v181 = v183;
          }
          else
          {
            v181 = 0;
          }
        }
      }
      else
      {
        v181 = 14;
        v182 = "<unknown type>";
      }
      v173 = llvm::SpecialCaseList::inSectionBlame(*v298, "dataflow", 8uLL, "type", 4uLL, v182, v181, v149, "uninstrumented", 0xEuLL);
    }
    v303 = v173;
    v178 = sub_1C5883CEC(v298, v137, "uninstrumented", 0xEuLL, v174, v175, v176, v177);
    if (!v303 && (v178 & 1) == 0)
    {
      sub_1C587E4DC((uint64_t ***)v134);
LABEL_114:
      v113 = v132;
      goto LABEL_115;
    }
    if ((v303 != 0) == v178)
      goto LABEL_114;
LABEL_124:
    v150 = (llvm::Value *)sub_1C587EA28((_QWORD *)a1, (const llvm::Function *)v137, "", 0, *((_DWORD *)v134 + 8) & 0xF, v137[3]);
    v151 = v150;
    if (*(_QWORD *)v150 != *(_QWORD *)v134)
      v151 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v150, *(llvm::Constant **)v134, 0);
    llvm::Value::doRAUW(v134, v151, (llvm::Value *)1);
    llvm::Value::takeName(v150, v134);
    llvm::GlobalAlias::eraseFromParent(v134);
    v152 = (uint64_t *)v132;
    if (v132 >= (llvm::Value **)v297)
    {
      v161 = ((char *)v132 - (char *)v99) >> 3;
      v162 = v161 + 1;
      if ((unint64_t)(v161 + 1) >> 61)
        goto LABEL_375;
      if ((v297 - (char *)v99) >> 2 > v162)
        v162 = (v297 - (char *)v99) >> 2;
      v163 = 0x1FFFFFFFFFFFFFFFLL;
      if ((unint64_t)(v297 - (char *)v99) < 0x7FFFFFFFFFFFFFF8)
        v163 = v162;
      v302 = v163;
      if (v163)
      {
        if (v163 >> 61)
          goto LABEL_376;
        v164 = (char *)operator new(8 * v163);
        v152 = (uint64_t *)v132;
      }
      else
      {
        v164 = 0;
      }
      v165 = (llvm::Value **)&v164[8 * v161];
      *v165 = v150;
      v166 = v165 + 1;
      if (v152 != v99)
      {
        do
        {
          v167 = (llvm::Value *)*--v152;
          *--v165 = v167;
        }
        while (v152 != v99);
        v152 = v99;
      }
      v99 = (uint64_t *)v165;
      v297 = &v164[8 * v302];
      if (v152)
        operator delete(v152);
      v113 = v166;
    }
    else
    {
      *v132 = v150;
      v113 = v132 + 1;
    }
LABEL_115:
    v130 = v306;
  }
  *(_QWORD *)(a1 + 728) |= 0x300000000000uLL;
  if (v99 != (uint64_t *)v113)
  {
    v294 = a1 + 704;
    v300 = (uint64_t *)v113;
    v304 = v99;
    v184 = (uint64_t ***)(a1 + 696);
    while (2)
    {
      v185 = (uint64_t ***)*v99;
      v186 = *(_QWORD *)(*v99 + 24);
      v307 = v113;
      v187 = *(_DWORD *)(v186 + 12) == 1
          && *(_DWORD *)(v186 + 8) <= 0xFFu
          && *(unsigned __int8 *)(**(_QWORD **)(v186 + 16) + 8) == 7;
      if ((sub_1C5883CEC(v184, v185, "uninstrumented", 0xEuLL, v92, v93, v94, v95) & 1) != 0)
      {
        if (v187 && sub_1C587EFD8(a1, v185, v188, v189, v190, v191, v192, v193) != 3)
        {
          if (*(_DWORD *)(v186 + 8) >= 0x100u)
          {
            __p[0] = v185;
            sub_1C6180A54(v294, (uint64_t *)__p)[1] = v185;
            *v99 = 0;
          }
          goto LABEL_183;
        }
        if (((_DWORD)v185[4] & 0xFu) - 7 >= 2)
          LOBYTE(v195) = 3;
        else
          v195 = (_DWORD)v185[4] & 0xF;
        v196 = sub_1C587F060();
        *((_BYTE *)&v314.__r_.__value_.__s + 23) = 5;
        v314.__r_.__value_.__s.__data_[4] = 36;
        if (v196)
          v197 = 1869833828;
        else
          v197 = 2004051556;
        LODWORD(v314.__r_.__value_.__l.__data_) = v197;
        v314.__r_.__value_.__s.__data_[5] = 0;
        if ((*((_BYTE *)v185 + 23) & 0x10) != 0)
        {
          v198 = ***v185;
          v199 = *(_QWORD *)(v198 + 152);
          v200 = *(unsigned int *)(v198 + 168);
          if (!(_DWORD)v200)
            goto LABEL_199;
          LODWORD(v201) = (v200 - 1) & ((v185 >> 4) ^ (v185 >> 9));
          v202 = (uint64_t ****)(v199 + 16 * v201);
          v203 = *v202;
          if (*v202 != v185)
          {
            v204 = 1;
            while (v203 != (uint64_t ***)-4096)
            {
              v205 = v201 + v204++;
              v201 = v205 & (v200 - 1);
              v203 = *(uint64_t ****)(v199 + 16 * v201);
              if (v203 == v185)
              {
                v202 = (uint64_t ****)(v199 + 16 * v201);
                goto LABEL_200;
              }
            }
LABEL_199:
            v202 = (uint64_t ****)(v199 + 16 * v200);
          }
LABEL_200:
          v293 = v195;
          v206 = (unint64_t *)v202[1];
          v209 = *v206;
          v207 = v206 + 2;
          v208 = v209;
          if (v209 >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_375;
          if (v208 >= 0x17)
          {
            v211 = (v208 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v208 | 7) != 0x17)
              v211 = v208 | 7;
            v295 = v211 + 1;
            v210 = operator new(v211 + 1);
            v311[1] = (void *)v208;
            *(_QWORD *)&v312 = v295 | 0x8000000000000000;
            v311[0] = v210;
          }
          else
          {
            BYTE7(v312) = v208;
            v210 = v311;
            if (!v208)
            {
LABEL_208:
              LOBYTE(v195) = v293;
              goto LABEL_209;
            }
          }
          v296 = v210;
          memmove(v210, v207, v208);
          v210 = v296;
          goto LABEL_208;
        }
        v208 = 0;
        BYTE7(v312) = 0;
        v210 = v311;
LABEL_209:
        *((_BYTE *)v210 + v208) = 0;
        if ((SBYTE7(v312) & 0x80u) == 0)
          v212 = v311;
        else
          v212 = (void **)v311[0];
        if ((SBYTE7(v312) & 0x80u) == 0)
          v213 = BYTE7(v312) & 0x7F;
        else
          v213 = (std::string::size_type)v311[1];
        v214 = std::string::append(&v314, (const std::string::value_type *)v212, v213);
        v215 = (_DWORD *)v214->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
        v327 = v215;
        v214->__r_.__value_.__l.__size_ = 0;
        v214->__r_.__value_.__r.__words[2] = 0;
        v214->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v327) >= 0)
          v216 = __p;
        else
          v216 = (void **)__p[0];
        if (SHIBYTE(v327) >= 0)
          v217 = HIBYTE(v327) & 0x7F;
        else
          v217 = (uint64_t)__p[1];
        v218 = sub_1C587EA28((_QWORD *)a1, (const llvm::Function *)v185, v216, v217, v195, (uint64_t **)v186);
        if (SHIBYTE(v327) < 0)
          operator delete(__p[0]);
        v184 = (uint64_t ***)(a1 + 696);
        if (SBYTE7(v312) < 0)
          operator delete(v311[0]);
        if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v314.__r_.__value_.__l.__data_);
        llvm::Function::removeFnAttrs((uint64_t)v218, a1 + 728);
        v219 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)v186, 0);
        v220 = (llvm::UndefValue *)v218;
        if (*v218 != (uint64_t **)v219)
          v220 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v218, v219, 0);
        __p[0] = v220;
        llvm::Value::replaceUsesWithIf((llvm::Value *)v185, v220, (unsigned int (*)(uint64_t, uint64_t))sub_1C5883E30, (uint64_t)&v314);
        sub_1C6180A54(v294, (uint64_t *)__p)[1] = v185;
        *v99 = (uint64_t)v218;
        if (v185 && *((_BYTE *)v185 + 16) == 3)
        {
          if ((*((_DWORD *)v185 + 5) & 0x7FFFFFF) == 0)
            goto LABEL_183;
        }
        else if (!*((_BYTE *)v185 + 16) && v185[9] == (uint64_t **)(v185 + 9) && (*((_BYTE *)v185 + 34) & 0x80) == 0)
        {
          goto LABEL_183;
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v369, (uint64_t)v185);
        v221 = v300;
        if (v300 >= (uint64_t *)v297)
        {
          v222 = v304;
          v225 = v300 - v304;
          v226 = v225 + 1;
          if ((unint64_t)(v225 + 1) >> 61)
            goto LABEL_375;
          if ((v297 - (char *)v304) >> 2 > v226)
            v226 = (v297 - (char *)v304) >> 2;
          v227 = (unint64_t)(v297 - (char *)v304) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v226;
          if (v227)
          {
            if (v227 >> 61)
              goto LABEL_376;
            v228 = (char *)operator new(8 * v227);
            v221 = v300;
            v222 = v304;
          }
          else
          {
            v228 = 0;
          }
          v223 = (uint64_t *)&v228[8 * v225];
          *v223 = (uint64_t)v185;
          v224 = v223 + 1;
          if (v221 != v222)
          {
            do
            {
              v229 = *--v221;
              *--v223 = v229;
            }
            while (v221 != v222);
            v221 = v222;
          }
          v297 = &v228[8 * v227];
          if (v221)
          {
            operator delete(v221);
            v222 = v304;
          }
          v184 = (uint64_t ***)(a1 + 696);
        }
        else
        {
          *v300 = (uint64_t)v185;
          v222 = v304;
          v223 = v304;
          v224 = v300 + 1;
        }
        v99 = &v223[v99 - v222];
        v113 = (llvm::Value **)&v223[((char *)v307 - (char *)v222) >> 3];
        v300 = v224;
        v304 = v223;
      }
      else
      {
        if (sub_1C5883CEC(v184, v185, "force_zero_labels", 0x11uLL, v190, v191, v192, v193))
          sub_1C4774094((llvm::SmallPtrSetImplBase *)v365, (uint64_t)v185);
        sub_1C587E4DC(v185);
LABEL_183:
        v113 = v307;
      }
      if (++v99 != (uint64_t *)v113)
        continue;
      break;
    }
    v230 = (llvm **)v300;
    v99 = v304;
    if (v304 != v300)
    {
      v231 = (llvm **)v304;
      while (1)
      {
        v232 = *v231;
        if (*v231)
        {
          if (*((_BYTE *)v232 + 16))
          {
            if (*((_BYTE *)v232 + 16) == 3 && (*((_DWORD *)v232 + 5) & 0x7FFFFFF) == 0)
              goto LABEL_354;
          }
          else if (*((llvm **)v232 + 9) == (llvm *)((char *)v232 + 72) && (*((_BYTE *)v232 + 34) & 0x80) == 0)
          {
            goto LABEL_354;
          }
          llvm::removeUnreachableBlocks(*v231, 0, 0, v194);
          v233 = sub_1C477672C((uint64_t)&v369, (uint64_t)v232);
          if (v370 == v369)
            v234 = (uint64_t *)((char *)&v371 + 4);
          else
            v234 = &v371;
          v235 = v233 != (_QWORD *)&v370[8 * *(unsigned int *)v234];
          v236 = sub_1C477672C((uint64_t)v365, (uint64_t)v232);
          if (v365[1] == v365[0])
            v237 = (uint64_t *)((char *)&v366 + 4);
          else
            v237 = &v366;
          v238 = v236 != (_QWORD *)((char *)v365[1] + 8 * *(unsigned int *)v237);
          __p[0] = (void *)a1;
          __p[1] = v232;
          v327 = v329;
          v328 = 0x100000000;
          v335 = 0;
          v330[0] = 0;
          v330[1] = 0;
          v331 = 0;
          v332 = 0;
          v334 = 0;
          v336 = v235;
          v337 = v238;
          v359 = 0;
          v340 = 0;
          v338 = 0u;
          v339 = 0u;
          v343 = 0;
          v341 = 0;
          v342 = 0;
          v346 = 0;
          v344 = 0;
          v345 = 0;
          v349 = 0;
          v347 = 0;
          v348 = 0;
          v350 = 0u;
          memset(v351, 0, 28);
          v352 = 0u;
          memset(v353, 0, 28);
          v354 = 0;
          v355 = 0;
          v356 = 0;
          v357[0] = 0;
          v357[1] = 0;
          v358 = 0;
          v333 = v232;
          sub_1C53BA620((uint64_t)&v327, 0);
          v239 = *((_QWORD *)v232 + 10);
          if (v239)
            v240 = (void *)(v239 - 24);
          else
            v240 = 0;
          v311[0] = v240;
          sub_1C586DB8C((uint64_t *)v311, (uint64_t)&v314);
          sub_1C62AC13C(&v323, (llvm::SmallPtrSetImplBase *)&v314);
          if (v321)
          {
            v322 = v321;
            operator delete(v321);
          }
          if (v320 != v319)
            free(v320);
          if (v317)
          {
            v318 = v317;
            operator delete(v317);
          }
          if (v314.__r_.__value_.__l.__size_ != v314.__r_.__value_.__r.__words[0])
            free((void *)v314.__r_.__value_.__l.__size_);
          if ((_DWORD)v324)
          {
            v241 = (char *)v323;
            v242 = (char *)v323 + 8 * v324;
            do
            {
              v243 = *(_QWORD *)(*(_QWORD *)v241 + 48);
              if (v243)
                v244 = v243 - 24;
              else
                v244 = 0;
              do
              {
                v245 = *(_QWORD *)(v244 + 32);
                if (v245)
                  v246 = v245 == *(_QWORD *)(v244 + 40) + 40;
                else
                  v246 = 1;
                if (v246)
                  v247 = 0;
                else
                  v247 = v245 - 24;
                v248 = *(unsigned __int8 *)(v244 + 16);
                if (LODWORD(v351[3]))
                {
                  v249 = (LODWORD(v351[3]) - 1) & ((v244 >> 4) ^ (v244 >> 9));
                  v250 = *(_QWORD *)(v351[1] + 8 * v249);
                  if (v244 == v250)
                    goto LABEL_300;
                  v251 = 1;
                  while (v250 != -4096)
                  {
                    v252 = v249 + v251++;
                    v249 = v252 & (LODWORD(v351[3]) - 1);
                    v250 = *(_QWORD *)(v351[1] + 8 * v249);
                    if (v244 == v250)
                      goto LABEL_300;
                  }
                }
                v314.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                sub_1C587F0BC((uint64_t)&v314, v244);
LABEL_300:
                v244 = v247;
              }
              while ((v248 - 29) > 0xA);
              v241 += 8;
            }
            while (v241 != v242);
          }
          v254 = (_QWORD *)*((_QWORD *)&v350 + 1);
          for (j = (_QWORD *)v350; j != v254; j += 3)
          {
            v255 = *(_DWORD *)(*j + 20);
            v256 = v255 & 0x7FFFFFF;
            if ((v255 & 0x7FFFFFF) != 0)
            {
              v257 = 0;
              v258 = 0;
              do
              {
                v259 = *j;
                v260 = *(_DWORD *)(*j + 20);
                if ((v260 & 0x40000000) != 0)
                  v261 = *(_QWORD *)(v259 - 8);
                else
                  v261 = v259 - 32 * (v260 & 0x7FFFFFF);
                v262 = j[1];
                v263 = sub_1C5883144((uint64_t)__p, *(_QWORD *)(v261 + v257));
                sub_1C6125834(v262, v258, (uint64_t)v263);
                v264 = j[2];
                if (v264)
                {
                  v265 = *j;
                  v266 = *(_DWORD *)(*j + 20);
                  if ((v266 & 0x40000000) != 0)
                    v267 = *(_QWORD *)(v265 - 8);
                  else
                    v267 = v265 - 32 * (v266 & 0x7FFFFFF);
                  v268 = sub_1C58836E4((uint64_t *)__p, *(_QWORD *)(v267 + v257));
                  sub_1C6125834(v264, v258, (uint64_t)v268);
                }
                ++v258;
                v257 += 32;
              }
              while (v256 != v258);
            }
          }
          if (byte_1ED8129E8)
          {
            v270 = (uint64_t **)*((_QWORD *)&v352 + 1);
            for (k = (uint64_t **)v352; k != v270; ++k)
            {
              v271 = *k;
              if (*k)
                v272 = *((unsigned __int8 *)*k + 16) >= 0x1Cu;
              else
                v272 = 0;
              if (!v272)
              {
                v273 = *((_QWORD *)__p[1] + 10);
                if (v273)
                  v274 = v273 - 24;
                else
                  v274 = 0;
                v275 = *(_QWORD *)(v274 + 48);
                if (v275)
                  v276 = v275 - 24;
                else
                  v276 = 0;
                goto LABEL_337;
              }
              v278 = v271[4];
              for (m = v271[5]; ; m = *(_QWORD *)(v276 + 40))
              {
                v279 = m + 40;
                v280 = !v278 || v278 == v279;
                v276 = v280 ? 0 : v278 - 24;
LABEL_337:
                v281 = *(unsigned __int8 *)(v276 + 16);
                if (v281 != 83 && v281 != 59)
                  break;
                v278 = *(_QWORD *)(v276 + 32);
              }
              sub_1C4773D54((uint64_t)&v314, v276, 0, 0, 0);
              v282 = sub_1C58839D0((uint64_t)__p, v271, (const llvm::Instruction *)v276);
              v283 = *((_QWORD *)__p[0] + 9);
              v313 = 257;
              v284 = (llvm::Value *)sub_1C4774B48((uint64_t)&v314, 33, (uint64_t)v282, v283, (uint64_t)v311);
              v285 = sub_1C5EBFBC0(v284, (uint64_t *)v276, 0, *(llvm::MDNode **)(a1 + 680), 0, 0, 0, 0);
              sub_1C4773D54((uint64_t)v311, (uint64_t)v285, 0, 0, 0);
              v286 = (uint64_t **)*((_QWORD *)__p[0] + 41);
              v287 = *((_QWORD *)__p[0] + 42);
              v310 = 257;
              sub_1C4774778((uint64_t *)v311, v286, v287, 0, 0, (uint64_t)v309, 0);
              if (v311[0] != &v312)
                free(v311[0]);
              if ((std::string::size_type *)v314.__r_.__value_.__l.__data_ != &v314.__r_.__value_.__r.__words[2])
                free(v314.__r_.__value_.__l.__data_);
            }
          }
          if (v323 != &v325)
            free(v323);
          sub_1C51D7534(v357);
          MEMORY[0x1CAA32FB4](v354, 8);
          MEMORY[0x1CAA32FB4](v353[1], 8);
          if ((_QWORD)v352)
          {
            *((_QWORD *)&v352 + 1) = v352;
            operator delete((void *)v352);
          }
          MEMORY[0x1CAA32FB4](v351[1], 8);
          if ((_QWORD)v350)
          {
            *((_QWORD *)&v350 + 1) = v350;
            operator delete((void *)v350);
          }
          MEMORY[0x1CAA32FB4](v347, 8);
          MEMORY[0x1CAA32FB4](v344, 8);
          MEMORY[0x1CAA32FB4](v341, 8);
          MEMORY[0x1CAA32FB4](v339, 8);
          sub_1C4DC4E38(v330);
          if (v327 != v329)
            free(v327);
          v230 = (llvm **)v300;
          v99 = v304;
        }
LABEL_354:
        if (++v231 == v230)
          goto LABEL_360;
      }
    }
  }
  if (LOBYTE(v376[0]))
    goto LABEL_360;
  v288 = v36 + 1;
  v289 = v35;
  do
  {
    v289 = (_QWORD *)v289[1];
    --v288;
  }
  while (v289 != v35);
  if (v288)
  {
LABEL_360:
    v33 = 1;
  }
  else
  {
    v290 = v39 + 1;
    v291 = v38;
    do
    {
      v291 = (_QWORD *)v291[1];
      --v290;
    }
    while (v291 != v38);
    v33 = v290 != 0;
  }
  if (v361 != v360)
    free(v361);
  if (v365[1] != v365[0])
    free(v365[1]);
  if (v370 != v369)
    free(v370);
  if (v99)
    operator delete(v99);
  return v33;
}

uint64_t sub_1C587E27C(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  sub_1C4F02264(a1 + 768);
  sub_1C5010E9C(a1 + 744, *(_QWORD **)(a1 + 752));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 704), 8);
  v2 = *(void ***)(a1 + 696);
  *(_QWORD *)(a1 + 696) = 0;
  if (v2)
  {
    v5 = v2;
    sub_1C5E39EAC(&v5);
    MEMORY[0x1CAA32FC0](v2, 0x20C40960023A9);
  }
  v3 = *(void **)(a1 + 528);
  if (v3 != *(void **)(a1 + 520))
    free(v3);
  return a1;
}

uint64_t sub_1C587E308()
{
  uint64_t v0;
  _QWORD v2[3];
  void **v3;

  v0 = operator new();
  v2[0] = 0;
  v2[1] = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8F5208;
  *(_DWORD *)(v0 + 24) = 4;
  *(_QWORD *)v0 = off_1E817DAD8;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  v2[2] = 0;
  v3 = (void **)v2;
  sub_1C4765410(&v3);
  return v0;
}

void sub_1C587E384(void **a1)
{
  void **v2;

  *a1 = off_1E817DAD8;
  v2 = a1 + 4;
  sub_1C4765410(&v2);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

uint64_t sub_1C587E3CC(void **a1)
{
  void **v3;

  *a1 = off_1E817DAD8;
  v3 = a1 + 4;
  sub_1C4765410(&v3);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  return MEMORY[0x1CAA32FC0]();
}

BOOL sub_1C587E428(uint64_t a1, _QWORD *a2)
{
  _BOOL8 v3;
  void **v4;
  _BYTE v6[520];
  void *v7;
  void *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11[3];
  uint64_t v12;
  void **v13;

  sub_1C587BEE8((uint64_t)v6, (uint64_t *)(a1 + 32));
  v3 = sub_1C587C424((uint64_t)v6, a2);
  sub_1C4F02264((uint64_t)&v12);
  sub_1C5010E9C((uint64_t)v11, v11[1]);
  MEMORY[0x1CAA32FB4](v10, 8);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    v13 = v4;
    sub_1C5E39EAC(&v13);
    MEMORY[0x1CAA32FC0](v4, 0x20C40960023A9);
  }
  if (v8 != v7)
    free(v8);
  return v3;
}

void sub_1C587E4DC(uint64_t ***a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ****v6;
  uint64_t ***v7;
  int v8;
  int v9;
  unint64_t *v10;
  size_t v11;
  const void *v12;
  unint64_t v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  std::string *v18;
  int64_t v19;
  std::string *p_p;
  int v21;
  void *v22;
  std::string *v23;
  int64_t size;
  char *v25;
  int v26;
  std::string *v27;
  int64_t v28;
  char *v29;
  char *v30;
  std::string::size_type v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  int64_t v40;
  std::string *v41;
  _BYTE *v42;
  std::string *v43;
  _BYTE *v44;
  std::string::size_type v45;
  size_t v46;
  _BYTE *v47;
  void **v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  size_t v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string __p;
  _BYTE v57[32];
  __int16 v58;
  std::string::value_type *v59;
  std::string::size_type v60;
  char v61;
  const void *__dst[2];
  unint64_t v63;

  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
  {
    v11 = 0;
    HIBYTE(v63) = 0;
    v14 = __dst;
    goto LABEL_17;
  }
  v2 = ***a1;
  v3 = *(_QWORD *)(v2 + 152);
  v4 = *(unsigned int *)(v2 + 168);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v6 = (uint64_t ****)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a1)
      goto LABEL_9;
    v8 = 1;
    while (v7 != (uint64_t ***)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(uint64_t ****)(v3 + 16 * v5);
      if (v7 == a1)
      {
        v6 = (uint64_t ****)(v3 + 16 * v5);
        goto LABEL_9;
      }
    }
  }
  v6 = (uint64_t ****)(v3 + 16 * v4);
LABEL_9:
  v10 = (unint64_t *)v6[1];
  v13 = *v10;
  v12 = v10 + 2;
  v11 = v13;
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v11 >= 0x17)
  {
    v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v15 = v11 | 7;
    v16 = v15 + 1;
    v14 = (const void **)operator new(v15 + 1);
    __dst[1] = (const void *)v11;
    v63 = v16 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_16;
  }
  HIBYTE(v63) = v11;
  v14 = __dst;
  if (v11)
LABEL_16:
    memmove(v14, v12, v11);
LABEL_17:
  *((_BYTE *)v14 + v11) = 0;
  v61 = 6;
  strcpy((char *)&v59, ".dfsan");
  sub_1C4842EB8(__dst, (const void **)&v59, (uint64_t)&__p);
  v58 = 260;
  *(_QWORD *)v57 = &__p;
  llvm::Value::setName(a1, (uint64_t)v57);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v17 = a1[5];
  if (*((char *)v17 + 111) < 0)
    sub_1C47EBC30(&__p, v17[11], (unint64_t)v17[12]);
  else
    __p = *(std::string *)(v17 + 11);
  std::operator+<char>();
  v18 = std::string::append((std::string *)v57, ",");
  v55 = *v18;
  v18->__r_.__value_.__r.__words[0] = 0;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  if ((v57[23] & 0x80000000) != 0)
    operator delete(*(void **)v57);
  v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v21 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
  v22 = (void *)v55.__r_.__value_.__r.__words[0];
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v55;
  else
    v23 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v55.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v55.__r_.__value_.__l.__size_;
  if (size)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = __p.__r_.__value_.__l.__size_;
    if (v19 >= size)
    {
      v25 = (char *)p_p + v19;
      v26 = v23->__r_.__value_.__s.__data_[0];
      v27 = p_p;
      do
      {
        v28 = v19 - size;
        if (v28 == -1)
          break;
        v29 = (char *)memchr(v27, v26, v28 + 1);
        if (!v29)
          break;
        v30 = v29;
        if (!memcmp(v29, v23, size))
        {
          if (v30 != v25)
          {
            v31 = v30 - (char *)p_p;
            if (v30 - (char *)p_p != -1)
              goto LABEL_44;
          }
          break;
        }
        v27 = (std::string *)(v30 + 1);
        v19 = v25 - (v30 + 1);
      }
      while (v19 >= size);
    }
  }
  else
  {
    v31 = 0;
LABEL_44:
    std::operator+<char>();
    if (v61 >= 0)
      v32 = (const std::string::value_type *)&v59;
    else
      v32 = v59;
    if (v61 >= 0)
      v33 = v61 & 0x7F;
    else
      v33 = v60;
    v34 = std::string::append(&v53, v32, v33);
    v35 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v54, ",");
    v37 = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)v57 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    *(_QWORD *)&v57[16] = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (v57[23] >= 0)
      v38 = v57;
    else
      v38 = *(const std::string::value_type **)v57;
    if (v57[23] >= 0)
      v39 = v57[23] & 0x7F;
    else
      v39 = *(_QWORD *)&v57[8];
    std::string::replace(&__p, v31, size, v38, v39);
    if ((v57[23] & 0x80000000) != 0)
      operator delete(*(void **)v57);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v40 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &__p;
    else
      v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v40 < 1)
      goto LABEL_73;
    v42 = (char *)v41 + v40;
    v43 = v41;
    while (1)
    {
      v44 = memchr(v43, 64, v40);
      if (!v44)
        goto LABEL_73;
      if (*v44 == 64)
        break;
      v43 = (std::string *)(v44 + 1);
      v40 = v42 - (_BYTE *)v43;
      if (v42 - (_BYTE *)v43 < 1)
        goto LABEL_73;
    }
    if (v44 == v42 || (v45 = v44 - (_BYTE *)v41, v45 == -1))
    {
LABEL_73:
      sub_1C6239630(&v54, (uint64_t *)&__p);
      v58 = 1283;
      *(_QWORD *)v57 = "unsupported .symver: ";
      *(_OWORD *)&v57[16] = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
      llvm::report_fatal_error((uint64_t)v57, 1);
    }
    if (v61 >= 0)
      v46 = v61 & 0x7F;
    else
      v46 = v60;
    sub_1C484371C((uint64_t)v57, v46 + 1);
    if (v57[23] >= 0)
      v47 = v57;
    else
      v47 = *(_BYTE **)v57;
    if (v46)
    {
      if (v61 >= 0)
        v48 = (void **)&v59;
      else
        v48 = (void **)v59;
      memmove(v47, v48, v46);
    }
    *(_WORD *)&v47[v46] = 64;
    if (v57[23] >= 0)
      v49 = v57;
    else
      v49 = *(const std::string::value_type **)v57;
    if (v57[23] >= 0)
      v50 = v57[23] & 0x7F;
    else
      v50 = *(_QWORD *)&v57[8];
    std::string::replace(&__p, v45, 1uLL, v49, v50);
    if ((v57[23] & 0x80000000) != 0)
      operator delete(*(void **)v57);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &__p;
    else
      v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v52 = __p.__r_.__value_.__l.__size_;
    LLVMSetModuleInlineAsm2_0((uint64_t)a1[5], v51, v52);
  }
  if (v21 < 0)
    operator delete(v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v61 < 0)
    operator delete(v59);
  if (SHIBYTE(v63) < 0)
    operator delete((void *)__dst[0]);
}

uint64_t ***sub_1C587EA28(_QWORD *a1, const llvm::Function *a2, void *a3, uint64_t a4, char a5, uint64_t **a6)
{
  _QWORD **v10;
  llvm::Type *v11;
  uint64_t v12;
  char *v13;
  uint64_t ***v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t **v23;
  unsigned int v24;
  _QWORD **v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const llvm::Function **v34;
  const llvm::Function *v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t v48;
  uint64_t v49;
  llvm::Instruction *v50;
  llvm::Instruction *v51;
  llvm::LLVMContext *v52;
  char *v53;
  uint64_t *v54;
  const llvm::Function *v55;
  char *v56;
  llvm::Type *v57;
  llvm::Type *v58;
  _DWORD *v59;
  char *v60;
  uint64_t *v61;
  _DWORD *v63;
  _QWORD **v64;
  uint64_t ***v65;
  char v66[32];
  __int16 v67;
  uint64_t v68[4];
  __int16 v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73[2];
  __int16 v74;
  uint64_t **v75;
  _QWORD **v76;
  uint64_t v77;
  void **v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  __int16 v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  _QWORD v87[3];

  v87[1] = *MEMORY[0x1E0C80C00];
  v10 = (_QWORD **)*((_QWORD *)a2 + 3);
  v11 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8);
  v74 = 261;
  v71 = a3;
  v72 = a4;
  v12 = *((_QWORD *)a2 + 5);
  v13 = (char *)operator new(0x80uLL);
  v14 = (uint64_t ***)(v13 + 8);
  *((_DWORD *)v13 + 7) = *((_DWORD *)v13 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v13 = 0;
  v15 = llvm::Function::Function((uint64_t *)v13 + 1, (llvm::PointerType *)a6, a5, v11, (uint64_t)&v71, v12);
  llvm::Function::copyAttributesFrom((llvm::Function *)v15, a2);
  llvm::AttributeFuncs::typeIncompatible(*a6[2], 3, (uint64_t *)&v71);
  v16 = 0;
  v17 = (uint64_t *)**((_QWORD **)v13 + 1);
  v19 = (uint64_t *)(v13 + 120);
  v18 = *((_QWORD *)v13 + 15);
  if (v18)
  {
    if (*(_DWORD *)(v18 + 8) >= 2u)
      v16 = *(_QWORD *)(v18 + 48);
    else
      v16 = 0;
  }
  v68[0] = v16;
  v20 = llvm::AttributeSet::removeAttributes(v68, v17, (uint64_t)&v71);
  if (v16 == v20)
    v21 = *v19;
  else
    v21 = llvm::AttributeList::setAttributesAtIndex((_QWORD *)v13 + 15, v17, 0, v20);
  *((_QWORD *)v13 + 15) = v21;
  sub_1C5010E9C((uint64_t)v73, v73[1]);
  v22 = (_QWORD *)a1[1];
  v71 = "entry";
  v74 = 259;
  v23 = (uint64_t **)operator new();
  *v23 = (uint64_t *)(*v22 + 1600);
  v23[1] = 0;
  v24 = *((_DWORD *)v23 + 5) & 0xC0000000;
  *((_DWORD *)v23 + 4) = 22;
  *((_DWORD *)v23 + 5) = v24;
  v23[3] = 0;
  v25 = v23 + 5;
  v23[4] = 0;
  v23[5] = (uint64_t *)(v23 + 5);
  v23[6] = (uint64_t *)(v23 + 5);
  v23[7] = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v13 + 80), v23);
  v26 = (uint64_t *)*((_QWORD *)v13 + 10);
  v23[4] = (uint64_t *)(v13 + 80);
  v23[3] = v26;
  v26[1] = (uint64_t)(v23 + 3);
  *((_QWORD *)v13 + 10) = v23 + 3;
  llvm::Value::setName((uint64_t ***)v23, (uint64_t)&v71);
  if (*(_DWORD *)(*((_QWORD *)a2 + 3) + 8) >= 0x100u)
  {
    *v19 = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v13 + 15, **v14, -1, "split-stack", 0xBuLL);
    v27 = (uint64_t **)a1[43];
    v28 = a1[44];
    v29 = **v23;
    v71 = v73;
    v72 = 0x200000000;
    v77 = v29;
    v78 = &v86;
    v79 = v87;
    v80 = 0;
    v81 = 0;
    v82 = 512;
    v83 = 7;
    v84 = 0;
    v85 = 0;
    v86 = &unk_1E8167888;
    v87[0] = &unk_1E8167A08;
    v75 = v23;
    v76 = v23 + 5;
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v57 = 0;
      v56 = &byte_1C871356D;
      goto LABEL_29;
    }
    v30 = ***(_QWORD ***)a2;
    v31 = *(_QWORD *)(v30 + 152);
    v32 = *(unsigned int *)(v30 + 168);
    if ((_DWORD)v32)
    {
      LODWORD(v33) = (v32 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v34 = (const llvm::Function **)(v31 + 16 * v33);
      v35 = *v34;
      if (*v34 == a2)
      {
LABEL_28:
        v55 = v34[1];
        v58 = *(llvm::Type **)v55;
        v56 = (char *)v55 + 16;
        v57 = v58;
LABEL_29:
        v69 = 257;
        v70 = sub_1C62147C4((uint64_t)&v71, v56, v57, (uint64_t)v68, 0, 0);
        v67 = 257;
        v59 = operator new(0x90uLL);
        v59[21] = v59[21] & 0x38000000 | 2;
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = 0;
        *((_QWORD *)v59 + 2) = 0;
        *((_QWORD *)v59 + 3) = v59 + 16;
        *((_QWORD *)v59 + 4) = 0;
        *((_QWORD *)v59 + 5) = 0;
        *((_QWORD *)v59 + 6) = 0;
        *((_QWORD *)v59 + 7) = v59 + 16;
        sub_1C61DD0B0((llvm::Instruction *)(v59 + 16), v27, v28, &v70, 1, 0, 0, (uint64_t)v66, (llvm::BasicBlock *)v23);
        if (v71 != v73)
          free(v71);
        v60 = (char *)operator new(0x40uLL);
        *(_QWORD *)v60 = *(_QWORD *)a1[1] + 1576;
        *((_QWORD *)v60 + 1) = 0;
        v60[16] = 35;
        *(_OWORD *)(v60 + 44) = 0u;
        *(_OWORD *)(v60 + 33) = 0u;
        *(_OWORD *)(v60 + 17) = 0u;
        *((_WORD *)v23 + 9) &= ~0x8000u;
        v61 = v23[5];
        *((_QWORD *)v60 + 4) = v25;
        *((_QWORD *)v60 + 5) = v23;
        *((_QWORD *)v60 + 3) = v61;
        v60 += 24;
        v61[1] = (uint64_t)v60;
        v23[5] = (uint64_t *)v60;
        return v14;
      }
      v36 = 1;
      while (v35 != (const llvm::Function *)-4096)
      {
        v37 = v33 + v36++;
        v33 = v37 & (v32 - 1);
        v35 = *(const llvm::Function **)(v31 + 16 * v33);
        if (v35 == a2)
        {
          v34 = (const llvm::Function **)(v31 + 16 * v33);
          goto LABEL_28;
        }
      }
    }
    v34 = (const llvm::Function **)(v31 + 16 * v32);
    goto LABEL_28;
  }
  if ((*((_WORD *)v13 + 13) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v14);
  v38 = *((_DWORD *)v10 + 3);
  v39 = (v38 - 1);
  v64 = v10;
  v65 = (uint64_t ***)(v13 + 8);
  if (v38 == 1)
  {
    v40 = a1;
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v43 = *((_QWORD *)v13 + 12);
    v44 = (uint64_t *)operator new(8 * v39);
    v42 = v44;
    v45 = 0;
    v46 = 40 * v39;
    do
    {
      v44[v45] = v43;
      v43 += 40;
      ++v45;
      v46 -= 40;
    }
    while (v46);
    v40 = a1;
    v41 = &v44[v45];
  }
  v47 = (uint64_t **)*((_QWORD *)a2 + 3);
  v48 = v41 - v42;
  v49 = (v48 + 1);
  v74 = 257;
  v50 = (llvm::Instruction *)operator new(32 * v49 + 80);
  v51 = (llvm::Instruction *)((char *)v50 + 32 * v49);
  *((_DWORD *)v51 + 5) = *((_DWORD *)v51 + 5) & 0x38000000 | v49 & 0x7FFFFFF;
  if ((_DWORD)v48 != -1)
  {
    do
    {
      *(_QWORD *)v50 = 0;
      *((_QWORD *)v50 + 1) = 0;
      *((_QWORD *)v50 + 2) = 0;
      *((_QWORD *)v50 + 3) = v51;
      v50 = (llvm::Instruction *)((char *)v50 + 32);
    }
    while (v50 != v51);
  }
  sub_1C61DD0B0(v51, v47, (uint64_t)a2, v42, v48, 0, 0, (uint64_t)&v71, (llvm::BasicBlock *)v23);
  v52 = (llvm::LLVMContext *)v40[1];
  if (*(_BYTE *)(*v64[2] + 8) == 7)
  {
    v53 = (char *)operator new(0x40uLL);
    *(_QWORD *)v53 = *(_QWORD *)v52 + 1576;
    *((_QWORD *)v53 + 1) = 0;
    v53[16] = 29;
    *(_OWORD *)(v53 + 44) = 0u;
    *(_OWORD *)(v53 + 33) = 0u;
    *(_OWORD *)(v53 + 17) = 0u;
    *((_WORD *)v23 + 9) &= ~0x8000u;
    v54 = v23[5];
    *((_QWORD *)v53 + 4) = v25;
    *((_QWORD *)v53 + 5) = v23;
    *((_QWORD *)v53 + 3) = v54;
    v53 += 24;
    v54[1] = (uint64_t)v53;
    v23[5] = (uint64_t *)v53;
  }
  else
  {
    v63 = operator new(0x60uLL);
    v63[13] = v63[13] & 0x38000000 | 1;
    *(_QWORD *)v63 = 0;
    *((_QWORD *)v63 + 1) = 0;
    *((_QWORD *)v63 + 2) = 0;
    *((_QWORD *)v63 + 3) = v63 + 8;
    llvm::ReturnInst::ReturnInst((llvm::ReturnInst *)(v63 + 8), v52, v51, (llvm::BasicBlock *)v23);
  }
  v14 = v65;
  if (v42)
    operator delete(v42);
  return v14;
}

uint64_t sub_1C587EFD8(uint64_t a1, uint64_t ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (uint64_t ***)(a1 + 696);
  if ((sub_1C5883CEC((uint64_t ***)(a1 + 696), a2, "functional", 0xAuLL, a5, a6, a7, a8) & 1) != 0)
    return 2;
  if ((sub_1C5883CEC(v9, a2, "discard", 7uLL, v10, v11, v12, v13) & 1) != 0)
    return 1;
  if (sub_1C5883CEC(v9, a2, "custom", 6uLL, v15, v16, v17, v18))
    return 3;
  return 0;
}

uint64_t sub_1C587F060()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)qword_1ED812660);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(qword_1ED812660))
  {
    byte_1ED81265A = dword_1ED812DA8 != 0;
    __cxa_guard_release(qword_1ED812660);
  }
  return byte_1ED81265A;
}

void sub_1C587F0BC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C587F114()
{
  uint64_t v0;
  uint64_t *v1;

  return sub_1C58875E8(v1, v0);
}

_QWORD *sub_1C5883144(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  llvm::ConstantAggregateZero *v7;
  llvm::Type *v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t *v11;
  llvm::ConstantAggregateZero *v12;
  llvm::Type *v13;
  uint64_t v14;
  llvm::ConstantAggregateZero *v15;
  llvm::Type *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  char v32;
  const char *v33;
  unint64_t v34;
  char v36;
  uint64_t v37;
  llvm::ConstantAggregateZero *v38;
  llvm::Type *v39;
  llvm::Value *v40;
  _QWORD *v41;
  unint64_t v42;
  llvm::Value **v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  llvm::Value **v51;
  llvm::Value *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  unsigned __int8 **v68;
  int v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  _QWORD *v73;
  uint64_t v74;
  char v75[32];
  __int16 v76;
  char v77[32];
  __int16 v78;
  unsigned __int8 *v79;
  void *v80;
  unsigned int v81;
  _QWORD v82[8];
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v74 = a2;
  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 == 21 || v3 > 0x1B;
  if (!v4 || *(_BYTE *)(a1 + 89))
  {
    v5 = *(_QWORD *)a1;
    v6 = *(_QWORD *)a2;
    if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x10)
    {
      sub_1C5884548(v5, v6);
      return llvm::ConstantAggregateZero::get(v7, v8);
    }
    return *(_QWORD **)(v5 + 72);
  }
  v10 = sub_1C509B72C((uint64_t *)(a1 + 112), &v74);
  result = (_QWORD *)v10[1];
  if (result)
    return result;
  v11 = (uint64_t *)v74;
  if (!v74 || *(_BYTE *)(v74 + 16) != 21)
  {
    v14 = *(_QWORD *)a1;
    if ((*(_DWORD *)(*(_QWORD *)v74 + 8) & 0xFE) == 0x10)
    {
      sub_1C5884548(v14, *(_QWORD *)v74);
      result = llvm::ConstantAggregateZero::get(v15, v16);
    }
    else
    {
      result = *(_QWORD **)(v14 + 72);
    }
    v10[1] = result;
    return result;
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *(_QWORD *)a1;
    if ((*(_DWORD *)(*(_QWORD *)v74 + 8) & 0xFE) == 0x10)
    {
      sub_1C5884548(v5, *(_QWORD *)v74);
      return llvm::ConstantAggregateZero::get(v12, v13);
    }
    return *(_QWORD **)(v5 + 72);
  }
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(v17 + 40);
  v73 = v10;
  if ((*(_WORD *)(v17 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v17);
    v19 = *(uint64_t **)(v17 + 88);
    if ((*(_WORD *)(v17 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v17);
      v20 = *(uint64_t **)(v17 + 88);
      goto LABEL_24;
    }
  }
  else
  {
    v19 = *(uint64_t **)(v17 + 88);
  }
  v20 = v19;
LABEL_24:
  v21 = &v20[5 * *(_QWORD *)(v17 + 96)];
  if (v19 == v21)
    goto LABEL_44;
  v22 = 0;
  v23 = v18 + 272;
  while (1)
  {
    v24 = *v19;
    v25 = *(unsigned __int8 *)(*v19 + 8);
    if (v25 <= 0x11)
    {
      if (((1 << v25) & 0xAC7F) != 0)
        goto LABEL_28;
      if (((1 << v25) & 0x30000) != 0)
        goto LABEL_101;
    }
    if ((v25 & 0xFE) == 0x12 || v25 == 21)
    {
LABEL_101:
      if (llvm::Type::isSizedDerivedType(*v19, 0))
        break;
    }
    if (v19 == v11)
      goto LABEL_44;
LABEL_32:
    v19 += 5;
    if (v19 == v21)
      goto LABEL_44;
  }
  v24 = *v19;
LABEL_28:
  sub_1C5884548(*(_QWORD *)a1, v24);
  v27 = v26;
  sub_1C4768AD0(v23, v26);
  v29 = v28;
  v31 = v30 == 1;
  llvm::DataLayout::getAlignment(v23, v27);
  if (v31)
  {
    v36 = v32;
    v32 = v36;
  }
  v34 = ((1 << v32) + ((unint64_t)(v29 + 7) >> 3) - 1) & -(1 << v32);
  if (v19 != v11)
  {
    v22 += (v34 + (1 << word_1ED812658) - 1) & -(1 << word_1ED812658);
    if (v22 > 0x320)
      goto LABEL_44;
    goto LABEL_32;
  }
  if (v22 + v34 > 0x320)
  {
LABEL_44:
    v37 = *(_QWORD *)a1;
    if ((*(_DWORD *)(*v11 + 8) & 0xFE) == 0x10)
    {
      sub_1C5884548(v37, *v11);
      v40 = (llvm::Value *)llvm::ConstantAggregateZero::get(v38, v39);
    }
    else
    {
      v40 = *(llvm::Value **)(v37 + 72);
    }
    v41 = v73;
    goto LABEL_48;
  }
  v53 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (v53)
    v54 = v53 - 24;
  else
    v54 = 0;
  v55 = *(_QWORD *)(v54 + 48);
  if (v55)
    v56 = v55 - 24;
  else
    v56 = 0;
  sub_1C4773D54((uint64_t)&v80, v56, 0, 0, 0);
  v57 = sub_1C588778C((uint64_t *)a1, *v11, v22, (uint64_t)&v80);
  sub_1C5884548(*(_QWORD *)a1, *v11);
  v59 = v58;
  v60 = word_1ED812658;
  v76 = 257;
  v61 = (char *)operator new(0x60uLL);
  v62 = v61;
  v40 = (llvm::Value *)(v61 + 32);
  *((_QWORD *)v61 + 2) = 0;
  *((_QWORD *)v61 + 3) = v61 + 32;
  v78 = 257;
  *((_QWORD *)v61 + 4) = v59;
  *((_QWORD *)v61 + 5) = 0;
  *((_WORD *)v61 + 24) = 60;
  *((_DWORD *)v61 + 13) = 1;
  *(_OWORD *)(v61 + 56) = 0u;
  *(_OWORD *)(v61 + 72) = 0u;
  *((_DWORD *)v61 + 22) = 0;
  *(_QWORD *)v61 = v57;
  *((_QWORD *)v61 + 1) = 0;
  if (v57)
  {
    v65 = *((_QWORD *)v57 + 1);
    v64 = v57 + 8;
    v63 = v65;
    *((_QWORD *)v61 + 1) = v65;
    if (v65)
      *(_QWORD *)(v63 + 16) = v61 + 8;
    *((_QWORD *)v61 + 2) = v64;
    *v64 = v61;
  }
  *((_WORD *)v61 + 25) = 2 * (v60 & 0x3F);
  v61[92] = 1;
  llvm::Value::setName((uint64_t ***)v61 + 4, (uint64_t)v77);
  (*(void (**)(uint64_t, llvm::Value *, char *, _QWORD, _QWORD))(*(_QWORD *)v83 + 16))(v83, v40, v75, v82[4], v82[5]);
  v66 = (char *)v80;
  if (v81)
  {
    v67 = (char *)v80 + 16 * v81;
    v68 = (unsigned __int8 **)(v62 + 80);
    while (1)
    {
      v69 = *(_DWORD *)v66;
      v70 = (unsigned __int8 *)*((_QWORD *)v66 + 1);
      if (v70)
      {
        if (!v69)
        {
          v79 = (unsigned __int8 *)*((_QWORD *)v66 + 1);
          llvm::MetadataTracking::track((uint64_t)&v79, v70, 2);
          v71 = *v68;
          goto LABEL_92;
        }
      }
      else
      {
        v71 = *v68;
        if (!*v68 && (v62[55] & 0x20) == 0)
          goto LABEL_89;
        if (!v69)
        {
          v79 = 0;
LABEL_92:
          if (v71)
            llvm::MetadataTracking::untrack((uint64_t)(v62 + 80), v71);
          v72 = v79;
          *v68 = v79;
          if (v72)
            llvm::MetadataTracking::retrack((uint64_t)&v79, v72, (uint64_t)(v62 + 80));
          goto LABEL_89;
        }
      }
      llvm::Value::setMetadata(v40, *(_DWORD *)v66, (llvm::MDNode *)v70);
LABEL_89:
      v66 += 16;
      if (v66 == v67)
      {
        v66 = (char *)v80;
        break;
      }
    }
  }
  v41 = v73;
  if (v66 != (char *)v82)
    free(v66);
LABEL_48:
  v41[1] = v40;
  v43 = *(llvm::Value ***)(a1 + 264);
  v42 = *(_QWORD *)(a1 + 272);
  if ((unint64_t)v43 >= v42)
  {
    v45 = *(_QWORD **)(a1 + 256);
    v46 = v43 - (llvm::Value **)v45;
    v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 61)
      abort();
    v48 = v42 - (_QWORD)v45;
    if (v48 >> 2 > v47)
      v47 = v48 >> 2;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
      v49 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v49 = v47;
    if (v49)
    {
      if (v49 >> 61)
        sub_1C4764EE4();
      v50 = (char *)operator new(8 * v49);
    }
    else
    {
      v50 = 0;
    }
    v51 = (llvm::Value **)&v50[8 * v46];
    *v51 = v40;
    v44 = v51 + 1;
    if (v43 != v45)
    {
      do
      {
        v52 = *--v43;
        *--v51 = v52;
      }
      while (v43 != v45);
      v43 = *(llvm::Value ***)(a1 + 256);
    }
    *(_QWORD *)(a1 + 256) = v51;
    *(_QWORD *)(a1 + 264) = v44;
    *(_QWORD *)(a1 + 272) = &v50[8 * v49];
    if (v43)
      operator delete(v43);
  }
  else
  {
    *v43 = v40;
    v44 = v43 + 1;
  }
  *(_QWORD *)(a1 + 264) = v44;
  return (_QWORD *)v41[1];
}

llvm::Value *sub_1C58836E4(uint64_t *a1, uint64_t a2)
{
  unsigned int v3;
  llvm::Value **v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::LLVMContext *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char *v20;
  char *v21;
  llvm::Value *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int *v26;
  int *v27;
  unsigned __int8 **v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int *v32;
  unsigned __int8 *v33;
  _WORD v34[20];
  uint64_t v35;
  _QWORD v36[4];
  __int16 v37;
  unsigned __int8 *v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v35 = a2;
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 != 21 && v3 <= 0x1B)
    goto LABEL_10;
  v5 = (llvm::Value **)(sub_1C509B72C(a1 + 17, &v35) + 1);
  if (!*v5)
  {
    v6 = v35;
    if (!v35 || *(_BYTE *)(v35 + 16) != 21)
    {
      v8 = *a1;
      goto LABEL_14;
    }
    if (*((_BYTE *)a1 + 88))
    {
LABEL_10:
      v5 = (llvm::Value **)(*a1 + 40);
      return *v5;
    }
    v8 = *a1;
    if (*(_QWORD *)(*a1 + 808) <= (unint64_t)*(unsigned int *)(v35 + 32))
    {
LABEL_14:
      *v5 = *(llvm::Value **)(v8 + 40);
      return *v5;
    }
    v9 = *(_QWORD *)(a1[1] + 80);
    if (v9)
      v10 = v9 - 24;
    else
      v10 = 0;
    v11 = *(_QWORD *)(v10 + 48);
    if (v11)
      v12 = v11 - 24;
    else
      v12 = 0;
    sub_1C4773D54((uint64_t)&v39, v12, 0, 0, 0);
    v13 = *(unsigned int *)(v6 + 32);
    v14 = *(llvm::LLVMContext **)(*a1 + 88);
    v15 = *(uint64_t **)(*a1 + 96);
    v36[0] = "_dfsarg_o";
    v37 = 259;
    v16 = sub_1C61256F0((uint64_t)&v39, v14, v15, 0, v13, (uint64_t)v36);
    v17 = *(_QWORD *)(*a1 + 24);
    v34[16] = 257;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v42 + 56) + 40) + 272, v17);
    v19 = v18;
    v20 = (char *)operator new(0x60uLL);
    v21 = v20;
    v22 = (llvm::Value *)(v20 + 32);
    *((_QWORD *)v20 + 2) = 0;
    *((_QWORD *)v20 + 3) = v20 + 32;
    v37 = 257;
    *((_QWORD *)v20 + 4) = v17;
    *((_QWORD *)v20 + 5) = 0;
    *((_WORD *)v20 + 24) = 60;
    *((_DWORD *)v20 + 13) = 1;
    *(_OWORD *)(v20 + 56) = 0u;
    *(_OWORD *)(v20 + 72) = 0u;
    *((_DWORD *)v20 + 22) = 0;
    *(_QWORD *)v20 = v16;
    *((_QWORD *)v20 + 1) = 0;
    if (v16)
    {
      v25 = *(_QWORD *)(v16 + 8);
      v24 = (_QWORD *)(v16 + 8);
      v23 = v25;
      *((_QWORD *)v20 + 1) = v25;
      if (v25)
        *(_QWORD *)(v23 + 16) = v20 + 8;
      *((_QWORD *)v20 + 2) = v24;
      *v24 = v20;
    }
    *((_WORD *)v20 + 25) = 2 * (v19 & 0x3F);
    v20[92] = 1;
    llvm::Value::setName((uint64_t ***)v20 + 4, (uint64_t)v36);
    (*(void (**)(uint64_t, llvm::Value *, _WORD *, uint64_t, uint64_t))(*(_QWORD *)v44 + 16))(v44, v22, v34, v42, v43);
    v26 = (int *)v39;
    if (!v40)
    {
LABEL_26:
      *v5 = v22;
      if (v26 != (int *)&v41)
        free(v26);
      return *v5;
    }
    v27 = (int *)((char *)v39 + 16 * v40);
    v28 = (unsigned __int8 **)(v21 + 80);
    while (1)
    {
      v29 = *v26;
      v30 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
      if (v30)
      {
        v32 = v26;
        if (!v29)
        {
          v38 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
          llvm::MetadataTracking::track((uint64_t)&v38, v30, 2);
          v31 = *v28;
          goto LABEL_40;
        }
      }
      else
      {
        v31 = *v28;
        if (!*v28 && (v21[55] & 0x20) == 0)
          goto LABEL_37;
        v32 = v26;
        if (!v29)
        {
          v38 = 0;
LABEL_40:
          if (v31)
            llvm::MetadataTracking::untrack((uint64_t)(v21 + 80), v31);
          v33 = v38;
          *v28 = v38;
          if (v33)
            llvm::MetadataTracking::retrack((uint64_t)&v38, v33, (uint64_t)(v21 + 80));
          goto LABEL_36;
        }
      }
      llvm::Value::setMetadata(v22, v29, (llvm::MDNode *)v30);
LABEL_36:
      v26 = v32;
LABEL_37:
      v26 += 4;
      if (v26 == v27)
      {
        v26 = (int *)v39;
        goto LABEL_26;
      }
    }
  }
  return *v5;
}

uint64_t *sub_1C58839D0(uint64_t a1, uint64_t *a2, const llvm::Instruction *a3)
{
  _QWORD *v5;
  const llvm::Value *v6;
  uint64_t *v8;
  uint64_t *v9;
  void *v10[2];
  _QWORD v11[16];

  v11[15] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x10)
  {
    v5 = sub_1C509B72C((uint64_t *)(a1 + 304), &v9);
    v6 = (const llvm::Value *)v5[1];
    if (v6 && llvm::DominatorTree::dominates((llvm::DominatorTree *)(a1 + 16), v6, a3))
    {
      return (uint64_t *)v5[1];
    }
    else
    {
      sub_1C4773D54((uint64_t)v10, (uint64_t)a3, 0, 0, 0);
      a2 = sub_1C588A8B8(a1, v9, (uint64_t)v10);
      v5[1] = a2;
      if (v10[0] != v11)
      {
        v8 = a2;
        free(v10[0]);
        return v8;
      }
    }
  }
  return a2;
}

uint64_t sub_1C5883ACC(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  llvm::ConstantInt **v6;
  const llvm::APInt *v7;
  uint64_t v8;
  llvm::ValueHandleBase *Signed;
  const char *v11;
  __int16 v12;

  v2 = *(_QWORD *)(a1 + 16);
  **(_BYTE **)a1 = 1;
  v3 = operator new(0x78uLL);
  v4 = (uint64_t)(v3 + 8);
  v3[13] = v3[13] & 0x38000000 | 1;
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = v3 + 8;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(llvm::ConstantInt ***)(v2 + 24);
  if (sub_1C587F060())
    v8 = dword_1ED812DA8;
  else
    v8 = 0;
  Signed = llvm::ConstantInt::getSigned(v6, v8, v7);
  v11 = "__dfsan_track_origins";
  v12 = 259;
  return llvm::GlobalVariable::GlobalVariable(v4, v5, (llvm::PointerType *)v6, 1, 5, (uint64_t)Signed, (uint64_t)&v11, 0, 0, 0, 0);
}

uint64_t sub_1C5883B94(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  llvm::ConstantInt *v5;
  llvm::Value **v6;
  const char *v8;
  __int16 v9;

  v2 = operator new(0x78uLL);
  v3 = (uint64_t)(v2 + 8);
  v2[13] = v2[13] & 0x38000000 | 1;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 8;
  v4 = *(_QWORD *)a1;
  v5 = **(llvm::ConstantInt ***)(a1 + 8);
  v6 = llvm::ConstantInt::get(v5, 8, 0);
  v8 = "__dfsan_shadow_width_bits";
  v9 = 259;
  return llvm::GlobalVariable::GlobalVariable(v3, v4, v5, 1, 5, (uint64_t)v6, (uint64_t)&v8, 0, 0, 0, 0);
}

uint64_t sub_1C5883C40(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  llvm::ConstantInt *v5;
  llvm::Value **v6;
  const char *v8;
  __int16 v9;

  v2 = operator new(0x78uLL);
  v3 = (uint64_t)(v2 + 8);
  v2[13] = v2[13] & 0x38000000 | 1;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 8;
  v4 = *(_QWORD *)a1;
  v5 = **(llvm::ConstantInt ***)(a1 + 8);
  v6 = llvm::ConstantInt::get(v5, 1, 0);
  v8 = "__dfsan_shadow_width_bytes";
  v9 = 259;
  return llvm::GlobalVariable::GlobalVariable(v3, v4, v5, 1, 5, (uint64_t)v6, (uint64_t)&v8, 0, 0, 0, 0);
}

uint64_t sub_1C5883CEC(uint64_t ***a1, uint64_t ***a2, unsigned __int8 *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  char v17;
  unsigned __int8 *v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ****v27;
  uint64_t ***v28;
  int v29;
  int v30;
  uint64_t ***v31;
  unsigned __int8 *v32;
  size_t v33;
  size_t v34;

  v12 = a2[5];
  v13 = *a1;
  v16 = (unsigned __int8 *)v12[21];
  v14 = v12 + 21;
  v15 = v16;
  v17 = *((_BYTE *)v14 + 23);
  if (v17 >= 0)
    v18 = (unsigned __int8 *)v14;
  else
    v18 = v15;
  v19 = (size_t)v14[1];
  if (v17 >= 0)
    v20 = v17 & 0x7F;
  else
    v20 = v19;
  if (llvm::SpecialCaseList::inSectionBlame(v13, "dataflow", 8uLL, "src", 3uLL, v18, v20, a8, a3, a4))
    return 1;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v33 = 0;
    v32 = (unsigned __int8 *)&byte_1C871356D;
    return llvm::SpecialCaseList::inSectionBlame(*a1, "dataflow", 8uLL, "fun", 3uLL, v32, v33, v21, a3, a4) != 0;
  }
  v23 = ***a2;
  v24 = *(_QWORD *)(v23 + 152);
  v25 = *(unsigned int *)(v23 + 168);
  if (!(_DWORD)v25)
    goto LABEL_16;
  LODWORD(v26) = (v25 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v27 = (uint64_t ****)(v24 + 16 * v26);
  v28 = *v27;
  if (*v27 != a2)
  {
    v29 = 1;
    while (v28 != (uint64_t ***)-4096)
    {
      v30 = v26 + v29++;
      v26 = v30 & (v25 - 1);
      v28 = *(uint64_t ****)(v24 + 16 * v26);
      if (v28 == a2)
      {
        v27 = (uint64_t ****)(v24 + 16 * v26);
        goto LABEL_17;
      }
    }
LABEL_16:
    v27 = (uint64_t ****)(v24 + 16 * v25);
  }
LABEL_17:
  v31 = v27[1];
  v34 = (size_t)*v31;
  v32 = (unsigned __int8 *)(v31 + 2);
  v33 = v34;
  return llvm::SpecialCaseList::inSectionBlame(*a1, "dataflow", 8uLL, "fun", 3uLL, v32, v33, v21, a3, a4) != 0;
}

BOOL sub_1C5883E30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2)
    v4 = v3 == 5;
  else
    v4 = 0;
  if (v4 && *(_WORD *)(v2 + 18) == 53)
    return 0;
  if (v2)
    v6 = v3 == 81;
  else
    v6 = 0;
  return !v6;
}

uint64_t sub_1C5883E6C(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  const void *v5;
  const void *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  const void *v12;
  const void *v13;
  unsigned int v14;
  uint64_t i;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE v25[64];
  char *v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  _BYTE v34[64];
  void *__p;
  char *v36;
  uint64_t v37;

  v4 = v34;
  v29 = v34;
  v5 = *(const void **)(a1 + 8);
  if (v5 == *(const void **)a1)
  {
    v30 = v34;
    v6 = v5;
  }
  else
  {
    v22 = *(unsigned int *)(a1 + 16);
    v4 = malloc_type_malloc(8 * v22, 0x4065EBACuLL);
    if (!v4)
    {
      if ((_DWORD)v22)
        goto LABEL_49;
      v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v4)
        goto LABEL_49;
    }
    v30 = v4;
    v6 = *(const void **)a1;
    v5 = *(const void **)(a1 + 8);
  }
  v8 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v31 = v8;
  if (v5 == v6)
    v9 = v7;
  else
    v9 = v8;
  if (v9)
  {
    memmove(v4, v5, 8 * v9);
    v7 = *(_DWORD *)(a1 + 20);
  }
  v10 = *(_DWORD *)(a1 + 24);
  v32 = v7;
  v33 = v10;
  v36 = 0;
  v37 = 0;
  __p = 0;
  sub_1C4E19D7C(&__p, *(_BYTE **)(a1 + 96), *(_BYTE **)(a1 + 104), (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 5);
  v11 = v25;
  v12 = *(const void **)(a2 + 8);
  if (v12 != *(const void **)a2)
  {
    v23 = *(unsigned int *)(a2 + 16);
    v11 = malloc_type_malloc(8 * v23, 0x4065EBACuLL);
    if (v11 || !(_DWORD)v23 && (v11 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v24 = v11;
      v13 = *(const void **)a2;
      v12 = *(const void **)(a2 + 8);
      goto LABEL_10;
    }
LABEL_49:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v24 = v25;
  v13 = *(const void **)(a2 + 8);
LABEL_10:
  if (v12 == v13)
    v14 = *(_DWORD *)(a2 + 20);
  else
    v14 = *(_DWORD *)(a2 + 16);
  if (v14)
    memmove(v11, v12, 8 * v14);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  sub_1C4E19D7C(&v26, *(_BYTE **)(a2 + 96), *(_BYTE **)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 5);
  for (i = 0; ; ++i)
  {
    if (v36 - (_BYTE *)__p != v27 - v26)
      goto LABEL_30;
    if (__p == v36)
      break;
    v16 = v26 + 16;
    v17 = (char *)__p + 16;
    while (1)
    {
      v18 = v17 - 16;
      if (*((_QWORD *)v17 - 2) != *((_QWORD *)v16 - 2))
        break;
      v19 = v16[8];
      if (v17[8])
        v20 = v19 == 0;
      else
        v20 = 1;
      if (v20)
      {
        if ((v17[8] == 0) == (v19 != 0))
          break;
      }
      else if (*(_DWORD *)v17 != *(_DWORD *)v16)
      {
        break;
      }
      v16 += 32;
      v17 += 32;
      if (v18 + 32 == v36)
        goto LABEL_31;
    }
LABEL_30:
    sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v29);
  }
LABEL_31:
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v24 != v25)
    free(v24);
  if (__p)
  {
    v36 = (char *)__p;
    operator delete(__p);
  }
  if (v30 != v29)
    free(v30);
  return i;
}

void sub_1C58840E0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BYTE *v6;
  const void *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _BYTE *v13;
  const void *v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  _BYTE *v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  int v37;
  unsigned int v38;
  int v39;
  _BYTE v40[64];
  void *__p;
  __int128 v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;
  _BYTE v47[57];
  void *v48;
  __int128 v49;
  _BYTE *v50;
  _BYTE *v51;
  int v52;
  unsigned int v53;
  int v54;
  _BYTE v55[64];
  char *v56;
  __int128 v57;
  _BYTE *v58;
  _BYTE *v59;
  unint64_t v60;
  int v61;
  _BYTE v62[64];
  void *v63;
  __int128 v64;
  _BYTE *v65;
  _BYTE *v66;
  int v67;
  int v68;
  int v69;
  _BYTE v70[64];
  char *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;

  v6 = v47;
  v43 = v47;
  v7 = *(const void **)(a1 + 8);
  if (v7 == *(const void **)a1)
  {
    v44 = v47;
    v8 = v7;
  }
  else
  {
    v33 = *(unsigned int *)(a1 + 16);
    v6 = malloc_type_malloc(8 * v33, 0x4065EBACuLL);
    if (!v6)
    {
      if ((_DWORD)v33)
        goto LABEL_74;
      v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6)
        goto LABEL_74;
    }
    v44 = v6;
    v8 = *(const void **)a1;
    v7 = *(const void **)(a1 + 8);
  }
  v10 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 20);
  LODWORD(v45) = v10;
  if (v7 == v8)
    v11 = v9;
  else
    v11 = v10;
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    v9 = *(_DWORD *)(a1 + 20);
  }
  v12 = *(_DWORD *)(a1 + 24);
  HIDWORD(v45) = v9;
  v46 = v12;
  v49 = 0uLL;
  v48 = 0;
  sub_1C4E19D7C(&v48, *(_BYTE **)(a1 + 96), *(_BYTE **)(a1 + 104), (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 5);
  v13 = v40;
  v14 = *(const void **)(a2 + 8);
  if (v14 != *(const void **)a2)
  {
    v34 = *(unsigned int *)(a2 + 16);
    v13 = malloc_type_malloc(8 * v34, 0x4065EBACuLL);
    if (v13 || !(_DWORD)v34 && (v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v36 = v13;
      v15 = *(const void **)a2;
      v14 = *(const void **)(a2 + 8);
      goto LABEL_10;
    }
LABEL_74:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v36 = v40;
  v15 = *(const void **)(a2 + 8);
LABEL_10:
  v16 = *(_DWORD *)(a2 + 20);
  v37 = *(_DWORD *)(a2 + 16);
  if (v14 == v15)
    v17 = *(_DWORD *)(a2 + 20);
  else
    v17 = *(_DWORD *)(a2 + 16);
  if (v17)
  {
    memmove(v13, v14, 8 * v17);
    v16 = *(_DWORD *)(a2 + 20);
  }
  v38 = v16;
  v39 = *(_DWORD *)(a2 + 24);
  v42 = 0uLL;
  __p = 0;
  sub_1C4E19D7C(&__p, *(_BYTE **)(a2 + 96), *(_BYTE **)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 5);
  v58 = v62;
  if (v44 == v43)
  {
    v59 = v62;
    v18 = HIDWORD(v45);
    if (HIDWORD(v45))
      memmove(v62, v44, 8 * HIDWORD(v45));
  }
  else
  {
    v59 = v44;
    v44 = v43;
    v18 = HIDWORD(v45);
  }
  v60 = __PAIR64__(v18, v45);
  v61 = v46;
  v45 = 8;
  v46 = 0;
  v19 = (char *)v48;
  v63 = v48;
  v20 = (_BYTE *)v49;
  v64 = v49;
  v49 = 0uLL;
  v48 = 0;
  v50 = v55;
  if (v36 == v40)
  {
    v51 = v55;
    v21 = v38;
    if (v38)
    {
      v35 = v20;
      memmove(v55, v36, 8 * v38);
      v20 = v35;
    }
  }
  else
  {
    v51 = v36;
    v36 = v40;
    v21 = v38;
  }
  v52 = v37;
  v53 = v21;
  v54 = v39;
  v22 = (char *)__p;
  v56 = (char *)__p;
  v23 = v42;
  v57 = v42;
  v42 = 0uLL;
  v24 = v23;
  v25 = v20;
  __p = 0;
  while (1)
  {
    if (v25 - v19 != v24 - (_QWORD)v22)
      goto LABEL_36;
    if (v19 == v25)
      break;
    v26 = v22 + 16;
    v27 = v19 + 16;
    while (1)
    {
      v28 = v27 - 16;
      if (*((_QWORD *)v27 - 2) != *((_QWORD *)v26 - 2))
        break;
      v29 = v26[8];
      if (v27[8])
        v30 = v29 == 0;
      else
        v30 = 1;
      if (v30)
      {
        if ((v27[8] == 0) == (v29 != 0))
          break;
      }
      else if (*(_DWORD *)v27 != *(_DWORD *)v26)
      {
        break;
      }
      v26 += 32;
      v27 += 32;
      if (v28 + 32 == v25)
        goto LABEL_38;
    }
LABEL_36:
    *a3++ = *((_QWORD *)v25 - 4);
    sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v58);
    v22 = v56;
    v24 = v57;
    v19 = (char *)v63;
    v25 = (char *)v64;
  }
  v25 = v19;
LABEL_38:
  v65 = v70;
  if (v59 == v58)
  {
    v66 = v70;
    v31 = HIDWORD(v60);
    if (HIDWORD(v60))
      memmove(v70, v59, 8 * HIDWORD(v60));
  }
  else
  {
    v66 = v59;
    v59 = v58;
    v31 = HIDWORD(v60);
  }
  v67 = v60;
  v68 = v31;
  v69 = v61;
  v60 = 8;
  v61 = 0;
  v71 = v19;
  v72 = v25;
  v32 = *((_QWORD *)&v64 + 1);
  v64 = 0uLL;
  v63 = 0;
  v73 = v32;
  v74 = a3;
  if (v22)
  {
    *(_QWORD *)&v57 = v22;
    operator delete(v22);
  }
  if (v51 != v50)
    free(v51);
  if (v63)
  {
    *(_QWORD *)&v64 = v63;
    operator delete(v63);
  }
  if (v59 != v58)
    free(v59);
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  if (v66 != v65)
    free(v66);
  if (__p)
  {
    *(_QWORD *)&v42 = __p;
    operator delete(__p);
  }
  if (v36 != v40)
    free(v36);
  if (v48)
  {
    *(_QWORD *)&v49 = v48;
    operator delete(v48);
  }
  if (v44 != v43)
    free(v44);
}

void sub_1C5884548(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  llvm::ArrayType *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (v4 > 0x11)
    goto LABEL_9;
  if (((1 << v4) & 0xAC7F) == 0)
  {
    if (((1 << v4) & 0x30000) != 0)
    {
LABEL_14:
      if (!llvm::Type::isSizedDerivedType(a2, 0))
        return;
      v4 = *(unsigned __int8 *)(a2 + 8);
      goto LABEL_3;
    }
LABEL_9:
    if ((v4 & 0xFE) != 0x12 && v4 != 21)
      return;
    goto LABEL_14;
  }
LABEL_3:
  if (v4 != 13 && (v4 & 0xFE) != 0x12)
  {
    if (v4 == 16)
    {
      v14 = v16;
      v15 = 0x400000000;
      v7 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v7)
      {
        v8 = 0;
        v9 = 8 * v7;
        do
        {
          v10 = sub_1C5884548(a1, *(_QWORD *)(*(_QWORD *)(a2 + 16) + v8));
          v11 = v15;
          if (v15 >= (unint64_t)HIDWORD(v15))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v15 + 1, 8);
            v11 = v15;
          }
          *((_QWORD *)v14 + v11) = v10;
          v12 = (v15 + 1);
          LODWORD(v15) = v15 + 1;
          v8 += 8;
        }
        while (v9 != v8);
        v13 = v14;
      }
      else
      {
        v12 = 0;
        v13 = v16;
      }
      llvm::StructType::get(*(uint64_t **)(a1 + 8), (uint64_t)v13, v12, 0);
      if (v14 != v16)
        free(v14);
    }
    else if (v4 == 17)
    {
      v5 = (llvm::ArrayType *)sub_1C5884548(a1, *(_QWORD *)(a2 + 24));
      llvm::ArrayType::get(v5, *(llvm::Type **)(a2 + 32));
    }
  }
}

unsigned __int8 *sub_1C5884724(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v4;
  llvm::PointerType *v5;
  uint64_t v6;
  const char *v8;
  __int16 v9;

  v4 = *(unsigned __int8 **)(a1 + 104);
  sub_1C5884548(a1, a2);
  v6 = llvm::PointerType::get(v5, 0);
  v8 = "_dfsret";
  v9 = 259;
  return sub_1C5098D9C(a3, v4, v6, (uint64_t)&v8);
}

void sub_1C5884780(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  llvm::Value *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[32];
  __int16 v11;
  uint64_t v12[2];
  void *v13[2];
  _QWORD v14[16];

  v14[15] = *MEMORY[0x1E0C80C00];
  if (byte_1ED812B68)
  {
    sub_1C4773D54((uint64_t)v13, a2, 0, 0, 0);
    v5 = sub_1C5883144((uint64_t)a1, a3);
    if (sub_1C587F060())
    {
      v6 = sub_1C58836E4(a1, a3);
      v7 = *(uint64_t ***)(*a1 + 424);
      v8 = *(_QWORD *)(*a1 + 432);
      v12[0] = (uint64_t)v5;
      v12[1] = (uint64_t)v6;
      v11 = 257;
      v9 = 2;
    }
    else
    {
      v7 = *(uint64_t ***)(*a1 + 408);
      v8 = *(_QWORD *)(*a1 + 416);
      v12[0] = (uint64_t)v5;
      v11 = 257;
      v9 = 1;
    }
    sub_1C4774778((uint64_t *)v13, v7, v8, v12, v9, (uint64_t)v10, 0);
    if (v13[0] != v14)
      free(v13[0]);
  }
}

void sub_1C5884890(uint64_t *a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  const char *v31;
  char v32;
  char v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t **v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  char v40;
  char *v41;
  char *v42;
  unsigned __int8 **v43;
  llvm::Value *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 ***v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unsigned __int8 **v53;
  int v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  llvm::LLVMContext *v61;
  uint64_t *v62;
  uint64_t v63;
  char v64;
  char *v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t **v73;
  uint64_t v74;
  llvm::Value *v75;
  char *v76;
  char *v77;
  unsigned __int8 **v78;
  int v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  llvm::BasicBlock *v87;
  const llvm::Twine *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  BOOL v99;
  const char *v100;
  char v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t *v107;
  llvm::ConstantAggregateZero *v108;
  llvm::Type *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  char v114;
  char *v115;
  char *v116;
  void *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131;
  char *v132;
  char *v133;
  void *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  llvm *v140;
  llvm::BasicBlock *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  unsigned __int8 **v154;
  int v155;
  unsigned __int8 *v156;
  unsigned __int8 *v157;
  unsigned __int8 *v158;
  char *v159;
  char *v160;
  unsigned __int8 **v161;
  int v162;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t **v171;
  uint64_t v172;
  std::string v173;
  void *__p;
  __int16 v175;
  unsigned __int8 *v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  __int16 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;

  v3 = (uint64_t **)a1;
  v191 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)(a2 - 32);
  v4 = *(_QWORD *)(a2 - 32);
  if (!v4)
  {
    v6 = MEMORY[0x10];
LABEL_7:
    if (v6 == 24)
      goto LABEL_8;
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  v6 = *(unsigned __int8 *)(v4 + 16);
  if (*(_BYTE *)(v4 + 16))
    goto LABEL_7;
  if (*(_QWORD *)(v4 + 24) != *(_QWORD *)(a2 + 72))
    goto LABEL_9;
  if ((*(_BYTE *)(v4 + 33) & 0x20) != 0)
  {
LABEL_8:
    sub_1C58875E8(a1, a2);
    return;
  }
LABEL_10:
  if ((llvm::Value *)v4 == llvm::Value::stripPointerCasts(*(llvm::Value **)(*(_QWORD *)*a1 + 352)))
    return;
  v7 = **v3;
  v8 = *v5;
  v185 = 0;
  if ((sub_1C6144BDC(*(_QWORD *)(v7 + 704), *(_DWORD *)(v7 + 720), v8, &v185) & 1) != 0)
    v9 = v185;
  else
    v9 = (void *)(*(_QWORD *)(v7 + 704) + 16 * *(unsigned int *)(v7 + 720));
  v171 = v3;
  v172 = a2;
  if (v9 != (void *)(*(_QWORD *)(**v3 + 704) + 16 * *(unsigned int *)(**v3 + 720)))
  {
    v10 = (uint64_t ***)*((_QWORD *)v9 + 1);
    sub_1C4773D54((uint64_t)&v185, a2, 0, 0, 0);
    v17 = (char *)&loc_1C5884A3C
        + 4 * word_1C86620E6[sub_1C587EFD8(**v3, v10, v11, v12, v13, v14, v15, v16)];
    __asm { BR              X10 }
  }
  sub_1C4773D54((uint64_t)&v185, a2, 0, 0, 0);
  v170 = sub_1C587F060();
  v18 = *(_QWORD *)(a2 + 72);
  v168 = (*(_DWORD *)(v18 + 12) - 1);
  v169 = *(_QWORD *)((*v3)[1] + 40) + 272;
  if (*(_DWORD *)(v18 + 12) != 1)
  {
    v19 = 0;
    v20 = 0;
    v21 = &unk_1ED812000;
    v167 = v18;
    while (1)
    {
      v22 = *v3;
      v23 = 32 * v19;
      if (v170)
      {
        v24 = sub_1C5883144((uint64_t)*v3, *(_QWORD *)(v172 - 32 * (*(_DWORD *)(v172 + 20) & 0x7FFFFFF) + 32 * v19));
        v22 = *v3;
        if (*(_QWORD *)(**v3 + 808) > v19 && !sub_1C5887718((uint64_t)v24))
          break;
      }
LABEL_22:
      ++v19;
      sub_1C5884548(*v22, *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * v19));
      v26 = v25;
      sub_1C4768AD0(v169, v25);
      v28 = v27;
      v30 = v29 == 1;
      llvm::DataLayout::getAlignment(v169, v26);
      v33 = v32;
      if (v30)
      v34 = ((1 << v33) + ((unint64_t)(v28 + 7) >> 3) - 1) & -(1 << v33);
      if (v20 + v34 > 0x320)
        goto LABEL_78;
      v35 = sub_1C5883144((uint64_t)*v3, *(_QWORD *)(v172 - 32 * (*(_DWORD *)(v172 + 20) & 0x7FFFFFF) + v23));
      v36 = v3;
      v37 = v35;
      v38 = sub_1C588778C(*v36, *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * v19), v20, (uint64_t)&v185);
      v39 = v21;
      v40 = v21[1624];
      v41 = (char *)operator new(0x80uLL);
      v42 = v41;
      *((_DWORD *)v41 + 21) = *((_DWORD *)v41 + 21) & 0x38000000 | 2;
      *(_QWORD *)v41 = 0;
      *((_QWORD *)v41 + 2) = 0;
      *((_QWORD *)v41 + 1) = 0;
      *((_QWORD *)v41 + 5) = 0;
      *((_QWORD *)v41 + 6) = 0;
      *((_QWORD *)v41 + 4) = 0;
      v43 = (unsigned __int8 **)(v41 + 32);
      *((_QWORD *)v41 + 8) = **(_QWORD **)*v37 + 1576;
      v44 = (llvm::Value *)(v41 + 64);
      *((_QWORD *)v41 + 3) = v41 + 64;
      *((_QWORD *)v41 + 7) = v41 + 64;
      *((_QWORD *)v41 + 9) = 0;
      v41[80] = 61;
      v41[81] = 0;
      *((_WORD *)v41 + 41) = 0;
      *((_DWORD *)v41 + 21) = 2;
      *(_OWORD *)(v41 + 88) = 0u;
      *(_OWORD *)(v41 + 104) = 0u;
      *((_DWORD *)v41 + 30) = 0;
      *(_QWORD *)v41 = v37;
      v47 = v37[1];
      v46 = v37 + 1;
      v45 = v47;
      *((_QWORD *)v41 + 1) = v47;
      if (v47)
        *(_QWORD *)(v45 + 16) = v41 + 8;
      *((_QWORD *)v41 + 2) = v46;
      *v46 = v41;
      if (*((_QWORD *)v41 + 4))
      {
        **((_QWORD **)v41 + 6) = *((_QWORD *)v41 + 5);
        v83 = *((_QWORD *)v41 + 5);
        if (v83)
          *(_QWORD *)(v83 + 16) = *((_QWORD *)v41 + 6);
      }
      *v43 = v38;
      if (v38)
      {
        v50 = *((_QWORD *)v38 + 1);
        v49 = (unsigned __int8 ***)(v38 + 8);
        v48 = v50;
        *((_QWORD *)v41 + 5) = v50;
        if (v50)
          *(_QWORD *)(v48 + 16) = v41 + 40;
        *((_QWORD *)v41 + 6) = v49;
        *v49 = v43;
      }
      *((_WORD *)v41 + 41) = 2 * (v40 & 0x3F);
      v41[124] = 1;
      v181 = 257;
      (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v190 + 16))(v190, v44, &v178, v188, v189);
      if (v186)
      {
        v51 = v185;
        v52 = &v185[16 * v186];
        v53 = (unsigned __int8 **)(v42 + 112);
        do
        {
          v54 = *(_DWORD *)v51;
          v55 = (unsigned __int8 *)*((_QWORD *)v51 + 1);
          if (v55)
          {
            if (!v54)
            {
              v176 = (unsigned __int8 *)*((_QWORD *)v51 + 1);
              llvm::MetadataTracking::track((uint64_t)&v176, v55, 2);
              v56 = *v53;
              goto LABEL_46;
            }
          }
          else
          {
            v56 = *v53;
            if (!*v53 && (v42[87] & 0x20) == 0)
              goto LABEL_43;
            if (!v54)
            {
              v176 = 0;
LABEL_46:
              if (v56)
                llvm::MetadataTracking::untrack((uint64_t)(v42 + 112), v56);
              v57 = v176;
              *v53 = v176;
              if (v57)
                llvm::MetadataTracking::retrack((uint64_t)&v176, v57, (uint64_t)(v42 + 112));
              goto LABEL_43;
            }
          }
          llvm::Value::setMetadata(v44, *(_DWORD *)v51, (llvm::MDNode *)v55);
LABEL_43:
          v51 += 16;
        }
        while (v51 != v52);
      }
      v21 = v39;
      v20 += (v34 + (1 << v39[1624]) - 1) & -(int)(1 << v39[1624]);
      v18 = v167;
      v3 = v171;
      if (v19 == v168)
        goto LABEL_78;
    }
    v58 = v18;
    v59 = (uint64_t *)sub_1C58836E4(v22, *(_QWORD *)(v172 - 32 * (*(_DWORD *)(v172 + 20) & 0x7FFFFFF) + 32 * v19));
    v60 = **v3;
    v61 = *(llvm::LLVMContext **)(v60 + 88);
    v62 = *(uint64_t **)(v60 + 96);
    v178 = "_dfsarg_o";
    v181 = 259;
    v63 = sub_1C61256F0((uint64_t)&v185, v61, v62, 0, v19, (uint64_t)&v178);
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v188 + 56) + 40) + 272, *v59);
    v166 = v64;
    v65 = (char *)operator new(0x80uLL);
    v66 = v65;
    *((_DWORD *)v65 + 21) = *((_DWORD *)v65 + 21) & 0x38000000 | 2;
    *(_QWORD *)v65 = 0;
    *((_QWORD *)v65 + 2) = 0;
    *((_QWORD *)v65 + 1) = 0;
    *((_QWORD *)v65 + 5) = 0;
    *((_QWORD *)v65 + 6) = 0;
    *((_QWORD *)v65 + 4) = 0;
    v67 = (uint64_t *)(v65 + 32);
    *((_QWORD *)v65 + 8) = **(_QWORD **)*v59 + 1576;
    *((_QWORD *)v65 + 3) = v65 + 64;
    *((_QWORD *)v65 + 7) = v65 + 64;
    *((_QWORD *)v65 + 9) = 0;
    v65[80] = 61;
    v65[81] = 0;
    *((_WORD *)v65 + 41) = 0;
    *((_DWORD *)v65 + 21) = 2;
    *(_OWORD *)(v65 + 88) = 0u;
    *(_OWORD *)(v65 + 104) = 0u;
    *((_DWORD *)v65 + 30) = 0;
    *(_QWORD *)v65 = v59;
    v70 = v59[1];
    v69 = v59 + 1;
    v68 = v70;
    *((_QWORD *)v65 + 1) = v70;
    if (v70)
      *(_QWORD *)(v68 + 16) = v65 + 8;
    v71 = v21;
    *((_QWORD *)v65 + 2) = v69;
    *v69 = v65;
    if (*((_QWORD *)v65 + 4))
    {
      **((_QWORD **)v65 + 6) = *((_QWORD *)v65 + 5);
      v84 = *((_QWORD *)v65 + 5);
      if (v84)
        *(_QWORD *)(v84 + 16) = *((_QWORD *)v65 + 6);
    }
    *v67 = v63;
    if (v63)
    {
      v74 = *(_QWORD *)(v63 + 8);
      v73 = (uint64_t **)(v63 + 8);
      v72 = v74;
      *((_QWORD *)v65 + 5) = v74;
      if (v74)
        *(_QWORD *)(v72 + 16) = v65 + 40;
      *((_QWORD *)v65 + 6) = v73;
      *v73 = v67;
    }
    *((_WORD *)v65 + 41) = 2 * (v166 & 0x3F);
    v65[124] = 1;
    v181 = 257;
    v75 = (llvm::Value *)(v65 + 64);
    (*(void (**)(uint64_t, char *, void **, uint64_t, uint64_t))(*(_QWORD *)v190 + 16))(v190, v65 + 64, &v178, v188, v189);
    if (!v186)
    {
LABEL_58:
      v3 = v171;
      v22 = *v171;
      v21 = v71;
      v18 = v58;
      goto LABEL_22;
    }
    v76 = v185;
    v77 = &v185[16 * v186];
    v78 = (unsigned __int8 **)(v66 + 112);
    while (1)
    {
      v79 = *(_DWORD *)v76;
      v80 = (unsigned __int8 *)*((_QWORD *)v76 + 1);
      if (v80)
      {
        if (!v79)
        {
          v176 = (unsigned __int8 *)*((_QWORD *)v76 + 1);
          llvm::MetadataTracking::track((uint64_t)&v176, v80, 2);
          v81 = *v78;
          goto LABEL_70;
        }
      }
      else
      {
        v81 = *v78;
        if (!*v78 && (v66[87] & 0x20) == 0)
          goto LABEL_67;
        if (!v79)
        {
          v176 = 0;
LABEL_70:
          if (v81)
            llvm::MetadataTracking::untrack((uint64_t)(v66 + 112), v81);
          v82 = v176;
          *v78 = v176;
          if (v82)
            llvm::MetadataTracking::retrack((uint64_t)&v176, v82, (uint64_t)(v66 + 112));
          goto LABEL_67;
        }
      }
      llvm::Value::setMetadata(v75, *(_DWORD *)v76, (llvm::MDNode *)v80);
LABEL_67:
      v76 += 16;
      if (v76 == v77)
        goto LABEL_58;
    }
  }
LABEL_78:
  v85 = v172;
  if (*(_BYTE *)(*(_QWORD *)v172 + 8) != 7)
  {
    v86 = *(unsigned __int8 *)(v172 + 16);
    if (v86 == 33)
    {
      v87 = *(llvm::BasicBlock **)(v172 - 96);
      if (llvm::BasicBlock::getSinglePredecessor(v87))
      {
        v89 = *((_QWORD *)v87 + 6);
        if (v89)
          v90 = v89 - 24;
        else
          v90 = 0;
        v85 = v172;
        goto LABEL_93;
      }
      v85 = v172;
      v140 = *(llvm **)(v172 + 40);
      v141 = (llvm::BasicBlock *)(*v3 + 2);
      v181 = 257;
      v142 = *(_QWORD *)(llvm::SplitEdge(v140, v87, v141, 0, 0, (llvm::MemorySSAUpdater *)&v178, v88) + 48);
      if (v142)
        v90 = v142 - 24;
      else
        v90 = 0;
      v86 = *(unsigned __int8 *)(v172 + 16);
    }
    else
    {
      v91 = *(_QWORD *)(v172 + 32);
      if (v91)
        v92 = v91 == *(_QWORD *)(v172 + 40) + 40;
      else
        v92 = 1;
      if (v92)
        v90 = 0;
      else
        v90 = v91 - 24;
    }
    if (v86 != 84 || (*(_WORD *)(v85 + 18) & 3) != 2)
    {
LABEL_93:
      sub_1C4773D54((uint64_t)&v178, v90, 0, 0, 0);
      sub_1C5884548(**v3, *(_QWORD *)v85);
      v93 = (uint64_t *)v85;
      v95 = v94;
      sub_1C4768AD0(v169, v94);
      v97 = (unint64_t)(v96 + 7) >> 3;
      v99 = v98 == 1;
      llvm::DataLayout::getAlignment(v169, v95);
      v102 = ((1 << v101) + 0xFFFFFFFFLL + v97) & -(1 << v101);
      if (v99)
      v103 = *v3;
      v104 = **v3;
      v105 = *v93;
      v106 = v102 >= 0x321;
      v107 = v93;
      if (v106)
      {
        if ((*(_DWORD *)(v105 + 8) & 0xFE) == 0x10)
        {
          sub_1C5884548(v104, v105);
          v110 = llvm::ConstantAggregateZero::get(v108, v109);
        }
        else
        {
          v110 = *(_QWORD **)(v104 + 72);
        }
        v176 = (unsigned __int8 *)v107;
        sub_1C4EAD954(v103 + 14, &v176)[1] = v110;
LABEL_101:
        if (!v170)
        {
LABEL_102:
          if (v178 != &v180)
            free(v178);
          goto LABEL_131;
        }
        v127 = **v3;
        v128 = *(_QWORD *)(v127 + 24);
        v129 = *(_QWORD *)(v127 + 112);
        __p = "_dfsret_o";
        v175 = 259;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v182 + 56) + 40) + 272, v128);
        v131 = v130;
        v132 = (char *)operator new(0x60uLL);
        v133 = v132;
        v134 = v132 + 32;
        *((_QWORD *)v132 + 2) = 0;
        *((_QWORD *)v132 + 3) = v132 + 32;
        LOWORD(v177) = 257;
        *((_QWORD *)v132 + 4) = v128;
        *((_QWORD *)v132 + 5) = 0;
        *((_WORD *)v132 + 24) = 60;
        *((_DWORD *)v132 + 13) = 1;
        *(_OWORD *)(v132 + 56) = 0u;
        *(_OWORD *)(v132 + 72) = 0u;
        *((_DWORD *)v132 + 22) = 0;
        *(_QWORD *)v132 = v129;
        *((_QWORD *)v132 + 1) = 0;
        if (v129)
        {
          v137 = *(_QWORD *)(v129 + 8);
          v136 = (_QWORD *)(v129 + 8);
          v135 = v137;
          *((_QWORD *)v132 + 1) = v137;
          if (v137)
            *(_QWORD *)(v135 + 16) = v132 + 8;
          *((_QWORD *)v132 + 2) = v136;
          *v136 = v132;
        }
        *((_WORD *)v132 + 25) = 2 * (v131 & 0x3F);
        v132[92] = 1;
        llvm::Value::setName((uint64_t ***)v132 + 4, (uint64_t)&v176);
        (*(void (**)(uint64_t, void *, void **, uint64_t, uint64_t))(*(_QWORD *)v184 + 16))(v184, v134, &__p, v182, v183);
        if (!(_DWORD)v179)
        {
LABEL_116:
          v138 = (uint64_t)(*v3 + 29);
          __p = v134;
          sub_1C627F8FC(v138, &__p, (uint64_t)&v176);
          v139 = *v3;
          if (sub_1C587F060())
          {
            v176 = (unsigned __int8 *)v172;
            sub_1C4EAD954(v139 + 17, &v176)[1] = v134;
          }
          goto LABEL_102;
        }
        v159 = (char *)v178;
        v160 = (char *)v178 + 16 * v179;
        v161 = (unsigned __int8 **)(v133 + 80);
        v3 = v171;
        while (1)
        {
          v162 = *(_DWORD *)v159;
          v163 = (unsigned __int8 *)*((_QWORD *)v159 + 1);
          if (v163)
          {
            if (!v162)
            {
              v173.__r_.__value_.__r.__words[0] = *((_QWORD *)v159 + 1);
              llvm::MetadataTracking::track((uint64_t)&v173, v163, 2);
              v164 = *v161;
              goto LABEL_166;
            }
          }
          else
          {
            v164 = *v161;
            if (!*v161 && (v133[55] & 0x20) == 0)
              goto LABEL_163;
            if (!v162)
            {
              v173.__r_.__value_.__r.__words[0] = 0;
LABEL_166:
              if (v164)
                llvm::MetadataTracking::untrack((uint64_t)(v133 + 80), v164);
              v165 = (unsigned __int8 *)v173.__r_.__value_.__r.__words[0];
              *v161 = (unsigned __int8 *)v173.__r_.__value_.__r.__words[0];
              if (v165)
                llvm::MetadataTracking::retrack((uint64_t)&v173, v165, (uint64_t)(v133 + 80));
              goto LABEL_163;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v134, *(_DWORD *)v159, (llvm::MDNode *)v163);
LABEL_163:
          v159 += 16;
          if (v159 == v160)
            goto LABEL_116;
        }
      }
      sub_1C5884548(v104, v105);
      v112 = v111;
      v113 = sub_1C5884724(**v3, *v93, (uint64_t *)&v178);
      v114 = word_1ED812658;
      __p = "_dfsret";
      v175 = 259;
      v115 = (char *)operator new(0x60uLL);
      v116 = v115;
      v117 = v115 + 32;
      *((_QWORD *)v115 + 2) = 0;
      *((_QWORD *)v115 + 3) = v115 + 32;
      LOWORD(v177) = 257;
      *((_QWORD *)v115 + 4) = v112;
      *((_QWORD *)v115 + 5) = 0;
      *((_WORD *)v115 + 24) = 60;
      *((_DWORD *)v115 + 13) = 1;
      *(_OWORD *)(v115 + 56) = 0u;
      *(_OWORD *)(v115 + 72) = 0u;
      *((_DWORD *)v115 + 22) = 0;
      *(_QWORD *)v115 = v113;
      *((_QWORD *)v115 + 1) = 0;
      if (v113)
      {
        v120 = *((_QWORD *)v113 + 1);
        v119 = v113 + 8;
        v118 = v120;
        *((_QWORD *)v115 + 1) = v120;
        if (v120)
          *(_QWORD *)(v118 + 16) = v115 + 8;
        *((_QWORD *)v115 + 2) = v119;
        *v119 = v115;
      }
      *((_WORD *)v115 + 25) = 2 * (v114 & 0x3F);
      v115[92] = 1;
      llvm::Value::setName((uint64_t ***)v115 + 4, (uint64_t)&v176);
      (*(void (**)(uint64_t, void *, void **, uint64_t, uint64_t))(*(_QWORD *)v184 + 16))(v184, v117, &__p, v182, v183);
      if (!(_DWORD)v179)
      {
LABEL_109:
        v121 = (uint64_t)(*v3 + 29);
        __p = v117;
        sub_1C627F8FC(v121, &__p, (uint64_t)&v176);
        v122 = *v3 + 14;
        v176 = (unsigned __int8 *)v172;
        sub_1C4EAD954(v122, &v176)[1] = v117;
        v123 = *v3;
        v125 = (_QWORD *)(*v3)[33];
        v124 = (*v3)[34];
        if ((unint64_t)v125 >= v124)
        {
          v143 = (_QWORD *)v123[32];
          v144 = v125 - v143;
          v145 = v144 + 1;
          if ((unint64_t)(v144 + 1) >> 61)
            abort();
          v146 = v124 - (_QWORD)v143;
          if (v146 >> 2 > v145)
            v145 = v146 >> 2;
          if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8)
            v147 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v147 = v145;
          if (v147)
          {
            if (v147 >> 61)
              sub_1C4764EE4();
            v148 = (char *)operator new(8 * v147);
          }
          else
          {
            v148 = 0;
          }
          v149 = &v148[8 * v144];
          v150 = &v148[8 * v147];
          *(_QWORD *)v149 = v117;
          v126 = v149 + 8;
          if (v125 != v143)
          {
            do
            {
              v151 = *--v125;
              *((_QWORD *)v149 - 1) = v151;
              v149 -= 8;
            }
            while (v125 != v143);
            v125 = (_QWORD *)v123[32];
          }
          v123[32] = (uint64_t)v149;
          v123[33] = (uint64_t)v126;
          v123[34] = (uint64_t)v150;
          if (v125)
            operator delete(v125);
        }
        else
        {
          *v125 = v117;
          v126 = v125 + 1;
        }
        v123[33] = (uint64_t)v126;
        goto LABEL_101;
      }
      v152 = (char *)v178;
      v153 = (char *)v178 + 16 * v179;
      v154 = (unsigned __int8 **)(v116 + 80);
      v3 = v171;
      while (1)
      {
        v155 = *(_DWORD *)v152;
        v156 = (unsigned __int8 *)*((_QWORD *)v152 + 1);
        if (v156)
        {
          if (!v155)
          {
            v173.__r_.__value_.__r.__words[0] = *((_QWORD *)v152 + 1);
            llvm::MetadataTracking::track((uint64_t)&v173, v156, 2);
            v157 = *v154;
            goto LABEL_151;
          }
        }
        else
        {
          v157 = *v154;
          if (!*v154 && (v116[55] & 0x20) == 0)
            goto LABEL_148;
          if (!v155)
          {
            v173.__r_.__value_.__r.__words[0] = 0;
LABEL_151:
            if (v157)
              llvm::MetadataTracking::untrack((uint64_t)(v116 + 80), v157);
            v158 = (unsigned __int8 *)v173.__r_.__value_.__r.__words[0];
            *v154 = (unsigned __int8 *)v173.__r_.__value_.__r.__words[0];
            if (v158)
              llvm::MetadataTracking::retrack((uint64_t)&v173, v158, (uint64_t)(v116 + 80));
            goto LABEL_148;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v117, *(_DWORD *)v152, (llvm::MDNode *)v156);
LABEL_148:
        v152 += 16;
        if (v152 == v153)
          goto LABEL_109;
      }
    }
  }
LABEL_131:
  if (v185 != (char *)&v187)
    free(v185);
}

uint64_t sub_1C58875E8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::ConstantAggregateZero *v9;
  llvm::Type *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v22;

  v4 = (uint64_t *)*a1;
  v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x7FFFFFF) != 0)
  {
    if ((v5 & 0x40000000) != 0)
      v6 = *(uint64_t **)(a2 - 8);
    else
      v6 = (uint64_t *)(a2 - 32 * (v5 & 0x7FFFFFF));
    v12 = sub_1C5883144(*a1, *v6);
    v13 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    if (v13 >= 2)
    {
      v14 = 32 * v13;
      v15 = 32;
      do
      {
        v16 = *(_DWORD *)(a2 + 20);
        if ((v16 & 0x40000000) != 0)
          v17 = *(_QWORD *)(a2 - 8);
        else
          v17 = a2 - 32 * (v16 & 0x7FFFFFF);
        v18 = sub_1C5883144((uint64_t)v4, *(_QWORD *)(v17 + v15));
        v12 = sub_1C5887B40((uint64_t)v4, v12, v18, (uint64_t *)a2);
        v15 += 32;
      }
      while (v14 != v15);
    }
    v11 = sub_1C5888218(v4, *(_QWORD *)a2, (uint64_t)v12, a2);
  }
  else
  {
    v7 = *v4;
    v8 = *(_QWORD *)a2;
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x10)
    {
      v19 = *(_QWORD **)(v7 + 72);
      goto LABEL_16;
    }
    sub_1C5884548(v7, v8);
    v11 = llvm::ConstantAggregateZero::get(v9, v10);
  }
  v19 = v11;
LABEL_16:
  v20 = (uint64_t *)(*a1 + 112);
  v22 = a2;
  sub_1C4EAD954(v20, &v22)[1] = v19;
  return sub_1C58879AC((uint64_t **)a1, (_DWORD *)a2);
}

BOOL sub_1C5887718(uint64_t a1)
{
  int v1;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x10)
  {
    return v1 == 13;
  }
  else
  {
    if (v1 != 16)
      return 0;
    v3 = *(_DWORD *)(a1 + 32);
    if (v3 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a1 + 24)) == v3;
    else
      return *(_QWORD *)(a1 + 24) == 0;
  }
}

unsigned __int8 *sub_1C588778C(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned __int8 *v8;
  uint64_t v9;
  const llvm::APInt *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::ConstantInt *v14;
  unint64_t v15;
  unint64_t v16;
  llvm::ValueHandleBase *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  llvm::PointerType *v28;
  uint64_t v29;
  _WORD v31[20];
  const char *v32;
  unsigned int v33;
  __int16 v34;

  v8 = *(unsigned __int8 **)(*a1 + 80);
  v9 = *(_QWORD *)(*a1 + 64);
  v34 = 257;
  v11 = sub_1C5098D9C((uint64_t *)a4, v8, v9, (uint64_t)&v32);
  if (a3)
  {
    v12 = *(_QWORD *)(*a1 + 64);
    v13 = a3;
    v14 = *(llvm::ConstantInt **)v12;
    v15 = *(unsigned int *)(v12 + 8);
    v33 = v15 >> 8;
    if (v15 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v32, v13, 0);
    }
    else
    {
      if (v15 <= 0xFF)
        v16 = 0;
      else
        v16 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v15);
      v32 = (const char *)(v16 & v13);
    }
    v17 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v32, v10);
    if (v33 >= 0x41 && v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
    v31[16] = 257;
    v18 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::ValueHandleBase *, _QWORD, _QWORD))(**(_QWORD **)(a4 + 72) + 16))(*(_QWORD *)(a4 + 72), v11, v17, 0, 0);
    if (!v18)
    {
      v34 = 257;
      v19 = (char *)operator new(0x80uLL);
      *((_QWORD *)v19 + 5) = 0;
      v20 = v19 + 40;
      *((_QWORD *)v19 + 6) = 0;
      *((_QWORD *)v19 + 8) = *(_QWORD *)v11;
      v21 = (uint64_t)(v19 + 64);
      *((_QWORD *)v19 + 3) = v19 + 64;
      *((_QWORD *)v19 + 7) = v19 + 64;
      *((_QWORD *)v19 + 9) = 0;
      v19[80] = 41;
      v19[81] = 0;
      *((_WORD *)v19 + 41) = 0;
      *((_DWORD *)v19 + 21) = 2;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *((_DWORD *)v19 + 30) = 0;
      *(_QWORD *)v19 = v11;
      v24 = *((_QWORD *)v11 + 1);
      v23 = v11 + 8;
      v22 = v24;
      *((_QWORD *)v19 + 1) = v24;
      if (v24)
        *(_QWORD *)(v22 + 16) = v19 + 8;
      *((_QWORD *)v19 + 2) = v23;
      *v23 = v19;
      *((_QWORD *)v19 + 4) = v17;
      if (v17)
      {
        v27 = *((_QWORD *)v17 + 1);
        v26 = (_QWORD *)((char *)v17 + 8);
        v25 = v27;
        *v20 = v27;
        if (v27)
          *(_QWORD *)(v25 + 16) = v20;
        *((_QWORD *)v19 + 6) = v26;
        *v26 = v19 + 32;
      }
      llvm::Value::setName((uint64_t ***)v19 + 8, (uint64_t)&v32);
      v18 = sub_1C4773754((uint64_t *)a4, v21, (uint64_t)v31);
    }
    v11 = (unsigned __int8 *)v18;
  }
  sub_1C5884548(*a1, a2);
  v29 = llvm::PointerType::get(v28, 0);
  v32 = "_dfsarg";
  v34 = 259;
  return sub_1C4773E38((uint64_t *)a4, 48, v11, v29, (uint64_t)&v32);
}

uint64_t sub_1C58879AC(uint64_t **a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  llvm::Value *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;

  result = sub_1C587F060();
  if ((_DWORD)result)
  {
    v5 = *a1;
    v6 = a2[5];
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v7 = v6 & 0x7FFFFFF;
    if ((v6 & 0x7FFFFFF) != 0)
    {
      v8 = (char *)operator new(8 * v7);
      v22 = v8;
      v24 = &v8[8 * v7];
      bzero(v8, 8 * v7);
      v23 = v24;
      v9 = (char *)operator new(8 * v7);
      v19 = v9;
      v21 = &v9[8 * v7];
      bzero(v9, 8 * v7);
      v10 = 0;
      v11 = 0;
      v20 = v21;
      v12 = 32 * v7;
      do
      {
        v13 = a2[5];
        if ((v13 & 0x40000000) != 0)
          v14 = (_DWORD *)*((_QWORD *)a2 - 1);
        else
          v14 = &a2[-8 * (v13 & 0x7FFFFFF)];
        *(_QWORD *)&v8[v10] = sub_1C5883144((uint64_t)v5, *(_QWORD *)&v14[v11 / 4]);
        v15 = a2[5];
        if ((v15 & 0x40000000) != 0)
          v16 = (_DWORD *)*((_QWORD *)a2 - 1);
        else
          v16 = &a2[-8 * (v15 & 0x7FFFFFF)];
        *(_QWORD *)&v9[v10] = sub_1C58836E4(v5, *(_QWORD *)&v16[v11 / 4]);
        v11 += 32;
        v10 += 8;
      }
      while (v12 != v11);
      v17 = sub_1C58885F0((uint64_t)v5, &v22, &v19, (const llvm::Instruction *)a2, 0);
      operator delete(v9);
      operator delete(v8);
    }
    else
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v17 = sub_1C58885F0((uint64_t)v5, &v22, &v19, (const llvm::Instruction *)a2, 0);
    }
    v18 = *a1;
    result = sub_1C587F060();
    if ((_DWORD)result)
    {
      v22 = (char *)a2;
      result = (uint64_t)sub_1C4EAD954(v18 + 17, &v22);
      *(_QWORD *)(result + 8) = v17;
    }
  }
  return result;
}

uint64_t *sub_1C5887B40(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *j;
  unint64_t v22;
  uint64_t v23;
  _QWORD *i;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  _QWORD *v45;
  _QWORD *v46;
  BOOL v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unsigned int v60;
  _OWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int64x2_t v64;
  uint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t **v75;
  uint64_t *v76;
  uint64_t v77;
  __int16 v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  void *v82[2];
  _QWORD v83[17];

  v83[15] = *MEMORY[0x1E0C80C00];
  v79 = a3;
  v80 = a2;
  if (sub_1C5887718((uint64_t)a2))
  {
    v8 = a1;
    v9 = a3;
    return sub_1C58839D0(v8, v9, (const llvm::Instruction *)a4);
  }
  if (sub_1C5887718((uint64_t)a3) || a2 == a3)
  {
    v8 = a1;
    v9 = a2;
    return sub_1C58839D0(v8, v9, (const llvm::Instruction *)a4);
  }
  v11 = (uint64_t *)(a1 + 328);
  v75 = (uint64_t **)a2;
  v82[0] = 0;
  if ((sub_1C61805E8((uint64_t *)(a1 + 328), &v75, v82) & 1) != 0)
    v12 = v82[0];
  else
    v12 = (_QWORD *)(*(_QWORD *)(a1 + 328) + 32 * *(unsigned int *)(a1 + 344));
  v75 = (uint64_t **)a3;
  v82[0] = 0;
  v13 = sub_1C61805E8((uint64_t *)(a1 + 328), &v75, v82);
  v14 = v82[0];
  v15 = *(_QWORD *)(a1 + 328) + 32 * *(unsigned int *)(a1 + 344);
  if (!v13)
    v14 = (_QWORD *)(*(_QWORD *)(a1 + 328) + 32 * *(unsigned int *)(a1 + 344));
  v74 = v14;
  if (v12 == (_QWORD *)v15 || v14 == (_QWORD *)v15)
  {
    if (v12 == (_QWORD *)v15)
    {
      if (v14 != v12)
      {
        for (i = (_QWORD *)v14[2]; i; i = (_QWORD *)*i)
        {
          v25 = i[4];
          if (v25 <= (unint64_t)a2)
          {
            if (v25 >= (unint64_t)a2)
              goto LABEL_24;
            ++i;
          }
        }
      }
    }
    else
    {
      for (j = (_QWORD *)v12[2]; j; j = (_QWORD *)*j)
      {
        v22 = j[4];
        if (v22 <= (unint64_t)a3)
        {
          if (v22 >= (unint64_t)a3)
            goto LABEL_15;
          ++j;
        }
      }
    }
    goto LABEL_32;
  }
  v16 = (_QWORD *)v12[1];
  v17 = (_QWORD *)v14[1];
  v18 = v14 + 2;
  if (!sub_1C5888374(v16, v12 + 2, v17, v14 + 2))
  {
    if (sub_1C5888374(v17, v18, v16, v12 + 2))
    {
LABEL_24:
      v19 = a1;
      v20 = a3;
      return sub_1C58839D0(v19, v20, (const llvm::Instruction *)a4);
    }
LABEL_32:
    if (a2 <= a3)
      v26 = (uint64_t)a3;
    else
      v26 = (uint64_t)a2;
    if (a2 <= a3)
      v27 = (uint64_t)a2;
    else
      v27 = (uint64_t)a3;
    v81 = 0;
    v28 = sub_1C5242584(*(_QWORD *)(a1 + 280), *(_DWORD *)(a1 + 296), v27, v26, &v81);
    v29 = v81;
    if ((v28 & 1) != 0)
    {
      v30 = v81[2];
      if (v30 && llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1 + 16, v30, a4[5]))
        return (uint64_t *)v29[3];
LABEL_49:
      v34 = sub_1C58839D0(a1, a2, (const llvm::Instruction *)a4);
      v35 = sub_1C58839D0(a1, a3, (const llvm::Instruction *)a4);
      sub_1C4773D54((uint64_t)v82, (uint64_t)a4, 0, 0, 0);
      v29[2] = a4[5];
      v78 = 257;
      v29[3] = sub_1C4773594((uint64_t)v82, v34, (uint64_t)v35, (uint64_t)&v75);
      v36 = v29 + 3;
      v76 = 0;
      v77 = 0;
      v75 = &v76;
      if (v12 == (_QWORD *)(*(_QWORD *)(a1 + 328) + 32 * *(unsigned int *)(a1 + 344)))
      {
        sub_1C47BC21C((uint64_t **)&v75, (unint64_t *)&v80, &v80);
      }
      else if (&v75 != v12 + 1)
      {
        v37 = (_QWORD *)v12[1];
        v38 = v12 + 2;
        if (v37 != v38)
        {
          do
          {
            v39 = v37[4];
            v40 = (uint64_t *)operator new(0x28uLL);
            v41 = v40;
            v40[4] = v39;
            v42 = v76;
            v43 = &v76;
            v44 = &v76;
            if (v76)
            {
              do
              {
                while (1)
                {
                  v43 = (uint64_t **)v42;
                  if (v42[4] <= v39)
                    break;
                  v42 = (uint64_t *)*v42;
                  v44 = v43;
                  if (!*v43)
                    goto LABEL_59;
                }
                v42 = (uint64_t *)v42[1];
              }
              while (v42);
              v44 = v43 + 1;
            }
LABEL_59:
            *v40 = 0;
            v40[1] = 0;
            v40[2] = (uint64_t)v43;
            *v44 = v40;
            if (*v75)
            {
              v75 = (uint64_t **)*v75;
              v41 = *v44;
            }
            sub_1C4768E74(v76, v41);
            ++v77;
            v45 = (_QWORD *)v37[1];
            if (v45)
            {
              do
              {
                v46 = v45;
                v45 = (_QWORD *)*v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                v46 = (_QWORD *)v37[2];
                v47 = *v46 == (_QWORD)v37;
                v37 = v46;
              }
              while (!v47);
            }
            v37 = v46;
          }
          while (v46 != v38);
        }
      }
      if (v74 == (_QWORD *)(*(_QWORD *)(a1 + 328) + 32 * *(unsigned int *)(a1 + 344)))
      {
        sub_1C47BC21C((uint64_t **)&v75, (unint64_t *)&v79, &v79);
      }
      else
      {
        v48 = (_QWORD *)v74[1];
        if (v48 != v74 + 2)
        {
          do
          {
            sub_1C62ABB00(&v75, &v76, v48 + 4, v48 + 4);
            v49 = (_QWORD *)v48[1];
            if (v49)
            {
              do
              {
                v50 = v49;
                v49 = (_QWORD *)*v49;
              }
              while (v49);
            }
            else
            {
              do
              {
                v50 = (_QWORD *)v48[2];
                v47 = *v50 == (_QWORD)v48;
                v48 = v50;
              }
              while (!v47);
            }
            v48 = v50;
          }
          while (v50 != v74 + 2);
        }
      }
      v51 = sub_1C62AC4A8(v11, v36);
      v52 = v51 + 2;
      v53 = v51 + 1;
      sub_1C47655E8((uint64_t)(v51 + 1), (_QWORD *)v51[2]);
      *(v52 - 1) = v75;
      v54 = v76;
      *v52 = v76;
      v55 = v77;
      v52[1] = v77;
      if (v55)
      {
        v54[2] = (uint64_t)v52;
        v75 = &v76;
        v76 = 0;
        v77 = 0;
        v54 = 0;
      }
      else
      {
        *v53 = v52;
      }
      v23 = *v36;
      sub_1C47655E8((uint64_t)&v75, v54);
      if (v82[0] != v83)
        free(v82[0]);
      return (uint64_t *)v23;
    }
    v75 = (uint64_t **)v81;
    v31 = *(_DWORD *)(a1 + 288);
    v32 = *(unsigned int *)(a1 + 296);
    if (4 * v31 + 4 >= (3 * v32))
    {
      v33 = 2 * v32;
    }
    else
    {
      v33 = *(_DWORD *)(a1 + 296);
      if ((int)v32 + ~v31 - *(_DWORD *)(a1 + 292) > v32 >> 3)
      {
LABEL_45:
        *(_DWORD *)(a1 + 288) = v31 + 1;
        if (*v29 != -4096 || v29[1] != -4096)
          --*(_DWORD *)(a1 + 292);
        *v29 = v27;
        v29[1] = v26;
        v29[2] = 0;
        v29[3] = 0;
        v11 = (uint64_t *)(a1 + 328);
        goto LABEL_49;
      }
    }
    v56 = *(_QWORD *)(a1 + 280);
    v57 = (v33 - 1) | ((unint64_t)(v33 - 1) >> 1);
    v58 = v57 | (v57 >> 2) | ((v57 | (v57 >> 2)) >> 4);
    v59 = ((v58 | (v58 >> 8)) >> 16) | v58 | (v58 >> 8);
    if ((v59 + 1) > 0x40)
      v60 = v59 + 1;
    else
      v60 = 64;
    *(_DWORD *)(a1 + 296) = v60;
    v61 = operator new(32 * v60, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 280) = v61;
    v73 = v56;
    if (v56)
    {
      *(_QWORD *)(a1 + 288) = 0;
      v65 = *(unsigned int *)(a1 + 296);
      if ((_DWORD)v65)
      {
        v66 = 32 * v65;
        v67 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          *v61 = v67;
          v61 += 2;
          v66 -= 32;
        }
        while (v66);
      }
      if ((_DWORD)v32)
      {
        v68 = 32 * v32;
        v69 = v73 + 8;
        do
        {
          v71 = *(_QWORD *)(v69 - 8);
          v70 = *(_QWORD *)v69;
          if ((v71 != -4096 || v70 != -4096) && (v71 != -8192 || v70 != -8192))
          {
            v82[0] = 0;
            sub_1C5242584(*(_QWORD *)(a1 + 280), *(_DWORD *)(a1 + 296), v71, v70, v82);
            v72 = v82[0];
            *(_QWORD *)v82[0] = v71;
            v72[1] = *(_QWORD *)v69;
            *((_OWORD *)v72 + 1) = *(_OWORD *)(v69 + 8);
            ++*(_DWORD *)(a1 + 288);
          }
          v69 += 32;
          v68 -= 32;
        }
        while (v68);
      }
      MEMORY[0x1CAA32FB4](v73, 8);
      v61 = *(_OWORD **)(a1 + 280);
      LODWORD(v62) = *(_DWORD *)(a1 + 296);
    }
    else
    {
      *(_QWORD *)(a1 + 288) = 0;
      v62 = *(unsigned int *)(a1 + 296);
      if ((_DWORD)v62)
      {
        v63 = 0;
        v64 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          v61[v63] = v64;
          v63 += 2;
        }
        while (2 * v62 != v63);
      }
    }
    sub_1C5242584((uint64_t)v61, v62, v27, v26, &v75);
    v31 = *(_DWORD *)(a1 + 288);
    v29 = (uint64_t *)v75;
    goto LABEL_45;
  }
LABEL_15:
  v19 = a1;
  v20 = a2;
  return sub_1C58839D0(v19, v20, (const llvm::Instruction *)a4);
}

_QWORD *sub_1C5888218(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::UndefValue *v7;
  llvm::UndefValue *v8;
  llvm::ConstantAggregateZero *v9;
  llvm::Type *v10;
  llvm::Type *v12;
  llvm::UndefValue *v13;
  uint64_t v14;
  void *v15[2];
  _BYTE v16[16];
  void *v17[2];
  _QWORD v18[16];

  v18[15] = *MEMORY[0x1E0C80C00];
  sub_1C5884548(*a1, a2);
  if ((*((_DWORD *)v7 + 2) & 0xFE) == 0x10)
  {
    v8 = v7;
    if (sub_1C5887718(a3))
    {
      sub_1C5884548(*a1, (uint64_t)v8);
      return llvm::ConstantAggregateZero::get(v9, v10);
    }
    sub_1C4773D54((uint64_t)v17, a4, 0, 0, 0);
    v15[0] = v16;
    v15[1] = (void *)0x400000000;
    v13 = llvm::UndefValue::get(v8, v12);
    v14 = sub_1C588842C((uint64_t)v13, (uint64_t)v15, (uint64_t)v8, a3, (uint64_t)v17);
    sub_1C509B72C(a1 + 38, &v14)[1] = a3;
    a3 = v14;
    if (v15[0] != v16)
      free(v15[0]);
    if (v17[0] != v18)
      free(v17[0]);
  }
  return (_QWORD *)a3;
}

BOOL sub_1C5888374(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _BOOL8 v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a3 == a4;
  if (a3 != a4 && a1 != a2)
  {
    while (1)
    {
      v5 = a3[4];
      v6 = a1[4];
      if (v5 < v6)
        break;
      if (v6 >= v5)
      {
        v8 = (_QWORD *)a3[1];
        if (v8)
        {
          do
          {
            v7 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)a3[2];
            v9 = *v7 == (_QWORD)a3;
            a3 = v7;
          }
          while (!v9);
        }
      }
      else
      {
        v7 = a3;
      }
      v10 = (_QWORD *)a1[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)a1[2];
          v9 = *v11 == (_QWORD)a1;
          a1 = v11;
        }
        while (!v9);
      }
      v4 = v7 == a4;
      if (v7 != a4)
      {
        a1 = v11;
        a3 = v7;
        if (v11 != a2)
          continue;
      }
      return v4;
    }
    return 0;
  }
  return v4;
}

uint64_t sub_1C588842C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v10;
  unsigned int v11;
  unsigned int v12;
  void *v14;
  uint64_t v15;
  unint64_t v17;
  unsigned int v18;
  _BYTE v19[32];
  __int16 v20;

  v8 = a1;
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x10)
  {
    v10 = *(_DWORD *)(a3 + 8);
    if (v10 == 16)
    {
      if (*(_DWORD *)(a3 + 12))
      {
        v17 = 0;
        v18 = *(_DWORD *)(a2 + 8);
        do
        {
          if (v18 >= *(_DWORD *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v18 + 1, 4);
            v18 = *(_DWORD *)(a2 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a2 + 4 * v18) = v17;
          ++*(_DWORD *)(a2 + 8);
          v8 = sub_1C588842C(v8, a2, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v17), a4, a5);
          v18 = *(_DWORD *)(a2 + 8) - 1;
          *(_DWORD *)(a2 + 8) = v18;
          ++v17;
        }
        while (v17 < *(unsigned int *)(a3 + 12));
      }
    }
    else if (v10 == 17 && *(_QWORD *)(a3 + 32))
    {
      v11 = *(_DWORD *)(a2 + 8);
      v12 = 1;
      do
      {
        if (v11 >= *(_DWORD *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v11 + 1, 4);
          v11 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a2 + 4 * v11) = v12 - 1;
        ++*(_DWORD *)(a2 + 8);
        v8 = sub_1C588842C(v8, a2, *(_QWORD *)(a3 + 24), a4, a5);
        v11 = *(_DWORD *)(a2 + 8) - 1;
        *(_DWORD *)(a2 + 8) = v11;
      }
      while (*(_QWORD *)(a3 + 32) > (unint64_t)v12++);
    }
  }
  else
  {
    v14 = *(void **)a2;
    v15 = *(unsigned int *)(a2 + 8);
    v20 = 257;
    return sub_1C506D788(a5, a1, a4, v14, v15, (uint64_t)v19);
  }
  return v8;
}

llvm::Value *sub_1C58885F0(uint64_t a1, _QWORD *a2, _QWORD *a3, const llvm::Instruction *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  llvm::Value *Select;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  _BYTE v19[32];
  __int16 v20;
  void *v21[2];
  _QWORD v22[17];

  v22[15] = *MEMORY[0x1E0C80C00];
  v5 = a3[1] - *a3;
  if (!v5)
    return *(llvm::Value **)(*(_QWORD *)a1 + 40);
  v6 = a5;
  if (!a5)
    v6 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v9 = 0;
  Select = 0;
  v11 = v5 >> 3;
  do
  {
    v12 = *(_QWORD *)(*a3 + 8 * v9);
    if (v12)
      v13 = *(unsigned __int8 *)(v12 + 16) > 0x14u;
    else
      v13 = 1;
    if (v13 || (llvm::Constant::isNullValue(*(llvm::Constant **)(*a3 + 8 * v9)) & 1) == 0)
    {
      if (Select)
      {
        v14 = sub_1C58839D0(a1, *(uint64_t **)(*a2 + 8 * v9), a4);
        sub_1C4773D54((uint64_t)v21, (uint64_t)a4, 0, 0, 0);
        v20 = 257;
        v15 = sub_1C4774B48((uint64_t)v21, 33, (uint64_t)v14, v6, (uint64_t)v19);
        v20 = 257;
        Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)v21, v15, (uint64_t *)v12, (uint64_t)Select, (uint64_t)v19, 0);
        if (v21[0] != v22)
          free(v21[0]);
      }
      else
      {
        Select = (llvm::Value *)v12;
      }
    }
    ++v9;
  }
  while (v11 != v9);
  if (!Select)
    return *(llvm::Value **)(*(_QWORD *)a1 + 40);
  return Select;
}

void sub_1C5888770(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  char *v17;
  llvm::Type *v18;
  llvm::Type *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t v23;
  _BYTE v24[32];
  __int16 v25;

  if ((*((_DWORD *)a3 + 8) & 0xF) == 9)
  {
    v6 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a2 + 64) + 1912), 0);
    v25 = 257;
    v7 = sub_1C5098D9C((uint64_t *)a2, a3, v6, (uint64_t)v24);
    if ((a3[23] & 0x10) == 0)
    {
      v18 = 0;
      v17 = &byte_1C871356D;
      goto LABEL_11;
    }
    v8 = ***(_QWORD ***)a3;
    v9 = *(_QWORD *)(v8 + 152);
    v10 = *(unsigned int *)(v8 + 168);
    if ((_DWORD)v10)
    {
      LODWORD(v11) = (v10 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      v12 = (unsigned __int8 **)(v9 + 16 * v11);
      v13 = *v12;
      if (*v12 == a3)
      {
LABEL_10:
        v16 = v12[1];
        v19 = *(llvm::Type **)v16;
        v17 = (char *)(v16 + 16);
        v18 = v19;
LABEL_11:
        v25 = 257;
        v20 = sub_1C62147C4(a2, v17, v18, (uint64_t)v24, 0, 0);
        v21 = (uint64_t *)operator new(0x10uLL);
        *v21 = (uint64_t)v7;
        v21[1] = v20;
        v22 = *(uint64_t ***)(a1 + 296);
        v23 = *(_QWORD *)(a1 + 304);
        v25 = 257;
        sub_1C4774778((uint64_t *)a2, v22, v23, v21, 2, (uint64_t)v24, 0);
        operator delete(v21);
        return;
      }
      v14 = 1;
      while (v13 != (unsigned __int8 *)-4096)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v10 - 1);
        v13 = *(unsigned __int8 **)(v9 + 16 * v11);
        if (v13 == a3)
        {
          v12 = (unsigned __int8 **)(v9 + 16 * v11);
          goto LABEL_10;
        }
      }
    }
    v12 = (unsigned __int8 **)(v9 + 16 * v10);
    goto LABEL_10;
  }
}

BOOL sub_1C58888D4(uint64_t *a1, llvm::Value *this)
{
  llvm::Value *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value **v10;
  llvm::Value *v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  unsigned __int8 *v16;
  size_t v17;
  size_t v18;
  int v19;
  size_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v3 = llvm::Value::stripPointerCasts(this);
  v4 = 0;
  if (!v3 || *((_BYTE *)v3 + 16) != 3)
    return v4;
  if ((*((_BYTE *)v3 + 80) & 1) == 0 || (*((_BYTE *)v3 + 23) & 0x10) == 0)
    return 0;
  v5 = *a1;
  v6 = ***(_QWORD ***)v3;
  v7 = *(_QWORD *)(v6 + 152);
  v8 = *(unsigned int *)(v6 + 168);
  if (!(_DWORD)v8)
    goto LABEL_12;
  LODWORD(v9) = (v8 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  v10 = (llvm::Value **)(v7 + 16 * v9);
  v11 = *v10;
  if (*v10 != v3)
  {
    v12 = 1;
    while (v11 != (llvm::Value *)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(llvm::Value **)(v7 + 16 * v9);
      if (v11 == v3)
      {
        v10 = (llvm::Value **)(v7 + 16 * v9);
        goto LABEL_13;
      }
    }
LABEL_12:
    v10 = (llvm::Value **)(v7 + 16 * v8);
  }
LABEL_13:
  v14 = *(unsigned int *)(v5 + 776);
  if ((_DWORD)v14)
  {
    v15 = (size_t *)v10[1];
    v18 = *v15;
    v16 = (unsigned __int8 *)(v15 + 2);
    v17 = v18;
    if (v18)
    {
      v19 = 0;
      v20 = v17;
      v21 = v16;
      do
      {
        v22 = *v21++;
        v19 = 33 * v19 + v22;
        --v20;
      }
      while (v20);
    }
    else
    {
      v19 = 0;
    }
    v23 = *(_QWORD *)(v5 + 768);
    v24 = 1;
    v25 = v19;
    while (1)
    {
      v26 = v25 & (v14 - 1);
      v27 = *(_QWORD **)(v23 + 8 * v26);
      if (v27 != (_QWORD *)-8)
      {
        if (!v27)
        {
          v28 = v14;
          return v28 != v14;
        }
        if (*(_DWORD *)(v23 + 8 * v14 + 8 + 4 * v26) == v19
          && v17 == *v27
          && (!v17 || !memcmp(v16, (char *)v27 + *(unsigned int *)(v5 + 788), v17)))
        {
          break;
        }
      }
      v25 = v24 + v26;
      ++v24;
    }
    v28 = (int)v26;
    if ((_DWORD)v26 == -1)
      v28 = v14;
  }
  else
  {
    v14 = 0;
    v28 = 0;
  }
  return v28 != v14;
}

unsigned __int8 *sub_1C5888A88(uint64_t a1, unsigned __int8 *a2, char a3, uint64_t a4)
{
  const llvm::APInt *v7;
  _QWORD *v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  llvm::ConstantInt *v12;
  unint64_t v13;
  unint64_t v14;
  llvm::ValueHandleBase *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  const llvm::APInt *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::ConstantInt *v21;
  unint64_t v22;
  unint64_t v23;
  llvm::ValueHandleBase *v24;
  llvm::Value *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::ConstantInt *v28;
  unint64_t v29;
  unint64_t v30;
  llvm::ValueHandleBase *v31;
  uint64_t v32;
  char *v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  unsigned __int8 **v44;
  int v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unsigned __int8 **v60;
  int v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  _BYTE v64[32];
  __int16 v65;
  unint64_t v66;
  unsigned int v67;
  __int16 v68;
  unsigned __int8 *v69;
  void *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v70, a4, 0, 0, 0);
  v8 = sub_1C58890EC(a1, a2, (uint64_t *)&v70);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 16);
  v10 = (llvm::Value *)v8;
  if (v9)
  {
    v11 = *(_QWORD *)(a1 + 64);
    v12 = *(llvm::ConstantInt **)v11;
    v13 = *(unsigned int *)(v11 + 8);
    v67 = v13 >> 8;
    if (v13 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v66, v9, 0);
    }
    else
    {
      if (v13 <= 0xFF)
        v14 = 0;
      else
        v14 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v13);
      v66 = v14 & v9;
    }
    v15 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v66, v7);
    if (v67 >= 0x41 && v66)
      MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
    v65 = 257;
    v10 = (llvm::Value *)(*(uint64_t (**)(uint64_t, _QWORD *, llvm::ValueHandleBase *, _QWORD, _QWORD))(*(_QWORD *)v75 + 16))(v75, v8, v15, 0, 0);
    if (!v10)
    {
      v68 = 257;
      v34 = (char *)operator new(0x80uLL);
      v35 = v34;
      *((_QWORD *)v34 + 6) = 0;
      *((_QWORD *)v34 + 5) = 0;
      v36 = v34 + 40;
      *((_QWORD *)v34 + 8) = *v8;
      v10 = (llvm::Value *)(v34 + 64);
      *((_QWORD *)v34 + 3) = v34 + 64;
      *((_QWORD *)v34 + 7) = v34 + 64;
      *((_QWORD *)v34 + 9) = 0;
      v34[80] = 41;
      v34[81] = 0;
      *((_WORD *)v34 + 41) = 0;
      *((_DWORD *)v34 + 21) = 2;
      *(_OWORD *)(v34 + 88) = 0u;
      *(_OWORD *)(v34 + 104) = 0u;
      *((_DWORD *)v34 + 30) = 0;
      *(_QWORD *)v34 = v8;
      v37 = v8 + 1;
      v38 = v8[1];
      *((_QWORD *)v34 + 1) = v38;
      if (v38)
        *(_QWORD *)(v38 + 16) = v34 + 8;
      *((_QWORD *)v34 + 2) = v37;
      *v37 = v34;
      *((_QWORD *)v34 + 4) = v15;
      if (v15)
      {
        v41 = *((_QWORD *)v15 + 1);
        v40 = (_QWORD *)((char *)v15 + 8);
        v39 = v41;
        *v36 = v41;
        if (v41)
          *(_QWORD *)(v39 + 16) = v36;
        *((_QWORD *)v34 + 6) = v40;
        *v40 = v34 + 32;
      }
      llvm::Value::setName((uint64_t ***)v34 + 8, (uint64_t)&v66);
      (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v76 + 16))(v76, v10, v64, v73, v74);
      if (v71)
      {
        v42 = (char *)v70;
        v43 = (char *)v70 + 16 * v71;
        v44 = (unsigned __int8 **)(v35 + 112);
        do
        {
          v45 = *(_DWORD *)v42;
          v46 = (unsigned __int8 *)*((_QWORD *)v42 + 1);
          if (v46)
          {
            if (!v45)
            {
              v69 = (unsigned __int8 *)*((_QWORD *)v42 + 1);
              llvm::MetadataTracking::track((uint64_t)&v69, v46, 2);
              v47 = *v44;
              if (!*v44)
              {
LABEL_49:
                v48 = v69;
                *v44 = v69;
                if (v48)
                  llvm::MetadataTracking::retrack((uint64_t)&v69, v48, (uint64_t)(v35 + 112));
                goto LABEL_46;
              }
LABEL_43:
              llvm::MetadataTracking::untrack((uint64_t)(v35 + 112), v47);
              goto LABEL_49;
            }
          }
          else
          {
            v47 = *v44;
            if (!*v44 && (v35[87] & 0x20) == 0)
              goto LABEL_46;
            if (!v45)
            {
              v69 = 0;
              if (!v47)
                goto LABEL_49;
              goto LABEL_43;
            }
          }
          llvm::Value::setMetadata(v10, *(_DWORD *)v42, (llvm::MDNode *)v46);
LABEL_46:
          v42 += 16;
        }
        while (v42 != v43);
      }
    }
  }
  v16 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a1 + 8) + 1912), 0);
  v68 = 257;
  v17 = sub_1C4773E38((uint64_t *)&v70, 48, (unsigned __int8 *)v10, v16, (uint64_t)&v66);
  if (sub_1C587F060())
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 800) + 24);
    if (v19)
    {
      v20 = *(_QWORD *)(a1 + 64);
      v21 = *(llvm::ConstantInt **)v20;
      v22 = *(unsigned int *)(v20 + 8);
      v67 = v22 >> 8;
      if (v22 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v66, v19, 0);
      }
      else
      {
        if (v22 <= 0xFF)
          v23 = 0;
        else
          v23 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v22);
        v66 = v23 & v19;
      }
      v24 = llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v66, v18);
      if (v67 >= 0x41 && v66)
        MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
      v65 = 257;
      v25 = (llvm::Value *)(*(uint64_t (**)(uint64_t, _QWORD *, llvm::ValueHandleBase *, _QWORD, _QWORD))(*(_QWORD *)v75 + 16))(v75, v8, v24, 0, 0);
      if (!v25)
      {
        v68 = 257;
        v49 = (char *)operator new(0x80uLL);
        v50 = v49;
        *((_QWORD *)v49 + 5) = 0;
        v51 = v49 + 40;
        *((_QWORD *)v49 + 6) = 0;
        *((_QWORD *)v49 + 8) = *v8;
        v25 = (llvm::Value *)(v49 + 64);
        *((_QWORD *)v49 + 3) = v49 + 64;
        *((_QWORD *)v49 + 7) = v49 + 64;
        *((_QWORD *)v49 + 9) = 0;
        v49[80] = 41;
        v49[81] = 0;
        *((_WORD *)v49 + 41) = 0;
        *((_DWORD *)v49 + 21) = 2;
        *(_OWORD *)(v49 + 88) = 0u;
        *(_OWORD *)(v49 + 104) = 0u;
        *((_DWORD *)v49 + 30) = 0;
        *(_QWORD *)v49 = v8;
        v54 = v8[1];
        v53 = v8 + 1;
        v52 = v54;
        *((_QWORD *)v49 + 1) = v54;
        if (v54)
          *(_QWORD *)(v52 + 16) = v49 + 8;
        *((_QWORD *)v49 + 2) = v53;
        *v53 = v49;
        *((_QWORD *)v49 + 4) = v24;
        if (v24)
        {
          v57 = *((_QWORD *)v24 + 1);
          v56 = (_QWORD *)((char *)v24 + 8);
          v55 = v57;
          *v51 = v57;
          if (v57)
            *(_QWORD *)(v55 + 16) = v51;
          *((_QWORD *)v49 + 6) = v56;
          *v56 = v49 + 32;
        }
        llvm::Value::setName((uint64_t ***)v49 + 8, (uint64_t)&v66);
        (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v76 + 16))(v76, v25, v64, v73, v74);
        if (v71)
        {
          v58 = (char *)v70;
          v59 = (char *)v70 + 16 * v71;
          v60 = (unsigned __int8 **)(v50 + 112);
          do
          {
            v61 = *(_DWORD *)v58;
            v18 = (const llvm::APInt *)*((_QWORD *)v58 + 1);
            if (v18)
            {
              if (!v61)
              {
                v69 = (unsigned __int8 *)*((_QWORD *)v58 + 1);
                llvm::MetadataTracking::track((uint64_t)&v69, (unsigned __int8 *)v18, 2);
                v62 = *v60;
                goto LABEL_69;
              }
            }
            else
            {
              v62 = *v60;
              if (!*v60 && (v50[87] & 0x20) == 0)
                goto LABEL_66;
              if (!v61)
              {
                v69 = 0;
LABEL_69:
                if (v62)
                  llvm::MetadataTracking::untrack((uint64_t)(v50 + 112), v62);
                v63 = v69;
                *v60 = v69;
                if (v63)
                  llvm::MetadataTracking::retrack((uint64_t)&v69, v63, (uint64_t)(v50 + 112));
                goto LABEL_66;
              }
            }
            llvm::Value::setMetadata(v25, *(_DWORD *)v58, v18);
LABEL_66:
            v58 += 16;
          }
          while (v58 != v59);
        }
      }
      v8 = v25;
    }
    if ((__clz(1 << a3) ^ 0x3F) < HIBYTE(word_1ED812658))
    {
      v26 = -1 << SHIBYTE(word_1ED812658);
      v27 = *(_QWORD *)(a1 + 64);
      v28 = *(llvm::ConstantInt **)v27;
      v29 = *(unsigned int *)(v27 + 8);
      v67 = v29 >> 8;
      if (v29 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v66, v26, 0);
      }
      else
      {
        v30 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v29);
        if (v29 <= 0xFF)
          v30 = 0;
        v66 = v30 & v26;
      }
      v31 = llvm::ConstantInt::get(v28, (llvm::LLVMContext *)&v66, v18);
      if (v67 >= 0x41 && v66)
        MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
      v68 = 257;
      v8 = (_QWORD *)sub_1C4D89BCC((uint64_t)&v70, v8, (uint64_t)v31, (uint64_t)&v66);
    }
    v32 = *(_QWORD *)(a1 + 32);
    v68 = 257;
    sub_1C4773E38((uint64_t *)&v70, 48, (unsigned __int8 *)v8, v32, (uint64_t)&v66);
  }
  if (v70 != &v72)
    free(v70);
  return v17;
}

unsigned __int8 *sub_1C58890EC(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v5;
  const llvm::APInt *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::ConstantInt *v12;
  unint64_t v13;
  unint64_t v14;
  llvm::ValueHandleBase *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::ConstantInt *v18;
  unint64_t v19;
  unint64_t v20;
  llvm::ValueHandleBase *v21;
  llvm::ConstantInt *v23;
  llvm::ValueHandleBase *v24;
  unint64_t v25;
  unsigned int v26;
  __int16 v27;

  v5 = *(_QWORD *)(a1 + 64);
  v27 = 257;
  v7 = sub_1C5098D9C(a3, a2, v5, (uint64_t)&v25);
  v8 = *(uint64_t **)(a1 + 800);
  v9 = *v8;
  if (*v8)
  {
    v10 = *(_QWORD *)(a1 + 64);
    v11 = ~v9;
    v12 = *(llvm::ConstantInt **)v10;
    v13 = *(unsigned int *)(v10 + 8);
    v26 = v13 >> 8;
    if (v13 >> 8 > 0x40)
    {
      v23 = v12;
      llvm::APInt::initSlowCase((llvm::APInt *)&v25, v11, 0);
      v12 = v23;
    }
    else
    {
      if (v13 <= 0xFF)
        v14 = 0;
      else
        v14 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v13);
      v25 = v14 & v11;
    }
    v15 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v25, v6);
    if (v26 >= 0x41 && v25)
    {
      v24 = v15;
      MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
      v15 = v24;
    }
    v27 = 257;
    v7 = (_QWORD *)sub_1C4D89BCC((uint64_t)a3, v7, (uint64_t)v15, (uint64_t)&v25);
    v8 = *(uint64_t **)(a1 + 800);
  }
  v16 = v8[1];
  if (v16)
  {
    v17 = *(_QWORD *)(a1 + 64);
    v18 = *(llvm::ConstantInt **)v17;
    v19 = *(unsigned int *)(v17 + 8);
    v26 = v19 >> 8;
    if (v19 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v25, v16, 0);
    }
    else
    {
      if (v19 <= 0xFF)
        v20 = 0;
      else
        v20 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v19);
      v25 = v20 & v16;
    }
    v21 = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v25, v6);
    if (v26 >= 0x41 && v25)
      MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
    v27 = 257;
    return sub_1C506EC1C(a3, v7, (uint64_t)v21, (uint64_t)&v25);
  }
  return (unsigned __int8 *)v7;
}

void sub_1C58892B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  llvm::Value **v8;
  uint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  llvm::Value ***v32;
  llvm::Value *v33;
  llvm::Value *v34;
  unint64_t v35;
  llvm::Value **v36;
  llvm::Value **v37;
  llvm::Value **v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  char **v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  llvm::Value **v55;
  llvm::Value *v56;
  uint64_t **v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char v81[32];
  __int16 v82;

  if (**(_QWORD **)a1 < 5uLL)
  {
    v14 = *(uint64_t ***)(a1 + 32);
    v16 = v14[1];
    v15 = (unint64_t)v14[2];
    if ((unint64_t)v16 >= v15)
    {
      v24 = *v14;
      v25 = v16 - *v14;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        goto LABEL_102;
      v27 = v15 - (_QWORD)v24;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        if (v28 >> 61)
          goto LABEL_103;
        v29 = (char *)operator new(8 * v28);
      }
      else
      {
        v29 = 0;
      }
      v44 = (uint64_t *)&v29[8 * v25];
      *v44 = a2;
      v17 = v44 + 1;
      if (v16 != v24)
      {
        do
        {
          v45 = *--v16;
          *--v44 = v45;
        }
        while (v16 != v24);
        v16 = *v14;
      }
      *v14 = v44;
      v14[1] = v17;
      v14[2] = (uint64_t *)&v29[8 * v28];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v16 = a2;
      v17 = v16 + 1;
    }
    v14[1] = v17;
    v46 = *(char ***)(a1 + 40);
    v48 = v46[1];
    v47 = (unint64_t)v46[2];
    if ((unint64_t)v48 < v47)
    {
LABEL_85:
      *(_QWORD *)v48 = a3;
      v69 = v48 + 8;
      goto LABEL_101;
    }
    v49 = *v46;
    v50 = (v48 - *v46) >> 3;
    v51 = v50 + 1;
    if (!((unint64_t)(v50 + 1) >> 61))
    {
      v52 = v47 - (_QWORD)v49;
      if (v52 >> 2 > v51)
        v51 = v52 >> 2;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      if (v53)
      {
        if (v53 >> 61)
          goto LABEL_103;
        v54 = (char *)operator new(8 * v53);
      }
      else
      {
        v54 = 0;
      }
      v67 = &v54[8 * v50];
      v68 = &v54[8 * v53];
      *(_QWORD *)v67 = a3;
      v69 = v67 + 8;
      if (v48 == v49)
        goto LABEL_99;
      do
      {
        v70 = *((_QWORD *)v48 - 1);
        v48 -= 8;
        *((_QWORD *)v67 - 1) = v70;
        v67 -= 8;
      }
      while (v48 != v49);
      goto LABEL_98;
    }
    goto LABEL_102;
  }
  v6 = *(uint64_t **)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(a1 + 16), (unint64_t)**(unsigned int **)(a1 + 24) >> 1, 0);
  v82 = 257;
  v9 = sub_1C506E874(v7, a2, (uint64_t)v8, (uint64_t)v81, 0, 0);
  v10 = *(uint64_t ***)(a1 + 32);
  v12 = v10[1];
  v11 = (unint64_t)v10[2];
  if ((unint64_t)v12 >= v11)
  {
    v18 = *v10;
    v19 = v12 - *v10;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      goto LABEL_102;
    v21 = v11 - (_QWORD)v18;
    if (v21 >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        goto LABEL_103;
      v23 = (char *)operator new(8 * v22);
    }
    else
    {
      v23 = 0;
    }
    v30 = (uint64_t *)&v23[8 * v19];
    *v30 = a2;
    v13 = v30 + 1;
    if (v12 != v18)
    {
      do
      {
        v31 = *--v12;
        *--v30 = v31;
      }
      while (v12 != v18);
      v12 = *v10;
    }
    *v10 = v30;
    v10[1] = v13;
    v10[2] = (uint64_t *)&v23[8 * v22];
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v12 = a2;
    v13 = v12 + 1;
  }
  v10[1] = v13;
  v32 = *(llvm::Value ****)(a1 + 40);
  v33 = sub_1C588978C(*v6, **(_QWORD **)(a1 + 56), **(_BYTE **)(a1 + 64), *(uint64_t ***)(a1 + 72));
  v34 = v33;
  v36 = v32[1];
  v35 = (unint64_t)v32[2];
  if ((unint64_t)v36 >= v35)
  {
    v38 = *v32;
    v39 = v36 - *v32;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 61)
      goto LABEL_102;
    v41 = v35 - (_QWORD)v38;
    if (v41 >> 2 > v40)
      v40 = v41 >> 2;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    if (v42)
    {
      if (v42 >> 61)
        goto LABEL_103;
      v43 = (char *)operator new(8 * v42);
    }
    else
    {
      v43 = 0;
    }
    v55 = (llvm::Value **)&v43[8 * v39];
    *v55 = v34;
    v37 = v55 + 1;
    if (v36 != v38)
    {
      do
      {
        v56 = *--v36;
        *--v55 = v56;
      }
      while (v36 != v38);
      v36 = *v32;
    }
    *v32 = v55;
    v32[1] = v37;
    v32[2] = (llvm::Value **)&v43[8 * v42];
    if (v36)
      operator delete(v36);
  }
  else
  {
    *v36 = v33;
    v37 = v36 + 1;
  }
  v32[1] = v37;
  v57 = *(uint64_t ***)(a1 + 32);
  v59 = v57[1];
  v58 = (unint64_t)v57[2];
  if ((unint64_t)v59 >= v58)
  {
    v61 = *v57;
    v62 = v59 - *v57;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
      goto LABEL_102;
    v64 = v58 - (_QWORD)v61;
    if (v64 >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      if (v65 >> 61)
        goto LABEL_103;
      v66 = (char *)operator new(8 * v65);
    }
    else
    {
      v66 = 0;
    }
    v71 = (uint64_t *)&v66[8 * v62];
    *v71 = v9;
    v60 = v71 + 1;
    if (v59 != v61)
    {
      do
      {
        v72 = *--v59;
        *--v71 = v72;
      }
      while (v59 != v61);
      v59 = *v57;
    }
    *v57 = v71;
    v57[1] = v60;
    v57[2] = (uint64_t *)&v66[8 * v65];
    if (v59)
      operator delete(v59);
  }
  else
  {
    *v59 = v9;
    v60 = v59 + 1;
  }
  v57[1] = v60;
  v46 = *(char ***)(a1 + 40);
  v48 = v46[1];
  v73 = (unint64_t)v46[2];
  if ((unint64_t)v48 < v73)
    goto LABEL_85;
  v74 = *v46;
  v75 = (v48 - *v46) >> 3;
  v76 = v75 + 1;
  if ((unint64_t)(v75 + 1) >> 61)
LABEL_102:
    abort();
  v77 = v73 - (_QWORD)v74;
  if (v77 >> 2 > v76)
    v76 = v77 >> 2;
  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
    v78 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v78 = v76;
  if (!v78)
  {
    v79 = 0;
    goto LABEL_96;
  }
  if (v78 >> 61)
LABEL_103:
    sub_1C4764EE4();
  v79 = (char *)operator new(8 * v78);
LABEL_96:
  v67 = &v79[8 * v75];
  v68 = &v79[8 * v78];
  *(_QWORD *)v67 = a3;
  v69 = v67 + 8;
  if (v48 == v74)
    goto LABEL_99;
  do
  {
    v80 = *((_QWORD *)v48 - 1);
    v48 -= 8;
    *((_QWORD *)v67 - 1) = v80;
    v67 -= 8;
  }
  while (v48 != v74);
LABEL_98:
  v48 = *v46;
LABEL_99:
  *v46 = v67;
  v46[1] = v69;
  v46[2] = v68;
  if (v48)
    operator delete(v48);
LABEL_101:
  v46[1] = v69;
}

llvm::Value *sub_1C588978C(uint64_t a1, uint64_t a2, char a3, uint64_t **a4)
{
  const llvm::APInt *v7;
  llvm::GetElementPtrInst *v8;
  uint64_t *v9;
  uint64_t v10;
  llvm::ConstantInt *v11;
  unint64_t v12;
  char v13;
  llvm::ValueHandleBase *v14;
  uint64_t ***v15;
  uint64_t v16;
  char *v17;
  char *v18;
  llvm::Value *v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t **v22;
  char *v23;
  char *v25;
  unsigned __int8 **v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  llvm::ConstantInt *v31;
  llvm::ValueHandleBase *v32;
  char v33[32];
  __int16 v34;
  uint64_t v35;
  unsigned int v36;
  __int16 v37;
  unsigned __int8 *v38;
  void *v39;
  unsigned int v40;
  _QWORD v41[8];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v39, a2, 0, 0, 0);
  v8 = *(llvm::GetElementPtrInst **)(a1 + 24);
  v9 = *a4;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(llvm::ConstantInt **)v10;
  v12 = *(unsigned int *)(v10 + 8);
  v36 = v12 >> 8;
  if (v12 >> 8 > 0x40)
  {
    v31 = v11;
    llvm::APInt::initSlowCase((llvm::APInt *)&v35, 1, 0);
    v11 = v31;
  }
  else
  {
    if (v12 <= 0xFF)
      v13 = 0;
    else
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v12);
    v35 = v13 & 1;
  }
  v14 = llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v35, v7);
  if (v36 >= 0x41 && v35)
  {
    v32 = v14;
    MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
    v14 = v32;
  }
  v37 = 257;
  v15 = sub_1C4867B70((uint64_t *)&v39, v8, v9, (uint64_t)v14, (uint64_t)&v35);
  *a4 = (uint64_t *)v15;
  v16 = *(_QWORD *)(a1 + 24);
  v34 = 257;
  v17 = (char *)operator new(0x60uLL);
  v18 = v17;
  v19 = (llvm::Value *)(v17 + 32);
  *((_QWORD *)v17 + 2) = 0;
  *((_QWORD *)v17 + 3) = v17 + 32;
  v37 = 257;
  *((_QWORD *)v17 + 4) = v16;
  *((_QWORD *)v17 + 5) = 0;
  *((_WORD *)v17 + 24) = 60;
  *((_DWORD *)v17 + 13) = 1;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *((_DWORD *)v17 + 22) = 0;
  *(_QWORD *)v17 = v15;
  *((_QWORD *)v17 + 1) = 0;
  if (v15)
  {
    v22 = v15[1];
    v21 = v15 + 1;
    v20 = v22;
    *((_QWORD *)v17 + 1) = v22;
    if (v22)
      v20[2] = (uint64_t *)(v17 + 8);
    *((_QWORD *)v17 + 2) = v21;
    *v21 = v17;
  }
  *((_WORD *)v17 + 25) = 2 * (a3 & 0x3F);
  v17[92] = 1;
  llvm::Value::setName((uint64_t ***)v17 + 4, (uint64_t)&v35);
  (*(void (**)(uint64_t, llvm::Value *, char *, _QWORD, _QWORD))(*(_QWORD *)v42 + 16))(v42, v19, v33, v41[4], v41[5]);
  v23 = (char *)v39;
  if (v40)
  {
    v25 = (char *)v39 + 16 * v40;
    v26 = (unsigned __int8 **)(v18 + 80);
    while (1)
    {
      v27 = *(_DWORD *)v23;
      v28 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
      if (v28)
      {
        if (!v27)
        {
          v38 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
          llvm::MetadataTracking::track((uint64_t)&v38, v28, 2);
          v29 = *v26;
          goto LABEL_26;
        }
      }
      else
      {
        v29 = *v26;
        if (!*v26 && (v18[55] & 0x20) == 0)
          goto LABEL_23;
        if (!v27)
        {
          v38 = 0;
LABEL_26:
          if (v29)
            llvm::MetadataTracking::untrack((uint64_t)(v18 + 80), v29);
          v30 = v38;
          *v26 = v38;
          if (v30)
            llvm::MetadataTracking::retrack((uint64_t)&v38, v30, (uint64_t)(v18 + 80));
          goto LABEL_23;
        }
      }
      llvm::Value::setMetadata(v19, *(_DWORD *)v23, (llvm::MDNode *)v28);
LABEL_23:
      v23 += 16;
      if (v23 == v25)
      {
        v23 = (char *)v39;
        break;
      }
    }
  }
  if (v23 != (char *)v41)
    free(v23);
  return v19;
}

void sub_1C5889A38(uint64_t *a1, unsigned __int8 *a2, int a3, char a4, uint64_t a5)
{
  const llvm::APInt *v10;
  llvm::ConstantInt *v11;
  int v12;
  llvm::ConstantInt **v13;
  llvm::ConstantInt *v14;
  llvm::ValueHandleBase *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  char *v19;
  char *v20;
  unsigned __int8 **v21;
  llvm::Value *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 ***v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unsigned __int8 **v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  _DWORD *v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  __int16 v42;
  unsigned __int8 *v43;
  void *v44;
  unsigned int v45;
  _QWORD v46[8];
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v44, a5, 0, 0, 0);
  v11 = *(llvm::ConstantInt **)(*a1 + 8);
  v12 = 8 * a3;
  LODWORD(v40) = 8 * a3;
  if (8 * a3 <= 63)
  {
    switch(v12)
    {
      case 32:
        v13 = (llvm::ConstantInt **)(*(_QWORD *)v11 + 1960);
        goto LABEL_8;
      case 16:
        v13 = (llvm::ConstantInt **)(*(_QWORD *)v11 + 1936);
        goto LABEL_8;
      case 8:
        v13 = (llvm::ConstantInt **)(*(_QWORD *)v11 + 1912);
        goto LABEL_8;
    }
  }
  else
  {
    if (v12 == 64)
    {
      v13 = (llvm::ConstantInt **)(*(_QWORD *)v11 + 1984);
      goto LABEL_8;
    }
    if (v12 == 128)
    {
      v13 = (llvm::ConstantInt **)(*(_QWORD *)v11 + 2008);
      goto LABEL_8;
    }
  }
  v36 = sub_1C5270984(*(_QWORD *)v11 + 2168, &v40);
  v13 = (llvm::ConstantInt **)*((_QWORD *)v36 + 1);
  if (!v13)
  {
    v37 = v36;
    v13 = (llvm::ConstantInt **)sub_1C484358C(*(_QWORD *)v11 + 2040, 24, 3);
    v38 = v40;
    *v13 = v11;
    v13[2] = 0;
    v13[1] = (llvm::ConstantInt *)((v38 << 8) | 0xDu);
    *((_QWORD *)v37 + 1) = v13;
  }
LABEL_8:
  v14 = *v13;
  v41 = *((_DWORD *)v13 + 2) >> 8;
  if (v41 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v40, 0, 0);
  else
    v40 = 0;
  v15 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v40, v10);
  if (v41 >= 0x41 && v40)
    MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
  v16 = sub_1C5889E24(*a1, a2, a5);
  v17 = llvm::PointerType::get((llvm::PointerType *)v13, 0);
  v42 = 257;
  v18 = sub_1C4773E38((uint64_t *)&v44, 49, v16, v17, (uint64_t)&v40);
  v19 = (char *)operator new(0x80uLL);
  v20 = v19;
  *((_DWORD *)v19 + 21) = *((_DWORD *)v19 + 21) & 0x38000000 | 2;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 2) = 0;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 5) = 0;
  *((_QWORD *)v19 + 6) = 0;
  *((_QWORD *)v19 + 4) = 0;
  v21 = (unsigned __int8 **)(v19 + 32);
  *((_QWORD *)v19 + 8) = ***(_QWORD ***)v15 + 1576;
  v22 = (llvm::Value *)(v19 + 64);
  *((_QWORD *)v19 + 3) = v19 + 64;
  *((_QWORD *)v19 + 7) = v19 + 64;
  *((_QWORD *)v19 + 9) = 0;
  v19[80] = 61;
  v19[81] = 0;
  *((_WORD *)v19 + 41) = 0;
  *((_DWORD *)v19 + 21) = 2;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *((_DWORD *)v19 + 30) = 0;
  *(_QWORD *)v19 = v15;
  v25 = *((_QWORD *)v15 + 1);
  v24 = (_QWORD *)((char *)v15 + 8);
  v23 = v25;
  *((_QWORD *)v19 + 1) = v25;
  if (v25)
    *(_QWORD *)(v23 + 16) = v19 + 8;
  *((_QWORD *)v19 + 2) = v24;
  *v24 = v19;
  if (*((_QWORD *)v19 + 4))
  {
    **((_QWORD **)v19 + 6) = *((_QWORD *)v19 + 5);
    v39 = *((_QWORD *)v19 + 5);
    if (v39)
      *(_QWORD *)(v39 + 16) = *((_QWORD *)v19 + 6);
  }
  *v21 = v18;
  if (v18)
  {
    v28 = *((_QWORD *)v18 + 1);
    v27 = (unsigned __int8 ***)(v18 + 8);
    v26 = v28;
    *((_QWORD *)v19 + 5) = v28;
    if (v28)
      *(_QWORD *)(v26 + 16) = v19 + 40;
    *((_QWORD *)v19 + 6) = v27;
    *v27 = v21;
  }
  *((_WORD *)v19 + 41) = 2 * (a4 & 0x3F);
  v19[124] = 1;
  v42 = 257;
  (*(void (**)(uint64_t, llvm::Value *, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v47 + 16))(v47, v22, &v40, v46[4], v46[5]);
  v29 = (char *)v44;
  if (v45)
  {
    v30 = (char *)v44 + 16 * v45;
    v31 = (unsigned __int8 **)(v20 + 112);
    while (1)
    {
      v32 = *(_DWORD *)v29;
      v33 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
      if (v33)
      {
        if (!v32)
        {
          v43 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
          llvm::MetadataTracking::track((uint64_t)&v43, v33, 2);
          v34 = *v31;
          goto LABEL_35;
        }
      }
      else
      {
        v34 = *v31;
        if (!*v31 && (v20[87] & 0x20) == 0)
          goto LABEL_32;
        if (!v32)
        {
          v43 = 0;
LABEL_35:
          if (v34)
            llvm::MetadataTracking::untrack((uint64_t)(v20 + 112), v34);
          v35 = v43;
          *v31 = v43;
          if (v35)
            llvm::MetadataTracking::retrack((uint64_t)&v43, v35, (uint64_t)(v20 + 112));
          goto LABEL_32;
        }
      }
      llvm::Value::setMetadata(v22, *(_DWORD *)v29, (llvm::MDNode *)v33);
LABEL_32:
      v29 += 16;
      if (v29 == v30)
      {
        v29 = (char *)v44;
        break;
      }
    }
  }
  if (v29 != (char *)v46)
    free(v29);
}

unsigned __int8 *sub_1C5889E24(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *result;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _WORD v11[20];
  void *v12[2];
  uint64_t v13;
  void *v14[2];
  _QWORD v15[16];

  v15[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v12, a3, 0, 0, 0);
  v6 = sub_1C58890EC(a1, a2, (uint64_t *)v12);
  sub_1C4773D54((uint64_t)v14, a3, 0, 0, 0);
  v7 = *(_QWORD *)(a1 + 56);
  v11[16] = 257;
  result = sub_1C4773E38((uint64_t *)v14, 48, v6, v7, (uint64_t)v11);
  if (v14[0] != v15)
  {
    v9 = result;
    free(v14[0]);
    result = v9;
  }
  if (v12[0] != &v13)
  {
    v10 = result;
    free(v12[0]);
    return v10;
  }
  return result;
}

void sub_1C5889F40(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, unsigned __int8 *a4, unint64_t a5, unsigned __int8 a6)
{
  _QWORD *v11;
  unint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  llvm::Value **v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unsigned __int8 v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t ***v35;
  llvm::GetElementPtrInst *v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 v39;
  uint64_t ***v40;
  llvm::GetElementPtrInst *v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  char v47;
  _BYTE v48[32];
  __int16 v49;
  _BYTE v50[32];
  __int16 v51;

  v11 = a1;
  v12 = *(_QWORD *)(a1[1] + 40) + 272;
  llvm::DataLayout::getAlignment(v12, *(_QWORD *)(*a1 + 64));
  v14 = v13;
  sub_1C4768AD0(v12, *(_QWORD *)(*v11 + 64));
  v17 = v16 + 7;
  if ((_DWORD)v15 == 1)
  v18 = a6 >= v14 && (v17 >> 3) >= 5;
  v45 = a6;
  if (v18)
  {
    v47 = v14;
    sub_1C4768AD0(*(_QWORD *)(v11[1] + 40) + 272, *(_QWORD *)(*v11 + 64));
    v22 = v21 + 7;
    if ((_DWORD)v20 == 1)
    v23 = (uint64_t *)a3;
    if ((v22 & 0x7FFFFFFF8) != 0x20)
    {
      v24 = *(_QWORD *)(*v11 + 64);
      v51 = 257;
      v12 = (unint64_t)sub_1C4D8D514(a2, a3, v24, 0, (uint64_t)v50);
      v51 = 257;
      v25 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v12, 32, 0);
      v26 = sub_1C506E874((uint64_t)a2, v12, (uint64_t)v25, (uint64_t)v50, 0, 0);
      v49 = 257;
      v23 = (uint64_t *)sub_1C4773594((uint64_t)a2, (_QWORD *)v12, v26, (uint64_t)v48);
    }
    v46 = v11;
    v27 = llvm::PointerType::get(*(llvm::PointerType **)(*v11 + 64), 0);
    v51 = 257;
    v28 = sub_1C5098D9C(a2, a4, v27, (uint64_t)v50);
    v29 = (v17 >> 3);
    if (v29 <= a5)
    {
      v30 = v28;
      v43 = a3;
      LODWORD(v12) = 0;
      LODWORD(v19) = 0;
      v31 = a5;
      v32 = v45;
      v33 = (v17 >> 3) >> 2;
      v44 = v31;
      v34 = v31 / v29;
      do
      {
        v35 = (uint64_t ***)v30;
        if ((_DWORD)v12)
        {
          v36 = *(llvm::GetElementPtrInst **)(*v46 + 64);
          v51 = 257;
          v35 = sub_1C48678B0(a2, v36, v30, v12, (uint64_t)v50);
        }
        v37 = v17 & 0xFFFFFFFFFFFF0000 | v32;
        v17 = v37 | 0x100;
        sub_1C509CCE8(a2, v23, (uint64_t)v35, v37 | 0x100, 0);
        LODWORD(v19) = v19 + v33;
        v12 = (v12 + 1);
        v32 = v47;
      }
      while (v34 > v12);
      v45 = v47;
      a3 = v43;
      a5 = v44;
    }
    else
    {
      LODWORD(v19) = 0;
    }
    v11 = v46;
  }
  else
  {
    LODWORD(v19) = 0;
  }
  v38 = (a5 + 3) >> 2;
  if (v38 > v19)
  {
    v39 = v45;
    do
    {
      v40 = (uint64_t ***)a4;
      if ((_DWORD)v19)
      {
        v41 = *(llvm::GetElementPtrInst **)(*v11 + 24);
        v51 = 257;
        v40 = sub_1C48678B0(a2, v41, a4, v19, (uint64_t)v50);
      }
      v42 = v12 & 0xFFFFFFFFFFFF0000 | v39;
      v12 = v42 | 0x100;
      sub_1C509CCE8(a2, (uint64_t *)a3, (uint64_t)v40, v42 | 0x100, 0);
      v39 = HIBYTE(word_1ED812658);
      v19 = (v19 + 1);
    }
    while (v38 > v19);
  }
}

uint64_t sub_1C588A218(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t **v6;
  uint64_t v7;
  _WORD v9[20];
  uint64_t v10;

  v4 = a2;
  v10 = a2;
  if (sub_1C587F060())
  {
    v6 = *(uint64_t ***)(*(_QWORD *)a1 + 456);
    v7 = *(_QWORD *)(*(_QWORD *)a1 + 464);
    v9[16] = 257;
    return sub_1C4774778(a3, v6, v7, &v10, 1, (uint64_t)v9, 0);
  }
  return v4;
}

void sub_1C588A288(uint64_t **a1, char a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned __int8 **v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::ConstantAggregateZero *v17;
  llvm::Type *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[16];

  v24[15] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(_QWORD *)(a3 - 8);
  else
    v7 = a3 - 32 * (v6 & 0x7FFFFFF);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 56) + 40) + 272, **(_QWORD **)(v7 + 32));
  v10 = v9 + 7;
  if ((_DWORD)v8 == 1)
  if (v10 >= 8)
  {
    v11 = v10 >> 3;
    sub_1C4773D54((uint64_t)&v23, a3, 0, 0, 0);
    v12 = *(_DWORD *)(a3 + 20);
    if ((v12 & 0x40000000) != 0)
      v13 = *(unsigned __int8 ***)(a3 - 8);
    else
      v13 = (unsigned __int8 **)(a3 - 32 * (v12 & 0x7FFFFFF));
    if (byte_1ED8126E8)
      v14 = a2;
    else
      v14 = 0;
    sub_1C5889A38(*a1, *v13, v11, v14, a3);
    v15 = *a1;
    v16 = **a1;
    if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x10)
    {
      sub_1C5884548(v16, *(_QWORD *)a3);
      v19 = llvm::ConstantAggregateZero::get(v17, v18);
    }
    else
    {
      v19 = *(_QWORD **)(v16 + 72);
    }
    v22 = a3;
    sub_1C4EAD954(v15 + 14, &v22)[1] = v19;
    v20 = *a1;
    v21 = *(_QWORD *)(**a1 + 40);
    if (sub_1C587F060())
    {
      v22 = a3;
      sub_1C4EAD954(v20 + 17, &v22)[1] = v21;
    }
    if (v23 != v24)
      free(v23);
  }
}

void sub_1C588A424(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  _WORD v7[20];
  _QWORD *v8;
  void *v9[2];
  _QWORD v10[16];

  v10[15] = *MEMORY[0x1E0C80C00];
  sub_1C58875E8(a1, a2);
  if (byte_1ED812AA8)
  {
    sub_1C4773D54((uint64_t)v9, a2, 0, 0, 0);
    v8 = sub_1C5883144(*a1, a2);
    v4 = *(_QWORD *)*a1;
    v5 = *(uint64_t ***)(v4 + 440);
    v6 = *(_QWORD *)(v4 + 448);
    v7[16] = 257;
    sub_1C4774778((uint64_t *)v9, v5, v6, (uint64_t *)&v8, 1, (uint64_t)v7, 0);
    if (v9[0] != v10)
      free(v9[0]);
  }
}

void sub_1C588A500(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  llvm::ConstantInt **v19;
  llvm::Value **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 ParamAlignment;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  _QWORD *v34;
  uint64_t **v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  _BYTE v39[32];
  __int16 v40;
  _BYTE v41[32];
  __int16 v42;
  uint64_t v43[4];
  __int16 v44;
  uint64_t v45[4];
  __int16 v46;
  uint64_t v47[3];
  void *v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v48, a2, 0, 0, 0);
  if (sub_1C587F060())
  {
    v4 = **a1;
    v5 = *(uint64_t ***)(v4 + 488);
    v6 = *(_QWORD *)(v4 + 496);
    v7 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v8 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v50 + 1912), 0);
    v42 = 257;
    v47[0] = (uint64_t)sub_1C5098D9C((uint64_t *)v48, v7, v8, (uint64_t)v41);
    v9 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v10 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v50 + 1912), 0);
    v46 = 257;
    v47[1] = (uint64_t)sub_1C5098D9C((uint64_t *)v48, v9, v10, (uint64_t)v45);
    v11 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
    v12 = *(_QWORD *)(**a1 + 64);
    v44 = 257;
    v47[2] = (uint64_t)sub_1C4D8D514((uint64_t *)v48, v11, v12, 0, (uint64_t)v43);
    v40 = 257;
    sub_1C4774778((uint64_t *)v48, v5, v6, v47, 3, (uint64_t)v39, 0);
  }
  v13 = **a1;
  v14 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(a2
                                                                          - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  v15 = sub_1C5889E24(v13, v14, a2);
  v16 = **a1;
  v17 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(a2
                                                                          - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)
                                                                          + 32));
  v18 = sub_1C5889E24(v16, v17, a2);
  v19 = *(llvm::ConstantInt ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
  v20 = llvm::ConstantInt::get(*v19, 1, 0);
  v42 = 257;
  v21 = sub_1C4EC4040((uint64_t)v48, (uint64_t)v19, (uint64_t)v20, (uint64_t)v41, 0, 0);
  v22 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(**a1 + 8) + 1912), 0);
  v42 = 257;
  v23 = sub_1C4773E38((uint64_t *)v48, 49, v15, v22, (uint64_t)v41);
  v42 = 257;
  v24 = sub_1C4773E38((uint64_t *)v48, 49, v18, v22, (uint64_t)v41);
  v25 = *(uint64_t ***)(a2 + 72);
  v26 = *(_QWORD *)(a2 - 32);
  v45[0] = (uint64_t)v23;
  v45[1] = (uint64_t)v24;
  v27 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 96);
  v45[2] = v21;
  v45[3] = v27;
  v42 = 257;
  v28 = sub_1C4774778((uint64_t *)v48, v25, v26, v45, 4, (uint64_t)v41, 0);
  v29 = v28;
  if (byte_1ED8126E8)
  {
    ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
    if ((ParamAlignment & 0xFF00) != 0)
      v31 = ParamAlignment | 0x100;
    else
      v31 = 0;
    sub_1C5346BA8(v29, v31);
    v32 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 1);
    if ((v32 & 0xFF00) != 0)
      v33 = v32 | 0x100;
    else
      v33 = 0;
    sub_1C5346C3C(v29, v33);
  }
  else
  {
    sub_1C509D0D0(v28, 0);
    sub_1C509D15C(v29, 0);
  }
  if (byte_1ED812AA8)
  {
    v34 = (_QWORD *)**a1;
    v35 = (uint64_t **)v34[49];
    v36 = v34[50];
    v43[0] = (uint64_t)v15;
    v37 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
    v38 = v34[8];
    v42 = 257;
    v43[1] = (uint64_t)sub_1C4773690((uint64_t *)v48, v37, v38, (uint64_t)v41);
    v46 = 257;
    sub_1C4774778((uint64_t *)v48, v35, v36, v43, 2, (uint64_t)v45, 0);
  }
  if (v48[0] != &v49)
    free(v48[0]);
}

uint64_t *sub_1C588A8B8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[32];
  __int16 v17;
  unsigned int v18;

  v3 = a2;
  v4 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x10)
  {
    v7 = *(_DWORD *)(*a2 + 8);
    if (v7 == 17)
    {
      if (*(_QWORD *)(v4 + 32))
      {
        v18 = 0;
        v17 = 257;
        v8 = sub_1C506DBC4(a3, a2, &v18, 1, (uint64_t)v16);
        v9 = (_QWORD *)sub_1C588A8B8(a1, v8, a3);
        v18 = 1;
        if (*(_QWORD *)(v4 + 32) >= 2uLL)
        {
          do
          {
            v17 = 257;
            v10 = sub_1C506DBC4(a3, v3, &v18, 1, (uint64_t)v16);
            v11 = sub_1C588A8B8(a1, v10, a3);
            v17 = 257;
            v9 = (_QWORD *)sub_1C4773594(a3, v9, v11, (uint64_t)v16);
            ++v18;
          }
          while (*(_QWORD *)(v4 + 32) > (unint64_t)v18);
        }
        return v9;
      }
      return *(uint64_t **)(*(_QWORD *)a1 + 72);
    }
    if (v7 != 16)
      v4 = 0;
    if (v4)
    {
      if (*(_DWORD *)(v4 + 12))
      {
        v18 = 0;
        v17 = 257;
        v12 = sub_1C506DBC4(a3, a2, &v18, 1, (uint64_t)v16);
        v9 = (_QWORD *)sub_1C588A8B8(a1, v12, a3);
        v18 = 1;
        if (*(_DWORD *)(v4 + 12) >= 2u)
        {
          do
          {
            v17 = 257;
            v13 = sub_1C506DBC4(a3, v3, &v18, 1, (uint64_t)v16);
            v14 = sub_1C588A8B8(a1, v13, a3);
            v17 = 257;
            v9 = (_QWORD *)sub_1C4773594(a3, v9, v14, (uint64_t)v16);
            ++v18;
          }
          while (v18 < *(_DWORD *)(v4 + 12));
        }
        return v9;
      }
      return *(uint64_t **)(*(_QWORD *)a1 + 72);
    }
  }
  return v3;
}

__n128 sub_1C588AAAC(__n128 *a1, _WORD *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED8127E8, "dfsan-combine-pointer-labels-on-store", 0x25uLL);
  result = *a1;
  xmmword_1ED812808 = (__int128)*a1;
  word_1ED8127F2 = (32 * (*a2 & 3)) | word_1ED8127F2 & 0xFF9F;
  v7 = *a3;
  byte_1ED812868 = **a3;
  byte_1ED812879 = 1;
  byte_1ED812878 = *v7;
  return result;
}

__n128 sub_1C588AB30(__n128 *a1, _WORD *a2, int **a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED812C68, "dfsan-instrument-with-call-threshold", 0x24uLL);
  result = *a1;
  xmmword_1ED812C88 = (__int128)*a1;
  word_1ED812C72 = (32 * (*a2 & 3)) | word_1ED812C72 & 0xFF9F;
  v7 = *a3;
  dword_1ED812CE8 = **a3;
  byte_1ED812CFC = 1;
  dword_1ED812CF8 = *v7;
  return result;
}

uint64_t sub_1C588ABB4()
{
  int v1;
  char *v2;
  int v3;
  __n128 v4;

  word_1ED812658 = 513;
  v4.n128_u64[0] = (unint64_t)"respect alignment requirements provided by input IR";
  v4.n128_u64[1] = 51;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = (char *)&v1;
  sub_1C61B091C((llvm::cl::Option *)&qword_1ED812660[1], "dfsan-preserve-alignment", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED812660[1], &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"File listing native ABI functions and how the pass treats them";
  v4.n128_u64[1] = 62;
  LODWORD(v2) = 1;
  sub_1C62AC514((__int128 *)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C50A4924, &qword_1ED812EA8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Combine the label of the pointer with the label of the data when loading from memory.";
  v4.n128_u64[1] = 85;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = (char *)&v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED812728, "dfsan-combine-pointer-labels-on-load", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED812728, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Combine the label of the pointer with the label of the data when storing in memory.";
  v4.n128_u64[1] = 83;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = (char *)&v1;
  sub_1C62AC5CC(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED8127E8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Combine the label of the offset with the label of the pointer when doing pointer arithmetic.";
  v4.n128_u64[1] = 92;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = (char *)&v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8128A8, "dfsan-combine-offset-labels-on-gep", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8128A8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"When dfsan-combine-offset-labels-on-gep and/or dfsan-combine-pointer-labels-on-load"
                                     " are false, this flag can be used to re-enable combining offset and/or pointer tain"
                                     "t when loading specific constant global variables (i.e. lookup tables).";
  v4.n128_u64[1] = 237;
  LODWORD(v2) = 1;
  sub_1C62AC670((__int128 *)&v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C50A4924, &qword_1ED812F80, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Insert calls to __dfsan_nonzero_label on observing a parameter, load or return with"
                                     " a nonzero label";
  v4.n128_u64[1] = 99;
  LODWORD(v2) = 1;
  sub_1C6291C40((uint64_t)&unk_1ED812968, "dfsan-debug-nonzero-labels", &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED812968, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Insert calls to __dfsan_*_callback functions on data events.";
  v4.n128_u64[1] = 60;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = (char *)&v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED812A28, "dfsan-event-callbacks", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED812A28, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Insert calls to callback functions on conditionals.";
  v4.n128_u64[1] = 51;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = (char *)&v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED812AE8, "dfsan-conditional-callbacks", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED812AE8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Propagate labels from condition values of select instructions to results.";
  v4.n128_u64[1] = 73;
  v3 = 1;
  LOBYTE(v1) = 1;
  v2 = (char *)&v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED812BA8, "dfsan-track-select-control-flow", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED812BA8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"If the function being instrumented requires more than this number of origin stores,"
                                     " use callbacks instead of inline checks (-1 means never use callbacks).";
  v4.n128_u64[1] = 154;
  v3 = 1;
  v1 = 3500;
  v2 = (char *)&v1;
  sub_1C62AC728(&v4, &v3, (int **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED812C68, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Track origins of labels";
  v4.n128_u64[1] = 23;
  v3 = 1;
  v1 = 0;
  v2 = (char *)&v1;
  sub_1C61F8494((llvm::cl::Option *)&unk_1ED812D28, "dfsan-track-origins", &v4, &v3, (_DWORD **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED812D28, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"If a personality routine is marked uninstrumented from the ABI list, do not create "
                                     "a wrapper for it.";
  v4.n128_u64[1] = 100;
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = (char *)&v1;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED812DE8, "dfsan-ignore-personality-routine", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED812DE8, &dword_1C475E000);
}

void llvm::GCOVOptions::getDefault(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  _BYTE v8[40];

  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_WORD *)a1 = 257;
  *(_BYTE *)(a1 + 6) = 0;
  *(_BYTE *)(a1 + 7) = byte_1ED833988;
  v2 = qword_1ED8338A8;
  if (byte_1ED8338B7 >= 0)
    v2 = byte_1ED8338B7 & 0x7F;
  if (v2 != 4)
  {
    v6 = "Invalid -default-gcov-version: ";
    v7 = 259;
    v5 = 260;
    v4 = &qword_1ED8338A0;
    sub_1C6131AAC((uint64_t *)&v6, (uint64_t *)&v4, (uint64_t)v8);
    llvm::report_fatal_error((uint64_t)v8, 1);
  }
  if (byte_1ED8338B7 >= 0)
    v3 = &qword_1ED8338A0;
  else
    v3 = (uint64_t *)qword_1ED8338A0;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)v3;
}

void llvm::initializeGCOVProfilerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F71A0);
  if (v2 != -1)
  {
    v5[0] = sub_1C588B0C4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F71A0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C588B0C4(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, a2);
  llvm::initializeBranchProbabilityInfoWrapperPassPass(a1, v3);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "Insert instrumentation for GCOV profiling";
  *(_QWORD *)(v4 + 8) = 41;
  *(_QWORD *)(v4 + 16) = "insert-gcov-profiling";
  *(_QWORD *)(v4 + 24) = 21;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F5210;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C588BD2C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C588B168(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5210;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817DB78;
  sub_1C588B234(a1 + 32, a2);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1EF8F71A0);
  if (v4 != -1)
  {
    v8[0] = sub_1C588B0C4;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1EF8F71A0, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C588B234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1C47EBC30((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = (_BYTE *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    sub_1C47EBC30(v6, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)v6 = v7;
  }
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x400000000;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_QWORD *)(a1 + 160) = 0x1000000000;
  *(_DWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0x1000000000;
  return a1;
}

uint64_t sub_1C588B304(size_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t, uint64_t ***), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t ***), uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ****v29;
  uint64_t ***v30;
  int v31;
  int v32;
  uint64_t ***v33;
  char *v34;
  size_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t ***v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  llvm::PointerType *v55;
  uint64_t **inserted;
  uint64_t v57;
  unsigned __int8 *v58;
  void **v59;
  uint64_t *v60;
  void **v61;
  uint64_t **v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 **v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 **v69;
  unsigned __int8 *v70;
  int v71;
  _BOOL4 v72;
  char v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t *v87;
  llvm::PointerType *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  void **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 **v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t ***);
  uint64_t v103;
  uint64_t (*v104)(uint64_t, uint64_t ***);
  uint64_t v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t *v109;
  unsigned __int8 *v110;
  void **v111[4];
  __int16 v112;
  void *v113[2];
  _QWORD v114[2];
  __int16 v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  _BYTE v121[16];
  uint64_t *v122;
  uint64_t v123;
  _QWORD v124[4];

  v124[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 104) = a2;
  sub_1C48AAFD8((_QWORD *)(a1 + 112), a7);
  *(_QWORD *)(a1 + 144) = *a2;
  v113[0] = "llvm.dbg.cu";
  v115 = 259;
  result = llvm::Module::getNamedMetadata((uint64_t)a2, (uint64_t)v113);
  if (!result)
    return result;
  if (!*(_BYTE *)a1 && !*(_BYTE *)(a1 + 1))
    return 0;
  v101 = result;
  v102 = a3;
  v103 = a4;
  v104 = a5;
  v105 = a6;
  v122 = v124;
  v123 = 0x200000000;
  v119 = (uint64_t *)v121;
  v120 = 0x200000000;
  v14 = *(_QWORD *)(a1 + 104);
  v15 = v14 + 24;
  v16 = *(_QWORD *)(v14 + 32);
  if (v16 == v14 + 24)
    goto LABEL_58;
  do
  {
    v17 = *(_QWORD *)(a1 + 136);
    if (!v17)
      sub_1C485C2F0();
    if (v16)
      v18 = v16 - 56;
    else
      v18 = 0;
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 48))(v17, v18);
    v20 = v18 + 72;
    v21 = *(_QWORD *)(v18 + 80);
    if (v21 == v18 + 72)
      goto LABEL_56;
    v22 = (uint64_t *)v19;
    while (1)
    {
      v23 = v21 - 24;
      if (!v21)
        v23 = 0;
      v24 = *(_QWORD *)(v23 + 48);
      if (v24 != v23 + 40)
        break;
      v21 = *(_QWORD *)(v21 + 8);
      if (v21 == v20)
        goto LABEL_56;
    }
    while (1)
    {
      v42 = v24 - 24;
      if (!v24)
        v42 = 0;
      v43 = *(unsigned __int8 *)(v42 + 16);
      if (v43 == 84)
        v44 = v42;
      else
        v44 = 0;
      if (!v24)
        goto LABEL_48;
      if (v43 != 84)
        goto LABEL_48;
      v45 = *(uint64_t ****)(v44 - 32);
      if (!v45)
        goto LABEL_48;
      if (*((_BYTE *)v45 + 16))
        goto LABEL_48;
      v46 = (uint64_t)v45[3];
      if (v46 != *(_QWORD *)(v44 + 72))
        goto LABEL_48;
      LODWORD(v113[0]) = 0;
      if ((*((_BYTE *)v45 + 33) & 0x20) != 0)
        goto LABEL_48;
      if ((*((_BYTE *)v45 + 23) & 0x10) == 0)
      {
        v35 = 0;
        v34 = &byte_1C871356D;
        goto LABEL_27;
      }
      v25 = ***v45;
      v26 = *(_QWORD *)(v25 + 152);
      v27 = *(unsigned int *)(v25 + 168);
      if (!(_DWORD)v27)
        goto LABEL_25;
      LODWORD(v28) = (v27 - 1) & ((v45 >> 4) ^ (v45 >> 9));
      v29 = (uint64_t ****)(v26 + 16 * v28);
      v30 = *v29;
      if (*v29 != v45)
      {
        v31 = 1;
        while (v30 != (uint64_t ***)-4096)
        {
          v32 = v28 + v31++;
          v28 = v32 & (v27 - 1);
          v30 = *(uint64_t ****)(v26 + 16 * v28);
          if (v30 == v45)
          {
            v29 = (uint64_t ****)(v26 + 16 * v28);
            goto LABEL_26;
          }
        }
LABEL_25:
        v29 = (uint64_t ****)(v26 + 16 * v27);
      }
LABEL_26:
      v33 = v29[1];
      v36 = (size_t)*v33;
      v34 = (char *)(v33 + 2);
      v35 = v36;
LABEL_27:
      v37 = *v22;
      LODWORD(v19) = llvm::TargetLibraryInfoImpl::getLibFunc(v19, v34, v35, v113);
      if ((_DWORD)v19)
      {
        v38 = v46;
        v39 = (int)v113[0];
        LODWORD(v19) = llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v37, v38, (int)v113[0]);
        if ((_DWORD)v19)
        {
          if ((v39 - 195) >= 8)
          {
            if (v39 != 251)
              goto LABEL_48;
            v40 = v123;
            v41 = &v122;
            if (v123 >= (unint64_t)HIDWORD(v123))
            {
              LODWORD(v19) = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v122, (uint64_t)v124, v123 + 1, 8);
              v40 = v123;
            }
          }
          else
          {
            v40 = v120;
            v41 = &v119;
            if (v120 >= (unint64_t)HIDWORD(v120))
            {
              LODWORD(v19) = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)v121, v120 + 1, 8);
              v40 = v120;
            }
          }
          (*v41)[v40] = v44;
          ++*((_DWORD *)v41 + 2);
        }
      }
LABEL_48:
      v24 = *(_QWORD *)(v24 + 8);
      v47 = v21 - 24;
      if (!v21)
        v47 = 0;
      if (v24 == v47 + 40)
        break;
LABEL_55:
      if (v21 == v20)
        goto LABEL_56;
    }
    while (1)
    {
      v21 = *(_QWORD *)(v21 + 8);
      if (v21 == v20)
        break;
      v48 = v21 - 24;
      if (!v21)
        v48 = 0;
      v24 = *(_QWORD *)(v48 + 48);
      if (v24 != v48 + 40)
        goto LABEL_55;
    }
LABEL_56:
    v16 = *(_QWORD *)(v16 + 8);
  }
  while (v16 != v15);
  if ((_DWORD)v123)
  {
    v83 = v122;
    v84 = 8 * v123;
    do
    {
      v85 = (_QWORD *)*v83;
      sub_1C4773D54((uint64_t)v113, *v83, 0, 0, 0);
      v87 = (uint64_t *)v85[4];
      v86 = (uint64_t *)v85[5];
      v88 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v118 + 1960), 0, 0, 0);
      v85[9] = llvm::Module::getOrInsertFunction(*(_QWORD *)(a1 + 104), "__gcov_fork", 0xBuLL, v88, 0);
      v90 = v85 - 4;
      if (*(v85 - 4))
      {
        *(_QWORD *)*(v85 - 2) = *(v85 - 3);
        v91 = *(v85 - 3);
        if (v91)
          *(_QWORD *)(v91 + 16) = *(v85 - 2);
      }
      *v90 = v89;
      if (v89)
      {
        v94 = *(_QWORD *)(v89 + 8);
        v92 = (_QWORD *)(v89 + 8);
        v93 = v94;
        *(v85 - 3) = v94;
        if (v94)
          *(_QWORD *)(v93 + 16) = v85 - 3;
        *(v85 - 2) = v92;
        *v92 = v90;
      }
      v112 = 257;
      llvm::BasicBlock::splitBasicBlock(v86, v87, (uint64_t)v111, 0);
      v95 = (void **)v85[6];
      v111[0] = v95;
      if (v95)
      {
        llvm::MetadataTracking::track((uint64_t)v111, (unsigned __int8 *)v95, 2);
        v96 = v86[5];
        if (v96)
          v97 = v96 - 24;
        else
          v97 = 0;
        v110 = (unsigned __int8 *)v111[0];
        if (v111[0])
          llvm::MetadataTracking::track((uint64_t)&v110, (unsigned __int8 *)v111[0], 2);
      }
      else
      {
        v98 = v86[5];
        if (v98)
          v97 = v98 - 24;
        else
          v97 = 0;
        v110 = 0;
      }
      v99 = (unsigned __int8 **)(v97 + 48);
      if (&v110 == v99)
      {
        if (v110)
          llvm::MetadataTracking::untrack((uint64_t)&v110, v110);
      }
      else
      {
        if (*v99)
          llvm::MetadataTracking::untrack((uint64_t)v99, *v99);
        v100 = v110;
        *v99 = v110;
        if (v100)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v110, v100, (uint64_t)v99);
          v110 = 0;
        }
      }
      if (v111[0])
        llvm::MetadataTracking::untrack((uint64_t)v111, (unsigned __int8 *)v111[0]);
      if (v113[0] != v114)
        free(v113[0]);
      ++v83;
      v84 -= 8;
    }
    while (v84);
  }
LABEL_58:
  v49 = v119;
  if ((_DWORD)v120)
  {
    v52 = 8 * v120;
    v51 = v105;
    do
    {
      v53 = (_QWORD *)*v49;
      sub_1C4773D54((uint64_t)v113, *v49, 0, 0, 0);
      v54 = (uint64_t *)v53[4];
      v109 = (uint64_t *)v53[5];
      v55 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v118 + 1576), 0, 0, 0);
      inserted = (uint64_t **)llvm::Module::getOrInsertFunction(*(_QWORD *)(a1 + 104), "llvm_writeout_files", 0x13uLL, v55, 0);
      v112 = 257;
      sub_1C4774778((uint64_t *)v113, inserted, v57, 0, 0, (uint64_t)v111, 0);
      v58 = (unsigned __int8 *)v53[6];
      v108 = v58;
      if (v58)
        llvm::MetadataTracking::track((uint64_t)&v108, v58, 2);
      v59 = 0;
      v60 = v54 - 3;
      if (!v54)
        v60 = 0;
      v116 = v60[5];
      v117 = v60 + 3;
      v61 = (void **)v60[6];
      v111[0] = v61;
      if (v61)
      {
        llvm::MetadataTracking::track((uint64_t)v111, (unsigned __int8 *)v61, 2);
        v59 = v111[0];
      }
      sub_1C4774EF4((uint64_t)v113, 0, (uint64_t)v59);
      if (v111[0])
        llvm::MetadataTracking::untrack((uint64_t)v111, (unsigned __int8 *)v111[0]);
      v62 = (uint64_t **)llvm::Module::getOrInsertFunction(*(_QWORD *)(a1 + 104), "llvm_reset_counters", 0x13uLL, v55, 0);
      v112 = 257;
      v64 = sub_1C4774778((uint64_t *)v113, v62, v63, 0, 0, (uint64_t)v111, 0);
      v107 = v108;
      if (v108)
        llvm::MetadataTracking::track((uint64_t)&v107, v108, 2);
      v65 = (unsigned __int8 **)(v64 + 48);
      if (&v107 == v65)
      {
        if (v107)
          llvm::MetadataTracking::untrack((uint64_t)&v107, v107);
      }
      else
      {
        if (*v65)
          llvm::MetadataTracking::untrack((uint64_t)v65, *v65);
        v66 = v107;
        *v65 = v107;
        if (v66)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v107, v66, (uint64_t)v65);
          v107 = 0;
        }
      }
      sub_1C614F72C(a1 + 344, &v109, (uint64_t)v111);
      v112 = 257;
      llvm::BasicBlock::splitBasicBlock(v109, v54, (uint64_t)v111, 0);
      v67 = v109[5];
      if (v67)
        v68 = v67 - 24;
      else
        v68 = 0;
      v106 = v108;
      if (v108)
        llvm::MetadataTracking::track((uint64_t)&v106, v108, 2);
      v69 = (unsigned __int8 **)(v68 + 48);
      if (&v106 == v69)
      {
        if (v106)
          llvm::MetadataTracking::untrack((uint64_t)&v106, v106);
      }
      else
      {
        if (*v69)
          llvm::MetadataTracking::untrack((uint64_t)v69, *v69);
        v70 = v106;
        *v69 = v106;
        if (v70)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v106, v70, (uint64_t)v69);
          v106 = 0;
        }
      }
      if (v108)
        llvm::MetadataTracking::untrack((uint64_t)&v108, v108);
      if (v113[0] != v114)
        free(v113[0]);
      ++v49;
      v52 -= 8;
    }
    while (v52);
    v50 = v120;
    v49 = v119;
  }
  else
  {
    v50 = 0;
    v51 = v105;
  }
  v71 = v123;
  if (v49 != (uint64_t *)v121)
    free(v49);
  if (v122 != v124)
    free(v122);
  v72 = (v71 | v50) != 0;
  v73 = *(_BYTE *)(a1 + 31);
  v74 = v73;
  if (v73 >= 0)
    v75 = a1 + 8;
  else
    v75 = *(_QWORD *)(a1 + 8);
  v76 = v73 & 0x7F;
  if (v74 >= 0)
    v77 = v76;
  else
    v77 = *(_QWORD *)(a1 + 16);
  sub_1C588C284((char **)v113, a1, v75, v77);
  sub_1C62AC950((void **)(a1 + 296));
  *(_OWORD *)(a1 + 296) = *(_OWORD *)v113;
  *(_QWORD *)(a1 + 312) = v114[0];
  v113[1] = 0;
  v114[0] = 0;
  v113[0] = 0;
  v111[0] = v113;
  sub_1C588FB38(v111);
  v78 = *(_BYTE *)(a1 + 55);
  v79 = v78;
  if (v78 >= 0)
    v80 = a1 + 32;
  else
    v80 = *(_QWORD *)(a1 + 32);
  v81 = v78 & 0x7F;
  if (v79 >= 0)
    v82 = v81;
  else
    v82 = *(_QWORD *)(a1 + 40);
  sub_1C588C284((char **)v113, a1, v80, v82);
  sub_1C62AC950((void **)(a1 + 320));
  *(_OWORD *)(a1 + 320) = *(_OWORD *)v113;
  *(_QWORD *)(a1 + 336) = v114[0];
  v113[1] = 0;
  v114[0] = 0;
  v113[0] = 0;
  v111[0] = v113;
  sub_1C588FB38(v111);
  sub_1C588C534(a1, v101, v72, v102, v103, v104, v51);
  return 1;
}

uint64_t sub_1C588BC2C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void **v10;

  sub_1C4F02264(a1 + 368);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 344), 8);
  v10 = (void **)(a1 + 320);
  sub_1C588FB38(&v10);
  v10 = (void **)(a1 + 296);
  sub_1C588FB38(&v10);
  v2 = *(char **)(a1 + 152);
  v3 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      sub_1C588FDA4((uint64_t *)&v5[v4]);
      v4 -= 8;
    }
    while (v4);
    v2 = *(char **)(a1 + 152);
  }
  if (v2 != (char *)(a1 + 168))
    free(v2);
  v6 = *(_QWORD **)(a1 + 136);
  if (v6 == (_QWORD *)(a1 + 112))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 112);
  }
  else
  {
    if (!v6)
      goto LABEL_12;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
  v8 = *(void **)(a1 + 72);
  if (v8 != (void *)(a1 + 88))
    free(v8);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1C588BD2C()
{
  uint64_t v0;
  _BYTE v2[8];
  void *v3;
  char v4;
  void *__p;
  char v6;

  v0 = operator new();
  llvm::GCOVOptions::getDefault((uint64_t)v2);
  sub_1C588B168(v0, (uint64_t)v2);
  if (v6 < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3);
  return v0;
}

void sub_1C588BDA0(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817DB78;
  sub_1C588BC2C((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
}

void sub_1C588BDD0(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817DB78;
  sub_1C588BC2C((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C588BE14()
{
  return "GCOV Profiler";
}

void *sub_1C588BE24(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1C588BE60(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  void (**v3)(void);
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a1;
  v7[0] = &off_1E817DC18;
  v7[1] = a1;
  v8 = v7;
  v2 = sub_1C588B304(a1 + 32, a2, (uint64_t (*)(uint64_t, uint64_t ***))sub_1C588BF24, (uint64_t)&v6, (uint64_t (*)(uint64_t, uint64_t ***))sub_1C588BF78, (uint64_t)&v5, (uint64_t)v7);
  if (v8 == v7)
  {
    v3 = (void (**)(void))(v7[0] + 32);
    goto LABEL_5;
  }
  if (v8)
  {
    v3 = (void (**)(void))(*v8 + 40);
LABEL_5:
    (*v3)();
  }
  return v2;
}

uint64_t sub_1C588BF24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32;
}

uint64_t sub_1C588BF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::BranchProbabilityInfoWrapperPass::ID)+ 32;
}

void sub_1C588BFD0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C588BFE4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817DC18;
  result[1] = v3;
  return result;
}

uint64_t sub_1C588C018(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817DC18;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C588C034(uint64_t a1, uint64_t a2)
{
  char **v3;
  char *v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *__src;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = **(char ****)(*(_QWORD *)(a1 + 8) + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  llvm::TargetLibraryAnalysis::run(v5 + 32, a2, (uint64_t)&v21);
  *(_QWORD *)(v5 + 240) = v21;
  if (*(_BYTE *)(v5 + 320))
  {
    if ((uint64_t *)(v5 + 240) == &v21)
    {
LABEL_16:
      *(_DWORD *)(v5 + 312) = v25;
      goto LABEL_17;
    }
    v6 = (void **)(v5 + 248);
    v7 = v23;
    v8 = *(unsigned int *)(v5 + 256);
    if (v8 >= v23)
    {
      if (v23)
        memmove(*v6, __src, 8 * v23);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v5 + 260) < v23)
    {
      *(_DWORD *)(v5 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v7, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*v6, __src, 8 * v8);
      goto LABEL_13;
    }
    v8 = 0;
LABEL_13:
    if (v8 != v23)
      memcpy((char *)*v6 + 8 * v8, (char *)__src + 8 * v8, 8 * v23 - 8 * v8);
LABEL_15:
    *(_DWORD *)(v5 + 256) = v7;
    goto LABEL_16;
  }
  v10 = (void *)(v5 + 264);
  *(_QWORD *)(v5 + 248) = v5 + 264;
  v11 = (void **)(v5 + 248);
  *(_QWORD *)(v5 + 256) = 0x600000000;
  v12 = v23;
  if (v23 && v11 != &__src)
  {
    if (v23 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v23, 8);
      v13 = v23;
      if (!v23)
      {
LABEL_27:
        *(_DWORD *)(v5 + 256) = v12;
        goto LABEL_28;
      }
      v10 = *v11;
    }
    else
    {
      v13 = v23;
    }
    memcpy(v10, __src, 8 * v13);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 312) = v25;
  *(_BYTE *)(v5 + 320) = 1;
LABEL_17:
  if (__src != &v24)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v16);
  sub_1C4D8B52C(v14);
  return v5 + 240;
}

void sub_1C588C284(char **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  char *v5;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[4];
  __int16 v30;
  _QWORD v31[4];
  __int16 v32;
  void *__p[2];
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t (**v39)(llvm::DiagnosticInfo *__hidden);
  int v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v37 = a3;
  v38 = a4;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (a4)
  {
    v4 = a4;
    v5 = (char *)a3;
    v8 = 0;
    do
    {
      LOBYTE(v39) = 59;
      v9 = llvm::StringRef::find(&v37, (char *)&v39, 1uLL, 0);
      if (v9 == -1)
      {
        v12 = 0;
        v13 = 0;
      }
      else
      {
        if (v4 >= v9)
          v10 = v9;
        else
          v10 = v4;
        if (v4 >= v9 + 1)
          v11 = v9 + 1;
        else
          v11 = v4;
        v12 = (uint64_t)&v5[v11];
        v13 = v4 - v11;
        if (!v10)
          goto LABEL_11;
        v4 = v10;
      }
      llvm::Regex::Regex((uint64_t)&v35, v5, v4, 0);
      __p[0] = 0;
      __p[1] = 0;
      v34 = 0;
      if (v36)
      {
        sub_1C5E2A1F8(v36, v35, (uint64_t)__p);
        v14 = *(_QWORD *)(a2 + 144);
        v27[0] = "Regex ";
        v27[2] = v5;
        v27[3] = v4;
        v28 = 1283;
        v29[0] = v27;
        v29[2] = " is not valid: ";
        v30 = 770;
        v31[0] = v29;
        v31[2] = __p;
        v32 = 1026;
        v40 = 0;
        v41 = 0;
        v39 = &off_1E814E960;
        v42 = 0;
        v43 = v31;
        v44 = 0;
        llvm::LLVMContext::diagnose(v14, (const llvm::DiagnosticInfo *)&v39);
      }
      v15 = (unint64_t)a1[2];
      if ((unint64_t)v8 >= v15)
      {
        v17 = *a1;
        v18 = (v8 - *a1) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
          abort();
        v20 = v15 - (_QWORD)v17;
        if (v20 >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21 >> 60)
          sub_1C4764EE4();
        v22 = (char *)operator new(16 * v21);
        v23 = &v22[16 * v18];
        *(_QWORD *)v23 = v35;
        *((_DWORD *)v23 + 2) = v36;
        v24 = &v22[16 * v21];
        v35 = 0;
        v36 = 2;
        v16 = v23 + 16;
        if (v8 == v17)
        {
          *a1 = v23;
          a1[1] = v16;
          a1[2] = v24;
          if (!v8)
            goto LABEL_35;
LABEL_34:
          operator delete(v8);
          goto LABEL_35;
        }
        v25 = v8;
        do
        {
          v26 = *((_QWORD *)v25 - 2);
          v25 -= 16;
          *((_QWORD *)v23 - 2) = v26;
          v23 -= 16;
          *((_DWORD *)v23 + 2) = *((_DWORD *)v25 + 2);
          *(_QWORD *)v25 = 0;
          *((_DWORD *)v25 + 2) = 2;
        }
        while (v25 != v17);
        *a1 = v23;
        a1[1] = v16;
        a1[2] = v24;
        do
        {
          v8 -= 16;
          llvm::Regex::~Regex((llvm::Regex *)v8);
        }
        while (v8 != v17);
        v8 = v17;
        if (v17)
          goto LABEL_34;
      }
      else
      {
        *(_QWORD *)v8 = v35;
        *((_DWORD *)v8 + 2) = v36;
        v35 = 0;
        v36 = 2;
        v16 = v8 + 16;
      }
LABEL_35:
      a1[1] = v16;
      if (SHIBYTE(v34) < 0)
        operator delete(__p[0]);
      llvm::Regex::~Regex((llvm::Regex *)&v35);
      v8 = v16;
LABEL_11:
      v37 = v12;
      v38 = v13;
      v5 = (char *)v12;
      v4 = v13;
    }
    while (v13);
  }
}

void sub_1C588C534(size_t a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t, uint64_t ***), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t ***), uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  _QWORD *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  const llvm::Value *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  _QWORD *v51;
  _QWORD ***v52;
  _QWORD *v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  unsigned __int8 **v58;
  uint64_t v59;
  unsigned __int8 *v60;
  _QWORD *v61;
  void *v62;
  char **v63;
  size_t v64;
  int v65;
  size_t v66;
  unsigned __int8 *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  char **v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t ***v88;
  uint64_t **v89;
  uint64_t v90;
  llvm::BranchProbabilityInfo *v91;
  llvm::BlockFrequencyInfo *v92;
  uint64_t **v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  llvm::Value **v97;
  unsigned int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t Successor;
  uint64_t v120;
  int isCriticalEdge;
  uint64_t v122;
  uint64_t v123;
  _BOOL4 v124;
  uint64_t v125;
  _BOOL4 v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  unint64_t v132;
  BOOL v133;
  uint64_t v134;
  __int128 v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t j;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unsigned int SuccessorNumber;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t k;
  uint64_t v169;
  uint64_t v170;
  uint64_t m;
  uint64_t v172;
  uint64_t n;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  unsigned int v178;
  uint64_t v179;
  unsigned int v181;
  uint64_t v182;
  uint64_t **v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  size_t v188;
  int v189;
  uint64_t **v190;
  size_t v191;
  int v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  int v199;
  BOOL v200;
  unsigned int v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  char *v205;
  unint64_t v206;
  char *v207;
  char *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  char *v216;
  size_t v217;
  char *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  size_t v241;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  size_t v245;
  uint64_t v246;
  void **v247;
  void **v248;
  uint64_t *v249;
  uint64_t **v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int8x16_t *v260;
  uint64_t v261;
  unint64_t v262;
  int8x16_t *v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t *v268;
  _QWORD *v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t *v278;
  uint64_t *v279;
  uint64_t **ii;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  _BOOL8 v290;
  unsigned int v291;
  uint64_t *v292;
  _QWORD *v293;
  _QWORD *v294;
  unint64_t v295;
  uint64_t *jj;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  char *v304;
  uint64_t v305;
  size_t v306;
  unint64_t v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  unsigned __int8 *v319;
  int v320;
  _QWORD *v321;
  _QWORD *v322;
  int v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  _QWORD *v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  int v336;
  unsigned int v337;
  _QWORD *v338;
  _QWORD ***v339;
  _QWORD *v340;
  int v341;
  BOOL v342;
  unsigned int v343;
  uint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  uint64_t v347;
  llvm::Constant *v348;
  llvm::Constant *v349;
  _DWORD *v350;
  uint64_t v351;
  uint64_t v352;
  llvm::Type *v353;
  llvm::Value **NullValue;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t kk;
  uint64_t v359;
  unsigned int v360;
  uint64_t v361;
  llvm::GetElementPtrInst *v363;
  const llvm::APInt *v364;
  uint64_t v365;
  unsigned int *v366;
  char *v367;
  char v368;
  char v369;
  char *v370;
  char *v371;
  llvm::Value *v372;
  uint64_t *v373;
  _QWORD *v374;
  uint64_t v375;
  const llvm::APInt *v376;
  llvm::ConstantInt *v377;
  unsigned int v378;
  char v379;
  llvm::ValueHandleBase *v380;
  _QWORD *v381;
  char v382;
  char v383;
  char *v384;
  char *v385;
  uint64_t *v386;
  llvm::Value *v387;
  uint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t v393;
  char *v394;
  char *v395;
  _QWORD *v396;
  uint64_t v397;
  uint64_t v398;
  _QWORD *v399;
  uint64_t v400;
  size_t v401;
  size_t v402;
  unsigned __int8 **v403;
  int v404;
  unsigned __int8 *v405;
  unsigned __int8 *v406;
  unsigned __int8 *v407;
  size_t v408;
  size_t v409;
  unsigned __int8 **v410;
  int v411;
  unsigned __int8 *v412;
  unsigned __int8 *v413;
  llvm::ConstantInt *v414;
  unint64_t v415;
  char v416;
  uint64_t *v417;
  size_t v418;
  size_t v419;
  unsigned __int8 **v420;
  int v421;
  unsigned __int8 *v422;
  unsigned __int8 *v423;
  unsigned __int8 *v424;
  uint64_t v425;
  int v426;
  _QWORD *v427;
  size_t v428;
  BOOL v429;
  int v430;
  uint64_t v431;
  void **v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  void **v436;
  void *v437;
  uint64_t v438;
  int v439;
  char *v440;
  char *v441;
  unsigned int v442;
  unint64_t v443;
  _BYTE *v444;
  uint64_t v445;
  uint64_t v446;
  char v447;
  char v448;
  uint64_t v449;
  char *v450;
  char v451;
  const char *v452;
  char *v453;
  unsigned int v454;
  unsigned int v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  int v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  int v465;
  unint64_t v466;
  int v467;
  int v468;
  unsigned int v469;
  uint64_t v470;
  unsigned int v471;
  unsigned int v472;
  uint64_t v473;
  unsigned int v474;
  unsigned int v475;
  uint64_t v476;
  unsigned int v477;
  uint64_t v478;
  unsigned int v479;
  uint64_t v480;
  uint64_t v481;
  _QWORD *v482;
  const char *v483;
  size_t v484;
  size_t v485;
  uint64_t v486;
  _QWORD *v487;
  size_t v488;
  uint64_t v489;
  uint64_t v490;
  unsigned int v491;
  unsigned int v492;
  llvm::raw_ostream *v493;
  int v494;
  uint64_t v495;
  unsigned int v496;
  unsigned int v497;
  uint64_t v498;
  unsigned int v499;
  uint64_t v500;
  unsigned int v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  unsigned int v505;
  uint64_t v506;
  unsigned int v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  int v511;
  unsigned int v512;
  uint64_t v513;
  unsigned int v514;
  int v515;
  uint64_t v516;
  int v517;
  unsigned int v518;
  uint64_t v519;
  unsigned int v520;
  unsigned int v521;
  uint64_t v522;
  unsigned int v523;
  uint64_t v524;
  _DWORD *v525;
  _DWORD *v526;
  unsigned int v527;
  uint64_t v528;
  unsigned int v529;
  unsigned int v530;
  uint64_t v531;
  unsigned int v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  unsigned int v537;
  uint64_t v538;
  unsigned int v539;
  unsigned int v540;
  uint64_t v541;
  unsigned int v542;
  uint64_t v543;
  _DWORD *v544;
  _DWORD *v545;
  unsigned int v546;
  uint64_t v547;
  unsigned int v548;
  unsigned int v549;
  uint64_t v550;
  unsigned int v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t *mm;
  uint64_t v557;
  unsigned int v558;
  uint64_t v559;
  unsigned int v560;
  char v561;
  int v562;
  unint64_t v563;
  unint64_t v564;
  int v565;
  uint64_t v566;
  BOOL v567;
  uint64_t v568;
  int v569;
  uint64_t v570;
  unsigned int v571;
  unsigned int v572;
  unsigned int v573;
  uint64_t v574;
  unsigned int v575;
  unint64_t v576;
  char *v577;
  char *v578;
  char *v579;
  uint64_t v580;
  uint64_t v581;
  char v582;
  int v583;
  const char *v584;
  size_t v585;
  size_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unsigned int v590;
  uint64_t v591;
  unsigned int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  void **v596;
  void ***v597;
  uint64_t v598;
  uint64_t v599;
  char *v600;
  char *v601;
  uint64_t v602;
  uint64_t *v603;
  int v604;
  unint64_t v609;
  int v610;
  int v611;
  uint64_t v612;
  uint64_t v615;
  int v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  llvm::StringMapImpl *v620;
  _BOOL4 v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t ***v624;
  uint64_t v625;
  unsigned int v626;
  uint64_t v628;
  unint64_t v629;
  int v630;
  char *v631;
  uint64_t **v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  uint64_t *v638;
  unint64_t BlockFreq;
  void **v640;
  _DWORD *v641;
  uint64_t v642;
  char *v643;
  char v644;
  uint64_t v645;
  unsigned int v646;
  llvm::Instruction *v647;
  llvm::Instruction *v648;
  llvm::Instruction *v649;
  llvm::Instruction *v650;
  uint64_t v651;
  uint64_t v652;
  _QWORD *v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t **v656;
  std::error_code v657;
  uint64_t v658;
  char v659[8];
  __int128 v660;
  _QWORD v661[4];
  unsigned __int8 v662;
  uint64_t v663;
  uint64_t *v664;
  char v665;
  std::string v666;
  __int16 v667;
  void *v668[2];
  _BYTE v669[128];
  void *v670;
  __int128 v671;
  _QWORD v672[32];
  void *__p;
  size_t v674;
  void *v675;
  uint64_t v676;
  _WORD v677[32];
  void *v678;
  uint64_t v679;
  int v680;
  int v681;
  size_t __n[2];
  char *v683[2];
  uint64_t v684;
  char v685;
  uint64_t v686;
  uint64_t v687;
  void **p_p;
  uint64_t v689;
  uint64_t v690;
  void *v691;
  uint64_t v692;
  int v693;
  int v694;
  uint64_t v695;

  v7 = a2;
  v8 = a1;
  v695 = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned __int8 *)(a1 + 2);
  v601 = (char *)(a1 + 2);
  v10 = *(unsigned __int8 *)(a1 + 4);
  if (v9 < 0x41)
    v11 = v10 + 10 * v9 - 480;
  else
    v11 = v10 + 100 * v9 + 10 * *(unsigned __int8 *)(a1 + 3) - 6980;
  v611 = v11;
  v12 = *(unsigned int *)(*(_QWORD *)(a2 + 48) + 8);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v604 = v11 - 48;
    v14 = *(_BYTE *)(a1 + 1) != 0;
    v620 = (llvm::StringMapImpl *)(a1 + 368);
    v603 = (uint64_t *)(a1 + 344);
    v597 = (void ***)(a1 + 152);
    if (v11 <= 95)
      v15 = 1;
    else
      v15 = 2;
    v610 = v15;
    v596 = (void **)(a1 + 168);
    v598 = a1 + 88;
    v599 = a1 + 72;
    v600 = (char *)(a1 + 5);
    v612 = *(unsigned int *)(*(_QWORD *)(a2 + 48) + 8);
    while (*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v7 + 48) + 8 * v13) + 40))
    {
LABEL_729:
      if (++v13 == v12)
        return;
    }
    v615 = *(_QWORD *)(**(_QWORD **)(v7 + 48) + 8 * v13);
    v621 = v14;
    v668[0] = v669;
    v668[1] = (void *)0x800000000;
    v16 = *(_QWORD *)(v8 + 104);
    *(_DWORD *)(v8 + 56) = *(_BYTE *)(v16 + 272) == 0;
    v622 = v16 + 24;
    if (*(_QWORD *)(v16 + 32) == v16 + 24)
    {
      v17 = 0;
      v442 = -1;
      goto LABEL_719;
    }
    v617 = v13;
    v619 = 0;
    v631 = 0;
    v17 = 0;
    v18 = 0;
    v19 = v16 + 24;
    v20 = *(_QWORD *)(v16 + 32);
    while (1)
    {
      if (v20)
        v21 = (_BYTE *)(v20 - 56);
      else
        v21 = 0;
      if ((v21[23] & 0x20) == 0)
        goto LABEL_551;
      v22 = ***(_QWORD ***)v21;
      v670 = v21;
      v23 = *(_DWORD *)(v22 + 2496);
      if (!v23)
        break;
      v24 = *(_QWORD *)(v22 + 2480);
      v25 = v21 >> 4;
      v26 = v23 - 1;
      v27 = v26 & ((v21 >> 4) ^ (v21 >> 9));
      v28 = (_QWORD *)(v24 + 40 * v27);
      v29 = *v28;
      v30 = v21;
      if ((_BYTE *)*v28 != v21)
      {
        v31 = 0;
        v32 = 1;
        while (v29 != -4096)
        {
          if (v31)
            v33 = 0;
          else
            v33 = v29 == -8192;
          if (v33)
            v31 = v28;
          v34 = v27 + v32++;
          v27 = v34 & v26;
          v28 = (_QWORD *)(v24 + 40 * v27);
          v29 = *v28;
          if ((_BYTE *)*v28 == v30)
            goto LABEL_26;
        }
        if (v31)
          v61 = v31;
        else
          v61 = v28;
        goto LABEL_67;
      }
LABEL_26:
      v35 = *((unsigned int *)v28 + 4);
      if (!(_DWORD)v35)
        goto LABEL_551;
      v36 = (_QWORD *)(v28[1] + 8);
      v37 = 16 * v35;
      while (*((_DWORD *)v36 - 2))
      {
        v36 += 2;
        v37 -= 16;
        if (!v37)
          goto LABEL_551;
      }
      v633 = *v36;
      if (!*v36)
        goto LABEL_551;
      v623 = v20;
      v624 = (uint64_t ***)v30;
      v38 = *((_QWORD *)v30 + 10);
      v632 = (uint64_t **)(v30 + 72);
      if ((_BYTE *)v38 == v30 + 72)
        goto LABEL_550;
LABEL_33:
      v39 = v38 - 24;
      if (!v38)
        v39 = 0;
      v40 = v39 + 40;
      for (i = *(_QWORD *)(v39 + 48); ; i = *(_QWORD *)(i + 8))
      {
        if (i == v40)
        {
          v38 = *(_QWORD *)(v38 + 8);
          if ((uint64_t **)v38 == v632)
            goto LABEL_550;
          goto LABEL_33;
        }
        v42 = i ? i - 24 : 0;
        if (!sub_1C4D99D08(v42))
        {
          v44 = *(_QWORD *)(v42 + 48);
          if (v44)
          {
            v45 = *(_DWORD *)(v44 + 4);
            if (v45)
              break;
          }
        }
      }
      v616 = v45;
      v626 = v25;
      if (*(_QWORD *)(v8 + 296) == *(_QWORD *)(v8 + 304) && *(_QWORD *)(v8 + 320) == *(_QWORD *)(v8 + 328))
        goto LABEL_113;
      if ((*((_BYTE *)v624 + 23) & 0x20) == 0)
        goto LABEL_68;
      v46 = ***v624;
      v670 = v624;
      v47 = *(_DWORD *)(v46 + 2496);
      if (!v47)
      {
        v269 = 0;
        goto LABEL_452;
      }
      v48 = *(_QWORD *)(v46 + 2480);
      v49 = v47 - 1;
      v50 = v49 & (v25 ^ (v624 >> 9));
      v51 = (_QWORD *)(v48 + 40 * v50);
      v52 = (_QWORD ***)*v51;
      if ((uint64_t ***)*v51 != v624)
      {
        v53 = 0;
        v54 = 1;
        while (v52 != (_QWORD ***)-4096)
        {
          if (v53)
            v55 = 0;
          else
            v55 = v52 == (_QWORD ***)-8192;
          if (v55)
            v53 = v51;
          v56 = v50 + v54++;
          v50 = v56 & v49;
          v51 = (_QWORD *)(v48 + 40 * v50);
          v52 = (_QWORD ***)*v51;
          if ((uint64_t ***)*v51 == v624)
            goto LABEL_59;
        }
        if (v53)
          v269 = v53;
        else
          v269 = v51;
LABEL_452:
        v51 = sub_1C541AB24(v46 + 2480, (uint64_t)&v670, (uint64_t *)&v670, v269);
        v270 = v670;
        v51[4] = 0;
        v51[3] = 0;
        *v51 = v270;
        v51[1] = v51 + 3;
        v51[2] = 0x100000000;
      }
LABEL_59:
      v57 = *((unsigned int *)v51 + 4);
      if ((_DWORD)v57)
      {
        v58 = (unsigned __int8 **)(v51[1] + 8);
        v59 = 16 * v57;
        while (*((_DWORD *)v58 - 2))
        {
          v60 = 0;
          v58 += 2;
          v59 -= 16;
          if (!v59)
            goto LABEL_69;
        }
        v60 = *v58;
      }
      else
      {
LABEL_68:
        v60 = 0;
      }
LABEL_69:
      sub_1C588FBA8((uint64_t)__n, v60);
      v63 = (char **)__n[0];
      v64 = __n[1];
      v651 = *(unsigned int *)(v8 + 376);
      if ((_DWORD)v651)
      {
        v65 = 0;
        if (__n[1])
        {
          v66 = __n[1];
          v67 = (unsigned __int8 *)__n[0];
          do
          {
            v68 = *v67++;
            v65 = 33 * v65 + v68;
            --v66;
          }
          while (v66);
        }
        v69 = *(_QWORD *)v620;
        v70 = *(_QWORD *)v620 + 8 * v651 + 8;
        v71 = 1;
        v72 = v65;
        while (1)
        {
          v73 = v72 & (v651 - 1);
          v74 = *(_QWORD **)(v69 + 8 * v73);
          if (v74 != (_QWORD *)-8)
          {
            if (!v74)
              goto LABEL_85;
            if (*(_DWORD *)(v70 + 4 * v73) == v65
              && v64 == *v74
              && (!v64 || !memcmp(v63, (char *)v74 + *(unsigned int *)(a1 + 388), v64)))
            {
              break;
            }
          }
          v72 = v71 + v73;
          ++v71;
        }
        if ((_DWORD)v73 != -1 && (int)v73 != v651)
        {
          v75 = *(unsigned __int8 *)(*(_QWORD *)(v69 + 8 * (int)v73) + 8) != 0;
          goto LABEL_110;
        }
      }
LABEL_85:
      v670 = v672;
      v671 = xmmword_1C64638F0;
      v677[0] = 261;
      __p = v63;
      v674 = v64;
      v76 = llvm::sys::fs::real_path((unsigned __int8 *)&__p, &v670, 0);
      v77 = (uint64_t *)&__n[1];
      if (!v76)
        v77 = (uint64_t *)&v671;
      v78 = *v77;
      v79 = v76 ? (char **)__n : (char **)&v670;
      v80 = *v79;
      v81 = *(_QWORD *)(a1 + 296);
      v82 = *(_QWORD *)(a1 + 304);
      if (v81 == v82)
      {
        v83 = *(_QWORD *)(a1 + 320);
        v84 = *(_QWORD *)(a1 + 328);
        if (v83 == v84)
          goto LABEL_106;
        do
        {
          v85 = llvm::Regex::match(v83, v80, v78, 0, 0);
          if ((v85 & 1) != 0)
            break;
          v83 += 16;
        }
        while (v83 != v84);
LABEL_105:
        v75 = v85 ^ 1;
      }
      else if (*(_QWORD *)(a1 + 320) == *(_QWORD *)(a1 + 328))
      {
        do
        {
          v75 = llvm::Regex::match(v81, v80, v78, 0, 0);
          if ((v75 & 1) != 0)
            break;
          v81 += 16;
        }
        while (v81 != v82);
      }
      else
      {
        while (!llvm::Regex::match(v81, v80, v78, 0, 0))
        {
          v81 += 16;
          if (v81 == v82)
          {
            v75 = 0;
            goto LABEL_107;
          }
        }
        v86 = *(_QWORD *)(a1 + 320);
        v87 = *(_QWORD *)(a1 + 328);
        if (v86 != v87)
        {
          do
          {
            v85 = llvm::Regex::match(v86, v80, v78, 0, 0);
            if ((v85 & 1) != 0)
              break;
            v86 += 16;
          }
          while (v86 != v87);
          goto LABEL_105;
        }
LABEL_106:
        v75 = 1;
      }
LABEL_107:
      *(_BYTE *)(*sub_1C4F022D8(v620, (unsigned __int8 *)__n[0], __n[1]) + 8) = v75;
      if (v670 != v672)
        free(v670);
      v63 = (char **)__n[0];
LABEL_110:
      if (v63 != &v683[1])
        free(v63);
      v8 = a1;
      if (v75)
      {
LABEL_113:
        v20 = v623;
        v88 = v624;
        v19 = v622;
        if ((*((_WORD *)v624 + 9) & 8) != 0)
        {
          v96 = *((_DWORD *)v624 + 5);
          v97 = (v96 & 0x40000000) != 0 ? (llvm::Value **)*(v624 - 1) : (llvm::Value **)&v624[-4 * (v96 & 0x7FFFFFF)];
          v98 = llvm::classifyEHPersonality(*v97, v43);
          v99 = v98 - 7 < 4 || v98 == 12;
          v88 = v624;
          if (v99)
            goto LABEL_551;
        }
        v89 = v88[14];
        if (v89)
        {
          if ((*((_BYTE *)v89 + 15) & 0x20) != 0)
            goto LABEL_551;
        }
        v630 = *(_DWORD *)(v633 + 24);
        sub_1C588FBA8((uint64_t)&v670, (unsigned __int8 *)v633);
        v90 = a6(a7, v624);
        v91 = (llvm::BranchProbabilityInfo *)a4(a5, v624);
        llvm::SplitIndirectBrCriticalEdges((llvm *)v624, 0, v90, v91, v92);
        *(_QWORD *)v659 = v624;
        v662 = 0;
        v660 = 0u;
        memset(v661, 0, 28);
        v663 = v90;
        v664 = (uint64_t *)v91;
        v665 = 0;
        v93 = v624[10];
        if (v93)
          v94 = (uint64_t)(v93 - 3);
        else
          v94 = 0;
        v642 = v94;
        if (v91)
        {
          if (*(_QWORD *)v91)
            v95 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v91 + 8) + 16);
          else
            v95 = 0;
        }
        else
        {
          v95 = 2;
        }
        v602 = sub_1C5894438((uint64_t)v659, 0, v94, v95);
        v100 = *(_QWORD *)(v642 + 40);
        if (v100 == v642 + 40)
        {
LABEL_454:
          sub_1C5894438((uint64_t)v659, v642, 0, v95);
        }
        else
        {
          if (v100)
            v101 = v100 - 24;
          else
            v101 = 0;
          if (*(_BYTE *)(v101 + 16) != 30)
          {
            switch(*(_BYTE *)(v101 + 16))
            {
              case 0x1E:
LABEL_919:
                __break(1u);
                return;
              case 0x1F:
                v426 = (*(_DWORD *)(v101 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_678;
              case 0x20:
              case 0x26:
                v426 = (*(_DWORD *)(v101 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_678;
              case 0x21:
              case 0x25:
                break;
              case 0x24:
                v426 = *(_WORD *)(v101 + 18) & 1;
                goto LABEL_678;
              case 0x27:
                v426 = *(_DWORD *)(v101 + 80) + 1;
LABEL_678:
                if (!v426)
                  goto LABEL_454;
                break;
              default:
                goto LABEL_454;
            }
          }
          v609 = v95;
          v102 = *(_QWORD *)(*(_QWORD *)v659 + 80);
          v625 = *(_QWORD *)v659 + 72;
          if (v102 == *(_QWORD *)v659 + 72)
          {
            v106 = 0;
            v634 = 0;
            v105 = 0;
            v104 = 0;
            v103 = 0;
          }
          else
          {
            v103 = 0;
            v104 = 0;
            v105 = 0;
            v634 = 0;
            v106 = 0;
            do
            {
              if (v102)
                v107 = v102 - 24;
              else
                v107 = 0;
              v652 = v107;
              v108 = *(_QWORD *)(v107 + 40);
              if (v108 == v107 + 40)
              {
                v110 = 0;
              }
              else
              {
                if (v108)
                  v109 = v108 - 24;
                else
                  v109 = 0;
                if (*(unsigned __int8 *)(v109 + 16) - 29 >= 0xB)
                  v110 = 0;
                else
                  v110 = v109;
              }
              if (v664)
                BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v664, v107);
              else
                BlockFreq = 2;
              v111 = *(unsigned __int8 *)(v110 + 16);
              if (v111 != 30)
                __asm { BR              X9 }
              if ((*(_DWORD *)(v110 + 20) & 0x7FFFFFF) == 3)
                v112 = 2;
              else
                v112 = 1;
              v647 = (llvm::Instruction *)v110;
              v628 = v102;
              v629 = v104;
              v113 = 0;
              v114 = 1000 * BlockFreq;
              if (BlockFreq >= 0x4189374BC6A7EFLL)
                v114 = -1;
              v635 = v114;
              v636 = v103;
              v115 = 2;
              v116 = v652;
              do
              {
                v117 = v106;
                v118 = v105;
                Successor = llvm::Instruction::getSuccessor(v647, v113);
                v120 = llvm::Instruction::getSuccessor(v647, v113);
                isCriticalEdge = llvm::isCriticalEdge((uint64_t)v647, v120, 0);
                if (v663)
                {
                  if (isCriticalEdge)
                    v122 = v635;
                  else
                    v122 = BlockFreq;
                  LODWORD(__n[0]) = llvm::BranchProbabilityInfo::getEdgeProbability(v663, v116, Successor);
                  v115 = llvm::BranchProbability::scale((llvm::BranchProbability *)__n, v122);
                }
                v123 = v116;
                v124 = v116 == v642;
                if (v115 <= 1)
                  v115 = 1;
                v125 = sub_1C5894438((uint64_t)v659, v123, Successor, v115);
                *(_BYTE *)(v125 + 42) = isCriticalEdge;
                v105 = v118;
                v126 = v115 > v118;
                if (v124 && v126)
                  v106 = v125;
                else
                  v106 = v117;
                if (v124 && v126)
                  v105 = v115;
                v127 = *(_QWORD *)(Successor + 40);
                if (v127 == Successor + 40)
                {
LABEL_182:
                  v116 = v652;
                }
                else
                {
                  v128 = v127 - 24;
                  if (!v127)
                    v128 = 0;
                  v129 = *(unsigned __int8 *)(v128 + 16);
                  v130 = v129 - 29;
                  v116 = v652;
                  if (v129 != 30)
                  {
                    v131 = 0;
                    switch(v130)
                    {
                      case 0:
                      case 5:
                      case 6:
                        goto LABEL_177;
                      case 1:
                        goto LABEL_919;
                      case 2:
                        v131 = (*(_DWORD *)(v128 + 20) >> 1) & 0x3FFFFFF;
                        goto LABEL_177;
                      case 3:
                      case 9:
                        v131 = (*(_DWORD *)(v128 + 20) & 0x7FFFFFF) - 1;
                        goto LABEL_177;
                      case 4:
                      case 8:
                        break;
                      case 7:
                        v131 = *(_WORD *)(v128 + 18) & 1;
                        goto LABEL_177;
                      case 10:
                        v131 = *(_DWORD *)(v128 + 80) + 1;
                        goto LABEL_177;
                      default:
                        goto LABEL_182;
                    }
                  }
                  v131 = 1;
LABEL_177:
                  v132 = v636;
                  v133 = v131 != 0 || v115 <= v636;
                  v134 = v634;
                  if (!v133)
                    v134 = v125;
                  v634 = v134;
                  if (!v133)
                    v132 = v115;
                  v636 = v132;
                }
                ++v113;
              }
              while (v112 != v113);
              v103 = v636;
              v104 = v629;
              v102 = *(_QWORD *)(v628 + 8);
            }
            while (v102 != v625);
          }
          if (v609 >= v104 && 3 * v104 > 2 * v609)
          {
            *(_QWORD *)(v602 + 16) = v104;
            MEMORY[0x10] = v609 + 1;
          }
          if (v105 >= v103 && 3 * v103 > 2 * v105)
          {
            *(_QWORD *)(v106 + 16) = v103;
            *(_QWORD *)(v634 + 16) = v105 + 1;
          }
        }
        v135 = v660;
        v136 = *((_QWORD *)&v660 + 1) - v660;
        v137 = (uint64_t)(*((_QWORD *)&v660 + 1) - v660) >> 3;
        if ((uint64_t)(*((_QWORD *)&v660 + 1) - v660) < 1)
        {
LABEL_204:
          sub_1C5894910(v135, *((char **)&v135 + 1), v137, 0, 0);
        }
        else
        {
          v138 = (uint64_t)(*((_QWORD *)&v660 + 1) - v660) >> 3;
          while (1)
          {
            v139 = (uint64_t *)operator new(8 * v138, MEMORY[0x1E0DE4E10]);
            if (v139)
              break;
            v429 = v138 > 1;
            v138 >>= 1;
            if (!v429)
              goto LABEL_204;
          }
          v140 = v139;
          sub_1C5894910(v135, *((char **)&v135 + 1), v137, v139, v138);
          operator delete(v140);
        }
        v141 = (uint64_t *)v135;
        if ((_QWORD)v135 != *((_QWORD *)&v135 + 1))
        {
          do
          {
            v142 = *v141;
            if (!*(_BYTE *)(*v141 + 41))
            {
              if (*(_BYTE *)(v142 + 42))
              {
                v143 = *(_QWORD *)(v142 + 8);
                if (v143)
                {
                  v144 = (uint64_t *)(v143 + 48);
                  do
                  {
                    v145 = *v144;
                    v146 = v145 - 24;
                    if (!v145)
                      v146 = 0;
                    v147 = *(unsigned __int8 *)(v146 + 16);
                    v144 = (uint64_t *)(v145 + 8);
                  }
                  while (v147 == 83);
                  if (v147 == 94 && sub_1C58953C0((uint64_t)v659, *(_QWORD *)v142, v143))
                    *(_BYTE *)(*v141 + 40) = 1;
                }
              }
            }
            ++v141;
          }
          while (v141 != *((uint64_t **)&v135 + 1));
          v148 = v662;
          v149 = (uint64_t **)v135;
          do
          {
            v150 = *v149;
            if (!*((_BYTE *)*v149 + 41))
            {
              v151 = *v150;
              if ((v148 || v151) && sub_1C58953C0((uint64_t)v659, v151, v150[1]))
                *((_BYTE *)*v149 + 40) = 1;
            }
            ++v149;
          }
          while (v149 != *((uint64_t ***)&v135 + 1));
        }
        if (v136 >= 9 && v665)
        {
          v152 = v135 + 8 * v137;
          v153 = *(_QWORD *)v135;
          *(_QWORD *)v135 = *(_QWORD *)(v152 - 8);
          *(_QWORD *)(v152 - 8) = v153;
        }
        v154 = a3;
        if ((_QWORD)v135 != *((_QWORD *)&v135 + 1))
        {
          for (j = 0; j != v137; ++j)
          {
            v156 = *(_QWORD *)(v660 + 8 * j);
            if (v154)
            {
              *(_BYTE *)(v156 + 40) = 0;
            }
            else if (*(_BYTE *)(v156 + 40))
            {
              goto LABEL_234;
            }
            if (!*(_BYTE *)(v156 + 41))
            {
              v158 = *(_QWORD *)v156;
              v157 = *(_QWORD *)(v156 + 8);
              if (*(_QWORD *)v156)
              {
                if (v157)
                {
                  v160 = v158 + 40;
                  v159 = *(_QWORD *)(v158 + 40);
                  if (v159 == v158 + 40)
                  {
                    v162 = 0;
                  }
                  else
                  {
                    if (v159)
                      v161 = v159 - 24;
                    else
                      v161 = 0;
                    if (*(unsigned __int8 *)(v161 + 16) - 29 >= 0xB)
                      v162 = 0;
                    else
                      v162 = v161;
                  }
                  v163 = *(unsigned __int8 *)(v162 + 16);
                  if (v163 != 30)
                    __asm { BR              X9 }
                  if ((*(_DWORD *)(v162 + 20) & 0x7FFFFFF) == 3
                    || (__n[0] = *(_QWORD *)v156, __p = 0, (sub_1C614F7B0(v603, __n, &__p) & 1) != 0))
                  {
                    if (*(_BYTE *)(v156 + 42))
                    {
                      SuccessorNumber = llvm::GetSuccessorNumber(v158, v157);
                      if (*(_BYTE *)(v162 + 16) == 32
                        || (LODWORD(v684) = 0,
                            *(_OWORD *)v683 = 0u,
                            *(_OWORD *)__n = 0u,
                            BYTE4(v684) = 1,
                            v677[0] = 257,
                            (v165 = llvm::SplitCriticalEdge((llvm::Instruction *)v162, SuccessorNumber, (uint64_t)__n, (llvm::Twine *)&__p)) == 0))
                      {
                        v157 = 0;
                      }
                      else
                      {
                        v166 = v165;
                        sub_1C5894438((uint64_t)v659, v158, v165, 0);
                        *(_BYTE *)(sub_1C5894438((uint64_t)v659, v166, v157, 0) + 40) = 1;
                        *(_BYTE *)(v156 + 41) = 1;
                        v167 = v166 + 40;
                        for (k = *(_QWORD *)(v166 + 48); ; k = *(_QWORD *)(k + 8))
                        {
                          if (k == v167)
                          {
                            k = v166 + 40;
                            goto LABEL_298;
                          }
                          v169 = k - 24;
                          if (!k)
                            v169 = 0;
                          if (*(_BYTE *)(v169 + 16) != 83)
                            break;
                        }
                        v181 = *(unsigned __int8 *)(k - 8) - 38;
                        v429 = v181 > 0x38;
                        v182 = (1 << v181) & 0x100060000000001;
                        if (!v429 && v182 != 0)
                          k = *(_QWORD *)(k + 8);
LABEL_298:
                        if (v167 == k)
                          v157 = 0;
                        else
                          v157 = v166;
                      }
                    }
                    else
                    {
                      v170 = v157 + 40;
                      for (m = *(_QWORD *)(v157 + 48); ; m = *(_QWORD *)(m + 8))
                      {
                        if (m == v170)
                        {
                          m = v157 + 40;
                          goto LABEL_281;
                        }
                        v172 = m - 24;
                        if (!m)
                          v172 = 0;
                        if (*(_BYTE *)(v172 + 16) != 83)
                          break;
                      }
                      v175 = *(unsigned __int8 *)(m - 8) - 38;
                      v429 = v175 > 0x38;
                      v176 = (1 << v175) & 0x100060000000001;
                      if (!v429 && v176 != 0)
                        m = *(_QWORD *)(m + 8);
LABEL_281:
                      if (v170 == m)
                        v157 = 0;
                    }
                    v154 = a3;
                  }
                  else
                  {
                    for (n = *(_QWORD *)(v158 + 48); ; n = *(_QWORD *)(n + 8))
                    {
                      if (n == v160)
                      {
                        n = v158 + 40;
                        goto LABEL_289;
                      }
                      v174 = n - 24;
                      if (!n)
                        v174 = 0;
                      if (*(_BYTE *)(v174 + 16) != 83)
                        break;
                    }
                    v178 = *(unsigned __int8 *)(n - 8) - 38;
                    v429 = v178 > 0x38;
                    v179 = (1 << v178) & 0x100060000000001;
                    if (!v429 && v179 != 0)
                      n = *(_QWORD *)(n + 8);
LABEL_289:
                    v154 = a3;
                    if (v160 == n)
                      v157 = 0;
                    else
                      v157 = v158;
                  }
                }
                else
                {
                  v157 = *(_QWORD *)v156;
                }
              }
              goto LABEL_235;
            }
LABEL_234:
            v157 = 0;
LABEL_235:
            *(_QWORD *)(v156 + 24) = v157;
          }
        }
        v184 = v624[10];
        if (v184)
          v185 = (uint64_t)(v184 - 3);
        else
          v185 = 0;
        v637 = v185;
        v186 = operator new();
        v187 = (_QWORD *)v186;
        v188 = a1;
        *(_QWORD *)v186 = a1;
        *(_QWORD *)(v186 + 8) = v633;
        *(_DWORD *)(v186 + 16) = v616;
        *(_DWORD *)(v186 + 20) = v619;
        *(_DWORD *)(v186 + 28) = v604;
        *(_QWORD *)(v186 + 32) = 0;
        v648 = (llvm::Instruction *)(v186 + 32);
        *(_QWORD *)(v186 + 56) = 0;
        v640 = (void **)(v186 + 56);
        *(_QWORD *)(v186 + 40) = 0;
        *(_DWORD *)(v186 + 48) = 0;
        *(_QWORD *)(v186 + 64) = 0;
        *(_QWORD *)(v186 + 72) = 0;
        *(_QWORD *)(v186 + 80) = a1;
        *(_DWORD *)(v186 + 88) = 0;
        *(_QWORD *)(v186 + 96) = v186 + 112;
        *(_QWORD *)(v186 + 104) = 0x400000000;
        *(_QWORD *)(v186 + 176) = 0;
        *(_QWORD *)(v186 + 184) = 0;
        *(_DWORD *)(v186 + 192) = 0;
        *(_DWORD *)(v186 + 196) = 184;
        *(_QWORD *)(v186 + 208) = a1;
        *(_DWORD *)(v186 + 216) = 1;
        *(_QWORD *)(v186 + 224) = v186 + 240;
        *(_QWORD *)(v186 + 232) = 0x400000000;
        *(_QWORD *)(v186 + 312) = 0;
        *(_QWORD *)(v186 + 320) = 0xB800000000;
        *(_QWORD *)(v186 + 304) = 0;
        v189 = v610;
        v190 = v624[10];
        if (v190 != v632)
        {
          v189 = v610;
          v653 = (_QWORD *)v186;
          while (1)
          {
            v191 = (size_t)(v190 - 3);
            __p = (void *)v188;
            if (!v190)
              v191 = 0;
            LODWORD(v674) = v189;
            v675 = v677;
            v676 = 0x400000000;
            v678 = 0;
            v679 = 0;
            v680 = 0;
            v681 = 184;
            __n[0] = v191;
            __n[1] = v188;
            LODWORD(v683[0]) = v189;
            v683[1] = &v685;
            v684 = 0x400000000;
            v691 = 0;
            v692 = 0;
            v693 = 0;
            v694 = 184;
            v666.__r_.__value_.__r.__words[0] = v191;
            LODWORD(v666.__r_.__value_.__r.__words[1]) = 0;
            v192 = *((_DWORD *)v187 + 12);
            if (!v192)
            {
              v202 = 0;
              goto LABEL_323;
            }
            v193 = v187[4];
            v194 = v192 - 1;
            v195 = v194 & ((v191 >> 4) ^ (v191 >> 9));
            v196 = (_QWORD *)(v193 + 16 * v195);
            v197 = *v196;
            if (v191 != *v196)
              break;
LABEL_368:
            free(v691);
            if (v683[1] != &v685)
              free(v683[1]);
            if (HIDWORD(v679) && (_DWORD)v679)
            {
              v233 = 0;
              v234 = 8 * v679;
              do
              {
                v235 = *(_QWORD *)((char *)v678 + v233);
                if (v235 != -8 && v235 != 0)
                {
                  v237 = *(void **)(v235 + 40);
                  if (v237 != (void *)(v235 + 56))
                    free(v237);
                  if (*(char *)(v235 + 39) < 0)
                    operator delete(*(void **)(v235 + 16));
                  MEMORY[0x1CAA32FB4](v235, 8);
                }
                v233 += 8;
              }
              while (v234 != v233);
            }
            free(v678);
            if (v675 != v677)
              free(v675);
            ++v189;
            v190 = (uint64_t **)v190[1];
            if (v190 == v632)
              goto LABEL_390;
          }
          v198 = 0;
          v199 = 1;
          while (v197 != -4096)
          {
            if (v198)
              v200 = 0;
            else
              v200 = v197 == -8192;
            if (v200)
              v198 = v196;
            v201 = v195 + v199++;
            v195 = v201 & v194;
            v196 = (_QWORD *)(v193 + 16 * v195);
            v197 = *v196;
            if (v191 == *v196)
              goto LABEL_368;
          }
          if (v198)
            v202 = v198;
          else
            v202 = v196;
LABEL_323:
          v203 = sub_1C4DE3FA0((uint64_t)v648, (uint64_t)&v666, (uint64_t *)&v666, v202);
          *v203 = v666.__r_.__value_.__r.__words[0];
          *((_DWORD *)v203 + 2) = v666.__r_.__value_.__r.__words[1];
          v204 = v187;
          v205 = (char *)v187[8];
          v206 = v204[9];
          if ((unint64_t)v205 < v206)
          {
            *(_QWORD *)v205 = __n[0];
            *((_QWORD *)v205 + 1) = __n[1];
            *((_DWORD *)v205 + 4) = v683[0];
            *((_QWORD *)v205 + 3) = v205 + 40;
            *((_QWORD *)v205 + 4) = 0x400000000;
            *((_QWORD *)v205 + 13) = 0;
            *((_QWORD *)v205 + 14) = 0;
            *((_QWORD *)v205 + 15) = 0xB800000000;
            v207 = v205 + 136;
            v187 = v653;
LABEL_355:
            v187[8] = v207;
            *((_DWORD *)v203 + 2) = -1 - 252645135 * ((unint64_t)&v207[-v187[7]] >> 3);
            if (HIDWORD(v692) && (_DWORD)v692)
            {
              v228 = 0;
              v229 = 8 * v692;
              do
              {
                v230 = *(_QWORD *)((char *)v691 + v228);
                if (v230 != -8 && v230 != 0)
                {
                  v232 = *(void **)(v230 + 40);
                  if (v232 != (void *)(v230 + 56))
                    free(v232);
                  if (*(char *)(v230 + 39) < 0)
                    operator delete(*(void **)(v230 + 16));
                  MEMORY[0x1CAA32FB4](v230, 8);
                }
                v228 += 8;
              }
              while (v229 != v228);
            }
            goto LABEL_368;
          }
          v208 = (char *)*v640;
          v209 = 0xF0F0F0F0F0F0F0F1 * ((v205 - (_BYTE *)*v640) >> 3);
          v210 = v209 + 1;
          if (v209 + 1 > 0x1E1E1E1E1E1E1E1)
LABEL_917:
            abort();
          v211 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v206 - (_QWORD)v208) >> 3);
          if (2 * v211 > v210)
            v210 = 2 * v211;
          if (v211 >= 0xF0F0F0F0F0F0F0)
            v212 = 0x1E1E1E1E1E1E1E1;
          else
            v212 = v210;
          if (v212 > 0x1E1E1E1E1E1E1E1)
            sub_1C4764EE4();
          v213 = 17 * v212;
          v214 = (char *)operator new(136 * v212);
          v215 = &v214[136 * v209];
          v216 = &v214[8 * v213];
          v217 = __n[1];
          *(_QWORD *)v215 = __n[0];
          *((_QWORD *)v215 + 1) = v217;
          *((_DWORD *)v215 + 4) = v683[0];
          *((_QWORD *)v215 + 3) = v215 + 40;
          *((_QWORD *)v215 + 4) = 0x400000000;
          *((_QWORD *)v215 + 13) = 0;
          *((_QWORD *)v215 + 14) = 0;
          *((_QWORD *)v215 + 15) = 0xB800000000;
          v218 = v215 + 136;
          v643 = v215 + 136;
          if (v205 == v208)
          {
            v653[7] = v215;
            v653[8] = v218;
            v653[9] = v216;
            if (v208)
              goto LABEL_353;
          }
          else
          {
            v219 = 0;
            do
            {
              v220 = &v215[v219];
              *((_QWORD *)v220 - 17) = *(_QWORD *)&v205[v219 - 136];
              *((_QWORD *)v220 - 16) = *(_QWORD *)&v205[v219 - 128];
              *((_DWORD *)v220 - 30) = *(_DWORD *)&v205[v219 - 120];
              *((_QWORD *)v220 - 14) = &v215[v219 - 96];
              *((_QWORD *)v220 - 13) = 0x400000000;
              *((_QWORD *)v220 - 4) = 0;
              *((_QWORD *)v220 - 3) = 0;
              *((_DWORD *)v220 - 4) = 0;
              *((_DWORD *)v220 - 3) = 184;
              v219 -= 136;
            }
            while (&v205[v219] != v208);
            v653[7] = &v215[v219];
            v653[8] = v218;
            v653[9] = v216;
            do
            {
              if (*((_DWORD *)v205 - 5))
              {
                v221 = *((unsigned int *)v205 - 6);
                if ((_DWORD)v221)
                {
                  v222 = 0;
                  v223 = 8 * v221;
                  do
                  {
                    v224 = *(_QWORD *)(*((_QWORD *)v205 - 4) + v222);
                    if (v224 != -8 && v224 != 0)
                    {
                      v226 = *(void **)(v224 + 40);
                      if (v226 != (void *)(v224 + 56))
                        free(v226);
                      if (*(char *)(v224 + 39) < 0)
                        operator delete(*(void **)(v224 + 16));
                      MEMORY[0x1CAA32FB4](v224, 8);
                    }
                    v222 += 8;
                  }
                  while (v223 != v222);
                }
              }
              free(*((void **)v205 - 4));
              v227 = (char *)*((_QWORD *)v205 - 14);
              if (v227 != v205 - 96)
                free(v227);
              v205 -= 136;
            }
            while (v205 != v208);
            if (v208)
LABEL_353:
              operator delete(v208);
          }
          v188 = a1;
          v187 = v653;
          v207 = v643;
          goto LABEL_355;
        }
LABEL_390:
        if (v611 <= 95)
          *((_DWORD *)v187 + 54) = v189;
        v674 = 0;
        __p = 0;
        v675 = 0;
        LODWORD(__n[1]) = 0;
        v685 = 0;
        v686 = 0;
        __n[0] = (size_t)&unk_1E81A7208;
        p_p = &__p;
        LODWORD(v687) = 0;
        v683[1] = 0;
        v684 = 0;
        v683[0] = 0;
        v238 = v633 - 8 * *(unsigned int *)(v633 + 8);
        v239 = *(_QWORD *)(v238 + 24);
        if (v239 && (v240 = *(_QWORD *)(v239 + 8), (v241 = *(_QWORD *)v240) != 0)
          || (v242 = *(_QWORD *)(v238 + 16)) != 0 && (v240 = *(_QWORD *)(v242 + 8), (v241 = *(_QWORD *)v240) != 0))
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)__n, (const char *)(v240 + 24), v241);
        }
        sub_1C5E21910((llvm::raw_ostream *)__n, *(unsigned int *)(v633 + 24), 0, 0, 0);
        v243 = v684 - (unint64_t)v683[0];
        if ((char *)v684 != v683[0])
        {
          v684 = (uint64_t)v683[0];
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)__n, v683[0], v243);
        }
        if (SHIBYTE(v675) >= 0)
          v244 = &__p;
        else
          v244 = __p;
        v245 = HIBYTE(v675) & 0x7F;
        if (SHIBYTE(v675) < 0)
          v245 = v674;
        *((_DWORD *)v187 + 6) = sub_1C4E37F24((uint64_t)v244, (uint64_t)v244 + v245);
        __n[0] = (size_t)off_1E81A6E70;
        if ((_DWORD)v687 == 1 && v683[0])
          MEMORY[0x1CAA32F9C](v683[0], 0x1000C8077774924);
        if (SHIBYTE(v675) < 0)
          operator delete(__p);
        __p = v187;
        v246 = *(unsigned int *)(v188 + 160);
        v247 = *(void ***)(v188 + 152);
        if (v246 >= *(_DWORD *)(v188 + 164))
        {
          v429 = v247 <= &__p && &v247[v246] > &__p;
          v430 = v429;
          if (v430 == 1)
            v431 = &__p - v247;
          else
            v431 = -1;
          __n[0] = 0;
          v247 = (void **)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v597, v246 + 1, 8, __n);
          v432 = *(void ***)(v188 + 152);
          v433 = *(unsigned int *)(v188 + 160);
          if ((_DWORD)v433)
          {
            v434 = 8 * v433;
            v435 = 8 * v433;
            v436 = v247;
            do
            {
              v437 = *v432;
              *v432++ = 0;
              *v436++ = v437;
              v435 -= 8;
            }
            while (v435);
            v438 = (uint64_t)(*v597 - 1);
            do
            {
              sub_1C588FDA4((uint64_t *)(v438 + v434));
              v434 -= 8;
            }
            while (v434);
            v432 = *v597;
          }
          v439 = __n[0];
          if (v432 != v596)
            free(v432);
          *(_QWORD *)(v188 + 152) = v247;
          *(_DWORD *)(v188 + 164) = v439;
          v248 = &__p;
          if (v430)
            v248 = &v247[v431];
          v246 = *(unsigned int *)(v188 + 160);
          v187 = *v248;
        }
        else
        {
          v248 = &__p;
        }
        *v248 = 0;
        v247[v246] = v187;
        *(_DWORD *)(v188 + 160) = v246 + 1;
        sub_1C588FDA4((uint64_t *)&__p);
        v654 = *(_QWORD *)(*(_QWORD *)(v188 + 152) + 8 * *(unsigned int *)(v188 + 160) - 8);
        v249 = (uint64_t *)*((_QWORD *)&v660 + 1);
        v250 = (uint64_t **)v660;
        v251 = (uint64_t *)v660;
        if ((_QWORD)v660 == *((_QWORD *)&v660 + 1))
        {
LABEL_416:
          v249 = v251;
        }
        else
        {
          v252 = (uint64_t *)v660;
          while (1)
          {
            v253 = *v252;
            if (*(_BYTE *)(*v252 + 41) || !*(_BYTE *)(v253 + 40) && !*(_QWORD *)(v253 + 24))
              break;
            if (++v252 == *((uint64_t **)&v660 + 1))
            {
              v251 = (uint64_t *)*((_QWORD *)&v660 + 1);
              goto LABEL_416;
            }
          }
          v254 = v252 + 1;
          if (v252 + 1 != *((uint64_t **)&v660 + 1))
          {
            do
            {
              v255 = *v254;
              if (!*(_BYTE *)(*v254 + 41) && (*(_BYTE *)(v255 + 40) || *(_QWORD *)(v255 + 24)))
              {
                *v254 = 0;
                v256 = *v252;
                *v252 = v255;
                if (v256)
                  MEMORY[0x1CAA32FC0](v256, 0x1060C40E80B6244);
                ++v252;
              }
              ++v254;
            }
            while (v254 != v249);
            v249 = (uint64_t *)*((_QWORD *)&v660 + 1);
            v250 = (uint64_t **)v660;
          }
          if (v252 != v249)
          {
            while (v249 != v252)
            {
              v258 = *--v249;
              v257 = v258;
              *v249 = 0;
              if (v258)
                MEMORY[0x1CAA32FC0](v257, 0x1060C40E80B6244);
            }
            *((_QWORD *)&v660 + 1) = v252;
            v249 = v252;
          }
        }
        if (v250 == (uint64_t **)v249)
        {
          v261 = 0;
          v262 = 0;
        }
        else
        {
          v259 = (char *)v249 - (char *)v250;
          v260 = (int8x16_t *)v250;
          while (*(_QWORD *)(v260->i64[0] + 24))
          {
            v260 = (int8x16_t *)((char *)v260 + 8);
            v259 -= 8;
            if (v260 == (int8x16_t *)v249)
              goto LABEL_458;
          }
          v263 = (int8x16_t *)(v249 - 1);
          do
          {
            if (v263 == v260)
            {
              v249 = (uint64_t *)v260;
              goto LABEL_458;
            }
            v264 = v263->i64[0];
            v263 = (int8x16_t *)((char *)v263 - 8);
            --v249;
            v259 -= 8;
          }
          while (!*(_QWORD *)(v264 + 24));
          v265 = (v259 >> 3) + 1;
          if (v259 < 17)
          {
LABEL_447:
            v268 = 0;
            v266 = 0;
          }
          else
          {
            if (v265 >= 0xFFFFFFFFFFFFFFFLL)
              v266 = 0xFFFFFFFFFFFFFFFLL;
            else
              v266 = (v259 >> 3) + 1;
            while (1)
            {
              v267 = (uint64_t *)operator new(8 * v266, MEMORY[0x1E0DE4E10]);
              if (v267)
                break;
              v429 = v266 > 1;
              v266 >>= 1;
              if (!v429)
                goto LABEL_447;
            }
            v268 = v267;
          }
          v249 = sub_1C58954D4(v260, v249, v265, v268, v266);
          if (v268)
          {
            operator delete(v268);
            v250 = (uint64_t **)v660;
          }
LABEL_458:
          v261 = (char *)v249 - (char *)v250;
          v262 = ((char *)v249 - (char *)v250) >> 3;
          if (v249 != (uint64_t *)v250)
          {
            v271 = ((char *)v249 - (char *)v250) >> 3;
            v272 = 0;
            do
            {
              v273 = v250[v272];
              v274 = v654 + 80;
              if (*v273)
                v274 = sub_1C588FFC8(v654, *v273);
              v275 = v273[1];
              v276 = v654 + 208;
              if (v275)
                v276 = sub_1C588FFC8(v654, v275);
              *((_DWORD *)v273 + 8) = *(_DWORD *)(v274 + 8);
              *((_DWORD *)v273 + 9) = *(_DWORD *)(v276 + 8);
              ++v272;
            }
            while (v271 != v272);
            v644 = 0;
            v262 = v271;
LABEL_467:
            v649 = (llvm::Instruction *)v262;
            if (v261 < 1)
            {
LABEL_471:
              sub_1C5895778((uint64_t)v250, (char *)&v250[v262], v262, 0, 0);
            }
            else
            {
              v277 = v262;
              while (1)
              {
                v278 = (uint64_t *)operator new(8 * v277, MEMORY[0x1E0DE4E10]);
                if (v278)
                  break;
                v429 = v277 > 1;
                v277 >>= 1;
                if (!v429)
                  goto LABEL_471;
              }
              v279 = v278;
              sub_1C5895778((uint64_t)v250, (char *)&v250[v262], v262, v278, v277);
              operator delete(v279);
            }
            for (ii = (uint64_t **)*((_QWORD *)&v660 + 1); v250 != ii; ++v250)
            {
              v281 = *v250;
              v282 = **v250;
              v283 = v654 + 80;
              if (v282)
                v283 = sub_1C588FFC8(v654, v282);
              v284 = v281[1];
              v285 = v654 + 208;
              if (v284)
                v285 = sub_1C588FFC8(v654, v284);
              v286 = v281[3];
              v287 = (_QWORD *)(v283 + 16);
              v288 = *(unsigned int *)(v283 + 24);
              if (v288 >= *(_DWORD *)(v283 + 28))
              {
                v290 = v286 == 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v287, v283 + 32, v288 + 1, 16);
                v288 = *(_QWORD *)(v283 + 16) + 16 * *(unsigned int *)(v283 + 24);
                *(_QWORD *)v288 = v285;
                *(_QWORD *)(v288 + 8) = v290;
                LODWORD(v288) = *(_DWORD *)(v283 + 24);
              }
              else
              {
                v289 = *v287 + 16 * v288;
                *(_QWORD *)v289 = v285;
                *(_DWORD *)(v289 + 8) = v286 == 0;
              }
              *(_DWORD *)(v283 + 24) = v288 + 1;
            }
            v291 = v626;
            if ((*(_BYTE *)(v633 + 40) & 0x40) == 0)
            {
              v292 = (uint64_t *)sub_1C588FFC8(v654, v637);
              v293 = sub_1C5890054(v292, (unsigned __int8 *)v670, v671);
              v294 = v293;
              v295 = *((unsigned int *)v293 + 10);
              if (v295 >= *((unsigned int *)v293 + 11))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v293 + 4), (uint64_t)(v293 + 6), v295 + 1, 4);
                v295 = *((unsigned int *)v294 + 10);
              }
              *(_DWORD *)(v294[4] + 4 * v295) = v630;
              ++*((_DWORD *)v294 + 10);
            }
            v297 = *(uint64_t **)(v654 + 56);
            for (jj = *(uint64_t **)(v654 + 64); v297 != jj; v291 = v626)
            {
              v298 = *v297;
              v299 = *((unsigned int *)v297 + 8);
              v300 = v631;
              if ((_DWORD)v299)
              {
                v301 = v297[3];
                v302 = v301 + 16 * v299;
                do
                {
                  v303 = *(_DWORD *)(*(_QWORD *)v301 + 8);
                  do
                  {
                    if (v18 >= v300)
                    {
                      v304 = &v18[-v17];
                      v305 = (uint64_t)&v18[-v17 + 1];
                      if (v305 < 0)
                        goto LABEL_917;
                      if (2 * (uint64_t)&v300[-v17] > (unint64_t)v305)
                        v305 = 2 * (_QWORD)&v300[-v17];
                      if ((unint64_t)&v300[-v17] >= 0x3FFFFFFFFFFFFFFFLL)
                        v306 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v306 = v305;
                      if (v306)
                        v307 = (unint64_t)operator new(v306);
                      else
                        v307 = 0;
                      v308 = &v304[v307];
                      v309 = &v304[v307];
                      *v309 = v303;
                      v310 = v309 + 1;
                      if (v18 == (char *)v17)
                      {
                        v17 = (unint64_t)v308;
                      }
                      else
                      {
                        v311 = &v18[~v17];
                        do
                        {
                          v312 = *--v18;
                          (v311--)[v307] = v312;
                        }
                        while (v18 != (char *)v17);
                        v18 = (char *)v17;
                        v17 = v307;
                      }
                      v300 = (char *)(v307 + v306);
                      if (v18)
                        operator delete(v18);
                      v18 = v310;
                    }
                    else
                    {
                      *v18++ = v303;
                    }
                    v429 = v303 > 0xFF;
                    v303 >>= 8;
                  }
                  while (v429);
                  v301 += 16;
                }
                while (v301 != v302);
              }
              v631 = v300;
              v313 = v298 + 40;
              v314 = *(_QWORD *)(v298 + 48);
              v33 = v314 == v298 + 40;
              v315 = v630;
              if (!v33)
              {
                do
                {
                  if (v314)
                    v316 = v314 - 24;
                  else
                    v316 = 0;
                  if (!sub_1C4D99D08(v316))
                  {
                    v317 = *(_QWORD *)(v316 + 48);
                    if (v317)
                    {
                      v318 = *(_DWORD *)(v317 + 4);
                      if (v318)
                      {
                        if ((*(char *)(v317 + 1) & 0x80000000) == 0 && v315 != v318)
                        {
                          v319 = *(unsigned __int8 **)(v317 - 8 * *(unsigned int *)(v317 + 8));
                          if (v319)
                          {
                            v320 = *v319;
                            if ((v320 - 17) > 2)
                            {
                              v319 = 0;
                            }
                            else
                            {
                              while ((v320 & 0xFE) == 0x12)
                              {
                                v319 = *(unsigned __int8 **)&v319[-8 * *((unsigned int *)v319 + 2) + 8];
                                LOBYTE(v320) = *v319;
                              }
                            }
                          }
                          if ((unsigned __int8 *)v633 == v319)
                          {
                            v321 = sub_1C5890054(v297 + 1, (unsigned __int8 *)v670, v671);
                            v322 = v321;
                            v323 = *(_DWORD *)(*(_QWORD *)(v316 + 48) + 4);
                            v324 = *((unsigned int *)v321 + 10);
                            if (v324 >= *((unsigned int *)v321 + 11))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v321 + 4), (uint64_t)(v321 + 6), v324 + 1, 4);
                              v324 = *((unsigned int *)v322 + 10);
                            }
                            *(_DWORD *)(v322[4] + 4 * v324) = v323;
                            ++*((_DWORD *)v322 + 10);
                          }
                          v315 = v318;
                        }
                      }
                    }
                  }
                  v314 = *(_QWORD *)(v314 + 8);
                }
                while (v314 != v313);
              }
              v630 = 0;
              v297 += 17;
            }
            if (!v621)
            {
              v8 = a1;
LABEL_535:
              v325 = v661[1];
              if (LODWORD(v661[3]))
              {
                v326 = 16 * LODWORD(v661[3]);
                v327 = (uint64_t *)(v661[1] + 8);
                do
                {
                  if ((*(v327 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
                  {
                    v328 = *v327;
                    *v327 = 0;
                    if (v328)
                      MEMORY[0x1CAA32FC0](v328, 0x1020C40EDED9539);
                  }
                  v327 += 2;
                  v326 -= 16;
                }
                while (v326);
              }
              MEMORY[0x1CAA32FB4](v325, 8);
              v329 = (_QWORD *)v660;
              if ((_QWORD)v660)
              {
                v330 = (_QWORD *)*((_QWORD *)&v660 + 1);
                while (v330 != v329)
                {
                  v332 = *--v330;
                  v331 = v332;
                  *v330 = 0;
                  if (v332)
                    MEMORY[0x1CAA32FC0](v331, 0x1060C40E80B6244);
                }
                operator delete(v329);
              }
              if (v670 != v672)
                free(v670);
              ++v619;
              goto LABEL_550;
            }
            v8 = a1;
            if ((*((_BYTE *)v624 + 23) & 0x20) == 0)
              goto LABEL_569;
            v333 = ***v624;
            __n[0] = (size_t)v624;
            v334 = *(_DWORD *)(v333 + 2496);
            if (!v334)
            {
              v427 = 0;
              goto LABEL_685;
            }
            v335 = *(_QWORD *)(v333 + 2480);
            v336 = v334 - 1;
            v337 = v336 & (v291 ^ (v624 >> 9));
            v338 = (_QWORD *)(v335 + 40 * v337);
            v339 = (_QWORD ***)*v338;
            if ((uint64_t ***)*v338 != v624)
            {
              v340 = 0;
              v341 = 1;
              while (v339 != (_QWORD ***)-4096)
              {
                if (v340)
                  v342 = 0;
                else
                  v342 = v339 == (_QWORD ***)-8192;
                if (v342)
                  v340 = v338;
                v343 = v337 + v341++;
                v337 = v343 & v336;
                v338 = (_QWORD *)(v335 + 40 * v337);
                v339 = (_QWORD ***)*v338;
                if ((uint64_t ***)*v338 == v624)
                  goto LABEL_564;
              }
              if (v340)
                v427 = v340;
              else
                v427 = v338;
LABEL_685:
              v338 = sub_1C541AB24(v333 + 2480, (uint64_t)__n, (uint64_t *)__n, v427);
              v428 = __n[0];
              v338[4] = 0;
              v338[3] = 0;
              *v338 = v428;
              v338[1] = v338 + 3;
              v338[2] = 0x100000000;
            }
LABEL_564:
            v344 = *((unsigned int *)v338 + 4);
            if ((_DWORD)v344)
            {
              v345 = (_QWORD *)(v338[1] + 8);
              v346 = 16 * v344;
              while (*((_DWORD *)v345 - 2))
              {
                v347 = 0;
                v345 += 2;
                v346 -= 16;
                if (!v346)
                  goto LABEL_570;
              }
              v347 = *v345;
            }
            else
            {
LABEL_569:
              v347 = 0;
            }
LABEL_570:
            v658 = v347;
            llvm::ArrayType::get((llvm::ArrayType *)(**(_QWORD **)(a1 + 144) + 1984), v649);
            v349 = v348;
            v350 = operator new(0x78uLL);
            v351 = (uint64_t)(v350 + 8);
            v350[13] = v350[13] & 0x38000000 | 1;
            *(_QWORD *)v350 = 0;
            *((_QWORD *)v350 + 1) = 0;
            *((_QWORD *)v350 + 2) = 0;
            *((_QWORD *)v350 + 3) = v350 + 8;
            v641 = v350;
            v352 = *(_QWORD *)(a1 + 104);
            NullValue = llvm::Constant::getNullValue(v349, v353);
            __n[0] = (size_t)"__llvm_gcov_ctr";
            LOWORD(v684) = 259;
            llvm::GlobalVariable::GlobalVariable(v351, v352, v349, 0, 7, (uint64_t)NullValue, (uint64_t)__n, 0, 0, 0, 0);
            v638 = (uint64_t *)v351;
            sub_1C61B1608((uint64_t)v668, v351, &v658);
            if ((v644 & 1) != 0)
              goto LABEL_535;
            v355 = 0;
            v645 = v660;
            while (2)
            {
              v356 = *(_QWORD *)(*(_QWORD *)(v645 + 8 * v355) + 24);
              v357 = v356 + 40;
              for (kk = *(_QWORD *)(v356 + 48); kk != v357; kk = *(_QWORD *)(kk + 8))
              {
                v359 = kk - 24;
                if (!kk)
                  v359 = 0;
                if (*(_BYTE *)(v359 + 16) != 83)
                {
                  v360 = *(unsigned __int8 *)(kk - 8) - 38;
                  v429 = v360 > 0x38;
                  v361 = (1 << v360) & 0x100060000000001;
                  if (v429 || v361 == 0)
                    v357 = kk;
                  else
                    v357 = *(_QWORD *)(kk + 8);
                  break;
                }
              }
              sub_1C4D8ADA0((uint64_t)__n, (uint64_t **)v356, v357, 0, 0, 0);
              v363 = (llvm::GetElementPtrInst *)*((_QWORD *)v641 + 7);
              v677[0] = 257;
              v365 = sub_1C6269D18((uint64_t)__n, v363, v638, 0, v355, (uint64_t)&__p);
              v366 = (unsigned int *)*p_p;
              if (*(_BYTE *)(v8 + 7))
              {
                v414 = (llvm::ConstantInt *)*((_QWORD *)v366 + 248);
                v415 = v366[498];
                LODWORD(v674) = v415 >> 8;
                if (v415 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&__p, 1, 0);
                }
                else
                {
                  if (v415 <= 0xFF)
                    v416 = 0;
                  else
                    v416 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v415);
                  __p = (void *)(v416 & 1);
                }
                v417 = (uint64_t *)llvm::ConstantInt::get(v414, (llvm::LLVMContext *)&__p, v364);
                if (v674 >= 0x41 && __p)
                  MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
                v595 &= 0xFFFFFFFFFFFF0000;
                sub_1C61D775C((uint64_t *)__n, 1, v365, v417, 0, 2, 1);
LABEL_605:
                if ((char **)__n[0] != v683)
                  free((void *)__n[0]);
                if ((llvm::Instruction *)++v355 == v649)
                  goto LABEL_535;
                continue;
              }
              break;
            }
            v655 = v355;
            v367 = (char *)(v366 + 496);
            v666.__r_.__value_.__r.__words[0] = (std::string::size_type)"gcov_ctr";
            v667 = 259;
            llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v686 + 56) + 40) + 272, (uint64_t)(v366 + 496));
            v369 = v368;
            v370 = (char *)operator new(0x60uLL);
            v371 = v370;
            v372 = (llvm::Value *)(v370 + 32);
            *((_QWORD *)v370 + 2) = 0;
            *((_QWORD *)v370 + 3) = v370 + 32;
            v677[0] = 257;
            *((_QWORD *)v370 + 4) = v367;
            *((_QWORD *)v370 + 5) = 0;
            v373 = (uint64_t *)(v370 + 40);
            *((_WORD *)v370 + 24) = 60;
            *((_DWORD *)v370 + 13) = 1;
            *(_OWORD *)(v370 + 56) = 0u;
            *(_OWORD *)(v370 + 72) = 0u;
            *((_DWORD *)v370 + 22) = 0;
            *(_QWORD *)v370 = v365;
            *((_QWORD *)v370 + 1) = 0;
            if (v365)
            {
              v374 = (_QWORD *)(v365 + 8);
              v375 = *(_QWORD *)(v365 + 8);
              *((_QWORD *)v370 + 1) = v375;
              if (v375)
                *(_QWORD *)(v375 + 16) = v370 + 8;
              *((_QWORD *)v370 + 2) = v374;
              *v374 = v370;
            }
            *((_WORD *)v370 + 25) = 2 * (v369 & 0x3F);
            v370[92] = 1;
            llvm::Value::setName((uint64_t ***)v370 + 4, (uint64_t)&__p);
            (*(void (**)(uint64_t, llvm::Value *, std::string *, uint64_t, uint64_t))(*(_QWORD *)v690 + 16))(v690, v372, &v666, v686, v687);
            if (!LODWORD(__n[1]))
            {
LABEL_589:
              v377 = (llvm::ConstantInt *)*((_QWORD *)*p_p + 248);
              v378 = *((_DWORD *)*p_p + 498);
              LODWORD(v674) = v378 >> 8;
              if (v378 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&__p, 1, 0);
              }
              else
              {
                if (v378 <= 0xFF)
                  v379 = 0;
                else
                  v379 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v378);
                __p = (void *)(v379 & 1);
              }
              v380 = llvm::ConstantInt::get(v377, (llvm::LLVMContext *)&__p, v376);
              if (v674 >= 0x41 && __p)
                MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
              v667 = 257;
              v381 = (_QWORD *)(*(uint64_t (**)(uint64_t, llvm::Value *, llvm::ValueHandleBase *, _QWORD, _QWORD))(*(_QWORD *)v689 + 16))(v689, v372, v380, 0, 0);
              v8 = a1;
              if (!v381)
              {
                v677[0] = 257;
                v394 = (char *)operator new(0x80uLL);
                v395 = v394;
                *((_QWORD *)v394 + 8) = *(_QWORD *)v372;
                v381 = v394 + 64;
                *((_QWORD *)v394 + 3) = v394 + 64;
                *((_QWORD *)v394 + 5) = 0;
                v396 = v394 + 40;
                *((_QWORD *)v394 + 6) = 0;
                *((_QWORD *)v394 + 7) = v394 + 64;
                *((_QWORD *)v394 + 9) = 0;
                *((_QWORD *)v394 + 10) = 0x200000029;
                *(_OWORD *)(v394 + 88) = 0u;
                *(_OWORD *)(v394 + 104) = 0u;
                *((_DWORD *)v394 + 30) = 0;
                *(_QWORD *)v394 = v372;
                v397 = *v373;
                *((_QWORD *)v394 + 1) = *v373;
                if (v397)
                  *(_QWORD *)(v397 + 16) = v394 + 8;
                *((_QWORD *)v394 + 2) = v373;
                *v373 = (uint64_t)v394;
                *((_QWORD *)v394 + 4) = v380;
                if (v380)
                {
                  v400 = *((_QWORD *)v380 + 1);
                  v399 = (_QWORD *)((char *)v380 + 8);
                  v398 = v400;
                  *v396 = v400;
                  if (v400)
                    *(_QWORD *)(v398 + 16) = v396;
                  *((_QWORD *)v394 + 6) = v399;
                  *v399 = v394 + 32;
                }
                llvm::Value::setName((uint64_t ***)v394 + 8, (uint64_t)&__p);
                (*(void (**)(uint64_t, _QWORD *, std::string *, uint64_t, uint64_t))(*(_QWORD *)v690 + 16))(v690, v381, &v666, v686, v687);
                if (LODWORD(__n[1]))
                {
                  v401 = __n[0];
                  v402 = __n[0] + 16 * LODWORD(__n[1]);
                  v403 = (unsigned __int8 **)(v395 + 112);
                  do
                  {
                    v404 = *(_DWORD *)v401;
                    v405 = *(unsigned __int8 **)(v401 + 8);
                    if (v405)
                    {
                      if (!v404)
                      {
                        *(_QWORD *)&v657.__val_ = *(_QWORD *)(v401 + 8);
                        llvm::MetadataTracking::track((uint64_t)&v657, v405, 2);
                        v406 = *v403;
                        goto LABEL_627;
                      }
                    }
                    else
                    {
                      v406 = *v403;
                      if (!*v403 && (v395[87] & 0x20) == 0)
                        goto LABEL_624;
                      if (!v404)
                      {
                        *(_QWORD *)&v657.__val_ = 0;
LABEL_627:
                        if (v406)
                          llvm::MetadataTracking::untrack((uint64_t)(v395 + 112), v406);
                        v407 = *(unsigned __int8 **)&v657.__val_;
                        *v403 = *(unsigned __int8 **)&v657.__val_;
                        if (v407)
                          llvm::MetadataTracking::retrack((uint64_t)&v657, v407, (uint64_t)(v395 + 112));
                        goto LABEL_624;
                      }
                    }
                    llvm::Value::setMetadata((llvm::Value *)v381, *(_DWORD *)v401, (llvm::MDNode *)v405);
LABEL_624:
                    v401 += 16;
                  }
                  while (v401 != v402);
                }
              }
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v686 + 56) + 40) + 272, *v381);
              v383 = v382;
              v384 = (char *)operator new(0x80uLL);
              v385 = v384;
              *((_DWORD *)v384 + 21) = *((_DWORD *)v384 + 21) & 0x38000000 | 2;
              *(_QWORD *)v384 = 0;
              *((_QWORD *)v384 + 2) = 0;
              *((_QWORD *)v384 + 1) = 0;
              *((_QWORD *)v384 + 5) = 0;
              *((_QWORD *)v384 + 6) = 0;
              *((_QWORD *)v384 + 4) = 0;
              v386 = (uint64_t *)(v384 + 32);
              *((_QWORD *)v384 + 8) = **(_QWORD **)*v381 + 1576;
              v387 = (llvm::Value *)(v384 + 64);
              *((_QWORD *)v384 + 3) = v384 + 64;
              *((_QWORD *)v384 + 7) = v384 + 64;
              *((_QWORD *)v384 + 9) = 0;
              v384[80] = 61;
              v384[81] = 0;
              *((_WORD *)v384 + 41) = 0;
              *((_DWORD *)v384 + 21) = 2;
              *(_OWORD *)(v384 + 88) = 0u;
              *(_OWORD *)(v384 + 104) = 0u;
              *((_DWORD *)v384 + 30) = 0;
              *(_QWORD *)v384 = v381;
              v390 = v381[1];
              v389 = v381 + 1;
              v388 = v390;
              *((_QWORD *)v384 + 1) = v390;
              if (v390)
                *(_QWORD *)(v388 + 16) = v384 + 8;
              *((_QWORD *)v384 + 2) = v389;
              *v389 = v384;
              if (*((_QWORD *)v384 + 4))
              {
                **((_QWORD **)v384 + 6) = *((_QWORD *)v384 + 5);
                v425 = *((_QWORD *)v384 + 5);
                if (v425)
                  *(_QWORD *)(v425 + 16) = *((_QWORD *)v384 + 6);
              }
              *v386 = v365;
              if (v365)
              {
                v393 = *(_QWORD *)(v365 + 8);
                v392 = (uint64_t **)(v365 + 8);
                v391 = v393;
                *((_QWORD *)v384 + 5) = v393;
                if (v393)
                  *(_QWORD *)(v391 + 16) = v384 + 40;
                *((_QWORD *)v384 + 6) = v392;
                *v392 = v386;
              }
              *((_WORD *)v384 + 41) = 2 * (v383 & 0x3F);
              v384[124] = 1;
              v677[0] = 257;
              (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v690 + 16))(v690, v387, &__p, v686, v687);
              if (!LODWORD(__n[1]))
              {
LABEL_604:
                v355 = v655;
                goto LABEL_605;
              }
              v418 = __n[0];
              v419 = __n[0] + 16 * LODWORD(__n[1]);
              v420 = (unsigned __int8 **)(v385 + 112);
              while (2)
              {
                v421 = *(_DWORD *)v418;
                v422 = *(unsigned __int8 **)(v418 + 8);
                if (v422)
                {
                  if (v421)
                    goto LABEL_661;
                  v666.__r_.__value_.__r.__words[0] = *(_QWORD *)(v418 + 8);
                  llvm::MetadataTracking::track((uint64_t)&v666, v422, 2);
                  v423 = *v420;
LABEL_665:
                  if (v423)
                    llvm::MetadataTracking::untrack((uint64_t)(v385 + 112), v423);
                  v424 = (unsigned __int8 *)v666.__r_.__value_.__r.__words[0];
                  *v420 = (unsigned __int8 *)v666.__r_.__value_.__r.__words[0];
                  if (v424)
                    llvm::MetadataTracking::retrack((uint64_t)&v666, v424, (uint64_t)(v385 + 112));
                }
                else
                {
                  v423 = *v420;
                  if (*v420 || (v385[87] & 0x20) != 0)
                  {
                    if (!v421)
                    {
                      v666.__r_.__value_.__r.__words[0] = 0;
                      goto LABEL_665;
                    }
LABEL_661:
                    llvm::Value::setMetadata(v387, *(_DWORD *)v418, (llvm::MDNode *)v422);
                  }
                }
                v418 += 16;
                if (v418 == v419)
                  goto LABEL_604;
                continue;
              }
            }
            v408 = __n[0];
            v409 = __n[0] + 16 * LODWORD(__n[1]);
            v410 = (unsigned __int8 **)(v371 + 80);
            while (2)
            {
              v411 = *(_DWORD *)v408;
              v376 = *(const llvm::APInt **)(v408 + 8);
              if (v376)
              {
                if (v411)
                  goto LABEL_638;
                *(_QWORD *)&v657.__val_ = *(_QWORD *)(v408 + 8);
                llvm::MetadataTracking::track((uint64_t)&v657, (unsigned __int8 *)v376, 2);
                v412 = *v410;
LABEL_642:
                if (v412)
                  llvm::MetadataTracking::untrack((uint64_t)(v371 + 80), v412);
                v413 = *(unsigned __int8 **)&v657.__val_;
                *v410 = *(unsigned __int8 **)&v657.__val_;
                if (v413)
                  llvm::MetadataTracking::retrack((uint64_t)&v657, v413, (uint64_t)(v371 + 80));
              }
              else
              {
                v412 = *v410;
                if (*v410 || (v371[55] & 0x20) != 0)
                {
                  if (!v411)
                  {
                    *(_QWORD *)&v657.__val_ = 0;
                    goto LABEL_642;
                  }
LABEL_638:
                  llvm::Value::setMetadata(v372, *(_DWORD *)v408, v376);
                }
              }
              v408 += 16;
              if (v408 == v409)
                goto LABEL_589;
              continue;
            }
          }
        }
        v644 = 1;
        goto LABEL_467;
      }
LABEL_550:
      v19 = v622;
      v20 = v623;
LABEL_551:
      v20 = *(_QWORD *)(v20 + 8);
      if (v20 == v19)
      {
        v440 = &v18[-v17];
        if (v18 == (char *)v17)
        {
          v442 = -1;
          v12 = v612;
          v7 = a2;
          v13 = v617;
        }
        else
        {
          v441 = 0;
          v442 = -1;
          v12 = v612;
          v7 = a2;
          v13 = v617;
          do
            v442 = dword_1C866F364[((v441++)[v17] ^ v442)] ^ (v442 >> 8);
          while (v440 != v441);
        }
LABEL_719:
        v443 = *(unsigned int *)(v8 + 80);
        if (v443 >= *(unsigned int *)(v8 + 84))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v599, v598, v443 + 1, 4);
          v443 = *(unsigned int *)(v8 + 80);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 72) + 4 * v443) = v442;
        ++*(_DWORD *)(v8 + 80);
        if (!*(_BYTE *)v8)
        {
          if (!v621)
          {
LABEL_724:
            v14 = 0;
LABEL_725:
            if (v668[0] != v669)
              free(v668[0]);
            if (v17)
              operator delete((void *)v17);
            goto LABEL_729;
          }
LABEL_723:
          sub_1C5890884(v8, (uint64_t)v668);
          goto LABEL_724;
        }
        v657.__val_ = 0;
        v657.__cat_ = std::system_category();
        sub_1C58902EC(&v670, *(_QWORD *)(v8 + 104), v615, 0);
        if (v671 >= 0)
          v444 = &v670;
        else
          v444 = v670;
        if (v671 >= 0)
          v445 = HIBYTE(v671) & 0x7F;
        else
          v445 = v671;
        llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&__p, v444, v445, (uint64_t)&v657, 0);
        if (SHIBYTE(v671) < 0)
          operator delete(v670);
        if (v657.__val_)
        {
          v446 = *(_QWORD *)(v8 + 144);
          *(_QWORD *)v659 = "failed to open coverage notes file for writing: ";
          LOWORD(v661[1]) = 259;
          std::error_code::message(&v666, &v657);
          v447 = v661[1];
          if (LOBYTE(v661[1]))
          {
            if (LOBYTE(v661[1]) == 1)
            {
              __n[0] = (size_t)&v666;
              v448 = 1;
              v447 = 4;
            }
            else
            {
              if (BYTE1(v661[1]) != 1)
                v447 = 2;
              v453 = v659;
              if (BYTE1(v661[1]) == 1)
                v453 = *(char **)v659;
              __n[0] = (size_t)v453;
              __n[1] = v660;
              v683[0] = (char *)&v666;
              v448 = 4;
            }
          }
          else
          {
            v448 = 1;
          }
          LOBYTE(v684) = v447;
          BYTE1(v684) = v448;
          LODWORD(v671) = 0;
          BYTE4(v671) = 0;
          v670 = &off_1E814E960;
          *((_QWORD *)&v671 + 1) = 0;
          v672[0] = __n;
          v672[1] = 0;
          llvm::LLVMContext::diagnose(v446, (const llvm::DiagnosticInfo *)&v670);
          if (SHIBYTE(v666.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v666.__r_.__value_.__l.__data_);
          llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&__p);
          v14 = v621;
          goto LABEL_725;
        }
        *(_QWORD *)(v8 + 64) = &__p;
        if (*(_DWORD *)(v8 + 56))
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "oncg", 4uLL);
          v449 = 0;
          v450 = v600;
          do
          {
            v451 = *v450--;
            v452 = (const char *)&v658;
            v659[v449++ - 8] = v451;
          }
          while (v449 != 4);
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "gcno", 4uLL);
          v452 = v601;
        }
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, v452, 4uLL);
        v454 = bswap32(v442);
        v646 = v454;
        if ((*(_DWORD *)(v8 + 56) - 1) >= 2)
          v455 = v454;
        else
          v455 = v442;
        LODWORD(v670) = v455;
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(v8 + 64), (const char *)&v670, 4uLL);
        v618 = v13;
        if (v611 < 138)
        {
          if (v611 < 128)
          {
LABEL_764:
            v456 = *(unsigned int *)(v8 + 160);
            if (!(_DWORD)v456)
            {
LABEL_914:
              LODWORD(v670) = 0;
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(v8 + 64), (const char *)&v670, 4uLL);
              LODWORD(v670) = 0;
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(v8 + 64), (const char *)&v670, 4uLL);
              llvm::raw_fd_ostream::close((llvm::raw_fd_ostream *)&__p);
              llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&__p);
              v14 = 0;
              v12 = v612;
              v7 = a2;
              v13 = v618;
              if (!v621)
                goto LABEL_725;
              goto LABEL_723;
            }
            v457 = *(uint64_t ***)(v8 + 152);
            v650 = (llvm::Instruction *)&v457[v456];
            while (1)
            {
              v656 = v457;
              v458 = *v457;
              v459 = **v457;
              if ((*(_DWORD *)(v459 + 56) - 1) >= 2)
                v460 = 1;
              else
                v460 = 0x1000000;
              LODWORD(v670) = v460;
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(v459 + 64), (const char *)&v670, 4uLL);
              sub_1C588FBA8((uint64_t)__n, (unsigned __int8 *)v458[1]);
              v461 = v458[1] - 8 * *(unsigned int *)(v458[1] + 8);
              v462 = *(_QWORD *)(v461 + 24);
              if (!v462 || (v463 = **(_QWORD **)(v462 + 8)) == 0)
              {
                v464 = *(_QWORD *)(v461 + 16);
                if (v464)
                  v463 = **(_QWORD **)(v464 + 8);
                else
                  v463 = 0;
              }
              v465 = *((_DWORD *)v458 + 7);
              v466 = v463 >> 2;
              if (v465 <= 0x59)
                v467 = 6;
              else
                v467 = 7;
              if (v465 < 80)
                v467 = 3;
              if (v465 <= 46)
                v468 = 4;
              else
                v468 = 5;
              v469 = v467 + v468 + (__n[1] >> 2) + v466;
              v470 = *v458;
              v471 = bswap32(v469);
              if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                v469 = v471;
              LODWORD(v670) = v469;
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(v470 + 64), (const char *)&v670, 4uLL);
              v472 = *((_DWORD *)v458 + 5);
              v473 = *v458;
              v474 = bswap32(v472);
              if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                v472 = v474;
              LODWORD(v670) = v472;
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(v473 + 64), (const char *)&v670, 4uLL);
              v475 = *((_DWORD *)v458 + 6);
              v476 = *v458;
              v477 = bswap32(v475);
              if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                v475 = v477;
              LODWORD(v670) = v475;
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(v476 + 64), (const char *)&v670, 4uLL);
              if (*((int *)v458 + 7) >= 47)
              {
                v478 = *v458;
                v479 = v646;
                if ((*(_DWORD *)(*v458 + 56) - 1) < 2)
                  v479 = v442;
                LODWORD(v670) = v479;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v478 + 64), (const char *)&v670, 4uLL);
              }
              v480 = v458[1] - 8 * *(unsigned int *)(v458[1] + 8);
              v481 = *(_QWORD *)(v480 + 24);
              if (!v481
                || (v482 = *(_QWORD **)(v481 + 8), v485 = *v482, v483 = (const char *)(v482 + 3), (v484 = v485) == 0))
              {
                v486 = *(_QWORD *)(v480 + 16);
                if (v486)
                {
                  v487 = *(_QWORD **)(v486 + 8);
                  v488 = *v487;
                  v483 = (const char *)(v487 + 3);
                  v484 = v488;
                }
                else
                {
                  v483 = 0;
                  v484 = 0;
                }
              }
              sub_1C58907FC(*v458, v483, v484);
              v489 = *v458;
              if (*((int *)v458 + 7) > 79)
              {
                v494 = (*(_DWORD *)(v458[1] + 40) >> 6) & 1;
                if ((*(_DWORD *)(v489 + 56) - 1) >= 2)
                  v494 <<= 24;
                LODWORD(v670) = v494;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v489 + 64), (const char *)&v670, 4uLL);
                sub_1C58907FC(*v458, (const char *)__n[0], __n[1]);
                v495 = *v458;
                v496 = *(_DWORD *)(v458[1] + 24);
                v497 = bswap32(v496);
                if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                  v496 = v497;
                LODWORD(v670) = v496;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v495 + 64), (const char *)&v670, 4uLL);
                v498 = *v458;
                LODWORD(v670) = 0;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v498 + 64), (const char *)&v670, 4uLL);
                v499 = *((_DWORD *)v458 + 4);
                v500 = *v458;
                v501 = bswap32(v499);
                if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                  v499 = v501;
                LODWORD(v670) = v499;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v500 + 64), (const char *)&v670, 4uLL);
                if (*((int *)v458 + 7) < 90)
                  goto LABEL_810;
                v502 = *v458;
                LODWORD(v670) = 0;
                v493 = *(llvm::raw_ostream **)(v502 + 64);
              }
              else
              {
                sub_1C58907FC(v489, (const char *)__n[0], __n[1]);
                v490 = *v458;
                v491 = *(_DWORD *)(v458[1] + 24);
                v492 = bswap32(v491);
                if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                  v491 = v492;
                LODWORD(v670) = v491;
                v493 = *(llvm::raw_ostream **)(v490 + 64);
              }
              llvm::raw_ostream::write(v493, (const char *)&v670, 4uLL);
LABEL_810:
              v503 = *v458;
              if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                v504 = 16641;
              else
                v504 = 21037056;
              LODWORD(v670) = v504;
              llvm::raw_ostream::write(*(llvm::raw_ostream **)(v503 + 64), (const char *)&v670, 4uLL);
              if (*((int *)v458 + 7) > 79)
              {
                v510 = *v458;
                if ((*(_DWORD *)(*v458 + 56) - 1) < 2)
                  v511 = 1;
                else
                  v511 = 0x1000000;
                LODWORD(v670) = v511;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v510 + 64), (const char *)&v670, 4uLL);
                v512 = 2 - 252645135 * ((unint64_t)(v458[8] - v458[7]) >> 3);
                v513 = *v458;
                v514 = bswap32(v512);
                if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                  v512 = v514;
                LODWORD(v670) = v512;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v513 + 64), (const char *)&v670, 4uLL);
              }
              else
              {
                v505 = 2 - 252645135 * ((unint64_t)(v458[8] - v458[7]) >> 3);
                v506 = *v458;
                v507 = bswap32(v505);
                if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                  v505 = v507;
                LODWORD(v670) = v505;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v506 + 64), (const char *)&v670, 4uLL);
                v508 = -252645135 * ((unint64_t)(v458[8] - v458[7]) >> 3) + 2;
                if (-252645135 * ((unint64_t)(v458[8] - v458[7]) >> 3) != -2)
                {
                  do
                  {
                    v509 = *v458;
                    LODWORD(v670) = 0;
                    llvm::raw_ostream::write(*(llvm::raw_ostream **)(v509 + 64), (const char *)&v670, 4uLL);
                    --v508;
                  }
                  while (v508);
                }
              }
              v515 = *((_DWORD *)v458 + 26);
              if (v515)
              {
                v516 = *v458;
                if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                  v517 = 17153;
                else
                  v517 = 21168128;
                LODWORD(v670) = v517;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v516 + 64), (const char *)&v670, 4uLL);
                v518 = (2 * v515) | 1;
                v519 = *v458;
                v520 = bswap32(v518);
                if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                  v518 = v520;
                LODWORD(v670) = v518;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v519 + 64), (const char *)&v670, 4uLL);
                v521 = *((_DWORD *)v458 + 22);
                v522 = *v458;
                v523 = bswap32(v521);
                if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                  v521 = v523;
                LODWORD(v670) = v521;
                llvm::raw_ostream::write(*(llvm::raw_ostream **)(v522 + 64), (const char *)&v670, 4uLL);
                v524 = *((unsigned int *)v458 + 26);
                if ((_DWORD)v524)
                {
                  v525 = (_DWORD *)v458[12];
                  v526 = &v525[4 * v524];
                  do
                  {
                    v527 = *(_DWORD *)(*(_QWORD *)v525 + 8);
                    v528 = *v458;
                    v529 = bswap32(v527);
                    if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                      v527 = v529;
                    LODWORD(v670) = v527;
                    llvm::raw_ostream::write(*(llvm::raw_ostream **)(v528 + 64), (const char *)&v670, 4uLL);
                    v530 = v525[2];
                    v531 = *v458;
                    v532 = bswap32(v530);
                    if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                      v530 = v532;
                    LODWORD(v670) = v530;
                    llvm::raw_ostream::write(*(llvm::raw_ostream **)(v531 + 64), (const char *)&v670, 4uLL);
                    v525 += 4;
                  }
                  while (v525 != v526);
                }
              }
              v533 = v458[7];
              v534 = v458[8];
              if (v533 != v534)
              {
                do
                {
                  if (*(_DWORD *)(v533 + 32))
                  {
                    v535 = *v458;
                    if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                      v536 = 17153;
                    else
                      v536 = 21168128;
                    LODWORD(v670) = v536;
                    llvm::raw_ostream::write(*(llvm::raw_ostream **)(v535 + 64), (const char *)&v670, 4uLL);
                    v537 = (2 * *(_DWORD *)(v533 + 32)) | 1;
                    v538 = *v458;
                    v539 = bswap32(v537);
                    if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                      v537 = v539;
                    LODWORD(v670) = v537;
                    llvm::raw_ostream::write(*(llvm::raw_ostream **)(v538 + 64), (const char *)&v670, 4uLL);
                    v540 = *(_DWORD *)(v533 + 16);
                    v541 = *v458;
                    v542 = bswap32(v540);
                    if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                      v540 = v542;
                    LODWORD(v670) = v540;
                    llvm::raw_ostream::write(*(llvm::raw_ostream **)(v541 + 64), (const char *)&v670, 4uLL);
                    v543 = *(unsigned int *)(v533 + 32);
                    if ((_DWORD)v543)
                    {
                      v544 = *(_DWORD **)(v533 + 24);
                      v545 = &v544[4 * v543];
                      do
                      {
                        v546 = *(_DWORD *)(*(_QWORD *)v544 + 8);
                        v547 = *v458;
                        v548 = bswap32(v546);
                        if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                          v546 = v548;
                        LODWORD(v670) = v546;
                        llvm::raw_ostream::write(*(llvm::raw_ostream **)(v547 + 64), (const char *)&v670, 4uLL);
                        v549 = v544[2];
                        v550 = *v458;
                        v551 = bswap32(v549);
                        if ((*(_DWORD *)(*v458 + 56) - 1) >= 2)
                          v549 = v551;
                        LODWORD(v670) = v549;
                        llvm::raw_ostream::write(*(llvm::raw_ostream **)(v550 + 64), (const char *)&v670, 4uLL);
                        v544 += 4;
                      }
                      while (v544 != v545);
                    }
                  }
                  v533 += 136;
                }
                while (v533 != v534);
                v553 = v458[7];
                v552 = v458[8];
                while (v553 != v552)
                {
                  v670 = (char *)&v671 + 8;
                  *(_QWORD *)&v671 = 0x2000000000;
                  v554 = *(unsigned int *)(v553 + 112);
                  if ((_DWORD)v554)
                  {
                    for (mm = *(uint64_t **)(v553 + 104); !*mm || *mm == -8; ++mm)
                      ;
                  }
                  else
                  {
                    mm = *(uint64_t **)(v553 + 104);
                  }
                  v557 = *(_QWORD *)(v553 + 104) + 8 * v554;
                  if (mm == (uint64_t *)v557)
                  {
                    v560 = 3;
                  }
                  else
                  {
                    v558 = 0;
                    v559 = *mm;
                    v560 = 3;
                    do
                    {
                      v561 = *(_BYTE *)(v559 + 39);
                      v562 = v561;
                      v563 = v561 & 0x7C;
                      if (v562 >= 0)
                        v564 = v563;
                      else
                        v564 = *(_QWORD *)(v559 + 24);
                      v565 = *(_DWORD *)(v559 + 48);
                      if (v558 >= DWORD1(v671))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v670, (uint64_t)&v671 + 8, v558 + 1, 8);
                        v558 = v671;
                      }
                      v560 += v565 + (v564 >> 2) + 3;
                      *((_QWORD *)v670 + v558) = v559;
                      v558 = v671 + 1;
                      LODWORD(v671) = v671 + 1;
                      do
                      {
                        v566 = mm[1];
                        ++mm;
                        v559 = v566;
                        if (v566)
                          v567 = v559 == -8;
                        else
                          v567 = 1;
                      }
                      while (v567);
                    }
                    while (mm != (uint64_t *)v557);
                  }
                  v568 = *(_QWORD *)(v553 + 8);
                  if ((*(_DWORD *)(v568 + 56) - 1) >= 2)
                    v569 = 17665;
                  else
                    v569 = 21299200;
                  *(_DWORD *)v659 = v569;
                  llvm::raw_ostream::write(*(llvm::raw_ostream **)(v568 + 64), v659, 4uLL);
                  v570 = *(_QWORD *)(v553 + 8);
                  v571 = bswap32(v560);
                  if ((*(_DWORD *)(v570 + 56) - 1) >= 2)
                    v572 = v571;
                  else
                    v572 = v560;
                  *(_DWORD *)v659 = v572;
                  llvm::raw_ostream::write(*(llvm::raw_ostream **)(v570 + 64), v659, 4uLL);
                  v573 = *(_DWORD *)(v553 + 16);
                  v574 = *(_QWORD *)(v553 + 8);
                  v575 = bswap32(v573);
                  if ((*(_DWORD *)(v574 + 56) - 1) >= 2)
                    v573 = v575;
                  *(_DWORD *)v659 = v573;
                  llvm::raw_ostream::write(*(llvm::raw_ostream **)(v574 + 64), v659, 4uLL);
                  v576 = 126 - 2 * __clz(v671);
                  if ((_DWORD)v671)
                    v577 = (char *)v576;
                  else
                    v577 = 0;
                  sub_1C58962BC((size_t **)v670, (size_t **)v670 + v671, v577, 1);
                  if ((_DWORD)v671)
                  {
                    v578 = (char *)v670;
                    v579 = (char *)v670 + 8 * v671;
                    do
                    {
                      v580 = *(_QWORD *)v578;
                      v581 = *(_QWORD *)(*(_QWORD *)v578 + 8);
                      *(_DWORD *)v659 = 0;
                      llvm::raw_ostream::write(*(llvm::raw_ostream **)(v581 + 64), v659, 4uLL);
                      v582 = *(_BYTE *)(v580 + 39);
                      v583 = v582;
                      if (v582 >= 0)
                        v584 = (const char *)(v580 + 16);
                      else
                        v584 = *(const char **)(v580 + 16);
                      v585 = v582 & 0x7F;
                      if (v583 >= 0)
                        v586 = v585;
                      else
                        v586 = *(_QWORD *)(v580 + 24);
                      sub_1C58907FC(*(_QWORD *)(v580 + 8), v584, v586);
                      v587 = *(unsigned int *)(v580 + 48);
                      if ((_DWORD)v587)
                      {
                        v588 = 0;
                        v589 = 4 * v587;
                        do
                        {
                          v590 = *(_DWORD *)(*(_QWORD *)(v580 + 40) + v588);
                          v591 = *(_QWORD *)(v580 + 8);
                          v592 = bswap32(v590);
                          if ((*(_DWORD *)(v591 + 56) - 1) >= 2)
                            v590 = v592;
                          *(_DWORD *)v659 = v590;
                          llvm::raw_ostream::write(*(llvm::raw_ostream **)(v591 + 64), v659, 4uLL);
                          v588 += 4;
                        }
                        while (v589 != v588);
                      }
                      v578 += 8;
                    }
                    while (v578 != v579);
                  }
                  v593 = *(_QWORD *)(v553 + 8);
                  *(_DWORD *)v659 = 0;
                  llvm::raw_ostream::write(*(llvm::raw_ostream **)(v593 + 64), v659, 4uLL);
                  v594 = *(_QWORD *)(v553 + 8);
                  *(_DWORD *)v659 = 0;
                  llvm::raw_ostream::write(*(llvm::raw_ostream **)(v594 + 64), v659, 4uLL);
                  if (v670 != (char *)&v671 + 8)
                    free(v670);
                  v553 += 136;
                }
              }
              if ((char **)__n[0] != &v683[1])
                free((void *)__n[0]);
              v457 = v656 + 1;
              v8 = a1;
              if (v656 + 1 == (uint64_t **)v650)
                goto LABEL_914;
            }
          }
        }
        else
        {
          sub_1C58907FC(v8, "", 0);
        }
        LODWORD(v670) = 0;
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(v8 + 64), (const char *)&v670, 4uLL);
        goto LABEL_764;
      }
    }
    v25 = v21 >> 4;
    v30 = v21;
    v61 = 0;
LABEL_67:
    v28 = sub_1C541AB24(v22 + 2480, (uint64_t)&v670, (uint64_t *)&v670, v61);
    v62 = v670;
    v28[4] = 0;
    v28[3] = 0;
    *v28 = v62;
    v28[1] = v28 + 3;
    v28[2] = 0x100000000;
    goto LABEL_26;
  }
}

void sub_1C588FB38(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        llvm::Regex::~Regex((llvm::Regex *)(v4 - 16));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C588FBA8(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  void *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  const char *v23;
  _QWORD *v24;
  void **v25;
  __int16 v26;
  _QWORD *v27;
  __int16 v28;
  _QWORD *v29[4];
  __int16 v30;
  const char *v31;
  unint64_t v32;
  __int16 v33;

  v2 = a2;
  v4 = (void *)(a1 + 24);
  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_1C85F20B0;
  v5 = a2;
  if (*a2 == 15 || (v5 = *(unsigned __int8 **)&a2[-8 * *((unsigned int *)a2 + 2)]) != 0)
  {
    v6 = *(_QWORD *)&v5[-8 * *((unsigned int *)v5 + 2)];
    if (v6)
    {
      v7 = *(_QWORD **)(v6 + 8);
      v10 = *v7;
      v9 = (const char *)(v7 + 3);
      v8 = v10;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
  }
  else
  {
    v8 = 0;
    v9 = "";
  }
  v33 = 261;
  v31 = v9;
  v32 = v8;
  if (!llvm::sys::fs::access((unsigned __int8 *)&v31, 0))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)(a1 + 16) < v8)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, v4, v8, 1);
      v18 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v18 = 0;
      v19 = 0;
      if (!v8)
      {
LABEL_15:
        *(_QWORD *)(a1 + 8) = v19 + v8;
        return;
      }
    }
    memcpy((void *)(*(_QWORD *)a1 + v18), v9, v8);
    v19 = *(_QWORD *)(a1 + 8);
    goto LABEL_15;
  }
  v11 = *v2;
  v12 = v2;
  if (v11 == 15 || (v13 = *((unsigned int *)v2 + 2), (v12 = *(unsigned __int8 **)&v2[-8 * v13]) != 0))
  {
    v14 = *(_QWORD *)&v12[-8 * *((unsigned int *)v12 + 2) + 8];
    if (v14)
    {
      v15 = *(_QWORD **)(v14 + 8);
      v17 = *v15;
      v16 = (const char *)(v15 + 3);
      v14 = v17;
    }
    else
    {
      v16 = 0;
    }
    v33 = 261;
    v31 = v16;
    v32 = v14;
    if (v11 == 15)
      goto LABEL_21;
    v20 = -(uint64_t)*((unsigned int *)v2 + 2);
  }
  else
  {
    v20 = -v13;
    v33 = 261;
    v31 = "";
    v32 = 0;
  }
  v2 = *(unsigned __int8 **)&v2[8 * v20];
  if (v2)
  {
LABEL_21:
    v21 = *(_QWORD **)&v2[-8 * *((unsigned int *)v2 + 2)];
    if (v21)
    {
      v22 = (_QWORD *)v21[1];
      v24 = (_QWORD *)*v22;
      v23 = (const char *)(v22 + 3);
      v21 = v24;
    }
    else
    {
      v23 = 0;
    }
    goto LABEL_25;
  }
  v21 = 0;
  v23 = "";
LABEL_25:
  v30 = 261;
  v29[0] = v23;
  v29[1] = v21;
  v28 = 257;
  v26 = 257;
  llvm::sys::path::append((_QWORD *)a1, 0, (_QWORD **)&v31, v29, &v27, &v25);
}

uint64_t *sub_1C588FDA4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v25;
  void *v26;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 316))
    {
      v3 = *(unsigned int *)(v2 + 312);
      if ((_DWORD)v3)
      {
        v4 = 0;
        v5 = 8 * v3;
        do
        {
          v6 = *(_QWORD *)(*(_QWORD *)(v2 + 304) + v4);
          if (v6 != -8 && v6 != 0)
          {
            v8 = *(void **)(v6 + 40);
            if (v8 != (void *)(v6 + 56))
              free(v8);
            if (*(char *)(v6 + 39) < 0)
              operator delete(*(void **)(v6 + 16));
            MEMORY[0x1CAA32FB4](v6, 8);
          }
          v4 += 8;
        }
        while (v5 != v4);
      }
    }
    free(*(void **)(v2 + 304));
    v9 = *(void **)(v2 + 224);
    if (v9 != (void *)(v2 + 240))
      free(v9);
    if (*(_DWORD *)(v2 + 188))
    {
      v10 = *(unsigned int *)(v2 + 184);
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = 8 * v10;
        do
        {
          v13 = *(_QWORD *)(*(_QWORD *)(v2 + 176) + v11);
          if (v13 != -8 && v13 != 0)
          {
            v15 = *(void **)(v13 + 40);
            if (v15 != (void *)(v13 + 56))
              free(v15);
            if (*(char *)(v13 + 39) < 0)
              operator delete(*(void **)(v13 + 16));
            MEMORY[0x1CAA32FB4](v13, 8);
          }
          v11 += 8;
        }
        while (v12 != v11);
      }
    }
    free(*(void **)(v2 + 176));
    v16 = *(void **)(v2 + 96);
    if (v16 != (void *)(v2 + 112))
      free(v16);
    v17 = *(_QWORD *)(v2 + 56);
    if (v17)
    {
      v18 = *(_QWORD *)(v2 + 64);
      v19 = *(void **)(v2 + 56);
      if (v18 != v17)
      {
        do
        {
          if (*(_DWORD *)(v18 - 20))
          {
            v20 = *(unsigned int *)(v18 - 24);
            if ((_DWORD)v20)
            {
              v21 = 0;
              v22 = 8 * v20;
              do
              {
                v23 = *(_QWORD *)(*(_QWORD *)(v18 - 32) + v21);
                if (v23 != -8 && v23 != 0)
                {
                  v25 = *(void **)(v23 + 40);
                  if (v25 != (void *)(v23 + 56))
                    free(v25);
                  if (*(char *)(v23 + 39) < 0)
                    operator delete(*(void **)(v23 + 16));
                  MEMORY[0x1CAA32FB4](v23, 8);
                }
                v21 += 8;
              }
              while (v22 != v21);
            }
          }
          free(*(void **)(v18 - 32));
          v26 = *(void **)(v18 - 112);
          if (v26 != (void *)(v18 - 96))
            free(v26);
          v18 -= 136;
        }
        while (v18 != v17);
        v19 = *(void **)(v2 + 56);
      }
      *(_QWORD *)(v2 + 64) = v17;
      operator delete(v19);
    }
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 32), 8);
    MEMORY[0x1CAA32FC0](v2, 0x10E0C400A7081E3);
  }
  return a1;
}

uint64_t sub_1C588FFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    v9 = *(_QWORD *)(a1 + 64);
  else
    v9 = *(_QWORD *)(a1 + 56) + 136 * *((unsigned int *)v5 + 2);
  return v9 + 8;
}

_QWORD *sub_1C5890054(uint64_t *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  _QWORD **i;
  _QWORD *v29;

  v5 = *((_DWORD *)a1 + 26);
  if (!v5)
  {
    *((_DWORD *)a1 + 27) = 0;
    *((_DWORD *)a1 + 28) = 0;
    v29 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v29)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v29[16] = 2;
    a1[12] = (uint64_t)v29;
    v5 = 16;
    *((_DWORD *)a1 + 26) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = a1[12];
  v11 = v5 - 1;
  v12 = v10 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 29), __n)))
    {
      goto LABEL_20;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_20:
  if (v17 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 28);
  }
  else if (v17)
  {
    return v17 + 1;
  }
  v19 = (char *)operator new(__n + 185, (std::align_val_t)8uLL);
  v20 = v19;
  if (__n)
  {
    memcpy(v19 + 184, a2, __n);
    v20[__n + 184] = 0;
    v21 = *a1;
    *(_QWORD *)v20 = __n;
    *((_QWORD *)v20 + 1) = v21;
    if (__n >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__n >= 0x17)
    {
      v24 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__n | 7) != 0x17)
        v24 = __n | 7;
      v25 = v24 + 1;
      v22 = operator new(v24 + 1);
      *((_QWORD *)v20 + 3) = __n;
      *((_QWORD *)v20 + 4) = v25 | 0x8000000000000000;
      *((_QWORD *)v20 + 2) = v22;
    }
    else
    {
      v22 = v20 + 16;
      v20[39] = __n;
    }
    memmove(v22, a2, __n);
  }
  else
  {
    v19[184] = 0;
    v23 = *a1;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = v23;
    v22 = v19 + 16;
    v19[39] = 0;
  }
  *((_BYTE *)v22 + __n) = 0;
  *((_QWORD *)v20 + 5) = v20 + 56;
  *((_QWORD *)v20 + 6) = 0x2000000000;
  *(_QWORD *)(v10 + 8 * v16) = v20;
  ++*((_DWORD *)a1 + 27);
  for (i = (_QWORD **)(a1[12]
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 12), v16)); ; ++i)
  {
    v17 = *i;
    if (*i && v17 + 1 != 0)
      break;
  }
  return v17 + 1;
}

void sub_1C58902EC(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t NamedMetadata;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t *v19;
  size_t v20;
  const void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  const void *v27;
  unint64_t v28;
  unsigned __int8 *v29;
  char *v30;
  char v31;
  size_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t *v37;
  unint64_t v38;
  const void *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  size_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void **v51;
  __int16 v52;
  _QWORD *v53;
  __int16 v54;
  _QWORD *v55;
  __int16 v56;
  _QWORD *v57[4];
  __int16 v58;
  void *v59;
  __int128 v60;
  size_t v61;
  uint64_t v62;
  int v63;
  char *v64;
  __int128 v65;
  _WORD v66[64];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v64 = "llvm.gcov";
  v66[4] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a2, (uint64_t)&v64);
  if (NamedMetadata)
  {
    v8 = *(uint64_t **)(NamedMetadata + 48);
    v9 = *((unsigned int *)v8 + 2);
    if ((_DWORD)v9)
    {
      v10 = *v8;
      do
      {
        v11 = *(unsigned int *)(*(_QWORD *)v10 + 8);
        if ((_DWORD)v11 == 3)
        {
          v12 = 2;
        }
        else
        {
          if ((_DWORD)v11 != 2)
            goto LABEL_15;
          v12 = 1;
        }
        v13 = (unsigned __int8 **)(*(_QWORD *)v10 - 8 * v11);
        v14 = v13[v12];
        switch(*v14)
        {
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
            break;
          default:
            v14 = 0;
            break;
        }
        if (v14 == (unsigned __int8 *)a3)
        {
          if ((_DWORD)v11 == 3)
          {
            if (!(**v13 | *v13[1]))
            {
              if (a4)
                v18 = v13[1];
              else
                v18 = *v13;
              v19 = (unint64_t *)*((_QWORD *)v18 + 1);
              v22 = *v19;
              v21 = v19 + 3;
              v20 = v22;
              if (v22 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_74;
              if (v20 >= 0x17)
              {
                v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v20 | 7) != 0x17)
                  v23 = v20 | 7;
                v24 = v23 + 1;
                v25 = operator new(v23 + 1);
                a1[1] = v20;
                a1[2] = v24 | 0x8000000000000000;
                *a1 = v25;
                a1 = v25;
              }
              else
              {
                *((_BYTE *)a1 + 23) = v20;
                if (!v20)
                {
LABEL_31:
                  *((_BYTE *)a1 + v20) = 0;
                  return;
                }
              }
              memmove(a1, v21, v20);
              goto LABEL_31;
            }
          }
          else if (!**v13)
          {
            v37 = (unint64_t *)*((_QWORD *)*v13 + 1);
            v40 = *v37;
            v39 = v37 + 3;
            v38 = v40;
            v64 = (char *)v66;
            v65 = xmmword_1C85F20B0;
            if (v40 >= 0x81)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v64, v66, v38, 1);
              v41 = v65;
LABEL_58:
              memcpy(&v64[v41], v39, v38);
              v42 = v65;
            }
            else
            {
              v41 = 0;
              v42 = 0;
              if (v38)
                goto LABEL_58;
            }
            v43 = v42 + v38;
            v44 = "gcda";
            *(_QWORD *)&v65 = v43;
            if (!a4)
              v44 = "gcno";
            v45 = 1;
            BYTE1(v62) = 1;
            if (*v44)
            {
              v59 = v44;
              v45 = 3;
            }
            LOBYTE(v62) = v45;
            llvm::sys::path::replace_extension((unsigned __int8 **)&v64, (const char **)&v59, 0);
            v46 = v65;
            if ((unint64_t)v65 <= 0x7FFFFFFFFFFFFFF7)
            {
              v47 = (unsigned __int8 *)v64;
              if ((unint64_t)v65 >= 0x17)
              {
                v48 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
                if (((unint64_t)v65 | 7) != 0x17)
                  v48 = v65 | 7;
                v49 = v48 + 1;
                v50 = operator new(v48 + 1);
                a1[1] = v46;
                a1[2] = v49 | 0x8000000000000000;
                *a1 = v50;
                a1 = v50;
              }
              else
              {
                *((_BYTE *)a1 + 23) = v65;
                if (!v46)
                {
LABEL_71:
                  *((_BYTE *)a1 + v46) = 0;
                  goto LABEL_53;
                }
              }
              memmove(a1, v47, v46);
              goto LABEL_71;
            }
LABEL_74:
            abort();
          }
        }
LABEL_15:
        v10 += 8;
        --v9;
      }
      while (v9);
    }
  }
  if (*(_BYTE *)a3 != 15 && (a3 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8))) == 0
    || (v15 = *(_QWORD *)(a3 - 8 * *(unsigned int *)(a3 + 8))) == 0)
  {
    v16 = 0;
    v17 = 0;
    v64 = (char *)v66;
    *((_QWORD *)&v65 + 1) = 128;
    goto LABEL_35;
  }
  v26 = *(unint64_t **)(v15 + 8);
  v28 = *v26;
  v27 = v26 + 3;
  v16 = v28;
  v64 = (char *)v66;
  v65 = xmmword_1C85F20B0;
  if (v28 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v64, v66, v16, 1);
    v29 = (unsigned __int8 *)v64;
    v17 = v65;
    goto LABEL_34;
  }
  v17 = 0;
  v29 = (unsigned __int8 *)v66;
  if (v16)
  {
LABEL_34:
    memcpy(&v29[v17], v27, v16);
    v17 = v65;
    goto LABEL_35;
  }
  v16 = 0;
LABEL_35:
  v30 = "gcda";
  *(_QWORD *)&v65 = v17 + v16;
  if (!a4)
    v30 = "gcno";
  v31 = 1;
  BYTE1(v62) = 1;
  if (*v30)
  {
    v59 = v30;
    v31 = 3;
  }
  LOBYTE(v62) = v31;
  llvm::sys::path::replace_extension((unsigned __int8 **)&v64, (const char **)&v59, 0);
  v61 = 0;
  v59 = v64;
  v60 = (unint64_t)v65;
  v62 = v65;
  v63 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)&v59);
  v33 = (_QWORD *)*((_QWORD *)&v60 + 1);
  v32 = v61;
  v59 = &v61;
  v60 = xmmword_1C85F20B0;
  if (llvm::sys::fs::current_path((uint64_t)&v59))
  {
    if (v32 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_74;
  }
  else
  {
    v58 = 261;
    v57[0] = v33;
    v57[1] = (_QWORD *)v32;
    v56 = 257;
    v54 = 257;
    v52 = 257;
    llvm::sys::path::append(&v59, 0, v57, &v55, &v53, &v51);
    v32 = v60;
    if ((unint64_t)v60 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_74;
    v33 = v59;
  }
  if (v32 >= 0x17)
  {
    v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v34 = v32 | 7;
    v35 = v34 + 1;
    v36 = operator new(v34 + 1);
    a1[1] = v32;
    a1[2] = v35 | 0x8000000000000000;
    *a1 = v36;
    a1 = v36;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v32;
    if (!v32)
      goto LABEL_51;
  }
  memmove(a1, v33, v32);
LABEL_51:
  *((_BYTE *)a1 + v32) = 0;
  if (v59 != &v61)
    free(v59);
LABEL_53:
  if (v64 != (char *)v66)
    free(v64);
}

llvm::raw_ostream *sub_1C58907FC(uint64_t a1, const char *a2, size_t a3)
{
  unsigned int v6;
  unsigned int v7;
  char v9[4];

  v6 = bswap32((a3 >> 2) + 1);
  if ((*(_DWORD *)(a1 + 56) - 1) < 2)
    v7 = (a3 >> 2) + 1;
  else
    v7 = v6;
  *(_DWORD *)v9 = v7;
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 64), v9, 4uLL);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 64), a2, a3);
  return llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 64), 4 - (a3 & 3));
}

void sub_1C5890884(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::PointerType *v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::PointerType *v15;
  int v16;
  void *v17;
  llvm::PointerType *inserted;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::PointerType *v22;
  int v23;
  llvm::PointerType *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::PointerType *v28;
  int v29;
  void *v30;
  llvm::PointerType *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::PointerType *v34;
  llvm::PointerType *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::PointerType *v38;
  llvm::PointerType *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t NamedMetadata;
  llvm::Value **v44;
  uint64_t v45;
  llvm::PointerType *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t **v50;
  unsigned int v51;
  uint64_t *v52;
  llvm::Type *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  uint64_t v59;
  llvm::Value **NullValue;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  const llvm::APInt *v64;
  __int16 v65;
  llvm::ConstantInt *v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t *v69;
  unsigned __int8 *v70;
  int v71;
  llvm::UndefValue *v72;
  llvm::Value **v73;
  uint64_t v74;
  llvm::PointerType *v75;
  char *v76;
  _QWORD *v77;
  uint64_t **v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t v81;
  llvm::PointerType *v82;
  void *v83;
  uint64_t **v84;
  llvm::PointerType *v85;
  uint64_t **v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const llvm::APInt *v90;
  _BOOL4 v92;
  llvm::ConstantAggregateZero *v93;
  llvm::PointerType *v94;
  llvm::PointerType *v95;
  const llvm::APInt *v96;
  llvm::ConstantInt *v97;
  llvm::ValueHandleBase *v98;
  uint64_t v99;
  uint64_t v100;
  llvm::ConstantAggregateZero *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  llvm::Type *v106;
  const llvm::APInt *v107;
  uint64_t v108;
  llvm::ConstantInt *v109;
  unsigned int v110;
  unint64_t v111;
  const llvm::APInt *v112;
  llvm::ValueHandleBase *v113;
  llvm::ConstantInt *v114;
  unsigned int v115;
  unint64_t v116;
  llvm::ValueHandleBase *v117;
  const llvm::APInt *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  llvm::ConstantInt *v122;
  unsigned int v123;
  unint64_t v124;
  const llvm::APInt *v125;
  llvm::ValueHandleBase *v126;
  llvm::ConstantInt *v127;
  unsigned int v128;
  unint64_t v129;
  const llvm::APInt *v130;
  llvm::ValueHandleBase *v131;
  llvm::ConstantInt *v132;
  unsigned int v133;
  unint64_t v134;
  llvm::ValueHandleBase *v135;
  const llvm::APInt *v136;
  llvm::UndefValue *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  llvm::ConstantInt *v141;
  unsigned int v142;
  unint64_t v143;
  llvm::ValueHandleBase *v144;
  llvm::UndefValue *v145;
  uint64_t v146;
  llvm::PoisonValue *v147;
  llvm::PoisonValue *v148;
  char *v149;
  uint64_t v150;
  llvm::Value **v151;
  llvm::PoisonValue *v152;
  llvm::PoisonValue *v153;
  char *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  llvm::Value **v158;
  const llvm::APInt *v159;
  llvm::ConstantInt *v160;
  unsigned int v161;
  unint64_t v162;
  llvm::GetElementPtrInst *v163;
  llvm::ValueHandleBase *v164;
  llvm::UndefValue *v165;
  uint64_t v166;
  uint64_t v167;
  llvm::ConstantInt *v168;
  const llvm::APInt *v169;
  uint64_t ***v170;
  uint64_t v171;
  llvm::ConstantInt *v172;
  const llvm::APInt *v173;
  uint64_t ***v174;
  uint64_t v175;
  llvm::ConstantInt *v176;
  llvm::ConstantInt *v177;
  uint64_t ***v178;
  uint64_t ***v179;
  llvm::ConstantInt *v180;
  unsigned int v181;
  llvm::PoisonValue *v182;
  llvm::PoisonValue *v183;
  char *v184;
  uint64_t v185;
  llvm::Value **v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  char *v206;
  char *v207;
  llvm::Value *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  unsigned __int8 **v212;
  int v213;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  unsigned __int8 *v216;
  uint64_t v217;
  const llvm::APInt *v218;
  llvm::PHINode *v219;
  llvm::ConstantInt *v220;
  llvm::ValueHandleBase *v221;
  const llvm::APInt *v222;
  llvm::ConstantInt *v223;
  llvm::ValueHandleBase *v224;
  uint64_t **v225;
  uint64_t **v226;
  uint64_t v227;
  uint64_t ***v228;
  char v229;
  char v230;
  char *v231;
  char *v232;
  llvm::Value *v233;
  uint64_t **v234;
  _QWORD *v235;
  uint64_t **v236;
  uint64_t v237;
  uint64_t ***v238;
  char v239;
  char v240;
  char *v241;
  char *v242;
  llvm::Value *v243;
  uint64_t **v244;
  _QWORD *v245;
  uint64_t **v246;
  uint64_t v247;
  uint64_t ***v248;
  char v249;
  char v250;
  char *v251;
  char *v252;
  llvm::Value *v253;
  uint64_t **v254;
  _QWORD *v255;
  uint64_t **v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t ***v260;
  char v261;
  char v262;
  char *v263;
  char *v264;
  llvm::Value *v265;
  uint64_t **v266;
  _QWORD *v267;
  uint64_t **v268;
  uint64_t v269;
  uint64_t ***v270;
  char v271;
  char v272;
  char *v273;
  char *v274;
  llvm::Value *v275;
  uint64_t **v276;
  _QWORD *v277;
  uint64_t **v278;
  uint64_t v279;
  uint64_t ***v280;
  char v281;
  char v282;
  char *v283;
  char *v284;
  llvm::Value *v285;
  uint64_t **v286;
  _QWORD *v287;
  uint64_t **v288;
  unsigned __int8 *v289;
  llvm::ConstantInt *v290;
  llvm::ValueHandleBase *v291;
  llvm::Value *v292;
  _DWORD *v293;
  _DWORD *v294;
  uint64_t v295;
  llvm::Value *v296;
  _QWORD *v297;
  char *v298;
  char *v299;
  unsigned __int8 **v300;
  int v301;
  unsigned __int8 *v302;
  unsigned __int8 *v303;
  unsigned __int8 *v304;
  uint64_t v305;
  const llvm::APInt *v306;
  _QWORD *v307;
  llvm::ConstantInt *v308;
  llvm::ValueHandleBase *v309;
  uint64_t **v310;
  uint64_t v311;
  uint64_t ***v312;
  char v313;
  char v314;
  char *v315;
  char *v316;
  llvm::Value *v317;
  uint64_t **v318;
  _QWORD *v319;
  uint64_t **v320;
  uint64_t v321;
  uint64_t ***v322;
  char v323;
  char v324;
  char *v325;
  char *v326;
  llvm::Value *v327;
  uint64_t **v328;
  _QWORD *v329;
  uint64_t **v330;
  uint64_t v331;
  uint64_t ***v332;
  char v333;
  char v334;
  char *v335;
  char *v336;
  llvm::Value *v337;
  llvm::ConstantAggregateZero *v338;
  uint64_t **v339;
  _QWORD *v340;
  uint64_t **v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  uint64_t **v345;
  llvm::GetElementPtrInst *v346;
  uint64_t v347;
  uint64_t ***v348;
  char v349;
  char v350;
  char *v351;
  char *v352;
  llvm::Value *v353;
  uint64_t **v354;
  _QWORD *v355;
  uint64_t **v356;
  uint64_t v357;
  uint64_t ***v358;
  char v359;
  char v360;
  char *v361;
  char *v362;
  llvm::Value *v363;
  uint64_t **v364;
  _QWORD *v365;
  uint64_t **v366;
  uint64_t v367;
  const llvm::APInt *v368;
  int v369;
  uint64_t v370;
  llvm::ConstantInt *v371;
  unsigned int v372;
  char v373;
  llvm::ValueHandleBase *v374;
  llvm::Value *v375;
  char *v376;
  char *v377;
  llvm::ValueHandleBase **v378;
  _QWORD *v379;
  uint64_t v380;
  uint64_t v381;
  llvm::ValueHandleBase ***v382;
  uint64_t v383;
  char *v384;
  char *v385;
  unsigned __int8 **v386;
  int v387;
  unsigned __int8 *v388;
  unsigned __int8 *v389;
  unsigned __int8 *v390;
  llvm::Value *v391;
  _DWORD *v392;
  _DWORD *v393;
  uint64_t v394;
  llvm::Value *v395;
  _QWORD *v396;
  char *v397;
  char *v398;
  unsigned __int8 **v399;
  int v400;
  unsigned __int8 *v401;
  unsigned __int8 *v402;
  unsigned __int8 *v403;
  const llvm::APInt *v404;
  llvm::ConstantInt *v405;
  unsigned int v406;
  char v407;
  llvm::ValueHandleBase *v408;
  unsigned __int8 *v409;
  llvm::Value *v410;
  llvm::ConstantInt *v411;
  unsigned int v412;
  int v413;
  llvm::ValueHandleBase *v414;
  llvm::Value *v415;
  _DWORD *v416;
  _DWORD *v417;
  uint64_t v418;
  llvm::Value *v419;
  _QWORD *v420;
  char *v421;
  char *v422;
  unsigned __int8 **v423;
  int v424;
  unsigned __int8 *v425;
  unsigned __int8 *v426;
  unsigned __int8 *v427;
  char *v428;
  char *v429;
  llvm::ValueHandleBase **v430;
  _QWORD *v431;
  uint64_t v432;
  uint64_t v433;
  llvm::ValueHandleBase ***v434;
  uint64_t v435;
  char *v436;
  char *v437;
  unsigned __int8 **v438;
  int v439;
  unsigned __int8 *v440;
  unsigned __int8 *v441;
  char *v442;
  char *v443;
  unsigned __int8 **v444;
  int v445;
  unsigned __int8 *v446;
  unsigned __int8 *v447;
  unsigned __int8 *v448;
  char *v449;
  char *v450;
  unsigned __int8 **v451;
  int v452;
  unsigned __int8 *v453;
  unsigned __int8 *v454;
  unsigned __int8 *v455;
  char *v456;
  char *v457;
  unsigned __int8 **v458;
  int v459;
  unsigned __int8 *v460;
  unsigned __int8 *v461;
  unsigned __int8 *v462;
  char *v463;
  char *v464;
  unsigned __int8 **v465;
  int v466;
  unsigned __int8 *v467;
  unsigned __int8 *v468;
  unsigned __int8 *v469;
  char *v470;
  char *v471;
  unsigned __int8 **v472;
  int v473;
  unsigned __int8 *v474;
  unsigned __int8 *v475;
  unsigned __int8 *v476;
  char *v477;
  char *v478;
  unsigned __int8 **v479;
  int v480;
  unsigned __int8 *v481;
  unsigned __int8 *v482;
  char *v483;
  char *v484;
  unsigned __int8 **v485;
  int v486;
  unsigned __int8 *v487;
  unsigned __int8 *v488;
  unsigned __int8 *v489;
  char *v490;
  char *v491;
  unsigned __int8 **v492;
  int v493;
  unsigned __int8 *v494;
  unsigned __int8 *v495;
  unsigned __int8 *v496;
  char *v497;
  char *v498;
  unsigned __int8 **v499;
  int v500;
  unsigned __int8 *v501;
  unsigned __int8 *v502;
  unsigned __int8 *v503;
  char *v504;
  char *v505;
  unsigned __int8 **v506;
  int v507;
  unsigned __int8 *v508;
  unsigned __int8 *v509;
  unsigned __int8 *v510;
  char *v511;
  char *v512;
  unsigned __int8 **v513;
  int v514;
  unsigned __int8 *v515;
  unsigned __int8 *v516;
  unsigned __int8 *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t **v521;
  uint64_t v522;
  uint64_t **v523;
  uint64_t v524;
  uint64_t **v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t *v528;
  llvm::GetElementPtrInst *v529;
  llvm::UndefValue *v530;
  unint64_t v531;
  uint64_t *v532;
  unint64_t v533;
  llvm::GetElementPtrInst *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  llvm::PHINode *v538;
  llvm::ConstantAggregateZero *v539;
  llvm::ConstantAggregateZero *v540;
  llvm::ConstantAggregateZero *v541;
  uint64_t *v542;
  llvm::BasicBlock *v543;
  uint64_t v544;
  uint64_t **v545;
  llvm::BasicBlock *v546;
  uint64_t v547;
  uint64_t **v548;
  uint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  llvm::BasicBlock *v553;
  llvm::ConstantAggregateZero *v554;
  char *v555;
  llvm::BasicBlock *v556;
  llvm::BasicBlock *v557;
  uint64_t v558;
  void *v559[2];
  char v560;
  __int16 v561;
  unsigned __int8 *v562;
  unint64_t v563;
  uint64_t ElementPtr;
  __int16 v565;
  unsigned __int8 *v566;
  llvm::Value *v567;
  llvm::Value *v568;
  const char *v569;
  llvm::ValueHandleBase *v570;
  uint64_t v571;
  uint64_t v572;
  __int16 v573;
  void *v574;
  uint64_t v575;
  _QWORD v576[2];
  __int16 v577;
  void *v578;
  uint64_t v579;
  _BYTE v580[16];
  __int16 v581;
  void *__p;
  llvm::Type *v583;
  uint64_t v584;
  uint64_t v585;
  __int16 v586;
  _QWORD v587[2];
  char *v588;
  uint64_t v589;
  _BYTE v590[16];
  __int16 v591;
  _QWORD **v592;
  _QWORD **v593;
  uint64_t v594;
  void **v595;
  _QWORD *v596;
  uint64_t v597;
  int v598;
  __int16 v599;
  char v600;
  uint64_t v601;
  uint64_t v602;
  void *v603;
  _QWORD v604[3];

  v2 = a2;
  v3 = a1;
  v604[1] = *MEMORY[0x1E0C80C00];
  v556 = *(llvm::BasicBlock **)a2;
  v550 = *(unsigned int *)(a2 + 8);
  v4 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(_QWORD **)(a1 + 144) + 1576), 0, 0, 0);
  v5 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(v3 + 104) + 112), "__llvm_gcov_writeout", 0x14uLL);
  if (!v5 || (v6 = (char *)v5, *(_BYTE *)(v5 + 16)))
    v6 = sub_1C58975F8(v3, v4, (uint64_t)"__llvm_gcov_writeout", 20);
  *((_QWORD *)v6 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v6 + 14, **(uint64_t ***)v6, -1, 27);
  v7 = *(_QWORD **)(v3 + 144);
  v588 = "entry";
  v591 = 259;
  v8 = (uint64_t **)operator new();
  *v8 = (uint64_t *)(*v7 + 1600);
  v8[1] = 0;
  v9 = *((_DWORD *)v8 + 5) & 0xC0000000;
  *((_DWORD *)v8 + 4) = 22;
  *((_DWORD *)v8 + 5) = v9;
  v8[3] = 0;
  v8[4] = 0;
  v8[5] = (uint64_t *)(v8 + 5);
  v8[6] = (uint64_t *)(v8 + 5);
  v8[7] = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v6 + 72), v8);
  v10 = (uint64_t *)*((_QWORD *)v6 + 9);
  v8[4] = (uint64_t *)(v6 + 72);
  v8[3] = v10;
  v10[1] = (uint64_t)(v8 + 3);
  *((_QWORD *)v6 + 9) = v8 + 3;
  llvm::Value::setName((uint64_t ***)v8, (uint64_t)&v588);
  v11 = **v8;
  v588 = v590;
  v589 = 0x200000000;
  v594 = v11;
  v595 = &v603;
  v596 = v604;
  v597 = 0;
  v598 = 0;
  v599 = 512;
  v600 = 7;
  v601 = 0;
  v602 = 0;
  v603 = &unk_1E8167888;
  v604[0] = &unk_1E8167A08;
  v592 = v8;
  v593 = v8 + 5;
  v12 = *(_QWORD *)(v3 + 136);
  if (!v12)
    sub_1C485C2F0();
  v13 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v12 + 48))(v12, v6);
  v583 = 0;
  __p = 0;
  v584 = 0;
  __p = (void *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(v3 + 144) + 1912), 0);
  v14 = *(_QWORD *)(v3 + 144);
  v583 = (llvm::Type *)(*(_QWORD *)v14 + 1960);
  v584 = *(_QWORD *)v14 + 1960;
  v15 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v14 + 1576), (uint64_t *)&__p, 3, 0);
  v578 = 0;
  v555 = v6;
  v542 = (uint64_t *)(v6 + 72);
  if (*(_BYTE *)(*(_QWORD *)v13 + 144))
  {
    v16 = 67;
LABEL_8:
    v17 = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v578, *(uint64_t **)(v3 + 144), 3, v16);
    v578 = v17;
    goto LABEL_9;
  }
  if (*(_BYTE *)(*(_QWORD *)v13 + 146))
  {
    v16 = 48;
    goto LABEL_8;
  }
  v17 = 0;
LABEL_9:
  inserted = llvm::Module::getOrInsertFunction(*(_QWORD *)(v3 + 104), "llvm_gcda_start_file", 0x14uLL, v15, (uint64_t)v17);
  v20 = v19;
  v583 = 0;
  __p = 0;
  v584 = 0;
  v21 = *(_QWORD *)(v3 + 144);
  __p = (void *)(*(_QWORD *)v21 + 1960);
  v583 = (llvm::Type *)(*(_QWORD *)v21 + 1960);
  v584 = *(_QWORD *)v21 + 1960;
  v22 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v21 + 1576), (uint64_t *)&__p, 3, 0);
  v578 = 0;
  if (*(_BYTE *)(*(_QWORD *)v13 + 144))
  {
    v23 = 67;
  }
  else
  {
    if (!*(_BYTE *)(*(_QWORD *)v13 + 146))
      goto LABEL_14;
    v23 = 48;
  }
  v578 = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v578, *(uint64_t **)(v3 + 144), 1, v23);
  v578 = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v578, *(uint64_t **)(v3 + 144), 2, v23);
  v578 = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v578, *(uint64_t **)(v3 + 144), 3, v23);
LABEL_14:
  v24 = llvm::Module::getOrInsertFunction(*(_QWORD *)(v3 + 104), "llvm_gcda_emit_function", 0x17uLL, v22, 0);
  v26 = v25;
  v583 = 0;
  __p = 0;
  v27 = *(_QWORD *)(v3 + 144);
  __p = (void *)(*(_QWORD *)v27 + 1960);
  v583 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v27 + 1984), 0);
  v28 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(_QWORD **)(v3 + 144) + 1576), (uint64_t *)&__p, 2, 0);
  v578 = 0;
  v548 = (uint64_t **)v24;
  v549 = v13;
  v545 = (uint64_t **)inserted;
  v547 = v26;
  v544 = v20;
  if (*(_BYTE *)(*(_QWORD *)v13 + 144))
  {
    v29 = 67;
LABEL_18:
    v30 = (void *)llvm::AttributeList::addAttributeAtIndex((uint64_t *)&v578, *(uint64_t **)(v3 + 144), 1, v29);
    v578 = v30;
    goto LABEL_19;
  }
  if (*(_BYTE *)(*(_QWORD *)v13 + 146))
  {
    v29 = 48;
    goto LABEL_18;
  }
  v30 = 0;
LABEL_19:
  v31 = llvm::Module::getOrInsertFunction(*(_QWORD *)(v3 + 104), "llvm_gcda_emit_arcs", 0x13uLL, v28, (uint64_t)v30);
  v33 = v32;
  v34 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(_QWORD **)(v3 + 144) + 1576), 0, 0, 0);
  v35 = llvm::Module::getOrInsertFunction(*(_QWORD *)(v3 + 104), "llvm_gcda_summary_info", 0x16uLL, v34, 0);
  v37 = v36;
  v38 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(_QWORD **)(v3 + 144) + 1576), 0, 0, 0);
  v39 = llvm::Module::getOrInsertFunction(*(_QWORD *)(v3 + 104), "llvm_gcda_end_file", 0x12uLL, v38, 0);
  v41 = v40;
  v42 = *(_QWORD *)(v3 + 104);
  __p = "llvm.dbg.cu";
  v586 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v42, (uint64_t)&__p);
  v558 = v3;
  if (!NamedMetadata)
  {
    LLVMBuildRetVoid_0((uint64_t *)&v588);
    goto LABEL_21;
  }
  v537 = NamedMetadata;
  v520 = v33;
  v521 = (uint64_t **)v31;
  v522 = v41;
  v523 = (uint64_t **)v39;
  __p = (void *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v594 + 1912), 0);
  v583 = (llvm::Type *)(*(_QWORD *)v594 + 1960);
  v584 = *(_QWORD *)v594 + 1960;
  v93 = (llvm::ConstantAggregateZero *)llvm::StructType::create((_QWORD ***)&__p, 3, "start_file_args_ty", 0x12uLL, 0);
  __p = (void *)(*(_QWORD *)v594 + 1960);
  v583 = (llvm::Type *)(*(_QWORD *)v594 + 1960);
  v584 = *(_QWORD *)v594 + 1960;
  v94 = (llvm::PointerType *)llvm::StructType::create((_QWORD ***)&__p, 3, "emit_function_args_ty", 0x15uLL, 0);
  __p = (void *)(*(_QWORD *)v594 + 1960);
  v583 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v594 + 1984), 0);
  v95 = (llvm::PointerType *)llvm::StructType::create((_QWORD ***)&__p, 2, "emit_arcs_args_ty", 0x11uLL, 0);
  v539 = v93;
  __p = v93;
  v583 = (llvm::Type *)(*(_QWORD *)v594 + 1960);
  v541 = v94;
  v584 = llvm::PointerType::get(v94, 0);
  v554 = v95;
  v585 = llvm::PointerType::get(v95, 0);
  v540 = (llvm::ConstantAggregateZero *)llvm::StructType::create((_QWORD ***)&__p, 4, "file_info", 9uLL, 0);
  v97 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
  LODWORD(v583) = *(_DWORD *)(*(_QWORD *)v594 + 1968) >> 8;
  v525 = (uint64_t **)v35;
  if (v583 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
  else
    __p = 0;
  v524 = v37;
  v98 = llvm::ConstantInt::get(v97, (llvm::LLVMContext *)&__p, v96);
  if (v583 >= 0x41 && __p)
    MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
  v587[0] = v98;
  v587[1] = v98;
  __p = &v584;
  v583 = (llvm::Type *)0x800000000;
  v99 = v537;
  v100 = *(int *)(*(_QWORD *)(v537 + 48) + 8);
  v101 = v541;
  if (!(_DWORD)v100)
    goto LABEL_379;
  v102 = 0;
  v527 = v2;
  v526 = *(int *)(*(_QWORD *)(v537 + 48) + 8);
  do
  {
    v103 = *(_QWORD *)(**(_QWORD **)(v99 + 48) + 8 * v102);
    if (!*(_QWORD *)(v103 + 40))
    {
      sub_1C58902EC(v559, *(_QWORD *)(v3 + 104), v103, 1);
      if (*(_DWORD *)(v3 + 80))
        v104 = *(unsigned int *)(*(_QWORD *)(v3 + 72) + 4 * (int)v102);
      else
        v104 = 0;
      if (v560 >= 0)
        v105 = (char *)v559;
      else
        v105 = (char *)v559[0];
      if (v560 >= 0)
        v106 = (llvm::Type *)(v560 & 0x7F);
      else
        v106 = (llvm::Type *)v559[1];
      v581 = 257;
      v574 = (void *)sub_1C62147C4((uint64_t)&v588, v105, v106, (uint64_t)&v578, 0, 0);
      v108 = bswap32(*(_DWORD *)(v3 + 2));
      v109 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
      v110 = *(_DWORD *)(*(_QWORD *)v594 + 1968);
      LODWORD(v570) = v110 >> 8;
      if (v110 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v569, v108, 0);
      }
      else
      {
        if (v110 <= 0xFF)
          v111 = 0;
        else
          v111 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v110);
        v569 = (const char *)(v111 & v108);
      }
      v113 = llvm::ConstantInt::get(v109, (llvm::LLVMContext *)&v569, v107);
      if (v570 >= 0x41 && v569)
        MEMORY[0x1CAA32F9C](v569, 0x1000C8000313F17);
      v575 = (uint64_t)v113;
      v114 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
      v115 = *(_DWORD *)(*(_QWORD *)v594 + 1968);
      LODWORD(v570) = v115 >> 8;
      if (v115 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v569, v104, 0);
      }
      else
      {
        if (v115 <= 0xFF)
          v116 = 0;
        else
          v116 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v115);
        v569 = (const char *)(v116 & v104);
      }
      v117 = llvm::ConstantInt::get(v114, (llvm::LLVMContext *)&v569, v112);
      if (v570 >= 0x41 && v569)
        MEMORY[0x1CAA32F9C](v569, 0x1000C8000313F17);
      v576[0] = v117;
      v530 = llvm::ConstantStruct::get(v539, (llvm::Type *)&v574, 3);
      v578 = v580;
      v579 = 0x800000000;
      v574 = v576;
      v575 = 0x800000000;
      if ((_DWORD)v550)
      {
        v119 = 0;
        v120 = 0;
        do
        {
          if (*(_DWORD *)(v3 + 160))
            v121 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 152) + (v119 >> 29)) + 24);
          else
            v121 = 0;
          v122 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
          v123 = *(_DWORD *)(*(_QWORD *)v594 + 1968);
          LODWORD(ElementPtr) = v123 >> 8;
          if (v123 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v563, v120, 0);
          }
          else
          {
            if (v123 <= 0xFF)
              LODWORD(v124) = 0;
            else
              v124 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v123);
            v563 = v124 & v120;
          }
          v126 = llvm::ConstantInt::get(v122, (llvm::LLVMContext *)&v563, v118);
          if (ElementPtr >= 0x41 && v563)
            MEMORY[0x1CAA32F9C](v563, 0x1000C8000313F17);
          v569 = (const char *)v126;
          v127 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
          v128 = *(_DWORD *)(*(_QWORD *)v594 + 1968);
          LODWORD(ElementPtr) = v128 >> 8;
          if (v128 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v563, v121, 0);
          }
          else
          {
            if (v128 <= 0xFF)
              v129 = 0;
            else
              v129 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v128);
            v563 = v129 & v121;
          }
          v131 = llvm::ConstantInt::get(v127, (llvm::LLVMContext *)&v563, v125);
          if (ElementPtr >= 0x41 && v563)
            MEMORY[0x1CAA32F9C](v563, 0x1000C8000313F17);
          v570 = v131;
          v132 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
          v133 = *(_DWORD *)(*(_QWORD *)v594 + 1968);
          LODWORD(ElementPtr) = v133 >> 8;
          if (v133 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v563, v104, 0);
          }
          else
          {
            if (v133 <= 0xFF)
              v134 = 0;
            else
              v134 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v133);
            v563 = v134 & v104;
          }
          v135 = llvm::ConstantInt::get(v132, (llvm::LLVMContext *)&v563, v130);
          if (ElementPtr >= 0x41 && v563)
            MEMORY[0x1CAA32F9C](v563, 0x1000C8000313F17);
          v571 = (uint64_t)v135;
          v137 = llvm::ConstantStruct::get(v101, (llvm::Type *)&v569, 3);
          v138 = v579;
          if (v579 >= (unint64_t)HIDWORD(v579))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v578, (uint64_t)v580, v579 + 1, 8);
            v138 = v579;
          }
          *((_QWORD *)v578 + v138) = v137;
          LODWORD(v579) = v579 + 1;
          v139 = *(_QWORD *)((char *)v556 + (v119 >> 28));
          v140 = *(unsigned int *)(*(_QWORD *)(v139 + 24) + 32);
          v141 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
          v142 = *(_DWORD *)(*(_QWORD *)v594 + 1968);
          LODWORD(v570) = v142 >> 8;
          if (v142 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v569, v140, 0);
          }
          else
          {
            if (v142 <= 0xFF)
              v143 = 0;
            else
              v143 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v142);
            v569 = (const char *)(v143 & v140);
          }
          v144 = llvm::ConstantInt::get(v141, (llvm::LLVMContext *)&v569, v136);
          if (v570 >= 0x41 && v569)
            MEMORY[0x1CAA32F9C](v569, 0x1000C8000313F17);
          v563 = (unint64_t)v144;
          ElementPtr = llvm::ConstantExpr::getGetElementPtr(*(llvm::GetElementPtrInst **)(v139 + 24), (uint64_t *)v139, (llvm::Value *)v587, 2, 1, 0, 0);
          v145 = llvm::ConstantStruct::get(v95, (llvm::Type *)&v563, 2);
          v146 = v575;
          if (v575 >= (unint64_t)HIDWORD(v575))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v574, (uint64_t)v576, v575 + 1, 8);
            v146 = v575;
          }
          v3 = v558;
          *((_QWORD *)v574 + v146) = v145;
          LODWORD(v575) = v575 + 1;
          ++v120;
          v119 += 0x100000000;
        }
        while ((int)v550 != v120);
      }
      llvm::ArrayType::get(v101, (llvm::Type *)(int)v550);
      v148 = v147;
      v149 = (char *)operator new(0x78uLL);
      *((_DWORD *)v149 + 13) = *((_DWORD *)v149 + 13) & 0x38000000 | 1;
      *(_QWORD *)v149 = 0;
      *((_QWORD *)v149 + 1) = 0;
      *((_QWORD *)v149 + 2) = 0;
      *((_QWORD *)v149 + 3) = v149 + 32;
      v150 = *(_QWORD *)(v3 + 104);
      v151 = llvm::ConstantArray::get(v148, (llvm::Type *)v578, v579);
      v569 = "__llvm_internal_gcov_emit_function_args.";
      v533 = v102 | v533 & 0xFFFFFFFF00000000;
      v571 = v533;
      v573 = 2307;
      v528 = (uint64_t *)(v149 + 32);
      v529 = v148;
      llvm::GlobalVariable::GlobalVariable((uint64_t)(v149 + 32), v150, v148, 1, 7, (uint64_t)v151, (uint64_t)&v569, 0, 0, 0, 0);
      llvm::ArrayType::get(v95, (llvm::Type *)(int)v550);
      v153 = v152;
      *((_DWORD *)v149 + 16) = *((_DWORD *)v149 + 16) & 0xFFFFFF3F | 0x80;
      v154 = (char *)operator new(0x78uLL);
      v155 = v3;
      v156 = (uint64_t *)(v154 + 32);
      *((_DWORD *)v154 + 13) = *((_DWORD *)v154 + 13) & 0x38000000 | 1;
      *(_QWORD *)v154 = 0;
      *((_QWORD *)v154 + 1) = 0;
      *((_QWORD *)v154 + 2) = 0;
      *((_QWORD *)v154 + 3) = v154 + 32;
      v157 = *(_QWORD *)(v155 + 104);
      v158 = llvm::ConstantArray::get(v153, (llvm::Type *)v574, v575);
      v569 = "__llvm_internal_gcov_emit_arcs_args.";
      v531 = v531 & 0xFFFFFFFF00000000 | v102;
      v571 = v531;
      v573 = 2307;
      llvm::GlobalVariable::GlobalVariable((uint64_t)(v154 + 32), v157, v153, 1, 7, (uint64_t)v158, (uint64_t)&v569, 0, 0, 0, 0);
      *((_DWORD *)v154 + 16) = *((_DWORD *)v154 + 16) & 0xFFFFFF3F | 0x80;
      v569 = (const char *)v530;
      v160 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
      v161 = *(_DWORD *)(*(_QWORD *)v594 + 1968);
      LODWORD(ElementPtr) = v161 >> 8;
      if (v161 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v563, v550, 0);
        v2 = v527;
        v101 = v541;
        v163 = v529;
      }
      else
      {
        v2 = v527;
        if (v161 <= 0xFF)
          v162 = 0;
        else
          v162 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v161);
        v101 = v541;
        v163 = v529;
        v563 = v162 & v550;
      }
      v164 = llvm::ConstantInt::get(v160, (llvm::LLVMContext *)&v563, v159);
      if (ElementPtr >= 0x41 && v563)
        MEMORY[0x1CAA32F9C](v563, 0x1000C8000313F17);
      v570 = v164;
      v571 = llvm::ConstantExpr::getGetElementPtr(v163, v528, (llvm::Value *)v587, 2, 1, 0, 0);
      v572 = llvm::ConstantExpr::getGetElementPtr(v153, v156, (llvm::Value *)v587, 2, 1, 0, 0);
      v165 = llvm::ConstantStruct::get(v540, (llvm::Type *)&v569, 4);
      v166 = v583;
      if (v583 >= (unint64_t)HIDWORD(v583))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, (uint64_t)&v584, v583 + 1, 8);
        v166 = v583;
      }
      v3 = v558;
      *((_QWORD *)__p + v166) = v165;
      LODWORD(v583) = (_DWORD)v583 + 1;
      if (v574 != v576)
        free(v574);
      if (v578 != v580)
        free(v578);
      if (v560 < 0)
        operator delete(v559[0]);
      v99 = v537;
      v100 = v526;
    }
    ++v102;
  }
  while (v102 != v100);
  v181 = v583;
  if (!(_DWORD)v583)
    goto LABEL_379;
  if ((v583 & 0x80000000) != 0)
  {
    sub_1C515FA1C((uint64_t)&__p, 0x7FFFFFFFuLL);
    v181 = v583;
  }
  llvm::ArrayType::get(v540, (llvm::Type *)v181);
  v183 = v182;
  v184 = (char *)operator new(0x78uLL);
  *((_DWORD *)v184 + 13) = *((_DWORD *)v184 + 13) & 0x38000000 | 1;
  *(_QWORD *)v184 = 0;
  *((_QWORD *)v184 + 1) = 0;
  *((_QWORD *)v184 + 2) = 0;
  *((_QWORD *)v184 + 3) = v184 + 32;
  v185 = *(_QWORD *)(v3 + 104);
  v186 = llvm::ConstantArray::get(v183, (llvm::Type *)__p, v583);
  v578 = "__llvm_internal_gcov_emit_file_info";
  v581 = 259;
  v532 = (uint64_t *)(v184 + 32);
  v534 = v183;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v184 + 32), v185, v183, 1, 7, (uint64_t)v186, (uint64_t)&v578, 0, 0, 0, 0);
  *((_DWORD *)v184 + 16) = *((_DWORD *)v184 + 16) & 0xFFFFFF3F | 0x80;
  v187 = *(_QWORD **)(v3 + 144);
  v578 = "file.loop.header";
  v581 = 259;
  v188 = operator new();
  *(_QWORD *)v188 = *v187 + 1600;
  *(_QWORD *)(v188 + 8) = 0;
  v189 = (_QWORD *)(v188 + 8);
  v190 = *(_DWORD *)(v188 + 20) & 0xC0000000;
  *(_DWORD *)(v188 + 16) = 22;
  *(_DWORD *)(v188 + 20) = v190;
  v191 = v188 + 40;
  *(_QWORD *)(v188 + 24) = 0;
  *(_QWORD *)(v188 + 32) = 0;
  *(_QWORD *)(v188 + 40) = v188 + 40;
  *(_QWORD *)(v188 + 48) = v188 + 40;
  *(_QWORD *)(v188 + 56) = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v542, (_QWORD *)v188);
  v192 = *v542;
  *(_QWORD *)(v188 + 32) = v542;
  *(_QWORD *)(v188 + 24) = v192;
  *(_QWORD *)(v192 + 8) = v188 + 24;
  *v542 = v188 + 24;
  llvm::Value::setName((uint64_t ***)v188, (uint64_t)&v578);
  v193 = *(_QWORD **)(v3 + 144);
  v578 = "counter.loop.header";
  v581 = 259;
  v194 = operator new();
  *(_QWORD *)v194 = *v193 + 1600;
  *(_QWORD *)(v194 + 8) = 0;
  v195 = *(_DWORD *)(v194 + 20) & 0xC0000000;
  *(_DWORD *)(v194 + 16) = 22;
  *(_DWORD *)(v194 + 20) = v195;
  *(_QWORD *)(v194 + 24) = 0;
  *(_QWORD *)(v194 + 32) = 0;
  *(_QWORD *)(v194 + 40) = v194 + 40;
  v551 = v194 + 40;
  *(_QWORD *)(v194 + 48) = v194 + 40;
  *(_QWORD *)(v194 + 56) = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v542, (_QWORD *)v194);
  v196 = *v542;
  *(_QWORD *)(v194 + 32) = v542;
  *(_QWORD *)(v194 + 24) = v196;
  *(_QWORD *)(v196 + 8) = v194 + 24;
  *v542 = v194 + 24;
  v553 = (llvm::BasicBlock *)v194;
  llvm::Value::setName((uint64_t ***)v194, (uint64_t)&v578);
  v197 = *(_QWORD **)(v3 + 144);
  v578 = "file.loop.latch";
  v581 = 259;
  v198 = operator new();
  *(_QWORD *)v198 = *v197 + 1600;
  *(_QWORD *)(v198 + 8) = 0;
  v199 = *(_DWORD *)(v198 + 20) & 0xC0000000;
  *(_DWORD *)(v198 + 16) = 22;
  *(_DWORD *)(v198 + 20) = v199;
  *(_QWORD *)(v198 + 24) = 0;
  *(_QWORD *)(v198 + 32) = 0;
  *(_QWORD *)(v198 + 40) = v198 + 40;
  v535 = v198 + 40;
  *(_QWORD *)(v198 + 48) = v198 + 40;
  *(_QWORD *)(v198 + 56) = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v542, (_QWORD *)v198);
  v200 = *v542;
  *(_QWORD *)(v198 + 32) = v542;
  *(_QWORD *)(v198 + 24) = v200;
  *(_QWORD *)(v200 + 8) = v198 + 24;
  *v542 = v198 + 24;
  v201 = v188;
  v557 = (llvm::BasicBlock *)v198;
  llvm::Value::setName((uint64_t ***)v198, (uint64_t)&v578);
  v202 = *(_QWORD **)(v3 + 144);
  v578 = "exit";
  v581 = 259;
  v203 = operator new();
  *(_QWORD *)v203 = *v202 + 1600;
  *(_QWORD *)(v203 + 8) = 0;
  v204 = *(_DWORD *)(v203 + 20) & 0xC0000000;
  *(_DWORD *)(v203 + 16) = 22;
  *(_DWORD *)(v203 + 20) = v204;
  *(_QWORD *)(v203 + 24) = 0;
  *(_QWORD *)(v203 + 32) = 0;
  *(_QWORD *)(v203 + 40) = v203 + 40;
  v536 = v203 + 40;
  *(_QWORD *)(v203 + 48) = v203 + 40;
  *(_QWORD *)(v203 + 56) = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v542, (_QWORD *)v203);
  v205 = *v542;
  *(_QWORD *)(v203 + 32) = v542;
  *(_QWORD *)(v203 + 24) = v205;
  *(_QWORD *)(v205 + 8) = v203 + 24;
  *v542 = v203 + 24;
  v543 = (llvm::BasicBlock *)v203;
  llvm::Value::setName((uint64_t ***)v203, (uint64_t)&v578);
  v206 = (char *)operator new(0x60uLL);
  v207 = v206;
  *((_DWORD *)v206 + 13) = *((_DWORD *)v206 + 13) & 0x38000000 | 1;
  *(_QWORD *)v206 = 0;
  *((_QWORD *)v206 + 2) = 0;
  *((_QWORD *)v206 + 1) = 0;
  *((_QWORD *)v206 + 4) = ***(_QWORD ***)v188 + 1576;
  v208 = (llvm::Value *)(v206 + 32);
  *((_QWORD *)v206 + 3) = v206 + 32;
  *((_QWORD *)v206 + 5) = 0;
  v206[48] = 30;
  v206[49] = 0;
  *((_WORD *)v206 + 25) = 0;
  *((_DWORD *)v206 + 13) = 1;
  *((_DWORD *)v206 + 22) = 0;
  *(_OWORD *)(v206 + 72) = 0u;
  *(_OWORD *)(v206 + 56) = 0u;
  v209 = *(_QWORD *)(v188 + 8);
  *(_QWORD *)v206 = v188;
  *((_QWORD *)v206 + 1) = v209;
  if (v209)
    *(_QWORD *)(v209 + 16) = v206 + 8;
  *((_QWORD *)v206 + 2) = v189;
  *v189 = v206;
  v581 = 257;
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v208, &v578, v592, v593);
  if ((_DWORD)v589)
  {
    v210 = v588;
    v211 = &v588[16 * v589];
    v212 = (unsigned __int8 **)(v207 + 80);
    do
    {
      v213 = *(_DWORD *)v210;
      v214 = (unsigned __int8 *)*((_QWORD *)v210 + 1);
      if (v214)
      {
        if (!v213)
        {
          v574 = (void *)*((_QWORD *)v210 + 1);
          llvm::MetadataTracking::track((uint64_t)&v574, v214, 2);
          v215 = *v212;
          goto LABEL_194;
        }
      }
      else
      {
        v215 = *v212;
        if (!*v212 && (v207[55] & 0x20) == 0)
          goto LABEL_191;
        if (!v213)
        {
          v574 = 0;
LABEL_194:
          if (v215)
            llvm::MetadataTracking::untrack((uint64_t)(v207 + 80), v215);
          v216 = (unsigned __int8 *)v574;
          *v212 = (unsigned __int8 *)v574;
          if (v216)
            llvm::MetadataTracking::retrack((uint64_t)&v574, v216, (uint64_t)(v207 + 80));
          goto LABEL_191;
        }
      }
      llvm::Value::setMetadata(v208, *(_DWORD *)v210, (llvm::MDNode *)v214);
LABEL_191:
      v210 += 16;
    }
    while (v210 != v211);
  }
  v592 = (_QWORD **)v201;
  v593 = (_QWORD **)v191;
  v217 = *(_QWORD *)v594 + 1960;
  v578 = "file_idx";
  v581 = 259;
  v219 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v588, v217, 2, (uint64_t)&v578);
  v220 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
  LODWORD(v579) = *(_DWORD *)(*(_QWORD *)v594 + 1968) >> 8;
  if (v579 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v578, 0, 0);
  else
    v578 = 0;
  v221 = llvm::ConstantInt::get(v220, (llvm::LLVMContext *)&v578, v218);
  if (v579 >= 0x41 && v578)
    MEMORY[0x1CAA32F9C](v578, 0x1000C8000313F17);
  sub_1C477667C(v219, (uint64_t)v221, (uint64_t)v8);
  v223 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
  LODWORD(v579) = *(_DWORD *)(*(_QWORD *)v594 + 1968) >> 8;
  if (v579 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v578, 0, 0);
  else
    v578 = 0;
  v224 = llvm::ConstantInt::get(v223, (llvm::LLVMContext *)&v578, v222);
  if (v579 >= 0x41 && v578)
    MEMORY[0x1CAA32F9C](v578, 0x1000C8000313F17);
  v574 = v224;
  v575 = (uint64_t)v219;
  v538 = v219;
  v581 = 257;
  v225 = (uint64_t **)sub_1C53901A0((uint64_t *)&v588, v534, v532, (llvm::Value *)&v574, 2, (uint64_t)&v578);
  v578 = "start_file_args";
  v581 = 259;
  v226 = (uint64_t **)sub_1C5391F90((uint64_t *)&v588, v540, v225, 0, 0, (uint64_t)&v578);
  v227 = **((_QWORD **)v539 + 2);
  v573 = 257;
  v228 = sub_1C5391F90((uint64_t *)&v588, v539, v226, 0, 0, (uint64_t)&v569);
  v574 = "filename";
  v577 = 259;
  llvm::DataLayout::getAlignment(v592[7][5] + 272, v227);
  v230 = v229;
  v231 = (char *)operator new(0x60uLL);
  v232 = v231;
  v233 = (llvm::Value *)(v231 + 32);
  *((_QWORD *)v231 + 2) = 0;
  *((_QWORD *)v231 + 3) = v231 + 32;
  v581 = 257;
  *((_QWORD *)v231 + 4) = v227;
  *((_QWORD *)v231 + 5) = 0;
  *((_WORD *)v231 + 24) = 60;
  *((_DWORD *)v231 + 13) = 1;
  *(_OWORD *)(v231 + 56) = 0u;
  *(_OWORD *)(v231 + 72) = 0u;
  *((_DWORD *)v231 + 22) = 0;
  *(_QWORD *)v231 = v228;
  *((_QWORD *)v231 + 1) = 0;
  if (v228)
  {
    v236 = v228[1];
    v235 = v228 + 1;
    v234 = v236;
    *((_QWORD *)v231 + 1) = v236;
    if (v236)
      v234[2] = (uint64_t *)(v231 + 8);
    *((_QWORD *)v231 + 2) = v235;
    *v235 = v231;
  }
  *((_WORD *)v231 + 25) = 2 * (v230 & 0x3F);
  v231[92] = 1;
  llvm::Value::setName((uint64_t ***)v231 + 4, (uint64_t)&v578);
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v233, &v574, v592, v593);
  if ((_DWORD)v589)
  {
    v442 = v588;
    v443 = &v588[16 * v589];
    v444 = (unsigned __int8 **)(v232 + 80);
    do
    {
      v445 = *(_DWORD *)v442;
      v446 = (unsigned __int8 *)*((_QWORD *)v442 + 1);
      if (v446)
      {
        if (!v445)
        {
          v559[0] = *((void **)v442 + 1);
          llvm::MetadataTracking::track((uint64_t)v559, v446, 2);
          v447 = *v444;
          goto LABEL_415;
        }
      }
      else
      {
        v447 = *v444;
        if (!*v444 && (v232[55] & 0x20) == 0)
          goto LABEL_412;
        if (!v445)
        {
          v559[0] = 0;
LABEL_415:
          if (v447)
            llvm::MetadataTracking::untrack((uint64_t)(v232 + 80), v447);
          v448 = (unsigned __int8 *)v559[0];
          *v444 = (unsigned __int8 *)v559[0];
          if (v448)
            llvm::MetadataTracking::retrack((uint64_t)v559, v448, (uint64_t)(v232 + 80));
          goto LABEL_412;
        }
      }
      llvm::Value::setMetadata(v233, *(_DWORD *)v442, (llvm::MDNode *)v446);
LABEL_412:
      v442 += 16;
    }
    while (v442 != v443);
  }
  v566 = (unsigned __int8 *)v233;
  v237 = *(_QWORD *)(*((_QWORD *)v539 + 2) + 8);
  v561 = 257;
  v238 = sub_1C5391F90((uint64_t *)&v588, v539, v226, 0, 1u, (uint64_t)v559);
  v574 = "version";
  v577 = 259;
  llvm::DataLayout::getAlignment(v592[7][5] + 272, v237);
  v240 = v239;
  v241 = (char *)operator new(0x60uLL);
  v242 = v241;
  v243 = (llvm::Value *)(v241 + 32);
  *((_QWORD *)v241 + 2) = 0;
  *((_QWORD *)v241 + 3) = v241 + 32;
  v581 = 257;
  *((_QWORD *)v241 + 4) = v237;
  *((_QWORD *)v241 + 5) = 0;
  *((_WORD *)v241 + 24) = 60;
  *((_DWORD *)v241 + 13) = 1;
  *(_OWORD *)(v241 + 56) = 0u;
  *(_OWORD *)(v241 + 72) = 0u;
  *((_DWORD *)v241 + 22) = 0;
  *(_QWORD *)v241 = v238;
  *((_QWORD *)v241 + 1) = 0;
  if (v238)
  {
    v246 = v238[1];
    v245 = v238 + 1;
    v244 = v246;
    *((_QWORD *)v241 + 1) = v246;
    if (v246)
      v244[2] = (uint64_t *)(v241 + 8);
    *((_QWORD *)v241 + 2) = v245;
    *v245 = v241;
  }
  *((_WORD *)v241 + 25) = 2 * (v240 & 0x3F);
  v241[92] = 1;
  llvm::Value::setName((uint64_t ***)v241 + 4, (uint64_t)&v578);
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v243, &v574, v592, v593);
  if ((_DWORD)v589)
  {
    v449 = v588;
    v450 = &v588[16 * v589];
    v451 = (unsigned __int8 **)(v242 + 80);
    do
    {
      v452 = *(_DWORD *)v449;
      v453 = (unsigned __int8 *)*((_QWORD *)v449 + 1);
      if (v453)
      {
        if (!v452)
        {
          v563 = *((_QWORD *)v449 + 1);
          llvm::MetadataTracking::track((uint64_t)&v563, v453, 2);
          v454 = *v451;
          goto LABEL_430;
        }
      }
      else
      {
        v454 = *v451;
        if (!*v451 && (v242[55] & 0x20) == 0)
          goto LABEL_427;
        if (!v452)
        {
          v563 = 0;
LABEL_430:
          if (v454)
            llvm::MetadataTracking::untrack((uint64_t)(v242 + 80), v454);
          v455 = (unsigned __int8 *)v563;
          *v451 = (unsigned __int8 *)v563;
          if (v455)
            llvm::MetadataTracking::retrack((uint64_t)&v563, v455, (uint64_t)(v242 + 80));
          goto LABEL_427;
        }
      }
      llvm::Value::setMetadata(v243, *(_DWORD *)v449, (llvm::MDNode *)v453);
LABEL_427:
      v449 += 16;
    }
    while (v449 != v450);
  }
  v567 = v243;
  v247 = *(_QWORD *)(*((_QWORD *)v539 + 2) + 16);
  v565 = 257;
  v248 = sub_1C5391F90((uint64_t *)&v588, v539, v226, 0, 2u, (uint64_t)&v563);
  v574 = "stamp";
  v577 = 259;
  llvm::DataLayout::getAlignment(v592[7][5] + 272, v247);
  v250 = v249;
  v251 = (char *)operator new(0x60uLL);
  v252 = v251;
  v253 = (llvm::Value *)(v251 + 32);
  *((_QWORD *)v251 + 2) = 0;
  *((_QWORD *)v251 + 3) = v251 + 32;
  v581 = 257;
  *((_QWORD *)v251 + 4) = v247;
  *((_QWORD *)v251 + 5) = 0;
  *((_WORD *)v251 + 24) = 60;
  *((_DWORD *)v251 + 13) = 1;
  *(_OWORD *)(v251 + 56) = 0u;
  *(_OWORD *)(v251 + 72) = 0u;
  *((_DWORD *)v251 + 22) = 0;
  *(_QWORD *)v251 = v248;
  *((_QWORD *)v251 + 1) = 0;
  if (v248)
  {
    v256 = v248[1];
    v255 = v248 + 1;
    v254 = v256;
    *((_QWORD *)v251 + 1) = v256;
    if (v256)
      v254[2] = (uint64_t *)(v251 + 8);
    *((_QWORD *)v251 + 2) = v255;
    *v255 = v251;
  }
  *((_WORD *)v251 + 25) = 2 * (v250 & 0x3F);
  v251[92] = 1;
  llvm::Value::setName((uint64_t ***)v251 + 4, (uint64_t)&v578);
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v253, &v574, v592, v593);
  if ((_DWORD)v589)
  {
    v456 = v588;
    v457 = &v588[16 * v589];
    v458 = (unsigned __int8 **)(v252 + 80);
    do
    {
      v459 = *(_DWORD *)v456;
      v460 = (unsigned __int8 *)*((_QWORD *)v456 + 1);
      if (v460)
      {
        if (!v459)
        {
          v562 = (unsigned __int8 *)*((_QWORD *)v456 + 1);
          llvm::MetadataTracking::track((uint64_t)&v562, v460, 2);
          v461 = *v458;
          goto LABEL_445;
        }
      }
      else
      {
        v461 = *v458;
        if (!*v458 && (v252[55] & 0x20) == 0)
          goto LABEL_442;
        if (!v459)
        {
          v562 = 0;
LABEL_445:
          if (v461)
            llvm::MetadataTracking::untrack((uint64_t)(v252 + 80), v461);
          v462 = v562;
          *v458 = v562;
          if (v462)
            llvm::MetadataTracking::retrack((uint64_t)&v562, v462, (uint64_t)(v252 + 80));
          goto LABEL_442;
        }
      }
      llvm::Value::setMetadata(v253, *(_DWORD *)v456, (llvm::MDNode *)v460);
LABEL_442:
      v456 += 16;
    }
    while (v456 != v457);
  }
  v568 = v253;
  v581 = 257;
  v257 = sub_1C4774778((uint64_t *)&v588, v545, v544, (uint64_t *)&v566, 3, (uint64_t)&v578, 0);
  if (*(_BYTE *)(*(_QWORD *)v549 + 144))
  {
    v258 = 67;
  }
  else
  {
    if (!*(_BYTE *)(*(_QWORD *)v549 + 146))
      goto LABEL_224;
    v258 = 48;
  }
  *(_QWORD *)(v257 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v257 + 64), **(uint64_t ***)v257, 3, v258);
LABEL_224:
  v259 = *(_QWORD *)(*((_QWORD *)v540 + 2) + 8);
  v573 = 257;
  v260 = sub_1C5391F90((uint64_t *)&v588, v540, v225, 0, 1u, (uint64_t)&v569);
  v574 = "num_ctrs";
  v577 = 259;
  llvm::DataLayout::getAlignment(v592[7][5] + 272, v259);
  v262 = v261;
  v263 = (char *)operator new(0x60uLL);
  v264 = v263;
  v265 = (llvm::Value *)(v263 + 32);
  *((_QWORD *)v263 + 2) = 0;
  *((_QWORD *)v263 + 3) = v263 + 32;
  v581 = 257;
  *((_QWORD *)v263 + 4) = v259;
  *((_QWORD *)v263 + 5) = 0;
  *((_WORD *)v263 + 24) = 60;
  *((_DWORD *)v263 + 13) = 1;
  *(_OWORD *)(v263 + 56) = 0u;
  *(_OWORD *)(v263 + 72) = 0u;
  *((_DWORD *)v263 + 22) = 0;
  *(_QWORD *)v263 = v260;
  *((_QWORD *)v263 + 1) = 0;
  if (v260)
  {
    v268 = v260[1];
    v267 = v260 + 1;
    v266 = v268;
    *((_QWORD *)v263 + 1) = v268;
    if (v268)
      v266[2] = (uint64_t *)(v263 + 8);
    *((_QWORD *)v263 + 2) = v267;
    *v267 = v263;
  }
  *((_WORD *)v263 + 25) = 2 * (v262 & 0x3F);
  v263[92] = 1;
  llvm::Value::setName((uint64_t ***)v263 + 4, (uint64_t)&v578);
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v265, &v574, v592, v593);
  if ((_DWORD)v589)
  {
    v463 = v588;
    v464 = &v588[16 * v589];
    v465 = (unsigned __int8 **)(v264 + 80);
    do
    {
      v466 = *(_DWORD *)v463;
      v467 = (unsigned __int8 *)*((_QWORD *)v463 + 1);
      if (v467)
      {
        if (!v466)
        {
          v559[0] = *((void **)v463 + 1);
          llvm::MetadataTracking::track((uint64_t)v559, v467, 2);
          v468 = *v465;
          goto LABEL_460;
        }
      }
      else
      {
        v468 = *v465;
        if (!*v465 && (v264[55] & 0x20) == 0)
          goto LABEL_457;
        if (!v466)
        {
          v559[0] = 0;
LABEL_460:
          if (v468)
            llvm::MetadataTracking::untrack((uint64_t)(v264 + 80), v468);
          v469 = (unsigned __int8 *)v559[0];
          *v465 = (unsigned __int8 *)v559[0];
          if (v469)
            llvm::MetadataTracking::retrack((uint64_t)v559, v469, (uint64_t)(v264 + 80));
          goto LABEL_457;
        }
      }
      llvm::Value::setMetadata(v265, *(_DWORD *)v463, (llvm::MDNode *)v467);
LABEL_457:
      v463 += 16;
    }
    while (v463 != v464);
  }
  v269 = *(_QWORD *)(*((_QWORD *)v540 + 2) + 16);
  v573 = 257;
  v270 = sub_1C5391F90((uint64_t *)&v588, v540, v225, 0, 2u, (uint64_t)&v569);
  v574 = "emit_function_args";
  v577 = 259;
  llvm::DataLayout::getAlignment(v592[7][5] + 272, v269);
  v272 = v271;
  v273 = (char *)operator new(0x60uLL);
  v274 = v273;
  v275 = (llvm::Value *)(v273 + 32);
  *((_QWORD *)v273 + 2) = 0;
  *((_QWORD *)v273 + 3) = v273 + 32;
  v581 = 257;
  *((_QWORD *)v273 + 4) = v269;
  *((_QWORD *)v273 + 5) = 0;
  *((_WORD *)v273 + 24) = 60;
  *((_DWORD *)v273 + 13) = 1;
  *(_OWORD *)(v273 + 56) = 0u;
  *(_OWORD *)(v273 + 72) = 0u;
  *((_DWORD *)v273 + 22) = 0;
  *(_QWORD *)v273 = v270;
  *((_QWORD *)v273 + 1) = 0;
  if (v270)
  {
    v278 = v270[1];
    v277 = v270 + 1;
    v276 = v278;
    *((_QWORD *)v273 + 1) = v278;
    if (v278)
      v276[2] = (uint64_t *)(v273 + 8);
    *((_QWORD *)v273 + 2) = v277;
    *v277 = v273;
  }
  *((_WORD *)v273 + 25) = 2 * (v272 & 0x3F);
  v273[92] = 1;
  llvm::Value::setName((uint64_t ***)v273 + 4, (uint64_t)&v578);
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v275, &v574, v592, v593);
  if ((_DWORD)v589)
  {
    v470 = v588;
    v471 = &v588[16 * v589];
    v472 = (unsigned __int8 **)(v274 + 80);
    do
    {
      v473 = *(_DWORD *)v470;
      v474 = (unsigned __int8 *)*((_QWORD *)v470 + 1);
      if (v474)
      {
        if (!v473)
        {
          v559[0] = *((void **)v470 + 1);
          llvm::MetadataTracking::track((uint64_t)v559, v474, 2);
          v475 = *v472;
          goto LABEL_475;
        }
      }
      else
      {
        v475 = *v472;
        if (!*v472 && (v274[55] & 0x20) == 0)
          goto LABEL_472;
        if (!v473)
        {
          v559[0] = 0;
LABEL_475:
          if (v475)
            llvm::MetadataTracking::untrack((uint64_t)(v274 + 80), v475);
          v476 = (unsigned __int8 *)v559[0];
          *v472 = (unsigned __int8 *)v559[0];
          if (v476)
            llvm::MetadataTracking::retrack((uint64_t)v559, v476, (uint64_t)(v274 + 80));
          goto LABEL_472;
        }
      }
      llvm::Value::setMetadata(v275, *(_DWORD *)v470, (llvm::MDNode *)v474);
LABEL_472:
      v470 += 16;
    }
    while (v470 != v471);
  }
  v279 = *(_QWORD *)(*((_QWORD *)v540 + 2) + 24);
  v573 = 257;
  v280 = sub_1C5391F90((uint64_t *)&v588, v540, v225, 0, 3u, (uint64_t)&v569);
  v574 = "emit_arcs_args";
  v577 = 259;
  llvm::DataLayout::getAlignment(v592[7][5] + 272, v279);
  v282 = v281;
  v283 = (char *)operator new(0x60uLL);
  v284 = v283;
  v285 = (llvm::Value *)(v283 + 32);
  *((_QWORD *)v283 + 2) = 0;
  *((_QWORD *)v283 + 3) = v283 + 32;
  v581 = 257;
  *((_QWORD *)v283 + 4) = v279;
  *((_QWORD *)v283 + 5) = 0;
  *((_WORD *)v283 + 24) = 60;
  *((_DWORD *)v283 + 13) = 1;
  *(_OWORD *)(v283 + 56) = 0u;
  *(_OWORD *)(v283 + 72) = 0u;
  *((_DWORD *)v283 + 22) = 0;
  *(_QWORD *)v283 = v280;
  *((_QWORD *)v283 + 1) = 0;
  if (v280)
  {
    v288 = v280[1];
    v287 = v280 + 1;
    v286 = v288;
    *((_QWORD *)v283 + 1) = v288;
    if (v288)
      v286[2] = (uint64_t *)(v283 + 8);
    *((_QWORD *)v283 + 2) = v287;
    *v287 = v283;
  }
  *((_WORD *)v283 + 25) = 2 * (v282 & 0x3F);
  v283[92] = 1;
  llvm::Value::setName((uint64_t ***)v283 + 4, (uint64_t)&v578);
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v285, &v574, v592, v593);
  if ((_DWORD)v589)
  {
    v477 = v588;
    v478 = &v588[16 * v589];
    v479 = (unsigned __int8 **)(v284 + 80);
    do
    {
      v480 = *(_DWORD *)v477;
      v289 = (unsigned __int8 *)*((_QWORD *)v477 + 1);
      if (v289)
      {
        if (!v480)
        {
          v559[0] = *((void **)v477 + 1);
          llvm::MetadataTracking::track((uint64_t)v559, v289, 2);
          v481 = *v479;
          goto LABEL_490;
        }
      }
      else
      {
        v481 = *v479;
        if (!*v479 && (v284[55] & 0x20) == 0)
          goto LABEL_487;
        if (!v480)
        {
          v559[0] = 0;
LABEL_490:
          if (v481)
            llvm::MetadataTracking::untrack((uint64_t)(v284 + 80), v481);
          v482 = (unsigned __int8 *)v559[0];
          *v479 = (unsigned __int8 *)v559[0];
          if (v482)
            llvm::MetadataTracking::retrack((uint64_t)v559, v482, (uint64_t)(v284 + 80));
          goto LABEL_487;
        }
      }
      llvm::Value::setMetadata(v285, *(_DWORD *)v477, (llvm::MDNode *)v289);
LABEL_487:
      v477 += 16;
    }
    while (v477 != v478);
  }
  v290 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
  LODWORD(v579) = *(_DWORD *)(*(_QWORD *)v594 + 1968) >> 8;
  if (v579 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v578, 0, 0);
  else
    v578 = 0;
  v291 = llvm::ConstantInt::get(v290, (llvm::LLVMContext *)&v578, (const llvm::APInt *)v289);
  if (v579 >= 0x41 && v578)
    MEMORY[0x1CAA32F9C](v578, 0x1000C8000313F17);
  v581 = 257;
  v292 = (llvm::Value *)sub_1C4774B48((uint64_t)&v588, 40, (uint64_t)v291, (uint64_t)v265, (uint64_t)&v578);
  v293 = operator new(0xA0uLL);
  v294 = v293;
  v295 = 0;
  v296 = (llvm::Value *)(v293 + 24);
  v293[29] = v293[29] & 0x38000000 | 3;
  do
  {
    v297 = &v293[v295];
    *v297 = 0;
    v297[1] = 0;
    v297[2] = 0;
    v297[3] = v296;
    v295 += 8;
  }
  while (v295 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v293 + 24), v553, v557, v292, 0);
  v581 = 257;
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v296, &v578, v592, v593);
  if ((_DWORD)v589)
  {
    v298 = v588;
    v299 = &v588[16 * v589];
    v300 = (unsigned __int8 **)(v294 + 36);
    do
    {
      v301 = *(_DWORD *)v298;
      v302 = (unsigned __int8 *)*((_QWORD *)v298 + 1);
      if (v302)
      {
        if (!v301)
        {
          v574 = (void *)*((_QWORD *)v298 + 1);
          llvm::MetadataTracking::track((uint64_t)&v574, v302, 2);
          v303 = *v300;
          goto LABEL_256;
        }
      }
      else
      {
        v303 = *v300;
        if (!*v300 && (*((_BYTE *)v294 + 119) & 0x20) == 0)
          goto LABEL_253;
        if (!v301)
        {
          v574 = 0;
LABEL_256:
          if (v303)
            llvm::MetadataTracking::untrack((uint64_t)(v294 + 36), v303);
          v304 = (unsigned __int8 *)v574;
          *v300 = (unsigned __int8 *)v574;
          if (v304)
            llvm::MetadataTracking::retrack((uint64_t)&v574, v304, (uint64_t)(v294 + 36));
          goto LABEL_253;
        }
      }
      llvm::Value::setMetadata(v296, *(_DWORD *)v298, (llvm::MDNode *)v302);
LABEL_253:
      v298 += 16;
    }
    while (v298 != v299);
  }
  v592 = (_QWORD **)v553;
  v593 = (_QWORD **)v551;
  v305 = *(_QWORD *)v594 + 1960;
  v578 = "ctr_idx";
  v581 = 259;
  v307 = (_QWORD *)sub_1C4867E94((uint64_t)&v588, v305, 2, (uint64_t)&v578);
  v308 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
  LODWORD(v579) = *(_DWORD *)(*(_QWORD *)v594 + 1968) >> 8;
  if (v579 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v578, 0, 0);
  else
    v578 = 0;
  v552 = (unint64_t)v265;
  v309 = llvm::ConstantInt::get(v308, (llvm::LLVMContext *)&v578, v306);
  if (v579 >= 0x41 && v578)
    MEMORY[0x1CAA32F9C](v578, 0x1000C8000313F17);
  v546 = (llvm::BasicBlock *)v201;
  sub_1C477667C((llvm::PHINode *)v307, (uint64_t)v309, v201);
  v581 = 257;
  v310 = (uint64_t **)sub_1C5098FF4((uint64_t *)&v588, v541, (uint64_t *)v275, (uint64_t)v307, (uint64_t)&v578);
  v311 = **((_QWORD **)v541 + 2);
  v573 = 257;
  v312 = sub_1C5391F90((uint64_t *)&v588, v541, v310, 0, 0, (uint64_t)&v569);
  v574 = "ident";
  v577 = 259;
  llvm::DataLayout::getAlignment(v592[7][5] + 272, v311);
  v314 = v313;
  v315 = (char *)operator new(0x60uLL);
  v316 = v315;
  v317 = (llvm::Value *)(v315 + 32);
  *((_QWORD *)v315 + 2) = 0;
  *((_QWORD *)v315 + 3) = v315 + 32;
  v581 = 257;
  *((_QWORD *)v315 + 4) = v311;
  *((_QWORD *)v315 + 5) = 0;
  *((_WORD *)v315 + 24) = 60;
  *((_DWORD *)v315 + 13) = 1;
  *(_OWORD *)(v315 + 56) = 0u;
  *(_OWORD *)(v315 + 72) = 0u;
  *((_DWORD *)v315 + 22) = 0;
  *(_QWORD *)v315 = v312;
  *((_QWORD *)v315 + 1) = 0;
  if (v312)
  {
    v320 = v312[1];
    v319 = v312 + 1;
    v318 = v320;
    *((_QWORD *)v315 + 1) = v320;
    if (v320)
      v318[2] = (uint64_t *)(v315 + 8);
    *((_QWORD *)v315 + 2) = v319;
    *v319 = v315;
  }
  *((_WORD *)v315 + 25) = 2 * (v314 & 0x3F);
  v315[92] = 1;
  llvm::Value::setName((uint64_t ***)v315 + 4, (uint64_t)&v578);
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v317, &v574, v592, v593);
  if ((_DWORD)v589)
  {
    v483 = v588;
    v484 = &v588[16 * v589];
    v485 = (unsigned __int8 **)(v316 + 80);
    do
    {
      v486 = *(_DWORD *)v483;
      v487 = (unsigned __int8 *)*((_QWORD *)v483 + 1);
      if (v487)
      {
        if (!v486)
        {
          v559[0] = *((void **)v483 + 1);
          llvm::MetadataTracking::track((uint64_t)v559, v487, 2);
          v488 = *v485;
          goto LABEL_505;
        }
      }
      else
      {
        v488 = *v485;
        if (!*v485 && (v316[55] & 0x20) == 0)
          goto LABEL_502;
        if (!v486)
        {
          v559[0] = 0;
LABEL_505:
          if (v488)
            llvm::MetadataTracking::untrack((uint64_t)(v316 + 80), v488);
          v489 = (unsigned __int8 *)v559[0];
          *v485 = (unsigned __int8 *)v559[0];
          if (v489)
            llvm::MetadataTracking::retrack((uint64_t)v559, v489, (uint64_t)(v316 + 80));
          goto LABEL_502;
        }
      }
      llvm::Value::setMetadata(v317, *(_DWORD *)v483, (llvm::MDNode *)v487);
LABEL_502:
      v483 += 16;
    }
    while (v483 != v484);
  }
  v566 = (unsigned __int8 *)v317;
  v321 = *(_QWORD *)(*((_QWORD *)v541 + 2) + 8);
  v561 = 257;
  v322 = sub_1C5391F90((uint64_t *)&v588, v541, v310, 0, 1u, (uint64_t)v559);
  v574 = "func_checkssum";
  v577 = 259;
  llvm::DataLayout::getAlignment(v592[7][5] + 272, v321);
  v324 = v323;
  v325 = (char *)operator new(0x60uLL);
  v326 = v325;
  v327 = (llvm::Value *)(v325 + 32);
  *((_QWORD *)v325 + 2) = 0;
  *((_QWORD *)v325 + 3) = v325 + 32;
  v581 = 257;
  *((_QWORD *)v325 + 4) = v321;
  *((_QWORD *)v325 + 5) = 0;
  *((_WORD *)v325 + 24) = 60;
  *((_DWORD *)v325 + 13) = 1;
  *(_OWORD *)(v325 + 56) = 0u;
  *(_OWORD *)(v325 + 72) = 0u;
  *((_DWORD *)v325 + 22) = 0;
  *(_QWORD *)v325 = v322;
  *((_QWORD *)v325 + 1) = 0;
  if (v322)
  {
    v330 = v322[1];
    v329 = v322 + 1;
    v328 = v330;
    *((_QWORD *)v325 + 1) = v330;
    if (v330)
      v328[2] = (uint64_t *)(v325 + 8);
    *((_QWORD *)v325 + 2) = v329;
    *v329 = v325;
  }
  *((_WORD *)v325 + 25) = 2 * (v324 & 0x3F);
  v325[92] = 1;
  llvm::Value::setName((uint64_t ***)v325 + 4, (uint64_t)&v578);
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v327, &v574, v592, v593);
  if ((_DWORD)v589)
  {
    v490 = v588;
    v491 = &v588[16 * v589];
    v492 = (unsigned __int8 **)(v326 + 80);
    do
    {
      v493 = *(_DWORD *)v490;
      v494 = (unsigned __int8 *)*((_QWORD *)v490 + 1);
      if (v494)
      {
        if (!v493)
        {
          v563 = *((_QWORD *)v490 + 1);
          llvm::MetadataTracking::track((uint64_t)&v563, v494, 2);
          v495 = *v492;
          goto LABEL_520;
        }
      }
      else
      {
        v495 = *v492;
        if (!*v492 && (v326[55] & 0x20) == 0)
          goto LABEL_517;
        if (!v493)
        {
          v563 = 0;
LABEL_520:
          if (v495)
            llvm::MetadataTracking::untrack((uint64_t)(v326 + 80), v495);
          v496 = (unsigned __int8 *)v563;
          *v492 = (unsigned __int8 *)v563;
          if (v496)
            llvm::MetadataTracking::retrack((uint64_t)&v563, v496, (uint64_t)(v326 + 80));
          goto LABEL_517;
        }
      }
      llvm::Value::setMetadata(v327, *(_DWORD *)v490, (llvm::MDNode *)v494);
LABEL_517:
      v490 += 16;
    }
    while (v490 != v491);
  }
  v567 = v327;
  v331 = *(_QWORD *)(*((_QWORD *)v541 + 2) + 16);
  v565 = 257;
  v332 = sub_1C5391F90((uint64_t *)&v588, v541, v310, 0, 2u, (uint64_t)&v563);
  v574 = "cfg_checksum";
  v577 = 259;
  llvm::DataLayout::getAlignment(v592[7][5] + 272, v331);
  v334 = v333;
  v335 = (char *)operator new(0x60uLL);
  v336 = v335;
  v337 = (llvm::Value *)(v335 + 32);
  *((_QWORD *)v335 + 2) = 0;
  *((_QWORD *)v335 + 3) = v335 + 32;
  v581 = 257;
  *((_QWORD *)v335 + 4) = v331;
  *((_QWORD *)v335 + 5) = 0;
  *((_WORD *)v335 + 24) = 60;
  *((_DWORD *)v335 + 13) = 1;
  *(_OWORD *)(v335 + 56) = 0u;
  *(_OWORD *)(v335 + 72) = 0u;
  *((_DWORD *)v335 + 22) = 0;
  *(_QWORD *)v335 = v332;
  *((_QWORD *)v335 + 1) = 0;
  v338 = v554;
  if (v332)
  {
    v341 = v332[1];
    v340 = v332 + 1;
    v339 = v341;
    *((_QWORD *)v335 + 1) = v341;
    if (v341)
      v339[2] = (uint64_t *)(v335 + 8);
    *((_QWORD *)v335 + 2) = v340;
    *v340 = v335;
  }
  *((_WORD *)v335 + 25) = 2 * (v334 & 0x3F);
  v335[92] = 1;
  llvm::Value::setName((uint64_t ***)v335 + 4, (uint64_t)&v578);
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v337, &v574, v592, v593);
  if ((_DWORD)v589)
  {
    v497 = v588;
    v498 = &v588[16 * v589];
    v499 = (unsigned __int8 **)(v336 + 80);
    do
    {
      v500 = *(_DWORD *)v497;
      v501 = (unsigned __int8 *)*((_QWORD *)v497 + 1);
      if (v501)
      {
        if (!v500)
        {
          v562 = (unsigned __int8 *)*((_QWORD *)v497 + 1);
          llvm::MetadataTracking::track((uint64_t)&v562, v501, 2);
          v502 = *v499;
          goto LABEL_535;
        }
      }
      else
      {
        v502 = *v499;
        if (!*v499 && (v336[55] & 0x20) == 0)
          goto LABEL_532;
        if (!v500)
        {
          v562 = 0;
LABEL_535:
          if (v502)
            llvm::MetadataTracking::untrack((uint64_t)(v336 + 80), v502);
          v503 = v562;
          *v499 = v562;
          if (v503)
            llvm::MetadataTracking::retrack((uint64_t)&v562, v503, (uint64_t)(v336 + 80));
          goto LABEL_532;
        }
      }
      llvm::Value::setMetadata(v337, *(_DWORD *)v497, (llvm::MDNode *)v501);
LABEL_532:
      v497 += 16;
    }
    while (v497 != v498);
  }
  v568 = v337;
  v581 = 257;
  v342 = sub_1C4774778((uint64_t *)&v588, v548, v547, (uint64_t *)&v566, 3, (uint64_t)&v578, 0);
  v343 = v342;
  if (*(_BYTE *)(*(_QWORD *)v549 + 144))
  {
    v344 = 67;
  }
  else
  {
    if (!*(_BYTE *)(*(_QWORD *)v549 + 146))
      goto LABEL_283;
    v344 = 48;
  }
  *(_QWORD *)(v342 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v342 + 64), **(uint64_t ***)v342, 1, v344);
  *(_QWORD *)(v343 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v343 + 64), **(uint64_t ***)v343, 2, v344);
  *(_QWORD *)(v343 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v343 + 64), **(uint64_t ***)v343, 3, v344);
  v338 = v554;
LABEL_283:
  v581 = 257;
  v345 = (uint64_t **)sub_1C5098FF4((uint64_t *)&v588, v338, (uint64_t *)v285, (uint64_t)v307, (uint64_t)&v578);
  v346 = v338;
  v347 = **((_QWORD **)v338 + 2);
  v573 = 257;
  v348 = sub_1C5391F90((uint64_t *)&v588, v346, v345, 0, 0, (uint64_t)&v569);
  v574 = "num_counters";
  v577 = 259;
  llvm::DataLayout::getAlignment(v592[7][5] + 272, v347);
  v350 = v349;
  v351 = (char *)operator new(0x60uLL);
  v352 = v351;
  v353 = (llvm::Value *)(v351 + 32);
  *((_QWORD *)v351 + 2) = 0;
  *((_QWORD *)v351 + 3) = v351 + 32;
  v581 = 257;
  *((_QWORD *)v351 + 4) = v347;
  *((_QWORD *)v351 + 5) = 0;
  *((_WORD *)v351 + 24) = 60;
  *((_DWORD *)v351 + 13) = 1;
  *(_OWORD *)(v351 + 56) = 0u;
  *(_OWORD *)(v351 + 72) = 0u;
  *((_DWORD *)v351 + 22) = 0;
  *(_QWORD *)v351 = v348;
  *((_QWORD *)v351 + 1) = 0;
  if (v348)
  {
    v356 = v348[1];
    v355 = v348 + 1;
    v354 = v356;
    *((_QWORD *)v351 + 1) = v356;
    if (v356)
      v354[2] = (uint64_t *)(v351 + 8);
    *((_QWORD *)v351 + 2) = v355;
    *v355 = v351;
  }
  *((_WORD *)v351 + 25) = 2 * (v350 & 0x3F);
  v351[92] = 1;
  llvm::Value::setName((uint64_t ***)v351 + 4, (uint64_t)&v578);
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v353, &v574, v592, v593);
  v3 = v558;
  if ((_DWORD)v589)
  {
    v504 = v588;
    v505 = &v588[16 * v589];
    v506 = (unsigned __int8 **)(v352 + 80);
    do
    {
      v507 = *(_DWORD *)v504;
      v508 = (unsigned __int8 *)*((_QWORD *)v504 + 1);
      if (v508)
      {
        if (!v507)
        {
          v559[0] = *((void **)v504 + 1);
          llvm::MetadataTracking::track((uint64_t)v559, v508, 2);
          v509 = *v506;
          goto LABEL_550;
        }
      }
      else
      {
        v509 = *v506;
        if (!*v506 && (v352[55] & 0x20) == 0)
          goto LABEL_547;
        if (!v507)
        {
          v559[0] = 0;
LABEL_550:
          if (v509)
            llvm::MetadataTracking::untrack((uint64_t)(v352 + 80), v509);
          v510 = (unsigned __int8 *)v559[0];
          *v506 = (unsigned __int8 *)v559[0];
          if (v510)
            llvm::MetadataTracking::retrack((uint64_t)v559, v510, (uint64_t)(v352 + 80));
          goto LABEL_547;
        }
      }
      llvm::Value::setMetadata(v353, *(_DWORD *)v504, (llvm::MDNode *)v508);
LABEL_547:
      v504 += 16;
    }
    while (v504 != v505);
  }
  v563 = (unint64_t)v353;
  v357 = *(_QWORD *)(*((_QWORD *)v554 + 2) + 8);
  v561 = 257;
  v358 = sub_1C5391F90((uint64_t *)&v588, v554, v345, 0, 1u, (uint64_t)v559);
  v574 = "counters";
  v577 = 259;
  llvm::DataLayout::getAlignment(v592[7][5] + 272, v357);
  v360 = v359;
  v361 = (char *)operator new(0x60uLL);
  v362 = v361;
  v363 = (llvm::Value *)(v361 + 32);
  *((_QWORD *)v361 + 2) = 0;
  *((_QWORD *)v361 + 3) = v361 + 32;
  v581 = 257;
  *((_QWORD *)v361 + 4) = v357;
  *((_QWORD *)v361 + 5) = 0;
  *((_WORD *)v361 + 24) = 60;
  *((_DWORD *)v361 + 13) = 1;
  *(_OWORD *)(v361 + 56) = 0u;
  *(_OWORD *)(v361 + 72) = 0u;
  *((_DWORD *)v361 + 22) = 0;
  *(_QWORD *)v361 = v358;
  *((_QWORD *)v361 + 1) = 0;
  if (v358)
  {
    v366 = v358[1];
    v365 = v358 + 1;
    v364 = v366;
    *((_QWORD *)v361 + 1) = v366;
    if (v366)
      v364[2] = (uint64_t *)(v361 + 8);
    *((_QWORD *)v361 + 2) = v365;
    *v365 = v361;
  }
  *((_WORD *)v361 + 25) = 2 * (v360 & 0x3F);
  v361[92] = 1;
  llvm::Value::setName((uint64_t ***)v361 + 4, (uint64_t)&v578);
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v363, &v574, v592, v593);
  if ((_DWORD)v589)
  {
    v511 = v588;
    v512 = &v588[16 * v589];
    v513 = (unsigned __int8 **)(v362 + 80);
    do
    {
      v514 = *(_DWORD *)v511;
      v515 = (unsigned __int8 *)*((_QWORD *)v511 + 1);
      if (v515)
      {
        if (!v514)
        {
          v566 = (unsigned __int8 *)*((_QWORD *)v511 + 1);
          llvm::MetadataTracking::track((uint64_t)&v566, v515, 2);
          v516 = *v513;
          goto LABEL_565;
        }
      }
      else
      {
        v516 = *v513;
        if (!*v513 && (v362[55] & 0x20) == 0)
          goto LABEL_562;
        if (!v514)
        {
          v566 = 0;
LABEL_565:
          if (v516)
            llvm::MetadataTracking::untrack((uint64_t)(v362 + 80), v516);
          v517 = v566;
          *v513 = v566;
          if (v517)
            llvm::MetadataTracking::retrack((uint64_t)&v566, v517, (uint64_t)(v362 + 80));
          goto LABEL_562;
        }
      }
      llvm::Value::setMetadata(v363, *(_DWORD *)v511, (llvm::MDNode *)v515);
LABEL_562:
      v511 += 16;
    }
    while (v511 != v512);
  }
  ElementPtr = (uint64_t)v363;
  v581 = 257;
  v367 = sub_1C4774778((uint64_t *)&v588, v521, v520, (uint64_t *)&v563, 2, (uint64_t)&v578, 0);
  if (*(_BYTE *)(*(_QWORD *)v549 + 144))
  {
    v369 = 67;
    v370 = v552;
LABEL_297:
    *(_QWORD *)(v367 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v367 + 64), **(uint64_t ***)v367, 1, v369);
    goto LABEL_298;
  }
  v370 = v552;
  if (*(_BYTE *)(*(_QWORD *)v549 + 146))
  {
    v369 = 48;
    goto LABEL_297;
  }
LABEL_298:
  v371 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
  v372 = *(_DWORD *)(*(_QWORD *)v594 + 1968);
  LODWORD(v579) = v372 >> 8;
  if (v372 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v578, 1, 0);
  }
  else
  {
    if (v372 <= 0xFF)
      v373 = 0;
    else
      v373 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v372);
    v578 = (void *)(v373 & 1);
  }
  v374 = llvm::ConstantInt::get(v371, (llvm::LLVMContext *)&v578, v368);
  if (v579 >= 0x41 && v578)
    MEMORY[0x1CAA32F9C](v578, 0x1000C8000313F17);
  v577 = 257;
  v375 = (llvm::Value *)(*((uint64_t (**)(void **, _QWORD *, llvm::ValueHandleBase *, _QWORD, _QWORD))*v595 + 2))(v595, v307, v374, 0, 0);
  if (!v375)
  {
    v581 = 257;
    v376 = (char *)operator new(0x80uLL);
    v377 = v376;
    *(_QWORD *)v376 = 0;
    *((_QWORD *)v376 + 2) = 0;
    *((_QWORD *)v376 + 1) = 0;
    *((_QWORD *)v376 + 5) = 0;
    *((_QWORD *)v376 + 6) = 0;
    *((_QWORD *)v376 + 4) = 0;
    v378 = (llvm::ValueHandleBase **)(v376 + 32);
    *((_QWORD *)v376 + 8) = *v307;
    v375 = (llvm::Value *)(v376 + 64);
    *((_QWORD *)v376 + 3) = v376 + 64;
    *((_QWORD *)v376 + 7) = v376 + 64;
    *((_QWORD *)v376 + 9) = 0;
    v376[80] = 41;
    v376[81] = 0;
    *((_WORD *)v376 + 41) = 0;
    *((_DWORD *)v376 + 21) = 2;
    *((_DWORD *)v376 + 30) = 0;
    *(_OWORD *)(v376 + 104) = 0u;
    *(_OWORD *)(v376 + 88) = 0u;
    *(_QWORD *)v376 = v307;
    v379 = v307 + 1;
    v380 = v307[1];
    *((_QWORD *)v376 + 1) = v380;
    if (v380)
      *(_QWORD *)(v380 + 16) = v376 + 8;
    *((_QWORD *)v376 + 2) = v379;
    *v379 = v376;
    if (*((_QWORD *)v376 + 4))
    {
      **((_QWORD **)v376 + 6) = *((_QWORD *)v376 + 5);
      v518 = *((_QWORD *)v376 + 5);
      if (v518)
        *(_QWORD *)(v518 + 16) = *((_QWORD *)v376 + 6);
    }
    *v378 = v374;
    if (v374)
    {
      v383 = *((_QWORD *)v374 + 1);
      v382 = (llvm::ValueHandleBase ***)((char *)v374 + 8);
      v381 = v383;
      *((_QWORD *)v376 + 5) = v383;
      if (v383)
        *(_QWORD *)(v381 + 16) = v376 + 40;
      *((_QWORD *)v376 + 6) = v382;
      *v382 = v378;
    }
    llvm::Value::setName((uint64_t ***)v376 + 8, (uint64_t)&v578);
    (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v375, &v574, v592, v593);
    if ((_DWORD)v589)
    {
      v384 = v588;
      v385 = &v588[16 * v589];
      v386 = (unsigned __int8 **)(v377 + 112);
      do
      {
        v387 = *(_DWORD *)v384;
        v388 = (unsigned __int8 *)*((_QWORD *)v384 + 1);
        if (v388)
        {
          if (!v387)
          {
            v569 = (const char *)*((_QWORD *)v384 + 1);
            llvm::MetadataTracking::track((uint64_t)&v569, v388, 2);
            v389 = *v386;
            goto LABEL_324;
          }
        }
        else
        {
          v389 = *v386;
          if (!*v386 && (v377[87] & 0x20) == 0)
            goto LABEL_321;
          if (!v387)
          {
            v569 = 0;
LABEL_324:
            if (v389)
              llvm::MetadataTracking::untrack((uint64_t)(v377 + 112), v389);
            v390 = (unsigned __int8 *)v569;
            *v386 = (unsigned __int8 *)v569;
            if (v390)
              llvm::MetadataTracking::retrack((uint64_t)&v569, v390, (uint64_t)(v377 + 112));
            goto LABEL_321;
          }
        }
        llvm::Value::setMetadata(v375, *(_DWORD *)v384, (llvm::MDNode *)v388);
LABEL_321:
        v384 += 16;
      }
      while (v384 != v385);
    }
    v370 = v552;
  }
  v581 = 257;
  v391 = (llvm::Value *)sub_1C4774B48((uint64_t)&v588, 40, (uint64_t)v375, v370, (uint64_t)&v578);
  v392 = operator new(0xA0uLL);
  v393 = v392;
  v394 = 0;
  v395 = (llvm::Value *)(v392 + 24);
  v392[29] = v392[29] & 0x38000000 | 3;
  do
  {
    v396 = &v392[v394];
    *v396 = 0;
    v396[1] = 0;
    v396[2] = 0;
    v396[3] = v395;
    v394 += 8;
  }
  while (v394 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v392 + 24), v553, v557, v391, 0);
  v581 = 257;
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v395, &v578, v592, v593);
  if ((_DWORD)v589)
  {
    v397 = v588;
    v398 = &v588[16 * v589];
    v399 = (unsigned __int8 **)(v393 + 36);
    do
    {
      v400 = *(_DWORD *)v397;
      v401 = (unsigned __int8 *)*((_QWORD *)v397 + 1);
      if (v401)
      {
        if (!v400)
        {
          v574 = (void *)*((_QWORD *)v397 + 1);
          llvm::MetadataTracking::track((uint64_t)&v574, v401, 2);
          v402 = *v399;
          goto LABEL_343;
        }
      }
      else
      {
        v402 = *v399;
        if (!*v399 && (*((_BYTE *)v393 + 119) & 0x20) == 0)
          goto LABEL_340;
        if (!v400)
        {
          v574 = 0;
LABEL_343:
          if (v402)
            llvm::MetadataTracking::untrack((uint64_t)(v393 + 36), v402);
          v403 = (unsigned __int8 *)v574;
          *v399 = (unsigned __int8 *)v574;
          if (v403)
            llvm::MetadataTracking::retrack((uint64_t)&v574, v403, (uint64_t)(v393 + 36));
          goto LABEL_340;
        }
      }
      llvm::Value::setMetadata(v395, *(_DWORD *)v397, (llvm::MDNode *)v401);
LABEL_340:
      v397 += 16;
    }
    while (v397 != v398);
  }
  sub_1C477667C((llvm::PHINode *)v307, (uint64_t)v375, (uint64_t)v553);
  v592 = (_QWORD **)v557;
  v593 = (_QWORD **)v535;
  v581 = 257;
  sub_1C4774778((uint64_t *)&v588, v525, v524, 0, 0, (uint64_t)&v578, 0);
  v581 = 257;
  sub_1C4774778((uint64_t *)&v588, v523, v522, 0, 0, (uint64_t)&v578, 0);
  v405 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
  v406 = *(_DWORD *)(*(_QWORD *)v594 + 1968);
  LODWORD(v579) = v406 >> 8;
  if (v406 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v578, 1, 0);
  }
  else
  {
    if (v406 <= 0xFF)
      v407 = 0;
    else
      v407 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v406);
    v578 = (void *)(v407 & 1);
  }
  v408 = llvm::ConstantInt::get(v405, (llvm::LLVMContext *)&v578, v404);
  if (v579 >= 0x41 && v578)
    MEMORY[0x1CAA32F9C](v578, 0x1000C8000313F17);
  v574 = "next_file_idx";
  v577 = 259;
  v410 = (llvm::Value *)(*((uint64_t (**)(void **, llvm::PHINode *, llvm::ValueHandleBase *, _QWORD, _QWORD))*v595
                         + 2))(v595, v538, v408, 0, 0);
  if (!v410)
  {
    v581 = 257;
    v428 = (char *)operator new(0x80uLL);
    v429 = v428;
    *(_QWORD *)v428 = 0;
    *((_QWORD *)v428 + 2) = 0;
    *((_QWORD *)v428 + 1) = 0;
    *((_QWORD *)v428 + 5) = 0;
    *((_QWORD *)v428 + 6) = 0;
    *((_QWORD *)v428 + 4) = 0;
    v430 = (llvm::ValueHandleBase **)(v428 + 32);
    *((_QWORD *)v428 + 8) = *(_QWORD *)v538;
    v410 = (llvm::Value *)(v428 + 64);
    *((_QWORD *)v428 + 3) = v428 + 64;
    *((_QWORD *)v428 + 7) = v428 + 64;
    *((_QWORD *)v428 + 9) = 0;
    v428[80] = 41;
    v428[81] = 0;
    *((_WORD *)v428 + 41) = 0;
    *((_DWORD *)v428 + 21) = 2;
    *((_DWORD *)v428 + 30) = 0;
    *(_OWORD *)(v428 + 104) = 0u;
    *(_OWORD *)(v428 + 88) = 0u;
    *(_QWORD *)v428 = v538;
    v431 = (_QWORD *)((char *)v538 + 8);
    v432 = *((_QWORD *)v538 + 1);
    *((_QWORD *)v428 + 1) = v432;
    if (v432)
      *(_QWORD *)(v432 + 16) = v428 + 8;
    *((_QWORD *)v428 + 2) = v431;
    *v431 = v428;
    if (*((_QWORD *)v428 + 4))
    {
      **((_QWORD **)v428 + 6) = *((_QWORD *)v428 + 5);
      v519 = *((_QWORD *)v428 + 5);
      if (v519)
        *(_QWORD *)(v519 + 16) = *((_QWORD *)v428 + 6);
    }
    *v430 = v408;
    if (v408)
    {
      v435 = *((_QWORD *)v408 + 1);
      v434 = (llvm::ValueHandleBase ***)((char *)v408 + 8);
      v433 = v435;
      *((_QWORD *)v428 + 5) = v435;
      if (v435)
        *(_QWORD *)(v433 + 16) = v428 + 40;
      *((_QWORD *)v428 + 6) = v434;
      *v434 = v430;
    }
    llvm::Value::setName((uint64_t ***)v428 + 8, (uint64_t)&v578);
    (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v410, &v574, v592, v593);
    if ((_DWORD)v589)
    {
      v436 = v588;
      v437 = &v588[16 * v589];
      v438 = (unsigned __int8 **)(v429 + 112);
      do
      {
        v439 = *(_DWORD *)v436;
        v409 = (unsigned __int8 *)*((_QWORD *)v436 + 1);
        if (v409)
        {
          if (!v439)
          {
            v569 = (const char *)*((_QWORD *)v436 + 1);
            llvm::MetadataTracking::track((uint64_t)&v569, v409, 2);
            v440 = *v438;
            goto LABEL_400;
          }
        }
        else
        {
          v440 = *v438;
          if (!*v438 && (v429[87] & 0x20) == 0)
            goto LABEL_397;
          if (!v439)
          {
            v569 = 0;
LABEL_400:
            if (v440)
              llvm::MetadataTracking::untrack((uint64_t)(v429 + 112), v440);
            v441 = (unsigned __int8 *)v569;
            *v438 = (unsigned __int8 *)v569;
            if (v441)
              llvm::MetadataTracking::retrack((uint64_t)&v569, v441, (uint64_t)(v429 + 112));
            goto LABEL_397;
          }
        }
        llvm::Value::setMetadata(v410, *(_DWORD *)v436, (llvm::MDNode *)v409);
LABEL_397:
        v436 += 16;
      }
      while (v436 != v437);
    }
  }
  v411 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1960);
  v412 = *(_DWORD *)(*(_QWORD *)v594 + 1968);
  LODWORD(v579) = v412 >> 8;
  if (v412 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v578, v583, 0);
  }
  else
  {
    if (v412 <= 0xFF)
      v413 = 0;
    else
      v413 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v412);
    v578 = (void *)(v413 & v583);
  }
  v414 = llvm::ConstantInt::get(v411, (llvm::LLVMContext *)&v578, (const llvm::APInt *)v409);
  if (v579 >= 0x41 && v578)
    MEMORY[0x1CAA32F9C](v578, 0x1000C8000313F17);
  v581 = 257;
  v415 = (llvm::Value *)sub_1C4774B48((uint64_t)&v588, 40, (uint64_t)v410, (uint64_t)v414, (uint64_t)&v578);
  v416 = operator new(0xA0uLL);
  v417 = v416;
  v418 = 0;
  v419 = (llvm::Value *)(v416 + 24);
  v416[29] = v416[29] & 0x38000000 | 3;
  do
  {
    v420 = &v416[v418];
    *v420 = 0;
    v420[1] = 0;
    v420[2] = 0;
    v420[3] = v419;
    v418 += 8;
  }
  while (v418 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v416 + 24), v546, v543, v415, 0);
  v581 = 257;
  (*(void (**)(_QWORD *, llvm::Value *, void **, _QWORD **, _QWORD **))(*v596 + 16))(v596, v419, &v578, v592, v593);
  if ((_DWORD)v589)
  {
    v421 = v588;
    v422 = &v588[16 * v589];
    v423 = (unsigned __int8 **)(v417 + 36);
    do
    {
      v424 = *(_DWORD *)v421;
      v425 = (unsigned __int8 *)*((_QWORD *)v421 + 1);
      if (v425)
      {
        if (!v424)
        {
          v574 = (void *)*((_QWORD *)v421 + 1);
          llvm::MetadataTracking::track((uint64_t)&v574, v425, 2);
          v426 = *v423;
          goto LABEL_374;
        }
      }
      else
      {
        v426 = *v423;
        if (!*v423 && (*((_BYTE *)v417 + 119) & 0x20) == 0)
          goto LABEL_371;
        if (!v424)
        {
          v574 = 0;
LABEL_374:
          if (v426)
            llvm::MetadataTracking::untrack((uint64_t)(v417 + 36), v426);
          v427 = (unsigned __int8 *)v574;
          *v423 = (unsigned __int8 *)v574;
          if (v427)
            llvm::MetadataTracking::retrack((uint64_t)&v574, v427, (uint64_t)(v417 + 36));
          goto LABEL_371;
        }
      }
      llvm::Value::setMetadata(v419, *(_DWORD *)v421, (llvm::MDNode *)v425);
LABEL_371:
      v421 += 16;
    }
    while (v421 != v422);
  }
  sub_1C477667C(v538, (uint64_t)v410, (uint64_t)v557);
  v592 = (_QWORD **)v543;
  v593 = (_QWORD **)v536;
  v2 = v527;
LABEL_379:
  LLVMBuildRetVoid_0((uint64_t *)&v588);
  if (__p != &v584)
    free(__p);
LABEL_21:
  if (v588 != v590)
    free(v588);
  v44 = *(llvm::Value ***)v2;
  v45 = *(unsigned int *)(v2 + 8);
  v46 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(_QWORD **)(v3 + 144) + 1576), 0, 0, 0);
  v47 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(v3 + 104) + 112), "__llvm_gcov_reset", 0x11uLL);
  if (!v47 || (v48 = (_QWORD *)v47, *(_BYTE *)(v47 + 16)))
    v48 = sub_1C58975F8(v3, v46, (uint64_t)"__llvm_gcov_reset", 17);
  v48[14] = llvm::AttributeList::addAttributeAtIndex(v48 + 14, *(uint64_t **)*v48, -1, 27);
  v49 = *(_QWORD **)(v3 + 144);
  v588 = "entry";
  v591 = 259;
  v50 = (uint64_t **)operator new();
  *v50 = (uint64_t *)(*v49 + 1600);
  v50[1] = 0;
  v51 = *((_DWORD *)v50 + 5) & 0xC0000000;
  *((_DWORD *)v50 + 4) = 22;
  *((_DWORD *)v50 + 5) = v51;
  v50[3] = 0;
  v50[4] = 0;
  v50[5] = (uint64_t *)(v50 + 5);
  v50[6] = (uint64_t *)(v50 + 5);
  v50[7] = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v48 + 9), v50);
  v52 = (uint64_t *)v48[9];
  v50[4] = v48 + 9;
  v50[3] = v52;
  v52[1] = (uint64_t)(v50 + 3);
  v48[9] = v50 + 3;
  llvm::Value::setName((uint64_t ***)v50, (uint64_t)&v588);
  v54 = *v50;
  v55 = **v50;
  v588 = v590;
  v589 = 0x200000000;
  v594 = v55;
  v595 = &v603;
  v596 = v604;
  v597 = 0;
  v598 = 0;
  v599 = 512;
  v600 = 7;
  v601 = 0;
  v602 = 0;
  v603 = &unk_1E8167888;
  v604[0] = &unk_1E8167A08;
  v592 = v50;
  v593 = v50 + 5;
  if ((_DWORD)v45)
  {
    v56 = *v54;
    v57 = 16 * v45;
    do
    {
      v58 = *v44;
      v59 = *((_QWORD *)*v44 + 3);
      NullValue = llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v56 + 1912), v53);
      v61 = *(_QWORD *)(v59 + 24);
      if ((*(_DWORD *)(v61 + 8) & 0xFE) == 0x12)
        v61 = **(_QWORD **)(v61 + 16);
      v62 = *(_QWORD *)(v59 + 32);
      v63 = ((unint64_t)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v61) * v62) >> 3;
      if ((*((_WORD *)v58 + 17) & 0x3F) != 0)
        v65 = ((*((_WORD *)v58 + 17) & 0x3F) + 255) | 0x100;
      else
        v65 = 0;
      v66 = *(llvm::ConstantInt **)(*(_QWORD *)v594 + 1984);
      v67 = *(_DWORD *)(*(_QWORD *)v594 + 1992);
      LODWORD(v583) = v67 >> 8;
      if (v67 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__p, v63, 0);
      }
      else
      {
        if (v67 <= 0xFF)
          v68 = 0;
        else
          v68 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v67);
        __p = (void *)(v68 & v63);
      }
      v69 = (uint64_t *)llvm::ConstantInt::get(v66, (llvm::LLVMContext *)&__p, v64);
      if (v583 >= 0x41 && __p)
        MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
      llvm::IRBuilderBase::CreateMemSet((uint64_t)&v588, v58, (uint64_t)NullValue, v69, v65, 0, 0, 0, 0);
      v44 += 2;
      v57 -= 16;
    }
    while (v57);
  }
  v70 = **(unsigned __int8 ***)(v48[3] + 16);
  v71 = v70[8];
  if (v71 == 7)
  {
    LLVMBuildRetVoid_0((uint64_t *)&v588);
    v74 = v558;
    v72 = (llvm::UndefValue *)v555;
  }
  else
  {
    v72 = (llvm::UndefValue *)v555;
    if (v71 != 13)
      llvm::report_fatal_error((llvm *)"invalid return type for __llvm_gcov_reset", (const char *)1);
    v73 = llvm::ConstantInt::get((llvm::ConstantInt *)v70, 0, 0);
    sub_1C538D7E4((uint64_t *)&v588, (llvm::Value *)v73);
    v74 = v558;
  }
  if (v588 != v590)
    free(v588);
  v75 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(_QWORD **)(v74 + 144) + 1576), 0, 0, 0);
  v76 = sub_1C58975F8(v74, v75, (uint64_t)"__llvm_gcov_init", 16);
  *((_QWORD *)v76 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v76 + 14, **(uint64_t ***)v76, -1, 27);
  v77 = *(_QWORD **)(v74 + 144);
  v588 = "entry";
  v591 = 259;
  v78 = (uint64_t **)operator new();
  *v78 = (uint64_t *)(*v77 + 1600);
  v78[1] = 0;
  v79 = *((_DWORD *)v78 + 5) & 0xC0000000;
  *((_DWORD *)v78 + 4) = 22;
  *((_DWORD *)v78 + 5) = v79;
  v78[3] = 0;
  v78[4] = 0;
  v78[5] = (uint64_t *)(v78 + 5);
  v78[6] = (uint64_t *)(v78 + 5);
  v78[7] = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v76 + 72), v78);
  v80 = (uint64_t *)*((_QWORD *)v76 + 9);
  v78[4] = (uint64_t *)(v76 + 72);
  v78[3] = v80;
  v80[1] = (uint64_t)(v78 + 3);
  *((_QWORD *)v76 + 9) = v78 + 3;
  llvm::Value::setName((uint64_t ***)v78, (uint64_t)&v588);
  v81 = **v78;
  v588 = v590;
  v589 = 0x200000000;
  v594 = v81;
  v595 = &v603;
  v596 = v604;
  v597 = 0;
  v598 = 0;
  v599 = 512;
  v600 = 7;
  v601 = 0;
  v602 = 0;
  v603 = &unk_1E8167888;
  v604[0] = &unk_1E8167A08;
  v592 = v78;
  v593 = v78 + 5;
  v82 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(_QWORD **)(v74 + 144) + 1576), 0, 0, 0);
  v83 = (void *)llvm::PointerType::get(v82, 0);
  v84 = (uint64_t **)(*(_QWORD *)v594 + 1576);
  __p = v83;
  v583 = (llvm::Type *)v83;
  v85 = (llvm::PointerType *)llvm::FunctionType::get(v84, (uint64_t *)&__p, 2, 0);
  v86 = (uint64_t **)llvm::Module::getOrInsertFunction(*(_QWORD *)(v74 + 104), "llvm_gcov_init", 0xEuLL, v85, 0);
  v88 = v87;
  v89 = (void *)(*(_QWORD *)(v74 + 104) + 216);
  v581 = 260;
  v578 = v89;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v578);
  v92 = (_DWORD)v585 == 3 && HIDWORD(v585) == 31;
  if (SHIBYTE(v584) < 0)
    operator delete(__p);
  if (v92)
  {
    v167 = **(_QWORD **)(v74 + 144);
    v168 = *(llvm::ConstantInt **)(v167 + 1960);
    LODWORD(v583) = *(_DWORD *)(v167 + 1968) >> 8;
    if (v583 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
    else
      __p = 0;
    v170 = (uint64_t ***)llvm::ConstantInt::get(v168, (llvm::LLVMContext *)&__p, v90);
    if (v583 >= 0x41 && __p)
      MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
    v171 = **(_QWORD **)(v74 + 144);
    v172 = *(llvm::ConstantInt **)(v171 + 1984);
    LODWORD(v583) = *(_DWORD *)(v171 + 1992) >> 8;
    if (v583 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
    else
      __p = 0;
    v174 = (uint64_t ***)llvm::ConstantInt::get(v172, (llvm::LLVMContext *)&__p, v169);
    if (v583 >= 0x41 && __p)
      MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
    v175 = **(_QWORD **)(v74 + 144);
    v176 = *(llvm::ConstantInt **)(v175 + 1984);
    LODWORD(v583) = *(_DWORD *)(v175 + 1992) >> 8;
    if (v583 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
    else
      __p = 0;
    v178 = (uint64_t ***)llvm::ConstantInt::get(v176, (llvm::LLVMContext *)&__p, v173);
    if (v583 >= 0x41 && __p)
      MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
    v72 = llvm::GlobalPtrAuthInfo::create(*(llvm::GlobalPtrAuthInfo **)(v558 + 104), v72, v170, v178, v174, v177);
    v179 = v178;
    v74 = v558;
    v48 = llvm::GlobalPtrAuthInfo::create(*(llvm::GlobalPtrAuthInfo **)(v558 + 104), (llvm::Module *)v48, v170, v179, v174, v180);
  }
  v578 = v72;
  v579 = (uint64_t)v48;
  v586 = 257;
  sub_1C4774778((uint64_t *)&v588, v86, v88, (uint64_t *)&v578, 2, (uint64_t)&__p, 0);
  LLVMBuildRetVoid_0((uint64_t *)&v588);
  sub_1C5F50894("llvm.global_ctors", *(_QWORD *)(v74 + 104), (uint64_t)v76, 0, 0);
  if (v588 != v590)
    free(v588);
}

uint64_t sub_1C5894438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  unsigned __int8 v39;

  v8 = *(_DWORD *)(a1 + 40);
  v9 = a1 + 32;
  v36 = a2;
  v37 = 0;
  sub_1C58946A4((uint64_t)v38, a1 + 32, &v36);
  v10 = v38[0];
  v11 = v39;
  if (v37)
    MEMORY[0x1CAA32FC0](v37, 0x1020C40EDED9539);
  if (v11)
  {
    v12 = operator new();
    *(_QWORD *)v12 = v12;
    *(_DWORD *)(v12 + 8) = v8;
    *(_DWORD *)(v12 + 12) = 0;
    v13 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v12;
    if (v13)
      MEMORY[0x1CAA32FC0](v13, 0x1020C40EDED9539);
    ++v8;
  }
  v36 = a3;
  v37 = 0;
  sub_1C58946A4((uint64_t)v38, v9, &v36);
  v14 = v38[0];
  v15 = v39;
  if (v37)
    MEMORY[0x1CAA32FC0](v37, 0x1020C40EDED9539);
  if (v15)
  {
    v16 = operator new();
    *(_QWORD *)v16 = v16;
    *(_DWORD *)(v16 + 8) = v8;
    *(_DWORD *)(v16 + 12) = 0;
    v17 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v14 + 8) = v16;
    if (v17)
      MEMORY[0x1CAA32FC0](v17, 0x1020C40EDED9539);
  }
  v18 = operator new();
  v19 = v18;
  *(_QWORD *)v18 = a2;
  *(_QWORD *)(v18 + 8) = a3;
  *(_QWORD *)(v18 + 16) = a4;
  *(_QWORD *)(v18 + 24) = 0;
  *(_WORD *)(v18 + 40) = 0;
  *(_BYTE *)(v18 + 42) = 0;
  v21 = *(uint64_t **)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v21 >= v20)
  {
    v23 = *(_QWORD **)(a1 + 8);
    v24 = v21 - v23;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
      abort();
    v26 = v20 - (_QWORD)v23;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 61)
        sub_1C4764EE4();
      v28 = (char *)operator new(8 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = (uint64_t *)&v28[8 * v24];
    v30 = &v28[8 * v27];
    *v29 = v19;
    v22 = v29 + 1;
    if (v21 == v23)
    {
      *(_QWORD *)(a1 + 8) = v29;
      *(_QWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 24) = v30;
    }
    else
    {
      do
      {
        v31 = *--v21;
        *v21 = 0;
        *--v29 = v31;
      }
      while (v21 != v23);
      v21 = *(uint64_t **)(a1 + 8);
      v32 = *(uint64_t **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v29;
      *(_QWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 24) = v30;
      while (v32 != v21)
      {
        v34 = *--v32;
        v33 = v34;
        *v32 = 0;
        if (v34)
          MEMORY[0x1CAA32FC0](v33, 0x1060C40E80B6244);
      }
    }
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v21 = v18;
    v22 = v21 + 1;
  }
  *(_QWORD *)(a1 + 16) = v22;
  return *(v22 - 1);
}

uint64_t sub_1C58946A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  char v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v13 = 0;
  result = sub_1C49F21C0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v13);
  v7 = v13;
  if ((result & 1) != 0)
  {
    v8 = 0;
    goto LABEL_8;
  }
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_10;
  }
  if (v10 + ~v9 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_10:
    sub_1C58947B0(a2, v10);
    v13 = 0;
    result = sub_1C49F21C0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v13);
    v7 = v13;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v7 = *a3;
  v11 = a3[1];
  a3[1] = 0;
  v7[1] = v11;
  v8 = 1;
LABEL_8:
  v12 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

_QWORD *sub_1C58947B0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)(v4 + 8);
      do
      {
        v14 = *(v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v20);
          v15 = v20;
          *v20 = v14;
          v16 = *v13;
          *v13 = 0;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
          v17 = *v13;
          *v13 = 0;
          if (v17)
            MEMORY[0x1CAA32FC0](v17, 0x1020C40EDED9539);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 16 * v18;
    do
    {
      *result = -4096;
      result += 2;
      v19 -= 16;
    }
    while (v19);
  }
  return result;
}

uint64_t sub_1C5894910(uint64_t result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  if (a3 >= 2)
  {
    v6 = (uint64_t *)result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_QWORD *)result;
      if (*(_QWORD *)(v7 + 16) > *(_QWORD *)(*(_QWORD *)result + 16))
      {
        *(_QWORD *)result = v7;
        *((_QWORD *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((char *)result != a2)
      {
        v15 = (uint64_t *)(result + 8);
        if ((char *)(result + 8) != a2)
        {
          v16 = 0;
          v17 = (uint64_t *)result;
          do
          {
            v18 = *v17;
            v17 = v15;
            v19 = *v15;
            if (*(_QWORD *)(*v15 + 16) > *(_QWORD *)(v18 + 16))
            {
              v20 = 0;
              *v15 = 0;
              for (i = v16; ; i -= 8)
              {
                v22 = (uint64_t *)((char *)v6 + i);
                *v22 = 0;
                v22[1] = v18;
                if (v20)
                  MEMORY[0x1CAA32FC0](v20, 0x1060C40E80B6244);
                if (!i)
                  break;
                v23 = (uint64_t *)((char *)v6 + i);
                v18 = *(uint64_t *)((char *)v6 + i - 8);
                if (*(_QWORD *)(v19 + 16) <= *(_QWORD *)(v18 + 16))
                  goto LABEL_20;
                v20 = *v22;
              }
              v23 = v6;
LABEL_20:
              result = *v23;
              *v23 = v19;
              if (result)
                result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            }
            v15 = v17 + 1;
            v16 += 8;
          }
          while (v17 + 1 != (uint64_t *)a2);
        }
      }
    }
    else
    {
      v11 = a4;
      v12 = a3 >> 1;
      v13 = result + 8 * (a3 >> 1);
      v14 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C5894C34(result, v13, v14, a4);
        v24 = &v11[v12];
        result = sub_1C5894C34((uint64_t)&v6[a3 >> 1], (uint64_t)a2, a3 - (a3 >> 1), v24);
        v25 = &v11[a3];
        v26 = v24;
        v27 = v11;
        while (v26 != v25)
        {
          v28 = *v26;
          v29 = *v27;
          if (*(_QWORD *)(*v26 + 16) <= *(_QWORD *)(*v27 + 16))
          {
            *v27 = 0;
            result = *v6;
            *v6 = v29;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            ++v27;
          }
          else
          {
            *v26 = 0;
            result = *v6;
            *v6 = v28;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            ++v26;
          }
          ++v6;
          if (v27 == v24)
          {
            if (v26 != v25)
            {
              v30 = 0;
              do
              {
                v31 = v26[v30];
                v26[v30] = 0;
                result = v6[v30];
                v6[v30] = v31;
                if (result)
                  result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
                ++v30;
              }
              while (&v26[v30] != v25);
            }
            goto LABEL_45;
          }
        }
        if (v27 != v24)
        {
          v32 = 0;
          do
          {
            v33 = v27[v32];
            v27[v32] = 0;
            result = v6[v32];
            v6[v32] = v33;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            ++v32;
          }
          while (&v27[v32] != v24);
        }
LABEL_45:
        if (v11)
        {
          v34 = a3;
          do
          {
            result = *v11;
            *v11 = 0;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            ++v11;
            --v34;
          }
          while (v34);
        }
      }
      else
      {
        sub_1C5894910(result, v13, v14, a4, a5);
        sub_1C5894910(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v11, a5);
        return sub_1C5894E70((uint64_t)v6, (char *)&v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v11, a5);
      }
    }
  }
  return result;
}

uint64_t sub_1C5894C34(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_11:
      v13 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      *v4 = v13;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(_QWORD *)(a2 - 8);
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(*(_QWORD *)result + 16);
      v11 = v9 > v10;
      if (v9 <= v10)
        v12 = (_QWORD *)result;
      else
        v12 = (_QWORD *)(a2 - 8);
      if (!v11)
        v8 = *(_QWORD *)result;
      *v12 = 0;
      *a4 = v8;
      v4 = a4 + 1;
      if (!v11)
        v6 = a2 - 8;
      goto LABEL_11;
    }
    if ((uint64_t)a3 > 8)
    {
      v27 = result + 8 * (a3 >> 1);
      sub_1C5894910(result, v27, a3 >> 1, a4, a3 >> 1);
      result = sub_1C5894910(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v28 = v6 + 8 * (a3 >> 1);
      while (v28 != a2)
      {
        v29 = *(_QWORD *)v28;
        v30 = *(_QWORD *)v6;
        if (*(_QWORD *)(*(_QWORD *)v28 + 16) <= *(_QWORD *)(*(_QWORD *)v6 + 16))
        {
          *(_QWORD *)v6 = 0;
          v6 += 8;
          v29 = v30;
        }
        else
        {
          *(_QWORD *)v28 = 0;
          v28 += 8;
        }
        *v4++ = v29;
        if (v6 == v27)
        {
          if (v28 != a2)
          {
            v31 = 0;
            do
            {
              v32 = *(_QWORD *)(v28 + v31);
              *(_QWORD *)(v28 + v31) = 0;
              v4[v31 / 8] = v32;
              v31 += 8;
            }
            while (v28 + v31 != a2);
          }
          return result;
        }
      }
      if (v6 != v27)
      {
        v33 = 0;
        do
        {
          v34 = *(_QWORD *)(v6 + v33);
          *(_QWORD *)(v6 + v33) = 0;
          v4[v33 / 8] = v34;
          v33 += 8;
        }
        while (v6 + v33 != v27);
      }
    }
    else if (result != a2)
    {
      v14 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      v15 = result + 8;
      *a4 = v14;
      if (result + 8 != a2)
      {
        v16 = 0;
        v17 = a4;
        do
        {
          v18 = v17;
          v20 = *v17++;
          v19 = v20;
          v21 = *(_QWORD *)v15;
          if (*(_QWORD *)(*(_QWORD *)v15 + 16) <= *(_QWORD *)(v20 + 16))
          {
            *(_QWORD *)v15 = 0;
            *v17 = v21;
          }
          else
          {
            *v18 = 0;
            v18[1] = v19;
            v22 = v4;
            if (v18 != v4)
            {
              v23 = v16;
              while (1)
              {
                v22 = (uint64_t *)((char *)v4 + v23);
                v24 = *(uint64_t *)((char *)v4 + v23 - 8);
                if (*(_QWORD *)(*(_QWORD *)v15 + 16) <= *(_QWORD *)(v24 + 16))
                  break;
                v25 = *v22;
                *(v22 - 1) = 0;
                *v22 = v24;
                if (v25)
                  MEMORY[0x1CAA32FC0](v25, 0x1060C40E80B6244);
                v23 -= 8;
                if (!v23)
                {
                  v22 = v4;
                  break;
                }
              }
            }
            v26 = *(_QWORD *)v15;
            *(_QWORD *)v15 = 0;
            result = *v22;
            *v22 = v26;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
          }
          v15 += 8;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C5894E70(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;

  if (a5)
  {
    v8 = a5;
    v11 = (char *)result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      v12 = 0;
      v13 = -a4;
      while (1)
      {
        v14 = *(_QWORD *)&v11[v12];
        if (*(_QWORD *)(*(_QWORD *)a2 + 16) > *(_QWORD *)(v14 + 16))
          break;
        v12 += 8;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v62 = a3;
      v63 = a6;
      v64 = a7;
      v61 = &v11[v12];
      if (-v13 >= v8)
      {
        if (v13 == -1)
        {
          *(_QWORD *)&v11[v12] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
          return result;
        }
        if (v13 <= 0)
          v25 = -v13;
        else
          v25 = 1 - v13;
        v26 = v25 >> 1;
        v20 = &v11[8 * (v25 >> 1) + v12];
        v18 = a3;
        if (a3 != a2)
        {
          v27 = (a3 - a2) >> 3;
          v18 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = &v18[8 * (v27 >> 1)];
            v31 = *(_QWORD *)v29;
            v30 = v29 + 8;
            v27 += ~(v27 >> 1);
            if (*(_QWORD *)(v31 + 16) > *(_QWORD *)(*(_QWORD *)v20 + 16))
              v18 = v30;
            else
              v27 = v28;
          }
          while (v27);
        }
        v17 = (v18 - a2) >> 3;
      }
      else
      {
        if (v8 >= 0)
          v16 = v8;
        else
          v16 = v8 + 1;
        v17 = v16 >> 1;
        v18 = &a2[8 * (v16 >> 1)];
        if (&v11[v12] == a2)
        {
          v20 = a2;
        }
        else
        {
          v19 = (a2 - v11 - v12) >> 3;
          v20 = &v11[v12];
          do
          {
            v21 = v19 >> 1;
            v22 = &v20[8 * (v19 >> 1)];
            v24 = *(_QWORD *)v22;
            v23 = v22 + 8;
            v19 += ~(v19 >> 1);
            if (*(_QWORD *)(*(_QWORD *)v18 + 16) > *(_QWORD *)(v24 + 16))
              v19 = v21;
            else
              v20 = v23;
          }
          while (v19);
        }
        v26 = (v20 - v11 - v12) >> 3;
      }
      a4 = -(v26 + v13);
      v32 = v8 - v17;
      v33 = a2;
      v34 = v17;
      v35 = (char *)sub_1C5895320(v20, v33, v18);
      v36 = v34;
      v37 = v35;
      if (v26 + v36 >= v8 - (v26 + v36) - v13)
      {
        v39 = v36;
        result = sub_1C5894E70(v35, v18, v62, -(v26 + v13), v32, v63, v64);
        v18 = v20;
        a6 = v63;
        v32 = v39;
        a4 = v26;
        a3 = v37;
        v11 = v61;
      }
      else
      {
        v38 = v20;
        a6 = v63;
        result = sub_1C5894E70(&v11[v12], v38, v35, v26, v36, v63, v64);
        v11 = v37;
        a3 = v62;
      }
      v8 = v32;
      a2 = v18;
      a7 = v64;
      if (!v32)
        return result;
    }
    if (a4 > v8)
    {
      if (a2 == a3)
        return result;
      v40 = 0;
      v41 = 0;
      do
      {
        v42 = *(_QWORD *)&a2[v40];
        *(_QWORD *)&a2[v40] = 0;
        a6[v40 / 8] = v42;
        ++v41;
        v40 += 8;
      }
      while (&a2[v40] != a3);
      if (!v40)
        goto LABEL_81;
      v43 = &a6[v40 / 8];
      v44 = (uint64_t *)(a3 - 8);
      while (1)
      {
        if (a2 == v11)
        {
          if (v43 != a6)
          {
            v57 = 0;
            do
            {
              v58 = v43[v57 - 1];
              v43[v57 - 1] = 0;
              result = v44[v57];
              v44[v57] = v58;
              if (result)
                result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
              --v57;
            }
            while (&v43[v57] != a6);
          }
          goto LABEL_81;
        }
        v46 = a2 - 8;
        v45 = *((_QWORD *)a2 - 1);
        v47 = *(v43 - 1);
        if (*(_QWORD *)(v47 + 16) > *(_QWORD *)(v45 + 16))
          break;
        *(v43 - 1) = 0;
        result = *v44;
        *v44 = v47;
        v46 = a2;
        --v43;
        if (result)
          goto LABEL_51;
LABEL_52:
        --v44;
        a2 = v46;
        if (v43 == a6)
          goto LABEL_81;
      }
      *(_QWORD *)v46 = 0;
      result = *v44;
      *v44 = v45;
      if (!result)
        goto LABEL_52;
LABEL_51:
      result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
      goto LABEL_52;
    }
    if (v11 != a2)
    {
      v48 = 0;
      v41 = 0;
      do
      {
        v49 = *(_QWORD *)&v11[v48 * 8];
        *(_QWORD *)&v11[v48 * 8] = 0;
        a6[v48] = v49;
        ++v41;
        ++v48;
      }
      while (&v11[v48 * 8] != a2);
      if (!(v48 * 8))
        goto LABEL_81;
      v50 = &a6[v48];
      v51 = (uint64_t)&a6[v48 - 1];
      v52 = a6;
      while (a2 != a3)
      {
        v53 = *(_QWORD *)a2;
        v54 = *v52;
        if (*(_QWORD *)(*(_QWORD *)a2 + 16) <= *(_QWORD *)(*v52 + 16))
        {
          *v52 = 0;
          result = *(_QWORD *)v11;
          *(_QWORD *)v11 = v54;
          if (result)
          {
            v56 = a3;
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            a3 = v56;
          }
          ++v52;
        }
        else
        {
          *(_QWORD *)a2 = 0;
          result = *(_QWORD *)v11;
          *(_QWORD *)v11 = v53;
          if (result)
          {
            v55 = a3;
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            a3 = v55;
          }
          a2 += 8;
        }
        v11 += 8;
        if (v50 == v52)
          goto LABEL_81;
      }
      if (v50 != v52)
      {
        v59 = 0;
        do
        {
          v60 = v52[v59];
          v52[v59] = 0;
          result = *(_QWORD *)&v11[v59 * 8];
          *(_QWORD *)&v11[v59 * 8] = v60;
          if (result)
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
          ++v59;
        }
        while ((uint64_t *)v51 != &v52[v59 - 1]);
      }
LABEL_81:
      if (a6)
      {
        do
        {
          result = *a6;
          *a6 = 0;
          if (result)
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
          ++a6;
          --v41;
        }
        while (v41);
      }
    }
  }
  return result;
}

_QWORD *sub_1C5895320(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a1 != a2)
  {
    if (a2 != a3)
    {
      v3 = *a1;
      *a1++ = *a2;
      for (i = a2; ; *a1++ = *i)
      {
        *i++ = v3;
        if (i == a3)
          break;
        if (a1 == a2)
          a2 = i;
        v3 = *a1;
      }
      if (a1 != a2)
      {
        v5 = a1;
        v6 = a2;
        while (1)
        {
          v7 = v5;
          while (1)
          {
            v8 = *v5;
            *v7++ = *v6;
            *v6++ = v8;
            if (v6 != a3)
              break;
            v5 = v7;
            v6 = a2;
            if (v7 == a2)
              return a1;
          }
          if (v7 == a2)
            a2 = v6;
          ++v5;
        }
      }
    }
    return a1;
  }
  return a3;
}

BOOL sub_1C58953C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  v12 = 0;
  if (sub_1C49F21C0(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), a2, &v12))
    v5 = v12;
  else
    v5 = *(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 48);
  v6 = sub_1C589549C(*(uint64_t **)(v5 + 8));
  v12 = 0;
  if (sub_1C49F21C0(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), a3, &v12))
    v7 = v12;
  else
    v7 = *(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 48);
  v8 = sub_1C589549C(*(uint64_t **)(v7 + 8));
  if (v6 != v8)
  {
    v9 = *((_DWORD *)v6 + 3);
    v10 = *((_DWORD *)v8 + 3);
    if (v9 >= v10)
    {
      *v8 = (uint64_t)v6;
      if (v9 == v10)
        *((_DWORD *)v6 + 3) = v9 + 1;
    }
    else
    {
      *v6 = (uint64_t)v8;
    }
  }
  return v6 != v8;
}

uint64_t *sub_1C589549C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((uint64_t *)*a1 != a1)
  {
    v2 = sub_1C589549C();
    *v1 = v2;
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t *sub_1C58954D4(int8x16_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;

  v5 = a2;
  v6 = (uint64_t *)a1;
  if (a3 == 3)
  {
    v9 = a1->i64[1];
    if (!*(_QWORD *)(v9 + 24))
    {
      a1->i64[1] = *a2;
      *a2 = v9;
      *a1 = vextq_s8(*a1, *a1, 8uLL);
      return &a1->i64[1];
    }
    v8 = a1->i64[0];
    a1->i64[0] = v9;
    a1->i64[1] = v8;
    a1->i64[1] = *a2;
    goto LABEL_6;
  }
  if (a3 == 2)
  {
    v8 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_6:
    *a2 = v8;
    return v5;
  }
  v11 = a4;
  if (a5 >= a3)
  {
    v17 = a1->i64[0];
    a1->i64[0] = 0;
    v18 = &a1->i64[1];
    *a4 = v17;
    v19 = a4 + 1;
    v20 = 1;
    while (v18 != v5)
    {
      v21 = *v18;
      v22 = *(_QWORD *)(*v18 + 24);
      *v18 = 0;
      if (v22)
      {
        v23 = *v6;
        *v6 = v21;
        if (v23)
          MEMORY[0x1CAA32FC0](v23, 0x1060C40E80B6244);
        ++v6;
      }
      else
      {
        *v19++ = v21;
        ++v20;
      }
      ++v18;
    }
    v24 = *v5;
    *v5 = 0;
    v25 = *v6;
    *v6 = v24;
    if (v25)
      MEMORY[0x1CAA32FC0](v25, 0x1060C40E80B6244);
    v5 = v6 + 1;
    if (v19 > v11)
    {
      v26 = v11;
      v27 = v5;
      do
      {
        v28 = *v26;
        *v26 = 0;
        v29 = *v27;
        *v27 = v28;
        if (v29)
          MEMORY[0x1CAA32FC0](v29, 0x1060C40E80B6244);
        ++v26;
        ++v27;
      }
      while (v26 < v19);
    }
    for (; v20; --v20)
    {
      v30 = *v11;
      *v11 = 0;
      if (v30)
        MEMORY[0x1CAA32FC0](v30, 0x1060C40E80B6244);
      ++v11;
    }
  }
  else
  {
    if (a3 >= 0)
      v12 = a3;
    else
      v12 = a3 + 1;
    v13 = v12 >> 1;
    v14 = &a1->i64[v12 >> 1];
    v15 = v14 - 1;
    if (*(_QWORD *)(*(v14 - 1) + 24))
    {
      v16 = v12 >> 1;
LABEL_38:
      v34 = (uint64_t *)sub_1C58954D4(a1, v15, v16, a4, a5);
    }
    else
    {
      v31 = 8 - 8 * v13;
      v32 = v13;
      while (v31)
      {
        v16 = v32 - 1;
        v33 = *(_QWORD *)(a1[-1].i64[v32] + 24);
        v31 += 8;
        --v32;
        if (v33)
        {
          v15 = (uint64_t *)((char *)a1->i64 - v31);
          goto LABEL_38;
        }
      }
      v34 = (uint64_t *)a1;
    }
    v35 = a3 - v13;
    if (*(_QWORD *)(v6[v13] + 24))
    {
      v36 = v5 + 1;
      v37 = &v6[v13];
      v38 = v37 + 1;
      while (v38 != v5)
      {
        --v35;
        v39 = *v38++;
        ++v37;
        if (!*(_QWORD *)(v39 + 24))
          goto LABEL_45;
      }
    }
    else
    {
      v37 = v14;
LABEL_45:
      v36 = (_QWORD *)sub_1C58954D4(v37, v5, v35, v11, a5);
    }
    return sub_1C5895320(v34, v14, v36);
  }
  return v5;
}

uint64_t sub_1C5895778(uint64_t result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t i;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;

  if (a3 >= 2)
  {
    v6 = (uint64_t *)result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 1);
      v8 = *(_DWORD *)(v7 + 32);
      v9 = *(_QWORD *)result;
      v10 = *(_DWORD *)(*(_QWORD *)result + 32);
      v11 = v8 >= v10;
      if (v8 == v10)
        v11 = *(_DWORD *)(v7 + 36) >= *(_DWORD *)(v9 + 36);
      if (!v11)
      {
        *(_QWORD *)result = v7;
        *((_QWORD *)a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((char *)result != a2)
      {
        v18 = (uint64_t *)(result + 8);
        if ((char *)(result + 8) != a2)
        {
          v19 = 0;
          v20 = (uint64_t *)result;
          do
          {
            v21 = *v20;
            v20 = v18;
            v22 = *v18;
            v23 = *(_DWORD *)(*v18 + 32);
            v24 = *(_DWORD *)(v21 + 32);
            v25 = v23 >= v24;
            if (v23 == v24)
              v25 = *(_DWORD *)(v22 + 36) >= *(_DWORD *)(v21 + 36);
            if (!v25)
            {
              v26 = 0;
              *v20 = 0;
              for (i = v19; ; i -= 8)
              {
                v28 = (uint64_t *)((char *)v6 + i);
                *v28 = 0;
                v28[1] = v21;
                if (v26)
                  MEMORY[0x1CAA32FC0](v26, 0x1060C40E80B6244);
                if (!i)
                {
                  v32 = v6;
                  goto LABEL_27;
                }
                v29 = *(_DWORD *)(v22 + 32);
                v21 = *(uint64_t *)((char *)v6 + i - 8);
                v30 = *(_DWORD *)(v21 + 32);
                v31 = v29 >= v30;
                if (v29 == v30)
                  v31 = *(_DWORD *)(v22 + 36) >= *(_DWORD *)(v21 + 36);
                if (v31)
                  break;
                v26 = *v28;
              }
              v32 = (uint64_t *)((char *)v6 + i);
LABEL_27:
              result = *v32;
              *v32 = v22;
              if (result)
                result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            }
            v18 = v20 + 1;
            v19 += 8;
          }
          while (v20 + 1 != (uint64_t *)a2);
        }
      }
    }
    else
    {
      v14 = a4;
      v15 = a3 >> 1;
      v16 = result + 8 * (a3 >> 1);
      v17 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C5895AE4(result, v16, v17, a4);
        v33 = &v14[v15];
        result = sub_1C5895AE4((uint64_t)&v6[a3 >> 1], (uint64_t)a2, a3 - (a3 >> 1), v33);
        v34 = &v14[a3];
        v35 = v33;
        v36 = v14;
        while (v35 != v34)
        {
          v37 = *v35;
          v38 = *(_DWORD *)(*v35 + 32);
          v39 = *v36;
          v40 = *(_DWORD *)(*v36 + 32);
          v41 = v38 >= v40;
          if (v38 == v40)
            v41 = *(_DWORD *)(v37 + 36) >= *(_DWORD *)(v39 + 36);
          if (v41)
          {
            *v36 = 0;
            result = *v6;
            *v6 = v39;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            ++v36;
          }
          else
          {
            *v35 = 0;
            result = *v6;
            *v6 = v37;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            ++v35;
          }
          ++v6;
          if (v36 == v33)
          {
            if (v35 != v34)
            {
              v42 = 0;
              do
              {
                v43 = v35[v42];
                v35[v42] = 0;
                result = v6[v42];
                v6[v42] = v43;
                if (result)
                  result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
                ++v42;
              }
              while (&v35[v42] != v34);
            }
            goto LABEL_54;
          }
        }
        if (v36 != v33)
        {
          v44 = 0;
          do
          {
            v45 = v36[v44];
            v36[v44] = 0;
            result = v6[v44];
            v6[v44] = v45;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            ++v44;
          }
          while (&v36[v44] != v33);
        }
LABEL_54:
        if (v14)
        {
          v46 = a3;
          do
          {
            result = *v14;
            *v14 = 0;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            ++v14;
            --v46;
          }
          while (v46);
        }
      }
      else
      {
        sub_1C5895778(result, v16, v17, a4, a5);
        sub_1C5895778(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v14, a5);
        return sub_1C5895DA0((uint64_t)v6, (char *)&v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v14, a5);
      }
    }
  }
  return result;
}

uint64_t sub_1C5895AE4(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
      v9 = (uint64_t *)result;
LABEL_34:
      v33 = *v9;
      *v9 = 0;
      *v4 = v33;
      return result;
    }
    if (a3 == 2)
    {
      v9 = (uint64_t *)(a2 - 8);
      v8 = *(_QWORD *)(a2 - 8);
      v10 = *(_DWORD *)(v8 + 32);
      v11 = *(_QWORD *)result;
      v12 = *(_DWORD *)(*(_QWORD *)result + 32);
      if (v10 == v12)
      {
        if (*(_DWORD *)(v8 + 36) >= *(_DWORD *)(v11 + 36))
        {
LABEL_6:
          v13 = (_QWORD *)result;
LABEL_33:
          *v13 = 0;
          *a4 = v11;
          v4 = a4 + 1;
          goto LABEL_34;
        }
      }
      else if (v10 >= v12)
      {
        goto LABEL_6;
      }
      v13 = (_QWORD *)(a2 - 8);
      v11 = *(_QWORD *)(a2 - 8);
      v9 = (uint64_t *)result;
      goto LABEL_33;
    }
    if ((uint64_t)a3 > 8)
    {
      v34 = result + 8 * (a3 >> 1);
      sub_1C5895778(result, v34, a3 >> 1, a4, a3 >> 1);
      result = sub_1C5895778(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v35 = v6 + 8 * (a3 >> 1);
      while (v35 != a2)
      {
        v36 = *(_QWORD *)v35;
        v37 = *(_DWORD *)(*(_QWORD *)v35 + 32);
        v38 = *(_QWORD *)v6;
        v39 = *(_DWORD *)(*(_QWORD *)v6 + 32);
        v40 = v37 >= v39;
        if (v37 == v39)
          v40 = *(_DWORD *)(v36 + 36) >= *(_DWORD *)(v38 + 36);
        if (v40)
        {
          *(_QWORD *)v6 = 0;
          v6 += 8;
          *v4 = v38;
        }
        else
        {
          *(_QWORD *)v35 = 0;
          v35 += 8;
          *v4 = v36;
        }
        ++v4;
        if (v6 == v34)
        {
          if (v35 != a2)
          {
            v41 = 0;
            do
            {
              v42 = *(_QWORD *)(v35 + v41);
              *(_QWORD *)(v35 + v41) = 0;
              v4[v41 / 8] = v42;
              v41 += 8;
            }
            while (v35 + v41 != a2);
          }
          return result;
        }
      }
      if (v6 != v34)
      {
        v43 = 0;
        do
        {
          v44 = *(_QWORD *)(v6 + v43);
          *(_QWORD *)(v6 + v43) = 0;
          v4[v43 / 8] = v44;
          v43 += 8;
        }
        while (v6 + v43 != v34);
      }
    }
    else if (result != a2)
    {
      v14 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      v15 = result + 8;
      *a4 = v14;
      if (result + 8 != a2)
      {
        v16 = 0;
        v17 = a4;
        do
        {
          v18 = v17;
          v20 = *v17++;
          v19 = v20;
          v21 = *(_QWORD *)v15;
          v22 = *(_DWORD *)(*(_QWORD *)v15 + 32);
          v23 = *(_DWORD *)(v20 + 32);
          v24 = v22 >= v23;
          if (v22 == v23)
            v24 = *(_DWORD *)(v21 + 36) >= *(_DWORD *)(v19 + 36);
          if (v24)
          {
            *(_QWORD *)v15 = 0;
            *v17 = v21;
          }
          else
          {
            *v18 = 0;
            v18[1] = v19;
            v25 = v4;
            if (v18 != v4)
            {
              v26 = v16;
              while (1)
              {
                v27 = (uint64_t *)((char *)v4 + v26);
                v28 = *(_DWORD *)(*(_QWORD *)v15 + 32);
                v29 = *(uint64_t *)((char *)v4 + v26 - 8);
                v30 = *(_DWORD *)(v29 + 32);
                if (v28 == v30)
                {
                  if (*(_DWORD *)(*(_QWORD *)v15 + 36) >= *(_DWORD *)(v29 + 36))
                  {
                    v25 = v18;
                    break;
                  }
                }
                else if (v28 >= v30)
                {
                  v25 = (uint64_t *)((char *)v4 + v26);
                  break;
                }
                v31 = *v27;
                *(v27 - 1) = 0;
                *v27 = v29;
                if (v31)
                  MEMORY[0x1CAA32FC0](v31, 0x1060C40E80B6244);
                --v18;
                v26 -= 8;
                if (!v26)
                {
                  v25 = v4;
                  break;
                }
              }
            }
            v32 = *(_QWORD *)v15;
            *(_QWORD *)v15 = 0;
            result = *v25;
            *v25 = v32;
            if (result)
              result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
          }
          v15 += 8;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C5895DA0(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v9;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unsigned int v24;
  char *v25;
  unint64_t v26;
  char *v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  char *v37;
  unsigned int v38;
  BOOL v39;
  int v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  BOOL v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;

  if (a5)
  {
    v9 = a5;
    v12 = (char *)result;
    while (a4 > a7 && v9 > a7)
    {
      if (!a4)
        return result;
      v13 = 0;
      v14 = *(_QWORD *)a2;
      v15 = *(_DWORD *)(*(_QWORD *)a2 + 32);
      v16 = -a4;
      while (1)
      {
        v17 = *(_QWORD *)&v12[v13];
        v18 = *(_DWORD *)(v17 + 32);
        v19 = v15 >= v18;
        if (v15 == v18)
          v19 = *(_DWORD *)(v14 + 36) >= *(_DWORD *)(v17 + 36);
        if (!v19)
          break;
        v13 += 8;
        v19 = __CFADD__(v16++, 1);
        if (v19)
          return result;
      }
      v80 = a3;
      v81 = a6;
      v78 = &v12[v13];
      v79 = a7;
      if (-v16 >= v9)
      {
        if (v16 == -1)
        {
          *(_QWORD *)&v12[v13] = v14;
          *(_QWORD *)a2 = v17;
          return result;
        }
        if (v16 <= 0)
          v32 = -v16;
        else
          v32 = 1 - v16;
        v33 = v32 >> 1;
        v25 = &v12[8 * (v32 >> 1) + v13];
        v22 = a3;
        if (a3 != a2)
        {
          v34 = (a3 - a2) >> 3;
          v35 = *(_DWORD *)(*(_QWORD *)v25 + 32);
          v22 = a2;
          do
          {
            v36 = v34 >> 1;
            v37 = &v22[8 * (v34 >> 1)];
            v38 = *(_DWORD *)(*(_QWORD *)v37 + 32);
            v39 = v38 >= v35;
            if (v38 == v35)
              v39 = *(_DWORD *)(*(_QWORD *)v37 + 36) >= *(_DWORD *)(*(_QWORD *)v25 + 36);
            v40 = !v39;
            v41 = v37 + 8;
            v34 += ~v36;
            if (v40)
              v22 = v41;
            else
              v34 = v36;
          }
          while (v34);
        }
        v21 = (v22 - a2) >> 3;
      }
      else
      {
        if (v9 >= 0)
          v20 = v9;
        else
          v20 = v9 + 1;
        v21 = v20 >> 1;
        v22 = &a2[8 * (v20 >> 1)];
        if (&v12[v13] == a2)
        {
          v25 = a2;
        }
        else
        {
          v23 = (a2 - v12 - v13) >> 3;
          v24 = *(_DWORD *)(*(_QWORD *)v22 + 32);
          v25 = &v12[v13];
          do
          {
            v26 = v23 >> 1;
            v27 = &v25[8 * (v23 >> 1)];
            v28 = *(_DWORD *)(*(_QWORD *)v27 + 32);
            v29 = v24 >= v28;
            if (v24 == v28)
              v29 = *(_DWORD *)(*(_QWORD *)v22 + 36) >= *(_DWORD *)(*(_QWORD *)v27 + 36);
            v30 = !v29;
            v31 = v27 + 8;
            v23 += ~v26;
            if (v30)
              v23 = v26;
            else
              v25 = v31;
          }
          while (v23);
        }
        v33 = (v25 - v12 - v13) >> 3;
      }
      a4 = -(v33 + v16);
      v42 = v9 - v21;
      v43 = a2;
      v44 = v21;
      v45 = (char *)sub_1C5895320(v25, v43, v22);
      v46 = v44;
      v47 = v45;
      if (v33 + v46 >= v9 - (v33 + v46) - v16)
      {
        v50 = v46;
        result = sub_1C5895DA0(v45, v22, v80, -(v33 + v16), v42, v81, v79);
        v22 = v25;
        a6 = v81;
        v42 = v50;
        a4 = v33;
        a7 = v79;
        a3 = v47;
        v12 = v78;
      }
      else
      {
        v48 = v25;
        v49 = v33;
        a6 = v81;
        a7 = v79;
        result = sub_1C5895DA0(&v12[v13], v48, v45, v49, v46, v81, v79);
        v12 = v47;
        a3 = v80;
      }
      v9 = v42;
      a2 = v22;
      if (!v42)
        return result;
    }
    if (a4 > v9)
    {
      if (a2 == a3)
        return result;
      v51 = 0;
      v52 = 0;
      do
      {
        v53 = *(_QWORD *)&a2[v51];
        *(_QWORD *)&a2[v51] = 0;
        a6[v51 / 8] = v53;
        ++v52;
        v51 += 8;
      }
      while (&a2[v51] != a3);
      if (!v51)
        goto LABEL_98;
      v54 = &a6[v51 / 8];
      v55 = (uint64_t *)(a3 - 8);
      while (1)
      {
        if (a2 == v12)
        {
          if (v54 != a6)
          {
            v74 = 0;
            do
            {
              v75 = v54[v74 - 1];
              v54[v74 - 1] = 0;
              result = v55[v74];
              v55[v74] = v75;
              if (result)
                result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
              --v74;
            }
            while (&v54[v74] != a6);
          }
          goto LABEL_98;
        }
        v57 = a2 - 8;
        v56 = *((_QWORD *)a2 - 1);
        v58 = *(v54 - 1);
        v59 = *(_DWORD *)(v58 + 32);
        v60 = *(_DWORD *)(v56 + 32);
        v61 = v59 >= v60;
        if (v59 == v60)
          v61 = *(_DWORD *)(v58 + 36) >= *(_DWORD *)(v56 + 36);
        if (!v61)
          break;
        *(v54 - 1) = 0;
        result = *v55;
        *v55 = v58;
        v57 = a2;
        --v54;
        if (result)
          goto LABEL_66;
LABEL_67:
        --v55;
        a2 = v57;
        if (v54 == a6)
          goto LABEL_98;
      }
      *(_QWORD *)v57 = 0;
      result = *v55;
      *v55 = v56;
      if (!result)
        goto LABEL_67;
LABEL_66:
      result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
      goto LABEL_67;
    }
    if (v12 != a2)
    {
      v62 = 0;
      v52 = 0;
      do
      {
        v63 = *(_QWORD *)&v12[v62 * 8];
        *(_QWORD *)&v12[v62 * 8] = 0;
        a6[v62] = v63;
        ++v52;
        ++v62;
      }
      while (&v12[v62 * 8] != a2);
      if (!(v62 * 8))
        goto LABEL_98;
      v64 = &a6[v62];
      v65 = (uint64_t)&a6[v62 - 1];
      v66 = a6;
      while (a2 != a3)
      {
        v67 = *(_QWORD *)a2;
        v68 = *(_DWORD *)(*(_QWORD *)a2 + 32);
        v69 = *v66;
        v70 = *(_DWORD *)(*v66 + 32);
        v71 = v68 >= v70;
        if (v68 == v70)
          v71 = *(_DWORD *)(v67 + 36) >= *(_DWORD *)(v69 + 36);
        if (v71)
        {
          *v66 = 0;
          result = *(_QWORD *)v12;
          *(_QWORD *)v12 = v69;
          if (result)
          {
            v73 = a3;
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            a3 = v73;
          }
          ++v66;
        }
        else
        {
          *(_QWORD *)a2 = 0;
          result = *(_QWORD *)v12;
          *(_QWORD *)v12 = v67;
          if (result)
          {
            v72 = a3;
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
            a3 = v72;
          }
          a2 += 8;
        }
        v12 += 8;
        if (v64 == v66)
          goto LABEL_98;
      }
      if (v64 != v66)
      {
        v76 = 0;
        do
        {
          v77 = v66[v76];
          v66[v76] = 0;
          result = *(_QWORD *)&v12[v76 * 8];
          *(_QWORD *)&v12[v76 * 8] = v77;
          if (result)
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
          ++v76;
        }
        while ((uint64_t *)v65 != &v66[v76 - 1]);
      }
LABEL_98:
      if (a6)
      {
        do
        {
          result = *a6;
          *a6 = 0;
          if (result)
            result = MEMORY[0x1CAA32FC0](result, 0x1060C40E80B6244);
          ++a6;
          --v52;
        }
        while (v52);
      }
    }
  }
  return result;
}

size_t **sub_1C58962BC(size_t **result, size_t **a2, char *a3, char a4)
{
  size_t **v5;
  size_t **v6;
  size_t **v7;
  size_t **i;
  uint64_t v9;
  unint64_t v10;
  size_t **v11;
  size_t *v12;
  size_t *v13;
  size_t v14;
  size_t *v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  BOOL v19;
  const void *v20;
  uint64_t k;
  size_t *v22;
  size_t v23;
  size_t v24;
  int v25;
  BOOL v26;
  size_t **v28;
  size_t **m;
  size_t v30;
  size_t v31;
  int v32;
  BOOL v33;
  size_t v35;
  size_t v36;
  int v37;
  BOOL v38;
  size_t *v39;
  size_t **v40;
  size_t **v41;
  size_t v42;
  size_t v43;
  int v44;
  int v45;
  size_t *v46;
  size_t v47;
  size_t v48;
  int v49;
  BOOL v50;
  size_t **v52;
  BOOL v53;
  size_t *v54;
  size_t v55;
  size_t v56;
  size_t v57;
  size_t v58;
  BOOL v59;
  size_t **j;
  size_t v62;
  size_t *v63;
  size_t *v64;
  size_t *v65;
  size_t **v66;
  size_t v67;
  size_t v68;
  int v69;
  size_t *v70;
  size_t v71;
  size_t v72;
  BOOL v73;
  size_t **v75;
  size_t v76;
  size_t v77;
  BOOL v78;
  size_t *v80;
  size_t *v81;
  size_t v82;
  size_t v83;
  size_t v84;
  BOOL v85;
  size_t **v87;
  BOOL v89;
  uint64_t v90;
  size_t **v91;
  size_t **v92;
  size_t *v93;
  size_t *v94;
  size_t v95;
  size_t v96;
  size_t v97;
  BOOL v98;
  size_t **v100;
  uint64_t v101;
  size_t *v102;
  size_t v103;
  size_t v104;
  BOOL v105;
  int64_t v107;
  int64_t v108;
  int64_t v109;
  uint64_t v110;
  size_t **v111;
  uint64_t v112;
  size_t *v113;
  size_t v114;
  size_t v115;
  size_t v116;
  int v117;
  size_t *v118;
  size_t *v119;
  size_t v120;
  size_t v121;
  size_t v122;
  BOOL v123;
  size_t **v125;
  uint64_t v126;
  uint64_t v127;
  size_t *v128;
  size_t v129;
  size_t v130;
  size_t v131;
  int v132;
  size_t *v133;
  size_t v134;
  size_t v135;
  BOOL v136;
  uint64_t v138;
  size_t **v139;
  size_t **v140;
  uint64_t v141;
  uint64_t v142;
  size_t *v143;
  size_t v144;
  size_t v145;
  size_t v146;
  int v147;
  size_t **v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  size_t **v152;
  size_t *v153;
  size_t *v154;
  size_t v155;
  size_t v156;
  size_t v157;
  BOOL v158;
  BOOL v159;
  size_t **v160;
  unint64_t v161;
  size_t *v162;
  size_t v163;
  size_t v164;
  BOOL v165;
  size_t **v168;
  size_t *v169;
  size_t *v170;
  size_t v171;
  size_t v172;
  size_t v173;
  BOOL v174;
  BOOL v175;
  size_t **v176;
  size_t *v177;
  size_t *v178;
  size_t v179;
  size_t v180;
  BOOL v181;
  void *__s2;
  size_t *v185;
  size_t *v186;
  char *v187;
  size_t **v188;
  void *v189;
  size_t *v190;

  v5 = result;
LABEL_2:
  v6 = a2;
  v7 = a2 - 1;
  i = v5;
  while (2)
  {
    v5 = i;
    v9 = (char *)v6 - (char *)i;
    v10 = v6 - i;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v80 = *(a2 - 1);
        v81 = *i;
        v82 = *v80;
        v83 = **i;
        if (v83 >= *v80)
          v84 = *v80;
        else
          v84 = **i;
        if (v84)
        {
          result = (size_t **)memcmp(v80 + 23, v81 + 23, v84);
          if ((result & 0x80000000) == 0)
          {
            v85 = (_DWORD)result || v82 == v83;
            if (v85 || v82 >= v83)
              return result;
          }
        }
        else if (v82 >= v83)
        {
          return result;
        }
        *i = v80;
        *(a2 - 1) = v81;
        return result;
      case 3uLL:
        return sub_1C58970B4(i, i + 1, v7);
      case 4uLL:
        return sub_1C58974C4(i, i + 1, i + 2, v7);
      case 5uLL:
        return sub_1C5896F24(i, i + 1, i + 2, i + 3, v7);
      default:
        if (v9 <= 191)
        {
          v87 = i + 1;
          v89 = i == v6 || v87 == v6;
          if ((a4 & 1) == 0)
          {
            if (v89)
              return result;
            while (1)
            {
              v168 = v5;
              v5 = v87;
              v170 = *v168;
              v169 = v168[1];
              v171 = *v169;
              v172 = **v168;
              if (v172 >= *v169)
                v173 = *v169;
              else
                v173 = **v168;
              if (v173)
              {
                result = (size_t **)memcmp(v169 + 23, v170 + 23, v173);
                if ((result & 0x80000000) != 0
                  || (!(_DWORD)result ? (v174 = v171 == v172) : (v174 = 1),
                      !v174 ? (v175 = v171 >= v172) : (v175 = 1),
                      !v175))
                {
                  while (1)
                  {
LABEL_403:
                    while (1)
                    {
                      v176 = v168;
                      v177 = v170;
                      v178 = *--v168;
                      v170 = v178;
                      v168[2] = v177;
                      v179 = *v178;
                      v180 = *v178 >= v171 ? v171 : v179;
                      if (v180)
                        break;
                      if (v171 >= v179)
                        goto LABEL_418;
                    }
                    result = (size_t **)memcmp(v169 + 23, v170 + 23, v180);
                    if ((result & 0x80000000) == 0)
                    {
                      v181 = (_DWORD)result || v171 == v179;
                      if (v181 || v171 >= v179)
                        break;
                    }
                  }
LABEL_418:
                  *v176 = v169;
                }
              }
              else if (v171 < v172)
              {
                goto LABEL_403;
              }
              v87 = v5 + 1;
              if (v5 + 1 == a2)
                return result;
            }
          }
          if (v89)
            return result;
          v90 = 0;
          v91 = i;
LABEL_223:
          v92 = v91;
          v91 = v87;
          v94 = *v92;
          v93 = v92[1];
          v95 = *v93;
          v96 = **v92;
          if (v96 >= *v93)
            v97 = *v93;
          else
            v97 = **v92;
          if (v97)
          {
            result = (size_t **)memcmp(v93 + 23, v94 + 23, v97);
            if ((result & 0x80000000) == 0)
            {
              v98 = (_DWORD)result || v95 == v96;
              if (v98 || v95 >= v96)
                goto LABEL_260;
            }
          }
          else if (v95 >= v96)
          {
            goto LABEL_260;
          }
          v92[1] = v94;
          v100 = v5;
          if (v92 == v5)
            goto LABEL_259;
          v188 = v91;
          v101 = v90;
          while (1)
          {
            v102 = *(size_t **)((char *)v5 + v101 - 8);
            v103 = *v102;
            if (*v102 >= v95)
              v104 = v95;
            else
              v104 = *v102;
            if (v104)
            {
              result = (size_t **)memcmp(v93 + 23, v102 + 23, v104);
              if ((result & 0x80000000) == 0)
              {
                v105 = (_DWORD)result || v95 == v103;
                if (v105 || v95 >= v103)
                {
                  v100 = (size_t **)((char *)v5 + v101);
                  goto LABEL_258;
                }
              }
            }
            else if (v95 >= v103)
            {
              v100 = v92;
LABEL_258:
              v91 = v188;
LABEL_259:
              *v100 = v93;
LABEL_260:
              v87 = v91 + 1;
              v90 += 8;
              if (v91 + 1 == a2)
                return result;
              goto LABEL_223;
            }
            --v92;
            *(size_t **)((char *)v5 + v101) = v102;
            v101 -= 8;
            if (!v101)
            {
              v100 = v5;
              goto LABEL_258;
            }
          }
        }
        if (!a3)
        {
          if (i == v6)
            return result;
          v107 = (v10 - 2) >> 1;
          v108 = v107;
          while (1)
          {
            v109 = v108;
            if (v107 < v108)
              goto LABEL_330;
            v110 = (2 * v108) | 1;
            v111 = &v5[v110];
            v112 = 2 * v108 + 2;
            v189 = (void *)v108;
            if (v112 < (uint64_t)v10)
            {
              v113 = v111[1];
              v114 = **v111;
              v115 = *v113;
              if (*v113 >= v114)
                v116 = **v111;
              else
                v116 = *v113;
              if (v116 && (result = (size_t **)memcmp(*v111 + 23, v113 + 23, v116), (_DWORD)result))
              {
                v117 = ((int)result >> 31) | 1;
              }
              else
              {
                if (v114 < v115)
                  v117 = -1;
                else
                  v117 = 1;
                if (v114 == v115)
                  v117 = 0;
              }
              if (v117 == -1)
              {
                ++v111;
                v110 = v112;
              }
              v109 = (int64_t)v189;
            }
            v118 = *v111;
            v119 = v5[v109];
            v120 = **v111;
            v121 = *v119;
            if (*v119 >= v120)
              v122 = **v111;
            else
              v122 = *v119;
            if (v122)
            {
              result = (size_t **)memcmp(v118 + 23, v119 + 23, v122);
              if ((result & 0x80000000) != 0)
                goto LABEL_330;
              v123 = (_DWORD)result || v120 == v121;
              if (!v123 && v120 < v121)
                goto LABEL_330;
            }
            else if (v120 < v121)
            {
              goto LABEL_330;
            }
            v5[v109] = v118;
            if (v107 < v110)
            {
              v125 = v111;
              goto LABEL_329;
            }
            __s2 = v119 + 23;
            v186 = v119;
            while (1)
            {
              v126 = 2 * v110;
              v110 = (2 * v110) | 1;
              v125 = &v5[v110];
              v127 = v126 + 2;
              if (v126 + 2 < (uint64_t)v10)
              {
                v128 = v125[1];
                v129 = **v125;
                v130 = *v128;
                if (*v128 >= v129)
                  v131 = **v125;
                else
                  v131 = *v128;
                if (v131 && (result = (size_t **)memcmp(*v125 + 23, v128 + 23, v131), (_DWORD)result))
                {
                  v132 = ((int)result >> 31) | 1;
                }
                else
                {
                  if (v129 < v130)
                    v132 = -1;
                  else
                    v132 = 1;
                  if (v129 == v130)
                    v132 = 0;
                }
                if (v132 == -1)
                {
                  ++v125;
                  v110 = v127;
                }
                v107 = (v10 - 2) >> 1;
                v109 = (int64_t)v189;
              }
              v133 = *v125;
              v134 = **v125;
              if (v121 >= v134)
                v135 = **v125;
              else
                v135 = v121;
              if (!v135)
              {
                if (v134 < v121)
                  break;
                goto LABEL_326;
              }
              result = (size_t **)memcmp(v133 + 23, __s2, v135);
              if ((result & 0x80000000) != 0)
                break;
              v136 = (_DWORD)result || v134 == v121;
              if (!v136 && v134 < v121)
                break;
LABEL_326:
              *v111 = v133;
              v111 = v125;
              v119 = v186;
              if (v107 < v110)
                goto LABEL_329;
            }
            v125 = v111;
            v119 = v186;
LABEL_329:
            *v125 = v119;
LABEL_330:
            v108 = v109 - 1;
            if (!v109)
            {
              while (2)
              {
                v138 = 0;
                v190 = *v5;
                v139 = v5;
                do
                {
                  v140 = &v139[v138 + 1];
                  v141 = (2 * v138) | 1;
                  v142 = 2 * v138 + 2;
                  if (v142 < (uint64_t)v10)
                  {
                    v143 = v139[v138 + 2];
                    v144 = **v140;
                    v145 = *v143;
                    if (*v143 >= v144)
                      v146 = **v140;
                    else
                      v146 = *v143;
                    if (v146 && (result = (size_t **)memcmp(*v140 + 23, v143 + 23, v146), (_DWORD)result))
                    {
                      v147 = ((int)result >> 31) | 1;
                    }
                    else
                    {
                      if (v144 < v145)
                        v147 = -1;
                      else
                        v147 = 1;
                      if (v144 == v145)
                        v147 = 0;
                    }
                    if (v147 == -1)
                    {
                      ++v140;
                      v141 = v142;
                    }
                  }
                  *v139 = *v140;
                  v139 = v140;
                  v138 = v141;
                }
                while (v141 <= (uint64_t)((v10 - 2) >> 1));
                v148 = a2 - 1;
                v18 = v140 == --a2;
                if (v18)
                {
                  *v140 = v190;
                }
                else
                {
                  *v140 = *v148;
                  *v148 = v190;
                  v149 = (char *)v140 - (char *)v5 + 8;
                  if (v149 >= 9)
                  {
                    v150 = ((unint64_t)v149 >> 3) - 2;
                    v151 = v150 >> 1;
                    v152 = &v5[v150 >> 1];
                    v153 = *v152;
                    v154 = *v140;
                    v155 = **v152;
                    v156 = **v140;
                    if (v156 >= v155)
                      v157 = **v152;
                    else
                      v157 = **v140;
                    if (v157)
                    {
                      result = (size_t **)memcmp(v153 + 23, v154 + 23, v157);
                      if ((result & 0x80000000) != 0
                        || (!(_DWORD)result ? (v158 = v155 == v156) : (v158 = 1),
                            !v158 ? (v159 = v155 >= v156) : (v159 = 1),
                            !v159))
                      {
LABEL_365:
                        *v140 = v153;
                        if (v150 >= 2)
                        {
                          while (1)
                          {
                            v161 = v151 - 1;
                            v151 = (v151 - 1) >> 1;
                            v160 = &v5[v151];
                            v162 = *v160;
                            v163 = **v160;
                            if (v156 >= v163)
                              v164 = **v160;
                            else
                              v164 = v156;
                            if (v164)
                            {
                              result = (size_t **)memcmp(v162 + 23, v154 + 23, v164);
                              if ((result & 0x80000000) == 0)
                              {
                                v165 = (_DWORD)result || v163 == v156;
                                if (v165 || v163 >= v156)
                                  break;
                              }
                            }
                            else if (v163 >= v156)
                            {
                              break;
                            }
                            *v152 = v162;
                            v152 = &v5[v151];
                            if (v161 <= 1)
                              goto LABEL_383;
                          }
                        }
                        v160 = v152;
LABEL_383:
                        *v160 = v154;
                      }
                    }
                    else if (v155 < v156)
                    {
                      goto LABEL_365;
                    }
                  }
                }
                if ((uint64_t)v10-- <= 2)
                  return result;
                continue;
              }
            }
          }
        }
        v11 = &i[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C58970B4(&v5[v10 >> 1], v5, v7);
        }
        else
        {
          sub_1C58970B4(v5, &v5[v10 >> 1], v7);
          sub_1C58970B4(v5 + 1, v11 - 1, a2 - 2);
          sub_1C58970B4(v5 + 2, &v5[(v10 >> 1) + 1], a2 - 3);
          result = sub_1C58970B4(v11 - 1, &v5[v10 >> 1], &v5[(v10 >> 1) + 1]);
          v12 = *v5;
          *v5 = *v11;
          *v11 = v12;
        }
        v13 = *v5;
        v14 = **v5;
        v187 = a3 - 1;
        if ((a4 & 1) == 0)
        {
          v15 = *(v5 - 1);
          v16 = *v15;
          if (v14 >= *v15)
            v17 = *v15;
          else
            v17 = **v5;
          if (v17)
          {
            result = (size_t **)memcmp(v15 + 23, v13 + 23, v17);
            if ((result & 0x80000000) != 0)
              goto LABEL_22;
            v18 = (_DWORD)result || v16 == v14;
            v19 = v18 || v16 >= v14;
            if (!v19)
              goto LABEL_22;
          }
          else if (v16 < v14)
          {
            goto LABEL_22;
          }
          v54 = *v7;
          v55 = **v7;
          if (v55 >= v14)
            v56 = v14;
          else
            v56 = **v7;
          if (v56 && (result = (size_t **)memcmp(v13 + 23, v54 + 23, v56), (_DWORD)result))
          {
            if ((result & 0x80000000) != 0)
              goto LABEL_178;
          }
          else if (v14 < v55)
          {
LABEL_178:
            for (i = v5 + 1; ; ++i)
            {
              v76 = **i;
              if (v76 >= v14)
                v77 = v14;
              else
                v77 = **i;
              if (v77)
              {
                result = (size_t **)memcmp(v13 + 23, *i + 23, v77);
                if ((result & 0x80000000) != 0)
                  goto LABEL_131;
                v78 = (_DWORD)result || v14 == v76;
                if (!v78 && v14 < v76)
                  goto LABEL_131;
              }
              else if (v14 < v76)
              {
                goto LABEL_131;
              }
            }
          }
          for (i = v5 + 1; i < a2; ++i)
          {
            v57 = **i;
            if (v57 >= v14)
              v58 = v14;
            else
              v58 = **i;
            if (v58)
            {
              result = (size_t **)memcmp(v13 + 23, *i + 23, v58);
              if ((result & 0x80000000) != 0)
                break;
              v59 = (_DWORD)result || v14 == v57;
              if (!v59 && v14 < v57)
                break;
            }
            else if (v14 < v57)
            {
              break;
            }
          }
LABEL_131:
          j = a2;
          if (i < a2)
          {
            for (j = v7; ; --j)
            {
              if (v55 >= v14)
                v62 = v14;
              else
                v62 = v55;
              if (v62)
              {
                result = (size_t **)memcmp(v13 + 23, v54 + 23, v62);
                if ((result & 0x80000000) == 0 && ((_DWORD)result || v14 == v55 || v14 >= v55))
                  break;
              }
              else if (v14 >= v55)
              {
                break;
              }
              v63 = *(j - 1);
              v54 = v63;
              v55 = *v63;
            }
          }
          if (i < j)
          {
            v64 = *i;
            v65 = *j;
            do
            {
              *i = v65;
              *j = v64;
              v66 = i + 1;
              do
              {
                i = v66;
                v64 = *v66;
                v67 = **v66;
                if (v67 >= v14)
                  v68 = v14;
                else
                  v68 = **v66;
                if (v68 && (result = (size_t **)memcmp(v13 + 23, v64 + 23, v68), (_DWORD)result))
                {
                  v69 = ((int)result >> 31) | 1;
                }
                else if (v14 == v67)
                {
                  v69 = 0;
                }
                else
                {
                  if (v14 < v67)
                    goto LABEL_158;
                  v69 = 1;
                }
                v66 = i + 1;
              }
              while (v69 != -1);
              while (1)
              {
LABEL_158:
                while (1)
                {
                  v70 = *--j;
                  v65 = v70;
                  v71 = *v70;
                  v72 = *v70 >= v14 ? v14 : v71;
                  if (v72)
                    break;
                  if (v14 >= v71)
                    goto LABEL_173;
                }
                result = (size_t **)memcmp(v13 + 23, v65 + 23, v72);
                if ((result & 0x80000000) == 0)
                {
                  v73 = (_DWORD)result || v14 == v71;
                  if (v73 || v14 >= v71)
                    break;
                }
              }
LABEL_173:
              v7 = a2 - 1;
            }
            while (i < j);
          }
          v75 = i - 1;
          if (i - 1 != v5)
            *v5 = *v75;
          a4 = 0;
          *v75 = v13;
          --a3;
          v6 = a2;
          continue;
        }
LABEL_22:
        v185 = v13;
        v20 = v13 + 23;
        for (k = 1; ; ++k)
        {
          v22 = v5[k];
          v23 = *v22;
          v24 = v14 >= *v22 ? *v22 : v14;
          if (v24)
            break;
          if (v23 >= v14)
            goto LABEL_39;
LABEL_38:
          ;
        }
        v25 = memcmp(v22 + 23, v13 + 23, v24);
        if (v25 < 0)
          goto LABEL_38;
        v26 = v25 || v23 == v14;
        if (!v26 && v23 < v14)
          goto LABEL_38;
LABEL_39:
        v28 = &v5[k];
        m = v7;
        if (k != 1)
        {
          while (1)
          {
            v30 = **m;
            if (v14 >= v30)
              v31 = **m;
            else
              v31 = v14;
            if (v31)
            {
              v32 = memcmp(*m + 23, v13 + 23, v31);
              if (v32 < 0)
                goto LABEL_72;
              v33 = v32 || v30 == v14;
              if (!v33 && v30 < v14)
                goto LABEL_72;
            }
            else if (v30 < v14)
            {
              goto LABEL_72;
            }
            --m;
          }
        }
        m = a2;
        if (v28 < a2)
        {
          for (m = v7; ; --m)
          {
            v35 = **m;
            if (v14 >= v35)
              v36 = **m;
            else
              v36 = v14;
            if (v36)
            {
              v37 = memcmp(*m + 23, v13 + 23, v36);
              if (v37 < 0)
                break;
              v38 = v37 != 0;
              if (v35 == v14)
                v38 = 1;
              if (v35 >= v14)
                v38 = 1;
              if (v28 >= m || !v38)
                break;
            }
            else if (v28 >= m || v35 < v14)
            {
              break;
            }
          }
        }
LABEL_72:
        if (v28 >= m)
        {
          i = v28;
        }
        else
        {
          v39 = *m;
          i = v28;
          v40 = m;
          do
          {
            *i = v39;
            *v40 = v22;
            v41 = i + 1;
            do
            {
              i = v41;
              v22 = *v41;
              v42 = **v41;
              if (v14 >= v42)
                v43 = **v41;
              else
                v43 = v14;
              if (v43 && (v44 = memcmp(v22 + 23, v20, v43)) != 0)
              {
                v45 = (v44 >> 31) | 1;
              }
              else
              {
                if (v42 >= v14)
                  goto LABEL_84;
                v45 = -1;
              }
              v41 = i + 1;
            }
            while (v45 == -1);
            do
            {
LABEL_84:
              while (1)
              {
                v46 = *--v40;
                v39 = v46;
                v47 = *v46;
                v48 = v14 >= *v46 ? v47 : v14;
                if (v48)
                  break;
                if (v47 < v14)
                  goto LABEL_98;
              }
              v49 = memcmp(v39 + 23, v20, v48);
              if (v49 < 0)
                break;
              v50 = v49 || v47 == v14;
            }
            while (v50 || v47 >= v14);
LABEL_98:
            ;
          }
          while (i < v40);
        }
        v52 = i - 1;
        if (i - 1 != v5)
          *v5 = *v52;
        v7 = a2 - 1;
        *v52 = v185;
        v19 = v28 >= m;
        a3 = v187;
        v6 = a2;
        if (!v19)
        {
LABEL_107:
          result = (size_t **)sub_1C58962BC(v5, i - 1, v187, a4 & 1);
          a4 = 0;
          continue;
        }
        v53 = sub_1C589726C(v5, i - 1);
        result = (size_t **)sub_1C589726C(i, a2);
        if (!(_DWORD)result)
        {
          if (v53)
            continue;
          goto LABEL_107;
        }
        a2 = i - 1;
        if (!v53)
          goto LABEL_2;
        return result;
    }
  }
}

