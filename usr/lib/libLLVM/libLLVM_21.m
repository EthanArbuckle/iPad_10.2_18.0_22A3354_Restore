_QWORD *sub_1C50F392C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C50F3A5C(a1, v7);
      v17 = 0;
      sub_1C4926528(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C50F3A5C(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C50F3A5C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C50F3B14((uint64_t *)a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C50F3B14(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((unsigned int *)result + 4);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v10 = *((_DWORD *)v5 + 4) - 1;
        v11 = v10 & ((v9 >> 4) ^ (v9 >> 9));
        v12 = (_QWORD *)(*v5 + 16 * v11);
        v13 = *v12;
        if (v9 != *v12)
        {
          v14 = 0;
          v15 = 1;
          while (v13 != -4096)
          {
            if (v14)
              v16 = 0;
            else
              v16 = v13 == -8192;
            if (v16)
              v14 = v12;
            v17 = v11 + v15++;
            v11 = v17 & v10;
            v12 = (_QWORD *)(*v5 + 16 * (v17 & v10));
            v13 = *v12;
            if (v9 == *v12)
              goto LABEL_18;
          }
          if (v14)
            v12 = v14;
        }
LABEL_18:
        *v12 = v9;
        v18 = v4[1];
        v4[1] = 0;
        v12[1] = v18;
        ++*((_DWORD *)v5 + 2);
        result = sub_1C48680A4(v4 + 1);
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1C50F3C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a3 + 24);
    LODWORD(v8) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (uint64_t *)(v7 + 16 * v8);
    v10 = *v9;
    if (*v9 == a2)
    {
LABEL_7:
      if (v9 != (uint64_t *)(v7 + 16 * v6))
      {
        result = v9[1];
        if (result)
          return result;
      }
    }
    else
    {
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v6 - 1);
        v10 = *(_QWORD *)(v7 + 16 * v8);
        if (v10 == a2)
        {
          v9 = (uint64_t *)(v7 + 16 * v8);
          goto LABEL_7;
        }
      }
    }
  }
  v14 = sub_1C50F1E18((uint64_t *)(a1 + 24), a2);
  if ((uint64_t *)(*(_QWORD *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40)) == v14)
    v15 = 0;
  else
    v15 = v14[4];
  v16 = sub_1C50F3C1C(a1, v15, a3);
  return llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::createChild(a3, a2, v16);
}

void llvm::LexicalScopes::reset(llvm::LexicalScopes *this)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;
  uint64_t k;
  _QWORD *v10;
  uint64_t v11;
  void ***v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 22) = 0;
  if (*((_QWORD *)this + 4))
  {
    v3 = (_QWORD *)((char *)this + 8);
    sub_1C50F5C48((_DWORD)this + 8, *((_QWORD **)this + 3));
    *((_QWORD *)this + 3) = 0;
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*v3 + 8 * i) = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
  if (*((_QWORD *)this + 14))
  {
    sub_1C50F5C48((_DWORD)this + 88, *((_QWORD **)this + 13));
    *((_QWORD *)this + 13) = 0;
    v6 = *((_QWORD *)this + 12);
    if (v6)
    {
      for (j = 0; j != v6; ++j)
        *(_QWORD *)(*((_QWORD *)this + 11) + 8 * j) = 0;
    }
    *((_QWORD *)this + 14) = 0;
  }
  if (*((_QWORD *)this + 9))
  {
    sub_1C50F5CB0((_DWORD)this + 48, *((_QWORD **)this + 8));
    *((_QWORD *)this + 8) = 0;
    v8 = *((_QWORD *)this + 7);
    if (v8)
    {
      for (k = 0; k != v8; ++k)
        *(_QWORD *)(*((_QWORD *)this + 6) + 8 * k) = 0;
    }
    *((_QWORD *)this + 9) = 0;
  }
  *((_DWORD *)this + 34) = 0;
  v2 = *((_DWORD *)this + 48);
  if (v2 || *((_DWORD *)this + 49))
  {
    v10 = (_QWORD *)((char *)this + 184);
    v11 = *((unsigned int *)this + 50);
    if (v11 > 4 * v2 && v11 >= 0x41)
    {
      sub_1C50F5D18(v10);
    }
    else
    {
      if ((_DWORD)v11)
      {
        v12 = (void ***)(*v10 + 8);
        v13 = 16 * v11;
        do
        {
          v14 = (uint64_t)*(v12 - 1);
          if (v14 != -4096)
          {
            if (v14 != -8192)
              sub_1C50F65EC(v12, 0);
            *(v12 - 1) = (void **)-4096;
          }
          v12 += 2;
          v13 -= 16;
        }
        while (v13);
      }
      *((_QWORD *)this + 24) = 0;
    }
  }
}

void llvm::LexicalScopes::initialize(llvm::LexicalScopes *this, uint64_t ****a2)
{
  uint64_t ***v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t ****v10;
  uint64_t ***v11;
  uint64_t ***v12;
  uint64_t v13;
  int v14;
  llvm::LexicalScopes *LexicalScopes;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ****v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t ****v23;
  uint64_t ***v24;
  uint64_t v25[2];
  int v26;
  void *v27[2];
  _QWORD v28[9];

  v28[8] = *MEMORY[0x1E0C80C00];
  llvm::LexicalScopes::reset(this);
  v4 = *a2;
  v5 = ****a2;
  v27[0] = *a2;
  v6 = *(_DWORD *)(v5 + 2496);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 2480);
    v8 = v6 - 1;
    v9 = v8 & ((v4 >> 4) ^ (v4 >> 9));
    v10 = (uint64_t ****)(v7 + 40 * v9);
    v11 = *v10;
    if (*v10 == v4)
      goto LABEL_3;
    v19 = 0;
    v20 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      if (v19)
        v21 = 0;
      else
        v21 = v11 == (uint64_t ***)-8192;
      if (v21)
        v19 = v10;
      v22 = v9 + v20++;
      v9 = v22 & v8;
      v10 = (uint64_t ****)(v7 + 40 * v9);
      v11 = *v10;
      if (*v10 == v4)
        goto LABEL_3;
    }
    if (v19)
      v23 = v19;
    else
      v23 = v10;
  }
  else
  {
    v23 = 0;
  }
  v10 = (uint64_t ****)sub_1C541AB24(v5 + 2480, (uint64_t)v27, (uint64_t *)v27, v23);
  v24 = (uint64_t ***)v27[0];
  v10[3] = 0;
  v10[4] = 0;
  *v10 = v24;
  v10[1] = (uint64_t ***)(v10 + 3);
  v10[2] = (uint64_t ***)0x100000000;
LABEL_3:
  v12 = v10[1];
  if (*(_DWORD *)v12)
  {
    v13 = 16 * *((unsigned int *)v10 + 4) - 16;
    do
    {
      v14 = *((_DWORD *)v12 + 4);
      v12 += 2;
      v13 -= 16;
    }
    while (v14);
  }
  if (*((_DWORD *)v12[1][-*((unsigned int *)v12[1] + 2) + 5] + 9))
  {
    *(_QWORD *)this = a2;
    v27[0] = v28;
    v27[1] = (void *)0x400000000;
    v25[0] = 0;
    v25[1] = 0;
    v26 = 0;
    LexicalScopes = llvm::LexicalScopes::extractLexicalScopes(this, (uint64_t)v27, (uint64_t)v25);
    v17 = *((_QWORD *)this + 22);
    if (v17)
    {
      llvm::LexicalScopes::constructScopeNest((uint64_t)LexicalScopes, v17);
      v16.n128_f64[0] = llvm::LexicalScopes::assignInstructionRanges(v18, (uint64_t)v27, v25);
    }
    MEMORY[0x1CAA32FB4](v25[0], 8, v16);
    if (v27[0] != v28)
      free(v27[0]);
  }
}

llvm::LexicalScopes *llvm::LexicalScopes::extractLexicalScopes(llvm::LexicalScopes *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unint64_t *i;
  const llvm::DILocalScope *v16;
  unsigned int *v17;
  unint64_t v18;
  _QWORD *RegularScope;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  const llvm::DILocalScope **v34;
  const llvm::DILocalScope *v35;
  unsigned int *v36;
  const llvm::DILocalScope *v37;
  uint64_t v38;
  unsigned int *v39;
  _QWORD *InlinedScope;
  _QWORD *v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::LexicalScopes *v54;
  uint64_t v55;

  v54 = result;
  v3 = *(_QWORD *)(*(_QWORD *)result + 328);
  v52 = *(_QWORD *)result + 320;
  if (v3 == v52)
    return result;
  v51 = a2 + 16;
  do
  {
    v55 = 0;
    v6 = v3 + 48;
    v7 = *(_QWORD *)(v3 + 56);
    if (v7 == v3 + 48)
      goto LABEL_88;
    v53 = v3;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v7 + 16) + 8) & 0x10) != 0)
      {
        v12 = v10;
        goto LABEL_47;
      }
      v12 = *(_QWORD **)(v7 + 56);
      if (v12)
        v13 = v12 == v10;
      else
        v13 = 1;
      if (v13)
      {
        v12 = v10;
LABEL_46:
        v11 = v7;
LABEL_47:
        if ((*(_BYTE *)v7 & 4) != 0)
          goto LABEL_52;
        goto LABEL_51;
      }
      if (!v9)
      {
        v55 = v7;
LABEL_45:
        v8 = v7;
        v9 = v7;
        goto LABEL_46;
      }
      if (v10)
      {
        v14 = *((unsigned int *)v10 + 2);
        for (i = &v10[-v14]; ; i = (unint64_t *)&v17[-2 * v14])
        {
          v16 = (const llvm::DILocalScope *)*i;
          if ((_DWORD)v14 != 2 || (v17 = (unsigned int *)i[1]) == 0)
          {
            RegularScope = llvm::LexicalScopes::getOrCreateRegularScope(v54, *i);
            goto LABEL_26;
          }
          v18 = *i;
          if ((*(_BYTE *)v16 & 0xFE) == 0x12)
          {
            v18 = (unint64_t)v16;
            do
              v18 = *(_QWORD *)(v18 - 8 * *(unsigned int *)(v18 + 8) + 8);
            while ((*(_BYTE *)v18 & 0xFE) == 0x12);
          }
          if (*(_DWORD *)(*(_QWORD *)(v18 - 8 * *(unsigned int *)(v18 + 8) + 40) + 36))
            break;
          v14 = v17[2];
        }
        llvm::LexicalScopes::getOrCreateAbstractScope(v54, (unint64_t)v16);
        RegularScope = llvm::LexicalScopes::getOrCreateInlinedScope((int8x8_t *)v54, v16, (const llvm::DILocation *)v17);
LABEL_26:
        v10 = RegularScope;
      }
      v20 = *(_DWORD *)(a3 + 16);
      if (v20)
      {
        v21 = v20 - 1;
        v22 = v21 & ((v9 >> 4) ^ (v9 >> 9));
        result = (llvm::LexicalScopes *)(*(_QWORD *)a3 + 16 * v22);
        v23 = *(_QWORD *)result;
        if (v9 == *(_QWORD *)result)
          goto LABEL_42;
        v24 = 0;
        v25 = 1;
        while (v23 != -4096)
        {
          if (v24)
            v26 = 0;
          else
            v26 = v23 == -8192;
          if (v26)
            v24 = (uint64_t *)result;
          v27 = v22 + v25++;
          v22 = v27 & v21;
          result = (llvm::LexicalScopes *)(*(_QWORD *)a3 + 16 * v22);
          v23 = *(_QWORD *)result;
          if (v9 == *(_QWORD *)result)
            goto LABEL_42;
        }
        if (v24)
          v28 = v24;
        else
          v28 = (uint64_t *)result;
      }
      else
      {
        v28 = 0;
      }
      result = (llvm::LexicalScopes *)sub_1C50F5E68(a3, &v55, v28);
      *(_QWORD *)result = v9;
      *((_QWORD *)result + 1) = 0;
LABEL_42:
      *((_QWORD *)result + 1) = v10;
      v29 = *(unsigned int *)(a2 + 8);
      if (v29 >= *(unsigned int *)(a2 + 12))
      {
        result = (llvm::LexicalScopes *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v51, v29 + 1, 16);
        v29 = *(unsigned int *)(a2 + 8);
      }
      v30 = (uint64_t *)(*(_QWORD *)a2 + 16 * v29);
      *v30 = v9;
      v30[1] = v11;
      ++*(_DWORD *)(a2 + 8);
      v55 = v7;
      if (v7)
        goto LABEL_45;
      v8 = 0;
      v9 = 0;
      v11 = 0;
LABEL_51:
      while ((*(_WORD *)(v7 + 44) & 8) != 0)
        v7 = *(_QWORD *)(v7 + 8);
LABEL_52:
      v10 = v12;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
    v3 = v53;
    if (v8 && v11 && v10)
    {
      v31 = *(unsigned int *)(a2 + 8);
      if (v31 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v51, v31 + 1, 16);
        v31 = *(unsigned int *)(a2 + 8);
      }
      v32 = (uint64_t *)(*(_QWORD *)a2 + 16 * v31);
      *v32 = v8;
      v32[1] = v11;
      ++*(_DWORD *)(a2 + 8);
      v33 = *((unsigned int *)v10 + 2);
      v34 = (const llvm::DILocalScope **)&v10[-v33];
      v35 = *v34;
      if ((_DWORD)v33 == 2)
      {
        v36 = (unsigned int *)v34[1];
        if (v36)
        {
          while (1)
          {
            v37 = v35;
            if ((*(_BYTE *)v35 & 0xFE) == 0x12)
            {
              v37 = v35;
              do
                v37 = (const llvm::DILocalScope *)((_QWORD *)v37 - *((unsigned int *)v37 + 2))[1];
              while ((*(_BYTE *)v37 & 0xFE) == 0x12);
            }
            if (*(_DWORD *)(((_QWORD *)v37 - *((unsigned int *)v37 + 2))[5] + 36))
            {
              llvm::LexicalScopes::getOrCreateAbstractScope(v54, (unint64_t)v35);
              InlinedScope = llvm::LexicalScopes::getOrCreateInlinedScope((int8x8_t *)v54, v35, (const llvm::DILocation *)v36);
              goto LABEL_72;
            }
            v38 = v36[2];
            v39 = &v36[-2 * v38];
            v35 = *(const llvm::DILocalScope **)v39;
            if ((_DWORD)v38 != 2)
              break;
            v36 = (unsigned int *)*((_QWORD *)v39 + 1);
            v3 = v53;
            if (!v36)
              goto LABEL_71;
          }
          v3 = v53;
        }
      }
LABEL_71:
      InlinedScope = llvm::LexicalScopes::getOrCreateRegularScope(v54, (unint64_t)v35);
LABEL_72:
      v41 = InlinedScope;
      v42 = *(_DWORD *)(a3 + 16);
      if (!v42)
      {
        v50 = 0;
        goto LABEL_86;
      }
      v43 = v42 - 1;
      v44 = v43 & ((v8 >> 4) ^ (v8 >> 9));
      result = (llvm::LexicalScopes *)(*(_QWORD *)a3 + 16 * v44);
      v45 = *(_QWORD *)result;
      if (v8 != *(_QWORD *)result)
      {
        v46 = 0;
        v47 = 1;
        while (v45 != -4096)
        {
          if (v46)
            v48 = 0;
          else
            v48 = v45 == -8192;
          if (v48)
            v46 = (uint64_t *)result;
          v49 = v44 + v47++;
          v44 = v49 & v43;
          result = (llvm::LexicalScopes *)(*(_QWORD *)a3 + 16 * v44);
          v45 = *(_QWORD *)result;
          if (v8 == *(_QWORD *)result)
            goto LABEL_87;
        }
        if (v46)
          v50 = v46;
        else
          v50 = (uint64_t *)result;
LABEL_86:
        result = (llvm::LexicalScopes *)sub_1C50F5E68(a3, &v55, v50);
        *(_QWORD *)result = v8;
        *((_QWORD *)result + 1) = 0;
      }
LABEL_87:
      *((_QWORD *)result + 1) = v41;
    }
LABEL_88:
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3 != v52);
  return result;
}

void llvm::LexicalScopes::constructScopeNest(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v2 = 0;
  v14[8] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v14[0] = a2;
  v14[1] = 0;
  v13 = 0x400000001;
  v3 = 1;
  do
  {
    while (1)
    {
      v4 = (char *)v12;
      v5 = v3;
      v6 = (char *)v12 + 16 * v3;
      v7 = *((_QWORD *)v6 - 2);
      v8 = *((_QWORD *)v6 - 1);
      *((_QWORD *)v6 - 1) = v8 + 1;
      if (v8 < *(unsigned int *)(v7 + 40))
        break;
      v3 = v5 - 1;
      LODWORD(v13) = v5 - 1;
      *(_DWORD *)(v7 + 180) = ++v2;
      if ((_DWORD)v5 == 1)
        goto LABEL_8;
    }
    v9 = *(_QWORD *)(v7 + 32);
    v10 = *(_QWORD *)(v9 + 8 * v8);
    if (v5 >= HIDWORD(v13))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, (uint64_t)v14, v5 + 1, 16);
      v4 = (char *)v12;
      v5 = v13;
    }
    v11 = &v4[16 * v5];
    *(_QWORD *)v11 = v10;
    *((_QWORD *)v11 + 1) = 0;
    LODWORD(v13) = v13 + 1;
    v3 = v13;
    *(_DWORD *)(*(_QWORD *)(v9 + 8 * v8) + 176) = ++v2;
  }
  while (v3);
LABEL_8:
  if (v12 != v14)
    free(v12);
}

double llvm::LexicalScopes::assignInstructionRanges(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int8x16_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int8x16_t *v16;
  double result;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = *(uint64_t **)a2;
    v7 = *(_QWORD *)a2 + 16 * v3;
    while (1)
    {
      v8 = *v6;
      v9 = *((_DWORD *)a3 + 4);
      if (v9)
      {
        v10 = *a3;
        v11 = v9 - 1;
        v12 = ((v8 >> 4) ^ (v8 >> 9)) & (v9 - 1);
        v13 = *(_QWORD *)(*a3 + 16 * v12);
        if (v8 == v13)
        {
LABEL_8:
          v16 = *(int8x16_t **)(v10 + 16 * v12 + 8);
          if (v5)
            goto LABEL_11;
          goto LABEL_15;
        }
        v14 = 1;
        while (v13 != -4096)
        {
          v15 = v12 + v14++;
          v12 = v15 & v11;
          v13 = *(_QWORD *)(v10 + 16 * v12);
          if (v8 == v13)
            goto LABEL_8;
        }
      }
      v16 = 0;
      if (v5)
      {
LABEL_11:
        if (v16 != v5
          && (v5[11].i32[0] >= (unsigned __int32)v16[11].i32[0] || v5[11].i32[1] <= (unsigned __int32)v16[11].i32[1]))
        {
          *(_QWORD *)&result = sub_1C50F538C(v5, v16).u64[0];
          v8 = *v6;
        }
      }
LABEL_15:
      v18 = (uint64_t *)v16;
      do
      {
        if (!v18[21])
          v18[21] = v8;
        v18 = (uint64_t *)*v18;
      }
      while (v18);
      v19 = v6[1];
      v20 = (uint64_t *)v16;
      do
      {
        v20[20] = v19;
        v20 = (uint64_t *)*v20;
      }
      while (v20);
      v6 += 2;
      v5 = v16;
      if (v6 == (uint64_t *)v7)
      {
        if (v16)
          *(_QWORD *)&result = sub_1C50F538C(v16, 0).u64[0];
        return result;
      }
    }
  }
  return result;
}

_QWORD *llvm::LexicalScopes::findLexicalScope(int8x8_t *this, const llvm::DILocation *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;

  v2 = *((unsigned int *)a2 + 2);
  v3 = *((_QWORD *)a2 - v2);
  if (!v3)
    return 0;
  while (*(_BYTE *)v3 == 19)
    v3 = *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 8);
  if ((_DWORD)v2 != 2 || (v4 = *((_QWORD *)a2 - 1)) == 0)
  {
    v21 = v3;
    v20 = sub_1C50F5B58(&this[1], &v21);
    v18 = v20 + 3;
    v19 = v20 == 0;
    goto LABEL_27;
  }
  v5 = this[7];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = 0x9DDFEA08EB382D69 * (((8 * v3) + 8) ^ HIDWORD(v3));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v3) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v8 >> 47) ^ v8);
  v10 = 0x1E1D57147BCD7FB7 * (v7 ^ (v7 >> 47)) - 0x622015F714C7D297 * (v9 ^ (v9 >> 47));
  v11 = (uint8x8_t)vcnt_s8(v5);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] <= 1uLL)
    v12 = (*(_QWORD *)&v5 - 1) & v10;
  else
    v12 = v10 < *(_QWORD *)&v5 ? v10 : v10 % *(_QWORD *)&v5;
  v13 = *(_QWORD **)(*(_QWORD *)&this[6] + 8 * v12);
  if (!v13)
    return 0;
  v14 = (_QWORD *)*v13;
  if (!v14)
    return 0;
  while (1)
  {
    v15 = v14[1];
    if (v15 != v10)
      break;
    if (v14[2] == v3 && v14[3] == v4)
      goto LABEL_26;
LABEL_22:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_26;
  }
  if (v11.u32[0] <= 1uLL)
  {
    v15 &= *(_QWORD *)&v5 - 1;
  }
  else if (v15 >= *(_QWORD *)&v5)
  {
    v15 %= *(_QWORD *)&v5;
  }
  if (v15 == v12)
    goto LABEL_22;
  v14 = 0;
LABEL_26:
  v18 = v14 + 4;
  v19 = v14 == 0;
LABEL_27:
  if (v19)
    return 0;
  else
    return v18;
}

_QWORD *llvm::LexicalScopes::getOrCreateLexicalScope(llvm::LexicalScopes *this, const llvm::DILocalScope *a2, const llvm::DILocation *a3)
{
  unsigned int *v6;
  const llvm::DILocalScope *v7;
  uint64_t v8;
  unsigned int *v9;

  if (!a3)
    return llvm::LexicalScopes::getOrCreateRegularScope(this, (unint64_t)a2);
  v6 = (unsigned int *)a3;
  while (1)
  {
    v7 = a2;
    if ((*(_BYTE *)a2 & 0xFE) == 0x12)
    {
      v7 = a2;
      do
        v7 = (const llvm::DILocalScope *)((_QWORD *)v7 - *((unsigned int *)v7 + 2))[1];
      while ((*(_BYTE *)v7 & 0xFE) == 0x12);
    }
    if (*(_DWORD *)(((_QWORD *)v7 - *((unsigned int *)v7 + 2))[5] + 36))
      break;
    v8 = v6[2];
    v9 = &v6[-2 * v8];
    a2 = *(const llvm::DILocalScope **)v9;
    if ((_DWORD)v8 == 2)
    {
      v6 = (unsigned int *)*((_QWORD *)v9 + 1);
      if (v6)
        continue;
    }
    return llvm::LexicalScopes::getOrCreateRegularScope(this, (unint64_t)a2);
  }
  llvm::LexicalScopes::getOrCreateAbstractScope(this, (unint64_t)a2);
  return llvm::LexicalScopes::getOrCreateInlinedScope((int8x8_t *)this, a2, (const llvm::DILocation *)v6);
}

_QWORD *llvm::LexicalScopes::getOrCreateAbstractScope(llvm::LexicalScopes *this, unint64_t a2)
{
  int v3;
  int8x8_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  _QWORD v19[4];
  uint64_t AbstractScope;
  _BYTE *v21;

  while (1)
  {
    v3 = *(unsigned __int8 *)a2;
    if (v3 != 19)
      break;
    a2 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  }
  v21 = (_BYTE *)a2;
  v4 = *(int8x8_t *)((char *)this + 96);
  if (v4)
  {
    v5 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    v6 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v5 >> 47) ^ v5);
    v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
      v9 = v7 < *(_QWORD *)&v4 ? v7 : v7 % *(_QWORD *)&v4;
    else
      v9 = v7 & (*(_QWORD *)&v4 - 1);
    v10 = *(_QWORD **)(*((_QWORD *)this + 11) + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == a2)
              return v11 + 3;
          }
          else
          {
            if (v8.u32[0] <= 1uLL)
            {
              v12 &= *(_QWORD *)&v4 - 1;
            }
            else if (v12 >= *(_QWORD *)&v4)
            {
              v12 %= *(_QWORD *)&v4;
            }
            if (v12 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  AbstractScope = 0;
  if ((v3 & 0xFE) == 0x12)
    AbstractScope = llvm::LexicalScopes::getOrCreateAbstractScope(this, *(const llvm::DILocalScope **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
  v17 = 1;
  v18 = 0;
  v19[0] = &AbstractScope;
  v19[1] = &v21;
  v19[2] = &v18;
  v19[3] = &v17;
  v11 = sub_1C50F5F9C((float *)this + 22, &v21, (uint64_t)v19);
  if (*v21 == 17)
  {
    v13 = v11 + 3;
    v14 = *((unsigned int *)this + 34);
    if (v14 >= *((_DWORD *)this + 35))
    {
      v16 = v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 128, (uint64_t)this + 144, v14 + 1, 8);
      v11 = v16;
      LODWORD(v14) = *((_DWORD *)this + 34);
    }
    *(_QWORD *)(*((_QWORD *)this + 16) + 8 * v14) = v13;
    ++*((_DWORD *)this + 34);
  }
  return v11 + 3;
}

_QWORD *llvm::LexicalScopes::getOrCreateInlinedScope(int8x8_t *this, const llvm::DILocalScope *a2, const llvm::DILocation *a3)
{
  const llvm::DILocation *v3;
  unint64_t v4;
  llvm::LexicalScopes *v5;
  int i;
  int8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD *j;
  unint64_t v17;
  const llvm::DILocalScope *v19;
  _QWORD *RegularScope;
  uint64_t v21;
  unint64_t *k;
  const llvm::DILocalScope *v23;
  unsigned int *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  float v41;
  float v42;
  _BOOL8 v43;
  unint64_t v44;
  unint64_t v45;
  int8x8_t prime;
  void *v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  uint8x8_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;

  v3 = a3;
  v4 = (unint64_t)a2;
  v5 = (llvm::LexicalScopes *)this;
  for (i = *(unsigned __int8 *)a2; i == 19; i = *(unsigned __int8 *)v4)
    v4 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8);
  v7 = this[7];
  if (v7)
  {
    v8 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
    v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v8 >> 47) ^ v8);
    v10 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)a3) + 8) ^ ((unint64_t)a3 >> 32));
    v11 = 0x9DDFEA08EB382D69 * (((unint64_t)a3 >> 32) ^ (v10 >> 47) ^ v10);
    v12 = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47)) + 0x1E1D57147BCD7FB7 * (v9 ^ (v9 >> 47));
    v13 = (uint8x8_t)vcnt_s8(v7);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] <= 1uLL)
      v14 = v12 & (*(_QWORD *)&v7 - 1);
    else
      v14 = v12 < *(_QWORD *)&v7 ? v12 : v12 % *(_QWORD *)&v7;
    v15 = *(_QWORD ***)(*(_QWORD *)&this[6] + 8 * v14);
    if (v15)
    {
      for (j = *v15; j; j = (_QWORD *)*j)
      {
        v17 = j[1];
        if (v17 == v12)
        {
          if (j[2] == v4 && j[3] == (_QWORD)a3)
            return j + 4;
        }
        else
        {
          if (v13.u32[0] <= 1uLL)
          {
            v17 &= *(_QWORD *)&v7 - 1;
          }
          else if (v17 >= *(_QWORD *)&v7)
          {
            v17 %= *(_QWORD *)&v7;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  if ((i & 0xFE) == 0x12)
  {
    v19 = *(const llvm::DILocalScope **)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8);
  }
  else
  {
    if (!a3)
    {
      v26 = 0;
      goto LABEL_37;
    }
    v21 = *((unsigned int *)a3 + 2);
    for (k = (unint64_t *)((char *)a3 - 8 * v21); ; k = (unint64_t *)&v24[-2 * v21])
    {
      v23 = (const llvm::DILocalScope *)*k;
      if ((_DWORD)v21 != 2 || (v24 = (unsigned int *)k[1]) == 0)
      {
        RegularScope = llvm::LexicalScopes::getOrCreateRegularScope((llvm::LexicalScopes *)this, *k);
        goto LABEL_36;
      }
      v25 = *k;
      if ((*(_BYTE *)v23 & 0xFE) == 0x12)
      {
        v25 = (unint64_t)v23;
        do
          v25 = *(_QWORD *)(v25 - 8 * *(unsigned int *)(v25 + 8) + 8);
        while ((*(_BYTE *)v25 & 0xFE) == 0x12);
      }
      if (*(_DWORD *)(*(_QWORD *)(v25 - 8 * *(unsigned int *)(v25 + 8) + 40) + 36))
        break;
      v21 = v24[2];
    }
    llvm::LexicalScopes::getOrCreateAbstractScope((llvm::LexicalScopes *)this, (unint64_t)v23);
    this = (int8x8_t *)v5;
    v19 = v23;
    a3 = (const llvm::DILocation *)v24;
  }
  RegularScope = (_QWORD *)llvm::LexicalScopes::getOrCreateInlinedScope((llvm::LexicalScopes *)this, v19, a3);
LABEL_36:
  v26 = (uint64_t)RegularScope;
LABEL_37:
  j = operator new(0xD8uLL);
  *j = 0;
  j[1] = 0;
  j[2] = v4;
  j[3] = v3;
  sub_1C50F63EC((uint64_t)(j + 4), v26, v4, (uint64_t)v3, 0);
  v27 = j[2];
  v28 = j[3];
  v29 = 0x9DDFEA08EB382D69 * (((8 * v27) + 8) ^ HIDWORD(v27));
  v30 = 0x9DDFEA08EB382D69 * (HIDWORD(v27) ^ (v29 >> 47) ^ v29);
  v31 = 0x9DDFEA08EB382D69 * (((8 * v28) + 8) ^ HIDWORD(v28));
  v32 = 0x9DDFEA08EB382D69 * (HIDWORD(v28) ^ (v31 >> 47) ^ v31);
  v33 = 0x1E1D57147BCD7FB7 * (v30 ^ (v30 >> 47)) - 0x622015F714C7D297 * (v32 ^ (v32 >> 47));
  j[1] = v33;
  v34 = *((_QWORD *)v5 + 7);
  if (!v34)
    goto LABEL_57;
  v35 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
  v35.i16[0] = vaddlv_u8(v35);
  if (v35.u32[0] > 1uLL)
  {
    v36 = v33;
    if (v34 <= v33)
      v36 = v33 % v34;
  }
  else
  {
    v36 = v33 & (v34 - 1);
  }
  v37 = *(_QWORD **)(*((_QWORD *)v5 + 6) + 8 * v36);
  if (!v37 || (v38 = (_QWORD *)*v37) == 0)
  {
LABEL_57:
    v41 = (float)(unint64_t)(*((_QWORD *)v5 + 9) + 1);
    v42 = *((float *)v5 + 20);
    if (!v34 || (float)(v42 * (float)v34) < v41)
    {
      v43 = 1;
      if (v34 >= 3)
        v43 = (v34 & (v34 - 1)) != 0;
      v44 = v43 | (2 * v34);
      v45 = vcvtps_u32_f32(v41 / v42);
      if (v44 <= v45)
        prime = (int8x8_t)v45;
      else
        prime = (int8x8_t)v44;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v34 = *((_QWORD *)v5 + 7);
      }
      if (*(_QWORD *)&prime > v34)
        goto LABEL_134;
      if (*(_QWORD *)&prime >= v34)
        goto LABEL_101;
      v53 = vcvtps_u32_f32((float)*((unint64_t *)v5 + 9) / *((float *)v5 + 20));
      if (v34 < 3 || (v54 = (uint8x8_t)vcnt_s8((int8x8_t)v34), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
      {
        v53 = std::__next_prime(v53);
      }
      else
      {
        v55 = 1 << -(char)__clz(v53 - 1);
        if (v53 >= 2)
          v53 = v55;
      }
      if (*(_QWORD *)&prime <= v53)
        prime = (int8x8_t)v53;
      if (*(_QWORD *)&prime >= v34)
      {
        v34 = *((_QWORD *)v5 + 7);
        goto LABEL_101;
      }
      if (prime)
      {
LABEL_134:
        if (*(_QWORD *)&prime >> 61)
          sub_1C4764EE4();
        v47 = operator new(8 * *(_QWORD *)&prime);
        v48 = (void *)*((_QWORD *)v5 + 6);
        *((_QWORD *)v5 + 6) = v47;
        if (v48)
          operator delete(v48);
        v49 = 0;
        *((int8x8_t *)v5 + 7) = prime;
        do
          *(_QWORD *)(*((_QWORD *)v5 + 6) + 8 * v49++) = 0;
        while (*(_QWORD *)&prime != v49);
        v50 = (_QWORD *)*((_QWORD *)v5 + 8);
        if (v50)
        {
          v51 = v50[1];
          v52 = (uint8x8_t)vcnt_s8(prime);
          v52.i16[0] = vaddlv_u8(v52);
          if (v52.u32[0] > 1uLL)
          {
            if (v51 >= *(_QWORD *)&prime)
              v51 %= *(_QWORD *)&prime;
          }
          else
          {
            v51 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*((_QWORD *)v5 + 6) + 8 * v51) = (char *)v5 + 64;
          v56 = (_QWORD *)*v50;
          if (*v50)
          {
            do
            {
              v57 = v56[1];
              if (v52.u32[0] > 1uLL)
              {
                if (v57 >= *(_QWORD *)&prime)
                  v57 %= *(_QWORD *)&prime;
              }
              else
              {
                v57 &= *(_QWORD *)&prime - 1;
              }
              if (v57 != v51)
              {
                v58 = *((_QWORD *)v5 + 6);
                if (!*(_QWORD *)(v58 + 8 * v57))
                {
                  *(_QWORD *)(v58 + 8 * v57) = v50;
                  goto LABEL_97;
                }
                *v50 = *v56;
                *v56 = **(_QWORD **)(*((_QWORD *)v5 + 6) + 8 * v57);
                **(_QWORD **)(*((_QWORD *)v5 + 6) + 8 * v57) = v56;
                v56 = v50;
              }
              v57 = v51;
LABEL_97:
              v50 = v56;
              v56 = (_QWORD *)*v56;
              v51 = v57;
            }
            while (v56);
          }
        }
        v34 = (unint64_t)prime;
      }
      else
      {
        v67 = (void *)*((_QWORD *)v5 + 6);
        *((_QWORD *)v5 + 6) = 0;
        if (v67)
          operator delete(v67);
        v34 = 0;
        *((_QWORD *)v5 + 7) = 0;
      }
    }
LABEL_101:
    v59 = j[1];
    v60 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
    v60.i16[0] = vaddlv_u8(v60);
    if (v60.u32[0] > 1uLL)
    {
      if (v59 >= v34)
        v59 %= v34;
    }
    else
    {
      v59 &= v34 - 1;
    }
    v61 = *((_QWORD *)v5 + 6);
    v62 = *(_QWORD **)(v61 + 8 * v59);
    if (v62)
    {
      *j = *v62;
    }
    else
    {
      *j = *((_QWORD *)v5 + 8);
      *((_QWORD *)v5 + 8) = j;
      *(_QWORD *)(v61 + 8 * v59) = (char *)v5 + 64;
      if (!*j)
      {
LABEL_114:
        ++*((_QWORD *)v5 + 9);
        return j + 4;
      }
      v63 = *(_QWORD *)(*j + 8);
      if (v60.u32[0] > 1uLL)
      {
        if (v63 >= v34)
          v63 %= v34;
      }
      else
      {
        v63 &= v34 - 1;
      }
      v62 = (_QWORD *)(*((_QWORD *)v5 + 6) + 8 * v63);
    }
    *v62 = j;
    goto LABEL_114;
  }
  while (1)
  {
    v39 = v38[1];
    if (v39 == v33)
      break;
    if (v35.u32[0] > 1uLL)
    {
      if (v39 >= v34)
        v39 %= v34;
    }
    else
    {
      v39 &= v34 - 1;
    }
    if (v39 != v36)
      goto LABEL_57;
LABEL_56:
    v38 = (_QWORD *)*v38;
    if (!v38)
      goto LABEL_57;
  }
  if (v38[2] != v27 || v38[3] != v28)
    goto LABEL_56;
  v65 = (_QWORD *)j[14];
  if (v65 != j + 16)
    free(v65);
  v66 = (_QWORD *)j[8];
  if (v66 != j + 10)
    free(v66);
  operator delete(j);
  j = v38;
  return j + 4;
}

_QWORD *llvm::LexicalScopes::getOrCreateRegularScope(llvm::LexicalScopes *this, unint64_t a2)
{
  int v3;
  int8x8_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  char v14;
  uint64_t v15;
  _QWORD v16[4];
  uint64_t RegularScope;
  unint64_t v18;

  while (1)
  {
    v3 = *(unsigned __int8 *)a2;
    if (v3 != 19)
      break;
    a2 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  }
  v18 = a2;
  v4 = *(int8x8_t *)((char *)this + 16);
  if (v4)
  {
    v5 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
    v6 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v5 >> 47) ^ v5);
    v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
    v8 = (uint8x8_t)vcnt_s8(v4);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
      v9 = v7 < *(_QWORD *)&v4 ? v7 : v7 % *(_QWORD *)&v4;
    else
      v9 = v7 & (*(_QWORD *)&v4 - 1);
    v10 = *(_QWORD **)(*((_QWORD *)this + 1) + 8 * v9);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == a2)
              return v11 + 3;
          }
          else
          {
            if (v8.u32[0] <= 1uLL)
            {
              v12 &= *(_QWORD *)&v4 - 1;
            }
            else if (v12 >= *(_QWORD *)&v4)
            {
              v12 %= *(_QWORD *)&v4;
            }
            if (v12 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  RegularScope = 0;
  if ((v3 & 0xFE) == 0x12)
    RegularScope = llvm::LexicalScopes::getOrCreateRegularScope(this, *(const llvm::DILocalScope **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8));
  v14 = 0;
  v15 = 0;
  v16[0] = &RegularScope;
  v16[1] = &v18;
  v16[2] = &v15;
  v16[3] = &v14;
  v11 = sub_1C50F5F9C((float *)this + 2, &v18, (uint64_t)v16);
  if (!RegularScope)
    *((_QWORD *)this + 22) = v11 + 3;
  return v11 + 3;
}

int8x16_t sub_1C50F538C(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t v4;
  unint64_t v5;
  int8x16_t result;
  int8x16_t v7;

  do
  {
    v4 = a1[10];
    v5 = a1[5].u32[2];
    if (v5 >= a1[5].u32[3])
    {
      v7 = a1[10];
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1[5].i64, (uint64_t)a1[6].i64, v5 + 1, 16);
      v4 = v7;
      v5 = a1[5].u32[2];
    }
    result = vextq_s8(v4, v4, 8uLL);
    *(int8x16_t *)(a1[5].i64[0] + 16 * v5) = result;
    ++a1[5].i32[2];
    a1[10].i64[0] = 0;
    a1[10].i64[1] = 0;
    a1 = (int8x16_t *)a1->i64[0];
  }
  while (a1
       && (!a2
        || a1 != a2
        && (a1[11].i32[0] >= (unsigned __int32)a2[11].i32[0] || a1[11].i32[1] <= (unsigned __int32)a2[11].i32[1])));
  return result;
}

unsigned int *llvm::LexicalScopes::getMachineBasicBlocks(llvm::LexicalScopes *this, uint64_t a2, uint64_t a3)
{
  unsigned int *result;
  uint64_t v7;
  unint64_t *i;
  const llvm::DILocalScope *v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  unsigned int v21;
  int v22;
  unsigned int v23;
  void *v24;

  result = *(unsigned int **)(a3 + 8);
  if (result != *(unsigned int **)a3)
  {
    v19 = *(unsigned int *)(a3 + 16);
    if (v19 >= 0x21 && 4 * (*(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24)) < v19)
    {
      free(result);
      v21 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
      v22 = 1 << (33 - __clz(v21 - 1));
      *(_DWORD *)(a3 + 20) = 0;
      *(_DWORD *)(a3 + 24) = 0;
      if (v21 <= 0x10)
        v23 = 32;
      else
        v23 = v22;
      *(_DWORD *)(a3 + 16) = v23;
      v24 = malloc_type_malloc(8 * v23, 0x4065EBACuLL);
      if (!v24)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *(_QWORD *)(a3 + 8) = v24;
      result = (unsigned int *)memset(v24, 255, 8 * *(unsigned int *)(a3 + 16));
      if (!a2)
        return result;
      goto LABEL_3;
    }
    result = (unsigned int *)memset(result, 255, 8 * v19);
  }
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  if (!a2)
    return result;
LABEL_3:
  v7 = *(unsigned int *)(a2 + 8);
  for (i = (unint64_t *)(a2 - 8 * v7); ; i = (unint64_t *)&v10[-2 * v7])
  {
    v9 = (const llvm::DILocalScope *)*i;
    if ((_DWORD)v7 != 2 || (v10 = (unsigned int *)i[1]) == 0)
    {
      result = (unsigned int *)llvm::LexicalScopes::getOrCreateRegularScope(this, *i);
      goto LABEL_13;
    }
    v11 = *i;
    if ((*(_BYTE *)v9 & 0xFE) == 0x12)
    {
      v11 = (unint64_t)v9;
      do
        v11 = *(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8);
      while ((*(_BYTE *)v11 & 0xFE) == 0x12);
    }
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 40) + 36))
      break;
    v7 = v10[2];
  }
  llvm::LexicalScopes::getOrCreateAbstractScope(this, (unint64_t)v9);
  result = (unsigned int *)llvm::LexicalScopes::getOrCreateInlinedScope((int8x8_t *)this, v9, (const llvm::DILocation *)v10);
LABEL_13:
  if (result == *((unsigned int **)this + 22))
  {
    v17 = *(_QWORD *)this + 320;
    for (j = *(_QWORD *)(*(_QWORD *)this + 328); j != v17; j = *(_QWORD *)(j + 8))
      result = (unsigned int *)sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, j);
  }
  else
  {
    v12 = result[22];
    if ((_DWORD)v12)
    {
      v13 = (_QWORD *)*((_QWORD *)result + 10);
      v14 = &v13[2 * v12];
      do
      {
        v15 = *(_QWORD *)(*v13 + 24);
        v16 = *(_QWORD *)(*(_QWORD *)(v13[1] + 24) + 8);
        while (v15 != v16)
        {
          result = (unsigned int *)sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, v15);
          v15 = *(_QWORD *)(v15 + 8);
        }
        v13 += 2;
      }
      while (v13 != v14);
    }
  }
  return result;
}

BOOL llvm::LexicalScopes::dominates(llvm::LexicalScopes *this, const llvm::DILocation *a2, llvm::MachineBasicBlock *a3)
{
  uint64_t v5;
  unint64_t *i;
  const llvm::DILocalScope *v7;
  unsigned int *v8;
  unint64_t v9;
  _QWORD *InlinedScope;
  void ***v11;
  void **v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  const llvm::DILocation *v18;

  v18 = a2;
  if (!a2)
    return 0;
  v5 = *((unsigned int *)a2 + 2);
  for (i = (unint64_t *)((char *)a2 - 8 * v5); ; i = (unint64_t *)&v8[-2 * v5])
  {
    v7 = (const llvm::DILocalScope *)*i;
    if ((_DWORD)v5 != 2)
      break;
    v8 = (unsigned int *)i[1];
    if (!v8)
      break;
    v9 = *i;
    if ((*(_BYTE *)v7 & 0xFE) == 0x12)
    {
      v9 = (unint64_t)v7;
      do
        v9 = *(_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8) + 8);
      while ((*(_BYTE *)v9 & 0xFE) == 0x12);
    }
    if (*(_DWORD *)(*(_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8) + 40) + 36))
    {
      llvm::LexicalScopes::getOrCreateAbstractScope(this, (unint64_t)v7);
      InlinedScope = llvm::LexicalScopes::getOrCreateInlinedScope((int8x8_t *)this, v7, (const llvm::DILocation *)v8);
      goto LABEL_11;
    }
    v5 = v8[2];
  }
  InlinedScope = llvm::LexicalScopes::getOrCreateRegularScope(this, *i);
LABEL_11:
  if (InlinedScope == *((_QWORD **)this + 22) && *((_QWORD *)a3 + 4) == *(_QWORD *)this)
    return 1;
  v11 = (void ***)(sub_1C50F64D4((uint64_t *)this + 23, &v18) + 1);
  v12 = *v11;
  if (!*v11)
  {
    v17 = operator new();
    *(_QWORD *)v17 = v17 + 32;
    *(_QWORD *)(v17 + 8) = v17 + 32;
    *(_QWORD *)(v17 + 16) = 4;
    *(_DWORD *)(v17 + 24) = 0;
    sub_1C50F65EC(v11, (void **)v17);
    llvm::LexicalScopes::getMachineBasicBlocks(this, (uint64_t)v18, (uint64_t)*v11);
    v12 = *v11;
  }
  v13 = (char *)sub_1C477672C((uint64_t)v12, (uint64_t)a3);
  v14 = (char *)v12[1];
  v15 = 16;
  if (v14 == *v12)
    v15 = 20;
  return v13 != &v14[8 * *(unsigned int *)((char *)v12 + v15)];
}

void llvm::LexicalScope::dump(llvm::Metadata **this, unsigned int a2)
{
  llvm *v4;
  llvm::raw_ostream *v5;
  _DWORD *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  _BYTE *v9;
  llvm::Metadata *v10;
  void **p_b;
  uint64_t v12;
  const char *v13;
  size_t v14;
  llvm::raw_ostream *v15;
  void *v16;
  size_t v17;
  void **v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  llvm::raw_ostream *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::LexicalScope *v27;
  void **__b;
  size_t v29;
  uint64_t v30;

  v4 = llvm::dbgs((llvm *)this);
  v5 = llvm::raw_ostream::indent(v4, a2);
  v6 = (_DWORD *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 6uLL)
  {
    *(_DWORD *)((char *)v6 + 3) = 540700233;
    *v6 = 1230194244;
    *((_QWORD *)v4 + 4) += 7;
    v7 = v4;
  }
  else
  {
    v7 = llvm::raw_ostream::write(v4, "DFSIn: ", 7uLL);
  }
  sub_1C5E21910(v7, *((unsigned int *)this + 44), 0, 0, 0);
  v8 = *((_QWORD *)v7 + 4);
  if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) > 8)
  {
    *(_BYTE *)(v8 + 8) = 32;
    *(_QWORD *)v8 = *(_QWORD *)" DFSOut: ";
    *((_QWORD *)v7 + 4) += 9;
  }
  else
  {
    v7 = llvm::raw_ostream::write(v7, " DFSOut: ", 9uLL);
  }
  sub_1C5E21910(v7, *((unsigned int *)this + 45), 0, 0, 0);
  v9 = (_BYTE *)*((_QWORD *)v7 + 4);
  if (*((_BYTE **)v7 + 3) == v9)
  {
    llvm::raw_ostream::write(v7, "\n", 1uLL);
  }
  else
  {
    *v9 = 10;
    ++*((_QWORD *)v7 + 4);
  }
  v10 = this[1];
  llvm::raw_ostream::indent(v4, a2);
  llvm::Metadata::dump(v10);
  if (!*((_BYTE *)this + 24))
    goto LABEL_26;
  if (a2 >= 0x17)
  {
    if ((a2 | 7) == 0x17)
      v12 = (a2 & 0xFFFFFFF8) + 8;
    else
      v12 = a2 | 7;
    p_b = (void **)operator new(v12 + 1);
    v29 = a2;
    v30 = v12 - 0x7FFFFFFFFFFFFFFFLL;
    __b = p_b;
    goto LABEL_15;
  }
  HIBYTE(v30) = a2;
  p_b = (void **)&__b;
  if (a2)
LABEL_15:
    memset(p_b, 32, a2);
  *((_BYTE *)p_b + a2) = 0;
  if (v30 >= 0)
    v13 = (const char *)&__b;
  else
    v13 = (const char *)__b;
  if (v30 >= 0)
    v14 = HIBYTE(v30) & 0x7F;
  else
    v14 = v29;
  v15 = llvm::raw_ostream::write(v4, v13, v14);
  v16 = (void *)*((_QWORD *)v15 + 4);
  if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0xEuLL)
  {
    qmemcpy(v16, "Abstract Scope\n", 15);
    *((_QWORD *)v15 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v15, "Abstract Scope\n", 0xFuLL);
  }
  if (SHIBYTE(v30) < 0)
    operator delete(__b);
LABEL_26:
  if (!*((_DWORD *)this + 10))
    return;
  v17 = a2 + 2;
  if (v17 >= 0x17)
  {
    if ((v17 | 7) == 0x17)
      v19 = (v17 & 0xFFFFFFF8) + 8;
    else
      v19 = v17 | 7;
    v18 = (void **)operator new(v19 + 1);
    v29 = v17;
    v30 = v19 - 0x7FFFFFFFFFFFFFFFLL;
    __b = v18;
  }
  else
  {
    HIBYTE(v30) = v17;
    v18 = (void **)&__b;
    if (!(_DWORD)v17)
      goto LABEL_35;
  }
  memset(v18, 32, v17);
LABEL_35:
  *((_BYTE *)v18 + v17) = 0;
  if (v30 >= 0)
    v20 = (const char *)&__b;
  else
    v20 = (const char *)__b;
  if (v30 >= 0)
    v21 = HIBYTE(v30) & 0x7F;
  else
    v21 = v29;
  v22 = llvm::raw_ostream::write(v4, v20, v21);
  v23 = (void *)*((_QWORD *)v22 + 4);
  if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 0xCuLL)
  {
    qmemcpy(v23, "Children ...\n", 13);
    *((_QWORD *)v22 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v22, "Children ...\n", 0xDuLL);
  }
  if (SHIBYTE(v30) < 0)
    operator delete(__b);
  v24 = *((unsigned int *)this + 10);
  if ((_DWORD)v24)
  {
    v25 = 0;
    v26 = 8 * v24;
    do
    {
      v27 = *(llvm::LexicalScope **)((char *)this[4] + v25);
      if (v27 != (llvm::LexicalScope *)this)
        llvm::LexicalScope::dump(v27, v17);
      v25 += 8;
    }
    while (v26 != v25);
  }
}

_QWORD *sub_1C50F5B58(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
    v7 = v5 < *(_QWORD *)&v2 ? v5 : v5 % *(_QWORD *)&v2;
  else
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] <= 1uLL)
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        else if (v10 >= *(_QWORD *)&v2)
        {
          v10 %= *(_QWORD *)&v2;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1C50F5C48(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[13];
      if (v4 != v2 + 15)
        free(v4);
      v5 = (_QWORD *)v2[7];
      if (v5 != v2 + 9)
        free(v5);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_1C50F5CB0(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (_QWORD *)v2[14];
      if (v4 != v2 + 16)
        free(v4);
      v5 = (_QWORD *)v2[8];
      if (v5 != v2 + 10)
        free(v5);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *sub_1C50F5D18(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  void ***v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = *((unsigned int *)result + 4);
  v3 = *((_DWORD *)result + 2);
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (void ***)(*result + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = sub_1C50F65EC(v5, 0);
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  if (v3)
  {
    v6 = 1 << (33 - __clz(v3 - 1));
    if (v6 <= 64)
      v7 = 64;
    else
      v7 = v6;
    if (v7 == *((_DWORD *)v1 + 4))
    {
      v1[1] = 0;
      v8 = 16 * v7;
      v9 = (_QWORD *)*v1;
      do
      {
        *v9 = -4096;
        v9 += 2;
        v8 -= 16;
      }
      while (v8);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*v1, 8);
      v10 = (4 * v7 / 3 + 1) | ((unint64_t)(4 * v7 / 3 + 1) >> 1);
      v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
      LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
      *((_DWORD *)v1 + 4) = v11;
      result = operator new(16 * v11, (std::align_val_t)8uLL);
      *v1 = result;
      v1[1] = 0;
      v12 = *((unsigned int *)v1 + 4);
      if ((_DWORD)v12)
      {
        v13 = 16 * v12;
        do
        {
          *result = -4096;
          result += 2;
          v13 -= 16;
        }
        while (v13);
      }
    }
  }
  else if (*((_DWORD *)v1 + 4))
  {
    result = (_QWORD *)MEMORY[0x1CAA32FB4](*v1, 8);
    *v1 = 0;
    v1[1] = 0;
    *((_DWORD *)v1 + 4) = 0;
  }
  else
  {
    v1[1] = 0;
  }
  return result;
}

uint64_t *sub_1C50F5E68(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C4964094(a1, v6);
      v16 = 0;
      sub_1C4DC18C8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C4964094(a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C50F5F9C(float *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  float v20;
  float v21;
  unint64_t v22;
  uint8x8_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  int8x8_t prime;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint8x8_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;

  v6 = operator new(0xD0uLL);
  *v6 = 0;
  v6[1] = 0;
  v7 = *(uint64_t **)a3;
  v8 = *(uint64_t **)(a3 + 8);
  v9 = *(char **)(a3 + 24);
  v6[2] = *a2;
  sub_1C50F63EC((uint64_t)(v6 + 3), *v7, *v8, 0, *v9);
  v10 = v6[2];
  v11 = 0x9DDFEA08EB382D69 * (((8 * v10) + 8) ^ HIDWORD(v10));
  v12 = 0x9DDFEA08EB382D69 * (HIDWORD(v10) ^ (v11 >> 47) ^ v11);
  v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
  v6[1] = v13;
  v14 = *((_QWORD *)a1 + 1);
  if (!v14)
    goto LABEL_16;
  v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    v16 = v13;
    if (v14 <= v13)
      v16 = v13 % v14;
  }
  else
  {
    v16 = v13 & (v14 - 1);
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v16);
  if (!v17 || (v18 = (_QWORD *)*v17) == 0)
  {
LABEL_16:
    v20 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
    v21 = a1[8];
    if (v14 && (float)(v21 * (float)v14) >= v20)
      goto LABEL_18;
    v27 = 1;
    if (v14 >= 3)
      v27 = (v14 & (v14 - 1)) != 0;
    v28 = v27 | (2 * v14);
    v29 = vcvtps_u32_f32(v20 / v21);
    if (v28 <= v29)
      prime = (int8x8_t)v29;
    else
      prime = (int8x8_t)v28;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v14 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime <= v14)
    {
      if (*(_QWORD *)&prime >= v14)
        goto LABEL_18;
      v40 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v14 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (*(_QWORD *)&prime <= v40)
        prime = (int8x8_t)v40;
      if (*(_QWORD *)&prime >= v14)
      {
        v14 = *((_QWORD *)a1 + 1);
        goto LABEL_18;
      }
      if (!*(_QWORD *)&prime)
      {
        v43 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v43)
          operator delete(v43);
        v14 = 0;
        *((_QWORD *)a1 + 1) = 0;
LABEL_18:
        v22 = v6[1];
        v23 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          if (v22 >= v14)
            v22 %= v14;
        }
        else
        {
          v22 &= v14 - 1;
        }
        v24 = *(_QWORD **)a1;
        v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v22);
        if (v25)
        {
          *v6 = *v25;
        }
        else
        {
          *v6 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 2) = v6;
          v24[v22] = a1 + 4;
          if (!*v6)
            goto LABEL_23;
          v39 = *(_QWORD *)(*v6 + 8);
          if (v23.u32[0] > 1uLL)
          {
            if (v39 >= v14)
              v39 %= v14;
          }
          else
          {
            v39 &= v14 - 1;
          }
          v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
        }
        *v25 = v6;
LABEL_23:
        ++*((_QWORD *)a1 + 3);
        return v6;
      }
    }
    if (*(_QWORD *)&prime >> 61)
      sub_1C4764EE4();
    v31 = operator new(8 * *(_QWORD *)&prime);
    v32 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v31;
    if (v32)
      operator delete(v32);
    v33 = 0;
    *((int8x8_t *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33++) = 0;
    while (*(_QWORD *)&prime != v33);
    v34 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v34)
      goto LABEL_61;
    v35 = v34[1];
    v36 = (uint8x8_t)vcnt_s8(prime);
    v36.i16[0] = vaddlv_u8(v36);
    if (v36.u32[0] > 1uLL)
    {
      if (v35 >= *(_QWORD *)&prime)
        v35 %= *(_QWORD *)&prime;
    }
    else
    {
      v35 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = a1 + 4;
    v37 = (_QWORD *)*v34;
    if (!*v34)
    {
LABEL_61:
      v14 = (unint64_t)prime;
      goto LABEL_18;
    }
    while (1)
    {
      v38 = v37[1];
      if (v36.u32[0] > 1uLL)
      {
        if (v38 >= *(_QWORD *)&prime)
          v38 %= *(_QWORD *)&prime;
      }
      else
      {
        v38 &= *(_QWORD *)&prime - 1;
      }
      if (v38 != v35)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v34;
          goto LABEL_46;
        }
        *v34 = *v37;
        *v37 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v38);
        **(_QWORD **)(*(_QWORD *)a1 + 8 * v38) = v37;
        v37 = v34;
      }
      v38 = v35;
LABEL_46:
      v34 = v37;
      v37 = (_QWORD *)*v37;
      v35 = v38;
      if (!v37)
        goto LABEL_61;
    }
  }
  while (1)
  {
    v19 = v18[1];
    if (v19 == v13)
      break;
    if (v15.u32[0] > 1uLL)
    {
      if (v19 >= v14)
        v19 %= v14;
    }
    else
    {
      v19 &= v14 - 1;
    }
    if (v19 != v16)
      goto LABEL_16;
LABEL_12:
    v18 = (_QWORD *)*v18;
    if (!v18)
      goto LABEL_16;
  }
  if (v18[2] != v10)
    goto LABEL_12;
  sub_1C50F6484(1, v6);
  return v18;
}

uint64_t sub_1C50F63EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x400000000;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  if (a2)
  {
    v7 = *(unsigned int *)(a2 + 40);
    if (v7 >= *(_DWORD *)(a2 + 44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 32, a2 + 48, v7 + 1, 8);
      LODWORD(v7) = *(_DWORD *)(a2 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v7) = a1;
    ++*(_DWORD *)(a2 + 40);
  }
  return a1;
}

void sub_1C50F6484(char a1, _QWORD *__p)
{
  _QWORD *v3;
  _QWORD *v4;

  if (a1)
  {
    v3 = (_QWORD *)__p[13];
    if (v3 != __p + 15)
      free(v3);
    v4 = (_QWORD *)__p[7];
    if (v4 != __p + 9)
      free(v4);
  }
  operator delete(__p);
}

_QWORD *sub_1C50F64D4(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4850EC8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C61E10C0((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C50F6534(uint64_t a1, int a2)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(void ***)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61E1170((void ***)a1, (void ***)v4, (void ***)&v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void ***sub_1C50F65EC(void ***result, void **a2)
{
  void **v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2[1];
    if (v3 != *v2)
      free(v3);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t sub_1C50F6640(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineDominatorTreePass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Debug Variable Analysis";
  *(_QWORD *)(v2 + 8) = 23;
  *(_QWORD *)(v2 + 16) = "livedebugvars";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6EF8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C61E13A4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C50F66DC(uint64_t a1, llvm::MachineFunction *this)
{
  uint64_t ***v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD ***v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BOOL4 v27;
  uint64_t v28;
  void **v29;
  void *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v37;
  unint64_t v38;
  __int16 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  unint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 *v93;
  __int128 *v94;
  uint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  _QWORD *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  BOOL v114;
  unint64_t v115;
  _QWORD *v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v147;
  BOOL v148;
  unint64_t v149;
  uint64_t *v150;
  BOOL v151;
  int v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  __int128 *v163;
  _BOOL4 v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 *v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  __int128 *v175;
  unint64_t v176;
  unint64_t v177;
  int v178;
  unsigned int v179;
  char *v180;
  int v181;
  char *v182;
  uint64_t v183;
  __int128 *v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  int v188;
  char *v189;
  _BYTE *v190;
  uint64_t j;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  char v196;
  uint64_t v197;
  __int32 *v198;
  __int32 *v199;
  __int32 *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  unsigned int v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t k;
  uint64_t v209;
  int v210;
  unsigned int *v211;
  unsigned int *v212;
  unint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  unint64_t v218;
  uint64_t v219;
  llvm::LiveInterval *v220;
  unsigned int v221;
  _QWORD *v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  _QWORD *v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  BOOL v230;
  unint64_t v231;
  char v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  char *v243;
  unsigned int v244;
  unsigned int *v245;
  unsigned int *v246;
  BOOL v247;
  char *v248;
  unsigned int v249;
  char *v250;
  uint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  unsigned int v255;
  unsigned int v256;
  _QWORD *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  BOOL v261;
  unint64_t v262;
  _QWORD *v263;
  _QWORD *v264;
  uint64_t v265;
  unsigned int v266;
  unsigned int v268;
  uint64_t v269;
  unsigned int *v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  void *v282;
  uint64_t v283;
  unsigned int v284;
  unsigned int *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  llvm::LiveInterval *v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  int v297;
  uint64_t v298;
  char *v299;
  int v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t m;
  uint64_t v306;
  uint64_t v307;
  int **v308;
  int *v309;
  int v310;
  uint64_t v311;
  int v312;
  __int16 v313;
  unint64_t v314;
  unint64_t v315;
  unsigned int v316;
  int v317;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  int v325;
  int v326;
  unint64_t v327;
  _DWORD *v328;
  char *v329;
  uint64_t v330;
  unsigned int v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  unsigned int v335;
  _QWORD *v336;
  uint64_t v337;
  unsigned int v338;
  unsigned int v339;
  _QWORD *v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  BOOL v344;
  unint64_t v345;
  uint64_t v346;
  _DWORD *v347;
  _DWORD *v348;
  unint64_t v349;
  _QWORD *v350;
  char v351;
  _DWORD *v352;
  uint64_t v353;
  __int32 *v354;
  __int32 *v355;
  unint64_t v356;
  unsigned int v357;
  __int32 v358;
  _DWORD *v359;
  uint64_t v360;
  uint64_t **v361;
  uint64_t **v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  _QWORD *v368;
  unint64_t v369;
  unint64_t v370;
  uint64_t v371;
  BOOL v372;
  unint64_t v373;
  uint64_t *v374;
  uint64_t *v375;
  __int32 v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  int v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  unsigned int v386;
  uint64_t v387;
  char *v388;
  char *v389;
  void *v390;
  uint64_t v391;
  _DWORD *v392;
  _BYTE *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  _QWORD *LexicalScope;
  _QWORD *v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t *v408;
  unint64_t *v409;
  unint64_t v410;
  __int16 v411;
  unint64_t v412;
  unint64_t v413;
  unsigned int v414;
  int v415;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t v422;
  int v423;
  int v424;
  uint64_t v425;
  unint64_t v426;
  __int16 v427;
  unint64_t v428;
  unint64_t v429;
  unsigned int v430;
  int v431;
  uint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  int v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  unsigned int v440;
  unint64_t v441;
  uint64_t *v442;
  uint64_t v443;
  uint64_t v444;
  int v445;
  int v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  _QWORD *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int *v468;
  uint64_t v469;
  unsigned int *v470;
  _QWORD *v471;
  uint64_t v472;
  unsigned int *v473;
  uint64_t **v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t *v479;
  uint64_t **v480;
  uint64_t **v481;
  unsigned int v482;
  _DWORD *v483;
  uint64_t v484;
  uint64_t *v485;
  _QWORD *v486;
  _QWORD *v487;
  unint64_t v488;
  char *v489;
  _DWORD *v490;
  char *v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  char *v496;
  char *v497;
  int v498;
  unsigned int *v499;
  unsigned int v500;
  char v501;
  uint64_t v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  __int128 *v506;
  uint64_t v507;
  uint64_t *v508;
  uint64_t *v509;
  uint64_t **v510;
  uint64_t v511;
  uint64_t **v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t *v516;
  uint64_t v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  unsigned int v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  void *__s2;
  unsigned __int8 v532;
  uint64_t v533;
  void *v534;
  unsigned __int8 v535;
  uint64_t v536;
  unsigned int *v537;
  char v538;
  uint64_t v539;
  uint64_t v540[3];
  uint64_t v541[3];
  uint64_t v542[3];
  int8x16_t v543;
  __int128 v544;
  uint64_t v545;
  int v546;
  __int128 v547;
  __int128 v548;
  int v549;
  __int128 v550;
  __int128 v551;
  int v552;
  _BYTE *v553;
  uint64_t v554;
  _BYTE v555[56];
  int v556;
  uint64_t v557;
  void *__dst;
  uint64_t v559;
  _DWORD v560[12];
  char v561;
  void *v562;
  uint64_t v563;
  _BYTE v564[32];
  uint64_t v565;
  void *v566;
  unsigned int v567;
  uint64_t v568;
  _BYTE v569[32];
  uint64_t v570;
  void *v571;
  uint64_t v572;
  _DWORD v573[12];
  uint64_t v574;
  void *__src;
  uint64_t v576;
  _DWORD v577[12];
  char v578;
  __int128 v579;
  unsigned int v580[86];
  uint64_t v581;

  v581 = *MEMORY[0x1E0C80C00];
  if (!byte_1ED7F9420)
  {
LABEL_35:
    v25 = 0;
    return v25 & 1;
  }
  v3 = *(uint64_t ****)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 23) & 0x20) == 0)
  {
LABEL_17:
    v19 = (char *)this + 320;
    for (i = *((_QWORD *)this + 41); (char *)i != v19; i = *(_QWORD *)(i + 8))
    {
      v21 = *(_QWORD *)(i + 56);
      if (v21 != i + 48)
      {
        do
        {
          if (!v21 || (v22 = v21, (*(_BYTE *)v21 & 4) == 0))
          {
            v22 = v21;
            if ((*(_WORD *)(v21 + 44) & 8) != 0)
            {
              v22 = v21;
              do
                v22 = *(_QWORD *)(v22 + 8);
              while ((*(_WORD *)(v22 + 44) & 8) != 0);
            }
          }
          v23 = *(_QWORD *)(v22 + 8);
          if (**(unsigned __int16 **)(v21 + 16) - 13 <= 4)
          {
            v24 = v21;
            if ((*(_BYTE *)v21 & 4) == 0)
            {
              v24 = v21;
              if ((*(_WORD *)(v21 + 44) & 8) != 0)
              {
                v24 = v21;
                do
                  v24 = *(_QWORD *)(v24 + 8);
                while ((*(_WORD *)(v24 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(i + 40, v21, *(_QWORD *)(v24 + 8));
          }
          v21 = v23;
        }
        while (v23 != i + 48);
      }
    }
    goto LABEL_35;
  }
  v5 = ***v3;
  *(_QWORD *)v569 = *(_QWORD *)this;
  v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    v471 = 0;
LABEL_735:
    v10 = sub_1C541AB24(v5 + 2480, (uint64_t)v569, (uint64_t *)v569, v471);
    v472 = *(_QWORD *)v569;
    v10[3] = 0;
    v10[4] = 0;
    *v10 = v472;
    v10[1] = v10 + 3;
    v10[2] = 0x100000000;
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v5 + 2480);
  v8 = v6 - 1;
  v9 = v8 & ((v3 >> 4) ^ (v3 >> 9));
  v10 = (_QWORD *)(v7 + 40 * v9);
  v11 = (_QWORD ***)*v10;
  if ((uint64_t ***)*v10 != v3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != (_QWORD ***)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (_QWORD ***)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (_QWORD *)(v7 + 40 * v9);
      v11 = (_QWORD ***)*v10;
      if ((uint64_t ***)*v10 == v3)
        goto LABEL_13;
    }
    if (v12)
      v471 = v12;
    else
      v471 = v10;
    goto LABEL_735;
  }
LABEL_13:
  v16 = *((unsigned int *)v10 + 4);
  if (!(_DWORD)v16)
    goto LABEL_17;
  v17 = (_QWORD *)(v10[1] + 8);
  v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2))
  {
    v17 += 2;
    v18 -= 16;
    if (!v18)
      goto LABEL_17;
  }
  if (!*v17)
    goto LABEL_17;
  v27 = llvm::MachineFunction::useDebugInstrRef(this);
  v28 = *(_QWORD *)(a1 + 248);
  if (!v28)
  {
    v28 = operator new();
    *(_QWORD *)v28 = a1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_QWORD *)(v28 + 32) = v28 + 48;
    *(_QWORD *)(v28 + 40) = 0x400000000;
    *(_QWORD *)(v28 + 80) = v28 + 96;
    *(_OWORD *)(v28 + 88) = 0u;
    *(_QWORD *)(v28 + 104) = 1;
    *(_QWORD *)(v28 + 112) = 0;
    *(_OWORD *)(v28 + 144) = 0u;
    *(_QWORD *)(v28 + 136) = v28 + 144;
    *(_OWORD *)(v28 + 160) = 0u;
    *(_DWORD *)(v28 + 176) = 0;
    *(_QWORD *)(v28 + 184) = v28 + 200;
    *(_QWORD *)(v28 + 192) = 0x2000000000;
    *(_WORD *)(v28 + 968) = 0;
    *(_QWORD *)(v28 + 976) = v28 + 992;
    *(_QWORD *)(v28 + 984) = 0x800000000;
    *(_QWORD *)(v28 + 1056) = v28 + 1072;
    *(_QWORD *)(v28 + 1064) = 0x200000000;
    *(_DWORD *)(v28 + 1104) = 0;
    *(_OWORD *)(v28 + 1088) = 0u;
    *(_DWORD *)(v28 + 1128) = 0;
    *(_OWORD *)(v28 + 1112) = 0u;
    *(_QWORD *)(a1 + 248) = v28;
  }
  sub_1C50F9614(v28);
  *(_QWORD *)(v28 + 112) = this;
  v29 = **(void ****)(*(_QWORD *)v28 + 8);
  do
  {
    v30 = *v29;
    v29 += 2;
  }
  while (v30 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(v28 + 120) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v29 - 1) + 96))(*(v29 - 1), &llvm::LiveIntervals::ID);
  *(_QWORD *)(v28 + 128) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 176))(*((_QWORD *)this + 2));
  v31 = *((_QWORD *)this + 41);
  v518 = (char *)this + 320;
  v517 = v28;
  v32 = 0;
  if ((llvm::MachineFunction *)v31 != (llvm::MachineFunction *)((char *)this + 320))
  {
    v513 = v28 + 200;
    v516 = (unint64_t *)(v28 + 184);
    v510 = (uint64_t **)(v28 + 1056);
    v512 = (uint64_t **)(v28 + 976);
    v519 = v28 + 8;
    v508 = (uint64_t *)(v28 + 1072);
    v509 = (uint64_t *)(v28 + 992);
    while (1)
    {
      v33 = v31 + 48;
      v34 = *(_QWORD *)(v31 + 56);
      if (v34 != v31 + 48)
        break;
LABEL_291:
      v31 = *(_QWORD *)(v31 + 8);
      if ((char *)v31 == v518)
        goto LABEL_292;
    }
    v527 = v31 + 40;
    v525 = v31;
LABEL_46:
    while (1)
    {
      v35 = **(unsigned __int16 **)(v34 + 16);
      if (v35 <= 0x17 && ((1 << v35) & 0x83E000) != 0)
        break;
      if ((*(_BYTE *)v34 & 4) == 0)
      {
        while ((*(_WORD *)(v34 + 44) & 8) != 0)
          v34 = *(_QWORD *)(v34 + 8);
      }
      v34 = *(_QWORD *)(v34 + 8);
      if (v34 == v33)
        goto LABEL_291;
    }
    v37 = *(_QWORD *)(v28 + 120);
    if (v34 == *(_QWORD *)(v31 + 56))
    {
      v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 288) + 392) + 16 * *(unsigned int *)(v31 + 24));
LABEL_84:
      v523 = v53 & 0xFFFFFFFFFFFFFFF8;
      v529 = v53;
      while (1)
      {
        if (v27 && v35 <= 0x10 && ((1 << v35) & 0x1A000) != 0)
        {
          v54 = *(_QWORD *)(v34 + 8);
          v55 = *(_QWORD *)(v34 + 24);
          v56 = *(_QWORD *)(v55 + 32);
          if (v56)
          {
            v57 = *(_QWORD *)(v56 + 728);
            if (v57)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 32))(v57, v34);
            v58 = *(unsigned int *)(v34 + 40);
            if ((_DWORD)v58)
            {
              v59 = *(_QWORD *)(v34 + 32);
              v60 = *(_QWORD *)(v56 + 40);
              v61 = 32 * v58;
              do
              {
                if (!*(_BYTE *)v59)
                {
                  v62 = *(unsigned int *)(v59 + 4);
                  if ((v62 & 0x80000000) != 0)
                    v63 = (uint64_t *)(*(_QWORD *)(v60 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
                  else
                    v63 = (uint64_t *)(*(_QWORD *)(v60 + 272) + 8 * v62);
                  v64 = *v63;
                  v66 = *(_QWORD *)(v59 + 16);
                  v65 = *(_QWORD *)(v59 + 24);
                  if (v59 != *v63)
                    v63 = (uint64_t *)(v66 + 24);
                  *v63 = v65;
                  if (v65)
                    v67 = v65;
                  else
                    v67 = v64;
                  *(_QWORD *)(v67 + 16) = v66;
                  *(_QWORD *)(v59 + 16) = 0;
                  *(_QWORD *)(v59 + 24) = 0;
                }
                v59 += 32;
                v61 -= 32;
              }
              while (v61);
            }
          }
          *(_QWORD *)(v34 + 24) = 0;
          v85 = *(unint64_t **)(v34 + 8);
          v86 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
          *v85 = v86 | *v85 & 7;
          *(_QWORD *)(v86 + 8) = v85;
          *(_QWORD *)v34 &= 7uLL;
          *(_QWORD *)(v34 + 8) = 0;
          *(_QWORD *)v569 = v34;
          v53 = v529;
          *(_QWORD *)&v569[8] = v529;
          *(_QWORD *)&v569[16] = v55;
          v87 = *(unsigned int *)(v28 + 192);
          v88 = *(_QWORD *)(v28 + 184);
          if (v87 >= *(_DWORD *)(v28 + 196))
          {
            v147 = v87 + 1;
            v148 = v88 + 24 * v87 > (unint64_t)v569;
            if (v88 <= (unint64_t)v569 && v148)
            {
              v190 = &v569[-v88];
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v516, v513, v147, 24);
              v88 = *v516;
              v53 = v529;
              v89 = &v190[*v516];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v516, v513, v147, 24);
              v88 = *v516;
              v89 = v569;
            }
          }
          else
          {
            v89 = v569;
          }
          v90 = v88 + 24 * *(unsigned int *)(v28 + 192);
          v91 = *(_OWORD *)v89;
          *(_QWORD *)(v90 + 16) = *((_QWORD *)v89 + 2);
          *(_OWORD *)v90 = v91;
          ++*(_DWORD *)(v28 + 192);
          v32 = 1;
          v34 = v54;
          goto LABEL_217;
        }
        if (v35 - 13 <= 1)
          break;
LABEL_111:
        if (v35 != 17 || *(_DWORD *)(v34 + 40) != 1 || (v70 = *(_QWORD *)(v34 + 32), *(_BYTE *)v70 != 14))
        {
          if ((*(_BYTE *)v34 & 4) == 0)
          {
            while ((*(_WORD *)(v34 + 44) & 8) != 0)
              v34 = *(_QWORD *)(v34 + 8);
          }
          v34 = *(_QWORD *)(v34 + 8);
          goto LABEL_217;
        }
        v71 = *(_QWORD *)(v70 + 16);
        v72 = *(unsigned int *)(v28 + 1064);
        if ((_DWORD)v72)
        {
          v73 = *(_QWORD **)(v28 + 1056);
          v74 = *(_QWORD *)(v34 + 56);
          v75 = 8 * v72;
          do
          {
            v76 = *(_DWORD *)(v74 + 8) == 2 ? *(_QWORD *)(v74 - 8) : 0;
            v77 = (_QWORD *)*v73;
            if (*(_QWORD *)*v73 == v71)
            {
              v78 = v77[1];
              v79 = *(_DWORD *)(v78 + 8) == 2 ? *(_QWORD *)(v78 - 8) : 0;
              if (v79 == v76 && v77[2] == v53)
                goto LABEL_213;
            }
            ++v73;
            v75 -= 8;
          }
          while (v75);
        }
        v80 = (_QWORD *)operator new();
        v82 = v80;
        v83 = *(unsigned __int8 **)(v34 + 56);
        *(_QWORD *)v569 = v83;
        if (v83)
        {
          llvm::MetadataTracking::track((uint64_t)v569, v83, 2);
          v84 = *(unsigned __int8 **)v569;
          *v82 = v71;
          v82[1] = v84;
          v81 = (uint64_t)(v82 + 1);
          if (v84)
            llvm::MetadataTracking::retrack((uint64_t)v569, v84, v81);
        }
        else
        {
          *v80 = v71;
          v80[1] = 0;
        }
        v82[2] = v529;
        *(_QWORD *)&v579 = v82;
        v92 = *(unsigned int *)(v28 + 1064);
        v93 = *(__int128 **)(v28 + 1056);
        if (v92 >= *(_DWORD *)(v28 + 1068))
        {
          v162 = v92 + 1;
          v163 = (__int128 *)((char *)v93 + 8 * v92);
          v165 = v93 <= &v579 && v163 > &v579;
          if (v165)
            v166 = ((char *)&v579 - (char *)v93) >> 3;
          else
            v166 = -1;
          *(_QWORD *)v569 = 0;
          v93 = (__int128 *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v510, v162, 8, (unint64_t *)v569);
          v167 = *(uint64_t **)(v28 + 1056);
          v168 = *(unsigned int *)(v28 + 1064);
          if ((_DWORD)v168)
          {
            v169 = 8 * v168;
            v170 = 8 * v168;
            v171 = v93;
            do
            {
              v172 = *v167;
              *v167++ = 0;
              *(_QWORD *)v171 = v172;
              v171 = (__int128 *)((char *)v171 + 8);
              v170 -= 8;
            }
            while (v170);
            v173 = (uint64_t)(*v510 - 1);
            do
            {
              sub_1C5100E98((uint64_t *)(v173 + v169));
              v169 -= 8;
            }
            while (v169);
            v167 = *v510;
          }
          v174 = *(_DWORD *)v569;
          if (v167 != v508)
            free(v167);
          *(_QWORD *)(v28 + 1056) = v93;
          *(_DWORD *)(v28 + 1068) = v174;
          v94 = &v579;
          if (v165)
            v94 = (__int128 *)((char *)v93 + 8 * v166);
          v92 = *(unsigned int *)(v28 + 1064);
          v82 = *(_QWORD **)v94;
        }
        else
        {
          v94 = &v579;
        }
        *(_QWORD *)v94 = 0;
        *((_QWORD *)v93 + v92) = v82;
        *(_DWORD *)(v28 + 1064) = v92 + 1;
        v95 = v579;
        *(_QWORD *)&v579 = 0;
        v53 = v529;
        if (v95)
        {
          v96 = *(unsigned __int8 **)(v95 + 8);
          if (v96)
            llvm::MetadataTracking::untrack(v95 + 8, v96);
          MEMORY[0x1CAA32FC0](v95, 0x1060C4078230D8ELL, v81);
        }
        v97 = v34;
        if (!v34)
        {
LABEL_215:
          if ((*(_WORD *)(v34 + 44) & 8) != 0)
          {
            do
              v34 = *(_QWORD *)(v34 + 8);
            while ((*(_WORD *)(v34 + 44) & 8) != 0);
            v28 = v517;
            v31 = v525;
            v53 = v529;
          }
          goto LABEL_216;
        }
LABEL_214:
        if ((*(_BYTE *)v34 & 4) == 0)
          goto LABEL_215;
LABEL_216:
        v34 = sub_1C487FE80(v527, v97, *(_QWORD *)(v34 + 8));
        v32 = 1;
LABEL_217:
        if (v34 == v33)
          goto LABEL_291;
        v35 = **(unsigned __int16 **)(v34 + 16);
        if (v35 - 13 >= 5 && v35 != 23)
          goto LABEL_46;
      }
      v68 = *(_QWORD *)(v34 + 32);
      if (*(_BYTE *)(v68 + ((unint64_t)(v35 != 14) << 6)) != 14)
        goto LABEL_110;
      v69 = *(unsigned int *)(v34 + 40);
      if (v35 != 13)
        goto LABEL_146;
      if (v69 != 4 || (*(_BYTE *)(v68 + 32) & 0xFE) != 0)
      {
LABEL_110:
        v35 = **(unsigned __int16 **)(v34 + 16);
        goto LABEL_111;
      }
      v69 = 4;
LABEL_146:
      if (v35 != 14)
        v69 = 1;
      v98 = 0;
      if (2 * (v35 == 14) != v69)
      {
        v99 = v68 + 32 * v69;
        v100 = v68 + ((unint64_t)(v35 == 14) << 6);
        while (1)
        {
          if (*(_BYTE *)v100)
            goto LABEL_175;
          v101 = *(_DWORD *)(v100 + 4);
          if ((v101 & 0x80000000) == 0)
            goto LABEL_175;
          v102 = *(_QWORD *)(v28 + 120);
          v103 = v101 & 0x7FFFFFFF;
          if (v103 < *(_DWORD *)(v102 + 416))
          {
            v104 = *(_QWORD *)(*(_QWORD *)(v102 + 408) + 8 * v103);
            if (v104)
              break;
          }
          v98 = 1;
LABEL_175:
          v100 += 32;
          if (v100 == v99)
            goto LABEL_176;
        }
        v105 = *(unsigned int *)(v104 + 8);
        v106 = *(_QWORD **)v104;
        if ((_DWORD)v105)
        {
          v107 = v106[3 * v105 - 2];
          v108 = *(_DWORD *)(v523 + 24);
          v109 = (v107 >> 1) & 3 | *(_DWORD *)((v107 & 0xFFFFFFFFFFFFFFF8) + 24);
          v110 = v106;
          v111 = v105;
          if (v108 < v109)
          {
            do
            {
              v112 = v111 >> 1;
              v113 = v110[3 * (v111 >> 1) + 1];
              LODWORD(v113) = (v113 >> 1) & 3 | *(_DWORD *)((v113 & 0xFFFFFFFFFFFFFFF8) + 24);
              v111 -= (v111 >> 1) + 1;
              v114 = v108 >= v113;
              if (v108 >= v113)
                v115 = v112 + 1;
              else
                v115 = 0;
              v110 += 3 * v115;
              if (!v114)
                v111 = v112;
            }
            while (v111);
LABEL_166:
            v116 = &v106[3 * v105];
            if (v110 != v116)
            {
              v117 = *(_DWORD *)((*v110 & 0xFFFFFFFFFFFFFFF8) + 24);
              v118 = *(_DWORD *)(v523 + 24);
              if (((*v110 >> 1) & 3 | v117) <= v118 && v523 == (v110[1] & 0xFFFFFFFFFFFFFFF8))
              {
                v110 += 3;
                if (v110 == v116)
                  goto LABEL_173;
                v117 = *(_DWORD *)((*v110 & 0xFFFFFFFFFFFFFFF8) + 24);
              }
              if (v118 >= v117)
              {
                v119 = v110[2];
LABEL_174:
                v98 |= v119 == 0;
                goto LABEL_175;
              }
            }
LABEL_173:
            v119 = 0;
            goto LABEL_174;
          }
        }
        else
        {
          LODWORD(v105) = 0;
        }
        v110 = &v106[3 * v105];
        goto LABEL_166;
      }
LABEL_176:
      v526 = v35 == 13 && *(unsigned __int8 *)(v68 + 32) == 1;
      v120 = *(_QWORD *)(v68 + ((unint64_t)(v35 != 14) << 6) + 16);
      v121 = 96;
      if (v35 == 14)
        v121 = 32;
      v122 = *(_QWORD *)(v68 + v121 + 16);
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v122 + 24), *(uint64_t **)(v122 + 32), &v543);
      v123 = *(_QWORD *)(v34 + 56);
      if (*(_DWORD *)(v123 + 8) == 2)
        v124 = *(_QWORD *)(v123 - 8);
      else
        v124 = 0;
      *(int8x16_t *)&v569[8] = v543;
      *(_QWORD *)&v569[24] = v544;
      *(_QWORD *)v569 = v120;
      v570 = v124;
      v574 = 0;
      v125 = v517;
      v126 = sub_1C50FD840(*(_QWORD *)(v517 + 1112), *(_DWORD *)(v517 + 1128), (uint64_t *)v569, &v574);
      v127 = v574;
      if ((v126 & 1) != 0)
      {
        v128 = *(_QWORD *)(v574 + 40);
        if (v128)
        {
LABEL_203:
          if ((v98 & 1) != 0)
          {
            v579 = 0u;
            *(_OWORD *)v580 = 0u;
            LODWORD(v579) = 0x80000000;
            if (**(_WORD **)(v34 + 16) == 14)
              v143 = (*(_DWORD *)(v34 + 40) - 2);
            else
              v143 = 1;
            *(_QWORD *)v569 = &v569[16];
            *(_QWORD *)&v569[8] = 0x400000000;
            sub_1C5100DC4(v569, v143, &v579);
            sub_1C50FD2A0(v128, v529, *(llvm::MachineOperand **)v569, *(unsigned int *)&v569[8], 0, v35 == 14, v122);
            if (*(_BYTE **)v569 != &v569[16])
              free(*(void **)v569);
            v28 = v517;
            v31 = v525;
            v53 = v529;
          }
          else
          {
            v145 = 32 * *(unsigned int *)(v34 + 40);
            if (**(_WORD **)(v34 + 16) != 14)
              v145 = 32;
            v53 = v529;
            v144 = **(unsigned __int16 **)(v34 + 16) == 14;
            sub_1C50FD2A0(v128, v529, (llvm::MachineOperand *)(*(_QWORD *)(v34 + 32) + (v144 << 6)), (v145 - (v144 << 6)) >> 5, v526, v35 == 14, v122);
            v28 = v517;
            v31 = v525;
          }
LABEL_213:
          v97 = v34;
          goto LABEL_214;
        }
LABEL_194:
        v134 = operator new();
        v135 = v134;
        v136 = *(unsigned __int8 **)(v34 + 56);
        *(_QWORD *)&v579 = v136;
        if (v136)
        {
          llvm::MetadataTracking::track((uint64_t)&v579, v136, 2);
          v137 = (unsigned __int8 *)v579;
          *(_QWORD *)v135 = v120;
          *(int8x16_t *)(v135 + 8) = v543;
          *(_QWORD *)(v135 + 24) = v544;
          *(_QWORD *)(v135 + 32) = v137;
          if (v137)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v579, v137, v135 + 32);
            *(_QWORD *)&v579 = 0;
          }
        }
        else
        {
          *(_QWORD *)v134 = v120;
          *(int8x16_t *)(v134 + 8) = v543;
          *(_QWORD *)(v134 + 24) = v544;
          *(_QWORD *)(v134 + 32) = 0;
        }
        *(_QWORD *)(v135 + 40) = v135;
        *(_QWORD *)(v135 + 48) = 0;
        *(_QWORD *)(v135 + 56) = v135 + 72;
        *(_QWORD *)(v135 + 64) = 0x400000000;
        *(_QWORD *)(v135 + 360) = 0;
        *(_QWORD *)(v135 + 368) = v519;
        *(_OWORD *)(v135 + 216) = 0u;
        *(_OWORD *)(v135 + 232) = 0u;
        *(_OWORD *)(v135 + 200) = 0u;
        *(_OWORD *)(v135 + 264) = 0u;
        *(_OWORD *)(v135 + 280) = 0u;
        *(_OWORD *)(v135 + 296) = 0u;
        *(_OWORD *)(v135 + 312) = 0u;
        *(_OWORD *)(v135 + 328) = 0u;
        *(_OWORD *)(v135 + 344) = 0u;
        v138 = 264;
        *(_OWORD *)(v135 + 248) = 0u;
        do
        {
          v139 = v135 + v138;
          *(_QWORD *)v139 = 0;
          *(_BYTE *)(v139 + 8) = 0;
          *(_QWORD *)(v139 + 16) = 0;
          v138 += 24;
        }
        while (v139 + 24 != v135 + 360);
        *(_QWORD *)(v135 + 376) = v135 + 392;
        *(_QWORD *)(v135 + 384) = 0x200000000;
        *(_QWORD *)(v135 + 416) = 0;
        *(_QWORD *)(v135 + 424) = 0;
        *(_QWORD *)(v135 + 408) = v135 + 416;
        v565 = v135;
        v140 = *(uint64_t **)(v517 + 976);
        v141 = *(unsigned int *)(v517 + 984);
        if (v141 >= *(_DWORD *)(v517 + 988))
        {
          v149 = v141 + 1;
          v150 = &v140[v141];
          v151 = v140 <= &v565 && v150 > &v565;
          v152 = v151;
          v153 = &v565 - v140;
          if (v152 != 1)
            v153 = -1;
          v505 = v153;
          *(_QWORD *)&v579 = 0;
          v140 = (uint64_t *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v512, v149, 8, (unint64_t *)&v579);
          v154 = *(uint64_t **)(v517 + 976);
          v155 = *(unsigned int *)(v517 + 984);
          if ((_DWORD)v155)
          {
            v503 = v152;
            v156 = 8 * v155;
            v157 = 8 * v155;
            v158 = v140;
            do
            {
              v159 = *v154;
              *v154++ = 0;
              *v158++ = v159;
              v157 -= 8;
            }
            while (v157);
            v160 = (uint64_t)(*v512 - 1);
            do
            {
              sub_1C50FD4F0((uint64_t *)(v160 + v156));
              v156 -= 8;
            }
            while (v156);
            v154 = *v512;
            v152 = v503;
          }
          v161 = v579;
          if (v154 != v509)
            free(v154);
          *(_QWORD *)(v517 + 976) = v140;
          *(_DWORD *)(v517 + 988) = v161;
          v142 = &v565;
          if (v152)
            v142 = &v140[v505];
          v141 = *(unsigned int *)(v517 + 984);
          v135 = *v142;
        }
        else
        {
          v142 = &v565;
        }
        *v142 = 0;
        v140[v141] = v135;
        *(_DWORD *)(v517 + 984) = v141 + 1;
        sub_1C50FD4F0(&v565);
        v128 = *(_QWORD *)(*(_QWORD *)(v517 + 976) + 8 * *(unsigned int *)(v517 + 984) - 8);
        *(_QWORD *)(v127 + 40) = v128;
        goto LABEL_203;
      }
      v565 = v574;
      v129 = *(_DWORD *)(v517 + 1120);
      v130 = *(unsigned int *)(v517 + 1128);
      if (4 * v129 + 4 >= (3 * v130))
      {
        v131 = 2 * v130;
      }
      else
      {
        v131 = *(_DWORD *)(v517 + 1128);
        if ((int)v130 + ~v129 - *(_DWORD *)(v517 + 1124) > v130 >> 3)
        {
LABEL_189:
          *(_DWORD *)(v125 + 1120) = v129 + 1;
          if (*(_QWORD *)v127 || *(_BYTE *)(v127 + 24) || *(_QWORD *)(v127 + 32))
            --*(_DWORD *)(v517 + 1124);
          v132 = *(_OWORD *)&v569[16];
          v133 = v570;
          *(_OWORD *)v127 = *(_OWORD *)v569;
          *(_OWORD *)(v127 + 16) = v132;
          *(_QWORD *)(v127 + 32) = v133;
          *(_QWORD *)(v127 + 40) = 0;
          goto LABEL_194;
        }
      }
      v175 = *(__int128 **)(v517 + 1112);
      v176 = (v131 - 1) | ((unint64_t)(v131 - 1) >> 1);
      v177 = v176 | (v176 >> 2) | ((v176 | (v176 >> 2)) >> 4);
      v178 = ((v177 | (v177 >> 8)) >> 16) | v177 | (v177 >> 8);
      if ((v178 + 1) > 0x40)
        v179 = v178 + 1;
      else
        v179 = 64;
      *(_DWORD *)(v517 + 1128) = v179;
      v180 = (char *)operator new(48 * v179, (std::align_val_t)8uLL);
      *(_QWORD *)(v517 + 1112) = v180;
      v506 = v175;
      if (v175)
      {
        *(_QWORD *)(v517 + 1120) = 0;
        v181 = *(_DWORD *)(v517 + 1128);
        if (v181)
        {
          v182 = &v180[48 * v181];
          do
          {
            *(_QWORD *)v180 = 0;
            v180[8] = 0;
            v180[24] = 0;
            *((_QWORD *)v180 + 4) = 0;
            v180 += 48;
          }
          while (v180 != v182);
        }
        if ((_DWORD)v130)
        {
          v183 = 48 * v130;
          v184 = v506;
          do
          {
            if (*(_QWORD *)v184
              || *((_BYTE *)v184 + 24) && *(__int128 *)((char *)v184 + 8) != 0
              || *((_QWORD *)v184 + 4))
            {
              *(_QWORD *)&v579 = 0;
              sub_1C50FD840(*(_QWORD *)(v517 + 1112), *(_DWORD *)(v517 + 1128), (uint64_t *)v184, (uint64_t *)&v579);
              v185 = v579;
              v186 = *v184;
              v187 = v184[1];
              *(_QWORD *)(v579 + 32) = *((_QWORD *)v184 + 4);
              *(_OWORD *)v185 = v186;
              *(_OWORD *)(v185 + 16) = v187;
              *(_QWORD *)(v185 + 40) = *((_QWORD *)v184 + 5);
              ++*(_DWORD *)(v517 + 1120);
            }
            v184 += 3;
            v183 -= 48;
          }
          while (v183);
        }
        MEMORY[0x1CAA32FB4](v506, 8);
      }
      else
      {
        *(_QWORD *)(v517 + 1120) = 0;
        v188 = *(_DWORD *)(v517 + 1128);
        if (v188)
        {
          v189 = &v180[48 * v188];
          do
          {
            *(_QWORD *)v180 = 0;
            v180[8] = 0;
            v180[24] = 0;
            *((_QWORD *)v180 + 4) = 0;
            v180 += 48;
          }
          while (v180 != v189);
        }
      }
      v125 = v517;
      sub_1C50FD840(*(_QWORD *)(v517 + 1112), *(_DWORD *)(v517 + 1128), (uint64_t *)v569, &v565);
      v129 = *(_DWORD *)(v517 + 1120);
      v127 = v565;
      goto LABEL_189;
    }
    v38 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
    if (v38 && (*(_BYTE *)v38 & 4) != 0)
    {
      v39 = *(_WORD *)(v38 + 44);
      v40 = *(_QWORD *)(v37 + 288);
      if ((v39 & 4) != 0)
      {
        v41 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
        do
          v41 = *(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v41 + 44) & 4) != 0);
        v28 = v517;
        v31 = v525;
        goto LABEL_67;
      }
    }
    else
    {
      while (1)
      {
        v39 = *(_WORD *)(v38 + 44);
        if ((v39 & 4) == 0)
          break;
        v38 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8;
      }
      v40 = *(_QWORD *)(v37 + 288);
    }
    v41 = v38;
LABEL_67:
    if ((v39 & 8) != 0)
    {
      do
        v38 = *(_QWORD *)(v38 + 8);
      while ((*(_WORD *)(v38 + 44) & 8) != 0);
    }
    v42 = *(_QWORD *)(v38 + 8);
    if (v41 != v42)
    {
      do
      {
        v43 = **(unsigned __int16 **)(v41 + 16);
        v151 = v43 > 0x17;
        v44 = (1 << v43) & 0x83E000;
        if (v151 || v44 == 0)
          goto LABEL_75;
        v41 = *(_QWORD *)(v41 + 8);
      }
      while (v41 != v42);
      v41 = v42;
    }
LABEL_75:
    v46 = *(_QWORD *)(v40 + 368);
    v47 = *(unsigned int *)(v40 + 384);
    if ((_DWORD)v47)
    {
      LODWORD(v48) = ((v41 >> 4) ^ (v41 >> 9)) & (v47 - 1);
      v49 = (uint64_t *)(v46 + 16 * v48);
      v50 = *v49;
      if (v41 != *v49)
      {
        v51 = 1;
        do
        {
          if (v50 == -4096)
            goto LABEL_82;
          v52 = v48 + v51++;
          v48 = v52 & (v47 - 1);
          v50 = *(_QWORD *)(v46 + 16 * v48);
        }
        while (v41 != v50);
        v49 = (uint64_t *)(v46 + 16 * v48);
      }
    }
    else
    {
LABEL_82:
      v49 = (uint64_t *)(v46 + 16 * v47);
    }
    v53 = v49[1] & 0xFFFFFFFFFFFFFFF8 | 4;
    goto LABEL_84;
  }
LABEL_292:
  v501 = v32;
  v545 = 0;
  v543 = 0u;
  v544 = 0u;
  v547 = 0u;
  v548 = 0u;
  v546 = 1065353216;
  v549 = 1065353216;
  v551 = 0u;
  v550 = 0u;
  v552 = 1065353216;
  v553 = v555;
  v554 = 0x400000000;
  memset(&v555[32], 0, 24);
  v556 = 0;
  llvm::LexicalScopes::initialize((llvm::LexicalScopes *)&v543, *(uint64_t *****)(v28 + 112));
  v504 = *(unsigned int *)(v28 + 984);
  if (!(_DWORD)v504)
    goto LABEL_726;
  for (j = 0; j != v504; j = v396 + 1)
  {
    v507 = j;
    v192 = *(_QWORD *)(*(_QWORD *)(v517 + 976) + 8 * j);
    v522 = *(_QWORD *)(v517 + 120);
    v511 = *(_QWORD *)(*(_QWORD *)(v517 + 112) + 40);
    *(_QWORD *)v569 = &v569[16];
    *(_QWORD *)&v569[8] = 0x1000000000;
    sub_1C5100EEC((uint64_t)&v565, v192 + 200);
    *(_QWORD *)&v579 = v565;
    *((_QWORD *)&v579 + 1) = &v580[2];
    *(_QWORD *)v580 = 0x400000000;
    if (v567)
      sub_1C50E5C18((uint64_t)&v579 + 8, (uint64_t)&v566);
    if (v566 != &v568)
      free(v566);
    while (v580[0] && *(_DWORD *)(*((_QWORD *)&v579 + 1) + 12) < *(_DWORD *)(*((_QWORD *)&v579 + 1) + 8))
    {
      v193 = *((_QWORD *)&v579 + 1) + 16 * v580[0];
      v194 = *(_QWORD *)(v193 - 16);
      v195 = *(_DWORD *)(v193 - 4);
      v196 = *(_BYTE *)(v194 + 24 * v195 + 72);
      v197 = v196 & 0x3F;
      if ((v196 & 0x3F) != 0)
      {
        v198 = *(__int32 **)(v194 + 24 * v195 + 64);
        v199 = wmemchr(v198, -1, v196 & 0x3F);
        v200 = v199 ? v199 : &v198[v197];
        if (v197 == v200 - v198)
        {
          v201 = *((_QWORD *)&v579 + 1) + 16 * v580[0];
          v202 = *(_QWORD *)(v201 - 16);
          v203 = *(unsigned int *)(v201 - 4);
          v565 = *(_QWORD *)(v202 + 16 * v203);
          sub_1C50FE758((uint64_t *)&v566, v202 + 24 * v203 + 64);
          sub_1C5100F74((uint64_t)v569, (char *)&v565);
          v204 = v566;
          v566 = 0;
          if (v204)
            MEMORY[0x1CAA32F9C](v204, 0x1000C8052888210);
        }
      }
      sub_1C51010D0((uint64_t)&v579);
    }
    if (*((unsigned int **)&v579 + 1) != &v580[2])
      free(*((void **)&v579 + 1));
    if (!*(_DWORD *)&v569[8])
      goto LABEL_612;
    v205 = 0;
    v502 = v522 + 312;
    do
    {
      v524 = v205;
      v206 = (unint64_t *)(*(_QWORD *)v569 + 32 * v205);
      v207 = *v206;
      sub_1C50FE758((uint64_t *)&v537, (uint64_t)(v206 + 1));
      v565 = 1;
      for (k = 8; k != 104; k += 24)
        *(_DWORD *)((char *)&v565 + k) = -1;
      v562 = v564;
      v563 = 0x400000000;
      v209 = v522;
      if ((v538 & 0x3F) == 0)
        goto LABEL_598;
      v210 = 0;
      v211 = v537;
      v212 = &v537[v538 & 0x3F];
      v213 = v207 & 0xFFFFFFFFFFFFFFF8;
      v214 = (v207 >> 1) & 3;
      v520 = v207;
      do
      {
        v215 = *v211;
        v216 = *(_QWORD *)(v192 + 56);
        if (*(_BYTE *)(v216 + 32 * v215) || (v217 = *(_DWORD *)(v216 + 32 * v215 + 4), (v217 & 0x80000000) == 0))
        {
          v210 |= *(_BYTE *)(v216 + 32 * *v211) != 0;
          goto LABEL_319;
        }
        v218 = *(unsigned int *)(v209 + 416);
        if ((v217 & 0x7FFFFFFFu) >= v218
          || (v219 = *(_QWORD *)(v209 + 408), !*(_QWORD *)(v219 + 8 * (v217 & 0x7FFFFFFF))))
        {
          v210 = 1;
          goto LABEL_319;
        }
        if ((v217 & 0x7FFFFFFFu) >= v218 || (v220 = *(llvm::LiveInterval **)(v219 + 8 * (v217 & 0x7FFFFFFF))) == 0)
        {
          v220 = (llvm::LiveInterval *)sub_1C4851220(v209, v217);
          v515 = *(_QWORD *)(v522 + 304);
          v235 = *(_QWORD *)(v522 + 248);
          *(_QWORD *)v515 = v235;
          *(_QWORD *)(v515 + 8) = *(_QWORD *)(v235 + 40);
          *(_OWORD *)(v515 + 16) = *(_OWORD *)(v522 + 288);
          *(_QWORD *)(v515 + 32) = v502;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v515);
          *(_DWORD *)(v515 + 184) = 0;
          v236 = *(_QWORD *)(v522 + 256);
          v14 = *(_BYTE *)(v236 + 16) == 0;
          v237 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v236 + 24) + 16 * (*((_DWORD *)v220 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v239 = !v14 && v237 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v522 + 304), v220, v239);
          llvm::LiveIntervals::computeDeadValues(v522, (uint64_t)v220, 0);
          v209 = v522;
        }
        v221 = *((_DWORD *)v220 + 2);
        v222 = *(_QWORD **)v220;
        if (!v221)
        {
          v221 = 0;
LABEL_336:
          v226 = &v222[3 * v221];
          goto LABEL_337;
        }
        v223 = v222[3 * v221 - 2];
        v224 = *(_DWORD *)(v213 + 24) | v214;
        v225 = (v223 >> 1) & 3 | *(_DWORD *)((v223 & 0xFFFFFFFFFFFFFFF8) + 24);
        v226 = *(_QWORD **)v220;
        v227 = *((unsigned int *)v220 + 2);
        if (v224 >= v225)
          goto LABEL_336;
        do
        {
          v228 = v227 >> 1;
          v229 = v226[3 * (v227 >> 1) + 1];
          LODWORD(v229) = (v229 >> 1) & 3 | *(_DWORD *)((v229 & 0xFFFFFFFFFFFFFFF8) + 24);
          v227 -= (v227 >> 1) + 1;
          v230 = v224 >= v229;
          if (v224 >= v229)
            v231 = v228 + 1;
          else
            v231 = 0;
          v226 += 3 * v231;
          if (!v230)
            v227 = v228;
        }
        while (v227);
LABEL_337:
        if (v226 == &v222[3 * v221]
          || ((*v226 >> 1) & 3 | *(_DWORD *)((*v226 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v213 + 24) | v214)
          || !v226[2])
        {
          goto LABEL_349;
        }
        v514 = v226[2];
        *(_QWORD *)&v579 = 0;
        v232 = sub_1C51014A4((uint64_t)&v565, v215, &v579);
        v233 = v579;
        if ((v232 & 1) == 0)
        {
          if ((v565 & 1) != 0)
            v234 = 4;
          else
            v234 = v567;
          v209 = v522;
          if (4 * (v565 >> 1) + 4 >= 3 * v234)
          {
            v234 *= 2;
          }
          else if (v234 + ~(v565 >> 1) - HIDWORD(v565) > v234 >> 3)
          {
LABEL_345:
            LODWORD(v565) = v565 + 2;
            if (*(_DWORD *)v233 != -1)
              --HIDWORD(v565);
            *(_DWORD *)v233 = v215;
            *(_QWORD *)(v233 + 8) = 0;
            *(_QWORD *)(v233 + 16) = 0;
            goto LABEL_348;
          }
          sub_1C5101550((uint64_t)&v565, v234);
          *(_QWORD *)&v579 = 0;
          sub_1C51014A4((uint64_t)&v565, v215, &v579);
          v209 = v522;
          v233 = v579;
          goto LABEL_345;
        }
        v209 = v522;
LABEL_348:
        *(_QWORD *)(v233 + 8) = v220;
        *(_QWORD *)(v233 + 16) = v514;
LABEL_349:
        v210 = 1;
        v207 = v520;
LABEL_319:
        ++v211;
      }
      while (v211 != v212);
      if ((v210 & 1) == 0)
        goto LABEL_598;
      LOBYTE(v557) = 0;
      v561 = 0;
      v240 = v209;
      sub_1C50FE758((uint64_t *)&v534, (uint64_t)&v537);
      v241 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v240 + 288) + 392)
                       + 16 * *(unsigned int *)(sub_1C499C548(*(_QWORD *)(v240 + 288), v207) + 24)
                       + 8);
      *(_QWORD *)&v579 = v192 + 200;
      *((_QWORD *)&v579 + 1) = &v580[2];
      *(_QWORD *)v580 = 0x400000000;
      sub_1C50FEC80((uint64_t *)&v579, v207);
      v242 = v565;
      if (v565 > 1)
      {
        v246 = (unsigned int *)v569;
        v245 = (unsigned int *)&v566;
        if ((v565 & 1) == 0)
        {
          v245 = (unsigned int *)v566;
          if (!v567)
          {
            v242 = 0;
            goto LABEL_366;
          }
          v246 = (unsigned int *)((char *)v566 + 24 * v567);
        }
        v242 = v565 & 1;
        while (*v245 >= 0xFFFFFFFE)
        {
          v245 += 6;
          if (v245 == v246)
          {
            v245 = v246;
            break;
          }
        }
      }
      else
      {
        if ((_DWORD)v565)
        {
          v243 = (char *)&v566;
          v244 = 4;
        }
        else
        {
          v243 = (char *)v566;
          v244 = v567;
        }
        v245 = (unsigned int *)&v243[24 * v244];
LABEL_366:
        v246 = v245;
      }
      v247 = v242 == 0;
      v248 = (char *)&v566;
      if (v247)
        v248 = (char *)v566;
      v249 = v567;
      if (!v247)
        v249 = 4;
      v250 = &v248[24 * v249];
LABEL_372:
      while (2)
      {
        if (v245 != (unsigned int *)v250)
        {
          v251 = *((_QWORD *)v245 + 1);
          v252 = *(unsigned int *)(v251 + 8);
          v253 = *(_QWORD **)v251;
          if ((_DWORD)v252)
          {
            v254 = v253[3 * v252 - 2];
            v255 = *(_DWORD *)(v213 + 24) | v214;
            v256 = (v254 >> 1) & 3 | *(_DWORD *)((v254 & 0xFFFFFFFFFFFFFFF8) + 24);
            v257 = v253;
            v258 = v252;
            if (v255 < v256)
            {
              do
              {
                v259 = v258 >> 1;
                v260 = v257[3 * (v258 >> 1) + 1];
                LODWORD(v260) = (v260 >> 1) & 3 | *(_DWORD *)((v260 & 0xFFFFFFFFFFFFFFF8) + 24);
                v258 -= (v258 >> 1) + 1;
                v261 = v255 >= v260;
                if (v255 >= v260)
                  v262 = v259 + 1;
                else
                  v262 = 0;
                v257 += 3 * v262;
                if (!v261)
                  v258 = v259;
              }
              while (v258);
LABEL_384:
              v263 = &v253[3 * v252];
              if (v257 == v263
                || ((*v257 >> 1) & 3 | *(_DWORD *)((*v257 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v213 + 24) | v214))
              {
                v257 = v263;
              }
              if (v257 == v263)
                v264 = 0;
              else
                v264 = v257;
              v265 = v264[1];
              if (((v265 >> 1) & 3 | *(_DWORD *)((v265 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((v241 & 0xFFFFFFFFFFFFFFF8) + 24) | (v241 >> 1) & 3))
              {
                if (v265 == v241 && v561 != 0)
                {
                  v268 = *v245;
                  v269 = v559;
                  if (v559 >= (unint64_t)HIDWORD(v559))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v560, v559 + 1, 4);
                    v269 = v559;
                  }
                  *((_DWORD *)__dst + v269) = v268;
                  LODWORD(v559) = v559 + 1;
                }
              }
              else
              {
                v266 = *v245;
                v571 = v573;
                v573[0] = v266;
                v572 = 0xC00000001;
                v574 = v265;
                __src = v577;
                v577[0] = v266;
                v576 = 0xC00000001;
                v557 = v265;
                if (v561)
                {
                  if ((_DWORD)v559)
                  {
                    *(_DWORD *)__dst = v577[0];
                  }
                  else
                  {
                    if (!HIDWORD(v559))
                    {
                      LODWORD(v559) = 0;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v560, 1uLL, 4);
                    }
                    if ((_DWORD)v576)
                      memcpy(__dst, __src, 4 * v576);
                  }
                  LODWORD(v559) = 1;
                  LODWORD(v576) = 0;
                  if (__src != v577)
                    free(__src);
                }
                else
                {
                  __dst = v560;
                  v560[0] = v266;
                  v559 = 0xC00000001;
                  LODWORD(v576) = 0;
                  v561 = 1;
                }
                if (v571 != v573)
                  free(v571);
                v241 = v265;
              }
              v270 = v245 + 6;
              while (v270 != v246)
              {
                v271 = *v270;
                v270 += 6;
                if (v271 <= 0xFFFFFFFD)
                {
                  v245 = v270 - 6;
                  goto LABEL_372;
                }
              }
              v245 = v246;
              continue;
            }
          }
          else
          {
            LODWORD(v252) = 0;
          }
          v257 = &v253[3 * v252];
          goto LABEL_384;
        }
        break;
      }
      v272 = v580[0];
      if (!v580[0])
        goto LABEL_430;
      v273 = *((_QWORD *)&v579 + 1);
      v275 = *(_DWORD *)(*((_QWORD *)&v579 + 1) + 8);
      v274 = *(_DWORD *)(*((_QWORD *)&v579 + 1) + 12);
      if (v274 >= v275)
        goto LABEL_419;
      v276 = *((_QWORD *)&v579 + 1) + 16 * v580[0];
      v277 = *(_QWORD *)(v276 - 16);
      v278 = *(unsigned int *)(v276 - 4);
      if (((*(_QWORD *)(v277 + 16 * v278) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v277 + 16 * v278) & 0xFFFFFFFFFFFFFFF8)
                                                                               + 24)) > (*(_DWORD *)(v213 + 24) | v214))
        goto LABEL_419;
      if (v214 == 3)
        v378 = *(_QWORD *)(v213 + 8) & 0xFFFFFFFFFFFFFFF9;
      else
        v378 = v213 | (2 * v214 + 2);
      v520 = v378;
      v379 = v277 + 24 * v278;
      v380 = *(unsigned __int8 *)(v379 + 72);
      if (v380 == v535
        && *(_QWORD *)(v277 + 24 * v278 + 80) == v536
        && !memcmp(*(const void **)(v379 + 64), v534, 4 * (v380 & 0x3F))
        && *(_QWORD *)(v277 + 16 * v278 + 8) == v520)
      {
        sub_1C51010D0((uint64_t)&v579);
        v272 = v580[0];
        if (v580[0])
        {
          v273 = *((_QWORD *)&v579 + 1);
          v275 = *(_DWORD *)(*((_QWORD *)&v579 + 1) + 8);
          v274 = *(_DWORD *)(*((_QWORD *)&v579 + 1) + 12);
LABEL_419:
          if (v274 < v275)
          {
            v279 = *(_QWORD *)(*(_QWORD *)(v273 + 16 * v272 - 16) + 16 * *(unsigned int *)(v273 + 16 * v272 - 4));
            if (((v279 >> 1) & 3 | *(_DWORD *)((v279 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v241 & 0xFFFFFFFFFFFFFFF8) + 24) | (v241 >> 1) & 3))
            {
              LOBYTE(v574) = 0;
              v578 = 0;
              sub_1C51016DC((uint64_t)&v557, (uint64_t)&v574);
              if (v578 && __src != v577)
                free(__src);
              v241 = v279;
            }
          }
        }
LABEL_430:
        if (((v520 >> 1) & 3 | *(_DWORD *)((v520 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((v241 >> 1) & 3 | *(_DWORD *)((v241 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          sub_1C50FE758(&v574, (uint64_t)&v534);
          sub_1C50FE758((uint64_t *)&v571, (uint64_t)&v574);
          sub_1C50FE3C4((uint64_t)&v579, v520, v241, (uint64_t)&v571);
          v280 = v571;
          v571 = 0;
          if (v280)
            MEMORY[0x1CAA32F9C](v280, 0x1000C8052888210);
          v281 = v574;
          v574 = 0;
          if (v281)
            MEMORY[0x1CAA32F9C](v281, 0x1000C8052888210);
        }
      }
      else
      {
        LOBYTE(v574) = 0;
        v578 = 0;
        sub_1C51016DC((uint64_t)&v557, (uint64_t)&v574);
        if (v578 && __src != v577)
          free(__src);
      }
      if (*((unsigned int **)&v579 + 1) != &v580[2])
        free(*((void **)&v579 + 1));
      v282 = v534;
      v534 = 0;
      if (v282)
        MEMORY[0x1CAA32F9C](v282, 0x1000C8052888210);
      v283 = v522;
      if (!v561)
        goto LABEL_598;
      v571 = v573;
      v572 = 0x200000000;
      if ((_DWORD)v559)
      {
        v284 = 0;
        v285 = (unsigned int *)__dst;
        v286 = 4 * v559;
        do
        {
          v287 = *v285;
          v288 = *(_QWORD *)(v192 + 56);
          if ((*(_DWORD *)(v288 + 32 * v287) & 0xFFF00) != 0)
            goto LABEL_593;
          v289 = *(_DWORD *)(v288 + 32 * v287 + 4);
          if ((v289 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v283 + 416)
            || (v290 = *(llvm::LiveInterval **)(*(_QWORD *)(v283 + 408) + 8 * (v289 & 0x7FFFFFFF))) == 0)
          {
            v290 = (llvm::LiveInterval *)sub_1C4851220(v283, v289);
            v292 = *(_QWORD *)(v522 + 304);
            v293 = *(_QWORD *)(v522 + 248);
            *(_QWORD *)v292 = v293;
            *(_QWORD *)(v292 + 8) = *(_QWORD *)(v293 + 40);
            *(_OWORD *)(v292 + 16) = *(_OWORD *)(v522 + 288);
            *(_QWORD *)(v292 + 32) = v502;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v292);
            *(_DWORD *)(v292 + 184) = 0;
            v294 = *(_QWORD *)(v522 + 256);
            v14 = *(_BYTE *)(v294 + 16) == 0;
            v295 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v294 + 24)
                                                   + 16 * (*((_DWORD *)v290 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v297 = !v14 && v295 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v522 + 304), v290, v297);
            llvm::LiveIntervals::computeDeadValues(v522, (uint64_t)v290, 0);
            v283 = v522;
            v284 = v572;
          }
          if (v284 >= HIDWORD(v572))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v571, (uint64_t)v573, v284 + 1, 16);
            v283 = v522;
            v284 = v572;
          }
          v291 = (char *)v571 + 16 * v284;
          *v291 = v287;
          v291[1] = v290;
          v284 = v572 + 1;
          LODWORD(v572) = v572 + 1;
          ++v285;
          v286 -= 4;
        }
        while (v286);
      }
      sub_1C50FE758((uint64_t *)&__s2, (uint64_t)&v537);
      v298 = v522;
      v521 = v557;
      v299 = (char *)v571;
      v300 = v572;
      if ((_DWORD)v572)
      {
        v301 = (uint64_t *)((char *)v571 + 8);
        v302 = 16 * v572;
        do
        {
          v303 = *v301;
          v301 += 2;
          if ((*(_DWORD *)(v303 + 112) & 0x80000000) == 0)
            goto LABEL_591;
          v302 -= 16;
        }
        while (v302);
      }
      v304 = (char *)v571 + 16 * v572;
      *(_QWORD *)&v579 = 1;
      for (m = 2; m != 90; m += 22)
        v580[m - 4] = -1;
      v306 = v511;
      if (v300)
      {
        while (2)
        {
          LODWORD(v539) = *(_DWORD *)v299;
          v307 = *(unsigned int *)(*((_QWORD *)v299 + 1) + 112);
          if ((v307 & 0x80000000) != 0)
            v308 = (int **)(*(_QWORD *)(v306 + 24) + 16 * (v307 & 0x7FFFFFFF) + 8);
          else
            v308 = (int **)(*(_QWORD *)(v306 + 272) + 8 * v307);
          v309 = *v308;
          if (*v308)
          {
            while (1)
            {
              v310 = *v309;
              if ((*v309 & 0x81000000) == 0)
                break;
              v309 = (int *)*((_QWORD *)v309 + 3);
              if (!v309)
                goto LABEL_469;
            }
LABEL_471:
            if ((v310 & 0xFFF00) != 0)
              goto LABEL_498;
            v311 = *((_QWORD *)v309 + 1);
            if (**(_WORD **)(v311 + 16) != 19)
              goto LABEL_498;
            v312 = *(_DWORD *)(*(_QWORD *)(v311 + 32) + 4);
            if ((v312 & 0x80000000) == 0)
              goto LABEL_498;
            v313 = *(_WORD *)(v311 + 44);
            v314 = *((_QWORD *)v309 + 1);
            if ((v313 & 4) != 0)
            {
              do
                v314 = *(_QWORD *)v314 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v314 + 44) & 4) != 0);
            }
            if ((v313 & 8) != 0)
            {
              do
                v311 = *(_QWORD *)(v311 + 8);
              while ((*(_WORD *)(v311 + 44) & 8) != 0);
            }
            v315 = *(_QWORD *)(v311 + 8);
            if (v314 != v315)
            {
              while (1)
              {
                v316 = **(unsigned __int16 **)(v314 + 16);
                v151 = v316 > 0x17;
                v317 = (1 << v316) & 0x83E000;
                if (v151 || v317 == 0)
                  break;
                v314 = *(_QWORD *)(v314 + 8);
                if (v314 == v315)
                {
                  v314 = v315;
                  break;
                }
              }
            }
            v319 = *(_QWORD *)(v298 + 288);
            v320 = *(_QWORD *)(v319 + 368);
            v321 = *(unsigned int *)(v319 + 384);
            if ((_DWORD)v321)
            {
              LODWORD(v322) = ((v314 >> 4) ^ (v314 >> 9)) & (v321 - 1);
              v323 = (uint64_t *)(v320 + 16 * v322);
              v324 = *v323;
              if (v314 != *v323)
              {
                v325 = 1;
                while (v324 != -4096)
                {
                  v326 = v322 + v325++;
                  v322 = v326 & (v321 - 1);
                  v324 = *(_QWORD *)(v320 + 16 * v322);
                  if (v314 == v324)
                  {
                    v323 = (uint64_t *)(v320 + 16 * v322);
                    goto LABEL_490;
                  }
                }
                goto LABEL_489;
              }
            }
            else
            {
LABEL_489:
              v323 = (uint64_t *)(v320 + 16 * v321);
            }
LABEL_490:
            v327 = v323[1] & 0xFFFFFFFFFFFFFFF8;
            v574 = v192 + 200;
            __src = v577;
            v576 = 0x400000000;
            sub_1C50FEC80(&v574, v327 | 2);
            v328 = __src;
            if (!(_DWORD)v576)
            {
LABEL_495:
              v298 = v522;
              goto LABEL_496;
            }
            v298 = v522;
            if (*((_DWORD *)__src + 3) < *((_DWORD *)__src + 2))
            {
              v329 = (char *)__src + 16 * v576;
              v330 = *((_QWORD *)v329 - 2);
              v331 = *((_DWORD *)v329 - 1);
              v332 = v330 + 24 * v331;
              v333 = *(unsigned __int8 *)(v332 + 72);
              if (v333 == v532 && *(_QWORD *)(v330 + 24 * v331 + 80) == v533)
              {
                if (memcmp(*(const void **)(v332 + 64), __s2, 4 * (v333 & 0x3F)))
                  goto LABEL_495;
                v298 = v522;
                if ((v312 & 0x7FFFFFFFu) < *(_DWORD *)(v522 + 416))
                {
                  v334 = *(_QWORD *)(*(_QWORD *)(v522 + 408) + 8 * (v312 & 0x7FFFFFFF));
                  if (v334)
                  {
                    v335 = *(_DWORD *)(v334 + 8);
                    v336 = *(_QWORD **)v334;
                    if (v335)
                    {
                      v337 = v336[3 * v335 - 2];
                      v338 = *(_DWORD *)(v327 + 24) | 2;
                      v339 = (v337 >> 1) & 3 | *(_DWORD *)((v337 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v340 = *(_QWORD **)v334;
                      v341 = *(unsigned int *)(v334 + 8);
                      if (v338 < v339)
                      {
                        do
                        {
                          v342 = v341 >> 1;
                          v343 = v340[3 * (v341 >> 1) + 1];
                          LODWORD(v343) = (v343 >> 1) & 3 | *(_DWORD *)((v343 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v341 -= (v341 >> 1) + 1;
                          v344 = v338 >= v343;
                          if (v338 >= v343)
                            v345 = v342 + 1;
                          else
                            v345 = 0;
                          v340 += 3 * v345;
                          if (!v344)
                            v341 = v342;
                        }
                        while (v341);
LABEL_518:
                        if (v340 == &v336[3 * v335]
                          || ((*v340 >> 1) & 3 | *(_DWORD *)((*v340 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v327 + 24) | 2u))
                        {
                          v346 = 0;
                        }
                        else
                        {
                          v346 = v340[2];
                        }
                        v347 = sub_1C61E148C(&v579, (int *)&v539);
                        v348 = v347;
                        v349 = v347[4];
                        if (v349 >= v347[5])
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v347 + 2), (uint64_t)(v347 + 6), v349 + 1, 16);
                          v349 = v348[4];
                        }
                        v298 = v522;
                        v350 = (_QWORD *)(*((_QWORD *)v348 + 1) + 16 * v349);
                        *v350 = v334;
                        v350[1] = v346;
                        ++v348[4];
                        v328 = __src;
                        v306 = v511;
                        goto LABEL_496;
                      }
                    }
                    else
                    {
                      v335 = 0;
                    }
                    v340 = &v336[3 * v335];
                    goto LABEL_518;
                  }
                }
              }
            }
LABEL_496:
            if (v328 != v577)
            {
              free(v328);
              v298 = v522;
            }
LABEL_498:
            while (1)
            {
              v309 = (int *)*((_QWORD *)v309 + 3);
              if (!v309)
                break;
              v310 = *v309;
              if ((*v309 & 0x81000000) == 0)
                goto LABEL_471;
            }
          }
LABEL_469:
          v299 += 16;
          if (v299 == v304)
            break;
          continue;
        }
      }
      v351 = v579;
      if (v579 < 2)
        goto LABEL_581;
      v574 = v192 + 200;
      __src = v577;
      v576 = 0x400000000;
      sub_1C50FEC80(&v574, v521);
      if ((_DWORD)v576)
      {
        v352 = __src;
        if (*((_DWORD *)__src + 3) < *((_DWORD *)__src + 2))
        {
          v353 = *(_QWORD *)(*((_QWORD *)__src + 2 * v576 - 2)
                           + 16 * *((unsigned int *)__src + 4 * v576 - 1));
          if (((v353 >> 1) & 3 | *(_DWORD *)((v353 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v521 & 0xFFFFFFFFFFFFFFF8) + 24) | (v521 >> 1) & 3))
            goto LABEL_578;
        }
      }
      sub_1C50FE758(v542, (uint64_t)&__s2);
      if (!(_DWORD)v572)
      {
        v357 = (v521 >> 1) & 3;
        v356 = v521 & 0xFFFFFFFFFFFFFFF8;
        goto LABEL_568;
      }
      v354 = (__int32 *)v571;
      v355 = (__int32 *)((char *)v571 + 16 * v572);
      v356 = v521 & 0xFFFFFFFFFFFFFFF8;
      v357 = (v521 >> 1) & 3;
      while (2)
      {
        v358 = *v354;
        LODWORD(v541[0]) = *v354;
        v359 = sub_1C61E148C(&v579, (int *)v541);
        v360 = v359[4];
        if (!(_DWORD)v360)
          goto LABEL_575;
        v361 = (uint64_t **)*((_QWORD *)v359 + 1);
        v362 = &v361[2 * v360];
        while (2)
        {
          v363 = *((_DWORD *)*v361 + 2);
          v364 = **v361;
          if (!v363)
          {
            v363 = 0;
LABEL_543:
            v368 = (_QWORD *)(v364 + 24 * v363);
            goto LABEL_544;
          }
          v365 = *(_QWORD *)(v364 + 24 * v363 - 16);
          v366 = *(_DWORD *)(v356 + 24) | v357;
          v367 = (v365 >> 1) & 3 | *(_DWORD *)((v365 & 0xFFFFFFFFFFFFFFF8) + 24);
          v368 = (_QWORD *)**v361;
          v369 = *((unsigned int *)*v361 + 2);
          if (v366 >= v367)
            goto LABEL_543;
          do
          {
            v370 = v369 >> 1;
            v371 = v368[3 * (v369 >> 1) + 1];
            LODWORD(v371) = (v371 >> 1) & 3 | *(_DWORD *)((v371 & 0xFFFFFFFFFFFFFFF8) + 24);
            v369 -= (v369 >> 1) + 1;
            v372 = v366 >= v371;
            if (v366 >= v371)
              v373 = v370 + 1;
            else
              v373 = 0;
            v368 += 3 * v373;
            if (!v372)
              v369 = v370;
          }
          while (v369);
LABEL_544:
          if (v368 == (_QWORD *)(v364 + 24 * v363)
            || ((*v368 >> 1) & 3 | *(_DWORD *)((*v368 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v356 + 24) | v357))
          {
            v374 = 0;
          }
          else
          {
            v374 = (uint64_t *)v368[2];
          }
          v375 = v361[1];
          if (v374 != v375)
          {
            v361 += 2;
            if (v361 == v362)
              goto LABEL_575;
            continue;
          }
          break;
        }
        v376 = sub_1C50FDFA8(v192, *(llvm::MachineOperand **)(*(_QWORD *)((v375[1] & 0xFFFFFFFFFFFFFFF8) + 16) + 32));
        sub_1C5101798(&v539, (uint64_t)v542, v358, v376);
        sub_1C510002C((uint64_t)v542, (uint64_t)&v539);
        v377 = v539;
        v539 = 0;
        if (v377)
          MEMORY[0x1CAA32F9C](v377, 0x1000C8052888210);
        v354 += 4;
        if (v354 != v355)
          continue;
        break;
      }
LABEL_568:
      if (v357 == 3)
        v381 = *(_QWORD *)(v356 + 8) & 0xFFFFFFFFFFFFFFF9;
      else
        v381 = v356 | (2 * v357 + 2);
      sub_1C50FE758(v541, (uint64_t)v542);
      sub_1C50FE3C4((uint64_t)&v574, v521, v381, (uint64_t)v541);
      v382 = v541[0];
      v541[0] = 0;
      if (v382)
        MEMORY[0x1CAA32F9C](v382, 0x1000C8052888210);
      v539 = v521;
      sub_1C50FE758(v540, (uint64_t)v542);
      sub_1C5100F74((uint64_t)v569, (char *)&v539);
      v383 = v540[0];
      v540[0] = 0;
      if (v383)
        MEMORY[0x1CAA32F9C](v383, 0x1000C8052888210);
LABEL_575:
      v384 = v542[0];
      v542[0] = 0;
      if (v384)
        MEMORY[0x1CAA32F9C](v384, 0x1000C8052888210);
      v352 = __src;
LABEL_578:
      if (v352 != v577)
        free(v352);
      v351 = v579;
LABEL_581:
      if ((v351 & 1) != 0)
      {
        v385 = (char *)&v579 + 8;
        v386 = 4;
LABEL_583:
        v387 = 88 * v386;
        v388 = v385 + 24;
        do
        {
          if (*((_DWORD *)v388 - 6) <= 0xFFFFFFFD)
          {
            v389 = (char *)*((_QWORD *)v388 - 2);
            if (v388 != v389)
              free(v389);
          }
          v388 += 88;
          v387 -= 88;
        }
        while (v387);
        v351 = v579;
      }
      else
      {
        v386 = v580[0];
        if (v580[0])
        {
          v385 = (char *)*((_QWORD *)&v579 + 1);
          goto LABEL_583;
        }
      }
      if ((v351 & 1) == 0)
        MEMORY[0x1CAA32FB4](*((_QWORD *)&v579 + 1), 8);
LABEL_591:
      v390 = __s2;
      __s2 = 0;
      if (v390)
        MEMORY[0x1CAA32F9C](v390, 0x1000C8052888210);
LABEL_593:
      if (v571 != v573)
        free(v571);
      if (v561 && __dst != v560)
        free(__dst);
LABEL_598:
      if (v562 != v564)
        free(v562);
      if ((v565 & 1) == 0)
        MEMORY[0x1CAA32FB4](v566, 8);
      v391 = (uint64_t)v537;
      v537 = 0;
      if (v391)
        MEMORY[0x1CAA32F9C](v391, 0x1000C8052888210);
      v205 = v524 + 1;
    }
    while (*(_DWORD *)&v569[8] != v524 + 1);
LABEL_612:
    v392 = *(_DWORD **)(v192 + 32);
    if (v392[2] != 2)
      goto LABEL_613;
    if (!*((_QWORD *)v392 - 1))
      goto LABEL_613;
    LexicalScope = llvm::LexicalScopes::findLexicalScope((int8x8_t *)&v543, (const llvm::DILocation *)v392);
    if (!LexicalScope)
      goto LABEL_613;
    v405 = LexicalScope;
    sub_1C5100EEC((uint64_t)&v579, v192 + 200);
    v406 = *((unsigned int *)v405 + 22);
    if (!(_DWORD)v406)
      goto LABEL_724;
    v407 = 0;
    v408 = (unint64_t *)v405[10];
    v409 = &v408[2 * v406];
    while (2)
    {
      v410 = *v408;
      v411 = *(_WORD *)(*v408 + 44);
      v412 = *v408;
      if ((v411 & 4) != 0)
      {
        do
          v412 = *(_QWORD *)v412 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v412 + 44) & 4) != 0);
      }
      if ((v411 & 8) != 0)
      {
        do
          v410 = *(_QWORD *)(v410 + 8);
        while ((*(_WORD *)(v410 + 44) & 8) != 0);
      }
      v413 = *(_QWORD *)(v410 + 8);
      if (v412 != v413)
      {
        while (1)
        {
          v414 = **(unsigned __int16 **)(v412 + 16);
          v151 = v414 > 0x17;
          v415 = (1 << v414) & 0x83E000;
          if (v151 || v415 == 0)
            break;
          v412 = *(_QWORD *)(v412 + 8);
          if (v412 == v413)
          {
            v412 = v413;
            break;
          }
        }
      }
      v417 = *(_QWORD *)(v522 + 288);
      v418 = *(_QWORD *)(v417 + 368);
      v419 = *(unsigned int *)(v417 + 384);
      if ((_DWORD)v419)
      {
        LODWORD(v420) = ((v412 >> 4) ^ (v412 >> 9)) & (v419 - 1);
        v421 = (uint64_t *)(v418 + 16 * v420);
        v422 = *v421;
        if (v412 != *v421)
        {
          v423 = 1;
          while (v422 != -4096)
          {
            v424 = v420 + v423++;
            v420 = v424 & (v419 - 1);
            v422 = *(_QWORD *)(v418 + 16 * v420);
            if (v412 == v422)
            {
              v421 = (uint64_t *)(v418 + 16 * v420);
              goto LABEL_650;
            }
          }
          goto LABEL_649;
        }
      }
      else
      {
LABEL_649:
        v421 = (uint64_t *)(v418 + 16 * v419);
      }
LABEL_650:
      v425 = v421[1];
      v557 = v425;
      v426 = v408[1];
      v427 = *(_WORD *)(v426 + 44);
      v428 = v426;
      if ((v427 & 4) != 0)
      {
        do
          v428 = *(_QWORD *)v428 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v428 + 44) & 4) != 0);
      }
      if ((v427 & 8) != 0)
      {
        do
          v426 = *(_QWORD *)(v426 + 8);
        while ((*(_WORD *)(v426 + 44) & 8) != 0);
      }
      v429 = *(_QWORD *)(v426 + 8);
      if (v428 != v429)
      {
        while (1)
        {
          v430 = **(unsigned __int16 **)(v428 + 16);
          v151 = v430 > 0x17;
          v431 = (1 << v430) & 0x83E000;
          if (v151 || v431 == 0)
            break;
          v428 = *(_QWORD *)(v428 + 8);
          if (v428 == v429)
          {
            v428 = v429;
            break;
          }
        }
      }
      if ((_DWORD)v419)
      {
        LODWORD(v433) = ((v428 >> 4) ^ (v428 >> 9)) & (v419 - 1);
        v434 = (uint64_t *)(v418 + 16 * v433);
        v435 = *v434;
        if (v428 != *v434)
        {
          v436 = 1;
          while (v435 != -4096)
          {
            v437 = v433 + v436++;
            v433 = v437 & (v419 - 1);
            v435 = *(_QWORD *)(v418 + 16 * v433);
            if (v428 == v435)
            {
              v434 = (uint64_t *)(v418 + 16 * v433);
              goto LABEL_666;
            }
          }
          goto LABEL_665;
        }
      }
      else
      {
LABEL_665:
        v434 = (uint64_t *)(v418 + 16 * v419);
      }
LABEL_666:
      v438 = v434[1];
      v439 = *(_QWORD *)(*v408 + 24);
      if (*(_QWORD *)(v439 + 56) == *v408)
      {
        v440 = v419 - 1;
        v441 = *v408;
        while (v441 != *v408)
        {
          v441 = *(_QWORD *)v441 & 0xFFFFFFFFFFFFFFF8;
          if (!v441 || (*(_BYTE *)v441 & 4) == 0)
          {
            while ((*(_WORD *)(v441 + 44) & 4) != 0)
              v441 = *(_QWORD *)v441 & 0xFFFFFFFFFFFFFFF8;
          }
          v442 = (uint64_t *)(v418 + 16 * v419);
          if ((_DWORD)v419)
          {
            LODWORD(v443) = ((v441 >> 4) ^ (v441 >> 9)) & v440;
            v442 = (uint64_t *)(v418 + 16 * v443);
            v444 = *v442;
            if (v441 != *v442)
            {
              v445 = 1;
              while (v444 != -4096)
              {
                v446 = v443 + v445++;
                v443 = v446 & v440;
                v444 = *(_QWORD *)(v418 + 16 * v443);
                if (v441 == v444)
                {
                  v442 = (uint64_t *)(v418 + 16 * v443);
                  goto LABEL_680;
                }
              }
              v442 = (uint64_t *)(v418 + 16 * v419);
            }
          }
LABEL_680:
          if (v442 != (uint64_t *)(v418 + 16 * v419))
          {
            v447 = v442 + 1;
            goto LABEL_682;
          }
        }
        v447 = (uint64_t *)(*(_QWORD *)(v417 + 392) + 16 * *(unsigned int *)(v439 + 24));
LABEL_682:
        v425 = *v447;
        v557 = *v447;
      }
      if (v407 >= 8)
      {
        v448 = *((_QWORD *)&v579 + 1) + 16 * v580[0];
        v449 = *(_QWORD *)(v448 - 16);
        v450 = *(unsigned int *)(v448 - 4);
        if (((*(_QWORD *)(v449 + 16 * v450) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v449 + 16 * v450) & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 24)) < (*(_DWORD *)((v407 & 0xFFFFFFFFFFFFFFF8) + 24) | (v407 >> 1) & 3))
        {
          v451 = *(_QWORD *)(v449 + 16 * v450 + 8);
          sub_1C50FE758(&v565, v449 + 24 * v450 + 64);
          sub_1C51011BC((uint64_t)&v579, v407);
          sub_1C51010D0((uint64_t)&v579);
          v452 = v557;
          if (((v557 >> 1) & 3 | *(_DWORD *)((v557 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v451 & 0xFFFFFFFFFFFFFFF8) + 24) | (v451 >> 1) & 3))
          {
            sub_1C50FE758(&v574, (uint64_t)&v565);
            sub_1C50FE3C4((uint64_t)&v579, v452, v451, (uint64_t)&v574);
            v453 = v574;
            v574 = 0;
            if (v453)
              MEMORY[0x1CAA32F9C](v453, 0x1000C8052888210);
          }
          v454 = v565;
          v565 = 0;
          if (v454)
            MEMORY[0x1CAA32F9C](v454, 0x1000C8052888210);
          v425 = v557;
        }
      }
      sub_1C51011FC(&v579, v425);
      if (!v580[0] || *(_DWORD *)(*((_QWORD *)&v579 + 1) + 12) >= *(_DWORD *)(*((_QWORD *)&v579 + 1) + 8))
        goto LABEL_724;
      v455 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)&v579 + 1) + 16 * v580[0] - 16)
                      + 16 * *(unsigned int *)(*((_QWORD *)&v579 + 1) + 16 * v580[0] - 4));
      if (((*v455 >> 1) & 3 | *(_DWORD *)((*v455 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v557 & 0xFFFFFFFFFFFFFFF8) + 24) | (v557 >> 1) & 3))
      {
        *v455 = v557;
        if (*(_QWORD *)(v192 + 424))
          goto LABEL_695;
        v456 = *(_QWORD *)(v192 + 376);
        v457 = *(unsigned int *)(v192 + 384);
        v458 = v557;
        if (!(_DWORD)v457)
          goto LABEL_703;
        v459 = 8 * v457;
        v460 = *(_QWORD **)(v192 + 376);
        while (*v460 != v557)
        {
          ++v460;
          v459 -= 8;
          if (!v459)
            goto LABEL_702;
        }
        if (v459)
          goto LABEL_706;
LABEL_702:
        if (v457 >= 2)
        {
          do
          {
            v462 = (uint64_t *)(*(_QWORD *)(v192 + 376) + 8 * v457 - 8);
            sub_1C4A09820(v192 + 408, v462, v462);
            LODWORD(v457) = *(_DWORD *)(v192 + 384) - 1;
            *(_DWORD *)(v192 + 384) = v457;
          }
          while ((_DWORD)v457);
LABEL_695:
          sub_1C4A09820(v192 + 408, &v557, &v557);
        }
        else
        {
LABEL_703:
          if (v457 >= *(_DWORD *)(v192 + 388))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v192 + 376, v192 + 392, v457 + 1, 8);
            v456 = *(_QWORD *)(v192 + 376);
            v457 = *(unsigned int *)(v192 + 384);
          }
          *(_QWORD *)(v456 + 8 * v457) = v458;
          ++*(_DWORD *)(v192 + 384);
        }
      }
LABEL_706:
      v461 = *(_QWORD *)((v438 & 0xFFFFFFFFFFFFFFF8) + 8);
      v407 = v461 & 0xFFFFFFFFFFFFFFF9 | v438 & 6;
      sub_1C51011FC(&v579, v407);
      if (!v580[0] || *(_DWORD *)(*((_QWORD *)&v579 + 1) + 12) >= *(_DWORD *)(*((_QWORD *)&v579 + 1) + 8))
        goto LABEL_724;
      v408 += 2;
      if (v408 != v409)
        continue;
      break;
    }
    if (v407 >= 8)
    {
      v463 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v579 + 1) + 16 * v580[0] - 16)
                       + 16 * *(unsigned int *)(*((_QWORD *)&v579 + 1) + 16 * v580[0] - 4));
      if (((v463 >> 1) & 3 | *(_DWORD *)((v463 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v461 & 0xFFFFFFFFFFFFFFF8) + 24) | ((v438 & 6) >> 1)))
        sub_1C51011BC((uint64_t)&v579, v461 & 0xFFFFFFFFFFFFFFF9 | v438 & 6);
    }
LABEL_724:
    if (*((unsigned int **)&v579 + 1) != &v580[2])
      free(*((void **)&v579 + 1));
LABEL_613:
    v393 = *(_BYTE **)v569;
    if (*(_DWORD *)&v569[8])
    {
      v394 = *(_QWORD *)v569 - 24;
      v395 = 32 * *(unsigned int *)&v569[8];
      v396 = v507;
      do
      {
        v397 = *(_QWORD *)(v394 + v395);
        *(_QWORD *)(v394 + v395) = 0;
        if (v397)
          MEMORY[0x1CAA32F9C](v397, 0x1000C8052888210);
        v395 -= 32;
      }
      while (v395);
      v393 = *(_BYTE **)v569;
    }
    else
    {
      v396 = v507;
    }
    if (v393 != &v569[16])
      free(v393);
    v398 = *(_QWORD *)(*(_QWORD *)(v517 + 976) + 8 * v396);
    v399 = *(unsigned int *)(v398 + 64);
    if ((_DWORD)v399)
    {
      v400 = 0;
      v401 = 32 * v399;
      do
      {
        v402 = *(_QWORD *)(v398 + 56);
        if (!*(_BYTE *)(v402 + v400))
        {
          v403 = *(_DWORD *)(v402 + v400 + 4);
          if (v403 < 0)
            sub_1C5101AB4((_DWORD *)v517, v403, v398);
        }
        v400 += 32;
      }
      while (v401 != v400);
    }
  }
LABEL_726:
  sub_1C5101D30((uint64_t)&v543);
  v464 = v517;
  v465 = *(_QWORD *)(v517 + 112);
  v466 = *(_QWORD *)(v465 + 1096);
  v467 = *(unsigned int *)(v465 + 1112);
  v468 = (unsigned int *)(v466 + 24 * v467);
  if (*(_DWORD *)(v465 + 1104))
  {
    if ((_DWORD)v467)
    {
      v469 = 24 * v467;
      v470 = *(unsigned int **)(v465 + 1096);
      while (*v470 >= 0xFFFFFFFE)
      {
        v470 += 6;
        v469 -= 24;
        if (!v469)
          goto LABEL_731;
      }
    }
    else
    {
      v470 = *(unsigned int **)(v465 + 1096);
    }
  }
  else
  {
LABEL_731:
    v470 = (unsigned int *)(v466 + 24 * v467);
  }
  v473 = (unsigned int *)(v466 + 24 * v467);
  if (v470 != v473)
  {
    v528 = *(_QWORD *)(*(_QWORD *)(v517 + 120) + 288);
    v474 = (uint64_t **)(v517 + 144);
    do
    {
      v475 = *((_QWORD *)v470 + 1);
      v476 = *((_QWORD *)v470 + 2);
      *(_DWORD *)v569 = v476;
      v477 = *(_QWORD *)(*(_QWORD *)(v528 + 392) + 16 * *(unsigned int *)(v475 + 24));
      v478 = *v470;
      v479 = *v474;
      v480 = (uint64_t **)(v517 + 144);
      v481 = (uint64_t **)(v517 + 144);
      if (*v474)
      {
        while (1)
        {
          while (1)
          {
            v481 = (uint64_t **)v479;
            v482 = *((_DWORD *)v479 + 8);
            if (v478 >= v482)
              break;
            v479 = *v481;
            v480 = v481;
            if (!*v481)
              goto LABEL_746;
          }
          if (v482 >= v478)
            break;
          v479 = v481[1];
          if (!v479)
          {
            v480 = v481 + 1;
            goto LABEL_746;
          }
        }
      }
      else
      {
LABEL_746:
        v530 = v476;
        v483 = operator new(0x38uLL);
        v483[8] = v478;
        *((_QWORD *)v483 + 5) = v477;
        *((_QWORD *)v483 + 6) = v530;
        *(_QWORD *)v483 = 0;
        *((_QWORD *)v483 + 1) = 0;
        *((_QWORD *)v483 + 2) = v481;
        *v480 = (uint64_t *)v483;
        v484 = **(_QWORD **)(v464 + 136);
        if (v484)
        {
          *(_QWORD *)(v464 + 136) = v484;
          v485 = *v480;
        }
        else
        {
          v485 = (uint64_t *)v483;
        }
        sub_1C4768E74(*(uint64_t **)(v464 + 144), v485);
        ++*(_QWORD *)(v464 + 152);
      }
      v486 = (_QWORD *)sub_1C5101E30(v517 + 160, (int *)v569);
      v487 = v486;
      v489 = (char *)v486[2];
      v488 = v486[3];
      if ((unint64_t)v489 >= v488)
      {
        v491 = (char *)v486[1];
        v492 = (v489 - v491) >> 2;
        v493 = v492 + 1;
        if ((unint64_t)(v492 + 1) >> 62)
          abort();
        v494 = v488 - (_QWORD)v491;
        if (v494 >> 1 > v493)
          v493 = v494 >> 1;
        if ((unint64_t)v494 >= 0x7FFFFFFFFFFFFFFCLL)
          v495 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v495 = v493;
        if (v495)
        {
          if (v495 >> 62)
            sub_1C4764EE4();
          v496 = (char *)operator new(4 * v495);
        }
        else
        {
          v496 = 0;
        }
        v497 = &v496[4 * v492];
        *(_DWORD *)v497 = *v470;
        v490 = v497 + 4;
        while (v489 != v491)
        {
          v498 = *((_DWORD *)v489 - 1);
          v489 -= 4;
          *((_DWORD *)v497 - 1) = v498;
          v497 -= 4;
        }
        v487[1] = v497;
        v487[2] = v490;
        v487[3] = &v496[4 * v495];
        if (v491)
          operator delete(v491);
        v464 = v517;
      }
      else
      {
        *(_DWORD *)v489 = *v470;
        v490 = v489 + 4;
      }
      v487[2] = v490;
      v499 = v470 + 6;
      while (v499 != v468)
      {
        v500 = *v499;
        v499 += 6;
        if (v500 <= 0xFFFFFFFD)
        {
          v470 = v499 - 6;
          goto LABEL_773;
        }
      }
      v470 = v468;
LABEL_773:
      ;
    }
    while (v470 != v473);
  }
  v25 = v501;
  *(_BYTE *)(v464 + 969) = v501 & 1;
  return v25 & 1;
}

void sub_1C50F9604(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 248);
  if (v1)
    sub_1C50F9614(v1);
}

void sub_1C50F9614(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  int v34;
  char *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;

  v3 = a1 + 144;
  v2 = *(_QWORD **)(a1 + 144);
  *(_QWORD *)(v3 - 32) = 0;
  sub_1C49F3440(v2);
  *(_QWORD *)(v3 - 8) = v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  v4 = *(_DWORD *)(v3 + 24);
  if (!v4 && !*(_DWORD *)(a1 + 172))
    goto LABEL_3;
  v36 = (unsigned int *)(v3 + 16);
  v37 = *(unsigned int *)(a1 + 176);
  if (v37 <= 4 * v4 || v37 < 0x41)
  {
    if ((_DWORD)v37)
    {
      v38 = *(_QWORD *)v36;
      v39 = 32 * v37;
      while (1)
      {
        if (*(_DWORD *)v38 == -2)
          goto LABEL_58;
        if (*(_DWORD *)v38 != -1)
          break;
LABEL_59:
        v38 += 32;
        v39 -= 32;
        if (!v39)
          goto LABEL_60;
      }
      v40 = *(void **)(v38 + 8);
      if (v40)
      {
        *(_QWORD *)(v38 + 16) = v40;
        operator delete(v40);
      }
LABEL_58:
      *(_DWORD *)v38 = -1;
      goto LABEL_59;
    }
LABEL_60:
    *(_QWORD *)(a1 + 168) = 0;
    goto LABEL_3;
  }
  sub_1C61E1774(v36);
  if (!v4)
  {
    if (*(_DWORD *)(a1 + 176))
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)v36, 8);
      *(_QWORD *)v36 = 0;
      *((_QWORD *)v36 + 1) = 0;
      v36[4] = 0;
      goto LABEL_3;
    }
    goto LABEL_60;
  }
  v41 = 1 << (33 - __clz(v4 - 1));
  if (v41 <= 64)
    v42 = 64;
  else
    v42 = v41;
  if (v42 == *(_DWORD *)(a1 + 176))
  {
    *(_QWORD *)(a1 + 168) = 0;
    v43 = 32 * v42;
    v44 = *(_DWORD **)(a1 + 160);
    do
    {
      *v44 = -1;
      v44 += 8;
      v43 -= 32;
    }
    while (v43);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 160), 8);
    v45 = (4 * v42 / 3 + 1) | ((unint64_t)(4 * v42 / 3 + 1) >> 1);
    v46 = v45 | (v45 >> 2) | ((v45 | (v45 >> 2)) >> 4);
    LODWORD(v46) = (((v46 | (v46 >> 8)) >> 16) | v46 | (v46 >> 8)) + 1;
    *(_DWORD *)(a1 + 176) = v46;
    v47 = operator new(32 * v46, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 160) = v47;
    *(_QWORD *)(a1 + 168) = 0;
    v48 = *(unsigned int *)(a1 + 176);
    if ((_DWORD)v48)
    {
      v49 = 32 * v48;
      do
      {
        *v47 = -1;
        v47 += 8;
        v49 -= 32;
      }
      while (v49);
    }
  }
LABEL_3:
  *(_DWORD *)(a1 + 192) = 0;
  v5 = *(unsigned int *)(a1 + 984);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = *(_QWORD *)(a1 + 976) - 8;
    do
    {
      sub_1C50FD4F0((uint64_t *)(v7 + v6));
      v6 -= 8;
    }
    while (v6);
  }
  *(_DWORD *)(a1 + 984) = 0;
  v8 = *(unsigned int *)(a1 + 1064);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = *(_QWORD *)(a1 + 1056) - 8;
    do
    {
      sub_1C5100E98((uint64_t *)(v10 + v9));
      v9 -= 8;
    }
    while (v9);
  }
  *(_DWORD *)(a1 + 1064) = 0;
  v11 = (_QWORD *)(a1 + 1088);
  v12 = *(_DWORD *)(a1 + 1096);
  if (v12)
  {
    v13 = *(unsigned int *)(a1 + 1104);
    if (v13 > 4 * v12 && v13 >= 0x41)
    {
      v14 = (_DWORD *)*v11;
      v15 = 1 << (33 - __clz(v12 - 1));
      if (v15 <= 64)
        v16 = 64;
      else
        v16 = v15;
      if (v16 == (_DWORD)v13)
      {
        *(_QWORD *)(a1 + 1096) = 0;
        v17 = 16 * v13;
        do
        {
          *v14 = -1;
          v14 += 4;
          v17 -= 16;
        }
        while (v17);
      }
      else
      {
        MEMORY[0x1CAA32FB4](v14, 8);
        v26 = (4 * v16 / 3u + 1) | ((unint64_t)(4 * v16 / 3u + 1) >> 1);
        v27 = v26 | (v26 >> 2) | ((v26 | (v26 >> 2)) >> 4);
        LODWORD(v27) = (((v27 | (v27 >> 8)) >> 16) | v27 | (v27 >> 8)) + 1;
        *(_DWORD *)(a1 + 1104) = v27;
        v28 = operator new(16 * v27, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 1088) = v28;
        *(_QWORD *)(a1 + 1096) = 0;
        v29 = *(unsigned int *)(a1 + 1104);
        if ((_DWORD)v29)
        {
          v30 = 16 * v29;
          do
          {
            *v28 = -1;
            v28 += 4;
            v30 -= 16;
          }
          while (v30);
        }
      }
      goto LABEL_26;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1100))
      goto LABEL_26;
    LODWORD(v13) = *(_DWORD *)(a1 + 1104);
    if (v13 > 0x40)
    {
      MEMORY[0x1CAA32FB4](*v11, 8);
      *v11 = 0;
      *(_QWORD *)(a1 + 1096) = 0;
      *(_DWORD *)(a1 + 1104) = 0;
      goto LABEL_26;
    }
  }
  if ((_DWORD)v13)
  {
    v18 = (_DWORD *)*v11;
    v19 = 16 * v13;
    do
    {
      *v18 = -1;
      v18 += 4;
      v19 -= 16;
    }
    while (v19);
  }
  *(_QWORD *)(a1 + 1096) = 0;
LABEL_26:
  v20 = *(_DWORD *)(a1 + 1120);
  if (v20 || *(_DWORD *)(a1 + 1124))
  {
    v21 = *(_DWORD *)(a1 + 1128);
    v22 = *(_QWORD *)(a1 + 1112);
    v23 = v22 + 48 * v21;
    if (v21 <= 4 * v20 || v21 < 0x41)
    {
      if (v21)
      {
        do
        {
          *(_QWORD *)v22 = 0;
          *(_BYTE *)(v22 + 8) = 0;
          *(_BYTE *)(v22 + 24) = 0;
          *(_QWORD *)(v22 + 32) = 0;
          v22 += 48;
        }
        while (v22 != v23);
      }
      *(_QWORD *)(a1 + 1120) = 0;
    }
    else if (v20)
    {
      v24 = 1 << (33 - __clz(v20 - 1));
      if (v24 <= 64)
        v25 = 64;
      else
        v25 = v24;
      if (v25 == v21)
      {
        *(_QWORD *)(a1 + 1120) = 0;
        do
        {
          *(_QWORD *)v22 = 0;
          *(_BYTE *)(v22 + 8) = 0;
          *(_BYTE *)(v22 + 24) = 0;
          *(_QWORD *)(v22 + 32) = 0;
          v22 += 48;
        }
        while (v22 != v23);
      }
      else
      {
        MEMORY[0x1CAA32FB4]();
        v31 = (4 * v25 / 3u + 1) | ((unint64_t)(4 * v25 / 3u + 1) >> 1);
        v32 = v31 | (v31 >> 2) | ((v31 | (v31 >> 2)) >> 4);
        LODWORD(v32) = (((v32 | (v32 >> 8)) >> 16) | v32 | (v32 >> 8)) + 1;
        *(_DWORD *)(a1 + 1128) = v32;
        v33 = (char *)operator new(48 * v32, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 1112) = v33;
        *(_QWORD *)(a1 + 1120) = 0;
        v34 = *(_DWORD *)(a1 + 1128);
        if (v34)
        {
          v35 = &v33[48 * v34];
          do
          {
            *(_QWORD *)v33 = 0;
            v33[8] = 0;
            v33[24] = 0;
            *((_QWORD *)v33 + 4) = 0;
            v33 += 48;
          }
          while (v33 != v35);
        }
      }
    }
    else
    {
      MEMORY[0x1CAA32FB4]();
      *(_QWORD *)(a1 + 1112) = 0;
      *(_QWORD *)(a1 + 1120) = 0;
      *(_DWORD *)(a1 + 1128) = 0;
    }
  }
  *(_WORD *)(a1 + 968) = 0;
}

void sub_1C50F9A98(llvm::Pass *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  *(_QWORD *)a1 = &off_1E8143218;
  v2 = *((_QWORD *)a1 + 31);
  if (v2)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 1112), 8);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 1088), 8);
    v3 = *(char **)(v2 + 1056);
    v4 = *(unsigned int *)(v2 + 1064);
    if ((_DWORD)v4)
    {
      v8 = 8 * v4;
      v9 = v3 - 8;
      do
      {
        sub_1C5100E98((uint64_t *)&v9[v8]);
        v8 -= 8;
      }
      while (v8);
      v3 = *(char **)(v2 + 1056);
    }
    if (v3 != (char *)(v2 + 1072))
      free(v3);
    v5 = *(char **)(v2 + 976);
    v6 = *(unsigned int *)(v2 + 984);
    if ((_DWORD)v6)
    {
      v10 = 8 * v6;
      v11 = v5 - 8;
      do
      {
        sub_1C50FD4F0((uint64_t *)&v11[v10]);
        v10 -= 8;
      }
      while (v10);
      v5 = *(char **)(v2 + 976);
    }
    if (v5 != (char *)(v2 + 992))
      free(v5);
    v7 = *(void **)(v2 + 184);
    if (v7 != (void *)(v2 + 200))
      free(v7);
    sub_1C61E1774((unsigned int *)(v2 + 160));
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 160), 8);
    sub_1C49F3440(*(_QWORD **)(v2 + 144));
    *(_QWORD *)(v2 + 8) = 0;
    sub_1C4926AE8(v2 + 16);
    MEMORY[0x1CAA32FC0](v2, 0x10F0C403A5B8018);
  }
  sub_1C4926674(a1);
}

uint64_t sub_1C50F9BC0(uint64_t result, int a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  unsigned int *v15;
  unsigned int *v16;
  int *v17;
  int *v18;
  int *v19;
  _QWORD *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  BOOL v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::LiveInterval *v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  unsigned int *v58;
  int *v59;
  int *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  char *v64;
  _DWORD *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  int v73;
  int *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  unsigned int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  __int32 *v89;
  size_t v90;
  __int32 *v91;
  __int32 *v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int32 v99;
  unsigned int v100;
  char *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v121;
  uint64_t v122;
  __int32 *v123;
  size_t v124;
  __int32 *v125;
  __int32 *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  _DWORD *v139;
  unsigned __int8 *v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int *v144;
  uint64_t v145;
  unsigned int v146;
  _BOOL4 v148;
  __int32 *v149;
  uint64_t v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  char v157;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164[2];
  uint64_t v165;
  int *v166;
  int v167;
  int *v168;
  int *v169;
  unsigned int v170;
  int *__p;
  int *__pa;
  unsigned int *v173;
  int v174;
  uint64_t v175;
  uint64_t v176[3];
  uint64_t v177[3];
  uint64_t v178[3];
  uint64_t v179[3];
  uint64_t v180;
  void *v181;
  uint64_t v182;
  _BYTE v183[64];
  void *v184;
  void *v185;
  int v186;
  uint64_t v187;
  void *v188;
  _DWORD *v189;
  uint64_t v190;
  _QWORD v191[10];

  v191[8] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(result + 248);
  if (!v4)
    return result;
  v5 = a3;
  v6 = a2;
  v8 = v4 + 160;
  v7 = *(_QWORD *)(v4 + 160);
  v9 = *(unsigned int *)(v4 + 176);
  if (!(_DWORD)v9)
    goto LABEL_8;
  v10 = ((_DWORD)v9 - 1) & (37 * a2);
  v11 = (int *)(v7 + 32 * v10);
  v12 = *v11;
  if (*v11 != a2)
  {
    v13 = 1;
    while (v12 != -1)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(_DWORD *)(v7 + 32 * v10);
      if (v12 == a2)
      {
        v11 = (int *)(v7 + 32 * v10);
        goto LABEL_9;
      }
    }
LABEL_8:
    v11 = (int *)(v7 + 32 * v9);
  }
LABEL_9:
  v163 = *(_QWORD *)(result + 248);
  if ((int *)(v7 + 32 * v9) != v11)
  {
    v16 = (unsigned int *)*((_QWORD *)v11 + 1);
    v15 = (unsigned int *)*((_QWORD *)v11 + 2);
    if (v16 != v15)
    {
      v168 = v11;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = (_QWORD *)(v4 + 144);
      v21 = &v5[a4];
      v173 = (unsigned int *)*((_QWORD *)v11 + 2);
      while (1)
      {
        v22 = *v16;
        v23 = *v20;
        if (!*v20)
          goto LABEL_23;
        v24 = v20;
        do
        {
          v25 = *(_DWORD *)(v23 + 32);
          v26 = v25 >= v22;
          if (v25 >= v22)
            v27 = (uint64_t *)v23;
          else
            v27 = (uint64_t *)(v23 + 8);
          if (v26)
            v24 = (_QWORD *)v23;
          v23 = *v27;
        }
        while (*v27);
        if (v24 == v20 || v22 < *((_DWORD *)v24 + 8))
LABEL_23:
          v24 = v20;
        if (!a4)
          goto LABEL_68;
        while (1)
        {
          v28 = *v5;
          v29 = *(_QWORD *)(v4 + 120);
          if ((v28 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v29 + 416)
            || (v30 = *(llvm::LiveInterval **)(*(_QWORD *)(v29 + 408) + 8 * (v28 & 0x7FFFFFFF))) == 0)
          {
            __p = v18;
            v166 = v17;
            v30 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(v4 + 120), *v5);
            *(_QWORD *)v164 = *(_QWORD *)(v29 + 304);
            v43 = *(_QWORD *)(v29 + 248);
            **(_QWORD **)v164 = v43;
            *(_QWORD *)(*(_QWORD *)v164 + 8) = *(_QWORD *)(v43 + 40);
            *(_OWORD *)(*(_QWORD *)v164 + 16) = *(_OWORD *)(v29 + 288);
            *(_QWORD *)(*(_QWORD *)v164 + 32) = v29 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap(*(llvm::LiveRangeCalc **)v164);
            *(_DWORD *)(*(_QWORD *)v164 + 184) = 0;
            v44 = *(_QWORD *)(v29 + 256);
            v46 = *(_BYTE *)(v44 + 16) == 0;
            v45 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v44 + 24) + 16 * (*((_DWORD *)v30 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                     + 34);
            v46 = v46 || v45 == 0;
            v47 = !v46;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v29 + 304), v30, v47);
            llvm::LiveIntervals::computeDeadValues(v29, (uint64_t)v30, 0);
            v17 = v166;
            v15 = v173;
            v20 = (_QWORD *)(v4 + 144);
            v18 = __p;
          }
          v31 = v24[5];
          v32 = *((_DWORD *)v30 + 2);
          v33 = *(_QWORD **)v30;
          if (!v32)
          {
            v32 = 0;
LABEL_37:
            v37 = &v33[3 * v32];
            goto LABEL_38;
          }
          v34 = v33[3 * v32 - 2];
          v35 = *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24) | (v31 >> 1) & 3;
          v36 = (v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24);
          v37 = *(_QWORD **)v30;
          v38 = *((unsigned int *)v30 + 2);
          if (v35 >= v36)
            goto LABEL_37;
          do
          {
            v39 = v38 >> 1;
            v40 = v37[3 * (v38 >> 1) + 1];
            LODWORD(v40) = (v40 >> 1) & 3 | *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 24);
            v38 -= (v38 >> 1) + 1;
            v41 = v35 >= v40;
            if (v35 >= v40)
              v42 = v39 + 1;
            else
              v42 = 0;
            v37 += 3 * v42;
            if (!v41)
              v38 = v39;
          }
          while (v38);
LABEL_38:
          if (v37 != &v33[3 * v32]
            && ((*v37 >> 1) & 3 | *(_DWORD *)((*v37 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24) | (v31 >> 1) & 3))
          {
            break;
          }
          if (++v5 == v21)
          {
            v5 = a3;
            goto LABEL_68;
          }
        }
        v48 = v28 | (v22 << 32);
        if (v19 >= v17)
        {
          v50 = ((char *)v19 - (char *)v18) >> 3;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61)
LABEL_214:
            abort();
          if (v17 - v18 > v51)
            v51 = v17 - v18;
          if ((unint64_t)((char *)v17 - (char *)v18) >= 0x7FFFFFFFFFFFFFF8)
            v52 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v52 = v51;
          if (v52)
          {
            if (v52 >> 61)
LABEL_215:
              sub_1C4764EE4();
            v53 = v18;
            v54 = (char *)operator new(8 * v52);
            v18 = v53;
            v20 = (_QWORD *)(v4 + 144);
          }
          else
          {
            v54 = 0;
          }
          v55 = &v54[8 * v50];
          *(_QWORD *)v55 = v48;
          v49 = (int *)(v55 + 8);
          while (v19 != v18)
          {
            v56 = *((_QWORD *)v19 - 1);
            v19 -= 2;
            *((_QWORD *)v55 - 1) = v56;
            v55 -= 8;
          }
          v17 = (int *)&v54[8 * v52];
          if (v18)
          {
            v57 = &v54[8 * v52];
            operator delete(v18);
            v17 = (int *)v57;
            v20 = (_QWORD *)(v4 + 144);
          }
          v18 = (int *)v55;
          v5 = a3;
          v15 = v173;
        }
        else
        {
          *(_QWORD *)v19 = v48;
          v49 = v19 + 2;
          v5 = a3;
        }
        *((_DWORD *)v24 + 12) = v28;
        v19 = v49;
LABEL_68:
        if (++v16 == v15)
        {
          v11 = v168;
          v8 = v4 + 160;
          v16 = (unsigned int *)*((_QWORD *)v168 + 1);
          if (v16)
            goto LABEL_70;
          goto LABEL_71;
        }
      }
    }
    v19 = 0;
    v18 = 0;
    if (v16)
    {
LABEL_70:
      *((_QWORD *)v11 + 2) = v16;
      v58 = v16;
      v59 = v18;
      operator delete(v58);
      v18 = v59;
    }
LABEL_71:
    *v11 = -2;
    *(int32x2_t *)(v4 + 168) = vadd_s32(*(int32x2_t *)(v4 + 168), (int32x2_t)0x1FFFFFFFFLL);
    __pa = v18;
    if (v18 != v19)
    {
      v60 = v18;
      do
      {
        v61 = (_QWORD *)sub_1C5101E30(v8, v60);
        v62 = v61;
        v64 = (char *)v61[2];
        v63 = v61[3];
        if ((unint64_t)v64 >= v63)
        {
          v66 = (char *)v61[1];
          v67 = (v64 - v66) >> 2;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 62)
            goto LABEL_214;
          v69 = v63 - (_QWORD)v66;
          if (v69 >> 1 > v68)
            v68 = v69 >> 1;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
            v70 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          if (v70)
          {
            if (v70 >> 62)
              goto LABEL_215;
            v71 = (char *)operator new(4 * v70);
          }
          else
          {
            v71 = 0;
          }
          v72 = &v71[4 * v67];
          *(_DWORD *)v72 = v60[1];
          v65 = v72 + 4;
          while (v64 != v66)
          {
            v73 = *((_DWORD *)v64 - 1);
            v64 -= 4;
            *((_DWORD *)v72 - 1) = v73;
            v72 -= 4;
          }
          v62[1] = v72;
          v62[2] = v65;
          v62[3] = &v71[4 * v70];
          if (v66)
            operator delete(v66);
        }
        else
        {
          *(_DWORD *)v64 = v60[1];
          v65 = v64 + 4;
        }
        v62[2] = v65;
        v60 += 2;
      }
      while (v60 != v19);
    }
    v4 = v163;
    v6 = a2;
    if (__pa)
      operator delete(__pa);
  }
  v155 = v6;
  result = sub_1C51021C0(*(_QWORD *)(v4 + 1088), *(_DWORD *)(v4 + 1104), v6);
  if (result)
  {
    v157 = 0;
    v74 = &v5[a4];
    v169 = v74;
    do
    {
      LODWORD(v75) = *(_DWORD *)(result + 64);
      if ((_DWORD)v75)
      {
        v76 = 0;
        v77 = *(_QWORD *)(v4 + 120);
        v162 = result + 200;
        v156 = v77 + 312;
        v175 = v77;
        v165 = result;
        do
        {
          v75 = (v75 - 1);
          v78 = *(_QWORD *)(result + 56);
          if (!*(_BYTE *)(v78 + 32 * v75) && *(_DWORD *)(v78 + 32 * v75 + 4) == v6)
          {
            v161 = v76;
            v182 = 0x400000000;
            v180 = v162;
            v181 = v183;
            if (a4)
            {
              v167 = 0;
              v79 = a3;
              do
              {
                if ((*v79 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v77 + 416)
                  || (v80 = *(unsigned int **)(*(_QWORD *)(v77 + 408) + 8 * (*v79 & 0x7FFFFFFF))) == 0)
                {
                  v80 = (unsigned int *)sub_1C4851220(v77, *v79);
                  v116 = *(_QWORD *)(v77 + 304);
                  v117 = *(_QWORD *)(v77 + 248);
                  *(_QWORD *)v116 = v117;
                  *(_QWORD *)(v116 + 8) = *(_QWORD *)(v117 + 40);
                  *(_OWORD *)(v116 + 16) = *(_OWORD *)(v77 + 288);
                  *(_QWORD *)(v116 + 32) = v156;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v116);
                  *(_DWORD *)(v116 + 184) = 0;
                  v118 = *(_QWORD *)(v77 + 256);
                  v46 = *(_BYTE *)(v118 + 16) == 0;
                  v119 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v118 + 24) + 16 * (v80[28] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 34);
                  v121 = !v46 && v119 != 0;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v77 + 304), (llvm::LiveInterval *)v80, v121);
                  llvm::LiveIntervals::computeDeadValues(v77, (uint64_t)v80, 0);
                }
                if (v80[2])
                {
                  sub_1C50FEC80(&v180, **(_QWORD **)v80);
                  if ((_DWORD)v182)
                  {
                    if (*((_DWORD *)v181 + 3) < *((_DWORD *)v181 + 2))
                    {
                      v81 = sub_1C50E5A80((uint64_t)v80, *(_QWORD *)v80, *(_QWORD *)(*((_QWORD *)v181 + 2 * v182 - 2)+ 16 * *((unsigned int *)v181 + 4 * v182 - 1)));
                      v82 = v182;
                      if ((_DWORD)v182)
                      {
                        v83 = (uint64_t *)v81;
                        v84 = *(_QWORD *)v80 + 24 * v80[2];
                        v174 = -1;
                        do
                        {
                          if (*((_DWORD *)v181 + 3) >= *((_DWORD *)v181 + 2) || v83 == (uint64_t *)v84)
                            break;
                          v86 = sub_1C50E5A80((uint64_t)v80, (uint64_t)v83, *(_QWORD *)(*((_QWORD *)v181 + 2 * v82 - 2)+ 16 * *((unsigned int *)v181 + 4 * v82 - 1)));
                          if (v86 == v84)
                            break;
                          v87 = (_QWORD *)v86;
                          v88 = *((_QWORD *)v181 + 2 * v182 - 2)
                              + 24 * *((unsigned int *)v181 + 4 * v182 - 1);
                          v89 = *(__int32 **)(v88 + 64);
                          v90 = *(_BYTE *)(v88 + 72) & 0x3F;
                          v91 = wmemchr(v89, v75, v90);
                          if (v91)
                            v92 = v91;
                          else
                            v92 = &v89[v90];
                          v93 = v181;
                          v94 = v182;
                          if (v90 != v92 - v89)
                          {
                            v95 = (char *)v181 + 16 * v182;
                            v96 = *((_QWORD *)v95 - 2);
                            v97 = *((unsigned int *)v95 - 1);
                            v98 = *(_QWORD *)(v96 + 16 * v97 + 8);
                            if (((*v87 >> 1) & 3 | *(_DWORD *)((*v87 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v98 & 0xFFFFFFFFFFFFFFF8) + 24) | (v98 >> 1) & 3))
                            {
                              v99 = v174;
                              if (v174 == -1)
                              {
                                v100 = v80[28];
                                v189 = 0;
                                LODWORD(v188) = 0;
                                HIDWORD(v188) = v100;
                                v190 = 0;
                                v191[0] = 0;
                                LODWORD(v188) = *(_DWORD *)(*(_QWORD *)(v165 + 56) + 32 * v75) & 0xFFF00;
                                v99 = sub_1C50FDFA8(v165, (llvm::MachineOperand *)&v188);
                                v101 = (char *)v181 + 16 * v182;
                                v96 = *((_QWORD *)v101 - 2);
                                v97 = *((unsigned int *)v101 - 1);
                                v98 = *(_QWORD *)(v96 + 16 * v97 + 8);
                                v167 = 1;
                              }
                              v102 = *(_QWORD *)(v96 + 16 * v97);
                              sub_1C50FE758((uint64_t *)&v188, v96 + 24 * v97 + 64);
                              v103 = (v102 >> 1) & 3;
                              if ((*(_DWORD *)((v102 & 0xFFFFFFFFFFFFFFF8) + 24) | v103) < ((*v87 >> 1) & 3 | *(_DWORD *)((*v87 & 0xFFFFFFFFFFFFFFF8) + 24)))
                                *(_QWORD *)(*((_QWORD *)v181 + 2 * v182 - 2)
                                          + 16 * *((unsigned int *)v181 + 4 * v182 - 1)) = *v87;
                              v104 = v87[1];
                              v170 = (v98 >> 1) & 3;
                              if ((*(_DWORD *)((v98 & 0xFFFFFFFFFFFFFFF8) + 24) | v170) > ((v104 >> 1) & 3 | *(_DWORD *)((v104 & 0xFFFFFFFFFFFFFFF8) + 24)))
                                sub_1C51011BC((uint64_t)&v180, v104);
                              v174 = v99;
                              sub_1C5101798(v178, (uint64_t)&v188, v75, v99);
                              sub_1C50FE824((uint64_t)&v180, (uint64_t)v178);
                              v105 = v178[0];
                              v178[0] = 0;
                              if (v105)
                                MEMORY[0x1CAA32F9C](v105, 0x1000C8052888210);
                              v106 = (char *)v181 + 16 * v182;
                              v107 = *((_QWORD *)v106 - 2);
                              v108 = *((unsigned int *)v106 - 1);
                              v109 = *(_QWORD *)(v107 + 16 * v108);
                              if ((*(_DWORD *)((v102 & 0xFFFFFFFFFFFFFFF8) + 24) | v103) < ((v109 >> 1) & 3 | *(_DWORD *)((v109 & 0xFFFFFFFFFFFFFFF8) + 24)))
                              {
                                sub_1C50FE758(v177, (uint64_t)&v188);
                                sub_1C50FE3C4((uint64_t)&v180, v102, v109, (uint64_t)v177);
                                v110 = v177[0];
                                v177[0] = 0;
                                if (v110)
                                  MEMORY[0x1CAA32F9C](v110, 0x1000C8052888210);
                                sub_1C51010D0((uint64_t)&v180);
                                v111 = (char *)v181 + 16 * v182;
                                v107 = *((_QWORD *)v111 - 2);
                                v108 = *((unsigned int *)v111 - 1);
                              }
                              v74 = v169;
                              if ((*(_DWORD *)((v98 & 0xFFFFFFFFFFFFFFF8) + 24) | v170) > ((*(_QWORD *)(v107 + 16 * v108 + 8) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v107 + 16 * v108 + 8) & 0xFFFFFFFFFFFFFFF8) + 24)))
                              {
                                sub_1C51010D0((uint64_t)&v180);
                                v112 = v87[1];
                                sub_1C50FE758(v176, (uint64_t)&v188);
                                sub_1C50FE3C4((uint64_t)&v180, v112, v98, (uint64_t)v176);
                                v113 = v176[0];
                                v176[0] = 0;
                                if (v113)
                                  MEMORY[0x1CAA32F9C](v113, 0x1000C8052888210);
                                sub_1C5100D5C((unsigned int *)&v180);
                              }
                              v114 = v188;
                              v188 = 0;
                              if (v114)
                                MEMORY[0x1CAA32F9C](v114, 0x1000C8052888210);
                              v93 = v181;
                              v94 = v182;
                            }
                          }
                          v77 = v175;
                          v115 = *(_QWORD *)(v93[2 * v94 - 2] + 16 * HIDWORD(v93[2 * v94 - 1]) + 8);
                          if (((v87[1] >> 1) & 3 | *(_DWORD *)((v87[1] & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((v115 & 0xFFFFFFFFFFFFFFF8) + 24) | (v115 >> 1) & 3))
                          {
                            sub_1C51010D0((uint64_t)&v180);
                            if (!(_DWORD)v182 || *((_DWORD *)v181 + 3) >= *((_DWORD *)v181 + 2))
                              break;
                            v83 = (uint64_t *)sub_1C50E5A80((uint64_t)v80, (uint64_t)v87, *(_QWORD *)(*((_QWORD *)v181 + 2 * v182 - 2)+ 16 * *((unsigned int *)v181 + 4 * v182 - 1)));
                          }
                          else
                          {
                            v83 = v87 + 3;
                            if (v83 == (uint64_t *)v84)
                              break;
                            sub_1C51011FC(&v180, *v83);
                          }
                          v82 = v182;
                        }
                        while ((_DWORD)v182);
                      }
                    }
                  }
                }
                ++v79;
              }
              while (v79 != v74);
            }
            else
            {
              v167 = 0;
            }
            sub_1C5100EEC((uint64_t)&v184, v162);
            v188 = v184;
            v189 = v191;
            v190 = 0x400000000;
            if (v186)
              sub_1C50E5C18((uint64_t)&v189, (uint64_t)&v185);
            v6 = a2;
            v4 = v163;
            if (v185 != &v187)
              free(v185);
            while (1)
            {
              if (!(_DWORD)v190 || v189[3] >= v189[2])
              {
                v127 = 1;
                goto LABEL_167;
              }
              v122 = *(_QWORD *)&v189[4 * v190 - 4]
                   + 24 * v189[4 * v190 - 1];
              v123 = *(__int32 **)(v122 + 64);
              v124 = *(_BYTE *)(v122 + 72) & 0x3F;
              v125 = wmemchr(v123, v75, v124);
              v126 = v125 ? v125 : &v123[v124];
              if (v124 != v126 - v123)
                break;
              sub_1C51010D0((uint64_t)&v188);
            }
            v127 = 0;
LABEL_167:
            if (v189 != (_DWORD *)v191)
              free(v189);
            if (v127)
            {
              v128 = v165;
              v129 = *(_QWORD *)(v165 + 56);
              v130 = v129 + 32 * v75;
              v131 = *(unsigned int *)(v165 + 64);
              v132 = v129 + 32 * v131;
              if (v132 != v130 + 32)
              {
                memmove((void *)v130, (const void *)(v130 + 32), v132 - (v130 + 32));
                v128 = v165;
                LODWORD(v131) = *(_DWORD *)(v165 + 64);
              }
              *(_DWORD *)(v128 + 64) = v131 - 1;
              sub_1C5100EEC((uint64_t)&v188, v162);
              while ((_DWORD)v190 && v189[3] < v189[2])
              {
                v133 = (char *)&v189[4 * v190];
                v134 = *((_QWORD *)v133 - 2);
                v135 = *((_DWORD *)v133 - 1);
                v136 = v134 + 24 * v135;
                v139 = *(_DWORD **)(v136 + 64);
                v138 = v136 + 64;
                v137 = v139;
                v140 = (unsigned __int8 *)(v138 + 8);
                if ((*(_BYTE *)(v138 + 8) & 0x3F) != 0)
                {
                  v141 = 4 * (*(_BYTE *)(v138 + 8) & 0x3F);
                  while (*v137 <= v75)
                  {
                    ++v137;
                    v141 -= 4;
                    if (!v141)
                      goto LABEL_197;
                  }
                  v184 = &v186;
                  v185 = (void *)0x400000000;
                  v142 = *v140;
                  v143 = 0;
                  if ((v142 & 0x3F) != 0)
                  {
                    v144 = *(unsigned int **)v138;
                    v145 = 4 * (v142 & 0x3F);
                    do
                    {
                      v146 = *v144;
                      v148 = *v144 != -1 && v146 > v75;
                      if (v143 >= HIDWORD(v185))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v184, (uint64_t)&v186, v143 + 1, 4);
                        v143 = v185;
                      }
                      *((_DWORD *)v184 + v143) = v146 - v148;
                      v143 = (_DWORD)v185 + 1;
                      LODWORD(v185) = (_DWORD)v185 + 1;
                      ++v144;
                      v145 -= 4;
                    }
                    while (v145);
                    v149 = (__int32 *)v184;
                    v142 = *v140;
                    v74 = v169;
                    v77 = v175;
                  }
                  else
                  {
                    v149 = &v186;
                  }
                  sub_1C50FE0F0(v179, v149, v143, (v142 >> 6) & 1, v142 >> 7, *(_QWORD *)(v134 + 24 * v135 + 80));
                  if (v184 != &v186)
                    free(v184);
                  sub_1C510002C(*(_QWORD *)&v189[4 * v190 - 4]+ 24 * v189[4 * v190 - 1]+ 64, (uint64_t)v179);
                  v150 = v179[0];
                  v179[0] = 0;
                  if (v150)
                    MEMORY[0x1CAA32F9C](v150, 0x1000C8052888210);
                }
LABEL_197:
                sub_1C51010D0((uint64_t)&v188);
              }
              if (v189 != (_DWORD *)v191)
                free(v189);
            }
            if (v181 != v183)
              free(v181);
            v76 = v161 | v167;
            result = v165;
          }
        }
        while ((_DWORD)v75);
      }
      else
      {
        LOBYTE(v76) = 0;
      }
      v157 |= v76;
      result = *(_QWORD *)(result + 48);
    }
    while (result);
    v151 = a3;
    if ((v157 & 1) != 0)
    {
      result = sub_1C51021C0(*(_QWORD *)(v4 + 1088), *(_DWORD *)(v4 + 1104), v155);
      if (a4)
      {
        v152 = result;
        v153 = 4 * a4;
        do
        {
          v154 = *v151++;
          result = (uint64_t)sub_1C5101AB4((_DWORD *)v4, v154, v152);
          v153 -= 4;
        }
        while (v153);
      }
    }
  }
  return result;
}

uint64_t sub_1C50FAA64(uint64_t result, _QWORD *a2)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  llvm::MachineOperand *v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  _OWORD *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  _DWORD *v49;
  unsigned int v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int32 *v59;
  uint64_t v60;
  llvm::MachineOperand *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int v75;
  _BYTE *v76;
  __int32 *v77;
  __int32 *v78;
  __int32 *v79;
  _DWORD *v80;
  unsigned int v81;
  uint64_t v82;
  int *v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int *v88;
  int v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  void *v106;
  void *v107;
  uint64_t v108;
  llvm::MachineOperand *v109;
  uint64_t v110;
  uint64_t **v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t v114;
  llvm::MachineBasicBlock *v115;
  _QWORD *v116;
  uint64_t v117;
  llvm::MachineFunction *v118;
  llvm::MachineOperand *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unsigned int v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int16 v148;
  unsigned __int16 *v149;
  unsigned __int16 *v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  uint64_t v156;
  llvm::MachineFunction *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  BOOL v164;
  unint64_t *v165;
  uint64_t v166;
  llvm::MachineFunction *v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  int v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  int v194;
  uint64_t v195;
  uint64_t *v196;
  _QWORD *v197;
  uint64_t *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v225;
  unint64_t v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *FirstTerminator;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  _QWORD *v311;
  uint64_t v312;
  unsigned int v313;
  int v314;
  int v315;
  _DWORD *v316;
  uint64_t v317;
  _DWORD *v318;
  uint64_t v319;
  int v320;
  unint64_t v321;
  unint64_t v322;
  _DWORD *v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  _QWORD *v327;
  uint64_t v328;
  unint64_t v329;
  unint64_t v330;
  size_t v331;
  _QWORD *v332;
  uint64_t *v333;
  unsigned int v334;
  uint64_t *v335;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  unint64_t v344;
  _DWORD *v345;
  uint64_t v346;
  unsigned int v347;
  _QWORD *v348;
  uint64_t v349;
  unsigned int v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  unsigned int v355;
  void *v356;
  uint64_t v357;
  _BYTE v358[16];
  llvm::MachineOperand *v359;
  uint64_t v360;
  int v361;
  char *v362;
  char *v363;
  char *v364;
  llvm::MachineOperand *v365;
  __int128 v366;
  _BYTE v367[64];
  __int128 v368;
  __int128 v369;
  int v370;
  uint64_t v371;

  v371 = *MEMORY[0x1E0C80C00];
  i = *(_QWORD *)(result + 248);
  if (i)
  {
    v3 = *(_QWORD *)(i + 112);
    if (v3)
    {
      v348 = 0;
      v349 = 0;
      v350 = 0;
      v343 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 104))(*(_QWORD *)(v3 + 16));
      v345 = 0;
      v346 = 0;
      v347 = 0;
      v4 = *(unsigned int *)(i + 984);
      v337 = i;
      if (!(_DWORD)v4)
        goto LABEL_166;
      v5 = *(uint64_t **)(i + 976);
      v333 = &v5[v4];
      do
      {
        v335 = v5;
        v6 = *v5;
        v338 = *(_QWORD *)(i + 112);
        v340 = *(_QWORD *)(i + 128);
        v359 = 0;
        v360 = 0;
        v361 = 0;
        v363 = 0;
        v364 = 0;
        v362 = 0;
        v7 = *(unsigned int *)(v6 + 64);
        v356 = v358;
        v357 = 0x400000000;
        sub_1C4893E04((char *)&v356, v7, 0);
        v8 = *(unsigned int *)(v6 + 64);
        if ((_DWORD)v8)
        {
          v9 = 0;
          v10 = 0;
          v11 = 0;
          while (1)
          {
            v355 = 0;
            v12 = (__int128 *)(*(_QWORD *)(v6 + 56) + 32 * v11);
            v13 = v12[1];
            v353 = *v12;
            v354 = v13;
            if ((_BYTE)v353 || (DWORD1(v353) & 0x80000000) == 0)
              goto LABEL_9;
            v33 = DWORD1(v353) & 0x7FFFFFFF;
            if (*(_DWORD *)(a2[38] + 4 * v33) == 0x3FFFFFFF)
            {
              v34 = *(unsigned int *)(a2[35] + 4 * v33);
              if ((unint64_t)(v34 - 1) <= 0x3FFFFFFE)
                goto LABEL_44;
              llvm::MachineOperand::setReg((uint64_t)&v353, 0);
              v14 = 0;
              LODWORD(v353) = v353 & 0xFFF000FF;
            }
            else
            {
              if (*(_DWORD *)(a2[41] + 4 * v33))
              {
                v34 = *(unsigned int *)(a2[35] + 4 * v33);
                if ((unint64_t)(v34 - 1) < 0x3FFFFFFF)
                {
LABEL_44:
                  llvm::MachineOperand::substPhysReg((unsigned int *)&v353, v34, v340);
LABEL_9:
                  v14 = 0;
                  goto LABEL_10;
                }
              }
              LODWORD(v368) = 0;
              (*(void (**)(_QWORD *, unint64_t, _QWORD, __int128 *, unsigned int *))(*v343 + 136))(v343, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v338 + 40) + 24) + 16 * v33) & 0xFFFFFFFFFFFFFFF8, (v353 >> 8) & 0xFFF, &v368, &v355);
              v35 = *(_DWORD *)(a2[38] + 4 * v33);
              v334 = v334 & 0xFFF00000 | 5;
              LODWORD(v353) = v334;
              *((_QWORD *)&v353 + 1) = 0;
              LODWORD(v354) = v35;
              v14 = 1;
            }
LABEL_10:
            v351 = v353;
            v352 = v354;
            v15 = v355;
            v368 = v353;
            v369 = v354;
            v370 = 0;
            v365 = 0;
            v16 = v361;
            v17 = sub_1C51023F0((uint64_t)v359, (const llvm::MachineOperand *)v361, (llvm *)&v368, (int **)&v365);
            v18 = v365;
            if ((v17 & 1) == 0)
            {
              if (4 * (int)v360 + 4 >= 3 * v16)
              {
                v19 = 2 * v16;
LABEL_15:
                sub_1C5102548((uint64_t)&v359, v19);
                v365 = 0;
                sub_1C51023F0((uint64_t)v359, (const llvm::MachineOperand *)v361, (llvm *)&v368, (int **)&v365);
                v18 = v365;
              }
              else if (v16 + ~(_DWORD)v360 - HIDWORD(v360) <= v16 >> 3)
              {
                v19 = v16;
                goto LABEL_15;
              }
              LODWORD(v360) = v360 + 1;
              LODWORD(v365) = 20;
              *(_QWORD *)&v366 = 0;
              if ((*(_DWORD *)v18 & 0xFE) == 0x14)
              {
                if (*(_DWORD *)v18 == 20)
                {
LABEL_18:
                  v20 = v14 | (v15 << 32);
                  v21 = v369;
                  *(_OWORD *)v18 = v368;
                  *((_OWORD *)v18 + 1) = v21;
                  *((_DWORD *)v18 + 8) = v370;
                  v22 = v363;
                  if (v363 < v364)
                  {
                    *(_OWORD *)v363 = v351;
                    v22[1] = v352;
                    *((_QWORD *)v22 + 4) = v20;
                    v9 = (char *)v22 + 40;
                    v10 = v362;
                  }
                  else
                  {
                    v23 = v362;
                    v24 = 0xCCCCCCCCCCCCCCCDLL * ((v363 - v362) >> 3);
                    v25 = v24 + 1;
                    if (v24 + 1 > 0x666666666666666)
                      abort();
                    if (0x999999999999999ALL * ((v364 - v362) >> 3) > v25)
                      v25 = 0x999999999999999ALL * ((v364 - v362) >> 3);
                    if (0xCCCCCCCCCCCCCCCDLL * ((v364 - v362) >> 3) >= 0x333333333333333)
                      v26 = 0x666666666666666;
                    else
                      v26 = v25;
                    if (v26)
                    {
                      if (v26 > 0x666666666666666)
                        sub_1C4764EE4();
                      v27 = (char *)operator new(40 * v26);
                    }
                    else
                    {
                      v27 = 0;
                    }
                    v28 = v352;
                    v29 = &v27[40 * v24];
                    *(_OWORD *)v29 = v351;
                    *((_OWORD *)v29 + 1) = v28;
                    *((_QWORD *)v29 + 4) = v20;
                    v10 = v29;
                    if (v22 != (_OWORD *)v23)
                    {
                      do
                      {
                        v30 = *(_OWORD *)((char *)v22 - 40);
                        v31 = *(_OWORD *)((char *)v22 - 24);
                        *((_QWORD *)v10 - 1) = *((_QWORD *)v22 - 1);
                        *(_OWORD *)(v10 - 24) = v31;
                        *(_OWORD *)(v10 - 40) = v30;
                        v10 -= 40;
                        v22 = (_OWORD *)((char *)v22 - 40);
                      }
                      while (v22 != (_OWORD *)v23);
                      v22 = v362;
                    }
                    v9 = v29 + 40;
                    v362 = v10;
                    v364 = &v27[40 * v26];
                    if (v22)
                      operator delete(v22);
                  }
                  v363 = v9;
                  *((_DWORD *)v18 + 8) = -858993459 * ((unint64_t)(v9 - v10) >> 3) - 1;
                  v32 = v9 - 40;
                  goto LABEL_36;
                }
              }
              else if ((llvm::MachineOperand::isIdenticalTo(v18, (const llvm::MachineOperand *)&v365) & 1) != 0)
              {
                goto LABEL_18;
              }
              --HIDWORD(v360);
              goto LABEL_18;
            }
            v32 = &v10[40 * *((unsigned int *)v365 + 8)];
LABEL_36:
            *((_DWORD *)v356 + v11++) = -858993459 * ((unint64_t)(v32 - v10) >> 3);
            if (v11 == v8)
              goto LABEL_49;
          }
        }
        v9 = 0;
        v10 = 0;
LABEL_49:
        *(_DWORD *)(v6 + 64) = 0;
        if (v346)
        {
          if (v347 <= 4 * (int)v346 || v347 < 0x41)
          {
            if (v347)
            {
              v36 = v345;
              v37 = 8 * v347;
              do
              {
                *v36 = -1;
                v36 += 2;
                v37 -= 8;
              }
              while (v37);
            }
            v346 = 0;
          }
          else
          {
            sub_1C476BF54(&v345);
          }
        }
        if (v10 != v9)
        {
          v38 = 0;
          do
          {
            v39 = v10[v38 + 32];
            v40 = *(_DWORD *)&v10[v38 + 36];
            v41 = (_OWORD *)sub_1C47C0F60(v6 + 56, (unint64_t)&v10[v38], 1);
            v42 = (_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * *(unsigned int *)(v6 + 64));
            v43 = v41[1];
            *v42 = *v41;
            v42[1] = v43;
            ++*(_DWORD *)(v6 + 64);
            if (v39)
            {
              LODWORD(v368) = -858993459 * (v38 >> 3);
              sub_1C476BFEC((uint64_t)&v345, &v368)[1] = v40;
            }
            v38 += 40;
          }
          while (&v10[v38] != v9);
        }
        sub_1C5100EEC((uint64_t)&v368, v6 + 200);
        v44 = v369;
        for (i = v337; (_DWORD)v369; v44 = v369)
        {
          if (*(_DWORD *)(*((_QWORD *)&v368 + 1) + 12) >= *(_DWORD *)(*((_QWORD *)&v368 + 1) + 8))
            break;
          v45 = *((_QWORD *)&v368 + 1) + 16 * v44;
          v46 = *(_QWORD *)(v45 - 16);
          v47 = *(_DWORD *)(v45 - 4);
          v48 = v46 + 24 * v47;
          v49 = v356;
          v365 = (llvm::MachineOperand *)((char *)&v366 + 8);
          *(_QWORD *)&v366 = 0xC00000000;
          v52 = *(unsigned __int8 *)(v48 + 72);
          v51 = (unsigned __int8 *)(v48 + 72);
          v50 = v52;
          v53 = 0;
          v54 = v52 & 0x3F;
          if ((v52 & 0x3F) != 0)
          {
            v55 = (unsigned int *)*((_QWORD *)v51 - 1);
            v56 = 4 * v54;
            do
            {
              v57 = *v55;
              if ((_DWORD)v57 == -1)
                v58 = -1;
              else
                v58 = v49[v57];
              if (v53 >= DWORD1(v366))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v365, (uint64_t)&v366 + 8, v53 + 1, 4);
                v53 = v366;
              }
              *((_DWORD *)v365 + v53) = v58;
              v53 = v366 + 1;
              LODWORD(v366) = v366 + 1;
              ++v55;
              v56 -= 4;
            }
            while (v56);
            v59 = (__int32 *)v365;
            v50 = *v51;
          }
          else
          {
            v59 = (__int32 *)&v366 + 2;
          }
          sub_1C50FE0F0((uint64_t *)&v353, v59, v53, (v50 >> 6) & 1, v50 >> 7, *(_QWORD *)(v46 + 24 * v47 + 80));
          if (v365 != (llvm::MachineOperand *)((char *)&v366 + 8))
            free(v365);
          sub_1C510002C(*(_QWORD *)(*((_QWORD *)&v368 + 1) + 16 * v369 - 16)+ 24 * *(unsigned int *)(*((_QWORD *)&v368 + 1) + 16 * v369 - 4)+ 64, (uint64_t)&v353);
          v60 = v353;
          *(_QWORD *)&v353 = 0;
          if (v60)
            MEMORY[0x1CAA32F9C](v60, 0x1000C8052888210);
          sub_1C51010D0((uint64_t)&v368);
        }
        if (*((__int128 **)&v368 + 1) != (__int128 *)((char *)&v369 + 8))
          free(*((void **)&v368 + 1));
        if (v356 != v358)
          free(v356);
        if (v10)
        {
          v363 = v10;
          operator delete(v10);
        }
        v61 = v359;
        if (v361)
        {
          LODWORD(v368) = 20;
          *((_QWORD *)&v368 + 1) = 0;
          LODWORD(v365) = 21;
          *(_QWORD *)&v366 = 0;
          v108 = 40 * v361;
          v109 = v359;
          do
          {
            if ((*(_DWORD *)v109 & 0xFE) != 0x14
              && (llvm::MachineOperand::isIdenticalTo(v109, (const llvm::MachineOperand *)&v368) & 1) == 0
              && (*(_DWORD *)v109 & 0xFE) != 0x14)
            {
              llvm::MachineOperand::isIdenticalTo(v109, (const llvm::MachineOperand *)&v365);
            }
            v109 = (llvm::MachineOperand *)((char *)v109 + 40);
            v108 -= 40;
          }
          while (v108);
        }
        MEMORY[0x1CAA32FB4](v61, 8);
        v62 = *v335;
        v63 = *(_QWORD *)(v337 + 120);
        v341 = *(_QWORD *)(v337 + 128);
        v64 = a2[34];
        sub_1C5100EEC((uint64_t)&v365, *v335 + 200);
        *(_QWORD *)&v368 = v365;
        *((_QWORD *)&v368 + 1) = (char *)&v369 + 8;
        *(_QWORD *)&v369 = 0x400000000;
        if (DWORD2(v366))
          sub_1C50E5C18((uint64_t)&v368 + 8, (uint64_t)&v366);
        if ((_BYTE *)v366 != v367)
          free((void *)v366);
        v65 = v369;
        if (!(_DWORD)v369)
          goto LABEL_155;
        v339 = v64 + 320;
        while (1)
        {
          if (*(_DWORD *)(*((_QWORD *)&v368 + 1) + 12) >= *(_DWORD *)(*((_QWORD *)&v368 + 1) + 8))
            goto LABEL_155;
          v66 = *((_QWORD *)&v368 + 1) + 16 * v65;
          v67 = *(_QWORD *)(v66 - 16);
          v68 = *(unsigned int *)(v66 - 4);
          v69 = (unint64_t *)(v67 + 16 * v68);
          v71 = *v69;
          v70 = v69[1];
          sub_1C50FE758((uint64_t *)&v356, v67 + 24 * v68 + 64);
          v365 = (llvm::MachineOperand *)v367;
          v366 = xmmword_1C64638D0;
          v359 = (llvm::MachineOperand *)&v361;
          v360 = 0xC00000000;
          if ((v357 & 0x3F) != 0)
          {
            v72 = (char *)v356;
            v73 = (char *)v356 + 4 * (v357 & 0x3F);
            do
            {
              v74 = v357 & 0x3F;
              if ((v357 & 0x3F) != 0
                && ((v75 = *(_DWORD *)v72,
                     v76 = v356,
                     v77 = (__int32 *)((char *)v356 + 4 * v74),
                     (v78 = wmemchr((__int32 *)v356, -1, v357 & 0x3F)) != 0)
                  ? (v79 = v78)
                  : (v79 = v77),
                    v74 == ((char *)v79 - v76) >> 2))
              {
                v80 = v345;
                v81 = v347;
                if (!v347)
                  goto LABEL_116;
                LODWORD(v82) = (v347 - 1) & (37 * v75);
                v83 = &v345[2 * v82];
                v84 = *v83;
                if (v75 != *v83)
                {
                  v85 = 1;
                  while (v84 != -1)
                  {
                    v86 = v82 + v85++;
                    v82 = v86 & (v347 - 1);
                    v84 = v345[2 * v82];
                    if (v75 == v84)
                    {
                      v83 = &v345[2 * v82];
                      goto LABEL_107;
                    }
                  }
LABEL_116:
                  v83 = &v345[2 * v347];
                }
              }
              else
              {
                v80 = v345;
                v81 = v347;
                v83 = &v345[2 * v347];
              }
LABEL_107:
              v87 = v366;
              if ((unint64_t)(v366 + 1) > *((_QWORD *)&v366 + 1))
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v365, v367, v366 + 1, 1);
                v87 = v366;
              }
              v88 = &v80[2 * v81];
              *((_BYTE *)v365 + v87) = v83 != v88;
              *(_QWORD *)&v366 = v366 + 1;
              if (v83 == v88)
                v89 = 0;
              else
                v89 = v83[1];
              v90 = v360;
              if (v360 >= (unint64_t)HIDWORD(v360))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v359, (uint64_t)&v361, v360 + 1, 4);
                v90 = v360;
              }
              *((_DWORD *)v359 + v90) = v89;
              LODWORD(v360) = v360 + 1;
              v72 += 4;
            }
            while (v72 != v73);
          }
          if (*(_QWORD *)(v62 + 424))
          {
            v91 = *(_QWORD **)(v62 + 416);
            if (v91)
            {
              v92 = (_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF8);
              v93 = *(_DWORD *)((v71 & 0xFFFFFFFFFFFFFFF8) + 24) | (v71 >> 1) & 3;
              do
              {
                v94 = (v91[4] >> 1) & 3 | *(_DWORD *)((v91[4] & 0xFFFFFFFFFFFFFFF8) + 24);
                if (v93 >= v94)
                {
                  if (v94 >= v93)
                    goto LABEL_132;
                  ++v91;
                }
                v91 = (_QWORD *)*v91;
              }
              while (v91);
            }
          }
          else
          {
            v95 = *(unsigned int *)(v62 + 384);
            if ((_DWORD)v95)
            {
              v96 = *(_QWORD **)(v62 + 376);
              v97 = 8 * v95;
              while (*v96 != v71)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                  goto LABEL_133;
              }
              if (v97)
              {
                v92 = (_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF8);
LABEL_132:
                v71 = *v92 & 0xFFFFFFFFFFFFFFF9 | (2 * ((v71 >> 1) & 3));
              }
            }
          }
LABEL_133:
          v98 = sub_1C499C548(*(_QWORD *)(v63 + 288), v71);
          v99 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 288) + 392) + 16 * *(unsigned int *)(v98 + 24) + 8);
          sub_1C50FE758((uint64_t *)&v353, (uint64_t)&v356);
          sub_1C5102738(v62, (llvm::MachineBasicBlock *)v98, v71, v70, (uint64_t)&v353, (uint64_t)v365, v366, v100, (uint64_t)v359, v360, v63, (uint64_t)v343, v341, (uint64_t)&v348);
          v101 = v353;
          *(_QWORD *)&v353 = 0;
          if (v101)
            MEMORY[0x1CAA32F9C](v101, 0x1000C8052888210);
          v102 = (v70 >> 1) & 3;
          i = v337;
          if ((*(_DWORD *)((v70 & 0xFFFFFFFFFFFFFFF8) + 24) | v102) > (*(_DWORD *)((v99 & 0xFFFFFFFFFFFFFFF8) + 24) | (v99 >> 1) & 3))
            break;
LABEL_140:
          if (v98 == v339)
            goto LABEL_149;
          sub_1C51010D0((uint64_t)&v368);
          if (v359 != (llvm::MachineOperand *)&v361)
            free(v359);
          if (v365 != (llvm::MachineOperand *)v367)
            free(v365);
          v106 = v356;
          v356 = 0;
          if (v106)
            MEMORY[0x1CAA32F9C](v106, 0x1000C8052888210);
          v65 = v369;
          if (!(_DWORD)v369)
            goto LABEL_155;
        }
        while (1)
        {
          v98 = *(_QWORD *)(v98 + 8);
          if (v98 == v339)
            break;
          v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 288) + 392) + 16 * *(unsigned int *)(v98 + 24) + 8);
          sub_1C50FE758((uint64_t *)&v351, (uint64_t)&v356);
          sub_1C5102738(v62, (llvm::MachineBasicBlock *)v98, v99, v70, (uint64_t)&v351, (uint64_t)v365, v366, v104, (uint64_t)v359, v360, v63, (uint64_t)v343, v341, (uint64_t)&v348);
          v105 = v351;
          *(_QWORD *)&v351 = 0;
          if (v105)
            MEMORY[0x1CAA32F9C](v105, 0x1000C8052888210);
          v99 = v103;
          if ((*(_DWORD *)((v70 & 0xFFFFFFFFFFFFFFF8) + 24) | v102) <= (*(_DWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 24) | (v103 >> 1) & 3))
            goto LABEL_140;
        }
LABEL_149:
        if (v359 != (llvm::MachineOperand *)&v361)
          free(v359);
        if (v365 != (llvm::MachineOperand *)v367)
          free(v365);
        v107 = v356;
        v356 = 0;
        if (v107)
          MEMORY[0x1CAA32F9C](v107, 0x1000C8052888210);
LABEL_155:
        if (*((__int128 **)&v368 + 1) != (__int128 *)((char *)&v369 + 8))
          free(*((void **)&v368 + 1));
        v5 = v335 + 1;
      }
      while (v335 + 1 != v333);
LABEL_166:
      v110 = *(unsigned int *)(i + 1064);
      if ((_DWORD)v110)
      {
        v111 = *(uint64_t ***)(i + 1056);
        v112 = &v111[v110];
        do
        {
          v113 = *v111;
          v114 = *(_QWORD *)(i + 120);
          v115 = (llvm::MachineBasicBlock *)sub_1C499C548(*(_QWORD *)(v114 + 288), (*v111)[2]);
          v116 = (_QWORD *)sub_1C5102240(v115, v113[2], *(_QWORD *)(*(_QWORD *)(v114 + 288) + 392), (uint64_t)&v348);
          v117 = v343[1];
          v118 = (llvm::MachineFunction *)*((_QWORD *)v115 + 4);
          v119 = (llvm::MachineOperand *)v113[1];
          v365 = v119;
          if (v119)
            llvm::MetadataTracking::track((uint64_t)&v365, (unsigned __int8 *)v119, 2);
          v120 = *((_QWORD *)v118 + 28);
          if (v120)
            *((_QWORD *)v118 + 28) = *(_QWORD *)v120;
          else
            v120 = sub_1C484358C((uint64_t)v118 + 128, 72, 3);
          *(_QWORD *)&v368 = v365;
          if (v365)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v368);
            v365 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v120, v118, v117 + 816, (unsigned __int8 **)&v368, 0);
          if ((_QWORD)v368)
            llvm::MetadataTracking::untrack((uint64_t)&v368, (unsigned __int8 *)v368);
          i = v337;
          if (v365)
            llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
          v121 = *((_QWORD *)v115 + 5);
          *(_QWORD *)(v120 + 24) = v121;
          v122 = *(_QWORD *)(v121 + 32);
          v123 = *(unsigned int *)(v120 + 40);
          if ((_DWORD)v123)
          {
            v127 = *(_QWORD *)(v120 + 32);
            v128 = *(_QWORD *)(v122 + 40);
            v129 = 32 * v123;
            do
            {
              if (!*(_BYTE *)v127)
              {
                v130 = *(unsigned int *)(v127 + 4);
                if ((int)v130 >= 0)
                  v131 = (uint64_t *)(*(_QWORD *)(v128 + 272) + 8 * v130);
                else
                  v131 = (uint64_t *)(*(_QWORD *)(v128 + 24) + 16 * (v130 & 0x7FFFFFFF) + 8);
                v132 = *v131;
                if (*v131)
                {
                  v133 = *(_QWORD *)(v132 + 16);
                  *(_QWORD *)(v132 + 16) = v127;
                  *(_QWORD *)(v127 + 16) = v133;
                  if ((*(_BYTE *)(v127 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v127 + 24) = v132;
                  }
                  else
                  {
                    *(_QWORD *)(v127 + 24) = 0;
                    v131 = (uint64_t *)(v133 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v127 + 16) = v127;
                  *(_QWORD *)(v127 + 24) = 0;
                }
                *v131 = v127;
              }
              v127 += 32;
              v129 -= 32;
            }
            while (v129);
          }
          v124 = *(_QWORD *)(v122 + 728);
          if (v124)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v124 + 24))(v124, v120);
          v125 = *v116 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v120 = v125 | *(_QWORD *)v120 & 7;
          *(_QWORD *)(v120 + 8) = v116;
          *(_QWORD *)(v125 + 8) = v120;
          *v116 = *v116 & 7 | v120;
          v126 = *v113;
          LODWORD(v368) = 14;
          *((_QWORD *)&v368 + 1) = 0;
          *(_QWORD *)&v369 = v126;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v120, v118, (const llvm::MachineOperand *)&v368);
          ++v111;
        }
        while (v111 != v112);
      }
      v342 = *(_QWORD *)(*(_QWORD *)(i + 120) + 288);
      v134 = i;
      v135 = *(_QWORD **)(i + 136);
      v136 = (_QWORD *)(v134 + 144);
      if (v135 != (_QWORD *)(v134 + 144))
      {
        do
        {
          v137 = *((unsigned int *)v135 + 8);
          v138 = *((_DWORD *)v135 + 12);
          v139 = *((unsigned int *)v135 + 13);
          v140 = sub_1C499C548(v342, v135[5]);
          v141 = (_QWORD *)v140;
          v142 = v138 & 0x7FFFFFFF;
          if (*(_DWORD *)(a2[38] + 4 * v142) == 0x3FFFFFFF)
          {
            v143 = *(_DWORD *)(a2[35] + 4 * v142);
            if (v143 - 1 <= 0x3FFFFFFE)
              goto LABEL_203;
          }
          else
          {
            if (*(_DWORD *)(a2[41] + 4 * v142))
            {
              v143 = *(_DWORD *)(a2[35] + 4 * v142);
              if (v143 - 1 < 0x3FFFFFFF)
              {
LABEL_203:
                if ((_DWORD)v139)
                {
                  v144 = *(_QWORD **)(v337 + 128);
                  v145 = v144[1];
                  v146 = v144[7];
                  v147 = *(unsigned int *)(v145 + 24 * v143 + 4);
                  if (*(_WORD *)(v146 + 2 * v147))
                  {
                    v148 = *(_WORD *)(v146 + 2 * v147) + v143;
                    v149 = (unsigned __int16 *)(v144[11] + 2 * *(unsigned int *)(v145 + 24 * v143 + 12));
                    v150 = (unsigned __int16 *)(v146 + 2 * v147 + 2);
                    while ((_DWORD)v139 != *v149)
                    {
                      v143 = 0;
                      v151 = *v150++;
                      v148 += v151;
                      ++v149;
                      if (!v151)
                        goto LABEL_212;
                    }
                    v143 = v148;
                  }
                  else
                  {
                    v143 = 0;
                  }
                }
LABEL_212:
                v155 = *(unint64_t **)(v140 + 56);
                v359 = 0;
                v156 = v343[1];
                v157 = *(llvm::MachineFunction **)(v140 + 32);
                v365 = 0;
                v158 = *((_QWORD *)v157 + 28);
                if (v158)
                {
                  *((_QWORD *)v157 + 28) = *(_QWORD *)v158;
                  *(_QWORD *)&v368 = 0;
                }
                else
                {
                  v158 = sub_1C484358C((uint64_t)v157 + 128, 72, 3);
                  *(_QWORD *)&v368 = v365;
                  if (v365)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v368);
                    v365 = 0;
                  }
                }
                llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v158, v157, v156 + 768, (unsigned __int8 **)&v368, 0);
                if ((_QWORD)v368)
                  llvm::MetadataTracking::untrack((uint64_t)&v368, (unsigned __int8 *)v368);
                if (v365)
                  llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
                v159 = v141[5];
                *(_QWORD *)(v158 + 24) = v159;
                v160 = *(_QWORD *)(v159 + 32);
                v161 = *(unsigned int *)(v158 + 40);
                if ((_DWORD)v161)
                {
                  v177 = *(_QWORD *)(v158 + 32);
                  v178 = *(_QWORD *)(v160 + 40);
                  v179 = 32 * v161;
                  do
                  {
                    if (!*(_BYTE *)v177)
                    {
                      v180 = *(unsigned int *)(v177 + 4);
                      if ((int)v180 >= 0)
                        v181 = (uint64_t *)(*(_QWORD *)(v178 + 272) + 8 * v180);
                      else
                        v181 = (uint64_t *)(*(_QWORD *)(v178 + 24) + 16 * (v180 & 0x7FFFFFFF) + 8);
                      v182 = *v181;
                      if (*v181)
                      {
                        v183 = *(_QWORD *)(v182 + 16);
                        *(_QWORD *)(v182 + 16) = v177;
                        *(_QWORD *)(v177 + 16) = v183;
                        if ((*(_BYTE *)(v177 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v177 + 24) = v182;
                        }
                        else
                        {
                          *(_QWORD *)(v177 + 24) = 0;
                          v181 = (uint64_t *)(v183 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v177 + 16) = v177;
                        *(_QWORD *)(v177 + 24) = 0;
                      }
                      *v181 = v177;
                    }
                    v177 += 32;
                    v179 -= 32;
                  }
                  while (v179);
                }
                v162 = *(_QWORD *)(v160 + 728);
                if (v162)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v162 + 24))(v162, v158);
                v163 = *v155 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v158 = v163 | *(_QWORD *)v158 & 7;
                *(_QWORD *)(v158 + 8) = v155;
                *(_QWORD *)(v163 + 8) = v158;
                *v155 = *v155 & 7 | v158;
                if (v359)
                  llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
                *((_QWORD *)&v368 + 1) = 0;
                LODWORD(v368) = 0;
                DWORD1(v368) = v143;
                v369 = 0uLL;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v158, v157, (const llvm::MachineOperand *)&v368);
                LODWORD(v368) = 1;
                *((_QWORD *)&v368 + 1) = 0;
                *(_QWORD *)&v369 = v137;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v158, v157, (const llvm::MachineOperand *)&v368);
                goto LABEL_246;
              }
            }
            v152 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v337 + 112) + 40) + 24) + 16 * v142) & 0xFFFFFFFFFFFFFFF8;
            LODWORD(v356) = 0;
            LODWORD(v353) = 0;
            v153 = *(_QWORD *)(v337 + 128);
            if ((_DWORD)v139)
              v154 = *(unsigned __int16 *)(*(_QWORD *)(v153 + 96) + 4 * v139 + 2);
            else
              v154 = *(unsigned int *)(*(_QWORD *)(v153 + 264)
                                     + 24
                                     * (*(unsigned __int16 *)(*(_QWORD *)v152 + 24)
                                      + *(_DWORD *)(v153 + 272)
                                      * ((*(_QWORD *)(v153 + 248) - *(_QWORD *)(v153 + 240)) >> 3)));
            if ((*(unsigned int (**)(_QWORD *, unint64_t, uint64_t, void **, __int128 *))(*v343 + 136))(v343, v152, v139, &v356, &v353))
            {
              v164 = (_DWORD)v353 == 0;
            }
            else
            {
              v164 = 0;
            }
            if (v164)
            {
              v165 = (unint64_t *)v141[7];
              v359 = 0;
              v166 = v343[1];
              v167 = (llvm::MachineFunction *)v141[4];
              v365 = 0;
              v168 = *((_QWORD *)v167 + 28);
              if (v168)
              {
                *((_QWORD *)v167 + 28) = *(_QWORD *)v168;
                *(_QWORD *)&v368 = 0;
              }
              else
              {
                v168 = sub_1C484358C((uint64_t)v167 + 128, 72, 3);
                *(_QWORD *)&v368 = v365;
                if (v365)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v368);
                  v365 = 0;
                }
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v168, v167, v166 + 768, (unsigned __int8 **)&v368, 0);
              if ((_QWORD)v368)
                llvm::MetadataTracking::untrack((uint64_t)&v368, (unsigned __int8 *)v368);
              if (v365)
                llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
              v169 = v141[5];
              *(_QWORD *)(v168 + 24) = v169;
              v170 = *(_QWORD *)(v169 + 32);
              v171 = *(unsigned int *)(v168 + 40);
              if ((_DWORD)v171)
              {
                v184 = *(_QWORD *)(v168 + 32);
                v185 = *(_QWORD *)(v170 + 40);
                v186 = 32 * v171;
                do
                {
                  if (!*(_BYTE *)v184)
                  {
                    v187 = *(unsigned int *)(v184 + 4);
                    if ((int)v187 >= 0)
                      v188 = (uint64_t *)(*(_QWORD *)(v185 + 272) + 8 * v187);
                    else
                      v188 = (uint64_t *)(*(_QWORD *)(v185 + 24) + 16 * (v187 & 0x7FFFFFFF) + 8);
                    v189 = *v188;
                    if (*v188)
                    {
                      v190 = *(_QWORD *)(v189 + 16);
                      *(_QWORD *)(v189 + 16) = v184;
                      *(_QWORD *)(v184 + 16) = v190;
                      if ((*(_BYTE *)(v184 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v184 + 24) = v189;
                      }
                      else
                      {
                        *(_QWORD *)(v184 + 24) = 0;
                        v188 = (uint64_t *)(v190 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v184 + 16) = v184;
                      *(_QWORD *)(v184 + 24) = 0;
                    }
                    *v188 = v184;
                  }
                  v184 += 32;
                  v186 -= 32;
                }
                while (v186);
              }
              v172 = *(_QWORD *)(v170 + 728);
              if (v172)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v172 + 24))(v172, v168);
              v173 = *v165 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v168 = v173 | *(_QWORD *)v168 & 7;
              *(_QWORD *)(v168 + 8) = v165;
              *(_QWORD *)(v173 + 8) = v168;
              *v165 = *v165 & 7 | v168;
              if (v359)
                llvm::MetadataTracking::untrack((uint64_t)&v359, (unsigned __int8 *)v359);
              v174 = *(_DWORD *)(a2[38] + 4 * v142);
              LODWORD(v368) = 5;
              *((_QWORD *)&v368 + 1) = 0;
              LODWORD(v369) = v174;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v168, v167, (const llvm::MachineOperand *)&v368);
              LODWORD(v368) = 1;
              *((_QWORD *)&v368 + 1) = 0;
              *(_QWORD *)&v369 = v137;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v168, v167, (const llvm::MachineOperand *)&v368);
              LODWORD(v368) = 1;
              *((_QWORD *)&v368 + 1) = 0;
              *(_QWORD *)&v369 = v154;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v168, v167, (const llvm::MachineOperand *)&v368);
            }
          }
LABEL_246:
          v175 = (_QWORD *)v135[1];
          if (v175)
          {
            do
            {
              v176 = v175;
              v175 = (_QWORD *)*v175;
            }
            while (v175);
          }
          else
          {
            do
            {
              v176 = (_QWORD *)v135[2];
              v164 = *v176 == (_QWORD)v135;
              v135 = v176;
            }
            while (!v164);
          }
          v135 = v176;
        }
        while (v176 != v136);
      }
      v191 = v337;
      v192 = *(_QWORD *)(v337 + 112);
      v193 = (_QWORD *)(v192 + 1096);
      v194 = *(_DWORD *)(v192 + 1104);
      if (v194)
      {
        v313 = *(_DWORD *)(v192 + 1112);
        if (v313 > 4 * v194 && v313 >= 0x41)
        {
          v314 = 1 << (33 - __clz(v194 - 1));
          if (v314 <= 64)
            v315 = 64;
          else
            v315 = v314;
          goto LABEL_464;
        }
      }
      else
      {
        if (!*(_DWORD *)(v192 + 1108))
          goto LABEL_282;
        v313 = *(_DWORD *)(v192 + 1112);
        if (v313 > 0x40)
        {
          v315 = 0;
LABEL_464:
          if (v315 == v313)
          {
            *(_QWORD *)(v192 + 1104) = 0;
            v316 = *(_DWORD **)(v192 + 1096);
            v317 = 24 * v313;
            v191 = v337;
            do
            {
              *v316 = -1;
              v316 += 6;
              v317 -= 24;
            }
            while (v317);
            goto LABEL_282;
          }
          MEMORY[0x1CAA32FB4](*v193, 8);
          if (v315)
          {
            v321 = (4 * v315 / 3u + 1) | ((unint64_t)(4 * v315 / 3u + 1) >> 1);
            v322 = v321 | (v321 >> 2) | ((v321 | (v321 >> 2)) >> 4);
            LODWORD(v322) = (((v322 | (v322 >> 8)) >> 16) | v322 | (v322 >> 8)) + 1;
            *(_DWORD *)(v192 + 1112) = v322;
            v323 = operator new(24 * v322, (std::align_val_t)8uLL);
            *(_QWORD *)(v192 + 1096) = v323;
            *(_QWORD *)(v192 + 1104) = 0;
            v324 = *(unsigned int *)(v192 + 1112);
            v191 = v337;
            if ((_DWORD)v324)
            {
              v325 = 24 * v324;
              do
              {
                *v323 = -1;
                v323 += 6;
                v325 -= 24;
              }
              while (v325);
            }
LABEL_282:
            v195 = *(unsigned int *)(v191 + 192);
            if ((_DWORD)v195)
            {
              v196 = *(uint64_t **)(v191 + 184);
              v197 = (_QWORD *)(v342 + 344);
              v198 = v196;
              do
              {
                v200 = v198[1];
                v199 = v198[2];
                v201 = *v198;
                v202 = *(unsigned int *)(v199 + 24);
                v203 = *(_QWORD *)(v342 + 392);
                if (v200 == *(_QWORD *)(v203 + 16 * v202))
                {
                  v204 = (_QWORD *)sub_1C5102240((llvm::MachineBasicBlock *)v198[2], v198[1], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v191 + 120) + 288) + 392), (uint64_t)&v348);
                  v205 = *(_QWORD *)(v199 + 40);
                  *(_QWORD *)(v201 + 24) = v205;
                  v206 = *(_QWORD *)(v205 + 32);
                  v207 = *(unsigned int *)(v201 + 40);
                  if ((_DWORD)v207)
                  {
                    v282 = *(_QWORD *)(v201 + 32);
                    v283 = *(_QWORD *)(v206 + 40);
                    v284 = 32 * v207;
                    do
                    {
                      if (!*(_BYTE *)v282)
                      {
                        v285 = *(unsigned int *)(v282 + 4);
                        if ((int)v285 >= 0)
                          v286 = (uint64_t *)(*(_QWORD *)(v283 + 272) + 8 * v285);
                        else
                          v286 = (uint64_t *)(*(_QWORD *)(v283 + 24) + 16 * (v285 & 0x7FFFFFFF) + 8);
                        v287 = *v286;
                        if (*v286)
                        {
                          v288 = *(_QWORD *)(v287 + 16);
                          *(_QWORD *)(v287 + 16) = v282;
                          *(_QWORD *)(v282 + 16) = v288;
                          if ((*(_BYTE *)(v282 + 3) & 1) != 0)
                          {
                            *(_QWORD *)(v282 + 24) = v287;
                          }
                          else
                          {
                            *(_QWORD *)(v282 + 24) = 0;
                            v286 = (uint64_t *)(v288 + 24);
                          }
                        }
                        else
                        {
                          *(_QWORD *)(v282 + 16) = v282;
                          *(_QWORD *)(v282 + 24) = 0;
                        }
                        *v286 = v282;
                      }
                      v282 += 32;
                      v284 -= 32;
                    }
                    while (v284);
                  }
                  while (1)
                  {
                    v208 = *(_QWORD *)(v206 + 728);
                    if (v208)
                      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v208 + 24))(v208, v201);
                    v209 = *v204 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v201 = v209 | *(_QWORD *)v201 & 7;
                    *(_QWORD *)(v201 + 8) = v204;
                    *(_QWORD *)(v209 + 8) = v201;
                    *v204 = *v204 & 7 | v201;
                    v210 = v198 + 3;
                    v196 = *(uint64_t **)(v191 + 184);
                    v195 = *(unsigned int *)(v191 + 192);
                    if (v198 + 3 == &v196[3 * v195] || v198[4] != v200)
                      break;
                    v198 += 3;
                    v201 = *v210;
                    v211 = *(_QWORD *)(v199 + 40);
                    *(_QWORD *)(v201 + 24) = v211;
                    v206 = *(_QWORD *)(v211 + 32);
                    v212 = *(unsigned int *)(v201 + 40);
                    if ((_DWORD)v212)
                    {
                      v213 = *(_QWORD *)(v201 + 32);
                      v214 = *(_QWORD *)(v206 + 40);
                      v215 = 32 * v212;
                      do
                      {
                        if (!*(_BYTE *)v213)
                        {
                          v216 = *(unsigned int *)(v213 + 4);
                          if ((int)v216 >= 0)
                            v217 = (uint64_t *)(*(_QWORD *)(v214 + 272) + 8 * v216);
                          else
                            v217 = (uint64_t *)(*(_QWORD *)(v214 + 24) + 16 * (v216 & 0x7FFFFFFF) + 8);
                          v218 = *v217;
                          if (*v217)
                          {
                            v219 = *(_QWORD *)(v218 + 16);
                            *(_QWORD *)(v218 + 16) = v213;
                            *(_QWORD *)(v213 + 16) = v219;
                            if ((*(_BYTE *)(v213 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v213 + 24) = v218;
                            }
                            else
                            {
                              *(_QWORD *)(v213 + 24) = 0;
                              v217 = (uint64_t *)(v219 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v213 + 16) = v213;
                            *(_QWORD *)(v213 + 24) = 0;
                          }
                          *v217 = v213;
                        }
                        v213 += 32;
                        v215 -= 32;
                      }
                      while (v215);
                    }
                  }
                }
                else
                {
                  v220 = v200 & 0xFFFFFFFFFFFFFFF8;
                  if (v200 >= 8 && (v221 = *(_QWORD *)(v220 + 16)) != 0)
                  {
                    v222 = *(_QWORD *)(v221 + 8);
                    if (v222 == v199 + 48)
                    {
                      v191 = v337;
                    }
                    else
                    {
                      v191 = v337;
                      while (1)
                      {
                        v223 = **(unsigned __int16 **)(v222 + 16);
                        if ((v223 - 13) >= 5 && v223 != 23)
                          break;
                        v222 = *(_QWORD *)(v222 + 8);
                        if (v222 == v199 + 48)
                        {
                          v222 = v199 + 48;
                          break;
                        }
                      }
                    }
                    v232 = *(_QWORD *)(v199 + 40);
                    *(_QWORD *)(v201 + 24) = v232;
                    v233 = *(_QWORD *)(v232 + 32);
                    v234 = *(unsigned int *)(v201 + 40);
                    if ((_DWORD)v234)
                    {
                      v296 = *(_QWORD *)(v201 + 32);
                      v297 = *(_QWORD *)(v233 + 40);
                      v298 = 32 * v234;
                      do
                      {
                        if (!*(_BYTE *)v296)
                        {
                          v299 = *(unsigned int *)(v296 + 4);
                          if ((int)v299 >= 0)
                            v300 = (uint64_t *)(*(_QWORD *)(v297 + 272) + 8 * v299);
                          else
                            v300 = (uint64_t *)(*(_QWORD *)(v297 + 24) + 16 * (v299 & 0x7FFFFFFF) + 8);
                          v301 = *v300;
                          if (*v300)
                          {
                            v302 = *(_QWORD *)(v301 + 16);
                            *(_QWORD *)(v301 + 16) = v296;
                            *(_QWORD *)(v296 + 16) = v302;
                            if ((*(_BYTE *)(v296 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v296 + 24) = v301;
                            }
                            else
                            {
                              *(_QWORD *)(v296 + 24) = 0;
                              v300 = (uint64_t *)(v302 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v296 + 16) = v296;
                            *(_QWORD *)(v296 + 24) = 0;
                          }
                          *v300 = v296;
                        }
                        v296 += 32;
                        v298 -= 32;
                      }
                      while (v298);
                    }
                    while (1)
                    {
                      v235 = *(_QWORD *)(v233 + 728);
                      if (v235)
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v235 + 24))(v235, v201);
                      v236 = *(_QWORD *)v222 & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v201 = v236 | *(_QWORD *)v201 & 7;
                      *(_QWORD *)(v201 + 8) = v222;
                      *(_QWORD *)(v236 + 8) = v201;
                      *(_QWORD *)v222 = *(_QWORD *)v222 & 7 | v201;
                      v237 = v198 + 3;
                      v196 = *(uint64_t **)(v191 + 184);
                      v195 = *(unsigned int *)(v191 + 192);
                      if (v198 + 3 == &v196[3 * v195] || v198[4] != v200)
                        break;
                      v198 += 3;
                      v201 = *v237;
                      v238 = *(_QWORD *)(v199 + 40);
                      *(_QWORD *)(v201 + 24) = v238;
                      v233 = *(_QWORD *)(v238 + 32);
                      v239 = *(unsigned int *)(v201 + 40);
                      if ((_DWORD)v239)
                      {
                        v240 = *(_QWORD *)(v201 + 32);
                        v241 = *(_QWORD *)(v233 + 40);
                        v242 = 32 * v239;
                        do
                        {
                          if (!*(_BYTE *)v240)
                          {
                            v243 = *(unsigned int *)(v240 + 4);
                            if ((int)v243 >= 0)
                              v244 = (uint64_t *)(*(_QWORD *)(v241 + 272) + 8 * v243);
                            else
                              v244 = (uint64_t *)(*(_QWORD *)(v241 + 24) + 16 * (v243 & 0x7FFFFFFF) + 8);
                            v245 = *v244;
                            if (*v244)
                            {
                              v246 = *(_QWORD *)(v245 + 16);
                              *(_QWORD *)(v245 + 16) = v240;
                              *(_QWORD *)(v240 + 16) = v246;
                              if ((*(_BYTE *)(v240 + 3) & 1) != 0)
                              {
                                *(_QWORD *)(v240 + 24) = v245;
                              }
                              else
                              {
                                *(_QWORD *)(v240 + 24) = 0;
                                v244 = (uint64_t *)(v246 + 24);
                              }
                            }
                            else
                            {
                              *(_QWORD *)(v240 + 16) = v240;
                              *(_QWORD *)(v240 + 24) = 0;
                            }
                            *v244 = v240;
                          }
                          v240 += 32;
                          v242 -= 32;
                        }
                        while (v242);
                      }
                    }
                  }
                  else
                  {
                    v225 = *(_QWORD *)(v203 + 16 * v202 + 8);
                    v226 = v225 & 0xFFFFFFFFFFFFFFF8;
                    v227 = (v225 >> 1) & 3;
                    v228 = v227 | *(_DWORD *)((v225 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v229 = (v200 >> 1) & 3;
                    if ((*(_DWORD *)(v220 + 24) | v229) < v228)
                    {
                      v230 = v198[1];
                      while (1)
                      {
                        if (v230 > 7)
                        {
                          v231 = *(uint64_t **)(v220 + 16);
                          if (v231)
                            break;
                        }
                        while (1)
                        {
                          v220 = *(_QWORD *)(v220 + 8);
                          if ((_QWORD *)v220 == v197)
                            break;
                          if (*(_QWORD *)(v220 + 16))
                          {
                            v230 = v220 & 0xFFFFFFFFFFFFFFF9 | (2 * ((v230 >> 1) & 3));
                            goto LABEL_323;
                          }
                        }
                        v230 = *v197 & 0xFFFFFFFFFFFFFFF9;
LABEL_323:
                        v220 = v230 & 0xFFFFFFFFFFFFFFF8;
                        v229 = (v230 >> 1) & 3;
                        if ((v229 | *(_DWORD *)((v230 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v228)
                          goto LABEL_370;
                      }
                      v247 = *(_QWORD *)(v199 + 40);
                      *(_QWORD *)(v201 + 24) = v247;
                      v248 = *(_QWORD *)(v247 + 32);
                      v249 = *(unsigned int *)(v201 + 40);
                      if ((_DWORD)v249)
                      {
                        v303 = *(_QWORD *)(v201 + 32);
                        v304 = *(_QWORD *)(v248 + 40);
                        v305 = 32 * v249;
                        do
                        {
                          if (!*(_BYTE *)v303)
                          {
                            v306 = *(unsigned int *)(v303 + 4);
                            if ((int)v306 >= 0)
                              v307 = (uint64_t *)(*(_QWORD *)(v304 + 272) + 8 * v306);
                            else
                              v307 = (uint64_t *)(*(_QWORD *)(v304 + 24) + 16 * (v306 & 0x7FFFFFFF) + 8);
                            v308 = *v307;
                            if (*v307)
                            {
                              v309 = *(_QWORD *)(v308 + 16);
                              *(_QWORD *)(v308 + 16) = v303;
                              *(_QWORD *)(v303 + 16) = v309;
                              if ((*(_BYTE *)(v303 + 3) & 1) != 0)
                              {
                                *(_QWORD *)(v303 + 24) = v308;
                              }
                              else
                              {
                                *(_QWORD *)(v303 + 24) = 0;
                                v307 = (uint64_t *)(v309 + 24);
                              }
                            }
                            else
                            {
                              *(_QWORD *)(v303 + 16) = v303;
                              *(_QWORD *)(v303 + 24) = 0;
                            }
                            *v307 = v303;
                          }
                          v303 += 32;
                          v305 -= 32;
                        }
                        while (v305);
                      }
                      v250 = *(_QWORD *)(v248 + 728);
                      if (v250)
                        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v250 + 24))(v250, v201);
                      v251 = *v231 & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)v201 = v251 | *(_QWORD *)v201 & 7;
                      *(_QWORD *)(v201 + 8) = v231;
                      *(_QWORD *)(v251 + 8) = v201;
                      *v231 = *v231 & 7 | v201;
                      v252 = v198 + 3;
                      v196 = *(uint64_t **)(v337 + 184);
                      v195 = *(unsigned int *)(v337 + 192);
                      if (v198 + 3 != &v196[3 * v195])
                      {
                        v344 = v226;
                        do
                        {
                          if (v198[4] != v200)
                            break;
                          v198 = v252;
                          v253 = *v252;
                          v254 = *(_QWORD *)(v199 + 40);
                          *(_QWORD *)(v253 + 24) = v254;
                          v255 = *(_QWORD *)(v254 + 32);
                          v256 = *(unsigned int *)(v253 + 40);
                          if ((_DWORD)v256)
                          {
                            v259 = *(_QWORD *)(v253 + 32);
                            v260 = *(_QWORD *)(v255 + 40);
                            v261 = 32 * v256;
                            do
                            {
                              if (!*(_BYTE *)v259)
                              {
                                v262 = *(unsigned int *)(v259 + 4);
                                if ((int)v262 >= 0)
                                  v263 = (uint64_t *)(*(_QWORD *)(v260 + 272) + 8 * v262);
                                else
                                  v263 = (uint64_t *)(*(_QWORD *)(v260 + 24) + 16 * (v262 & 0x7FFFFFFF) + 8);
                                v264 = *v263;
                                if (*v263)
                                {
                                  v265 = *(_QWORD *)(v264 + 16);
                                  *(_QWORD *)(v264 + 16) = v259;
                                  *(_QWORD *)(v259 + 16) = v265;
                                  if ((*(_BYTE *)(v259 + 3) & 1) != 0)
                                  {
                                    *(_QWORD *)(v259 + 24) = v264;
                                  }
                                  else
                                  {
                                    *(_QWORD *)(v259 + 24) = 0;
                                    v263 = (uint64_t *)(v265 + 24);
                                  }
                                }
                                else
                                {
                                  *(_QWORD *)(v259 + 16) = v259;
                                  *(_QWORD *)(v259 + 24) = 0;
                                }
                                *v263 = v259;
                              }
                              v259 += 32;
                              v261 -= 32;
                            }
                            while (v261);
                          }
                          v257 = *(_QWORD *)(v255 + 728);
                          if (v257)
                            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v257 + 24))(v257, v253);
                          v258 = *v231 & 0xFFFFFFFFFFFFFFF8;
                          *(_QWORD *)v253 = v258 | *(_QWORD *)v253 & 7;
                          *(_QWORD *)(v253 + 8) = v231;
                          *(_QWORD *)(v258 + 8) = v253;
                          *v231 = *v231 & 7 | v253;
                          v252 = v198 + 3;
                          v196 = *(uint64_t **)(v337 + 184);
                          v195 = *(unsigned int *)(v337 + 192);
                        }
                        while (v198 + 3 != &v196[3 * v195]);
                        v226 = v344;
                      }
                    }
LABEL_370:
                    if ((*(_DWORD *)(v220 + 24) | v229) >= (*(_DWORD *)(v226 + 24) | v227))
                    {
                      FirstTerminator = (_QWORD *)llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v199);
                      v267 = *(_QWORD *)(v199 + 40);
                      *(_QWORD *)(v201 + 24) = v267;
                      v268 = *(_QWORD *)(v267 + 32);
                      v269 = *(unsigned int *)(v201 + 40);
                      v191 = v337;
                      if ((_DWORD)v269)
                      {
                        v289 = *(_QWORD *)(v201 + 32);
                        v290 = *(_QWORD *)(v268 + 40);
                        v291 = 32 * v269;
                        do
                        {
                          if (!*(_BYTE *)v289)
                          {
                            v292 = *(unsigned int *)(v289 + 4);
                            if ((int)v292 >= 0)
                              v293 = (uint64_t *)(*(_QWORD *)(v290 + 272) + 8 * v292);
                            else
                              v293 = (uint64_t *)(*(_QWORD *)(v290 + 24) + 16 * (v292 & 0x7FFFFFFF) + 8);
                            v294 = *v293;
                            if (*v293)
                            {
                              v295 = *(_QWORD *)(v294 + 16);
                              *(_QWORD *)(v294 + 16) = v289;
                              *(_QWORD *)(v289 + 16) = v295;
                              if ((*(_BYTE *)(v289 + 3) & 1) != 0)
                              {
                                *(_QWORD *)(v289 + 24) = v294;
                              }
                              else
                              {
                                *(_QWORD *)(v289 + 24) = 0;
                                v293 = (uint64_t *)(v295 + 24);
                              }
                            }
                            else
                            {
                              *(_QWORD *)(v289 + 16) = v289;
                              *(_QWORD *)(v289 + 24) = 0;
                            }
                            *v293 = v289;
                          }
                          v289 += 32;
                          v291 -= 32;
                        }
                        while (v291);
                      }
                      while (1)
                      {
                        v270 = *(_QWORD *)(v268 + 728);
                        if (v270)
                          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v270 + 24))(v270, v201);
                        v271 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v201 = v271 | *(_QWORD *)v201 & 7;
                        *(_QWORD *)(v201 + 8) = FirstTerminator;
                        *(_QWORD *)(v271 + 8) = v201;
                        *FirstTerminator = *FirstTerminator & 7 | v201;
                        v272 = v198 + 3;
                        v196 = *(uint64_t **)(v337 + 184);
                        v195 = *(unsigned int *)(v337 + 192);
                        if (v198 + 3 == &v196[3 * v195] || v198[4] != v200)
                          break;
                        v198 += 3;
                        v201 = *v272;
                        v273 = *(_QWORD *)(v199 + 40);
                        *(_QWORD *)(v201 + 24) = v273;
                        v268 = *(_QWORD *)(v273 + 32);
                        v274 = *(unsigned int *)(v201 + 40);
                        if ((_DWORD)v274)
                        {
                          v275 = *(_QWORD *)(v201 + 32);
                          v276 = *(_QWORD *)(v268 + 40);
                          v277 = 32 * v274;
                          do
                          {
                            if (!*(_BYTE *)v275)
                            {
                              v278 = *(unsigned int *)(v275 + 4);
                              if ((int)v278 >= 0)
                                v279 = (uint64_t *)(*(_QWORD *)(v276 + 272) + 8 * v278);
                              else
                                v279 = (uint64_t *)(*(_QWORD *)(v276 + 24) + 16 * (v278 & 0x7FFFFFFF) + 8);
                              v280 = *v279;
                              if (*v279)
                              {
                                v281 = *(_QWORD *)(v280 + 16);
                                *(_QWORD *)(v280 + 16) = v275;
                                *(_QWORD *)(v275 + 16) = v281;
                                if ((*(_BYTE *)(v275 + 3) & 1) != 0)
                                {
                                  *(_QWORD *)(v275 + 24) = v280;
                                }
                                else
                                {
                                  *(_QWORD *)(v275 + 24) = 0;
                                  v279 = (uint64_t *)(v281 + 24);
                                }
                              }
                              else
                              {
                                *(_QWORD *)(v275 + 16) = v275;
                                *(_QWORD *)(v275 + 24) = 0;
                              }
                              *v279 = v275;
                            }
                            v275 += 32;
                            v277 -= 32;
                          }
                          while (v277);
                        }
                      }
                    }
                    else
                    {
                      v191 = v337;
                    }
                  }
                }
                v198 += 3;
              }
              while (v198 != &v196[3 * v195]);
            }
            *(_BYTE *)(v191 + 968) = 1;
            if ((_DWORD)v349)
            {
              v310 = v350;
              if (v350 > 4 * (int)v349 && v350 >= 0x41)
              {
                v326 = 1 << (33 - __clz(v349 - 1));
                if (v326 <= 64)
                  v320 = 64;
                else
                  v320 = v326;
                goto LABEL_484;
              }
            }
            else
            {
              if (!HIDWORD(v349))
              {
LABEL_447:
                MEMORY[0x1CAA32FB4](v345, 4);
                return MEMORY[0x1CAA32FB4](v348, 8);
              }
              v310 = v350;
              if (v350 > 0x40)
              {
                v320 = 0;
LABEL_484:
                v327 = v348;
                if (v320 == v310)
                {
                  v328 = 16 * v310;
                  do
                  {
                    *v327 = -4096;
                    v327 += 2;
                    v328 -= 16;
                  }
                  while (v328);
                }
                else
                {
                  MEMORY[0x1CAA32FB4](v348, 8);
                  if (v320)
                  {
                    v329 = (4 * v320 / 3u + 1) | ((unint64_t)(4 * v320 / 3u + 1) >> 1);
                    v330 = v329 | (v329 >> 2) | ((v329 | (v329 >> 2)) >> 4);
                    v331 = 16
                         * ((((v330 | (v330 >> 8)) >> 16) | v330 | (v330 >> 8))
                          + 1);
                    v332 = operator new(v331, (std::align_val_t)8uLL);
                    v348 = v332;
                    do
                    {
                      *v332 = -4096;
                      v332 += 2;
                      v331 -= 16;
                    }
                    while (v331);
                  }
                  else
                  {
                    v348 = 0;
                    v349 = 0;
                    v350 = 0;
                  }
                }
                goto LABEL_447;
              }
            }
            if (v310)
            {
              v311 = v348;
              v312 = 16 * v310;
              do
              {
                *v311 = -4096;
                v311 += 2;
                v312 -= 16;
              }
              while (v312);
            }
            goto LABEL_447;
          }
          *v193 = 0;
          *(_QWORD *)(v192 + 1104) = 0;
          *(_DWORD *)(v192 + 1112) = 0;
LABEL_472:
          v191 = v337;
          goto LABEL_282;
        }
      }
      if (v313)
      {
        v318 = (_DWORD *)*v193;
        v319 = 24 * v313;
        do
        {
          *v318 = -1;
          v318 += 6;
          v319 -= 24;
        }
        while (v319);
      }
      *(_QWORD *)(v192 + 1104) = 0;
      goto LABEL_472;
    }
  }
  return result;
}

void sub_1C50FCA0C(llvm *a1)
{
  uint64_t v1;
  llvm *v2;
  llvm *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  _WORD *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  _WORD *v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  __int32 *v19;
  __int32 *v20;
  __int32 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  char v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  void *v30;
  llvm::raw_ostream *v31;
  unsigned int v32;
  uint64_t v33;
  llvm::raw_ostream *v34;
  const char *v35;
  size_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t i;
  _DWORD *v43;
  llvm::raw_ostream *v44;
  _BYTE *v45;
  _BYTE *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  _WORD *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD v65[10];

  v65[8] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)a1 + 31);
  if (!v1)
    return;
  v2 = llvm::dbgs(a1);
  v3 = v2;
  v4 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v4 > 0x25uLL)
  {
    qmemcpy(v4, "********** DEBUG VARIABLES **********\n", 38);
    *((_QWORD *)v2 + 4) += 38;
  }
  else
  {
    llvm::raw_ostream::write(v2, "********** DEBUG VARIABLES **********\n", 0x26uLL);
  }
  v5 = *(unsigned int *)(v1 + 984);
  if (!(_DWORD)v5)
    goto LABEL_77;
  v6 = *(uint64_t **)(v1 + 976);
  v56 = &v6[v5];
  v55 = v1;
  do
  {
    v7 = *v6;
    v57 = *(_QWORD *)(v1 + 128);
    v8 = (_WORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v8 > 1uLL)
    {
      *v8 = 8737;
      *((_QWORD *)v3 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v3, "!\"", 2uLL);
    }
    sub_1C5102E08(v3, *(unsigned __int8 **)v7, *(_QWORD *)(v7 + 32));
    v9 = (_WORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v9 > 1uLL)
    {
      *v9 = 2338;
      *((_QWORD *)v3 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v3, "\"\t", 2uLL);
    }
    sub_1C5100EEC((uint64_t)&v58, v7 + 200);
    v62 = v58;
    v63 = v65;
    v64 = 0x400000000;
    if (v60)
      sub_1C50E5C18((uint64_t)&v63, (uint64_t)&v59);
    if (v59 != &v61)
      free(v59);
    while ((_DWORD)v64 && *((_DWORD *)v63 + 3) < *((_DWORD *)v63 + 2))
    {
      v10 = (_WORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v10 > 1uLL)
      {
        *v10 = 23328;
        *((_QWORD *)v3 + 4) += 2;
        v11 = v3;
      }
      else
      {
        v11 = llvm::raw_ostream::write(v3, " [", 2uLL);
      }
      v58 = *(_QWORD *)(*((_QWORD *)v63 + 2 * v64 - 2)
                      + 16 * *((unsigned int *)v63 + 4 * v64 - 1));
      llvm::SlotIndex::print((llvm::SlotIndex *)&v58, v11);
      v12 = (_BYTE *)*((_QWORD *)v11 + 4);
      if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
      {
        llvm::raw_ostream::write(v11, 59);
      }
      else
      {
        *((_QWORD *)v11 + 4) = v12 + 1;
        *v12 = 59;
      }
      v58 = *(_QWORD *)(*((_QWORD *)v63 + 2 * v64 - 2)
                      + 16 * *((unsigned int *)v63 + 4 * v64 - 1)
                      + 8);
      llvm::SlotIndex::print((llvm::SlotIndex *)&v58, v11);
      v13 = (_WORD *)*((_QWORD *)v11 + 4);
      if (*((_QWORD *)v11 + 3) - (_QWORD)v13 > 1uLL)
      {
        *v13 = 14889;
        *((_QWORD *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, "):", 2uLL);
      }
      v14 = (char *)v63 + 16 * v64;
      v15 = *((_QWORD *)v14 - 2);
      v16 = *((_DWORD *)v14 - 1);
      v17 = *(_BYTE *)(v15 + 24 * v16 + 72);
      v18 = v17 & 0x3F;
      if ((v17 & 0x3F) != 0
        && ((v19 = *(__int32 **)(v15 + 24 * v16 + 64), (v20 = wmemchr(v19, -1, v17 & 0x3F)) != 0)
          ? (v21 = v20)
          : (v21 = &v19[v18]),
            v18 == v21 - v19))
      {
        v22 = *((_QWORD *)v63 + 2 * v64 - 2) + 24 * *((unsigned int *)v63 + 4 * v64 - 1);
        v25 = *(unsigned int **)(v22 + 64);
        v23 = v22 + 64;
        v24 = v25;
        v26 = *(_BYTE *)(v23 + 8);
        if ((v26 & 0x3F) != 0)
        {
          v27 = 4 * (v26 & 0x3F);
          do
          {
            if (v24 == *(unsigned int **)v23)
              v28 = " ";
            else
              v28 = ", ";
            if (v24 == *(unsigned int **)v23)
              v29 = 1;
            else
              v29 = 2;
            v30 = (void *)*((_QWORD *)v3 + 4);
            if (v29 <= *((_QWORD *)v3 + 3) - (_QWORD)v30)
            {
              memcpy(v30, v28, v29);
              *((_QWORD *)v3 + 4) += v29;
              v31 = v3;
            }
            else
            {
              v31 = llvm::raw_ostream::write(v3, v28, v29);
            }
            v32 = *v24++;
            sub_1C5E21910(v31, v32, 0, 0, 0);
            v27 -= 4;
          }
          while (v27);
          v26 = *(_BYTE *)(*((_QWORD *)v63 + 2 * v64 - 2)
                         + 24 * *((unsigned int *)v63 + 4 * v64 - 1)
                         + 72);
        }
        if ((v26 & 0x40) != 0)
        {
          v38 = (_DWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v38 <= 3uLL)
          {
            v34 = v3;
            v35 = " ind";
            v36 = 4;
            goto LABEL_44;
          }
          *v38 = 1684957472;
          v39 = *((_QWORD *)v3 + 4) + 4;
        }
        else
        {
          if ((v26 & 0x80) == 0)
            goto LABEL_45;
          v37 = *((_QWORD *)v3 + 4);
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v37) <= 4)
          {
            v34 = v3;
            v35 = " list";
            v36 = 5;
            goto LABEL_44;
          }
          *(_BYTE *)(v37 + 4) = 116;
          *(_DWORD *)v37 = 1936288800;
          v39 = *((_QWORD *)v3 + 4) + 5;
        }
      }
      else
      {
        v33 = *((_QWORD *)v3 + 4);
        if ((unint64_t)(*((_QWORD *)v3 + 3) - v33) <= 5)
        {
          v34 = v3;
          v35 = " undef";
          v36 = 6;
LABEL_44:
          llvm::raw_ostream::write(v34, v35, v36);
          goto LABEL_45;
        }
        *(_WORD *)(v33 + 4) = 26213;
        *(_DWORD *)v33 = 1684960544;
        v39 = *((_QWORD *)v3 + 4) + 6;
      }
      *((_QWORD *)v3 + 4) = v39;
LABEL_45:
      sub_1C51010D0((uint64_t)&v62);
    }
    if (v63 != v65)
      free(v63);
    v40 = *(unsigned int *)(v7 + 64);
    if ((_DWORD)v40)
    {
      v41 = 0;
      for (i = 0; i != v40; ++i)
      {
        v43 = (_DWORD *)*((_QWORD *)v3 + 4);
        if (*((_QWORD *)v3 + 3) - (_QWORD)v43 > 3uLL)
        {
          *v43 = 1668238368;
          *((_QWORD *)v3 + 4) += 4;
          v44 = v3;
        }
        else
        {
          v44 = llvm::raw_ostream::write(v3, " Loc", 4uLL);
        }
        sub_1C5E21910(v44, i, 0, 0, 0);
        v45 = (_BYTE *)*((_QWORD *)v44 + 4);
        if ((unint64_t)v45 >= *((_QWORD *)v44 + 3))
        {
          llvm::raw_ostream::write(v44, 61);
        }
        else
        {
          *((_QWORD *)v44 + 4) = v45 + 1;
          *v45 = 61;
        }
        llvm::MachineOperand::print((llvm::raw_ostream *)(*(_QWORD *)(v7 + 56) + v41), v3, 0, v57, 0);
        v41 += 32;
      }
    }
    v46 = (_BYTE *)*((_QWORD *)v3 + 4);
    if ((unint64_t)v46 >= *((_QWORD *)v3 + 3))
    {
      llvm::raw_ostream::write(v3, 10);
    }
    else
    {
      *((_QWORD *)v3 + 4) = v46 + 1;
      *v46 = 10;
    }
    v1 = v55;
    ++v6;
  }
  while (v6 != v56);
LABEL_77:
  v47 = (void *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v47 > 0x22uLL)
  {
    qmemcpy(v47, "********** DEBUG LABELS **********\n", 35);
    *((_QWORD *)v3 + 4) += 35;
  }
  else
  {
    llvm::raw_ostream::write(v3, "********** DEBUG LABELS **********\n", 0x23uLL);
  }
  v48 = *(unsigned int *)(v1 + 1064);
  if ((_DWORD)v48)
  {
    v49 = *(uint64_t **)(v1 + 1056);
    v50 = 8 * v48;
    do
    {
      v51 = *v49;
      v52 = (_WORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v52 > 1uLL)
      {
        *v52 = 8737;
        *((_QWORD *)v3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v3, "!\"", 2uLL);
      }
      sub_1C5102E08(v3, *(unsigned __int8 **)v51, *(_QWORD *)(v51 + 8));
      v53 = (_WORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v53 > 1uLL)
      {
        *v53 = 2338;
        *((_QWORD *)v3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v3, "\"\t", 2uLL);
      }
      v62 = *(_QWORD *)(v51 + 16);
      llvm::SlotIndex::print((llvm::SlotIndex *)&v62, v3);
      v54 = (_BYTE *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v54 >= *((_QWORD *)v3 + 3))
      {
        llvm::raw_ostream::write(v3, 10);
      }
      else
      {
        *((_QWORD *)v3 + 4) = v54 + 1;
        *v54 = 10;
      }
      ++v49;
      v50 -= 8;
    }
    while (v50);
  }
}

void sub_1C50FD170(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 0x400uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C50FD2A0(uint64_t a1, uint64_t a2, llvm::MachineOperand *a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  uint64_t v13;
  __int32 v14;
  uint64_t v15;
  uint64_t v16;
  __int32 *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23[3];
  uint64_t v24[3];
  uint64_t v25[3];
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[64];
  __int32 *v30;
  uint64_t v31;
  _QWORD v32[7];

  v32[6] = *MEMORY[0x1E0C80C00];
  v30 = (__int32 *)v32;
  v31 = 0xC00000000;
  if (a4)
  {
    v13 = 32 * a4;
    do
    {
      v14 = sub_1C50FDFA8(a1, a3);
      v15 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v31 + 1, 4);
        v15 = v31;
      }
      v30[v15] = v14;
      v16 = (v31 + 1);
      LODWORD(v31) = v31 + 1;
      a3 = (llvm::MachineOperand *)((char *)a3 + 32);
      v13 -= 32;
    }
    while (v13);
    v17 = v30;
  }
  else
  {
    v16 = 0;
    v17 = (__int32 *)v32;
  }
  sub_1C50FE0F0(v25, v17, v16, a5, a6, a7);
  v26 = a1 + 200;
  v27 = v29;
  v28 = 0x400000000;
  sub_1C50FEC80(&v26, a2);
  if ((_DWORD)v28
    && *((_DWORD *)v27 + 3) < *((_DWORD *)v27 + 2)
    && *(_QWORD *)(*((_QWORD *)v27 + 2 * v28 - 2)
                 + 16 * *((unsigned int *)v27 + 4 * v28 - 1)) == a2)
  {
    sub_1C50FE758(v23, (uint64_t)v25);
    sub_1C50FE824((uint64_t)&v26, (uint64_t)v23);
    v18 = v23[0];
    v23[0] = 0;
    if (!v18)
      goto LABEL_18;
LABEL_17:
    MEMORY[0x1CAA32F9C](v18, 0x1000C8052888210);
    goto LABEL_18;
  }
  v19 = (a2 >> 1) & 3;
  v20 = a2 & 0xFFFFFFFFFFFFFFF8;
  if (v19 == 3)
    v21 = *(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF9;
  else
    v21 = v20 | (2 * v19 + 2);
  sub_1C50FE758(v24, (uint64_t)v25);
  sub_1C50FE3C4((uint64_t)&v26, a2, v21, (uint64_t)v24);
  v18 = v24[0];
  v24[0] = 0;
  if (v18)
    goto LABEL_17;
LABEL_18:
  if (v27 != v29)
    free(v27);
  v22 = v25[0];
  v25[0] = 0;
  if (v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8052888210);
  if (v30 != (__int32 *)v32)
    free(v30);
}

uint64_t *sub_1C50FD4F0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  int v4;
  int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t i;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t j;
  uint64_t v27;
  void *v28;
  unsigned __int8 *v29;
  void *v31;
  uint64_t v32;
  _BYTE v33[32];
  void *v34;
  uint64_t v35;
  _QWORD v36[5];

  v36[4] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1C47655E8(v2 + 408, *(_QWORD **)(v2 + 416));
    v3 = *(void **)(v2 + 376);
    if (v3 != (void *)(v2 + 392))
      free(v3);
    v4 = *(_DWORD *)(v2 + 360);
    if (v4)
    {
      v5 = (int *)(v2 + 360);
      v34 = v36;
      v35 = 0x400000000;
      v31 = v33;
      v32 = 0x400000000;
      v6 = *(_DWORD *)(v2 + 364);
      if (v6)
      {
        v6 = 0;
        v7 = 0;
        do
        {
          v8 = *(_QWORD *)(v2 + 208 + 8 * v7);
          if (v6 >= HIDWORD(v35))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v6 + 1, 8);
            v6 = v35;
          }
          *((_QWORD *)v34 + v6) = v8;
          v6 = v35 + 1;
          LODWORD(v35) = v35 + 1;
          ++v7;
        }
        while (v7 != *(_DWORD *)(v2 + 364));
        v4 = *v5;
      }
      v9 = v4 - 1;
      if (v4 != 1)
      {
        do
        {
          v10 = v35;
          if ((_DWORD)v35)
          {
            v11 = 0;
            v12 = v34;
            v13 = v32;
            do
            {
              v14 = 0;
              v15 = 8 * (v12[v11] & 0x3FLL) + 8;
              do
              {
                v16 = *(_QWORD *)((*((_QWORD *)v34 + v11) & 0xFFFFFFFFFFFFFFC0) + v14);
                if (v13 >= HIDWORD(v32))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, v13 + 1, 8);
                  v13 = v32;
                }
                *((_QWORD *)v31 + v13) = v16;
                v13 = v32 + 1;
                LODWORD(v32) = v32 + 1;
                v14 += 8;
              }
              while (v15 != v14);
              v12 = v34;
              v17 = (_QWORD *)(*((_QWORD *)v34 + v11) & 0xFFFFFFFFFFFFFFC0);
              v18 = *(_QWORD **)(v2 + 368);
              *v17 = *v18;
              *v18 = v17;
              ++v11;
            }
            while (v11 != v10);
          }
          LODWORD(v35) = 0;
          sub_1C50FDE40(&v34, (uint64_t)&v31);
          --v9;
        }
        while (v9);
        v6 = v35;
      }
      if (v6)
      {
        v19 = 0;
        v20 = v6;
        do
        {
          v21 = (_QWORD *)(*((_QWORD *)v34 + v19) & 0xFFFFFFFFFFFFFFC0);
          for (i = 17; i != 5; i -= 3)
          {
            v23 = v21[i];
            v21[i] = 0;
            if (v23)
              MEMORY[0x1CAA32F9C](v23, 0x1000C8052888210);
          }
          v24 = *(_QWORD **)(v2 + 368);
          *v21 = *v24;
          *v24 = v21;
          ++v19;
        }
        while (v19 != v20);
      }
      if (v31 != v33)
        free(v31);
      if (v34 != v36)
        free(v34);
      v25 = v2 + 264;
      *(_DWORD *)(v2 + 360) = 0;
      *(_OWORD *)(v2 + 328) = 0u;
      *(_OWORD *)(v2 + 344) = 0u;
      *(_OWORD *)(v2 + 296) = 0u;
      *(_OWORD *)(v2 + 312) = 0u;
      *(_OWORD *)(v2 + 264) = 0u;
      *(_OWORD *)(v2 + 280) = 0u;
      *(_OWORD *)(v2 + 232) = 0u;
      *(_OWORD *)(v2 + 248) = 0u;
      *(_OWORD *)(v2 + 200) = 0u;
      *(_OWORD *)(v2 + 216) = 0u;
      do
      {
        *(_QWORD *)v25 = 0;
        *(_BYTE *)(v25 + 8) = 0;
        *(_QWORD *)(v25 + 16) = 0;
        v25 += 24;
      }
      while ((int *)v25 != v5);
    }
    *(_DWORD *)(v2 + 364) = 0;
    for (j = 336; j != 240; j -= 24)
    {
      v27 = *(_QWORD *)(v2 + j);
      *(_QWORD *)(v2 + j) = 0;
      if (v27)
        MEMORY[0x1CAA32F9C](v27, 0x1000C8052888210);
    }
    v28 = *(void **)(v2 + 56);
    if (v28 != (void *)(v2 + 72))
      free(v28);
    v29 = *(unsigned __int8 **)(v2 + 32);
    if (v29)
      llvm::MetadataTracking::untrack(v2 + 32, v29);
    MEMORY[0x1CAA32FC0](v2, 0x10F2C40C1165021);
  }
  return a1;
}

uint64_t sub_1C50FD840(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  if (!a2)
  {
    v9 = 0;
    result = 0;
    goto LABEL_5;
  }
  v7 = a2 - 1;
  v8 = sub_1C50FD958(a3) & (a2 - 1);
  v9 = a1 + 48 * v8;
  if (sub_1C50FDDD0((uint64_t)a3, v9))
  {
    result = 1;
    goto LABEL_5;
  }
  v11 = 0;
  v12 = 1;
  while (1)
  {
    if (*(_QWORD *)v9)
      goto LABEL_8;
    if (!*(_BYTE *)(v9 + 24))
      break;
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      v13 = *(_QWORD *)(v9 + 32) == 0;
      goto LABEL_9;
    }
LABEL_8:
    v13 = 0;
LABEL_9:
    if (v13 && v11 == 0)
      v11 = v9;
    v14 = v12 + 1;
    v8 = (v8 + v12) & v7;
    v9 = a1 + 48 * v8;
    v15 = sub_1C50FDDD0((uint64_t)a3, v9);
    result = 1;
    v12 = v14;
    if (v15)
      goto LABEL_5;
  }
  if (*(_QWORD *)(v9 + 32))
    goto LABEL_8;
  result = 0;
  if (v11)
    v9 = v11;
LABEL_5:
  *a4 = v9;
  return result;
}

unint64_t sub_1C50FD958(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v5 = 0;
  if (*((_BYTE *)a1 + 24))
    v5 = *((unsigned __int16 *)a1 + 8) | (*((_DWORD *)a1 + 2) << 16);
  v1 = *a1;
  v3 = a1[4];
  v4 = v1;
  return sub_1C50FD9AC(&v4, &v5, &v3);
}

unint64_t sub_1C50FD9AC(_QWORD *a1, int *a2, uint64_t *a3)
{
  uint64_t *v3;
  int *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  int v9;
  int v10;
  unint64_t v11;
  _QWORD *v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a3;
  v4 = a2;
  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v6 = &unk_1ED7EA000;
  if ((v5 & 1) == 0)
  {
    v14 = a1;
    v9 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v6 = &unk_1ED7EA000;
    v4 = a2;
    v3 = a3;
    v10 = v9;
    a1 = v14;
    if (v10)
    {
      v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v11 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v11;
      __cxa_guard_release(&qword_1ED7EAC88);
      v6 = (_QWORD *)&unk_1ED7EA000;
      v3 = a3;
      a1 = v14;
      v4 = a2;
    }
  }
  v7 = *a1;
  v18 = v6[400];
  *(_QWORD *)&v15[0] = v7;
  return sub_1C50FDABC((char *)v15, 0, (_DWORD *)v15 + 2, (char *)v16, v4, v3);
}

unint64_t sub_1C50FDABC(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6)
{
  _QWORD *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_1C4ED49B0(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_1C50FDB34(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v13, v10, a4);
}

_QWORD *sub_1C50FDB34(_QWORD *a1, uint64_t *a2, _QWORD *__dst, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    v9 = *a2;
    if (*a2)
    {
      v10 = a1[9];
      v11 = a1[11];
      v12 = a1[1];
      v13 = a1[12];
      v14 = a1[13];
      v16 = a1[6];
      v15 = a1[7];
      v17 = a1[14];
      v18 = v17 ^ (0xB492B66FBE98F273 * __ROR8__(v10 + a1[8] + v11 + v12, 37));
      v19 = a1[5];
      v20 = v19 + v11 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v10 + v16, 42);
      v21 = __ROR8__(v14 + a1[10], 33);
      v22 = *a1 - 0x4B6D499041670D8DLL * v13;
      v23 = v14 + v22;
      v25 = a1[2];
      v24 = a1[3];
      v21 *= 0xB492B66FBE98F273;
      v26 = v21 + v17 + a1[4];
      v27 = v22 + v12 + v25;
      v28 = v19 + v16 + v26;
      a1[12] = __ROR8__(v23 + v24 + v18, 21) + v22 + __ROR8__(v27, 44);
      a1[13] = v28 + v15;
      a1[14] = __ROR8__(v28, 44) + v26 + __ROR8__(v25 + v20 + v26 + v15, 21);
      a1[10] = v18;
      a1[11] = v27 + v24;
      a1[8] = v21;
      a1[9] = v20;
      v29 = v9 + 64;
    }
    else
    {
      v30 = a1[15];
      v31 = __ROR8__(v30 ^ 0xB492B66FBE98F273, 49);
      v32 = v30 ^ (v30 >> 47);
      v33 = a1[1];
      v34 = v33 + v30 + v31;
      v35 = a1[6];
      v36 = a1[7];
      v37 = a1[5];
      v38 = v37 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v35 + v30 - 0x4B6D499041670D8DLL * v30, 42);
      v39 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v30 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v30 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v40 = 0x9DDFEA08EB382D69
          * (v30 ^ (((0x9DDFEA08EB382D69 * (v32 ^ (0xB492B66FBE98F273 * v30))) ^ v30) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v32 ^ (0xB492B66FBE98F273 * v30))));
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
      v42 = 0xB492B66FBE98F273 * __ROR8__(v32 - 0x622015F714C7D297 * (v39 ^ (v39 >> 47)), 33);
      v43 = *a1 - 0x6D8ED9027DD26057 * v30;
      v45 = a1[2];
      v44 = a1[3];
      v46 = v43 + v33 + v45;
      v47 = v41 ^ (0xB492B66FBE98F273 * __ROR8__(v34, 37));
      v48 = v42 + a1[4] + v41;
      a1[8] = v42;
      a1[9] = v38;
      a1[10] = v47;
      a1[11] = v46 + v44;
      a1[12] = __ROR8__(v46, 44) + v43 + __ROR8__(v43 + v32 + v44 + v47, 21);
      a1[13] = v37 + v35 + v48 + v36;
      a1[14] = __ROR8__(v37 + v35 + v48, 44) + v48 + __ROR8__(v38 + v45 + v36 + v48, 21);
      v29 = 64;
    }
    *a2 = v29;
    if ((unint64_t)a1 + 8 - v8 <= a4)
    {
      memcpy(a1, (char *)&__src + v8, 8 - v8);
      return (_QWORD *)((char *)a1 + 8 - v8);
    }
  }
  return a1;
}

BOOL sub_1C50FDDD0(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v3 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 24) == 0) == (v3 != 0))
      return 0;
  }
  else if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8) || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

_DWORD *sub_1C50FDE40(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;

  if (result != (_DWORD *)a2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    if (*(_DWORD **)result == result + 4 || *(_QWORD *)a2 == a2 + 16)
    {
      v7 = *(unsigned int *)(a2 + 8);
      if (result[3] < v7)
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v7, 8);
      v8 = v3[2];
      if (*(_DWORD *)(a2 + 12) < v8)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v8, 8);
        LODWORD(v8) = v3[2];
      }
      v9 = *(unsigned int *)(a2 + 8);
      if (v8 >= v9)
        v10 = v9;
      else
        v10 = v8;
      if ((_DWORD)v10)
      {
        v11 = *(uint64_t **)v3;
        v12 = *(uint64_t **)a2;
        v13 = v10;
        do
        {
          v14 = *v11;
          *v11++ = *v12;
          *v12++ = v14;
          --v13;
        }
        while (v13);
      }
      if (v9 >= v8)
      {
        if (v9 > v8)
        {
          v16 = v9 - v8;
          result = memcpy((void *)(*(_QWORD *)v3 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v10), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v10));
          v3[2] += v16;
          *(_DWORD *)(a2 + 8) = v10;
        }
      }
      else
      {
        v15 = v8 - v9;
        result = memcpy((void *)(*(_QWORD *)a2 + 8 * v9), (const void *)(*(_QWORD *)v3 + 8 * v10), *(_QWORD *)v3 + 8 * v8 - (*(_QWORD *)v3 + 8 * v10));
        *(_DWORD *)(a2 + 8) += v15;
        v3[2] = v10;
      }
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v4;
      v5 = result[2];
      result[2] = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v5;
      v6 = result[3];
      result[3] = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v6;
    }
  }
  return result;
}

uint64_t sub_1C50FDFA8(uint64_t a1, llvm::MachineOperand *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  _DWORD *v10;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (*(_DWORD *)this)
  {
    v4 = *(unsigned int *)(a1 + 64);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 0;
      while ((llvm::MachineOperand::isIdenticalTo(this, (const llvm::MachineOperand *)(*(_QWORD *)(a1 + 56) + v5)) & 1) == 0)
      {
        ++v6;
        v5 += 32;
        if (v4 == v6)
          goto LABEL_16;
      }
      return v6;
    }
LABEL_16:
    v12 = (_OWORD *)sub_1C47C0F60(a1 + 56, (unint64_t)this, 1);
    v13 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 32 * *(unsigned int *)(a1 + 64));
    v14 = v12[1];
    *v13 = *v12;
    v13[1] = v14;
    result = *(unsigned int *)(a1 + 64);
    v15 = (result + 1);
    *(_DWORD *)(a1 + 64) = v15;
    v16 = *(_QWORD *)(a1 + 56);
    v17 = v16 + 32 * v15;
    *(_QWORD *)(v17 - 24) = 0;
    v18 = *(_DWORD *)(v17 - 32);
    if (!(_BYTE)v18)
    {
      if ((v18 & 0x1000000) != 0)
      {
        *(_DWORD *)(v17 - 32) = v18 & 0xFBFFFFFF;
        v16 = *(_QWORD *)(a1 + 56);
        v15 = *(unsigned int *)(a1 + 64);
      }
      llvm::MachineOperand::setIsDef(v16 + 32 * v15 - 32, 0);
      return (*(_DWORD *)(a1 + 64) - 1);
    }
    return result;
  }
  v7 = *((_DWORD *)this + 1);
  if (!v7)
    return 0xFFFFFFFFLL;
  v8 = *(unsigned int *)(a1 + 64);
  if (!(_DWORD)v8)
    goto LABEL_16;
  result = 0;
  v10 = (_DWORD *)(*(_QWORD *)(a1 + 56) + 4);
  while (*(v10 - 1) || *v10 != v7 || ((*(v10 - 1) ^ *(_DWORD *)this) & 0xFFF00) != 0)
  {
    ++result;
    v10 += 8;
    if (v8 == result)
      goto LABEL_16;
  }
  return result;
}

uint64_t *sub_1C50FE0F0(uint64_t *a1, __int32 *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  char v7;
  char v8;
  char v9;
  uint64_t v12;
  __int32 v13;
  __int32 *v14;
  __int32 *v15;
  __int32 *v16;
  __int32 *v17;
  uint64_t v18;
  unsigned __int8 v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  llvm::MDNode *Impl;
  size_t v26;
  _DWORD *v27;
  uint64_t v28;
  llvm::DIExpression *v30[2];
  uint64_t v31;
  __int32 *__s;
  size_t __n;
  _QWORD v34[7];

  v34[6] = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  if (a4)
    v7 = 64;
  else
    v7 = 0;
  if (a5)
    v8 = 0x80;
  else
    v8 = 0;
  v9 = v8 | v7;
  *((_BYTE *)a1 + 8) = v9 & 0xC0 | a1[1] & 0x3F;
  a1[2] = a6;
  __s = (__int32 *)v34;
  __n = 0xC00000000;
  if (a3)
  {
    v12 = 4 * a3;
    do
    {
      v13 = *a2;
      v14 = &__s[__n];
      v15 = wmemchr(__s, *a2, __n);
      if (v15)
        v16 = v15;
      else
        v16 = v14;
      v17 = __s;
      v18 = __n;
      if (v16 == &__s[__n])
      {
        if (__n >= HIDWORD(__n))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s, (uint64_t)v34, __n + 1, 4);
          v17 = __s;
          v18 = __n;
        }
        v17[v18] = v13;
        LODWORD(__n) = __n + 1;
      }
      else
      {
        a1[2] = (uint64_t)llvm::DIExpression::replaceArg((llvm::DIExpression *)a1[2], (const llvm::DIExpression *)__n, ((unint64_t)((char *)v16 - (char *)__s) >> 2));
      }
      ++a2;
      v12 -= 4;
    }
    while (v12);
    v19 = __n;
    if (__n >= 0x40)
    {
      *((_BYTE *)a1 + 8) = a1[1] & 0xC0 | 1;
      v23 = *(_QWORD *)(a6 + 16);
      v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
      if ((v23 & 4) != 0)
        v24 = (_QWORD *)*v24;
      *(_OWORD *)v30 = xmmword_1C85FACE8;
      v31 = 159;
      Impl = llvm::DIExpression::getImpl(v24, v30, 3, 0, 1);
      a1[2] = (uint64_t)Impl;
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(a6 + 24), *(uint64_t **)(a6 + 32), (int8x16_t *)v30);
      if ((_BYTE)v31)
        a1[2] = (uint64_t)llvm::DIExpression::createFragmentExpression(Impl, (const llvm::DIExpression *)LODWORD(v30[1]), v30[0]);
      v26 = 4 * (a1[1] & 0x3F);
      v27 = (_DWORD *)operator new[]();
      bzero(v27, v26);
      v28 = *a1;
      *a1 = (uint64_t)v27;
      if (v28)
      {
        MEMORY[0x1CAA32F9C](v28, 0x1000C8052888210);
        v27 = (_DWORD *)*a1;
      }
      *v27 = -1;
    }
    else
    {
      *((_BYTE *)a1 + 8) = a1[1] & 0xC0 | __n;
      if (v19)
      {
        v20 = 4 * v19;
        v21 = (void *)operator new[]();
        bzero(v21, v20);
        v22 = *a1;
        *a1 = (uint64_t)v21;
        if (v22)
          MEMORY[0x1CAA32F9C](v22, 0x1000C8052888210);
        if ((_DWORD)__n)
          memmove((void *)*a1, __s, 4 * __n);
      }
    }
  }
  else
  {
    *((_BYTE *)a1 + 8) = v9;
  }
  if (__s != (__int32 *)v34)
    free(__s);
  return a1;
}

uint64_t sub_1C50FE3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51[3];
  uint64_t v52[3];
  uint64_t v53[4];
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 160))
  {
    sub_1C50FE758(v53, a4);
    sub_1C50FEF60((_DWORD *)a1, a2, a3, (uint64_t)v53);
    result = v53[0];
    v53[0] = 0;
    if (!result)
      return result;
    return MEMORY[0x1CAA32F9C](result, 0x1000C8052888210);
  }
  v10 = a1 + 8;
  v11 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16) - 4);
  v12 = *(unsigned int *)(v8 + 164);
  sub_1C50FE758(v52, a4);
  v13 = sub_1C50FF890(v8, v11, v12, a2, a3, (uint64_t)v52);
  result = v52[0];
  v52[0] = 0;
  if (result)
    result = MEMORY[0x1CAA32F9C](result, 0x1000C8052888210);
  if (v13 <= 4)
  {
    *(_DWORD *)(v8 + 164) = v13;
    *(_DWORD *)(*(_QWORD *)v10 + 8) = v13;
    return result;
  }
  v46 = a1 + 8;
  v48 = a2;
  v49 = a3;
  v14 = 0;
  v15 = 0;
  LODWORD(v16) = 0;
  v47 = a1;
  v17 = *(_DWORD *)(v8 + 164) + 1;
  v18 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16) - 4);
  v19 = v17 >> 1;
  v20 = v17 & 1;
  v21 = 2;
  do
  {
    if (v14 >= v20)
      v22 = v19;
    else
      v22 = v19 + 1;
    *((_DWORD *)&v53[3] + v14) = v22;
    v23 = v18 - v15;
    v15 += v22;
    if (v21 == 2 && v15 > v18)
    {
      v21 = v14;
      v16 = v23;
    }
    else
    {
      v16 = v16;
    }
    ++v14;
  }
  while (v14 != 2);
  v45 = v16;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  --*((_DWORD *)&v53[3] + v21);
  v54 = 0uLL;
  do
  {
    v50 = v24;
    v27 = sub_1C5100104(*(unint64_t **)(v8 + 168));
    v28 = v27;
    v29 = *((_DWORD *)&v53[3] + v25);
    if (v29)
    {
      v30 = v27 + 64;
      v31 = (_QWORD *)(v28 + 8);
      v32 = *((_DWORD *)&v53[3] + v25);
      v33 = v26;
      do
      {
        v34 = (_QWORD *)(v8 + 16 * v33);
        *(v31 - 1) = *v34;
        *v31 = v34[1];
        v31 += 2;
        v35 = sub_1C510002C(v30, v8 + 24 * v33++ + 64);
        v30 = v35 + 24;
        --v32;
      }
      while (v32);
    }
    v26 += v29;
    *((_QWORD *)&v54 + v25) = v28 & 0xFFFFFFFFFFFFFFC0 | (v29 - 1);
    v24 = 1;
    v25 = 1;
  }
  while ((v50 & 1) == 0);
  for (i = 136; i != 40; i -= 24)
  {
    v37 = *(_QWORD *)(v8 + i);
    *(_QWORD *)(v8 + i) = 0;
    if (v37)
      MEMORY[0x1CAA32F9C](v37, 0x1000C8052888210);
  }
  v38 = 0;
  *(_DWORD *)(v8 + 160) = 1;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_QWORD *)(v8 + 144) = 0;
  do
  {
    v39 = *((_QWORD *)&v54 + v38);
    v40 = v8 + 8 * v38;
    *(_QWORD *)(v40 + 80) = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFC0)
                                      + 16 * (*((_DWORD *)&v53[3] + v38) - 1)
                                      + 8);
    *(_QWORD *)(v40 + 8) = v39;
    ++v38;
  }
  while (v38 != 2);
  *(_QWORD *)v8 = *(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFC0);
  *(_DWORD *)(v8 + 164) = 2;
  v41 = *(_QWORD *)(v47 + 8);
  *(_QWORD *)v41 = v8 + 8;
  *(_DWORD *)(v41 + 8) = 2;
  *(_DWORD *)(v41 + 12) = v21;
  v42 = *(_QWORD *)(v47 + 8);
  v43 = v42 + 16;
  v44 = *(_QWORD *)(*(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 12));
  *(_QWORD *)&v54 = v44 & 0xFFFFFFFFFFFFFFC0;
  *((_QWORD *)&v54 + 1) = (v44 & 0x3F | (v45 << 32)) + 1;
  sub_1C5DF93CC(v46, v43, &v54);
  sub_1C50FE758(v51, a4);
  sub_1C50FEF60((_DWORD *)v47, v48, v49, (uint64_t)v51);
  result = v51[0];
  v51[0] = 0;
  if (result)
    return MEMORY[0x1CAA32F9C](result, 0x1000C8052888210);
  return result;
}

uint64_t *sub_1C50FE758(uint64_t *a1, uint64_t a2)
{
  char v3;
  char v4;
  char v5;
  uint64_t v7;
  uint64_t v8;

  *a1 = 0;
  v3 = *(_BYTE *)(a2 + 8);
  v4 = a1[1] & 0xC0 | v3 & 0x3F;
  *((_BYTE *)a1 + 8) = v4;
  v5 = *(_BYTE *)(a2 + 8) & 0x40;
  *((_BYTE *)a1 + 8) = v4 & 0xBF | v5;
  *((_BYTE *)a1 + 8) = *(_BYTE *)(a2 + 8) & 0x80 | v3 & 0x3F | v5;
  a1[2] = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(a2 + 8) & 0x3F) != 0)
  {
    v7 = operator new[]();
    v8 = *a1;
    *a1 = v7;
    if (v8)
      MEMORY[0x1CAA32F9C](v8, 0x1000C8052888210);
    if ((*(_BYTE *)(a2 + 8) & 0x3F) != 0)
      memmove((void *)*a1, *(const void **)a2, 4 * (*(_BYTE *)(a2 + 8) & 0x3F));
  }
  return a1;
}

uint64_t sub_1C50FE824(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  void *v42;
  _BOOL4 v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  void *v56;
  unsigned __int8 v57;
  uint64_t v58;
  void *__s2;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62[3];

  sub_1C50FE758(v62, a2);
  v4 = *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16);
  sub_1C510002C(*(_QWORD *)(v4 - 16) + 24 * *(unsigned int *)(v4 - 4) + 64, (uint64_t)v62);
  v5 = v62[0];
  v62[0] = 0;
  if (v5)
    MEMORY[0x1CAA32F9C](v5, 0x1000C8052888210);
  v6 = *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 16) + 16 * *(unsigned int *)(v6 - 4) + 8);
  sub_1C50FE758((uint64_t *)&__s2, a2);
  v8 = *(unsigned int *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = v9 + 16 * v8;
  v11 = *(_DWORD *)(v10 - 8);
  v12 = (*(_DWORD *)(v10 - 4) + 1);
  if (!*(_DWORD *)(*(_QWORD *)a1 + 160))
  {
    if (v12 >= v11)
      goto LABEL_21;
    goto LABEL_11;
  }
  if (v12 < v11)
  {
LABEL_11:
    v18 = *(_QWORD *)(v10 - 16);
    v19 = v18 + 24 * v12;
    v20 = *(unsigned __int8 *)(v19 + 72);
    if (v20 == v60 && *(_QWORD *)(v18 + 24 * v12 + 80) == v61)
    {
      v21 = __s2;
      if (memcmp(*(const void **)(v19 + 64), __s2, 4 * (v20 & 0x3F)))
        goto LABEL_57;
      v22 = *(_QWORD *)(v18 + 16 * v12);
LABEL_59:
      v26 = v22 == v7;
      goto LABEL_22;
    }
LABEL_21:
    v26 = 0;
LABEL_22:
    v21 = __s2;
    goto LABEL_23;
  }
  if ((_DWORD)v8 == 1)
    goto LABEL_21;
  v13 = v8 - 2;
  v14 = *(_DWORD *)(a1 + 16);
  while (1)
  {
    v15 = v13;
    if (!v13)
      break;
    v16 = *(_DWORD *)(v9 + 16 * v13 + 12);
    v17 = *(_DWORD *)(v9 + 16 * v13 + 8) - 1;
    --v14;
    --v13;
    if (v16 != v17)
      goto LABEL_16;
  }
  v16 = *(_DWORD *)(v9 + 12);
  v17 = *(_DWORD *)(v9 + 8) - 1;
  v14 = 1;
LABEL_16:
  if (v16 == v17)
    goto LABEL_21;
  v23 = *(_QWORD *)(*(_QWORD *)(v9 + 16 * v15) + 8 * (v16 + 1));
  if (v14 != (_DWORD)v8 - 1)
  {
    v54 = ~v14 + v8;
    do
    {
      v23 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFC0);
      --v54;
    }
    while (v54);
  }
  if (!v23)
    goto LABEL_21;
  v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFC0);
  v25 = *(unsigned __int8 *)((v23 & 0xFFFFFFFFFFFFFFC0) + 0x48);
  if (v25 != v60 || *(_QWORD *)((v23 & 0xFFFFFFFFFFFFFFC0) + 0x50) != v61)
    goto LABEL_21;
  v21 = __s2;
  if (!memcmp(*(const void **)((v23 & 0xFFFFFFFFFFFFFFC0) + 0x40), __s2, 4 * (v25 & 0x3F)))
  {
    v22 = *v24;
    goto LABEL_59;
  }
LABEL_57:
  v26 = 0;
LABEL_23:
  __s2 = 0;
  if (v21)
  {
    MEMORY[0x1CAA32F9C](v21, 0x1000C8052888210);
    v9 = *(_QWORD *)(a1 + 8);
    LODWORD(v8) = *(_DWORD *)(a1 + 16);
  }
  v27 = *(_QWORD *)(*(_QWORD *)(v9 + 16 * v8 - 16)
                  + 16 * *(unsigned int *)(v9 + 16 * v8 - 4));
  if (v26)
  {
    sub_1C5100CA4(a1);
    v28 = *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16);
    *(_QWORD *)(*(_QWORD *)(v28 - 16) + 16 * *(unsigned int *)(v28 - 4)) = v27;
  }
  result = (uint64_t)sub_1C50FE758((uint64_t *)&v56, a2);
  v30 = *(_QWORD *)(a1 + 8);
  v31 = *(unsigned int *)(a1 + 16);
  v32 = v30 + 16 * v31;
  v33 = *(_DWORD *)(v32 - 4);
  if (*(_DWORD *)(*(_QWORD *)a1 + 160))
  {
    if (!v33)
    {
      if ((_DWORD)v31 != 1)
      {
        v34 = v31 - 2;
        v35 = *(_DWORD *)(a1 + 16);
        while (1)
        {
          v36 = v34;
          if (!v34)
            break;
          v37 = *(_DWORD *)(v30 + 16 * v34 + 12);
          --v35;
          --v34;
          if (v37)
            goto LABEL_48;
        }
        v37 = *(_DWORD *)(v30 + 12);
        if (!v37)
          goto LABEL_40;
        v35 = 1;
LABEL_48:
        v48 = *(_QWORD *)(*(_QWORD *)(v30 + 16 * v36) + 8 * (v37 - 1));
        if (v35 != (_DWORD)v31 - 1)
        {
          v55 = ~v35 + v31;
          do
          {
            v48 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFFC0) + 8 * (v48 & 0x3F));
            --v55;
          }
          while (v55);
        }
        if (v48)
        {
          v49 = v48 & 0x3F;
          v50 = v48 & 0xFFFFFFFFFFFFFFC0;
          v51 = (v48 & 0xFFFFFFFFFFFFFFC0) + 24 * v49;
          v52 = *(unsigned __int8 *)(v51 + 72);
          if (v52 == v57 && *(_QWORD *)(v50 + 24 * v49 + 80) == v58)
          {
            v42 = v56;
            result = memcmp(*(const void **)(v51 + 64), v56, 4 * (v52 & 0x3F));
            if (!(_DWORD)result)
            {
              v53 = v50 + 16 * v49;
LABEL_55:
              v43 = *(_QWORD *)(v53 + 8) == v27;
              goto LABEL_41;
            }
            goto LABEL_38;
          }
        }
      }
      goto LABEL_40;
    }
  }
  else if (!v33)
  {
    goto LABEL_40;
  }
  v38 = *(_QWORD *)(v32 - 16);
  v39 = (v33 - 1);
  v40 = v38 + 24 * v39;
  v41 = *(unsigned __int8 *)(v40 + 72);
  if (v41 == v57 && *(_QWORD *)(v38 + 24 * v39 + 80) == v58)
  {
    v42 = v56;
    result = memcmp(*(const void **)(v40 + 64), v56, 4 * (v41 & 0x3F));
    if (!(_DWORD)result)
    {
      v53 = v38 + 16 * v39;
      goto LABEL_55;
    }
LABEL_38:
    v43 = 0;
    goto LABEL_42;
  }
LABEL_40:
  v43 = 0;
LABEL_41:
  v42 = v56;
LABEL_42:
  v56 = 0;
  if (v42)
    result = MEMORY[0x1CAA32F9C](v42, 0x1000C8052888210);
  if (v43)
  {
    v44 = sub_1C5100D5C((unsigned int *)a1);
    v45 = *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16);
    v46 = *(_QWORD *)(*(_QWORD *)(v45 - 16) + 16 * *(unsigned int *)(v45 - 4));
    result = sub_1C5100CA4((uint64_t)v44);
    v47 = *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16);
    *(_QWORD *)(*(_QWORD *)(v47 - 16) + 16 * *(unsigned int *)(v47 - 4)) = v46;
  }
  return result;
}

_DWORD *sub_1C50FEC80(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _DWORD *result;

  v4 = *a1;
  if (*(_DWORD *)(*a1 + 160))
  {
    v5 = *(unsigned int *)(v4 + 164);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = v4 + 80;
      while (((*(_QWORD *)(v7 + 8 * v6) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v7 + 8 * v6) & 0xFFFFFFFFFFFFFFF8)
                                                                             + 24)) <= (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8)
                                                                                                  + 24) | (a2 >> 1) & 3))
      {
        if (v5 == ++v6)
        {
          v6 = v5;
          break;
        }
      }
    }
    else
    {
      v6 = 0;
    }
    result = sub_1C50FED98(a1, v6);
    if (*((_DWORD *)a1 + 4))
    {
      if (*(_DWORD *)(a1[1] + 12) < *(_DWORD *)(a1[1] + 8))
        return sub_1C50FEE78(a1, a2);
    }
  }
  else
  {
    v8 = *(unsigned int *)(v4 + 164);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = (uint64_t *)(v4 + 8);
      while (1)
      {
        v11 = *v10;
        v10 += 2;
        if (((v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
          break;
        if (v8 == ++v9)
        {
          v9 = v8;
          return sub_1C50FED98(a1, v9);
        }
      }
    }
    else
    {
      v9 = 0;
    }
    return sub_1C50FED98(a1, v9);
  }
  return result;
}

_DWORD *sub_1C50FED98(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v4 = result + 2;
  v5 = *(_QWORD *)result;
  if (*(_DWORD *)(*(_QWORD *)result + 160))
  {
    v6 = v5 + 8;
    v7 = *(unsigned int *)(v5 + 164);
    result[4] = 0;
    v8 = result + 4;
    if (result[5])
    {
      v9 = 0;
    }
    else
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 2), (uint64_t)(result + 6), 1uLL, 16);
      v9 = v3[4];
    }
    v10 = v7 | (a2 << 32);
    v11 = (_QWORD *)(*v4 + 16 * v9);
    *v11 = v6;
  }
  else
  {
    v12 = *(unsigned int *)(v5 + 164);
    result[4] = 0;
    v8 = result + 4;
    if (result[5])
    {
      v13 = 0;
    }
    else
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 2), (uint64_t)(result + 6), 1uLL, 16);
      v13 = v3[4];
    }
    v10 = v12 | (a2 << 32);
    v11 = (_QWORD *)(*v4 + 16 * v13);
    *v11 = v5;
  }
  v11[1] = v10;
  ++*v8;
  return result;
}

_DWORD *sub_1C50FEE78(_DWORD *a1, uint64_t a2)
{
  int v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1[4];
  v4 = a1 + 2;
  v5 = *((_QWORD *)a1 + 1) + 16 * (v3 - 1);
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 160);
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 12));
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = (a2 >> 1) & 3;
  v10 = v6 - v3;
  if (v6 != v3)
  {
    do
    {
      v11 = v7 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v12) = -1;
      do
      {
        v12 = (v12 + 1);
        v13 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFC0) + 8 * v12 + 0x60);
      }
      while (((v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v8 + 24) | v9));
      sub_1C4A079DC(v4, v7, v12);
      v7 = *(_QWORD *)(v11 + 8 * v12);
      --v10;
    }
    while (v10);
  }
  LODWORD(v14) = -1;
  do
  {
    v14 = (v14 + 1);
    v15 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFC0) + 16 * v14 + 8);
  }
  while (((v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v8 + 24) | v9));
  return sub_1C4A079DC(v4, v7, v14);
}

uint64_t sub_1C50FEF60(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *v7;
  llvm::IntervalMapImpl::Path *v8;
  unsigned int v9;
  uint64_t v10;
  llvm::IntervalMapImpl::Path *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _BOOL4 v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t result;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  llvm::IntervalMapImpl::Path *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  _DWORD *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  llvm::IntervalMapImpl::Path *v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unsigned int v120;
  uint64_t v121[3];
  uint64_t v122[3];
  unsigned int v123[4];
  __int128 v124;
  __int128 v125;
  _DWORD v126[4];
  uint64_t v127;

  v7 = a1;
  v127 = *MEMORY[0x1E0C80C00];
  v8 = (llvm::IntervalMapImpl::Path *)(a1 + 2);
  v9 = v7[4];
  if (v9 && (v10 = *(_QWORD *)v8, *(_DWORD *)(*(_QWORD *)v8 + 12) < *(_DWORD *)(*(_QWORD *)v8 + 8)))
  {
    v11 = v8;
  }
  else
  {
    v12 = *(unsigned int *)(*(_QWORD *)v7 + 160);
    v11 = v8;
    llvm::IntervalMapImpl::Path::moveLeft(v8, *(_DWORD *)(*(_QWORD *)v7 + 160));
    v10 = *((_QWORD *)v7 + 1);
    ++*(_DWORD *)(v10 + 16 * v12 + 12);
    v9 = v7[4];
  }
  v13 = v9;
  v14 = v10 + 16 * v9;
  v15 = *(_DWORD *)(v14 - 4);
  if (v15)
    goto LABEL_21;
  v16 = *(uint64_t **)(v14 - 16);
  if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3) >= ((*v16 >> 1) & 3 | *(_DWORD *)((*v16 & 0xFFFFFFFFFFFFFFF8) + 24)))
    goto LABEL_20;
  v17 = v9 - 1;
  if (v9 == 1)
    goto LABEL_13;
  v18 = v9 - 2;
  v19 = v9;
  while (1)
  {
    v20 = v18;
    if (!v18)
      break;
    v21 = *(_DWORD *)(v10 + 16 * v18 + 12);
    --v19;
    --v18;
    if (v21)
      goto LABEL_15;
  }
  v21 = *(_DWORD *)(v10 + 12);
  if (!v21)
    goto LABEL_13;
  v19 = 1;
LABEL_15:
  v22 = *(_QWORD *)(*(_QWORD *)(v10 + 16 * v20) + 8 * (v21 - 1));
  if (v19 != v17)
  {
    v107 = ~v19 + v9;
    do
    {
      v22 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFC0) + 8 * (v22 & 0x3F));
      --v107;
    }
    while (v107);
  }
  if (!v22)
  {
LABEL_13:
    v15 = 0;
    **(_QWORD **)v7 = a2;
  }
  else
  {
    v23 = v22 & 0x3F;
    v24 = *(unsigned __int8 *)((v22 & 0xFFFFFFFFFFFFFFC0) + 24 * v23 + 0x48);
    if (v24 != *(unsigned __int8 *)(a4 + 8)
      || *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFC0) + 24 * v23 + 0x50) != *(_QWORD *)(a4 + 16)
      || (v119 = v22 & 0xFFFFFFFFFFFFFFC0,
          memcmp(*(const void **)((v22 & 0xFFFFFFFFFFFFFFC0) + 24 * (v22 & 0x3F) + 0x40), *(const void **)a4, 4 * (v24 & 0x3F))))
    {
LABEL_20:
      v15 = 0;
      goto LABEL_21;
    }
    v117 = (uint64_t)v7;
    v102 = v119 + 16 * v23;
    v104 = *(_QWORD *)(v102 + 8);
    v103 = (uint64_t *)(v102 + 8);
    if (v104 == a2)
    {
      llvm::IntervalMapImpl::Path::moveLeft(v11, v17);
      v105 = *v16;
      if ((*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3) <= ((*v16 >> 1) & 3 | *(_DWORD *)((*v16 & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v108 = *(unsigned __int8 *)(a4 + 8);
        if (v108 != *((unsigned __int8 *)v16 + 72)
          || *(_QWORD *)(a4 + 16) != v16[10]
          || memcmp(*(const void **)a4, (const void *)v16[8], 4 * (v108 & 0x3F))
          || v105 != a3)
        {
          v109 = *(_DWORD *)(v117 + 16);
          *v103 = a3;
          return sub_1C50FFAE4(v117, v109 - 1, a3);
        }
      }
      a2 = *(_QWORD *)(v119 + 16 * v23);
      v7 = (_DWORD *)v117;
      sub_1C50FFB34(v117, 0);
      v10 = *(_QWORD *)(v117 + 8);
      v13 = *(unsigned int *)(v117 + 16);
      v15 = *(_DWORD *)(v10 + 16 * v13 - 4);
    }
    else
    {
      v15 = 0;
      v7 = (_DWORD *)v117;
    }
  }
LABEL_21:
  v25 = v10 + 16 * v13;
  v26 = *(unsigned int *)(v25 - 8);
  v27 = (_DWORD *)(v25 - 4);
  v28 = v15 == v26;
  v29 = *(_QWORD *)(v25 - 16);
  sub_1C50FE758(v122, a4);
  v30 = sub_1C50FF890(v29, v27, v26, a2, a3, (uint64_t)v122);
  result = v122[0];
  v122[0] = 0;
  if (result)
    result = MEMORY[0x1CAA32F9C](result, 0x1000C8052888210);
  if (v30 >= 5)
  {
    v32 = v7[4];
    v124 = 0u;
    v125 = 0u;
    v33 = *((_QWORD *)v7 + 1);
    v34 = (v32 - 1);
    v35 = *(unsigned int *)(v33 + 16 * v34 + 12);
    if (v32 == 1)
    {
      v40 = 0;
      LODWORD(v41) = 0;
      LOBYTE(v37) = 1;
      v38 = v11;
    }
    else
    {
      v36 = v32 - 2;
      v37 = v32;
      v38 = v11;
      while (1)
      {
        v39 = v36;
        if (!v36)
          break;
        v40 = *(_DWORD *)(v33 + 16 * v36 + 12);
        --v37;
        --v36;
        if (v40)
          goto LABEL_31;
      }
      v40 = *(_DWORD *)(v33 + 12);
      v37 = 1;
      if (!v40)
      {
        LODWORD(v41) = 0;
        goto LABEL_35;
      }
LABEL_31:
      v41 = *(_QWORD *)(*(_QWORD *)(v33 + 16 * v39) + 8 * (v40 - 1));
      if (v37 != (_DWORD)v34)
      {
        v106 = ~v37 + v32;
        do
        {
          v41 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFFC0) + 8 * (v41 & 0x3F));
          --v106;
        }
        while (v106);
      }
      if (v41)
      {
        LOBYTE(v37) = 0;
        v40 = (v41 & 0x3F) + 1;
        v126[0] = v40;
        v35 = (v40 + v35);
        *(_QWORD *)&v124 = v41 & 0xFFFFFFFFFFFFFFC0;
        LODWORD(v41) = 1;
      }
      else
      {
        v40 = 0;
        LOBYTE(v37) = 1;
      }
    }
LABEL_35:
    v42 = v33 + 16 * v34;
    v43 = *(_DWORD *)(v42 + 8);
    v126[v41] = v43;
    v44 = v43 + v40;
    v45 = v41 + 1;
    *(_QWORD *)((unint64_t)&v124 | (8 * v41)) = *(_QWORD *)v42;
    if (v32 != 1)
    {
      v46 = v32 - 2;
      v47 = v32;
      while (1)
      {
        v48 = v46;
        if (!v46)
          break;
        v49 = *(_DWORD *)(v33 + 16 * v46 + 12);
        v50 = *(_DWORD *)(v33 + 16 * v46 + 8) - 1;
        --v47;
        --v46;
        if (v49 != v50)
          goto LABEL_41;
      }
      v49 = *(_DWORD *)(v33 + 12);
      v50 = *(_DWORD *)(v33 + 8) - 1;
      v47 = 1;
LABEL_41:
      if (v49 != v50)
      {
        v51 = *(_QWORD *)(*(_QWORD *)(v33 + 16 * v48) + 8 * (v49 + 1));
        if (v47 != (_DWORD)v34)
        {
          v101 = ~v47 + v32;
          do
          {
            v51 = *(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFC0);
            --v101;
          }
          while (v101);
        }
        if (v51)
        {
          v52 = (v51 & 0x3F) + 1;
          v126[v45] = v52;
          v44 += v52;
          *((_QWORD *)&v124 + v45) = v51 & 0xFFFFFFFFFFFFFFC0;
          v45 = v41 | 2;
        }
      }
    }
    v115 = a3;
    v116 = (uint64_t)v7;
    v113 = a2;
    v114 = a4;
    v112 = v34;
    if (v44 + 1 <= 4 * v45)
    {
      v111 = 0;
    }
    else
    {
      if (v45 == 1)
        v53 = 1;
      else
        v53 = v45 - 1;
      v126[v45] = v126[v53];
      *((_QWORD *)&v124 + v45) = *((_QWORD *)&v124 + v53);
      v126[v53] = 0;
      v54 = v45;
      v111 = v53;
      *((_QWORD *)&v124 + v53) = sub_1C5100104(*(unint64_t **)(*(_QWORD *)v7 + 168));
      v45 = v54 + 1;
    }
    v120 = v45;
    v55 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v45, v44, 4u, v126, v123, (unsigned int *)v35, 1);
    v56 = v120;
    v118 = v55;
    if (v120 != 1)
    {
      v110 = v38;
      v57 = v120;
      v58 = v120 - 1;
      do
      {
        v59 = v126[v58];
        v60 = v123[v58];
        if (v59 != v60)
        {
          v61 = v57;
          do
          {
            if (v61 == 1)
              break;
            v62 = v126[v61 - 2];
            v63 = sub_1C51009F8(*((_QWORD *)&v124 + v58), v59, *(_QWORD *)&v123[2 * v61], v62, v60 - v59);
            v126[v61 - 2] = v62 - v63;
            v59 = v126[v58] + v63;
            v126[v58] = v59;
            --v61;
          }
          while (v59 < v60);
        }
        --v57;
        --v58;
      }
      while (v58);
      v64 = 0;
      v65 = 1;
      v38 = v110;
      v56 = v120;
      do
      {
        v66 = v126[v64];
        v67 = v123[v64];
        if (v66 != v67)
        {
          v68 = v65;
          do
          {
            if (v56 == v68)
              break;
            v69 = v126[v68];
            v70 = sub_1C51009F8(*((_QWORD *)&v124 + v68), v69, *((_QWORD *)&v124 + v64), v66, v66 - v67);
            v126[v68] = v70 + v69;
            v66 = v126[v64] - v70;
            v56 = v120;
            v126[v64] = v66;
            ++v68;
          }
          while (v66 < v67);
        }
        ++v64;
        ++v65;
      }
      while (v64 != v120 - 1);
    }
    v71 = v112;
    if ((v37 & 1) == 0)
    {
      llvm::IntervalMapImpl::Path::moveLeft(v38, v112);
      v56 = v120;
    }
    v72 = 0;
    v7 = (_DWORD *)v116;
    v73 = v118;
    v74 = v56;
    while (1)
    {
      v75 = *((_QWORD *)&v124 + v72);
      v76 = v123[v72];
      v77 = v76 - 1;
      v78 = *(_QWORD *)(v75 + 16 * v77 + 8);
      if (v111 && v72 == v111)
      {
        v71 += sub_1C510017C((uint64_t *)v116, v71, v75 & 0xFFFFFFFFFFFFFFC0 | v77, v78);
      }
      else
      {
        v79 = *(_QWORD *)v38;
        *(_DWORD *)(*(_QWORD *)v38 + 16 * v71 + 8) = v76;
        if (v71)
          *(_QWORD *)(*(_QWORD *)(v79 + 16 * (v71 - 1)) + 8 * *(unsigned int *)(v79 + 16 * (v71 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v79 + 16 * (v71 - 1)) + 8 * *(unsigned int *)(v79 + 16 * (v71 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v77;
        sub_1C50FFAE4(v116, v71, v78);
      }
      if (v72 + 1 == v74)
        break;
      v80 = 0;
      ++v72;
      v81 = *(_QWORD *)v38;
      while (1)
      {
        v82 = v80;
        if (v71 + v80 == 1)
          break;
        v83 = v71 - 1 + v80;
        v85 = *(_DWORD *)(v81 + 16 * v83 + 8);
        v84 = *(_DWORD *)(v81 + 16 * v83 + 12);
        --v80;
        if (v84 != v85 - 1)
          goto LABEL_79;
      }
      v83 = 0;
      v85 = *(_DWORD *)(v81 + 8);
      v84 = *(_DWORD *)(v81 + 12);
LABEL_79:
      v86 = v84 + 1;
      *(_DWORD *)(v81 + 16 * v83 + 12) = v86;
      if (v86 != v85)
      {
        v87 = *(_QWORD *)(*(_QWORD *)(v81 + 16 * v83) + 8 * v86);
        if (v82)
        {
          do
          {
            v89 = *(_QWORD *)v38 + 16 * (v71 + v82);
            *(_QWORD *)v89 = v87 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v89 + 8) = (v87 & 0x3F) + 1;
            *(_DWORD *)(v89 + 12) = 0;
            v87 = *(_QWORD *)(v87 & 0xFFFFFFFFFFFFFFC0);
            v90 = __CFADD__(v82++, 1);
          }
          while (!v90);
          v81 = *(_QWORD *)v38;
        }
        v88 = (unint64_t *)(v81 + 16 * v71);
        *v88 = v87 & 0xFFFFFFFFFFFFFFC0;
        v88[1] = (v87 & 0x3F) + 1;
      }
      --v73;
    }
    if ((_DWORD)v72 != (_DWORD)v118)
    {
      do
      {
        llvm::IntervalMapImpl::Path::moveLeft(v38, v71);
        v90 = __CFADD__(v73++, 1);
      }
      while (!v90);
    }
    v91 = *(_QWORD *)(v116 + 8);
    *(_DWORD *)(v91 + 16 * v71 + 12) = HIDWORD(v118);
    v92 = (_DWORD *)(v91 + 16 * *(unsigned int *)(v116 + 16));
    v93 = *--v92;
    v94 = *(v92 - 1);
    v28 = v93 == v94;
    v95 = *(_QWORD *)(v92 - 3);
    sub_1C50FE758(v121, v114);
    v96 = v92;
    a3 = v115;
    v30 = sub_1C50FF890(v95, v96, v94, v113, v115, (uint64_t)v121);
    result = v121[0];
    v121[0] = 0;
    if (result)
      result = MEMORY[0x1CAA32F9C](result, 0x1000C8052888210);
  }
  v97 = v7[4];
  v98 = *((_QWORD *)v7 + 1);
  v99 = v97 - 1;
  *(_DWORD *)(v98 + 16 * (v97 - 1) + 8) = v30;
  if (v97 != 1)
  {
    v100 = v98 + 16 * (v97 - 2);
    *(_QWORD *)(*(_QWORD *)v100 + 8 * *(unsigned int *)(v100 + 12)) = *(_QWORD *)(*(_QWORD *)v100
                                                                                  + 8 * *(unsigned int *)(v100 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v30 - 1);
  }
  if (v28)
    return sub_1C50FFAE4((uint64_t)v7, v99, a3);
  return result;
}

uint64_t sub_1C50FF890(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const void *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  const void **v28;
  int v29;
  _QWORD *v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;

  v11 = *a2;
  if (!(_DWORD)v11)
  {
LABEL_15:
    if ((_DWORD)v11 == (_DWORD)a3)
    {
      v25 = (_QWORD *)(a1 + 16 * a3);
      *v25 = a4;
      v25[1] = a5;
      v26 = a1 + 24 * a3 + 64;
LABEL_27:
      sub_1C510002C(v26, a6);
      return (a3 + 1);
    }
    v27 = a1 + 24 * v11;
    v28 = (const void **)(v27 + 64);
    v29 = *(unsigned __int8 *)(v27 + 72);
    if (v29 == *(unsigned __int8 *)(a6 + 8)
      && *(_QWORD *)(a1 + 24 * v11 + 80) == *(_QWORD *)(a6 + 16)
      && !memcmp(*v28, *(const void **)a6, 4 * (v29 & 0x3F)))
    {
      v30 = (_QWORD *)(a1 + 16 * v11);
      if (*v30 == a5)
      {
        *v30 = a4;
        return a3;
      }
    }
    if ((_DWORD)a3 != 4)
    {
      v31 = a3;
      do
      {
        v32 = v31 - 1;
        *(_OWORD *)(a1 + 16 * v31) = *(_OWORD *)(a1 + 16 * (v31 - 1));
        sub_1C510002C(a1 + 64 + 24 * v31, a1 + 64 + 24 * (v31 - 1));
        v31 = v32;
      }
      while ((_DWORD)v11 != v32);
      v33 = (_QWORD *)(a1 + 16 * v11);
      *v33 = a4;
      v33[1] = a5;
      v26 = (uint64_t)v28;
      goto LABEL_27;
    }
    return 5;
  }
  v12 = (v11 - 1);
  v13 = a1 + 24 * v12;
  v14 = *(unsigned __int8 *)(v13 + 72);
  if (v14 != *(unsigned __int8 *)(a6 + 8)
    || (v15 = *(_QWORD *)(a1 + 24 * v12 + 80), v15 != *(_QWORD *)(a6 + 16))
    || (v17 = *(const void **)a6, memcmp(*(const void **)(v13 + 64), *(const void **)a6, 4 * (v14 & 0x3F)))
    || (v18 = a1 + 16 * v12, v20 = *(_QWORD *)(v18 + 8), v19 = (_QWORD *)(v18 + 8), v20 != a4))
  {
    if ((_DWORD)v11 == 4)
      return 5;
    goto LABEL_15;
  }
  *a2 = v12;
  if ((_DWORD)v11 != (_DWORD)a3
    && (v21 = a1 + 24 * v11, v22 = *(unsigned __int8 *)(v21 + 72), v22 == *(unsigned __int8 *)(a6 + 8))
    && *(_QWORD *)(a1 + 24 * v11 + 80) == v15
    && (v23 = v19, v24 = memcmp(*(const void **)(v21 + 64), v17, 4 * (v22 & 0x3F)), v19 = v23, !v24)
    && *(_QWORD *)(a1 + 16 * v11) == a5)
  {
    *v23 = *(_QWORD *)(a1 + 16 * v11 + 8);
    if ((_DWORD)v11 + 1 != (_DWORD)a3)
    {
      do
      {
        *(_OWORD *)(a1 + 16 * v11) = *(_OWORD *)(a1 + 16 * (v11 + 1));
        sub_1C510002C(a1 + 64 + 24 * v11, a1 + 64 + 24 * (v11 + 1));
        LODWORD(v11) = v11 + 1;
      }
      while ((_DWORD)a3 - 1 != (_DWORD)v11);
    }
    return (a3 - 1);
  }
  else
  {
    *v19 = a5;
  }
  return a3;
}

uint64_t sub_1C50FFAE4(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v3 = *(_QWORD *)(result + 8);
    v4 = 16 * a2;
    while (1)
    {
      v5 = v4 - 16;
      if (v4 == 16)
        break;
      v6 = v3 + v4;
      v7 = *(_QWORD *)(v6 - 16);
      v9 = v6 - 8;
      LODWORD(v6) = *(_DWORD *)(v6 - 8);
      v8 = *(unsigned int *)(v9 + 4);
      *(_QWORD *)(v7 + 8 * v8 + 96) = a3;
      LODWORD(v7) = v6 - 1;
      v4 = v5;
      if ((_DWORD)v8 != (_DWORD)v7)
        return result;
    }
    *(_QWORD *)(*(_QWORD *)v3 + 8 * *(unsigned int *)(v3 + 12) + 72) = a3;
  }
  return result;
}

uint64_t sub_1C50FFB34(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  uint64_t i;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v6 = *(unsigned int *)(result + 16);
  v7 = v4 + 16 * v6;
  v8 = *(_QWORD **)(v7 - 16);
  v9 = *(_DWORD *)(v7 - 8);
  v10 = v9 - 1;
  if (v9 == 1)
  {
    for (i = 17; i != 5; i -= 3)
    {
      v12 = v8[i];
      v8[i] = 0;
      if (v12)
        MEMORY[0x1CAA32F9C](v12, 0x1000C8052888210);
    }
    v13 = *(_QWORD **)(v5 + 168);
    *v8 = *v13;
    *v13 = v8;
    result = (uint64_t)sub_1C50FFDA4((_DWORD *)v3, *(_DWORD *)(v5 + 160));
    if (a2)
    {
      if (*(_DWORD *)(v5 + 160))
      {
        v14 = *(unsigned int *)(v3 + 16);
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD *)(v3 + 8);
          if (*(_DWORD *)(v15 + 12) < *(_DWORD *)(v15 + 8))
          {
            v16 = (int *)(v15 + 12);
            v17 = *(unsigned int *)(v3 + 16);
            while (1)
            {
              v18 = *v16;
              v16 += 4;
              if (v18)
                break;
              if (!--v17)
              {
                v19 = *(_QWORD **)(v15 + 16 * v14 - 16);
                goto LABEL_30;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v20 = *(_DWORD *)(v7 - 4);
    if (v20 + 1 != v9)
    {
      do
      {
        v21 = v20 + 1;
        *(_OWORD *)&v8[2 * v20] = *(_OWORD *)&v8[2 * v20 + 2];
        result = sub_1C510002C((uint64_t)&v8[3 * v20 + 8], (uint64_t)&v8[3 * v20 + 11]);
        v20 = v21;
      }
      while (v10 != v21);
      v4 = *(_QWORD *)(v3 + 8);
      v6 = *(unsigned int *)(v3 + 16);
      v9 = *(_DWORD *)(v4 + 16 * v6 - 8);
    }
    v22 = v4 + 16 * v6;
    v23 = *(unsigned int *)(v5 + 160);
    *(_DWORD *)(v4 + 16 * v23 + 8) = v9 - 1;
    if ((_DWORD)v23)
    {
      v24 = v4 + 16 * (v23 - 1);
      *(_QWORD *)(*(_QWORD *)v24 + 8 * *(unsigned int *)(v24 + 12)) = *(_QWORD *)(*(_QWORD *)v24
                                                                                  + 8 * *(unsigned int *)(v24 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v9 - 2);
    }
    if (*(_DWORD *)(v22 - 4) == v9 - 1)
    {
      result = sub_1C50FFAE4(v3, v23, v8[2 * (v9 - 2) + 1]);
      v25 = 0;
      v26 = *(unsigned int *)(v5 + 160);
      v27 = *(_QWORD *)(v3 + 8);
      v28 = v26 - 1;
      while (1)
      {
        v29 = v25;
        v30 = (v28 + v25);
        if (!(v28 + v25))
          break;
        v32 = *(_DWORD *)(v27 + 16 * v30 + 8);
        v31 = *(_DWORD *)(v27 + 16 * v30 + 12);
        --v25;
        if (v31 != v32 - 1)
          goto LABEL_32;
      }
      v30 = 0;
      v32 = *(_DWORD *)(v27 + 8);
      v31 = *(_DWORD *)(v27 + 12);
LABEL_32:
      v35 = v31 + 1;
      *(_DWORD *)(v27 + 16 * v30 + 12) = v35;
      if (v35 != v32)
      {
        v36 = *(_QWORD *)(*(_QWORD *)(v27 + 16 * v30) + 8 * v35);
        if (v29)
        {
          do
          {
            v38 = *(_QWORD *)(v3 + 8) + 16 * (v26 + v29);
            *(_QWORD *)v38 = v36 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v38 + 8) = (v36 & 0x3F) + 1;
            *(_DWORD *)(v38 + 12) = 0;
            v36 = *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFC0);
          }
          while (!__CFADD__(v29++, 1));
          v27 = *(_QWORD *)(v3 + 8);
        }
        v37 = (unint64_t *)(v27 + 16 * v26);
        *v37 = v36 & 0xFFFFFFFFFFFFFFC0;
        v37[1] = (v36 & 0x3F) + 1;
      }
    }
    else if (a2)
    {
      if ((_DWORD)v6)
      {
        v6 = v6;
        v33 = (int *)(v4 + 12);
        while (1)
        {
          v34 = *v33;
          v33 += 4;
          if (v34)
            break;
          if (!--v6)
            goto LABEL_29;
        }
      }
      else
      {
LABEL_29:
        v19 = *(_QWORD **)(v22 - 16);
LABEL_30:
        *(_QWORD *)v5 = *v19;
      }
    }
  }
  return result;
}

_DWORD *sub_1C50FFDA4(_DWORD *result, unsigned int a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *((_QWORD *)result + 1);
  v6 = a2 - 1;
  if (a2 == 1)
  {
    v14 = *(_DWORD *)(v4 + 12);
    v15 = *(_DWORD *)(v5 + 164);
    if (v14 + 1 != v15)
    {
      do
      {
        *(_QWORD *)(v5 + 8 + 8 * v14) = *(_QWORD *)(v5 + 8 + 8 * (v14 + 1));
        *(_QWORD *)(v5 + 80 + 8 * v14) = *(_QWORD *)(v5 + 80 + 8 * (v14 + 1));
        ++v14;
      }
      while (v15 - 1 != v14);
    }
    v16 = v15 - 1;
    *(_DWORD *)(v5 + 164) = v16;
    *(_DWORD *)(v4 + 8) = v16;
    if (!v16)
    {
      *(_DWORD *)(v5 + 160) = 0;
      *(_OWORD *)(v5 + 64) = 0u;
      v17 = v5 + 64;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_OWORD *)(v5 + 144) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      do
      {
        *(_QWORD *)v17 = 0;
        *(_BYTE *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = 0;
        v17 += 24;
      }
      while (v17 != v5 + 160);
      return sub_1C50FED98(result, 0);
    }
  }
  else
  {
    v7 = v4 + 16 * v6;
    v8 = *(_QWORD **)(v4 + 16 * (a2 - 1));
    v11 = *(_DWORD *)(v7 + 8);
    v10 = (_DWORD *)(v7 + 8);
    v9 = v11;
    v12 = v11 - 1;
    if (v11 == 1)
    {
      v13 = *(_QWORD **)(v5 + 168);
      *v8 = *v13;
      *v13 = v8;
      result = (_DWORD *)sub_1C50FFDA4(result, a2 - 1);
    }
    else
    {
      v18 = *(_DWORD *)(v4 + 16 * v6 + 12);
      if (v18 + 1 != v9)
      {
        v19 = *(_DWORD *)(v4 + 16 * v6 + 12);
        do
        {
          v8[v19] = v8[v19 + 1];
          v8[v19 + 12] = v8[v19 + 13];
          ++v19;
        }
        while (v12 != v19);
      }
      *v10 = v12;
      v20 = a2 - 2;
      v21 = (uint64_t *)(v4 + 16 * (a2 - 2));
      v22 = *((unsigned int *)v21 + 3);
      v23 = *v21;
      v24 = *(_QWORD *)(*v21 + 8 * v22);
      v25 = (v9 - 2);
      *(_QWORD *)(v23 + 8 * v22) = v24 & 0xFFFFFFFFFFFFFFC0 | v25;
      if (v18 == v12)
      {
        result = (_DWORD *)sub_1C50FFAE4((uint64_t)result, a2 - 1, v8[v25 + 12]);
        v26 = 0;
        v27 = *((_QWORD *)v3 + 1);
        while (1)
        {
          v28 = v26;
          v29 = v20 + v26;
          if (!(v20 + v26))
            break;
          v31 = *(_DWORD *)(v27 + 16 * v29 + 8);
          v30 = *(_DWORD *)(v27 + 16 * v29 + 12);
          --v26;
          if (v30 != v31 - 1)
            goto LABEL_19;
        }
        v29 = 0;
        v31 = *(_DWORD *)(v27 + 8);
        v30 = *(_DWORD *)(v27 + 12);
LABEL_19:
        v32 = v30 + 1;
        *(_DWORD *)(v27 + 16 * v29 + 12) = v32;
        if (v32 != v31)
        {
          v33 = *(_QWORD *)(*(_QWORD *)(v27 + 16 * v29) + 8 * v32);
          if (v28)
          {
            do
            {
              v38 = *((_QWORD *)v3 + 1) + 16 * (v6 + v28);
              *(_QWORD *)v38 = v33 & 0xFFFFFFFFFFFFFFC0;
              *(_DWORD *)(v38 + 8) = (v33 & 0x3F) + 1;
              *(_DWORD *)(v38 + 12) = 0;
              v33 = *(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFC0);
            }
            while (!__CFADD__(v28++, 1));
            v27 = *((_QWORD *)v3 + 1);
          }
          v34 = (unint64_t *)(v27 + 16 * v6);
          *v34 = v33 & 0xFFFFFFFFFFFFFFC0;
          v34[1] = (v33 & 0x3F) + 1;
        }
      }
    }
  }
  if (v3[4])
  {
    v35 = *((_QWORD *)v3 + 1);
    if (*(_DWORD *)(v35 + 12) < *(_DWORD *)(v35 + 8))
    {
      v36 = *(_QWORD *)(*(_QWORD *)(v35 + 16 * v6)
                      + 8 * *(unsigned int *)(v35 + 16 * v6 + 12));
      v37 = v35 + 16 * a2;
      *(_QWORD *)v37 = v36 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v37 + 8) = (v36 & 0x3F) + 1;
      *(_DWORD *)(*((_QWORD *)v3 + 1) + 16 * a2 + 12) = 0;
    }
  }
  return result;
}

uint64_t sub_1C510002C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  char v6;
  char v7;
  char v8;

  if (a1 != a2)
  {
    if ((*(_BYTE *)(a2 + 8) & 0x3F) != 0)
    {
      v4 = operator new[]();
      v5 = *(void **)a1;
      *(_QWORD *)a1 = v4;
      if (v5)
        MEMORY[0x1CAA32F9C](v5, 0x1000C8052888210);
      if ((*(_BYTE *)(a2 + 8) & 0x3F) != 0)
        memmove(*(void **)a1, *(const void **)a2, 4 * (*(_BYTE *)(a2 + 8) & 0x3F));
    }
    else
    {
      *(_QWORD *)a1 = 0;
    }
    v6 = *(_BYTE *)(a2 + 8);
    v7 = *(_BYTE *)(a1 + 8) & 0xC0 | v6 & 0x3F;
    *(_BYTE *)(a1 + 8) = v7;
    v8 = *(_BYTE *)(a2 + 8) & 0x40;
    *(_BYTE *)(a1 + 8) = v7 & 0xBF | v8;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8) & 0x80 | v6 & 0x3F | v8;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  return a1;
}

unint64_t sub_1C5100104(unint64_t *a1)
{
  unint64_t result;
  uint64_t v3;
  unint64_t v4;

  result = *a1;
  if (result)
    *a1 = *(_QWORD *)result;
  else
    result = sub_1C484358C((uint64_t)(a1 + 1), 192, 6);
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  v3 = 64;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  do
  {
    v4 = result + v3;
    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v3 += 24;
  }
  while (v4 + 24 != result + 160);
  return result;
}

BOOL sub_1C510017C(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t *v85;
  uint64_t v86;
  BOOL v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  unsigned int v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v98;
  int v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  llvm::IntervalMapImpl::Path *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109[4];
  __int128 v110;
  __int128 v111;
  _DWORD v112[4];
  uint64_t v113;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v7 = (uint64_t)a1;
  v113 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v106 = (llvm::IntervalMapImpl::Path *)(a1 + 1);
  v9 = a2 == 1;
  if (a2 == 1)
  {
    v10 = *(_DWORD *)(v8 + 164);
    if (v10 <= 8)
    {
      v11 = v8 + 8;
      v12 = *(_QWORD *)v106;
      v13 = *(unsigned int *)(*(_QWORD *)v106 + 12);
      if (v10 != (_DWORD)v13)
      {
        v14 = *(_DWORD *)(v8 + 164);
        do
        {
          *(_QWORD *)(v11 + 8 * v14) = *(_QWORD *)(v11 + 8 * (v14 - 1));
          *(_QWORD *)(v8 + 80 + 8 * v14) = *(_QWORD *)(v8 + 80 + 8 * (v14 - 1));
          --v14;
        }
        while ((_DWORD)v13 != v14);
      }
      v9 = 0;
      v15 = (_QWORD *)(v11 + 8 * v13);
      *v15 = a3;
      v15[9] = a4;
      *(_DWORD *)(v8 + 164) = v10 + 1;
      *(_DWORD *)(v12 + 8) = v10 + 1;
      v16 = *(_QWORD *)(*(_QWORD *)v12 + 8 * v13);
      *(_QWORD *)(v12 + 16) = v16 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v12 + 24) = (v16 & 0x3F) + 1;
      return v9;
    }
    v17 = *(unsigned int *)(*(_QWORD *)v106 + 12);
    v18 = v10 - 1;
    v19 = *(unint64_t **)(v8 + 168);
    v20 = *v19;
    if (*v19)
      *v19 = *(_QWORD *)v20;
    else
      v20 = sub_1C484358C((uint64_t)(v19 + 1), 192, 6);
    *(_OWORD *)(v20 + 160) = 0u;
    *(_OWORD *)(v20 + 176) = 0u;
    *(_OWORD *)(v20 + 128) = 0u;
    *(_OWORD *)(v20 + 144) = 0u;
    *(_OWORD *)(v20 + 96) = 0u;
    *(_OWORD *)(v20 + 112) = 0u;
    *(_OWORD *)(v20 + 64) = 0u;
    *(_OWORD *)(v20 + 80) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    v21 = (uint64_t *)(v8 + 80);
    v22 = (_QWORD *)v20;
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    do
    {
      *v22 = *(v21 - 9);
      v23 = *v21++;
      v22[12] = v23;
      ++v22;
      --v10;
    }
    while (v10);
    *(_QWORD *)(v8 + 80) = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFC0 | v18 & 0xFFFFFFFFFFFFFFC0) + 8 * v18 + 0x60);
    *(_QWORD *)(v8 + 8) = v20 & 0xFFFFFFFFFFFFFFC0 | v18;
    ++*(_DWORD *)(v8 + 160);
    *(_DWORD *)(v8 + 164) = 1;
    v24 = *(_QWORD **)v106;
    *v24 = v8 + 8;
    v24[1] = 1;
    v25 = *(_QWORD *)v106 + 16;
    v26 = *(_QWORD *)(**(_QWORD **)v106 + 8 * *(unsigned int *)(*(_QWORD *)v106 + 12));
    *(_QWORD *)&v110 = v26 & 0xFFFFFFFFFFFFFFC0;
    *((_QWORD *)&v110 + 1) = (v26 & 0x3F | (v17 << 32)) + 1;
    sub_1C5DF93CC((uint64_t)v106, v25, &v110);
    v6 = 2;
  }
  v27 = (v6 - 1);
  if (!*(_DWORD *)(v7 + 16)
    || (v28 = *(_QWORD *)v106, *(_DWORD *)(*(_QWORD *)v106 + 12) >= *(_DWORD *)(*(_QWORD *)v106 + 8)))
  {
    llvm::IntervalMapImpl::Path::moveLeft(v106, v6 - 1);
    v28 = *(_QWORD *)v106;
    ++*(_DWORD *)(*(_QWORD *)v106 + 16 * v27 + 12);
  }
  v29 = v28 + 16 * v27;
  v30 = *(_DWORD *)(v29 + 8);
  if (v30 == 12)
  {
    v110 = 0u;
    v111 = 0u;
    v31 = *(unsigned int *)(v29 + 12);
    v32 = v6 - 2;
    v33 = v6 - 2;
    v34 = v6;
    v103 = v4;
    v101 = v5;
    while (1)
    {
      v35 = v33;
      if (!v33)
        break;
      v36 = *(_DWORD *)(v28 + 16 * v33 + 12);
      --v34;
      --v33;
      if (v36)
        goto LABEL_23;
    }
    v36 = *(_DWORD *)(v28 + 12);
    v34 = 1;
    if (!v36)
    {
      LODWORD(v37) = 0;
      goto LABEL_27;
    }
LABEL_23:
    v37 = *(_QWORD *)(*(_QWORD *)(v28 + 16 * v35) + 8 * (v36 - 1));
    if (v34 != (_DWORD)v27)
    {
      v99 = ~v34 + v6;
      do
      {
        v37 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFFC0) + 8 * (v37 & 0x3F));
        --v99;
      }
      while (v99);
    }
    if (v37)
    {
      LOBYTE(v34) = 0;
      v36 = (v37 & 0x3F) + 1;
      v112[0] = v36;
      v31 = (v36 + v31);
      *(_QWORD *)&v110 = v37 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v37) = 1;
    }
    else
    {
      v36 = 0;
      LOBYTE(v34) = 1;
    }
LABEL_27:
    v112[v37] = 12;
    v38 = v36 + 12;
    v39 = (v37 + 1);
    *(_QWORD *)((unint64_t)&v110 | (8 * v37)) = *(_QWORD *)(v28 + 16 * v27);
    v40 = v6;
    while (1)
    {
      v41 = v32;
      if (!v32)
        break;
      v42 = *(_DWORD *)(v28 + 16 * v32 + 12);
      v43 = *(_DWORD *)(v28 + 16 * v32 + 8) - 1;
      --v40;
      --v32;
      if (v42 != v43)
        goto LABEL_32;
    }
    v42 = *(_DWORD *)(v28 + 12);
    v43 = *(_DWORD *)(v28 + 8) - 1;
    v40 = 1;
LABEL_32:
    if (v42 != v43)
    {
      v44 = *(_QWORD *)(*(_QWORD *)(v28 + 16 * v41) + 8 * (v42 + 1));
      if (v40 != (_DWORD)v27)
      {
        v98 = ~v40 + v6;
        do
        {
          v44 = *(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFC0);
          --v98;
        }
        while (v98);
      }
      if (v44)
      {
        v45 = (v44 & 0x3F) + 1;
        v112[v39] = v45;
        v38 += v45;
        *((_QWORD *)&v110 + v39) = v44 & 0xFFFFFFFFFFFFFFC0;
        v39 = v37 | 2;
      }
    }
    v105 = (v6 - 1);
    v102 = v7;
    if (v38 >= 12 * (int)v39)
    {
      if ((_DWORD)v39 == 1)
        v46 = 1;
      else
        v46 = (v39 - 1);
      v112[v39] = v112[v46];
      *((_QWORD *)&v110 + v39) = *((_QWORD *)&v110 + v46);
      v107 = v46;
      v112[v46] = 0;
      v47 = *(unint64_t **)(*(_QWORD *)v7 + 168);
      v48 = *v47;
      if (*v47)
      {
        *v47 = *(_QWORD *)v48;
      }
      else
      {
        v49 = v39;
        v48 = sub_1C484358C((uint64_t)(v47 + 1), 192, 6);
        LODWORD(v39) = v49;
      }
      *(_OWORD *)(v48 + 160) = 0u;
      *(_OWORD *)(v48 + 176) = 0u;
      *(_OWORD *)(v48 + 128) = 0u;
      *(_OWORD *)(v48 + 144) = 0u;
      *(_OWORD *)(v48 + 96) = 0u;
      *(_OWORD *)(v48 + 112) = 0u;
      *(_OWORD *)(v48 + 64) = 0u;
      *(_OWORD *)(v48 + 80) = 0u;
      *(_OWORD *)(v48 + 32) = 0u;
      *(_OWORD *)(v48 + 48) = 0u;
      v39 = (v39 + 1);
      *(_OWORD *)v48 = 0u;
      *(_OWORD *)(v48 + 16) = 0u;
      *((_QWORD *)&v110 + v107) = v48;
    }
    else
    {
      LODWORD(v107) = 0;
    }
    v108 = v39;
    v50 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v39, v38, 0xCu, v112, v109, (unsigned int *)v31, 1);
    v51 = v108;
    v52 = v50;
    v104 = v50;
    if (v108 != 1)
    {
      v100 = v34;
      v53 = v108;
      v54 = v108 - 1;
      do
      {
        v55 = v112[v54];
        v56 = v109[v54];
        if (v55 != v56)
        {
          v57 = v53;
          do
          {
            if (v57 == 1)
              break;
            v58 = v112[v57 - 2];
            v59 = sub_1C5100B94(*((_QWORD **)&v110 + v54), v55, *(_QWORD *)&v109[2 * v57], v58, v56 - v55);
            v112[v57 - 2] = v58 - v59;
            v55 = v112[v54] + v59;
            v112[v54] = v55;
            --v57;
          }
          while (v55 < v56);
        }
        --v53;
        --v54;
      }
      while (v54);
      v60 = 0;
      v61 = 1;
      LOBYTE(v34) = v100;
      v52 = v104;
      v51 = v108;
      do
      {
        v62 = v112[v60];
        v63 = v109[v60];
        if (v62 != v63)
        {
          v64 = v61;
          do
          {
            if (v51 == v64)
              break;
            v65 = v112[v64];
            v66 = sub_1C5100B94(*((_QWORD **)&v110 + v64), v65, *((_QWORD *)&v110 + v60), v62, v62 - v63);
            v51 = v108;
            v112[v64] = v66 + v65;
            v62 = v112[v60] - v66;
            v112[v60] = v62;
            ++v64;
          }
          while (v62 < v63);
        }
        ++v60;
        ++v61;
      }
      while (v60 != v108 - 1);
    }
    if ((v34 & 1) == 0)
    {
      llvm::IntervalMapImpl::Path::moveLeft(v106, v105);
      v51 = v108;
    }
    v67 = 0;
    v9 = 0;
    v68 = v52;
    v69 = v105;
    v70 = v51;
    v7 = v102;
    while (1)
    {
      v71 = *((_QWORD *)&v110 + v67);
      v72 = v109[v67];
      v73 = v72 - 1;
      v74 = *(_QWORD *)(v71 + 8 * v73 + 96);
      if ((_DWORD)v107 && v67 == v107)
      {
        v75 = sub_1C510017C(v102, v69, v71 & 0xFFFFFFFFFFFFFFC0 | v73, v74);
        v9 = v75;
        v69 = (v69 + v75);
      }
      else
      {
        v76 = *(_QWORD *)v106;
        *(_DWORD *)(*(_QWORD *)v106 + 16 * v69 + 8) = v72;
        if ((_DWORD)v69)
          *(_QWORD *)(*(_QWORD *)(v76 + 16 * (v69 - 1))
                    + 8 * *(unsigned int *)(v76 + 16 * (v69 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v76 + 16 * (v69 - 1)) + 8 * *(unsigned int *)(v76 + 16 * (v69 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v73;
        sub_1C50FFAE4(v102, v69, v74);
      }
      if (v67 + 1 == v70)
        break;
      v77 = 0;
      ++v67;
      v78 = *(_QWORD *)v106;
      while (1)
      {
        v79 = v77;
        if ((_DWORD)v69 + v77 == 1)
          break;
        v80 = (v69 - 1 + v77);
        v82 = *(_DWORD *)(v78 + 16 * v80 + 8);
        v81 = *(_DWORD *)(v78 + 16 * v80 + 12);
        --v77;
        if (v81 != v82 - 1)
          goto LABEL_73;
      }
      v80 = 0;
      v82 = *(_DWORD *)(v78 + 8);
      v81 = *(_DWORD *)(v78 + 12);
LABEL_73:
      v83 = v81 + 1;
      *(_DWORD *)(v78 + 16 * v80 + 12) = v83;
      if (v83 != v82)
      {
        v84 = *(_QWORD *)(*(_QWORD *)(v78 + 16 * v80) + 8 * v83);
        if (v79)
        {
          do
          {
            v86 = *(_QWORD *)v106 + 16 * (v69 + v79);
            *(_QWORD *)v86 = v84 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v86 + 8) = (v84 & 0x3F) + 1;
            *(_DWORD *)(v86 + 12) = 0;
            v84 = *(_QWORD *)(v84 & 0xFFFFFFFFFFFFFFC0);
            v87 = __CFADD__(v79++, 1);
          }
          while (!v87);
          v78 = *(_QWORD *)v106;
        }
        v85 = (unint64_t *)(v78 + 16 * v69);
        *v85 = v84 & 0xFFFFFFFFFFFFFFC0;
        v85[1] = (v84 & 0x3F) + 1;
      }
      --v68;
    }
    if ((_DWORD)v67 != (_DWORD)v104)
    {
      do
      {
        llvm::IntervalMapImpl::Path::moveLeft(v106, v69);
        v87 = __CFADD__(v68++, 1);
      }
      while (!v87);
    }
    v28 = *(_QWORD *)v106;
    *(_DWORD *)(*(_QWORD *)v106 + 16 * v69 + 12) = HIDWORD(v104);
    v27 = v105 + v9;
    v30 = *(_DWORD *)(v28 + 16 * v27 + 8);
    v4 = v103;
    v5 = v101;
  }
  v88 = (uint64_t *)(v28 + 16 * v27);
  v89 = *v88;
  v90 = *((unsigned int *)v88 + 3);
  v91 = v88 + 1;
  if (v30 != (_DWORD)v90)
  {
    v92 = v30;
    do
    {
      *(_QWORD *)(v89 + 8 * v92) = *(_QWORD *)(v89 + 8 * (v92 - 1));
      *(_QWORD *)(v89 + 96 + 8 * v92) = *(_QWORD *)(v89 + 96 + 8 * (v92 - 1));
      --v92;
    }
    while ((_DWORD)v90 != v92);
  }
  v93 = (_QWORD *)(v89 + 8 * v90);
  *v93 = v5;
  v93[12] = v4;
  *v91 = v30 + 1;
  if ((_DWORD)v27)
  {
    v94 = v28 + 16 * (v27 - 1);
    *(_QWORD *)(*(_QWORD *)v94 + 8 * *(unsigned int *)(v94 + 12)) = *(_QWORD *)(*(_QWORD *)v94
                                                                                + 8 * *(unsigned int *)(v94 + 12)) & 0xFFFFFFFFFFFFFFC0 | v30;
  }
  if (v30 == (_DWORD)v90)
  {
    sub_1C50FFAE4(v7, v27, v4);
    v28 = *(_QWORD *)(v7 + 8);
    v89 = *(_QWORD *)(v28 + 16 * v27);
  }
  v95 = *(_QWORD *)(v89 + 8 * *(unsigned int *)(v28 + 16 * v27 + 12));
  v96 = v28 + 16 * (v27 + 1);
  *(_QWORD *)v96 = v95 & 0xFFFFFFFFFFFFFFC0;
  *(_DWORD *)(v96 + 8) = (v95 & 0x3F) + 1;
  return v9;
}

uint64_t sub_1C51009F8(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5)
{
  unsigned int v5;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  unsigned int v31;
  uint64_t v32;

  v5 = a4;
  v7 = a2;
  if (a5 < 1)
  {
    v21 = 4 - a4;
    if (-a5 < a2)
      v22 = -a5;
    else
      v22 = a2;
    if (v21 >= v22)
      v23 = v22;
    else
      v23 = v21;
    if ((_DWORD)v23)
    {
      v24 = a1 + 64;
      v25 = (uint64_t *)(a1 + 8);
      v26 = v23;
      do
      {
        v27 = (_QWORD *)(a3 + 16 * v5);
        *v27 = *(v25 - 1);
        v28 = *v25;
        v25 += 2;
        v27[1] = v28;
        sub_1C510002C(a3 + 24 * v5++ + 64, v24);
        v24 += 24;
        --v26;
      }
      while (v26);
    }
    if ((_DWORD)v23 != v7)
    {
      v29 = a1 + 64;
      v30 = (_OWORD *)a1;
      v31 = v23;
      do
      {
        *v30++ = *(_OWORD *)(a1 + 16 * v31);
        v32 = sub_1C510002C(v29, a1 + 24 * v31++ + 64);
        v29 = v32 + 24;
      }
      while (v7 != v31);
    }
    return -(int)v23;
  }
  else
  {
    v9 = 4 - a2;
    if (a4 >= a5)
      v10 = a5;
    else
      v10 = a4;
    if (v9 >= v10)
      v11 = v10;
    else
      v11 = v9;
    if (a2)
    {
      v12 = a1 + 24 * (a2 - 1) + 64;
      v13 = (__int128 *)(a1 + 16 * (a2 - 1));
      v14 = v11 - 1;
      do
      {
        v15 = *v13--;
        *(_OWORD *)(a1 + 16 * (v14 + v7)) = v15;
        sub_1C510002C(a1 + 24 * (v14 + v7) + 64, v12);
        v12 -= 24;
        --v7;
      }
      while (v7);
    }
    if ((_DWORD)v11)
    {
      v16 = a1 + 64;
      v17 = (_QWORD *)(a1 + 8);
      v18 = -(int)v11;
      do
      {
        v19 = (_QWORD *)(a3 + 16 * (v5 + v18));
        *(v17 - 1) = *v19;
        *v17 = v19[1];
        v17 += 2;
        v16 = sub_1C510002C(v16, a3 + 24 * (v5 + v18) + 64) + 24;
      }
      while (!__CFADD__(v18++, 1));
    }
  }
  return v11;
}

uint64_t sub_1C5100B94(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;

  if (a5 < 1)
  {
    v12 = 12 - a4;
    if (-a5 < a2)
      LODWORD(v13) = -a5;
    else
      LODWORD(v13) = a2;
    if (v12 >= v13)
      v13 = v13;
    else
      v13 = v12;
    if ((_DWORD)v13)
    {
      v14 = a1;
      v15 = v13;
      do
      {
        v16 = (_QWORD *)(a3 + 8 * a4);
        *v16 = *v14;
        v16[12] = v14[12];
        ++a4;
        ++v14;
        --v15;
      }
      while (v15);
    }
    if ((_DWORD)v13 != a2)
    {
      v17 = a1;
      v18 = v13;
      do
      {
        v19 = &a1[v18];
        *v17 = *v19;
        v17[12] = v19[12];
        ++v18;
        ++v17;
      }
      while (a2 != v18);
    }
    return -(int)v13;
  }
  else
  {
    LODWORD(v5) = 12 - a2;
    if (a4 >= a5)
      v6 = a5;
    else
      v6 = a4;
    if (v5 >= v6)
      v5 = v6;
    else
      v5 = v5;
    if (a2)
    {
      v7 = &a1[a2 - 1];
      do
      {
        v8 = &a1[(_DWORD)v5 - 1 + a2];
        *v8 = *v7;
        v8[12] = v7[12];
        --v7;
        --a2;
      }
      while (a2);
    }
    if ((_DWORD)v5)
    {
      v9 = -(int)v5;
      do
      {
        v10 = (_QWORD *)(a3 + 8 * (a4 + v9));
        *a1 = *v10;
        a1[12] = v10[12];
        ++a1;
      }
      while (!__CFADD__(v9++, 1));
    }
  }
  return v5;
}

uint64_t sub_1C5100CA4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  v1 = result;
  v2 = *(_QWORD *)result;
  if (*(_DWORD *)(*(_QWORD *)result + 160))
    return sub_1C50FFB34(result, 1);
  v3 = *(_QWORD *)(result + 8);
  v4 = *(_DWORD *)(v3 + 16 * *(unsigned int *)(result + 16) - 4);
  v5 = *(_DWORD *)(v2 + 164);
  if (v4 + 1 != v5)
  {
    v6 = v5 - 1;
    do
    {
      v7 = v4 + 1;
      *(_OWORD *)(v2 + 16 * v4) = *(_OWORD *)(v2 + 16 * (v4 + 1));
      result = sub_1C510002C(v2 + 64 + 24 * v4, v2 + 64 + 24 * (v4 + 1));
      v4 = v7;
    }
    while (v6 != v7);
    v5 = *(_DWORD *)(v2 + 164);
    v3 = *(_QWORD *)(v1 + 8);
  }
  v8 = v5 - 1;
  *(_DWORD *)(v2 + 164) = v8;
  *(_DWORD *)(v3 + 8) = v8;
  return result;
}

unsigned int *sub_1C5100D5C(unsigned int *a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v4 = *((_QWORD *)a1 + 1);
  v2 = a1 + 2;
  v3 = v4;
  v5 = v2[2];
  v6 = v4 + 16 * v5;
  v7 = *(_DWORD *)(v6 - 4);
  if (!v7)
  {
    v8 = *(_DWORD *)(*(_QWORD *)a1 + 160);
LABEL_7:
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)v2, v8);
    return a1;
  }
  if (!(_DWORD)v5 || *(_DWORD *)(v3 + 12) >= *(_DWORD *)(v3 + 8))
  {
    v8 = *(_DWORD *)(*(_QWORD *)a1 + 160);
    if (v8)
      goto LABEL_7;
  }
  *(_DWORD *)(v6 - 4) = v7 - 1;
  return a1;
}

char *sub_1C5100DC4(char *result, unint64_t a2, _OWORD *a3)
{
  _OWORD **v4;
  _DWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v16;
  __int128 v17;

  v4 = (_OWORD **)result;
  if (*((unsigned int *)result + 3) >= a2)
  {
    v5 = result + 8;
    v8 = *((unsigned int *)result + 2);
    if (v8 >= a2)
      v9 = a2;
    else
      v9 = *((unsigned int *)result + 2);
    if (v9)
    {
      v10 = *(_OWORD **)result;
      do
      {
        v11 = a3[1];
        *v10 = *a3;
        v10[1] = v11;
        v10 += 2;
        --v9;
      }
      while (v9);
      v8 = *v5;
    }
    v12 = v8 - a2;
    if (v8 < a2)
    {
      v13 = (_OWORD *)(*(_QWORD *)result + 32 * v8);
      do
      {
        v14 = a3[1];
        *v13 = *a3;
        v13[1] = v14;
        v13 += 2;
      }
      while (!__CFADD__(v12++, 1));
    }
  }
  else
  {
    v16 = *a3;
    v17 = a3[1];
    *((_DWORD *)result + 2) = 0;
    v5 = result + 8;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), a2, 32);
    v6 = *v4;
    v7 = a2;
    do
    {
      *v6 = v16;
      v6[1] = v17;
      v6 += 2;
      --v7;
    }
    while (v7);
  }
  *v5 = a2;
  return result;
}

uint64_t *sub_1C5100E98(uint64_t *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(unsigned __int8 **)(v2 + 8);
    if (v3)
      llvm::MetadataTracking::untrack(v2 + 8, v3);
    MEMORY[0x1CAA32FC0](v2, 0x1060C4078230D8ELL);
  }
  return a1;
}

_DWORD *sub_1C5100EEC(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v3 = (_DWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0x400000000;
  result = sub_1C50FED98((_DWORD *)a1, 0);
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 160);
  if (v5)
  {
    while (1)
    {
      v6 = *(_DWORD *)(a1 + 16) - 1;
      if (v6 >= v5)
        break;
      v7 = *(_QWORD *)(a1 + 8) + 16 * v6;
      result = sub_1C4A079DC(v3, *(_QWORD *)(*(_QWORD *)v7 + 8 * *(unsigned int *)(v7 + 12)), 0);
    }
  }
  return result;
}

uint64_t *sub_1C5100F74(uint64_t a1, char *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t *result;
  unint64_t v8;
  char *v9;
  _BOOL4 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(char **)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = &v5[32 * v4];
    v11 = v5 <= a2 && v9 > a2;
    if (v11)
      v12 = (a2 - v5) >> 5;
    else
      v12 = -1;
    v23 = 0;
    v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v8, 32, &v23);
    v13 = *(char **)a1;
    v14 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v14)
    {
      v15 = (uint64_t *)(v5 + 8);
      v16 = 32 * v14;
      v17 = (uint64_t)(v13 + 8);
      do
      {
        *(v15 - 1) = *(_QWORD *)(v17 - 8);
        sub_1C50FE758(v15, v17);
        v15 += 4;
        v17 += 32;
        v16 -= 32;
      }
      while (v16);
      v13 = *(char **)a1;
      v18 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v18)
      {
        v19 = v13 - 24;
        v20 = 32 * v18;
        do
        {
          v21 = *(_QWORD *)&v19[v20];
          *(_QWORD *)&v19[v20] = 0;
          if (v21)
            MEMORY[0x1CAA32F9C](v21, 0x1000C8052888210);
          v20 -= 32;
        }
        while (v20);
        v13 = *(char **)a1;
      }
    }
    v22 = v23;
    if (v13 != (char *)(a1 + 16))
      free(v13);
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 12) = v22;
    if (v11)
      a2 = &v5[32 * v12];
    v4 = *(unsigned int *)(a1 + 8);
  }
  v6 = &v5[32 * v4];
  *(_QWORD *)v6 = *(_QWORD *)a2;
  result = sub_1C50FE758((uint64_t *)v6 + 1, (uint64_t)(a2 + 8));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C51010D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(result + 8);
  v2 = v1 + 16 * *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(v2 - 4) + 1;
  *(_DWORD *)(v2 - 4) = v3;
  if (v3 == *(_DWORD *)(v1 + 16 * *(unsigned int *)(result + 16) - 8))
  {
    v4 = *(unsigned int *)(*(_QWORD *)result + 160);
    if ((_DWORD)v4)
    {
      v5 = 1;
      v6 = v4 + 1;
      v7 = (_DWORD *)(v1 + 16 * v4 - 8);
      while (1)
      {
        v8 = v7;
        if (v6 == 2)
          break;
        v10 = *v7;
        v9 = v7[1];
        v11 = *v7 - 1;
        --v6;
        v7 -= 4;
        if (v9 != v11)
        {
          v5 = v6;
          goto LABEL_8;
        }
      }
      v10 = *(_DWORD *)(v1 + 8);
      v9 = *(_DWORD *)(v1 + 12);
LABEL_8:
      v12 = v9 + 1;
      v8[1] = v12;
      if (v12 != v10)
      {
        v13 = *(_QWORD *)(*((_QWORD *)v8 - 1) + 8 * v12);
        if ((_DWORD)v4 != v5)
        {
          do
          {
            v15 = *(_QWORD *)(result + 8) + 16 * v5;
            *(_QWORD *)v15 = v13 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v15 + 8) = (v13 & 0x3F) + 1;
            *(_DWORD *)(v15 + 12) = 0;
            ++v5;
            v13 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFC0);
          }
          while ((_DWORD)v4 != v5);
          v1 = *(_QWORD *)(result + 8);
        }
        v14 = (unint64_t *)(v1 + 16 * v4);
        *v14 = v13 & 0xFFFFFFFFFFFFFFC0;
        v14[1] = (v13 & 0x3F) + 1;
      }
    }
  }
  return result;
}

uint64_t sub_1C51011BC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(unsigned int *)(result + 16);
  *(_QWORD *)(*(_QWORD *)(v2 + 16 * v3 - 16) + 16 * *(unsigned int *)(v2 + 16 * v3 - 4) + 8) = a2;
  if (*(_DWORD *)(v2 + 16 * (v3 - 1) + 12) == *(_DWORD *)(v2 + 16 * (v3 - 1) + 8) - 1)
    return sub_1C50FFAE4(result, (int)v3 - 1, a2);
  return result;
}

_DWORD *sub_1C51011FC(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = result[4];
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *((_QWORD *)result + 1);
    if (*(_DWORD *)(v4 + 12) < *(_DWORD *)(v4 + 8))
    {
      v6 = *(_QWORD *)result;
      v7 = v4 + 16 * v2;
      if (!*(_DWORD *)(*(_QWORD *)result + 160))
      {
        v14 = *(_DWORD *)(v7 - 4);
        v15 = *(_DWORD *)(v6 + 164);
        if (v14 != v15)
        {
          while (1)
          {
            v16 = *(_QWORD *)(v6 + 16 * v14 + 8);
            if (((v16 >> 1) & 3 | *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
              break;
            if (v15 == ++v14)
            {
              v14 = *(_DWORD *)(v6 + 164);
              goto LABEL_12;
            }
          }
        }
        goto LABEL_12;
      }
      v8 = *(_QWORD *)(v7 - 16);
      v9 = *(_QWORD *)(v8 + 16 * (*(_DWORD *)(v7 - 8) - 1) + 8);
      v10 = (v9 >> 1) & 3 | *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24);
      v11 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
      if (v10 > v11)
      {
        v12 = *(_DWORD *)(v7 - 4);
        do
          v13 = *(_QWORD *)(v8 + 16 * v12++ + 8);
        while (((v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v11);
        v14 = v12 - 1;
LABEL_12:
        *(_DWORD *)(v7 - 4) = v14;
        return result;
      }
      result[4] = v2 - 1;
      v17 = v2 - 2;
      if ((_DWORD)v2 == 2)
      {
        v30 = *(unsigned int *)(v4 + 12);
      }
      else
      {
        v18 = (v2 - 3);
        if ((_DWORD)v18)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v4 + 16 * v18)
                          + 8 * *(unsigned int *)(v4 + 16 * v18 + 12)
                          + 96);
          if (((v19 >> 1) & 3 | *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24)) > v11)
          {
LABEL_20:
            v24 = (uint64_t *)(v4 + 16 * v17);
            v25 = *v24;
            v28 = *((_DWORD *)v24 + 3);
            v26 = (_DWORD *)v24 + 3;
            v27 = v28;
            do
              v29 = *(_QWORD *)(v25 + 8 * v27++ + 96);
            while (((v29 >> 1) & 3 | *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v11);
            *v26 = v27 - 1;
            return sub_1C50FEE78(v3, a2);
          }
          v20 = 16 * v18;
          while (1)
          {
            result[4] = v17;
            v21 = v20 - 16;
            if (v20 == 16)
              break;
            v22 = *(_QWORD *)(*(_QWORD *)(v4 + v20 - 16) + 8 * *(unsigned int *)(v4 + v20 - 4) + 96);
            v23 = (v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24);
            --v17;
            v20 = v21;
            if (v23 > v11)
              goto LABEL_20;
          }
        }
        v30 = *(unsigned int *)(v4 + 12);
        if (((*(_QWORD *)(v6 + 8 * v30 + 80) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v6 + 8 * v30 + 80) & 0xFFFFFFFFFFFFFFF8)
                                                                                  + 24)) > v11)
        {
          v31 = *(_DWORD *)(v4 + 28);
          do
            v32 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v31++ + 96);
          while (((v32 >> 1) & 3 | *(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v11);
          *(_DWORD *)(v4 + 28) = v31 - 1;
          return sub_1C50FEE78(v3, a2);
        }
      }
      v33 = *(unsigned int *)(v6 + 164);
      if ((_DWORD)v30 != (_DWORD)v33)
      {
        v34 = v6 + 8;
        while (1)
        {
          v35 = *(_QWORD *)(v34 + 8 * v30 + 72);
          if (((v35 >> 1) & 3 | *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24)) > v11)
            break;
          v30 = (v30 + 1);
          if ((_DWORD)v33 == (_DWORD)v30)
          {
            v30 = v33;
            break;
          }
        }
      }
      result = sub_1C50FED98(result, v30);
      if (v3[4] && *(_DWORD *)(*((_QWORD *)v3 + 1) + 12) < *(_DWORD *)(*((_QWORD *)v3 + 1) + 8))
        return sub_1C50FEE78(v3, a2);
    }
  }
  return result;
}

uint64_t sub_1C51014A4(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 24 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -1)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 24 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5101550(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[96];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61E13CC(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *(_DWORD *)v9 = v10;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a1 + v8 + 16);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C61E13CC(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C51016DC(uint64_t result, uint64_t a2)
{
  int v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned __int8 *)(result + 72);
  if (*(_BYTE *)(a2 + 72))
  {
    v5 = result;
    *(_QWORD *)result = *(_QWORD *)a2;
    if (v2)
    {
      sub_1C4EA2F88(result + 8, a2 + 8);
      return v5;
    }
    else
    {
      *(_QWORD *)(result + 8) = result + 24;
      v4 = result + 8;
      *(_QWORD *)(v5 + 16) = 0xC00000000;
      if (*(_DWORD *)(a2 + 16))
        sub_1C4EA2F88(v4, a2 + 8);
      result = v5;
      *(_BYTE *)(v5 + 72) = 1;
    }
  }
  else if (*(_BYTE *)(result + 72))
  {
    v3 = *(void **)(result + 8);
    if (v3 != (void *)(result + 24))
    {
      v6 = result;
      free(v3);
      result = v6;
    }
    *(_BYTE *)(result + 72) = 0;
  }
  return result;
}

void sub_1C5101798(uint64_t *a1, uint64_t a2, __int32 __c, __int32 a4)
{
  const void *v8;
  char v9;
  int v10;
  unsigned __int8 v11;
  int v12;
  __int32 *v13;
  size_t v14;
  size_t v15;
  __int32 *v16;
  __int32 *v17;
  __int32 *v18;
  __int32 *__s;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  __s = (__int32 *)v21;
  v8 = *(const void **)a2;
  v9 = *(_BYTE *)(a2 + 8);
  v10 = v9 & 0x3F;
  v20 = 0xC00000000;
  v11 = 4 * v9;
  if ((4 * v9) >= 0x31u)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s, (uint64_t)v21, v11 >> 2, 4);
    v12 = v20;
    v13 = __s;
  }
  else
  {
    v12 = 0;
    v13 = (__int32 *)v21;
  }
  v14 = v11 & 0xFC;
  if (v10)
  {
    memcpy(&v13[v12], v8, v14);
    v12 = v20;
    v13 = __s;
  }
  v15 = v12 + (v14 >> 2);
  LODWORD(v20) = v15;
  v16 = &v13[v15];
  v17 = wmemchr(v13, __c, v15);
  if (v17)
    v18 = v17;
  else
    v18 = v16;
  *v18 = a4;
  sub_1C50FE0F0(a1, __s, v20, (*(unsigned __int8 *)(a2 + 8) >> 6) & 1, *(unsigned __int8 *)(a2 + 8) >> 7, *(_QWORD *)(a2 + 16));
  if (__s != (__int32 *)v21)
    free(__s);
}

void sub_1C51018DC(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  void **v13;
  _BYTE v14[352];
  uint64_t v15;

  v2 = a2;
  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(88 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61E1670(a1, v7, v7 + 88 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v14;
  do
  {
    v11 = a1 + v9;
    v12 = *(_DWORD *)(a1 + v9 + 8);
    if (v12 <= 0xFFFFFFFD)
    {
      *(_DWORD *)v10 = v12;
      *((_QWORD *)v10 + 1) = v10 + 24;
      v13 = (void **)(v11 + 16);
      *((_QWORD *)v10 + 2) = 0x400000000;
      if (*(_DWORD *)(v11 + 24))
        sub_1C486F510((uint64_t)(v10 + 8), (uint64_t)v13);
      v10 += 88;
      if ((void *)(a1 + v9 + 32) != *v13)
        free(*v13);
    }
    v9 += 88;
  }
  while (v9 != 352);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(88 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C61E1670(a1, (uint64_t)v14, (uint64_t)v10);
}

_DWORD *sub_1C5101AB4(_DWORD *result, int a2, uint64_t a3)
{
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int *v10;
  int v11;
  int *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  BOOL v41;
  unsigned int v42;

  v5 = result;
  v6 = result[276];
  if (v6)
  {
    v7 = *((_QWORD *)result + 136);
    v8 = v6 - 1;
    v9 = (v6 - 1) & (37 * a2);
    v10 = (int *)(v7 + 16 * v9);
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_18;
    v12 = 0;
    v13 = 1;
    while (v11 != -1)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -2;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (int *)(v7 + 16 * (v15 & v8));
      v11 = *v10;
      if (*v10 == a2)
        goto LABEL_18;
    }
    if (v12)
      v10 = v12;
  }
  else
  {
    v10 = 0;
  }
  result += 272;
  v16 = v5[274];
  if (4 * v16 + 4 >= 3 * v6)
  {
    result = sub_1C49F41C0((uint64_t *)result, 2 * v6);
    v26 = v5[276];
    if (v26)
    {
      v27 = *((_QWORD *)v5 + 136);
      v28 = v26 - 1;
      v29 = (v26 - 1) & (37 * a2);
      v10 = (int *)(v27 + 16 * v29);
      v30 = *v10;
      if (*v10 == a2)
        goto LABEL_15;
      v31 = 0;
      v32 = 1;
      while (v30 != -1)
      {
        if (v31)
          v33 = 0;
        else
          v33 = v30 == -2;
        if (v33)
          v31 = v10;
        v34 = v29 + v32++;
        v29 = v34 & v28;
        v10 = (int *)(v27 + 16 * (v34 & v28));
        v30 = *v10;
        if (*v10 == a2)
          goto LABEL_15;
      }
LABEL_56:
      if (v31)
        v10 = v31;
      goto LABEL_15;
    }
LABEL_55:
    v10 = 0;
    goto LABEL_15;
  }
  if (v6 + ~v16 - v5[275] <= v6 >> 3)
  {
    result = sub_1C49F41C0((uint64_t *)result, v6);
    v35 = v5[276];
    if (v35)
    {
      v36 = *((_QWORD *)v5 + 136);
      v37 = v35 - 1;
      v38 = (v35 - 1) & (37 * a2);
      v10 = (int *)(v36 + 16 * v38);
      v39 = *v10;
      if (*v10 == a2)
        goto LABEL_15;
      v31 = 0;
      v40 = 1;
      while (v39 != -1)
      {
        if (v31)
          v41 = 0;
        else
          v41 = v39 == -2;
        if (v41)
          v31 = v10;
        v42 = v38 + v40++;
        v38 = v42 & v37;
        v10 = (int *)(v36 + 16 * (v42 & v37));
        v39 = *v10;
        if (*v10 == a2)
          goto LABEL_15;
      }
      goto LABEL_56;
    }
    goto LABEL_55;
  }
LABEL_15:
  ++v5[274];
  if (*v10 != -1)
    --v5[275];
  *v10 = a2;
  *((_QWORD *)v10 + 1) = 0;
LABEL_18:
  v17 = *((_QWORD *)v10 + 1);
  v18 = *(_QWORD *)(a3 + 40);
  do
  {
    v19 = v18;
    v18 = *(_QWORD *)(v18 + 40);
  }
  while (v19 != v18);
  *(_QWORD *)(a3 + 40) = v19;
  if (!v17)
    goto LABEL_28;
  v20 = *(_QWORD *)(v17 + 40);
  do
  {
    v21 = v20;
    v20 = *(_QWORD *)(v20 + 40);
  }
  while (v21 != v20);
  *(_QWORD *)(v17 + 40) = v21;
  if (v21 == v19)
  {
LABEL_28:
    v21 = v19;
  }
  else
  {
    v22 = *(_QWORD *)(v19 + 48);
    v23 = v19;
    if (v22)
    {
      v24 = v19;
      do
      {
        v23 = v22;
        *(_QWORD *)(v24 + 40) = v21;
        v22 = *(_QWORD *)(v22 + 48);
        v24 = v23;
      }
      while (v22);
    }
    v25 = *(_QWORD *)(v21 + 48);
    *(_QWORD *)(v23 + 40) = v21;
    *(_QWORD *)(v23 + 48) = v25;
    *(_QWORD *)(v21 + 48) = v19;
  }
  *((_QWORD *)v10 + 1) = v21;
  return result;
}

uint64_t sub_1C5101D30(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  sub_1C5101DC0((uint64_t *)(a1 + 184));
  v2 = *(void **)(a1 + 128);
  if (v2 != (void *)(a1 + 144))
    free(v2);
  sub_1C50F5C48(a1 + 88, *(_QWORD **)(a1 + 104));
  v3 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v3)
    operator delete(v3);
  sub_1C50F5CB0(a1 + 48, *(_QWORD **)(a1 + 64));
  v4 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    operator delete(v4);
  sub_1C50F5C48(a1 + 8, *(_QWORD **)(a1 + 24));
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t *sub_1C5101DC0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void ***v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (void ***)(v3 + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C50F65EC(v5, 0);
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t sub_1C5101E30(uint64_t a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (37 * *a2) & (v4 - 1);
    result = *(_QWORD *)a1 + 32 * v5;
    v7 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = *(_QWORD *)a1 + 32 * v5;
      v7 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_1C510202C((uint64_t *)a1, 2 * v4);
    v13 = *a2;
    v14 = *(_DWORD *)(a1 + 16) - 1;
    v15 = (37 * *a2) & v14;
    result = *(_QWORD *)a1 + 32 * v15;
    v16 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      goto LABEL_16;
    v17 = 0;
    v18 = 1;
    while (v16 != -1)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -2;
      if (v19)
        v17 = result;
      v20 = v15 + v18++;
      v15 = v20 & v14;
      result = *(_QWORD *)a1 + 32 * v15;
      v16 = *(_DWORD *)result;
      if (v13 == *(_DWORD *)result)
        goto LABEL_16;
    }
    goto LABEL_43;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1C510202C((uint64_t *)a1, v4);
    v13 = *a2;
    v21 = *(_DWORD *)(a1 + 16) - 1;
    v22 = (37 * *a2) & v21;
    result = *(_QWORD *)a1 + 32 * v22;
    v23 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      goto LABEL_16;
    v17 = 0;
    v24 = 1;
    while (v23 != -1)
    {
      if (v17)
        v25 = 0;
      else
        v25 = v23 == -2;
      if (v25)
        v17 = result;
      v26 = v22 + v24++;
      v22 = v26 & v21;
      result = *(_QWORD *)a1 + 32 * v22;
      v23 = *(_DWORD *)result;
      if (v13 == *(_DWORD *)result)
        goto LABEL_16;
    }
LABEL_43:
    if (v17)
      result = v17;
  }
  v13 = *(_DWORD *)result;
LABEL_16:
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

_DWORD *sub_1C510202C(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v14 = *((_DWORD *)a1 + 4) - 1;
          v15 = v14 & (37 * v13);
          v16 = *a1 + 32 * v15;
          v17 = *(_DWORD *)v16;
          if (v13 != *(_DWORD *)v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -1)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -2;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = *a1 + 32 * v15;
              v17 = *(_DWORD *)v16;
              if (v13 == *(_DWORD *)v16)
                goto LABEL_12;
            }
            if (v18)
              v16 = v18;
          }
LABEL_12:
          *(_DWORD *)v16 = v13;
          *(_QWORD *)(v16 + 16) = 0;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 8) = 0;
          *(_OWORD *)(v16 + 8) = *(_OWORD *)(v12 + 2);
          *(_QWORD *)(v16 + 24) = *((_QWORD *)v12 + 3);
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 2) = 0;
          *((_QWORD *)v12 + 3) = 0;
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 8;
      }
      while (v12 != &v4[8 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v22 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v22)
  {
    v23 = 32 * v22;
    do
    {
      *result = -1;
      result += 8;
      v23 -= 32;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1C51021C0(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;

  if (!a2)
    return 0;
  v3 = (37 * a3) & (a2 - 1);
  v4 = *(_DWORD *)(a1 + 16 * v3);
  if (v4 != a3)
  {
    v8 = 1;
    while (v4 != -1)
    {
      v9 = v3 + v8++;
      v3 = v9 & (a2 - 1);
      v4 = *(_DWORD *)(a1 + 16 * v3);
      if (v4 == a3)
        goto LABEL_3;
    }
    return 0;
  }
LABEL_3:
  v5 = *(_QWORD *)(a1 + 16 * v3 + 8);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 40);
  do
  {
    result = v6;
    v6 = *(_QWORD *)(v6 + 40);
  }
  while (result != v6);
  *(_QWORD *)(v5 + 40) = result;
  return result;
}

unint64_t sub_1C5102240(llvm::MachineBasicBlock *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t i;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v18;
  unint64_t v19;
  llvm::MachineBasicBlock *v20;
  uint64_t v21;

  v20 = this;
  for (i = a2 & 0xFFFFFFFFFFFFFFF8;
        ;
        i = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFF9 | (2 * ((i >> 1) & 3)))
  {
    if (i >= 8)
    {
      v7 = *(_QWORD *)((i & 0xFFFFFFFFFFFFFFF8) + 16);
      if (v7)
        break;
    }
    if (i == *(_QWORD *)(a3 + 16 * *((unsigned int *)this + 6)))
    {
      v21 = 0;
      if (sub_1C61E17CC(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), (uint64_t)this, &v21))
        v13 = v21 == *(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16);
      else
        v13 = 1;
      if (v13)
      {
        v14 = (uint64_t *)((char *)this + 56);
      }
      else
      {
        v15 = *(_QWORD *)(v21 + 8);
        if (!v15 || (*(_BYTE *)v15 & 4) == 0)
        {
          while ((*(_WORD *)(v15 + 44) & 8) != 0)
            v15 = *(_QWORD *)(v15 + 8);
        }
        v14 = (uint64_t *)(v15 + 8);
      }
      v11 = *v14;
      v16 = (_QWORD *)llvm::MachineBasicBlock::SkipPHIsLabelsAndDebug((uint64_t)this, *v14, 1);
      if ((_QWORD *)v11 != v16)
      {
        v18 = v16;
        v19 = *v16 & 0xFFFFFFFFFFFFFFF8;
        if (!v19 || (*(_BYTE *)v19 & 4) == 0)
        {
          while ((*(_WORD *)(v19 + 44) & 4) != 0)
            v19 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
        }
        sub_1C61E1860(a4, (uint64_t *)&v20)[1] = v19;
        return (unint64_t)v18;
      }
      return v11;
    }
  }
  v8 = *(_WORD *)(v7 + 44);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8);
  if ((v8 & 0xC) != 0 && (v8 & 4) == 0)
  {
    if ((v9 & 0x200) == 0)
    {
      v12 = v7;
      while ((*(_WORD *)(v12 + 44) & 8) != 0)
      {
        v12 = *(_QWORD *)(v12 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v12 + 16) + 9) & 2) != 0)
          return llvm::MachineBasicBlock::getFirstTerminator(this);
      }
      goto LABEL_11;
    }
    return llvm::MachineBasicBlock::getFirstTerminator(this);
  }
  if ((v9 & 0x200) != 0)
    return llvm::MachineBasicBlock::getFirstTerminator(this);
LABEL_11:
  if ((v8 & 8) != 0 && (*(_QWORD *)v7 & 4) == 0)
  {
    do
      v7 = *(_QWORD *)(v7 + 8);
    while ((*(_WORD *)(v7 + 44) & 8) != 0);
  }
  return *(_QWORD *)(v7 + 8);
}

uint64_t sub_1C51023F0(uint64_t a1, const llvm::MachineOperand *a2, llvm *this, int **a4)
{
  int v6;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  int i;
  int *v13;
  int v14;
  uint64_t result;
  unsigned __int8 isIdenticalTo;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  if (!(_DWORD)a2)
  {
    result = 0;
    *a4 = 0;
    return result;
  }
  v6 = (int)a2;
  v20 = 20;
  v21 = 0;
  v18 = 21;
  v19 = 0;
  llvm::hash_value(this, a2);
  v8 = 0;
  v9 = v6 - 1;
  v11 = (v6 - 1) & v10;
  for (i = 1; ; ++i)
  {
    v13 = (int *)(a1 + 40 * v11);
    if ((*(_DWORD *)this & 0xFE) == 0x14)
    {
      v14 = *v13;
      if (*(_DWORD *)this == *v13)
      {
LABEL_21:
        result = 1;
        goto LABEL_10;
      }
    }
    else
    {
      if ((llvm::MachineOperand::isIdenticalTo(this, (const llvm::MachineOperand *)(a1 + 40 * v11)) & 1) != 0)
        goto LABEL_21;
      v14 = *v13;
    }
    if ((v14 & 0xFE) != 0x14)
      break;
    if (v20 == v14)
      goto LABEL_8;
LABEL_15:
    if ((v14 & 0xFE) == 0x14)
      isIdenticalTo = v18 == v14;
    else
      isIdenticalTo = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(a1 + 40 * v11), (const llvm::MachineOperand *)&v18);
    if ((isIdenticalTo & (v8 == 0)) != 0)
      v8 = (int *)(a1 + 40 * v11);
    v17 = v11 + i;
    v11 = v17 & v9;
  }
  if ((llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(a1 + 40 * v11), (const llvm::MachineOperand *)&v20) & 1) == 0)
  {
    v14 = *v13;
    goto LABEL_15;
  }
LABEL_8:
  result = 0;
  if (v8)
    v13 = v8;
LABEL_10:
  *a4 = v13;
  return result;
}

char *sub_1C5102548(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm::MachineOperand *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm::MachineOperand **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5102614(a1, v4, (llvm::MachineOperand *)((char *)v4 + 40 * v3));
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = &result[40 * v10];
    do
    {
      *(_DWORD *)result = 20;
      *((_QWORD *)result + 1) = 0;
      result += 40;
    }
    while (result != v11);
  }
  return result;
}

uint64_t sub_1C5102614(uint64_t result, llvm::MachineOperand *this, llvm::MachineOperand *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int *v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int *v16;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(_QWORD *)result;
    v8 = *(_QWORD *)result + 40 * v6;
    do
    {
      *(_DWORD *)v7 = 20;
      *(_QWORD *)(v7 + 8) = 0;
      v7 += 40;
    }
    while (v7 != v8);
  }
  v14 = 20;
  v15 = 0;
  v12 = 21;
  v13 = 0;
  while (this != a3)
  {
    v9 = *(_DWORD *)this;
    if ((*(_DWORD *)this & 0xFE) == 0x14)
    {
      if (v14 == v9)
        goto LABEL_12;
    }
    else
    {
      result = llvm::MachineOperand::isIdenticalTo(this, (const llvm::MachineOperand *)&v14);
      if ((result & 1) != 0)
        goto LABEL_12;
      v9 = *(_DWORD *)this;
    }
    if ((v9 & 0xFE) != 0x14)
    {
      result = llvm::MachineOperand::isIdenticalTo(this, (const llvm::MachineOperand *)&v12);
      if ((result & 1) != 0)
        goto LABEL_12;
LABEL_11:
      v16 = 0;
      result = sub_1C51023F0(*(_QWORD *)v5, (const llvm::MachineOperand *)*(unsigned int *)(v5 + 16), this, &v16);
      v10 = v16;
      v11 = *((_OWORD *)this + 1);
      *(_OWORD *)v16 = *(_OWORD *)this;
      *((_OWORD *)v10 + 1) = v11;
      v10[8] = *((_DWORD *)this + 8);
      ++*(_DWORD *)(v5 + 8);
      goto LABEL_12;
    }
    if (v12 != v9)
      goto LABEL_11;
LABEL_12:
    this = (llvm::MachineOperand *)((char *)this + 40);
  }
  return result;
}

void sub_1C5102738(uint64_t a1, llvm::MachineBasicBlock *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  __int32 *v25;
  uint64_t v26;
  __int32 *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  __int32 *v32;
  uint64_t v33;
  unsigned int v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  int v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  _DWORD *v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  BOOL v68;
  int v69;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  int v75;
  unint64_t v76;
  unsigned int *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  llvm::MDNode *appended;
  _BYTE v83[20];
  uint64_t v84;
  int v85;
  void *v86;
  uint64_t v87;
  _QWORD v88[34];

  v88[32] = *MEMORY[0x1E0C80C00];
  v19 = *(_QWORD *)(*(_QWORD *)(a11 + 288) + 392);
  v20 = *(_QWORD *)(v19 + 16 * *((unsigned int *)this + 6) + 8);
  if (((v20 >> 1) & 3 | *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3))
    v21 = a4;
  else
    v21 = *(_QWORD *)(v19 + 16 * *((unsigned int *)this + 6) + 8);
  v22 = sub_1C5102240(this, a3, v19, a14);
  v86 = v88;
  v87 = 0x800000000;
  v23 = *(_BYTE *)(a5 + 8);
  v24 = v23 & 0x3F;
  if ((v23 & 0x3F) != 0)
  {
    v25 = *(__int32 **)a5;
    v26 = *(_QWORD *)a5 + 4 * v24;
    v27 = wmemchr(*(__int32 **)a5, -1, v23 & 0x3F);
    if (v27)
      v28 = (uint64_t)v27;
    else
      v28 = v26;
    v29 = v28 - (_QWORD)v25;
    v30 = *(_BYTE *)(a5 + 8);
    if (v24 == v29 >> 2)
    {
      v31 = v30 & 0x3F;
      if ((_DWORD)v31)
      {
        v32 = *(__int32 **)a5;
        v33 = 4 * v31;
        do
        {
          v34 = *v32++;
          v35 = (_OWORD *)sub_1C47C0F60((uint64_t)&v86, *(_QWORD *)(a1 + 56) + 32 * v34, 1);
          v36 = (char *)v86 + 32 * v87;
          v37 = v35[1];
          *v36 = *v35;
          v36[1] = v37;
          LODWORD(v87) = v87 + 1;
          v33 -= 4;
        }
        while (v33);
      }
      goto LABEL_16;
    }
    v38 = v30 & 0x3F;
  }
  else
  {
    v38 = 0;
  }
  *(_OWORD *)&v83[4] = 0uLL;
  v85 = 0;
  v84 = 0;
  *(_DWORD *)v83 = 0x80000000;
  sub_1C5100DC4((char *)&v86, v38, v83);
LABEL_16:
  v80 = a1;
  appended = *(llvm::MDNode **)(a5 + 16);
  v39 = *(unsigned __int8 *)(a5 + 8);
  v40 = (v39 >> 6) & 1;
  v41 = a7;
  if (a7)
  {
    v42 = 0;
    do
    {
      if (*(_BYTE *)(a6 + v42))
      {
        if ((v39 & 0x80) != 0)
        {
          *(_QWORD *)v83 = &v83[16];
          *(_QWORD *)&v83[8] = 0x400000000;
          llvm::DIExpression::appendOffset((uint64_t)v83, *(unsigned int *)(a9 + 4 * v42));
          v43 = *(unsigned int *)&v83[8];
          if (*(unsigned int *)&v83[8] >= (unint64_t)*(unsigned int *)&v83[12])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v83, (uint64_t)&v83[16], *(unsigned int *)&v83[8] + 1, 8);
            v43 = *(unsigned int *)&v83[8];
          }
          *(_QWORD *)(*(_QWORD *)v83 + 8 * v43) = 6;
          ++*(_DWORD *)&v83[8];
          appended = llvm::DIExpression::appendOpsToArg(appended, *(uint64_t **)v83, *(unsigned int *)&v83[8], v42, 0);
          if (*(_BYTE **)v83 != &v83[16])
            free(*(void **)v83);
        }
        else
        {
          if ((v40 & 1) != 0)
            v44 = 2;
          else
            v44 = 0;
          appended = llvm::DIExpression::prepend(appended, (const llvm::DIExpression *)v44, *(unsigned int *)(a9 + 4 * v42));
          LOBYTE(v40) = 1;
        }
      }
      ++v42;
    }
    while (v41 != v42);
  }
  if ((v39 & 0x80u) == 0)
    v45 = 13;
  else
    v45 = 14;
  v46 = (char *)this + 48;
  v79 = v21 & 0xFFFFFFFFFFFFFFF8;
  v47 = v40 & 1;
  do
  {
    llvm::BuildMI((uint64_t)this, (unint64_t *)v22, (unsigned __int8 **)(v80 + 32), (_WORD *)(*(_QWORD *)(a12 + 8) + 48 * v45), v47, (int *)v86, v87, *(_QWORD *)v80, (uint64_t)appended);
    *(_QWORD *)v83 = &v83[16];
    v48 = (char *)this + 48;
    *(_QWORD *)&v83[8] = 0x400000000;
    if ((_DWORD)v87)
    {
      v49 = 0;
      v50 = 32 * v87;
      v51 = (char *)v86 + 4;
      do
      {
        if (!*((_BYTE *)v51 - 4))
        {
          v52 = *v51;
          if (v49 >= *(_DWORD *)&v83[12])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v83, (uint64_t)&v83[16], v49 + 1, 4);
            v49 = *(_DWORD *)&v83[8];
          }
          *(_DWORD *)(*(_QWORD *)v83 + 4 * v49) = v52;
          v49 = ++*(_DWORD *)&v83[8];
        }
        v51 += 8;
        v50 -= 32;
      }
      while (v50);
      v48 = (char *)this + 48;
      if (v49)
      {
        v48 = (char *)this + 48;
        if ((char *)v22 != v46)
        {
          while (1)
          {
            v53 = *(_WORD *)(v22 + 44);
            v54 = *(_QWORD *)(*(_QWORD *)(v22 + 16) + 8);
            if ((v53 & 0xC) != 0 && (v53 & 4) == 0)
            {
              v76 = v22;
              if ((v54 & 0x200) != 0)
                goto LABEL_98;
              while ((*(_WORD *)(v76 + 44) & 8) != 0)
              {
                v76 = *(_QWORD *)(v76 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v76 + 16) + 9) & 2) != 0)
                  goto LABEL_98;
              }
            }
            else if ((v54 & 0x200) != 0)
            {
              goto LABEL_98;
            }
            v56 = *(_QWORD *)(a11 + 288);
            v57 = *(unsigned int *)(v56 + 384);
            if ((_DWORD)v57)
            {
              v58 = *(_QWORD *)(v56 + 368);
              v59 = v57 - 1;
              v60 = (v57 - 1) & ((v22 >> 4) ^ (v22 >> 9));
              v61 = *(_QWORD *)(v58 + 16 * v60);
              if (v22 == v61)
              {
LABEL_53:
                v64 = v22;
                if ((v53 & 4) != 0)
                {
                  do
                    v64 = *(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8;
                  while ((*(_WORD *)(v64 + 44) & 4) != 0);
                }
                v65 = v22;
                if ((v53 & 8) != 0)
                {
                  do
                    v65 = *(_QWORD *)(v65 + 8);
                  while ((*(_WORD *)(v65 + 44) & 8) != 0);
                }
                v66 = *(_QWORD *)(v65 + 8);
                if (v64 != v66)
                {
                  while (1)
                  {
                    v67 = **(unsigned __int16 **)(v64 + 16);
                    v68 = v67 > 0x17;
                    v69 = (1 << v67) & 0x83E000;
                    if (v68 || v69 == 0)
                      break;
                    v64 = *(_QWORD *)(v64 + 8);
                    if (v64 == v66)
                    {
                      v64 = v66;
                      break;
                    }
                  }
                }
                LODWORD(v71) = ((v64 >> 4) ^ (v64 >> 9)) & v59;
                v72 = (uint64_t *)(v58 + 16 * v71);
                v73 = *v72;
                if (v64 != *v72)
                {
                  v74 = 1;
                  while (v73 != -4096)
                  {
                    v75 = v71 + v74++;
                    v71 = v75 & v59;
                    v73 = *(_QWORD *)(v58 + 16 * v71);
                    if (v64 == v73)
                    {
                      v72 = (uint64_t *)(v58 + 16 * v71);
                      goto LABEL_72;
                    }
                  }
                  v72 = (uint64_t *)(v58 + 16 * v57);
                }
LABEL_72:
                if (*(_DWORD *)((v72[1] & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)(v79 + 24))
                {
LABEL_98:
                  v48 = (char *)this + 48;
                  goto LABEL_94;
                }
              }
              else
              {
                v62 = 1;
                while (v61 != -4096)
                {
                  v63 = v60 + v62++;
                  v60 = v63 & v59;
                  v61 = *(_QWORD *)(v58 + 16 * v60);
                  if (v22 == v61)
                    goto LABEL_53;
                }
              }
            }
            if (*(_DWORD *)&v83[8])
              break;
LABEL_77:
            if (!v22 || (*(_BYTE *)v22 & 4) == 0)
            {
              while ((*(_WORD *)(v22 + 44) & 8) != 0)
                v22 = *(_QWORD *)(v22 + 8);
            }
            v22 = *(_QWORD *)(v22 + 8);
            if ((char *)v22 == v46)
              goto LABEL_98;
          }
          v77 = *(unsigned int **)v83;
          v78 = 4 * *(unsigned int *)&v83[8];
          while (llvm::MachineInstr::findRegisterDefOperandIdx(v22, *v77, 0, 0, a13) == -1)
          {
            ++v77;
            v78 -= 4;
            if (!v78)
              goto LABEL_77;
          }
          if (!v22 || (*(_BYTE *)v22 & 4) == 0)
          {
            while ((*(_WORD *)(v22 + 44) & 8) != 0)
              v22 = *(_QWORD *)(v22 + 8);
          }
          v48 = *(char **)(v22 + 8);
        }
      }
    }
LABEL_94:
    if (*(_BYTE **)v83 != &v83[16])
      free(*(void **)v83);
    v22 = (unint64_t)v48;
  }
  while (v48 != v46);
  if (v86 != v88)
    free(v86);
}

_QWORD *sub_1C5102D50(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61E1978(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

llvm::raw_ostream *sub_1C5102E08(llvm::raw_ostream *this, unsigned __int8 *a2, uint64_t a3)
{
  llvm::raw_ostream *v4;
  int v5;
  uint64_t v6;
  size_t *v7;
  const void *v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  void *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned __int8 *v18;

  v4 = this;
  v5 = *a2;
  if (v5 == 26 || v5 == 25)
  {
    v6 = *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2) + 8];
    if (v6)
    {
      v7 = *(size_t **)(v6 + 8);
      v10 = *v7;
      v8 = v7 + 3;
      v9 = v10;
      if (v10)
      {
        v11 = *((unsigned int *)a2 + 6);
        v12 = (void *)*((_QWORD *)this + 4);
        if (v9 <= *((_QWORD *)v4 + 3) - (_QWORD)v12)
        {
          memcpy(v12, v8, v9);
          v14 = (_BYTE *)(*((_QWORD *)v4 + 4) + v9);
          *((_QWORD *)v4 + 4) = v14;
          v13 = v4;
        }
        else
        {
          v13 = llvm::raw_ostream::write(v4, (const char *)v8, v9);
          v14 = (_BYTE *)*((_QWORD *)v13 + 4);
        }
        if (*((_BYTE **)v13 + 3) == v14)
        {
          v13 = llvm::raw_ostream::write(v13, ",", 1uLL);
        }
        else
        {
          *v14 = 44;
          ++*((_QWORD *)v13 + 4);
        }
        this = sub_1C5E21910(v13, v11, 0, 0, 0);
      }
    }
  }
  if (a3)
  {
    if (*(_DWORD *)(a3 + 8) == 2)
    {
      v15 = *(unsigned __int8 **)(a3 - 8);
      if (v15)
      {
        v18 = *(unsigned __int8 **)(a3 - 8);
        this = (llvm::raw_ostream *)llvm::MetadataTracking::track((uint64_t)&v18, v15, 2);
        if (v18)
        {
          v16 = *((_QWORD *)v4 + 4);
          if ((unint64_t)(*((_QWORD *)v4 + 3) - v16) > 2)
          {
            *(_BYTE *)(v16 + 2) = 91;
            *(_WORD *)v16 = 16416;
            *((_QWORD *)v4 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v4, " @[", 3uLL);
          }
          this = (llvm::raw_ostream *)sub_1C5102FCC((uint64_t)&v18, v4);
          v17 = (_BYTE *)*((_QWORD *)v4 + 4);
          if (*((_BYTE **)v4 + 3) == v17)
          {
            this = llvm::raw_ostream::write(v4, "]", 1uLL);
          }
          else
          {
            *v17 = 93;
            ++*((_QWORD *)v4 + 4);
          }
          if (v18)
            return (llvm::raw_ostream *)llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
        }
      }
    }
  }
  return this;
}

uint64_t sub_1C5102FCC(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t *v6;
  const void *v7;
  size_t v8;
  size_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned __int8 *v16;
  _WORD *v17;
  unsigned __int8 *v18;

  if (*(_QWORD *)result)
  {
    v3 = result;
    v4 = *(_QWORD *)(*(_QWORD *)result - 8 * *(unsigned int *)(*(_QWORD *)result + 8));
    if ((*(_BYTE *)v4 == 15 || (v4 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8))) != 0)
      && (v5 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8))) != 0)
    {
      v6 = *(size_t **)(v5 + 8);
      v9 = *v6;
      v7 = v6 + 3;
      v8 = v9;
      v10 = a2 + 3;
      v12 = a2 + 4;
      v11 = (void *)a2[4];
      if (v9 <= a2[3] - (_QWORD)v11)
      {
        if (v8)
        {
          memcpy(v11, v7, v8);
          *v12 += v8;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, (const char *)v7, v8);
      }
    }
    else
    {
      v10 = a2 + 3;
      v12 = a2 + 4;
    }
    v13 = (_BYTE *)*v12;
    if (*v12 >= *v10)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, 58);
    }
    else
    {
      *v12 = v13 + 1;
      *v13 = 58;
    }
    result = (uint64_t)sub_1C5E21910((llvm::raw_ostream *)a2, *(unsigned int *)(*(_QWORD *)v3 + 4), 0, 0, 0);
    v14 = *(_QWORD *)v3;
    if (*(_WORD *)(*(_QWORD *)v3 + 2))
    {
      v15 = (_BYTE *)*v12;
      if (*v12 >= *v10)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a2, 58);
      }
      else
      {
        *v12 = v15 + 1;
        *v15 = 58;
      }
      result = (uint64_t)sub_1C5E21910((llvm::raw_ostream *)a2, *(unsigned __int16 *)(*(_QWORD *)v3 + 2), 0, 0, 0);
      v14 = *(_QWORD *)v3;
    }
    if (*(_DWORD *)(v14 + 8) == 2)
    {
      v16 = *(unsigned __int8 **)(v14 - 8);
      v18 = v16;
      if (v16)
      {
        result = llvm::MetadataTracking::track((uint64_t)&v18, v16, 2);
        if (v18)
        {
          if (*v10 - *v12 > 3uLL)
          {
            *(_DWORD *)*v12 = 542851104;
            *v12 += 4;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)a2, " @[ ", 4uLL);
          }
          result = sub_1C5102FCC(&v18, a2);
          v17 = (_WORD *)a2[4];
          if (a2[3] - (_QWORD)v17 > 1uLL)
          {
            *v17 = 23840;
            *v12 += 2;
          }
          else
          {
            result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)a2, " ]", 2uLL);
          }
          if (v18)
            return llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
        }
      }
    }
  }
  return result;
}

__n128 sub_1C510320C(char **a1, __n128 *a2, _WORD *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F93A0, "live-debug-variables", 0x14uLL);
  v6 = *a1;
  byte_1ED7F9420 = **a1;
  byte_1ED7F9431 = 1;
  byte_1ED7F9430 = *v6;
  result = *a2;
  xmmword_1ED7F93C0 = (__int128)*a2;
  word_1ED7F93AA = (32 * (*a3 & 3)) | word_1ED7F93AA & 0xFF9F;
  return result;
}

uint64_t sub_1C5103290()
{
  int v1;
  __n128 v2;
  char v3;
  char *v4;

  v3 = 1;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Enable the live debug variables pass";
  v2.n128_u64[1] = 36;
  v1 = 1;
  sub_1C61E1A2C(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7F93A0, &dword_1C475E000);
}

void llvm::initializeLiveIntervalsPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82F0E8);
  if (v1 != -1)
  {
    v4[0] = sub_1C510335C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82F0E8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C510335C(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeSlotIndexesPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Live Interval Analysis";
  *(_QWORD *)(v3 + 8) = 22;
  *(_QWORD *)(v3 + 16) = "liveintervals";
  *(_QWORD *)(v3 + 24) = 13;
  *(_QWORD *)(v3 + 32) = &llvm::LiveIntervals::ID;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::LiveIntervals>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::LiveIntervals::releaseMemory(llvm::LiveIntervals *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;

  v2 = *((unsigned int *)this + 104);
  if ((_DWORD)v2)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 51) + 8 * (v3 & 0x7FFFFFFF));
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 104);
        if (v5)
        {
          do
          {
            v8 = *(_QWORD *)(v5 + 96);
            v9 = *(_QWORD *)(v5 + 104);
            *(_QWORD *)(v5 + 96) = 0;
            if (v8)
            {
              v26 = v2;
              v21 = v8;
              sub_1C47655E8(v8, *(_QWORD **)(v8 + 8));
              v22 = v21;
              v2 = v26;
              MEMORY[0x1CAA32FC0](v22, 0x1020C4062D53EE8);
            }
            v10 = *(void **)(v5 + 64);
            if (v10 != (void *)(v5 + 80))
              free(v10);
            if (*(_QWORD *)v5 != v5 + 16)
              free(*(void **)v5);
            v5 = v9;
          }
          while (v9);
        }
        v6 = *(_QWORD *)(v4 + 96);
        *(_QWORD *)(v4 + 96) = 0;
        *(_QWORD *)(v4 + 104) = 0;
        if (v6)
        {
          v18 = v2;
          v19 = v6;
          sub_1C47655E8(v6, *(_QWORD **)(v6 + 8));
          v20 = v19;
          v2 = v18;
          MEMORY[0x1CAA32FC0](v20, 0x1020C4062D53EE8);
        }
        v7 = *(void **)(v4 + 64);
        if (v7 != (void *)(v4 + 80))
          free(v7);
        if (*(_QWORD *)v4 != v4 + 16)
          free(*(void **)v4);
        MEMORY[0x1CAA32FC0](v4, 0x10A0C408DA535C6);
      }
      ++v3;
    }
    while (v3 != (_DWORD)v2);
  }
  *((_DWORD *)this + 104) = 0;
  *((_DWORD *)this + 112) = 0;
  *((_DWORD *)this + 132) = 0;
  *((_DWORD *)this + 152) = 0;
  v11 = *((unsigned int *)this + 172);
  if ((_DWORD)v11)
  {
    v12 = (uint64_t *)*((_QWORD *)this + 85);
    v13 = 8 * v11;
    do
    {
      v14 = *v12;
      if (*v12)
      {
        v15 = *(_QWORD *)(v14 + 96);
        *(_QWORD *)(v14 + 96) = 0;
        if (v15)
        {
          v23 = v13;
          v24 = v15;
          sub_1C47655E8(v15, *(_QWORD **)(v15 + 8));
          v25 = v24;
          v13 = v23;
          MEMORY[0x1CAA32FC0](v25, 0x1020C4062D53EE8);
        }
        v16 = *(void **)(v14 + 64);
        if (v16 != (void *)(v14 + 80))
          free(v16);
        if (*(_QWORD *)v14 != v14 + 16)
          free(*(void **)v14);
        MEMORY[0x1CAA32FC0](v14, 0x10A0C40E42201FCLL);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  *((_DWORD *)this + 172) = 0;
  return sub_1C4926A50((uint64_t)this + 312);
}

uint64_t llvm::LiveIntervals::runOnMachineFunction(llvm::LiveIntervals *this, llvm::MachineFunction *a2)
{
  uint64_t v3;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 31) = a2;
  *((_QWORD *)this + 32) = v3;
  *((_QWORD *)this + 33) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 34) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 31) + 16) + 104))(*(_QWORD *)(*((_QWORD *)this + 31) + 16));
  v4 = (void **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::AAResultsWrapperPass::ID);
  *((_QWORD *)this + 35) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v6 = (void **)**((_QWORD **)this + 1);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::SlotIndexes::ID);
  *((_QWORD *)this + 36) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::SlotIndexes::ID);
  v8 = (void **)**((_QWORD **)this + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::MachineDominatorTree::ID);
  *((_QWORD *)this + 37) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::MachineDominatorTree::ID);
  if (!*((_QWORD *)this + 38))
  {
    v13 = operator new();
    bzero((void *)v13, 0x2C0uLL);
    *(_QWORD *)(v13 + 40) = v13 + 56;
    *(_DWORD *)(v13 + 52) = 6;
    *(_QWORD *)(v13 + 112) = 0;
    *(_QWORD *)(v13 + 120) = 0;
    *(_DWORD *)(v13 + 128) = 0;
    *(_QWORD *)(v13 + 152) = 0;
    *(_QWORD *)(v13 + 136) = v13 + 152;
    *(_QWORD *)(v13 + 144) = 0;
    *(_QWORD *)(v13 + 160) = 0;
    *(_QWORD *)(v13 + 176) = v13 + 192;
    *(_DWORD *)(v13 + 188) = 16;
    *((_QWORD *)this + 38) = v13;
  }
  v10 = *(unsigned int *)(*((_QWORD *)this + 32) + 32);
  v11 = *((unsigned int *)this + 104);
  if ((_DWORD)v11 != (_DWORD)v10)
  {
    if (v11 > v10)
      *((_DWORD *)this + 104) = v10;
    else
      sub_1C48512E0((uint64_t)this + 408, v10 - v11, *((_QWORD *)this + 53));
  }
  llvm::LiveIntervals::computeVirtRegs(this);
  llvm::LiveIntervals::computeRegMasks(this);
  llvm::LiveIntervals::computeLiveInRegUnits(this);
  return 0;
}

void llvm::LiveIntervals::computeVirtRegs(llvm::LiveIntervals *this)
{
  int v1;
  int v3;
  char *v4;
  uint64_t v5;
  llvm::LiveInterval *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  void *v13[2];
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(*((_QWORD *)this + 32) + 32);
  if (v1)
  {
    v3 = 0;
    v4 = (char *)this + 312;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 24) + 16 * (v3 & 0x7FFFFFFF) + 8);
      if (v5)
      {
        while ((*(_DWORD *)v5 & 0x80000000) != 0)
        {
          v5 = *(_QWORD *)(v5 + 24);
          if (!v5)
            goto LABEL_4;
        }
        v6 = (llvm::LiveInterval *)sub_1C4851220((uint64_t)this, v3 | 0x80000000);
        v7 = *((_QWORD *)this + 38);
        v8 = *((_QWORD *)this + 31);
        *(_QWORD *)v7 = v8;
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 + 40);
        *(_OWORD *)(v7 + 16) = *((_OWORD *)this + 18);
        *(_QWORD *)(v7 + 32) = v4;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v7);
        *(_DWORD *)(v7 + 184) = 0;
        v9 = *((_QWORD *)this + 32);
        v11 = *(_BYTE *)(v9 + 16) == 0;
        v10 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v9 + 24) + 16 * (*((_DWORD *)v6 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
        v11 = v11 || v10 == 0;
        v12 = !v11;
        llvm::LiveIntervalCalc::calculate(*((llvm::LiveIntervalCalc **)this + 38), v6, v12);
        if (llvm::LiveIntervals::computeDeadValues((uint64_t)this, (uint64_t)v6, 0))
        {
          v13[0] = v14;
          v13[1] = (void *)0x800000000;
          llvm::LiveIntervals::splitSeparateComponents((uint64_t)this, v6, (uint64_t)v13);
          if (v13[0] != v14)
            free(v13[0]);
        }
      }
LABEL_4:
      ++v3;
    }
    while (v3 != v1);
  }
}

void llvm::LiveIntervals::computeRegMasks(llvm::LiveIntervals *this)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;

  v57 = (uint64_t *)((char *)this + 600);
  v2 = (_QWORD *)*((_QWORD *)this + 31);
  v3 = v2[14] - v2[13];
  v4 = (v3 >> 3);
  v5 = *((unsigned int *)this + 152);
  if (v4 != v5)
  {
    if (v4 >= v5)
    {
      if (v4 > *((unsigned int *)this + 153))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v57, (uint64_t)this + 616, (v3 >> 3), 8);
        v5 = *((unsigned int *)this + 152);
      }
      if (v4 != v5)
        bzero((void *)(*v57 + 8 * v5), 8 * (v4 - v5));
    }
    *((_DWORD *)this + 152) = v3 >> 3;
    v2 = (_QWORD *)*((_QWORD *)this + 31);
  }
  v6 = v2 + 40;
  v7 = v2[41];
  if ((_QWORD *)v7 != v2 + 40)
  {
    v8 = *((_DWORD *)this + 112);
    do
    {
      v9 = *(int *)(v7 + 24);
      v10 = *v57;
      v11 = (_DWORD *)(*v57 + 8 * v9);
      *v11 = v8;
      if (*(_BYTE *)(v7 + 189))
      {
        v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 33) + 56))(*((_QWORD *)this + 33));
        if (v42)
        {
          v43 = v42;
          v44 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 36) + 392) + 16 * *(unsigned int *)(v7 + 24));
          v45 = *((unsigned int *)this + 112);
          if (v45 >= *((unsigned int *)this + 113))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 440, (uint64_t)this + 456, v45 + 1, 8);
            v45 = *((unsigned int *)this + 112);
          }
          *(_QWORD *)(*((_QWORD *)this + 55) + 8 * v45) = v44;
          ++*((_DWORD *)this + 112);
          v46 = *((unsigned int *)this + 132);
          if (v46 >= *((unsigned int *)this + 133))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 520, (uint64_t)this + 536, v46 + 1, 8);
            v46 = *((unsigned int *)this + 132);
          }
          *(_QWORD *)(*((_QWORD *)this + 65) + 8 * v46) = v43;
          ++*((_DWORD *)this + 132);
        }
      }
      if (*(_BYTE *)(v7 + 184))
      {
        v47 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 33) + 48))(*((_QWORD *)this + 33), *(_QWORD *)(v7 + 32));
        if (v47)
        {
          v48 = v47;
          v49 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 36) + 392) + 16 * *(unsigned int *)(v7 + 24));
          v50 = *((unsigned int *)this + 112);
          if (v50 >= *((unsigned int *)this + 113))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 440, (uint64_t)this + 456, v50 + 1, 8);
            v50 = *((unsigned int *)this + 112);
          }
          *(_QWORD *)(*((_QWORD *)this + 55) + 8 * v50) = v49;
          ++*((_DWORD *)this + 112);
          v51 = *((unsigned int *)this + 132);
          if (v51 >= *((unsigned int *)this + 133))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 520, (uint64_t)this + 536, v51 + 1, 8);
            v51 = *((unsigned int *)this + 132);
          }
          *(_QWORD *)(*((_QWORD *)this + 65) + 8 * v51) = v48;
          ++*((_DWORD *)this + 132);
        }
      }
      v12 = (_QWORD *)(v7 + 48);
      for (i = *(_QWORD *)(v7 + 56); (_QWORD *)i != v12; i = *(_QWORD *)(i + 8))
      {
        v14 = *(unsigned int *)(i + 40);
        if (!(_DWORD)v14)
          goto LABEL_19;
        v15 = *(_QWORD *)(i + 32);
        v16 = v15 + 32 * v14;
        do
        {
          if (*(_BYTE *)v15 != 12)
            goto LABEL_17;
          v22 = *(_WORD *)(i + 44);
          v23 = i;
          if ((v22 & 4) != 0)
          {
            do
              v23 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v23 + 44) & 4) != 0);
          }
          v24 = i;
          if ((v22 & 8) != 0)
          {
            do
              v24 = *(_QWORD *)(v24 + 8);
            while ((*(_WORD *)(v24 + 44) & 8) != 0);
          }
          v25 = *(_QWORD *)(v24 + 8);
          if (v23 != v25)
          {
            while (1)
            {
              v26 = **(unsigned __int16 **)(v23 + 16);
              v27 = v26 > 0x17;
              v28 = (1 << v26) & 0x83E000;
              if (v27 || v28 == 0)
                break;
              v23 = *(_QWORD *)(v23 + 8);
              if (v23 == v25)
              {
                v23 = v25;
                break;
              }
            }
          }
          v30 = *((_QWORD *)this + 36);
          v31 = *(_QWORD *)(v30 + 368);
          v32 = *(unsigned int *)(v30 + 384);
          if (!(_DWORD)v32)
            goto LABEL_51;
          LODWORD(v33) = ((v23 >> 4) ^ (v23 >> 9)) & (v32 - 1);
          v34 = (uint64_t *)(v31 + 16 * v33);
          v35 = *v34;
          if (v23 != *v34)
          {
            v40 = 1;
            while (v35 != -4096)
            {
              v41 = v33 + v40++;
              v33 = v41 & (v32 - 1);
              v35 = *(_QWORD *)(v31 + 16 * v33);
              if (v23 == v35)
              {
                v34 = (uint64_t *)(v31 + 16 * v33);
                goto LABEL_42;
              }
            }
LABEL_51:
            v34 = (uint64_t *)(v31 + 16 * v32);
          }
LABEL_42:
          v36 = v34[1];
          v37 = *((unsigned int *)this + 112);
          if (v37 >= *((unsigned int *)this + 113))
          {
            v55 = v34[1];
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 440, (uint64_t)this + 456, v37 + 1, 8);
            v36 = v55;
            v37 = *((unsigned int *)this + 112);
          }
          *(_QWORD *)(*((_QWORD *)this + 55) + 8 * v37) = v36 & 0xFFFFFFFFFFFFFFF8 | 4;
          ++*((_DWORD *)this + 112);
          v38 = *(_QWORD *)(v15 + 16);
          v39 = *((unsigned int *)this + 132);
          if (v39 >= *((unsigned int *)this + 133))
          {
            v56 = *(_QWORD *)(v15 + 16);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 520, (uint64_t)this + 536, v39 + 1, 8);
            v38 = v56;
            v39 = *((unsigned int *)this + 132);
          }
          *(_QWORD *)(*((_QWORD *)this + 65) + 8 * v39) = v38;
          ++*((_DWORD *)this + 132);
LABEL_17:
          v15 += 32;
        }
        while (v15 != v16);
        if (i)
        {
LABEL_19:
          if ((*(_BYTE *)i & 4) == 0)
            goto LABEL_20;
        }
        else
        {
LABEL_20:
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v17 = *((_QWORD *)this + 33);
      if (sub_1C498FBAC(v7))
      {
        if (*(_QWORD *)(v7 + 88) != *(_QWORD *)(v7 + 96))
        {
          v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
          if (v18)
          {
            v19 = v18;
            v20 = v6;
            v21 = *v12 & 0xFFFFFFFFFFFFFFF8;
            if (!v21 || (*(_BYTE *)v21 & 4) == 0)
            {
              while ((*(_WORD *)(v21 + 44) & 4) != 0)
                v21 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8;
            }
            v52 = sub_1C4A07EAC(*((_QWORD *)this + 36), v21, 0);
            v53 = *((unsigned int *)this + 112);
            if (v53 >= *((unsigned int *)this + 113))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 440, (uint64_t)this + 456, v53 + 1, 8);
              v53 = *((unsigned int *)this + 112);
            }
            *(_QWORD *)(*((_QWORD *)this + 55) + 8 * v53) = v52 & 0xFFFFFFFFFFFFFFF8 | 4;
            ++*((_DWORD *)this + 112);
            v54 = *((unsigned int *)this + 132);
            if (v54 >= *((unsigned int *)this + 133))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 520, (uint64_t)this + 536, v54 + 1, 8);
              v54 = *((unsigned int *)this + 132);
            }
            *(_QWORD *)(*((_QWORD *)this + 65) + 8 * v54) = v19;
            ++*((_DWORD *)this + 132);
            v6 = v20;
          }
        }
      }
      v8 = *((_DWORD *)this + 112);
      *(_DWORD *)(v10 + 8 * v9 + 4) = v8 - *v11;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while ((_QWORD *)v7 != v6);
  }
}

void llvm::LiveIntervals::computeLiveInRegUnits(llvm::LiveIntervals *this)
{
  llvm::LiveIntervals *v1;
  _QWORD *v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  llvm::LiveIntervals *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _WORD *v14;
  unsigned __int16 *v15;
  __int16 v16;
  unsigned __int16 v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[5];

  v1 = this;
  v34[4] = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)((char *)this + 680);
  v3 = *(unsigned int *)(*((_QWORD *)this + 33) + 44);
  v4 = *((_DWORD *)this + 172);
  if (v4 != (_DWORD)v3)
  {
    if (v4 <= v3)
    {
      if (*((_DWORD *)this + 173) < v3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 680, (uint64_t)this + 696, v3, 8);
        v4 = *((_DWORD *)v1 + 172);
      }
      if (v4 != (_DWORD)v3)
        bzero((void *)(*v2 + 8 * v4), 8 * (v3 - v4));
    }
    *((_DWORD *)v1 + 172) = v3;
  }
  v32 = v34;
  v33 = 0x800000000;
  v5 = *((_QWORD *)v1 + 31);
  v6 = *(_QWORD *)(v5 + 328);
  v28 = v5 + 320;
  if (v6 != v5 + 320)
  {
    v7 = (uint64_t)v1 + 312;
    do
    {
      v29 = v6;
      if (v6 == *(_QWORD *)(*((_QWORD *)v1 + 31) + 328) || *(_BYTE *)(v6 + 184))
      {
        v8 = *(_WORD **)(v6 + 152);
        v30 = *(_WORD **)(v6 + 160);
        if (v8 != v30)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 36) + 392) + 16 * *(unsigned int *)(v6 + 24));
          do
          {
            v10 = v1;
            v11 = *((_QWORD *)v1 + 33);
            if (v11)
              v12 = (_QWORD *)(v11 + 8);
            else
              v12 = 0;
            v13 = *(unsigned int *)(*v12 + 24 * (unsigned __int16)*v8 + 16);
            v14 = (_WORD *)(v12[6] + ((v13 >> 3) & 0x1FFFFFFE));
            v16 = *v14;
            v15 = v14 + 1;
            v17 = v16 + (v13 & 0xF) * *v8;
            do
            {
              v18 = v17;
              v19 = v17;
              v20 = *(uint64_t **)(*v2 + 8 * v17);
              if (!v20)
              {
                v20 = (uint64_t *)operator new();
                v21 = byte_1ED82F170;
                *v20 = (uint64_t)(v20 + 2);
                v20[1] = 0x200000000;
                v20[8] = (uint64_t)(v20 + 10);
                v20[9] = 0x200000000;
                if (v21)
                {
                  v22 = (_QWORD *)operator new();
                  v22[2] = 0;
                  v22[1] = 0;
                  *v22 = v22 + 1;
                }
                else
                {
                  v22 = 0;
                }
                v20[12] = (uint64_t)v22;
                *(_QWORD *)(*v2 + 8 * v19) = v20;
                v23 = v33;
                if (v33 >= (unint64_t)HIDWORD(v33))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v33 + 1, 4);
                  v23 = v33;
                }
                *((_DWORD *)v32 + v23) = v18;
                LODWORD(v33) = v33 + 1;
              }
              if (v20[12])
              {
                v31 = v20;
                sub_1C510A3C0((uint64_t *)&v31, v9, v7, 0);
              }
              else
              {
                v31 = v20;
                sub_1C510A6B8(&v31, v9, v7, 0);
              }
              v24 = *v15++;
              v17 = v24 + v18;
            }
            while (v24);
            v8 += 8;
            v1 = v10;
          }
          while (v8 != v30);
        }
      }
      v6 = *(_QWORD *)(v29 + 8);
    }
    while (v6 != v28);
    v25 = (unsigned int *)v32;
    if ((_DWORD)v33)
    {
      v26 = 4 * v33;
      do
      {
        v27 = *v25++;
        llvm::LiveIntervals::computeRegUnitRange(v1, *(llvm::LiveRange **)(*((_QWORD *)v1 + 85) + 8 * v27), v27);
        v26 -= 4;
      }
      while (v26);
      v25 = (unsigned int *)v32;
    }
    if (v25 != (unsigned int *)v34)
      free(v25);
  }
}

void llvm::LiveIntervals::printInstrs(llvm::LiveIntervals *this, llvm::raw_ostream *a2)
{
  void *v4;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0x23uLL)
  {
    qmemcpy(v4, "********** MACHINEINSTRS **********\n", 36);
    *((_QWORD *)a2 + 4) += 36;
  }
  else
  {
    llvm::raw_ostream::write(a2, "********** MACHINEINSTRS **********\n", 0x24uLL);
  }
  llvm::MachineFunction::print(*((llvm::Value ***)this + 31), a2, *((const llvm::SlotIndexes **)this + 36));
}

double llvm::LiveIntervals::createInterval(int a1)
{
  float v2;
  uint64_t v3;
  double result;

  if ((a1 - 1) >= 0x3FFFFFFF)
    v2 = 0.0;
  else
    v2 = INFINITY;
  v3 = operator new();
  *(_QWORD *)v3 = v3 + 16;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(v3 + 8) = 0x200000000;
  *(_QWORD *)(v3 + 64) = v3 + 80;
  *(_QWORD *)(v3 + 72) = 0x200000000;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_DWORD *)(v3 + 112) = a1;
  *(float *)(v3 + 116) = v2;
  return result;
}

uint64_t llvm::LiveIntervals::computeVirtRegInterval(llvm::LiveIntervals *this, llvm::LiveInterval *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;

  v4 = *((_QWORD *)this + 38);
  v5 = *((_QWORD *)this + 31);
  v6 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 8) = v6;
  *(_OWORD *)(v4 + 16) = *((_OWORD *)this + 18);
  *(_QWORD *)(v4 + 32) = (char *)this + 312;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v4);
  *(_DWORD *)(v4 + 184) = 0;
  v7 = *((_QWORD *)this + 32);
  v9 = *(_BYTE *)(v7 + 16) == 0;
  v8 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * (*((_DWORD *)a2 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                          + 34);
  v9 = v9 || v8 == 0;
  v10 = !v9;
  llvm::LiveIntervalCalc::calculate(*((llvm::LiveIntervalCalc **)this + 38), a2, v10);
  return llvm::LiveIntervals::computeDeadValues((uint64_t)this, (uint64_t)a2, 0);
}

uint64_t llvm::LiveIntervals::computeDeadValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;
  unint64_t v34;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;

  v3 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v3)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(uint64_t **)(a2 + 64);
    v10 = &v9[v3];
    while (1)
    {
      v11 = *v9;
      v12 = *(_QWORD *)(*v9 + 8);
      if (v12 >= 8)
        break;
LABEL_33:
      if (++v9 == v10)
        return v7 & 1;
    }
    v13 = *(_DWORD *)(a2 + 8);
    v14 = *(_QWORD **)a2;
    if (v13)
    {
      v15 = v14[3 * v13 - 2];
      v16 = *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (v12 >> 1) & 3;
      v17 = (v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
      v18 = *(_QWORD **)a2;
      v19 = *(unsigned int *)(a2 + 8);
      if (v16 < v17)
      {
        do
        {
          v20 = v19 >> 1;
          v21 = v18[3 * (v19 >> 1) + 1];
          LODWORD(v21) = (v21 >> 1) & 3 | *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
          v19 -= (v19 >> 1) + 1;
          v22 = v16 >= v21;
          if (v16 >= v21)
            v23 = v20 + 1;
          else
            v23 = 0;
          v18 += 3 * v23;
          if (!v22)
            v19 = v20;
        }
        while (v19);
LABEL_12:
        v24 = &v14[3 * v13];
        if (v18 == v24
          || ((*v18 >> 1) & 3 | *(_DWORD *)((*v18 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (v12 >> 1) & 3))
        {
          v18 = v24;
        }
        v25 = *(_QWORD *)(a1 + 256);
        if (*(_BYTE *)(v25 + 16))
        {
          v26 = *(_DWORD *)(a2 + 112);
          if (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v25 + 24) + 16 * (v26 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 34))
          {
            if (v18 == v14)
            {
              if ((v12 & 6) == 0)
                goto LABEL_32;
              v27 = v12 & 0xFFFFFFFFFFFFFFF8;
            }
            else
            {
              if ((v12 & 6) == 0)
                goto LABEL_32;
              v27 = v12 & 0xFFFFFFFFFFFFFFF8;
              if (((*(v18 - 2) >> 1) & 3 | *(_DWORD *)((*(v18 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (v12 >> 1) & 3))
                goto LABEL_32;
            }
            v28 = *(_QWORD *)(v27 + 16);
            v29 = *(unsigned int *)(v28 + 40);
            if ((_DWORD)v29)
            {
              v30 = *(int **)(v28 + 32);
              v31 = 32 * v29;
              do
              {
                v32 = *v30;
                if ((*v30 & 0x10000FF) == 0x1000000 && (v32 & 0xFFF00) != 0 && v30[1] == v26)
                  *v30 = v32 | 0x10000000;
                v30 += 8;
                v31 -= 32;
              }
              while (v31);
            }
          }
        }
LABEL_32:
        v34 = v12 & 0xFFFFFFFFFFFFFFF8;
        if (v18[1] == (v34 | 6))
        {
          if ((*(_BYTE *)(v11 + 8) & 6) != 0)
          {
            v43 = *(_QWORD *)(v34 + 16);
            llvm::MachineInstr::addRegisterDead((llvm::MachineInstr *)v43, *(_DWORD *)(a2 + 112), *(_QWORD *)(a1 + 264), 0);
            v7 |= v8;
            if (a3)
            {
              v36 = *(unsigned int *)(v43 + 40);
              if ((_DWORD)v36)
              {
                v37 = *(_DWORD **)(v43 + 32);
                v38 = 32 * v36;
                while ((*v37 & 0x10000FF) != 0x1000000 || (*v37 & 0x5000000) == 83886080)
                {
                  v37 += 8;
                  v38 -= 32;
                  if (!v38)
                    goto LABEL_50;
                }
              }
              else
              {
LABEL_50:
                v40 = *(unsigned int *)(a3 + 8);
                if (v40 >= *(unsigned int *)(a3 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v40 + 1, 8);
                  v40 = *(unsigned int *)(a3 + 8);
                }
                *(_QWORD *)(*(_QWORD *)a3 + 8 * v40) = v43;
                ++*(_DWORD *)(a3 + 8);
              }
            }
            v8 = 1;
          }
          else
          {
            *(_QWORD *)(v11 + 8) = 0;
            v41 = *(_DWORD *)(a2 + 8);
            v42 = *(_QWORD *)a2 + 24 * v41;
            if ((_QWORD *)v42 != v18 + 3)
            {
              memmove(v18, v18 + 3, v42 - (_QWORD)(v18 + 3));
              v41 = *(_DWORD *)(a2 + 8);
            }
            *(_DWORD *)(a2 + 8) = v41 - 1;
            v7 = 1;
          }
        }
        goto LABEL_33;
      }
    }
    else
    {
      v13 = 0;
    }
    v18 = &v14[3 * v13];
    goto LABEL_12;
  }
  v7 = 0;
  return v7 & 1;
}

void llvm::LiveIntervals::splitSeparateComponents(uint64_t a1, const llvm::LiveRange *a2, uint64_t a3)
{
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t IncompleteVirtualRegister;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _DWORD v17[10];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14 = a1;
  v15 = v17;
  v16 = 0x800000000;
  v17[8] = 0;
  v6 = llvm::ConnectedVNInfoEqClasses::Classify((llvm::ConnectedVNInfoEqClasses *)&v14, a2);
  if (v6 >= 2)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 24) + 16 * (*((_DWORD *)a2 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    v8 = v6 - 1;
    do
    {
      v9 = *(_QWORD *)(a1 + 256);
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v9, (unsigned __int8 *)&unk_1C86AC881, 0);
      *(_QWORD *)(*(_QWORD *)(v9 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v7;
      v11 = *(_QWORD *)(v9 + 8);
      if (v11)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v11, IncompleteVirtualRegister);
      v12 = sub_1C4851220(a1, IncompleteVirtualRegister);
      v13 = *(unsigned int *)(a3 + 8);
      if (v13 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v13 + 1, 8);
        v13 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v13) = v12;
      ++*(_DWORD *)(a3 + 8);
      --v8;
    }
    while (v8);
    llvm::ConnectedVNInfoEqClasses::Distribute((llvm::ConnectedVNInfoEqClasses *)&v14, a2, *(llvm::LiveInterval ***)a3, *(llvm::MachineRegisterInfo **)(a1 + 256));
  }
  if (v15 != v17)
    free(v15);
}

void llvm::LiveIntervals::computeRegUnitRange(llvm::LiveIntervals *this, llvm::LiveRange *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  char v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 v33;
  int v34;
  BOOL v35;
  uint64_t v36;

  v6 = *((_QWORD *)this + 38);
  v7 = *((_QWORD *)this + 31);
  v8 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)v6 = v7;
  *(_QWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 16) = *((_OWORD *)this + 18);
  *(_QWORD *)(v6 + 32) = (char *)this + 312;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v6);
  *(_DWORD *)(v6 + 184) = 0;
  v9 = *((_QWORD *)this + 33);
  v10 = v9 + 8;
  if (!v9)
    v10 = 0;
  v11 = *(_QWORD *)(v10 + 40);
  v12 = a3;
  v13 = *(_WORD *)(v11 + 4 * a3);
  if (!v13)
    goto LABEL_17;
  v14 = 0;
  v15 = *(_WORD *)(v11 + 4 * a3 + 2);
  do
  {
    v16 = v15;
    v17 = *((_QWORD *)this + 33);
    v18 = (_QWORD *)(v17 + 8);
    if (!v17)
      v18 = 0;
    v19 = v18[6];
    if (v19)
    {
      v20 = (unsigned __int16 *)(v19 + 2 * *(unsigned int *)(*v18 + 24 * v13 + 8));
      v21 = *((_QWORD *)this + 32);
      v22 = 1;
      do
      {
        v23 = v13;
        if (*(_QWORD *)(*(_QWORD *)(v21 + 272) + 8 * v13))
        {
          llvm::LiveIntervalCalc::createDeadDefs(*((_QWORD **)this + 38), (uint64_t *)a2, v13);
          v21 = *((_QWORD *)this + 32);
        }
        v22 &= *(_QWORD *)(*(_QWORD *)(v21 + 352) + ((v23 >> 3) & 0x1FF8)) >> v23;
        v24 = *v20++;
        v13 = v24 + v23;
      }
      while (v24);
    }
    else
    {
      v22 = 1;
    }
    v15 = 0;
    v14 |= v22;
    v13 = v16;
  }
  while (v16);
  if ((v14 & 1) == 0)
  {
    v9 = *((_QWORD *)this + 33);
LABEL_17:
    v25 = v9 + 8;
    if (!v9)
      v25 = 0;
    v26 = *(_QWORD *)(v25 + 40);
    v27 = *(_WORD *)(v26 + 4 * v12);
    if (v27)
    {
      v28 = *(_WORD *)(v26 + 4 * v12 + 2);
      do
      {
        v29 = *((_QWORD *)this + 33);
        v30 = (_QWORD *)(v29 + 8);
        if (!v29)
          v30 = 0;
        v31 = v30[6];
        if (v31)
        {
          v32 = (unsigned __int16 *)(v31 + 2 * *(unsigned int *)(*v30 + 24 * v27 + 8));
          do
          {
            v33 = v27;
            if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 272) + 8 * v27))
              llvm::LiveIntervalCalc::extendToUses(*((llvm::LiveRangeCalc **)this + 38), (uint64_t *)a2, v27, -1, 0);
            v34 = *v32++;
            v27 = v34 + v33;
          }
          while (v34);
        }
        v27 = v28;
        v35 = v28 == 0;
        v28 = 0;
      }
      while (!v35);
    }
  }
  if (byte_1ED82F170)
  {
    sub_1C510CBC8((unsigned int *)a2, **((_QWORD ***)a2 + 12), (_QWORD *)(*((_QWORD *)a2 + 12) + 8));
    v36 = *((_QWORD *)a2 + 12);
    *((_QWORD *)a2 + 12) = 0;
    if (v36)
    {
      sub_1C47655E8(v36, *(_QWORD **)(v36 + 8));
      JUMPOUT(0x1CAA32FC0);
    }
  }
}

void llvm::LiveIntervals::extendSegmentsToUses(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t i;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  BOOL v69;
  int v70;
  _QWORD v71[3];
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  int v75;
  _BYTE v76[128];
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  int v80;
  _BYTE v81[72];

  v77 = v81;
  v78 = v81;
  v79 = 8;
  v80 = 0;
  v72 = v76;
  v73 = v76;
  v74 = 16;
  v75 = 0;
  if ((a4 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a1 + 416)
    && (v9 = *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * (a4 & 0x7FFFFFFF))) != 0)
  {
    if (!a5)
      goto LABEL_7;
  }
  else
  {
    v9 = sub_1C4851220(a1, a4);
    v65 = *(_QWORD *)(a1 + 304);
    v66 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)v65 = v66;
    *(_QWORD *)(v65 + 8) = *(_QWORD *)(v66 + 40);
    *(_OWORD *)(v65 + 16) = *(_OWORD *)(a1 + 288);
    *(_QWORD *)(v65 + 32) = a1 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v65);
    *(_DWORD *)(v65 + 184) = 0;
    v67 = *(_QWORD *)(a1 + 256);
    v69 = *(_BYTE *)(v67 + 16) == 0;
    v68 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v67 + 24) + 16 * (*(_DWORD *)(v9 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                             + 34);
    v69 = v69 || v68 == 0;
    v70 = !v69;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a1 + 304), (llvm::LiveInterval *)v9, v70);
    llvm::LiveIntervals::computeDeadValues(a1, v9, 0);
    if (!a5)
      goto LABEL_7;
  }
  for (i = *(_QWORD *)(v9 + 104); i; i = *(_QWORD *)(i + 104))
  {
    v9 = i;
    if ((*(_QWORD *)(i + 112) & a5) != 0)
      break;
  }
LABEL_7:
  v11 = *(_DWORD *)(a3 + 8);
  if (v11)
  {
    while (1)
    {
      v12 = *(_QWORD *)a3 + 16 * v11;
      v14 = *(_QWORD *)(v12 - 16);
      v13 = *(_QWORD *)(v12 - 8);
      *(_DWORD *)(a3 + 8) = v11 - 1;
      v15 = (v14 >> 1) & 3;
      v16 = v14 & 0xFFFFFFFFFFFFFFF8;
      v17 = v15 ? v16 | (2 * (v15 - 1)) : *(_QWORD *)v16 | 6;
      v18 = sub_1C499C548(*(_QWORD *)(a1 + 288), v17);
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 392) + 16 * *(unsigned int *)(v18 + 24));
      if (!llvm::LiveRange::extendInBlock(a2, v19, v14))
        break;
      v20 = *(_QWORD *)(v13 + 8);
      if ((v20 & 6) == 0 && v20 == v19)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v77, v13);
        if (v21)
        {
          v22 = *(uint64_t **)(v18 + 64);
          v23 = *(uint64_t **)(v18 + 72);
          while (1)
          {
            if (v22 == v23)
              goto LABEL_63;
            v24 = *v22;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v72, *v22);
            if (v25)
              break;
LABEL_37:
            ++v22;
          }
          v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 392) + 16 * *(unsigned int *)(v24 + 24) + 8);
          v27 = (v26 >> 1) & 3;
          v28 = v26 & 0xFFFFFFFFFFFFFFF8;
          if (v27)
            v29 = v28 | (2 * (v27 - 1));
          else
            v29 = *(_QWORD *)v28 | 6;
          v30 = *(_DWORD *)(v9 + 8);
          v31 = *(_QWORD **)v9;
          if (v30)
          {
            v32 = v31[3 * v30 - 2];
            v33 = *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24) | (v29 >> 1) & 3;
            v34 = (v32 >> 1) & 3 | *(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 24);
            v35 = *(_QWORD **)v9;
            v36 = *(unsigned int *)(v9 + 8);
            if (v33 < v34)
            {
              do
              {
                v37 = v36 >> 1;
                v38 = v35[3 * (v36 >> 1) + 1];
                LODWORD(v38) = (v38 >> 1) & 3 | *(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFF8) + 24);
                v36 -= (v36 >> 1) + 1;
                v39 = v33 >= v38;
                if (v33 >= v38)
                  v40 = v37 + 1;
                else
                  v40 = 0;
                v35 += 3 * v40;
                if (!v39)
                  v36 = v37;
              }
              while (v36);
              goto LABEL_31;
            }
          }
          else
          {
            v30 = 0;
          }
          v35 = &v31[3 * v30];
LABEL_31:
          if (v35 != &v31[3 * v30]
            && ((*v35 >> 1) & 3 | *(_DWORD *)((*v35 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24) | (v29 >> 1) & 3))
          {
            v41 = v35[2];
            if (v41)
            {
              v42 = *(unsigned int *)(a3 + 8);
              if (v42 >= *(unsigned int *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v42 + 1, 16);
                v42 = *(unsigned int *)(a3 + 8);
              }
              v43 = (_QWORD *)(*(_QWORD *)a3 + 16 * v42);
              *v43 = v26;
              v43[1] = v41;
              ++*(_DWORD *)(a3 + 8);
            }
          }
          goto LABEL_37;
        }
      }
LABEL_63:
      v11 = *(_DWORD *)(a3 + 8);
      if (!v11)
        goto LABEL_64;
    }
    v71[0] = v19;
    v71[1] = v14;
    v71[2] = v13;
    llvm::LiveRange::addSegment(a2, (uint64_t)v71);
    v45 = *(uint64_t **)(v18 + 64);
    v44 = *(uint64_t **)(v18 + 72);
    while (1)
    {
      if (v45 == v44)
        goto LABEL_63;
      v46 = *v45;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v72, *v45);
      if (v47)
        break;
LABEL_61:
      ++v45;
    }
    v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 392) + 16 * *(unsigned int *)(v46 + 24) + 8);
    v49 = (v48 >> 1) & 3;
    v50 = v48 & 0xFFFFFFFFFFFFFFF8;
    if (v49)
      v51 = v50 | (2 * (v49 - 1));
    else
      v51 = *(_QWORD *)v50 | 6;
    v52 = *(_DWORD *)(v9 + 8);
    v53 = *(_QWORD **)v9;
    if (v52)
    {
      v54 = v53[3 * v52 - 2];
      v55 = *(_DWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 24) | (v51 >> 1) & 3;
      v56 = (v54 >> 1) & 3 | *(_DWORD *)((v54 & 0xFFFFFFFFFFFFFFF8) + 24);
      v57 = *(_QWORD **)v9;
      v58 = *(unsigned int *)(v9 + 8);
      if (v55 < v56)
      {
        do
        {
          v59 = v58 >> 1;
          v60 = v57[3 * (v58 >> 1) + 1];
          LODWORD(v60) = (v60 >> 1) & 3 | *(_DWORD *)((v60 & 0xFFFFFFFFFFFFFFF8) + 24);
          v58 -= (v58 >> 1) + 1;
          v61 = v55 >= v60;
          if (v55 >= v60)
            v62 = v59 + 1;
          else
            v62 = 0;
          v57 += 3 * v62;
          if (!v61)
            v58 = v59;
        }
        while (v58);
        goto LABEL_55;
      }
    }
    else
    {
      v52 = 0;
    }
    v57 = &v53[3 * v52];
LABEL_55:
    if (v57 != &v53[3 * v52]
      && ((*v57 >> 1) & 3 | *(_DWORD *)((*v57 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 24) | (v51 >> 1) & 3)
      && v57[2])
    {
      v63 = *(unsigned int *)(a3 + 8);
      if (v63 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v63 + 1, 16);
        v63 = *(unsigned int *)(a3 + 8);
      }
      v64 = (_QWORD *)(*(_QWORD *)a3 + 16 * v63);
      *v64 = v48;
      v64[1] = v13;
      ++*(_DWORD *)(a3 + 8);
    }
    goto LABEL_61;
  }
LABEL_64:
  if (v73 != v72)
    free(v73);
  if (v78 != v77)
    free(v78);
}

llvm::LiveInterval *sub_1C5104FB8(uint64_t a1, int a2)
{
  llvm::LiveInterval *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;

  if ((a2 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(a1 + 416)
    || (v2 = *(llvm::LiveInterval **)(*(_QWORD *)(a1 + 408) + 8 * (a2 & 0x7FFFFFFF))) == 0)
  {
    v2 = (llvm::LiveInterval *)sub_1C4851220(a1, a2);
    v5 = *(_QWORD *)(a1 + 304);
    v6 = *(_QWORD *)(a1 + 248);
    v7 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)v5 = v6;
    *(_QWORD *)(v5 + 8) = v7;
    *(_OWORD *)(v5 + 16) = *(_OWORD *)(a1 + 288);
    *(_QWORD *)(v5 + 32) = a1 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v5);
    *(_DWORD *)(v5 + 184) = 0;
    v8 = *(_QWORD *)(a1 + 256);
    v10 = *(_BYTE *)(v8 + 16) == 0;
    v9 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v8 + 24) + 16 * (*((_DWORD *)v2 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                            + 34);
    v10 = v10 || v9 == 0;
    v11 = !v10;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a1 + 304), v2, v11);
    llvm::LiveIntervals::computeDeadValues(a1, (uint64_t)v2, 0);
  }
  return v2;
}

uint64_t llvm::LiveIntervals::shrinkToUses(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  _QWORD *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v62[3];
  void *v63[2];
  _BYTE v64[48];
  void *v65;
  uint64_t v66;
  _BYTE v67[16];
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _QWORD v71[34];

  v71[32] = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t *)(a2 + 104);
  v6 = *(_QWORD *)(a2 + 104);
  if (!v6)
    goto LABEL_19;
  v8 = 0;
  do
  {
    llvm::LiveIntervals::shrinkToUses(a1, v6, *(_DWORD *)(a2 + 112));
    v8 |= *(_DWORD *)(v6 + 8) == 0;
    v6 = *(_QWORD *)(v6 + 104);
  }
  while (v6);
  if ((v8 & 1) == 0)
    goto LABEL_19;
  v9 = *v7;
  if (!*v7)
    goto LABEL_19;
  while (1)
  {
    v12 = v9;
    if (!*(_DWORD *)(v9 + 8))
      break;
LABEL_18:
    v7 = (uint64_t *)(v9 + 104);
    v9 = *(_QWORD *)(v9 + 104);
    if (!v9)
      goto LABEL_19;
  }
  while (1)
  {
    v10 = *(_QWORD *)(v12 + 96);
    v9 = *(_QWORD *)(v12 + 104);
    *(_QWORD *)(v12 + 96) = 0;
    if (v10)
    {
      sub_1C47655E8(v10, *(_QWORD **)(v10 + 8));
      MEMORY[0x1CAA32FC0](v10, 0x1020C4062D53EE8);
    }
    v11 = *(void **)(v12 + 64);
    if (v11 != (void *)(v12 + 80))
      free(v11);
    if (*(_QWORD *)v12 == v12 + 16)
      break;
    free(*(void **)v12);
    if (!v9)
      goto LABEL_94;
LABEL_15:
    v12 = v9;
    if (*(_DWORD *)(v9 + 8))
    {
      *v7 = v9;
      goto LABEL_18;
    }
  }
  if (v9)
    goto LABEL_15;
LABEL_94:
  *v7 = 0;
LABEL_19:
  v69 = v71;
  v70 = 0x1000000000;
  v13 = *(unsigned int *)(a2 + 112);
  v14 = a1[32];
  if ((v13 & 0x80000000) != 0)
    v15 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
  else
    v15 = (uint64_t *)(*(_QWORD *)(v14 + 272) + 8 * v13);
  v16 = *v15;
  if (!*v15)
    goto LABEL_80;
  v17 = *(_QWORD *)(v16 + 8);
LABEL_24:
  if (**(unsigned __int16 **)(v17 + 16) - 13 < 5
    || (llvm::MachineInstr::readsWritesVirtualRegister(v17, v13, 0) & 1) == 0)
  {
    goto LABEL_72;
  }
  v18 = *(_WORD *)(v17 + 44);
  v19 = v17;
  if ((v18 & 4) != 0)
  {
    do
      v19 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v19 + 44) & 4) != 0);
  }
  if ((v18 & 8) != 0)
  {
    do
      v17 = *(_QWORD *)(v17 + 8);
    while ((*(_WORD *)(v17 + 44) & 8) != 0);
  }
  v20 = *(_QWORD *)(v17 + 8);
  if (v19 != v20)
  {
    while (1)
    {
      v21 = **(unsigned __int16 **)(v19 + 16);
      v22 = v21 > 0x17;
      v23 = (1 << v21) & 0x83E000;
      if (v22 || v23 == 0)
        break;
      v19 = *(_QWORD *)(v19 + 8);
      if (v19 == v20)
      {
        v19 = *(_QWORD *)(v17 + 8);
        break;
      }
    }
  }
  v25 = a1[36];
  v26 = *(_QWORD *)(v25 + 368);
  v27 = *(unsigned int *)(v25 + 384);
  if ((_DWORD)v27)
  {
    LODWORD(v28) = ((v19 >> 4) ^ (v19 >> 9)) & (v27 - 1);
    v29 = (uint64_t *)(v26 + 16 * v28);
    v30 = *v29;
    if (v19 != *v29)
    {
      v31 = 1;
      while (v30 != -4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v27 - 1);
        v30 = *(_QWORD *)(v26 + 16 * v28);
        if (v19 == v30)
        {
          v29 = (uint64_t *)(v26 + 16 * v28);
          goto LABEL_42;
        }
      }
      goto LABEL_41;
    }
  }
  else
  {
LABEL_41:
    v29 = (uint64_t *)(v26 + 16 * v27);
  }
LABEL_42:
  v33 = v29[1] & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_DWORD *)(a2 + 8);
  v35 = *(_QWORD **)a2;
  if (!v34)
  {
    v34 = 0;
    goto LABEL_52;
  }
  v36 = v35[3 * v34 - 2];
  v37 = *(_DWORD *)(v33 + 24);
  v38 = (v36 >> 1) & 3 | *(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFF8) + 24);
  v39 = *(_QWORD **)a2;
  v40 = *(unsigned int *)(a2 + 8);
  if (v37 >= v38)
  {
LABEL_52:
    v39 = &v35[3 * v34];
    goto LABEL_53;
  }
  do
  {
    v41 = v40 >> 1;
    v42 = v39[3 * (v40 >> 1) + 1];
    LODWORD(v42) = (v42 >> 1) & 3 | *(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFF8) + 24);
    v40 -= (v40 >> 1) + 1;
    v43 = v37 >= v42;
    if (v37 >= v42)
      v44 = v41 + 1;
    else
      v44 = 0;
    v39 += 3 * v44;
    if (!v43)
      v40 = v41;
  }
  while (v40);
LABEL_53:
  v45 = &v35[3 * v34];
  if (v39 == v45)
    goto LABEL_72;
  v46 = *(_DWORD *)((*v39 & 0xFFFFFFFFFFFFFFF8) + 24);
  v47 = *(_DWORD *)(v33 + 24);
  if (((*v39 >> 1) & 3 | v46) > v47)
  {
    v48 = 0;
  }
  else
  {
    v48 = v39[2];
    if (v33 == (v39[1] & 0xFFFFFFFFFFFFFFF8))
    {
      v39 += 3;
      if (v39 != v45)
      {
        v46 = *(_DWORD *)((*v39 & 0xFFFFFFFFFFFFFFF8) + 24);
        goto LABEL_58;
      }
LABEL_65:
      v49 = 0;
      if (v48)
        goto LABEL_66;
      goto LABEL_72;
    }
LABEL_58:
    if (*(_QWORD *)(v48 + 8) == v33)
      v48 = 0;
  }
  if (v47 < v46)
    goto LABEL_65;
  v49 = v39[2];
  if (v48)
  {
LABEL_66:
    v50 = v33 | 4;
    if (v49 && v48 != v49)
      v50 = *(_QWORD *)(v49 + 8);
    v51 = v70;
    if (v70 >= (unint64_t)HIDWORD(v70))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, (uint64_t)v71, v70 + 1, 16);
      v51 = v70;
    }
    v52 = (uint64_t *)((char *)v69 + 16 * v51);
    *v52 = v50;
    v52[1] = v48;
    LODWORD(v70) = v70 + 1;
  }
LABEL_72:
  v53 = *(_QWORD *)(v16 + 8);
  while (1)
  {
    v16 = *(_QWORD *)(v16 + 24);
    if (!v16)
      break;
    v17 = *(_QWORD *)(v16 + 8);
    if (v17 != v53)
      goto LABEL_24;
  }
LABEL_80:
  v63[0] = v64;
  v63[1] = (void *)0x200000000;
  v65 = v67;
  v66 = 0x200000000;
  v68 = 0;
  v54 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v54)
  {
    v55 = *(uint64_t **)(a2 + 64);
    v56 = 8 * v54;
    do
    {
      v57 = *v55;
      v58 = *(_QWORD *)(*v55 + 8);
      if (v58 >= 8)
      {
        v62[0] = *(_QWORD *)(*v55 + 8);
        v62[1] = v58 & 0xFFFFFFFFFFFFFFF8 | 6;
        v62[2] = v57;
        llvm::LiveRange::addSegment((uint64_t)v63, (uint64_t)v62);
      }
      ++v55;
      v56 -= 8;
    }
    while (v56);
  }
  llvm::LiveIntervals::extendSegmentsToUses((uint64_t)a1, (uint64_t)v63, (uint64_t)&v69, v13, 0);
  sub_1C5105CA0((_DWORD *)a2, (uint64_t)v63);
  v59 = llvm::LiveIntervals::computeDeadValues((uint64_t)a1, a2, a3);
  v60 = v68;
  v68 = 0;
  if (v60)
  {
    sub_1C47655E8(v60, *(_QWORD **)(v60 + 8));
    MEMORY[0x1CAA32FC0](v60, 0x1020C4062D53EE8);
  }
  if (v65 != v67)
    free(v65);
  if (v63[0] != v64)
    free(v63[0]);
  if (v69 != v71)
    free(v69);
  return v59;
}

void llvm::LiveIntervals::shrinkToUses(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  int **v7;
  int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t i;
  unsigned int v46;
  unint64_t v47;
  __int16 v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  BOOL v52;
  int v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  char *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  char *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  int *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87[2];
  _BYTE v88[48];
  void *v89;
  uint64_t v90;
  _BYTE v91[16];
  uint64_t v92;
  void *v93;
  uint64_t v94;
  _QWORD v95[33];

  v95[32] = *MEMORY[0x1E0C80C00];
  v93 = v95;
  v94 = 0x1000000000;
  v5 = a1[32];
  if ((a3 & 0x80000000) != 0)
    v7 = (int **)(*(_QWORD *)(v5 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  else
    v7 = (int **)(*(_QWORD *)(v5 + 272) + 8 * a3);
  v8 = *v7;
  if (v8)
  {
    while (1)
    {
      v9 = *v8;
      if ((*v8 & 0x81000000) == 0)
        break;
      v8 = (int *)*((_QWORD *)v8 + 3);
      if (!v8)
        goto LABEL_7;
    }
    v44 = 0;
    for (i = 0; ; i = v64)
    {
      if ((v9 & 0x30000000) != 0)
        goto LABEL_86;
      if ((v9 & 0x10FFF00) == 0x1000000)
        goto LABEL_86;
      v46 = (v9 >> 8) & 0xFFF;
      if (v46)
      {
        if ((*(_QWORD *)(a2 + 112) & *(_QWORD *)(*(_QWORD *)(a1[33] + 232) + 8 * v46)) == 0)
          goto LABEL_86;
      }
      v47 = *((_QWORD *)v8 + 1);
      v48 = *(_WORD *)(v47 + 44);
      v49 = v47;
      if ((v48 & 4) != 0)
      {
        do
          v49 = *(_QWORD *)v49 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v49 + 44) & 4) != 0);
      }
      if ((v48 & 8) != 0)
      {
        do
          v47 = *(_QWORD *)(v47 + 8);
        while ((*(_WORD *)(v47 + 44) & 8) != 0);
      }
      v50 = *(_QWORD *)(v47 + 8);
      if (v49 != v50)
      {
        do
        {
          v51 = **(unsigned __int16 **)(v49 + 16);
          v52 = v51 > 0x17;
          v53 = (1 << v51) & 0x83E000;
          if (v52 || v53 == 0)
            goto LABEL_78;
          v49 = *(_QWORD *)(v49 + 8);
        }
        while (v49 != v50);
        v49 = v50;
      }
LABEL_78:
      v55 = a1[36];
      v56 = *(_QWORD *)(v55 + 368);
      v57 = *(unsigned int *)(v55 + 384);
      if ((_DWORD)v57)
      {
        LODWORD(v58) = ((v49 >> 4) ^ (v49 >> 9)) & (v57 - 1);
        v59 = (uint64_t *)(v56 + 16 * v58);
        v60 = *v59;
        if (v49 != *v59)
        {
          v61 = 1;
          do
          {
            if (v60 == -4096)
              goto LABEL_84;
            v62 = v58 + v61++;
            v58 = v62 & (v57 - 1);
            v60 = *(_QWORD *)(v56 + 16 * v58);
          }
          while (v49 != v60);
          v59 = (uint64_t *)(v56 + 16 * v58);
        }
      }
      else
      {
LABEL_84:
        v59 = (uint64_t *)(v56 + 16 * v57);
      }
      v63 = v59[1] & 0xFFFFFFFFFFFFFFF8;
      v64 = v63 | 4;
      if ((v63 | 4) == i)
      {
LABEL_86:
        v64 = i;
        goto LABEL_87;
      }
      v65 = *(_DWORD *)(a2 + 8);
      v66 = *(char **)a2;
      if (!v65)
        break;
      v67 = *(_QWORD *)&v66[24 * v65 - 16];
      v68 = *(_DWORD *)(v63 + 24);
      v69 = (v67 >> 1) & 3 | *(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24);
      v70 = *(char **)a2;
      v71 = *(unsigned int *)(a2 + 8);
      if (v68 >= v69)
        goto LABEL_100;
      do
      {
        v72 = v71 >> 1;
        v73 = *(_QWORD *)&v70[24 * (v71 >> 1) + 8];
        LODWORD(v73) = (v73 >> 1) & 3 | *(_DWORD *)((v73 & 0xFFFFFFFFFFFFFFF8) + 24);
        v71 -= (v71 >> 1) + 1;
        v74 = v68 >= v73;
        if (v68 >= v73)
          v75 = v72 + 1;
        else
          v75 = 0;
        v70 += 24 * v75;
        if (!v74)
          v71 = v72;
      }
      while (v71);
LABEL_101:
      v76 = &v66[24 * v65];
      if (v70 == v76)
        goto LABEL_87;
      v77 = *(_DWORD *)((*(_QWORD *)v70 & 0xFFFFFFFFFFFFFFF8) + 24);
      v78 = *(_DWORD *)(v63 + 24);
      if (((*(_QWORD *)v70 >> 1) & 3 | v77) > v78)
      {
        v79 = 0;
      }
      else
      {
        v79 = *((_QWORD *)v70 + 2);
        if (v63 == (*((_QWORD *)v70 + 1) & 0xFFFFFFFFFFFFFFF8))
        {
          v70 += 24;
          if (v70 == v76)
            goto LABEL_113;
          v77 = *(_DWORD *)((*(_QWORD *)v70 & 0xFFFFFFFFFFFFFFF8) + 24);
        }
        if (*(_QWORD *)(v79 + 8) == v63)
          v79 = 0;
      }
      if (v78 >= v77)
      {
        v80 = *((_QWORD *)v70 + 2);
        if (!v79)
          goto LABEL_87;
        goto LABEL_114;
      }
LABEL_113:
      v80 = 0;
      if (!v79)
        goto LABEL_87;
LABEL_114:
      v81 = v63 | 4;
      if (v80)
      {
        v81 = v63 | 4;
        if (v79 != v80)
          v81 = *(_QWORD *)(v80 + 8);
      }
      if (v44 >= HIDWORD(v94))
      {
        v83 = v8;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v44 + 1, 16);
        v8 = v83;
        v44 = v94;
      }
      v82 = (uint64_t *)((char *)v93 + 16 * v44);
      *v82 = v81;
      v82[1] = v79;
      v44 = v94 + 1;
      LODWORD(v94) = v94 + 1;
      do
      {
LABEL_87:
        v8 = (int *)*((_QWORD *)v8 + 3);
        if (!v8)
          goto LABEL_7;
        v9 = *v8;
      }
      while ((*v8 & 0x81000000) != 0);
    }
    v65 = 0;
LABEL_100:
    v70 = &v66[24 * v65];
    goto LABEL_101;
  }
LABEL_7:
  v87[0] = v88;
  v87[1] = (void *)0x200000000;
  v89 = v91;
  v90 = 0x200000000;
  v92 = 0;
  v10 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(a2 + 64);
    v12 = 8 * v10;
    do
    {
      v13 = *v11;
      v14 = *(_QWORD *)(*v11 + 8);
      if (v14 >= 8)
      {
        v84 = *(_QWORD *)(*v11 + 8);
        v85 = v14 & 0xFFFFFFFFFFFFFFF8 | 6;
        v86 = v13;
        llvm::LiveRange::addSegment((uint64_t)v87, (uint64_t)&v84);
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  llvm::LiveIntervals::extendSegmentsToUses((uint64_t)a1, (uint64_t)v87, (uint64_t)&v93, a3, *(_QWORD *)(a2 + 112));
  sub_1C5105CA0((_DWORD *)a2, (uint64_t)v87);
  v15 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a2 + 64);
    v17 = v16 + 8 * v15;
    while (1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)v16 + 8);
      if (v18 >= 8)
        break;
LABEL_15:
      v16 += 8;
      if (v16 == v17)
        goto LABEL_55;
    }
    v19 = *(_DWORD *)(a2 + 8);
    v20 = *(char **)a2;
    if (v19)
    {
      v21 = *(_QWORD *)&v20[24 * v19 - 16];
      v22 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3;
      v23 = (v21 >> 1) & 3 | *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
      v24 = *(char **)a2;
      v25 = *(unsigned int *)(a2 + 8);
      if (v22 < v23)
      {
        do
        {
          v26 = v25 >> 1;
          v27 = *(_QWORD *)&v24[24 * (v25 >> 1) + 8];
          LODWORD(v27) = (v27 >> 1) & 3 | *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24);
          v25 -= (v25 >> 1) + 1;
          v28 = v22 >= v27;
          if (v22 >= v27)
            v29 = v26 + 1;
          else
            v29 = 0;
          v24 += 24 * v29;
          if (!v28)
            v25 = v26;
        }
        while (v25);
        v30 = *(unsigned int *)(a2 + 8);
LABEL_29:
        v31 = &v20[24 * v30];
        if (v24 == v31)
        {
          v32 = v18 & 0xFFFFFFFFFFFFFFF8;
        }
        else
        {
          v32 = v18 & 0xFFFFFFFFFFFFFFF8;
          if (((*(_QWORD *)v24 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3))
          {
LABEL_31:
            if (v24 == v31)
              v24 = 0;
            if ((v18 & 6) == 0 && *((_QWORD *)v24 + 1) == (v32 | 6))
            {
              *(_QWORD *)(*(_QWORD *)v16 + 8) = 0;
              v33 = *(_QWORD *)v24;
              if (v19)
              {
                v34 = *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24) | (v33 >> 1) & 3;
                v35 = &v20[24 * v30];
                if (v34 < ((*((_QWORD *)v31 - 2) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v31 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24)))
                {
                  v35 = v20;
                  do
                  {
                    v36 = v30 >> 1;
                    v37 = *(_QWORD *)&v35[24 * (v30 >> 1) + 8];
                    LODWORD(v37) = (v37 >> 1) & 3 | *(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v30 -= (v30 >> 1) + 1;
                    v38 = v34 >= v37;
                    if (v34 >= v37)
                      v39 = v36 + 1;
                    else
                      v39 = 0;
                    v35 += 24 * v39;
                    if (!v38)
                      v30 = v36;
                  }
                  while (v30);
                }
              }
              else
              {
                v35 = &v20[24 * v30];
              }
              v40 = *((_QWORD *)v24 + 1);
              v41 = *((_QWORD *)v35 + 1);
              if (*(_QWORD *)v35 == v33)
              {
                if (v41 == v40)
                {
                  if (v31 != v35 + 24)
                  {
                    memmove(v35, v35 + 24, v31 - (v35 + 24));
                    v19 = *(_DWORD *)(a2 + 8);
                  }
                  *(_DWORD *)(a2 + 8) = v19 - 1;
                }
                else
                {
                  *(_QWORD *)v35 = v40;
                }
              }
              else
              {
                v42 = *((_QWORD *)v35 + 2);
                *((_QWORD *)v35 + 1) = v33;
                if (v41 != v40)
                {
                  v84 = v40;
                  v85 = v41;
                  v86 = v42;
                  sub_1C510F69C(a2, (uint64_t)(v35 + 24), (unint64_t)&v84);
                }
              }
            }
            goto LABEL_15;
          }
        }
        v24 = &v20[24 * v30];
        goto LABEL_31;
      }
      v30 = *(unsigned int *)(a2 + 8);
    }
    else
    {
      v30 = 0;
    }
    v24 = &v20[24 * v30];
    goto LABEL_29;
  }
LABEL_55:
  v43 = v92;
  v92 = 0;
  if (v43)
  {
    sub_1C47655E8(v43, *(_QWORD **)(v43 + 8));
    MEMORY[0x1CAA32FC0](v43, 0x1020C4062D53EE8);
  }
  if (v89 != v91)
    free(v89);
  if (v87[0] != v88)
    free(v87[0]);
  if (v93 != v95)
    free(v93);
}

_DWORD *sub_1C5105CA0(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int v18;

  if (result != (_DWORD *)a2)
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    if (*(_DWORD **)result == result + 4 || *(_QWORD *)a2 == a2 + 16)
    {
      v7 = *(unsigned int *)(a2 + 8);
      if (result[3] < v7)
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v7, 24);
      v8 = v3[2];
      if (*(_DWORD *)(a2 + 12) < v8)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v8, 24);
        LODWORD(v8) = v3[2];
      }
      v9 = *(_DWORD *)(a2 + 8);
      if (v8 >= v9)
        v10 = v9;
      else
        v10 = v8;
      if ((_DWORD)v10)
      {
        v11 = 0;
        do
        {
          v12 = (__int128 *)(*(_QWORD *)v3 + v11);
          v13 = (__int128 *)(*(_QWORD *)a2 + v11);
          v14 = *((_QWORD *)v12 + 2);
          v15 = *v12;
          v16 = *((_QWORD *)v13 + 2);
          *v12 = *v13;
          *((_QWORD *)v12 + 2) = v16;
          *v13 = v15;
          *((_QWORD *)v13 + 2) = v14;
          v11 += 24;
        }
        while (24 * v10 != v11);
        LODWORD(v8) = v3[2];
        v9 = *(_DWORD *)(a2 + 8);
      }
      v17 = v8 - v9;
      if (v8 <= v9)
      {
        v18 = v9 - v8;
        if (v9 > v8)
        {
          if ((_DWORD)v10 != v9)
          {
            result = memcpy((void *)(*(_QWORD *)v3 + 24 * v8), (const void *)(*(_QWORD *)a2 + 24 * v10), *(_QWORD *)a2 + 24 * v9 - (*(_QWORD *)a2 + 24 * v10));
            LODWORD(v8) = v3[2];
          }
          v3[2] = v18 + v8;
          *(_DWORD *)(a2 + 8) = v10;
        }
      }
      else
      {
        if ((_DWORD)v10 != (_DWORD)v8)
        {
          result = memcpy((void *)(*(_QWORD *)a2 + 24 * v9), (const void *)(*(_QWORD *)v3 + 24 * v10), *(_QWORD *)v3 + 24 * v8 - (*(_QWORD *)v3 + 24 * v10));
          v9 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v17 + v9;
        v3[2] = v10;
      }
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v4;
      v5 = result[2];
      result[2] = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v5;
      v6 = result[3];
      result[3] = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v6;
    }
  }
  return result;
}

void llvm::LiveIntervals::extendToIndices(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v12 = *(_QWORD *)(a1 + 304);
  v13 = *(_QWORD *)(a1 + 248);
  v14 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)v12 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(a1 + 288);
  *(_QWORD *)(v12 + 32) = a1 + 312;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v12);
  *(_DWORD *)(v12 + 184) = 0;
  if (a4)
  {
    v15 = 8 * a4;
    do
    {
      v16 = *a3++;
      llvm::LiveRangeCalc::extend(*(llvm::LiveRangeCalc **)(a1 + 304), a2, v16, 0, a5, a6);
      v15 -= 8;
    }
    while (v15);
  }
}

void llvm::LiveIntervals::extendToUses(llvm::LiveIntervals *this, llvm::LiveInterval *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((_QWORD *)this + 38);
  v5 = *((_QWORD *)this + 31);
  v6 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 8) = v6;
  *(_OWORD *)(v4 + 16) = *((_OWORD *)this + 18);
  *(_QWORD *)(v4 + 32) = (char *)this + 312;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v4);
  *(_DWORD *)(v4 + 184) = 0;
  llvm::LiveIntervalCalc::extendToUses(*((llvm::LiveRangeCalc **)this + 38), (uint64_t *)a2, *((unsigned int *)a2 + 28), -1, 0);
}

void llvm::LiveIntervals::pruneValue(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  unsigned int v47;
  _BYTE *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t *v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  BOOL v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  BOOL v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  char v109;
  uint64_t *v110;
  uint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t *v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  int v128;
  _BYTE v129[128];
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;

  v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(unint64_t **)a2;
  if (!v9)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v11 = v10[3 * v9 - 2];
  v12 = *(_DWORD *)(v8 + 24);
  if (v12 >= ((v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_12:
    v13 = &v10[3 * v9];
    goto LABEL_13;
  }
  v13 = *(unint64_t **)a2;
  v14 = *(unsigned int *)(a2 + 8);
  do
  {
    v15 = v14 >> 1;
    v16 = v13[3 * (v14 >> 1) + 1];
    LODWORD(v16) = (v16 >> 1) & 3 | *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24);
    v14 -= (v14 >> 1) + 1;
    v17 = v12 >= v16;
    if (v12 >= v16)
      v18 = v15 + 1;
    else
      v18 = 0;
    v13 += 3 * v18;
    if (!v17)
      v14 = v15;
  }
  while (v14);
LABEL_13:
  v19 = &v10[3 * v9];
  if (v13 == v19)
    return;
  v20 = *(_DWORD *)((*v13 & 0xFFFFFFFFFFFFFFF8) + 24);
  v21 = *(_DWORD *)(v8 + 24);
  if (((*v13 >> 1) & 3 | v20) <= v21 && v8 == (v13[1] & 0xFFFFFFFFFFFFFFF8))
  {
    v13 += 3;
    if (v13 == v19)
      return;
    v20 = *(_DWORD *)((*v13 & 0xFFFFFFFFFFFFFFF8) + 24);
  }
  if (v21 < v20)
    return;
  v22 = v13[2];
  if (!v22)
    return;
  v23 = v13[1];
  v24 = sub_1C499C548(*(_QWORD *)(a1 + 288), a3);
  v120 = a1;
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 392) + 16 * *(unsigned int *)(v24 + 24) + 8);
  v26 = *(_DWORD *)(a2 + 8);
  v27 = *(unint64_t **)a2;
  if ((*(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24) | (v23 >> 1) & 3) < ((v25 >> 1) & 3 | *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
    if (v26)
    {
      v28 = v27[3 * v26 - 2];
      v29 = *(_DWORD *)(v8 + 24) | (a3 >> 1) & 3;
      v30 = (v28 >> 1) & 3 | *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24);
      v31 = *(_DWORD *)(a2 + 8);
      if (v29 < v30)
      {
        v32 = *(unint64_t **)a2;
        v33 = *(unsigned int *)(a2 + 8);
        do
        {
          v34 = v33 >> 1;
          v35 = v32[3 * (v33 >> 1) + 1];
          LODWORD(v35) = (v35 >> 1) & 3 | *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24);
          v33 -= (v33 >> 1) + 1;
          v36 = v29 >= v35;
          if (v29 >= v35)
            v37 = v34 + 1;
          else
            v37 = 0;
          v32 += 3 * v37;
          if (!v36)
            v33 = v34;
        }
        while (v33);
        goto LABEL_44;
      }
    }
    else
    {
      v31 = 0;
    }
    v32 = &v27[3 * v31];
LABEL_44:
    v48 = (_BYTE *)v32[1];
    if (*v32 == a3)
    {
      if (v48 == (_BYTE *)v23)
      {
        v50 = (char *)&v27[3 * v26];
        if (v50 != (char *)(v32 + 3))
        {
          memmove(v32, v32 + 3, v50 - (char *)(v32 + 3));
          v26 = *(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a2 + 8) = v26 - 1;
      }
      else
      {
        *v32 = v23;
      }
    }
    else
    {
      v49 = v32[2];
      v32[1] = a3;
      if (v48 != (_BYTE *)v23)
      {
        v125 = (_BYTE *)v23;
        v126 = v48;
        v127 = v49;
        sub_1C510F69C(a2, (uint64_t)(v32 + 3), (unint64_t)&v125);
      }
    }
    if (a4)
    {
      v51 = *(unsigned int *)(a4 + 8);
      if (v51 >= *(_DWORD *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v51 + 1, 8);
        LODWORD(v51) = *(_DWORD *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v51) = v23;
      ++*(_DWORD *)(a4 + 8);
    }
    return;
  }
  v38 = v24;
  if (!v26)
  {
    v47 = 0;
    goto LABEL_57;
  }
  v39 = v27[3 * v26 - 2];
  v40 = *(_DWORD *)(v8 + 24) | (a3 >> 1) & 3;
  if (v40 >= ((v39 >> 1) & 3 | *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
    v47 = *(_DWORD *)(a2 + 8);
LABEL_57:
    v41 = &v27[3 * v47];
    goto LABEL_58;
  }
  v41 = *(unint64_t **)a2;
  v42 = *(unsigned int *)(a2 + 8);
  do
  {
    v43 = v42 >> 1;
    v44 = v41[3 * (v42 >> 1) + 1];
    LODWORD(v44) = (v44 >> 1) & 3 | *(_DWORD *)((v44 & 0xFFFFFFFFFFFFFFF8) + 24);
    v42 -= (v42 >> 1) + 1;
    v45 = v40 >= v44;
    if (v40 >= v44)
      v46 = v43 + 1;
    else
      v46 = 0;
    v41 += 3 * v46;
    if (!v45)
      v42 = v43;
  }
  while (v42);
LABEL_58:
  v52 = (_BYTE *)v41[1];
  if (*v41 == a3)
  {
    if (v52 == (_BYTE *)v25)
    {
      v54 = (char *)&v27[3 * v26];
      if (v54 != (char *)(v41 + 3))
      {
        memmove(v41, v41 + 3, v54 - (char *)(v41 + 3));
        v26 = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(a2 + 8) = v26 - 1;
    }
    else
    {
      *v41 = v25;
    }
  }
  else
  {
    v53 = v41[2];
    v41[1] = a3;
    if (v52 != (_BYTE *)v25)
    {
      v125 = (_BYTE *)v25;
      v126 = v52;
      v127 = v53;
      sub_1C510F69C(a2, (uint64_t)(v41 + 3), (unint64_t)&v125);
    }
  }
  if (a4)
  {
    v55 = *(unsigned int *)(a4 + 8);
    if (v55 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v55 + 1, 8);
      LODWORD(v55) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v55) = v25;
    ++*(_DWORD *)(a4 + 8);
  }
  v125 = v129;
  v126 = v129;
  v127 = 16;
  v128 = 0;
  v56 = *(uint64_t **)(v38 + 88);
  v121 = *(uint64_t **)(v38 + 96);
  if (v56 != v121)
  {
    v119 = a4 + 16;
    v57 = a1;
    while (1)
    {
      v58 = *v56;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v125, *v56);
      if (v59)
      {
        v60 = operator new(0x18uLL);
        *(_QWORD *)v60 = v58;
        v60[8] = 0;
        v60[16] = 0;
        v61 = v60 + 24;
      }
      else
      {
        v61 = 0;
        v60 = 0;
      }
      v123 = 0;
      v124 = 0;
      v122 = 0;
      sub_1C4D6CDA0(&v122, v60, v61, 0xAAAAAAAAAAAAAAABLL * ((v61 - v60) >> 3));
      if (v60)
        operator delete(v60);
      v62 = v122;
      v63 = v123;
      v64 = v123;
      if (v123 == v122)
        goto LABEL_178;
LABEL_77:
      v66 = *(v64 - 3);
      v65 = v64 - 3;
      v67 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v57 + 288) + 392) + 16 * *(unsigned int *)(v66 + 24));
      v68 = *v67;
      v69 = *v67 & 0xFFFFFFFFFFFFFFF8;
      v70 = *(_DWORD *)(a2 + 8);
      v71 = *(unint64_t **)a2;
      if (!v70)
        break;
      v72 = v71[3 * v70 - 2];
      v73 = *(_DWORD *)(v69 + 24);
      v74 = (v72 >> 1) & 3 | *(_DWORD *)((v72 & 0xFFFFFFFFFFFFFFF8) + 24);
      v75 = *(char **)a2;
      v76 = *(unsigned int *)(a2 + 8);
      if (v73 >= v74)
      {
        v81 = *(unsigned int *)(a2 + 8);
LABEL_88:
        v75 = (char *)&v71[3 * v81];
        goto LABEL_89;
      }
      do
      {
        v77 = v76 >> 1;
        v78 = *(_QWORD *)&v75[24 * (v76 >> 1) + 8];
        LODWORD(v78) = (v78 >> 1) & 3 | *(_DWORD *)((v78 & 0xFFFFFFFFFFFFFFF8) + 24);
        v76 -= (v76 >> 1) + 1;
        v79 = v73 >= v78;
        if (v73 >= v78)
          v80 = v77 + 1;
        else
          v80 = 0;
        v75 += 24 * v80;
        if (!v79)
          v76 = v77;
      }
      while (v76);
      v81 = *(unsigned int *)(a2 + 8);
LABEL_89:
      v82 = (char *)&v71[3 * v81];
      if (v75 == v82)
      {
        v85 = 0;
        v86 = 0;
      }
      else
      {
        v83 = *(_DWORD *)((*(_QWORD *)v75 & 0xFFFFFFFFFFFFFFF8) + 24);
        v84 = *(_DWORD *)(v69 + 24);
        if (((*(_QWORD *)v75 >> 1) & 3 | v83) > v84)
        {
          v86 = 0;
          v85 = 0;
          goto LABEL_98;
        }
        v86 = *((_QWORD *)v75 + 1);
        v85 = *((_QWORD *)v75 + 2);
        if (v69 != (v86 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_94;
        v75 += 24;
        if (v75 != v82)
        {
          v83 = *(_DWORD *)((*(_QWORD *)v75 & 0xFFFFFFFFFFFFFFF8) + 24);
LABEL_94:
          if (*(_QWORD *)(v85 + 8) == v69)
            v85 = 0;
LABEL_98:
          if (v84 >= v83)
            v86 = *((_QWORD *)v75 + 1);
        }
      }
      if (v85 == v22)
      {
        v87 = v67[1];
        if ((*(_DWORD *)((v86 & 0xFFFFFFFFFFFFFFF8) + 24) | (v86 >> 1) & 3) >= (*(_DWORD *)((v87 & 0xFFFFFFFFFFFFFFF8) + 24) | (v87 >> 1) & 3))
        {
          if (v70)
          {
            v95 = *(_DWORD *)(v69 + 24) | (v68 >> 1) & 3;
            v96 = &v71[3 * v81];
            if (v95 < ((*((_QWORD *)v82 - 2) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v82 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                  + 24)))
            {
              v96 = *(unint64_t **)a2;
              do
              {
                v97 = v81 >> 1;
                v98 = v96[3 * (v81 >> 1) + 1];
                LODWORD(v98) = (v98 >> 1) & 3 | *(_DWORD *)((v98 & 0xFFFFFFFFFFFFFFF8) + 24);
                v81 -= (v81 >> 1) + 1;
                v99 = v95 >= v98;
                if (v95 >= v98)
                  v100 = v97 + 1;
                else
                  v100 = 0;
                v96 += 3 * v100;
                if (!v99)
                  v81 = v97;
              }
              while (v81);
            }
          }
          else
          {
            v96 = &v71[3 * v81];
          }
          v101 = v96[1];
          if (*v96 == v68)
          {
            if (v101 == v87)
            {
              if (v82 != (char *)(v96 + 3))
              {
                memmove(v96, v96 + 3, v82 - (char *)(v96 + 3));
                v70 = *(_DWORD *)(a2 + 8);
              }
              *(_DWORD *)(a2 + 8) = v70 - 1;
            }
            else
            {
              *v96 = v87;
            }
          }
          else
          {
            v103 = v96[2];
            v96[1] = v68;
            if (v101 != v87)
            {
              v130 = v87;
              v131 = v101;
              v132 = v103;
              sub_1C510F69C(a2, (uint64_t)(v96 + 3), (unint64_t)&v130);
            }
          }
          if (a4)
          {
            v105 = *(unsigned int *)(a4 + 8);
            if (v105 >= *(unsigned int *)(a4 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v119, v105 + 1, 8);
              v105 = *(unsigned int *)(a4 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v105) = v87;
            ++*(_DWORD *)(a4 + 8);
          }
        }
        else
        {
          if (v70)
          {
            v88 = *(_DWORD *)(v69 + 24) | (v68 >> 1) & 3;
            v89 = &v71[3 * v81];
            if (v88 < ((*((_QWORD *)v82 - 2) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v82 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                  + 24)))
            {
              v89 = *(unint64_t **)a2;
              do
              {
                v90 = v81 >> 1;
                v91 = v89[3 * (v81 >> 1) + 1];
                LODWORD(v91) = (v91 >> 1) & 3 | *(_DWORD *)((v91 & 0xFFFFFFFFFFFFFFF8) + 24);
                v81 -= (v81 >> 1) + 1;
                v92 = v88 >= v91;
                if (v88 >= v91)
                  v93 = v90 + 1;
                else
                  v93 = 0;
                v89 += 3 * v93;
                if (!v92)
                  v81 = v90;
              }
              while (v81);
            }
          }
          else
          {
            v89 = &v71[3 * v81];
          }
          v94 = v89[1];
          if (*v89 == v68)
          {
            if (v94 == v86)
            {
              if (v82 != (char *)(v89 + 3))
              {
                memmove(v89, v89 + 3, v82 - (char *)(v89 + 3));
                v70 = *(_DWORD *)(a2 + 8);
              }
              *(_DWORD *)(a2 + 8) = v70 - 1;
            }
            else
            {
              *v89 = v86;
            }
          }
          else
          {
            v102 = v89[2];
            v89[1] = v68;
            if (v94 != v86)
            {
              v130 = v86;
              v131 = v94;
              v132 = v102;
              sub_1C510F69C(a2, (uint64_t)(v89 + 3), (unint64_t)&v130);
            }
          }
          if (a4)
          {
            v104 = *(unsigned int *)(a4 + 8);
            if (v104 >= *(unsigned int *)(a4 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v119, v104 + 1, 8);
              v104 = *(unsigned int *)(a4 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a4 + 8 * v104) = v86;
            ++*(_DWORD *)(a4 + 8);
          }
          v63 = v123 - 3;
          v123 = v63;
          if (v122 == v63)
          {
LABEL_179:
            operator delete(v63);
            goto LABEL_180;
          }
        }
      }
      else
      {
        v123 = v65;
        v63 = v62;
        if (v62 == v65)
          goto LABEL_178;
      }
      v63 = v123;
LABEL_150:
      v106 = *(v63 - 3);
      if (!*((_BYTE *)v63 - 8))
      {
        *(v63 - 2) = *(_QWORD *)(v106 + 88);
        *((_BYTE *)v63 - 8) = 1;
      }
      do
      {
        v107 = (uint64_t *)*(v63 - 2);
        if (v107 == *(uint64_t **)(v106 + 96))
        {
          v63 = v123 - 3;
          v123 = v63;
          if (v122 != v63)
            goto LABEL_150;
          goto LABEL_179;
        }
        *(v63 - 2) = (uint64_t)(v107 + 1);
        v108 = *v107;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v125, *v107);
      }
      while (!v109);
      v110 = v123;
      if (v123 >= v124)
      {
        v111 = v122;
        v112 = 0xAAAAAAAAAAAAAAABLL * (v123 - v122);
        v113 = v112 + 1;
        if (v112 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * (v124 - v122) > v113)
          v113 = 0x5555555555555556 * (v124 - v122);
        if (0xAAAAAAAAAAAAAAABLL * (v124 - v122) >= 0x555555555555555)
          v114 = 0xAAAAAAAAAAAAAAALL;
        else
          v114 = v113;
        if (v114)
        {
          if (v114 > 0xAAAAAAAAAAAAAAALL)
            sub_1C4764EE4();
          v115 = (char *)operator new(24 * v114);
        }
        else
        {
          v115 = 0;
        }
        v116 = &v115[24 * v112];
        *(_QWORD *)v116 = v108;
        v116[8] = 0;
        v116[16] = 0;
        v117 = (uint64_t *)v116;
        if (v110 != v111)
        {
          do
          {
            v118 = *(_OWORD *)(v110 - 3);
            *(v117 - 1) = *(v110 - 1);
            *(_OWORD *)(v117 - 3) = v118;
            v117 -= 3;
            v110 -= 3;
          }
          while (v110 != v111);
          v110 = v122;
        }
        v64 = (uint64_t *)(v116 + 24);
        v122 = v117;
        v123 = (uint64_t *)(v116 + 24);
        v124 = (uint64_t *)&v115[24 * v114];
        v57 = v120;
        if (v110)
          operator delete(v110);
      }
      else
      {
        *v123 = v108;
        *((_BYTE *)v110 + 8) = 0;
        v64 = v110 + 3;
        *((_BYTE *)v110 + 16) = 0;
      }
      v123 = v64;
      v63 = v122;
      v62 = v122;
      if (v64 != v122)
        goto LABEL_77;
LABEL_178:
      if (v63)
        goto LABEL_179;
LABEL_180:
      if (++v56 == v121)
      {
        if (v126 != v125)
          free(v126);
        return;
      }
    }
    v81 = 0;
    goto LABEL_88;
  }
}

void llvm::LiveIntervals::addKillFlags(llvm::LiveIntervals *this, const llvm::VirtRegMap *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _WORD *v10;
  unsigned __int16 v11;
  llvm::LiveRange *v12;
  unint64_t v13;
  llvm::LiveRange *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  llvm::LiveRange **v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v54;
  char *v55;
  int v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  _QWORD v62[18];

  v62[16] = *MEMORY[0x1E0C80C00];
  v60 = v62;
  v61 = 0x800000000;
  v57 = *(_DWORD *)(*((_QWORD *)this + 32) + 32);
  if (v57)
  {
    v3 = 0;
    v55 = (char *)this + 312;
    while (1)
    {
      v59 = v3 & 0x7FFFFFFF;
      v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 32) + 24) + 16 * v59 + 8);
      if (v4)
      {
        while ((*(_DWORD *)v4 & 0x80000000) != 0)
        {
          v4 = *(_QWORD *)(v4 + 24);
          if (!v4)
            goto LABEL_72;
        }
        if (v59 >= *((unsigned int *)this + 104) || (v5 = *(_QWORD *)(*((_QWORD *)this + 51) + 8 * v59)) == 0)
        {
          v5 = sub_1C4851220((uint64_t)this, v3 | 0x80000000);
          v49 = *((_QWORD *)this + 38);
          v50 = *((_QWORD *)this + 31);
          *(_QWORD *)v49 = v50;
          *(_QWORD *)(v49 + 8) = *(_QWORD *)(v50 + 40);
          *(_OWORD *)(v49 + 16) = *((_OWORD *)this + 18);
          *(_QWORD *)(v49 + 32) = v55;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v49);
          *(_DWORD *)(v49 + 184) = 0;
          v51 = *((_QWORD *)this + 32);
          v28 = *(_BYTE *)(v51 + 16) == 0;
          v52 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v51 + 24) + 16 * (*(_DWORD *)(v5 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 34);
          v54 = !v28 && v52 != 0;
          llvm::LiveIntervalCalc::calculate(*((llvm::LiveIntervalCalc **)this + 38), (llvm::LiveInterval *)v5, v54);
          llvm::LiveIntervals::computeDeadValues((uint64_t)this, v5, 0);
        }
        if (*(_DWORD *)(v5 + 8))
        {
          v6 = *(_DWORD *)(*((_QWORD *)a2 + 35) + 4 * v59);
          if (v6)
          {
            LODWORD(v61) = 0;
            v7 = *((_QWORD *)this + 33);
            v8 = v7 ? (_QWORD *)(v7 + 8) : 0;
            v9 = *(unsigned int *)(*v8 + 24 * v6 + 16);
            v10 = (_WORD *)(v8[6] + ((v9 >> 3) & 0x1FFFFFFE));
            v11 = *v10 + (v9 & 0xF) * v6;
            do
            {
              v12 = sub_1C50E4F00(this, v11);
              v13 = *((unsigned int *)v12 + 2);
              if ((_DWORD)v13)
              {
                v14 = v12;
                v15 = *(_QWORD *)v12 + 24 * v13;
                v16 = *(_DWORD *)((*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)(*(_QWORD *)v5 + 8) >> 1) & 3;
                if (v16 < ((*(_QWORD *)(v15 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v15 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 24)))
                {
                  v15 = *(_QWORD *)v12;
                  do
                  {
                    v17 = v13 >> 1;
                    v18 = *(_QWORD *)(v15 + 24 * (v13 >> 1) + 8);
                    LODWORD(v18) = (v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v13 -= (v13 >> 1) + 1;
                    v19 = v16 >= v18;
                    if (v16 >= v18)
                      v20 = v17 + 1;
                    else
                      v20 = 0;
                    v15 += 24 * v20;
                    if (!v19)
                      v13 = v17;
                  }
                  while (v13);
                }
                v21 = v61;
                if (v61 >= (unint64_t)HIDWORD(v61))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v61 + 1, 16);
                  v21 = v61;
                }
                v22 = (llvm::LiveRange **)((char *)v60 + 16 * v21);
                *v22 = v14;
                v22[1] = (llvm::LiveRange *)v15;
                LODWORD(v61) = v61 + 1;
              }
              v23 = (unsigned __int16)v10[1];
              ++v10;
              v11 += v23;
            }
            while (v23);
            v24 = *(_DWORD *)(v5 + 8);
            if (v24)
              break;
          }
        }
      }
LABEL_72:
      if (++v3 == v57)
      {
        if (v60 != v62)
          free(v60);
        return;
      }
    }
    v25 = *(_QWORD *)v5;
    v26 = *(_QWORD *)v5 + 24 * v24;
    v58 = v26;
    while (1)
    {
      v27 = *(_QWORD *)(v25 + 8);
      v28 = v27 < 8 || (*(_QWORD *)(v25 + 8) & 6) == 0;
      if (v28)
        goto LABEL_71;
      v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 16);
      if (!v29)
        goto LABEL_71;
      if ((_DWORD)v61)
      {
        v30 = 16 * v61;
        v31 = (uint64_t *)((char *)v60 + 8);
        while (1)
        {
          v32 = *(v31 - 1);
          if (*v31 != *(_QWORD *)v32 + 24 * *(unsigned int *)(v32 + 8))
          {
            v33 = (_QWORD *)sub_1C50E5A80(*(v31 - 1), *v31, *(_QWORD *)(v25 + 8));
            *v31 = (uint64_t)v33;
            if (v33 != (_QWORD *)(*(_QWORD *)v32 + 24 * *(unsigned int *)(v32 + 8))
              && ((*v33 >> 1) & 3 | *(_DWORD *)((*v33 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)(v25 + 8) >> 1) & 3))
            {
              break;
            }
          }
          v31 += 2;
          v30 -= 16;
          if (!v30)
            goto LABEL_41;
        }
      }
      else
      {
LABEL_41:
        v34 = *((_QWORD *)this + 32);
        if (!*(_BYTE *)(v34 + 16))
          goto LABEL_69;
        v35 = *(_QWORD *)(v5 + 104);
        if (v35)
        {
          v36 = 0;
          do
          {
            v37 = *(_DWORD *)(v35 + 8);
            if (v37)
            {
              v38 = *(_QWORD **)v35;
              v39 = *(_QWORD *)v35 + 24 * v37;
              v40 = *(_QWORD *)(v25 + 8);
              while (((*v38 >> 1) & 3 | *(_DWORD *)((*v38 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((v40 >> 1) & 3 | *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 24)))
              {
                if (v38[1] == v40)
                {
                  v36 |= *(_QWORD *)(v35 + 112);
                  break;
                }
                v38 += 3;
                if (v38 == (_QWORD *)v39)
                  break;
              }
            }
            v35 = *(_QWORD *)(v35 + 104);
          }
          while (v35);
        }
        else
        {
          v36 = -1;
        }
        v41 = *(unsigned int *)(v29 + 40);
        if ((_DWORD)v41)
        {
          v42 = 0;
          v43 = ~v36;
          v44 = 32 * v41;
          v45 = (_DWORD *)(*(_QWORD *)(v29 + 32) + 4);
          do
          {
            v46 = *(v45 - 1);
            if (!*(v45 - 1) && *v45 == (v3 | 0x80000000))
            {
              if ((v46 & 0x1000000) != 0)
              {
                v42 |= (v46 & 0xFFF00) == 0;
              }
              else
              {
                v47 = (v46 >> 8) & 0xFFF;
                if ((_DWORD)v47)
                  v48 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 33) + 232) + 8 * v47);
                else
                  v48 = (_QWORD *)((*(_QWORD *)(*(_QWORD *)(v34 + 24) + 16 * v59) & 0xFFFFFFFFFFFFFFF8) + 24);
                if ((*v48 & v43) != 0)
                  goto LABEL_68;
              }
            }
            v45 += 8;
            v44 -= 32;
          }
          while (v44);
          if ((v42 & 1) != 0)
            goto LABEL_69;
        }
        if (v25 + 24 == *(_QWORD *)v5 + 24 * *(unsigned int *)(v5 + 8)
          || *(_QWORD *)(v25 + 24) != *(_QWORD *)(v25 + 8))
        {
LABEL_69:
          llvm::MachineInstr::addRegisterKilled((llvm::MachineInstr *)v29, v3 | 0x80000000, 0, 0);
          goto LABEL_70;
        }
      }
LABEL_68:
      llvm::MachineInstr::clearRegisterKills(v29, v3 | 0x80000000, 0);
LABEL_70:
      v26 = v58;
LABEL_71:
      v25 += 24;
      if (v25 == v26)
        goto LABEL_72;
    }
  }
}

uint64_t llvm::LiveIntervals::intervalIsInOneMBB(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;

  v3 = *(unint64_t **)a2;
  v4 = **(_QWORD **)a2;
  if ((v4 & 6) == 0)
    return 0;
  v5 = v3[3 * *(unsigned int *)(a2 + 8) - 2];
  if ((v5 & 6) == 0)
    return 0;
  v7 = sub_1C499C548(*(_QWORD *)(a1 + 288), v4);
  if (v7 == sub_1C499C548(*(_QWORD *)(a1 + 288), v5))
    return v7;
  else
    return 0;
}

uint64_t llvm::LiveIntervals::hasPHIKill(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;

  v3 = *(unsigned int *)(a2 + 72);
  if (!(_DWORD)v3)
    return 0;
  v7 = *(_QWORD *)(a2 + 64);
  v8 = v7 + 8 * v3;
  while (1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)v7 + 8);
    if (v9 >= 8 && (*(_QWORD *)(*(_QWORD *)v7 + 8) & 6) == 0)
    {
      v11 = sub_1C499C548(*(_QWORD *)(a1 + 288), v9);
      v13 = *(_QWORD *)(v11 + 64);
      v12 = *(_QWORD *)(v11 + 72);
      if (((unint64_t)(v12 - v13) >> 3) > 0x64)
        return 1;
      if (v13 != v12)
        break;
    }
LABEL_30:
    v7 += 8;
    if (v7 == v8)
      return 0;
  }
  v14 = *(_DWORD *)(a2 + 8);
  v15 = *(_QWORD *)a2 + 24 * v14;
  while (1)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 392) + 16 * *(unsigned int *)(*(_QWORD *)v13 + 24) + 8);
    v17 = (v16 >> 1) & 3;
    v18 = v16 & 0xFFFFFFFFFFFFFFF8;
    if (v17)
      v19 = v18 | (2 * (v17 - 1));
    else
      v19 = *(_QWORD *)v18 | 6;
    v20 = (_QWORD *)(*(_QWORD *)a2 + 24 * v14);
    if (v14)
    {
      v21 = *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) | (v19 >> 1) & 3;
      v20 = (_QWORD *)(*(_QWORD *)a2 + 24 * v14);
      if (v21 < ((*(_QWORD *)(v15 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v15 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                             + 24)))
      {
        v20 = *(_QWORD **)a2;
        v22 = *(unsigned int *)(a2 + 8);
        do
        {
          v23 = v22 >> 1;
          v24 = v20[3 * (v22 >> 1) + 1];
          LODWORD(v24) = (v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24);
          v22 -= (v22 >> 1) + 1;
          v25 = v21 >= v24;
          if (v21 >= v24)
            v26 = v23 + 1;
          else
            v26 = 0;
          v20 += 3 * v26;
          if (!v25)
            v22 = v23;
        }
        while (v22);
      }
    }
    v27 = v20 == (_QWORD *)v15
       || ((*v20 >> 1) & 3 | *(_DWORD *)((*v20 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) | (v19 >> 1) & 3)
        ? 0
        : v20[2];
    if (v27 == a3)
      return 1;
    v13 += 8;
    if (v13 == v12)
      goto LABEL_30;
  }
}

float llvm::LiveIntervals::getSpillWeight(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  int v22;
  int v23;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 32) + 16);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 336))(v9, a4);
  v11 = *(_QWORD *)(a3 + 248);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 176);
    v13 = 0.0;
    if (v12)
    {
      v14 = *(_QWORD *)(a4 + 24);
      v15 = *(_QWORD *)(v11 + 160);
      v16 = v12 - 1;
      v17 = (v12 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v18 = *(_QWORD *)(v15 + 16 * v17);
      if (v18 == v14)
      {
LABEL_4:
        v19 = *(unsigned int *)(v15 + 16 * v17 + 8);
        if (v19 != 0xFFFFFFFFLL)
          v13 = (float)*(unint64_t *)(*(_QWORD *)(v11 + 8) + 24 * v19 + 16);
      }
      else
      {
        v22 = 1;
        while (v18 != -4096)
        {
          v23 = v17 + v22++;
          v17 = v23 & v16;
          v18 = *(_QWORD *)(v15 + 16 * v17);
          if (v18 == v14)
            goto LABEL_4;
        }
      }
    }
    v20 = (float)*(unint64_t *)(*(_QWORD *)(v11 + 8) + 16);
  }
  else
  {
    v13 = 0.0;
    v20 = 0.0;
  }
  return (float)((float)a2 + (float)((float)a1 * v10)) * (float)(v13 * (float)(1.0 / v20));
}

unint64_t sub_1C5107228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v5 = sub_1C484358C(a3, 16, 3);
  v6 = *(unsigned int *)(a1 + 72);
  v7 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = a2;
  if (v6 >= v7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, a1 + 80, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v6) = v5;
  ++*(_DWORD *)(a1 + 72);
  return v5;
}

BOOL llvm::LiveIntervals::checkRegMaskInterference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t j;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  llvm::MachineInstr *v40;
  int NumExplicitDefs;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int NumGCPtrIdx;
  unint64_t v48;
  _DWORD *v49;
  uint64_t i;
  int v51;
  int v52;
  _QWORD v53[4];
  char v54;
  _QWORD v55[2];
  uint64_t v56;
  int v57;

  v3 = *(_DWORD *)(a2 + 8);
  if (!v3)
    return 0;
  v7 = *(unint64_t **)a2;
  v8 = *(_QWORD *)a2 + 24 * v3;
  v9 = **(_QWORD **)a2;
  if ((v9 & 6) != 0
    && (v10 = *(_QWORD *)(v8 - 16), (v10 & 6) != 0)
    && ((v11 = sub_1C499C548(*(_QWORD *)(a1 + 288), v9), v12 = sub_1C499C548(*(_QWORD *)(a1 + 288), v10), v11)
      ? (v13 = v11 == v12)
      : (v13 = 0),
        v13))
  {
    v14 = (unsigned int *)(*(_QWORD *)(a1 + 600) + 8 * *(unsigned int *)(v11 + 24));
    v15 = *v14;
    v16 = v14[1];
    v17 = *(_QWORD *)(a1 + 440) + 8 * v15;
    v18 = *(_QWORD *)(a1 + 520) + 8 * v15;
    v19 = v16;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 440);
    v19 = *(unsigned int *)(a1 + 448);
    v18 = *(_QWORD *)(a1 + 520);
    v16 = *(unsigned int *)(a1 + 528);
  }
  v55[0] = v18;
  v55[1] = v16;
  v20 = (_QWORD *)v17;
  if (v19)
  {
    v20 = (_QWORD *)v17;
    v23 = v19;
    do
    {
      v24 = v23 >> 1;
      v25 = &v20[v23 >> 1];
      v27 = *v25;
      v26 = v25 + 1;
      v23 += ~(v23 >> 1);
      if (((v27 >> 1) & 3 | *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((*v7 >> 1) & 3 | *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
        v20 = v26;
      else
        v23 = v24;
    }
    while (v23);
  }
  v21 = (_QWORD *)(v17 + 8 * v19);
  if (v20 == v21)
    return 0;
  v54 = 0;
  v53[0] = &v54;
  v53[1] = a3;
  v28 = -v17;
  v53[2] = a1;
  v53[3] = v55;
  for (i = v28; ; v28 = i)
  {
    for (j = (unint64_t)v20 + v28; ; j += 8)
    {
      v30 = v7[1];
      v31 = *v20 & 0xFFFFFFFFFFFFFFF8;
      if (((*v20 >> 1) & 3 | *(_DWORD *)(v31 + 24)) >= (*(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24) | (v30 >> 1) & 3))
        break;
      if (!v54)
      {
        *(_DWORD *)(a3 + 8) = 0;
        v32 = *(_DWORD *)(*(_QWORD *)(a1 + 264) + 16);
        *(_DWORD *)(a3 + 64) = v32;
        if ((v32 + 63) < 0x40)
        {
          v35 = 0;
        }
        else
        {
          v33 = (v32 + 63) >> 6;
          if (v33 > *(_DWORD *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v33, 8);
            v34 = *(unsigned int *)(a3 + 8);
            v32 = *(_DWORD *)(a3 + 64);
            v51 = *(_DWORD *)(a3 + 8);
          }
          else
          {
            v34 = 0;
            v51 = 0;
          }
          memset((void *)(*(_QWORD *)a3 + 8 * v34), 255, 8 * v33);
          v35 = (v51 + v33);
          *(_DWORD *)(a3 + 8) = v35;
        }
        if ((v32 & 0x3F) != 0)
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v35 - 8) &= ~(-1 << (v32 & 0x3F));
        v54 = 1;
      }
      sub_1C5109220(a3, *(unsigned int **)(v55[0] + (j & 0x7FFFFFFF8)), 0xFFFFFFFF);
      if (++v20 == v21)
        return v54 != 0;
    }
    if (*v20 == v30 && v30 >= 8)
    {
      v40 = *(llvm::MachineInstr **)(v31 + 16);
      if (v40)
      {
        if (**((_WORD **)v40 + 2) == 31)
        {
          v52 = *(_DWORD *)(a2 + 112);
          v56 = *(_QWORD *)(v31 + 16);
          NumExplicitDefs = llvm::MachineInstr::getNumExplicitDefs(v40);
          v42 = *(_QWORD *)(*((_QWORD *)v40 + 2) + 32);
          if (v42)
          {
            v43 = -1;
            do
              ++v43;
            while (*(_WORD *)(v42 + 2 * v43));
          }
          else
          {
            v43 = 0;
          }
          v57 = v43 + NumExplicitDefs;
          v44 = *(_QWORD *)(v56 + 32);
          v45 = v57 + *(_DWORD *)(v44 + 32 * (v57 + 2) + 16);
          if ((*(_BYTE *)(v44 + 32 * (v45 + 7) + 16) & 2) == 0)
          {
            v46 = (v45 + 9);
            NumGCPtrIdx = llvm::StatepointOpers::getNumGCPtrIdx((llvm::StatepointOpers *)&v56);
            if (v46 < NumGCPtrIdx)
            {
              v48 = NumGCPtrIdx - (unint64_t)v46;
              v49 = (_DWORD *)(*((_QWORD *)v40 + 4) + 32 * v46 + 4);
              while (*((_BYTE *)v49 - 4) || *v49 != v52)
              {
                v49 += 8;
                if (!--v48)
                  goto LABEL_37;
              }
              ++v20;
              sub_1C51076EC((uint64_t)v53, j >> 3);
            }
          }
        }
      }
    }
LABEL_37:
    if (v7 + 3 == (unint64_t *)v8)
      break;
    if (v20 == v21)
      break;
    v37 = *(_QWORD *)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8) - 16);
    v38 = (*v20 >> 1) & 3 | *(_DWORD *)((*v20 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v38 > (*(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 24) | (v37 >> 1) & 3))
      break;
    do
    {
      v39 = (v7[4] >> 1) & 3 | *(_DWORD *)((v7[4] & 0xFFFFFFFFFFFFFFF8) + 24);
      v7 += 3;
    }
    while (v39 < v38);
    while (((*v20 >> 1) & 3 | *(_DWORD *)((*v20 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((*v7 >> 1) & 3 | *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      if (++v20 == v21)
        return v54 != 0;
    }
  }
  return v54 != 0;
}

uint64_t sub_1C51076EC(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  if (!**(_BYTE **)a1)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(v5 + 8) = 0;
    v6 = *(_DWORD *)(*(_QWORD *)(v4 + 264) + 16);
    *(_DWORD *)(v5 + 64) = v6;
    if ((v6 + 63) < 0x40)
    {
      v10 = 0;
    }
    else
    {
      v7 = (v6 + 63) >> 6;
      if (v7 > *(_DWORD *)(v5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v7, 8);
        v8 = *(unsigned int *)(v5 + 8);
        v6 = *(_DWORD *)(v5 + 64);
        v9 = *(_DWORD *)(v5 + 8);
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
      memset((void *)(*(_QWORD *)v5 + 8 * v8), 255, 8 * v7);
      v10 = (v9 + v7);
      *(_DWORD *)(v5 + 8) = v10;
    }
    if ((v6 & 0x3F) != 0)
      *(_QWORD *)(*(_QWORD *)v5 + 8 * v10 - 8) &= ~(-1 << (v6 & 0x3F));
    **(_BYTE **)a1 = 1;
  }
  return sub_1C5109220(*(_QWORD *)(a1 + 8), *(unsigned int **)(**(_QWORD **)(a1 + 24) + 8 * a2), 0xFFFFFFFF);
}

void llvm::LiveIntervals::handleMove(llvm::LiveIntervals *this, llvm::MachineInstr *a2, char a3)
{
  int32x2_t *v6;
  __int16 v7;
  llvm::MachineInstr *v8;
  llvm::MachineInstr *v9;
  llvm::MachineInstr *v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::MachineInstr **v18;
  llvm::MachineInstr *v19;
  llvm::MachineInstr *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::MachineInstr *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  llvm::LiveIntervals *v30;
  __int128 v31;
  llvm::MachineInstr *v32;
  unint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  int v37;
  _BYTE v38[72];

  v6 = (int32x2_t *)*((_QWORD *)this + 36);
  v7 = *((_WORD *)a2 + 22);
  v8 = a2;
  v9 = a2;
  if ((v7 & 0xC) != 0)
  {
    v8 = a2;
    if ((v7 & 4) != 0)
    {
      v8 = a2;
      do
        v8 = (llvm::MachineInstr *)(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8);
      while ((*((_WORD *)v8 + 22) & 4) != 0);
    }
    v9 = a2;
    if ((v7 & 8) != 0)
    {
      do
        v9 = (llvm::MachineInstr *)*((_QWORD *)v9 + 1);
      while ((*((_WORD *)v9 + 22) & 8) != 0);
    }
  }
  v10 = (llvm::MachineInstr *)*((_QWORD *)v9 + 1);
  if (v8 != v10)
  {
    while (1)
    {
      v11 = **((unsigned __int16 **)v8 + 2);
      v12 = v11 > 0x17;
      v13 = (1 << v11) & 0x83E000;
      if (v12 || v13 == 0)
        break;
      v8 = (llvm::MachineInstr *)*((_QWORD *)v8 + 1);
      if (v8 == v10)
      {
        v8 = (llvm::MachineInstr *)*((_QWORD *)v9 + 1);
        break;
      }
    }
  }
  v15 = v6[46];
  v16 = v6[48].u32[0];
  if (!(_DWORD)v16)
  {
LABEL_26:
    v17 = v6[48].u32[0];
LABEL_24:
    v20 = *(llvm::MachineInstr **)(*(_QWORD *)&v15 + 16 * v17 + 8);
    if (!(_DWORD)v16)
      goto LABEL_25;
    goto LABEL_11;
  }
  LODWORD(v17) = ((v8 >> 4) ^ (v8 >> 9)) & (v16 - 1);
  v18 = (llvm::MachineInstr **)(*(_QWORD *)&v15 + 16 * v17);
  v19 = *v18;
  if (v8 != *v18)
  {
    v28 = 1;
    while (v19 != (llvm::MachineInstr *)-4096)
    {
      v29 = v17 + v28++;
      v17 = v29 & (v16 - 1);
      v19 = *(llvm::MachineInstr **)(*(_QWORD *)&v15 + 16 * v17);
      if (v8 == v19)
        goto LABEL_24;
    }
    goto LABEL_26;
  }
  v20 = v18[1];
LABEL_11:
  LODWORD(v21) = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v22 = *(_QWORD *)&v15 + 16 * v21;
  v23 = *(llvm::MachineInstr **)v22;
  if (*(llvm::MachineInstr **)v22 == a2)
    goto LABEL_12;
  v26 = 1;
  while (v23 != (llvm::MachineInstr *)-4096)
  {
    v27 = v21 + v26++;
    v21 = v27 & (v16 - 1);
    v23 = *(llvm::MachineInstr **)(*(_QWORD *)&v15 + 16 * v21);
    if (v23 == a2)
    {
      v22 = *(_QWORD *)&v15 + 16 * v21;
      goto LABEL_12;
    }
  }
LABEL_25:
  v22 = *(_QWORD *)&v15 + 16 * v16;
LABEL_12:
  if (v22 != *(_QWORD *)&v15 + 16 * v16)
  {
    v24 = *(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v22 = -8192;
    v6[47] = vadd_s32(v6[47], (int32x2_t)0x1FFFFFFFFLL);
    *(_QWORD *)(v24 + 16) = 0;
    v6 = (int32x2_t *)*((_QWORD *)this + 36);
  }
  v25 = sub_1C4850BC8((uint64_t)v6, (uint64_t)a2, 0);
  v30 = this;
  v31 = *((_OWORD *)this + 16);
  v32 = v20;
  v33 = v25;
  v34 = v38;
  v35 = v38;
  v36 = 8;
  v37 = 0;
  v38[64] = a3;
  sub_1C5107A10((uint64_t *)&v30, (uint64_t)a2);
  if (v35 != v34)
    free(v35);
}

void sub_1C5107A10(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  unsigned int *v5;
  unsigned int *v6;
  llvm::SmallPtrSetImplBase *v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _WORD *v14;
  unsigned __int16 *v15;
  __int16 v16;
  unsigned __int16 v17;
  llvm::LiveRange *v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v59;
  llvm::LiveRangeCalc *v60;
  unsigned int *v61;
  uint64_t *v62;

  v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = *(unsigned int **)(a2 + 32);
    v6 = &v5[8 * v2];
    v7 = (llvm::SmallPtrSetImplBase *)(a1 + 5);
    v61 = v6;
    do
    {
      v8 = *v5;
      v9 = *v5 == 12;
      if (*v5)
        goto LABEL_4;
      if ((v8 & 0x1000000) == 0)
      {
        if ((v8 & 0x30000000) != 0)
          goto LABEL_4;
        *v5 = v8 & 0xFBFFFFFF;
      }
      v10 = v5[1];
      if (v10)
      {
        if ((v10 & 0x80000000) == 0)
        {
          v11 = a1[2];
          if (v11)
            v12 = (_QWORD *)(v11 + 8);
          else
            v12 = 0;
          v13 = *(unsigned int *)(*v12 + 24 * v10 + 16);
          v14 = (_WORD *)(v12[6] + ((v13 >> 3) & 0x1FFFFFFE));
          v16 = *v14;
          v15 = v14 + 1;
          v17 = v16 + (v13 & 0xF) * v10;
          do
          {
            v18 = sub_1C51092A0((uint64_t)a1, v17);
            if (v18)
            {
              v19 = (uint64_t)v18;
              sub_1C4774094(v7, (uint64_t)v18);
              if (v20)
              {
                if (*(_DWORD *)((a1[3] & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((a1[4] & 0xFFFFFFFFFFFFFFF8) + 24))
                  sub_1C51097DC(a1, v19, v17, 0);
                else
                  sub_1C51092F8(a1, v19);
              }
            }
            v21 = *v15++;
            v17 += v21;
          }
          while (v21);
          goto LABEL_4;
        }
        v22 = *a1;
        v23 = v10 & 0x7FFFFFFF;
        if (v23 >= *(unsigned int *)(*a1 + 416) || (v24 = *(_QWORD *)(*(_QWORD *)(v22 + 408) + 8 * v23)) == 0)
        {
          v24 = sub_1C4851220(*a1, v5[1]);
          v54 = *(_QWORD *)(v22 + 304);
          v55 = *(_QWORD *)(v22 + 248);
          *(_QWORD *)v54 = v55;
          *(_QWORD *)(v54 + 8) = *(_QWORD *)(v55 + 40);
          *(_OWORD *)(v54 + 16) = *(_OWORD *)(v22 + 288);
          *(_QWORD *)(v54 + 32) = v22 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v54);
          *(_DWORD *)(v54 + 184) = 0;
          v56 = *(_QWORD *)(v22 + 256);
          v53 = *(_BYTE *)(v56 + 16) == 0;
          v57 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v56 + 24) + 16 * (*(_DWORD *)(v24 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 34);
          v59 = !v53 && v57 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v22 + 304), (llvm::LiveInterval *)v24, v59);
          llvm::LiveIntervals::computeDeadValues(v22, v24, 0);
        }
        v25 = *(_QWORD *)(v24 + 104);
        if (v25)
        {
          v26 = ((unint64_t)*v5 >> 8) & 0xFFF;
          if ((_DWORD)v26)
            v27 = (uint64_t *)(*(_QWORD *)(a1[2] + 232) + 8 * v26);
          else
            v27 = (uint64_t *)((*(_QWORD *)(*(_QWORD *)(a1[1] + 24) + 16 * v23) & 0xFFFFFFFFFFFFFFF8) + 24);
          v28 = *v27;
          do
          {
            v29 = *(_QWORD *)(v25 + 112);
            if ((v29 & v28) != 0)
            {
              sub_1C4774094(v7, v25);
              if (v30)
              {
                if (*(_DWORD *)((a1[3] & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((a1[4] & 0xFFFFFFFFFFFFFFF8) + 24))
                  sub_1C51097DC(a1, v25, v10, v29);
                else
                  sub_1C51092F8(a1, v25);
              }
            }
            v25 = *(_QWORD *)(v25 + 104);
          }
          while (v25);
        }
        sub_1C4774094(v7, v24);
        v6 = v61;
        if (v31)
        {
          if (*(_DWORD *)((a1[3] & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((a1[4] & 0xFFFFFFFFFFFFFFF8) + 24))
            sub_1C51097DC(a1, v24, v10, 0);
          else
            sub_1C51092F8(a1, v24);
        }
        v32 = *(_QWORD *)(v24 + 104);
        if (v32)
        {
          v33 = *(_DWORD *)(v24 + 8);
          do
          {
            if (v33)
            {
              v34 = *(_DWORD *)(v32 + 8);
              if (v34)
              {
                v35 = *(uint64_t **)v32;
                v36 = *(_QWORD *)v32 + 24 * v34;
                v37 = *(_QWORD *)v24;
                while (1)
                {
                  v38 = (_QWORD *)sub_1C50E5A80(v24, v37, *v35);
                  v33 = *(_DWORD *)(v24 + 8);
                  v39 = *(_QWORD *)v24 + 24 * v33;
                  if (v38 == (_QWORD *)v39
                    || ((*v38 >> 1) & 3 | *(_DWORD *)((*v38 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((*v35 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v35 >> 1) & 3))
                  {
                    break;
                  }
                  v40 = v38 + 3;
                  while (1)
                  {
                    v41 = *(v40 - 2);
                    if (((v41 >> 1) & 3 | *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 24)) >= ((v35[1] >> 1) & 3 | *(_DWORD *)((v35[1] & 0xFFFFFFFFFFFFFFF8) + 24)))
                      break;
                    if (v40 != (uint64_t *)v39)
                    {
                      v42 = *v40;
                      v40 += 3;
                      if (v41 == v42)
                        continue;
                    }
                    goto LABEL_55;
                  }
                  v35 += 3;
                  v37 = (uint64_t)(v40 - 3);
                  if (v35 == (uint64_t *)v36)
                    goto LABEL_52;
                }
LABEL_55:
                *(_DWORD *)(v24 + 72) = 0;
                *(_DWORD *)(v24 + 8) = 0;
                v43 = *a1;
                v44 = *(_QWORD *)(*a1 + 304);
                v45 = *(_QWORD *)(*a1 + 248);
                v46 = *a1 + 312;
                *(_QWORD *)v44 = v45;
                *(_QWORD *)(v44 + 8) = *(_QWORD *)(v45 + 40);
                *(_OWORD *)(v44 + 16) = *(_OWORD *)(v43 + 288);
                *(_QWORD *)(v44 + 32) = v46;
                llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v44);
                *(_DWORD *)(v44 + 184) = 0;
                v60 = *(llvm::LiveRangeCalc **)(v43 + 304);
                v47 = *(_QWORD *)(v24 + 104);
                if (v47)
                {
                  v48 = *((_QWORD *)v60 + 4);
                  do
                  {
                    v49 = *(unsigned int *)(v47 + 72);
                    if ((_DWORD)v49)
                    {
                      v50 = *(_QWORD *)(v47 + 64);
                      v51 = 8 * v49;
                      do
                      {
                        v52 = *(_QWORD *)(*(_QWORD *)v50 + 8);
                        v53 = v52 < 8 || (*(_QWORD *)(*(_QWORD *)v50 + 8) & 6) == 0;
                        if (!v53)
                        {
                          if (*(_QWORD *)(v24 + 96))
                          {
                            v62 = (uint64_t *)v24;
                            sub_1C510A3C0((uint64_t *)&v62, v52, v48, 0);
                          }
                          else
                          {
                            v62 = (uint64_t *)v24;
                            sub_1C510A6B8(&v62, v52, v48, 0);
                          }
                        }
                        v50 += 8;
                        v51 -= 8;
                      }
                      while (v51);
                    }
                    v47 = *(_QWORD *)(v47 + 104);
                  }
                  while (v47);
                }
                llvm::LiveRangeCalc::resetLiveOutMap(v60);
                llvm::LiveIntervalCalc::extendToUses(v60, (uint64_t *)v24, *(unsigned int *)(v24 + 112), -1, v24);
                v6 = v61;
                break;
              }
            }
            else
            {
              v33 = *(_DWORD *)(v32 + 8);
              if (v33)
                goto LABEL_55;
            }
LABEL_52:
            v32 = *(_QWORD *)(v32 + 104);
          }
          while (v32);
        }
      }
LABEL_4:
      v4 |= v9;
      v5 += 8;
    }
    while (v5 != v6);
    if ((v4 & 1) != 0)
      sub_1C61E25A8(a1);
  }
}

void llvm::LiveIntervals::handleMoveIntoNewBundle(llvm::LiveIntervals *this, llvm::MachineInstr *a2, char a3)
{
  unint64_t v6;
  llvm::MachineInstr *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int32x2_t *v27;
  int32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  llvm::MachineInstr *v40;
  uint64_t v41;
  llvm::MachineInstr *v42;
  llvm::MachineInstr *v43;
  unsigned int v44;
  BOOL v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::MachineInstr **v51;
  llvm::MachineInstr *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  _QWORD *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  llvm::LiveIntervals *v78;
  __int128 v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  int v85;
  _BYTE v86[72];
  void *v87;
  uint64_t v88;
  _QWORD v89[18];

  v89[16] = *MEMORY[0x1E0C80C00];
  v87 = v89;
  v88 = 0x1000000000;
  v6 = sub_1C4850BC8(*((_QWORD *)this + 36), (uint64_t)a2, 0);
  v7 = a2;
  if ((*((_WORD *)a2 + 22) & 8) != 0)
  {
    v7 = a2;
    do
      v7 = (llvm::MachineInstr *)*((_QWORD *)v7 + 1);
    while ((*((_WORD *)v7 + 22) & 8) != 0);
  }
  v8 = *((_QWORD *)v7 + 1);
  v9 = *((_QWORD *)a2 + 1);
  if (v9 != v8)
  {
    while (1)
    {
      v10 = *((_QWORD *)this + 36);
      v11 = *(_QWORD *)(v10 + 368);
      v12 = *(unsigned int *)(v10 + 384);
      v13 = (v9 >> 4) ^ (v9 >> 9);
      v14 = v12 - 1;
      LODWORD(v15) = (v12 - 1) & v13;
      v16 = (uint64_t *)(v11 + 16 * v15);
      while (1)
      {
        while (!(_DWORD)v12)
          ;
        v17 = *v16;
        if (v9 == *v16)
          break;
        v18 = 1;
        v19 = *v16;
        v20 = v14 & v13;
        while (v19 != -4096)
        {
          v21 = v20 + v18++;
          v20 = v21 & v14;
          v19 = *(_QWORD *)(v11 + 16 * v20);
          if (v9 == v19)
          {
            v22 = 1;
            while (v17 != -4096)
            {
              v23 = v15 + v22++;
              v15 = v23 & v14;
              v17 = *(_QWORD *)(v11 + 16 * v15);
              if (v9 == v17)
              {
                v16 = (uint64_t *)(v11 + 16 * v15);
                goto LABEL_16;
              }
            }
            v16 = (uint64_t *)(v11 + 16 * v12);
            goto LABEL_16;
          }
        }
      }
LABEL_16:
      v24 = v16[1];
      v25 = v88;
      if (v88 >= (unint64_t)HIDWORD(v88))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, (uint64_t)v89, v88 + 1, 8);
        v25 = v88;
      }
      *((_QWORD *)v87 + v25) = v24;
      v26 = v88 + 1;
      LODWORD(v88) = v88 + 1;
      v27 = (int32x2_t *)*((_QWORD *)this + 36);
      v28 = v27[46];
      v29 = v27[48].u32[0];
      if (!(_DWORD)v29)
        goto LABEL_24;
      LODWORD(v30) = (v29 - 1) & v13;
      v31 = (uint64_t *)(*(_QWORD *)&v28 + 16 * v30);
      v32 = *v31;
      if (*v31 != v9)
        break;
LABEL_25:
      if (v31 != (uint64_t *)(*(_QWORD *)&v28 + 16 * v29))
      {
        v35 = v31[1] & 0xFFFFFFFFFFFFFFF8;
        *v31 = -8192;
        v27[47] = vadd_s32(v27[47], (int32x2_t)0x1FFFFFFFFLL);
        *(_QWORD *)(v35 + 16) = 0;
      }
      v9 = *(_QWORD *)(v9 + 8);
      if (v9 == v8)
        goto LABEL_30;
    }
    v33 = 1;
    while (v32 != -4096)
    {
      v34 = v30 + v33++;
      v30 = v34 & (v29 - 1);
      v32 = *(_QWORD *)(*(_QWORD *)&v28 + 16 * v30);
      if (v32 == v9)
      {
        v31 = (uint64_t *)(*(_QWORD *)&v28 + 16 * v30);
        goto LABEL_25;
      }
    }
LABEL_24:
    v31 = (uint64_t *)(*(_QWORD *)&v28 + 16 * v29);
    goto LABEL_25;
  }
  v26 = v88;
LABEL_30:
  if (v26)
  {
    v36 = (uint64_t *)v87;
    v37 = 8 * v26;
    do
    {
      v38 = *v36;
      v78 = this;
      v79 = *((_OWORD *)this + 16);
      v80 = v38;
      v81 = v6;
      v82 = v86;
      v83 = v86;
      v84 = 8;
      v85 = 0;
      v86[64] = a3;
      sub_1C5107A10((uint64_t *)&v78, (uint64_t)a2);
      if (v83 != v82)
        free(v83);
      ++v36;
      v37 -= 8;
    }
    while (v37);
  }
  v39 = *((_WORD *)a2 + 22);
  v40 = a2;
  if ((v39 & 4) != 0)
  {
    v40 = a2;
    do
      v40 = (llvm::MachineInstr *)(*(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8);
    while ((*((_WORD *)v40 + 22) & 4) != 0);
  }
  v41 = *((_QWORD *)this + 36);
  v42 = a2;
  if ((v39 & 8) != 0)
  {
    v42 = a2;
    do
      v42 = (llvm::MachineInstr *)*((_QWORD *)v42 + 1);
    while ((*((_WORD *)v42 + 22) & 8) != 0);
  }
  v43 = (llvm::MachineInstr *)*((_QWORD *)v42 + 1);
  if (v40 != v43)
  {
    while (1)
    {
      v44 = **((unsigned __int16 **)v40 + 2);
      v45 = v44 > 0x17;
      v46 = (1 << v44) & 0x83E000;
      if (v45 || v46 == 0)
        break;
      v40 = (llvm::MachineInstr *)*((_QWORD *)v40 + 1);
      if (v40 == v43)
      {
        v40 = (llvm::MachineInstr *)*((_QWORD *)v42 + 1);
        break;
      }
    }
  }
  v48 = *(_QWORD *)(v41 + 368);
  v49 = *(unsigned int *)(v41 + 384);
  if ((_DWORD)v49)
  {
    LODWORD(v50) = ((v40 >> 4) ^ (v40 >> 9)) & (v49 - 1);
    v51 = (llvm::MachineInstr **)(v48 + 16 * v50);
    v52 = *v51;
    if (v40 == *v51)
      goto LABEL_51;
    v53 = 1;
    while (v52 != (llvm::MachineInstr *)-4096)
    {
      v54 = v50 + v53++;
      v50 = v54 & (v49 - 1);
      v52 = *(llvm::MachineInstr **)(v48 + 16 * v50);
      if (v40 == v52)
      {
        v51 = (llvm::MachineInstr **)(v48 + 16 * v50);
        goto LABEL_51;
      }
    }
  }
  v51 = (llvm::MachineInstr **)(v48 + 16 * v49);
LABEL_51:
  v55 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v55)
  {
    v56 = 0;
    v57 = (unint64_t)v51[1] & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      v58 = (int *)(*((_QWORD *)a2 + 4) + 32 * v56);
      v59 = *v58;
      if (*v58)
        goto LABEL_79;
      v60 = v58[1];
      if ((v60 & 0x80000000) == 0)
        goto LABEL_79;
      v61 = v60 & 0x7FFFFFFF;
      if (v61 >= *((_DWORD *)this + 104))
        goto LABEL_79;
      if ((v59 & 0x10000000) != 0)
        goto LABEL_79;
      v62 = *(_QWORD *)(*((_QWORD *)this + 51) + 8 * v61);
      if (!v62)
        goto LABEL_79;
      v63 = *(unsigned int *)(v62 + 8);
      v64 = *(_QWORD **)v62;
      if (!(_DWORD)v63)
        break;
      v65 = v64[3 * v63 - 2];
      v66 = *(_DWORD *)(v57 + 24);
      v67 = (v65 >> 1) & 3 | *(_DWORD *)((v65 & 0xFFFFFFFFFFFFFFF8) + 24);
      v68 = v64;
      v69 = v63;
      if (v66 >= v67)
        goto LABEL_68;
      do
      {
        v70 = v69 >> 1;
        v71 = v68[3 * (v69 >> 1) + 1];
        LODWORD(v71) = (v71 >> 1) & 3 | *(_DWORD *)((v71 & 0xFFFFFFFFFFFFFFF8) + 24);
        v69 -= (v69 >> 1) + 1;
        v72 = v66 >= v71;
        if (v66 >= v71)
          v73 = v70 + 1;
        else
          v73 = 0;
        v68 += 3 * v73;
        if (!v72)
          v69 = v70;
      }
      while (v69);
LABEL_69:
      v74 = &v64[3 * v63];
      if (v68 != v74)
      {
        v75 = *(_DWORD *)((*v68 & 0xFFFFFFFFFFFFFFF8) + 24);
        v76 = *(_DWORD *)(v57 + 24);
        if (((*v68 >> 1) & 3 | v75) > v76)
        {
          LOBYTE(v77) = 0;
          goto LABEL_75;
        }
        v77 = v68[1];
        if (v57 == (v77 & 0xFFFFFFFFFFFFFFF8))
        {
          v68 += 3;
          if (v68 != v74)
          {
            v75 = *(_DWORD *)((*v68 & 0xFFFFFFFFFFFFFFF8) + 24);
            goto LABEL_75;
          }
        }
        else
        {
LABEL_75:
          if (v76 >= v75)
            v77 = v68[1];
        }
        if ((~(_BYTE)v77 & 6) == 0)
          *v58 = v59 | 0x4000000;
      }
LABEL_79:
      if (++v56 == v55)
        goto LABEL_80;
    }
    LODWORD(v63) = 0;
LABEL_68:
    v68 = &v64[3 * v63];
    goto LABEL_69;
  }
LABEL_80:
  if (v87 != v89)
    free(v87);
}

void llvm::LiveIntervals::repairIntervalsInRange(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, _BYTE *a5, uint64_t a6)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  int v45;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  llvm::LiveInterval *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  int *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  _QWORD v95[7];

  v8 = a4;
  v9 = a3;
  v95[6] = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a1 + 288);
  if (v11 != a3)
  {
    v13 = *(_QWORD *)(v12 + 368);
    v14 = *(_DWORD *)(v12 + 384);
    v15 = v14 - 1;
    do
    {
      if (v14)
      {
        v16 = ((v9 >> 4) ^ (v9 >> 9)) & v15;
        v17 = *(_QWORD *)(v13 + 16 * v16);
        if (v9 == v17)
          goto LABEL_16;
        v18 = 1;
        while (v17 != -4096)
        {
          v19 = v16 + v18++;
          v16 = v19 & v15;
          v17 = *(_QWORD *)(v13 + 16 * v16);
          if (v9 == v17)
            goto LABEL_16;
        }
      }
      v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
      if (!v9 || (*(_BYTE *)v9 & 4) == 0)
      {
        while ((*(_WORD *)(v9 + 44) & 4) != 0)
          v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    while (v9 != v11);
    v9 = *(_QWORD *)(a2 + 56);
  }
LABEL_16:
  if (a2 + 48 == a4)
  {
LABEL_31:
    v27 = *(_QWORD *)(*(_QWORD *)(v12 + 392) + 16 * *(unsigned int *)(a2 + 24) + 8);
    v28 = (v27 >> 1) & 3;
    v29 = v27 & 0xFFFFFFFFFFFFFFF8;
    if (v28)
      v30 = v29 | (2 * (v28 - 1));
    else
      v30 = *(_QWORD *)v29 | 6;
    goto LABEL_50;
  }
  v20 = *(_QWORD *)(v12 + 368);
  v21 = *(unsigned int *)(v12 + 384);
  v22 = v21 - 1;
  while (!(_DWORD)v21)
  {
LABEL_24:
    if (!v8 || (*(_BYTE *)v8 & 4) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 8) != 0)
        v8 = *(_QWORD *)(v8 + 8);
    }
    v8 = *(_QWORD *)(v8 + 8);
    if (v8 == a2 + 48)
    {
      v8 = a2 + 48;
      goto LABEL_31;
    }
  }
  v23 = ((v8 >> 4) ^ (v8 >> 9)) & v22;
  v24 = *(_QWORD *)(v20 + 16 * v23);
  if (v8 != v24)
  {
    v25 = 1;
    while (v24 != -4096)
    {
      v26 = v23 + v25++;
      v23 = v26 & v22;
      v24 = *(_QWORD *)(v20 + 16 * v23);
      if (v8 == v24)
        goto LABEL_33;
    }
    goto LABEL_24;
  }
LABEL_33:
  v31 = *(_WORD *)(v8 + 44);
  v32 = v8;
  if ((v31 & 4) != 0)
  {
    v32 = v8;
    do
      v32 = *(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v32 + 44) & 4) != 0);
  }
  v33 = v8;
  if ((v31 & 8) != 0)
  {
    v33 = v8;
    do
      v33 = *(_QWORD *)(v33 + 8);
    while ((*(_WORD *)(v33 + 44) & 8) != 0);
  }
  v34 = *(_QWORD *)(v33 + 8);
  if (v32 != v34)
  {
    while (1)
    {
      v35 = **(unsigned __int16 **)(v32 + 16);
      v36 = v35 > 0x17;
      v37 = (1 << v35) & 0x83E000;
      v38 = v36 || v37 == 0;
      if (v38)
        break;
      v32 = *(_QWORD *)(v32 + 8);
      if (v32 == v34)
      {
        v32 = *(_QWORD *)(v33 + 8);
        break;
      }
    }
  }
  LODWORD(v39) = ((v32 >> 4) ^ (v32 >> 9)) & v22;
  v40 = (uint64_t *)(v20 + 16 * v39);
  v41 = *v40;
  if (v32 != *v40)
  {
    v42 = 1;
    while (v41 != -4096)
    {
      v43 = v39 + v42++;
      v39 = v43 & v22;
      v41 = *(_QWORD *)(v20 + 16 * v39);
      if (v32 == v41)
      {
        v40 = (uint64_t *)(v20 + 16 * v39);
        goto LABEL_49;
      }
    }
    v40 = (uint64_t *)(v20 + 16 * v21);
  }
LABEL_49:
  v30 = v40[1];
LABEL_50:
  v92 = v30;
  llvm::SlotIndexes::repairIndexesInRange(v12, a2, v9, v8);
  v93 = v95;
  v94 = 0xC00000000;
  sub_1C4860A74((unsigned int *)&v93, a5, &a5[4 * a6]);
  if (v8 != v9)
  {
    v44 = v8;
    do
    {
      v44 = *(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8;
      if (!v44 || (*(_BYTE *)v44 & 4) == 0)
      {
        while ((*(_WORD *)(v44 + 44) & 4) != 0)
          v44 = *(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8;
      }
      v45 = **(unsigned __int16 **)(v44 + 16);
      if ((v45 - 13) >= 5 && v45 != 23)
      {
        v47 = *(unsigned int *)(v44 + 40);
        if ((_DWORD)v47)
        {
          v48 = *(_DWORD **)(v44 + 32);
          v49 = &v48[8 * v47];
          do
          {
            if (!*v48)
            {
              v50 = v48[1];
              if ((v50 & 0x80000000) != 0)
              {
                v51 = *(unsigned int *)(a1 + 416);
                v52 = v50 & 0x7FFFFFFF;
                if ((*v48 & 0xFFF00) != 0 && v52 < v51)
                {
                  v64 = *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v52);
                  if (v64)
                  {
                    if (!*(_QWORD *)(v64 + 104))
                    {
                      v65 = *(_QWORD *)(a1 + 256);
                      if (*(_BYTE *)(v65 + 16)
                        && *(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v65 + 24) + 16 * v52) & 0xFFFFFFFFFFFFFFF8) + 34) != 0)
                      {
                        v67 = *(_QWORD *)(v64 + 96);
                        *(_QWORD *)(v64 + 96) = 0;
                        *(_QWORD *)(v64 + 104) = 0;
                        if (v67)
                        {
                          v91 = v67;
                          sub_1C47655E8(v67, *(_QWORD **)(v67 + 8));
                          MEMORY[0x1CAA32FC0](v91, 0x1020C4062D53EE8);
                        }
                        v68 = *(void **)(v64 + 64);
                        if (v68 != (void *)(v64 + 80))
                          free(v68);
                        if (*(_QWORD *)v64 != v64 + 16)
                          free(*(void **)v64);
                        MEMORY[0x1CAA32FC0](v64, 0x10A0C408DA535C6);
                        v51 = *(unsigned int *)(a1 + 416);
                        *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v52) = 0;
                      }
                    }
                  }
                }
                if (v52 >= v51 || !*(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v52))
                {
                  v54 = (llvm::LiveInterval *)sub_1C4851220(a1, v50);
                  v55 = *(_QWORD *)(a1 + 304);
                  v56 = *(_QWORD *)(a1 + 248);
                  *(_QWORD *)v55 = v56;
                  *(_QWORD *)(v55 + 8) = *(_QWORD *)(v56 + 40);
                  *(_OWORD *)(v55 + 16) = *(_OWORD *)(a1 + 288);
                  *(_QWORD *)(v55 + 32) = a1 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v55);
                  *(_DWORD *)(v55 + 184) = 0;
                  v57 = *(_QWORD *)(a1 + 256);
                  v38 = *(_BYTE *)(v57 + 16) == 0;
                  v58 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v57 + 24)
                                                        + 16 * (*((_DWORD *)v54 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                           + 34);
                  v60 = !v38 && v58 != 0;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a1 + 304), v54, v60);
                  llvm::LiveIntervals::computeDeadValues(a1, (uint64_t)v54, 0);
                  v61 = v93;
                  if ((_DWORD)v94)
                  {
                    v62 = 4 * v94;
                    v63 = v93;
                    while (*v63 != v50)
                    {
                      ++v63;
                      v62 -= 4;
                      if (!v62)
                      {
                        v63 = (char *)v93 + 4 * v94;
                        break;
                      }
                    }
                  }
                  else
                  {
                    v63 = v93;
                  }
                  v69 = ((char *)v63 - (_BYTE *)v93) >> 2;
                  v70 = v63 + 1;
                  if (v69 != v94 && v70 != (unsigned int *)((char *)v93 + 4 * v94))
                  {
                    v72 = 4 * v94 - 4 * v69 - 4;
                    do
                    {
                      v73 = *v70;
                      if (v73 != v50)
                        *v63++ = v73;
                      ++v70;
                      v72 -= 4;
                    }
                    while (v72);
                  }
                  LODWORD(v94) = (unint64_t)((char *)v63 - v61) >> 2;
                }
              }
            }
            v48 += 8;
          }
          while (v48 != v49);
        }
      }
    }
    while (v44 != v9);
  }
  v74 = (int *)v93;
  if ((_DWORD)v94)
  {
    v75 = (int *)((char *)v93 + 4 * v94);
    do
    {
      v76 = *v74;
      if (*v74 < 0)
      {
        if ((v76 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(a1 + 416)
          || (v77 = *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * (v76 & 0x7FFFFFFF))) == 0)
        {
          v77 = sub_1C4851220(a1, *v74);
          v81 = *(_QWORD *)(a1 + 304);
          v82 = *(_QWORD *)(a1 + 248);
          *(_QWORD *)v81 = v82;
          *(_QWORD *)(v81 + 8) = *(_QWORD *)(v82 + 40);
          *(_OWORD *)(v81 + 16) = *(_OWORD *)(a1 + 288);
          *(_QWORD *)(v81 + 32) = a1 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v81);
          *(_DWORD *)(v81 + 184) = 0;
          v83 = *(_QWORD *)(a1 + 256);
          v38 = *(_BYTE *)(v83 + 16) == 0;
          v84 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v83 + 24) + 16 * (*(_DWORD *)(v77 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 34);
          v86 = !v38 && v84 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a1 + 304), (llvm::LiveInterval *)v77, v86);
          llvm::LiveIntervals::computeDeadValues(a1, v77, 0);
        }
        if (*(_DWORD *)(v77 + 72))
        {
          v79 = (uint64_t *)(v77 + 104);
          v78 = *(_QWORD *)(v77 + 104);
          if (v78)
          {
            do
            {
              llvm::LiveIntervals::repairOldRegInRange(a1, v9, v8, v92, v78, v76, *(_QWORD *)(v78 + 112));
              v78 = *(_QWORD *)(v78 + 104);
            }
            while (v78);
            v80 = *v79;
            if (*v79)
            {
              while (1)
              {
                v89 = v80;
                if (!*(_DWORD *)(v80 + 8))
                  break;
LABEL_141:
                v79 = (uint64_t *)(v80 + 104);
                v80 = *(_QWORD *)(v80 + 104);
                if (!v80)
                  goto LABEL_142;
              }
              while (1)
              {
                v87 = *(_QWORD *)(v89 + 96);
                v80 = *(_QWORD *)(v89 + 104);
                *(_QWORD *)(v89 + 96) = 0;
                if (v87)
                {
                  v90 = v87;
                  sub_1C47655E8(v87, *(_QWORD **)(v87 + 8));
                  MEMORY[0x1CAA32FC0](v90, 0x1020C4062D53EE8);
                }
                v88 = *(void **)(v89 + 64);
                if (v88 != (void *)(v89 + 80))
                  free(v88);
                if (*(_QWORD *)v89 == v89 + 16)
                {
                  if (!v80)
                  {
LABEL_143:
                    *v79 = 0;
                    break;
                  }
                }
                else
                {
                  free(*(void **)v89);
                  if (!v80)
                    goto LABEL_143;
                }
                v89 = v80;
                if (*(_DWORD *)(v80 + 8))
                {
                  *v79 = v80;
                  goto LABEL_141;
                }
              }
            }
          }
LABEL_142:
          llvm::LiveIntervals::repairOldRegInRange(a1, v9, v8, v92, v77, v76, -1);
        }
      }
      ++v74;
    }
    while (v74 != v75);
    v74 = (int *)v93;
  }
  if (v74 != (int *)v95)
    free(v74);
}

void llvm::LiveIntervals::removeVRegDefAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;

  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_QWORD *)a2;
  if (v5)
  {
    v7 = *(_QWORD *)(v6 + 24 * v5 - 16);
    v8 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
    if (v8 < ((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      v9 = *(_QWORD **)a2;
      v10 = *(unsigned int *)(a2 + 8);
      do
      {
        v11 = v10 >> 1;
        v12 = v9[3 * (v10 >> 1) + 1];
        LODWORD(v12) = (v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
        v10 -= (v10 >> 1) + 1;
        v13 = v8 >= v12;
        if (v8 >= v12)
          v14 = v11 + 1;
        else
          v14 = 0;
        v9 += 3 * v14;
        if (!v13)
          v10 = v11;
      }
      while (v10);
      goto LABEL_10;
    }
  }
  else
  {
    v5 = 0;
  }
  v9 = (_QWORD *)(v6 + 24 * v5);
LABEL_10:
  if (v9 != (_QWORD *)(v6 + 24 * v5)
    && ((*v9 >> 1) & 3 | *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3))
  {
    v15 = v9[2];
    if (v15)
      llvm::LiveRange::removeValNo((uint64_t *)a2, v15);
  }
  v18 = *(_QWORD *)(a2 + 104);
  v16 = (uint64_t *)(a2 + 104);
  v17 = v18;
  if (!v18)
    return;
  v19 = a3 & 0xFFFFFFFFFFFFFFF8;
  v20 = (a3 >> 1) & 3;
  do
  {
    v21 = *(_DWORD *)(v17 + 8);
    v22 = *(_QWORD *)v17;
    if (!v21)
    {
      v21 = 0;
LABEL_32:
      v26 = (_QWORD *)(v22 + 24 * v21);
      goto LABEL_25;
    }
    v23 = *(_QWORD *)(v22 + 24 * v21 - 16);
    v24 = *(_DWORD *)(v19 + 24) | v20;
    v25 = (v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24);
    v26 = *(_QWORD **)v17;
    v27 = *(unsigned int *)(v17 + 8);
    if (v24 >= v25)
      goto LABEL_32;
    do
    {
      v28 = v27 >> 1;
      v29 = v26[3 * (v27 >> 1) + 1];
      LODWORD(v29) = (v29 >> 1) & 3 | *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24);
      v27 -= (v27 >> 1) + 1;
      v30 = v24 >= v29;
      if (v24 >= v29)
        v31 = v28 + 1;
      else
        v31 = 0;
      v26 += 3 * v31;
      if (!v30)
        v27 = v28;
    }
    while (v27);
LABEL_25:
    if (v26 != (_QWORD *)(v22 + 24 * v21)
      && ((*v26 >> 1) & 3 | *(_DWORD *)((*v26 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v19 + 24) | v20))
    {
      v32 = v26[2];
      if (v32)
      {
        if ((*(_QWORD *)(v32 + 8) ^ a3) <= 7)
          llvm::LiveRange::removeValNo((uint64_t *)v17, v32);
      }
    }
    v17 = *(_QWORD *)(v17 + 104);
  }
  while (v17);
  v33 = *v16;
  if (*v16)
  {
    while (1)
    {
      v34 = v33;
      if (!*(_DWORD *)(v33 + 8))
        break;
LABEL_35:
      v16 = (uint64_t *)(v33 + 104);
      v33 = *(_QWORD *)(v33 + 104);
      if (!v33)
        return;
    }
    while (1)
    {
      v35 = *(_QWORD *)(v34 + 96);
      v33 = *(_QWORD *)(v34 + 104);
      *(_QWORD *)(v34 + 96) = 0;
      if (v35)
      {
        sub_1C47655E8(v35, *(_QWORD **)(v35 + 8));
        MEMORY[0x1CAA32FC0](v35, 0x1020C4062D53EE8);
      }
      v36 = *(void **)(v34 + 64);
      if (v36 != (void *)(v34 + 80))
        free(v36);
      if (*(_QWORD *)v34 != v34 + 16)
        free(*(void **)v34);
      if (!v33)
        break;
      v34 = v33;
      if (*(_DWORD *)(v33 + 8))
      {
        *v16 = v33;
        goto LABEL_35;
      }
    }
    *v16 = 0;
  }
}

void llvm::LiveIntervals::constructMainRangeFromSubranges(llvm::LiveIntervals *this, llvm::LiveInterval *a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::LiveRangeCalc *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v14;

  v4 = *((_QWORD *)this + 38);
  v5 = *((_QWORD *)this + 31);
  *(_QWORD *)v4 = v5;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v5 + 40);
  *(_OWORD *)(v4 + 16) = *((_OWORD *)this + 18);
  *(_QWORD *)(v4 + 32) = (char *)this + 312;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v4);
  *(_DWORD *)(v4 + 184) = 0;
  v6 = (llvm::LiveRangeCalc *)*((_QWORD *)this + 38);
  v7 = *((_QWORD *)a2 + 13);
  if (v7)
  {
    v8 = *((_QWORD *)v6 + 4);
    do
    {
      v9 = *(unsigned int *)(v7 + 72);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v7 + 64);
        v11 = 8 * v9;
        do
        {
          v12 = *(_QWORD *)(*(_QWORD *)v10 + 8);
          if (v12 >= 8 && (*(_QWORD *)(*(_QWORD *)v10 + 8) & 6) != 0)
          {
            if (*((_QWORD *)a2 + 12))
            {
              v14 = (uint64_t *)a2;
              sub_1C510A3C0((uint64_t *)&v14, v12, v8, 0);
            }
            else
            {
              v14 = (uint64_t *)a2;
              sub_1C510A6B8(&v14, v12, v8, 0);
            }
          }
          v10 += 8;
          v11 -= 8;
        }
        while (v11);
      }
      v7 = *(_QWORD *)(v7 + 104);
    }
    while (v7);
  }
  llvm::LiveRangeCalc::resetLiveOutMap(v6);
  llvm::LiveIntervalCalc::extendToUses(v6, (uint64_t *)a2, *((unsigned int *)a2 + 28), -1, (uint64_t)a2);
}

uint64_t llvm::LiveIntervals::getLiveSubranges(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a2 + 104);
  if (v4)
  {
    result = 0;
    v6 = *a4 & 0xFFFFFFFFFFFFFFF8;
    v7 = (*a4 >> 1) & 3;
    while (1)
    {
      v8 = *(_DWORD *)(v4 + 8);
      v9 = *(_QWORD **)v4;
      if (v8)
      {
        v10 = v9[3 * v8 - 2];
        v11 = *(_DWORD *)(v6 + 24) | v7;
        v12 = (v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24);
        v13 = *(_QWORD **)v4;
        v14 = *(unsigned int *)(v4 + 8);
        if (v11 < v12)
        {
          do
          {
            v15 = v14 >> 1;
            v16 = v13[3 * (v14 >> 1) + 1];
            LODWORD(v16) = (v16 >> 1) & 3 | *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24);
            v14 -= (v14 >> 1) + 1;
            v17 = v11 >= v16;
            if (v11 >= v16)
              v18 = v15 + 1;
            else
              v18 = 0;
            v13 += 3 * v18;
            if (!v17)
              v14 = v15;
          }
          while (v14);
          goto LABEL_12;
        }
      }
      else
      {
        v8 = 0;
      }
      v13 = &v9[3 * v8];
LABEL_12:
      if (v13 != &v9[3 * v8]
        && ((*v13 >> 1) & 3 | *(_DWORD *)((*v13 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v6 + 24) | v7))
      {
        result |= *(_QWORD *)(v4 + 112);
      }
      v4 = *(_QWORD *)(v4 + 104);
      if (!v4)
        return result;
    }
  }
  return *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a3 + 24) + 16 * (*(_DWORD *)(a2 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                   + 24);
}

uint64_t sub_1C5109060(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;

  v2 = *(void **)(a1 + 176);
  if (v2 != (void *)(a1 + 192))
    free(v2);
  v3 = *(void **)(a1 + 136);
  if (v3 != (void *)(a1 + 152))
    free(v3);
  v4 = *(_DWORD *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    v8 = 152 * v4;
    v9 = (_QWORD *)(v5 + 96);
    do
    {
      v10 = *(v9 - 12);
      if (v10 != -4096 && v10 != -8192)
      {
        v11 = (_QWORD *)*(v9 - 2);
        if (v9 != v11)
          free(v11);
        v12 = (char *)*(v9 - 11);
        if (v9 - 9 != (_QWORD *)v12)
          free(v12);
      }
      v9 += 19;
      v8 -= 152;
    }
    while (v8);
    v5 = *(_QWORD *)(a1 + 112);
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  v6 = *(void **)(a1 + 40);
  if (v6 != (void *)(a1 + 56))
    free(v6);
  return a1;
}

_QWORD *sub_1C5109144(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  _QWORD *v12;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(_QWORD **)a1;
  if (!(_DWORD)v2)
  {
    LODWORD(v2) = 0;
    goto LABEL_14;
  }
  v4 = v3[3 * v2 - 2];
  v5 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
  if (v5 >= ((v4 >> 1) & 3 | *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_14:
    result = &v3[3 * v2];
    goto LABEL_10;
  }
  result = *(_QWORD **)a1;
  v7 = v2;
  do
  {
    v8 = v7 >> 1;
    v9 = result[3 * (v7 >> 1) + 1];
    LODWORD(v9) = (v9 >> 1) & 3 | *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24);
    v7 -= (v7 >> 1) + 1;
    v10 = v5 >= v9;
    if (v5 >= v9)
      v11 = v8 + 1;
    else
      v11 = 0;
    result += 3 * v11;
    if (!v10)
      v7 = v8;
  }
  while (v7);
LABEL_10:
  v12 = &v3[3 * v2];
  if (result == v12
    || ((*result >> 1) & 3 | *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
  {
    return v12;
  }
  return result;
}

uint64_t sub_1C5109220(uint64_t result, unsigned int *a2, unsigned int a3)
{
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v3 = (*(_DWORD *)(result + 64) + 31) >> 5;
  if (v3 >= a3)
    v3 = a3;
  if (v3 < 2)
  {
    v5 = 0;
    if (!v3)
      return result;
    goto LABEL_9;
  }
  v4 = *(_QWORD **)result;
  v5 = ((v3 - 2) >> 1) + 1;
  v6 = v5;
  do
  {
    v7 = *a2;
    v8 = a2[1];
    a2 += 2;
    *v4++ &= (*(_QWORD *)&v7 | 0xFFFFFFFF00000000) & ~((unint64_t)~v8 << 32);
    --v6;
  }
  while (v6);
  if ((v3 & 1) != 0)
LABEL_9:
    *(_QWORD *)(*(_QWORD *)result + 8 * v5) &= *a2 | 0xFFFFFFFF00000000;
  return result;
}

llvm::LiveRange *sub_1C51092A0(uint64_t a1, unsigned int a2)
{
  if (*(_BYTE *)(a1 + 136)
    && (llvm::MachineRegisterInfo::isReservedRegUnit(*(llvm::MachineRegisterInfo **)(a1 + 8), a2) & 1) == 0)
  {
    return sub_1C50E4F00(*(llvm::LiveIntervals **)a1, a2);
  }
  else
  {
    return *(llvm::LiveRange **)(*(_QWORD *)(*(_QWORD *)a1 + 680) + 8 * a2);
  }
}

uint64_t *sub_1C51092F8(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(uint64_t **)a2;
    v6 = *(_QWORD *)a2 + 24 * v2;
    v7 = result[3] & 0xFFFFFFFFFFFFFFF8;
    v8 = *(_DWORD *)(v7 + 24);
    if (v8 < ((*(_QWORD *)(v6 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v6 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                         + 24)))
    {
      do
      {
        v9 = v5;
        v10 = v2 >> 1;
        v11 = v5[3 * (v2 >> 1) + 1];
        LODWORD(v11) = (v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24);
        v2 -= (v2 >> 1) + 1;
        v12 = v8 >= v11;
        if (v8 >= v11)
          v13 = v10 + 1;
        else
          v13 = 0;
        v5 += 3 * v13;
        if (!v12)
          v2 = v10;
      }
      while (v2);
      if (v5 != (uint64_t *)v6)
      {
        v14 = *v5;
        v15 = *(_DWORD *)(v7 + 24);
        v16 = *(_DWORD *)((*v5 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v15 >= v16)
        {
          if (v16 >= v15)
            goto LABEL_45;
          v17 = &v9[3 * v13];
          v20 = v17[1];
          v19 = (unint64_t *)(v17 + 1);
          v18 = v20;
          v21 = v20 & 0xFFFFFFFFFFFFFFF8;
          if (*(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((result[4] & 0xFFFFFFFFFFFFFFF8) + 24))
            return result;
          if (v18 >= 8)
          {
            v22 = *(_QWORD *)(v21 + 16);
            if (v22)
            {
              v23 = *(_QWORD *)(v21 + 16);
              if ((*(_WORD *)(v22 + 44) & 4) != 0)
              {
                v23 = v22;
                do
                  v23 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v23 + 44) & 4) != 0);
              }
              v24 = *(_QWORD *)(v22 + 24);
              v25 = v24 + 48;
              v26 = *(_DWORD **)(v23 + 32);
              v27 = *(unsigned int *)(v23 + 40);
              v28 = &v26[8 * v27];
              if (!(_DWORD)v27)
              {
                v51 = *(_QWORD *)(v23 + 8);
                if (v51 == v25)
                {
                  v23 = v24 + 48;
                }
                else
                {
                  v23 = v24 + 48;
                  if ((*(_WORD *)(v51 + 44) & 4) != 0)
                  {
                    do
                    {
                      v52 = v51;
                      v53 = *(unsigned int *)(v51 + 40);
                      if ((_DWORD)v53)
                      {
                        v23 = v51;
                        goto LABEL_84;
                      }
                      v51 = *(_QWORD *)(v51 + 8);
                    }
                    while (v51 != v25 && (*(_WORD *)(v51 + 44) & 4) != 0);
                    v23 = v24 + 48;
LABEL_84:
                    v26 = *(_DWORD **)(v52 + 32);
                    v28 = &v26[8 * v53];
                  }
                }
              }
              v29 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 32) + 32 * *(unsigned int *)(*(_QWORD *)(v24 + 56) + 40);
              while (v23 != v25 || v26 != (_DWORD *)v29 && v26 != v28)
              {
                if ((*v26 & 0x10000FF) == 0)
                  *v26 &= ~0x4000000u;
                v26 += 8;
                if (v26 == v28)
                {
                  v30 = *(_QWORD *)(v23 + 8);
                  v23 = v25;
                  v26 = v28;
                  if (v30 != v25)
                  {
                    v23 = v25;
                    v26 = v28;
                    if ((*(_WORD *)(v30 + 44) & 4) != 0)
                    {
                      while (1)
                      {
                        v31 = v30;
                        v32 = *(unsigned int *)(v30 + 40);
                        if ((_DWORD)v32)
                          break;
                        v30 = *(_QWORD *)(v30 + 8);
                        if (v30 == v25 || (*(_WORD *)(v30 + 44) & 4) == 0)
                        {
                          v23 = v25;
                          goto LABEL_31;
                        }
                      }
                      v23 = v30;
LABEL_31:
                      v26 = *(_DWORD **)(v31 + 32);
                      v28 = &v26[8 * v32];
                    }
                  }
                }
              }
              v7 = result[3] & 0xFFFFFFFFFFFFFFF8;
            }
          }
          v5 += 3;
          if (v5 == (uint64_t *)v6)
          {
            v34 = result[4];
          }
          else
          {
            v33 = *v5 & 0xFFFFFFFFFFFFFFF8;
            v34 = result[4];
            if (v7 != v33 && *(_DWORD *)(v33 + 24) < *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24))
            {
              result = (uint64_t *)sub_1C50E5A80(a2, (uint64_t)v5, v34 & 0xFFFFFFFFFFFFFFF8);
              v35 = v4[4];
              if (result == (uint64_t *)v6)
              {
                v36 = v35 & 0xFFFFFFFFFFFFFFF8;
              }
              else
              {
                v36 = v35 & 0xFFFFFFFFFFFFFFF8;
                if (*(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)(v36 + 24))
                  goto LABEL_71;
              }
              *(result - 2) = v36 | 4;
LABEL_71:
              *v19 = *v5;
              return result;
            }
          }
          v37 = *v19;
          v38 = *v19 & 6;
          v39 = v34 & 0xFFFFFFFFFFFFFFF8;
          if (v38 != 2)
            v38 = 4;
          *v19 = v38 | v39;
          if (v5 != (uint64_t *)v6 && v7 == (v37 & 0xFFFFFFFFFFFFFFF8))
          {
            v14 = *v5;
            if ((result[3] & 0xFFFFFFFFFFFFFFF8) == (*v5 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_45:
              v40 = v14 & 6;
              v41 = result[4] & 0xFFFFFFFFFFFFFFF8;
              if (v40 != 2)
                v40 = 4;
              v42 = v41 | v40;
              v43 = v5[2];
              if (*(_DWORD *)(v41 + 24) >= *(_DWORD *)((v5[1] & 0xFFFFFFFFFFFFFFF8) + 24))
              {
                result = (uint64_t *)sub_1C50E5A80(a2, (uint64_t)v5, v41 | 4);
                v44 = result;
                v45 = v5[1];
                if ((~*((_DWORD *)v5 + 2) & 6) != 0
                  && (v46 = *(_DWORD *)(v41 + 24), *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 24) < v46))
                {
                  if (v5 == *(uint64_t **)a2
                    || (v47 = v5 - 2,
                        *(_DWORD *)((*(v5 - 2) & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*v5 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 24)))
                  {
                    v5[3] = v45;
                    v47 = (uint64_t *)(v5[5] + 8);
                  }
                  *v47 = v45;
                  if (result == (uint64_t *)v6)
                  {
                    if ((uint64_t *)v6 != v5 + 3)
                      result = (uint64_t *)memmove(v5, v5 + 3, v6 - (_QWORD)(v5 + 3));
                    *(_QWORD *)(v6 - 24) = v42;
                    *(_QWORD *)(v6 - 16) = v41 | 6;
                    *(_QWORD *)(v6 - 8) = v43;
                    *(_QWORD *)(v43 + 8) = v42;
                    *(_QWORD *)(v6 - 40) = v42;
                  }
                  else
                  {
                    if (result != v5)
                    {
                      result = (uint64_t *)memmove(v5, v5 + 3, (char *)result - (char *)v5);
                      v46 = *(_DWORD *)(v41 + 24);
                    }
                    if (*(_DWORD *)((*(v44 - 3) & 0xFFFFFFFFFFFFFFF8) + 24) >= v46)
                    {
                      v50 = *v44;
                      *(v44 - 3) = v42;
                      *(v44 - 2) = v50;
                      *(v44 - 1) = v43;
                      *(_QWORD *)(v43 + 8) = v42;
                    }
                    else
                    {
                      v48 = *(v44 - 2);
                      v49 = *(v44 - 1);
                      *v44 = v42;
                      v44[1] = v48;
                      v44[2] = v49;
                      *(_QWORD *)(v49 + 8) = v42;
                      *(v44 - 2) = v42;
                      *(v44 - 1) = v43;
                      *(_QWORD *)(v43 + 8) = *(v44 - 3);
                    }
                  }
                }
                else if (result != (uint64_t *)v6 && (*result & 0xFFFFFFFFFFFFFFF8) == v41)
                {
                  return llvm::LiveRange::removeValNo((uint64_t *)a2, v43);
                }
                else
                {
                  if (result != v5 + 3)
                    result = (uint64_t *)memmove(v5, v5 + 3, (char *)result - (char *)(v5 + 3));
                  *(_QWORD *)(v43 + 8) = v42;
                  *(v44 - 3) = v42;
                  *(v44 - 2) = v41 | 6;
                  *(v44 - 1) = v43;
                }
              }
              else
              {
                *(_QWORD *)(v43 + 8) = v42;
                *v5 = v42;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C51097DC(uint64_t *result, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  char *v40;
  char v41;
  uint64_t **v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  char *v53;
  char *i;
  unint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;

  v4 = *(_DWORD *)(a2 + 8);
  if (!v4)
    return result;
  v6 = result;
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)a2 + 24 * v4;
  v9 = result[3] & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_DWORD *)(v9 + 24);
  if (v10 >= ((*(_QWORD *)(v8 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v8 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                         + 24)))
    return result;
  v11 = *(char **)a2;
  v12 = *(unsigned int *)(a2 + 8);
  do
  {
    v13 = v11;
    v14 = v12 >> 1;
    v15 = *(_QWORD *)&v11[24 * (v12 >> 1) + 8];
    LODWORD(v15) = (v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
    v12 -= (v12 >> 1) + 1;
    v16 = v10 >= v15;
    if (v10 >= v15)
      v17 = v14 + 1;
    else
      v17 = 0;
    v11 += 24 * v17;
    if (!v16)
      v12 = v14;
  }
  while (v12);
  if (v11 == (char *)v8)
    return result;
  v18 = *(_QWORD *)v11;
  v19 = *(_DWORD *)(v9 + 24);
  v20 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
  v21 = *(_DWORD *)(v20 + 24);
  if (v19 < v21)
    return result;
  if (v21 < v19)
  {
    v40 = &v13[24 * v17];
    v43 = *((_QWORD *)v40 + 1);
    v42 = (uint64_t **)(v40 + 8);
    v41 = v43;
    if (v9 != (v43 & 0xFFFFFFFFFFFFFFF8))
      return result;
    v44 = v41 & 6;
    v45 = result[4] & 0xFFFFFFFFFFFFFFF8;
    if (v44 != 2)
      v44 = 4;
    v46 = (v21 | 3) >= (*(_DWORD *)(v45 + 24) | (v44 >> 1)) ? v20 | 6 : v45 | v44;
    result = (uint64_t *)sub_1C5109D58(result, v46, a3, a4);
    *v42 = result;
    v22 = v11 + 24;
    if (v11 + 24 == (char *)v8)
      return result;
    v18 = *(_QWORD *)v22;
    if ((v6[3] & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8))
      return result;
    v4 = *(_DWORD *)(a2 + 8);
    v7 = *(_QWORD *)a2;
  }
  else
  {
    v22 = v11;
    if (v11 == (char *)v7)
      v11 = (char *)(*(_QWORD *)a2 + 24 * v4);
    else
      v11 -= 24;
  }
  v23 = *((_QWORD *)v22 + 2);
  v24 = v18 & 6;
  v25 = v6[4] & 0xFFFFFFFFFFFFFFF8;
  if (v24 != 2)
    v24 = 4;
  if (!v4)
  {
    LODWORD(v26) = 0;
    goto LABEL_37;
  }
  v26 = v4;
  v27 = *(_QWORD *)(v7 + 24 * v4 - 16);
  v28 = *(_DWORD *)(v25 + 24) | 2;
  if (v28 >= ((v27 >> 1) & 3 | *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_37:
    v29 = (char *)(v7 + 24 * v26);
    goto LABEL_27;
  }
  v29 = (char *)v7;
  do
  {
    v30 = v26 >> 1;
    v31 = *(_QWORD *)&v29[24 * (v26 >> 1) + 8];
    LODWORD(v31) = (v31 >> 1) & 3 | *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24);
    v26 -= (v26 >> 1) + 1;
    v32 = v28 >= v31;
    if (v28 >= v31)
      v33 = v30 + 1;
    else
      v33 = 0;
    v29 += 24 * v33;
    if (!v32)
      v26 = v30;
  }
  while (v26);
LABEL_27:
  v34 = *((_QWORD *)v22 + 1) & 6;
  v35 = v25 | v24;
  v36 = *(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF8;
  if (v25 == v36)
  {
    if (v34 == 6)
      return llvm::LiveRange::removeValNo((uint64_t *)a2, *((_QWORD *)v22 + 2));
    *(_QWORD *)(v23 + 8) = v35;
    *(_QWORD *)v22 = v35;
    return llvm::LiveRange::removeValNo((uint64_t *)a2, *((_QWORD *)v29 + 2));
  }
  if (v34 != 6)
  {
    if (v11 == (char *)v8)
    {
      *(_QWORD *)v22 = v35;
LABEL_31:
      *(_QWORD *)(v23 + 8) = v35;
      return result;
    }
    v37 = *(_QWORD *)v11;
    v38 = *(_DWORD *)(v25 + 24);
    v39 = *(_DWORD *)((*(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v38 < v39)
    {
      v47 = *((_QWORD *)v29 + 4);
      if (v11 != (char *)v7 && v38 < *(_DWORD *)((*((_QWORD *)v11 - 2) & 0xFFFFFFFFFFFFFFF8) + 24))
      {
        if (((*((_QWORD *)v29 + 3) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v29 + 3) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 24)) >= ((v37 >> 1) & 3 | v39))
          v47 = *(_QWORD *)v11;
        else
          v47 = *((_QWORD *)v29 + 3);
      }
      v48 = *((_QWORD *)v11 + 2);
      *(_QWORD *)(v23 + 8) = v37;
      *(_QWORD *)v22 = *(_QWORD *)v11;
      if (v11 != v29)
        result = (uint64_t *)memmove(&v22[-(v11 - v29)], v29, v11 - v29);
      v49 = *((_QWORD *)v29 + 3);
      if (*(_DWORD *)((v49 & 0xFFFFFFFFFFFFFFF8) + 24) >= *(_DWORD *)((v6[4] & 0xFFFFFFFFFFFFFFF8) + 24))
      {
        *(_QWORD *)v29 = v35;
        *((_QWORD *)v29 + 1) = v49;
        *((_QWORD *)v29 + 2) = v48;
      }
      else
      {
        v50 = *((_QWORD *)v29 + 5);
        *(_QWORD *)v29 = v49;
        *((_QWORD *)v29 + 1) = v35;
        *((_QWORD *)v29 + 2) = v50;
        *((_QWORD *)v29 + 3) = v35;
        *((_QWORD *)v29 + 4) = v47;
        *((_QWORD *)v29 + 5) = v48;
      }
      *(_QWORD *)(v48 + 8) = v35;
    }
    else
    {
      *(_QWORD *)v22 = v35;
      *(_QWORD *)(v23 + 8) = v35;
      if (*(_DWORD *)((v6[4] & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*((_QWORD *)v11 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 24))
        *((_QWORD *)v11 + 1) = v35;
    }
    return result;
  }
  if (v11 == (char *)v8
    || (v51 = *(_DWORD *)(v25 + 24), *(_DWORD *)(v36 + 24) >= v51)
    || v51 >= *(_DWORD *)((*((_QWORD *)v29 + 1) & 0xFFFFFFFFFFFFFFF8) + 24))
  {
    if (v22 != v29)
      result = (uint64_t *)memmove(v29 + 24, v29, v22 - v29);
    *(_QWORD *)v29 = v35;
    *((_QWORD *)v29 + 1) = v25 | 6;
    *((_QWORD *)v29 + 2) = v23;
    goto LABEL_31;
  }
  v52 = v25 | 4;
  v53 = v22;
  if (v22 != v29)
    result = (uint64_t *)memmove(v29 + 24, v29, v22 - v29);
  *((_QWORD *)v29 + 1) = v52;
  *((_QWORD *)v29 + 3) = v52;
  *((_QWORD *)v29 + 5) = v23;
  *(_QWORD *)(v23 + 8) = v35;
  for (i = v29 + 48; i <= v53; i += 24)
    *((_QWORD *)i + 2) = v23;
  v55 = v6[4];
  if (v55 >= 8)
  {
    v56 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (v56)
    {
      result = sub_1C5109CD0(&v61, v56);
      v58 = v63;
      v57 = v64;
      while (v58 != v57)
      {
        if ((*v58 & 0x10000FF) == 0x1000000)
        {
          *v58 &= ~0x4000000u;
          v58 = v63;
          v57 = v64;
        }
        v58 += 8;
        v63 = v58;
        if (v58 == v57)
        {
          v59 = *(_QWORD *)(v61 + 8);
          if (v59 == v62)
          {
            v58 = v57;
          }
          else
          {
            v58 = v57;
            if ((*(_WORD *)(v59 + 44) & 4) != 0)
            {
              while (1)
              {
                v58 = *(_DWORD **)(v59 + 32);
                v60 = *(unsigned int *)(v59 + 40);
                v57 = &v58[8 * v60];
                if ((_DWORD)v60)
                  break;
                v59 = *(_QWORD *)(v59 + 8);
                if (v59 == v62 || (*(_WORD *)(v59 + 44) & 4) == 0)
                {
                  v63 = v58;
                  v64 = &v58[8 * v60];
                  v57 = v64;
                  goto LABEL_88;
                }
              }
              v63 = *(_DWORD **)(v59 + 32);
              v64 = &v58[8 * v60];
              v61 = v59;
              continue;
            }
          }
LABEL_88:
          v61 = v62;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C5109CD0(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *result = 0;
  result[1] = 0;
  v2 = a2;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
    v2 = a2;
    do
      v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v2 + 44) & 4) != 0);
  }
  *result = v2;
  v3 = *(_QWORD *)(a2 + 24) + 48;
  result[1] = v3;
  v4 = *(_QWORD *)(v2 + 32);
  v5 = *(unsigned int *)(v2 + 40);
  result[2] = v4;
  result[3] = v4 + 32 * v5;
  if (!(_DWORD)v5)
  {
    do
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == v3 || (*(_WORD *)(v2 + 44) & 4) == 0)
      {
        *result = v3;
        return result;
      }
      v6 = *(_QWORD *)(v2 + 32);
      v7 = *(unsigned int *)(v2 + 40);
      result[2] = v6;
      result[3] = v6 + 32 * v7;
    }
    while (!(_DWORD)v7);
    *result = v2;
  }
  return result;
}

uint64_t sub_1C5109D58(_QWORD *a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  _DWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  _WORD *v45;
  unsigned __int16 v46;
  unsigned __int16 *v47;
  int v48;
  int v49;
  BOOL v50;
  unint64_t v51;
  int *v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  __int16 v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;

  v5 = a2;
  if (a3 < 0)
  {
    v52 = *(int **)(*(_QWORD *)(a1[1] + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
    if (!v52)
      return v5;
    while (1)
    {
      v53 = *v52;
      if ((*v52 & 0x81000000) == 0)
        break;
      v52 = (int *)*((_QWORD *)v52 + 3);
      if (!v52)
        return v5;
    }
LABEL_85:
    if ((v53 & 0x10000000) != 0)
      goto LABEL_108;
    v54 = (v53 >> 8) & 0xFFF;
    if (v54)
    {
      if (a4 && (*(_QWORD *)(*(_QWORD *)(a1[2] + 232) + 8 * v54) & a4) == 0)
        goto LABEL_108;
    }
    v55 = *((_QWORD *)v52 + 1);
    v56 = *(_WORD *)(v55 + 44);
    v57 = v55;
    if ((v56 & 4) != 0)
    {
      do
        v57 = *(_QWORD *)v57 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v57 + 44) & 4) != 0);
    }
    if ((v56 & 8) != 0)
    {
      do
        v55 = *(_QWORD *)(v55 + 8);
      while ((*(_WORD *)(v55 + 44) & 8) != 0);
    }
    v58 = *(_QWORD *)(v55 + 8);
    if (v57 != v58)
    {
      while (1)
      {
        v59 = **(unsigned __int16 **)(v57 + 16);
        v23 = v59 > 0x17;
        v60 = (1 << v59) & 0x83E000;
        if (v23 || v60 == 0)
          break;
        v57 = *(_QWORD *)(v57 + 8);
        if (v57 == v58)
        {
          v57 = v58;
          break;
        }
      }
    }
    v62 = *(_QWORD *)(*a1 + 288);
    v63 = *(_QWORD *)(v62 + 368);
    v64 = *(unsigned int *)(v62 + 384);
    if ((_DWORD)v64)
    {
      LODWORD(v65) = ((v57 >> 4) ^ (v57 >> 9)) & (v64 - 1);
      v66 = (uint64_t *)(v63 + 16 * v65);
      v67 = *v66;
      if (v57 == *v66)
        goto LABEL_105;
      v68 = 1;
      while (v67 != -4096)
      {
        v69 = v65 + v68++;
        v65 = v69 & (v64 - 1);
        v67 = *(_QWORD *)(v63 + 16 * v65);
        if (v57 == v67)
        {
          v66 = (uint64_t *)(v63 + 16 * v65);
          goto LABEL_105;
        }
      }
    }
    v66 = (uint64_t *)(v63 + 16 * v64);
LABEL_105:
    v70 = v66[1];
    v71 = v70 & 0xFFFFFFFFFFFFFFF8;
    v72 = (v70 >> 1) & 3 | *(_DWORD *)((v70 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v72 > (*(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24) | (v5 >> 1) & 3))
    {
      v73 = v71 | 4;
      if (v72 < ((a1[3] >> 1) & 3 | *(_DWORD *)((a1[3] & 0xFFFFFFFFFFFFFFF8) + 24)))
        v5 = v73;
    }
LABEL_108:
    while (1)
    {
      v52 = (int *)*((_QWORD *)v52 + 3);
      if (!v52)
        return v5;
      v53 = *v52;
      if ((*v52 & 0x81000000) == 0)
        goto LABEL_85;
    }
  }
  v7 = *(_QWORD *)(*a1 + 288);
  v8 = sub_1C499C548(v7, a2);
  v9 = v8 + 48;
  v10 = a1[3];
  v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  v12 = (_QWORD *)(v7 + 344);
  while (1)
  {
    v11 = *(_QWORD *)(v11 + 8);
    if ((_QWORD *)v11 == v12)
      break;
    if (*(_QWORD *)(v11 + 16))
    {
      v13 = v11 & 0xFFFFFFFFFFFFFFF9 | (2 * ((v10 >> 1) & 3));
      goto LABEL_8;
    }
  }
  v13 = *v12 & 0xFFFFFFFFFFFFFFF9;
LABEL_8:
  if (v13 >= 8)
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (v14)
    {
      if (*(_QWORD *)(v14 + 24) == v8)
        v9 = v14;
    }
  }
  v15 = *(_QWORD *)(v8 + 56);
  if (v9 != v15)
  {
    while (1)
    {
      v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
      if (!v9 || (*(_BYTE *)v9 & 4) == 0)
      {
        while ((*(_WORD *)(v9 + 44) & 4) != 0)
          v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
      }
      v16 = **(unsigned __int16 **)(v9 + 16);
      if ((v16 - 13) >= 5 && v16 != 23)
        break;
LABEL_23:
      if (v9 == v15)
        return v5;
    }
    v18 = *(_WORD *)(v9 + 44);
    v19 = v9;
    if ((v18 & 4) != 0)
    {
      do
        v19 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v19 + 44) & 4) != 0);
    }
    v20 = v9;
    if ((v18 & 8) != 0)
    {
      do
        v20 = *(_QWORD *)(v20 + 8);
      while ((*(_WORD *)(v20 + 44) & 8) != 0);
    }
    v21 = *(_QWORD *)(v20 + 8);
    if (v19 != v21)
    {
      while (1)
      {
        v22 = **(unsigned __int16 **)(v19 + 16);
        v23 = v22 > 0x17;
        v24 = (1 << v22) & 0x83E000;
        if (v23 || v24 == 0)
          break;
        v19 = *(_QWORD *)(v19 + 8);
        if (v19 == v21)
        {
          v19 = v21;
          break;
        }
      }
    }
    v26 = *(_QWORD *)(v7 + 368);
    v27 = *(unsigned int *)(v7 + 384);
    if ((_DWORD)v27)
    {
      LODWORD(v28) = ((v19 >> 4) ^ (v19 >> 9)) & (v27 - 1);
      v29 = (uint64_t *)(v26 + 16 * v28);
      v30 = *v29;
      if (v19 == *v29)
        goto LABEL_41;
      v31 = 1;
      while (v30 != -4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v27 - 1);
        v30 = *(_QWORD *)(v26 + 16 * v28);
        if (v19 == v30)
        {
          v29 = (uint64_t *)(v26 + 16 * v28);
          goto LABEL_41;
        }
      }
    }
    v29 = (uint64_t *)(v26 + 16 * v27);
LABEL_41:
    v33 = v29[1] & 0xFFFFFFFFFFFFFFF8;
    if (*(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)(v33 + 24))
    {
      v34 = v9;
      if ((v18 & 4) != 0)
      {
        v34 = v9;
        do
          v34 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v34 + 44) & 4) != 0);
      }
      v35 = *(_QWORD *)(v9 + 24) + 48;
      v36 = *(_DWORD **)(v34 + 32);
      v37 = *(unsigned int *)(v34 + 40);
      v38 = &v36[8 * v37];
      if (!(_DWORD)v37)
      {
        v39 = *(_QWORD *)(v34 + 8);
        if (v39 == v35)
        {
          v34 = *(_QWORD *)(v9 + 24) + 48;
          goto LABEL_61;
        }
        v34 = *(_QWORD *)(v9 + 24) + 48;
        if ((*(_WORD *)(v39 + 44) & 4) != 0)
        {
          do
          {
            v40 = v39;
            v41 = *(unsigned int *)(v39 + 40);
            if ((_DWORD)v41)
              goto LABEL_59;
            v39 = *(_QWORD *)(v39 + 8);
          }
          while (v39 != v35 && (*(_WORD *)(v39 + 44) & 4) != 0);
LABEL_58:
          v34 = *(_QWORD *)(v9 + 24) + 48;
LABEL_60:
          v36 = *(_DWORD **)(v40 + 32);
          v38 = &v36[8 * v41];
          goto LABEL_61;
        }
      }
      while (1)
      {
LABEL_61:
        if (v36 == v38)
          goto LABEL_23;
        if ((*v36 & 0x100000FF) == 0)
        {
          v42 = v36[1];
          if (v42 - 1 <= 0x3FFFFFFE)
          {
            v43 = a1[2];
            v44 = *(unsigned int *)(*(_QWORD *)(v43 + 8) + 24 * v42 + 16);
            v45 = (_WORD *)(*(_QWORD *)(v43 + 56) + ((v44 >> 3) & 0x1FFFFFFE));
            v46 = *v45 + (v44 & 0xF) * v42;
            if (a3 == v46)
              break;
            v47 = v45 + 1;
            do
            {
              v49 = *v47++;
              v48 = v49;
              v46 += v49;
              if (!v49)
                v47 = 0;
              if (v48)
                v50 = v46 == a3;
              else
                v50 = 1;
            }
            while (!v50);
            if (v48)
              break;
          }
        }
        v36 += 8;
        if (v36 == v38)
        {
          v51 = *(_QWORD *)(v34 + 8);
          if (v51 == v35)
            goto LABEL_23;
          v36 = v38;
          v34 = *(_QWORD *)(v9 + 24) + 48;
          if ((*(_WORD *)(v51 + 44) & 4) != 0)
          {
            while (1)
            {
              v40 = v51;
              v41 = *(unsigned int *)(v51 + 40);
              if ((_DWORD)v41)
                break;
              v51 = *(_QWORD *)(v51 + 8);
              if (v51 == v35 || (*(_WORD *)(v51 + 44) & 4) == 0)
                goto LABEL_58;
            }
LABEL_59:
            v34 = v40;
            goto LABEL_60;
          }
        }
      }
      return v33 | 4;
    }
  }
  return v5;
}

uint64_t sub_1C510A26C()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Use segment set for the computation of the live ranges of physregs.";
  v1.n128_u64[1] = 67;
  sub_1C4E5DE0C((llvm::cl::Option *)&llvm::UseSegmentSetForPhysRegs, "use-segment-set-for-physregs", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::UseSegmentSetForPhysRegs, &dword_1C475E000);
}

uint64_t llvm::LiveRange::find(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;

  v2 = *((unsigned int *)a1 + 2);
  result = *a1;
  if (!(_DWORD)v2)
  {
    LODWORD(v2) = 0;
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(result + 24 * v2 - 16);
  v5 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
  if (v5 >= ((v4 >> 1) & 3 | *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_11:
    result += 24 * v2;
    return result;
  }
  do
  {
    v6 = v2 >> 1;
    v7 = *(_QWORD *)(result + 24 * (v2 >> 1) + 8);
    LODWORD(v7) = (v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24);
    v2 -= (v2 >> 1) + 1;
    v8 = v5 >= v7;
    if (v5 >= v7)
      v9 = v6 + 1;
    else
      v9 = 0;
    result += 24 * v9;
    if (!v8)
      v2 = v6;
  }
  while (v2);
  return result;
}

unint64_t llvm::LiveRange::createDeadDef(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;

  if (a1[12])
  {
    v4 = a1;
    return sub_1C510A3C0((uint64_t *)&v4, a2, a3, 0);
  }
  else
  {
    v4 = a1;
    return sub_1C510A6B8(&v4, a2, a3, 0);
  }
}

unint64_t sub_1C510A3C0(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  _QWORD **v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _BOOL4 v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = *a1;
  v7 = *(_QWORD ***)(*a1 + 96);
  v8 = (a2 >> 1) & 3;
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  if (v8 == 3)
    v10 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF9;
  else
    v10 = v9 | (2 * v8 + 2);
  *(_QWORD *)&v34 = a2;
  *((_QWORD *)&v34 + 1) = v10;
  v35 = 0;
  v11 = v7[1];
  if (v11)
  {
    v12 = v7 + 1;
    do
    {
      v13 = sub_1C510EEF4(a2, (_QWORD *)&v34 + 1, v11[4], v11 + 5);
      v14 = v11 + 1;
      if (v13)
      {
        v14 = v11;
        v12 = v11;
      }
      v11 = (_QWORD *)*v14;
    }
    while (*v14);
  }
  else
  {
    v12 = v7 + 1;
  }
  if (v12 != *v7)
  {
    v15 = (_QWORD *)*v12;
    if (*v12)
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)v15[1];
      }
      while (v15);
    }
    else
    {
      v17 = v12;
      do
      {
        v16 = (_QWORD *)v17[2];
        v18 = *v16 == (_QWORD)v17;
        v17 = v16;
      }
      while (v18);
    }
    if ((*(_DWORD *)(v9 + 24) | v8) < ((v16[5] >> 1) & 3 | *(_DWORD *)((v16[5] & 0xFFFFFFFFFFFFFFF8)
                                                                                    + 24)))
      v12 = v16;
  }
  if (v12 == v7 + 1)
  {
    if (!a4)
    {
      a4 = sub_1C484358C(a3, 16, 3);
      v26 = *(unsigned int *)(v6 + 72);
      *(_DWORD *)a4 = v26;
      *(_QWORD *)(a4 + 8) = a2;
      if (v26 >= *(_DWORD *)(v6 + 76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 64, v6 + 80, v26 + 1, 8);
        LODWORD(v26) = *(_DWORD *)(v6 + 72);
      }
      *(_QWORD *)(*(_QWORD *)(v6 + 64) + 8 * v26) = a4;
      ++*(_DWORD *)(v6 + 72);
      v7 = *(_QWORD ***)(*a1 + 96);
    }
    *(_QWORD *)&v34 = a2;
    *((_QWORD *)&v34 + 1) = v9 | 6;
    v35 = a4;
    sub_1C510EF68(v7, v7 + 1, (uint64_t *)&v34, (uint64_t)&v34);
  }
  else
  {
    v19 = v12[4];
    if (v9 == (v19 & 0xFFFFFFFFFFFFFFF8))
    {
      v27 = *(_DWORD *)(v9 + 24);
      v28 = v27 | (v19 >> 1) & 3;
      v29 = v27 | v8;
      a4 = v12[6];
      if (v19 != a2 && v28 >= v29)
      {
        *(_QWORD *)(a4 + 8) = a2;
        v12[4] = a2;
      }
    }
    else
    {
      if (!a4)
      {
        a4 = sub_1C484358C(a3, 16, 3);
        v20 = *(unsigned int *)(v6 + 72);
        *(_DWORD *)a4 = v20;
        *(_QWORD *)(a4 + 8) = a2;
        if (v20 >= *(_DWORD *)(v6 + 76))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 64, v6 + 80, v20 + 1, 8);
          LODWORD(v20) = *(_DWORD *)(v6 + 72);
        }
        *(_QWORD *)(*(_QWORD *)(v6 + 64) + 8 * v20) = a4;
        ++*(_DWORD *)(v6 + 72);
        v7 = *(_QWORD ***)(*a1 + 96);
      }
      *(_QWORD *)&v34 = a2;
      *((_QWORD *)&v34 + 1) = v9 | 6;
      v35 = a4;
      v21 = sub_1C510F00C(v7, v12, &v37, &v36, (uint64_t *)&v34);
      if (!*v21)
      {
        v22 = v21;
        v23 = operator new(0x38uLL);
        v23[2] = v34;
        *((_QWORD *)v23 + 6) = v35;
        v24 = v37;
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 + 2) = v24;
        *v22 = v23;
        v25 = (_QWORD *)**v7;
        if (v25)
        {
          *v7 = v25;
          v23 = (_OWORD *)*v22;
        }
        sub_1C4768E74(v7[1], (uint64_t *)v23);
        v7[2] = (_QWORD *)((char *)v7[2] + 1);
      }
    }
  }
  return a4;
}

unint64_t sub_1C510A6B8(uint64_t **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v4 = a4;
  v7 = *a1;
  v8 = *((_DWORD *)*a1 + 2);
  v9 = **a1;
  if (!v8)
  {
    v8 = 0;
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(v9 + 24 * v8 - 16);
  v11 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
  if (v11 >= ((v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_12:
    v12 = (uint64_t *)(v9 + 24 * v8);
    goto LABEL_13;
  }
  v12 = (uint64_t *)**a1;
  v13 = *((unsigned int *)*a1 + 2);
  do
  {
    v14 = v13 >> 1;
    v15 = v12[3 * (v13 >> 1) + 1];
    LODWORD(v15) = (v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
    v13 -= (v13 >> 1) + 1;
    v16 = v11 >= v15;
    if (v11 >= v15)
      v17 = v14 + 1;
    else
      v17 = 0;
    v12 += 3 * v17;
    if (!v16)
      v13 = v14;
  }
  while (v13);
LABEL_13:
  if (v12 == (uint64_t *)(v9 + 24 * v8))
  {
    if (!a4)
    {
      v4 = sub_1C484358C(a3, 16, 3);
      v21 = *((unsigned int *)v7 + 18);
      *(_DWORD *)v4 = v21;
      *(_QWORD *)(v4 + 8) = a2;
      if (v21 >= *((_DWORD *)v7 + 19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v7 + 8), (uint64_t)(v7 + 10), v21 + 1, 8);
        LODWORD(v21) = *((_DWORD *)v7 + 18);
      }
      *(_QWORD *)(v7[8] + 8 * v21) = v4;
      ++*((_DWORD *)v7 + 18);
      v7 = *a1;
    }
    v27 = a2;
    v28 = a2 & 0xFFFFFFFFFFFFFFF8 | 6;
    v29 = v4;
    v22 = sub_1C4926708((uint64_t)v7, (unint64_t)&v27, 1);
    v23 = *v7 + 24 * *((unsigned int *)v7 + 2);
    v24 = *(_OWORD *)v22;
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v22 + 16);
    *(_OWORD *)v23 = v24;
    ++*((_DWORD *)v7 + 2);
  }
  else
  {
    v18 = *v12;
    v19 = a2 & 0xFFFFFFFFFFFFFFF8;
    if ((a2 & 0xFFFFFFFFFFFFFFF8) == (*v12 & 0xFFFFFFFFFFFFFFF8))
    {
      v4 = v12[2];
      if ((*(_DWORD *)(v19 + 24) | (v18 >> 1) & 3) >= (*(_DWORD *)(v19 + 24) | (a2 >> 1) & 3)
        && v18 != a2)
      {
        *(_QWORD *)(v4 + 8) = a2;
        *v12 = a2;
      }
    }
    else
    {
      if (!a4)
      {
        v4 = sub_1C484358C(a3, 16, 3);
        v20 = *((unsigned int *)v7 + 18);
        *(_DWORD *)v4 = v20;
        *(_QWORD *)(v4 + 8) = a2;
        if (v20 >= *((_DWORD *)v7 + 19))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v7 + 8), (uint64_t)(v7 + 10), v20 + 1, 8);
          LODWORD(v20) = *((_DWORD *)v7 + 18);
        }
        *(_QWORD *)(v7[8] + 8 * v20) = v4;
        ++*((_DWORD *)v7 + 18);
        v7 = *a1;
      }
      v27 = a2;
      v28 = v19 | 6;
      v29 = v4;
      sub_1C510F69C((uint64_t)v7, (uint64_t)v12, (unint64_t)&v27);
    }
  }
  return v4;
}

unint64_t llvm::LiveRange::createDeadDef(uint64_t *a1, unint64_t a2)
{
  uint64_t *v3;

  if (a1[12])
  {
    v3 = a1;
    return sub_1C510A3C0((uint64_t *)&v3, *(_QWORD *)(a2 + 8), 0, a2);
  }
  else
  {
    v3 = a1;
    return sub_1C510A6B8(&v3, *(_QWORD *)(a2 + 8), 0, a2);
  }
}

BOOL llvm::LiveRange::overlapsFrom(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;
  _BOOL8 result;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
  v8 = (**(_QWORD **)a1 >> 1) & 3 | *(_DWORD *)((**(_QWORD **)a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  v9 = *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3;
  if (v8 >= v9)
  {
    if (v9 >= v8)
      return 1;
    if (a3 + 3 != (_QWORD *)v7
      && ((a3[3] >> 1) & 3 | *(_DWORD *)((a3[3] & 0xFFFFFFFFFFFFFFF8) + 24)) <= v8)
    {
      if ((_QWORD *)v7 != a3)
      {
        v24 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)a3) >> 3);
        do
        {
          v25 = v24 >> 1;
          v26 = &a3[3 * (v24 >> 1)];
          v28 = *v26;
          v27 = v26 + 3;
          v24 += ~(v24 >> 1);
          if (v8 < ((v28 >> 1) & 3 | *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24)))
            v24 = v25;
          else
            a3 = v27;
        }
        while (v24);
      }
      if (a3 == v6)
        v29 = 0;
      else
        v29 = -1;
      a3 += 3 * v29;
    }
  }
  else
  {
    if (v5)
    {
      v10 = *(unsigned int *)(a1 + 8);
      do
      {
        v11 = v10 >> 1;
        v12 = &v4[3 * (v10 >> 1)];
        v14 = *v12;
        v13 = v12 + 3;
        v10 += ~(v10 >> 1);
        if (v9 < ((v14 >> 1) & 3 | *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24)))
          v10 = v11;
        else
          v4 = v13;
      }
      while (v10);
    }
    if (v4 == v3)
      v15 = 0;
    else
      v15 = -1;
    v4 += 3 * v15;
  }
  v16 = &v3[3 * v5];
  if (a3 == (_QWORD *)v7 || v4 == v16)
    return 0;
  v18 = *a3;
  do
  {
    v19 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3;
    if (((*v4 >> 1) & 3 | *(_DWORD *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 24)) > v19)
    {
      v19 = (*v4 >> 1) & 3 | *(_DWORD *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 24);
      v18 = *v4;
      v20 = a3;
      v21 = (_QWORD *)v7;
      v7 = (uint64_t)v16;
      a3 = v4;
      v16 = v21;
    }
    else
    {
      v20 = v4;
      v21 = v16;
    }
    result = ((v20[1] >> 1) & 3 | *(_DWORD *)((v20[1] & 0xFFFFFFFFFFFFFFF8) + 24)) > v19;
    v4 = v20 + 3;
  }
  while (((v20[1] >> 1) & 3 | *(_DWORD *)((v20[1] & 0xFFFFFFFFFFFFFFF8) + 24)) <= v19 && v4 != v21);
  return result;
}

uint64_t llvm::LiveRange::overlaps(uint64_t a1, uint64_t a2, llvm::CoalescerPair *this)
{
  unint64_t v3;
  unint64_t *v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  const llvm::MachineInstr *v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  unsigned int v32;

  v3 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v3)
    return 0;
  v5 = *(unint64_t **)a2;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unint64_t **)a1;
  if (!v6)
  {
    v6 = 0;
    goto LABEL_13;
  }
  v8 = v7[3 * v6 - 2];
  v9 = (*v5 >> 1) & 3 | *(_DWORD *)((*v5 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v9 >= ((v8 >> 1) & 3 | *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_13:
    v10 = &v7[3 * v6];
    goto LABEL_14;
  }
  v10 = *(unint64_t **)a1;
  v11 = *(unsigned int *)(a1 + 8);
  do
  {
    v12 = v11 >> 1;
    v13 = v10[3 * (v11 >> 1) + 1];
    LODWORD(v13) = (v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24);
    v11 -= (v11 >> 1) + 1;
    v14 = v9 >= v13;
    if (v9 >= v13)
      v15 = v12 + 1;
    else
      v15 = 0;
    v10 += 3 * v15;
    if (!v14)
      v11 = v12;
  }
  while (v11);
LABEL_14:
  v16 = &v7[3 * v6];
  if (v10 == v16)
    return 0;
  v17 = *v10;
  v18 = &v5[3 * v3];
  v19 = (*v10 >> 1) & 3 | *(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v19 >= ((*(v18 - 2) >> 1) & 3 | *(_DWORD *)((*(v18 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
    return 0;
  do
  {
    v20 = v3 >> 1;
    v21 = v5[3 * (v3 >> 1) + 1];
    LODWORD(v21) = (v21 >> 1) & 3 | *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
    v3 -= (v3 >> 1) + 1;
    v22 = v19 >= v21;
    if (v19 >= v21)
      v23 = v20 + 1;
    else
      v23 = 0;
    v5 += 3 * v23;
    if (!v22)
      v3 = v20;
  }
  while (v3);
  if (v5 == v18)
    return 0;
LABEL_23:
  v24 = (*v5 >> 1) & 3 | *(_DWORD *)((*v5 & 0xFFFFFFFFFFFFFFF8) + 24);
  v25 = *(_DWORD *)((v10[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (v10[1] >> 1) & 3;
  if (v24 >= v25)
    goto LABEL_33;
  if ((*(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24) | (v17 >> 1) & 3) >= v24)
    v26 = v10;
  else
    v26 = v5;
  v27 = *v26;
  if ((v27 & 6) != 0)
  {
    v28 = v27 < 8 ? 0 : *(const llvm::MachineInstr **)((v27 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (llvm::CoalescerPair::isCoalescable(this, v28))
    {
      v25 = *(_DWORD *)((v10[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (v10[1] >> 1) & 3;
LABEL_33:
      if (((v5[1] >> 1) & 3 | *(_DWORD *)((v5[1] & 0xFFFFFFFFFFFFFFF8) + 24)) <= v25)
      {
        v29 = v16;
        v30 = v5;
      }
      else
      {
        v29 = v18;
        v30 = v10;
        v18 = v16;
        v10 = v5;
      }
      v31 = v30 + 3;
      while (v31 != v18)
      {
        v17 = *v10;
        v32 = (v31[1] >> 1) & 3 | *(_DWORD *)((v31[1] & 0xFFFFFFFFFFFFFFF8) + 24);
        v31 += 3;
        if (v32 >= (*(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v10 >> 1) & 3))
        {
          v5 = v31 - 3;
          v16 = v29;
          goto LABEL_23;
        }
      }
      return 0;
    }
  }
  return 1;
}

BOOL llvm::LiveRange::overlaps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(_QWORD **)a1;
  do
  {
    v5 = v3 >> 1;
    v6 = &v4[3 * (v3 >> 1)];
    v8 = *v6;
    v7 = v6 + 3;
    v3 += ~(v3 >> 1);
    if (((v8 >> 1) & 3 | *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3))
      v4 = v7;
    else
      v3 = v5;
  }
  while (v3);
  return v4 != *(_QWORD **)a1
      && ((*(v4 - 2) >> 1) & 3 | *(_DWORD *)((*(v4 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3);
}

BOOL llvm::LiveRange::covers(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (!*(_DWORD *)(a1 + 8))
    return *(_DWORD *)(a2 + 8) == 0;
  v2 = *(_DWORD *)(a2 + 8);
  if (!v2)
    return 1;
  v4 = *(uint64_t **)a2;
  v5 = *(_QWORD *)a2 + 24 * v2;
  v6 = *(_QWORD *)a1;
  while (1)
  {
    v7 = (_QWORD *)sub_1C50E5A80(a1, v6, *v4);
    v8 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    if (v7 == (_QWORD *)v8
      || ((*v7 >> 1) & 3 | *(_DWORD *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v4 >> 1) & 3))
    {
      break;
    }
    v9 = v7 + 3;
    while (1)
    {
      v10 = *(v9 - 2);
      if (((v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24)) >= ((v4[1] >> 1) & 3 | *(_DWORD *)((v4[1] & 0xFFFFFFFFFFFFFFF8) + 24)))
        break;
      if (v9 != (uint64_t *)v8)
      {
        v11 = *v9;
        v9 += 3;
        if (v10 == v11)
          continue;
      }
      return 0;
    }
    v4 += 3;
    v6 = (uint64_t)(v9 - 3);
    if (v4 == (uint64_t *)v5)
      return 1;
  }
  return 0;
}

uint64_t llvm::LiveRange::markValNoForDeletion(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;

  v2 = *(_DWORD *)(result + 72) - 1;
  if (*(_DWORD *)a2 == v2)
  {
    do
    {
      v3 = v2;
      if (!v2)
        break;
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 64) + 8 * v2-- - 8) + 8);
    }
    while (v4 < 8);
    *(_DWORD *)(result + 72) = v3;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

void llvm::LiveRange::RenumberValues(llvm::LiveRange *this)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  char v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  _BYTE v13[64];

  v9 = v13;
  v10 = v13;
  v11 = 8;
  v12 = 0;
  *((_DWORD *)this + 18) = 0;
  v1 = *((unsigned int *)this + 2);
  if ((_DWORD)v1)
  {
    v3 = (char *)this + 64;
    v4 = 24 * v1;
    v5 = (uint64_t *)(*(_QWORD *)this + 16);
    do
    {
      v6 = (_DWORD *)*v5;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v9, *v5);
      if (v7)
      {
        v8 = *((unsigned int *)this + 18);
        *v6 = v8;
        if (v8 >= *((unsigned int *)this + 19))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3, (uint64_t)this + 80, v8 + 1, 8);
          v8 = *((unsigned int *)this + 18);
        }
        *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v8) = v6;
        ++*((_DWORD *)this + 18);
      }
      v5 += 3;
      v4 -= 24;
    }
    while (v4);
    if (v10 != v9)
      free(v10);
  }
}

void llvm::LiveRange::addSegmentToSet(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v28 = *a2;
  v29 = *((_QWORD *)a2 + 2);
  v3 = *((_QWORD *)&v28 + 1);
  v30 = *a2;
  v31 = *((_QWORD *)a2 + 2);
  v4 = *(uint64_t ***)(a1 + 96);
  v5 = sub_1C510F274((uint64_t)v4, (uint64_t *)&v30);
  v6 = v5;
  v7 = *v4;
  if (*v4 != v5)
  {
    v8 = (uint64_t *)*v5;
    if (*v5)
    {
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v10 = v5;
      do
      {
        v9 = (uint64_t *)v10[2];
        v11 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (v11);
    }
    if (v29 == v9[6])
    {
      v12 = *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24) | (v28 >> 1) & 3;
      if (((v9[4] >> 1) & 3 | *(_DWORD *)((v9[4] & 0xFFFFFFFFFFFFFFF8) + 24)) <= v12
        && ((v9[5] >> 1) & 3 | *(_DWORD *)((v9[5] & 0xFFFFFFFFFFFFFFF8) + 24)) >= v12)
      {
        v22 = a1;
LABEL_49:
        sub_1C510F34C(v22, v9, v3);
        return;
      }
    }
  }
  if (v4 + 1 == (uint64_t **)v5
    || v29 != v5[6]
    || (v13 = (DWORD2(v28) >> 1) & 3,
        ((v5[4] >> 1) & 3 | *(_DWORD *)((v5[4] & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((*((_QWORD *)&v28 + 1) & 0xFFFFFFFFFFFFFFF8) + 24) | v13)))
  {
    sub_1C510EF68(v4, v5, (uint64_t *)&v28, (uint64_t)&v28);
    return;
  }
  v14 = v5;
  while (v14 != v7)
  {
    v15 = (uint64_t *)*v14;
    v16 = v14;
    if (*v14)
    {
      do
      {
        v14 = v15;
        v15 = (uint64_t *)v15[1];
      }
      while (v15);
    }
    else
    {
      do
      {
        v14 = (uint64_t *)v16[2];
        v11 = *v14 == (_QWORD)v16;
        v16 = v14;
      }
      while (v11);
    }
    v17 = *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24) | (v28 >> 1) & 3;
    if (v17 > ((v14[4] >> 1) & 3 | *(_DWORD *)((v14[4] & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      if (((v14[5] >> 1) & 3 | *(_DWORD *)((v14[5] & 0xFFFFFFFFFFFFFFF8) + 24)) < v17 || v14[6] != v29)
      {
        v18 = (uint64_t *)v14[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (uint64_t *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (uint64_t *)v14[2];
            v11 = *v19 == (_QWORD)v14;
            v14 = v19;
          }
          while (!v11);
        }
        v19[4] = v28;
        v14 = v19;
      }
      v14[5] = v5[5];
      v20 = (uint64_t *)v14[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        v24 = v14;
        do
        {
          v21 = (uint64_t *)v24[2];
          v11 = *v21 == (_QWORD)v24;
          v24 = v21;
        }
        while (!v11);
      }
      v25 = (uint64_t *)v5[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (uint64_t *)v6[2];
          v11 = *v26 == (_QWORD)v6;
          v6 = v26;
        }
        while (!v11);
      }
      if (v26 != v21)
      {
        do
        {
          v27 = sub_1C485B670(v4, v21);
          operator delete(v21);
          v21 = v27;
        }
        while (v26 != v27);
      }
      goto LABEL_47;
    }
  }
  v5[4] = v28;
  if (v7 != v5)
  {
    do
    {
      v23 = sub_1C485B670(v4, v7);
      operator delete(v7);
      v7 = v23;
    }
    while (v23 != v6);
  }
  v14 = v6;
LABEL_47:
  if ((*(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 24) | v13) > ((v14[5] >> 1) & 3 | *(_DWORD *)((v14[5] & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
    v22 = a1;
    v9 = v14;
    goto LABEL_49;
  }
}

uint64_t llvm::LiveRange::addSegment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  char *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  char *v26;
  int64_t v28;
  _QWORD *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;
  uint64_t v35;

  if (*(_QWORD *)(a1 + 96))
  {
    v34 = *(_OWORD *)a2;
    v35 = *(_QWORD *)(a2 + 16);
    llvm::LiveRange::addSegmentToSet(a1, &v34);
    return *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  }
  v31 = *(_OWORD *)a2;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = (uint64_t *)a1;
  v3 = *((_QWORD *)&v31 + 1);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(char **)a1;
  if (v5)
  {
    v7 = *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24) | (v31 >> 1) & 3;
    v8 = *(unsigned int *)(a1 + 8);
    v9 = *(_QWORD *)a1;
    do
    {
      v10 = v8 >> 1;
      v11 = (uint64_t *)(v9 + 24 * (v8 >> 1));
      v13 = *v11;
      v12 = v11 + 3;
      v8 += ~(v8 >> 1);
      if (v7 < ((v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24)))
        v8 = v10;
      else
        v9 = (uint64_t)v12;
    }
    while (v8);
    v6 = *(char **)a1;
    if ((char *)v9 != v4)
    {
      if (v32 == *(_QWORD *)(v9 - 8)
        && (v14 = (_QWORD *)(v9 - 24),
            ((*(_QWORD *)(v9 - 24) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v9 - 24) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 24)) <= v7))
      {
        v6 = (char *)v9;
        if (((*(_QWORD *)(v9 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v9 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 24)) >= v7)
        {
LABEL_24:
          sub_1C510F55C(&v33, v14, v3);
          return (uint64_t)v14;
        }
      }
      else
      {
        v6 = (char *)v9;
      }
    }
  }
  v15 = &v4[24 * v5];
  if (v6 == v15)
    return sub_1C510F69C(a1, (uint64_t)v6, (unint64_t)&v31);
  if (v32 != *((_QWORD *)v6 + 2))
    return sub_1C510F69C(a1, (uint64_t)v6, (unint64_t)&v31);
  v16 = (DWORD2(v31) >> 1) & 3;
  if (((*(_QWORD *)v6 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((*((_QWORD *)&v31 + 1) & 0xFFFFFFFFFFFFFFF8) + 24) | v16))
    return sub_1C510F69C(a1, (uint64_t)v6, (unint64_t)&v31);
  v17 = 0;
  do
  {
    if (&v6[v17] == v4)
    {
      *(_QWORD *)v6 = v31;
      v28 = v15 - v6;
      v29 = v4;
      v30 = v6;
      memmove(v4, v6, v15 - v6);
      v26 = (char *)v29 + v28;
      v4 = *(char **)a1;
      v14 = v30;
      goto LABEL_23;
    }
    v18 = *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24) | (v31 >> 1) & 3;
    v19 = (*(_QWORD *)&v6[v17 - 24] >> 1) & 3 | *(_DWORD *)((*(_QWORD *)&v6[v17 - 24] & 0xFFFFFFFFFFFFFFF8)
                                                                        + 24);
    v17 -= 24;
  }
  while (v18 <= v19);
  v20 = &v6[v17];
  v21 = &v6[v17];
  v23 = *((_QWORD *)v21 + 1);
  v22 = v21 + 8;
  if (((v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v18
    && *((_QWORD *)v20 + 2) == v32)
  {
    v14 = v20;
  }
  else
  {
    v14 = v20 + 24;
    *((_QWORD *)v20 + 3) = v31;
    v22 = v20 + 32;
  }
  *v22 = *((_QWORD *)v6 + 1);
  v24 = v6 + 24;
  v25 = v15 - v24;
  if (v15 != v24)
  {
    memmove(v14 + 3, v24, v15 - v24);
    v4 = *(char **)a1;
  }
  v26 = (char *)v14 + v25 + 24;
LABEL_23:
  *(_DWORD *)(a1 + 8) = -1431655765 * ((unint64_t)(v26 - v4) >> 3);
  if ((*(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 24) | v16) > ((v14[1] >> 1) & 3 | *(_DWORD *)((v14[1] & 0xFFFFFFFFFFFFFFF8) + 24)))
    goto LABEL_24;
  return (uint64_t)v14;
}

__n128 llvm::LiveRange::append(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;

  v3 = (__n128 *)sub_1C4926708(a1, a2, 1);
  v4 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8));
  result = *v3;
  v4[1].n128_u64[0] = v3[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::LiveRange::extendInBlock(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ***v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v42;
  unsigned int v43;
  uint64_t v45;
  unsigned int v46;
  uint64_t *v48[3];

  v10 = *(uint64_t ****)(a1 + 96);
  if (!v10)
  {
    v48[0] = (uint64_t *)a1;
    v14 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v14)
    {
      v15 = (a5 >> 1) & 3;
      v16 = a5 & 0xFFFFFFFFFFFFFFF8;
      if (v15)
        v17 = v16 | (2 * (v15 - 1));
      else
        v17 = *(_QWORD *)v16 | 6;
      v31 = (v17 >> 1) & 3 | *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24);
      v32 = *(_QWORD *)a1;
      do
      {
        v33 = v14 >> 1;
        v34 = (uint64_t *)(v32 + 24 * (v14 >> 1));
        v36 = *v34;
        v35 = v34 + 3;
        v14 += ~(v14 >> 1);
        if (v31 < ((v36 >> 1) & 3 | *(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFF8) + 24)))
          v14 = v33;
        else
          v32 = (uint64_t)v35;
      }
      while (v14);
      if (v32 == *(_QWORD *)a1)
      {
        if (a3)
        {
          v42 = 8 * a3;
          while (1)
          {
            v43 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
            if ((*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3) <= v43 && v43 < v31)
              break;
            ++a2;
            v42 -= 8;
            if (!v42)
              return 0;
          }
          return 0;
        }
      }
      else
      {
        v37 = (*(_QWORD *)(v32 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v32 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                         + 24);
        v38 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3;
        if (v37 > v38)
        {
          if (v37 < (*(_DWORD *)(v16 + 24) | v15))
          {
            if (a3)
            {
              v39 = 8 * a3;
              do
              {
                v40 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
                if (v37 <= v40 && v40 < v31)
                  return 0;
                ++a2;
                v39 -= 8;
              }
              while (v39);
            }
            sub_1C510F55C(v48, (_QWORD *)(v32 - 24), a5);
          }
          return *(_QWORD *)(v32 - 8);
        }
        if (a3)
        {
          v45 = 8 * a3;
          while (1)
          {
            v46 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v38 <= v46 && v46 < v31)
              break;
            ++a2;
            v45 -= 8;
            if (!v45)
              return 0;
          }
          return 0;
        }
      }
    }
    return 0;
  }
  if (!v10[2])
    return 0;
  v11 = (a5 >> 1) & 3;
  v12 = a5 & 0xFFFFFFFFFFFFFFF8;
  if (v11)
    v13 = v12 | (2 * (v11 - 1));
  else
    v13 = *(_QWORD *)v12 | 6;
  v48[0] = (uint64_t *)v13;
  v48[1] = (uint64_t *)a5;
  v48[2] = 0;
  v18 = (uint64_t **)sub_1C510F274((uint64_t)v10, (uint64_t *)v48);
  if (*v10 == v18)
  {
    if (a3)
    {
      v27 = 8 * a3;
      while (1)
      {
        v28 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
        if ((*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3) <= v28
          && v28 < (*(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24) | (v13 >> 1) & 3))
        {
          break;
        }
        ++a2;
        v27 -= 8;
        if (!v27)
          return 0;
      }
      return 0;
    }
    return 0;
  }
  v19 = *v18;
  if (*v18)
  {
    do
    {
      v20 = v19;
      v19 = (uint64_t *)v19[1];
    }
    while (v19);
  }
  else
  {
    do
    {
      v20 = v18[2];
      v21 = *v20 == (_QWORD)v18;
      v18 = (uint64_t **)v20;
    }
    while (v21);
  }
  v22 = (v20[5] >> 1) & 3 | *(_DWORD *)((v20[5] & 0xFFFFFFFFFFFFFFF8) + 24);
  v23 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3;
  if (v22 <= v23)
  {
    if (a3)
    {
      v29 = 8 * a3;
      while (1)
      {
        v30 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v23 <= v30 && v30 < (*(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24) | (v13 >> 1) & 3))
          break;
        ++a2;
        v29 -= 8;
        if (!v29)
          return 0;
      }
      return 0;
    }
    return 0;
  }
  if (v22 >= (*(_DWORD *)(v12 + 24) | v11))
    return v20[6];
  if (!a3)
  {
LABEL_21:
    sub_1C510F34C(a1, v20, a5);
    return v20[6];
  }
  v24 = 8 * a3;
  while (1)
  {
    v25 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v22 <= v25 && v25 < (*(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24) | (v13 >> 1) & 3))
      return 0;
    ++a2;
    v24 -= 8;
    if (!v24)
      goto LABEL_21;
  }
}

uint64_t llvm::LiveRange::extendInBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ***v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27[3];

  v6 = *(uint64_t ****)(a1 + 96);
  if (v6)
  {
    if (v6[2])
    {
      v7 = (a3 >> 1) & 3;
      v8 = a3 & 0xFFFFFFFFFFFFFFF8;
      v9 = (uint64_t *)(v7 ? v8 | (2 * (v7 - 1)) : *(_QWORD *)v8 | 6);
      v27[0] = v9;
      v27[1] = (uint64_t *)a3;
      v27[2] = 0;
      v14 = (uint64_t **)sub_1C510F274((uint64_t)v6, (uint64_t *)v27);
      if (*v6 != v14)
      {
        v15 = *v14;
        if (*v14)
        {
          do
          {
            v16 = v15;
            v15 = (uint64_t *)v15[1];
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = v14[2];
            v17 = *v16 == (_QWORD)v14;
            v14 = (uint64_t **)v16;
          }
          while (v17);
        }
        v18 = (v16[5] >> 1) & 3 | *(_DWORD *)((v16[5] & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v18 > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
        {
          if (v18 < (*(_DWORD *)(v8 + 24) | v7))
            sub_1C510F34C(a1, v16, a3);
          return v16[6];
        }
      }
    }
    return 0;
  }
  v27[0] = (uint64_t *)a1;
  v10 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v10)
    return 0;
  v11 = (a3 >> 1) & 3;
  v12 = a3 & 0xFFFFFFFFFFFFFFF8;
  v13 = v11 ? v12 | (2 * (v11 - 1)) : *(_QWORD *)v12 | 6;
  v20 = (v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24);
  v21 = *(_QWORD *)a1;
  do
  {
    v22 = v10 >> 1;
    v23 = (uint64_t *)(v21 + 24 * (v10 >> 1));
    v25 = *v23;
    v24 = v23 + 3;
    v10 += ~(v10 >> 1);
    if (v20 < ((v25 >> 1) & 3 | *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24)))
      v10 = v22;
    else
      v21 = (uint64_t)v24;
  }
  while (v10);
  if (v21 == *(_QWORD *)a1)
    return 0;
  v26 = (*(_QWORD *)(v21 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v21 - 16) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v26 <= (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
    return 0;
  if (v26 < (*(_DWORD *)(v12 + 24) | v11))
    sub_1C510F55C(v27, (_QWORD *)(v21 - 24), a3);
  return *(_QWORD *)(v21 - 8);
}

_QWORD *llvm::LiveRange::removeSegment(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD v21[3];

  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD **)a1;
  if (!(_DWORD)v6)
  {
    v11 = 0;
    goto LABEL_21;
  }
  v8 = v7[3 * v6 - 2];
  v9 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3;
  v10 = (v8 >> 1) & 3 | *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24);
  v11 = *(_DWORD *)(a1 + 8);
  if (v9 >= v10)
  {
LABEL_21:
    result = &v7[3 * v11];
    goto LABEL_10;
  }
  result = *(_QWORD **)a1;
  v13 = v6;
  do
  {
    v14 = v13 >> 1;
    v15 = result[3 * (v13 >> 1) + 1];
    LODWORD(v15) = (v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
    v13 -= (v13 >> 1) + 1;
    v16 = v9 >= v15;
    if (v9 >= v15)
      v17 = v14 + 1;
    else
      v17 = 0;
    result += 3 * v17;
    if (!v16)
      v13 = v14;
  }
  while (v13);
LABEL_10:
  v18 = result[1];
  v19 = result[2];
  if (*result == a2)
  {
    if (v18 == a3)
    {
      v20 = (char *)&v7[3 * v6];
      if (v20 != (char *)(result + 3))
      {
        result = memmove(result, result + 3, v20 - (char *)(result + 3));
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v6 - 1;
      if (a4)
        return (_QWORD *)llvm::LiveRange::removeValNoIfDead(a1, v19);
    }
    else
    {
      *result = a3;
    }
  }
  else
  {
    result[1] = a2;
    if (v18 != a3)
    {
      v21[0] = a3;
      v21[1] = v18;
      v21[2] = v19;
      return (_QWORD *)sub_1C510F69C(a1, (uint64_t)(result + 3), (unint64_t)v21);
    }
  }
  return result;
}

uint64_t llvm::LiveRange::removeValNoIfDead(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = (_QWORD *)(*(_QWORD *)result + 16);
    v4 = 24 * v2;
    while (*v3 != a2)
    {
      v3 += 3;
      v4 -= 24;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(_DWORD *)(result + 72) - 1;
    if (*(_DWORD *)a2 == v5)
    {
      do
      {
        v6 = v5;
        if (!v5)
          break;
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 64) + 8 * v5-- - 8) + 8);
      }
      while (v7 < 8);
      *(_DWORD *)(result + 72) = v6;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = 0;
    }
  }
  return result;
}

char *llvm::LiveRange::removeSegment(uint64_t a1, char *__dst, int a3)
{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;

  v6 = *((_QWORD *)__dst + 2);
  v7 = __dst + 24;
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_QWORD *)a1 + 24 * v8;
  if ((char *)v9 != v7)
  {
    memmove(__dst, v7, v9 - (_QWORD)v7);
    v8 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v8 - 1;
  if (a3)
    llvm::LiveRange::removeValNoIfDead(a1, v6);
  return __dst;
}

uint64_t *llvm::LiveRange::removeValNo(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;

  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *result;
    v5 = 3 * v2;
    v6 = *result + 8 * v5;
    v7 = 8 * v5;
    v8 = 8 * v5 - 24;
    while (1)
    {
      v9 = v4 + v3;
      if (*(_QWORD *)(v4 + v3 + 16) == a2)
        break;
      v3 += 24;
      if (v7 == v3)
      {
        v9 = v6;
        goto LABEL_12;
      }
    }
    if (v8 != v3)
    {
      v10 = (_QWORD *)(v9 + 40);
      v11 = v7 - v3 - 24;
      do
      {
        if (*v10 != a2)
        {
          v12 = *((_OWORD *)v10 - 1);
          *(_QWORD *)(v9 + 16) = *v10;
          *(_OWORD *)v9 = v12;
          v9 += 24;
        }
        v10 += 3;
        v11 -= 24;
      }
      while (v11);
      v4 = *result;
    }
LABEL_12:
    *((_DWORD *)result + 2) = -1431655765 * ((unint64_t)(v9 - v4) >> 3);
    v13 = *((_DWORD *)result + 18) - 1;
    if (*(_DWORD *)a2 == v13)
    {
      do
      {
        v15 = v13;
        if (!v13)
          break;
        v14 = *(_QWORD *)(*(_QWORD *)(result[8] + 8 * v13-- - 8) + 8);
      }
      while (v14 < 8);
      *((_DWORD *)result + 18) = v15;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = 0;
    }
  }
  return result;
}

void llvm::LiveRange::join(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38[4];
  void *v39;
  uint64_t v40;
  _QWORD v41[50];

  v41[48] = *MEMORY[0x1E0C80C00];
  v8 = *((unsigned int *)a1 + 18);
  v9 = *((unsigned int *)a5 + 2);
  if ((_DWORD)v8)
  {
    v10 = 0;
    v11 = *a5;
    while (v10 == *(_DWORD *)(a3 + 4 * v10))
    {
      v12 = *(_QWORD *)(v11 + 8 * v10);
      if (v12)
      {
        if (v12 != *(_QWORD *)(a1[8] + 8 * v10))
          break;
      }
      if (v8 == ++v10)
        goto LABEL_20;
    }
    v13 = *((_DWORD *)a1 + 2);
    if (v13)
    {
      v14 = (char *)*a1;
      *(_QWORD *)(*a1 + 16) = *(_QWORD *)(v11 + 8 * *(int *)(a3 + 4 * **(unsigned int **)(*a1 + 16)));
      if (v13 == 1)
      {
        v15 = v14;
LABEL_19:
        *((_DWORD *)a1 + 2) = -1431655765 * ((unint64_t)(v15 - v14 + 24) >> 3);
        goto LABEL_20;
      }
      v16 = 24 * v13 - 24;
      v17 = v14;
      v18 = v14;
      while (1)
      {
        v19 = *(_QWORD *)(v11 + 8 * *(int *)(a3 + 4 * **((unsigned int **)v17 + 5)));
        if (*((_QWORD *)v18 + 2) == v19)
        {
          v20 = v18 + 8;
          if (*((_QWORD *)v18 + 1) == *((_QWORD *)v17 + 3))
            break;
        }
        v15 = v18 + 24;
        *((_QWORD *)v18 + 5) = v19;
        if (v17 != v18)
        {
          *((_QWORD *)v18 + 3) = *((_QWORD *)v17 + 3);
          v20 = v18 + 32;
          goto LABEL_17;
        }
LABEL_18:
        v17 += 24;
        v18 = v15;
        v16 -= 24;
        if (!v16)
          goto LABEL_19;
      }
      v15 = v18;
LABEL_17:
      *v20 = *((_QWORD *)v17 + 4);
      goto LABEL_18;
    }
  }
LABEL_20:
  v21 = a2[2];
  if ((_DWORD)v21)
  {
    v22 = *a5;
    v23 = 24 * v21;
    v24 = (_QWORD *)(*(_QWORD *)a2 + 16);
    do
    {
      *v24 = *(_QWORD *)(v22 + 8 * *(int *)(a4 + 4 * *(unsigned int *)*v24));
      v24 += 3;
      v23 -= 24;
    }
    while (v23);
  }
  if ((_DWORD)v9)
  {
    v25 = 0;
    v26 = 0;
    v27 = a1 + 8;
    v28 = (uint64_t)(a1 + 10);
    v29 = v8;
    do
    {
      v30 = *(_DWORD **)(*a5 + v25);
      if (v30)
      {
        if (v26 >= v8)
        {
          if (v29 >= *((_DWORD *)a1 + 19))
          {
            v35 = v28;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 8), v28, v29 + 1, 8);
            v28 = v35;
            v29 = *((_DWORD *)a1 + 18);
          }
          *(_QWORD *)(a1[8] + 8 * v29) = v30;
          v29 = *((_DWORD *)a1 + 18) + 1;
          *((_DWORD *)a1 + 18) = v29;
        }
        else
        {
          *(_QWORD *)(*v27 + 8 * v26) = v30;
        }
        *v30 = v26++;
      }
      v25 += 8;
    }
    while (8 * v9 != v25);
  }
  if (v8 > v9)
    sub_1C4DFC134((uint64_t)(a1 + 8), v9);
  v38[0] = a1;
  v38[1] = 0;
  v39 = v41;
  v40 = 0x1000000000;
  v31 = a2[2];
  if ((_DWORD)v31)
  {
    v32 = *(__int128 **)a2;
    v33 = 24 * v31;
    do
    {
      v34 = *v32;
      v37 = *((_QWORD *)v32 + 2);
      v36 = v34;
      llvm::LiveRangeUpdater::add(v38, (unint64_t)&v36);
      v32 = (__int128 *)((char *)v32 + 24);
      v33 -= 24;
    }
    while (v33);
  }
  llvm::LiveRangeUpdater::flush(v38);
  if (v39 != v41)
    free(v39);
}

void llvm::LiveRangeUpdater::add(_QWORD **a1, unint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v4 = *a1;
  if (v4[12])
  {
    v42 = *(_OWORD *)a2;
    v43 = *(_QWORD *)(a2 + 16);
    llvm::LiveRange::addSegmentToSet((uint64_t)v4, &v42);
    return;
  }
  v5 = (unint64_t)a1[1];
  if (v5 < 8)
    goto LABEL_55;
  v6 = *(_QWORD **)a2;
  if ((*(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24) | (v5 >> 1) & 3) > ((*(_QWORD *)a2 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
    llvm::LiveRangeUpdater::flush(a1);
    v4 = *a1;
LABEL_55:
    v8 = (_QWORD *)*v4;
    a1[2] = (_QWORD *)*v4;
    a1[3] = v8;
    v6 = *(_QWORD **)a2;
    v7 = (uint64_t)v8;
    goto LABEL_5;
  }
  v7 = *v4;
  v8 = a1[3];
LABEL_5:
  a1[1] = v6;
  v9 = (_QWORD *)(v7 + 24 * *((unsigned int *)v4 + 2));
  if (v8 != v9
    && ((v8[1] >> 1) & 3 | *(_DWORD *)((v8[1] & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)a2 >> 1) & 3))
  {
    if (v8 != a1[2])
    {
      llvm::LiveRangeUpdater::mergeSpills(a1);
      v8 = a1[3];
      if (v8 != a1[2])
      {
        while (v8 != v9)
        {
          if (((v8[1] >> 1) & 3 | *(_DWORD *)((v8[1] & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)a2 >> 1) & 3))
            goto LABEL_6;
          v40 = a1[2];
          a1[2] = v40 + 3;
          a1[3] = v8 + 3;
          v41 = *(_OWORD *)v8;
          v40[2] = v8[2];
          *(_OWORD *)v40 = v41;
          v8 = a1[3];
        }
        goto LABEL_7;
      }
    }
    v19 = *((unsigned int *)*a1 + 2);
    v8 = (_QWORD *)**a1;
    if ((_DWORD)v19)
    {
      v20 = v8[3 * v19 - 2];
      v21 = (*(_QWORD *)a2 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 24);
      if (v21 < ((v20 >> 1) & 3 | *(_DWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        do
        {
          v22 = v19 >> 1;
          v23 = v8[3 * (v19 >> 1) + 1];
          LODWORD(v23) = (v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24);
          v19 -= (v19 >> 1) + 1;
          v24 = v21 >= v23;
          if (v21 >= v23)
            v25 = v22 + 1;
          else
            v25 = 0;
          v8 += 3 * v25;
          if (!v24)
            v19 = v22;
        }
        while (v19);
        goto LABEL_28;
      }
    }
    else
    {
      LODWORD(v19) = 0;
    }
    v8 += 3 * v19;
LABEL_28:
    a1[2] = v8;
    a1[3] = v8;
  }
LABEL_6:
  if (v8 == v9)
  {
LABEL_7:
    v10 = (_QWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (((*v8 >> 1) & 3 | *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)a2 >> 1) & 3))
  {
    if (((v8[1] >> 1) & 3 | *(_DWORD *)((v8[1] & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)(a2 + 8) >> 1) & 3))
      return;
    *(_QWORD *)a2 = *v8;
    v8 += 3;
    a1[3] = v8;
  }
  v10 = (_QWORD *)(a2 + 16);
  while (v8 != v9)
  {
    v26 = *v8;
    v27 = *(_QWORD *)(a2 + 8);
    if (v27 == *v8)
    {
      if (*v10 != v8[2])
        goto LABEL_9;
      v28 = *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24) | (v26 >> 1) & 3;
    }
    else
    {
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) | (v27 >> 1) & 3;
      if (v28 < (*(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24) | (v26 >> 1) & 3))
        goto LABEL_9;
    }
    if (v28 < ((v8[1] >> 1) & 3 | *(_DWORD *)((v8[1] & 0xFFFFFFFFFFFFFFF8) + 24)))
      v27 = v8[1];
    *(_QWORD *)(a2 + 8) = v27;
    v8 += 3;
    a1[3] = v8;
  }
LABEL_8:
  v8 = v9;
LABEL_9:
  v11 = a1 + 4;
  v12 = *((_DWORD *)a1 + 10);
  if (v12)
  {
    v29 = *v11 + 24 * v12;
    v30 = *(_QWORD *)(v29 - 16);
    if (v30 == *(_QWORD *)a2)
    {
      if (*(_QWORD *)(v29 - 8) != *v10)
        goto LABEL_10;
    }
    else if ((*(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24) | (v30 >> 1) & 3) < (*(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)a2 >> 1) & 3))
    {
      goto LABEL_10;
    }
    *(_QWORD *)a2 = *(_QWORD *)(v29 - 24);
    v39 = *(_QWORD *)(v29 - 16);
    if (((v39 >> 1) & 3 | *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)(a2 + 8) >> 1) & 3))
      v39 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v39;
    *((_DWORD *)a1 + 10) = v12 - 1;
  }
LABEL_10:
  v13 = a1[2];
  v14 = *a1;
  if (v13 == (_QWORD *)**a1)
    goto LABEL_43;
  v15 = *(_QWORD *)a2;
  v16 = *(v13 - 2);
  if (v16 != *(_QWORD *)a2)
  {
    v17 = *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24) | (v16 >> 1) & 3;
    if (v17 >= (*(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24) | (v15 >> 1) & 3))
      goto LABEL_14;
LABEL_43:
    if (v13 == v8)
    {
      if (v8 == v9)
      {
        v35 = sub_1C4926708((uint64_t)*a1, a2, 1);
        v36 = *v14 + 24 * *((unsigned int *)v14 + 2);
        v37 = *(_OWORD *)v35;
        *(_QWORD *)(v36 + 16) = *(_QWORD *)(v35 + 16);
        *(_OWORD *)v36 = v37;
        ++*((_DWORD *)v14 + 2);
        v38 = **a1 + 24 * *((unsigned int *)*a1 + 2);
        a1[2] = (_QWORD *)v38;
        a1[3] = (_QWORD *)v38;
      }
      else
      {
        v31 = sub_1C4926708((uint64_t)v11, a2, 1);
        v32 = (uint64_t)&a1[4][3 * *((unsigned int *)a1 + 10)];
        v33 = *(_OWORD *)v31;
        *(_QWORD *)(v32 + 16) = *(_QWORD *)(v31 + 16);
        *(_OWORD *)v32 = v33;
        ++*((_DWORD *)a1 + 10);
      }
    }
    else
    {
      a1[2] = v13 + 3;
      v34 = *(_OWORD *)a2;
      v13[2] = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v13 = v34;
    }
    return;
  }
  if (*(v13 - 1) != *v10)
    goto LABEL_43;
  v17 = *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24) | (v15 >> 1) & 3;
LABEL_14:
  v18 = *(_QWORD *)(a2 + 8);
  if (v17 >= ((v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24)))
    v18 = *(v13 - 2);
  *(v13 - 2) = v18;
}

void llvm::LiveRange::MergeSegmentsInAsValue(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10[4];
  void *v11;
  uint64_t v12;
  _QWORD v13[49];

  v13[48] = *MEMORY[0x1E0C80C00];
  v10[0] = a1;
  v10[1] = 0;
  v11 = v13;
  v12 = 0x1000000000;
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    v5 = *(__int128 **)a2;
    v6 = 24 * v3;
    do
    {
      v7 = *v5;
      v5 = (__int128 *)((char *)v5 + 24);
      v8 = v7;
      v9 = a3;
      llvm::LiveRangeUpdater::add(v10, (unint64_t)&v8);
      v6 -= 24;
    }
    while (v6);
  }
  llvm::LiveRangeUpdater::flush(v10);
  if (v11 != v13)
    free(v11);
}

void llvm::LiveRange::MergeValueInAsValue(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11[4];
  void *v12;
  uint64_t v13;
  _QWORD v14[49];

  v14[48] = *MEMORY[0x1E0C80C00];
  v11[0] = a1;
  v11[1] = 0;
  v12 = v14;
  v13 = 0x1000000000;
  v4 = a2[2];
  if ((_DWORD)v4)
  {
    v7 = (_QWORD *)(*(_QWORD *)a2 + 16);
    v8 = 24 * v4;
    do
    {
      if (*v7 == a3)
      {
        v9 = *((_OWORD *)v7 - 1);
        v10 = a4;
        llvm::LiveRangeUpdater::add(v11, (unint64_t)&v9);
      }
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  llvm::LiveRangeUpdater::flush(v11);
  if (v12 != v14)
    free(v12);
}

uint64_t llvm::LiveRange::MergeValueNumberInto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;

  v3 = a2;
  if (*(_DWORD *)a2 >= *(_DWORD *)a3)
  {
    v5 = a2;
    v3 = a3;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    v5 = a3;
  }
  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    v7 = *(char **)a1;
    v8 = *(_QWORD *)a1 + 24 * v6;
    v9 = *(char **)a1;
    while (1)
    {
      v10 = v9 + 24;
      if (*((_QWORD *)v9 + 2) == v5)
        break;
LABEL_6:
      v8 = (uint64_t)&v7[24 * v6];
      v9 = v10;
      if (v10 == (char *)v8)
        goto LABEL_18;
    }
    if (v9 == v7)
    {
      v11 = v7;
    }
    else
    {
      if (*((_QWORD *)v9 - 1) == v3 && *((_QWORD *)v9 - 2) == *(_QWORD *)v9)
      {
        *((_QWORD *)v9 - 2) = *((_QWORD *)v9 + 1);
        if ((char *)v8 != v10)
        {
          memmove(v9, v10, v8 - (_QWORD)v10);
          v6 = *(_DWORD *)(a1 + 8);
          v7 = *(char **)a1;
        }
        v11 = v9 - 24;
        *(_DWORD *)(a1 + 8) = --v6;
        goto LABEL_12;
      }
      v11 = v9;
    }
    v9 += 24;
LABEL_12:
    *((_QWORD *)v11 + 2) = v3;
    v12 = &v7[24 * v6];
    if (v9 != v12 && *(_QWORD *)v9 == *((_QWORD *)v11 + 1) && *((_QWORD *)v9 + 2) == v3)
    {
      *((_QWORD *)v11 + 1) = *((_QWORD *)v9 + 1);
      if (v12 != v9 + 24)
      {
        memmove(v9, v9 + 24, v12 - (v9 + 24));
        v6 = *(_DWORD *)(a1 + 8);
        v7 = *(char **)a1;
      }
      *(_DWORD *)(a1 + 8) = --v6;
      v10 = v11 + 24;
    }
    else
    {
      v10 = v9;
    }
    goto LABEL_6;
  }
LABEL_18:
  v13 = *(_DWORD *)(a1 + 72) - 1;
  if (*(_DWORD *)v5 == v13)
  {
    do
    {
      v14 = v13;
      if (!v13)
        break;
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13-- - 8) + 8);
    }
    while (v15 < 8);
    *(_DWORD *)(a1 + 72) = v14;
  }
  else
  {
    *(_QWORD *)(v5 + 8) = 0;
  }
  return v3;
}

unsigned int *llvm::LiveRange::flushSegmentSet(llvm::LiveRange *this)
{
  unsigned int *result;
  uint64_t v3;

  result = sub_1C510CBC8((unsigned int *)this, **((_QWORD ***)this + 12), (_QWORD *)(*((_QWORD *)this + 12) + 8));
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
  {
    sub_1C47655E8(v3, *(_QWORD **)(v3 + 8));
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

unsigned int *sub_1C510CBC8(unsigned int *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;

  v4 = a2;
  v5 = result;
  if (a2 == a3)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = (_QWORD *)v7[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v7[2];
          v10 = *v9 == (_QWORD)v7;
          v7 = v9;
        }
        while (!v10);
      }
      ++v6;
      v7 = v9;
    }
    while (v9 != a3);
  }
  v11 = result[2];
  if (v6 + v11 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + v11, 24);
    LODWORD(v11) = v5[2];
  }
  if (v4 != a3)
  {
    v12 = *(_QWORD *)v5 + 24 * v11;
    do
    {
      v13 = *((_OWORD *)v4 + 2);
      *(_QWORD *)(v12 + 16) = v4[6];
      *(_OWORD *)v12 = v13;
      v14 = (_QWORD *)v4[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v4[2];
          v10 = *v15 == (_QWORD)v4;
          v4 = v15;
        }
        while (!v10);
      }
      v12 += 24;
      v4 = v15;
    }
    while (v15 != a3);
    LODWORD(v11) = v5[2];
  }
  v5[2] = v11 + v6;
  return result;
}

uint64_t llvm::LiveRange::isLiveAtIndexes(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;

  if (!a3)
    return 0;
  v4 = a2;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_QWORD *)a1;
  if (v6)
  {
    v8 = *(_QWORD *)(v7 + 24 * v6 - 16);
    v9 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v9 < ((v8 >> 1) & 3 | *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      v10 = *(_QWORD *)a1;
      v11 = *(unsigned int *)(a1 + 8);
      do
      {
        v12 = v11 >> 1;
        v13 = *(_QWORD *)(v10 + 24 * (v11 >> 1) + 8);
        LODWORD(v13) = (v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24);
        v11 -= (v11 >> 1) + 1;
        v14 = v9 >= v13;
        if (v9 >= v13)
          v15 = v12 + 1;
        else
          v15 = 0;
        v10 += 24 * v15;
        if (!v14)
          v11 = v12;
      }
      while (v11);
      goto LABEL_12;
    }
  }
  else
  {
    v6 = 0;
  }
  v10 = v7 + 24 * v6;
LABEL_12:
  v16 = (_QWORD *)(v7 + 24 * v6);
  if ((_QWORD *)v10 != v16)
  {
    v17 = 8 * a3;
    while (1)
    {
      v18 = (_QWORD *)sub_1C50E5A80(a1, v10, *v4);
      if (v18 == v16)
        break;
      v10 = (uint64_t)v18;
      v19 = *(_DWORD *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v4 >> 1) & 3;
      if (((*v18 >> 1) & 3 | *(_DWORD *)((*v18 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v19
        && v19 < ((v18[1] >> 1) & 3 | *(_DWORD *)((v18[1] & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        return 1;
      }
      result = 0;
      ++v4;
      v17 -= 8;
      if (!v17)
        return result;
    }
  }
  return 0;
}

void llvm::LiveInterval::freeSubRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  if (v3)
  {
    sub_1C47655E8(v3, *(_QWORD **)(v3 + 8));
    MEMORY[0x1CAA32FC0](v3, 0x1020C4062D53EE8);
  }
  v4 = *(void **)(a2 + 64);
  if (v4 != (void *)(a2 + 80))
    free(v4);
  if (*(_QWORD *)a2 != a2 + 16)
    free(*(void **)a2);
}

void llvm::LiveInterval::removeEmptySubRanges(llvm::LiveInterval *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (_QWORD *)((char *)this + 104);
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    while (1)
    {
      v3 = v2;
      if (!*(_DWORD *)(v2 + 8))
        break;
LABEL_4:
      v1 = (_QWORD *)(v2 + 104);
      v2 = *(_QWORD *)(v2 + 104);
      if (!v2)
        return;
    }
    while (1)
    {
      v4 = *(_QWORD *)(v3 + 96);
      v2 = *(_QWORD *)(v3 + 104);
      *(_QWORD *)(v3 + 96) = 0;
      if (v4)
      {
        v8 = v2;
        v6 = v4;
        sub_1C47655E8(v4, *(_QWORD **)(v4 + 8));
        v7 = v6;
        v2 = v8;
        MEMORY[0x1CAA32FC0](v7, 0x1020C4062D53EE8);
      }
      v5 = *(void **)(v3 + 64);
      if (v5 != (void *)(v3 + 80))
        free(v5);
      if (*(_QWORD *)v3 != v3 + 16)
        free(*(void **)v3);
      if (!v2)
        break;
      v3 = v2;
      if (*(_DWORD *)(v2 + 8))
      {
        *v1 = v2;
        goto LABEL_4;
      }
    }
    *v1 = 0;
  }
}

void llvm::LiveInterval::clearSubRanges(llvm::LiveInterval *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 96);
      v4 = *(_QWORD *)(v2 + 104);
      *(_QWORD *)(v2 + 96) = 0;
      if (v3)
      {
        v8 = v2;
        v6 = v3;
        sub_1C47655E8(v3, *(_QWORD **)(v3 + 8));
        v7 = v6;
        v2 = v8;
        MEMORY[0x1CAA32FC0](v7, 0x1020C4062D53EE8);
      }
      v5 = *(void **)(v2 + 64);
      if (v5 != (void *)(v2 + 80))
        free(v5);
      if (*(_QWORD *)v2 != v2 + 16)
        free(*(void **)v2);
      v2 = v4;
    }
    while (v4);
  }
  *((_QWORD *)this + 13) = 0;
}

void llvm::LiveInterval::refineSubRanges(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v11 = *(_QWORD *)(a1 + 104);
  if (v11)
  {
    v14 = a3;
    while (1)
    {
      v15 = *(_QWORD *)(v11 + 112);
      v16 = v15 & a3;
      if ((v15 & a3) != 0)
      {
        v17 = (_QWORD *)v11;
        if (v15 != v16)
        {
          *(_QWORD *)(v11 + 112) = v16 ^ v15;
          v17 = (_QWORD *)sub_1C484358C(a2, 120, 3);
          *v17 = v17 + 2;
          v17[1] = 0x200000000;
          v17[8] = v17 + 10;
          v17[9] = 0x200000000;
          v17[12] = 0;
          sub_1C50E31B0((uint64_t)v17, v11, a2);
          v17[13] = *(_QWORD *)(a1 + 104);
          v17[14] = v16;
          *(_QWORD *)(a1 + 104) = v17;
          sub_1C510D200(*(_DWORD *)(a1 + 112), (uint64_t)v17, v16, a6, a7);
          sub_1C510D200(*(_DWORD *)(a1 + 112), v11, *(_QWORD *)(v11 + 112), a6, a7);
        }
        v18 = *(_QWORD *)(a4 + 24);
        if (!v18)
          goto LABEL_14;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 48))(v18, v17);
        v14 &= ~v16;
      }
      v11 = *(_QWORD *)(v11 + 104);
      if (!v11)
        goto LABEL_11;
    }
  }
  v14 = a3;
LABEL_11:
  if (v14)
  {
    v19 = (_QWORD *)sub_1C484358C(a2, 120, 3);
    *v19 = v19 + 2;
    v19[1] = 0x200000000;
    v19[8] = v19 + 10;
    v19[9] = 0x200000000;
    v19[12] = 0;
    v19[13] = 0;
    v19[13] = *(_QWORD *)(a1 + 104);
    v19[14] = v14;
    *(_QWORD *)(a1 + 104) = v19;
    v20 = *(_QWORD *)(a4 + 24);
    if (v20)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v20 + 48))(v20, v19);
    }
    else
    {
LABEL_14:
      sub_1C485C2F0();
      sub_1C510D200(v21, v22, v23, v24, v25);
    }
  }
}

void sub_1C510D200(int a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x1E0C80C00];
  if (a1 < 0)
  {
    v37 = v39;
    v38 = 0x800000000;
    v5 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v5)
    {
      v10 = *(uint64_t **)(a2 + 64);
      v35 = &v10[v5];
      do
      {
        v36 = *v10;
        v11 = *(_QWORD *)(*v10 + 8);
        if (v11 >= 8 && (*(_QWORD *)(*v10 + 8) & 6) != 0)
        {
          v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
          v14 = v13;
          if ((*(_WORD *)(v13 + 44) & 4) != 0)
          {
            v14 = v13;
            do
              v14 = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v14 + 44) & 4) != 0);
          }
          v15 = *(_QWORD *)(v13 + 24) + 48;
          v16 = *(unsigned int **)(v14 + 32);
          v17 = *(unsigned int *)(v14 + 40);
          v18 = &v16[8 * v17];
          if (!(_DWORD)v17)
          {
            v27 = *(_QWORD *)(v14 + 8);
            if (v27 == v15)
            {
              v14 = v15;
              goto LABEL_11;
            }
            v14 = v15;
            if ((*(_WORD *)(v27 + 44) & 4) == 0)
              goto LABEL_11;
            while (1)
            {
              v28 = v27;
              v29 = *(unsigned int *)(v27 + 40);
              if ((_DWORD)v29)
                break;
              v27 = *(_QWORD *)(v27 + 8);
              if (v27 == v15 || (*(_WORD *)(v27 + 44) & 4) == 0)
              {
                v14 = v15;
LABEL_42:
                v16 = *(unsigned int **)(v28 + 32);
                v18 = &v16[8 * v29];
                goto LABEL_11;
              }
            }
            v14 = v27;
            goto LABEL_42;
          }
LABEL_11:
          while (v16 != v18)
          {
            v19 = *v16;
            if ((v19 & 0x10000FF) == 0x1000000 && v16[1] == a1)
            {
              v20 = *(_QWORD *)(a4[29] + 8 * ((v19 >> 8) & 0xFFF));
              if ((_DWORD)a5)
              {
                v21 = a3;
                v22 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a4 + 216))(a4, a5, v20);
                a3 = v21;
                v20 = v22;
              }
              if ((v20 & a3) != 0)
                goto LABEL_29;
            }
            v16 += 8;
            if (v16 == v18)
            {
              v23 = *(_QWORD *)(v14 + 8);
              if (v23 == v15)
                break;
              v16 = v18;
              v14 = v15;
              if ((*(_WORD *)(v23 + 44) & 4) != 0)
              {
                while (1)
                {
                  v24 = v23;
                  v25 = *(unsigned int *)(v23 + 40);
                  if ((_DWORD)v25)
                    break;
                  v23 = *(_QWORD *)(v23 + 8);
                  if (v23 == v15 || (*(_WORD *)(v23 + 44) & 4) == 0)
                  {
                    v14 = v15;
                    goto LABEL_25;
                  }
                }
                v14 = v23;
LABEL_25:
                v16 = *(unsigned int **)(v24 + 32);
                v18 = &v16[8 * v25];
              }
            }
          }
          v26 = v38;
          if (v38 >= (unint64_t)HIDWORD(v38))
          {
            v30 = a3;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, (uint64_t)v39, v38 + 1, 8);
            a3 = v30;
            v26 = v38;
          }
          *((_QWORD *)v37 + v26) = v36;
          LODWORD(v38) = v38 + 1;
        }
LABEL_29:
        ++v10;
      }
      while (v10 != v35);
      v31 = (uint64_t *)v37;
      if ((_DWORD)v38)
      {
        v32 = 8 * v38;
        do
        {
          v33 = *v31++;
          llvm::LiveRange::removeValNo((uint64_t *)a2, v33);
          v32 -= 8;
        }
        while (v32);
        v31 = (uint64_t *)v37;
      }
      if (v31 != v39)
        free(v31);
    }
  }
}

uint64_t llvm::LiveInterval::getSize(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(unsigned int *)(this + 8);
  if (!(_DWORD)v1)
    return 0;
  v2 = (uint64_t *)this;
  LODWORD(this) = 0;
  v3 = *v2;
  v4 = 24 * v1;
  v5 = (_QWORD *)(v3 + 8);
  do
  {
    this = ((*v5 >> 1) & 3 | *(_DWORD *)((*v5 & 0xFFFFFFFFFFFFFFF8) + 24))
         + (_DWORD)this
         - ((*(v5 - 1) >> 1) & 3 | *(_DWORD *)((*(v5 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
    v5 += 3;
    v4 -= 24;
  }
  while (v4);
  return this;
}

_QWORD *llvm::LiveInterval::computeSubRangeUndefs(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  int **v13;
  int *v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v10 = *(_QWORD *)((*(_QWORD *)(a4[3] + 16 * (*(_DWORD *)(a1 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 24);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 16) + 176))(*(_QWORD *)(*a4 + 16));
  v12 = *(unsigned int *)(a1 + 112);
  if ((int)v12 >= 0)
    v13 = (int **)(a4[34] + 8 * v12);
  else
    v13 = (int **)(a4[3] + 16 * (v12 & 0x7FFFFFFF) + 8);
  v14 = *v13;
  if (*v13)
  {
    v15 = result;
    v16 = *v14;
    if ((*v14 & 0x1000000) != 0 || (v14 = (int *)*((_QWORD *)v14 + 3)) != 0 && (v16 = *v14, (*v14 & 0x1000000) != 0))
    {
      v17 = v10 & a3;
      v18 = a2 + 16;
      while ((v16 & 0x10000000) == 0 || (v17 & ~*(_QWORD *)(v15[29] + 8 * ((v16 >> 8) & 0xFFF))) == 0)
      {
LABEL_34:
        v14 = (int *)*((_QWORD *)v14 + 3);
        if (v14)
        {
          v16 = *v14;
          if ((*v14 & 0x1000000) != 0)
            continue;
        }
        return result;
      }
      v19 = *((_QWORD *)v14 + 1);
      v20 = *(_WORD *)(v19 + 44);
      v21 = v19;
      if ((v20 & 4) != 0)
      {
        do
          v21 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v21 + 44) & 4) != 0);
      }
      if ((v20 & 8) != 0)
      {
        do
          v19 = *(_QWORD *)(v19 + 8);
        while ((*(_WORD *)(v19 + 44) & 8) != 0);
      }
      v22 = *(_QWORD *)(v19 + 8);
      if (v21 != v22)
      {
        while (1)
        {
          v23 = **(unsigned __int16 **)(v21 + 16);
          v24 = v23 > 0x17;
          v25 = (1 << v23) & 0x83E000;
          if (v24 || v25 == 0)
            break;
          v21 = *(_QWORD *)(v21 + 8);
          if (v21 == v22)
          {
            v21 = v22;
            break;
          }
        }
      }
      v27 = *(_QWORD *)(a5 + 368);
      v28 = *(unsigned int *)(a5 + 384);
      if ((_DWORD)v28)
      {
        LODWORD(v29) = ((v21 >> 4) ^ (v21 >> 9)) & (v28 - 1);
        v30 = (uint64_t *)(v27 + 16 * v29);
        v31 = *v30;
        if (v21 == *v30)
        {
LABEL_28:
          v34 = v30[1];
          if ((v16 & 0x40000000) != 0)
            v35 = 2;
          else
            v35 = 4;
          v36 = *(unsigned int *)(a2 + 8);
          if (v36 >= *(unsigned int *)(a2 + 12))
          {
            v37 = v18;
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v18, v36 + 1, 8);
            v18 = v37;
            v36 = *(unsigned int *)(a2 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a2 + 8 * v36) = v34 & 0xFFFFFFFFFFFFFFF8 | v35;
          ++*(_DWORD *)(a2 + 8);
          goto LABEL_34;
        }
        v32 = 1;
        while (v31 != -4096)
        {
          v33 = v29 + v32++;
          v29 = v33 & (v28 - 1);
          v31 = *(_QWORD *)(v27 + 16 * v29);
          if (v21 == v31)
          {
            v30 = (uint64_t *)(v27 + 16 * v29);
            goto LABEL_28;
          }
        }
      }
      v30 = (uint64_t *)(v27 + 16 * v28);
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t **llvm::LiveRangeUpdater::flush(uint64_t **this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];

  if ((unint64_t)this[1] >= 8)
  {
    v1 = (uint64_t)this;
    this[1] = 0;
    v2 = *((unsigned int *)this + 10);
    if ((_DWORD)v2)
    {
      v10 = this[2];
      v9 = this[3];
      v11 = 0xAAAAAAAAAAAAAAABLL * (v9 - v10);
      v12 = *this;
      if (v2 <= v11)
      {
        v14 = &v10[3 * v2];
        v15 = *v12;
        v16 = *v12 + 24 * *((unsigned int *)v12 + 2);
        v17 = v16 - (_QWORD)v9;
        if ((uint64_t *)v16 != v9)
        {
          memmove(v14, v9, v16 - (_QWORD)v9);
          v15 = *v12;
          v10 = *(uint64_t **)(v1 + 16);
        }
        *((_DWORD *)v12 + 2) = -1431655765 * (((unint64_t)v14 + v17 - v15) >> 3);
      }
      else
      {
        v13 = (char *)v10 - *v12;
        memset(v18, 0, sizeof(v18));
        sub_1C510D9C8((uint64_t)v12, (uint64_t)v9, v2 - v11, (unint64_t)v18);
        v10 = (uint64_t *)&v13[**(_QWORD **)v1];
        *(_QWORD *)(v1 + 16) = v10;
      }
      *(_QWORD *)(v1 + 24) = &v10[3 * *(unsigned int *)(v1 + 40)];
      return llvm::LiveRangeUpdater::mergeSpills((uint64_t **)v1);
    }
    else
    {
      v3 = *this;
      v5 = this[2];
      v4 = this[3];
      v6 = **this;
      v7 = (uint64_t *)(v6 + 24 * *((unsigned int *)*this + 2));
      v8 = (char *)v7 - (char *)v4;
      if (v7 != v4)
      {
        this = (uint64_t **)memmove(v5, v4, (char *)v7 - (char *)v4);
        v6 = *v3;
      }
      *((_DWORD *)v3 + 2) = -1431655765 * (((unint64_t)v5 + v8 - v6) >> 3);
    }
  }
  return this;
}

uint64_t **llvm::LiveRangeUpdater::mergeSpills(uint64_t **this)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v1 = this[2];
  v2 = *((unsigned int *)this + 10);
  if (0xAAAAAAAAAAAAAAABLL * (this[3] - v1) >= v2)
    v3 = *((unsigned int *)this + 10);
  else
    v3 = 0xAAAAAAAAAAAAAAABLL * (this[3] - v1);
  v4 = &v1[3 * v3];
  v5 = this[4];
  v6 = &v5[3 * v2];
  v7 = (uint64_t *)**this;
  this[2] = v4;
  if (v3)
  {
    do
    {
      if (v1 == v7
        || ((*(v1 - 3) >> 1) & 3 | *(_DWORD *)((*(v1 - 3) & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((*(v6 - 3) & 0xFFFFFFFFFFFFFFF8) + 24) | (*(v6 - 3) >> 1) & 3))
      {
        v9 = *(_OWORD *)(v6 - 3);
        v10 = *(v6 - 1);
        v6 -= 3;
        *(v4 - 1) = v10;
        *(_OWORD *)(v4 - 3) = v9;
        v4 -= 3;
      }
      else
      {
        v8 = *(_OWORD *)(v1 - 3);
        *(v4 - 1) = *(v1 - 1);
        *(_OWORD *)(v4 - 3) = v8;
        v4 -= 3;
        v1 -= 3;
      }
    }
    while (v1 != v4);
    v5 = this[4];
  }
  *((_DWORD *)this + 10) = -1431655765 * ((unint64_t)((char *)v6 - (char *)v5) >> 3);
  return this;
}

char *sub_1C510D9C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  unsigned int v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  char *v45;
  __int128 v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;

  v4 = a3;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *(_QWORD *)a1) >> 3);
  v8 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
  v9 = sub_1C4926708(a1, a4, a3);
  v10 = v9;
  v11 = *(_QWORD *)a1;
  if (v8 == a2)
  {
    v27 = *(_DWORD *)(a1 + 8);
    if (v4)
    {
      v28 = v11 + 24 * v27;
      v29 = v4;
      do
      {
        v30 = *(_OWORD *)v9;
        *(_QWORD *)(v28 + 16) = *(_QWORD *)(v9 + 16);
        *(_OWORD *)v28 = v30;
        v28 += 24;
        --v29;
      }
      while (v29);
      v27 = *(_DWORD *)(a1 + 8);
      v11 = *(_QWORD *)a1;
    }
    *(_DWORD *)(a1 + 8) = v27 + v4;
    return (char *)(v11 + 24 * v7);
  }
  else
  {
    v12 = (char *)(v11 + 24 * v7);
    v13 = *(unsigned int *)(a1 + 8);
    v14 = v11 + 24 * v13;
    v15 = v14 - (_QWORD)v12;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v12) >> 3);
    v17 = v16 - v4;
    if (v16 >= v4)
    {
      v18 = (char *)(v14 - 24 * v4);
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(24 * v4) >> 3);
      if (v19 + v13 > *(unsigned int *)(a1 + 12) || (unint64_t)v12 > v9)
      {
        if (v19 + v13 > *(unsigned int *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v19 + v13, 24);
          LODWORD(v13) = *(_DWORD *)(a1 + 8);
        }
        v41 = -24 * v4;
        if (-24 * v4)
        {
          v42 = *(_QWORD *)a1 + 24 * v13;
          do
          {
            v43 = *(_OWORD *)(v14 + v41);
            *(_QWORD *)(v42 + 16) = *(_QWORD *)(v14 + v41 + 16);
            *(_OWORD *)v42 = v43;
            v42 += 24;
            v41 += 24;
          }
          while (v41);
          LODWORD(v13) = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(a1 + 8) = v13 - 1431655765 * ((uint64_t)(24 * v4) >> 3);
        if (v18 != v12)
          memmove(&v12[24 * v4], v12, v14 - 24 * v4 - (_QWORD)v12);
        if ((unint64_t)v12 <= v10)
        {
          if (v10 >= *(_QWORD *)a1 + 24 * (unint64_t)*(unsigned int *)(a1 + 8))
            v44 = 0;
          else
            v44 = v4;
          v10 += 24 * v44;
        }
        if (v4)
        {
          v45 = v12;
          do
          {
            v46 = *(_OWORD *)v10;
            *((_QWORD *)v45 + 2) = *(_QWORD *)(v10 + 16);
            *(_OWORD *)v45 = v46;
            v45 += 24;
            --v4;
          }
          while (v4);
        }
      }
      else
      {
        v20 = -24 * v4;
        if (-24 * v4)
        {
          v21 = *(_QWORD *)a1 + 24 * v13;
          do
          {
            v22 = *(_OWORD *)(v14 + v20);
            *(_QWORD *)(v21 + 16) = *(_QWORD *)(v14 + v20 + 16);
            *(_OWORD *)v21 = v22;
            v21 += 24;
            v20 += 24;
          }
          while (v20);
          LODWORD(v13) = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(a1 + 8) = v13 - 1431655765 * ((uint64_t)(24 * v4) >> 3);
        if (v18 != v12)
          memmove(&v12[24 * v4], v12, v14 - 24 * v4 - (_QWORD)v12);
        if (v10 >= *(_QWORD *)a1 + 24 * (unint64_t)*(unsigned int *)(a1 + 8))
          v23 = 0;
        else
          v23 = v4;
        if (v4)
        {
          v24 = v10 + 24 * v23;
          v25 = v12;
          do
          {
            v26 = *(_OWORD *)v24;
            *((_QWORD *)v25 + 2) = *(_QWORD *)(v24 + 16);
            *(_OWORD *)v25 = v26;
            v25 += 24;
            --v4;
          }
          while (v4);
        }
      }
    }
    else
    {
      v32 = v13 + v4;
      *(_DWORD *)(a1 + 8) = v13 + v4;
      v33 = v7 != v13;
      if (v33 && (unint64_t)v12 <= v9)
      {
        memcpy((void *)(v11 + 24 * v32 - 8 * ((v14 - (uint64_t)v12) >> 3)), v12, v15);
        if (v10 >= *(_QWORD *)a1 + 24 * (unint64_t)*(unsigned int *)(a1 + 8))
          v34 = 0;
        else
          v34 = v4;
        v35 = v10 + 24 * v34;
        if (v33)
        {
          v36 = v12;
          v37 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v12) >> 3);
          do
          {
            v38 = *(_OWORD *)v35;
            *((_QWORD *)v36 + 2) = *(_QWORD *)(v35 + 16);
            *(_OWORD *)v36 = v38;
            v36 += 24;
            --v37;
          }
          while (v37);
        }
        if (v4 != v16)
        {
          do
          {
            v39 = *(_OWORD *)v35;
            *(_QWORD *)(v14 + 16) = *(_QWORD *)(v35 + 16);
            *(_OWORD *)v14 = v39;
            v14 += 24;
            v40 = __CFADD__(v17++, 1);
          }
          while (!v40);
        }
      }
      else
      {
        if (v33)
          memcpy((void *)(v11 + 24 * v32 - 8 * ((v14 - (uint64_t)v12) >> 3)), v12, v15);
        if ((unint64_t)v12 <= v10)
        {
          if (v10 >= *(_QWORD *)a1 + 24 * (unint64_t)*(unsigned int *)(a1 + 8))
            v47 = 0;
          else
            v47 = v4;
          v10 += 24 * v47;
        }
        if (v33)
        {
          v48 = v12;
          v49 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v12) >> 3);
          do
          {
            v50 = *(_OWORD *)v10;
            *((_QWORD *)v48 + 2) = *(_QWORD *)(v10 + 16);
            *(_OWORD *)v48 = v50;
            v48 += 24;
            --v49;
          }
          while (v49);
        }
        if (v4 != v16)
        {
          do
          {
            v51 = *(_OWORD *)v10;
            *(_QWORD *)(v14 + 16) = *(_QWORD *)(v10 + 16);
            *(_OWORD *)v14 = v51;
            v14 += 24;
            v40 = __CFADD__(v17++, 1);
          }
          while (!v40);
        }
      }
    }
  }
  return v12;
}

uint64_t llvm::ConnectedVNInfoEqClasses::Classify(llvm::ConnectedVNInfoEqClasses *this, const llvm::LiveRange *a2)
{
  unsigned int v4;
  uint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  unsigned int *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;

  v4 = 0;
  v5 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 14) = 0;
  v6 = *((unsigned int *)a2 + 18);
  if (*((_DWORD *)this + 5) < v6)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 8, (uint64_t)this + 24, v6, 4);
    v4 = *((_DWORD *)this + 4);
  }
  while (v4 < v6)
  {
    v7 = v4;
    if (v4 >= *((_DWORD *)this + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v5, (uint64_t)this + 24, v4 + 1, 4);
      v7 = *((_DWORD *)this + 4);
    }
    *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v7) = v4;
    v4 = *((_DWORD *)this + 4) + 1;
    *((_DWORD *)this + 4) = v4;
  }
  v8 = *((unsigned int *)a2 + 18);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = (unsigned int **)*((_QWORD *)a2 + 8);
    v12 = &v11[v8];
    while (1)
    {
      v13 = v10;
      v14 = *v11;
      v15 = *((_QWORD *)*v11 + 1);
      if (v15 > 7)
        break;
      v67 = v10;
      v31 = *v11;
      v10 = *v11;
      if (v13)
        goto LABEL_78;
LABEL_28:
      if (++v11 == v12)
      {
        if (v9 && v10)
        {
          v69 = *v9;
          v70 = *v10;
          v71 = *v5;
          v72 = *(unsigned int *)(*v5 + 4 * v69);
          v73 = *(unsigned int *)(*v5 + 4 * v70);
          while (v72 != v73)
          {
            if (v72 < v73)
            {
              *(_DWORD *)(v71 + 4 * v70) = v72;
              v70 = v73;
              v73 = *(unsigned int *)(v71 + 4 * v73);
            }
            else
            {
              *(_DWORD *)(v71 + 4 * v69) = v73;
              v69 = v72;
              v72 = *(unsigned int *)(v71 + 4 * v72);
            }
          }
        }
        goto LABEL_67;
      }
    }
    if ((v15 & 6) != 0)
    {
      v16 = (v15 >> 1) & 3;
      v17 = v15 & 0xFFFFFFFFFFFFFFF8;
      if (v16)
        v18 = v17 | (2 * (v16 - 1));
      else
        v18 = *(_QWORD *)v17 | 6;
      v19 = *((_DWORD *)a2 + 2);
      v20 = *(_QWORD *)a2;
      if (v19)
      {
        v21 = *(_QWORD *)(v20 + 24 * v19 - 16);
        v22 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3;
        v23 = (v21 >> 1) & 3 | *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
        v24 = *((_DWORD *)a2 + 2);
        v25 = *(_QWORD **)a2;
        v26 = v24;
        if (v22 < v23)
        {
          do
          {
            v27 = v26 >> 1;
            v28 = v25[3 * (v26 >> 1) + 1];
            LODWORD(v28) = (v28 >> 1) & 3 | *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24);
            v26 -= (v26 >> 1) + 1;
            v29 = v22 >= v28;
            if (v22 >= v28)
              v30 = v27 + 1;
            else
              v30 = 0;
            v25 += 3 * v30;
            if (!v29)
              v26 = v27;
          }
          while (v26);
          v24 = *((_DWORD *)a2 + 2);
LABEL_22:
          if (v25 == (_QWORD *)(v20 + 24 * v24)
            || ((*v25 >> 1) & 3 | *(_DWORD *)((*v25 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3))
          {
            v25 = (_QWORD *)(v20 + 24 * v24);
          }
          if (v25 != (_QWORD *)(v20 + 24 * v19))
          {
            v31 = (unsigned int *)v25[2];
            if (v31)
            {
              v67 = *v11;
              v10 = v13;
              v9 = *v11;
LABEL_78:
              v57 = *v67;
              v59 = *v31;
              v68 = *v5;
              v58 = *(unsigned int *)(*v5 + 4 * v57);
              v60 = *(unsigned int *)(*v5 + 4 * v59);
              while (v58 != v60)
              {
                if (v58 < v60)
                {
                  *(_DWORD *)(v68 + 4 * v59) = v58;
                  v59 = v60;
                  v60 = *(unsigned int *)(v68 + 4 * v60);
                }
                else
                {
                  *(_DWORD *)(v68 + 4 * v57) = v60;
                  v57 = v58;
                  v58 = *(unsigned int *)(v68 + 4 * v58);
                }
              }
              goto LABEL_28;
            }
          }
          goto LABEL_27;
        }
      }
      else
      {
        v24 = 0;
      }
      v25 = (_QWORD *)(v20 + 24 * v24);
      goto LABEL_22;
    }
    v32 = sub_1C499C548(*(_QWORD *)(*(_QWORD *)this + 288), v15);
    v33 = *(_QWORD *)(v32 + 64);
    v34 = *(_QWORD *)(v32 + 72);
    if (v33 == v34)
    {
LABEL_27:
      v10 = v13;
      v9 = v14;
      goto LABEL_28;
    }
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 288) + 392);
    v36 = *(_QWORD **)a2;
    v37 = *(_QWORD *)a2 - 16;
    while (1)
    {
      v38 = *(_QWORD *)(v35 + 16 * *(unsigned int *)(*(_QWORD *)v33 + 24) + 8);
      v39 = (v38 >> 1) & 3;
      v40 = v38 & 0xFFFFFFFFFFFFFFF8;
      if (v39)
        v41 = v40 | (2 * (v39 - 1));
      else
        v41 = *(_QWORD *)v40 | 6;
      v42 = *((_DWORD *)a2 + 2);
      if (v42)
      {
        v43 = *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 24) | (v41 >> 1) & 3;
        v44 = *((_DWORD *)a2 + 2);
        v45 = v36;
        v46 = v44;
        if (v43 < ((*(_QWORD *)(v37 + 24 * v42) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v37 + 24 * v42) & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 24)))
        {
          do
          {
            v47 = v46 >> 1;
            v48 = v45[3 * (v46 >> 1) + 1];
            LODWORD(v48) = (v48 >> 1) & 3 | *(_DWORD *)((v48 & 0xFFFFFFFFFFFFFFF8) + 24);
            v46 -= (v46 >> 1) + 1;
            v49 = v43 >= v48;
            if (v43 >= v48)
              v50 = v47 + 1;
            else
              v50 = 0;
            v45 += 3 * v50;
            if (!v49)
              v46 = v47;
          }
          while (v46);
          v44 = *((_DWORD *)a2 + 2);
          goto LABEL_43;
        }
      }
      else
      {
        v44 = 0;
      }
      v45 = &v36[3 * v44];
LABEL_43:
      if (v45 == &v36[3 * v44]
        || ((*v45 >> 1) & 3 | *(_DWORD *)((*v45 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 24) | (v41 >> 1) & 3))
      {
        v45 = &v36[3 * v44];
      }
      if (v45 != &v36[3 * v42])
      {
        v51 = (unsigned int *)v45[2];
        if (v51)
        {
          v52 = *v14;
          v53 = *v51;
          v54 = *v5;
          v55 = *(unsigned int *)(*v5 + 4 * v52);
          v56 = *(unsigned int *)(*v5 + 4 * v53);
          while (v55 != v56)
          {
            if (v55 < v56)
            {
              *(_DWORD *)(v54 + 4 * v53) = v55;
              v53 = v56;
              v56 = *(unsigned int *)(v54 + 4 * v56);
            }
            else
            {
              *(_DWORD *)(v54 + 4 * v52) = v56;
              v52 = v55;
              v55 = *(unsigned int *)(v54 + 4 * v55);
            }
          }
        }
      }
      v33 += 8;
      if (v33 == v34)
        goto LABEL_27;
    }
  }
LABEL_67:
  result = *((unsigned int *)this + 14);
  if (!(_DWORD)result)
  {
    v62 = *((unsigned int *)this + 4);
    if ((_DWORD)v62)
    {
      v63 = 0;
      v64 = *v5;
      do
      {
        v65 = *(unsigned int *)(v64 + 4 * v63);
        if (v63 == v65)
        {
          v66 = *((_DWORD *)this + 14);
          *((_DWORD *)this + 14) = v66 + 1;
        }
        else
        {
          v66 = *(_DWORD *)(v64 + 4 * v65);
        }
        *(_DWORD *)(v64 + 4 * v63++) = v66;
      }
      while (v62 != v63);
      return *((unsigned int *)this + 14);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void llvm::ConnectedVNInfoEqClasses::Distribute(llvm::ConnectedVNInfoEqClasses *this, llvm::LiveInterval *a2, llvm::LiveInterval **a3, llvm::MachineRegisterInfo *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  __int16 v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  BOOL v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  _QWORD *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  _QWORD *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  BOOL v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  llvm::LiveInterval *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unsigned int v94;
  _QWORD *v95;
  _BYTE *v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  _QWORD *v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  _BYTE *v111;
  int64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  int v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  unsigned int v126;
  _DWORD *v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  unint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  int v135;
  llvm::LiveInterval *v136;
  unint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  _BYTE *v141;
  int64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  int v148;
  llvm::LiveInterval *v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  llvm::ConnectedVNInfoEqClasses *v154;
  void *v156;
  uint64_t v157;
  _DWORD v158[10];
  void *v159;
  uint64_t v160;
  _BYTE v161[32];
  void *v162;
  uint64_t v163;
  _BYTE v164[64];
  _DWORD *v165;
  unsigned int v166;
  unsigned int v167;
  _QWORD v168[6];

  v168[4] = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned int *)a2 + 28);
  if ((int)v6 >= 0)
    v7 = (uint64_t *)(*((_QWORD *)a4 + 34) + 8 * v6);
  else
    v7 = (uint64_t *)(*((_QWORD *)a4 + 3) + 16 * (v6 & 0x7FFFFFFF) + 8);
  v8 = *v7;
  while (v8)
  {
    v9 = v8;
    v8 = *(_QWORD *)(v8 + 24);
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(_QWORD *)(*(_QWORD *)this + 288);
    if (**(unsigned __int16 **)(v10 + 16) - 13 <= 1)
    {
      v12 = *(_QWORD *)(v10 + 24);
      while (1)
      {
        if (v10 == *(_QWORD *)(v12 + 56))
        {
          v20 = (_QWORD *)(*(_QWORD *)(v11 + 392) + 16 * *(unsigned int *)(v12 + 24));
LABEL_21:
          v21 = *v20 & 0xFFFFFFFFFFFFFFF8;
          v22 = *((_DWORD *)a2 + 2);
          v23 = *(_QWORD *)a2;
          if (v22)
          {
            v24 = *(_QWORD *)(v23 + 24 * v22 - 16);
            v25 = *(_DWORD *)(v21 + 24);
            v26 = (v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24);
            v27 = *(_QWORD **)a2;
            v28 = *((unsigned int *)a2 + 2);
            if (v25 < v26)
            {
              do
              {
                v29 = v28 >> 1;
                v30 = v27[3 * (v28 >> 1) + 1];
                LODWORD(v30) = (v30 >> 1) & 3 | *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24);
                v28 -= (v28 >> 1) + 1;
                v31 = v25 >= v30;
                if (v25 >= v30)
                  v32 = v29 + 1;
                else
                  v32 = 0;
                v27 += 3 * v32;
                if (!v31)
                  v28 = v29;
              }
              while (v28);
LABEL_57:
              v59 = (_QWORD *)(v23 + 24 * v22);
              if (v27 != v59)
              {
                v60 = *(_DWORD *)((*v27 & 0xFFFFFFFFFFFFFFF8) + 24);
                v61 = *(_DWORD *)(v21 + 24);
                if (((*v27 >> 1) & 3 | v60) <= v61)
                {
                  v62 = v27[1];
                  if (v21 != (v62 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_63;
                  v27 += 3;
                  if (v27 != v59)
                  {
                    v60 = *(_DWORD *)((*v27 & 0xFFFFFFFFFFFFFFF8) + 24);
                    goto LABEL_63;
                  }
                  goto LABEL_65;
                }
                LOBYTE(v62) = 0;
LABEL_63:
                if (v61 < v60)
                {
LABEL_65:
                  v63 = 0;
                }
                else
                {
                  v62 = v27[1];
                  v63 = (unsigned int *)v27[2];
                }
                if ((~(_BYTE)v62 & 6) != 0)
                {
LABEL_67:
                  if (!v63)
                    goto LABEL_90;
LABEL_87:
                  v68 = *(_DWORD *)(*((_QWORD *)this + 1) + 4 * *v63);
                  if (v68)
                    llvm::MachineOperand::setReg(v9, *((_DWORD *)a3[v68 - 1] + 28));
                }
              }
              goto LABEL_90;
            }
          }
          else
          {
            v22 = 0;
          }
          v27 = (_QWORD *)(v23 + 24 * v22);
          goto LABEL_57;
        }
        v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8;
        if (!v10 || (*(_BYTE *)v10 & 4) == 0)
        {
          while ((*(_WORD *)(v10 + 44) & 4) != 0)
            v10 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8;
        }
        v13 = *(_QWORD *)(v11 + 368);
        v14 = *(unsigned int *)(v11 + 384);
        if (!(_DWORD)v14)
          goto LABEL_18;
        LODWORD(v15) = ((v10 >> 4) ^ (v10 >> 9)) & (v14 - 1);
        v16 = (uint64_t *)(v13 + 16 * v15);
        v17 = *v16;
        if (v10 != *v16)
          break;
LABEL_19:
        if (v16 != (uint64_t *)(v13 + 16 * v14))
        {
          v20 = v16 + 1;
          goto LABEL_21;
        }
      }
      v18 = 1;
      while (v17 != -4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(_QWORD *)(v13 + 16 * v15);
        if (v10 == v17)
        {
          v16 = (uint64_t *)(v13 + 16 * v15);
          goto LABEL_19;
        }
      }
LABEL_18:
      v16 = (uint64_t *)(v13 + 16 * v14);
      goto LABEL_19;
    }
    v33 = *(_WORD *)(v10 + 44);
    v34 = *(_QWORD *)(v9 + 8);
    if ((v33 & 4) != 0)
    {
      do
        v34 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v34 + 44) & 4) != 0);
    }
    if ((v33 & 8) != 0)
    {
      do
        v10 = *(_QWORD *)(v10 + 8);
      while ((*(_WORD *)(v10 + 44) & 8) != 0);
    }
    v35 = *(_QWORD *)(v10 + 8);
    if (v34 != v35)
    {
      while (1)
      {
        v36 = **(unsigned __int16 **)(v34 + 16);
        v37 = v36 > 0x17;
        v38 = (1 << v36) & 0x83E000;
        if (v37 || v38 == 0)
          break;
        v34 = *(_QWORD *)(v34 + 8);
        if (v34 == v35)
        {
          v34 = v35;
          break;
        }
      }
    }
    v40 = *(_QWORD *)(v11 + 368);
    v41 = *(unsigned int *)(v11 + 384);
    if ((_DWORD)v41)
    {
      LODWORD(v42) = ((v34 >> 4) ^ (v34 >> 9)) & (v41 - 1);
      v43 = (uint64_t *)(v40 + 16 * v42);
      v44 = *v43;
      if (v34 == *v43)
        goto LABEL_46;
      v45 = 1;
      while (v44 != -4096)
      {
        v46 = v42 + v45++;
        v42 = v46 & (v41 - 1);
        v44 = *(_QWORD *)(v40 + 16 * v42);
        if (v34 == v44)
        {
          v43 = (uint64_t *)(v40 + 16 * v42);
          goto LABEL_46;
        }
      }
    }
    v43 = (uint64_t *)(v40 + 16 * v41);
LABEL_46:
    v47 = v43[1] & 0xFFFFFFFFFFFFFFF8;
    v48 = *((_DWORD *)a2 + 2);
    v49 = *(_QWORD *)a2;
    if (!v48)
    {
      v48 = 0;
LABEL_70:
      v53 = (_QWORD *)(v49 + 24 * v48);
      goto LABEL_71;
    }
    v50 = *(_QWORD *)(v49 + 24 * v48 - 16);
    v51 = *(_DWORD *)(v47 + 24);
    v52 = (v50 >> 1) & 3 | *(_DWORD *)((v50 & 0xFFFFFFFFFFFFFFF8) + 24);
    v53 = *(_QWORD **)a2;
    v54 = *((unsigned int *)a2 + 2);
    if (v51 >= v52)
      goto LABEL_70;
    do
    {
      v55 = v54 >> 1;
      v56 = v53[3 * (v54 >> 1) + 1];
      LODWORD(v56) = (v56 >> 1) & 3 | *(_DWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 24);
      v54 -= (v54 >> 1) + 1;
      v57 = v51 >= v56;
      if (v51 >= v56)
        v58 = v55 + 1;
      else
        v58 = 0;
      v53 += 3 * v58;
      if (!v57)
        v54 = v55;
    }
    while (v54);
LABEL_71:
    v64 = (_QWORD *)(v49 + 24 * v48);
    if (v53 == v64)
    {
      v67 = 0;
LABEL_83:
      v63 = 0;
      goto LABEL_84;
    }
    v65 = *(_DWORD *)((*v53 & 0xFFFFFFFFFFFFFFF8) + 24);
    v66 = *(_DWORD *)(v47 + 24);
    if (((*v53 >> 1) & 3 | v65) > v66)
    {
      v67 = 0;
    }
    else
    {
      v67 = (unsigned int *)v53[2];
      if (v47 == (v53[1] & 0xFFFFFFFFFFFFFFF8))
      {
        v53 += 3;
        if (v53 == v64)
          goto LABEL_83;
        v65 = *(_DWORD *)((*v53 & 0xFFFFFFFFFFFFFFF8) + 24);
      }
      if (*((_QWORD *)v67 + 1) == v47)
        v67 = 0;
    }
    if (v66 < v65)
      goto LABEL_83;
    v63 = (unsigned int *)v53[2];
LABEL_84:
    if ((*(_DWORD *)v9 & 0x30000000) == 0 && (*(_DWORD *)v9 & 0x10FFF00) != 0x1000000)
    {
      v63 = v67;
      if (!v67)
        continue;
      goto LABEL_87;
    }
    if (v67 != v63)
      goto LABEL_67;
LABEL_90:
    ;
  }
  v69 = *((_QWORD *)a2 + 13);
  if (!v69)
    goto LABEL_188;
  v151 = (uint64_t *)((char *)a2 + 104);
  v70 = *((_DWORD *)this + 14);
  v165 = v168;
  v167 = 8;
  v162 = v164;
  v163 = 0x800000000;
  v71 = (v70 - 1);
  v153 = *(_QWORD *)this + 312;
  v154 = this;
  v152 = v71;
  do
  {
    v72 = *(unsigned int *)(v69 + 72);
    v166 = 0;
    if (v167 < v72)
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v165, (uint64_t)v168, v72, 4);
    LODWORD(v163) = 0;
    if ((_DWORD)v71)
      sub_1C510F7B8((unsigned int *)&v162, v71, 0);
    v73 = (uint64_t *)(v69 + 64);
    if ((_DWORD)v72)
    {
      v74 = 0;
      while (1)
      {
        v75 = *(_QWORD *)(*(_QWORD *)(*v73 + 8 * v74) + 8);
        if (v75 >= 8)
          break;
        v76 = 0;
LABEL_124:
        v93 = v166;
        if (v166 >= (unint64_t)v167)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v165, (uint64_t)v168, v166 + 1, 4);
          v93 = v166;
        }
        v165[v93] = v76;
        v94 = ++v166;
        if (++v74 == v72)
          goto LABEL_129;
      }
      v77 = *((_DWORD *)a2 + 2);
      v78 = *(_QWORD *)a2;
      if (v77)
      {
        v79 = *(_QWORD *)(v78 + 24 * v77 - 16);
        v80 = *(_DWORD *)((v75 & 0xFFFFFFFFFFFFFFF8) + 24) | (v75 >> 1) & 3;
        v81 = (v79 >> 1) & 3 | *(_DWORD *)((v79 & 0xFFFFFFFFFFFFFFF8) + 24);
        v82 = *(_QWORD *)a2;
        v83 = *((unsigned int *)a2 + 2);
        if (v80 < v81)
        {
          do
          {
            v84 = v83 >> 1;
            v85 = *(_QWORD *)(v82 + 24 * (v83 >> 1) + 8);
            LODWORD(v85) = (v85 >> 1) & 3 | *(_DWORD *)((v85 & 0xFFFFFFFFFFFFFFF8) + 24);
            v83 -= (v83 >> 1) + 1;
            v86 = v80 >= v85;
            if (v80 >= v85)
              v87 = v84 + 1;
            else
              v87 = 0;
            v82 += 24 * v87;
            if (!v86)
              v83 = v84;
          }
          while (v83);
          goto LABEL_118;
        }
      }
      else
      {
        v77 = 0;
      }
      v82 = v78 + 24 * v77;
LABEL_118:
      v88 = v78 + 24 * v77;
      if (v82 == v88
        || ((*(_QWORD *)v82 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v82 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v75 & 0xFFFFFFFFFFFFFFF8) + 24) | (v75 >> 1) & 3))
      {
        v82 = v88;
      }
      v76 = *(_DWORD *)(*((_QWORD *)this + 1) + 4 * **(unsigned int **)(v82 + 16));
      if (v76)
      {
        v89 = (v76 - 1);
        if (!*((_QWORD *)v162 + v89))
        {
          v90 = a3[v89];
          v91 = *(_QWORD *)(v69 + 112);
          v92 = (_QWORD *)sub_1C484358C(v153, 120, 3);
          *v92 = v92 + 2;
          v92[1] = 0x200000000;
          v92[8] = v92 + 10;
          v92[9] = 0x200000000;
          v92[12] = 0;
          v92[13] = 0;
          v92[14] = v91;
          this = v154;
          v92[13] = *((_QWORD *)v90 + 13);
          *((_QWORD *)v90 + 13) = v92;
          *((_QWORD *)v162 + v89) = v92;
        }
      }
      goto LABEL_124;
    }
    v94 = v166;
LABEL_129:
    v95 = v162;
    v159 = v161;
    v160 = 0x800000000;
    if (v94)
    {
      v96 = v161;
      v97 = v94;
      if (v94 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, (uint64_t)v161, v94, 4);
        v97 = v166;
        if (!v166)
          goto LABEL_132;
        v96 = v159;
      }
      memcpy(v96, v165, 4 * v97);
LABEL_132:
      LODWORD(v160) = v94;
    }
    v98 = *(_QWORD *)v69;
    v99 = *(unsigned int *)(v69 + 8);
    v100 = (_BYTE *)(*(_QWORD *)v69 + 24 * v99);
    v101 = *(_QWORD *)v69;
    if ((_DWORD)v99)
    {
      v102 = 0;
      while (1)
      {
        v101 = v98 + v102;
        if (*((_DWORD *)v159 + **(unsigned int **)(v98 + v102 + 16)))
          break;
        v102 += 24;
        if (24 * v99 == v102)
        {
          v103 = (void *)(*(_QWORD *)v69 + 24 * v99);
          goto LABEL_144;
        }
      }
    }
    v103 = (void *)(*(_QWORD *)v69 + 24 * v99);
    v104 = (_QWORD *)v101;
    if ((_BYTE *)v101 != v100)
    {
      do
      {
        v105 = *((_DWORD *)v159 + **(unsigned int **)(v101 + 16));
        if (v105)
        {
          v106 = v95[v105 - 1];
          v107 = sub_1C4926708(v106, v101, 1);
          v108 = *(_QWORD *)v106 + 24 * *(unsigned int *)(v106 + 8);
          v109 = *(_OWORD *)v107;
          *(_QWORD *)(v108 + 16) = *(_QWORD *)(v107 + 16);
          *(_OWORD *)v108 = v109;
          ++*(_DWORD *)(v106 + 8);
        }
        else
        {
          v110 = *(_OWORD *)v101;
          v104[2] = *(_QWORD *)(v101 + 16);
          *(_OWORD *)v104 = v110;
          v104 += 3;
        }
        v101 += 24;
      }
      while ((_BYTE *)v101 != v100);
      v98 = *(_QWORD *)v69;
      LODWORD(v99) = *(_DWORD *)(v69 + 8);
      v103 = v104;
    }
LABEL_144:
    v111 = (_BYTE *)(v98 + 24 * v99);
    v112 = v111 - v100;
    if (v111 != v100)
    {
      memmove(v103, v100, v111 - v100);
      v98 = *(_QWORD *)v69;
    }
    *(_DWORD *)(v69 + 8) = -1431655765 * (((unint64_t)v103 + v112 - v98) >> 3);
    v113 = *(unsigned int *)(v69 + 72);
    if ((_DWORD)v113)
    {
      v114 = 0;
      while (!*((_DWORD *)v159 + v114))
      {
        if (v113 == ++v114)
          goto LABEL_153;
      }
    }
    else
    {
      LODWORD(v114) = 0;
    }
    if ((_DWORD)v114 == (_DWORD)v113)
    {
LABEL_153:
      v115 = *(_DWORD *)(v69 + 72);
    }
    else
    {
      v115 = v114;
      do
      {
        v116 = *v73;
        v117 = *(unsigned int **)(*v73 + 8 * v114);
        v118 = *((_DWORD *)v159 + v114);
        if (v118)
        {
          v119 = v95[v118 - 1];
          v120 = *(unsigned int *)(v119 + 72);
          *v117 = v120;
          if (v120 >= *(unsigned int *)(v119 + 76))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v119 + 64, v119 + 80, v120 + 1, 8);
            v120 = *(unsigned int *)(v119 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v119 + 64) + 8 * v120) = v117;
          ++*(_DWORD *)(v119 + 72);
        }
        else
        {
          *v117 = v115;
          *(_QWORD *)(v116 + 8 * v115++) = v117;
        }
        LODWORD(v114) = v114 + 1;
      }
      while ((_DWORD)v113 != (_DWORD)v114);
    }
    sub_1C4DFC134(v69 + 64, v115);
    if (v159 != v161)
      free(v159);
    v69 = *(_QWORD *)(v69 + 104);
    this = v154;
    v71 = v152;
  }
  while (v69);
  v121 = (_QWORD *)((char *)a2 + 104);
  v122 = *v151;
  if (!*v151)
    goto LABEL_184;
  do
  {
    v123 = v122;
    if (!*(_DWORD *)(v122 + 8))
    {
      while (1)
      {
        v124 = *(_QWORD *)(v123 + 96);
        v122 = *(_QWORD *)(v123 + 104);
        *(_QWORD *)(v123 + 96) = 0;
        if (v124)
        {
          sub_1C47655E8(v124, *(_QWORD **)(v124 + 8));
          MEMORY[0x1CAA32FC0](v124, 0x1020C4062D53EE8);
        }
        v125 = *(void **)(v123 + 64);
        if (v125 != (void *)(v123 + 80))
          free(v125);
        if (*(_QWORD *)v123 == v123 + 16)
        {
          if (!v122)
          {
LABEL_183:
            *v121 = 0;
            goto LABEL_184;
          }
        }
        else
        {
          free(*(void **)v123);
          if (!v122)
            goto LABEL_183;
        }
        v123 = v122;
        if (*(_DWORD *)(v122 + 8))
        {
          *v121 = v122;
          break;
        }
      }
    }
    v121 = (_QWORD *)(v122 + 104);
    v122 = *(_QWORD *)(v122 + 104);
  }
  while (v122);
LABEL_184:
  if (v162 != v164)
    free(v162);
  if (v165 != (_DWORD *)v168)
    free(v165);
LABEL_188:
  v156 = v158;
  v157 = 0x800000000;
  v126 = *((_DWORD *)this + 4);
  if (v126 && &v156 != (void **)((char *)this + 8))
  {
    if (v126 < 9)
    {
      v127 = v158;
      v128 = *((_DWORD *)this + 4);
      goto LABEL_192;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, (uint64_t)v158, *((unsigned int *)this + 4), 4);
    v128 = *((_DWORD *)this + 4);
    if (v128)
    {
      v127 = v156;
LABEL_192:
      memcpy(v127, *((const void **)this + 1), 4 * v128);
    }
    LODWORD(v157) = v126;
  }
  v158[8] = *((_DWORD *)this + 14);
  v129 = *(_QWORD *)a2;
  v130 = *((unsigned int *)a2 + 2);
  v131 = (_BYTE *)(*(_QWORD *)a2 + 24 * v130);
  v132 = *(_QWORD *)a2;
  if ((_DWORD)v130)
  {
    v133 = 0;
    while (1)
    {
      v132 = v129 + v133;
      if (*((_DWORD *)v156 + **(unsigned int **)(v129 + v133 + 16)))
        break;
      v133 += 24;
      if (24 * v130 == v133)
      {
        v134 = (_QWORD *)(*(_QWORD *)a2 + 24 * v130);
        goto LABEL_206;
      }
    }
  }
  v134 = (_QWORD *)(*(_QWORD *)a2 + 24 * v130);
  if ((_BYTE *)v132 != v131)
  {
    v134 = (_QWORD *)v132;
    do
    {
      v135 = *((_DWORD *)v156 + **(unsigned int **)(v132 + 16));
      if (v135)
      {
        v136 = a3[v135 - 1];
        v137 = sub_1C4926708((uint64_t)v136, v132, 1);
        v138 = *(_QWORD *)v136 + 24 * *((unsigned int *)v136 + 2);
        v139 = *(_OWORD *)v137;
        *(_QWORD *)(v138 + 16) = *(_QWORD *)(v137 + 16);
        *(_OWORD *)v138 = v139;
        ++*((_DWORD *)v136 + 2);
      }
      else
      {
        v140 = *(_OWORD *)v132;
        v134[2] = *(_QWORD *)(v132 + 16);
        *(_OWORD *)v134 = v140;
        v134 += 3;
      }
      v132 += 24;
    }
    while ((_BYTE *)v132 != v131);
    v129 = *(_QWORD *)a2;
    LODWORD(v130) = *((_DWORD *)a2 + 2);
  }
LABEL_206:
  v141 = (_BYTE *)(v129 + 24 * v130);
  v142 = v141 - v131;
  if (v141 != v131)
  {
    memmove(v134, v131, v141 - v131);
    v129 = *(_QWORD *)a2;
  }
  *((_DWORD *)a2 + 2) = -1431655765 * (((unint64_t)v134 + v142 - v129) >> 3);
  v143 = *((unsigned int *)a2 + 18);
  if ((_DWORD)v143)
  {
    v144 = 0;
    while (!*((_DWORD *)v156 + v144))
    {
      if (v143 == ++v144)
        goto LABEL_215;
    }
  }
  else
  {
    LODWORD(v144) = 0;
  }
  if ((_DWORD)v144 == (_DWORD)v143)
  {
LABEL_215:
    v145 = *((_DWORD *)a2 + 18);
  }
  else
  {
    v145 = v144;
    do
    {
      v146 = *((_QWORD *)a2 + 8);
      v147 = *(unsigned int **)(v146 + 8 * v144);
      v148 = *((_DWORD *)v156 + v144);
      if (v148)
      {
        v149 = a3[v148 - 1];
        v150 = *((unsigned int *)v149 + 18);
        *v147 = v150;
        if (v150 >= *((unsigned int *)v149 + 19))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v149 + 64, (uint64_t)v149 + 80, v150 + 1, 8);
          v150 = *((unsigned int *)v149 + 18);
        }
        *(_QWORD *)(*((_QWORD *)v149 + 8) + 8 * v150) = v147;
        ++*((_DWORD *)v149 + 18);
      }
      else
      {
        *v147 = v145;
        *(_QWORD *)(v146 + 8 * v145++) = v147;
      }
      LODWORD(v144) = v144 + 1;
    }
    while ((_DWORD)v143 != (_DWORD)v144);
  }
  sub_1C4DFC134((uint64_t)a2 + 64, v145);
  if (v156 != v158)
    free(v156);
}

BOOL sub_1C510EEF4(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v4;
  unsigned int v5;

  v4 = *(_DWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (a1 >> 1) & 3;
  v5 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
  if (v4 < v5)
    return 1;
  if (v5 >= v4)
    return ((*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a4 >> 1) & 3);
  return 0;
}

uint64_t **sub_1C510EF68(_QWORD **a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t **result;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  result = (uint64_t **)sub_1C510F00C(a1, a2, &v13, &v12, a3);
  if (!*result)
  {
    v7 = result;
    v8 = operator new(0x38uLL);
    v8[2] = *(_OWORD *)a4;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a4 + 16);
    v9 = v13;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v9;
    *v7 = (uint64_t *)v8;
    v10 = (_QWORD *)**a1;
    if (v10)
    {
      *a1 = v10;
      v11 = *v7;
    }
    else
    {
      v11 = (uint64_t *)v8;
    }
    result = (uint64_t **)sub_1C4768E74(a1[1], v11);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return result;
}

_QWORD *sub_1C510F00C(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || (v11 = *a5, v12 = a2[4], sub_1C510EEF4(*a5, a5 + 1, v12, a2 + 5)))
  {
    v13 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v15 = a2;
LABEL_17:
      if (v13)
      {
        *a3 = v15;
        return v15 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v13)
    {
      v14 = (_QWORD *)*a2;
      do
      {
        v15 = v14;
        v14 = (_QWORD *)v14[1];
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v19 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (v19);
    }
    if (sub_1C510EEF4(v15[4], v15 + 5, *a5, a5 + 1))
      goto LABEL_17;
    return sub_1C510F1C4((uint64_t)a1, a3, a5);
  }
  if (sub_1C510EEF4(v12, a2 + 5, v11, a5 + 1))
  {
    v16 = a2[1];
    if (v16)
    {
      v17 = (_QWORD *)a2[1];
      do
      {
        a4 = v17;
        v17 = (_QWORD *)*v17;
      }
      while (v17);
    }
    else
    {
      v20 = a2;
      do
      {
        a4 = (_QWORD *)v20[2];
        v19 = *a4 == (_QWORD)v20;
        v20 = a4;
      }
      while (!v19);
    }
    if (a4 == v9 || sub_1C510EEF4(v11, a5 + 1, a4[4], a4 + 5))
    {
      if (v16)
      {
        *a3 = a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return a4;
    }
    return sub_1C510F1C4((uint64_t)a1, a3, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return a4;
}

_QWORD *sub_1C510F1C4(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v6 = a3 + 1;
    v7 = *a3;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4 + 5;
        v10 = v4[4];
        if (!sub_1C510EEF4(v7, v6, v10, v4 + 5))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_1C510EEF4(v10, v9, v7, v6))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

_QWORD *sub_1C510F274(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    v5 = a2 + 1;
    v4 = *a2;
    v6 = (_QWORD *)(a1 + 8);
    do
    {
      v7 = sub_1C510EEF4(v4, v5, v3[4], v3 + 5);
      v8 = v3 + 1;
      if (v7)
      {
        v8 = v3;
        v6 = v3;
      }
      v3 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v6 != v2)
    {
      if (((v4 >> 1) & 3 | *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 24)) >= ((v6[4] >> 1) & 3 | *(_DWORD *)((v6[4] & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
            v2 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v2 = (_QWORD *)v6[2];
            v10 = *v2 == (_QWORD)v6;
            v6 = v2;
          }
          while (!v10);
        }
      }
      else
      {
        return v6;
      }
    }
  }
  return v2;
}

void sub_1C510F34C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t **v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;

  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    v4 = (uint64_t *)a2[1];
    do
    {
      v5 = (uint64_t **)v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
    v6 = 0;
  }
  else
  {
    v5 = (uint64_t **)a2;
    do
    {
      v6 = v5;
      v5 = (uint64_t **)v5[2];
    }
    while (*v5 != (uint64_t *)v6);
  }
  v7 = *(uint64_t ***)(a1 + 96);
  if (v5 == v7 + 1)
  {
    v9 = 1;
    if (!v6)
    {
LABEL_22:
      v14 = v5;
      do
      {
        v13 = (uint64_t **)v14[2];
        v12 = *v13 == (uint64_t *)v14;
        v14 = v13;
      }
      while (v12);
      goto LABEL_24;
    }
  }
  else
  {
    v8 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
    while (1)
    {
      v9 = v8 >= ((v5[5] >> 1) & 3 | *(_DWORD *)(((unint64_t)v5[5] & 0xFFFFFFFFFFFFFFF8) + 24));
      if (v8 < ((v5[5] >> 1) & 3 | *(_DWORD *)(((unint64_t)v5[5] & 0xFFFFFFFFFFFFFFF8) + 24)))
        break;
      v10 = v5[1];
      if (v10)
      {
        do
        {
          v11 = (uint64_t **)v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (uint64_t **)v5[2];
          v12 = *v11 == (uint64_t *)v5;
          v5 = v11;
        }
        while (!v12);
      }
      v5 = v11;
      if (v11 == v7 + 1)
      {
        v5 = v7 + 1;
        break;
      }
    }
    v6 = (uint64_t **)*v5;
    if (!*v5)
      goto LABEL_22;
  }
  do
  {
    v13 = v6;
    v6 = (uint64_t **)v6[1];
  }
  while (v6);
LABEL_24:
  v15 = (uint64_t *)a2[6];
  v16 = (uint64_t)v13[5];
  if ((*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3) >= ((v16 >> 1) & 3 | *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24)))
    v16 = a3;
  a2[5] = v16;
  if (!v9
    && ((v5[4] >> 1) & 3 | *(_DWORD *)(((unint64_t)v5[4] & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24) | (v16 >> 1) & 3)
    && v5[6] == v15)
  {
    a2[5] = (uint64_t)v5[5];
    v20 = v5[1];
    if (v20)
    {
      do
      {
        v17 = v20;
        v20 = (uint64_t *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v17 = v5[2];
        v12 = *v17 == (_QWORD)v5;
        v5 = (uint64_t **)v17;
      }
      while (!v12);
    }
  }
  else
  {
    v17 = (uint64_t *)v5;
  }
  if (v3)
  {
    do
    {
      v18 = v3;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    do
    {
      v18 = (uint64_t *)a2[2];
      v12 = *v18 == (_QWORD)a2;
      a2 = v18;
    }
    while (!v12);
  }
  if (v17 != v18)
  {
    do
    {
      v19 = sub_1C485B670(v7, v18);
      operator delete(v18);
      v18 = v19;
    }
    while (v17 != v19);
  }
}

uint64_t **sub_1C510F55C(uint64_t **result, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unsigned int v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;

  v3 = a2 + 3;
  v4 = *result;
  v5 = **result;
  v6 = (char *)(v5 + 24 * *((unsigned int *)*result + 2));
  v7 = a3 & 0xFFFFFFFFFFFFFFF8;
  if (a2 + 3 == (_QWORD *)v6)
  {
    v8 = *(_DWORD *)(v7 + 24) | (a3 >> 1) & 3;
    v10 = 1;
    v9 = (char *)(a2 + 3);
  }
  else
  {
    v8 = *(_DWORD *)(v7 + 24) | (a3 >> 1) & 3;
    v9 = (char *)(a2 + 3);
    while (1)
    {
      v10 = v8 >= ((*((_QWORD *)v9 + 1) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                            + 24));
      if (v8 < ((*((_QWORD *)v9 + 1) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 24)))
        break;
      v9 += 24;
      if (v9 == v6)
      {
        v9 = (char *)(v5 + 24 * *((unsigned int *)*result + 2));
        break;
      }
    }
  }
  v11 = a2[2];
  if (v8 >= ((*((_QWORD *)v9 - 2) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v9 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 24)))
    v12 = a3;
  else
    v12 = *((_QWORD *)v9 - 2);
  a2[1] = v12;
  if (!v10
    && ((*(_QWORD *)v9 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (v12 >> 1) & 3)
    && *((_QWORD *)v9 + 2) == v11)
  {
    a2[1] = *((_QWORD *)v9 + 1);
    v9 += 24;
  }
  v13 = v6 - v9;
  if (v6 != v9)
  {
    result = (uint64_t **)memmove(a2 + 3, v9, v6 - v9);
    v5 = *v4;
  }
  *((_DWORD *)v4 + 2) = -1431655765 * (((unint64_t)v3 + v13 - v5) >> 3);
  return result;
}

uint64_t sub_1C510F69C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _BOOL4 v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;

  if (*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8) == a2)
  {
    v17 = sub_1C4926708(a1, a3, 1);
    v18 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    v19 = *(_OWORD *)v17;
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
    *(_OWORD *)v18 = v19;
    LODWORD(v18) = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v18;
    return *(_QWORD *)a1 + 24 * v18 - 24;
  }
  else
  {
    v4 = a2 - *(_QWORD *)a1;
    v5 = sub_1C4926708(a1, a3, 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + v4);
    v7 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 - 8);
    *(_OWORD *)v7 = *(_OWORD *)(v7 - 24);
    v8 = *(_QWORD *)a1;
    v9 = *(_DWORD *)(a1 + 8);
    v10 = *(_QWORD *)a1 + 24 * v9 - 24;
    if ((_QWORD *)v10 != v6)
    {
      memmove(v6 + 3, v6, v10 - (_QWORD)v6);
      v9 = *(_DWORD *)(a1 + 8);
      v8 = *(_QWORD *)a1;
    }
    v11 = v9 + 1;
    *(_DWORD *)(a1 + 8) = v11;
    v12 = v8 + 24 * v11;
    v14 = v5 >= (unint64_t)v6 && v5 < v12;
    v15 = v5 + 24 * v14;
    v16 = *(_OWORD *)v15;
    v6[2] = *(_QWORD *)(v15 + 16);
    *(_OWORD *)v6 = v16;
  }
  return (uint64_t)v6;
}

unsigned int *sub_1C510F7B8(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = result;
  v6 = result[2];
  if (v6 + a2 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + a2, 8);
    v6 = v5[2];
  }
  if (a2)
  {
    v7 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    v8 = a2;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8);
  }
  v5[2] = v6 + a2;
  return result;
}

void llvm::LiveIntervalUnion::unify(llvm::LiveIntervalUnion *this, const llvm::LiveInterval *a2, uint64_t **a3)
{
  unsigned int v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _DWORD *v31;
  char *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  int v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  uint64_t v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[9];

  v58[8] = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)a3 + 2);
  if (!v3)
    return;
  ++*(_DWORD *)this;
  v5 = *a3;
  v6 = (uint64_t)&(*a3)[3 * v3];
  v7 = **a3;
  v55 = (uint64_t)this + 8;
  v56 = v58;
  v57 = 0x400000000;
  sub_1C51107DC(&v55, v7);
  while (1)
  {
    v8 = v57;
    if (!(_DWORD)v57)
    {
LABEL_21:
      v8 = 0;
LABEL_22:
      v22 = *(_QWORD *)(v6 - 24);
      v23 = *(_QWORD *)(v6 - 16);
      v24 = (uint64_t *)(v6 - 24);
      v25 = v55;
      if (!*(_DWORD *)(v55 + 192))
      {
        v26 = sub_1C51110A4(v55, (_DWORD *)v56 + 4 * v8 - 1, *(unsigned int *)(v55 + 196), v22, v23, (uint64_t)a2);
        if (v26 <= 8)
        {
          *(_DWORD *)(v25 + 196) = v26;
          *((_DWORD *)v56 + 2) = v26;
          goto LABEL_25;
        }
        v45 = sub_1C51111EC(v25, *((_DWORD *)v56 + 4 * v57 - 1));
        v46 = *(_DWORD *)(v25 + 196);
        v47 = v56;
        *(_QWORD *)v56 = v25 + 8;
        v47[2] = v46;
        v47[3] = v45;
        v48 = *(_QWORD *)(*(_QWORD *)v56 + 8 * *((unsigned int *)v56 + 3));
        *(_QWORD *)&v54 = v48 & 0xFFFFFFFFFFFFFFC0;
        *((_QWORD *)&v54 + 1) = (v45 & 0xFFFFFFFF00000000 | v48 & 0x3F) + 1;
        sub_1C5DF93CC((uint64_t)&v56, (uint64_t)v56 + 16, &v54);
      }
      sub_1C5110DCC(&v55, v22, v23, (uint64_t)a2);
      while (1)
      {
LABEL_25:
        if (v5 == v24)
          goto LABEL_32;
        v27 = *v5;
        v28 = v5[1];
        v29 = v55;
        if (*(_DWORD *)(v55 + 192))
          goto LABEL_31;
        v30 = sub_1C51110A4(v55, (_DWORD *)v56 + 4 * v57 - 1, *(unsigned int *)(v55 + 196), *v5, v5[1], (uint64_t)a2);
        if (v30 > 8)
          break;
        *(_DWORD *)(v29 + 196) = v30;
        *((_DWORD *)v56 + 2) = v30;
LABEL_29:
        v31 = v56;
        v32 = (char *)v56 + 16 * v57;
        v33 = *((_DWORD *)v32 - 1) + 1;
        *((_DWORD *)v32 - 1) = v33;
        if (v33 == v31[4 * v57 - 2])
        {
          v34 = *(unsigned int *)(v55 + 192);
          if ((_DWORD)v34)
          {
            v35 = 1;
            v36 = v34 + 1;
            v37 = &v31[4 * v34 - 2];
            while (1)
            {
              v38 = v37;
              if (v36 == 2)
                break;
              v40 = *v37;
              v39 = v37[1];
              v41 = *v37 - 1;
              --v36;
              v37 -= 4;
              if (v39 != v41)
              {
                v35 = v36;
                goto LABEL_41;
              }
            }
            v40 = v31[2];
            v39 = v31[3];
LABEL_41:
            v42 = v39 + 1;
            v38[1] = v42;
            if (v42 != v40)
            {
              v43 = *(_QWORD *)(*((_QWORD *)v38 - 1) + 8 * v42);
              if ((_DWORD)v34 != v35)
              {
                do
                {
                  v53 = (char *)v56 + 16 * v35;
                  *(_QWORD *)v53 = v43 & 0xFFFFFFFFFFFFFFC0;
                  *((_DWORD *)v53 + 2) = (v43 & 0x3F) + 1;
                  *((_DWORD *)v53 + 3) = 0;
                  ++v35;
                  v43 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFC0);
                }
                while ((_DWORD)v34 != v35);
                v31 = v56;
              }
              v44 = (unint64_t *)&v31[4 * v34];
              *v44 = v43 & 0xFFFFFFFFFFFFFFC0;
              v44[1] = (v43 & 0x3F) + 1;
            }
          }
        }
        v5 += 3;
      }
      v49 = sub_1C51111EC(v29, *((_DWORD *)v56 + 4 * v57 - 1));
      v50 = *(_DWORD *)(v29 + 196);
      v51 = v56;
      *(_QWORD *)v56 = v29 + 8;
      v51[2] = v50;
      v51[3] = v49;
      v52 = *(_QWORD *)(*(_QWORD *)v56 + 8 * *((unsigned int *)v56 + 3));
      *(_QWORD *)&v54 = v52 & 0xFFFFFFFFFFFFFFC0;
      *((_QWORD *)&v54 + 1) = (v49 & 0xFFFFFFFF00000000 | v52 & 0x3F) + 1;
      sub_1C5DF93CC((uint64_t)&v56, (uint64_t)v56 + 16, &v54);
LABEL_31:
      sub_1C5110DCC(&v55, v27, v28, (uint64_t)a2);
      goto LABEL_29;
    }
    if (*((_DWORD *)v56 + 3) >= *((_DWORD *)v56 + 2))
      goto LABEL_22;
    v9 = *v5;
    v10 = v5[1];
    v11 = v55;
    if (!*(_DWORD *)(v55 + 192))
    {
      v12 = sub_1C51110A4(v55, (_DWORD *)v56 + 4 * v57 - 1, *(unsigned int *)(v55 + 196), *v5, v5[1], (uint64_t)a2);
      if (v12 <= 8)
      {
        *(_DWORD *)(v11 + 196) = v12;
        *((_DWORD *)v56 + 2) = v12;
        goto LABEL_8;
      }
      v18 = sub_1C51111EC(v11, *((_DWORD *)v56 + 4 * v57 - 1));
      v19 = *(_DWORD *)(v11 + 196);
      v20 = v56;
      *(_QWORD *)v56 = v11 + 8;
      v20[2] = v19;
      v20[3] = v18;
      v21 = *(_QWORD *)(*(_QWORD *)v56 + 8 * *((unsigned int *)v56 + 3));
      *(_QWORD *)&v54 = v21 & 0xFFFFFFFFFFFFFFC0;
      *((_QWORD *)&v54 + 1) = (v18 & 0xFFFFFFFF00000000 | v21 & 0x3F) + 1;
      sub_1C5DF93CC((uint64_t)&v56, (uint64_t)v56 + 16, &v54);
    }
    sub_1C5110DCC(&v55, v9, v10, (uint64_t)a2);
LABEL_8:
    v5 += 3;
    if (v5 == (uint64_t *)v6)
      break;
    if (!(_DWORD)v57)
      goto LABEL_21;
    if (*((_DWORD *)v56 + 3) < *((_DWORD *)v56 + 2))
    {
      v13 = *v5;
      if (*(_DWORD *)(v55 + 192))
      {
        sub_1C50E5D4C(&v55, v13);
      }
      else
      {
        v14 = (char *)v56 + 16 * v57;
        v15 = *((_DWORD *)v14 - 1);
        v16 = *(_DWORD *)(v55 + 196);
        if (v15 != v16)
        {
          while (1)
          {
            v17 = *(_QWORD *)(v55 + 16 * v15 + 8);
            if (((v17 >> 1) & 3 | *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24) | (v13 >> 1) & 3))
              break;
            if (v16 == ++v15)
            {
              v15 = *(_DWORD *)(v55 + 196);
              break;
            }
          }
        }
        *((_DWORD *)v14 - 1) = v15;
      }
    }
  }
LABEL_32:
  if (v56 != v58)
    free(v56);
}

void llvm::LiveIntervalUnion::extract(llvm::LiveIntervalUnion *this, const llvm::LiveInterval *a2, uint64_t **a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[9];

  v23[8] = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)a3 + 2);
  if (v3)
  {
    ++*(_DWORD *)this;
    v5 = (uint64_t)*a3;
    v6 = (uint64_t)&(*a3)[3 * v3];
    v7 = **a3;
    v20 = (char *)this + 8;
    v21 = v23;
    v22 = 0x400000000;
    sub_1C51107DC(&v20, v7);
    while (1)
    {
      v8 = v20;
      if (*((_DWORD *)v20 + 48))
      {
        sub_1C5111454((uint64_t)&v20, 1);
        v10 = v22;
        v9 = v21;
      }
      else
      {
        v9 = v21;
        v10 = v22;
        v11 = *((_DWORD *)v21 + 4 * v22 - 1);
        v12 = *((_DWORD *)v20 + 49);
        if (v11 + 1 != v12)
        {
          do
          {
            *(_OWORD *)&v8[16 * v11] = *(_OWORD *)&v8[16 * (v11 + 1)];
            *(_QWORD *)&v8[8 * v11 + 128] = *(_QWORD *)&v8[8 * (v11 + 1) + 128];
            ++v11;
          }
          while (v12 - 1 != v11);
          v9 = v21;
        }
        v13 = v12 - 1;
        *((_DWORD *)v8 + 49) = v13;
        v9[2] = v13;
      }
      if (!v10 || v9[3] >= v9[2])
        break;
      v14 = (uint64_t *)sub_1C50E5A80((uint64_t)a3, v5, *(_QWORD *)(*(_QWORD *)&v9[4 * v10 - 4] + 16 * v9[4 * v10 - 1]));
      if (v14 == (uint64_t *)v6)
      {
        v9 = v21;
        break;
      }
      v5 = (uint64_t)v14;
      if ((_DWORD)v22 && *((_DWORD *)v21 + 3) < *((_DWORD *)v21 + 2))
      {
        v15 = *v14;
        if (*((_DWORD *)v20 + 48))
        {
          sub_1C50E5D4C(&v20, v15);
        }
        else
        {
          v16 = (char *)v21 + 16 * v22;
          v17 = *((_DWORD *)v16 - 1);
          v18 = *((_DWORD *)v20 + 49);
          if (v17 != v18)
          {
            while (1)
            {
              v19 = *(_QWORD *)&v20[16 * v17 + 8];
              if (((v19 >> 1) & 3 | *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24) | (v15 >> 1) & 3))
                break;
              if (v18 == ++v17)
              {
                v17 = *((_DWORD *)v20 + 49);
                break;
              }
            }
          }
          *((_DWORD *)v16 - 1) = v17;
        }
      }
    }
    if (v9 != (_DWORD *)v23)
      free(v9);
  }
}

void llvm::LiveIntervalUnion::print(llvm::LiveIntervalUnion *this, llvm::raw_ostream *a2, const llvm::TargetRegisterInfo *a3)
{
  _WORD *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  _WORD *v8;
  int v9;
  _DWORD *v10;
  void (**v11)(void);
  _DWORD *v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  _DWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  char *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[9];

  v35[8] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 51))
  {
    v32 = (char *)this + 8;
    v33 = v35;
    v34 = 0x400000000;
    sub_1C4A0787C(&v32);
    if ((_DWORD)v34)
    {
      do
      {
        if (*((_DWORD *)v33 + 3) >= *((_DWORD *)v33 + 2))
          break;
        v5 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v5 > 1uLL)
        {
          *v5 = 23328;
          *((_QWORD *)a2 + 4) += 2;
          v6 = a2;
        }
        else
        {
          v6 = llvm::raw_ostream::write(a2, " [", 2uLL);
        }
        v30[0] = *(_QWORD *)(*((_QWORD *)v33 + 2 * v34 - 2)
                           + 16 * *((unsigned int *)v33 + 4 * v34 - 1));
        llvm::SlotIndex::print((llvm::SlotIndex *)v30, v6);
        v7 = (_BYTE *)*((_QWORD *)v6 + 4);
        if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
        {
          llvm::raw_ostream::write(v6, 32);
        }
        else
        {
          *((_QWORD *)v6 + 4) = v7 + 1;
          *v7 = 32;
        }
        v30[0] = *(_QWORD *)(*((_QWORD *)v33 + 2 * v34 - 2)
                           + 16 * *((unsigned int *)v33 + 4 * v34 - 1)
                           + 8);
        llvm::SlotIndex::print((llvm::SlotIndex *)v30, v6);
        v8 = (_WORD *)*((_QWORD *)v6 + 4);
        if (*((_QWORD *)v6 + 3) - (_QWORD)v8 > 1uLL)
        {
          *v8 = 14889;
          *((_QWORD *)v6 + 4) += 2;
        }
        else
        {
          v6 = llvm::raw_ostream::write(v6, "):", 2uLL);
        }
        v9 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 2 * v34 - 2)
                                   + 8 * *((unsigned int *)v33 + 4 * v34 - 1)
                                   + 128)
                       + 112);
        v10 = operator new(0x28uLL);
        *(_QWORD *)v10 = &off_1E814D010;
        v10[2] = v9;
        *((_QWORD *)v10 + 2) = a3;
        v10[6] = 0;
        *((_QWORD *)v10 + 4) = 0;
        v31 = v10;
        sub_1C52C9630((llvm::raw_ostream *)v10, v6);
        if (v31 == v30)
        {
          v11 = (void (**)(void))(v30[0] + 32);
        }
        else
        {
          if (!v31)
            goto LABEL_16;
          v11 = (void (**)(void))(*v31 + 40);
        }
        (*v11)();
LABEL_16:
        v12 = v33;
        v13 = (char *)v33 + 16 * v34;
        v14 = *((_DWORD *)v13 - 1) + 1;
        *((_DWORD *)v13 - 1) = v14;
        v15 = v34;
        if (v14 == v12[4 * v34 - 2])
        {
          v16 = *((unsigned int *)v32 + 48);
          if ((_DWORD)v16)
          {
            v17 = 1;
            v18 = v16 + 1;
            v19 = &v12[4 * v16 - 2];
            while (1)
            {
              v20 = v19;
              if (v18 == 2)
                break;
              v22 = *v19;
              v21 = v19[1];
              v23 = *v19 - 1;
              --v18;
              v19 -= 4;
              if (v21 != v23)
              {
                v17 = v18;
                goto LABEL_25;
              }
            }
            v22 = v12[2];
            v21 = v12[3];
LABEL_25:
            v24 = v21 + 1;
            v20[1] = v24;
            if (v24 != v22)
            {
              v25 = *(_QWORD *)(*((_QWORD *)v20 - 1) + 8 * v24);
              if ((_DWORD)v16 != v17)
              {
                do
                {
                  v27 = (char *)v33 + 16 * v17;
                  *(_QWORD *)v27 = v25 & 0xFFFFFFFFFFFFFFC0;
                  *((_DWORD *)v27 + 2) = (v25 & 0x3F) + 1;
                  *((_DWORD *)v27 + 3) = 0;
                  ++v17;
                  v25 = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFC0);
                }
                while ((_DWORD)v16 != v17);
                v12 = v33;
              }
              v26 = (char *)&v12[4 * v16];
              *(_QWORD *)v26 = v25 & 0xFFFFFFFFFFFFFFC0;
              *((_DWORD *)v26 + 2) = (v25 & 0x3F) + 1;
              *((_DWORD *)v26 + 3) = 0;
              v15 = v34;
            }
          }
        }
      }
      while (v15);
    }
    if (v33 != v35)
      free(v33);
    v28 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v28 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v28 + 1;
      *v28 = 10;
    }
  }
  else
  {
    v29 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v29 > 6uLL)
    {
      *(_DWORD *)((char *)v29 + 3) = 175731824;
      *v29 = 1886217504;
      *((_QWORD *)a2 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(a2, " empty\n", 7uLL);
    }
  }
}

uint64_t llvm::LiveIntervalUnion::getOneVReg(llvm::LiveIntervalUnion *this)
{
  uint64_t v1;
  char *v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[9];

  v6[8] = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 51))
    return 0;
  v3 = (char *)this + 8;
  v4 = v6;
  v5 = 0x400000000;
  sub_1C4A0787C(&v3);
  if ((_DWORD)v5 && *((_DWORD *)v4 + 3) < *((_DWORD *)v4 + 2))
    v1 = *(_QWORD *)(*((_QWORD *)v4 + 2 * v5 - 2)
                   + 8 * *((unsigned int *)v4 + 4 * v5 - 1)
                   + 128);
  else
    v1 = 0;
  if (v4 != v6)
    free(v4);
  return v1;
}

BOOL llvm::LiveIntervalUnion::Query::isSeenInterference(llvm::LiveIntervalUnion::Query *this, const llvm::LiveInterval *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const llvm::LiveInterval **v5;

  v2 = *((_QWORD *)this + 14);
  v3 = *((unsigned int *)this + 30);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = (const llvm::LiveInterval **)*((_QWORD *)this + 14);
    while (*v5 != a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        v5 = (const llvm::LiveInterval **)(v2 + 8 * v3);
        return v3 != ((uint64_t)v5 - v2) >> 3;
      }
    }
  }
  else
  {
    v5 = (const llvm::LiveInterval **)*((_QWORD *)this + 14);
  }
  return v3 != ((uint64_t)v5 - v2) >> 3;
}

uint64_t llvm::LiveIntervalUnion::Query::collectInterferingVRegs(llvm::LiveIntervalUnion::Query *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;

  if (!*((_BYTE *)this + 161))
  {
    result = *((unsigned int *)this + 30);
    if (result >= a2)
      return result;
    if (!*((_BYTE *)this + 160))
    {
      *((_BYTE *)this + 160) = 1;
      v5 = *((_QWORD *)this + 1);
      if (!*(_DWORD *)(v5 + 8) || !*(_DWORD *)(*(_QWORD *)this + 204))
      {
        result = 0;
        *((_BYTE *)this + 161) = 1;
        return result;
      }
      v6 = *(uint64_t **)v5;
      *((_QWORD *)this + 3) = *(_QWORD *)this + 8;
      *((_QWORD *)this + 2) = v6;
      sub_1C51107DC((_DWORD *)this + 6, *v6);
    }
    v7 = *((unsigned int *)this + 10);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = **((_QWORD **)this + 1) + 24 * *(unsigned int *)(*((_QWORD *)this + 1) + 8);
      do
      {
        while (1)
        {
          v10 = *((_QWORD *)this + 4);
          if (*(_DWORD *)(v10 + 12) >= *(_DWORD *)(v10 + 8))
            goto LABEL_40;
          v11 = (_QWORD *)*((_QWORD *)this + 2);
          v12 = v10 + 16 * v7;
          v13 = *(_QWORD *)(v12 - 16);
          v14 = *(unsigned int *)(v12 - 4);
          v15 = *(_QWORD *)(v13 + 16 * v14 + 8);
          if (((*v11 >> 1) & 3 | *(_DWORD *)((*v11 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24) | (v15 >> 1) & 3))
            break;
          v16 = *(_QWORD *)(v13 + 16 * v14);
LABEL_39:
          v36 = (uint64_t *)sub_1C50E5A80(*((_QWORD *)this + 1), (uint64_t)v11, v16);
          *((_QWORD *)this + 2) = v36;
          if (v36 != (uint64_t *)v9)
          {
            v37 = *((unsigned int *)this + 10);
            if ((_DWORD)v37)
            {
              v38 = *((_QWORD *)this + 4);
              v39 = v38 + 16 * v37;
              v40 = *(unsigned int *)(v39 - 4);
              v41 = *(_QWORD *)(*(_QWORD *)(v39 - 16) + 16 * v40 + 8);
              v42 = (*v36 >> 1) & 3 | *(_DWORD *)((*v36 & 0xFFFFFFFFFFFFFFF8) + 24);
              if (v42 >= (*(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 24) | (v41 >> 1) & 3)
                && *(_DWORD *)(v38 + 12) < *(_DWORD *)(v38 + 8))
              {
                v43 = *((_QWORD *)this + 3);
                if (*(_DWORD *)(v43 + 192))
                {
                  sub_1C50E5D4C((_DWORD *)this + 6, *v36);
                }
                else
                {
                  v44 = *(_DWORD *)(v43 + 196);
                  if ((_DWORD)v40 != v44)
                  {
                    while (1)
                    {
                      v45 = *(_QWORD *)(v43 + 16 * v40 + 8);
                      if (((v45 >> 1) & 3 | *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 24)) > v42)
                        break;
                      LODWORD(v40) = v40 + 1;
                      if (v44 == (_DWORD)v40)
                      {
                        LODWORD(v40) = *(_DWORD *)(v43 + 196);
                        break;
                      }
                    }
                  }
                  *(_DWORD *)(v39 - 4) = v40;
                }
              }
            }
            v7 = *((unsigned int *)this + 10);
            if ((_DWORD)v7)
              continue;
          }
          goto LABEL_40;
        }
        v16 = *(_QWORD *)(v13 + 16 * v14);
        if (((v11[1] >> 1) & 3 | *(_DWORD *)((v11[1] & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24) | (v16 >> 1) & 3))
          goto LABEL_39;
        v17 = *(_QWORD *)(v13 + 8 * v14 + 128);
        if (v17 != v8)
        {
          v18 = (_QWORD *)*((_QWORD *)this + 14);
          v19 = *((unsigned int *)this + 30);
          v20 = v18;
          if ((_DWORD)v19)
          {
            v21 = 8 * v19;
            v20 = (_QWORD *)*((_QWORD *)this + 14);
            while (*v20 != v17)
            {
              ++v20;
              v21 -= 8;
              if (!v21)
              {
                v20 = &v18[v19];
                break;
              }
            }
          }
          if (v19 == v20 - v18)
          {
            if (v19 >= *((_DWORD *)this + 31))
            {
              v35 = v17;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 112, (uint64_t)this + 128, v19 + 1, 8);
              v17 = v35;
              v18 = (_QWORD *)*((_QWORD *)this + 14);
              v19 = *((unsigned int *)this + 30);
            }
            v18[v19] = v17;
            result = (*((_DWORD *)this + 30) + 1);
            *((_DWORD *)this + 30) = result;
            if (result >= a2)
              return result;
            v10 = *((_QWORD *)this + 4);
            v7 = *((unsigned int *)this + 10);
            LODWORD(v14) = *(_DWORD *)(v10 + 16 * v7 - 4);
            v8 = v17;
          }
        }
        v22 = v14 + 1;
        *(_DWORD *)(v10 + 16 * v7 - 4) = v22;
        v7 = *((unsigned int *)this + 10);
        if (v22 == *(_DWORD *)(v10 + 16 * v7 - 8))
        {
          v23 = *(unsigned int *)(*((_QWORD *)this + 3) + 192);
          if ((_DWORD)v23)
          {
            v24 = 1;
            v25 = v23 + 1;
            v26 = (_DWORD *)(v10 + 16 * v23 - 8);
            while (1)
            {
              v27 = v26;
              if (v25 == 2)
                break;
              v29 = *v26;
              v28 = v26[1];
              v30 = *v26 - 1;
              --v25;
              v26 -= 4;
              if (v28 != v30)
              {
                v24 = v25;
                goto LABEL_33;
              }
            }
            v29 = *(_DWORD *)(v10 + 8);
            v28 = *(_DWORD *)(v10 + 12);
LABEL_33:
            v31 = v28 + 1;
            v27[1] = v31;
            if (v31 != v29)
            {
              v32 = *(_QWORD *)(*((_QWORD *)v27 - 1) + 8 * v31);
              if ((_DWORD)v23 != v24)
              {
                do
                {
                  v34 = *((_QWORD *)this + 4) + 16 * v24;
                  *(_QWORD *)v34 = v32 & 0xFFFFFFFFFFFFFFC0;
                  *(_DWORD *)(v34 + 8) = (v32 & 0x3F) + 1;
                  *(_DWORD *)(v34 + 12) = 0;
                  ++v24;
                  v32 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFC0);
                }
                while ((_DWORD)v23 != v24);
                v10 = *((_QWORD *)this + 4);
              }
              v33 = v10 + 16 * v23;
              *(_QWORD *)v33 = v32 & 0xFFFFFFFFFFFFFFC0;
              *(_DWORD *)(v33 + 8) = (v32 & 0x3F) + 1;
              *(_DWORD *)(v33 + 12) = 0;
              v7 = *((unsigned int *)this + 10);
            }
          }
        }
      }
      while (v7);
    }
LABEL_40:
    *((_BYTE *)this + 161) = 1;
  }
  return *((unsigned int *)this + 30);
}

_DWORD *sub_1C51107DC(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *result;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 192))
  {
    v9 = *(unsigned int *)(v4 + 196);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = v4 + 96;
      while (((*(_QWORD *)(v11 + 8 * v10) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v11 + 8 * v10) & 0xFFFFFFFFFFFFFFF8)
                                                                               + 24)) <= (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
      {
        if (v9 == ++v10)
        {
          v10 = v9;
          break;
        }
      }
    }
    else
    {
      v10 = 0;
    }
    result = sub_1C4A078FC(a1, v10);
    v13 = a1[4];
    if (v13)
    {
      v15 = a1 + 2;
      v14 = *((_QWORD *)a1 + 1);
      if (*(_DWORD *)(v14 + 12) < *(_DWORD *)(v14 + 8))
      {
        v16 = *(_DWORD *)(*(_QWORD *)a1 + 192);
        v17 = *(_QWORD *)(*(_QWORD *)(v14 + 16 * (v13 - 1))
                        + 8 * *(unsigned int *)(v14 + 16 * (v13 - 1) + 12));
        v18 = a2 & 0xFFFFFFFFFFFFFFF8;
        v19 = (a2 >> 1) & 3;
        v20 = v16 - v13;
        if (v16 != v13)
        {
          do
          {
            v23 = v17 & 0xFFFFFFFFFFFFFFC0;
            LODWORD(v24) = -1;
            do
            {
              v24 = (v24 + 1);
              v25 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFC0) + 8 * v24 + 0x60);
            }
            while (((v25 >> 1) & 3 | *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v18 + 24) | v19));
            sub_1C4A079DC(v15, v17, v24);
            v17 = *(_QWORD *)(v23 + 8 * v24);
            --v20;
          }
          while (v20);
        }
        LODWORD(v21) = -1;
        do
        {
          v21 = (v21 + 1);
          v22 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFC0) + 16 * v21 + 8);
        }
        while (((v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v18 + 24) | v19));
        return sub_1C4A079DC(v15, v17, v21);
      }
    }
  }
  else
  {
    v5 = *(unsigned int *)(v4 + 196);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = (uint64_t *)(v4 + 8);
      while (1)
      {
        v8 = *v7;
        v7 += 2;
        if (((v8 >> 1) & 3 | *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3))
          break;
        if (v5 == ++v6)
        {
          v6 = v5;
          return sub_1C4A078FC(a1, v6);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    return sub_1C4A078FC(a1, v6);
  }
  return result;
}

llvm::LiveIntervalUnion::Array *llvm::LiveIntervalUnion::Array::init(llvm::LiveIntervalUnion::Array *result, uint64_t a2, unsigned int a3)
{
  llvm::LiveIntervalUnion::Array *v5;
  unsigned int v6;
  uint64_t v7;

  if (*(_DWORD *)result != a3)
  {
    v5 = result;
    llvm::LiveIntervalUnion::Array::clear(result);
    *(_DWORD *)v5 = a3;
    result = (llvm::LiveIntervalUnion::Array *)malloc_type_malloc(216 * a3, 0x4065EBACuLL);
    if (!result && (a3 || (result = (llvm::LiveIntervalUnion::Array *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *((_QWORD *)v5 + 1) = result;
    if (*(_DWORD *)v5)
    {
      v6 = 0;
      do
      {
        v7 = *((_QWORD *)v5 + 1) + 216 * v6;
        *(_DWORD *)v7 = 0;
        *(_QWORD *)(v7 + 200) = 0;
        *(_QWORD *)(v7 + 208) = a2;
        ++v6;
        *(_OWORD *)(v7 + 8) = 0uLL;
        *(_OWORD *)(v7 + 24) = 0uLL;
        *(_OWORD *)(v7 + 40) = 0uLL;
        *(_OWORD *)(v7 + 56) = 0uLL;
        *(_OWORD *)(v7 + 72) = 0uLL;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_OWORD *)(v7 + 104) = 0uLL;
        *(_OWORD *)(v7 + 120) = 0uLL;
        *(_OWORD *)(v7 + 136) = 0uLL;
        *(_OWORD *)(v7 + 152) = 0uLL;
        *(_OWORD *)(v7 + 168) = 0uLL;
        *(_OWORD *)(v7 + 184) = 0uLL;
      }
      while (v6 != *(_DWORD *)v5);
    }
  }
  return result;
}

void llvm::LiveIntervalUnion::Array::clear(llvm::LiveIntervalUnion::Array *this)
{
  void *v2;
  int v3;
  unsigned int v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  int *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  int *v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD **v37;
  int *v38;
  uint64_t v39;
  int *v40;
  int *v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[32];
  void *v45;
  uint64_t v46;
  _QWORD v47[6];

  v47[4] = *MEMORY[0x1E0C80C00];
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(_DWORD *)this;
    if (*(_DWORD *)this)
    {
      v4 = 0;
      v5 = 0uLL;
      do
      {
        v6 = *((_QWORD *)this + 1);
        v7 = v4;
        v8 = v6 + 216 * v4;
        v11 = *(_DWORD *)(v8 + 200);
        v10 = (int *)(v8 + 200);
        v9 = v11;
        if (v11)
        {
          v12 = v10 - 48;
          v45 = v47;
          v46 = 0x400000000;
          v42 = v44;
          v43 = 0x400000000;
          v13 = v6 + 216 * v7;
          v16 = *(_DWORD *)(v13 + 204);
          v15 = (_DWORD *)(v13 + 204);
          LODWORD(v14) = v16;
          if (v16)
          {
            LODWORD(v14) = 0;
            v17 = 0;
            v18 = v10 - 46;
            do
            {
              v19 = *(_QWORD *)&v18[2 * v17];
              if (v14 >= HIDWORD(v46))
              {
                v38 = v18;
                v40 = v12;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v14 + 1, 8);
                v18 = v38;
                v12 = v40;
                v5 = 0uLL;
                LODWORD(v14) = v46;
              }
              *((_QWORD *)v45 + v14) = v19;
              LODWORD(v14) = v46 + 1;
              LODWORD(v46) = v46 + 1;
              ++v17;
            }
            while (v17 != *v15);
            v9 = *v10;
          }
          v20 = v9 - 1;
          if (v20)
          {
            v41 = v12;
            do
            {
              v36 = v20;
              v39 = v46;
              if ((_DWORD)v46)
              {
                v28 = 0;
                v37 = (_QWORD **)(v6 + 216 * v7 + 208);
                v29 = v45;
                v30 = v43;
                do
                {
                  v31 = 0;
                  v32 = 8 * (v29[v28] & 0x3FLL) + 8;
                  do
                  {
                    v33 = *(_QWORD *)((*((_QWORD *)v45 + v28) & 0xFFFFFFFFFFFFFFC0) + v31);
                    if (v30 >= HIDWORD(v43))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v30 + 1, 8);
                      v30 = v43;
                    }
                    *((_QWORD *)v42 + v30) = v33;
                    v30 = v43 + 1;
                    LODWORD(v43) = v43 + 1;
                    v31 += 8;
                  }
                  while (v32 != v31);
                  v29 = v45;
                  v34 = (_QWORD *)(*((_QWORD *)v45 + v28) & 0xFFFFFFFFFFFFFFC0);
                  v35 = *v37;
                  *v34 = **v37;
                  *v35 = v34;
                  ++v28;
                }
                while (v28 != v39);
              }
              LODWORD(v46) = 0;
              sub_1C50FDE40(&v45, (uint64_t)&v42);
              v20 = v36 - 1;
              v5 = 0uLL;
              v12 = v41;
            }
            while (v36 != 1);
            LODWORD(v14) = v46;
          }
          if ((_DWORD)v14)
          {
            v14 = v14;
            v21 = (uint64_t *)v45;
            v22 = *(unint64_t **)(v6 + 216 * v7 + 208);
            v23 = *v22;
            do
            {
              v24 = *v21++;
              v25 = v24 & 0xFFFFFFFFFFFFFFC0;
              *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFC0) = v23;
              v23 = v24 & 0xFFFFFFFFFFFFFFC0;
              --v14;
            }
            while (v14);
            *v22 = v25;
          }
          if (v42 != v44)
          {
            v27 = v12;
            free(v42);
            v12 = v27;
            v5 = 0uLL;
          }
          if (v45 != v47)
          {
            v26 = v12;
            free(v45);
            v12 = v26;
            v5 = 0uLL;
          }
          v12[48] = 0;
          *((_OWORD *)v12 + 10) = v5;
          *((_OWORD *)v12 + 11) = v5;
          *((_OWORD *)v12 + 8) = v5;
          *((_OWORD *)v12 + 9) = v5;
          *((_OWORD *)v12 + 6) = v5;
          *((_OWORD *)v12 + 7) = v5;
          *((_OWORD *)v12 + 4) = v5;
          *((_OWORD *)v12 + 5) = v5;
          *((_OWORD *)v12 + 2) = v5;
          *((_OWORD *)v12 + 3) = v5;
          *(_OWORD *)v12 = v5;
          *((_OWORD *)v12 + 1) = v5;
          v3 = *(_DWORD *)this;
        }
        *(_DWORD *)(v6 + 216 * v7 + 204) = 0;
        v4 = v7 + 1;
      }
      while (v7 + 1 != v3);
      v2 = (void *)*((_QWORD *)this + 1);
    }
    free(v2);
    *(_DWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t sub_1C5110DCC(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::IntervalMapImpl::Path *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t result;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;

  v8 = (llvm::IntervalMapImpl::Path *)(a1 + 2);
  v9 = a1[4];
  if (!v9 || (v10 = *(_QWORD *)v8, *(_DWORD *)(*(_QWORD *)v8 + 12) >= *(_DWORD *)(*(_QWORD *)v8 + 8)))
  {
    v11 = *(unsigned int *)(*(_QWORD *)a1 + 192);
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)(a1 + 2), *(_DWORD *)(*(_QWORD *)a1 + 192));
    v10 = *((_QWORD *)a1 + 1);
    ++*(_DWORD *)(v10 + 16 * v11 + 12);
    v9 = a1[4];
  }
  v12 = v9;
  v13 = v10 + 16 * v9;
  v14 = *(_DWORD *)(v13 - 4);
  if (!v14)
  {
    v15 = *(_QWORD **)(v13 - 16);
    if ((*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (a2 >> 1) & 3) >= ((*v15 >> 1) & 3 | *(_DWORD *)((*v15 & 0xFFFFFFFFFFFFFFF8) + 24)))
      goto LABEL_22;
    v16 = v9 - 1;
    if (v9 == 1)
      goto LABEL_12;
    v17 = v9 - 2;
    v18 = v9;
    while (1)
    {
      v19 = v17;
      if (!v17)
        break;
      v20 = *(_DWORD *)(v10 + 16 * v17 + 12);
      --v18;
      --v17;
      if (v20)
        goto LABEL_14;
    }
    v20 = *(_DWORD *)(v10 + 12);
    if (!v20)
      goto LABEL_12;
    v18 = 1;
LABEL_14:
    v21 = *(_QWORD *)(*(_QWORD *)(v10 + 16 * v19) + 8 * (v20 - 1));
    if (v18 != v16)
    {
      v38 = ~v18 + v9;
      do
      {
        v21 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFC0) + 8 * (v21 & 0x3F));
        --v38;
      }
      while (v38);
    }
    if (!v21)
    {
LABEL_12:
      v14 = 0;
      **(_QWORD **)a1 = a2;
      goto LABEL_23;
    }
    v22 = v21 & 0xFFFFFFFFFFFFFFC0;
    v23 = v21 & 0x3F;
    if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFC0) + 8 * v23 + 0x80) == a4
      && (v24 = v22 + 16 * v23, v26 = *(_QWORD *)(v24 + 8), v25 = (uint64_t *)(v24 + 8), v26 == a2))
    {
      llvm::IntervalMapImpl::Path::moveLeft(v8, v16);
      if ((*(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3) <= ((*v15 >> 1) & 3 | *(_DWORD *)((*v15 & 0xFFFFFFFFFFFFFFF8) + 24))
        && (v15[16] != a4 || *v15 != a3))
      {
        v36 = a1[4] - 1;
        *v25 = a3;
        return sub_1C5111404((uint64_t)a1, v36, a3);
      }
      a2 = *(_QWORD *)(v22 + 16 * v23);
      sub_1C5111454((uint64_t)a1, 0);
      v10 = *((_QWORD *)a1 + 1);
      v12 = a1[4];
      v14 = *(_DWORD *)(v10 + 16 * v12 - 4);
    }
    else
    {
LABEL_22:
      v14 = 0;
    }
  }
LABEL_23:
  v27 = v10 + 16 * v12;
  v28 = *(unsigned int *)(v27 - 8);
  v29 = v14 == v28;
  result = sub_1C51110A4(*(_QWORD *)(v27 - 16), (_DWORD *)(v27 - 4), v28, a2, a3, a4);
  if (result >= 9)
  {
    sub_1C5111674((uint64_t *)a1, a1[4] - 1);
    v31 = (_DWORD *)(*((_QWORD *)a1 + 1) + 16 * a1[4]);
    v32 = *--v31;
    v33 = *(v31 - 1);
    v29 = v32 == v33;
    result = sub_1C51110A4(*(_QWORD *)(v31 - 3), v31, v33, a2, a3, a4);
  }
  v34 = a1[4];
  v35 = *((_QWORD *)a1 + 1);
  v36 = v34 - 1;
  *(_DWORD *)(v35 + 16 * (v34 - 1) + 8) = result;
  if (v34 != 1)
  {
    v37 = v35 + 16 * (v34 - 2);
    *(_QWORD *)(*(_QWORD *)v37 + 8 * *(unsigned int *)(v37 + 12)) = *(_QWORD *)(*(_QWORD *)v37
                                                                                + 8 * *(unsigned int *)(v37 + 12)) & 0xFFFFFFFFFFFFFFC0 | (result - 1);
  }
  if (v29)
    return sub_1C5111404((uint64_t)a1, v36, a3);
  return result;
}

uint64_t sub_1C51110A4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v6 = *a2;
  if (!(_DWORD)v6)
  {
LABEL_4:
    if ((_DWORD)v6 == (_DWORD)a3)
    {
      v14 = (_QWORD *)(a1 + 16 * a3);
      *v14 = a4;
      v14[1] = a5;
      *(_QWORD *)(a1 + 8 * a3 + 128) = a6;
      return (a3 + 1);
    }
    v8 = a1 + 8 * v6;
    v10 = *(_QWORD *)(v8 + 128);
    v9 = (_QWORD *)(v8 + 128);
    if (v10 == a6)
    {
      v18 = (_QWORD *)(a1 + 16 * v6);
      if (*v18 == a5)
      {
        *v18 = a4;
        return a3;
      }
    }
    if ((_DWORD)a3 != 8)
    {
      v11 = a3;
      do
      {
        *(_OWORD *)(a1 + 16 * v11) = *(_OWORD *)(a1 + 16 * (v11 - 1));
        *(_QWORD *)(a1 + 128 + 8 * v11) = *(_QWORD *)(a1 + 128 + 8 * (v11 - 1));
        --v11;
      }
      while ((_DWORD)v6 != v11);
      v12 = (_QWORD *)(a1 + 16 * v6);
      *v12 = a4;
      v12[1] = a5;
      *v9 = a6;
      return (a3 + 1);
    }
    return 9;
  }
  v7 = (v6 - 1);
  if (*(_QWORD *)(a1 + 8 * v7 + 128) != a6
    || (v15 = a1 + 16 * v7, v17 = *(_QWORD *)(v15 + 8), v16 = (_QWORD *)(v15 + 8), v17 != a4))
  {
    if ((_DWORD)v6 == 8)
      return 9;
    goto LABEL_4;
  }
  *a2 = v7;
  if ((_DWORD)v6 != (_DWORD)a3 && *(_QWORD *)(a1 + 8 * v6 + 128) == a6 && *(_QWORD *)(a1 + 16 * v6) == a5)
  {
    *v16 = *(_QWORD *)(a1 + 16 * v6 + 8);
    if ((_DWORD)v6 + 1 != (_DWORD)a3)
    {
      do
      {
        *(_OWORD *)(a1 + 16 * v6) = *(_OWORD *)(a1 + 16 * (v6 + 1));
        *(_QWORD *)(a1 + 128 + 8 * v6) = *(_QWORD *)(a1 + 128 + 8 * (v6 + 1));
        LODWORD(v6) = v6 + 1;
      }
      while ((_DWORD)a3 - 1 != (_DWORD)v6);
    }
    return (a3 - 1);
  }
  else
  {
    *v16 = a5;
  }
  return a3;
}

uint64_t sub_1C51111EC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[4];

  v3 = 0;
  v4 = 0;
  LODWORD(v5) = 0;
  v31[3] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 196) + 1;
  v7 = v6 >> 1;
  v8 = v6 & 1;
  LODWORD(v9) = 2;
  do
  {
    if (v3 >= v8)
      v10 = v7;
    else
      v10 = v7 + 1;
    *((_DWORD *)&v31[2] + v3) = v10;
    v11 = a2 - v4;
    v4 += v10;
    v12 = v9 == 2;
    v13 = v4 > a2;
    if (v12 && v13)
      v9 = v3;
    else
      v9 = v9;
    if (v12 && v13)
      v5 = v11;
    else
      v5 = v5;
    ++v3;
  }
  while (v3 != 2);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  --*((_DWORD *)&v31[2] + v9);
  v31[0] = 0;
  v31[1] = 0;
  v17 = 0uLL;
  do
  {
    v18 = v14;
    v19 = *(unint64_t **)(a1 + 200);
    v20 = *v19;
    if (*v19)
    {
      *v19 = *(_QWORD *)v20;
    }
    else
    {
      v20 = sub_1C484358C((uint64_t)(v19 + 1), 192, 6);
      v17 = 0uLL;
    }
    *(_OWORD *)(v20 + 160) = v17;
    *(_OWORD *)(v20 + 176) = v17;
    *(_OWORD *)(v20 + 128) = v17;
    *(_OWORD *)(v20 + 144) = v17;
    *(_OWORD *)(v20 + 96) = v17;
    *(_OWORD *)(v20 + 112) = v17;
    *(_OWORD *)(v20 + 64) = v17;
    *(_OWORD *)(v20 + 80) = v17;
    *(_OWORD *)(v20 + 32) = v17;
    *(_OWORD *)(v20 + 48) = v17;
    *(_OWORD *)v20 = v17;
    *(_OWORD *)(v20 + 16) = v17;
    v21 = *((_DWORD *)&v31[2] + v15);
    if (v21)
    {
      v22 = (_QWORD *)(v20 + 128);
      v23 = (_QWORD *)(v20 + 8);
      v24 = *((_DWORD *)&v31[2] + v15);
      v25 = v16;
      do
      {
        v26 = (_QWORD *)(a1 + 16 * v25);
        *(v23 - 1) = *v26;
        *v23 = v26[1];
        v23 += 2;
        *v22++ = *(_QWORD *)(a1 + 8 * v25++ + 128);
        --v24;
      }
      while (v24);
    }
    v16 += v21;
    v31[v15] = v20 & 0xFFFFFFFFFFFFFFC0 | (v21 - 1);
    v14 = 1;
    v15 = 1;
  }
  while ((v18 & 1) == 0);
  v27 = 0;
  *(_DWORD *)(a1 + 192) = 1;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  do
  {
    v28 = v31[v27];
    v29 = a1 + 8 * v27;
    *(_QWORD *)(v29 + 96) = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFC0)
                                      + 16 * (*((_DWORD *)&v31[2] + v27) - 1)
                                      + 8);
    *(_QWORD *)(v29 + 8) = v28;
    ++v27;
  }
  while (v27 != 2);
  *(_QWORD *)a1 = *(_QWORD *)(v31[0] & 0xFFFFFFFFFFFFFFC0);
  *(_DWORD *)(a1 + 196) = 2;
  return v9 | (v5 << 32);
}

uint64_t sub_1C5111404(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v3 = *(_QWORD *)(result + 8);
    v4 = 16 * a2;
    while (1)
    {
      v5 = v4 - 16;
      if (v4 == 16)
        break;
      v6 = v3 + v4;
      v7 = *(_QWORD *)(v6 - 16);
      v9 = v6 - 8;
      LODWORD(v6) = *(_DWORD *)(v6 - 8);
      v8 = *(unsigned int *)(v9 + 4);
      *(_QWORD *)(v7 + 8 * v8 + 96) = a3;
      LODWORD(v7) = v6 - 1;
      v4 = v5;
      if ((_DWORD)v8 != (_DWORD)v7)
        return result;
    }
    *(_QWORD *)(*(_QWORD *)v3 + 8 * *(unsigned int *)(v3 + 12) + 88) = a3;
  }
  return result;
}

uint64_t sub_1C5111454(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v6 = *(unsigned int *)(result + 16);
  v7 = v4 + 16 * v6;
  v8 = *(_QWORD **)(v7 - 16);
  v9 = *(_DWORD *)(v7 - 8);
  if (v9 == 1)
  {
    v10 = *(_QWORD **)(v5 + 200);
    *v8 = *v10;
    *v10 = v8;
    result = (uint64_t)sub_1C5111C30((_DWORD *)result, *(_DWORD *)(v5 + 192));
    if (a2)
    {
      if (*(_DWORD *)(v5 + 192))
      {
        v11 = *(unsigned int *)(v3 + 16);
        if ((_DWORD)v11)
        {
          v12 = *(_QWORD *)(v3 + 8);
          if (*(_DWORD *)(v12 + 12) < *(_DWORD *)(v12 + 8))
          {
            v13 = (int *)(v12 + 12);
            v14 = *(unsigned int *)(v3 + 16);
            while (1)
            {
              v15 = *v13;
              v13 += 4;
              if (v15)
                break;
              if (!--v14)
              {
                v16 = *(_QWORD **)(v12 + 16 * v11 - 16);
                goto LABEL_26;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v17 = *(_DWORD *)(v7 - 4);
    if (v17 + 1 != v9)
    {
      do
      {
        *(_OWORD *)&v8[2 * v17] = *(_OWORD *)&v8[2 * v17 + 2];
        v8[v17 + 16] = v8[v17 + 17];
        ++v17;
      }
      while (v9 - 1 != v17);
      v4 = *(_QWORD *)(result + 8);
      v9 = *(_DWORD *)(v4 + 16 * v6 - 8);
    }
    v18 = v4 + 16 * v6;
    v19 = *(unsigned int *)(v5 + 192);
    *(_DWORD *)(v4 + 16 * v19 + 8) = v9 - 1;
    if ((_DWORD)v19)
    {
      v20 = v4 + 16 * (v19 - 1);
      *(_QWORD *)(*(_QWORD *)v20 + 8 * *(unsigned int *)(v20 + 12)) = *(_QWORD *)(*(_QWORD *)v20
                                                                                  + 8 * *(unsigned int *)(v20 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v9 - 2);
    }
    if (*(_DWORD *)(v18 - 4) == v9 - 1)
    {
      result = sub_1C5111404(result, v19, v8[2 * (v9 - 2) + 1]);
      v21 = 0;
      v22 = *(unsigned int *)(v5 + 192);
      v23 = *(_QWORD *)(v3 + 8);
      v24 = v22 - 1;
      while (1)
      {
        v25 = v21;
        v26 = (v24 + v21);
        if (!(v24 + v21))
          break;
        v28 = *(_DWORD *)(v23 + 16 * v26 + 8);
        v27 = *(_DWORD *)(v23 + 16 * v26 + 12);
        --v21;
        if (v27 != v28 - 1)
          goto LABEL_28;
      }
      v26 = 0;
      v28 = *(_DWORD *)(v23 + 8);
      v27 = *(_DWORD *)(v23 + 12);
LABEL_28:
      v31 = v27 + 1;
      *(_DWORD *)(v23 + 16 * v26 + 12) = v31;
      if (v31 != v28)
      {
        v32 = *(_QWORD *)(*(_QWORD *)(v23 + 16 * v26) + 8 * v31);
        if (v25)
        {
          do
          {
            v34 = *(_QWORD *)(v3 + 8) + 16 * (v22 + v25);
            *(_QWORD *)v34 = v32 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v34 + 8) = (v32 & 0x3F) + 1;
            *(_DWORD *)(v34 + 12) = 0;
            v32 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFC0);
          }
          while (!__CFADD__(v25++, 1));
          v23 = *(_QWORD *)(v3 + 8);
        }
        v33 = (unint64_t *)(v23 + 16 * v22);
        *v33 = v32 & 0xFFFFFFFFFFFFFFC0;
        v33[1] = (v32 & 0x3F) + 1;
      }
    }
    else if (a2)
    {
      if ((_DWORD)v6)
      {
        v29 = (int *)(v4 + 12);
        while (1)
        {
          v30 = *v29;
          v29 += 4;
          if (v30)
            break;
          if (!--v6)
            goto LABEL_25;
        }
      }
      else
      {
LABEL_25:
        v16 = *(_QWORD **)(v18 - 16);
LABEL_26:
        *(_QWORD *)v5 = *v16;
      }
    }
  }
  return result;
}

uint64_t sub_1C5111674(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  llvm::IntervalMapImpl::Path *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  char v40;
  int i;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  BOOL v58;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int v68[4];
  _QWORD v69[5];
  _DWORD v70[4];
  uint64_t v71;

  v2 = a2;
  v71 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IntervalMapImpl::Path *)(a1 + 1);
  v3 = a1[1];
  memset(v69, 0, 32);
  v5 = *(unsigned int *)(v3 + 16 * a2 + 12);
  if (a2)
  {
    v6 = -1;
    while (1)
    {
      v7 = a2 + v6;
      if (!(a2 + v6))
        break;
      v8 = *(_DWORD *)(v3 + 16 * v7 + 12);
      --v6;
      if (v8)
      {
        v9 = a2 + v6 + 2;
        goto LABEL_8;
      }
    }
    v8 = *(_DWORD *)(v3 + 12);
    v9 = 1;
    if (!v8)
    {
      LODWORD(v10) = 0;
      goto LABEL_13;
    }
LABEL_8:
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 16 * v7) + 8 * (v8 - 1));
    if (v9 != a2)
    {
      v61 = a2 - v9;
      do
      {
        v10 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFC0) + 8 * (v10 & 0x3F));
        --v61;
      }
      while (v61);
    }
    if (v10)
    {
      LOBYTE(v9) = 0;
      v8 = (v10 & 0x3F) + 1;
      v70[0] = v8;
      v5 = (v8 + v5);
      v69[0] = v10 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v10) = 1;
      goto LABEL_13;
    }
    v8 = 0;
  }
  else
  {
    v8 = 0;
    LODWORD(v10) = 0;
  }
  LOBYTE(v9) = 1;
LABEL_13:
  v11 = v3 + 16 * a2;
  v12 = *(_DWORD *)(v11 + 8);
  v70[v10] = v12;
  v13 = v12 + v8;
  v14 = (v10 + 1);
  *(_QWORD *)((unint64_t)v69 | (8 * v10)) = *(_QWORD *)v11;
  if (a2)
  {
    v15 = -1;
    while (1)
    {
      v16 = a2 + v15;
      if (!(a2 + v15))
        break;
      v17 = *(_DWORD *)(v3 + 16 * v16 + 12);
      v18 = *(_DWORD *)(v3 + 16 * v16 + 8) - 1;
      --v15;
      if (v17 != v18)
      {
        v19 = a2 + v15 + 2;
        goto LABEL_19;
      }
    }
    v17 = *(_DWORD *)(v3 + 12);
    v18 = *(_DWORD *)(v3 + 8) - 1;
    v19 = 1;
LABEL_19:
    if (v17 != v18)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 16 * v16) + 8 * (v17 + 1));
      if (v19 != a2)
      {
        v60 = a2 - v19;
        do
        {
          v20 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFC0);
          --v60;
        }
        while (v60);
      }
      if (v20)
      {
        v21 = (v20 & 0x3F) + 1;
        v70[v14] = v21;
        v13 += v21;
        v69[v14] = v20 & 0xFFFFFFFFFFFFFFC0;
        v14 = v10 | 2;
      }
    }
  }
  v63 = v9;
  if (v13 + 1 <= (8 * v14))
  {
    LODWORD(v22) = 0;
  }
  else
  {
    if ((_DWORD)v14 == 1)
      v22 = 1;
    else
      v22 = (v14 - 1);
    v70[v14] = v70[v22];
    v69[v14] = v69[v22];
    v70[v22] = 0;
    v23 = *(unint64_t **)(*a1 + 200);
    v24 = *v23;
    if (*v23)
      *v23 = *(_QWORD *)v24;
    else
      v24 = sub_1C484358C((uint64_t)(v23 + 1), 192, 6);
    *(_OWORD *)(v24 + 160) = 0u;
    *(_OWORD *)(v24 + 176) = 0u;
    *(_OWORD *)(v24 + 128) = 0u;
    *(_OWORD *)(v24 + 144) = 0u;
    *(_OWORD *)(v24 + 96) = 0u;
    *(_OWORD *)(v24 + 112) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 80) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    v14 = (v14 + 1);
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    v69[v22] = v24;
  }
  v66 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v14, v13, 8u, v70, v68, (unsigned int *)v5, 1);
  if ((_DWORD)v14 != 1)
  {
    v62 = (v14 - 1);
    v25 = (int)v14 - 1;
    v65 = v14;
    v26 = v14;
    do
    {
      v27 = v70[v25];
      v28 = v68[v25];
      if (v27 != v28)
      {
        v29 = v26;
        do
        {
          if (v29 == 1)
            break;
          v30 = *((_DWORD *)&v69[4] + v29);
          v31 = sub_1C51126F4(v69[v25], v27, *(_QWORD *)&v68[2 * v29], v30, v28 - v27);
          *((_DWORD *)&v69[4] + v29) = v30 - v31;
          v27 = v70[v25] + v31;
          v70[v25] = v27;
          --v29;
        }
        while (v27 < v28);
      }
      --v26;
      --v25;
    }
    while ((_DWORD)v25);
    LODWORD(v14) = v65;
    v32 = v62;
    if (v65 >= 2)
    {
      v33 = 0;
      v34 = 1;
      do
      {
        v35 = v70[v33];
        v36 = v68[v33];
        if (v35 != v36)
        {
          v37 = v34;
          do
          {
            if (v65 == v37)
              break;
            v64 = v70[v37];
            v38 = sub_1C51126F4(v69[v37], v64, v69[v33], v35, v35 - v36);
            v32 = v62;
            v70[v37] = v38 + v64;
            v35 = v70[v33] - v38;
            v70[v33] = v35;
            ++v37;
          }
          while (v35 < v36);
        }
        ++v33;
        ++v34;
        LODWORD(v14) = v65;
      }
      while (v33 != v32);
    }
  }
  if ((v63 & 1) == 0)
    llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
  v39 = 0;
  v40 = 0;
  for (i = v66; ; --i)
  {
    v42 = v69[v39];
    v43 = v68[v39];
    v44 = v43 - 1;
    v45 = *(_QWORD *)(v42 + 16 * v44 + 8);
    if ((_DWORD)v22 && v39 == v22)
    {
      v46 = sub_1C5111E98(a1, v2, v42 & 0xFFFFFFFFFFFFFFC0 | v44, v45);
      v40 = v46;
      v2 += v46;
    }
    else
    {
      v47 = *(_QWORD *)v4;
      *(_DWORD *)(*(_QWORD *)v4 + 16 * v2 + 8) = v43;
      if (v2)
        *(_QWORD *)(*(_QWORD *)(v47 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v47 + 16 * (v2 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v47 + 16 * (v2 - 1)) + 8 * *(unsigned int *)(v47 + 16 * (v2 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v44;
      sub_1C5111404((uint64_t)a1, v2, v45);
    }
    if (v39 + 1 == v14)
      break;
    v48 = 0;
    ++v39;
    v49 = *(_QWORD *)v4;
    while (1)
    {
      v50 = v48;
      if (v2 + v48 == 1)
        break;
      v51 = v2 - 1 + v48;
      v53 = *(_DWORD *)(v49 + 16 * v51 + 8);
      v52 = *(_DWORD *)(v49 + 16 * v51 + 12);
      --v48;
      if (v52 != v53 - 1)
        goto LABEL_63;
    }
    v51 = 0;
    v53 = *(_DWORD *)(v49 + 8);
    v52 = *(_DWORD *)(v49 + 12);
LABEL_63:
    v54 = v52 + 1;
    *(_DWORD *)(v49 + 16 * v51 + 12) = v54;
    if (v54 != v53)
    {
      v55 = *(_QWORD *)(*(_QWORD *)(v49 + 16 * v51) + 8 * v54);
      if (v50)
      {
        do
        {
          v57 = *(_QWORD *)v4 + 16 * (v2 + v50);
          *(_QWORD *)v57 = v55 & 0xFFFFFFFFFFFFFFC0;
          *(_DWORD *)(v57 + 8) = (v55 & 0x3F) + 1;
          *(_DWORD *)(v57 + 12) = 0;
          v55 = *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFC0);
          v58 = __CFADD__(v50++, 1);
        }
        while (!v58);
        v49 = *(_QWORD *)v4;
      }
      v56 = (unint64_t *)(v49 + 16 * v2);
      *v56 = v55 & 0xFFFFFFFFFFFFFFC0;
      v56[1] = (v55 & 0x3F) + 1;
    }
  }
  if ((_DWORD)v39 != (_DWORD)v66)
  {
    do
    {
      llvm::IntervalMapImpl::Path::moveLeft(v4, v2);
      v58 = __CFADD__(i++, 1);
    }
    while (!v58);
  }
  *(_DWORD *)(*(_QWORD *)v4 + 16 * v2 + 12) = HIDWORD(v66);
  return v40 & 1;
}

_DWORD *sub_1C5111C30(_DWORD *result, unsigned int a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *((_QWORD *)result + 1);
  v6 = a2 - 1;
  if (a2 == 1)
  {
    v14 = *(_DWORD *)(v4 + 12);
    v15 = *(_DWORD *)(v5 + 196);
    if (v14 + 1 != v15)
    {
      do
      {
        *(_QWORD *)(v5 + 8 + 8 * v14) = *(_QWORD *)(v5 + 8 + 8 * (v14 + 1));
        *(_QWORD *)(v5 + 96 + 8 * v14) = *(_QWORD *)(v5 + 96 + 8 * (v14 + 1));
        ++v14;
      }
      while (v15 - 1 != v14);
    }
    v16 = v15 - 1;
    *(_DWORD *)(v5 + 196) = v16;
    *(_DWORD *)(v4 + 8) = v16;
    if (!v16)
    {
      *(_DWORD *)(v5 + 192) = 0;
      *(_OWORD *)(v5 + 160) = 0u;
      *(_OWORD *)(v5 + 176) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_OWORD *)(v5 + 144) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      return sub_1C4A078FC(result, 0);
    }
  }
  else
  {
    v7 = v4 + 16 * v6;
    v8 = *(_QWORD **)(v4 + 16 * (a2 - 1));
    v11 = *(_DWORD *)(v7 + 8);
    v10 = (_DWORD *)(v7 + 8);
    v9 = v11;
    v12 = v11 - 1;
    if (v11 == 1)
    {
      v13 = *(_QWORD **)(v5 + 200);
      *v8 = *v13;
      *v13 = v8;
      result = (_DWORD *)sub_1C5111C30(result, a2 - 1);
    }
    else
    {
      v17 = *(_DWORD *)(v4 + 16 * v6 + 12);
      if (v17 + 1 != v9)
      {
        v18 = *(_DWORD *)(v4 + 16 * v6 + 12);
        do
        {
          v8[v18] = v8[v18 + 1];
          v8[v18 + 12] = v8[v18 + 13];
          ++v18;
        }
        while (v12 != v18);
      }
      *v10 = v12;
      v19 = a2 - 2;
      v20 = (uint64_t *)(v4 + 16 * (a2 - 2));
      v21 = *((unsigned int *)v20 + 3);
      v22 = *v20;
      v23 = *(_QWORD *)(*v20 + 8 * v21);
      v24 = (v9 - 2);
      *(_QWORD *)(v22 + 8 * v21) = v23 & 0xFFFFFFFFFFFFFFC0 | v24;
      if (v17 == v12)
      {
        result = (_DWORD *)sub_1C5111404((uint64_t)result, a2 - 1, v8[v24 + 12]);
        v25 = 0;
        v26 = *((_QWORD *)v3 + 1);
        while (1)
        {
          v27 = v25;
          v28 = v19 + v25;
          if (!(v19 + v25))
            break;
          v30 = *(_DWORD *)(v26 + 16 * v28 + 8);
          v29 = *(_DWORD *)(v26 + 16 * v28 + 12);
          --v25;
          if (v29 != v30 - 1)
            goto LABEL_17;
        }
        v28 = 0;
        v30 = *(_DWORD *)(v26 + 8);
        v29 = *(_DWORD *)(v26 + 12);
LABEL_17:
        v31 = v29 + 1;
        *(_DWORD *)(v26 + 16 * v28 + 12) = v31;
        if (v31 != v30)
        {
          v32 = *(_QWORD *)(*(_QWORD *)(v26 + 16 * v28) + 8 * v31);
          if (v27)
          {
            do
            {
              v37 = *((_QWORD *)v3 + 1) + 16 * (v6 + v27);
              *(_QWORD *)v37 = v32 & 0xFFFFFFFFFFFFFFC0;
              *(_DWORD *)(v37 + 8) = (v32 & 0x3F) + 1;
              *(_DWORD *)(v37 + 12) = 0;
              v32 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFC0);
            }
            while (!__CFADD__(v27++, 1));
            v26 = *((_QWORD *)v3 + 1);
          }
          v33 = (unint64_t *)(v26 + 16 * v6);
          *v33 = v32 & 0xFFFFFFFFFFFFFFC0;
          v33[1] = (v32 & 0x3F) + 1;
        }
      }
    }
  }
  if (v3[4])
  {
    v34 = *((_QWORD *)v3 + 1);
    if (*(_DWORD *)(v34 + 12) < *(_DWORD *)(v34 + 8))
    {
      v35 = *(_QWORD *)(*(_QWORD *)(v34 + 16 * v6)
                      + 8 * *(unsigned int *)(v34 + 16 * v6 + 12));
      v36 = v34 + 16 * a2;
      *(_QWORD *)v36 = v35 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v36 + 8) = (v35 & 0x3F) + 1;
      *(_DWORD *)(*((_QWORD *)v3 + 1) + 16 * a2 + 12) = 0;
    }
  }
  return result;
}

BOOL sub_1C5111E98(uint64_t *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  llvm::IntervalMapImpl::Path *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  BOOL v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  unsigned int v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v96;
  int v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  unint64_t v104;
  llvm::IntervalMapImpl::Path *v105;
  unsigned int v106[4];
  _QWORD v107[5];
  _DWORD v108[4];
  uint64_t v109;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v7 = (uint64_t)a1;
  v109 = *MEMORY[0x1E0C80C00];
  v9 = (llvm::IntervalMapImpl::Path *)(a1 + 1);
  v8 = *a1;
  v10 = a2 == 1;
  if (a2 == 1)
  {
    v11 = *(unsigned int *)(v8 + 196);
    if (v11 <= 0xA)
    {
      v12 = v8 + 8;
      v13 = *(_QWORD *)v9;
      v14 = *(unsigned int *)(*(_QWORD *)v9 + 12);
      if ((_DWORD)v11 != (_DWORD)v14)
      {
        v15 = *(_DWORD *)(v8 + 196);
        do
        {
          *(_QWORD *)(v12 + 8 * v15) = *(_QWORD *)(v12 + 8 * (v15 - 1));
          *(_QWORD *)(v8 + 96 + 8 * v15) = *(_QWORD *)(v8 + 96 + 8 * (v15 - 1));
          --v15;
        }
        while ((_DWORD)v14 != v15);
      }
      v10 = 0;
      v16 = (_QWORD *)(v12 + 8 * v14);
      *v16 = a3;
      v16[11] = a4;
      *(_DWORD *)(v8 + 196) = v11 + 1;
      *(_DWORD *)(v13 + 8) = v11 + 1;
      v17 = *(_QWORD *)(*(_QWORD *)v13 + 8 * v14);
      *(_QWORD *)(v13 + 16) = v17 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v13 + 24) = (v17 & 0x3F) + 1;
      return v10;
    }
    v18 = *(unsigned int *)(*(_QWORD *)v9 + 12);
    v19 = *(unint64_t **)(v8 + 200);
    v20 = *v19;
    if (*v19)
      *v19 = *(_QWORD *)v20;
    else
      v20 = sub_1C484358C((uint64_t)(v19 + 1), 192, 6);
    *(_OWORD *)(v20 + 160) = 0u;
    *(_OWORD *)(v20 + 176) = 0u;
    *(_OWORD *)(v20 + 128) = 0u;
    *(_OWORD *)(v20 + 144) = 0u;
    *(_OWORD *)(v20 + 96) = 0u;
    *(_OWORD *)(v20 + 112) = 0u;
    *(_OWORD *)(v20 + 64) = 0u;
    *(_OWORD *)(v20 + 80) = 0u;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    v21 = (uint64_t *)(v8 + 96);
    v22 = (_QWORD *)v20;
    v23 = v11;
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)(v20 + 16) = 0u;
    do
    {
      *v22 = *(v21 - 11);
      v24 = *v21++;
      v22[12] = v24;
      ++v22;
      --v23;
    }
    while (v23);
    v25 = (v11 - 1);
    *(_QWORD *)(v8 + 96) = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFC0 | v25 & 0xFFFFFFFFFFFFFFC0)
                                     + 8 * v25
                                     + 0x60);
    *(_QWORD *)(v8 + 8) = v20 & 0xFFFFFFFFFFFFFFC0 | v25;
    ++*(_DWORD *)(v8 + 192);
    *(_DWORD *)(v8 + 196) = 1;
    v26 = *(_QWORD **)v9;
    *v26 = v8 + 8;
    v26[1] = 1;
    v27 = *(_QWORD *)v9 + 16;
    v28 = *(_QWORD *)(**(_QWORD **)v9 + 8 * *(unsigned int *)(*(_QWORD *)v9 + 12));
    v107[0] = v28 & 0xFFFFFFFFFFFFFFC0;
    v107[1] = (v28 & 0x3F | (v18 << 32)) + 1;
    sub_1C5DF93CC((uint64_t)v9, v27, (__int128 *)v107);
    v6 = 2;
  }
  v29 = (v6 - 1);
  if (!*(_DWORD *)(v7 + 16)
    || (v30 = *(_QWORD *)v9, *(_DWORD *)(*(_QWORD *)v9 + 12) >= *(_DWORD *)(*(_QWORD *)v9 + 8)))
  {
    llvm::IntervalMapImpl::Path::moveLeft(v9, v6 - 1);
    v30 = *(_QWORD *)v9;
    ++*(_DWORD *)(*(_QWORD *)v9 + 16 * v29 + 12);
  }
  v31 = *(_DWORD *)(v30 + 16 * v29 + 8);
  if (v31 == 12)
  {
    memset(v107, 0, 32);
    v32 = *(unsigned int *)(v30 + 16 * v29 + 12);
    v33 = v6 - 2;
    v34 = v6 - 2;
    v35 = v6;
    v100 = v5;
    v101 = v4;
    while (1)
    {
      v36 = v34;
      if (!v34)
        break;
      v37 = *(_DWORD *)(v30 + 16 * v34 + 12);
      --v35;
      --v34;
      if (v37)
        goto LABEL_22;
    }
    v37 = *(_DWORD *)(v30 + 12);
    v35 = 1;
    if (!v37)
    {
      LODWORD(v38) = 0;
      goto LABEL_26;
    }
LABEL_22:
    v38 = *(_QWORD *)(*(_QWORD *)(v30 + 16 * v36) + 8 * (v37 - 1));
    if (v35 != (_DWORD)v29)
    {
      v97 = ~v35 + v6;
      do
      {
        v38 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFC0) + 8 * (v38 & 0x3F));
        --v97;
      }
      while (v97);
    }
    if (v38)
    {
      LOBYTE(v35) = 0;
      v37 = (v38 & 0x3F) + 1;
      v108[0] = v37;
      v32 = (v37 + v32);
      v107[0] = v38 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v38) = 1;
    }
    else
    {
      v37 = 0;
      LOBYTE(v35) = 1;
    }
LABEL_26:
    v39 = v30 + 16 * v29;
    v40 = *(_DWORD *)(v39 + 8);
    v108[v38] = v40;
    v41 = v40 + v37;
    v42 = (v38 + 1);
    *(_QWORD *)((unint64_t)v107 | (8 * v38)) = *(_QWORD *)v39;
    v43 = v6;
    while (1)
    {
      v44 = v33;
      if (!v33)
        break;
      v45 = *(_DWORD *)(v30 + 16 * v33 + 12);
      v46 = *(_DWORD *)(v30 + 16 * v33 + 8) - 1;
      --v43;
      --v33;
      if (v45 != v46)
        goto LABEL_31;
    }
    v45 = *(_DWORD *)(v30 + 12);
    v46 = *(_DWORD *)(v30 + 8) - 1;
    v43 = 1;
LABEL_31:
    if (v45 != v46)
    {
      v47 = *(_QWORD *)(*(_QWORD *)(v30 + 16 * v44) + 8 * (v45 + 1));
      if (v43 != (_DWORD)v29)
      {
        v96 = ~v43 + v6;
        do
        {
          v47 = *(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFC0);
          --v96;
        }
        while (v96);
      }
      if (v47)
      {
        v48 = (v47 & 0x3F) + 1;
        v108[v42] = v48;
        v41 += v48;
        v107[v42] = v47 & 0xFFFFFFFFFFFFFFC0;
        v42 = v38 | 2;
      }
    }
    v105 = (llvm::IntervalMapImpl::Path *)v7;
    v103 = v6 - 1;
    v99 = v35;
    if (v41 + 1 <= (12 * v42))
    {
      LODWORD(v49) = 0;
    }
    else
    {
      if ((_DWORD)v42 == 1)
        v49 = 1;
      else
        v49 = (v42 - 1);
      v108[v42] = v108[v49];
      v107[v42] = v107[v49];
      v108[v49] = 0;
      v50 = *(unint64_t **)(*(_QWORD *)v105 + 200);
      v51 = *v50;
      if (*v50)
        *v50 = *(_QWORD *)v51;
      else
        v51 = sub_1C484358C((uint64_t)(v50 + 1), 192, 6);
      *(_OWORD *)(v51 + 160) = 0u;
      *(_OWORD *)(v51 + 176) = 0u;
      *(_OWORD *)(v51 + 128) = 0u;
      *(_OWORD *)(v51 + 144) = 0u;
      *(_OWORD *)(v51 + 96) = 0u;
      *(_OWORD *)(v51 + 112) = 0u;
      *(_OWORD *)(v51 + 64) = 0u;
      *(_OWORD *)(v51 + 80) = 0u;
      *(_OWORD *)(v51 + 32) = 0u;
      *(_OWORD *)(v51 + 48) = 0u;
      v42 = (v42 + 1);
      *(_OWORD *)v51 = 0u;
      *(_OWORD *)(v51 + 16) = 0u;
      v107[v49] = v51;
    }
    v104 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v42, v41, 0xCu, v108, v106, (unsigned int *)v32, 1);
    v102 = v42;
    v52 = (v42 - 1);
    if ((_DWORD)v42 != 1)
    {
      v98 = (v42 - 1);
      do
      {
        v53 = v108[v52];
        v54 = v106[v52];
        if (v53 != v54)
        {
          v55 = v52;
          do
          {
            if (!v55)
              break;
            v56 = *((_DWORD *)&v107[4] + v55 + 1);
            v57 = sub_1C5100B94((_QWORD *)v107[v52], v53, *(_QWORD *)&v106[2 * v55 + 2], v56, v54 - v53);
            *((_DWORD *)&v107[4] + v55 + 1) = v56 - v57;
            v53 = v108[v52] + v57;
            v108[v52] = v53;
            --v55;
          }
          while (v53 < v54);
        }
        --v52;
      }
      while ((_DWORD)v52);
      v58 = (v42 - 1);
      if (v42 >= 2)
      {
        v59 = 0;
        v60 = 1;
        do
        {
          v61 = v108[v59];
          v62 = v106[v59];
          if (v61 != v62)
          {
            v63 = v60;
            do
            {
              if (v102 == v63)
                break;
              v64 = v108[v63];
              v65 = sub_1C5100B94((_QWORD *)v107[v63], v64, v107[v59], v61, v61 - v62);
              v58 = v98;
              v108[v63] = v65 + v64;
              v61 = v108[v59] - v65;
              v108[v59] = v61;
              ++v63;
            }
            while (v61 < v62);
          }
          ++v59;
          ++v60;
        }
        while (v59 != v58);
      }
    }
    if ((v99 & 1) == 0)
      llvm::IntervalMapImpl::Path::moveLeft(v9, v103);
    v66 = 0;
    v10 = 0;
    v67 = v104;
    v68 = (v6 - 1);
    while (1)
    {
      v69 = v107[v66];
      v70 = v106[v66];
      v71 = v70 - 1;
      v72 = *(_QWORD *)(v69 + 8 * v71 + 96);
      if ((_DWORD)v49 && v66 == v49)
      {
        v73 = sub_1C5111E98(v105, v68, v69 & 0xFFFFFFFFFFFFFFC0 | v71, v72);
        v10 = v73;
        v68 = (v68 + v73);
      }
      else
      {
        v74 = *(_QWORD *)v9;
        *(_DWORD *)(*(_QWORD *)v9 + 16 * v68 + 8) = v70;
        if ((_DWORD)v68)
          *(_QWORD *)(*(_QWORD *)(v74 + 16 * (v68 - 1))
                    + 8 * *(unsigned int *)(v74 + 16 * (v68 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v74 + 16 * (v68 - 1)) + 8 * *(unsigned int *)(v74 + 16 * (v68 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v71;
        sub_1C5111404((uint64_t)v105, v68, v72);
      }
      if (v66 + 1 == v102)
        break;
      v75 = 0;
      ++v66;
      v76 = *(_QWORD *)v9;
      while (1)
      {
        v77 = v75;
        if ((_DWORD)v68 + v75 == 1)
          break;
        v78 = (v68 - 1 + v75);
        v80 = *(_DWORD *)(v76 + 16 * v78 + 8);
        v79 = *(_DWORD *)(v76 + 16 * v78 + 12);
        --v75;
        if (v79 != v80 - 1)
          goto LABEL_74;
      }
      v78 = 0;
      v80 = *(_DWORD *)(v76 + 8);
      v79 = *(_DWORD *)(v76 + 12);
LABEL_74:
      v81 = v79 + 1;
      *(_DWORD *)(v76 + 16 * v78 + 12) = v81;
      if (v81 != v80)
      {
        v82 = *(_QWORD *)(*(_QWORD *)(v76 + 16 * v78) + 8 * v81);
        if (v77)
        {
          do
          {
            v84 = *(_QWORD *)v9 + 16 * (v68 + v77);
            *(_QWORD *)v84 = v82 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v84 + 8) = (v82 & 0x3F) + 1;
            *(_DWORD *)(v84 + 12) = 0;
            v82 = *(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFC0);
            v85 = __CFADD__(v77++, 1);
          }
          while (!v85);
          v76 = *(_QWORD *)v9;
        }
        v83 = (unint64_t *)(v76 + 16 * v68);
        *v83 = v82 & 0xFFFFFFFFFFFFFFC0;
        v83[1] = (v82 & 0x3F) + 1;
      }
      --v67;
    }
    if ((_DWORD)v66 != (_DWORD)v104)
    {
      do
      {
        llvm::IntervalMapImpl::Path::moveLeft(v9, v68);
        v85 = __CFADD__(v67++, 1);
      }
      while (!v85);
    }
    v30 = *(_QWORD *)v9;
    *(_DWORD *)(*(_QWORD *)v9 + 16 * v68 + 12) = HIDWORD(v104);
    v29 = v103 + v10;
    v31 = *(_DWORD *)(v30 + 16 * v29 + 8);
    v5 = v100;
    v4 = v101;
    v7 = (uint64_t)v105;
  }
  v86 = (uint64_t *)(v30 + 16 * v29);
  v87 = *v86;
  v88 = *((unsigned int *)v86 + 3);
  v89 = v86 + 1;
  if (v31 != (_DWORD)v88)
  {
    v90 = v31;
    do
    {
      *(_QWORD *)(v87 + 8 * v90) = *(_QWORD *)(v87 + 8 * (v90 - 1));
      *(_QWORD *)(v87 + 96 + 8 * v90) = *(_QWORD *)(v87 + 96 + 8 * (v90 - 1));
      --v90;
    }
    while ((_DWORD)v88 != v90);
  }
  v91 = (_QWORD *)(v87 + 8 * v88);
  *v91 = v5;
  v91[12] = v4;
  *v89 = v31 + 1;
  if ((_DWORD)v29)
  {
    v92 = v30 + 16 * (v29 - 1);
    *(_QWORD *)(*(_QWORD *)v92 + 8 * *(unsigned int *)(v92 + 12)) = *(_QWORD *)(*(_QWORD *)v92
                                                                                + 8 * *(unsigned int *)(v92 + 12)) & 0xFFFFFFFFFFFFFFC0 | v31;
  }
  if (v31 == (_DWORD)v88)
  {
    sub_1C5111404(v7, v29, v4);
    v30 = *(_QWORD *)(v7 + 8);
    v87 = *(_QWORD *)(v30 + 16 * v29);
  }
  v93 = *(_QWORD *)(v87 + 8 * *(unsigned int *)(v30 + 16 * v29 + 12));
  v94 = v30 + 16 * (v29 + 1);
  *(_QWORD *)v94 = v93 & 0xFFFFFFFFFFFFFFC0;
  *(_DWORD *)(v94 + 8) = (v93 & 0x3F) + 1;
  return v10;
}

uint64_t sub_1C51126F4(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if ((int)a5 < 1)
  {
    v15 = -a5;
    v16 = 8 - a4;
    if (v15 < a2)
      LODWORD(v17) = -a5;
    else
      LODWORD(v17) = a2;
    if (v16 >= v17)
      v17 = v17;
    else
      v17 = v16;
    if ((_DWORD)v17)
    {
      v18 = (uint64_t *)(a1 + 128);
      v19 = (uint64_t *)(a1 + 8);
      v20 = v17;
      do
      {
        v21 = (_QWORD *)(a3 + 16 * a4);
        *v21 = *(v19 - 1);
        v23 = *v19;
        v19 += 2;
        v22 = v23;
        v24 = *v18++;
        v21[1] = v22;
        *(_QWORD *)(a3 + 8 * a4++ + 128) = v24;
        --v20;
      }
      while (v20);
    }
    if (a2 != (_DWORD)v17)
    {
      v25 = 0;
      if (a2 < (unint64_t)v15)
        v15 = a2;
      if (v15 < v16)
        v16 = v15;
      do
      {
        *(_OWORD *)(a1 + 16 * v25) = *(_OWORD *)(a1 + 16 * (v16 + v25));
        *(_QWORD *)(a1 + 8 * v25 + 128) = *(_QWORD *)(a1 + 8 * (v16 + v25) + 128);
        ++v25;
      }
      while (a2 - (_DWORD)v17 != (_DWORD)v25);
    }
    return -(int)v17;
  }
  else
  {
    v5 = 8 - a2;
    if (a4 >= a5)
      LODWORD(v6) = a5;
    else
      LODWORD(v6) = a4;
    if (v5 >= v6)
      v6 = v6;
    else
      v6 = v5;
    if (a2)
    {
      v7 = a2 - 1;
      v8 = -a2;
      v9 = a5;
      if (a5 >= (unint64_t)a4)
        v9 = a4;
      if (v9 < v5)
        v5 = v9;
      do
      {
        *(_OWORD *)(a1 + 16 * (v5 + v7)) = *(_OWORD *)(a1 + 16 * v7);
        *(_QWORD *)(a1 + 8 * (v5 + v7) + 128) = *(_QWORD *)(a1 + 8 * v7 + 128);
        --v7;
        v10 = __CFADD__(v8++, 1);
      }
      while (!v10);
    }
    if ((_DWORD)v6)
    {
      v11 = (_QWORD *)(a1 + 128);
      v12 = (_QWORD *)(a1 + 8);
      v13 = -(int)v6;
      do
      {
        v14 = (_QWORD *)(a3 + 16 * (a4 + v13));
        *(v12 - 1) = *v14;
        *v12 = v14[1];
        v12 += 2;
        *v11++ = *(_QWORD *)(a3 + 8 * (a4 + v13) + 128);
        v10 = __CFADD__(v13++, 1);
      }
      while (!v10);
    }
  }
  return v6;
}

_QWORD *llvm::LivePhysRegs::removeRegsInMask(_QWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  _WORD *v13;

  v3 = result[2];
  if (v3)
  {
    v6 = result;
    v7 = (_WORD *)result[1];
    v8 = a3 + 16;
    v9 = v7;
    do
    {
      v10 = (unsigned __int16)*v9;
      if (((*(_DWORD *)(*(_QWORD *)(a2 + 16) + ((v10 >> 3) & 0x1FFC)) >> v10) & 1) != 0)
      {
        ++v9;
      }
      else
      {
        if (a3)
        {
          v11 = *(unsigned int *)(a3 + 8);
          if (v11 >= *(unsigned int *)(a3 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v8, v11 + 1, 16);
            v11 = *(unsigned int *)(a3 + 8);
          }
          v12 = (unint64_t *)(*(_QWORD *)a3 + 16 * v11);
          *v12 = v10;
          v12[1] = a2;
          ++*(_DWORD *)(a3 + 8);
          v7 = (_WORD *)v6[1];
          v3 = v6[2];
        }
        v13 = &v7[v3 - 1];
        if (v13 != v9)
        {
          *v9 = *v13;
          *(_BYTE *)(v6[6] + (unsigned __int16)*v13) = ((_DWORD)v9 - (_DWORD)v7) >> 1;
          v7 = (_WORD *)v6[1];
          v3 = v6[2];
        }
        v6[2] = --v3;
      }
    }
    while (v9 != &v7[v3]);
  }
  return result;
}

_QWORD *llvm::LivePhysRegs::removeDefs(llvm::LivePhysRegs *this, const llvm::MachineInstr *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  _BYTE v23[24];
  _BYTE *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[24];
  _BYTE *v30;
  _OWORD v31[4];
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;
  __int128 v35;
  _BYTE v36[24];
  _BYTE *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  sub_1C5112D00((unint64_t)a2, (uint64_t)v31);
  v25 = v31[0];
  v26 = v31[1];
  v27 = v31[2];
  v28 = v31[3];
  v3 = v29;
  if (v33)
  {
    if (v33 == v32)
    {
      v30 = v29;
      (*(void (**)(void))(*(_QWORD *)v33 + 24))();
    }
    else
    {
      v30 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v33 + 16))();
    }
  }
  else
  {
    v30 = 0;
  }
  v21 = v34;
  v22 = v35;
  v4 = v23;
  if (v37)
  {
    if (v37 == v36)
    {
      v24 = v23;
      (*(void (**)(void))(*(_QWORD *)v37 + 24))();
    }
    else
    {
      v24 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v37 + 16))();
    }
  }
  else
  {
    v24 = 0;
  }
LABEL_11:
  v5 = v26;
  if ((_QWORD)v25 != v21
    || (_QWORD)v26 != (_QWORD)v22
    && ((_QWORD)v26 == *((_QWORD *)&v26 + 1) ? (v6 = (_QWORD)v22 == *((_QWORD *)&v22 + 1)) : (v6 = 0), !v6))
  {
    if (*(_DWORD *)v26 == 12)
    {
      llvm::LivePhysRegs::removeRegsInMask(this, v26, 0);
    }
    else if ((*(_DWORD *)v26 & 0x1000000) != 0)
    {
      sub_1C61E2FF4((uint64_t *)this, *(unsigned __int16 *)(v26 + 4));
    }
    v7 = *((_QWORD *)&v26 + 1);
    v8 = v26 + 32;
    *(_QWORD *)&v26 = v8;
    if (v8 == *((_QWORD *)&v26 + 1))
    {
      v10 = *(_QWORD *)(v25 + 8);
      if (v10 == *((_QWORD *)&v25 + 1))
      {
        v9 = v8;
      }
      else
      {
        v9 = v8;
        if ((*(_WORD *)(v10 + 44) & 4) != 0)
        {
          do
          {
            v9 = *(_QWORD *)(v10 + 32);
            v11 = *(unsigned int *)(v10 + 40);
            v7 = v9 + 32 * v11;
            if ((_DWORD)v11)
            {
              *(_QWORD *)&v26 = *(_QWORD *)(v10 + 32);
              *((_QWORD *)&v26 + 1) = v9 + 32 * v11;
              *(_QWORD *)&v25 = v10;
              goto LABEL_31;
            }
            v10 = *(_QWORD *)(v10 + 8);
          }
          while (v10 != *((_QWORD *)&v25 + 1) && (*(_WORD *)(v10 + 44) & 4) != 0);
          *(_QWORD *)&v26 = v9;
          *((_QWORD *)&v26 + 1) = v9 + 32 * v11;
          v8 = *((_QWORD *)&v26 + 1);
        }
      }
      *(_QWORD *)&v25 = *((_QWORD *)&v25 + 1);
      v7 = v8;
    }
    else
    {
      v9 = v8;
    }
    while (1)
    {
      do
      {
LABEL_31:
        if ((_QWORD)v25 == (_QWORD)v27 && (v9 == (_QWORD)v28 || v9 == v7 && (_QWORD)v28 == *((_QWORD *)&v28 + 1)))
          goto LABEL_11;
        if (!v30)
        {
          sub_1C485C2F0();
          goto LABEL_67;
        }
        if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v30 + 48))(v30) & 1) != 0)
          goto LABEL_11;
        v7 = *((_QWORD *)&v26 + 1);
        v9 = v26 + 32;
        *(_QWORD *)&v26 = v9;
      }
      while (v9 != *((_QWORD *)&v26 + 1));
      v12 = *(_QWORD *)(v25 + 8);
      if (v12 == *((_QWORD *)&v25 + 1))
      {
        v13 = v9;
LABEL_37:
        *(_QWORD *)&v25 = *((_QWORD *)&v25 + 1);
        v7 = v9;
        v9 = v13;
      }
      else
      {
        v13 = v9;
        if ((*(_WORD *)(v12 + 44) & 4) == 0)
          goto LABEL_37;
        while (1)
        {
          v13 = *(_QWORD *)(v12 + 32);
          v14 = *(unsigned int *)(v12 + 40);
          v7 = v13 + 32 * v14;
          if ((_DWORD)v14)
            break;
          v12 = *(_QWORD *)(v12 + 8);
          if (v12 == *((_QWORD *)&v25 + 1) || (*(_WORD *)(v12 + 44) & 4) == 0)
          {
            *(_QWORD *)&v26 = v13;
            *((_QWORD *)&v26 + 1) = v13 + 32 * v14;
            v9 = *((_QWORD *)&v26 + 1);
            goto LABEL_37;
          }
        }
        *(_QWORD *)&v26 = *(_QWORD *)(v12 + 32);
        *((_QWORD *)&v26 + 1) = v13 + 32 * v14;
        v9 = v13;
        *(_QWORD *)&v25 = v12;
      }
    }
  }
  if (v24 == v23)
  {
    v15 = 4;
  }
  else
  {
    if (!v24)
      goto LABEL_54;
    v15 = 5;
    v4 = v24;
  }
  (*(void (**)(_QWORD *, _QWORD))(*v4 + 8 * v15))(v4, v26);
LABEL_54:
  if (v30 == v29)
  {
    v16 = 4;
  }
  else
  {
    if (!v30)
      goto LABEL_59;
    v16 = 5;
    v3 = v30;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v3 + 8 * v16))(v3, v5);
LABEL_59:
  v17 = v37;
  if (v37 == v36)
  {
    v18 = 4;
    v17 = v36;
LABEL_61:
    (*(void (**)(void))(*v17 + 8 * v18))();
    goto LABEL_62;
  }
LABEL_67:
  if (v17)
  {
    v18 = 5;
    goto LABEL_61;
  }
LABEL_62:
  result = v33;
  if (v33 == v32)
  {
    v20 = 4;
    result = v32;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
  }
  if (v33)
  {
    v20 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v20))();
  }
  return result;
}

_QWORD *sub_1C5112D00@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (**v10)(_QWORD *);
  _QWORD *result;
  uint64_t (**v12)(_QWORD *);
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v25[0] = &off_1E81433E8;
  v26 = v25;
  v2 = a1;
  if ((*(_WORD *)(a1 + 44) & 4) != 0)
  {
    v2 = a1;
    do
      v2 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v2 + 44) & 4) != 0);
  }
  v3 = *(_QWORD *)(a1 + 24);
  v4 = v3 + 48;
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(unsigned int *)(v2 + 40);
  v7 = v5 + 32 * v6;
  if (!(_DWORD)v6)
  {
    v13 = *(_QWORD *)(v2 + 8);
    if (v13 == v4)
    {
      v2 = v3 + 48;
    }
    else
    {
      v2 = v3 + 48;
      if ((*(_WORD *)(v13 + 44) & 4) != 0)
      {
        do
        {
          v14 = v13;
          v15 = *(unsigned int *)(v13 + 40);
          if ((_DWORD)v15)
          {
            v2 = v13;
            goto LABEL_25;
          }
          v13 = *(_QWORD *)(v13 + 8);
        }
        while (v13 != v4 && (*(_WORD *)(v13 + 44) & 4) != 0);
        v2 = v3 + 48;
LABEL_25:
        v5 = *(_QWORD *)(v14 + 32);
        v7 = v5 + 32 * v15;
      }
    }
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 32) + 32 * *(unsigned int *)(*(_QWORD *)(v3 + 56) + 40);
  *(_QWORD *)&v16 = v2;
  *((_QWORD *)&v16 + 1) = v4;
  v17 = v5;
  v18 = v7;
  v19 = v4;
  v20 = v4;
  v21 = v8;
  v22 = v8;
  v24 = v23;
  v23[0] = &off_1E81433E8;
  sub_1C511399C(&v16, v23, a2);
  v9 = v24;
  if (v24 == v23)
  {
    v10 = (void (**)(_QWORD *))(v23[0] + 32);
    v9 = v23;
LABEL_5:
    (*v10)(v9);
    goto LABEL_6;
  }
  if (v24)
  {
    v10 = (void (**)(_QWORD *))(*v24 + 40);
    goto LABEL_5;
  }
LABEL_6:
  result = v26;
  if (v26 == v25)
  {
    v12 = (uint64_t (**)(_QWORD *))(v25[0] + 32);
    result = v25;
    return (_QWORD *)(*v12)(result);
  }
  if (v26)
  {
    v12 = (uint64_t (**)(_QWORD *))(*v26 + 40);
    return (_QWORD *)(*v12)(result);
  }
  return result;
}

_QWORD *llvm::LivePhysRegs::addUses(llvm::LivePhysRegs *this, const llvm::MachineInstr *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _BYTE v24[24];
  _BYTE *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[24];
  _BYTE *v31;
  _OWORD v32[4];
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  sub_1C5112D00((unint64_t)a2, (uint64_t)v32);
  v26 = v32[0];
  v27 = v32[1];
  v28 = v32[2];
  v29 = v32[3];
  v3 = v30;
  if (v34)
  {
    if (v34 == v33)
    {
      v31 = v30;
      (*(void (**)(void))(*(_QWORD *)v34 + 24))();
    }
    else
    {
      v31 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v34 + 16))();
    }
  }
  else
  {
    v31 = 0;
  }
  v22 = v35;
  v23 = v36;
  v4 = v24;
  if (v38)
  {
    if (v38 == v37)
    {
      v25 = v24;
      (*(void (**)(void))(*(_QWORD *)v38 + 24))();
    }
    else
    {
      v25 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v38 + 16))();
    }
  }
  else
  {
    v25 = 0;
  }
LABEL_11:
  v5 = v27;
  if ((_QWORD)v26 != v22
    || (_QWORD)v27 != (_QWORD)v23
    && ((_QWORD)v27 == *((_QWORD *)&v27 + 1) ? (v6 = (_QWORD)v23 == *((_QWORD *)&v23 + 1)) : (v6 = 0), !v6))
  {
    if ((*(_DWORD *)v27 & 0x300000FF) == 0 && (*(_DWORD *)v27 & 0x10FFF00) != 0x1000000)
    {
      sub_1C61E308C((uint64_t *)this, *(unsigned __int16 *)(v27 + 4));
      v5 = v27;
    }
    v8 = v5 + 32;
    *(_QWORD *)&v27 = v8;
    v9 = *((_QWORD *)&v27 + 1);
    if (v8 == *((_QWORD *)&v27 + 1))
    {
      v11 = *(_QWORD *)(v26 + 8);
      if (v11 == *((_QWORD *)&v26 + 1))
      {
        v10 = v8;
      }
      else
      {
        v10 = v8;
        if ((*(_WORD *)(v11 + 44) & 4) != 0)
        {
          do
          {
            v10 = *(_QWORD *)(v11 + 32);
            v12 = *(unsigned int *)(v11 + 40);
            v9 = v10 + 32 * v12;
            if ((_DWORD)v12)
            {
              *(_QWORD *)&v27 = *(_QWORD *)(v11 + 32);
              *((_QWORD *)&v27 + 1) = v10 + 32 * v12;
              *(_QWORD *)&v26 = v11;
              goto LABEL_32;
            }
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != *((_QWORD *)&v26 + 1) && (*(_WORD *)(v11 + 44) & 4) != 0);
          *(_QWORD *)&v27 = v10;
          *((_QWORD *)&v27 + 1) = v10 + 32 * v12;
          v8 = *((_QWORD *)&v27 + 1);
        }
      }
      *(_QWORD *)&v26 = *((_QWORD *)&v26 + 1);
      v9 = v8;
    }
    else
    {
      v10 = v8;
    }
    while (1)
    {
      do
      {
LABEL_32:
        if ((_QWORD)v26 == (_QWORD)v28 && (v10 == (_QWORD)v29 || v10 == v9 && (_QWORD)v29 == *((_QWORD *)&v29 + 1)))
          goto LABEL_11;
        if (!v31)
        {
          sub_1C485C2F0();
          goto LABEL_68;
        }
        if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v31 + 48))(v31) & 1) != 0)
          goto LABEL_11;
        v9 = *((_QWORD *)&v27 + 1);
        v10 = v27 + 32;
        *(_QWORD *)&v27 = v10;
      }
      while (v10 != *((_QWORD *)&v27 + 1));
      v13 = *(_QWORD *)(v26 + 8);
      if (v13 == *((_QWORD *)&v26 + 1))
      {
        v14 = v10;
LABEL_38:
        *(_QWORD *)&v26 = *((_QWORD *)&v26 + 1);
        v9 = v10;
        v10 = v14;
      }
      else
      {
        v14 = v10;
        if ((*(_WORD *)(v13 + 44) & 4) == 0)
          goto LABEL_38;
        while (1)
        {
          v14 = *(_QWORD *)(v13 + 32);
          v15 = *(unsigned int *)(v13 + 40);
          v9 = v14 + 32 * v15;
          if ((_DWORD)v15)
            break;
          v13 = *(_QWORD *)(v13 + 8);
          if (v13 == *((_QWORD *)&v26 + 1) || (*(_WORD *)(v13 + 44) & 4) == 0)
          {
            *(_QWORD *)&v27 = v14;
            *((_QWORD *)&v27 + 1) = v14 + 32 * v15;
            v10 = *((_QWORD *)&v27 + 1);
            goto LABEL_38;
          }
        }
        *(_QWORD *)&v27 = *(_QWORD *)(v13 + 32);
        *((_QWORD *)&v27 + 1) = v14 + 32 * v15;
        v10 = v14;
        *(_QWORD *)&v26 = v13;
      }
    }
  }
  if (v25 == v24)
  {
    v16 = 4;
  }
  else
  {
    if (!v25)
      goto LABEL_55;
    v16 = 5;
    v4 = v25;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v16))(v4);
LABEL_55:
  if (v31 == v30)
  {
    v17 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_60;
    v17 = 5;
    v3 = v31;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v17))(v3);
LABEL_60:
  v18 = v38;
  if (v38 == v37)
  {
    v19 = 4;
    v18 = v37;
LABEL_62:
    (*(void (**)(void))(*v18 + 8 * v19))();
    goto LABEL_63;
  }
LABEL_68:
  if (v18)
  {
    v19 = 5;
    goto LABEL_62;
  }
LABEL_63:
  result = v34;
  if (v34 == v33)
  {
    v21 = 4;
    result = v33;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v21))();
  }
  if (v34)
  {
    v21 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v21))();
  }
  return result;
}

uint64_t llvm::LivePhysRegs::stepForward(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v4 = (uint64_t *)result;
  v5 = a2;
  if ((*(_WORD *)(a2 + 44) & 4) != 0)
  {
    v5 = a2;
    do
      v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v5 + 44) & 4) != 0);
  }
  v6 = *(_QWORD *)(a2 + 24) + 48;
  v7 = *(unsigned int **)(v5 + 32);
  v8 = *(unsigned int *)(v5 + 40);
  v9 = &v7[8 * v8];
  if (!(_DWORD)v8)
  {
    v23 = *(_QWORD *)(v5 + 8);
    if (v23 == v6)
    {
      v5 = *(_QWORD *)(a2 + 24) + 48;
    }
    else
    {
      v5 = *(_QWORD *)(a2 + 24) + 48;
      if ((*(_WORD *)(v23 + 44) & 4) != 0)
      {
        do
        {
          v24 = v23;
          v25 = *(unsigned int *)(v23 + 40);
          if ((_DWORD)v25)
          {
            v5 = v23;
            goto LABEL_48;
          }
          v23 = *(_QWORD *)(v23 + 8);
        }
        while (v23 != v6 && (*(_WORD *)(v23 + 44) & 4) != 0);
        v5 = *(_QWORD *)(a2 + 24) + 48;
LABEL_48:
        v7 = *(unsigned int **)(v24 + 32);
        v9 = &v7[8 * v25];
      }
    }
  }
  while (v7 != v9)
  {
    v10 = *v7;
    if (*v7 == 12)
    {
      result = (uint64_t)llvm::LivePhysRegs::removeRegsInMask(v4, (unint64_t)v7, a3);
    }
    else if (!*v7 && (v10 & 0x80000000) == 0)
    {
      v11 = v7[1];
      if (v11 - 1 <= 0x3FFFFFFE)
      {
        if ((v10 & 0x1000000) != 0)
        {
          v15 = *(unsigned int *)(a3 + 8);
          if (v15 >= *(unsigned int *)(a3 + 12))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 16);
            v15 = *(unsigned int *)(a3 + 8);
          }
          v16 = (_QWORD *)(*(_QWORD *)a3 + 16 * v15);
          *v16 = (unsigned __int16)v11;
          v16[1] = v7;
          ++*(_DWORD *)(a3 + 8);
        }
        else if (((v10 >> 26) & ~HIBYTE(v10) & 1) != 0)
        {
          result = sub_1C61E2FF4(v4, (unsigned __int16)v7[1]);
        }
      }
    }
    v7 += 8;
    if (v7 == v9)
    {
      v12 = *(_QWORD *)(v5 + 8);
      if (v12 == v6)
        break;
      v7 = v9;
      v5 = v6;
      if ((*(_WORD *)(v12 + 44) & 4) != 0)
      {
        while (1)
        {
          v13 = v12;
          v14 = *(unsigned int *)(v12 + 40);
          if ((_DWORD)v14)
            break;
          v12 = *(_QWORD *)(v12 + 8);
          if (v12 == v6 || (*(_WORD *)(v12 + 44) & 4) == 0)
          {
            v5 = v6;
            goto LABEL_20;
          }
        }
        v5 = v12;
LABEL_20:
        v7 = *(unsigned int **)(v13 + 32);
        v9 = &v7[8 * v14];
      }
    }
  }
  v17 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v17)
  {
    v18 = *(unsigned __int16 **)a3;
    v19 = &v18[8 * v17];
    do
    {
      v20 = *v18;
      v21 = *((_QWORD *)v18 + 1);
      if (*(_DWORD *)v21 == 12)
      {
        if (((*(_DWORD *)(*(_QWORD *)(v21 + 16) + 4 * (v20 >> 5)) >> v20) & 1) == 0)
          goto LABEL_35;
      }
      else
      {
        if (*(_DWORD *)v21)
          v22 = 0;
        else
          v22 = (~*(_DWORD *)v21 & 0x5000000) == 0;
        if (v22)
          goto LABEL_35;
      }
      result = (uint64_t)sub_1C61E308C(v4, v20);
LABEL_35:
      v18 += 8;
    }
    while (v18 != v19);
  }
  return result;
}

uint64_t *llvm::LivePhysRegs::addLiveIns(llvm::LivePhysRegs *this, const llvm::MachineFunction **a2)
{
  llvm::LivePhysRegs::addPristines(this, a2[4]);
  return llvm::LivePhysRegs::addBlockLiveIns(this, (unsigned __int16 **)a2);
}

void llvm::recomputeLivenessFlags(llvm *this, llvm::MachineBasicBlock *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t i;
  unint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  llvm::MachineRegisterInfo *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  _BYTE v41[16];
  void *v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 4);
  v36 = *(llvm::MachineRegisterInfo **)(v3 + 40);
  v4 = (*(uint64_t (**)(_QWORD, llvm::MachineBasicBlock *))(**(_QWORD **)(*(_QWORD *)v36 + 16) + 176))(*(_QWORD *)(*(_QWORD *)v36 + 16), a2);
  v35 = *(_QWORD *)(v3 + 56);
  v42 = 0;
  v43 = 0;
  v38 = v4;
  v39 = v41;
  v40 = xmmword_1C6464ED0;
  v5 = *(_DWORD *)(v4 + 16);
  if (v5)
  {
    v6 = malloc_type_calloc(*(unsigned int *)(v4 + 16), 1uLL, 0x6D9A4F0CuLL);
    if (!v6)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v42 = v6;
    v43 = v5;
  }
  llvm::LivePhysRegs::addLiveOutsNoPristines((llvm::LivePhysRegs *)&v38, this);
  v37 = (char *)this + 48;
  v7 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFF8;
  if (!v7 || (*(_BYTE *)v7 & 4) == 0)
  {
    while ((*(_WORD *)(v7 + 44) & 4) != 0)
      v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((char *)v7 == v37)
    goto LABEL_95;
  do
  {
    v8 = v7;
    if ((*(_WORD *)(v7 + 44) & 4) != 0)
    {
      v8 = v7;
      do
        v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v8 + 44) & 4) != 0);
    }
    v9 = *(_QWORD *)(v7 + 24) + 48;
    v10 = *(unsigned int **)(v8 + 32);
    v11 = *(unsigned int *)(v8 + 40);
    v12 = &v10[8 * v11];
    if (!(_DWORD)v11)
    {
      v13 = *(_QWORD *)(v8 + 8);
      if (v13 == v9)
      {
        v8 = *(_QWORD *)(v7 + 24) + 48;
        goto LABEL_25;
      }
      v8 = *(_QWORD *)(v7 + 24) + 48;
      if ((*(_WORD *)(v13 + 44) & 4) != 0)
      {
        do
        {
          v14 = v13;
          v15 = *(unsigned int *)(v13 + 40);
          if ((_DWORD)v15)
            goto LABEL_23;
          v13 = *(_QWORD *)(v13 + 8);
        }
        while (v13 != v9 && (*(_WORD *)(v13 + 44) & 4) != 0);
LABEL_22:
        v8 = v9;
LABEL_24:
        v10 = *(unsigned int **)(v14 + 32);
        v12 = &v10[8 * v15];
      }
    }
LABEL_25:
    while (v10 != v12)
    {
      if ((*v10 & 0x810000FF) != 0x1000000)
        goto LABEL_28;
      v16 = v10[1];
      if (!v16)
        goto LABEL_28;
      v18 = llvm::LivePhysRegs::available((llvm::LivePhysRegs *)&v38, v36, (unsigned __int16)v10[1]);
      v19 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8);
      if ((*(_WORD *)(v7 + 44) & 0xC) != 0 && (*(_WORD *)(v7 + 44) & 4) == 0)
      {
        v22 = v7;
        if ((v19 & 0x20) == 0)
        {
          while ((*(_WORD *)(v22 + 44) & 8) != 0)
          {
            v22 = *(_QWORD *)(v22 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v22 + 16) + 8) & 0x20) != 0)
              goto LABEL_37;
          }
          goto LABEL_48;
        }
LABEL_37:
        if (*(_BYTE *)(v35 + 104))
        {
          for (i = *(_QWORD *)(v35 + 80); i != *(_QWORD *)(v35 + 88); i += 12)
          {
            if (*(_DWORD *)i == v16)
            {
              LOBYTE(v18) = *(_BYTE *)(i + 8) ^ 1;
              break;
            }
          }
          v18 &= 1u;
        }
        goto LABEL_48;
      }
      if ((v19 & 0x20) != 0)
        goto LABEL_37;
LABEL_48:
      if (v18)
        v23 = 0x4000000;
      else
        v23 = 0;
      *v10 = *v10 & 0xFBFFFFFF | v23;
LABEL_28:
      v10 += 8;
      if (v10 == v12)
      {
        v17 = *(_QWORD *)(v8 + 8);
        if (v17 == v9)
          break;
        v10 = v12;
        v8 = v9;
        if ((*(_WORD *)(v17 + 44) & 4) != 0)
        {
          while (1)
          {
            v14 = v17;
            v15 = *(unsigned int *)(v17 + 40);
            if ((_DWORD)v15)
              break;
            v17 = *(_QWORD *)(v17 + 8);
            if (v17 == v9 || (*(_WORD *)(v17 + 44) & 4) == 0)
              goto LABEL_22;
          }
LABEL_23:
          v8 = v14;
          goto LABEL_24;
        }
      }
    }
    llvm::LivePhysRegs::removeDefs((llvm::LivePhysRegs *)&v38, (const llvm::MachineInstr *)v7);
    v24 = v7;
    if ((*(_WORD *)(v7 + 44) & 4) != 0)
    {
      v24 = v7;
      do
        v24 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v24 + 44) & 4) != 0);
    }
    v25 = *(_QWORD *)(v7 + 24) + 48;
    v26 = *(unsigned int **)(v24 + 32);
    v27 = *(unsigned int *)(v24 + 40);
    v28 = &v26[8 * v27];
    if (!(_DWORD)v27)
    {
      v29 = *(_QWORD *)(v24 + 8);
      if (v29 == v25)
      {
        v24 = *(_QWORD *)(v7 + 24) + 48;
        goto LABEL_71;
      }
      v24 = *(_QWORD *)(v7 + 24) + 48;
      if ((*(_WORD *)(v29 + 44) & 4) != 0)
      {
        do
        {
          v30 = v29;
          v31 = *(unsigned int *)(v29 + 40);
          if ((_DWORD)v31)
            goto LABEL_69;
          v29 = *(_QWORD *)(v29 + 8);
        }
        while (v29 != v25 && (*(_WORD *)(v29 + 44) & 4) != 0);
LABEL_68:
        v24 = v25;
LABEL_70:
        v26 = *(unsigned int **)(v30 + 32);
        v28 = &v26[8 * v31];
      }
    }
LABEL_71:
    while (v26 != v28)
    {
      v32 = (*v26 & 0xB00000FF) != 0 || (*v26 & 0x10FFF00) == 0x1000000;
      if (!v32 && v26[1])
      {
        if (llvm::LivePhysRegs::available((llvm::LivePhysRegs *)&v38, v36, (unsigned __int16)v26[1]))
          v34 = 0x4000000;
        else
          v34 = 0;
        *v26 = *v26 & 0xFBFFFFFF | v34;
      }
      v26 += 8;
      if (v26 == v28)
      {
        v33 = *(_QWORD *)(v24 + 8);
        if (v33 == v25)
          break;
        v26 = v28;
        v24 = v25;
        if ((*(_WORD *)(v33 + 44) & 4) != 0)
        {
          while (1)
          {
            v30 = v33;
            v31 = *(unsigned int *)(v33 + 40);
            if ((_DWORD)v31)
              break;
            v33 = *(_QWORD *)(v33 + 8);
            if (v33 == v25 || (*(_WORD *)(v33 + 44) & 4) == 0)
              goto LABEL_68;
          }
LABEL_69:
          v24 = v30;
          goto LABEL_70;
        }
      }
    }
    llvm::LivePhysRegs::addUses((llvm::LivePhysRegs *)&v38, (const llvm::MachineInstr *)v7);
    v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
    if (!v7 || (*(_BYTE *)v7 & 4) == 0)
    {
      while ((*(_WORD *)(v7 + 44) & 4) != 0)
        v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while ((char *)v7 != v37);
LABEL_95:
  free(v42);
  if (v39 != v41)
    free(v39);
}

_QWORD *sub_1C511399C@<X0>(_OWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  void (**v21)(_QWORD *);
  _QWORD *v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t (**v25)(_QWORD *);
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  _OWORD v31[2];
  _QWORD v32[3];
  _QWORD *v33;
  __int128 v34[4];
  _BYTE v35[24];
  _BYTE *v36;
  _QWORD v37[3];
  _QWORD *v38;
  __int128 v39[4];
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v31[0] = *a1;
  v31[1] = v5;
  v6 = a1 + 2;
  v7 = a1[3];
  v30[0] = a1[2];
  v30[1] = v7;
  v8 = (_QWORD *)a2[3];
  if (v8)
  {
    if (v8 == a2)
    {
      v38 = v37;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v37);
    }
    else
    {
      v38 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v38 = 0;
  }
  sub_1C5113E18((uint64_t *)v39, v31, v30, v37);
  v9 = v6[1];
  v28 = *v6;
  v29 = v9;
  v26 = v28;
  v27 = v9;
  v10 = (_QWORD *)a2[3];
  if (v10)
  {
    if (v10 == a2)
    {
      v33 = v32;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v32);
    }
    else
    {
      v33 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
    }
  }
  else
  {
    v33 = 0;
  }
  sub_1C5113E18((uint64_t *)v34, &v28, &v26, v32);
  sub_1C5113C04(v39, v34, a3);
  v18 = v36;
  if (v36 == v35)
  {
    v19 = 4;
    v18 = v35;
LABEL_9:
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*v18 + 8 * v19))(v18, v11, v12, v13, v14, v15, v16, v17, v26, *((_QWORD *)&v26 + 1), v27, *((_QWORD *)&v27 + 1), v28, *((_QWORD *)&v28 + 1), v29, *((_QWORD *)&v29 + 1));
    goto LABEL_10;
  }
  if (v36)
  {
    v19 = 5;
    goto LABEL_9;
  }
LABEL_10:
  v20 = v33;
  if (v33 == v32)
  {
    v21 = (void (**)(_QWORD *))(v32[0] + 32);
    v20 = v32;
LABEL_12:
    (*v21)(v20);
    goto LABEL_13;
  }
  if (v33)
  {
    v21 = (void (**)(_QWORD *))(*v33 + 40);
    goto LABEL_12;
  }
LABEL_13:
  v22 = v41;
  if (v41 == v40)
  {
    v23 = 4;
    v22 = v40;
LABEL_15:
    (*(void (**)(void))(*v22 + 8 * v23))();
    goto LABEL_16;
  }
  if (v41)
  {
    v23 = 5;
    goto LABEL_15;
  }
LABEL_16:
  result = v38;
  if (v38 == v37)
  {
    v25 = (uint64_t (**)(_QWORD *))(v37[0] + 32);
    result = v37;
    return (_QWORD *)(*v25)(result);
  }
  if (v38)
  {
    v25 = (uint64_t (**)(_QWORD *))(*v38 + 40);
    return (_QWORD *)(*v25)(result);
  }
  return result;
}

void sub_1C5113BB0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81433E8;
}

BOOL sub_1C5113BC4(uint64_t a1, _DWORD *a2)
{
  if (*a2)
    return *a2 == 12;
  if ((*a2 & 0x80000000) != 0)
    return 0;
  return (a2[1] - 1) < 0x3FFFFFFF;
}

uint64_t sub_1C5113C04@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  __int128 *v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[3];
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v19 = *a1;
  v20 = v5;
  v6 = a1[3];
  v21 = a1[2];
  v22 = v6;
  v7 = v23;
  v8 = (__int128 *)*((_QWORD *)a1 + 11);
  if (v8)
  {
    if (v8 == a1 + 4)
    {
      v24 = v23;
      (*(void (**)(__int128 *, _QWORD *))(*(_QWORD *)v8 + 24))(v8, v23);
    }
    else
    {
      v24 = (_QWORD *)*((_QWORD *)a1 + 11);
      *((_QWORD *)a1 + 11) = 0;
    }
  }
  else
  {
    v24 = 0;
  }
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[2];
  v16 = a2[3];
  result = *((_QWORD *)a2 + 11);
  if (result)
  {
    if ((__int128 *)result == a2 + 4)
    {
      v18 = v17;
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 24))(result, v17);
    }
    else
    {
      v18 = (_QWORD *)*((_QWORD *)a2 + 11);
      *((_QWORD *)a2 + 11) = 0;
    }
  }
  else
  {
    v18 = 0;
  }
  v10 = v20;
  *(_OWORD *)a3 = v19;
  *(_OWORD *)(a3 + 16) = v10;
  v11 = v22;
  *(_OWORD *)(a3 + 32) = v21;
  *(_OWORD *)(a3 + 48) = v11;
  if (v24)
  {
    if (v24 == v23)
    {
      *(_QWORD *)(a3 + 88) = a3 + 64;
      result = (*(uint64_t (**)(_QWORD *))(v23[0] + 24))(v23);
    }
    else
    {
      *(_QWORD *)(a3 + 88) = v24;
      v24 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 88) = 0;
  }
  *(_OWORD *)(a3 + 96) = v13;
  *(_OWORD *)(a3 + 112) = v14;
  *(_OWORD *)(a3 + 128) = v15;
  *(_OWORD *)(a3 + 144) = v16;
  if (v18)
  {
    if (v18 == v17)
    {
      *(_QWORD *)(a3 + 184) = a3 + 160;
      (*(void (**)(_QWORD *))(v17[0] + 24))(v17);
      result = (uint64_t)v18;
      if (v18 == v17)
      {
        result = (*(uint64_t (**)(_QWORD *))(v17[0] + 32))(v17);
      }
      else if (v18)
      {
        result = (*(uint64_t (**)(_QWORD *))(*v18 + 40))(v18);
      }
    }
    else
    {
      *(_QWORD *)(a3 + 184) = v18;
      v18 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 184) = 0;
  }
  if (v24 == v23)
  {
    v12 = 4;
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8 * v12))(v7);
  }
  if (v24)
  {
    v12 = 5;
    v7 = v24;
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8 * v12))(v7);
  }
  return result;
}

uint64_t *sub_1C5113E18(uint64_t *a1, _OWORD *a2, _OWORD *a3, _QWORD *a4)
{
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);
  _OWORD v11[2];
  _OWORD v12[2];
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v12[0] = *a2;
  v12[1] = v5;
  v6 = a3[1];
  v11[0] = *a3;
  v11[1] = v6;
  v7 = (_QWORD *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v13);
    }
    else
    {
      v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
  }
  else
  {
    v14 = 0;
  }
  sub_1C5113F0C(a1, v12, v11, (uint64_t)v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = (void (**)(_QWORD *))(v13[0] + 32);
    v8 = v13;
    goto LABEL_10;
  }
  if (v14)
  {
    v9 = (void (**)(_QWORD *))(*v14 + 40);
LABEL_10:
    (*v9)(v8);
  }
  return a1;
}

uint64_t sub_1C5113F0C(uint64_t *a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  unsigned __int16 *v19;

  v5 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v5;
  v6 = a3[1];
  *((_OWORD *)a1 + 2) = *a3;
  *((_OWORD *)a1 + 3) = v6;
  v7 = *(_QWORD *)(a4 + 24);
  if (v7)
  {
    if (v7 == a4)
    {
      a1[11] = (uint64_t)(a1 + 8);
      (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24));
    }
    else
    {
      a1[11] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  else
  {
    a1[11] = 0;
  }
  while (1)
  {
LABEL_6:
    if (*a1 == a1[4])
    {
      v15 = a1[2];
      v16 = a1[6];
      if (v15 == v16 || v15 == a1[3] && v16 == a1[7])
        return (uint64_t)a1;
    }
    v8 = a1[11];
    if (!v8)
      break;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(v8, a1[2]) & 1) != 0)
      return (uint64_t)a1;
    v9 = a1[3];
    v10 = a1[2] + 32;
    a1[2] = v10;
    if (v10 == v9)
    {
      v12 = *a1;
      v11 = a1[1];
      while (1)
      {
        v12 = *(_QWORD *)(v12 + 8);
        if (v12 == v11 || (*(_WORD *)(v12 + 44) & 4) == 0)
          break;
        v13 = *(_QWORD *)(v12 + 32);
        v14 = *(unsigned int *)(v12 + 40);
        a1[2] = v13;
        a1[3] = v13 + 32 * v14;
        if ((_DWORD)v14)
        {
          *a1 = v12;
          goto LABEL_6;
        }
      }
      *a1 = v11;
    }
  }
  sub_1C485C2F0();
  return sub_1C511402C(v18, v19);
}

uint64_t sub_1C511402C(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _WORD *v8;
  _WORD *v9;

  v2 = a1[5];
  v3 = *(unsigned __int8 *)(v2 + *a2);
  v4 = a1[1];
  if (v3 >= v4)
    return 0;
  v5 = *a1;
  while (1)
  {
    v6 = v3;
    if (*(unsigned __int16 *)(v5 + 2 * v3) == *a2)
      break;
    v3 += 256;
    if (v6 + 256 >= v4)
      return 0;
  }
  if (v4 == v3)
    return 0;
  v8 = (_WORD *)(v5 + 2 * v3);
  v9 = (_WORD *)(v5 + 2 * v4 - 2);
  if (v9 != v8)
  {
    *v8 = *v9;
    *(_BYTE *)(v2 + (unsigned __int16)*v9) = v3;
    v4 = a1[1];
  }
  a1[1] = v4 - 1;
  return 1;
}

_OWORD *sub_1C51140B0(void **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _OWORD *v12;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 60)
      sub_1C4764EE4();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v4];
  *(_OWORD *)v11 = *a2;
  v12 = v11 + 16;
  if (v2 != v3)
  {
    do
    {
      *((_OWORD *)v11 - 1) = *((_OWORD *)v2 - 1);
      v11 -= 16;
      v2 -= 16;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

void llvm::LiveRangeCalc::resetLiveOutMap(llvm::LiveRangeCalc *this)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  _OWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  __int128 v27;

  v2 = *(_QWORD *)(*(_QWORD *)this + 112) - *(_QWORD *)(*(_QWORD *)this + 104);
  v3 = v2 >> 3;
  v4 = (_QWORD *)((char *)this + 40);
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = v2 >> 3;
  v5 = (v2 >> 3) + 63;
  if (v5 < 0x40)
  {
    v10 = 0;
    v9 = v2 >> 3;
  }
  else
  {
    v6 = v5 >> 6;
    if (v6 > *((_DWORD *)this + 13))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 40, (uint64_t)this + 56, v6, 8);
      v7 = *((unsigned int *)this + 12);
      LODWORD(v9) = *((_DWORD *)this + 26);
      v8 = *((_DWORD *)this + 12);
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = v2 >> 3;
    }
    bzero((void *)(*((_QWORD *)this + 5) + 8 * v7), 8 * v6);
    v10 = (v8 + v6);
    *((_DWORD *)this + 12) = v10;
  }
  if ((v9 & 0x3F) != 0)
    *(_QWORD *)(*v4 + 8 * v10 - 8) &= ~(-1 << (v9 & 0x3F));
  v11 = *((_DWORD *)this + 30);
  if (v11 || *((_DWORD *)this + 31))
  {
    v20 = (_QWORD *)((char *)this + 112);
    v21 = *((_DWORD *)this + 32);
    if (v21 > 4 * v11 && v21 >= 0x41)
    {
      sub_1C51159E4((uint64_t)v20);
    }
    else
    {
      if (v21)
      {
        v22 = 152 * v21;
        v23 = *v20 + 96;
        do
        {
          v24 = *(_QWORD *)(v23 - 96);
          if (v24 != -4096)
          {
            if (v24 != -8192)
            {
              v25 = *(void **)(v23 - 16);
              if ((void *)v23 != v25)
                free(v25);
              v26 = *(void **)(v23 - 88);
              if ((void *)(v23 - 72) != v26)
                free(v26);
            }
            *(_QWORD *)(v23 - 96) = -4096;
          }
          v23 += 152;
          v22 -= 152;
        }
        while (v22);
      }
      *((_QWORD *)this + 15) = 0;
    }
  }
  v12 = *(_OWORD *)((char *)this + 152);
  v13 = (v2 >> 3);
  v14 = *((unsigned int *)this + 36);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v13 >= v14)
    {
      if (v13 > *((unsigned int *)this + 37))
      {
        v27 = *(_OWORD *)((char *)this + 152);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 136, (uint64_t)this + 152, v13, 16);
        v12 = v27;
      }
      v16 = *((_DWORD *)this + 36);
      if (v15)
      {
        v17 = (_OWORD *)(*((_QWORD *)this + 17) + 16 * *((unsigned int *)this + 36));
        v18 = v14 - v13;
        do
          *v17++ = v12;
        while (!__CFADD__(v18++, 1));
      }
      LODWORD(v3) = v16 + v15;
    }
    *((_DWORD *)this + 36) = v3;
  }
}

void llvm::LiveRangeCalc::reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)a1);
  *(_DWORD *)(a1 + 184) = 0;
}

void llvm::LiveRangeCalc::updateFromLiveIns(llvm::LiveRangeCalc *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[49];

  v22[48] = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v19 = 0;
  v20 = v22;
  v21 = 0x1000000000;
  v2 = *((unsigned int *)this + 46);
  if ((_DWORD)v2)
  {
    v3 = 32 * v2;
    v4 = (_QWORD *)(*((_QWORD *)this + 22) + 24);
    do
    {
      v5 = *(v4 - 2);
      if (v5)
      {
        v6 = *(unsigned int *)(*(_QWORD *)v5 + 24);
        v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 392);
        v8 = *(_QWORD *)(v7 + 16 * v6);
        v9 = *(v4 - 1);
        if (v9 <= 7)
        {
          v9 = *(_QWORD *)(v7 + 16 * v6 + 8);
          v10 = (_QWORD *)(*((_QWORD *)this + 17) + 16 * v6);
          *v10 = *v4;
          v10[1] = 0;
        }
        v11 = (uint64_t *)*(v4 - 3);
        if (v18 != v11 && v19 >= 8)
        {
          v15 = (uint64_t *)*(v4 - 3);
          v16 = v8;
          v14 = v9;
          llvm::LiveRangeUpdater::flush(&v18);
          v9 = v14;
          v11 = v15;
          v8 = v16;
        }
        v18 = v11;
        v13 = *v4;
        v17[0] = v8;
        v17[1] = v9;
        v17[2] = v13;
        llvm::LiveRangeUpdater::add(&v18, (unint64_t)v17);
      }
      v4 += 4;
      v3 -= 32;
    }
    while (v3);
  }
  *((_DWORD *)this + 46) = 0;
  llvm::LiveRangeUpdater::flush(&v18);
  if (v20 != v22)
    free(v20);
}

void llvm::LiveRangeCalc::extend(llvm::LiveRangeCalc *a1, uint64_t *a2, unint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v11 = *((_QWORD *)a1 + 2);
  v12 = (a3 >> 1) & 3;
  v13 = a3 & 0xFFFFFFFFFFFFFFF8;
  if (v12)
    v14 = v13 | (2 * (v12 - 1));
  else
    v14 = *(_QWORD *)v13 | 6;
  v15 = sub_1C499C548(v11, v14);
  v16 = llvm::LiveRange::extendInBlock((uint64_t)a2, a5, a6, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + 392) + 16 * *(unsigned int *)(v15 + 24)), a3);
  if (!(v16 | v18 & 1) && (llvm::LiveRangeCalc::findReachingDefs(a1, a2, v15, a3, v17, a5, a6) & 1) == 0)
  {
    llvm::LiveRangeCalc::updateSSA(a1);
    llvm::LiveRangeCalc::updateFromLiveIns(a1);
  }
}

uint64_t llvm::LiveRangeCalc::findReachingDefs(_QWORD *a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  int v8;
  int v9;
  unsigned int v10;
  char v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  BOOL v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  void *v26;
  unint64_t v27;
  _QWORD *v28;
  _BOOL4 v29;
  void *v30;
  uint64_t v31;
  BOOL v32;
  char v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  BOOL v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  char v50;
  BOOL v51;
  unsigned int v52;
  int v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t *v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  _OWORD *v76;
  _OWORD *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  BOOL v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  _DWORD v100[14];
  void *v101;
  uint64_t v102;
  _DWORD v103[14];
  void *v104;
  uint64_t v105;
  _QWORD v106[6];
  int v107;
  void *v108;
  uint64_t v109;
  _DWORD v110[14];
  uint64_t *v111;
  void *v112[2];
  uint64_t v113;
  void *v114;
  uint64_t v115;
  _BYTE v116[32];
  void *v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  _QWORD v121[10];

  v121[8] = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a3 + 24);
  v119 = v121;
  v120 = 0x1000000000;
  LOBYTE(v9) = 1;
  v91 = v8;
  sub_1C4893E04((char *)&v119, 1uLL, v8);
  v10 = v120;
  if ((_DWORD)v120)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v9 = 1;
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*a1 + 104) + 8 * v119[v12]);
      v15 = *(uint64_t **)(v14 + 64);
      v16 = *(uint64_t **)(v14 + 72);
      v17 = v11 & 1 | (v15 == v16);
      if (v15 != v16)
      {
        do
        {
          v18 = *v15;
          v19 = *(unsigned int *)(*v15 + 24);
          if (((*(_QWORD *)(a1[5] + ((v19 >> 3) & 0x1FFFFFF8)) >> v19) & 1) != 0)
          {
            v20 = *(void **)(a1[17] + 16 * v19);
            if (v20)
            {
              if (v13)
                v21 = v13 == v20;
              else
                v21 = 1;
              v22 = v21;
              v9 &= v22;
              v13 = v20;
            }
          }
          else
          {
            v23 = (uint64_t *)(*(_QWORD *)(a1[2] + 392) + 16 * v19);
            v24 = llvm::LiveRange::extendInBlock((uint64_t)a2, a6, a7, *v23, v23[1]);
            v17 = v17 & 1 | v25 & 1;
            v26 = &unk_1EF8EB220;
            if ((v25 & 1) == 0)
              v26 = (void *)v24;
            v27 = *(unsigned int *)(v18 + 24);
            *(_QWORD *)(a1[5] + ((v27 >> 3) & 0x1FFFFFF8)) |= 1 << v27;
            v28 = (_QWORD *)(a1[17] + 16 * v27);
            *v28 = v26;
            v28[1] = 0;
            v29 = v24 == 0;
            if (v24)
              v30 = (void *)v24;
            else
              v30 = v13;
            if (!v13)
              v29 = 1;
            v21 = v13 == (void *)v24;
            v13 = v30;
            if (v21)
              v29 = 1;
            v9 &= v29;
            if (!(v25 & 1 | (unint64_t)v24))
            {
              if (v18 == a3)
              {
                a4 = 0;
              }
              else
              {
                v31 = v120;
                if (v120 >= (unint64_t)HIDWORD(v120))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)v121, v120 + 1, 4);
                  v31 = v120;
                }
                v119[v31] = v27;
                LODWORD(v120) = v120 + 1;
              }
            }
          }
          ++v15;
        }
        while (v15 != v16);
        v10 = v120;
      }
      ++v12;
      v11 = v17 & 1;
    }
    while (v10 != v12);
  }
  else
  {
    v13 = 0;
    v11 = 0;
  }
  *((_DWORD *)a1 + 46) = 0;
  if (v13)
    v32 = v13 == &unk_1EF8EB220;
  else
    v32 = 1;
  if (v32)
    v11 = 1;
  v33 = (v11 ^ 1) & v9;
  if (a7)
    LOBYTE(v9) = v33;
  if (v10 >= 5)
    qsort(v119, v10, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1C4AB967C);
  if ((v9 & 1) != 0)
  {
    v111 = a2;
    v112[0] = 0;
    v114 = v116;
    v115 = 0x1000000000;
    if ((_DWORD)v120)
    {
      v34 = v119;
      v35 = 4 * v120;
      do
      {
        v36 = *v34;
        v37 = *(_QWORD *)(a1[2] + 392);
        v38 = *(void **)(v37 + 16 * v36);
        v39 = (_DWORD)v36 == v91 && a4 > 7;
        v40 = a4;
        if (!v39)
        {
          v40 = *(_QWORD *)(v37 + 16 * v36 + 8);
          v41 = (_QWORD *)(a1[17] + 16 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*a1 + 104) + 8 * v36) + 24));
          *v41 = v13;
          v41[1] = 0;
        }
        v104 = v38;
        v105 = v40;
        v106[0] = v13;
        llvm::LiveRangeUpdater::add(&v111, (unint64_t)&v104);
        ++v34;
        v35 -= 4;
      }
      while (v35);
    }
    llvm::LiveRangeUpdater::flush(&v111);
    if (v114 != v116)
      free(v114);
    goto LABEL_119;
  }
  v101 = v103;
  v102 = 0x600000000;
  v103[12] = 0;
  v98 = v100;
  v99 = 0x600000000;
  v100[12] = 0;
  v104 = v106;
  v105 = 0x600000000;
  v107 = 0;
  v108 = v110;
  v109 = 0x600000000;
  v110[12] = 0;
  v111 = a2;
  sub_1C511586C((uint64_t)v112, (uint64_t)&v104);
  v42 = (uint64_t)(a1 + 14);
  v43 = a1[14];
  v44 = *((_DWORD *)a1 + 32);
  if (v44)
  {
    v45 = ((v111 >> 4) ^ (v111 >> 9)) & (v44 - 1);
    v46 = v43 + 152 * v45;
    v47 = *(uint64_t **)v46;
    if (v111 == *(uint64_t **)v46)
    {
      v50 = 1;
      goto LABEL_75;
    }
    v48 = 0;
    v49 = 1;
    v50 = 1;
    while (v47 != (uint64_t *)-4096)
    {
      if (v48)
        v51 = 0;
      else
        v51 = v47 == (uint64_t *)-8192;
      if (v51)
        v48 = v46;
      v52 = v45 + v49++;
      v45 = v52 & (v44 - 1);
      v46 = v43 + 152 * v45;
      v47 = *(uint64_t **)v46;
      if (v111 == *(uint64_t **)v46)
        goto LABEL_75;
    }
    if (v48)
      v46 = v48;
  }
  else
  {
    v46 = 0;
  }
  v53 = *((_DWORD *)a1 + 30);
  if (4 * v53 + 4 >= 3 * v44)
  {
    sub_1C5115BE0(v42, 2 * v44);
    v81 = a1[14];
    v54 = v111;
    v82 = *((_DWORD *)a1 + 32) - 1;
    v83 = ((v111 >> 4) ^ (v111 >> 9)) & v82;
    v46 = v81 + 152 * v83;
    v84 = *(uint64_t **)v46;
    if (v111 == *(uint64_t **)v46)
      goto LABEL_72;
    v85 = 0;
    v86 = 1;
    while (v84 != (uint64_t *)-4096)
    {
      if (v85)
        v87 = 0;
      else
        v87 = v84 == (uint64_t *)-8192;
      if (v87)
        v85 = v46;
      v88 = v83 + v86++;
      v83 = v88 & v82;
      v46 = v81 + 152 * v83;
      v84 = *(uint64_t **)v46;
      if (v111 == *(uint64_t **)v46)
        goto LABEL_72;
    }
    if (v85)
      v46 = v85;
  }
  else if (v44 + ~v53 - *((_DWORD *)a1 + 31) <= v44 >> 3)
  {
    sub_1C5115BE0(v42, v44);
    v97 = 0;
    sub_1C5115B5C(a1[14], *((_DWORD *)a1 + 32), (uint64_t)v111, &v97);
    v46 = v97;
  }
  v54 = *(uint64_t **)v46;
LABEL_72:
  ++*((_DWORD *)a1 + 30);
  if (v54 != (uint64_t *)-4096)
    --*((_DWORD *)a1 + 31);
  *(_QWORD *)v46 = v111;
  sub_1C511586C(v46 + 8, (uint64_t)v112);
  v50 = 0;
LABEL_75:
  if (v117 != &v118)
    free(v117);
  if (v112[0] != &v113)
    free(v112[0]);
  v55 = a1 + 22;
  if (v108 != v110)
    free(v108);
  if (v104 != v106)
    free(v104);
  if (v98 != v100)
    free(v98);
  if (v101 != v103)
    free(v101);
  if ((v50 & 1) != 0)
    goto LABEL_110;
  v56 = (*(_QWORD *)(*a1 + 112) - *(_QWORD *)(*a1 + 104)) >> 3;
  v57 = *(unsigned int *)(v46 + 16);
  if ((*(_DWORD *)(v46 + 72) & 0x3F) != 0)
  {
    v89 = *(_QWORD *)(v46 + 8) + 8 * v57;
    *(_QWORD *)(v89 - 8) &= ~(-1 << (*(_DWORD *)(v46 + 72) & 0x3F));
  }
  v58 = v57;
  v59 = (_QWORD *)(v46 + 8);
  *(_DWORD *)(v46 + 72) = v56;
  v60 = (v56 + 63) >> 6;
  if ((_DWORD)v57 != (v56 + 63) >> 6)
  {
    if (v57 <= v60)
    {
      v61 = v57;
      if (v60 > *(_DWORD *)(v46 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v46 + 8, v46 + 24, v60, 8);
        v61 = *(unsigned int *)(v46 + 16);
        v58 = *(_DWORD *)(v46 + 16);
      }
      if (v60 != v57)
        bzero((void *)(*v59 + 8 * v61), 8 * (v60 - v57));
      v58 += v60 - v57;
      *(_DWORD *)(v46 + 16) = v58;
      v62 = *(_DWORD *)(v46 + 72);
      goto LABEL_97;
    }
    *(_DWORD *)(v46 + 16) = v60;
    v58 = (v56 + 63) >> 6;
  }
  LOBYTE(v62) = v56;
LABEL_97:
  v63 = v62 & 0x3F;
  if (v63)
    *(_QWORD *)(*v59 + 8 * v58 - 8) &= ~(-1 << v63);
  v64 = *(unsigned int *)(v46 + 88);
  if ((*(_DWORD *)(v46 + 144) & 0x3F) != 0)
  {
    v90 = *(_QWORD *)(v46 + 80) + 8 * v64;
    *(_QWORD *)(v90 - 8) &= ~(-1 << (*(_DWORD *)(v46 + 144) & 0x3F));
  }
  v65 = v64;
  v66 = (_QWORD *)(v46 + 80);
  *(_DWORD *)(v46 + 144) = v56;
  if ((_DWORD)v64 != (_DWORD)v60)
  {
    if (v64 > v60)
    {
      *(_DWORD *)(v46 + 88) = v60;
    }
    else
    {
      v67 = v64;
      if (v60 > *(_DWORD *)(v46 + 92))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v46 + 80, v46 + 96, v60, 8);
        v67 = *(unsigned int *)(v46 + 88);
        v65 = *(_DWORD *)(v46 + 88);
      }
      if (v60 != v64)
        bzero((void *)(*v66 + 8 * v67), 8 * (v60 - v64));
      LODWORD(v60) = v65 + v60 - v64;
      *(_DWORD *)(v46 + 88) = v60;
      LODWORD(v56) = *(_DWORD *)(v46 + 144);
    }
  }
  v55 = a1 + 22;
  if ((v56 & 0x3F) != 0)
    *(_QWORD *)(*v66 + 8 * v60 - 8) &= ~(-1 << (v56 & 0x3F));
LABEL_110:
  v68 = v120;
  if (*((_DWORD *)a1 + 47) < v120)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v55, (uint64_t)(a1 + 24), v120, 32);
    v68 = v120;
  }
  if (v68)
  {
    v69 = (uint64_t *)(v46 + 8);
    v70 = (uint64_t *)(v46 + 80);
    v71 = v119;
    v72 = 4 * v68;
    do
    {
      v73 = *(_QWORD *)(*a1 + 104);
      v74 = *(_QWORD *)(v73 + 8 * *v71);
      if (!a7
        || llvm::LiveRangeCalc::isDefOnEntry(a1, (uint64_t)a2, a6, a7, *(_QWORD *)(v73 + 8 * *v71), v69, v70))
      {
        v75 = (void *)sub_1C49FA70C(a1[3], v74);
        v111 = a2;
        v112[0] = v75;
        v112[1] = 0;
        v113 = 0;
        v76 = (_OWORD *)sub_1C47C0F60((uint64_t)v55, (unint64_t)&v111, 1);
        v77 = (_OWORD *)(a1[22] + 32 * *((unsigned int *)a1 + 46));
        v78 = v76[1];
        *v77 = *v76;
        v77[1] = v78;
        v79 = (*((_DWORD *)a1 + 46) + 1);
        *((_DWORD *)a1 + 46) = v79;
        if (v74 == a3)
          *(_QWORD *)(*v55 + 32 * v79 - 16) = a4;
      }
      ++v71;
      v72 -= 4;
    }
    while (v72);
  }
LABEL_119:
  if (v119 != (_DWORD *)v121)
    free(v119);
  return v9 & 1;
}

void llvm::LiveRangeCalc::calculateValues(llvm::LiveRangeCalc *this)
{
  llvm::LiveRangeCalc::updateSSA(this);
  llvm::LiveRangeCalc::updateFromLiveIns(this);
}

void llvm::LiveRangeCalc::updateSSA(llvm::LiveRangeCalc *this)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void **v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t *v47;
  __int128 v48;
  unint64_t v49;
  _QWORD v50[3];

  do
  {
    v2 = *((unsigned int *)this + 46);
    if (!(_DWORD)v2)
      break;
    v3 = 0;
    v4 = (uint64_t *)*((_QWORD *)this + 22);
    v47 = &v4[4 * v2];
    do
    {
      v5 = (uint64_t *)v4[1];
      if (!v5)
        goto LABEL_51;
      v7 = *v5;
      v6 = v5[1];
      if (!v6)
      {
        v9 = *((_QWORD *)this + 17);
LABEL_43:
        v34 = *(unsigned int *)(v7 + 24);
LABEL_45:
        v46 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 392) + 16 * v34);
        v35 = *v4;
        v36 = sub_1C484358C(*((_QWORD *)this + 4), 16, 3);
        v37 = v46;
        v38 = v36;
        v39 = *(unsigned int *)(v35 + 72);
        v40 = *(unsigned int *)(v35 + 76);
        *(_DWORD *)v36 = v39;
        *(_QWORD *)(v36 + 8) = v46;
        if (v39 >= v40)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v35 + 64, v35 + 80, v39 + 1, 8);
          v37 = v46;
          v39 = *(unsigned int *)(v35 + 72);
        }
        *(_QWORD *)(*(_QWORD *)(v35 + 64) + 8 * v39) = v38;
        ++*(_DWORD *)(v35 + 72);
        v4[3] = v38;
        v4[1] = 0;
        v41 = v4[2];
        if (v41 < 8)
        {
          v48 = v37;
          v49 = v38;
          llvm::LiveRange::addSegment(v35, (uint64_t)&v48);
          *(_QWORD *)(v9 + 16 * v34) = v38;
          *(_QWORD *)(v9 + 16 * v34 + 8) = v5;
        }
        else
        {
          v50[0] = v46;
          v50[1] = v41;
          v50[2] = v38;
          llvm::LiveRange::addSegment(v35, (uint64_t)v50);
        }
LABEL_50:
        v3 = 1;
        goto LABEL_51;
      }
      v8 = *(unsigned int *)(*(_QWORD *)v6 + 24);
      v9 = *((_QWORD *)this + 17);
      if (((*(_QWORD *)(*((_QWORD *)this + 5) + ((v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_43;
      v10 = v9 + 16 * v8;
      v12 = *(_QWORD **)v10;
      v11 = *(_QWORD *)(v10 + 8);
      if (*(_QWORD *)v10)
        v13 = v12 == (_QWORD *)&unk_1EF8EB220;
      else
        v13 = 1;
      if (!v13 && v11 == 0)
      {
        v15 = *((_QWORD *)this + 3);
        v16 = sub_1C499C548(*((_QWORD *)this + 2), v12[1]);
        v11 = sub_1C49FA70C(v15, v16);
        v9 = *((_QWORD *)this + 17);
        *(_QWORD *)(v9 + 16 * *(unsigned int *)(*(_QWORD *)v6 + 24) + 8) = v11;
      }
      v18 = *(_QWORD *)(v7 + 64);
      v17 = *(_QWORD *)(v7 + 72);
      v45 = v11;
      if (v18 != v17)
      {
        v44 = v3;
        while (1)
        {
          v19 = *(unsigned int *)(*(_QWORD *)v18 + 24);
          v9 = *((_QWORD *)this + 17);
          v20 = *(_QWORD **)(v9 + 16 * v19);
          if (v20)
            v21 = v20 == v12;
          else
            v21 = 1;
          if (v21)
            goto LABEL_34;
          if (v20 == (_QWORD *)&unk_1EF8EB220)
            goto LABEL_43;
          v22 = v9 + 16 * v19;
          v25 = *(_QWORD *)(v22 + 8);
          v24 = (uint64_t *)(v22 + 8);
          v23 = v25;
          if (!v25)
          {
            v26 = *((_QWORD *)this + 3);
            v27 = sub_1C499C548(*((_QWORD *)this + 2), v20[1]);
            v23 = sub_1C49FA70C(v26, v27);
            *v24 = v23;
          }
          v28 = *((_QWORD *)this + 3);
          llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v28);
          v29 = v23 == v6 || v23 == 0;
          if (v29 || *(_QWORD *)(v23 + 8) == v6)
          {
LABEL_44:
            v34 = *(unsigned int *)(v7 + 24);
            v9 = *((_QWORD *)this + 17);
            goto LABEL_45;
          }
          if (*(_QWORD *)(v6 + 8) == v23)
            goto LABEL_34;
          v30 = *(_DWORD *)(v6 + 16);
          if (v30 >= *(_DWORD *)(v23 + 16))
            goto LABEL_34;
          v31 = *(_QWORD *)(v28 + 1320);
          if (!*(_BYTE *)(v31 + 64))
          {
            v32 = *(_DWORD *)(v31 + 68) + 1;
            *(_DWORD *)(v31 + 68) = v32;
            if (v32 <= 0x20)
            {
              do
              {
                v33 = v23;
                v23 = *(_QWORD *)(v23 + 8);
              }
              while (v23 && *(_DWORD *)(v23 + 16) >= v30);
              if (v33 == v6)
                goto LABEL_44;
              goto LABEL_34;
            }
            llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::updateDFSNumbers(v31);
          }
          if (*(_DWORD *)(v23 + 72) >= *(_DWORD *)(v6 + 72) && *(_DWORD *)(v23 + 76) <= *(_DWORD *)(v6 + 76))
            goto LABEL_44;
LABEL_34:
          v18 += 8;
          if (v18 == v17)
          {
            v9 = *((_QWORD *)this + 17);
            v42 = *(unsigned int *)(v7 + 24);
            v43 = (void **)(v9 + 16 * v42);
            v3 = v44;
            if (v12)
              goto LABEL_56;
            goto LABEL_51;
          }
        }
      }
      v42 = *(unsigned int *)(v7 + 24);
      v43 = (void **)(v9 + 16 * v42);
      if (!v12)
        goto LABEL_51;
LABEL_56:
      if (v12 != (_QWORD *)&unk_1EF8EB220)
      {
        v4[3] = (uint64_t)v12;
        if ((unint64_t)v4[2] <= 7 && *v43 != v12)
        {
          *v43 = v12;
          *(_QWORD *)(v9 + 16 * v42 + 8) = v45;
          goto LABEL_50;
        }
      }
LABEL_51:
      v4 += 4;
    }
    while (v4 != v47);
  }
  while ((v3 & 1) != 0);
}

uint64_t llvm::LiveRangeCalc::isDefOnEntry(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  int v71;
  _QWORD v72[2];
  int v73;
  unsigned int *v74;
  unsigned int *v75;
  uint64_t v76;

  v7 = *(unsigned int *)(a5 + 24);
  v8 = v7 >> 6;
  v9 = 1;
  v10 = 1 << v7;
  if (((1 << v7) & *(_QWORD *)(*a6 + 8 * (v7 >> 6))) != 0)
    return v9;
  if ((*(_QWORD *)(*a7 + 8 * v8) & v10) != 0)
    return 0;
  v72[0] = 0;
  v72[1] = 0;
  v73 = 0;
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v12 = *(uint64_t **)(a5 + 64);
  v13 = *(uint64_t **)(a5 + 72);
  if (v12 == v13)
  {
    v18 = 0;
LABEL_50:
    v9 = 0;
    v54 = *a7;
    goto LABEL_51;
  }
  do
  {
    v17 = *v12++;
    v71 = *(_DWORD *)(v17 + 24);
    sub_1C4A0C7B8((uint64_t)v72, &v71);
  }
  while (v12 != v13);
  v18 = v74;
  v19 = v75;
  if (v75 == v74)
  {
    v18 = v75;
    goto LABEL_50;
  }
  v20 = 0;
  v21 = 0;
  v23 = a3;
  v22 = a4;
  while (1)
  {
    v24 = v18[v20];
    v25 = *(_QWORD *)(*(_QWORD *)(*a1 + 104) + 8 * v24);
    v26 = v24 >> 6;
    v27 = *(_QWORD *)(a1[5] + 8 * (v24 >> 6));
    v28 = 1 << v24;
    v29 = *(unsigned int *)(v25 + 24);
    if ((v27 & v28) != 0)
    {
      v30 = *(void **)(a1[17] + 16 * v29);
      if (v30 && v30 != &unk_1EF8EB220)
      {
        v62 = *(uint64_t **)(v25 + 88);
        v63 = *(uint64_t **)(v25 + 96);
        v54 = *a6;
        if (v62 != v63)
        {
          do
          {
            v64 = *v62++;
            v9 = 1;
            *(_QWORD *)(v54 + (((unint64_t)*(unsigned int *)(v64 + 24) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v64 + 24);
          }
          while (v62 != v63);
          goto LABEL_51;
        }
        *(_QWORD *)(v54 + 8 * v8) |= v10;
        v9 = 1;
        goto LABEL_52;
      }
    }
    v32 = (uint64_t *)(*(_QWORD *)(a1[2] + 392) + 16 * v29);
    v33 = v32[1];
    v34 = (v33 >> 1) & 3;
    v35 = v33 & 0xFFFFFFFFFFFFFFF8;
    if (v34)
      v36 = v35 | (2 * (v34 - 1));
    else
      v36 = *(_QWORD *)v35 | 6;
    v37 = *v32;
    v38 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v38)
    {
      v39 = *(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFF8) + 24) | (v36 >> 1) & 3;
      v40 = *(_QWORD **)a2;
      do
      {
        v41 = v38 >> 1;
        v42 = &v40[3 * (v38 >> 1)];
        v44 = *v42;
        v43 = v42 + 3;
        v38 += ~(v38 >> 1);
        if (v39 < ((v44 >> 1) & 3 | *(_DWORD *)((v44 & 0xFFFFFFFFFFFFFFF8) + 24)))
          v38 = v41;
        else
          v40 = v43;
      }
      while (v38);
      if (v40 != *(_QWORD **)a2)
      {
        v45 = (*(v40 - 2) >> 1) & 3 | *(_DWORD *)((*(v40 - 2) & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v45 > (*(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 24) | (v37 >> 1) & 3))
        {
          if (v22)
          {
            v46 = 8 * a4;
            v47 = v23;
            do
            {
              v48 = (*v47 >> 1) & 3 | *(_DWORD *)((*v47 & 0xFFFFFFFFFFFFFFF8) + 24);
              if (v45 <= v48 && v48 < (*(_DWORD *)(v35 + 24) | v34))
                goto LABEL_43;
              ++v47;
              v46 -= 8;
            }
            while (v46);
          }
          v58 = *(uint64_t **)(v25 + 88);
          v59 = *(uint64_t **)(v25 + 96);
          v54 = *a6;
          if (v58 != v59)
          {
            do
            {
              v60 = *v58++;
              v9 = 1;
              *(_QWORD *)(v54 + (((unint64_t)*(unsigned int *)(v60 + 24) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v60 + 24);
            }
            while (v58 != v59);
            goto LABEL_51;
          }
LABEL_61:
          v9 = 1;
          goto LABEL_51;
        }
      }
    }
    v49 = *(_QWORD *)(*a7 + 8 * v26);
    if ((v49 & v28) != 0)
      goto LABEL_32;
    if (!v22)
      break;
    v50 = *(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 24) | (v37 >> 1) & 3;
    v51 = 8 * a4;
    v52 = v23;
    while (1)
    {
      v53 = (*v52 >> 1) & 3 | *(_DWORD *)((*v52 & 0xFFFFFFFFFFFFFFF8) + 24);
      if (v50 <= v53 && v53 < (*(_DWORD *)(v35 + 24) | v34))
        break;
      ++v52;
      v51 -= 8;
      if (!v51)
        goto LABEL_38;
    }
LABEL_32:
    *(_QWORD *)(*a7 + 8 * v26) = v49 | v28;
LABEL_43:
    v20 = ++v21;
    if (v21 == v19 - v18)
      goto LABEL_50;
  }
LABEL_38:
  v54 = *a6;
  if ((*(_QWORD *)(*a6 + 8 * v26) & v28) == 0)
  {
    v55 = *(uint64_t **)(v25 + 64);
    v56 = *(uint64_t **)(v25 + 72);
    if (v55 != v56)
    {
      v68 = v21;
      do
      {
        v57 = *v55++;
        v71 = *(_DWORD *)(v57 + 24);
        sub_1C4A0C7B8((uint64_t)v72, &v71);
      }
      while (v55 != v56);
      v18 = v74;
      v19 = v75;
      v23 = a3;
      v22 = a4;
      v21 = v68;
    }
    goto LABEL_43;
  }
  v65 = *(uint64_t **)(v25 + 88);
  v66 = *(uint64_t **)(v25 + 96);
  if (v65 == v66)
    goto LABEL_61;
  do
  {
    v67 = *v65++;
    v9 = 1;
    *(_QWORD *)(v54 + (((unint64_t)*(unsigned int *)(v67 + 24) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v67 + 24);
  }
  while (v65 != v66);
LABEL_51:
  *(_QWORD *)(v54 + 8 * v8) |= v10;
  if (v18)
  {
LABEL_52:
    v75 = v18;
    operator delete(v18);
  }
  MEMORY[0x1CAA32FB4](v72[0], 4);
  return v9;
}

uint64_t llvm::LiveRangeCalc::isJointlyDominated(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  _QWORD v26[2];
  int v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  void *v31[2];
  _DWORD v32[14];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 32);
  v9 = (*(_QWORD *)(v8 + 112) - *(_QWORD *)(v8 + 104)) >> 3;
  v31[0] = v32;
  v31[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v31, (v9 + 63) >> 6, 0);
  v32[12] = v9;
  if (a3)
  {
    v10 = 8 * a3;
    do
    {
      v11 = *a2++;
      v12 = sub_1C499C548(a4, v11);
      *(_QWORD *)((char *)v31[0] + (((unint64_t)*(unsigned int *)(v12 + 24) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v12 + 24);
      v10 -= 8;
    }
    while (v10);
  }
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v25 = *(_DWORD *)(a1 + 24);
  sub_1C4A0C7B8((uint64_t)v26, &v25);
  v13 = v28;
  v14 = v29;
  if (v29 != v28)
  {
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = v13[v15];
      if (((*(_QWORD *)((char *)v31[0] + ((v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) != 0)
        break;
      v18 = *(_QWORD *)(*(_QWORD *)(v8 + 104) + 8 * v17);
      v19 = *(uint64_t **)(v18 + 64);
      v20 = *(uint64_t **)(v18 + 72);
      if (v19 != v20)
      {
        do
        {
          v21 = *v19++;
          v25 = *(_DWORD *)(v21 + 24);
          sub_1C4A0C7B8((uint64_t)v26, &v25);
        }
        while (v19 != v20);
        v13 = v28;
        v14 = v29;
      }
      v15 = ++v16;
      if (v16 == v14 - v13)
        goto LABEL_13;
    }
    v22 = 1;
LABEL_16:
    v29 = v13;
    operator delete(v13);
    v23 = v22;
    goto LABEL_17;
  }
  v13 = v29;
LABEL_13:
  v22 = 0;
  v23 = 0;
  if (v13)
    goto LABEL_16;
LABEL_17:
  MEMORY[0x1CAA32FB4](v26[0], 4);
  if (v31[0] != v32)
    free(v31[0]);
  return v23;
}

uint64_t sub_1C511586C(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  const void *v6;
  unsigned int v7;
  int v8;
  void *v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  int v14;
  int v15;

  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      v6 = *(const void **)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        *(_QWORD *)a1 = v6;
        v15 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v15;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
        goto LABEL_8;
      }
      if (v5 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, *(unsigned int *)(a2 + 8), 8);
        v7 = *(_DWORD *)(a2 + 8);
        if (!v7)
          goto LABEL_7;
        v6 = *(const void **)a2;
        v4 = *(void **)a1;
      }
      else
      {
        v7 = *(_DWORD *)(a2 + 8);
      }
      memcpy(v4, v6, 8 * v7);
LABEL_7:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_8:
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  v8 = *(_DWORD *)(a2 + 64);
  v9 = (void *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_DWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 80) = 0x600000000;
  v10 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v10 && a1 != a2)
  {
    v11 = *(const void **)(a2 + 72);
    if (v11 != (const void *)(a2 + 88))
    {
      *(_QWORD *)(a1 + 72) = v11;
      v14 = *(_DWORD *)(a2 + 84);
      *(_DWORD *)(a1 + 80) = v10;
      *(_DWORD *)(a1 + 84) = v14;
      *(_QWORD *)(a2 + 72) = a2 + 88;
      *(_DWORD *)(a2 + 84) = 0;
      goto LABEL_16;
    }
    if (v10 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v10, 8);
      v12 = *(unsigned int *)(a2 + 80);
      if (!(_DWORD)v12)
        goto LABEL_15;
      v11 = *(const void **)(a2 + 72);
      v9 = *(void **)(a1 + 72);
    }
    else
    {
      v12 = *(unsigned int *)(a2 + 80);
    }
    memcpy(v9, v11, 8 * v12);
LABEL_15:
    *(_DWORD *)(a1 + 80) = v10;
LABEL_16:
    *(_DWORD *)(a2 + 80) = 0;
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

void sub_1C51159E4(uint64_t a1)
{
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v13 = 152 * v2;
    v14 = *(_QWORD *)a1 + 96;
    do
    {
      v15 = *(_QWORD *)(v14 - 96);
      if (v15 != -4096 && v15 != -8192)
      {
        v16 = *(void **)(v14 - 16);
        if ((void *)v14 != v16)
          free(v16);
        v17 = *(void **)(v14 - 88);
        if ((void *)(v14 - 72) != v17)
          free(v17);
      }
      v14 += 152;
      v13 -= 152;
    }
    while (v13);
  }
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if (v5)
    {
      v6 = *(_QWORD **)a1;
      v7 = 152 * v5;
      do
      {
        *v6 = -4096;
        v6 += 19;
        v7 -= 152;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v9;
      v10 = operator new(152 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v10;
      *(_QWORD *)(a1 + 8) = 0;
      v11 = *(_DWORD *)(a1 + 16);
      if (v11)
      {
        v12 = 152 * v11;
        do
        {
          *v10 = -4096;
          v10 += 19;
          v12 -= 152;
        }
        while (v12);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

uint64_t sub_1C5115B5C(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 152 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 152 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_7;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_7:
  *a4 = v6;
  return result;
}

_QWORD *sub_1C5115BE0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(152 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61E3A18(a1, v4, &v4[19 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 152 * v10;
    do
    {
      *result = -4096;
      result += 19;
      v11 -= 152;
    }
    while (v11);
  }
  return result;
}

void llvm::LiveIntervalCalc::calculate(llvm::LiveIntervalCalc *this, llvm::LiveInterval *a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int **v9;
  int *v10;
  unsigned int v11;
  uint64_t **v12;
  uint64_t v13;
  llvm::LiveRangeCalc *v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::LiveInterval *v17;
  unsigned int v18;
  uint64_t v19;
  llvm::LiveInterval *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  void (**v26)(_QWORD *);
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  BOOL v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  llvm::LiveRangeCalc *v66;
  int v67;
  llvm::LiveInterval *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72[5];
  void *v73;
  uint64_t v74;
  _DWORD v75[14];
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  void *v79;
  uint64_t v80;
  _QWORD v81[3];
  void *v82;
  uint64_t v83;
  _BYTE v84[512];
  _QWORD v85[3];
  _QWORD *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)*((_QWORD *)this + 1);
  v69 = *((_QWORD *)this + 2);
  v71 = (uint64_t *)*((_QWORD *)this + 4);
  v7 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v6 + 16) + 176))(*(_QWORD *)(*v6 + 16));
  v8 = *((unsigned int *)a2 + 28);
  if ((v8 & 0x80000000) != 0)
    v9 = (int **)(v6[3] + 16 * (v8 & 0x7FFFFFFF) + 8);
  else
    v9 = (int **)(v6[34] + 8 * v8);
  v10 = *v9;
  if (*v9)
  {
    while (1)
    {
      v11 = *v10;
      if ((*v10 & 0x80000000) == 0)
        break;
      v10 = (int *)*((_QWORD *)v10 + 3);
      if (!v10)
        goto LABEL_7;
    }
    v70 = 16 * (v8 & 0x7FFFFFFF);
LABEL_11:
    if ((v11 & 0x1000000) == 0 && ((v11 & 0x30000000) != 0 || (v11 & 0x10FFF00) == 0x1000000))
      goto LABEL_49;
    v18 = (v11 >> 8) & 0xFFF;
    if (*((_QWORD *)a2 + 13))
    {
      if (v18)
        v19 = *(_QWORD *)(v7[29] + 8 * v18);
      else
        v19 = *(_QWORD *)((*(_QWORD *)(v6[3] + v70) & 0xFFFFFFFFFFFFFFF8) + 24);
    }
    else
    {
      if (!v18 || (a3 & 1) == 0)
        goto LABEL_27;
      v19 = *(_QWORD *)(v7[29] + 8 * v18);
      if (*((_DWORD *)a2 + 2))
      {
        v67 = a3;
        v20 = a2;
        v21 = *(_QWORD *)((*(_QWORD *)(v6[3] + v70) & 0xFFFFFFFFFFFFFFF8) + 24);
        v22 = v8;
        v23 = (_QWORD *)sub_1C484358C((uint64_t)v71, 120, 3);
        *v23 = v23 + 2;
        v23[1] = 0x200000000;
        v23[8] = v23 + 10;
        v23[9] = 0x200000000;
        v23[12] = 0;
        sub_1C50E31B0((uint64_t)v23, (uint64_t)v20, (uint64_t)v71);
        v23[14] = v21;
        a2 = v20;
        a3 = v67;
        v23[13] = *((_QWORD *)a2 + 13);
        *((_QWORD *)a2 + 13) = v23;
        v8 = v22;
      }
    }
    v24 = operator new(0x20uLL);
    *v24 = &off_1E8143430;
    v24[1] = v10;
    v24[2] = v69;
    v24[3] = v71;
    v86 = v24;
    llvm::LiveInterval::refineSubRanges((uint64_t)a2, (uint64_t)v71, v19, (uint64_t)v85, v69, v7, 0);
    v25 = v86;
    if (v86 == v85)
    {
      v26 = (void (**)(_QWORD *))(v85[0] + 32);
      v25 = v85;
      goto LABEL_26;
    }
    if (v86)
    {
      v26 = (void (**)(_QWORD *))(*v86 + 40);
LABEL_26:
      (*v26)(v25);
    }
LABEL_27:
    if ((*v10 & 0x1000000) == 0 || *((_QWORD *)a2 + 13))
      goto LABEL_49;
    v27 = *((_QWORD *)v10 + 1);
    v28 = *(_WORD *)(v27 + 44);
    v29 = v27;
    if ((v28 & 4) != 0)
    {
      do
        v29 = *(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v29 + 44) & 4) != 0);
    }
    if ((v28 & 8) != 0)
    {
      do
        v27 = *(_QWORD *)(v27 + 8);
      while ((*(_WORD *)(v27 + 44) & 8) != 0);
    }
    v30 = *(_QWORD *)(v27 + 8);
    if (v29 != v30)
    {
      while (1)
      {
        v31 = **(unsigned __int16 **)(v29 + 16);
        v32 = v31 > 0x17;
        v33 = (1 << v31) & 0x83E000;
        if (v32 || v33 == 0)
          break;
        v29 = *(_QWORD *)(v29 + 8);
        if (v29 == v30)
        {
          v29 = v30;
          break;
        }
      }
    }
    v35 = *(_QWORD *)(v69 + 368);
    v36 = *(unsigned int *)(v69 + 384);
    if ((_DWORD)v36)
    {
      LODWORD(v37) = ((v29 >> 4) ^ (v29 >> 9)) & (v36 - 1);
      v38 = (uint64_t *)(v35 + 16 * v37);
      v39 = *v38;
      if (v29 == *v38)
        goto LABEL_45;
      v40 = 1;
      while (v39 != -4096)
      {
        v41 = v37 + v40++;
        v37 = v41 & (v36 - 1);
        v39 = *(_QWORD *)(v35 + 16 * v37);
        if (v29 == v39)
        {
          v38 = (uint64_t *)(v35 + 16 * v37);
          goto LABEL_45;
        }
      }
    }
    v38 = (uint64_t *)(v35 + 16 * v36);
LABEL_45:
    v42 = 2;
    if ((*v10 & 0x40000000) == 0)
      v42 = 4;
    v43 = v38[1] & 0xFFFFFFFFFFFFFFF8 | v42;
    if (*((_QWORD *)a2 + 12))
    {
      v72[0] = (uint64_t *)a2;
      sub_1C510A3C0((uint64_t *)v72, v43, (uint64_t)v71, 0);
    }
    else
    {
      v72[0] = (uint64_t *)a2;
      sub_1C510A6B8(v72, v43, (uint64_t)v71, 0);
    }
LABEL_49:
    while (1)
    {
      v10 = (int *)*((_QWORD *)v10 + 3);
      if (!v10)
        break;
      v11 = *v10;
      if ((*v10 & 0x80000000) == 0)
        goto LABEL_11;
    }
  }
LABEL_7:
  v12 = (uint64_t **)((char *)a2 + 104);
  v13 = *((_QWORD *)a2 + 13);
  if (!v13)
  {
LABEL_8:
    llvm::LiveRangeCalc::resetLiveOutMap(this);
    v14 = this;
    v15 = (uint64_t *)a2;
    v16 = v8;
    v17 = 0;
    goto LABEL_9;
  }
  v68 = a2;
  v44 = (_QWORD *)((char *)a2 + 104);
  while (1)
  {
    v45 = v13;
    if (!*(_DWORD *)(v13 + 8))
      break;
LABEL_59:
    v44 = (_QWORD *)(v13 + 104);
    v13 = *(_QWORD *)(v13 + 104);
    if (!v13)
      goto LABEL_72;
  }
  while (1)
  {
    v46 = *(_QWORD *)(v45 + 96);
    v13 = *(_QWORD *)(v45 + 104);
    *(_QWORD *)(v45 + 96) = 0;
    if (v46)
    {
      sub_1C47655E8(v46, *(_QWORD **)(v46 + 8));
      MEMORY[0x1CAA32FC0](v46, 0x1020C4062D53EE8);
    }
    v47 = *(void **)(v45 + 64);
    if (v47 != (void *)(v45 + 80))
      free(v47);
    if (*(_QWORD *)v45 == v45 + 16)
      break;
    free(*(void **)v45);
    if (!v13)
      goto LABEL_71;
LABEL_69:
    v45 = v13;
    if (*(_DWORD *)(v13 + 8))
    {
      *v44 = v13;
      goto LABEL_59;
    }
  }
  if (v13)
    goto LABEL_69;
LABEL_71:
  *v44 = 0;
LABEL_72:
  v48 = *v12;
  a2 = v68;
  if (!*v12)
    goto LABEL_8;
  v49 = *(uint64_t **)this;
  v66 = this;
  v50 = (uint64_t *)*((_QWORD *)this + 3);
  v51 = (uint64_t *)v69;
  do
  {
    v73 = v75;
    v74 = 0x600000000;
    v75[12] = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v81[0] = 0;
    v81[1] = 0;
    v80 = 0;
    v79 = v81;
    v82 = v84;
    v83 = 0x1000000000;
    v52 = (uint64_t *)v49[5];
    v72[0] = v49;
    v72[1] = v52;
    v72[2] = v51;
    v72[3] = v50;
    v72[4] = v71;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v72);
    LODWORD(v83) = 0;
    llvm::LiveIntervalCalc::extendToUses((llvm::LiveRangeCalc *)v72, v48, v8, v48[14], (uint64_t)a2);
    if (v82 != v84)
      free(v82);
    if (v79 != v81)
      free(v79);
    v53 = v76;
    if (v78)
    {
      v54 = 152 * v78;
      v55 = (_QWORD *)(v76 + 96);
      do
      {
        v56 = *(v55 - 12);
        if (v56 != -4096 && v56 != -8192)
        {
          v57 = (_QWORD *)*(v55 - 2);
          if (v55 != v57)
            free(v57);
          v58 = (char *)*(v55 - 11);
          if (v55 - 9 != (_QWORD *)v58)
            free(v58);
        }
        v55 += 19;
        v54 -= 152;
      }
      while (v54);
      v53 = v76;
      a2 = v68;
      v51 = (uint64_t *)v69;
    }
    MEMORY[0x1CAA32FB4](v53, 8);
    if (v73 != v75)
      free(v73);
    v48 = (uint64_t *)v48[13];
  }
  while (v48);
  *((_DWORD *)a2 + 18) = 0;
  *((_DWORD *)a2 + 2) = 0;
  v59 = *((_QWORD *)a2 + 13);
  if (v59)
  {
    v60 = *((_QWORD *)v66 + 4);
    do
    {
      v61 = *(unsigned int *)(v59 + 72);
      if ((_DWORD)v61)
      {
        v62 = *(_QWORD *)(v59 + 64);
        v63 = 8 * v61;
        do
        {
          v64 = *(_QWORD *)(*(_QWORD *)v62 + 8);
          if (v64 >= 8 && (*(_QWORD *)(*(_QWORD *)v62 + 8) & 6) != 0)
          {
            if (*((_QWORD *)a2 + 12))
            {
              v72[0] = (uint64_t *)a2;
              sub_1C510A3C0((uint64_t *)v72, v64, v60, 0);
            }
            else
            {
              v72[0] = (uint64_t *)a2;
              sub_1C510A6B8(v72, v64, v60, 0);
            }
          }
          v62 += 8;
          v63 -= 8;
        }
        while (v63);
      }
      v59 = *(_QWORD *)(v59 + 104);
    }
    while (v59);
  }
  llvm::LiveRangeCalc::resetLiveOutMap(v66);
  v16 = *((unsigned int *)a2 + 28);
  v14 = v66;
  v15 = (uint64_t *)a2;
  v17 = a2;
LABEL_9:
  llvm::LiveIntervalCalc::extendToUses(v14, v15, v16, -1, (uint64_t)v17);
}

void llvm::LiveIntervalCalc::extendToUses(llvm::LiveRangeCalc *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  BOOL v41;
  unint64_t v42;
  unsigned int TiedOperandIdx;
  unint64_t v44;
  unsigned int *v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[5];

  v48[4] = *MEMORY[0x1E0C80C00];
  v10 = (_QWORD *)*((_QWORD *)a1 + 1);
  v9 = *((_QWORD *)a1 + 2);
  v46 = v48;
  v47 = 0x400000000;
  if (a5)
    llvm::LiveInterval::computeSubRangeUndefs(a5, (uint64_t)&v46, a4, v10, v9);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v10 + 16) + 176))(*(_QWORD *)(*v10 + 16));
  if ((a3 & 0x80000000) != 0)
    v12 = (unsigned int **)(v10[3] + 16 * (a3 & 0x7FFFFFFF) + 8);
  else
    v12 = (unsigned int **)(v10[34] + 8 * a3);
  v13 = *v12;
  if (*v12)
  {
    while (1)
    {
      v14 = *v13;
      if ((*v13 & 0x80000000) == 0)
        break;
      v13 = (unsigned int *)*((_QWORD *)v13 + 3);
      if (!v13)
        goto LABEL_6;
    }
LABEL_11:
    if ((v14 & 0x1000000) == 0)
    {
      v14 &= ~0x4000000u;
      *v13 = v14;
    }
    if ((v14 & 0x30000000) == 0 && (v14 & 0x10FFF00) != 0x1000000 && (a4 == -1 || (v14 & 0x1000000) == 0))
    {
      v15 = (v14 >> 8) & 0xFFF;
      if (!v15 || ((*(_QWORD *)(*(_QWORD *)(v11 + 232) + 8 * v15) ^ ((uint64_t)(int)(v14 << 7) >> 31)) & a4) != 0)
      {
        v16 = *((_QWORD *)v13 + 1);
        v17 = *(_QWORD *)(v16 + 32);
        v18 = ((unint64_t)v13 - v17) >> 5;
        v19 = **(unsigned __int16 **)(v16 + 16);
        v20 = v19 == 69 || v19 == 0;
        if (v20)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(v9 + 392)
                          + 16 * *(unsigned int *)(*(_QWORD *)(v17 + 32 * (v18 + 1) + 16) + 24)
                          + 8);
        }
        else
        {
          if ((v14 & 0x1000000) != 0)
          {
            v21 = (v14 >> 30) & 1;
          }
          else
          {
            v38 = *(_DWORD *)(v17 + (((unint64_t)v13 - v17) & 0x1FFFFFFFE0));
            v39 = v38 & 0x10000FF;
            v40 = v38 & 0xF00000;
            if (v39)
              v41 = 1;
            else
              v41 = v40 == 0;
            if (v41)
            {
              v21 = 0;
            }
            else
            {
              v45 = v13;
              v42 = *((_QWORD *)v13 + 1);
              TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v16, v18);
              v16 = v42;
              v13 = v45;
              v21 = (*(unsigned __int8 *)(*(_QWORD *)(v16 + 32) + 32 * TiedOperandIdx + 3) >> 6) & 1;
            }
          }
          v22 = *(_WORD *)(v16 + 44);
          if ((v22 & 0xC) != 0)
          {
            v44 = v16;
            v23 = v16;
            if ((v22 & 4) != 0)
            {
              v23 = v16;
              do
                v23 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v23 + 44) & 4) != 0);
            }
            if ((v22 & 8) != 0)
            {
              do
                v44 = *(_QWORD *)(v44 + 8);
              while ((*(_WORD *)(v44 + 44) & 8) != 0);
            }
            v16 = v44;
          }
          else
          {
            v23 = v16;
          }
          v24 = *(_QWORD *)(v16 + 8);
          if (v23 != v24)
          {
            do
            {
              v25 = **(unsigned __int16 **)(v23 + 16);
              v26 = v25 > 0x17;
              v27 = (1 << v25) & 0x83E000;
              if (v26 || v27 == 0)
                goto LABEL_32;
              v23 = *(_QWORD *)(v23 + 8);
            }
            while (v23 != v24);
            v23 = v24;
          }
LABEL_32:
          v29 = *(_QWORD *)(v9 + 368);
          v30 = *(unsigned int *)(v9 + 384);
          if ((_DWORD)v30)
          {
            LODWORD(v31) = ((v23 >> 4) ^ (v23 >> 9)) & (v30 - 1);
            v32 = (uint64_t *)(v29 + 16 * v31);
            v33 = *v32;
            if (v23 != *v32)
            {
              v36 = 1;
              do
              {
                if (v33 == -4096)
                  goto LABEL_47;
                v37 = v31 + v36++;
                v31 = v37 & (v30 - 1);
                v33 = *(_QWORD *)(v29 + 16 * v31);
              }
              while (v23 != v33);
              v32 = (uint64_t *)(v29 + 16 * v31);
            }
          }
          else
          {
LABEL_47:
            v32 = (uint64_t *)(v29 + 16 * v30);
          }
          v20 = v21 == 0;
          v34 = 4;
          if (!v20)
            v34 = 2;
          v35 = v32[1] & 0xFFFFFFFFFFFFFFF8 | v34;
        }
        llvm::LiveRangeCalc::extend(a1, a2, v35, a3, v46, v47);
      }
    }
    while (1)
    {
      v13 = (unsigned int *)*((_QWORD *)v13 + 3);
      if (!v13)
        break;
      v14 = *v13;
      if ((*v13 & 0x80000000) == 0)
        goto LABEL_11;
    }
  }
LABEL_6:
  if (v46 != v48)
    free(v46);
}

void llvm::LiveIntervalCalc::constructMainRangeFromSubranges(llvm::LiveIntervalCalc *this, llvm::LiveInterval *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v11;

  v4 = *((_QWORD *)a2 + 13);
  if (v4)
  {
    v5 = *((_QWORD *)this + 4);
    do
    {
      v6 = *(unsigned int *)(v4 + 72);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(v4 + 64);
        v8 = 8 * v6;
        do
        {
          v9 = *(_QWORD *)(*(_QWORD *)v7 + 8);
          if (v9 >= 8 && (*(_QWORD *)(*(_QWORD *)v7 + 8) & 6) != 0)
          {
            if (*((_QWORD *)a2 + 12))
            {
              v11 = (uint64_t *)a2;
              sub_1C510A3C0((uint64_t *)&v11, v9, v5, 0);
            }
            else
            {
              v11 = (uint64_t *)a2;
              sub_1C510A6B8(&v11, v9, v5, 0);
            }
          }
          v7 += 8;
          v8 -= 8;
        }
        while (v8);
      }
      v4 = *(_QWORD *)(v4 + 104);
    }
    while (v4);
  }
  llvm::LiveRangeCalc::resetLiveOutMap(this);
  llvm::LiveIntervalCalc::extendToUses(this, (uint64_t *)a2, *((unsigned int *)a2 + 28), -1, (uint64_t)a2);
}

_QWORD *llvm::LiveIntervalCalc::createDeadDefs(_QWORD *result, uint64_t *a2, unsigned int a3)
{
  uint64_t v4;
  int **v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  __int16 v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;

  v4 = result[1];
  if ((a3 & 0x80000000) != 0)
    v5 = (int **)(*(_QWORD *)(v4 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
  else
    v5 = (int **)(*(_QWORD *)(v4 + 272) + 8 * a3);
  v6 = *v5;
  if (*v5)
  {
    v7 = result[2];
    v8 = result[4];
    v9 = *v6;
    if ((*v6 & 0x1000000) != 0 || (v6 = (int *)*((_QWORD *)v6 + 3)) != 0 && (v9 = *v6, (*v6 & 0x1000000) != 0))
    {
      while (1)
      {
        v10 = *((_QWORD *)v6 + 1);
        v11 = *(_WORD *)(v10 + 44);
        v12 = v10;
        if ((v11 & 4) != 0)
        {
          do
            v12 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v12 + 44) & 4) != 0);
        }
        if ((v11 & 8) != 0)
        {
          do
            v10 = *(_QWORD *)(v10 + 8);
          while ((*(_WORD *)(v10 + 44) & 8) != 0);
        }
        v13 = *(_QWORD *)(v10 + 8);
        if (v12 != v13)
        {
          while (1)
          {
            v14 = **(unsigned __int16 **)(v12 + 16);
            v15 = v14 > 0x17;
            v16 = (1 << v14) & 0x83E000;
            if (v15 || v16 == 0)
              break;
            v12 = *(_QWORD *)(v12 + 8);
            if (v12 == v13)
            {
              v12 = v13;
              break;
            }
          }
        }
        v18 = *(_QWORD *)(v7 + 368);
        v19 = *(unsigned int *)(v7 + 384);
        if (!(_DWORD)v19)
          goto LABEL_24;
        LODWORD(v20) = ((v12 >> 4) ^ (v12 >> 9)) & (v19 - 1);
        v21 = (uint64_t *)(v18 + 16 * v20);
        v22 = *v21;
        if (v12 != *v21)
          break;
LABEL_25:
        if ((v9 & 0x40000000) != 0)
          v25 = 2;
        else
          v25 = 4;
        v26 = v25 | v21[1] & 0xFFFFFFFFFFFFFFF8;
        if (a2[12])
        {
          v27 = a2;
          result = (_QWORD *)sub_1C510A3C0((uint64_t *)&v27, v26, v8, 0);
        }
        else
        {
          v27 = a2;
          result = (_QWORD *)sub_1C510A6B8(&v27, v26, v8, 0);
        }
        v6 = (int *)*((_QWORD *)v6 + 3);
        if (v6)
        {
          v9 = *v6;
          if ((*v6 & 0x1000000) != 0)
            continue;
        }
        return result;
      }
      v23 = 1;
      while (v22 != -4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v19 - 1);
        v22 = *(_QWORD *)(v18 + 16 * v20);
        if (v12 == v22)
        {
          v21 = (uint64_t *)(v18 + 16 * v20);
          goto LABEL_25;
        }
      }
LABEL_24:
      v21 = (uint64_t *)(v18 + 16 * v19);
      goto LABEL_25;
    }
  }
  return result;
}

void sub_1C5116960()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5116974(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E8143430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C51169B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8143430;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_1C51169DC(_QWORD *result, uint64_t *a2)
{
  int *v2;
  int v3;
  unint64_t v4;
  __int16 v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;

  v2 = (int *)result[1];
  v3 = *v2;
  if ((*v2 & 0x1000000) == 0)
    return result;
  v4 = *((_QWORD *)v2 + 1);
  v5 = *(_WORD *)(v4 + 44);
  v6 = v4;
  if ((v5 & 4) != 0)
  {
    v6 = v4;
    do
      v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v6 + 44) & 4) != 0);
  }
  v7 = result[2];
  if ((v5 & 8) != 0)
  {
    do
      v4 = *(_QWORD *)(v4 + 8);
    while ((*(_WORD *)(v4 + 44) & 8) != 0);
  }
  v8 = *(_QWORD *)(v4 + 8);
  if (v6 != v8)
  {
    while (1)
    {
      v9 = **(unsigned __int16 **)(v6 + 16);
      v10 = v9 > 0x17;
      v11 = (1 << v9) & 0x83E000;
      v12 = v10 || v11 == 0;
      if (v12)
        break;
      v6 = *(_QWORD *)(v6 + 8);
      if (v6 == v8)
      {
        v6 = v8;
        break;
      }
    }
  }
  v13 = result[3];
  v14 = *(_QWORD *)(v7 + 368);
  v15 = *(unsigned int *)(v7 + 384);
  if (!(_DWORD)v15)
    goto LABEL_17;
  LODWORD(v16) = ((v6 >> 4) ^ (v6 >> 9)) & (v15 - 1);
  v17 = (uint64_t *)(v14 + 16 * v16);
  v18 = *v17;
  if (v6 != *v17)
  {
    v19 = 1;
    while (v18 != -4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v18 = *(_QWORD *)(v14 + 16 * v16);
      if (v6 == v18)
      {
        v17 = (uint64_t *)(v14 + 16 * v16);
        goto LABEL_18;
      }
    }
LABEL_17:
    v17 = (uint64_t *)(v14 + 16 * v15);
  }
LABEL_18:
  v12 = (v3 & 0x40000000) == 0;
  v21 = 2;
  if (v12)
    v21 = 4;
  v22 = v17[1] & 0xFFFFFFFFFFFFFFF8 | v21;
  if (a2[12])
  {
    v23 = a2;
    return (_QWORD *)sub_1C510A3C0((uint64_t *)&v23, v22, v13, 0);
  }
  else
  {
    v23 = a2;
    return (_QWORD *)sub_1C510A6B8(&v23, v22, v13, 0);
  }
}

uint64_t llvm::LiveRangeEdit::createEmptyIntervalFrom(_QWORD *a1, int a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t IncompleteVirtualRegister;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::LiveInterval *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v6 = a1[3];
  v7 = a2 & 0x7FFFFFFF;
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16 * v7) & 0xFFFFFFFFFFFFFFF8;
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v6, "", 0);
  *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v8;
  v10 = *(_QWORD *)(v6 + 8);
  if (v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, IncompleteVirtualRegister);
  v11 = a1[5];
  if (v11)
  {
    if (*(_DWORD *)(*(_QWORD *)(v11 + 328) + 4 * v7))
      v12 = *(_DWORD *)(*(_QWORD *)(v11 + 328) + 4 * v7);
    else
      v12 = a2;
    sub_1C5116CCC(v11, IncompleteVirtualRegister, v12);
  }
  v13 = sub_1C4851220(a1[4], IncompleteVirtualRegister);
  v14 = v13;
  v15 = a1[1];
  if (v15 && *(float *)(v15 + 116) == INFINITY)
    *(_DWORD *)(v13 + 116) = 2139095040;
  if (a3)
  {
    v16 = a1[4];
    if (v7 >= *(unsigned int *)(v16 + 416) || (v17 = *(llvm::LiveInterval **)(*(_QWORD *)(v16 + 408) + 8 * v7)) == 0)
    {
      v17 = (llvm::LiveInterval *)sub_1C4851220(a1[4], a2);
      llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)v16, v17);
      v16 = a1[4];
    }
    v18 = *((_QWORD *)v17 + 13);
    if (v18)
    {
      v19 = v16 + 312;
      do
      {
        v20 = *(_QWORD *)(v18 + 112);
        v21 = (_QWORD *)sub_1C484358C(v19, 120, 3);
        *v21 = v21 + 2;
        v21[1] = 0x200000000;
        v21[8] = v21 + 10;
        v21[9] = 0x200000000;
        v21[12] = 0;
        v21[13] = 0;
        v21[13] = *(_QWORD *)(v14 + 104);
        v21[14] = v20;
        *(_QWORD *)(v14 + 104) = v21;
        v18 = *(_QWORD *)(v18 + 104);
      }
      while (v18);
    }
  }
  return v14;
}

double sub_1C5116CCC(uint64_t a1, int a2, int a3)
{
  double result;
  BOOL v7;
  _DWORD *v8;
  __int128 v9;
  int v10;
  _OWORD v11[2];

  *(_DWORD *)(*(_QWORD *)(a1 + 328) + 4 * (a2 & 0x7FFFFFFF)) = a3;
  *(_QWORD *)&result = sub_1C50E120C(a1, a3, v11).n128_u64[0];
  if (*(_QWORD *)&v11[0])
    v7 = *((_QWORD *)&v11[0] + 1) == 0;
  else
    v7 = 1;
  if (!v7)
  {
    sub_1C50E120C(a1, a3, v11);
    v10 = a2;
    v8 = sub_1C61DFD04((uint64_t *)(a1 + 352), &v10);
    result = *(double *)v11;
    v9 = v11[1];
    *(_OWORD *)(v8 + 2) = v11[0];
    *(_OWORD *)(v8 + 6) = v9;
  }
  return result;
}

uint64_t llvm::LiveRangeEdit::createFrom(_QWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t IncompleteVirtualRegister;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v4 = a1[3];
  v5 = a2 & 0x7FFFFFFF;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16 * v5) & 0xFFFFFFFFFFFFFFF8;
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
  *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v6;
  v8 = *(_QWORD *)(v4 + 8);
  if (v8)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, IncompleteVirtualRegister);
  v9 = a1[5];
  if (v9)
  {
    if (*(_DWORD *)(*(_QWORD *)(v9 + 328) + 4 * v5))
      v10 = *(_DWORD *)(*(_QWORD *)(v9 + 328) + 4 * v5);
    else
      v10 = a2;
    sub_1C5116CCC(v9, IncompleteVirtualRegister, v10);
  }
  v11 = a1[1];
  if (v11 && *(float *)(v11 + 116) == INFINITY)
    *((_DWORD *)sub_1C5104FB8(a1[4], IncompleteVirtualRegister) + 29) = 2139095040;
  return IncompleteVirtualRegister;
}

uint64_t llvm::LiveRangeEdit::checkRematerializable(uint64_t a1, uint64_t a2, const llvm::MachineInstr *a3, llvm::AAResults *a4)
{
  uint64_t v6;
  llvm::TargetInstrInfo *v9;
  uint64_t result;

  *(_BYTE *)(a1 + 68) = 1;
  v6 = *((_QWORD *)a3 + 2);
  if (*(_WORD *)v6 == 10)
    goto LABEL_5;
  if ((*(_BYTE *)(v6 + 11) & 0x20) == 0)
    return 0;
  v9 = *(llvm::TargetInstrInfo **)(a1 + 48);
  if (((*(uint64_t (**)(llvm::TargetInstrInfo *, const llvm::MachineInstr *, llvm::AAResults *))(*(_QWORD *)v9 + 32))(v9, a3, a4) & 1) != 0|| (result = llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(v9, a3, a4), (_DWORD)result))
  {
LABEL_5:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 80), a2);
    return 1;
  }
  return result;
}

uint64_t llvm::LiveRangeEdit::scanRemattable(uint64_t this, llvm::AAResults *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  llvm::LiveInterval *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const llvm::MachineInstr *v27;

  v2 = this;
  v3 = *(_QWORD *)(this + 8);
  v4 = *(unsigned int *)(v3 + 72);
  if ((_DWORD)v4)
  {
    v6 = *(uint64_t **)(v3 + 64);
    v7 = &v6[v4];
    while (1)
    {
      v8 = *v6;
      v9 = *(_QWORD *)(*v6 + 8);
      if (v9 >= 8)
        break;
LABEL_23:
      if (++v6 == v7)
        goto LABEL_27;
    }
    v10 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 112);
    v11 = *(_QWORD *)(v2 + 32);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 328) + 4 * (v10 & 0x7FFFFFFF)))
      v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 328) + 4 * (v10 & 0x7FFFFFFF));
    else
      v12 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 112);
    if ((v12 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v11 + 416)
      || (v13 = *(llvm::LiveInterval **)(*(_QWORD *)(v11 + 408) + 8 * (v12 & 0x7FFFFFFF))) == 0)
    {
      v13 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(v2 + 32), v12);
      this = llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)v11, v13);
      v9 = *(_QWORD *)(v8 + 8);
    }
    v14 = *((_DWORD *)v13 + 2);
    v15 = *(_QWORD **)v13;
    if (v14)
    {
      v16 = v15[3 * v14 - 2];
      v17 = *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24) | (v9 >> 1) & 3;
      v18 = (v16 >> 1) & 3 | *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24);
      v19 = *(_QWORD **)v13;
      v20 = *((unsigned int *)v13 + 2);
      if (v17 < v18)
      {
        do
        {
          v21 = v20 >> 1;
          v22 = v19[3 * (v20 >> 1) + 1];
          LODWORD(v22) = (v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24);
          v20 -= (v20 >> 1) + 1;
          v23 = v17 >= v22;
          if (v17 >= v22)
            v24 = v21 + 1;
          else
            v24 = 0;
          v19 += 3 * v24;
          if (!v23)
            v20 = v21;
        }
        while (v20);
        goto LABEL_17;
      }
    }
    else
    {
      v14 = 0;
    }
    v19 = &v15[3 * v14];
LABEL_17:
    if (v19 != &v15[3 * v14]
      && ((*v19 >> 1) & 3 | *(_DWORD *)((*v19 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24) | (v9 >> 1) & 3))
    {
      v25 = v19[2];
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26 >= 8)
        {
          v27 = *(const llvm::MachineInstr **)((v26 & 0xFFFFFFFFFFFFFFF8) + 16);
          if (v27)
            this = llvm::LiveRangeEdit::checkRematerializable(v2, v25, v27, a2);
        }
      }
    }
    goto LABEL_23;
  }
LABEL_27:
  *(_BYTE *)(v2 + 68) = 1;
  return this;
}

BOOL llvm::LiveRangeEdit::anyRematerializable(llvm::LiveRangeEdit *this, llvm::AAResults *a2)
{
  if (!*((_BYTE *)this + 68))
    llvm::LiveRangeEdit::scanRemattable((uint64_t)this, a2);
  return *((_DWORD *)this + 25) != *((_DWORD *)this + 26);
}

uint64_t llvm::LiveRangeEdit::allUsesAvailableAt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t result;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;

  v4 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v4)
  {
    v6 = a4 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(unsigned int **)(a2 + 32);
    v8 = &v7[8 * v4];
    v9 = a3 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3) < (*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | 1u))
      v10 = 1;
    else
      v10 = (a4 >> 1) & 3;
    v62 = v10;
    do
    {
      v11 = *v7;
      if (*v7)
        goto LABEL_65;
      v12 = v7[1];
      v13 = (v11 & 0x10FFF00) != 0x1000000 && (v11 & 0x30000000) == 0;
      if (!v13 || v12 == 0)
        goto LABEL_65;
      if (v12 - 1 <= 0x3FFFFFFE)
      {
        if (!llvm::MachineRegisterInfo::isConstantPhysReg(*(_QWORD **)(a1 + 24), v12)
          && ((*(uint64_t (**)(_QWORD, unsigned int *))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v7) & 1) == 0)
        {
          return 0;
        }
        goto LABEL_65;
      }
      v15 = *(_QWORD *)(a1 + 32);
      if ((v12 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v15 + 416)
        || (v16 = *(_QWORD *)(*(_QWORD *)(v15 + 408) + 8 * (v12 & 0x7FFFFFFF))) == 0)
      {
        v61 = *(_QWORD *)(a1 + 32);
        v16 = sub_1C4851220(v61, v12);
        v60 = *(_QWORD *)(v61 + 304);
        v54 = *(_QWORD *)(v61 + 248);
        v55 = *(_QWORD *)(v54 + 40);
        *(_QWORD *)v60 = v54;
        *(_QWORD *)(v60 + 8) = v55;
        *(_OWORD *)(v60 + 16) = *(_OWORD *)(v61 + 288);
        *(_QWORD *)(v60 + 32) = v61 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v60);
        *(_DWORD *)(v60 + 184) = 0;
        v56 = *(_QWORD *)(v61 + 256);
        v13 = *(_BYTE *)(v56 + 16) == 0;
        v57 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v56 + 24) + 16 * (*(_DWORD *)(v16 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
        v59 = !v13 && v57 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v61 + 304), (llvm::LiveInterval *)v16, v59);
        llvm::LiveIntervals::computeDeadValues(v61, v16, 0);
      }
      v17 = *(_DWORD *)(v16 + 8);
      v18 = *(_QWORD **)v16;
      if (v17)
      {
        v19 = v18[3 * v17 - 2];
        v20 = *(_DWORD *)(v9 + 24) | 1;
        v21 = (v19 >> 1) & 3 | *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24);
        v22 = *(unsigned int *)(v16 + 8);
        v23 = *(_QWORD **)v16;
        v24 = v22;
        if (v20 < v21)
        {
          do
          {
            v25 = v24 >> 1;
            v26 = v23[3 * (v24 >> 1) + 1];
            LODWORD(v26) = (v26 >> 1) & 3 | *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24);
            v24 -= (v24 >> 1) + 1;
            v27 = v20 >= v26;
            if (v20 >= v26)
              v28 = v25 + 1;
            else
              v28 = 0;
            v23 += 3 * v28;
            if (!v27)
              v24 = v25;
          }
          while (v24);
          v22 = *(unsigned int *)(v16 + 8);
          goto LABEL_31;
        }
      }
      else
      {
        v22 = 0;
      }
      v23 = &v18[3 * v22];
LABEL_31:
      v29 = &v18[3 * v22];
      if (v23 != v29
        && ((*v23 >> 1) & 3 | *(_DWORD *)((*v23 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v9 + 24) | 1u))
      {
        v30 = v23[2];
        if (v30)
        {
          result = 0;
          if (v9 == v6 || !v17)
            return result;
          v32 = *(_DWORD *)(v6 + 24) | v62;
          if (v32 >= ((*(v29 - 2) >> 1) & 3 | *(_DWORD *)((*(v29 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
            return 0;
          do
          {
            v33 = v22 >> 1;
            v34 = v18[3 * (v22 >> 1) + 1];
            LODWORD(v34) = (v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24);
            v22 -= (v22 >> 1) + 1;
            v35 = v32 >= v34;
            if (v32 >= v34)
              v36 = v33 + 1;
            else
              v36 = 0;
            v18 += 3 * v36;
            if (!v35)
              v22 = v33;
          }
          while (v22);
          if (v18 == v29
            || ((*v18 >> 1) & 3 | *(_DWORD *)((*v18 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v6 + 24) | v62)
            || v30 != v18[2])
          {
            return 0;
          }
          if ((*v7 & 0xFFF00) != 0)
          {
            v37 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 16);
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 176))(v37);
            v39 = *(_QWORD *)(v16 + 104);
            if (v39)
            {
              v40 = *(_QWORD *)(*(_QWORD *)(v38 + 232) + 8 * (((unint64_t)*v7 >> 8) & 0xFFF));
              while (2)
              {
                v41 = *(_QWORD *)(v39 + 112);
                if ((v41 & v40) == 0)
                  goto LABEL_64;
                v42 = *(_DWORD *)(v39 + 8);
                v43 = *(_QWORD **)v39;
                if (v42)
                {
                  v44 = v43[3 * v42 - 2];
                  v45 = v62;
                  v46 = *(_DWORD *)(v6 + 24) | v62;
                  v47 = (v44 >> 1) & 3 | *(_DWORD *)((v44 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v48 = *(_QWORD **)v39;
                  v49 = *(unsigned int *)(v39 + 8);
                  if (v46 < v47)
                  {
                    do
                    {
                      v50 = v49 >> 1;
                      v51 = v48[3 * (v49 >> 1) + 1];
                      LODWORD(v51) = (v51 >> 1) & 3 | *(_DWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v49 -= (v49 >> 1) + 1;
                      v52 = v46 >= v51;
                      if (v46 >= v51)
                        v53 = v50 + 1;
                      else
                        v53 = 0;
                      v48 += 3 * v53;
                      if (!v52)
                        v49 = v50;
                    }
                    while (v49);
LABEL_61:
                    if (v48 == &v43[3 * v42]
                      || ((*v48 >> 1) & 3 | *(_DWORD *)((*v48 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v6 + 24) | v45))
                    {
                      return 0;
                    }
                    v40 &= ~v41;
                    if (!v40)
                      goto LABEL_65;
LABEL_64:
                    v39 = *(_QWORD *)(v39 + 104);
                    if (!v39)
                      goto LABEL_65;
                    continue;
                  }
                }
                else
                {
                  v42 = 0;
                  v45 = v62;
                }
                break;
              }
              v48 = &v43[3 * v42];
              goto LABEL_61;
            }
          }
        }
      }
LABEL_65:
      v7 += 8;
    }
    while (v7 != v8);
  }
  return 1;
}

uint64_t llvm::LiveRangeEdit::canRematerializeAt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  v9 = sub_1C477672C(a1 + 80, a3);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = 96;
  if (v10 == *(_QWORD *)(a1 + 80))
    v11 = 100;
  if (v9 == (_QWORD *)(v10 + 8 * *(unsigned int *)(a1 + v11)))
    return 0;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(_WORD *)(v13 + 44);
  v15 = v13;
  if ((v14 & 4) != 0)
  {
    v15 = *(_QWORD *)(a2 + 8);
    do
      v15 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v15 + 44) & 4) != 0);
  }
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 288);
  v17 = *(_QWORD *)(a2 + 8);
  if ((v14 & 8) != 0)
  {
    v17 = *(_QWORD *)(a2 + 8);
    do
      v17 = *(_QWORD *)(v17 + 8);
    while ((*(_WORD *)(v17 + 44) & 8) != 0);
  }
  v18 = *(_QWORD *)(v17 + 8);
  if (v15 != v18)
  {
    while (1)
    {
      v19 = **(unsigned __int16 **)(v15 + 16);
      v20 = v19 > 0x17;
      v21 = (1 << v19) & 0x83E000;
      if (v20 || v21 == 0)
        break;
      v15 = *(_QWORD *)(v15 + 8);
      if (v15 == v18)
      {
        v15 = v18;
        break;
      }
    }
  }
  v23 = *(_QWORD *)(v16 + 368);
  v24 = *(unsigned int *)(v16 + 384);
  if ((_DWORD)v24)
  {
    LODWORD(v25) = ((v15 >> 4) ^ (v15 >> 9)) & (v24 - 1);
    v26 = (uint64_t *)(v23 + 16 * v25);
    v27 = *v26;
    if (v15 == *v26)
      goto LABEL_15;
    v29 = 1;
    while (v27 != -4096)
    {
      v30 = v25 + v29++;
      v25 = v30 & (v24 - 1);
      v27 = *(_QWORD *)(v23 + 16 * v25);
      if (v15 == v27)
      {
        v26 = (uint64_t *)(v23 + 16 * v25);
        goto LABEL_15;
      }
    }
  }
  v26 = (uint64_t *)(v23 + 16 * v24);
LABEL_15:
  v28 = v26[1];
  if (a5)
  {
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 152))(*(_QWORD *)(a1 + 48)))
      return 0;
    v13 = *(_QWORD *)(a2 + 8);
  }
  return llvm::LiveRangeEdit::allUsesAvailableAt(a1, v13, v28, a4);
}

unint64_t llvm::LiveRangeEdit::rematerializeAt(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, uint64_t *a5, uint64_t a6, int a7)
{
  unint64_t v11;

  (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 176))(*(_QWORD *)(a1 + 48), a2, a3, a4, 0, a5[1], a6);
  v11 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (!v11 || (*(_BYTE *)v11 & 4) == 0)
  {
    while ((*(_WORD *)(v11 + 44) & 4) != 0)
      v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
  }
  **(_DWORD **)(v11 + 32) &= ~0x4000000u;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 144), *a5);
  return sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 288), v11, a7) & 0xFFFFFFFFFFFFFFF8 | 4;
}

uint64_t llvm::LiveRangeEdit::eraseVirtReg(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 32))(result, a2);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = a2 & 0x7FFFFFFF;
      v7 = *(_QWORD *)(v5 + 408);
      v8 = *(_QWORD *)(v7 + 8 * v6);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 104);
        if (v9)
        {
          do
          {
            v13 = *(_QWORD *)(v9 + 96);
            v12 = *(_QWORD *)(v9 + 104);
            *(_QWORD *)(v9 + 96) = 0;
            if (v13)
            {
              v17 = v9;
              v19 = v12;
              sub_1C47655E8(v13, *(_QWORD **)(v13 + 8));
              MEMORY[0x1CAA32FC0](v13, 0x1020C4062D53EE8);
              v9 = v17;
              v12 = v19;
            }
            v14 = *(void **)(v9 + 64);
            if (v14 != (void *)(v9 + 80))
            {
              v18 = v12;
              v16 = v9;
              free(v14);
              v9 = v16;
              v12 = v18;
            }
            if (*(_QWORD *)v9 != v9 + 16)
            {
              v15 = v12;
              free(*(void **)v9);
              v12 = v15;
            }
            v9 = v12;
          }
          while (v12);
        }
        v10 = *(_QWORD *)(v8 + 96);
        *(_QWORD *)(v8 + 96) = 0;
        *(_QWORD *)(v8 + 104) = 0;
        if (v10)
        {
          sub_1C47655E8(v10, *(_QWORD **)(v10 + 8));
          MEMORY[0x1CAA32FC0](v10, 0x1020C4062D53EE8);
        }
        v11 = *(void **)(v8 + 64);
        if (v11 != (void *)(v8 + 80))
          free(v11);
        if (*(_QWORD *)v8 != v8 + 16)
          free(*(void **)v8);
        result = MEMORY[0x1CAA32FC0](v8, 0x10A0C408DA535C6);
        v7 = *(_QWORD *)(v5 + 408);
      }
      *(_QWORD *)(v7 + 8 * v6) = 0;
    }
  }
  return result;
}

uint64_t llvm::LiveRangeEdit::foldAsLoad(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int **v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  __int16 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v50;
  void *v51;
  uint64_t v52;
  _QWORD v53[5];

  v53[4] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned int *)(a2 + 112);
  if ((v7 & 0x80000000) != 0)
    v8 = (int **)(*(_QWORD *)(v6 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  else
    v8 = (int **)(*(_QWORD *)(v6 + 272) + 8 * v7);
  v9 = *v8;
  if (!v9)
    return 0;
  while (1)
  {
    v10 = *v9;
    if ((*v9 & 0x80000000) == 0)
      break;
    v9 = (int *)*((_QWORD *)v9 + 3);
    if (!v9)
      return 0;
  }
  v11 = 0;
  v12 = 0;
LABEL_9:
  v13 = *((_QWORD *)v9 + 1);
  if ((v10 & 0x1000000) != 0)
  {
    if ((!v11 || v11 == v13) && (*(_BYTE *)(*(_QWORD *)(v13 + 16) + 10) & 4) != 0)
      goto LABEL_24;
    return 0;
  }
  if ((v10 & 0x10000000) != 0)
  {
    v13 = v11;
    goto LABEL_24;
  }
  v14 = v12 == v13 || v12 == 0;
  v15 = v10 & 0xFFF00;
  v16 = v14 && v15 == 0;
  v12 = *((_QWORD *)v9 + 1);
  v13 = v11;
  if (!v16)
    return 0;
LABEL_24:
  while (1)
  {
    v9 = (int *)*((_QWORD *)v9 + 3);
    if (!v9)
      break;
    v10 = *v9;
    if ((*v9 & 0x80000000) == 0)
    {
      v11 = v13;
      goto LABEL_9;
    }
  }
  v17 = 0;
  if (v13 && v12)
  {
    v18 = *(_WORD *)(v13 + 44);
    v19 = v13;
    if ((v18 & 4) != 0)
    {
      v19 = v13;
      do
        v19 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v19 + 44) & 4) != 0);
    }
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 288);
    v21 = v13;
    if ((v18 & 8) != 0)
    {
      v21 = v13;
      do
        v21 = *(_QWORD *)(v21 + 8);
      while ((*(_WORD *)(v21 + 44) & 8) != 0);
    }
    v22 = *(_QWORD *)(v21 + 8);
    if (v19 != v22)
    {
      while (1)
      {
        v23 = **(unsigned __int16 **)(v19 + 16);
        v24 = v23 > 0x17;
        v25 = (1 << v23) & 0x83E000;
        if (v24 || v25 == 0)
          break;
        v19 = *(_QWORD *)(v19 + 8);
        if (v19 == v22)
        {
          v19 = *(_QWORD *)(v21 + 8);
          break;
        }
      }
    }
    v27 = *(_QWORD *)(v20 + 368);
    v28 = *(unsigned int *)(v20 + 384);
    if ((_DWORD)v28)
    {
      LODWORD(v29) = ((v19 >> 4) ^ (v19 >> 9)) & (v28 - 1);
      v30 = (uint64_t *)(v27 + 16 * v29);
      v31 = *v30;
      if (v19 == *v30)
        goto LABEL_45;
      v32 = 1;
      while (v31 != -4096)
      {
        v33 = v29 + v32++;
        v29 = v33 & (v28 - 1);
        v31 = *(_QWORD *)(v27 + 16 * v29);
        if (v19 == v31)
        {
          v30 = (uint64_t *)(v27 + 16 * v29);
          goto LABEL_45;
        }
      }
    }
    v30 = (uint64_t *)(v27 + 16 * v28);
LABEL_45:
    v34 = *(_WORD *)(v12 + 44);
    v35 = v12;
    if ((v34 & 4) != 0)
    {
      v35 = v12;
      do
        v35 = *(_QWORD *)v35 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v35 + 44) & 4) != 0);
    }
    v36 = v12;
    if ((v34 & 8) != 0)
    {
      v36 = v12;
      do
        v36 = *(_QWORD *)(v36 + 8);
      while ((*(_WORD *)(v36 + 44) & 8) != 0);
    }
    v37 = v30[1];
    v38 = *(_QWORD *)(v36 + 8);
    if (v35 != v38)
    {
      while (1)
      {
        v39 = **(unsigned __int16 **)(v35 + 16);
        v24 = v39 > 0x17;
        v40 = (1 << v39) & 0x83E000;
        if (v24 || v40 == 0)
          break;
        v35 = *(_QWORD *)(v35 + 8);
        if (v35 == v38)
        {
          v35 = *(_QWORD *)(v36 + 8);
          break;
        }
      }
    }
    if ((_DWORD)v28)
    {
      LODWORD(v42) = ((v35 >> 4) ^ (v35 >> 9)) & (v28 - 1);
      v43 = (uint64_t *)(v27 + 16 * v42);
      v44 = *v43;
      if (v35 == *v43)
        goto LABEL_61;
      v45 = 1;
      while (v44 != -4096)
      {
        v46 = v42 + v45++;
        v42 = v46 & (v28 - 1);
        v44 = *(_QWORD *)(v27 + 16 * v42);
        if (v35 == v44)
        {
          v43 = (uint64_t *)(v27 + 16 * v42);
          goto LABEL_61;
        }
      }
    }
    v43 = (uint64_t *)(v27 + 16 * v28);
LABEL_61:
    if (!llvm::LiveRangeEdit::allUsesAvailableAt(a1, v13, v37, v43[1]))
      return 0;
    v50 = 1;
    if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v13, 0, &v50))
      return 0;
    v51 = v53;
    v52 = 0x800000000;
    if ((llvm::MachineInstr::readsWritesVirtualRegister(v12, *(_DWORD *)(a2 + 112), (uint64_t)&v51) & 0x100) != 0)
    {
      v17 = 0;
    }
    else
    {
      v17 = llvm::TargetInstrInfo::foldMemoryOperand(*(_QWORD **)(a1 + 48), (uint64_t *)v12, (__int32 *)v51, v52, v13, *(_QWORD *)(a1 + 32));
      if (v17)
      {
        sub_1C49FB860(*(int32x2_t **)(*(_QWORD *)(a1 + 32) + 288), v12, v17);
        if (llvm::MachineInstr::shouldUpdateCallSiteInfo((llvm::MachineInstr *)v12))
          llvm::MachineFunction::moveCallSiteInfo(*(llvm::MachineFunction **)(*(_QWORD *)(v12 + 24) + 32), (const llvm::MachineInstr *)v12, (const llvm::MachineInstr *)v17);
        v47 = v12;
        if ((*(_BYTE *)v12 & 4) == 0)
        {
          v47 = v12;
          if ((*(_WORD *)(v12 + 44) & 8) != 0)
          {
            v47 = v12;
            do
              v47 = *(_QWORD *)(v47 + 8);
            while ((*(_WORD *)(v47 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v12 + 24) + 40, v12, *(_QWORD *)(v47 + 8));
        llvm::MachineInstr::addRegisterDead((llvm::MachineInstr *)v13, *(_DWORD *)(a2 + 112), 0, 0);
        v48 = *(unsigned int *)(a3 + 8);
        if (v48 >= *(_DWORD *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v48 + 1, 8);
          LODWORD(v48) = *(_DWORD *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v48) = v13;
        ++*(_DWORD *)(a3 + 8);
        v17 = 1;
      }
    }
    if (v51 != v53)
      free(v51);
  }
  return v17;
}

uint64_t llvm::LiveRangeEdit::useIsKill(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v5;
  __int16 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;

  v5 = *((_QWORD *)a3 + 1);
  v6 = *(_WORD *)(v5 + 44);
  v7 = v5;
  if ((v6 & 4) != 0)
  {
    v7 = *((_QWORD *)a3 + 1);
    do
      v7 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v7 + 44) & 4) != 0);
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 288);
  if ((v6 & 8) != 0)
  {
    do
      v5 = *(_QWORD *)(v5 + 8);
    while ((*(_WORD *)(v5 + 44) & 8) != 0);
  }
  v9 = *(_QWORD *)(v5 + 8);
  if (v7 != v9)
  {
    while (1)
    {
      v10 = **(unsigned __int16 **)(v7 + 16);
      v11 = v10 > 0x17;
      v12 = (1 << v10) & 0x83E000;
      if (v11 || v12 == 0)
        break;
      v7 = *(_QWORD *)(v7 + 8);
      if (v7 == v9)
      {
        v7 = v9;
        break;
      }
    }
  }
  v14 = *(_QWORD *)(v8 + 368);
  v15 = *(unsigned int *)(v8 + 384);
  if ((_DWORD)v15)
  {
    LODWORD(v16) = ((v7 >> 4) ^ (v7 >> 9)) & (v15 - 1);
    v17 = (uint64_t *)(v14 + 16 * v16);
    v18 = *v17;
    if (v7 == *v17)
      goto LABEL_11;
    v34 = 1;
    while (v18 != -4096)
    {
      v35 = v16 + v34++;
      v16 = v35 & (v15 - 1);
      v18 = *(_QWORD *)(v14 + 16 * v16);
      if (v7 == v18)
      {
        v17 = (uint64_t *)(v14 + 16 * v16);
        goto LABEL_11;
      }
    }
  }
  v17 = (uint64_t *)(v14 + 16 * v15);
LABEL_11:
  v19 = v17[1] & 0xFFFFFFFFFFFFFFF8;
  v20 = *(_DWORD *)(a2 + 8);
  v21 = *(_QWORD **)a2;
  if (!v20)
  {
    v20 = 0;
    goto LABEL_49;
  }
  v22 = v21[3 * v20 - 2];
  v23 = *(_DWORD *)(v19 + 24);
  if (v23 >= ((v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_49:
    v24 = &v21[3 * v20];
    goto LABEL_20;
  }
  v24 = *(_QWORD **)a2;
  v25 = *(unsigned int *)(a2 + 8);
  do
  {
    v26 = v25 >> 1;
    v27 = v24[3 * (v25 >> 1) + 1];
    LODWORD(v27) = (v27 >> 1) & 3 | *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24);
    v25 -= (v25 >> 1) + 1;
    v28 = v23 >= v27;
    if (v23 >= v27)
      v29 = v26 + 1;
    else
      v29 = 0;
    v24 += 3 * v29;
    if (!v28)
      v25 = v26;
  }
  while (v25);
LABEL_20:
  if (v24 == &v21[3 * v20]
    || ((*v24 >> 1) & 3 | *(_DWORD *)((*v24 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v19 + 24)
    || v19 != (v24[1] & 0xFFFFFFFFFFFFFFF8))
  {
    v30 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 16);
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 176))(v30);
    v32 = *(_QWORD *)(a2 + 104);
    if (!v32)
      return 0;
    v36 = *(_QWORD *)(*(_QWORD *)(v31 + 232) + 8 * (((unint64_t)*a3 >> 8) & 0xFFF));
    while (1)
    {
      if ((*(_QWORD *)(v32 + 112) & v36) == 0)
        goto LABEL_42;
      v37 = *(_DWORD *)(v32 + 8);
      v38 = *(_QWORD **)v32;
      if (!v37)
        break;
      v39 = v38[3 * v37 - 2];
      v40 = *(_DWORD *)(v19 + 24);
      v41 = (v39 >> 1) & 3 | *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24);
      v42 = *(_QWORD **)v32;
      v43 = *(unsigned int *)(v32 + 8);
      if (v40 >= v41)
        goto LABEL_44;
      do
      {
        v44 = v43 >> 1;
        v45 = v42[3 * (v43 >> 1) + 1];
        LODWORD(v45) = (v45 >> 1) & 3 | *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 24);
        v43 -= (v43 >> 1) + 1;
        v46 = v40 >= v45;
        if (v40 >= v45)
          v47 = v44 + 1;
        else
          v47 = 0;
        v42 += 3 * v47;
        if (!v46)
          v43 = v44;
      }
      while (v43);
LABEL_39:
      if (v42 != &v38[3 * v37]
        && ((*v42 >> 1) & 3 | *(_DWORD *)((*v42 & 0xFFFFFFFFFFFFFFF8) + 24)) <= *(_DWORD *)(v19 + 24)
        && v19 == (v42[1] & 0xFFFFFFFFFFFFFFF8))
      {
        return 1;
      }
LABEL_42:
      result = 0;
      v32 = *(_QWORD *)(v32 + 104);
      if (!v32)
        return result;
    }
    v37 = 0;
LABEL_44:
    v42 = &v38[3 * v37];
    goto LABEL_39;
  }
  return 1;
}

void llvm::LiveRangeEdit::eliminateDeadDef(uint64_t a1, uint64_t a2, uint64_t a3, llvm::AAResults *a4)
{
  __int16 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  int v29;
  uint64_t v30;
  llvm::LiveInterval *v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  BOOL v49;
  uint64_t v50;
  llvm::LiveInterval *v51;
  unsigned int v52;
  BOOL v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  llvm::TargetInstrInfo *v79;
  uint64_t EmptyIntervalFrom;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  int32x2_t *v86;
  int32x2_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  _QWORD *v105;
  size_t v106;
  uint64_t v107;
  unsigned int *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v129;
  uint64_t v130;
  int v131;
  char v132;
  _BOOL4 v133;
  unint64_t v134;
  unint64_t v135;
  _QWORD v136[3];
  BOOL v137;
  void *v138;
  uint64_t v139;
  _QWORD v140[6];

  v140[4] = *MEMORY[0x1E0C80C00];
  v8 = *(_WORD *)(a2 + 44);
  v9 = a2;
  if ((v8 & 4) != 0)
  {
    v9 = a2;
    do
      v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v9 + 44) & 4) != 0);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 288);
  v11 = a2;
  if ((v8 & 8) != 0)
  {
    v11 = a2;
    do
      v11 = *(_QWORD *)(v11 + 8);
    while ((*(_WORD *)(v11 + 44) & 8) != 0);
  }
  v12 = *(_QWORD *)(v11 + 8);
  if (v9 != v12)
  {
    while (1)
    {
      v13 = **(unsigned __int16 **)(v9 + 16);
      v14 = v13 > 0x17;
      v15 = (1 << v13) & 0x83E000;
      v16 = v14 || v15 == 0;
      if (v16)
        break;
      v9 = *(_QWORD *)(v9 + 8);
      if (v9 == v12)
      {
        v9 = v12;
        break;
      }
    }
  }
  v17 = *(_QWORD *)(v10 + 368);
  v18 = *(unsigned int *)(v10 + 384);
  if (!(_DWORD)v18)
    goto LABEL_16;
  LODWORD(v19) = ((v9 >> 4) ^ (v9 >> 9)) & (v18 - 1);
  v20 = (uint64_t *)(v17 + 16 * v19);
  v21 = *v20;
  if (v9 != *v20)
  {
    v22 = 1;
    while (v21 != -4096)
    {
      v23 = v19 + v22++;
      v19 = v23 & (v18 - 1);
      v21 = *(_QWORD *)(v17 + 16 * v19);
      if (v9 == v21)
      {
        v20 = (uint64_t *)(v17 + 16 * v19);
        goto LABEL_17;
      }
    }
LABEL_16:
    v20 = (uint64_t *)(v17 + 16 * v18);
  }
LABEL_17:
  if ((v8 & 0xC) != 0)
    return;
  if (**(unsigned __int16 **)(a2 + 16) - 1 < 2)
    return;
  v24 = v20[1];
  v137 = 0;
  if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)a2, 0, &v137))
    return;
  v134 = v24 & 0xFFFFFFFFFFFFFFF8;
  v25 = v24 & 0xFFFFFFFFFFFFFFF8 | 4;
  v138 = v140;
  v139 = 0x800000000;
  v26 = *(_QWORD *)(a1 + 40);
  if (!v26
    || (v27 = *(_DWORD **)(a2 + 32), (*v27 & 0x10000FF) != 0x1000000)
    || *(_BYTE *)(*(_QWORD *)(a2 + 16) + 4) != 1)
  {
    v131 = 0;
LABEL_39:
    v133 = 0;
    goto LABEL_40;
  }
  v28 = *(_DWORD *)(*(_QWORD *)(v26 + 328) + 4 * (v27[1] & 0x7FFFFFFF));
  v131 = v27[1];
  if (v28)
    v29 = v28;
  else
    v29 = v27[1];
  v30 = *(_QWORD *)(a1 + 32);
  if ((v29 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v30 + 416)
    || (v31 = *(llvm::LiveInterval **)(*(_QWORD *)(v30 + 408) + 8 * (v29 & 0x7FFFFFFF))) == 0)
  {
    v31 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 32), v29);
    v124 = *(_QWORD *)(v30 + 304);
    v125 = *(_QWORD *)(v30 + 248);
    *(_QWORD *)v124 = v125;
    *(_QWORD *)(v124 + 8) = *(_QWORD *)(v125 + 40);
    *(_OWORD *)(v124 + 16) = *(_OWORD *)(v30 + 288);
    *(_QWORD *)(v124 + 32) = v30 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v124);
    *(_DWORD *)(v124 + 184) = 0;
    v126 = *(_QWORD *)(v30 + 256);
    v16 = *(_BYTE *)(v126 + 16) == 0;
    v127 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v126 + 24) + 16 * (*((_DWORD *)v31 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                              + 34);
    v129 = !v16 && v127 != 0;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v30 + 304), v31, v129);
    llvm::LiveIntervals::computeDeadValues(v30, (uint64_t)v31, 0);
  }
  v32 = *((_DWORD *)v31 + 2);
  v33 = *(_QWORD **)v31;
  if (!v32)
  {
    v32 = 0;
    goto LABEL_188;
  }
  v34 = v33[3 * v32 - 2];
  v35 = *(_DWORD *)(v134 + 24) | 2;
  if (v35 >= ((v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_188:
    v36 = &v33[3 * v32];
    goto LABEL_189;
  }
  v36 = *(_QWORD **)v31;
  v37 = *((unsigned int *)v31 + 2);
  do
  {
    v38 = v37 >> 1;
    v39 = v36[3 * (v37 >> 1) + 1];
    LODWORD(v39) = (v39 >> 1) & 3 | *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24);
    v37 -= (v37 >> 1) + 1;
    v40 = v35 >= v39;
    if (v35 >= v39)
      v41 = v38 + 1;
    else
      v41 = 0;
    v36 += 3 * v41;
    if (!v40)
      v37 = v38;
  }
  while (v37);
LABEL_189:
  if (v36 == &v33[3 * v32])
    goto LABEL_39;
  if (((*v36 >> 1) & 3 | *(_DWORD *)((*v36 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v134 + 24) | 2u))
    goto LABEL_39;
  v123 = v36[2];
  if (!v123)
    goto LABEL_39;
  v133 = (*(_QWORD *)(v123 + 8) & 0xFFFFFFFFFFFFFFF8) == v134;
LABEL_40:
  v135 = v25;
  v42 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v42)
  {
    v43 = 0;
LABEL_116:
    if (v133 && !((*(_QWORD *)(a1 + 72) == 0) | v43 & 1))
    {
      v78 = *(_QWORD *)(a2 + 16);
      if (*(_WORD *)v78 == 10
        || (*(_BYTE *)(v78 + 11) & 0x20) != 0
        && ((v79 = *(llvm::TargetInstrInfo **)(a1 + 48),
             ((*(uint64_t (**)(llvm::TargetInstrInfo *, uint64_t, llvm::AAResults *))(*(_QWORD *)v79 + 32))(v79, a2, a4) & 1) != 0)|| llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(v79, (const llvm::MachineInstr *)a2, a4)))
      {
        EmptyIntervalFrom = llvm::LiveRangeEdit::createEmptyIntervalFrom((_QWORD *)a1, v131, 0);
        v81 = sub_1C484358C(*(_QWORD *)(a1 + 32) + 312, 16, 3);
        v82 = *(unsigned int *)(EmptyIntervalFrom + 72);
        *(_DWORD *)v81 = v82;
        *(_QWORD *)(v81 + 8) = v135;
        if (v82 >= *(_DWORD *)(EmptyIntervalFrom + 76))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(EmptyIntervalFrom + 64, EmptyIntervalFrom + 80, v82 + 1, 8);
          LODWORD(v82) = *(_DWORD *)(EmptyIntervalFrom + 72);
        }
        *(_QWORD *)(*(_QWORD *)(EmptyIntervalFrom + 64) + 8 * v82) = v81;
        ++*(_DWORD *)(EmptyIntervalFrom + 72);
        v136[0] = v135;
        v136[1] = v134 | 6;
        v136[2] = v81;
        llvm::LiveRange::addSegment(EmptyIntervalFrom, (uint64_t)v136);
        --*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8);
        sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a1 + 72), a2);
        v83 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 16);
        v84 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 176))(v83);
        llvm::MachineInstr::substituteRegister(a2, v131, *(_DWORD *)(EmptyIntervalFrom + 112), 0, v84);
        **(_DWORD **)(a2 + 32) |= 0x4000000u;
        goto LABEL_139;
      }
    }
    v85 = *(_QWORD *)(a1 + 56);
    if (v85)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v85 + 24))(v85, a2);
    v86 = *(int32x2_t **)(*(_QWORD *)(a1 + 32) + 288);
    v87 = v86[46];
    v88 = v86[48].u32[0];
    if ((_DWORD)v88)
    {
      LODWORD(v89) = (v88 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v90 = (uint64_t *)(*(_QWORD *)&v87 + 16 * v89);
      v91 = *v90;
      if (*v90 == a2)
      {
LABEL_134:
        if (v90 != (uint64_t *)(*(_QWORD *)&v87 + 16 * v88))
        {
          v94 = v90[1] & 0xFFFFFFFFFFFFFFF8;
          *v90 = -8192;
          v86[47] = vadd_s32(v86[47], (int32x2_t)0x1FFFFFFFFLL);
          *(_QWORD *)(v94 + 16) = 0;
        }
        v95 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v95 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v95 = a2;
            do
              v95 = *(_QWORD *)(v95 + 8);
            while ((*(_WORD *)(v95 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v95 + 8));
        goto LABEL_139;
      }
      v92 = 1;
      while (v91 != -4096)
      {
        v93 = v89 + v92++;
        v89 = v93 & (v88 - 1);
        v91 = *(_QWORD *)(*(_QWORD *)&v87 + 16 * v89);
        if (v91 == a2)
        {
          v90 = (uint64_t *)(*(_QWORD *)&v87 + 16 * v89);
          goto LABEL_134;
        }
      }
    }
    v90 = (uint64_t *)(*(_QWORD *)&v87 + 16 * v88);
    goto LABEL_134;
  }
  v132 = 0;
  v43 = 0;
  v44 = *(unsigned int **)(a2 + 32);
  v45 = &v44[8 * v42];
  do
  {
    while (1)
    {
      v46 = *v44;
      if (*v44)
        goto LABEL_96;
      v47 = v44[1];
      if ((v47 & 0x80000000) != 0)
        break;
      v49 = (v46 & 0x10FFF00) == 0x1000000 || (v46 & 0x30000000) != 0 || (_DWORD)v47 == 0;
      if (v49 || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 352) + ((v47 >> 3) & 0x1FFFFFF8)) >> v47) & 1) != 0)
      {
        if ((v46 & 0x1000000) != 0)
          llvm::LiveIntervals::removePhysRegDefAt(*(_QWORD **)(a1 + 32), v44[1], v135);
        goto LABEL_96;
      }
      v44 += 8;
      v132 = 1;
      if (v44 == v45)
        goto LABEL_108;
    }
    v50 = *(_QWORD *)(a1 + 32);
    if ((v47 & 0x7FFFFFFF) >= *(unsigned int *)(v50 + 416)
      || (v51 = *(llvm::LiveInterval **)(*(_QWORD *)(v50 + 408) + 8 * (v47 & 0x7FFFFFFF))) == 0)
    {
      v51 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 32), v44[1]);
      v130 = *(_QWORD *)(v50 + 304);
      v69 = *(_QWORD *)(v50 + 248);
      *(_QWORD *)v130 = v69;
      *(_QWORD *)(v130 + 8) = *(_QWORD *)(v69 + 40);
      *(_OWORD *)(v130 + 16) = *(_OWORD *)(v50 + 288);
      *(_QWORD *)(v130 + 32) = v50 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v130);
      *(_DWORD *)(v130 + 184) = 0;
      v70 = *(_QWORD *)(v50 + 256);
      v16 = *(_BYTE *)(v70 + 16) == 0;
      v71 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v70 + 24) + 16 * (*((_DWORD *)v51 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                               + 34);
      v73 = !v16 && v71 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v50 + 304), v51, v73);
      llvm::LiveIntervals::computeDeadValues(v50, (uint64_t)v51, 0);
    }
    if ((llvm::MachineInstr::readsWritesVirtualRegister(a2, v47, 0) & 1) != 0)
    {
      if (**(_WORD **)(a2 + 16) == 19)
        goto LABEL_71;
      v52 = *v44;
      if ((*v44 & 0x1000000) != 0)
        goto LABEL_71;
    }
    else
    {
      v52 = *v44;
    }
    if ((v52 & 0x30000000) != 0 || (v52 & 0x10FFF00) == 0x1000000)
      goto LABEL_63;
    if (!llvm::MachineRegisterInfo::hasOneNonDBGUse(*(_QWORD *)(a1 + 24), v47)
      && (llvm::LiveRangeEdit::useIsKill(a1, (uint64_t)v51, v44) & 1) == 0)
    {
      v52 = *v44;
LABEL_63:
      v53 = (v52 & 0xFFF00) != 0;
      if ((v52 & 0x1000000) == 0)
        v53 = 1;
      if ((v52 & 0x30000000) != 0)
        v53 = 0;
      v43 |= v53;
      if ((v52 & 0x1000000) != 0)
        goto LABEL_76;
      goto LABEL_96;
    }
LABEL_71:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)v51);
    if (v54)
    {
      v55 = *(unsigned int *)(a3 + 104);
      if (v55 >= *(unsigned int *)(a3 + 108))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 96, a3 + 112, v55 + 1, 8);
        v55 = *(unsigned int *)(a3 + 104);
      }
      *(_QWORD *)(*(_QWORD *)(a3 + 96) + 8 * v55) = v51;
      ++*(_DWORD *)(a3 + 104);
    }
    if ((*v44 & 0x1000000) != 0)
    {
LABEL_76:
      v56 = *(_QWORD *)(a1 + 56);
      if (!v56)
        goto LABEL_92;
      v57 = *((_DWORD *)v51 + 2);
      v58 = *(_QWORD **)v51;
      if (v57)
      {
        v59 = v58[3 * v57 - 2];
        v60 = *(_DWORD *)(v134 + 24) | 2;
        v61 = (v59 >> 1) & 3 | *(_DWORD *)((v59 & 0xFFFFFFFFFFFFFFF8) + 24);
        v62 = *(_QWORD **)v51;
        v63 = *((unsigned int *)v51 + 2);
        if (v60 < v61)
        {
          do
          {
            v64 = v63 >> 1;
            v65 = v62[3 * (v63 >> 1) + 1];
            LODWORD(v65) = (v65 >> 1) & 3 | *(_DWORD *)((v65 & 0xFFFFFFFFFFFFFFF8) + 24);
            v63 -= (v63 >> 1) + 1;
            v66 = v60 >= v65;
            if (v60 >= v65)
              v67 = v64 + 1;
            else
              v67 = 0;
            v62 += 3 * v67;
            if (!v66)
              v63 = v64;
          }
          while (v63);
LABEL_88:
          if (v62 != &v58[3 * v57]
            && ((*v62 >> 1) & 3 | *(_DWORD *)((*v62 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v134 + 24) | 2u)
            && v62[2])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v56 + 40))(v56, *((unsigned int *)v51 + 28));
          }
LABEL_92:
          llvm::LiveIntervals::removeVRegDefAt(*(_QWORD *)(a1 + 32), (uint64_t)v51, v135);
          if (!*((_DWORD *)v51 + 2))
          {
            v68 = v139;
            if (v139 >= (unint64_t)HIDWORD(v139))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, (uint64_t)v140, v139 + 1, 4);
              v68 = v139;
            }
            *((_DWORD *)v138 + v68) = v47;
            LODWORD(v139) = v139 + 1;
          }
          goto LABEL_96;
        }
      }
      else
      {
        v57 = 0;
      }
      v62 = &v58[3 * v57];
      goto LABEL_88;
    }
LABEL_96:
    v44 += 8;
  }
  while (v44 != v45);
  if ((v132 & 1) == 0)
    goto LABEL_116;
LABEL_108:
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 336;
  v74 = *(_DWORD *)(a2 + 40);
  if (v74)
  {
    v75 = v74 - 1;
    v76 = 32 * (v74 - 1);
    do
    {
      v77 = *(_QWORD *)(a2 + 32);
      if (*(_BYTE *)(v77 + v76) || (*(_DWORD *)(v77 + v76 + 4) - 1) >= 0x3FFFFFFF)
        llvm::MachineInstr::removeOperand(a2, v75);
      v76 -= 32;
      --v75;
    }
    while (v75 != -1);
  }
LABEL_139:
  v96 = v139;
  if ((_DWORD)v139)
  {
    v97 = 0;
    do
    {
      v98 = *((unsigned int *)v138 + v97);
      v99 = *(_QWORD *)(a1 + 32);
      v100 = v98 & 0x7FFFFFFF;
      if (v100 < *(unsigned int *)(v99 + 416))
      {
        v101 = *(_QWORD *)(*(_QWORD *)(v99 + 408) + 8 * v100);
        if (v101)
        {
          v102 = *(_QWORD *)(a1 + 24);
          if ((v98 & 0x80000000) != 0)
            v103 = (uint64_t *)(*(_QWORD *)(v102 + 24) + 16 * v100 + 8);
          else
            v103 = (uint64_t *)(*(_QWORD *)(v102 + 272) + 8 * v98);
          v104 = *v103;
          if (v104)
          {
            while ((*(_DWORD *)v104 & 0x80000000) != 0)
            {
              v104 = *(_QWORD *)(v104 + 24);
              if (!v104)
                goto LABEL_149;
            }
          }
          else
          {
LABEL_149:
            v105 = sub_1C477672C(a3, v101);
            v107 = *(_QWORD *)(a3 + 8);
            if (v107 == *(_QWORD *)a3)
              v108 = (unsigned int *)(a3 + 20);
            else
              v108 = (unsigned int *)(a3 + 16);
            if (v105 != (_QWORD *)(v107 + 8 * *v108))
            {
              *v105 = -2;
              ++*(_DWORD *)(a3 + 24);
              v109 = *(char **)(a3 + 96);
              v110 = *(unsigned int *)(a3 + 104);
              v111 = &v109[8 * v110];
              if ((_DWORD)v110)
              {
                v112 = 8 * v110;
                while (*(_QWORD *)v109 != v101)
                {
                  v109 += 8;
                  v112 -= 8;
                  if (!v112)
                  {
                    v109 = v111;
                    break;
                  }
                }
              }
              v106 = v111 - (v109 + 8);
              if (v111 != v109 + 8)
              {
                memmove(v109, v109 + 8, v106);
                LODWORD(v110) = *(_DWORD *)(a3 + 104);
              }
              *(_DWORD *)(a3 + 104) = v110 - 1;
            }
            v113 = *(_QWORD *)(a1 + 56);
            if (v113
              && (*(unsigned int (**)(uint64_t, uint64_t, size_t))(*(_QWORD *)v113 + 32))(v113, v98, v106))
            {
              v114 = *(_QWORD *)(a1 + 32);
              v115 = *(_QWORD *)(v114 + 408);
              v116 = *(_QWORD *)(v115 + 8 * v100);
              if (v116)
              {
                v117 = *(_QWORD *)(v116 + 104);
                if (v117)
                {
                  do
                  {
                    v120 = *(_QWORD *)(v117 + 96);
                    v121 = *(_QWORD *)(v117 + 104);
                    *(_QWORD *)(v117 + 96) = 0;
                    if (v120)
                    {
                      sub_1C47655E8(v120, *(_QWORD **)(v120 + 8));
                      MEMORY[0x1CAA32FC0](v120, 0x1020C4062D53EE8);
                    }
                    v122 = *(void **)(v117 + 64);
                    if (v122 != (void *)(v117 + 80))
                      free(v122);
                    if (*(_QWORD *)v117 != v117 + 16)
                      free(*(void **)v117);
                    v117 = v121;
                  }
                  while (v121);
                }
                v118 = *(_QWORD *)(v116 + 96);
                *(_QWORD *)(v116 + 96) = 0;
                *(_QWORD *)(v116 + 104) = 0;
                if (v118)
                {
                  sub_1C47655E8(v118, *(_QWORD **)(v118 + 8));
                  MEMORY[0x1CAA32FC0](v118, 0x1020C4062D53EE8);
                }
                v119 = *(void **)(v116 + 64);
                if (v119 != (void *)(v116 + 80))
                  free(v119);
                if (*(_QWORD *)v116 != v116 + 16)
                  free(*(void **)v116);
                MEMORY[0x1CAA32FC0](v116, 0x10A0C408DA535C6);
                v115 = *(_QWORD *)(v114 + 408);
              }
              *(_QWORD *)(v115 + 8 * v100) = 0;
            }
          }
        }
      }
      ++v97;
    }
    while (v97 != v96);
  }
  if (v138 != v140)
    free(v138);
}

void llvm::LiveRangeEdit::eliminateDeadDefs(uint64_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4, llvm::AAResults *a5)
{
  unsigned int v10;
  unsigned int *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[64];
  char *v35;
  char *v36;
  uint64_t v37;
  int v38;
  _BYTE v39[64];
  void *v40;
  uint64_t v41;
  _QWORD v42[10];

  v42[8] = *MEMORY[0x1E0C80C00];
  v35 = v39;
  v36 = v39;
  v37 = 8;
  v38 = 0;
  v40 = v42;
  v41 = 0x800000000;
  while (1)
  {
    while (1)
    {
      v10 = *(_DWORD *)(a2 + 8);
      if (!v10)
        break;
      v16 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v10 - 8);
      *(_DWORD *)(a2 + 8) = v10 - 1;
      llvm::LiveRangeEdit::eliminateDeadDef((uint64_t)a1, v16, (uint64_t)&v35, a5);
    }
    if (!(_DWORD)v41)
      break;
    v11 = (unsigned int *)*((_QWORD *)v40 + v41 - 1);
    v12 = (char *)sub_1C477672C((uint64_t)&v35, (uint64_t)v11);
    if (v36 == v35)
      v13 = (uint64_t *)((char *)&v37 + 4);
    else
      v13 = &v37;
    if (v12 != &v36[8 * *(unsigned int *)v13])
    {
      *(_QWORD *)v12 = -2;
      ++v38;
    }
    LODWORD(v41) = v41 - 1;
    if ((llvm::LiveRangeEdit::foldAsLoad((uint64_t)a1, (uint64_t)v11, a2) & 1) == 0)
    {
      v14 = v11[28];
      v15 = a1[7];
      if (v15)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, v11[28]);
      if (llvm::LiveIntervals::shrinkToUses((_QWORD *)a1[4], (uint64_t)v11, a2))
      {
        v17 = a3;
        if (a4)
        {
          v27 = 4 * a4;
          v17 = a3;
          while (*v17 != v14)
          {
            ++v17;
            v27 -= 4;
            if (!v27)
            {
              v17 = &a3[a4];
              break;
            }
          }
        }
        if (a4 == v17 - a3)
        {
          llvm::LiveRange::RenumberValues((llvm::LiveRange *)v11);
          v32 = v34;
          v33 = 0x800000000;
          llvm::LiveIntervals::splitSeparateComponents(a1[4], (const llvm::LiveRange *)v11, (uint64_t)&v32);
          v18 = a1[5];
          if (v18)
          {
            v19 = *(unsigned int *)(*(_QWORD *)(v18 + 328) + 4 * (v14 & 0x7FFFFFFF));
            if ((_DWORD)v19)
              v20 = v19;
            else
              v20 = v14;
          }
          else
          {
            v20 = 0;
          }
          v21 = (uint64_t *)v32;
          if ((_DWORD)v33)
          {
            v29 = v20;
            v23 = v20 != v14 && v20 != 0;
            v28 = v23;
            v24 = 8 * v33;
            do
            {
              v31 = v24;
              v25 = *v21;
              if (v28)
              {
                v30 = *v21;
                sub_1C5116CCC(a1[5], *(_DWORD *)(v25 + 112), v29);
                v25 = v30;
              }
              v26 = a1[7];
              if (v26)
                (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 48))(v26, *(unsigned int *)(v25 + 112), v14);
              ++v21;
              v24 = v31 - 8;
            }
            while (v31 != 8);
            v21 = (uint64_t *)v32;
          }
          if (v21 != (uint64_t *)v34)
            free(v21);
        }
      }
    }
  }
  if (v40 != v42)
    free(v40);
  if (v36 != v35)
    free(v36);
}

uint64_t llvm::LiveRangeEdit::MRI_NoteNewVirtualRegister(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    result = llvm::VirtRegMap::grow(result);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v6 + 1, 4);
    LODWORD(v6) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v6) = a2;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

void llvm::LiveRangeEdit::calculateRegClassAndHint(llvm::LiveRangeEdit *this, llvm::MachineFunction *a2, llvm::VirtRegAuxInfo *a3)
{
  int v3;
  int v4;
  int v5;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  float v12;

  v3 = *(_DWORD *)(*((_QWORD *)this + 2) + 8);
  v4 = *((_DWORD *)this + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    v8 = 0;
    do
    {
      v9 = *((_QWORD *)this + 4);
      v10 = *(_DWORD *)(**((_QWORD **)this + 2) + 4 * (v8 + *((_DWORD *)this + 16)));
      if ((v10 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v9 + 416)
        || (v11 = *(_QWORD *)(*(_QWORD *)(v9 + 408) + 8 * (v10 & 0x7FFFFFFF))) == 0)
      {
        v11 = sub_1C4851220(*((_QWORD *)this + 4), v10);
        llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)v9, (llvm::LiveInterval *)v11);
      }
      llvm::MachineRegisterInfo::recomputeRegClass(*((_QWORD **)this + 3), *(_DWORD *)(v11 + 112));
      v12 = llvm::VirtRegAuxInfo::weightCalcHelper(a3, (llvm::LiveInterval *)v11, 0, 0);
      if (v12 >= 0.0)
        *(float *)(v11 + 116) = v12;
      ++v8;
    }
    while (v5 != v8);
  }
}

void sub_1C51190D8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C51190EC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Live Range Shrink Pass";
  *(_QWORD *)(v2 + 8) = 22;
  *(_QWORD *)(v2 + 16) = "lrshrink";
  *(_QWORD *)(v2 + 24) = 8;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F9460;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C511917C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C511917C()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1ED7F9460) = &off_1E81434F8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7F9468);
  if (v2 != -1)
  {
    v6[0] = sub_1C51190EC;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7F9468, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5119254(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C51192E8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5119374()
{
  return "Live Range Shrink";
}

void *sub_1C5119384(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C51193B4(llvm::FunctionPass *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;
  __int16 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  _DWORD *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  int v33;
  unsigned int v34;
  _DWORD *v35;
  BOOL isConstantPhysReg;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  BOOL v67;
  unint64_t *v69;
  int v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v82;
  unsigned int v83;
  uint64_t v84;
  _QWORD *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  _QWORD v91[2];
  int v92;
  _QWORD v93[2];
  unsigned int v94;

  if ((llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2) & 1) == 0)
  {
    v3 = *(_QWORD **)(a2 + 40);
    v93[0] = 0;
    v93[1] = 0;
    v94 = 0;
    v4 = (_QWORD *)(a2 + 320);
    v91[0] = 0;
    v91[1] = 0;
    v92 = 0;
    v5 = *(_QWORD **)(a2 + 328);
    if (v5 != (_QWORD *)(a2 + 320))
    {
      while (1)
      {
        v6 = v5 + 6;
        if (v5 + 6 == (_QWORD *)(v5[6] & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_4;
        v90 = 0;
        sub_1C5119C10((_DWORD *)v5[7], (uint64_t)v93);
        sub_1C61E3BE4((unsigned int *)v91);
        v7 = v5[7];
        if ((_QWORD *)v7 == v6)
          goto LABEL_4;
        do
        {
          if (!v7 || (v8 = v7, (*(_BYTE *)v7 & 4) == 0))
          {
            v8 = v7;
            if ((*(_WORD *)(v7 + 44) & 8) != 0)
            {
              v8 = v7;
              do
                v8 = *(_QWORD *)(v8 + 8);
              while ((*(_WORD *)(v8 + 44) & 8) != 0);
            }
          }
          v9 = *(_QWORD *)(v8 + 8);
          v10 = *(unsigned __int16 **)(v7 + 16);
          v11 = *v10;
          if ((v11 - 13) <= 0x38 && ((1 << (v11 - 13)) & 0x10000000000041FLL) != 0
            || v11 == 0)
          {
            goto LABEL_20;
          }
          if ((v11 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(v7 + 32) + 48) & 0x10) != 0)
            goto LABEL_26;
          v14 = *(_WORD *)(v7 + 44);
          v15 = *((_QWORD *)v10 + 1);
          if ((v14 & 0xC) != 0 && (v14 & 4) == 0)
          {
            v79 = v7;
            if ((v15 & 0x100000) == 0)
            {
              while ((*(_WORD *)(v79 + 44) & 8) != 0)
              {
                v79 = *(_QWORD *)(v79 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v79 + 16) + 10) & 0x10) != 0)
                  goto LABEL_26;
              }
              goto LABEL_27;
            }
LABEL_26:
            v90 = 1;
            goto LABEL_27;
          }
          if ((v15 & 0x100000) != 0)
            goto LABEL_26;
LABEL_27:
          v85 = v3;
          v89 = v7;
          v16 = sub_1C61E3C38((uint64_t)v93, &v89);
          v17 = *(unsigned int *)(v7 + 40);
          if ((_DWORD)v17)
          {
            v86 = 0;
            v84 = 0;
            v18 = *((_DWORD *)v16 + 2);
            v19 = *(int **)(v7 + 32);
            v20 = &v19[8 * v17];
            do
            {
              v21 = *v19;
              if ((*v19 & 0x800000FF) == 0)
              {
                if ((v21 & 0x1000000) != 0)
                {
                  if ((~v21 & 0x5000000) == 0 && v92)
                  {
                    v22 = v19[1];
                    v23 = (v92 - 1) & (37 * v22);
                    v24 = *(_DWORD *)(v91[0] + 24 * v23);
                    if (v22 == v24)
                    {
LABEL_34:
                      LODWORD(v89) = v19[1];
                      if (v86 < sub_1C61E3C98((uint64_t)v91, (int *)&v89)[2])
                      {
                        LODWORD(v89) = v19[1];
                        v86 = sub_1C61E3C98((uint64_t)v91, (int *)&v89)[2];
                        LODWORD(v89) = v19[1];
                        v84 = *((_QWORD *)sub_1C61E3C98((uint64_t)v91, (int *)&v89) + 2);
                      }
                    }
                    else
                    {
                      v26 = 1;
                      while (v24 != -1)
                      {
                        v27 = v23 + v26++;
                        v23 = v27 & (v92 - 1);
                        v24 = *(_DWORD *)(v91[0] + 24 * v23);
                        if (v22 == v24)
                          goto LABEL_34;
                      }
                    }
                  }
                }
                else
                {
                  LODWORD(v89) = v19[1];
                  v25 = sub_1C61E3C98((uint64_t)v91, (int *)&v89);
                  v25[2] = v18;
                  *((_QWORD *)v25 + 2) = v7;
                }
              }
              v19 += 8;
            }
            while (v19 != v20);
          }
          else
          {
            v84 = 0;
            v86 = 0;
          }
          if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v7, 0, &v90))
          {
            if (!llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v7))
              goto LABEL_168;
            v63 = **(_WORD **)(v7 + 16) == 23 || v9 == (_QWORD)v6;
            v3 = v85;
            if (!v63)
            {
              sub_1C5119C10((_DWORD *)v9, (uint64_t)v93);
              v90 = 0;
            }
            goto LABEL_20;
          }
          v89 = 0;
          v28 = *(unsigned int *)(v7 + 40);
          if (!(_DWORD)v28)
            goto LABEL_168;
          v29 = 0;
          v83 = 0;
          v30 = *(_DWORD **)(v7 + 32);
          v31 = &v30[8 * v28];
          do
          {
            v32 = v29;
            v33 = *v30;
            if (*v30 || v33 < 0 || (v33 & 0x5000000) == 0x5000000)
            {
LABEL_48:
              v29 = v32;
              goto LABEL_49;
            }
            v34 = v30[1];
            if ((v34 & 0x80000000) != 0)
            {
              if ((v33 & 0x1000000) == 0)
              {
                v82 = v31;
                if (!llvm::MachineRegisterInfo::hasOneNonDBGUse((uint64_t)v85, v34)
                  || (v37 = v85[3], (v38 = *(_QWORD *)(v37 + 16 * (v34 & 0x7FFFFFFF) + 8)) == 0)
                  || (v39 = *(_QWORD *)(v37 + 16 * (v34 & 0x7FFFFFFF) + 8), (*(_DWORD *)v38 & 0x1000000) == 0)
                  && ((v39 = *(_QWORD *)(v38 + 24)) == 0 || (*(_BYTE *)(v39 + 3) & 1) == 0)
                  || ((v40 = *(_QWORD *)(v39 + 24)) == 0 ? (v41 = 1) : (v41 = (*(_BYTE *)(v40 + 3) & 1) == 0),
                      !v41
                   || !v32
                   || (*(_QWORD *)(v37 + 16 * (v32[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(v37 + 16 * (v34 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)))
                {
LABEL_167:
                  v89 = 0;
                  goto LABEL_168;
                }
                if ((*(_DWORD *)v38 & 0x1000000) == 0)
                {
                  v38 = *(_QWORD *)(v38 + 24);
                  if ((*(_BYTE *)(v38 + 3) & 1) == 0)
                    v38 = 0;
                }
                v42 = *(_QWORD *)(v38 + 8);
                v43 = v83;
                if (**(_WORD **)(v42 + 16) != 19)
                  v43 = v83 + 1;
                v83 = v43;
                v44 = v89;
                if (v94)
                {
                  v45 = v94 - 1;
                  v46 = (v94 - 1) & ((v42 >> 4) ^ (v42 >> 9));
                  v47 = *(_QWORD *)(v93[0] + 16 * v46);
                  if (v42 == v47)
                  {
LABEL_78:
                    if ((_DWORD)v46 == v94)
                      goto LABEL_79;
                    if (v89)
                    {
                      v48 = ((v89 >> 4) ^ (v89 >> 9)) & v45;
                      v49 = *(_QWORD *)(v93[0] + 16 * v48);
                      if (v89 != v49)
                      {
                        v61 = 1;
                        while (v49 != -4096)
                        {
                          v62 = v48 + v61++;
                          v48 = v62 & v45;
                          v49 = *(_QWORD *)(v93[0] + 16 * v48);
                          if (v89 == v49)
                            goto LABEL_83;
                        }
                        v48 = v94;
                      }
LABEL_83:
                      v50 = *(_DWORD *)(v93[0] + 16 * v48 + 8);
                      v51 = *(_DWORD *)(v93[0] + 16 * v46 + 8);
                      if (v50 == v51)
                      {
                        do
                        {
                          v52 = *(_QWORD *)(v44 + 24);
                          v44 = *(_QWORD *)(v44 + 8);
                          if (v44 == v52 + 48)
                            v44 = 0;
                          v53 = ((v44 >> 4) ^ (v44 >> 9)) & v45;
                          v54 = *(_QWORD *)(v93[0] + 16 * v53);
                          if (v44 != v54)
                          {
                            v57 = 1;
                            while (v54 != -4096)
                            {
                              v58 = v53 + v57++;
                              v53 = v58 & v45;
                              v54 = *(_QWORD *)(v93[0] + 16 * v53);
                              if (v44 == v54)
                                goto LABEL_87;
                            }
                            v53 = v94;
                          }
LABEL_87:
                          v55 = *(_DWORD *)(v93[0] + 16 * v53 + 8);
                        }
                        while (v44 != v42 && v55 == v50);
                        if (v55 != v50)
                          v42 = v89;
                      }
                      else if (v50 >= v51)
                      {
                        v42 = v89;
                      }
                    }
LABEL_80:
                    v89 = v42;
                    v29 = v32;
                    v31 = v82;
                    goto LABEL_49;
                  }
                  v59 = 1;
                  while (v47 != -4096)
                  {
                    v60 = v46 + v59++;
                    v46 = v60 & v45;
                    v47 = *(_QWORD *)(v93[0] + 16 * v46);
                    if (v42 == v47)
                      goto LABEL_78;
                  }
                }
LABEL_79:
                v42 = v89;
                goto LABEL_80;
              }
              v29 = v30;
              if (v32)
                goto LABEL_167;
            }
            else
            {
              if (!v34)
                goto LABEL_48;
              v35 = v31;
              isConstantPhysReg = llvm::MachineRegisterInfo::isConstantPhysReg(v85, v30[1]);
              v31 = v35;
              v29 = v32;
              if (!isConstantPhysReg)
                goto LABEL_167;
            }
LABEL_49:
            v30 += 8;
          }
          while (v30 != v31);
          v88 = v89;
          if (!v89)
            goto LABEL_168;
          do
          {
            if (*((_DWORD *)sub_1C5119DE8((uint64_t)v93, &v88) + 2) != v86)
              break;
            if (v88 == v84)
              goto LABEL_168;
            v64 = *(_QWORD *)(v88 + 8);
            if (v64 == *(_QWORD *)(v88 + 24) + 48)
              v64 = 0;
            v88 = v64;
          }
          while (v64);
          if (v29 && v89)
          {
            v3 = v85;
            if (v83 >= 2 && v86 <= *((_DWORD *)sub_1C5119DE8((uint64_t)v93, &v89) + 2))
            {
              v65 = (uint64_t)(v5 + 6);
              if (*(_QWORD **)(v89 + 8) != v6)
              {
                v65 = *(_QWORD *)(v89 + 8);
                while (1)
                {
                  v66 = **(unsigned __int16 **)(v65 + 16);
                  v67 = (v66 - 13) > 0x38
                     || ((1 << (v66 - 13)) & 0x10000000000041FLL) == 0;
                  if (v67 && v66 != 0)
                    break;
                  if ((*(_BYTE *)v65 & 4) == 0)
                  {
                    while ((*(_WORD *)(v65 + 44) & 8) != 0)
                      v65 = *(_QWORD *)(v65 + 8);
                  }
                  v65 = *(_QWORD *)(v65 + 8);
                  if ((_QWORD *)v65 == v6)
                  {
                    v65 = (uint64_t)(v5 + 6);
                    break;
                  }
                }
              }
              if (v65 != v7)
              {
                v69 = (unint64_t *)v65;
                v88 = v65;
                v70 = *((_DWORD *)sub_1C61E3C38((uint64_t)v93, &v88) + 2);
                v88 = v7;
                *((_DWORD *)sub_1C61E3C38((uint64_t)v93, &v88) + 2) = v70;
                v71 = *(_QWORD *)(v7 + 8);
                if (**(_BYTE **)(v7 + 32))
                  v72 = 1;
                else
                  v72 = v71 == (_QWORD)v6;
                if (!v72)
                {
                  while (1)
                  {
                    v73 = **(unsigned __int16 **)(v71 + 16);
                    if ((v73 - 13) > 1)
                      break;
                    v74 = v71;
                    v75 = *(_QWORD *)(v71 + 32);
                    if (v73 != 14)
                    {
                      v77 = v75 + 32;
                      goto LABEL_152;
                    }
                    v76 = *(unsigned int *)(v71 + 40);
                    if ((_DWORD)v76 == 2)
                      break;
                    v77 = v75 + 32 * v76;
                    v75 += 64;
LABEL_152:
                    while (*(_BYTE *)v75 || *(_DWORD *)(v75 + 4) != *(_DWORD *)(*(_QWORD *)(v7 + 32) + 4))
                    {
                      v75 += 32;
                      if (v75 == v77)
                        goto LABEL_169;
                    }
                    v87 = v71;
                    v88 = v71;
                    *((_DWORD *)sub_1C61E3C38((uint64_t)v93, &v88) + 2) = v70;
                    if ((!v87 || (*(_BYTE *)v74 & 4) == 0) && (*(_WORD *)(v74 + 44) & 8) != 0)
                    {
                      do
                        v74 = *(_QWORD *)(v74 + 8);
                      while ((*(_WORD *)(v74 + 44) & 8) != 0);
                    }
                    v78 = *(_QWORD *)(v74 + 8);
                    if (!v9 || (*(_BYTE *)v9 & 4) == 0)
                    {
                      while ((*(_WORD *)(v9 + 44) & 8) != 0)
                        v9 = *(_QWORD *)(v9 + 8);
                    }
                    v9 = *(_QWORD *)(v9 + 8);
                    v71 = v78;
                    if ((_QWORD *)v78 == v6)
                    {
                      v71 = (uint64_t)(v5 + 6);
                      break;
                    }
                  }
                }
LABEL_169:
                if (v7 != v71 && v69 != (unint64_t *)v71)
                  sub_1C4785D30(v69, (unint64_t *)v7, (unint64_t *)v71);
                goto LABEL_168;
              }
            }
          }
          else
          {
LABEL_168:
            v3 = v85;
          }
LABEL_20:
          v7 = v9;
        }
        while ((_QWORD *)v9 != v6);
LABEL_4:
        v5 = (_QWORD *)v5[1];
        if (v5 == v4)
        {
          v80 = v91[0];
          goto LABEL_179;
        }
      }
    }
    v80 = 0;
LABEL_179:
    MEMORY[0x1CAA32FB4](v80, 8);
    MEMORY[0x1CAA32FB4](v93[0], 8);
  }
  return 0;
}

_DWORD *sub_1C5119C10(_DWORD *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = (uint64_t)result;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(unsigned int *)(a2 + 16);
    if (v4 <= 4 * *(_DWORD *)(a2 + 8) || v4 < 0x41)
    {
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD **)a2;
        v6 = 16 * v4;
        do
        {
          *v5 = -4096;
          v5 += 2;
          v6 -= 16;
        }
        while (v6);
      }
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      result = sub_1C476B2A4((_DWORD *)a2);
    }
  }
  v7 = *(_QWORD *)(v3 + 24) + 48;
  if (v7 != v3)
  {
    v8 = 0;
    do
    {
      v9 = v3;
      result = sub_1C61E3C38(a2, &v9);
      result[2] = v8;
      if (!v3 || (*(_BYTE *)v3 & 4) == 0)
      {
        while ((*(_WORD *)(v3 + 44) & 8) != 0)
          v3 = *(_QWORD *)(v3 + 8);
      }
      ++v8;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v7);
  }
  return result;
}

unsigned int *sub_1C5119CE0(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_DWORD **)result;
      v7 = 24 * v2;
      do
      {
        *v6 = -1;
        v6 += 6;
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(24 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 24 * v10;
        do
        {
          *result = -1;
          result += 6;
          v11 -= 24;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

_QWORD *sub_1C5119DE8(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_15:
    v6 = sub_1C48BE074(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *((_DWORD *)v6 + 2) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_15;
  }
  return v6;
}

uint64_t sub_1C5119EA4(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  llvm::initializeVirtRegMapPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Live Register Matrix";
  *(_QWORD *)(v3 + 8) = 20;
  *(_QWORD *)(v3 + 16) = "liveregmatrix";
  *(_QWORD *)(v3 + 24) = 13;
  *(_QWORD *)(v3 + 32) = &llvm::LiveRegMatrix::ID;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::LiveRegMatrix>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::LiveRegMatrix::runOnMachineFunction(llvm::LiveRegMatrix *this, llvm::MachineFunction *a2)
{
  void **v3;
  void *v4;
  void **v5;
  void *v6;
  unsigned int v7;
  llvm::LiveIntervalUnion::Array *v8;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  *((_QWORD *)this + 31) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD *)a2 + 2));
  v3 = (void **)**((_QWORD **)this + 1);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::LiveIntervals::ID);
  *((_QWORD *)this + 32) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::LiveIntervals::ID);
  v5 = (void **)**((_QWORD **)this + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::VirtRegMap::ID);
  *((_QWORD *)this + 33) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::VirtRegMap::ID);
  v7 = *(_DWORD *)(*((_QWORD *)this + 31) + 44);
  v8 = (llvm::LiveRegMatrix *)((char *)this + 384);
  if (v7 != *((_DWORD *)this + 96))
  {
    v10 = (uint64_t *)((char *)this + 400);
    v11 = *(unsigned int *)(*((_QWORD *)this + 31) + 44);
    v12 = (_QWORD *)operator new[]();
    *v12 = 176;
    v12[1] = v11;
    if ((_DWORD)v11)
    {
      v13 = 0;
      do
      {
        v14 = &v12[v13];
        v14[2] = 0;
        v14[3] = 0;
        v14[5] = 0;
        v14[6] = &v12[v13 + 8];
        v14[7] = 0x400000000;
        v14[16] = &v12[v13 + 18];
        v14[17] = 0x400000000;
        *((_WORD *)v14 + 88) = 0;
        v13 += 22;
        *((_DWORD *)v14 + 45) = 0;
        *((_DWORD *)v14 + 46) = 0;
      }
      while (22 * v11 != v13);
    }
    v15 = *v10;
    *v10 = (uint64_t)(v12 + 2);
    v7 = v11;
    v8 = (llvm::LiveRegMatrix *)((char *)this + 384);
    if (v15)
    {
      sub_1C4A065F0((uint64_t)this + 400, v15);
      v8 = (llvm::LiveRegMatrix *)((char *)this + 384);
      v7 = v11;
    }
  }
  llvm::LiveIntervalUnion::Array::init(v8, (uint64_t)this + 280, v7);
  ++*((_DWORD *)this + 68);
  return 0;
}

void llvm::LiveRegMatrix::releaseMemory(llvm::LiveRegMatrix *this)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  _QWORD **v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[32];
  void *v36;
  uint64_t v37;
  _QWORD v38[6];

  v38[4] = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)this + 96);
  if ((_DWORD)v1)
  {
    v3 = 0;
    v4 = 0uLL;
    do
    {
      v5 = *((_QWORD *)this + 49);
      v6 = v5 + 216 * v3;
      v7 = *(_DWORD *)(v6 + 200);
      if (v7)
      {
        v36 = v38;
        v37 = 0x400000000;
        v33 = v35;
        v34 = 0x400000000;
        v8 = v5 + 216 * v3;
        v11 = *(_DWORD *)(v8 + 204);
        v10 = (_DWORD *)(v8 + 204);
        LODWORD(v9) = v11;
        if (v11)
        {
          LODWORD(v9) = 0;
          v12 = 0;
          v13 = v5 + 216 * v3 + 16;
          do
          {
            v14 = *(_QWORD *)(v13 + 8 * v12);
            if (v9 >= HIDWORD(v37))
            {
              v31 = v13;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v9 + 1, 8);
              v13 = v31;
              v4 = 0uLL;
              LODWORD(v9) = v37;
            }
            *((_QWORD *)v36 + v9) = v14;
            LODWORD(v9) = v37 + 1;
            LODWORD(v37) = v37 + 1;
            ++v12;
          }
          while (v12 != *v10);
          v7 = *(_DWORD *)(v6 + 200);
        }
        v15 = v7 - 1;
        if (v15)
        {
          do
          {
            v29 = v15;
            v32 = v37;
            if ((_DWORD)v37)
            {
              v21 = 0;
              v30 = (_QWORD **)(v5 + 216 * v3 + 208);
              v22 = v36;
              v23 = v34;
              do
              {
                v24 = 0;
                v25 = 8 * (v22[v21] & 0x3FLL) + 8;
                do
                {
                  v26 = *(_QWORD *)((*((_QWORD *)v36 + v21) & 0xFFFFFFFFFFFFFFC0) + v24);
                  if (v23 >= HIDWORD(v34))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v23 + 1, 8);
                    v23 = v34;
                  }
                  *((_QWORD *)v33 + v23) = v26;
                  v23 = v34 + 1;
                  LODWORD(v34) = v34 + 1;
                  v24 += 8;
                }
                while (v25 != v24);
                v22 = v36;
                v27 = (_QWORD *)(*((_QWORD *)v36 + v21) & 0xFFFFFFFFFFFFFFC0);
                v28 = *v30;
                *v27 = **v30;
                *v28 = v27;
                ++v21;
              }
              while (v21 != v32);
            }
            LODWORD(v37) = 0;
            sub_1C50FDE40(&v36, (uint64_t)&v33);
            v15 = v29 - 1;
            v4 = 0uLL;
          }
          while (v29 != 1);
          LODWORD(v9) = v37;
        }
        if ((_DWORD)v9)
        {
          v9 = v9;
          v16 = (uint64_t *)v36;
          v17 = *(unint64_t **)(v5 + 216 * v3 + 208);
          v18 = *v17;
          do
          {
            v19 = *v16++;
            v20 = v19 & 0xFFFFFFFFFFFFFFC0;
            *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFC0) = v18;
            v18 = v19 & 0xFFFFFFFFFFFFFFC0;
            --v9;
          }
          while (v9);
          *v17 = v20;
        }
        if (v33 != v35)
        {
          free(v33);
          v4 = 0uLL;
        }
        if (v36 != v38)
        {
          free(v36);
          v4 = 0uLL;
        }
        *(_DWORD *)(v6 + 200) = 0;
        *(_OWORD *)(v6 + 168) = v4;
        *(_OWORD *)(v6 + 184) = v4;
        *(_OWORD *)(v6 + 136) = v4;
        *(_OWORD *)(v6 + 152) = v4;
        *(_OWORD *)(v6 + 104) = v4;
        *(_OWORD *)(v6 + 120) = v4;
        *(_OWORD *)(v6 + 72) = v4;
        *(_OWORD *)(v6 + 88) = v4;
        *(_OWORD *)(v6 + 40) = v4;
        *(_OWORD *)(v6 + 56) = v4;
        *(_OWORD *)(v6 + 8) = v4;
        *(_OWORD *)(v6 + 24) = v4;
      }
      *(_DWORD *)(v5 + 216 * v3 + 204) = 0;
      ++*(_DWORD *)v6;
      ++v3;
    }
    while (v3 != v1);
  }
}

uint64_t llvm::LiveRegMatrix::assign(_QWORD *a1, llvm::LiveInterval *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v14;
  uint64_t v15;
  int v16;

  *(_DWORD *)(*(_QWORD *)(a1[33] + 280) + 4 * (*((_DWORD *)a2 + 28) & 0x7FFFFFFF)) = (unsigned __int16)a3;
  v6 = a1[31];
  if (v6)
    v7 = (_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = (unsigned __int16 *)(v7[6]
                          + (((unint64_t)*(unsigned int *)(*v7 + 24 * a3 + 16) >> 3) & 0x1FFFFFFE));
  v10 = *v8;
  v9 = v8 + 1;
  v11 = v10 + (*(_DWORD *)(*v7 + 24 * a3 + 16) & 0xF) * a3;
  if (*((_QWORD *)a2 + 13))
  {
    v14 = (_QWORD *)(v7[7] + 8 * *(unsigned __int16 *)(*v7 + 24 * a3 + 20));
    do
    {
      v15 = *((_QWORD *)a2 + 13);
      if (v15)
      {
        while ((*(_QWORD *)(v15 + 112) & *v14) == 0)
        {
          v15 = *(_QWORD *)(v15 + 104);
          if (!v15)
            goto LABEL_13;
        }
        llvm::LiveIntervalUnion::unify((llvm::LiveIntervalUnion *)(a1[49] + 216 * (unsigned __int16)v11), a2, (uint64_t **)v15);
      }
LABEL_13:
      ++v14;
      v16 = *v9++;
      LOWORD(v11) = v16 + v11;
    }
    while (v16);
  }
  else
  {
    do
    {
      llvm::LiveIntervalUnion::unify((llvm::LiveIntervalUnion *)(a1[49] + 216 * (unsigned __int16)v11), a2, (uint64_t **)a2);
      v12 = *v9++;
      v11 += v12;
    }
    while (v12);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1[31] + 576))(a1[31], *(_QWORD *)(a1[33] + 272), *((unsigned int *)a2 + 28), a3);
}

uint64_t llvm::LiveRegMatrix::unassign(llvm::LiveRegMatrix *this, const llvm::LiveInterval *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v15;
  uint64_t v16;
  int v17;

  v4 = *((_DWORD *)a2 + 28) & 0x7FFFFFFF;
  v5 = *(_QWORD *)(*((_QWORD *)this + 33) + 280);
  v6 = *(_DWORD *)(v5 + 4 * v4);
  *(_DWORD *)(v5 + 4 * v4) = 0;
  v7 = *((_QWORD *)this + 31);
  if (v7)
    v8 = (_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v9 = (unsigned __int16 *)(v8[6] + (((unint64_t)*(unsigned int *)(*v8 + 24 * v6 + 16) >> 3) & 0x1FFFFFFE));
  v11 = *v9;
  v10 = v9 + 1;
  v12 = v11 + (*(_DWORD *)(*v8 + 24 * v6 + 16) & 0xF) * v6;
  if (*((_QWORD *)a2 + 13))
  {
    v15 = (_QWORD *)(v8[7] + 8 * *(unsigned __int16 *)(*v8 + 24 * v6 + 20));
    do
    {
      v16 = *((_QWORD *)a2 + 13);
      if (v16)
      {
        while ((*(_QWORD *)(v16 + 112) & *v15) == 0)
        {
          v16 = *(_QWORD *)(v16 + 104);
          if (!v16)
            goto LABEL_13;
        }
        llvm::LiveIntervalUnion::extract((llvm::LiveIntervalUnion *)(*((_QWORD *)this + 49) + 216 * (unsigned __int16)v12), a2, (uint64_t **)v16);
      }
LABEL_13:
      ++v15;
      v17 = *v10++;
      LOWORD(v12) = v17 + v12;
    }
    while (v17);
  }
  else
  {
    do
    {
      llvm::LiveIntervalUnion::extract((llvm::LiveIntervalUnion *)(*((_QWORD *)this + 49) + 216 * (unsigned __int16)v12), a2, (uint64_t **)a2);
      v13 = *v10++;
      v12 += v13;
    }
    while (v13);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, const llvm::LiveInterval *))(**((_QWORD **)this + 31) + 584))(*((_QWORD *)this + 31), *(_QWORD *)(*((_QWORD *)this + 33) + 272), a2);
}

BOOL llvm::LiveRegMatrix::isPhysRegUsed(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _WORD *v5;
  unsigned __int16 *v6;
  __int16 v7;
  unsigned __int16 v8;
  int v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 248);
  if (v2)
    v3 = (_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = *(unsigned int *)(*v3 + 24 * a2 + 16);
  v5 = (_WORD *)(v3[6] + ((v4 >> 3) & 0x1FFFFFFE));
  v7 = *v5;
  v6 = v5 + 1;
  v8 = v7 + (v4 & 0xF) * a2;
  do
  {
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 392) + 216 * v8 + 204);
    if (v9)
      break;
    v10 = *v6++;
    v8 += v10;
  }
  while (v10);
  return v9 != 0;
}

BOOL llvm::LiveRegMatrix::checkRegMaskInterference(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  int v6;

  v5 = *(_DWORD *)(a2 + 112);
  if (*(_DWORD *)(a1 + 412) == v5)
  {
    v6 = *(_DWORD *)(a1 + 272);
    if (*(_DWORD *)(a1 + 408) == v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 272);
  }
  *(_DWORD *)(a1 + 412) = v5;
  *(_DWORD *)(a1 + 408) = v6;
  *(_DWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  llvm::LiveIntervals::checkRegMaskInterference(*(_QWORD *)(a1 + 256), a2, a1 + 416);
LABEL_3:
  if (!*(_DWORD *)(a1 + 480))
    return 0;
  if (a3)
    return ((*(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * (a3 >> 6)) >> a3) & 1) == 0;
  return 1;
}

uint64_t llvm::LiveRegMatrix::checkRegUnitInterference(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unint64_t v7;
  _WORD *v8;
  unsigned __int16 *v9;
  __int16 v10;
  unsigned __int16 v11;
  _QWORD *v12;
  uint64_t v13;
  llvm::LiveRange *v14;
  int v15;
  uint64_t result;
  int v17;
  llvm::LiveRange *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  _QWORD v22[3];

  if (!*(_DWORD *)(a2 + 8))
    return 0;
  v5 = *(_DWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a1 + 248);
  v20 = a3;
  v21 = v5;
  v22[2] = 0;
  v22[0] = 0;
  *(_DWORD *)((char *)v22 + 7) = 0;
  v6 = (_QWORD *)(v19 + 8);
  if (!v19)
    v6 = 0;
  v7 = *(unsigned int *)(*v6 + 24 * a3 + 16);
  v8 = (_WORD *)(v6[6] + ((v7 >> 3) & 0x1FFFFFFE));
  v10 = *v8;
  v9 = v8 + 1;
  v11 = v10 + (v7 & 0xF) * a3;
  if (*(_QWORD *)(a2 + 104))
  {
    v12 = (_QWORD *)(v6[7] + 8 * *(unsigned __int16 *)(*v6 + 24 * a3 + 20));
    while (1)
    {
      v13 = *(_QWORD *)(a2 + 104);
      if (v13)
      {
        while ((*(_QWORD *)(v13 + 112) & *v12) == 0)
        {
          v13 = *(_QWORD *)(v13 + 104);
          if (!v13)
            goto LABEL_11;
        }
        v14 = sub_1C50E4F00(*(llvm::LiveIntervals **)(a1 + 256), v11);
        if ((llvm::LiveRange::overlaps(v13, (uint64_t)v14, (llvm::CoalescerPair *)&v19) & 1) != 0)
          return 1;
      }
LABEL_11:
      ++v12;
      v15 = *v9++;
      v11 += v15;
      if (!v15)
        return 0;
    }
  }
  else
  {
    do
    {
      v18 = sub_1C50E4F00(*(llvm::LiveIntervals **)(a1 + 256), v11);
      result = llvm::LiveRange::overlaps(a2, (uint64_t)v18, (llvm::CoalescerPair *)&v19);
      if ((result & 1) != 0)
        break;
      v17 = *v9++;
      v11 += v17;
    }
    while (v17);
  }
  return result;
}

uint64_t llvm::LiveRegMatrix::query(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  _DWORD *v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a1 + 392);
  v4 = *(_QWORD *)(a1 + 400);
  result = v4 + 176 * a3;
  v7 = *(_DWORD *)(a1 + 272);
  v8 = (_DWORD *)(v5 + 216 * a3);
  if (*(_DWORD *)(result + 168) != v7
    || *(_QWORD *)(v4 + 176 * a3 + 8) != a2
    || *(_DWORD **)result != v8
    || *v8 != *(_DWORD *)(v4 + 176 * a3 + 164))
  {
    *(_QWORD *)result = v8;
    v9 = v4 + 176 * a3;
    *(_QWORD *)(v9 + 8) = a2;
    *(_DWORD *)(v9 + 120) = 0;
    *(_WORD *)(v9 + 160) = 0;
    *(_DWORD *)(v9 + 164) = *v8;
    *(_DWORD *)(result + 168) = v7;
  }
  return result;
}

uint64_t llvm::LiveRegMatrix::checkInterference(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int16 v3;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _WORD *v13;
  unsigned __int16 *v14;
  __int16 v15;
  unsigned __int16 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::LiveIntervalUnion::Query *v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  llvm::LiveIntervalUnion::Query *v26;
  int v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;

  if (!*(_DWORD *)(a2 + 8))
    return 0;
  v3 = a3;
  v6 = a3;
  v7 = *(_DWORD *)(a2 + 112);
  if (*(_DWORD *)(a1 + 412) != v7)
  {
    v8 = *(_DWORD *)(a1 + 272);
    goto LABEL_38;
  }
  v8 = *(_DWORD *)(a1 + 272);
  if (*(_DWORD *)(a1 + 408) != v8)
  {
LABEL_38:
    *(_DWORD *)(a1 + 412) = v7;
    *(_DWORD *)(a1 + 408) = v8;
    *(_DWORD *)(a1 + 480) = 0;
    *(_DWORD *)(a1 + 424) = 0;
    llvm::LiveIntervals::checkRegMaskInterference(*(_QWORD *)(a1 + 256), a2, a1 + 416);
  }
  if (*(_DWORD *)(a1 + 480)
    && (!v6 || ((*(_QWORD *)(*(_QWORD *)(a1 + 416) + ((v6 >> 3) & 0x1FFFFFF8)) >> v3) & 1) == 0))
  {
    return 3;
  }
  if ((llvm::LiveRegMatrix::checkRegUnitInterference(a1, a2, v6) & 1) != 0)
    return 2;
  v10 = *(_QWORD *)(a1 + 248);
  if (v10)
    v11 = (_QWORD *)(v10 + 8);
  else
    v11 = 0;
  v12 = *(unsigned int *)(*v11 + 24 * v6 + 16);
  v13 = (_WORD *)(v11[6] + ((v12 >> 3) & 0x1FFFFFFE));
  v15 = *v13;
  v14 = v13 + 1;
  v16 = v15 + (v12 & 0xF) * v3;
  if (*(_QWORD *)(a2 + 104))
  {
    v17 = (_QWORD *)(v11[7] + 8 * *(unsigned __int16 *)(*v11 + 24 * v6 + 20));
    v9 = 1;
    while (1)
    {
      v18 = *(_QWORD *)(a2 + 104);
      if (v18)
      {
        while ((*(_QWORD *)(v18 + 112) & *v17) == 0)
        {
          v18 = *(_QWORD *)(v18 + 104);
          if (!v18)
            goto LABEL_19;
        }
        v19 = *(_QWORD *)(a1 + 400);
        v20 = (llvm::LiveIntervalUnion::Query *)(v19 + 176 * v16);
        v21 = *(_DWORD *)(a1 + 272);
        v22 = (_DWORD *)(*(_QWORD *)(a1 + 392) + 216 * v16);
        if (*((_DWORD *)v20 + 42) != v21
          || *(_QWORD *)(v19 + 176 * v16 + 8) != v18
          || *(_DWORD **)v20 != v22
          || *v22 != *(_DWORD *)(v19 + 176 * v16 + 164))
        {
          *(_QWORD *)v20 = v22;
          v23 = v19 + 176 * v16;
          *(_QWORD *)(v23 + 8) = v18;
          *(_DWORD *)(v23 + 120) = 0;
          *(_WORD *)(v23 + 160) = 0;
          *(_DWORD *)(v23 + 164) = *v22;
          *((_DWORD *)v20 + 42) = v21;
        }
        if (llvm::LiveIntervalUnion::Query::collectInterferingVRegs(v20, 1u))
          break;
      }
LABEL_19:
      ++v17;
      v24 = *v14++;
      v16 += v24;
      if (!v24)
        return 0;
    }
  }
  else
  {
    v9 = 1;
    while (1)
    {
      v25 = *(_QWORD *)(a1 + 400);
      v26 = (llvm::LiveIntervalUnion::Query *)(v25 + 176 * v16);
      v27 = *(_DWORD *)(a1 + 272);
      v28 = (_DWORD *)(*(_QWORD *)(a1 + 392) + 216 * v16);
      if (*((_DWORD *)v26 + 42) != v27
        || *(_QWORD *)(v25 + 176 * v16 + 8) != a2
        || *(_DWORD **)v26 != v28
        || *v28 != *(_DWORD *)(v25 + 176 * v16 + 164))
      {
        *(_QWORD *)v26 = v28;
        v29 = v25 + 176 * v16;
        *(_QWORD *)(v29 + 8) = a2;
        *(_DWORD *)(v29 + 120) = 0;
        *(_WORD *)(v29 + 160) = 0;
        *(_DWORD *)(v29 + 164) = *v28;
        *((_DWORD *)v26 + 42) = v27;
      }
      if (llvm::LiveIntervalUnion::Query::collectInterferingVRegs(v26, 1u))
        break;
      v30 = *v14++;
      v16 += v30;
      if (!v30)
        return 0;
    }
  }
  return v9;
}

BOOL llvm::LiveRegMatrix::checkInterference(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _WORD *v9;
  unsigned __int16 *v10;
  __int16 v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  _QWORD v21[4];
  void *v22;
  uint64_t v23;
  _BYTE v24[64];
  void *v25;
  uint64_t v26;
  _WORD v27[18];
  int v28;
  int v29;
  void *v30[2];
  _BYTE v31[48];
  void *v32;
  uint64_t v33;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = a2;
  v30[0] = v31;
  v30[1] = (void *)0x200000000;
  v32 = v34;
  v33 = 0x200000000;
  v35 = 0;
  v18[0] = a2;
  v18[1] = a3;
  v18[2] = &v19;
  llvm::LiveRange::addSegment((uint64_t)v30, (uint64_t)v18);
  v6 = *(_QWORD *)(a1 + 248);
  if (v6)
    v7 = (_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v8 = *(unsigned int *)(*v7 + 24 * a4 + 16);
  v9 = (_WORD *)(v7[6] + ((v8 >> 3) & 0x1FFFFFFE));
  v11 = *v9;
  v10 = v9 + 1;
  v12 = v11 + (v8 & 0xF) * a4;
  do
  {
    v21[3] = 0;
    v22 = v24;
    v23 = 0x400000000;
    v25 = v27;
    v13 = *(_DWORD *)(a1 + 272);
    v21[0] = *(_QWORD *)(a1 + 392) + 216 * v12;
    v21[1] = v30;
    v26 = 0x400000000;
    v27[16] = 0;
    v28 = *(_DWORD *)v21[0];
    v29 = v13;
    v14 = llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v21, 1u);
    if (v25 != v27)
      free(v25);
    if (v22 != v24)
      free(v22);
    if (v14)
      break;
    v15 = *v10++;
    v12 += v15;
  }
  while (v15);
  v16 = v35;
  v35 = 0;
  if (v16)
  {
    sub_1C47655E8(v16, *(_QWORD **)(v16 + 8));
    MEMORY[0x1CAA32FC0](v16, 0x1020C4062D53EE8);
  }
  if (v32 != v34)
    free(v32);
  if (v30[0] != v31)
    free(v30[0]);
  return v14 != 0;
}

uint64_t llvm::LiveRegMatrix::getOneVReg(llvm::LiveRegMatrix *this, unsigned int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _WORD *v6;
  unsigned __int16 *v7;
  __int16 v8;
  unsigned __int16 v9;
  uint64_t OneVReg;
  int v11;

  v3 = *((_QWORD *)this + 31);
  if (v3)
    v4 = (_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v5 = *(unsigned int *)(*v4 + 24 * a2 + 16);
  v6 = (_WORD *)(v4[6] + ((v5 >> 3) & 0x1FFFFFFE));
  v8 = *v6;
  v7 = v6 + 1;
  v9 = v8 + (v5 & 0xF) * a2;
  while (1)
  {
    OneVReg = llvm::LiveIntervalUnion::getOneVReg((llvm::LiveIntervalUnion *)(*((_QWORD *)this + 49) + 216 * v9));
    if (OneVReg)
      break;
    v11 = *v7++;
    v9 += v11;
    if (!v11)
      return 0;
  }
  return *(unsigned int *)(OneVReg + 112);
}

_QWORD *llvm::LiveRegUnits::removeRegsNotPreserved(_QWORD *this, const unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(unsigned int *)(*this + 44);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(*this + 48);
    do
    {
      v5 = *(unsigned __int16 *)(v4 + 4 * v3);
      if (*(_WORD *)(v4 + 4 * v3))
      {
        v6 = *(unsigned __int16 *)(v4 + 4 * v3 + 2);
        do
        {
          v7 = a2[v5 >> 5] >> v5;
          v5 = v6;
          if ((v7 & 1) == 0)
            *(_QWORD *)(this[1] + 8 * (v3 >> 6)) &= ~(1 << v3);
          v6 = 0;
        }
        while (v5);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return this;
}

_QWORD *llvm::LiveRegUnits::addRegsInMask(_QWORD *this, const unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(unsigned int *)(*this + 44);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(*this + 48);
    do
    {
      v5 = *(unsigned __int16 *)(v4 + 4 * v3);
      if (*(_WORD *)(v4 + 4 * v3))
      {
        v6 = *(unsigned __int16 *)(v4 + 4 * v3 + 2);
        do
        {
          v7 = a2[v5 >> 5] >> v5;
          v5 = v6;
          if ((v7 & 1) == 0)
            *(_QWORD *)(this[1] + 8 * (v3 >> 6)) |= 1 << v3;
          v6 = 0;
        }
        while (v5);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return this;
}

_QWORD *llvm::LiveRegUnits::stepBackward(llvm::LiveRegUnits *this, const llvm::MachineInstr *a2)
{
  const llvm::MachineInstr *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v34;
  _QWORD *v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[24];
  _BYTE *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[24];
  _BYTE *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[24];
  _BYTE *v70;
  uint64_t v71;
  __int128 v72;
  _BYTE v73[24];
  _BYTE *v74;
  uint64_t v75;

  v2 = a2;
  v75 = *MEMORY[0x1E0C80C00];
  sub_1C5112D00((unint64_t)a2, (uint64_t)&v65);
  v59 = v65;
  v60 = v66;
  v61 = v67;
  v62 = v68;
  v4 = v63;
  if (v70)
  {
    if (v70 == v69)
    {
      v64 = v63;
      (*(void (**)(void))(*(_QWORD *)v70 + 24))();
    }
    else
    {
      v64 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v70 + 16))();
    }
  }
  else
  {
    v64 = 0;
  }
  v53 = v71;
  v55 = v72;
  v5 = v57;
  if (v74)
  {
    if (v74 == v73)
    {
      v58 = v57;
      (*(void (**)(void))(*(_QWORD *)v74 + 24))();
    }
    else
    {
      v58 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v74 + 16))();
    }
  }
  else
  {
    v58 = 0;
  }
LABEL_11:
  v6 = v60;
  if ((_QWORD)v59 != v53
    || (_QWORD)v60 != (_QWORD)v55
    && ((_QWORD)v60 == *((_QWORD *)&v60 + 1) ? (v7 = (_QWORD)v55 == *((_QWORD *)&v55 + 1)) : (v7 = 0), !v7))
  {
    if (*(_DWORD *)v60 == 12)
    {
      llvm::LiveRegUnits::removeRegsNotPreserved(this, *(const unsigned int **)(v60 + 16));
      v6 = v60;
    }
    else if ((*(_DWORD *)v60 & 0x1000000) != 0)
    {
      v8 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this)
        v9 = (_QWORD *)(*(_QWORD *)this + 8);
      else
        v9 = 0;
      v10 = (unsigned __int16 *)(v9[6]
                               + (((unint64_t)*(unsigned int *)(*v9
                                                                     + 24 * (unsigned __int16)*(_DWORD *)(v60 + 4)
                                                                     + 16) >> 3) & 0x1FFFFFFE));
      v12 = *v10;
      v11 = v10 + 1;
      v13 = v12 + (*(_DWORD *)(*v9 + 24 * (unsigned __int16)*(_DWORD *)(v60 + 4) + 16) & 0xF) * *(_DWORD *)(v60 + 4);
      do
      {
        *(_QWORD *)(v8 + 8 * ((unsigned __int16)v13 >> 6)) &= ~(1 << v13);
        v14 = *v11++;
        v13 += v14;
      }
      while (v14);
    }
    v15 = v6 + 32;
    *(_QWORD *)&v60 = v15;
    v16 = *((_QWORD *)&v60 + 1);
    if (v15 != *((_QWORD *)&v60 + 1))
    {
      v17 = v15;
      goto LABEL_35;
    }
    v18 = *(_QWORD *)(v59 + 8);
    if (v18 == *((_QWORD *)&v59 + 1))
    {
      v17 = v15;
      goto LABEL_34;
    }
    v17 = v15;
    if ((*(_WORD *)(v18 + 44) & 4) == 0)
    {
LABEL_34:
      *(_QWORD *)&v59 = *((_QWORD *)&v59 + 1);
      v16 = v15;
      goto LABEL_35;
    }
    while (1)
    {
      v17 = *(_QWORD *)(v18 + 32);
      v19 = *(unsigned int *)(v18 + 40);
      v16 = v17 + 32 * v19;
      if ((_DWORD)v19)
        break;
      v18 = *(_QWORD *)(v18 + 8);
      if (v18 == *((_QWORD *)&v59 + 1) || (*(_WORD *)(v18 + 44) & 4) == 0)
      {
        *(_QWORD *)&v60 = v17;
        *((_QWORD *)&v60 + 1) = v17 + 32 * v19;
        v15 = *((_QWORD *)&v60 + 1);
        goto LABEL_34;
      }
    }
    *(_QWORD *)&v60 = *(_QWORD *)(v18 + 32);
    *((_QWORD *)&v60 + 1) = v17 + 32 * v19;
    *(_QWORD *)&v59 = v18;
    while (1)
    {
      do
      {
LABEL_35:
        if ((_QWORD)v59 == (_QWORD)v61 && (v17 == (_QWORD)v62 || v17 == v16 && (_QWORD)v62 == *((_QWORD *)&v62 + 1)))
          goto LABEL_11;
        if (!v64)
          goto LABEL_140;
        if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v64 + 48))(v64) & 1) != 0)
          goto LABEL_11;
        v16 = *((_QWORD *)&v60 + 1);
        v17 = v60 + 32;
        *(_QWORD *)&v60 = v17;
      }
      while (v17 != *((_QWORD *)&v60 + 1));
      v20 = *(_QWORD *)(v59 + 8);
      if (v20 == *((_QWORD *)&v59 + 1))
      {
        v21 = v17;
LABEL_41:
        *(_QWORD *)&v59 = *((_QWORD *)&v59 + 1);
        v16 = v17;
        v17 = v21;
      }
      else
      {
        v21 = v17;
        if ((*(_WORD *)(v20 + 44) & 4) == 0)
          goto LABEL_41;
        while (1)
        {
          v21 = *(_QWORD *)(v20 + 32);
          v22 = *(unsigned int *)(v20 + 40);
          v16 = v21 + 32 * v22;
          if ((_DWORD)v22)
            break;
          v20 = *(_QWORD *)(v20 + 8);
          if (v20 == *((_QWORD *)&v59 + 1) || (*(_WORD *)(v20 + 44) & 4) == 0)
          {
            *(_QWORD *)&v60 = v21;
            *((_QWORD *)&v60 + 1) = v21 + 32 * v22;
            v17 = *((_QWORD *)&v60 + 1);
            goto LABEL_41;
          }
        }
        *(_QWORD *)&v60 = *(_QWORD *)(v20 + 32);
        *((_QWORD *)&v60 + 1) = v21 + 32 * v22;
        v17 = v21;
        *(_QWORD *)&v59 = v20;
      }
    }
  }
  if (v58 == v57)
  {
    v23 = 4;
  }
  else
  {
    if (!v58)
      goto LABEL_58;
    v23 = 5;
    v5 = v58;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v23))(v5);
LABEL_58:
  if (v64 == v63)
  {
    v24 = 4;
  }
  else
  {
    if (!v64)
      goto LABEL_63;
    v24 = 5;
    v4 = v64;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v24))(v4);
LABEL_63:
  v25 = v74;
  if (v74 != v73)
    goto LABEL_141;
  v26 = 4;
  v25 = v73;
LABEL_65:
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_66:
  v27 = v70;
  if (v70 == v69)
  {
    v28 = 4;
    v27 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_69;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_69:
  sub_1C5112D00((unint64_t)v2, (uint64_t)&v65);
  v59 = v65;
  v60 = v66;
  v61 = v67;
  v62 = v68;
  v2 = (const llvm::MachineInstr *)v63;
  if (v70)
  {
    if (v70 == v69)
    {
      v64 = v63;
      (*(void (**)(void))(*(_QWORD *)v70 + 24))();
    }
    else
    {
      v64 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v70 + 16))();
    }
  }
  else
  {
    v64 = 0;
  }
  v54 = v71;
  v56 = v72;
  v29 = v57;
  if (v74)
  {
    if (v74 == v73)
    {
      v58 = v57;
      (*(void (**)(void))(*(_QWORD *)v74 + 24))();
    }
    else
    {
      v58 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v74 + 16))();
    }
  }
  else
  {
    v58 = 0;
  }
LABEL_79:
  while (1)
  {
    v30 = v59;
    v31 = v60;
    if ((_QWORD)v59 == v54)
    {
      if ((_QWORD)v60 == (_QWORD)v56)
        break;
      if ((_QWORD)v60 == *((_QWORD *)&v60 + 1) && (_QWORD)v56 == *((_QWORD *)&v56 + 1))
        break;
    }
    if ((*(_DWORD *)v60 & 0x300000FF) == 0 && (*(_DWORD *)v60 & 0x10FFF00) != 0x1000000)
    {
      v34 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this)
        v35 = (_QWORD *)(*(_QWORD *)this + 8);
      else
        v35 = 0;
      v36 = (unsigned __int16 *)(v35[6]
                               + (((unint64_t)*(unsigned int *)(*v35
                                                                     + 24 * (unsigned __int16)*(_DWORD *)(v60 + 4)
                                                                     + 16) >> 3) & 0x1FFFFFFE));
      v38 = *v36;
      v37 = v36 + 1;
      v39 = v38 + (*(_DWORD *)(*v35 + 24 * (unsigned __int16)*(_DWORD *)(v60 + 4) + 16) & 0xF) * *(_DWORD *)(v60 + 4);
      do
      {
        *(_QWORD *)(v34 + 8 * ((unsigned __int16)v39 >> 6)) |= 1 << v39;
        v40 = *v37++;
        v39 += v40;
      }
      while (v40);
    }
    v41 = v31 + 32;
    *(_QWORD *)&v60 = v41;
    v42 = *((_QWORD *)&v60 + 1);
    if (v41 != *((_QWORD *)&v60 + 1))
    {
      v43 = v41;
      goto LABEL_104;
    }
    v30 = *(_QWORD *)(v30 + 8);
    if (v30 == *((_QWORD *)&v59 + 1))
    {
      v43 = v41;
      goto LABEL_103;
    }
    v43 = v41;
    if ((*(_WORD *)(v30 + 44) & 4) == 0)
    {
LABEL_103:
      *(_QWORD *)&v59 = *((_QWORD *)&v59 + 1);
      v42 = v41;
      v30 = *((_QWORD *)&v59 + 1);
      goto LABEL_104;
    }
    while (1)
    {
      v43 = *(_QWORD *)(v30 + 32);
      v44 = *(unsigned int *)(v30 + 40);
      v42 = v43 + 32 * v44;
      if ((_DWORD)v44)
        break;
      v30 = *(_QWORD *)(v30 + 8);
      if (v30 == *((_QWORD *)&v59 + 1) || (*(_WORD *)(v30 + 44) & 4) == 0)
      {
        *(_QWORD *)&v60 = v43;
        *((_QWORD *)&v60 + 1) = v43 + 32 * v44;
        v41 = *((_QWORD *)&v60 + 1);
        goto LABEL_103;
      }
    }
    *(_QWORD *)&v60 = *(_QWORD *)(v30 + 32);
    *((_QWORD *)&v60 + 1) = v43 + 32 * v44;
LABEL_121:
    *(_QWORD *)&v59 = v30;
LABEL_104:
    while (v30 != (_QWORD)v61 || v43 != (_QWORD)v62 && (v43 != v42 || (_QWORD)v62 != *((_QWORD *)&v62 + 1)))
    {
      if (!v64)
      {
LABEL_140:
        sub_1C485C2F0();
LABEL_141:
        if (v25)
        {
          v26 = 5;
          goto LABEL_65;
        }
        goto LABEL_66;
      }
      if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v64 + 48))(v64) & 1) != 0)
        goto LABEL_79;
      v30 = v59;
      v43 = v60 + 32;
      *(_QWORD *)&v60 = v43;
      v42 = *((_QWORD *)&v60 + 1);
      if (v43 == *((_QWORD *)&v60 + 1))
      {
        v30 = *(_QWORD *)(v59 + 8);
        if (v30 == *((_QWORD *)&v59 + 1))
        {
          v45 = v43;
        }
        else
        {
          v45 = v43;
          if ((*(_WORD *)(v30 + 44) & 4) != 0)
          {
            while (1)
            {
              v45 = *(_QWORD *)(v30 + 32);
              v46 = *(unsigned int *)(v30 + 40);
              v42 = v45 + 32 * v46;
              if ((_DWORD)v46)
                break;
              v30 = *(_QWORD *)(v30 + 8);
              if (v30 == *((_QWORD *)&v59 + 1) || (*(_WORD *)(v30 + 44) & 4) == 0)
              {
                *(_QWORD *)&v60 = v45;
                *((_QWORD *)&v60 + 1) = v45 + 32 * v46;
                v43 = *((_QWORD *)&v60 + 1);
                goto LABEL_110;
              }
            }
            *(_QWORD *)&v60 = *(_QWORD *)(v30 + 32);
            *((_QWORD *)&v60 + 1) = v45 + 32 * v46;
            v43 = v45;
            goto LABEL_121;
          }
        }
LABEL_110:
        *(_QWORD *)&v59 = *((_QWORD *)&v59 + 1);
        v42 = v43;
        v43 = v45;
        v30 = *((_QWORD *)&v59 + 1);
      }
    }
  }
  if (v58 == v57)
  {
    v47 = 4;
  }
  else
  {
    if (!v58)
      goto LABEL_128;
    v47 = 5;
    v29 = v58;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v47))(v29);
LABEL_128:
  if (v64 == v63)
  {
    v48 = 4;
  }
  else
  {
    if (!v64)
      goto LABEL_133;
    v48 = 5;
    v2 = (const llvm::MachineInstr *)v64;
  }
  (*(void (**)(const llvm::MachineInstr *))(*(_QWORD *)v2 + 8 * v48))(v2);
LABEL_133:
  v49 = v74;
  if (v74 == v73)
  {
    v50 = 4;
    v49 = v73;
LABEL_135:
    (*(void (**)(void))(*v49 + 8 * v50))();
    goto LABEL_136;
  }
  if (v74)
  {
    v50 = 5;
    goto LABEL_135;
  }
LABEL_136:
  result = v70;
  if (v70 == v69)
  {
    v52 = 4;
    result = v69;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v52))();
  }
  if (v70)
  {
    v52 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v52))();
  }
  return result;
}

_QWORD *sub_1C511B724(_QWORD *result, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  int v7;
  int v8;
  int v9;

  v2 = result[1];
  if (*result)
    v3 = (_QWORD *)(*result + 8);
  else
    v3 = 0;
  v4 = *(unsigned int *)(*v3 + 24 * a2 + 16);
  v5 = (unsigned __int16 *)(v3[6] + ((v4 >> 3) & 0x1FFFFFFE));
  v7 = *v5;
  v6 = v5 + 1;
  v8 = v7 + (v4 & 0xF) * a2;
  do
  {
    *(_QWORD *)(v2 + 8 * ((unsigned __int16)v8 >> 6)) &= ~(1 << v8);
    v9 = *v6++;
    v8 += v9;
  }
  while (v9);
  return result;
}

_QWORD *llvm::LiveRegUnits::accumulate(llvm::LiveRegUnits *this, const llvm::MachineInstr *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _BYTE v34[24];
  _BYTE *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[24];
  _BYTE *v41;
  _OWORD v42[4];
  _BYTE v43[24];
  _BYTE *v44;
  uint64_t v45;
  __int128 v46;
  _BYTE v47[24];
  _BYTE *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  sub_1C5112D00((unint64_t)a2, (uint64_t)v42);
  v36 = v42[0];
  v37 = v42[1];
  v38 = v42[2];
  v39 = v42[3];
  v3 = v40;
  if (v44)
  {
    if (v44 == v43)
    {
      v41 = v40;
      (*(void (**)(void))(*(_QWORD *)v44 + 24))();
    }
    else
    {
      v41 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v44 + 16))();
    }
  }
  else
  {
    v41 = 0;
  }
  v32 = v45;
  v33 = v46;
  v4 = v34;
  if (v48)
  {
    if (v48 == v47)
    {
      v35 = v34;
      (*(void (**)(void))(*(_QWORD *)v48 + 24))();
    }
    else
    {
      v35 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v48 + 16))();
    }
  }
  else
  {
    v35 = 0;
  }
LABEL_11:
  v5 = v37;
  if ((_QWORD)v36 != v32
    || (_QWORD)v37 != (_QWORD)v33
    && ((_QWORD)v37 == *((_QWORD *)&v37 + 1) ? (v6 = (_QWORD)v33 == *((_QWORD *)&v33 + 1)) : (v6 = 0), !v6))
  {
    v7 = *(_DWORD *)v37;
    if (*(_DWORD *)v37 == 12)
    {
      llvm::LiveRegUnits::addRegsInMask(this, *(const unsigned int **)(v37 + 16));
      v5 = v37;
    }
    else if ((v7 & 0x1000000) != 0
           || ((v8 = v7 & 0x30000000, v9 = v7 & 0x10FFF00, !v8) ? (v10 = v9 == 0x1000000) : (v10 = 1), !v10))
    {
      v11 = *((_QWORD *)this + 1);
      if (*(_QWORD *)this)
        v12 = (_QWORD *)(*(_QWORD *)this + 8);
      else
        v12 = 0;
      v13 = (unsigned __int16 *)(v12[6]
                               + (((unint64_t)*(unsigned int *)(*v12
                                                                     + 24 * (unsigned __int16)*(_DWORD *)(v37 + 4)
                                                                     + 16) >> 3) & 0x1FFFFFFE));
      v15 = *v13;
      v14 = v13 + 1;
      v16 = v15 + (*(_DWORD *)(*v12 + 24 * (unsigned __int16)*(_DWORD *)(v37 + 4) + 16) & 0xF) * *(_DWORD *)(v37 + 4);
      do
      {
        *(_QWORD *)(v11 + 8 * ((unsigned __int16)v16 >> 6)) |= 1 << v16;
        v17 = *v14++;
        v16 += v17;
      }
      while (v17);
    }
    v18 = v5 + 32;
    *(_QWORD *)&v37 = v18;
    v19 = *((_QWORD *)&v37 + 1);
    if (v18 == *((_QWORD *)&v37 + 1))
    {
      v21 = *(_QWORD *)(v36 + 8);
      if (v21 == *((_QWORD *)&v36 + 1))
      {
        v20 = v18;
      }
      else
      {
        v20 = v18;
        if ((*(_WORD *)(v21 + 44) & 4) != 0)
        {
          do
          {
            v20 = *(_QWORD *)(v21 + 32);
            v22 = *(unsigned int *)(v21 + 40);
            v19 = v20 + 32 * v22;
            if ((_DWORD)v22)
            {
              *(_QWORD *)&v37 = *(_QWORD *)(v21 + 32);
              *((_QWORD *)&v37 + 1) = v20 + 32 * v22;
              *(_QWORD *)&v36 = v21;
              goto LABEL_39;
            }
            v21 = *(_QWORD *)(v21 + 8);
          }
          while (v21 != *((_QWORD *)&v36 + 1) && (*(_WORD *)(v21 + 44) & 4) != 0);
          *(_QWORD *)&v37 = v20;
          *((_QWORD *)&v37 + 1) = v20 + 32 * v22;
          v18 = *((_QWORD *)&v37 + 1);
        }
      }
      *(_QWORD *)&v36 = *((_QWORD *)&v36 + 1);
      v19 = v18;
    }
    else
    {
      v20 = v18;
    }
    while (1)
    {
      do
      {
LABEL_39:
        if ((_QWORD)v36 == (_QWORD)v38 && (v20 == (_QWORD)v39 || v20 == v19 && (_QWORD)v39 == *((_QWORD *)&v39 + 1)))
          goto LABEL_11;
        if (!v41)
        {
          sub_1C485C2F0();
          goto LABEL_75;
        }
        if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v41 + 48))(v41) & 1) != 0)
          goto LABEL_11;
        v19 = *((_QWORD *)&v37 + 1);
        v20 = v37 + 32;
        *(_QWORD *)&v37 = v20;
      }
      while (v20 != *((_QWORD *)&v37 + 1));
      v23 = *(_QWORD *)(v36 + 8);
      if (v23 == *((_QWORD *)&v36 + 1))
      {
        v24 = v20;
LABEL_45:
        *(_QWORD *)&v36 = *((_QWORD *)&v36 + 1);
        v19 = v20;
        v20 = v24;
      }
      else
      {
        v24 = v20;
        if ((*(_WORD *)(v23 + 44) & 4) == 0)
          goto LABEL_45;
        while (1)
        {
          v24 = *(_QWORD *)(v23 + 32);
          v25 = *(unsigned int *)(v23 + 40);
          v19 = v24 + 32 * v25;
          if ((_DWORD)v25)
            break;
          v23 = *(_QWORD *)(v23 + 8);
          if (v23 == *((_QWORD *)&v36 + 1) || (*(_WORD *)(v23 + 44) & 4) == 0)
          {
            *(_QWORD *)&v37 = v24;
            *((_QWORD *)&v37 + 1) = v24 + 32 * v25;
            v20 = *((_QWORD *)&v37 + 1);
            goto LABEL_45;
          }
        }
        *(_QWORD *)&v37 = *(_QWORD *)(v23 + 32);
        *((_QWORD *)&v37 + 1) = v24 + 32 * v25;
        v20 = v24;
        *(_QWORD *)&v36 = v23;
      }
    }
  }
  if (v35 == v34)
  {
    v26 = 4;
  }
  else
  {
    if (!v35)
      goto LABEL_62;
    v26 = 5;
    v4 = v35;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v26))(v4);
LABEL_62:
  if (v41 == v40)
  {
    v27 = 4;
  }
  else
  {
    if (!v41)
      goto LABEL_67;
    v27 = 5;
    v3 = v41;
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v27))(v3);
LABEL_67:
  v28 = v48;
  if (v48 == v47)
  {
    v29 = 4;
    v28 = v47;
LABEL_69:
    (*(void (**)(void))(*v28 + 8 * v29))();
    goto LABEL_70;
  }
LABEL_75:
  if (v28)
  {
    v29 = 5;
    goto LABEL_69;
  }
LABEL_70:
  result = v44;
  if (v44 == v43)
  {
    v31 = 4;
    result = v43;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
  }
  if (v44)
  {
    v31 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
  }
  return result;
}

void llvm::LiveRegUnits::addPristines(llvm::LiveRegUnits *this, const llvm::MachineFunction *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int16 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t v23;
  _BYTE *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _BYTE v32[48];
  unsigned int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 7);
  if (*(_BYTE *)(v2 + 104))
  {
    v4 = (_QWORD *)*((_QWORD *)this + 1);
    v5 = *((unsigned int *)this + 4);
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      while (!*v4)
      {
        ++v4;
        v6 -= 8;
        if (!v6)
          goto LABEL_6;
      }
      v28 = (_DWORD *)((char *)this + 8);
      v17 = *(_QWORD *)this;
      v31 = 0x600000000;
      v33 = 0;
      v29 = v17;
      v30 = v32;
      v18 = v2;
      sub_1C4833580(&v30, *(_DWORD *)(v17 + 44), 0);
      sub_1C511BDA4(&v29, (uint64_t)a2);
      v20 = *(unsigned __int16 **)(v18 + 80);
      v21 = *(unsigned __int16 **)(v18 + 88);
      while (v20 != v21)
      {
        v22 = *v20;
        v20 += 6;
        sub_1C511B724(&v29, v22);
      }
      if (*((_DWORD *)this + 18) < v33)
        sub_1C4833580(v28, v33, 0);
      v23 = v31;
      v24 = v30;
      if ((_DWORD)v31)
      {
        v25 = *(_QWORD **)v28;
        v26 = (uint64_t *)v30;
        do
        {
          v27 = *v26++;
          *v25++ |= v27;
          --v23;
        }
        while (v23);
      }
      if (v24 != v32)
        free(v24);
    }
    else
    {
LABEL_6:
      sub_1C511BDA4(this, (uint64_t)a2);
      v7 = *(_DWORD **)(v2 + 80);
      v8 = *(_DWORD **)(v2 + 88);
      if (v7 != v8)
      {
        v9 = *((_QWORD *)this + 1);
        v10 = (uint64_t *)(*(_QWORD *)this + 8);
        if (!*(_QWORD *)this)
          v10 = 0;
        v11 = *v10;
        v12 = v10[6];
        do
        {
          v13 = ((unint64_t)*(unsigned int *)(v11 + 24 * (unsigned __int16)*v7 + 16) >> 3) & 0x1FFFFFFE;
          v14 = *(unsigned __int16 *)(v12 + v13) + (*(_DWORD *)(v11 + 24 * (unsigned __int16)*v7 + 16) & 0xF) * *v7;
          v15 = (unsigned __int16 *)(v12 + 2 + v13);
          do
          {
            *(_QWORD *)(v9 + 8 * ((unsigned __int16)v14 >> 6)) &= ~(1 << v14);
            v16 = *v15++;
            v14 += v16;
          }
          while (v16);
          v7 += 3;
        }
        while (v7 != v8);
      }
    }
  }
}

unsigned __int16 *sub_1C511BDA4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *result;
  _QWORD *v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v3 = *(_QWORD **)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 56);
  if (*((_BYTE *)v3 + 144))
  {
    result = (unsigned __int16 *)v3[19];
    if (!result)
      return result;
  }
  else
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v3 + 16) + 176))(*(_QWORD *)(*v3 + 16));
    result = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 32))(v5, *v3);
    if (!result)
      return result;
  }
  if (*a1)
    v7 = (_QWORD *)(*a1 + 8);
  else
    v7 = 0;
  v8 = *result;
  if (*result)
  {
    v9 = a1[1];
    v10 = *(_QWORD *)(v4 + 80);
    v11 = *(_QWORD *)(v4 + 88);
    do
    {
      if (v10 == v11)
        goto LABEL_14;
      v12 = v10;
      while (v8 != *(_DWORD *)v12)
      {
        v12 += 12;
        if (v12 == v11)
          goto LABEL_14;
      }
      if (*(_BYTE *)(v12 + 8))
      {
LABEL_14:
        v13 = (unsigned __int16 *)(v7[6]
                                 + (((unint64_t)*(unsigned int *)(*v7 + 24 * v8 + 16) >> 3) & 0x1FFFFFFE));
        v15 = *v13;
        v14 = v13 + 1;
        v16 = v15 + (*(_DWORD *)(*v7 + 24 * v8 + 16) & 0xF) * v8;
        do
        {
          *(_QWORD *)(v9 + 8 * ((unsigned __int16)v16 >> 6)) |= 1 << v16;
          v17 = *v14++;
          v16 += v17;
        }
        while (v17);
      }
      v18 = result[1];
      ++result;
      v8 = v18;
    }
    while (v18);
  }
  return result;
}

uint64_t llvm::LiveRegUnits::addLiveOuts(llvm::LiveRegUnits *this, const llvm::MachineBasicBlock *a2)
{
  const llvm::MachineFunction *v4;
  uint64_t v5;
  uint64_t i;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  unsigned __int16 v18;
  _QWORD *v19;
  unsigned __int16 *v20;
  BOOL v21;
  int v22;
  uint64_t result;

  v4 = (const llvm::MachineFunction *)*((_QWORD *)a2 + 4);
  llvm::LiveRegUnits::addPristines(this, v4);
  v5 = *((_QWORD *)a2 + 11);
  for (i = *((_QWORD *)a2 + 12); v5 != i; v5 += 8)
  {
    v7 = *(unsigned __int16 **)(*(_QWORD *)v5 + 152);
    v8 = *(unsigned __int16 **)(*(_QWORD *)v5 + 160);
    if (v8 != v7)
    {
      if (*(_QWORD *)this)
        v9 = (uint64_t *)(*(_QWORD *)this + 8);
      else
        v9 = 0;
      v10 = *v9;
      v11 = v9[6];
      v12 = v9[7];
      do
      {
        v13 = *((_QWORD *)v7 + 1);
        v14 = v10 + 24 * *v7;
        v15 = *(unsigned int *)(v14 + 16);
        v16 = v15 & 0xF;
        v17 = (v15 >> 3) & 0x1FFFFFFE;
        v18 = *(_WORD *)(v11 + v17) + v16 * *v7;
        v19 = (_QWORD *)(v12 + 8 * *(unsigned __int16 *)(v14 + 20));
        v20 = (unsigned __int16 *)(v11 + 2 + v17);
        do
        {
          if (*v19)
            v21 = (*v19 & v13) == 0;
          else
            v21 = 0;
          if (!v21)
            *(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v18 >> 6)) |= 1 << v18;
          ++v19;
          v22 = *v20++;
          v18 += v22;
        }
        while (v22);
        v7 += 8;
      }
      while (v7 != v8);
    }
  }
  result = sub_1C498FBAC((uint64_t)a2);
  if ((result & 1) != 0)
  {
    if (*(_BYTE *)(*((_QWORD *)v4 + 7) + 104))
      return (uint64_t)sub_1C511BDA4(this, (uint64_t)v4);
  }
  return result;
}

void llvm::LiveRegUnits::addLiveIns(llvm::LiveRegUnits *this, const llvm::MachineFunction **a2)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  _QWORD *v16;
  unsigned __int16 *v17;
  BOOL v18;
  int v19;

  llvm::LiveRegUnits::addPristines(this, a2[4]);
  v4 = (unsigned __int16 *)a2[19];
  v5 = (unsigned __int16 *)a2[20];
  if (v5 != v4)
  {
    if (*(_QWORD *)this)
      v6 = (uint64_t *)(*(_QWORD *)this + 8);
    else
      v6 = 0;
    v7 = *v6;
    v8 = v6[6];
    v9 = v6[7];
    do
    {
      v10 = *((_QWORD *)v4 + 1);
      v11 = v7 + 24 * *v4;
      v12 = *(unsigned int *)(v11 + 16);
      v13 = v12 & 0xF;
      v14 = (v12 >> 3) & 0x1FFFFFFE;
      v15 = *(_WORD *)(v8 + v14) + v13 * *v4;
      v16 = (_QWORD *)(v9 + 8 * *(unsigned __int16 *)(v11 + 20));
      v17 = (unsigned __int16 *)(v8 + 2 + v14);
      do
      {
        if (*v16)
          v18 = (*v16 & v10) == 0;
        else
          v18 = 0;
        if (!v18)
          *(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v15 >> 6)) |= 1 << v15;
        ++v16;
        v19 = *v17++;
        v15 += v19;
      }
      while (v19);
      v4 += 8;
    }
    while (v4 != v5);
  }
}

uint64_t sub_1C511C0B0(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeSlotIndexesPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Live Stack Slot Analysis";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "livestacks";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &llvm::LiveStacks::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::LiveStacks>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::LiveStacks::releaseMemory(llvm::LiveStacks *this)
{
  uint64_t v2;
  uint64_t i;

  sub_1C4926A50((uint64_t)this + 256);
  if (*((_QWORD *)this + 47))
  {
    sub_1C511C9D0(*((_QWORD **)this + 46));
    *((_QWORD *)this + 46) = 0;
    v2 = *((_QWORD *)this + 45);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*((_QWORD *)this + 44) + 8 * i) = 0;
    }
    *((_QWORD *)this + 47) = 0;
  }
  sub_1C6143384(*((_QWORD **)this + 50));
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 49) = (char *)this + 400;
}

uint64_t llvm::LiveStacks::runOnMachineFunction(llvm::LiveStacks *this, llvm::MachineFunction *a2)
{
  llvm::LiveStacks *v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  int v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  __int16 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  __int16 v53;
  int v54;
  char *v55;
  unint64_t v56;
  int *v57;
  int v58;
  int *v59;
  uint64_t v60;
  int *v61;
  int *v62;
  int *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  _DWORD *v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *Interval;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v104;
  llvm::LiveStacks *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *__p;
  void *v111;
  int v112;
  int *v113;
  uint64_t v114;
  int v115;
  uint64_t *v116[3];

  v3 = this;
  *((_QWORD *)this + 31) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD *)a2 + 2));
  v4 = (void **)**((_QWORD **)v3 + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::SlotIndexes::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::SlotIndexes::ID);
  v115 = 0;
  v113 = 0;
  v114 = 0;
  v7 = *((_QWORD *)a2 + 7);
  v8 = -858993459 * ((*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 3);
  if ((_DWORD)v8)
  {
    v9 = (char *)operator new(8 * v8);
    bzero(v9, 8 * v8);
    v10 = v9;
    v11 = &v9[8 * v8];
    v12 = -858993459 * ((*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 3);
    if ((_DWORD)v12)
    {
      v13 = v9;
      v14 = 3 * v12;
      v15 = 48 * v12;
      v16 = (char *)operator new(48 * v12);
      v17 = v16;
      v18 = 0;
      v106 = &v16[16 * v14];
      do
      {
        v19 = &v16[v18];
        *(_QWORD *)v19 = &v16[v18 + 16];
        *((_QWORD *)v19 + 1) = 0x400000000;
        v18 += 48;
      }
      while (v15 != v18);
      v10 = v13;
      goto LABEL_10;
    }
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v17 = 0;
  v106 = 0;
LABEL_10:
  v107 = (char *)a2 + 320;
  __p = v17;
  v111 = v10;
  if (*((llvm::MachineFunction **)a2 + 41) == (llvm::MachineFunction *)((char *)a2 + 320))
  {
    v59 = 0;
    v57 = 0;
    v58 = 0;
    v61 = 0;
    goto LABEL_83;
  }
  v20 = *((_QWORD *)a2 + 41);
  v104 = v11;
  v105 = v3;
  do
  {
    v21 = v20 + 48;
    v108 = v20;
    v109 = v20 + 48;
    v22 = *(_QWORD *)(v20 + 56);
    while (v22 != v21)
    {
      v23 = *(unsigned int *)(v22 + 40);
      if (!(_DWORD)v23)
        goto LABEL_67;
      v24 = *(_QWORD *)(v22 + 32);
      v25 = v24 + 32 * v23;
      v26 = (unint64_t *)(v22 + 48);
      do
      {
        if (*(_BYTE *)v24 != 5)
          goto LABEL_59;
        v27 = *(_DWORD *)(v24 + 16);
        if (!*(_BYTE *)(*(_QWORD *)(v7 + 8) + 40 * (*(_DWORD *)(v7 + 32) + v27) + 18))
          goto LABEL_59;
        v28 = *v26;
        if (*v26 < 8)
          goto LABEL_57;
        if ((v28 & 7) != 0)
        {
          if ((*v26 & 7) != 3)
            goto LABEL_57;
          v29 = (int *)(v28 & 0xFFFFFFFFFFFFFFF8);
          if ((v28 & 0xFFFFFFFFFFFFFFF8) == 0)
            goto LABEL_57;
          v32 = *v29;
          v31 = (uint64_t **)(v29 + 2);
          v30 = v32;
          if (!(_DWORD)v32)
            goto LABEL_57;
          v33 = &v31[v30];
        }
        else
        {
          *v26 = v28 & 0xFFFFFFFFFFFFFFF8;
          v33 = (uint64_t **)(v22 + 56);
          v31 = (uint64_t **)(v22 + 48);
        }
        v34 = 0;
        do
        {
          v35 = **v31;
          if ((v35 & 4) != 0)
          {
            v36 = v35 & 0xFFFFFFFFFFFFFFF8;
            if (v36)
            {
              if (*(_DWORD *)(v36 + 8) == 4 && *(_DWORD *)(v36 + 16) == v27)
                v34 = *v31;
            }
          }
          ++v31;
        }
        while (v31 != v33);
        if (!v34)
        {
          v27 = *(_DWORD *)(v24 + 16);
LABEL_57:
          v112 = v27;
LABEL_58:
          sub_1C61E4224((uint64_t)v116, (uint64_t)&v113, &v112);
          v17 = __p;
          v10 = v111;
          goto LABEL_59;
        }
        v37 = *(_WORD *)(v22 + 44);
        v38 = v22;
        if ((v37 & 4) != 0)
        {
          do
            v38 = *(_QWORD *)v38 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v38 + 44) & 4) != 0);
        }
        v39 = v22;
        if ((v37 & 8) != 0)
        {
          do
            v39 = *(_QWORD *)(v39 + 8);
          while ((*(_WORD *)(v39 + 44) & 8) != 0);
        }
        v40 = *(_QWORD *)(v39 + 8);
        if (v38 != v40)
        {
          while (1)
          {
            v41 = **(unsigned __int16 **)(v38 + 16);
            v42 = v41 > 0x17;
            v43 = (1 << v41) & 0x83E000;
            if (v42 || v43 == 0)
              break;
            v38 = *(_QWORD *)(v38 + 8);
            if (v38 == v40)
            {
              v38 = v40;
              break;
            }
          }
        }
        v45 = *(_QWORD *)(v6 + 368);
        v46 = *(unsigned int *)(v6 + 384);
        if (!(_DWORD)v46)
          goto LABEL_48;
        LODWORD(v47) = ((v38 >> 4) ^ (v38 >> 9)) & (v46 - 1);
        v48 = (uint64_t *)(v45 + 16 * v47);
        v49 = *v48;
        if (v38 != *v48)
        {
          v50 = 1;
          while (v49 != -4096)
          {
            v51 = v47 + v50++;
            v47 = v51 & (v46 - 1);
            v49 = *(_QWORD *)(v45 + 16 * v47);
            if (v38 == v49)
            {
              v48 = (uint64_t *)(v45 + 16 * v47);
              goto LABEL_49;
            }
          }
LABEL_48:
          v48 = (uint64_t *)(v45 + 16 * v46);
        }
LABEL_49:
        v52 = v48[1] & 0xFFFFFFFFFFFFFFF8 | 4;
        v53 = *((_WORD *)v34 + 16);
        if ((v53 & 2) != 0)
        {
          v54 = *(_DWORD *)(v24 + 16);
          if (*((_QWORD *)v10 + v54) >= 8uLL)
          {
            v112 = *(_DWORD *)(v24 + 16);
            goto LABEL_58;
          }
          *((_QWORD *)v10 + v54) = v52;
        }
        if ((v53 & 1) != 0)
        {
          v55 = &v17[48 * *(int *)(v24 + 16)];
          v56 = *((unsigned int *)v55 + 2);
          if (v56 >= *((unsigned int *)v55 + 3))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17[48 * *(int *)(v24 + 16)], (uint64_t)(v55 + 16), v56 + 1, 8);
            v17 = __p;
            v10 = v111;
            v56 = *((unsigned int *)v55 + 2);
          }
          *(_QWORD *)(*(_QWORD *)v55 + 8 * v56) = v52;
          ++*((_DWORD *)v55 + 2);
        }
LABEL_59:
        v24 += 32;
      }
      while (v24 != v25);
      if (v22)
      {
LABEL_67:
        if ((*(_BYTE *)v22 & 4) != 0)
          goto LABEL_71;
      }
      while ((*(_WORD *)(v22 + 44) & 8) != 0)
        v22 = *(_QWORD *)(v22 + 8);
LABEL_71:
      v22 = *(_QWORD *)(v22 + 8);
      v21 = v109;
    }
    v20 = *(_QWORD *)(v108 + 8);
  }
  while ((char *)v20 != v107);
  v57 = v113;
  v58 = v115;
  v59 = &v113[v115];
  if ((_DWORD)v114)
  {
    v11 = v104;
    v3 = v105;
    if (v115)
    {
      v60 = 0;
      while ((v113[v60] - 0x7FFFFFFF) <= 1)
      {
        if (v115 == ++v60)
        {
          v61 = &v113[v115];
          goto LABEL_83;
        }
      }
      v61 = &v113[v60];
    }
    else
    {
      v61 = v113;
    }
  }
  else
  {
    v61 = &v113[v115];
    v11 = v104;
    v3 = v105;
  }
LABEL_83:
  v62 = &v57[v58];
  while (v61 != v62)
  {
    v64 = *v61;
    v63 = v61 + 1;
    *((_QWORD *)v10 + v64) = 0;
    *(_DWORD *)&v17[48 * (int)v64 + 8] = 0;
    while (v63 != v59)
    {
      v65 = *v63++;
      if ((v65 - 0x7FFFFFFF) >= 2)
      {
        v61 = v63 - 1;
        goto LABEL_89;
      }
    }
    v61 = v59;
LABEL_89:
    ;
  }
  if (((v11 - (_BYTE *)v10) & 0x7FFFFFFF8) != 0)
  {
    v66 = 0;
    v67 = ((unint64_t)(v11 - (_BYTE *)v10) >> 3);
    v68 = __p;
    do
    {
      v69 = &v68[48 * v66];
      v71 = *((_DWORD *)v69 + 2);
      v70 = v69 + 8;
      if (v71)
      {
        v72 = *((_QWORD *)v10 + v66);
        v73 = (v72 >> 1) & 3;
        v74 = v72 & 0xFFFFFFFFFFFFFFF8;
        v75 = v73 ? v74 | (2 * (v73 - 1)) : *(_QWORD *)v74 | 6;
        v76 = sub_1C499C548(v6, v75);
        v68 = __p;
        v10 = v111;
        v77 = &__p[48 * v66];
        v78 = *((unsigned int *)v77 + 2);
        if ((_DWORD)v78)
        {
          v79 = *(_QWORD **)v77;
          v80 = 8 * v78;
          while (1)
          {
            v81 = (*v79 >> 1) & 3;
            v82 = *v79 & 0xFFFFFFFFFFFFFFF8;
            v83 = v81 ? v82 | (2 * (v81 - 1)) : *(_QWORD *)v82 | 6;
            if (sub_1C499C548(v6, v83) != v76)
              break;
            ++v79;
            v80 -= 8;
            v68 = __p;
            v10 = v111;
            if (!v80)
              goto LABEL_105;
          }
          v68 = __p;
          v10 = v111;
          *((_QWORD *)v111 + v66) = 0;
          *v70 = 0;
        }
      }
LABEL_105:
      ++v66;
    }
    while (v66 != v67);
    v84 = 0;
    do
    {
      if (*((_QWORD *)v10 + v84) >= 8uLL)
      {
        Interval = llvm::LiveStacks::getOrCreateInterval((uint64_t)v3, v84, 0);
        v86 = (uint64_t)Interval;
        v87 = *((_QWORD *)v111 + v84);
        if (Interval[12])
        {
          v116[0] = Interval;
          sub_1C510A3C0((uint64_t *)v116, v87, (uint64_t)v3 + 256, 0);
        }
        else
        {
          v116[0] = Interval;
          sub_1C510A6B8(v116, v87, (uint64_t)v3 + 256, 0);
        }
        v88 = *((_QWORD *)v111 + v84);
        v89 = (v88 >> 1) & 3;
        v90 = v88 & 0xFFFFFFFFFFFFFFF8;
        v91 = v89 ? v90 | (2 * (v89 - 1)) : *(_QWORD *)v90 | 6;
        v92 = sub_1C499C548(v6, v91);
        v93 = &__p[48 * v84];
        v94 = *((unsigned int *)v93 + 2);
        if ((_DWORD)v94)
        {
          v95 = *(_QWORD *)(*(_QWORD *)(v6 + 392) + 16 * *(unsigned int *)(v92 + 24));
          v96 = *(uint64_t **)v93;
          v97 = 8 * v94;
          do
          {
            v98 = *v96++;
            llvm::LiveRange::extendInBlock(v86, v95, v98);
            v97 -= 8;
          }
          while (v97);
        }
      }
      ++v84;
      v10 = v111;
    }
    while (v84 != v67);
  }
  v99 = __p;
  if (__p)
  {
    v100 = v106;
    while (v100 != v99)
    {
      v102 = (char *)*((_QWORD *)v100 - 6);
      v100 -= 48;
      v101 = v102;
      if (v100 + 16 != v102)
      {
        free(v101);
        v99 = __p;
      }
    }
    operator delete(v99);
    v10 = v111;
  }
  if (v10)
    operator delete(v10);
  MEMORY[0x1CAA32FB4](v113, 4);
  return 1;
}

uint64_t *llvm::LiveStacks::getOrCreateInterval(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v9;
  uint64_t *CommonSubClass;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int *v14;
  unsigned int *v15;
  unsigned int v16;

  v16 = a2;
  v5 = (_QWORD *)(a1 + 352);
  v6 = sub_1C50E36C4((_QWORD *)(a1 + 352), (int *)&v16);
  if (v6)
  {
    v7 = v6;
    v13 = (unint64_t)&v16;
    v9 = sub_1C511D14C((uint64_t **)(a1 + 392), (int *)&v16, (uint64_t)&std::piecewise_construct, (_DWORD **)&v13);
    CommonSubClass = (uint64_t *)llvm::TargetRegisterInfo::getCommonSubClass(*(_QWORD *)(a1 + 248), (uint64_t)v9[5], a3);
    v13 = (unint64_t)&v16;
    sub_1C511D14C((uint64_t **)(a1 + 392), (int *)&v16, (uint64_t)&std::piecewise_construct, (_DWORD **)&v13)[5] = CommonSubClass;
  }
  else
  {
    v11 = 0;
    v12 = v16 + 0x40000000;
    v13 = (unint64_t)&v12;
    v14 = &v11;
    v15 = &v16;
    v7 = sub_1C511CB08(v5, (uint64_t)&std::piecewise_construct, (int **)&v15, (_DWORD **)&v13);
    v13 = v16;
    v14 = (int *)a3;
    sub_1C511D068((uint64_t **)(a1 + 392), (int *)&v13, (uint64_t)&v13);
  }
  return v7 + 3;
}

void sub_1C511C9D0(_QWORD *__p)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (_QWORD *)*v1;
      v3 = v1[16];
      if (v3)
      {
        do
        {
          v7 = *(_QWORD *)(v3 + 96);
          v8 = *(_QWORD *)(v3 + 104);
          *(_QWORD *)(v3 + 96) = 0;
          if (v7)
          {
            v15 = v2;
            v13 = v7;
            sub_1C47655E8(v7, *(_QWORD **)(v7 + 8));
            v14 = v13;
            v2 = v15;
            MEMORY[0x1CAA32FC0](v14, 0x1020C4062D53EE8);
          }
          v9 = *(void **)(v3 + 64);
          if (v9 != (void *)(v3 + 80))
            free(v9);
          if (*(_QWORD *)v3 != v3 + 16)
            free(*(void **)v3);
          v3 = v8;
        }
        while (v8);
      }
      v4 = v1[15];
      v1[15] = 0;
      v1[16] = 0;
      if (v4)
      {
        v10 = v2;
        v11 = v4;
        sub_1C47655E8(v4, *(_QWORD **)(v4 + 8));
        v12 = v11;
        v2 = v10;
        MEMORY[0x1CAA32FC0](v12, 0x1020C4062D53EE8);
      }
      v5 = (_QWORD *)v1[11];
      if (v5 != v1 + 13)
        free(v5);
      v6 = (_QWORD *)v1[3];
      if (v6 != v1 + 5)
        free(v6);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t *sub_1C511CB08(_QWORD *a1, uint64_t a2, int **a3, _DWORD **a4)
{
  _QWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t *result;
  char v14;
  uint64_t *v15;
  _QWORD *v16;
  char v17;

  v7 = a1 + 2;
  v8 = operator new(0x90uLL);
  v16 = v7;
  *(_QWORD *)v8 = 0;
  v9 = *a4;
  v10 = a4[1];
  v11 = **a3;
  v8[4] = v11;
  LODWORD(v9) = *v9;
  v12 = *v10;
  *((_QWORD *)v8 + 3) = v8 + 10;
  *((_QWORD *)v8 + 4) = 0x200000000;
  *((_QWORD *)v8 + 11) = v8 + 26;
  *((_QWORD *)v8 + 12) = 0x200000000;
  *((_QWORD *)v8 + 15) = 0;
  *((_QWORD *)v8 + 16) = 0;
  v8[34] = (_DWORD)v9;
  v8[35] = v12;
  v17 = 1;
  *((_QWORD *)v8 + 1) = v11;
  result = sub_1C511CBE8(a1, (uint64_t)v8);
  if ((v14 & 1) == 0)
  {
    v15 = result;
    sub_1C511CF34((uint64_t)&v16, v8);
    return v15;
  }
  return result;
}

uint64_t *sub_1C511CBE8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;
  _DWORD *v5;
  uint64_t *v6;

  v2 = (_QWORD *)a2;
  v5 = (_DWORD *)(a2 + 16);
  v4 = *(int *)(a2 + 16);
  *((_QWORD *)v5 - 1) = v4;
  v6 = sub_1C511CC3C((uint64_t)a1, v4, v5);
  if (v6)
    return v6;
  sub_1C4D84E2C(a1, v2);
  return v2;
}

uint64_t *sub_1C511CC3C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *result;
  unint64_t v9;
  float v10;
  float v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  int8x8_t prime;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  void *v27;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2 % v4;
      if (v4 > a2)
        v6 = a2;
    }
    else
    {
      v6 = (v4 - 1) & a2;
    }
    v7 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v6);
    if (v7)
    {
      for (result = *v7; result; result = (uint64_t *)*result)
      {
        v9 = result[1];
        if (v9 == a2)
        {
          if (*((_DWORD *)result + 4) == *a3)
            return result;
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4)
              v9 %= v4;
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6)
            break;
        }
      }
    }
  }
  v10 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v11 = *(float *)(a1 + 32);
  if (v4 && (float)(v11 * (float)v4) >= v10)
    return 0;
  v12 = 1;
  if (v4 >= 3)
    v12 = (v4 & (v4 - 1)) != 0;
  v13 = v12 | (2 * v4);
  v14 = vcvtps_u32_f32(v10 / v11);
  if (v13 <= v14)
    prime = (int8x8_t)v14;
  else
    prime = (int8x8_t)v13;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime > v4)
  {
LABEL_29:
    if (*(_QWORD *)&prime >> 61)
      sub_1C4764EE4();
    v16 = operator new(8 * *(_QWORD *)&prime);
    v17 = *(void **)a1;
    *(_QWORD *)a1 = v16;
    if (v17)
      operator delete(v17);
    v18 = 0;
    *(int8x8_t *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18++) = 0;
    while (*(_QWORD *)&prime != v18);
    v19 = *(_QWORD **)(a1 + 16);
    if (v19)
    {
      v20 = v19[1];
      v21 = (uint8x8_t)vcnt_s8(prime);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        if (v20 >= *(_QWORD *)&prime)
          v20 %= *(_QWORD *)&prime;
      }
      else
      {
        v20 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = a1 + 16;
      v25 = (_QWORD *)*v19;
      if (*v19)
      {
        while (1)
        {
          v26 = v25[1];
          if (v21.u32[0] > 1uLL)
          {
            if (v26 >= *(_QWORD *)&prime)
              v26 %= *(_QWORD *)&prime;
          }
          else
          {
            v26 &= *(_QWORD *)&prime - 1;
          }
          if (v26 != v20)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v26))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v19;
              goto LABEL_54;
            }
            *v19 = *v25;
            *v25 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v26);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v26) = v25;
            v25 = v19;
          }
          v26 = v20;
LABEL_54:
          v19 = v25;
          v25 = (_QWORD *)*v25;
          v20 = v26;
          if (!v25)
            return 0;
        }
      }
    }
    return 0;
  }
  if (*(_QWORD *)&prime >= v4)
    return 0;
  v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (v4 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
  {
    v22 = std::__next_prime(v22);
  }
  else
  {
    v24 = 1 << -(char)__clz(v22 - 1);
    if (v22 >= 2)
      v22 = v24;
  }
  if (*(_QWORD *)&prime <= v22)
    prime = (int8x8_t)v22;
  if (*(_QWORD *)&prime >= v4)
    return 0;
  if (prime)
    goto LABEL_29;
  v27 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v27)
    operator delete(v27);
  result = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_1C511CF34(uint64_t a1, _QWORD *__p)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p[16];
    if (v3)
    {
      do
      {
        v9 = *(_QWORD *)(v3 + 96);
        v10 = *(_QWORD *)(v3 + 104);
        *(_QWORD *)(v3 + 96) = 0;
        if (v9)
        {
          v12 = v3;
          v7 = v9;
          sub_1C47655E8(v9, *(_QWORD **)(v9 + 8));
          v8 = v7;
          v3 = v12;
          MEMORY[0x1CAA32FC0](v8, 0x1020C4062D53EE8);
        }
        v11 = *(void **)(v3 + 64);
        if (v11 != (void *)(v3 + 80))
          free(v11);
        if (*(_QWORD *)v3 != v3 + 16)
          free(*(void **)v3);
        v3 = v10;
      }
      while (v10);
    }
    v4 = __p[15];
    __p[15] = 0;
    __p[16] = 0;
    if (v4)
    {
      sub_1C47655E8(v4, *(_QWORD **)(v4 + 8));
      MEMORY[0x1CAA32FC0](v4, 0x1020C4062D53EE8);
    }
    v5 = (_QWORD *)__p[11];
    if (v5 != __p + 13)
      free(v5);
    v6 = (_QWORD *)__p[3];
    if (v6 != __p + 5)
      free(v6);
    goto LABEL_10;
  }
  if (__p)
LABEL_10:
    operator delete(__p);
}

uint64_t **sub_1C511D068(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v8 + 8) = *(_DWORD *)a3;
    v8[5] = *(uint64_t **)(a3 + 8);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v6 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v8;
}

uint64_t **sub_1C511D14C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v9 + 8) = **a4;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v7 = (uint64_t *)v9;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *a1 = v12;
      v13 = *v7;
    }
    sub_1C4768E74(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

uint64_t sub_1C511D230(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeUnreachableMachineBlockElimPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Live Variable Analysis";
  *(_QWORD *)(v3 + 8) = 22;
  *(_QWORD *)(v3 + 16) = "livevars";
  *(_QWORD *)(v3 + 24) = 8;
  *(_QWORD *)(v3 + 32) = &llvm::LiveVariables::ID;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::LiveVariables>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

unsigned int *sub_1C511D2C4(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v7 = a4;
  v8 = result;
  v9 = *(_QWORD *)result;
  v10 = result[2];
  v11 = result[3];
  v12 = a4 - a6;
  v13 = v10 + ((a4 - a6) >> 3);
  if (*(_QWORD *)result + 8 * v10 == a2)
  {
    if (v13 > v11)
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v13, 8);
      v10 = v8[2];
      v9 = *(_QWORD *)v8;
    }
    if (v7 != a6)
    {
      v22 = (_QWORD *)(v9 + 8 * v10);
      do
      {
        v23 = *(_QWORD *)(v7 - 8);
        v7 -= 8;
        *v22++ = v23;
      }
      while (v7 != a6);
    }
    v8[2] = v10 + ((unint64_t)v12 >> 3);
  }
  else
  {
    v14 = (a2 - v9) >> 3;
    v15 = v12 >> 3;
    if (v13 > v11)
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v13, 8);
      v9 = *(_QWORD *)v8;
      v10 = v8[2];
    }
    v16 = (char *)(v9 + 8 * v14);
    v17 = (char *)(v9 + 8 * v10);
    v18 = (v17 - v16) >> 3;
    if (v18 >= v15)
    {
      result = sub_1C6177054(v8, &v17[-8 * v15], (char *)(v9 + 8 * v10));
      if (&v17[-8 * v15] != v16)
        result = (unsigned int *)memmove(&v16[8 * v15], v16, &v17[-8 * v15] - v16);
      while (v7 != a6)
      {
        v24 = *(_QWORD *)(v7 - 8);
        v7 -= 8;
        *(_QWORD *)v16 = v24;
        v16 += 8;
      }
    }
    else
    {
      v19 = v10 + ((unint64_t)v12 >> 3);
      v8[2] = v19;
      if (v14 != v10)
      {
        result = (unsigned int *)memcpy((void *)(v9 + 8 * v19 - 8 * v18), (const void *)(v9 + 8 * v14), v17 - v16);
        do
        {
          v20 = *(_QWORD *)(v7 - 8);
          v7 -= 8;
          *(_QWORD *)v16 = v20;
          v16 += 8;
          --v18;
        }
        while (v18);
      }
      while (v7 != a6)
      {
        v21 = *(_QWORD *)(v7 - 8);
        v7 -= 8;
        *(_QWORD *)v17 = v21;
        v17 += 8;
      }
    }
  }
  return result;
}

uint64_t llvm::LiveVariables::FindLastPartialDef(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _WORD *v23;
  int v24;
  unsigned __int16 v25;
  _BOOL4 v26;
  BOOL v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned __int16 *v34;
  int v35;
  uint64_t v37;
  unsigned int v38;

  v38 = 0;
  v3 = *(_QWORD *)(a1 + 376);
  if (v3)
    v4 = (_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v5 = v4[6];
  v6 = *(unsigned int *)(*v4 + 24 * a2 + 4);
  if (!*(_WORD *)(v5 + 2 * v6))
    return 0;
  v10 = 0;
  v11 = 0;
  v12 = *(_WORD *)(v5 + 2 * v6) + a2;
  v13 = a1 + 456;
  v14 = (unsigned __int16 *)(v5 + 2 * v6 + 2);
  do
  {
    v15 = v12;
    v37 = 0;
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * v12);
    if (v37)
    {
      v16 = *((_DWORD *)sub_1C5119DE8(v13, &v37) + 2);
      if (v16 > v10)
      {
        v38 = v15;
        v11 = v37;
        v10 = v16;
      }
    }
    v17 = *v14++;
    v12 = v17 + v15;
  }
  while (v17);
  if (v11)
  {
    sub_1C4854E58(a3, &v38);
    v18 = *(unsigned int *)(v11 + 40);
    if ((_DWORD)v18)
    {
      for (i = 0; i != v18; ++i)
      {
        v20 = *(_QWORD *)(v11 + 32);
        if ((*(_DWORD *)(v20 + 32 * i) & 0x10000FF) == 0x1000000)
        {
          v21 = *(_DWORD *)(v20 + 32 * i + 4);
          if (v21)
          {
            v22 = *(_QWORD *)(a1 + 376);
            v23 = (_WORD *)(*(_QWORD *)(v22 + 56) + 2 * *(unsigned int *)(*(_QWORD *)(v22 + 8) + 24 * v21 + 8));
            v24 = (unsigned __int16)*v23;
            v25 = v24 + v21;
            v27 = v24 == 0;
            v26 = *v23 != 0;
            v27 = v27 || v25 == a2;
            if (!v27)
            {
              v28 = v23 + 1;
              do
              {
                v30 = *v28++;
                v29 = v30;
                v25 += v30;
                v26 = v30 != 0;
                if (!v30)
                  v28 = 0;
                if (v29)
                  v31 = v25 == a2;
                else
                  v31 = 1;
              }
              while (!v31);
            }
            if (v26)
            {
              if (v22)
                v32 = (_QWORD *)(v22 + 8);
              else
                v32 = 0;
              v33 = v32[6];
              if (v33)
              {
                v34 = (unsigned __int16 *)(v33 + 2 * *(unsigned int *)(*v32 + 24 * v21 + 4));
                do
                {
                  LODWORD(v37) = (unsigned __int16)v21;
                  sub_1C4854E58(a3, (unsigned int *)&v37);
                  v35 = *v34++;
                  v21 += v35;
                }
                while (v35);
              }
            }
          }
        }
      }
    }
  }
  return v11;
}

void llvm::LiveVariables::HandlePhysRegUse(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v6;
  llvm::MachineInstr *v7;
  uint64_t v8;
  llvm::MachineInstr *LastPartialDef;
  llvm::MachineInstr *v10;
  uint64_t v11;
  _QWORD *v12;
  _WORD *v13;
  unsigned __int16 v14;
  unsigned int v15;
  _QWORD *i;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  _QWORD *j;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned __int16 *v29;
  int v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned __int16 *v36;
  int v37;
  unsigned int v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  _BYTE v51[16];
  _QWORD **v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v4 = a2;
  v55 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = *(llvm::MachineInstr **)(a1[48] + 8 * a2);
  v8 = *(_QWORD *)(a1[51] + 8 * a2);
  if (v7)
  {
    if (!v8
      && (llvm::MachineInstr::findRegisterDefOperandIdx(*(_QWORD *)(a1[48] + 8 * a2), a2, 0, 0, 0) == -1
       || !*((_QWORD *)v7 + 4)))
    {
      v43 = 0;
      v44 = 0;
      v45 = 0;
      LODWORD(v42) = 50331648;
      HIDWORD(v42) = v4;
      llvm::MachineInstr::addOperand(v7, *(llvm::MachineFunction **)(*((_QWORD *)v7 + 3) + 32), (const llvm::MachineOperand *)&v42);
    }
    goto LABEL_51;
  }
  if (v8)
    goto LABEL_51;
  v49 = v51;
  v50 = 0x400000000;
  v53 = 0;
  v54 = 0;
  v52 = &v53;
  LastPartialDef = (llvm::MachineInstr *)llvm::LiveVariables::FindLastPartialDef((uint64_t)a1, a2, (uint64_t)&v49);
  if (!LastPartialDef)
    goto LABEL_49;
  v10 = LastPartialDef;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  LODWORD(v42) = 50331648;
  HIDWORD(v42) = v4;
  llvm::MachineInstr::addOperand(LastPartialDef, *(llvm::MachineFunction **)(*((_QWORD *)LastPartialDef + 3) + 32), (const llvm::MachineOperand *)&v42);
  *(_QWORD *)(a1[48] + 8 * v6) = v10;
  v42 = &v44;
  v43 = 0x800000000;
  v47 = 0;
  v48 = 0;
  v46 = &v47;
  v11 = a1[47];
  if (v11)
    v12 = (_QWORD *)(v11 + 8);
  else
    v12 = 0;
  v13 = (_WORD *)(v12[6] + 2 * *(unsigned int *)(*v12 + 24 * v6 + 4));
  if (!*v13)
  {
    v32 = 0;
    goto LABEL_47;
  }
  v14 = *v13 + v4;
  do
  {
    v15 = v14;
    if (v48)
    {
      for (i = v47; i; i = (_QWORD *)*i)
      {
        v17 = *((_DWORD *)i + 7);
        if (v17 <= v15)
        {
          if (v17 >= v15)
            goto LABEL_44;
          ++i;
        }
      }
    }
    else if ((_DWORD)v43)
    {
      v18 = v42;
      v19 = 4 * v43;
      while (*v18 != v15)
      {
        ++v18;
        v19 -= 4;
        if (!v19)
          goto LABEL_26;
      }
      if (v19)
        goto LABEL_44;
    }
LABEL_26:
    if (v54)
    {
      for (j = v53; j; j = (_QWORD *)*j)
      {
        v21 = *((_DWORD *)j + 7);
        if (v21 <= v15)
        {
          if (v21 >= v15)
            goto LABEL_44;
          ++j;
        }
      }
LABEL_39:
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v38[0] = 0x2000000;
      v38[1] = v15;
      llvm::MachineInstr::addOperand(v10, *(llvm::MachineFunction **)(*((_QWORD *)v10 + 3) + 32), (const llvm::MachineOperand *)v38);
      *(_QWORD *)(a1[48] + 8 * v15) = v10;
      v24 = a1[47];
      v25 = (_QWORD *)(v24 + 8);
      if (!v24)
        v25 = 0;
      v26 = v25[6];
      v27 = *(unsigned int *)(*v25 + 24 * v15 + 4);
      if (*(_WORD *)(v26 + 2 * v27))
      {
        v28 = *(unsigned __int16 *)(v26 + 2 * v27) + v15;
        v29 = (unsigned __int16 *)(v26 + 2 * v27 + 2);
        do
        {
          v38[0] = (unsigned __int16)v28;
          sub_1C484FF44((uint64_t)&v42, v38);
          v30 = *v29++;
          v28 += v30;
        }
        while (v30);
      }
      goto LABEL_44;
    }
    if (!(_DWORD)v50)
      goto LABEL_39;
    v22 = v49;
    v23 = 4 * v50;
    while (*v22 != v15)
    {
      ++v22;
      v23 -= 4;
      if (!v23)
        goto LABEL_39;
    }
    if (!v23)
      goto LABEL_39;
LABEL_44:
    v31 = (unsigned __int16)v13[1];
    ++v13;
    v14 = v31 + v15;
  }
  while (v31);
  v32 = v47;
LABEL_47:
  sub_1C47655E8((uint64_t)&v46, v32);
  if (v42 != &v44)
    free(v42);
LABEL_49:
  sub_1C47655E8((uint64_t)&v52, v53);
  if (v49 != v51)
    free(v49);
LABEL_51:
  v33 = a1[47];
  v34 = (_QWORD *)(v33 + 8);
  if (!v33)
    v34 = 0;
  v35 = v34[6];
  if (v35)
  {
    v36 = (unsigned __int16 *)(v35 + 2 * *(unsigned int *)(*v34 + 24 * v6 + 4));
    do
    {
      *(_QWORD *)(a1[51] + 8 * (unsigned __int16)v4) = a3;
      v37 = *v36++;
      v4 += v37;
    }
    while (v37);
  }
}

uint64_t llvm::LiveVariables::FindLastRefOrPartRef(_QWORD *a1, unsigned int a2)
{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = a2;
  v3 = *(_QWORD *)(a1[48] + 8 * a2);
  v4 = *(_QWORD *)(a1[51] + 8 * a2);
  if (!(v3 | v4))
    return 0;
  if (!v4)
    v4 = *(_QWORD *)(a1[48] + 8 * a2);
  v24 = v4;
  v7 = (uint64_t)(a1 + 57);
  v8 = sub_1C5119DE8((uint64_t)(a1 + 57), &v24);
  v9 = a1[47];
  if (v9)
    v10 = (_QWORD *)(v9 + 8);
  else
    v10 = 0;
  v11 = v10[6];
  v12 = *(unsigned int *)(*v10 + 24 * a2 + 4);
  if (*(_WORD *)(v11 + 2 * v12))
  {
    v13 = *(_WORD *)(v11 + 2 * v12) + v2;
    v14 = *((_DWORD *)v8 + 2);
    v15 = (unsigned __int16 *)(v11 + 2 * v12 + 2);
    do
    {
      v23 = 0;
      v16 = v13;
      v17 = *(_QWORD *)(a1[48] + 8 * v13);
      v23 = v17;
      if (v17)
        v18 = v17 == v3;
      else
        v18 = 1;
      if (v18)
      {
        v22 = 0;
        v22 = *(_QWORD *)(a1[51] + 8 * v16);
        if (v22)
        {
          v19 = *((_DWORD *)sub_1C5119DE8(v7, &v22) + 2);
          if (v19 > v14)
          {
            v24 = v22;
            v14 = v19;
          }
        }
      }
      else
      {
        sub_1C5119DE8(v7, &v23);
      }
      v20 = *v15++;
      v13 = v20 + v16;
    }
    while (v20);
  }
  return v24;
}

BOOL llvm::LiveVariables::HandlePhysRegKill(_QWORD *a1, unsigned int a2, llvm::MachineInstr *a3)
{
  llvm::MachineInstr *v5;
  llvm::MachineInstr *v6;
  _BOOL8 result;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int16 *v12;
  llvm::MachineInstr *v13;
  unsigned int v14;
  unsigned int v15;
  llvm::MachineInstr *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  int v26;
  llvm::MachineInstr *v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int16 *v30;
  unsigned int v31;
  _QWORD *i;
  unsigned int v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::MachineInstr *v38;
  llvm::MachineInstr *LastRefOrPartRef;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  _WORD *v48;
  unsigned __int16 v49;
  int v50;
  int v51;
  char *v52;
  size_t v53;
  char *v54;
  int v55;
  int v56;
  int v57;
  unsigned int RegisterDefOperandIdx;
  uint64_t v59;
  int v60;
  llvm::MachineInstr *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v65;
  uint64_t v66;
  _BOOL4 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  llvm::MachineInstr *v72;
  llvm::MachineInstr *v73;
  void *__dst;
  uint64_t v75;
  _BYTE v76[32];
  _QWORD **v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v5 = *(llvm::MachineInstr **)(a1[48] + 8 * a2);
  v6 = *(llvm::MachineInstr **)(a1[51] + 8 * a2);
  result = ((unint64_t)v5 | (unint64_t)v6) != 0;
  if ((unint64_t)v5 | (unint64_t)v6)
  {
    v67 = ((unint64_t)v5 | (unint64_t)v6) != 0;
    if (!v6)
      v6 = v5;
    v73 = v6;
    v9 = *((_DWORD *)sub_1C5119DE8((uint64_t)(a1 + 57), (uint64_t *)&v73) + 2);
    __dst = v76;
    v75 = 0x800000000;
    v66 = a2;
    v78 = 0;
    v79 = 0;
    v77 = &v78;
    v10 = a1[47];
    if (v10)
      v11 = (_QWORD *)(v10 + 8);
    else
      v11 = 0;
    v12 = (unsigned __int16 *)(v11[6] + 2 * *(unsigned int *)(*v11 + 24 * a2 + 4));
    v65 = a2;
    v13 = 0;
    if (*v12)
    {
      v14 = 0;
      v15 = *v12 + a2;
      do
      {
        *(_QWORD *)&v68 = 0;
        v16 = *(llvm::MachineInstr **)(a1[48] + 8 * (unsigned __int16)v15);
        *(_QWORD *)&v68 = v16;
        if (v16)
          v17 = v16 == v5;
        else
          v17 = 1;
        if (v17)
        {
          v72 = 0;
          v72 = *(llvm::MachineInstr **)(a1[51] + 8 * (unsigned __int16)v15);
          if (v72)
          {
            v18 = a1[47];
            v19 = (_QWORD *)(v18 + 8);
            if (!v18)
              v19 = 0;
            v20 = v19[6];
            if (v20)
            {
              v21 = (unsigned __int16 *)(v20 + 2 * *(unsigned int *)(*v19 + 24 * (unsigned __int16)v15 + 4));
              v22 = v15;
              do
              {
                v71 = (unsigned __int16)v22;
                sub_1C484FF44((uint64_t)&__dst, &v71);
                v23 = *v21++;
                v22 += v23;
              }
              while (v23);
            }
            v24 = *((_DWORD *)sub_1C5119DE8((uint64_t)(a1 + 57), (uint64_t *)&v72) + 2);
            if (v24 > v9)
            {
              v73 = v72;
              v9 = v24;
            }
          }
        }
        else
        {
          v25 = sub_1C5119DE8((uint64_t)(a1 + 57), (uint64_t *)&v68);
          if (*((_DWORD *)v25 + 2) > v14)
          {
            v14 = *((_DWORD *)v25 + 2);
            v13 = (llvm::MachineInstr *)v68;
          }
        }
        v26 = v12[1];
        ++v12;
        v15 += v26;
      }
      while (v26);
    }
    if (*(_QWORD *)(a1[51] + 8 * v66))
    {
      v27 = v73;
      if (v73 == a3 || v73 != *(llvm::MachineInstr **)(a1[48] + 8 * v66))
      {
        llvm::MachineInstr::addRegisterKilled(v73, v66, a1[47], 1);
      }
      else if (v13)
      {
        *((_QWORD *)&v68 + 1) = 0;
        v69 = 0;
        v70 = 0;
        LODWORD(v68) = 100663296;
        DWORD1(v68) = v65;
        llvm::MachineInstr::addOperand(v13, *(llvm::MachineFunction **)(*((_QWORD *)v13 + 3) + 32), (const llvm::MachineOperand *)&v68);
      }
      else
      {
        RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx((uint64_t)v73, v66, 0, 0, a1[47]);
        if (RegisterDefOperandIdx == -1)
          v59 = 0;
        else
          v59 = *((_QWORD *)v27 + 4) + 32 * RegisterDefOperandIdx;
        if ((*(_BYTE *)(v59 + 3) & 0x40) != 0)
        {
          v60 = *(_DWORD *)(v59 + 4);
          llvm::MachineInstr::addRegisterDead(v73, v66, a1[47], 1);
          if (v60 != v65)
          {
            v61 = v73;
            v62 = llvm::MachineInstr::findRegisterDefOperandIdx((uint64_t)v73, v66, 0, 0, 0);
            if (v62 != -1)
            {
              v63 = *((_QWORD *)v61 + 4);
              if (v63)
                *(_DWORD *)(v63 + 32 * v62) |= 0x40000000u;
            }
          }
        }
        else
        {
          llvm::MachineInstr::addRegisterDead(v73, v66, a1[47], 1);
        }
      }
    }
    else
    {
      llvm::MachineInstr::addRegisterDead(*(llvm::MachineInstr **)(a1[48] + 8 * v66), v66, a1[47], 1);
      v28 = a1[47];
      if (v28)
        v29 = (_QWORD *)(v28 + 8);
      else
        v29 = 0;
      v30 = (unsigned __int16 *)(v29[6] + 2 * *(unsigned int *)(*v29 + 24 * v66 + 4));
      if (*v30)
      {
        v31 = *v30 + v65;
        do
        {
          if (v79)
          {
            for (i = v78; i; i = (_QWORD *)*i)
            {
              v33 = *((_DWORD *)i + 7);
              if (v33 <= (unsigned __int16)v31)
              {
                if (v33 >= (unsigned __int16)v31)
                  goto LABEL_48;
                ++i;
              }
            }
          }
          else if ((_DWORD)v75)
          {
            v34 = __dst;
            v35 = 4 * v75;
            while (*v34 != (unsigned __int16)v31)
            {
              ++v34;
              v35 -= 4;
              if (!v35)
                goto LABEL_77;
            }
            if (v35)
            {
LABEL_48:
              v36 = a1[48];
              v37 = *(_QWORD *)(v36 + 8 * v66);
              if (v37 != *(_QWORD *)(v36 + 8 * (unsigned __int16)v31)
                || llvm::MachineInstr::findRegisterDefOperandIdx(v37, (unsigned __int16)v31, 0, 0, 0) == -1
                || !*(_QWORD *)(v37 + 32))
              {
                v38 = *(llvm::MachineInstr **)(a1[48] + 8 * v66);
                HIDWORD(v68) = 0;
                v69 = 0;
                v70 = 0;
                LODWORD(v68) = 50331648;
                *(_QWORD *)((char *)&v68 + 4) = (unsigned __int16)v31;
                llvm::MachineInstr::addOperand(v38, *(llvm::MachineFunction **)(*((_QWORD *)v38 + 3) + 32), (const llvm::MachineOperand *)&v68);
              }
              LastRefOrPartRef = (llvm::MachineInstr *)llvm::LiveVariables::FindLastRefOrPartRef(a1, (unsigned __int16)v31);
              if (LastRefOrPartRef)
              {
                llvm::MachineInstr::addRegisterKilled(LastRefOrPartRef, (unsigned __int16)v31, a1[47], 1);
              }
              else
              {
                llvm::MachineInstr::addRegisterKilled(v73, (unsigned __int16)v31, a1[47], 1);
                v40 = a1[47];
                v41 = (_QWORD *)(v40 + 8);
                if (!v40)
                  v41 = 0;
                v42 = v41[6];
                if (v42)
                {
                  v43 = (unsigned __int16 *)(v42 + 2 * *(unsigned int *)(*v41 + 24 * (unsigned __int16)v31 + 4));
                  v44 = v31;
                  do
                  {
                    *(_QWORD *)(a1[51] + 8 * (unsigned __int16)v44) = v73;
                    v45 = *v43++;
                    v44 += v45;
                  }
                  while (v45);
                }
              }
              v46 = a1[47];
              if (v46)
                v47 = (_QWORD *)(v46 + 8);
              else
                v47 = 0;
              v48 = (_WORD *)(v47[6] + 2 * *(unsigned int *)(*v47 + 24 * (unsigned __int16)v31 + 4));
              if (*v48)
              {
                v49 = *v48 + v31;
                do
                {
                  v50 = v49;
                  LODWORD(v68) = v49;
                  if (v79)
                  {
                    sub_1C61D9060((uint64_t)&v77, (unsigned int *)&v68);
                  }
                  else
                  {
                    v51 = v75;
                    if ((_DWORD)v75)
                    {
                      v52 = (char *)__dst;
                      v53 = 4 * v75 - 4;
                      v54 = (char *)__dst;
                      while (1)
                      {
                        v55 = *(_DWORD *)v54;
                        v54 += 4;
                        if (v55 == v50)
                          break;
                        v53 -= 4;
                        v52 = v54;
                        if (v53 == -4)
                          goto LABEL_74;
                      }
                      if (v53)
                      {
                        memmove(v52, v52 + 4, v53);
                        v51 = v75;
                      }
                      LODWORD(v75) = v51 - 1;
                    }
                  }
LABEL_74:
                  v56 = (unsigned __int16)v48[1];
                  ++v48;
                  v49 = v56 + v50;
                }
                while (v56);
              }
            }
          }
LABEL_77:
          v57 = v30[1];
          ++v30;
          v31 += v57;
        }
        while (v57);
      }
    }
    sub_1C47655E8((uint64_t)&v77, v78);
    if (__dst != v76)
      free(__dst);
    return v67;
  }
  return result;
}

void llvm::LiveVariables::HandlePhysRegDef(_QWORD *a1, unsigned int a2, llvm::MachineInstr *a3, uint64_t a4)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _WORD *v17;
  unsigned __int16 v18;
  unsigned int v19;
  _QWORD *j;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  _QWORD *i;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned __int16 *v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[128];
  _QWORD **v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v42 = v44;
  v43 = 0x2000000000;
  v46 = 0;
  v47 = 0;
  v45 = &v46;
  if (!*(_QWORD *)(a1[48] + 8 * a2) && !*(_QWORD *)(a1[51] + 8 * a2))
  {
    v26 = a1[47];
    if (v26)
      v27 = (_QWORD *)(v26 + 8);
    else
      v27 = 0;
    v28 = (unsigned __int16 *)(v27[6] + 2 * *(unsigned int *)(*v27 + 24 * a2 + 4));
    if (!*v28)
      goto LABEL_8;
    v29 = *v28 + a2;
    while (1)
    {
      if (v47)
      {
        for (i = v46; i; i = (_QWORD *)*i)
        {
          v31 = *((_DWORD *)i + 7);
          if (v31 <= (unsigned __int16)v29)
          {
            if (v31 >= (unsigned __int16)v29)
              goto LABEL_60;
            ++i;
          }
        }
      }
      else if ((_DWORD)v43)
      {
        v32 = v42;
        v33 = 4 * v43;
        while (*v32 != (unsigned __int16)v29)
        {
          ++v32;
          v33 -= 4;
          if (!v33)
            goto LABEL_53;
        }
        if (v33)
          goto LABEL_60;
      }
LABEL_53:
      if (*(_QWORD *)(a1[48] + 8 * (unsigned __int16)v29) || *(_QWORD *)(a1[51] + 8 * (unsigned __int16)v29))
      {
        v34 = a1[47];
        v35 = (_QWORD *)(v34 + 8);
        if (!v34)
          v35 = 0;
        v36 = v35[6];
        if (v36)
        {
          v37 = (unsigned __int16 *)(v36 + 2 * *(unsigned int *)(*v35 + 24 * (unsigned __int16)v29 + 4));
          v38 = v29;
          do
          {
            v41 = (unsigned __int16)v38;
            sub_1C4879438((uint64_t)&v42, &v41);
            v39 = *v37++;
            v38 += v39;
          }
          while (v39);
        }
      }
LABEL_60:
      v40 = v28[1];
      ++v28;
      v29 += v40;
      if (!v40)
        goto LABEL_8;
    }
  }
  v9 = a1[47];
  v10 = (_QWORD *)(v9 + 8);
  if (!v9)
    v10 = 0;
  v11 = v10[6];
  if (v11)
  {
    v12 = (unsigned __int16 *)(v11 + 2 * *(unsigned int *)(*v10 + 24 * a2 + 4));
    v13 = a2;
    do
    {
      v41 = (unsigned __int16)v13;
      sub_1C4879438((uint64_t)&v42, &v41);
      v14 = *v12++;
      v13 += v14;
    }
    while (v14);
  }
LABEL_8:
  llvm::LiveVariables::HandlePhysRegKill(a1, a2, a3);
  v15 = a1[47];
  if (v15)
    v16 = (_QWORD *)(v15 + 8);
  else
    v16 = 0;
  v17 = (_WORD *)(v16[6] + 2 * *(unsigned int *)(*v16 + 24 * a2 + 4));
  if (*v17)
  {
    v18 = *v17 + a2;
    do
    {
      v19 = v18;
      if (v47)
      {
        for (j = v46; j; j = (_QWORD *)*j)
        {
          v21 = *((_DWORD *)j + 7);
          if (v21 <= v19)
          {
            if (v21 >= v19)
              goto LABEL_26;
            ++j;
          }
        }
      }
      else if ((_DWORD)v43)
      {
        v22 = v42;
        v23 = 4 * v43;
        while (*v22 != v19)
        {
          ++v22;
          v23 -= 4;
          if (!v23)
            goto LABEL_27;
        }
        if (v23)
LABEL_26:
          llvm::LiveVariables::HandlePhysRegKill(a1, v19, a3);
      }
LABEL_27:
      v24 = (unsigned __int16)v17[1];
      ++v17;
      v18 = v24 + v19;
    }
    while (v24);
  }
  if (a3)
  {
    v25 = *(unsigned int *)(a4 + 8);
    if (v25 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v25 + 1, 4);
      LODWORD(v25) = *(_DWORD *)(a4 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v25) = a2;
    ++*(_DWORD *)(a4 + 8);
  }
  sub_1C47655E8((uint64_t)&v45, v46);
  if (v42 != v44)
    free(v42);
}

void llvm::LiveVariables::runOnBlock(llvm::LiveVariables *this, llvm::MachineBasicBlock *a2, int a3)
{
  llvm::LiveVariables *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned int v14;
  int v15;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  _QWORD *v22;
  _BYTE *v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned __int16 *v42;
  unsigned __int16 *i;
  unint64_t j;
  _QWORD *k;
  unint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  unsigned int v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[16];
  _QWORD **v53;
  _QWORD *v54;
  uint64_t v55;
  void *v56[2];
  _QWORD v57[3];

  v5 = this;
  v57[2] = *MEMORY[0x1E0C80C00];
  v56[0] = v57;
  v56[1] = (void *)0x400000000;
  v6 = (unsigned __int16 *)*((_QWORD *)a2 + 19);
  v7 = (unsigned __int16 *)*((_QWORD *)a2 + 20);
  while (v6 != v7)
  {
    v8 = *v6;
    v6 += 8;
    llvm::LiveVariables::HandlePhysRegDef(v5, v8, 0, (uint64_t)v56);
  }
  v9 = *((_DWORD *)v5 + 116);
  if (v9 || *((_DWORD *)v5 + 117))
  {
    v10 = *((unsigned int *)v5 + 118);
    if (v10 <= 4 * v9 || v10 < 0x41)
    {
      if ((_DWORD)v10)
      {
        v11 = (_QWORD *)*((_QWORD *)v5 + 57);
        v12 = 16 * v10;
        do
        {
          *v11 = -4096;
          v11 += 2;
          v12 -= 16;
        }
        while (v12);
      }
      *((_QWORD *)v5 + 58) = 0;
    }
    else
    {
      this = (llvm::LiveVariables *)sub_1C476B2A4((_DWORD *)v5 + 114);
    }
  }
  v13 = (_BYTE *)*((_QWORD *)a2 + 7);
  if (v13 != (char *)a2 + 48)
  {
    v14 = 0;
    while (1)
    {
      v15 = **((unsigned __int16 **)v13 + 2);
      if ((v15 - 13) < 5 || v15 == 23)
        goto LABEL_20;
      v17 = v14 + 1;
      v50 = v13;
      v51 = v14;
      v18 = *((_DWORD *)v5 + 118);
      if (!v18)
        break;
      v19 = *((_QWORD *)v5 + 57);
      v20 = v18 - 1;
      v21 = v20 & ((v13 >> 4) ^ (v13 >> 9));
      v22 = (_QWORD *)(v19 + 16 * v21);
      v23 = (_BYTE *)*v22;
      if (v13 != (_BYTE *)*v22)
      {
        v24 = 0;
        v25 = 1;
        while (v23 != (_BYTE *)-4096)
        {
          if (v24)
            v26 = 0;
          else
            v26 = v23 == (_BYTE *)-8192;
          if (v26)
            v24 = v22;
          v27 = v21 + v25++;
          v21 = v27 & v20;
          v22 = (_QWORD *)(v19 + 16 * v21);
          v23 = (_BYTE *)*v22;
          if (v13 == (_BYTE *)*v22)
            goto LABEL_40;
        }
        if (v24)
          v28 = v24;
        else
          v28 = v22;
        goto LABEL_39;
      }
LABEL_40:
      llvm::LiveVariables::runOnInstr(v5, (uint64_t)v13, (uint64_t)v56);
      v14 = v17;
LABEL_20:
      if ((*v13 & 4) == 0)
      {
        while ((*((_WORD *)v13 + 22) & 8) != 0)
          v13 = (_BYTE *)*((_QWORD *)v13 + 1);
      }
      v13 = (_BYTE *)*((_QWORD *)v13 + 1);
      if (v13 == (char *)a2 + 48)
        goto LABEL_42;
    }
    v28 = 0;
LABEL_39:
    v29 = sub_1C48BE074((uint64_t)v5 + 456, (uint64_t)&v50, (uint64_t *)&v50, v28);
    *v29 = v50;
    *((_DWORD *)v29 + 2) = v51;
    goto LABEL_40;
  }
LABEL_42:
  v30 = *((_QWORD *)v5 + 54) + 32 * *((int *)a2 + 6);
  v31 = *(unsigned int *)(v30 + 8);
  if ((_DWORD)v31)
  {
    v32 = *(unsigned int **)v30;
    v33 = 4 * v31;
    do
    {
      v34 = *v32;
      v35 = v34 & 0x7FFFFFFF;
      if (v35 >= *((unsigned int *)v5 + 64))
        this = (llvm::LiveVariables *)sub_1C61E5C60((uint64_t *)v5 + 31, v35 + 1, (unint64_t)v5 + 264);
      v36 = *((_QWORD *)v5 + 46);
      if ((v34 & 0x80000000) != 0)
        v37 = (uint64_t *)(*(_QWORD *)(v36 + 24) + 16 * v35 + 8);
      else
        v37 = (uint64_t *)(*(_QWORD *)(v36 + 272) + 8 * v34);
      v38 = *v37;
      if ((*(_BYTE *)(v38 + 3) & 1) == 0)
        v38 = *(_QWORD *)(v38 + 24);
      llvm::LiveVariables::MarkVirtRegAliveInBlock(this, (llvm::LiveVariables::VarInfo *)(*((_QWORD *)v5 + 31) + 56 * v35), *(llvm::MachineBasicBlock **)(*(_QWORD *)(v38 + 8) + 24), a2);
      ++v32;
      v33 -= 4;
    }
    while (v33);
  }
  v50 = v52;
  v51 = 0x400000000;
  v54 = 0;
  v55 = 0;
  v53 = &v54;
  v40 = (uint64_t *)*((_QWORD *)a2 + 11);
  v39 = (uint64_t *)*((_QWORD *)a2 + 12);
  while (v40 != v39)
  {
    v41 = *v40;
    if (!*(_BYTE *)(*v40 + 184))
    {
      v42 = *(unsigned __int16 **)(v41 + 152);
      for (i = *(unsigned __int16 **)(v41 + 160); v42 != i; v42 += 8)
      {
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 47) + 216) + 16) + *v42))
        {
          v49 = *v42;
          sub_1C4854E58((uint64_t)&v50, &v49);
        }
      }
    }
    ++v40;
  }
  if (a3)
  {
    for (j = 0; j != a3; ++j)
    {
      if (*(_QWORD *)(*((_QWORD *)v5 + 48) + 8 * j) || *(_QWORD *)(*((_QWORD *)v5 + 51) + 8 * j))
      {
        if (v55)
        {
          for (k = v54; k; k = (_QWORD *)*k)
          {
            v46 = *((unsigned int *)k + 7);
            if (j >= v46)
            {
              if (j <= v46)
                goto LABEL_78;
              ++k;
            }
          }
        }
        else if ((_DWORD)v51)
        {
          v47 = v50;
          v48 = 4 * v51;
          while (j != *v47)
          {
            ++v47;
            v48 -= 4;
            if (!v48)
              goto LABEL_77;
          }
          if (v48)
            continue;
        }
LABEL_77:
        llvm::LiveVariables::HandlePhysRegDef(v5, j, 0, (uint64_t)v56);
      }
LABEL_78:
      ;
    }
  }
  sub_1C47655E8((uint64_t)&v53, v54);
  if (v50 != v52)
    free(v50);
  if (v56[0] != v57)
    free(v56[0]);
}

uint64_t llvm::LiveVariables::runOnMachineFunction(llvm::LiveVariables *this, llvm::MachineFunction *a2)
{
  uint64_t v4;
  unint64_t v5;
  llvm::LiveVariables *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::LiveVariables *v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::MachineInstr *v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v29;
  _QWORD v30[2];
  __int128 v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[128];
  uint64_t v41;
  _BYTE *v42;
  __int128 v43;

  *((_QWORD *)this + 45) = a2;
  *((_QWORD *)this + 46) = *((_QWORD *)a2 + 5);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 47) = v4;
  v5 = *(unsigned int *)(v4 + 16);
  v36 = 0;
  sub_1C511EB48((uint64_t)this + 384, v5, (uint64_t *)&v36);
  v36 = 0;
  sub_1C511EB48((uint64_t)this + 408, v5, (uint64_t *)&v36);
  sub_1C61E4EDC((uint64_t *)this + 54, ((*(_QWORD *)(*((_QWORD *)this + 45) + 112) - *(_QWORD *)(*((_QWORD *)this + 45) + 104)) >> 3));
  if (*((_QWORD *)this + 43))
  {
    v7 = *((_QWORD *)this + 41);
    v6 = (llvm::LiveVariables *)*((_QWORD *)this + 42);
    v8 = *(_QWORD *)v6;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v8;
    *((_QWORD *)this + 43) = 0;
    if (v6 != (llvm::LiveVariables *)((char *)this + 328))
    {
      do
      {
        v9 = (llvm::LiveVariables *)*((_QWORD *)v6 + 1);
        operator delete(v6);
        v6 = v9;
      }
      while (v9 != (llvm::LiveVariables *)((char *)this + 328));
    }
  }
  if ((**(_BYTE **)(**((_QWORD **)this + 46) + 360) & 1) == 0)
    llvm::report_fatal_error((llvm *)"regalloc=... not currently supported with -O0", (const char *)1);
  llvm::LiveVariables::analyzePHINodes(this, a2);
  v10 = *(_QWORD *)(*((_QWORD *)this + 45) + 328);
  v36 = v40;
  v37 = v40;
  v38 = 16;
  v39 = 0;
  sub_1C61E5F20(&v41, v10, (llvm::SmallPtrSetImplBase *)&v36);
  v11 = v42;
  v31 = v43;
  v12 = (_BYTE *)v43;
  v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (_QWORD)v42) >> 3);
  v30[0] = v41;
  v30[1] = v42;
  v32 = (uint64_t *)&v36;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v42 = 0;
  v43 = 0uLL;
  sub_1C4D6CDA0(&v42, v11, v12, v13);
  while ((_BYTE *)v43 != v42)
  {
    llvm::LiveVariables::runOnBlock(this, *(llvm::MachineBasicBlock **)(v43 - 24), v5);
    v29 = 0;
    sub_1C511EB48((uint64_t)this + 384, v5, &v29);
    v29 = 0;
    sub_1C511EB48((uint64_t)this + 408, v5, &v29);
    sub_1C61E6020((char *)&v41);
  }
  if ((_QWORD)v43)
    operator delete((void *)v43);
  sub_1C618F0A8(v30);
  v14 = *((_DWORD *)this + 64);
  if (v14)
  {
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)(*((_QWORD *)this + 31) + 56 * (v15 & 0x7FFFFFFF) + 40)
          - *(_QWORD *)(*((_QWORD *)this + 31) + 56 * (v15 & 0x7FFFFFFF) + 32);
      if ((v16 & 0x7FFFFFFF8) != 0)
        break;
LABEL_25:
      if (++v15 == v14)
        goto LABEL_26;
    }
    v17 = 0;
    v18 = (v16 >> 3);
    while (1)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 46) + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
      if (v19)
      {
        if ((*(_BYTE *)(v19 + 3) & 1) != 0)
          goto LABEL_24;
        v19 = *(_QWORD *)(v19 + 24);
        if (v19)
        {
          if ((*(_BYTE *)(v19 + 3) & 1) != 0)
          {
LABEL_24:
            v19 = *(_QWORD *)(v19 + 8);
            goto LABEL_15;
          }
          v19 = 0;
        }
      }
LABEL_15:
      v20 = *(llvm::MachineInstr **)(*(_QWORD *)(*((_QWORD *)this + 31) + 56 * (v15 & 0x7FFFFFFF) + 32) + 8 * v17);
      v21 = *((_QWORD *)this + 47);
      v22 = v15 | 0x80000000;
      if (v20 == (llvm::MachineInstr *)v19)
        llvm::MachineInstr::addRegisterDead(v20, v22, v21, 0);
      else
        llvm::MachineInstr::addRegisterKilled(v20, v22, v21, 0);
      if (v18 == ++v17)
        goto LABEL_25;
    }
  }
LABEL_26:
  *((_QWORD *)this + 49) = *((_QWORD *)this + 48);
  *((_QWORD *)this + 52) = *((_QWORD *)this + 51);
  v24 = (char *)*((_QWORD *)this + 54);
  v23 = (char *)*((_QWORD *)this + 55);
  if (v23 != v24)
  {
    v25 = v23 - 16;
    do
    {
      v26 = (char *)*((_QWORD *)v25 - 2);
      if (v25 != v26)
        free(v26);
      v27 = v25 - 16;
      v25 -= 32;
    }
    while (v27 != v24);
  }
  *((_QWORD *)this + 55) = v24;
  if (v37 != v36)
    free(v37);
  return 0;
}

uint64_t *sub_1C511EB48(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(uint64_t **)a1;
  if (a2 > (v6 - (uint64_t)result) >> 3)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    v8 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9 >> 61)
      abort();
    result = (uint64_t *)operator new(8 * v9);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v9];
    v10 = (uint64_t)&result[a2];
    v11 = 8 * a2;
    v12 = *a3;
    do
    {
      *result++ = v12;
      v11 -= 8;
    }
    while (v11);
    goto LABEL_23;
  }
  v13 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)result) >> 3;
  if (v13 >= a2)
    v14 = a2;
  else
    v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)result) >> 3;
  for (; v14; --v14)
    *result++ = *a3;
  if (a2 <= v13)
  {
    v10 = *(_QWORD *)a1 + 8 * a2;
LABEL_23:
    *(_QWORD *)(a1 + 8) = v10;
    return result;
  }
  v15 = *(uint64_t **)(a1 + 8);
  v16 = &v15[a2 - v13];
  v17 = 8 * a2 - 8 * v13;
  do
  {
    *v15++ = *a3;
    v17 -= 8;
  }
  while (v17);
  *(_QWORD *)(a1 + 8) = v16;
  return result;
}

void llvm::LiveVariables::recomputeForSingleDefVirtReg(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t **v14;
  uint64_t UniqueVRegDef;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int **v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  unint64_t *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t **v85;
  unint64_t v86;
  int i;
  _QWORD *v88;
  uint64_t **v89;
  unsigned __int8 v90[8];
  uint64_t *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  char v95[8];
  uint64_t *v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  void *v104;
  uint64_t v105;
  _QWORD v106[8];

  v106[6] = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = (uint64_t *)(a1 + 248);
  v6 = a2 & 0x7FFFFFFF;
  if (v6 >= *(unsigned int *)(a1 + 256))
    sub_1C61E5C60((uint64_t *)(a1 + 248), v6 + 1, a1 + 264);
  v7 = *v5;
  v8 = (uint64_t *)(*v5 + 56 * v6);
  if (v8[2])
  {
    v10 = *v8;
    v9 = (uint64_t *)v8[1];
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(*v8 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    v8[2] = 0;
    if (v9 != v8)
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != v8);
    }
  }
  v13 = v7 + 56 * v6;
  v89 = (uint64_t **)(v13 + 32);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(v13 + 32);
  v14 = (unint64_t **)(v13 + 40);
  UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 368), v4);
  v16 = *(_QWORD *)(UniqueVRegDef + 24);
  if (sub_1C4A91738(*(_QWORD *)(a1 + 368), v4))
  {
    v17 = *v14;
    v18 = v7 + 56 * v6;
    v21 = *(_QWORD *)(v18 + 48);
    v20 = (_QWORD *)(v18 + 48);
    v19 = v21;
    if ((unint64_t)*v14 >= v21)
    {
      v28 = (unint64_t *)*v89;
      v29 = ((char *)v17 - (char *)*v89) >> 3;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 61)
LABEL_127:
        abort();
      v31 = v19 - (_QWORD)v28;
      if (v31 >> 2 > v30)
        v30 = v31 >> 2;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
        v32 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        if (v32 >> 61)
LABEL_128:
          sub_1C4764EE4();
        v33 = (char *)operator new(8 * v32);
      }
      else
      {
        v33 = 0;
      }
      v59 = (uint64_t *)&v33[8 * v29];
      *v59 = UniqueVRegDef;
      v22 = (unint64_t *)(v59 + 1);
      if (v17 != v28)
      {
        do
        {
          v60 = *--v17;
          *--v59 = v60;
        }
        while (v17 != v28);
        v17 = (unint64_t *)*v89;
      }
      *v89 = v59;
      *v14 = v22;
      *v20 = &v33[8 * v32];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v17 = UniqueVRegDef;
      v22 = v17 + 1;
    }
    *v14 = v22;
    llvm::MachineInstr::addRegisterDead((llvm::MachineInstr *)UniqueVRegDef, v4, 0, 0);
    return;
  }
  v23 = *(unsigned int *)(UniqueVRegDef + 40);
  if ((_DWORD)v23)
  {
    v24 = *(_DWORD **)(UniqueVRegDef + 32);
    v25 = 32 * v23;
    do
    {
      if ((*v24 & 0x10000FF) == 0x1000000 && v24[1] == a2)
        *v24 &= ~0x4000000u;
      v24 += 8;
      v25 -= 32;
    }
    while (v25);
  }
  v105 = 0x600000000;
  v100 = (uint64_t)&v100;
  v101 = &v100;
  v102 = 0;
  v103 = &v100;
  v104 = v106;
  v26 = *(_QWORD *)(a1 + 368);
  if ((a2 & 0x80000000) != 0)
    v27 = (unsigned int **)(*(_QWORD *)(v26 + 24) + 16 * v6 + 8);
  else
    v27 = (unsigned int **)(*(_QWORD *)(v26 + 272) + 8 * v4);
  v34 = *v27;
  if (*v27)
  {
    v35 = *v34;
    for (i = v4; (*v34 & 0x81000000) != 0; v35 = *v34)
    {
      v34 = (unsigned int *)*((_QWORD *)v34 + 3);
      if (!v34)
        goto LABEL_73;
    }
LABEL_31:
    *v34 = v35 & 0xFBFFFFFF;
    v36 = *((_QWORD *)v34 + 1);
    v37 = *(_QWORD *)(v36 + 24);
    sub_1C4DB3420(&v100, *(_DWORD *)(v37 + 24));
    v38 = **(unsigned __int16 **)(v36 + 16);
    if (v38 == 69 || v38 == 0)
    {
      v40 = *(_QWORD *)(*(_QWORD *)(v36 + 32)
                      + 32 * ((((unint64_t)v34 - *(_QWORD *)(v36 + 32)) >> 5) + 1)
                      + 16);
      v41 = v105;
      if (v105 >= (unint64_t)HIDWORD(v105))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)v106, v105 + 1, 8);
        v41 = v105;
      }
      *((_QWORD *)v104 + v41) = v40;
      v42 = v105 + 1;
    }
    else
    {
      if (v37 == v16)
        goto LABEL_47;
      v43 = *(char **)(v37 + 64);
      v44 = *(char **)(v37 + 72);
      v45 = v44 - v43;
      v46 = v105;
      v47 = v105 + ((v44 - v43) >> 3);
      if (v47 > HIDWORD(v105))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)v106, v47, 8);
        v45 = v44 - v43;
        v46 = v105;
      }
      if (v43 != v44)
      {
        v48 = (char *)v104 + 8 * v46;
        do
        {
          v49 = *(_QWORD *)v43;
          v43 += 8;
          *v48++ = v49;
        }
        while (v43 != v44);
      }
      v42 = v46 + (v45 >> 3);
    }
    LODWORD(v105) = v42;
LABEL_47:
    LODWORD(v4) = i;
    while (1)
    {
      v34 = (unsigned int *)*((_QWORD *)v34 + 3);
      if (!v34)
        break;
      v35 = *v34;
      if ((*v34 & 0x81000000) == 0)
        goto LABEL_31;
    }
    v50 = v105;
    if ((_DWORD)v105)
    {
      LOBYTE(v34) = 0;
      do
      {
        v51 = *((_QWORD *)v104 + --v50);
        LODWORD(v105) = v50;
        if (v51 == v16)
        {
          LOBYTE(v34) = 1;
        }
        else if (sub_1C617C970(v8, *(_DWORD *)(v51 + 24)))
        {
          v50 = v105;
        }
        else
        {
          sub_1C4DB3420(v8, *(_DWORD *)(v51 + 24));
          v52 = *(char **)(v51 + 64);
          v53 = *(char **)(v51 + 72);
          v54 = v53 - v52;
          v55 = v105;
          v56 = v105 + ((v53 - v52) >> 3);
          if (v56 > HIDWORD(v105))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)v106, v56, 8);
            v55 = v105;
          }
          if (v52 != v53)
          {
            v57 = (char *)v104 + 8 * v55;
            do
            {
              v58 = *(_QWORD *)v52;
              v52 += 8;
              *v57++ = v58;
            }
            while (v52 != v53);
          }
          v50 = v55 + (v54 >> 3);
          LODWORD(v105) = v50;
          LODWORD(v4) = i;
        }
      }
      while (v50);
    }
    else
    {
      LOBYTE(v34) = 0;
    }
  }
LABEL_73:
  v96 = &v100;
  v97 = v101;
  v99 = 0;
  v98 = 0xFFFFFFFF00000000;
  v95[0] = 0;
  sub_1C511F4E8((uint64_t)v95);
  v91 = &v100;
  v92 = v101;
  v94 = 0;
  v93 = 0xFFFFFFFF00000000;
  v90[0] = 1;
  sub_1C511F4E8((uint64_t)v90);
  v61 = v95[0];
  v62 = v90[0];
  if (!v95[0] || !v90[0])
  {
    v67 = (_QWORD *)(v7 + 56 * v6 + 48);
    while (1)
    {
      v68 = v98;
      if (v61 == v62 && (_DWORD)v93 == (_DWORD)v98)
        break;
      if ((sub_1C617C970(v8, v98) & 1) == 0)
      {
        v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 360) + 104) + 8 * v68);
        if (((v69 == v16) & v34) == 0)
        {
          v71 = *(_QWORD *)(v69 + 48);
          v70 = v69 + 48;
          v72 = v71 & 0xFFFFFFFFFFFFFFF8;
          if ((v71 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v72 & 4) == 0)
          {
            while ((*(_WORD *)(v72 + 44) & 4) != 0)
              v72 = *(_QWORD *)v72 & 0xFFFFFFFFFFFFFFF8;
          }
          while (1)
          {
            if (v72 == v70)
              goto LABEL_86;
            v73 = **(unsigned __int16 **)(v72 + 16);
            if ((v73 - 13) >= 5 && v73 != 23)
            {
              if (!**(_WORD **)(v72 + 16) || v73 == 69)
                goto LABEL_86;
              if (llvm::MachineInstr::findRegisterUseOperandIdx(v72, v4, 0, 0) != -1)
                break;
            }
            v72 = *(_QWORD *)v72 & 0xFFFFFFFFFFFFFFF8;
            if (!v72 || (*(_BYTE *)v72 & 4) == 0)
            {
              while ((*(_WORD *)(v72 + 44) & 4) != 0)
                v72 = *(_QWORD *)v72 & 0xFFFFFFFFFFFFFFF8;
            }
          }
          llvm::MachineInstr::addRegisterKilled((llvm::MachineInstr *)v72, v4, 0, 0);
          v75 = *v14;
          v76 = *v67;
          if ((unint64_t)*v14 >= *v67)
          {
            v88 = v67;
            v78 = (unint64_t *)*v89;
            v79 = ((char *)v75 - (char *)*v89) >> 3;
            v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 61)
              goto LABEL_127;
            v81 = v76 - (_QWORD)v78;
            if (v81 >> 2 > v80)
              v80 = v81 >> 2;
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
              v80 = 0x1FFFFFFFFFFFFFFFLL;
            v86 = v80;
            if (v80)
            {
              if (v80 >> 61)
                goto LABEL_128;
              v82 = (char *)operator new(8 * v80);
            }
            else
            {
              v82 = 0;
            }
            v83 = (unint64_t *)&v82[8 * v79];
            *v83 = v72;
            v77 = v83 + 1;
            if (v75 == v78)
            {
              v85 = (unint64_t **)v89;
            }
            else
            {
              do
              {
                v84 = *--v75;
                *--v83 = v84;
              }
              while (v75 != v78);
              v85 = (unint64_t **)v89;
              v75 = (unint64_t *)*v89;
            }
            *v85 = v83;
            v67 = v88;
            *v14 = v77;
            *v88 = &v82[8 * v86];
            if (v75)
              operator delete(v75);
          }
          else
          {
            *v75 = v72;
            v77 = v75 + 1;
          }
          *v14 = v77;
        }
      }
LABEL_86:
      LODWORD(v98) = v98 + 1;
      v99 >>= 1;
      sub_1C511F56C((uint64_t)v95);
      v61 = v95[0];
      v62 = v90[0];
      if (v95[0])
      {
        if (v90[0])
          break;
      }
    }
  }
  if (v102)
  {
    v64 = v100;
    v63 = v101;
    v65 = *v101;
    *(_QWORD *)(v65 + 8) = *(_QWORD *)(v100 + 8);
    **(_QWORD **)(v64 + 8) = v65;
    v102 = 0;
    if (v63 != &v100)
    {
      do
      {
        v66 = (uint64_t *)v63[1];
        operator delete(v63);
        v63 = v66;
      }
      while (v66 != &v100);
    }
  }
  if (v104 != v106)
    free(v104);
}

BOOL sub_1C511F3EC(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;

  v3 = *(char **)(a1 + 32);
  v4 = *(char **)(a1 + 40);
  if (v3 != v4)
  {
    while (*(_QWORD *)v3 != a2)
    {
      v3 += 8;
      if (v3 == v4)
      {
        v3 = *(char **)(a1 + 40);
        break;
      }
    }
  }
  if (v3 != v4)
  {
    if (v4 != v3 + 8)
      memmove(v3, v3 + 8, v4 - (v3 + 8));
    *(_QWORD *)(a1 + 40) = v4 - 8;
  }
  return v3 != v4;
}

void sub_1C511F468(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 16;
      do
      {
        v7 = (char *)*((_QWORD *)v6 - 2);
        if (v6 != v7)
          free(v7);
        v8 = v6 - 16;
        v6 -= 32;
      }
      while (v8 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C511F4E8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  unint64_t v8;
  char v9;
  unsigned int v10;

  if (!*(_BYTE *)result)
  {
    v1 = *(_QWORD *)(result + 8);
    if (*(_QWORD *)(v1 + 16))
    {
      v2 = 0;
      v3 = *(_QWORD *)(v1 + 8);
      *(_QWORD *)(result + 16) = v3;
      v5 = *(_DWORD *)(v3 + 16);
      v4 = v3 + 16;
      v6 = v5 << 7;
      v7 = 1;
      while (1)
      {
        v8 = *(_QWORD *)(v4 + 8 * v2 + 8);
        if (v8)
          break;
        v9 = v7;
        v7 = 0;
        v2 = 1;
        if ((v9 & 1) == 0)
          goto LABEL_8;
      }
      LODWORD(v8) = __clz(__rbit64(v8)) | ((_DWORD)v2 << 6);
LABEL_8:
      v10 = (v8 >> 6) & 1;
      *(_DWORD *)(result + 24) = v8 + v6;
      *(_DWORD *)(result + 28) = v10;
      *(_QWORD *)(result + 32) = *(_QWORD *)(v4 + 8 * v10 + 8) >> v8;
    }
    else
    {
      *(_BYTE *)result = 1;
    }
  }
  return result;
}

uint64_t sub_1C511F56C(uint64_t result)
{
  unint64_t v1;
  BOOL v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  unint64_t v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;

  if (*(_BYTE *)result)
    return result;
  v1 = *(_QWORD *)(result + 32);
  if (v1)
    v2 = (*(_QWORD *)(result + 32) & 1) == 0;
  else
    v2 = 0;
  if (v2)
  {
    v3 = *(_DWORD *)(result + 24);
    do
    {
      v4 = v1;
      v1 >>= 1;
      ++v3;
    }
    while (v4 >= 2 && (v4 & 2) == 0);
    *(_QWORD *)(result + 32) = v1;
    *(_DWORD *)(result + 24) = v3;
  }
  if (v1)
    return result;
  v5 = *(_QWORD *)(result + 16);
  v6 = (_DWORD *)(v5 + 16);
  v7 = *(_DWORD *)(result + 24) & 0x7F;
  v8 = (-1 << *(_DWORD *)(result + 24)) & *(_QWORD *)(v5
                                                      + 16
                                                      + (((unint64_t)*(unsigned int *)(result + 24) >> 3) & 8)
                                                      + 8);
  if (v8)
  {
    v21 = *(_DWORD *)(result + 24) & 0x40;
    v22 = __clz(__rbit64(v8));
LABEL_27:
    if (v7)
    {
      v23 = v21 | v22;
      v24 = (v21 | v22) >> 6;
      v25 = (v21 | v22) - 64;
      if (v23 < 0x40)
        v25 = v23;
      *(_QWORD *)(result + 32) = *(_QWORD *)&v6[2 * v24 + 2] >> v25;
      *(_DWORD *)(result + 24) = v23 + (*v6 << 7);
      *(_DWORD *)(result + 28) = v24;
      return result;
    }
    goto LABEL_16;
  }
  if (v7 <= 0x3F)
  {
    v9 = *(_QWORD *)(v5 + 32);
    if (v9)
    {
      v21 = __clz(__rbit64(v9));
      v22 = 64;
      goto LABEL_27;
    }
  }
LABEL_16:
  v10 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(result + 16) = v10;
  *(_DWORD *)(result + 28) = 0;
  if (v10 == *(_QWORD *)(result + 8))
  {
    *(_BYTE *)result = 1;
  }
  else
  {
    v11 = 0;
    v13 = *(_DWORD *)(v10 + 16);
    v12 = v10 + 16;
    v14 = v13 << 7;
    v15 = 1;
    while (1)
    {
      v16 = *(_QWORD *)(v12 + 8 * v11 + 8);
      if (v16)
        break;
      v17 = v15;
      v15 = 0;
      v11 = 1;
      if ((v17 & 1) == 0)
        goto LABEL_23;
    }
    LODWORD(v16) = __clz(__rbit64(v16)) | ((_DWORD)v11 << 6);
LABEL_23:
    v18 = (v16 >> 6) & 1;
    *(_DWORD *)(result + 24) = v16 + v14;
    *(_DWORD *)(result + 28) = v18;
    v19 = *(_QWORD *)(v12 + 8 * v18 + 8);
    v20 = v16 - 64;
    if (v16 < 0x40)
      v20 = v16;
    *(_QWORD *)(result + 32) = v19 >> v20;
  }
  return result;
}

unint64_t sub_1C511F6CC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 56 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C61E5D04(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C61E5D04(a1, v5);
    }
  }
  return a2;
}

__n128 sub_1C511F734(__n128 *a1, __n128 *a2, uint64_t *a3)
{
  __n128 *v5;
  __n128 result;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_1C6185480(a3, v5);
      a3[3] = a3[1];
      a3[4] = 0;
      a3[5] = 0;
      a3[6] = 0;
      result = v5[2];
      *((__n128 *)a3 + 2) = result;
      a3[6] = v5[3].n128_i64[0];
      v5[2].n128_u64[0] = 0;
      v5[2].n128_u64[1] = 0;
      v5[3].n128_u64[0] = 0;
      a3 += 7;
      v5 = (__n128 *)((char *)v5 + 56);
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *sub_1C511F7AC(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;

  if (a2)
  {
    v4 = a2;
    v5 = result + 4;
    do
    {
      sub_1C61E5DCC(v5 - 4, a3);
      *(v5 - 1) = *(v5 - 3);
      *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
      result = sub_1C4DFE394(v5, *(const void **)(a3 + 32), *(_QWORD *)(a3 + 40), (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3);
      v5 += 7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_1C511F814(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t *v25;

  v4 = a1[2];
  v5 = a1[1];
  if (a2 > (v4 - v5) >> 5)
  {
    v9 = v5 - *a1;
    v10 = a2 + (v9 >> 5);
    if (v10 >> 59)
      abort();
    v11 = v4 - *a1;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v25 = a1 + 2;
    if (v12)
    {
      if (v12 >> 59)
        sub_1C4764EE4();
      v13 = (char *)operator new(32 * v12);
    }
    else
    {
      v13 = 0;
    }
    __p = v13;
    v22 = &v13[32 * (v9 >> 5)];
    v24 = &v13[32 * v12];
    v14 = &v22[32 * a2];
    v15 = 32 * a2;
    v16 = v22 + 16;
    do
    {
      *((_QWORD *)v16 - 2) = v16;
      *((_QWORD *)v16 - 1) = 0x400000000;
      v16 += 32;
      v15 -= 32;
    }
    while (v15);
    v23 = v14;
    sub_1C61E5E5C(a1, &__p);
    v17 = v22;
    if (v23 != v22)
    {
      v18 = v23 - 16;
      do
      {
        v19 = (char *)*((_QWORD *)v18 - 2);
        if (v18 != v19)
          free(v19);
        v20 = v18 - 16;
        v18 -= 32;
      }
      while (v20 != v17);
    }
    if (__p)
      operator delete(__p);
  }
  else
  {
    if (a2)
    {
      v6 = v5 + 32 * a2;
      v7 = 32 * a2;
      v8 = v5 + 16;
      do
      {
        *(_QWORD *)(v8 - 16) = v8;
        *(_QWORD *)(v8 - 8) = 0x400000000;
        v8 += 32;
        v7 -= 32;
      }
      while (v7);
    }
    else
    {
      v6 = a1[1];
    }
    a1[1] = v6;
  }
}

uint64_t (*sub_1C511F97C(uint64_t a1, uint64_t a2, uint64_t a3))(void **)
{
  uint64_t (*v3)(void **);
  _QWORD v5[4];
  __int16 v6;
  void *__p[2];
  char v8;

  v3 = *(uint64_t (**)(void **))(a1 + 80);
  if (v3)
  {
    v6 = 261;
    v5[0] = a2;
    v5[1] = a3;
    llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v5);
    v3 = (uint64_t (*)(void **))v3(__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return v3;
}

uint64_t sub_1C511F9DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, void **, uint64_t);
  uint64_t v8;
  _QWORD v10[4];
  __int16 v11;
  void *__p[2];
  char v13;

  v5 = *(uint64_t (**)(uint64_t, void **, uint64_t))(a1 + 48);
  if (!v5)
    return 0;
  v11 = 261;
  v10[0] = a3;
  v10[1] = a4;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v10);
  v8 = v5(a2, __p, a5);
  if (v13 < 0)
    operator delete(__p[0]);
  return v8;
}

uint64_t llvm::LLVMTargetMachine::LLVMTargetMachine(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4, __int128 *a5, const void *a6, size_t a7, int a8, void *__src, size_t a10, __int128 *a11, uint64_t a12, int a13)
{
  uint64_t result;

  result = llvm::TargetMachine::TargetMachine(a1, a2, a3, a4, a5, a6, a7, a8, __src, a10, a11);
  *(_QWORD *)result = &off_1E8143808;
  *(_QWORD *)(result + 544) = a12;
  *(_DWORD *)(result + 552) = a13;
  if (byte_1ED82F248)
    *(_DWORD *)(result + 1040) |= 0x80u;
  return result;
}

{
  uint64_t result;

  result = llvm::TargetMachine::TargetMachine(a1, a2, a3, a4, a5, a6, a7, a8, __src, a10, a11);
  *(_QWORD *)result = &off_1E8143808;
  *(_QWORD *)(result + 544) = a12;
  *(_DWORD *)(result + 552) = a13;
  if (byte_1ED82F248)
    *(_DWORD *)(result + 1040) |= 0x80u;
  return result;
}

void llvm::LLVMTargetMachine::createMCStreamer(uint64_t a1@<X0>, llvm::raw_pwrite_stream *a2@<X1>, llvm::raw_pwrite_stream *a3@<X2>, int a4@<W3>, llvm::MCContext *a5@<X4>, uint64_t a6@<X8>)
{
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t (*v17)(_QWORD, llvm::MCContext *);
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  unint64_t v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v27;
  llvm::MCStreamer *NullStreamer;
  void (*v29)(llvm::MCStreamer *);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(void);
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, llvm::MCContext *);
  uint64_t (*v38)(void);
  llvm::MCAsmBackend *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  llvm::MCAsmBackend *v43;
  void *v44;
  llvm::MCAsmBackend *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::MCAsmBackend *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  llvm::MCAsmBackend *v53[4];
  __int16 v54;
  void *__p[2];
  char v56;
  __int16 v57;
  uint64_t v58;

  if ((*(_WORD *)(a1 + 1128) & 0x40) != 0)
    *((_BYTE *)a5 + 1627) = 0;
  v11 = (_WORD *)(a1 + 1128);
  v12 = *(_QWORD *)(a1 + 584);
  v13 = *(_QWORD *)(a1 + 568);
  v14 = *(_QWORD *)(a1 + 576);
  if (a4 == 1)
  {
    v17 = *(uint64_t (**)(_QWORD, llvm::MCContext *))(*(_QWORD *)(a1 + 8) + 144);
    if (v17 && (v18 = v17(*(_QWORD *)(a1 + 576), a5)) != 0)
    {
      v19 = v18;
      v20 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 104);
      if (v20)
      {
        v21 = v20();
        if (v21)
        {
          v45 = (llvm::MCAsmBackend *)v21;
          v54 = 260;
          v53[0] = (llvm::MCAsmBackend *)(a1 + 448);
          llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v53);
          v46 = *(_QWORD *)(a1 + 8);
          v53[0] = v45;
          if (a3)
            llvm::MCAsmBackend::createDwoObjectWriter(v45, a2, a3, &v52);
          else
            llvm::MCAsmBackend::createObjectWriter(v45, a2, &v52);
          v51 = v19;
          v15 = sub_1C6175EA0(v46, (uint64_t)__p, a5, (uint64_t *)v53, &v52, &v51, v12, *v11 & 1, HIBYTE(*v11) & 1, 1u);
          v47 = v51;
          v51 = 0;
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
          v48 = v52;
          v52 = 0;
          if (v48)
            (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
          v49 = v53[0];
          v53[0] = 0;
          if (v49)
            (*(void (**)(llvm::MCAsmBackend *))(*(_QWORD *)v49 + 8))(v49);
          if (v56 < 0)
            operator delete(__p[0]);
          goto LABEL_7;
        }
      }
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v23 = qword_1ED836B58[0];
      v24 = (_QWORD *)operator new();
      v15 = (uint64_t)v24;
      v25 = "createMCAsmBackend failed";
    }
    else
    {
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v23 = qword_1ED836B58[0];
      v24 = (_QWORD *)operator new();
      v15 = (uint64_t)v24;
      v25 = "createMCCodeEmitter failed";
    }
    __p[0] = (void *)v25;
    v57 = 259;
    *v24 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)__p, v24 + 1);
    *(_QWORD *)(v15 + 32) = 3;
    *(_QWORD *)(v15 + 40) = v23;
    *(_BYTE *)(v15 + 48) = 1;
    v16 = *(_BYTE *)(a6 + 8) | 1;
    goto LABEL_19;
  }
  if (a4 == 2)
  {
    v27 = *(_QWORD *)(a1 + 8);
    NullStreamer = llvm::createNullStreamer(a5, a2);
    v15 = (uint64_t)NullStreamer;
    v29 = *(void (**)(llvm::MCStreamer *))(v27 + 200);
    if (v29)
      v29(NullStreamer);
  }
  else if (a4)
  {
    v15 = 0;
  }
  else
  {
    v30 = *(_QWORD *)(a1 + 560);
    v31 = *(_QWORD *)(a1 + 8);
    v32 = *(unsigned int *)(v30 + 176);
    v33 = *(void (**)(void))(v31 + 288);
    if (v33)
    {
      v50 = *(_DWORD *)(v30 + 176);
      v33();
      v32 = v50;
    }
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 136);
    if (v34)
      v35 = v34(a1 + 448, v32, v30, v14, v13);
    else
      v35 = 0;
    __p[0] = 0;
    v36 = *(_QWORD *)(a1 + 8);
    if ((*(_WORD *)(a1 + 1128) & 0x200) != 0)
    {
      v37 = *(uint64_t (**)(uint64_t, llvm::MCContext *))(v36 + 144);
      if (v37)
      {
        v37 = (uint64_t (*)(uint64_t, llvm::MCContext *))v37(v14, a5);
        v36 = *(_QWORD *)(a1 + 8);
      }
      __p[0] = v37;
    }
    v38 = *(uint64_t (**)(void))(v36 + 104);
    if (v38)
      v39 = (llvm::MCAsmBackend *)v38();
    else
      v39 = 0;
    v53[0] = v39;
    v40 = operator new();
    *(_DWORD *)(v40 + 8) = 0;
    *(_BYTE *)(v40 + 40) = 0;
    *(_QWORD *)(v40 + 48) = 0;
    *(_DWORD *)(v40 + 56) = 1;
    *(_QWORD *)(v40 + 24) = 0;
    *(_QWORD *)(v40 + 32) = 0;
    *(_QWORD *)(v40 + 16) = 0;
    *(_QWORD *)v40 = &off_1E81A1100;
    *(_QWORD *)(v40 + 64) = 0;
    *(_QWORD *)(v40 + 72) = 0;
    *(_QWORD *)(v40 + 88) = v40 + 112;
    *(_OWORD *)(v40 + 96) = xmmword_1C6612EF0;
    sub_1C4D685DC(v40, (uint64_t)a2);
    v41 = *(unsigned __int16 *)(a1 + 1128);
    v42 = *(_QWORD *)(a1 + 8);
    v58 = v40;
    v15 = sub_1C61E65D0(v42, (uint64_t)a5, &v58, (v41 >> 11) & 1, (v41 >> 7) & 1, v35, (uint64_t *)__p, v53, (v41 & 0x400) != 0);
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
    v43 = v53[0];
    v53[0] = 0;
    if (v43)
      (*(void (**)(llvm::MCAsmBackend *))(*(_QWORD *)v43 + 8))(v43);
    v44 = __p[0];
    __p[0] = 0;
    if (v44)
      (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
  }
LABEL_7:
  v16 = *(_BYTE *)(a6 + 8) & 0xFE;
LABEL_19:
  *(_BYTE *)(a6 + 8) = v16;
  *(_QWORD *)a6 = v15;
}

llvm::TargetMachine **sub_1C511FF24(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  llvm::TargetMachine **v7;

  v7 = (llvm::TargetMachine **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  *((_BYTE *)v7 + 129) = a3;
  (*(void (**)(uint64_t, llvm::TargetMachine **))(*(_QWORD *)a2 + 16))(a2, v7);
  (*((void (**)(llvm::TargetMachine **))*v7 + 19))(v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a4);
  if ((llvm::TargetPassConfig::addISelPasses(v7) & 1) != 0)
    return 0;
  (*((void (**)(llvm::TargetMachine **))*v7 + 31))(v7);
  *((_BYTE *)v7 + 128) = 1;
  return v7;
}

BOOL sub_1C511FFCC(uint64_t a1, int a2, int a3)
{
  return a2 != 55 || a3 == 0;
}

BOOL sub_1C511FFE0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 v5;

  v5 = sub_1C47A7FD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 16), a3, 0);
  if (!v5)
    return 0;
  return *(_WORD *)(*(_QWORD *)(a1 + 32) + 10 * v5 + 2 * a2 + 169796) < 0x10u
      || (*(_WORD *)(*(_QWORD *)(a1 + 32) + 10 * v5 + 2 * a2 + 169796) & 0xF0) == 64;
}

BOOL sub_1C5120054(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 v5;

  v5 = sub_1C47A7FD0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 16), a3, 0);
  return v5 && (*(_WORD *)(*(_QWORD *)(a1 + 32) + 10 * v5 + 2 * a2 + 169796) & 0xB) == 0;
}

uint64_t sub_1C51200BC(uint64_t *a1, uint64_t a2, llvm::Value *this, llvm **a4, uint64_t a5)
{
  llvm::Value *v10;
  llvm::Value *v11;
  const llvm::Value *v12;
  unsigned int PointerTypeSizeInBits;
  uint64_t v14;
  llvm **v15;
  uint64_t v16;
  unint64_t v17;
  llvm::UndefValue *AggregateElement;
  BOOL v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  llvm *v23;
  BOOL v24;
  llvm::APFloatBase *SplatValue;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  llvm::StructLayout *StructLayout;
  uint64_t v30;
  llvm::UndefValue *v31;
  BOOL v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  llvm::APInt **v42;
  unsigned int v43;
  llvm::APInt *v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  llvm::APInt *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BOOL4 v54;
  unsigned int v55;
  llvm::Value *v56;
  llvm::Value *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  llvm::Value *v62;
  llvm::Value *v63;
  llvm::APInt *v64;
  unsigned int v65;
  llvm **v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  _QWORD v70[2];
  BOOL v71;
  uint64_t v72;

  v10 = llvm::Value::stripPointerCasts(this);
  if (*((unsigned __int8 *)v10 + 16) >= 4u)
    v11 = 0;
  else
    v11 = v10;
  PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits(*a1, *(_QWORD *)this);
  v69 = PointerTypeSizeInBits;
  if (PointerTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v68, 0, 0);
  else
    v68 = 0;
  v66 = a4;
  v67 = a2 | 4;
  if (!a5)
  {
    v55 = v11 != 0;
    goto LABEL_86;
  }
  v62 = this;
  v63 = v11;
  v14 = 0;
  v15 = &a4[a5];
  do
  {
    v16 = v14;
    v17 = v67 & 0xFFFFFFFFFFFFFFF8;
    if ((v67 & 4) == 0 || !v17)
    {
      AggregateElement = *v66;
      if (*v66)
        v19 = *((_BYTE *)*v66 + 16) == 16;
      else
        v19 = 0;
      if (!v19)
        AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
      v22 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
      v20 = (unsigned int *)((char *)AggregateElement + 24);
      v21 = v22;
      if (v20[2] < 0x41)
        v21 = v20;
      v17 = *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * *v21);
    }
    v23 = *a4;
    if (*a4)
      v24 = *((_BYTE *)*a4 + 16) == 16;
    else
      v24 = 0;
    if (!v24)
    {
      SplatValue = llvm::getSplatValue(*a4, v12);
      if (SplatValue)
      {
        if (*((_BYTE *)SplatValue + 16) == 16)
          v23 = SplatValue;
        else
          v23 = 0;
      }
      else
      {
        v23 = 0;
      }
    }
    v26 = v67 & 0xFFFFFFFFFFFFFFF8;
    if ((v67 & 4) == 0 && v26)
    {
      v27 = (unsigned int *)((char *)v23 + 24);
      if (*((_DWORD *)v23 + 8) >= 0x41u)
        v27 = *(unsigned int **)v27;
      v28 = *v27;
      StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)*a1, (llvm::StructType *)(v67 & 0xFFFFFFFFFFFFFFF8));
      llvm::APInt::operator+=((uint64_t)&v68, *((_QWORD *)StructLayout + v28 + 2));
LABEL_61:
      v14 = v16;
      goto LABEL_62;
    }
    if (*(_BYTE *)(v17 + 8) == 19)
      goto LABEL_85;
    v30 = *a1;
    if (!v26 || (v67 & 4) == 0)
    {
      v31 = *v66;
      if (*v66)
        v32 = *((_BYTE *)*v66 + 16) == 16;
      else
        v32 = 0;
      if (!v32)
        v31 = llvm::Constant::getAggregateElement(v31, 0);
      v35 = (unsigned int *)*((_QWORD *)v31 + 3);
      v33 = (unsigned int *)((char *)v31 + 24);
      v34 = v35;
      if (v33[2] < 0x41)
        v34 = v33;
      v26 = *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * *v34);
    }
    sub_1C4768AD0(v30, v26);
    v37 = (unint64_t)(v36 + 7) >> 3;
    llvm::DataLayout::getAlignment(v30, v26);
    v14 = ((1 << v38) + v37 - 1) & -(1 << v38);
    if (v23)
    {
      v39 = *((_DWORD *)v23 + 8);
      if (v39 < PointerTypeSizeInBits)
      {
        llvm::APInt::sext((llvm *)((char *)v23 + 24), PointerTypeSizeInBits, (llvm::APInt *)&v64);
      }
      else if (v39 > PointerTypeSizeInBits)
      {
        llvm::APInt::trunc((llvm *)((char *)v23 + 24), PointerTypeSizeInBits, (llvm::APInt *)&v64);
      }
      else
      {
        sub_1C5DD14E0((uint64_t)&v64, (uint64_t)v23 + 24);
      }
      v40 = v65;
      if (v65 > 0x40)
      {
        llvm::APInt::tcMultiplyPart(v64, (unint64_t *)v64, (const unint64_t *)v14, 0, ((unint64_t)v65 + 63) >> 6, ((unint64_t)v65 + 63) >> 6, 0);
        v40 = v65;
        if (v65)
        {
LABEL_49:
          v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v40;
          if (v40 >= 0x41)
          {
            v42 = (llvm::APInt **)((char *)v64 + 8 * (((unint64_t)v40 + 63) >> 6) - 8);
            goto LABEL_51;
          }
LABEL_50:
          v42 = &v64;
LABEL_51:
          *v42 = (llvm::APInt *)((unint64_t)*v42 & v41);
          v43 = v65;
          v44 = v64;
          v65 = 0;
          v45 = v69;
          if (v69 >= 0x41)
          {
            v47 = 0;
            v48 = (unint64_t *)v68;
            v49 = ((unint64_t)v69 + 63) >> 6;
            v50 = v64;
            v51 = v49;
            do
            {
              v52 = *(_QWORD *)v50;
              v50 = (llvm::APInt *)((char *)v50 + 8);
              v53 = v52 + *v48;
              v54 = v53 + 1 <= *v48;
              if (v47)
              {
                ++v53;
                v47 = v54;
              }
              else
              {
                v47 = v53 < *v48;
              }
              *v48++ = v53;
              --v51;
            }
            while (v51);
            *(_QWORD *)(v68 + 8 * (v49 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v45;
          }
          else
          {
            if (v69)
              v46 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v69;
            else
              v46 = 0;
            v68 = v46 & ((unint64_t)v64 + v68);
          }
          if (v43 >= 0x41 && v44)
            MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
          if (v65 >= 0x41 && v64)
            MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
          goto LABEL_61;
        }
      }
      else
      {
        v64 = (llvm::APInt *)((_QWORD)v64 * v14);
        if (v65)
          goto LABEL_49;
      }
      v41 = 0;
      goto LABEL_50;
    }
    if (v16)
    {
LABEL_85:
      v55 = 1;
      goto LABEL_86;
    }
LABEL_62:
    ++a4;
    sub_1C4843D7C((uint64_t)&v66);
  }
  while (a4 != v15);
  if (v69 <= 0x3F)
  {
    v58 = (uint64_t)(v68 << -(char)v69) >> -(char)v69;
    v56 = v62;
    v57 = v63;
  }
  else
  {
    v56 = v62;
    v57 = v63;
    if (v69 == 64)
      v58 = v68;
    else
      v58 = *(_QWORD *)v68;
  }
  v59 = *(_QWORD *)v56;
  v60 = *(_DWORD *)(*(_QWORD *)v56 + 8);
  if ((v60 & 0xFE) == 0x12)
    v60 = *(_DWORD *)(**(_QWORD **)(v59 + 16) + 8);
  v70[0] = v57;
  v70[1] = v58;
  v71 = v57 == 0;
  v72 = v14;
  v55 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, unint64_t, _QWORD, _QWORD))(*(_QWORD *)a1[2]
                                                                                                + 1064))(a1[2], *a1, v70, v17, v60 >> 8, 0) ^ 1;
LABEL_86:
  if (v69 >= 0x41 && v68)
    MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
  return v55;
}

uint64_t sub_1C51205AC(uint64_t *a1, int **this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::ShuffleVectorInst *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  llvm::ShuffleVectorInst *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  llvm::Type *****v19;
  llvm::Type ***v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t **v23;
  unsigned int CastContextHint;
  uint64_t v25;
  int v26;
  int8x8_t **v27;
  int v28;
  unint64_t v29;
  int8x8_t **v30;
  int v31;
  uint64_t v32;
  int8x8_t **v33;
  uint64_t v34;
  int8x8_t **v35;
  int8x8_t *v36;
  unint64_t v37;
  void *v38;
  BOOL v39;
  uint64_t **v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Value **v46;
  int v47;
  unint64_t v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t **v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  const llvm::DataLayout *v57;
  llvm::TargetLoweringBase *v58;
  uint64_t v59;
  int v61;
  uint64_t **v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  int v70;
  int *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  int *v82;
  int v83;
  llvm::FixedVectorType *v84;
  uint64_t v85;
  int **v86;
  uint64_t v87;
  char v88[2];
  _DWORD v89[5];
  int v90[2];
  int8x8_t *v91;
  void *v92;
  uint64_t v93;
  int8x8_t *v94;
  int8x8_t *v95;
  uint64_t v96;
  void *v97;
  _QWORD v98[8];

  v6 = (llvm::ShuffleVectorInst *)this;
  v98[7] = *MEMORY[0x1E0C80C00];
  v7 = *((unsigned __int8 *)this + 16);
  v8 = v7 - 28;
  if (v7 < 0x1C)
    goto LABEL_16;
  if (v7 == 33 || v7 == 39)
    goto LABEL_9;
  if (v7 == 84)
  {
    v9 = (uint64_t)*(this - 4);
    if (!v9
      || *(_BYTE *)(v9 + 16)
      || *(int **)(v9 + 24) != this[9]
      || (v10 = (llvm::ShuffleVectorInst *)this, (*(_BYTE *)(v9 + 33) & 0x20) == 0))
    {
LABEL_9:
      v11 = (uint64_t)*(this - 4);
      if (!v11 || *(_BYTE *)(v11 + 16) || *(int **)(v11 + 24) != this[9])
      {
        if (v7 == 84)
        {
          v12 = 0;
        }
        else if (v7 == 39)
        {
          v12 = (*((_DWORD *)this + 20) + 1);
        }
        else
        {
          v12 = 2;
        }
        v13 = 0;
        v14 = *((_DWORD *)this + 5);
        v15 = -(uint64_t)(v14 & 0x7FFFFFF);
        if (v14 < 0)
        {
          v86 = &this[-4 * (v14 & 0x7FFFFFF)];
          v87 = (uint64_t)*(v86 - 1);
          if ((v87 & 0xFFFFFFFF0) != 0)
            v13 = *((_DWORD *)v86 - 3) - *(_DWORD *)((char *)v86 - v87);
          else
            v13 = 0;
        }
        return ((-32 * v12 + 32 * (unint64_t)-v13 - 32 * v15 - 32) >> 5) + 1;
      }
      if (sub_1C4845148((uint64_t)a1, (uint64_t ***)*(this - 4)))
        return *(unsigned int *)(*(_QWORD *)(v11 + 24) + 12);
      return 1;
    }
  }
  else
  {
LABEL_16:
    v10 = 0;
  }
  v17 = *((_DWORD *)this + 5);
  v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) == 1)
  {
    if ((v17 & 0x40000000) != 0)
      v19 = (llvm::Type *****)*(this - 1);
    else
      v19 = (llvm::Type *****)(this - 4);
    v20 = **v19;
  }
  else
  {
    v20 = 0;
  }
  v21 = (uint64_t)*this;
  if (v7 <= 0x1B)
  {
    if (v7 != 5)
      return 1;
    v8 = *((unsigned __int16 *)this + 9);
  }
  v16 = 0;
  v22 = (uint64_t)(a1 - 1);
  switch((int)v8)
  {
    case 1:
    case 2:
    case 3:
    case 55:
      if ((_DWORD)a5)
        v39 = (_DWORD)v8 == 55;
      else
        v39 = 0;
      return !v39;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      v89[1] = 0;
      LODWORD(v91) = 0;
      if ((v17 & 0x40000000) != 0)
        v23 = (int8x8_t **)*(this - 1);
      else
        v23 = (int8x8_t **)&this[-4 * v18];
      llvm::TargetTransformInfo::getOperandInfo(*v23, (const llvm::Value *)&v89[1]);
      if ((_DWORD)v8 != 12)
      {
        v26 = *((_DWORD *)v6 + 5);
        if ((v26 & 0x40000000) != 0)
          v27 = (int8x8_t **)*((_QWORD *)v6 - 1);
        else
          v27 = (int8x8_t **)((char *)v6 - 32 * (v26 & 0x7FFFFFF));
        llvm::TargetTransformInfo::getOperandInfo(v27[4], (const llvm::Value *)&v91);
      }
      v28 = *((_DWORD *)v6 + 5);
      if ((v28 & 0x40000000) != 0)
      {
        v30 = (int8x8_t **)*((_QWORD *)v6 - 1);
        v29 = v28 & 0x7FFFFFF;
      }
      else
      {
        v29 = v28 & 0x7FFFFFF;
        v30 = (int8x8_t **)((char *)v6 - 32 * v29);
      }
      v92 = &v94;
      v93 = 0x200000000;
      if (v29 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)&v94, v29, 8);
        v31 = v93;
        v33 = (int8x8_t **)v92;
        v32 = v93;
      }
      else
      {
        v31 = 0;
        if (!v29)
          goto LABEL_47;
        v32 = 0;
        v33 = &v94;
      }
      v34 = 32 * v29;
      v35 = &v33[v32];
      do
      {
        v36 = *v30;
        v30 += 4;
        *v35++ = v36;
        v34 -= 32;
      }
      while (v34);
LABEL_47:
      LODWORD(v93) = v31 + v29;
      sub_1C5121850(v22, v8);
      v16 = v37;
      v38 = v92;
      if (v92 != &v94)
LABEL_48:
        free(v38);
      return v16;
    case 31:
      if (*((_BYTE *)*(this - 4) + 16) != 16)
        return 1;
      v41 = this[5];
      v42 = *(_QWORD *)(*((_QWORD *)v41 + 7) + 80);
      v43 = v42 ? v42 - 24 : 0;
      return v41 != (int *)v43 || (*((_WORD *)this + 9) & 0x40) != 0;
    case 32:
      if ((_DWORD)a5 == 2)
      {
        v52 = this[1];
        if (v52)
        {
          if (!*((_QWORD *)v52 + 1) && (*(_DWORD *)(v21 + 8) & 0xFE) != 0x12)
          {
            v53 = *((_QWORD *)v52 + 3);
            if (v53)
            {
              if (*(_BYTE *)(v53 + 16) == 66)
                v21 = *(_QWORD *)v53;
            }
          }
        }
      }
      v54 = (uint64_t)(a1 - 1);
      v55 = 32;
      v56 = v21;
      return sub_1C5122554(v54, v55, v56, a5);
    case 33:
      if ((v17 & 0x40000000) != 0)
        v51 = (uint64_t **)*(this - 1);
      else
        v51 = (uint64_t **)&this[-4 * v18];
      v56 = **v51;
      v54 = (uint64_t)(a1 - 1);
      v55 = 33;
      return sub_1C5122554(v54, v55, v56, a5);
    case 34:
      v39 = v7 == 62;
      v44 = 3;
      if (v39)
        v44 = 8;
      v45 = (uint64_t)this[v44];
      if ((v17 & 0x40000000) != 0)
        v46 = (llvm::Value **)*((_QWORD *)v6 - 1);
      else
        v46 = (llvm::Value **)((char *)v6 - 32 * v18);
      return sub_1C51200BC(a1, v45, *v46, (llvm **)(a3 + 8), a4 - 1);
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      if (v7 <= 0x1B)
        v6 = 0;
      CastContextHint = llvm::TargetTransformInfo::getCastContextHint((uint64_t)v6);
      return sub_1C5121DC4(v22, v8, (llvm::Type ***)v21, v20, CastContextHint, a5, (uint64_t)v6);
    case 53:
    case 54:
      if ((v17 & 0x40000000) != 0)
        v40 = (uint64_t **)*(this - 1);
      else
        v40 = (uint64_t **)&this[-4 * v18];
      return sub_1C51226E4((uint64_t)(a1 - 1), v8, **v40, (uint64_t)*this, a5);
    case 56:
      llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)&v92, (*(this - 4))[9], (uint64_t)v10, 0, 1);
      v16 = sub_1C5120FD0(v22, (uint64_t)&v92, a5);
      if (v97 != v98)
        free(v97);
      v38 = v95;
      if (v95 == (int8x8_t *)&v96)
        return v16;
      goto LABEL_48;
    case 57:
      *(_QWORD *)v90 = 0;
      v91 = 0;
      v92 = &v91;
      v93 = (uint64_t)v90;
      if ((sub_1C4848F80((_QWORD **)&v92, (uint64_t)this) & 1) != 0
        || (*(_QWORD *)&v89[1] = &v91,
            *(_QWORD *)&v89[3] = v90,
            (sub_1C4849098((_QWORD **)&v89[1], (uint64_t)v6) & 1) != 0))
      {
        *(_QWORD *)v89 = 0;
        llvm::TargetTransformInfo::getOperandInfo(v91, (const llvm::Value *)&v89[1]);
        llvm::TargetTransformInfo::getOperandInfo(*(int8x8_t **)v90, (const llvm::Value *)v89);
        v92 = &v94;
        v94 = v91;
        v95 = *(int8x8_t **)v90;
        v93 = 0x200000002;
        if (sub_1C48491B0((uint64_t)v88, (unsigned __int8 *)v6))
          v47 = 29;
        else
          v47 = 28;
        sub_1C5121850(v22, v47);
        v16 = v48;
        if (v92 != &v94)
          free(v92);
      }
      else
      {
        v61 = *((_DWORD *)v6 + 5);
        if ((v61 & 0x40000000) != 0)
          v62 = (uint64_t **)*((_QWORD *)v6 - 1);
        else
          v62 = (uint64_t **)((char *)v6 - 32 * (v61 & 0x7FFFFFF));
        return sub_1C51226E4(v22, 57, *(_QWORD *)v6, **v62, a5);
      }
      return v16;
    case 61:
      if (v7 != 89)
        return 1;
      if ((v17 & 0x40000000) != 0)
        v50 = (uint64_t **)*(this - 1);
      else
        v50 = (uint64_t **)&this[-4 * v18];
      v59 = **v50;
      v57 = (const llvm::DataLayout *)*a1;
      if ((*(_DWORD *)(v59 + 8) & 0xFE) == 0x12)
        v59 = **(_QWORD **)(v59 + 16);
      v58 = (llvm::TargetLoweringBase *)a1[2];
      goto LABEL_131;
    case 62:
      if (v7 != 90)
        return 1;
      v57 = (const llvm::DataLayout *)*a1;
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
        v21 = **(_QWORD **)(v21 + 16);
      v58 = (llvm::TargetLoweringBase *)a1[2];
      v59 = v21;
LABEL_131:
      llvm::TargetLoweringBase::getTypeLegalizationCost(v58, v57, (llvm::EVT **)v59, (uint64_t)&v92);
      return (uint64_t)v92;
    case 63:
      if (v7 != 91)
        return 1;
      if ((v17 & 0x40000000) != 0)
        v49 = (uint64_t **)*(this - 1);
      else
        v49 = (uint64_t **)&this[-4 * v18];
      v63 = **v49;
      v89[1] = 0;
      LODWORD(v91) = 0;
      v64 = (uint64_t *)*(this - 8);
      v65 = *v64;
      v66 = *(unsigned int *)(*v64 + 32);
      v67 = *((unsigned int *)this + 18);
      if ((_DWORD)v66 == (_DWORD)v67)
      {
        v68 = this[8];
        if ((sub_1C53EC390(v68, *(unsigned int *)(*v64 + 32), *(_DWORD *)(*v64 + 32)) & 1) == 0)
        {
          if (llvm::ShuffleVectorInst::isReverseMask(v68, v66))
          {
            v69 = v22;
            v70 = 1;
LABEL_169:
            sub_1C51229E4(v69, v70, v21, v68, v66);
            return v25;
          }
          if (llvm::ShuffleVectorInst::isSelectMask(v68, v66))
          {
            v69 = v22;
            v70 = 2;
            goto LABEL_169;
          }
          if (llvm::ShuffleVectorInst::isTransposeMask(v68, v66))
          {
            v69 = v22;
            v70 = 3;
            goto LABEL_169;
          }
          if (llvm::ShuffleVectorInst::isZeroEltSplatMask(v68, v66))
          {
            v69 = v22;
            v70 = 0;
            goto LABEL_169;
          }
          if ((_DWORD)v66)
          {
            v79 = 0;
            v80 = 0;
            v81 = 4 * v66;
            v82 = v68;
            while (1)
            {
              v83 = *v82;
              if (*v82 != -1)
              {
                v79 |= v83 < (int)v66;
                v80 |= v83 >= (int)v66;
                if ((v79 & 1) != 0 && (v80 & 1) != 0)
                  break;
              }
              ++v82;
              v81 -= 4;
              if (!v81)
                goto LABEL_162;
            }
          }
          else
          {
            v80 = 0;
            v79 = 0;
LABEL_162:
            if ((v79 & 1) != 0 || (v80 & 1) != 0)
            {
              v69 = v22;
              v70 = 7;
              goto LABEL_169;
            }
          }
          if (*(_BYTE *)(v21 + 8) == 19)
          {
LABEL_167:
            v69 = v22;
            v70 = 6;
            goto LABEL_169;
          }
          if ((llvm::ShuffleVectorInst::isInsertSubvectorMask(v68, v66, v66, &v89[1], &v91) & 1) == 0)
          {
            v66 = *((unsigned int *)v6 + 18);
            v68 = (int *)*((_QWORD *)v6 + 8);
            goto LABEL_167;
          }
LABEL_170:
          v84 = (llvm::FixedVectorType *)v21;
          if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
            v84 = **(llvm::FixedVectorType ***)(v21 + 16);
          llvm::FixedVectorType::get(v84, (llvm::Type *)v89[1]);
          return sub_1C61E86E8(v22, v21, v85);
        }
        return 0;
      }
      if (v66 < v67
        && (llvm::ShuffleVectorInst::isIdentityWithPadding((llvm::ShuffleVectorInst *)this) & 1) != 0)
      {
        return 0;
      }
      if (*(_BYTE *)(v21 + 8) != 19)
      {
        v71 = (int *)*((_QWORD *)v6 + 8);
        if (llvm::ShuffleVectorInst::isExtractSubvectorMask(v71, v67, v66, (int *)&v91))
          return sub_1C61E85E4(v22, v63, v21);
        if (*(_BYTE *)(v21 + 8) != 19
          && llvm::ShuffleVectorInst::isInsertSubvectorMask(v71, v67, *(_DWORD *)(v65 + 32), &v89[1], &v91))
        {
          goto LABEL_170;
        }
      }
      v90[0] = 0;
      v89[0] = 0;
      if (!llvm::ShuffleVectorInst::isReplicationMask(v6, v90, v89))
      {
        if ((_DWORD)a5)
          return 1;
        else
          return -1;
      }
      v72 = *((_DWORD *)v6 + 18);
      LODWORD(v93) = v72;
      if (v72 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v92, 0, 0);
        v72 = *((_DWORD *)v6 + 18);
        if (!v72)
          goto LABEL_150;
      }
      else
      {
        v92 = 0;
        if (!v72)
          goto LABEL_150;
      }
      v73 = 0;
      v74 = *((_QWORD *)v6 + 8);
      v75 = v72;
      v76 = v93;
      v77 = 4 * v75;
      do
      {
        if (*(_DWORD *)(v74 + 4 * v73) != -1)
        {
          v78 = 1 << v73;
          if (v76 > 0x40)
            *((_QWORD *)v92 + (v73 >> 6)) |= v78;
          else
            v92 = (void *)((unint64_t)v92 | v78);
        }
        ++v73;
        v77 -= 4;
      }
      while (v77);
LABEL_150:
      v16 = sub_1C61E76F4(v22, *(llvm::FixedVectorType **)(v63 + 24), v90[0], (llvm::Type *)v89[0], (llvm::APIntOps *)&v92);
      if (v93 >= 0x41 && v92)
        MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
      return v16;
    case 64:
    case 67:
      return v16;
    default:
      return 1;
  }
}

uint64_t sub_1C5120FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v18;
  int v19;
  char *v20;
  char *p_src;
  void *v22;
  uint64_t v24;
  BOOL v25;
  int8x8_t **v26;
  int8x8_t *v27;
  int8x8_t *v28;
  int8x8_t *v29;
  int OperandInfo;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Type *v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  uint64_t **v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  llvm::Type *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t **v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t *v68;
  _BOOL4 v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  uint64_t __src;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  void *v93;
  uint64_t v94;
  _BYTE v95[32];
  void *v96;
  uint64_t v97;
  _BYTE v98[32];
  int v99;
  __int128 v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 8;
  v7 = sub_1C4846F4C(a1 + 8, a2);
  v9 = v7 < 0;
  if (v8)
    v9 = v8 < 0;
  if (!v9)
  {
    v10 = v8 < 1;
    if (!v8)
      v10 = v7 < 1;
    if (v10)
      return 0;
  }
  v12 = *(_DWORD *)(a2 + 16);
  if (v12 > 0x181)
    return 1;
  v13 = *(_DWORD *)(a2 + 80);
  if (!v13)
    return sub_1C5122B10(a1, a2, a3);
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(_DWORD *)(v14 + 8);
  if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
    v16 = *(unsigned int *)(v14 + 32) | ((unint64_t)(v15 == 19) << 32);
  else
    v16 = 1;
  v18 = *(_QWORD *)a2;
  v19 = *(_DWORD *)(a2 + 120);
  if (v12 <= 185)
  {
    if (v12 <= 147)
    {
      switch(v12)
      {
        case 130:
          if (v15 == 19)
            return sub_1C4846F4C(v6, a2);
          return 1;
        case 131:
          if (v15 == 19)
            return sub_1C4846F4C(v6, a2);
          return sub_1C61E85E4(a1, ***(_QWORD ***)(a2 + 72), *(_QWORD *)(a2 + 8));
        case 132:
          v61 = *(uint64_t ***)(a2 + 72);
          v62 = *v61[1];
          if (*(_BYTE *)(v62 + 8) == 19)
            return sub_1C4846F4C(v6, a2);
          return sub_1C61E86E8(a1, **v61, v62);
        case 133:
        case 134:
          v24 = ***(_QWORD ***)(a2 + 72);
          if (v24)
            v25 = *(_BYTE *)(v24 + 8) == 18;
          else
            v25 = 0;
          if (!v25)
            return 0;
          return sub_1C61E84E8(a1, v24);
        default:
          if (v12 == 52)
          {
            if (v16 != 1)
              goto LABEL_96;
            v46 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 24) + 224);
          }
          else
          {
            if (v12 != 54 || v16 != 1)
              goto LABEL_96;
            v46 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 24) + 216);
          }
          v63 = v46();
          v64 = 0;
          v11 = 1;
          if ((v63 & 1) != 0)
            return v11;
          break;
      }
      goto LABEL_105;
    }
    if ((v12 - 148) >= 2)
    {
      if (v12 == 153)
      {
        v50 = sub_1C47A7FD0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), (llvm::Type *)1);
        v52 = v51;
        v53 = sub_1C47A7FD0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 8), **(_QWORD **)(a2 + 24), (llvm::Type *)1);
        if (((*(uint64_t (**)(_QWORD, unint64_t, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24), v50, v52, v53, v54) & 1) == 0)
        {
          llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 24), *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v14, (uint64_t)&v90);
          return v90;
        }
        v55 = **(uint64_t ****)(a2 + 24);
        v56 = (llvm::Type *)*(unsigned int *)(v14 + 32);
        if (*(_BYTE *)(v14 + 8) == 19)
          llvm::ScalableVectorType::get(v55, v56);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v55, v56);
        v58 = v57;
        v90 = 0;
        v91 = v57;
        v92 = 300;
        v93 = v95;
        v96 = v98;
        v97 = 0x400000000;
        v99 = v19;
        v100 = xmmword_1C64632D0;
        v94 = 0x400000000;
        v59 = sub_1C5122B10(a1, (uint64_t)&v90, a3);
        v60 = sub_1C51226E4(a1, 53, v58, v14, a3);
        if (__OFADD__(v59, v60))
          v11 = ((uint64_t)(v59 + v60) >> 63) ^ 0x8000000000000000;
        else
          v11 = v59 + v60;
        if (v96 != v98)
          free(v96);
        v22 = v93;
        if (v93 != v95)
          goto LABEL_24;
        return v11;
      }
      if (v12 == 184)
      {
        v80 = *(_QWORD *)(a2 + 72);
        v81 = *(_QWORD *)(v80 + 8);
        v82 = *(unsigned __int8 *)(*(_QWORD *)(v80 + 16) + 16);
        v83 = (unint64_t *)(v81 + 24);
        if (*(_DWORD *)(v81 + 32) >= 0x41u)
          v83 = (unint64_t *)*v83;
        v69 = v82 > 0x14;
        v84 = *v83;
        v85 = __clz(v84) ^ 0x3F;
        if (v84)
          v73 = v85;
        else
          v73 = 0;
        v74 = a1;
        v75 = 32;
        v72 = *(_QWORD *)(a2 + 8);
        return sub_1C61E7C10(v74, v75, v72, v73, v69, 1, a3);
      }
      goto LABEL_96;
    }
    if (v15 != 19)
    {
      v26 = *(int8x8_t ***)(a2 + 72);
      v27 = *v26;
      v28 = v26[1];
      v29 = v26[2];
      LODWORD(v90) = 0;
      v87 = 0;
      LODWORD(__src) = 0;
      llvm::TargetTransformInfo::getOperandInfo(v27, (const llvm::Value *)&v90);
      llvm::TargetTransformInfo::getOperandInfo(v28, (const llvm::Value *)&__src);
      OperandInfo = llvm::TargetTransformInfo::getOperandInfo(v29, (const llvm::Value *)&v87);
      sub_1C5121850(a1, 29);
      v32 = v31;
      sub_1C5121850(a1, 15);
      if (__OFADD__(v32, v33))
        v34 = ((v32 + v33) >> 63) ^ 0x8000000000000000;
      else
        v34 = v32 + v33;
      sub_1C5121850(a1, 25);
      if (__OFADD__(v34, v35))
        v36 = ((uint64_t)(v34 + v35) >> 63) ^ 0x8000000000000000;
      else
        v36 = v34 + v35;
      sub_1C5121850(a1, 26);
      if (__OFADD__(v36, v37))
        v11 = ((uint64_t)(v36 + v37) >> 63) ^ 0x8000000000000000;
      else
        v11 = v36 + v37;
      if ((OperandInfo - 4) <= 0xFFFFFFFD)
      {
        sub_1C5121850(a1, 22);
        if (__OFADD__(v11, v38))
          v11 = ((uint64_t)(v11 + v38) >> 63) ^ 0x8000000000000000;
        else
          v11 += v38;
      }
      if (v27 != v28)
      {
        v39 = **(_QWORD **)v14 + 1888;
        if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
        {
          v40 = (llvm::Type *)*(unsigned int *)(v14 + 32);
          v41 = (uint64_t **)(**(_QWORD **)v14 + 1888);
          if (*(_DWORD *)(v14 + 8) == 19)
            llvm::ScalableVectorType::get(v41, v40);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v41, v40);
          v39 = v42;
        }
        v43 = sub_1C51226E4(a1, 53, v14, v39, a3);
        if (__OFADD__(v11, v43))
          v44 = ((uint64_t)(v11 + v43) >> 63) ^ 0x8000000000000000;
        else
          v44 = v11 + v43;
        v45 = sub_1C51226E4(a1, 57, v14, v39, a3);
        if (__OFADD__(v44, v45))
          return ((uint64_t)(v44 + v45) >> 63) ^ 0x8000000000000000;
        else
          return v44 + v45;
      }
      return v11;
    }
    return sub_1C4846F4C(v6, a2);
  }
  if ((v12 - 317) <= 0xC)
  {
    if (((1 << (v12 - 61)) & 0x1FDB) != 0)
    {
      __src = ***(_QWORD ***)(a2 + 72);
      v90 = v18;
      v91 = v14;
      v92 = v12;
      v93 = v95;
      v94 = 0x400000000;
      v96 = v98;
      v97 = 0x400000000;
      v99 = v19;
      v100 = xmmword_1C64169E0;
      v20 = (char *)&v89;
    }
    else
    {
      v47 = *(uint64_t ***)(a2 + 72);
      v49 = *v47;
      v48 = v47[1];
      __src = *v49;
      v89 = *v48;
      v90 = v18;
      v91 = v14;
      v92 = v12;
      v93 = v95;
      v94 = 0x400000000;
      v96 = v98;
      v97 = 0x400000000;
      v99 = v19;
      v100 = xmmword_1C64169E0;
      v20 = (char *)&v90;
    }
    p_src = (char *)&__src;
    goto LABEL_21;
  }
  if (v12 == 194)
    return 4;
  if (v12 == 186)
  {
    v65 = *(_QWORD *)(a2 + 72);
    v66 = *(_QWORD *)(v65 + 16);
    v67 = *(unsigned __int8 *)(*(_QWORD *)(v65 + 24) + 16);
    v68 = (unint64_t *)(v66 + 24);
    if (*(_DWORD *)(v66 + 32) >= 0x41u)
      v68 = (unint64_t *)*v68;
    v69 = v67 > 0x14;
    v70 = *v68;
    v71 = __clz(v70) ^ 0x3F;
    v72 = **(_QWORD **)(a2 + 24);
    if (v70)
      v73 = v71;
    else
      v73 = 0;
    v74 = a1;
    v75 = 33;
    return sub_1C61E7C10(v74, v75, v72, v73, v69, 1, a3);
  }
LABEL_96:
  v64 = 0;
  v11 = 1;
  if (!HIDWORD(v16) && v16 >= 2)
  {
    if (v15 == 7)
    {
      v11 = 0;
      v76 = 0;
    }
    else
    {
      v76 = sub_1C61E77EC(a1, *(_QWORD *)(a2 + 8), 1, 0);
      v11 = v86 == 1;
      v13 = *(_DWORD *)(a2 + 80);
    }
    v77 = sub_1C5124544(a1, *(uint64_t **)(a2 + 72), v13, *(uint64_t **)(a2 + 24));
    if (v78 == 1)
      v11 = 1;
    if (__OFADD__(v76, v77))
      v64 = ((uint64_t)(v76 + v77) >> 63) ^ 0x8000000000000000;
    else
      v64 = v76 + v77;
  }
LABEL_105:
  p_src = *(char **)(a2 + 24);
  v79 = *(unsigned int *)(a2 + 32);
  v90 = v18;
  v91 = v14;
  v92 = v12;
  v93 = v95;
  v94 = 0x400000000;
  v96 = v98;
  v97 = 0x400000000;
  v99 = v19;
  v20 = &p_src[8 * v79];
  *(_QWORD *)&v100 = v64;
  *((_QWORD *)&v100 + 1) = v11;
LABEL_21:
  sub_1C4F7C758((unsigned int *)&v93, (uint64_t)v95, p_src, v20);
  v11 = sub_1C5122B10(a1, (uint64_t)&v90, a3);
  if (v96 != v98)
    free(v96);
  v22 = v93;
  if (v93 != v95)
LABEL_24:
    free(v22);
  return v11;
}

void sub_1C5121850(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

unint64_t sub_1C51218BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int128 a14, char a15, uint64_t a16, int a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  llvm::TargetLoweringBase *v44;
  unint64_t v45;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  __int128 v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD v56[2];
  unint64_t v57;
  int v58;
  __int128 v59;
  unsigned __int8 v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  _BYTE v64[160];

  if (a4)
  {
    if ((v43 - 19) >= 6)
      return 1;
    else
      return 4;
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v44, *(const llvm::DataLayout **)(v40 + 8), (llvm::EVT **)v39, (uint64_t)&v59);
  v47 = *(_DWORD *)(v39 + 8);
  v48 = *(_DWORD *)(v39 + 8) & 0xFE;
  v49 = v47;
  if (v48 == 18)
    v49 = *(unsigned __int8 *)(**(_QWORD **)(v39 + 16) + 8);
  if (v49 >= 7)
    v45 = 1;
  else
    v45 = 2;
  v57 = v45;
  v58 = 0;
  if (v60 && (v60 == 1 || *((_QWORD *)v44 + v60 + 12)))
  {
    v50 = *((unsigned __int8 *)v44 + 390 * v60 + 3960);
    if (v50 <= 1)
    {
      v51 = v59;
LABEL_25:
      v63 = v51;
      sub_1C4848B64((uint64_t)&v63, (uint64_t)&v57);
      return v63;
    }
    if (*((_QWORD *)v44 + v60 + 12))
      v52 = v50 == 2;
    else
      v52 = 1;
    if (!v52)
    {
      v61 = 2;
      v62 = 0;
      v63 = v59;
      sub_1C4848B64((uint64_t)&v63, (uint64_t)&v61);
      v51 = v63;
      goto LABEL_25;
    }
  }
  if (v47 == 19)
    return 0;
  if (v47 == 18)
  {
    v53 = v39;
    if (v48 == 18)
      v53 = **(_QWORD **)(v39 + 16);
    v56[0] = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, unint64_t))sub_1C5121850)(v40, v43, v53, 0, v42, v41);
    v56[1] = v54;
    *(_QWORD *)&v63 = v64;
    *((_QWORD *)&v63 + 1) = 0x600000000;
    sub_1C4848C0C((unsigned int *)&v63, v41, v39);
    v55 = sub_1C61E835C(v40, v39, v42, v41, (uint64_t *)v63);
    v61 = *(unsigned int *)(v39 + 32);
    v62 = 0;
    sub_1C4848B64((uint64_t)&v61, (uint64_t)v56);
    if (__OFADD__(v55, v61))
      v45 = ((uint64_t)(v55 + v61) >> 63) ^ 0x8000000000000000;
    else
      v45 = v55 + v61;
    if ((_BYTE *)v63 != v64)
      free((void *)v63);
  }
  return v45;
}

void sub_1C5121D64()
{
  JUMPOUT(0x1C5121A2CLL);
}

void sub_1C5121D70()
{
  JUMPOUT(0x1C5121A2CLL);
}

void sub_1C5121D7C()
{
  JUMPOUT(0x1C5121A2CLL);
}

void sub_1C5121D88()
{
  JUMPOUT(0x1C5121A2CLL);
}

void sub_1C5121D94()
{
  JUMPOUT(0x1C5121A2CLL);
}

void sub_1C5121DA0()
{
  JUMPOUT(0x1C5121A2CLL);
}

void sub_1C5121DAC()
{
  JUMPOUT(0x1C5121A2CLL);
}

void sub_1C5121DB8()
{
  JUMPOUT(0x1C5121A2CLL);
}

uint64_t sub_1C5121DC4(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  BOOL v18;
  uint64_t result;
  llvm::TargetLoweringBase *v20;
  int v21;
  BOOL v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  BOOL v27;
  BOOL v28;
  char v29;
  unsigned __int8 EVT;
  BOOL v31;
  unsigned __int8 v32;
  BOOL v33;
  _BOOL4 v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  _BOOL4 v39;
  _BOOL4 v40;
  llvm::EVT *v41;
  unint64_t v42;
  uint64_t v43;
  llvm::EVT *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  __n128 v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  _BOOL4 v53;
  unsigned int v54;
  int v55;
  BOOL v56;
  _BOOL4 v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t **v63;
  llvm::Type *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  llvm::Type *v68;
  uint64_t v69;
  __n128 v70;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int8 v89[8];
  __int128 v90;
  unsigned __int8 v91[8];
  _OWORD v92[2];

  v10 = (uint64_t)a4;
  v11 = (uint64_t)a3;
  v14 = (uint64_t *)(a1 + 8);
  v15 = sub_1C4848CBC((uint64_t *)(a1 + 8), a2, a3, a4);
  v17 = v15 < 0;
  if (v16)
    v17 = v16 < 0;
  if (!v17)
  {
    v18 = v16 < 1;
    if (!v16)
      v18 = v15 < 1;
    if (v18)
      return 0;
  }
  v83 = a5;
  v78 = a6;
  v20 = *(llvm::TargetLoweringBase **)(a1 + 24);
  v84 = qword_1C85FAFB8[(int)a2 - 1];
  llvm::TargetLoweringBase::getTypeLegalizationCost(v20, *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v10, (uint64_t)&v90);
  llvm::TargetLoweringBase::getTypeLegalizationCost(v20, *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v11, (uint64_t)&v87);
  v82 = sub_1C47A8C74(v91);
  v80 = v21;
  v81 = sub_1C47A8C74(v89);
  v79 = v23;
  v24 = *(_DWORD *)(v10 + 8);
  v25 = *(_DWORD *)(v11 + 8);
  switch((int)a2)
  {
    case '&':
      v26 = (*(uint64_t (**)(llvm::TargetLoweringBase *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v20
                                                                                                  + 1160))(v20, v91[0], 0, v89[0], 0);
      result = 0;
      if ((v26 & 1) == 0)
        goto LABEL_10;
      return result;
    case '\'':
      v29 = (*(uint64_t (**)(llvm::TargetLoweringBase *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v20
                                                                                                  + 1192))(v20, v91[0], 0, v89[0], 0);
      result = 0;
      if ((v29 & 1) == 0)
        goto LABEL_28;
      return result;
    case '(':
LABEL_28:
      if (a7 && (sub_1C4848E88(*(_QWORD *)(a1 + 24), a7, v22) & 1) != 0)
        return 0;
      if (v83 == 1)
      {
        EVT = llvm::EVT::getEVT((llvm::EVT *)v11, 0, v22);
        v32 = llvm::EVT::getEVT((llvm::EVT *)v10, 0, v31);
        v33 = v87 < (uint64_t)v90;
        if (v88 != DWORD2(v90))
          v33 = v88 < SDWORD2(v90);
        if (!v33)
        {
          v34 = v88 == DWORD2(v90) ? (uint64_t)v90 >= v87 : SDWORD2(v90) >= v88;
          if (v34 && EVT && v32)
          {
            v35 = (_DWORD)a2 == 39 ? -4096 : 3840;
            if (((unsigned __int16)v35 & *((_WORD *)v20 + 179 * EVT + v32 + 36836)) == 0)
              return 0;
          }
        }
      }
      goto LABEL_47;
    case '.':
      if (a7 && (sub_1C4848E88(*(_QWORD *)(a1 + 24), a7, v22) & 1) != 0)
        return 0;
      goto LABEL_47;
    case '1':
LABEL_10:
      v27 = (uint64_t)v90 < v87;
      if (DWORD2(v90) != v88)
        v27 = SDWORD2(v90) < v88;
      if (!v27)
      {
        v28 = DWORD2(v90) == v88 ? v87 < (uint64_t)v90 : v88 < SDWORD2(v90);
        if (!v28 && ((v24 & 0xFD) == 13) == ((v25 & 0xFD) == 13) && v82 == v81 && v80 == v79)
          return 0;
      }
      goto LABEL_47;
    case '2':
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        v24 = *(_DWORD *)(**(_QWORD **)(v10 + 16) + 8);
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        v25 = *(_DWORD *)(**(_QWORD **)(v11 + 16) + 8);
      if (((*(uint64_t (**)(llvm::TargetLoweringBase *, _QWORD, _QWORD))(*(_QWORD *)v20 + 840))(v20, v24 >> 8, v25 >> 8) & 1) != 0)return 0;
      goto LABEL_47;
    default:
LABEL_47:
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        v36 = v10;
      else
        v36 = 0;
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        v37 = v11;
      else
        v37 = 0;
      result = v90;
      v38 = (uint64_t)v90 < v87;
      if (DWORD2(v90) != v88)
        v38 = SDWORD2(v90) < v88;
      if (!v38)
      {
        v39 = v88 >= SDWORD2(v90);
        if (DWORD2(v90) == v88)
          v39 = v87 >= (uint64_t)v90;
        if (v39
          && v89[0]
          && (v89[0] == 1 || *((_QWORD *)v20 + v89[0] + 12))
          && *((unsigned __int8 *)v20 + 390 * v89[0] + v84 + 3862) <= 1u)
        {
          return result;
        }
      }
      if (v36 | v37)
      {
        if (v36 && v37)
        {
          if (!v38)
          {
            v40 = DWORD2(v90) == v88 ? v87 >= (uint64_t)v90 : v88 >= SDWORD2(v90);
            if (v40 && v82 == v81 && v80 == v79)
            {
              if ((_DWORD)a2 == 40)
              {
                v77 = 2;
              }
              else
              {
                if ((_DWORD)a2 == 39)
                  return result;
                if (!v89[0] || !*((_QWORD *)v20 + v89[0] + 12) || *((_BYTE *)v20 + 390 * v89[0] + v84 + 3862) == 2)
                  goto LABEL_79;
                v77 = 1;
              }
              v85 = v77;
              LODWORD(v86) = 0;
              v92[0] = v90;
              sub_1C4848B64((uint64_t)v92, (uint64_t)&v85);
              return *(_QWORD *)&v92[0];
            }
          }
LABEL_79:
          v41 = *(llvm::EVT **)v10;
          v42 = sub_1C47A7FD0((uint64_t)v20, *v14, v10, 0);
          llvm::TargetLoweringBase::getTypeConversion((unint64_t)v20, v41, v42, v43, (uint64_t)v92);
          v44 = *(llvm::EVT **)v11;
          v45 = *v14;
          v46 = LOBYTE(v92[0]);
          v47 = sub_1C47A7FD0((uint64_t)v20, v45, v11, 0);
          llvm::TargetLoweringBase::getTypeConversion((unint64_t)v20, v44, v47, v48, (uint64_t)v92);
          v50 = LOBYTE(v92[0]);
          if (v46 == 6 || LOBYTE(v92[0]) == 6)
          {
            v51 = *(_DWORD *)(v36 + 32);
            v52 = v51 && *(_BYTE *)(v36 + 8) == 19;
            v53 = v52;
            if (v51 > 1 || v53)
            {
              v54 = *(_DWORD *)(v37 + 32);
              v55 = *(unsigned __int8 *)(v37 + 8);
              v56 = v54 && v55 == 19;
              v57 = v56;
              if (v54 > 1 || v57)
              {
                v63 = *(uint64_t ***)(v37 + 24);
                v64 = (llvm::Type *)(v54 >> 1);
                if (v55 == 19)
                  llvm::ScalableVectorType::get(v63, v64);
                else
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v63, v64);
                v66 = v65;
                v67 = *(uint64_t ***)(v36 + 24);
                v68 = (llvm::Type *)(*(_DWORD *)(v36 + 32) >> 1);
                if (*(_BYTE *)(v36 + 8) == 19)
                  v70.n128_f64[0] = llvm::ScalableVectorType::get(v67, v68);
                else
                  v70.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v67, v68);
                v72 = v46 != 6 || v50 != 6;
                v85 = sub_1C5121DC4(a1, a2, v66, v69, v83, v78, a7, v70);
                v86 = v73;
                *(_QWORD *)&v92[0] = 2;
                DWORD2(v92[0]) = 0;
                sub_1C4848B64((uint64_t)v92, (uint64_t)&v85);
                v60 = __OFADD__(v72, *(_QWORD *)&v92[0]);
                v61 = v72 + *(_QWORD *)&v92[0];
                v62 = 0x7FFFFFFFFFFFFFFFLL;
                goto LABEL_110;
              }
            }
          }
          if (*(_BYTE *)(v37 + 8) == 19)
            return 0;
          v74 = *(unsigned int *)(v37 + 32);
          if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
            v11 = **(_QWORD **)(v11 + 16);
          if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
            v10 = **(_QWORD **)(v10 + 16);
          v85 = sub_1C5121DC4(a1, a2, v11, v10, v83, v78, a7, v49);
          v86 = v75;
          v76 = sub_1C61E77EC(a1, v37, 1, 1);
          *(_QWORD *)&v92[0] = v74;
          DWORD2(v92[0]) = 0;
          sub_1C4848B64((uint64_t)v92, (uint64_t)&v85);
          v60 = __OFADD__(v76, *(_QWORD *)&v92[0]);
          v61 = v76 + *(_QWORD *)&v92[0];
LABEL_109:
          v62 = (v61 >> 63) ^ 0x8000000000000000;
LABEL_110:
          if (v60)
            return v62;
          else
            return v61;
        }
        if (v36)
        {
          v58 = sub_1C61E77EC(a1, v36, 0, 1);
          if (!v37)
            goto LABEL_107;
        }
        else
        {
          v58 = 0;
          if (!v37)
          {
LABEL_107:
            v59 = 0;
LABEL_108:
            v60 = __OFADD__(v58, v59);
            v61 = v58 + v59;
            goto LABEL_109;
          }
        }
        v59 = sub_1C61E77EC(a1, v37, 1, 0);
        goto LABEL_108;
      }
      if (!v89[0] || !*((_QWORD *)v20 + v89[0] + 12))
        return 4;
      if (*((_BYTE *)v20 + 390 * v89[0] + v84 + 3862) == 2)
        return 4;
      return 1;
  }
}

unint64_t sub_1C5122554(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t PrimitiveSizeInBits;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  unsigned __int8 v15;
  BOOL v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21[8];

  if (sub_1C47A7FD0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 8), a3, (llvm::Type *)1) == 1)
    return 4;
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 24), *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)a3, (uint64_t)&v20);
  v8 = v20;
  if (!a4 && (*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a3);
    v11 = v10;
    v12 = sub_1C47A8C74(v21);
    v14 = v13 != 1 && v11 == 1;
    if (!v14 && PrimitiveSizeInBits < v12)
    {
      v15 = sub_1C47A7FD0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 8), a3, 0);
      v16 = v21[0] == 0;
      if (!v15)
        v16 = 1;
      if (a2 == 33)
      {
        if (!v16)
        {
          v17 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 179 * v21[0] + v15 + 137754);
          goto LABEL_17;
        }
      }
      else if (!v16)
      {
        v17 = *(_WORD *)(*(_QWORD *)(a1 + 24) + 358 * v21[0] + 2 * v15 + 73672) >> 4;
LABEL_17:
        if ((v17 & 0xFFFFFFFB) == 0)
          return v8;
      }
      v19 = sub_1C61E77EC(a1, a3, a2 != 33, a2 == 33);
      if (__OFADD__(v8, v19))
        return ((uint64_t)(v8 + v19) >> 63) ^ 0x8000000000000000;
      else
        v8 += v19;
    }
  }
  return v8;
}

uint64_t sub_1C51226E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!a5)
    __asm { BR              X10 }
  return 1;
}

void sub_1C51229A4()
{
  JUMPOUT(0x1C5122848);
}

void sub_1C51229AC()
{
  JUMPOUT(0x1C5122848);
}

void sub_1C51229B4()
{
  JUMPOUT(0x1C5122848);
}

void sub_1C51229BC()
{
  JUMPOUT(0x1C5122848);
}

void sub_1C51229C4()
{
  JUMPOUT(0x1C5122848);
}

void sub_1C51229CC()
{
  JUMPOUT(0x1C5122848);
}

void sub_1C51229D4()
{
  JUMPOUT(0x1C5122848);
}

void sub_1C51229DC()
{
  JUMPOUT(0x1C5122848);
}

void sub_1C51229E4(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;

  if (a5)
  {
    v5 = 4 * a5;
    while (*a4 < 2 * (int)a5)
    {
      ++a4;
      v5 -= 4;
      if (!v5)
        __asm { BR              X10 }
    }
  }
  __asm { BR              X10 }
}

void sub_1C5122AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  sub_1C61E86E8(v7, v6, a6);
  JUMPOUT(0x1C5122AA0);
}

void sub_1C5122AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  sub_1C61E85E4(v7, v6, a6);
  JUMPOUT(0x1C5122AA0);
}

unint64_t sub_1C5122B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  llvm::FixedVectorType **v12;
  llvm::FixedVectorType **v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  llvm::Type *v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t **v36;
  int v37;
  int v38;
  char *v39;
  llvm::Type *v40;
  uint64_t v41;
  uint64_t **v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  llvm::Type *v46;
  uint64_t v47;
  int v48;
  llvm::Type **v49;
  unint64_t v50;
  llvm::Type *v51;
  int v52;
  uint64_t v53;
  llvm::EVT *v54;
  unint64_t v55;
  uint64_t *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  llvm::Type *v70;
  uint64_t **v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  llvm::Type *v79;
  uint64_t **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  llvm::TargetLoweringBase *v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t *v96;
  _BOOL4 v97;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  unint64_t *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  _BOOL4 v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  _BOOL4 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  unsigned __int8 v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  llvm::Type *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  llvm::Type *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  unsigned __int8 v226;
  _DWORD *v227;
  _DWORD *v228;
  int v229;
  _DWORD *v230;
  _DWORD *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unsigned int v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD v252[2];
  __int128 v253;
  unsigned __int8 v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t __src;
  uint64_t v258;
  int v259;
  void *v260[2];
  _BYTE v261[32];
  void *v262;
  uint64_t v263;
  _DWORD v264[10];
  __int128 v265;
  void *v266;
  uint64_t v267;
  _BYTE v268[32];
  void *v269;
  uint64_t v270;
  _BYTE v271[32];
  __int128 v272;
  int v273;
  void *v274;
  uint64_t v275;
  _BYTE v276[32];
  void *v277;
  uint64_t v278;
  _BYTE v279[32];
  int v280;
  __int128 v281;
  int *v282;
  uint64_t v283;
  int v284;
  uint64_t v285;

  v3 = a3;
  v4 = a1;
  v285 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned int *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 128);
  v250 = *(_QWORD *)(a2 + 136);
  v9 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v9)
  {
    v10 = v5 == 319 || v5 == 322;
    v11 = v10;
    v12 = *(llvm::FixedVectorType ***)(*(_QWORD *)(a2 + 24) + 8 * v11);
    if (((_DWORD)v12[1] & 0xFE) == 0x12)
      v13 = v12;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  v14 = 0;
  if ((_DWORD)a3 == 2)
    v15 = 1;
  else
    v15 = 10;
  v282 = &v284;
  v283 = 0x200000000;
  v249 = v250;
  if (v5 <= 186)
  {
    if (v5 > 75)
    {
      if (v5 > 166)
      {
        switch(v5)
        {
          case 167:
          case 168:
            goto LABEL_310;
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
            goto LABEL_314;
          case 175:
            v16 = 230;
            goto LABEL_125;
          case 176:
            v16 = 232;
            goto LABEL_125;
          case 177:
            v16 = 231;
            goto LABEL_125;
          default:
            if (v5 != 185)
              goto LABEL_314;
            llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 8), v6);
            v163 = v226;
            v164 = v4;
            v165 = 32;
            v166 = v6;
            v167 = v3;
            goto LABEL_382;
        }
      }
      switch(v5)
      {
        case 139:
          v16 = 223;
          break;
        case 140:
          v16 = 241;
          break;
        case 141:
          goto LABEL_314;
        case 142:
        case 143:
          v16 = 141;
          break;
        default:
          if (v5 == 76)
          {
            v16 = 234;
          }
          else
          {
            if (v5 != 90)
              goto LABEL_314;
            v16 = 106;
          }
          break;
      }
    }
    else
    {
      if (v5 <= 50)
      {
        switch(v5)
        {
          case 5:
            goto LABEL_310;
          case 6:
          case 7:
          case 10:
          case 11:
          case 12:
          case 15:
          case 16:
          case 17:
          case 18:
            goto LABEL_314;
          case 8:
            v16 = 186;
            goto LABEL_125;
          case 9:
            v16 = 182;
            goto LABEL_125;
          case 13:
            v16 = 145;
            goto LABEL_125;
          case 14:
            v16 = 235;
            goto LABEL_125;
          case 19:
            v16 = 143;
            goto LABEL_125;
          default:
            if (v5 != 1)
              goto LABEL_314;
            v78 = **(_QWORD **)v6 + 1888;
            if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
            {
              v79 = (llvm::Type *)*(unsigned int *)(v6 + 32);
              v80 = (uint64_t **)(**(_QWORD **)v6 + 1888);
              if (*(_DWORD *)(v6 + 8) == 19)
                llvm::ScalableVectorType::get(v80, v79);
              else
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v80, v79);
              v78 = v81;
            }
            v82 = sub_1C51226E4(v4, 53, v6, v78, v3);
            v83 = sub_1C51226E4(v4, 57, v6, v78, v3);
            if (__OFADD__(v82, v83))
              v84 = ((v82 + v83) >> 63) ^ 0x8000000000000000;
            else
              v84 = v82 + v83;
            sub_1C5121850(v4, 15);
            v34 = __OFADD__(v84, v85);
            v35 = v84 + v85;
            goto LABEL_307;
        }
      }
      switch(v5)
      {
        case '3':
          v16 = 227;
          break;
        case '4':
          v16 = 184;
          break;
        case '5':
          v15 = 4;
          v16 = 185;
          break;
        case '6':
          v16 = 183;
          break;
        default:
          if (v5 != 75)
            goto LABEL_314;
          v16 = 233;
          break;
      }
    }
LABEL_125:
    v241 = v15;
    v248 = a2;
    v240 = v7;
    v284 = v16;
    LODWORD(v283) = 1;
    v93 = *(llvm::TargetLoweringBase **)(a1 + 24);
    llvm::TargetLoweringBase::getTypeLegalizationCost(v93, *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v6, (uint64_t)&v253);
    v269 = v271;
    v270 = 0x200000000;
    v266 = v268;
    v267 = 0x200000000;
    if (!(_DWORD)v283)
      goto LABEL_185;
    v244 = v6;
    v246 = v8;
    v242 = v3;
    v94 = (unsigned int *)v282;
    v95 = v254;
    v96 = (uint64_t *)((char *)v93 + 8 * v254 + 96);
    if (DWORD2(v253))
      v97 = SDWORD2(v253) > 0;
    else
      v97 = (uint64_t)v253 > 1;
    v101 = ((v254 - 8) < 7u
         || (v254 - 75) < 0x2Du
         || (v254 + 104) < 0x13u)
        && v5 == 139;
    v102 = 4 * v283;
    while (!(_DWORD)v95)
    {
LABEL_166:
      ++v94;
      v102 -= 4;
      if (!v102)
      {
        v110 = (unint64_t *)v269;
        if (v270 >= 2)
        {
          v111 = (char *)v269 + 16;
          v112 = *(_QWORD *)v269;
          v113 = 16 * v270 - 16;
          v8 = v246;
          v3 = v242;
          v6 = v244;
          do
          {
            v114 = *((_DWORD *)v111 + 2);
            v115 = *((_DWORD *)v110 + 2);
            v10 = v114 == v115;
            v116 = v114 < v115;
            if (v10)
              v116 = *(_QWORD *)v111 < v112;
            if (v116)
            {
              v112 = *(_QWORD *)v111;
              v110 = (unint64_t *)v111;
            }
            v111 += 16;
            v113 -= 16;
          }
          while (v113);
        }
        else
        {
          v8 = v246;
          v3 = v242;
          v6 = v244;
        }
        if (v110 != (unint64_t *)((char *)v269 + 16 * v270))
          goto LABEL_184;
        v110 = (unint64_t *)v266;
        if (v267 >= 2)
        {
          v117 = (char *)v266 + 16;
          v118 = *(_QWORD *)v266;
          v119 = 16 * v267 - 16;
          do
          {
            v120 = *((_DWORD *)v117 + 2);
            v121 = *((_DWORD *)v110 + 2);
            v10 = v120 == v121;
            v122 = v120 < v121;
            if (v10)
              v122 = *(_QWORD *)v117 < v118;
            if (v122)
            {
              v118 = *(_QWORD *)v117;
              v110 = (unint64_t *)v117;
            }
            v117 += 16;
            v119 -= 16;
          }
          while (v119);
        }
        if (v110 != (unint64_t *)((char *)v266 + 16 * v267))
        {
LABEL_184:
          v14 = *v110;
          goto LABEL_254;
        }
LABEL_185:
        if (v5 == 90)
        {
          v127 = *(char **)(v248 + 24);
          v128 = *(unsigned int *)(v248 + 32);
          *(_QWORD *)&v272 = 0;
          *((_QWORD *)&v272 + 1) = v6;
          v273 = 89;
          v274 = v276;
          v275 = 0x400000000;
          v277 = v279;
          v278 = 0x400000000;
          v280 = 0;
          v281 = xmmword_1C64632D0;
          sub_1C4F7C758((unsigned int *)&v274, (uint64_t)v276, v127, &v127[8 * v128]);
          v129 = *(char **)(v248 + 24);
          v130 = *(unsigned int *)(v248 + 32);
          __src = 0;
          v258 = v6;
          v259 = 83;
          v260[0] = v261;
          v260[1] = (void *)0x400000000;
          v262 = v264;
          v263 = 0x400000000;
          v264[8] = 0;
          v265 = xmmword_1C64632D0;
          sub_1C4F7C758((unsigned int *)v260, (uint64_t)v261, v129, &v129[8 * v130]);
          v131 = sub_1C5120FD0(v4, &v272, v3);
          v132 = sub_1C5120FD0(v4, &__src, v3);
          if (__OFADD__(v131, v132))
            v14 = ((v131 + v132) >> 63) ^ 0x8000000000000000;
          else
            v14 = v131 + v132;
          if (v262 != v264)
            free(v262);
          if (v260[0] != v261)
            free(v260[0]);
          if (v277 != v279)
            free(v277);
          v133 = (char *)v274;
          if (v274 == v276)
            goto LABEL_254;
        }
        else
        {
          v123 = v248;
          if (v5 == 143)
          {
            sub_1C5121850(v4, 18);
            v125 = v124;
            sub_1C5121850(v4, 14);
            if (__OFADD__(v125, v126))
              v14 = ((v125 + v126) >> 63) ^ 0x8000000000000000;
            else
              v14 = v125 + v126;
            goto LABEL_254;
          }
          if ((*(_DWORD *)(v6 + 8) & 0xFE) != 0x12 || !v6)
          {
            v14 = v241;
            goto LABEL_254;
          }
          if (*(_DWORD *)(v6 + 8) == 19)
          {
            v14 = 0;
            goto LABEL_254;
          }
          v134 = *(unsigned int *)(v248 + 32);
          if ((_DWORD)v134)
          {
            v135 = *(_QWORD *)(v248 + 24);
            v136 = 8 * v134;
            while (*(_BYTE *)(*(_QWORD *)v135 + 8) != 19)
            {
              v135 += 8;
              v136 -= 8;
              if (!v136)
                goto LABEL_211;
            }
            v14 = 0;
LABEL_254:
            if (v266 != v268)
              free(v266);
            v77 = v269;
            if (v269 != v271)
LABEL_257:
              free(v77);
            goto LABEL_310;
          }
LABEL_211:
          if ((_DWORD)v250)
          {
            v8 = sub_1C61E77EC(v4, v6, 1, 0);
            v250 = v225;
            v123 = v248;
            LODWORD(v134) = *(_DWORD *)(v248 + 32);
          }
          v247 = v8;
          v137 = v6;
          v138 = *(_DWORD *)(v6 + 32);
          __src = (uint64_t)&v259;
          v258 = 0x400000000;
          if ((_DWORD)v134)
          {
            v139 = v5;
            v140 = v3;
            v141 = v4;
            v142 = 0;
            LODWORD(v143) = 0;
            v144 = 8 * v134;
            do
            {
              v145 = *(_QWORD *)(*(_QWORD *)(v123 + 24) + v142);
              if ((*(_DWORD *)(v145 + 8) & 0xFE) == 0x12)
                v145 = **(_QWORD **)(v145 + 16);
              if (v143 >= HIDWORD(v258))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v259, v143 + 1, 8);
                v123 = v248;
                LODWORD(v143) = v258;
              }
              *(_QWORD *)(__src + 8 * v143) = v145;
              v143 = (v258 + 1);
              LODWORD(v258) = v258 + 1;
              v142 += 8;
            }
            while (v144 != v142);
            v4 = v141;
            v3 = v140;
            v5 = v139;
          }
          else
          {
            v143 = 0;
          }
          if ((*(_DWORD *)(v137 + 8) & 0xFE) == 0x12)
            v137 = **(_QWORD **)(v137 + 16);
          *(_QWORD *)&v272 = 0;
          *((_QWORD *)&v272 + 1) = v137;
          v273 = v5;
          v274 = v276;
          v275 = 0x400000000;
          v277 = v279;
          v278 = 0x400000000;
          v280 = v240;
          v281 = xmmword_1C64632D0;
          sub_1C4F7C758((unsigned int *)&v274, (uint64_t)v276, (char *)__src, (char *)(__src + 8 * v143));
          v252[0] = sub_1C5120FD0(v4, &v272, v3);
          v252[1] = v146;
          v147 = v248;
          v148 = *(unsigned int *)(v248 + 32);
          if ((_DWORD)v148)
          {
            v149 = v4;
            v150 = 0;
            v151 = 8 * v148;
            do
            {
              v152 = *(_QWORD *)(*(_QWORD *)(v147 + 24) + v150);
              if (v152)
                v153 = (*(_DWORD *)(v152 + 8) & 0xFE) == 18;
              else
                v153 = 0;
              if (v153)
              {
                if (*(_DWORD *)(v147 + 136))
                {
                  v154 = sub_1C61E77EC(v149, *(_QWORD *)(*(_QWORD *)(v147 + 24) + v150), 0, 1);
                  v147 = v248;
                  v155 = v250;
                  if (v156 == 1)
                    v155 = 1;
                  v250 = v155;
                  v157 = v247 + v154;
                  if (__OFADD__(v247, v154))
                    v157 = ((uint64_t)(v247 + v154) >> 63) ^ 0x8000000000000000;
                  v247 = v157;
                }
                if (v138 <= *(_DWORD *)(v152 + 32))
                  v138 = *(_DWORD *)(v152 + 32);
              }
              v150 += 8;
            }
            while (v151 != v150);
          }
          v255 = v138;
          LODWORD(v256) = 0;
          sub_1C4848B64((uint64_t)&v255, (uint64_t)v252);
          if (__OFADD__(v255, v247))
            v14 = ((uint64_t)(v255 + v247) >> 63) ^ 0x8000000000000000;
          else
            v14 = v255 + v247;
          if (v277 != v279)
            free(v277);
          if (v274 != v276)
            free(v274);
          v133 = (char *)__src;
          if ((int *)__src == &v259)
            goto LABEL_254;
        }
        free(v133);
        goto LABEL_254;
      }
    }
    v103 = *v94;
    if ((_DWORD)v95 == 1)
    {
      if (v103 > 0x185)
      {
LABEL_155:
        v104 = *v96;
        goto LABEL_156;
      }
    }
    else
    {
      v104 = *v96;
      if (v103 > 0x185 || v104 == 0)
      {
LABEL_156:
        if (v104 && (v103 > 0x185 || *((_BYTE *)v93 + 390 * v95 + v103 + 3862) != 2))
        {
          __src = 2;
          LODWORD(v258) = 0;
          v272 = v253;
          sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
          v106 = v272;
          v107 = v267;
          if (v267 >= (unint64_t)HIDWORD(v267))
          {
            v238 = v272;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v266, (uint64_t)v268, v267 + 1, 16);
            v106 = v238;
            v107 = v267;
          }
          *((_OWORD *)v266 + v107) = v106;
          LODWORD(v267) = v267 + 1;
        }
        goto LABEL_166;
      }
    }
    if (*((unsigned __int8 *)v93 + 390 * v95 + v103 + 3862) <= 1u)
    {
      if (v101
        && ((*(uint64_t (**)(llvm::TargetLoweringBase *, uint64_t, _QWORD))(*(_QWORD *)v93 + 1328))(v93, v95, 0) & 1) != 0)
      {
        v14 = 0;
        goto LABEL_254;
      }
      if (v97)
        __src = 2;
      else
        __src = 1;
      LODWORD(v258) = 0;
      v272 = v253;
      sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
      v108 = v272;
      v109 = v270;
      if (v270 >= (unint64_t)HIDWORD(v270))
      {
        v239 = v272;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v269, (uint64_t)v271, v270 + 1, 16);
        v108 = v239;
        v109 = v270;
      }
      *((_OWORD *)v269 + v109) = v108;
      LODWORD(v270) = v270 + 1;
      goto LABEL_166;
    }
    goto LABEL_155;
  }
  v16 = 224;
  switch(v5)
  {
    case 238:
      v16 = 229;
      goto LABEL_125;
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 261:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 277:
    case 279:
    case 281:
    case 282:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 297:
    case 298:
    case 299:
    case 302:
    case 303:
    case 304:
    case 308:
    case 310:
    case 313:
    case 314:
    case 315:
    case 316:
LABEL_314:
      v197 = *(unsigned __int8 *)(v6 + 8);
      if (v197 == 19)
      {
        v14 = 0;
        goto LABEL_310;
      }
      v198 = v250;
      if (!(_DWORD)v9)
        goto LABEL_320;
      v199 = *(_QWORD *)(a2 + 24);
      v200 = 8 * v9;
      break;
    case 244:
    case 272:
      goto LABEL_310;
    case 258:
      v16 = 237;
      goto LABEL_125;
    case 259:
      v16 = 239;
      goto LABEL_125;
    case 260:
      v16 = 240;
      goto LABEL_125;
    case 262:
    case 283:
      v36 = (uint64_t **)(**(_QWORD **)v6 + 1888);
      v37 = *(_DWORD *)(v6 + 8);
      v38 = v7;
      if ((v37 & 0xFE) == 0x12)
      {
        v39 = (char *)v6;
        v40 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        v41 = a1;
        if (v37 == 19)
          llvm::ScalableVectorType::get(v36, v40);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v36, v40);
        v36 = v42;
      }
      else
      {
        v39 = (char *)v6;
        v41 = a1;
      }
      *(_QWORD *)&v272 = v39;
      *((_QWORD *)&v272 + 1) = v36;
      v86 = llvm::StructType::create((_QWORD **)&v272, 2);
      if (v5 == 262)
        v87 = 263;
      else
        v87 = 284;
      __src = (uint64_t)v39;
      v258 = (uint64_t)v39;
      *(_QWORD *)&v272 = 0;
      *((_QWORD *)&v272 + 1) = v86;
      v273 = v87;
      v274 = v276;
      v275 = 0x400000000;
      v277 = v279;
      v278 = 0x400000000;
      v280 = v38;
      *(_QWORD *)&v281 = v8;
      *((_QWORD *)&v281 + 1) = v250;
      sub_1C4F7C758((unsigned int *)&v274, (uint64_t)v276, (char *)&__src, (char *)&v259);
      v88 = sub_1C5120FD0(v41, &v272, v3);
      v89 = sub_1C51226E4(v41, 53, (uint64_t)v39, (uint64_t)v36, v3);
      v90 = v3;
      if (__OFADD__(v88, v89))
        v91 = ((v88 + v89) >> 63) ^ 0x8000000000000000;
      else
        v91 = v88 + v89;
      v269 = (void *)sub_1C51226E4(v41, 57, (uint64_t)v39, (uint64_t)v36, v90);
      v270 = v92;
      __src = 2;
      LODWORD(v258) = 0;
      sub_1C4848B64((uint64_t)&__src, (uint64_t)&v269);
      if (__OFADD__(v91, __src))
        v14 = ((uint64_t)(v91 + __src) >> 63) ^ 0x8000000000000000;
      else
        v14 = v91 + __src;
      if (v277 != v279)
        free(v277);
      v77 = v274;
      if (v274 != v276)
        goto LABEL_257;
      goto LABEL_310;
    case 263:
    case 284:
      v56 = *(uint64_t **)(v6 + 16);
      v57 = v5;
      v58 = a3;
      v59 = *v56;
      v60 = v56[1];
      if (v57 == 263)
        v61 = 13;
      else
        v61 = 15;
      sub_1C5121850(a1, v61);
      v63 = v62;
      __src = sub_1C51226E4(v4, 53, v59, v60, v58);
      v258 = v64;
      *(_QWORD *)&v272 = 2;
      DWORD2(v272) = 0;
      sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
      v65 = v4;
      if (__OFADD__(v63, (_QWORD)v272))
        v66 = ((v63 + (uint64_t)v272) >> 63) ^ 0x8000000000000000;
      else
        v66 = v63 + v272;
      sub_1C5121850(v65, 30);
      goto LABEL_284;
    case 273:
      v16 = 226;
      goto LABEL_125;
    case 274:
    case 275:
    case 305:
    case 306:
      v17 = **(_QWORD **)v6 + 1888;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        v18 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        v19 = (uint64_t **)(**(_QWORD **)v6 + 1888);
        if (*(_DWORD *)(v6 + 8) == 19)
          llvm::ScalableVectorType::get(v19, v18);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v18);
        v17 = v20;
      }
      v21 = sub_1C51226E4(v4, 53, v6, v17, v3);
      v22 = v4;
      v23 = 57;
      v24 = v6;
      v25 = v17;
      v26 = v3;
      goto LABEL_42;
    case 276:
    case 307:
      v51 = (llvm::Type *)v6;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
        v51 = **(llvm::Type ***)(v6 + 16);
      v52 = 2 * llvm::Type::getPrimitiveSizeInBits(v51);
      v53 = v6;
      v54 = *(llvm::EVT **)v6;
      LODWORD(v272) = v52;
      if (v52 <= 63)
      {
        switch(v52)
        {
          case 32:
            v55 = *(_QWORD *)v54 + 1960;
            goto LABEL_287;
          case 16:
            v55 = *(_QWORD *)v54 + 1936;
            goto LABEL_287;
          case 8:
            v55 = *(_QWORD *)v54 + 1912;
            goto LABEL_287;
        }
      }
      else
      {
        if (v52 == 64)
        {
          v55 = *(_QWORD *)v54 + 1984;
          goto LABEL_287;
        }
        if (v52 == 128)
        {
          v55 = *(_QWORD *)v54 + 2008;
          goto LABEL_287;
        }
      }
      v230 = sub_1C5270984(*(_QWORD *)v54 + 2168, &v272);
      v55 = *((_QWORD *)v230 + 1);
      if (!v55)
      {
        v231 = v230;
        v55 = sub_1C484358C(*(_QWORD *)v54 + 2040, 24, 3);
        v232 = v272;
        *(_QWORD *)v55 = v54;
        *(_QWORD *)(v55 + 16) = 0;
        *(_QWORD *)(v55 + 8) = (v232 << 8) | 0xDu;
        *((_QWORD *)v231 + 1) = v55;
      }
LABEL_287:
      if ((*(_DWORD *)(v53 + 8) & 0xFE) == 0x12)
      {
        v181 = (llvm::Type *)*(unsigned int *)(v53 + 32);
        if (*(_DWORD *)(v53 + 8) == 19)
          llvm::ScalableVectorType::get((uint64_t **)v55, v181);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v55, v181);
        v55 = v182;
      }
      if (v5 == 276)
        v183 = 40;
      else
        v183 = 39;
      __src = sub_1C5121DC4(v4, v183, (llvm::Type ***)v55, (llvm::Type ***)v53, 0, v3, 0);
      v258 = v184;
      *(_QWORD *)&v272 = 2;
      DWORD2(v272) = 0;
      sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
      v185 = v3;
      v186 = v272;
      sub_1C5121850(v4, 17);
      if (__OFADD__(v186, v187))
        v188 = ((v186 + v187) >> 63) ^ 0x8000000000000000;
      else
        v188 = v186 + v187;
      __src = sub_1C5121DC4(v4, 38, (llvm::Type ***)v53, (llvm::Type ***)v55, 0, v185, 0);
      v258 = v189;
      *(_QWORD *)&v272 = 2;
      DWORD2(v272) = 0;
      sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
      if (__OFADD__(v188, (_QWORD)v272))
        v190 = ((uint64_t)(v188 + v272) >> 63) ^ 0x8000000000000000;
      else
        v190 = v188 + v272;
      sub_1C5121850(v4, 26);
      if (__OFADD__(v190, v191))
        v192 = ((uint64_t)(v190 + v191) >> 63) ^ 0x8000000000000000;
      else
        v192 = v190 + v191;
      sub_1C5121850(v4, 25);
      if (__OFADD__(v192, v193))
        v194 = ((uint64_t)(v192 + v193) >> 63) ^ 0x8000000000000000;
      else
        v194 = v192 + v193;
      sub_1C5121850(v4, 29);
      v34 = __OFADD__(v194, v195);
      v35 = v194 + v195;
      goto LABEL_307;
    case 278:
    case 309:
      v43 = a3;
      v44 = *(uint64_t **)(v6 + 16);
      v45 = *v44;
      v46 = (llvm::Type *)*v44;
      if ((*(_DWORD *)(*v44 + 8) & 0xFE) == 0x12)
        v46 = **(llvm::Type ***)(v45 + 16);
      v47 = v44[1];
      v48 = 2 * llvm::Type::getPrimitiveSizeInBits(v46);
      v49 = *(llvm::Type ***)v45;
      LODWORD(v272) = v48;
      v251 = v47;
      if (v48 <= 63)
      {
        switch(v48)
        {
          case 32:
            v50 = (unint64_t)*v49 + 1960;
            goto LABEL_263;
          case 16:
            v50 = (unint64_t)*v49 + 1936;
            goto LABEL_263;
          case 8:
            v50 = (unint64_t)*v49 + 1912;
            goto LABEL_263;
        }
      }
      else
      {
        if (v48 == 64)
        {
          v50 = (unint64_t)*v49 + 1984;
          goto LABEL_263;
        }
        if (v48 == 128)
        {
          v50 = (unint64_t)*v49 + 2008;
          goto LABEL_263;
        }
      }
      v227 = sub_1C5270984((uint64_t)*v49 + 2168, &v272);
      v50 = *((_QWORD *)v227 + 1);
      if (!v50)
      {
        v228 = v227;
        v50 = sub_1C484358C((uint64_t)*v49 + 2040, 24, 3);
        v229 = v272;
        *(_QWORD *)v50 = v49;
        *(_QWORD *)(v50 + 16) = 0;
        *(_QWORD *)(v50 + 8) = (v229 << 8) | 0xDu;
        *((_QWORD *)v228 + 1) = v50;
      }
LABEL_263:
      if ((*(_DWORD *)(v45 + 8) & 0xFE) == 0x12)
      {
        v168 = (llvm::Type *)*(unsigned int *)(v45 + 32);
        if (*(_DWORD *)(v45 + 8) == 19)
          llvm::ScalableVectorType::get((uint64_t **)v50, v168);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v50, v168);
        v50 = v169;
      }
      if (v5 == 278)
        v170 = 40;
      else
        v170 = 39;
      __src = sub_1C5121DC4(v4, v170, (llvm::Type ***)v50, (llvm::Type ***)v45, 0, v43, 0);
      v258 = v171;
      v172 = v4;
      *(_QWORD *)&v272 = 2;
      DWORD2(v272) = 0;
      sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
      v173 = v5;
      v174 = v272;
      sub_1C5121850(v4, 17);
      if (__OFADD__(v174, v175))
        v176 = ((v174 + v175) >> 63) ^ 0x8000000000000000;
      else
        v176 = v174 + v175;
      __src = sub_1C5121DC4(v4, 38, (llvm::Type ***)v45, (llvm::Type ***)v50, 0, v43, 0);
      v258 = v177;
      *(_QWORD *)&v272 = 2;
      DWORD2(v272) = 0;
      sub_1C4848B64((uint64_t)&v272, (uint64_t)&__src);
      if (__OFADD__(v176, (_QWORD)v272))
        v178 = ((uint64_t)(v176 + v272) >> 63) ^ 0x8000000000000000;
      else
        v178 = v176 + v272;
      sub_1C5121850(v4, 26);
      if (__OFADD__(v178, v179))
        v66 = ((uint64_t)(v178 + v179) >> 63) ^ 0x8000000000000000;
      else
        v66 = v178 + v179;
      if (v173 == 278)
      {
        sub_1C5121850(v172, 27);
        if (__OFADD__(v66, v180))
          v66 = ((uint64_t)(v66 + v180) >> 63) ^ 0x8000000000000000;
        else
          v66 += v180;
      }
      v67 = sub_1C51226E4(v172, 53, v45, v251, v43);
LABEL_284:
      v34 = __OFADD__(v66, v67);
      v35 = v66 + v67;
LABEL_307:
      if (v34)
        v14 = (v35 >> 63) ^ 0x8000000000000000;
      else
        v14 = v35;
      goto LABEL_310;
    case 280:
      goto LABEL_125;
    case 296:
      v16 = 236;
      goto LABEL_125;
    case 300:
    case 311:
      v68 = **(_QWORD **)v6 + 1888;
      v69 = v7;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        v70 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        v71 = (uint64_t **)(**(_QWORD **)v6 + 1888);
        if (*(_DWORD *)(v6 + 8) == 19)
          llvm::ScalableVectorType::get(v71, v70);
        else
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v71, v70);
        v68 = v72;
      }
      *(_QWORD *)&v272 = v6;
      *((_QWORD *)&v272 + 1) = v68;
      v73 = llvm::StructType::create((_QWORD **)&v272, 2);
      if (v5 == 300)
        v74 = 301;
      else
        v74 = 312;
      __src = v6;
      v258 = v6;
      *(_QWORD *)&v272 = 0;
      *((_QWORD *)&v272 + 1) = v73;
      v273 = v74;
      v274 = v276;
      v275 = 0x400000000;
      v277 = v279;
      v278 = 0x400000000;
      v280 = v69;
      *(_QWORD *)&v281 = v8;
      *((_QWORD *)&v281 + 1) = v250;
      sub_1C4F7C758((unsigned int *)&v274, (uint64_t)v276, (char *)&__src, (char *)&v259);
      v75 = sub_1C5120FD0(v4, &v272, v3);
      v76 = sub_1C51226E4(v4, 57, v6, v68, v3);
      if (__OFADD__(v75, v76))
        v14 = ((v75 + v76) >> 63) ^ 0x8000000000000000;
      else
        v14 = v75 + v76;
      if (v277 != v279)
        free(v277);
      v77 = v274;
      if (v274 != v276)
        goto LABEL_257;
      goto LABEL_310;
    case 301:
    case 312:
      v27 = *(uint64_t **)(v6 + 16);
      v28 = a3;
      v29 = *v27;
      v30 = v27[1];
      if (v5 == 301)
        v31 = 13;
      else
        v31 = 15;
      sub_1C5121850(a1, v31);
      v21 = v32;
      v22 = v4;
      v23 = 53;
      v24 = v29;
      v25 = v30;
      v26 = v28;
LABEL_42:
      v33 = sub_1C51226E4(v22, v23, v24, v25, v26);
      v34 = __OFADD__(v21, v33);
      v35 = v21 + v33;
      goto LABEL_307;
    case 317:
      v224 = 13;
      goto LABEL_380;
    case 318:
      v224 = 28;
      goto LABEL_380;
    case 319:
      v222 = v7 | 0x100000000;
      v223 = 14;
      goto LABEL_374;
    case 320:
    case 321:
    case 325:
    case 326:
    case 327:
    case 328:
      sub_1C4774CC4(v13);
      v159 = sub_1C61E78A4(v4, v13, v158, v3);
      goto LABEL_383;
    case 322:
      v222 = v7 | 0x100000000;
      v223 = 18;
LABEL_374:
      v159 = sub_1C61E7888(a1, v223, (uint64_t)v13, v222, a3);
      goto LABEL_383;
    case 323:
      v224 = 17;
      goto LABEL_380;
    case 324:
      v224 = 29;
      goto LABEL_380;
    case 329:
      v224 = 30;
LABEL_380:
      v159 = sub_1C61E7EC8(a1, v224, v13, a3);
      goto LABEL_383;
    default:
      switch(v5)
      {
        case 192:
          v16 = 251;
          goto LABEL_125;
        case 193:
          v16 = 247;
          goto LABEL_125;
        case 194:
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
          goto LABEL_314;
        case 201:
          v16 = 250;
          goto LABEL_125;
        case 202:
          v16 = 246;
          goto LABEL_125;
        case 203:
          v16 = 238;
          goto LABEL_125;
        default:
          if (v5 != 187)
            goto LABEL_314;
          v160 = a3;
          v161 = **(_QWORD **)(a2 + 24);
          llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 8), v161);
          v163 = v162;
          v164 = v4;
          v165 = 33;
          v166 = v161;
          v167 = v160;
LABEL_382:
          v159 = sub_1C61E7C10(v164, v165, v166, v163, 1, 0, v167);
          break;
      }
LABEL_383:
      v14 = v159;
      goto LABEL_310;
  }
  do
  {
    if (*(_BYTE *)(*(_QWORD *)v199 + 8) == 19)
    {
      v14 = 0;
      goto LABEL_310;
    }
    v199 += 8;
    v200 -= 8;
  }
  while (v200);
LABEL_320:
  v245 = v6;
  if ((_DWORD)v250)
    v201 = 0;
  else
    v201 = v8;
  v202 = v250;
  if ((_DWORD)v250)
    v202 = 0;
  v203 = 1;
  if ((v197 & 0xFE) == 0x12 && v245)
  {
    if ((_DWORD)v250)
    {
      v233 = v7;
      v234 = a2;
      v235 = sub_1C61E77EC(a1, v245, 1, 0);
      v198 = v250;
      v8 = v235;
      v7 = v233;
      v237 = v236;
      a2 = v234;
      v250 = v237;
      v197 = *(_DWORD *)(v245 + 8);
    }
    if (*(_DWORD *)(v245 + 32) <= 1u)
      v203 = 1;
    else
      v203 = *(_DWORD *)(v245 + 32);
    if ((v197 & 0xFE) == 0x12)
      v245 = **(_QWORD **)(v245 + 16);
  }
  else
  {
    v8 = v201;
    v250 = v202;
  }
  __src = (uint64_t)&v259;
  v258 = 0x400000000;
  v204 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v204)
  {
    v243 = v3;
    v205 = v4;
    v206 = 0;
    v207 = 8 * v204;
    do
    {
      v208 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + v206);
      v209 = *(_DWORD *)(v208 + 8);
      if (v208)
        v210 = (*(_DWORD *)(v208 + 8) & 0xFE) == 18;
      else
        v210 = 0;
      if (v210)
      {
        if (v198)
        {
          v213 = v7;
          v214 = a2;
          v215 = sub_1C61E77EC(v205, *(_QWORD *)(*(_QWORD *)(a2 + 24) + v206), 0, 1);
          v198 = v249;
          v216 = v250;
          v10 = v217 == 1;
          a2 = v214;
          if (v10)
            v216 = 1;
          v250 = v216;
          v7 = v213;
          if (__OFADD__(v8, v215))
            v8 = ((uint64_t)(v8 + v215) >> 63) ^ 0x8000000000000000;
          else
            v8 += v215;
          v209 = *(_DWORD *)(v208 + 8);
        }
        if (v203 <= *(_DWORD *)(v208 + 32))
          v203 = *(_DWORD *)(v208 + 32);
        if ((v209 & 0xFE) == 0x12)
          v208 = **(_QWORD **)(v208 + 16);
      }
      v211 = v258;
      if (v258 >= (unint64_t)HIDWORD(v258))
      {
        v218 = v7;
        v219 = a2;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v259, v258 + 1, 8);
        v198 = v249;
        a2 = v219;
        v7 = v218;
        v211 = v258;
      }
      *(_QWORD *)(__src + 8 * v211) = v208;
      v212 = (v258 + 1);
      LODWORD(v258) = v258 + 1;
      v206 += 8;
    }
    while (v207 != v206);
    v220 = (char *)__src;
    v4 = v205;
    v3 = v243;
  }
  else
  {
    v212 = 0;
    v220 = (char *)&v259;
  }
  if (v203 == 1)
  {
    v14 = 1;
  }
  else
  {
    *(_QWORD *)&v272 = 0;
    *((_QWORD *)&v272 + 1) = v245;
    v273 = v5;
    v274 = v276;
    v275 = 0x400000000;
    v277 = v279;
    v278 = 0x400000000;
    v280 = v7;
    v281 = xmmword_1C64632D0;
    sub_1C4F7C758((unsigned int *)&v274, (uint64_t)v276, v220, &v220[8 * v212]);
    v266 = (void *)sub_1C5120FD0(v4, &v272, v3);
    v267 = v221;
    v269 = (void *)v203;
    LODWORD(v270) = 0;
    sub_1C4848B64((uint64_t)&v269, (uint64_t)&v266);
    if (__OFADD__(v269, v8))
      v14 = ((uint64_t)((uint64_t)v269 + v8) >> 63) ^ 0x8000000000000000;
    else
      v14 = (unint64_t)v269 + v8;
    if (v277 != v279)
      free(v277);
    if (v274 != v276)
      free(v274);
    v220 = (char *)__src;
  }
  if (v220 != (char *)&v259)
  {
    v77 = v220;
    goto LABEL_257;
  }
LABEL_310:
  if (v282 != &v284)
    free(v282);
  return v14;
}

unint64_t sub_1C5124544(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  char v13;
  unint64_t v14;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE v20[32];

  v16 = v20;
  v17 = v20;
  v18 = 4;
  v19 = 0;
  v4 = a3;
  if (!a3)
    return 0;
  v8 = 0;
  do
  {
    v9 = *a2;
    v10 = *a4;
    if ((*(_DWORD *)(*a4 + 8) & 0xFE) == 0x12)
      v11 = *(unsigned __int8 *)(**(_QWORD **)(v10 + 16) + 8);
    else
      v11 = *(_DWORD *)(*a4 + 8);
    v12 = v11 < 7 || v11 == 13;
    if ((v12 || v11 == 15) && *(unsigned __int8 *)(v9 + 16) >= 0x15u)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v16, v9);
      if (v13)
      {
        if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
        {
          v14 = sub_1C61E77EC(a1, v10, 0, 1);
          if (__OFADD__(v8, v14))
            v8 = ((uint64_t)(v8 + v14) >> 63) ^ 0x8000000000000000;
          else
            v8 += v14;
        }
      }
    }
    ++a4;
    ++a2;
    --v4;
  }
  while (v4);
  if (v17 != v16)
    free(v17);
  return v8;
}

void sub_1C512468C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::OptimizationRemarkEmitter *a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = a2;
  if (word_1ED82EE58)
  {
    v6 = dword_1ED82EED0;
  }
  else
  {
    v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 160) + 8);
    if (!v6)
      return;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  if (v8 != v7)
  {
    v9 = a1 + 8;
    while (2)
    {
      v10 = *(_QWORD *)v7 + 40;
      for (i = *(_QWORD *)(*(_QWORD *)v7 + 48); i != v10; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v12 = i - 24;
        else
          v12 = 0;
        v13 = *(unsigned __int8 *)(v12 + 16);
        if (v13 == 84 || v13 == 33)
        {
          v14 = *(_QWORD *)(v12 - 32);
          if (!v14
            || *(_BYTE *)(v14 + 16)
            || *(_QWORD *)(v14 + 24) != *(_QWORD *)(v12 + 72)
            || sub_1C4845148(v9, (uint64_t ***)v14))
          {
            if (a4)
              sub_1C61E87EC(a4, (uint64_t)&v15, v12);
            return;
          }
        }
      }
      v7 += 8;
      if (v7 != v8)
        continue;
      break;
    }
  }
  *(_BYTE *)(a3 + 45) = 1;
  *(_WORD *)(a3 + 40) = 257;
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 12) = v6;
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 36) = 2;
}

void sub_1C51247C0(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void **v12;
  void *v13[2];
  char v14;
  void *__p;
  char v16;
  unsigned __int8 *v17;
  const void *v18[2];
  uint64_t (**v19)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  char v29;
  char v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[260];
  int v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  llvm::Loop::getStartLoc(**(llvm::Loop ***)a2, &v17);
  v4 = (int)v17;
  if (v17)
  {
    v5 = *(_QWORD *)&v17[-8 * *((unsigned int *)v17 + 2)];
    if (*(_BYTE *)v5 != 15)
      v5 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
    v6 = *((_DWORD *)v17 + 1);
    v4 = *((unsigned __int16 *)v17 + 1);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = **(_QWORD **)(**(_QWORD **)a2 + 32);
  v8 = *(_QWORD *)(v7 + 56);
  v20 = 9;
  v21 = 2;
  v22 = v8;
  v23 = v5;
  v24 = v6;
  v25 = v4;
  v26 = "TTI";
  v27 = "DontUnroll";
  v28 = 10;
  v29 = 0;
  v30 = 0;
  v31 = v33;
  v32 = 0x400000000;
  v33[256] = 0;
  v34 = -1;
  v35 = v7;
  v18[0] = "advising against unrolling the loop because it contains a ";
  v18[1] = (const void *)58;
  v19 = &off_1E814E500;
  sub_1C53B17B4((uint64_t)&v31, v18);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v13, "Call", 4uLL, *(_BYTE **)(a2 + 8));
  v9 = sub_1C47E3888((uint64_t)&v19, (uint64_t)v13);
  sub_1C61998EC((uint64_t)a1, v9);
  *a1 = &off_1E814E500;
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13[0]);
  v19 = &off_1E814E790;
  v10 = (char *)v31;
  if ((_DWORD)v32)
  {
    v11 = (unint64_t)v32 << 6;
    do
    {
      v12 = (void **)&v10[v11];
      if (v10[v11 - 17] < 0)
        operator delete(*(v12 - 5));
      if (*((char *)v12 - 41) < 0)
        operator delete(*(v12 - 8));
      v11 -= 64;
    }
    while (v11);
    v10 = (char *)v31;
  }
  if (v10 != v33)
    free(v10);
  if (v17)
    llvm::MetadataTracking::untrack((uint64_t)&v17, v17);
}

unint64_t sub_1C51249DC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, unint64_t a6, unsigned __int8 a7, int a8, unsigned __int8 a9, char a10)
{
  llvm::Type *v16;
  llvm::Type *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int8x8_t *v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int8x8_t *v37;
  int8x8_t v38;
  uint8x8_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  llvm::FixedVectorType *v61;
  llvm::APIntOps *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned __int8 v77;
  void *v78;
  uint64_t v79;
  _BYTE v80[48];
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v16 = (llvm::Type *)*(unsigned int *)(a3 + 32);
  v17 = (llvm::Type *)(v16 / a4);
  llvm::FixedVectorType::get(*(llvm::FixedVectorType **)(a3 + 24), v17);
  v65 = v18;
  if ((a9 & 1) != 0 || a10)
    v19 = sub_1C61E7C10(a1, a2, a3, a7, 1, 0, a8);
  else
    v19 = sub_1C5122554(a1, a2, a3, a8);
  v68 = v19;
  v21 = v20;
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 24), *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)a3, (uint64_t)&v78);
  v77 = v80[0];
  sub_1C4768AD0(*(_QWORD *)(a1 + 8), a3);
  v24 = v23;
  if ((_DWORD)v22 == 1)
  v26 = sub_1C47A8C74(&v77);
  if ((_DWORD)v25 == 1)
  {
    if (v21)
      goto LABEL_25;
  }
  else if (v21)
  {
    goto LABEL_25;
  }
  v27 = (unint64_t)(v26 + 7) >> 3;
  if (((unint64_t)(v24 + 7) >> 3) > v27)
  {
    v28 = (((unint64_t)(v24 + 7) >> 3) + (unint64_t)v27 - 1)
        / ((unint64_t)(v26 + 7) >> 3);
    v29 = v28 - 1;
    v78 = v80;
    v79 = 0x600000000;
    sub_1C4765AA4((char *)&v78, (v28 + 63) >> 6, 0);
    v81 = v28;
    v30 = (int8x8_t *)v78;
    if (a6)
    {
      if (v17 <= 1)
        v31 = 1;
      else
        v31 = (int)v17;
      v32 = a5;
      do
      {
        if (v16 >= a4)
        {
          v33 = *v32;
          v34 = v31;
          do
          {
            *(_QWORD *)&v30[(v33 / (((unint64_t)v16 + v29) / v28)) >> 6] |= 1 << (v33 / (((unint64_t)v16 + v29) / v28));
            v33 += a4;
            --v34;
          }
          while (v34);
        }
        ++v32;
      }
      while (v32 != &a5[a6]);
    }
    if ((_DWORD)v79)
    {
      v35 = 0;
      v36 = 8 * v79;
      v37 = v30;
      do
      {
        v38 = *v37++;
        v39 = (uint8x8_t)vcnt_s8(v38);
        v39.i16[0] = vaddlv_u8(v39);
        v35 += v39.i32[0];
        v36 -= 8;
      }
      while (v36);
    }
    else
    {
      v35 = 0;
    }
    v68 = (v29 + v68 * v35) / v28;
    if (v30 != (int8x8_t *)v80)
      free(v30);
  }
LABEL_25:
  v76 = v17;
  if (v17 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v75, -1, 1);
    v40 = a9;
    v41 = a6;
  }
  else
  {
    v40 = a9;
    v41 = a6;
    if (v16 < a4)
      v42 = 0;
    else
      v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
    v75 = v42;
  }
  v74 = v16;
  if (v16 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v73, -1, 1);
    v72 = v16;
    llvm::APInt::initSlowCase((llvm::APInt *)&v71, 0, 0);
    v44 = v65;
    if (!v41)
      goto LABEL_43;
  }
  else
  {
    if ((_DWORD)v16)
      v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
    else
      v43 = 0;
    v44 = v65;
    v73 = v43;
    v72 = v16;
    v71 = 0;
    if (!v41)
      goto LABEL_43;
  }
  v45 = &a5[v41];
  if (v17 <= 1)
    v46 = 1;
  else
    v46 = (int)v17;
  do
  {
    if (v16 >= a4)
    {
      v47 = *a5;
      v48 = v72;
      v49 = v46;
      do
      {
        v50 = 1 << v47;
        if (v48 > 0x40)
          *(_QWORD *)(v71 + 8 * (v47 >> 6)) |= v50;
        else
          v71 |= v50;
        v47 += a4;
        --v49;
      }
      while (v49);
    }
    ++a5;
  }
  while (a5 != v45);
LABEL_43:
  if (a2 == 32)
  {
    v69 = sub_1C61E820C(a1, v44, (uint64_t)&v75, 1, 0);
    v70 = v51;
    v78 = (void *)v41;
    LODWORD(v79) = 0;
    sub_1C4848B64((uint64_t)&v78, (uint64_t)&v69);
    if (__OFADD__(v68, v78))
      v52 = (char *)(((uint64_t)((uint64_t)v78 + v68) >> 63) ^ 0x8000000000000000);
    else
      v52 = (char *)v78 + v68;
    v53 = a1;
    v54 = a3;
    v55 = 0;
    v56 = 1;
  }
  else
  {
    v69 = v41;
    LODWORD(v70) = 0;
    v78 = (void *)sub_1C61E820C(a1, v44, (uint64_t)&v75, 0, 1);
    v79 = v57;
    sub_1C4848B64((uint64_t)&v78, (uint64_t)&v69);
    if (__OFADD__(v68, v78))
      v52 = (char *)(((uint64_t)((uint64_t)v78 + v68) >> 63) ^ 0x8000000000000000);
    else
      v52 = (char *)v78 + v68;
    v53 = a1;
    v54 = a3;
    v55 = 1;
    v56 = 0;
  }
  v58 = sub_1C61E820C(v53, v54, (uint64_t)&v71, v55, v56);
  if (__OFADD__(v52, v58))
    v59 = ((uint64_t)&v52[v58] >> 63) ^ 0x8000000000000000;
  else
    v59 = (unint64_t)&v52[v58];
  if (v40)
  {
    v61 = (llvm::FixedVectorType *)(**(_QWORD **)a3 + 1912);
    v62 = a10 ? (llvm::APIntOps *)&v71 : (llvm::APIntOps *)&v73;
    v63 = sub_1C61E76F4(a1, v61, a4, v17, v62);
    if (__OFADD__(v59, v63))
      v59 = ((uint64_t)(v59 + v63) >> 63) ^ 0x8000000000000000;
    else
      v59 += v63;
    if (a10)
    {
      llvm::FixedVectorType::get(v61, v16);
      sub_1C5121850(a1, 28);
      if (__OFADD__(v59, v64))
        v59 = ((uint64_t)(v59 + v64) >> 63) ^ 0x8000000000000000;
      else
        v59 += v64;
    }
  }
  if (v72 >= 0x41 && v71)
    MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
  if (v74 >= 0x41 && v73)
    MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
  if (v76 >= 0x41 && v75)
    MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
  return v59;
}

uint64_t sub_1C5124F8C(uint64_t *a1, llvm::ShuffleVectorInst *this)
{
  int v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)this - 1);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (uint64_t *)((char *)this - 32 * v5);
  }
  v25 = v27;
  v26 = 0x400000000;
  if (v5 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v5, 8);
    v7 = v26;
    v9 = v25;
    v8 = v26;
  }
  else
  {
    v7 = 0;
    if (!v5)
    {
      v13 = v27;
      goto LABEL_11;
    }
    v8 = 0;
    v9 = v27;
  }
  v10 = 32 * v5;
  v11 = &v9[v8];
  do
  {
    v12 = *v6;
    v6 += 4;
    *v11++ = v12;
    v10 -= 32;
  }
  while (v10);
  v13 = v25;
LABEL_11:
  LODWORD(v26) = v7 + v5;
  v14 = sub_1C51205AC(a1, (int **)this, (uint64_t)v13, (v7 + v5), 1);
  v16 = v14 < 0;
  if (v15)
    v16 = v15 < 0;
  if (!v16)
  {
    v17 = v15 < 1;
    if (!v15)
      v17 = v14 < 1;
    if (v17)
    {
      v18 = 0;
      goto LABEL_35;
    }
  }
  v19 = *((unsigned __int8 *)this + 16);
  if (v19 == 60)
  {
    v18 = 4;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)this;
  if (v19 == 84)
  {
    v21 = *((_QWORD *)this - 4);
    if (!v21
      || *(_BYTE *)(v21 + 16)
      || *(_QWORD *)(v21 + 24) != *((_QWORD *)this + 9)
      || (sub_1C4845148((uint64_t)a1, (uint64_t ***)v21) & 1) != 0)
    {
      v18 = 40;
      goto LABEL_35;
    }
    if (*(_BYTE *)(v20 + 8) == 16 && v20)
      v20 = **(_QWORD **)(v20 + 16);
  }
  v22 = *(_DWORD *)(v20 + 8);
  v23 = v22;
  if (v20 && (v22 & 0xFE) == 0x12)
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v20 + 24) + 8);
  if (v23 >= 7)
    v18 = 1;
  else
    v18 = 3;
LABEL_35:
  if (v25 != v27)
    free(v25);
  return v18;
}

uint64_t sub_1C5125188()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;
  int v5;

  v4 = 1;
  v5 = 1;
  v2 = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Enable generating trap for unreachable";
  v1.n128_u64[1] = 38;
  sub_1C61E69CC(&v5, &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED82F1C8, &dword_1C475E000);
}

uint64_t sub_1C51251F4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Local Stack Slot Allocation";
  *(_QWORD *)(v2 + 8) = 27;
  *(_QWORD *)(v2 + 16) = "localstackalloc";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6F19;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5125284;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5125284()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6F19);
  *v1 = &off_1E8143DD8;
  v1[31] = v1 + 33;
  v1[32] = 0x1000000000;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F9470);
  if (v3 != -1)
  {
    v7[0] = sub_1C51251F4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F9470, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5125370(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E8143DD8;
  v2 = (char *)*((_QWORD *)this + 31);
  if (v2 != (char *)this + 264)
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
}

void sub_1C5125408(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E8143DD8;
  v2 = (char *)*((_QWORD *)this + 31);
  if (v2 != (char *)this + 264)
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51254B4(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C51254E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  signed int i;
  unsigned int v27;
  uint64_t v28;
  _QWORD *j;
  signed int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t k;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  __int128 v49;
  unint64_t v50;
  int64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  unsigned int v82;
  _QWORD *v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90[4];
  void *v91;
  uint64_t v92;
  _BYTE v93[32];
  uint64_t v94;
  uint64_t v95[4];
  unsigned int *v96;
  uint64_t v97;
  _BYTE v98[32];
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int *v103;
  uint64_t v104;
  _BYTE v105[32];
  uint64_t *v106;
  uint64_t v107;
  _BYTE v108[64];
  _QWORD **v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 56);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  if (*(_DWORD *)(v4 + 32) == -858993459 * ((*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3))
    return 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 408))(v5, a2);
  if ((_DWORD)result)
  {
    v78 = v4;
    v83 = a1 + 31;
    sub_1C6154790((uint64_t)(a1 + 31), (int)(-858993459 * ((*(_QWORD *)(v4 + 16) - *(_QWORD *)(v4 + 8)) >> 3) - *(_DWORD *)(v4 + 32)));
    v7 = *(_QWORD *)(a2 + 56);
    v8 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 112))(*(_QWORD *)(a2 + 16));
    v9 = v8[2];
    v87 = 0;
    v86 = 0;
    v106 = (uint64_t *)v108;
    v107 = 0x1000000000;
    v110 = 0;
    v111 = 0;
    v109 = &v110;
    v10 = *(_DWORD *)(v7 + 64);
    if (v10 != -1)
    {
      v99 = 1;
      memset_pattern16(&v100, &unk_1C6613B70, 0x20uLL);
      v103 = (unsigned int *)v105;
      v104 = 0x800000000;
      v94 = 1;
      memset_pattern16(v95, &unk_1C6613B70, 0x20uLL);
      v96 = (unsigned int *)v98;
      v97 = 0x800000000;
      v89 = 1;
      memset_pattern16(v90, &unk_1C6613B70, 0x20uLL);
      v91 = v93;
      v92 = 0x800000000;
      if ((*(unsigned int (**)(_DWORD *, _QWORD))(*(_QWORD *)v8 + 24))(v8, *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + 40 * (*(_DWORD *)(v7 + 32) + v10) + 20)))
      {
        sub_1C5125EEC(a1, v7, v10, &v87, v9 == 1, &v86);
      }
      v11 = -858993459 * ((*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 3);
      v12 = *(_DWORD *)(v7 + 32);
      v13 = v11 - v12;
      if (v11 != v12)
      {
        v71 = 0;
        do
        {
          if (v10 != v71)
          {
            v72 = v71 + *(_DWORD *)(v7 + 32);
            v73 = *(_QWORD *)(v7 + 8);
            if (*(_QWORD *)(v73 + 40 * v72 + 8) != -1)
            {
              if ((*(unsigned int (**)(_DWORD *, _QWORD))(*(_QWORD *)v8 + 24))(v8, *(unsigned __int8 *)(v73 + 40 * v72 + 20)))
              {
                v74 = *(_QWORD *)(v7 + 8);
                v75 = *(unsigned __int8 *)(v74 + 40 * (v71 + *(_DWORD *)(v7 + 32)) + 36);
                if (*(_BYTE *)(v74 + 40 * (v71 + *(_DWORD *)(v7 + 32)) + 36))
                {
                  if (v75 == 1)
                  {
                    v88 = v71;
                    v76 = &v99;
                  }
                  else
                  {
                    v88 = v71;
                    if (v75 == 3)
                      v76 = &v89;
                    else
                      v76 = &v94;
                  }
                  sub_1C61E8B34((uint64_t)v76, (int *)&v88);
                }
              }
            }
          }
          ++v71;
        }
        while (v13 != v71);
      }
      if ((_DWORD)v104)
      {
        v14 = v103;
        v15 = 4 * v104;
        do
        {
          v88 = 0;
          v16 = *v14++;
          v88 = v16;
          sub_1C5125EEC(a1, v7, v16, &v87, v9 == 1, &v86);
          sub_1C49913E0((uint64_t)&v106, (int *)&v88);
          v15 -= 4;
        }
        while (v15);
      }
      if ((_DWORD)v97)
      {
        v17 = v96;
        v18 = 4 * v97;
        do
        {
          v88 = 0;
          v19 = *v17++;
          v88 = v19;
          sub_1C5125EEC(a1, v7, v19, &v87, v9 == 1, &v86);
          sub_1C49913E0((uint64_t)&v106, (int *)&v88);
          v18 -= 4;
        }
        while (v18);
      }
      v20 = (unsigned int *)v91;
      if ((_DWORD)v92)
      {
        v21 = 4 * v92;
        do
        {
          v88 = 0;
          v22 = *v20++;
          v88 = v22;
          sub_1C5125EEC(a1, v7, v22, &v87, v9 == 1, &v86);
          sub_1C49913E0((uint64_t)&v106, (int *)&v88);
          v21 -= 4;
        }
        while (v21);
        v20 = (unsigned int *)v91;
      }
      if (v20 != (unsigned int *)v93)
        free(v20);
      if ((v89 & 1) == 0)
        MEMORY[0x1CAA32FB4](v90[0], 4);
      if (v96 != (unsigned int *)v98)
        free(v96);
      if ((v94 & 1) == 0)
        MEMORY[0x1CAA32FB4](v95[0], 4);
      if (v103 != (unsigned int *)v105)
        free(v103);
      if ((v99 & 1) == 0)
        MEMORY[0x1CAA32FB4](v100, 4);
    }
    v23 = -858993459 * ((*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 3);
    v24 = *(_DWORD *)(v7 + 32);
    v25 = v23 - v24;
    if (v23 != v24)
    {
      for (i = 0; i != v25; ++i)
      {
        v27 = *(_DWORD *)(v7 + 32) + i;
        v28 = *(_QWORD *)(v7 + 8);
        if (*(_QWORD *)(v28 + 40 * v27 + 8) != -1 && *(_DWORD *)(v7 + 64) != i)
        {
          if (v111)
          {
            for (j = v110; j; j = (_QWORD *)*j)
            {
              v30 = *((_DWORD *)j + 7);
              if (i >= v30)
              {
                if (v30 >= i)
                  goto LABEL_49;
                ++j;
              }
            }
          }
          else if ((_DWORD)v107)
          {
            v31 = v106;
            v32 = 4 * v107;
            while (*(_DWORD *)v31 != i)
            {
              v31 = (uint64_t *)((char *)v31 + 4);
              v32 -= 4;
              if (!v32)
                goto LABEL_47;
            }
            if (v32)
              continue;
          }
LABEL_47:
          if ((*(unsigned int (**)(_DWORD *, _QWORD))(*(_QWORD *)v8 + 24))(v8, *(unsigned __int8 *)(v28 + 40 * v27 + 20)))
          {
            sub_1C5125EEC(a1, v7, i, &v87, v9 == 1, &v86);
          }
        }
LABEL_49:
        ;
      }
    }
    *(_QWORD *)(v7 + 640) = v87;
    *(_BYTE *)(v7 + 648) = v86;
    sub_1C61247C0((uint64_t)&v109, v110);
    if (v106 != (uint64_t *)v108)
      free(v106);
    v85 = *(_QWORD *)(a2 + 56);
    v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
    v80 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 112))(*(_QWORD *)(a2 + 16)) + 8);
    v106 = (uint64_t *)v108;
    v107 = 0x4000000000;
    v34 = *(_QWORD *)(a2 + 328);
    if (v34 != a2 + 320)
    {
      v81 = 0;
      do
      {
        for (k = *(_QWORD *)(v34 + 56); k != v34 + 48; k = *(_QWORD *)(k + 8))
        {
          v36 = **(unsigned __int16 **)(k + 16);
          if (v36 - 13 >= 5)
          {
            v37 = v36 > 0x1F;
            v38 = (1 << v36) & 0x8A000000;
            if (v37 || v38 == 0)
            {
              v40 = *(unsigned int *)(k + 40);
              if ((_DWORD)v40)
              {
                v41 = (_DWORD *)(*(_QWORD *)(k + 32) + 16);
                v42 = 32 * v40;
                while (*((_BYTE *)v41 - 16) != 5)
                {
                  v41 += 8;
                  v42 -= 32;
                  if (!v42)
                    goto LABEL_73;
                }
                v43 = *v41;
                if (*(_BYTE *)(*(_QWORD *)(v85 + 8) + 40 * (*(_DWORD *)(v85 + 32) + *v41) + 32))
                {
                  v44 = *(_QWORD *)(*v83 + 8 * v43);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 456))(v33, k, v44))
                  {
                    v99 = k;
                    v100 = v44;
                    v45 = v81;
                    v101 = v43;
                    v102 = v81;
                    v46 = v106;
                    if (v107 >= HIDWORD(v107))
                    {
                      v50 = v107 + 1;
                      if (v106 <= &v99 && &v106[3 * v107] > &v99)
                      {
                        v51 = (char *)&v99 - (char *)v106;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v50, 24);
                        v46 = v106;
                        v47 = (uint64_t *)((char *)v106 + v51);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v50, 24);
                        v47 = &v99;
                        v46 = v106;
                      }
                      v45 = v81;
                    }
                    else
                    {
                      v47 = &v99;
                    }
                    v81 = v45 + 1;
                    v48 = &v46[3 * v107];
                    v49 = *(_OWORD *)v47;
                    v48[2] = v47[2];
                    *(_OWORD *)v48 = v49;
                    LODWORD(v107) = v107 + 1;
                  }
                }
LABEL_73:
                if (!k)
                  goto LABEL_76;
              }
            }
          }
          if ((*(_BYTE *)k & 4) == 0)
          {
LABEL_76:
            while ((*(_WORD *)(k + 44) & 8) != 0)
              k = *(_QWORD *)(k + 8);
          }
        }
        v34 = *(_QWORD *)(v34 + 8);
      }
      while (v34 != a2 + 320);
      v52 = v107;
      if (v107 >= 2)
      {
        qsort(v106, v107, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1C5126024);
        v52 = v107;
      }
      if (v52 >= 1)
      {
        v53 = 0;
        v84 = 0;
        v79 = 0;
        v82 = 0;
        v77 = *(_QWORD *)(a2 + 328);
        v54 = v52;
        while (1)
        {
          v55 = &v106[3 * v53];
          v56 = *((unsigned int *)v55 + 4);
          v57 = *(_DWORD *)(v85 + 64);
          if (v57 != -1 && (_DWORD)v56 == v57)
            goto LABEL_108;
          v59 = *v55;
          v60 = *(unsigned int *)(*v55 + 40);
          if ((_DWORD)v60)
          {
            v61 = 0;
            v62 = (_DWORD *)(*(_QWORD *)(v59 + 32) + 16);
            while (*((_BYTE *)v62 - 16) != 5 || (_DWORD)v56 != *v62)
            {
              ++v61;
              v62 += 8;
              if (v60 == v61)
              {
                v61 = *(unsigned int *)(*v55 + 40);
                break;
              }
            }
          }
          else
          {
            v61 = 0;
          }
          v63 = v54;
          if (v80 == 1)
            v64 = *(_QWORD *)(v85 + 640);
          else
            v64 = 0;
          v65 = v55[1];
          if ((v84 & 1) == 0
            || (v66 = v64 + v65 - v79,
                v67 = v82,
                ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v33 + 480))(v33, v59, v82, v66) & 1) == 0))
          {
            v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 448))(v33, v59, v61);
            v54 = v63;
            if (v53 + 1 >= v63)
              goto LABEL_108;
            v69 = v68;
            v70 = v64 + v65 + v68;
            if (!(*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v33 + 480))(v33, v106[3 * v53 + 3], v82, v106[3 * v53 + 4] - (v65 + v68)))goto LABEL_108;
            v66 = -v69;
            v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 464))(v33, v77, v56, v69);
            v67 = v82;
            v79 = v70;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 472))(v33, v59, v67, v66);
          v84 = 1;
          v54 = v63;
LABEL_108:
          if (++v53 == v54)
            goto LABEL_111;
        }
      }
    }
    v84 = 0;
LABEL_111:
    if (v106 != (uint64_t *)v108)
      free(v106);
    *(_BYTE *)(v78 + 649) = v84 & 1;
    return 1;
  }
  return result;
}

_QWORD *sub_1C5125EEC(_QWORD *result, uint64_t a2, unsigned int a3, uint64_t *a4, int a5, _BYTE *a6)
{
  char v6;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;

  v6 = a5;
  if ((a5 & 1) != 0)
  {
    v10 = *(_DWORD *)(a2 + 32) + a3;
    v11 = *(_QWORD *)(a2 + 8);
    *a4 += *(_QWORD *)(v11 + 40 * v10 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 8);
    v10 = *(_DWORD *)(a2 + 32) + a3;
  }
  v12 = *(unsigned __int8 *)(v11 + 40 * v10 + 16);
  v13 = *a6;
  if (v13 <= v12)
    LOBYTE(v13) = v12;
  *a6 = v13;
  v14 = ((1 << v12) + *a4 - 1) & -(1 << v12);
  *a4 = v14;
  if (a5)
    v15 = -v14;
  else
    v15 = v14;
  *(_QWORD *)(result[31] + 8 * (int)a3) = v15;
  v16 = *(unsigned int *)(a2 + 120);
  if (v16 >= *(_DWORD *)(a2 + 124))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 112, a2 + 128, v16 + 1, 16);
    LODWORD(v16) = *(_DWORD *)(a2 + 120);
  }
  v17 = (_QWORD *)(*(_QWORD *)(a2 + 112) + 16 * v16);
  *v17 = a3;
  v17[1] = v15;
  ++*(_DWORD *)(a2 + 120);
  v18 = *(_DWORD *)(a2 + 32) + a3;
  v19 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v19 + 40 * v18 + 32) = 1;
  if ((v6 & 1) == 0)
    *a4 += *(_QWORD *)(v19 + 40 * v18 + 8);
  return result;
}

uint64_t sub_1C5126024(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  if (v3 < v2)
    return 1;
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a2 + 16);
  if (v4 < v5)
    return 0xFFFFFFFFLL;
  if (v5 < v4)
    return 1;
  v7 = *(_DWORD *)(a1 + 20);
  v8 = *(_DWORD *)(a2 + 20);
  if (v7 >= v8)
    return v8 < v7;
  else
    return 0xFFFFFFFFLL;
}

BOOL llvm::LoopTraversal::isBlockDone(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(unsigned int *)(a2 + 24);
  if (*(_BYTE *)(*a1 + 16 * v2) && (v3 = (_DWORD *)(*a1 + 16 * v2), v3[3] == v3[2]))
    return v3[1] == ((*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 3);
  else
    return 0;
}

void llvm::LoopTraversal::traverse(llvm::LoopTraversal *this@<X0>, llvm::MachineFunction *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  void *__p;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[5];

  v58[4] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13);
  v7 = (v6 >> 3);
  if (v7 > *((unsigned int *)this + 3))
  {
    *((_DWORD *)this + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, (uint64_t)this + 16, (v6 >> 3), 16);
    v8 = *(void **)this;
LABEL_11:
    bzero(v8, 16 * v7);
    goto LABEL_12;
  }
  v9 = *((unsigned int *)this + 2);
  if (v9 >= v7)
    v10 = (v6 >> 3);
  else
    v10 = *((unsigned int *)this + 2);
  if (v10)
  {
    bzero(*(void **)this, 16 * v10);
    v9 = *((unsigned int *)this + 2);
  }
  v11 = v7 > v9;
  v7 -= v9;
  if (v11)
  {
    v8 = (void *)(*(_QWORD *)this + 16 * v9);
    goto LABEL_11;
  }
LABEL_12:
  *((_DWORD *)this + 2) = v6 >> 3;
  v12 = *((_QWORD *)a2 + 41);
  v54 = 0;
  v55 = v12;
  __p = 0;
  v53 = 0;
  sub_1C61D9B18((char **)&__p, &v55);
  v13 = v58;
  v56 = v58;
  v57 = 0x400000000;
  v50 = a3 + 16;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  v15 = (char *)__p;
  v14 = v53;
  if (v53 == __p)
    goto LABEL_55;
  do
  {
    v17 = *((_QWORD *)v14 - 1);
    v14 -= 8;
    v16 = v17;
    v18 = *(_QWORD *)this + 16 * *(unsigned int *)(v17 + 24);
    *(_BYTE *)v18 = 1;
    *(_DWORD *)(v18 + 8) = *(_DWORD *)(v18 + 4);
    if (HIDWORD(v57))
    {
      v19 = 0;
    }
    else
    {
      v40 = v13;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v13, 1uLL, 8);
      v13 = v40;
      v19 = v57;
    }
    *((_QWORD *)v56 + v19) = v16;
    v20 = __CFADD__((_DWORD)v57, 1);
    v21 = v57 + 1;
    LODWORD(v57) = v57 + 1;
    if (!v20)
    {
      v22 = 1;
      do
      {
        v23 = *((_QWORD *)v56 + v21 - 1);
        LODWORD(v57) = v21 - 1;
        v24 = *(unsigned int *)(v23 + 24);
        if (*(_BYTE *)(*(_QWORD *)this + 16 * v24) && (v25 = (_DWORD *)(*(_QWORD *)this + 16 * v24), v25[3] == v25[2]))
        {
          v26 = v25[1] == ((*(_QWORD *)(v23 + 72) - *(_QWORD *)(v23 + 64)) >> 3);
          if (v25[1] == ((*(_QWORD *)(v23 + 72) - *(_QWORD *)(v23 + 64)) >> 3))
            v27 = 256;
          else
            v27 = 0;
        }
        else
        {
          v26 = 0;
          v27 = 0;
        }
        v28 = *(unsigned int *)(a3 + 8);
        if (v28 >= *(unsigned int *)(a3 + 12))
        {
          v39 = v13;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v50, v28 + 1, 16);
          v13 = v39;
          v28 = *(unsigned int *)(a3 + 8);
        }
        v29 = (_QWORD *)(*(_QWORD *)a3 + 16 * v28);
        *v29 = v23;
        v29[1] = v27 | v22 & 1;
        ++*(_DWORD *)(a3 + 8);
        v31 = *(uint64_t **)(v23 + 88);
        v30 = *(uint64_t **)(v23 + 96);
        while (v31 != v30)
        {
          v32 = *v31;
          v33 = *(unsigned int *)(*v31 + 24);
          v34 = *(_QWORD *)this;
          v35 = *(unsigned __int8 *)(*(_QWORD *)this + 16 * v33);
          if (*(_BYTE *)(*(_QWORD *)this + 16 * v33))
          {
            v36 = (_DWORD *)(v34 + 16 * v33);
            if (v36[3] == v36[2] && v36[1] == ((*(_QWORD *)(v32 + 72) - *(_QWORD *)(v32 + 64)) >> 3))
              goto LABEL_43;
          }
          if ((v22 & 1) != 0)
          {
            ++*(_DWORD *)(v34 + 16 * v33 + 4);
            if (!v26)
            {
LABEL_34:
              if (!v35)
                goto LABEL_43;
              goto LABEL_38;
            }
          }
          else if (!v26)
          {
            goto LABEL_34;
          }
          ++*(_DWORD *)(v34 + 16 * v33 + 12);
          if (!v35)
            goto LABEL_43;
LABEL_38:
          v37 = (_DWORD *)(v34 + 16 * v33);
          if (v37[3] == v37[2] && v37[1] == ((*(_QWORD *)(v32 + 72) - *(_QWORD *)(v32 + 64)) >> 3))
          {
            v38 = v57;
            if (v57 >= (unint64_t)HIDWORD(v57))
            {
              v51 = v13;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v13, v57 + 1, 8);
              v13 = v51;
              v38 = v57;
            }
            *((_QWORD *)v56 + v38) = v32;
            LODWORD(v57) = v57 + 1;
          }
LABEL_43:
          ++v31;
        }
        v22 = 0;
        v21 = v57;
      }
      while ((_DWORD)v57);
    }
  }
  while (v14 != v15);
  v42 = (char *)__p;
  v41 = v53;
  if (v53 != __p)
  {
    do
    {
      v44 = *((_QWORD *)v41 - 1);
      v41 -= 8;
      v43 = v44;
      v45 = *(unsigned int *)(v44 + 24);
      if (*(_BYTE *)(*(_QWORD *)this + 16 * v45))
      {
        v46 = (_DWORD *)(*(_QWORD *)this + 16 * v45);
        if (v46[3] == v46[2] && v46[1] == ((*(_QWORD *)(v43 + 72) - *(_QWORD *)(v43 + 64)) >> 3))
          continue;
      }
      v47 = *(unsigned int *)(a3 + 8);
      if (v47 >= *(unsigned int *)(a3 + 12))
      {
        v49 = v13;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v50, v47 + 1, 16);
        v13 = v49;
        v47 = *(unsigned int *)(a3 + 8);
      }
      v48 = (_QWORD *)(*(_QWORD *)a3 + 16 * v47);
      *v48 = v43;
      v48[1] = 256;
      ++*(_DWORD *)(a3 + 8);
    }
    while (v41 != v42);
  }
LABEL_55:
  *((_DWORD *)this + 2) = 0;
  if (v56 != v13)
    free(v56);
  if (__p)
  {
    v53 = (char *)__p;
    operator delete(__p);
  }
}

unint64_t llvm::getLLTForType(llvm *this, llvm::Type *a2, const llvm::DataLayout *a3)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t LLTForType;
  unsigned int v11;
  int v12;
  const char *v13;
  unsigned int v14;
  unsigned int v15;
  int isSizedDerivedType;

  if ((*((_DWORD *)this + 2) & 0xFE) != 0x12)
  {
    if (*((_DWORD *)this + 2) == 15)
    {
      v5 = *((unsigned int *)this + 2);
      return (v5 >> 8 << 19) | (8
                              * (unsigned __int16)*(_DWORD *)(llvm::DataLayout::getPointerAlignElem(a2, *((_DWORD *)this + 2) >> 8)+ 4)) | 2;
    }
    v11 = *((_DWORD *)this + 2);
    if (v11 > 0x11)
      goto LABEL_18;
    v12 = 1 << v11;
    if ((v12 & 0xAC7F) != 0)
      goto LABEL_11;
    if ((v12 & 0x30000) == 0)
    {
LABEL_18:
      if (*((_DWORD *)this + 2) != 21)
        return 0;
    }
    isSizedDerivedType = llvm::Type::isSizedDerivedType((uint64_t)this, 0);
    LLTForType = 0;
    if (!isSizedDerivedType)
      return LLTForType;
LABEL_11:
    sub_1C4768AD0((uint64_t)a2, (uint64_t)this);
    v15 = v14;
    if ((_DWORD)v13 == 1)
    return ((unint64_t)(*((_BYTE *)this + 8) == 1) << 63) | (8 * v15) | 1;
  }
  v6 = *((unsigned int *)this + 8);
  v7 = *((_DWORD *)this + 2);
  LLTForType = llvm::getLLTForType(*((llvm **)this + 3), a2, a3);
  if (v7 == 19 || (_DWORD)v6 != 1)
    return sub_1C4953AD0(v6 | ((unint64_t)(v7 == 19) << 32), LLTForType);
  return LLTForType;
}

unint64_t llvm::getLLTForMVT(unsigned __int8 a1)
{
  unsigned int v1;
  unsigned __int8 v2;
  unsigned int v3;
  const char *v4;
  unint64_t v5;
  const char *v6;
  unsigned int v7;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;

  v11 = a1;
  if (a1 - 15 >= 0x9C)
  {
    v7 = sub_1C47A8C74(&v11);
    if ((_DWORD)v6 == 1)
    return (8 * v7) | 1;
  }
  else
  {
    v1 = sub_1C47F381C(&v11);
    v2 = v11;
    v10 = sub_1C47F37A0(&v11);
    v3 = sub_1C47A8C74(&v10);
    if ((_DWORD)v4 == 1)
    {
      v9 = v3;
      v3 = v9;
    }
    v5 = (8 * v3) | 1;
    if (v1 != 1 || (v2 + 85) >= 0xCDu)
      return sub_1C4953AD0(v1 | ((unint64_t)((v2 + 85) > 0xCCu) << 32), v5);
  }
  return v5;
}

void llvm::initializeLowerEmuTLSPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7F9480);
  if (v1 != -1)
  {
    v4[0] = sub_1C5126798;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7F9480, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5126798(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Add __emutls_[vt]. variables for emultated TLS model";
  *(_QWORD *)(v2 + 8) = 52;
  *(_QWORD *)(v2 + 16) = "loweremutls";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1ED7F9478;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C51268F0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5126828(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7F9478;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8143E98;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F9480);
  if (v3 != -1)
  {
    v7[0] = sub_1C5126798;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F9480, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C51268F0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5126828(v0);
}

void sub_1C512691C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5126940(llvm::ModulePass *a1, uint64_t a2)
{
  uint64_t AnalysisPass;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  char v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t ****v15;
  uint64_t ***v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  uint64_t ***v27;
  uint64_t **v28;
  char *v29;
  uint64_t **v30;
  unsigned __int8 *p_p;
  unint64_t v32;
  uint64_t v33;
  llvm::PointerType *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *IntPtrType;
  char v39;
  _QWORD *v40;
  llvm::APInt *v41;
  unsigned int v42;
  llvm::PointerType *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  llvm::UndefValue *inserted;
  llvm::PointerType *v47;
  unsigned __int8 v48;
  llvm::UndefValue *v49;
  const char *v50;
  const llvm::APInt *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  llvm::ConstantInt *v55;
  unsigned int v56;
  unint64_t v57;
  const llvm::APInt *v58;
  llvm::ValueHandleBase *v59;
  uint64_t v60;
  llvm::ConstantInt *v61;
  unsigned int v62;
  unint64_t v63;
  llvm::ValueHandleBase *v64;
  llvm::UndefValue *v65;
  llvm::UndefValue *v66;
  unsigned __int8 v67;
  unsigned int v68;
  unsigned __int8 v69;
  unsigned int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ****v76;
  uint64_t ***v77;
  int v78;
  int v79;
  uint64_t ***v80;
  uint64_t **v81;
  char *v82;
  uint64_t **v83;
  unsigned __int8 *v84;
  unint64_t v85;
  llvm::UndefValue *v86;
  uint64_t v87;
  uint64_t ****v88;
  unsigned __int8 v89;
  llvm::ConstantAggregateZero *v90;
  llvm::UndefValue *v91;
  llvm::DataLayout *v92;
  llvm::ConstantPointerNull *v93;
  void *v94;
  unint64_t v95;
  char v96;
  void *__p;
  unint64_t v98;
  char v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[64];
  _QWORD *v103[4];
  __int128 v104;
  __int128 v105;
  __int16 v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  if ((llvm::ModulePass::skipModule(a1, (uint64_t **)a2) & 1) != 0)
    goto LABEL_8;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), &llvm::TargetPassConfig::ID, 1);
  if (!AnalysisPass)
    goto LABEL_8;
  v5 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID);
  if (!v5)
    goto LABEL_8;
  v6 = *(_DWORD **)(v5 + 112);
  v7 = v6[260];
  if ((v7 & 0x40000) != 0)
  {
    if ((v7 & 0x20000) == 0)
    {
LABEL_8:
      v10 = 0;
      return v10 & 1;
    }
  }
  else
  {
    v8 = v6[122];
    if (v8 != 11)
    {
      v9 = v6[121];
      if (v9 != 13 && (v9 != 15 || v8 != 18))
        goto LABEL_8;
    }
  }
  v100 = v102;
  v101 = 0x800000000;
  v12 = *(_QWORD *)(a2 + 16);
  if (v12 == a2 + 8)
    goto LABEL_8;
  v13 = 0;
  do
  {
    if (v12)
      v14 = v12 - 56;
    else
      v14 = 0;
    if ((*(_BYTE *)(v14 + 33) & 0x1C) != 0)
    {
      if (v13 >= HIDWORD(v101))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, (uint64_t)v102, v13 + 1, 8);
        v13 = v101;
      }
      *((_QWORD *)v100 + v13) = v14;
      v13 = v101 + 1;
      LODWORD(v101) = v101 + 1;
    }
    v12 = *(_QWORD *)(v12 + 8);
  }
  while (v12 != a2 + 8);
  v15 = (uint64_t ****)v100;
  v10 = 0;
  if (v13)
  {
    v88 = (uint64_t ****)((char *)v100 + 8 * v13);
    v92 = (llvm::DataLayout *)(a2 + 272);
    while (1)
    {
      v16 = *v15;
      v17 = *(uint64_t **)a2;
      v93 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)a2 + 1912), 0);
      v18 = v16 >> 4;
      if ((*((_BYTE *)v16 + 23) & 0x10) != 0)
        break;
      v28 = 0;
      v29 = &byte_1C871356D;
LABEL_34:
      v106 = 1283;
      *(_QWORD *)&v104 = "__emutls_v.";
      *(_QWORD *)&v105 = v29;
      *((_QWORD *)&v105 + 1) = v28;
      llvm::Twine::str((llvm::Twine *)&v104, &__p);
      if (v99 >= 0)
        p_p = (unsigned __int8 *)&__p;
      else
        p_p = (unsigned __int8 *)__p;
      if (v99 >= 0)
        v32 = v99 & 0x7F;
      else
        v32 = v98;
      v33 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), p_p, v32);
      if (v33 && *(_BYTE *)(v33 + 16) == 3)
      {
        v71 = 0;
        goto LABEL_96;
      }
      v91 = (llvm::UndefValue *)llvm::ConstantPointerNull::get(v93, v34);
      if (v16 && *((_BYTE *)v16 + 16) == 3)
      {
        if ((*((_DWORD *)v16 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_52;
      }
      else if (!*((_BYTE *)v16 + 16) && v16[9] == (uint64_t **)(v16 + 9) && (*((_BYTE *)v16 + 34) & 0x80) == 0)
      {
        goto LABEL_52;
      }
      v35 = (uint64_t)*(v16 - 4);
      v36 = *(unsigned __int8 *)(v35 + 16);
      if (v36 == 16)
        v37 = (uint64_t)*(v16 - 4);
      else
        v37 = 0;
      if (v36 == 13)
      {
LABEL_52:
        IntPtrType = llvm::DataLayout::getIntPtrType(v92, (llvm::LLVMContext *)v17, 0);
        v35 = 0;
        v39 = 1;
        v40 = v93;
        goto LABEL_59;
      }
      if (v37)
      {
        v41 = (llvm::APInt *)(v37 + 24);
        v42 = *(_DWORD *)(v37 + 32);
        if (v42 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v41) == v42)
            goto LABEL_52;
        }
        else if (!*(_QWORD *)v41)
        {
          goto LABEL_52;
        }
      }
      IntPtrType = llvm::DataLayout::getIntPtrType(v92, (llvm::LLVMContext *)v17, 0);
      v40 = (_QWORD *)llvm::PointerType::get(*(llvm::PointerType **)v35, 0);
      v39 = 0;
LABEL_59:
      v103[0] = IntPtrType;
      v103[1] = IntPtrType;
      v103[2] = v93;
      v103[3] = v40;
      v43 = (llvm::PointerType *)llvm::StructType::create(v103, 4);
      if (v99 >= 0)
        v44 = (unsigned __int8 *)&__p;
      else
        v44 = (unsigned __int8 *)__p;
      if (v99 >= 0)
        v45 = v99 & 0x7F;
      else
        v45 = v98;
      v90 = v43;
      inserted = llvm::Module::getOrInsertGlobal(a2, v44, v45, v43);
      sub_1C51270F0(a2, (uint64_t)v16, (uint64_t ***)inserted);
      if (v16 && *((_BYTE *)v16 + 16) == 3)
      {
        if ((*((_DWORD *)v16 + 5) & 0x7FFFFFF) != 0)
          goto LABEL_72;
      }
      else if (*((_BYTE *)v16 + 16) || v16[9] != (uint64_t **)(v16 + 9) || (*((_BYTE *)v16 + 34) & 0x80) != 0)
      {
LABEL_72:
        v47 = (llvm::PointerType *)v16[3];
        if ((*((_WORD *)v16 + 17) & 0x3F) != 0)
        {
          v89 = (*((_WORD *)v16 + 17) & 0x3F) - 1;
        }
        else
        {
          llvm::DataLayout::getAlignment((uint64_t)v92, (uint64_t)v16[3]);
          v89 = v48;
        }
        if ((v39 & 1) != 0)
        {
          v49 = 0;
LABEL_77:
          v104 = 0u;
          v105 = 0u;
          sub_1C4768AD0((uint64_t)v92, (uint64_t)v47);
          v53 = v52;
          if ((_DWORD)v50 == 1)
          v54 = (unint64_t)(v53 + 7) >> 3;
          v55 = (llvm::ConstantInt *)*IntPtrType;
          v56 = *((_DWORD *)IntPtrType + 2);
          LODWORD(v95) = v56 >> 8;
          if (v56 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v94, v54, 0);
          }
          else
          {
            if (v56 <= 0xFF)
              v57 = 0;
            else
              v57 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v56);
            v94 = (void *)(v57 & v54);
          }
          v59 = llvm::ConstantInt::get(v55, (llvm::LLVMContext *)&v94, v51);
          if (v95 >= 0x41 && v94)
            MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
          *(_QWORD *)&v104 = v59;
          v60 = 1 << v89;
          v61 = (llvm::ConstantInt *)*IntPtrType;
          v62 = *((_DWORD *)IntPtrType + 2);
          LODWORD(v95) = v62 >> 8;
          if (v62 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v94, v60, 0);
          }
          else
          {
            if (v62 <= 0xFF)
              v63 = 0;
            else
              v63 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v62);
            v94 = (void *)(v63 & v60);
          }
          v64 = llvm::ConstantInt::get(v61, (llvm::LLVMContext *)&v94, v58);
          if (v95 >= 0x41 && v94)
            MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
          v65 = v91;
          *((_QWORD *)&v104 + 1) = v64;
          *(_QWORD *)&v105 = v91;
          if (v49)
            v65 = v49;
          *((_QWORD *)&v105 + 1) = v65;
          v66 = llvm::ConstantStruct::get(v90, (llvm::Type *)&v104, 4);
          llvm::GlobalVariable::setInitializer((uint64_t)inserted, v66);
          llvm::DataLayout::getAlignment((uint64_t)v92, (uint64_t)IntPtrType);
          v68 = v67;
          llvm::DataLayout::getAlignment((uint64_t)v92, (uint64_t)v93);
          v70 = v69;
          if (v68 > v69)
            v70 = v68;
          *((_DWORD *)inserted + 8) = ((v70 << 16) + 0x10000) | *((_DWORD *)inserted + 8) & 0xFFC0FFFF;
          goto LABEL_95;
        }
        if ((*((_BYTE *)v16 + 23) & 0x10) != 0)
        {
          v72 = ***v16;
          v73 = *(_QWORD *)(v72 + 152);
          v74 = *(unsigned int *)(v72 + 168);
          if (!(_DWORD)v74)
            goto LABEL_110;
          LODWORD(v75) = (v74 - 1) & (v18 ^ (v16 >> 9));
          v76 = (uint64_t ****)(v73 + 16 * v75);
          v77 = *v76;
          if (*v76 != v16)
          {
            v78 = 1;
            while (v77 != (uint64_t ***)-4096)
            {
              v79 = v75 + v78++;
              v75 = v79 & (v74 - 1);
              v77 = *(uint64_t ****)(v73 + 16 * v75);
              if (v77 == v16)
              {
                v76 = (uint64_t ****)(v73 + 16 * v75);
                goto LABEL_111;
              }
            }
LABEL_110:
            v76 = (uint64_t ****)(v73 + 16 * v74);
          }
LABEL_111:
          v80 = v76[1];
          v83 = *v80;
          v82 = (char *)(v80 + 2);
          v81 = v83;
        }
        else
        {
          v81 = 0;
          v82 = &byte_1C871356D;
        }
        v106 = 1283;
        *(_QWORD *)&v104 = "__emutls_t.";
        *(_QWORD *)&v105 = v82;
        *((_QWORD *)&v105 + 1) = v81;
        llvm::Twine::str((llvm::Twine *)&v104, &v94);
        if (v96 >= 0)
          v84 = (unsigned __int8 *)&v94;
        else
          v84 = (unsigned __int8 *)v94;
        if (v96 >= 0)
          v85 = v96 & 0x7F;
        else
          v85 = v95;
        v86 = llvm::Module::getOrInsertGlobal(a2, v84, v85, v47);
        v49 = v86;
        if (*((_BYTE *)v86 + 16) == 3)
          v87 = (uint64_t)v86;
        else
          v87 = 0;
        *(_BYTE *)(v87 + 80) |= 1u;
        llvm::GlobalVariable::setInitializer(v87, (llvm::Constant *)v35);
        *(_DWORD *)(v87 + 32) = *(_DWORD *)(v87 + 32) & 0xFFC0FFFF | ((v89 << 16) + 0x10000);
        sub_1C51270F0(a2, (uint64_t)v16, (uint64_t ***)v87);
        if (v96 < 0)
          operator delete(v94);
        goto LABEL_77;
      }
LABEL_95:
      v71 = 1;
LABEL_96:
      if (v99 < 0)
        operator delete(__p);
      v10 |= v71;
      if (++v15 == v88)
      {
        v15 = (uint64_t ****)v100;
        goto LABEL_131;
      }
    }
    v19 = ***v16;
    v20 = *(_QWORD *)(v19 + 152);
    v21 = *(unsigned int *)(v19 + 168);
    if ((_DWORD)v21)
    {
      LODWORD(v22) = (v21 - 1) & (v18 ^ (v16 >> 9));
      v23 = (uint64_t ****)(v20 + 16 * v22);
      v24 = *v23;
      if (*v23 == v16)
      {
LABEL_33:
        v27 = v23[1];
        v30 = *v27;
        v29 = (char *)(v27 + 2);
        v28 = v30;
        goto LABEL_34;
      }
      v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == v16)
        {
          v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_33;
        }
      }
    }
    v23 = (uint64_t ****)(v20 + 16 * v21);
    goto LABEL_33;
  }
LABEL_131:
  if (v15 != (uint64_t ****)v102)
    free(v15);
  return v10 & 1;
}

uint64_t sub_1C51270F0(uint64_t result, uint64_t a2, uint64_t ***a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ****v18;
  uint64_t ***v19;
  int v20;
  int v21;
  uint64_t ***v22;
  unsigned __int8 *v23;
  size_t v24;
  size_t v25;
  size_t *inserted;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 32);
  v7 = (v6 & 0xF) - 7;
  v8 = *((_DWORD *)a3 + 8);
  v9 = v7 >= 2;
  if (v7 >= 2)
    v10 = *((_DWORD *)a3 + 8);
  else
    v10 = v8 & 0xFFFFFFC0;
  v11 = v10 & 0xFFFFFFF0 | v6 & 0xF;
  *((_DWORD *)a3 + 8) = v11;
  if (!v9
    || (v8 & 0x30) != 0
    && (result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a3),
        v11 = *((_DWORD *)a3 + 8),
        (result & 1) == 0))
  {
    v11 |= 0x4000u;
    *((_DWORD *)a3 + 8) = v11;
  }
  v12 = *(_DWORD *)(a2 + 32) & 0x30;
  v13 = v12 | v11 & 0xFFFFFFCF;
  *((_DWORD *)a3 + 8) = v13;
  if ((v11 & 0xF) - 7 < 2
    || v12
    && (result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a3),
        v13 = *((_DWORD *)a3 + 8),
        (result & 1) == 0))
  {
    v13 |= 0x4000u;
    *((_DWORD *)a3 + 8) = v13;
  }
  *((_DWORD *)a3 + 8) = v13 & 0xFFFFBFFF | (((*(_DWORD *)(a2 + 32) >> 14) & 1) << 14);
  if (*(_QWORD *)(a2 + 48))
  {
    if ((*((_BYTE *)a3 + 23) & 0x10) == 0)
    {
      v24 = 0;
      v23 = (unsigned __int8 *)&byte_1C871356D;
      goto LABEL_21;
    }
    v14 = ***a3;
    v15 = *(_QWORD *)(v14 + 152);
    v16 = *(unsigned int *)(v14 + 168);
    if ((_DWORD)v16)
    {
      LODWORD(v17) = (v16 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      v18 = (uint64_t ****)(v15 + 16 * v17);
      v19 = *v18;
      if (*v18 == a3)
      {
LABEL_20:
        v22 = v18[1];
        v25 = (size_t)*v22;
        v23 = (unsigned __int8 *)(v22 + 2);
        v24 = v25;
LABEL_21:
        inserted = llvm::Module::getOrInsertComdat(v5, v23, v24);
        result = (uint64_t)llvm::GlobalObject::setComdat((llvm::GlobalObject *)a3, (llvm::Comdat *)inserted);
        *((_DWORD *)a3[6] + 2) = *(_DWORD *)(*(_QWORD *)(a2 + 48) + 8);
        return result;
      }
      v20 = 1;
      while (v19 != (uint64_t ***)-4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(uint64_t ****)(v15 + 16 * v17);
        if (v19 == a3)
        {
          v18 = (uint64_t ****)(v15 + 16 * v17);
          goto LABEL_20;
        }
      }
    }
    v18 = (uint64_t ****)(v15 + 16 * v16);
    goto LABEL_20;
  }
  return result;
}

llvm::MachineBasicBlock *llvm::MachineBasicBlock::MachineBasicBlock(llvm::MachineBasicBlock *this, llvm::MachineFunction *a2, const llvm::BasicBlock *a3)
{
  uint64_t v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a3;
  *((_DWORD *)this + 6) = -1;
  *((_QWORD *)this + 6) = ((unint64_t)this + 48) | 4;
  *((_QWORD *)this + 7) = (char *)this + 48;
  *((_BYTE *)this + 144) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 121) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_BYTE *)this + 176) = 0;
  *(_DWORD *)((char *)this + 187) = 0;
  *(_QWORD *)((char *)this + 180) = 0;
  *((_QWORD *)this + 24) = 0;
  *(_DWORD *)((char *)this + 199) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = this;
  if (a3)
  {
    *((_QWORD *)this + 17) = llvm::BasicBlock::getIrrLoopHeaderWeight(a3);
    *((_QWORD *)this + 18) = v4;
  }
  return this;
}

{
  uint64_t v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a3;
  *((_DWORD *)this + 6) = -1;
  *((_QWORD *)this + 6) = ((unint64_t)this + 48) | 4;
  *((_QWORD *)this + 7) = (char *)this + 48;
  *((_BYTE *)this + 144) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 121) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_BYTE *)this + 176) = 0;
  *(_DWORD *)((char *)this + 187) = 0;
  *(_QWORD *)((char *)this + 180) = 0;
  *((_QWORD *)this + 24) = 0;
  *(_DWORD *)((char *)this + 199) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = this;
  if (a3)
  {
    *((_QWORD *)this + 17) = llvm::BasicBlock::getIrrLoopHeaderWeight(a3);
    *((_QWORD *)this + 18) = v4;
  }
  return this;
}

void llvm::MachineBasicBlock::~MachineBasicBlock(llvm::MachineBasicBlock *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  llvm::MachineBasicBlock *i;

  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 15) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  for (i = (llvm::MachineBasicBlock *)*((_QWORD *)this + 7);
        (llvm::MachineBasicBlock *)((char *)this + 48) != i;
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  llvm::MachineBasicBlock *i;

  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 14);
  if (v3)
  {
    *((_QWORD *)this + 15) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  for (i = (llvm::MachineBasicBlock *)*((_QWORD *)this + 7);
        (llvm::MachineBasicBlock *)((char *)this + 48) != i;
}

unint64_t llvm::MachineBasicBlock::getSymbol(llvm::MachineBasicBlock *this)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  void *v7;
  int v8;
  char v11;
  void **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t ***v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  uint64_t ***v27;
  char *v28;
  uint64_t **v29;
  uint64_t **v30;
  void **v31;
  void *__p[2];
  const char *v33;
  __int16 v34;
  void *v35;
  __int128 v36;
  _BYTE v37[8];
  __int16 v38;
  _QWORD v39[2];
  const char *v40;
  __int16 v41;
  _QWORD v42[2];
  void *v43;
  uint64_t v44;
  __int16 v45;

  result = *((_QWORD *)this + 26);
  if (!result)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *(_QWORD *)(v3 + 24);
    v5 = *(_DWORD *)(v3 + 640);
    v6 = v5 > 3 || v5 == 2;
    if (v6 || !*((_BYTE *)this + 200))
    {
      *(_OWORD *)__p = *(_OWORD *)(*(_QWORD *)(v4 + 152) + 104);
      v33 = "BB";
      v34 = 773;
      v15 = *(unsigned int *)(v3 + 336);
      v35 = __p;
      *((_QWORD *)&v36 + 1) = v15;
      v38 = 2050;
      v39[0] = &v35;
      v40 = "_";
      v41 = 770;
      v16 = (void *)*((unsigned int *)this + 6);
      v42[0] = v39;
      v43 = v16;
      v45 = 2306;
      result = llvm::MCContext::getOrCreateSymbol(v4, (uint64_t)v42);
      *((_QWORD *)this + 26) = result;
      return result;
    }
    v35 = v37;
    v36 = xmmword_1C85FB1D0;
    v8 = *((_DWORD *)this + 48);
    v7 = (void *)*((unsigned int *)this + 49);
    if (v8 == (_DWORD)llvm::MBBSectionID::ColdSectionID && (_DWORD)v7 == HIDWORD(llvm::MBBSectionID::ColdSectionID))
    {
      qmemcpy(v37, ".cold", 5);
      v17 = 5;
    }
    else
    {
      if (v8 != (_DWORD)llvm::MBBSectionID::ExceptionSectionID
        || (_DWORD)v7 != HIDWORD(llvm::MBBSectionID::ExceptionSectionID))
      {
        v39[0] = v37;
        v39[1] = 0;
        v40 = ".__part.";
        v41 = 773;
        v42[0] = v39;
        v43 = v7;
        v45 = 2050;
        llvm::Twine::str((llvm::Twine *)v42, __p);
        v11 = HIBYTE(v33);
        if (SHIBYTE(v33) >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        if (SHIBYTE(v33) >= 0)
          v13 = HIBYTE(v33) & 0x7F;
        else
          v13 = (unint64_t)__p[1];
        *(_QWORD *)&v36 = 0;
        if (*((_QWORD *)&v36 + 1) < v13)
        {
          v31 = v12;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v35, v37, v13, 1);
          v12 = v31;
          v14 = v36;
        }
        else
        {
          v14 = 0;
          if (!v13)
            goto LABEL_24;
        }
        memcpy((char *)v35 + v14, v12, v13);
        v14 = v36;
        v11 = HIBYTE(v33);
LABEL_24:
        *(_QWORD *)&v36 = v14 + v13;
        if (v11 < 0)
          operator delete(__p[0]);
LABEL_30:
        v18 = *(uint64_t ****)v3;
        if ((*(_BYTE *)(*(_QWORD *)v3 + 23) & 0x10) == 0)
        {
          v29 = 0;
          v28 = &byte_1C871356D;
LABEL_39:
          v42[0] = v28;
          v42[1] = v29;
          v43 = v35;
          v44 = v36;
          v45 = 1285;
          result = llvm::MCContext::getOrCreateSymbol(v4, (uint64_t)v42);
          *((_QWORD *)this + 26) = result;
          if (v35 != v37)
          {
            free(v35);
            return *((_QWORD *)this + 26);
          }
          return result;
        }
        v19 = ***v18;
        v20 = *(_QWORD *)(v19 + 152);
        v21 = *(unsigned int *)(v19 + 168);
        if ((_DWORD)v21)
        {
          LODWORD(v22) = (v21 - 1) & ((v18 >> 4) ^ (v18 >> 9));
          v23 = (uint64_t ****)(v20 + 16 * v22);
          v24 = *v23;
          if (*v23 == v18)
          {
LABEL_38:
            v27 = v23[1];
            v30 = *v27;
            v28 = (char *)(v27 + 2);
            v29 = v30;
            goto LABEL_39;
          }
          v25 = 1;
          while (v24 != (uint64_t ***)-4096)
          {
            v26 = v22 + v25++;
            v22 = v26 & (v21 - 1);
            v24 = *(uint64_t ****)(v20 + 16 * v22);
            if (v24 == v18)
            {
              v23 = (uint64_t ****)(v20 + 16 * v22);
              goto LABEL_38;
            }
          }
        }
        v23 = (uint64_t ****)(v20 + 16 * v21);
        goto LABEL_38;
      }
      qmemcpy(v37, ".eh", 3);
      v17 = 3;
    }
    *(_QWORD *)&v36 = v17;
    goto LABEL_30;
  }
  return result;
}

unint64_t llvm::MachineBasicBlock::getEHCatchretSymbol(llvm::MachineBasicBlock *this)
{
  unint64_t result;
  uint64_t v3;
  _DWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;
  void *v14;
  __int128 v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  result = *((_QWORD *)this + 27);
  if (!result)
  {
    v3 = *((_QWORD *)this + 4);
    v14 = v16;
    v15 = xmmword_1C85F20B0;
    sub_1C613932C((uint64_t)v9, (uint64_t)&v14);
    v4 = v12;
    if (v11 - (unint64_t)v12 > 6)
    {
      *(_DWORD *)((char *)v12 + 3) = 1601332071;
      *v4 = 1734894884;
      v12 = (_DWORD *)((char *)v12 + 7);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v9, "$ehgcr_", 7uLL);
    }
    sub_1C5E21910((llvm::raw_ostream *)v9, *(unsigned int *)(v3 + 336), 0, 0, 0);
    v5 = v12;
    if ((unint64_t)v12 >= v11)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v9, 95);
    }
    else
    {
      v12 = (_DWORD *)((char *)v12 + 1);
      *v5 = 95;
    }
    v6 = *((int *)this + 6);
    if ((v6 & 0x80000000) != 0)
    {
      v6 = -(uint64_t)v6;
      v7 = 1;
    }
    else
    {
      v7 = 0;
    }
    sub_1C5E21910((llvm::raw_ostream *)v9, v6, 0, 0, v7);
    v9[0] = off_1E81A6E70;
    if (v13 == 1 && v10)
      MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
    v8 = *(_QWORD *)(v3 + 24);
    LOWORD(v12) = 261;
    v9[0] = v14;
    v9[1] = v15;
    result = llvm::MCContext::getOrCreateSymbol(v8, (uint64_t)v9);
    *((_QWORD *)this + 27) = result;
    if (v14 != v16)
    {
      free(v14);
      return *((_QWORD *)this + 27);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, llvm::MachineBasicBlock *a2)
{
  llvm::MachineBasicBlock::print(a2, a1, 0, 1);
  return a1;
}

uint64_t llvm::printMBBReference@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  a2[3] = a2;
  *a2 = &off_1E8143F38;
  a2[1] = result;
  return result;
}

void llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD **)(a2 + 32);
  v5 = (_QWORD *)v3[14];
  v4 = v3[15];
  if ((unint64_t)v5 >= v4)
  {
    v9 = (_QWORD *)v3[13];
    v10 = v5 - v9;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v12 = v4 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_1C4764EE4();
      v14 = (char *)operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *(_QWORD *)v15 = a2;
    v6 = v15 + 8;
    if (v5 != v9)
    {
      do
      {
        v16 = *--v5;
        *((_QWORD *)v15 - 1) = v16;
        v15 -= 8;
      }
      while (v5 != v9);
      v5 = (_QWORD *)v3[13];
    }
    v3[13] = v15;
    v3[14] = v6;
    v3[15] = &v14[8 * v13];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  v3[14] = v6;
  *(_DWORD *)(a2 + 24) = (((unint64_t)v6 - v3[13]) >> 3) - 1;
  v7 = a2 + 48;
  v8 = *(_QWORD *)(a2 + 56);
  if (v8 != v7)
  {
    v17 = v3[5];
    do
    {
      llvm::MachineInstr::addRegOperandsToUseLists(v8, v17);
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != v7);
  }
}

void llvm::ilist_callback_traits<llvm::MachineBasicBlock>::removeNodeFromList(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 104) + 8 * *(unsigned int *)(a2 + 24)) = 0;
  *(_DWORD *)(a2 + 24) = -1;
}

uint64_t llvm::ilist_traits<llvm::MachineInstr>::addNodeToList(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  *(_QWORD *)(a2 + 24) = *a1;
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v4)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v7 = *(_QWORD *)(v3 + 40);
    v8 = 32 * v4;
    do
    {
      if (!*(_BYTE *)v6)
      {
        v9 = *(unsigned int *)(v6 + 4);
        if ((int)v9 >= 0)
          v10 = (uint64_t *)(*(_QWORD *)(v7 + 272) + 8 * v9);
        else
          v10 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
        v11 = *v10;
        if (*v10)
        {
          v12 = *(_QWORD *)(v11 + 16);
          *(_QWORD *)(v11 + 16) = v6;
          *(_QWORD *)(v6 + 16) = v12;
          if ((*(_BYTE *)(v6 + 3) & 1) != 0)
          {
            *(_QWORD *)(v6 + 24) = v11;
          }
          else
          {
            *(_QWORD *)(v6 + 24) = 0;
            v10 = (uint64_t *)(v12 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v6 + 16) = v6;
          *(_QWORD *)(v6 + 24) = 0;
        }
        *v10 = v6;
      }
      v6 += 32;
      v8 -= 32;
    }
    while (v8);
  }
  result = *(_QWORD *)(v3 + 728);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void llvm::ilist_traits<llvm::MachineInstr>::removeNodeFromList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 728);
    if (v4)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2);
    v5 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)(a2 + 32);
      v7 = *(_QWORD *)(v3 + 40);
      v8 = 32 * v5;
      do
      {
        if (!*(_BYTE *)v6)
        {
          v9 = *(unsigned int *)(v6 + 4);
          if ((v9 & 0x80000000) != 0)
            v10 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
          else
            v10 = (uint64_t *)(*(_QWORD *)(v7 + 272) + 8 * v9);
          v11 = *v10;
          v13 = *(_QWORD *)(v6 + 16);
          v12 = *(_QWORD *)(v6 + 24);
          if (v6 != *v10)
            v10 = (uint64_t *)(v13 + 24);
          *v10 = v12;
          if (v12)
            v14 = v12;
          else
            v14 = v11;
          *(_QWORD *)(v14 + 16) = v13;
          *(_QWORD *)(v6 + 16) = 0;
          *(_QWORD *)(v6 + 24) = 0;
        }
        v6 += 32;
        v8 -= 32;
      }
      while (v8);
    }
  }
  *(_QWORD *)(a2 + 24) = 0;
}

uint64_t *llvm::ilist_traits<llvm::MachineInstr>::transferNodesFromList(uint64_t *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result != a2 && a3 != a4)
  {
    v4 = *result;
    do
    {
      *(_QWORD *)(a3 + 24) = v4;
      a3 = *(_QWORD *)(a3 + 8);
    }
    while (a3 != a4);
  }
  return result;
}

void llvm::ilist_traits<llvm::MachineInstr>::deleteNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD **)(a2 + 32);
  if (v4)
  {
    v5 = *(unsigned __int8 *)(a2 + 47);
    v6 = (uint64_t *)(v3 + 232);
    if (*(_DWORD *)(v3 + 240) <= v5)
      sub_1C515FA1C(v3 + 232, v5 + 1);
    v7 = *v6;
    *v4 = *(_QWORD *)(*v6 + 8 * v5);
    *(_QWORD *)(v7 + 8 * v5) = v4;
  }
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 224);
  *(_QWORD *)(v3 + 224) = a2;
}

uint64_t llvm::MachineBasicBlock::getFirstNonPHI(llvm::MachineBasicBlock *this)
{
  uint64_t result;
  uint64_t i;

  result = (uint64_t)this + 48;
  for (i = *((_QWORD *)this + 7); i != result; i = *(_QWORD *)(i + 8))
  {
    if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
      return i;
  }
  return result;
}

uint64_t llvm::MachineBasicBlock::SkipPHIsAndLabels(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v5 = a1 + 48;
  if (v5 != a2)
  {
    v6 = v4;
    while (1)
    {
      v7 = **(unsigned __int16 **)(a2 + 16);
      if (**(_WORD **)(a2 + 16))
      {
        if (v7 != 69
          && (v7 - 3) >= 4
          && !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1144))(v6, a2))
        {
          break;
        }
      }
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        while ((*(_WORD *)(a2 + 44) & 8) != 0)
          a2 = *(_QWORD *)(a2 + 8);
      }
      a2 = *(_QWORD *)(a2 + 8);
      if (a2 == v5)
        return v5;
    }
  }
  return a2;
}

uint64_t llvm::MachineBasicBlock::SkipPHIsLabelsAndDebug(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v7 = a1 + 48;
  if (v7 != a2)
  {
    v8 = v6;
    while (1)
    {
      v9 = **(unsigned __int16 **)(a2 + 16);
      v10 = v9 > 0x11 || ((1 << v9) & 0x3E079) == 0;
      if (v10
        && v9 != 69
        && (v9 != 23 || (a3 & 1) == 0)
        && !(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 1144))(v8, a2))
      {
        break;
      }
      if ((*(_BYTE *)a2 & 4) == 0)
      {
        while ((*(_WORD *)(a2 + 44) & 8) != 0)
          a2 = *(_QWORD *)(a2 + 8);
      }
      a2 = *(_QWORD *)(a2 + 8);
      if (a2 == v7)
        return v7;
    }
  }
  return a2;
}

unint64_t llvm::MachineBasicBlock::getFirstTerminator(llvm::MachineBasicBlock *this)
{
  unint64_t result;
  unint64_t v3;
  unint64_t v4;
  __int16 v5;
  int v6;
  int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  BOOL v10;
  __int16 v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;

  result = (unint64_t)this + 48;
  v3 = *((_QWORD *)this + 7);
  if (result != v3)
  {
    v4 = result;
    do
    {
      v4 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
      if (v4 && (*(_BYTE *)v4 & 4) != 0)
      {
        v5 = *(_WORD *)(v4 + 44);
      }
      else
      {
        while (1)
        {
          v5 = *(_WORD *)(v4 + 44);
          if ((v5 & 4) == 0)
            break;
          v4 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v6 = v5 & 0xC;
      v7 = v5 & 4;
      v8 = *(unsigned __int16 **)(v4 + 16);
      v9 = *((_QWORD *)v8 + 1);
      if (v6)
        v10 = v7 == 0;
      else
        v10 = 0;
      if (v10)
      {
        v14 = v4;
        if ((v9 & 0x200) == 0)
        {
          while ((*(_WORD *)(v14 + 44) & 8) != 0)
          {
            v14 = *(_QWORD *)(v14 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v14 + 16) + 9) & 2) != 0)
              goto LABEL_12;
          }
LABEL_11:
          if (*v8 - 13 > 4)
          {
            v3 = v4;
            break;
          }
        }
      }
      else if ((v9 & 0x200) == 0)
      {
        goto LABEL_11;
      }
LABEL_12:
      ;
    }
    while (v4 != v3);
  }
  while (v3 != result)
  {
    v11 = *(_WORD *)(v3 + 44);
    v12 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8);
    if ((v11 & 0xC) != 0 && (v11 & 4) == 0)
    {
      v15 = v3;
      if ((v12 & 0x200) != 0)
        return v3;
      while ((*(_WORD *)(v15 + 44) & 8) != 0)
      {
        v15 = *(_QWORD *)(v15 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v15 + 16) + 9) & 2) != 0)
          return v3;
      }
    }
    else if ((v12 & 0x200) != 0)
    {
      return v3;
    }
    if ((v11 & 8) != 0 && (*(_QWORD *)v3 & 4) == 0)
    {
      do
        v3 = *(_QWORD *)(v3 + 8);
      while ((*(_WORD *)(v3 + 44) & 8) != 0);
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  return result;
}

uint64_t llvm::MachineBasicBlock::getFirstInstrTerminator(llvm::MachineBasicBlock *this)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;

  result = (uint64_t)this + 48;
  v3 = *((_QWORD *)this + 7);
  if (result != v3)
  {
    v4 = result;
    do
    {
      v4 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
      v5 = *(unsigned __int16 **)(v4 + 16);
      v6 = *((_QWORD *)v5 + 1);
      if ((*(_WORD *)(v4 + 44) & 0xC) != 0 && (*(_WORD *)(v4 + 44) & 4) == 0)
      {
        if ((v6 & 0x200) == 0)
        {
          v10 = v4;
          while ((*(_WORD *)(v10 + 44) & 8) != 0)
          {
            v10 = *(_QWORD *)(v10 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v10 + 16) + 9) & 2) != 0)
              goto LABEL_8;
          }
LABEL_10:
          if (*v5 - 13 > 4)
            goto LABEL_11;
        }
      }
      else if ((v6 & 0x200) == 0)
      {
        goto LABEL_10;
      }
LABEL_8:
      ;
    }
    while (v3 != v4);
  }
  v4 = v3;
LABEL_11:
  while (v4 != result)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
    if ((*(_WORD *)(v4 + 44) & 0xC) != 0 && (*(_WORD *)(v4 + 44) & 4) == 0)
    {
      v11 = v4;
      if ((v8 & 0x200) != 0)
        return v4;
      while ((*(_WORD *)(v11 + 44) & 8) != 0)
      {
        v11 = *(_QWORD *)(v11 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v11 + 16) + 9) & 2) != 0)
          return v4;
      }
    }
    else if ((v8 & 0x200) != 0)
    {
      return v4;
    }
    v4 = *(_QWORD *)(v4 + 8);
  }
  return result;
}

char *llvm::MachineBasicBlock::getFirstNonDebugInstr(llvm::MachineBasicBlock *this, int a2)
{
  char *v2;
  char *result;
  int v4;
  unsigned int v5;
  int v6;

  v2 = (char *)this + 48;
  result = (char *)*((_QWORD *)this + 7);
  if (result != v2)
  {
    while (1)
    {
      v4 = **((unsigned __int16 **)result + 2);
      v5 = v4 - 13;
      v6 = v4 == 23 ? a2 : 0;
      if (v5 >= 5 && v6 == 0)
        break;
      if ((*result & 4) == 0)
      {
        while ((*((_WORD *)result + 22) & 8) != 0)
          result = (char *)*((_QWORD *)result + 1);
      }
      result = (char *)*((_QWORD *)result + 1);
      if (result == v2)
        return v2;
    }
  }
  return result;
}

uint64_t llvm::MachineBasicBlock::getLastNonDebugInstr(llvm::MachineBasicBlock *this, char a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  int v6;
  char v7;

  result = (uint64_t)this + 48;
  v4 = *((_QWORD *)this + 7);
  if (result == v4)
    return v4;
  v5 = result;
  while (1)
  {
    v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    v6 = **(unsigned __int16 **)(v5 + 16);
    if ((v6 - 13) >= 5)
    {
      v7 = v6 == 23 ? a2 : 0;
      if ((v7 & 1) == 0 && (*(_WORD *)(v5 + 44) & 4) == 0)
        break;
    }
    if (v4 == v5)
      return result;
  }
  return v5;
}

BOOL llvm::MachineBasicBlock::isLegalToHoistInto(llvm::MachineBasicBlock *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  if ((sub_1C498FBAC((uint64_t)this) & 1) == 0)
  {
    v3 = *((_QWORD *)this + 11);
    v2 = *((_QWORD *)this + 12);
    if (v3 == v2)
      return 1;
    v5 = *((_QWORD *)this + 11);
    while (!*(_BYTE *)(*(_QWORD *)v5 + 184))
    {
      v5 += 8;
      if (v5 == v2)
      {
        v6 = v3 + 8;
        do
        {
          result = *(_BYTE *)(*(_QWORD *)(v6 - 8) + 202) == 0;
          if (*(_BYTE *)(*(_QWORD *)(v6 - 8) + 202))
            v7 = 1;
          else
            v7 = v6 == v2;
          v6 += 8;
        }
        while (!v7);
        return result;
      }
    }
  }
  return 0;
}

void llvm::MachineBasicBlock::getFullName(llvm::MachineBasicBlock *this@<X0>, std::string *a2@<X8>)
{
  uint64_t ****v4;
  uint64_t ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ****v10;
  uint64_t ***v11;
  int v12;
  int v13;
  uint64_t ***v14;
  char *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t ***v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  const char *v27;
  void **v28;
  std::string::size_type v29;
  uint64_t ***v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  void *__p[2];
  char v35;
  _QWORD v36[2];
  const char *v37;
  __int16 v38;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = (uint64_t ****)*((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *v4;
    if ((*((_BYTE *)v5 + 23) & 0x10) == 0)
    {
      v16 = 0;
      v15 = &byte_1C871356D;
      goto LABEL_11;
    }
    v6 = ***v5;
    v7 = *(_QWORD *)(v6 + 152);
    v8 = *(unsigned int *)(v6 + 168);
    if ((_DWORD)v8)
    {
      LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
      v10 = (uint64_t ****)(v7 + 16 * v9);
      v11 = *v10;
      if (*v10 == v5)
      {
LABEL_10:
        v14 = v10[1];
        v17 = *v14;
        v15 = (char *)(v14 + 2);
        v16 = v17;
LABEL_11:
        v38 = 773;
        v36[0] = v15;
        v36[1] = v16;
        v37 = ":";
        llvm::Twine::str((llvm::Twine *)v36, a2);
        goto LABEL_12;
      }
      v12 = 1;
      while (v11 != (uint64_t ***)-4096)
      {
        v13 = v9 + v12++;
        v9 = v13 & (v8 - 1);
        v11 = *(uint64_t ****)(v7 + 16 * v9);
        if (v11 == v5)
        {
          v10 = (uint64_t ****)(v7 + 16 * v9);
          goto LABEL_10;
        }
      }
    }
    v10 = (uint64_t ****)(v7 + 16 * v8);
    goto LABEL_10;
  }
LABEL_12:
  v18 = (uint64_t ***)*((_QWORD *)this + 2);
  if (v18)
  {
    if ((*((_BYTE *)v18 + 23) & 0x10) == 0)
    {
      v32 = 0;
      v31 = &byte_1C871356D;
      goto LABEL_30;
    }
    v19 = ***v18;
    v20 = *(_QWORD *)(v19 + 152);
    v21 = *(unsigned int *)(v19 + 168);
    if ((_DWORD)v21)
    {
      LODWORD(v22) = (v21 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v23 = (uint64_t ****)(v20 + 16 * v22);
      v24 = *v23;
      if (*v23 == v18)
      {
LABEL_29:
        v30 = v23[1];
        v33 = (std::string::size_type)*v30;
        v31 = (const std::string::value_type *)(v30 + 2);
        v32 = v33;
LABEL_30:
        std::string::append(a2, v31, v32);
        return;
      }
      v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == v18)
        {
          v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_29;
        }
      }
    }
    v23 = (uint64_t ****)(v20 + 16 * v21);
    goto LABEL_29;
  }
  v27 = (const char *)*((unsigned int *)this + 6);
  v36[0] = "BB";
  v37 = v27;
  v38 = 2307;
  llvm::Twine::str((llvm::Twine *)v36, __p);
  if (v35 >= 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  if (v35 >= 0)
    v29 = v35 & 0x7F;
  else
    v29 = (std::string::size_type)__p[1];
  std::string::append(a2, (const std::string::value_type *)v28, v29);
  if (v35 < 0)
    operator delete(__p[0]);
}

llvm::raw_ostream *llvm::MachineBasicBlock::print(llvm::raw_ostream *this, llvm::raw_ostream *a2, llvm::SlotTracker **a3, const llvm::SlotIndexes *a4, int a5)
{
  uint64_t v6;
  _WORD *v10;
  uint64_t v11;
  const llvm::TargetInstrInfo *v12;
  int v13;
  _BYTE *v14;
  void *v15;
  uint64_t v16;
  _OWORD *v17;
  llvm::MachineBasicBlock **v18;
  llvm::MachineBasicBlock **v19;
  char v20;
  llvm::MachineBasicBlock *v21;
  size_t v22;
  _WORD *v23;
  const char *v24;
  uint64_t (**v25)(void);
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  llvm::MachineBasicBlock **v29;
  uint64_t v30;
  char v31;
  llvm::MachineBasicBlock **v32;
  size_t v33;
  _WORD *v34;
  const char *v35;
  llvm::MachineBasicBlock *v36;
  uint64_t (**v37)(void);
  _BYTE *v38;
  unsigned int SuccProbability;
  _BYTE *v40;
  _WORD *v41;
  llvm::MachineBasicBlock **v42;
  uint64_t v43;
  char v44;
  llvm::MachineBasicBlock **v45;
  unsigned int v46;
  size_t v47;
  _WORD *v48;
  const char *v49;
  llvm::MachineBasicBlock *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t (**v53)(void);
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  char v59;
  size_t v60;
  _WORD *v61;
  const char *v62;
  int v63;
  _DWORD *v64;
  uint64_t (**v65)(void);
  uint64_t v66;
  const char *v67;
  uint64_t (**v68)(void);
  _BYTE *v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  __int16 v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  BOOL v84;
  int v85;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  int v91;
  _BYTE *v92;
  _WORD *v93;
  _WORD *v94;
  _BYTE *v95;
  _WORD *v96;
  _BYTE *v97;
  void *v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  llvm::MachineBasicBlock *v103;
  uint64_t (**v104)(llvm::format_object_base *__hidden);
  const char *v105;
  double v106;
  uint64_t (**v107)();
  const char *v108;
  uint64_t v109;
  uint64_t (***v110)();
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v103 = this;
  v6 = *((_QWORD *)this + 4);
  if (!v6)
  {
    v15 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 0x3FuLL)
    {
      qmemcpy(v15, "Can't print out MachineBasicBlock because parent MachineFunction", 64);
      v16 = *((_QWORD *)a2 + 4) + 64;
      *((_QWORD *)a2 + 4) = v16;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, "Can't print out MachineBasicBlock because parent MachineFunction", 0x40uLL);
      v16 = *((_QWORD *)a2 + 4);
    }
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v16) <= 8)
      return llvm::raw_ostream::write(a2, " is null\n", 9uLL);
    *(_BYTE *)(v16 + 8) = 10;
    *(_QWORD *)v16 = *(_QWORD *)" is null\n";
    *((_QWORD *)a2 + 4) += 9;
    return this;
  }
  if (a4 && byte_1ED7F9508)
  {
    v107 = *(uint64_t (***)())(*((_QWORD *)a4 + 49) + 16 * *((unsigned int *)this + 6));
    llvm::SlotIndex::print((llvm::SlotIndex *)&v107, a2);
    v100 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v100 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 9);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v100 + 1;
      *v100 = 9;
    }
  }
  llvm::MachineBasicBlock::printName(v103, a2, 3, a3);
  v10 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 2618;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, ":\n", 2uLL);
  }
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 176))(*(_QWORD *)(v6 + 16));
  v101 = *(_QWORD *)(v6 + 40);
  v102 = v11;
  this = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v103 + 4) + 16) + 104))(*(_QWORD *)(*((_QWORD *)v103 + 4) + 16));
  v12 = this;
  if (*((_QWORD *)v103 + 8) == *((_QWORD *)v103 + 9))
    v13 = 0;
  else
    v13 = a5;
  if (v13 == 1)
  {
    if (a4)
    {
      v14 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v14 >= *((_QWORD *)a2 + 3))
      {
        this = llvm::raw_ostream::write(a2, 9);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v14 + 1;
        *v14 = 9;
      }
    }
    v17 = (_OWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v17 > 0xFuLL)
    {
      *v17 = *(_OWORD *)"; predecessors: ";
      *((_QWORD *)a2 + 4) += 16;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, "; predecessors: ", 0x10uLL);
    }
    v18 = (llvm::MachineBasicBlock **)*((_QWORD *)v103 + 8);
    v19 = (llvm::MachineBasicBlock **)*((_QWORD *)v103 + 9);
    if (v18 != v19)
    {
      v20 = 0;
      while (1)
      {
        v21 = *v18;
        v22 = (v20 & 1) != 0 ? 2 : 0;
        v23 = (_WORD *)*((_QWORD *)a2 + 4);
        if (v22 <= *((_QWORD *)a2 + 3) - (_QWORD)v23)
        {
          if ((v20 & 1) != 0)
          {
            *v23 = 8236;
            *((_QWORD *)a2 + 4) += 2;
          }
        }
        else
        {
          v24 = (v20 & 1) != 0 ? ", " : 0;
          llvm::raw_ostream::write(a2, v24, v22);
        }
        v110 = &v107;
        v107 = &off_1E8143F38;
        v108 = (const char *)v21;
        llvm::MachineBasicBlock::printAsOperand(v21, a2);
        this = (llvm::raw_ostream *)v110;
        if (v110 == &v107)
          break;
        if (v110)
        {
          v25 = *v110 + 5;
LABEL_36:
          this = (llvm::raw_ostream *)(*v25)();
        }
        ++v18;
        v20 = 1;
        if (v18 == v19)
          goto LABEL_38;
      }
      v25 = v107 + 4;
      goto LABEL_36;
    }
LABEL_38:
    v26 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v26 >= *((_QWORD *)a2 + 3))
    {
      this = llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v26 + 1;
      *v26 = 10;
    }
  }
  if (*((_QWORD *)v103 + 11) != *((_QWORD *)v103 + 12))
  {
    if (a4)
    {
      v27 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v27 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 9);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v27 + 1;
        *v27 = 9;
      }
    }
    this = llvm::raw_ostream::write(a2, "                                                                                ", 2uLL);
    v28 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v28) > 0xB)
    {
      *(_DWORD *)(v28 + 8) = 540701554;
      *(_QWORD *)v28 = *(_QWORD *)"successors: ";
      *((_QWORD *)a2 + 4) += 12;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, "successors: ", 0xCuLL);
    }
    v30 = *((_QWORD *)v103 + 11);
    v29 = (llvm::MachineBasicBlock **)*((_QWORD *)v103 + 12);
    if ((llvm::MachineBasicBlock **)v30 != v29)
    {
      v31 = 0;
      v32 = (llvm::MachineBasicBlock **)*((_QWORD *)v103 + 11);
      while (1)
      {
        v33 = (v31 & 1) != 0 ? 2 : 0;
        v34 = (_WORD *)*((_QWORD *)a2 + 4);
        if (v33 <= *((_QWORD *)a2 + 3) - (_QWORD)v34)
        {
          if ((v31 & 1) != 0)
          {
            *v34 = 8236;
            *((_QWORD *)a2 + 4) += 2;
          }
        }
        else
        {
          v35 = (v31 & 1) != 0 ? ", " : 0;
          llvm::raw_ostream::write(a2, v35, v33);
        }
        v36 = *v32;
        v110 = &v107;
        v107 = &off_1E8143F38;
        v108 = (const char *)v36;
        llvm::MachineBasicBlock::printAsOperand(v36, a2);
        this = (llvm::raw_ostream *)v110;
        if (v110 == &v107)
          break;
        if (v110)
        {
          v37 = *v110 + 5;
LABEL_64:
          this = (llvm::raw_ostream *)(*v37)();
        }
        if (*((_QWORD *)v103 + 14) != *((_QWORD *)v103 + 15))
        {
          v38 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v38 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 40);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v38 + 1;
            *v38 = 40;
          }
          SuccProbability = llvm::MachineBasicBlock::getSuccProbability(v103, v30);
          v107 = (uint64_t (**)())&off_1E8132728;
          v108 = "0x%08x";
          v109 = SuccProbability;
          this = llvm::raw_ostream::operator<<(a2, (uint64_t)&v107);
          v40 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v40 >= *((_QWORD *)a2 + 3))
          {
            this = llvm::raw_ostream::write(a2, 41);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v40 + 1;
            *v40 = 41;
          }
        }
        ++v32;
        v30 += 8;
        v31 = 1;
        if (v32 == v29)
          goto LABEL_73;
      }
      v37 = v107 + 4;
      goto LABEL_64;
    }
LABEL_73:
    if (*((_QWORD *)v103 + 14) != *((_QWORD *)v103 + 15) && (a5 & 1) != 0)
    {
      v41 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v41 > 1uLL)
      {
        *v41 = 8251;
        *((_QWORD *)a2 + 4) += 2;
      }
      else
      {
        this = llvm::raw_ostream::write(a2, "; ", 2uLL);
      }
      v43 = *((_QWORD *)v103 + 11);
      v42 = (llvm::MachineBasicBlock **)*((_QWORD *)v103 + 12);
      if ((llvm::MachineBasicBlock **)v43 != v42)
      {
        v44 = 0;
        v45 = (llvm::MachineBasicBlock **)*((_QWORD *)v103 + 11);
        while (1)
        {
          v46 = llvm::MachineBasicBlock::getSuccProbability(v103, v43);
          v47 = (v44 & 1) != 0 ? 2 : 0;
          v48 = (_WORD *)*((_QWORD *)a2 + 4);
          if (v47 <= *((_QWORD *)a2 + 3) - (_QWORD)v48)
          {
            if ((v44 & 1) != 0)
            {
              *v48 = 8236;
              *((_QWORD *)a2 + 4) += 2;
            }
          }
          else
          {
            v49 = (v44 & 1) != 0 ? ", " : 0;
            llvm::raw_ostream::write(a2, v49, v47);
          }
          v50 = *v45;
          v110 = &v107;
          v107 = &off_1E8143F38;
          v108 = (const char *)v50;
          llvm::MachineBasicBlock::printAsOperand(v50, a2);
          v51 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v51 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 40);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v51 + 1;
            *v51 = 40;
          }
          v104 = &off_1E7FA8D00;
          v105 = "%.2f%%";
          v106 = rint((double)v46 * 4.65661287e-10 * 100.0 * 100.0) / 100.0;
          llvm::raw_ostream::operator<<(a2, (uint64_t)&v104);
          v52 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v52 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 41);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v52 + 1;
            *v52 = 41;
          }
          this = (llvm::raw_ostream *)v110;
          if (v110 == &v107)
            break;
          if (v110)
          {
            v53 = *v110 + 5;
LABEL_99:
            this = (llvm::raw_ostream *)(*v53)();
          }
          ++v45;
          v43 += 8;
          v44 = 1;
          if (v45 == v42)
            goto LABEL_101;
        }
        v53 = v107 + 4;
        goto LABEL_99;
      }
    }
LABEL_101:
    v54 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v54 >= *((_QWORD *)a2 + 3))
    {
      this = llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v54 + 1;
      *v54 = 10;
    }
    v13 = 1;
  }
  if (*((_QWORD *)v103 + 19) != *((_QWORD *)v103 + 20) && (**(_BYTE **)(*(_QWORD *)v101 + 360) & 4) != 0)
  {
    if (a4)
    {
      v55 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v55 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 9);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v55 + 1;
        *v55 = 9;
      }
    }
    this = llvm::raw_ostream::write(a2, "                                                                                ", 2uLL);
    v56 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v56) > 8)
    {
      *(_BYTE *)(v56 + 8) = 32;
      *(_QWORD *)v56 = *(_QWORD *)"liveins: ";
      *((_QWORD *)a2 + 4) += 9;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, "liveins: ", 9uLL);
    }
    v57 = (unsigned __int16 *)*((_QWORD *)v103 + 19);
    v58 = (unsigned __int16 *)*((_QWORD *)v103 + 20);
    if (v57 == v58)
      goto LABEL_143;
    v59 = 0;
    while (1)
    {
      if ((v59 & 1) != 0)
        v60 = 2;
      else
        v60 = 0;
      v61 = (_WORD *)*((_QWORD *)a2 + 4);
      if (v60 <= *((_QWORD *)a2 + 3) - (_QWORD)v61)
      {
        if ((v59 & 1) != 0)
        {
          *v61 = 8236;
          *((_QWORD *)a2 + 4) += 2;
        }
      }
      else
      {
        if ((v59 & 1) != 0)
          v62 = ", ";
        else
          v62 = 0;
        llvm::raw_ostream::write(a2, v62, v60);
      }
      v63 = *v57;
      v64 = operator new(0x28uLL);
      *(_QWORD *)v64 = &off_1E814D010;
      v64[2] = v63;
      *((_QWORD *)v64 + 2) = v102;
      v64[6] = 0;
      *((_QWORD *)v64 + 4) = 0;
      v110 = (uint64_t (***)())v64;
      sub_1C52C9630((llvm::raw_ostream *)v64, a2);
      this = (llvm::raw_ostream *)v110;
      if (v110 == &v107)
      {
        v65 = v107 + 4;
      }
      else
      {
        if (!v110)
          goto LABEL_132;
        v65 = *v110 + 5;
      }
      this = (llvm::raw_ostream *)(*v65)();
LABEL_132:
      if (*((_QWORD *)v57 + 1) != -1)
      {
        v66 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v66) > 2)
        {
          *(_BYTE *)(v66 + 2) = 120;
          *(_WORD *)v66 = 12346;
          *((_QWORD *)a2 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(a2, ":0x", 3uLL);
        }
        v67 = (const char *)*((_QWORD *)v57 + 1);
        v110 = &v107;
        v107 = &off_1E81433A0;
        v108 = v67;
        v104 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8133270;
        v105 = "%016llX";
        v106 = *(double *)&v67;
        llvm::raw_ostream::operator<<(a2, (uint64_t)&v104);
        this = (llvm::raw_ostream *)v110;
        if (v110 == &v107)
        {
          v68 = v107 + 4;
          goto LABEL_139;
        }
        if (v110)
        {
          v68 = *v110 + 5;
LABEL_139:
          this = (llvm::raw_ostream *)(*v68)();
        }
      }
      v57 += 8;
      v59 = 1;
      if (v57 == v58)
        goto LABEL_143;
    }
  }
  if (v13)
  {
LABEL_143:
    v69 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v69 >= *((_QWORD *)a2 + 3))
    {
      this = llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v69 + 1;
      *v69 = 10;
    }
  }
  v70 = *((_QWORD *)v103 + 7);
  if ((llvm::MachineBasicBlock *)v70 == (llvm::MachineBasicBlock *)((char *)v103 + 48))
    goto LABEL_197;
  v71 = 0;
  do
  {
    if (!a4 || !byte_1ED7F9508)
      goto LABEL_173;
    v72 = *((unsigned int *)a4 + 96);
    if ((_DWORD)v72)
    {
      v73 = *((_QWORD *)a4 + 46);
      v74 = v72 - 1;
      v75 = (v72 - 1) & ((v70 >> 4) ^ (v70 >> 9));
      v76 = *(_QWORD *)(v73 + 16 * v75);
      if (v70 == v76)
      {
LABEL_155:
        v79 = *(_WORD *)(v70 + 44);
        v80 = v70;
        if ((v79 & 4) != 0)
        {
          do
            v80 = *(_QWORD *)v80 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v80 + 44) & 4) != 0);
        }
        v81 = v70;
        if ((v79 & 8) != 0)
        {
          do
            v81 = *(_QWORD *)(v81 + 8);
          while ((*(_WORD *)(v81 + 44) & 8) != 0);
        }
        v82 = *(_QWORD *)(v81 + 8);
        if (v80 != v82)
        {
          while (1)
          {
            v83 = **(unsigned __int16 **)(v80 + 16);
            v84 = v83 > 0x17;
            v85 = (1 << v83) & 0x83E000;
            if (v84 || v85 == 0)
              break;
            v80 = *(_QWORD *)(v80 + 8);
            if (v80 == v82)
            {
              v80 = v82;
              break;
            }
          }
        }
        LODWORD(v87) = ((v80 >> 4) ^ (v80 >> 9)) & v74;
        v88 = (uint64_t *)(v73 + 16 * v87);
        v89 = *v88;
        if (v80 != *v88)
        {
          v90 = 1;
          while (v89 != -4096)
          {
            v91 = v87 + v90++;
            v87 = v91 & v74;
            v89 = *(_QWORD *)(v73 + 16 * v87);
            if (v80 == v89)
            {
              v88 = (uint64_t *)(v73 + 16 * v87);
              goto LABEL_170;
            }
          }
          v88 = (uint64_t *)(v73 + 16 * v72);
        }
LABEL_170:
        v107 = (uint64_t (**)())v88[1];
        llvm::SlotIndex::print((llvm::SlotIndex *)&v107, a2);
      }
      else
      {
        v77 = 1;
        while (v76 != -4096)
        {
          v78 = v75 + v77++;
          v75 = v78 & v74;
          v76 = *(_QWORD *)(v73 + 16 * v75);
          if (v70 == v76)
            goto LABEL_155;
        }
      }
    }
    v92 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v92 < *((_QWORD *)a2 + 3))
    {
      *((_QWORD *)a2 + 4) = v92 + 1;
      *v92 = 9;
LABEL_173:
      if ((v71 & 1) == 0)
        goto LABEL_179;
      goto LABEL_174;
    }
    llvm::raw_ostream::write(a2, 9);
    if ((v71 & 1) == 0)
      goto LABEL_179;
LABEL_174:
    if ((*(_WORD *)(v70 + 44) & 4) != 0)
    {
      llvm::raw_ostream::write(a2, "                                                                                ", 4uLL);
      this = (llvm::raw_ostream *)llvm::MachineInstr::print((llvm::MachineInstr *)v70, a2, (llvm::ModuleSlotTracker *)a3, a5, 0, 0, 0, v12);
      goto LABEL_182;
    }
    llvm::raw_ostream::write(a2, "                                                                                ", 2uLL);
    v93 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v93 > 1uLL)
    {
      *v93 = 2685;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "}\n", 2uLL);
    }
LABEL_179:
    llvm::raw_ostream::write(a2, "                                                                                ", 2uLL);
    this = (llvm::raw_ostream *)llvm::MachineInstr::print((llvm::MachineInstr *)v70, a2, (llvm::ModuleSlotTracker *)a3, a5, 0, 0, 0, v12);
    v71 = 0;
    if ((*(_WORD *)(v70 + 44) & 8) == 0)
      goto LABEL_183;
    v94 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v94 > 1uLL)
    {
      *v94 = 31520;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " {", 2uLL);
    }
LABEL_182:
    v71 = 1;
LABEL_183:
    v95 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v95 >= *((_QWORD *)a2 + 3))
    {
      this = llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v95 + 1;
      *v95 = 10;
    }
    v70 = *(_QWORD *)(v70 + 8);
  }
  while ((llvm::MachineBasicBlock *)v70 != (llvm::MachineBasicBlock *)((char *)v103 + 48));
  if ((v71 & 1) != 0)
  {
    this = llvm::raw_ostream::write(a2, "                                                                                ", 2uLL);
    v96 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v96 > 1uLL)
    {
      *v96 = 2685;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, "}\n", 2uLL);
    }
  }
LABEL_197:
  if (*((_BYTE *)v103 + 144) && a5)
  {
    if (a4)
    {
      v97 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v97 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 9);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v97 + 1;
        *v97 = 9;
      }
    }
    llvm::raw_ostream::write(a2, "                                                                                ", 2uLL);
    v98 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v98 > 0x21uLL)
    {
      qmemcpy(v98, "; Irreducible loop header weight: ", 34);
      *((_QWORD *)a2 + 4) += 34;
    }
    else
    {
      llvm::raw_ostream::write(a2, "; Irreducible loop header weight: ", 0x22uLL);
    }
    this = sub_1C5E21910(a2, *((_QWORD *)v103 + 17), 0, 0, 0);
    v99 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v99 >= *((_QWORD *)a2 + 3))
    {
      return llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v99 + 1;
      *v99 = 10;
    }
  }
  return this;
}

void llvm::MachineBasicBlock::printName(llvm::MachineBasicBlock *this, llvm::raw_ostream *a2, char a3, llvm::SlotTracker **a4)
{
  uint64_t v8;
  unint64_t v9;
  llvm::raw_ostream *v10;
  int v11;
  uint64_t ***v12;
  _WORD *v13;
  unsigned int LocalSlot;
  void **v15;
  size_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  size_t *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void *v30;
  int v31;
  const char *v32;
  _WORD *v33;
  void *v34;
  const char *v35;
  _WORD *v36;
  uint64_t v37;
  const char *v38;
  _WORD *v39;
  void *v40;
  const char *v41;
  _WORD *v42;
  void *v43;
  const char *v44;
  _WORD *v45;
  uint64_t v46;
  const char *v47;
  _WORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  const char *v52;
  llvm::raw_ostream *v53;
  size_t v54;
  _DWORD *v55;
  const llvm::Function *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  void *__p[2];
  char v62;
  const llvm::Function *v63[2];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::SlotTracker *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 2)
  {
    *(_BYTE *)(v8 + 2) = 46;
    *(_WORD *)v8 = 25186;
    *((_QWORD *)a2 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(a2, "bb.", 3uLL);
  }
  v9 = *((int *)this + 6);
  if ((v9 & 0x80000000) != 0)
  {
    v9 = -(uint64_t)v9;
    v10 = a2;
    v11 = 1;
  }
  else
  {
    v10 = a2;
    v11 = 0;
  }
  sub_1C5E21910(v10, v9, 0, 0, v11);
  if ((a3 & 1) == 0)
    goto LABEL_36;
  v12 = (uint64_t ***)*((_QWORD *)this + 2);
  if (!v12)
    goto LABEL_36;
  if ((*((_BYTE *)v12 + 23) & 0x10) != 0)
  {
    v17 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 46);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v17 + 1;
      *v17 = 46;
    }
    if ((*((_BYTE *)v12 + 23) & 0x10) != 0)
    {
      v18 = ***v12;
      v19 = *(_QWORD *)(v18 + 152);
      v20 = *(unsigned int *)(v18 + 168);
      if ((_DWORD)v20)
      {
        LODWORD(v21) = (v20 - 1) & ((v12 >> 4) ^ (v12 >> 9));
        v22 = (uint64_t ****)(v19 + 16 * v21);
        v23 = *v22;
        if (*v22 == v12)
          goto LABEL_31;
        v24 = 1;
        while (v23 != (uint64_t ***)-4096)
        {
          v25 = v21 + v24++;
          v21 = v25 & (v20 - 1);
          v23 = *(uint64_t ****)(v19 + 16 * v21);
          if (v23 == v12)
          {
            v22 = (uint64_t ****)(v19 + 16 * v21);
            goto LABEL_31;
          }
        }
      }
      v22 = (uint64_t ****)(v19 + 16 * v20);
LABEL_31:
      v26 = (size_t *)v22[1];
      v29 = *v26;
      v27 = v26 + 2;
      v28 = v29;
      v30 = (void *)*((_QWORD *)a2 + 4);
      if (v29 <= *((_QWORD *)a2 + 3) - (_QWORD)v30)
      {
        if (v28)
        {
          memcpy(v30, v27, v28);
          v31 = 0;
          *((_QWORD *)a2 + 4) += v28;
          if ((a3 & 2) == 0)
            goto LABEL_116;
          goto LABEL_37;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, (const char *)v27, v28);
      }
    }
LABEL_36:
    v31 = 0;
    if ((a3 & 2) == 0)
      goto LABEL_116;
    goto LABEL_37;
  }
  v13 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 1uLL)
  {
    *v13 = 10272;
    *((_QWORD *)a2 + 4) += 2;
    if (a4)
      goto LABEL_10;
  }
  else
  {
    llvm::raw_ostream::write(a2, " (", 2uLL);
    if (a4)
    {
LABEL_10:
      LocalSlot = llvm::SlotTracker::getLocalSlot(a4[5], (const llvm::Value *)v12);
      goto LABEL_11;
    }
  }
  v56 = (const llvm::Function *)v12[7];
  if (!v56)
  {
LABEL_113:
    v57 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v57) > 0x10)
    {
      *(_BYTE *)(v57 + 16) = 62;
      *(_OWORD *)v57 = *(_OWORD *)"<ir-block badref>";
      *((_QWORD *)a2 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(a2, "<ir-block badref>", 0x11uLL);
    }
    goto LABEL_115;
  }
  v59 = *((_QWORD *)v56 + 5);
  v63[0] = (const llvm::Function *)&off_1E814DC18;
  v63[1] = 0;
  LOWORD(v64) = v59 != 0;
  v69 = 0;
  v65 = v59;
  v66 = 0;
  v68 = 0;
  v67 = 0;
  llvm::ModuleSlotTracker::incorporateFunction(v63, v56);
  LocalSlot = llvm::SlotTracker::getLocalSlot(v67, (const llvm::Value *)v12);
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)v63);
LABEL_11:
  if (LocalSlot == -1)
    goto LABEL_113;
  v63[0] = (const llvm::Function *)"%ir-block.";
  v64 = LocalSlot;
  LOWORD(v66) = 2307;
  llvm::Twine::str((llvm::Twine *)v63, __p);
  if (v62 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if (v62 >= 0)
    v16 = v62 & 0x7F;
  else
    v16 = (size_t)__p[1];
  llvm::raw_ostream::write(a2, (const char *)v15, v16);
  if (v62 < 0)
    operator delete(__p[0]);
LABEL_115:
  v31 = 1;
  if ((a3 & 2) == 0)
    goto LABEL_116;
LABEL_37:
  if (*((_BYTE *)this + 185))
  {
    if (v31)
      v32 = ", ";
    else
      v32 = " (";
    v33 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v33 > 1uLL)
    {
      *v33 = *(_WORD *)v32;
      v34 = (void *)(*((_QWORD *)a2 + 4) + 2);
      *((_QWORD *)a2 + 4) = v34;
    }
    else
    {
      llvm::raw_ostream::write(a2, v32, 2uLL);
      v34 = (void *)*((_QWORD *)a2 + 4);
    }
    if (*((_QWORD *)a2 + 3) - (_QWORD)v34 > 0xCuLL)
    {
      qmemcpy(v34, "address-taken", 13);
      *((_QWORD *)a2 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(a2, "address-taken", 0xDuLL);
    }
    v31 = 1;
  }
  if (*((_BYTE *)this + 184))
  {
    if (v31)
      v35 = ", ";
    else
      v35 = " (";
    v36 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v36 > 1uLL)
    {
      *v36 = *(_WORD *)v35;
      v37 = *((_QWORD *)a2 + 4) + 2;
      *((_QWORD *)a2 + 4) = v37;
    }
    else
    {
      llvm::raw_ostream::write(a2, v35, 2uLL);
      v37 = *((_QWORD *)a2 + 4);
    }
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v37) > 0xA)
    {
      *(_DWORD *)(v37 + 7) = 1684107309;
      *(_QWORD *)v37 = *(_QWORD *)"landing-pad";
      *((_QWORD *)a2 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(a2, "landing-pad", 0xBuLL);
    }
    v31 = 1;
  }
  if (*((_BYTE *)this + 202))
  {
    if (v31)
      v38 = ", ";
    else
      v38 = " (";
    v39 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v39 > 1uLL)
    {
      *v39 = *(_WORD *)v38;
      v40 = (void *)(*((_QWORD *)a2 + 4) + 2);
      *((_QWORD *)a2 + 4) = v40;
    }
    else
    {
      llvm::raw_ostream::write(a2, v38, 2uLL);
      v40 = (void *)*((_QWORD *)a2 + 4);
    }
    if (*((_QWORD *)a2 + 3) - (_QWORD)v40 > 0x1BuLL)
    {
      qmemcpy(v40, "inlineasm-br-indirect-target", 28);
      *((_QWORD *)a2 + 4) += 28;
    }
    else
    {
      llvm::raw_ostream::write(a2, "inlineasm-br-indirect-target", 0x1CuLL);
    }
    v31 = 1;
  }
  if (*((_BYTE *)this + 189))
  {
    if (v31)
      v41 = ", ";
    else
      v41 = " (";
    v42 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v42 > 1uLL)
    {
      *v42 = *(_WORD *)v41;
      v43 = (void *)(*((_QWORD *)a2 + 4) + 2);
      *((_QWORD *)a2 + 4) = v43;
    }
    else
    {
      llvm::raw_ostream::write(a2, v41, 2uLL);
      v43 = (void *)*((_QWORD *)a2 + 4);
    }
    if (*((_QWORD *)a2 + 3) - (_QWORD)v43 > 0xEuLL)
    {
      qmemcpy(v43, "ehfunclet-entry", 15);
      *((_QWORD *)a2 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(a2, "ehfunclet-entry", 0xFuLL);
    }
    v31 = 1;
  }
  if (*((_BYTE *)this + 176))
  {
    if (v31)
      v44 = ", ";
    else
      v44 = " (";
    v45 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v45 > 1uLL)
    {
      *v45 = *(_WORD *)v44;
      v46 = *((_QWORD *)a2 + 4) + 2;
      *((_QWORD *)a2 + 4) = v46;
    }
    else
    {
      llvm::raw_ostream::write(a2, v44, 2uLL);
      v46 = *((_QWORD *)a2 + 4);
    }
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v46) > 5)
    {
      *(_WORD *)(v46 + 4) = 8302;
      *(_DWORD *)v46 = 1734962273;
      *((_QWORD *)a2 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(a2, "align ", 6uLL);
    }
    v31 = 1;
    sub_1C5E21910(a2, 1 << *((_BYTE *)this + 176), 0, 0, 0);
  }
  if (!*((_QWORD *)this + 24))
  {
LABEL_116:
    if (!v31)
      return;
    goto LABEL_117;
  }
  if (v31)
    v47 = ", ";
  else
    v47 = " (";
  v48 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v48 > 1uLL)
  {
    *v48 = *(_WORD *)v47;
    v49 = *((_QWORD *)a2 + 4) + 2;
    *((_QWORD *)a2 + 4) = v49;
  }
  else
  {
    llvm::raw_ostream::write(a2, v47, 2uLL);
    v49 = *((_QWORD *)a2 + 4);
  }
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v49) > 0xA)
  {
    *(_DWORD *)(v49 + 7) = 544435823;
    *(_QWORD *)v49 = *(_QWORD *)"bbsections ";
    *((_QWORD *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, "bbsections ", 0xBuLL);
  }
  v50 = *((_QWORD *)this + 24);
  if ((_DWORD)v50 == 2)
  {
    v55 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v55 <= 3uLL)
    {
      v52 = "Cold";
      v53 = a2;
      v54 = 4;
      goto LABEL_96;
    }
    *v55 = 1684827971;
    v60 = *((_QWORD *)a2 + 4) + 4;
  }
  else
  {
    if ((_DWORD)v50 != 1)
    {
      sub_1C5E21910(a2, HIDWORD(v50), 0, 0, 0);
      goto LABEL_117;
    }
    v51 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v51) <= 8)
    {
      v52 = "Exception";
      v53 = a2;
      v54 = 9;
LABEL_96:
      llvm::raw_ostream::write(v53, v52, v54);
      goto LABEL_117;
    }
    *(_BYTE *)(v51 + 8) = 110;
    *(_QWORD *)v51 = *(_QWORD *)"Exception";
    v60 = *((_QWORD *)a2 + 4) + 9;
  }
  *((_QWORD *)a2 + 4) = v60;
LABEL_117:
  v58 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v58 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 41);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v58 + 1;
    *v58 = 41;
  }
}

uint64_t llvm::MachineBasicBlock::getSuccProbability(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t result;
  unint64_t v5;
  BOOL v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v2 = (char *)a1[14];
  v3 = (char *)a1[15];
  if (v2 == v3)
  {
    v5 = a1[12] - a1[11];
    v6 = (v5 >> 3) == 0x80000000;
    v7 = ((v5 >> 4) | 0x80000000) / (v5 >> 3);
    if (v6)
      return 1;
    else
      return v7;
  }
  else
  {
    result = *(unsigned int *)&v2[(a2 - a1[11]) >> 1];
    if ((_DWORD)result == -1)
    {
      v8 = 0;
      v9 = 0;
      v10 = v2;
      do
      {
        v12 = *(_DWORD *)v10;
        v10 += 4;
        v11 = v12;
        v13 = v12 + v9;
        if (v12 + (unint64_t)v9 <= 0x80000000)
          v14 = v13;
        else
          v14 = 0x80000000;
        if (v11 != -1)
        {
          v9 = v14;
          ++v8;
        }
      }
      while (v10 != v3);
      return (0x80000000 - v9) / (((unint64_t)(v3 - v2) >> 2) - v8);
    }
  }
  return result;
}

_QWORD *llvm::MachineBasicBlock::removeLiveIn(_QWORD *result, int a2, uint64_t a3)
{
  char *v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;

  v4 = (char *)result[19];
  v3 = (char *)result[20];
  if (v4 != v3)
  {
    v5 = result;
    v6 = 0;
    while (*(unsigned __int16 *)&v4[v6] != a2)
    {
      v6 += 16;
      if (&v4[v6] == v3)
        return result;
    }
    v7 = &v4[v6];
    v8 = *(_QWORD *)&v4[v6 + 8] & ~a3;
    *((_QWORD *)v7 + 1) = v8;
    if (!v8)
    {
      v9 = v3 - (v7 + 16);
      if (v3 != v7 + 16)
        result = memmove(v7, v7 + 16, v3 - (v7 + 16));
      v5[20] = &v7[v9];
    }
  }
  return result;
}

char *llvm::MachineBasicBlock::removeLiveIn(uint64_t a1, char *__dst)
{
  char *v4;
  char *v5;
  int64_t v6;

  v4 = __dst + 16;
  v5 = *(char **)(a1 + 160);
  v6 = v5 - v4;
  if (v5 != v4)
    memmove(__dst, v4, v5 - v4);
  *(_QWORD *)(a1 + 160) = &__dst[v6];
  return __dst;
}

BOOL llvm::MachineBasicBlock::isLiveIn(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int16 *i;

  for (i = *(unsigned __int16 **)(a1 + 152); ; i += 8)
  {
    if (i == *(unsigned __int16 **)(a1 + 160))
      return 0;
    if (*i == a2)
      break;
  }
  return (*((_QWORD *)i + 1) & a3) != 0;
}

void llvm::MachineBasicBlock::sortUniqueLiveIns(llvm::MachineBasicBlock *this)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  uint64_t i;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 19);
  v3 = (unsigned __int16 *)*((_QWORD *)this + 20);
  v4 = 126 - 2 * __clz(((char *)v3 - (char *)v2) >> 4);
  if (v3 == v2)
    v5 = 0;
  else
    v5 = v4;
  sub_1C512E120(v2, v3, v5, 1);
  v7 = (unsigned __int16 *)*((_QWORD *)this + 19);
  v6 = (unsigned __int16 *)*((_QWORD *)this + 20);
  if (v7 == v6)
  {
    v8 = *((_QWORD *)this + 19);
  }
  else
  {
    v8 = *((_QWORD *)this + 19);
    while (2)
    {
      v9 = *v7;
      for (i = *((_QWORD *)v7 + 1); ; i |= *((_QWORD *)v7 + 1))
      {
        v7 += 8;
        if (v7 == v6)
        {
          *(_WORD *)v8 = v9;
          *(_QWORD *)(v8 + 8) = i;
          v8 += 16;
          goto LABEL_14;
        }
        if (v9 != *v7)
          break;
      }
      *(_WORD *)v8 = v9;
      *(_QWORD *)(v8 + 8) = i;
      v8 += 16;
      if (v7 != v6)
        continue;
      break;
    }
  }
LABEL_14:
  if ((unsigned __int16 *)v8 != v6)
    *((_QWORD *)this + 20) = v8;
}

void llvm::MachineBasicBlock::updateTerminator(llvm::MachineBasicBlock *this, llvm::MachineBasicBlock *a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::MachineBasicBlock *v6;
  llvm::MachineBasicBlock *v7;
  llvm::MachineBasicBlock *v8;
  llvm::MachineBasicBlock **v9;
  llvm::MachineBasicBlock **v10;
  unsigned __int8 *v11;
  llvm::MachineBasicBlock *v12;
  llvm::MachineBasicBlock *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 4) + 16) + 104))(*(_QWORD *)(*((_QWORD *)this + 4) + 16));
  if (*((_QWORD *)this + 11) == *((_QWORD *)this + 12))
    return;
  v5 = v4;
  v12 = 0;
  v13 = 0;
  v14 = v16;
  v15 = 0x400000000;
  llvm::MachineBasicBlock::findBranchDebugLoc(this, &v11);
  (*(void (**)(uint64_t, llvm::MachineBasicBlock *, llvm::MachineBasicBlock **, llvm::MachineBasicBlock **, void **, _QWORD))(*(_QWORD *)v5 + 248))(v5, this, &v13, &v12, &v14, 0);
  if (!(_DWORD)v15)
  {
    if (v13)
    {
      if (*((llvm::MachineBasicBlock **)this + 1) == v13)
        (*(void (**)(uint64_t, llvm::MachineBasicBlock *, _QWORD))(*(_QWORD *)v5 + 264))(v5, this, 0);
      goto LABEL_32;
    }
    if (!a2)
      goto LABEL_32;
    v9 = (llvm::MachineBasicBlock **)*((_QWORD *)this + 11);
    v10 = (llvm::MachineBasicBlock **)*((_QWORD *)this + 12);
    if (v9 != v10)
    {
      while (*v9 != a2)
      {
        if (++v9 == v10)
        {
          v9 = (llvm::MachineBasicBlock **)*((_QWORD *)this + 12);
          break;
        }
      }
    }
    if (v9 == v10 || *((_BYTE *)a2 + 184) || *((llvm::MachineBasicBlock **)this + 1) == a2)
      goto LABEL_32;
LABEL_31:
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, _QWORD, void *, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v5 + 272))(v5, this, a2, 0, v14, 0, &v11, 0);
    goto LABEL_32;
  }
  if (!v12)
  {
    if (v13 == a2)
    {
      (*(void (**)(uint64_t, llvm::MachineBasicBlock *, _QWORD))(*(_QWORD *)v5 + 264))(v5, this, 0);
      if (*((llvm::MachineBasicBlock **)this + 1) != v13)
      {
        LODWORD(v15) = 0;
        (*(void (**)(uint64_t, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, _QWORD, void *, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v5 + 272))(v5, this, v13, 0, v14, 0, &v11, 0);
      }
      goto LABEL_32;
    }
    v8 = (llvm::MachineBasicBlock *)*((_QWORD *)this + 1);
    if (v8 != v13)
    {
      if (v8 != a2)
      {
        (*(void (**)(uint64_t, llvm::MachineBasicBlock *, _QWORD))(*(_QWORD *)v5 + 264))(v5, this, 0);
        (*(void (**)(uint64_t, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, void *, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v5 + 272))(v5, this, v13, a2, v14, v15, &v11, 0);
      }
      goto LABEL_32;
    }
    if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v5 + 728))(v5, &v14))
    {
      (*(void (**)(uint64_t, llvm::MachineBasicBlock *, _QWORD))(*(_QWORD *)v5 + 264))(v5, this, 0);
      (*(void (**)(uint64_t, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, _QWORD, void *, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v5 + 272))(v5, this, a2, 0, v14, v15, &v11, 0);
      goto LABEL_32;
    }
    LODWORD(v15) = 0;
    goto LABEL_31;
  }
  v6 = (llvm::MachineBasicBlock *)*((_QWORD *)this + 1);
  if (v6 == v13)
  {
    if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v5 + 728))(v5, &v14) & 1) == 0)
    {
      (*(void (**)(uint64_t, llvm::MachineBasicBlock *, _QWORD))(*(_QWORD *)v5 + 264))(v5, this, 0);
      v7 = v12;
      goto LABEL_17;
    }
  }
  else if (v6 == v12)
  {
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, _QWORD))(*(_QWORD *)v5 + 264))(v5, this, 0);
    v7 = v13;
LABEL_17:
    (*(void (**)(uint64_t, llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, _QWORD, void *, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v5 + 272))(v5, this, v7, 0, v14, v15, &v11, 0);
  }
LABEL_32:
  if (v11)
    llvm::MetadataTracking::untrack((uint64_t)&v11, v11);
  if (v14 != v16)
    free(v14);
}

BOOL llvm::MachineBasicBlock::isLayoutSuccessor(llvm::MachineBasicBlock *this, const llvm::MachineBasicBlock *a2)
{
  return *((_QWORD *)this + 1) == (_QWORD)a2;
}

BOOL llvm::MachineBasicBlock::isSuccessor(llvm::MachineBasicBlock *this, const llvm::MachineBasicBlock *a2)
{
  const llvm::MachineBasicBlock **v2;
  const llvm::MachineBasicBlock **v3;

  v2 = (const llvm::MachineBasicBlock **)*((_QWORD *)this + 11);
  v3 = (const llvm::MachineBasicBlock **)*((_QWORD *)this + 12);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = (const llvm::MachineBasicBlock **)*((_QWORD *)this + 12);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void llvm::MachineBasicBlock::addSuccessor(_QWORD *a1, _QWORD *a2, int a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  _DWORD *i;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  int v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  v6 = (char *)a1[14];
  v7 = (char *)a1[15];
  if (v6 != v7 || (v15 = (_QWORD *)a1[12], (_QWORD *)a1[11] == v15))
  {
    v8 = a1[16];
    if ((unint64_t)v7 >= v8)
    {
      v10 = (v7 - v6) >> 2;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62)
        goto LABEL_56;
      v12 = v8 - (_QWORD)v6;
      if (v12 >> 1 > v11)
        v11 = v12 >> 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        if (v13 >> 62)
          goto LABEL_57;
        v14 = (char *)operator new(4 * v13);
      }
      else
      {
        v14 = 0;
      }
      v16 = &v14[4 * v10];
      *(_DWORD *)v16 = a3;
      for (i = v16 + 4; v7 != v6; v16 -= 4)
      {
        v17 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v16 - 1) = v17;
      }
      a1[14] = v16;
      a1[15] = i;
      a1[16] = &v14[4 * v13];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_DWORD *)v7 = a3;
      i = v7 + 4;
    }
    a1[15] = i;
    v15 = (_QWORD *)a1[12];
  }
  v18 = a1[13];
  if ((unint64_t)v15 >= v18)
  {
    v20 = (_QWORD *)a1[11];
    v21 = v15 - v20;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
      goto LABEL_56;
    v23 = v18 - (_QWORD)v20;
    if (v23 >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        goto LABEL_57;
      v25 = (char *)operator new(8 * v24);
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[8 * v21];
    *(_QWORD *)v26 = a2;
    v19 = v26 + 8;
    if (v15 != v20)
    {
      do
      {
        v27 = *--v15;
        *((_QWORD *)v26 - 1) = v27;
        v26 -= 8;
      }
      while (v15 != v20);
      v15 = (_QWORD *)a1[11];
    }
    a1[11] = v26;
    a1[12] = v19;
    a1[13] = &v25[8 * v24];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v15 = a2;
    v19 = v15 + 1;
  }
  a1[12] = v19;
  v29 = (_QWORD *)a2[9];
  v28 = a2[10];
  if ((unint64_t)v29 < v28)
  {
    *v29 = a1;
    v30 = v29 + 1;
    goto LABEL_55;
  }
  v31 = (_QWORD *)a2[8];
  v32 = v29 - v31;
  v33 = v32 + 1;
  if ((unint64_t)(v32 + 1) >> 61)
LABEL_56:
    abort();
  v34 = v28 - (_QWORD)v31;
  if (v34 >> 2 > v33)
    v33 = v34 >> 2;
  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
    v35 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v35 = v33;
  if (!v35)
  {
    v36 = 0;
    goto LABEL_50;
  }
  if (v35 >> 61)
LABEL_57:
    sub_1C4764EE4();
  v36 = (char *)operator new(8 * v35);
LABEL_50:
  v37 = &v36[8 * v32];
  *(_QWORD *)v37 = a1;
  v30 = v37 + 8;
  if (v29 != v31)
  {
    do
    {
      v38 = *--v29;
      *((_QWORD *)v37 - 1) = v38;
      v37 -= 8;
    }
    while (v29 != v31);
    v29 = (_QWORD *)a2[8];
  }
  a2[8] = v37;
  a2[9] = v30;
  a2[10] = &v36[8 * v35];
  if (v29)
    operator delete(v29);
LABEL_55:
  a2[9] = v30;
}

void llvm::MachineBasicBlock::addPredecessor(llvm::MachineBasicBlock *this, llvm::MachineBasicBlock *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)*((_QWORD *)this + 9);
  v4 = *((_QWORD *)this + 10);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)*((_QWORD *)this + 8);
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (_QWORD *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 8) = v13;
    *((_QWORD *)this + 9) = v6;
    *((_QWORD *)this + 10) = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 9) = v6;
}

_QWORD *llvm::MachineBasicBlock::addSuccessorWithoutProb(_QWORD *this, llvm::MachineBasicBlock *a2)
{
  unint64_t v2;
  _QWORD *v3;
  llvm::MachineBasicBlock *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  llvm::MachineBasicBlock *v9;
  _QWORD *v10;

  v9 = a2;
  v2 = this[13];
  this[15] = this[14];
  v3 = (_QWORD *)this[12];
  if ((unint64_t)v3 >= v2)
  {
    v8 = this;
    v5 = sub_1C4DFEA3C((void **)this + 11, &v9);
    this = v8;
    v4 = v9;
  }
  else
  {
    v4 = a2;
    *v3 = a2;
    v5 = v3 + 1;
  }
  this[12] = v5;
  v10 = this;
  v6 = (_QWORD *)*((_QWORD *)v4 + 9);
  if ((unint64_t)v6 >= *((_QWORD *)v4 + 10))
  {
    this = sub_1C4DFEA3C((void **)v4 + 8, &v10);
    v7 = this;
  }
  else
  {
    *v6 = this;
    v7 = v6 + 1;
  }
  *((_QWORD *)v4 + 9) = v7;
  return this;
}

void llvm::MachineBasicBlock::splitSuccessor(llvm::MachineBasicBlock *this, llvm::MachineBasicBlock *a2, llvm::MachineBasicBlock *a3, int a4)
{
  llvm::MachineBasicBlock **v7;
  llvm::MachineBasicBlock **v8;
  llvm::MachineBasicBlock **v9;
  uint64_t v10;
  int v11;

  v7 = (llvm::MachineBasicBlock **)*((_QWORD *)this + 11);
  v8 = (llvm::MachineBasicBlock **)*((_QWORD *)this + 12);
  v9 = v7;
  if (v7 != v8)
  {
    while (*v9 != a2)
    {
      if (++v9 == v8)
      {
        v9 = (llvm::MachineBasicBlock **)*((_QWORD *)this + 12);
        break;
      }
    }
  }
  v10 = *((_QWORD *)this + 14);
  if (v10 == *((_QWORD *)this + 15))
    v11 = -1;
  else
    v11 = *(_DWORD *)(v10 + (((char *)v9 - (char *)v7) >> 1));
  llvm::MachineBasicBlock::addSuccessor(this, a3, v11);
  if (a4)
    sub_1C50D6C6C(*((unsigned int **)this + 14), *((unsigned int **)this + 15));
}

uint64_t llvm::MachineBasicBlock::getProbabilityIterator(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 112) + ((a2 - *(_QWORD *)(a1 + 88)) >> 1);
}

{
  return *(_QWORD *)(a1 + 112) + ((a2 - *(_QWORD *)(a1 + 88)) >> 1);
}

char *llvm::MachineBasicBlock::removeSuccessor(llvm::MachineBasicBlock *this, llvm::MachineBasicBlock *a2, int a3)
{
  char *v4;
  char *v5;

  v4 = (char *)*((_QWORD *)this + 11);
  v5 = (char *)*((_QWORD *)this + 12);
  if (v4 != v5)
  {
    while (*(llvm::MachineBasicBlock **)v4 != a2)
    {
      v4 += 8;
      if (v4 == v5)
      {
        v4 = (char *)*((_QWORD *)this + 12);
        return llvm::MachineBasicBlock::removeSuccessor((uint64_t)this, v4, a3);
      }
    }
  }
  return llvm::MachineBasicBlock::removeSuccessor((uint64_t)this, v4, a3);
}

char *llvm::MachineBasicBlock::removeSuccessor(uint64_t a1, char *__dst, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int64_t v13;
  char *v14;
  int64_t v15;

  v6 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  if (v6 != v5)
  {
    v8 = v6 + ((uint64_t)&__dst[-*(_QWORD *)(a1 + 88)] >> 1);
    v9 = v5 - (v8 + 4);
    if (v5 != v8 + 4)
      memmove((void *)(v6 + ((uint64_t)&__dst[-*(_QWORD *)(a1 + 88)] >> 1)), (const void *)(v8 + 4), v5 - (v8 + 4));
    *(_QWORD *)(a1 + 120) = v8 + v9;
    if (a3)
      sub_1C50D6C6C(*(unsigned int **)(a1 + 112), (unsigned int *)(v8 + v9));
  }
  v10 = *(_QWORD *)__dst;
  v12 = *(char **)(*(_QWORD *)__dst + 64);
  v11 = *(char **)(*(_QWORD *)__dst + 72);
  if (v12 != v11)
  {
    while (*(_QWORD *)v12 != a1)
    {
      v12 += 8;
      if (v12 == v11)
      {
        v12 = *(char **)(*(_QWORD *)__dst + 72);
        break;
      }
    }
  }
  v13 = v11 - (v12 + 8);
  if (v11 != v12 + 8)
    memmove(v12, v12 + 8, v11 - (v12 + 8));
  *(_QWORD *)(v10 + 72) = &v12[v13];
  v14 = *(char **)(a1 + 96);
  v15 = v14 - (__dst + 8);
  if (v14 != __dst + 8)
    memmove(__dst, __dst + 8, v14 - (__dst + 8));
  *(_QWORD *)(a1 + 96) = &__dst[v15];
  return __dst;
}

llvm::MachineBasicBlock ***llvm::MachineBasicBlock::removePredecessor(llvm::MachineBasicBlock ***this, llvm::MachineBasicBlock *a2)
{
  llvm::MachineBasicBlock ***v2;
  llvm::MachineBasicBlock **v3;
  llvm::MachineBasicBlock **v4;
  int64_t v5;

  v2 = this;
  v4 = this[8];
  v3 = this[9];
  if (v4 != v3)
  {
    while (*v4 != a2)
    {
      if (++v4 == v3)
      {
        v4 = this[9];
        break;
      }
    }
  }
  v5 = (char *)v3 - (char *)(v4 + 1);
  if (v3 != v4 + 1)
    this = (llvm::MachineBasicBlock ***)memmove(v4, v4 + 1, (char *)v3 - (char *)(v4 + 1));
  v2[9] = (llvm::MachineBasicBlock **)((char *)v4 + v5);
  return this;
}

void llvm::MachineBasicBlock::replaceSuccessor(llvm::MachineBasicBlock *this, llvm::MachineBasicBlock *a2, llvm::MachineBasicBlock *a3)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  llvm::MachineBasicBlock **v10;
  llvm::MachineBasicBlock **v11;
  llvm::MachineBasicBlock **v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;

  if (a2 == a3)
    return;
  v6 = (char *)*((_QWORD *)this + 11);
  v7 = (char *)*((_QWORD *)this + 12);
  if (v6 != v7)
  {
    v8 = (char *)*((_QWORD *)this + 12);
    v9 = v8;
    v10 = (llvm::MachineBasicBlock **)*((_QWORD *)this + 11);
    while (1)
    {
      if (*v10 == a2)
      {
        v9 = (char *)v10;
        if (v8 != v7)
          break;
      }
      if (*v10 == a3)
      {
        v8 = (char *)v10;
        if (v9 != v7)
        {
          v8 = (char *)v10;
          goto LABEL_8;
        }
      }
      if (++v10 == (llvm::MachineBasicBlock **)v7)
        goto LABEL_8;
    }
    v9 = (char *)v10;
LABEL_8:
    if (v8 != v7)
    {
      v25 = *((_QWORD *)this + 14);
      if (v25 != *((_QWORD *)this + 15))
      {
        v26 = v8 - v6;
        v27 = *(unsigned int *)(v25 + ((v8 - v6) >> 1));
        if ((_DWORD)v27 != -1)
        {
          v28 = v26 >> 3;
          v29 = *(unsigned int *)(v25 + ((v9 - v6) >> 1));
          v30 = v29 + v27;
          v31 = v29 + v27;
          if (v30 > 0x80000000)
            v31 = 0x80000000;
          *(_DWORD *)(v25 + 4 * v28) = v31;
        }
      }
      llvm::MachineBasicBlock::removeSuccessor((uint64_t)this, v9, 0);
      return;
    }
    v7 = v9;
  }
  v12 = (llvm::MachineBasicBlock **)*((_QWORD *)a2 + 8);
  v11 = (llvm::MachineBasicBlock **)*((_QWORD *)a2 + 9);
  if (v12 != v11)
  {
    while (*v12 != this)
    {
      if (++v12 == v11)
      {
        v12 = (llvm::MachineBasicBlock **)*((_QWORD *)a2 + 9);
        break;
      }
    }
  }
  v13 = (char *)v11 - (char *)(v12 + 1);
  if (v11 != v12 + 1)
    memmove(v12, v12 + 1, (char *)v11 - (char *)(v12 + 1));
  *((_QWORD *)a2 + 9) = (char *)v12 + v13;
  v15 = (_QWORD *)*((_QWORD *)a3 + 9);
  v14 = *((_QWORD *)a3 + 10);
  if ((unint64_t)v15 < v14)
  {
    *v15 = this;
    v23 = v15 + 1;
  }
  else
  {
    v16 = (_QWORD *)*((_QWORD *)a3 + 8);
    v17 = v15 - v16;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      abort();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        sub_1C4764EE4();
      v21 = (char *)operator new(8 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[8 * v17];
    *(_QWORD *)v22 = this;
    v23 = v22 + 8;
    if (v15 != v16)
    {
      do
      {
        v24 = *--v15;
        *((_QWORD *)v22 - 1) = v24;
        v22 -= 8;
      }
      while (v15 != v16);
      v15 = (_QWORD *)*((_QWORD *)a3 + 8);
    }
    *((_QWORD *)a3 + 8) = v22;
    *((_QWORD *)a3 + 9) = v23;
    *((_QWORD *)a3 + 10) = &v21[8 * v20];
    if (v15)
      operator delete(v15);
  }
  *((_QWORD *)a3 + 9) = v23;
  *(_QWORD *)v7 = a3;
}

void llvm::MachineBasicBlock::copySuccessor(llvm::MachineBasicBlock *this, _QWORD *a2, llvm::MachineBasicBlock **a3)
{
  llvm::MachineBasicBlock *v4;
  int SuccProbability;

  v4 = *a3;
  if (a2[14] == a2[15])
  {
    llvm::MachineBasicBlock::addSuccessorWithoutProb(this, *a3);
  }
  else
  {
    SuccProbability = llvm::MachineBasicBlock::getSuccProbability(a2, (uint64_t)a3);
    llvm::MachineBasicBlock::addSuccessor(this, v4, SuccProbability);
  }
}

unsigned int *llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs(unsigned int *this, llvm::MachineBasicBlock *a2)
{
  unsigned int **i;
  llvm::MachineBasicBlock **v4;
  llvm::MachineBasicBlock *v5;
  int *v6;
  char *v7;
  char *v8;

  if (this != (unsigned int *)a2)
  {
    for (i = (unsigned int **)this;
          ;
          llvm::MachineBasicBlock::replacePhiUsesWith((uint64_t)v5, a2, (llvm::MachineBasicBlock *)i))
    {
      v4 = (llvm::MachineBasicBlock **)*((_QWORD *)a2 + 11);
      if (v4 == *((llvm::MachineBasicBlock ***)a2 + 12))
        break;
      v5 = *v4;
      v6 = (int *)*((_QWORD *)a2 + 14);
      if (v6 == *((int **)a2 + 15))
        llvm::MachineBasicBlock::addSuccessorWithoutProb(i, v5);
      else
        llvm::MachineBasicBlock::addSuccessor(i, v5, *v6);
      v7 = (char *)*((_QWORD *)a2 + 11);
      v8 = (char *)*((_QWORD *)a2 + 12);
      if (v7 != v8)
      {
        while (*(llvm::MachineBasicBlock **)v7 != v5)
        {
          v7 += 8;
          if (v7 == v8)
          {
            v7 = (char *)*((_QWORD *)a2 + 12);
            break;
          }
        }
      }
      llvm::MachineBasicBlock::removeSuccessor((uint64_t)a2, v7, 0);
    }
    return sub_1C50D6C6C(i[14], i[15]);
  }
  return this;
}

uint64_t llvm::MachineBasicBlock::replacePhiUsesWith(uint64_t this, llvm::MachineBasicBlock *a2, llvm::MachineBasicBlock *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v7;
  int i;
  uint64_t v9;
  _QWORD *v10;
  llvm::MachineBasicBlock *v11;

  v3 = *(_QWORD *)(this + 56);
  if (v3 != this + 48)
  {
    v4 = *(_QWORD *)(this + 56);
    while (1)
    {
      v5 = **(unsigned __int16 **)(v4 + 16);
      if (v5 != 69 && v5 != 0)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == this + 48)
      {
        v4 = this + 48;
        break;
      }
    }
    while (v3 != v4)
    {
      v7 = *(_DWORD *)(v3 + 40);
      if (v7 != 1)
      {
        for (i = 1; i != v7; i += 2)
        {
          v9 = *(_QWORD *)(v3 + 32) + 32 * (i + 1);
          v11 = *(llvm::MachineBasicBlock **)(v9 + 16);
          v10 = (_QWORD *)(v9 + 16);
          if (v11 == a2)
            *v10 = a3;
        }
      }
      if ((*(_BYTE *)v3 & 4) == 0)
      {
        while ((*(_WORD *)(v3 + 44) & 8) != 0)
          v3 = *(_QWORD *)(v3 + 8);
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
  }
  return this;
}

BOOL llvm::MachineBasicBlock::isPredecessor(llvm::MachineBasicBlock *this, const llvm::MachineBasicBlock *a2)
{
  const llvm::MachineBasicBlock **v2;
  const llvm::MachineBasicBlock **v3;

  v2 = (const llvm::MachineBasicBlock **)*((_QWORD *)this + 8);
  v3 = (const llvm::MachineBasicBlock **)*((_QWORD *)this + 9);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = (const llvm::MachineBasicBlock **)*((_QWORD *)this + 9);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

uint64_t llvm::MachineBasicBlock::getFallThrough(llvm::MachineBasicBlock *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _WORD *v7;
  unint64_t v8;
  __int16 v9;
  int v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 4);
  if (v1 == v2 + 320)
    return 0;
  v4 = (_QWORD *)*((_QWORD *)this + 11);
  v5 = (_QWORD *)*((_QWORD *)this + 12);
  if (v4 != v5)
  {
    while (*v4 != v1)
    {
      if (++v4 == v5)
      {
        v4 = (_QWORD *)*((_QWORD *)this + 12);
        break;
      }
    }
  }
  if (v4 == v5)
    return 0;
  v16 = 0;
  v17 = 0;
  v18 = v20;
  v19 = 0x400000000;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 104))(*(_QWORD *)(v2 + 16));
  if (!(*(unsigned int (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t *, uint64_t *, void **, _QWORD))(*(_QWORD *)v6 + 248))(v6, this, &v17, &v16, &v18, 0))
  {
    if (v17 && v17 != v1 && v16 != v1 && (!(_DWORD)v19 || v16 != 0))
      v1 = 0;
    goto LABEL_37;
  }
  v7 = (_WORD *)(*((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFF8);
  if ((_WORD *)((char *)this + 48) == v7)
    goto LABEL_37;
  if (v7)
  {
    v8 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_BYTE *)v7 & 4) != 0)
    {
      v9 = v7[22];
      v8 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_25;
    }
  }
  else
  {
    v8 = 0;
  }
  while (1)
  {
    v9 = *(_WORD *)(v8 + 44);
    if ((v9 & 4) == 0)
      break;
    v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
  }
LABEL_25:
  v11 = v9 & 0xC;
  v12 = v9 & 4;
  v13 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 8);
  if (v11)
    v14 = v12 == 0;
  else
    v14 = 0;
  if (v14)
  {
    if ((v13 & 0x100) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 8) != 0)
      {
        v8 = *(_QWORD *)(v8 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v8 + 16) + 9) & 1) != 0)
          goto LABEL_30;
      }
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  if ((v13 & 0x100) != 0)
  {
LABEL_30:
    if (!v7 || (*(_BYTE *)v7 & 4) == 0)
    {
      while ((v7[22] & 4) != 0)
        v7 = (_WORD *)(*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8);
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 768))(v6))
      v1 = 0;
  }
LABEL_37:
  if (v18 != v20)
    free(v18);
  return v1;
}

llvm::MachineBasicBlock *llvm::MachineBasicBlock::splitAt(llvm::MachineBasicBlock *this, llvm::MachineInstr *a2, int a3, llvm::LiveIntervals *a4)
{
  llvm::MachineBasicBlock *v7;
  llvm::MachineInstr *v8;
  llvm::MachineBasicBlock *v9;
  unint64_t *v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  llvm::MachineBasicBlock *v13;
  uint64_t v14;
  llvm::MachineBasicBlock **v15;
  llvm::MachineBasicBlock *v16;
  unint64_t *v17;
  uint64_t v18;
  llvm::MachineBasicBlock *v19;
  const llvm::LivePhysRegs *v20;
  size_t v22;
  void *v24;
  llvm::MachineInstr *v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  _BYTE v29[16];
  void *v30;
  unsigned int v31;
  uint64_t v32;

  v7 = this;
  v32 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v8 = a2;
    if ((*((_WORD *)a2 + 22) & 8) != 0)
    {
      v8 = a2;
      do
        v8 = (llvm::MachineInstr *)*((_QWORD *)v8 + 1);
      while ((*((_WORD *)v8 + 22) & 8) != 0);
    }
  }
  v9 = (llvm::MachineBasicBlock *)*((_QWORD *)v8 + 1);
  v10 = (unint64_t *)((char *)this + 48);
  if (v9 == (llvm::MachineBasicBlock *)((char *)this + 48))
    return this;
  v11 = *((_QWORD *)this + 4);
  v26 = 0;
  v27 = v29;
  v28 = xmmword_1C6464ED0;
  v30 = 0;
  v31 = 0;
  if (a3)
  {
    v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 176))(*(_QWORD *)(v11 + 16));
    *(_QWORD *)&v28 = 0;
    v22 = *(unsigned int *)(v26 + 16);
    if (v31 < v22 || v31 >> 2 > v22)
    {
      free(v30);
      v24 = malloc_type_calloc(v22, 1uLL, 0x6D9A4F0CuLL);
      if (!v24 && ((_DWORD)v22 || (v24 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v30 = v24;
      v31 = v22;
    }
    this = (llvm::MachineBasicBlock *)llvm::LivePhysRegs::addLiveOuts((llvm::LivePhysRegs *)&v26, (const llvm::MachineFunction **)v7);
    v25 = (llvm::MachineInstr *)(*((_QWORD *)v7 + 6) & 0xFFFFFFFFFFFFFFF8);
    if (!v25 || (*(_BYTE *)v25 & 4) == 0)
    {
      while ((*((_WORD *)v25 + 22) & 4) != 0)
        v25 = (llvm::MachineInstr *)(*(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8);
    }
    while (v25 != a2)
    {
      llvm::LivePhysRegs::removeDefs((llvm::LivePhysRegs *)&v26, v25);
      this = (llvm::MachineBasicBlock *)llvm::LivePhysRegs::addUses((llvm::LivePhysRegs *)&v26, v25);
      v25 = (llvm::MachineInstr *)(*(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8);
      if (!v25 || (*(_BYTE *)v25 & 4) == 0)
      {
        while ((*((_WORD *)v25 + 22) & 4) != 0)
          v25 = (llvm::MachineInstr *)(*(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8);
      }
    }
  }
  v12 = (llvm::BasicBlock *)*((_QWORD *)v7 + 2);
  v13 = *(llvm::MachineBasicBlock **)(v11 + 312);
  if (v13)
  {
    *(_QWORD *)(v11 + 312) = *(_QWORD *)v13;
  }
  else
  {
    this = (llvm::MachineBasicBlock *)sub_1C484358C(v11 + 128, 232, 3);
    v13 = this;
  }
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = v12;
  *((_DWORD *)v13 + 6) = -1;
  *((_QWORD *)v13 + 6) = ((unint64_t)v13 + 48) | 4;
  *((_QWORD *)v13 + 7) = (char *)v13 + 48;
  *((_BYTE *)v13 + 144) = 0;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  *(_OWORD *)((char *)v13 + 121) = 0u;
  *((_QWORD *)v13 + 20) = 0;
  *((_QWORD *)v13 + 21) = 0;
  *((_QWORD *)v13 + 19) = 0;
  *((_BYTE *)v13 + 176) = 0;
  *(_DWORD *)((char *)v13 + 187) = 0;
  *(_QWORD *)((char *)v13 + 180) = 0;
  *((_QWORD *)v13 + 24) = 0;
  *(_DWORD *)((char *)v13 + 199) = 0;
  *((_QWORD *)v13 + 27) = 0;
  *((_QWORD *)v13 + 28) = 0;
  *((_QWORD *)v13 + 26) = 0;
  *((_QWORD *)v13 + 4) = v11;
  *((_QWORD *)v13 + 5) = v13;
  if (v12)
  {
    this = (llvm::MachineBasicBlock *)llvm::BasicBlock::getIrrLoopHeaderWeight(v12);
    *((_QWORD *)v13 + 17) = this;
    *((_QWORD *)v13 + 18) = v14;
  }
  v15 = (llvm::MachineBasicBlock **)*((_QWORD *)v7 + 1);
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)this, (uint64_t)v13);
  v16 = *v15;
  *(_QWORD *)v13 = *v15;
  *((_QWORD *)v13 + 1) = v15;
  *((_QWORD *)v16 + 1) = v13;
  *v15 = v13;
  v17 = (unint64_t *)*((_QWORD *)v13 + 7);
  if (v17 != v10)
  {
    if (v13 != v7)
    {
      v18 = *((_QWORD *)v13 + 5);
      v19 = v9;
      do
      {
        *((_QWORD *)v19 + 3) = v18;
        v19 = (llvm::MachineBasicBlock *)*((_QWORD *)v19 + 1);
      }
      while (v19 != (llvm::MachineBasicBlock *)v10);
    }
    sub_1C4785D30(v17, (unint64_t *)v9, (unint64_t *)v7 + 6);
  }
  llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v13, v7);
  llvm::MachineBasicBlock::addSuccessor(v7, v13, -1);
  if (a3)
    llvm::addLiveIns(v13, (llvm::MachineBasicBlock *)&v26, v20);
  if (a4)
    sub_1C61E969C((uint64_t)a4, (uint64_t *)v13);
  free(v30);
  if (v27 != v29)
    free(v27);
  return v13;
}

uint64_t llvm::MachineBasicBlock::SplitCriticalEdge(llvm::MachineBasicBlock *a1, const llvm::MachineBasicBlock *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  unint64_t canSplitCriticalEdge;
  uint64_t v9;
  uint64_t v11;
  llvm::MachineBasicBlock *v12;
  uint64_t v13;
  llvm::MachineBasicBlock *v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::PMDataManager *v17;
  uint64_t AnalysisPass;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _DWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int32x2_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  llvm::MachineBasicBlock *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  llvm::MachineBasicBlock *v49;
  uint64_t FirstInstrTerminator;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int32x2_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t i;
  uint64_t v67;
  int32x2_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  unint64_t v79;
  _OWORD *v80;
  _OWORD *v81;
  _OWORD *v82;
  unint64_t v83;
  _OWORD *v84;
  _OWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  llvm::MachineInstr *v96;
  unsigned int v97;
  llvm::MachineInstr *v98;
  llvm::MachineInstr *v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  llvm::MachineInstr **v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  llvm::MachineInstr **v111;
  llvm::MachineInstr *v112;
  uint64_t v113;
  uint64_t v114;
  int32x2_t v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  llvm::LiveInterval *v130;
  unsigned int v131;
  _QWORD *v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  BOOL v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  BOOL v146;
  int v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  unint64_t v152;
  unsigned int v153;
  unsigned int v154;
  _QWORD *j;
  unsigned int v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  char *v161;
  uint64_t v162;
  unsigned int v163;
  unsigned int v164;
  char *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  BOOL v169;
  unint64_t v170;
  unint64_t v171;
  char *v172;
  unsigned int v173;
  unsigned int v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  char *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  BOOL v185;
  unint64_t v186;
  unsigned int v187;
  unsigned int v188;
  BOOL v189;
  BOOL v190;
  unsigned int v192;
  unint64_t v193;
  uint64_t v194;
  BOOL v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  BOOL v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t FirstTerminator;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  int v216;
  int v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int *v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  _QWORD **v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  unsigned int v237;
  uint64_t v238;
  char v239;
  llvm::MachineBasicBlock *v240;
  uint64_t v241;
  int32x2_t *v242;
  uint64_t v243;
  llvm::MachineBasicBlock *v244;
  llvm::MachineBasicBlock *v245;
  char v246;
  uint64_t v247;
  llvm::MachineBasicBlock *v248;
  _QWORD *v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD v253[3];
  _QWORD v254[3];
  unsigned __int8 *v255;
  _QWORD v256[3];
  void *v257;
  uint64_t v258;
  _BYTE v259[32];
  _QWORD **v260;
  _QWORD *v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  _BYTE v265[32];
  char *v266;
  uint64_t v267;
  _BYTE v268[16];
  _DWORD *v269;
  uint64_t v270;
  _QWORD v271[4];

  v7 = (uint64_t)a1;
  v271[2] = *MEMORY[0x1E0C80C00];
  canSplitCriticalEdge = llvm::MachineBasicBlock::canSplitCriticalEdge(a1, a2);
  if (!(_DWORD)canSplitCriticalEdge)
    return 0;
  v244 = a2;
  v11 = *(_QWORD *)(v7 + 32);
  v12 = *(llvm::MachineBasicBlock **)(v7 + 8);
  v255 = 0;
  v9 = *(_QWORD *)(v11 + 312);
  v236 = a4;
  if (v9)
  {
    *(_QWORD *)(v11 + 312) = *(_QWORD *)v9;
  }
  else
  {
    canSplitCriticalEdge = sub_1C484358C(v11 + 128, 232, 3);
    v9 = canSplitCriticalEdge;
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 24) = -1;
  v13 = v9 + 48;
  *(_QWORD *)(v9 + 48) = (v9 + 48) | 4;
  *(_QWORD *)(v9 + 56) = v9 + 48;
  *(_BYTE *)(v9 + 144) = 0;
  *(_QWORD *)(v9 + 152) = 0;
  v249 = (_QWORD *)(v9 + 152);
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 121) = 0u;
  *(_QWORD *)(v9 + 160) = 0;
  *(_QWORD *)(v9 + 168) = 0;
  *(_BYTE *)(v9 + 176) = 0;
  *(_DWORD *)(v9 + 187) = 0;
  *(_QWORD *)(v9 + 180) = 0;
  *(_QWORD *)(v9 + 192) = 0;
  *(_DWORD *)(v9 + 199) = 0;
  *(_QWORD *)(v9 + 216) = 0;
  *(_QWORD *)(v9 + 224) = 0;
  *(_QWORD *)(v9 + 208) = 0;
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v9;
  if (v12 == (llvm::MachineBasicBlock *)(v11 + 320))
    v14 = 0;
  else
    v14 = v12;
  v240 = v14;
  v15 = *(uint64_t **)(v7 + 8);
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList(canSplitCriticalEdge, v9);
  v16 = *v15;
  *(_QWORD *)v9 = *v15;
  *(_QWORD *)(v9 + 8) = v15;
  *(_QWORD *)(v16 + 8) = v9;
  *v15 = v9;
  v17 = *(llvm::PMDataManager **)(*(_QWORD *)(a3 + 8) + 24);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(v17, &llvm::LiveIntervals::ID, 1);
  if (AnalysisPass)
  {
    v21 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::LiveIntervals::ID);
    v20 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a3 + 8) + 24), &llvm::SlotIndexes::ID, 1);
    if (!v20)
    {
      v22 = 0;
      if (!v21)
      {
        v19 = 1;
        v242 = 0;
        goto LABEL_23;
      }
      v242 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    v19 = 1;
    v20 = llvm::PMDataManager::findAnalysisPass(v17, &llvm::SlotIndexes::ID, 1);
    v21 = 0;
    v22 = 0;
    v242 = 0;
    if (!v20)
      goto LABEL_23;
  }
  v23 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v20 + 96))(v20, &llvm::SlotIndexes::ID);
  if (v21)
  {
    v242 = (int32x2_t *)v23;
LABEL_20:
    sub_1C61E969C(v21, (uint64_t *)v9);
    v19 = 0;
    v22 = v21;
    goto LABEL_23;
  }
  if (v23)
  {
    v242 = (int32x2_t *)v23;
    sub_1C512C5A4(v23, (uint64_t *)v9);
    v22 = 0;
  }
  else
  {
    v22 = 0;
    v242 = 0;
  }
  v19 = 1;
LABEL_23:
  v252 = v22;
  v241 = a3;
  v24 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a3 + 8) + 24), &llvm::LiveVariables::ID, 1);
  v25 = &dword_1C6404980[7584];
  v248 = (llvm::MachineBasicBlock *)v7;
  v238 = v11;
  v239 = v19;
  if (!v24)
  {
    v26 = 0;
    v269 = v271;
    v270 = 0x400000000;
LABEL_26:
    v246 = 1;
    goto LABEL_27;
  }
  v26 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v24 + 96))(v24, &llvm::LiveVariables::ID);
  v269 = v271;
  v270 = 0x400000000;
  if (!v26)
    goto LABEL_26;
  FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator((llvm::MachineBasicBlock *)v7);
  v51 = v7 + 48;
  if (v7 + 48 == FirstInstrTerminator)
  {
    v246 = 0;
  }
  else
  {
    v219 = FirstInstrTerminator;
    do
    {
      v220 = *(unsigned int *)(v219 + 40);
      if ((_DWORD)v220)
      {
        v221 = *(unsigned int **)(v219 + 32);
        v222 = 32 * v220;
        do
        {
          v223 = *v221;
          if (!*v221 && (v223 & 0x1000000) == 0)
          {
            v224 = v221[1];
            if (v224)
            {
              if ((v223 & 0x10000000) == 0 && ((v223 >> 26) & ~HIBYTE(v223) & 1) != 0)
              {
                if (!(v224 >> 30))
                  goto LABEL_311;
                v225 = v224 & 0x7FFFFFFF;
                if ((v224 & 0x7FFFFFFF) >= *(_DWORD *)(v26 + 256))
                  sub_1C61E5C60((uint64_t *)(v26 + 248), v225 + 1, v26 + 264);
                if (sub_1C511F3EC(*(_QWORD *)(v26 + 248) + 56 * v225, v219))
                {
LABEL_311:
                  v226 = v270;
                  if (v270 >= (unint64_t)HIDWORD(v270))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v269, (uint64_t)v271, v270 + 1, 4);
                    v226 = v270;
                  }
                  v269[v226] = v224;
                  LODWORD(v270) = v270 + 1;
                  *v221 &= ~0x4000000u;
                }
              }
            }
          }
          v221 += 8;
          v222 -= 32;
        }
        while (v222);
      }
      v219 = *(_QWORD *)(v219 + 8);
    }
    while (v219 != v51);
    v246 = 0;
    v7 = (uint64_t)v248;
    v19 = v239;
    v13 = v9 + 48;
    v25 = dword_1C6404980 + 30336;
  }
LABEL_27:
  v266 = v268;
  v27 = *((_QWORD *)v25 + 206);
  v267 = v27;
  if ((v19 & 1) == 0)
  {
    v28 = llvm::MachineBasicBlock::getFirstInstrTerminator((llvm::MachineBasicBlock *)v7);
    if (v7 + 48 != v28)
    {
      v29 = v28;
      v30 = 0;
      do
      {
        v31 = *(unsigned int *)(v29 + 40);
        if ((_DWORD)v31)
        {
          v32 = *(_QWORD *)(v29 + 32);
          v33 = v32 + 32 * v31;
          do
          {
            if (!*(_BYTE *)v32)
            {
              v34 = *(_DWORD *)(v32 + 4);
              if (v34)
              {
                v35 = v266;
                v36 = v30;
                v37 = v266;
                if (v30)
                {
                  v38 = 4 * v30;
                  v37 = v266;
                  while (*(_DWORD *)v37 != v34)
                  {
                    v37 += 4;
                    v38 -= 4;
                    if (!v38)
                    {
                      v37 = &v266[4 * v30];
                      break;
                    }
                  }
                }
                if (v30 == (v37 - v266) >> 2)
                {
                  if (v30 >= HIDWORD(v267))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v266, (uint64_t)v268, v30 + 1, 4);
                    v35 = v266;
                    v36 = v267;
                  }
                  v35[v36] = v34;
                  v30 = v267 + 1;
                  LODWORD(v267) = v267 + 1;
                }
              }
            }
            v32 += 32;
          }
          while (v32 != v33);
        }
        v29 = *(_QWORD *)(v29 + 8);
      }
      while (v29 != v7 + 48);
    }
  }
  v39 = (uint64_t)v244;
  llvm::MachineBasicBlock::ReplaceUsesOfBlockWith((llvm::MachineBasicBlock *)v7, v244, (llvm::MachineBasicBlock *)v9);
  v263 = v265;
  v264 = v27;
  v40 = v242;
  if (v242)
  {
    v41 = llvm::MachineBasicBlock::getFirstInstrTerminator((llvm::MachineBasicBlock *)v7);
    v42 = v7 + 48;
    if (v7 + 48 != v41)
    {
      v43 = v41;
      v44 = 0;
      do
      {
        if (v44 >= HIDWORD(v264))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v263, (uint64_t)v265, v44 + 1, 8);
          v44 = v264;
        }
        *(_QWORD *)&v263[8 * v44] = v43;
        v44 = v264 + 1;
        LODWORD(v264) = v264 + 1;
        v43 = *(_QWORD *)(v43 + 8);
      }
      while (v43 != v42);
    }
    if (v240 == v244)
      v45 = (llvm::MachineBasicBlock *)v9;
    else
      v45 = v240;
    llvm::MachineBasicBlock::updateTerminator((llvm::MachineBasicBlock *)v7, v45);
    v257 = v259;
    v258 = v27;
    v46 = llvm::MachineBasicBlock::getFirstInstrTerminator((llvm::MachineBasicBlock *)v7);
    if (v42 == v46)
    {
      v48 = 0;
    }
    else
    {
      v47 = v46;
      v48 = 0;
      do
      {
        if (v48 >= HIDWORD(v258))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v257, (uint64_t)v259, v48 + 1, 8);
          v48 = v258;
        }
        *((_QWORD *)v257 + v48) = v47;
        v48 = v258 + 1;
        LODWORD(v258) = v258 + 1;
        v47 = *(_QWORD *)(v47 + 8);
      }
      while (v47 != v42);
    }
    v40 = v242;
    if ((_DWORD)v264)
    {
      v52 = v263;
      v53 = &v263[8 * v264];
      do
      {
        v54 = *(_QWORD *)v52;
        if (v48)
        {
          v55 = 8 * v48;
          v56 = (char *)v257;
          while (*(_QWORD *)v56 != v54)
          {
            v56 += 8;
            v55 -= 8;
            if (!v55)
            {
              v56 = (char *)v257 + 8 * v48;
              break;
            }
          }
        }
        else
        {
          v56 = (char *)v257;
        }
        if (v48 != (v56 - (_BYTE *)v257) >> 3)
          goto LABEL_86;
        v57 = v242[46];
        v58 = v242[48].u32[0];
        if ((_DWORD)v58)
        {
          LODWORD(v59) = (v58 - 1) & ((v54 >> 4) ^ (v54 >> 9));
          v60 = (uint64_t *)(*(_QWORD *)&v57 + 16 * v59);
          v61 = *v60;
          if (*v60 == v54)
            goto LABEL_84;
          v62 = 1;
          while (v61 != -4096)
          {
            v63 = v59 + v62++;
            v59 = v63 & (v58 - 1);
            v61 = *(_QWORD *)(*(_QWORD *)&v57 + 16 * v59);
            if (v61 == v54)
            {
              v60 = (uint64_t *)(*(_QWORD *)&v57 + 16 * v59);
              goto LABEL_84;
            }
          }
        }
        v60 = (uint64_t *)(*(_QWORD *)&v57 + 16 * v58);
LABEL_84:
        if (v60 != (uint64_t *)(*(_QWORD *)&v57 + 16 * v58))
        {
          v64 = v60[1] & 0xFFFFFFFFFFFFFFF8;
          *v60 = -8192;
          v242[47] = vadd_s32(v242[47], (int32x2_t)0x1FFFFFFFFLL);
          *(_QWORD *)(v64 + 16) = 0;
        }
LABEL_86:
        v52 += 8;
      }
      while (v52 != v53);
    }
    if (v257 != v259)
      free(v257);
  }
  else
  {
    if (v240 == v244)
      v49 = (llvm::MachineBasicBlock *)v9;
    else
      v49 = v240;
    llvm::MachineBasicBlock::updateTerminator((llvm::MachineBasicBlock *)v7, v49);
  }
  llvm::MachineBasicBlock::addSuccessor((_QWORD *)v9, v244, -1);
  if (*(llvm::MachineBasicBlock **)(v9 + 8) != v244)
  {
    v257 = v259;
    v258 = v27;
    v65 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v7 + 32) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 16));
    (*(void (**)(uint64_t, uint64_t, llvm::MachineBasicBlock *, _QWORD, void *, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v65 + 272))(v65, v9, v244, 0, v257, v258, &v255, 0);
    if (v40)
    {
      for (i = *(_QWORD *)(v9 + 56); i != v13; i = *(_QWORD *)(i + 8))
      {
        v67 = v40[48].u32[0];
        if ((_DWORD)v67)
        {
          v68 = v40[46];
          v69 = v67 - 1;
          LODWORD(v70) = ((i >> 4) ^ (i >> 9)) & (v67 - 1);
          v71 = (uint64_t *)(*(_QWORD *)&v68 + 16 * v70);
          v72 = *v71;
          if (i == *v71)
          {
LABEL_103:
            if (v71 != (uint64_t *)(*(_QWORD *)&v68 + 16 * v67))
            {
              v79 = v71[1] & 0xFFFFFFFFFFFFFFF8;
              *v71 = -8192;
              v40[47] = vadd_s32(v40[47], (int32x2_t)0x1FFFFFFFFLL);
              *(_QWORD *)(v79 + 16) = 0;
            }
          }
          else
          {
            v73 = 1;
            v74 = *v71;
            v75 = ((i >> 4) ^ (i >> 9)) & v69;
            while (v74 != -4096)
            {
              v76 = v75 + v73++;
              v75 = v76 & v69;
              v74 = *(_QWORD *)(*(_QWORD *)&v68 + 16 * v75);
              if (i == v74)
              {
                if (i != v72)
                {
                  v77 = 1;
                  while (v72 != -4096)
                  {
                    v78 = v70 + v77++;
                    v70 = v78 & v69;
                    v72 = *(_QWORD *)(*(_QWORD *)&v68 + 16 * v70);
                    if (v72 == i)
                    {
                      v71 = (uint64_t *)(*(_QWORD *)&v68 + 16 * v70);
                      goto LABEL_103;
                    }
                  }
                  v71 = (uint64_t *)(*(_QWORD *)&v68 + 16 * v67);
                }
                goto LABEL_103;
              }
            }
          }
        }
        sub_1C4850BC8((uint64_t)v40, i, 0);
      }
    }
    if (v257 != v259)
      free(v257);
    v39 = (uint64_t)v244;
  }
  llvm::MachineBasicBlock::replacePhiUsesWith(v39, (llvm::MachineBasicBlock *)v7, (llvm::MachineBasicBlock *)v9);
  v80 = *(_OWORD **)(v39 + 152);
  v81 = *(_OWORD **)(v39 + 160);
  if (v80 != v81)
  {
    v82 = *(_OWORD **)(v9 + 160);
    do
    {
      v83 = *(_QWORD *)(v9 + 168);
      if ((unint64_t)v82 >= v83)
      {
        v85 = (_OWORD *)*v249;
        v86 = ((uint64_t)v82 - *v249) >> 4;
        v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 60)
LABEL_342:
          abort();
        v88 = v83 - (_QWORD)v85;
        if (v88 >> 3 > v87)
          v87 = v88 >> 3;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
          v89 = 0xFFFFFFFFFFFFFFFLL;
        else
          v89 = v87;
        if (v89)
        {
          if (v89 >> 60)
LABEL_343:
            sub_1C4764EE4();
          v90 = (char *)operator new(16 * v89);
        }
        else
        {
          v90 = 0;
        }
        v91 = &v90[16 * v86];
        *(_OWORD *)v91 = *v80;
        v92 = v91;
        if (v82 != v85)
        {
          do
          {
            *((_OWORD *)v92 - 1) = *(v82 - 1);
            v92 -= 16;
            --v82;
          }
          while (v82 != v85);
          v82 = (_OWORD *)*v249;
        }
        v84 = v91 + 16;
        *(_QWORD *)(v9 + 152) = v92;
        *(_QWORD *)(v9 + 160) = v91 + 16;
        *(_QWORD *)(v9 + 168) = &v90[16 * v89];
        v7 = (uint64_t)v248;
        if (v82)
          operator delete(v82);
      }
      else
      {
        *v82 = *v80;
        v84 = v82 + 1;
      }
      *(_QWORD *)(v9 + 160) = v84;
      ++v80;
      v82 = v84;
    }
    while (v80 != v81);
  }
  v93 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v238 + 16) + 176))(*(_QWORD *)(v238 + 16));
  if ((v246 & 1) == 0)
  {
    v94 = v270;
    if ((_DWORD)v270)
    {
      v95 = v93;
      v96 = (llvm::MachineInstr *)(v7 + 48);
      v250 = (uint64_t *)(v26 + 248);
      do
      {
        v97 = v269[v94 - 1];
        LODWORD(v270) = v94 - 1;
        v98 = *(llvm::MachineInstr **)(v7 + 56);
        v99 = v96;
        do
        {
          if (v99 == v98)
            goto LABEL_155;
          v99 = (llvm::MachineInstr *)(*(_QWORD *)v99 & 0xFFFFFFFFFFFFFFF8);
        }
        while (!llvm::MachineInstr::addRegisterKilled(v99, v97, v95, 0));
        if ((v97 & 0x80000000) != 0)
        {
          v100 = v97 & 0x7FFFFFFF;
          if (v100 >= *(unsigned int *)(v26 + 256))
            sub_1C61E5C60(v250, v100 + 1, v26 + 264);
          v101 = (_QWORD *)(*v250 + 56 * v100);
          v103 = (llvm::MachineInstr **)v101[5];
          v102 = v101[6];
          if ((unint64_t)v103 >= v102)
          {
            v105 = (_QWORD *)v101[4];
            v106 = v103 - (llvm::MachineInstr **)v105;
            v107 = v106 + 1;
            if ((unint64_t)(v106 + 1) >> 61)
              goto LABEL_342;
            v108 = v102 - (_QWORD)v105;
            if (v108 >> 2 > v107)
              v107 = v108 >> 2;
            if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8)
              v107 = 0x1FFFFFFFFFFFFFFFLL;
            if (v107)
            {
              if (v107 >> 61)
                goto LABEL_343;
              v109 = v107;
              v110 = (char *)operator new(8 * v107);
            }
            else
            {
              v109 = 0;
              v110 = 0;
            }
            v111 = (llvm::MachineInstr **)&v110[8 * v106];
            *v111 = v99;
            v104 = v111 + 1;
            if (v103 != v105)
            {
              do
              {
                v112 = *--v103;
                *--v111 = v112;
              }
              while (v103 != v105);
              v103 = (llvm::MachineInstr **)v101[4];
            }
            v101[4] = v111;
            v101[5] = v104;
            v101[6] = &v110[8 * v109];
            v7 = (uint64_t)v248;
            if (v103)
              operator delete(v103);
          }
          else
          {
            *v103 = v99;
            v104 = v103 + 1;
          }
          v101[5] = v104;
        }
LABEL_155:
        v94 = v270;
      }
      while ((_DWORD)v270);
    }
    if (v236)
      llvm::LiveVariables::addNewBlock(v26, v9, v7, (uint64_t)v244, v236);
    else
      llvm::LiveVariables::addNewBlock((llvm::LiveVariables *)v26, (llvm::MachineBasicBlock *)v9, (llvm::MachineBasicBlock *)v7, v244);
  }
  v113 = (uint64_t)v244;
  v114 = v241;
  if ((v239 & 1) == 0)
  {
    v115 = v242[49];
    v116 = *(_QWORD *)(*(_QWORD *)&v115 + 16 * *(unsigned int *)(v7 + 24) + 8);
    v117 = (v116 >> 1) & 3;
    v118 = v116 & 0xFFFFFFFFFFFFFFF8;
    if (v117)
      v119 = v118 | (2 * (v117 - 1));
    else
      v119 = *(_QWORD *)v118 | 6;
    v120 = v252;
    v121 = *(_QWORD *)(v7 + 32);
    v243 = *(_QWORD *)(v9 + 8);
    v251 = *(_QWORD *)(*(_QWORD *)&v115 + 16 * *(unsigned int *)(v9 + 24) + 8);
    v257 = v259;
    v258 = 0x800000000;
    v261 = 0;
    v262 = 0;
    v260 = &v261;
    v122 = *((_QWORD *)v244 + 7);
    if ((llvm::MachineBasicBlock *)v122 == (llvm::MachineBasicBlock *)((char *)v244 + 48))
    {
      v148 = v121;
    }
    else
    {
      v234 = v121;
      v235 = v119;
      v123 = v119 & 0xFFFFFFFFFFFFFFF8;
      v124 = (v119 >> 1) & 3;
      while (!**(_WORD **)(v122 + 16) || **(_WORD **)(v122 + 16) == 69)
      {
        v125 = *(_DWORD *)(v122 + 40);
        if (v125 != 1)
        {
          v126 = 1;
          while (1)
          {
            v127 = *(_QWORD *)(v122 + 32);
            if (*(_QWORD *)(v127 + 32 * (v126 + 1) + 16) == v9)
            {
              v128 = v127 + 32 * v126;
              LODWORD(v256[0]) = *(_DWORD *)(v128 + 4);
              sub_1C484FF44((uint64_t)&v257, (unsigned int *)v256);
              if ((*(_BYTE *)(v128 + 3) & 0x10) == 0)
                break;
            }
LABEL_191:
            v126 += 2;
            if (v126 == v125)
              goto LABEL_168;
          }
          v129 = v256[0] & 0x7FFFFFFF;
          if (v129 >= *(unsigned int *)(v252 + 416)
            || (v130 = *(llvm::LiveInterval **)(*(_QWORD *)(v252 + 408) + 8 * v129)) == 0)
          {
            v130 = (llvm::LiveInterval *)sub_1C4851220(v252, v256[0]);
            v233 = *(_QWORD *)(v252 + 304);
            v143 = *(_QWORD *)(v252 + 248);
            *(_QWORD *)v233 = v143;
            *(_QWORD *)(v233 + 8) = *(_QWORD *)(v143 + 40);
            *(_OWORD *)(v233 + 16) = *(_OWORD *)(v252 + 288);
            *(_QWORD *)(v233 + 32) = v252 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v233);
            *(_DWORD *)(v233 + 184) = 0;
            v144 = *(_QWORD *)(v252 + 256);
            v146 = *(_BYTE *)(v144 + 16) == 0;
            v145 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v144 + 24)
                                                   + 16 * (*((_DWORD *)v130 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v146 = v146 || v145 == 0;
            v147 = !v146;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v252 + 304), v130, v147);
            llvm::LiveIntervals::computeDeadValues(v252, (uint64_t)v130, 0);
          }
          v131 = *((_DWORD *)v130 + 2);
          v132 = *(_QWORD **)v130;
          if (v131)
          {
            v133 = v132[3 * v131 - 2];
            v134 = *(_DWORD *)(v123 + 24) | v124;
            v135 = (v133 >> 1) & 3 | *(_DWORD *)((v133 & 0xFFFFFFFFFFFFFFF8) + 24);
            v136 = *(_QWORD **)v130;
            v137 = *((unsigned int *)v130 + 2);
            if (v134 < v135)
            {
              do
              {
                v138 = v137 >> 1;
                v139 = v136[3 * (v137 >> 1) + 1];
                LODWORD(v139) = (v139 >> 1) & 3 | *(_DWORD *)((v139 & 0xFFFFFFFFFFFFFFF8) + 24);
                v137 -= (v137 >> 1) + 1;
                v140 = v134 >= v139;
                if (v134 >= v139)
                  v141 = v138 + 1;
                else
                  v141 = 0;
                v136 += 3 * v141;
                if (!v140)
                  v137 = v138;
              }
              while (v137);
              goto LABEL_186;
            }
          }
          else
          {
            v131 = 0;
          }
          v136 = &v132[3 * v131];
LABEL_186:
          if (v136 == &v132[3 * v131]
            || ((*v136 >> 1) & 3 | *(_DWORD *)((*v136 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v123 + 24) | v124))
          {
            v142 = 0;
          }
          else
          {
            v142 = v136[2];
          }
          v254[0] = v116;
          v254[1] = v251;
          v254[2] = v142;
          llvm::LiveRange::addSegment((uint64_t)v130, (uint64_t)v254);
          goto LABEL_191;
        }
LABEL_168:
        v122 = *(_QWORD *)(v122 + 8);
        if ((llvm::MachineBasicBlock *)v122 == (llvm::MachineBasicBlock *)((char *)v244 + 48))
          break;
      }
      v148 = *((_QWORD *)v248 + 4);
      v113 = (uint64_t)v244;
      v120 = v252;
      v119 = v235;
      v118 = v116 & 0xFFFFFFFFFFFFFFF8;
      v121 = v234;
    }
    v149 = *(_DWORD *)(*(_QWORD *)(v148 + 40) + 32);
    if (v149)
    {
      v150 = 0;
      v151 = v121 + 320;
      v152 = v119 & 0xFFFFFFFFFFFFFFF8;
      v153 = (v119 >> 1) & 3;
      v245 = (llvm::MachineBasicBlock *)(v119 & 0xFFFFFFFFFFFFFFF8);
      v247 = v121 + 320;
      v237 = v153;
      while (1)
      {
        v154 = v150 | 0x80000000;
        if (v262)
        {
          for (j = v261; j; j = (_QWORD *)*j)
          {
            v156 = *((_DWORD *)j + 7);
            if (v154 >= v156)
            {
              if (v156 >= v154)
                goto LABEL_274;
              ++j;
            }
          }
        }
        else if ((_DWORD)v258)
        {
          v157 = v257;
          v158 = 4 * v258;
          while (*v157 != v154)
          {
            ++v157;
            v158 -= 4;
            if (!v158)
              goto LABEL_217;
          }
          if (v158)
            goto LABEL_274;
        }
LABEL_217:
        if ((v150 & 0x7FFFFFFFu) >= *(_DWORD *)(v120 + 416))
          goto LABEL_274;
        v159 = *(_QWORD *)(*(_QWORD *)(v120 + 408) + 8 * (v150 & 0x7FFFFFFF));
        if (!v159)
          goto LABEL_274;
        v160 = *(_DWORD *)(v159 + 8);
        v161 = *(char **)v159;
        if (!v160)
          break;
        v162 = *(_QWORD *)&v161[24 * v160 - 16];
        v163 = *(_DWORD *)(v152 + 24) | v153;
        v164 = (v162 >> 1) & 3 | *(_DWORD *)((v162 & 0xFFFFFFFFFFFFFFF8) + 24);
        v165 = *(char **)v159;
        v166 = *(unsigned int *)(v159 + 8);
        if (v163 >= v164)
        {
          v171 = *(unsigned int *)(v159 + 8);
LABEL_230:
          v165 = &v161[24 * v171];
          goto LABEL_231;
        }
        do
        {
          v167 = v166 >> 1;
          v168 = *(_QWORD *)&v165[24 * (v166 >> 1) + 8];
          LODWORD(v168) = (v168 >> 1) & 3 | *(_DWORD *)((v168 & 0xFFFFFFFFFFFFFFF8) + 24);
          v166 -= (v166 >> 1) + 1;
          v169 = v163 >= v168;
          if (v163 >= v168)
            v170 = v167 + 1;
          else
            v170 = 0;
          v165 += 24 * v170;
          if (!v169)
            v166 = v167;
        }
        while (v166);
        v171 = *(unsigned int *)(v159 + 8);
LABEL_231:
        v172 = &v161[24 * v171];
        if (v165 != v172)
        {
          v173 = (*(_QWORD *)v165 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v165 & 0xFFFFFFFFFFFFFFF8) + 24);
          v174 = *(_DWORD *)(v152 + 24) | v153;
          if (v173 <= v174)
          {
            v175 = &v161[24 * v171];
            if (v160)
            {
              v176 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v120 + 288) + 392) + 16 * *(unsigned int *)(v113 + 24));
              v177 = v176 & 0xFFFFFFFFFFFFFFF8;
              v178 = *(_DWORD *)((v176 & 0xFFFFFFFFFFFFFFF8) + 24);
              v179 = (v176 >> 1) & 3;
              v180 = v178 | v179;
              if (v180 >= ((*((_QWORD *)v172 - 2) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v172 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 24)))
                goto LABEL_248;
              v181 = *(char **)v159;
              v182 = v171;
              do
              {
                v183 = v182 >> 1;
                v184 = *(_QWORD *)&v181[24 * (v182 >> 1) + 8];
                LODWORD(v184) = (v184 >> 1) & 3 | *(_DWORD *)((v184 & 0xFFFFFFFFFFFFFFF8) + 24);
                v182 -= (v182 >> 1) + 1;
                v185 = v180 >= v184;
                if (v180 >= v184)
                  v186 = v183 + 1;
                else
                  v186 = 0;
                v181 += 24 * v186;
                if (!v185)
                  v182 = v183;
              }
              while (v182);
              if (v181 == v172)
                goto LABEL_248;
              v187 = (*(_QWORD *)v181 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v181 & 0xFFFFFFFFFFFFFFF8) + 24);
              v188 = *(_DWORD *)(v177 + 24) | v179;
              v189 = v187 > v188;
              v190 = v187 <= v188;
              if (!v189 && v243 == v151)
              {
                if (v174 >= ((*((_QWORD *)v172 - 2) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v172 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 24)))
                  goto LABEL_269;
                do
                {
                  v198 = v171 >> 1;
                  v199 = *(_QWORD *)&v161[24 * (v171 >> 1) + 8];
                  LODWORD(v199) = (v199 >> 1) & 3 | *(_DWORD *)((v199 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v171 -= (v171 >> 1) + 1;
                  v200 = v174 >= v199;
                  if (v174 >= v199)
                    v201 = v198 + 1;
                  else
                    v201 = 0;
                  v161 += 24 * v201;
                  if (!v200)
                    v171 = v198;
                }
                while (v171);
                if (v161 == v172
                  || ((*(_QWORD *)v161 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v161 & 0xFFFFFFFFFFFFFFF8)
                                                                           + 24)) > v174)
                {
LABEL_269:
                  v202 = 0;
                }
                else
                {
                  v202 = *((_QWORD *)v161 + 2);
                }
                v253[0] = v116;
                v253[1] = v251;
                v253[2] = v202;
                llvm::LiveRange::addSegment(v159, (uint64_t)v253);
                v152 = (unint64_t)v245;
                v151 = v247;
                v153 = v237;
                goto LABEL_274;
              }
              if (!v190)
              {
LABEL_248:
                if (v243 != v151)
                {
                  v192 = *(_DWORD *)(v118 + 24) | v117;
                  if (v192 < ((*((_QWORD *)v172 - 2) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v172 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 24)))
                  {
                    v175 = *(char **)v159;
                    do
                    {
                      v193 = v171 >> 1;
                      v194 = *(_QWORD *)&v175[24 * (v171 >> 1) + 8];
                      LODWORD(v194) = (v194 >> 1) & 3 | *(_DWORD *)((v194 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v171 -= (v171 >> 1) + 1;
                      v195 = v192 >= v194;
                      if (v192 >= v194)
                        v196 = v193 + 1;
                      else
                        v196 = 0;
                      v175 += 24 * v196;
                      if (!v195)
                        v171 = v193;
                    }
                    while (v171);
                  }
LABEL_257:
                  v197 = *((_QWORD *)v175 + 1);
                  if (*(_QWORD *)v175 == v116)
                  {
                    if (v197 == v251)
                    {
                      if (v172 != v175 + 24)
                      {
                        memmove(v175, v175 + 24, v172 - (v175 + 24));
                        v153 = v237;
                        v152 = (unint64_t)v245;
                        v151 = v247;
                        v160 = *(_DWORD *)(v159 + 8);
                      }
                      *(_DWORD *)(v159 + 8) = v160 - 1;
                    }
                    else
                    {
                      *(_QWORD *)v175 = v251;
                    }
                  }
                  else
                  {
                    v203 = *((_QWORD *)v175 + 2);
                    *((_QWORD *)v175 + 1) = v116;
                    if (v197 != v251)
                    {
                      v256[0] = v251;
                      v256[1] = v197;
                      v256[2] = v203;
                      sub_1C510F69C(v159, (uint64_t)(v175 + 24), (unint64_t)v256);
                      v153 = v237;
                      v152 = (unint64_t)v245;
                      v151 = v247;
                    }
                  }
                }
              }
            }
            else if (v243 != v151)
            {
              goto LABEL_257;
            }
          }
        }
LABEL_274:
        if (++v150 == v149)
          goto LABEL_282;
      }
      v171 = 0;
      goto LABEL_230;
    }
LABEL_282:
    v7 = (uint64_t)v248;
    FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v248);
    llvm::LiveIntervals::repairIntervalsInRange(v120, v7, FirstTerminator, v7 + 48, v266, v267);
    sub_1C47655E8((uint64_t)&v260, v261);
    if (v257 != v259)
      free(v257);
    v114 = v241;
  }
  v205 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(v114 + 8) + 24), &llvm::MachineDominatorTree::ID, 1);
  if (v205)
  {
    v206 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v205 + 96))(v205, &llvm::MachineDominatorTree::ID);
    if (v206)
      sub_1C61E97B8(v206, v7, v113, v9);
  }
  v207 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(v114 + 8) + 24), &llvm::MachineLoopInfo::ID, 1);
  if (v207)
  {
    v208 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v207 + 96))(v207, &llvm::MachineLoopInfo::ID);
    if (v208)
    {
      v209 = v208 + 248;
      v210 = *(_QWORD *)(v208 + 248);
      v211 = *(_DWORD *)(v208 + 264);
      if (v211)
      {
        v212 = v211 - 1;
        LODWORD(v213) = v212 & ((v7 >> 4) ^ (v7 >> 9));
        v214 = (uint64_t *)(v210 + 16 * v213);
        v215 = *v214;
        if (*v214 == v7)
        {
          v218 = (_QWORD *)v214[1];
          if (v218)
          {
LABEL_317:
            v227 = v212 & ((v113 >> 4) ^ (v113 >> 9));
            v228 = *(_QWORD *)(v210 + 16 * v227);
            if (v228 == v113)
            {
LABEL_321:
              v231 = *(_QWORD ***)(v210 + 16 * v227 + 8);
              if (v231)
              {
                if (v218 != v231)
                {
                  v232 = v231;
                  while (v232)
                  {
                    v232 = (_QWORD *)*v232;
                    if (v232 == v218)
                      goto LABEL_333;
                  }
                  while (v218)
                  {
                    v218 = (_QWORD *)*v218;
                    if (v218 == v231)
                    {
                      v218 = v231;
                      goto LABEL_333;
                    }
                  }
                  v218 = *v231;
                  if (!*v231)
                    goto LABEL_334;
                }
LABEL_333:
                llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::addBasicBlockToLoop(v218, v9, v209);
              }
            }
            else
            {
              v229 = 1;
              while (v228 != -4096)
              {
                v230 = v227 + v229++;
                v227 = v230 & v212;
                v228 = *(_QWORD *)(v210 + 16 * v227);
                if (v228 == v113)
                  goto LABEL_321;
              }
            }
          }
        }
        else
        {
          v216 = 1;
          while (v215 != -4096)
          {
            v217 = v213 + v216++;
            v213 = v217 & v212;
            v215 = *(_QWORD *)(v210 + 16 * v213);
            if (v215 == v7)
            {
              v218 = *(_QWORD **)(v210 + 16 * v213 + 8);
              if (!v218)
                break;
              goto LABEL_317;
            }
          }
        }
      }
    }
  }
LABEL_334:
  if (v263 != v265)
    free(v263);
  if (v266 != v268)
    free(v266);
  if (v269 != (_DWORD *)v271)
    free(v269);
  if (v255)
    llvm::MetadataTracking::untrack((uint64_t)&v255, v255);
  return v9;
}

uint64_t llvm::MachineBasicBlock::canSplitCriticalEdge(llvm::MachineBasicBlock *this, const llvm::MachineBasicBlock *a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  _QWORD v12[17];

  v12[16] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 184))
    return 0;
  if (*((_BYTE *)a2 + 202))
    return 0;
  v2 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 8) + 592) & 1) != 0)
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 104))(*(_QWORD *)(v2 + 16));
  v9 = 0;
  v10 = 0;
  v11[0] = v12;
  v11[1] = (void *)0x400000000;
  v6 = (*(uint64_t (**)(uint64_t, llvm::MachineBasicBlock *, uint64_t *, uint64_t *, void **, _QWORD))(*(_QWORD *)v5 + 248))(v5, this, &v10, &v9, v11, 0);
  v7 = 0;
  if ((v6 & 1) == 0)
  {
    if (v10)
      v8 = v10 == v9;
    else
      v8 = 0;
    v7 = !v8;
  }
  if (v11[0] != v12)
    free(v11[0]);
  return v7;
}

uint64_t sub_1C512C5A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  char v38;

  v4 = *a2;
  v5 = sub_1C484358C(a1 + 248, 32, 3);
  v6 = v5;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 24) = 0;
  v7 = *(unsigned int *)(v4 + 24);
  v8 = (int)v7;
  v9 = *(_QWORD *)(a1 + 392);
  v10 = *(_QWORD *)(v9 + 16 * v7 + 8) & 0xFFFFFFFFFFFFFFF8;
  v11 = (uint64_t *)v10;
  if (a2 + 6 != (uint64_t *)(a2[6] & 0xFFFFFFFFFFFFFFF8))
  {
    v12 = a2[7];
    v13 = *(_WORD *)(v12 + 44);
    v14 = v12;
    if ((v13 & 4) != 0)
    {
      v14 = a2[7];
      do
        v14 = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v14 + 44) & 4) != 0);
    }
    if ((v13 & 8) != 0)
    {
      do
        v12 = *(_QWORD *)(v12 + 8);
      while ((*(_WORD *)(v12 + 44) & 8) != 0);
    }
    v15 = *(_QWORD *)(v12 + 8);
    if (v14 != v15)
    {
      while (1)
      {
        v16 = **(unsigned __int16 **)(v14 + 16);
        v17 = v16 > 0x17;
        v18 = (1 << v16) & 0x83E000;
        if (v17 || v18 == 0)
          break;
        v14 = *(_QWORD *)(v14 + 8);
        if (v14 == v15)
        {
          v14 = v15;
          break;
        }
      }
    }
    v20 = *(_QWORD *)(a1 + 368);
    v21 = *(unsigned int *)(a1 + 384);
    if ((_DWORD)v21)
    {
      LODWORD(v22) = ((v14 >> 4) ^ (v14 >> 9)) & (v21 - 1);
      v23 = (uint64_t *)(v20 + 16 * v22);
      v24 = *v23;
      if (v14 == *v23)
      {
LABEL_18:
        v11 = (uint64_t *)(v23[1] & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_19;
      }
      v25 = 1;
      while (v24 != -4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v24 = *(_QWORD *)(v20 + 16 * v22);
        if (v14 == v24)
        {
          v23 = (uint64_t *)(v20 + 16 * v22);
          goto LABEL_18;
        }
      }
    }
    v23 = (uint64_t *)(v20 + 16 * v21);
    goto LABEL_18;
  }
LABEL_19:
  v27 = *v11;
  *(_QWORD *)v5 = *v11;
  *(_QWORD *)(v5 + 8) = v11;
  *(_QWORD *)(v27 + 8) = v5;
  *v11 = v5;
  v28 = v5 & 0xFFFFFFFFFFFFFFF9;
  *(_QWORD *)(v9 + 16 * v8 + 8) = v5 & 0xFFFFFFFFFFFFFFF9;
  v29 = *(unsigned int *)(a1 + 400);
  if (v29 >= *(_DWORD *)(a1 + 404))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 392, a1 + 408, v29 + 1, 16);
    v9 = *(_QWORD *)(a1 + 392);
    LODWORD(v29) = *(_DWORD *)(a1 + 400);
  }
  v30 = (unint64_t *)(v9 + 16 * v29);
  *v30 = v28;
  v30[1] = v10;
  ++*(_DWORD *)(a1 + 400);
  v31 = *(unsigned int *)(a1 + 544);
  if (v31 >= *(_DWORD *)(a1 + 548))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 536, a1 + 552, v31 + 1, 16);
    LODWORD(v31) = *(_DWORD *)(a1 + 544);
  }
  v32 = (unint64_t *)(*(_QWORD *)(a1 + 536) + 16 * v31);
  *v32 = v28;
  v32[1] = (unint64_t)a2;
  v33 = (*(_DWORD *)(a1 + 544) + 1);
  *(_DWORD *)(a1 + 544) = v33;
  v34 = *(_DWORD *)(*(_QWORD *)v6 + 24);
  do
  {
    v34 += 8;
    *(_DWORD *)(v6 + 24) = v34;
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6 != a1 + 344 && *(_DWORD *)(v6 + 24) <= v34);
  v35 = 126 - 2 * __clz(v33);
  if ((_DWORD)v33)
    v36 = v35;
  else
    v36 = 0;
  return sub_1C512D000(*(_QWORD *)(a1 + 536), (uint64_t *)(*(_QWORD *)(a1 + 536) + 16 * v33), (uint64_t)&v38, v36, 1);
}

uint64_t llvm::MachineBasicBlock::erase(uint64_t a1, uint64_t a2)
{
  sub_1C512C844(a2);
  return sub_1C512C89C(a1 + 40, a2);
}

uint64_t sub_1C512C844(uint64_t result)
{
  __int16 v1;

  v1 = *(_WORD *)(result + 44);
  if ((v1 & 0xC) == 8)
  {
    *(_WORD *)(result + 44) = v1 & 0xFFF7;
    *(_WORD *)(*(_QWORD *)(result + 8) + 44) &= ~4u;
    v1 = *(_WORD *)(result + 44);
  }
  if ((v1 & 0xC) == 4)
  {
    *(_WORD *)(result + 44) = v1 & 0xFFFB;
    *(_WORD *)((*(_QWORD *)result & 0xFFFFFFFFFFFFFFF8) + 44) &= ~8u;
  }
  return result;
}

uint64_t sub_1C512C89C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 728);
    if (v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2);
    v7 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)(a2 + 32);
      v9 = *(_QWORD *)(v5 + 40);
      v10 = 32 * v7;
      do
      {
        if (!*(_BYTE *)v8)
        {
          v11 = *(unsigned int *)(v8 + 4);
          if ((v11 & 0x80000000) != 0)
            v12 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
          else
            v12 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * v11);
          v13 = *v12;
          v15 = *(_QWORD *)(v8 + 16);
          v14 = *(_QWORD *)(v8 + 24);
          if (v8 != *v12)
            v12 = (uint64_t *)(v15 + 24);
          *v12 = v14;
          if (v14)
            v16 = v14;
          else
            v16 = v13;
          *(_QWORD *)(v16 + 16) = v15;
          *(_QWORD *)(v8 + 16) = 0;
          *(_QWORD *)(v8 + 24) = 0;
        }
        v8 += 32;
        v10 -= 32;
      }
      while (v10);
    }
  }
  *(_QWORD *)(a2 + 24) = 0;
  v17 = *(unint64_t **)(a2 + 8);
  v18 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  *v17 = v18 | *v17 & 7;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)a2 &= 7uLL;
  *(_QWORD *)(a2 + 8) = 0;
  v19 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v20 = *(_QWORD **)(a2 + 32);
  if (v20)
  {
    v21 = *(unsigned __int8 *)(a2 + 47);
    v22 = (uint64_t *)(v19 + 232);
    if (*(_DWORD *)(v19 + 240) <= v21)
      sub_1C515FA1C(v19 + 232, v21 + 1);
    v23 = *v22;
    *v20 = *(_QWORD *)(*v22 + 8 * v21);
    *(_QWORD *)(v23 + 8 * v21) = v20;
  }
  *(_QWORD *)a2 = *(_QWORD *)(v19 + 224);
  *(_QWORD *)(v19 + 224) = a2;
  return v4;
}

uint64_t llvm::MachineBasicBlock::insert(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 + 48 != a2 && (*(_WORD *)(a2 + 44) & 4) != 0)
    *(_WORD *)(a3 + 44) |= 0xCu;
  return sub_1C512CA10((uint64_t *)(a1 + 40), (uint64_t *)a2, a3);
}

uint64_t sub_1C512CA10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = *a1;
  *(_QWORD *)(a3 + 24) = *a1;
  v6 = *(_QWORD *)(v5 + 32);
  llvm::MachineInstr::addRegOperandsToUseLists(a3, *(_QWORD *)(v6 + 40));
  v7 = *(_QWORD *)(v6 + 728);
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, a3);
  v8 = *a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)a3 = v8 | *(_QWORD *)a3 & 7;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(v8 + 8) = a3;
  *a2 = *a2 & 7 | a3;
  return a3;
}

uint64_t *llvm::MachineBasicBlock::removeFromParent(uint64_t *this)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(*(_QWORD *)(this[4] + 104) + 8 * *((unsigned int *)this + 6)) = 0;
  *((_DWORD *)this + 6) = -1;
  v1 = *this;
  v2 = (_QWORD *)this[1];
  *v2 = *this;
  *(_QWORD *)(v1 + 8) = v2;
  *this = 0;
  this[1] = 0;
  return this;
}

void llvm::MachineBasicBlock::eraseFromParent(llvm::MachineBasicBlock *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *((_QWORD *)this + 4);
  v3 = v2 + 320;
  *(_QWORD *)(*(_QWORD *)(v2 + 104) + 8 * *((unsigned int *)this + 6)) = 0;
  *((_DWORD *)this + 6) = -1;
  v4 = *(_QWORD *)this;
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  *v5 = *(_QWORD *)this;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v3, this);
}

uint64_t llvm::MachineBasicBlock::findDebugLoc@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X8>)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  unsigned __int8 *v7;

  if (result + 48 == a2)
  {
LABEL_10:
    *a3 = 0;
  }
  else
  {
    while (1)
    {
      v3 = **(unsigned __int16 **)(a2 + 16);
      v4 = v3 > 0x17;
      v5 = (1 << v3) & 0x83E000;
      if (v4 || v5 == 0)
        break;
      a2 = *(_QWORD *)(a2 + 8);
      if (a2 == result + 48)
        goto LABEL_10;
    }
    v7 = *(unsigned __int8 **)(a2 + 56);
    *a3 = v7;
    if (v7)
      return llvm::MetadataTracking::track((uint64_t)a3, v7, 2);
  }
  return result;
}

uint64_t llvm::MachineBasicBlock::rfindDebugLoc@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, unsigned __int8 **a3@<X8>)
{
  unint64_t v3;
  int v4;
  unsigned __int8 *v6;

  v3 = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFFF8;
  if (a2 != v3)
  {
    while (1)
    {
      v4 = **(unsigned __int16 **)(a2 + 16);
      if ((v4 - 13) >= 5 && v4 != 23)
        break;
      a2 = *(_QWORD *)(a2 + 8);
      if (a2 == v3)
      {
        a2 = *(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFFF8;
        break;
      }
    }
  }
  if (**(unsigned __int16 **)(a2 + 16) - 13 >= 5)
  {
    v6 = *(unsigned __int8 **)(a2 + 56);
    *a3 = v6;
    if (v6)
      return llvm::MetadataTracking::track((uint64_t)a3, v6, 2);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::MachineBasicBlock::findPrevDebugLoc@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, unsigned __int8 **a3@<X8>)
{
  unint64_t v3;
  uint64_t i;
  unint64_t v5;
  int v6;
  unsigned __int8 *v8;

  v3 = *(_QWORD *)(result + 56);
  if ((uint64_t *)v3 == a2)
    goto LABEL_11;
  for (i = *a2; ; i = *(_QWORD *)v5)
  {
    v5 = i & 0xFFFFFFFFFFFFFFF8;
    if (v3 == v5)
      break;
    v6 = **(unsigned __int16 **)(v5 + 16);
    if ((v6 - 13) >= 5 && v6 != 23)
    {
      v3 = v5;
      break;
    }
  }
  if (**(unsigned __int16 **)(v3 + 16) - 13 < 5)
  {
LABEL_11:
    *a3 = 0;
  }
  else
  {
    v8 = *(unsigned __int8 **)(v3 + 56);
    *a3 = v8;
    if (v8)
      return llvm::MetadataTracking::track((uint64_t)a3, v8, 2);
  }
  return result;
}

uint64_t llvm::MachineBasicBlock::rfindPrevDebugLoc@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, unsigned __int8 **a3@<X8>)
{
  uint64_t i;
  unint64_t v4;
  int v5;
  unsigned __int8 *v7;

  if ((uint64_t *)(result + 48) != a2)
  {
    for (i = *a2; ; i = *(_QWORD *)v4)
    {
      v4 = i & 0xFFFFFFFFFFFFFFF8;
      if (result + 48 == v4)
        break;
      v5 = **(unsigned __int16 **)(v4 + 16);
      if ((v5 - 13) >= 5 && v5 != 23)
      {
        v7 = *(unsigned __int8 **)(v4 + 56);
        *a3 = v7;
        if (v7)
          return llvm::MetadataTracking::track((uint64_t)a3, v7, 2);
        return result;
      }
    }
  }
  *a3 = 0;
  return result;
}

uint64_t llvm::MachineBasicBlock::computeRegisterLiveness(_QWORD *a1, uint64_t a2, unsigned int a3, _QWORD *a4, int a5)
{
  int v5;
  unint64_t v6;
  _QWORD *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v17;
  int v18;
  int v19;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned int v28;
  uint64_t result;
  unint64_t v30;
  int v31;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  _QWORD *v35;
  unsigned int v36;

  v5 = a5;
  v6 = (unint64_t)a4;
  v10 = a1 + 6;
  v11 = a1 + 6 == a4 || a5 == 0;
  v12 = (unint64_t)a4;
  if (!v11)
  {
    v18 = a5;
    v12 = (unint64_t)a4;
    do
    {
      v19 = **(unsigned __int16 **)(v12 + 16);
      if ((v19 - 13) >= 5 && v19 != 23)
      {
        v22 = llvm::AnalyzePhysRegInBundle(v12, a3, a2);
        if ((v22 & 0x1000000) != 0)
          return 0;
        if ((*(_QWORD *)&v22 & 0x10001) != 0)
          return 1;
        --v18;
      }
      if ((*(_BYTE *)v12 & 4) == 0)
      {
        while ((*(_WORD *)(v12 + 44) & 8) != 0)
          v12 = *(_QWORD *)(v12 + 8);
      }
      v12 = *(_QWORD *)(v12 + 8);
    }
    while ((_QWORD *)v12 != v10 && v18 != 0);
  }
  if ((_QWORD *)v12 == v10)
  {
    v23 = a1[11];
    v24 = a1[12];
    if (v23 != v24)
    {
      v25 = (_QWORD *)(a2 + 8);
      do
      {
        v26 = *(unsigned __int16 **)(*(_QWORD *)v23 + 152);
        v27 = *(unsigned __int16 **)(*(_QWORD *)v23 + 160);
        while (v26 != v27)
        {
          v28 = *v26;
          if (v28 == a3
            || a3 - 1 <= 0x3FFFFFFE && v28 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v25, v28, a3))
          {
            return 0;
          }
          v26 += 8;
        }
        v23 += 8;
        result = 1;
      }
      while (v23 != v24);
      return result;
    }
    return 1;
  }
  v13 = a1[7];
  if (v13 == v6)
  {
LABEL_77:
    v33 = (unsigned __int16 *)a1[19];
    v34 = (unsigned __int16 *)a1[20];
    if (v33 != v34)
    {
      v35 = (_QWORD *)(a2 + 8);
      while (1)
      {
        v36 = *v33;
        if (v36 == a3
          || a3 - 1 <= 0x3FFFFFFE && v36 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v35, v36, a3))
        {
          break;
        }
        v33 += 8;
        if (v33 == v34)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  while (1)
  {
    v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
    if (!v6 || (*(_BYTE *)v6 & 4) == 0)
    {
      while ((*(_WORD *)(v6 + 44) & 4) != 0)
        v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
    }
    v14 = **(unsigned __int16 **)(v6 + 16);
    if ((v14 - 13) < 5 || v14 == 23)
      goto LABEL_18;
    v17 = llvm::AnalyzePhysRegInBundle(v6, a3, a2);
    if ((v17 & 0x10000000000) != 0)
      return 1;
    if ((v17 & 0x100) != 0)
      break;
    if ((v17 & 0x100000000000001) != 0)
      return 1;
    if ((v17 & 0x1000000) != 0)
      return 0;
    --v5;
    v13 = a1[7];
LABEL_18:
    if (v6 == v13 || v5 == 0)
    {
      while (1)
      {
LABEL_76:
        if (v6 == v13)
          goto LABEL_77;
        v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
        if (!v6)
          break;
        v30 = v6;
        if ((*(_BYTE *)v6 & 4) == 0)
          goto LABEL_65;
LABEL_66:
        v31 = **(unsigned __int16 **)(v30 + 16);
        if ((v31 - 13) >= 5 && v31 != 23)
          return 2;
        if (!v6 || (*(_BYTE *)v6 & 4) == 0)
        {
          while ((*(_WORD *)(v6 + 44) & 4) != 0)
            v6 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v30 = 0;
LABEL_65:
      while ((*(_WORD *)(v30 + 44) & 4) != 0)
        v30 = *(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_66;
    }
  }
  if ((v17 & 0x1000000000000) != 0)
  {
    v13 = a1[7];
    goto LABEL_76;
  }
  return 0;
}

uint64_t llvm::MachineBasicBlock::getBeginClobberMask(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 189))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  else
    return 0;
}

uint64_t llvm::MachineBasicBlock::getEndClobberMask(uint64_t a1, uint64_t a2)
{
  if (!sub_1C498FBAC(a1) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
    return 0;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
}

uint64_t llvm::MachineBasicBlock::livein_begin(llvm::MachineBasicBlock *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t sub_1C512D000(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v22 = *v9;
        v23 = *(a2 - 2);
        if (((v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v9 >> 1) & 3))
        {
          v24 = v9[1];
          v25 = *(a2 - 1);
          *v9 = v23;
          v9[1] = v25;
          *(a2 - 2) = v22;
          *(a2 - 1) = v24;
        }
        return result;
      case 3uLL:
        return sub_1C512D4CC(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return sub_1C512D9F8(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return sub_1C512DAF8(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_1C512D37C(v9, a2);
          else
            return (uint64_t)sub_1C512D430(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_1C512D4CC(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1C512D4CC(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            sub_1C512D4CC(v9 + 2, v15 - 2, a2 - 4);
            sub_1C512D4CC(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            sub_1C512D4CC(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *v9;
            v17 = v9[1];
            v18 = v15[1];
            *v9 = *v15;
            v9[1] = v18;
            *v15 = v16;
            v15[1] = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*(v9 - 2) >> 1) & 3 | *(_DWORD *)((*(v9 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v9 >> 1) & 3))
          {
            result = (uint64_t)sub_1C512D5DC(v9, a2);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v19 = sub_1C512D708(v9, a2);
          if ((v20 & 1) == 0)
            goto LABEL_15;
          v21 = sub_1C512D828(v9, v19);
          v9 = v19 + 2;
          result = sub_1C512D828(v19 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_15:
            result = sub_1C512D000(v8, v19, a3, -v11, a5 & 1);
            v9 = v19 + 2;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_1C512DC48((char *)v9, (char *)a2, (char *)a2, a3);
        return result;
    }
  }
}

uint64_t *sub_1C512D37C(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *v4;
        v7 = v4[2];
        v8 = (v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v8 < (*(_DWORD *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v4 >> 1) & 3))
        {
          v9 = v4[3];
          v10 = v3;
          while (1)
          {
            v11 = (char *)result + v10;
            v12 = *(uint64_t *)((char *)result + v10 + 8);
            *((_QWORD *)v11 + 2) = v6;
            *((_QWORD *)v11 + 3) = v12;
            if (!v10)
              break;
            v6 = *((_QWORD *)v11 - 2);
            v10 -= 16;
            if (v8 >= ((v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24)))
            {
              v13 = (uint64_t *)((char *)result + v10 + 16);
              goto LABEL_10;
            }
          }
          v13 = result;
LABEL_10:
          *v13 = v7;
          v13[1] = v9;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t *sub_1C512D430(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = result + 3;
      do
      {
        v4 = v2;
        v5 = *result;
        v6 = result[2];
        v7 = (v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v7 < (*(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24) | (*result >> 1) & 3))
        {
          v8 = result[3];
          v9 = v3;
          do
          {
            v10 = v9;
            *(v9 - 1) = v5;
            v11 = *(v9 - 2);
            v9 -= 2;
            *v10 = v11;
            v5 = *(v10 - 5);
          }
          while (v7 < ((v5 >> 1) & 3 | *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24)));
          *(v9 - 1) = v6;
          *v9 = v8;
        }
        v2 = v4 + 2;
        v3 += 2;
        result = v4;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1C512D4CC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a1;
  v4 = *a2;
  v5 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v6 = *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3;
  v7 = *a3;
  v8 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v5 < v6)
  {
    if (v8 < v5)
    {
      v9 = a1[1];
      v10 = a3[1];
      *a1 = v7;
      a1[1] = v10;
      *a3 = v3;
      a3[1] = v9;
      return 1;
    }
    v16 = a1[1];
    v17 = a2[1];
    *a1 = v4;
    a1[1] = v17;
    *a2 = v3;
    a2[1] = v16;
    if (((*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v6)
      return 1;
    v18 = a3[1];
    *a2 = *a3;
    a2[1] = v18;
    *a3 = v3;
    a3[1] = v16;
    return 2;
  }
  if (v8 < v5)
  {
    *a2 = v7;
    *a3 = v4;
    v11 = *a2;
    v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    v13 = *a1;
    if (((v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3))
      return 1;
    v14 = a1[1];
    v15 = a2[1];
    *a1 = v11;
    a1[1] = v15;
    *a2 = v13;
    a2[1] = v14;
    return 2;
  }
  return 0;
}

uint64_t *sub_1C512D5DC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3;
  if (v3 >= ((*(a2 - 2) >> 1) & 3 | *(_DWORD *)((*(a2 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
    v6 = a1 + 2;
    do
    {
      v4 = v6;
      if (v6 >= a2)
        break;
      v6 += 2;
    }
    while (v3 >= ((*v4 >> 1) & 3 | *(_DWORD *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 24)));
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4[2];
      v4 += 2;
    }
    while (v3 >= ((v5 >> 1) & 3 | *(_DWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + 24)));
  }
  if (v4 < a2)
  {
    do
    {
      v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < ((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)));
  }
  v8 = a1[1];
  if (v4 < a2)
  {
    v9 = *v4;
    v10 = *a2;
    do
    {
      v11 = v4[1];
      v12 = a2[1];
      *v4 = v10;
      v4[1] = v12;
      *a2 = v9;
      a2[1] = v11;
      do
      {
        v13 = v4[2];
        v4 += 2;
        v9 = v13;
      }
      while (v3 >= ((v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24)));
      do
      {
        v14 = *(a2 - 2);
        a2 -= 2;
        v10 = v14;
      }
      while (v3 < ((v14 >> 1) & 3 | *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24)));
    }
    while (v4 < a2);
  }
  if (v4 - 2 != a1)
  {
    v15 = *(v4 - 1);
    *a1 = *(v4 - 2);
    a1[1] = v15;
  }
  *(v4 - 2) = v2;
  *(v4 - 1) = v8;
  return v4;
}

uint64_t *sub_1C512D708(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = (*a1 >> 1) & 3 | *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  do
  {
    v6 = a1[v2 + 2];
    v2 += 2;
  }
  while (((v6 >> 1) & 3 | *(_DWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 24)) < v5);
  v7 = &a1[v2];
  if (v2 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (((v9 >> 1) & 3 | *(_DWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v5);
  }
  else
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (((v8 >> 1) & 3 | *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v5);
  }
  if (v7 >= a2)
  {
    v11 = &a1[v2];
  }
  else
  {
    v10 = *a2;
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      v13 = v11[1];
      v14 = v12[1];
      *v11 = v10;
      v11[1] = v14;
      *v12 = v6;
      v12[1] = v13;
      do
      {
        v15 = v11[2];
        v11 += 2;
        v6 = v15;
      }
      while (((v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24)) < v5);
      do
      {
        v16 = *(v12 - 2);
        v12 -= 2;
        v10 = v16;
      }
      while (((v16 >> 1) & 3 | *(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v5);
    }
    while (v11 < v12);
  }
  if (v11 - 2 != a1)
  {
    v17 = *(v11 - 1);
    *a1 = *(v11 - 2);
    a1[1] = v17;
  }
  *(v11 - 2) = v3;
  *(v11 - 1) = v4;
  return v11 - 2;
}

BOOL sub_1C512D828(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      v7 = *(a2 - 2);
      if (((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3))
      {
        v8 = a1[1];
        v9 = *(a2 - 1);
        *a1 = v7;
        a1[1] = v9;
        *(a2 - 2) = v6;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_1C512D4CC(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1C512D9F8(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1C512DAF8(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v10 = a1 + 4;
      sub_1C512D4CC(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *v10;
    v15 = *v11;
    v16 = (*v11 >> 1) & 3 | *(_DWORD *)((*v11 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v16 < (*(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v10 >> 1) & 3))
    {
      v17 = v11[1];
      v18 = v12;
      while (1)
      {
        v19 = (uint64_t *)((char *)a1 + v18);
        v20 = *(uint64_t *)((char *)a1 + v18 + 40);
        v19[6] = v14;
        v19[7] = v20;
        if (v18 == -32)
          break;
        v14 = v19[2];
        v18 -= 16;
        if (v16 >= ((v14 >> 1) & 3 | *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          v21 = (uint64_t *)((char *)a1 + v18 + 48);
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *v21 = v15;
      v21[1] = v17;
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

uint64_t sub_1C512D9F8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1C512D4CC(a1, a2, a3);
  v9 = *a3;
  if (((*a4 >> 1) & 3 | *(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a3;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a2;
    if (((v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3))
    {
      *a2 = v10;
      *a3 = v12;
      v13 = *a2;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a1;
      if (((v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3))
      {
        v16 = a1[1];
        v17 = a2[1];
        *a1 = v13;
        a1[1] = v17;
        *a2 = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t sub_1C512DAF8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = sub_1C512D9F8(a1, a2, a3, a4);
  v11 = *a4;
  if (((*a5 >> 1) & 3 | *(_DWORD *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a4 >> 1) & 3))
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a4;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a3;
    if (((v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3))
    {
      *a3 = v12;
      *a4 = v14;
      v15 = *a3;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a2;
      if (((v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3))
      {
        *a2 = v15;
        *a3 = v17;
        v18 = *a2;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a1;
        if (((v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3))
        {
          v21 = a1[1];
          v22 = a2[1];
          *a1 = v18;
          a1[1] = v22;
          *a2 = v20;
          a2[1] = v21;
        }
      }
    }
  }
  return result;
}

char *sub_1C512DC48(char *a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[16 * v10];
      do
      {
        sub_1C512DDB4((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(_QWORD *)v14;
        if (((*(_QWORD *)v14 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)a1 >> 1) & 3))
        {
          v16 = *((_QWORD *)v14 + 1);
          v17 = *((_QWORD *)a1 + 1);
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *((_QWORD *)v14 + 1) = v17;
          *(_QWORD *)a1 = v15;
          *((_QWORD *)a1 + 1) = v16;
          sub_1C512DDB4((uint64_t)a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v18 = a2 - 16;
      do
      {
        v20 = *(_QWORD *)a1;
        v19 = *((_QWORD *)a1 + 1);
        v21 = (char *)sub_1C512DEF4(a1, a4, v9);
        if (v18 == v21)
        {
          *(_QWORD *)v21 = v20;
          *((_QWORD *)v21 + 1) = v19;
        }
        else
        {
          v22 = *((_QWORD *)v18 + 1);
          *(_QWORD *)v21 = *(_QWORD *)v18;
          *((_QWORD *)v21 + 1) = v22;
          *(_QWORD *)v18 = v20;
          *((_QWORD *)v18 + 1) = v19;
          sub_1C512DF8C((uint64_t)a1, (uint64_t)(v21 + 16), a4, (v21 + 16 - a1) >> 4);
        }
        v18 -= 16;
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1C512DDB4(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (_QWORD *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        if (((*v8 >> 1) & 3 | *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v8[2] & 0xFFFFFFFFFFFFFFF8) + 24) | (v8[2] >> 1) & 3))
        {
          v10 = v8[2];
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *a4;
      v12 = (*a4 >> 1) & 3 | *(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24);
      if ((*(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (v10 >> 1) & 3) >= v12)
      {
        v13 = a4[1];
        do
        {
          v14 = a4;
          a4 = v8;
          v15 = v8[1];
          *v14 = v10;
          v14[1] = v15;
          if (v5 < v7)
            break;
          v16 = (2 * v7) | 1;
          v8 = (_QWORD *)(result + 16 * v16);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v16;
          }
          else
          {
            v10 = v8[2];
            v17 = (*v8 >> 1) & 3 | *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24);
            v18 = *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (v10 >> 1) & 3;
            if (v17 < v18)
              v8 += 2;
            else
              v10 = *v8;
            if (v17 >= v18)
              v7 = v16;
          }
        }
        while (((v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v12);
        *a4 = v11;
        a4[1] = v13;
      }
    }
  }
  return result;
}

_QWORD *sub_1C512DEF4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[2 * v3 + 2];
    v7 = (2 * v3) | 1;
    v3 = 2 * v3 + 2;
    if (v3 >= a3)
    {
      v8 = *v6;
      v3 = v7;
    }
    else
    {
      v8 = v6[2];
      v9 = (*v6 >> 1) & 3 | *(_DWORD *)((*v6 & 0xFFFFFFFFFFFFFFF8) + 24);
      v10 = *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24) | (v8 >> 1) & 3;
      if (v9 < v10)
        v6 += 2;
      else
        v8 = *v6;
      if (v9 >= v10)
        v3 = v7;
    }
    v11 = v6[1];
    *a1 = v8;
    a1[1] = v11;
    a1 = v6;
  }
  while (v3 <= v5);
  return v6;
}

uint64_t sub_1C512DF8C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_QWORD *)(result + 16 * (v4 >> 1));
    v7 = (_QWORD *)(a2 - 16);
    v8 = *(_QWORD *)(a2 - 16);
    v9 = *v6;
    v10 = *(_DWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 24) | (v8 >> 1) & 3;
    if (((*v6 >> 1) & 3 | *(_DWORD *)((*v6 & 0xFFFFFFFFFFFFFFF8) + 24)) < v10)
    {
      v11 = *(_QWORD *)(a2 - 8);
      do
      {
        v12 = v7;
        v7 = v6;
        v13 = v6[1];
        *v12 = v9;
        v12[1] = v13;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_QWORD *)(result + 16 * v5);
        v9 = *v6;
      }
      while (((*v6 >> 1) & 3 | *(_DWORD *)((*v6 & 0xFFFFFFFFFFFFFFF8) + 24)) < v10);
      *v7 = v8;
      v7[1] = v11;
    }
  }
  return result;
}

uint64_t sub_1C512E018(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  int v11;

  *(_WORD *)a1 = a3;
  *(_WORD *)(a1 + 2) = a4;
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = 0;
  if (a5)
  {
    *(_QWORD *)(a1 + 8) = v7;
  }
  else if (v6 != v7)
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)v6 + 152);
    if (sub_1C61E9970((_QWORD *)a1))
    {
      v11 = **(unsigned __int16 **)(a1 + 24);
      if (v11 == a3 || v11 == a4)
        sub_1C61E99C4((unsigned __int16 *)a1);
    }
  }
  return a1;
}

void sub_1C512E0B0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C512E0C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8143F38;
  result[1] = v3;
  return result;
}

uint64_t sub_1C512E0F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8143F38;
  a2[1] = v2;
  return result;
}

llvm::raw_ostream *sub_1C512E114(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::MachineBasicBlock::printAsOperand(*(llvm::MachineBasicBlock **)(a1 + 8), a2);
}

void sub_1C512E120(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, char a4)
{
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned __int16 *v40;
  BOOL v42;
  uint64_t v43;
  unsigned __int16 *v44;
  unsigned __int16 *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  unsigned __int16 *v58;
  unsigned int v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned __int16 *v72;
  unsigned int v73;
  unsigned __int16 *v74;
  unsigned __int16 *v76;
  unsigned int v77;
  unsigned int v78;
  _BYTE v79[14];
  _BYTE v80[14];
  _BYTE v81[14];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[14];
  _BYTE v88[14];
  __int128 v89;
  _BYTE v90[14];

unsigned __int16 *sub_1C512E91C(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  if (v3 >= *result)
  {
    if (v4 < v3)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *result)
      {
        v7 = *(_OWORD *)result;
        *(_OWORD *)result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v8 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL sub_1C512E9C0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned __int16 *v6;
  __int128 v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[14];

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 8;
      if (*(a2 - 8) < *a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)v6 = v7;
      }
      return result;
    case 3:
      sub_1C512E91C(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      sub_1C512EC10(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      v16 = a1 + 8;
      v17 = a1 + 16;
      v18 = a1 + 24;
      sub_1C512EC10(a1, a1 + 8, a1 + 16, a1 + 24);
      v20 = *(a2 - 8);
      v19 = a2 - 8;
      if (v20 < a1[24])
      {
        v21 = *(_OWORD *)v18;
        *(_OWORD *)v18 = *(_OWORD *)v19;
        *(_OWORD *)v19 = v21;
        if (*v18 < *v17)
        {
          v22 = *(_OWORD *)v17;
          *(_OWORD *)v17 = *(_OWORD *)v18;
          *(_OWORD *)v18 = v22;
          if (*v17 < *v16)
          {
            v23 = *(_OWORD *)v16;
            *(_OWORD *)v16 = *(_OWORD *)v17;
            *(_OWORD *)v17 = v23;
            if (a1[8] < *a1)
            {
              v24 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *(_OWORD *)v16;
              *(_OWORD *)v16 = v24;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 16;
      sub_1C512E91C(a1, a1 + 8, a1 + 16);
      v9 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (v12 < *v8)
    {
      *(_QWORD *)v25 = *(_QWORD *)(v9 + 1);
      *(_QWORD *)&v25[6] = *((_QWORD *)v9 + 1);
      v13 = v10;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v13 + 48) = *(_OWORD *)((char *)a1 + v13 + 32);
        if (v13 == -32)
          break;
        v14 = *(unsigned __int16 *)((char *)a1 + v13 + 16);
        v13 -= 16;
        if (v12 >= v14)
        {
          v15 = (uint64_t)a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      v15 = (uint64_t)a1;
LABEL_12:
      *(_WORD *)v15 = v12;
      *(_QWORD *)(v15 + 2) = *(_QWORD *)v25;
      *(_QWORD *)(v15 + 8) = *(_QWORD *)&v25[6];
      if (++v11 == 8)
        return v9 + 8 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 8;
    if (v9 == a2)
      return 1;
  }
}

__n128 sub_1C512EC10(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  __n128 result;

  sub_1C512E91C(a1, a2, a3);
  if (*a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *a1)
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

double sub_1C512ECAC()
{
  double result;
  int v1;
  char v2;
  char *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"When printing machine IR, annotate instructions and blocks with SlotIndexes when available";
  v4.n128_u64[1] = 90;
  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7F9488, "print-slotindexes", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F9488, &dword_1C475E000);
  llvm::MBBSectionID::ColdSectionID = 2;
  *(_QWORD *)&result = 1;
  llvm::MBBSectionID::ExceptionSectionID = 1;
  return result;
}

uint64_t sub_1C512ED4C(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeMachineBranchProbabilityInfoPass(a1, a2);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Machine Block Frequency Analysis";
  *(_QWORD *)(v3 + 8) = 32;
  *(_QWORD *)(v3 + 16) = "machine-block-freq";
  *(_QWORD *)(v3 + 24) = 18;
  *(_QWORD *)(v3 + 32) = &llvm::MachineBlockFrequencyInfo::ID;
  *(_WORD *)(v3 + 40) = 257;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::MachineBlockFrequencyInfo>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

llvm::MachineBlockFrequencyInfo *llvm::MachineBlockFrequencyInfo::MachineBlockFrequencyInfo(llvm::MachineBlockFrequencyInfo *this, llvm::MachineFunction *a2, llvm::MachineBranchProbabilityInfo *a3, llvm::MachineLoopInfo *a4)
{
  llvm::MachineBlockFrequencyInfo *v8;

  v8 = (llvm::MachineBlockFrequencyInfo *)sub_1C4776848((uint64_t)this, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  *(_QWORD *)v8 = &off_1E8143F80;
  *((_QWORD *)v8 + 31) = 0;
  llvm::MachineBlockFrequencyInfo::calculate(v8, a2, a3, a4);
  return this;
}

{
  llvm::MachineBlockFrequencyInfo *v8;

  v8 = (llvm::MachineBlockFrequencyInfo *)sub_1C4776848((uint64_t)this, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  *(_QWORD *)v8 = &off_1E8143F80;
  *((_QWORD *)v8 + 31) = 0;
  llvm::MachineBlockFrequencyInfo::calculate(v8, a2, a3, a4);
  return this;
}

void llvm::MachineBlockFrequencyInfo::calculate(llvm::MachineBlockFrequencyInfo *this, const llvm::MachineFunction *a2, const llvm::MachineBranchProbabilityInfo *a3, const llvm::MachineLoopInfo *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  _BYTE *v24;
  const void *v25;
  void *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE *v33;
  void *v34;
  void *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  _OWORD *v42;
  _BYTE *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  _OWORD *v50;
  _BYTE *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  _QWORD *v59;
  int v60;
  _QWORD *v61;
  _QWORD *v62;
  char *v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  _BYTE *v82;
  _BYTE *v83;
  unsigned int v84;
  unsigned int v85;
  _QWORD *v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  int v102;
  BOOL v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t **v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  _BYTE *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  _BOOL4 v155;
  _QWORD *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  unint64_t v177;
  _DWORD *v178;
  unint64_t v179;
  int v180;
  int v181;
  void **v182;
  void **v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t Name;
  int v193;
  int v194;
  unsigned int v195;
  int v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t i;
  uint64_t v201;
  size_t v202;
  size_t v203;
  uint64_t *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  size_t v209;
  size_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  llvm *v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int *v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  void *v222[2];
  _OWORD v223[8];
  uint64_t v224;
  _BYTE *v225;
  _BYTE *v226;
  uint64_t v227;
  unsigned int v228;
  _BYTE v229[64];
  void *v230;
  uint64_t v231;
  _BYTE v232[128];
  _BYTE *v233;
  void *v234;
  uint64_t v235;
  unsigned int v236;
  _BYTE v237[64];
  void *v238;
  uint64_t v239;
  _BYTE v240[128];
  _BYTE *v241;
  void *__src;
  uint64_t v243;
  unsigned int v244;
  _BYTE v245[64];
  void *v246;
  uint64_t v247;
  _BYTE v248[128];
  _BYTE *v249;
  void *v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  _BYTE v254[64];
  void *v255;
  uint64_t v256;
  _QWORD v257[17];
  _BYTE *v258;
  void *v259;
  unint64_t v260;
  unsigned int v261;
  _BYTE v262[64];
  void *v263;
  uint64_t v264;
  _BYTE v265[128];
  _BYTE *v266;
  void *v267;
  unint64_t v268;
  unsigned int v269;
  _BYTE v270[64];
  void *v271;
  uint64_t v272;
  _BYTE v273[128];
  _BYTE *v274;
  void *v275;
  unint64_t v276;
  unsigned int v277;
  _BYTE v278[64];
  void *v279;
  uint64_t v280;
  _BYTE v281[128];
  _BYTE *v282;
  void *v283;
  unint64_t v284;
  unsigned int v285;
  _BYTE v286[64];
  void *v287;
  uint64_t v288;
  _BYTE v289[128];
  _BYTE *v290;
  void *v291;
  unint64_t v292;
  unsigned int v293;
  _BYTE v294[64];
  void *v295;
  uint64_t v296;
  _BYTE v297[128];
  _BYTE *v298;
  void *v299;
  unint64_t v300;
  unsigned int v301;
  _BYTE v302[64];
  void *v303;
  uint64_t v304;
  _BYTE v305[128];
  _BYTE *v306;
  void *v307;
  unint64_t v308;
  unsigned int v309;
  _BYTE v310[64];
  void *v311;
  uint64_t v312;
  _BYTE v313[128];
  _BYTE *v314;
  void *v315;
  int v316;
  int v317;
  unsigned int v318;
  _BYTE v319[64];
  void *v320;
  uint64_t v321;
  _BYTE v322[128];
  _BYTE *v323;
  void *v324;
  unint64_t v325;
  int v326;
  _BYTE v327[64];
  void *v328;
  uint64_t v329;
  _BYTE v330[128];
  char *v331;
  void *v332;
  unint64_t v333;
  uint64_t v334;
  _WORD v335[32];
  void *v336;
  uint64_t v337;
  _BYTE v338[128];
  _QWORD *v339;
  _BYTE *v340;
  void *v341;
  unint64_t v342;
  unsigned int v343;
  _BYTE v344[64];
  void *v345;
  uint64_t v346;
  _BYTE v347[128];
  _BYTE *v348;
  void *v349;
  uint64_t v350;
  unsigned int v351;
  _BYTE v352[64];
  void *v353;
  uint64_t v354;
  _BYTE v355[128];
  void *__p[2];
  __int128 v357;
  _OWORD v358[4];
  void *v359;
  uint64_t v360;
  _BYTE v361[128];
  _BYTE *v362;
  void *v363;
  unint64_t v364;
  unsigned int v365;
  _BYTE v366[64];
  void *v367;
  uint64_t v368;
  _BYTE v369[136];
  _BYTE *v370;
  void *v371;
  unint64_t v372;
  unsigned int v373;
  _BYTE v374[64];
  void *v375;
  uint64_t v376;
  _BYTE v377[128];
  _BYTE *v378;
  void *v379;
  unint64_t v380;
  unsigned int v381;
  _BYTE v382[64];
  void *v383;
  uint64_t v384;
  _BYTE v385[128];
  _BYTE *v386;
  void *v387;
  unint64_t v388;
  unsigned int v389;
  _BYTE v390[64];
  void *v391;
  uint64_t v392;
  _QWORD v393[19];

  v4 = MEMORY[0x1E0C80A78](this, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v4;
  v393[16] = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(v4 + 248);
  if (!v12)
  {
    v12 = operator new();
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = v12 + 32;
    *(_QWORD *)(v12 + 40) = v12 + 32;
    *(_QWORD *)(v12 + 48) = 0;
    *(_QWORD *)(v12 + 56) = v12 + 32;
    *(_QWORD *)(v12 + 64) = 0;
    *(_QWORD *)(v12 + 72) = 0;
    *(_QWORD *)(v12 + 80) = 0;
    *(_QWORD *)(v12 + 88) = v12 + 88;
    *(_QWORD *)(v12 + 96) = v12 + 88;
    *(_QWORD *)(v12 + 104) = 0;
    *(_QWORD *)v12 = &off_1E8144040;
    *(_QWORD *)(v12 + 8) = 0;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_OWORD *)(v12 + 144) = 0u;
    *(_OWORD *)(v12 + 160) = 0u;
    *(_DWORD *)(v12 + 176) = 0;
    v13 = *(_QWORD *)(v11 + 248);
    *(_QWORD *)(v11 + 248) = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v12 = *(_QWORD *)(v11 + 248);
    }
  }
  v216 = v11;
  *(_QWORD *)(v12 + 112) = v8;
  *(_QWORD *)(v12 + 120) = v6;
  *(_QWORD *)(v12 + 128) = v10;
  llvm::BlockFrequencyInfoImplBase::clear((llvm::BlockFrequencyInfoImplBase *)v12);
  v14 = v12 + 136;
  *(_QWORD *)(v12 + 144) = *(_QWORD *)(v12 + 136);
  v217 = (unsigned int *)(v12 + 160);
  v15 = *(_DWORD *)(v12 + 168);
  v215 = v10;
  if (v15 || *(_DWORD *)(v12 + 172))
  {
    v197 = *(unsigned int *)(v12 + 176);
    if (v197 <= 4 * v15 || v197 < 0x41)
    {
      if ((_DWORD)v197)
      {
        v198 = *(_QWORD **)v217;
        v199 = 16 * v197;
        do
        {
          *v198 = -4096;
          v198 += 2;
          v199 -= 16;
        }
        while (v199);
      }
      *(_QWORD *)(v12 + 168) = 0;
    }
    else
    {
      sub_1C4926838(v217);
    }
    v14 = v12 + 136;
  }
  v16 = *(_QWORD *)(v12 + 128);
  v17 = v16 + 320;
  v18 = *(_QWORD *)(v16 + 328);
  v19 = -1;
  v20 = v17;
  do
  {
    v20 = *(_QWORD *)(v20 + 8);
    ++v19;
  }
  while (v20 != v17);
  sub_1C4DB1D18(v14, v19);
  v225 = v229;
  v226 = v229;
  v227 = 8;
  v228 = 0;
  v230 = v232;
  v231 = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v225, v18);
  v21 = *(_QWORD *)(v18 + 88);
  v22 = v231;
  if (v231 >= HIDWORD(v231))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v230, (uint64_t)v232, v231 + 1, 16);
    v22 = v231;
  }
  v23 = (uint64_t *)((char *)v230 + 16 * v22);
  *v23 = v18;
  v23[1] = v21;
  LODWORD(v231) = v231 + 1;
  sub_1C486F1F8(&v225);
  v222[0] = 0;
  memset(v223, 0, sizeof(v223));
  v224 = 0;
  v221 = 0u;
  v220 = 0u;
  v219 = 0u;
  v218 = 0u;
  v222[1] = (char *)v223 + 8;
  DWORD1(v223[0]) = 8;
  v24 = v245;
  v241 = v245;
  v25 = v226;
  if (v226 == v225)
  {
    __src = v245;
    v26 = v226;
  }
  else
  {
    v193 = v227;
    v24 = malloc_type_malloc(8 * v227, 0x4065EBACuLL);
    if (!v24)
    {
      if (v193)
        goto LABEL_511;
      v24 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v24)
        goto LABEL_511;
    }
    __src = v24;
    v26 = v225;
    v25 = v226;
  }
  v27 = HIDWORD(v227);
  LODWORD(v243) = v227;
  if (v25 == v26)
    v28 = HIDWORD(v227);
  else
    v28 = v227;
  if (v28)
  {
    memmove(v24, v25, 8 * v28);
    v27 = HIDWORD(v227);
  }
  HIDWORD(v243) = v27;
  v244 = v228;
  v246 = v248;
  v247 = 0x800000000;
  if ((_DWORD)v231)
    sub_1C486F660((uint64_t)&v246, (uint64_t)&v230);
  v233 = v237;
  v234 = v237;
  v235 = 8;
  v236 = v218;
  v238 = v240;
  v239 = 0x800000000;
  if (LODWORD(v223[0]))
    sub_1C486F660((uint64_t)&v238, (uint64_t)&v222[1]);
  v266 = v270;
  if (__src == v241)
  {
    v267 = v270;
    v29 = HIDWORD(v243);
    if (HIDWORD(v243))
      memmove(v270, __src, 8 * HIDWORD(v243));
  }
  else
  {
    v267 = __src;
    __src = v241;
    v29 = HIDWORD(v243);
  }
  v268 = __PAIR64__(v29, v243);
  v269 = v244;
  v243 = 8;
  v244 = 0;
  v271 = v273;
  v272 = 0x800000000;
  if ((_DWORD)v247)
    sub_1C486F510((uint64_t)&v271, (uint64_t)&v246);
  v258 = v262;
  if (v234 == v233)
  {
    v259 = v262;
    v30 = HIDWORD(v235);
    if (HIDWORD(v235))
      memmove(v262, v234, 8 * HIDWORD(v235));
  }
  else
  {
    v259 = v234;
    v234 = v233;
    v30 = HIDWORD(v235);
  }
  v260 = __PAIR64__(v30, v235);
  v261 = v236;
  v235 = 8;
  v236 = 0;
  v263 = v265;
  v264 = 0x800000000;
  if ((_DWORD)v239)
    sub_1C486F510((uint64_t)&v263, (uint64_t)&v238);
  v282 = v286;
  if (v267 == v266)
  {
    v283 = v286;
    v31 = HIDWORD(v268);
    if (HIDWORD(v268))
      memmove(v286, v267, 8 * HIDWORD(v268));
  }
  else
  {
    v283 = v267;
    v267 = v266;
    v31 = HIDWORD(v268);
  }
  v284 = __PAIR64__(v31, v268);
  v285 = v269;
  v268 = 8;
  v269 = 0;
  v287 = v289;
  v288 = 0x800000000;
  if ((_DWORD)v272)
    sub_1C486F510((uint64_t)&v287, (uint64_t)&v271);
  v274 = v278;
  if (v259 == v258)
  {
    v275 = v278;
    v32 = HIDWORD(v260);
    if (HIDWORD(v260))
      memmove(v278, v259, 8 * HIDWORD(v260));
  }
  else
  {
    v275 = v259;
    v259 = v258;
    v32 = HIDWORD(v260);
  }
  v276 = __PAIR64__(v32, v260);
  v277 = v261;
  v260 = 8;
  v261 = 0;
  v279 = v281;
  v280 = 0x800000000;
  if ((_DWORD)v264)
    sub_1C486F510((uint64_t)&v279, (uint64_t)&v263);
  v33 = v352;
  v348 = v352;
  v34 = v283;
  if (v283 == v282)
  {
    v349 = v352;
    v35 = v283;
  }
  else
  {
    v194 = v284;
    v33 = malloc_type_malloc(8 * v284, 0x4065EBACuLL);
    if (!v33)
    {
      if (v194)
        goto LABEL_511;
      v33 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v33)
        goto LABEL_511;
    }
    v349 = v33;
    v35 = v282;
    v34 = v283;
  }
  v36 = HIDWORD(v284);
  LODWORD(v350) = v284;
  if (v34 == v35)
    v37 = HIDWORD(v284);
  else
    v37 = v284;
  if (v37)
  {
    memmove(v33, v34, 8 * v37);
    v36 = HIDWORD(v284);
  }
  HIDWORD(v350) = v36;
  v351 = v285;
  v353 = v355;
  v354 = 0x800000000;
  if ((_DWORD)v288)
    sub_1C486F660((uint64_t)&v353, (uint64_t)&v287);
  v340 = v344;
  if (v275 == v274)
  {
    v341 = v344;
    v38 = HIDWORD(v276);
    if (HIDWORD(v276))
      memmove(v344, v275, 8 * HIDWORD(v276));
  }
  else
  {
    v341 = v275;
    v275 = v274;
    v38 = HIDWORD(v276);
  }
  v342 = __PAIR64__(v38, v276);
  v343 = v277;
  v276 = 8;
  v277 = 0;
  v345 = v347;
  v346 = 0x800000000;
  if ((_DWORD)v280)
    sub_1C486F510((uint64_t)&v345, (uint64_t)&v279);
  v39 = v254;
  v249 = v254;
  v40 = v349;
  if (v349 == v348)
  {
    v250 = v254;
    v41 = HIDWORD(v350);
    if (HIDWORD(v350))
      memmove(v254, v349, 8 * HIDWORD(v350));
    v40 = v254;
  }
  else
  {
    v250 = v349;
    v349 = v348;
    v41 = HIDWORD(v350);
  }
  v251 = v350;
  v252 = v41;
  v253 = v351;
  v350 = 8;
  v351 = 0;
  v255 = v257;
  v256 = 0x800000000;
  if ((_DWORD)v354)
  {
    sub_1C486F510((uint64_t)&v255, (uint64_t)&v353);
    v40 = v250;
    v39 = v249;
  }
  v42 = v358;
  __p[0] = v358;
  if (v40 == v39)
  {
    __p[1] = v358;
    v43 = v39;
  }
  else
  {
    v195 = v251;
    v42 = malloc_type_malloc(8 * v251, 0x4065EBACuLL);
    if (!v42)
    {
      if (v195)
        goto LABEL_511;
      v42 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v42)
        goto LABEL_511;
    }
    __p[1] = v42;
    v43 = v249;
    v39 = v250;
  }
  v44 = v252;
  LODWORD(v357) = v251;
  if (v39 == v43)
    v45 = v252;
  else
    v45 = v251;
  if (v45)
  {
    memmove(v42, v39, 8 * v45);
    v44 = v252;
  }
  *(_QWORD *)((char *)&v357 + 4) = __PAIR64__(v253, v44);
  v359 = v361;
  v360 = 0x800000000;
  if ((_DWORD)v256)
    sub_1C486F660((uint64_t)&v359, (uint64_t)&v255);
  v331 = (char *)v335;
  if (__p[1] == __p[0])
  {
    v332 = v335;
    v46 = DWORD1(v357);
    if (DWORD1(v357))
      memmove(v335, __p[1], 8 * DWORD1(v357));
  }
  else
  {
    v332 = __p[1];
    __p[1] = __p[0];
    v46 = DWORD1(v357);
  }
  v333 = __PAIR64__(v46, v357);
  LODWORD(v334) = DWORD2(v357);
  *(_QWORD *)&v357 = 8;
  DWORD2(v357) = 0;
  v336 = v338;
  v337 = 0x800000000;
  if ((_DWORD)v360)
    sub_1C486F510((uint64_t)&v336, (uint64_t)&v359);
  if (v359 != v361)
    free(v359);
  if (__p[1] != __p[0])
    free(__p[1]);
  v47 = v382;
  v378 = v382;
  v48 = v341;
  if (v341 == v340)
  {
    v379 = v382;
    v49 = HIDWORD(v342);
    if (HIDWORD(v342))
      memmove(v382, v341, 8 * HIDWORD(v342));
    v48 = v382;
  }
  else
  {
    v379 = v341;
    v341 = v340;
    v49 = HIDWORD(v342);
  }
  v380 = __PAIR64__(v49, v342);
  v381 = v343;
  v342 = 8;
  v343 = 0;
  v383 = v385;
  v384 = 0x800000000;
  if ((_DWORD)v346)
  {
    sub_1C486F510((uint64_t)&v383, (uint64_t)&v345);
    v48 = v379;
    v47 = v378;
  }
  v50 = v358;
  __p[0] = v358;
  if (v48 != v47)
  {
    v196 = v380;
    v50 = malloc_type_malloc(8 * v380, 0x4065EBACuLL);
    if (v50 || !v196 && (v50 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      __p[1] = v50;
      v51 = v378;
      v47 = v379;
      goto LABEL_87;
    }
LABEL_511:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  __p[1] = v358;
  v51 = v47;
LABEL_87:
  v52 = HIDWORD(v380);
  LODWORD(v357) = v380;
  if (v47 == v51)
    v53 = HIDWORD(v380);
  else
    v53 = v380;
  if (v53)
  {
    memmove(v50, v47, 8 * v53);
    v52 = HIDWORD(v380);
  }
  *(_QWORD *)((char *)&v357 + 4) = __PAIR64__(v381, v52);
  v359 = v361;
  v360 = 0x800000000;
  if ((_DWORD)v384)
    sub_1C486F660((uint64_t)&v359, (uint64_t)&v383);
  v386 = v390;
  if (__p[1] == __p[0])
  {
    v387 = v390;
    v54 = DWORD1(v357);
    if (DWORD1(v357))
      memmove(v390, __p[1], 8 * DWORD1(v357));
  }
  else
  {
    v387 = __p[1];
    __p[1] = __p[0];
    v54 = DWORD1(v357);
  }
  v388 = __PAIR64__(v54, v357);
  v389 = DWORD2(v357);
  *(_QWORD *)&v357 = 8;
  DWORD2(v357) = 0;
  v391 = v393;
  v392 = 0x800000000;
  if ((_DWORD)v360)
    sub_1C486F510((uint64_t)&v391, (uint64_t)&v359);
  if (v359 != v361)
    free(v359);
  if (__p[1] != __p[0])
    free(__p[1]);
  __p[0] = v358;
  if (v332 == v331)
  {
    __p[1] = v358;
    v55 = HIDWORD(v333);
    if (HIDWORD(v333))
      memmove(v358, v332, 8 * HIDWORD(v333));
  }
  else
  {
    __p[1] = v332;
    v332 = v331;
    v55 = HIDWORD(v333);
  }
  *(_QWORD *)&v357 = __PAIR64__(v55, v333);
  DWORD2(v357) = v334;
  v333 = 8;
  LODWORD(v334) = 0;
  v359 = v361;
  v360 = 0x800000000;
  if ((_DWORD)v337)
    sub_1C486F510((uint64_t)&v359, (uint64_t)&v336);
  v362 = v366;
  if (v387 == v386)
  {
    v363 = v366;
    v56 = HIDWORD(v388);
    if (HIDWORD(v388))
      memmove(v366, v387, 8 * HIDWORD(v388));
  }
  else
  {
    v363 = v387;
    v387 = v386;
    v56 = HIDWORD(v388);
  }
  v364 = __PAIR64__(v56, v388);
  v365 = v389;
  v388 = 8;
  v389 = 0;
  v367 = v369;
  v368 = 0x800000000;
  if ((_DWORD)v392)
    sub_1C486F510((uint64_t)&v367, (uint64_t)&v391);
  if (v391 != v393)
    free(v391);
  if (v387 != v386)
    free(v387);
  if (v383 != v385)
    free(v383);
  if (v379 != v378)
    free(v379);
  if (v336 != v338)
    free(v336);
  if (v332 != v331)
    free(v332);
  if (v255 != v257)
    free(v255);
  if (v250 != v249)
    free(v250);
  if (v345 != v347)
    free(v345);
  if (v341 != v340)
    free(v341);
  if (v353 != v355)
    free(v353);
  if (v349 != v348)
    free(v349);
  v323 = v327;
  if (__p[1] == __p[0])
  {
    v324 = v327;
    v57 = DWORD1(v357);
    if (DWORD1(v357))
      memmove(v327, __p[1], 8 * DWORD1(v357));
  }
  else
  {
    v324 = __p[1];
    __p[1] = __p[0];
    v57 = DWORD1(v357);
  }
  v325 = __PAIR64__(v57, v357);
  v326 = DWORD2(v357);
  *(_QWORD *)&v357 = 8;
  DWORD2(v357) = 0;
  v328 = v330;
  v329 = 0x800000000;
  if ((_DWORD)v360)
    sub_1C486F510((uint64_t)&v328, (uint64_t)&v359);
  v314 = v319;
  if (v363 == v362)
  {
    v315 = v319;
    v58 = HIDWORD(v364);
    v59 = (_QWORD *)(v12 + 136);
    if (HIDWORD(v364))
      memmove(v319, v363, 8 * HIDWORD(v364));
  }
  else
  {
    v315 = v363;
    v363 = v362;
    v58 = HIDWORD(v364);
    v59 = (_QWORD *)(v12 + 136);
  }
  v316 = v364;
  v317 = v58;
  v318 = v365;
  v364 = 8;
  v365 = 0;
  v320 = v322;
  v321 = 0x800000000;
  if ((_DWORD)v368)
    sub_1C486F510((uint64_t)&v320, (uint64_t)&v367);
  while (1)
  {
    v60 = v329;
    if ((_DWORD)v329 != (_DWORD)v321)
      goto LABEL_157;
    if (!(_DWORD)v329)
      break;
    v61 = v320;
    v62 = v328;
    while (*v62 == *v61 && v62[1] == v61[1])
    {
      v62 += 2;
      v61 += 2;
      if (v62 == (_QWORD *)((char *)v328 + 16 * v329))
        goto LABEL_177;
    }
LABEL_157:
    v64 = (char *)v328 + 16 * v329;
    v66 = *(_QWORD **)(v12 + 144);
    v65 = *(_QWORD *)(v12 + 152);
    if ((unint64_t)v66 >= v65)
    {
      v68 = (_QWORD *)*v59;
      v69 = v66 - v68;
      v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 61)
        abort();
      v71 = v65 - (_QWORD)v68;
      if (v71 >> 2 > v70)
        v70 = v71 >> 2;
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
        v72 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v72 = v70;
      if (v72)
      {
        if (v72 >> 61)
          sub_1C4764EE4();
        v73 = (char *)operator new(8 * v72);
      }
      else
      {
        v73 = 0;
      }
      v74 = &v73[8 * v69];
      *(_QWORD *)v74 = *((_QWORD *)v64 - 2);
      v67 = v74 + 8;
      if (v66 == v68)
      {
        v59 = (_QWORD *)(v12 + 136);
      }
      else
      {
        do
        {
          v75 = *--v66;
          *((_QWORD *)v74 - 1) = v75;
          v74 -= 8;
        }
        while (v66 != v68);
        v59 = (_QWORD *)(v12 + 136);
        v66 = *(_QWORD **)(v12 + 136);
      }
      *(_QWORD *)(v12 + 136) = v74;
      *(_QWORD *)(v12 + 144) = v67;
      *(_QWORD *)(v12 + 152) = &v73[8 * v72];
      if (v66)
      {
        operator delete(v66);
        v60 = v329;
      }
    }
    else
    {
      *v66 = *((_QWORD *)v64 - 2);
      v67 = v66 + 1;
    }
    *(_QWORD *)(v12 + 144) = v67;
    LODWORD(v329) = v60 - 1;
    if (v60 != 1)
      sub_1C486F1F8(&v323);
  }
LABEL_177:
  v331 = (char *)v335;
  if (v324 == v323)
  {
    v332 = v335;
    v76 = HIDWORD(v325);
    if (HIDWORD(v325))
      memmove(v335, v324, 8 * HIDWORD(v325));
  }
  else
  {
    v332 = v324;
    v324 = v323;
    v76 = HIDWORD(v325);
  }
  v333 = __PAIR64__(v76, v325);
  LODWORD(v334) = v326;
  v325 = 8;
  v326 = 0;
  v336 = v338;
  v337 = 0x800000000;
  if (v60)
    sub_1C486F510((uint64_t)&v336, (uint64_t)&v328);
  v339 = v59;
  if (v320 != v322)
    free(v320);
  if (v315 != v314)
    free(v315);
  if (v328 != v330)
    free(v328);
  if (v324 != v323)
    free(v324);
  v298 = v302;
  if (v283 == v282)
  {
    v299 = v302;
    v77 = HIDWORD(v284);
    if (HIDWORD(v284))
      memmove(v302, v283, 8 * HIDWORD(v284));
  }
  else
  {
    v299 = v283;
    v283 = v282;
    v77 = HIDWORD(v284);
  }
  v300 = __PAIR64__(v77, v284);
  v301 = v285;
  v284 = 8;
  v285 = 0;
  v303 = v305;
  v304 = 0x800000000;
  if ((_DWORD)v288)
    sub_1C486F510((uint64_t)&v303, (uint64_t)&v287);
  v290 = v294;
  if (v332 == v331)
  {
    v291 = v294;
    v78 = HIDWORD(v333);
    if (HIDWORD(v333))
      memmove(v294, v332, 8 * HIDWORD(v333));
  }
  else
  {
    v291 = v332;
    v332 = v331;
    v78 = HIDWORD(v333);
  }
  v292 = __PAIR64__(v78, v333);
  v293 = v334;
  v333 = 8;
  LODWORD(v334) = 0;
  v295 = v297;
  v296 = 0x800000000;
  if ((_DWORD)v337)
    sub_1C486F510((uint64_t)&v295, (uint64_t)&v336);
  v378 = v382;
  if (v299 == v298)
  {
    v379 = v382;
    v79 = HIDWORD(v300);
    if (HIDWORD(v300))
      memmove(v382, v299, 8 * HIDWORD(v300));
  }
  else
  {
    v379 = v299;
    v299 = v298;
    v79 = HIDWORD(v300);
  }
  v380 = __PAIR64__(v79, v300);
  v381 = v301;
  v300 = 8;
  v301 = 0;
  v383 = v385;
  v384 = 0x800000000;
  if ((_DWORD)v304)
    sub_1C486F510((uint64_t)&v383, (uint64_t)&v303);
  v370 = v374;
  if (v291 == v290)
  {
    v371 = v374;
    v80 = HIDWORD(v292);
    if (HIDWORD(v292))
      memmove(v374, v291, 8 * HIDWORD(v292));
  }
  else
  {
    v371 = v291;
    v291 = v290;
    v80 = HIDWORD(v292);
  }
  v372 = __PAIR64__(v80, v292);
  v373 = v293;
  v292 = 8;
  v293 = 0;
  v375 = v377;
  v376 = 0x800000000;
  if ((_DWORD)v296)
    sub_1C486F510((uint64_t)&v375, (uint64_t)&v295);
  v249 = v254;
  if (v379 == v378)
  {
    v250 = v254;
    v81 = HIDWORD(v380);
    if (HIDWORD(v380))
      memmove(v254, v379, 8 * HIDWORD(v380));
  }
  else
  {
    v250 = v379;
    v379 = v378;
    v81 = HIDWORD(v380);
  }
  v251 = v380;
  v252 = v81;
  v253 = v381;
  v380 = 8;
  v381 = 0;
  v255 = v257;
  v256 = 0x800000000;
  if ((_DWORD)v384)
    sub_1C486F510((uint64_t)&v255, (uint64_t)&v383);
  v82 = v390;
  v386 = v390;
  v83 = v371;
  if (v371 == v370)
  {
    v387 = v390;
    v84 = HIDWORD(v372);
    if (HIDWORD(v372))
      memmove(v390, v371, 8 * HIDWORD(v372));
    v83 = v390;
  }
  else
  {
    v387 = v371;
    v371 = v370;
    v84 = HIDWORD(v372);
  }
  v388 = __PAIR64__(v84, v372);
  v389 = v373;
  v372 = 8;
  v373 = 0;
  v391 = v393;
  v392 = 0x800000000;
  if ((_DWORD)v376)
  {
    sub_1C486F510((uint64_t)&v391, (uint64_t)&v375);
    v83 = v387;
    v82 = v386;
  }
  v306 = v310;
  if (v83 == v82)
  {
    v307 = v310;
    v85 = HIDWORD(v388);
    if (HIDWORD(v388))
      memmove(v310, v82, 8 * HIDWORD(v388));
  }
  else
  {
    v307 = v83;
    v387 = v82;
    v85 = HIDWORD(v388);
  }
  v308 = __PAIR64__(v85, v388);
  v309 = v389;
  v388 = 8;
  v389 = 0;
  v311 = v313;
  v312 = 0x800000000;
  if ((_DWORD)v392)
    sub_1C486F510((uint64_t)&v311, (uint64_t)&v391);
  if (v391 != v393)
    free(v391);
  if (v387 != v386)
    free(v387);
  if (v255 != v257)
    free(v255);
  if (v250 != v249)
    free(v250);
  if (v375 != v377)
    free(v375);
  if (v371 != v370)
    free(v371);
  if (v383 != v385)
    free(v383);
  if (v379 != v378)
    free(v379);
  v86 = v339;
  v249 = v254;
  if (v307 == v306)
  {
    v250 = v254;
    v87 = HIDWORD(v308);
    if (HIDWORD(v308))
      memmove(v254, v307, 8 * HIDWORD(v308));
  }
  else
  {
    v250 = v307;
    v307 = v306;
    v87 = HIDWORD(v308);
  }
  v251 = v308;
  v252 = v87;
  v253 = v309;
  v308 = 8;
  v309 = 0;
  v255 = v257;
  v256 = 0x800000000;
  if ((_DWORD)v312)
    sub_1C486F510((uint64_t)&v255, (uint64_t)&v311);
  v257[16] = v86;
  if (v311 != v313)
    free(v311);
  if (v307 != v306)
    free(v307);
  if (v295 != v297)
    free(v295);
  if (v291 != v290)
    free(v291);
  if (v303 != v305)
    free(v303);
  if (v299 != v298)
    free(v299);
  if (v336 != v338)
    free(v336);
  if (v332 != v331)
    free(v332);
  if (v367 != v369)
    free(v367);
  if (v363 != v362)
    free(v363);
  if (v359 != v361)
    free(v359);
  if (__p[1] != __p[0])
    free(__p[1]);
  if (v279 != v281)
    free(v279);
  if (v275 != v274)
    free(v275);
  if (v287 != v289)
    free(v287);
  if (v283 != v282)
    free(v283);
  if (v263 != v265)
    free(v263);
  if (v259 != v258)
    free(v259);
  if (v271 != v273)
    free(v271);
  if (v267 != v266)
    free(v267);
  if (v255 != v257)
    free(v255);
  if (v250 != v249)
    free(v250);
  if (v238 != v240)
    free(v238);
  if (v234 != v233)
    free(v234);
  if (v246 != v248)
    free(v246);
  if (__src != v241)
    free(__src);
  if (v222[1] != (char *)v223 + 8)
    free(v222[1]);
  if (v230 != v232)
    free(v230);
  if (v226 != v225)
    free(v226);
  v89 = *(uint64_t **)(v12 + 136);
  v88 = *(uint64_t **)(v12 + 144);
  if (v89 != v88)
  {
    v90 = v88 - 1;
    if (v89 < v88 - 1)
    {
      v91 = v89 + 1;
      do
      {
        v92 = *(v91 - 1);
        *(v91 - 1) = *v90;
        *v90-- = v92;
      }
      while (v91++ < v90);
      v89 = *(uint64_t **)(v12 + 136);
      v88 = *(uint64_t **)(v12 + 144);
    }
  }
  if (v89 != v88)
  {
    while (1)
    {
      v94 = *(_QWORD *)(v12 + 136);
      v95 = *(_DWORD *)(v12 + 176);
      if (!v95)
        break;
      v96 = *(_QWORD *)(v12 + 160);
      v97 = v95 - 1;
      v98 = ((*v89 >> 4) ^ (*v89 >> 9)) & v97;
      v99 = (uint64_t *)(v96 + 16 * v98);
      v100 = *v99;
      if (*v89 != *v99)
      {
        v101 = 0;
        v102 = 1;
        while (v100 != -4096)
        {
          if (v101)
            v103 = 0;
          else
            v103 = v100 == -8192;
          if (v103)
            v101 = v99;
          v104 = v98 + v102++;
          v98 = v104 & v97;
          v99 = (uint64_t *)(v96 + 16 * v98);
          v100 = *v99;
          if (*v89 == *v99)
            goto LABEL_314;
        }
        if (v101)
          v105 = v101;
        else
          v105 = v99;
        goto LABEL_328;
      }
LABEL_314:
      *((_DWORD *)v99 + 2) = ((unint64_t)v89++ - v94) >> 3;
      if (v89 == v88)
      {
        v88 = *(uint64_t **)(v12 + 136);
        v106 = *(uint64_t **)(v12 + 144);
        goto LABEL_329;
      }
    }
    v105 = 0;
LABEL_328:
    v99 = sub_1C5132AC8((uint64_t)v217, v89, v105);
    *v99 = *v89;
    *((_DWORD *)v99 + 2) = -1;
    goto LABEL_314;
  }
  v106 = v88;
LABEL_329:
  v107 = (uint64_t *)(v12 + 64);
  sub_1C4DB1DB8(v12 + 64, v106 - v88);
  __p[0] = 0;
  v109 = *(_QWORD *)(v12 + 136);
  v108 = *(_QWORD *)(v12 + 144);
  if (v108 == v109)
  {
    v112 = (v108 - v109) >> 3;
  }
  else
  {
    v110 = 0;
    v111 = *(char **)(v12 + 72);
    do
    {
      if ((unint64_t)v111 >= *(_QWORD *)(v12 + 80))
      {
        v111 = sub_1C4DB27F8((char **)(v12 + 64), __p);
        v110 = (unint64_t)__p[0];
        v109 = *(_QWORD *)(v12 + 136);
        v108 = *(_QWORD *)(v12 + 144);
      }
      else
      {
        *(_DWORD *)v111 = v110;
        *((_QWORD *)v111 + 1) = 0;
        *((_QWORD *)v111 + 2) = 0;
        v111 += 24;
      }
      *(_QWORD *)(v12 + 72) = v111;
      __p[0] = (void *)++v110;
    }
    while (v110 < (v108 - v109) >> 3);
    v112 = (v108 - v109) >> 3;
  }
  v113 = *(_QWORD *)(v12 + 8);
  v114 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v12 + 16) - v113) >> 3);
  if (v112 <= v114)
  {
    if (v112 < v114)
      *(_QWORD *)(v12 + 16) = v113 + 24 * v112;
  }
  else
  {
    sub_1C4DB2908((char **)(v12 + 8), v112 - v114);
  }
  v115 = *(_QWORD *)(v12 + 120);
  v116 = *(uint64_t **)(v115 + 272);
  v117 = *(uint64_t **)(v115 + 280);
  if (v116 != v117)
  {
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    v358[0] = 0u;
    v357 = 0u;
    *(_OWORD *)__p = 0u;
    do
    {
      v122 = *v116;
      if (v121 == v120)
        v123 = 0;
      else
        v123 = 32 * (v121 - v120) - 1;
      v124 = v119 + v118;
      if (v123 == v119 + v118)
      {
        sub_1C4DB2B30((uint64_t)__p);
        v120 = (char *)__p[1];
        v121 = (_BYTE *)v357;
        v118 = *((_QWORD *)&v358[0] + 1);
        v119 = *(_QWORD *)&v358[0];
        v124 = *(_QWORD *)&v358[0] + *((_QWORD *)&v358[0] + 1);
      }
      v125 = (_QWORD *)(*(_QWORD *)&v120[(v124 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v124);
      *v125 = v122;
      v125[1] = 0;
      *((_QWORD *)&v358[0] + 1) = ++v118;
      ++v116;
    }
    while (v116 != v117);
    if (v118)
    {
      v126 = (uint64_t *)(v12 + 88);
      while (1)
      {
        v127 = (uint64_t *)(*(_QWORD *)((char *)__p[1] + ((*(_QWORD *)&v358[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * LOBYTE(v358[0]));
        v129 = (uint64_t **)*v127;
        v128 = v127[1];
        *((_QWORD *)&v358[0] + 1) = v118 - 1;
        if (++*(_QWORD *)&v358[0] >= 0x200uLL)
        {
          operator delete(*(void **)__p[1]);
          __p[1] = (char *)__p[1] + 8;
          *(_QWORD *)&v358[0] -= 256;
        }
        v130 = *(_DWORD *)(v12 + 176);
        if (!v130)
          goto LABEL_366;
        v131 = *v129[4];
        v132 = *(_QWORD *)(v12 + 160);
        v133 = v130 - 1;
        v134 = ((v131 >> 4) ^ (v131 >> 9)) & (v130 - 1);
        v135 = *(_QWORD *)(v132 + 16 * v134);
        if (v131 != v135)
          break;
LABEL_351:
        v136 = *(_DWORD *)(v132 + 16 * v134 + 8);
LABEL_352:
        LODWORD(v331) = v136;
        v137 = operator new(0xC0uLL);
        *v137 = 0;
        v137[1] = 0;
        v138 = sub_1C4DB2E4C((uint64_t)(v137 + 2), v128, (int *)&v331);
        v137[1] = v126;
        v139 = *(_QWORD *)(v12 + 88);
        *v137 = v139;
        *(_QWORD *)(v139 + 8) = v137;
        *(_QWORD *)(v12 + 88) = v137;
        ++*(_QWORD *)(v12 + 104);
        *(_QWORD *)(*(_QWORD *)(v12 + 64) + 24 * v331 + 8) = v138;
        v140 = v129[1];
        v141 = v129[2];
        v118 = *((_QWORD *)&v358[0] + 1);
        if (v140 != v141)
        {
          v142 = (_BYTE *)v357;
          v143 = (char *)__p[1];
          v144 = *(_QWORD *)&v358[0];
          do
          {
            v145 = *v140;
            v146 = *v126;
            if (v142 == v143)
              v147 = 0;
            else
              v147 = 32 * (v142 - v143) - 1;
            v148 = v144 + v118;
            if (v147 == v144 + v118)
            {
              sub_1C4DB2B30((uint64_t)__p);
              v143 = (char *)__p[1];
              v142 = (_BYTE *)v357;
              v118 = *((_QWORD *)&v358[0] + 1);
              v144 = *(_QWORD *)&v358[0];
              v148 = *(_QWORD *)&v358[0] + *((_QWORD *)&v358[0] + 1);
            }
            v149 = (_QWORD *)(*(_QWORD *)&v143[(v148 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v148);
            *v149 = v145;
            v149[1] = v146 + 16;
            *((_QWORD *)&v358[0] + 1) = ++v118;
            ++v140;
          }
          while (v140 != v141);
        }
        if (!v118)
          goto LABEL_367;
      }
      v150 = 1;
      while (v135 != -4096)
      {
        v151 = v134 + v150++;
        v134 = v151 & v133;
        v135 = *(_QWORD *)(v132 + 16 * v134);
        if (v131 == v135)
          goto LABEL_351;
      }
LABEL_366:
      v136 = -1;
      goto LABEL_352;
    }
LABEL_367:
    if (*(_QWORD *)(v12 + 144) != *(_QWORD *)(v12 + 136))
    {
      v152 = 0;
      while (!sub_1C4DB2AAC((int *)(*v107 + 24 * v152)))
      {
        v157 = *(_QWORD *)(v12 + 120);
        v158 = *(_DWORD *)(v157 + 264);
        if (v158)
        {
          v159 = *(_QWORD *)(*(_QWORD *)(v12 + 136) + 8 * v152);
          v160 = *(_QWORD *)(v157 + 248);
          v161 = v158 - 1;
          v162 = ((v159 >> 4) ^ (v159 >> 9)) & (v158 - 1);
          v163 = *(_QWORD *)(v160 + 16 * v162);
          if (v159 != v163)
          {
            v164 = 1;
            while (v163 != -4096)
            {
              v165 = v162 + v164++;
              v162 = v165 & v161;
              v163 = *(_QWORD *)(v160 + 16 * v162);
              if (v159 == v163)
                goto LABEL_378;
            }
            goto LABEL_389;
          }
LABEL_378:
          v166 = *(_QWORD *)(v160 + 16 * v162 + 8);
          if (v166)
          {
            v167 = *(_DWORD *)(v12 + 176);
            if (v167)
            {
              v168 = **(_QWORD **)(v166 + 32);
              v169 = *(_QWORD *)(v12 + 160);
              v170 = v167 - 1;
              v171 = ((v168 >> 4) ^ (v168 >> 9)) & (v167 - 1);
              v172 = *(_QWORD *)(v169 + 16 * v171);
              if (v168 == v172)
              {
LABEL_381:
                v173 = *(_DWORD *)(v169 + 16 * v171 + 8);
                goto LABEL_382;
              }
              v180 = 1;
              while (v172 != -4096)
              {
                v181 = v171 + v180++;
                v171 = v181 & v170;
                v172 = *(_QWORD *)(v169 + 16 * v171);
                if (v168 == v172)
                  goto LABEL_381;
              }
            }
            v173 = -1;
LABEL_382:
            v174 = *v107 + 24 * v173;
            *(_QWORD *)(*v107 + 24 * v152 + 8) = *(_QWORD *)(v174 + 8);
            v175 = *(_QWORD **)(v174 + 8);
            v176 = v175 + 12;
            v178 = v175 + 13;
            v177 = *((unsigned int *)v175 + 26);
            v179 = *((unsigned int *)v175 + 27);
LABEL_386:
            if (v177 >= v179)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v176, (uint64_t)(v175 + 14), v177 + 1, 4);
              v177 = *((unsigned int *)v175 + 26);
            }
            *(_DWORD *)(*v176 + 4 * v177) = v152;
            ++*v178;
          }
        }
LABEL_389:
        if (++v152 >= (unint64_t)((uint64_t)(*(_QWORD *)(v12 + 144) - *(_QWORD *)(v12 + 136)) >> 3))
          goto LABEL_396;
      }
      v153 = *v107;
      v154 = (int *)(*v107 + 24 * v152);
      if (sub_1C4DB2AAC(v154))
      {
        v155 = sub_1C4DB2ED4((uint64_t)v154);
        v156 = *(_QWORD **)(v153 + 24 * v152 + 8);
        if (v155)
          v156 = (_QWORD *)*v156;
      }
      else
      {
        v156 = (_QWORD *)(v153 + 24 * v152 + 8);
      }
      v175 = (_QWORD *)*v156;
      if (!*v156)
        goto LABEL_389;
      v178 = v175 + 13;
      v177 = *((unsigned int *)v175 + 26);
      v176 = v175 + 12;
      v179 = *((unsigned int *)v175 + 27);
      goto LABEL_386;
    }
LABEL_396:
    v182 = (void **)__p[1];
    v183 = (void **)v357;
    *((_QWORD *)&v358[0] + 1) = 0;
    v184 = v357 - (unint64_t)__p[1];
    if ((unint64_t)v357 - (unint64_t)__p[1] >= 0x11)
    {
      do
      {
        operator delete(*v182);
        v183 = (void **)v357;
        v182 = (void **)((char *)__p[1] + 8);
        __p[1] = v182;
        v184 = v357 - (_QWORD)v182;
      }
      while ((_QWORD)v357 - (_QWORD)v182 > 0x10uLL);
    }
    v185 = v184 >> 3;
    if (v185 == 1)
    {
      v186 = 128;
    }
    else
    {
      if (v185 != 2)
        goto LABEL_403;
      v186 = 256;
    }
    *(_QWORD *)&v358[0] = v186;
LABEL_403:
    if (v182 != v183)
    {
      do
      {
        v187 = *v182++;
        operator delete(v187);
      }
      while (v182 != v183);
      if ((void *)v357 != __p[1])
        *(_QWORD *)&v357 = v357 + (((unint64_t)__p[1] - v357 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (__p[0])
      operator delete(__p[0]);
  }
  v188 = v12 + 88;
  v189 = *(uint64_t **)(v12 + 96);
  if ((uint64_t *)(v12 + 88) != v189)
  {
    v190 = (uint64_t *)(v12 + 88);
    do
    {
      if ((sub_1C5132D7C((uint64_t *)v12, *v190 + 16) & 1) == 0)
      {
        v191 = *v190;
        sub_1C5133110((uint64_t *)v12, *v190 + 16, v190);
        v190 = *(uint64_t **)(v191 + 8);
        sub_1C5132D7C((uint64_t *)v12, *v190 + 16);
      }
      v190 = (uint64_t *)*v190;
    }
    while (v190 != v189);
  }
  if ((sub_1C51334E0((uint64_t *)v12) & 1) == 0)
  {
    sub_1C5133110((uint64_t *)v12, 0, *(uint64_t **)(v12 + 96));
    sub_1C51334E0((uint64_t *)v12);
  }
  llvm::BlockFrequencyInfoImplBase::unwrapLoops((_QWORD *)v12);
  if (byte_1ED82CD38)
  {
    llvm::Function::getEntryCount(**(uint64_t *****)(v12 + 128), 0, (uint64_t)__p);
    if ((_BYTE)v357)
    {
      while (v188 != *(_QWORD *)(v12 + 96))
      {
        v188 = *(_QWORD *)v188;
        if (*(_DWORD *)(v188 + 28) >= 2u)
        {
          sub_1C61EA23C(v12);
          break;
        }
      }
    }
  }
  Name = (uint64_t)llvm::BlockFrequencyInfoImplBase::finalizeMetrics((llvm::BlockFrequencyInfoImplBase *)v12);
  if (byte_1ED82CC78)
  {
    for (i = *(_QWORD *)(v215 + 328); i != v215 + 320; i = *(_QWORD *)(i + 8))
    {
      Name = sub_1C4F763D4(*(_QWORD *)(v12 + 160), *(_DWORD *)(v12 + 176), i, __p);
      if ((Name & 1) == 0)
        Name = sub_1C61E9DBC(v12, i, 0);
    }
  }
  if (dword_1ED7F9688)
  {
    v201 = byte_1ED82C79F & 0x7F;
    if (byte_1ED82C79F < 0)
      v201 = qword_1ED82C790;
    if (!v201)
      goto LABEL_487;
    Name = (uint64_t)llvm::Value::getName(*(llvm::Value **)v215);
    v203 = v202;
    if (byte_1ED82C79F >= 0)
      v204 = &qword_1ED82C788;
    else
      v204 = (uint64_t *)qword_1ED82C788;
    v205 = qword_1ED82C790;
    if (byte_1ED82C79F >= 0)
      v205 = byte_1ED82C79F & 0x7F;
    if (v203 == v205)
    {
      if (!v203 || (Name = memcmp((const void *)Name, v204, v203), !(_DWORD)Name))
      {
LABEL_487:
        v206 = llvm::Value::getName(*(llvm::Value **)v215);
        v335[0] = 1283;
        v331 = "MachineBlockFrequencyDAGS.";
        v333 = (unint64_t)v206;
        v334 = v207;
        v249 = (_BYTE *)v216;
        LOWORD(v358[0]) = 257;
        sub_1C5131164((uint64_t)&v249, (llvm::Twine *)&v331, 1, (llvm::Twine *)__p);
      }
    }
  }
  if (byte_1ED7F95C8)
  {
    v208 = byte_1ED82CB9F & 0x7F;
    if (byte_1ED82CB9F < 0)
      v208 = qword_1ED82CB90;
    if (!v208)
      goto LABEL_499;
    Name = (uint64_t)llvm::Value::getName(*(llvm::Value **)v215);
    v210 = v209;
    if (byte_1ED82CB9F >= 0)
      v211 = &qword_1ED82CB88;
    else
      v211 = (uint64_t *)qword_1ED82CB88;
    v212 = qword_1ED82CB90;
    if (byte_1ED82CB9F >= 0)
      v212 = byte_1ED82CB9F & 0x7F;
    if (v210 == v212)
    {
      if (!v210 || (Name = memcmp((const void *)Name, v211, v210), !(_DWORD)Name))
      {
LABEL_499:
        v213 = *(_QWORD *)(v216 + 248);
        v214 = llvm::dbgs((llvm *)Name);
        (*(void (**)(uint64_t, llvm *))(*(_QWORD *)v213 + 24))(v213, v214);
      }
    }
  }
}

void llvm::MachineBlockFrequencyInfo::~MachineBlockFrequencyInfo(llvm::MachineBlockFrequencyInfo *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E8143F80;
  v2 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E8143F80;
  v2 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C4926674(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E8143F80;
  v2 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C4926674(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::MachineBlockFrequencyInfo::runOnMachineFunction(llvm::MachineBlockFrequencyInfo *this, llvm::MachineFunction *a2)
{
  void **v4;
  void *v5;
  const llvm::MachineBranchProbabilityInfo *v6;
  void **v7;
  void *v8;
  const llvm::MachineLoopInfo *v9;

  v4 = (void **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::MachineBranchProbabilityInfo::ID);
  v6 = (const llvm::MachineBranchProbabilityInfo *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1)
                                                                                             + 96))(*(v4 - 1), &llvm::MachineBranchProbabilityInfo::ID);
  v7 = (void **)**((_QWORD **)this + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::MachineLoopInfo::ID);
  v9 = (const llvm::MachineLoopInfo *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::MachineLoopInfo::ID);
  llvm::MachineBlockFrequencyInfo::calculate(this, a2, v6, v9);
  return 0;
}

uint64_t llvm::MachineBlockFrequencyInfo::releaseMemory(llvm::MachineBlockFrequencyInfo *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C5131164(uint64_t a1, llvm::Twine *a2, char a3, llvm::Twine *a4)
{
  llvm *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  std::string *v10;
  size_t size;
  llvm::raw_ostream *v12;
  void *v13;
  char v14;
  size_t v15;
  std::string *v16;
  char *Name;
  unint64_t v18;
  char *v19;
  std::string::size_type v20;
  std::string *p_dst;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  uint64_t v29;
  unint64_t v30;
  std::string *v31;
  size_t v32;
  _DWORD *v33;
  uint64_t v34;
  llvm::raw_ostream *v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  std::string *v40;
  size_t v41;
  uint64_t v42;
  _QWORD *v43;
  _BYTE *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unsigned int *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  llvm::raw_ostream *v73;
  uint64_t v74;
  llvm::raw_ostream *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  const char *v81;
  size_t v82;
  size_t v83;
  std::string *v84;
  llvm::raw_ostream *v85;
  _BYTE *v86;
  _QWORD *v87;
  uint64_t v88;
  llvm::raw_ostream *v89;
  _WORD *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  _BOOL4 v95;
  int v96;
  uint64_t v97;
  int v99;
  llvm::raw_ostream *v100;
  void *v101;
  void *v102;
  _WORD *v103;
  llvm::raw_ostream *v104;
  std::string *v105;
  size_t v106;
  void *v107;
  std::string *v108;
  size_t v109;
  uint64_t v110;
  llvm::raw_ostream *v111;
  uint64_t *v112;
  _WORD *v113;
  unint64_t v114;
  const char *v115;
  size_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t *v120;
  _QWORD *v121;
  const char *v122;
  unsigned int *v123;
  uint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  unint64_t *v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _WORD *v133;
  llvm *v134;
  llvm::raw_ostream *v135;
  _QWORD *v136;
  std::string v137;
  _QWORD v138[4];
  __int16 v139;
  int v140;
  void *v141;
  uint64_t v142;
  char v143;
  void *__p;
  uint64_t *v145;
  char v146;
  char v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  void *v151[2];
  uint64_t v152;
  std::string v153;
  std::string __dst;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  int v159;
  std::string *v160;

  v140 = 0;
  llvm::Twine::str(a2, &__p);
  v139 = 260;
  v138[0] = &__p;
  llvm::createGraphFilename((llvm::Twine *)v138, &v140, &__dst);
  v137 = __dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if (v147 < 0)
    operator delete(__p);
  v7 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v138, v140, 1, 0, 0);
  if (v140 == -1)
  {
    v8 = (llvm::raw_ostream *)llvm::errs(v7);
    v9 = *((_QWORD *)v8 + 4);
    if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 0x13)
    {
      *(_DWORD *)(v9 + 16) = 656434540;
      *(_OWORD *)v9 = *(_OWORD *)"error opening file '";
      *((_QWORD *)v8 + 4) += 20;
    }
    else
    {
      v8 = llvm::raw_ostream::write(v8, "error opening file '", 0x14uLL);
    }
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v137;
    else
      v10 = (std::string *)v137.__r_.__value_.__r.__words[0];
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v137.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v137.__r_.__value_.__l.__size_;
    v12 = llvm::raw_ostream::write(v8, (const char *)v10, size);
    v13 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 0xEuLL)
    {
      qmemcpy(v13, "' for writing!\n", 15);
      *((_QWORD *)v12 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v12, "' for writing!\n", 0xFuLL);
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    __dst.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_15;
  }
  sub_1C61EA690((uint64_t)&__p, (uint64_t)v138, a1, a3);
  llvm::Twine::str(a4, &v141);
  Name = llvm::Value::getName(**(llvm::Value ***)(*(_QWORD *)(*v145 + 248) + 128));
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v19 = Name;
  v20 = v18;
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    p_dst = (std::string *)operator new(v22 + 1);
    __dst.__r_.__value_.__l.__size_ = v20;
    __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_35;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18;
  p_dst = &__dst;
  if (v18)
LABEL_35:
    memmove(p_dst, v19, v20);
  p_dst->__r_.__value_.__s.__data_[v20] = 0;
  v24 = v143 & 0x7F;
  if (v143 < 0)
    v24 = v142;
  if (v24)
  {
    v25 = (llvm::raw_ostream *)__p;
    v26 = *((_QWORD *)__p + 4);
    if ((unint64_t)(*((_QWORD *)__p + 3) - v26) > 8)
    {
      *(_BYTE *)(v26 + 8) = 34;
      *(_QWORD *)v26 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v25 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__p, "digraph \"", 9uLL);
    }
    v27 = (std::string *)&v141;
  }
  else
  {
    v28 = __dst.__r_.__value_.__l.__size_;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
    v25 = (llvm::raw_ostream *)__p;
    v29 = *((_QWORD *)__p + 4);
    v30 = *((_QWORD *)__p + 3) - v29;
    if (!v28)
    {
      if (v30 > 0x11)
      {
        *(_WORD *)(v29 + 16) = 2683;
        *(_OWORD *)v29 = *(_OWORD *)"digraph unnamed {\n";
        *((_QWORD *)v25 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)__p, "digraph unnamed {\n", 0x12uLL);
      }
      goto LABEL_62;
    }
    if (v30 > 8)
    {
      *(_BYTE *)(v29 + 8) = 34;
      *(_QWORD *)v29 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v25 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__p, "digraph \"", 9uLL);
    }
    v27 = &__dst;
  }
  llvm::DOT::EscapeString((char *)v27, &v153);
  if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v153;
  else
    v31 = (std::string *)v153.__r_.__value_.__r.__words[0];
  if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = *((_BYTE *)&v153.__r_.__value_.__s + 23) & 0x7F;
  else
    v32 = v153.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v25, (const char *)v31, v32);
  v33 = (_DWORD *)*((_QWORD *)v25 + 4);
  if (*((_QWORD *)v25 + 3) - (_QWORD)v33 > 3uLL)
  {
    *v33 = 175841314;
    *((_QWORD *)v25 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v25, "\" {\n", 4uLL);
  }
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
LABEL_62:
  v34 = v143 & 0x7F;
  if (v143 < 0)
    v34 = v142;
  if (v34)
  {
    v35 = (llvm::raw_ostream *)__p;
    v36 = (_QWORD *)*((_QWORD *)__p + 4);
    if (*((_QWORD *)__p + 3) - (_QWORD)v36 > 7uLL)
    {
      *v36 = 0x223D6C6562616C09;
      *((_QWORD *)v35 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__p, "\tlabel=\"", 8uLL);
    }
    v37 = (std::string *)&v141;
    goto LABEL_74;
  }
  v38 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v38 = __dst.__r_.__value_.__l.__size_;
  if (v38)
  {
    v35 = (llvm::raw_ostream *)__p;
    v39 = (_QWORD *)*((_QWORD *)__p + 4);
    if (*((_QWORD *)__p + 3) - (_QWORD)v39 > 7uLL)
    {
      *v39 = 0x223D6C6562616C09;
      *((_QWORD *)v35 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__p, "\tlabel=\"", 8uLL);
    }
    v37 = &__dst;
LABEL_74:
    llvm::DOT::EscapeString((char *)v37, &v153);
    if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &v153;
    else
      v40 = (std::string *)v153.__r_.__value_.__r.__words[0];
    if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = *((_BYTE *)&v153.__r_.__value_.__s + 23) & 0x7F;
    else
      v41 = v153.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v35, (const char *)v40, v41);
    v42 = *((_QWORD *)v35 + 4);
    if ((unint64_t)(*((_QWORD *)v35 + 3) - v42) > 2)
    {
      *(_BYTE *)(v42 + 2) = 10;
      *(_WORD *)v42 = 15138;
      *((_QWORD *)v35 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v35, "\";\n", 3uLL);
    }
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&v153.__r_.__value_.__s + 23) = 0;
  v153.__r_.__value_.__s.__data_[0] = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)__p, (const char *)&v153, 0);
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  v43 = __p;
  v44 = (_BYTE *)*((_QWORD *)__p + 4);
  if (*((_BYTE **)__p + 3) == v44)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__p, "\n", 1uLL);
  }
  else
  {
    *v44 = 10;
    ++v43[4];
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v45 = *(_QWORD *)(*(_QWORD *)(*v145 + 248) + 128);
  v46 = (_QWORD *)(v45 + 320);
  v47 = *(_QWORD **)(v45 + 328);
  if (v47 != (_QWORD *)(v45 + 320))
  {
    v48 = (unsigned int *)&llvm::ViewHotFreqPercent;
    v49 = " [shape=";
    while (1)
    {
      v50 = *v145;
      v51 = v48[32];
      memset(&v153, 0, sizeof(v153));
      if (!(_DWORD)v51)
        goto LABEL_120;
      v52 = v149;
      v53 = *(_QWORD *)(v50 + 248);
      if (!v149)
        break;
      if (!v53)
        goto LABEL_97;
LABEL_112:
      v67 = *(_DWORD *)(v53 + 176);
      if (!v67)
        goto LABEL_97;
      v68 = *(_QWORD *)(v53 + 160);
      v69 = v67 - 1;
      v70 = (v67 - 1) & ((v47 >> 4) ^ (v47 >> 9));
      v71 = *(_QWORD **)(v68 + 16 * v70);
      if (v71 != v47)
      {
        v128 = 1;
        while (v71 != (_QWORD *)-4096)
        {
          v129 = v70 + v128++;
          v70 = v129 & v69;
          v71 = *(_QWORD **)(v68 + 16 * v70);
          if (v71 == v47)
            goto LABEL_114;
        }
LABEL_97:
        v57 = 0;
        goto LABEL_116;
      }
LABEL_114:
      v72 = *(unsigned int *)(v68 + 16 * v70 + 8);
      if (v72 == 0xFFFFFFFFLL)
        goto LABEL_97;
      v57 = *(_QWORD *)(*(_QWORD *)(v53 + 8) + 24 * v72 + 16);
LABEL_116:
      LODWORD(__dst.__r_.__value_.__l.__data_) = (unint64_t)((((v51 << 31) | 0x30uLL)
                                                                   * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
      if (v57 >= llvm::BranchProbability::scale((llvm::BranchProbability *)&__dst, v52))
      {
        LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
        v157 = 0;
        v158 = 0;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
        v160 = &v153;
        v159 = 0;
        v155 = 0;
        v156 = 0;
        __dst.__r_.__value_.__r.__words[2] = 0;
        v73 = llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "color=\"red\"", 0xBuLL);
        v74 = v156 - __dst.__r_.__value_.__r.__words[2];
        if (v156 != __dst.__r_.__value_.__r.__words[2])
        {
          v156 = __dst.__r_.__value_.__r.__words[2];
          llvm::raw_ostream::flush_tied_then_write(v73, (const char *)__dst.__r_.__value_.__r.__words[2], v74);
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
        if (v159 == 1 && __dst.__r_.__value_.__r.__words[2])
          MEMORY[0x1CAA32F9C](__dst.__r_.__value_.__r.__words[2], 0x1000C8077774924, v74);
      }
LABEL_120:
      v75 = (llvm::raw_ostream *)__p;
      v76 = *((_QWORD *)__p + 4);
      if ((unint64_t)(*((_QWORD *)__p + 3) - v76) > 4)
      {
        *(_BYTE *)(v76 + 4) = 101;
        *(_DWORD *)v76 = 1685016073;
        *((_QWORD *)v75 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)__p, "\tNode", 5uLL);
      }
      llvm::write_hex(v75, (unint64_t)v47, 3, 0, 0);
      v77 = (_QWORD *)*((_QWORD *)v75 + 4);
      if (*((_QWORD *)v75 + 3) - (_QWORD)v77 > 7uLL)
      {
        *v77 = 0x3D65706168735B20;
        *((_QWORD *)v75 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v75, v49, 8uLL);
      }
      v78 = __p;
      v79 = *((_QWORD *)__p + 4);
      v80 = *((_QWORD *)__p + 3) - v79;
      if (v146)
      {
        if (v80 <= 4)
        {
          v81 = "none,";
          v82 = 5;
          goto LABEL_129;
        }
        *(_BYTE *)(v79 + 4) = 44;
        *(_DWORD *)v79 = 1701736302;
        v131 = v78[4] + 5;
      }
      else
      {
        if (v80 <= 6)
        {
          v81 = "record,";
          v82 = 7;
LABEL_129:
          llvm::raw_ostream::write((llvm::raw_ostream *)__p, v81, v82);
          goto LABEL_130;
        }
        *(_DWORD *)(v79 + 3) = 744780399;
        *(_DWORD *)v79 = 1868785010;
        v131 = v78[4] + 7;
      }
      v78[4] = v131;
LABEL_130:
      if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = *((_BYTE *)&v153.__r_.__value_.__s + 23) & 0x7F;
      else
        v83 = v153.__r_.__value_.__l.__size_;
      if (v83)
      {
        if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v84 = &v153;
        else
          v84 = (std::string *)v153.__r_.__value_.__r.__words[0];
        v85 = llvm::raw_ostream::write((llvm::raw_ostream *)__p, (const char *)v84, v83);
        v86 = (_BYTE *)*((_QWORD *)v85 + 4);
        if (*((_BYTE **)v85 + 3) == v86)
        {
          llvm::raw_ostream::write(v85, ",", 1uLL);
        }
        else
        {
          *v86 = 44;
          ++*((_QWORD *)v85 + 4);
        }
      }
      v87 = __p;
      v88 = *((_QWORD *)__p + 4);
      if ((unint64_t)(*((_QWORD *)__p + 3) - v88) > 5)
      {
        *(_WORD *)(v88 + 4) = 15724;
        *(_DWORD *)v88 = 1700946284;
        v87[4] += 6;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)__p, "label=", 6uLL);
      }
      if (v146)
      {
        v93 = v47[11];
        v92 = v47[12];
        if (v93 == v92)
        {
          v94 = 0;
          v95 = 0;
        }
        else
        {
          v96 = 0;
          v97 = v93 + 8;
          do
          {
            v94 = v96 + 1;
            v95 = v97 != v92;
            if (v97 == v92)
              break;
            v97 += 8;
          }
          while (v96++ != 63);
        }
        if (v94 <= 1)
          v99 = 1;
        else
          v99 = v94;
        v100 = (llvm::raw_ostream *)__p;
        v101 = (void *)*((_QWORD *)__p + 4);
        if (*((_QWORD *)__p + 3) - (_QWORD)v101 > 0x30uLL)
        {
          qmemcpy(v101, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
          v102 = (void *)(*((_QWORD *)v100 + 4) + 49);
          *((_QWORD *)v100 + 4) = v102;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)__p, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
          v102 = (void *)*((_QWORD *)v100 + 4);
        }
        if (*((_QWORD *)v100 + 3) - (_QWORD)v102 > 0x2EuLL)
        {
          qmemcpy(v102, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
          *((_QWORD *)v100 + 4) += 47;
        }
        else
        {
          llvm::raw_ostream::write(v100, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
        }
        sub_1C5E21910(v100, (v99 + v95), 0, 0, 0);
        v103 = (_WORD *)*((_QWORD *)v100 + 4);
        if (*((_QWORD *)v100 + 3) - (_QWORD)v103 <= 1uLL)
        {
          v89 = v100;
          v91 = "\">";
          goto LABEL_159;
        }
        *v103 = 15906;
        *((_QWORD *)v100 + 4) += 2;
      }
      else
      {
        v89 = (llvm::raw_ostream *)__p;
        v90 = (_WORD *)*((_QWORD *)__p + 4);
        if (*((_QWORD *)__p + 3) - (_QWORD)v90 <= 1uLL)
        {
          v91 = "\"{";
LABEL_159:
          llvm::raw_ostream::write(v89, v91, 2uLL);
          goto LABEL_160;
        }
        *v90 = 31522;
        *((_QWORD *)v89 + 4) += 2;
      }
LABEL_160:
      v104 = (llvm::raw_ostream *)__p;
      if (v146)
      {
        sub_1C61EA72C(&__dst, (uint64_t)&v148, (uint64_t)v47, *v145);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v108 = &__dst;
        else
          v108 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v109 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        else
          v109 = __dst.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(v104, (const char *)v108, v109);
        v110 = *((_QWORD *)v104 + 4);
        if ((unint64_t)(*((_QWORD *)v104 + 3) - v110) > 4)
        {
          *(_BYTE *)(v110 + 4) = 62;
          *(_DWORD *)v110 = 1685335868;
          *((_QWORD *)v104 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v104, "</td>", 5uLL);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          v107 = (void *)__dst.__r_.__value_.__r.__words[0];
          goto LABEL_181;
        }
      }
      else
      {
        sub_1C61EA72C(v151, (uint64_t)&v148, (uint64_t)v47, *v145);
        llvm::DOT::EscapeString((char *)v151, &__dst);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v105 = &__dst;
        else
          v105 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v106 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        else
          v106 = __dst.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(v104, (const char *)v105, v106);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v152) < 0)
        {
          v107 = v151[0];
LABEL_181:
          operator delete(v107);
        }
      }
      v151[0] = 0;
      v151[1] = 0;
      v152 = 0;
      LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
      v157 = 0;
      v158 = 0;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
      v160 = (std::string *)v151;
      v159 = 0;
      v155 = 0;
      v156 = 0;
      __dst.__r_.__value_.__r.__words[2] = 0;
      if (v146)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "</tr><tr>", 9uLL);
        v111 = (llvm::raw_ostream *)__p;
        v112 = (uint64_t *)((char *)__p + 32);
        v113 = (_WORD *)*((_QWORD *)__p + 4);
        v114 = *((_QWORD *)__p + 3) - (_QWORD)v113;
        if (v146)
        {
          if (v114 > 0xD)
          {
            qmemcpy(v113, "</tr></table>>", 14);
            v130 = *v112 + 14;
            goto LABEL_226;
          }
          v115 = "</tr></table>>";
          v116 = 14;
          goto LABEL_189;
        }
      }
      else
      {
        v111 = (llvm::raw_ostream *)__p;
        v112 = (uint64_t *)((char *)__p + 32);
        v113 = (_WORD *)*((_QWORD *)__p + 4);
        v114 = *((_QWORD *)__p + 3) - (_QWORD)v113;
      }
      if (v114 > 1)
      {
        *v113 = 8829;
        v130 = *v112 + 2;
LABEL_226:
        *v112 = v130;
        goto LABEL_190;
      }
      v115 = "}\"";
      v116 = 2;
LABEL_189:
      llvm::raw_ostream::write(v111, v115, v116);
LABEL_190:
      v117 = __p;
      v118 = *((_QWORD *)__p + 4);
      if ((unint64_t)(*((_QWORD *)__p + 3) - v118) > 2)
      {
        *(_BYTE *)(v118 + 2) = 10;
        *(_WORD *)v118 = 15197;
        v117[4] += 3;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)__p, "];\n", 3uLL);
      }
      v120 = (unint64_t *)v47[11];
      v119 = (unint64_t *)v47[12];
      if (v120 != v119)
      {
        v121 = v46;
        v122 = v49;
        v123 = v48;
        v124 = 0;
        do
        {
          v125 = &v120[v124];
          sub_1C5134220((uint64_t)&__p, v47, &v120[v124]);
          v126 = v124 * 8 + 8;
          if ((_DWORD)(v124 * 8) == 504)
            break;
          ++v124;
        }
        while (v125 + 1 != v119);
        v120 = (unint64_t *)((char *)v120 + v126);
        v48 = v123;
        v49 = v122;
        v46 = v121;
      }
      if (v120 != v119)
      {
        v127 = v120;
        do
        {
          sub_1C5134220((uint64_t)&__p, v47, v127);
          ++v120;
          ++v127;
        }
        while (v120 != v119);
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
      if (v159 == 1 && __dst.__r_.__value_.__r.__words[2])
        MEMORY[0x1CAA32F9C](__dst.__r_.__value_.__r.__words[2], 0x1000C8077774924);
      if (SHIBYTE(v152) < 0)
        operator delete(v151[0]);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      v47 = (_QWORD *)v47[1];
      if (v47 == v46)
        goto LABEL_231;
    }
    v54 = *(_QWORD *)(v53 + 128);
    v55 = v54 + 320;
    v56 = *(_QWORD *)(v54 + 328);
    if (v56 == v55)
    {
      v52 = 0;
      goto LABEL_112;
    }
    v52 = 0;
    v58 = *(_QWORD *)(v53 + 160);
    v59 = *(_DWORD *)(v53 + 176);
    v60 = v59 - 1;
    while (1)
    {
      if (!v59)
        goto LABEL_111;
      v61 = ((v56 >> 4) ^ (v56 >> 9)) & v60;
      v62 = *(_QWORD *)(v58 + 16 * v61);
      if (v62 != v56)
        break;
LABEL_101:
      v63 = *(unsigned int *)(v58 + 16 * v61 + 8);
      if (v63 == 0xFFFFFFFFLL)
        goto LABEL_111;
      v64 = *(_QWORD *)(*(_QWORD *)(v53 + 8) + 24 * v63 + 16);
LABEL_103:
      if (v52 <= v64)
        v52 = v64;
      v149 = v52;
      v56 = *(_QWORD *)(v56 + 8);
      if (v56 == v55)
        goto LABEL_112;
    }
    v65 = 1;
    while (v62 != -4096)
    {
      v66 = v61 + v65++;
      v61 = v66 & v60;
      v62 = *(_QWORD *)(v58 + 16 * v61);
      if (v62 == v56)
        goto LABEL_101;
    }
LABEL_111:
    v64 = 0;
    goto LABEL_103;
  }
LABEL_231:
  v132 = __p;
  v133 = (_WORD *)*((_QWORD *)__p + 4);
  if (*((_QWORD *)__p + 3) - (_QWORD)v133 > 1uLL)
  {
    *v133 = 2685;
    v132[4] += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__p, "}\n", 2uLL);
  }
  if (v143 < 0)
    operator delete(v141);
  v134 = (llvm *)MEMORY[0x1CAA32FB4](v150, 8);
  v135 = (llvm::raw_ostream *)llvm::errs(v134);
  v136 = (_QWORD *)*((_QWORD *)v135 + 4);
  if (*((_QWORD *)v135 + 3) - (_QWORD)v136 > 7uLL)
  {
    *v136 = 0xA202E656E6F6420;
    *((_QWORD *)v135 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v135, " done. \n", 8uLL);
  }
  __dst = v137;
  memset(&v137, 0, sizeof(v137));
LABEL_15:
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v138);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v137.__r_.__value_.__l.__data_);
  v14 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  else
    v15 = __dst.__r_.__value_.__l.__size_;
  if (v15)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &__dst;
    else
      v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    llvm::DisplayGraph(v16, v15, 0, 0);
    v14 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v14 < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

uint64_t llvm::MachineBlockFrequencyInfo::getBlockFreq(llvm::MachineBlockFrequencyInfo *this, const llvm::MachineBasicBlock *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  const llvm::MachineBasicBlock *v7;
  uint64_t v8;
  int v10;
  int v11;

  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 176);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 160);
      v5 = v3 - 1;
      v6 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v7 = *(const llvm::MachineBasicBlock **)(v4 + 16 * v6);
      if (v7 == a2)
      {
LABEL_4:
        v8 = *(unsigned int *)(v4 + 16 * v6 + 8);
        if (v8 != 0xFFFFFFFFLL)
          return *(_QWORD *)(*(_QWORD *)(v2 + 8) + 24 * v8 + 16);
      }
      else
      {
        v10 = 1;
        while (v7 != (const llvm::MachineBasicBlock *)-4096)
        {
          v11 = v6 + v10++;
          v6 = v11 & v5;
          v7 = *(const llvm::MachineBasicBlock **)(v4 + 16 * v6);
          if (v7 == a2)
            goto LABEL_4;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C51321FC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int v10;

  v2 = *(_DWORD *)(a1 + 176);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 160);
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = *(_QWORD *)(v3 + 16 * v5);
    if (v6 == a2)
    {
LABEL_3:
      v7 = *(unsigned int *)(v3 + 16 * v5 + 8);
      if (v7 != 0xFFFFFFFFLL)
        return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * v7 + 16);
    }
    else
    {
      v9 = 1;
      while (v6 != -4096)
      {
        v10 = v5 + v9++;
        v5 = v10 & v4;
        v6 = *(_QWORD *)(v3 + 16 * v5);
        if (v6 == a2)
          goto LABEL_3;
      }
    }
  }
  return 0;
}

uint64_t llvm::MachineBlockFrequencyInfo::isIrrLoopHeader(llvm::MachineBlockFrequencyInfo *this, const llvm::MachineBasicBlock *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  const llvm::MachineBasicBlock *v7;
  unsigned int v8;
  int v10;
  int v11;

  v2 = *((_QWORD *)this + 31);
  v3 = *(_DWORD *)(v2 + 176);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v2 + 160);
  v5 = v3 - 1;
  v6 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = *(const llvm::MachineBasicBlock **)(v4 + 16 * v6);
  if (v7 != a2)
  {
    v10 = 1;
    while (v7 != (const llvm::MachineBasicBlock *)-4096)
    {
      v11 = v6 + v10++;
      v6 = v11 & v5;
      v7 = *(const llvm::MachineBasicBlock **)(v4 + 16 * v6);
      if (v7 == a2)
        goto LABEL_3;
    }
    return 0;
  }
LABEL_3:
  v8 = *(_DWORD *)(v4 + 16 * v6 + 8);
  if (v8 == -1)
    return 0;
  return sub_1C617C970((uint64_t *)(v2 + 32), v8);
}

uint64_t llvm::MachineBlockFrequencyInfo::getFunction(llvm::MachineBlockFrequencyInfo *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    return *(_QWORD *)(v1 + 128);
  else
    return 0;
}

llvm::raw_ostream *llvm::MachineBlockFrequencyInfo::printBlockFreq(uint64_t a1, llvm::ScaledNumberBase *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v5;

  v5 = a3;
  v3 = *(_QWORD *)(a1 + 248);
  if (v3)
    return llvm::BlockFrequencyInfoImplBase::printBlockFreq(v3, a2, &v5);
  return a2;
}

llvm::raw_ostream *llvm::MachineBlockFrequencyInfo::printBlockFreq(llvm::MachineBlockFrequencyInfo *this, llvm::raw_ostream *a2, const llvm::MachineBasicBlock *a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 31);
  if (v3)
    return sub_1C61E9ECC(v3, a2, (uint64_t)a3);
  else
    return a2;
}

uint64_t llvm::MachineBlockFrequencyInfo::getEntryFreq(llvm::MachineBlockFrequencyInfo *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    return *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
  else
    return 0;
}

void sub_1C513237C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E8144040;
  MEMORY[0x1CAA32FB4](a1[20], 8);
  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  sub_1C4DB1064(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C51323D8(uint64_t a1, llvm::raw_ostream *this)
{
  void *v4;
  size_t v5;
  char *Name;
  size_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  size_t v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  __int16 v17;
  llvm::raw_ostream *v18;
  _QWORD *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *ProfileCountFromFreq;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  _BYTE *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  _BYTE *v46;
  void *__p[2];
  char v49;

  if (*(_QWORD *)(a1 + 128))
  {
    v4 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0x15uLL)
    {
      qmemcpy(v4, "block-frequency-info: ", 22);
      *((_QWORD *)this + 4) += 22;
    }
    else
    {
      llvm::raw_ostream::write(this, "block-frequency-info: ", 0x16uLL);
    }
    Name = llvm::Value::getName(**(llvm::Value ***)(a1 + 128));
    v7 = v5;
    v8 = (_BYTE *)*((_QWORD *)this + 4);
    if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v8)
    {
      if (v5)
      {
        memcpy(v8, Name, v5);
        v8 = (_BYTE *)(*((_QWORD *)this + 4) + v7);
        *((_QWORD *)this + 4) = v8;
      }
    }
    else
    {
      llvm::raw_ostream::write(this, Name, v5);
      v8 = (_BYTE *)*((_QWORD *)this + 4);
    }
    if (*((_BYTE **)this + 3) == v8)
    {
      llvm::raw_ostream::write(this, "\n", 1uLL);
    }
    else
    {
      *v8 = 10;
      ++*((_QWORD *)this + 4);
    }
    v9 = *(_QWORD *)(a1 + 128);
    v10 = v9 + 320;
    v11 = *(_QWORD *)(v9 + 328);
    if (v11 != v9 + 320)
    {
      do
      {
        v12 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v12) > 2)
        {
          *(_BYTE *)(v12 + 2) = 32;
          *(_WORD *)v12 = 11552;
          *((_QWORD *)this + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(this, " - ", 3uLL);
        }
        sub_1C61E9F70(__p, v11);
        if (v49 >= 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        if (v49 >= 0)
          v14 = v49 & 0x7F;
        else
          v14 = (size_t)__p[1];
        llvm::raw_ostream::write(this, (const char *)v13, v14);
        v15 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v15) > 9)
        {
          *(_WORD *)(v15 + 8) = 8253;
          *(_QWORD *)v15 = *(_QWORD *)": float = ";
          *((_QWORD *)this + 4) += 10;
        }
        else
        {
          llvm::raw_ostream::write(this, ": float = ", 0xAuLL);
        }
        if (v49 < 0)
          operator delete(__p[0]);
        v16 = (llvm::raw_ostream *)sub_1C61EA06C(a1, v11);
        v18 = llvm::ScaledNumberBase::print(this, v16, v17, 64, 5u);
        v19 = (_QWORD *)*((_QWORD *)v18 + 4);
        if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 7uLL)
        {
          *v19 = 0x203D20746E69202CLL;
          *((_QWORD *)v18 + 4) += 8;
        }
        else
        {
          v18 = llvm::raw_ostream::write(v18, ", int = ", 8uLL);
        }
        v20 = *(_DWORD *)(a1 + 176);
        v21 = v11 >> 4;
        if (v20)
        {
          v22 = *(_QWORD *)(a1 + 160);
          v23 = v20 - 1;
          v24 = (v20 - 1) & (v21 ^ (v11 >> 9));
          v25 = *(_QWORD *)(v22 + 16 * v24);
          if (v25 == v11)
          {
LABEL_27:
            v26 = *(unsigned int *)(v22 + 16 * v24 + 8);
            if (v26 != 0xFFFFFFFFLL)
            {
              v27 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * v26 + 16);
              goto LABEL_29;
            }
          }
          else
          {
            v42 = 1;
            while (v25 != -4096)
            {
              v43 = v24 + v42++;
              v24 = v43 & v23;
              v25 = *(_QWORD *)(v22 + 16 * v24);
              if (v25 == v11)
                goto LABEL_27;
            }
          }
        }
        v27 = 0;
LABEL_29:
        sub_1C5E21910(v18, v27, 0, 0, 0);
        v28 = *(_DWORD *)(a1 + 176);
        if (v28)
        {
          v29 = *(_QWORD *)(a1 + 160);
          v30 = v28 - 1;
          v31 = (v28 - 1) & (v21 ^ (v11 >> 9));
          v32 = *(_QWORD *)(v29 + 16 * v31);
          if (v11 == v32)
          {
LABEL_31:
            v33 = *(unsigned int *)(v29 + 16 * v31 + 8);
            if (v33 != 0xFFFFFFFFLL)
            {
              v34 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * v33 + 16);
              goto LABEL_34;
            }
          }
          else
          {
            v44 = 1;
            while (v32 != -4096)
            {
              v45 = v31 + v44++;
              v31 = v45 & v30;
              v32 = *(_QWORD *)(v29 + 16 * v31);
              if (v11 == v32)
                goto LABEL_31;
            }
          }
        }
        v34 = 0;
LABEL_34:
        ProfileCountFromFreq = llvm::BlockFrequencyInfoImplBase::getProfileCountFromFreq((llvm::BlockFrequencyInfoImplBase *)a1, **(uint64_t *****)(a1 + 128), v34, 0);
        if (v36)
        {
          v37 = (unint64_t)ProfileCountFromFreq;
          v38 = *((_QWORD *)this + 4);
          if ((unint64_t)(*((_QWORD *)this + 3) - v38) > 9)
          {
            *(_WORD *)(v38 + 8) = 8253;
            *(_QWORD *)v38 = *(_QWORD *)", count = ";
            *((_QWORD *)this + 4) += 10;
          }
          else
          {
            llvm::raw_ostream::write(this, ", count = ", 0xAuLL);
          }
          sub_1C5E21910(this, v37, 0, 0, 0);
        }
        if (*(_BYTE *)(v11 + 144))
        {
          v39 = *(_QWORD *)(v11 + 136);
          v40 = (void *)*((_QWORD *)this + 4);
          if (*((_QWORD *)this + 3) - (_QWORD)v40 > 0x1AuLL)
          {
            qmemcpy(v40, ", irr_loop_header_weight = ", 27);
            *((_QWORD *)this + 4) += 27;
          }
          else
          {
            llvm::raw_ostream::write(this, ", irr_loop_header_weight = ", 0x1BuLL);
          }
          sub_1C5E21910(this, v39, 0, 0, 0);
        }
        v41 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v41)
        {
          llvm::raw_ostream::write(this, "\n", 1uLL);
        }
        else
        {
          *v41 = 10;
          ++*((_QWORD *)this + 4);
        }
        v11 = *(_QWORD *)(v11 + 8);
      }
      while (v11 != v10);
    }
    v46 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v46)
    {
      llvm::raw_ostream::write(this, "\n", 1uLL);
    }
    else
    {
      *v46 = 10;
      ++*((_QWORD *)this + 4);
    }
  }
  return this;
}

_QWORD *sub_1C51328E0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E8144040;
  MEMORY[0x1CAA32FB4](a1[20], 8);
  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  return sub_1C4DB1064(a1);
}

void sub_1C5132928(_WORD *a1, __int128 *a2, uint64_t *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F9608, "view-machine-block-freq-propagation-dags", 0x28uLL);
  word_1ED7F9612 = (32 * (*a1 & 3)) | word_1ED7F9612 & 0xFF9F;
  xmmword_1ED7F9628 = *a2;
  sub_1C4DB16D0(a3, (uint64_t)&qword_1ED7F9608);
}

void sub_1C5132998(_WORD *a1, __int128 *a2, uint64_t *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&llvm::ViewBlockLayoutWithBFI, "view-block-layout-with-bfi", 0x1AuLL);
  word_1ED82F2A2 = (32 * (*a1 & 3)) | word_1ED82F2A2 & 0xFF9F;
  xmmword_1ED82F2B8 = *a2;
  sub_1C4DB16D0(a3, (uint64_t)&llvm::ViewBlockLayoutWithBFI);
}

uint64_t *sub_1C5132A08(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v13 = 0;
LABEL_16:
    v6 = sub_1C5132AC8(a1, a2, v13);
    *v6 = *a2;
    *((_DWORD *)v6 + 2) = -1;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v9 = 0;
    v10 = 1;
    while (v7 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v7 == -8192;
      if (v11)
        v9 = v6;
      v12 = v5 + v10++;
      v5 = v12 & v4;
      v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * (v12 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v6;
    goto LABEL_16;
  }
  return v6;
}

uint64_t *sub_1C5132AC8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C5132BFC(a1, v6);
      v16 = 0;
      sub_1C4F763D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C5132BFC(a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 16 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5132BFC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *(_DWORD *)(a1 + 16) - 1;
          v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
          v16 = (_QWORD *)(*(_QWORD *)a1 + 16 * v15);
          v17 = *v16;
          if (v13 != *v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -4096)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -8192;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v21 & v14));
              v17 = *v16;
              if (v13 == *v16)
                goto LABEL_12;
            }
            if (v18)
              v16 = v18;
          }
LABEL_12:
          *v16 = v13;
          v16[1] = v12[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v12 += 2;
      }
      while (v12 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v22 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v22)
  {
    v23 = 16 * v22;
    do
    {
      *result = -4096;
      result += 2;
      v23 -= 16;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1C5132D7C(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int *v27;
  _DWORD *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  void *v42[2];
  _QWORD v43[9];
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 2)
  {
    *(_QWORD *)sub_1C4DB3A24(a1[8] + 24 * **(unsigned int **)(a2 + 96)) = -1;
    LODWORD(v42[0]) = **(_DWORD **)(a2 + 96);
    sub_1C513322C((uint64_t)a1, a2, (unsigned int *)v42);
    v5 = *(unsigned int *)(a2 + 12);
    v6 = *(unsigned int *)(a2 + 104);
    if ((_DWORD)v5 == (_DWORD)v6)
      goto LABEL_6;
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 96) + 4 * v5);
    v8 = 4 * v6 - 4 * v5;
    while ((sub_1C513322C((uint64_t)a1, a2, v7) & 1) != 0)
    {
      ++v7;
      v8 -= 4;
      if (!v8)
        goto LABEL_6;
    }
    return 0;
  }
  v42[0] = v43;
  v42[1] = (void *)0x400000000;
  v43[8] = 0;
  v44 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  sub_1C617BEE8(&v39, v4);
  v38 = 0;
  if (!*(_DWORD *)(a2 + 12))
  {
    v10 = 0;
    goto LABEL_40;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = (unsigned int *)(*(_QWORD *)(a2 + 96) + 4 * v11);
    v15 = *v14;
    v16 = *(_QWORD *)(a1[17] + 8 * v15);
    sub_1C4DB3420(a1 + 4, v15);
    if (*(_BYTE *)(v16 + 144))
    {
      v17 = *(_QWORD *)(v16 + 136);
      ++v10;
      if (v12)
        v18 = v17 >= v13;
      else
        v18 = 0;
      if (!v18)
      {
        v13 = *(_QWORD *)(v16 + 136);
        v12 = 1;
      }
      if (v17)
        llvm::BlockFrequencyInfoImplBase::Distribution::add(v42, v14, v17, 0);
    }
    else
    {
      if (v41)
      {
        v20 = (37 * v38) & (v41 - 1);
        v21 = &v39[v20];
        v22 = *v21;
        if (v38 == *v21)
          goto LABEL_38;
        v23 = 0;
        v24 = 1;
        while (v22 != -1)
        {
          if (v23)
            v25 = 0;
          else
            v25 = v22 == -2;
          if (v25)
            v23 = v21;
          v26 = v20 + v24++;
          v20 = v26 & (v41 - 1);
          v21 = &v39[v20];
          v22 = *v21;
          if (v38 == *v21)
            goto LABEL_38;
        }
        if (v23)
          v27 = v23;
        else
          v27 = v21;
      }
      else
      {
        v27 = 0;
      }
      v28 = sub_1C4A0C948((uint64_t)&v39, (uint64_t)&v38, &v38, v27);
      *v28 = v38;
    }
LABEL_38:
    v11 = v38 + 1;
    v38 = v11;
  }
  while (v11 < *(_DWORD *)(a2 + 12));
  if (!v12)
LABEL_40:
    v13 = 1;
  v29 = &v39[v41];
  if ((_DWORD)v40)
  {
    if (v41)
    {
      v37 = 4 * v41;
      v30 = v39;
      while (*v30 >= 0xFFFFFFFE)
      {
        ++v30;
        v37 -= 4;
        if (!v37)
          goto LABEL_42;
      }
    }
    else
    {
      v30 = v39;
    }
  }
  else
  {
LABEL_42:
    v30 = &v39[v41];
  }
  v31 = &v39[v41];
LABEL_46:
  while (v30 != v31)
  {
    if (v13)
      llvm::BlockFrequencyInfoImplBase::Distribution::add(v42, (unsigned int *)(*(_QWORD *)(a2 + 96) + 4 * *v30), v13, 0);
    v32 = v30 + 1;
    while (v32 != v29)
    {
      v33 = *v32++;
      if (v33 <= 0xFFFFFFFD)
      {
        v30 = v32 - 1;
        goto LABEL_46;
      }
    }
    v30 = v29;
  }
  llvm::BlockFrequencyInfoImplBase::distributeIrrLoopHeaderMass((llvm::BlockFrequencyInfoImplBase *)a1, (llvm::BlockFrequencyInfoImplBase::Distribution *)v42);
  v34 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v34)
  {
    v35 = *(unsigned int **)(a2 + 96);
    v36 = 4 * v34;
    do
    {
      sub_1C513322C((uint64_t)a1, a2, v35++);
      v36 -= 4;
    }
    while (v36);
  }
  if (!v10)
    llvm::BlockFrequencyInfoImplBase::adjustLoopHeaderMass((uint64_t)a1, a2);
  MEMORY[0x1CAA32FB4](v39, 4);
  if (v42[0] != v43)
    free(v42[0]);
LABEL_6:
  llvm::BlockFrequencyInfoImplBase::computeLoopScale((uint64_t)a1, a2);
  llvm::BlockFrequencyInfoImplBase::packageLoop((uint64_t)a1, a2);
  return 1;
}

void sub_1C5133110(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t *v12;
  int v13;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v13 = -1;
  memset(v14, 0, sizeof(v14));
  v15 = 1;
  for (i = 7; i != 15; i += 2)
    LODWORD((&v12)[i]) = -1;
  sub_1C61EA4EC((llvm::bfi_detail::IrreducibleGraph *)&v12, a2, (uint64_t)a1);
  v7 = llvm::BlockFrequencyInfoImplBase::analyzeIrreducible((uint64_t)a1, (uint64_t)&v12, a2, a3);
  if (v7 != v8)
  {
    v9 = v7;
    v10 = v8;
    do
    {
      sub_1C5132D7C(a1, v9 + 16);
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9 != v10);
  }
  if (a2)
    llvm::BlockFrequencyInfoImplBase::updateLoopWithIrreducible((uint64_t)a1, a2);
  if ((v15 & 1) == 0)
    MEMORY[0x1CAA32FB4](v16, 8);
  v11 = (void **)v14 + 1;
  sub_1C4DB3D7C(&v11);
}

uint64_t sub_1C513322C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int SuccProbability;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;
  void *v24[2];
  _QWORD v25[9];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v24[0] = v25;
  v24[1] = (void *)0x400000000;
  v25[8] = 0;
  v26 = 0;
  v6 = *a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 24 * v6 + 8);
  if (!v7 || !*(_BYTE *)(v7 + 8))
  {
    v8 = *(_QWORD **)(*(_QWORD *)(a1 + 136) + 8 * v6);
    v9 = (_QWORD *)v8[11];
    v10 = (_QWORD *)v8[12];
    while (1)
    {
      if (v9 == v10)
        goto LABEL_18;
      v11 = *(_DWORD *)(a1 + 176);
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 160);
        v13 = v11 - 1;
        v14 = ((*v9 >> 4) ^ (*v9 >> 9)) & (v11 - 1);
        v15 = *(_QWORD *)(v12 + 16 * (((*v9 >> 4) ^ (*v9 >> 9)) & v13));
        if (*v9 == v15)
        {
LABEL_7:
          v16 = *(_DWORD *)(v12 + 16 * v14 + 8);
          goto LABEL_8;
        }
        v18 = 1;
        while (v15 != -4096)
        {
          v19 = v14 + v18++;
          v14 = v19 & v13;
          v15 = *(_QWORD *)(v12 + 16 * v14);
          if (*v9 == v15)
            goto LABEL_7;
        }
      }
      v16 = -1;
LABEL_8:
      v23 = v16;
      SuccProbability = llvm::MachineBasicBlock::getSuccProbability(v8, (uint64_t)v9);
      if ((llvm::BlockFrequencyInfoImplBase::addToDist(a1, v24, a2, a3, &v23, SuccProbability) & 1) == 0)
        goto LABEL_22;
      ++v9;
    }
  }
  do
  {
    v20 = v7;
    v7 = *(_QWORD *)v7;
  }
  while (v7 && *(_BYTE *)(v7 + 8));
  if ((llvm::BlockFrequencyInfoImplBase::addLoopSuccessorsToDist(a1, a2, v20, v24) & 1) != 0)
  {
LABEL_18:
    llvm::BlockFrequencyInfoImplBase::distributeMass(a1, a3, a2, (unsigned int *)v24);
    v21 = 1;
  }
  else
  {
LABEL_22:
    v21 = 0;
  }
  if (v24[0] != v25)
    free(v24[0]);
  return v21;
}

void sub_1C51333F4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v7 = sub_1C617C028(a1 + 48, a2);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v8 = a1 + 56;
    v9 = 4;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(unsigned int *)(a1 + 64);
  }
  if (v8 + 16 * v9 != v7)
  {
    v10 = *(unsigned int **)(v7 + 8);
    v11 = *a2;
    v12 = *(_QWORD *)(*(_QWORD *)a1 + 64);
    if (sub_1C4DB2AAC((int *)(v12 + 24 * v11)) && (v13 = *(_QWORD *)(v12 + 24 * v11 + 8), *(_BYTE *)(v13 + 8)))
    {
      v14 = *(unsigned int *)(v13 + 24);
      if ((_DWORD)v14)
      {
        v15 = *(unsigned int **)(v13 + 16);
        v16 = 16 * v14;
        do
        {
          llvm::bfi_detail::IrreducibleGraph::addEdge(a1, (uint64_t)v10, v15, a3);
          v15 += 4;
          v16 -= 16;
        }
        while (v16);
      }
    }
    else
    {
      sub_1C61EA5E0(&v17, a1, v10, a3);
    }
  }
}

uint64_t sub_1C51334E0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  uint64_t *v7;
  uint64_t result;
  unsigned int v9;

  *(_QWORD *)sub_1C4DB3A24(a1[8]) = -1;
  v2 = a1[17];
  v3 = a1[18];
  if (v2 == v3)
    return 1;
  while (1)
  {
    v9 = (unint64_t)(v2 - a1[17]) >> 3;
    v4 = a1[8] + 24 * v9;
    v5 = *(uint64_t **)(v4 + 8);
    v6 = (_DWORD *)v4;
    if (v5)
    {
      v6 = (_DWORD *)(a1[8] + 24 * v9);
      if (*((_BYTE *)v5 + 8))
      {
        do
        {
          v7 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5 && *((_BYTE *)v5 + 8));
        v6 = (_DWORD *)v7[12];
      }
    }
    if (*v6 == *(_DWORD *)v4)
    {
      result = sub_1C513322C((uint64_t)a1, 0, &v9);
      if (!(_DWORD)result)
        break;
    }
    v2 += 8;
    if (v2 == v3)
      return 1;
  }
  return result;
}

void sub_1C51335AC(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  const llvm::MachineBasicBlock *v5;
  const llvm::MachineBasicBlock **v6;
  const llvm::MachineBasicBlock **v7;
  const llvm::MachineBasicBlock *v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const llvm::MachineBasicBlock *v19;
  const llvm::MachineBasicBlock **v20;
  const llvm::MachineBasicBlock **v21;
  const llvm::MachineBasicBlock *v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  void **v44;
  void **v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  const llvm::MachineBasicBlock *v50;
  const llvm::MachineBasicBlock *v51;
  const llvm::MachineBasicBlock *v52;
  uint64_t v53;
  int v54;
  _BYTE v55[64];
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  int v60;
  _BYTE v61[64];
  __int128 v62;
  __int128 v63;
  __int128 v64;

  v63 = 0u;
  v64 = 0u;
  v62 = 0u;
  v57 = v61;
  v58 = v61;
  v59 = 8;
  v60 = 0;
  v56 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 328);
  v4 = v56;
  sub_1C4DB5818(&v62, &v56);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v57, v4);
  while (*((_QWORD *)&v64 + 1))
  {
    v5 = *(const llvm::MachineBasicBlock **)(*(_QWORD *)(*((_QWORD *)&v62 + 1)
                                                       + (((unint64_t)v64 >> 6) & 0x3FFFFFFFFFFFFF8))
                                           + 8 * (v64 & 0x1FF));
    *(_QWORD *)&v64 = v64 + 1;
    --*((_QWORD *)&v64 + 1);
    if ((unint64_t)v64 >= 0x400)
    {
      operator delete(**((void ***)&v62 + 1));
      *((_QWORD *)&v62 + 1) += 8;
      *(_QWORD *)&v64 = v64 - 512;
    }
    v6 = (const llvm::MachineBasicBlock **)*((_QWORD *)v5 + 11);
    v7 = (const llvm::MachineBasicBlock **)*((_QWORD *)v5 + 12);
    while (v6 != v7)
    {
      v8 = *v6;
      v51 = v8;
      if (llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 112), v5, v8))
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v57, (uint64_t)v8);
        if (v9)
          sub_1C4DB5818(&v62, &v51);
      }
      ++v6;
    }
  }
  v51 = (const llvm::MachineBasicBlock *)v55;
  v52 = (const llvm::MachineBasicBlock *)v55;
  v53 = 8;
  v54 = 0;
  v10 = *(_QWORD *)(a1 + 128);
  v11 = (_QWORD *)(v10 + 320);
  v12 = *(_QWORD **)(v10 + 328);
  if (v12 != (_QWORD *)(v10 + 320))
  {
    do
    {
      if (v12[11] == v12[12])
      {
        v13 = (char *)sub_1C477672C((uint64_t)&v57, (uint64_t)v12);
        v14 = v58 == v57 ? (uint64_t *)((char *)&v59 + 4) : &v59;
        if (v13 != &v58[8 * *(unsigned int *)v14])
        {
          v15 = *((_QWORD *)&v62 + 1);
          if ((_QWORD)v63 == *((_QWORD *)&v62 + 1))
            v16 = 0;
          else
            v16 = (((_QWORD)v63 - *((_QWORD *)&v62 + 1)) << 6) - 1;
          v17 = *((_QWORD *)&v64 + 1);
          v18 = *((_QWORD *)&v64 + 1) + v64;
          if (v16 == *((_QWORD *)&v64 + 1) + (_QWORD)v64)
          {
            sub_1C4DB589C((uint64_t)&v62);
            v17 = *((_QWORD *)&v64 + 1);
            v15 = *((_QWORD *)&v62 + 1);
            v18 = v64 + *((_QWORD *)&v64 + 1);
          }
          *(_QWORD *)(*(_QWORD *)(v15 + ((v18 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v18 & 0x1FF)) = v12;
          *((_QWORD *)&v64 + 1) = v17 + 1;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v51, (uint64_t)v12);
        }
      }
      v12 = (_QWORD *)v12[1];
    }
    while (v12 != v11);
    while (*((_QWORD *)&v64 + 1))
    {
      v19 = *(const llvm::MachineBasicBlock **)(*(_QWORD *)(*((_QWORD *)&v62 + 1)
                                                          + (((unint64_t)v64 >> 6) & 0x3FFFFFFFFFFFFF8))
                                              + 8 * (v64 & 0x1FF));
      *(_QWORD *)&v64 = v64 + 1;
      --*((_QWORD *)&v64 + 1);
      if ((unint64_t)v64 >= 0x400)
      {
        operator delete(**((void ***)&v62 + 1));
        *((_QWORD *)&v62 + 1) += 8;
        *(_QWORD *)&v64 = v64 - 512;
      }
      v20 = (const llvm::MachineBasicBlock **)*((_QWORD *)v19 + 8);
      v21 = (const llvm::MachineBasicBlock **)*((_QWORD *)v19 + 9);
      while (v20 != v21)
      {
        v22 = *v20;
        v50 = v22;
        if (llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 112), v22, v19))
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v51, (uint64_t)v22);
          if (v23)
            sub_1C4DB5818(&v62, &v50);
        }
        ++v20;
      }
    }
  }
  v24 = -1;
  v25 = *(_QWORD *)(a1 + 128) + 320;
  do
  {
    v25 = *(_QWORD *)(v25 + 8);
    ++v24;
  }
  while (v25 != *(_QWORD *)(a1 + 128) + 320);
  sub_1C4DB1D18((uint64_t)a2, v24);
  v26 = *(_QWORD *)(a1 + 128);
  v27 = v26 + 320;
  v28 = *(_QWORD *)(v26 + 328);
  if (v28 != v26 + 320)
  {
    do
    {
      v29 = (char *)sub_1C477672C((uint64_t)&v57, v28);
      if (v58 == v57)
        v30 = (uint64_t *)((char *)&v59 + 4);
      else
        v30 = &v59;
      if (v29 != &v58[8 * *(unsigned int *)v30])
      {
        v31 = (char *)sub_1C477672C((uint64_t)&v51, v28);
        v32 = v52 == v51 ? (uint64_t *)((char *)&v53 + 4) : &v53;
        if (v31 != (char *)v52 + 8 * *(unsigned int *)v32)
        {
          v34 = a2[1];
          v33 = (unint64_t)a2[2];
          if ((unint64_t)v34 >= v33)
          {
            v36 = *a2;
            v37 = v34 - *a2;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 61)
              abort();
            v39 = v33 - (_QWORD)v36;
            if (v39 >> 2 > v38)
              v38 = v39 >> 2;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
              v40 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
            {
              if (v40 >> 61)
                sub_1C4764EE4();
              v41 = (char *)operator new(8 * v40);
            }
            else
            {
              v41 = 0;
            }
            v42 = (uint64_t *)&v41[8 * v37];
            *v42 = v28;
            v35 = v42 + 1;
            if (v34 != v36)
            {
              do
              {
                v43 = *--v34;
                *--v42 = v43;
              }
              while (v34 != v36);
              v34 = *a2;
            }
            *a2 = v42;
            a2[1] = v35;
            a2[2] = (uint64_t *)&v41[8 * v40];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *v34 = v28;
            v35 = v34 + 1;
          }
          a2[1] = v35;
        }
      }
      v28 = *(_QWORD *)(v28 + 8);
    }
    while (v28 != v27);
  }
  if (v52 != v51)
    free(v52);
  if (v58 != v57)
    free(v58);
  v44 = (void **)*((_QWORD *)&v62 + 1);
  v45 = (void **)v63;
  *((_QWORD *)&v64 + 1) = 0;
  v46 = v63 - *((_QWORD *)&v62 + 1);
  if ((_QWORD)v63 - *((_QWORD *)&v62 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v44);
      v45 = (void **)v63;
      v44 = (void **)(*((_QWORD *)&v62 + 1) + 8);
      *((_QWORD *)&v62 + 1) = v44;
      v46 = v63 - (_QWORD)v44;
    }
    while ((_QWORD)v63 - (_QWORD)v44 > 0x10uLL);
  }
  v47 = v46 >> 3;
  if (v47 == 1)
  {
    v48 = 256;
    goto LABEL_74;
  }
  if (v47 == 2)
  {
    v48 = 512;
LABEL_74:
    *(_QWORD *)&v64 = v48;
  }
  if (v44 != v45)
  {
    do
    {
      v49 = *v44++;
      operator delete(v49);
    }
    while (v44 != v45);
    if ((_QWORD)v63 != *((_QWORD *)&v62 + 1))
      *(_QWORD *)&v63 = v63 + ((*((_QWORD *)&v62 + 1) - v63 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((_QWORD)v62)
    operator delete((void *)v62);
}

void sub_1C5133AA4(uint64_t a1, _QWORD *a2, uint64_t a3, void **a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const llvm::MachineBasicBlock *v12;
  const llvm::MachineBasicBlock **v13;
  const llvm::MachineBasicBlock **v14;
  const llvm::MachineBasicBlock *v15;
  char v16;
  unsigned int EdgeProbability;
  unsigned __int16 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD *v42;
  char *v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  __int128 v73;
  int v74;
  llvm::ScaledNumbers *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int16 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v111;
  uint64_t *v112;
  llvm::ScaledNumbers *v113[2];
  __int128 v114;
  uint64_t v115;
  int v116;
  _BYTE v117[16];
  void *v118[3];
  _QWORD v119[3];
  _QWORD v120[2];

  v7 = *a2;
  v6 = a2[1];
  v8 = (v6 - *a2) >> 3;
  sub_1C617C694(v119, v8);
  v97 = v8;
  sub_1C617C408(v118, v8);
  v95 = v7;
  v96 = v6;
  v103 = a1;
  if (v6 != v7)
  {
    v9 = a2;
    v10 = 0;
    if (v8 <= 1)
      v11 = 1;
    else
      v11 = v8;
    v102 = a2;
    v104 = v11;
    do
    {
      v12 = *(const llvm::MachineBasicBlock **)(*v9 + 8 * v10);
      *(_QWORD *)&v114 = v117;
      *((_QWORD *)&v114 + 1) = v117;
      v115 = 2;
      v116 = 0;
      v14 = (const llvm::MachineBasicBlock **)*((_QWORD *)v12 + 11);
      v13 = (const llvm::MachineBasicBlock **)*((_QWORD *)v12 + 12);
      if (v14 != v13)
      {
        do
        {
          v15 = *v14;
          v113[0] = *v14;
          v120[0] = 0;
          if (sub_1C61252B8((uint64_t *)a3, v113, v120))
          {
            if (v120[0] != *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16))
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v114, (uint64_t)v15);
              if (v16)
              {
                EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 112), v12, v15);
                if (EdgeProbability)
                {
                  v111 = llvm::ScaledNumbers::divide64(EdgeProbability, 0x80000000uLL);
                  v107 = v18;
                  v19 = v18;
                  v113[0] = v15;
                  v120[0] = 0;
                  v20 = sub_1C61252B8((uint64_t *)a3, v113, v120);
                  v21 = v120[0];
                  if (!v20)
                    v21 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16);
                  v22 = *(_QWORD *)(v21 + 8);
                  v23 = v119[0] + 24 * v10;
                  v26 = *(_QWORD **)(v23 + 8);
                  v24 = (_QWORD *)(v23 + 8);
                  v25 = v26;
                  v28 = v24 + 1;
                  v27 = v24[1];
                  if ((unint64_t)v26 >= v27)
                  {
                    v31 = (_QWORD *)(v119[0] + 24 * v10);
                    v32 = (_QWORD *)*v31;
                    v33 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - *v31) >> 3);
                    v34 = v33 + 1;
                    if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_101:
                      abort();
                    v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (_QWORD)v32) >> 3);
                    if (2 * v35 > v34)
                      v34 = 2 * v35;
                    if (v35 >= 0x555555555555555)
                      v36 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v36 = v34;
                    if (v36)
                    {
                      v99 = v22;
                      v100 = v119[0] + 24 * v10;
                      v101 = v24 + 1;
                      if (v36 > 0xAAAAAAAAAAAAAAALL)
LABEL_102:
                        sub_1C4764EE4();
                      v38 = v24;
                      v98 = v36;
                      v37 = (char *)operator new(24 * v36);
                      v36 = v98;
                      v22 = v99;
                      v24 = v38;
                      v31 = (_QWORD *)v100;
                      v28 = v101;
                    }
                    else
                    {
                      v37 = 0;
                    }
                    v39 = &v37[24 * v33];
                    v29 = v111;
                    *(_QWORD *)v39 = v22;
                    *((_QWORD *)v39 + 1) = v111;
                    *((_QWORD *)v39 + 2) = v19;
                    v40 = v39;
                    if (v25 == v32)
                    {
                      a1 = v103;
                    }
                    else
                    {
                      a1 = v103;
                      do
                      {
                        v41 = *(_OWORD *)(v25 - 3);
                        *((_QWORD *)v40 - 1) = *(v25 - 1);
                        *(_OWORD *)(v40 - 24) = v41;
                        v40 -= 24;
                        v25 -= 3;
                      }
                      while (v25 != v32);
                      v25 = (_QWORD *)*v31;
                    }
                    *v31 = v40;
                    v30 = v39 + 24;
                    *v24 = v39 + 24;
                    *v28 = &v37[24 * v36];
                    if (v25)
                    {
                      v42 = v24;
                      operator delete(v25);
                      v24 = v42;
                      v29 = v111;
                    }
                    v9 = v102;
                  }
                  else
                  {
                    v29 = v111;
                    *v25 = v22;
                    v25[1] = v111;
                    v30 = v25 + 3;
                    v25[2] = v19;
                  }
                  v11 = v104;
                  *v24 = v30;
                  v43 = (char *)v118[0] + 16 * v10;
                  *(_QWORD *)v43 = sub_1C617C634(*(_QWORD *)v43, *((_WORD *)v43 + 4), v29, v107);
                  *((_WORD *)v43 + 4) = v44;
                  if (v44 >= 0x4000)
                  {
                    *(_QWORD *)v43 = -1;
                    *((_WORD *)v43 + 4) = 0x3FFF;
                  }
                }
              }
            }
          }
          ++v14;
        }
        while (v14 != v13);
        if (*((_QWORD *)&v114 + 1) != (_QWORD)v114)
          free(*((void **)&v114 + 1));
      }
      ++v10;
    }
    while (v10 != v11);
  }
  sub_1C617C694(&v114, v97);
  sub_1C617C730(a4);
  *(_OWORD *)a4 = v114;
  a4[2] = (void *)v115;
  v115 = 0;
  v114 = 0uLL;
  v113[0] = (llvm::ScaledNumbers *)&v114;
  sub_1C4DB60AC((void ***)v113);
  if (v96 != v95)
  {
    v45 = 0;
    v46 = v97;
    if (v97 <= 1)
      v46 = 1;
    v105 = v46;
    do
    {
      v47 = (uint64_t **)(v119[0] + 24 * v45);
      v49 = *v47;
      v48 = v47[1];
      v112 = v48;
      while (v49 != v48)
      {
        v50 = *v49;
        *(_OWORD *)v113 = *(_OWORD *)(v49 + 1);
        v51 = (char *)*a4;
        *(llvm::ScaledNumbers **)&v114 = v113[0];
        WORD4(v114) = v113[1];
        if (v113[0])
        {
          v52 = *((_QWORD *)v118[0] + 2 * v45);
          if (v52)
          {
            v53 = WORD4(v114) - *((_WORD *)v118[0] + 8 * v45 + 4);
            *(_QWORD *)&v114 = llvm::ScaledNumbers::divide64((unint64_t)v113[0], v52);
            WORD4(v114) = v54;
            sub_1C4DB5C98((uint64_t)&v114, v53);
            v55 = v114;
          }
          else
          {
            v55 = -1;
            *(_QWORD *)&v114 = -1;
            WORD4(v114) = 0x3FFF;
          }
        }
        else
        {
          v55 = 0;
        }
        v56 = *((_QWORD *)&v114 + 1);
        v57 = &v51[24 * v50];
        v60 = (_QWORD *)*((_QWORD *)v57 + 1);
        v59 = v57 + 8;
        v58 = v60;
        v61 = v59[1];
        if ((unint64_t)v60 >= v61)
        {
          v63 = v45;
          v64 = &v51[24 * v50];
          v65 = *(_QWORD **)v64;
          v66 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v58 - *(_QWORD *)v64) >> 3);
          v67 = v66 + 1;
          if (v66 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_101;
          v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (_QWORD)v65) >> 3);
          if (2 * v68 > v67)
            v67 = 2 * v68;
          if (v68 >= 0x555555555555555)
            v69 = 0xAAAAAAAAAAAAAAALL;
          else
            v69 = v67;
          if (v69)
          {
            if (v69 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_102;
            v108 = *((_QWORD *)&v114 + 1);
            v70 = (char *)operator new(24 * v69);
            v56 = v108;
          }
          else
          {
            v70 = 0;
          }
          v71 = &v70[24 * v66];
          v45 = v63;
          *(_QWORD *)v71 = v63;
          *((_QWORD *)v71 + 1) = v55;
          *((_QWORD *)v71 + 2) = v56;
          v72 = v71;
          if (v58 != v65)
          {
            do
            {
              v73 = *(_OWORD *)(v58 - 3);
              *((_QWORD *)v72 - 1) = *(v58 - 1);
              *(_OWORD *)(v72 - 24) = v73;
              v72 -= 24;
              v58 -= 3;
            }
            while (v58 != v65);
            v58 = *(_QWORD **)v64;
          }
          *(_QWORD *)v64 = v72;
          v62 = v71 + 24;
          *v59 = v71 + 24;
          v59[1] = &v70[24 * v69];
          if (v58)
            operator delete(v58);
        }
        else
        {
          *v58 = v45;
          v58[1] = v55;
          v62 = v58 + 3;
          v58[2] = v56;
        }
        *v59 = v62;
        v49 += 3;
        v48 = v112;
      }
      ++v45;
    }
    while (v45 != v105);
  }
  *(_QWORD *)&v114 = *(_QWORD *)(*(_QWORD *)(v103 + 128) + 328);
  v113[0] = 0;
  v74 = sub_1C61252B8((uint64_t *)a3, &v114, v113);
  v75 = v113[0];
  if (!v74)
    v75 = (llvm::ScaledNumbers *)(*(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16));
  if (v96 != v95)
  {
    v76 = 0;
    v77 = *((_QWORD *)v75 + 1);
    if (v97 <= 1)
      v78 = 1;
    else
      v78 = v97;
    v109 = *((_QWORD *)v75 + 1);
    do
    {
      if (*(_QWORD *)(v119[0] + 24 * v76) == *(_QWORD *)(v119[0] + 24 * v76 + 8))
      {
        v79 = (uint64_t)*a4 + 24 * v77;
        v82 = *(_QWORD **)(v79 + 8);
        v81 = (_QWORD *)(v79 + 8);
        v80 = v82;
        v83 = v81[1];
        if ((unint64_t)v82 >= v83)
        {
          v85 = (char *)*a4 + 24 * v77;
          v86 = *(_QWORD **)v85;
          v87 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v80 - *(_QWORD *)v85) >> 3);
          v88 = v87 + 1;
          if (v87 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_101;
          v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (_QWORD)v86) >> 3);
          if (2 * v89 > v88)
            v88 = 2 * v89;
          if (v89 >= 0x555555555555555)
            v90 = 0xAAAAAAAAAAAAAAALL;
          else
            v90 = v88;
          if (v90)
          {
            if (v90 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_102;
            v91 = (char *)operator new(24 * v90);
          }
          else
          {
            v91 = 0;
          }
          v92 = &v91[24 * v87];
          *(_QWORD *)v92 = v76;
          *(_OWORD *)(v92 + 8) = xmmword_1C64169E0;
          v93 = v92;
          if (v80 != v86)
          {
            do
            {
              v94 = *(_OWORD *)(v80 - 3);
              *((_QWORD *)v93 - 1) = *(v80 - 1);
              *(_OWORD *)(v93 - 24) = v94;
              v93 -= 24;
              v80 -= 3;
            }
            while (v80 != v86);
            v80 = *(_QWORD **)v85;
          }
          *(_QWORD *)v85 = v93;
          v84 = v92 + 24;
          *v81 = v92 + 24;
          v81[1] = &v91[24 * v90];
          if (v80)
            operator delete(v80);
          v77 = v109;
        }
        else
        {
          *v80 = v76;
          *(_OWORD *)(v80 + 1) = xmmword_1C64169E0;
          v84 = v80 + 3;
        }
        *v81 = v84;
      }
      ++v76;
    }
    while (v76 != v78);
  }
  if (v118[0])
  {
    v118[1] = v118[0];
    operator delete(v118[0]);
  }
  *(_QWORD *)&v114 = v119;
  sub_1C4DB60AC((void ***)&v114);
}

void sub_1C5134220(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int SuccProbability;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  void *__p;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  void (**v29)(llvm::raw_ostream *__hidden);
  int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  int v36;
  void **p_p;

  v3 = *a3;
  if (*a3)
  {
    v6 = **(_QWORD **)(a1 + 8);
    v7 = *(_QWORD *)(v6 + 248);
    if (!v7)
    {
      __p = 0;
      v26 = 0;
      v27 = 0;
      goto LABEL_19;
    }
    v8 = *(_QWORD *)(v7 + 112);
    v9 = dword_1ED82C870;
    v26 = 0;
    v27 = 0;
    __p = 0;
    if (!v8)
    {
LABEL_19:
      sub_1C617C7A0((llvm::raw_ostream **)a1, (unint64_t)a2, v3, (uint64_t)&__p);
      if (SHIBYTE(v27) < 0)
        operator delete(__p);
      return;
    }
    SuccProbability = llvm::MachineBasicBlock::getSuccProbability(a2, (uint64_t)a3);
    v30 = 0;
    v34 = 0;
    v35 = 0;
    v29 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_p = &__p;
    v36 = 0;
    v32 = 0;
    v33 = 0;
    v31 = 0;
    v28[0] = &off_1E7FA8D00;
    v28[1] = "label=\"%.1f%%\"";
    *(double *)&v28[2] = (double)SuccProbability * 100.0 * 4.65661287e-10;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v29, (uint64_t)v28);
    if (!(_DWORD)v9)
    {
LABEL_16:
      v22 = v33 - v31;
      if (v33 != v31)
      {
        v33 = v31;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v29, v31, v22);
      }
      v29 = off_1E81A6E70;
      if (v36 == 1 && v31)
        MEMORY[0x1CAA32F9C](v31, 0x1000C8077774924, v22);
      goto LABEL_19;
    }
    v11 = *(_QWORD *)(v6 + 248);
    if (v11)
    {
      v13 = *(_DWORD *)(v11 + 176);
      if (v13)
      {
        v14 = *(_QWORD *)(v11 + 160);
        v15 = v13 - 1;
        v16 = (v13 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v17 = *(_QWORD **)(v14 + 16 * v16);
        if (v17 == a2)
        {
LABEL_11:
          v18 = *(unsigned int *)(v14 + 16 * v16 + 8);
          if (v18 != 0xFFFFFFFFLL)
          {
            v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 24 * v18 + 16);
LABEL_13:
            LODWORD(v28[0]) = SuccProbability;
            v19 = llvm::BranchProbability::scale((llvm::BranchProbability *)v28, v12);
            v20 = *(_QWORD *)(a1 + 32);
            LODWORD(v28[0]) = (unint64_t)((((v9 << 31) | 0x30uLL) * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
            if (v19 >= llvm::BranchProbability::scale((llvm::BranchProbability *)v28, v20))
            {
              v21 = v33;
              if ((unint64_t)(v32 - (_QWORD)v33) > 0xB)
              {
                *((_DWORD *)v33 + 2) = 577004914;
                *(_QWORD *)v21 = *(_QWORD *)",color=\"red\"";
                v33 += 12;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v29, ",color=\"red\"", 0xCuLL);
              }
            }
            goto LABEL_16;
          }
        }
        else
        {
          v23 = 1;
          while (v17 != (_QWORD *)-4096)
          {
            v24 = v16 + v23++;
            v16 = v24 & v15;
            v17 = *(_QWORD **)(v14 + 16 * v16);
            if (v17 == a2)
              goto LABEL_11;
          }
        }
      }
    }
    v12 = 0;
    goto LABEL_13;
  }
}

uint64_t *****sub_1C51344C0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t *****result;
  const char *v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  int v14;
  const char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  char v30;
  char *v31;
  void (**v32)(llvm::raw_ostream *__hidden);
  int v33;
  uint64_t *****v34;
  char *v35;
  char *v36;
  char v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v33 = 0;
  v37 = 0;
  v38 = 0;
  v32 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v40 = a1;
  v39 = 0;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  result = *(uint64_t ******)(a2 + 16);
  if (result)
  {
    result = (uint64_t *****)llvm::Value::getName((llvm::Value *)result);
    v10 = (const char *)result;
    v12 = v11;
  }
  else
  {
    v12 = 0;
    v10 = (const char *)&unk_1C86ACCDB;
  }
  if (a5 == -1)
  {
    if (v12)
    {
      result = (uint64_t *****)llvm::raw_ostream::write((llvm::raw_ostream *)&v32, v10, v12);
      v18 = v35;
      v17 = v36;
    }
    else
    {
      v18 = 0;
      v17 = 0;
    }
    if ((unint64_t)(v18 - v17) <= 2)
    {
      v15 = " : ";
      v16 = 3;
      goto LABEL_17;
    }
    v17[2] = 32;
    *(_WORD *)v17 = 14880;
    v31 = v36 + 3;
  }
  else
  {
    if (v12 && (llvm::raw_ostream::write((llvm::raw_ostream *)&v32, v10, v12), v35 != v36))
      *v36++ = 91;
    else
      llvm::raw_ostream::write((llvm::raw_ostream *)&v32, "[", 1uLL);
    v13 = a5;
    if (a5 < 0)
    {
      v13 = -(uint64_t)a5;
      v14 = 1;
    }
    else
    {
      v14 = 0;
    }
    result = (uint64_t *****)sub_1C5E21910((llvm::raw_ostream *)&v32, v13, 0, 0, v14);
    if ((unint64_t)(v35 - v36) <= 3)
    {
      v15 = "] : ";
      v16 = 4;
LABEL_17:
      result = (uint64_t *****)llvm::raw_ostream::write((llvm::raw_ostream *)&v32, v15, v16);
      goto LABEL_18;
    }
    *(_DWORD *)v36 = 540680285;
    v31 = v36 + 4;
  }
  v36 = v31;
LABEL_18:
  switch(a4)
  {
    case 3:
      result = *(uint64_t ******)(a3 + 248);
      if (!result || (result = (uint64_t *****)sub_1C61E9C8C((uint64_t)result, *result[16], a2, 0), !v30))
      {
        v19 = v36;
        if ((unint64_t)(v35 - v36) > 6)
        {
          *(_DWORD *)(v36 + 3) = 1853321070;
          *(_DWORD *)v19 = 1852534357;
          v36 += 7;
        }
        else
        {
          result = (uint64_t *****)llvm::raw_ostream::write((llvm::raw_ostream *)&v32, "Unknown", 7uLL);
        }
        break;
      }
      v27 = (unint64_t)result;
LABEL_36:
      result = (uint64_t *****)sub_1C5E21910((llvm::raw_ostream *)&v32, v27, 0, 0, 0);
      break;
    case 2:
      v20 = *(_QWORD *)(a3 + 248);
      if (v20)
      {
        v21 = *(_DWORD *)(v20 + 176);
        if (v21)
        {
          v22 = *(_QWORD *)(v20 + 160);
          v23 = v21 - 1;
          v24 = (v21 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          v25 = *(_QWORD *)(v22 + 16 * v24);
          if (v25 == a2)
          {
LABEL_29:
            v26 = *(unsigned int *)(v22 + 16 * v24 + 8);
            if (v26 != 0xFFFFFFFFLL)
            {
              v27 = *(_QWORD *)(*(_QWORD *)(v20 + 8) + 24 * v26 + 16);
              goto LABEL_36;
            }
          }
          else
          {
            v28 = 1;
            while (v25 != -4096)
            {
              v29 = v24 + v28++;
              v24 = v29 & v23;
              v25 = *(_QWORD *)(v22 + 16 * v24);
              if (v25 == a2)
                goto LABEL_29;
            }
          }
        }
      }
      v27 = 0;
      goto LABEL_36;
    case 1:
      result = *(uint64_t ******)(a3 + 248);
      if (result)
        result = (uint64_t *****)sub_1C61E9ECC((uint64_t)result, (llvm::ScaledNumberBase *)&v32, a2);
      break;
  }
  v32 = off_1E81A6E70;
  if (v39 == 1)
  {
    result = v34;
    if (v34)
      return (uint64_t *****)MEMORY[0x1CAA32F9C](v34, 0x1000C8077774924);
  }
  return result;
}

_QWORD *sub_1C5134800(void **a1)
{
  char *v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  __int128 v10;

  v2 = (char *)*a1;
  v1 = (char *)a1[1];
  v3 = 0xAAAAAAAAAAAAAAABLL * ((v1 - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - v2) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v2) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = v8 + 24;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  if (v1 != v2)
  {
    do
    {
      v10 = *(_OWORD *)(v1 - 24);
      *((_QWORD *)v8 - 1) = *((_QWORD *)v1 - 1);
      *(_OWORD *)(v8 - 24) = v10;
      v8 -= 24;
      v1 -= 24;
    }
    while (v1 != v2);
    v1 = (char *)*a1;
  }
  *a1 = v8;
  a1[1] = v9;
  a1[2] = &v7[24 * v6];
  if (v1)
    operator delete(v1);
  return v9;
}

uint64_t sub_1C513490C()
{
  __int128 v1;
  int v2;
  char v3;
  __n128 v4;
  const char *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = 1;
  *(_QWORD *)&v1 = "Pop up a window to show a dag displaying how machine block frequencies propagate through the CFG.";
  *((_QWORD *)&v1 + 1) = 97;
  v4.n128_u64[0] = (unint64_t)&v5;
  v5 = "none";
  v6 = 4;
  v7 = 0;
  v8 = "do not display graphs.";
  v9 = 22;
  v10 = "fraction";
  v11 = 8;
  v12 = 1;
  v13 = "display a graph using the fractional block frequency representation.";
  v14 = 68;
  v15 = "integer";
  v16 = 7;
  v17 = 2;
  v18 = "display a graph using the raw integer fractional block frequency representation.";
  v19 = 80;
  v20 = "count";
  v21 = 5;
  v22 = 3;
  v23 = "display a graph using the real profile count if available.";
  v24 = 58;
  v4.n128_u64[1] = 0x400000004;
  sub_1C61EA0CC(&v2, &v1, (uint64_t *)&v4);
  if ((const char **)v4.n128_u64[0] != &v5)
    free((void *)v4.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C617AF38, &qword_1ED7F9608, &dword_1C475E000);
  v2 = 1;
  *(_QWORD *)&v1 = "Pop up a window to show a dag displaying MBP layout and associated block frequencies of the CFG.";
  *((_QWORD *)&v1 + 1) = 96;
  v4.n128_u64[0] = (unint64_t)&v5;
  v5 = "none";
  v6 = 4;
  v7 = 0;
  v8 = "do not display graphs.";
  v9 = 22;
  v10 = "fraction";
  v11 = 8;
  v12 = 1;
  v13 = "display a graph using the fractional block frequency representation.";
  v14 = 68;
  v15 = "integer";
  v16 = 7;
  v17 = 2;
  v18 = "display a graph using the raw integer fractional block frequency representation.";
  v19 = 80;
  v20 = "count";
  v21 = 5;
  v22 = 3;
  v23 = "display a graph using the real profile count if available.";
  v24 = 58;
  v4.n128_u64[1] = 0x400000004;
  sub_1C61EA184(&v2, &v1, (uint64_t *)&v4);
  if ((const char **)v4.n128_u64[0] != &v5)
    free((void *)v4.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C617AF38, &llvm::ViewBlockLayoutWithBFI, &dword_1C475E000);
  v3 = 0;
  *(_QWORD *)&v1 = &v3;
  v2 = 1;
  v4.n128_u64[0] = (unint64_t)"Print the machine block frequency info.";
  v4.n128_u64[1] = 39;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F9548, "print-machine-bfi", (_BYTE **)&v1, &v2, &v4);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F9548, &dword_1C475E000);
}

uint64_t sub_1C5134B98(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  uint64_t v6;

  llvm::initializeMachineBranchProbabilityInfoPass(a1, a2);
  llvm::initializeMachineBlockFrequencyInfoPass(a1, v3);
  llvm::initializeMachinePostDominatorTreePass(a1, v4);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v5);
  v6 = operator new();
  *(_QWORD *)v6 = "Branch Probability Basic Block Placement";
  *(_QWORD *)(v6 + 8) = 40;
  *(_QWORD *)(v6 + 16) = "block-placement";
  *(_QWORD *)(v6 + 24) = 15;
  *(_QWORD *)(v6 + 32) = &unk_1EF8F6F21;
  *(_WORD *)(v6 + 40) = 0;
  *(_BYTE *)(v6 + 42) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = sub_1C5134CE8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v6, 1);
  return v6;
}

uint64_t sub_1C5134C4C(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeMachineBranchProbabilityInfoPass(a1, a2);
  llvm::initializeMachineBlockFrequencyInfoPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Basic Block Placement Stats";
  *(_QWORD *)(v4 + 8) = 27;
  *(_QWORD *)(v4 + 16) = "block-placement-stats";
  *(_QWORD *)(v4 + 24) = 21;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F6F22;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C513E6B4;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5134CE8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6F21);
  *(_QWORD *)v1 = &off_1E8144070;
  *(_QWORD *)(v1 + 248) = v1 + 264;
  *(_QWORD *)(v1 + 256) = 0x1000000000;
  *(_QWORD *)(v1 + 392) = v1 + 408;
  *(_QWORD *)(v1 + 400) = 0x1000000000;
  *(_QWORD *)(v1 + 576) = 0;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_DWORD *)(v1 + 552) = 0;
  *(_QWORD *)(v1 + 704) = v1 + 720;
  *(_QWORD *)(v1 + 712) = 0x1000000000;
  *(_QWORD *)(v1 + 808) = 0;
  *(_OWORD *)(v1 + 784) = 0u;
  *(_DWORD *)(v1 + 800) = 0;
  *(_OWORD *)(v1 + 824) = 0u;
  *(_QWORD *)(v1 + 840) = v1 + 856;
  *(_QWORD *)(v1 + 848) = 0x400000000;
  *(_QWORD *)(v1 + 888) = v1 + 904;
  *(_OWORD *)(v1 + 896) = 0u;
  *(_OWORD *)(v1 + 912) = 0u;
  *(_OWORD *)(v1 + 924) = 0u;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7F9860);
  if (v3 != -1)
  {
    v7[0] = sub_1C5134B98;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7F9860, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5134E38(llvm::Pass *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  *(_QWORD *)a1 = &off_1E8144070;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 115), 8);
  sub_1C5136968((uint64_t)a1 + 824);
  sub_1C4926AE8((uint64_t)a1 + 824);
  sub_1C61EA8E8((uint64_t)a1 + 632);
  v2 = *((_QWORD *)a1 + 72);
  *((_QWORD *)a1 + 72) = 0;
  if (v2)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 8), 8);
    MEMORY[0x1CAA32FC0](v2, 0x1060C4012208D3FLL);
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 67), 8);
  v3 = (_QWORD *)*((_QWORD *)a1 + 49);
  if (v3 != (_QWORD *)((char *)a1 + 408))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 31);
  if (v4 != (_QWORD *)((char *)a1 + 264))
    free(v4);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v5 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v5 != (_QWORD *)((char *)a1 + 192))
    free(v5);
  v6 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v6 != (_QWORD *)((char *)a1 + 120))
    free(v6);
  v7 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v7 != (_QWORD *)((char *)a1 + 48))
    free(v7);
  llvm::Pass::~Pass(a1);
}

void sub_1C5134F48(llvm::Pass *a1)
{
  sub_1C5134E38(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5134F6C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  if (byte_1ED7FA070)
    sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachinePostDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::TargetPassConfig::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C5135014(uint64_t a1, const llvm::Function **a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  void **v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  const llvm::MachineBasicBlock *v22;
  const llvm::MachineBasicBlock *v23;
  unint64_t v24;
  unint64_t BlockFreq;
  void **v26;
  void *v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  int v31;
  char v34;
  int v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  const llvm::MachineBasicBlock **v41;
  uint64_t v42;
  const llvm::MachineBasicBlock *v43;
  unsigned int EdgeProbability;
  void **v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  int v53;
  uint64_t v54;
  char v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  size_t v59;
  uint64_t ***v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t ****v65;
  uint64_t ***v66;
  int v67;
  int v68;
  uint64_t ***v69;
  uint64_t *v70;
  llvm::MachineBlockFrequencyInfo **v71;
  uint64_t ***v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ****v77;
  uint64_t ***v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  const llvm::MachineBasicBlock *v102;
  uint64_t v103;
  unsigned int v104;
  const llvm::MachineBasicBlock *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  const llvm::MachineBasicBlock *v109;
  uint64_t v110;
  const llvm::MachineBasicBlock *j;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  int v116;
  int v117;
  int v119;
  uint64_t v121;
  _QWORD *v122;
  void **v123;
  void **v124;
  char *v125;
  unint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  char *v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t ***v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  char v168;
  char v169;
  unint64_t v170;
  uint64_t v171;
  const llvm::MachineBasicBlock *v172;
  _QWORD *v173;
  _QWORD *v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  void **v178;
  void *v179;
  uint64_t v180;
  llvm::TailDuplicator *v181;
  uint64_t v182;
  llvm::MachineBasicBlock *v183;
  llvm::MachineBasicBlock *v184;
  uint64_t *v185;
  uint64_t *v186;
  llvm::MachineBasicBlock *v187;
  llvm::MachineBasicBlock *v188;
  int isSimpleBB;
  llvm::MachineBasicBlock **v190;
  llvm::MachineBasicBlock **v191;
  uint64_t v192;
  llvm::MachineBasicBlock **v193;
  llvm::MachineBasicBlock *v194;
  uint64_t v195;
  llvm::MachineBasicBlock **v196;
  llvm::MachineBasicBlock *v197;
  llvm::MachineBasicBlock **v198;
  int v199;
  BOOL v200;
  int v201;
  llvm::MachineBasicBlock **v202;
  _QWORD *v203;
  _QWORD *v204;
  char *v205;
  char *v206;
  char *v207;
  _QWORD *i;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  llvm::MachineBasicBlock **v213;
  llvm::MachineBasicBlock *v214;
  void *v215;
  uint64_t v216;
  char *v217;
  void *v218;
  int v219;
  int v220;
  char *v221;
  int v222;
  BOOL v223;
  int v224;
  char *v225;
  _QWORD *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t k;
  uint64_t FallThrough;
  void **v232;
  void **v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  llvm::MachineBasicBlock *v241;
  llvm::MachineBasicBlock *v242;
  void *v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t m;
  char *v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  void *v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  int v269;
  int v270;
  char *v271;
  unint64_t v272;
  int v273;
  unint64_t v274;
  unint64_t v275;
  llvm::TailDuplicator *v276;
  uint64_t v277;
  void *__p;
  char *v279;
  char *v280;
  void *v281;
  uint64_t *v282;
  _QWORD v283[2];
  int v284;
  void *v285;
  char *v286;
  char *v287;
  void *v288;
  char *v289;
  char *v290;
  void *v291;
  char *v292;
  char *v293;
  unsigned __int8 *v294[2];
  int v295;
  uint64_t v296;
  unsigned __int8 *v297;
  llvm::MachineBasicBlock *v298;
  uint64_t v299;
  int v300;
  void *v301;
  __int128 v302;
  char *v303;
  __int16 v304;
  char *v305;
  int32x2_t v306;
  _DWORD v307[8];
  uint64_t v308;

  v2 = (uint64_t)a2;
  v308 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *a2) & 1) != 0)
    return 0;
  v4 = v2 + 320;
  if (*(_QWORD *)(*(_QWORD *)(v2 + 328) + 8) == v2 + 320)
    return 0;
  v5 = v2 + 320;
  *(_QWORD *)(a1 + 560) = v2;
  v6 = **(void ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::MachineBranchProbabilityInfo::ID);
  *(_QWORD *)(a1 + 568) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachineBranchProbabilityInfo::ID);
  v8 = **(void ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::MachineBlockFrequencyInfo::ID);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  v11 = operator new();
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = v10;
  *(_DWORD *)(v11 + 24) = 0;
  v12 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v11;
  if (v12)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v12 + 8), 8);
    MEMORY[0x1CAA32FC0](v12, 0x1060C4012208D3FLL);
  }
  v13 = **(void ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 584) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 600) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 104))(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(a1 + 608) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 120))(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(a1 + 616) = 0;
  v15 = **(void ****)(a1 + 8);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != &llvm::ProfileSummaryInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), &llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  *(_QWORD *)(a1 + 808) = 0;
  llvm::Function::getEntryCount(**(uint64_t *****)(a1 + 560), 0, (uint64_t)&v301);
  if (BYTE8(v302))
  {
    v17 = *(_QWORD *)(a1 + 624);
    if (!*(_BYTE *)(v17 + 24) || (v18 = *(_QWORD *)(v17 + 16), v18 == -1))
    {
      v20 = v2;
      v21 = *(_QWORD *)(a1 + 560);
      v22 = (const llvm::MachineBasicBlock *)(v21 + 320);
      v23 = *(const llvm::MachineBasicBlock **)(v21 + 328);
      if (v23 == (const llvm::MachineBasicBlock *)(v21 + 320))
      {
        v24 = 0;
      }
      else
      {
        v24 = 0;
        do
        {
          BlockFreq = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), v23);
          if (BlockFreq > v24)
            v24 = BlockFreq;
          v23 = (const llvm::MachineBasicBlock *)*((_QWORD *)v23 + 1);
        }
        while (v23 != v22);
      }
      LODWORD(v301) = (unint64_t)(((((unint64_t)dword_1ED7FA370 << 31) | 0x30)
                                        * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
      *(_QWORD *)(a1 + 808) = llvm::BranchProbability::scale((llvm::BranchProbability *)&v301, v24);
      *(_BYTE *)(a1 + 816) = 0;
      v2 = v20;
    }
    else
    {
      *(_BYTE *)(a1 + 816) = 1;
      *(_QWORD *)(a1 + 808) = v18 * (unint64_t)dword_1ED7FA430 / 0x64;
    }
  }
  *(_QWORD *)(a1 + 592) = 0;
  v26 = **(void ****)(a1 + 8);
  do
  {
    v27 = *v26;
    v26 += 2;
  }
  while (v27 != &llvm::TargetPassConfig::ID);
  if (word_1ED7FA178)
    v28 = 1;
  else
    v28 = word_1ED7FA238 == 0;
  if (v28)
    v29 = dword_1ED7FA1F0;
  else
    v29 = dword_1ED7FA2B0;
  v30 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v26 - 1) + 96))(*(v26 - 1), &llvm::TargetPassConfig::ID);
  v31 = *(_DWORD *)(*(_QWORD *)(v30 + 112) + 552);
  if (v31 >= 3 && (word_1ED7FA238 || word_1ED7FA178 == 0))
    v29 = dword_1ED7FA2B0;
  if (!word_1ED7FA178 && (v31 < 3 || word_1ED7FA238 == 0))
    v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 1272))(*(_QWORD *)(a1 + 600));
  v277 = v2;
  if (!byte_1ED7FA070 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 560) + 8) + 592) & 1) != 0)
    goto LABEL_50;
  v178 = **(void ****)(a1 + 8);
  do
  {
    v179 = *v178;
    v178 += 2;
  }
  while (v179 != &llvm::MachinePostDominatorTree::ID);
  *(_QWORD *)(a1 + 616) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v178 - 1) + 96))(*(v178 - 1), &llvm::MachinePostDominatorTree::ID);
  v180 = *(_QWORD *)(*(_QWORD *)v2 + 112);
  if (v180 && ((*(_BYTE *)(v180 + 17) & 4) != 0 || *(char *)(v180 + 13) < 0)
    || llvm::shouldOptimizeForSize(v2, *(_QWORD *)(a1 + 624), **(llvm::MachineBlockFrequencyInfo ***)(a1 + 576)))
  {
    v29 = 1;
  }
  v181 = (llvm::TailDuplicator *)(a1 + 632);
  llvm::TailDuplicator::initMF((llvm::TailDuplicator *)(a1 + 632), (llvm::MachineFunction *)v2, 0, *(const llvm::MachineBranchProbabilityInfo **)(a1 + 568), *(llvm::MBFIWrapper **)(a1 + 576), *(llvm::ProfileSummaryInfo **)(a1 + 624), 1, v29);
  if (!dword_1ED7FA4F0)
    goto LABEL_50;
  v268 = v30;
  v269 = v29;
  v305 = 0;
  v306 = 0;
  v307[0] = 0;
  v182 = *(_QWORD *)(a1 + 560);
  v183 = (llvm::MachineBasicBlock *)(v182 + 320);
  v184 = *(llvm::MachineBasicBlock **)(v182 + 328);
  if (v184 == (llvm::MachineBasicBlock *)(v182 + 320))
  {
    LODWORD(v250) = 0;
    v249 = 0;
    goto LABEL_376;
  }
  do
  {
    v186 = (uint64_t *)*((_QWORD *)v184 + 11);
    v185 = (uint64_t *)*((_QWORD *)v184 + 12);
    if ((((char *)v185 - (char *)v186) & 0x7FFFFFFF8) == 0x10)
    {
      while (1)
      {
        if (v186 == v185)
          goto LABEL_263;
        v187 = (llvm::MachineBasicBlock *)*v186;
        if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(*(_QWORD *)(*(_QWORD *)(a1 + 616) + 248), *v186, (uint64_t)v184))
        {
          break;
        }
        ++v186;
      }
      v298 = v187;
      if (v187)
      {
        if (llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), v184, v187) >> 30)
        {
          isSimpleBB = llvm::TailDuplicator::isSimpleBB(v187, v188);
          if (((*((_QWORD *)v187 + 12) - *((_QWORD *)v187 + 11)) & 0x7FFFFFFF8) != 8)
          {
            if (llvm::TailDuplicator::shouldTailDuplicate(v181, isSimpleBB, v187))
            {
              v190 = (llvm::MachineBasicBlock **)*((_QWORD *)v187 + 8);
              v191 = (llvm::MachineBasicBlock **)*((_QWORD *)v187 + 9);
              while (v190 != v191)
              {
                if (*v190 != v184 && !llvm::TailDuplicator::canTailDuplicate(v181, v187, *v190))
                  goto LABEL_263;
                ++v190;
              }
              v276 = v181;
              if (v307[0])
              {
                v273 = v307[0] - 1;
                v192 = (v307[0] - 1) & ((v184 >> 4) ^ (v184 >> 9));
                v193 = (llvm::MachineBasicBlock **)&v305[32 * v192];
                v194 = *v193;
                if (v184 == *v193)
                {
LABEL_274:
                  if ((_DWORD)v192 != v307[0])
                  {
                    v206 = (char *)v193[1];
                    v205 = (char *)v193[2];
                    v207 = (char *)v193[3];
                    v193[2] = 0;
                    v193[3] = 0;
                    *v193 = (llvm::MachineBasicBlock *)-8192;
                    v193[1] = 0;
                    v306 = vadd_s32(v306, (int32x2_t)0x1FFFFFFFFLL);
                    if (v205 >= v207)
                    {
                      v209 = (v205 - v206) >> 3;
                      v210 = v209 + 1;
                      if ((unint64_t)(v209 + 1) >> 61)
LABEL_399:
                        abort();
                      if ((v207 - v206) >> 2 > v210)
                        v210 = (v207 - v206) >> 2;
                      if ((unint64_t)(v207 - v206) >= 0x7FFFFFFFFFFFFFF8)
                        v211 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v211 = v210;
                      if (v211)
                      {
                        if (v211 >> 61)
LABEL_400:
                          sub_1C4764EE4();
                        v212 = (char *)operator new(8 * v211);
                      }
                      else
                      {
                        v212 = 0;
                      }
                      v213 = (llvm::MachineBasicBlock **)&v212[8 * v209];
                      *v213 = v187;
                      for (i = v213 + 1; v205 != v206; --v213)
                      {
                        v214 = (llvm::MachineBasicBlock *)*((_QWORD *)v205 - 1);
                        v205 -= 8;
                        *(v213 - 1) = v214;
                      }
                      v207 = &v212[8 * v211];
                      if (v206)
                        operator delete(v206);
                      v206 = (char *)v213;
                    }
                    else
                    {
                      *(_QWORD *)v205 = v187;
                      i = v205 + 8;
                    }
                    v215 = (void *)*(i - 1);
                    v301 = v215;
                    *(_QWORD *)&v302 = v206;
                    *((_QWORD *)&v302 + 1) = i;
                    v303 = v207;
                    v216 = ((v215 >> 4) ^ (v215 >> 9)) & v273;
                    v217 = &v305[32 * v216];
                    v218 = *(void **)v217;
                    if (v215 == *(void **)v217)
                    {
LABEL_305:
                      if (v206)
                        operator delete(v206);
                    }
                    else
                    {
                      v221 = 0;
                      v222 = 1;
                      while (v218 != (void *)-4096)
                      {
                        if (v221)
                          v223 = 0;
                        else
                          v223 = v218 == (void *)-8192;
                        if (v223)
                          v221 = v217;
                        v224 = v216 + v222++;
                        v216 = v224 & v273;
                        v217 = &v305[32 * v216];
                        v218 = *(void **)v217;
                        if (v215 == *(void **)v217)
                          goto LABEL_305;
                      }
                      if (v221)
                        v225 = v221;
                      else
                        v225 = v217;
                      v226 = sub_1C5137178((uint64_t)&v305, (uint64_t *)&v301, v225);
                      *v226 = v215;
                      v226[1] = v206;
                      v226[2] = i;
                      v226[3] = v207;
                    }
                    goto LABEL_307;
                  }
                }
                else
                {
                  v219 = 1;
                  while (v194 != (llvm::MachineBasicBlock *)-4096)
                  {
                    v220 = v192 + v219++;
                    v192 = v220 & v273;
                    v194 = *(llvm::MachineBasicBlock **)&v305[32 * v192];
                    if (v184 == v194)
                    {
                      v193 = (llvm::MachineBasicBlock **)&v305[32 * v192];
                      goto LABEL_274;
                    }
                  }
                }
                v195 = v273 & ((v187 >> 4) ^ (v187 >> 9));
                v196 = (llvm::MachineBasicBlock **)&v305[32 * v195];
                v197 = *v196;
                if (v187 == *v196)
                  goto LABEL_263;
                v198 = 0;
                v199 = 1;
                while (v197 != (llvm::MachineBasicBlock *)-4096)
                {
                  if (v198)
                    v200 = 0;
                  else
                    v200 = v197 == (llvm::MachineBasicBlock *)-8192;
                  if (v200)
                    v198 = v196;
                  v201 = v195 + v199++;
                  v195 = v201 & v273;
                  v196 = (llvm::MachineBasicBlock **)&v305[32 * v195];
                  v197 = *v196;
                  v181 = v276;
                  if (v187 == *v196)
                    goto LABEL_263;
                }
                if (v198)
                  v202 = v198;
                else
                  v202 = v196;
              }
              else
              {
                v202 = 0;
              }
              v203 = sub_1C5137178((uint64_t)&v305, (uint64_t *)&v298, v202);
              *v203 = v187;
              v203[1] = 0;
              v203[2] = 0;
              v203[3] = 0;
              v204 = operator new(0x10uLL);
              v203[1] = v204;
              v203[3] = v204 + 2;
              *v204 = v184;
              v204[1] = v187;
              v203[2] = v204 + 2;
LABEL_307:
              v181 = v276;
            }
          }
        }
      }
    }
LABEL_263:
    v184 = (llvm::MachineBasicBlock *)*((_QWORD *)v184 + 1);
  }
  while (v184 != v183);
  v249 = v305;
  v250 = v307[0];
  if (!v306.i32[0])
  {
LABEL_376:
    v267 = v250;
    v250 = v250;
    v253 = &v249[32 * v250];
    v251 = v253;
    goto LABEL_377;
  }
  v251 = &v305[32 * v307[0]];
  if (v307[0])
  {
    v252 = 0;
    while ((*(_QWORD *)&v305[v252] | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v252 += 32;
      if (32 * v307[0] == v252)
      {
        v267 = 1;
        v253 = &v305[32 * v307[0]];
        goto LABEL_377;
      }
    }
    v253 = &v305[v252];
    v267 = 1;
  }
  else
  {
    v250 = 0;
    v267 = 0;
    v253 = v305;
  }
LABEL_377:
  v266 = v250;
  v271 = v249;
  v274 = (unint64_t)&v249[32 * v250];
  while (v253 != (char *)v274)
  {
    v255 = *((_QWORD *)v253 + 1);
    v254 = *((_QWORD *)v253 + 2);
    if (((unint64_t)(v254 - v255) >> 3) - 1 >= dword_1ED7FA4F0)
    {
      v259 = *(void **)(v254 - 8);
      v257 = v254 - 8;
      v258 = v259;
      *((_QWORD *)v253 + 2) = v257;
      while (v257 != v255)
      {
        v260 = v258;
        v261 = *(void **)(v257 - 8);
        v257 -= 8;
        v258 = v261;
        v301 = v261;
        *(_QWORD *)&v302 = v260;
        BYTE8(v302) = 1;
        v298 = 0;
        if ((sub_1C4E580F4(*(_QWORD *)(a1 + 536), *(_DWORD *)(a1 + 552), (uint64_t)v261, &v298) & 1) == 0)
        {
          v262 = sub_1C513734C(a1 + 536, (uint64_t *)&v301, v298);
          *v262 = v258;
          *(_OWORD *)(v262 + 1) = v302;
        }
      }
    }
    v256 = v253 + 32;
    v253 = v251;
    if (v256 != v251)
    {
      v253 = v256;
      while ((*(_QWORD *)v253 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v253 += 32;
        if (v253 == v251)
        {
          v253 = v251;
          break;
        }
      }
    }
  }
  v2 = v277;
  v29 = v269;
  if (v267)
  {
    v263 = 32 * v266;
    v264 = v271 + 16;
    do
    {
      if ((*(v264 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v265 = (void *)*(v264 - 1);
        if (v265)
        {
          *v264 = v265;
          operator delete(v265);
        }
      }
      v264 += 4;
      v263 -= 32;
    }
    while (v263);
  }
  MEMORY[0x1CAA32FB4](v271, 8);
  v30 = v268;
LABEL_50:
  sub_1C5136A84(a1);
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 8) + 592) & 1) != 0)
  {
    v34 = 0;
  }
  else
  {
    v34 = *(_BYTE *)(v30 + 130);
    if (v34)
      v34 = byte_1ED7FA130 != 0;
  }
  v35 = -1;
  v36 = v4;
  do
  {
    v36 = *(_QWORD *)(v36 + 8);
    ++v35;
  }
  while (v36 != v4);
  v37 = v34 ^ 1;
  if ((v35 & 0xFFFFFFFC) == 0)
    v37 = 1;
  if ((v37 & 1) == 0)
  {
    sub_1C61D7B10((uint64_t)&v301, 1, 0, *(_QWORD *)(a1 + 576), *(_QWORD *)(a1 + 568), *(_QWORD *)(a1 + 624), v29 + 1);
    v81 = *(_QWORD *)(a1 + 600);
    v82 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 176))(*(_QWORD *)(v2 + 16));
    if (sub_1C506F920((uint64_t)&v301, (const llvm::MachineFunction *)v2, v81, v82, *(_QWORD *)(a1 + 584), 1))
    {
      sub_1C5136E78((unsigned int *)(a1 + 920));
      sub_1C5136FBC((unsigned int *)(a1 + 536));
      v83 = *(_QWORD *)(a1 + 616);
      if (v83)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v83 + 144))(v83, v2);
      sub_1C5136968(a1 + 824);
      sub_1C5136A84(a1);
    }
    sub_1C61D8C9C((uint64_t)&v301);
  }
  v38 = -1;
  do
  {
    v5 = *(_QWORD *)(v5 + 8);
    ++v38;
  }
  while (v5 != v4);
  if (v38 >= 3)
  {
    if (byte_1ED8372E8)
    {
      if (byte_1ED8373A8 || (llvm::Function::getEntryCount(*(uint64_t ****)v277, 0, (uint64_t)&v301), BYTE8(v302)))
      {
        v294[0] = 0;
        v294[1] = 0;
        v295 = 0;
        v84 = -1;
        v85 = *(_QWORD *)(a1 + 560) + 320;
        do
        {
          v85 = *(_QWORD *)(v85 + 8);
          ++v84;
        }
        while (v85 != *(_QWORD *)(a1 + 560) + 320);
        sub_1C61EAECC(v294, v84);
        v291 = 0;
        v292 = 0;
        v293 = 0;
        v86 = -1;
        v87 = *(_QWORD *)(a1 + 560) + 320;
        do
        {
          v87 = *(_QWORD *)(v87 + 8);
          ++v86;
        }
        while (v87 != *(_QWORD *)(a1 + 560) + 320);
        sub_1C4DB1D18((uint64_t)&v291, v86);
        v88 = *(_QWORD *)(a1 + 560);
        v89 = (_QWORD *)(v88 + 320);
        v90 = *(_QWORD **)(v88 + 328);
        if (v90 != (_QWORD *)(v88 + 320))
        {
          v91 = 0;
          do
          {
            v301 = v90;
            sub_1C61BEB98((uint64_t *)v294, &v301)[1] = v91;
            v92 = v292;
            if (v292 >= v293)
            {
              v94 = (char *)v291;
              v95 = (v292 - (_BYTE *)v291) >> 3;
              v96 = v95 + 1;
              if ((unint64_t)(v95 + 1) >> 61)
                goto LABEL_399;
              v97 = v293 - (_BYTE *)v291;
              if ((v293 - (_BYTE *)v291) >> 2 > v96)
                v96 = v97 >> 2;
              if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
                v98 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v98 = v96;
              if (v98)
              {
                if (v98 >> 61)
                  goto LABEL_400;
                v99 = (char *)operator new(8 * v98);
              }
              else
              {
                v99 = 0;
              }
              v100 = &v99[8 * v95];
              *(_QWORD *)v100 = v90;
              v93 = v100 + 8;
              if (v92 != v94)
              {
                do
                {
                  v101 = *((_QWORD *)v92 - 1);
                  v92 -= 8;
                  *((_QWORD *)v100 - 1) = v101;
                  v100 -= 8;
                }
                while (v92 != v94);
                v92 = (char *)v291;
              }
              v291 = v100;
              v292 = v93;
              v293 = &v99[8 * v98];
              if (v92)
                operator delete(v92);
            }
            else
            {
              *(_QWORD *)v292 = v90;
              v93 = v92 + 8;
            }
            ++v91;
            v292 = v93;
            v90 = (_QWORD *)v90[1];
          }
          while (v90 != v89);
          v88 = *(_QWORD *)(a1 + 560);
        }
        v102 = (const llvm::MachineBasicBlock *)(v88 + 320);
        v103 = -8;
        v104 = -1;
        v105 = (const llvm::MachineBasicBlock *)(v88 + 320);
        do
        {
          v105 = (const llvm::MachineBasicBlock *)*((_QWORD *)v105 + 1);
          v103 += 8;
          ++v104;
        }
        while (v105 != v102);
        v288 = 0;
        v289 = 0;
        v290 = 0;
        v106 = v104;
        if (v104)
        {
          v288 = operator new(8 * v104);
          v290 = (char *)v288 + 8 * v106;
          bzero(v288, 8 * v106);
          v289 = (char *)v288 + (v103 & 0x7FFFFFFF8);
        }
        v107 = -8;
        v108 = -1;
        v109 = (const llvm::MachineBasicBlock *)(v88 + 320);
        do
        {
          v109 = (const llvm::MachineBasicBlock *)*((_QWORD *)v109 + 1);
          v107 += 8;
          ++v108;
        }
        while (v109 != v102);
        v285 = 0;
        v286 = 0;
        v287 = 0;
        v110 = v108;
        if (v108)
        {
          v285 = operator new(8 * v108);
          v287 = (char *)v285 + 8 * v110;
          bzero(v285, 8 * v110);
          v286 = (char *)v285 + (v107 & 0x7FFFFFFF8);
        }
        v283[0] = 0;
        v283[1] = 0;
        v284 = 0;
        for (j = *(const llvm::MachineBasicBlock **)(v88 + 328);
              j != v102;
              j = (const llvm::MachineBasicBlock *)*((_QWORD *)j + 1))
        {
          v112 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), j);
          v301 = j;
          v113 = sub_1C61BEB98((uint64_t *)v294, &v301);
          *((_QWORD *)v285 + v113[1]) = v112;
          v114 = (_QWORD *)((char *)j + 48);
          v115 = *((_QWORD *)j + 7);
          if ((const llvm::MachineBasicBlock *)v115 != (const llvm::MachineBasicBlock *)((char *)j + 48))
          {
            while (1)
            {
              v119 = **(unsigned __int16 **)(v115 + 16);
              if ((v119 - 13) >= 5 && v119 != 23)
                break;
              v115 = *(_QWORD *)(v115 + 8);
              if ((_QWORD *)v115 == v114)
                goto LABEL_184;
            }
          }
          if ((_QWORD *)v115 == v114)
          {
LABEL_184:
            v116 = 0;
          }
          else
          {
            v116 = 0;
LABEL_170:
            ++v116;
            while (1)
            {
              v115 = *(_QWORD *)(v115 + 8);
              if ((_QWORD *)v115 == v114)
                break;
              v117 = **(unsigned __int16 **)(v115 + 16);
              if ((v117 - 13) >= 5 && v117 != 23)
              {
                if ((_QWORD *)v115 != v114)
                  goto LABEL_170;
                break;
              }
            }
          }
          v121 = 4 * v116;
          v301 = j;
          v122 = sub_1C61BEB98((uint64_t *)v294, &v301);
          *((_QWORD *)v288 + v122[1]) = v121;
          v123 = (void **)*((_QWORD *)j + 11);
          v124 = (void **)*((_QWORD *)j + 12);
          while (v123 != v124)
          {
            v305 = 0;
            v125 = (char *)*v123++;
            v305 = v125;
            LODWORD(v301) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), j, (const llvm::MachineBasicBlock *)v125);
            v126 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v301, v112);
            v298 = j;
            v127 = sub_1C61BEB98((uint64_t *)v294, &v298);
            v128 = sub_1C61BEB98((uint64_t *)v294, &v305)[1];
            v301 = (void *)v127[1];
            *(_QWORD *)&v302 = v128;
            sub_1C61EAF18((uint64_t)v283, (uint64_t *)&v301)[2] = v126;
          }
        }
        llvm::applyExtTspLayout((uint64_t *)&v288, &v285, (unsigned int *)v283, (char **)&v281);
        __p = 0;
        v279 = 0;
        v280 = 0;
        v129 = -1;
        v130 = *(_QWORD *)(a1 + 560) + 320;
        do
        {
          v130 = *(_QWORD *)(v130 + 8);
          ++v129;
        }
        while (v130 != *(_QWORD *)(a1 + 560) + 320);
        sub_1C4DB1D18((uint64_t)&__p, v129);
        v131 = (uint64_t *)v281;
        v132 = v282;
        if (v281 != v282)
        {
          v133 = v279;
          do
          {
            v134 = *v131;
            v135 = v291;
            if (v133 >= v280)
            {
              v137 = (char *)__p;
              v138 = (v133 - (_BYTE *)__p) >> 3;
              v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 61)
                goto LABEL_399;
              v140 = v280 - (_BYTE *)__p;
              if ((v280 - (_BYTE *)__p) >> 2 > v139)
                v139 = v140 >> 2;
              if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
                v141 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v141 = v139;
              if (v141)
              {
                if (v141 >> 61)
                  goto LABEL_400;
                v142 = (char *)operator new(8 * v141);
              }
              else
              {
                v142 = 0;
              }
              v143 = &v142[8 * v138];
              *(_QWORD *)v143 = v135[v134];
              v136 = v143 + 8;
              if (v133 != v137)
              {
                do
                {
                  v144 = *((_QWORD *)v133 - 1);
                  v133 -= 8;
                  *((_QWORD *)v143 - 1) = v144;
                  v143 -= 8;
                }
                while (v133 != v137);
                v133 = (char *)__p;
              }
              __p = v143;
              v279 = v136;
              v280 = &v142[8 * v141];
              if (v133)
                operator delete(v133);
            }
            else
            {
              *(_QWORD *)v133 = *((_QWORD *)v291 + v134);
              v136 = v133 + 8;
            }
            v279 = v136;
            ++v131;
            v133 = v136;
          }
          while (v131 != v132);
        }
        llvm::MachineFunction::RenumberBlocks(*(llvm::MachineFunction **)(a1 + 560), 0);
        v145 = (char *)__p;
        if (v279 == __p)
        {
          v145 = v279;
        }
        else
        {
          v146 = 0;
          v147 = (v279 - (_BYTE *)__p) >> 3;
          v148 = *(_QWORD *)(a1 + 560);
          v149 = *(_QWORD *)(v148 + 104);
          if (v147 <= 1)
            v147 = 1;
          while (*((_QWORD *)__p + v146) == *(_QWORD *)(v149 + 8 * v146))
          {
            if (v147 == ++v146)
              goto LABEL_354;
          }
          v227 = ((unint64_t)(*(_QWORD *)(v148 + 112) - v149) >> 3);
          v305 = (char *)v307;
          v306 = (int32x2_t)0x400000000;
          sub_1C4848C0C((unsigned int *)&v305, v227, 0);
          v228 = *(_QWORD *)(a1 + 560);
          v229 = v228 + 320;
          for (k = *(_QWORD *)(v228 + 328); k != v229; k = *(_QWORD *)(k + 8))
          {
            FallThrough = llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)k);
            *(_QWORD *)&v305[8 * *(int *)(k + 24)] = FallThrough;
          }
          v298 = 0;
          v299 = 0;
          v300 = 0;
          v232 = (void **)__p;
          v233 = (void **)v279;
          while (v232 != v233)
          {
            v301 = 0;
            v234 = *v232++;
            v301 = v234;
            v235 = v299;
            sub_1C61BEB98((uint64_t *)&v298, &v301)[1] = v235;
          }
          sub_1C513E49C((uint64_t *)(*(_QWORD *)(a1 + 560) + 320), (uint64_t *)&v298);
          v236 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 560) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 560) + 16));
          v301 = (char *)&v302 + 8;
          *(_QWORD *)&v302 = 0x400000000;
          v237 = *(_QWORD *)(a1 + 560);
          v238 = v237 + 320;
          v239 = *(_QWORD *)(v237 + 328);
          if (v239 != v237 + 320)
          {
            v240 = v236;
            do
            {
              v241 = *(llvm::MachineBasicBlock **)&v305[8 * *(int *)(v239 + 24)];
              if (v241)
              {
                v242 = *(llvm::MachineBasicBlock **)(v239 + 8);
                if (v242 != v241 || v242 == (llvm::MachineBasicBlock *)(*(_QWORD *)(v239 + 32) + 320))
                {
                  llvm::MachineBasicBlock::findBranchDebugLoc((llvm::MachineBasicBlock *)v239, &v297);
                  (*(void (**)(uint64_t, uint64_t, llvm::MachineBasicBlock *, _QWORD, _QWORD, _QWORD, unsigned __int8 **, _QWORD))(*(_QWORD *)v240 + 272))(v240, v239, v241, 0, 0, 0, &v297, 0);
                  if (v297)
                    llvm::MetadataTracking::untrack((uint64_t)&v297, v297);
                }
              }
              LODWORD(v302) = 0;
              v296 = 0;
              v297 = 0;
              if (((*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 **, uint64_t *, void **, _QWORD))(*(_QWORD *)v240 + 248))(v240, v239, &v297, &v296, &v301, 0) & 1) == 0)llvm::MachineBasicBlock::updateTerminator((llvm::MachineBasicBlock *)v239, v241);
              v239 = *(_QWORD *)(v239 + 8);
            }
            while (v239 != v238);
            if (v301 != (char *)&v302 + 8)
              free(v301);
          }
          MEMORY[0x1CAA32FB4](v298, 8);
          if (v305 != (char *)v307)
            free(v305);
          v145 = (char *)__p;
        }
        if (v145)
        {
LABEL_354:
          v279 = v145;
          operator delete(v145);
        }
        if (v281)
        {
          v282 = (uint64_t *)v281;
          operator delete(v281);
        }
        MEMORY[0x1CAA32FB4](v283[0], 8);
        if (v285)
        {
          v286 = (char *)v285;
          operator delete(v285);
        }
        if (v288)
        {
          v289 = (char *)v288;
          operator delete(v288);
        }
        if (v291)
        {
          v292 = (char *)v291;
          operator delete(v291);
        }
        MEMORY[0x1CAA32FB4](v294[0], 8);
        sub_1C5136E78((unsigned int *)(a1 + 920));
        sub_1C5136FBC((unsigned int *)(a1 + 536));
        sub_1C5136968(a1 + 824);
        v244 = *(void **)(*(_QWORD *)(a1 + 560) + 328);
        v245 = sub_1C484358C(a1 + 824, 64, 3);
        v301 = v244;
        *(_QWORD *)v245 = v245 + 16;
        *(_QWORD *)(v245 + 8) = 0x400000000;
        sub_1C4848C0C((unsigned int *)v245, 1uLL, (uint64_t)v244);
        *(_QWORD *)(v245 + 48) = a1 + 920;
        *(_DWORD *)(v245 + 56) = 0;
        *sub_1C5138C30(a1 + 920, (uint64_t *)&v301) = v245;
        v246 = *(_QWORD *)(a1 + 560);
        v247 = v246 + 320;
        for (m = *(_QWORD *)(v246 + 328); m != v247; m = *(_QWORD *)(m + 8))
        {
          if (v244 != (void *)m)
            sub_1C5137514((_QWORD *)v245, m, 0);
        }
      }
    }
  }
  v301 = *(void **)(*(_QWORD *)(a1 + 560) + 328);
  v39 = *sub_1C5138C30(a1 + 920, (uint64_t *)&v301);
  v301 = (char *)&v302 + 8;
  DWORD1(v302) = 4;
  v40 = *(unsigned int *)(v39 + 8);
  if ((_DWORD)v40)
  {
    v41 = *(const llvm::MachineBasicBlock ***)v39;
    v42 = 8 * v40;
    do
    {
      v43 = *v41;
      LODWORD(v302) = 0;
      v305 = 0;
      v298 = 0;
      if (((*(uint64_t (**)(_QWORD, const llvm::MachineBasicBlock *, char **, llvm::MachineBasicBlock **, void **, uint64_t))(**(_QWORD **)(a1 + 600) + 248))(*(_QWORD *)(a1 + 600), v43, &v305, &v298, &v301, 1) & 1) == 0)
      {
        if (v305)
        {
          if ((_DWORD)v302)
          {
            if (v298)
            {
              EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), v43, v298);
              if (EdgeProbability > llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), v43, (const llvm::MachineBasicBlock *)v305)&& ((*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 600) + 728))(*(_QWORD *)(a1 + 600), &v301) & 1) == 0)
              {
                v294[0] = 0;
                (*(void (**)(_QWORD, const llvm::MachineBasicBlock *, _QWORD))(**(_QWORD **)(a1 + 600) + 264))(*(_QWORD *)(a1 + 600), v43, 0);
                (*(void (**)(_QWORD, const llvm::MachineBasicBlock *, llvm::MachineBasicBlock *, char *, void *, _QWORD, unsigned __int8 **, _QWORD))(**(_QWORD **)(a1 + 600) + 272))(*(_QWORD *)(a1 + 600), v43, v298, v305, v301, v302, v294, 0);
                if (v294[0])
                  llvm::MetadataTracking::untrack((uint64_t)v294, v294[0]);
              }
            }
          }
        }
      }
      ++v41;
      v42 -= 8;
    }
    while (v42);
    if (v301 != (char *)&v302 + 8)
      free(v301);
  }
  v45 = *(void ***)(a1 + 560);
  v46 = *((_QWORD *)*v45 + 14);
  if (v46)
  {
    if ((*(char *)(v46 + 13) & 0x80000000) == 0)
    {
      if ((*(_BYTE *)(v46 + 17) & 4) == 0)
        goto LABEL_83;
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 608) + 752))(*(_QWORD *)(a1 + 608)))
      {
        v45 = *(void ***)(a1 + 560);
        goto LABEL_83;
      }
    }
  }
  else
  {
LABEL_83:
    v301 = v45[41];
    v47 = sub_1C5138C30(a1 + 920, (uint64_t *)&v301);
    v48 = *v47;
    if (*(_DWORD *)(*v47 + 8))
    {
      v154 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), *(const llvm::MachineBasicBlock **)(*(_QWORD *)(a1 + 560) + 328));
      LODWORD(v301) = 429496730;
      v275 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v301, v154);
      v155 = *(unsigned int *)(v48 + 8);
      if ((_DWORD)v155)
      {
        v156 = *(uint64_t **)v48;
        v157 = *(_QWORD *)v48 + 8 * v155;
        do
        {
          v158 = *v156;
          if (*v156 != **(_QWORD **)v48)
          {
            v159 = *(_QWORD *)(a1 + 584);
            v160 = *(_DWORD *)(v159 + 264);
            if (v160)
            {
              v161 = *(_QWORD *)(v159 + 248);
              v162 = v160 - 1;
              v163 = (v160 - 1) & ((v158 >> 4) ^ (v158 >> 9));
              v164 = *(_QWORD *)(v161 + 16 * v163);
              if (v158 == v164)
              {
LABEL_229:
                v167 = *(_QWORD *)(v161 + 16 * v163 + 8);
                if (v167)
                {
                  v168 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 608) + 736))(*(_QWORD *)(a1 + 608), v167);
                  if (v168)
                  {
                    v169 = v168;
                    v170 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), (const llvm::MachineBasicBlock *)v158);
                    if (v170 >= v275)
                    {
                      v272 = v170;
                      v171 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), **(const llvm::MachineBasicBlock ***)(v167 + 32));
                      LODWORD(v301) = 429496730;
                      if (v272 >= llvm::BranchProbability::scale((llvm::BranchProbability *)&v301, v171)
                        && (!llvm::shouldOptimizeForSize((llvm::MachineBasicBlock *)v158, *(_QWORD *)(a1 + 624), *(llvm::MBFIWrapper **)(a1 + 576))|| (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 608) + 752))(*(_QWORD *)(a1 + 608))))
                      {
                        v172 = *(const llvm::MachineBasicBlock **)v158;
                        v173 = *(_QWORD **)(*(_QWORD *)v158 + 88);
                        v174 = *(_QWORD **)(*(_QWORD *)v158 + 96);
                        if (v173 != v174)
                        {
                          while (*v173 != v158)
                          {
                            if (++v173 == v174)
                            {
                              v173 = *(_QWORD **)(*(_QWORD *)v158 + 96);
                              break;
                            }
                          }
                        }
                        if (v173 == v174
                          || (v270 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), *(const llvm::MachineBasicBlock **)v158, (const llvm::MachineBasicBlock *)v158), v176 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), v172), LODWORD(v301) = v270, v177 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v301, v176), LODWORD(v301) = 429496730, v177 <= llvm::BranchProbability::scale((llvm::BranchProbability *)&v301, v272)))
                        {
                          *(_BYTE *)(v158 + 176) = v169;
                          if (word_1ED7F99F8)
                            v175 = dword_1ED7F9A70;
                          else
                            v175 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 608) + 744))(*(_QWORD *)(a1 + 608), v158);
                          *(_DWORD *)(v158 + 180) = v175;
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                v165 = 1;
                while (v164 != -4096)
                {
                  v166 = v163 + v165++;
                  v163 = v166 & v162;
                  v164 = *(_QWORD *)(v161 + 16 * v163);
                  if (v158 == v164)
                    goto LABEL_229;
                }
              }
            }
          }
          ++v156;
        }
        while (v156 != (uint64_t *)v157);
      }
    }
  }
  sub_1C5136E78((unsigned int *)(a1 + 920));
  sub_1C5136FBC((unsigned int *)(a1 + 536));
  sub_1C5136968(a1 + 824);
  v49 = (unsigned __int16)word_1ED7F99F8;
  if (dword_1ED7F98F0)
  {
    v50 = v277;
    v51 = *(_QWORD *)(v277 + 328);
    if (v51 != v4)
    {
      v52 = __clz(1 << dword_1ED7F98F0) ^ 0x3F;
      v53 = dword_1ED7F9A70;
      do
      {
        if (v49)
          *(_DWORD *)(v51 + 180) = v53;
        *(_BYTE *)(v51 + 176) = v52;
        v51 = *(_QWORD *)(v51 + 8);
      }
      while (v51 != v4);
    }
  }
  else
  {
    v50 = v277;
    if (dword_1ED7F99B0)
    {
      v54 = *(_QWORD *)(*(_QWORD *)(v277 + 328) + 8);
      if (v54 != v4)
      {
        v55 = __clz(1 << dword_1ED7F99B0) ^ 0x3F;
        v56 = dword_1ED7F9A70;
        do
        {
          v57 = *(_QWORD **)(*(_QWORD *)v54 + 88);
          v58 = *(_QWORD **)(*(_QWORD *)v54 + 96);
          if (v57 != v58)
          {
            while (*v57 != v54)
            {
              if (++v57 == v58)
              {
                v57 = *(_QWORD **)(*(_QWORD *)v54 + 96);
                break;
              }
            }
          }
          if (v57 == v58)
          {
            *(_BYTE *)(v54 + 176) = v55;
            if (v49)
              *(_DWORD *)(v54 + 180) = v56;
          }
          v54 = *(_QWORD *)(v54 + 8);
        }
        while (v54 != v4);
      }
    }
  }
  if (dword_1ED82F318)
  {
    v59 = byte_1ED82C79F >= 0 ? byte_1ED82C79F & 0x7F : qword_1ED82C790;
    if (!v59)
      goto LABEL_120;
    v60 = **(uint64_t *****)(a1 + 560);
    if ((*((_BYTE *)v60 + 23) & 0x10) != 0)
    {
      v61 = ***v60;
      v62 = *(_QWORD *)(v61 + 152);
      v63 = *(unsigned int *)(v61 + 168);
      if (!(_DWORD)v63)
        goto LABEL_114;
      LODWORD(v64) = (v63 - 1) & ((v60 >> 4) ^ (v60 >> 9));
      v65 = (uint64_t ****)(v62 + 16 * v64);
      v66 = *v65;
      if (*v65 != v60)
      {
        v67 = 1;
        while (v66 != (uint64_t ***)-4096)
        {
          v68 = v64 + v67++;
          v64 = v68 & (v63 - 1);
          v66 = *(uint64_t ****)(v62 + 16 * v64);
          if (v66 == v60)
          {
            v65 = (uint64_t ****)(v62 + 16 * v64);
            goto LABEL_115;
          }
        }
LABEL_114:
        v65 = (uint64_t ****)(v62 + 16 * v63);
      }
LABEL_115:
      v69 = v65[1];
      if (*v69 == (uint64_t **)v59)
      {
        v70 = byte_1ED82C79F >= 0 ? &qword_1ED82C788 : (uint64_t *)qword_1ED82C788;
        if (!memcmp(v69 + 2, v70, v59))
        {
LABEL_120:
          v71 = *(llvm::MachineBlockFrequencyInfo ***)(a1 + 576);
          v72 = *(uint64_t ****)v50;
          if ((*(_BYTE *)(*(_QWORD *)v50 + 23) & 0x10) != 0)
          {
            v73 = ***v72;
            v74 = *(_QWORD *)(v73 + 152);
            v75 = *(unsigned int *)(v73 + 168);
            if (!(_DWORD)v75)
              goto LABEL_217;
            LODWORD(v76) = (v75 - 1) & ((v72 >> 4) ^ (v72 >> 9));
            v77 = (uint64_t ****)(v74 + 16 * v76);
            v78 = *v77;
            if (*v77 != v72)
            {
              v79 = 1;
              while (v78 != (uint64_t ***)-4096)
              {
                v80 = v76 + v79++;
                v76 = v80 & (v75 - 1);
                v78 = *(uint64_t ****)(v74 + 16 * v76);
                if (v78 == v72)
                {
                  v77 = (uint64_t ****)(v74 + 16 * v76);
                  goto LABEL_218;
                }
              }
LABEL_217:
              v77 = (uint64_t ****)(v74 + 16 * v75);
            }
LABEL_218:
            v150 = v77[1];
            v153 = (char *)*v150;
            v151 = (char *)(v150 + 2);
            v152 = v153;
          }
          else
          {
            v152 = 0;
            v151 = &byte_1C871356D;
          }
          v304 = 1283;
          v301 = "MBP.";
          *((_QWORD *)&v302 + 1) = v151;
          v303 = v152;
          llvm::MachineBlockFrequencyInfo::view(*v71, (const llvm::Twine *)&v301, 0);
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1C5136968(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t j;
  void *v16;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 64; i <= v8; i += 64)
      {
        v10 = *(void **)(i - 64);
        if ((void *)(i - 48) != v10)
          free(v10);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = *v12 + v12[1];
      for (j = ((*v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 64; j <= v14; j += 64)
      {
        v16 = *(void **)(j - 64);
        if ((void *)(j - 48) != v16)
          free(v16);
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  return sub_1C4926A50(a1);
}

void sub_1C5136A84(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int ***v23;
  int **v24;
  uint64_t v25;
  int **v26;
  int **v27;
  int *v29;
  int *v30;
  int *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  _BYTE v39[32];
  void *v40[2];
  _BYTE v41[32];
  void *v42;
  uint64_t v43;
  _QWORD v44[17];

  v44[16] = *MEMORY[0x1E0C80C00];
  v42 = v44;
  v43 = 0x400000000;
  v2 = *(_QWORD *)(a1 + 560);
  v3 = (_QWORD *)(v2 + 320);
  v4 = *(_QWORD **)(v2 + 328);
  if (v4 != (_QWORD *)(v2 + 320))
  {
    do
    {
      v5 = sub_1C484358C(a1 + 824, 64, 3);
      v35 = v4;
      *(_QWORD *)v5 = v5 + 16;
      *(_QWORD *)(v5 + 8) = 0x400000000;
      sub_1C4848C0C((unsigned int *)v5, 1uLL, (uint64_t)v4);
      *(_QWORD *)(v5 + 48) = a1 + 920;
      *(_DWORD *)(v5 + 56) = 0;
      *sub_1C5138C30(a1 + 920, (uint64_t *)&v35) = v5;
      LODWORD(v43) = 0;
      v35 = 0;
      v40[0] = 0;
      if ((*(unsigned int (**)(_QWORD, _QWORD *, _BYTE **, void **, void **, _QWORD))(**(_QWORD **)(a1 + 600)
                                                                                                + 248))(*(_QWORD *)(a1 + 600), v4, &v35, v40, &v42, 0))
      {
        do
        {
          if (!llvm::MachineBasicBlock::getFallThrough((llvm::MachineBasicBlock *)v4))
            break;
          v4 = (_QWORD *)v4[1];
          sub_1C5137514((_QWORD *)v5, (uint64_t)v4, 0);
          LODWORD(v43) = 0;
          v35 = 0;
          v40[0] = 0;
        }
        while (((*(uint64_t (**)(_QWORD, _QWORD *, _BYTE **, void **, void **, _QWORD))(**(_QWORD **)(a1 + 600)
                                                                                                 + 248))(*(_QWORD *)(a1 + 600), v4, &v35, v40, &v42, 0) & 1) != 0);
      }
      v4 = (_QWORD *)v4[1];
    }
    while (v4 != v3);
  }
  *(_QWORD *)(a1 + 592) = 0;
  v6 = *(_QWORD *)(a1 + 584);
  v7 = *(uint64_t **)(v6 + 272);
  v8 = *(uint64_t **)(v6 + 280);
  while (v7 != v8)
  {
    v9 = *v7++;
    sub_1C5137618(a1, v9);
  }
  v35 = v39;
  v36 = v39;
  v37 = 4;
  v38 = 0;
  v10 = *(_QWORD *)(a1 + 560);
  v11 = (void *)(v10 + 320);
  v12 = *(_QWORD *)(v10 + 328);
  if (v12 != v10 + 320)
  {
    do
    {
      sub_1C5138AC4((unsigned int *)a1, v12, (llvm::SmallPtrSetImplBase *)&v35, 0);
      v12 = *(_QWORD *)(v12 + 8);
    }
    while ((void *)v12 != v11);
    v11 = *(void **)(*(_QWORD *)(a1 + 560) + 328);
  }
  v40[0] = v11;
  v13 = sub_1C5138C30(a1 + 920, (uint64_t *)v40);
  v14 = *v13;
  sub_1C5138C94(a1, *(_QWORD *)(*(_QWORD *)(a1 + 560) + 328), *v13, 0);
  v15 = ((*(_QWORD *)(*(_QWORD *)(a1 + 560) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 560) + 104)) >> 3);
  v40[0] = v41;
  v40[1] = (void *)0x400000000;
  sub_1C4848C0C((unsigned int *)v40, v15, 0);
  v16 = *(_QWORD *)(a1 + 560);
  v17 = v16 + 320;
  v18 = *(_QWORD *)(v16 + 328);
  if (v18 != v16 + 320)
  {
    v19 = 0;
    do
    {
      v20 = v18;
      if (v19)
        *((_QWORD *)v40[0] + *(int *)(v19 + 24)) = v18;
      v18 = *(_QWORD *)(v18 + 8);
      v19 = v20;
    }
    while (v18 != v17);
    v16 = *(_QWORD *)(a1 + 560);
  }
  *((_QWORD *)v40[0] + *(int *)(*(_QWORD *)(v16 + 320) + 24)) = 0;
  v21 = *(unsigned int *)(v14 + 8);
  v22 = *(_QWORD *)(a1 + 560);
  if ((_DWORD)v21)
  {
    v23 = *(int ****)v14;
    v24 = *(int ***)(v22 + 328);
    v25 = 8 * v21;
    do
    {
      v26 = *v23;
      if (v24 == *v23)
      {
        v24 = (int **)v24[1];
      }
      else
      {
        v27 = (int **)v26[1];
        if (v27 != v24 && v27 != v26)
        {
          v29 = *v27;
          v30 = *v26;
          *((_QWORD *)v30 + 1) = v27;
          *v27 = v30;
          v31 = *v24;
          *((_QWORD *)v29 + 1) = v24;
          *v26 = v31;
          *((_QWORD *)v31 + 1) = v26;
          *v24 = v29;
        }
      }
      if (v26 != **(int ****)v14)
      {
        v32 = *v26;
        LODWORD(v43) = 0;
        v33 = 0;
        v34 = 0;
        if (((*(uint64_t (**)(_QWORD, int *, uint64_t *, uint64_t *, void **, _QWORD))(**(_QWORD **)(a1 + 600)
                                                                                              + 248))(*(_QWORD *)(a1 + 600), v32, &v34, &v33, &v42, 0) & 1) == 0)llvm::MachineBasicBlock::updateTerminator((llvm::MachineBasicBlock *)v32, *((llvm::MachineBasicBlock **)v40[0] + v32[6]));
      }
      ++v23;
      v25 -= 8;
    }
    while (v25);
    v22 = *(_QWORD *)(a1 + 560);
  }
  LODWORD(v43) = 0;
  v33 = 0;
  v34 = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t *, uint64_t *, void **, _QWORD))(**(_QWORD **)(a1 + 600)
                                                                                         + 248))(*(_QWORD *)(a1 + 600), *(_QWORD *)(v22 + 320), &v34, &v33, &v42, 0) & 1) == 0)llvm::MachineBasicBlock::updateTerminator(*(llvm::MachineBasicBlock **)(*(_QWORD *)(a1 + 560) + 320), *((llvm::MachineBasicBlock **)v40[0] + *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 560) + 320) + 24)));
  *(_DWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  if (v40[0] != v41)
    free(v40[0]);
  if (v36 != v35)
    free(v36);
  if (v42 != v44)
    free(v42);
}

unsigned int *sub_1C5136E78(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      result = *(unsigned int **)result;
      v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64)
        v5 = 64;
      else
        v5 = v4;
      if (v5 == (_DWORD)v3)
      {
        *((_QWORD *)v1 + 1) = 0;
        v6 = 16 * v3;
        do
        {
          *(_QWORD *)result = -4096;
          result += 4;
          v6 -= 16;
        }
        while (v6);
      }
      else
      {
        MEMORY[0x1CAA32FB4](result, 8);
        v9 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
        v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
        LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
        v1[4] = v10;
        result = (unsigned int *)operator new(16 * v10, (std::align_val_t)8uLL);
        *(_QWORD *)v1 = result;
        *((_QWORD *)v1 + 1) = 0;
        v11 = v1[4];
        if ((_DWORD)v11)
        {
          v12 = 16 * v11;
          do
          {
            *(_QWORD *)result = -4096;
            result += 4;
            v12 -= 16;
          }
          while (v12);
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3])
      return result;
    LODWORD(v3) = result[4];
    if (v3 > 0x40)
    {
      result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
      return result;
    }
  }
  if ((_DWORD)v3)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v3;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  *((_QWORD *)result + 1) = 0;
  return result;
}

unsigned int *sub_1C5136FBC(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[2];
  if (v2 || result[3])
  {
    v3 = result[4];
    result = *(unsigned int **)result;
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if ((_DWORD)v3)
      {
        v7 = 24 * v3;
        do
        {
          *(_QWORD *)result = -4096;
          result += 6;
          v7 -= 24;
        }
        while (v7);
      }
      *((_QWORD *)v1 + 1) = 0;
    }
    else if (v2)
    {
      v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64)
        v5 = 64;
      else
        v5 = v4;
      if (v5 == (_DWORD)v3)
      {
        *((_QWORD *)v1 + 1) = 0;
        v6 = 24 * v3;
        do
        {
          *(_QWORD *)result = -4096;
          result += 6;
          v6 -= 24;
        }
        while (v6);
      }
      else
      {
        MEMORY[0x1CAA32FB4](result, 8);
        v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
        v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
        LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
        v1[4] = v9;
        result = (unsigned int *)operator new(24 * v9, (std::align_val_t)8uLL);
        *(_QWORD *)v1 = result;
        *((_QWORD *)v1 + 1) = 0;
        v10 = v1[4];
        if ((_DWORD)v10)
        {
          v11 = 24 * v10;
          do
          {
            *(_QWORD *)result = -4096;
            result += 6;
            v11 -= 24;
          }
          while (v11);
        }
      }
    }
    else
    {
      result = (unsigned int *)MEMORY[0x1CAA32FB4](result, 8);
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

uint64_t sub_1C51370FC(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  BOOL v9;
  int v10;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(result + 32 * v4);
    v6 = *v5;
    if (*v5 != a3)
    {
      v7 = 0;
      v8 = 1;
      while (v6 != -4096)
      {
        if (v7)
          v9 = 0;
        else
          v9 = v6 == -8192;
        if (v9)
          v7 = v5;
        v10 = v4 + v8++;
        v4 = v10 & (a2 - 1);
        v5 = (_QWORD *)(result + 32 * v4);
        v6 = *v5;
        if (*v5 == a3)
          goto LABEL_13;
      }
      if (v7)
        v5 = v7;
    }
  }
  else
  {
    v5 = 0;
  }
LABEL_13:
  *a4 = v5;
  return result;
}

_QWORD *sub_1C5137178(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;

  v24 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(32 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 32 * v15;
      do
      {
        *v14 = -4096;
        v14 += 4;
        v16 -= 32;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v17 = 0;
      v18 = 32 * v6;
      v19 = v9;
      do
      {
        v20 = *(_QWORD *)v19;
        if ((*(_QWORD *)v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          sub_1C51370FC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          v21 = v25;
          *v25 = v20;
          v21[1] = 0;
          v21[2] = 0;
          v21[3] = 0;
          *(_OWORD *)(v21 + 1) = *(_OWORD *)(v19 + 8);
          v21[3] = *(_QWORD *)(v19 + 24);
          ++v17;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)(v19 + 24) = 0;
          *(_DWORD *)(a1 + 8) = v17;
        }
        v19 += 32;
        v18 -= 32;
      }
      while (v18);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 4;
      }
      while (4 * v22 != v23);
    }
  }
  sub_1C51370FC((uint64_t)v14, v22, *a2, &v24);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C513734C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;

  v23 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(24 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 24 * v15;
      do
      {
        *v14 = -4096;
        v14 += 3;
        v16 -= 24;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v17 = (_OWORD *)(v9 + 8);
      v18 = 24 * v6;
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v24 = 0;
          sub_1C4E580F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v19, &v24);
          v20 = v24;
          *v24 = v19;
          *(_OWORD *)(v20 + 1) = *v17;
          ++*(_DWORD *)(a1 + 8);
        }
        v17 = (_OWORD *)((char *)v17 + 24);
        v18 -= 24;
      }
      while (v18);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    LODWORD(v21) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v21 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v21)
    {
      v22 = 0;
      do
      {
        v14[v22] = -4096;
        v22 += 3;
      }
      while (3 * v21 != v22);
    }
  }
  sub_1C4E580F4((uint64_t)v14, v21, *a2, &v23);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v23;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5137514(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (uint64_t)result;
  v12 = a2;
  if (a3)
  {
    v4 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v4)
    {
      v5 = *(uint64_t **)a3;
      v6 = 8 * v4;
      do
      {
        v7 = *v5;
        v11 = *v5;
        v8 = *(unsigned int *)(v3 + 8);
        if (v8 >= *(unsigned int *)(v3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v3 + 16, v8 + 1, 8);
          v8 = *(unsigned int *)(v3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v3 + 8 * v8) = v7;
        ++*(_DWORD *)(v3 + 8);
        result = sub_1C5138C30(*(_QWORD *)(v3 + 48), &v11);
        *result = v3;
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
  }
  else
  {
    v10 = *((unsigned int *)result + 2);
    if (v10 >= *((_DWORD *)result + 3))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 2), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(v3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v10) = a2;
    ++*(_DWORD *)(v3 + 8);
    result = sub_1C5138C30(*(_QWORD *)(v3 + 48), &v12);
    *result = v3;
  }
  return result;
}

void sub_1C5137618(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  const llvm::MachineBasicBlock *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t BlockFreq;
  unint64_t v18;
  uint64_t *i;
  const llvm::MachineBasicBlock *v20;
  unint64_t v21;
  void ****v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  const llvm::MachineBasicBlock *v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  const llvm::MachineBasicBlock *v37;
  const llvm::MachineBasicBlock **v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  const llvm::MachineBasicBlock *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t ***v51;
  uint64_t v52;
  uint64_t **j;
  uint64_t *v54;
  uint64_t *v55;
  const llvm::MachineBasicBlock *v56;
  uint64_t v57;
  unsigned int v58;
  void **v59;
  void **v60;
  unsigned int v61;
  const llvm::MachineBasicBlock *v62;
  unsigned int v63;
  void ***v64;
  BOOL v65;
  char v66;
  uint64_t ***v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t ***v74;
  uint64_t ***v75;
  char *v76;
  const llvm::MachineBasicBlock **v77;
  uint64_t v78;
  const llvm::MachineBasicBlock **v79;
  const llvm::MachineBasicBlock *v80;
  uint64_t ***v81;
  uint64_t ***v82;
  unsigned int v83;
  const llvm::MachineBasicBlock *v84;
  const llvm::MachineBasicBlock ***v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  const llvm::MachineBasicBlock **v92;
  const llvm::MachineBasicBlock **v93;
  unint64_t v94;
  const llvm::MachineBasicBlock **v95;
  const llvm::MachineBasicBlock *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  const llvm::MachineBasicBlock **v100;
  const llvm::MachineBasicBlock **v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int v111;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  const llvm::MachineBasicBlock **v117;
  const llvm::MachineBasicBlock *v119;
  int64_t v120;
  const llvm::MachineBasicBlock *v121;
  uint64_t ***v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const llvm::MachineBasicBlock *v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t *v131;
  char v132;
  uint64_t v133;
  BOOL v134;
  int EdgeProbability;
  uint64_t v136;
  int v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  _QWORD *v144;
  int v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  _QWORD **v154;
  uint64_t v155;
  uint64_t ***v156;
  uint64_t **v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  const llvm::MachineBasicBlock **v165;
  unint64_t v166;
  const llvm::MachineBasicBlock *v167;
  const llvm::MachineBasicBlock *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t ***v171;
  uint64_t **v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  const llvm::MachineBasicBlock **v176;
  unint64_t v177;
  unint64_t v178;
  const llvm::MachineBasicBlock *v179;
  uint64_t v180;
  unint64_t v181;
  llvm::MachineBasicBlock *v182;
  llvm::MachineBasicBlock *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  BOOL v189;
  unint64_t v190;
  const llvm::MachineBasicBlock **v191;
  const llvm::MachineBasicBlock **v192;
  const llvm::MachineBasicBlock *v193;
  const llvm::MachineBasicBlock *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  const llvm::MachineBasicBlock *v198;
  const llvm::MachineBasicBlock ***v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t **v204;
  uint64_t *v205;
  _QWORD *v206;
  uint64_t ***v207;
  uint64_t v208;
  int64_t v209;
  uint64_t **v210;
  _QWORD *v211;
  uint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  BOOL v218;
  _BOOL4 v219;
  uint64_t v220;
  unint64_t v221;
  llvm::MachineBasicBlock *v222;
  llvm::MachineBasicBlock *v223;
  uint64_t *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  const llvm::MachineBasicBlock **v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t **v236;
  uint64_t v237;
  uint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  const llvm::MachineBasicBlock *v241;
  const llvm::MachineBasicBlock *v242;
  uint64_t v243;
  int v244;
  _BYTE v245[32];
  uint64_t v246;
  uint64_t v247;
  uint64_t **v248;
  const llvm::MachineBasicBlock *v249;
  _QWORD v250[17];
  void *v251;
  uint64_t v252;
  _BYTE v253[128];
  const llvm::MachineBasicBlock *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  _QWORD v258[8];

  v258[6] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    sub_1C5137618(a1, v6);
  }
  v250[0] = 1;
  v7 = 1;
  v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v250[v7] = v8;
    v7 += 2;
  }
  while (v7 != 17);
  v251 = v253;
  v252 = 0x1000000000;
  llvm::Function::getEntryCount(**(uint64_t *****)(a1 + 560), 0, (uint64_t)&v254);
  v9 = *(uint64_t **)(a2 + 32);
  if (v256 | byte_1ED7F9CB0)
  {
    v10 = *(uint64_t **)(*v9 + 64);
    v11 = *(uint64_t **)(*v9 + 72);
    if (v10 == v11)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      do
      {
        v13 = (const llvm::MachineBasicBlock *)*v10;
        v14 = sub_1C477672C(a2 + 56, *v10);
        v15 = *(_QWORD *)(a2 + 64);
        if (v15 == *(_QWORD *)(a2 + 56))
          v16 = (unsigned int *)(a2 + 76);
        else
          v16 = (unsigned int *)(a2 + 72);
        if (v14 == (_QWORD *)(v15 + 8 * *v16))
        {
          BlockFreq = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), v13);
          LODWORD(v254) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), v13, **(const llvm::MachineBasicBlock ***)(a2 + 32));
          v18 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v254, BlockFreq);
          if (__CFADD__(v18, v12))
            v12 = -1;
          else
            v12 += v18;
        }
        ++v10;
      }
      while (v10 != v11);
      v9 = *(uint64_t **)(a2 + 32);
    }
    for (i = *(uint64_t **)(a2 + 40); v9 != i; ++v9)
    {
      v20 = (const llvm::MachineBasicBlock *)*v9;
      v241 = v20;
      if ((sub_1C61EAAB0((uint64_t)v250, (uint64_t)v20, &v254) & 1) == 0)
      {
        v21 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), v20);
        if (v21)
        {
          if (v12 / v21 <= dword_1ED7F9BF0)
          {
            v22 = (void ****)sub_1C5138C30(a1 + 920, (uint64_t *)&v241);
            v23 = *((unsigned int *)*v22 + 2);
            if ((_DWORD)v23)
            {
              v24 = **v22;
              v25 = 8 * v23;
              do
              {
                v26 = (const llvm::MachineBasicBlock *)*v24++;
                v254 = v26;
                sub_1C61EA984((uint64_t)v250, (uint64_t *)&v254);
                v25 -= 8;
              }
              while (v25);
            }
          }
        }
      }
    }
  }
  else
  {
    sub_1C61EAA04(v250, v9, *(uint64_t **)(a2 + 40));
  }
  if (byte_1ED7F9E30)
  {
    v27 = 1;
  }
  else if (byte_1ED7F9D70)
  {
    llvm::Function::getEntryCount(**(uint64_t *****)(a1 + 560), 0, (uint64_t)&v254);
    v27 = (_BYTE)v256 != 0;
  }
  else
  {
    v27 = 0;
  }
  v246 = 0;
  v28 = *(_QWORD *)(**(_QWORD **)(a1 + 560) + 112);
  v240 = a1;
  if (v28 && ((*(_BYTE *)(v28 + 17) & 4) != 0 || *(char *)(v28 + 13) < 0)
    || llvm::shouldOptimizeForSize(**(llvm::MachineBasicBlock ***)(a2 + 32), *(_QWORD *)(a1 + 624), *(llvm::MBFIWrapper **)(a1 + 576)))
  {
    v29 = **(_QWORD **)(a2 + 32);
    goto LABEL_41;
  }
  v29 = **(_QWORD **)(a2 + 32);
  v247 = v29;
  if (!v29)
    goto LABEL_41;
  v155 = a1 + 920;
  v248 = (uint64_t **)v29;
  v156 = (uint64_t ***)sub_1C5138C30(a1 + 920, (uint64_t *)&v248);
  v157 = *v156;
  if (sub_1C61EAAB0((uint64_t)v250, ***v156, &v254))
  {
    v158 = a1 + 536;
    v235 = a1 + 536;
    while (v29 == **v157)
    {
      v159 = *(uint64_t **)(v29 + 64);
      v160 = *(uint64_t **)(v29 + 72);
      if (v159 == v160)
        goto LABEL_41;
      v161 = 0;
      v162 = 0;
      do
      {
        v163 = *v159;
        if (!sub_1C61EAAB0((uint64_t)v250, *v159, &v254))
          goto LABEL_275;
        if (v163 == **(_QWORD **)(a2 + 32))
          goto LABEL_275;
        v165 = *(const llvm::MachineBasicBlock ***)(v163 + 88);
        v164 = *(_QWORD *)(v163 + 96);
        v166 = (unint64_t)(v164 - (_QWORD)v165) >> 3;
        if (v166 > 2)
          goto LABEL_275;
        v239 = v162;
        v167 = (const llvm::MachineBasicBlock *)v248;
        if ((_DWORD)v166 == 2)
        {
          v168 = *v165;
          if (*v165 == (const llvm::MachineBasicBlock *)v248)
            v168 = *(const llvm::MachineBasicBlock **)(v164 - 8);
        }
        else
        {
          v168 = 0;
        }
        v169 = *(_QWORD *)(v163 + 64);
        if (((*(_QWORD *)(v163 + 72) - v169) & 0x7FFFFFFF8) == 8)
        {
          v171 = *(uint64_t ****)(*(_QWORD *)v169 + 88);
          v170 = *(_QWORD *)(*(_QWORD *)v169 + 96);
          if (((v170 - (_QWORD)v171) & 0x7FFFFFFF8) == 0x10)
          {
            v172 = *v171;
            if (v172 == (uint64_t **)v163)
              v172 = *(uint64_t ***)(v170 - 8);
            if (v172 == v248)
            {
              v158 = v235;
              v162 = v239;
              goto LABEL_275;
            }
          }
        }
        v226 = v155;
        v219 = v27;
        v221 = sub_1C5139DB8(v240, v248, (uint64_t)v250);
        if (v168)
        {
          v173 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v240 + 576), (const llvm::MachineBasicBlock *)v163);
          LODWORD(v254) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v240 + 568), (const llvm::MachineBasicBlock *)v163, v168);
          v217 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v254, v173);
        }
        else
        {
          v217 = 0;
        }
        v174 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v240 + 576), (const llvm::MachineBasicBlock *)v163);
        LODWORD(v254) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v240 + 568), (const llvm::MachineBasicBlock *)v163, v167);
        v175 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v254, v174);
        v176 = *(const llvm::MachineBasicBlock ***)(v163 + 64);
        v229 = *(const llvm::MachineBasicBlock ***)(v163 + 72);
        if (v176 == v229)
        {
          v183 = 0;
          v177 = 0;
          v27 = v219;
          v158 = v235;
          v162 = v239;
          v184 = v221;
          v185 = v217;
          goto LABEL_296;
        }
        v216 = v175;
        v177 = 0;
        v223 = 0;
        do
        {
          v178 = v177;
          v179 = *v176;
          v249 = v179;
          if (sub_1C61EAAB0((uint64_t)v250, (uint64_t)v179, &v254)
            && ((v180 = *sub_1C5138C30(v155, (uint64_t *)&v249)) == 0
             || v179 == *(const llvm::MachineBasicBlock **)(*(_QWORD *)v180 + 8 * *(unsigned int *)(v180 + 8) - 8)))
          {
            v214 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v240 + 576), v179);
            v155 = v226;
            LODWORD(v254) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v240 + 568), v179, (const llvm::MachineBasicBlock *)v163);
            v181 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v254, v214);
            v182 = v223;
            if (v181 > v178)
              v182 = v179;
            v223 = v182;
            if (v181 <= v178)
              v177 = v178;
            else
              v177 = v181;
          }
          else
          {
            v177 = v178;
          }
          ++v176;
        }
        while (v176 != v229);
        v183 = v223;
        v241 = v223;
        if (v223)
        {
          v215 = v177;
          v192 = (const llvm::MachineBasicBlock **)*((_QWORD *)v223 + 11);
          v191 = (const llvm::MachineBasicBlock **)*((_QWORD *)v223 + 12);
          if (v192 == v191)
          {
            v230 = 0;
            v193 = v223;
LABEL_316:
            v194 = v193;
            v195 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v240 + 576), v193);
            v155 = v226;
            LODWORD(v254) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v240 + 568), v194, (const llvm::MachineBasicBlock *)v163);
            v196 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v254, v195);
            v183 = (llvm::MachineBasicBlock *)v230;
            if (v230 > v196)
              v183 = 0;
            v177 = v215;
            if (v230 > v196)
              v177 = 0;
            goto LABEL_294;
          }
          v230 = 0;
          v193 = v223;
          v197 = v226;
          while (2)
          {
            v198 = *v192;
            v249 = v198;
            if (v198 != (const llvm::MachineBasicBlock *)v163 && v198 != v193)
            {
              if (sub_1C61EAAB0((uint64_t)v250, (uint64_t)v198, &v254))
              {
                if (*(_QWORD *)(v240 + 536) + 24 * *(unsigned int *)(v240 + 552) == sub_1C5139F64(v235, (uint64_t)v198))
                {
                  v201 = (const llvm::MachineBasicBlock ***)*sub_1C5138C30(v197, (uint64_t *)&v249);
                  if (!v201 || v198 == **v201)
                  {
                    if (v201 == (const llvm::MachineBasicBlock ***)*sub_1C5138C30(v197, (uint64_t *)&v241))
                    {
                      v193 = v223;
                      v197 = v226;
                      goto LABEL_327;
                    }
                    v213 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v240 + 576), v223);
                    v197 = v226;
                    LODWORD(v254) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v240 + 568), v223, v198);
                    v202 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v254, v213);
                    v203 = v230;
                    if (v202 > v230)
                      v203 = v202;
                    v230 = v203;
                  }
                }
              }
              v193 = v223;
            }
LABEL_327:
            if (++v192 == v191)
              goto LABEL_316;
            continue;
          }
        }
LABEL_294:
        v27 = v219;
        v158 = v235;
        v162 = v239;
        v184 = v221;
        v175 = v216;
        v185 = v217;
LABEL_296:
        v189 = __CFADD__(v183, v175);
        v186 = (unint64_t)v183 + v175;
        if (v189)
          v186 = -1;
        v189 = __CFADD__(v185, v184);
        v187 = v185 + v184;
        if (v189)
          v187 = -1;
        v189 = __CFADD__(v177, v187);
        v188 = v177 + v187;
        if (v189)
          v188 = -1;
        v189 = v186 >= v188;
        v65 = v186 > v188;
        v190 = v186 - v188;
        if (v65)
        {
          if (!v189)
            v190 = 0;
          if (v190 > v162 || v190 == v162 && *(uint64_t ***)(v163 + 8) == v248)
          {
            v162 = v190;
            v161 = v163;
          }
        }
LABEL_275:
        ++v159;
      }
      while (v159 != v160);
      if (v161)
      {
        do
        {
          v204 = (uint64_t **)v161;
          v205 = *(uint64_t **)(v161 + 64);
          if (((*(_QWORD *)(v161 + 72) - (_QWORD)v205) & 0x7FFFFFFF8) != 8)
            break;
          v161 = *v205;
          if (((*(_QWORD *)(*v205 + 96) - *(_QWORD *)(*v205 + 88)) & 0x7FFFFFFF8) != 8)
            break;
        }
        while (v161 != **(_QWORD **)(a2 + 32));
      }
      else
      {
        v204 = v248;
      }
      v247 = (uint64_t)v204;
      if (v204 == (uint64_t **)v29)
      {
        a1 = v240;
        goto LABEL_41;
      }
      v206 = sub_1C5139D50(v158, &v247);
      *v206 = v29;
      *((_BYTE *)v206 + 8) = 0;
      v248 = v204;
      v207 = (uint64_t ***)sub_1C5138C30(v155, (uint64_t *)&v248);
      v157 = *v207;
      v29 = (uint64_t)v204;
      a1 = v240;
      if ((sub_1C61EAAB0((uint64_t)v250, ***v207, &v254) & 1) == 0)
        goto LABEL_350;
    }
  }
  v204 = (uint64_t **)v29;
LABEL_350:
  v29 = (uint64_t)v204;
LABEL_41:
  v30 = 0;
  v246 = v29;
  *(_QWORD *)(a1 + 592) = 0;
  v31 = &unk_1C640E000;
  if (v27)
    goto LABEL_44;
  if (v29 != **(_QWORD **)(a2 + 32))
  {
    v30 = 0;
    goto LABEL_44;
  }
  v254 = (const llvm::MachineBasicBlock *)v29;
  v122 = (uint64_t ***)sub_1C5138C30(a1 + 920, (uint64_t *)&v254);
  if (!sub_1C61EAAB0((uint64_t)v250, ***v122, &v254))
  {
    v30 = 0;
    v125 = 0;
    goto LABEL_364;
  }
  v254 = (const llvm::MachineBasicBlock *)v258;
  v255 = (uint64_t)v258;
  v256 = 4;
  v257 = 0;
  v123 = *(uint64_t **)(a2 + 32);
  v238 = *(uint64_t **)(a2 + 40);
  if (v238 == v123)
    goto LABEL_249;
  v124 = a1 + 920;
  v218 = v27;
  v30 = 0;
  v125 = 0;
  do
  {
    v126 = v125;
    v249 = (const llvm::MachineBasicBlock *)*v123;
    v127 = v249;
    v128 = sub_1C5138C30(v124, (uint64_t *)&v249);
    v129 = (_QWORD *)*v128;
    if (v127 != *(const llvm::MachineBasicBlock **)(*(_QWORD *)*v128 + 8 * *(unsigned int *)(*v128 + 8) - 8))
      goto LABEL_245;
    v228 = v30;
    v131 = (uint64_t *)*((_QWORD *)v127 + 11);
    v130 = (uint64_t *)*((_QWORD *)v127 + 12);
    if (v131 == v130)
      goto LABEL_244;
    v220 = v126;
    v222 = (llvm::MachineBasicBlock *)v123;
    v132 = 0;
    v234 = v30;
    v225 = (_QWORD *)v126;
    do
    {
      while (1)
      {
        v133 = *v131;
        v248 = (uint64_t **)v133;
        if (*(_BYTE *)(v133 + 184))
          v134 = 1;
        else
          v134 = v133 == (_QWORD)v127;
        if (v134 || v129 == (_QWORD *)*sub_1C5138C30(v124, (uint64_t *)&v248))
          goto LABEL_234;
        EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v240 + 568), v127, (const llvm::MachineBasicBlock *)v133);
        if ((sub_1C61EAAB0((uint64_t)v250, v133, &v241) & 1) == 0)
          break;
        ++v131;
        v132 = 1;
        if (v131 == v130)
        {
          v30 = v234;
          v123 = (uint64_t *)v222;
          v125 = (uint64_t)v225;
          goto LABEL_246;
        }
      }
      v136 = *(_QWORD *)(v240 + 584);
      v137 = *(_DWORD *)(v136 + 264);
      if (v137)
      {
        v138 = *(_QWORD *)(v136 + 248);
        v139 = v137 - 1;
        v140 = (v137 - 1) & ((v133 >> 4) ^ (v133 >> 9));
        v141 = *(_QWORD *)(v138 + 16 * v140);
        if (v133 == v141)
        {
LABEL_226:
          v144 = *(_QWORD **)(v138 + 16 * v140 + 8);
          if (v144)
          {
            v145 = 0;
            v149 = v144;
            do
            {
              v149 = (_QWORD *)*v149;
              ++v145;
            }
            while (v149);
            if (v144 == (_QWORD *)a2)
            {
LABEL_242:
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v254, (uint64_t)v127);
            }
            else
            {
              v150 = (_QWORD *)a2;
              while (v150)
              {
                v150 = (_QWORD *)*v150;
                if (v150 == v144)
                  goto LABEL_242;
              }
            }
            goto LABEL_228;
          }
        }
        else
        {
          v142 = 1;
          while (v141 != -4096)
          {
            v143 = v140 + v142++;
            v140 = v143 & v139;
            v141 = *(_QWORD *)(v138 + 16 * v140);
            if (v133 == v141)
              goto LABEL_226;
          }
        }
      }
      v145 = 0;
LABEL_228:
      v146 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v240 + 576), v127);
      LODWORD(v241) = EdgeProbability;
      v147 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v241, v146);
      v148 = v147;
      if (!v225
        || v145
        || v147 > v234
        || *((_QWORD *)v127 + 1) == v133
        && (LODWORD(v241) = (unint64_t)(((((unint64_t)(100 - dword_1ED7F9B30) << 31) | 0x30)
                                              * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6,
            v147 >= llvm::BranchProbability::scale((llvm::BranchProbability *)&v241, v234)))
      {
        v234 = v148;
        v225 = v127;
      }
LABEL_234:
      ++v131;
    }
    while (v131 != v130);
    v30 = v234;
    v123 = (uint64_t *)v222;
    v125 = (uint64_t)v225;
    v126 = v220;
    if ((v132 & 1) == 0)
    {
LABEL_244:
      v30 = v228;
LABEL_245:
      v125 = v126;
    }
LABEL_246:
    ++v123;
  }
  while (v123 != v238);
  if (v125)
  {
    a1 = v240;
    LOBYTE(v27) = v218;
    v31 = (_QWORD *)&unk_1C640E000;
    if (((*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) & 0x7FFFFFFF8) != 8)
    {
      if (HIDWORD(v256) == v257)
        goto LABEL_362;
      v211 = sub_1C477672C((uint64_t)&v254, v125);
      v212 = (const llvm::MachineBasicBlock *)v255 == v254 ? (uint64_t *)((char *)&v256 + 4) : &v256;
      if (v211 != (_QWORD *)(v255 + 8 * *(unsigned int *)v212))
        goto LABEL_362;
    }
LABEL_249:
    v30 = 0;
    v125 = 0;
  }
  else
  {
    v30 = 0;
    a1 = v240;
    LOBYTE(v27) = v218;
    v31 = (_QWORD *)&unk_1C640E000;
  }
LABEL_362:
  if ((const llvm::MachineBasicBlock *)v255 != v254)
    free((void *)v255);
LABEL_364:
  *(_QWORD *)(a1 + 592) = v125;
LABEL_44:
  v32 = a1 + 920;
  v33 = *sub_1C5138C30(a1 + 920, &v246);
  v241 = (const llvm::MachineBasicBlock *)v245;
  v242 = (const llvm::MachineBasicBlock *)v245;
  v243 = v31[104];
  v244 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v241, v33);
  if ((_DWORD)v252)
  {
    v34 = (uint64_t *)v251;
    v35 = 8 * v252;
    do
    {
      v36 = *v34++;
      sub_1C5138AC4((unsigned int *)a1, v36, (llvm::SmallPtrSetImplBase *)&v241, (uint64_t)v250);
      v35 -= 8;
    }
    while (v35);
  }
  sub_1C5138C94(a1, v246, v33, (uint64_t)v250);
  if (!v27)
  {
    v50 = *(_QWORD *)(a1 + 592);
    if (!v50)
      goto LABEL_200;
    v51 = *(uint64_t ****)v33;
    v52 = *(_QWORD *)(*(_QWORD *)v33 + 8 * *(unsigned int *)(v33 + 8) - 8);
    if (v52 == v50)
      goto LABEL_200;
    j = *v51;
    if ((uint64_t **)(*v51)[4][41] == *v51)
      goto LABEL_200;
    v54 = j[8];
    v55 = j[9];
    if (v54 == v55)
    {
LABEL_95:
      v66 = 1;
    }
    else
    {
      v232 = v30;
      while (1)
      {
        v249 = (const llvm::MachineBasicBlock *)*v54;
        v56 = v249;
        v57 = *sub_1C5138C30(v32, (uint64_t *)&v249);
        if ((sub_1C61EAAB0((uint64_t)v250, (uint64_t)v56, &v254) & 1) == 0
          && (!v57 || v56 == *(const llvm::MachineBasicBlock **)(*(_QWORD *)v57 + 8 * *(unsigned int *)(v57 + 8) - 8)))
        {
          break;
        }
LABEL_94:
        if (++v54 == v55)
          goto LABEL_95;
      }
      v224 = v55;
      v227 = v52;
      v236 = j;
      v58 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v240 + 568), v56, (const llvm::MachineBasicBlock *)j);
      v59 = (void **)*((_QWORD *)v56 + 11);
      v60 = (void **)*((_QWORD *)v56 + 12);
      if (v59 != v60)
      {
        v61 = v58;
        do
        {
          v254 = (const llvm::MachineBasicBlock *)*v59;
          v62 = v254;
          v63 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v240 + 568), v56, v254);
          v64 = (void ***)*sub_1C5138C30(v32, (uint64_t *)&v254);
          if (v64)
          {
            v65 = v62 == **v64 && v63 > v61;
            if (v65)
            {
LABEL_93:
              j = v236;
              v55 = v224;
              v52 = v227;
              goto LABEL_94;
            }
          }
          else if (v63 > v61)
          {
            goto LABEL_93;
          }
          ++v59;
        }
        while (v59 != v60);
      }
      v52 = v227;
      v151 = *(uint64_t **)(v227 + 88);
      v152 = *(uint64_t **)(v227 + 96);
      for (j = v236; v151 != v152; ++v151)
      {
        v249 = (const llvm::MachineBasicBlock *)*v151;
        v153 = (uint64_t)v249;
        v154 = (_QWORD **)*sub_1C5138C30(v32, (uint64_t *)&v249);
        if ((sub_1C61EAAB0((uint64_t)v250, v153, &v254) & 1) == 0 && (!v154 || v153 == **v154))
          goto LABEL_200;
      }
      if (sub_1C5139DB8(v240, v236, (uint64_t)v250) >= v232)
        goto LABEL_200;
      v66 = 0;
    }
    v67 = *(uint64_t ****)v33;
    v68 = *(unsigned int *)(v33 + 8);
    v69 = (char *)(*(_QWORD *)v33 + 8 * v68);
    v70 = *(char **)v33;
    if ((_DWORD)v68)
    {
      v71 = 8 * v68;
      v70 = *(char **)v33;
      while (*(_QWORD *)v70 != v50)
      {
        v70 += 8;
        v71 -= 8;
        if (!v71)
        {
          v70 = (char *)(*(_QWORD *)v33 + 8 * v68);
          break;
        }
      }
    }
    if (v68 != (v70 - (char *)v67) >> 3)
    {
      if ((v66 & 1) != 0)
        goto LABEL_113;
      v72 = *(_QWORD **)(v50 + 88);
      v73 = *(_QWORD **)(v50 + 96);
      if (v72 != v73)
      {
        while (*v72 != *((_QWORD *)v70 + 1))
        {
          if (++v72 == v73)
          {
            v72 = *(_QWORD **)(v50 + 96);
            break;
          }
        }
      }
      if (v72 == v73)
        goto LABEL_113;
      v74 = *(uint64_t ****)(v52 + 88);
      v75 = *(uint64_t ****)(v52 + 96);
      if (v74 != v75)
      {
        while (*v74 != j)
        {
          if (++v74 == v75)
          {
            v74 = *(uint64_t ****)(v52 + 96);
            break;
          }
        }
      }
      if (v74 != v75)
      {
LABEL_113:
        v76 = v70 + 8;
        if (v67 != (uint64_t ***)(v70 + 8) && v76 != v69)
        {
          if (v70 == (char *)v67)
          {
            v208 = *(_QWORD *)v70;
            v209 = v69 - v76;
            memmove(v70, v76, v69 - v76);
            *(_QWORD *)&v70[v209] = v208;
          }
          else if (v70 + 16 == v69)
          {
            v210 = (uint64_t **)*((_QWORD *)v69 - 1);
            if (v69 - 8 != (char *)v67)
              memmove(v67 + 1, v67, v69 - 8 - (char *)v67);
            *v67 = v210;
          }
          else
          {
            sub_1C4E85DF0(*(_QWORD **)v33, v76, v69);
          }
        }
      }
    }
    goto LABEL_200;
  }
  v37 = **(const llvm::MachineBasicBlock ***)v33;
  if (*(const llvm::MachineBasicBlock **)(*((_QWORD *)v37 + 4) + 328) != v37)
  {
    v38 = (const llvm::MachineBasicBlock **)(*(_QWORD *)v33 + 8 * *(unsigned int *)(v33 + 8));
    v39 = (uint64_t *)*((_QWORD *)v37 + 8);
    v40 = (uint64_t *)*((_QWORD *)v37 + 9);
    if (v39 != v40)
    {
      v41 = 0;
      while (1)
      {
        v249 = (const llvm::MachineBasicBlock *)*v39;
        v42 = v249;
        v43 = *sub_1C5138C30(v32, (uint64_t *)&v249);
        if ((sub_1C61EAAB0((uint64_t)v250, (uint64_t)v42, &v254) & 1) == 0
          && (!v43 || v42 == *(const llvm::MachineBasicBlock **)(*(_QWORD *)v43 + 8 * *(unsigned int *)(v43 + 8) - 8)))
        {
          break;
        }
LABEL_54:
        if (++v39 == v40)
          goto LABEL_119;
      }
      v231 = v41;
      v44 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v240 + 576), v42);
      LODWORD(v254) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v240 + 568), v42, v37);
      v45 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v254, v44);
      v46 = dword_1ED7F9EF0;
      if (dword_1ED7F9EF0 == 0x80000000)
      {
        v47 = 1;
LABEL_60:
        LODWORD(v254) = v47;
        v46 = llvm::BranchProbability::scaleByInverse((llvm::BranchProbability *)&v254, v45);
      }
      else if (dword_1ED7F9EF0)
      {
        v47 = ((dword_1ED7F9EF0 >> 1) | 0x80000000) / dword_1ED7F9EF0;
        goto LABEL_60;
      }
      if (((*((_QWORD *)v42 + 12) - *((_QWORD *)v42 + 11)) & 0x7FFFFFFF8) == 8)
      {
        v48 = dword_1ED7F9FB0;
        if (dword_1ED7F9FB0 == 0x80000000)
        {
          v49 = 1;
LABEL_66:
          LODWORD(v254) = v49;
          v48 = llvm::BranchProbability::scaleByInverse((llvm::BranchProbability *)&v254, v45);
        }
        else if (dword_1ED7F9FB0)
        {
          v49 = ((dword_1ED7F9FB0 >> 1) | 0x80000000) / dword_1ED7F9FB0;
          goto LABEL_66;
        }
        if (__CFADD__(v48, v46))
          v46 = -1;
        else
          v46 += v48;
      }
      v41 = v231;
      if (v231 <= v46)
        v41 = v46;
      goto LABEL_54;
    }
    v41 = 0;
LABEL_119:
    v254 = (const llvm::MachineBasicBlock *)&v256;
    v255 = 0x400000000;
    v77 = *(const llvm::MachineBasicBlock ***)v33;
    v78 = *(unsigned int *)(v33 + 8);
    if ((_DWORD)v78)
    {
      v233 = v41;
      v237 = v33;
      v79 = &v77[v78];
      do
      {
        v80 = *v77;
        v82 = (uint64_t ***)*((_QWORD *)*v77 + 11);
        v81 = (uint64_t ***)*((_QWORD *)*v77 + 12);
        if (v82 != v81)
        {
          v83 = 0;
          do
          {
            v248 = *v82;
            v84 = (const llvm::MachineBasicBlock *)v248;
            v85 = (const llvm::MachineBasicBlock ***)*sub_1C5138C30(v32, (uint64_t *)&v248);
            if ((sub_1C61EAAB0((uint64_t)v250, (uint64_t)v84, &v249) & 1) == 0 && (!v85 || v84 == **v85))
            {
              v86 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v240 + 568), v80, v84);
              if (v83 <= v86)
                v83 = v86;
            }
            ++v82;
          }
          while (v82 != v81);
          if (v83)
          {
            v87 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v240 + 576), v80);
            LODWORD(v249) = v83;
            v88 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v249, v87);
            sub_1C61EAD94((uint64_t)&v254, (uint64_t)v80, v88);
          }
        }
        ++v77;
      }
      while (v77 != v79);
      v90 = v233;
      v89 = v237;
      v77 = *(const llvm::MachineBasicBlock ***)v237;
      v91 = *(unsigned int *)(v237 + 8);
      if ((_DWORD)v91)
      {
        v92 = &v77[v91];
        v93 = v92 - 1;
        v94 = -1;
        while (1)
        {
          if (v93 == (const llvm::MachineBasicBlock **)(*(_QWORD *)v89 + 8 * *(unsigned int *)(v89 + 8)))
            v95 = *(const llvm::MachineBasicBlock ***)v89;
          else
            v95 = v93;
          v96 = *v95;
          if (v77 == *(const llvm::MachineBasicBlock ***)v89)
            v97 = 0;
          else
            v97 = v90;
          if ((_DWORD)v255)
          {
            v98 = 16 * v255;
            v99 = (_QWORD *)((char *)v254 + 8);
            do
            {
              if (v96 != (const llvm::MachineBasicBlock *)*(v99 - 1))
              {
                if (__CFADD__(*v99, v97))
                  v97 = -1;
                else
                  v97 += *v99;
              }
              v99 += 2;
              v98 -= 16;
            }
            while (v98);
          }
          v100 = (const llvm::MachineBasicBlock **)*((_QWORD *)v96 + 11);
          v101 = (const llvm::MachineBasicBlock **)*((_QWORD *)v96 + 12);
          if (v100 != v101)
          {
            while (*v100 != *v77)
            {
              if (++v100 == v101)
              {
                v100 = (const llvm::MachineBasicBlock **)*((_QWORD *)v96 + 12);
                break;
              }
            }
          }
          if (v100 == v101)
            goto LABEL_152;
          v102 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v240 + 576), *v95);
          v103 = (*((_QWORD *)v96 + 12) - *((_QWORD *)v96 + 11)) >> 3;
          if ((_DWORD)v103 == 2)
          {
            v106 = v102;
            v107 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v240 + 568), v96, *v77);
            LODWORD(v249) = v107;
            v108 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v249, v106);
            v109 = v108;
            if (v107 >= 0x40000001)
            {
              LODWORD(v249) = 0x80000000 - v107;
              v109 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v249, v106);
            }
            v110 = dword_1ED7F9EF0;
            if (dword_1ED7F9EF0 == 0x80000000)
            {
              v111 = 1;
LABEL_172:
              LODWORD(v249) = v111;
              v110 = llvm::BranchProbability::scaleByInverse((llvm::BranchProbability *)&v249, v108);
            }
            else if (dword_1ED7F9EF0)
            {
              v111 = ((dword_1ED7F9EF0 >> 1) | 0x80000000) / dword_1ED7F9EF0;
              goto LABEL_172;
            }
            v112 = dword_1ED7F9FB0;
            if (dword_1ED7F9FB0 == 0x80000000)
            {
              v113 = 1;
LABEL_177:
              LODWORD(v249) = v113;
              v112 = llvm::BranchProbability::scaleByInverse((llvm::BranchProbability *)&v249, v109);
            }
            else if (dword_1ED7F9FB0)
            {
              v113 = ((dword_1ED7F9FB0 >> 1) | 0x80000000) / dword_1ED7F9FB0;
              goto LABEL_177;
            }
            v114 = v112 + v110;
            if (__CFADD__(v112, v110))
              v114 = -1;
            v189 = __CFADD__(v114, v97);
            v115 = v114 + v97;
            if (v189)
              v97 = -1;
            else
              v97 = v115;
            v90 = v233;
            v89 = v237;
            goto LABEL_152;
          }
          if ((_DWORD)v103 == 1)
            break;
LABEL_152:
          if (v97 < v94)
          {
            v94 = v97;
            v38 = v77;
          }
          ++v77;
          v93 = v95 + 1;
          if (v77 == v92)
          {
            v77 = *(const llvm::MachineBasicBlock ***)v89;
            v116 = *(unsigned int *)(v89 + 8);
            goto LABEL_187;
          }
        }
        v104 = (dword_1ED7F9FB0 + dword_1ED7F9EF0);
        if ((_DWORD)v104 == 0x80000000)
        {
          v105 = 1;
LABEL_167:
          LODWORD(v249) = v105;
          v104 = llvm::BranchProbability::scaleByInverse((llvm::BranchProbability *)&v249, v102);
        }
        else if ((_DWORD)v104)
        {
          v105 = ((v104 >> 1) | 0x80000000) / v104;
          goto LABEL_167;
        }
        if (__CFADD__(v104, v97))
          v97 = -1;
        else
          v97 += v104;
        goto LABEL_152;
      }
      v116 = 0;
    }
    else
    {
      v116 = 0;
    }
LABEL_187:
    v117 = &v77[v116];
    if (v77 != v38 && v38 != v117)
    {
      if (v77 + 1 == v38)
      {
        v119 = *v77;
        v120 = (char *)v117 - (char *)v38;
        memmove(v77, v38, (char *)v117 - (char *)v38);
        *(const llvm::MachineBasicBlock **)((char *)v77 + v120) = v119;
      }
      else if (v38 + 1 == v117)
      {
        v121 = *(v117 - 1);
        if (v117 - 1 != v77)
          memmove(v77 + 1, v77, 8 * v116 - 8);
        *v77 = v121;
      }
      else
      {
        sub_1C4E85DF0(v77, v38, v117);
      }
    }
    if (v254 != (const llvm::MachineBasicBlock *)&v256)
      free(v254);
  }
LABEL_200:
  *(_DWORD *)(v240 + 256) = 0;
  *(_DWORD *)(v240 + 400) = 0;
  if (v242 != v241)
    free(v242);
  if (v251 != v253)
    free(v251);
  if ((v250[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v250[1], 8);
}

_QWORD *sub_1C5138AC4(unsigned int *a1, uint64_t a2, llvm::SmallPtrSetImplBase *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a2;
  v7 = (uint64_t)(a1 + 230);
  v8 = *sub_1C5138C30((uint64_t)(a1 + 230), &v24);
  result = sub_1C4774094(a3, v8);
  if (v10)
  {
    v11 = *(unsigned int *)(v8 + 8);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)v8;
      v13 = *(_QWORD *)v8 + 8 * v11;
      do
      {
        v14 = *(uint64_t **)(*v12 + 64);
        v15 = *(uint64_t **)(*v12 + 72);
        while (v14 != v15)
        {
          v16 = *v14;
          v23 = *v14;
          if (!a4 || (result = (_QWORD *)sub_1C61EAAB0(a4, v16, &v25), (_DWORD)result))
          {
            result = sub_1C5138C30(v7, &v23);
            if (*result != v8)
              ++*(_DWORD *)(v8 + 56);
          }
          ++v14;
        }
        ++v12;
      }
      while (v12 != (uint64_t *)v13);
    }
    if (!*(_DWORD *)(v8 + 56))
    {
      v17 = **(_QWORD **)v8;
      if (*(_BYTE *)(v17 + 184))
      {
        v18 = a1 + 98;
        v19 = a1 + 100;
        v20 = a1[100];
        if (v20 >= a1[101])
        {
          v21 = v20 + 1;
          v22 = (uint64_t)(a1 + 102);
LABEL_21:
          result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v18, v22, v21, 8);
          LODWORD(v20) = *v19;
        }
      }
      else
      {
        v18 = a1 + 62;
        v19 = a1 + 64;
        v20 = a1[64];
        if (v20 >= a1[65])
        {
          v21 = v20 + 1;
          v22 = (uint64_t)(a1 + 66);
          goto LABEL_21;
        }
      }
      *(_QWORD *)(*v18 + 8 * v20) = v17;
      ++*v19;
    }
  }
  return result;
}

_QWORD *sub_1C5138C30(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C51399FC(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5 + 1;
}

llvm::TailDuplicator *sub_1C5138C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const llvm::MachineBasicBlock **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  unsigned int v14;
  _QWORD *v15;
  __n128 v16;
  _QWORD *v17;
  llvm::TailDuplicator *v18;
  llvm::TailDuplicator ****v19;
  uint64_t *v20;
  uint64_t *v21;
  llvm::TailDuplicator ***v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  llvm::TailDuplicator *v27;
  unsigned int v28;
  llvm::TailDuplicator **v29;
  uint64_t v30;
  unsigned int EdgeProbability;
  int v32;
  unint64_t v33;
  uint64_t *v35;
  llvm::MachineBasicBlock *v36;
  llvm::TailDuplicator *v37;
  int isSimpleBB;
  __n128 *v39;
  unint64_t v40;
  __n128 *v41;
  unint64_t v42;
  const std::nothrow_t *v43;
  __n128 *v44;
  BOOL v45;
  llvm::TailDuplicator *v46;
  uint64_t *v47;
  llvm::TailDuplicator *v48;
  uint64_t *v49;
  llvm::MachineBasicBlock ***v50;
  uint64_t v51;
  llvm::TailDuplicator *v52;
  unsigned int v53;
  char **v54;
  _BOOL4 v55;
  __n128 *v56;
  llvm::TailDuplicator *result;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned int *v67;
  uint64_t *v68;
  uint64_t *v69;
  _QWORD *v70;
  unsigned int *v71;
  uint64_t *v72;
  uint64_t v73;
  char v74;
  BOOL v75;
  const llvm::MachineBasicBlock **v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  llvm::TailDuplicator **v81;
  llvm::TailDuplicator **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  const llvm::MachineBasicBlock *v90;
  const llvm::MachineBasicBlock *v91;
  const llvm::MachineBasicBlock **v92;
  const llvm::MachineBasicBlock **v93;
  void **v94;
  const llvm::MachineBasicBlock *v95;
  uint64_t v96;
  uint64_t BlockFreq;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __n128 *v101;
  __n128 *v102;
  __n128 *v103;
  unint64_t v104;
  BOOL v105;
  char *v106;
  __n128 v107;
  llvm::MachineBasicBlock *v108;
  char *v109;
  __n128 *v110;
  unint64_t v111;
  unint64_t v112;
  BOOL v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  BOOL v117;
  __n128 *v118;
  const llvm::MachineBasicBlock *v119;
  const llvm::MachineBasicBlock *v120;
  llvm::TailDuplicator *v121;
  llvm::TailDuplicator *v122;
  _QWORD *v124;
  uint64_t v125;
  int *v126;
  int v127;
  int v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  llvm::TailDuplicator *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138[2];
  int v139[2];
  _QWORD *v140;
  __n128 v141;
  llvm::TailDuplicator *v142;
  uint64_t v143;
  const llvm::MachineBasicBlock *v144;
  llvm::TailDuplicator *v145;
  llvm::TailDuplicator *v146;
  _BYTE v147[4];
  _DWORD v148[11];
  void *v149;
  uint64_t v150;
  _BYTE v151[32];
  void *v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  _BYTE v156[176];
  __n128 *v157;
  uint64_t v158;
  _QWORD v159[26];

  v7 = a1;
  v159[24] = *MEMORY[0x1E0C80C00];
  v140 = *(_QWORD **)(*(_QWORD *)(a1 + 560) + 328);
  v8 = *(const llvm::MachineBasicBlock ***)a3;
  v9 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    do
    {
      v11 = (uint64_t)*v8++;
      sub_1C513A330((unsigned int *)v7, a3, *(uint64_t **)(v11 + 88), *(uint64_t **)(v11 + 96), a2, a4);
      v10 -= 8;
    }
    while (v10);
    v8 = *(const llvm::MachineBasicBlock ***)a3;
    v12 = *(unsigned int *)(a3 + 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = (uint64_t **)v8[v12 - 1];
  v135 = v7 + 536;
  v137 = v7 + 920;
  v132 = (llvm::TailDuplicator *)(v7 + 632);
  v133 = v7 + 248;
  v131 = v7 + 392;
  v134 = a2;
  *(_QWORD *)v138 = v7;
  while (1)
  {
    v149 = v151;
    v150 = 0x400000000;
    v14 = sub_1C513A4B0(v7, (llvm::MachineBasicBlock *)v13, (const llvm::MachineBasicBlock ***)a3, a4, (uint64_t)&v149);
    v15 = (_QWORD *)sub_1C5139F64(v135, (uint64_t)v13);
    *(_QWORD *)v139 = v13;
    if ((_QWORD *)(*(_QWORD *)(v7 + 536) + 24 * *(unsigned int *)(v7 + 552)) != v15)
    {
      v17 = v15;
      v18 = (llvm::TailDuplicator *)v15[1];
      v145 = v18;
      *v15 = -8192;
      *(int32x2_t *)(v7 + 544) = vadd_s32(*(int32x2_t *)(v7 + 544), (int32x2_t)0x1FFFFFFFFLL);
      v19 = (llvm::TailDuplicator ****)sub_1C5138C30(v137, (uint64_t *)&v145);
      v20 = v13[11];
      v21 = v13[12];
      if (v20 != v21)
      {
        while ((llvm::TailDuplicator *)*v20 != v18)
        {
          if (++v20 == v21)
          {
            v20 = v13[12];
            break;
          }
        }
      }
      if (v20 != v21)
      {
        v22 = *v19;
        if ((!a4 || sub_1C61EAAB0(a4, (uint64_t)v18, &v152))
          && v22 != (llvm::TailDuplicator ***)a3
          && v18 == **v22)
        {
          v46 = (llvm::TailDuplicator *)v17[1];
          v51 = v17[2];
          goto LABEL_59;
        }
      }
    }
    v23 = v13[11];
    v24 = v13[12];
    v25 = v150;
    if ((((char *)v24 - (char *)v23) & 0x7FFFFFFF8) != 0x10 || v150 != 2)
      goto LABEL_20;
    sub_1C61EADEC((llvm::SmallPtrSetImplBase *)&v145, v23, v24);
    v152 = v156;
    v153 = (uint64_t)v156;
    v154 = 8;
    v155 = 0;
    if ((_DWORD)v150)
    {
      v60 = (uint64_t *)v149;
      v61 = (uint64_t *)((char *)v149 + 8 * v150);
      while (1)
      {
        v144 = (const llvm::MachineBasicBlock *)*v60;
        v62 = (uint64_t *)*((_QWORD *)v144 + 8);
        v63 = (uint64_t *)*((_QWORD *)v144 + 9);
        if (v62 == v63)
          break;
        v64 = 0;
        do
        {
          v65 = *v62;
          v143 = v65;
          v66 = sub_1C477672C((uint64_t)&v145, v65);
          if (v146 == v145)
            v67 = v148;
          else
            v67 = (unsigned int *)v147;
          if (v66 == (_QWORD *)((char *)v146 + 8 * *v67))
          {
            v72 = sub_1C5138C30(v137, &v143);
            if (v65 != *(_QWORD *)v139)
            {
              v73 = *v72;
              if ((!a4 || sub_1C61EAAB0(a4, v65, &v141))
                && v73 != a3
                && v73 != *sub_1C5138C30(v137, (uint64_t *)&v144))
              {
                ++v64;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v152, v65);
                if (v74)
                {
                  if (!sub_1C513AD14(v65, (uint64_t)&v145))
                  {
LABEL_109:
                    v75 = 0;
                    a2 = v134;
                    goto LABEL_136;
                  }
                }
              }
            }
          }
          else
          {
            v68 = *(uint64_t **)(v65 + 88);
            v69 = *(uint64_t **)(v65 + 96);
            while (v68 != v69)
            {
              v70 = sub_1C477672C((uint64_t)&v145, *v68);
              if (v146 == v145)
                v71 = v148;
              else
                v71 = (unsigned int *)v147;
              if (v70 == (_QWORD *)((char *)v146 + 8 * *v71))
                goto LABEL_109;
              ++v68;
            }
          }
          ++v62;
        }
        while (v62 != v63);
        v75 = v64 > 0;
        a2 = v134;
        if (v64 >= 1 && ++v60 != v61)
          continue;
        goto LABEL_136;
      }
      v75 = 0;
      a2 = v134;
    }
    else
    {
      v75 = 1;
    }
LABEL_136:
    if ((void *)v153 != v152)
      free((void *)v153);
    v7 = *(_QWORD *)v138;
    if (v146 != v145)
      free(v146);
    if (!v75)
    {
      v25 = v150;
LABEL_20:
      v152 = &v154;
      v153 = 0x400000000;
      if (v25)
      {
        v27 = 0;
        v28 = 0;
        v29 = (llvm::TailDuplicator **)v149;
        v30 = 8 * v25;
        do
        {
          v145 = *v29;
          EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(*(_QWORD *)v138 + 568), *(const llvm::MachineBasicBlock **)v139, v145);
          v32 = EdgeProbability;
          if (EdgeProbability < v14)
            LODWORD(v33) = EdgeProbability;
          else
            LODWORD(v33) = 0x80000000;
          if (EdgeProbability < v14 && v14 != 0x80000000)
            v33 = ((v14 >> 1) | ((unint64_t)EdgeProbability << 31)) / v14;
          v35 = sub_1C5138C30(v137, (uint64_t *)&v145);
          if (sub_1C513A5E4(*(uint64_t *)v138, *(uint64_t *)v139, v145, *v35, v32, a3, a4))
          {
            if (byte_1ED7FA070)
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v138 + 560) + 8) + 592) & 1) == 0)
              {
                v37 = v145;
                isSimpleBB = llvm::TailDuplicator::isSimpleBB(v145, v36);
                if (((*((_QWORD *)v37 + 12) - *((_QWORD *)v37 + 11)) & 0x7FFFFFFF8) != 8)
                {
                  if (llvm::TailDuplicator::shouldTailDuplicate(v132, isSimpleBB, v37))
                    sub_1C61EADBC((uint64_t)&v152, v33, (uint64_t)v37);
                }
              }
            }
          }
          else if (v27 == 0 || v28 < v33)
          {
            v28 = v33;
            v27 = v145;
          }
          ++v29;
          v30 -= 8;
        }
        while (v30);
        v39 = (__n128 *)v152;
        v40 = v153;
        v41 = (__n128 *)((char *)v152 + 16 * v153);
        if ((_DWORD)v153)
        {
          v42 = v153;
          v43 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          while (1)
          {
            v44 = (__n128 *)operator new(16 * v42, v43);
            if (v44)
              break;
            v45 = v42 > 1;
            v42 >>= 1;
            if (!v45)
            {
              a2 = v134;
              v46 = v27;
              goto LABEL_46;
            }
          }
          v56 = v44;
          sub_1C513BA20(v39, v41, v40, v44, v42, v16);
          operator delete(v56);
          a2 = v134;
          v46 = v27;
          goto LABEL_47;
        }
        v40 = 0;
        a2 = v134;
        v46 = v27;
      }
      else
      {
        v40 = 0;
        v46 = 0;
        v28 = 0;
        v41 = (__n128 *)&v154;
        v39 = (__n128 *)&v154;
      }
LABEL_46:
      sub_1C513BA20(v39, v41, v40, 0, 0, v16);
LABEL_47:
      v47 = (uint64_t *)v152;
      v7 = *(_QWORD *)v138;
      if ((_DWORD)v153)
      {
        v48 = v46;
        v49 = (uint64_t *)((char *)v152 + 16 * v153);
        while (1)
        {
          if (*(_DWORD *)v47 < v28)
          {
LABEL_53:
            LOBYTE(v51) = 0;
            v46 = v48;
            goto LABEL_54;
          }
          v50 = (llvm::MachineBasicBlock ***)v47[1];
          if (sub_1C5139FBC(*(uint64_t *)v138, *(uint64_t ***)v139, v50, a3, a4))
          {
            if (sub_1C513A864(*(uint64_t *)v138, *(const llvm::MachineBasicBlock **)v139, v50, v28, (const llvm::MachineBasicBlock ***)a3, a4))
            {
              break;
            }
          }
          v47 += 2;
          if (v47 == v49)
            goto LABEL_53;
        }
        LOBYTE(v51) = 1;
        v46 = (llvm::TailDuplicator *)v50;
LABEL_54:
        v47 = (uint64_t *)v152;
      }
      else
      {
        LOBYTE(v51) = 0;
      }
      if (v47 == &v154)
        goto LABEL_59;
      v52 = (llvm::TailDuplicator *)v47;
LABEL_58:
      free(v52);
      goto LABEL_59;
    }
    sub_1C618F7A4((llvm::SmallPtrSetImplBase *)&v145, *(uint64_t **)(*(_QWORD *)v139 + 88), *(uint64_t **)(*(_QWORD *)v139 + 96));
    LOBYTE(v51) = 0;
    if (v148[0] - v148[1] != 2)
    {
      v46 = 0;
      goto LABEL_196;
    }
    v46 = 0;
    if ((_DWORD)v150 != 2)
      goto LABEL_196;
    v136 = 0;
    v89 = 0;
    v152 = &v154;
    v153 = 0x800000000;
    v157 = (__n128 *)v159;
    v158 = 0x800000000;
    v130 = v149;
    v90 = *(const llvm::MachineBasicBlock **)v139;
    do
    {
      v91 = (const llvm::MachineBasicBlock *)v130[v89];
      v144 = v91;
      v93 = (const llvm::MachineBasicBlock **)*((_QWORD *)v91 + 8);
      v92 = (const llvm::MachineBasicBlock **)*((_QWORD *)v91 + 9);
      if (v93 != v92)
      {
        v94 = &v152 + 26 * v136;
        v129 = (uint64_t)(v94 + 2);
        do
        {
          v95 = *v93;
          v143 = (uint64_t)v95;
          if (v95 != v90)
          {
            if (a4 && !sub_1C61EAAB0(a4, (uint64_t)v95, &v141))
              goto LABEL_151;
            if (*sub_1C5138C30(v137, &v143) == a3)
              goto LABEL_151;
            v96 = *sub_1C5138C30(v137, &v143);
            v90 = *(const llvm::MachineBasicBlock **)v139;
            if (v96 == *sub_1C5138C30(v137, (uint64_t *)&v144))
              goto LABEL_151;
          }
          BlockFreq = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v7 + 576), v95);
          v98 = v7;
          v99 = BlockFreq;
          v141.n128_u32[0] = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v98 + 568), v95, v91);
          v141.n128_u64[0] = llvm::BranchProbability::scale((llvm::BranchProbability *)&v141, v99);
          v141.n128_u64[1] = (unint64_t)v95;
          v142 = v91;
          v100 = *((unsigned int *)v94 + 2);
          v101 = (__n128 *)*v94;
          if (v100 >= *((_DWORD *)v94 + 3))
          {
            v104 = v100 + 1;
            v105 = (__n128 *)((char *)v101 + 24 * v100) > &v141;
            if (v101 <= &v141 && v105)
            {
              v106 = (char *)((char *)&v141 - (char *)v101);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v94, v129, v104, 24);
              v101 = (__n128 *)*v94;
              v102 = (__n128 *)&v106[(_QWORD)*v94];
              goto LABEL_155;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v94, v129, v104, 24);
            v101 = (__n128 *)*v94;
          }
          v102 = &v141;
LABEL_155:
          v7 = *(_QWORD *)v138;
          v103 = (__n128 *)((char *)v101 + 24 * *((unsigned int *)v94 + 2));
          v88 = *v102;
          v103[1].n128_u64[0] = v102[1].n128_u64[0];
          *v103 = v88;
          ++*((_DWORD *)v94 + 2);
LABEL_151:
          ++v93;
        }
        while (v93 != v92);
      }
      v89 = 1;
      ++v136;
    }
    while (v136 != 2);
    sub_1C513ADE4((__n128 *)v152, v153, v88);
    sub_1C513ADE4(v157, v158, v107);
    v109 = (char *)v152;
    v110 = v157;
    v111 = v157->n128_u64[1];
    if (*((_QWORD *)v152 + 1) == v111)
    {
      v112 = v157[1].n128_u64[1];
      v113 = __CFADD__(v112, *(_QWORD *)v152);
      v114 = v112 + *(_QWORD *)v152;
      if (v113)
        v114 = -1;
      v115 = *((_QWORD *)v152 + 3);
      v113 = __CFADD__(v115, v157->n128_u64[0]);
      v116 = v115 + v157->n128_u64[0];
      if (v113)
        v116 = -1;
      if (v114 < v116)
        v109 = (char *)v152 + 24;
      else
        v110 = (__n128 *)((char *)v157 + 24);
      v111 = v110->n128_u64[1];
    }
    v117 = v111 == (_QWORD)v90;
    if ((const llvm::MachineBasicBlock *)v111 == v90)
      v118 = (__n128 *)v109;
    else
      v118 = v110;
    if (v117)
      v109 = (char *)v110;
    v119 = (const llvm::MachineBasicBlock *)*((_QWORD *)v109 + 1);
    v120 = (const llvm::MachineBasicBlock *)*((_QWORD *)v109 + 2);
    v141 = *v118;
    v142 = (llvm::TailDuplicator *)v118[1].n128_u64[0];
    if (v119 == v90)
    {
      v122 = v142;
      if (v120 != (const llvm::MachineBasicBlock *)v141.n128_u64[1] || byte_1ED7FA070 == 0)
      {
        a2 = v134;
      }
      else
      {
        a2 = v134;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 560) + 8) + 592) & 1) == 0)
        {
          v127 = llvm::TailDuplicator::isSimpleBB(v142, v108);
          if (((*((_QWORD *)v122 + 12) - *((_QWORD *)v122 + 11)) & 0x7FFFFFFF8) != 8
            && llvm::TailDuplicator::shouldTailDuplicate(v132, v127, v122)
            && sub_1C5139FBC(v7, (uint64_t **)v90, (llvm::MachineBasicBlock ***)v122, a3, a4))
          {
            v128 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v7 + 568), v90, v120);
            if (sub_1C513A864(v7, v90, (llvm::MachineBasicBlock ***)v122, v128, (const llvm::MachineBasicBlock ***)a3, a4))
            {
              LOBYTE(v51) = 1;
              v121 = v122;
              goto LABEL_191;
            }
            v122 = v142;
          }
        }
      }
      v121 = v120;
      v124 = sub_1C5139D50(v135, &v141.n128_i64[1]);
      LOBYTE(v51) = 0;
      *v124 = v122;
      *((_BYTE *)v124 + 8) = 0;
    }
    else
    {
      LOBYTE(v51) = 0;
      v121 = 0;
      a2 = v134;
    }
LABEL_191:
    v125 = 104;
    do
    {
      v126 = *(int **)((char *)&v152 + v125 * 4 - 208);
      if (&v138[v125 - 2] != v126)
        free(v126);
      v125 -= 52;
    }
    while (v125 * 4);
    v46 = v121;
LABEL_196:
    v52 = v146;
    if (v146 != v145)
      goto LABEL_58;
LABEL_59:
    if (v149 != v151)
      free(v149);
    v145 = v46;
    if (byte_1ED7FA070 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 560) + 8) + 592) & 1) == 0)
    {
      if (v46)
      {
        v53 = sub_1C5139FBC(v7, *(uint64_t ***)v139, (llvm::MachineBasicBlock ***)v46, a3, a4);
        v54 = (char **)v145;
      }
      else
      {
        v54 = 0;
        v53 = 0;
      }
      v55 = (v51 & 1 | v53) != 0;
      if (!v54)
        goto LABEL_70;
      goto LABEL_111;
    }
    v54 = (char **)v46;
    v55 = v51 & 1;
    if (v54)
      goto LABEL_111;
LABEL_70:
    v145 = sub_1C513A180(v7, a3, v133);
    v54 = (char **)v145;
    if (!v145)
    {
      result = sub_1C513A180(v7, a3, v131);
      v145 = result;
      v54 = (char **)result;
      if (!result)
      {
        v58 = v140;
        v59 = *(_QWORD *)(v7 + 560) + 320;
        if ((_QWORD *)v59 == v140)
          return result;
        while (1)
        {
          if (!a4 || (result = (llvm::TailDuplicator *)sub_1C61EAAB0(a4, (uint64_t)v58, &v152), (_DWORD)result))
          {
            v152 = v58;
            result = (llvm::TailDuplicator *)sub_1C5138C30(v137, (uint64_t *)&v152);
            if (*(_QWORD *)result != a3)
              break;
          }
          v58 = (_QWORD *)v58[1];
          if (v58 == (_QWORD *)v59)
            return result;
        }
        v140 = v58;
        v152 = v58;
        result = (llvm::TailDuplicator *)sub_1C5138C30(v137, (uint64_t *)&v152);
        v145 = ***(llvm::TailDuplicator ****)result;
        v54 = (char **)v145;
        if (!v145)
          return result;
      }
    }
LABEL_111:
    if (byte_1ED7FA070)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 560) + 8) + 592) & 1) == 0 && v55)
      {
        LOBYTE(v152) = 0;
        v13 = *(uint64_t ***)v139;
        if (sub_1C513C2C8(v7, v54, *(uint64_t *)v139, a3, a4, (uint64_t)&v140, &v152))
        {
          if ((_BYTE)v152)
          {
            while (1)
            {
              v77 = *(const llvm::MachineBasicBlock ***)a3;
              v78 = *(unsigned int *)(a3 + 8);
              v79 = *(_QWORD *)a3 + 8 * v78;
              if (v79 - 8 == *(_QWORD *)a3)
                break;
              v80 = sub_1C513C2C8(v7, *(char ***)(v79 - 8), *(_QWORD *)(v79 - 16), a3, a4, (uint64_t)&v140, &v152);
              if (!(_BYTE)v152 || !v80)
              {
                v77 = *(const llvm::MachineBasicBlock ***)a3;
                v78 = *(unsigned int *)(a3 + 8);
                break;
              }
            }
            v13 = (uint64_t **)v77[v78 - 1];
            sub_1C513A330((unsigned int *)v7, a3, v13[11], v13[12], a2, a4);
          }
          else
          {
            v13 = *(uint64_t ***)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8) - 8);
          }
        }
        v54 = (char **)v145;
        v81 = (llvm::TailDuplicator **)v13[11];
        v82 = (llvm::TailDuplicator **)v13[12];
        if (v81 != v82)
        {
          while (*v81 != v145)
          {
            if (++v81 == v82)
            {
              v81 = (llvm::TailDuplicator **)v13[12];
              break;
            }
          }
        }
        if (v81 == v82)
          continue;
      }
    }
    v83 = *sub_1C5138C30(v137, (uint64_t *)&v145);
    *(_DWORD *)(v83 + 56) = 0;
    v84 = *(unsigned int *)(v83 + 8);
    if ((_DWORD)v84)
    {
      v85 = *(uint64_t **)v83;
      v86 = 8 * v84;
      do
      {
        v87 = *v85++;
        sub_1C513A330((unsigned int *)v7, v83, *(uint64_t **)(v87 + 88), *(uint64_t **)(v87 + 96), a2, a4);
        v86 -= 8;
      }
      while (v86);
    }
    sub_1C5137514((_QWORD *)a3, (uint64_t)v54, v83);
    v13 = *(uint64_t ***)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8) - 8);
  }
}

_QWORD *sub_1C51399FC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5139AAC(a1, v6);
  v8 = 0;
  sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5139AAC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = 16 * v3;
      v14 = (uint64_t *)(v4 + 8);
      do
      {
        v15 = *(v14 - 1);
        if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v19);
          v16 = v19;
          *v19 = v15;
          v16[1] = *v14;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v14 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    do
    {
      *result = -4096;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

uint64_t sub_1C5139BE8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C61EACD4(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 136; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C61EACD4(a1, v14, v8);
}

_QWORD *sub_1C5139D50(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4E580F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C513734C(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
    v5[2] = 0;
  }
  return v5 + 1;
}

unint64_t sub_1C5139DB8(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  const llvm::MachineBasicBlock *v6;
  uint64_t v7;
  unint64_t v8;
  const llvm::MachineBasicBlock *v9;
  uint64_t v10;
  unsigned int EdgeProbability;
  const llvm::MachineBasicBlock **v12;
  const llvm::MachineBasicBlock **v13;
  unsigned int v14;
  const llvm::MachineBasicBlock *v15;
  uint64_t v16;
  unsigned int v17;
  const llvm::MachineBasicBlock ***v18;
  uint64_t BlockFreq;
  unint64_t v20;
  uint64_t *v22;
  unint64_t v23;
  llvm::MachineBasicBlock *v24;
  uint64_t v25;
  const llvm::MachineBasicBlock *v26;
  const llvm::MachineBasicBlock *v27;
  uint64_t v28;

  v4 = a2[8];
  v3 = a2[9];
  if (v4 == v3)
    return 0;
  v6 = (const llvm::MachineBasicBlock *)a2;
  v7 = a1;
  v8 = 0;
  v25 = a1 + 920;
  do
  {
    v27 = (const llvm::MachineBasicBlock *)*v4;
    v9 = v27;
    v10 = *sub_1C5138C30(v25, (uint64_t *)&v27);
    if ((sub_1C61EAAB0(a3, (uint64_t)v9, &v28) & 1) == 0
      && (!v10 || v9 == *(const llvm::MachineBasicBlock **)(*(_QWORD *)v10 + 8 * *(unsigned int *)(v10 + 8) - 8)))
    {
      v22 = v3;
      v23 = v8;
      v24 = v6;
      EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v7 + 568), v9, v6);
      v12 = (const llvm::MachineBasicBlock **)*((_QWORD *)v9 + 11);
      v13 = (const llvm::MachineBasicBlock **)*((_QWORD *)v9 + 12);
      if (v12 == v13)
      {
LABEL_13:
        BlockFreq = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v7 + 576), v9);
        v6 = v24;
        LODWORD(v28) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v7 + 568), v9, v24);
        v20 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v28, BlockFreq);
        v8 = v23;
        if (v20 > v23)
          v8 = v20;
      }
      else
      {
        v14 = EdgeProbability;
        while (1)
        {
          v15 = *v12;
          v26 = v15;
          v16 = v7;
          v17 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v7 + 568), v9, v15);
          v18 = (const llvm::MachineBasicBlock ***)*sub_1C5138C30(v25, (uint64_t *)&v26);
          if ((sub_1C61EAAB0(a3, (uint64_t)v15, &v28) & 1) == 0 && v17 > v14 && (!v18 || v15 == **v18))
            break;
          ++v12;
          v7 = v16;
          if (v12 == v13)
            goto LABEL_13;
        }
        v7 = v16;
        v8 = v23;
        v6 = v24;
      }
      v3 = v22;
    }
    ++v4;
  }
  while (v4 != v3);
  return v8;
}

uint64_t sub_1C5139F64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (sub_1C4E580F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
}

uint64_t sub_1C5139FBC(uint64_t a1, uint64_t **a2, llvm::MachineBasicBlock ***this, uint64_t a4, uint64_t a5)
{
  int isSimpleBB;
  uint64_t v11;
  llvm::MachineBasicBlock **v13;
  llvm::MachineBasicBlock **v14;
  llvm::MachineBasicBlock *v15;
  llvm::MachineBasicBlock **v16;
  llvm::MachineBasicBlock **v17;
  char v18;
  int v19;
  llvm::MachineBasicBlock *v20;
  void *v21;
  void *v22;
  int v23;
  int v24;
  _QWORD v25[2];
  char v26;

  isSimpleBB = llvm::TailDuplicator::isSimpleBB((llvm::TailDuplicator *)this, (llvm::MachineBasicBlock *)a2);
  if ((((char *)this[12] - (char *)this[11]) & 0x7FFFFFFF8) == 8
    || !llvm::TailDuplicator::shouldTailDuplicate((llvm::TailDuplicator *)(a1 + 632), isSimpleBB, (llvm::MachineBasicBlock *)this))
  {
    return 0;
  }
  sub_1C618F7A4((llvm::SmallPtrSetImplBase *)&v21, a2[11], a2[12]);
  v14 = this[8];
  v13 = this[9];
  if (v14 == v13)
    goto LABEL_22;
  v18 = 1;
  v19 = 0;
  do
  {
    v15 = *v14;
    v20 = v15;
    if (v15 != (llvm::MachineBasicBlock *)a2
      && (!a5 || sub_1C61EAAB0(a5, (uint64_t)v15, v25))
      && *sub_1C5138C30(a1 + 920, (uint64_t *)&v20) != a4)
    {
      if ((llvm::TailDuplicator::canTailDuplicate((llvm::TailDuplicator *)(a1 + 632), (llvm::MachineBasicBlock *)this, v15) & 1) != 0)
      {
        ++v19;
      }
      else if ((v23 - v24) < 2 || !sub_1C513AD14((uint64_t)v15, (uint64_t)&v21))
      {
        v18 = 0;
      }
    }
    ++v14;
  }
  while (v14 != v13);
  if (!v19)
  {
LABEL_22:
    v11 = 0;
  }
  else
  {
    llvm::Function::getEntryCount(**(uint64_t *****)(a1 + 560), 0, (uint64_t)v25);
    if (v26)
    {
      v11 = 1;
    }
    else
    {
      v16 = this[11];
      v17 = this[12];
      if (v16 == v17)
        v11 = 1;
      else
        v11 = (v19 + 1 <= ((unint64_t)((char *)v17 - (char *)v16) >> 3)) & v18;
    }
  }
  if (v22 != v21)
    free(v22);
  return v11;
}

const llvm::MachineBasicBlock *sub_1C513A180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const llvm::MachineBasicBlock *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  const llvm::MachineBasicBlock *v19;
  unint64_t BlockFreq;
  const llvm::MachineBasicBlock *v22;

  v6 = *(uint64_t **)a3;
  v7 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v7)
  {
    v8 = &v6[v7];
    v9 = 8 * v7 - 8;
    v10 = *(uint64_t **)a3;
    while (1)
    {
      v11 = *v10;
      v22 = 0;
      if ((sub_1C49F21C0(*(_QWORD *)(a1 + 920), *(_DWORD *)(a1 + 936), v11, &v22) & 1) != 0
        && *((_QWORD *)v22 + 1) == a2)
      {
        break;
      }
      ++v10;
      v9 -= 8;
      if (v10 == v8)
        goto LABEL_16;
    }
    if (v10 + 1 == v8)
    {
      v8 = v10;
    }
    else
    {
      v12 = 1;
      v8 = v10;
      do
      {
        v13 = v10[v12];
        v22 = 0;
        if ((sub_1C49F21C0(*(_QWORD *)(a1 + 920), *(_DWORD *)(a1 + 936), v13, &v22) & 1) == 0
          || *((_QWORD *)v22 + 1) != a2)
        {
          *v8++ = v10[v12];
        }
        ++v12;
        v9 -= 8;
      }
      while (v9);
      v6 = *(uint64_t **)a3;
    }
  }
  else
  {
    v8 = *(uint64_t **)a3;
  }
LABEL_16:
  v14 = (unint64_t)((char *)v8 - (char *)v6) >> 3;
  *(_DWORD *)(a3 + 8) = v14;
  if (!(_DWORD)v14)
    return 0;
  v15 = 0;
  v16 = 0;
  v17 = *(unsigned __int8 *)(*v6 + 184);
  v18 = 8 * ((unint64_t)((char *)v8 - (char *)v6) >> 3);
  do
  {
    v19 = (const llvm::MachineBasicBlock *)*v6;
    v22 = (const llvm::MachineBasicBlock *)*v6;
    if (*sub_1C5138C30(a1 + 920, (uint64_t *)&v22) != a2)
    {
      BlockFreq = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), v19);
      if (((v15 != 0) & ((v17 != 0) ^ (v16 >= BlockFreq))) == 0)
      {
        v16 = BlockFreq;
        v15 = v19;
      }
    }
    ++v6;
    v18 -= 8;
  }
  while (v18);
  return v15;
}

unsigned int *sub_1C513A330(unsigned int *result, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v11;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t **v18;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[13];

  if (a3 != a4)
  {
    v31[11] = v6;
    v31[12] = v7;
    v11 = a3;
    v13 = result;
    v14 = (uint64_t)(result + 230);
    v15 = (uint64_t)(result + 98);
    v16 = result + 100;
    v29 = (uint64_t)(result + 62);
    v27 = (uint64_t)(result + 102);
    v28 = result + 64;
    v26 = (uint64_t)(result + 66);
    do
    {
      v17 = *v11;
      v30 = *v11;
      if (a6)
      {
        result = (unsigned int *)sub_1C61EAAB0(a6, v17, v31);
        if (!(_DWORD)result)
          goto LABEL_18;
      }
      result = (unsigned int *)sub_1C5138C30(v14, &v30);
      v18 = *(uint64_t ***)result;
      if (*(_QWORD *)result == a2 || v17 == a5)
        goto LABEL_18;
      v20 = *((_DWORD *)v18 + 14);
      if (!v20)
        goto LABEL_18;
      v21 = v20 - 1;
      *((_DWORD *)v18 + 14) = v21;
      if (v21)
        goto LABEL_18;
      v22 = **v18;
      if (*(_BYTE *)(v22 + 184))
      {
        v23 = v13[100];
        if (v23 >= v13[101])
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v15, v27, v23 + 1, 8);
          v25 = v16;
          v24 = (_QWORD *)v15;
LABEL_22:
          v23 = *v25;
          goto LABEL_17;
        }
        v24 = (_QWORD *)v15;
        v25 = v16;
      }
      else
      {
        v23 = v13[64];
        if (v23 >= v13[65])
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(v29, v26, v23 + 1, 8);
          v25 = v28;
          v24 = (_QWORD *)v29;
          goto LABEL_22;
        }
        v25 = v28;
        v24 = (_QWORD *)v29;
      }
LABEL_17:
      *(_QWORD *)(*v24 + 8 * v23) = v22;
      ++*v25;
LABEL_18:
      ++v11;
    }
    while (v11 != a4);
  }
  return result;
}

uint64_t sub_1C513A4B0(uint64_t a1, llvm::MachineBasicBlock *a2, const llvm::MachineBasicBlock ***a3, uint64_t a4, uint64_t a5)
{
  const llvm::MachineBasicBlock **v5;
  const llvm::MachineBasicBlock **v6;
  uint64_t v12;
  uint64_t v13;
  const llvm::MachineBasicBlock *v14;
  unsigned int EdgeProbability;
  const llvm::MachineBasicBlock ***v16;
  unint64_t v17;
  uint64_t v19;
  const llvm::MachineBasicBlock *v20;
  uint64_t v21;

  v6 = (const llvm::MachineBasicBlock **)*((_QWORD *)a2 + 11);
  v5 = (const llvm::MachineBasicBlock **)*((_QWORD *)a2 + 12);
  if (v6 == v5)
    return 0x80000000;
  v12 = a1 + 920;
  v19 = a5 + 16;
  v13 = 0x80000000;
  do
  {
    v14 = *v6;
    v20 = v14;
    if (*((_BYTE *)v14 + 184)
      || a4 && !sub_1C61EAAB0(a4, (uint64_t)v14, &v21)
      || (v16 = (const llvm::MachineBasicBlock ***)*sub_1C5138C30(v12, (uint64_t *)&v20), v16 == a3))
    {
      EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), a2, v14);
      if (v13 >= EdgeProbability)
        v13 = v13 - EdgeProbability;
      else
        v13 = 0;
    }
    else if (v14 == **v16)
    {
      v17 = *(unsigned int *)(a5 + 8);
      if (v17 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v19, v17 + 1, 8);
        v17 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v17) = v14;
      ++*(_DWORD *)(a5 + 8);
    }
    ++v6;
  }
  while (v6 != v5);
  return v13;
}

uint64_t sub_1C513A5E4(uint64_t a1, uint64_t a2, const llvm::MachineBasicBlock *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t BlockFreq;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  const llvm::MachineBasicBlock *v31;
  uint64_t v32;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  const llvm::MachineBasicBlock *v43;
  _QWORD v44[2];
  char v45;

  if (!*(_DWORD *)(a4 + 56))
    return 0;
  llvm::Function::getEntryCount(**(uint64_t *****)(a2 + 32), 0, (uint64_t)v44);
  if (!v45)
  {
    v15 = &llvm::StaticLikelyProb;
LABEL_18:
    v41 = *((_DWORD *)v15 + 32);
    v23 = 100;
    v24 = 48;
    goto LABEL_19;
  }
  v16 = *(uint64_t **)(a2 + 88);
  if (((*(_QWORD *)(a2 + 96) - (_QWORD)v16) & 0x7FFFFFFF8) != 0x10)
    goto LABEL_17;
  v17 = *v16;
  v18 = v16[1];
  v19 = *(_QWORD **)(v17 + 88);
  v20 = *(_QWORD **)(v17 + 96);
  if (v19 != v20)
  {
    while (*v19 != v18)
    {
      if (++v19 == v20)
      {
        v19 = *(_QWORD **)(v17 + 96);
        break;
      }
    }
  }
  if (v19 == v20)
  {
    v22 = *(_QWORD **)(v18 + 88);
    v21 = *(_QWORD **)(v18 + 96);
    if (v22 != v21)
    {
      while (*v22 != v17)
      {
        if (++v22 == v21)
        {
          v22 = v21;
          break;
        }
      }
    }
    if (v22 == v21)
    {
LABEL_17:
      v15 = (uint64_t *)&llvm::ProfileLikelyProb;
      goto LABEL_18;
    }
  }
  v41 = 2 * dword_1ED82F640;
  v23 = 150;
  v24 = 74;
LABEL_19:
  BlockFreq = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), (const llvm::MachineBasicBlock *)a2);
  LODWORD(v44[0]) = a5;
  v26 = llvm::BranchProbability::scale((llvm::BranchProbability *)v44, BlockFreq);
  v27 = (uint64_t *)*((_QWORD *)a3 + 8);
  v28 = (uint64_t *)*((_QWORD *)a3 + 9);
  if (v27 != v28)
  {
    v29 = (v24 | ((unint64_t)v41 << 31)) / v23;
    v40 = v26;
    v42 = a1;
    v30 = a1 + 920;
    v39 = v29;
    v38 = 0x80000000 - v29;
    do
    {
      v43 = (const llvm::MachineBasicBlock *)*v27;
      v31 = v43;
      v32 = *sub_1C5138C30(v30, (uint64_t *)&v43);
      if (v31 == a3 || v32 == a4)
        goto LABEL_29;
      if (a7)
      {
        if (sub_1C61EAAB0(a7, (uint64_t)v31, v44))
          v34 = v32 == a6;
        else
          v34 = 1;
        if (v34)
          goto LABEL_29;
      }
      else if (v32 == a6)
      {
        goto LABEL_29;
      }
      if (v31 != (const llvm::MachineBasicBlock *)a2
        && v31 == *(const llvm::MachineBasicBlock **)(*(_QWORD *)v32 + 8 * *(unsigned int *)(v32 + 8) - 8))
      {
        v37 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v42 + 576), v31);
        LODWORD(v44[0]) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(v42 + 568), v31, a3);
        v35 = llvm::BranchProbability::scale((llvm::BranchProbability *)v44, v37);
        LODWORD(v44[0]) = v39;
        v36 = llvm::BranchProbability::scale((llvm::BranchProbability *)v44, v35);
        LODWORD(v44[0]) = v38;
        if (v36 >= llvm::BranchProbability::scale((llvm::BranchProbability *)v44, v40))
          return 1;
      }
LABEL_29:
      ++v27;
    }
    while (v27 != v28);
  }
  return 0;
}

BOOL sub_1C513A864(uint64_t a1, const llvm::MachineBasicBlock *a2, llvm::MachineBasicBlock ***a3, int a4, const llvm::MachineBasicBlock ***a5, uint64_t a6)
{
  int EdgeProbability;
  uint64_t BlockFreq;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t EntryFreq;
  unint64_t v17;
  unsigned int v18;
  const llvm::MachineBasicBlock **v19;
  uint64_t v20;
  const llvm::MachineBasicBlock *v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  llvm::MachineBasicBlock **v25;
  llvm::MachineBasicBlock **v26;
  llvm::MachineBasicBlock *v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  const llvm::MachineBasicBlock **v31;
  const llvm::MachineBasicBlock **v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v68;
  unint64_t v69;
  llvm::MachineBasicBlock *v70;
  const llvm::MachineBasicBlock *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  _QWORD v75[6];

  v75[4] = *MEMORY[0x1E0C80C00];
  v71 = 0;
  v73 = v75;
  v74 = 0x400000000;
  v68 = sub_1C513A4B0(a1, (llvm::MachineBasicBlock *)a3, a5, a6, (uint64_t)&v73);
  EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), a2, (const llvm::MachineBasicBlock *)a3);
  BlockFreq = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), a2);
  v13 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), (const llvm::MachineBasicBlock *)a3);
  LODWORD(v72) = EdgeProbability;
  v14 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v72, BlockFreq);
  LODWORD(v72) = a4;
  v15 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v72, BlockFreq);
  EntryFreq = llvm::MachineBlockFrequencyInfo::getEntryFreq(**(llvm::MachineBlockFrequencyInfo ***)(a1 + 576));
  v17 = EntryFreq;
  if ((_DWORD)v74)
  {
    v63 = v13;
    v64 = v14;
    v65 = v15;
    v66 = EntryFreq;
    v18 = 0;
    v19 = (const llvm::MachineBasicBlock **)v73;
    v20 = 8 * v74;
    while (1)
    {
      v21 = *v19;
      v22 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), (const llvm::MachineBasicBlock *)a3, *v19);
      if (v22 > v18)
        v18 = v22;
      if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(*(_QWORD *)(*(_QWORD *)(a1 + 616) + 248), (uint64_t)v21, (uint64_t)a3))
      {
        break;
      }
      ++v19;
      v20 -= 8;
      if (!v20)
      {
        v21 = 0;
        goto LABEL_13;
      }
    }
    v71 = v21;
LABEL_13:
    v26 = a3[8];
    v25 = a3[9];
    if (v26 == v25)
    {
      v69 = 0;
    }
    else
    {
      v69 = 0;
      do
      {
        v27 = *v26;
        v70 = v27;
        v28 = v27 == (llvm::MachineBasicBlock *)a3 || v27 == a2;
        if (!v28
          && (const llvm::MachineBasicBlock ***)*sub_1C5138C30(a1 + 920, (uint64_t *)&v70) != a5
          && (!a6 || sub_1C61EAAB0(a6, (uint64_t)v27, &v72)))
        {
          v62 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(a1 + 576), v27);
          LODWORD(v72) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), v27, (const llvm::MachineBasicBlock *)a3);
          v29 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v72, v62);
          v30 = v69;
          if (v29 > v69)
            v30 = v29;
          v69 = v30;
        }
        ++v26;
      }
      while (v26 != v25);
    }
    if (!v21)
      goto LABEL_55;
    v31 = a3[11];
    v32 = a3[12];
    if (v31 != v32)
    {
      while (*v31 != v21)
      {
        if (++v31 == v32)
        {
          v31 = a3[12];
          break;
        }
      }
    }
    if (v31 == v32)
    {
LABEL_55:
      if (v68 >= v18)
        v46 = v68 - v18;
      else
        v46 = 0;
      if (v63 >= v69)
        v47 = v63 - v69;
      else
        v47 = 0;
      LODWORD(v72) = v46;
      v48 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v72, v63);
      if (v47 >= v69)
        v49 = v69;
      else
        v49 = v47;
      LODWORD(v72) = v18;
      v50 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v72, v49);
      if (__CFADD__(v48, v64))
        v41 = -1;
      else
        v41 = v48 + v64;
      if (__CFADD__(v50, v65))
        v51 = -1;
      else
        v51 = v50 + v65;
      if (v69 <= v47)
        v52 = v47;
      else
        v52 = v69;
      LODWORD(v72) = v46;
      v53 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v72, v52);
      v54 = __CFADD__(v53, v51);
      v55 = v53 + v51;
    }
    else
    {
      v33 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), (const llvm::MachineBasicBlock *)a3, v21);
      v34 = v33;
      if (v68 >= v33)
        v35 = v68 - v33;
      else
        v35 = 0;
      LODWORD(v72) = v33;
      v36 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v72, v63);
      LODWORD(v72) = v35;
      v37 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v72, v63);
      if (v63 >= v69)
        v38 = v63 - v69;
      else
        v38 = 0;
      if (v34 <= v68 >> 1
        || (v39 = v37,
            v40 = sub_1C5138C30(a1 + 920, (uint64_t *)&v71),
            (sub_1C513A5E4(a1, (uint64_t)a3, v21, *v40, v34, (uint64_t)a5, a6) & 1) != 0))
      {
        if (__CFADD__(v36, v64))
          v41 = -1;
        else
          v41 = v36 + v64;
        if (v38 >= v69)
          v42 = v69;
        else
          v42 = v38;
        LODWORD(v72) = v68;
        v43 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v72, v42);
        if (__CFADD__(v43, v65))
          v44 = -1;
        else
          v44 = v43 + v65;
        if (v69 <= v38)
          v45 = v38;
        else
          v45 = v69;
      }
      else
      {
        if (__CFADD__(v39, v64))
          v41 = -1;
        else
          v41 = v39 + v64;
        if (v69 <= v38)
          v56 = v38;
        else
          v56 = v69;
        LODWORD(v72) = v35;
        v57 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v72, v56);
        if (__CFADD__(v57, v65))
          v44 = -1;
        else
          v44 = v57 + v65;
        if (v38 >= v69)
          v45 = v69;
        else
          v45 = v38;
      }
      LODWORD(v72) = v34;
      v58 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v72, v45);
      v54 = __CFADD__(v58, v44);
      v55 = v58 + v44;
    }
    if (v54)
      v55 = -1;
    v54 = v41 >= v55;
    v59 = v41 - v55;
    if (v54)
      v60 = v59;
    else
      v60 = 0;
    LODWORD(v72) = (unint64_t)(((((unint64_t)dword_1ED7FA370 << 31) | 0x30)
                                     * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
    v24 = llvm::BranchProbability::scaleByInverse((llvm::BranchProbability *)&v72, v60);
    v17 = v66;
  }
  else
  {
    if (v14 >= v15)
      v23 = v14 - v15;
    else
      v23 = 0;
    LODWORD(v72) = (unint64_t)(((((unint64_t)dword_1ED7FA370 << 31) | 0x30)
                                     * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
    v24 = llvm::BranchProbability::scaleByInverse((llvm::BranchProbability *)&v72, v23);
  }
  if (v73 != v75)
    free(v73);
  return v24 >= v17;
}

BOOL sub_1C513AD14(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  _QWORD *v14;
  BOOL v15;

  if (*(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24) != ((*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3))
    return 0;
  v4 = sub_1C477672C(a2, a1);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (unsigned int *)(v5 == *(_QWORD *)a2 ? a2 + 20 : a2 + 16);
  if (v4 != (_QWORD *)(v5 + 8 * *v6))
    return 0;
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 96);
  if (v8 == v9)
    return 1;
  v10 = v8 + 8;
  do
  {
    v11 = sub_1C477672C(a2, *(_QWORD *)(v10 - 8));
    v12 = *(_QWORD *)(a2 + 8);
    if (v12 == *(_QWORD *)a2)
      v13 = (unsigned int *)(a2 + 20);
    else
      v13 = (unsigned int *)(a2 + 16);
    v14 = (_QWORD *)(v12 + 8 * *v13);
    v15 = v11 == v14;
    result = v11 != v14;
    v15 = v15 || v10 == v9;
    v10 += 8;
  }
  while (!v15);
  return result;
}

void sub_1C513ADE4(__n128 *a1, unsigned int a2, __n128 a3)
{
  unint64_t v4;
  __n128 *v5;
  const std::nothrow_t *v6;
  unint64_t v7;
  void *v8;
  BOOL v9;
  void *v10;

  v4 = a2;
  v5 = (__n128 *)((char *)a1 + 24 * a2);
  if (a2 < 0x81)
  {
LABEL_5:
    sub_1C513AE9C(a1, v5, v4, 0, 0, a3);
  }
  else
  {
    v6 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v7 = a2;
    while (1)
    {
      v8 = operator new(24 * v7, v6);
      if (v8)
        break;
      v9 = v7 > 1;
      v7 >>= 1;
      if (!v9)
        goto LABEL_5;
    }
    v10 = v8;
    sub_1C513AE9C(a1, v5, v4, (uint64_t)v8, v7, a3);
    operator delete(v10);
  }
}

__n128 sub_1C513AE9C(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  __n128 *v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int8 *v12;
  uint64_t v13;
  __n128 *v14;
  __n128 *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  __n128 *v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  __n128 *v27;
  __n128 *v28;
  unint64_t v29;
  __n128 *v30;
  uint64_t v31;
  __n128 *v32;
  __n128 v33;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = (__n128 *)((char *)a2 - 24);
      if (a2[-2].n128_u64[1] > a1->n128_u64[0])
      {
        v9 = a1[1].n128_u64[0];
        result = *a1;
        v10 = a2[-1].n128_u64[1];
        *a1 = *v8;
        a1[1].n128_u64[0] = v10;
        *v8 = result;
        a2[-1].n128_u64[1] = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v21 = a4;
      v22 = a3 >> 1;
      v23 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      v24 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v25 = sub_1C513B134(a1, v23, v24, a4, result);
        v26 = v21 + 24 * v22;
        result.n128_u64[0] = sub_1C513B134((__n128 *)((char *)v7 + 24 * (a3 >> 1)), a2, a3 - (a3 >> 1), v26, v25).n128_u64[0];
        v27 = (__n128 *)(v21 + 24 * a3);
        v28 = (__n128 *)v26;
        while (v28 != v27)
        {
          if (v28->n128_u64[0] <= *(_QWORD *)v21)
          {
            result = *(__n128 *)v21;
            v7[1].n128_u64[0] = *(_QWORD *)(v21 + 16);
            *v7 = result;
            v21 += 24;
          }
          else
          {
            result = *v28;
            v7[1].n128_u64[0] = v28[1].n128_u64[0];
            *v7 = result;
            v28 = (__n128 *)((char *)v28 + 24);
          }
          v7 = (__n128 *)((char *)v7 + 24);
          if (v21 == v26)
          {
            if (v28 != v27)
            {
              v29 = 0;
              do
              {
                v30 = (__n128 *)((char *)v7 + v29);
                result = *(__n128 *)((char *)v28 + v29);
                v30[1].n128_u64[0] = v28[1].n128_u64[v29 / 8];
                *v30 = result;
                v29 += 24;
              }
              while ((__n128 *)((char *)v28 + v29) != v27);
            }
            return result;
          }
        }
        if (v21 != v26)
        {
          v31 = 0;
          do
          {
            v32 = (__n128 *)((char *)v7 + v31);
            result = *(__n128 *)(v21 + v31);
            v32[1].n128_u64[0] = *(_QWORD *)(v21 + v31 + 16);
            *v32 = result;
            v31 += 24;
          }
          while (v21 + v31 != v26);
        }
      }
      else
      {
        sub_1C513AE9C(a1, v23, v24, a4, a5);
        sub_1C513AE9C((char *)v7 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v21, a5);
        sub_1C513B3A8((char *)v7, (char *)v7 + 24 * (a3 >> 1), (char *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v21, a5);
      }
    }
    else if (a1 != a2)
    {
      v12 = &a1[1].n128_i8[8];
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v13 = 0;
        v14 = a1;
        do
        {
          v15 = (__n128 *)v12;
          v16 = v14[1].n128_u64[1];
          if (v16 > v14->n128_u64[0])
          {
            v33 = v14[2];
            v17 = v13;
            while (1)
            {
              v18 = (char *)a1 + v17;
              *(__n128 *)(v18 + 24) = *(__n128 *)((char *)a1 + v17);
              *((_QWORD *)v18 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v17);
              if (!v17)
                break;
              v17 -= 24;
              if (v16 <= *((_QWORD *)v18 - 3))
              {
                v19 = (uint64_t)&a1[1].n128_i64[1] + v17;
                goto LABEL_15;
              }
            }
            v19 = (uint64_t)a1;
LABEL_15:
            *(_QWORD *)v19 = v16;
            result = v33;
            *(__n128 *)(v19 + 8) = v33;
          }
          v12 = &v15[1].n128_i8[8];
          v13 += 24;
          v14 = v15;
        }
        while (&v15[1].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
  return result;
}

__n128 sub_1C513B134(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 v10;
  unint64_t v11;
  __n128 *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  __n128 *v23;
  unint64_t v24;
  __n128 *v25;

  if (a3)
  {
    v5 = (__n128 *)a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = (__n128 *)((char *)a2 - 24);
      if (a2[-2].n128_u64[1] <= a1->n128_u64[0])
      {
        v19 = *a1;
        *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
        *(__n128 *)a4 = v19;
        result = *v9;
        v11 = a2[-1].n128_u64[1];
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(a4 + 16) = a2[-1].n128_u64[1];
        *(__n128 *)a4 = v10;
        result = *a1;
        v11 = a1[1].n128_u64[0];
      }
      *(_QWORD *)(a4 + 40) = v11;
      *(__n128 *)(a4 + 24) = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v20 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      sub_1C513AE9C(a1, v20, a3 >> 1, a4, a3 >> 1);
      sub_1C513AE9C((char *)v8 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), (char *)v5 + 24 * (a3 >> 1), a3 - (a3 >> 1));
      v21 = (__n128 *)((char *)v8 + 24 * (a3 >> 1));
      while (v21 != a2)
      {
        if (v21->n128_u64[0] <= v8->n128_u64[0])
        {
          result = *v8;
          v5[1].n128_u64[0] = v8[1].n128_u64[0];
          *v5 = result;
          v8 = (__n128 *)((char *)v8 + 24);
        }
        else
        {
          result = *v21;
          v5[1].n128_u64[0] = v21[1].n128_u64[0];
          *v5 = result;
          v21 = (__n128 *)((char *)v21 + 24);
        }
        v5 = (__n128 *)((char *)v5 + 24);
        if (v8 == v20)
        {
          if (v21 != a2)
          {
            v22 = 0;
            do
            {
              v23 = (__n128 *)((char *)v5 + v22);
              result = *(__n128 *)((char *)v21 + v22);
              v23[1].n128_u64[0] = v21[1].n128_u64[v22 / 8];
              *v23 = result;
              v22 += 24;
            }
            while ((__n128 *)((char *)v21 + v22) != a2);
          }
          return result;
        }
      }
      if (v8 != v20)
      {
        v24 = 0;
        do
        {
          v25 = (__n128 *)((char *)v5 + v24);
          result = *(__n128 *)((char *)v8 + v24);
          v25[1].n128_u64[0] = v8[1].n128_u64[v24 / 8];
          *v25 = result;
          v24 += 24;
        }
        while ((__n128 *)((char *)v8 + v24) != v20);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
      v12 = (__n128 *)((char *)a1 + 24);
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v13 = 0;
        v14 = (_QWORD *)a4;
        do
        {
          v15 = v14;
          v16 = *v14;
          v14 += 3;
          v17 = v14;
          if (v12->n128_u64[0] > v16)
          {
            *(_OWORD *)v14 = *(_OWORD *)v15;
            v14[2] = v15[2];
            v17 = (_QWORD *)a4;
            if (v15 != (_QWORD *)a4)
            {
              v18 = v13;
              while (1)
              {
                v17 = (_QWORD *)(a4 + v18);
                if (v12->n128_u64[0] <= *(_QWORD *)(a4 + v18 - 24))
                  break;
                *(_OWORD *)v17 = *(_OWORD *)(a4 + v18 - 24);
                v17[2] = *(_QWORD *)(a4 + v18 - 8);
                v18 -= 24;
                if (!v18)
                {
                  v17 = (_QWORD *)a4;
                  break;
                }
              }
            }
          }
          result = *v12;
          v17[2] = v12[1].n128_u64[0];
          *(__n128 *)v17 = result;
          v12 = (__n128 *)((char *)v12 + 24);
          v13 += 24;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

char *sub_1C513B3A8(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  int64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  char v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  __int128 v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  __int128 v86;
  unint64_t v87;
  char *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  if (a5)
  {
    v7 = a5;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = -a4;
      while (*(_QWORD *)a2 <= *(_QWORD *)&result[v10])
      {
        v10 += 24;
        if (__CFADD__(v11++, 1))
          return result;
      }
      v13 = -v11;
      v14 = &result[v10];
      if (-v11 >= v7)
      {
        if (v11 == -1)
        {
          v85 = &result[v10];
          v105 = *((_QWORD *)v85 + 2);
          v100 = *(_OWORD *)v85;
          v86 = *(_OWORD *)a2;
          *((_QWORD *)v85 + 2) = *((_QWORD *)a2 + 2);
          *(_OWORD *)v85 = v86;
          *((_QWORD *)a2 + 2) = v105;
          *(_OWORD *)a2 = v100;
          return result;
        }
        if (v11 > 0)
          v13 = 1 - v11;
        v24 = v13 >> 1;
        v18 = &result[24 * (v13 >> 1) + v10];
        v17 = a3;
        if (a3 != a2)
        {
          v25 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
          v17 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v17[24 * (v25 >> 1)];
            v29 = *(_QWORD *)v27;
            v28 = v27 + 24;
            v25 += ~(v25 >> 1);
            if (v29 > *(_QWORD *)v18)
              v17 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v16 = 0xAAAAAAAAAAAAAAABLL * ((v17 - a2) >> 3);
      }
      else
      {
        if (v7 >= 0)
          v15 = v7;
        else
          v15 = v7 + 1;
        v16 = v15 >> 1;
        v17 = &a2[24 * (v15 >> 1)];
        v18 = a2;
        if (v14 != a2)
        {
          v19 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result - v10) >> 3);
          v18 = &result[v10];
          do
          {
            v20 = v19 >> 1;
            v21 = &v18[24 * (v19 >> 1)];
            v23 = *(_QWORD *)v21;
            v22 = v21 + 24;
            v19 += ~(v19 >> 1);
            if (*(_QWORD *)v17 > v23)
              v19 = v20;
            else
              v18 = v22;
          }
          while (v19);
        }
        v24 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result - v10) >> 3);
      }
      v30 = v17;
      if (v18 != a2)
      {
        v30 = v18;
        if (a2 != v17)
        {
          if (v18 + 24 == a2)
          {
            v102 = *((_QWORD *)v18 + 2);
            v97 = *(_OWORD *)v18;
            v36 = v17 - a2;
            v92 = a6;
            v94 = a7;
            v37 = a3;
            v38 = &result[v10];
            v90 = v16;
            v39 = v24;
            memmove(v18, a2, v17 - a2);
            v24 = v39;
            v16 = v90;
            a6 = v92;
            v14 = v38;
            a7 = v94;
            a3 = v37;
            v30 = &v18[v36];
            *(_OWORD *)v30 = v97;
            *((_QWORD *)v30 + 2) = v102;
          }
          else if (a2 + 24 == v17)
          {
            v30 = v18 + 24;
            v103 = *((_QWORD *)v17 - 1);
            v98 = *(_OWORD *)(v17 - 24);
            if (v17 - 24 != v18)
            {
              v93 = a6;
              v95 = a7;
              v40 = a3;
              v41 = &result[v10];
              v91 = v16;
              v42 = v24;
              memmove(v18 + 24, v18, v17 - 24 - v18);
              v24 = v42;
              v16 = v91;
              a6 = v93;
              v14 = v41;
              a7 = v95;
              a3 = v40;
            }
            *((_QWORD *)v18 + 2) = v103;
            *(_OWORD *)v18 = v98;
          }
          else
          {
            v31 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v18) >> 3);
            if (v31 == 0xAAAAAAAAAAAAAAABLL * ((v17 - a2) >> 3))
            {
              v32 = 0;
              do
              {
                v33 = &a2[v32];
                v34 = &v18[v32];
                v101 = *(_QWORD *)&v18[v32 + 16];
                v96 = *(_OWORD *)&v18[v32];
                v35 = *(_OWORD *)&a2[v32];
                *((_QWORD *)v34 + 2) = *(_QWORD *)&a2[v32 + 16];
                *(_OWORD *)v34 = v35;
                *((_QWORD *)v33 + 2) = v101;
                *(_OWORD *)v33 = v96;
                if (&v18[v32 + 24] == a2)
                  break;
                v32 += 24;
              }
              while (v33 + 24 != v17);
              v30 = a2;
            }
            else
            {
              v43 = 0xAAAAAAAAAAAAAAABLL * ((v17 - a2) >> 3);
              v44 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v18) >> 3);
              do
              {
                v45 = v44;
                v44 = v43;
                v43 = v45 % v43;
              }
              while (v43);
              if (v44)
              {
                v46 = &v18[24 * v44];
                do
                {
                  v47 = *(_OWORD *)(v46 - 24);
                  v48 = *((_QWORD *)v46 - 1);
                  v46 -= 24;
                  v104 = v48;
                  v99 = v47;
                  v49 = &v46[8 * ((a2 - v18) >> 3)];
                  v50 = v46;
                  do
                  {
                    v51 = v50;
                    v50 = v49;
                    v52 = *(_OWORD *)v49;
                    *((_QWORD *)v51 + 2) = *((_QWORD *)v49 + 2);
                    *(_OWORD *)v51 = v52;
                    v53 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v49) >> 3);
                    v54 = __OFSUB__(v31, v53);
                    v55 = v31 - v53;
                    v75 = (v55 < 0) ^ v54;
                    v49 = &v18[24 * v55];
                    if (v75)
                      v49 = &v50[8 * ((a2 - v18) >> 3)];
                  }
                  while (v49 != v46);
                  *((_QWORD *)v50 + 2) = v104;
                  *(_OWORD *)v50 = v99;
                }
                while (v46 != v18);
              }
              v30 = &v18[8 * ((v17 - a2) >> 3)];
            }
          }
        }
      }
      a4 = -(v24 + v11);
      v56 = v7 - v16;
      if (v24 + v16 >= v7 - (v24 + v16) - v11)
      {
        v61 = v24;
        v62 = -(v24 + v11);
        v63 = v16;
        v64 = v7 - v16;
        v65 = a6;
        v66 = a7;
        v67 = v14;
        sub_1C513B3A8(v30, v17, a3, v62, v64);
        result = v67;
        a7 = v66;
        a6 = v65;
        v17 = v18;
        v56 = v63;
        a4 = v61;
        a3 = v30;
      }
      else
      {
        v57 = v18;
        v58 = a6;
        v59 = a7;
        v60 = a3;
        sub_1C513B3A8(v14, v57, v30, v24, v16);
        a7 = v59;
        a3 = v60;
        a6 = v58;
        result = v30;
      }
      v7 = v56;
      a2 = v17;
      if (!v56)
        return result;
    }
    if (a4 <= v7)
    {
      if (result != a2)
      {
        v79 = 0;
        do
        {
          v80 = &a6[v79];
          v81 = *(_OWORD *)&result[v79];
          *((_QWORD *)v80 + 2) = *(_QWORD *)&result[v79 + 16];
          *(_OWORD *)v80 = v81;
          v79 += 24;
        }
        while (&result[v79] != a2);
        if (v79)
        {
          v82 = a6;
          while (a2 != a3)
          {
            if (*(_QWORD *)a2 <= *(_QWORD *)v82)
            {
              v84 = *(_OWORD *)v82;
              *((_QWORD *)result + 2) = *((_QWORD *)v82 + 2);
              *(_OWORD *)result = v84;
              v82 += 24;
            }
            else
            {
              v83 = *(_OWORD *)a2;
              *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
              *(_OWORD *)result = v83;
              a2 += 24;
            }
            result += 24;
            if (&a6[v79] == v82)
              return result;
          }
          return (char *)memmove(result, v82, a6 - v82 + v79);
        }
      }
    }
    else if (a2 != a3)
    {
      v68 = 0;
      do
      {
        v69 = &a6[v68];
        v70 = *(_OWORD *)&a2[v68];
        *((_QWORD *)v69 + 2) = *(_QWORD *)&a2[v68 + 16];
        *(_OWORD *)v69 = v70;
        v68 += 24;
      }
      while (&a2[v68] != a3);
      if (v68)
      {
        v71 = &a6[v68];
        v72 = a3 - 24;
        while (a2 != result)
        {
          v73 = *((_QWORD *)v71 - 3);
          v74 = *((_QWORD *)a2 - 3);
          v75 = v73 > v74;
          if (v73 <= v74)
            v76 = v71 - 24;
          else
            v76 = a2 - 24;
          if (v75)
            a2 -= 24;
          v77 = *(_OWORD *)v76;
          v78 = *((_QWORD *)v76 + 2);
          if (!v75)
            v71 -= 24;
          *((_QWORD *)v72 + 2) = v78;
          *(_OWORD *)v72 = v77;
          v72 -= 24;
          if (v71 == a6)
            return result;
        }
        if (v71 != a6)
        {
          v87 = 0;
          do
          {
            v88 = &v72[v87];
            v89 = *(_OWORD *)&v71[v87 - 24];
            *((_QWORD *)v88 + 2) = *(_QWORD *)&v71[v87 - 8];
            *(_OWORD *)v88 = v89;
            v87 -= 24;
          }
          while (&v71[v87] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C513B9A4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

void sub_1C513BA20(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  __n128 *v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unint64_t v10;
  char *v13;
  unint64_t v14;
  __n128 *v15;
  unint64_t v16;
  __n128 *v17;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  unsigned __int32 v21;
  unsigned __int32 v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __n128 v27;
  __n128 *v28;
  char *v29;
  __n128 *v30;
  unsigned __int32 v31;
  BOOL v32;
  __n128 *v33;
  unint64_t v34;
  uint64_t v35;
  __n128 *v36;
  __n128 *v37;
  unint64_t v38;
  __n128 *v39;
  __n128 *v40;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2[-1].n128_u32[0];
      v9 = a1->n128_u32[0];
      if (v8 > a1->n128_u32[0])
      {
        a1->n128_u32[0] = v8;
        a2[-1].n128_u32[0] = v9;
        v10 = a1->n128_u64[1];
        a1->n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_u64[1] = v10;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v17 = a1 + 1;
        if (&a1[1] != a2)
        {
          v18 = 0;
          v19 = a1;
          do
          {
            v20 = v17;
            v21 = v19[1].n128_u32[0];
            v22 = v19->n128_u32[0];
            if (v21 > v19->n128_u32[0])
            {
              v23 = v19[1].n128_u64[1];
              v24 = v18;
              while (1)
              {
                v25 = (char *)a1 + v24;
                *((_DWORD *)v25 + 4) = v22;
                *((_QWORD *)v25 + 3) = *(unint64_t *)((char *)&a1->n128_u64[1] + v24);
                if (!v24)
                  break;
                v22 = *((_DWORD *)v25 - 4);
                v24 -= 16;
                if (v21 <= v22)
                {
                  v26 = (uint64_t)&a1[1] + v24;
                  goto LABEL_18;
                }
              }
              v26 = (uint64_t)a1;
LABEL_18:
              *(_DWORD *)v26 = v21;
              *(_QWORD *)(v26 + 8) = v23;
            }
            v17 = v20 + 1;
            v18 += 16;
            v19 = v20;
          }
          while (&v20[1] != a2);
        }
      }
    }
    else
    {
      v13 = (char *)a4;
      v14 = a3 >> 1;
      v15 = &a1[a3 >> 1];
      v16 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v27 = sub_1C513BC7C(a1, v15, v16, a4, a6);
        v28 = (__n128 *)&v13[16 * v14];
        sub_1C513BC7C(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v28, v27);
        v29 = &v13[16 * a3];
        v30 = v28;
        while (v30 != (__n128 *)v29)
        {
          v31 = v30->n128_u32[0];
          v32 = v30->n128_u32[0] > *(_DWORD *)v13;
          if (v30->n128_u32[0] > *(_DWORD *)v13)
          {
            v33 = v30;
          }
          else
          {
            v31 = *(_DWORD *)v13;
            v33 = (__n128 *)v13;
          }
          if (v30->n128_u32[0] > *(_DWORD *)v13)
            ++v30;
          v34 = v33->n128_u64[1];
          if (!v32)
            v13 += 16;
          v7->n128_u32[0] = v31;
          v7->n128_u64[1] = v34;
          ++v7;
          if (v13 == (char *)v28)
          {
            if (v30 != (__n128 *)v29)
            {
              v35 = 0;
              do
              {
                v36 = &v30[v35];
                v37 = &v7[v35];
                v37->n128_u32[0] = v30[v35].n128_u32[0];
                v37->n128_u64[1] = v30[v35++].n128_u64[1];
              }
              while (&v36[1] != (__n128 *)v29);
            }
            return;
          }
        }
        if (v13 != (char *)v28)
        {
          v38 = 0;
          do
          {
            v39 = &v7[v38 / 0x10];
            v40 = (__n128 *)&v13[v38];
            v39->n128_u32[0] = *(_DWORD *)&v13[v38];
            v39->n128_u64[1] = *(_QWORD *)&v13[v38 + 8];
            v38 += 16;
          }
          while (&v40[1] != v28);
        }
      }
      else
      {
        sub_1C513BA20(a1, v15, v16, a4, a5);
        sub_1C513BA20(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v13, a5);
        sub_1C513BE84((char *)v7, (char *)&v7[a3 >> 1], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v13, a5);
      }
    }
  }
}

__n128 sub_1C513BC7C(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  unsigned __int32 v15;
  __n128 *v16;
  uint64_t v17;
  unsigned __int32 v18;
  __n128 *v19;
  __n128 *v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 1;
      if (a2[-1].n128_u32[0] <= a1->n128_u32[0])
      {
        *a4 = *a1;
        result = *v9;
      }
      else
      {
        *a4 = *v9;
        result = *a1;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      v19 = &a1[a3 >> 1];
      sub_1C513BA20(a1, v19, a3 >> 1, a4, a3 >> 1);
      sub_1C513BA20(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      v20 = &v8[a3 >> 1];
      while (v20 != a2)
      {
        if (v20->n128_u32[0] <= v8->n128_u32[0])
        {
          v22 = *v8++;
          result = v22;
        }
        else
        {
          v21 = *v20++;
          result = v21;
        }
        *v5++ = result;
        if (v8 == v19)
        {
          if (v20 != a2)
          {
            v23 = 0;
            do
            {
              result = v20[v23];
              v5[v23++] = result;
            }
            while (&v20[v23] != a2);
          }
          return result;
        }
      }
      if (v8 != v19)
      {
        v24 = 0;
        do
        {
          result = v8[v24];
          v5[v24++] = result;
        }
        while (&v8[v24] != v19);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a4 = *a1;
      v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        v11 = 0;
        v12 = a4;
        v13 = a4;
        do
        {
          v14 = v10;
          v15 = v13->n128_u32[0];
          ++v13;
          if (v8[1].n128_u32[0] <= v15)
          {
            result = *v10;
            *v13 = *v10;
          }
          else
          {
            result = *v12;
            *v13 = *v12;
            v16 = a4;
            if (v12 != a4)
            {
              v17 = v11;
              while (1)
              {
                v16 = (__n128 *)((char *)a4 + v17);
                v18 = *(unsigned __int32 *)((char *)a4[-1].n128_u32 + v17);
                if (v14->n128_u32[0] <= v18)
                  break;
                v16->n128_u32[0] = v18;
                v16->n128_u64[1] = v16[-1].n128_u64[1];
                v17 -= 16;
                if (!v17)
                {
                  v16 = a4;
                  break;
                }
              }
            }
            v16->n128_u32[0] = v14->n128_u32[0];
            v16->n128_u64[1] = v8[1].n128_u64[1];
          }
          v10 = v14 + 1;
          v11 += 16;
          v12 = v13;
          v8 = v14;
        }
        while (&v14[1] != a2);
      }
    }
  }
  return result;
}

char *sub_1C513BE84(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  unsigned int v30;
  char *v31;
  int v32;
  uint64_t v33;
  char *i;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  BOOL v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v9 = 0;
      v10 = *(_DWORD *)a2;
      v11 = -a4;
      while (1)
      {
        v12 = *(_DWORD *)&result[v9];
        if (v10 > v12)
          break;
        v9 += 16;
        if (__CFADD__(v11++, 1))
          return result;
      }
      v14 = &result[v9];
      if (-v11 >= a5)
      {
        if (v11 == -1)
        {
          v63 = &result[v9];
          *(_DWORD *)v63 = v10;
          *(_DWORD *)a2 = v12;
          v64 = *(_QWORD *)&result[v9 + 8];
          *((_QWORD *)v63 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v64;
          return result;
        }
        if (v11 <= 0)
          v25 = -v11;
        else
          v25 = 1 - v11;
        v24 = v25 >> 1;
        v18 = &result[16 * (v25 >> 1) + v9];
        v17 = a3;
        if (a3 != a2)
        {
          v26 = (a3 - a2) >> 4;
          v17 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v17[16 * (v26 >> 1)];
            v30 = *(_DWORD *)v28;
            v29 = v28 + 16;
            v26 += ~(v26 >> 1);
            if (v30 > *(_DWORD *)v18)
              v17 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        v16 = (v17 - a2) >> 4;
      }
      else
      {
        if (a5 >= 0)
          v15 = a5;
        else
          v15 = a5 + 1;
        v16 = v15 >> 1;
        v17 = &a2[16 * (v15 >> 1)];
        v18 = a2;
        if (v14 != a2)
        {
          v19 = (a2 - result - v9) >> 4;
          v18 = &result[v9];
          do
          {
            v20 = v19 >> 1;
            v21 = (unsigned int *)&v18[16 * (v19 >> 1)];
            v23 = *v21;
            v22 = (char *)(v21 + 4);
            v19 += ~(v19 >> 1);
            if (*(_DWORD *)v17 > v23)
              v19 = v20;
            else
              v18 = v22;
          }
          while (v19);
        }
        v24 = (v18 - result - v9) >> 4;
      }
      v31 = v17;
      if (v18 != a2)
      {
        v31 = v18;
        if (a2 != v17)
        {
          v32 = *(_DWORD *)v18;
          *(_DWORD *)v18 = v10;
          *(_DWORD *)a2 = v32;
          v33 = *((_QWORD *)v18 + 1);
          *((_QWORD *)v18 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v33;
          v31 = v18 + 16;
          for (i = a2 + 16; i != v17; i += 16)
          {
            if (v31 == a2)
              a2 = i;
            v35 = *(_DWORD *)v31;
            *(_DWORD *)v31 = *(_DWORD *)i;
            *(_DWORD *)i = v35;
            v36 = *((_QWORD *)v31 + 1);
            *((_QWORD *)v31 + 1) = *((_QWORD *)i + 1);
            *((_QWORD *)i + 1) = v36;
            v31 += 16;
          }
          if (v31 == a2)
          {
            v31 = a2;
          }
          else
          {
            v37 = v31;
            v38 = a2;
            do
            {
              while (1)
              {
                v39 = *(_DWORD *)v37;
                *(_DWORD *)v37 = *(_DWORD *)a2;
                *(_DWORD *)a2 = v39;
                v40 = *((_QWORD *)v37 + 1);
                *((_QWORD *)v37 + 1) = *((_QWORD *)a2 + 1);
                *((_QWORD *)a2 + 1) = v40;
                v37 += 16;
                a2 += 16;
                if (a2 == v17)
                  break;
                if (v37 == v38)
                  v38 = a2;
              }
              a2 = v38;
            }
            while (v37 != v38);
          }
        }
      }
      a4 = -(v24 + v11);
      v41 = a5 - v16;
      if (v24 + v16 >= a5 - (v24 + v16) - v11)
      {
        v46 = v17;
        v47 = a6;
        sub_1C513BE84(v31, v46, a3, a4, a5 - v16, a6, a7);
        a6 = v47;
        v17 = v18;
        v41 = v16;
        a4 = v24;
        a3 = v31;
      }
      else
      {
        v42 = v14;
        v43 = a3;
        v44 = v16;
        v45 = a6;
        sub_1C513BE84(v42, v18, v31, v24, v44, a6, a7);
        a3 = v43;
        a6 = v45;
        v14 = v31;
      }
      a5 = v41;
      result = v14;
      a2 = v17;
      if (!v41)
        return result;
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        v56 = 0;
        do
        {
          *(_OWORD *)&a6[v56] = *(_OWORD *)&result[v56];
          v56 += 16;
        }
        while (&result[v56] != a2);
        if (v56)
        {
          v57 = &a6[v56];
          v58 = (uint64_t)&a6[v56 - 16];
          while (a2 != a3)
          {
            v59 = *(_DWORD *)a2;
            v60 = *(_DWORD *)a2 > *(_DWORD *)a6;
            if (*(_DWORD *)a2 > *(_DWORD *)a6)
            {
              v61 = a2;
            }
            else
            {
              v59 = *(_DWORD *)a6;
              v61 = a6;
            }
            if (*(_DWORD *)a2 > *(_DWORD *)a6)
              a2 += 16;
            v62 = *((_QWORD *)v61 + 1);
            if (!v60)
              a6 += 16;
            *(_DWORD *)result = v59;
            *((_QWORD *)result + 1) = v62;
            result += 16;
            if (v57 == a6)
              return result;
          }
          if (v57 != a6)
          {
            v67 = 0;
            do
            {
              v68 = &result[v67];
              v69 = &a6[v67];
              *(_DWORD *)v68 = *(_DWORD *)&a6[v67];
              *((_QWORD *)v68 + 1) = *(_QWORD *)&a6[v67 + 8];
              v67 += 16;
            }
            while ((char *)v58 != v69);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      v48 = 0;
      do
      {
        *(_OWORD *)&a6[v48] = *(_OWORD *)&a2[v48];
        v48 += 16;
      }
      while (&a2[v48] != a3);
      if (v48)
      {
        v49 = &a6[v48];
        v50 = a3 - 8;
        while (a2 != result)
        {
          v51 = *((_DWORD *)a2 - 4);
          v52 = *((_DWORD *)v49 - 4);
          v53 = v52 > v51;
          if (v52 > v51)
          {
            v54 = a2;
          }
          else
          {
            v51 = *((_DWORD *)v49 - 4);
            v54 = v49;
          }
          if (v53)
            a2 -= 16;
          v55 = *((_QWORD *)v54 - 1);
          if (!v53)
            v49 -= 16;
          *((_DWORD *)v50 - 2) = v51;
          *(_QWORD *)v50 = v55;
          v50 -= 16;
          if (v49 == a6)
            return result;
        }
        if (v49 != a6)
        {
          v65 = 0;
          do
          {
            v66 = &v50[v65];
            *((_DWORD *)v66 - 2) = *(_DWORD *)&v49[v65 - 16];
            *(_QWORD *)v66 = *(_QWORD *)&v49[v65 - 8];
            v65 -= 16;
          }
          while (&v49[v65] != a6);
        }
      }
    }
  }
  return result;
}

BOOL sub_1C513C2C8(uint64_t a1, char **this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  _BYTE *v7;
  int isSimpleBB;
  _BOOL8 v14;
  llvm::TailDuplicator *v15;
  llvm::MachineBasicBlock *v16;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  const llvm::MachineBasicBlock **v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const llvm::MachineBasicBlock **v31;
  const llvm::MachineBasicBlock *v32;
  unint64_t v33;
  const llvm::MachineBasicBlock **v34;
  unint64_t v35;
  const std::nothrow_t *v36;
  unint64_t v37;
  const llvm::MachineBasicBlock **v38;
  BOOL v39;
  void **v40;
  const llvm::MachineBasicBlock **v41;
  const llvm::MachineBasicBlock **v42;
  unint64_t v43;
  const std::nothrow_t *v44;
  unint64_t v45;
  const llvm::MachineBasicBlock **v46;
  const llvm::MachineBasicBlock **v47;
  llvm::MachineBasicBlock *v48;
  llvm::MachineBasicBlock **v49;
  llvm::MachineBasicBlock *v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  llvm::MachineBasicBlock *v56;
  uint64_t v57;
  const llvm::MachineBasicBlock **v58;
  const llvm::MachineBasicBlock **v59;
  unsigned int v60;
  const llvm::MachineBasicBlock *v61;
  const llvm::MachineBasicBlock ***v62;
  unsigned int EdgeProbability;
  BOOL v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  unsigned int v70;
  unint64_t v71;
  int v72;
  void **v73;
  void **v74;
  uint64_t v75;
  void *v76;
  uint64_t *v77;
  uint64_t v78;
  const llvm::MachineBasicBlock ***v79;
  const llvm::MachineBasicBlock ***v80;
  const llvm::MachineBasicBlock **v81;
  uint64_t v82;
  BOOL v84;
  uint64_t v85;
  _BYTE *v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  llvm::MachineBasicBlock **v91;
  const llvm::MachineBasicBlock **v92;
  const llvm::MachineBasicBlock **v93;
  const llvm::MachineBasicBlock **v94;
  uint64_t v95;
  _QWORD v96[2];
  _QWORD v97[4];
  char v98;
  uint64_t v99;
  llvm::MachineBasicBlock *v100;
  const llvm::MachineBasicBlock **v101[2];
  const llvm::MachineBasicBlock *v102;
  llvm::MachineBasicBlock *v103;
  void *v104;
  uint64_t v105;
  _BYTE v106[64];
  void *v107;
  uint64_t v108;
  _BYTE v109[64];
  void *v110;
  uint64_t v111;
  _BYTE v112[64];
  const llvm::MachineBasicBlock **v113;
  uint64_t v114;
  _BYTE v115[64];
  uint64_t v116;

  v7 = a7;
  v116 = *MEMORY[0x1E0C80C00];
  v99 = a5;
  *a7 = 0;
  isSimpleBB = llvm::TailDuplicator::isSimpleBB((llvm::TailDuplicator *)this, (llvm::MachineBasicBlock *)this);
  v14 = 0;
  if (((this[12] - this[11]) & 0x7FFFFFFF8) == 8)
    return v14;
  v15 = (llvm::TailDuplicator *)(a1 + 632);
  if (!llvm::TailDuplicator::shouldTailDuplicate((llvm::TailDuplicator *)(a1 + 632), isSimpleBB, (llvm::MachineBasicBlock *)this))return 0;
  v98 = 0;
  v97[0] = &v98;
  v97[1] = a1;
  v97[2] = a6;
  v97[3] = &v99;
  v96[0] = sub_1C513CAF0;
  v96[1] = v97;
  v107 = v109;
  v108 = 0x800000000;
  v87 = llvm::TailDuplicator::isSimpleBB((llvm::TailDuplicator *)this, v16);
  v104 = v106;
  v105 = 0x800000000;
  llvm::Function::getEntryCount(**(uint64_t *****)(a1 + 560), 0, (uint64_t)&v113);
  if (!v115[0])
  {
    v40 = 0;
LABEL_91:
    llvm::TailDuplicator::tailDuplicateAndUpdate((uint64_t)v15, v87, (uint64_t)this, a3, (uint64_t)&v107, (uint64_t)v96, (uint64_t)v40);
    *v7 = 0;
    if ((_DWORD)v108)
    {
      v73 = (void **)v107;
      v74 = (void **)((char *)v107 + 8 * v108);
      v75 = a1 + 920;
      do
      {
        v110 = *v73;
        v76 = v110;
        v77 = sub_1C5138C30(v75, (uint64_t *)&v110);
        if (v76 == (void *)a3)
        {
          *v7 = 1;
        }
        else
        {
          v78 = *v77;
          if (v99)
          {
            if (sub_1C61EAAB0(v99, (uint64_t)v76, &v113))
              v84 = v78 == a4;
            else
              v84 = 1;
            if (!v84)
            {
LABEL_96:
              v79 = (const llvm::MachineBasicBlock ***)*((_QWORD *)v76 + 11);
              v80 = (const llvm::MachineBasicBlock ***)*((_QWORD *)v76 + 12);
              while (v79 != v80)
              {
                v81 = *v79;
                v101[0] = *v79;
                if (!v99 || sub_1C61EAAB0(v99, (uint64_t)v81, &v113))
                {
                  v82 = *sub_1C5138C30(v75, (uint64_t *)v101);
                  if (v82 != a4 && v82 != v78)
                    ++*(_DWORD *)(v82 + 56);
                }
                ++v79;
              }
            }
          }
          else if (v78 != a4)
          {
            goto LABEL_96;
          }
        }
        ++v73;
      }
      while (v73 != v74);
    }
    v14 = v98 != 0;
    goto LABEL_118;
  }
  v95 = v99;
  v100 = (llvm::MachineBasicBlock *)this;
  v88 = sub_1C513CDF8(*(_QWORD *)(a1 + 808), (uint64_t)this);
  v18 = this[8];
  v19 = this[9];
  v113 = (const llvm::MachineBasicBlock **)v115;
  v114 = 0x800000000;
  v20 = v19 - v18;
  if ((unint64_t)(v19 - v18) >= 0x41)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)v115, v20 >> 3, 8);
    v21 = v114;
    v22 = v114;
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  if (v18 != v19)
  {
    v23 = (char *)&v113[v21];
    do
    {
      v24 = *(_QWORD *)v18;
      v18 += 8;
      *(_QWORD *)v23 = v24;
      v23 += 8;
    }
    while (v18 != v19);
  }
  LODWORD(v114) = v22 + ((unint64_t)v20 >> 3);
  v25 = (char *)*((_QWORD *)v100 + 11);
  v26 = (char *)*((_QWORD *)v100 + 12);
  v27 = (const llvm::MachineBasicBlock **)v112;
  v110 = v112;
  v111 = 0x800000000;
  v28 = v26 - v25;
  if ((unint64_t)(v26 - v25) >= 0x41)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, (uint64_t)v112, v28 >> 3, 8);
    v29 = v111;
    v27 = (const llvm::MachineBasicBlock **)v110;
    v30 = v111;
  }
  else
  {
    v29 = 0;
    v30 = 0;
  }
  v85 = a3;
  v86 = v7;
  if (v25 != v26)
  {
    v31 = &v27[v29];
    do
    {
      v32 = *(const llvm::MachineBasicBlock **)v25;
      v25 += 8;
      *v31++ = v32;
    }
    while (v25 != v26);
    v27 = (const llvm::MachineBasicBlock **)v110;
  }
  v33 = v30 + ((unint64_t)v28 >> 3);
  LODWORD(v111) = v33;
  v34 = v27;
  v92 = &v27[v33];
  v101[0] = (const llvm::MachineBasicBlock **)a1;
  v101[1] = &v100;
  v35 = v88;
  if (v33 < 0x81)
  {
LABEL_21:
    sub_1C513CE98(v34, v92, v101, v33, 0, 0);
  }
  else
  {
    v36 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v37 = v33;
    while (1)
    {
      v38 = (const llvm::MachineBasicBlock **)operator new(8 * v37, v36);
      if (v38)
        break;
      v39 = v37 > 1;
      v37 >>= 1;
      if (!v39)
        goto LABEL_21;
    }
    v41 = v38;
    sub_1C513CE98(v34, v92, v101, v33, v38, v37);
    operator delete(v41);
  }
  v42 = v113;
  v43 = v114;
  v93 = &v113[v114];
  v101[0] = (const llvm::MachineBasicBlock **)a1;
  if (v114 < 0x81)
  {
LABEL_28:
    sub_1C513D998(v42, v93, (uint64_t *)v101, v43, 0, 0);
  }
  else
  {
    v44 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v45 = v114;
    while (1)
    {
      v46 = (const llvm::MachineBasicBlock **)operator new(8 * v45, v44);
      if (v46)
        break;
      v39 = v45 > 1;
      v45 >>= 1;
      if (!v39)
        goto LABEL_28;
    }
    v47 = v46;
    sub_1C513D998(v42, v93, (uint64_t *)v101, v43, v46, v45);
    operator delete(v47);
  }
  v94 = (const llvm::MachineBasicBlock **)v110;
  if ((_DWORD)v111)
    v89 = 0x80000000
        - llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), v100, *(const llvm::MachineBasicBlock **)v110);
  else
    v89 = 0;
  if ((_DWORD)v114)
  {
    v48 = 0;
    v49 = v113;
    v90 = a1 + 920;
    v91 = &v113[v114];
    do
    {
      v50 = *v49;
      v51 = sub_1C513CE68(*(llvm::MBFIWrapper **)(a1 + 576), *(_BYTE *)(a1 + 816), *v49);
      if ((llvm::TailDuplicator::canTailDuplicate(v15, v100, v50) & 1) != 0)
      {
        LODWORD(v101[0]) = v89;
        v52 = llvm::BranchProbability::scale((llvm::BranchProbability *)v101, (uint64_t)v51);
        if (__CFADD__(v52, v51))
          v53 = -1;
        else
          v53 = (unint64_t)v51 + v52;
        if (v94 == (const llvm::MachineBasicBlock **)((char *)v110 + 8 * v111))
        {
          if ((_DWORD)v111)
            v55 = v51;
          else
            v55 = 0;
        }
        else
        {
          LODWORD(v101[0]) = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), v100, *v94);
          v54 = llvm::BranchProbability::scale((llvm::BranchProbability *)v101, (uint64_t)v51);
          v55 = (uint64_t *)((char *)v51 - v54);
          if ((unint64_t)v51 < v54)
            v55 = 0;
        }
        v64 = v53 >= (unint64_t)v55;
        v65 = v53 - (_QWORD)v55;
        if (!v64)
          v65 = 0;
        if (v65 > v35)
        {
          v66 = v105;
          if (v105 >= (unint64_t)HIDWORD(v105))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)v106, v105 + 1, 8);
            v66 = v105;
          }
          *((_QWORD *)v104 + v66) = v50;
          LODWORD(v105) = v105 + 1;
          v94 += v94 != (const llvm::MachineBasicBlock **)((char *)v110 + 8 * v111);
        }
      }
      else if (!v48)
      {
        v56 = v100;
        v103 = v50;
        if (v100 == v50 || v95 && !sub_1C61EAAB0(v95, (uint64_t)v50, v101))
          goto LABEL_76;
        v57 = *sub_1C5138C30(v90, (uint64_t *)&v103);
        if (v57)
        {
          if (v50 != *(llvm::MachineBasicBlock **)(*(_QWORD *)v57 + 8 * *(unsigned int *)(v57 + 8) - 8))
            goto LABEL_76;
        }
        v59 = (const llvm::MachineBasicBlock **)*((_QWORD *)v50 + 11);
        v58 = (const llvm::MachineBasicBlock **)*((_QWORD *)v50 + 12);
        if (v59 == v58)
        {
          v60 = 0;
        }
        else
        {
          v60 = 0;
          do
          {
            v61 = *v59;
            v102 = v61;
            if (v61 != v56 && (!v95 || sub_1C61EAAB0(v95, (uint64_t)v61, v101)))
            {
              v62 = (const llvm::MachineBasicBlock ***)*sub_1C5138C30(v90, (uint64_t *)&v102);
              if (!v62 || v61 == **v62)
              {
                EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), v50, v61);
                if (EdgeProbability > v60)
                  v60 = EdgeProbability;
              }
            }
            ++v59;
          }
          while (v59 != v58);
        }
        v67 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 568), v50, v56);
        v15 = (llvm::TailDuplicator *)(a1 + 632);
        if (v67 <= v60)
          goto LABEL_76;
        v68 = v67;
        v69 = sub_1C513CE68(*(llvm::MBFIWrapper **)(a1 + 576), *(_BYTE *)(a1 + 816), v50);
        v70 = v68 - v60;
        if (v68 < v60)
          v70 = 0;
        LODWORD(v101[0]) = v70;
        v71 = llvm::BranchProbability::scale((llvm::BranchProbability *)v101, (uint64_t)v69);
        if (v71 <= sub_1C513CDF8(*(_QWORD *)(a1 + 808), (uint64_t)v56))
        {
LABEL_76:
          v48 = 0;
        }
        else
        {
          v94 += v94 != (const llvm::MachineBasicBlock **)((char *)v110 + 8 * v111);
          v48 = v50;
        }
        v35 = v88;
      }
      ++v49;
    }
    while (v49 != v91);
    if (!v48)
    {
      v72 = v105;
      if ((_DWORD)v105)
      {
        if (v105 < v114)
        {
          *(_QWORD *)v104 = *((_QWORD *)v104 + v105 - 1);
          LODWORD(v105) = v72 - 1;
        }
      }
    }
  }
  if (v110 != v112)
    free(v110);
  a3 = v85;
  v7 = v86;
  if (v113 != (const llvm::MachineBasicBlock **)v115)
    free(v113);
  if ((_DWORD)v105)
  {
    if (v105 >= (unint64_t)((unint64_t)(this[9] - this[8]) >> 3))
      v40 = 0;
    else
      v40 = &v104;
    goto LABEL_91;
  }
  v14 = 0;
LABEL_118:
  if (v104 != v106)
    free(v104);
  if (v107 != v109)
    free(v107);
  return v14;
}

void sub_1C513CAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL4 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  size_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v27 = a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = 1;
  **(_BYTE **)a1 = 1;
  if (sub_1C49F21C0(*(_QWORD *)(v4 + 920), *(_DWORD *)(v4 + 936), a2, &v28))
  {
    v6 = sub_1C5138C30(v4 + 920, &v27);
    v7 = *v6;
    v5 = *(_DWORD *)(*v6 + 56) == 0;
    v8 = *(unsigned int *)(*v6 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)v7;
      v10 = 8 * v8 - 8;
      v11 = *(uint64_t **)v7;
      while (1)
      {
        v12 = *v11++;
        if (v12 == a2)
          break;
        v10 -= 8;
        v9 = v11;
        if (v10 == -8)
          goto LABEL_10;
      }
      if (v10)
      {
        memmove(v9, v9 + 1, v10);
        LODWORD(v8) = *(_DWORD *)(v7 + 8);
      }
      *(_DWORD *)(v7 + 8) = v8 - 1;
    }
LABEL_10:
    v28 = 0;
    if (sub_1C49F21C0(*(_QWORD *)(v4 + 920), *(_DWORD *)(v4 + 936), a2, &v28))
    {
      *v28 = -8192;
      *(int32x2_t *)(v4 + 928) = vadd_s32(*(int32x2_t *)(v4 + 928), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  v13 = *(_QWORD **)(a1 + 16);
  if (*v13 == a2)
  {
    *v13 = *(_QWORD *)(a2 + 8);
    if (!v5)
      goto LABEL_37;
  }
  else if (!v5)
  {
    goto LABEL_37;
  }
  v14 = (_QWORD *)(v4 + 248);
  if (*(_BYTE *)(a2 + 184))
  {
    v15 = *(unsigned int *)(v4 + 400);
    v16 = (_DWORD *)(v4 + 256);
    v17 = *(unsigned int *)(v4 + 256);
    if (v17 < v15)
    {
      if (*(_DWORD *)(v4 + 260) < v15)
      {
        *(_DWORD *)(v4 + 256) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 248, v4 + 264, v15, 8);
      }
      else if ((_DWORD)v17)
      {
        v26 = *(unsigned int *)(v4 + 256);
        memmove(*(void **)(v4 + 248), *(const void **)(v4 + 392), 8 * v17);
        v18 = v26;
LABEL_21:
        v19 = *(unsigned int *)(v4 + 400);
        if (v18 != v19)
          memcpy((void *)(*(_QWORD *)(v4 + 248) + 8 * v18), (const void *)(*(_QWORD *)(v4 + 392) + 8 * v18), 8 * v19 - 8 * v18);
        goto LABEL_23;
      }
      v18 = 0;
      goto LABEL_21;
    }
    if ((_DWORD)v15)
    {
      memmove(*(void **)(v4 + 248), *(const void **)(v4 + 392), 8 * v15);
LABEL_23:
      v20 = (_QWORD *)*v14;
      v21 = *v14 + 8 * v15;
      goto LABEL_25;
    }
    v20 = (_QWORD *)*v14;
    v21 = *v14 + 8 * v15;
    v22 = (_QWORD *)*v14;
    v15 = 0;
  }
  else
  {
    v16 = (_DWORD *)(v4 + 256);
    v15 = *(unsigned int *)(v4 + 256);
    v20 = *(_QWORD **)(v4 + 248);
    v21 = (uint64_t)&v20[v15];
    if ((_DWORD)v15)
    {
LABEL_25:
      v22 = v20;
      while (*v22 != a2)
      {
        if (++v22 == (_QWORD *)v21)
        {
          v22 = (_QWORD *)v21;
          goto LABEL_30;
        }
      }
      goto LABEL_30;
    }
    v15 = 0;
    v22 = *(_QWORD **)(v4 + 248);
  }
LABEL_30:
  if (v15 != v22 - v20)
  {
    v23 = v22 + 1;
    if (v22 + 1 != (_QWORD *)v21)
    {
      do
      {
        if (*v23 != a2)
          *v22++ = *v23;
        ++v23;
      }
      while (v23 != (_QWORD *)v21);
      v20 = (_QWORD *)*v14;
    }
  }
  *v16 = (unint64_t)((char *)v22 - (char *)v20) >> 3;
LABEL_37:
  v24 = **(_QWORD **)(a1 + 24);
  if (v24)
    sub_1C61EAE50(v24, &v27);
  v25 = v27;
  llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeBlock((int32x2_t *)(*(_QWORD *)(v4 + 584) + 248), v27);
  if (v25 == *(_QWORD *)(v4 + 592))
    *(_QWORD *)(v4 + 592) = 0;
}

uint64_t sub_1C513CDA8(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C61EAAB0((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1C513CDF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  if (v2 == a2 + 48)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(v2 + 16);
      if (*(_WORD *)v4 && *(_WORD *)v4 != 69)
        v3 += (*(_DWORD *)(v4 + 8) & 0x10) == 0;
      if ((*(_BYTE *)v2 & 4) == 0)
      {
        while ((*(_WORD *)(v2 + 44) & 8) != 0)
          v2 = *(_QWORD *)(v2 + 8);
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2 + 48);
  }
  return v3 * a1;
}

uint64_t *sub_1C513CE68(llvm::MBFIWrapper *a1, char a2, llvm::MachineBasicBlock *a3)
{
  uint64_t *result;
  char v4;

  if (!a2)
    return (uint64_t *)llvm::MBFIWrapper::getBlockFreq(a1, a3);
  result = llvm::MBFIWrapper::getBlockProfileCount(a1, a3);
  if (!v4)
    return 0;
  return result;
}

const llvm::MachineBasicBlock **sub_1C513CE98(const llvm::MachineBasicBlock **result, const llvm::MachineBasicBlock **a2, const llvm::MachineBasicBlock ***a3, unint64_t a4, const llvm::MachineBasicBlock **a5, uint64_t a6)
{
  const llvm::MachineBasicBlock **v8;
  const llvm::MachineBasicBlock *v9;
  const llvm::MachineBasicBlock **v10;
  unsigned int EdgeProbability;
  const llvm::MachineBasicBlock *v12;
  const llvm::MachineBasicBlock **v14;
  uint64_t v15;
  const llvm::MachineBasicBlock **v16;
  const llvm::MachineBasicBlock *v17;
  const llvm::MachineBasicBlock *v18;
  const llvm::MachineBasicBlock **v19;
  unsigned int v20;
  const llvm::MachineBasicBlock *v21;
  uint64_t v22;
  const llvm::MachineBasicBlock *v23;
  const llvm::MachineBasicBlock **v24;
  unsigned int v25;
  const llvm::MachineBasicBlock **v26;
  const llvm::MachineBasicBlock **v28;
  unint64_t v29;
  const llvm::MachineBasicBlock **v30;
  unint64_t v31;
  const llvm::MachineBasicBlock **v32;
  const llvm::MachineBasicBlock **v33;
  const llvm::MachineBasicBlock **v34;
  const llvm::MachineBasicBlock **v35;
  const llvm::MachineBasicBlock *v36;
  const llvm::MachineBasicBlock **v37;
  unsigned int v38;
  const llvm::MachineBasicBlock **v39;
  uint64_t v40;
  char v41;
  const llvm::MachineBasicBlock **v42;
  uint64_t v43;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = *result;
      v10 = *a3;
      EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability((*a3)[71], *a3[1], *(a2 - 1));
      result = (const llvm::MachineBasicBlock **)llvm::MachineBranchProbabilityInfo::getEdgeProbability(v10[71], *a3[1], v9);
      if (EdgeProbability > result)
      {
        v12 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v12;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v28 = a5;
      v29 = a4 >> 1;
      v30 = &result[a4 >> 1];
      v31 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C513D188(result, v30, a3, v31, a5);
        v32 = &v28[v29];
        result = sub_1C513D188(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v32);
        v33 = &v28[a4];
        v34 = v32;
        while (v34 != v33)
        {
          v35 = v34;
          v36 = *v28;
          v37 = *a3;
          v38 = llvm::MachineBranchProbabilityInfo::getEdgeProbability((*a3)[71], *a3[1], *v34);
          result = (const llvm::MachineBasicBlock **)llvm::MachineBranchProbabilityInfo::getEdgeProbability(v37[71], *a3[1], v36);
          if (v38 > result)
            v39 = v35;
          else
            v39 = v28;
          v28 += v38 <= result;
          v34 = &v35[v38 > result];
          *v8++ = *v39;
          if (v28 == v32)
          {
            if (v34 != v33)
            {
              v40 = 0;
              if (v38 > result)
                v41 = 1;
              else
                v41 = 2;
              v42 = &v35[v41 & 1];
              do
              {
                v8[v40] = v42[v40];
                ++v40;
              }
              while (&v42[v40] != v33);
            }
            return result;
          }
        }
        if (v28 != v32)
        {
          v43 = 0;
          do
          {
            v8[v43] = v28[v43];
            ++v43;
          }
          while (&v28[v43] != v32);
        }
      }
      else
      {
        sub_1C513CE98(result, v30, a3, v31, a5, a6);
        sub_1C513CE98(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v28, a6);
        return sub_1C513D430(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v28, a6);
      }
    }
    else if (result != a2)
    {
      v14 = result + 1;
      if (result + 1 != a2)
      {
        v15 = 0;
        v16 = result;
        do
        {
          v18 = *v16;
          v17 = v16[1];
          v16 = v14;
          v19 = *a3;
          v20 = llvm::MachineBranchProbabilityInfo::getEdgeProbability((*a3)[71], *a3[1], v17);
          result = (const llvm::MachineBasicBlock **)llvm::MachineBranchProbabilityInfo::getEdgeProbability(v19[71], *a3[1], v18);
          if (v20 > result)
          {
            v21 = *v16;
            v22 = v15;
            while (1)
            {
              *(const llvm::MachineBasicBlock **)((char *)v8 + v22 + 8) = *(const llvm::MachineBasicBlock **)((char *)v8 + v22);
              if (!v22)
                break;
              v23 = *(const llvm::MachineBasicBlock **)((char *)v8 + v22 - 8);
              v24 = *a3;
              v25 = llvm::MachineBranchProbabilityInfo::getEdgeProbability((*a3)[71], *a3[1], v21);
              result = (const llvm::MachineBasicBlock **)llvm::MachineBranchProbabilityInfo::getEdgeProbability(v24[71], *a3[1], v23);
              v22 -= 8;
              if (v25 <= result)
              {
                v26 = (const llvm::MachineBasicBlock **)((char *)v8 + v22 + 8);
                goto LABEL_15;
              }
            }
            v26 = v8;
LABEL_15:
            *v26 = v21;
          }
          v14 = v16 + 1;
          v15 += 8;
        }
        while (v16 + 1 != a2);
      }
    }
  }
  return result;
}

const llvm::MachineBasicBlock **sub_1C513D188(const llvm::MachineBasicBlock **result, const llvm::MachineBasicBlock **a2, const llvm::MachineBasicBlock ***a3, unint64_t a4, const llvm::MachineBasicBlock **a5)
{
  const llvm::MachineBasicBlock **v5;
  const llvm::MachineBasicBlock **v7;
  const llvm::MachineBasicBlock **v10;
  const llvm::MachineBasicBlock *v11;
  const llvm::MachineBasicBlock **v12;
  unsigned int EdgeProbability;
  const llvm::MachineBasicBlock **v14;
  const llvm::MachineBasicBlock **v15;
  uint64_t v16;
  const llvm::MachineBasicBlock **v17;
  const llvm::MachineBasicBlock **v18;
  const llvm::MachineBasicBlock *v19;
  const llvm::MachineBasicBlock **v20;
  unsigned int v21;
  const llvm::MachineBasicBlock **v22;
  uint64_t v23;
  const llvm::MachineBasicBlock *v24;
  const llvm::MachineBasicBlock **v25;
  unsigned int v26;
  const llvm::MachineBasicBlock *v27;
  const llvm::MachineBasicBlock **v28;
  const llvm::MachineBasicBlock **v29;
  const llvm::MachineBasicBlock **v30;
  const llvm::MachineBasicBlock *v31;
  const llvm::MachineBasicBlock **v32;
  unsigned int v33;
  const llvm::MachineBasicBlock **v34;
  uint64_t v35;
  const llvm::MachineBasicBlock **v36;
  uint64_t v37;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      v11 = *result;
      v12 = *a3;
      EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability((*a3)[71], *a3[1], *(a2 - 1));
      result = (const llvm::MachineBasicBlock **)llvm::MachineBranchProbabilityInfo::getEdgeProbability(v12[71], *a3[1], v11);
      if (EdgeProbability <= result)
        v14 = v7;
      else
        v14 = v10;
      *v5++ = *v14;
      if (EdgeProbability <= result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v28 = &result[a4 >> 1];
      sub_1C513CE98(result, v28, a3, a4 >> 1, a5, a4 >> 1);
      result = (const llvm::MachineBasicBlock **)sub_1C513CE98(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v29 = &v7[a4 >> 1];
      while (v29 != a2)
      {
        v30 = v29;
        v31 = *v7;
        v32 = *a3;
        v33 = llvm::MachineBranchProbabilityInfo::getEdgeProbability((*a3)[71], *a3[1], *v29);
        result = (const llvm::MachineBasicBlock **)llvm::MachineBranchProbabilityInfo::getEdgeProbability(v32[71], *a3[1], v31);
        if (v33 <= result)
          v34 = v7;
        else
          v34 = v30;
        v29 = &v30[v33 > result];
        v7 += v33 <= result;
        *v5++ = *v34;
        if (v7 == v28)
        {
          if (v29 != a2)
          {
            v35 = 0;
            v36 = &v30[v33 > result];
            do
            {
              v5[v35] = v36[v35];
              ++v35;
            }
            while (&v36[v35] != a2);
          }
          return result;
        }
      }
      if (v7 != v28)
      {
        v37 = 0;
        do
        {
          v5[v37] = v7[v37];
          ++v37;
        }
        while (&v7[v37] != v28);
      }
    }
    else if (result != a2)
    {
      v15 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v16 = 0;
        v17 = a5;
        do
        {
          v18 = v17;
          v19 = *v17++;
          v20 = *a3;
          v21 = llvm::MachineBranchProbabilityInfo::getEdgeProbability((*a3)[71], *a3[1], *v15);
          result = (const llvm::MachineBasicBlock **)llvm::MachineBranchProbabilityInfo::getEdgeProbability(v20[71], *a3[1], v19);
          v22 = v17;
          if (v21 > result)
          {
            v18[1] = *v18;
            v22 = v5;
            if (v18 != v5)
            {
              v23 = v16;
              while (1)
              {
                v22 = (const llvm::MachineBasicBlock **)((char *)v5 + v23);
                v24 = *(const llvm::MachineBasicBlock **)((char *)v5 + v23 - 8);
                v25 = *a3;
                v26 = llvm::MachineBranchProbabilityInfo::getEdgeProbability((*a3)[71], *a3[1], *v15);
                result = (const llvm::MachineBasicBlock **)llvm::MachineBranchProbabilityInfo::getEdgeProbability(v25[71], *a3[1], v24);
                if (v26 <= result)
                  break;
                *v22 = *(v22 - 1);
                v23 -= 8;
                if (!v23)
                {
                  v22 = v5;
                  break;
                }
              }
            }
          }
          v27 = *v15++;
          *v22 = v27;
          v16 += 8;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

const llvm::MachineBasicBlock **sub_1C513D430(const llvm::MachineBasicBlock **result, const llvm::MachineBasicBlock **a2, const llvm::MachineBasicBlock **a3, const llvm::MachineBasicBlock ***a4, uint64_t a5, uint64_t a6, const llvm::MachineBasicBlock **a7, uint64_t a8)
{
  const llvm::MachineBasicBlock ***v11;
  const llvm::MachineBasicBlock **v14;
  const llvm::MachineBasicBlock *v15;
  const llvm::MachineBasicBlock **v16;
  unsigned int EdgeProbability;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const llvm::MachineBasicBlock **v21;
  unint64_t v22;
  const llvm::MachineBasicBlock ***v23;
  unint64_t v24;
  const llvm::MachineBasicBlock **v25;
  const llvm::MachineBasicBlock *v26;
  const llvm::MachineBasicBlock **v27;
  const llvm::MachineBasicBlock *v28;
  const llvm::MachineBasicBlock **v29;
  const llvm::MachineBasicBlock **v30;
  const llvm::MachineBasicBlock **v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  const llvm::MachineBasicBlock **v36;
  uint64_t v37;
  uint64_t v38;
  const llvm::MachineBasicBlock **v39;
  uint64_t v40;
  unint64_t v41;
  const llvm::MachineBasicBlock **v42;
  const llvm::MachineBasicBlock **v43;
  const llvm::MachineBasicBlock *v44;
  const llvm::MachineBasicBlock *v45;
  unsigned int v46;
  unsigned int v47;
  const llvm::MachineBasicBlock **v48;
  const llvm::MachineBasicBlock *v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  const llvm::MachineBasicBlock *v53;
  uint64_t v54;
  const llvm::MachineBasicBlock **v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const llvm::MachineBasicBlock **v60;
  const llvm::MachineBasicBlock **v61;
  const llvm::MachineBasicBlock **v62;
  const llvm::MachineBasicBlock *v63;
  const llvm::MachineBasicBlock **v64;
  unsigned int v65;
  const llvm::MachineBasicBlock **v66;
  uint64_t v67;
  const llvm::MachineBasicBlock **v68;
  const llvm::MachineBasicBlock *v69;
  const llvm::MachineBasicBlock **v70;
  unsigned int v71;
  const llvm::MachineBasicBlock **v72;
  const llvm::MachineBasicBlock **v73;
  unsigned int v74;
  BOOL v75;
  unsigned int v76;
  unsigned int v77;
  const llvm::MachineBasicBlock **v78;
  const llvm::MachineBasicBlock *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  const llvm::MachineBasicBlock **v83;
  const llvm::MachineBasicBlock **v84;
  uint64_t v85;
  const llvm::MachineBasicBlock **v86;
  const llvm::MachineBasicBlock **v87;
  const llvm::MachineBasicBlock **v88;
  uint64_t v90;
  const llvm::MachineBasicBlock **v91;
  uint64_t v92;
  const llvm::MachineBasicBlock **v93;
  uint64_t v94;

  v90 = a6;
  if (!a6)
    return result;
  v11 = a4;
  v14 = result;
  while (a5 > a8 && v90 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      v15 = *v14;
      v16 = *v11;
      EdgeProbability = llvm::MachineBranchProbabilityInfo::getEdgeProbability((*v11)[71], *v11[1], *a2);
      result = (const llvm::MachineBasicBlock **)llvm::MachineBranchProbabilityInfo::getEdgeProbability(v16[71], *v11[1], v15);
      if (EdgeProbability > result)
        break;
      ++v14;
      if (!--a5)
        return result;
    }
    v18 = v90;
    if (a5 >= v90)
    {
      if (a5 == 1)
      {
        v79 = *v14;
        *v14 = *a2;
        *a2 = v79;
        return result;
      }
      v85 = a8;
      if (a5 >= 0)
        v37 = a5;
      else
        v37 = a5 + 1;
      v38 = v37 >> 1;
      v39 = a2;
      v81 = v38;
      v83 = a3;
      a2 = &v14[v38];
      v21 = a3;
      v88 = v39;
      v40 = (char *)a3 - (char *)v39;
      if (v40)
      {
        v41 = v40 >> 3;
        v21 = v88;
        v91 = *a4;
        v93 = a4[1];
        do
        {
          v42 = &v21[v41 >> 1];
          v44 = *v42;
          v43 = v42 + 1;
          v45 = *a2;
          v46 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(v91[71], *v93, v44);
          v47 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(v91[71], *v93, v45);
          if (v46 <= v47)
            v41 >>= 1;
          else
            v41 += ~(v41 >> 1);
          if (v46 > v47)
            v21 = v43;
        }
        while (v41);
      }
      v36 = v88;
      v20 = v21 - v88;
      v22 = v81;
    }
    else
    {
      if (v90 >= 0)
        v19 = v90;
      else
        v19 = v90 + 1;
      v20 = v19 >> 1;
      v21 = &a2[v19 >> 1];
      v22 = a2 - v14;
      if (a2 == v14)
      {
        v14 = a2;
        v48 = &a2[v19 >> 1];
        goto LABEL_50;
      }
      v92 = v19 >> 1;
      v85 = a8;
      v86 = a7;
      v87 = a2;
      v83 = a3;
      v84 = v14;
      a2 = v14;
      v23 = v11;
      do
      {
        v24 = v22 >> 1;
        v25 = &a2[v22 >> 1];
        v26 = *v21;
        v28 = *v25;
        v27 = v25 + 1;
        v29 = *v23;
        v30 = a2;
        v31 = v21;
        v32 = v22;
        v33 = llvm::MachineBranchProbabilityInfo::getEdgeProbability((*v23)[71], *v23[1], v26);
        v34 = llvm::MachineBranchProbabilityInfo::getEdgeProbability(v29[71], *v23[1], v28);
        v35 = v32 + ~(v32 >> 1);
        v21 = v31;
        if (v33 <= v34)
          a2 = v27;
        else
          a2 = v30;
        if (v33 <= v34)
          v22 = v35;
        else
          v22 = v24;
      }
      while (v22);
      v14 = v84;
      v22 = a2 - v84;
      a7 = v86;
      v36 = v87;
      v20 = v92;
    }
    v11 = a4;
    v18 = v90;
    a8 = v85;
    if (a2 == v36)
    {
      a2 = v36;
      v48 = v21;
    }
    else if (v36 == v21)
    {
      v21 = v36;
      v48 = a2;
    }
    else
    {
      if (a2 + 1 != v36)
      {
        v94 = v20;
        v82 = v22;
        if (v36 + 1 == v21)
        {
          v53 = *(v21 - 1);
          v48 = a2 + 1;
          a3 = v83;
          if (v21 - 1 != a2)
            memmove(a2 + 1, a2, (char *)(v21 - 1) - (char *)a2);
          *a2 = v53;
          v11 = a4;
        }
        else
        {
          v48 = (const llvm::MachineBasicBlock **)sub_1C4E85DF0(a2, v36, v21);
          a3 = v83;
        }
        v22 = v82;
        v20 = v94;
        goto LABEL_50;
      }
      v49 = *a2;
      v50 = (char *)v21 - (char *)v36;
      v51 = v22;
      v52 = v20;
      memmove(a2, v36, (char *)v21 - (char *)v36);
      v20 = v52;
      v22 = v51;
      v48 = (const llvm::MachineBasicBlock **)((char *)a2 + v50);
      *(const llvm::MachineBasicBlock **)((char *)a2 + v50) = v49;
      v11 = a4;
      v18 = v90;
    }
    a3 = v83;
LABEL_50:
    a5 -= v22;
    v54 = v18 - v20;
    if ((uint64_t)(v20 + v22) >= v54 + a5)
    {
      v55 = a3;
      v56 = v22;
      v57 = a5;
      v58 = v20;
      result = (const llvm::MachineBasicBlock **)sub_1C513D430(v48, v21, v55, v11, v57, v54, a7, a8);
      v21 = a2;
      v54 = v58;
      a5 = v56;
      a3 = v48;
    }
    else
    {
      result = (const llvm::MachineBasicBlock **)sub_1C513D430(v14, a2, v48, v11, v22, v20, a7, a8);
      v14 = v48;
    }
    a2 = v21;
    v90 = v54;
    if (!v54)
      return result;
  }
  if (a5 <= v90)
  {
    if (v14 != a2)
    {
      v67 = 0;
      do
      {
        a7[v67] = v14[v67];
        ++v67;
      }
      while (&v14[v67] != a2);
      if (v67 * 8)
      {
        v68 = a7;
        while (a2 != a3)
        {
          v69 = *v68;
          v70 = *v11;
          v71 = llvm::MachineBranchProbabilityInfo::getEdgeProbability((*v11)[71], *v11[1], *a2);
          v72 = a2;
          v73 = a3;
          v74 = v71;
          result = (const llvm::MachineBasicBlock **)llvm::MachineBranchProbabilityInfo::getEdgeProbability(v70[71], *v11[1], v69);
          v75 = v74 > result;
          a3 = v73;
          v76 = v75;
          v77 = !v75;
          if (v75)
            v78 = v72;
          else
            v78 = v68;
          v68 += v77;
          a2 = &v72[v76];
          *v14++ = *v78;
          if (&a7[v67] == v68)
            return result;
        }
        return (const llvm::MachineBasicBlock **)memmove(v14, v68, (char *)a7 - (char *)v68 + v67 * 8);
      }
    }
  }
  else if (a2 != a3)
  {
    v59 = 0;
    do
    {
      a7[v59] = a2[v59];
      ++v59;
    }
    while (&a2[v59] != a3);
    if (v59 * 8)
    {
      v60 = a3;
      v61 = &a7[v59];
      v62 = v60 - 1;
      while (a2 != v14)
      {
        v63 = *(a2 - 1);
        v64 = *a4;
        v65 = llvm::MachineBranchProbabilityInfo::getEdgeProbability((*a4)[71], *a4[1], *(v61 - 1));
        result = (const llvm::MachineBasicBlock **)llvm::MachineBranchProbabilityInfo::getEdgeProbability(v64[71], *a4[1], v63);
        if (v65 <= result)
          v66 = v61;
        else
          v66 = a2;
        if (v65 <= result)
          --v61;
        else
          --a2;
        *v62-- = *(v66 - 1);
        if (v61 == a7)
          return result;
      }
      if (v61 != a7)
      {
        v80 = 0;
        do
        {
          v62[v80] = v61[v80 - 1];
          --v80;
        }
        while (&v61[v80] != a7);
      }
    }
  }
  return result;
}

const llvm::MachineBasicBlock **sub_1C513D998(const llvm::MachineBasicBlock **result, const llvm::MachineBasicBlock **a2, uint64_t *a3, unint64_t a4, const llvm::MachineBasicBlock **a5, uint64_t a6)
{
  const llvm::MachineBasicBlock **v8;
  const llvm::MachineBasicBlock **v10;
  uint64_t v11;
  const llvm::MachineBasicBlock **v12;
  const llvm::MachineBasicBlock *v13;
  const llvm::MachineBasicBlock *v14;
  uint64_t v15;
  unint64_t v16;
  const llvm::MachineBasicBlock *v17;
  uint64_t v18;
  const llvm::MachineBasicBlock *v19;
  uint64_t v20;
  unint64_t v21;
  const llvm::MachineBasicBlock **v22;
  const llvm::MachineBasicBlock **v24;
  unint64_t v25;
  const llvm::MachineBasicBlock **v26;
  unint64_t v27;
  const llvm::MachineBasicBlock **v28;
  const llvm::MachineBasicBlock **v29;
  const llvm::MachineBasicBlock **v30;
  const llvm::MachineBasicBlock **v31;
  const llvm::MachineBasicBlock *v32;
  uint64_t v33;
  unint64_t v34;
  const llvm::MachineBasicBlock **v35;
  uint64_t v36;
  char v37;
  const llvm::MachineBasicBlock **v38;
  uint64_t v39;
  const llvm::MachineBasicBlock *v40;
  uint64_t v41;
  unint64_t BlockFreq;
  const llvm::MachineBasicBlock *v43;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      v40 = *result;
      v41 = *a3;
      BlockFreq = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(*a3 + 576), *(a2 - 1));
      result = (const llvm::MachineBasicBlock **)llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v41 + 576), v40);
      if (BlockFreq > (unint64_t)result)
      {
        v43 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v43;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v24 = a5;
      v25 = a4 >> 1;
      v26 = &result[a4 >> 1];
      v27 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_1C513DC5C(result, v26, a3, v27, a5);
        v28 = &v24[v25];
        result = sub_1C513DC5C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v28);
        v29 = &v24[a4];
        v30 = v28;
        while (v30 != v29)
        {
          v31 = v30;
          v32 = *v24;
          v33 = *a3;
          v34 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(*a3 + 576), *v30);
          result = (const llvm::MachineBasicBlock **)llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v33 + 576), v32);
          if (v34 > (unint64_t)result)
            v35 = v31;
          else
            v35 = v24;
          v24 += v34 <= (unint64_t)result;
          v30 = &v31[v34 > (unint64_t)result];
          *v8++ = *v35;
          if (v24 == v28)
          {
            if (v30 != v29)
            {
              v36 = 0;
              if (v34 > (unint64_t)result)
                v37 = 1;
              else
                v37 = 2;
              v38 = &v31[v37 & 1];
              do
              {
                v8[v36] = v38[v36];
                ++v36;
              }
              while (&v38[v36] != v29);
            }
            return result;
          }
        }
        if (v24 != v28)
        {
          v39 = 0;
          do
          {
            v8[v39] = v24[v39];
            ++v39;
          }
          while (&v24[v39] != v28);
        }
      }
      else
      {
        sub_1C513D998(result, v26, a3, v27, a5, a6);
        sub_1C513D998(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v24, a6);
        return sub_1C513DED4(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v24, a6);
      }
    }
    else if (result != a2)
    {
      v10 = result + 1;
      if (result + 1 != a2)
      {
        v11 = 0;
        v12 = result;
        do
        {
          v14 = *v12;
          v13 = v12[1];
          v12 = v10;
          v15 = *a3;
          v16 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(*a3 + 576), v13);
          result = (const llvm::MachineBasicBlock **)llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v15 + 576), v14);
          if (v16 > (unint64_t)result)
          {
            v17 = *v12;
            v18 = v11;
            while (1)
            {
              *(const llvm::MachineBasicBlock **)((char *)v8 + v18 + 8) = *(const llvm::MachineBasicBlock **)((char *)v8 + v18);
              if (!v18)
                break;
              v19 = *(const llvm::MachineBasicBlock **)((char *)v8 + v18 - 8);
              v20 = *a3;
              v21 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(*a3 + 576), v17);
              result = (const llvm::MachineBasicBlock **)llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v20 + 576), v19);
              v18 -= 8;
              if (v21 <= (unint64_t)result)
              {
                v22 = (const llvm::MachineBasicBlock **)((char *)v8 + v18 + 8);
                goto LABEL_14;
              }
            }
            v22 = v8;
LABEL_14:
            *v22 = v17;
          }
          v10 = v12 + 1;
          v11 += 8;
        }
        while (v12 + 1 != a2);
      }
    }
  }
  return result;
}

const llvm::MachineBasicBlock **sub_1C513DC5C(const llvm::MachineBasicBlock **result, const llvm::MachineBasicBlock **a2, uint64_t *a3, unint64_t a4, const llvm::MachineBasicBlock **a5)
{
  const llvm::MachineBasicBlock **v5;
  const llvm::MachineBasicBlock **v7;
  const llvm::MachineBasicBlock **v10;
  uint64_t v11;
  const llvm::MachineBasicBlock **v12;
  const llvm::MachineBasicBlock **v13;
  const llvm::MachineBasicBlock *v14;
  uint64_t v15;
  unint64_t v16;
  const llvm::MachineBasicBlock **v17;
  uint64_t v18;
  const llvm::MachineBasicBlock *v19;
  uint64_t v20;
  unint64_t v21;
  const llvm::MachineBasicBlock *v22;
  const llvm::MachineBasicBlock **v23;
  const llvm::MachineBasicBlock **v24;
  const llvm::MachineBasicBlock **v25;
  const llvm::MachineBasicBlock *v26;
  uint64_t v27;
  unint64_t v28;
  const llvm::MachineBasicBlock **v29;
  uint64_t v30;
  const llvm::MachineBasicBlock **v31;
  uint64_t v32;
  const llvm::MachineBasicBlock **v33;
  const llvm::MachineBasicBlock *v34;
  uint64_t v35;
  unint64_t BlockFreq;
  const llvm::MachineBasicBlock **v37;
  const llvm::MachineBasicBlock **v38;

  if (!a4)
    return result;
  v5 = a5;
  v7 = result;
  if (a4 == 1)
  {
LABEL_36:
    *v5 = *v7;
    return result;
  }
  if (a4 == 2)
  {
    v33 = a2 - 1;
    v34 = *result;
    v35 = *a3;
    BlockFreq = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(*a3 + 576), *(a2 - 1));
    result = (const llvm::MachineBasicBlock **)llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v35 + 576), v34);
    if (BlockFreq <= (unint64_t)result)
      v37 = v7;
    else
      v37 = v33;
    *v5++ = *v37;
    if (BlockFreq <= (unint64_t)result)
      v7 = v33;
    goto LABEL_36;
  }
  if ((uint64_t)a4 > 8)
  {
    v23 = &result[a4 >> 1];
    sub_1C513D998(result, v23, a3, a4 >> 1, a5, a4 >> 1);
    result = (const llvm::MachineBasicBlock **)sub_1C513D998(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
    v24 = &v7[a4 >> 1];
    while (v24 != a2)
    {
      v25 = v24;
      v26 = *v7;
      v27 = *a3;
      v28 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(*a3 + 576), *v24);
      result = (const llvm::MachineBasicBlock **)llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v27 + 576), v26);
      if (v28 <= (unint64_t)result)
        v29 = v7;
      else
        v29 = v25;
      v24 = &v25[v28 > (unint64_t)result];
      v7 += v28 <= (unint64_t)result;
      *v5++ = *v29;
      if (v7 == v23)
      {
        if (v24 != a2)
        {
          v30 = 0;
          v31 = &v25[v28 > (unint64_t)result];
          do
          {
            v5[v30] = v31[v30];
            ++v30;
          }
          while (&v31[v30] != a2);
        }
        return result;
      }
    }
    if (v7 != v23)
    {
      v32 = 0;
      do
      {
        v5[v32] = v7[v32];
        ++v32;
      }
      while (&v7[v32] != v23);
    }
  }
  else if (result != a2)
  {
    v10 = result + 1;
    *a5 = *result;
    if (result + 1 != a2)
    {
      v11 = 0;
      v12 = a5;
      do
      {
        v13 = v12;
        v14 = *v12++;
        v15 = *a3;
        v16 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(*a3 + 576), *v10);
        result = (const llvm::MachineBasicBlock **)llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v15 + 576), v14);
        v17 = v12;
        if (v16 > (unint64_t)result)
        {
          v13[1] = *v13;
          v17 = v5;
          if (v13 != v5)
          {
            v38 = v12;
            v18 = v11;
            while (1)
            {
              v17 = (const llvm::MachineBasicBlock **)((char *)v5 + v18);
              v19 = *(const llvm::MachineBasicBlock **)((char *)v5 + v18 - 8);
              v20 = *a3;
              v21 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(*a3 + 576), *v10);
              result = (const llvm::MachineBasicBlock **)llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v20 + 576), v19);
              if (v21 <= (unint64_t)result)
                break;
              *v17 = *(v17 - 1);
              v18 -= 8;
              if (!v18)
              {
                v17 = v5;
                break;
              }
            }
            v12 = v38;
          }
        }
        v22 = *v10++;
        *v17 = v22;
        v11 += 8;
      }
      while (v10 != a2);
    }
  }
  return result;
}

const llvm::MachineBasicBlock **sub_1C513DED4(const llvm::MachineBasicBlock **result, const llvm::MachineBasicBlock **a2, const llvm::MachineBasicBlock **a3, uint64_t *a4, uint64_t a5, uint64_t a6, const llvm::MachineBasicBlock **a7, uint64_t a8)
{
  uint64_t v10;
  const llvm::MachineBasicBlock **v14;
  const llvm::MachineBasicBlock *v15;
  uint64_t v16;
  unint64_t BlockFreq;
  uint64_t v18;
  uint64_t v19;
  const llvm::MachineBasicBlock **v20;
  unint64_t v21;
  const llvm::MachineBasicBlock **v22;
  const llvm::MachineBasicBlock **v23;
  const llvm::MachineBasicBlock **v24;
  const llvm::MachineBasicBlock *v25;
  uint64_t v26;
  const llvm::MachineBasicBlock **v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  const llvm::MachineBasicBlock **v31;
  const llvm::MachineBasicBlock **v32;
  const llvm::MachineBasicBlock *v33;
  unint64_t v34;
  const llvm::MachineBasicBlock **v35;
  const llvm::MachineBasicBlock **v36;
  const llvm::MachineBasicBlock **v37;
  const llvm::MachineBasicBlock **v38;
  uint64_t v39;
  int64_t v40;
  const llvm::MachineBasicBlock **v41;
  size_t v42;
  const llvm::MachineBasicBlock **v43;
  const llvm::MachineBasicBlock *v44;
  const llvm::MachineBasicBlock **v45;
  uint64_t v46;
  const llvm::MachineBasicBlock **v47;
  const llvm::MachineBasicBlock **v48;
  const llvm::MachineBasicBlock **v49;
  uint64_t v50;
  unint64_t v51;
  llvm::MBFIWrapper *v52;
  const llvm::MachineBasicBlock **v53;
  uint64_t v54;
  const llvm::MachineBasicBlock **v55;
  const llvm::MachineBasicBlock *v56;
  uint64_t v57;
  unint64_t v58;
  const llvm::MachineBasicBlock **v59;
  uint64_t v60;
  const llvm::MachineBasicBlock *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  const llvm::MachineBasicBlock **v67;
  unint64_t v68;
  const llvm::MachineBasicBlock **v69;
  const llvm::MachineBasicBlock **v70;
  llvm::MachineBasicBlock *v71;
  llvm::MachineBasicBlock *v72;
  const llvm::MachineBasicBlock **v73;
  llvm::MachineBasicBlock *v74;
  llvm::MachineBasicBlock *v76;

  if (!a6)
    return result;
  v10 = a6;
  v14 = result;
  while (a5 > a8 && v10 > a8)
  {
    if (!a5)
      return result;
    while (1)
    {
      v15 = *v14;
      v16 = *a4;
      BlockFreq = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(*a4 + 576), *a2);
      result = (const llvm::MachineBasicBlock **)llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v16 + 576), v15);
      if (BlockFreq > (unint64_t)result)
        break;
      ++v14;
      if (!--a5)
        return result;
    }
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        v61 = *v14;
        *v14 = *a2;
        *a2 = v61;
        return result;
      }
      if (a5 >= 0)
        v29 = a5;
      else
        v29 = a5 + 1;
      v64 = v29 >> 1;
      v67 = a7;
      v22 = &v14[v29 >> 1];
      v20 = a3;
      if (a3 != a2)
      {
        v30 = a3 - a2;
        v62 = *a4;
        v20 = a2;
        v69 = &v14[v29 >> 1];
        do
        {
          v31 = &v20[v30 >> 1];
          v33 = *v31;
          v32 = v31 + 1;
          v72 = *v22;
          v71 = (llvm::MachineBasicBlock *)llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v62 + 576), v33);
          v34 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v62 + 576), v72);
          v22 = v69;
          if ((unint64_t)v71 <= v34)
            v30 >>= 1;
          else
            v30 += ~(v30 >> 1);
          if ((unint64_t)v71 > v34)
            v20 = v32;
        }
        while (v30);
      }
      v19 = v20 - a2;
      v21 = v64;
    }
    else
    {
      if (v10 >= 0)
        v18 = v10;
      else
        v18 = v10 + 1;
      v19 = v18 >> 1;
      v20 = &a2[v18 >> 1];
      v21 = a2 - v14;
      if (a2 == v14)
      {
        v14 = a2;
        goto LABEL_42;
      }
      v63 = v18 >> 1;
      v67 = a7;
      v22 = v14;
      v73 = &a2[v18 >> 1];
      do
      {
        v23 = &v22[v21 >> 1];
        v25 = *v23;
        v24 = v23 + 1;
        v26 = *a4;
        v27 = v22;
        v68 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(*a4 + 576), *v73);
        v28 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v26 + 576), v25);
        if (v68 <= v28)
          v22 = v24;
        else
          v22 = v27;
        if (v68 <= v28)
          v21 += ~(v21 >> 1);
        else
          v21 >>= 1;
      }
      while (v21);
      v21 = v22 - v14;
      v20 = v73;
      v19 = v63;
    }
    a7 = v67;
    if (v22 != a2)
    {
      if (a2 == v20)
      {
        v20 = a2;
        v38 = v22;
      }
      else if (v22 + 1 == a2)
      {
        v65 = v21;
        v74 = *v22;
        v39 = v19;
        v40 = (char *)v20 - (char *)a2;
        v41 = a2;
        v42 = (char *)v20 - (char *)a2;
        v43 = v22;
        memmove(v22, v41, v42);
        v22 = v43;
        v38 = (const llvm::MachineBasicBlock **)((char *)v43 + v40);
        v19 = v39;
        *v38 = v74;
        v21 = v65;
      }
      else if (a2 + 1 == v20)
      {
        v66 = v19;
        v44 = *(v20 - 1);
        v38 = v22 + 1;
        if (v20 - 1 != v22)
        {
          v70 = v22;
          memmove(v22 + 1, v22, (char *)(v20 - 1) - (char *)v22);
          v22 = v70;
        }
        *v22 = v44;
        v19 = v66;
      }
      else
      {
        v35 = a2;
        v36 = v22;
        v37 = (const llvm::MachineBasicBlock **)sub_1C4E85DF0(v22, v35, v20);
        v22 = v36;
        v38 = v37;
      }
      goto LABEL_48;
    }
LABEL_42:
    v22 = a2;
    v38 = v20;
LABEL_48:
    a5 -= v21;
    v10 -= v19;
    if ((uint64_t)(v19 + v21) >= v10 + a5)
    {
      v45 = v20;
      v20 = v22;
      result = (const llvm::MachineBasicBlock **)sub_1C513DED4(v38, v45, a3, a4, a5, v10, a7, a8);
      v10 = v19;
      a5 = v21;
      a3 = v38;
    }
    else
    {
      result = (const llvm::MachineBasicBlock **)sub_1C513DED4(v14, v22, v38, a4, v21, v19, a7, a8);
      v14 = v38;
    }
    a2 = v20;
    if (!v10)
      return result;
  }
  if (a5 <= v10)
  {
    if (v14 != a2)
    {
      v54 = 0;
      do
      {
        a7[v54] = v14[v54];
        ++v54;
      }
      while (&v14[v54] != a2);
      if (v54 * 8)
      {
        v55 = a7;
        while (a2 != a3)
        {
          v56 = *v55;
          v57 = *a4;
          v58 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(*a4 + 576), *a2);
          result = (const llvm::MachineBasicBlock **)llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(v57 + 576), v56);
          if (v58 > (unint64_t)result)
            v59 = a2;
          else
            v59 = v55;
          v55 += v58 <= (unint64_t)result;
          a2 += v58 > (unint64_t)result;
          *v14++ = *v59;
          if (&a7[v54] == v55)
            return result;
        }
        return (const llvm::MachineBasicBlock **)memmove(v14, v55, (char *)a7 - (char *)v55 + v54 * 8);
      }
    }
  }
  else if (a2 != a3)
  {
    v46 = 0;
    do
    {
      a7[v46] = a2[v46];
      ++v46;
    }
    while (&a2[v46] != a3);
    if (v46 * 8)
    {
      v47 = &a7[v46];
      v48 = a3 - 1;
      while (a2 != v14)
      {
        v76 = *(a2 - 1);
        v49 = a7;
        v50 = *a4;
        v51 = llvm::MBFIWrapper::getBlockFreq(*(llvm::MBFIWrapper **)(*a4 + 576), *(v47 - 1));
        v52 = *(llvm::MBFIWrapper **)(v50 + 576);
        a7 = v49;
        result = (const llvm::MachineBasicBlock **)llvm::MBFIWrapper::getBlockFreq(v52, v76);
        if (v51 <= (unint64_t)result)
          v53 = v47;
        else
          v53 = a2;
        if (v51 <= (unint64_t)result)
          --v47;
        else
          --a2;
        *v48-- = *(v53 - 1);
        if (v47 == v49)
          return result;
      }
      if (v47 != a7)
      {
        v60 = 0;
        do
        {
          v48[v60] = v47[v60 - 1];
          --v60;
        }
        while (&v47[v60] != a7);
      }
    }
  }
  return result;
}

_QWORD *sub_1C513E3D8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61EB128(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -1;
      result[1] = -1;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C513E49C(uint64_t *result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;

  v2 = (_QWORD *)*result;
  if ((uint64_t *)*result != result)
  {
    v3 = result;
    v4 = (uint64_t *)result[1];
    if ((uint64_t *)v4[1] != result)
    {
      if (v4 == result)
      {
        v21 = &v21;
        v22 = (uint64_t *)&v21;
        v8 = &v21 == (_QWORD **)result;
      }
      else
      {
        v6 = (uint64_t *)result[1];
        do
        {
          v7 = (uint64_t *)v6[1];
          if (v7 == result)
            break;
          v4 = (uint64_t *)v4[1];
          v6 = (uint64_t *)v7[1];
        }
        while (v6 != result);
        v21 = &v21;
        v22 = (uint64_t *)&v21;
        v8 = &v21 == (_QWORD **)result;
        if (&v21 != (_QWORD **)result && v4 != result)
        {
          v8 = 0;
          v9 = (_QWORD *)*v4;
          v9[1] = result;
          *result = (uint64_t)v9;
          v2[1] = &v21;
          *v4 = (uint64_t)&v21;
          v21 = v2;
          v22 = v4;
        }
      }
      sub_1C513E49C(result, a2);
      result = (uint64_t *)sub_1C513E49C(&v21, a2);
      if (!v8 && v21 != &v21)
      {
        v10 = v22;
        v11 = (uint64_t *)v3[1];
        if (v11 != v3)
        {
          while (1)
          {
            v24 = v10;
            v12 = sub_1C61BEB98(a2, &v24)[1];
            v23 = v11;
            result = sub_1C61BEB98(a2, &v23);
            if (v12 >= result[1])
            {
              v14 = v10;
            }
            else
            {
              v13 = v10;
              do
              {
                v13 = (uint64_t *)v13[1];
                v14 = (uint64_t *)&v21;
                if (v13 == (uint64_t *)&v21)
                  break;
                v24 = v13;
                v15 = sub_1C61BEB98(a2, &v24)[1];
                v23 = v11;
                result = sub_1C61BEB98(a2, &v23);
                v14 = v13;
              }
              while (v15 < result[1]);
              if (v11 != v14 && v10 != v14)
              {
                v16 = *v14;
                v17 = *v10;
                *(_QWORD *)(v17 + 8) = v14;
                *v14 = v17;
                v18 = *v11;
                *(_QWORD *)(v16 + 8) = v11;
                *v10 = v18;
                *(_QWORD *)(v18 + 8) = v10;
                *v11 = v16;
              }
              if (v13 == (uint64_t *)&v21)
                return result;
            }
            v11 = (uint64_t *)v11[1];
            v10 = v14;
            if (v11 == v3)
              goto LABEL_27;
          }
        }
        v14 = v22;
LABEL_27:
        if (v14 != (uint64_t *)&v21)
        {
          v19 = v21;
          *(_QWORD *)(*v14 + 8) = &v21;
          v20 = *v3;
          v19[1] = v3;
          *v14 = v20;
          *(_QWORD *)(v20 + 8) = v14;
          *v3 = (uint64_t)v19;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C513E6B4()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6F22) = &off_1E8144130;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED7F9868);
  if (v2 != -1)
  {
    v6[0] = sub_1C5134C4C;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED7F9868, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C513E78C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C513E820(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C513E8AC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C513E900(uint64_t a1, uint64_t a2)
{
  const llvm::MachineBasicBlock *v2;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  const llvm::MachineBasicBlock *i;
  const llvm::MachineBasicBlock **v10;
  const llvm::MachineBasicBlock **v11;

  v2 = (const llvm::MachineBasicBlock *)(a2 + 320);
  if (*(_QWORD *)(*(_QWORD *)(a2 + 328) + 8) != a2 + 320)
  {
    v5 = **(void ****)(a1 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
    }
    while (v6 != &llvm::MachineBranchProbabilityInfo::ID);
    *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::MachineBranchProbabilityInfo::ID);
    v7 = **(void ****)(a1 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
    }
    while (v8 != &llvm::MachineBlockFrequencyInfo::ID);
    *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::MachineBlockFrequencyInfo::ID);
    for (i = *(const llvm::MachineBasicBlock **)(a2 + 328);
          i != v2;
          i = (const llvm::MachineBasicBlock *)*((_QWORD *)i + 1))
    {
      v11 = (const llvm::MachineBasicBlock **)*((_QWORD *)i + 11);
      v10 = (const llvm::MachineBasicBlock **)*((_QWORD *)i + 12);
      while (v11 != v10)
      {
        if (*((const llvm::MachineBasicBlock **)i + 1) != *v11)
          llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 248), i, *v11);
        ++v11;
      }
    }
  }
  return 0;
}

uint64_t sub_1C513E9FC()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Force the alignment of all blocks in the function in log2 format (e.g 4 means align"
                                     " on 16B boundaries).";
  v4.n128_u64[1] = 103;
  v3 = &v2;
  v1 = 1;
  v2 = 0;
  sub_1C61D8E94((uint64_t)&unk_1ED7F9870, "align-all-blocks", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F9870, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Force the alignment of all blocks that have no fall-through predecessors (i.e. don'"
                                     "t add nops that are executed). In log2 format (e.g 4 means align on 16B boundaries).";
  v4.n128_u64[1] = 167;
  v1 = 1;
  v2 = 0;
  v3 = &v2;
  sub_1C61EB1F4((__int128 *)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F9930, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Forces the maximum bytes allowed to be emitted when padding for alignment";
  v4.n128_u64[1] = 73;
  v1 = 1;
  v2 = 0;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7F99F0, "max-bytes-for-alignment", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F99F0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Block frequency percentage a loop exit block needs over the original exit to be con"
                                     "sidered the new exit.";
  v4.n128_u64[1] = 104;
  v1 = 1;
  v2 = 0;
  v3 = &v2;
  sub_1C61EB2D0((__int128 *)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F9AB0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Outline loop blocks from loop chain if (frequency of loop) / (frequency of block) i"
                                     "s greater than this ratio";
  v4.n128_u64[1] = 108;
  v1 = 1;
  v2 = 5;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7F9B70, "loop-to-cold-block-ratio", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F9B70, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Force outlining cold blocks from loops.";
  v4.n128_u64[1] = 39;
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7F9C30, "force-loop-cold-block", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F9C30, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Model the cost of loop rotation more precisely by using profile data.";
  v4.n128_u64[1] = 69;
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7F9CF0, "precise-rotation-cost", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F9CF0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Force the use of precise cost loop rotation strategy.";
  v4.n128_u64[1] = 53;
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7F9DB0, "force-precise-rotation-cost", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F9DB0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Cost that models the probabilistic risk of an instruction misfetch due to a jump co"
                                     "mparing to falling through, whose cost is zero.";
  v4.n128_u64[1] = 130;
  v1 = 1;
  v2 = 1;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7F9E70, "misfetch-cost", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F9E70, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Cost of jump instructions.";
  v4.n128_u64[1] = 26;
  v1 = 1;
  v2 = 1;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7F9F30, "jump-inst-cost", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F9F30, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Perform tail duplication during placement. Creates more fallthrough opportunites in"
                                     " outline branches.";
  v4.n128_u64[1] = 101;
  LOBYTE(v1) = 1;
  v3 = &v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7F9FF0, "tail-dup-placement", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F9FF0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Perform branch folding during placement. Reduces code size.";
  v4.n128_u64[1] = 59;
  LOBYTE(v1) = 1;
  v3 = &v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7FA0B0, "branch-fold-placement", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FA0B0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Instruction cutoff for tail duplication during layout. Tail merging during layout i"
                                     "s forced to have a threshold that won't conflict.";
  v4.n128_u64[1] = 132;
  v1 = 1;
  v2 = 2;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7FA170, "tail-dup-placement-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FA170, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Instruction cutoff for aggressive tail duplication during layout. Used at -O3. Tail"
                                     " merging during layout is forced to have a threshold that won't conflict.";
  v4.n128_u64[1] = 156;
  v1 = 1;
  v2 = 4;
  v3 = &v2;
  sub_1C61EB3AC((__int128 *)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7FA230, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Cost penalty for blocks that can avoid breaking CFG by copying. Copying can increas"
                                     "e fallthrough, but it also increases icache pressure. This parameter controls the p"
                                     "enalty to account for that. Percent as integer.";
  v4.n128_u64[1] = 213;
  v1 = 1;
  v2 = 2;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7FA2F0, "tail-dup-placement-penalty", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FA2F0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"If profile count information is used in tail duplication cost model, the gained fal"
                                     "l through number from tail duplication should be at least this percent of hot count.";
  v4.n128_u64[1] = 167;
  v1 = 1;
  v2 = 50;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7FA3B0, "tail-dup-profile-percent-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FA3B0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Number of triangle-shaped-CFG's that need to be in a row for the triangle tail dupl"
                                     "ication heuristic to kick in. 0 to disable.";
  v4.n128_u64[1] = 126;
  v1 = 1;
  v2 = 2;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&unk_1ED7FA470, "triangle-chain-count", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FA470, &dword_1C475E000);
}

uint64_t sub_1C513EF20(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Machine Branch Probability Analysis";
  *(_QWORD *)(v2 + 8) = 35;
  *(_QWORD *)(v2 + 16) = "machine-branch-prob";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &llvm::MachineBranchProbabilityInfo::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::MachineBranchProbabilityInfo>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::MachineBranchProbabilityInfo::getEdgeProbability(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return llvm::MachineBasicBlock::getSuccProbability(a2, a3);
}

uint64_t llvm::MachineBranchProbabilityInfo::getEdgeProbability(llvm::MachineBranchProbabilityInfo *this, const llvm::MachineBasicBlock *a2, const llvm::MachineBasicBlock *a3)
{
  const llvm::MachineBasicBlock **v4;
  const llvm::MachineBasicBlock **v5;

  v4 = (const llvm::MachineBasicBlock **)*((_QWORD *)a2 + 11);
  v5 = (const llvm::MachineBasicBlock **)*((_QWORD *)a2 + 12);
  if (v4 != v5)
  {
    while (*v4 != a3)
    {
      if (++v4 == v5)
      {
        v4 = (const llvm::MachineBasicBlock **)*((_QWORD *)a2 + 12);
        return llvm::MachineBasicBlock::getSuccProbability(a2, (uint64_t)v4);
      }
    }
  }
  return llvm::MachineBasicBlock::getSuccProbability(a2, (uint64_t)v4);
}

BOOL llvm::MachineBranchProbabilityInfo::isEdgeHot(llvm::MachineBranchProbabilityInfo *this, const llvm::MachineBasicBlock *a2, const llvm::MachineBasicBlock *a3)
{
  const llvm::MachineBasicBlock **v4;
  const llvm::MachineBasicBlock **v5;
  unint64_t v6;

  v4 = (const llvm::MachineBasicBlock **)*((_QWORD *)a2 + 11);
  v5 = (const llvm::MachineBasicBlock **)*((_QWORD *)a2 + 12);
  if (v4 != v5)
  {
    while (*v4 != a3)
    {
      if (++v4 == v5)
      {
        v4 = (const llvm::MachineBasicBlock **)*((_QWORD *)a2 + 12);
        break;
      }
    }
  }
  v6 = (unint64_t)(((((unint64_t)dword_1ED82F580 << 31) | 0x30)
                         * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
  return llvm::MachineBasicBlock::getSuccProbability(a2, (uint64_t)v4) > v6;
}

llvm::raw_ostream *llvm::MachineBranchProbabilityInfo::printEdgeProbability(llvm::MachineBranchProbabilityInfo *this, llvm::raw_ostream *a2, const llvm::MachineBasicBlock *a3, const llvm::MachineBasicBlock *a4)
{
  const llvm::MachineBasicBlock **v7;
  const llvm::MachineBasicBlock **v8;
  int SuccProbability;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _DWORD *v12;
  _OWORD *v13;
  llvm::raw_ostream *v14;
  _BOOL4 isEdgeHot;
  const char *v16;
  size_t v17;
  void *v18;
  void (**v19)(void);
  void (**v20)(void);
  int v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = (const llvm::MachineBasicBlock **)*((_QWORD *)a3 + 11);
  v8 = (const llvm::MachineBasicBlock **)*((_QWORD *)a3 + 12);
  if (v7 != v8)
  {
    while (*v7 != a4)
    {
      if (++v7 == v8)
      {
        v7 = (const llvm::MachineBasicBlock **)*((_QWORD *)a3 + 12);
        break;
      }
    }
  }
  SuccProbability = llvm::MachineBasicBlock::getSuccProbability(a3, (uint64_t)v7);
  v10 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) > 4)
  {
    *(_BYTE *)(v10 + 4) = 32;
    *(_DWORD *)v10 = 1701274725;
    *((_QWORD *)a2 + 4) += 5;
    v11 = a2;
  }
  else
  {
    v11 = llvm::raw_ostream::write(a2, "edge ", 5uLL);
  }
  v26 = v25;
  v25[0] = &off_1E8143F38;
  v25[1] = a3;
  sub_1C512E114((uint64_t)v25, v11);
  v12 = (_DWORD *)*((_QWORD *)v11 + 4);
  if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 3uLL)
  {
    *v12 = 540945696;
    *((_QWORD *)v11 + 4) += 4;
  }
  else
  {
    v11 = llvm::raw_ostream::write(v11, " -> ", 4uLL);
  }
  v24 = v23;
  v23[0] = &off_1E8143F38;
  v23[1] = a4;
  sub_1C512E114((uint64_t)v23, v11);
  v13 = (_OWORD *)*((_QWORD *)v11 + 4);
  if (*((_QWORD *)v11 + 3) - (_QWORD)v13 > 0xFuLL)
  {
    *v13 = *(_OWORD *)" probability is ";
    *((_QWORD *)v11 + 4) += 16;
  }
  else
  {
    v11 = llvm::raw_ostream::write(v11, " probability is ", 0x10uLL);
  }
  v22 = SuccProbability;
  v14 = llvm::BranchProbability::print((llvm::BranchProbability *)&v22, v11);
  isEdgeHot = llvm::MachineBranchProbabilityInfo::isEdgeHot(v14, a3, a4);
  if (isEdgeHot)
    v16 = " [HOT edge]\n";
  else
    v16 = "\n";
  if (isEdgeHot)
    v17 = 12;
  else
    v17 = 1;
  v18 = (void *)*((_QWORD *)v14 + 4);
  if (v17 <= *((_QWORD *)v14 + 3) - (_QWORD)v18)
  {
    memcpy(v18, v16, v17);
    *((_QWORD *)v14 + 4) += v17;
  }
  else
  {
    llvm::raw_ostream::write(v14, v16, v17);
  }
  if (v24 == v23)
  {
    v19 = (void (**)(void))(v23[0] + 32);
  }
  else
  {
    if (!v24)
      goto LABEL_24;
    v19 = (void (**)(void))(*v24 + 40);
  }
  (*v19)();
LABEL_24:
  if (v26 == v25)
  {
    v20 = (void (**)(void))(v25[0] + 32);
    goto LABEL_28;
  }
  if (v26)
  {
    v20 = (void (**)(void))(*v26 + 40);
LABEL_28:
    (*v20)();
  }
  return a2;
}

uint64_t sub_1C513F304()
{
  int v1;
  int v2;
  int *v3;
  __int128 v4;

  *(_QWORD *)&v4 = "branch probability threshold in percentageto be considered very likely";
  *((_QWORD *)&v4 + 1) = 70;
  v3 = &v2;
  v1 = 1;
  v2 = 80;
  sub_1C61EB5E0(&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &llvm::StaticLikelyProb, &dword_1C475E000);
  *(_QWORD *)&v4 = "branch probability threshold in percentage to be considered very likely when profile is available";
  *((_QWORD *)&v4 + 1) = 97;
  v1 = 1;
  v2 = 51;
  v3 = &v2;
  sub_1C61D8E94((uint64_t)&llvm::ProfileLikelyProb, "profile-likely-prob", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &llvm::ProfileLikelyProb, &dword_1C475E000);
}

uint64_t sub_1C513F3D4(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeMachineTraceMetricsPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Machine InstCombiner";
  *(_QWORD *)(v3 + 8) = 20;
  *(_QWORD *)(v3 + 16) = "machine-combiner";
  *(_QWORD *)(v3 + 24) = 16;
  *(_QWORD *)(v3 + 32) = &unk_1ED7FA530;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C513F470;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C513F470()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1ED7FA530);
  *(_QWORD *)v1 = &off_1E81442B8;
  *(_QWORD *)(v1 + 392) = 0;
  *(_DWORD *)(v1 + 400) = 0;
  *(_QWORD *)(v1 + 408) = 0;
  *(_QWORD *)(v1 + 416) = 0;
  *(_QWORD *)(v1 + 424) = 0;
  *(_QWORD *)(v1 + 432) = v1 + 456;
  *(_QWORD *)(v1 + 440) = 0;
  *(_QWORD *)(v1 + 448) = 4;
  *(_QWORD *)(v1 + 464) = v1 + 480;
  *(_QWORD *)(v1 + 472) = 0x600000000;
  *(_DWORD *)(v1 + 528) = 0;
  *(_QWORD *)(v1 + 536) = v1 + 552;
  *(_QWORD *)(v1 + 544) = 0x600000000;
  *(_DWORD *)(v1 + 600) = 0;
  *(_QWORD *)(v1 + 608) = 0;
  *(_QWORD *)(v1 + 624) = 0;
  *(_QWORD *)(v1 + 616) = 0;
  *(_QWORD *)(v1 + 696) = 0;
  *(_OWORD *)(v1 + 664) = xmmword_1C8663800;
  *(_OWORD *)(v1 + 680) = unk_1C8663810;
  *(_OWORD *)(v1 + 632) = llvm::MCSchedModel::Default;
  *(_OWORD *)(v1 + 648) = unk_1C86637F0;
  *(_QWORD *)(v1 + 768) = 0;
  *(_OWORD *)(v1 + 736) = xmmword_1C8663800;
  *(_OWORD *)(v1 + 752) = unk_1C8663810;
  *(_OWORD *)(v1 + 704) = llvm::MCSchedModel::Default;
  *(_OWORD *)(v1 + 720) = unk_1C86637F0;
  *(_OWORD *)(v1 + 792) = 0u;
  *(_OWORD *)(v1 + 808) = 0u;
  *(_OWORD *)(v1 + 776) = 0u;
  *(_QWORD *)(v1 + 824) = v1 + 840;
  *(_QWORD *)(v1 + 832) = 0x1000000000;
  *(_QWORD *)(v1 + 904) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FA538);
  if (v3 != -1)
  {
    v7[0] = sub_1C513F3D4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FA538, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C513F5EC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  *a1 = (uint64_t)&off_1E81442B8;
  v2 = (uint64_t *)a1[103];
  if (v2 != a1 + 105)
    free(v2);
  sub_1C61D92E0(a1 + 49);
  *a1 = (uint64_t)&unk_1E8144BE8;
  v3 = (uint64_t *)a1[22];
  if (v3 != a1 + 24)
    free(v3);
  v4 = (uint64_t *)a1[13];
  if (v4 != a1 + 15)
    free(v4);
  v5 = (uint64_t *)a1[4];
  if (v5 != a1 + 6)
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C513F68C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  *a1 = (uint64_t)&off_1E81442B8;
  v2 = (uint64_t *)a1[103];
  if (v2 != a1 + 105)
    free(v2);
  sub_1C61D92E0(a1 + 49);
  *a1 = (uint64_t)&unk_1E8144BE8;
  v3 = (uint64_t *)a1[22];
  if (v3 != a1 + 24)
    free(v3);
  v4 = (uint64_t *)a1[13];
  if (v4 != a1 + 15)
    free(v4);
  v5 = (uint64_t *)a1[4];
  if (v5 != a1 + 6)
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C513F740()
{
  return "Machine InstCombiner";
}

void *sub_1C513F750(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineTraceMetrics::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineTraceMetrics::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LazyMachineBlockFrequencyInfoPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::ProfileSummaryInfoWrapperPass::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C513F818(uint64_t a1, const llvm::MachineFunction *a2)
{
  uint64_t v4;
  const llvm::TargetSubtargetInfo *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  void *v11;
  void **v12;
  void *v13;
  void **v14;
  void *v15;
  uint64_t v16;
  void **v17;
  void *v18;
  llvm::LazyMachineBlockFrequencyInfoPass *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  llvm::MachineInstr *v32;
  uint64_t v33;
  int v34;
  void *v35;
  llvm::MachineInstr *v36;
  unint64_t v37;
  int v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  llvm::MachineTraceMetrics::Ensemble *Trace;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  llvm::MachineInstr *v54;
  BOOL v55;
  _BOOL4 v56;
  unint64_t v57;
  int v58;
  _BYTE *v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  uint64_t v63;
  int v64;
  int v65;
  _BYTE *v66;
  uint64_t v67;
  int v68;
  _BYTE *v69;
  uint64_t v70;
  void *v71;
  BOOL v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  char *v78;
  const llvm::MachineInstr *v79;
  uint64_t v80;
  llvm::MachineInstr *v81;
  unsigned int v82;
  _DWORD *v83;
  _DWORD *v84;
  unsigned int v85;
  uint64_t v86;
  int *v87;
  int v88;
  uint64_t v89;
  const llvm::MachineInstr *v90;
  uint64_t v91;
  uint64_t RegisterDefOperandIdx;
  uint64_t RegisterUseOperandIdx;
  uint64_t UniqueVRegDef;
  int v95;
  int v96;
  unsigned int v97;
  int ResourceLength;
  unsigned int v99;
  int v100;
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  llvm::MachineInstr *v110;
  _BOOL4 v111;
  uint64_t v112;
  int v113;
  _BYTE *v114;
  uint64_t v115;
  int v116;
  _BYTE *v117;
  uint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  int InstrSlack;
  int v125;
  int v126;
  uint64_t v127;
  llvm::MachineTraceMetrics::Ensemble *v128;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  int shouldOptimizeForSize;
  llvm::MachineInstr *v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int *v142;
  int v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  char *v147;
  uint64_t v148;
  llvm::TargetSchedModel *v149;
  _DWORD *v150;
  uint64_t v151;
  unsigned int v152;
  _QWORD v153[2];
  void *v154;
  uint64_t v155;
  _BYTE v156[128];
  _BYTE *v157;
  uint64_t v158;
  _BYTE v159[128];
  void *v160;
  uint64_t v161;
  _BYTE v162[128];
  void *v163;
  uint64_t v164;
  _BYTE v165[128];
  void *v166;
  uint64_t v167;
  _BYTE v168[128];
  void *v169;
  uint64_t v170;
  _BYTE v171[128];
  void *v172;
  uint64_t v173;
  _BYTE v174[128];
  void *__src;
  uint64_t v176;
  _DWORD v177[32];
  void *v178;
  uint64_t v179;
  _BYTE v180[64];
  void *v181[2];
  _BYTE v182[192];
  void *v183;
  int v184;
  void *v185;
  uint64_t v186;
  _BYTE v187[128];
  void *v188;
  uint64_t v189;
  _BYTE v190[128];
  const llvm::MachineBasicBlock **v191;
  uint64_t v192;
  const llvm::MachineBasicBlock *v193[3];

  v193[1] = *(const llvm::MachineBasicBlock **)MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 248) = v4;
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 248) + 176))(*(_QWORD *)(a1 + 248));
  v5 = *(const llvm::TargetSubtargetInfo **)(a1 + 248);
  v6 = *((_QWORD *)v5 + 20);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)v6;
  v8 = *(_OWORD *)(v6 + 32);
  v7 = *(_OWORD *)(v6 + 48);
  v9 = *(_OWORD *)(v6 + 16);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(v6 + 64);
  *(_OWORD *)(a1 + 304) = v8;
  *(_OWORD *)(a1 + 320) = v7;
  *(_OWORD *)(a1 + 288) = v9;
  v149 = (llvm::TargetSchedModel *)(a1 + 632);
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)(a1 + 632), v5);
  *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 5);
  v10 = **(void ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 352) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::MachineLoopInfo::ID);
  v12 = **(void ****)(a1 + 8);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &llvm::MachineTraceMetrics::ID);
  *(_QWORD *)(a1 + 360) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &llvm::MachineTraceMetrics::ID);
  v14 = **(void ****)(a1 + 8);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != &llvm::ProfileSummaryInfoWrapperPass::ID);
  v16 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  *(_QWORD *)(a1 + 384) = v16;
  if (*(_QWORD *)(v16 + 8))
  {
    v17 = **(void ****)(a1 + 8);
    do
    {
      v18 = *v17;
      v17 += 2;
    }
    while (v18 != &llvm::LazyMachineBlockFrequencyInfoPass::ID);
    v19 = (llvm::LazyMachineBlockFrequencyInfoPass *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v17 - 1)
                                                                                               + 96))(*(v17 - 1), &llvm::LazyMachineBlockFrequencyInfoPass::ID);
    v20 = llvm::LazyMachineBlockFrequencyInfoPass::calculateIfNotAvailable(v19);
  }
  else
  {
    v20 = 0;
  }
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = v20;
  v21 = *(_QWORD *)(*(_QWORD *)a2 + 112);
  if (v21)
    LOBYTE(v21) = (*(_BYTE *)(v21 + 17) & 4) != 0 || *(char *)(v21 + 13) < 0;
  *(_BYTE *)(a1 + 912) = v21;
  v131 = a1 + 392;
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegisterClassInfo *)(a1 + 392), a2);
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 576))(*(_QWORD *)(a1 + 256))
    || (v22 = *((_QWORD *)a2 + 41),
        v130 = (_QWORD *)((char *)a2 + 320),
        (const llvm::MachineFunction *)v22 == (const llvm::MachineFunction *)((char *)a2 + 320)))
  {
    LOBYTE(v23) = 0;
    return v23 & 1;
  }
  v23 = 0;
  v148 = a1;
  do
  {
    v24 = *(_QWORD *)(a1 + 352);
    v25 = *(_DWORD *)(v24 + 264);
    v132 = v23;
    if (!v25)
      goto LABEL_25;
    v26 = *(_QWORD *)(v24 + 248);
    v27 = v25 - 1;
    v28 = (v25 - 1) & ((v22 >> 4) ^ (v22 >> 9));
    v29 = *(_QWORD *)(v26 + 16 * v28);
    if (v22 != v29)
    {
      v30 = 1;
      while (v29 != -4096)
      {
        v31 = v28 + v30++;
        v28 = v31 & v27;
        v29 = *(_QWORD *)(v26 + 16 * v28);
        if (v22 == v29)
          goto LABEL_24;
      }
LABEL_25:
      v140 = 0;
      goto LABEL_26;
    }
LABEL_24:
    v140 = *(_QWORD *)(v26 + 16 * v28 + 8);
LABEL_26:
    v32 = *(llvm::MachineInstr **)(v22 + 56);
    if (!*(_QWORD *)(a1 + 368))
      *(_QWORD *)(a1 + 368) = llvm::MachineTraceMetrics::getEnsemble(*(llvm::MachineTraceMetrics **)(a1 + 360), 0);
    v181[0] = v182;
    v181[1] = (void *)0x800000000;
    v183 = 0;
    v184 = 0;
    v33 = *(_QWORD *)(a1 + 264);
    v34 = *(_DWORD *)(v33 + 44);
    if (v34)
    {
      v35 = malloc_type_calloc(*(unsigned int *)(v33 + 44), 1uLL, 0x6D9A4F0CuLL);
      if (!v35)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v183 = v35;
      v184 = v34;
    }
    if (*(_BYTE *)(a1 + 912))
      shouldOptimizeForSize = 1;
    else
      shouldOptimizeForSize = llvm::shouldOptimizeForSize((const llvm::MachineBasicBlock *)v22, *(_QWORD *)(a1 + 384), *(llvm::MachineBlockFrequencyInfo **)(a1 + 376));
    v141 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 256) + 512))(*(_QWORD *)(a1 + 256), v22, v131);
    v138 = (llvm::MachineInstr *)(v22 + 48);
    if (v32 == (llvm::MachineInstr *)(v22 + 48))
    {
      v126 = 0;
      goto LABEL_230;
    }
    v139 = 0;
    v143 = 0;
    v144 = 0;
    v136 = v22;
    do
    {
      if (!v32 || (v36 = v32, (*(_BYTE *)v32 & 4) == 0))
      {
        v36 = v32;
        if ((*((_WORD *)v32 + 22) & 8) != 0)
        {
          v36 = v32;
          do
            v36 = (llvm::MachineInstr *)*((_QWORD *)v36 + 1);
          while ((*((_WORD *)v36 + 22) & 8) != 0);
        }
      }
      v37 = *((_QWORD *)v36 + 1);
      v178 = v180;
      v179 = 0x1000000000;
      v38 = (*(uint64_t (**)(_QWORD, llvm::MachineInstr *, void **, _QWORD))(**(_QWORD **)(a1 + 256) + 504))(*(_QWORD *)(a1 + 256), v32, &v178, v141);
      v39 = (unsigned int *)v178;
      if (!v38)
      {
LABEL_57:
        v32 = (llvm::MachineInstr *)v37;
        goto LABEL_222;
      }
      v40 = v179;
      if (byte_1ED7FA740)
      {
        if (!(_DWORD)v179)
          goto LABEL_57;
        v41 = 4 * v179;
        do
        {
          v42 = v39;
          v43 = *v39;
          v188 = v190;
          v189 = 0x1000000000;
          v185 = v187;
          v186 = 0x1000000000;
          v176 = 0;
          __src = 0;
          v177[0] = 0;
          (*(void (**)(_QWORD, llvm::MachineInstr *, uint64_t, void **, void **, void **))(**(_QWORD **)(a1 + 256) + 552))(*(_QWORD *)(a1 + 256), v32, v43, &v188, &v185, &__src);
          if ((_DWORD)v189 && (byte_1ED8303C8 && *(_QWORD *)(a1 + 672) || byte_1ED830488 && *(_QWORD *)(a1 + 800)))
          {
            Trace = llvm::MachineTraceMetrics::Ensemble::getTrace(*(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368), (const llvm::MachineBasicBlock *)v22);
            sub_1C5140B78(a1, v32, (uint64_t)&v188, (uint64_t)&v185, (uint64_t)Trace, v45);
          }
          MEMORY[0x1CAA32FB4](__src, 4);
          if (v185 != v187)
            free(v185);
          if (v188 != v190)
            free(v188);
          v39 = v42 + 1;
          v41 -= 4;
        }
        while (v41);
        v39 = (unsigned int *)v178;
        v40 = v179;
      }
      if (!v40)
        goto LABEL_221;
      v142 = &v39[v40];
      do
      {
        v145 = v39;
        v46 = *v39;
        __src = v177;
        v176 = 0x1000000000;
        v172 = v174;
        v173 = 0x1000000000;
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v146 = v46;
        (*(void (**)(_QWORD, llvm::MachineInstr *))(**(_QWORD **)(a1 + 256) + 552))(*(_QWORD *)(a1 + 256), v32);
        v47 = v176;
        if (!(_DWORD)v176)
        {
          v50 = 7;
          goto LABEL_113;
        }
        v48 = v173;
        if (v140)
          v49 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 256) + 528))(*(_QWORD *)(a1 + 256), v146);
        else
          v49 = 0;
        v51 = v144;
        if ((v143 & (v144 != v37)) == 1)
        {
          llvm::MachineTraceMetrics::Ensemble::updateDepths(*(_QWORD **)(a1 + 368), v144, v37, (uint64_t)v181);
          v51 = v37;
        }
        v52 = v141 ^ 1;
        if ((v146 & 0xFFFFFFFE) != 6)
          v52 = 1;
        v144 = v51;
        if ((v52 & 1) == 0)
        {
          v53 = -1;
          v54 = v138;
          do
          {
            v54 = (llvm::MachineInstr *)*((_QWORD *)v54 + 1);
            ++v53;
          }
          while (v54 != v138);
          v55 = dword_1ED7FA5C0 >= v53;
          v56 = dword_1ED7FA5C0 < v53;
          v57 = v51;
          if (!v55)
            v57 = v37;
          v144 = v57;
          v169 = v171;
          v170 = 0x1000000000;
          v58 = v176;
          if (!(_DWORD)v176)
          {
LABEL_78:
            v166 = v168;
            v167 = 0x1000000000;
            v61 = v173;
            if (!(_DWORD)v173)
            {
LABEL_82:
              v143 |= v56;
              sub_1C51408C8(v22, (uint64_t *)v32, (uint64_t)&v169, (uint64_t)&v166, *(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368), (uint64_t)v181, *(_QWORD *)(a1 + 256), v146, v143 & 1);
              if (v166 != v168)
                free(v166);
              if (v169 != v171)
                free(v169);
              v37 = *(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8;
              if (!v37 || (*(_BYTE *)v37 & 4) == 0)
              {
                while ((*(_WORD *)(v37 + 44) & 4) != 0)
                  v37 = *(_QWORD *)v37 & 0xFFFFFFFFFFFFFFF8;
              }
LABEL_112:
              v139 = 1;
              v50 = 6;
              goto LABEL_113;
            }
            v62 = v168;
            v63 = v173;
            if (v173 >= 0x11uLL)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v166, (uint64_t)v168, v173, 8);
              v63 = v173;
              if (!(_DWORD)v173)
                goto LABEL_81;
              v62 = v166;
            }
            memcpy(v62, v172, 8 * v63);
LABEL_81:
            LODWORD(v167) = v61;
            goto LABEL_82;
          }
          v59 = v171;
          v60 = v176;
          if (v176 >= 0x11uLL)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v169, (uint64_t)v171, v176, 8);
            v60 = v176;
            if (!(_DWORD)v176)
              goto LABEL_77;
            v59 = v169;
          }
          memcpy(v59, __src, 8 * v60);
LABEL_77:
          LODWORD(v170) = v58;
          goto LABEL_78;
        }
        v64 = shouldOptimizeForSize;
        if (v47 >= v48)
          v64 = 0;
        if (((v49 | v64) & 1) != 0
          || (!byte_1ED8303C8 || !*(_QWORD *)(a1 + 672)) && (!byte_1ED830488 || !*(_QWORD *)(a1 + 800)))
        {
          v163 = v165;
          v164 = 0x1000000000;
          v65 = v176;
          if ((_DWORD)v176)
          {
            v66 = v165;
            v67 = v176;
            if (v176 < 0x11uLL)
              goto LABEL_101;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v163, (uint64_t)v165, v176, 8);
            v67 = v176;
            if ((_DWORD)v176)
            {
              v66 = v163;
LABEL_101:
              memcpy(v66, __src, 8 * v67);
            }
            LODWORD(v164) = v65;
          }
          v160 = v162;
          v161 = 0x1000000000;
          v68 = v173;
          if ((_DWORD)v173)
          {
            v69 = v162;
            v70 = v173;
            if (v173 < 0x11uLL)
              goto LABEL_105;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160, (uint64_t)v162, v173, 8);
            v70 = v173;
            if ((_DWORD)v173)
            {
              v69 = v160;
LABEL_105:
              memcpy(v69, v172, 8 * v70);
            }
            LODWORD(v161) = v68;
          }
          sub_1C51408C8(v22, (uint64_t *)v32, (uint64_t)&v163, (uint64_t)&v160, *(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368), (uint64_t)v181, *(_QWORD *)(a1 + 256), v146, v143 & 1);
          if (v160 != v162)
            free(v160);
          v71 = v163;
          v72 = v163 == v165;
LABEL_110:
          if (!v72)
            free(v71);
          goto LABEL_112;
        }
        v73 = (uint64_t *)llvm::MachineTraceMetrics::Ensemble::getTrace(*(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368), (const llvm::MachineBasicBlock *)v22);
        v75 = v74;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 120))(*(_QWORD *)(a1 + 360));
        v185 = v73;
        v133 = v75;
        v134 = (uint64_t)v73;
        v186 = v75;
        v188 = v190;
        v189 = 0x1000000000;
        if (!(_DWORD)v176)
        {
          v76 = STACK[0x400000794];
          goto LABEL_162;
        }
        v77 = 0;
        v78 = (char *)__src;
        v147 = (char *)__src + 8 * v176;
        v135 = v73 + 47;
        do
        {
          v79 = *(const llvm::MachineInstr **)v78;
          v80 = *(unsigned int *)(*(_QWORD *)v78 + 40);
          if ((_DWORD)v80)
          {
            v81 = v32;
            v82 = 0;
            v83 = (_DWORD *)*((_QWORD *)v79 + 4);
            v84 = &v83[8 * v80];
            while (1)
            {
              if (!*v83 && (*v83 & 0x1000000) == 0)
              {
                v85 = v83[1];
                if ((v85 & 0x80000000) != 0)
                  break;
              }
LABEL_140:
              v83 += 8;
              if (v83 == v84)
              {
                v77 = v189;
                v32 = v81;
                goto LABEL_156;
              }
            }
            if (v152)
            {
              LODWORD(v86) = (v152 - 1) & (37 * v85);
              v87 = &v150[2 * v86];
              v88 = *v87;
              if (v85 == *v87)
                goto LABEL_135;
              v95 = 1;
              while (v88 != -1)
              {
                v96 = v86 + v95++;
                v86 = v96 & (v152 - 1);
                v88 = v150[2 * v86];
                if (v85 == v88)
                {
                  v87 = &v150[2 * v86];
                  goto LABEL_135;
                }
              }
            }
            v87 = &v150[2 * v152];
LABEL_135:
            if (&v150[2 * v152] != v87)
            {
              v89 = v87[1];
              v90 = (const llvm::MachineInstr *)*((_QWORD *)__src + v89);
              LODWORD(v91) = *((_DWORD *)v188 + v89);
LABEL_137:
              RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx((uint64_t)v90, v85, 0, 0, 0);
              RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx((uint64_t)v79, v83[1], 0, 0);
              LODWORD(UniqueVRegDef) = llvm::TargetSchedModel::computeOperandLatency(v149, v90, RegisterDefOperandIdx, v79, RegisterUseOperandIdx);
              goto LABEL_138;
            }
            UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(v148 + 344), v85);
            if (UniqueVRegDef)
            {
              v90 = (const llvm::MachineInstr *)UniqueVRegDef;
              LODWORD(UniqueVRegDef) = 0;
              if (**((_WORD **)v90 + 2))
              {
                LODWORD(v91) = 0;
                if (**((_WORD **)v90 + 2) != 69)
                {
                  v191 = (const llvm::MachineBasicBlock **)v90;
                  v153[0] = 0;
                  LODWORD(v91) = 0;
                  if (sub_1C61252B8(v135, &v191, v153))
                    v91 = *(_QWORD *)(v153[0] + 8);
                  v85 = v83[1];
                  goto LABEL_137;
                }
              }
              else
              {
                LODWORD(v91) = 0;
              }
            }
            else
            {
              LODWORD(v91) = 0;
            }
LABEL_138:
            if (v82 <= (int)v91 + (int)UniqueVRegDef)
              v82 = v91 + UniqueVRegDef;
            goto LABEL_140;
          }
          v82 = 0;
LABEL_156:
          if (v77 >= HIDWORD(v189))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v188, (uint64_t)v190, v77 + 1, 4);
            v77 = v189;
          }
          *((_DWORD *)v188 + v77) = v82;
          v77 = v189 + 1;
          LODWORD(v189) = v189 + 1;
          v78 += 8;
        }
        while (v78 != v147);
        v76 = *((_DWORD *)v188 + (v176 - 1));
        if (v188 != v190)
          free(v188);
        a1 = v148;
        v22 = v136;
        v73 = (uint64_t *)v134;
LABEL_162:
        v188 = v32;
        v191 = 0;
        if (sub_1C61252B8(v73 + 47, &v188, &v191))
          v97 = *((_DWORD *)v191 + 2);
        else
          v97 = 0;
        if (v146 > 5)
        {
          v121 = sub_1C5140B78(a1, v32, (uint64_t)&__src, (uint64_t)&v172, v134, v133);
          v122 = v121;
          v123 = HIDWORD(v121);
          InstrSlack = llvm::MachineTraceMetrics::Trace::getInstrSlack((llvm::MachineTraceMetrics::Trace *)&v185, v32);
          if ((v143 & 1) != 0)
            v125 = 0;
          else
            v125 = InstrSlack;
          if (v76 + v122 <= v97 + v123 + v125)
            goto LABEL_167;
          goto LABEL_176;
        }
        if (v76 >= v97)
          goto LABEL_176;
LABEL_167:
        v153[0] = v134;
        v153[1] = v133;
        if (!byte_1ED8303C8 || !*(_QWORD *)(a1 + 672))
          goto LABEL_191;
        v191 = v193;
        v193[0] = (const llvm::MachineBasicBlock *)v22;
        v192 = 0x100000001;
        ResourceLength = llvm::MachineTraceMetrics::Trace::getResourceLength(v153, v193, 1, 0, 0, 0, 0);
        v188 = v190;
        v189 = 0x1000000000;
        v185 = v187;
        v186 = 0x1000000000;
        sub_1C5140D68((_QWORD *)a1, (uint64_t)__src, v176, (uint64_t)&v188);
        sub_1C5140D68((_QWORD *)a1, (uint64_t)v172, v173, (uint64_t)&v185);
        v99 = llvm::MachineTraceMetrics::Trace::getResourceLength(v153, v191, v192, (uint64_t *)v188, v189, (uint64_t *)v185, v186);
        v100 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 560))(*(_QWORD *)(a1 + 256));
        if (v185 != v187)
          free(v185);
        if (v188 != v190)
          free(v188);
        if (v191 != v193)
          free(v191);
        if (v99 <= v100 + ResourceLength)
        {
LABEL_191:
          v109 = -1;
          v110 = v138;
          do
          {
            v110 = (llvm::MachineInstr *)*((_QWORD *)v110 + 1);
            ++v109;
          }
          while (v110 != v138);
          v55 = dword_1ED7FA5C0 >= v109;
          v111 = dword_1ED7FA5C0 < v109;
          v112 = v144;
          if (!v55)
            v112 = v37;
          v144 = v112;
          v157 = v159;
          v158 = 0x1000000000;
          v113 = v176;
          if ((_DWORD)v176)
          {
            v114 = v159;
            v115 = v176;
            if (v176 < 0x11uLL)
              goto LABEL_197;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v157, (uint64_t)v159, v176, 8);
            v115 = v176;
            if ((_DWORD)v176)
            {
              v114 = v157;
LABEL_197:
              memcpy(v114, __src, 8 * v115);
            }
            LODWORD(v158) = v113;
          }
          v154 = v156;
          v155 = 0x1000000000;
          v116 = v173;
          if ((_DWORD)v173)
          {
            v117 = v156;
            v118 = v173;
            if (v173 < 0x11uLL)
              goto LABEL_201;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, (uint64_t)v156, v173, 8);
            v118 = v173;
            if ((_DWORD)v173)
            {
              v117 = v154;
LABEL_201:
              memcpy(v117, v172, 8 * v118);
            }
            LODWORD(v155) = v116;
          }
          v143 |= v111;
          sub_1C51408C8(v22, (uint64_t *)v32, (uint64_t)&v157, (uint64_t)&v154, *(llvm::MachineTraceMetrics::Ensemble **)(a1 + 368), (uint64_t)v181, *(_QWORD *)(a1 + 256), v146, v143 & 1);
          if (v154 != v156)
            free(v154);
          v71 = v157;
          v72 = v157 == v159;
          goto LABEL_110;
        }
LABEL_176:
        if ((_DWORD)v176)
        {
          v101 = (char *)__src;
          v102 = *(_QWORD *)(v22 + 32);
          v103 = (uint64_t *)(v102 + 232);
          v104 = 8 * v176;
          do
          {
            v105 = *(_QWORD *)v101;
            v106 = *(_QWORD **)(*(_QWORD *)v101 + 32);
            if (v106)
            {
              v107 = *(unsigned __int8 *)(v105 + 47);
              if (*(_DWORD *)(v102 + 240) <= v107)
                sub_1C515FA1C(v102 + 232, v107 + 1);
              v108 = *v103;
              *v106 = *(_QWORD *)(*v103 + 8 * v107);
              *(_QWORD *)(v108 + 8 * v107) = v106;
            }
            *(_QWORD *)v105 = *(_QWORD *)(v102 + 224);
            *(_QWORD *)(v102 + 224) = v105;
            v101 += 8;
            v104 -= 8;
            v22 = v136;
          }
          while (v104);
        }
        if (v151)
        {
          a1 = v148;
          if (v152 <= 4 * (int)v151 || v152 < 0x41)
          {
            if (v152)
            {
              v119 = v150;
              v120 = 8 * v152;
              do
              {
                *v119 = -1;
                v119 += 2;
                v120 -= 8;
              }
              while (v120);
            }
            v50 = 0;
            v151 = 0;
          }
          else
          {
            sub_1C476BF54(&v150);
            v50 = 0;
          }
        }
        else
        {
          v50 = 0;
          a1 = v148;
        }
LABEL_113:
        MEMORY[0x1CAA32FB4](v150, 4);
        if (v172 != v174)
          free(v172);
        if (__src != v177)
          free(__src);
        if (v50 != 7 && v50)
          break;
        v39 = v145 + 1;
      }
      while (v145 + 1 != v142);
      v39 = (unsigned int *)v178;
LABEL_221:
      v32 = (llvm::MachineInstr *)v37;
LABEL_222:
      if (v39 != (unsigned int *)v180)
        free(v39);
    }
    while (v32 != v138);
    v126 = v139;
    if ((v139 & v143 & 1) != 0)
    {
      v127 = *(_QWORD *)(a1 + 360);
      *(_DWORD *)(*(_QWORD *)(v127 + 568) + 8 * *(int *)(v22 + 24)) = -1;
      v128 = *(llvm::MachineTraceMetrics::Ensemble **)(v127 + 632);
      if (v128)
        llvm::MachineTraceMetrics::Ensemble::invalidate(v128, (const llvm::MachineBasicBlock *)v22);
      v126 = 1;
    }
LABEL_230:
    free(v183);
    if (v181[0] != v182)
      free(v181[0]);
    v23 = v132 | v126;
    v22 = *(_QWORD *)(v22 + 8);
  }
  while ((_QWORD *)v22 != v130);
  return v23 & 1;
}

void sub_1C51408C8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, llvm::MachineTraceMetrics::Ensemble *a5, uint64_t a6, uint64_t a7, int a8, char a9)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;

  v46 = a8;
  (*(void (**)(uint64_t, uint64_t *, int *, uint64_t))(*(_QWORD *)a7 + 520))(a7, a2, &v46, a3);
  v15 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v15)
  {
    v16 = *(uint64_t **)a3;
    v17 = *(_QWORD *)a3 + 8 * v15;
    do
    {
      v18 = *v16;
      v19 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(v18 + 24) = v19;
      v20 = *(_QWORD *)(v19 + 32);
      v21 = *(unsigned int *)(v18 + 40);
      if ((_DWORD)v21)
      {
        v24 = *(_QWORD *)(v18 + 32);
        v25 = *(_QWORD *)(v20 + 40);
        v26 = 32 * v21;
        do
        {
          if (!*(_BYTE *)v24)
          {
            v27 = *(unsigned int *)(v24 + 4);
            if ((int)v27 >= 0)
              v28 = (uint64_t *)(*(_QWORD *)(v25 + 272) + 8 * v27);
            else
              v28 = (uint64_t *)(*(_QWORD *)(v25 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
            v29 = *v28;
            if (*v28)
            {
              v30 = *(_QWORD *)(v29 + 16);
              *(_QWORD *)(v29 + 16) = v24;
              *(_QWORD *)(v24 + 16) = v30;
              if ((*(_BYTE *)(v24 + 3) & 1) != 0)
              {
                *(_QWORD *)(v24 + 24) = v29;
              }
              else
              {
                *(_QWORD *)(v24 + 24) = 0;
                v28 = (uint64_t *)(v30 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v24 + 16) = v24;
              *(_QWORD *)(v24 + 24) = 0;
            }
            *v28 = v24;
          }
          v24 += 32;
          v26 -= 32;
        }
        while (v26);
      }
      v22 = *(_QWORD *)(v20 + 728);
      if (v22)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 24))(v22, v18);
      v23 = *a2 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v18 = v23 | *(_QWORD *)v18 & 7;
      *(_QWORD *)(v18 + 8) = a2;
      *(_QWORD *)(v23 + 8) = v18;
      *a2 = *a2 & 7 | v18;
      ++v16;
    }
    while (v16 != (uint64_t *)v17);
  }
  v31 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v31)
  {
    v32 = *(uint64_t **)a4;
    v33 = *(_QWORD *)a4 + 8 * v31;
    do
    {
      v34 = (_BYTE *)*v32;
      v35 = *v32;
      if ((*(_BYTE *)*v32 & 4) == 0)
      {
        v35 = *v32;
        if ((*((_WORD *)v34 + 22) & 8) != 0)
        {
          v35 = *v32;
          do
            v35 = *(_QWORD *)(v35 + 8);
          while ((*(_WORD *)(v35 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*((_QWORD *)v34 + 3) + 40, *v32, *(_QWORD *)(v35 + 8));
      v36 = *(_DWORD *)(a6 + 8);
      if (v36)
      {
        v37 = *(_QWORD *)a6;
        v38 = *(_QWORD *)a6 + 24 * v36;
        v39 = *(_QWORD *)a6;
        do
        {
          if (*(_BYTE **)(v39 + 8) == v34)
          {
            v40 = v38 - 24;
            if (v40 != v39)
            {
              v41 = *(_OWORD *)v40;
              *(_DWORD *)(v39 + 16) = *(_DWORD *)(v40 + 16);
              *(_OWORD *)v39 = v41;
              *(_BYTE *)(*(_QWORD *)(a6 + 208) + *(unsigned int *)(*(_QWORD *)a6 + 24 * *(unsigned int *)(a6 + 8) - 24)) = -85 * ((v39 - *(_QWORD *)a6) >> 3);
              v36 = *(_DWORD *)(a6 + 8);
              v37 = *(_QWORD *)a6;
            }
            *(_DWORD *)(a6 + 8) = --v36;
          }
          else
          {
            v39 += 24;
          }
          v38 = v37 + 24 * v36;
        }
        while (v39 != v38);
      }
      ++v32;
    }
    while (v32 != (uint64_t *)v33);
  }
  if ((a9 & 1) != 0)
  {
    v42 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v42)
    {
      v43 = *(uint64_t **)a3;
      v44 = 8 * v42;
      do
      {
        v45 = *v43++;
        llvm::MachineTraceMetrics::Ensemble::updateDepth(a5, *((_QWORD *)a5 + 1) + 88 * *(int *)(a1 + 24), v45, a6);
        v44 -= 8;
      }
      while (v44);
    }
  }
  else
  {
    llvm::MachineTraceMetrics::Ensemble::invalidate(a5, (const llvm::MachineBasicBlock *)a1);
  }
}

uint64_t sub_1C5140B78(uint64_t a1, llvm::MachineInstr *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  const llvm::MachineInstr *v23;
  uint64_t RegisterDefOperandIdx;
  uint64_t RegisterUseOperandIdx;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  const llvm::MachineInstr **v29;
  llvm::TargetSchedModel *v30;
  uint64_t v31;
  const llvm::MachineInstr *v32;
  uint64_t v33;
  _QWORD v36[2];

  v10 = *(unsigned int *)(a3 + 8);
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 8 * v10 - 8);
  if ((_DWORD)v10 == 1)
  {
    v12 = 0;
  }
  else
  {
    v14 = 0;
    v12 = 0;
    v15 = 1;
    do
    {
      v12 += llvm::TargetSchedModel::computeInstrLatency((llvm::TargetSchedModel *)(a1 + 632), *(const llvm::MachineInstr **)(*(_QWORD *)a3 + 8 * v14), 1);
      v14 = v15;
    }
    while ((unint64_t)*(unsigned int *)(a3 + 8) - 1 > v15++);
  }
  v36[0] = a5;
  v36[1] = a6;
  v17 = *(unsigned int *)(v11 + 40);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = 32 * v17;
    v20 = (unsigned int *)(*(_QWORD *)(v11 + 32) + 4);
    do
    {
      if (!*(v20 - 1) && (*(v20 - 1) & 0x1000000) != 0)
      {
        v21 = *v20;
        if ((*v20 & 0x80000000) != 0)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 344) + 24) + 16 * (v21 & 0x7FFFFFFF) + 8) + 24);
          if (v22)
          {
            v23 = *(const llvm::MachineInstr **)(v22 + 8);
            if (v23
              && llvm::MachineTraceMetrics::Trace::isDepInTrace((llvm::MachineTraceMetrics::Trace *)v36, a2, *(const llvm::MachineInstr **)(v22 + 8)))
            {
              RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v11, v21, 0, 0, 0);
              RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx((uint64_t)v23, *v20, 0, 0);
              v26 = llvm::TargetSchedModel::computeOperandLatency((llvm::TargetSchedModel *)(a1 + 632), (const llvm::MachineInstr *)v11, RegisterDefOperandIdx, v23, RegisterUseOperandIdx);
            }
            else
            {
              v26 = llvm::TargetSchedModel::computeInstrLatency((llvm::TargetSchedModel *)(a1 + 632), (const llvm::MachineInstr *)v11, 1);
            }
            if (v18 <= v26)
              v18 = v26;
          }
        }
      }
      v20 += 8;
      v19 -= 32;
    }
    while (v19);
  }
  else
  {
    v18 = 0;
  }
  v27 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v27)
  {
    LODWORD(v28) = 0;
    v29 = *(const llvm::MachineInstr ***)a4;
    v30 = (llvm::TargetSchedModel *)(a1 + 632);
    v31 = 8 * v27;
    do
    {
      v32 = *v29++;
      v28 = llvm::TargetSchedModel::computeInstrLatency(v30, v32, 1) + v28;
      v31 -= 8;
    }
    while (v31);
    v33 = v28 << 32;
  }
  else
  {
    v33 = 0;
  }
  return v33 | (v18 + v12);
}

_QWORD *sub_1C5140D68(_QWORD *result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (a3)
  {
    v6 = result;
    v7 = a4 + 16;
    v8 = *(_DWORD *)(a4 + 8);
    v9 = 8 * a3;
    do
    {
      v10 = *(unsigned __int16 *)(*(_QWORD *)(v6[32] + 8) + 48 * **(unsigned __int16 **)(*(_QWORD *)a2 + 16) + 6);
      v11 = v6[39];
      if (v8 >= *(_DWORD *)(a4 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v7, v8 + 1, 8);
        v8 = *(_DWORD *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v8) = v11 + 24 * v10;
      v8 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v8;
      a2 += 8;
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

__n128 sub_1C5140E3C(_WORD *a1, __n128 *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FA6C0, "machine-combiner-verify-pattern-order", 0x25uLL);
  word_1ED7FA6CA = (32 * (*a1 & 3)) | word_1ED7FA6CA & 0xFF9F;
  result = *a2;
  xmmword_1ED7FA6E0 = (__int128)*a2;
  v7 = *a3;
  byte_1ED7FA740 = **a3;
  byte_1ED7FA751 = 1;
  byte_1ED7FA750 = *v7;
  return result;
}

uint64_t sub_1C5140EC0()
{
  int v1;
  int *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Incremental depth computation will be used for basic blocks with more instructions.";
  v3.n128_u64[1] = 83;
  v1 = 500;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED7FA540, "machine-combiner-inc-threshold", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FA540, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Dump all substituted intrs";
  v3.n128_u64[1] = 26;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7FA600, "machine-combiner-dump-subst-intrs", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FA600, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Verify that the generated patterns are ordered by increasing latency";
  v3.n128_u64[1] = 68;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C61EB720(&v4, &v3, (char **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FA6C0, &dword_1C475E000);
}

uint64_t sub_1C5140FE8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Machine Copy Propagation Pass";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "machine-cp";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6F29;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5141078;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5141078()
{
  uint64_t v0;
  uint64_t v1;
  int64x2_t v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6F29);
  *(_QWORD *)v1 = &off_1E8144380;
  *(_QWORD *)(v1 + 272) = 1;
  v2 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(v0 + 280) = v2;
  *(int64x2_t *)(v0 + 296) = v2;
  *(int64x2_t *)(v0 + 312) = v2;
  *(int64x2_t *)(v0 + 328) = v2;
  *(_QWORD *)(v1 + 344) = v1 + 360;
  *(_QWORD *)(v1 + 352) = 0x800000000;
  *(_QWORD *)(v1 + 424) = 0;
  *(_QWORD *)(v1 + 432) = 0;
  *(_DWORD *)(v1 + 440) = 0;
  *(_QWORD *)(v1 + 448) = 0;
  *(_QWORD *)(v1 + 456) = 0;
  *(_DWORD *)(v1 + 464) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED7FA788);
  if (v4 != -1)
  {
    v8[0] = sub_1C5140FE8;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED7FA788, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5141194(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)a1 = &off_1E8144380;
  v2 = *(unsigned int *)(a1 + 464);
  v3 = *(_QWORD *)(a1 + 448);
  if ((_DWORD)v2)
  {
    v4 = 56 * v2;
    v5 = (_QWORD *)(v3 + 32);
    do
    {
      if (*((_DWORD *)v5 - 8) <= 0xFFFFFFFD)
      {
        v6 = (_QWORD *)*(v5 - 2);
        if (v5 != v6)
          free(v6);
      }
      v5 += 7;
      v4 -= 56;
    }
    while (v4);
    v3 = *(_QWORD *)(a1 + 448);
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  sub_1C5142760((unsigned int *)(a1 + 424));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 424), 8);
  v7 = *(void **)(a1 + 344);
  if (v7 != (void *)(a1 + 360))
    free(v7);
  if ((*(_BYTE *)(a1 + 272) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 280), 8);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v8 = *(void **)(a1 + 176);
  if (v8 != (void *)(a1 + 192))
    free(v8);
  v9 = *(void **)(a1 + 104);
  if (v9 != (void *)(a1 + 120))
    free(v9);
  v10 = *(void **)(a1 + 32);
  if (v10 != (void *)(a1 + 48))
    free(v10);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C51412AC(uint64_t a1)
{
  sub_1C5141194(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51412D0(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

BOOL sub_1C5141300(uint64_t a1, uint64_t a2)
{
  _QWORD *v5;
  int32x2_t *v6;
  unsigned int *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  _DWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD **v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  const llvm::TargetRegisterInfo *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  llvm::MachineInstr *v36;
  uint64_t v37;
  unint64_t v38;
  _WORD *v39;
  _BOOL4 v40;
  unsigned __int16 v41;
  unsigned __int16 *v42;
  int v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t RegClassConstraint;
  unsigned int *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  int *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  _QWORD *v71;
  void *v72;
  _QWORD *v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  unint64_t v80;
  int v81;
  int v82;
  unsigned int v83;
  int *v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  _WORD *v93;
  unsigned __int16 *v94;
  __int16 v95;
  unsigned __int16 v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t *v110;
  unsigned int *v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  unint64_t *v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unsigned int v127;
  BOOL v128;
  uint64_t v129;
  unsigned int NumExplicitOperands;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  int v134;
  int v135;
  int v136;
  BOOL v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  _DWORD *v146;
  _DWORD *v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int *v160;
  uint64_t v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  int v168;
  BOOL v169;
  unsigned int v170;
  _QWORD *v171;
  _QWORD *v172;
  void *v173;
  unint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int *v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  uint64_t v189;
  unint64_t *v190;
  unsigned int *v191;
  uint64_t v192;
  unint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int *v197;
  unint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  _QWORD **v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t **v220;
  _QWORD *v221;
  _QWORD *v222;
  char *v223;
  int32x2_t *v224;
  uint64_t v225;
  llvm::MachineInstr *v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  _QWORD v230[8];

  v230[6] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(const llvm::Function **)a2) & 1) != 0)
    return 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD **)(a2 + 328);
  v218 = (_QWORD *)(a2 + 320);
  if (v5 != (_QWORD *)(a2 + 320))
  {
    v6 = (int32x2_t *)(a1 + 448);
    v223 = (char *)(a1 + 272);
    v220 = (uint64_t **)(a1 + 344);
    v216 = a1 + 360;
    v217 = (_QWORD **)(a1 + 280);
    v7 = (unsigned int *)(a1 + 424);
    v224 = (int32x2_t *)(a1 + 448);
    v225 = a1 + 424;
    do
    {
      v219 = v5;
      v222 = v5 + 6;
      v8 = v5[6] & 0xFFFFFFFFFFFFFFF8;
      if (!v8 || (*(_BYTE *)v8 & 4) == 0)
      {
        while ((*(_WORD *)(v8 + 44) & 4) != 0)
          v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((_QWORD *)v8 != v222)
      {
        v9 = v8;
        v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
        if (!v8 || (*(_BYTE *)v8 & 4) == 0)
        {
          while ((*(_WORD *)(v8 + 44) & 4) != 0)
            v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
        }
        v10 = *(unsigned int *)(v9 + 40);
        v11 = **(_WORD **)(v9 + 16) == 19 && (_DWORD)v10 == 2;
        v226 = (llvm::MachineInstr *)v9;
        if (v11)
        {
          v15 = *(_QWORD *)(v9 + 32);
          v16 = (_DWORD **)(v9 + 32);
          v17 = *(unsigned int *)(v15 + 4);
          v18 = *(unsigned int *)(v15 + 36);
          if ((_DWORD)v17 == (_DWORD)v18)
            goto LABEL_34;
          v19 = *(_QWORD *)(a1 + 248);
          v20 = (v17 - 1) > 0x3FFFFFFE || (v18 - 1) > 0x3FFFFFFE;
          if (!v20
            && llvm::MCRegisterInfo::regsOverlap((_QWORD *)(v19 + 8), *(_DWORD *)(v15 + 4), *(_DWORD *)(v15 + 36)))
          {
            goto LABEL_34;
          }
          if (!(_DWORD)v17 || (_DWORD)v18 == 0)
            goto LABEL_34;
          v22 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 352);
          if (((*(_QWORD *)(v22 + ((v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) != 0)
            goto LABEL_34;
          if (((*(_QWORD *)(v22 + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1) != 0)
            goto LABEL_34;
          v99 = *(_DWORD *)(v15 + 32);
          if ((v99 & 0x8000000) == 0)
            goto LABEL_34;
          v100 = *(_QWORD *)(v15 + 40);
          if (v100)
          {
            v101 = *(_QWORD *)(*(_QWORD *)(v100 + 16) + 8);
            if ((v99 & 0x1000000) != 0)
            {
              if ((v101 & 0x100000000) == 0)
                goto LABEL_156;
            }
            else if ((v101 & 0x80000000) == 0)
            {
              goto LABEL_156;
            }
LABEL_34:
            v13 = v16;
            v12 = *v16;
            v14 = (uint64_t)(*v16 + 16);
            v6 = (int32x2_t *)(a1 + 448);
            do
            {
LABEL_35:
              if ((*v12 & 0x400000FF) == 0x40000000)
              {
                v23 = v12[1];
                if (v23)
                  sub_1C51427D0(v6, v23, *(_QWORD *)(a1 + 248));
              }
              v12 += 8;
            }
            while (v12 != (_DWORD *)v14);
            v7 = (unsigned int *)(a1 + 424);
            v24 = *((unsigned int *)v226 + 10);
            if (*(_DWORD *)(a1 + 456))
            {
              if (*((_DWORD *)v226 + 10))
              {
                v25 = 0;
                v221 = v13;
                while (1)
                {
                  v26 = (unsigned int *)(*v13 + 32 * v25);
                  v27 = *v26;
                  if ((*v26 & 0x13F000FF) != 0x1000000)
                    goto LABEL_118;
                  if ((v27 & 0x8000000) == 0)
                    goto LABEL_118;
                  v28 = v26 + 1;
                  if (!v26[1])
                    goto LABEL_118;
                  v29 = *(_QWORD *)(*v13 + 32 * v25 + 8);
                  if (!v29)
                    goto LABEL_50;
                  v30 = *(_QWORD *)(*(_QWORD *)(v29 + 16) + 8);
                  if ((v27 & 0x1000000) == 0)
                    break;
                  if ((v30 & 0x100000000) == 0)
                    goto LABEL_50;
LABEL_118:
                  if (++v25 == v24)
                  {
                    v7 = (unsigned int *)(a1 + 424);
                    v24 = *((unsigned int *)v226 + 10);
                    v6 = (int32x2_t *)(a1 + 448);
                    goto LABEL_129;
                  }
                }
                if ((v30 & 0x80000000) != 0)
                  goto LABEL_118;
LABEL_50:
                v228 = 0;
                v31 = *v28;
                v32 = *(const llvm::TargetRegisterInfo **)(a1 + 248);
                v33 = *((_QWORD *)v32 + 1);
                v34 = *(unsigned int *)(v33 + 24 * *v28 + 16);
                v35 = *((_QWORD *)v32 + 7);
                v36 = (llvm::MachineInstr *)sub_1C5143044(*(_QWORD *)(a1 + 448), *(_DWORD *)(a1 + 464), (unsigned __int16)(*(_WORD *)(v35 + ((v34 >> 3) & 0x1FFFFFFE))+ (v34 & 0xF) * *v28), v33, v35);
                if (v36)
                {
                  v37 = *((_QWORD *)v36 + 4);
                  v38 = *(unsigned int *)(v37 + 36);
                  if ((_DWORD)v38 == v31)
                    goto LABEL_63;
                  v39 = (_WORD *)(v35 + 2 * *(unsigned int *)(v33 + 24 * v31 + 8));
                  v40 = *v39 != 0;
                  if (*v39)
                  {
                    v41 = *v39 + v31;
                    if ((_DWORD)v38 != v41)
                    {
                      v42 = v39 + 1;
                      do
                      {
                        v44 = *v42++;
                        v43 = v44;
                        v41 += v44;
                        v40 = v44 != 0;
                        if (!v44)
                          v42 = 0;
                        if (v43)
                          v45 = (_DWORD)v38 == v41;
                        else
                          v45 = 1;
                      }
                      while (!v45);
                    }
                  }
                  if (v40)
                  {
LABEL_63:
                    if (v36 != v226)
                    {
                      v46 = *(unsigned int *)(v37 + 4);
                      v47 = v46 >> 5;
                      v48 = 1 << v46;
                      v49 = (unint64_t)v36;
                      while (1)
                      {
                        v50 = *(unsigned int *)(v49 + 40);
                        if ((_DWORD)v50)
                          break;
LABEL_71:
                        v49 = *(_QWORD *)v49 & 0xFFFFFFFFFFFFFFF8;
                        if (v226 == (llvm::MachineInstr *)v49)
                          goto LABEL_72;
                      }
                      v51 = 32 * v50;
                      v52 = (_QWORD *)(*(_QWORD *)(v49 + 32) + 16);
                      while (*((_BYTE *)v52 - 16) != 12
                           || (*(_DWORD *)(*v52 + 4 * (v38 >> 5)) & (1 << v38)) != 0
                           && (*(_DWORD *)(*v52 + 4 * v47) & v48) != 0)
                      {
                        v52 += 4;
                        v51 -= 32;
                        if (!v51)
                          goto LABEL_71;
                      }
                      goto LABEL_117;
                    }
LABEL_72:
                    v228 = v36;
                    if (*v28 == (_DWORD)v38)
                    {
                      v53 = *(unsigned int *)(v37 + 4);
                      RegClassConstraint = llvm::MachineInstr::getRegClassConstraint(v226, v25, *(const llvm::TargetInstrInfo **)(a1 + 256), v32);
                      if (RegClassConstraint)
                      {
                        if ((v53 - 1) <= 0x3FFFFFFE
                          && (v53 >> 3) < *(unsigned __int16 *)(*(_QWORD *)RegClassConstraint + 22)
                          && ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)RegClassConstraint + 8) + (v53 >> 3)) >> (v53 & 7)) & 1) != 0
                          && (sub_1C51436A0(a1, (uint64_t)v226, v26) & 1) == 0)
                        {
                          v55 = (unsigned int *)*((_QWORD *)v226 + 4);
                          v56 = *((_QWORD *)v226 + 2);
                          v57 = *(unsigned __int8 *)(v56 + 4);
                          if ((*(_BYTE *)(v56 + 8) & 2) == 0 || (v81 = *((_DWORD *)v226 + 10), v81 == v57))
                          {
                            v58 = v57;
                          }
                          else
                          {
                            v82 = v81 - 1;
                            v58 = v57;
                            do
                            {
                              v83 = v55[8 * v57];
                              if ((v83 & 0x10000FF) != 0x1000000)
                                break;
                              v58 += (v83 & 0x2000000) == 0;
                              if (v82 == v57)
                                break;
                              ++v57;
                            }
                            while ((v83 & 0x2000000) == 0);
                          }
                          if (v58)
                          {
                            v59 = 32 * v58;
                            do
                            {
                              if (v55 != v26 && !*(_BYTE *)v55)
                              {
                                v60 = v55[1];
                                if (v60 == (_DWORD)v53
                                  || v60 - 1 <= 0x3FFFFFFE
                                  && llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)(a1 + 248) + 8), v53, v60))
                                {
                                  goto LABEL_117;
                                }
                              }
                              v55 += 8;
                              v59 -= 32;
                            }
                            while (v59);
                          }
                          llvm::MachineOperand::setReg((uint64_t)v26, v53);
                          v61 = (int *)*((_QWORD *)v228 + 4);
                          v62 = *v61;
                          if ((*v61 & 0x8000000) != 0)
                          {
                            v63 = *((_QWORD *)v61 + 1);
                            if (v63)
                            {
                              v64 = *(_QWORD *)(*(_QWORD *)(v63 + 16) + 8);
                              v65 = *v26;
                              if ((v62 & 0x1000000) != 0)
                              {
                                if ((v64 & 0x100000000) != 0)
                                  goto LABEL_95;
                              }
                              else if ((v64 & 0x80000000) != 0)
                              {
LABEL_95:
                                v66 = 0;
                                goto LABEL_96;
                              }
                            }
                            else
                            {
                              v65 = *v26;
                            }
                            v66 = 0x8000000;
                            goto LABEL_96;
                          }
                          v66 = 0;
                          v65 = *v26;
LABEL_96:
                          *v26 = v65 & 0xF7FFFFFF | v66;
                          if ((*v223 & 1) != 0)
                          {
                            v67 = 8;
                            v68 = a1 + 280;
LABEL_100:
                            v69 = v67 - 1;
                            v70 = ((v228 >> 4) ^ (v228 >> 9)) & v69;
                            v71 = (_QWORD *)(v68 + 8 * v70);
                            v72 = (void *)*v71;
                            if (v228 != (void *)*v71)
                            {
                              v73 = 0;
                              v74 = 1;
                              while (v72 != (void *)-4096)
                              {
                                if (v73)
                                  v75 = 0;
                                else
                                  v75 = v72 == (void *)-8192;
                                if (v75)
                                  v73 = v71;
                                v76 = v70 + v74++;
                                v70 = v76 & v69;
                                v71 = (_QWORD *)(v68 + 8 * v70);
                                v72 = (void *)*v71;
                                if (v228 == (void *)*v71)
                                  goto LABEL_116;
                              }
                              if (v73)
                                v77 = v73;
                              else
                                v77 = v71;
                              goto LABEL_113;
                            }
                          }
                          else
                          {
                            v67 = *(_DWORD *)(a1 + 288);
                            if (v67)
                            {
                              v68 = *(_QWORD *)(a1 + 280);
                              goto LABEL_100;
                            }
                            v77 = 0;
LABEL_113:
                            v78 = sub_1C486D2E8((uint64_t)v223, (uint64_t)&v228, &v228, v77);
                            *v78 = v228;
                            v79 = v228;
                            v80 = *(unsigned int *)(a1 + 352);
                            if (v80 >= *(unsigned int *)(a1 + 356))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v220, v216, v80 + 1, 8);
                              v80 = *(unsigned int *)(a1 + 352);
                            }
                            *(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * v80) = v79;
                            ++*(_DWORD *)(a1 + 352);
                          }
LABEL_116:
                          *(_BYTE *)(a1 + 472) = 1;
                        }
                      }
                    }
                  }
                }
LABEL_117:
                v13 = v221;
                goto LABEL_118;
              }
            }
            else
            {
LABEL_129:
              if (v24)
              {
                v84 = (int *)*v13;
                v85 = *v13 + 32 * v24;
                do
                {
                  v86 = *v84;
                  if (!*v84)
                  {
                    v87 = v84[1];
                    if (v87)
                    {
                      if ((v86 & 0x1000000) != 0)
                      {
                        sub_1C51427D0(v6, v87, *(_QWORD *)(a1 + 248));
                        v86 = *v84;
                      }
                      if ((v86 & 0x30000000) == 0 && (v86 & 0x10FFF00) != 0x1000000)
                      {
                        v89 = v84[1];
                        v90 = *(_QWORD *)(a1 + 248);
                        if (v86 < 0)
                        {
                          v91 = (_QWORD *)(v90 + 8);
                          if (!v90)
                            v91 = 0;
                          v92 = *(unsigned int *)(*v91 + 24 * v89 + 16);
                          v93 = (_WORD *)(v91[6] + ((v92 >> 3) & 0x1FFFFFFE));
                          v95 = *v93;
                          v94 = v93 + 1;
                          v96 = v95 + (v92 & 0xF) * v89;
                          do
                          {
                            v228 = (void *)sub_1C5143044(*(_QWORD *)(a1 + 448), *(_DWORD *)(a1 + 464), v96, *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 248) + 56));
                            if (v228)
                            {
                              sub_1C5143868((uint64_t)v7, (uint64_t *)&v228);
                              sub_1C4774094((llvm::SmallPtrSetImplBase *)(v97 + 8), (uint64_t)v226);
                            }
                            v98 = *v94++;
                            v96 += v98;
                          }
                          while (v98);
                        }
                        else
                        {
                          sub_1C51427D0(v6, v89, v90);
                        }
                      }
                    }
                  }
                  v84 += 8;
                }
                while (v84 != (int *)v85);
              }
            }
          }
          else
          {
LABEL_156:
            if (((v99 >> 26) & ~HIBYTE(v99) & 1) == 0)
              goto LABEL_34;
            v6 = (int32x2_t *)(a1 + 448);
            sub_1C51427D0(v224, v18, v19);
            sub_1C51427D0(v224, v17, *(_QWORD *)(a1 + 248));
            sub_1C5142B14((uint64_t)v224, (uint64_t)v226, *(_QWORD *)(a1 + 248));
            v7 = (unsigned int *)(a1 + 424);
          }
        }
        else if ((_DWORD)v10)
        {
          v13 = (_QWORD *)(v9 + 32);
          v12 = *(_DWORD **)(v9 + 32);
          v14 = (uint64_t)&v12[8 * v10];
          goto LABEL_35;
        }
      }
      v102 = *(unsigned int *)(a1 + 352);
      if ((_DWORD)v102)
      {
        v103 = *(uint64_t **)(a1 + 344);
        v104 = &v103[v102];
        do
        {
          v105 = *v103;
          v227 = v105;
          v106 = *(_QWORD *)(v105 + 32);
          v107 = *(_DWORD *)(v106 + 36);
          v108 = *(_DWORD *)(v106 + 4);
          sub_1C5143868((uint64_t)v7, &v227);
          v110 = *(unint64_t **)(v109 + 16);
          if (v110 == *(unint64_t **)(v109 + 8))
            v111 = (unsigned int *)(v109 + 28);
          else
            v111 = (unsigned int *)(v109 + 24);
          v112 = *v111;
          v113 = &v110[v112];
          if ((_DWORD)v112)
          {
            v114 = 8 * v112;
            while (*v110 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v110;
              v114 -= 8;
              if (!v114)
              {
                v110 = v113;
                break;
              }
            }
          }
          sub_1C5143868(v225, &v227);
          v116 = *(_QWORD *)(v115 + 16);
          if (v116 == *(_QWORD *)(v115 + 8))
            v117 = (unsigned int *)(v115 + 28);
          else
            v117 = (unsigned int *)(v115 + 24);
          v118 = (unint64_t *)(v116 + 8 * *v117);
          v228 = v230;
          v229 = 0x600000000;
          sub_1C5143AC4((uint64_t)&v228, v110, v113, v118);
          sub_1C51430F8(*(_QWORD *)(a1 + 264), v107, v108, (uint64_t *)v228, v229);
          v119 = v105;
          if ((*(_BYTE *)v105 & 4) == 0)
          {
            v119 = v105;
            if ((*(_WORD *)(v105 + 44) & 8) != 0)
            {
              v119 = v105;
              do
                v119 = *(_QWORD *)(v119 + 8);
              while ((*(_WORD *)(v119 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(v105 + 24) + 40, v105, *(_QWORD *)(v119 + 8));
          if (v228 != v230)
            free(v228);
          ++v103;
          v7 = (unsigned int *)(a1 + 424);
        }
        while (v103 != v104);
      }
      v6 = (int32x2_t *)(a1 + 448);
      v120 = *(_DWORD *)v223;
      if (*(_DWORD *)v223 > 1u || *(_DWORD *)(a1 + 276))
      {
        v200 = a1 + 344;
        v201 = (_QWORD *)(a1 + 280);
        if ((v120 & 1) != 0)
          goto LABEL_319;
        v202 = *(unsigned int *)(a1 + 288);
        if (((2 * v120) & 0xFFFFFFFC) < v202 && v202 >= 0x41)
        {
          sub_1C5143C48(v223);
          goto LABEL_183;
        }
        if ((_DWORD)v202)
        {
          v201 = *v217;
          v200 = (uint64_t)&(*v217)[v202];
          do
LABEL_319:
            *v201++ = -4096;
          while (v201 != (_QWORD *)v200);
          v203 = *(_DWORD *)v223 & 1;
        }
        else
        {
          v203 = 0;
        }
        *(_DWORD *)(a1 + 272) = v203;
        *(_DWORD *)(a1 + 276) = 0;
      }
LABEL_183:
      *(_DWORD *)(a1 + 352) = 0;
      v121 = *(_DWORD *)(a1 + 432);
      if (v121 || *(_DWORD *)(a1 + 436))
      {
        v208 = *(unsigned int *)(a1 + 440);
        if (v208 > 4 * v121 && v208 >= 0x41)
        {
          sub_1C5143D5C(v7);
        }
        else
        {
          if ((_DWORD)v208)
          {
            v209 = *(_QWORD **)v7;
            v210 = 56 * v208;
            do
            {
              if (*v209 != -4096)
              {
                if (*v209 != -8192)
                {
                  v211 = (void *)v209[2];
                  if (v211 != (void *)v209[1])
                    free(v211);
                }
                *v209 = -4096;
              }
              v209 += 7;
              v210 -= 56;
            }
            while (v210);
          }
          *(_QWORD *)(a1 + 432) = 0;
        }
      }
      sub_1C51431C0((uint64_t)v224);
      v122 = v219[7];
      if ((_QWORD *)v122 != v222)
      {
        while (1)
        {
          if (!v122 || (v123 = v122, (*(_BYTE *)v122 & 4) == 0))
          {
            v123 = v122;
            if ((*(_WORD *)(v122 + 44) & 8) != 0)
            {
              v123 = v122;
              do
                v123 = *(_QWORD *)(v123 + 8);
              while ((*(_WORD *)(v123 + 44) & 8) != 0);
            }
          }
          v124 = *(_QWORD *)(v123 + 8);
          if (**(_WORD **)(v122 + 16) != 19)
          {
            v125 = *(_QWORD *)(v122 + 32);
LABEL_214:
            v140 = *(unsigned int *)(v122 + 40);
            if ((_DWORD)v140)
            {
              v141 = 32 * v140;
              v142 = (unsigned int *)(v125 + 4);
              do
              {
                v143 = *(v142 - 1);
                if ((v143 & 0x400000FF) == 0x40000000)
                {
                  v144 = *v142;
                  if ((v143 & 0xF00000) != 0)
                    sub_1C514447C(a1, *v142, v122, 1);
                  sub_1C51445B4(v224, v144, *(_QWORD *)(a1 + 248));
                }
                v142 += 8;
                v141 -= 32;
              }
              while (v141);
            }
            sub_1C5144030(a1, v122);
            v228 = v230;
            v229 = 0x200000000;
            v145 = *(unsigned int *)(v122 + 40);
            if ((_DWORD)v145)
            {
              v146 = 0;
              v147 = *(_DWORD **)(v122 + 32);
              v148 = 32 * v145;
              do
              {
                v149 = *v147;
                if (*v147 == 12)
                  v146 = v147;
                if (!*v147)
                {
                  v150 = v147[1];
                  if (v150)
                  {
                    if ((v149 & 0x41000000) == 0x1000000)
                    {
                      v151 = v229;
                      if (v229 >= (unint64_t)HIDWORD(v229))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v228, (uint64_t)v230, v229 + 1, 4);
                        v151 = v229;
                      }
                      *((_DWORD *)v228 + v151) = v150;
                      LODWORD(v229) = v229 + 1;
                    }
                    else if ((v149 & 0x30000000) == 0 && (v149 & 0x10FFF00) != 0x1000000)
                    {
                      sub_1C514447C(a1, v147[1], v122, v149 >= 0);
                    }
                  }
                }
                v147 += 8;
                v148 -= 32;
              }
              while (v148);
              if (v146)
              {
                v152 = *(unsigned int *)(a1 + 352);
                if ((_DWORD)v152)
                {
                  v153 = *v220;
                  v154 = *v220;
                  do
                  {
                    v155 = *v154;
                    v156 = *(unsigned int *)(*(_QWORD *)(*v154 + 32) + 4);
                    if (((*(_DWORD *)(*((_QWORD *)v146 + 2) + ((v156 >> 3) & 0x1FFFFFFC)) >> v156) & 1) != 0)
                    {
                      ++v154;
                    }
                    else
                    {
                      sub_1C51445B4(v224, v156, *(_QWORD *)(a1 + 248));
                      sub_1C514487C((uint64_t)v223, *v154);
                      v157 = *(unsigned int *)(a1 + 352);
                      v158 = *(_QWORD *)(a1 + 344) + 8 * v157;
                      if ((uint64_t *)v158 != v154 + 1)
                      {
                        memmove(v154, v154 + 1, v158 - (_QWORD)(v154 + 1));
                        LODWORD(v157) = *(_DWORD *)(a1 + 352);
                      }
                      *(_DWORD *)(a1 + 352) = v157 - 1;
                      v159 = v155;
                      if ((*(_BYTE *)v155 & 4) == 0)
                      {
                        v159 = v155;
                        if ((*(_WORD *)(v155 + 44) & 8) != 0)
                        {
                          v159 = v155;
                          do
                            v159 = *(_QWORD *)(v159 + 8);
                          while ((*(_WORD *)(v159 + 44) & 8) != 0);
                        }
                      }
                      sub_1C487FE80(*(_QWORD *)(v155 + 24) + 40, v155, *(_QWORD *)(v159 + 8));
                      *(_BYTE *)(a1 + 472) = 1;
                      v153 = *(uint64_t **)(a1 + 344);
                      v152 = *(unsigned int *)(a1 + 352);
                    }
                  }
                  while (v154 != &v153[v152]);
                }
              }
            }
            v160 = (unsigned int *)v228;
            if ((_DWORD)v229)
            {
              v161 = 4 * v229;
              do
              {
                v162 = *v160++;
                sub_1C51445B4(v224, v162, *(_QWORD *)(a1 + 248));
                v161 -= 4;
              }
              while (v161);
              v160 = (unsigned int *)v228;
            }
            if (v160 != (unsigned int *)v230)
              free(v160);
            goto LABEL_257;
          }
          v125 = *(_QWORD *)(v122 + 32);
          v126 = *(unsigned int *)(v125 + 4);
          v127 = *(_DWORD *)(v125 + 36);
          if ((_DWORD)v126 == v127)
            goto LABEL_214;
          v128 = (v126 - 1) > 0x3FFFFFFE || v127 - 1 > 0x3FFFFFFE;
          if (!v128
            && llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)(a1 + 248) + 8), *(_DWORD *)(v125 + 4), *(_DWORD *)(v125 + 36)))
          {
            goto LABEL_214;
          }
          if ((sub_1C5143E68(a1, v122, v126, v127) & 1) == 0 && (sub_1C5143E68(a1, v122, v127, v126) & 1) == 0)
            break;
LABEL_257:
          v122 = v124;
          v11 = v124 == (_QWORD)v222;
          v6 = (int32x2_t *)(a1 + 448);
          v7 = (unsigned int *)(a1 + 424);
          if (v11)
            goto LABEL_285;
        }
        sub_1C5144030(a1, v122);
        sub_1C514447C(a1, *(_DWORD *)(*(_QWORD *)(v122 + 32) + 36), v122, 1);
        v129 = *(_QWORD *)(v122 + 32);
        NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v122);
        v131 = *(unsigned int *)(v122 + 40);
        if (NumExplicitOperands != (_DWORD)v131)
        {
          v132 = 32 * v131 - 32 * NumExplicitOperands;
          v133 = (unsigned int *)(v129 + 32 * NumExplicitOperands + 4);
          do
          {
            v134 = *(v133 - 1);
            v135 = v134 & 0x300000FF;
            v136 = v134 & 0x10FFF00;
            if (v135)
              v137 = 1;
            else
              v137 = v136 == 0x1000000;
            if (!v137 && *v133)
              sub_1C514447C(a1, *v133, v122, 1);
            v133 += 8;
            v132 -= 32;
          }
          while (v132);
        }
        if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 352) + ((v126 >> 3) & 0x1FFFFFF8)) >> v126) & 1) == 0)
        {
          v228 = (void *)v122;
          if ((*v223 & 1) != 0)
          {
            v138 = 8;
            v139 = a1 + 280;
LABEL_261:
            v163 = v138 - 1;
            v164 = v163 & ((v122 >> 4) ^ (v122 >> 9));
            v165 = (_QWORD *)(v139 + 8 * v164);
            v166 = *v165;
            if (v122 != *v165)
            {
              v167 = 0;
              v168 = 1;
              while (v166 != -4096)
              {
                if (v167)
                  v169 = 0;
                else
                  v169 = v166 == -8192;
                if (v169)
                  v167 = v165;
                v170 = v164 + v168++;
                v164 = v170 & v163;
                v165 = (_QWORD *)(v139 + 8 * v164);
                v166 = *v165;
                if (v122 == *v165)
                  goto LABEL_277;
              }
              if (v167)
                v171 = v167;
              else
                v171 = v165;
              goto LABEL_274;
            }
          }
          else
          {
            v138 = *(_DWORD *)(a1 + 288);
            if (v138)
            {
              v139 = *(_QWORD *)(a1 + 280);
              goto LABEL_261;
            }
            v171 = 0;
LABEL_274:
            v172 = sub_1C486D2E8((uint64_t)v223, (uint64_t)&v228, &v228, v171);
            *v172 = v228;
            v173 = v228;
            v174 = *(unsigned int *)(a1 + 352);
            if (v174 >= *(unsigned int *)(a1 + 356))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v220, v216, v174 + 1, 8);
              v174 = *(unsigned int *)(a1 + 352);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * v174) = v173;
            ++*(_DWORD *)(a1 + 352);
          }
        }
LABEL_277:
        sub_1C51445B4(v224, v126, *(_QWORD *)(a1 + 248));
        v175 = *(_QWORD *)(v122 + 32);
        v176 = llvm::MachineInstr::getNumExplicitOperands(v122);
        v177 = *(unsigned int *)(v122 + 40);
        if (v176 != (_DWORD)v177)
        {
          v178 = 32 * v177 - 32 * v176;
          v179 = (unsigned int *)(v175 + 32 * v176 + 4);
          do
          {
            if ((*(v179 - 1) & 0x10000FF) == 0x1000000 && *v179)
              sub_1C51445B4(v224, *v179, *(_QWORD *)(a1 + 248));
            v179 += 8;
            v178 -= 32;
          }
          while (v178);
        }
        sub_1C5142B14((uint64_t)v224, v122, *(_QWORD *)(a1 + 248));
        goto LABEL_257;
      }
LABEL_285:
      if (v219[11] == v219[12])
      {
        v182 = *(unsigned int *)(a1 + 352);
        if ((_DWORD)v182)
        {
          v183 = *(uint64_t **)(a1 + 344);
          v184 = &v183[v182];
          do
          {
            v185 = *v183;
            v227 = v185;
            v186 = *(_QWORD *)(v185 + 32);
            v187 = *(_DWORD *)(v186 + 36);
            v188 = *(_DWORD *)(v186 + 4);
            sub_1C5143868((uint64_t)v7, &v227);
            v190 = *(unint64_t **)(v189 + 16);
            if (v190 == *(unint64_t **)(v189 + 8))
              v191 = (unsigned int *)(v189 + 28);
            else
              v191 = (unsigned int *)(v189 + 24);
            v192 = *v191;
            v193 = &v190[v192];
            if ((_DWORD)v192)
            {
              v194 = 8 * v192;
              while (*v190 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v190;
                v194 -= 8;
                if (!v194)
                {
                  v190 = v193;
                  break;
                }
              }
            }
            sub_1C5143868(v225, &v227);
            v196 = *(_QWORD *)(v195 + 16);
            if (v196 == *(_QWORD *)(v195 + 8))
              v197 = (unsigned int *)(v195 + 28);
            else
              v197 = (unsigned int *)(v195 + 24);
            v198 = (unint64_t *)(v196 + 8 * *v197);
            v228 = v230;
            v229 = 0x600000000;
            sub_1C5143AC4((uint64_t)&v228, v190, v193, v198);
            sub_1C51430F8(*(_QWORD *)(a1 + 264), v188, v187, (uint64_t *)v228, v229);
            v199 = v185;
            if ((*(_BYTE *)v185 & 4) == 0)
            {
              v199 = v185;
              if ((*(_WORD *)(v185 + 44) & 8) != 0)
              {
                v199 = v185;
                do
                  v199 = *(_QWORD *)(v199 + 8);
                while ((*(_WORD *)(v199 + 44) & 8) != 0);
              }
            }
            sub_1C487FE80(*(_QWORD *)(v185 + 24) + 40, v185, *(_QWORD *)(v199 + 8));
            *(_BYTE *)(a1 + 472) = 1;
            v6 = (int32x2_t *)(a1 + 448);
            if (v228 != v230)
              free(v228);
            ++v183;
            v7 = (unsigned int *)(a1 + 424);
          }
          while (v183 != v184);
        }
      }
      v180 = *(_DWORD *)v223;
      if (*(_DWORD *)v223 > 1u || *(_DWORD *)(a1 + 276))
      {
        v204 = a1 + 344;
        v205 = (_QWORD *)(a1 + 280);
        if ((v180 & 1) != 0)
          goto LABEL_327;
        v206 = *(unsigned int *)(a1 + 288);
        if (((2 * v180) & 0xFFFFFFFC) >= v206 || v206 < 0x41)
        {
          if ((_DWORD)v206)
          {
            v205 = *v217;
            v204 = (uint64_t)&(*v217)[v206];
            do
LABEL_327:
              *v205++ = -4096;
            while (v205 != (_QWORD *)v204);
            v207 = *(_DWORD *)v223 & 1;
          }
          else
          {
            v207 = 0;
          }
          *(_DWORD *)(a1 + 272) = v207;
          *(_DWORD *)(a1 + 276) = 0;
          goto LABEL_288;
        }
        sub_1C5143C48(v223);
      }
LABEL_288:
      *(_DWORD *)(a1 + 352) = 0;
      v181 = *(_DWORD *)(a1 + 432);
      if (v181 || *(_DWORD *)(a1 + 436))
      {
        v212 = *(unsigned int *)(a1 + 440);
        if (v212 > 4 * v181 && v212 >= 0x41)
        {
          sub_1C5143D5C(v7);
        }
        else
        {
          if ((_DWORD)v212)
          {
            v213 = *(_QWORD **)v7;
            v214 = 56 * v212;
            do
            {
              if (*v213 != -4096)
              {
                if (*v213 != -8192)
                {
                  v215 = (void *)v213[2];
                  if (v215 != (void *)v213[1])
                    free(v215);
                }
                *v213 = -4096;
              }
              v213 += 7;
              v214 -= 56;
            }
            while (v214);
          }
          *(_QWORD *)(a1 + 432) = 0;
        }
      }
      sub_1C51431C0((uint64_t)v6);
      v5 = (_QWORD *)v219[1];
    }
    while (v5 != v218);
  }
  return *(_BYTE *)(a1 + 472) != 0;
}

void sub_1C5142634(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 8uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C5142760(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 56 * v1;
    v3 = (void **)(*(_QWORD *)a1 + 16);
    do
    {
      v4 = (uint64_t)*(v3 - 2);
      if (v4 != -4096 && v4 != -8192 && *v3 != *(v3 - 1))
      {
        v5 = v3;
        v6 = v2;
        free(*v3);
        v3 = v5;
        v2 = v6;
      }
      v3 += 7;
      v2 -= 56;
    }
    while (v2);
  }
}

void sub_1C51427D0(int32x2_t *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  _WORD *v6;
  unsigned __int16 v7;
  int v8;
  int32x2_t v9;
  unsigned __int32 v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD **v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  _WORD *v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  __int32 v30;
  __int32 v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  void *v35;
  int v36;
  int v37;
  unsigned int v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  char *v42;
  unsigned int v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[32];
  _QWORD **v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v44 = a2;
  v45 = v47;
  v46 = 0x800000000;
  v49 = 0;
  v50 = 0;
  v48 = &v49;
  sub_1C484FF44((uint64_t)&v45, &v44);
  v5 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 24 * v44 + 16);
  v6 = (_WORD *)(*(_QWORD *)(a3 + 56) + ((v5 >> 3) & 0x1FFFFFFE));
  v7 = *v6 + (v5 & 0xF) * v44;
  do
  {
    v8 = v7;
    v9 = *a1;
    v10 = a1[2].u32[0];
    if (v10)
    {
      v11 = (v10 - 1) & (37 * v8);
      v12 = *(_QWORD *)&v9 + 56 * v11;
      v13 = *(_DWORD *)v12;
      if (*(_DWORD *)v12 == v8)
        goto LABEL_9;
      v14 = 1;
      while (v13 != -1)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v10 - 1);
        v12 = *(_QWORD *)&v9 + 56 * v11;
        v13 = *(_DWORD *)v12;
        if (*(_DWORD *)v12 == v8)
          goto LABEL_9;
      }
    }
    v12 = *(_QWORD *)&v9 + 56 * v10;
LABEL_9:
    if (v12 != *(_QWORD *)&v9 + 56 * v10)
    {
      v16 = *(_QWORD *)(v12 + 8);
      if (v16)
      {
        v43 = *(_DWORD *)(*(_QWORD *)(v16 + 32) + 4);
        sub_1C484FF44((uint64_t)&v45, &v43);
        v43 = *(_DWORD *)(*(_QWORD *)(v16 + 32) + 36);
        sub_1C484FF44((uint64_t)&v45, &v43);
      }
      v17 = *(unsigned int *)(v12 + 24);
      if ((_DWORD)v17)
      {
        v18 = *(unsigned int **)(v12 + 16);
        v19 = 4 * v17;
        do
        {
          sub_1C484FF44((uint64_t)&v45, v18++);
          v19 -= 4;
        }
        while (v19);
      }
    }
    v20 = (unsigned __int16)v6[1];
    ++v6;
    v7 = v20 + v8;
  }
  while (v20);
  v21 = v50;
  if (v50)
    v22 = v48;
  else
    v22 = v45;
  v42 = (char *)v45 + 4 * v46;
  while (1)
  {
    v23 = v21 ? &v49 : (_QWORD **)v42;
    if (v22 == v23)
      break;
    v24 = (unsigned int *)v22 + 7;
    if (!v21)
      v24 = (unsigned int *)v22;
    v25 = *v24;
    v26 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 24 * v25 + 16);
    v27 = (_WORD *)(*(_QWORD *)(a3 + 56) + ((v26 >> 3) & 0x1FFFFFFE));
    v28 = *v27 + (v26 & 0xF) * v25;
    do
    {
      v29 = v28;
      v30 = a1[2].i32[0];
      if (v30)
      {
        v31 = v30 - 1;
        v32 = v31 & (37 * v28);
        v33 = *(_QWORD *)a1 + 56 * v32;
        v34 = *(_DWORD *)v33;
        if (*(_DWORD *)v33 == v28)
        {
LABEL_29:
          v35 = *(void **)(v33 + 16);
          if (v35 != (void *)(v33 + 32))
            free(v35);
          *(_DWORD *)v33 = -2;
          a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          v37 = 1;
          while (v34 != -1)
          {
            v38 = v32 + v37++;
            v32 = v38 & v31;
            v33 = *(_QWORD *)a1 + 56 * v32;
            v34 = *(_DWORD *)v33;
            if (*(_DWORD *)v33 == v28)
              goto LABEL_29;
          }
        }
      }
      v36 = (unsigned __int16)v27[1];
      ++v27;
      v28 = v36 + v29;
    }
    while (v36);
    if (v21)
    {
      v39 = (_QWORD *)v22[1];
      v40 = v22;
      if (v39)
      {
        do
        {
          v22 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v40[2];
          v41 = *v22 == (_QWORD)v40;
          v40 = v22;
        }
        while (!v41);
      }
    }
    else
    {
      v22 = (_QWORD *)((char *)v22 + 4);
    }
  }
  sub_1C61247C0((uint64_t)&v48, v49);
  if (v45 != v47)
    free(v45);
}

void *sub_1C5142B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  _WORD *v8;
  unsigned __int16 v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  void **v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  unint64_t v27;
  _WORD *v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  _DWORD *v40;
  uint64_t *v41;
  void *v42;
  void **v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  void *result;
  _DWORD *v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _BYTE v58[24];
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_DWORD *)(v5 + 4);
  v53 = *(_DWORD *)(v5 + 36);
  v7 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 24 * v6 + 16);
  v8 = (_WORD *)(*(_QWORD *)(a3 + 56) + ((v7 >> 3) & 0x1FFFFFFE));
  v9 = *v8 + (v7 & 0xF) * v6;
  do
  {
    v59 = a2;
    v60 = &v62;
    v61 = (void *)0x400000000;
    v64 = 1;
    v10 = v9;
    LODWORD(v55) = v9;
    v11 = *(_DWORD *)(a1 + 16);
    if (v11)
    {
      v12 = v11 - 1;
      v13 = v12 & (37 * v9);
      v14 = (_DWORD *)(*(_QWORD *)a1 + 56 * v13);
      v15 = *v14;
      if (*v14 == v9)
      {
LABEL_4:
        v16 = &v62;
        v17 = a2;
        goto LABEL_7;
      }
      v23 = 0;
      v24 = 1;
      while (v15 != -1)
      {
        if (v23)
          v25 = 0;
        else
          v25 = v15 == -2;
        if (v25)
          v23 = v14;
        v26 = v13 + v24++;
        v13 = v26 & v12;
        v14 = (_DWORD *)(*(_QWORD *)a1 + 56 * v13);
        v15 = *v14;
        if (*v14 == v9)
          goto LABEL_4;
      }
      if (v23)
        v18 = v23;
      else
        v18 = v14;
    }
    else
    {
      v18 = 0;
    }
    v14 = sub_1C51433F8(a1, (int *)&v55, v18);
    *v14 = v10;
    *(_OWORD *)(v14 + 2) = 0u;
    *(_OWORD *)(v14 + 6) = 0u;
    *(_OWORD *)(v14 + 10) = 0u;
    *((_QWORD *)v14 + 2) = v14 + 8;
    v14[7] = 4;
    v17 = v59;
    v16 = (uint64_t *)v60;
LABEL_7:
    *((_QWORD *)v14 + 1) = v17;
    v19 = (void **)(v14 + 4);
    if (v14 + 4 == (_DWORD *)&v60)
      goto LABEL_14;
    if (v16 != &v62)
    {
      if (*((_DWORD **)v14 + 2) != v14 + 8)
      {
        free(*((void **)v14 + 2));
        v16 = (uint64_t *)v60;
      }
      *((_QWORD *)v14 + 2) = v16;
      *((_QWORD *)v14 + 3) = v61;
      v60 = &v62;
      HIDWORD(v61) = 0;
      goto LABEL_13;
    }
    v20 = v61;
    v21 = v14[6];
    if (v21 < v61)
    {
      if (v14[7] < v61)
      {
        v14[6] = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v14 + 4), (uint64_t)(v14 + 8), v20, 4);
        v19 = (void **)(v14 + 4);
      }
      else if ((_DWORD)v21)
      {
        memmove(*v19, &v62, 4 * v21);
        v19 = (void **)(v14 + 4);
LABEL_21:
        if (v21 != v61)
          memcpy((char *)*v19 + 4 * v21, (char *)v60 + 4 * v21, 4 * v61 - 4 * v21);
        goto LABEL_12;
      }
      v21 = 0;
      goto LABEL_21;
    }
    if ((_DWORD)v61)
      memmove(*v19, &v62, 4 * v61);
LABEL_12:
    v14[6] = v20;
LABEL_13:
    LODWORD(v61) = 0;
    v16 = (uint64_t *)v60;
LABEL_14:
    *((_BYTE *)v14 + 48) = v64;
    if (v16 != &v62)
      free(v16);
    v22 = (unsigned __int16)v8[1];
    ++v8;
    v9 = v22 + v10;
  }
  while (v22);
  v27 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 24 * v53 + 16);
  v28 = (_WORD *)(*(_QWORD *)(a3 + 56) + ((v27 >> 3) & 0x1FFFFFFE));
  v29 = *v28 + (v27 & 0xF) * v53;
  do
  {
    v30 = v29;
    v55 = 0;
    v56 = v58;
    v57 = 0x400000000;
    v58[16] = 0;
    LODWORD(v59) = v29;
    v60 = 0;
    v61 = &v63;
    v62 = 0x400000000;
    v65 = 0;
    v31 = *(_DWORD *)(a1 + 16);
    if (v31)
    {
      v32 = v31 - 1;
      v33 = v32 & (37 * v29);
      v34 = *(_QWORD *)a1 + 56 * v33;
      v35 = *(_DWORD *)v34;
      if (*(_DWORD *)v34 == v29)
        goto LABEL_62;
      v36 = 0;
      v37 = 1;
      while (v35 != -1)
      {
        if (v36)
          v38 = 0;
        else
          v38 = v35 == -2;
        if (v38)
          v36 = (_DWORD *)v34;
        v39 = v33 + v37++;
        v33 = v39 & v32;
        v34 = *(_QWORD *)a1 + 56 * v33;
        v35 = *(_DWORD *)v34;
        if (*(_DWORD *)v34 == v29)
          goto LABEL_62;
      }
      if (v36)
        v40 = v36;
      else
        v40 = (_DWORD *)v34;
    }
    else
    {
      v40 = 0;
    }
    v41 = (uint64_t *)sub_1C51433F8(a1, (int *)&v59, v40);
    v34 = (uint64_t)v41;
    *(_DWORD *)v41 = v59;
    v41[1] = (uint64_t)v60;
    v42 = v41 + 4;
    v41[2] = (uint64_t)(v41 + 4);
    v43 = (void **)(v41 + 2);
    v41[3] = 0x400000000;
    v44 = (uint64_t *)v61;
    if (v41 != &v59)
    {
      v45 = v62;
      if ((_DWORD)v62)
      {
        if (v61 != &v63)
        {
          v41[2] = (uint64_t)v61;
          *((_DWORD *)v41 + 6) = v45;
          *((_DWORD *)v41 + 7) = HIDWORD(v62);
          v61 = &v63;
          HIDWORD(v62) = 0;
          v44 = &v63;
          goto LABEL_59;
        }
        if (v62 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v41 + 2), (uint64_t)v42, v62, 4);
          v46 = v62;
          v44 = (uint64_t *)v61;
          if (!(_DWORD)v62)
            goto LABEL_58;
          v42 = *v43;
        }
        else
        {
          v44 = &v63;
          v46 = v62;
        }
        memcpy(v42, v44, 4 * v46);
        v44 = (uint64_t *)v61;
LABEL_58:
        *(_DWORD *)(v34 + 24) = v45;
LABEL_59:
        LODWORD(v62) = 0;
      }
    }
    *(_BYTE *)(v34 + 48) = v65;
    if (v44 != &v63)
      free(v44);
LABEL_62:
    if (v56 != v58)
      free(v56);
    result = (void *)(v34 + 16);
    v48 = *(_DWORD **)(v34 + 16);
    v49 = *(unsigned int *)(v34 + 24);
    v50 = v48;
    if ((_DWORD)v49)
    {
      v51 = 4 * v49;
      v50 = *(_DWORD **)(v34 + 16);
      while (*v50 != v6)
      {
        ++v50;
        v51 -= 4;
        if (!v51)
        {
          v50 = &v48[v49];
          break;
        }
      }
    }
    if (v49 == v50 - v48)
    {
      if (v49 >= *(_DWORD *)(v34 + 28))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, v34 + 32, v49 + 1, 4);
        v48 = *(_DWORD **)(v34 + 16);
        v49 = *(unsigned int *)(v34 + 24);
      }
      v48[v49] = v6;
      ++*(_DWORD *)(v34 + 24);
    }
    v52 = (unsigned __int16)v28[1];
    ++v28;
    v29 = v52 + v30;
  }
  while (v52);
  return result;
}

uint64_t sub_1C5143044(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;

  if (!a2)
  {
LABEL_7:
    v6 = a1 + 56 * a2;
    goto LABEL_8;
  }
  v5 = (37 * a3) & (a2 - 1);
  v6 = a1 + 56 * v5;
  v7 = *(_DWORD *)v6;
  if (*(_DWORD *)v6 != a3)
  {
    v8 = 1;
    while (v7 != -1)
    {
      v9 = v5 + v8++;
      v5 = v9 & (a2 - 1);
      v6 = a1 + 56 * v5;
      v7 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 == a3)
        goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v6 == a1 + 56 * a2 || *(_DWORD *)(v6 + 24) != 1)
    return 0;
  v10 = **(_DWORD **)(v6 + 16);
  v11 = *(unsigned int *)(a4 + 24 * v10 + 16);
  return sub_1C51437E0(a1, a2, (unsigned __int16)(*(_WORD *)(a5 + ((v11 >> 3) & 0x1FFFFFFE)) + (v11 & 0xF) * v10), 1);
}

uint64_t sub_1C51430F8(uint64_t result, int a2, int a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  int v13;
  int v14;

  v13 = a3;
  v14 = a2;
  v12[0] = result;
  v12[1] = &v13;
  v12[2] = &v14;
  if (a5)
  {
    v5 = &a4[a5];
    do
    {
      v6 = a4;
      v7 = *a4;
      v8 = **(unsigned __int16 **)(*a4 + 16);
      if ((v8 - 13) > 1)
      {
        result = sub_1C5143BB8((uint64_t)v12, *(_QWORD *)(v7 + 32));
      }
      else
      {
        v9 = *(_QWORD *)(v7 + 32);
        if (v8 != 14)
        {
          v11 = v9 + 32;
          goto LABEL_12;
        }
        v10 = *(unsigned int *)(v7 + 40);
        if ((_DWORD)v10 != 2)
        {
          v11 = v9 + 32 * v10;
          v9 += 64;
          do
          {
LABEL_12:
            result = sub_1C5143BB8((uint64_t)v12, v9);
            v9 += 32;
          }
          while (v9 != v11);
        }
      }
      a4 = v6 + 1;
    }
    while (v6 + 1 != v5);
  }
  return result;
}

void sub_1C51431C0(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_DWORD *)(a1 + 8);
  if (!v2 && !*(_DWORD *)(a1 + 12))
    return;
  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_DWORD **)a1;
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!(_DWORD)v3)
    {
LABEL_28:
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
    v12 = 56 * v3;
    v13 = v4 + 8;
    while (1)
    {
      v14 = *(v13 - 8);
      if (v14 == -2)
        goto LABEL_26;
      if (v14 != -1)
        break;
LABEL_27:
      v13 += 14;
      v12 -= 56;
      if (!v12)
        goto LABEL_28;
    }
    v15 = (_DWORD *)*((_QWORD *)v13 - 2);
    if (v13 != v15)
      free(v15);
LABEL_26:
    *(v13 - 8) = -1;
    goto LABEL_27;
  }
  v5 = 56 * v3;
  v6 = v4 + 8;
  do
  {
    if (*((_DWORD *)v6 - 8) <= 0xFFFFFFFD)
    {
      v7 = (_QWORD *)*(v6 - 2);
      if (v6 != v7)
        free(v7);
    }
    v6 += 7;
    v5 -= 56;
  }
  while (v5);
  v8 = 1 << (33 - __clz(v2 - 1));
  if (v8 <= 64)
    v8 = 64;
  if (v2)
    v9 = v8;
  else
    v9 = 0;
  if ((_DWORD)v9 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v9)
    {
      v10 = *(_DWORD **)a1;
      v11 = 56 * v9;
      do
      {
        *v10 = -1;
        v10 += 14;
        v11 -= 56;
      }
      while (v11);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v9)
    {
      v16 = (4 * (int)v9 / 3u + 1) | ((unint64_t)(4 * (int)v9 / 3u + 1) >> 1);
      v17 = v16 | (v16 >> 2) | ((v16 | (v16 >> 2)) >> 4);
      LODWORD(v17) = (((v17 | (v17 >> 8)) >> 16) | v17 | (v17 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v17;
      v18 = operator new(56 * v17, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v18;
      *(_QWORD *)(a1 + 8) = 0;
      v19 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v19)
      {
        v20 = 56 * v19;
        do
        {
          *v18 = -1;
          v18 += 14;
          v20 -= 56;
        }
        while (v20);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

uint64_t sub_1C5143378(uint64_t result, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(result + 56 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -1)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -2;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_DWORD *)(result + 56 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_13;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_13:
  *a4 = v6;
  return result;
}

_DWORD *sub_1C51433F8(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  void *v22;
  unint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int *v31;

  v30 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(56 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 56 * v15;
      do
      {
        *v14 = -1;
        v14 += 14;
        v16 -= 56;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v17 = 0;
      v18 = 56 * v6;
      while (1)
      {
        v19 = v9 + v17;
        v20 = *(_DWORD *)(v9 + v17);
        if (v20 <= 0xFFFFFFFD)
          break;
LABEL_27:
        v17 += 56;
        if (v18 == v17)
          goto LABEL_32;
      }
      v31 = 0;
      sub_1C5143378(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v31);
      v21 = v31;
      *v31 = v20;
      *((_QWORD *)v21 + 1) = *(_QWORD *)(v19 + 8);
      v22 = v21 + 8;
      *((_QWORD *)v21 + 2) = v21 + 8;
      *((_QWORD *)v21 + 3) = 0x400000000;
      v23 = *(unsigned int *)(v19 + 24);
      if (!(_DWORD)v23 || (unsigned int *)v19 == v21)
      {
LABEL_25:
        *((_BYTE *)v21 + 48) = *(_BYTE *)(v9 + v17 + 48);
        ++*(_DWORD *)(a1 + 8);
        v27 = *(void **)(v9 + v17 + 16);
        if ((void *)(v9 + v17 + 32) != v27)
          free(v27);
        goto LABEL_27;
      }
      v24 = *(const void **)(v9 + v17 + 16);
      v25 = v9 + v17 + 32;
      if ((const void *)v25 != v24)
      {
        *((_QWORD *)v21 + 2) = v24;
        v21[6] = v23;
        v21[7] = *(_DWORD *)(v9 + v17 + 28);
        *(_QWORD *)(v9 + v17 + 16) = v25;
        *(_DWORD *)(v9 + v17 + 28) = 0;
        goto LABEL_24;
      }
      if (v23 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v21 + 4), (uint64_t)(v21 + 8), v23, 4);
        v26 = *(unsigned int *)(v19 + 24);
        if (!(_DWORD)v26)
          goto LABEL_23;
        v24 = *(const void **)(v9 + v17 + 16);
        v22 = (void *)*((_QWORD *)v21 + 2);
      }
      else
      {
        v26 = *(unsigned int *)(v19 + 24);
      }
      memcpy(v22, v24, 4 * v26);
LABEL_23:
      v21[6] = v23;
LABEL_24:
      *(_DWORD *)(v19 + 24) = 0;
      goto LABEL_25;
    }
LABEL_32:
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_DWORD **)a1;
    LODWORD(v28) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v28 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v28)
    {
      v29 = 0;
      do
      {
        v14[v29] = -1;
        v29 += 14;
      }
      while (14 * v28 != v29);
    }
  }
  sub_1C5143378((uint64_t)v14, v28, *a2, &v30);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v30;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C51436A0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v15;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(v6 + 4);
  v8 = *(unsigned int *)(a2 + 40);
  if ((*(_BYTE *)(v6 + 8) & 2) != 0)
  {
    if ((_DWORD)v8 == v7)
      return 0;
    v9 = *(unsigned __int8 *)(v6 + 4);
    do
    {
      v15 = *(_DWORD *)(v5 + 32 * v7);
      if ((v15 & 0x10000FF) != 0x1000000)
        break;
      v9 += (v15 & 0x2000000) == 0;
      if ((_DWORD)v8 - 1 == v7)
        break;
      ++v7;
    }
    while ((v15 & 0x2000000) == 0);
  }
  else
  {
    v9 = *(unsigned __int8 *)(v6 + 4);
  }
  if (v9 == (_DWORD)v8)
    return 0;
  v10 = (_DWORD *)(v5 + 32 * v9);
  v11 = a3[1];
  v12 = 32 * v8 - 32 * v9;
  while (1)
  {
    if (v10 != a3 && (*v10 & 0x30000FF) == 0x2000000)
    {
      v13 = v10[1];
      if (v11 == v13
        || v11 - 1 <= 0x3FFFFFFE
        && v13 - 1 <= 0x3FFFFFFE
        && llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)(a1 + 248) + 8), v11, v13))
      {
        break;
      }
    }
    v10 += 8;
    v12 -= 32;
    if (!v12)
      return 0;
  }
  return 1;
}

uint64_t sub_1C51437E0(uint64_t a1, unsigned int a2, int a3, int a4)
{
  unsigned int v4;
  int *v5;
  int v6;
  int v7;
  unsigned int v8;

  if (!a2)
  {
LABEL_7:
    v5 = (int *)(a1 + 56 * a2);
    goto LABEL_8;
  }
  v4 = (37 * a3) & (a2 - 1);
  v5 = (int *)(a1 + 56 * v4);
  v6 = *v5;
  if (*v5 != a3)
  {
    v7 = 1;
    while (v6 != -1)
    {
      v8 = v4 + v7++;
      v4 = v8 & (a2 - 1);
      v5 = (int *)(a1 + 56 * v4);
      v6 = *v5;
      if (*v5 == a3)
        goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v5 == (int *)(a1 + 56 * a2) || a4 && !*((_BYTE *)v5 + 48))
    return 0;
  else
    return *((_QWORD *)v5 + 1);
}

double sub_1C5143868(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;

  v10 = 0;
  v4 = sub_1C5143964(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
  v6 = v10;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1C5143A00(a1, v8);
    v10 = 0;
    sub_1C5143964(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
    v6 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  v9 = *a2;
  v6[4] = 0;
  v6[6] = 0;
  v6[5] = 0;
  *v6 = v9;
  v6[1] = (uint64_t)(v6 + 5);
  v6[2] = (uint64_t)(v6 + 5);
  *(_QWORD *)&result = 2;
  v6[3] = 2;
  return result;
}

uint64_t sub_1C5143964(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 56 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v7 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v9 = v6;
        v13 = v5 + v10++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 56 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_8;
      }
      v8 = 0;
      if (v9)
        v6 = v9;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_8:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C5143A00(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61EB828(a1, v4, &v4[7 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5143AC4(uint64_t result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  int v16;
  uint64_t v17;

  if (a2 == a4)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v6 = a2;
    do
    {
      ++v4;
      v7 = v6 + 1;
      while (v7 != a3)
      {
        v8 = *v7++;
        if (v8 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v6 = v7 - 1;
          goto LABEL_13;
        }
      }
      v6 = a3;
LABEL_13:
      ;
    }
    while (v6 != a4);
  }
  v5 = *(unsigned int *)(result + 8);
  if (v4 + v5 > (unint64_t)*(unsigned int *)(result + 12))
  {
    v16 = v4;
    v17 = result;
    v14 = a3;
    v15 = a2;
    v13 = a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v4 + v5, 8);
    LODWORD(v4) = v16;
    result = v17;
    a3 = v14;
    a2 = v15;
    a4 = v13;
    v5 = *(unsigned int *)(v17 + 8);
  }
  if (a2 != a4)
  {
    v9 = (unint64_t *)(*(_QWORD *)result + 8 * v5);
    do
    {
      v11 = *a2;
      v10 = a2 + 1;
      *v9 = v11;
      while (v10 != a3)
      {
        v12 = *v10++;
        if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          a2 = v10 - 1;
          goto LABEL_21;
        }
      }
      a2 = a3;
LABEL_21:
      ++v9;
    }
    while (a2 != a4);
  }
  *(_DWORD *)(result + 8) = v5 + v4;
  return result;
}

uint64_t sub_1C5143BB8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!*(_BYTE *)a2)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(**(_QWORD **)result + 16) + 176))(*(_QWORD *)(**(_QWORD **)result + 16));
    v4 = *(_DWORD *)(a2 + 4);
    v5 = **(_DWORD **)(v3 + 16);
    if (v4 == v5)
      return llvm::MachineOperand::setReg(a2, **(_DWORD **)(v3 + 8));
    if (v4 - 1 <= 0x3FFFFFFE && v5 - 1 <= 0x3FFFFFFE)
    {
      result = llvm::MCRegisterInfo::regsOverlap((_QWORD *)(result + 8), v4, v5);
      if ((_DWORD)result)
        return llvm::MachineOperand::setReg(a2, **(_DWORD **)(v3 + 8));
    }
  }
  return result;
}

char *sub_1C5143C48(char *result)
{
  char *v1;
  unsigned int v2;
  char v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 9)
  {
    v8 = result + 8;
    *(_QWORD *)result = 1;
    v9 = result + 72;
  }
  else
  {
    if ((v2 & 1) != 0)
      goto LABEL_12;
    if ((_DWORD)v5 != *((_DWORD *)result + 4))
    {
      MEMORY[0x1CAA32FB4](*((_QWORD *)result + 1), 8);
LABEL_12:
      if (v5 > 8)
      {
        *(_DWORD *)v1 &= ~1u;
        result = (char *)operator new(8 * v5, (std::align_val_t)8uLL);
        *((_QWORD *)v1 + 1) = result;
        *((_QWORD *)v1 + 2) = v5;
        v7 = *(_DWORD *)v1;
        *(_QWORD *)v1 = *(_DWORD *)v1 & 1;
        if ((v7 & 1) == 0)
        {
          v6 = &result[8 * v5];
          do
          {
LABEL_15:
            *(_QWORD *)result = -4096;
            result += 8;
          }
          while (result != v6);
          return result;
        }
      }
      else
      {
        *(_QWORD *)v1 = 1;
      }
      result = v1 + 8;
      v6 = v1 + 72;
      goto LABEL_15;
    }
    *(_QWORD *)result = 0;
    if (!(_DWORD)v5)
      return result;
    v8 = (_QWORD *)*((_QWORD *)result + 1);
    v9 = &v8[v5];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
  return result;
}

void sub_1C5143D5C(unsigned int *a1)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[2];
  sub_1C5142760(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == a1[4])
  {
    *((_QWORD *)a1 + 1) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 56 * v4;
      do
      {
        *v5 = -4096;
        v5 += 7;
        v6 -= 56;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      a1[4] = v8;
      v9 = operator new(56 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *((_QWORD *)a1 + 1) = 0;
      v10 = a1[4];
      if ((_DWORD)v10)
      {
        v11 = 56 * v10;
        do
        {
          *v9 = -4096;
          v9 += 7;
          v11 -= 56;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *((_QWORD *)a1 + 1) = 0;
      a1[4] = 0;
    }
  }
}

uint64_t sub_1C5143E68(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  _WORD *v20;
  int v21;
  unsigned __int16 v22;
  _BOOL4 v23;
  unsigned __int16 *v25;
  int v26;
  int v27;
  BOOL v28;
  int SubRegIndex;
  unsigned int v30;
  uint64_t v31;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 352);
  if (((*(_QWORD *)(v4 + 8 * (a3 >> 6)) >> a3) & 1) != 0 || ((*(_QWORD *)(v4 + 8 * (a4 >> 6)) >> a4) & 1) != 0)
    return 0;
  v10 = *(_QWORD *)(a1 + 248);
  v13 = *(_QWORD *)(v10 + 8);
  v11 = (_QWORD *)(v10 + 8);
  v12 = v13;
  v14 = v11[6];
  result = sub_1C514471C(*(_QWORD *)(a1 + 448), *(_DWORD *)(a1 + 464), a2, a4, v13, v14);
  if (result)
  {
    v15 = result;
    v16 = *(_DWORD **)(result + 32);
    if ((~*v16 & 0x5000000) == 0)
      return 0;
    v17 = v16[9];
    v18 = v16[1];
    v19 = v17 == a3 && v18 == a4;
    if (!v19)
    {
      v20 = (_WORD *)(v14 + 2 * *(unsigned int *)(v12 + 24 * a3 + 8));
      v21 = (unsigned __int16)*v20;
      v22 = v21 + a3;
      v19 = v21 == 0;
      v23 = *v20 != 0;
      if (!v19 && v17 != v22)
      {
        v25 = v20 + 1;
        do
        {
          v27 = *v25++;
          v26 = v27;
          v22 += v27;
          v23 = v27 != 0;
          if (!v27)
            v25 = 0;
          if (v26)
            v28 = v17 == v22;
          else
            v28 = 1;
        }
        while (!v28);
      }
      if (!v23)
        return 0;
      SubRegIndex = llvm::MCRegisterInfo::getSubRegIndex(v11, v17, a3);
      if (SubRegIndex != llvm::MCRegisterInfo::getSubRegIndex(v11, v18, a4))
        return 0;
    }
    if (v15 != a2)
    {
      v30 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4);
      do
      {
        llvm::MachineInstr::clearRegisterKills(v15, v30, *(_QWORD *)(a1 + 248));
        v15 = *(_QWORD *)(v15 + 8);
      }
      while (v15 != a2);
    }
    v31 = a2;
    if ((*(_BYTE *)a2 & 4) == 0)
    {
      v31 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        v31 = a2;
        do
          v31 = *(_QWORD *)(v31 + 8);
        while ((*(_WORD *)(v31 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v31 + 8));
    result = 1;
    *(_BYTE *)(a1 + 472) = 1;
  }
  return result;
}

uint64_t sub_1C5144030(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t v45;
  unsigned __int8 v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  BOOL v54;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t **v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;

  if (*(_DWORD *)(result + 456))
  {
    v3 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v3)
    {
      v4 = result;
      for (i = 0; i != v3; ++i)
      {
        v6 = *(_QWORD *)(a2 + 32);
        v7 = (unsigned int *)(v6 + 32 * i);
        v8 = *v7;
        if ((*v7 & 0x13F000FF) != 0)
          continue;
        if ((v8 & 0x8000000) == 0)
          continue;
        v9 = v7[1];
        if (!v9)
          continue;
        v10 = *(_QWORD *)(v6 + 32 * i + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8);
          if ((v8 & 0x1000000) != 0)
          {
            if ((v11 & 0x100000000) != 0)
              continue;
          }
          else if ((v11 & 0x80000000) != 0)
          {
            continue;
          }
        }
        v12 = *(uint64_t **)(v4 + 248);
        result = sub_1C514471C(*(_QWORD *)(v4 + 448), *(_DWORD *)(v4 + 464), a2, v7[1], v12[1], v12[7]);
        if (!result)
          continue;
        v13 = result;
        v14 = *(_QWORD *)(result + 32);
        if (v9 != *(_DWORD *)(v14 + 4))
          continue;
        v15 = *(unsigned int *)(v14 + 36);
        v16 = *(_QWORD **)(v4 + 264);
        v66 = v14;
        if (((*(_QWORD *)(v16[44] + ((v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) != 0)
        {
          v17 = *(_DWORD *)(v14 + 36);
          result = llvm::MachineRegisterInfo::isConstantPhysReg(v16, v15);
          if (!(_DWORD)result)
            continue;
          v18 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 36);
          v12 = *(uint64_t **)(v4 + 248);
          LODWORD(v15) = v17;
        }
        else
        {
          v18 = *(_DWORD *)(v14 + 36);
        }
        v65 = v15;
        result = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)a2, i, *(const llvm::TargetInstrInfo **)(v4 + 256), (const llvm::TargetRegisterInfo *)v12);
        if (result)
        {
          if (v18 - 1 > 0x3FFFFFFE)
            continue;
          v19 = (unint64_t)v18 >> 3;
          if (v19 >= *(unsigned __int16 *)(*(_QWORD *)result + 22))
            continue;
          v20 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)result + 8) + v19) >> (v18 & 7);
LABEL_24:
          if ((v20 & 1) == 0)
            continue;
        }
        else
        {
          if (**(_WORD **)(a2 + 16) != 19)
            continue;
          v25 = *(_QWORD *)(v4 + 248);
          v27 = *(uint64_t ***)(v25 + 240);
          v26 = *(uint64_t ***)(v25 + 248);
          if (v27 == v26)
            continue;
          LOBYTE(v20) = 0;
          v28 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4);
          v29 = v18;
          v30 = v18;
          v31 = v18 - 1;
          v32 = v29 >> 3;
          v33 = 1 << (v30 & 7);
          v34 = v28 - 1;
          v35 = v28 >> 3;
          result = (1 << (v28 & 7));
          while (1)
          {
            while (1)
            {
              if (v31 <= 0x3FFFFFFE)
              {
                v36 = *v27;
                v37 = **v27;
                v38 = *(unsigned __int16 *)(v37 + 22);
                if (v32 < v38)
                {
                  v39 = *(_QWORD *)(v37 + 8);
                  v40 = (v33 & *(_BYTE *)(v39 + v32)) == 0 || v34 > 0x3FFFFFFE;
                  v41 = v40 || v35 >= v38;
                  if (!v41 && (result & *(_BYTE *)(v39 + v35)) != 0)
                    break;
                }
              }
              if (++v27 == v26)
                goto LABEL_24;
            }
            v56 = result;
            v57 = v35;
            v59 = v34;
            v61 = v26;
            v63 = v33;
            v64 = v32;
            result = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v4 + 248) + 248))(*(_QWORD *)(v4 + 248), v36);
            if ((uint64_t *)result != v36)
              break;
            ++v27;
            LOBYTE(v20) = 1;
            v26 = v61;
            v32 = v64;
            v33 = v63;
            v34 = v59;
            v35 = v57;
            result = v56;
            if (v27 == v61)
              goto LABEL_25;
          }
          v42 = *(_QWORD *)(v4 + 248);
          v43 = *(uint64_t ***)(v42 + 240);
          v44 = *(uint64_t ***)(v42 + 248);
          v45 = v64;
          v46 = v63;
          if (v43 == v44)
            continue;
          v47 = *(unsigned int *)(*(_QWORD *)(v13 + 32) + 4);
          v48 = v47 - 1;
          v49 = v47 >> 3;
          v60 = v47 - 1;
          v62 = 1 << (v47 & 7);
          v58 = v47 >> 3;
          while (1)
          {
            v50 = *v43;
            v51 = **v43;
            v52 = *(unsigned __int16 *)(v51 + 22);
            if (v45 < v52)
            {
              v53 = *(_QWORD *)(v51 + 8);
              v54 = (v46 & *(_BYTE *)(v53 + v45)) == 0 || v48 > 0x3FFFFFFE;
              if (!v54 && v49 < v52 && (v62 & *(_BYTE *)(v53 + v49)) != 0)
              {
                result = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v4 + 248) + 248))(*(_QWORD *)(v4 + 248), *v43);
                v49 = v58;
                v48 = v60;
                v46 = v63;
                v45 = v64;
                if ((uint64_t *)result != v50)
                  break;
              }
            }
            if (++v43 == v44)
              goto LABEL_5;
          }
        }
LABEL_25:
        result = sub_1C51436A0(v4, a2, v7);
        if ((result & 1) == 0)
        {
          if (**(_WORD **)(a2 + 16) != 19
            || llvm::MachineInstr::findRegisterDefOperandIdx(a2, v65, 0, 1, *(_QWORD *)(v4 + 248)) == -1
            || (result = llvm::MachineInstr::findRegisterDefOperandIdx(a2, v65, 0, 0, 0), (_DWORD)result != -1))
          {
            result = llvm::MachineOperand::setReg((uint64_t)v7, v65);
            v21 = *(_DWORD *)(v66 + 32);
            if ((v21 & 0x8000000) == 0)
              goto LABEL_33;
            v22 = *(_QWORD *)(v66 + 40);
            if (v22)
            {
              v23 = *(_QWORD *)(*(_QWORD *)(v22 + 16) + 8);
              if ((v21 & 0x1000000) != 0)
              {
                if ((v23 & 0x100000000) != 0)
                {
LABEL_33:
                  *v7 &= ~0x8000000u;
                  v21 = *(_DWORD *)(v66 + 32);
                }
              }
              else if ((v23 & 0x80000000) != 0)
              {
                goto LABEL_33;
              }
            }
            *v7 = *v7 & 0xEFFFFFFF | (((v21 >> 28) & 1) << 28);
            v24 = *(_QWORD *)(a2 + 8);
            while (v13 != v24)
            {
              result = llvm::MachineInstr::clearRegisterKills(v13, v65, *(_QWORD *)(v4 + 248));
              v13 = *(_QWORD *)(v13 + 8);
            }
            *(_BYTE *)(v4 + 472) = 1;
          }
        }
LABEL_5:
        ;
      }
    }
  }
  return result;
}

_QWORD *sub_1C514447C(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _WORD *v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;

  v7 = *(_QWORD *)(a1 + 248);
  if (v7)
    v8 = (_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v9 = *(unsigned int *)(*v8 + 24 * a2 + 16);
  v10 = (_WORD *)(v8[6] + ((v9 >> 3) & 0x1FFFFFFE));
  v11 = *v10 + (v9 & 0xF) * a2;
  v12 = a1 + 424;
  v13 = a1 + 272;
  do
  {
    result = (_QWORD *)sub_1C51437E0(*(_QWORD *)(a1 + 448), *(_DWORD *)(a1 + 464), v11, 0);
    v21 = result;
    if (result)
    {
      if (a4 == 1)
      {
        v15 = result;
        result = (_QWORD *)sub_1C514487C(v13, (uint64_t)result);
        if ((_DWORD)result)
        {
          result = *(_QWORD **)(a1 + 344);
          v16 = *(unsigned int *)(a1 + 352);
          v17 = &result[v16];
          if ((_DWORD)v16)
          {
            v18 = 8 * v16;
            while ((_QWORD *)*result != v15)
            {
              ++result;
              v18 -= 8;
              if (!v18)
              {
                result = v17;
                break;
              }
            }
          }
          if (v17 != result + 1)
          {
            result = memmove(result, result + 1, (char *)v17 - (char *)(result + 1));
            LODWORD(v16) = *(_DWORD *)(a1 + 352);
          }
          *(_DWORD *)(a1 + 352) = v16 - 1;
        }
      }
      else
      {
        sub_1C5143868(v12, (uint64_t *)&v21);
        result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(v19 + 8), a3);
      }
    }
    v20 = (unsigned __int16)v10[1];
    ++v10;
    v11 += v20;
  }
  while (v20);
  return result;
}

void sub_1C51445B4(int32x2_t *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  _WORD *v6;
  unsigned __int16 v7;
  int v8;
  int32x2_t v9;
  unsigned __int32 v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  int v18;
  int v19;

  v5 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 24 * a2 + 16);
  v6 = (_WORD *)(*(_QWORD *)(a3 + 56) + ((v5 >> 3) & 0x1FFFFFFE));
  v7 = *v6 + (v5 & 0xF) * a2;
  do
  {
    v8 = v7;
    v9 = *a1;
    v10 = a1[2].u32[0];
    if (v10)
    {
      v11 = (v10 - 1) & (37 * v8);
      v12 = *(_QWORD *)&v9 + 56 * v11;
      v13 = *(_DWORD *)v12;
      if (*(_DWORD *)v12 == v8)
        goto LABEL_9;
      v14 = 1;
      while (v13 != -1)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v10 - 1);
        v12 = *(_QWORD *)&v9 + 56 * v11;
        v13 = *(_DWORD *)v12;
        if (*(_DWORD *)v12 == v8)
          goto LABEL_9;
      }
    }
    v12 = *(_QWORD *)&v9 + 56 * v10;
LABEL_9:
    if (v12 != *(_QWORD *)&v9 + 56 * v10)
    {
      sub_1C514490C((uint64_t)a1, *(_DWORD **)(v12 + 16), *(unsigned int *)(v12 + 24), *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 56));
      v16 = *(_QWORD *)(v12 + 8);
      if (v16)
      {
        v19 = *(_DWORD *)(*(_QWORD *)(v16 + 32) + 4);
        sub_1C514490C((uint64_t)a1, &v19, 1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 56));
      }
      v17 = *(void **)(v12 + 16);
      if (v17 != (void *)(v12 + 32))
        free(v17);
      *(_DWORD *)v12 = -2;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    v18 = (unsigned __int16)v6[1];
    ++v6;
    v7 = v18 + v8;
  }
  while (v18);
}

uint64_t sub_1C514471C(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _WORD *v15;
  _BOOL4 v16;
  unsigned __int16 v17;
  unsigned __int16 *v18;
  int v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v11 = *(unsigned int *)(a5 + 24 * a4 + 16);
  v12 = sub_1C51437E0(a1, a2, (unsigned __int16)(*(_WORD *)(a6 + ((v11 >> 3) & 0x1FFFFFFE)) + (v11 & 0xF) * a4), 1);
  if (!v12)
    return 0;
  v13 = *(_QWORD *)(v12 + 32);
  v14 = *(unsigned int *)(v13 + 4);
  if ((_DWORD)v14 != a4)
  {
    v15 = (_WORD *)(a6 + 2 * *(unsigned int *)(a5 + 24 * a4 + 8));
    v16 = *v15 != 0;
    if (*v15)
    {
      v17 = *v15 + a4;
      if ((_DWORD)v14 != v17)
      {
        v18 = v15 + 1;
        do
        {
          v20 = *v18++;
          v19 = v20;
          v17 += v20;
          v16 = v20 != 0;
          if (!v20)
            v18 = 0;
          if (v19)
            v21 = (_DWORD)v14 == v17;
          else
            v21 = 1;
        }
        while (!v21);
      }
    }
    if (!v16)
      return 0;
  }
  if (v12 != a3)
  {
    v22 = *(unsigned int *)(v13 + 36);
    v23 = v22 >> 5;
    v24 = 1 << v22;
    v25 = v14 >> 5;
    v26 = 1 << v14;
    v27 = v12;
    while (1)
    {
      v28 = *(unsigned int *)(v27 + 40);
      if ((_DWORD)v28)
        break;
LABEL_22:
      v27 = *(_QWORD *)(v27 + 8);
      if (v27 == a3)
        return v12;
    }
    v29 = 32 * v28;
    v30 = (_QWORD *)(*(_QWORD *)(v27 + 32) + 16);
    while (*((_BYTE *)v30 - 16) != 12
         || (*(_DWORD *)(*v30 + 4 * v23) & v24) != 0 && (*(_DWORD *)(*v30 + 4 * v25) & v26) != 0)
    {
      v30 += 4;
      v29 -= 32;
      if (!v29)
        goto LABEL_22;
    }
    return 0;
  }
  return a3;
}

uint64_t sub_1C514487C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v2 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = 8;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (uint64_t *)(v2 + 8 * v5);
  v7 = *v6;
  if (*v6 == a2)
  {
LABEL_10:
    *v6 = -8192;
    v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  v8 = 1;
  while (v7 != -4096)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v7 = *(_QWORD *)(v2 + 8 * v5);
    if (v7 == a2)
    {
      v6 = (uint64_t *)(v2 + 8 * v5);
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t sub_1C514490C(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int16 *v10;
  int v11;
  unsigned int v12;
  int *v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  if (a3)
  {
    v5 = &a2[a3];
    v6 = *(_QWORD *)result;
    v7 = *(_DWORD *)(result + 16);
    v8 = *(_QWORD *)result + 56 * v7;
    v9 = v7 - 1;
    do
    {
      v10 = (unsigned __int16 *)(a5
                               + (((unint64_t)*(unsigned int *)(a4 + 24 * *a2 + 16) >> 3) & 0x1FFFFFFE));
      v11 = *v10 + (*(_DWORD *)(a4 + 24 * *a2 + 16) & 0xF) * *a2;
      do
      {
        if (v7)
        {
          v12 = (37 * (unsigned __int16)v11) & v9;
          v13 = (int *)(v6 + 56 * v12);
          v14 = *v13;
          if (*v13 == (unsigned __int16)v11)
          {
LABEL_6:
            if (v13 != (int *)v8)
              *((_BYTE *)v13 + 48) = 0;
          }
          else
          {
            v16 = 1;
            while (v14 != -1)
            {
              v17 = v12 + v16++;
              v12 = v17 & v9;
              v13 = (int *)(v6 + 56 * v12);
              v14 = *v13;
              if (*v13 == (unsigned __int16)v11)
                goto LABEL_6;
            }
          }
        }
        v15 = v10[1];
        ++v10;
        result = v15;
        LOWORD(v11) = v15 + v11;
      }
      while (v15);
      ++a2;
    }
    while (a2 != v5);
  }
  return result;
}

uint64_t sub_1C51449CC()
{
  uint64_t result;

  result = sub_1C4D9A2C4("machine-cp-fwd", 0xEuLL, "Controls which register COPYs are forwarded", 0x2BuLL);
  dword_1ED7FA780 = result;
  return result;
}

uint64_t sub_1C5144A00(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Machine Common Subexpression Elimination";
  *(_QWORD *)(v3 + 8) = 40;
  *(_QWORD *)(v3 + 16) = "machine-cse";
  *(_QWORD *)(v3 + 24) = 11;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F6F2A;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5144A9C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5144A9C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6F2A);
  *(_QWORD *)v1 = &off_1E8144448;
  *(_DWORD *)(v1 + 296) = 0;
  *(_QWORD *)(v1 + 304) = 0;
  *(_QWORD *)(v1 + 312) = 0;
  *(_DWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 336) = 0;
  *(_DWORD *)(v1 + 344) = 0;
  *(_QWORD *)(v1 + 352) = 0;
  *(_QWORD *)(v1 + 360) = 0;
  *(_DWORD *)(v1 + 368) = 0;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_QWORD *)(v1 + 408) = v1 + 424;
  *(_QWORD *)(v1 + 416) = 0x400000000;
  *(_QWORD *)(v1 + 456) = v1 + 472;
  *(_QWORD *)(v1 + 464) = 0;
  *(_QWORD *)(v1 + 472) = 0;
  *(_QWORD *)(v1 + 480) = 1;
  *(_QWORD *)(v1 + 488) = v1 + 504;
  *(_QWORD *)(v1 + 496) = 0x4000000000;
  *(_DWORD *)(v1 + 1016) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7FA790);
  if (v3 != -1)
  {
    v7[0] = sub_1C5144A00;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7FA790, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5144BDC(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E8144448;
  v2 = (_QWORD *)*((_QWORD *)a1 + 61);
  if (v2 != (_QWORD *)((char *)a1 + 504))
    free(v2);
  sub_1C51473D0((_QWORD *)a1 + 44);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 41), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 38), 8);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v3 != (_QWORD *)((char *)a1 + 192))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v4 != (_QWORD *)((char *)a1 + 120))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5 != (_QWORD *)((char *)a1 + 48))
    free(v5);
  llvm::Pass::~Pass(a1);
}

void sub_1C5144C94(llvm::Pass *a1)
{
  sub_1C5144BDC(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5144CB8(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
}

unsigned int *sub_1C5144D6C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *result;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v2 = a1 + 304;
  v3 = *(_DWORD *)(a1 + 312);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 320);
    if (v4 <= 4 * v3 || v4 < 0x41)
    {
LABEL_4:
      if (v4)
      {
        v5 = *(_QWORD **)v2;
        v6 = 16 * v4;
        do
        {
          *v5 = -4096;
          v5 += 2;
          v6 -= 16;
        }
        while (v6);
      }
      *(_QWORD *)(a1 + 312) = 0;
      goto LABEL_8;
    }
    v16 = 1 << (33 - __clz(v3 - 1));
    if (v16 <= 64)
      v8 = 64;
    else
      v8 = v16;
  }
  else
  {
    if (!*(_DWORD *)(a1 + 316))
      goto LABEL_8;
    v4 = *(_DWORD *)(a1 + 320);
    if (v4 <= 0x40)
      goto LABEL_4;
    v8 = 0;
  }
  if (v8 == v4)
  {
    *(_QWORD *)(a1 + 312) = 0;
    v9 = 16 * v4;
    v10 = *(_QWORD **)(a1 + 304);
    do
    {
      *v10 = -4096;
      v10 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)v2, 8);
    if (v8)
    {
      v11 = (4 * v8 / 3u + 1) | ((unint64_t)(4 * v8 / 3u + 1) >> 1);
      v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
      LODWORD(v12) = (((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8)) + 1;
      *(_DWORD *)(a1 + 320) = v12;
      v13 = operator new(16 * v12, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 304) = v13;
      *(_QWORD *)(a1 + 312) = 0;
      v14 = *(unsigned int *)(a1 + 320);
      if ((_DWORD)v14)
      {
        v15 = 16 * v14;
        do
        {
          *v13 = -4096;
          v13 += 2;
          v15 -= 16;
        }
        while (v15);
      }
    }
    else
    {
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
    }
  }
LABEL_8:
  result = sub_1C5147430((unsigned int *)(a1 + 328));
  *(_DWORD *)(a1 + 496) = 0;
  return result;
}

uint64_t sub_1C5144ECC(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  _QWORD *v11;
  unsigned int *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  char v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  llvm::MachineBasicBlock *NearestCommonDominator;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  llvm::MachineBasicBlock *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  _BOOL4 v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int16 *v70;
  __int16 v71;
  unint64_t v72;
  llvm::MachineBasicBlock *v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  unint64_t FirstTerminator;
  uint64_t v85;
  unsigned __int8 **v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  int v104;
  BOOL v105;
  unsigned int v106;
  _QWORD *v107;
  int v108;
  const llvm::MachineInstr *const ***v109;
  uint64_t v110;
  uint64_t v111;
  const llvm::MachineInstr *const *v112;
  const llvm::MachineInstr **v113;
  const llvm::MachineInstr *v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  const llvm::MachineInstr *const **v120;
  const llvm::MachineInstr *const *v121;
  const llvm::MachineInstr *const **v122;
  int v123;
  BOOL v124;
  unsigned int v125;
  int v126;
  const llvm::MachineInstr *const *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int HashValue;
  unsigned int v134;
  int j;
  int v136;
  uint64_t *v137;
  uint64_t v139;
  char v140;
  _DWORD *v141;
  _DWORD *v142;
  int v143;
  uint64_t v144;
  _BOOL4 hasOneNonDBGUse;
  uint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  _QWORD *v152;
  int v153;
  int v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  int k;
  int v160;
  uint64_t *v161;
  void *v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  int m;
  int v170;
  uint64_t *v171;
  int v173;
  uint64_t v174;
  uint64_t v175;
  _DWORD *v176;
  _DWORD *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _WORD *v185;
  int v186;
  uint64_t v187;
  unsigned int v188;
  BOOL v189;
  int v190;
  unsigned int v191;
  unsigned int *n;
  unsigned __int16 *v193;
  int v194;
  unsigned __int16 *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _DWORD *v200;
  _DWORD *v201;
  unint64_t v202;
  _QWORD *ii;
  unsigned int v204;
  char *v205;
  char *v206;
  _QWORD *v207;
  int v208;
  unint64_t v209;
  int v210;
  _QWORD *v211;
  int v212;
  uint64_t v214;
  char v215;
  int *v216;
  int *v217;
  int v218;
  _BOOL4 v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  _QWORD *v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _WORD *v230;
  int v231;
  uint64_t v232;
  unsigned int v233;
  BOOL v234;
  int v235;
  unsigned int v236;
  unsigned int *jj;
  unsigned __int16 *v238;
  int v239;
  unsigned __int16 *v240;
  uint64_t v241;
  int v242;
  int v243;
  unsigned int v244;
  int mm;
  int v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unsigned __int16 *v253;
  __int16 v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  int v262;
  int v263;
  unsigned int v264;
  int kk;
  int v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v270;
  uint64_t v271;
  int v272;
  unint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  int v286;
  uint64_t v288;
  uint64_t v289;
  const llvm::MachineInstr *const **v290;
  const llvm::MachineInstr *const **v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t UniqueVRegDef;
  uint64_t v295;
  _DWORD *v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int *v303;
  uint64_t v304;
  unsigned int v305;
  unsigned int *v306;
  uint64_t v307;
  unsigned int *v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int *v311;
  uint64_t v312;
  unsigned int RegisterUseOperandIdx;
  uint64_t v314;
  unsigned int v315;
  BOOL v316;
  uint64_t v317;
  char *v318;
  unint64_t v319;
  char *v320;
  unint64_t v321;
  char *v322;
  unint64_t v323;
  char *v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  char *v329;
  char *v330;
  char *v331;
  int v332;
  unint64_t v333;
  int v334;
  int v335;
  int v336;
  uint64_t v337;
  unsigned int v338;
  const llvm::MachineInstr *const ***v339;
  const llvm::MachineInstr *const **v340;
  const llvm::MachineInstr *const ***v341;
  int v342;
  BOOL v343;
  unsigned int v344;
  const llvm::MachineInstr *const ***v345;
  _QWORD *v346;
  void *v347;
  unsigned int v348;
  _QWORD *v349;
  void *v350;
  _QWORD *v351;
  int v352;
  BOOL v353;
  unsigned int v354;
  _QWORD *v355;
  int v356;
  uint64_t v357;
  int v358;
  unsigned int v359;
  const llvm::MachineInstr *const *v360;
  const llvm::MachineInstr *const **v361;
  int v362;
  BOOL v363;
  unsigned int v364;
  uint64_t v365;
  int v366;
  unsigned int v367;
  const llvm::MachineInstr *const *v368;
  int v369;
  BOOL v370;
  unsigned int v371;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  int v376;
  unint64_t v377;
  int v378;
  _QWORD *v379;
  char v380;
  const llvm::MachineInstr *const ***v381;
  int v382;
  const llvm::MachineInstr *const *v383;
  const llvm::MachineInstr *const **v384;
  _QWORD *v385;
  void **v386;
  uint64_t v387;
  unsigned int v388;
  int v389;
  llvm::MachineBasicBlock *v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  int v397[2];
  _QWORD *v398;
  uint64_t v399;
  _QWORD v400[2];
  int v401;
  uint64_t v402;
  int v403;
  char v404;
  uint64_t v405;
  void *v406;
  uint64_t v407;
  _QWORD v408[8];
  void *v409;
  uint64_t v410;
  _QWORD v411[32];
  void *v412;
  uint64_t v413;
  _BYTE v414[16];
  void *v415;
  uint64_t v416;
  _BYTE v417[32];
  _QWORD **v418;
  _QWORD *v419;
  uint64_t v420;
  unsigned int *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t v425;
  uint64_t v426;
  const llvm::MachineInstr *const **v427;
  uint64_t v428;
  _BYTE v429[32];
  _QWORD **v430;
  _QWORD *v431;
  uint64_t v432;
  uint64_t v433;

  v3 = (uint64_t)a1;
  v433 = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, *(const llvm::Function **)a2) & 1) != 0)
  {
    v4 = 0;
    return v4 & 1;
  }
  *(_QWORD *)(v3 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v3 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v3 + 280) = *(_QWORD *)(a2 + 40);
  v5 = **(void ****)(v3 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(v3 + 264) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v7 = **(void ****)(v3 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(v3 + 272) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::MachineDominatorTree::ID);
  v9 = **(void ****)(v3 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::MachineBlockFrequencyInfo::ID);
  *(_QWORD *)(v3 + 288) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  *(_DWORD *)(v3 + 296) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 248) + 1072))(*(_QWORD *)(v3 + 248));
  v11 = &loc_1C63F4000;
  v12 = &dword_1C6404980[7584];
  v13 = &unk_1C640E000;
  v399 = v3;
  if ((*(_DWORD *)(*(_QWORD *)(a2 + 8) + 472) - 30) > 0xFFFFFFFD)
  {
    v380 = 0;
    goto LABEL_156;
  }
  v14 = *(_QWORD *)(v3 + 272);
  v409 = v411;
  v410 = 0x2000000000;
  v396 = v3 + 328;
  sub_1C5147430((unsigned int *)(v3 + 328));
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v14);
  v380 = 0;
  v411[0] = *(_QWORD *)(*(_QWORD *)(v14 + 1320) + 48);
  v15 = 1;
  do
  {
    v16 = *((_QWORD *)v409 + v15 - 1);
    LODWORD(v410) = v15 - 1;
    sub_1C5147570((unsigned int *)&v409, (uint64_t)v409 + 8 * v15 - 8, *(char **)(v16 + 24), (char *)(*(_QWORD *)(v16 + 24) + 8 * *(unsigned int *)(v16 + 32)));
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)v16 + 48;
    v19 = *(_QWORD *)(*(_QWORD *)v16 + 56);
    if (v19 != v18)
    {
      v20 = 0;
      while (1)
      {
        if (!v19 || (v21 = v19, (*(_BYTE *)v19 & 4) == 0))
        {
          v21 = v19;
          if ((*(_WORD *)(v19 + 44) & 8) != 0)
          {
            v21 = v19;
            do
              v21 = *(_QWORD *)(v21 + 8);
            while ((*(_WORD *)(v21 + 44) & 8) != 0);
          }
        }
        v22 = *(_QWORD *)(v21 + 8);
        v427 = (const llvm::MachineInstr *const **)v429;
        v428 = 0x800000000;
        v431 = 0;
        v432 = 0;
        v430 = &v431;
        if (!sub_1C5147D94(v399, (llvm::MachineInstr *)v19))
          goto LABEL_81;
        v23 = *(unsigned __int16 *)(v19 + 44);
        v75 = (v23 & 0xC) == 0;
        v24 = (v23 >> 2) & 1;
        v25 = v75 ? 1 : v24;
        v26 = *(unsigned __int16 **)(v19 + 16);
        v27 = *((_QWORD *)v26 + 1);
        if ((v25 & 1) != 0)
        {
          if ((v27 & 0x800000) != 0)
            goto LABEL_81;
        }
        else
        {
          v32 = v19;
          if ((v27 & 0x800000) != 0)
            goto LABEL_81;
          while ((*(_WORD *)(v32 + 44) & 8) != 0)
          {
            v32 = *(_QWORD *)(v32 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v32 + 16) + 10) & 0x80) != 0)
              goto LABEL_81;
          }
        }
        if (*v26 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v19 + 32) + 48) & 8) != 0)
          goto LABEL_81;
        if ((v25 & 1) != 0)
        {
          if ((v27 & 0x40080000) != 0)
            goto LABEL_81;
        }
        else
        {
          v88 = v20;
          v89 = v19;
          if ((v27 & 0x80000) != 0)
          {
LABEL_136:
            v20 = v88;
            goto LABEL_81;
          }
          while ((*(_WORD *)(v89 + 44) & 8) != 0)
          {
            v89 = *(_QWORD *)(v89 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v89 + 16) + 10) & 8) != 0)
              goto LABEL_136;
          }
          v90 = *(_QWORD *)(v19 + 16);
          for (i = v19; ; v90 = *(_QWORD *)(i + 16))
          {
            if ((*(_BYTE *)(v90 + 11) & 0x40) == 0)
            {
              v20 = v88;
              if (*(_WORD *)v90 != 20)
                break;
            }
            if ((*(_WORD *)(i + 44) & 8) == 0)
              goto LABEL_136;
            i = *(_QWORD *)(i + 8);
          }
        }
        v28 = *((unsigned __int8 *)v26 + 4);
        v29 = v28;
        if ((v27 & 2) != 0)
        {
          v60 = *(_DWORD *)(v19 + 40);
          v29 = *((unsigned __int8 *)v26 + 4);
          if (v60 != v28)
          {
            v61 = v60 - 1;
            v62 = *((unsigned __int8 *)v26 + 4);
            v29 = v62;
            do
            {
              v63 = *(_DWORD *)(*(_QWORD *)(v19 + 32) + 32 * v62);
              if ((v63 & 0x10000FF) != 0x1000000)
                break;
              v29 += (v63 & 0x2000000) == 0;
              if (v61 == v62)
                break;
              ++v62;
            }
            while ((v63 & 0x2000000) == 0);
          }
        }
        v30 = *((_QWORD *)v26 + 4);
        if (v30)
        {
          v31 = -1;
          do
            ++v31;
          while (*(_WORD *)(v30 + 2 * v31));
        }
        else
        {
          v31 = 0;
        }
        if (v31 + v29 == 1)
        {
          if ((v27 & 2) == 0 || (v64 = *(_DWORD *)(v19 + 40), v64 == v28))
          {
            v33 = v28;
          }
          else
          {
            v65 = v64 - 1;
            v33 = v28;
            do
            {
              v66 = *(_DWORD *)(*(_QWORD *)(v19 + 32) + 32 * v28);
              if ((v66 & 0x10000FF) != 0x1000000)
                break;
              v33 += (v66 & 0x2000000) == 0;
              if (v65 == v28)
                break;
              ++v28;
            }
            while ((v66 & 0x2000000) == 0);
          }
          if (v33 == 1)
          {
            v34 = v20;
            v35 = *(unsigned int *)(v19 + 40);
            if ((_DWORD)v35)
            {
              v36 = 32 * v35;
              v37 = (_DWORD *)(*(_QWORD *)(v19 + 32) + 4);
              do
              {
                if (!*(v37 - 1) && (*v37 & 0x80000000) == 0)
                {
                  if ((*(v37 - 1) & 0x1000000) != 0)
                    goto LABEL_80;
                  LODWORD(v406) = *v37;
                  sub_1C484FF44((uint64_t)&v427, (unsigned int *)&v406);
                }
                v37 += 8;
                v36 -= 32;
              }
              while (v36);
            }
            v406 = (void *)v19;
            if ((sub_1C61EB95C(*(_QWORD *)(v399 + 328), (const llvm::MachineInstr *const *)*(unsigned int *)(v399 + 344), (llvm::MachineInstrExpressionTrait *)&v406, (uint64_t **)&v415) & 1) == 0)
            {
              v406 = (void *)v19;
              sub_1C61EBA48(v396, (llvm::MachineInstrExpressionTrait *)&v406)[1] = v17;
LABEL_80:
              v20 = v34;
              goto LABEL_81;
            }
            v406 = (void *)v19;
            v38 = sub_1C61EBA48(v396, (llvm::MachineInstrExpressionTrait *)&v406)[1];
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v14);
            v392 = v38;
            NearestCommonDominator = (llvm::MachineBasicBlock *)llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(v14 + 1320), v17, v38);
            v20 = v34;
            if (llvm::MachineBasicBlock::isLegalToHoistInto(NearestCommonDominator))
              break;
          }
        }
LABEL_81:
        sub_1C61247C0((uint64_t)&v430, v431);
        if (v427 != (const llvm::MachineInstr *const **)v429)
          free(v427);
        v19 = v22;
        if (v22 == v18)
          goto LABEL_151;
      }
      v40 = *(_QWORD *)(**((_QWORD **)NearestCommonDominator + 4) + 112);
      if (v40 && *(char *)(v40 + 13) < 0)
      {
        v59 = 1;
        v47 = (uint64_t *)v392;
        goto LABEL_86;
      }
      v41 = *(_QWORD *)(*(_QWORD *)(v399 + 288) + 248);
      if (v41)
      {
        v42 = *(_DWORD *)(v41 + 176);
        if (v42)
        {
          v43 = *(_QWORD *)(v41 + 160);
          v44 = v42 - 1;
          v45 = v44 & ((NearestCommonDominator >> 4) ^ (NearestCommonDominator >> 9));
          v46 = *(llvm::MachineBasicBlock **)(v43 + 16 * v45);
          v47 = (uint64_t *)v392;
          if (v46 == NearestCommonDominator)
          {
LABEL_55:
            v48 = *(unsigned int *)(v43 + 16 * v45 + 8);
            if (v48 != 0xFFFFFFFFLL)
            {
              v49 = *(_QWORD *)(*(_QWORD *)(v41 + 8) + 24 * v48 + 16);
              goto LABEL_57;
            }
          }
          else
          {
            v77 = 1;
            while (v46 != (llvm::MachineBasicBlock *)-4096)
            {
              v78 = v45 + v77++;
              v45 = v78 & v44;
              v46 = *(llvm::MachineBasicBlock **)(v43 + 16 * v45);
              if (v46 == NearestCommonDominator)
                goto LABEL_55;
            }
          }
          v49 = 0;
LABEL_57:
          v50 = v44 & ((v17 >> 4) ^ (v17 >> 9));
          v51 = *(_QWORD *)(v43 + 16 * v50);
          if (v51 == v17)
          {
LABEL_58:
            v52 = *(unsigned int *)(v43 + 16 * v50 + 8);
            if (v52 != 0xFFFFFFFFLL)
            {
              v53 = *(_QWORD *)(*(_QWORD *)(v41 + 8) + 24 * v52 + 16);
              goto LABEL_60;
            }
          }
          else
          {
            v79 = 1;
            while (v51 != -4096)
            {
              v80 = v50 + v79++;
              v50 = v80 & v44;
              v51 = *(_QWORD *)(v43 + 16 * v50);
              if (v51 == v17)
                goto LABEL_58;
            }
          }
          v53 = 0;
LABEL_60:
          v54 = v44 & ((v392 >> 4) ^ (v392 >> 9));
          v55 = *(_QWORD *)(v43 + 16 * v54);
          if (v55 == v392)
          {
LABEL_61:
            v56 = *(unsigned int *)(v43 + 16 * v54 + 8);
            if (v56 != 0xFFFFFFFFLL)
            {
              v41 = *(_QWORD *)(*(_QWORD *)(v41 + 8) + 24 * v56 + 16);
LABEL_63:
              v57 = __CFADD__(v41, v53);
              v58 = v41 + v53;
              if (v57)
                v58 = -1;
              v59 = v49 <= v58;
LABEL_86:
              if (NearestCommonDominator != (llvm::MachineBasicBlock *)v47 && v59)
              {
                v67 = *(_QWORD *)(v17 + 16);
                if (v67)
                {
                  v68 = v47[2];
                  if (v68)
                  {
                    v390 = NearestCommonDominator;
                    v393 = v68;
                    v69 = *(_QWORD *)(v17 + 16);
                    if ((llvm::isPotentiallyReachable(v68, v67, 0, 0, 0) & 1) != 0
                      || llvm::isPotentiallyReachable(v69, v393, 0, 0, 0))
                    {
                      v70 = *(unsigned __int16 **)(v19 + 16);
                      if (*v70 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v19 + 32) + 48) & 0x20) != 0)
                      {
                        LOBYTE(v74) = 1;
                        v73 = v390;
                      }
                      else
                      {
                        v71 = *(_WORD *)(v19 + 44);
                        v72 = *((_QWORD *)v70 + 1);
                        v73 = v390;
                        if ((v71 & 0xC) != 0 && (v71 & 4) == 0)
                        {
                          v92 = v19;
                          if ((v72 & 0x1000000000) == 0)
                          {
                            while ((*(_WORD *)(v92 + 44) & 8) != 0)
                            {
                              v92 = *(_QWORD *)(v92 + 8);
                              LOBYTE(v74) = 1;
                              if ((*(_BYTE *)(*(_QWORD *)(v92 + 16) + 12) & 0x10) != 0)
                                goto LABEL_96;
                            }
LABEL_98:
                            v406 = v408;
                            v407 = 0x200000000;
                            if ((_DWORD)v428)
                              v75 = 0;
                            else
                              v75 = v432 == 0;
                            if (v75
                              || (v76 = llvm::MachineBasicBlock::getFirstTerminator(v73),
                                  sub_1C514771C(v399, v76, (_QWORD *)v19, (uint64_t)&v427, (uint64_t *)&v406, &v421)))
                            {
                              v394 = *(_DWORD *)(*(_QWORD *)(v19 + 32) + 4);
                              v388 = llvm::MachineRegisterInfo::cloneVirtualRegister(*(_QWORD *)(v399 + 280), v394, "", 0);
                              if (sub_1C51479B4(v399, v388, v394, (uint64_t)v390, v19))
                              {
                                v83 = *(_QWORD *)(v399 + 248);
                                FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v390);
                                v85 = (*(uint64_t (**)(uint64_t, llvm::MachineBasicBlock *, unint64_t, uint64_t))(*(_QWORD *)v83 + 184))(v83, v390, FirstTerminator, v19);
                                v415 = 0;
                                v412 = 0;
                                v86 = (unsigned __int8 **)(v85 + 56);
                                if (&v412 != (void **)(v85 + 56))
                                {
                                  if (*v86)
                                  {
                                    v395 = v85;
                                    v386 = (void **)(v85 + 56);
                                    llvm::MetadataTracking::untrack(v85 + 56, *v86);
                                    v85 = v395;
                                    v87 = (unsigned __int8 *)v412;
                                    *v386 = v412;
                                    if (v87)
                                    {
                                      llvm::MetadataTracking::retrack((uint64_t)&v412, v87, (uint64_t)v386);
                                      v85 = v395;
                                      v412 = 0;
                                    }
                                  }
                                  else
                                  {
                                    *v86 = 0;
                                  }
                                }
                                llvm::MachineOperand::setReg(*(_QWORD *)(v85 + 32), v388);
                                v424 = (uint64_t *)v19;
                                sub_1C61EBA48(v396, (llvm::MachineInstrExpressionTrait *)&v424)[1] = (uint64_t)v390;
                                if (v415)
                                  llvm::MetadataTracking::untrack((uint64_t)&v415, (unsigned __int8 *)v415);
                                v20 = 1;
                              }
                            }
                            if (v406 != v408)
                              free(v406);
                            goto LABEL_81;
                          }
                          LOBYTE(v74) = 1;
                        }
                        else
                        {
                          v74 = (v72 >> 36) & 1;
                        }
                      }
LABEL_96:
                      if (v73 == (llvm::MachineBasicBlock *)v17 || (v74 & 1) == 0)
                        goto LABEL_98;
                    }
                  }
                }
              }
              goto LABEL_81;
            }
          }
          else
          {
            v81 = 1;
            while (v55 != -4096)
            {
              v82 = v54 + v81++;
              v54 = v82 & v44;
              v55 = *(_QWORD *)(v43 + 16 * v54);
              if (v55 == v392)
                goto LABEL_61;
            }
          }
          v41 = 0;
          goto LABEL_63;
        }
        v53 = 0;
        v49 = 0;
        v41 = 0;
      }
      else
      {
        v53 = 0;
        v49 = 0;
      }
      v47 = (uint64_t *)v392;
      goto LABEL_63;
    }
    LOBYTE(v20) = 0;
LABEL_151:
    v380 |= v20;
    v15 = v410;
  }
  while ((_DWORD)v410);
  v11 = (_QWORD *)&loc_1C63F4000;
  if (v409 != v411)
    free(v409);
  v3 = v399;
  v12 = dword_1C6404980 + 30336;
  v13 = (_QWORD *)&unk_1C640E000;
LABEL_156:
  v93 = *(_QWORD *)(v3 + 272);
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v93);
  v402 = *(_QWORD *)(*(_QWORD *)(v93 + 1320) + 48);
  v94 = v402;
  v409 = v411;
  v410 = v11[500];
  v406 = v408;
  HIDWORD(v407) = 8;
  v400[0] = 0;
  v400[1] = 0;
  v401 = 0;
  *(_DWORD *)(v3 + 1016) = 0;
  v408[0] = v94;
  v95 = 1;
  while (2)
  {
    v96 = *((_QWORD *)v406 + v95 - 1);
    LODWORD(v407) = v95 - 1;
    v402 = v96;
    v97 = v410;
    if (v410 >= (unint64_t)HIDWORD(v410))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v409, (uint64_t)v411, v410 + 1, 8);
      v97 = v410;
    }
    *((_QWORD *)v409 + v97) = v96;
    LODWORD(v410) = v410 + 1;
    v98 = v402;
    v99 = *(_DWORD *)(v402 + 32);
    if (!v401)
    {
      v107 = 0;
      goto LABEL_173;
    }
    v100 = ((v402 >> 4) ^ (v402 >> 9)) & (v401 - 1);
    v101 = (_QWORD *)(v400[0] + 16 * v100);
    v102 = *v101;
    if (v402 != *v101)
    {
      v103 = 0;
      v104 = 1;
      while (v102 != -4096)
      {
        if (v103)
          v105 = 0;
        else
          v105 = v102 == -8192;
        if (v105)
          v103 = v101;
        v106 = v100 + v104++;
        v100 = v106 & (v401 - 1);
        v101 = (_QWORD *)(v400[0] + 16 * v100);
        v102 = *v101;
        if (v402 == *v101)
          goto LABEL_174;
      }
      if (v103)
        v107 = v103;
      else
        v107 = v101;
LABEL_173:
      v101 = sub_1C50E44BC((uint64_t)v400, (uint64_t)&v402, &v402, v107);
      *v101 = v402;
      *((_DWORD *)v101 + 2) = 0;
      v98 = v402;
    }
LABEL_174:
    *((_DWORD *)v101 + 2) = v99;
    sub_1C5147570((unsigned int *)&v406, (uint64_t)v406 + 8 * v407, *(char **)(v98 + 24), (char *)(*(_QWORD *)(v98 + 24) + 8 * *(unsigned int *)(v98 + 32)));
    v95 = v407;
    if ((_DWORD)v407)
      continue;
    break;
  }
  if ((_DWORD)v410)
  {
    v108 = 0;
    v387 = v3 + 352;
    v109 = (const llvm::MachineInstr *const ***)v409;
    v374 = v3 + 304;
    v385 = (_QWORD *)(v3 + 488);
    v373 = v3 + 504;
    v110 = *((_QWORD *)v12 + 203);
    v111 = v13[105];
    v375 = (char *)v409 + 8 * v410;
    while (1)
    {
      v384 = *v109;
      v112 = **v109;
      v113 = (const llvm::MachineInstr **)operator new();
      v114 = *(const llvm::MachineInstr **)(v3 + 376);
      *v113 = (const llvm::MachineInstr *)v387;
      v113[1] = v114;
      *(_QWORD *)(v3 + 376) = v113;
      v113[2] = 0;
      v115 = *(_DWORD *)(v3 + 320);
      v116 = v112 >> 4;
      if (!v115)
      {
        v120 = 0;
        goto LABEL_192;
      }
      v117 = *(_QWORD *)(v3 + 304);
      v118 = v115 - 1;
      v119 = (v115 - 1) & (v116 ^ (v112 >> 9));
      v120 = (const llvm::MachineInstr *const **)(v117 + 16 * v119);
      v121 = *v120;
      if (v112 != *v120)
        break;
LABEL_198:
      v381 = v109;
      v382 = v108;
      v120[1] = v113;
      v427 = (const llvm::MachineInstr *const **)v429;
      v428 = v110;
      v424 = &v426;
      v425 = v111;
      v421 = (unsigned int *)&v423;
      v422 = v111;
      v128 = *((_QWORD *)v112 + 7);
      if ((const llvm::MachineInstr *const *)v128 == v112 + 6)
      {
        v389 = 0;
        goto LABEL_601;
      }
      v389 = 0;
      v383 = v112;
      v398 = v112 + 6;
      do
      {
        if (!v128 || (v129 = v128, (*(_BYTE *)v128 & 4) == 0))
        {
          v129 = v128;
          if ((*(_WORD *)(v128 + 44) & 8) != 0)
          {
            v129 = v128;
            do
              v129 = *(_QWORD *)(v129 + 8);
            while ((*(_WORD *)(v129 + 44) & 8) != 0);
          }
        }
        *(_QWORD *)v397 = *(_QWORD *)(v129 + 8);
        if (!sub_1C5147D94(v3, (llvm::MachineInstr *)v128))
          goto LABEL_569;
        v415 = (void *)v128;
        v131 = *(_DWORD *)(v3 + 368);
        if (v131)
        {
          v132 = *(_QWORD *)(v3 + 352);
          HashValue = llvm::MachineInstrExpressionTrait::getHashValue((llvm::MachineInstrExpressionTrait *)&v415, (const llvm::MachineInstr *const *)v130);
          v134 = v131 - 1;
          for (j = 1; ; ++j)
          {
            v136 = HashValue & v134;
            v137 = (uint64_t *)(v132 + 16 * (HashValue & v134));
            v130 = *v137;
            if ((unint64_t)(*v137 + 1) >= 2 && (unint64_t)(v128 + 1) > 1)
            {
              if ((llvm::MachineInstr::isIdenticalTo(v128, v130, 3) & 1) != 0)
                goto LABEL_282;
              v130 = *v137;
              if (!*v137)
                break;
            }
            else
            {
              if (v128 == v130)
                goto LABEL_282;
              if (!v130)
                break;
            }
            HashValue = v136 + j;
          }
        }
        v139 = *(unsigned int *)(v128 + 40);
        if ((_DWORD)v139)
        {
          v140 = 0;
          v141 = *(_DWORD **)(v128 + 32);
          v142 = &v141[8 * v139];
          do
          {
            if ((*v141 & 0x10000FF) == 0)
            {
              v143 = v141[1];
              if (v143 < 0)
              {
                v144 = *(_QWORD *)(v3 + 280);
                hasOneNonDBGUse = llvm::MachineRegisterInfo::hasOneNonDBGUse(v144, v141[1]);
                v146 = *(_QWORD *)(*(_QWORD *)(v144 + 24) + 16 * (v143 & 0x7FFFFFFF) + 8);
                if (v146
                  && ((*(_BYTE *)(v146 + 3) & 1) != 0
                   || (v146 = *(_QWORD *)(v146 + 24)) != 0 && (*(_BYTE *)(v146 + 3) & 1) != 0))
                {
                  v147 = *(_QWORD *)(v146 + 8);
                }
                else
                {
                  v147 = 0;
                }
                if (**(_WORD **)(v147 + 16) == 19
                  && (v148 = *(_DWORD **)(v147 + 32), v149 = v148[9], (v149 & 0x80000000) != 0)
                  && (*v148 & 0xFFF00) == 0
                  && (v148[8] & 0xFFF00) == 0)
                {
                  v150 = llvm::MachineRegisterInfo::constrainRegAttrs(v144, v149, v143, 0);
                  v3 = v399;
                  if (v150)
                  {
                    llvm::MachineOperand::setReg((uint64_t)v141, v149);
                    llvm::MachineRegisterInfo::clearKillFlags(*(_QWORD *)(v399 + 280), v149);
                    if (hasOneNonDBGUse)
                    {
                      llvm::MachineInstr::changeDebugValuesDefReg(v147, v149);
                      v151 = v147;
                      if ((*(_BYTE *)v147 & 4) == 0)
                      {
                        v151 = v147;
                        if ((*(_WORD *)(v147 + 44) & 8) != 0)
                        {
                          v151 = v147;
                          do
                            v151 = *(_QWORD *)(v151 + 8);
                          while ((*(_WORD *)(v151 + 44) & 8) != 0);
                        }
                      }
                      sub_1C487FE80(*(_QWORD *)(v147 + 24) + 40, v147, *(_QWORD *)(v151 + 8));
                    }
                    v140 = 1;
                  }
                }
                else
                {
                  v3 = v399;
                }
              }
            }
            v141 += 8;
          }
          while (v141 != v142);
          v152 = v398;
          if ((v140 & 1) != 0)
          {
            v153 = **(unsigned __int16 **)(v128 + 16);
            if (v153 == 11 || v153 == 19)
            {
              v389 = 1;
              goto LABEL_570;
            }
            v415 = (void *)v128;
            v155 = *(_DWORD *)(v3 + 368);
            if (v155)
            {
              v156 = *(_QWORD *)(v3 + 352);
              v157 = llvm::MachineInstrExpressionTrait::getHashValue((llvm::MachineInstrExpressionTrait *)&v415, (const llvm::MachineInstr *const *)v130);
              v158 = v155 - 1;
              for (k = 1; ; ++k)
              {
                v160 = v157 & v158;
                v161 = (uint64_t *)(v156 + 16 * (v157 & v158));
                v130 = *v161;
                if ((unint64_t)(*v161 + 1) >= 2 && (unint64_t)(v128 + 1) > 1)
                {
                  if ((llvm::MachineInstr::isIdenticalTo(v128, v130, 3) & 1) != 0)
                  {
LABEL_580:
                    v173 = 1;
                    goto LABEL_280;
                  }
                  v130 = *v161;
                  if (!*v161)
                    break;
                }
                else
                {
                  if (v128 == v130)
                    goto LABEL_580;
                  if (!v130)
                    break;
                }
                v157 = v160 + k;
              }
            }
            v389 = 1;
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v128 + 16) + 11) & 2) == 0)
          goto LABEL_284;
        v163 = (void *)llvm::TargetInstrInfo::commuteInstruction(*(llvm::TargetInstrInfo **)(v3 + 248), (llvm::MachineInstr *)v128, 0, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
        if (!v163)
          goto LABEL_284;
        v164 = (uint64_t)v163;
        v415 = v163;
        v165 = *(_DWORD *)(v3 + 368);
        if (!v165)
        {
LABEL_275:
          v173 = 0;
          goto LABEL_276;
        }
        v166 = *(_QWORD *)(v3 + 352);
        v167 = llvm::MachineInstrExpressionTrait::getHashValue((llvm::MachineInstrExpressionTrait *)&v415, (const llvm::MachineInstr *const *)v130);
        v168 = v165 - 1;
        for (m = 1; ; ++m)
        {
          v170 = v167 & v168;
          v171 = (uint64_t *)(v166 + 16 * (v167 & v168));
          v130 = *v171;
          if ((unint64_t)(*v171 + 1) >= 2 && (unint64_t)(v164 + 1) > 1)
            break;
          if (v164 == v130)
            goto LABEL_579;
          if (!v130)
            goto LABEL_275;
LABEL_272:
          v167 = v170 + m;
        }
        if ((llvm::MachineInstr::isIdenticalTo(v164, v130, 3) & 1) == 0)
        {
          v130 = *v171;
          if (!*v171)
            goto LABEL_275;
          goto LABEL_272;
        }
LABEL_579:
        v173 = 1;
LABEL_276:
        if (v164 == v128)
        {
          if ((v173 & 1) != 0)
          {
LABEL_282:
            v173 = 1;
            goto LABEL_285;
          }
          llvm::TargetInstrInfo::commuteInstruction(*(llvm::TargetInstrInfo **)(v3 + 248), (llvm::MachineInstr *)v128, 0, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
LABEL_284:
          v173 = 0;
          goto LABEL_285;
        }
        v174 = v164;
        if ((*(_BYTE *)v164 & 4) == 0)
        {
          v174 = v164;
          if ((*(_WORD *)(v164 + 44) & 8) != 0)
          {
            v174 = v164;
            do
              v174 = *(_QWORD *)(v174 + 8);
            while ((*(_WORD *)(v174 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v164 + 24) + 40, v164, *(_QWORD *)(v174 + 8));
LABEL_280:
        v389 = 1;
LABEL_285:
        v404 = 0;
        v415 = v417;
        v416 = v110;
        v419 = 0;
        v420 = 0;
        v418 = &v419;
        v412 = v414;
        v413 = v111;
        if (v173)
        {
          v175 = *(unsigned int *)(v128 + 40);
          if ((_DWORD)v175)
          {
            v176 = *(_DWORD **)(v128 + 32);
            v177 = &v176[8 * v175];
            do
            {
              if ((*v176 & 0x10000FF) == 0)
              {
                v178 = v176[1];
                if ((int)v178 >= 1)
                {
                  v179 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v128 + 24) + 32) + 40);
                  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 256) + 128))(*(_QWORD *)(v3 + 256), v176[1]) & 1) == 0&& (!*(_DWORD *)(v179 + 416) || !llvm::MachineRegisterInfo::isConstantPhysReg((_QWORD *)v179, v178)))
                  {
                    v180 = *(_QWORD *)(v3 + 256);
                    if (v180)
                      v181 = (_QWORD *)(v180 + 8);
                    else
                      v181 = 0;
                    v182 = ((unint64_t)*(unsigned int *)(*v181 + 24 * v178 + 16) >> 3) & 0x1FFFFFFE;
                    v184 = v181[5];
                    v183 = v181[6];
                    v185 = (_WORD *)(v183 + v182 + 2);
                    v186 = *(unsigned __int16 *)(v183 + v182) + (*(_DWORD *)(*v181 + 24 * v178 + 16) & 0xF) * v178;
                    do
                    {
                      v187 = 4 * (unsigned __int16)v186;
                      v188 = *(unsigned __int16 *)(v184 + v187);
                      if (*(_WORD *)(v184 + v187))
                        v189 = v183 == 0;
                      else
                        v189 = 1;
                      if (!v189)
                      {
                        v191 = *(unsigned __int16 *)(v184 + 4 * (unsigned __int16)v186 + 2) << 16;
                        for (n = (unsigned int *)(*v181
                                                 + 24 * *(unsigned __int16 *)(v184 + 4 * (unsigned __int16)v186)
                                                 + 8); ; n = (unsigned int *)(*v181 + 24 * v188 + 8))
                        {
                          v193 = (unsigned __int16 *)(v183 + 2 * *n);
                          do
                          {
                            LODWORD(v405) = (unsigned __int16)v188;
                            sub_1C484FF44((uint64_t)&v415, (unsigned int *)&v405);
                            v194 = *v193++;
                            v188 += v194;
                          }
                          while (v194);
                          v188 = HIWORD(v191);
                          if (HIWORD(v191))
                          {
                            v191 >>= 16;
                          }
                          else
                          {
                            if (!*v185)
                              goto LABEL_289;
                            v186 += (unsigned __int16)*v185++;
                            v195 = (unsigned __int16 *)(v181[5] + 4 * (unsigned __int16)v186);
                            v188 = *v195;
                            v191 = v195[1] << 16;
                          }
                          v183 = v181[6];
                        }
                      }
                      v190 = (unsigned __int16)*v185++;
                      v186 += v190;
                    }
                    while (v190);
                  }
                }
              }
LABEL_289:
              v176 += 8;
            }
            while (v176 != v177);
            if (!v128)
              goto LABEL_315;
          }
          v196 = v128;
          if ((*(_BYTE *)v128 & 4) == 0)
          {
LABEL_315:
            v196 = v128;
            if ((*(_WORD *)(v128 + 44) & 8) != 0)
            {
              v196 = v128;
              do
                v196 = *(_QWORD *)(v196 + 8);
              while ((*(_WORD *)(v196 + 44) & 8) != 0);
            }
          }
          v197 = *(unsigned int *)(v128 + 40);
          if ((_DWORD)v197)
          {
            v198 = 0;
            v391 = 0;
            v199 = *(_QWORD **)(v196 + 8);
            v200 = *(_DWORD **)(v128 + 32);
            v201 = &v200[8 * v197];
            while (1)
            {
              if ((*v200 & 0x10000FF) == 0x1000000)
              {
                v202 = v200[1];
                if ((int)v202 >= 1)
                {
                  if (v420)
                  {
                    for (ii = v419; ii; ii = (_QWORD *)*ii)
                    {
                      v204 = *((_DWORD *)ii + 7);
                      if (v202 >= v204)
                      {
                        if (v204 >= v202)
                          goto LABEL_335;
                        ++ii;
                      }
                    }
                  }
                  else if ((_DWORD)v416)
                  {
                    v205 = (char *)v415;
                    v206 = (char *)v415 + 4 * v416;
                    while (*(_DWORD *)v205 != (_DWORD)v202)
                    {
                      v205 += 4;
                      if (v205 == v206)
                        goto LABEL_336;
                    }
                    if (v205 != v206)
LABEL_335:
                      v391 = 1;
                  }
LABEL_336:
                  v207 = v398;
                  if ((~*v200 & 0x5000000) != 0)
                  {
                    v208 = *(_DWORD *)(v399 + 296);
                    if (v208 && v199 != v398)
                    {
                      v209 = v202 >> 5;
                      v210 = 1 << v202;
                      v211 = v199;
                      do
                      {
                        v212 = *(unsigned __int16 *)v211[2];
                        if ((v212 - 13) < 5 || v212 == 23)
                        {
                          if ((*(_BYTE *)v211 & 4) == 0)
                          {
                            while ((*((_WORD *)v211 + 22) & 8) != 0)
                              v211 = (_QWORD *)v211[1];
                          }
                          goto LABEL_371;
                        }
                        if (v207 == v211)
                          break;
                        v214 = *((unsigned int *)v211 + 10);
                        if (!(_DWORD)v214)
                        {
                          --v208;
                          goto LABEL_366;
                        }
                        v215 = 0;
                        v216 = (int *)v211[4];
                        v217 = &v216[8 * v214];
                        v379 = v199;
                        v378 = v208;
                        v377 = v209;
                        v376 = v210;
                        do
                        {
                          while (1)
                          {
                            v218 = *v216;
                            if (*v216)
                              break;
                            v130 = v216[1];
                            if (!(_DWORD)v130)
                              goto LABEL_361;
                            if ((_DWORD)v130 != (_DWORD)v202)
                            {
                              if ((v130 | v202) >> 30)
                                goto LABEL_361;
                              v219 = llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)(v399 + 256) + 8), v130, v202);
                              v210 = v376;
                              v209 = v377;
                              v208 = v378;
                              v199 = v379;
                              v207 = v398;
                              if (!v219)
                                goto LABEL_361;
                            }
                            if ((v218 & 0x1000000) == 0)
                              goto LABEL_372;
                            v216 += 8;
                            v215 = 1;
                            if (v216 == v217)
                              goto LABEL_375;
                          }
                          if (*v216 == 12)
                            v215 |= (*(_DWORD *)(*((_QWORD *)v216 + 2) + 4 * v209) & v210) == 0;
LABEL_361:
                          v216 += 8;
                        }
                        while (v216 != v217);
                        if ((v215 & 1) != 0)
                          goto LABEL_375;
                        --v208;
                        if (!v211)
                          goto LABEL_369;
LABEL_366:
                        if ((*(_BYTE *)v211 & 4) == 0)
                        {
LABEL_369:
                          while ((*((_WORD *)v211 + 22) & 8) != 0)
                            v211 = (_QWORD *)v211[1];
                        }
                        if (!v208)
                          break;
LABEL_371:
                        v211 = (_QWORD *)v211[1];
                      }
                      while (v211 != v207);
                    }
LABEL_372:
                    v220 = v413;
                    if (v413 >= (unint64_t)HIDWORD(v413))
                    {
                      v221 = v199;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v412, (uint64_t)v414, v413 + 1, 8);
                      v199 = v221;
                      v220 = v413;
                    }
                    *((_QWORD *)v412 + v220) = v198 | (v202 << 32);
                    LODWORD(v413) = v413 + 1;
                  }
                }
              }
LABEL_375:
              v200 += 8;
              ++v198;
              if (v200 == v201)
                goto LABEL_378;
            }
          }
          v391 = 0;
LABEL_378:
          v222 = v413;
          v3 = v399;
          if ((_DWORD)v413)
          {
            v223 = 0;
            do
            {
              v224 = *((_DWORD *)v412 + 2 * v223 + 1);
              v225 = *(_QWORD *)(v399 + 256);
              if (v225)
                v226 = (_QWORD *)(v225 + 8);
              else
                v226 = 0;
              v227 = ((unint64_t)*(unsigned int *)(*v226 + 24 * v224 + 16) >> 3) & 0x1FFFFFFE;
              v229 = v226[5];
              v228 = v226[6];
              v230 = (_WORD *)(v228 + v227 + 2);
              v231 = *(unsigned __int16 *)(v228 + v227) + (*(_DWORD *)(*v226 + 24 * v224 + 16) & 0xF) * v224;
              do
              {
                v232 = 4 * (unsigned __int16)v231;
                v233 = *(unsigned __int16 *)(v229 + v232);
                if (*(_WORD *)(v229 + v232))
                  v234 = v228 == 0;
                else
                  v234 = 1;
                if (!v234)
                {
                  v236 = *(unsigned __int16 *)(v229 + 4 * (unsigned __int16)v231 + 2) << 16;
                  for (jj = (unsigned int *)(*v226
                                            + 24 * *(unsigned __int16 *)(v229 + 4 * (unsigned __int16)v231)
                                            + 8); ; jj = (unsigned int *)(*v226 + 24 * v233 + 8))
                  {
                    v238 = (unsigned __int16 *)(v228 + 2 * *jj);
                    do
                    {
                      LODWORD(v405) = (unsigned __int16)v233;
                      sub_1C484FF44((uint64_t)&v415, (unsigned int *)&v405);
                      v239 = *v238++;
                      v233 += v239;
                    }
                    while (v239);
                    v233 = HIWORD(v236);
                    if (HIWORD(v236))
                    {
                      v236 >>= 16;
                    }
                    else
                    {
                      if (!*v230)
                        goto LABEL_390;
                      v231 += (unsigned __int16)*v230++;
                      v240 = (unsigned __int16 *)(v226[5] + 4 * (unsigned __int16)v231);
                      v233 = *v240;
                      v236 = v240[1] << 16;
                    }
                    v228 = v226[6];
                  }
                }
                v235 = (unsigned __int16)*v230++;
                v231 += v235;
              }
              while (v235);
LABEL_390:
              ++v223;
            }
            while (v223 != v222);
          }
          if (!(_DWORD)v416 && !v420)
            goto LABEL_401;
          if (!v391)
          {
            v405 = v128;
            v261 = *(_QWORD *)(v399 + 352);
            v262 = *(_DWORD *)(v399 + 368);
            if (v262)
            {
              v263 = llvm::MachineInstrExpressionTrait::getHashValue((llvm::MachineInstrExpressionTrait *)&v405, (const llvm::MachineInstr *const *)v130);
              v264 = v262 - 1;
              for (kk = 1; ; ++kk)
              {
                v266 = v263 & v264;
                v267 = (uint64_t *)(v261 + 16 * (v263 & v264));
                v268 = *v267;
                if ((unint64_t)(*v267 + 1) >= 2 && (unint64_t)(v128 + 1) > 1)
                {
                  if ((llvm::MachineInstr::isIdenticalTo(v128, v268, 3) & 1) != 0)
                  {
LABEL_581:
                    v261 = *(_QWORD *)(v399 + 352);
                    v270 = *(unsigned int *)(v399 + 368);
                    goto LABEL_444;
                  }
                  if (!*v267)
                    goto LABEL_442;
                }
                else
                {
                  if (v128 == v268)
                    goto LABEL_581;
                  if (!v268)
                  {
LABEL_442:
                    v261 = *(_QWORD *)(v399 + 352);
                    v270 = *(unsigned int *)(v399 + 368);
                    goto LABEL_443;
                  }
                }
                v263 = v266 + kk;
              }
            }
            v270 = 0;
LABEL_443:
            v267 = (uint64_t *)(v261 + 16 * v270);
LABEL_444:
            v271 = v267 == (uint64_t *)(v261 + 16 * v270) ? 0 : *(unsigned int *)(v267[1] + 24);
            if (sub_1C514771C(v399, *(_QWORD *)(*(_QWORD *)(v399 + 488) + 8 * v271), (_QWORD *)v128, (uint64_t)&v415, (uint64_t *)&v412, &v404))
            {
LABEL_401:
              v405 = v128;
              v241 = *(_QWORD *)(v399 + 352);
              v242 = *(_DWORD *)(v399 + 368);
              if (v242)
              {
                v243 = llvm::MachineInstrExpressionTrait::getHashValue((llvm::MachineInstrExpressionTrait *)&v405, (const llvm::MachineInstr *const *)v130);
                v244 = v242 - 1;
                for (mm = 1; ; ++mm)
                {
                  v246 = v243 & v244;
                  v247 = (uint64_t *)(v241 + 16 * (v243 & v244));
                  v248 = *v247;
                  if ((unint64_t)(*v247 + 1) >= 2 && (unint64_t)(v128 + 1) > 1)
                  {
                    if ((llvm::MachineInstr::isIdenticalTo(v128, v248, 3) & 1) != 0)
                    {
LABEL_578:
                      v241 = *(_QWORD *)(v399 + 352);
                      v250 = *(unsigned int *)(v399 + 368);
                      goto LABEL_414;
                    }
                    if (!*v247)
                      goto LABEL_412;
                  }
                  else
                  {
                    if (v128 == v248)
                      goto LABEL_578;
                    if (!v248)
                    {
LABEL_412:
                      v241 = *(_QWORD *)(v399 + 352);
                      v250 = *(unsigned int *)(v399 + 368);
                      goto LABEL_413;
                    }
                  }
                  v243 = v246 + mm;
                }
              }
              v250 = 0;
LABEL_413:
              v247 = (uint64_t *)(v241 + 16 * v250);
LABEL_414:
              if (v247 == (uint64_t *)(v241 + 16 * v250))
                v251 = 0;
              else
                v251 = *(unsigned int *)(v247[1] + 24);
              v252 = *(_QWORD *)(*v385 + 8 * v251);
              v253 = *(unsigned __int16 **)(v128 + 16);
              if (*v253 - 1 > 1 || (*(_BYTE *)(*(_QWORD *)(v128 + 32) + 48) & 0x20) == 0)
              {
                v254 = *(_WORD *)(v128 + 44);
                v255 = *((_QWORD *)v253 + 1);
                if ((v254 & 0xC) != 0 && (v254 & 4) == 0)
                {
                  v337 = v128;
                  if ((v255 & 0x1000000000) == 0)
                  {
                    while ((*(_WORD *)(v337 + 44) & 8) != 0)
                    {
                      v337 = *(_QWORD *)(v337 + 8);
                      v3 = v399;
                      if ((*(_BYTE *)(*(_QWORD *)(v337 + 16) + 12) & 0x10) != 0)
                        goto LABEL_420;
                    }
LABEL_424:
                    v257 = *((unsigned __int8 *)v253 + 4);
                    if ((v253[4] & 2) == 0 || (v334 = *(_DWORD *)(v128 + 40), v334 == v257))
                    {
                      v258 = *((unsigned __int8 *)v253 + 4);
                    }
                    else
                    {
                      v335 = v334 - 1;
                      v258 = *((unsigned __int8 *)v253 + 4);
                      do
                      {
                        v336 = *(_DWORD *)(*(_QWORD *)(v128 + 32) + 32 * v257);
                        if ((v336 & 0x10000FF) != 0x1000000)
                          break;
                        v258 += (v336 & 0x2000000) == 0;
                        if (v335 == v257)
                          break;
                        ++v257;
                      }
                      while ((v336 & 0x2000000) == 0);
                    }
                    v259 = *((_QWORD *)v253 + 4);
                    if (v259)
                    {
                      v260 = -1;
                      do
                        ++v260;
                      while (*(_WORD *)(v259 + 2 * v260));
                    }
                    else
                    {
                      v260 = 0;
                    }
                    v274 = v260 + v258;
                    if (!(v260 + v258) || (v275 = *(unsigned int *)(v128 + 40), !(_DWORD)v275))
                    {
LABEL_482:
                      v3 = v399;
                      if ((_DWORD)v428)
                      {
                        v290 = v427;
                        v291 = &v427[v428];
                        do
                        {
                          v293 = *(unsigned int *)v290;
                          v292 = *((_DWORD *)v290 + 1);
                          UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(v399 + 280), v292);
                          v295 = *(unsigned int *)(UniqueVRegDef + 40);
                          if ((_DWORD)v295)
                          {
                            v296 = *(_DWORD **)(UniqueVRegDef + 32);
                            v297 = 32 * v295;
                            do
                            {
                              if ((*v296 & 0x10000FF) == 0x1000000 && v296[1] == v292)
                                *v296 &= ~0x4000000u;
                              v296 += 8;
                              v297 -= 32;
                            }
                            while (v297);
                          }
                          v298 = *(_QWORD **)(v399 + 280);
                          v299 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v298 + 16) + 176))(*(_QWORD *)(*v298 + 16));
                          if ((v293 & 0x80000000) != 0)
                            v300 = (uint64_t *)(v298[3] + 16 * (v293 & 0x7FFFFFFF) + 8);
                          else
                            v300 = (uint64_t *)(v298[34] + 8 * v293);
                          v301 = *v300;
                          if (*v300)
                          {
                            do
                            {
                              v302 = *(_QWORD *)(v301 + 24);
                              if (v292 - 1 <= 0x3FFFFFFE)
                                llvm::MachineOperand::substPhysReg((unsigned int *)v301, v292, v299);
                              else
                                llvm::MachineOperand::setReg(v301, v292);
                              v301 = v302;
                            }
                            while (v302);
                          }
                          llvm::MachineRegisterInfo::clearKillFlags(*(_QWORD *)(v399 + 280), v292);
                          ++v290;
                        }
                        while (v290 != v291);
                      }
                      if ((_DWORD)v425)
                      {
                        v303 = (unsigned int *)v424;
                        v304 = 4 * v425;
                        do
                        {
                          v305 = *v303++;
                          *(_DWORD *)(*(_QWORD *)(v252 + 32) + 32 * v305) &= ~0x4000000u;
                          v304 -= 4;
                        }
                        while (v304);
                      }
                      if ((_DWORD)v413)
                      {
                        v306 = (unsigned int *)v412;
                        v307 = 8 * v413;
                        do
                        {
                          if ((~*(_DWORD *)(*(_QWORD *)(v128 + 32) + 32 * *v306) & 0x5000000) != 0)
                            *(_DWORD *)(*(_QWORD *)(v252 + 32) + 32 * *v306) &= ~0x4000000u;
                          v306 += 2;
                          v307 -= 8;
                        }
                        while (v307);
                      }
                      if (*(_QWORD *)(v252 + 24) == *(_QWORD *)(v128 + 24))
                      {
                        while (v252 != v128)
                        {
                          if ((_DWORD)v422)
                          {
                            v311 = v421;
                            v312 = 4 * v422;
                            do
                            {
                              RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx(v252, *v311, 1, *(_QWORD *)(v399 + 256));
                              if (RegisterUseOperandIdx != -1)
                              {
                                v314 = *(_QWORD *)(v252 + 32);
                                if (v314)
                                  *(_DWORD *)(v314 + 32 * RegisterUseOperandIdx) &= ~0x4000000u;
                              }
                              ++v311;
                              v312 -= 4;
                            }
                            while (v312);
                          }
                          if (!v252 || (*(_BYTE *)v252 & 4) == 0)
                          {
                            while ((*(_WORD *)(v252 + 44) & 8) != 0)
                              v252 = *(_QWORD *)(v252 + 8);
                          }
                          v252 = *(_QWORD *)(v252 + 8);
                        }
                      }
                      else if ((_DWORD)v422)
                      {
                        v308 = v421;
                        v309 = 4 * v422;
                        do
                        {
                          v310 = *v308++;
                          llvm::MachineRegisterInfo::clearKillFlags(*(_QWORD *)(v399 + 280), v310);
                          v309 -= 4;
                        }
                        while (v309);
                      }
                      v315 = v413;
                      if (v404)
                        v316 = (_DWORD)v413 == 0;
                      else
                        v316 = 1;
                      if (!v316)
                      {
                        v318 = (char *)*((_QWORD *)v383 + 20);
                        do
                        {
                          v319 = *((_QWORD *)v412 + --v315);
                          LODWORD(v413) = v315;
                          v320 = (char *)*((_QWORD *)v383 + 19);
                          v321 = HIDWORD(v319);
                          if (v320 != v318)
                          {
                            v322 = (char *)*((_QWORD *)v383 + 19);
                            while (*(unsigned __int16 *)v322 != (unsigned __int16)v321)
                            {
                              v322 += 16;
                              if (v322 == v318)
                                goto LABEL_539;
                            }
                            if (*((_QWORD *)v322 + 1))
                              continue;
                          }
LABEL_539:
                          v323 = *((_QWORD *)v383 + 21);
                          if ((unint64_t)v318 >= v323)
                          {
                            v325 = (v318 - v320) >> 4;
                            v326 = v325 + 1;
                            if ((unint64_t)(v325 + 1) >> 60)
                              abort();
                            v327 = v323 - (_QWORD)v320;
                            if (v327 >> 3 > v326)
                              v326 = v327 >> 3;
                            if ((unint64_t)v327 >= 0x7FFFFFFFFFFFFFF0)
                              v328 = 0xFFFFFFFFFFFFFFFLL;
                            else
                              v328 = v326;
                            if (v328)
                            {
                              if (v328 >> 60)
                                sub_1C4764EE4();
                              v329 = (char *)operator new(16 * v328);
                            }
                            else
                            {
                              v329 = 0;
                            }
                            v330 = &v329[16 * v325];
                            *(_WORD *)v330 = v321;
                            *((_QWORD *)v330 + 1) = -1;
                            v331 = v330;
                            if (v320 != v318)
                            {
                              do
                              {
                                *((_OWORD *)v331 - 1) = *((_OWORD *)v318 - 1);
                                v331 -= 16;
                                v318 -= 16;
                              }
                              while (v318 != v320);
                              v318 = (char *)*((_QWORD *)v383 + 19);
                            }
                            v324 = v330 + 16;
                            *((_QWORD *)v383 + 19) = v331;
                            *((_QWORD *)v383 + 20) = v330 + 16;
                            *((_QWORD *)v383 + 21) = &v329[16 * v328];
                            if (v318)
                              operator delete(v318);
                          }
                          else
                          {
                            *(_WORD *)v318 = v321;
                            *((_QWORD *)v318 + 1) = -1;
                            v324 = v318 + 16;
                          }
                          *((_QWORD *)v383 + 20) = v324;
                          v315 = v413;
                          v318 = v324;
                        }
                        while (v315);
                      }
                      v317 = v128;
                      if ((*(_BYTE *)v128 & 4) == 0)
                      {
                        v317 = v128;
                        if ((*(_WORD *)(v128 + 44) & 8) != 0)
                        {
                          v317 = v128;
                          do
                            v317 = *(_QWORD *)(v317 + 8);
                          while ((*(_WORD *)(v317 + 44) & 8) != 0);
                        }
                      }
                      sub_1C487FE80(*(_QWORD *)(v128 + 24) + 40, v128, *(_QWORD *)(v317 + 8));
                      v389 = 1;
LABEL_564:
                      LODWORD(v428) = 0;
                      LODWORD(v425) = 0;
                      LODWORD(v422) = 0;
                      goto LABEL_565;
                    }
                    v276 = 0;
                    v277 = 0;
                    v278 = v275 - 1;
                    while (2)
                    {
                      v279 = *(_QWORD *)(v128 + 32);
                      v280 = *(_DWORD *)(v279 + v276);
                      if ((v280 & 0x10000FF) == 0x1000000)
                      {
                        v281 = *(unsigned int *)(v279 + v276 + 4);
                        v282 = *(_QWORD *)(v252 + 32);
                        v283 = *(unsigned int *)(v282 + v276 + 4);
                        if ((v280 & 0x2000000) != 0)
                        {
                          v284 = v280 & 0x5000000;
                          if (v284 != 83886080)
                          {
                            if ((~*(_DWORD *)(v282 + v276) & 0x5000000) != 0)
                            {
LABEL_462:
                              if (v284 != 83886080 && (_DWORD)v281 == (_DWORD)v283)
                              {
                                v288 = v422;
                                if (v422 >= (unint64_t)HIDWORD(v422))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v421, (uint64_t)&v423, v422 + 1, 4);
                                  v288 = v422;
                                }
                                v421[v288] = v281;
                                LODWORD(v422) = v422 + 1;
                              }
                            }
                            else
                            {
                              v285 = v425;
                              if (v425 >= (unint64_t)HIDWORD(v425))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v424, (uint64_t)&v426, v425 + 1, 4);
                                v285 = v425;
                              }
                              *((_DWORD *)v424 + v285) = v277;
                              LODWORD(v425) = v425 + 1;
                              v286 = *(_DWORD *)(v279 + v276);
                              if ((v286 & 0x2000000) != 0)
                              {
                                v284 = v286 & 0x5000000;
                                goto LABEL_462;
                              }
                            }
                          }
                        }
                        if ((_DWORD)v281 == (_DWORD)v283)
                        {
                          --v274;
                          goto LABEL_472;
                        }
                        if (!sub_1C51479B4(v399, v283, v281, *(_QWORD *)(v252 + 24), v128)
                          || !(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v399 + 248) + 1080))(*(_QWORD *)(v399 + 248), v283, v281, *(_QWORD *)(v399 + 272), *(_QWORD *)(v399 + 280))|| !llvm::MachineRegisterInfo::constrainRegAttrs(*(_QWORD *)(v399 + 280), v283, v281, 0))
                        {
                          v405 = v128;
                          v332 = *(_DWORD *)(v399 + 1016);
                          *(_DWORD *)(v399 + 1016) = v332 + 1;
                          v403 = v332;
                          sub_1C5148014(v387, *(_QWORD *)(v399 + 376), (llvm::MachineInstrExpressionTrait *)&v405, &v403);
                          v333 = *(unsigned int *)(v399 + 496);
                          v3 = v399;
                          if (v333 >= *(unsigned int *)(v399 + 500))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v385, v373, v333 + 1, 8);
                            v333 = *(unsigned int *)(v399 + 496);
                          }
                          *(_QWORD *)(*(_QWORD *)(v399 + 488) + 8 * v333) = v128;
                          ++*(_DWORD *)(v399 + 496);
                          goto LABEL_564;
                        }
                        v289 = v428;
                        if (v428 >= (unint64_t)HIDWORD(v428))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v427, (uint64_t)v429, v428 + 1, 8);
                          v289 = v428;
                        }
                        v427[v289] = (const llvm::MachineInstr *const *)(v281 | (v283 << 32));
                        LODWORD(v428) = v428 + 1;
                        if (!--v274)
                          goto LABEL_482;
                      }
                      else
                      {
LABEL_472:
                        if (!v274)
                          goto LABEL_482;
                      }
                      v276 += 32;
                      v75 = v278 == v277++;
                      if (v75)
                        goto LABEL_482;
                      continue;
                    }
                  }
                }
                else if ((v255 & 0x1000000000) == 0)
                {
                  goto LABEL_424;
                }
              }
LABEL_420:
              if (*(_QWORD *)(v128 + 24) == *(_QWORD *)(v252 + 24))
                goto LABEL_424;
              v256 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 248) + 1264))(*(_QWORD *)(v3 + 248));
              if (v256 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v256 + 32))(v256, v128) & 1) == 0)
              {
                v253 = *(unsigned __int16 **)(v128 + 16);
                goto LABEL_424;
              }
            }
          }
        }
        v405 = v128;
        v272 = *(_DWORD *)(v3 + 1016);
        *(_DWORD *)(v3 + 1016) = v272 + 1;
        v403 = v272;
        sub_1C5148014(v387, *(_QWORD *)(v3 + 376), (llvm::MachineInstrExpressionTrait *)&v405, &v403);
        v273 = *(unsigned int *)(v3 + 496);
        if (v273 >= *(unsigned int *)(v3 + 500))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v385, v373, v273 + 1, 8);
          v273 = *(unsigned int *)(v3 + 496);
        }
        *(_QWORD *)(*(_QWORD *)(v3 + 488) + 8 * v273) = v128;
        ++*(_DWORD *)(v3 + 496);
LABEL_565:
        if (v412 != v414)
          free(v412);
        sub_1C61247C0((uint64_t)&v418, v419);
        if (v415 != v417)
          free(v415);
LABEL_569:
        v152 = v398;
LABEL_570:
        v128 = *(_QWORD *)v397;
      }
      while (*(_QWORD **)v397 != v152);
      if (v421 != (unsigned int *)&v423)
        free(v421);
LABEL_601:
      if (v424 != &v426)
        free(v424);
      if (v427 != (const llvm::MachineInstr *const **)v429)
        free(v427);
      v427 = v384;
      if (v401)
      {
        v338 = (v401 - 1) & ((v384 >> 4) ^ (v384 >> 9));
        v339 = (const llvm::MachineInstr *const ***)(v400[0] + 16 * v338);
        v340 = *v339;
        if (v384 == *v339)
          goto LABEL_620;
        v341 = 0;
        v342 = 1;
        while (v340 != (const llvm::MachineInstr *const **)-4096)
        {
          if (v341)
            v343 = 0;
          else
            v343 = v340 == (const llvm::MachineInstr *const **)-8192;
          if (v343)
            v341 = v339;
          v344 = v338 + v342++;
          v338 = v344 & (v401 - 1);
          v339 = (const llvm::MachineInstr *const ***)(v400[0] + 16 * v338);
          v340 = *v339;
          if (v384 == *v339)
            goto LABEL_620;
        }
        if (v341)
          v345 = v341;
        else
          v345 = v339;
      }
      else
      {
        v345 = 0;
      }
      v339 = (const llvm::MachineInstr *const ***)sub_1C50E44BC((uint64_t)v400, (uint64_t)&v427, (uint64_t *)&v427, v345);
      *v339 = v427;
      *((_DWORD *)v339 + 2) = 0;
LABEL_620:
      if (!*((_DWORD *)v339 + 2))
      {
        sub_1C5148584((int32x2_t *)v3, *v427);
        v346 = v427;
        while (1)
        {
          v347 = (void *)v346[1];
          v415 = v347;
          if (!v347)
            break;
          if (v401)
          {
            v348 = ((v347 >> 4) ^ (v347 >> 9)) & (v401 - 1);
            v349 = (_QWORD *)(v400[0] + 16 * v348);
            v350 = (void *)*v349;
            if (v347 == (void *)*v349)
              goto LABEL_640;
            v351 = 0;
            v352 = 1;
            while (v350 != (void *)-4096)
            {
              if (v351)
                v353 = 0;
              else
                v353 = v350 == (void *)-8192;
              if (v353)
                v351 = v349;
              v354 = v348 + v352++;
              v348 = v354 & (v401 - 1);
              v349 = (_QWORD *)(v400[0] + 16 * v348);
              v350 = (void *)*v349;
              if (v347 == (void *)*v349)
                goto LABEL_640;
            }
            if (v351)
              v355 = v351;
            else
              v355 = v349;
          }
          else
          {
            v355 = 0;
          }
          v349 = sub_1C50E44BC((uint64_t)v400, (uint64_t)&v415, (uint64_t *)&v415, v355);
          *v349 = v415;
          *((_DWORD *)v349 + 2) = 0;
LABEL_640:
          v356 = *((_DWORD *)v349 + 2) - 1;
          *((_DWORD *)v349 + 2) = v356;
          if (v356)
            break;
          sub_1C5148584((int32x2_t *)v3, *(const llvm::MachineInstr *const **)v415);
          v346 = v415;
          v427 = (const llvm::MachineInstr *const **)v415;
        }
      }
      v108 = v382 | v389;
      v109 = v381 + 1;
      if (v381 + 1 == (const llvm::MachineInstr *const ***)v375)
        goto LABEL_669;
    }
    v122 = 0;
    v123 = 1;
    while (v121 != (const llvm::MachineInstr *const *)-4096)
    {
      if (v122)
        v124 = 0;
      else
        v124 = v121 == (const llvm::MachineInstr *const *)-8192;
      if (v124)
        v122 = v120;
      v125 = v119 + v123++;
      v119 = v125 & v118;
      v120 = (const llvm::MachineInstr *const **)(v117 + 16 * (v125 & v118));
      v121 = *v120;
      if (v112 == *v120)
        goto LABEL_198;
    }
    if (v122)
      v120 = v122;
LABEL_192:
    v126 = *(_DWORD *)(v3 + 312);
    if (4 * v126 + 4 >= 3 * v115)
    {
      sub_1C4964094(v374, 2 * v115);
      v365 = *(_QWORD *)(v3 + 304);
      v366 = *(_DWORD *)(v3 + 320) - 1;
      v367 = v366 & (v116 ^ (v112 >> 9));
      v120 = (const llvm::MachineInstr *const **)(v365 + 16 * v367);
      v368 = *v120;
      if (v112 != *v120)
      {
        v361 = 0;
        v369 = 1;
        while (v368 != (const llvm::MachineInstr *const *)-4096)
        {
          if (v361)
            v370 = 0;
          else
            v370 = v368 == (const llvm::MachineInstr *const *)-8192;
          if (v370)
            v361 = v120;
          v371 = v367 + v369++;
          v367 = v371 & v366;
          v120 = (const llvm::MachineInstr *const **)(v365 + 16 * (v371 & v366));
          v368 = *v120;
          if (v112 == *v120)
            goto LABEL_663;
        }
        goto LABEL_664;
      }
    }
    else
    {
      if (v115 + ~v126 - *(_DWORD *)(v3 + 316) > v115 >> 3)
      {
LABEL_194:
        v127 = *v120;
LABEL_195:
        ++*(_DWORD *)(v3 + 312);
        if (v127 != (const llvm::MachineInstr *const *)-4096)
          --*(_DWORD *)(v3 + 316);
        *v120 = v112;
        v120[1] = 0;
        goto LABEL_198;
      }
      sub_1C4964094(v374, v115);
      v357 = *(_QWORD *)(v3 + 304);
      v358 = *(_DWORD *)(v3 + 320) - 1;
      v359 = v358 & (v116 ^ (v112 >> 9));
      v120 = (const llvm::MachineInstr *const **)(v357 + 16 * v359);
      v360 = *v120;
      if (v112 != *v120)
      {
        v361 = 0;
        v362 = 1;
        while (v360 != (const llvm::MachineInstr *const *)-4096)
        {
          if (v361)
            v363 = 0;
          else
            v363 = v360 == (const llvm::MachineInstr *const *)-8192;
          if (v363)
            v361 = v120;
          v364 = v359 + v362++;
          v359 = v364 & v358;
          v120 = (const llvm::MachineInstr *const **)(v357 + 16 * (v364 & v358));
          v360 = *v120;
          if (v112 == *v120)
            goto LABEL_663;
        }
LABEL_664:
        if (v361)
          v120 = v361;
        goto LABEL_194;
      }
    }
LABEL_663:
    v127 = v112;
    goto LABEL_195;
  }
  LOBYTE(v108) = 0;
LABEL_669:
  MEMORY[0x1CAA32FB4](v400[0], 8);
  if (v406 != v408)
    free(v406);
  if (v409 != v411)
    free(v409);
  v4 = v380 | v108;
  return v4 & 1;
}

void sub_1C51472A4(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 1uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

_QWORD *sub_1C51473D0(_QWORD *a1)
{
  a1[4] = 0;
  sub_1C4926AE8((uint64_t)(a1 + 5));
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

uint64_t sub_1C5147408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  BOOL v4;

  v2 = a1 + 1;
  if ((unint64_t)(a2 + 1) >= 2)
  {
    v3 = v2 != 0;
    v4 = v2 == 1;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  if (!v4 && v3)
    return llvm::MachineInstr::isIdenticalTo(a1, a2, 3);
  else
    return a1 == a2;
}

unsigned int *sub_1C5147430(unsigned int *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = 0;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C514747C(result);
    }
  }
  return result;
}

unsigned int *sub_1C514747C(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD **)result;
      v7 = 16 * v2;
      do
      {
        *v6 = 0;
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(16 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *(_QWORD *)result = 0;
          result += 4;
          v11 -= 16;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

unsigned int *sub_1C5147570(unsigned int *result, uint64_t a2, char *__src, char *a4)
{
  char *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  v9 = result[3];
  v10 = a4 - __src;
  v11 = v8 + ((a4 - __src) >> 3);
  if (*(_QWORD *)result + 8 * v8 == a2)
  {
    if (v11 > v9)
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v11, 8);
      LODWORD(v8) = v6[2];
      v7 = *(_QWORD *)v6;
    }
    if (v5 != a4)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 8 * v8), v5, v10);
      LODWORD(v8) = v6[2];
    }
    v6[2] = v8 + (v10 >> 3);
  }
  else
  {
    v12 = (a2 - v7) >> 3;
    v13 = (uint64_t)v10 >> 3;
    if (v11 > v9)
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v11, 8);
      v7 = *(_QWORD *)v6;
      v8 = v6[2];
    }
    v14 = (_QWORD *)(v7 + 8 * v12);
    v15 = (_BYTE *)(v7 + 8 * v8);
    v16 = (v15 - (_BYTE *)v14) >> 3;
    if (v16 >= v13)
    {
      result = sub_1C6177054(v6, &v15[-8 * v13], (char *)(v7 + 8 * v8));
      if (&v15[-8 * v13] != (_BYTE *)v14)
        result = (unsigned int *)memmove(&v14[v13], v14, &v15[-8 * v13] - (_BYTE *)v14);
      if (v5 != a4)
        return (unsigned int *)memmove(v14, v5, v10);
    }
    else
    {
      v17 = v8 + (v10 >> 3);
      v6[2] = v17;
      if (v12 != v8)
      {
        result = (unsigned int *)memcpy((void *)(v7 + 8 * v17 - 8 * v16), (const void *)(v7 + 8 * v12), v15 - (_BYTE *)v14);
        do
        {
          v18 = *(_QWORD *)v5;
          v5 += 8;
          *v14++ = v18;
          --v16;
        }
        while (v16);
      }
      if (v5 != a4)
        return (unsigned int *)memcpy(v15, v5, a4 - v5);
    }
  }
  return result;
}

BOOL sub_1C514771C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t *a5, _BYTE *a6)
{
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *i;
  BOOL v25;
  _BOOL8 result;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  unsigned int v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  _BYTE *v36;

  v7 = a2;
  v9 = (_QWORD *)a3[3];
  v10 = *(_QWORD **)(a2 + 24);
  if (v10 != v9)
  {
    v11 = (_QWORD *)v9[8];
    if (((v9[9] - (_QWORD)v11) & 0x7FFFFFFF8) != 8 || (_QWORD *)*v11 != v10)
      return 0;
    v13 = *((unsigned int *)a5 + 2);
    if ((_DWORD)v13)
    {
      v35 = a4;
      v36 = a6;
      v14 = 0;
      v15 = *(_QWORD **)(a1 + 280);
      v16 = *a5;
      v17 = 8 * v13;
      do
      {
        v18 = *(unsigned int *)(v16 + v14 + 4);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v15 + 16) + 176))(*(_QWORD *)(*v15 + 16))
                                              + 216)
                                  + 16)
                      + v18)
          && ((*(_QWORD *)(v15[44] + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1) == 0)
        {
          return 0;
        }
        v15 = *(_QWORD **)(a1 + 280);
        v16 = *a5;
        v19 = *(unsigned int *)(*a5 + v14 + 4);
        if (((*(_QWORD *)(v15[44] + ((v19 >> 3) & 0x1FFFFFF8)) >> v19) & 1) != 0)
          return 0;
        v14 += 8;
      }
      while (v17 != v14);
      a4 = v35;
      a6 = v36;
      if (!v7)
        goto LABEL_14;
    }
  }
  if ((*(_BYTE *)v7 & 4) == 0)
  {
LABEL_14:
    while ((*(_WORD *)(v7 + 44) & 8) != 0)
      v7 = *(_QWORD *)(v7 + 8);
  }
  v20 = *(_DWORD *)(a1 + 296);
  if (v20)
  {
    v21 = (_QWORD *)(v7 + 8);
    while (1)
    {
      v22 = v10 + 6;
      v23 = *(unsigned int *)(a4 + 8);
      while (1)
      {
        for (i = (_QWORD *)*v21; ; i = (_QWORD *)i[1])
        {
          v25 = i == a3 || i == v22;
          if (v25 || *(unsigned __int16 *)i[2] - 13 > 4)
            break;
          if ((*(_BYTE *)i & 4) == 0)
          {
            while ((*((_WORD *)i + 22) & 8) != 0)
              i = (_QWORD *)i[1];
          }
        }
        if (i == v22)
          break;
        result = i == a3;
        if (i == a3)
          return result;
        v27 = *((unsigned int *)i + 10);
        if ((_DWORD)v27)
        {
          v28 = (_DWORD *)i[4];
          v29 = &v28[8 * v27];
          do
          {
            if (*v28)
            {
              if (*v28 == 12)
                return 0;
            }
            else if ((*v28 & 0x1000000) != 0)
            {
              v30 = v28[1];
              if ((v30 & 0x80000000) == 0)
              {
                if (*(_QWORD *)(a4 + 64))
                {
                  if (*(_QWORD *)(a4 + 56))
                  {
                    v31 = *(uint64_t **)(a4 + 56);
                    do
                    {
                      v32 = *((_DWORD *)v31 + 7);
                      if (v30 >= v32)
                      {
                        if (v32 >= v30)
                          return 0;
                        ++v31;
                      }
                      v31 = (uint64_t *)*v31;
                    }
                    while (v31);
                  }
                }
                else if ((_DWORD)v23)
                {
                  v33 = 4 * v23;
                  v34 = *(_DWORD **)a4;
                  while (*v34 != v30)
                  {
                    ++v34;
                    v33 -= 4;
                    if (!v33)
                      goto LABEL_51;
                  }
                  if (v33)
                    return 0;
                }
              }
            }
LABEL_51:
            v28 += 8;
          }
          while (v28 != v29);
          --v20;
          if (!i)
          {
LABEL_58:
            while ((*((_WORD *)i + 22) & 8) != 0)
              i = (_QWORD *)i[1];
            goto LABEL_59;
          }
        }
        else
        {
          --v20;
        }
        if ((*(_BYTE *)i & 4) == 0)
          goto LABEL_58;
LABEL_59:
        v21 = i + 1;
        if (!v20)
          return result;
      }
      *a6 = 1;
      v21 = v9 + 7;
      v10 = v9;
    }
  }
  return 0;
}

uint64_t sub_1C51479B4(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  char v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  char v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  _BYTE v53[64];

  if ((a2 & 0x80000000) == 0 || (a3 & 0x80000000) == 0)
    goto LABEL_21;
  v10 = v53;
  v49 = v53;
  v50 = v53;
  v51 = 8;
  v52 = 0;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
  v12 = *(_QWORD *)(v11 + 16 * (a2 & 0x7FFFFFFF) + 8);
  if (v12)
  {
    while ((*(_DWORD *)v12 & 0x81000000) != 0)
    {
      v12 = *(_QWORD *)(v12 + 24);
      if (!v12)
        goto LABEL_6;
    }
    v14 = *(_QWORD *)(v12 + 8);
LABEL_8:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v49, v14);
    v15 = *(_QWORD *)(v12 + 8);
    while (1)
    {
      v12 = *(_QWORD *)(v12 + 24);
      if (!v12)
        break;
      if ((*(_DWORD *)v12 & 0x81000000) == 0)
      {
        v14 = *(_QWORD *)(v12 + 8);
        if (v14 != v15)
          goto LABEL_8;
      }
    }
    v10 = v49;
    v13 = v50;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 24);
  }
  else
  {
LABEL_6:
    v13 = v53;
  }
  v16 = *(_QWORD *)(v11 + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (!v16)
    goto LABEL_17;
  while ((*(_DWORD *)v16 & 0x81000000) != 0)
  {
    v16 = *(_QWORD *)(v16 + 24);
    if (!v16)
      goto LABEL_17;
  }
  v33 = sub_1C477672C((uint64_t)&v49, *(_QWORD *)(v16 + 8));
  v10 = v49;
  v13 = v50;
  v34 = (uint64_t *)((char *)&v51 + 4);
  if (v50 != v49)
    v34 = &v51;
  if (v33 != (_QWORD *)&v50[8 * *(unsigned int *)v34])
  {
LABEL_57:
    v35 = *(_QWORD *)(v16 + 8);
    while (1)
    {
      v16 = *(_QWORD *)(v16 + 24);
      if (!v16)
        break;
      if ((*(_DWORD *)v16 & 0x81000000) == 0)
      {
        v36 = *(_QWORD *)(v16 + 8);
        if (v36 != v35)
        {
          v37 = sub_1C477672C((uint64_t)&v49, v36);
          v17 = 0;
          v10 = v49;
          v13 = v50;
          v38 = (uint64_t *)((char *)&v51 + 4);
          if (v50 != v49)
            v38 = &v51;
          if (v37 != (_QWORD *)&v50[8 * *(unsigned int *)v38])
            goto LABEL_57;
          goto LABEL_18;
        }
      }
    }
LABEL_17:
    v17 = 1;
    goto LABEL_18;
  }
  v17 = 0;
LABEL_18:
  if (v13 != v10)
    free(v13);
  if ((v17 & 1) != 0)
    goto LABEL_91;
LABEL_21:
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 248) + 152))(*(_QWORD *)(a1 + 248), a5))
  {
    v18 = *(_QWORD *)(a5 + 24);
    if (v18 != a4)
    {
      v19 = *(_QWORD **)(a4 + 88);
      v20 = *(_QWORD **)(a4 + 96);
      if (v19 != v20)
      {
        while (*v19 != v18)
        {
          if (++v19 == v20)
          {
            v19 = *(_QWORD **)(a4 + 96);
            break;
          }
        }
      }
      if (v19 == v20)
        goto LABEL_53;
    }
  }
  v21 = *(unsigned int *)(a5 + 40);
  if ((_DWORD)v21)
  {
    v22 = 32 * v21;
    v23 = (_DWORD *)(*(_QWORD *)(a5 + 32) + 4);
    while ((*(v23 - 1) & 0x10000FF) != 0 || (*v23 & 0x80000000) == 0)
    {
      v23 += 8;
      v22 -= 32;
      if (!v22)
        goto LABEL_33;
    }
    v24 = *(_QWORD *)(a1 + 280);
    goto LABEL_66;
  }
LABEL_33:
  v24 = *(_QWORD *)(a1 + 280);
  v25 = (uint64_t *)((a3 & 0x80000000) != 0
                  ? *(_QWORD *)(v24 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8
                  : *(_QWORD *)(v24 + 272) + 8 * a3);
  v26 = *v25;
  if (!v26)
    goto LABEL_53;
  if ((*(_BYTE *)(v26 + 3) & 0x81) != 0)
  {
    do
    {
      v26 = *(_QWORD *)(v26 + 24);
      if (!v26)
        goto LABEL_53;
    }
    while ((*(_DWORD *)v26 & 0x81000000) != 0);
  }
  v27 = 0;
  v28 = *(_QWORD *)(v26 + 8);
LABEL_41:
  v29 = **(unsigned __int16 **)(v28 + 16);
  v30 = v29 != 19;
  if (v29 == 11)
    v30 = 0;
  v27 |= v30;
  if (v29 == 19 || v29 == 11)
  {
    while (1)
    {
      v26 = *(_QWORD *)(v26 + 24);
      if (!v26)
        break;
      if ((*(_DWORD *)v26 & 0x81000000) == 0 && *(_QWORD *)(v26 + 8) != v28)
      {
        v28 = *(_QWORD *)(v26 + 8);
        goto LABEL_41;
      }
    }
  }
  if ((v27 & 1) == 0)
  {
LABEL_53:
    v32 = 0;
    return v32 & 1;
  }
LABEL_66:
  if ((a2 & 0x80000000) != 0)
    v39 = (uint64_t *)(*(_QWORD *)(v24 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v39 = (uint64_t *)(*(_QWORD *)(v24 + 272) + 8 * a2);
  v40 = *v39;
  if (!v40)
    goto LABEL_91;
  if ((*(_BYTE *)(v40 + 3) & 0x81) != 0)
  {
    do
    {
      v40 = *(_QWORD *)(v40 + 24);
      if (!v40)
        goto LABEL_91;
    }
    while ((*(_DWORD *)v40 & 0x81000000) != 0);
  }
  v41 = *(_QWORD *)(a5 + 24);
  v42 = *(_QWORD *)(v40 + 8);
  if (*(_QWORD *)(v42 + 24) == v41)
  {
LABEL_91:
    v32 = 1;
    return v32 & 1;
  }
  if (**(_WORD **)(v42 + 16))
    v43 = **(unsigned __int16 **)(v42 + 16) == 69;
  else
    v43 = 1;
  v44 = v43;
  while (1)
  {
    v40 = *(_QWORD *)(v40 + 24);
    if (!v40)
      break;
    if ((*(_DWORD *)v40 & 0x81000000) == 0)
    {
      v45 = *(_QWORD *)(v40 + 8);
      if (v45 != v42)
      {
        v46 = !**(_WORD **)(v45 + 16) || **(_WORD **)(v45 + 16) == 69;
        v47 = v46;
        v44 |= v47;
        v32 = 1;
        v42 = *(_QWORD *)(v40 + 8);
        if (*(_QWORD *)(v45 + 24) == v41)
          return v32 & 1;
      }
    }
  }
  v32 = v44 ^ 1;
  return v32 & 1;
}

uint64_t sub_1C5147D94(uint64_t a1, llvm::MachineInstr *this)
{
  unsigned __int16 *v2;
  unsigned int v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;
  __int16 v9;
  BOOL v10;
  uint64_t v11;
  llvm::MachineInstr *v12;
  llvm::MachineInstr *v13;
  llvm::MachineInstr *v14;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 2);
  v3 = *v2;
  if (v3 - 3 < 4)
    return 0;
  v4 = v3 - 7 > 0x3E || ((1 << (v3 - 7)) & 0x40000000000017D9) == 0;
  v5 = v4 && v3 >= 3;
  if (!v5 || v3 - 1 <= 1 && (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 0x10) != 0)
    return 0;
  v9 = *((_WORD *)this + 22);
  v10 = (v9 & 0xC) == 0 || (v9 & 4) != 0;
  v11 = *((_QWORD *)v2 + 1);
  if (!v10)
  {
    if ((v11 & 0x100000) != 0)
      return 0;
    v12 = this;
    result = 0;
    while ((*((_WORD *)v12 + 22) & 8) != 0)
    {
      v12 = (llvm::MachineInstr *)*((_QWORD *)v12 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v12 + 2) + 10) & 0x10) != 0)
        return result;
    }
    if ((v11 & 0x80) != 0)
      return 0;
    v13 = this;
    result = 0;
    while ((*((_WORD *)v13 + 22) & 8) != 0)
    {
      v13 = (llvm::MachineInstr *)*((_QWORD *)v13 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v13 + 2) + 8) & 0x80) != 0)
        return result;
    }
    if ((v11 & 0x200) != 0)
      return 0;
    v14 = this;
    result = 0;
    while ((*((_WORD *)v14 + 22) & 8) != 0)
    {
      v14 = (llvm::MachineInstr *)*((_QWORD *)v14 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v14 + 2) + 9) & 2) != 0)
        return result;
    }
    if ((v11 & 0x200000) == 0)
    {
      v15 = this;
      while ((*((_WORD *)v15 + 22) & 8) != 0)
      {
        v15 = (llvm::MachineInstr *)*((_QWORD *)v15 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v15 + 2) + 10) & 0x20) != 0)
          goto LABEL_46;
      }
      goto LABEL_18;
    }
    goto LABEL_46;
  }
  if ((v11 & 0x100280) != 0)
    return 0;
  if ((v11 & 0x200000) != 0)
  {
LABEL_46:
    if ((*((_WORD *)this + 22) & 0x4000) == 0)
      return 0;
  }
LABEL_18:
  if (llvm::MachineInstr::hasUnmodeledSideEffects(this))
    return 0;
  if (v3 - 1 > 1 || (*(_BYTE *)(*((_QWORD *)this + 4) + 48) & 8) == 0)
  {
    if (v10)
    {
      if ((v11 & 0x80000) == 0)
        return v3 != 28;
    }
    else if ((v11 & 0x80000) == 0)
    {
      v16 = this;
      while ((*((_WORD *)v16 + 22) & 8) != 0)
      {
        v16 = (llvm::MachineInstr *)*((_QWORD *)v16 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v16 + 2) + 10) & 8) != 0)
          goto LABEL_22;
      }
      return v3 != 28;
    }
  }
LABEL_22:
  result = llvm::MachineInstr::isDereferenceableInvariantLoad(this, *(llvm::AAResults **)(a1 + 264));
  if ((_DWORD)result)
  {
    v3 = **((unsigned __int16 **)this + 2);
    return v3 != 28;
  }
  return result;
}

_QWORD *sub_1C5147F60(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm::MachineInstrExpressionTrait *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm::MachineInstrExpressionTrait **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61EBB5C(a1, v4, (llvm::MachineInstrExpressionTrait *)((char *)v4 + 16 * v3));
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = 0;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1C5148014(uint64_t a1, uint64_t a2, llvm::MachineInstrExpressionTrait *a3, _DWORD *a4)
{
  int v8;
  uint64_t v9;
  unsigned int HashValue;
  uint64_t *v11;
  int v12;
  int i;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t result;

  v8 = *(_DWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a1;
    HashValue = llvm::MachineInstrExpressionTrait::getHashValue(a3, (const llvm::MachineInstr *const *)a2);
    v11 = 0;
    v12 = v8 - 1;
    for (i = 1; ; ++i)
    {
      v14 = HashValue & v12;
      v15 = (uint64_t *)(v9 + 16 * (HashValue & v12));
      v16 = *v15;
      if ((unint64_t)(*v15 + 1) < 2 || (unint64_t)(*(_QWORD *)a3 + 1) <= 1)
      {
        if (*(_QWORD *)a3 == v16)
          goto LABEL_15;
      }
      else
      {
        if ((llvm::MachineInstr::isIdenticalTo(*(_QWORD *)a3, v16, 3) & 1) != 0)
        {
LABEL_15:
          v18 = v15[1];
          goto LABEL_20;
        }
        v16 = *v15;
      }
      if (!v16)
        break;
      if (v11)
        v17 = 0;
      else
        v17 = v16 == -1;
      if (v17)
        v11 = (uint64_t *)(v9 + 16 * v14);
      HashValue = v14 + i;
    }
    if (v11)
      v19 = v11;
    else
      v19 = (uint64_t *)(v9 + 16 * v14);
  }
  else
  {
    v19 = 0;
  }
  v15 = sub_1C5148234(a1, a3, v19);
  v18 = 0;
  *v15 = *(_QWORD *)a3;
  v15[1] = 0;
LABEL_20:
  v20 = *(_QWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 32);
  if (result)
    *(_QWORD *)(a1 + 32) = *(_QWORD *)result;
  else
    result = sub_1C484358C(a1 + 40, 32, 3);
  *(_QWORD *)(result + 16) = *(_QWORD *)a3;
  *(_DWORD *)(result + 24) = *a4;
  *(_QWORD *)result = v20;
  *(_QWORD *)(result + 8) = v18;
  v15[1] = result;
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1C514815C(uint64_t result, const llvm::MachineInstr *const *a2, llvm::MachineInstrExpressionTrait *a3, uint64_t **a4)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;

  if ((_DWORD)a2)
  {
    v6 = (int)a2;
    v7 = result;
    result = llvm::MachineInstrExpressionTrait::getHashValue(a3, a2);
    v8 = 0;
    v9 = v6 - 1;
    for (i = 1; ; ++i)
    {
      v11 = result & v9;
      v12 = (uint64_t *)(v7 + 16 * (result & v9));
      v13 = *v12;
      if ((unint64_t)(*v12 + 1) < 2 || (result = *(_QWORD *)a3, (unint64_t)(*(_QWORD *)a3 + 1) <= 1))
      {
        if (*(_QWORD *)a3 == v13)
          goto LABEL_17;
      }
      else
      {
        result = llvm::MachineInstr::isIdenticalTo(result, v13, 3);
        if ((result & 1) != 0)
          goto LABEL_17;
        v13 = *v12;
      }
      if (!v13)
        break;
      if (v8)
        v14 = 0;
      else
        v14 = v13 == -1;
      if (v14)
        v8 = (uint64_t *)(v7 + 16 * v11);
      result = v11 + i;
    }
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
  }
LABEL_17:
  *a4 = v12;
  return result;
}

uint64_t *sub_1C5148234(uint64_t a1, llvm::MachineInstrExpressionTrait *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  const llvm::MachineInstr *const *v8;
  int v9;
  uint64_t v10;
  unsigned int HashValue;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  int i;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C51483B8(a1, 2 * v6);
    v25 = 0;
    sub_1C514815C(*(_QWORD *)a1, (const llvm::MachineInstr *const *)*(unsigned int *)(a1 + 16), a2, &v25);
    a3 = v25;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
    sub_1C51483B8(a1, v6);
    v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(_QWORD *)a1;
      HashValue = llvm::MachineInstrExpressionTrait::getHashValue(a2, v8);
      v12 = v10;
      v13 = 0;
      v14 = v9 - 1;
      for (i = 1; ; ++i)
      {
        v16 = HashValue & v14;
        a3 = (uint64_t *)(v12 + 16 * (HashValue & v14));
        v17 = *a3;
        if ((unint64_t)(*a3 + 1) < 2 || (unint64_t)(*(_QWORD *)a2 + 1) <= 1)
        {
          if (*(_QWORD *)a2 == v17)
            goto LABEL_3;
        }
        else
        {
          v22 = v14;
          v23 = HashValue & v14;
          v21 = i;
          v19 = v13;
          v20 = v12;
          v24 = (uint64_t *)(v12 + 16 * v16);
          if ((llvm::MachineInstr::isIdenticalTo(*(_QWORD *)a2, v17, 3) & 1) != 0)
          {
            a3 = v24;
            goto LABEL_3;
          }
          a3 = v24;
          v17 = *v24;
          v13 = v19;
          v12 = v20;
          i = v21;
          v14 = v22;
          v16 = v23;
        }
        if (!v17)
          break;
        if (v13)
          v18 = 0;
        else
          v18 = v17 == -1;
        if (v18)
          v13 = a3;
        HashValue = v16 + i;
      }
      if (v13)
        a3 = v13;
    }
    else
    {
      a3 = 0;
    }
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C51483B8(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm::MachineInstrExpressionTrait *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  const llvm::MachineInstr *const *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::MachineInstrExpressionTrait *v13;
  llvm::MachineInstrExpressionTrait *v14;
  llvm::MachineInstrExpressionTrait *v15;
  int v16;
  unsigned int HashValue;
  uint64_t v18;
  int v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm::MachineInstrExpressionTrait **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = 16 * v11;
      do
      {
        *result = 0;
        result += 2;
        v12 -= 16;
      }
      while (v12);
    }
    if ((_DWORD)v3)
    {
      v13 = (llvm::MachineInstrExpressionTrait *)((char *)v4 + 16 * v3);
      v14 = v4;
      do
      {
        if ((unint64_t)(*(_QWORD *)v14 + 1) >= 2)
        {
          v15 = *(llvm::MachineInstrExpressionTrait **)a1;
          v16 = *(_DWORD *)(a1 + 16);
          HashValue = llvm::MachineInstrExpressionTrait::getHashValue(v14, v10);
          v18 = 0;
          v19 = v16 - 1;
          for (i = 1; ; ++i)
          {
            v21 = HashValue & v19;
            v22 = (uint64_t)v15 + 16 * (HashValue & v19);
            v10 = *(const llvm::MachineInstr *const **)v22;
            if ((unint64_t)(*(_QWORD *)v22 + 1) < 2 || (unint64_t)(*(_QWORD *)v14 + 1) <= 1)
            {
              if (*(const llvm::MachineInstr *const **)v14 == v10)
                goto LABEL_28;
            }
            else
            {
              if ((llvm::MachineInstr::isIdenticalTo(*(_QWORD *)v14, (uint64_t)v10, 3) & 1) != 0)
                goto LABEL_28;
              v10 = *(const llvm::MachineInstr *const **)v22;
            }
            if (!v10)
              break;
            if (v18)
              v23 = 0;
            else
              v23 = v10 == (const llvm::MachineInstr *const *)-1;
            if (v23)
              v18 = (uint64_t)v15 + 16 * v21;
            HashValue = v21 + i;
          }
          if (v18)
            v22 = v18;
LABEL_28:
          *(_QWORD *)v22 = *(_QWORD *)v14;
          *(_QWORD *)(v22 + 8) = *((_QWORD *)v14 + 1);
          ++*(_DWORD *)(a1 + 8);
        }
        v14 = (llvm::MachineInstrExpressionTrait *)((char *)v14 + 16);
      }
      while (v14 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v24 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v24)
  {
    v25 = 16 * v24;
    do
    {
      *result = 0;
      result += 2;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

int32x2_t sub_1C5148584(int32x2_t *a1, const llvm::MachineInstr *const *a2)
{
  int32x2_t v2;
  uint64_t v3;
  uint64_t v4;
  const llvm::MachineInstr *const **v5;
  const llvm::MachineInstr *const *v6;
  int32x2_t **v7;
  int32x2_t *v8;
  int32x2_t *v9;
  int32x2_t *v10;
  uint64_t *v11;
  int32x2_t v12;
  __int32 v13;
  unsigned int v14;
  uint64_t *v15;
  __int32 v16;
  int j;
  unsigned int v18;
  uint64_t *v19;
  BOOL v20;
  int HashValue;
  __int32 v22;
  int i;
  int v24;
  const llvm::MachineInstr *const **v25;
  uint64_t *v26;
  int32x2_t *v27;
  int32x2_t result;
  int v29;
  int v30;
  const llvm::MachineInstr *const **v31;
  int32x2_t *v32;

  v2 = a1[38];
  v3 = a1[40].u32[0];
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (const llvm::MachineInstr *const **)(*(_QWORD *)&v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_3;
    v29 = 1;
    while (v6 != (const llvm::MachineInstr *const *)-4096)
    {
      v30 = v4 + v29++;
      v4 = v30 & (v3 - 1);
      v6 = *(const llvm::MachineInstr *const **)(*(_QWORD *)&v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (const llvm::MachineInstr *const **)(*(_QWORD *)&v2 + 16 * v4);
        goto LABEL_3;
      }
    }
  }
  v5 = (const llvm::MachineInstr *const **)(*(_QWORD *)&v2 + 16 * v3);
LABEL_3:
  v7 = (int32x2_t **)v5[1];
  v8 = (int32x2_t *)&unk_1C640E000;
  if (v7)
  {
    v31 = v5;
    v32 = a1;
    v9 = *v7;
    (*v7)[3] = (int32x2_t)v7[1];
    v10 = v7[2];
    if (v10)
    {
      do
      {
        v11 = (uint64_t *)&v10[2];
        v12 = *v9;
        v13 = v9[2].i32[0];
        if (!*(_QWORD *)&v10[1])
        {
          if (!v13)
            goto LABEL_36;
          HashValue = llvm::MachineInstrExpressionTrait::getHashValue((llvm::MachineInstrExpressionTrait *)&v10[2], a2);
          v22 = v13 - 1;
          for (i = 1; ; ++i)
          {
            v24 = HashValue & v22;
            v25 = (const llvm::MachineInstr *const **)(*(_QWORD *)&v12 + 16 * (HashValue & v22));
            a2 = *v25;
            if ((unint64_t)*v25 + 1 < 2 || (unint64_t)(*v11 + 1) <= 1)
            {
              if ((const llvm::MachineInstr *const *)*v11 == a2)
                goto LABEL_35;
              if (!a2)
                goto LABEL_36;
            }
            else
            {
              if ((llvm::MachineInstr::isIdenticalTo(*v11, (uint64_t)a2, 3) & 1) != 0)
              {
LABEL_35:
                *v25 = (const llvm::MachineInstr *const *)-1;
                v9[1] = vadd_s32(v9[1], (int32x2_t)0x1FFFFFFFFLL);
                goto LABEL_36;
              }
              a2 = *v25;
              if (!*v25)
                goto LABEL_36;
            }
            HashValue = v24 + i;
          }
        }
        if (v13)
        {
          v14 = llvm::MachineInstrExpressionTrait::getHashValue((llvm::MachineInstrExpressionTrait *)&v10[2], a2);
          v15 = 0;
          v16 = v13 - 1;
          for (j = 1; ; ++j)
          {
            v18 = v14 & v16;
            v19 = (uint64_t *)(*(_QWORD *)&v12 + 16 * (v14 & v16));
            a2 = (const llvm::MachineInstr *const *)*v19;
            if ((unint64_t)(*v19 + 1) < 2 || (unint64_t)(*v11 + 1) <= 1)
            {
              if ((const llvm::MachineInstr *const *)*v11 == a2)
                goto LABEL_34;
            }
            else
            {
              if ((llvm::MachineInstr::isIdenticalTo(*v11, (uint64_t)a2, 3) & 1) != 0)
                goto LABEL_34;
              a2 = (const llvm::MachineInstr *const *)*v19;
            }
            if (!a2)
              break;
            if (v15)
              v20 = 0;
            else
              v20 = a2 == (const llvm::MachineInstr *const *)-1;
            if (v20)
              v15 = (uint64_t *)(*(_QWORD *)&v12 + 16 * v18);
            v14 = v18 + j;
          }
          if (v15)
            v26 = v15;
          else
            v26 = (uint64_t *)(*(_QWORD *)&v12 + 16 * v18);
        }
        else
        {
          v26 = 0;
        }
        v19 = sub_1C5148234((uint64_t)v9, (llvm::MachineInstrExpressionTrait *)&v10[2], v26);
        *v19 = *v11;
        v19[1] = 0;
LABEL_34:
        v19[1] = (uint64_t)v10[1];
LABEL_36:
        v27 = (int32x2_t *)*v10;
        v7[2] = (int32x2_t *)*v10;
        v9 = *v7;
        *v10 = (*v7)[4];
        v9[4] = (int32x2_t)v10;
        v10 = v27;
      }
      while (v27);
    }
    MEMORY[0x1CAA32FC0](v7, 0x20C40960023A9);
    v5 = v31;
    a1 = v32;
    v8 = (int32x2_t *)&unk_1C640E000;
  }
  *v5 = (const llvm::MachineInstr *const *)-8192;
  result = vadd_s32(a1[39], v8[212]);
  a1[39] = result;
  return result;
}

uint64_t sub_1C51487FC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Machine Check Debug Module";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "mir-check-debugify";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6F2B;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C514888C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C514888C()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F6F2B;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E8144508;
  return result;
}

void sub_1C51488D8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C51488FC(uint64_t a1, uint64_t a2)
{
  void *result;

  result = sub_1C4771E64(a2, a2, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C5148930(uint64_t a1, uint64_t a2)
{
  uint64_t NamedMetadata;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  llvm *MachineFunction;
  uint64_t v17;
  const Function *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  void *v23;
  llvm::raw_ostream **v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const Function **v30;
  const Function *v31;
  int v32;
  int v33;
  size_t *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  llvm::raw_ostream *v38;
  llvm::raw_ostream *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  _BOOL4 v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  llvm::raw_ostream *v65;
  void *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  llvm::raw_ostream *v77;
  void *v78;
  llvm::raw_ostream *v79;
  const char *v80;
  _DWORD *v81;
  _BYTE *v82;
  int v84;
  llvm::raw_ostream *v85;
  llvm::raw_ostream *v86;
  void *v87;
  unint64_t v88;
  _BYTE *v89;
  int v90;
  llvm::raw_ostream *v91;
  llvm::raw_ostream *v92;
  void *v93;
  unint64_t v94;
  _BYTE *v95;
  llvm::MachineModuleInfo *v96;
  uint64_t v97;
  _QWORD *v98;
  unsigned __int8 *v99;
  void *v100[2];
  uint64_t v101;
  int v102;
  void *v103[2];
  _WORD v104[24];
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v103[0] = "llvm.mir.debugify";
  v104[8] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a2, (uint64_t)v103);
  if (NamedMetadata)
  {
    v5 = NamedMetadata;
    v6 = **(void ****)(a1 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
    }
    while (v7 != &llvm::MachineModuleInfoWrapperPass::ID);
    v8 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachineModuleInfoWrapperPass::ID);
    v9 = **(_QWORD ***)(v5 + 48);
    v10 = *(_QWORD *)(*(_QWORD *)(*v9 - 8 * *(unsigned int *)(*v9 + 8)) + 128);
    v11 = (_QWORD *)(v10 + 24);
    if (*(_DWORD *)(v10 + 32) >= 0x41u)
      v11 = (_QWORD *)*v11;
    v12 = *(_DWORD *)v11;
    v13 = *(_QWORD *)(*(_QWORD *)(v9[1] - 8 * *(unsigned int *)(v9[1] + 8)) + 128);
    v14 = (_QWORD *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    v15 = *(_DWORD *)v14;
    sub_1C496F858((uint64_t)v103, v12, 1);
    MachineFunction = (llvm *)sub_1C496F858((uint64_t)v100, v15, 1);
    v17 = *(_QWORD *)(a2 + 32);
    if (v17 != a2 + 24)
    {
      v96 = (llvm::MachineModuleInfo *)(v8 + 32);
      while (1)
      {
        v97 = v17;
        v18 = v17 ? (const Function *)(v17 - 56) : 0;
        MachineFunction = (llvm *)llvm::MachineModuleInfo::getMachineFunction(v96, v18);
        if (MachineFunction)
        {
          v19 = (_QWORD *)*((_QWORD *)MachineFunction + 41);
          v98 = (_QWORD *)((char *)MachineFunction + 320);
          if (v19 != (_QWORD *)((char *)MachineFunction + 320))
            break;
        }
LABEL_81:
        v17 = *(_QWORD *)(v97 + 8);
        if (v17 == a2 + 24)
          goto LABEL_82;
      }
LABEL_15:
      v20 = v19 + 6;
      v21 = v19[7];
      if ((_QWORD *)v21 == v19 + 6)
      {
LABEL_49:
        if ((_QWORD *)v21 == v20)
          goto LABEL_80;
        v43 = v100[0];
        while (1)
        {
          v44 = **(unsigned __int16 **)(v21 + 16);
          if ((v44 - 13) > 1)
            goto LABEL_76;
          v45 = *(_QWORD *)(*(_QWORD *)(v21 + 32) + ((unint64_t)(v44 != 14) << 6) + 16);
          v46 = *(_QWORD *)(v45 - 8 * *(unsigned int *)(v45 + 8) + 8);
          if (!v46 || (v47 = *(_QWORD **)(v46 + 8), (v48 = *v47) == 0))
          {
            v55 = 1;
            v56 = -1;
            goto LABEL_72;
          }
          v49 = 0;
          v50 = (unsigned __int8 *)(v47 + 3);
          while (1)
          {
            v51 = *v50;
            if ((v51 - 48) < 0xA)
            {
              v52 = -48;
              goto LABEL_57;
            }
            if ((v51 - 97) < 0x1A)
            {
              v52 = -87;
              goto LABEL_57;
            }
            if ((v51 - 65) > 0x19)
              break;
            v52 = -55;
LABEL_57:
            v53 = v52 + v51;
            if (v53 > 9)
              break;
            v54 = 10 * v49 + v53;
            if (v49 > v54 / 0xA)
            {
              v55 = 1;
              goto LABEL_69;
            }
            ++v50;
            v49 = v54;
            if (!--v48)
              goto LABEL_68;
          }
          v54 = v49;
LABEL_68:
          v55 = v48 != 0;
LABEL_69:
          if (HIDWORD(v54))
            v56 = -2;
          else
            v56 = v54 - 1;
LABEL_72:
          if (v55)
            v57 = -2;
          else
            v57 = v56;
          v43[v57 >> 6] &= ~(1 << v57);
LABEL_76:
          if ((*(_BYTE *)v21 & 4) == 0)
          {
            while ((*(_WORD *)(v21 + 44) & 8) != 0)
              v21 = *(_QWORD *)(v21 + 8);
          }
          v21 = *(_QWORD *)(v21 + 8);
          if ((_QWORD *)v21 == v20)
          {
LABEL_80:
            v19 = (_QWORD *)v19[1];
            if (v19 == v98)
              goto LABEL_81;
            goto LABEL_15;
          }
        }
      }
      while (1)
      {
        if (**(unsigned __int16 **)(v21 + 16) - 13 >= 2)
        {
          v41 = *(unsigned __int8 **)(v21 + 56);
          v99 = v41;
          if (v41
            && (MachineFunction = (llvm *)llvm::MetadataTracking::track((uint64_t)&v99, v41, 2), (v40 = v99) != 0))
          {
            v42 = *((_DWORD *)v99 + 1);
            if (v42)
              *((_QWORD *)v103[0] + ((v42 - 1) >> 6)) &= ~(1 << (v42 - 1));
          }
          else
          {
            v22 = (llvm::raw_ostream *)llvm::errs(MachineFunction);
            v23 = (void *)*((_QWORD *)v22 + 4);
            if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 0x34uLL)
            {
              qmemcpy(v23, "WARNING: Instruction with empty DebugLoc in function ", 53);
              *((_QWORD *)v22 + 4) += 53;
            }
            else
            {
              v22 = llvm::raw_ostream::write(v22, "WARNING: Instruction with empty DebugLoc in function ", 0x35uLL);
            }
            v24 = (llvm::raw_ostream **)llvm::errs(v22);
            v25 = (llvm::raw_ostream *)v24;
            if ((*((_BYTE *)v18 + 23) & 0x10) != 0)
            {
              v26 = ***(_QWORD ***)v18;
              v27 = *(_QWORD *)(v26 + 152);
              v28 = *(unsigned int *)(v26 + 168);
              if ((_DWORD)v28)
              {
                LODWORD(v29) = (v28 - 1) & ((v18 >> 4) ^ (v18 >> 9));
                v30 = (const Function **)(v27 + 16 * v29);
                v31 = *v30;
                if (*v30 != v18)
                {
                  v32 = 1;
                  do
                  {
                    if (v31 == (const Function *)-4096)
                      goto LABEL_26;
                    v33 = v29 + v32++;
                    v29 = v33 & (v28 - 1);
                    v31 = *(const Function **)(v27 + 16 * v29);
                  }
                  while (v31 != v18);
                  v30 = (const Function **)(v27 + 16 * v29);
                }
              }
              else
              {
LABEL_26:
                v30 = (const Function **)(v27 + 16 * v28);
              }
              v34 = (size_t *)v30[1];
              v37 = *v34;
              v35 = v34 + 2;
              v36 = v37;
              v38 = v24[4];
              if (v37 <= *((_QWORD *)v25 + 3) - (_QWORD)v38)
              {
                if (v36)
                {
                  memcpy(v38, v35, v36);
                  v38 = (llvm::raw_ostream *)(*((_QWORD *)v25 + 4) + v36);
                  *((_QWORD *)v25 + 4) = v38;
                }
              }
              else
              {
                v25 = llvm::raw_ostream::write(v25, (const char *)v35, v36);
                v38 = (llvm::raw_ostream *)*((_QWORD *)v25 + 4);
              }
            }
            else
            {
              v38 = v24[4];
            }
            if (*((_QWORD *)v25 + 3) - (_QWORD)v38 > 2uLL)
            {
              *((_BYTE *)v38 + 2) = 45;
              *(_WORD *)v38 = 11552;
              *((_QWORD *)v25 + 4) += 3;
            }
            else
            {
              v38 = llvm::raw_ostream::write(v25, " --", 3uLL);
            }
            v39 = (llvm::raw_ostream *)llvm::errs(v38);
            llvm::MachineInstr::print((llvm::MachineInstr *)v21, v39, 1, 0, 0, 1, 0);
            v40 = v99;
            if (!v99)
              goto LABEL_44;
          }
          MachineFunction = (llvm *)llvm::MetadataTracking::untrack((uint64_t)&v99, v40);
        }
LABEL_44:
        if ((*(_BYTE *)v21 & 4) == 0)
        {
          while ((*(_WORD *)(v21 + 44) & 8) != 0)
            v21 = *(_QWORD *)(v21 + 8);
        }
        v21 = *(_QWORD *)(v21 + 8);
        if ((_QWORD *)v21 == v20)
        {
          v21 = v19[7];
          goto LABEL_49;
        }
      }
    }
    if (!v105)
      goto LABEL_93;
LABEL_82:
    v58 = 0;
    v59 = (uint64_t *)v103[0];
    v60 = (v105 - 1) & 0xFFFFFFC0;
    while (1)
    {
      v62 = *v59++;
      v61 = v62;
      v63 = v60 + v58 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v105;
      v64 = v63 & v61;
      if (v64)
        break;
      v58 -= 64;
      if (v60 + v58 == -64)
        goto LABEL_93;
    }
    v67 = __clz(__rbit64(v64));
    if (v67 + 1 != (_DWORD)v58)
    {
      v84 = v67 - v58;
      do
      {
        v85 = (llvm::raw_ostream *)llvm::errs(MachineFunction);
        v86 = v85;
        v87 = (void *)*((_QWORD *)v85 + 4);
        if (*((_QWORD *)v85 + 3) - (_QWORD)v87 > 0x15uLL)
        {
          qmemcpy(v87, "WARNING: Missing line ", 22);
          *((_QWORD *)v85 + 4) += 22;
        }
        else
        {
          v86 = llvm::raw_ostream::write(v85, "WARNING: Missing line ", 0x16uLL);
        }
        v88 = (v84 + 1);
        sub_1C5E21910(v86, v88, 0, 0, 0);
        v89 = (_BYTE *)*((_QWORD *)v86 + 4);
        if (*((_BYTE **)v86 + 3) == v89)
        {
          llvm::raw_ostream::write(v86, "\n", 1uLL);
        }
        else
        {
          *v89 = 10;
          ++*((_QWORD *)v86 + 4);
        }
        v68 = 1;
        MachineFunction = (llvm *)sub_1C476BA0C(v103, v88, v105, 1u);
        v84 = (int)MachineFunction;
      }
      while ((_DWORD)MachineFunction != -1);
    }
    else
    {
LABEL_93:
      v68 = 0;
    }
    if (v102)
    {
      v69 = 0;
      v70 = (uint64_t *)v100[0];
      v71 = (v102 - 1) & 0xFFFFFFC0;
      while (1)
      {
        v73 = *v70++;
        v72 = v73;
        v74 = v71 + v69 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v102;
        v75 = v74 & v72;
        if (v75)
          break;
        v69 -= 64;
        if (v71 + v69 == -64)
          goto LABEL_103;
      }
      v76 = __clz(__rbit64(v75));
      if (v76 + 1 != (_DWORD)v69)
      {
        v90 = v76 - v69;
        do
        {
          v91 = (llvm::raw_ostream *)llvm::errs(MachineFunction);
          v92 = v91;
          v93 = (void *)*((_QWORD *)v91 + 4);
          if (*((_QWORD *)v91 + 3) - (_QWORD)v93 > 0x19uLL)
          {
            qmemcpy(v93, "WARNING: Missing variable ", 26);
            *((_QWORD *)v91 + 4) += 26;
          }
          else
          {
            v92 = llvm::raw_ostream::write(v91, "WARNING: Missing variable ", 0x1AuLL);
          }
          v94 = (v90 + 1);
          sub_1C5E21910(v92, v94, 0, 0, 0);
          v95 = (_BYTE *)*((_QWORD *)v92 + 4);
          if (*((_BYTE **)v92 + 3) == v95)
          {
            llvm::raw_ostream::write(v92, "\n", 1uLL);
          }
          else
          {
            *v95 = 10;
            ++*((_QWORD *)v92 + 4);
          }
          v68 = 1;
          MachineFunction = (llvm *)sub_1C476BA0C(v100, v94, v102, 1u);
          v90 = (int)MachineFunction;
        }
        while ((_DWORD)MachineFunction != -1);
      }
    }
LABEL_103:
    v77 = (llvm::raw_ostream *)llvm::errs(MachineFunction);
    v78 = (void *)*((_QWORD *)v77 + 4);
    if (*((_QWORD *)v77 + 3) - (_QWORD)v78 > 0x1CuLL)
    {
      qmemcpy(v78, "Machine IR debug info check: ", 29);
      *((_QWORD *)v77 + 4) += 29;
    }
    else
    {
      v77 = llvm::raw_ostream::write(v77, "Machine IR debug info check: ", 0x1DuLL);
    }
    v79 = (llvm::raw_ostream *)llvm::errs(v77);
    if (v68)
      v80 = "FAIL";
    else
      v80 = "PASS";
    v81 = (_DWORD *)*((_QWORD *)v79 + 4);
    if (*((_QWORD *)v79 + 3) - (_QWORD)v81 > 3uLL)
    {
      *v81 = *(_DWORD *)v80;
      v82 = (_BYTE *)(*((_QWORD *)v79 + 4) + 4);
      *((_QWORD *)v79 + 4) = v82;
    }
    else
    {
      v79 = llvm::raw_ostream::write(v79, v80, 4uLL);
      v82 = (_BYTE *)*((_QWORD *)v79 + 4);
    }
    if (*((_BYTE **)v79 + 3) == v82)
    {
      llvm::raw_ostream::write(v79, "\n", 1uLL);
    }
    else
    {
      *v82 = 10;
      ++*((_QWORD *)v79 + 4);
    }
    if (v100[0] != &v101)
      free(v100[0]);
    if (v103[0] != v104)
      free(v103[0]);
  }
  else
  {
    v65 = (llvm::raw_ostream *)llvm::errs(0);
    v66 = (void *)*((_QWORD *)v65 + 4);
    if (*((_QWORD *)v65 + 3) - (_QWORD)v66 > 0x4EuLL)
    {
      qmemcpy(v66, "WARNING: Please run mir-debugify to generate llvm.mir.debugify metadata first.\n", 79);
      *((_QWORD *)v65 + 4) += 79;
    }
    else
    {
      llvm::raw_ostream::write(v65, "WARNING: Please run mir-debugify to generate llvm.mir.debugify metadata first.\n", 0x4FuLL);
    }
  }
  return 0;
}

void llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::moveTopLevelCycleToNewParent(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  size_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  void **v58;

  if (*a3)
    v6 = (uint64_t **)(*a3 + 32);
  else
    v6 = (uint64_t **)(a1 + 64);
  v8 = *v6;
  v7 = v6[1];
  if (*v6 != v7)
  {
    while ((_QWORD *)*v8 != a3)
    {
      if (++v8 == v7)
      {
        v8 = v6[1];
        break;
      }
    }
  }
  v9 = *(uint64_t **)(a2 + 40);
  if ((unint64_t)v9 >= *(_QWORD *)(a2 + 48))
  {
    v11 = sub_1C514C418((char **)(a2 + 32), v8);
  }
  else
  {
    v10 = *v8;
    *v8 = 0;
    *v9 = v10;
    v11 = (char *)(v9 + 1);
  }
  *(_QWORD *)(a2 + 40) = v11;
  v12 = v6[1];
  v13 = *(v12 - 1);
  *(v12 - 1) = 0;
  v14 = *v8;
  *v8 = v13;
  if (v14)
  {
    v15 = *(void **)(v14 + 56);
    if (v15)
    {
      *(_QWORD *)(v14 + 64) = v15;
      operator delete(v15);
    }
    v58 = (void **)(v14 + 32);
    sub_1C514C2A4(&v58);
    v16 = *(void **)(v14 + 8);
    if (v16 != (void *)(v14 + 24))
      free(v16);
    MEMORY[0x1CAA32FC0](v14, 0x10A0C40B2354FA7);
  }
  sub_1C514C378((uint64_t)v6, v6[1] - 1);
  *a3 = a2;
  v18 = (char *)a3[7];
  v17 = (char *)a3[8];
  if (v17 - v18 >= 1)
  {
    v19 = (v17 - v18) >> 3;
    v21 = *(_QWORD *)(a2 + 56);
    v20 = *(uint64_t **)(a2 + 64);
    v22 = (uint64_t)v20 - v21;
    v23 = (char *)(v21 + (((unint64_t)v20 - v21) & 0xFFFFFFFFFFFFFFF8));
    v24 = *(_QWORD *)(a2 + 72);
    if (v19 > (v24 - (uint64_t)v20) >> 3)
    {
      v25 = v22 >> 3;
      v26 = (v22 >> 3) + v19;
      if (v26 >> 61)
        abort();
      v27 = v24 - v21;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        if (v28 >> 61)
          sub_1C4764EE4();
        v29 = (char *)operator new(8 * v28);
        v23 = (char *)(v21 + (((unint64_t)v20 - v21) & 0xFFFFFFFFFFFFFFF8));
        v25 = v22 >> 3;
      }
      else
      {
        v29 = 0;
      }
      v40 = &v29[8 * v25];
      v41 = &v40[8 * v19];
      v42 = 8 * v19;
      v43 = v40;
      do
      {
        v44 = *(_QWORD *)v18;
        v18 += 8;
        *(_QWORD *)v43 = v44;
        v43 += 8;
        v42 -= 8;
      }
      while (v42);
      if ((unint64_t)v22 >= 8)
      {
        v45 = 8 * v25;
        do
        {
          *(_QWORD *)&v29[v45 - 8] = *(_QWORD *)(v21 - 8 + v45);
          v45 -= 8;
        }
        while (v45);
        v20 = *(uint64_t **)(a2 + 64);
        v40 = v29;
      }
      v46 = &v29[8 * v28];
      v47 = (char *)v20 - v23;
      if (v20 != (uint64_t *)v23)
      {
        v48 = (char *)v20 - v23;
        v49 = v41;
        memmove(v41, v23, v48);
        v41 = v49;
      }
      v50 = *(void **)(a2 + 56);
      *(_QWORD *)(a2 + 56) = v40;
      *(_QWORD *)(a2 + 64) = &v41[v47];
      *(_QWORD *)(a2 + 72) = v46;
      if (v50)
        operator delete(v50);
      goto LABEL_52;
    }
    v30 = (char *)v20 - v23;
    v31 = ((char *)v20 - v23) >> 3;
    if (v31 >= v19)
    {
      v32 = &v18[8 * v19];
      v34 = *(char **)(a2 + 64);
    }
    else
    {
      v32 = &v18[8 * v31];
      v33 = v17 - v32;
      if (v17 != v32)
      {
        memmove(*(void **)(a2 + 64), &v18[8 * v31], v17 - v32);
        v23 = (char *)(v21 + (((unint64_t)v20 - v21) & 0xFFFFFFFFFFFFFFF8));
      }
      v34 = (char *)v20 + v33;
      *(_QWORD *)(a2 + 64) = (char *)v20 + v33;
      if (v30 < 1)
        goto LABEL_52;
    }
    v35 = &v23[8 * v19];
    v36 = (uint64_t *)&v34[-8 * v19];
    v37 = v34;
    if (v36 < v20)
    {
      v37 = v34;
      do
      {
        v38 = *v36++;
        *(_QWORD *)v37 = v38;
        v37 += 8;
      }
      while (v36 < v20);
    }
    *(_QWORD *)(a2 + 64) = v37;
    if (v34 != v35)
    {
      v39 = v23;
      memmove(&v34[-8 * ((v34 - v35) >> 3)], v23, v34 - v35);
      v23 = v39;
    }
    if (v32 != v18)
      memmove(v23, v18, v32 - v18);
  }
LABEL_52:
  v51 = *(_QWORD *)(a1 + 40);
  v52 = *(unsigned int *)(a1 + 56);
  v53 = (_QWORD *)(v51 + 16 * v52);
  if (*(_DWORD *)(a1 + 48))
  {
    if ((_DWORD)v52)
    {
      v54 = 16 * v52;
      v55 = *(_QWORD **)(a1 + 40);
      while ((*v55 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v55 += 2;
        v54 -= 16;
        if (!v54)
          goto LABEL_57;
      }
    }
    else
    {
      v55 = *(_QWORD **)(a1 + 40);
    }
  }
  else
  {
LABEL_57:
    v55 = (_QWORD *)(v51 + 16 * v52);
  }
  v56 = (_QWORD *)(v51 + 16 * v52);
LABEL_60:
  while (v55 != v56)
  {
    if ((_QWORD *)v55[1] == a3)
      v55[1] = a2;
    v57 = v55 + 2;
    v55 = v53;
    if (v57 != v53)
    {
      v55 = v57;
      while ((*v55 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v55 += 2;
        if (v55 == v53)
        {
          v55 = v53;
          goto LABEL_60;
        }
      }
    }
  }
}

{
  __ZN4llvm16GenericCycleInfoINS_17GenericSSAContextINS_15MachineFunctionEEEE28moveTopLevelCycleToNewParentEPNS_12GenericCycleIS3_EES7_(a1, a2, a3);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::block_begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::block_end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

_DWORD *llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::clear(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 64;
  sub_1C514C378(a1 + 64, *(_QWORD **)(a1 + 64));
  sub_1C5149628((_DWORD *)(v1 - 48));
  return sub_1C5149628((_DWORD *)(v1 - 24));
}

_DWORD *sub_1C5149628(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64)
        v5 = 64;
      else
        v5 = v4;
LABEL_9:
      if (v5 == v3)
      {
        *((_QWORD *)result + 1) = 0;
        v6 = 16 * v3;
        v7 = *(_QWORD **)result;
        do
        {
          *v7 = -4096;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
      }
      else
      {
        result = (_DWORD *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
        if (v5)
        {
          v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
          v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
          LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
          v1[4] = v9;
          result = operator new(16 * v9, (std::align_val_t)8uLL);
          *(_QWORD *)v1 = result;
          *((_QWORD *)v1 + 1) = 0;
          v10 = v1[4];
          if ((_DWORD)v10)
          {
            v11 = 16 * v10;
            do
            {
              *(_QWORD *)result = -4096;
              result += 4;
              v11 -= 16;
            }
            while (v11);
          }
        }
        else
        {
          *(_QWORD *)v1 = 0;
          *((_QWORD *)v1 + 1) = 0;
          v1[4] = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3])
      return result;
    v3 = result[4];
    if (v3 > 0x40)
    {
      v5 = 0;
      goto LABEL_9;
    }
  }
  if (v3)
  {
    v12 = *(_QWORD **)result;
    v13 = 16 * v3;
    do
    {
      *v12 = -4096;
      v12 += 2;
      v13 -= 16;
    }
    while (v13);
  }
  *((_QWORD *)result + 1) = 0;
  return result;
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::compute(_QWORD *a1, uint64_t a2)
{
  int v2;
  void **v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  BOOL v72;
  unsigned int v73;
  uint64_t *v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  int v92;
  _QWORD *v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  int v100;
  BOOL v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t *v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  int v130;
  BOOL v131;
  unsigned int v132;
  uint64_t *v133;
  uint64_t *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  char *v139;
  _QWORD *v140;
  void *v141;
  _QWORD *v142;
  _QWORD **v143;
  _QWORD *v144;
  char *v145;
  char *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  __int128 v153;
  char *v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  unsigned int v159;
  int v160;
  char *v161;
  char *v162;
  _BYTE *v163;
  _BYTE *v164;
  _BYTE *v165;
  int v166;
  unsigned int v167;
  void *v168;
  _BYTE *v169;
  void *v170;
  int v171;
  unsigned int v172;
  uint64_t *v173;
  char *v174;
  char *v175;
  char *v176;
  int v177;
  BOOL v178;
  _DWORD *v179;
  int v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  char v184;
  uint64_t *v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  __int128 v193;
  int v194;
  int v195;
  _QWORD **v197;
  _QWORD **v198;
  char *v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204[2];
  uint64_t v205;
  _DWORD v206[16];
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  _BYTE *v212;
  uint64_t v213;
  int v214;
  _BYTE v215[64];
  char *v216;
  char *v217;
  char *v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  void *v223;
  uint64_t v224;
  _BYTE v225[64];
  void *v226;
  uint64_t v227;
  _BYTE v228[64];
  void *v229;
  void *v230;
  void **v231;
  uint64_t *v232;
  _BYTE v233[64];
  void *v234;
  _BYTE *v235;
  char *v236;
  _BYTE *v237;
  void *v238;
  uint64_t v239;
  int v240;
  _BYTE v241[64];
  void *__p;
  _BYTE *v243;
  uint64_t v244;
  int *v245;
  uint64_t v246;
  int v247;
  int v248;
  int v249;
  _BYTE v250[64];
  char *v251;
  uint64_t *v252;
  uint64_t *v253;
  uint64_t v254;

  v2 = 0;
  v254 = *MEMORY[0x1E0C80C00];
  v220 = 0;
  v221 = 0;
  v219 = a1;
  v222 = 0;
  v223 = v225;
  v224 = 0x800000000;
  a1[1] = a2;
  *a1 = *(_QWORD *)(a2 + 40);
  v3 = *(void ***)(a2 + 328);
  v245 = &v247;
  v246 = 0x800000000;
  v229 = &v231;
  v231 = v3;
  v230 = (void *)0x800000001;
  v4 = 1;
  do
  {
    while (1)
    {
      v5 = v229;
      v6 = *((_QWORD *)v229 + v4 - 1);
      v7 = v6 >> 4;
      if (!v222)
        goto LABEL_14;
      v8 = v222 - 1;
      LODWORD(v9) = (v7 ^ (v6 >> 9)) & (v222 - 1);
      v10 = (uint64_t *)(v220 + 16 * v9);
      v11 = *v10;
      if (v6 == *v10)
        break;
      v13 = 1;
      v14 = *v10;
      v15 = (v7 ^ (v6 >> 9)) & v8;
      while (v14 != -4096)
      {
        v16 = v15 + v13++;
        v15 = v16 & v8;
        v14 = *(_QWORD *)(v220 + 16 * v15);
        if (v6 == v14)
        {
          v12 = v246;
          if (v4 != v245[v246 - 1])
            goto LABEL_42;
          v17 = 1;
          while (v11 != -4096)
          {
            v18 = v9 + v17++;
            v9 = v18 & v8;
            v11 = *(_QWORD *)(v220 + 16 * v9);
            if (v6 == v11)
            {
              v10 = (uint64_t *)(v220 + 16 * v9);
              goto LABEL_41;
            }
          }
          v10 = (uint64_t *)(v220 + 16 * v222);
          goto LABEL_41;
        }
      }
LABEL_14:
      if (v246 >= HIDWORD(v246))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v245, (uint64_t)&v247, v246 + 1, 4);
        v245[v246] = v4;
        v19 = v246;
        v5 = v229;
      }
      else
      {
        v245[v246] = v4;
        v19 = v246;
      }
      LODWORD(v246) = v19 + 1;
      sub_1C514C6DC((unsigned int *)&v229, (uint64_t)v5 + 8 * v230, *(char **)(v6 + 88), *(char **)(v6 + 96));
      ++v2;
      if (!v222)
      {
        v27 = 0;
        goto LABEL_30;
      }
      v20 = (v222 - 1) & (v7 ^ (v6 >> 9));
      v21 = (_QWORD *)(v220 + 16 * v20);
      v22 = *v21;
      if (v6 != *v21)
      {
        v23 = 0;
        v24 = 1;
        while (v22 != -4096)
        {
          if (v23)
            v25 = 0;
          else
            v25 = v22 == -8192;
          if (v25)
            v23 = v21;
          v26 = v20 + v24++;
          v20 = v26 & (v222 - 1);
          v21 = (_QWORD *)(v220 + 16 * v20);
          v22 = *v21;
          if (v6 == *v21)
            goto LABEL_36;
        }
        if (v23)
          v27 = v23;
        else
          v27 = v21;
LABEL_30:
        if (4 * (int)v221 + 4 >= 3 * v222)
        {
          sub_1C514C86C((uint64_t)&v220, 2 * v222);
          v30 = v222 - 1;
          v31 = (v222 - 1) & (v7 ^ (v6 >> 9));
          v27 = (_QWORD *)(v220 + 16 * v31);
          v32 = *v27;
          if (v6 == *v27)
          {
LABEL_53:
            v28 = v6;
            goto LABEL_33;
          }
          v33 = 0;
          v34 = 1;
          while (v32 != -4096)
          {
            if (v33)
              v35 = 0;
            else
              v35 = v32 == -8192;
            if (v35)
              v33 = v27;
            v36 = v31 + v34++;
            v31 = v36 & v30;
            v27 = (_QWORD *)(v220 + 16 * (v36 & v30));
            v32 = *v27;
            if (v6 == *v27)
              goto LABEL_53;
          }
        }
        else
        {
          if (v222 + ~(_DWORD)v221 - HIDWORD(v221) > v222 >> 3)
            goto LABEL_32;
          sub_1C514C86C((uint64_t)&v220, v222);
          if (!v222)
          {
            v27 = 0;
            goto LABEL_32;
          }
          v37 = v222 - 1;
          v38 = (v222 - 1) & (v7 ^ (v6 >> 9));
          v27 = (_QWORD *)(v220 + 16 * v38);
          v39 = *v27;
          if (*v27 == v6)
          {
LABEL_32:
            v28 = *v27;
LABEL_33:
            LODWORD(v221) = v221 + 1;
            if (v28 != -4096)
              --HIDWORD(v221);
            *v27 = v6;
            *((_DWORD *)v27 + 2) = v2;
            *((_DWORD *)v27 + 3) = 0;
            goto LABEL_36;
          }
          v33 = 0;
          v40 = 1;
          while (v39 != -4096)
          {
            if (v33)
              v41 = 0;
            else
              v41 = v39 == -8192;
            if (v41)
              v33 = v27;
            v42 = v38 + v40++;
            v38 = v42 & v37;
            v27 = (_QWORD *)(v220 + 16 * (v42 & v37));
            v39 = *v27;
            if (*v27 == v6)
              goto LABEL_32;
          }
        }
        if (v33)
          v27 = v33;
        goto LABEL_32;
      }
LABEL_36:
      v29 = v224;
      if (v224 >= (unint64_t)HIDWORD(v224))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, (uint64_t)v225, v224 + 1, 8);
        v29 = v224;
      }
      *((_QWORD *)v223 + v29) = v6;
      LODWORD(v224) = v224 + 1;
      v4 = v230;
      if (!(_DWORD)v230)
        goto LABEL_71;
    }
    v12 = v246;
    if (v4 == v245[v246 - 1])
    {
LABEL_41:
      *((_DWORD *)v10 + 3) = v2;
      LODWORD(v246) = v12 - 1;
    }
LABEL_42:
    LODWORD(v230) = --v4;
  }
  while (v4);
LABEL_71:
  if (v229 != &v231)
    free(v229);
  if (v245 != &v247)
    free(v245);
  v226 = v228;
  v227 = 0x800000000;
  if (!(_DWORD)v224)
    goto LABEL_210;
  v199 = (char *)v223;
  v43 = (char *)v223 + 8 * v224;
  do
  {
    v45 = *((_QWORD *)v43 - 1);
    v43 -= 8;
    v44 = v45;
    v203 = v45;
    v46 = v45 >> 4;
    if (!v222)
      goto LABEL_208;
    v47 = (v222 - 1) & (v46 ^ (v44 >> 9));
    v48 = *(_QWORD *)(v220 + 16 * v47);
    if (v44 != v48)
    {
      v49 = 1;
      while (v48 != -4096)
      {
        v50 = v47 + v49++;
        v47 = v50 & (v222 - 1);
        v48 = *(_QWORD *)(v220 + 16 * v47);
        if (v44 == v48)
          goto LABEL_82;
      }
LABEL_208:
      v51 = 0;
      goto LABEL_83;
    }
LABEL_82:
    v51 = *(_QWORD *)(v220 + 16 * v47 + 8);
LABEL_83:
    v202 = v51;
    v52 = *(uint64_t **)(v44 + 64);
    v53 = *(uint64_t **)(v44 + 72);
    while (v52 != v53)
    {
      v54 = *v52;
      if (v222)
      {
        v55 = ((v54 >> 4) ^ (v54 >> 9)) & (v222 - 1);
        v56 = *(_QWORD *)(v220 + 16 * v55);
        if (v54 == v56)
        {
LABEL_90:
          v59 = *(_QWORD *)(v220 + 16 * v55 + 8);
          goto LABEL_91;
        }
        v57 = 1;
        while (v56 != -4096)
        {
          v58 = v55 + v57++;
          v55 = v58 & (v222 - 1);
          v56 = *(_QWORD *)(v220 + 16 * v55);
          if (v54 == v56)
            goto LABEL_90;
        }
      }
      v59 = 0;
LABEL_91:
      if (v202 <= v59 && HIDWORD(v202) >= HIDWORD(v59))
      {
        v61 = v227;
        if (v227 >= (unint64_t)HIDWORD(v227))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v226, (uint64_t)v228, v227 + 1, 8);
          v61 = v227;
        }
        *((_QWORD *)v226 + v61) = v54;
        LODWORD(v227) = v227 + 1;
      }
      ++v52;
    }
    if (!(_DWORD)v227)
      continue;
    v62 = operator new();
    *(_OWORD *)v62 = 0u;
    *(_OWORD *)(v62 + 16) = 0u;
    *(_QWORD *)(v62 + 80) = 0;
    *(_OWORD *)(v62 + 32) = 0u;
    *(_OWORD *)(v62 + 48) = 0u;
    *(_OWORD *)(v62 + 64) = 0u;
    *(_QWORD *)(v62 + 24) = v44;
    *(_QWORD *)(v62 + 8) = v62 + 24;
    *(_DWORD *)(v62 + 80) = 0;
    v201 = (_QWORD *)v62;
    *(_QWORD *)(v62 + 16) = 0x100000001;
    v63 = (uint64_t *)operator new(8uLL);
    *(_QWORD *)(v62 + 56) = v63;
    *v63++ = v44;
    *(_QWORD *)(v62 + 64) = v63;
    *(_QWORD *)(v62 + 72) = v63;
    v64 = v219[2];
    v65 = *((_DWORD *)v219 + 8);
    if (!v65)
    {
      v74 = 0;
      goto LABEL_116;
    }
    v66 = v65 - 1;
    v67 = v66 & (v46 ^ (v44 >> 9));
    v68 = (uint64_t *)(v64 + 16 * v67);
    v69 = *v68;
    if (v44 != *v68)
    {
      v70 = 0;
      v71 = 1;
      while (v69 != -4096)
      {
        if (v70)
          v72 = 0;
        else
          v72 = v69 == -8192;
        if (v72)
          v70 = v68;
        v73 = v67 + v71++;
        v67 = v73 & v66;
        v68 = (uint64_t *)(v64 + 16 * v67);
        v69 = *v68;
        if (v44 == *v68)
          goto LABEL_117;
      }
      if (v70)
        v74 = v70;
      else
        v74 = v68;
LABEL_116:
      v75 = sub_1C514C9E4((uint64_t)(v219 + 2), &v203, v74);
      *v75 = v44;
      v75[1] = v62;
    }
LABEL_117:
    v229 = &v219;
    v230 = &v202;
    v231 = &v226;
    v232 = (uint64_t *)&v201;
    v76 = v227;
    while (2)
    {
      v77 = *((_QWORD *)v226 + --v76);
      LODWORD(v227) = v76;
      v200 = v77;
      if (v77 == v203)
        goto LABEL_189;
      v211 = (_BYTE *)v77;
      v78 = v219[5];
      v79 = *((unsigned int *)v219 + 14);
      v80 = v77 >> 4;
      if (!(_DWORD)v79)
        goto LABEL_125;
      LODWORD(v81) = (v79 - 1) & (v80 ^ (v77 >> 9));
      v82 = (uint64_t *)(v78 + 16 * v81);
      v83 = *v82;
      if (*v82 != v77)
      {
        v84 = 1;
        while (v83 != -4096)
        {
          v85 = v81 + v84++;
          v81 = v85 & (v79 - 1);
          v83 = *(_QWORD *)(v78 + 16 * v81);
          if (v83 == v77)
          {
            v82 = (uint64_t *)(v78 + 16 * v81);
            goto LABEL_126;
          }
        }
LABEL_125:
        v82 = (uint64_t *)(v78 + 16 * v79);
      }
LABEL_126:
      if (v82 != (uint64_t *)(v78 + 16 * v79))
      {
        v114 = v82[1];
        if (!v114)
        {
          v86 = v219[2];
          LODWORD(v87) = *((_DWORD *)v219 + 8);
          goto LABEL_135;
        }
        goto LABEL_162;
      }
      v86 = v219[2];
      v87 = *((unsigned int *)v219 + 8);
      if (!(_DWORD)v87)
        goto LABEL_133;
      LODWORD(v88) = (v87 - 1) & (v80 ^ (v77 >> 9));
      v89 = (uint64_t *)(v86 + 16 * v88);
      v90 = *v89;
      if (*v89 != v77)
      {
        v91 = 1;
        while (v90 != -4096)
        {
          v92 = v88 + v91++;
          v88 = v92 & (v87 - 1);
          v90 = *(_QWORD *)(v86 + 16 * v88);
          if (v90 == v77)
          {
            v89 = (uint64_t *)(v86 + 16 * v88);
            goto LABEL_134;
          }
        }
LABEL_133:
        v89 = (uint64_t *)(v86 + 16 * v87);
      }
LABEL_134:
      if (v89 != (uint64_t *)(v86 + 16 * v87))
      {
        v135 = (_QWORD *)v89[1];
        do
        {
          v114 = (uint64_t)v135;
          v135 = (_QWORD *)*v135;
        }
        while (v135);
        v204[0] = v114;
        sub_1C514AC20((uint64_t)&v245, (uint64_t)(v219 + 5), (uint64_t *)&v211, v204);
LABEL_162:
        if ((_QWORD *)v114 != v201)
        {
          llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::moveTopLevelCycleToNewParent((uint64_t)v219, (uint64_t)v201, (_QWORD *)v114);
          v115 = *(unsigned int *)(v114 + 16);
          if ((_DWORD)v115)
          {
            v116 = *(uint64_t **)(v114 + 8);
            v117 = 8 * v115;
            do
            {
              v118 = *v116++;
              sub_1C514C568(&v229, v118);
              v117 -= 8;
            }
            while (v117);
          }
        }
        goto LABEL_188;
      }
LABEL_135:
      v93 = v201;
      if (!(_DWORD)v87)
      {
        v103 = 0;
        goto LABEL_149;
      }
      v94 = v80 ^ (v77 >> 9);
      v95 = v87 - 1;
      v96 = (v87 - 1) & v94;
      v97 = (uint64_t *)(v86 + 16 * v96);
      v98 = *v97;
      if (v77 != *v97)
      {
        v99 = 0;
        v100 = 1;
        while (v98 != -4096)
        {
          if (v99)
            v101 = 0;
          else
            v101 = v98 == -8192;
          if (v101)
            v99 = v97;
          v102 = v96 + v100++;
          v96 = v102 & v95;
          v97 = (uint64_t *)(v86 + 16 * v96);
          v98 = *v97;
          if (v77 == *v97)
            goto LABEL_150;
        }
        if (v99)
          v103 = v99;
        else
          v103 = v97;
LABEL_149:
        v104 = sub_1C514C9E4((uint64_t)(v219 + 2), &v200, v103);
        *v104 = v77;
        v104[1] = (uint64_t)v93;
        v93 = v201;
      }
LABEL_150:
      v106 = (uint64_t *)v93[8];
      v105 = v93[9];
      if ((unint64_t)v106 >= v105)
      {
        v108 = (_QWORD *)v93[7];
        v109 = v106 - v108;
        v110 = v109 + 1;
        if ((unint64_t)(v109 + 1) >> 61)
LABEL_331:
          abort();
        v111 = v105 - (_QWORD)v108;
        if (v111 >> 2 > v110)
          v110 = v111 >> 2;
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v110;
        if (v112)
        {
          if (v112 >> 61)
            goto LABEL_332;
          v113 = (char *)operator new(8 * v112);
        }
        else
        {
          v113 = 0;
        }
        v119 = (uint64_t *)&v113[8 * v109];
        *v119 = v77;
        v107 = v119 + 1;
        if (v106 != v108)
        {
          do
          {
            v120 = *--v106;
            *--v119 = v120;
          }
          while (v106 != v108);
          v106 = (uint64_t *)v93[7];
        }
        v93[7] = v119;
        v93[8] = v107;
        v93[9] = &v113[8 * v112];
        if (v106)
          operator delete(v106);
      }
      else
      {
        *v106 = v77;
        v107 = v106 + 1;
      }
      v93[8] = v107;
      v121 = v200;
      sub_1C514C568(&v229, v200);
      v122 = v219[5];
      v123 = (uint64_t)v201;
      v124 = *((_DWORD *)v219 + 14);
      if (!v124)
      {
        v133 = 0;
        goto LABEL_187;
      }
      v125 = v124 - 1;
      v126 = v125 & ((v121 >> 4) ^ (v121 >> 9));
      v127 = (uint64_t *)(v122 + 16 * v126);
      v128 = *v127;
      if (v121 != *v127)
      {
        v129 = 0;
        v130 = 1;
        while (v128 != -4096)
        {
          if (v129)
            v131 = 0;
          else
            v131 = v128 == -8192;
          if (v131)
            v129 = v127;
          v132 = v126 + v130++;
          v126 = v132 & v125;
          v127 = (uint64_t *)(v122 + 16 * v126);
          v128 = *v127;
          if (v121 == *v127)
            goto LABEL_188;
        }
        if (v129)
          v133 = v129;
        else
          v133 = v127;
LABEL_187:
        v134 = sub_1C514C9E4((uint64_t)(v219 + 5), &v200, v133);
        *v134 = v121;
        v134[1] = v123;
      }
LABEL_188:
      v76 = v227;
LABEL_189:
      if (v76)
        continue;
      break;
    }
    v136 = (uint64_t)v219;
    v137 = (uint64_t *)v219[9];
    if ((unint64_t)v137 >= v219[10])
    {
      v139 = sub_1C514C418((char **)v219 + 8, (uint64_t *)&v201);
    }
    else
    {
      v138 = (uint64_t)v201;
      v201 = 0;
      *v137 = v138;
      v139 = (char *)(v137 + 1);
    }
    *(_QWORD *)(v136 + 72) = v139;
    v140 = v201;
    v201 = 0;
    if (v140)
    {
      v141 = (void *)v140[7];
      if (v141)
      {
        v140[8] = v141;
        operator delete(v141);
      }
      v229 = v140 + 4;
      sub_1C514C2A4((void ***)&v229);
      v142 = (_QWORD *)v140[1];
      if (v142 != v140 + 3)
        free(v142);
      MEMORY[0x1CAA32FC0](v140, 0x10A0C40B2354FA7);
    }
  }
  while (v43 != v199);
LABEL_210:
  v143 = (_QWORD **)v219[8];
  v197 = (_QWORD **)v219[9];
  if (v143 == v197)
    goto LABEL_326;
  while (2)
  {
    v144 = *v143;
    *v144 = 0;
    v211 = v215;
    v212 = v215;
    v213 = 8;
    v214 = 0;
    v217 = 0;
    v218 = 0;
    v216 = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v211, (uint64_t)v144);
    v145 = v217;
    v198 = v143;
    if (v217 < v218)
    {
      *(_QWORD *)v217 = v144;
      v145[8] = 0;
      v154 = v145 + 24;
      v145[16] = 0;
    }
    else
    {
      v146 = v216;
      v147 = 0xAAAAAAAAAAAAAAABLL * ((v217 - v216) >> 3);
      v148 = v147 + 1;
      if (v147 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_331;
      if (0x5555555555555556 * ((v218 - v216) >> 3) > v148)
        v148 = 0x5555555555555556 * ((v218 - v216) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v218 - v216) >> 3) >= 0x555555555555555)
        v149 = 0xAAAAAAAAAAAAAAALL;
      else
        v149 = v148;
      if (v149)
      {
        if (v149 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_332;
        v150 = (char *)operator new(24 * v149);
      }
      else
      {
        v150 = 0;
      }
      v151 = &v150[24 * v147];
      *(_QWORD *)v151 = v144;
      v151[8] = 0;
      v151[16] = 0;
      v152 = v151;
      if (v145 != v146)
      {
        do
        {
          v153 = *(_OWORD *)(v145 - 24);
          *((_QWORD *)v152 - 1) = *((_QWORD *)v145 - 1);
          *(_OWORD *)(v152 - 24) = v153;
          v152 -= 24;
          v145 -= 24;
        }
        while (v145 != v146);
        v145 = v216;
      }
      v154 = v151 + 24;
      v216 = v152;
      v217 = v151 + 24;
      v218 = &v150[24 * v149];
      if (v145)
        operator delete(v145);
    }
    v217 = v154;
    memset(v206, 0, sizeof(v206));
    v207 = 0;
    v204[0] = (uint64_t)&v206[2];
    v204[1] = (uint64_t)&v206[2];
    v205 = 8;
    v209 = 0;
    v210 = 0;
    v208 = 0;
    v245 = (int *)v250;
    v156 = (uint64_t)v211;
    v155 = v212;
    if (v212 == v211)
    {
      v246 = (uint64_t)v250;
      v157 = HIDWORD(v213);
      if (HIDWORD(v213))
        memmove(v250, v212, 8 * HIDWORD(v213));
      else
        v157 = 0;
      v158 = v155;
      v155 = v250;
    }
    else
    {
      v246 = (uint64_t)v212;
      v212 = v211;
      v158 = v211;
      v157 = HIDWORD(v213);
    }
    v159 = v213;
    v160 = v214;
    v247 = v213;
    v248 = v157;
    v249 = v214;
    v213 = 8;
    v214 = 0;
    v161 = v216;
    v162 = v218;
    v251 = v216;
    v252 = (uint64_t *)v154;
    v253 = (uint64_t *)v218;
    v217 = 0;
    v218 = 0;
    v216 = 0;
    v205 = 8;
    v206[0] = 0;
    v209 = 0;
    v210 = 0;
    v208 = 0;
    v229 = v233;
    if (v155 == v250)
    {
      v230 = v233;
      v155 = v233;
      if (v157)
      {
        memcpy(v233, v250, 8 * v157);
        v155 = v233;
      }
    }
    else
    {
      v230 = v155;
    }
    v231 = (void **)__PAIR64__(v157, v159);
    LODWORD(v232) = v160;
    v234 = v161;
    v235 = v154;
    v236 = v162;
    v237 = v241;
    v238 = v241;
    v239 = 8;
    v240 = 0;
    v243 = 0;
    v244 = 0;
    v163 = v233;
    __p = 0;
    if (v158 != (void *)v156)
    {
      free(v158);
      v155 = v230;
      v163 = v229;
    }
    v245 = (int *)v250;
    if (v155 == v163)
    {
      v246 = (uint64_t)v250;
      v164 = v250;
      v165 = v163;
    }
    else
    {
      v194 = (int)v231;
      v164 = malloc_type_malloc(8 * v231, 0x4065EBACuLL);
      if (!v164 && (v194 || (v164 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_325:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v246 = (uint64_t)v164;
      v165 = v229;
      v163 = v230;
    }
    v166 = HIDWORD(v231);
    v247 = (int)v231;
    if (v163 == v165)
      v167 = HIDWORD(v231);
    else
      v167 = v231;
    if (v167)
    {
      memmove(v164, v163, 8 * v167);
      v166 = HIDWORD(v231);
    }
    v248 = v166;
    v249 = (int)v232;
    v252 = 0;
    v253 = 0;
    v251 = 0;
    sub_1C4D6CDA0(&v251, v234, v235, 0xAAAAAAAAAAAAAAABLL * ((v235 - (_BYTE *)v234) >> 3));
    v211 = v215;
    v168 = v238;
    if (v238 == v237)
    {
      v212 = v215;
      v169 = v215;
      v170 = v238;
    }
    else
    {
      v195 = v239;
      v169 = malloc_type_malloc(8 * v239, 0x4065EBACuLL);
      if (!v169)
      {
        if (v195)
          goto LABEL_325;
        v169 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v169)
          goto LABEL_325;
      }
      v212 = v169;
      v170 = v237;
      v168 = v238;
    }
    v171 = HIDWORD(v239);
    LODWORD(v213) = v239;
    if (v168 == v170)
      v172 = HIDWORD(v239);
    else
      v172 = v239;
    if (v172)
    {
      memmove(v169, v168, 8 * v172);
      v171 = HIDWORD(v239);
    }
    HIDWORD(v213) = v171;
    v214 = v240;
    v217 = 0;
    v218 = 0;
    v216 = 0;
    sub_1C4D6CDA0(&v216, __p, v243, 0xAAAAAAAAAAAAAAABLL * ((v243 - (_BYTE *)__p) >> 3));
    v173 = v252;
LABEL_252:
    while (2)
    {
      if ((char *)v173 - v251 != v217 - v216)
      {
LABEL_266:
        v179 = (_DWORD *)*(v173 - 3);
        if (*(_QWORD *)v179)
          v180 = *(_DWORD *)(*(_QWORD *)v179 + 80) + 1;
        else
          v180 = 1;
        v179[20] = v180;
LABEL_270:
        v181 = *(v173 - 3);
        if (!*((_BYTE *)v173 - 8))
        {
          *(v173 - 2) = *(_QWORD *)(v181 + 32);
          *((_BYTE *)v173 - 8) = 1;
        }
        do
        {
          v182 = (uint64_t *)*(v173 - 2);
          if (v182 == *(uint64_t **)(v181 + 40))
          {
            v173 = v252 - 3;
            v252 = v173;
            if (v251 == (char *)v173)
              goto LABEL_252;
            goto LABEL_270;
          }
          *(v173 - 2) = (uint64_t)(v182 + 1);
          v183 = *v182;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v245, *v182);
        }
        while (!v184);
        v185 = v252;
        if (v252 < v253)
        {
          *v252 = v183;
          *((_BYTE *)v185 + 8) = 0;
          v173 = v185 + 3;
          *((_BYTE *)v185 + 16) = 0;
          goto LABEL_294;
        }
        v186 = v251;
        v187 = 0xAAAAAAAAAAAAAAABLL * (((char *)v252 - v251) >> 3);
        v188 = v187 + 1;
        if (v187 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_331;
        if (0x5555555555555556 * (((char *)v253 - v251) >> 3) > v188)
          v188 = 0x5555555555555556 * (((char *)v253 - v251) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v253 - v251) >> 3) >= 0x555555555555555)
          v189 = 0xAAAAAAAAAAAAAAALL;
        else
          v189 = v188;
        if (v189)
        {
          if (v189 <= 0xAAAAAAAAAAAAAAALL)
          {
            v190 = (char *)operator new(24 * v189);
            goto LABEL_289;
          }
LABEL_332:
          sub_1C4764EE4();
        }
        v190 = 0;
LABEL_289:
        v191 = &v190[24 * v187];
        *(_QWORD *)v191 = v183;
        v191[8] = 0;
        v191[16] = 0;
        v192 = v191;
        if (v185 != (uint64_t *)v186)
        {
          do
          {
            v193 = *(_OWORD *)(v185 - 3);
            *((_QWORD *)v192 - 1) = *(v185 - 1);
            *(_OWORD *)(v192 - 24) = v193;
            v192 -= 24;
            v185 -= 3;
          }
          while (v185 != (uint64_t *)v186);
          v185 = (uint64_t *)v251;
        }
        v173 = (uint64_t *)(v191 + 24);
        v251 = v192;
        v252 = (uint64_t *)(v191 + 24);
        v253 = (uint64_t *)&v190[24 * v189];
        if (v185)
          operator delete(v185);
LABEL_294:
        v252 = v173;
        continue;
      }
      break;
    }
    if (v251 != (char *)v173)
    {
      v174 = v216 + 8;
      v175 = v251 + 8;
      do
      {
        v176 = v175 - 8;
        if (*((_QWORD *)v175 - 1) != *((_QWORD *)v174 - 1))
          goto LABEL_266;
        v177 = v174[8];
        if (v175[8])
          v178 = v177 == 0;
        else
          v178 = 1;
        if (v178)
        {
          if ((v175[8] == 0) == (v177 != 0))
            goto LABEL_266;
        }
        else if (*(_QWORD *)v175 != *(_QWORD *)v174)
        {
          goto LABEL_266;
        }
        v174 += 24;
        v175 += 24;
      }
      while (v176 + 24 != (char *)v173);
    }
    if (v216)
    {
      v217 = v216;
      operator delete(v216);
    }
    if (v212 != v211)
      free(v212);
    if (v251)
    {
      v252 = (uint64_t *)v251;
      operator delete(v251);
    }
    if ((int *)v246 != v245)
      free((void *)v246);
    if (__p)
    {
      v243 = __p;
      operator delete(__p);
    }
    if (v238 != v237)
      free(v238);
    if (v234)
    {
      v235 = v234;
      operator delete(v234);
    }
    if (v230 != v229)
      free(v230);
    v143 = v198 + 1;
    if (v198 + 1 != v197)
      continue;
    break;
  }
LABEL_326:
  if (v226 != v228)
    free(v226);
  if (v223 != v225)
    free(v223);
  return MEMORY[0x1CAA32FB4](v220, 8);
}

{
  return __ZN4llvm16GenericCycleInfoINS_17GenericSSAContextINS_15MachineFunctionEEEE7computeERS2_(a1, a2);
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getFunction(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return v5[1];
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getCycleDepth(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 32);
  if (!(_DWORD)v3)
  {
LABEL_7:
    v5 = (uint64_t *)(v2 + 16 * v3);
    goto LABEL_8;
  }
  LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v5 = (uint64_t *)(v2 + 16 * v4);
  v6 = *v5;
  if (*v5 != a2)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  v9 = v5[1];
  if (!v9)
    return 0;
  else
    return *(unsigned int *)(v9 + 80);
}

{
  return __ZNK4llvm16GenericCycleInfoINS_17GenericSSAContextINS_15MachineFunctionEEEE13getCycleDepthEPKNS_17MachineBasicBlockE(a1, a2);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::getDepth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::getTopLevelParentCycle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v19;
  _BYTE v20[24];
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned int *)(a1 + 56);
  v4 = a2 >> 4;
  if ((_DWORD)v3)
  {
    LODWORD(v5) = (v3 - 1) & (v4 ^ (a2 >> 9));
    v6 = (uint64_t *)(v2 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v3 - 1);
      v7 = *(_QWORD *)(v2 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v2 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v6 != (uint64_t *)(v2 + 16 * v3))
    return v6[1];
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v11)
  {
    LODWORD(v12) = (v11 - 1) & (v4 ^ (a2 >> 9));
    v13 = (uint64_t *)(v10 + 16 * v12);
    v14 = *v13;
    if (*v13 == a2)
      goto LABEL_16;
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(_QWORD *)(v10 + 16 * v12);
      if (v14 == a2)
      {
        v13 = (uint64_t *)(v10 + 16 * v12);
        goto LABEL_16;
      }
    }
  }
  v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_16:
  if (v13 == (uint64_t *)(v10 + 16 * v11))
    return 0;
  v19 = (_QWORD *)v13[1];
  do
  {
    v17 = (uint64_t)v19;
    v19 = (_QWORD *)*v19;
  }
  while (v19);
  v21 = v17;
  sub_1C514AC20((uint64_t)v20, a1 + 40, &v22, &v21);
  return v17;
}

uint64_t *sub_1C514AC20(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *result;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  char v17;
  uint64_t *v18;

  v8 = *(_DWORD *)(a2 + 16);
  if (!v8)
  {
    v18 = 0;
LABEL_15:
    result = sub_1C514C9E4(a2, a3, v18);
    *result = *a3;
    result[1] = *a4;
    v9 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(a2 + 16);
    v17 = 1;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)a2;
  v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v8 - 1);
  result = (uint64_t *)(*(_QWORD *)a2 + 16 * v10);
  v12 = *result;
  if (*a3 != *result)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = result;
      v16 = v10 + v14++;
      v10 = v16 & (v8 - 1);
      result = (uint64_t *)(v9 + 16 * v10);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_11;
    }
    if (v13)
      v18 = v13;
    else
      v18 = result;
    goto LABEL_15;
  }
LABEL_11:
  v17 = 0;
LABEL_16:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a1 + 16) = v17;
  return result;
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::validateTree(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  const void *v4;
  _BYTE *v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  const void *v9;
  _BYTE *v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unsigned int v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  const char *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  _BYTE v88[64];
  void *__p;
  _BYTE *v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  _BYTE v97[64];
  void *v98;
  char *v99;
  uint64_t v100;
  void *v101;
  void *v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  void *v106;
  _BYTE *v107;
  void *v108;
  void *v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  void *v113;
  _BYTE *v114;
  _QWORD v115[2];
  int v116;
  _QWORD v117[2];
  int v118;

  v117[0] = 0;
  v117[1] = 0;
  v118 = 0;
  v115[0] = 0;
  v115[1] = 0;
  v116 = 0;
  v2 = *(uint64_t **)(a1 + 64);
  v3 = *(uint64_t **)(a1 + 72);
  if (v2 == v3)
  {
LABEL_139:
    v70 = *(_QWORD *)(a1 + 16);
    v71 = *(unsigned int *)(a1 + 32);
    v72 = (_QWORD *)(v70 + 16 * v71);
    if (*(_DWORD *)(a1 + 24))
    {
      if ((_DWORD)v71)
      {
        v73 = 16 * v71;
        v74 = *(_QWORD **)(a1 + 16);
        while ((*v74 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v74 += 2;
          v73 -= 16;
          if (!v73)
            goto LABEL_144;
        }
      }
      else
      {
        v74 = *(_QWORD **)(a1 + 16);
      }
    }
    else
    {
LABEL_144:
      v74 = (_QWORD *)(v70 + 16 * v71);
    }
    v75 = (_QWORD *)(v70 + 16 * v71);
LABEL_147:
    while (v74 != v75)
    {
      v76 = v74 + 1;
      while (1)
      {
        v76 = (_QWORD *)*v76;
        if (!v76)
          break;
        v77 = (_QWORD *)v76[7];
        v78 = (_QWORD *)v76[8];
        if (v77 != v78)
        {
          while (*v77 != *v74)
          {
            if (++v77 == v78)
            {
              v77 = (_QWORD *)v76[8];
              break;
            }
          }
        }
        if (v77 == v78)
        {
          sub_1C4DFA8B0((llvm *)0x1C1, "is_contained(Cycle->Blocks, Block)");
          goto LABEL_161;
        }
      }
      v79 = v74 + 2;
      v74 = v72;
      if (v79 != v72)
      {
        while ((*v79 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v79 += 2;
          if (v79 == v72)
          {
            v74 = v72;
            goto LABEL_147;
          }
        }
        v74 = v79;
      }
    }
    v80 = 1;
    goto LABEL_163;
  }
  while (2)
  {
    sub_1C61B1B68(&v101, *v2);
    v92 = v97;
    v4 = v102;
    if (v102 == v101)
    {
      v93 = v97;
      v5 = v97;
      v6 = v102;
    }
    else
    {
      v68 = v103;
      v5 = malloc_type_malloc(8 * v103, 0x4065EBACuLL);
      if (!v5 && (v68 || (v5 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_138:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v93 = v5;
      v6 = v101;
      v4 = v102;
    }
    v7 = v104;
    v94 = v103;
    if (v4 == v6)
      v8 = v104;
    else
      v8 = v103;
    if (v8)
    {
      memmove(v5, v4, 8 * v8);
      v7 = v104;
    }
    v95 = v7;
    v96 = v105;
    v99 = 0;
    v100 = 0;
    v98 = 0;
    sub_1C4D6CDA0(&v98, v106, v107, 0xAAAAAAAAAAAAAAABLL * ((v107 - (_BYTE *)v106) >> 3));
    v83 = v88;
    v9 = v109;
    if (v109 == v108)
    {
      v84 = v88;
      v10 = v88;
      v11 = v109;
    }
    else
    {
      v69 = v110;
      v10 = malloc_type_malloc(8 * v110, 0x4065EBACuLL);
      if (!v10)
      {
        if (v69)
          goto LABEL_138;
        v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v10)
          goto LABEL_138;
      }
      v84 = v10;
      v11 = v108;
      v9 = v109;
    }
    v12 = v111;
    v85 = v110;
    if (v9 == v11)
      v13 = v111;
    else
      v13 = v110;
    if (v13)
    {
      memmove(v10, v9, 8 * v13);
      v12 = v111;
    }
    v86 = v12;
    v87 = v112;
    v90 = 0;
    v91 = 0;
    __p = 0;
    sub_1C4D6CDA0(&__p, v113, v114, 0xAAAAAAAAAAAAAAABLL * ((v114 - (_BYTE *)v113) >> 3));
    while (2)
    {
      if (v99 - (_BYTE *)v98 == v90 - (_BYTE *)__p)
      {
        if (v98 == v99)
        {
LABEL_102:
          v65 = 1;
          goto LABEL_107;
        }
        v14 = (char *)__p + 8;
        v15 = (char *)v98 + 8;
        while (1)
        {
          v16 = v15 - 8;
          if (*((_QWORD *)v15 - 1) != *((_QWORD *)v14 - 1))
            break;
          v17 = v14[8];
          if (v15[8])
            v18 = v17 == 0;
          else
            v18 = 1;
          if (v18)
          {
            if ((v15[8] == 0) == (v17 != 0))
              break;
          }
          else if (*(_QWORD *)v15 != *(_QWORD *)v14)
          {
            break;
          }
          v14 += 24;
          v15 += 24;
          if (v16 + 24 == v99)
            goto LABEL_102;
        }
      }
      v19 = (uint64_t *)*((_QWORD *)v99 - 3);
      v20 = *v19;
      if (*v19)
      {
        v21 = *(uint64_t ***)(v20 + 32);
        v22 = *(uint64_t ***)(v20 + 40);
        while (1)
        {
          if (v21 == v22)
          {
            v66 = 416;
            v67 = "is_contained(Cycle->ParentCycle->children(), Cycle)";
            goto LABEL_106;
          }
          if (*v21 == v19)
            break;
          ++v21;
        }
      }
      v23 = (uint64_t *)v19[7];
      v24 = (uint64_t *)v19[8];
      while (v23 != v24)
      {
        v82 = 0;
        v25 = *v23;
        v82 = v25;
        v26 = *(_QWORD *)(a1 + 16);
        v27 = *(unsigned int *)(a1 + 32);
        v28 = v25 >> 4;
        if ((_DWORD)v27)
        {
          LODWORD(v29) = (v28 ^ (v25 >> 9)) & (v27 - 1);
          v30 = (uint64_t *)(v26 + 16 * v29);
          v31 = *v30;
          if (v25 == *v30)
            goto LABEL_45;
          v32 = 1;
          while (v31 != -4096)
          {
            v33 = v29 + v32++;
            v29 = v33 & (v27 - 1);
            v31 = *(_QWORD *)(v26 + 16 * v29);
            if (v25 == v31)
            {
              v30 = (uint64_t *)(v26 + 16 * v29);
              goto LABEL_45;
            }
          }
        }
        v30 = (uint64_t *)(v26 + 16 * v27);
LABEL_45:
        if (v30 == (uint64_t *)(v26 + 16 * v27))
        {
          v66 = 420;
          v67 = "MapIt != BlockMap.end()";
          goto LABEL_106;
        }
        v34 = (uint64_t *)v30[1];
        if (!v34)
          goto LABEL_101;
        v35 = *((_DWORD *)v19 + 20);
        v36 = *((_DWORD *)v34 + 20);
        if (v35 > v36)
          goto LABEL_101;
        if (v35 < v36)
        {
          do
            v34 = (uint64_t *)*v34;
          while (v35 < *((_DWORD *)v34 + 20));
        }
        if (v34 != v19)
        {
LABEL_101:
          v66 = 421;
          v67 = "Cycle->contains(MapIt->second)";
          goto LABEL_106;
        }
        if (v118)
        {
          v37 = (v118 - 1) & (v28 ^ (v25 >> 9));
          v38 = (_QWORD *)(v117[0] + 8 * v37);
          v39 = *v38;
          if (v25 == *v38)
          {
LABEL_132:
            v66 = 422;
            v67 = "Blocks.insert(Block).second";
            goto LABEL_106;
          }
          v40 = 0;
          v41 = 1;
          while (v39 != -4096)
          {
            if (v40)
              v42 = 0;
            else
              v42 = v39 == -8192;
            if (v42)
              v40 = v38;
            v43 = v37 + v41++;
            v37 = v43 & (v118 - 1);
            v38 = (_QWORD *)(v117[0] + 8 * v37);
            v39 = *v38;
            if (v25 == *v38)
              goto LABEL_132;
          }
          if (v40)
            v44 = v40;
          else
            v44 = v38;
        }
        else
        {
          v44 = 0;
        }
        v45 = sub_1C4A07FEC((uint64_t)v117, (uint64_t)&v82, &v82, v44);
        *v45 = v82;
        ++v23;
      }
      sub_1C514CB18(v117);
      v46 = *((unsigned int *)v19 + 4);
      if ((_DWORD)v46)
      {
        v47 = (uint64_t *)v19[1];
        v48 = &v47[v46];
        do
        {
          v82 = 0;
          v49 = *v47;
          v82 = *v47;
          if (v116)
          {
            v50 = ((v49 >> 4) ^ (v49 >> 9)) & (v116 - 1);
            v51 = (_QWORD *)(v115[0] + 8 * v50);
            v52 = *v51;
            if (v49 == *v51)
            {
LABEL_131:
              v66 = 428;
              v67 = "Entries.insert(Entry).second";
              goto LABEL_106;
            }
            v53 = 0;
            v54 = 1;
            while (v52 != -4096)
            {
              if (v53)
                v55 = 0;
              else
                v55 = v52 == -8192;
              if (v55)
                v53 = v51;
              v56 = v50 + v54++;
              v50 = v56 & (v116 - 1);
              v51 = (_QWORD *)(v115[0] + 8 * v50);
              v52 = *v51;
              if (v49 == *v51)
                goto LABEL_131;
            }
            if (v53)
              v57 = v53;
            else
              v57 = v51;
          }
          else
          {
            v57 = 0;
          }
          v58 = sub_1C4A07FEC((uint64_t)v115, (uint64_t)&v82, &v82, v57);
          *v58 = v82;
          v59 = (_QWORD *)v19[7];
          v60 = (_QWORD *)v19[8];
          if (v59 != v60)
          {
            while (*v59 != v82)
            {
              if (++v59 == v60)
              {
                v59 = (_QWORD *)v19[8];
                break;
              }
            }
          }
          if (v59 == v60)
          {
            v66 = 429;
            v67 = "is_contained(Cycle->Blocks, Entry)";
            goto LABEL_106;
          }
          ++v47;
        }
        while (v47 != v48);
        sub_1C514CB18(v115);
        v61 = v19[4];
        v62 = v19[5];
        if (v61 == v62)
        {
LABEL_99:
          sub_1C6187ED4((char *)&v92);
          continue;
        }
        v63 = 0;
        while (1)
        {
          v64 = *(_DWORD *)(*(_QWORD *)v61 + 80);
          if (v64 <= *((_DWORD *)v19 + 20))
            break;
          if (v63)
          {
            if (v63 != v64)
            {
              v66 = 439;
              v67 = "ChildDepth == Child->Depth";
              goto LABEL_106;
            }
          }
          else
          {
            v63 = *(_DWORD *)(*(_QWORD *)v61 + 80);
          }
          v61 += 8;
          if (v61 == v62)
            goto LABEL_99;
        }
        v66 = 435;
        v67 = "Child->Depth > Cycle->Depth";
      }
      else
      {
        v66 = 426;
        v67 = "!Cycle->Entries.empty()";
      }
      break;
    }
LABEL_106:
    sub_1C4DFA8B0((llvm *)v66, v67);
    v65 = 0;
LABEL_107:
    if (__p)
    {
      v90 = __p;
      operator delete(__p);
    }
    if (v84 != v83)
      free(v84);
    if (v98)
    {
      v99 = (char *)v98;
      operator delete(v98);
    }
    if (v93 != v92)
      free(v93);
    if (v113)
    {
      v114 = v113;
      operator delete(v113);
    }
    if (v109 != v108)
      free(v109);
    if (v106)
    {
      v107 = v106;
      operator delete(v106);
    }
    if (v102 != v101)
      free(v102);
    if ((v65 & 1) != 0)
    {
      if (++v2 == v3)
        goto LABEL_139;
      continue;
    }
    break;
  }
LABEL_161:
  v80 = 0;
LABEL_163:
  MEMORY[0x1CAA32FB4](v115[0], 8);
  MEMORY[0x1CAA32FB4](v117[0], 8);
  return v80;
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::toplevel_cycles(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::const_toplevel_iterator::operator*(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::children(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

BOOL llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::contains(uint64_t a1, uint64_t *a2)
{
  unsigned int v2;
  unsigned int v3;

  if (!a2)
    return 0;
  v2 = *(_DWORD *)(a1 + 80);
  v3 = *((_DWORD *)a2 + 20);
  if (v2 > v3)
    return 0;
  if (v2 < v3)
  {
    do
      a2 = (uint64_t *)*a2;
    while (v2 < *((_DWORD *)a2 + 20));
  }
  return a2 == (uint64_t *)a1;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::const_child_iterator::operator*(uint64_t a1)
{
  return **(_QWORD **)a1;
}

void llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::print(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  const void *v6;
  _BYTE *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  const void *v11;
  _BYTE *v12;
  void *v13;
  unsigned int v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t (***v25)();
  void (**v26)(uint64_t (***)());
  unsigned int v27;
  unsigned int v28;
  uint64_t *v29;
  _BYTE *v30;
  _BYTE v31[64];
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  _BYTE v40[64];
  void *__p;
  char *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  void *v49;
  _BYTE *v50;
  void *v51;
  void *v52;
  unsigned int v53;
  unsigned int v54;
  void *v55;
  _BYTE *v56;
  uint64_t (**v57)();
  uint64_t v58[2];
  uint64_t (***v59)();
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 64);
  v3 = *(uint64_t **)(a1 + 72);
  if (v2 == v3)
    return;
  v5 = a1;
  do
  {
    sub_1C61B1B68(&v44, *v2);
    v35 = v40;
    v6 = v45;
    if (v45 == v44)
    {
      v36 = v40;
      v7 = v40;
      v8 = v45;
    }
    else
    {
      v27 = v46;
      v7 = malloc_type_malloc(8 * v46, 0x4065EBACuLL);
      if (!v7 && (v27 || (v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_75:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v36 = v7;
      v8 = v44;
      v6 = v45;
    }
    v9 = v47;
    v37 = v46;
    if (v6 == v8)
      v10 = v47;
    else
      v10 = v46;
    if (v10)
    {
      memmove(v7, v6, 8 * v10);
      v9 = v47;
    }
    v38 = v9;
    v39 = v48;
    v42 = 0;
    v43 = 0;
    __p = 0;
    sub_1C4D6CDA0(&__p, v49, v50, 0xAAAAAAAAAAAAAAABLL * ((v50 - (_BYTE *)v49) >> 3));
    v11 = v52;
    if (v52 == v51)
    {
      v30 = v31;
      v12 = v31;
      v13 = v52;
    }
    else
    {
      v28 = v53;
      v12 = malloc_type_malloc(8 * v53, 0x4065EBACuLL);
      if (!v12)
      {
        if (v28)
          goto LABEL_75;
        v12 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v12)
          goto LABEL_75;
      }
      v30 = v12;
      v13 = v51;
      v11 = v52;
    }
    if (v11 == v13)
      v14 = v54;
    else
      v14 = v53;
    if (v14)
      memmove(v12, v11, 8 * v14);
    v33 = 0;
    v34 = 0;
    v32 = 0;
    sub_1C4D6CDA0(&v32, v55, v56, 0xAAAAAAAAAAAAAAABLL * ((v56 - (_BYTE *)v55) >> 3));
    while (1)
    {
      if (v42 - (_BYTE *)__p != v33 - v32)
        goto LABEL_32;
      if (__p == v42)
        break;
      v15 = v32 + 8;
      v16 = (char *)__p + 8;
      while (1)
      {
        v17 = v16 - 8;
        if (*((_QWORD *)v16 - 1) != *((_QWORD *)v15 - 1))
          break;
        v18 = v15[8];
        if (v16[8])
          v19 = v18 == 0;
        else
          v19 = 1;
        if (v19)
        {
          if ((v16[8] == 0) == (v18 != 0))
            break;
        }
        else if (*(_QWORD *)v16 != *(_QWORD *)v15)
        {
          break;
        }
        v15 += 24;
        v16 += 24;
        if (v17 + 24 == v42)
          goto LABEL_48;
      }
LABEL_32:
      v29 = v3;
      v20 = v5;
      v21 = *((_QWORD *)v42 - 3);
      if (*(_DWORD *)(v21 + 80))
      {
        v23 = 0;
        do
        {
          v24 = (_DWORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v24 > 3uLL)
          {
            *v24 = 538976288;
            *((_QWORD *)a2 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(a2, "    ", 4uLL);
          }
          ++v23;
        }
        while (v23 < *(_DWORD *)(v21 + 80));
      }
      v57 = &off_1E8144770;
      v58[0] = v21;
      v58[1] = v20;
      v59 = &v57;
      v5 = v20;
      sub_1C61EC380(v58, a2);
      v22 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v22 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 10);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v22 + 1;
        *v22 = 10;
      }
      v3 = v29;
      v25 = v59;
      if (v59 == &v57)
      {
        v26 = (void (**)(uint64_t (***)()))(v57 + 4);
        v25 = &v57;
      }
      else
      {
        if (!v59)
          goto LABEL_47;
        v26 = (void (**)(uint64_t (***)()))(*v59 + 5);
      }
      (*v26)(v25);
LABEL_47:
      sub_1C6187ED4((char *)&v35);
    }
LABEL_48:
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    if (v30 != v31)
      free(v30);
    if (__p)
    {
      v42 = (char *)__p;
      operator delete(__p);
    }
    if (v36 != v35)
      free(v36);
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    if (v52 != v51)
      free(v52);
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if (v45 != v44)
      free(v45);
    ++v2;
  }
  while (v2 != v3);
}

{
  __ZNK4llvm16GenericCycleInfoINS_17GenericSSAContextINS_15MachineFunctionEEEE5printERNS_11raw_ostreamE(a1, a2);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::print@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = &off_1E8144770;
  a3[1] = result;
  a3[2] = a2;
  a3[3] = a3;
  return result;
}

void llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::dump(llvm *a1)
{
  llvm *v2;

  v2 = llvm::dbgs(a1);
  llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::print((uint64_t)a1, v2);
}

_QWORD *llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::const_toplevel_iterator::const_toplevel_iterator(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::toplevel_begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::toplevel_end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::clear(uint64_t a1)
{
  uint64_t result;

  *(_DWORD *)(a1 + 16) = 0;
  result = sub_1C514C378(a1 + 32, *(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = 0;
  return result;
}

_DWORD *llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::appendEntry(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[4];
  if (v4 >= result[5])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 2), (uint64_t)(result + 6), v4 + 1, 8);
    LODWORD(v4) = v3[4];
  }
  *(_QWORD *)(*((_QWORD *)v3 + 1) + 8 * v4) = a2;
  ++v3[4];
  return result;
}

void llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::appendBlock(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[8];
  v4 = a1[9];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)a1[7];
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (_QWORD *)a1[7];
    }
    a1[7] = v13;
    a1[8] = v6;
    a1[9] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[8] = v6;
}

BOOL llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::isReducible(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 1;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::getHeader(uint64_t a1)
{
  return **(_QWORD **)(a1 + 8);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::getEntries(uint64_t a1)
{
  return a1 + 8;
}

BOOL llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::isEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = *(_QWORD **)(a1 + 8);
    while (*v5 != a2)
    {
      ++v5;
      v4 -= 8;
      if (!v4)
      {
        v5 = (_QWORD *)(v2 + 8 * v3);
        return v3 != ((uint64_t)v5 - v2) >> 3;
      }
    }
  }
  else
  {
    v5 = *(_QWORD **)(a1 + 8);
  }
  return v3 != ((uint64_t)v5 - v2) >> 3;
}

BOOL llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::contains(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 64);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_QWORD **)(a1 + 64);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::getParentCycle(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

void llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::getExitBlocks(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  a2[2] = 0;
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  if (v2 != v3)
  {
    v6 = 0;
    v7 = 0;
    v8 = (uint64_t)(a2 + 4);
    do
    {
      sub_1C514C6DC(a2, *(_QWORD *)a2 + 8 * v6, *(char **)(*(_QWORD *)v2 + 88), *(char **)(*(_QWORD *)v2 + 96));
      v6 = a2[2];
      v9 = v7;
      if (v7 < v6)
      {
        do
        {
          v10 = *(_QWORD **)a2;
          v11 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v9);
          v12 = *(_QWORD **)(a1 + 56);
          v13 = *(_QWORD **)(a1 + 64);
          if (v12 != v13)
          {
            while (*v12 != v11)
            {
              if (++v12 == v13)
              {
                v12 = *(_QWORD **)(a1 + 64);
                break;
              }
            }
          }
          if (v12 == v13)
          {
            v14 = &v10[v7];
            if (v7)
            {
              v15 = 8 * v7;
              v16 = *(_QWORD **)a2;
              while (*v16 != v11)
              {
                ++v16;
                v15 -= 8;
                if (!v15)
                {
                  v16 = &v10[v7];
                  break;
                }
              }
            }
            else
            {
              v16 = *(_QWORD **)a2;
            }
            if (v7 == v16 - v10)
            {
              ++v7;
              *v14 = v11;
            }
          }
          ++v9;
        }
        while (v9 != v6);
      }
      if (v7 != v6)
      {
        if (v7 >= v6)
        {
          if (v7 > a2[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, v8, v7, 8);
            v6 = a2[2];
          }
          if (v7 != v6)
            bzero((void *)(*(_QWORD *)a2 + 8 * v6), 8 * (v7 - v6));
        }
        v6 = v7;
        a2[2] = v7;
      }
      v2 += 8;
    }
    while (v2 != v3);
  }
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::blocks(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::getCyclePredecessor(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (*(_DWORD *)(a1 + 16) == 1)
  {
    v1 = **(_QWORD **)(a1 + 8);
    v2 = *(uint64_t **)(v1 + 64);
    v3 = *(uint64_t **)(v1 + 72);
    if (v2 != v3)
    {
      v4 = 0;
      v5 = *(_QWORD **)(a1 + 56);
      v6 = *(_QWORD **)(a1 + 64);
      while (1)
      {
        result = *v2;
        v8 = v5;
        if (v5 != v6)
        {
          while (*v8 != result)
          {
            if (++v8 == v6)
            {
              v8 = v6;
              break;
            }
          }
        }
        if (v8 == v6)
        {
          if (v4 && v4 != result)
            return 0;
        }
        else
        {
          result = v4;
        }
        ++v2;
        v4 = result;
        if (v2 == v3)
          return result;
      }
    }
  }
  return 0;
}

{
  return __ZNK4llvm12GenericCycleINS_17GenericSSAContextINS_15MachineFunctionEEEE19getCyclePredecessorEv(a1);
}

_QWORD *llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::const_child_iterator::const_child_iterator(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::child_begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::child_end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::getNumChildren(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::getNumBlocks(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 3;
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::getNumEntries(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::entries(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::printEntries@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = &off_1E8144728;
  a3[1] = result;
  a3[2] = a2;
  a3[3] = a3;
  return result;
}

uint64_t sub_1C514BE6C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Machine Cycle Info Analysis";
  *(_QWORD *)(v2 + 8) = 27;
  *(_QWORD *)(v2 + 16) = "machine-cycles";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &llvm::MachineCycleInfoWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::MachineCycleInfoWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::MachineCycleInfoWrapperPass::runOnMachineFunction(llvm::MachineCycleInfoWrapperPass *this, llvm::MachineFunction *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)((char *)this + 256);
  sub_1C514C378((uint64_t)this + 320, *((_QWORD **)this + 40));
  sub_1C5149628((_DWORD *)this + 68);
  sub_1C5149628((_DWORD *)this + 74);
  *((_QWORD *)this + 31) = a2;
  llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::MachineFunction>>::compute(v4, (uint64_t)a2);
  return 0;
}

_DWORD *llvm::MachineCycleInfoWrapperPass::releaseMemory(llvm::MachineCycleInfoWrapperPass *this)
{
  _DWORD *result;

  sub_1C514C378((uint64_t)this + 320, *((_QWORD **)this + 40));
  sub_1C5149628((_DWORD *)this + 68);
  result = sub_1C5149628((_DWORD *)this + 74);
  *((_QWORD *)this + 31) = 0;
  return result;
}

uint64_t sub_1C514BF9C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a1;
  v2 = atomic_load(&qword_1ED82F680);
  if (v2 != -1)
  {
    v7[0] = sub_1C514BE6C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82F680, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  v3 = operator new();
  *(_QWORD *)v3 = "Print Machine Cycle Info Analysis";
  *(_QWORD *)(v3 + 8) = 33;
  *(_QWORD *)(v3 + 16) = "print-machine-cycles";
  *(_QWORD *)(v3 + 24) = 20;
  *(_QWORD *)(v3 + 32) = &MachineCycleInfoPrinterPass::ID;
  *(_WORD *)(v3 + 40) = 257;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<MachineCycleInfoPrinterPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::isCycleInvariant(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *i;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  v5 = *(_QWORD **)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
  v9 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v9)
  {
    v10 = v8;
    v11 = *(int **)(a2 + 32);
    v12 = &v11[8 * v9];
    do
    {
      v13 = *v11;
      if (!*v11)
      {
        v14 = v11[1];
        if ((_DWORD)v14)
        {
          if (v14 >> 30)
          {
            if ((v13 & 0x1000000) == 0)
            {
              if ((v14 & 0x80000000) != 0)
                v15 = v5[3] + 16 * (v14 & 0x7FFFFFFF) + 8;
              else
                v15 = v5[34] + 8 * v14;
              v20 = *(_QWORD *)v15;
              if ((*(_BYTE *)(*(_QWORD *)v15 + 3) & 1) == 0)
                v20 = *(_QWORD *)(v20 + 24);
              v21 = *(_QWORD **)(a1 + 56);
              v22 = *(_QWORD **)(a1 + 64);
              if (v21 != v22)
              {
                v23 = *(_QWORD *)(*(_QWORD *)(v20 + 8) + 24);
                while (*v21 != v23)
                {
                  if (++v21 == v22)
                  {
                    v21 = *(_QWORD **)(a1 + 64);
                    break;
                  }
                }
              }
              if (v21 != v22)
                return 0;
            }
          }
          else if ((v13 & 0x1000000) != 0)
          {
            if ((~v13 & 0x5000000) != 0)
              return 0;
            v16 = *(unsigned int *)(a1 + 16);
            if ((_DWORD)v16)
            {
              v17 = *(_QWORD *)(a1 + 8);
              v18 = v17 + 8 * v16;
              do
              {
                for (i = *(unsigned __int16 **)(*(_QWORD *)v17 + 152);
                      i != *(unsigned __int16 **)(*(_QWORD *)v17 + 160);
                      i += 8)
                {
                  if (*i == (unsigned __int16)v14)
                  {
                    if (*((_QWORD *)i + 1))
                      return 0;
                    break;
                  }
                }
                v17 += 8;
              }
              while (v17 != v18);
            }
          }
          else if (!llvm::MachineRegisterInfo::isConstantPhysReg(v5, v11[1])
                 && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 128))(v7, v14, *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32)) & 1) == 0&& ((*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v10 + 24))(v10, v11) & 1) == 0)
          {
            return 0;
          }
        }
      }
      v11 += 8;
    }
    while (v11 != v12);
  }
  return 1;
}

