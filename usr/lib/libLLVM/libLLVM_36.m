uint64_t sub_1C568CBBC(uint64_t a1, uint64_t a2)
{
  llvm::AbstractAttribute *v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t result;
  char v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a1;
  v8 = 0;
  if (llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C568CD04, (uint64_t)v9, a1, 1, &v8))
  {
    if (!v8)
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a1 + 41);
  }
  else
  {
    v4 = sub_1C5681BD0(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1, 0, 0, 1);
    v5 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
      v5 = *(_QWORD *)(v5 + 24);
    if (*(_BYTE *)(v5 + 16))
    {
      if (*(_BYTE *)(v5 + 16) == 21)
        v6 = (unint64_t *)(v5 + 24);
      else
        v6 = (unint64_t *)(*(_QWORD *)(v5 + 40) + 56);
      v5 = *v6;
    }
    if ((*(unsigned int (**)(llvm::AbstractAttribute *, uint64_t, unint64_t))(*(_QWORD *)v4 + 112))(v4, a2, v5))
    {
      result = 0;
      *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
      return result;
    }
  }
  return 1;
}

uint64_t *sub_1C568CCA4(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C568CCBC(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C568CD04(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  v3 = *a2;
  v6 = *a2;
  v7[0] = &v8;
  v7[1] = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)v7, (uint64_t)(a2 + 1));
    v3 = v6;
  }
  v4 = *((unsigned __int8 *)sub_1C568100C(*a1, *(_QWORD *)(*(_QWORD *)(v3 + 40) + 56), 0, a1[1], 2, 0, 1) + 40);
  if (v7[0] != &v8)
    free(v7[0]);
  return v4 != 0;
}

_QWORD *sub_1C568CD94(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C568CDC8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C568CE0C(_BYTE *a1, uint64_t a2)
{
  unint64_t result;

  sub_1C628BE28((uint64_t)a1, a2);
  result = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if (!result)
    goto LABEL_8;
  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
LABEL_8:
      a1[41] = a1[40];
  }
  else if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    goto LABEL_8;
  }
  return result;
}

void sub_1C568CE78()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3058);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3058))
      __cxa_guard_release(&qword_1EF8F3058);
  }
}

uint64_t sub_1C568CEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  v5 = sub_1C568100C(a2, v4, 0, v3, 0, 0, 1);
  v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
  v7 = *(_QWORD *)(v3 + 32);
  v3 += 32;
  LODWORD(a2) = *(_BYTE *)(v3 + 9) == 0;
  (*(void (**)(uint64_t, _QWORD))(v7 + 48))(v3, *(unsigned __int8 *)(v6 + 9));
  return a2 ^ (*(_BYTE *)(v3 + 9) != 0);
}

uint64_t *sub_1C568CF3C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C568CF54(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C568CF9C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C568CFD0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C568D014(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  const llvm::Loop **v10;
  BOOL v11;
  uint64_t ResultImpl;
  const llvm::LoopInfo *v13;
  uint64_t v14;
  const llvm::Loop **v15;
  uint64_t v16;
  const llvm::Loop *v17;
  int SmallConstantMaxTripCount;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  sub_1C628C280(a1, a2);
  if (sub_1C568D450((llvm::IRPosition *)a1, a2, 1))
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v4 = *(_QWORD *)(v4 + 24);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (!*(_BYTE *)(v4 + 16))
  {
LABEL_15:
    if (*(_QWORD *)(v4 + 72) == v4 + 72 && (*(_BYTE *)(v4 + 34) & 0x80) == 0)
      goto LABEL_41;
    goto LABEL_17;
  }
  if (v5 == 21)
  {
    v6 = (unint64_t *)(v4 + 24);
  }
  else
  {
    if (v5 < 0x1C)
    {
LABEL_41:
      *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
      return;
    }
    v6 = (unint64_t *)(*(_QWORD *)(v4 + 40) + 56);
  }
  v4 = *v6;
  if (!*v6)
    goto LABEL_41;
  if (!*(_BYTE *)(v4 + 16))
    goto LABEL_15;
  if (*(_BYTE *)(v4 + 16) == 3 && (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 0)
    goto LABEL_41;
LABEL_17:
  v7 = **(_QWORD **)(*(_QWORD *)(a2 + 88) + 440);
  v8 = *(_QWORD *)(v4 + 40);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = (const llvm::Loop **)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v7, &llvm::ScalarEvolutionAnalysis::Key, v4)+ 8);
    v7 = **(_QWORD **)(*(_QWORD *)(a2 + 88) + 440);
    v8 = *(_QWORD *)(v4 + 40);
  }
  if (v7)
    v11 = v8 == 0;
  else
    v11 = 1;
  if (v11
    || (ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(v7, &llvm::LoopAnalysis::Key, v4), !v10))
  {
    v21 = *(_QWORD *)(v4 + 80);
    if (v21)
      v22 = v21 - 24;
    else
      v22 = 0;
    LODWORD(v23) = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    sub_1C61896F4((int *)&v23, v22);
    while (1)
    {
      sub_1C4DFE698(&v23);
      if (*((_QWORD *)&v28 + 1) == (_QWORD)v29)
        break;
      if (sub_1C628C378(*((uint64_t **)&v28 + 1), v29))
      {
        sub_1C617D7D4(&v23);
        goto LABEL_41;
      }
    }
    sub_1C617D7D4(&v23);
  }
  else
  {
    v14 = ResultImpl + 8;
    if ((llvm::mayContainIrreducibleControl((llvm *)v4, (const llvm::Function *)(ResultImpl + 8), v13) & 1) != 0)
      goto LABEL_41;
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::getLoopsInPreorder(v14, (uint64_t)&v23);
    v15 = (const llvm::Loop **)v23;
    if ((_DWORD)v24)
    {
      v16 = 8 * v24 - 8;
      do
      {
        v17 = *v15++;
        SmallConstantMaxTripCount = llvm::ScalarEvolution::getSmallConstantMaxTripCount(v10, v17);
        v19 = SmallConstantMaxTripCount != 0;
        if (SmallConstantMaxTripCount)
          v20 = v16 == 0;
        else
          v20 = 1;
        v16 -= 8;
      }
      while (!v20);
      v15 = (const llvm::Loop **)v23;
    }
    else
    {
      v19 = 1;
    }
    if (v15 != (const llvm::Loop **)&v25)
      free(v15);
    if (!v19)
      goto LABEL_41;
  }
}

void *sub_1C568D278@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "willreturn";
  else
    v3 = "may-noreturn";
  if (*(_BYTE *)(a1 + 41))
    v4 = 10;
  else
    v4 = 12;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

void sub_1C568D2D0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3060);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3060))
      __cxa_guard_release(&qword_1EF8F3060);
  }
}

uint64_t sub_1C568D310(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char v6;
  _QWORD v7[2];
  int *v8[2];
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((sub_1C568D450((llvm::IRPosition *)a1, a2, 0) & 1) != 0)
    return 1;
  v7[0] = a2;
  v7[1] = a1;
  v9 = 0xB00000005;
  v10 = 56;
  v8[0] = (int *)&v9;
  v8[1] = (int *)3;
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 2));
  if ((llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C568D588, (uint64_t)v7, v4, (uint64_t)a1, v8, &v6, 0, 0) & 1) != 0)return 1;
  else
    return (*(uint64_t (**)(_QWORD *))(a1[4] + 40))(a1 + 4);
}

uint64_t *sub_1C568D3F0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C568D408(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C568D450(llvm::IRPosition *this, uint64_t a2, int a3)
{
  llvm::IRPosition *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t result;
  uint64_t v15;
  int v16;
  char v17;

  v6 = (llvm::IRPosition *)((char *)this + 16);
  v7 = *((_QWORD *)this + 2) & 3;
  v8 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFFCLL;
  v9 = v8;
  if (v7 == 3)
    v9 = *(_QWORD *)(v8 + 24);
  v10 = *(unsigned __int8 *)(v9 + 16);
  if (!*(_BYTE *)(v9 + 16))
  {
LABEL_9:
    if (v7 == 3)
      v8 = *(_QWORD *)(v8 + 24);
    if (*(_BYTE *)(v8 + 16))
    {
      if (*(_BYTE *)(v8 + 16) == 21)
        v12 = (unint64_t *)(v8 + 24);
      else
        v12 = (unint64_t *)(*(_QWORD *)(v8 + 40) + 56);
      v8 = *v12;
    }
    v13 = *(_QWORD *)(v8 + 112);
    if (v13 && ((*(_BYTE *)(v13 + 14) & 1) != 0 || (*(_BYTE *)(v13 + 20) & 2) != 0))
      goto LABEL_24;
    goto LABEL_19;
  }
  if (v10 == 21)
  {
    v11 = (_QWORD *)(v9 + 24);
  }
  else
  {
    if (v10 < 0x1C)
      goto LABEL_19;
    v11 = (_QWORD *)(*(_QWORD *)(v9 + 40) + 56);
  }
  if (*v11)
    goto LABEL_9;
LABEL_19:
  result = sub_1C5676C10((llvm::IRPosition *)((char *)this + 16));
  if (!result)
    return result;
  v15 = *(_QWORD *)(sub_1C5676C10(v6) + 112);
  if (!v15 || (*(_BYTE *)(v15 + 14) & 1) == 0 && (*(_BYTE *)(v15 + 20) & 2) == 0)
    return 0;
LABEL_24:
  v17 = 0;
  v16 = sub_1C5675BDC(a2, (uint64_t *)v6, (uint64_t)this, 0, &v17);
  result = 0;
  if (v16)
  {
    if (v17)
      return 1;
    else
      return a3 ^ 1u;
  }
  return result;
}

BOOL sub_1C568D588(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::AbstractAttribute *v6;

  v4 = a1[1];
  v5 = 1;
  v6 = sub_1C5685BDC(*a1, a2, 0, v4, 0, 0, 1);
  if (!*((_BYTE *)v6 + 40))
    return *((_BYTE *)v6 + 41) && *((_BYTE *)sub_1C568100C(*a1, a2, 0, v4, 0, 0, 1) + 41) != 0;
  return v5;
}

_QWORD *sub_1C568D618(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C568D64C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C568D690(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_1C628C280(a1, a2);
  if (sub_1C568D450((llvm::IRPosition *)a1, a2, 1))
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
  result = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if (!result || (result = sub_1C62873F8(a2, (llvm::GlobalValue *)result), (result & 1) == 0))
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
  return result;
}

void sub_1C568D700()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3068);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3068))
      __cxa_guard_release(&qword_1EF8F3068);
  }
}

uint64_t sub_1C568D740(_QWORD *a1, uint64_t a2)
{
  unint64_t v5;
  llvm::AbstractAttribute *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BOOL4 v10;

  if ((sub_1C568D450((llvm::IRPosition *)a1, a2, 0) & 1) != 0)
    return 1;
  v5 = sub_1C5676C10((llvm::IRPosition *)(a1 + 2));
  v6 = sub_1C5685BDC(a2, v5, 0, (uint64_t)a1, 0, 0, 1);
  v7 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v6 + 48))(v6);
  v9 = a1[4];
  v8 = a1 + 4;
  v10 = *((_BYTE *)v8 + 9) == 0;
  (*(void (**)(_QWORD *, _QWORD))(v9 + 48))(v8, *(unsigned __int8 *)(v7 + 9));
  return v10 ^ (*((_BYTE *)v8 + 9) != 0);
}

uint64_t *sub_1C568D7D8(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C568D7F0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C568D838(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C568D86C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C568D8B0(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_1C628C5D0(a1, a2);
  result = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if (!result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  }
  else if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  }
  return result;
}

void *sub_1C568D92C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "noreturn";
  else
    v3 = "may-return";
  if (*(_BYTE *)(a1 + 41))
    v4 = 8;
  else
    v4 = 10;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

void sub_1C568D984()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3070);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3070))
      __cxa_guard_release(&qword_1EF8F3070);
  }
}

uint64_t sub_1C568D9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v7;
  int *v8[2];
  char v9;
  char v10;

  v4 = 1;
  v7 = 1;
  v8[0] = &v7;
  v8[1] = (int *)1;
  v5 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if ((llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C568DAB8, (uint64_t)&v10, v5, a1, v8, &v9, 0, 0) & 1) == 0)return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  return v4;
}

uint64_t *sub_1C568DA58(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C568DA70(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C568DAB8()
{
  return 0;
}

_QWORD *sub_1C568DAC0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C568DAF4(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C568DB38(_BYTE *a1, uint64_t a2)
{
  uint64_t result;

  sub_1C568D8B0((uint64_t)a1, a2);
  result = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if (result)
  {
    result = (uint64_t)sub_1C5686A64(a2, result, 0, (uint64_t)a1, 0, 0, 1);
    if (!*(_BYTE *)(result + 41))
      a1[41] = a1[40];
  }
  return result;
}

void sub_1C568DB98()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3078);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3078))
      __cxa_guard_release(&qword_1EF8F3078);
  }
}

uint64_t sub_1C568DBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  v5 = sub_1C5686A64(a2, v4, 0, v3, 0, 0, 1);
  v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
  v7 = *(_QWORD *)(v3 + 32);
  v3 += 32;
  LODWORD(a2) = *(_BYTE *)(v3 + 9) == 0;
  (*(void (**)(uint64_t, _QWORD))(v7 + 48))(v3, *(unsigned __int8 *)(v6 + 9));
  return a2 ^ (*(_BYTE *)(v3 + 9) != 0);
}

uint64_t *sub_1C568DC5C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C568DC74(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C568DCBC(_QWORD *a1)
{
  *a1 = off_1E8173478;
  a1[4] = &unk_1E8173540;
  sub_1C628C86C((uint64_t)(a1 + 5));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C568DD10(_QWORD *a1)
{
  *a1 = off_1E8173478;
  a1[4] = &unk_1E8173540;
  sub_1C628C86C((uint64_t)(a1 + 5));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C568DD74(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_WORD *)(a1 + 88) = 256;
  v4 = (_QWORD *)(a1 + 40);
  sub_1C5015F50((_DWORD *)(a1 + 40));
  sub_1C568E484((char **)(a1 + 64));
  v5 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if (!v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  v6 = v5;
  if (*(_BYTE *)(v5 + 16))
  {
    if (*(_BYTE *)(v5 + 16) != 3 || (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) != 0)
      goto LABEL_9;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  }
  if (*(_QWORD *)(v5 + 72) == v5 + 72 && (*(_BYTE *)(v5 + 34) & 0x80) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
LABEL_9:
  v8 = (uint64_t *)sub_1C6285788(*(uint64_t **)(a2 + 88), (const llvm::Function *)v5);
  if ((*(_WORD *)(v6 + 18) & 1) == 0)
  {
    v9 = *(_QWORD *)(v6 + 88);
LABEL_11:
    v10 = v9;
    goto LABEL_12;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)v6);
  v9 = *(_QWORD *)(v6 + 88);
  if ((*(_WORD *)(v6 + 18) & 1) == 0)
    goto LABEL_11;
  v21 = *(_QWORD *)(v6 + 88);
  llvm::Function::BuildLazyArguments((llvm::Function *)v6);
  v9 = v21;
  v10 = *(_QWORD *)(v6 + 88);
LABEL_12:
  v11 = v10 + 40 * *(_QWORD *)(v6 + 96);
  while (v9 != v11)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 112);
    if (v12)
    {
      v13 = *(_DWORD *)(v9 + 32) + 2;
      if (v13 < *(_DWORD *)(v12 + 8))
      {
        v14 = *(_QWORD *)(v12 + 8 * v13 + 40);
        if (v14)
        {
          if ((*(_BYTE *)(v14 + 17) & 0x40) != 0)
          {
            v22 = v9;
            v15 = sub_1C568E4F0(v4, &v22);
            LODWORD(v22) = 1;
            v16 = sub_1C5682184(v8, &v22);
            if (v16)
            {
              v17 = *(unsigned int *)(v16 + 8);
              if ((_DWORD)v17)
              {
                v18 = *(uint64_t **)v16;
                v19 = 8 * v17;
                do
                {
                  v20 = *v18++;
                  v22 = v20;
                  sub_1C628C8B4(v15, &v22);
                  v19 -= 8;
                }
                while (v19);
              }
            }
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
          }
        }
      }
    }
    v9 += 40;
  }
  result = sub_1C62873F8(a2, (llvm::GlobalValue *)v6);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  return result;
}

uint64_t sub_1C568DF4C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C568DF54(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C568DF5C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v4;
  unint64_t v5;
  const std::string::value_type *v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string v10;
  std::string v11;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
    std::to_string(&v10, v5);
  }
  else
  {
    *((_BYTE *)&v10.__r_.__value_.__s + 23) = 1;
    LOWORD(v10.__r_.__value_.__l.__data_) = 63;
  }
  if (v4)
    v6 = "returns(#";
  else
    v6 = "may-return(#";
  v7 = std::string::insert(&v10, 0, v6);
  v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v11, ")");
  *a2 = *v9;
  v9->__r_.__value_.__r.__words[0] = 0;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

uint64_t sub_1C568E060(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unsigned __int8 v8;
  llvm::Type *v9;
  unint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = atomic_load((unsigned __int8 *)&qword_1ED809AF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED809AF0))
    __cxa_guard_release(&qword_1ED809AF0);
  LOBYTE(v13) = 0;
  v14 = 0;
  v5 = **(_QWORD **)(*(_QWORD *)(sub_1C5676C10((llvm::IRPosition *)(a1 + 16)) + 24) + 16);
  v11[0] = &v13;
  v11[1] = &v12;
  v12 = v5;
  if ((llvm::Attributor::checkForAllReturnedValues(a2, (uint64_t)sub_1C568E7D0, (uint64_t)v11, a1) & 1) == 0)
    return 1;
  result = 1;
  if (v14)
  {
    v7 = v13;
    if (v13)
    {
      v8 = atomic_load((unsigned __int8 *)&qword_1ED809AF8);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED809AF8))
        __cxa_guard_release(&qword_1ED809AF8);
      if (*(_BYTE *)(v7 + 16) == 21)
      {
        v9 = *(llvm::Type **)v7;
        v10 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
        if (llvm::Type::canLosslesslyBitCastTo(v9, **(llvm::Type ***)(*(_QWORD *)(v10 + 24) + 16)))
        {
          *(_QWORD *)(a1 + 16) = v7;
          *(_QWORD *)(a1 + 24) = 0;
          return sub_1C628C768(a1, a2);
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_1C568E1A0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3080);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3080))
      __cxa_guard_release(&qword_1EF8F3080);
  }
}

uint64_t sub_1C568E1E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v6;
  int *v7[2];
  _QWORD v8[4];
  char v9;
  _QWORD v10[2];
  unsigned int v11;

  v11 = 1;
  v10[0] = a1;
  v10[1] = &v11;
  v9 = 0;
  v8[2] = v10;
  v8[3] = &v9;
  v6 = 1;
  v7[0] = &v6;
  v7[1] = (int *)1;
  v8[0] = a2;
  v8[1] = a1;
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if ((llvm::Attributor::checkForAllInstructions(a2, sub_1C568E838, (uint64_t)v8, v4, a1, v7, &v9, 0, 0) & 1) != 0)
    return v11;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
}

uint64_t sub_1C568E294(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, _QWORD *), uint64_t a3)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 160))(a1);
  if ((_DWORD)result)
  {
    v8 = (uint64_t *)a1[8];
    v7 = (uint64_t *)a1[9];
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      do
      {
        v9 = v8 + 1;
        v10 = *v8;
        v8 += 12;
        result = a2(a3, v10, v9);
        if ((_DWORD)result)
          v11 = v8 == v7;
        else
          v11 = 1;
      }
      while (!v11);
    }
  }
  return result;
}

uint64_t sub_1C568E300(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_1C568E30C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

unint64_t sub_1C568E318(_QWORD *a1)
{
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 160))(a1))
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[9] - a1[8]) >> 5);
  else
    return -1;
}

uint64_t sub_1C568E364(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

uint64_t sub_1C568E36C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 89);
}

uint64_t sub_1C568E374(uint64_t a1)
{
  *(_BYTE *)(a1 + 88) = 1;
  return 1;
}

uint64_t sub_1C568E384(uint64_t a1)
{
  *(_WORD *)(a1 + 88) = 1;
  return 0;
}

uint64_t *sub_1C568E394(_QWORD *a1)
{
  *(a1 - 4) = off_1E8173478;
  *a1 = &unk_1E8173540;
  sub_1C628C86C((uint64_t)(a1 + 1));
  *(a1 - 4) = &unk_1E8172998;
  return sub_1C6286C70(a1 - 3);
}

void sub_1C568E3DC(_QWORD *a1)
{
  _QWORD *v2;

  *(a1 - 4) = off_1E8173478;
  v2 = a1 - 4;
  *a1 = &unk_1E8173540;
  sub_1C628C86C((uint64_t)(a1 + 1));
  *v2 = &unk_1E8172998;
  sub_1C6286C70(a1 - 3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C568E444(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 57);
}

uint64_t sub_1C568E44C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t sub_1C568E454(uint64_t a1)
{
  *(_BYTE *)(a1 + 56) = 1;
  return 1;
}

uint64_t sub_1C568E464(uint64_t a1)
{
  *(_WORD *)(a1 + 56) = 1;
  return 0;
}

void sub_1C568E484(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 32;
    do
    {
      v5 = (char *)*((_QWORD *)v4 - 2);
      if (v4 != v5)
        free(v5);
      if ((*(v4 - 56) & 1) == 0)
        MEMORY[0x1CAA32FB4](*((_QWORD *)v4 - 6), 8);
      v6 = v4 - 64;
      v4 -= 96;
    }
    while (v6 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_1C568E4F0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int64x2_t v31;
  int64x2_t v32;
  void *v33[2];
  _OWORD v34[2];
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  _QWORD v39[5];

  v39[4] = *MEMORY[0x1E0C80C00];
  v28 = *a2;
  v29 = 0;
  sub_1C6245320((uint64_t)a1, &v28, &v29, (uint64_t)&v26);
  v4 = v26;
  if (v27)
  {
    memset(v34, 0, sizeof(v34));
    v30 = 1;
    v31 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v32 = v31;
    v33[0] = v34;
    v33[1] = (void *)0x400000000;
    v35 = *a2;
    sub_1C61ACAFC((uint64_t)&v36, (unsigned int *)&v30);
    v9 = (uint64_t *)a1[4];
    v8 = a1[5];
    if ((unint64_t)v9 >= v8)
    {
      v11 = a1[3];
      v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v11) >> 5);
      v13 = v12 + 1;
      if (v12 + 1 > 0x2AAAAAAAAAAAAAALL)
        abort();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v11) >> 5);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x155555555555555)
        v15 = 0x2AAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 > 0x2AAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v16 = (char *)operator new(96 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (uint64_t *)&v16[96 * v12];
      v18 = &v16[96 * v15];
      *v17 = v35;
      v10 = v17 + 12;
      sub_1C61ACAFC((uint64_t)(v17 + 1), &v36);
      v20 = (unsigned int *)a1[3];
      v19 = (unsigned int *)a1[4];
      if (v19 == v20)
      {
        a1[3] = v17;
        a1[4] = v10;
        a1[5] = v18;
      }
      else
      {
        do
        {
          v21 = *((_QWORD *)v19 - 12);
          v19 -= 24;
          *(v17 - 12) = v21;
          v17 -= 12;
          sub_1C61ACAFC((uint64_t)(v17 + 1), v19 + 2);
        }
        while (v19 != v20);
        v19 = (unsigned int *)a1[3];
        v22 = (unsigned int *)a1[4];
        a1[3] = v17;
        a1[4] = v10;
        a1[5] = v18;
        if (v22 != v19)
        {
          v23 = v22 - 8;
          do
          {
            v24 = (unsigned int *)*((_QWORD *)v23 - 2);
            if (v23 != v24)
              free(v24);
            if ((*(_BYTE *)(v23 - 14) & 1) == 0)
              MEMORY[0x1CAA32FB4](*((_QWORD *)v23 - 6), 8);
            v25 = v23 - 16;
            v23 -= 24;
          }
          while (v25 != v19);
        }
      }
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v9 = v35;
      v10 = v9 + 12;
      sub_1C61ACAFC((uint64_t)(v9 + 1), &v36);
    }
    a1[4] = v10;
    if (v38 != v39)
      free(v38);
    if ((v36 & 1) == 0)
      MEMORY[0x1CAA32FB4](v37, 8);
    if (v33[0] != v34)
      free(v33[0]);
    if ((v30 & 1) == 0)
      MEMORY[0x1CAA32FB4](v31.i64[0], 8);
    v6 = a1[3];
    v5 = -1431655765 * ((unint64_t)(a1[4] - v6) >> 5) - 1;
    *(_DWORD *)(v4 + 8) = v5;
  }
  else
  {
    v5 = *(_DWORD *)(v26 + 8);
    v6 = a1[3];
  }
  return v6 + 96 * v5 + 8;
}

BOOL sub_1C568E7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  llvm::ConstantExpr *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v8 = a2;
  v3 = 1;
  v9 = 1;
  v4 = llvm::AA::combineOptionalValuesInAAValueLatice(*(unsigned __int8 **)a1, (uint64_t)&v8, **(llvm::Value ***)(a1 + 8));
  v5 = *(unsigned __int8 **)a1;
  *(_QWORD *)v5 = v4;
  *((_QWORD *)v5 + 1) = v6;
  if (*(_BYTE *)(*(_QWORD *)a1 + 8))
    return **(_QWORD **)a1 != 0;
  return v3;
}

uint64_t sub_1C568E838(uint64_t a1, uint64_t a2)
{
  llvm::Attributor *v2;
  const llvm::AbstractAttribute *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  BOOL *v10;
  uint64_t i;
  unint64_t v12;
  int v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  BOOL v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t AssumedSimplified;
  char v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  llvm::UndefValue *AssumedConstant;
  char v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  __int128 v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  int64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  llvm::AbstractAttribute **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  int v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v102;
  _BYTE *v103;
  const llvm::AbstractAttribute *v104;
  _DWORD **v105;
  int64x2_t v107;
  unint64_t v108;
  BOOL *v109;
  unint64_t v110[2];
  _QWORD v111[2];
  uint64_t v112;
  int v113;
  uint64_t v114;
  int64x2_t v115;
  int64x2_t v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[32];
  uint64_t v120;
  int64x2_t v121;
  int64x2_t v122;
  void *v123;
  uint64_t v124;
  _BYTE v125[32];
  void *v126;
  unsigned int v127;
  unsigned int v128;
  _QWORD v129[32];
  void *v130[2];
  _QWORD v131[33];
  _QWORD *v132[2];
  _QWORD v133[9];
  void *v134;
  uint64_t v135;
  _QWORD v136[14];

  v136[12] = *MEMORY[0x1E0C80C00];
  v2 = *(llvm::Attributor **)a1;
  v3 = *(const llvm::AbstractAttribute **)(a1 + 8);
  v4 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 != 21)
  {
    if (v5 < 0x1C)
    {
      if (!*(_BYTE *)(v4 + 16))
        v4 |= 2uLL;
    }
    else
    {
      v6 = v5 - 33;
      v7 = v6 > 0x33;
      v8 = (1 << v6) & 0x8000000000041;
      if (!v7 && v8 != 0)
        v4 |= 1uLL;
    }
  }
  v10 = *(BOOL **)(a1 + 24);
  v105 = *(_DWORD ***)(a1 + 16);
  v111[0] = v4;
  v111[1] = 0;
  v133[0] = 1;
  for (i = 1; i != 9; i += 2)
    v133[i] = -4096;
  v134 = v136;
  v135 = 0x400000000;
  v12 = sub_1C6284150((llvm::IRPosition *)v111);
  v13 = 0;
  v130[0] = v131;
  v130[1] = (void *)0x1000000000;
  v132[1] = 0;
  v132[0] = 0;
  v131[32] = v132;
  v126 = v129;
  v128 = 16;
  v129[0] = v12;
  v129[1] = a2;
  v104 = v3;
  v109 = v10;
  v108 = v12;
  v107 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v14 = 1;
  while (1)
  {
    v15 = (char *)v126 + 16 * v14;
    v17 = *((_QWORD *)v15 - 2);
    v16 = *((_QWORD *)v15 - 1);
    v127 = v14 - 1;
    v110[0] = v17;
    v110[1] = v16;
    if ((sub_1C568F35C((uint64_t)v130, v110) & 0x100000000) == 0)
      goto LABEL_79;
    if (v13 >= 16)
      goto LABEL_170;
    ++v13;
    if (*(_BYTE *)(*(_QWORD *)v17 + 8) == 15)
    {
      v18 = llvm::Value::stripPointerCasts((llvm::Value *)v17);
      goto LABEL_17;
    }
    v22 = *(unsigned __int8 *)(v17 + 16);
    if (v22 < 0x1C)
      goto LABEL_32;
    v23 = v22 - 33;
    v7 = v23 > 0x33;
    v24 = (1 << v23) & 0x8000000000041;
    if (v7 || v24 == 0)
      goto LABEL_32;
    v26 = *(_QWORD *)(v17 - 32);
    if (!v26 || *(_BYTE *)(v26 + 16) || *(_QWORD *)(v26 + 24) != *(_QWORD *)(v17 + 72))
      goto LABEL_32;
    if ((*(_WORD *)(v26 + 18) & 1) == 0)
    {
      v69 = *(_QWORD *)(v26 + 88);
LABEL_111:
      v70 = v69;
      goto LABEL_112;
    }
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(v17 - 32));
    v69 = *(_QWORD *)(v26 + 88);
    if ((*(_WORD *)(v26 + 18) & 1) == 0)
      goto LABEL_111;
    llvm::Function::BuildLazyArguments((llvm::Function *)v26);
    v70 = *(_QWORD *)(v26 + 88);
LABEL_112:
    v71 = v70 + 40 * *(_QWORD *)(v26 + 96);
    while (1)
    {
      if (v69 == v71)
        goto LABEL_32;
      v72 = *(_QWORD *)(*(_QWORD *)(v69 + 24) + 112);
      if (v72)
      {
        v73 = *(unsigned int *)(v69 + 32);
        if ((v73 + 2) < *(_DWORD *)(v72 + 8))
        {
          v74 = *(_QWORD *)(v72 + 8 * (v73 + 2) + 40);
          if (v74)
          {
            if ((*(_BYTE *)(v74 + 17) & 0x40) != 0)
              break;
          }
        }
      }
      v69 += 40;
    }
    v18 = *(llvm::Value **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) + 32 * v73);
LABEL_17:
    if (v18)
      v19 = v18 == (llvm::Value *)v17;
    else
      v19 = 1;
    if (!v19)
      goto LABEL_21;
LABEL_32:
    v27 = *(unsigned __int8 *)(v17 + 16);
    if (v27 == 85)
    {
      v34 = *(_QWORD *)(v17 - 96);
      v35 = *(unsigned __int8 *)(v34 + 16);
      if (v35 != 21)
      {
        if (v35 < 0x1C)
        {
          if (!*(_BYTE *)(v34 + 16))
            v34 |= 2uLL;
        }
        else
        {
          v36 = v35 - 33;
          v7 = v36 > 0x33;
          v37 = (1 << v36) & 0x8000000000041;
          if (!v7 && v37 != 0)
            v34 |= 1uLL;
        }
      }
      v120 = v34;
      v121.i64[0] = 0;
      AssumedConstant = llvm::Attributor::getAssumedConstant(v2, (const llvm::IRPosition *)&v120, v3, v10);
      if (!v40)
        goto LABEL_79;
      if (!AssumedConstant)
        goto LABEL_63;
      v41 = *((unsigned __int8 *)AssumedConstant + 16);
      if ((v41 - 11) < 2)
        goto LABEL_79;
      if (v41 != 16)
      {
LABEL_63:
        v44 = *(_QWORD *)(v17 - 64);
        v45 = v127;
        if (v127 >= (unint64_t)v128)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, (uint64_t)v129, v127 + 1, 16);
          v45 = v127;
        }
        v46 = (char *)v126 + 16 * v45;
        *v46 = v44;
        v46[1] = v16;
        v47 = v127 + 1;
        v127 = v47;
        v43 = *(_QWORD *)(v17 - 32);
        if (v47 >= v128)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, (uint64_t)v129, v47 + 1, 16);
          LODWORD(v47) = v127;
        }
        v21 = (char *)v126 + 16 * v47;
        goto LABEL_77;
      }
      v42 = *((_DWORD *)AssumedConstant + 8);
      if (v42 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AssumedConstant + 24)) != v42)
          goto LABEL_62;
      }
      else if (*((_QWORD *)AssumedConstant + 3))
      {
LABEL_62:
        v43 = *(_QWORD *)(v17 - 64);
LABEL_74:
        v55 = v127;
        if (v127 >= (unint64_t)v128)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, (uint64_t)v129, v127 + 1, 16);
          v55 = v127;
        }
        v21 = (char *)v126 + 16 * v55;
LABEL_77:
        *(_QWORD *)v21 = v43;
LABEL_78:
        *((_QWORD *)v21 + 1) = v16;
        ++v127;
        goto LABEL_79;
      }
      v43 = *(_QWORD *)(v17 - 32);
      goto LABEL_74;
    }
    if (v27 == 83)
    {
      v48 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 56);
      v112 = v48;
      v113 = 0;
      sub_1C6281EE8((uint64_t)&v120, (uint64_t)v133, &v112, &v113);
      v49 = v120;
      if (v121.i8[8])
      {
        v115.i32[3] = 0;
        *(__int32 *)((char *)&v115.i32[2] + 1) = 0;
        v114 = v48;
        v115.i64[0] = 0;
        v115.i8[8] = 0;
        v50 = (char *)v134;
        if (v135 >= HIDWORD(v135))
        {
          v98 = v135 + 1;
          if (v134 <= &v114 && (char *)v134 + 24 * v135 > (char *)&v114)
          {
            v99 = (char *)&v114 - (_BYTE *)v134;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, (uint64_t)v136, v98, 24);
            v50 = (char *)v134;
            v51 = (uint64_t *)((char *)v134 + v99);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, (uint64_t)v136, v98, 24);
            v51 = &v114;
            v50 = (char *)v134;
          }
        }
        else
        {
          v51 = &v114;
        }
        v52 = &v50[24 * v135];
        v53 = *(_OWORD *)v51;
        *((_QWORD *)v52 + 2) = v51[2];
        *(_OWORD *)v52 = v53;
        v54 = v135;
        LODWORD(v135) = v135 + 1;
        *(_DWORD *)(v49 + 8) = v54;
      }
      else
      {
        v54 = *(_DWORD *)(v120 + 8);
      }
      v75 = (char *)v134;
      v76 = (char *)v134 + 24 * v54;
      v78 = *((_QWORD *)v76 + 1);
      v77 = (llvm::AbstractAttribute **)(v76 + 8);
      if (!v78)
        *v77 = sub_1C5677D4C((uint64_t)v2, v48, 0, (uint64_t)v3, 2, 0, 1);
      v79 = *(_DWORD *)(v17 + 20) & 0x7FFFFFF;
      if ((_DWORD)v79)
      {
        v80 = 0;
        v81 = 0;
        v82 = &v75[24 * v54 + 16];
        v83 = 8 * v79;
        do
        {
          v84 = *(_DWORD *)(v17 + 20);
          if ((v84 & 0x40000000) != 0)
            v85 = *(_QWORD *)(v17 - 8);
          else
            v85 = v17 - 32 * (v84 & 0x7FFFFFF);
          v86 = *(_QWORD *)(v85 + 32 * *(unsigned int *)(v17 + 60) + v81);
          if ((*(unsigned int (**)(llvm::AbstractAttribute *, uint64_t, _QWORD))(*(_QWORD *)*v77 + 168))(*v77, v86, *(_QWORD *)(v17 + 40)))
          {
            *v82 = 1;
            *v109 |= (*(unsigned __int8 (**)(uint64_t))(*((_QWORD *)*v77 + 4) + 24))((uint64_t)*v77 + 32) ^ 1;
          }
          else
          {
            v87 = *(_DWORD *)(v17 + 20);
            if ((v87 & 0x40000000) != 0)
              v88 = *(_QWORD *)(v17 - 8);
            else
              v88 = v17 - 32 * (v87 & 0x7FFFFFF);
            v89 = *(_QWORD *)(v86 + 40);
            if (v89 == v86 + 40)
            {
              v91 = 0;
            }
            else
            {
              if (v89)
                v90 = v89 - 24;
              else
                v90 = 0;
              if (*(unsigned __int8 *)(v90 + 16) - 29 >= 0xB)
                v91 = 0;
              else
                v91 = v90;
            }
            v92 = *(_QWORD *)(v88 + v80);
            v93 = v127;
            if (v127 >= (unint64_t)v128)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, (uint64_t)v129, v127 + 1, 16);
              v93 = v127;
            }
            v94 = (char *)v126 + 16 * v93;
            *v94 = v92;
            v94[1] = v91;
            ++v127;
          }
          v81 += 8;
          v80 += 32;
        }
        while (v83 != v81);
        v3 = v104;
      }
      v10 = v109;
      goto LABEL_79;
    }
    if (v27 < 0x15)
      goto LABEL_162;
    v28 = v17;
    if (v27 >= 0x1C)
    {
      v29 = v27 - 33;
      v28 = v17;
      if (v29 <= 0x33)
      {
        v28 = v17;
        if (((1 << v29) & 0x8000000000041) != 0)
          v28 = v17 | 1;
      }
    }
    v120 = v28;
    v121.i64[0] = 0;
    AssumedSimplified = llvm::Attributor::getAssumedSimplified(v2, (const llvm::IRPosition *)&v120, v3, v10);
    if (v31)
      break;
LABEL_79:
    v14 = v127;
    if (!v127)
    {
      if ((_DWORD)v135)
      {
        v102 = 24 * v135;
        v103 = (char *)v134 + 16;
        do
        {
          if (*v103)
            llvm::Attributor::recordDependence((uint64_t)v2, *((_QWORD *)v103 - 1), (uint64_t)v3, 1);
          v103 += 24;
          v102 -= 24;
        }
        while (v102);
      }
      v100 = 1;
      goto LABEL_171;
    }
  }
  v18 = (llvm::Value *)AssumedSimplified;
  if (!AssumedSimplified || v17 == AssumedSimplified)
    goto LABEL_83;
  if (!v16)
    goto LABEL_21;
  v32 = *(unsigned __int8 *)(AssumedSimplified + 16);
  if (v32 < 0x15)
    goto LABEL_21;
  if (v32 < 0x1C)
  {
    if (v32 == 21)
    {
      v33 = (_QWORD *)(AssumedSimplified + 24);
      goto LABEL_82;
    }
    goto LABEL_83;
  }
  v33 = (_QWORD *)(*(_QWORD *)(AssumedSimplified + 40) + 56);
LABEL_82:
  if (*v33 == *(_QWORD *)(*(_QWORD *)(v16 + 40) + 56))
  {
LABEL_21:
    v20 = v127;
    if (v127 >= (unint64_t)v128)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, (uint64_t)v129, v127 + 1, 16);
      v20 = v127;
    }
    v21 = (char *)v126 + 16 * v20;
    *(_QWORD *)v21 = v18;
    goto LABEL_78;
  }
LABEL_83:
  if (*(_BYTE *)(v17 + 16) != 60)
    goto LABEL_162;
  LOBYTE(v112) = 0;
  if (*(_QWORD *)(v17 - 32) == v108)
    goto LABEL_162;
  v120 = 1;
  v121 = v107;
  v122 = v107;
  v123 = v125;
  v124 = 0x400000000;
  v114 = 1;
  v115 = v107;
  v116 = v107;
  v117 = v119;
  v118 = 0x400000000;
  v56 = 1;
  if (!llvm::AA::getPotentiallyLoadedValues(v2, v17, &v120, &v114, v3, (BOOL *)&v112, 1))
  {
    v95 = 0;
    goto LABEL_148;
  }
  if (!(_DWORD)v124)
  {
LABEL_107:
    v56 = 0;
    v95 = 1;
    goto LABEL_148;
  }
  v57 = (int64_t *)v123;
  v58 = 8 * v124;
  while (2)
  {
    v56 = 1;
    if (!llvm::AA::isDynamicallyUnique(v2, v3, *v57, (const llvm::Value *)1))
    {
      v95 = 0;
LABEL_147:
      v10 = v109;
      goto LABEL_148;
    }
    ++v57;
    v58 -= 8;
    if (v58)
      continue;
    break;
  }
  v59 = (uint64_t *)v123;
  v10 = v109;
  if (!v16)
  {
LABEL_100:
    if (!(_DWORD)v124)
      goto LABEL_107;
    v65 = v127;
    v66 = 8 * v124;
    do
    {
      v67 = *v59;
      if (v65 >= v128)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, (uint64_t)v129, v65 + 1, 16);
        v65 = v127;
      }
      v68 = (char *)v126 + 16 * v65;
      *v68 = v67;
      v68[1] = v16;
      v65 = ++v127;
      ++v59;
      v66 -= 8;
    }
    while (v66);
    v56 = 0;
    v95 = 1;
    goto LABEL_147;
  }
  if (!(_DWORD)v124)
    goto LABEL_107;
  v60 = 8 * v124;
  v61 = (char *)v123;
  while (1)
  {
    v62 = *(_QWORD *)v61;
    v63 = *(unsigned __int8 *)(*(_QWORD *)v61 + 16);
    if (v63 >= 0x15)
    {
      if (v63 >= 0x1C)
      {
        v64 = (_QWORD *)(*(_QWORD *)(v62 + 40) + 56);
      }
      else
      {
        if (v63 != 21)
          break;
        v64 = (_QWORD *)(v62 + 24);
      }
      if (*v64 != *(_QWORD *)(*(_QWORD *)(v16 + 40) + 56))
        break;
    }
    v61 += 8;
    v60 -= 8;
    if (!v60)
      goto LABEL_100;
  }
  v95 = 0;
  v56 = 1;
LABEL_148:
  if (v117 != v119)
    free(v117);
  if ((v114 & 1) == 0)
    MEMORY[0x1CAA32FB4](v115.i64[0], 8);
  if (v123 != v125)
    free(v123);
  if ((v120 & 1) != 0)
  {
    if (!v56)
      goto LABEL_156;
LABEL_162:
    v96 = *v105 + 10;
    v120 = v17;
    v97 = sub_1C568E4F0(v96, &v120);
    v114 = a2;
    if (sub_1C628C8B4(v97, &v114))
      *v105[1] = 0;
    goto LABEL_79;
  }
  MEMORY[0x1CAA32FB4](v121.i64[0], 8);
  if (v56)
    goto LABEL_162;
LABEL_156:
  if (v95)
    goto LABEL_79;
LABEL_170:
  v100 = 0;
LABEL_171:
  if (v126 != v129)
    free(v126);
  sub_1C6143384(v132[0]);
  if (v130[0] != v131)
    free(v130[0]);
  if (v134 != v136)
    free(v134);
  if ((v133[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v133[1], 8);
  return v100;
}

unint64_t sub_1C568F35C(uint64_t a1, unint64_t *a2)
{
  int64x2_t *v4;
  uint64_t v5;
  int64x2_t v6;
  uint64_t v7;
  int64x2_t *v8;
  int32x2_t v9;
  int64x2_t v11;

  if (!*(_QWORD *)(a1 + 288))
  {
    v4 = *(int64x2_t **)a1;
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5)
    {
      v6 = *(int64x2_t *)a2;
      v7 = 16 * v5;
      v8 = *(int64x2_t **)a1;
      while (1)
      {
        v9 = vmovn_s64(vceqq_s64(*v8, v6));
        if ((v9.i32[0] & v9.i32[1] & 1) != 0)
          break;
        ++v8;
        v7 -= 16;
        if (!v7)
          goto LABEL_10;
      }
      if (v7)
        return 1;
LABEL_10:
      if (v5 > 0xF)
      {
        do
        {
          sub_1C61DB2E8(a1 + 272, *(_QWORD *)(*(_QWORD *)a1 + 16 * v5 - 16), *(_QWORD *)(*(_QWORD *)a1 + 16 * v5 - 8), (_OWORD *)(*(_QWORD *)a1 + 16 * v5 - 16));
          LODWORD(v5) = *(_DWORD *)(a1 + 8) - 1;
          *(_DWORD *)(a1 + 8) = v5;
        }
        while ((_DWORD)v5);
        sub_1C61DB2E8(a1 + 272, *a2, a2[1], a2);
        return 0x100000001;
      }
    }
    else
    {
      v6 = *(int64x2_t *)a2;
    }
    if (v5 >= *(_DWORD *)(a1 + 12))
    {
      v11 = v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5 + 1, 16);
      v6 = v11;
      v4 = *(int64x2_t **)a1;
      v5 = *(unsigned int *)(a1 + 8);
    }
    v4[v5] = v6;
    ++*(_DWORD *)(a1 + 8);
    return 0x100000001;
  }
  return ((unint64_t)sub_1C61DB2E8(a1 + 272, *a2, a2[1], a2) << 32) | 1;
}

_QWORD *sub_1C568F498(_QWORD *a1)
{
  *a1 = off_1E8173478;
  a1[4] = &unk_1E8173540;
  sub_1C628C86C((uint64_t)(a1 + 5));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C568F4EC(_QWORD *a1)
{
  *a1 = off_1E8173478;
  a1[4] = &unk_1E8173540;
  sub_1C628C86C((uint64_t)(a1 + 5));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C568F558(uint64_t a1)
{
  *(_WORD *)(a1 + 88) = 1;
  return 0;
}

uint64_t *sub_1C568F568(_QWORD *a1)
{
  *(a1 - 4) = off_1E8173478;
  *a1 = &unk_1E8173540;
  sub_1C628C86C((uint64_t)(a1 + 1));
  *(a1 - 4) = &unk_1E8172998;
  return sub_1C6286C70(a1 - 3);
}

void sub_1C568F5B0(_QWORD *a1)
{
  _QWORD *v2;

  *(a1 - 4) = off_1E8173478;
  v2 = a1 - 4;
  *a1 = &unk_1E8173540;
  sub_1C628C86C((uint64_t)(a1 + 1));
  *v2 = &unk_1E8172998;
  sub_1C6286C70(a1 - 3);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C568F61C(_QWORD *a1)
{
  sub_1C56900B0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C568F640(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  uint64_t *v8;
  _BOOL4 v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  a1[11] = a1[11] & 0x1FF | a1[10];
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 40))(a1);
  v5 = *((_QWORD *)a1 + 2) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~a1[4] & 3) == 0)
    v5 = *(_QWORD *)(v5 + 24);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (*(_BYTE *)(v5 + 16))
  {
    if (v6 == 21)
    {
      v7 = (unint64_t *)(v5 + 24);
    }
    else
    {
      if (v6 < 0x1C)
        goto LABEL_12;
      v7 = (unint64_t *)(*(_QWORD *)(v5 + 40) + 56);
    }
    v5 = *v7;
    if (*v7)
      goto LABEL_9;
LABEL_12:
    v9 = 1;
    goto LABEL_13;
  }
LABEL_9:
  v8 = *(uint64_t **)(a2 + 80);
  if (v8[3] != v8[4])
  {
    v15 = 0;
    v16 = (void *)v5;
    if (!sub_1C614F7B0(v8, &v16, &v15))
      goto LABEL_12;
  }
  v9 = (*(_DWORD *)(v5 + 32) & 0xFu) - 9 < 0xFFFFFFFE;
LABEL_13:
  v16 = v18;
  v17 = 0x200000000;
  llvm::IRPosition::getAttrs((llvm::IRPosition *)(a1 + 4), dword_1C8660188, 4, (uint64_t)&v16, 0, 0);
  v10 = (char *)v16;
  if (!(_DWORD)v17)
    goto LABEL_30;
  v11 = 8 * v17;
  do
  {
    v12 = *(_DWORD *)(*(_QWORD *)v10 + 12);
    if (v12 > 11)
    {
      if (v12 != 12)
      {
        v13 = *(_QWORD *)(v4 + 8) | 0x300000003;
        goto LABEL_24;
      }
      if (v9)
      {
        v13 = *(_QWORD *)(v4 + 8) | 0xCC000000CCLL;
        goto LABEL_24;
      }
      LODWORD(v15) = 12;
    }
    else
    {
      if (v12 != 3)
      {
        v13 = *(_QWORD *)(v4 + 8) | 0xDC000000DCLL;
        goto LABEL_24;
      }
      if (v9)
      {
        v13 = *(_QWORD *)(v4 + 8) | 0xEC000000ECLL;
LABEL_24:
        *(_QWORD *)(v4 + 8) = v13;
        goto LABEL_28;
      }
      LODWORD(v15) = 3;
    }
    sub_1C5690138((llvm::IRPosition *)(a1 + 4), (int *)&v15, 1);
LABEL_28:
    v10 += 8;
    v11 -= 8;
  }
  while (v11);
  v10 = (char *)v16;
LABEL_30:
  if (v10 != (char *)v18)
    free(v10);
  return sub_1C628CA08((uint64_t)a1, a2);
}

uint64_t sub_1C568F854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm::IRPosition *v5;
  char v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  v5 = (llvm::IRPosition *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  v14 = v16;
  v15 = 0x400000000;
  v6 = ~(_BYTE)v4;
  v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v6 & 3) == 0)
    v7 = *(_QWORD *)(v7 + 24);
  (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 112))(a1, **(_QWORD **)v7, &v14);
  if ((_DWORD)v15)
  {
    v8 = (uint64_t *)v14;
    v9 = 8 * v15;
    while (1)
    {
      v10 = *v8;
      if (*v8)
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      v13 = v10;
      if (!llvm::IRPosition::hasAttr(v5, &v13, 1, 1, 0))
        break;
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_9;
    }
    sub_1C5690138(v5, dword_1C8660188, 4);
    if ((~*(_DWORD *)(a1 + 44) & 0xFC) == 0)
      sub_1C5690138(v5, dword_1C8660198, 3);
    v11 = sub_1C628C768(a1, a2);
  }
  else
  {
LABEL_9:
    v11 = 1;
  }
  if (v14 != v16)
    free(v14);
  return v11;
}

void sub_1C568F9B4(uint64_t a1)
{
  int v1;
  unsigned __int8 v2;
  __guard *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;

  v1 = *(_DWORD *)(a1 + 44);
  if ((~v1 & 0xFC) == 0)
  {
    v2 = atomic_load(byte_1ED809B00);
    if ((v2 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809B00;
    goto LABEL_14;
  }
  if ((~v1 & 0xEC) == 0)
  {
    v4 = atomic_load(byte_1ED809B08);
    if ((v4 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809B08;
    goto LABEL_14;
  }
  if ((~v1 & 0xDC) == 0)
  {
    v5 = atomic_load(byte_1ED809B10);
    if ((v5 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809B10;
    goto LABEL_14;
  }
  if ((~v1 & 0xCC) == 0)
  {
    v6 = atomic_load(byte_1ED809B18);
    if ((v6 & 1) == 0)
    {
      v3 = (__guard *)byte_1ED809B18;
LABEL_14:
      if (__cxa_guard_acquire(v3))
        __cxa_guard_release(v3);
    }
  }
}

BOOL sub_1C568FA88(uint64_t a1, uint64_t a2)
{
  llvm::AbstractAttribute *v4;
  uint64_t v5;
  int v6;
  char v8;
  _QWORD v9[3];
  unsigned __int8 v10;

  v4 = sub_1C5680B34(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1, 2, 0, 1);
  if ((~*((unsigned __int8 *)v4 + 41) & 3) != 0)
  {
    v6 = *(_DWORD *)(a1 + 44);
    v10 = 0;
    v9[0] = a1;
    v9[1] = a2;
    v9[2] = &v10;
    if ((llvm::Attributor::checkForAllReadWriteInstructions(a2, (unsigned int (*)(uint64_t, uint64_t))sub_1C56902BC, (uint64_t)v9, a1, &v8) & 1) != 0)
    {
      return (v10 | (v6 != *(_DWORD *)(a1 + 44))) == 0;
    }
    else
    {
      sub_1C568FD9C((_DWORD *)a1);
      return 0;
    }
  }
  else if ((~*((unsigned __int8 *)v4 + 40) & 3) != 0)
  {
    v5 = 1;
    llvm::Attributor::recordDependence(a2, (uint64_t)v4, a1, 1);
  }
  else
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 44);
    return 1;
  }
  return v5;
}

unint64_t sub_1C568FB80(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  int v6;
  unint64_t result;
  unint64_t v8;
  unsigned int v9;
  int v11;

  if ((~*(_DWORD *)(a1 + 44) & 0xFC) != 0)
  {
    result = sub_1C6283CA4((_QWORD *)(a1 + 16));
    if ((_DWORD)result != 4)
      return result;
    v11 = *(_DWORD *)(a1 + 44);
    if ((~v11 & 0xDC) != 0)
    {
      if ((~v11 & 0xEC) != 0)
      {
        if ((~v11 & 0xCC) != 0)
          return result;
        v5 = a2;
        v6 = 12;
      }
      else
      {
        v5 = a2;
        v6 = 3;
      }
    }
    else
    {
      v5 = a2;
      v6 = 11;
    }
  }
  else
  {
    v5 = a2;
    v6 = 44;
  }
  result = llvm::Attribute::get(v5, v6, 0);
  v8 = result;
  v9 = *(_DWORD *)(a3 + 8);
  if (v9 >= *(_DWORD *)(a3 + 12))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v9 + 1, 8);
    v9 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t sub_1C568FC6C(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t), uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 44) == 255)
    {
      return 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (1)
      {
        if ((v10 & a4) == 0)
        {
          v11 = *(_QWORD *)(a1 + 8 * v9 + 48);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 80);
            if (v12)
            {
              v13 = v11 + 72;
              v14 = *(_QWORD **)(v11 + 64);
            }
            else
            {
              v14 = *(_QWORD **)v11;
              v13 = *(_QWORD *)v11 + 24 * *(unsigned int *)(v11 + 8);
            }
            if (v14 != (_QWORD *)v13)
              break;
          }
        }
LABEL_7:
        v10 = (2 * v10);
        if (++v9 == 8)
          return 1;
      }
      while (1)
      {
        v15 = v14 + 4;
        if (!v12)
          v15 = v14;
        result = a2(a3, *v15, v15[1], *((unsigned int *)v15 + 4), v10);
        if (!(_DWORD)result)
          break;
        if (v12)
        {
          v16 = (_QWORD *)v14[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (_QWORD *)v14[2];
              v18 = *v17 == (_QWORD)v14;
              v14 = v17;
            }
            while (!v18);
          }
        }
        else
        {
          v17 = v14 + 3;
        }
        v14 = v17;
        if (v17 == (_QWORD *)v13)
          goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t sub_1C568FD9C(_DWORD *a1)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  unint64_t v27;
  char v28;
  __int32 v29;

  v28 = 0;
  v2 = a1[10];
  v3 = sub_1C6284150((llvm::IRPosition *)(a1 + 4));
  v4 = v3;
  v5 = *(unsigned __int8 *)(v3 + 16);
  if (v5 >= 0x1C)
    v6 = v3;
  else
    v6 = 0;
  v27 = v3 - 8;
  v7 = 1;
  do
  {
    if ((v7 & v2) != 0)
      goto LABEL_42;
    v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 40))(a1);
    if (v5 >= 0x1C)
    {
      v10 = 0;
      v11 = *(unsigned __int8 *)(v4 + 16);
      v12 = (v11 - 33);
      if (v12 > 0x37)
        goto LABEL_26;
      if (((1 << (v11 - 33)) & 0x8000000000041) == 0)
      {
        if (((1 << (v11 - 33)) & 0x808001C8000010) == 0)
        {
          if (v12 != 28)
            goto LABEL_26;
          v10 = (*(_WORD *)(v4 + 18) & 0x301) != 0;
LABEL_25:
          v11 = *(unsigned __int8 *)(v4 + 16);
LABEL_26:
          v15 = 0;
          v16 = (v11 - 33);
          if (v16 > 0x37)
            goto LABEL_40;
          if (((1 << v16) & 0x8000000000041) != 0)
          {
            v17 = *(_QWORD *)(v4 + 64);
            if (!v17 || (*(_BYTE *)(v17 + 17) & 0x30) == 0)
            {
              v18 = *(_DWORD *)(v4 + 20);
              if (v18 < 0)
              {
                v20 = (_QWORD *)(v27 - 32 * (v18 & 0x7FFFFFF));
                if (*v20)
                {
                  v21 = -*v20;
                  do
                  {
                    v22 = *(_DWORD *)(*(_QWORD *)((char *)v20 + v21) + 8);
                    v23 = v22 > 7;
                    v24 = (1 << v22) & 0x83;
                    if (v23 || v24 == 0)
                      goto LABEL_38;
                    v21 += 16;
                  }
                  while (v21);
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v4, 45) & 1) == 0
                && (llvm::CallBase::hasFnAttrOnCalledFunction(v4, 44) & 1) == 0)
              {
                goto LABEL_38;
              }
            }
          }
          else
          {
            if (v16 != 27)
            {
              if (((1 << v16) & 0x808001D0000010) != 0)
                goto LABEL_38;
LABEL_40:
              v9 = v15 | v10;
              goto LABEL_41;
            }
            if ((*(_WORD *)(v4 + 18) & 0x301) != 0)
            {
LABEL_38:
              v15 = 2;
              goto LABEL_40;
            }
          }
          v15 = 0;
          goto LABEL_40;
        }
LABEL_24:
        v10 = 1;
        goto LABEL_25;
      }
      v13 = *(_QWORD *)(v4 + 64);
      if (!v13 || (*(_BYTE *)(v13 + 20) & 4) == 0 && (*(_BYTE *)(v13 + 17) & 0x10) == 0)
      {
        v29 = 7;
        if (sub_1C53E4BBC(v4, &v29, 1uLL))
        {
          v14 = *(_QWORD *)(v4 - 32);
          if (!v14
            || *(_BYTE *)(v14 + 16)
            || *(_QWORD *)(v14 + 24) != *(_QWORD *)(v4 + 72)
            || *(_DWORD *)(v14 + 36) != 7)
          {
            goto LABEL_24;
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v4, 66) & 1) == 0)
        {
          v10 = llvm::CallBase::hasFnAttrOnCalledFunction(v4, 44) ^ 1;
          goto LABEL_25;
        }
      }
      v10 = 0;
      goto LABEL_25;
    }
    v9 = 3;
LABEL_41:
    sub_1C5690B58((unint64_t)a1, v8, v7, v6, 0, &v28, v9);
LABEL_42:
    v19 = v7 >= 0x80;
    v7 *= 2;
  }
  while (!v19);
  a1[11] = a1[10];
  return 0;
}

_QWORD *sub_1C5690054(uint64_t a1)
{
  return sub_1C56900B0((_QWORD *)(a1 - 32));
}

void sub_1C569005C(uint64_t a1)
{
  sub_1C56900B0((_QWORD *)(a1 - 32));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5690084(uint64_t a1)
{
  sub_1C568FD9C((_DWORD *)(a1 - 32));
  return 0;
}

_QWORD *sub_1C56900B0(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  *a1 = off_1E8173780;
  a1[4] = &unk_1E8173818;
  for (i = 6; i != 14; ++i)
  {
    v3 = a1[i];
    if (v3)
    {
      sub_1C49F3440(*(_QWORD **)(v3 + 72));
      if (*(_QWORD *)v3 != v3 + 16)
        free(*(void **)v3);
    }
  }
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

uint64_t sub_1C5690138(llvm::IRPosition *a1, int *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  char v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;

  result = sub_1C6283CA4(a1);
  if ((_DWORD)result)
  {
    result = sub_1C6283CA4(a1);
    if ((_DWORD)result != 1)
    {
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL;
      v9 = v8;
      if ((~*(_DWORD *)a1 & 3) == 0)
        v9 = *(_QWORD *)(v8 + 24);
      v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 < 0x1C
        || ((v11 = v10 - 33, v12 = v11 > 0x33, v13 = (1 << v11) & 0x8000000000041, !v12)
          ? (v14 = v13 == 0)
          : (v14 = 1),
            v14))
      {
        result = sub_1C5676C10(a1);
        v9 = 0;
        v16 = (uint64_t *)(result + 112);
        v7 = *(_QWORD *)a1;
        v8 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL;
        v15 = 1;
      }
      else
      {
        v15 = 0;
        v16 = (uint64_t *)(v9 + 64);
      }
      v17 = *v16;
      v24 = *v16;
      if ((~(_BYTE)v7 & 3) == 0)
        v8 = *(_QWORD *)(v8 + 24);
      if (a3)
      {
        v18 = **(uint64_t ***)v8;
        v19 = 4 * a3;
        do
        {
          v20 = *a2;
          v21 = sub_1C6283CA4(a1);
          v22 = -1;
          if (((1 << v21) & 0xC) != 0)
          {
            v22 = 0;
          }
          else if (((1 << v21) & 0x30) == 0)
          {
            v22 = sub_1C628686C(a1, 0) + 1;
          }
          result = llvm::AttributeList::removeAttributeAtIndex(&v24, v18, v22, v20);
          v24 = result;
          ++a2;
          v19 -= 4;
        }
        while (v19);
        v17 = result;
      }
      if ((v15 & 1) != 0)
      {
        result = sub_1C5676C10(a1);
        v23 = (uint64_t *)(result + 112);
      }
      else
      {
        v23 = (uint64_t *)(v9 + 64);
      }
      *v23 = v17;
    }
  }
  return result;
}

BOOL sub_1C56902BC(unint64_t *a1, unint64_t a2)
{
  _BOOL4 v3;
  unint64_t v4;
  llvm::Attributor *v5;
  _BYTE *v6;
  unsigned int v7;
  uint64_t v8;
  llvm::AbstractAttribute *v9;
  int v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  llvm::AbstractAttribute *v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  _QWORD v81[4];
  uint64_t (**v82)();
  uint64_t v83;

  v3 = 0;
  v4 = *a1;
  v5 = (llvm::Attributor *)a1[1];
  v6 = (_BYTE *)a1[2];
  v82 = &off_1E8173878;
  v83 = 0xFF00000000;
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 <= 0x3B)
  {
    if (v7 != 33 && v7 != 39)
    {
      if (v7 != 37)
        goto LABEL_26;
      goto LABEL_104;
    }
  }
  else
  {
    if (*(unsigned __int8 *)(a2 + 16) <= 0x4Fu)
    {
      v8 = -1;
      switch(*(_BYTE *)(a2 + 16))
      {
        case '<':
        case '=':
          break;
        case '?':
          goto LABEL_104;
        case '@':
          v8 = -3;
          break;
        case 'A':
          v8 = -2;
          break;
        default:
          goto LABEL_26;
      }
      v15 = *(_QWORD *)(a2 + 32 * v8);
      if (v15)
      {
        sub_1C5690DCC(v4, v5, a2, v15, (uint64_t)&v82, v6);
        goto LABEL_155;
      }
      if (v7 != 60)
      {
        if (v7 == 61)
        {
          v3 = (*(_WORD *)(a2 + 18) & 0x301) != 0;
          goto LABEL_25;
        }
        if (v7 - 63 > 2)
        {
          v3 = 0;
LABEL_25:
          v7 = *(unsigned __int8 *)(a2 + 16);
          goto LABEL_26;
        }
      }
LABEL_104:
      v3 = 1;
      goto LABEL_25;
    }
    if (v7 != 84)
    {
      if (v7 != 80 && v7 != 88)
      {
LABEL_26:
        v16 = 0;
        v17 = v7 - 33;
        if (v17 > 0x37)
          goto LABEL_109;
        if (((1 << v17) & 0x8000000000041) != 0)
        {
          v50 = *(_QWORD *)(a2 + 64);
          if (!v50 || (*(_BYTE *)(v50 + 17) & 0x30) == 0)
          {
            v51 = *(_DWORD *)(a2 + 20);
            if (v51 < 0)
            {
              v56 = a2 - 32 * (v51 & 0x7FFFFFF);
              v59 = *(_QWORD *)(v56 - 8);
              v57 = v56 - 8;
              v58 = v59;
              if (v59)
              {
                v60 = -v58;
                do
                {
                  v61 = *(_DWORD *)(*(_QWORD *)(v57 + v60) + 8);
                  v33 = v61 > 7;
                  v62 = (1 << v61) & 0x83;
                  if (v33 || v62 == 0)
                    goto LABEL_107;
                  v60 += 16;
                }
                while (v60);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) == 0)
            {
              goto LABEL_107;
            }
          }
        }
        else
        {
          if (v17 != 27)
          {
            if (((1 << v17) & 0x808001D0000010) != 0)
              goto LABEL_107;
LABEL_109:
            v52 = v16 | v3;
            v53 = v4;
            v54 = 128;
LABEL_154:
            sub_1C5690B58(v53, (uint64_t)&v82, v54, a2, 0, v6, v52);
            goto LABEL_155;
          }
          if ((*(_WORD *)(a2 + 18) & 0x301) != 0)
          {
LABEL_107:
            v16 = 2;
            goto LABEL_109;
          }
        }
        v16 = 0;
        goto LABEL_109;
      }
      goto LABEL_104;
    }
  }
  v9 = sub_1C5680594((uint64_t)v5, a2, 0, v4, 1, 0, 1);
  v10 = *((_DWORD *)v9 + 11);
  if ((~v10 & 0xFC) == 0)
  {
    v11 = -1;
    goto LABEL_156;
  }
  if ((~v10 & 0xDC) == 0)
  {
    v12 = 0;
    v13 = *(unsigned __int8 *)(a2 + 16);
    v14 = (v13 - 33);
    if (v14 > 0x37)
      goto LABEL_139;
    if (((1 << (v13 - 33)) & 0x8000000000041) == 0)
    {
      if (((1 << (v13 - 33)) & 0x808001C8000010) == 0)
      {
        if (v14 != 28)
          goto LABEL_139;
        v12 = (*(_WORD *)(a2 + 18) & 0x301) != 0;
LABEL_138:
        v13 = *(unsigned __int8 *)(a2 + 16);
LABEL_139:
        v67 = 0;
        v68 = (v13 - 33);
        if (v68 > 0x37)
          goto LABEL_153;
        if (((1 << v68) & 0x8000000000041) != 0)
        {
          v69 = *(_QWORD *)(a2 + 64);
          if (!v69 || (*(_BYTE *)(v69 + 17) & 0x30) == 0)
          {
            v70 = *(_DWORD *)(a2 + 20);
            if (v70 < 0)
            {
              v73 = a2 - 32 * (v70 & 0x7FFFFFF);
              v76 = *(_QWORD *)(v73 - 8);
              v74 = v73 - 8;
              v75 = v76;
              if (v76)
              {
                v77 = -v75;
                do
                {
                  v78 = *(_DWORD *)(*(_QWORD *)(v74 + v77) + 8);
                  v33 = v78 > 7;
                  v79 = (1 << v78) & 0x83;
                  if (v33 || v79 == 0)
                    goto LABEL_151;
                  v77 += 16;
                }
                while (v77);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) == 0)
            {
              goto LABEL_151;
            }
          }
        }
        else
        {
          if (v68 != 27)
          {
            if (((1 << v68) & 0x808001D0000010) != 0)
              goto LABEL_151;
LABEL_153:
            v52 = v67 | v12;
            v53 = v4;
            v54 = 32;
            goto LABEL_154;
          }
          if ((*(_WORD *)(a2 + 18) & 0x301) != 0)
          {
LABEL_151:
            v67 = 2;
            goto LABEL_153;
          }
        }
        v67 = 0;
        goto LABEL_153;
      }
LABEL_137:
      v12 = 1;
      goto LABEL_138;
    }
    v55 = *(_QWORD *)(a2 + 64);
    if (!v55 || (*(_BYTE *)(v55 + 20) & 4) == 0 && (*(_BYTE *)(v55 + 17) & 0x10) == 0)
    {
      LODWORD(v81[0]) = 7;
      if (sub_1C53E4BBC(a2, (__int32 *)v81, 1uLL))
      {
        v66 = *(_QWORD *)(a2 - 32);
        if (!v66 || *(_BYTE *)(v66 + 16) || *(_QWORD *)(v66 + 24) != *(_QWORD *)(a2 + 72) || *(_DWORD *)(v66 + 36) != 7)
          goto LABEL_137;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 66) & 1) == 0)
      {
        v12 = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) ^ 1;
        goto LABEL_138;
      }
    }
    v12 = 0;
    goto LABEL_138;
  }
  v18 = v9;
  v19 = 1;
  do
  {
    if ((v19 & (v10 | 0x1C)) != 0)
      goto LABEL_66;
    v20 = 0;
    v21 = *(unsigned __int8 *)(a2 + 16);
    v22 = (v21 - 33);
    if (v22 <= 0x37)
    {
      if (((1 << (v21 - 33)) & 0x8000000000041) == 0)
      {
        if (((1 << (v21 - 33)) & 0x808001C8000010) == 0)
        {
          if (v22 != 28)
            goto LABEL_51;
          v20 = (*(_WORD *)(a2 + 18) & 0x301) != 0;
          goto LABEL_50;
        }
        goto LABEL_49;
      }
      v23 = *(_QWORD *)(a2 + 64);
      if (v23 && ((*(_BYTE *)(v23 + 20) & 4) != 0 || (*(_BYTE *)(v23 + 17) & 0x10) != 0))
        goto LABEL_44;
      LODWORD(v81[0]) = 7;
      if (sub_1C53E4BBC(a2, (__int32 *)v81, 1uLL))
      {
        v24 = *(_QWORD *)(a2 - 32);
        if (!v24 || *(_BYTE *)(v24 + 16) || *(_QWORD *)(v24 + 24) != *(_QWORD *)(a2 + 72) || *(_DWORD *)(v24 + 36) != 7)
        {
LABEL_49:
          v20 = 1;
          goto LABEL_50;
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 66) & 1) != 0)
LABEL_44:
        v20 = 0;
      else
        v20 = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) ^ 1;
LABEL_50:
      v21 = *(unsigned __int8 *)(a2 + 16);
    }
LABEL_51:
    v25 = 0;
    v26 = (v21 - 33);
    if (v26 > 0x37)
      goto LABEL_65;
    if (((1 << v26) & 0x8000000000041) != 0)
    {
      v27 = *(_QWORD *)(a2 + 64);
      if (v27 && (*(_BYTE *)(v27 + 17) & 0x30) != 0)
      {
LABEL_64:
        v25 = 0;
        goto LABEL_65;
      }
      v28 = *(_DWORD *)(a2 + 20);
      if (v28 < 0 && (v30 = (_QWORD *)(a2 - 8 - 32 * (v28 & 0x7FFFFFF)), *v30))
      {
        v31 = -*v30;
        while (1)
        {
          v32 = *(_DWORD *)(*(_QWORD *)((char *)v30 + v31) + 8);
          v33 = v32 > 7;
          v34 = (1 << v32) & 0x83;
          if (v33 || v34 == 0)
            break;
          v31 += 16;
          if (!v31)
            goto LABEL_59;
        }
      }
      else
      {
LABEL_59:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) != 0)
        {
          goto LABEL_64;
        }
      }
      goto LABEL_63;
    }
    if (v26 == 27)
    {
      if ((*(_WORD *)(a2 + 18) & 0x301) == 0)
        goto LABEL_64;
LABEL_63:
      v25 = 2;
      goto LABEL_65;
    }
    if (((1 << v26) & 0x808001D0000010) != 0)
      goto LABEL_63;
LABEL_65:
    sub_1C5690B58(v4, (uint64_t)&v82, v19, a2, 0, v6, v25 | v20);
LABEL_66:
    v29 = v19 >= 0x80;
    v19 *= 2;
  }
  while (!v29);
  if ((~v10 & 0xC) != 0
    && (v81[0] = v4,
        v81[1] = &v82,
        v81[2] = a2,
        v81[3] = v6,
        !(*(unsigned int (**)(llvm::AbstractAttribute *, uint64_t (*)(unint64_t *, uint64_t, uint64_t, uint64_t, unsigned int), _QWORD *, uint64_t))(*(_QWORD *)v18 + 120))(v18, sub_1C5691540, v81, 243)))
  {
    v11 = 0;
  }
  else
  {
    v36 = (_QWORD *)(a2 - 8);
    if ((~v10 & 0x10) != 0)
    {
      v37 = *(unsigned __int8 *)(a2 + 16);
      if (v37 == 84)
      {
        v38 = 0;
      }
      else
      {
        if (v37 == 39)
          v38 = (*(_DWORD *)(a2 + 80) + 1);
        else
          v38 = 2;
        v36 = (_QWORD *)(a2 - 8);
      }
      v39 = 0;
      v40 = *(_DWORD *)(a2 + 20);
      v41 = -(uint64_t)(v40 & 0x7FFFFFF);
      if (v40 < 0)
      {
        v64 = a2 - 32 * (v40 & 0x7FFFFFF);
        v65 = *(_QWORD *)(v64 - 8);
        if ((v65 & 0xFFFFFFFF0) != 0)
          v39 = (*(_DWORD *)(v64 - 12) - *(_DWORD *)(v64 - v65));
        else
          v39 = 0;
        v36 = (_QWORD *)(a2 - 8);
      }
      v42 = -32 * v38 - 32 * v39 - 32 * v41 - 32;
      if ((v42 & 0x1FFFFFFFE0) != 0)
      {
        v43 = 0;
        v44 = (v42 >> 5);
        v45 = a2;
        do
        {
          v46 = *(_DWORD *)(a2 + 20);
          v47 = *(_QWORD *)(v45 - 32 * (v46 & 0x7FFFFFF));
          if ((*(_DWORD *)(*(_QWORD *)v47 + 8) & 0xFE) == 0x12)
            v48 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v47 + 16) + 8);
          else
            v48 = *(_DWORD *)(*(_QWORD *)v47 + 8);
          if (v48 == 15)
          {
            v49 = (v46 & 0x40000000) != 0 ? *v36 : a2 - 32 * (v46 & 0x7FFFFFF);
            if ((~*((unsigned __int8 *)sub_1C5680B34((uint64_t)v5, (v49 + 32 * v43) | 3, 0, v4, 1, 0, 1)+ 41) & 3) != 0)sub_1C5690DCC(v4, v5, a2, v47, (uint64_t)&v82, v6);
          }
          ++v43;
          v45 += 32;
        }
        while (v44 != v43);
      }
    }
LABEL_155:
    v11 = BYTE4(v83);
  }
LABEL_156:
  v71 = *(_DWORD *)(v4 + 44) & (*(_DWORD *)&v11 | 0xFFFFFF00) | *(_DWORD *)(v4 + 40);
  *(_DWORD *)(v4 + 44) = v71;
  return v71 != 256;
}

unint64_t sub_1C5690B58(unint64_t result, uint64_t a2, unsigned int a3, unint64_t a4, uint64_t a5, _BYTE *a6, int a7)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  _DWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;

  v13 = result + 8 * (31 - __clz(a3));
  v16 = *(_QWORD *)(v13 + 48);
  v15 = (unint64_t *)(v13 + 48);
  v14 = v16;
  if (!v16)
  {
    result = sub_1C484358C(*(_QWORD *)(result + 112), 112, 3);
    v14 = result;
    v19 = 0;
    v20 = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_QWORD *)result = result + 16;
    *(_OWORD *)(result + 72) = 0u;
    *(_QWORD *)(result + 64) = result + 72;
    *(_QWORD *)(result + 8) = 0x200000000;
    v21 = (_DWORD *)(result + 8);
    *(_OWORD *)(result + 88) = 0u;
    *(_QWORD *)(result + 104) = 0;
    *v15 = result;
    v30 = a4;
    v31 = a5;
    v32 = a7;
    v22 = *(_QWORD *)result;
    v23 = *(_QWORD *)result;
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(v14 + 80);
  v30 = a4;
  v31 = a5;
  v32 = a7;
  if (!v17)
  {
    v21 = (_DWORD *)(v14 + 8);
    v19 = *(unsigned int *)(v14 + 8);
    v23 = *(_QWORD *)v14;
    v22 = *(_QWORD *)v14 + 24 * v19;
    if ((_DWORD)v19)
    {
      v27 = 0;
      while (*(_QWORD *)(v23 + v27) != a4 || *(_QWORD *)(v23 + v27 + 8) != a5 || *(_DWORD *)(v23 + v27 + 16) != a7)
      {
        v27 += 24;
        if (24 * v19 == v27)
          goto LABEL_15;
      }
      if (24 * v19 != v27)
      {
        v18 = 0;
        goto LABEL_8;
      }
LABEL_15:
      if (v19 <= 1)
      {
        v20 = *(_DWORD *)(v14 + 8);
        goto LABEL_5;
      }
      do
      {
        sub_1C5691430((uint64_t **)(v14 + 64), (unint64_t *)(*(_QWORD *)v14 + 24 * v19 - 24));
        LODWORD(v19) = *(_DWORD *)(v14 + 8) - 1;
        *(_DWORD *)(v14 + 8) = v19;
      }
      while ((_DWORD)v19);
      result = sub_1C5691430((uint64_t **)(v14 + 64), &v30);
      goto LABEL_7;
    }
    v19 = 0;
    v20 = 0;
LABEL_5:
    v24 = &v30;
    if (v20 >= *(_DWORD *)(v14 + 12))
    {
      v28 = v19 + 1;
      if (v23 <= (unint64_t)&v30 && v22 > (unint64_t)&v30)
      {
        v29 = (char *)&v30 - v23;
        result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v14, v14 + 16, v28, 24);
        v23 = *(_QWORD *)v14;
        v24 = (unint64_t *)&v29[*(_QWORD *)v14];
      }
      else
      {
        result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v14, v14 + 16, v28, 24);
        v23 = *(_QWORD *)v14;
        v24 = &v30;
      }
    }
    v25 = v23 + 24 * *v21;
    v26 = *(_OWORD *)v24;
    *(_QWORD *)(v25 + 16) = v24[2];
    *(_OWORD *)v25 = v26;
    ++*v21;
LABEL_7:
    v18 = 1;
    goto LABEL_8;
  }
  result = sub_1C5691430((uint64_t **)(v14 + 64), &v30);
  v18 = result & 1;
LABEL_8:
  *a6 |= v18;
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & ~a3 | *(_DWORD *)(a2 + 8);
  return result;
}

void sub_1C5690DCC(unint64_t a1, llvm::Attributor *a2, unint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v55;
  BOOL v57;
  __int32 v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[9];

  v61[8] = *MEMORY[0x1E0C80C00];
  v59 = v61;
  v60 = 0x800000000;
  v57 = 0;
  if ((llvm::AA::getAssumedUnderlyingObjects(a2, a4, (uint64_t)&v59, (const llvm::AbstractAttribute *)a1, a3, &v57, 1) & 1) == 0)
  {
    v38 = 0;
    v39 = *(unsigned __int8 *)(a3 + 16);
    v40 = (v39 - 33);
    if (v40 > 0x37)
      goto LABEL_95;
    if (((1 << (v39 - 33)) & 0x8000000000041) == 0)
    {
      if (((1 << (v39 - 33)) & 0x808001C8000010) == 0)
      {
        if (v40 != 28)
          goto LABEL_95;
        v38 = (*(_WORD *)(a3 + 18) & 0x301) != 0;
LABEL_94:
        v39 = *(unsigned __int8 *)(a3 + 16);
LABEL_95:
        v43 = 0;
        v44 = (v39 - 33);
        if (v44 > 0x37)
          goto LABEL_109;
        if (((1 << v44) & 0x8000000000041) != 0)
        {
          v45 = *(_QWORD *)(a3 + 64);
          if (!v45 || (*(_BYTE *)(v45 + 17) & 0x30) == 0)
          {
            v46 = *(_DWORD *)(a3 + 20);
            if (v46 < 0)
            {
              v47 = a3 - 32 * (v46 & 0x7FFFFFF);
              v50 = *(_QWORD *)(v47 - 8);
              v48 = v47 - 8;
              v49 = v50;
              if (v50)
              {
                v51 = -v49;
                do
                {
                  v52 = *(_DWORD *)(*(_QWORD *)(v48 + v51) + 8);
                  v20 = v52 > 7;
                  v53 = (1 << v52) & 0x83;
                  if (v20 || v53 == 0)
                    goto LABEL_107;
                  v51 += 16;
                }
                while (v51);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(a3, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(a3, 44) & 1) == 0)
            {
              goto LABEL_107;
            }
          }
        }
        else
        {
          if (v44 != 27)
          {
            if (((1 << v44) & 0x808001D0000010) != 0)
              goto LABEL_107;
LABEL_109:
            sub_1C5690B58(a1, a5, 0x80u, a3, 0, a6, v43 | v38);
            goto LABEL_110;
          }
          if ((*(_WORD *)(a3 + 18) & 0x301) != 0)
          {
LABEL_107:
            v43 = 2;
            goto LABEL_109;
          }
        }
        v43 = 0;
        goto LABEL_109;
      }
LABEL_93:
      v38 = 1;
      goto LABEL_94;
    }
    v41 = *(_QWORD *)(a3 + 64);
    if (!v41 || (*(_BYTE *)(v41 + 20) & 4) == 0 && (*(_BYTE *)(v41 + 17) & 0x10) == 0)
    {
      v58 = 7;
      if (sub_1C53E4BBC(a3, &v58, 1uLL))
      {
        v42 = *(_QWORD *)(a3 - 32);
        if (!v42 || *(_BYTE *)(v42 + 16) || *(_QWORD *)(v42 + 24) != *(_QWORD *)(a3 + 72) || *(_DWORD *)(v42 + 36) != 7)
          goto LABEL_93;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a3, 66) & 1) == 0)
      {
        v38 = llvm::CallBase::hasFnAttrOnCalledFunction(a3, 44) ^ 1;
        goto LABEL_94;
      }
    }
    v38 = 0;
    goto LABEL_94;
  }
  v55 = (uint64_t)a2;
  if ((_DWORD)v60)
  {
    v11 = (uint64_t *)v59;
    v12 = (uint64_t *)((char *)v59 + 8 * v60);
    do
    {
      v13 = *v11;
      v14 = *(unsigned __int8 *)(*v11 + 16);
      if (v14 - 11 >= 2)
      {
        if (v14 == 21)
        {
          v15 = 16;
          goto LABEL_34;
        }
        if (v14 <= 3)
        {
          if (v14 == 3 && (*(_BYTE *)(v13 + 80) & 1) != 0)
            goto LABEL_67;
          if ((*(_DWORD *)(v13 + 32) & 0xFu) - 7 >= 2)
            v15 = 8;
          else
            v15 = 4;
          goto LABEL_34;
        }
        if (v14 != 19)
          goto LABEL_23;
        v16 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
        v17 = *(_DWORD *)(*(_QWORD *)a4 + 8);
        if ((v17 & 0xFE) == 0x12)
          v17 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a4 + 16) + 8);
        if (v16)
        {
          v18 = *(_QWORD *)(v16 + 112);
          if (v18)
          {
            if ((*(_BYTE *)(v18 + 17) & 1) == 0 && v17 <= 0xFF)
              goto LABEL_67;
LABEL_22:
            v14 = *(unsigned __int8 *)(v13 + 16);
LABEL_23:
            if (v14 == 59)
            {
              v15 = 1;
            }
            else if (v14 < 0x1C
                   || ((v19 = v14 - 33, v20 = v19 > 0x33, v21 = (1 << v19) & 0x8000000000041, !v20)
                     ? (v22 = v21 == 0)
                     : (v22 = 1),
                       v22))
            {
              v15 = 128;
            }
            else if (*((_BYTE *)sub_1C5688774(v55, v13 | 1, 0, a1, 1, 0, 1) + 41))
            {
              v15 = 64;
            }
            else
            {
              v15 = 128;
            }
LABEL_34:
            v23 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 40))(a1);
            v24 = 0;
            v25 = *(unsigned __int8 *)(a3 + 16);
            v26 = (v25 - 33);
            if (v26 > 0x37)
              goto LABEL_52;
            if (((1 << (v25 - 33)) & 0x8000000000041) != 0)
            {
              v27 = *(_QWORD *)(a3 + 64);
              if (v27 && ((*(_BYTE *)(v27 + 20) & 4) != 0 || (*(_BYTE *)(v27 + 17) & 0x10) != 0))
                goto LABEL_45;
              v58 = 7;
              if (sub_1C53E4BBC(a3, &v58, 1uLL))
              {
                v28 = *(_QWORD *)(a3 - 32);
                if (!v28
                  || *(_BYTE *)(v28 + 16)
                  || *(_QWORD *)(v28 + 24) != *(_QWORD *)(a3 + 72)
                  || *(_DWORD *)(v28 + 36) != 7)
                {
                  goto LABEL_50;
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(a3, 66) & 1) != 0)
LABEL_45:
                v24 = 0;
              else
                v24 = llvm::CallBase::hasFnAttrOnCalledFunction(a3, 44) ^ 1;
            }
            else
            {
              if (((1 << (v25 - 33)) & 0x808001C8000010) == 0)
              {
                if (v26 == 28)
                {
                  v24 = (*(_WORD *)(a3 + 18) & 0x301) != 0;
                  goto LABEL_51;
                }
LABEL_52:
                v29 = 0;
                v30 = (v25 - 33);
                if (v30 > 0x37)
                  goto LABEL_66;
                if (((1 << v30) & 0x8000000000041) == 0)
                {
                  if (v30 != 27)
                  {
                    if (((1 << v30) & 0x808001D0000010) != 0)
                      goto LABEL_64;
LABEL_66:
                    sub_1C5690B58(a1, v23, v15, a3, v13, a6, v29 | v24);
                    goto LABEL_67;
                  }
                  if ((*(_WORD *)(a3 + 18) & 0x301) != 0)
                    goto LABEL_64;
LABEL_65:
                  v29 = 0;
                  goto LABEL_66;
                }
                v31 = *(_QWORD *)(a3 + 64);
                if (v31 && (*(_BYTE *)(v31 + 17) & 0x30) != 0)
                  goto LABEL_65;
                v32 = *(_DWORD *)(a3 + 20);
                if (v32 < 0 && (v33 = (_QWORD *)(a3 - 8 - 32 * (v32 & 0x7FFFFFF)), *v33))
                {
                  v34 = -*v33;
                  while (1)
                  {
                    v35 = *(_DWORD *)(*(_QWORD *)((char *)v33 + v34) + 8);
                    v20 = v35 > 7;
                    v36 = (1 << v35) & 0x83;
                    if (v20 || v36 == 0)
                      break;
                    v34 += 16;
                    if (!v34)
                      goto LABEL_60;
                  }
                }
                else
                {
LABEL_60:
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction(a3, 45) & 1) != 0
                    || (llvm::CallBase::hasFnAttrOnCalledFunction(a3, 44) & 1) != 0)
                  {
                    goto LABEL_65;
                  }
                }
LABEL_64:
                v29 = 2;
                goto LABEL_66;
              }
LABEL_50:
              v24 = 1;
            }
LABEL_51:
            v25 = *(unsigned __int8 *)(a3 + 16);
            goto LABEL_52;
          }
        }
        if (v17 >= 0x100)
          goto LABEL_22;
      }
LABEL_67:
      ++v11;
    }
    while (v11 != v12);
  }
LABEL_110:
  if (v59 != v61)
    free(v59);
}

uint64_t sub_1C5691430(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  _OWORD *v13;
  uint64_t *v14;
  uint64_t *v15;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = *((_DWORD *)a2 + 4);
    while (1)
    {
      while (1)
      {
        v9 = v4;
        v10 = v4[4];
        if (v6 == v10)
          break;
        if (v6 >= v10)
        {
          if (v10 >= v6)
            return 0;
          goto LABEL_15;
        }
LABEL_12:
        v4 = (uint64_t *)*v9;
        v5 = (uint64_t **)v9;
        if (!*v9)
          goto LABEL_18;
      }
      v11 = v9[5];
      if (v7 == v11)
      {
        v12 = *((_DWORD *)v9 + 12);
        if (v8 < v12)
          goto LABEL_12;
        if (v12 >= v8)
          return 0;
      }
      else
      {
        if (v7 < v11)
          goto LABEL_12;
        if (v11 >= v7)
          return 0;
      }
LABEL_15:
      v4 = (uint64_t *)v9[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v9 + 1);
        goto LABEL_18;
      }
    }
  }
  v9 = (uint64_t *)(a1 + 1);
LABEL_18:
  v13 = operator new(0x38uLL);
  v13[2] = *(_OWORD *)a2;
  *((_QWORD *)v13 + 6) = a2[2];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = v9;
  *v5 = (uint64_t *)v13;
  v14 = (uint64_t *)**a1;
  if (v14)
  {
    *a1 = v14;
    v15 = *v5;
  }
  else
  {
    v15 = (uint64_t *)v13;
  }
  sub_1C4768E74(a1[1], v15);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return 1;
}

uint64_t sub_1C5691540(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  __int32 v31;

  v7 = *a1;
  v8 = a1[1];
  v10 = a1[2];
  v9 = (_BYTE *)a1[3];
  if (v10)
  {
    v11 = 0;
    v12 = *(unsigned __int8 *)(v10 + 16);
    v13 = (v12 - 33);
    if (v13 > 0x37)
      goto LABEL_21;
    if (((1 << (v12 - 33)) & 0x8000000000041) == 0)
    {
      if (((1 << (v12 - 33)) & 0x808001C8000010) == 0)
      {
        if (v13 != 28)
          goto LABEL_21;
        v11 = (*(_WORD *)(v10 + 18) & 0x301) != 0;
LABEL_20:
        v12 = *(unsigned __int8 *)(v10 + 16);
LABEL_21:
        v17 = 0;
        v18 = (v12 - 33);
        if (v18 > 0x37)
          goto LABEL_35;
        if (((1 << v18) & 0x8000000000041) != 0)
        {
          v19 = *(_QWORD *)(v10 + 64);
          if (!v19 || (*(_BYTE *)(v19 + 17) & 0x30) == 0)
          {
            v20 = *(_DWORD *)(v10 + 20);
            if (v20 < 0)
            {
              v22 = v10 - 32 * (v20 & 0x7FFFFFF);
              v25 = *(_QWORD *)(v22 - 8);
              v23 = v22 - 8;
              v24 = v25;
              if (v25)
              {
                v26 = -v24;
                do
                {
                  v27 = *(_DWORD *)(*(_QWORD *)(v23 + v26) + 8);
                  v28 = v27 > 7;
                  v29 = (1 << v27) & 0x83;
                  if (v28 || v29 == 0)
                    goto LABEL_33;
                  v26 += 16;
                }
                while (v26);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v10, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v10, 44) & 1) == 0)
            {
              goto LABEL_33;
            }
          }
        }
        else
        {
          if (v18 != 27)
          {
            if (((1 << v18) & 0x808001D0000010) != 0)
              goto LABEL_33;
LABEL_35:
            v14 = v17 | v11;
            goto LABEL_36;
          }
          if ((*(_WORD *)(v10 + 18) & 0x301) != 0)
          {
LABEL_33:
            v17 = 2;
            goto LABEL_35;
          }
        }
        v17 = 0;
        goto LABEL_35;
      }
LABEL_19:
      v11 = 1;
      goto LABEL_20;
    }
    v15 = *(_QWORD *)(v10 + 64);
    if (!v15 || (*(_BYTE *)(v15 + 20) & 4) == 0 && (*(_BYTE *)(v15 + 17) & 0x10) == 0)
    {
      v31 = 7;
      if (sub_1C53E4BBC(v10, &v31, 1uLL))
      {
        v16 = *(_QWORD *)(v10 - 32);
        if (!v16
          || *(_BYTE *)(v16 + 16)
          || *(_QWORD *)(v16 + 24) != *(_QWORD *)(v10 + 72)
          || *(_DWORD *)(v16 + 36) != 7)
        {
          goto LABEL_19;
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v10, 66) & 1) == 0)
      {
        v11 = llvm::CallBase::hasFnAttrOnCalledFunction(v10, 44) ^ 1;
        goto LABEL_20;
      }
    }
    v11 = 0;
    goto LABEL_20;
  }
  v14 = 3;
LABEL_36:
  sub_1C5690B58(v7, v8, a5, v10, a3, v9, v14);
  return 1;
}

void sub_1C56917AC(_QWORD *a1)
{
  sub_1C56900B0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56917D0(_DWORD *a1, uint64_t a2)
{
  unint64_t result;

  sub_1C568F640(a1, a2);
  result = sub_1C5676C10((llvm::IRPosition *)(a1 + 4));
  if (!result)
    return sub_1C568FD9C(a1);
  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
      return sub_1C568FD9C(a1);
  }
  else if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    return sub_1C568FD9C(a1);
  }
  return result;
}

void sub_1C5691844(uint64_t a1)
{
  unsigned __int8 v1;

  if ((~*(_DWORD *)(a1 + 44) & 0xFC) == 0)
  {
    v1 = atomic_load((unsigned __int8 *)&qword_1EF8F3088);
    if ((v1 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_1EF8F3088))
        __cxa_guard_release(&qword_1EF8F3088);
    }
  }
}

BOOL sub_1C5691894(_DWORD *a1, uint64_t a2)
{
  unint64_t v4;
  llvm::AbstractAttribute *v5;
  _QWORD v7[2];
  char v8;

  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 4));
  v5 = sub_1C5680594(a2, v4, 0, (uint64_t)a1, 0, 0, 1);
  v8 = 0;
  v7[0] = a1;
  v7[1] = &v8;
  if (((*(uint64_t (**)(llvm::AbstractAttribute *, uint64_t (*)(unint64_t *, unint64_t, uint64_t, uint64_t, unsigned int), _QWORD *, _QWORD))(*(_QWORD *)v5 + 120))(v5, sub_1C569195C, v7, 0) & 1) != 0)return v8 == 0;
  sub_1C568FD9C(a1);
  return 0;
}

_QWORD *sub_1C569192C(uint64_t a1)
{
  return sub_1C56900B0((_QWORD *)(a1 - 32));
}

void sub_1C5691934(uint64_t a1)
{
  sub_1C56900B0((_QWORD *)(a1 - 32));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C569195C(unint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _BYTE *v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  __int32 v30;

  v9 = *a1;
  v8 = (_BYTE *)a1[1];
  if (a2)
  {
    v10 = 0;
    v11 = *(unsigned __int8 *)(a2 + 16);
    v12 = (v11 - 33);
    if (v12 > 0x37)
      goto LABEL_21;
    if (((1 << (v11 - 33)) & 0x8000000000041) == 0)
    {
      if (((1 << (v11 - 33)) & 0x808001C8000010) == 0)
      {
        if (v12 != 28)
          goto LABEL_21;
        v10 = (*(_WORD *)(a2 + 18) & 0x301) != 0;
LABEL_20:
        v11 = *(unsigned __int8 *)(a2 + 16);
LABEL_21:
        v16 = 0;
        v17 = (v11 - 33);
        if (v17 > 0x37)
          goto LABEL_35;
        if (((1 << v17) & 0x8000000000041) != 0)
        {
          v18 = *(_QWORD *)(a2 + 64);
          if (!v18 || (*(_BYTE *)(v18 + 17) & 0x30) == 0)
          {
            v19 = *(_DWORD *)(a2 + 20);
            if (v19 < 0)
            {
              v21 = a2 - 32 * (v19 & 0x7FFFFFF);
              v24 = *(_QWORD *)(v21 - 8);
              v22 = v21 - 8;
              v23 = v24;
              if (v24)
              {
                v25 = -v23;
                do
                {
                  v26 = *(_DWORD *)(*(_QWORD *)(v22 + v25) + 8);
                  v27 = v26 > 7;
                  v28 = (1 << v26) & 0x83;
                  if (v27 || v28 == 0)
                    goto LABEL_33;
                  v25 += 16;
                }
                while (v25);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) == 0)
            {
              goto LABEL_33;
            }
          }
        }
        else
        {
          if (v17 != 27)
          {
            if (((1 << v17) & 0x808001D0000010) != 0)
              goto LABEL_33;
LABEL_35:
            v13 = v16 | v10;
            goto LABEL_36;
          }
          if ((*(_WORD *)(a2 + 18) & 0x301) != 0)
          {
LABEL_33:
            v16 = 2;
            goto LABEL_35;
          }
        }
        v16 = 0;
        goto LABEL_35;
      }
LABEL_19:
      v10 = 1;
      goto LABEL_20;
    }
    v14 = *(_QWORD *)(a2 + 64);
    if (!v14 || (*(_BYTE *)(v14 + 20) & 4) == 0 && (*(_BYTE *)(v14 + 17) & 0x10) == 0)
    {
      v30 = 7;
      if (sub_1C53E4BBC(a2, &v30, 1uLL))
      {
        v15 = *(_QWORD *)(a2 - 32);
        if (!v15 || *(_BYTE *)(v15 + 16) || *(_QWORD *)(v15 + 24) != *(_QWORD *)(a2 + 72) || *(_DWORD *)(v15 + 36) != 7)
          goto LABEL_19;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 66) & 1) == 0)
      {
        v10 = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) ^ 1;
        goto LABEL_20;
      }
    }
    v10 = 0;
    goto LABEL_20;
  }
  v13 = 3;
LABEL_36:
  sub_1C5690B58(v9, v9 + 32, a5, a2, a3, v8, v13);
  return 1;
}

_QWORD *sub_1C5691BBC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E8173B08;
  a1[4] = &unk_1E8173BB0;
  a1[6] = &unk_1E8173C10;
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[8], 8);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5691C30(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E8173B08;
  a1[4] = &unk_1E8173BB0;
  a1[6] = &unk_1E8173C10;
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[8], 8);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5691CB4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string __p;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  std::to_string(&v14, *(unsigned __int8 *)(a1 + 112));
  v4 = std::string::insert(&v14, 0, "CallEdges[");
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v15, ",");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v17, "]");
  *a2 = *v12;
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

uint64_t sub_1C5691E0C(_BYTE *a1, uint64_t a2)
{
  unint64_t v4;
  char v6;
  _QWORD v7[3];
  unsigned int v8;
  int *v9[2];
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = 1;
  v7[0] = a2;
  v7[1] = a1;
  v7[2] = &v8;
  v10 = 0xB00000005;
  v11 = 56;
  v9[0] = (int *)&v10;
  v9[1] = (int *)3;
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if ((llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C5692114, (uint64_t)v7, v4, (uint64_t)a1, v9, &v6, 1u, 0) & 1) == 0)
  {
    if (!a1[112])
      v8 = 0;
    if (!a1[113])
      v8 = 0;
    *((_WORD *)a1 + 56) = 257;
  }
  return v8;
}

uint64_t sub_1C5691EFC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_1C5691F04(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_1C5691F0C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 113);
}

uint64_t *sub_1C5691F14(_QWORD *a1)
{
  void *v2;

  *(a1 - 4) = off_1E8173B08;
  *a1 = &unk_1E8173BB0;
  a1[2] = &unk_1E8173C10;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[4], 8);
  *(a1 - 4) = &unk_1E8172998;
  return sub_1C6286C70(a1 - 3);
}

void sub_1C5691F80(_QWORD *a1)
{
  void *v2;

  *(a1 - 4) = off_1E8173B08;
  *a1 = &unk_1E8173BB0;
  a1[2] = &unk_1E8173C10;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[4], 8);
  *(a1 - 4) = &unk_1E8172998;
  sub_1C6286C70(a1 - 3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t *sub_1C5692008(_QWORD *a1)
{
  void *v2;

  *(a1 - 6) = off_1E8173B08;
  *(a1 - 2) = &unk_1E8173BB0;
  *a1 = &unk_1E8173C10;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[2], 8);
  *(a1 - 6) = &unk_1E8172998;
  return sub_1C6286C70(a1 - 5);
}

void sub_1C5692074(_QWORD *a1)
{
  void *v2;

  *(a1 - 6) = off_1E8173B08;
  *(a1 - 2) = &unk_1E8173BB0;
  *a1 = &unk_1E8173C10;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[2], 8);
  *(a1 - 6) = &unk_1E8172998;
  sub_1C6286C70(a1 - 5);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5692114(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  llvm::AbstractAttribute *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v12;

  v3 = a1[1];
  v4 = sub_1C5692210(*a1, a2, 0, v3, 0);
  if ((*(unsigned int (**)(llvm::AbstractAttribute *))(*(_QWORD *)v4 + 128))(v4))
  {
    v5 = (_DWORD *)a1[2];
    if (!*(_BYTE *)(v3 + 112))
      *v5 = 0;
    if (!*(_BYTE *)(v3 + 113))
      *v5 = 0;
    *(_WORD *)(v3 + 112) = 257;
  }
  if ((*(unsigned int (**)(llvm::AbstractAttribute *))(*(_QWORD *)v4 + 120))(v4))
  {
    if (!*(_BYTE *)(v3 + 112))
      *(_DWORD *)a1[2] = 0;
    *(_BYTE *)(v3 + 112) = 1;
  }
  v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v4 + 112))(v4);
  v7 = *(uint64_t **)(v6 + 24);
  v8 = *(uint64_t **)(v6 + 32);
  if (v7 != v8)
  {
    v9 = (_QWORD *)(v3 + 64);
    do
    {
      v10 = (_DWORD *)a1[2];
      v12 = *v7;
      if (sub_1C567D3D8(v9, &v12))
        *v10 = 0;
      ++v7;
    }
    while (v7 != v8);
  }
  return 1;
}

llvm::AbstractAttribute *sub_1C5692210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  llvm::Attributor *v9;
  llvm::AbstractAttribute *v10;
  uint64_t v11;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t *v17;
  uint64_t v18;
  _BOOL4 v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  void *p_p;
  void **v27;
  uint64_t *v28;
  const void *v29;
  size_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  void *v35[2];
  char v36;
  __int128 v37;
  void *__p;
  __int128 v39;

  if (byte_1ED831CE0)
    v8 = a3;
  else
    v8 = 0;
  *(_QWORD *)&v37 = a2;
  *((_QWORD *)&v37 + 1) = v8;
  __p = &llvm::AACallEdges::ID;
  v39 = v37;
  v35[0] = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&__p, (uint64_t **)v35) & 1) != 0)
  {
    v10 = (llvm::AbstractAttribute *)*((_QWORD *)v35[0] + 3);
    if (v10)
    {
      if (!a4 || a5 == 2)
        return v10;
      goto LABEL_8;
    }
  }
  v10 = (llvm::AbstractAttribute *)llvm::AACallEdges::createForPosition((llvm::AACallEdges *)&v37, (const llvm::IRPosition *)a1, v9);
  sub_1C628CC20(a1, (uint64_t)v10);
  v13 = *(uint64_t **)(a1 + 5480);
  if (v13)
  {
    __p = &llvm::AACallEdges::ID;
    v35[0] = 0;
    v14 = sub_1C614F7B0(v13, &__p, v35) ^ 1;
  }
  else
  {
    v14 = 0;
  }
  v15 = v37 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v37 & 3) == 0)
    v15 = *(_QWORD *)(v15 + 24);
  v16 = *(unsigned __int8 *)(v15 + 16);
  if (!*(_BYTE *)(v15 + 16))
  {
LABEL_21:
    v18 = *(_QWORD *)(v15 + 112);
    if (v18 && ((*(_BYTE *)(v18 + 14) & 2) != 0 || (*(_BYTE *)(v18 + 17) & 8) != 0))
    {
      v19 = 1;
    }
    else if (*(_BYTE *)(a1 + 5464))
    {
      v19 = 0;
    }
    else
    {
      v21 = *(_QWORD **)(a1 + 88);
      v22 = sub_1C477672C((uint64_t)v21, v15);
      v23 = v21[1];
      v24 = 16;
      if (v23 == *v21)
        v24 = 20;
      v19 = v22 == (_QWORD *)(v23 + 8 * *(unsigned int *)((char *)v21 + v24));
    }
    v20 = 0;
    if (v19 | v14)
      goto LABEL_60;
    goto LABEL_34;
  }
  if (v16 == 21)
  {
    v17 = (unint64_t *)(v15 + 24);
  }
  else
  {
    if (v16 < 0x1C)
    {
      v15 = 0;
      goto LABEL_28;
    }
    v17 = (unint64_t *)(*(_QWORD *)(v15 + 40) + 56);
  }
  v15 = *v17;
  if (*v17)
    goto LABEL_21;
LABEL_28:
  v20 = 1;
  if ((v14 & 1) != 0)
    goto LABEL_60;
LABEL_34:
  if (*(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
  {
LABEL_60:
    v32 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v10 + 40))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    return v10;
  }
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v10 + 72))(v35, v10);
  if (v36 >= 0)
    v25 = v36 & 0x7F;
  else
    v25 = (size_t)v35[1];
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v25 + 12);
  if (v39 < 0)
    p_p = __p;
  if (v25)
  {
    if (v36 >= 0)
      v27 = v35;
    else
      v27 = (void **)v35[0];
    memmove(p_p, v27, v25);
  }
  strcpy((char *)p_p + v25, "::initialize");
  v28 = (uint64_t *)off_1EF8EEB50();
  if (*v28)
  {
    if (v39 >= 0)
      v29 = &__p;
    else
      v29 = __p;
    if (v39 >= 0)
      v30 = HIBYTE(v39) & 0x7F;
    else
      v30 = v39;
    llvm::timeTraceProfilerBegin(v29, v30, (uint64_t)"", 0);
  }
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  if (v36 < 0)
    operator delete(v35[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v10 + 24))(v10, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v28)
  {
    sub_1C6392DC0(*v28);
    if ((v20 & 1) != 0)
      goto LABEL_59;
  }
  else if ((v20 & 1) != 0)
  {
    goto LABEL_59;
  }
  v33 = *(uint64_t **)(a1 + 80);
  __p = (void *)v15;
  v35[0] = 0;
  if ((sub_1C614F7B0(v33, &__p, v35) & 1) == 0)
  {
    v34 = *(uint64_t **)(a1 + 80);
    __p = (void *)sub_1C5676C10((llvm::IRPosition *)&v37);
    v35[0] = 0;
    if ((sub_1C614F7B0(v34, &__p, v35) & 1) == 0)
      goto LABEL_60;
  }
LABEL_59:
  v31 = *(_DWORD *)(a1 + 4368);
  if (v31 == 2)
    goto LABEL_60;
  *(_DWORD *)(a1 + 4368) = 1;
  llvm::Attributor::updateAA((llvm::Attributor *)a1, v10);
  *(_DWORD *)(a1 + 4368) = v31;
  if (!a4)
    return v10;
LABEL_8:
  v11 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v10 + 40))(v10);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
    llvm::Attributor::recordDependence(a1, (uint64_t)v10, a4, a5);
  return v10;
}

_QWORD *sub_1C56925F8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E8173B08;
  a1[4] = &unk_1E8173BB0;
  a1[6] = &unk_1E8173C10;
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[8], 8);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C569266C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E8173B08;
  a1[4] = &unk_1E8173BB0;
  a1[6] = &unk_1E8173C10;
  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[8], 8);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56926F0(uint64_t a1, llvm::Attributor *a2)
{
  _DWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  _BYTE *v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  _QWORD v46[2];
  _QWORD v47[2];
  unsigned int v48;
  BOOL v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[5];

  v52[4] = *MEMORY[0x1E0C80C00];
  v48 = 1;
  v47[0] = a1;
  v47[1] = &v48;
  v4 = (_DWORD *)(a1 + 16);
  v5 = sub_1C5676CEC((_DWORD *)(a1 + 16));
  v6 = (_QWORD *)v5;
  if (*(_BYTE *)(*(_QWORD *)(v5 - 32) + 16) == 24)
  {
    v43 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 56);
    v50 = "ompx_no_call_asm";
    v51 = 16;
    sub_1C4F024D8((llvm::StringMapImpl *)&llvm::KnownAssumptionStrings, "ompx_no_call_asm", 0x10uLL);
    if (!llvm::hasAssumption(v43, (uint64_t)&v50))
    {
      v46[0] = "ompx_no_call_asm";
      v46[1] = 16;
      sub_1C4F024D8((llvm::StringMapImpl *)&llvm::KnownAssumptionStrings, "ompx_no_call_asm", 0x10uLL);
      if (!llvm::hasAssumption((uint64_t)v6, (uint64_t)v46))
      {
        if (!*(_BYTE *)(a1 + 112))
          v48 = 0;
        *(_BYTE *)(a1 + 112) = 1;
      }
    }
    return v48;
  }
  v7 = (_BYTE *)sub_1C5676CEC(v4);
  if ((v7[23] & 0x20) != 0)
  {
    v8 = ***(_QWORD ***)v7;
    v50 = v7;
    v9 = *(_DWORD *)(v8 + 2496);
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 2480);
      v11 = v9 - 1;
      v12 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v13 = (_QWORD *)(v10 + 40 * v12);
      v14 = (_BYTE *)*v13;
      if ((_BYTE *)*v13 == v7)
      {
LABEL_13:
        v19 = *((unsigned int *)v13 + 4);
        if ((_DWORD)v19)
        {
          v20 = (_QWORD *)(v13[1] + 8);
          v21 = 16 * v19;
          while (*((_DWORD *)v20 - 2) != 23)
          {
            v20 += 2;
            v21 -= 16;
            if (!v21)
              goto LABEL_17;
          }
          v37 = *v20;
          if (*v20)
          {
            v38 = *(unsigned int *)(v37 + 8);
            if ((_DWORD)v38)
            {
              v39 = (_QWORD *)(a1 + 64);
              v40 = -8 * v38;
              do
              {
                v41 = *(_QWORD *)(v37 + v40);
                if (v41)
                {
                  if (*(_BYTE *)v41 == 1)
                  {
                    v42 = *(_BYTE **)(v41 + 128);
                    if (!v42[16])
                    {
                      v50 = v42;
                      if (sub_1C567D3D8(v39, &v50))
                        v48 = 0;
                    }
                  }
                }
                v40 += 8;
              }
              while (v40);
            }
            return v48;
          }
        }
        goto LABEL_17;
      }
      v15 = 0;
      v16 = 1;
      while (v14 != (_BYTE *)-4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == (_BYTE *)-8192;
        if (v17)
          v15 = v13;
        v18 = v12 + v16++;
        v12 = v18 & v11;
        v13 = (_QWORD *)(v10 + 40 * (v18 & v11));
        v14 = (_BYTE *)*v13;
        if ((_BYTE *)*v13 == v7)
          goto LABEL_13;
      }
      if (v15)
        v44 = v15;
      else
        v44 = v13;
    }
    else
    {
      v44 = 0;
    }
    v13 = sub_1C541AB24(v8 + 2480, (uint64_t)&v50, (uint64_t *)&v50, v44);
    v45 = v50;
    v13[3] = 0;
    v13[4] = 0;
    *v13 = v45;
    v13[1] = v13 + 3;
    v13[2] = 0x100000000;
    goto LABEL_13;
  }
LABEL_17:
  v22 = *(v6 - 4);
  LOBYTE(v50) = 0;
  LOBYTE(v46[0]) = 0;
  v23 = *(unsigned __int8 *)(v22 + 16);
  if (v23 != 21)
  {
    if (v23 < 0x1C)
    {
      if (!*(_BYTE *)(v22 + 16))
        v22 |= 2uLL;
    }
    else
    {
      v24 = v23 - 33;
      v25 = v24 > 0x33;
      v26 = (1 << v24) & 0x8000000000041;
      if (!v25 && v26 != 0)
        v22 |= 1uLL;
    }
  }
  if ((sub_1C5692D04(a2, v22, 0, (const llvm::AbstractAttribute *)a1, (uint64_t)&v50, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, BOOL))sub_1C56937F8, (uint64_t)v47, 0, (BOOL *)v46) & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 112))
      v48 = 0;
    if (!*(_BYTE *)(a1 + 113))
      v48 = 0;
    *(_WORD *)(a1 + 112) = 257;
  }
  v50 = v52;
  v51 = 0x400000000;
  llvm::AbstractCallSite::getCallbackUses(v6, (uint64_t)&v50);
  v28 = (uint64_t **)v50;
  if ((_DWORD)v51)
  {
    v29 = 8 * v51;
    do
    {
      v30 = **v28;
      LOBYTE(v46[0]) = 0;
      v49 = 0;
      v31 = *(unsigned __int8 *)(v30 + 16);
      if (v31 != 21)
      {
        if (v31 < 0x1C)
        {
          if (!*(_BYTE *)(v30 + 16))
            v30 |= 2uLL;
        }
        else
        {
          v32 = v31 - 33;
          v25 = v32 > 0x33;
          v33 = (1 << v32) & 0x8000000000041;
          if (!v25 && v33 != 0)
            v30 |= 1uLL;
        }
      }
      if ((sub_1C5692D04(a2, v30, 0, (const llvm::AbstractAttribute *)a1, (uint64_t)v46, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, BOOL))sub_1C56937F8, (uint64_t)v47, 0, &v49) & 1) == 0)
      {
        if (!*(_BYTE *)(a1 + 112))
          v48 = 0;
        if (!*(_BYTE *)(a1 + 113))
          v48 = 0;
        *(_WORD *)(a1 + 112) = 257;
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
    v28 = (uint64_t **)v50;
  }
  v35 = v48;
  if (v28 != v52)
    free(v28);
  return v35;
}

uint64_t *sub_1C5692B1C(_QWORD *a1)
{
  void *v2;

  *(a1 - 4) = off_1E8173B08;
  *a1 = &unk_1E8173BB0;
  a1[2] = &unk_1E8173C10;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[4], 8);
  *(a1 - 4) = &unk_1E8172998;
  return sub_1C6286C70(a1 - 3);
}

void sub_1C5692B88(_QWORD *a1)
{
  void *v2;

  *(a1 - 4) = off_1E8173B08;
  *a1 = &unk_1E8173BB0;
  a1[2] = &unk_1E8173C10;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[4], 8);
  *(a1 - 4) = &unk_1E8172998;
  sub_1C6286C70(a1 - 3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t *sub_1C5692C10(_QWORD *a1)
{
  void *v2;

  *(a1 - 6) = off_1E8173B08;
  *(a1 - 2) = &unk_1E8173BB0;
  *a1 = &unk_1E8173C10;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[2], 8);
  *(a1 - 6) = &unk_1E8172998;
  return sub_1C6286C70(a1 - 5);
}

void sub_1C5692C7C(_QWORD *a1)
{
  void *v2;

  *(a1 - 6) = off_1E8173B08;
  *(a1 - 2) = &unk_1E8173BB0;
  *a1 = &unk_1E8173C10;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[2], 8);
  *(a1 - 6) = &unk_1E8172998;
  sub_1C6286C70(a1 - 5);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5692D04(llvm::Attributor *a1, uint64_t a2, uint64_t a3, const llvm::AbstractAttribute *a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, unint64_t, uint64_t, BOOL), uint64_t a7, uint64_t a8, BOOL *a9)
{
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  llvm::Argument *v31;
  int v32;
  char v33;
  int v34;
  int v35;
  int64_t *v36;
  uint64_t v37;
  int64_t *v38;
  unsigned int v39;
  uint64_t v40;
  int64_t v41;
  char *v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  llvm::UndefValue *AssumedConstant;
  char v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  __int128 v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  llvm::AbstractAttribute **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  int64x2_t v95;
  unint64_t v96;
  uint64_t *v97;
  llvm::Attributor *v98;
  char v102;
  unint64_t v103[2];
  _QWORD v104[2];
  uint64_t v105;
  int v106;
  uint64_t v107;
  int64x2_t v108;
  int64x2_t v109;
  void *v110;
  uint64_t v111;
  _BYTE v112[32];
  uint64_t v113;
  _OWORD v114[2];
  int64_t *v115;
  uint64_t v116;
  _BYTE v117[32];
  char *v118;
  unsigned int v119;
  unsigned int v120;
  _QWORD v121[32];
  void *v122[2];
  _QWORD v123[33];
  _QWORD *v124[2];
  _QWORD v125[9];
  uint64_t *v126;
  uint64_t v127;
  _QWORD v128[14];

  v128[12] = *MEMORY[0x1E0C80C00];
  v104[0] = a2;
  v104[1] = a3;
  v125[0] = 1;
  for (i = 1; i != 9; i += 2)
    v125[i] = -4096;
  v126 = v128;
  v127 = 0x400000000;
  v13 = sub_1C6284150((llvm::IRPosition *)v104);
  v14 = 0;
  v122[0] = v123;
  v122[1] = (void *)0x1000000000;
  v124[1] = 0;
  v124[0] = 0;
  v123[32] = v124;
  v118 = (char *)v121;
  v120 = 16;
  v121[0] = v13;
  v121[1] = a8;
  v96 = v13;
  v95 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v15 = 1;
  v98 = a1;
  v94 = a7;
  do
  {
    v16 = &v118[16 * v15];
    v17 = *((_QWORD *)v16 - 2);
    v18 = *((_QWORD *)v16 - 1);
    v119 = v15 - 1;
    v103[0] = v17;
    v103[1] = v18;
    if ((sub_1C568F35C((uint64_t)v122, v103) & 0x100000000) == 0)
    {
      v19 = v14;
      goto LABEL_130;
    }
    if ((int)v14 >= 16)
    {
LABEL_142:
      v90 = 0;
      goto LABEL_143;
    }
    v19 = (v14 + 1);
    if (*(_BYTE *)(*(_QWORD *)v17 + 8) == 15)
    {
      v20 = llvm::Value::stripPointerCasts((llvm::Value *)v17);
      goto LABEL_9;
    }
    v24 = *(unsigned __int8 *)(v17 + 16);
    if (v24 < 0x1C)
      goto LABEL_24;
    v25 = v24 - 33;
    v26 = v25 > 0x33;
    v27 = (1 << v25) & 0x8000000000041;
    if (v26 || v27 == 0)
      goto LABEL_24;
    v29 = *(_QWORD *)(v17 - 32);
    if (!v29 || *(_BYTE *)(v29 + 16) || *(_QWORD *)(v29 + 24) != *(_QWORD *)(v17 + 72))
      goto LABEL_24;
    if ((*(_WORD *)(v29 + 18) & 1) == 0)
    {
      v63 = *(_QWORD *)(v29 + 88);
LABEL_81:
      v64 = v63;
      goto LABEL_82;
    }
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(v17 - 32));
    v63 = *(_QWORD *)(v29 + 88);
    if ((*(_WORD *)(v29 + 18) & 1) == 0)
      goto LABEL_81;
    llvm::Function::BuildLazyArguments((llvm::Function *)v29);
    v64 = *(_QWORD *)(v29 + 88);
LABEL_82:
    v65 = v64 + 40 * *(_QWORD *)(v29 + 96);
    while (1)
    {
      if (v63 == v65)
        goto LABEL_24;
      v66 = *(_QWORD *)(*(_QWORD *)(v63 + 24) + 112);
      if (v66)
      {
        v67 = *(unsigned int *)(v63 + 32);
        if ((v67 + 2) < *(_DWORD *)(v66 + 8))
        {
          v68 = *(_QWORD *)(v66 + 8 * (v67 + 2) + 40);
          if (v68)
          {
            if ((*(_BYTE *)(v68 + 17) & 0x40) != 0)
              break;
          }
        }
      }
      v63 += 40;
    }
    v20 = *(llvm::Value **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) + 32 * v67);
LABEL_9:
    if (v20)
      v21 = v20 == (llvm::Value *)v17;
    else
      v21 = 1;
    if (!v21)
      goto LABEL_13;
LABEL_24:
    v30 = *(unsigned __int8 *)(v17 + 16);
    switch(v30)
    {
      case 85:
        v43 = *(_QWORD *)(v17 - 96);
        v44 = *(unsigned __int8 *)(v43 + 16);
        if (v44 != 21)
        {
          if (v44 < 0x1C)
          {
            if (!*(_BYTE *)(v43 + 16))
              v43 |= 2uLL;
          }
          else
          {
            v45 = v44 - 33;
            v26 = v45 > 0x33;
            v46 = (1 << v45) & 0x8000000000041;
            if (!v26 && v46 != 0)
              v43 |= 1uLL;
          }
        }
        v113 = v43;
        *(_QWORD *)&v114[0] = 0;
        AssumedConstant = llvm::Attributor::getAssumedConstant(a1, (const llvm::IRPosition *)&v113, a4, a9);
        if (!v49)
          goto LABEL_130;
        if (!AssumedConstant)
          goto LABEL_65;
        v50 = *((unsigned __int8 *)AssumedConstant + 16);
        if ((v50 - 11) < 2)
          goto LABEL_130;
        if (v50 != 16)
        {
LABEL_65:
          v52 = *(_QWORD *)(v17 - 64);
          v53 = v119;
          if (v119 >= (unint64_t)v120)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, (uint64_t)v121, v119 + 1, 16);
            v53 = v119;
          }
          v54 = &v118[16 * v53];
          *(_QWORD *)v54 = v52;
          *((_QWORD *)v54 + 1) = v18;
          v55 = v119 + 1;
          v119 = v55;
          v20 = *(llvm::Value **)(v17 - 32);
          if (v55 >= v120)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, (uint64_t)v121, v55 + 1, 16);
            LODWORD(v55) = v119;
          }
          v23 = &v118[16 * v55];
          goto LABEL_70;
        }
        v51 = *((_DWORD *)AssumedConstant + 8);
        if (v51 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AssumedConstant + 24)) != v51)
            goto LABEL_64;
        }
        else if (*((_QWORD *)AssumedConstant + 3))
        {
LABEL_64:
          v20 = *(llvm::Value **)(v17 - 64);
LABEL_13:
          v22 = v119;
          if (v119 >= (unint64_t)v120)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, (uint64_t)v121, v119 + 1, 16);
            v22 = v119;
          }
          v23 = &v118[16 * v22];
LABEL_70:
          *(_QWORD *)v23 = v20;
          *((_QWORD *)v23 + 1) = v18;
          ++v119;
          goto LABEL_130;
        }
        v20 = *(llvm::Value **)(v17 - 32);
        goto LABEL_13;
      case 83:
        v56 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 56);
        v105 = v56;
        v106 = 0;
        sub_1C6281EE8((uint64_t)&v113, (uint64_t)v125, &v105, &v106);
        v57 = v113;
        if (BYTE8(v114[0]))
        {
          v108.i32[3] = 0;
          *(__int32 *)((char *)&v108.i32[2] + 1) = 0;
          v107 = v56;
          v108.i64[0] = 0;
          v108.i8[8] = 0;
          v58 = v126;
          if (v127 >= HIDWORD(v127))
          {
            v88 = v127 + 1;
            if (v126 <= &v107 && &v126[3 * v127] > &v107)
            {
              v89 = (char *)&v107 - (char *)v126;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, (uint64_t)v128, v88, 24);
              v58 = v126;
              v59 = (uint64_t *)((char *)v126 + v89);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126, (uint64_t)v128, v88, 24);
              v59 = &v107;
              v58 = v126;
            }
          }
          else
          {
            v59 = &v107;
          }
          v60 = &v58[3 * v127];
          v61 = *(_OWORD *)v59;
          v60[2] = v59[2];
          *(_OWORD *)v60 = v61;
          v62 = v127;
          LODWORD(v127) = v127 + 1;
          *(_DWORD *)(v57 + 8) = v62;
        }
        else
        {
          v62 = *(_DWORD *)(v113 + 8);
        }
        v69 = v126;
        v70 = &v126[3 * v62];
        v72 = v70[1];
        v71 = (llvm::AbstractAttribute **)(v70 + 1);
        if (!v72)
          *v71 = sub_1C5677D4C((uint64_t)a1, v56, 0, (uint64_t)a4, 2, 0, 1);
        v73 = *(_DWORD *)(v17 + 20) & 0x7FFFFFF;
        if ((_DWORD)v73)
        {
          v74 = 0;
          v75 = 0;
          v97 = &v69[3 * v62 + 2];
          v76 = 8 * v73;
          do
          {
            v77 = *(_DWORD *)(v17 + 20);
            if ((v77 & 0x40000000) != 0)
              v78 = *(_QWORD *)(v17 - 8);
            else
              v78 = v17 - 32 * (v77 & 0x7FFFFFF);
            v79 = *(_QWORD *)(v78 + 32 * *(unsigned int *)(v17 + 60) + v75);
            if ((*(unsigned int (**)(llvm::AbstractAttribute *, uint64_t, _QWORD))(*(_QWORD *)*v71 + 168))(*v71, v79, *(_QWORD *)(v17 + 40)))
            {
              *(_BYTE *)v97 = 1;
              *a9 |= (*(unsigned __int8 (**)(uint64_t))(*((_QWORD *)*v71 + 4) + 24))((uint64_t)*v71 + 32) ^ 1;
            }
            else
            {
              v80 = *(_DWORD *)(v17 + 20);
              if ((v80 & 0x40000000) != 0)
                v81 = *(_QWORD *)(v17 - 8);
              else
                v81 = v17 - 32 * (v80 & 0x7FFFFFF);
              v82 = *(_QWORD *)(v79 + 40);
              if (v82 == v79 + 40)
              {
                v84 = 0;
              }
              else
              {
                if (v82)
                  v83 = v82 - 24;
                else
                  v83 = 0;
                if (*(unsigned __int8 *)(v83 + 16) - 29 >= 0xB)
                  v84 = 0;
                else
                  v84 = v83;
              }
              v85 = *(_QWORD *)(v81 + v74);
              v86 = v119;
              if (v119 >= (unint64_t)v120)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, (uint64_t)v121, v119 + 1, 16);
                v86 = v119;
              }
              v87 = &v118[16 * v86];
              *(_QWORD *)v87 = v85;
              *((_QWORD *)v87 + 1) = v84;
              ++v119;
              a1 = v98;
            }
            v75 += 8;
            v74 += 32;
          }
          while (v76 != v75);
        }
        a7 = v94;
        goto LABEL_130;
      case 21:
        v31 = (llvm::Argument *)v17;
        break;
      default:
        v31 = 0;
        break;
    }
    v105 = (uint64_t)v31;
    if (v31 && (llvm::Argument::hasPassPointeeByValueCopyAttr(v31) & 1) == 0)
    {
      v113 = (uint64_t)v114 + 8;
      *(_QWORD *)&v114[0] = 0x300000000;
      v102 = 0;
      v107 = (uint64_t)&v105;
      v108.i64[0] = (uint64_t)&v113;
      v32 = llvm::Attributor::checkForAllCallSites((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t *))sub_1C5693728, (uint64_t)&v107, *(_QWORD *)(v105 + 24), 1, (uint64_t)a4, &v102);
      v33 = v32;
      v34 = 0;
      if (v32)
      {
        sub_1C612E234((unsigned int *)&v118, (_BYTE *)v113, (_BYTE *)(v113 + 16 * LODWORD(v114[0])));
        v34 = 3;
      }
      if ((_OWORD *)v113 != (_OWORD *)((char *)v114 + 8))
        free((void *)v113);
      if ((v33 & 1) != 0)
        goto LABEL_128;
    }
    if (*(_BYTE *)(v17 + 16) != 60)
      goto LABEL_127;
    LOBYTE(v105) = 0;
    if (*(_QWORD *)(v17 - 32) == v96)
      goto LABEL_127;
    v113 = 1;
    v114[0] = v95;
    v114[1] = v95;
    v115 = (int64_t *)v117;
    v116 = 0x400000000;
    v107 = 1;
    v108 = v95;
    v109 = v95;
    v110 = v112;
    v111 = 0x400000000;
    v35 = 1;
    if (!llvm::AA::getPotentiallyLoadedValues(a1, v17, &v113, &v107, a4, (BOOL *)&v105, 1))
    {
      v34 = 0;
      goto LABEL_119;
    }
    if (!(_DWORD)v116)
    {
      v35 = 0;
      v34 = 3;
      goto LABEL_119;
    }
    v36 = v115;
    v37 = 8 * v116;
    do
    {
      v35 = 1;
      if (!llvm::AA::isDynamicallyUnique(a1, a4, *v36, (const llvm::Value *)1))
      {
        v34 = 0;
LABEL_118:
        a7 = v94;
        goto LABEL_119;
      }
      ++v36;
      v37 -= 8;
    }
    while (v37);
    if (!(_DWORD)v116)
    {
      v35 = 0;
      v34 = 3;
      goto LABEL_118;
    }
    v38 = v115;
    v39 = v119;
    v40 = 8 * v116;
    a7 = v94;
    do
    {
      v41 = *v38;
      if (v39 >= v120)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, (uint64_t)v121, v39 + 1, 16);
        v39 = v119;
      }
      v42 = &v118[16 * v39];
      *(_QWORD *)v42 = v41;
      *((_QWORD *)v42 + 1) = v18;
      v39 = ++v119;
      ++v38;
      v40 -= 8;
    }
    while (v40);
    v35 = 0;
    v34 = 3;
    a1 = v98;
LABEL_119:
    if (v110 != v112)
      free(v110);
    if ((v107 & 1) == 0)
      MEMORY[0x1CAA32FB4](v108.i64[0], 8);
    if (v115 != (int64_t *)v117)
      free(v115);
    if ((v113 & 1) == 0)
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v114[0], 8);
      if (!v35)
        goto LABEL_128;
LABEL_127:
      v34 = a6(a7, v17, v18, a5, (int)v14 > 0) ^ 1;
      goto LABEL_128;
    }
    if (v35)
      goto LABEL_127;
LABEL_128:
    if (v34 != 3 && v34)
      goto LABEL_142;
LABEL_130:
    v15 = v119;
    v14 = v19;
  }
  while (v119);
  if ((_DWORD)v127)
  {
    v92 = 24 * v127;
    v93 = v126 + 2;
    do
    {
      if (*v93)
        llvm::Attributor::recordDependence((uint64_t)a1, *((_QWORD *)v93 - 1), (uint64_t)a4, 1);
      v93 += 24;
      v92 -= 24;
    }
    while (v92);
  }
  v90 = 1;
LABEL_143:
  if (v118 != (char *)v121)
    free(v118);
  sub_1C6143384(v124[0]);
  if (v122[0] != v123)
    free(v122[0]);
  if (v126 != v128)
    free(v126);
  if ((v125[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v125[1], 8);
  return v90;
}

BOOL sub_1C5693728(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  void *v10[2];
  uint64_t v11;

  v9 = *(_QWORD *)a2;
  v10[0] = &v11;
  v10[1] = 0;
  if (*(_DWORD *)(a2 + 16))
    sub_1C614C900((uint64_t)v10, a2 + 8);
  v3 = sub_1C6284A2C(&v9, *(_DWORD *)(*(_QWORD *)*a1 + 32));
  if (v3)
  {
    v4 = a1[1];
    v5 = v9;
    v6 = *(unsigned int *)(v4 + 8);
    if (v6 >= *(_DWORD *)(v4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v4 + 16, v6 + 1, 16);
      LODWORD(v6) = *(_DWORD *)(v4 + 8);
    }
    v7 = (uint64_t *)(*(_QWORD *)v4 + 16 * v6);
    *v7 = v3;
    v7[1] = v5;
    ++*(_DWORD *)(v4 + 8);
  }
  if (v10[0] != &v11)
    free(v10[0]);
  return v3 != 0;
}

uint64_t sub_1C56937F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v5;

  v2 = *a1;
  v3 = (_DWORD *)a1[1];
  if (*(_BYTE *)(a2 + 16))
  {
    if (!*(_BYTE *)(v2 + 112))
      *v3 = 0;
    if (!*(_BYTE *)(v2 + 113))
      *v3 = 0;
    *(_WORD *)(v2 + 112) = 257;
  }
  else
  {
    v5 = a2;
    if (sub_1C567D3D8((_QWORD *)(v2 + 64), &v5))
      *v3 = 0;
  }
  return 1;
}

_QWORD *sub_1C5693864(_QWORD *a1)
{
  sub_1C628CE68(a1 + 4);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56938A4(_QWORD *a1)
{
  sub_1C628CE68(a1 + 4);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56938F4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  std::string::size_type v10;
  unint64_t *v11;
  std::string::size_type v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string::size_type *i;
  unint64_t *v19;
  const std::string::value_type *v20;
  unint64_t *v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type size;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  std::string::size_type v37;
  unint64_t *v38;
  std::string::size_type v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  std::string::size_type *j;
  unint64_t *v46;
  const std::string::value_type *v47;
  unint64_t *v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(unsigned int *)(a1 + 64);
  v6 = (unint64_t *)(v4 + 16 * v5);
  if (*(_DWORD *)(a1 + 56))
  {
    if ((_DWORD)v5)
    {
      v7 = 16 * v5;
      v8 = *(unint64_t **)(a1 + 48);
      while (*v8 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v8 += 2;
        v7 -= 16;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = *(unint64_t **)(a1 + 48);
    }
  }
  else
  {
LABEL_6:
    v8 = (unint64_t *)(v4 + 16 * v5);
  }
  v9 = (unint64_t *)(v4 + 16 * v5);
  memset(&v54, 0, sizeof(v54));
  if (v8 != v9)
  {
    v10 = 0;
    v11 = v8;
    do
    {
      v12 = v10++;
      v13 = v11 + 2;
      while (v13 != v6)
      {
        v14 = *v13;
        v13 += 2;
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v11 = v13 - 2;
          goto LABEL_15;
        }
      }
      v11 = v6;
LABEL_15:
      ;
    }
    while (v11 != v9);
    v15 = v8;
    do
    {
      v12 += v15[1];
      v16 = v15 + 2;
      while (v16 != v6)
      {
        v17 = *v16;
        v16 += 2;
        if (v17 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v15 = v16 - 2;
          goto LABEL_22;
        }
      }
      v15 = v6;
LABEL_22:
      ;
    }
    while (v15 != v9);
    std::string::reserve(&v54, v12);
    for (i = v8 + 1; ; i = v21 + 1)
    {
      v20 = (const std::string::value_type *)*v8;
      v19 = v8 + 2;
      std::string::append(&v54, v20, *i);
      while (1)
      {
        v21 = v19;
        if (v19 == v6)
          break;
        v19 += 2;
        if (*v21 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v8 = v21;
          goto LABEL_29;
        }
      }
      v8 = v6;
LABEL_29:
      if (v8 == v9)
        break;
      std::string::append(&v54, ",", 1uLL);
    }
  }
  if (*(_BYTE *)(a1 + 72))
  {
    *((_BYTE *)&v53.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v53, "Universal");
  }
  else
  {
    v31 = *(_QWORD *)(a1 + 80);
    v32 = *(unsigned int *)(a1 + 96);
    v33 = (unint64_t *)(v31 + 16 * v32);
    if (*(_DWORD *)(a1 + 88))
    {
      if ((_DWORD)v32)
      {
        v34 = 16 * v32;
        v35 = *(unint64_t **)(a1 + 80);
        while (*v35 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v35 += 2;
          v34 -= 16;
          if (!v34)
            goto LABEL_57;
        }
      }
      else
      {
        v35 = *(unint64_t **)(a1 + 80);
      }
    }
    else
    {
LABEL_57:
      v35 = (unint64_t *)(v31 + 16 * v32);
    }
    v36 = (unint64_t *)(v31 + 16 * v32);
    memset(&v53, 0, sizeof(v53));
    if (v35 != v36)
    {
      v37 = 0;
      v38 = v35;
      do
      {
        v39 = v37++;
        v40 = v38 + 2;
        while (v40 != v33)
        {
          v41 = *v40;
          v40 += 2;
          if (v41 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v38 = v40 - 2;
            goto LABEL_66;
          }
        }
        v38 = v33;
LABEL_66:
        ;
      }
      while (v38 != v36);
      v42 = v35;
      do
      {
        v39 += v42[1];
        v43 = v42 + 2;
        while (v43 != v33)
        {
          v44 = *v43;
          v43 += 2;
          if (v44 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v42 = v43 - 2;
            goto LABEL_73;
          }
        }
        v42 = v33;
LABEL_73:
        ;
      }
      while (v42 != v36);
      std::string::reserve(&v53, v39);
      for (j = v35 + 1; ; j = v48 + 1)
      {
        v47 = (const std::string::value_type *)*v35;
        v46 = v35 + 2;
        std::string::append(&v53, v47, *j);
        while (1)
        {
          v48 = v46;
          if (v46 == v33)
            break;
          v46 += 2;
          if (*v48 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v35 = v48;
            goto LABEL_80;
          }
        }
        v35 = v33;
LABEL_80:
        if (v35 == v36)
          break;
        std::string::append(&v53, ",", 1uLL);
      }
    }
  }
  std::operator+<char>();
  v22 = std::string::append(&v49, "],");
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v50, " Assumed [");
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v53;
  else
    v26 = (std::string *)v53.__r_.__value_.__r.__words[0];
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v53.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v53.__r_.__value_.__l.__size_;
  v28 = std::string::append(&v51, (const std::string::value_type *)v26, size);
  v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v52, "]");
  *a2 = *v30;
  v30->__r_.__value_.__r.__words[0] = 0;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
}

uint64_t sub_1C5693CF8(uint64_t a1)
{
  llvm::LLVMContext ***v3;

  if (*(_BYTE *)(a1 + 40))
    return 1;
  v3 = (llvm::LLVMContext ***)sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  return llvm::addAssumptions(v3, a1 + 48) ^ 1;
}

BOOL sub_1C5693D3C(_BYTE *a1, uint64_t a2)
{
  char v4;
  _QWORD v5[3];
  char v6;

  v6 = 0;
  v5[0] = a2;
  v5[1] = a1;
  v5[2] = &v6;
  if ((llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C5693E98, (uint64_t)v5, (uint64_t)a1, 1, &v4) & 1) != 0)return v6 == 0;
  a1[104] = 1;
  a1[72] = a1[40];
  sub_1C4DFEB14((uint64_t)(a1 + 80), (uint64_t)(a1 + 48));
  return 0;
}

uint64_t sub_1C5693DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v3 = a1 + 32;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  if ((_DWORD)result)
    return sub_1C628CF18(v3, (uint64_t)v5);
  return result;
}

uint64_t *sub_1C5693E14(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1C628CE68(a1);
  *(v1 - 4) = &unk_1E8172998;
  return sub_1C6286C70(v1 - 3);
}

void sub_1C5693E3C(_QWORD *a1)
{
  sub_1C628CE68(a1);
  *(a1 - 4) = &unk_1E8172998;
  sub_1C6286C70(a1 - 3);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5693E98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  llvm::AbstractAttribute *v7;
  uint64_t v9;
  void *v10[2];
  uint64_t v11;

  v4 = *(_QWORD *)a2;
  v9 = v4;
  v10[0] = &v11;
  v10[1] = 0;
  if (*(_DWORD *)(a2 + 16))
  {
    sub_1C614C900((uint64_t)v10, a2 + 8);
    v4 = v9;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = 1;
  v7 = sub_1C5686F3C(*(_QWORD *)a1, v4, 0, v5, 0, 0, 1);
  **(_BYTE **)(a1 + 16) |= sub_1C5693F70(v5 + 32, (uint64_t)v7 + 72);
  if (!*(_DWORD *)(v5 + 88) && !*(_BYTE *)(v5 + 72) && !*(_DWORD *)(v5 + 56))
    v6 = *(_BYTE *)(v5 + 40) != 0;
  if (v10[0] != &v11)
    free(v10[0]);
  return v6;
}

BOOL sub_1C5693F70(uint64_t a1, uint64_t a2)
{
  int v3;
  char v4;

  v3 = *(_DWORD *)(a1 + 56);
  sub_1C628CEAC(a1 + 40, a2);
  if (*(unsigned __int8 *)(a1 + 8) | *(unsigned __int8 *)(a1 + 40))
  {
    v4 = 1;
  }
  else
  {
    sub_1C5324B90(a1 + 48, a1 + 16);
    v4 = *(_BYTE *)(a1 + 40) | *(_BYTE *)(a1 + 8);
  }
  *(_BYTE *)(a1 + 40) = v4;
  return v3 != *(_DWORD *)(a1 + 56);
}

uint64_t sub_1C5693FD8(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v11;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  v5 = *(_QWORD *)result + 16 * v4;
  if (*(_DWORD *)(result + 8))
  {
    if ((_DWORD)v4)
    {
      v6 = 16 * v4;
      v7 = *(unint64_t **)result;
      while (*v7 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_6;
      }
    }
    else
    {
      v7 = *(unint64_t **)result;
    }
  }
  else
  {
LABEL_6:
    v7 = (unint64_t *)(*(_QWORD *)result + 16 * v4);
  }
  if (v7 != (unint64_t *)(*(_QWORD *)result + 16 * v4))
  {
    do
    {
      v8 = (uint64_t)v7;
      v9 = v7 + 2;
      while (v9 != (unint64_t *)v5)
      {
        v10 = *v9;
        v9 += 2;
        if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v7 = v9 - 2;
          goto LABEL_14;
        }
      }
      v7 = (unint64_t *)v5;
LABEL_14:
      v11 = 0;
      result = sub_1C4FAA4F0(a2, v8, &v11);
      if ((result & 1) == 0)
      {
        v11 = 0;
        result = sub_1C4FAA4F0((uint64_t *)v3, v8, &v11);
        if ((_DWORD)result)
        {
          *v11 = xmmword_1C85FAB10;
          *(int32x2_t *)(v3 + 8) = vadd_s32(*(int32x2_t *)(v3 + 8), (int32x2_t)0x1FFFFFFFFLL);
        }
      }
    }
    while (v7 != (unint64_t *)(*(_QWORD *)v3 + 16 * *(unsigned int *)(v3 + 16)));
  }
  return result;
}

_QWORD *sub_1C5694100(_QWORD *a1)
{
  sub_1C628CE68(a1 + 4);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5694140(_QWORD *a1)
{
  sub_1C628CE68(a1 + 4);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::AbstractAttribute *sub_1C5694190(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t *v5;

  v3 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v3 = *(_QWORD *)(v3 + 24);
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (*(_BYTE *)(v3 + 16))
  {
    if (v4 == 21)
    {
      v5 = (unint64_t *)(v3 + 24);
    }
    else
    {
      if (v4 < 0x1C)
      {
        v3 = 0;
        return sub_1C5686F3C(a2, v3, 0, a1, 0, 0, 1);
      }
      v5 = (unint64_t *)(*(_QWORD *)(v3 + 40) + 56);
    }
    v3 = *v5;
  }
  return sub_1C5686F3C(a2, v3, 0, a1, 0, 0, 1);
}

uint64_t sub_1C56941FC(uint64_t a1)
{
  uint64_t ***v3;

  if (*(_BYTE *)(a1 + 40))
    return 1;
  v3 = (uint64_t ***)sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  return llvm::addAssumptions(v3, a1 + 80) ^ 1;
}

BOOL sub_1C5694240(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t *v6;
  llvm::AbstractAttribute *v7;

  v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v4 = *(_QWORD *)(v4 + 24);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (*(_BYTE *)(v4 + 16))
  {
    if (v5 == 21)
    {
      v6 = (unint64_t *)(v4 + 24);
    }
    else
    {
      if (v5 < 0x1C)
      {
        v4 = 0;
        goto LABEL_10;
      }
      v6 = (unint64_t *)(*(_QWORD *)(v4 + 40) + 56);
    }
    v4 = *v6;
  }
LABEL_10:
  v7 = sub_1C5686F3C(a2, v4, 0, a1, 0, 0, 1);
  return !sub_1C5693F70(a1 + 32, (uint64_t)v7 + 72);
}

uint64_t *sub_1C56942DC(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1C628CE68(a1);
  *(v1 - 4) = &unk_1E8172998;
  return sub_1C6286C70(v1 - 3);
}

void sub_1C5694304(_QWORD *a1)
{
  sub_1C628CE68(a1);
  *(a1 - 4) = &unk_1E8172998;
  sub_1C6286C70(a1 - 3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5694350(uint64_t a1, _OWORD *a2)
{
  llvm::IRPosition *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v3 = (llvm::IRPosition *)(a1 + 16);
  *(_OWORD *)(a1 + 16) = *a2;
  *(_WORD *)(a1 + 40) = 256;
  *(_QWORD *)a1 = off_1E8174280;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = &unk_1E8174308;
  v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v4 = *(_QWORD *)(v4 + 24);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (*(_BYTE *)(v4 + 16))
  {
    if (v5 == 21)
    {
      v6 = (unint64_t *)(v4 + 24);
LABEL_8:
      v4 = *v6;
      goto LABEL_10;
    }
    if (v5 >= 0x1C)
    {
      v6 = (unint64_t *)(*(_QWORD *)(v4 + 40) + 56);
      goto LABEL_8;
    }
    v4 = 0;
  }
LABEL_10:
  v7 = sub_1C6284150(v3);
  v8 = *(_DWORD *)(*(_QWORD *)v7 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v7 + 16) + 8);
  v10 = v4 && (v9 = *(_QWORD *)(v4 + 112)) != 0 && (*(_BYTE *)(v9 + 17) & 1) != 0 || v8 > 0xFF;
  *(_BYTE *)(a1 + 42) = v10;
  return a1;
}

_QWORD *sub_1C5694430(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5694464(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56944A8(uint64_t a1, _QWORD *a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  _QWORD *result;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *i;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *j;
  uint64_t v28;
  BOOL v29[2];
  uint64_t (**v30)();
  __int16 v31;
  uint64_t (**v32)();
  __int16 v33;
  void **v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[32];
  _QWORD v38[2];
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  if (!*(_BYTE *)(a1 + 42))
  {
    v38[0] = 0x4C00000027;
    if (llvm::IRPosition::hasAttr(v4, (int *)v38, 2, 0, (uint64_t)a2))
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
  }
  if (*(_BYTE *)(v5 + 16) == 19)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  sub_1C628D16C(a1, (uint64_t)a2);
  *(_WORD *)v29 = 0;
  if (llvm::Value::getPointerDereferenceableBytes((uint64_t ***)v5, *(const llvm::DataLayout **)(a2[11] + 120), &v29[1], v29))
  {
    v7 = !v29[1];
  }
  else
  {
    v7 = 0;
  }
  if (v7)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
  if (*(unsigned __int8 *)(sub_1C6284150(v4) + 16) <= 3u)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  result = (_QWORD *)sub_1C5676CEC(v4);
  if (result)
  {
    v8 = (unint64_t)result;
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v38[0] = 0;
    v38[1] = 0;
    v39 = 0;
    v42 = 0;
    v40 = 0;
    v41 = 0;
    for (i = *(_QWORD **)(sub_1C6284150(v4) + 8); i; i = (_QWORD *)i[1])
    {
      v35 = i;
      sub_1C542EB4C(v38, &v35);
    }
    v11 = a2[11] + 136;
    sub_1C5694AC8(a1, a2, v11, v8, v38, v9);
    v28 = v9;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9) & 1) == 0)
    {
      v34 = &v35;
      v35 = v37;
      v36 = 0x400000000;
      sub_1C5694C5C(v11, v8, (unsigned int (*)(uint64_t))sub_1C5695868, (uint64_t)&v34);
      v12 = (char *)v35;
      if ((_DWORD)v36)
      {
        v13 = (char *)v35 + 8 * v36;
        do
        {
          v14 = *(_QWORD *)v12;
          v32 = &off_1E8172AE8;
          v33 = 257;
          v15 = *(_DWORD *)(v14 + 20);
          if ((v15 & 0x40000000) != 0)
          {
            v17 = *(_QWORD *)(v14 - 8);
            v16 = v15 & 0x7FFFFFF;
          }
          else
          {
            v16 = v15 & 0x7FFFFFF;
            v17 = v14 - 32 * v16;
          }
          v18 = (_DWORD)v16 == 3;
          if (v16 == v18)
          {
            v19 = 1;
          }
          else
          {
            v20 = v13;
            v21 = (uint64_t *)(v17 + 32 * v16);
            v22 = (uint64_t *)(v17 + 32 * v18);
            do
            {
              v23 = *v22;
              v31 = 256;
              v30 = &off_1E8172AE8;
              v24 = &v41[-v40];
              v25 = *(_QWORD *)(v23 + 48);
              if (v25)
                v26 = v25 - 24;
              else
                v26 = 0;
              sub_1C5694AC8(a1, a2, v11, v26, v38, (uint64_t)&v30);
              for (j = &v24[v40]; v41 != j; j = sub_1C628D264((uint64_t)v38, j))
                ;
              ((void (*)(uint64_t, char, char))v32[9])((uint64_t)&v32, SHIBYTE(v31), v31);
              v22 += 4;
            }
            while (v22 != v21);
            v19 = v33;
            v13 = v20;
            v9 = v28;
          }
          (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v9 + 56))(v9, v19 != 0);
          v12 += 8;
        }
        while (v12 != v13);
        v12 = (char *)v35;
      }
      if (v12 != v37)
        free(v12);
    }
    return sub_1C6176BF8(v38);
  }
  return result;
}

void *sub_1C56947F4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "nonnull";
  else
    v3 = "may-null";
  if (*(_BYTE *)(a1 + 41))
    v4 = 7;
  else
    v4 = 8;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

void sub_1C5694848()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3090);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3090))
      __cxa_guard_release(&qword_1EF8F3090);
  }
}

uint64_t sub_1C5694888(_QWORD *a1, llvm::Attributor *a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _BOOL4 v20;
  BOOL v22;
  uint64_t (**v23)();
  __int16 v24;
  _QWORD v25[5];
  uint64_t v26;
  uint64_t v27;

  v4 = *((_QWORD *)a2 + 11);
  v5 = *(_QWORD *)(v4 + 120);
  v27 = 0;
  v26 = 0;
  v6 = a1 + 2;
  v7 = a1[2];
  v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*((_DWORD *)a1 + 4) & 3) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (!*(_BYTE *)(v8 + 16))
    goto LABEL_9;
  if (v9 == 21)
  {
    v10 = (unint64_t *)(v8 + 24);
  }
  else
  {
    if (v9 < 0x1C)
      goto LABEL_22;
    v10 = (unint64_t *)(*(_QWORD *)(v8 + 40) + 56);
  }
  v8 = *v10;
  if (*v10)
  {
LABEL_9:
    v11 = **(_QWORD **)(v4 + 440);
    v12 = *(_QWORD *)(v8 + 40);
    if (v11)
      v13 = v12 == 0;
    else
      v13 = 1;
    if (v13)
    {
      v14 = 0;
    }
    else
    {
      v14 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v11, &llvm::DominatorTreeAnalysis::Key, v8) + 8;
      v11 = **(_QWORD **)(v4 + 440);
      v12 = *(_QWORD *)(v8 + 40);
    }
    v27 = v14;
    if (v11)
      v15 = v12 == 0;
    else
      v15 = 1;
    if (v15)
      v16 = 0;
    else
      v16 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v11, &llvm::AssumptionAnalysis::Key, v8) + 8;
    v26 = v16;
    v7 = *(_QWORD *)v6;
  }
LABEL_22:
  v25[0] = a2;
  v25[1] = a1;
  v25[2] = v5;
  v25[3] = &v26;
  v25[4] = &v27;
  v24 = 256;
  v23 = &off_1E8172AE8;
  v22 = 0;
  v17 = a1[3];
  v18 = sub_1C5676CEC(v6);
  if ((sub_1C56958F0(a2, v7, v17, (const llvm::AbstractAttribute *)a1, (uint64_t)&v23, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, BOOL))sub_1C5696484, (uint64_t)v25, v18, &v22) & 1) == 0)return (*(uint64_t (**)(_QWORD *))(a1[4] + 40))(a1 + 4);
  v19 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  v20 = v19[9] == 0;
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v19 + 48))(v19, HIBYTE(v24));
  return v20 ^ (v19[9] != 0);
}

uint64_t *sub_1C5694A58(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C5694A70(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5694AC8(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  char v21;
  uint64_t v23;
  _QWORD v24[2];
  int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28[2];
  int v29;
  __int128 v30;
  __int128 v31;
  char v32;

  v11 = sub_1C61AA84C(a3, a4);
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  sub_1C4DFE328((uint64_t)v28, v11);
  v12 = *(_OWORD *)(v11 + 24);
  v31 = *(_OWORD *)(v11 + 40);
  v30 = v12;
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  sub_1C4DFE328((uint64_t)v24, a3 + 176);
  v13 = *(_OWORD *)(a3 + 216);
  v26 = *(_OWORD *)(a3 + 200);
  v27 = v13;
  v14 = a5[3];
  if (a5[4] != v14)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(v14 + 8 * v15);
      v18 = *(_QWORD *)(v17 + 24);
      if (v18)
        v19 = *(unsigned __int8 *)(v18 + 16) >= 0x1Cu;
      else
        v19 = 0;
      if (v19)
      {
        if (sub_1C62844FC(a3, *(_QWORD *)(v17 + 24), v28, v24))
        {
          LOBYTE(v23) = 0;
          v32 = 0;
          v20 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
          sub_1C5694D44(a2, a1, v20, (uint64_t *)v17, (llvm::MemoryLocation *)v18, &v23, &v32);
          v21 = v23;
          *(_BYTE *)(a6 + 8) |= v23;
          *(_BYTE *)(a6 + 9) |= v21;
          if (v32)
          {
            while (1)
            {
              v18 = *(_QWORD *)(v18 + 8);
              if (!v18)
                break;
              v23 = v18;
              sub_1C542EB4C(a5, &v23);
            }
          }
        }
      }
      v14 = a5[3];
      v15 = ++v16;
    }
    while (v16 < (unint64_t)((a5[4] - v14) >> 3));
  }
  MEMORY[0x1CAA32FB4](v24[0], 8);
  return MEMORY[0x1CAA32FB4](v28[0], 8);
}

uint64_t sub_1C5694C5C(uint64_t a1, unint64_t a2, unsigned int (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  uint64_t i;
  llvm::MustBeExecutedIterator *v10;
  _QWORD v12[2];
  int v13;
  _BYTE v14[32];
  _QWORD v15[2];
  int v16;
  __int128 v17;
  __int128 v18;

  v7 = sub_1C61AA84C(a1, a2);
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  sub_1C4DFE328((uint64_t)v15, v7);
  v8 = *(_OWORD *)(v7 + 40);
  v17 = *(_OWORD *)(v7 + 24);
  v18 = v8;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  sub_1C4DFE328((uint64_t)v12, a1 + 176);
  *(_OWORD *)v14 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)&v14[16] = *(_OWORD *)(a1 + 216);
  for (i = *((_QWORD *)&v17 + 1);
        (__PAIR128__(v18, i) != *(_OWORD *)&v14[8] || *((_QWORD *)&v18 + 1) != *(_QWORD *)&v14[24]) && a3(a4);
        *((_QWORD *)&v17 + 1) = i)
  {
    i = llvm::MustBeExecutedIterator::advance((llvm::MustBeExecutedIterator *)v15, v10);
  }
  MEMORY[0x1CAA32FB4](v12[0], 8);
  return MEMORY[0x1CAA32FB4](v15[0], 8);
}

uint64_t sub_1C5694D44(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, llvm::MemoryLocation *this, _BYTE *a6, _BYTE *a7)
{
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  int v25;
  char *v26;
  uint64_t v27;
  llvm::AbstractAttribute *v28;
  uint64_t v29;
  llvm::DataLayout *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  const void *v47;
  unsigned int IndexTypeSizeInBits;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  *a7 = 0;
  v7 = (uint64_t *)*a4;
  v8 = *(_QWORD *)*a4;
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 != 15)
    return 0;
  v11 = *((unsigned __int8 *)this + 16);
  if ((v11 - 66) <= 0xC || v11 == 62)
  {
    result = 0;
    *a7 = 1;
    return result;
  }
  v17 = *(_QWORD *)(*((_QWORD *)this + 5) + 56);
  if (v17)
  {
    if ((v9 & 0xFE) == 0x12)
      v9 = *(_DWORD *)(**(_QWORD **)(v8 + 16) + 8);
    v18 = *(_QWORD *)(v17 + 112);
    v19 = v18 && (*(_BYTE *)(v18 + 17) & 1) != 0 || v9 > 0xFF;
    v20 = !v19;
  }
  else
  {
    v20 = 0;
  }
  v21 = v11 - 33;
  v22 = v21 > 0x33;
  v23 = (1 << v21) & 0x8000000000041;
  if (v22 || v23 == 0)
  {
    v30 = *(llvm::DataLayout **)(a1[11] + 120);
    llvm::MemoryLocation::getOrNone((uint64_t ***)this, (uint64_t)&v44);
    result = 0;
    if (!v46 || v44 != v7)
      return result;
    if (v45 < 0 || (llvm::Instruction::isVolatile(this) & 1) != 0)
      return 0;
    v31 = (uint64_t)v44;
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v30, *v44);
    if (IndexTypeSizeInBits > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v47, 0, 0);
    else
      v47 = 0;
    v50 = 1;
    v49 = 0;
    v51 = (uint64_t)a1;
    v52 = a2;
    v53 = &v49;
    v54 = &v50;
    v32 = llvm::Value::stripAndAccumulateConstantOffsets(v31, v30, &v47, 0, 1, (unsigned int (*)(uint64_t))sub_1C5695154, (uint64_t)&v51);
    if (IndexTypeSizeInBits > 0x40)
    {
      v33 = *(_QWORD *)v47;
      MEMORY[0x1CAA32F9C]();
    }
    else
    {
      v33 = (uint64_t)((_QWORD)v47 << -(uint64_t)IndexTypeSizeInBits) >> -(uint64_t)IndexTypeSizeInBits;
    }
    if (v32 && v32 == a3)
    {
      v34 = (v45 & 0x7FFFFFFFFFFFFFFFLL) + v33;
      *a6 |= v20;
      return v34 & ~(v34 >> 63);
    }
    v35 = (uint64_t)v44;
    LODWORD(v52) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v30, *v44);
    if (v52 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v51, 0, 0);
    else
      v51 = 0;
    v37 = llvm::Value::stripAndAccumulateConstantOffsets(v35, v30, (const void **)&v51, 1, 0, 0, v36);
    v38 = v37;
    if (v52 > 0x40)
    {
      v39 = *(_QWORD *)v51;
      MEMORY[0x1CAA32F9C]();
      if (!v38)
        return 0;
    }
    else
    {
      v39 = v51 << -(uint64_t)v52 >> -(uint64_t)v52;
      if (!v37)
        return 0;
    }
    result = 0;
    if (v38 != a3 || v39)
      return result;
    result = v45 & 0x7FFFFFFFFFFFFFFFLL;
LABEL_25:
    *a6 |= v20;
    return result;
  }
  v25 = *((_DWORD *)this + 5);
  if (v25 < 0)
  {
    v40 = (char *)this - 32 * (v25 & 0x7FFFFFF);
    v41 = *((_QWORD *)v40 - 1);
    if ((v41 & 0xFFFFFFFF0) != 0)
    {
      v42 = (unint64_t)((char *)a4 - v40) >> 5;
      if (*(_DWORD *)&v40[-v41] <= v42 && *((_DWORD *)v40 - 3) > v42)
      {
        v51 = 0x4C00000027;
        llvm::getKnowledgeFromUse(a4, &v51, 2, (uint64_t)&v44);
        if ((_DWORD)v44)
        {
          if ((_DWORD)v44 == 39)
            v43 = 1;
          else
            v43 = v20;
          *a6 |= v43;
          return v45;
        }
        return 0;
      }
    }
  }
  if ((uint64_t *)((char *)this - 32) == a4)
  {
    result = 0;
    goto LABEL_25;
  }
  v26 = (char *)this - 32 * (v25 & 0x7FFFFFF);
  v27 = (char *)a4 - v26;
  if ((v25 & 0x40000000) != 0)
    v26 = (char *)*((_QWORD *)this - 1);
  v28 = sub_1C5688C4C((uint64_t)a1, (unint64_t)&v26[v27 & 0x1FFFFFFFE0] | 3, 0, a2, 2, 0, 1);
  v29 = *((_QWORD *)v28 + 12);
  if (v29)
    LOBYTE(v29) = *(_BYTE *)(v29 + 40) != 0;
  *a6 |= v29;
  return *((unsigned int *)v28 + 12);
}

uint64_t sub_1C5695154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  llvm::AbstractAttribute *v12;
  llvm::AbstractAttribute *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v21;
  size_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  unsigned int v26;
  void *v27;
  unsigned int v28;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 21)
  {
    if (v5 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v6 = v5 - 33;
      v7 = v6 > 0x33;
      v8 = (1 << v6) & 0x8000000000041;
      if (!v7 && v8 != 0)
        a2 |= 1uLL;
    }
  }
  v10 = *(_QWORD *)a1;
  if (**(_BYTE **)(a1 + 16))
    v11 = 1;
  else
    v11 = 2;
  v12 = sub_1C5695480(v10, a2, 0, *(_QWORD *)(a1 + 8), v11);
  v13 = v12;
  if (**(_BYTE **)(a1 + 16))
  {
    v14 = *((unsigned int *)v12 + 14);
    v26 = v14;
    if (v14 > 0x40)
    {
      v15 = (void *)operator new[]();
      memcpy(v15, *((const void **)v13 + 6), ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v15 = (void *)*((_QWORD *)v12 + 6);
    }
    v25 = v15;
    v16 = *((unsigned int *)v13 + 18);
    v28 = v16;
    if (v16 > 0x40)
    {
      v21 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
      v17 = (void *)operator new[]();
      v27 = v17;
      memcpy(v17, *((const void **)v13 + 8), v21);
    }
    else
    {
      v17 = (void *)*((_QWORD *)v13 + 8);
      v27 = v17;
    }
  }
  else
  {
    v14 = *((unsigned int *)v12 + 22);
    v26 = v14;
    if (v14 > 0x40)
    {
      v15 = (void *)operator new[]();
      memcpy(v15, *((const void **)v13 + 10), ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v15 = (void *)*((_QWORD *)v12 + 10);
    }
    v25 = v15;
    v18 = *((unsigned int *)v13 + 26);
    v28 = v18;
    if (v18 > 0x40)
    {
      v22 = ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8;
      v17 = (void *)operator new[]();
      v27 = v17;
      memcpy(v17, *((const void **)v13 + 12), v22);
    }
    else
    {
      v17 = (void *)*((_QWORD *)v13 + 12);
      v27 = v17;
    }
  }
  if (v14 <= 0x40)
  {
    if (v17 != v15)
      goto LABEL_24;
    if ((_DWORD)v14)
    {
      v19 = 0;
      if (v17 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v14))
        goto LABEL_31;
      goto LABEL_24;
    }
LABEL_39:
    v19 = 0;
    goto LABEL_31;
  }
  if (!memcmp(v15, v17, (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v25) == (_DWORD)v14)
  {
    goto LABEL_39;
  }
LABEL_24:
  if (**(_BYTE **)(a1 + 24))
    llvm::ConstantRange::getSignedMin((uint64_t)&v25, (llvm::APInt *)&v23);
  else
    llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)&v25, (llvm::APInt *)&v23);
  if (*(_DWORD *)(a3 + 8) >= 0x41u && *(_QWORD *)a3)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
  *(_QWORD *)a3 = v23;
  *(_DWORD *)(a3 + 8) = v24;
  v19 = 1;
LABEL_31:
  if (v28 >= 0x41 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  if (v26 >= 0x41 && v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  return v19;
}

llvm::AbstractAttribute *sub_1C5695480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  llvm::Attributor *v9;
  llvm::AbstractAttribute *v10;
  uint64_t v11;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t *v17;
  uint64_t v18;
  _BOOL4 v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  void *p_p;
  void **v27;
  uint64_t *v28;
  const void *v29;
  size_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  void *v35[2];
  char v36;
  __int128 v37;
  void *__p;
  __int128 v39;

  if (byte_1ED831CE0)
    v8 = a3;
  else
    v8 = 0;
  *(_QWORD *)&v37 = a2;
  *((_QWORD *)&v37 + 1) = v8;
  __p = &llvm::AAValueConstantRange::ID;
  v39 = v37;
  v35[0] = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&__p, (uint64_t **)v35) & 1) != 0)
  {
    v10 = (llvm::AbstractAttribute *)*((_QWORD *)v35[0] + 3);
    if (v10)
    {
      if (!a4 || a5 == 2)
        return v10;
      goto LABEL_8;
    }
  }
  v10 = (llvm::AbstractAttribute *)llvm::AAValueConstantRange::createForPosition((llvm::AAValueConstantRange *)&v37, (const llvm::IRPosition *)a1, v9);
  sub_1C628D2EC(a1, (uint64_t)v10);
  v13 = *(uint64_t **)(a1 + 5480);
  if (v13)
  {
    __p = &llvm::AAValueConstantRange::ID;
    v35[0] = 0;
    v14 = sub_1C614F7B0(v13, &__p, v35) ^ 1;
  }
  else
  {
    v14 = 0;
  }
  v15 = v37 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v37 & 3) == 0)
    v15 = *(_QWORD *)(v15 + 24);
  v16 = *(unsigned __int8 *)(v15 + 16);
  if (!*(_BYTE *)(v15 + 16))
  {
LABEL_21:
    v18 = *(_QWORD *)(v15 + 112);
    if (v18 && ((*(_BYTE *)(v18 + 14) & 2) != 0 || (*(_BYTE *)(v18 + 17) & 8) != 0))
    {
      v19 = 1;
    }
    else if (*(_BYTE *)(a1 + 5464))
    {
      v19 = 0;
    }
    else
    {
      v21 = *(_QWORD **)(a1 + 88);
      v22 = sub_1C477672C((uint64_t)v21, v15);
      v23 = v21[1];
      v24 = 16;
      if (v23 == *v21)
        v24 = 20;
      v19 = v22 == (_QWORD *)(v23 + 8 * *(unsigned int *)((char *)v21 + v24));
    }
    v20 = 0;
    if (v19 | v14)
      goto LABEL_60;
    goto LABEL_34;
  }
  if (v16 == 21)
  {
    v17 = (unint64_t *)(v15 + 24);
  }
  else
  {
    if (v16 < 0x1C)
    {
      v15 = 0;
      goto LABEL_28;
    }
    v17 = (unint64_t *)(*(_QWORD *)(v15 + 40) + 56);
  }
  v15 = *v17;
  if (*v17)
    goto LABEL_21;
LABEL_28:
  v20 = 1;
  if ((v14 & 1) != 0)
    goto LABEL_60;
LABEL_34:
  if (*(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
  {
LABEL_60:
    v32 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v10 + 40))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    return v10;
  }
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v10 + 72))(v35, v10);
  if (v36 >= 0)
    v25 = v36 & 0x7F;
  else
    v25 = (size_t)v35[1];
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v25 + 12);
  if (v39 < 0)
    p_p = __p;
  if (v25)
  {
    if (v36 >= 0)
      v27 = v35;
    else
      v27 = (void **)v35[0];
    memmove(p_p, v27, v25);
  }
  strcpy((char *)p_p + v25, "::initialize");
  v28 = (uint64_t *)off_1EF8EEB50();
  if (*v28)
  {
    if (v39 >= 0)
      v29 = &__p;
    else
      v29 = __p;
    if (v39 >= 0)
      v30 = HIBYTE(v39) & 0x7F;
    else
      v30 = v39;
    llvm::timeTraceProfilerBegin(v29, v30, (uint64_t)"", 0);
  }
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  if (v36 < 0)
    operator delete(v35[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v10 + 24))(v10, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v28)
  {
    sub_1C6392DC0(*v28);
    if ((v20 & 1) != 0)
      goto LABEL_59;
  }
  else if ((v20 & 1) != 0)
  {
    goto LABEL_59;
  }
  v33 = *(uint64_t **)(a1 + 80);
  __p = (void *)v15;
  v35[0] = 0;
  if ((sub_1C614F7B0(v33, &__p, v35) & 1) == 0)
  {
    v34 = *(uint64_t **)(a1 + 80);
    __p = (void *)sub_1C5676C10((llvm::IRPosition *)&v37);
    v35[0] = 0;
    if ((sub_1C614F7B0(v34, &__p, v35) & 1) == 0)
      goto LABEL_60;
  }
LABEL_59:
  v31 = *(_DWORD *)(a1 + 4368);
  if (v31 == 2)
    goto LABEL_60;
  *(_DWORD *)(a1 + 4368) = 1;
  llvm::Attributor::updateAA((llvm::Attributor *)a1, v10);
  *(_DWORD *)(a1 + 4368) = v31;
  if (!a4)
    return v10;
LABEL_8:
  v11 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v10 + 40))(v10);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
    llvm::Attributor::recordDependence(a1, (uint64_t)v10, a4, a5);
  return v10;
}

uint64_t sub_1C5695868(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a2 && *(_BYTE *)(a2 + 16) == 30 && (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
  {
    v2 = *a1;
    v3 = *(unsigned int *)(*a1 + 8);
    if (v3 >= *(_DWORD *)(*a1 + 12))
    {
      v5 = a2;
      v6 = *a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2, v2 + 16, v3 + 1, 8);
      a2 = v5;
      v2 = v6;
      LODWORD(v3) = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v3) = a2;
    ++*(_DWORD *)(v2 + 8);
  }
  return 1;
}

uint64_t sub_1C56958F0(llvm::Attributor *a1, uint64_t a2, uint64_t a3, const llvm::AbstractAttribute *a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, unint64_t, uint64_t, BOOL), uint64_t a7, uint64_t a8, BOOL *a9)
{
  BOOL *v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  llvm::Argument *v31;
  int v32;
  char v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v41;
  unsigned int v42;
  unint64_t AssumedSimplified;
  char v44;
  uint64_t v45;
  int64_t *v46;
  uint64_t v47;
  int64_t *v48;
  unsigned int v49;
  int64_t v50;
  char *v51;
  llvm::UndefValue *AssumedConstant;
  char v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  __int128 v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  llvm::AbstractAttribute **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v99;
  _BYTE *v100;
  int64x2_t v101;
  unint64_t v102;
  llvm::AA *v106;
  char v108;
  unint64_t v109[2];
  _QWORD v110[2];
  uint64_t v111;
  int v112;
  uint64_t v113;
  int64x2_t v114;
  int64x2_t v115;
  void *v116;
  uint64_t v117;
  _BYTE v118[32];
  uint64_t v119;
  _OWORD v120[2];
  int64_t *v121;
  uint64_t v122;
  _BYTE v123[32];
  char *v124;
  unsigned int v125;
  unsigned int v126;
  _QWORD v127[32];
  void *v128[2];
  _QWORD v129[33];
  _QWORD *v130[2];
  _QWORD v131[9];
  uint64_t *v132;
  uint64_t v133;
  _QWORD v134[14];

  v11 = a9;
  v134[12] = *MEMORY[0x1E0C80C00];
  v110[0] = a2;
  v110[1] = a3;
  v131[0] = 1;
  for (i = 1; i != 9; i += 2)
    v131[i] = -4096;
  v132 = v134;
  v133 = 0x400000000;
  v13 = sub_1C6284150((llvm::IRPosition *)v110);
  v14 = 0;
  v128[0] = v129;
  v128[1] = (void *)0x1000000000;
  v130[1] = 0;
  v130[0] = 0;
  v129[32] = v130;
  v124 = (char *)v127;
  v126 = 16;
  v127[0] = v13;
  v127[1] = a8;
  v102 = v13;
  v101 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v15 = 1;
  v106 = a1;
  do
  {
    v16 = &v124[16 * v15];
    v17 = *((_QWORD *)v16 - 2);
    v18 = *((_QWORD *)v16 - 1);
    v125 = v15 - 1;
    v109[0] = v17;
    v109[1] = v18;
    if ((sub_1C568F35C((uint64_t)v128, v109) & 0x100000000) == 0)
    {
      v19 = v14;
      goto LABEL_93;
    }
    if ((int)v14 >= 16)
      goto LABEL_156;
    v19 = (v14 + 1);
    if (*(_BYTE *)(*(_QWORD *)v17 + 8) != 15)
    {
      v24 = *(unsigned __int8 *)(v17 + 16);
      if (v24 < 0x1C)
        goto LABEL_24;
      v25 = v24 - 33;
      v26 = v25 > 0x33;
      v27 = (1 << v25) & 0x8000000000041;
      if (v26 || v27 == 0)
        goto LABEL_24;
      v29 = *(_QWORD *)(v17 - 32);
      if (!v29 || *(_BYTE *)(v29 + 16) || *(_QWORD *)(v29 + 24) != *(_QWORD *)(v17 + 72))
        goto LABEL_24;
      if ((*(_WORD *)(v29 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(v17 - 32));
        v69 = *(_QWORD *)(v29 + 88);
        if ((*(_WORD *)(v29 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v29);
          v70 = *(_QWORD *)(v29 + 88);
LABEL_98:
          v71 = v70 + 40 * *(_QWORD *)(v29 + 96);
          while (v69 != v71)
          {
            v72 = *(_QWORD *)(*(_QWORD *)(v69 + 24) + 112);
            if (v72)
            {
              v73 = *(unsigned int *)(v69 + 32);
              if ((v73 + 2) < *(_DWORD *)(v72 + 8))
              {
                v74 = *(_QWORD *)(v72 + 8 * (v73 + 2) + 40);
                if (v74)
                {
                  if ((*(_BYTE *)(v74 + 17) & 0x40) != 0)
                  {
                    v20 = *(llvm::Value **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) + 32 * v73);
                    goto LABEL_9;
                  }
                }
              }
            }
            v69 += 40;
          }
          goto LABEL_24;
        }
      }
      else
      {
        v69 = *(_QWORD *)(v29 + 88);
      }
      v70 = v69;
      goto LABEL_98;
    }
    v20 = llvm::Value::stripPointerCasts((llvm::Value *)v17);
LABEL_9:
    if (v20)
      v21 = v20 == (llvm::Value *)v17;
    else
      v21 = 1;
    if (!v21)
    {
LABEL_13:
      v22 = v125;
      if (v125 >= (unint64_t)v126)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)v127, v125 + 1, 16);
        v22 = v125;
      }
      v23 = &v124[16 * v22];
      *(_QWORD *)v23 = v20;
      goto LABEL_92;
    }
LABEL_24:
    v30 = *(unsigned __int8 *)(v17 + 16);
    if (v30 != 85)
    {
      if (v30 == 83)
      {
        v61 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 56);
        v111 = v61;
        v112 = 0;
        sub_1C6281EE8((uint64_t)&v119, (uint64_t)v131, &v111, &v112);
        v62 = v119;
        if (BYTE8(v120[0]))
        {
          v114.i32[3] = 0;
          *(__int32 *)((char *)&v114.i32[2] + 1) = 0;
          v113 = v61;
          v114.i64[0] = 0;
          v114.i8[8] = 0;
          v63 = v132;
          if (v133 >= HIDWORD(v133))
          {
            v95 = v133 + 1;
            if (v132 <= &v113 && &v132[3 * v133] > &v113)
            {
              v96 = (char *)&v113 - (char *)v132;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, (uint64_t)v134, v95, 24);
              v63 = v132;
              v64 = (uint64_t *)((char *)v132 + v96);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, (uint64_t)v134, v95, 24);
              v64 = &v113;
              v63 = v132;
            }
          }
          else
          {
            v64 = &v113;
          }
          v65 = &v63[3 * v133];
          v66 = *(_OWORD *)v64;
          v65[2] = v64[2];
          *(_OWORD *)v65 = v66;
          v67 = v133;
          LODWORD(v133) = v133 + 1;
          *(_DWORD *)(v62 + 8) = v67;
        }
        else
        {
          v67 = *(_DWORD *)(v119 + 8);
        }
        v75 = v132;
        v76 = &v132[3 * v67];
        v78 = v76[1];
        v77 = (llvm::AbstractAttribute **)(v76 + 1);
        if (!v78)
          *v77 = sub_1C5677D4C((uint64_t)v106, v61, 0, (uint64_t)a4, 2, 0, 1);
        v79 = *(_DWORD *)(v17 + 20) & 0x7FFFFFF;
        if ((_DWORD)v79)
        {
          v80 = 0;
          v81 = 0;
          v82 = &v75[3 * v67 + 2];
          v83 = 8 * v79;
          do
          {
            v84 = *(_DWORD *)(v17 + 20);
            if ((v84 & 0x40000000) != 0)
              v85 = *(_QWORD *)(v17 - 8);
            else
              v85 = v17 - 32 * (v84 & 0x7FFFFFF);
            v86 = *(_QWORD *)(v85 + 32 * *(unsigned int *)(v17 + 60) + v81);
            if ((*(unsigned int (**)(llvm::AbstractAttribute *, uint64_t, _QWORD))(*(_QWORD *)*v77 + 168))(*v77, v86, *(_QWORD *)(v17 + 40)))
            {
              *(_BYTE *)v82 = 1;
              *v11 |= (*(unsigned __int8 (**)(uint64_t))(*((_QWORD *)*v77 + 4) + 24))((uint64_t)*v77 + 32) ^ 1;
            }
            else
            {
              v87 = *(_DWORD *)(v17 + 20);
              if ((v87 & 0x40000000) != 0)
                v88 = *(_QWORD *)(v17 - 8);
              else
                v88 = v17 - 32 * (v87 & 0x7FFFFFF);
              v89 = *(_QWORD *)(v86 + 40);
              if (v89 == v86 + 40)
              {
                v91 = 0;
              }
              else
              {
                if (v89)
                  v90 = v89 - 24;
                else
                  v90 = 0;
                if (*(unsigned __int8 *)(v90 + 16) - 29 >= 0xB)
                  v91 = 0;
                else
                  v91 = v90;
              }
              v92 = *(_QWORD *)(v88 + v80);
              v93 = v125;
              if (v125 >= (unint64_t)v126)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)v127, v125 + 1, 16);
                v93 = v125;
              }
              v94 = &v124[16 * v93];
              *(_QWORD *)v94 = v92;
              *((_QWORD *)v94 + 1) = v91;
              ++v125;
              v11 = a9;
            }
            v81 += 8;
            v80 += 32;
          }
          while (v83 != v81);
        }
        a1 = v106;
        goto LABEL_93;
      }
      if (v30 == 21)
        v31 = (llvm::Argument *)v17;
      else
        v31 = 0;
      v111 = (uint64_t)v31;
      if (v31 && (llvm::Argument::hasPassPointeeByValueCopyAttr(v31) & 1) == 0)
      {
        v119 = (uint64_t)v120 + 8;
        *(_QWORD *)&v120[0] = 0x300000000;
        v108 = 0;
        v113 = (uint64_t)&v111;
        v114.i64[0] = (uint64_t)&v119;
        v32 = llvm::Attributor::checkForAllCallSites((uint64_t)a1, (uint64_t (*)(uint64_t, uint64_t *))sub_1C56963B4, (uint64_t)&v113, *(_QWORD *)(v111 + 24), 1, (uint64_t)a4, &v108);
        v33 = v32;
        v34 = 0;
        if (v32)
        {
          sub_1C612E234((unsigned int *)&v124, (_BYTE *)v119, (_BYTE *)(v119 + 16 * LODWORD(v120[0])));
          v34 = 3;
        }
        if ((_OWORD *)v119 != (_OWORD *)((char *)v120 + 8))
          free((void *)v119);
        if ((v33 & 1) != 0)
          goto LABEL_38;
      }
      v35 = *(unsigned __int8 *)(v17 + 16);
      if (v35 < 0x15)
        goto LABEL_37;
      v41 = v17;
      if (v35 >= 0x1C)
      {
        v42 = v35 - 33;
        v41 = v17;
        if (v42 <= 0x33)
        {
          v41 = v17;
          if (((1 << v42) & 0x8000000000041) != 0)
            v41 = v17 | 1;
        }
      }
      v119 = v41;
      *(_QWORD *)&v120[0] = 0;
      AssumedSimplified = llvm::Attributor::getAssumedSimplified(a1, (const llvm::IRPosition *)&v119, a4, v11);
      if (!v44)
        goto LABEL_93;
      v20 = (llvm::Value *)AssumedSimplified;
      if (AssumedSimplified && v17 != AssumedSimplified)
        goto LABEL_13;
      if (*(_BYTE *)(v17 + 16) != 60)
        goto LABEL_37;
      LOBYTE(v111) = 0;
      if (*(_QWORD *)(v17 - 32) != v102)
      {
        v119 = 1;
        v120[0] = v101;
        v120[1] = v101;
        v121 = (int64_t *)v123;
        v122 = 0x400000000;
        v113 = 1;
        v114 = v101;
        v115 = v101;
        v116 = v118;
        v117 = 0x400000000;
        LODWORD(v45) = 1;
        if (llvm::AA::getPotentiallyLoadedValues(v106, v17, &v119, &v113, a4, (BOOL *)&v111, 1))
        {
          if ((_DWORD)v122)
          {
            v46 = v121;
            v47 = 8 * v122;
            do
            {
              LODWORD(v45) = 1;
              if (!llvm::AA::isDynamicallyUnique(v106, a4, *v46, (const llvm::Value *)1))
              {
                v34 = 0;
                goto LABEL_139;
              }
              ++v46;
              v47 -= 8;
            }
            while (v47);
            if ((_DWORD)v122)
            {
              v48 = v121;
              v49 = v125;
              v45 = 8 * v122;
              do
              {
                v50 = *v48;
                if (v49 >= v126)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)v127, v49 + 1, 16);
                  v49 = v125;
                }
                v51 = &v124[16 * v49];
                *(_QWORD *)v51 = v50;
                *((_QWORD *)v51 + 1) = v18;
                v49 = ++v125;
                ++v48;
                v45 -= 8;
              }
              while (v45);
            }
            else
            {
              LODWORD(v45) = 0;
            }
            v34 = 3;
          }
          else
          {
            LODWORD(v45) = 0;
            v34 = 3;
          }
        }
        else
        {
          v34 = 0;
        }
LABEL_139:
        if (v116 != v118)
          free(v116);
        if ((v113 & 1) == 0)
          MEMORY[0x1CAA32FB4](v114.i64[0], 8);
        if (v121 != (int64_t *)v123)
          free(v121);
        if ((v119 & 1) != 0)
        {
          if ((_DWORD)v45)
            goto LABEL_147;
        }
        else
        {
          MEMORY[0x1CAA32FB4](*(_QWORD *)&v120[0], 8);
          if ((_DWORD)v45)
            goto LABEL_147;
        }
        a1 = v106;
        goto LABEL_38;
      }
LABEL_147:
      a1 = v106;
LABEL_37:
      v34 = a6(a7, v17, v18, a5, (int)v14 > 0) ^ 1;
LABEL_38:
      if (v34 != 3 && v34)
      {
LABEL_156:
        v97 = 0;
        goto LABEL_157;
      }
      goto LABEL_93;
    }
    v36 = *(_QWORD *)(v17 - 96);
    v37 = *(unsigned __int8 *)(v36 + 16);
    if (v37 != 21)
    {
      if (v37 < 0x1C)
      {
        if (!*(_BYTE *)(v36 + 16))
          v36 |= 2uLL;
      }
      else
      {
        v38 = v37 - 33;
        v26 = v38 > 0x33;
        v39 = (1 << v38) & 0x8000000000041;
        if (!v26 && v39 != 0)
          v36 |= 1uLL;
      }
    }
    v119 = v36;
    *(_QWORD *)&v120[0] = 0;
    AssumedConstant = llvm::Attributor::getAssumedConstant(a1, (const llvm::IRPosition *)&v119, a4, v11);
    if (v53)
    {
      if (!AssumedConstant)
        goto LABEL_77;
      v54 = *((unsigned __int8 *)AssumedConstant + 16);
      if ((v54 - 11) < 2)
        goto LABEL_93;
      if (v54 == 16)
      {
        v55 = *((_DWORD *)AssumedConstant + 8);
        if (v55 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AssumedConstant + 24)) == v55)
            goto LABEL_87;
LABEL_76:
          v56 = *(_QWORD *)(v17 - 64);
        }
        else
        {
          if (*((_QWORD *)AssumedConstant + 3))
            goto LABEL_76;
LABEL_87:
          v56 = *(_QWORD *)(v17 - 32);
        }
        v68 = v125;
        if (v125 >= (unint64_t)v126)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)v127, v125 + 1, 16);
          v68 = v125;
        }
        v23 = &v124[16 * v68];
      }
      else
      {
LABEL_77:
        v57 = *(_QWORD *)(v17 - 64);
        v58 = v125;
        if (v125 >= (unint64_t)v126)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)v127, v125 + 1, 16);
          v58 = v125;
        }
        v59 = &v124[16 * v58];
        *(_QWORD *)v59 = v57;
        *((_QWORD *)v59 + 1) = v18;
        v60 = v125 + 1;
        v125 = v60;
        v56 = *(_QWORD *)(v17 - 32);
        if (v60 >= v126)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, (uint64_t)v127, v60 + 1, 16);
          LODWORD(v60) = v125;
        }
        v23 = &v124[16 * v60];
      }
      *(_QWORD *)v23 = v56;
LABEL_92:
      *((_QWORD *)v23 + 1) = v18;
      ++v125;
    }
LABEL_93:
    v15 = v125;
    v14 = v19;
  }
  while (v125);
  if ((_DWORD)v133)
  {
    v99 = 24 * v133;
    v100 = v132 + 2;
    do
    {
      if (*v100)
        llvm::Attributor::recordDependence((uint64_t)v106, *((_QWORD *)v100 - 1), (uint64_t)a4, 1);
      v100 += 24;
      v99 -= 24;
    }
    while (v99);
  }
  v97 = 1;
LABEL_157:
  if (v124 != (char *)v127)
    free(v124);
  sub_1C6143384(v130[0]);
  if (v128[0] != v129)
    free(v128[0]);
  if (v132 != v134)
    free(v132);
  if ((v131[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v131[1], 8);
  return v97;
}

BOOL sub_1C56963B4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  void *v10[2];
  uint64_t v11;

  v9 = *(_QWORD *)a2;
  v10[0] = &v11;
  v10[1] = 0;
  if (*(_DWORD *)(a2 + 16))
    sub_1C614C900((uint64_t)v10, a2 + 8);
  v3 = sub_1C6284A2C(&v9, *(_DWORD *)(*(_QWORD *)*a1 + 32));
  if (v3)
  {
    v4 = a1[1];
    v5 = v9;
    v6 = *(unsigned int *)(v4 + 8);
    if (v6 >= *(_DWORD *)(v4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v4 + 16, v6 + 1, 16);
      LODWORD(v6) = *(_DWORD *)(v4 + 8);
    }
    v7 = (uint64_t *)(*(_QWORD *)v4 + 16 * v6);
    *v7 = v3;
    v7[1] = v5;
    ++*(_DWORD *)(v4 + 8);
  }
  if (v10[0] != &v11)
    free(v10[0]);
  return v3 != 0;
}

uint64_t sub_1C5696484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  llvm::AbstractAttribute *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[5];
  char v24;

  v8 = a2;
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v13 = *(unsigned __int8 *)(a2 + 16);
  if (v13 != 21)
  {
    if (v13 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v14 = v13 - 33;
      v15 = v14 > 0x33;
      v16 = (1 << v14) & 0x8000000000041;
      if (!v15 && v16 != 0)
        a2 |= 1uLL;
    }
  }
  v18 = sub_1C568829C(v10, a2, 0, v11, 0, 0, 1);
  if ((a5 & 1) != 0 || (llvm::AbstractAttribute *)v11 != v18)
  {
    v21 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v18 + 48))(v18);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 48))(a4, *(unsigned __int8 *)(v21 + 9));
  }
  else
  {
    v19 = **(_QWORD **)(a1 + 24);
    v20 = **(_QWORD **)(a1 + 32);
    if (!a3 || !*(_QWORD *)(a3 + 40))
    {
      if (*(unsigned __int8 *)(v8 + 16) < 0x1Cu || (a3 = v8, !*(_QWORD *)(v8 + 40)))
        a3 = 0;
    }
    v23[0] = *(_QWORD *)(a1 + 16);
    v23[1] = v19;
    v23[2] = a3;
    v23[3] = v20;
    v23[4] = 0;
    v24 = 1;
    if ((sub_1C4F84D74(v8, 0, (uint64_t)v23) & 1) == 0)
      (*(void (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
}

_QWORD *sub_1C56965E4(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5696618(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C569665C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3098);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3098))
      __cxa_guard_release(&qword_1EF8F3098);
  }
}

uint64_t sub_1C569669C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _BYTE *v6;
  _BOOL4 v7;
  char v9;
  _QWORD v10[4];
  int v11;
  _BYTE v12[16];
  char v13;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v12[0] = 0;
  v13 = 0;
  v11 = sub_1C628686C((llvm::IRPosition *)(a1 + 16), 0);
  v10[0] = &v11;
  v10[1] = a2;
  v10[2] = a1;
  v10[3] = v12;
  v4 = llvm::Attributor::checkForAllCallSites(a2, sub_1C56967E0, (uint64_t)v10, a1, 1, &v9);
  v5 = 0;
  if (v4)
  {
    if (v13)
      v5 = v12[9];
    else
      v5 = 1;
  }
  v6 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = v6[9] == 0;
  (*(void (**)(_BYTE *, BOOL))(*(_QWORD *)v6 + 48))(v6, v5 != 0);
  return v7 ^ (v6[9] != 0);
}

uint64_t *sub_1C5696780(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C5696798(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56967E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v10 = *a2;
  v11 = &v13;
  v12 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)&v11, (uint64_t)(a2 + 1));
    v13 = v10;
    v14 = &v16;
    v15 = 0;
    if ((_DWORD)v12)
      sub_1C614CA14((uint64_t)&v14, (uint64_t)&v11);
  }
  else
  {
    v13 = v3;
    v14 = &v16;
    v15 = 0;
  }
  v16 = sub_1C628D358((uint64_t)&v13, **(_DWORD **)a1);
  v17 = v4;
  if (v14 != &v16)
    free(v14);
  if (sub_1C6283CA4(&v16))
  {
    v5 = sub_1C568829C(*(_QWORD *)(a1 + 8), v16, v17, *(_QWORD *)(a1 + 16), 0, 0, 1);
    v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 16))
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 72))(v7, *(unsigned __int8 *)(v6 + 9), *(unsigned __int8 *)(v6 + 8));
    }
    else
    {
      *(_QWORD *)v7 = &unk_1E81792E0;
      *(_WORD *)(v7 + 8) = *(_WORD *)(v6 + 8);
      *(_QWORD *)v7 = &off_1E8172AE8;
      *(_BYTE *)(v7 + 16) = 1;
    }
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  }
  else
  {
    v8 = 0;
  }
  if (v11 != &v13)
    free(v11);
  return v8;
}

_QWORD *sub_1C569694C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5696980(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56969C4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "nonnull";
  else
    v3 = "may-null";
  if (*(_BYTE *)(a1 + 41))
    v4 = 7;
  else
    v4 = 8;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

void sub_1C5696A18()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F30A0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F30A0))
      __cxa_guard_release(&qword_1EF8F30A0);
  }
}

uint64_t sub_1C5696A58(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _BYTE *v6;
  _BOOL4 v7;
  _QWORD v9[4];
  _BYTE v10[16];
  char v11;
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v12 = 0;
  v10[0] = 0;
  v11 = 0;
  v9[0] = &v12;
  v9[1] = a2;
  v9[2] = a1;
  v9[3] = v10;
  v4 = llvm::Attributor::checkForAllReturnedValues(a2, (uint64_t)sub_1C5696B88, (uint64_t)v9, a1);
  v5 = 0;
  if (v4)
  {
    if (v11)
      v5 = v10[9];
    else
      v5 = 1;
  }
  v6 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = v6[9] == 0;
  (*(void (**)(_BYTE *, BOOL))(*(_QWORD *)v6 + 48))(v6, v5 != 0);
  return v7 ^ (v6[9] != 0);
}

uint64_t *sub_1C5696B28(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C5696B40(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5696B88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  llvm::AbstractAttribute *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = **(_QWORD **)a1;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 21)
  {
    if (v4 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v5 = v4 - 33;
      v6 = v5 > 0x33;
      v7 = (1 << v5) & 0x8000000000041;
      if (!v6 && v7 != 0)
      {
        v3 = 0;
        a2 |= 1uLL;
      }
    }
  }
  v9 = sub_1C568829C(*(_QWORD *)(a1 + 8), a2, v3, *(_QWORD *)(a1 + 16), 0, 0, 1);
  v10 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v9 + 48))(v9);
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 16))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 72))(v11, *(unsigned __int8 *)(v10 + 9), *(unsigned __int8 *)(v10 + 8));
  }
  else
  {
    *(_QWORD *)v11 = &unk_1E81792E0;
    *(_WORD *)(v11 + 8) = *(_WORD *)(v10 + 8);
    *(_QWORD *)v11 = &off_1E8172AE8;
    *(_BYTE *)(v11 + 16) = 1;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *sub_1C5696C78(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5696CAC(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5696CF0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F30A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F30A8))
      __cxa_guard_release(&qword_1EF8F30A8);
  }
}

uint64_t sub_1C5696D30(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  _BYTE *v5;
  unint64_t v6;
  llvm::AbstractAttribute *v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v6 = sub_1C5676C10(v4);
  if (!v6)
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v5 + 40))(v5);
  v7 = sub_1C568829C(a2, v6 | 1, 0, a1, 0, 0, 1);
  v8 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v7 + 48))(v7);
  v9 = v5[9] == 0;
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v5 + 48))(v5, *(unsigned __int8 *)(v8 + 9));
  return v9 ^ (v5[9] != 0);
}

uint64_t *sub_1C5696DF0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C5696E08(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5696E50(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5696E84(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5696EC8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F30B0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F30B0))
      __cxa_guard_release(&qword_1EF8F30B0);
  }
}

uint64_t *sub_1C5696F08(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C5696F20(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5696F68(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5696F9C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C5696FE0(_BYTE *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t result;
  int64_t v6;
  unsigned int v7;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  sub_1C628D594((uint64_t)a1, a2);
  v4 = a1 + 16;
  result = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  do
  {
    v6 = result;
    v7 = *(unsigned __int8 *)(result + 16);
    if (v7 < 0x1C || v7 - 79 < 0xFFFFFFF3)
      break;
    result = *(_QWORD *)(result - 32);
    v9 = *(_QWORD *)(result + 8);
    if (!v9)
      break;
  }
  while (!*(_QWORD *)(v9 + 8));
  v10 = *(_DWORD *)(*(_QWORD *)v6 + 8);
  if (v10 != 15)
  {
    a1[41] = a1[40];
    return result;
  }
  if (v7 == 19)
  {
    v11 = *v4 & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)v4 & 3) == 0)
      v11 = *(_QWORD *)(v11 + 24);
    v12 = *(unsigned __int8 *)(v11 + 16);
    if (*(_BYTE *)(v11 + 16))
    {
      if (v12 == 21)
      {
        v13 = (unint64_t *)(v11 + 24);
LABEL_21:
        v11 = *v13;
        goto LABEL_23;
      }
      if (v12 >= 0x1C)
      {
        v13 = (unint64_t *)(*(_QWORD *)(v11 + 40) + 56);
        goto LABEL_21;
      }
      v11 = 0;
    }
LABEL_23:
    if ((v10 & 0xFE) == 0x12)
      v10 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8);
    if ((!v11 || (v14 = *(_QWORD *)(v11 + 112)) == 0 || (*(_BYTE *)(v14 + 17) & 1) == 0) && v10 <= 0xFF)
      goto LABEL_29;
    goto LABEL_31;
  }
  if (v7 == 59)
  {
LABEL_29:
    a1[40] = a1[41];
    return result;
  }
LABEL_31:
  result = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  if (v6 != result)
  {
    v15 = *(unsigned __int8 *)(v6 + 16);
    if (v15 != 21)
    {
      if (v15 < 0x1C)
      {
        if (!*(_BYTE *)(v6 + 16))
          v6 |= 2uLL;
      }
      else
      {
        v16 = v15 - 33;
        if (v16 <= 0x33 && ((1 << v16) & 0x8000000000041) != 0)
          v6 |= 1uLL;
      }
    }
    result = (unint64_t)sub_1C5688774(a2, v6, 0, (uint64_t)a1, 1, 0, 1);
    if (*(_BYTE *)(result + 40))
      goto LABEL_29;
  }
  return result;
}

void *sub_1C5697184@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "noalias";
  else
    v3 = "may-alias";
  if (*(_BYTE *)(a1 + 41))
    v4 = 7;
  else
    v4 = 9;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

void sub_1C56971DC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F30B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F30B8))
      __cxa_guard_release(&qword_1EF8F30B8);
  }
}

uint64_t sub_1C569721C(uint64_t a1)
{
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
  return 0;
}

uint64_t *sub_1C569722C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C5697244(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C569728C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56972C0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5697304(_BYTE *a1, uint64_t a2)
{
  _BOOL8 result;
  int v4;

  sub_1C628D594((uint64_t)a1, a2);
  v4 = 69;
  result = llvm::IRPosition::hasAttr((llvm::IRPosition *)(a1 + 16), &v4, 1, 0, 0);
  if (result)
    a1[40] = a1[41];
  return result;
}

void sub_1C5697358()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F30C0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F30C0))
      __cxa_guard_release(&qword_1EF8F30C0);
  }
}

unint64_t sub_1C5697398(_BYTE *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  char v9;
  char v10;

  v4 = (uint64_t *)(a1 + 16);
  v5 = sub_1C628D68C((llvm::IRPosition *)(a1 + 16));
  if (*((_BYTE *)sub_1C56833C8(a2, v5, v6, (uint64_t)a1, 1, 0, 1) + 41)
    || sub_1C5675BDC(a2, v4, (uint64_t)a1, 0, &v10))
  {
    return sub_1C56974D8((uint64_t)a1, a2);
  }
  result = llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C5697728, (uint64_t)&v8, (uint64_t)a1, 1, &v9);
  if ((_DWORD)result)
    return sub_1C56974D8((uint64_t)a1, a2);
  a1[41] = a1[40];
  return result;
}

uint64_t *sub_1C5697478(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C5697490(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56974D8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _BYTE *v6;
  _BOOL4 v7;
  char v9;
  _QWORD v10[4];
  int v11;
  _BYTE v12[16];
  char v13;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v12[0] = 0;
  v13 = 0;
  v11 = sub_1C628686C((llvm::IRPosition *)(a1 + 16), 0);
  v10[0] = &v11;
  v10[1] = a2;
  v10[2] = a1;
  v10[3] = v12;
  v4 = llvm::Attributor::checkForAllCallSites(a2, sub_1C56975BC, (uint64_t)v10, a1, 1, &v9);
  v5 = 0;
  if (v4)
  {
    if (v13)
      v5 = v12[9];
    else
      v5 = 1;
  }
  v6 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = v6[9] == 0;
  (*(void (**)(_BYTE *, BOOL))(*(_QWORD *)v6 + 48))(v6, v5 != 0);
  return v7 ^ (v6[9] != 0);
}

uint64_t sub_1C56975BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v10 = *a2;
  v11 = &v13;
  v12 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)&v11, (uint64_t)(a2 + 1));
    v13 = v10;
    v14 = &v16;
    v15 = 0;
    if ((_DWORD)v12)
      sub_1C614CA14((uint64_t)&v14, (uint64_t)&v11);
  }
  else
  {
    v13 = v3;
    v14 = &v16;
    v15 = 0;
  }
  v16 = sub_1C628D358((uint64_t)&v13, **(_DWORD **)a1);
  v17 = v4;
  if (v14 != &v16)
    free(v14);
  if (sub_1C6283CA4(&v16))
  {
    v5 = sub_1C5688774(*(_QWORD *)(a1 + 8), v16, v17, *(_QWORD *)(a1 + 16), 0, 0, 1);
    v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 16))
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 72))(v7, *(unsigned __int8 *)(v6 + 9), *(unsigned __int8 *)(v6 + 8));
    }
    else
    {
      *(_QWORD *)v7 = &unk_1E81792E0;
      *(_WORD *)(v7 + 8) = *(_WORD *)(v6 + 8);
      *(_QWORD *)v7 = &off_1E8172AE8;
      *(_BYTE *)(v7 + 16) = 1;
    }
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  }
  else
  {
    v8 = 0;
  }
  if (v11 != &v13)
    free(v11);
  return v8;
}

BOOL sub_1C5697728(uint64_t a1, uint64_t a2)
{
  int v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = 0;
  v4 = &v6;
  v5 = 0;
  if (*(_DWORD *)(a2 + 16))
  {
    sub_1C614C900((uint64_t)&v4, a2 + 8);
    v2 = v5;
    if (v4 != &v6)
      free(v4);
  }
  return v2 == 0;
}

_QWORD *sub_1C5697794(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56977C8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C569780C(_BYTE *a1, uint64_t a2)
{
  unint64_t result;

  sub_1C628D594((uint64_t)a1, a2);
  result = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if (!result)
    goto LABEL_8;
  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
LABEL_8:
      a1[41] = a1[40];
  }
  else if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    goto LABEL_8;
  }
  return result;
}

void sub_1C5697878()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F30C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F30C8))
      __cxa_guard_release(&qword_1EF8F30C8);
  }
}

uint64_t sub_1C56978B8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a1;
  if ((llvm::Attributor::checkForAllReturnedValues(a2, (uint64_t)sub_1C5697974, (uint64_t)v4, a1) & 1) != 0)
    return 1;
  result = 0;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
  return result;
}

uint64_t *sub_1C5697914(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C569792C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5697974(uint64_t *a1, llvm::Constant *this)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v10;

  v4 = a1[1];
  v5 = *((unsigned __int8 *)this + 16);
  if (v5 <= 0x14)
  {
    if ((llvm::Constant::isNullValue(this) & 1) != 0)
      return 1;
    v5 = *((unsigned __int8 *)this + 16);
    if (v5 - 11 < 2)
      return 1;
  }
  if (v5 < 0x1C)
    return 0;
  v6 = v5 - 33;
  v7 = v6 > 0x33;
  v8 = (1 << v6) & 0x8000000000041;
  if (v7 || v8 == 0)
    return 0;
  v10 = (unint64_t)this | 1;
  if (!*((_BYTE *)sub_1C5688774(*a1, v10, 0, v4, 0, 0, 1) + 41))
    return 0;
  return (~*((unsigned __int16 *)sub_1C5689124(*a1, v10, 0, v4, 0, 0, 1) + 21) & 3) == 0;
}

_QWORD *sub_1C5697A60(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5697A94(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C5697AD8(_BYTE *a1, uint64_t a2)
{
  unint64_t result;

  sub_1C628D594((uint64_t)a1, a2);
  result = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if (!result)
    goto LABEL_8;
  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
LABEL_8:
      a1[41] = a1[40];
  }
  else if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    goto LABEL_8;
  }
  return result;
}

void sub_1C5697B44()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F30D0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F30D0))
      __cxa_guard_release(&qword_1EF8F30D0);
  }
}

uint64_t sub_1C5697B84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  v5 = sub_1C5688774(a2, v4 | 1, 0, v3, 0, 0, 1);
  v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
  v7 = *(_QWORD *)(v3 + 32);
  v3 += 32;
  LODWORD(a2) = *(_BYTE *)(v3 + 9) == 0;
  (*(void (**)(uint64_t, _QWORD))(v7 + 48))(v3, *(unsigned __int8 *)(v6 + 9));
  return a2 ^ (*(_BYTE *)(v3 + 9) != 0);
}

uint64_t *sub_1C5697C08(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C5697C20(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5697C68(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5697C9C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

_BYTE *sub_1C5697CE0(_BYTE *a1)
{
  llvm::IRPosition *v2;
  unint64_t v3;
  int v4;
  _BYTE *result;
  unint64_t v6;
  unsigned int v7;
  unint64_t *v8;
  unsigned int v9;
  uint64_t v10;

  v2 = (llvm::IRPosition *)(a1 + 16);
  v3 = *((_QWORD *)a1 + 2) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*((_DWORD *)a1 + 4) & 3) == 0)
    v3 = *(_QWORD *)(v3 + 24);
  v4 = sub_1C628686C((llvm::IRPosition *)(a1 + 16), 0);
  if (llvm::CallBase::paramHasAttr(v3, v4, 19))
    a1[40] = a1[41];
  result = (_BYTE *)sub_1C6284150(v2);
  if (result[16] == 19)
  {
    v6 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)v2 & 3) == 0)
      v6 = *(_QWORD *)(v6 + 24);
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (!*(_BYTE *)(v6 + 16))
      goto LABEL_15;
    if (v7 == 21)
    {
      v8 = (unint64_t *)(v6 + 24);
    }
    else
    {
      if (v7 < 0x1C)
      {
        v6 = 0;
        goto LABEL_15;
      }
      v8 = (unint64_t *)(*(_QWORD *)(v6 + 40) + 56);
    }
    v6 = *v8;
LABEL_15:
    v9 = *(_DWORD *)(*(_QWORD *)result + 8);
    if ((v9 & 0xFE) == 0x12)
      v9 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)result + 16) + 8);
    if ((!v6 || (v10 = *(_QWORD *)(v6 + 112)) == 0 || (*(_BYTE *)(v10 + 17) & 1) == 0) && v9 <= 0xFF)
      a1[40] = a1[41];
  }
  return result;
}

void sub_1C5697DEC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F30D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F30D8))
      __cxa_guard_release(&qword_1EF8F30D8);
  }
}

uint64_t sub_1C5697E2C(uint64_t a1, llvm::Attributor *a2)
{
  llvm::IRPosition *v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  llvm::AbstractAttribute *v14;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t *v22;
  llvm::AbstractAttribute *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  llvm::AbstractAttribute *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t *v49;
  uint64_t v50;
  _QWORD v51[4];
  unint64_t v52;
  _QWORD v53[2];
  _QWORD v54[2];
  __int128 v55;
  __int128 v56;
  _QWORD v57[2];
  uint64_t v58;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = sub_1C5680B34((uint64_t)a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1, 2, 0, 1);
  if ((~*((unsigned __int8 *)v5 + 41) & 3) != 0)
  {
    v7 = sub_1C6284150(v4);
    v8 = v7;
    v9 = *(unsigned __int8 *)(v7 + 16);
    if (v9 != 21)
    {
      if (v9 < 0x1C)
      {
        if (!*(_BYTE *)(v7 + 16))
          v8 = v7 | 2;
      }
      else
      {
        v10 = v9 - 33;
        v11 = v10 > 0x33;
        v12 = (1 << v10) & 0x8000000000041;
        if (!v11 && v12 != 0)
          v8 = v7 | 1;
      }
    }
    v14 = sub_1C5688774((uint64_t)a2, v8, 0, a1, 2, 0, 1);
    if (!*((_BYTE *)v14 + 41))
      goto LABEL_13;
    v53[0] = a2;
    v53[1] = a1;
    llvm::Attributor::recordDependence((uint64_t)a2, (uint64_t)v14, a1, 1);
    v16 = sub_1C6284150(v4);
    v17 = v16;
    v18 = *(unsigned __int8 *)(v16 + 16);
    if (v18 != 21)
    {
      if (v18 < 0x1C)
      {
        if (!*(_BYTE *)(v16 + 16))
          v17 = v16 | 2;
      }
      else
      {
        v19 = v18 - 33;
        if (v19 <= 0x33 && ((1 << v19) & 0x8000000000041) != 0)
          v17 = v16 | 1;
      }
    }
    v20 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    if ((~(_BYTE)v17 & 3) == 0)
      v20 = *(_QWORD *)(v20 + 24);
    v21 = *(unsigned __int8 *)(v20 + 16);
    if (*(_BYTE *)(v20 + 16))
    {
      if (v21 == 21)
      {
        v22 = (unint64_t *)(v20 + 24);
LABEL_29:
        v20 = *v22;
        goto LABEL_31;
      }
      if (v21 >= 0x1C)
      {
        v22 = (unint64_t *)(*(_QWORD *)(v20 + 40) + 56);
        goto LABEL_29;
      }
      v20 = 0;
    }
LABEL_31:
    v52 = v20;
    v23 = sub_1C5689124((uint64_t)a2, v17, 0, a1, 2, 0, 1);
    v51[0] = a1;
    v51[1] = &v52;
    v51[2] = a2;
    v51[3] = v53;
    if ((~*((unsigned __int16 *)v23 + 21) & 3) != 0)
    {
      v46 = sub_1C6284150(v4);
      if (!llvm::Attributor::checkForAllUses(a2, (unsigned int (*)(uint64_t, uint64_t *, uint64_t *))sub_1C5698380, (uint64_t)v51, (_QWORD *)a1, v46, 0, 1, 1, 0, v47))
      {
LABEL_13:
        v6 = 0;
        *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
        return v6;
      }
    }
    llvm::Attributor::recordDependence((uint64_t)a2, (uint64_t)v23, a1, 1);
    v24 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
      v24 = *(_QWORD *)(v24 + 24);
    v25 = 0;
    v26 = 0;
    v27 = &v58;
    v50 = 0;
    v49 = (unint64_t *)(v24 - 8);
    while (1)
    {
      v28 = *(unsigned __int8 *)(v24 + 16);
      if (v28 == 84)
      {
        v29 = 0;
      }
      else if (v28 == 39)
      {
        v29 = (*(_DWORD *)(v24 + 80) + 1);
      }
      else
      {
        v29 = 2;
      }
      v30 = *(_DWORD *)(v24 + 20);
      if (v30 < 0 && (v45 = v30 & 0x7FFFFFF, (v49[-4 * v45] & 0xFFFFFFFF0) != 0))
      {
        v32 = -v45;
        v31 = *(_DWORD *)(v24 - 32 * v45 - 12) - *(_DWORD *)(v24 - 32 * v45 - *(_QWORD *)(v24 - 32 * v45 - 8));
      }
      else
      {
        v31 = 0;
        v32 = -(uint64_t)(v30 & 0x7FFFFFF);
      }
      if (v26 >= ((-32 - 32 * v29 + 32 * (unint64_t)-v31 - 32 * v32) >> 5))
        return 1;
      if (v26 != sub_1C628686C(v4, 1))
      {
        v33 = *(_DWORD *)(v24 + 20);
        v34 = v24 - 32 * (v33 & 0x7FFFFFF);
        v35 = *(_QWORD *)(v34 + v25);
        v36 = (*(_DWORD *)(*(_QWORD *)v35 + 8) & 0xFE) == 0x12
            ? *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v35 + 16) + 8)
            : *(_DWORD *)(*(_QWORD *)v35 + 8);
        if (v36 == 15)
          break;
      }
LABEL_64:
      ++v26;
      v25 += 32;
    }
    v48 = v27;
    if ((v33 & 0x40000000) != 0)
      v34 = *v49;
    v37 = sub_1C5680B34((uint64_t)a2, (v25 + v34) | 3, 0, a1, 2, 0, 1);
    v38 = *((unsigned __int8 *)v37 + 41);
    if ((~v38 & 3) == 0)
      goto LABEL_66;
    if ((v38 & 2) != 0 && (*((_BYTE *)v5 + 41) & 2) != 0)
    {
      llvm::Attributor::recordDependence((uint64_t)a2, (uint64_t)v5, a1, 1);
LABEL_66:
      llvm::Attributor::recordDependence((uint64_t)a2, (uint64_t)v37, a1, 1);
      v27 = v48;
      goto LABEL_64;
    }
    v39 = v50;
    if (v50)
    {
LABEL_63:
      v57[0] = sub_1C6284150(v4);
      v57[1] = -1;
      *(_OWORD *)v48 = 0u;
      *((_OWORD *)v48 + 1) = 0u;
      v54[0] = v35;
      v54[1] = -1;
      v55 = 0u;
      v56 = 0u;
      v50 = v39;
      v44 = v39;
      v27 = v48;
      if (llvm::AAResults::alias(v44, (uint64_t)v57, (uint64_t)v54))
        goto LABEL_13;
      goto LABEL_64;
    }
    v40 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)v4 & 3) == 0)
      v40 = *(_QWORD *)(v40 + 24);
    v41 = *(unsigned __int8 *)(v40 + 16);
    if (*(_BYTE *)(v40 + 16))
    {
      if (v41 == 21)
      {
        v42 = (unint64_t *)(v40 + 24);
LABEL_58:
        v40 = *v42;
        goto LABEL_60;
      }
      if (v41 >= 0x1C)
      {
        v42 = (unint64_t *)(*(_QWORD *)(v40 + 40) + 56);
        goto LABEL_58;
      }
      v40 = 0;
    }
LABEL_60:
    v43 = **(_QWORD **)(*((_QWORD *)a2 + 11) + 440);
    if (!v43 || !*(_QWORD *)(v40 + 40))
      goto LABEL_13;
    v39 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v43, &llvm::AAManager::Key, v40) + 8;
    goto LABEL_63;
  }
  v6 = 1;
  llvm::Attributor::recordDependence((uint64_t)a2, (uint64_t)v5, a1, 1);
  return v6;
}

uint64_t *sub_1C5698320(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C5698338(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5698380(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int isPotentiallyReachable;
  void (**v20)(void);
  int v21;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = (_DWORD *)(*(_QWORD *)a1 + 16);
  if (v7 == sub_1C5676CEC(v8) && (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 1)
    return 1;
  if (!**(_QWORD **)(a1 + 8))
  {
LABEL_23:
    v21 = llvm::DetermineUseCaptureKind(a2, (uint64_t (*)(uint64_t, llvm::Value *, uint64_t))sub_1C56985B0, *(_QWORD *)(a1 + 24));
    if (v21)
    {
      if (v21 != 2)
        return 0;
      v16 = 1;
      *a3 = 1;
      return v16;
    }
    return 1;
  }
  v9 = *(unsigned __int8 *)(v7 + 16);
  if ((v9 - 33) > 0x33 || ((1 << (v9 - 33)) & 0x8000000000041) == 0)
    goto LABEL_17;
  v11 = *(_DWORD *)(v7 + 20);
  v12 = v7 - 32 * (v11 & 0x7FFFFFF);
  if (v12 > a2)
    goto LABEL_17;
  if (v9 == 84)
    v13 = 0;
  else
    v13 = v9 == 39 ? (*(_DWORD *)(v7 + 80) + 1) : 2;
  if (v11 < 0 && (v23 = *(_QWORD *)(v12 - 8), (v23 & 0xFFFFFFFF0) != 0))
    v14 = (*(_DWORD *)(v12 - 12) - *(_DWORD *)(v12 - v23));
  else
    v14 = 0;
  if (v7 - 32 * v13 - 32 * v14 - 32 <= a2)
    goto LABEL_17;
  v15 = a2 - v12;
  if ((v11 & 0x40000000) != 0)
    v12 = *(_QWORD *)(v7 - 8);
  v16 = 1;
  if ((~*((unsigned __int16 *)sub_1C5689124(*(_QWORD *)(a1 + 16), (v12 + (v15 & 0x1FFFFFFFE0)) | 3, 0, v6, 1, 0, 1)
         + 21) & 7) != 0)
  {
LABEL_17:
    v17 = *(_QWORD *)(a1 + 16);
    v18 = sub_1C5676CEC(v8);
    v25 = 0;
    isPotentiallyReachable = llvm::AA::isPotentiallyReachable(v17, v7, v18, v6, v24);
    if (v25 == v24)
    {
      v20 = (void (**)(void))(v24[0] + 32);
    }
    else
    {
      if (!v25)
        goto LABEL_22;
      v20 = (void (**)(void))(*v25 + 40);
    }
    (*v20)();
LABEL_22:
    if (!isPotentiallyReachable)
      return 1;
    goto LABEL_23;
  }
  return v16;
}

BOOL sub_1C56985B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 21)
  {
    if (v5 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v6 = v5 - 33;
      v7 = v6 > 0x33;
      v8 = (1 << v6) & 0x8000000000041;
      if (!v7 && v8 != 0)
        a2 |= 1uLL;
    }
  }
  return *((_DWORD *)sub_1C5688C4C(v2, a2, 0, v3, 1, 0, 1) + 13) != 0;
}

_QWORD *sub_1C569862C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5698660(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56986A4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

void *sub_1C56986B0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "[priv]";
  else
    v3 = "[no-priv]";
  if (*(_BYTE *)(a1 + 41))
    v4 = 6;
  else
    v4 = 9;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

void sub_1C5698708()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F30E0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F30E0))
      __cxa_guard_release(&qword_1EF8F30E0);
  }
}

uint64_t sub_1C569874C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_1C5698758(uint64_t a1)
{
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 56))
    *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  return 0;
}

llvm *sub_1C569877C(uint64_t a1, uint64_t a2)
{
  llvm *v4;
  llvm *result;
  llvm *v6;
  int v7;
  uint64_t v8;
  llvm::APInt *v10;
  unsigned int v11;
  llvm::AbstractAttribute *v12;

  v4 = (llvm *)sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  result = llvm::getUnderlyingObject(v4, (const llvm::Value *)6);
  if (result)
  {
    v6 = result;
    v7 = *((unsigned __int8 *)result + 16);
    if (v7 != 21)
    {
      if (v7 != 59)
        return 0;
      v8 = *((_QWORD *)result - 4);
      if (!v8 || *(_BYTE *)(v8 + 16) != 16)
        return 0;
      v10 = (llvm::APInt *)(v8 + 24);
      v11 = *(_DWORD *)(v8 + 32);
      if (v11 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v10) != v11 - 1)
          return 0;
      }
      else if (*(_QWORD *)v10 != 1)
      {
        return 0;
      }
      return (llvm *)*((_QWORD *)v6 + 8);
    }
    v12 = sub_1C56895FC(a2, (uint64_t)result, 0, a1, 0, 0, 1);
    if (*((_BYTE *)v12 + 41))
      return (llvm *)(*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v12 + 112))(v12);
    else
      return 0;
  }
  return result;
}

uint64_t *sub_1C569887C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C5698894(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56988DC(uint64_t a1)
{
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 24))
    *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  return 0;
}

_QWORD *sub_1C5698900(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5698934(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5698978(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm::IRPosition *v5;
  unint64_t v6;
  unint64_t AssociatedArgument;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  llvm::AbstractAttribute *v14;
  char *v15;
  int v16;
  _QWORD *v17;
  void (**v18)(_QWORD *);
  _QWORD *v19;
  void (**v20)(_QWORD *);
  char v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[128];
  _QWORD v25[3];
  _QWORD *v26;
  __int128 v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE v30[128];
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[18];

  v35[16] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 56))
    return 1;
  v33 = v35;
  v34 = 0x1000000000;
  v31[0] = &v33;
  LODWORD(v25[0]) = 56;
  v4 = 1;
  v22 = v25;
  v23 = 1;
  v5 = (llvm::IRPosition *)(a1 + 16);
  v6 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if (!llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C5699230, (uint64_t)v31, v6, a1, (int **)&v22, &v21, 0, 0))goto LABEL_3;
  AssociatedArgument = llvm::IRPosition::getAssociatedArgument(v5);
  v9 = AssociatedArgument;
  v10 = *(unsigned __int8 *)(AssociatedArgument + 16);
  if (v10 == 21)
    goto LABEL_8;
  if (v10 >= 0x1C)
  {
    v12 = v10 - 33;
    if (v12 <= 0x33 && ((1 << v12) & 0x8000000000041) != 0)
    {
      v11 = AssociatedArgument | 1;
      goto LABEL_15;
    }
LABEL_8:
    v11 = AssociatedArgument;
    goto LABEL_15;
  }
  if (*(_BYTE *)(AssociatedArgument + 16))
    goto LABEL_8;
  v11 = AssociatedArgument | 2;
LABEL_15:
  v13 = 1;
  v14 = sub_1C5687DC4(a2, v11, 0, a1, 2, 0, 1);
  *(_QWORD *)&v27 = a1;
  *((_QWORD *)&v27 + 1) = v9;
  v28 = v30;
  v29 = 0x1000000000;
  if ((_DWORD)v34)
  {
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v28, (uint64_t)&v33);
    v13 = (_DWORD)v29 == 0;
  }
  v15 = (char *)operator new(0xA8uLL);
  *(_QWORD *)v15 = &off_1E8174D80;
  *(_OWORD *)(v15 + 8) = v27;
  *((_QWORD *)v15 + 3) = v15 + 40;
  *((_QWORD *)v15 + 4) = 0x1000000000;
  if (!v13)
    sub_1C614D378((uint64_t)(v15 + 24), (uint64_t)&v28);
  v32 = v15;
  if (v28 != v30)
    free(v28);
  v25[0] = &off_1E8174DC8;
  v25[1] = v14;
  v25[2] = a1;
  v26 = v25;
  v22 = v24;
  v23 = 0x1000000000;
  sub_1C569911C(*(unsigned int **)(a1 + 48), (unsigned int *)&v22);
  v16 = llvm::Attributor::registerFunctionSignatureRewrite(a2, v9, v22, v23, (uint64_t)v31, (uint64_t)v25);
  if (v22 != v24)
    free(v22);
  v17 = v26;
  if (v26 == v25)
  {
    v18 = (void (**)(_QWORD *))(v25[0] + 32);
    v17 = v25;
    goto LABEL_27;
  }
  if (v26)
  {
    v18 = (void (**)(_QWORD *))(*v26 + 40);
LABEL_27:
    (*v18)(v17);
  }
  v4 = v16 ^ 1u;
  v19 = v32;
  if (v32 == v31)
  {
    v20 = (void (**)(_QWORD *))(v31[0] + 32);
    v19 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_3;
    v20 = (void (**)(_QWORD *))(*v32 + 40);
  }
  (*v20)(v19);
LABEL_3:
  if (v33 != v35)
    free(v33);
  return v4;
}

void sub_1C5698C58()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F30E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F30E8))
      __cxa_guard_release(&qword_1EF8F30E8);
  }
}

uint64_t sub_1C5698C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  const llvm::DataLayout *v15;
  unint64_t v16;
  unint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t AssociatedArgument;
  _QWORD v22[2];
  _QWORD v23[3];
  _QWORD v24[3];
  int v25;
  char v26;
  _QWORD v27[2];
  uint64_t v28;
  void *v29[2];
  _QWORD v30[17];

  v30[16] = *MEMORY[0x1E0C80C00];
  v4 = sub_1C5698F64(a1, a2);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  if (!(_BYTE)v5)
    return 1;
  if (v4)
  {
    v8 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
    v9 = v8;
    v10 = *(unsigned __int8 *)(v8 + 16);
    if (v10 != 21)
    {
      if (v10 < 0x1C)
      {
        if (!*(_BYTE *)(v8 + 16))
          v9 = v8 | 2;
      }
      else
      {
        v11 = v10 - 33;
        v12 = v11 > 0x33;
        v13 = (1 << v11) & 0x8000000000041;
        if (!v12 && v13 != 0)
          v9 = v8 | 1;
      }
    }
    sub_1C5687DC4(a2, v9, 0, a1, 1, 0, 1);
    LODWORD(v29[0]) = 69;
    if (llvm::IRPosition::hasAttr((llvm::IRPosition *)(a1 + 16), (int *)v29, 1, 0, 0)
      || (llvm::ArgumentPromotionPass::isDenselyPacked(*(llvm::ArgumentPromotionPass **)(a1 + 48), *(llvm::Type **)(*(_QWORD *)(a2 + 88) + 120), v15) & 1) != 0)
    {
      v29[0] = v30;
      v29[1] = (void *)0x1000000000;
      sub_1C569911C(*(unsigned int **)(a1 + 48), (unsigned int *)v29);
      v16 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
      if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
        v16 = *(_QWORD *)(v16 + 24);
      if (*(_BYTE *)(v16 + 16))
      {
        if (*(_BYTE *)(v16 + 16) == 21)
          v17 = (unint64_t *)(v16 + 24);
        else
          v17 = (unint64_t *)(*(_QWORD *)(v16 + 40) + 56);
        v16 = *v17;
      }
      v19 = **(_QWORD **)(*(_QWORD *)(a2 + 88) + 440);
      if (!v19)
        goto LABEL_38;
      if (!*(_QWORD *)(v16 + 40))
        goto LABEL_38;
      v27[0] = &v28;
      v27[1] = v29;
      v28 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v19, &llvm::TargetIRAnalysis::Key, v16) + 8;
      if ((llvm::Attributor::checkForAllCallSites(a2, sub_1C569A720, (uint64_t)v27, a1, 1, &v26) & 1) == 0)
        goto LABEL_38;
      AssociatedArgument = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 16));
      if ((llvm::Attributor::isValidFunctionSignatureRewrite(a2, AssociatedArgument) & 1) == 0)
        goto LABEL_38;
      v25 = *(_DWORD *)(AssociatedArgument + 32);
      v24[0] = &v25;
      v24[1] = a2;
      v24[2] = a1;
      v23[0] = &v25;
      v23[1] = a2;
      v23[2] = a1;
      v22[0] = v24;
      v22[1] = v23;
      v6 = 1;
      if ((llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C569A7E4, (uint64_t)v22, a1, 1, &v26) & 1) == 0)
      {
LABEL_38:
        *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
        v20 = *(unsigned __int8 *)(a1 + 56);
        *(_QWORD *)(a1 + 48) = 0;
        v6 = 0;
        if (!v20)
          *(_BYTE *)(a1 + 56) = 1;
      }
      if (v29[0] != v30)
        free(v29[0]);
    }
    else
    {
      *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
      v18 = *(unsigned __int8 *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = 0;
      v6 = 0;
      if (!v18)
        *(_BYTE *)(a1 + 56) = 1;
    }
  }
  else
  {
    v6 = 0;
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
    *(_QWORD *)(a1 + 48) = 0;
  }
  return v6;
}

uint64_t sub_1C5698F64(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[4];
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x100000000;
  v4 = (llvm::IRPosition *)(a1 + 16);
  LODWORD(v9[0]) = 69;
  llvm::IRPosition::getAttrs((llvm::IRPosition *)(a1 + 16), (int *)v9, 1, (uint64_t)&v14, 1, 0);
  if ((_DWORD)v15
    && llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C569ABB4, (uint64_t)v9, a1, 1, &v13))
  {
    v7 = v14;
    if (*(_QWORD *)v14)
      v6 = *(_QWORD *)(*(_QWORD *)v14 + 16);
    else
      v6 = 0;
  }
  else
  {
    LOBYTE(v11) = 0;
    LOBYTE(v12) = 0;
    v10 = sub_1C628686C(v4, 0);
    v9[0] = &v10;
    v9[1] = a2;
    v9[2] = a1;
    v9[3] = &v11;
    if (llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C569AC14, (uint64_t)v9, a1, 1, &v13))v6 = v11;
    else
      v6 = 0;
    v7 = v14;
  }
  if (v7 != v16)
    free(v7);
  return v6;
}

uint64_t *sub_1C56990BC(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56990D4(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

unsigned int *sub_1C569911C(unsigned int *result, unsigned int *a2)
{
  unsigned int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = *((unsigned __int8 *)result + 8);
  if (result && v4 == 16)
  {
    v5 = result[3];
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = a2[2];
      v8 = 8 * v5;
      do
      {
        v9 = *(_QWORD *)(*((_QWORD *)v3 + 2) + v6);
        if (v7 >= a2[3])
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, (uint64_t)(a2 + 4), v7 + 1, 8);
          v7 = a2[2];
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v9;
        v7 = a2[2] + 1;
        a2[2] = v7;
        v6 += 8;
      }
      while (v8 != v6);
    }
  }
  else if (result && v4 == 17)
  {
    return sub_1C510F7B8(a2, *((_QWORD *)result + 4), *((_QWORD *)result + 3));
  }
  else
  {
    v10 = a2[2];
    if (v10 >= a2[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, (uint64_t)(a2 + 4), v10 + 1, 8);
      LODWORD(v10) = a2[2];
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = v3;
    ++a2[2];
  }
  return result;
}

uint64_t sub_1C5699230(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((*(_WORD *)(a2 + 18) & 3u) - 1 <= 1)
  {
    v3 = *a1;
    v4 = *(unsigned int *)(*a1 + 8);
    if (v4 >= *(_DWORD *)(*a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, v3 + 16, v4 + 1, 8);
      LODWORD(v4) = *(_DWORD *)(v3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
    ++*(_DWORD *)(v3 + 8);
  }
  return 1;
}

_QWORD *sub_1C56992A4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8174D80;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  return a1;
}

void sub_1C56992E4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8174D80;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C5699334(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0xA8uLL);
  *(_QWORD *)v2 = &off_1E8174D80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((_QWORD *)v2 + 3) = v2 + 40;
  *((_QWORD *)v2 + 4) = 0x1000000000;
  if (*(_DWORD *)(a1 + 32))
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

uint64_t sub_1C569939C(uint64_t result, _QWORD *a2)
{
  __int128 v2;
  uint64_t v3;

  *a2 = &off_1E8174D80;
  v2 = *(_OWORD *)(result + 8);
  a2[3] = a2 + 5;
  v3 = (uint64_t)(a2 + 3);
  *(_OWORD *)(v3 - 16) = v2;
  *(_QWORD *)(v3 + 8) = 0x1000000000;
  if (*(_DWORD *)(result + 32))
    return llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v3, result + 24);
  return result;
}

void sub_1C56993E0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
}

void sub_1C56993FC(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[3];
  if (v2 != __p + 5)
    free(v2);
  operator delete(__p);
}

void sub_1C5699430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  llvm::Instruction *v17;
  llvm::Type *v18;
  _DWORD *v19;
  llvm::Value *v20;
  llvm::PointerType *v21;
  uint64_t ***v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ****v27;
  uint64_t ***v28;
  int v29;
  int v30;
  uint64_t ***v31;
  char *v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t v35;
  unsigned int v36;
  llvm::DataLayout *v37;
  int v38;
  uint64_t *PointerBitCastOrAddrSpaceCast;
  llvm::StructLayout *StructLayout;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  _DWORD *v46;
  llvm::StoreInst *v47;
  llvm::PointerType *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  _DWORD *v56;
  llvm::StoreInst *v57;
  _DWORD *v58;
  llvm::StoreInst *v59;
  llvm::ValueAsMetadata *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::Instruction *v68;
  void *v69[2];
  const char *v70;
  __int16 v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v6 = *a4;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a3 + 80);
  v9 = v8 - 24;
  if (!v8)
    v9 = 0;
  v10 = v9 + 40;
  for (i = *(_QWORD *)(v9 + 48); i != v10; i = *(_QWORD *)(i + 8))
  {
    v12 = i - 24;
    if (!i)
      v12 = 0;
    if (*(_BYTE *)(v12 + 16) != 83)
    {
      v13 = *(unsigned __int8 *)(i - 8) - 38;
      v14 = v13 > 0x38;
      v15 = (1 << v13) & 0x100060000000001;
      if (v14 || v15 == 0)
        v10 = i;
      else
        v10 = *(_QWORD *)(i + 8);
      break;
    }
  }
  if (v10)
    v17 = (llvm::Instruction *)(v10 - 24);
  else
    v17 = 0;
  v68 = v17;
  v18 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v17 + 5) + 56) + 40) + 276);
  v19 = operator new(0x68uLL);
  v20 = (llvm::Value *)(v19 + 8);
  v19[13] = v19[13] & 0x38000000 | 1;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *((_QWORD *)v19 + 3) = v19 + 8;
  v21 = *(llvm::PointerType **)(v7 + 48);
  v22 = *(uint64_t ****)(a1 + 16);
  if ((*((_BYTE *)v22 + 23) & 0x10) == 0)
  {
    v33 = 0;
    v32 = &byte_1C871356D;
    goto LABEL_26;
  }
  v23 = ***v22;
  v24 = *(_QWORD *)(v23 + 152);
  v25 = *(unsigned int *)(v23 + 168);
  if (!(_DWORD)v25)
    goto LABEL_24;
  LODWORD(v26) = (v25 - 1) & ((v22 >> 4) ^ (v22 >> 9));
  v27 = (uint64_t ****)(v24 + 16 * v26);
  v28 = *v27;
  if (*v27 != v22)
  {
    v29 = 1;
    while (v28 != (uint64_t ***)-4096)
    {
      v30 = v26 + v29++;
      v26 = v30 & (v25 - 1);
      v28 = *(uint64_t ****)(v24 + 16 * v26);
      if (v28 == v22)
      {
        v27 = (uint64_t ****)(v24 + 16 * v26);
        goto LABEL_25;
      }
    }
LABEL_24:
    v27 = (uint64_t ****)(v24 + 16 * v25);
  }
LABEL_25:
  v31 = v27[1];
  v34 = *v31;
  v32 = (char *)(v31 + 2);
  v33 = v34;
LABEL_26:
  v71 = 773;
  v69[0] = v32;
  v69[1] = v33;
  v70 = ".priv";
  llvm::AllocaInst::AllocaInst((uint64_t)(v19 + 8), v21, v18, 0, (uint64_t)v69, (uint64_t)v68);
  v35 = *(_QWORD *)(v7 + 48);
  v36 = *(_DWORD *)(v6 + 32);
  sub_1C5673D1C((uint64_t)v69, (uint64_t)v68, 0, 0, 0);
  v37 = (llvm::DataLayout *)(*(_QWORD *)(a3 + 40) + 272);
  v38 = *(unsigned __int8 *)(v35 + 8);
  v66 = a1;
  if (v35 && v38 == 16)
  {
    PointerBitCastOrAddrSpaceCast = (uint64_t *)v20;
    StructLayout = llvm::DataLayout::getStructLayout(v37, (llvm::StructType *)v35);
    v41 = *(unsigned int *)(v35 + 12);
    if ((_DWORD)v41)
    {
      v42 = 0;
      v43 = (char *)StructLayout + 16;
      do
      {
        v44 = llvm::PointerType::get(*(llvm::PointerType **)(*(_QWORD *)(v35 + 16) + 8 * v42), 0);
        v45 = sub_1C5699904(v44, (llvm::Type *)v35, PointerBitCastOrAddrSpaceCast, *(_QWORD *)&v43[8 * v42], (uint64_t)v69, v37);
        v46 = operator new(0x80uLL);
        v47 = (llvm::StoreInst *)(v46 + 16);
        v46[21] = v46[21] & 0x38000000 | 2;
        *(_QWORD *)v46 = 0;
        *((_QWORD *)v46 + 1) = 0;
        *((_QWORD *)v46 + 2) = 0;
        *((_QWORD *)v46 + 3) = v46 + 16;
        *((_QWORD *)v46 + 4) = 0;
        *((_QWORD *)v46 + 5) = 0;
        *((_QWORD *)v46 + 6) = 0;
        *((_QWORD *)v46 + 7) = v46 + 16;
        if ((*(_BYTE *)(a3 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)a3);
        llvm::StoreInst::StoreInst(v47, (llvm::Value *)(*(_QWORD *)(a3 + 88) + 40 * (v36 + v42++)), (llvm::Value *)v45, 0, v68);
      }
      while (v41 != v42);
    }
  }
  else if (v35 && v38 == 17)
  {
    PointerBitCastOrAddrSpaceCast = (uint64_t *)v20;
    v48 = *(llvm::PointerType **)(v35 + 24);
    v67 = llvm::PointerType::get(v48, 0);
    sub_1C4768AD0((uint64_t)v37, (uint64_t)v48);
    v51 = v50;
    if ((_DWORD)v49 == 1)
    v52 = *(unsigned int *)(v35 + 32);
    if (*(_DWORD *)(v35 + 32))
    {
      v53 = 0;
      v54 = (unint64_t)(v51 + 7) >> 3;
      do
      {
        v55 = sub_1C5699904(v67, (llvm::Type *)v35, PointerBitCastOrAddrSpaceCast, v53, (uint64_t)v69, v37);
        v56 = operator new(0x80uLL);
        v57 = (llvm::StoreInst *)(v56 + 16);
        v56[21] = v56[21] & 0x38000000 | 2;
        *(_QWORD *)v56 = 0;
        *((_QWORD *)v56 + 1) = 0;
        *((_QWORD *)v56 + 2) = 0;
        *((_QWORD *)v56 + 3) = v56 + 16;
        *((_QWORD *)v56 + 4) = 0;
        *((_QWORD *)v56 + 5) = 0;
        *((_QWORD *)v56 + 6) = 0;
        *((_QWORD *)v56 + 7) = v56 + 16;
        if ((*(_BYTE *)(a3 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)a3);
        llvm::StoreInst::StoreInst(v57, (llvm::Value *)(*(_QWORD *)(a3 + 88) + 40 * v36++), (llvm::Value *)v55, 0, v68);
        v53 += v54;
        --v52;
      }
      while (v52);
    }
  }
  else
  {
    v58 = operator new(0x80uLL);
    v59 = (llvm::StoreInst *)(v58 + 16);
    v58[21] = v58[21] & 0x38000000 | 2;
    *(_QWORD *)v58 = 0;
    *((_QWORD *)v58 + 1) = 0;
    *((_QWORD *)v58 + 2) = 0;
    *((_QWORD *)v58 + 3) = v58 + 16;
    *((_QWORD *)v58 + 4) = 0;
    *((_QWORD *)v58 + 5) = 0;
    *((_QWORD *)v58 + 6) = 0;
    *((_QWORD *)v58 + 7) = v58 + 16;
    if ((*(_BYTE *)(a3 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)a3);
    PointerBitCastOrAddrSpaceCast = (uint64_t *)v20;
    llvm::StoreInst::StoreInst(v59, (llvm::Value *)(*(_QWORD *)(a3 + 88) + 40 * v36), v20, 0, v68);
  }
  if (v69[0] != &v70)
    free(v69[0]);
  v60 = *(llvm::ValueAsMetadata **)(v66 + 16);
  v61 = *(_QWORD *)v60;
  if (*PointerBitCastOrAddrSpaceCast != *(_QWORD *)v60)
  {
    v71 = 257;
    PointerBitCastOrAddrSpaceCast = (uint64_t *)llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(PointerBitCastOrAddrSpaceCast, v61, (uint64_t)v69, (uint64_t)v68);
    v60 = *(llvm::ValueAsMetadata **)(v66 + 16);
  }
  llvm::Value::doRAUW(v60, (llvm::Value *)PointerBitCastOrAddrSpaceCast, (llvm::Value *)1);
  v62 = *(unsigned int *)(v66 + 32);
  if ((_DWORD)v62)
  {
    v63 = *(uint64_t **)(v66 + 24);
    v64 = 8 * v62;
    do
    {
      v65 = *v63++;
      *(_WORD *)(v65 + 18) &= 0xFFFCu;
      v64 -= 8;
    }
    while (v64);
  }
}

unsigned __int8 *sub_1C5699904(uint64_t a1, llvm::Type *a2, uint64_t *a3, uint64_t a4, uint64_t a5, llvm::DataLayout *a6)
{
  uint64_t ***v7;
  unsigned int IndexTypeSizeInBits;
  unint64_t v13;
  const llvm::APInt *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ****v19;
  uint64_t ***v20;
  int v21;
  int v22;
  unint64_t *v23;
  std::string::size_type v24;
  const void *v25;
  unint64_t v26;
  std::string *p_dst;
  uint64_t v28;
  uint64_t v29;
  llvm::LLVMContext *v30;
  uint64_t v31;
  llvm::ValueHandleBase *v32;
  uint64_t v33;
  unint64_t *v34;
  std::string *v35;
  uint64_t *v36;
  void **v37;
  std::string::size_type v38;
  _QWORD *v39;
  int v40;
  int64_t v41;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  llvm::ConstantInt *v47;
  llvm::GetElementPtrInst *v48;
  const llvm::APInt *v49;
  llvm::ValueHandleBase *v50;
  size_t size;
  std::string *v52;
  std::string *v53;
  uint64_t *v54;
  const char **v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t ****v62;
  uint64_t ***v63;
  int v64;
  int v65;
  uint64_t ***v66;
  char *v67;
  uint64_t **v68;
  uint64_t **v69;
  uint64_t v71;
  void *__p[2];
  uint64_t *v73;
  __int16 v74;
  std::string v75;
  std::string __dst;
  _QWORD *v77;
  unsigned int v78;
  llvm::Type *v79;
  void *v80;
  uint64_t v81;
  _BYTE v82[32];
  char *v83;
  uint64_t **v84;
  const char *v85;
  __int16 v86;
  uint64_t v87;

  v7 = (uint64_t ***)a3;
  v87 = *MEMORY[0x1E0C80C00];
  if (!a4)
    goto LABEL_80;
  v79 = a2;
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a6, *a3);
  v78 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v77, a4, 0);
  }
  else
  {
    v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
    if (!IndexTypeSizeInBits)
      v13 = 0;
    v77 = (_QWORD *)(v13 & a4);
  }
  llvm::DataLayout::getGEPIndicesForOffset(a6, &v79, (llvm::APInt *)&v77, &v83);
  v80 = v82;
  v81 = 0x400000000;
  if ((*((_BYTE *)v7 + 23) & 0x10) == 0)
  {
    v24 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_22;
  }
  v15 = ***v7;
  v16 = *(_QWORD *)(v15 + 152);
  v17 = *(unsigned int *)(v15 + 168);
  if ((_DWORD)v17)
  {
    LODWORD(v18) = (v17 - 1) & ((v7 >> 4) ^ (v7 >> 9));
    v19 = (uint64_t ****)(v16 + 16 * v18);
    v20 = *v19;
    if (*v19 == v7)
      goto LABEL_14;
    v21 = 1;
    while (v20 != (uint64_t ***)-4096)
    {
      v22 = v18 + v21++;
      v18 = v22 & (v17 - 1);
      v20 = *(uint64_t ****)(v16 + 16 * v18);
      if (v20 == v7)
      {
        v19 = (uint64_t ****)(v16 + 16 * v18);
        goto LABEL_14;
      }
    }
  }
  v19 = (uint64_t ****)(v16 + 16 * v17);
LABEL_14:
  v23 = (unint64_t *)v19[1];
  v26 = *v23;
  v25 = v23 + 2;
  v24 = v26;
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v24 >= 0x17)
  {
    v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v28 = v24 | 7;
    v29 = v28 + 1;
    p_dst = (std::string *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v24;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_21;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v24;
  p_dst = &__dst;
  if (v24)
LABEL_21:
    memmove(p_dst, v25, v24);
LABEL_22:
  p_dst->__r_.__value_.__s.__data_[v24] = 0;
  if ((_DWORD)v84)
  {
    v30 = (llvm::LLVMContext *)v83;
    v31 = 16 * v84;
    do
    {
      v32 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(a5 + 64), v30, v14);
      v33 = v81;
      if (v81 >= (unint64_t)HIDWORD(v81))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v81 + 1, 8);
        v33 = v81;
      }
      *((_QWORD *)v80 + v33) = v32;
      LODWORD(v81) = v81 + 1;
      v34 = (unint64_t *)v30;
      if (*((_DWORD *)v30 + 2) >= 0x41u)
        v34 = *(unint64_t **)v30;
      std::to_string(&v75, *v34);
      v35 = std::string::insert(&v75, 0, ".");
      v36 = (uint64_t *)v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v73 = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v73) >= 0)
        v37 = __p;
      else
        v37 = (void **)__p[0];
      if (SHIBYTE(v73) >= 0)
        v38 = HIBYTE(v73) & 0x7F;
      else
        v38 = (std::string::size_type)__p[1];
      std::string::append(&__dst, (const std::string::value_type *)v37, v38);
      if (SHIBYTE(v73) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      v30 = (llvm::LLVMContext *)((char *)v30 + 16);
      v31 -= 16;
    }
    while (v31);
  }
  v74 = 260;
  __p[0] = &__dst;
  v7 = (uint64_t ***)sub_1C509D7B0((uint64_t *)a5, a2, (uint64_t *)v7, (llvm::Value *)v80, v81, (uint64_t)__p);
  v39 = v77;
  if (v78 >= 0x41)
  {
    v40 = 0;
    v41 = ((unint64_t)v78 + 63) >> 6;
    do
    {
      if (v41-- < 1)
        break;
      v43 = v77[v41];
      v40 += __clz(v43);
    }
    while (!v43);
    v44 = v78 | 0xFFFFFFC0;
    if ((v78 & 0x3F) == 0)
      v44 = 0;
    if (v78 - v40 - v44 > 0x40)
      goto LABEL_48;
    v39 = (_QWORD *)*v77;
  }
  if (v39)
  {
LABEL_48:
    v45 = llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)(a5 + 64) + 1912), 0);
    v74 = 257;
    v46 = (uint64_t *)sub_1C4773E38((uint64_t *)a5, 49, (unsigned __int8 *)v7, v45, (uint64_t)__p);
    v47 = *(llvm::ConstantInt **)(a5 + 64);
    v48 = (llvm::GetElementPtrInst *)(*(_QWORD *)v47 + 1912);
    v50 = llvm::ConstantInt::get(v47, (llvm::LLVMContext *)&v77, v49);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __dst.__r_.__value_.__l.__size_;
    sub_1C484371C((uint64_t)&v75, size + 2);
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v75;
    else
      v52 = (std::string *)v75.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &__dst;
      else
        v53 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      memmove(v52, v53, size);
    }
    strcpy((char *)v52 + size, ".b");
    if (v78 >= 0x41)
      v54 = v77;
    else
      v54 = (uint64_t *)&v77;
    v71 = *v54;
    __p[0] = &v75;
    v73 = &v71;
    v74 = 3076;
    v7 = sub_1C4867B70((uint64_t *)a5, v48, v46, (uint64_t)v50, (uint64_t)__p);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v80 != v82)
    free(v80);
  v55 = (const char **)v83;
  if ((_DWORD)v84)
  {
    v56 = 2 * v84;
    do
    {
      if (LODWORD(v55[v56 - 1]) >= 0x41)
      {
        v57 = v55[v56 - 2];
        if (v57)
          MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
      }
      v56 -= 2;
    }
    while (v56 * 8);
    v55 = (const char **)v83;
  }
  if (v55 != &v85)
    free(v55);
  if (v78 >= 0x41 && v77)
    MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
LABEL_80:
  if ((*((_BYTE *)v7 + 23) & 0x10) == 0)
  {
    v68 = 0;
    v67 = &byte_1C871356D;
    goto LABEL_89;
  }
  v58 = ***v7;
  v59 = *(_QWORD *)(v58 + 152);
  v60 = *(unsigned int *)(v58 + 168);
  if (!(_DWORD)v60)
    goto LABEL_87;
  LODWORD(v61) = (v60 - 1) & ((v7 >> 4) ^ (v7 >> 9));
  v62 = (uint64_t ****)(v59 + 16 * v61);
  v63 = *v62;
  if (*v62 != v7)
  {
    v64 = 1;
    while (v63 != (uint64_t ***)-4096)
    {
      v65 = v61 + v64++;
      v61 = v65 & (v60 - 1);
      v63 = *(uint64_t ****)(v59 + 16 * v61);
      if (v63 == v7)
      {
        v62 = (uint64_t ****)(v59 + 16 * v61);
        goto LABEL_88;
      }
    }
LABEL_87:
    v62 = (uint64_t ****)(v59 + 16 * v60);
  }
LABEL_88:
  v66 = v62[1];
  v69 = *v66;
  v67 = (char *)(v66 + 2);
  v68 = v69;
LABEL_89:
  v86 = 773;
  v83 = v67;
  v84 = v68;
  v85 = ".cast";
  return sub_1C5699F0C((uint64_t *)a5, (uint64_t *)v7, a1, (uint64_t)&v83);
}

unsigned __int8 *sub_1C5699F0C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v9;
  int v10;
  unsigned int v11;
  char *v12;
  char *v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 **v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 **v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35[4];
  __int16 v36;
  unsigned __int8 *v37;

  v5 = *a2;
  if (*a2 == a3)
    return (unsigned __int8 *)a2;
  if (*((unsigned __int8 *)a2 + 16) <= 0x14u)
  {
    v14 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1[9] + 240))(a1[9], a2, a3);
    if (v14)
      v26 = v14[16] >= 0x1Cu;
    else
      v26 = 0;
    if (!v26)
      return v14;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v14, a4, a1[6], a1[7]);
    v27 = *((unsigned int *)a1 + 2);
    if (!(_DWORD)v27)
      return v14;
    v29 = *a1;
    v30 = v29 + 16 * v27;
    v31 = (unsigned __int8 **)(v14 + 48);
    while (1)
    {
      v32 = *(_DWORD *)v29;
      v33 = *(unsigned __int8 **)(v29 + 8);
      if (v33)
      {
        if (!v32)
        {
          v35[0] = *(unsigned __int8 **)(v29 + 8);
          llvm::MetadataTracking::track((uint64_t)v35, v33, 2);
LABEL_46:
          if (v35 == v31)
          {
            if (v35[0])
              llvm::MetadataTracking::untrack((uint64_t)v35, v35[0]);
          }
          else
          {
            if (*v31)
              llvm::MetadataTracking::untrack((uint64_t)(v14 + 48), *v31);
            v34 = v35[0];
            *v31 = v35[0];
            if (v34)
              llvm::MetadataTracking::retrack((uint64_t)v35, v34, (uint64_t)(v14 + 48));
          }
          goto LABEL_43;
        }
      }
      else
      {
        if (!*v31 && (v14[23] & 0x20) == 0)
          goto LABEL_43;
        if (!v32)
        {
          v35[0] = 0;
          goto LABEL_46;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v14, v32, (llvm::MDNode *)v33);
LABEL_43:
      v29 += 16;
      if (v29 == v30)
        return v14;
    }
  }
  v36 = 257;
  v9 = *(_DWORD *)(v5 + 8);
  if ((v9 & 0xFE) == 0x12)
    v9 = *(_DWORD *)(**(_QWORD **)(v5 + 16) + 8);
  v10 = *(_DWORD *)(a3 + 8);
  if ((v10 & 0xFE) == 0x12)
    v10 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
  v11 = v10 ^ v9;
  v12 = (char *)operator new(0x60uLL);
  v13 = v12;
  *((_QWORD *)v12 + 4) = a3;
  v14 = (unsigned __int8 *)(v12 + 32);
  *((_QWORD *)v12 + 1) = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 3) = v12 + 32;
  *((_QWORD *)v12 + 5) = 0;
  v15 = a2 + 1;
  if (v11 >= 0x100)
    v16 = 78;
  else
    v16 = 77;
  *((_QWORD *)v12 + 6) = v16 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *((_DWORD *)v12 + 22) = 0;
  v17 = a2[1];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = v17;
  if (v17)
    *(_QWORD *)(v17 + 16) = v12 + 8;
  *((_QWORD *)v12 + 2) = v15;
  *v15 = v12;
  llvm::Value::setName((uint64_t ***)v12 + 4, (uint64_t)v35);
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v14, a4, a1[6], a1[7]);
  v18 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v18)
  {
    v19 = *a1;
    v20 = *a1 + 16 * v18;
    v21 = (unsigned __int8 **)(v13 + 80);
    do
    {
      v22 = *(_DWORD *)v19;
      v23 = *(unsigned __int8 **)(v19 + 8);
      if (v23)
      {
        if (!v22)
        {
          v37 = *(unsigned __int8 **)(v19 + 8);
          llvm::MetadataTracking::track((uint64_t)&v37, v23, 2);
          v24 = *v21;
          goto LABEL_23;
        }
      }
      else
      {
        v24 = *v21;
        if (!*v21 && (v13[55] & 0x20) == 0)
          goto LABEL_20;
        if (!v22)
        {
          v37 = 0;
LABEL_23:
          if (v24)
            llvm::MetadataTracking::untrack((uint64_t)(v13 + 80), v24);
          v25 = v37;
          *v21 = v37;
          if (v25)
            llvm::MetadataTracking::retrack((uint64_t)&v37, v25, (uint64_t)(v13 + 80));
          goto LABEL_20;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v14, *(_DWORD *)v19, (llvm::MDNode *)v23);
LABEL_20:
      v19 += 16;
    }
    while (v19 != v20);
  }
  return v14;
}

void sub_1C569A204()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C569A218(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8174DC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C569A250(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8174DC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C569A270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t *PointerBitCastOrAddrSpaceCast;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  llvm::StructLayout *StructLayout;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int16 v21;
  uint64_t v22;
  llvm::PointerType *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _DWORD *v26;
  unint64_t v27;
  llvm::PointerType *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  _DWORD *v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  llvm::DataLayout *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51[2];
  _BYTE v52[32];
  __int16 v53;
  void *v54[2];
  _QWORD v55[17];

  v55[15] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)a3;
  v47 = *(_QWORD *)a3;
  v48 = &v50;
  v49 = 0;
  if (*(_DWORD *)(a3 + 16))
  {
    sub_1C614C900((uint64_t)&v48, a3 + 8);
    v7 = v47;
    v8 = (_DWORD)v49 == 0;
  }
  else
  {
    v8 = 1;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  v10 = (63 - __clz(v9));
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  v50 = v7;
  v51[0] = v52;
  v51[1] = 0;
  if (!v8)
    sub_1C614CA14((uint64_t)v51, (uint64_t)&v48);
  PointerBitCastOrAddrSpaceCast = (uint64_t *)sub_1C6284A2C(&v47, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 32));
  if (v9)
    v13 = v10;
  else
    v13 = 0;
  v14 = v50;
  sub_1C5673D1C((uint64_t)v54, v50, 0, 0, 0);
  v45 = v14;
  v46 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 56) + 40) + 272);
  v15 = llvm::PointerType::get((llvm::PointerType *)v11, 0);
  if (*PointerBitCastOrAddrSpaceCast != v15)
  {
    v53 = 257;
    PointerBitCastOrAddrSpaceCast = (uint64_t *)llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(PointerBitCastOrAddrSpaceCast, v15, (uint64_t)v52, v50);
  }
  v16 = *(unsigned __int8 *)(v11 + 8);
  if (v11 && v16 == 16)
  {
    v43 = PointerBitCastOrAddrSpaceCast;
    StructLayout = llvm::DataLayout::getStructLayout(v46, (llvm::StructType *)v11);
    v18 = *(unsigned int *)(v11 + 12);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = (char *)StructLayout + 16;
      v21 = 2 * v13;
      v22 = 8 * v18;
      do
      {
        v23 = *(llvm::PointerType **)(*(_QWORD *)(v11 + 16) + v19);
        v24 = llvm::PointerType::get(v23, 0);
        v25 = sub_1C5699904(v24, (llvm::Type *)v11, v43, *(_QWORD *)&v20[v19], (uint64_t)v54, v46);
        v26 = operator new(0x60uLL);
        v26[13] = v26[13] & 0x38000000 | 1;
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 2) = 0;
        *((_QWORD *)v26 + 3) = v26 + 8;
        v53 = 257;
        llvm::LoadInst::LoadInst((uint64_t)(v26 + 8), (uint64_t)v23, (uint64_t)v25, (uint64_t)v52, 0, v45);
        *((_WORD *)v26 + 25) = *((_WORD *)v26 + 25) & 0xFF81 | v21;
        v27 = *(unsigned int *)(a4 + 8);
        if (v27 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v27 + 1, 8);
          v27 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v27) = v26 + 8;
        ++*(_DWORD *)(a4 + 8);
        v19 += 8;
      }
      while (v22 != v19);
    }
  }
  else if (v11 && v16 == 17)
  {
    v44 = PointerBitCastOrAddrSpaceCast;
    v28 = *(llvm::PointerType **)(v11 + 24);
    sub_1C4768AD0((uint64_t)v46, (uint64_t)v28);
    v31 = v30;
    if ((_DWORD)v29 == 1)
    v42 = (uint64_t)v28;
    v32 = llvm::PointerType::get(v28, 0);
    v33 = *(unsigned int *)(v11 + 32);
    if (*(_DWORD *)(v11 + 32))
    {
      v34 = v32;
      v35 = 0;
      v36 = (unint64_t)(v31 + 7) >> 3;
      do
      {
        v37 = sub_1C5699904(v34, (llvm::Type *)v11, v44, v35, (uint64_t)v54, v46);
        v38 = operator new(0x60uLL);
        v38[13] = v38[13] & 0x38000000 | 1;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
        *((_QWORD *)v38 + 2) = 0;
        *((_QWORD *)v38 + 3) = v38 + 8;
        v53 = 257;
        llvm::LoadInst::LoadInst((uint64_t)(v38 + 8), v42, (uint64_t)v37, (uint64_t)v52, 0, v45);
        *((_WORD *)v38 + 25) = *((_WORD *)v38 + 25) & 0xFF81 | (2 * v13);
        v39 = *(unsigned int *)(a4 + 8);
        if (v39 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v39 + 1, 8);
          v39 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v39) = v38 + 8;
        ++*(_DWORD *)(a4 + 8);
        v35 += v36;
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    v40 = operator new(0x60uLL);
    v40[13] = v40[13] & 0x38000000 | 1;
    *(_QWORD *)v40 = 0;
    *((_QWORD *)v40 + 1) = 0;
    *((_QWORD *)v40 + 2) = 0;
    *((_QWORD *)v40 + 3) = v40 + 8;
    v53 = 257;
    llvm::LoadInst::LoadInst((uint64_t)(v40 + 8), v11, (uint64_t)PointerBitCastOrAddrSpaceCast, (uint64_t)v52, 0, v14);
    *((_WORD *)v40 + 25) = *((_WORD *)v40 + 25) & 0xFF81 | (2 * v13);
    v41 = *(unsigned int *)(a4 + 8);
    if (v41 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v41 + 1, 8);
      LODWORD(v41) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v41) = v40 + 8;
    ++*(_DWORD *)(a4 + 8);
  }
  if (v54[0] != v55)
    free(v54[0]);
  if (v51[0] != v52)
    free(v51[0]);
  if (v48 != &v50)
    free(v48);
}

uint64_t sub_1C569A720(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v13[2];
  _QWORD v14[2];

  v3 = *a2;
  v12 = *a2;
  v13[0] = v14;
  v13[1] = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)v13, (uint64_t)(a2 + 1));
    v3 = v12;
  }
  v4 = **(_QWORD ***)a1;
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 56);
  v6 = *(_QWORD *)(v3 - 32);
  if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != *(_QWORD *)(v3 + 72))
    v6 = 0;
  v7 = *(uint64_t **)(a1 + 8);
  v8 = *v7;
  v9 = *((unsigned int *)v7 + 2);
  v14[0] = v8;
  v14[1] = v9;
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)*v4 + 1040))(*v4, v5, v6, v14);
  if (v13[0] != v14)
    free(v13[0]);
  return v10;
}

BOOL sub_1C569A7E4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  const llvm::Use **v8;
  llvm::Value *v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  llvm::AbstractAttribute *v19;
  uint64_t v20;
  char v21;
  char v22;
  _BOOL8 v23;
  unsigned int **v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int **v33;
  llvm::AbstractAttribute *v34;
  uint64_t v35;
  char v36;
  const llvm::Use **v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  llvm::CallBase *v44;
  void *v45;
  int v46;
  void *v47;
  uint64_t v48;
  _QWORD v49[5];

  v49[4] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)a2;
  v38 = *(_QWORD **)a2;
  v39 = &v41;
  v40 = 0;
  if (*(_DWORD *)(a2 + 16))
  {
    sub_1C614C900((uint64_t)&v39, a2 + 8);
    v3 = v38;
    if ((_DWORD)v40)
    {
      v25 = (unsigned int **)a1[1];
      v41 = v38;
      v42 = &v44;
      v43 = 0;
      sub_1C614CA14((uint64_t)&v42, (uint64_t)&v39);
      v26 = **v25;
      v27 = *(v41 - 4);
      if ((_DWORD)v43)
      {
        v26 = *((_DWORD *)v42 + v26 + 1);
        if (!v27)
          goto LABEL_54;
      }
      else
      {
        v28 = *(unsigned __int8 *)(v27 + 16);
        if (v28 >= 0x15 && v28 != 24)
          v26 = *((_DWORD *)v42 + v26 + 1);
      }
      if (!*(_BYTE *)(v27 + 16) && *(_QWORD *)(v27 + 24) == v41[9])
      {
        if (*(_QWORD *)(v27 + 96) <= (unint64_t)v26)
          goto LABEL_63;
LABEL_55:
        v30 = v26;
        v33 = (int **)(v25 + 1);
        v32 = (uint64_t)v25[1];
        v31 = (uint64_t)v33[1];
        if ((*(_WORD *)(v27 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v27);
        v34 = sub_1C56895FC(v32, *(_QWORD *)(v27 + 88) + 40 * v30, 0, v31, 0, 0, 1);
        if ((*(unsigned int (**)(uint64_t))(*((_QWORD *)v34 + 4) + 16))((uint64_t)v34 + 32)
          && ((v35 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v34 + 112))(v34), !v36)
           || *(_BYTE *)(v31 + 56) && *(_QWORD *)(v31 + 48) == v35))
        {
          v23 = 1;
        }
        else
        {
LABEL_63:
          v23 = 0;
        }
        if (v42 != &v44)
          free(v42);
        goto LABEL_40;
      }
LABEL_54:
      v27 = 0;
      goto LABEL_55;
    }
  }
  v4 = *(unsigned __int8 *)(*(v3 - 4) + 16);
  if (v4 >= 0x15 && v4 != 24)
  {
    v23 = 0;
    goto LABEL_40;
  }
  v6 = *a1;
  v7 = *(_QWORD *)(*a1 + 16);
  v47 = v49;
  v48 = 0x400000000;
  llvm::AbstractCallSite::getCallbackUses(v3, (uint64_t)&v47);
  v8 = (const llvm::Use **)v47;
  if (!(_DWORD)v48)
  {
    v18 = 2;
    goto LABEL_37;
  }
  v37 = (const llvm::Use **)((char *)v47 + 8 * v48);
  while (2)
  {
    llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v44, *v8);
    v9 = sub_1C6185E84(&v44);
    v10 = v9;
    if ((*((_WORD *)v9 + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(v9);
      v11 = *((_QWORD *)v10 + 11);
      if ((*((_WORD *)v10 + 9) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(v10);
        v12 = *((_QWORD *)v10 + 11);
        goto LABEL_12;
      }
    }
    else
    {
      v11 = *((_QWORD *)v9 + 11);
    }
    v12 = v11;
LABEL_12:
    v13 = v12 + 40 * *((_QWORD *)v10 + 12);
    if (v11 == v13)
    {
LABEL_26:
      v18 = 0;
      v22 = 1;
      goto LABEL_27;
    }
    v14 = v11;
    while (1)
    {
      v15 = *(_DWORD *)(v11 + 32);
      if (v46
        || ((v16 = *(unsigned __int8 *)(*((_QWORD *)v44 - 4) + 16), v16 >= 0x15) ? (v17 = v16 == 24) : (v17 = 1), !v17))
      {
        v15 = *((_DWORD *)v45 + (v15 + 1));
      }
      if (v15 != **(_DWORD **)v6)
        goto LABEL_25;
      v18 = 1;
      v19 = sub_1C56895FC(*(_QWORD *)(v6 + 8), v14, 0, v7, 0, 0, 1);
      if (!(*(unsigned int (**)(uint64_t))(*((_QWORD *)v19 + 4) + 16))((uint64_t)v19 + 32))
        break;
      v20 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v19 + 112))(v19);
      if (v21)
      {
        v22 = 0;
        if (!*(_BYTE *)(v7 + 56) || *(_QWORD *)(v7 + 48) != v20)
          goto LABEL_27;
      }
LABEL_25:
      v11 += 40;
      v14 += 40;
      if (v11 == v13)
        goto LABEL_26;
    }
    v22 = 0;
LABEL_27:
    if (v45 != &v47)
      free(v45);
    if ((v22 & 1) != 0)
    {
      if (++v8 == v37)
      {
        v18 = 2;
        break;
      }
      continue;
    }
    break;
  }
  v8 = (const llvm::Use **)v47;
LABEL_37:
  if (v8 != v49)
    free(v8);
  v23 = v18 == 2;
LABEL_40:
  if (v39 != &v41)
    free(v39);
  return v23;
}

uint64_t sub_1C569ABB4(uint64_t a1, uint64_t a2)
{
  void *v3[2];
  uint64_t v4;

  v3[0] = &v4;
  v3[1] = 0;
  if (*(_DWORD *)(a2 + 16))
  {
    sub_1C614C900((uint64_t)v3, a2 + 8);
    if (v3[0] != &v4)
      free(v3[0]);
  }
  return 1;
}

BOOL sub_1C569AC14(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::AbstractAttribute *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *a2;
  v21 = *a2;
  v22 = &v24;
  v23 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)&v22, (uint64_t)(a2 + 1));
    v4 = *(_QWORD *)(a1 + 16);
    v24 = v21;
    v25 = &v27;
    v26 = 0;
    if ((_DWORD)v23)
      sub_1C614CA14((uint64_t)&v25, (uint64_t)&v22);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 16);
    v24 = v3;
    v25 = &v27;
    v26 = 0;
  }
  v27 = sub_1C628D358((uint64_t)&v24, **(_DWORD **)a1);
  v28 = v5;
  if (v25 != &v27)
    free(v25);
  if (sub_1C6283CA4(&v27))
  {
    v6 = sub_1C56895FC(*(_QWORD *)(a1 + 8), v27, v28, v4, 0, 0, 1);
    v7 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v6 + 112))(v6);
    v9 = *(uint64_t **)(a1 + 24);
    v10 = *v9;
    v11 = v9[1];
    LOBYTE(v12) = 1;
    v13 = v11 & 0xFFFFFFFFFFFFFF00;
    if (*v9 == v7)
      v14 = *v9;
    else
      v14 = 0;
    if (*v9 == v7)
    {
      v12 = v9[1];
      v15 = v11 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      v15 = 0;
    }
    if ((_BYTE)v8)
      v10 = v14;
    else
      v12 = v9[1];
    if ((_BYTE)v8)
      v13 = v15;
    if (v9[1])
    {
      v16 = v12;
    }
    else
    {
      v10 = v7;
      v16 = v8;
    }
    if (v9[1])
      v17 = v13;
    else
      v17 = v8 & 0xFFFFFFFFFFFFFF00;
    *v9 = v10;
    v9[1] = v17 | v16;
    v18 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v18 + 8))
      v19 = *(_QWORD *)v18 != 0;
    else
      v19 = 1;
  }
  else
  {
    v19 = 0;
  }
  if (v22 != &v24)
    free(v22);
  return v19;
}

_QWORD *sub_1C569AD9C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C569ADD0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C569AE14(uint64_t result)
{
  *(_BYTE *)(result + 41) = *(_BYTE *)(result + 40);
  if (!*(_BYTE *)(result + 56))
    *(_BYTE *)(result + 56) = 1;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

void sub_1C569AE34()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F30F0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F30F0))
      __cxa_guard_release(&qword_1EF8F30F0);
  }
}

uint64_t *sub_1C569AE74(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C569AE8C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C569AED4(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C569AF08(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C569AF4C(uint64_t result)
{
  *(_BYTE *)(result + 41) = *(_BYTE *)(result + 40);
  if (!*(_BYTE *)(result + 56))
    *(_BYTE *)(result + 56) = 1;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

void sub_1C569AF6C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F30F8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F30F8))
      __cxa_guard_release(&qword_1EF8F30F8);
  }
}

uint64_t *sub_1C569AFAC(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C569AFC4(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C569B00C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C569B040(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C569B084(_BYTE *a1)
{
  _BOOL8 result;
  int v3;

  v3 = 69;
  result = llvm::IRPosition::hasAttr((llvm::IRPosition *)(a1 + 16), &v3, 1, 0, 0);
  if (result)
    a1[40] = a1[41];
  return result;
}

void sub_1C569B0D4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3100);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3100))
      __cxa_guard_release(&qword_1EF8F3100);
  }
}

uint64_t sub_1C569B114(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  char v7;

  result = (uint64_t)sub_1C569877C(a1, a2);
  *(_QWORD *)(a1 + 48) = result;
  *(_QWORD *)(a1 + 56) = v5;
  if (!(_BYTE)v5)
    return 1;
  if (result)
  {
    if ((~*((unsigned __int16 *)sub_1C5689124(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1, 0, 0, 1) + 21) & 7) == 0
      && *((_BYTE *)sub_1C5688774(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1, 0, 0, 1) + 41)
      && (sub_1C5675BDC(a2, (uint64_t *)(a1 + 16), a1, 0, &v7) & 1) != 0)
    {
      return 1;
    }
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
    v6 = *(unsigned __int8 *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = 0;
    result = 0;
    if (!v6)
      *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
    *(_QWORD *)(a1 + 48) = 0;
  }
  return result;
}

uint64_t *sub_1C569B204(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C569B21C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C569B264(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 64));
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C569B2B0(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 64));
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C569B30C(uint64_t a1, _QWORD *a2)
{
  llvm::IRPosition *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ***v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t i;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t (**v19)();
  _QWORD *v20;
  uint64_t v21;
  uint64_t (**v22)();
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *j;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  BOOL v40[2];
  uint64_t (**v41)();
  uint64_t (**v42)();
  uint64_t v43;
  _QWORD *v44[4];
  __int16 v45;
  uint64_t v46;
  _QWORD v47[9];
  _QWORD v48[4];
  _QWORD *v49[3];
  __int16 v50;
  uint64_t v51;
  _QWORD **v52;
  _QWORD v53[2];
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _BYTE v60[32];
  _QWORD v61[2];
  uint64_t v62;
  _QWORD **v63;
  _QWORD *v64[3];
  __int16 v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD v69[6];

  v69[4] = *MEMORY[0x1E0C80C00];
  v58 = (uint64_t *)v60;
  v59 = 0x400000000;
  v4 = (llvm::IRPosition *)(a1 + 16);
  v61[0] = 0x4D0000004CLL;
  llvm::IRPosition::getAttrs((llvm::IRPosition *)(a1 + 16), (int *)v61, 2, (uint64_t)&v58, 0, (uint64_t)a2);
  if ((_DWORD)v59)
  {
    v5 = v58;
    v6 = 8 * v59;
    do
    {
      v7 = *v5;
      if (*v5)
        v7 = *(_QWORD *)(v7 + 16);
      *(uint32x2_t *)(a1 + 48) = vmax_u32(*(uint32x2_t *)(a1 + 48), (uint32x2_t)vdup_n_s32(v7));
      sub_1C569CBA0(a1 + 32);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  *(_QWORD *)(a1 + 96) = sub_1C568829C((uint64_t)a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1, 2, 0, 1);
  *(_WORD *)v40 = 0;
  v8 = (uint64_t ***)sub_1C6284150(v4);
  *(uint32x2_t *)(a1 + 48) = vmax_u32(*(uint32x2_t *)(a1 + 48), (uint32x2_t)vdup_n_s32(llvm::Value::getPointerDereferenceableBytes(v8, *(const llvm::DataLayout **)(a2[11] + 120), &v40[1], v40)));
  sub_1C569CBA0(a1 + 32);
  v9 = sub_1C6283CA4(v4);
  if (v9 > 6 || ((1 << v9) & 0x54) == 0)
    goto LABEL_18;
  v10 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v10 = *(_QWORD *)(v10 + 24);
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (v11 == 21)
  {
    v12 = (unint64_t *)(v10 + 24);
LABEL_15:
    v10 = *v12;
    if (!*v12)
      goto LABEL_16;
    goto LABEL_17;
  }
  if (*(_BYTE *)(v10 + 16))
  {
    if (v11 < 0x1C)
    {
LABEL_16:
      (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
      goto LABEL_19;
    }
    v12 = (unint64_t *)(*(_QWORD *)(v10 + 40) + 56);
    goto LABEL_15;
  }
LABEL_17:
  if (!sub_1C62873F8((uint64_t)a2, (llvm::GlobalValue *)v10))
    goto LABEL_16;
LABEL_18:
  v13 = sub_1C5676CEC(v4);
  if (v13)
  {
    v14 = v13;
    v39 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v53[0] = 0;
    v53[1] = 0;
    v54 = 0;
    v56 = 0;
    v57 = 0;
    v55 = 0;
    for (i = *(_QWORD *)(sub_1C6284150(v4) + 8); i; i = *(_QWORD *)(i + 8))
    {
      v61[0] = i;
      sub_1C542EB4C(v53, v61);
    }
    v16 = a2[11] + 136;
    sub_1C569CC2C(a1, a2, v16, v14, v53, (uint64_t)v39);
    if (((*(uint64_t (**)(_QWORD *))(*v39 + 24))(v39) & 1) == 0)
    {
      v67 = v69;
      v68 = 0x400000000;
      v52 = &v67;
      sub_1C5694C5C(v16, v14, (unsigned int (*)(uint64_t))sub_1C569CF94, (uint64_t)&v52);
      v17 = v67;
      if ((_DWORD)v68)
      {
        v18 = &v67[v68];
        v19 = &off_1E8175200;
        v20 = v67;
        v37 = v18;
        do
        {
          v21 = *v20;
          v61[0] = &off_1E81751C0;
          v61[1] = v19;
          v22 = v19;
          v64[0] = 0;
          v64[1] = 0;
          v63 = v64;
          v64[2] = &off_1E8172AE8;
          v66 = 0;
          v62 = -1;
          v65 = 257;
          v23 = *(_DWORD *)(v21 + 20);
          if ((v23 & 0x40000000) != 0)
          {
            v25 = *(_QWORD *)(v21 - 8);
            v24 = v23 & 0x7FFFFFF;
          }
          else
          {
            v24 = v23 & 0x7FFFFFF;
            v25 = v21 - 32 * v24;
          }
          v26 = v39;
          v27 = (_DWORD)v24 == 3;
          if (v24 == v27)
          {
            v28 = 0xFFFFFFFFLL;
          }
          else
          {
            v38 = v20;
            v29 = (uint64_t *)(v25 + 32 * v24);
            v30 = (uint64_t *)(v25 + 32 * v27);
            do
            {
              v31 = *v30;
              v48[2] = 0xFFFFFFFF00000000;
              v48[0] = &off_1E81751C0;
              v48[1] = v22;
              v49[0] = 0;
              v49[1] = 0;
              v48[3] = v49;
              v50 = 256;
              v49[2] = &off_1E8172AE8;
              v51 = 0;
              v32 = &v56[-v55];
              v33 = *(_QWORD *)(v31 + 48);
              if (v33)
                v34 = v33 - 24;
              else
                v34 = 0;
              sub_1C569CC2C(a1, a2, v16, v34, v53, (uint64_t)v48);
              for (j = &v32[v55]; v56 != j; j = sub_1C628D264((uint64_t)v53, j))
                ;
              sub_1C628D8C0((uint64_t)v47, v61, (uint64_t)v48);
              v47[0] = &off_1E81751C0;
              sub_1C6143384((_QWORD *)v47[4]);
              v48[0] = &off_1E81751C0;
              sub_1C6143384(v49[0]);
              v30 += 4;
            }
            while (v30 != v29);
            v28 = v62;
            v26 = v39;
            v18 = v37;
            v20 = v38;
          }
          (*(void (**)(_QWORD *, uint64_t))(v26[1] + 56))(v39 + 1, v28);
          (*(void (**)(_QWORD *, _QWORD))(v26[6] + 56))(v39 + 6, v65);
          v36 = v26[2];
          v42 = v22;
          v43 = v36;
          v41 = &off_1E81751C0;
          sub_1C569D01C((uint64_t)v44, v39 + 3);
          v45 = *((_WORD *)v26 + 28);
          v46 = v26[8];
          v44[3] = &off_1E8172AE8;
          v41 = &off_1E81751C0;
          sub_1C6143384(v44[1]);
          v61[0] = &off_1E81751C0;
          sub_1C6143384(v64[0]);
          v19 = v22;
          ++v20;
        }
        while (v20 != v18);
        v17 = v67;
      }
      if (v17 != v69)
        free(v17);
    }
    sub_1C6176BF8(v53);
  }
LABEL_19:
  if (v58 != (uint64_t *)v60)
    free(v58);
}

uint64_t sub_1C569B810(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C569B818(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C569B820(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const std::string::value_type *v5;
  std::string *v6;
  std::string::size_type v7;
  const std::string::value_type *v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  char *v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;

  if (*(_DWORD *)(a1 + 52))
  {
    *((_BYTE *)&v27.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&v27, "dereferenceable");
    v4 = *(_QWORD *)(a1 + 96);
    v5 = "_or_null";
    if (v4 && *(_BYTE *)(v4 + 41))
      v5 = "";
    v6 = std::string::append(&v27, v5);
    v7 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (*(_BYTE *)(a1 + 89))
      v8 = "_globally";
    else
      v8 = "";
    v9 = std::string::append(&v28, v8);
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v29, "<");
    v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v26, *(_DWORD *)(a1 + 48));
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v26;
    else
      v13 = (std::string *)v26.__r_.__value_.__r.__words[0];
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v26.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v26.__r_.__value_.__l.__size_;
    v15 = std::string::append(&v30, (const std::string::value_type *)v13, size);
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v31, "-");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v25, *(_DWORD *)(a1 + 52));
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v25;
    else
      v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = *((_BYTE *)&v25.__r_.__value_.__s + 23) & 0x7F;
    else
      v20 = v25.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v32, (const std::string::value_type *)v19, v20);
    v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v33, ">");
    *(std::string *)a2 = *v23;
    v23->__r_.__value_.__r.__words[0] = 0;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
  else
  {
    v24 = (char *)operator new(0x19uLL);
    *(_QWORD *)a2 = v24;
    *(_OWORD *)(a2 + 8) = xmmword_1C640C6A0;
    strcpy(v24, "unknown-dereferenceable");
  }
}

uint64_t sub_1C569BAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::IRPosition *v6;
  int v7;
  int v8;

  v3 = sub_1C628C768(a1, a2);
  v4 = *(_QWORD *)(a1 + 96);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 41))
    {
      v6 = (llvm::IRPosition *)(a1 + 16);
      v8 = 77;
      if (llvm::IRPosition::hasAttr(v6, &v8, 1, 0, 0))
      {
        v7 = 77;
        sub_1C5690138(v6, &v7, 1);
        return 0;
      }
    }
  }
  return v3;
}

void sub_1C569BB64()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3108);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3108))
      __cxa_guard_release(&qword_1EF8F3108);
  }
}

uint64_t sub_1C569BBA4(uint64_t a1, llvm::Attributor *a2)
{
  llvm::Attributor *v2;
  llvm::AbstractAttribute *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t i;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  llvm::Argument *v26;
  int v27;
  char v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t ***v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v42;
  unsigned int v43;
  unint64_t AssumedSimplified;
  char v45;
  uint64_t v46;
  int64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  llvm::UndefValue *AssumedConstant;
  char v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  llvm::AbstractAttribute *v63;
  llvm::AbstractAttribute *v64;
  uint64_t PointerDereferenceableBytes;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint32x2_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD **v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  __int128 v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  llvm::AbstractAttribute **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  int64_t v114;
  char v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  _BOOL4 v121;
  uint64_t v122;
  uint64_t v124;
  _BYTE *v125;
  llvm::AbstractAttribute *v126;
  int64x2_t v127;
  unint64_t v128;
  llvm::AA *v129;
  llvm::DataLayout *v130;
  BOOL v131;
  _QWORD v132[2];
  uint32x2_t v133;
  _QWORD **v134;
  _QWORD *v135[2];
  uint64_t (**v136)();
  __int16 v137;
  uint64_t v138;
  unint64_t v139[2];
  _QWORD v140[2];
  BOOL v141[8];
  int v142[3];
  char v143;
  uint64_t v144;
  int64x2_t v145;
  int64x2_t v146;
  _BYTE *v147;
  uint64_t v148;
  _BYTE v149[32];
  uint64_t v150;
  int64x2_t v151;
  int64x2_t v152;
  _BYTE *v153;
  uint64_t v154;
  _BYTE v155[32];
  char *v156;
  unsigned int v157;
  unsigned int v158;
  _QWORD v159[32];
  void *v160[2];
  _QWORD v161[33];
  _QWORD *v162[2];
  _QWORD v163[9];
  uint64_t *v164;
  uint64_t v165;
  _QWORD v166[14];

  v2 = a2;
  v3 = (llvm::AbstractAttribute *)a1;
  v166[12] = *MEMORY[0x1E0C80C00];
  v130 = *(llvm::DataLayout **)(*((_QWORD *)a2 + 11) + 120);
  v133 = (uint32x2_t)0xFFFFFFFF00000000;
  v132[0] = &off_1E81751C0;
  v132[1] = &off_1E8175200;
  v134 = v135;
  v135[0] = 0;
  v137 = 256;
  v135[1] = 0;
  v136 = &off_1E8172AE8;
  v138 = 0;
  v131 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = sub_1C5676CEC((_DWORD *)(a1 + 16));
  v140[0] = v4;
  v140[1] = v5;
  v163[0] = 1;
  for (i = 1; i != 9; i += 2)
    v163[i] = -4096;
  v164 = v166;
  v165 = 0x400000000;
  v8 = sub_1C6284150((llvm::IRPosition *)v140);
  v9 = 0;
  v160[0] = v161;
  v160[1] = (void *)0x1000000000;
  v162[1] = 0;
  v162[0] = 0;
  v161[32] = v162;
  v156 = (char *)v159;
  v158 = 16;
  v159[0] = v8;
  v159[1] = v6;
  v128 = v8;
  v127 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v10 = 1;
  v129 = v2;
  v126 = v3;
  do
  {
    v11 = &v156[16 * v10];
    v12 = *((_QWORD *)v11 - 2);
    v13 = *((_QWORD *)v11 - 1);
    v157 = v10 - 1;
    v139[0] = v12;
    v139[1] = v13;
    if ((sub_1C568F35C((uint64_t)v160, v139) & 0x100000000) == 0)
    {
      v14 = v9;
      goto LABEL_134;
    }
    if ((int)v9 >= 16)
      goto LABEL_196;
    v14 = (v9 + 1);
    if (*(_BYTE *)(*(_QWORD *)v12 + 8) != 15)
    {
      v19 = *(unsigned __int8 *)(v12 + 16);
      if (v19 < 0x1C)
        goto LABEL_24;
      v20 = v19 - 33;
      v21 = v20 > 0x33;
      v22 = (1 << v20) & 0x8000000000041;
      if (v21 || v22 == 0)
        goto LABEL_24;
      v24 = *(_QWORD *)(v12 - 32);
      if (!v24 || *(_BYTE *)(v24 + 16) || *(_QWORD *)(v24 + 24) != *(_QWORD *)(v12 + 72))
        goto LABEL_24;
      if ((*(_WORD *)(v24 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(v12 - 32));
        v86 = *(_QWORD *)(v24 + 88);
        if ((*(_WORD *)(v24 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v24);
          v87 = *(_QWORD *)(v24 + 88);
LABEL_139:
          v88 = v87 + 40 * *(_QWORD *)(v24 + 96);
          while (v86 != v88)
          {
            v89 = *(_QWORD *)(*(_QWORD *)(v86 + 24) + 112);
            if (v89)
            {
              v90 = *(unsigned int *)(v86 + 32);
              if ((v90 + 2) < *(_DWORD *)(v89 + 8))
              {
                v91 = *(_QWORD *)(v89 + 8 * (v90 + 2) + 40);
                if (v91)
                {
                  if ((*(_BYTE *)(v91 + 17) & 0x40) != 0)
                  {
                    v15 = *(llvm::Value **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32 * v90);
                    goto LABEL_9;
                  }
                }
              }
            }
            v86 += 40;
          }
          goto LABEL_24;
        }
      }
      else
      {
        v86 = *(_QWORD *)(v24 + 88);
      }
      v87 = v86;
      goto LABEL_139;
    }
    v15 = llvm::Value::stripPointerCasts((llvm::Value *)v12);
LABEL_9:
    if (v15)
      v16 = v15 == (llvm::Value *)v12;
    else
      v16 = 1;
    if (!v16)
    {
LABEL_13:
      v17 = v157;
      if (v157 >= (unint64_t)v158)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, (uint64_t)v159, v157 + 1, 16);
        v17 = v157;
      }
      v18 = &v156[16 * v17];
      *(_QWORD *)v18 = v15;
LABEL_133:
      *((_QWORD *)v18 + 1) = v13;
      ++v157;
      goto LABEL_134;
    }
LABEL_24:
    v25 = *(unsigned __int8 *)(v12 + 16);
    if (v25 != 85)
    {
      if (v25 == 83)
      {
        v78 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 56);
        *(_QWORD *)v141 = v78;
        v142[0] = 0;
        sub_1C6281EE8((uint64_t)&v150, (uint64_t)v163, (uint64_t *)v141, v142);
        v79 = v150;
        if (v151.i8[8])
        {
          v145.i32[3] = 0;
          *(__int32 *)((char *)&v145.i32[2] + 1) = 0;
          v144 = v78;
          v145.i64[0] = 0;
          v145.i8[8] = 0;
          v80 = v164;
          if (v165 >= HIDWORD(v165))
          {
            v113 = v165 + 1;
            if (v164 <= &v144 && &v164[3 * v165] > &v144)
            {
              v114 = (char *)&v144 - (char *)v164;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, (uint64_t)v166, v113, 24);
              v80 = v164;
              v81 = (uint64_t *)((char *)v164 + v114);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v164, (uint64_t)v166, v113, 24);
              v81 = &v144;
              v80 = v164;
            }
          }
          else
          {
            v81 = &v144;
          }
          v82 = &v80[3 * v165];
          v83 = *(_OWORD *)v81;
          v82[2] = v81[2];
          *(_OWORD *)v82 = v83;
          v84 = v165;
          LODWORD(v165) = v165 + 1;
          *(_DWORD *)(v79 + 8) = v84;
        }
        else
        {
          v84 = *(_DWORD *)(v150 + 8);
        }
        v92 = v164;
        v93 = &v164[3 * v84];
        v95 = v93[1];
        v94 = (llvm::AbstractAttribute **)(v93 + 1);
        if (!v95)
          *v94 = sub_1C5677D4C((uint64_t)v129, v78, 0, (uint64_t)v3, 2, 0, 1);
        v96 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
        if ((_DWORD)v96)
        {
          v97 = 0;
          v98 = 0;
          v99 = &v92[3 * v84 + 2];
          v100 = 8 * v96;
          do
          {
            v101 = *(_DWORD *)(v12 + 20);
            if ((v101 & 0x40000000) != 0)
              v102 = *(_QWORD *)(v12 - 8);
            else
              v102 = v12 - 32 * (v101 & 0x7FFFFFF);
            v103 = *(_QWORD *)(v102 + 32 * *(unsigned int *)(v12 + 60) + v98);
            if ((*(unsigned int (**)(llvm::AbstractAttribute *, uint64_t, _QWORD))(*(_QWORD *)*v94 + 168))(*v94, v103, *(_QWORD *)(v12 + 40)))
            {
              *(_BYTE *)v99 = 1;
              v104 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)*v94 + 4) + 24))((uint64_t)*v94 + 32);
              v131 |= v104 ^ 1;
            }
            else
            {
              v105 = *(_DWORD *)(v12 + 20);
              if ((v105 & 0x40000000) != 0)
                v106 = *(_QWORD *)(v12 - 8);
              else
                v106 = v12 - 32 * (v105 & 0x7FFFFFF);
              v107 = *(_QWORD *)(v103 + 40);
              if (v107 == v103 + 40)
              {
                v109 = 0;
              }
              else
              {
                if (v107)
                  v108 = v107 - 24;
                else
                  v108 = 0;
                if (*(unsigned __int8 *)(v108 + 16) - 29 >= 0xB)
                  v109 = 0;
                else
                  v109 = v108;
              }
              v110 = *(_QWORD *)(v106 + v97);
              v111 = v157;
              if (v157 >= (unint64_t)v158)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, (uint64_t)v159, v157 + 1, 16);
                v111 = v157;
              }
              v112 = &v156[16 * v111];
              *(_QWORD *)v112 = v110;
              *((_QWORD *)v112 + 1) = v109;
              ++v157;
            }
            v98 += 8;
            v97 += 32;
          }
          while (v100 != v98);
          v3 = v126;
        }
        v2 = v129;
        goto LABEL_134;
      }
      if (v25 == 21)
        v26 = (llvm::Argument *)v12;
      else
        v26 = 0;
      *(_QWORD *)v141 = v26;
      if (v26 && (llvm::Argument::hasPassPointeeByValueCopyAttr(v26) & 1) == 0)
      {
        v150 = (uint64_t)&v151.i64[1];
        v151.i64[0] = 0x300000000;
        v143 = 0;
        v144 = (uint64_t)v141;
        v145.i64[0] = (uint64_t)&v150;
        v27 = llvm::Attributor::checkForAllCallSites((uint64_t)v2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C569D244, (uint64_t)&v144, *(_QWORD *)(*(_QWORD *)v141 + 24), 1, (uint64_t)v3, &v143);
        v28 = v27;
        v29 = 0;
        if (v27)
        {
          sub_1C612E234((unsigned int *)&v156, (_BYTE *)v150, (_BYTE *)(v150 + 16 * v151.u32[0]));
          v29 = 3;
        }
        if ((unint64_t *)v150 != &v151.u64[1])
          free((void *)v150);
        if ((v28 & 1) != 0)
          goto LABEL_120;
      }
      v30 = *(unsigned __int8 *)(v12 + 16);
      if (v30 < 0x15)
        goto LABEL_37;
      v42 = v12;
      if (v30 >= 0x1C)
      {
        v43 = v30 - 33;
        v42 = v12;
        if (v43 <= 0x33)
        {
          v42 = v12;
          if (((1 << v43) & 0x8000000000041) != 0)
            v42 = v12 | 1;
        }
      }
      v150 = v42;
      v151.i64[0] = 0;
      AssumedSimplified = llvm::Attributor::getAssumedSimplified(v2, (const llvm::IRPosition *)&v150, v3, &v131);
      if (!v45)
        goto LABEL_134;
      v15 = (llvm::Value *)AssumedSimplified;
      if (AssumedSimplified && v12 != AssumedSimplified)
        goto LABEL_13;
      if (*(_BYTE *)(v12 + 16) != 60)
      {
LABEL_37:
        v31 = *(_DWORD *)(*(_QWORD *)v12 + 8);
        if ((v31 & 0xFE) == 0x12)
          v31 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v12 + 16) + 8);
        v145.i32[0] = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v130, v31 >> 8) + 12);
        if (v145.i32[0] > 0x40u)
          llvm::APInt::initSlowCase((llvm::APInt *)&v144, 0, 0);
        else
          v144 = 0;
        v141[0] = 0;
        v143 = 0;
        v150 = (uint64_t)v2;
        v151.i64[0] = (uint64_t)v3;
        v151.i64[1] = (uint64_t)&v143;
        v152.i64[0] = (uint64_t)v141;
        v32 = llvm::Value::stripAndAccumulateConstantOffsets(v12, v130, (const void **)&v144, 1, 1, (unsigned int (*)(uint64_t))sub_1C5695154, (uint64_t)&v150);
        v33 = (uint64_t ***)v32;
        v34 = *(unsigned __int8 *)(v32 + 16);
        if (v34 != 21)
        {
          if (v34 < 0x1C)
          {
            if (!*(_BYTE *)(v32 + 16))
            {
              v36 = v32 | 2;
              goto LABEL_89;
            }
          }
          else
          {
            v35 = v34 - 33;
            if (v35 <= 0x33 && ((1 << v35) & 0x8000000000041) != 0)
            {
              v36 = v32 | 1;
LABEL_89:
              v63 = sub_1C5688C4C((uint64_t)v2, v36, 0, (uint64_t)v3, 0, 0, 1);
              v64 = v63;
              if ((int)v9 <= 0 && v63 == v3)
              {
                LOBYTE(v150) = 0;
                v141[0] = 0;
                PointerDereferenceableBytes = llvm::Value::getPointerDereferenceableBytes(v33, v130, (BOOL *)&v150, v141);
                HIBYTE(v137) = v137;
              }
              else
              {
                v66 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v63 + 48))(v63);
                PointerDereferenceableBytes = *(unsigned int *)(v66 + 20);
                ((void (*)(uint64_t (***)(), _QWORD, _QWORD))v136[9])(&v136, *(unsigned __int8 *)(v66 + 57), *(unsigned __int8 *)(v66 + 56));
              }
              if (v145.i32[0] > 0x40u)
                v67 = *(_QWORD *)v144;
              else
                v67 = v144 << -v145.i8[0] >> -v145.i8[0];
              v68 = (PointerDereferenceableBytes - (v67 & ~(v67 >> 63))) & ~((PointerDereferenceableBytes - (v67 & ~(v67 >> 63))) >> 63);
              v69 = v133.u32[1];
              if (v133.i32[1] >= v68)
                v69 = (PointerDereferenceableBytes - (v67 & ~(v67 >> 63))) & ~((PointerDereferenceableBytes - (v67 & ~(v67 >> 63))) >> 63);
              if (v69 <= v133.i32[0])
                v69 = v133.i32[0];
              v133.i32[1] = v69;
              if (v64 != v3)
                goto LABEL_116;
              if ((int)v9 <= 0)
              {
                v70 = vmax_u32((uint32x2_t)__PAIR64__(v69, v133.u32[0]), (uint32x2_t)vdup_n_s32(v68));
                v71 = v70.u32[0];
                v72 = v134;
                if (v134 != v135)
                {
                  do
                  {
                    v73 = v72[4];
                    if (v71 < v73)
                      break;
                    v74 = v72[5] + v73;
                    if (v71 <= v74)
                      v71 = v74;
                    v75 = (_QWORD *)v72[1];
                    if (v75)
                    {
                      do
                      {
                        v76 = (_QWORD **)v75;
                        v75 = (_QWORD *)*v75;
                      }
                      while (v75);
                    }
                    else
                    {
                      do
                      {
                        v76 = (_QWORD **)v72[2];
                        v16 = *v76 == v72;
                        v72 = v76;
                      }
                      while (!v16);
                    }
                    v72 = v76;
                  }
                  while (v76 != v135);
                }
                v133 = vmax_u32(v70, (uint32x2_t)vdup_n_s32(v71));
              }
              else if (v67 < 1)
              {
LABEL_116:
                v77 = (*(uint64_t (**)(_QWORD *))(v132[0] + 16))(v132);
                if (v145.i32[0] >= 0x41u && v144)
                  MEMORY[0x1CAA32F9C](v144, 0x1000C8000313F17);
                v29 = v77 ^ 1;
LABEL_120:
                if (v29 != 3 && v29)
                {
LABEL_196:
                  v115 = 0;
                  goto LABEL_197;
                }
                goto LABEL_134;
              }
              (*(void (**)(_QWORD *))(v132[0] + 40))(v132);
              goto LABEL_116;
            }
          }
        }
        v36 = v32;
        goto LABEL_89;
      }
      v141[0] = 0;
      if (*(_QWORD *)(v12 - 32) == v128)
      {
LABEL_186:
        v2 = v129;
        goto LABEL_37;
      }
      v150 = 1;
      v151 = v127;
      v152 = v127;
      v153 = v155;
      v154 = 0x400000000;
      v144 = 1;
      v145 = v127;
      v146 = v127;
      v147 = v149;
      v148 = 0x400000000;
      LODWORD(v46) = 1;
      if (llvm::AA::getPotentiallyLoadedValues(v129, v12, &v150, &v144, v3, v141, 1))
      {
        if (!(_DWORD)v154)
        {
LABEL_175:
          LODWORD(v46) = 0;
          v29 = 3;
LABEL_178:
          if (v147 != v149)
            free(v147);
          if ((v144 & 1) == 0)
            MEMORY[0x1CAA32FB4](v145.i64[0], 8);
          if (v153 != v155)
            free(v153);
          if ((v150 & 1) != 0)
          {
            if ((_DWORD)v46)
              goto LABEL_186;
          }
          else
          {
            MEMORY[0x1CAA32FB4](v151.i64[0], 8);
            if ((_DWORD)v46)
              goto LABEL_186;
          }
          v2 = v129;
          goto LABEL_120;
        }
        v47 = (int64_t *)v153;
        v48 = 8 * v154;
        while (1)
        {
          LODWORD(v46) = 1;
          if (!llvm::AA::isDynamicallyUnique(v129, v3, *v47, (const llvm::Value *)1))
            break;
          ++v47;
          v48 -= 8;
          if (!v48)
          {
            if (!(_DWORD)v154)
              goto LABEL_175;
            v49 = (uint64_t *)v153;
            v50 = v157;
            v46 = 8 * v154;
            do
            {
              v51 = *v49;
              if (v50 >= v158)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, (uint64_t)v159, v50 + 1, 16);
                v50 = v157;
              }
              v52 = &v156[16 * v50];
              *(_QWORD *)v52 = v51;
              *((_QWORD *)v52 + 1) = v13;
              v50 = ++v157;
              ++v49;
              v46 -= 8;
            }
            while (v46);
            v29 = 3;
            goto LABEL_178;
          }
        }
      }
      v29 = 0;
      goto LABEL_178;
    }
    v37 = *(_QWORD *)(v12 - 96);
    v38 = *(unsigned __int8 *)(v37 + 16);
    if (v38 != 21)
    {
      if (v38 < 0x1C)
      {
        if (!*(_BYTE *)(v37 + 16))
          v37 |= 2uLL;
      }
      else
      {
        v39 = v38 - 33;
        v21 = v39 > 0x33;
        v40 = (1 << v39) & 0x8000000000041;
        if (!v21 && v40 != 0)
          v37 |= 1uLL;
      }
    }
    v150 = v37;
    v151.i64[0] = 0;
    AssumedConstant = llvm::Attributor::getAssumedConstant(v2, (const llvm::IRPosition *)&v150, v3, &v131);
    if (v54)
    {
      if (!AssumedConstant)
        goto LABEL_82;
      v55 = *((unsigned __int8 *)AssumedConstant + 16);
      if ((v55 - 11) < 2)
        goto LABEL_134;
      if (v55 != 16)
      {
LABEL_82:
        v58 = *(_QWORD *)(v12 - 64);
        v59 = v157;
        if (v157 >= (unint64_t)v158)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, (uint64_t)v159, v157 + 1, 16);
          v59 = v157;
        }
        v60 = &v156[16 * v59];
        *(_QWORD *)v60 = v58;
        *((_QWORD *)v60 + 1) = v13;
        v61 = v157 + 1;
        v157 = v61;
        v62 = *(_QWORD *)(v12 - 32);
        if (v61 >= v158)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, (uint64_t)v159, v61 + 1, 16);
          LODWORD(v61) = v157;
        }
        v18 = &v156[16 * v61];
        *(_QWORD *)v18 = v62;
        goto LABEL_133;
      }
      v56 = *((_DWORD *)AssumedConstant + 8);
      if (v56 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AssumedConstant + 24)) == v56)
          goto LABEL_129;
LABEL_81:
        v57 = *(_QWORD *)(v12 - 64);
      }
      else
      {
        if (*((_QWORD *)AssumedConstant + 3))
          goto LABEL_81;
LABEL_129:
        v57 = *(_QWORD *)(v12 - 32);
      }
      v85 = v157;
      if (v157 >= (unint64_t)v158)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, (uint64_t)v159, v157 + 1, 16);
        v85 = v157;
      }
      v18 = &v156[16 * v85];
      *(_QWORD *)v18 = v57;
      goto LABEL_133;
    }
LABEL_134:
    v10 = v157;
    v9 = v14;
  }
  while (v157);
  if ((_DWORD)v165)
  {
    v124 = 24 * v165;
    v125 = v164 + 2;
    do
    {
      if (*v125)
        llvm::Attributor::recordDependence((uint64_t)v2, *((_QWORD *)v125 - 1), (uint64_t)v3, 1);
      v125 += 24;
      v124 -= 24;
    }
    while (v124);
  }
  v115 = 1;
LABEL_197:
  if (v156 != (char *)v159)
    free(v156);
  sub_1C6143384(v162[0]);
  if (v160[0] != v161)
    free(v160[0]);
  if (v164 != v166)
    free(v164);
  if ((v163[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v163[1], 8);
  if ((v115 & 1) != 0)
  {
    v116 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v3 + 40))(v3);
    v117 = *(_DWORD *)(v116 + 20);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v116 + 8) + 48))(v116 + 8, v133.u32[1]);
    v118 = *(_DWORD *)(v116 + 20);
    v120 = *(_QWORD *)(v116 + 48);
    v119 = v116 + 48;
    v121 = *(_BYTE *)(v119 + 9) == 0;
    (*(void (**)(uint64_t, _QWORD))(v120 + 48))(v119, HIBYTE(v137));
    if (v117 == v118)
      v122 = v121 ^ (*(_BYTE *)(v119 + 9) != 0);
    else
      v122 = 0;
  }
  else
  {
    v122 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 4) + 40))((_QWORD *)v3 + 4);
  }
  v132[0] = &off_1E81751C0;
  sub_1C6143384(v135[0]);
  return v122;
}

unint64_t sub_1C569C9E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  v4 = *(_QWORD *)(a1 + 96);
  if (!v4 || !*(_BYTE *)(v4 + 41))
  {
    result = llvm::Attribute::get(a2, 77, *(unsigned int *)(a1 + 52));
    v6 = result;
    v7 = *(unsigned int *)(a3 + 8);
    v8 = (_DWORD *)(a3 + 8);
    if (v7 < *(_DWORD *)(a3 + 12))
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = result;
      goto LABEL_7;
    }
LABEL_8:
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v7 + 1, 8);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v6;
    LODWORD(v7) = *(_DWORD *)(a3 + 8);
    goto LABEL_7;
  }
  result = llvm::Attribute::get(a2, 76, *(unsigned int *)(a1 + 52));
  v6 = result;
  v7 = *(unsigned int *)(a3 + 8);
  v8 = (_DWORD *)(a3 + 8);
  if (v7 >= *(_DWORD *)(a3 + 12))
    goto LABEL_8;
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = result;
LABEL_7:
  *v8 = v7 + 1;
  return result;
}

uint64_t *sub_1C569CAA0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C569CAE4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C569CB40(uint64_t result, unsigned int a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(result + 12);
  if (v2 >= a2)
    v2 = a2;
  if (v2 <= *(_DWORD *)(result + 8))
    v2 = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 12) = v2;
  return result;
}

uint32x2_t sub_1C569CB5C(uint32x2_t *a1, unsigned int a2)
{
  uint32x2_t result;

  result = vmax_u32(a1[1], (uint32x2_t)vdup_n_s32(a2));
  a1[1] = result;
  return result;
}

uint32x2_t sub_1C569CB70(uint32x2_t *a1, unsigned int a2, unsigned int a3)
{
  uint32x2_t result;

  result = vmax_u32(a1[1], (uint32x2_t)__PAIR64__(a2, a3));
  a1[1] = result;
  return result;
}

uint32x2_t sub_1C569CB88(uint32x2_t *a1, unsigned int a2, unsigned int a3)
{
  uint32x2_t result;

  result = vmin_u32(a1[1], (uint32x2_t)__PAIR64__(a2, a3));
  a1[1] = result;
  return result;
}

uint64_t sub_1C569CBA0(uint64_t result)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  unsigned int v9;

  v1 = *(_DWORD *)(result + 16);
  v2 = *(_QWORD **)(result + 24);
  LODWORD(v3) = v1;
  if (v2 != (_QWORD *)(result + 32))
  {
    v3 = *(unsigned int *)(result + 16);
    do
    {
      v4 = v2[4];
      if (v3 < v4)
        break;
      v5 = v2[5] + v4;
      if (v3 <= v5)
        v3 = v5;
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != (_QWORD *)(result + 32));
  }
  v9 = *(_DWORD *)(result + 20);
  if (v9 <= v3)
    v9 = v3;
  if (v1 <= v3)
    v1 = v3;
  *(_DWORD *)(result + 16) = v1;
  *(_DWORD *)(result + 20) = v9;
  return result;
}

uint64_t sub_1C569CC2C(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  llvm::DataLayout *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD v46[2];
  int v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50[2];
  int v51;
  __int128 v52;
  __int128 v53;
  __int16 v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  const void *v58;
  unsigned int IndexTypeSizeInBits;

  v11 = sub_1C61AA84C(a3, a4);
  v50[0] = 0;
  v50[1] = 0;
  v51 = 0;
  sub_1C4DFE328((uint64_t)v50, v11);
  v12 = *(_OWORD *)(v11 + 24);
  v53 = *(_OWORD *)(v11 + 40);
  v52 = v12;
  v46[0] = 0;
  v46[1] = 0;
  v47 = 0;
  sub_1C4DFE328((uint64_t)v46, a3 + 176);
  v13 = *(_OWORD *)(a3 + 216);
  v48 = *(_OWORD *)(a3 + 200);
  v49 = v13;
  v14 = a5[3];
  if (a5[4] != v14)
  {
    v15 = 0;
    v16 = 0;
    v17 = (uint64_t **)(a6 + 32);
    while (1)
    {
      v18 = *(_QWORD *)(v14 + 8 * v15);
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
        v20 = *(unsigned __int8 *)(v19 + 16) >= 0x1Cu;
      else
        v20 = 0;
      if (!v20 || !sub_1C62844FC(a3, *(_QWORD *)(v18 + 24), v50, v46))
        goto LABEL_7;
      v54 = 0;
      v21 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
      v22 = sub_1C5694D44(a2, a1, v21, (uint64_t *)v18, (llvm::MemoryLocation *)v19, (_BYTE *)&v54 + 1, &v54);
      v23 = *(_QWORD *)v18;
      if (*(_BYTE *)(*(_QWORD *)v23 + 8) == 15)
        break;
LABEL_20:
      *(uint32x2_t *)(a6 + 16) = vmax_u32(*(uint32x2_t *)(a6 + 16), (uint32x2_t)vdup_n_s32(v22));
      sub_1C569CBA0(a6);
      if ((_BYTE)v54)
      {
        while (1)
        {
          v19 = *(_QWORD *)(v19 + 8);
          if (!v19)
            break;
          v55 = (uint64_t *)v19;
          sub_1C542EB4C(a5, &v55);
        }
      }
LABEL_7:
      v14 = a5[3];
      v15 = ++v16;
      if (v16 >= (unint64_t)((a5[4] - v14) >> 3))
        goto LABEL_39;
    }
    v45 = v22;
    llvm::MemoryLocation::getOrNone((uint64_t ***)v19, (uint64_t)&v55);
    if (v57
      && v55 == (uint64_t *)v23
      && (v56 & 0x8000000000000000) == 0
      && (llvm::Instruction::isVolatile((llvm::Instruction *)v19) & 1) == 0)
    {
      v24 = *(llvm::DataLayout **)(a2[11] + 120);
      v42 = (uint64_t)v55;
      IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v24, *v55);
      if (IndexTypeSizeInBits > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v58, 0, 0);
      else
        v58 = 0;
      v26 = llvm::Value::stripAndAccumulateConstantOffsets(v42, v24, &v58, 1, 0, 0, v25);
      v27 = v26;
      if (IndexTypeSizeInBits > 0x40)
      {
        v43 = *(_QWORD *)v58;
        MEMORY[0x1CAA32F9C]();
        v28 = v43;
        if (!v27)
          goto LABEL_19;
      }
      else
      {
        v28 = (uint64_t)((_QWORD)v58 << -(char)IndexTypeSizeInBits) >> -(char)IndexTypeSizeInBits;
        if (!v26)
          goto LABEL_19;
      }
      v44 = v28;
      if (v27 == sub_1C6284150((llvm::IRPosition *)(a1 + 16)))
      {
        v29 = *v17;
        v30 = (uint64_t **)(a6 + 32);
        v31 = (uint64_t **)(a6 + 32);
        v41 = v56;
        if (*v17)
        {
          while (1)
          {
            while (1)
            {
              v31 = (uint64_t **)v29;
              v32 = v29[4];
              if (v32 <= v44)
                break;
              v29 = *v31;
              v30 = v31;
              if (!*v31)
                goto LABEL_33;
            }
            if (v32 >= v44)
              break;
            v29 = v31[1];
            if (!v29)
            {
              v30 = v31 + 1;
              goto LABEL_33;
            }
          }
        }
        else
        {
LABEL_33:
          v40 = v31;
          v33 = v30;
          v34 = (uint64_t **)operator new(0x30uLL);
          v35 = v33;
          v31 = v34;
          v34[4] = (uint64_t *)v44;
          v34[5] = 0;
          *v34 = 0;
          v34[1] = 0;
          v34[2] = (uint64_t *)v40;
          *v35 = (uint64_t *)v34;
          v36 = **(_QWORD **)(a6 + 24);
          v37 = (uint64_t *)v34;
          if (v36)
          {
            *(_QWORD *)(a6 + 24) = v36;
            v37 = *v35;
          }
          sub_1C4768E74(*(uint64_t **)(a6 + 32), v37);
          ++*(_QWORD *)(a6 + 40);
        }
        v38 = v41 & 0x7FFFFFFFFFFFFFFFLL;
        if ((unint64_t)v31[5] > (v41 & 0x7FFFFFFFFFFFFFFFuLL))
          v38 = (uint64_t)v31[5];
        v31[5] = (uint64_t *)v38;
        sub_1C569CBA0(a6);
      }
    }
LABEL_19:
    v22 = v45;
    goto LABEL_20;
  }
LABEL_39:
  MEMORY[0x1CAA32FB4](v46[0], 8);
  return MEMORY[0x1CAA32FB4](v50[0], 8);
}

uint64_t sub_1C569CF94(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a2 && *(_BYTE *)(a2 + 16) == 30 && (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
  {
    v2 = *a1;
    v3 = *(unsigned int *)(*a1 + 8);
    if (v3 >= *(_DWORD *)(*a1 + 12))
    {
      v5 = a2;
      v6 = *a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2, v2 + 16, v3 + 1, 8);
      a2 = v5;
      v2 = v6;
      LODWORD(v3) = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v3) = a2;
    ++*(_DWORD *)(v2 + 8);
  }
  return 1;
}

uint64_t sub_1C569D01C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      sub_1C628D95C((_QWORD **)a1, v3, v5[4], (_OWORD *)v5 + 2);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

_QWORD *sub_1C569D0BC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = a2[4], v6 > a5))
  {
    v7 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v9 = a2;
LABEL_18:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      v8 = (_QWORD *)*a2;
      do
      {
        v9 = v8;
        v8 = (_QWORD *)v8[1];
      }
      while (v8);
    }
    else
    {
      v12 = a2;
      do
      {
        v9 = (_QWORD *)v12[2];
        v13 = *v9 == (_QWORD)v12;
        v12 = v9;
      }
      while (v13);
    }
    if (v9[4] < a5)
      goto LABEL_18;
    v14 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = v14;
          v15 = v14[4];
          if (v15 <= a5)
            break;
          v14 = (_QWORD *)*a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v15 >= a5)
          break;
        v5 = a4 + 1;
        v14 = (_QWORD *)a4[1];
      }
      while (v14);
LABEL_26:
      *a3 = a4;
      return v5;
    }
    goto LABEL_42;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v10 = a2[1];
  if (v10)
  {
    v11 = (_QWORD *)a2[1];
    do
    {
      a4 = v11;
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  else
  {
    v16 = a2;
    do
    {
      a4 = (_QWORD *)v16[2];
      v13 = *a4 == (_QWORD)v16;
      v16 = a4;
    }
    while (!v13);
  }
  if (a4 != v5 && a4[4] <= a5)
  {
    v17 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = v17;
          v18 = v17[4];
          if (v18 <= a5)
            break;
          v17 = (_QWORD *)*a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v18 >= a5)
          break;
        v5 = a4 + 1;
        v17 = (_QWORD *)a4[1];
      }
      while (v17);
      goto LABEL_26;
    }
LABEL_42:
    *a3 = v5;
    return v5;
  }
  if (v10)
  {
LABEL_34:
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

BOOL sub_1C569D244(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  void *v10[2];
  uint64_t v11;

  v9 = *(_QWORD *)a2;
  v10[0] = &v11;
  v10[1] = 0;
  if (*(_DWORD *)(a2 + 16))
    sub_1C614C900((uint64_t)v10, a2 + 8);
  v3 = sub_1C6284A2C(&v9, *(_DWORD *)(*(_QWORD *)*a1 + 32));
  if (v3)
  {
    v4 = a1[1];
    v5 = v9;
    v6 = *(unsigned int *)(v4 + 8);
    if (v6 >= *(_DWORD *)(v4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v4 + 16, v6 + 1, 16);
      LODWORD(v6) = *(_DWORD *)(v4 + 8);
    }
    v7 = (uint64_t *)(*(_QWORD *)v4 + 16 * v6);
    *v7 = v3;
    v7[1] = v5;
    ++*(_DWORD *)(v4 + 8);
  }
  if (v10[0] != &v11)
    free(v10[0]);
  return v3 != 0;
}

uint64_t sub_1C569D314(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 64));
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C569D360(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 64));
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C569D3BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3110);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3110))
      __cxa_guard_release(&qword_1EF8F3110);
  }
}

uint64_t sub_1C569D3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t (**v12)();
  uint64_t (**v13)();
  unint64_t v14;
  _QWORD **v15;
  _QWORD *v16[2];
  uint64_t (**v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)();
  uint64_t (**v21)();
  unint64_t v22;
  _QWORD *v23[4];
  __int16 v24;
  uint64_t v25;
  char v26;
  _QWORD v27[4];
  int v28;
  uint64_t (**v29)();
  unsigned int v30;
  _QWORD *v31;
  unsigned __int8 v32;
  char v33;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v14 = 0xFFFFFFFF00000000;
  v12 = &off_1E81751C0;
  v13 = &off_1E8175200;
  v15 = v16;
  v16[0] = 0;
  v16[1] = 0;
  v17 = &off_1E8172AE8;
  v18 = 256;
  v19 = 0;
  LOBYTE(v29) = 0;
  v33 = 0;
  v28 = sub_1C628686C((llvm::IRPosition *)(a1 + 16), 0);
  v27[0] = &v28;
  v27[1] = a2;
  v27[2] = a1;
  v27[3] = &v29;
  if ((llvm::Attributor::checkForAllCallSites(a2, sub_1C569D680, (uint64_t)v27, a1, 1, &v26) & 1) != 0)
  {
    if (!v33)
      goto LABEL_7;
    ((void (*)(uint64_t (***)(), _QWORD))v13[6])(&v13, v30);
    ((void (*)(uint64_t (***)(), _QWORD))v17[6])(&v17, v32);
    v21 = &off_1E8175200;
    v22 = v14;
    v20 = &off_1E81751C0;
    sub_1C569D01C((uint64_t)v23, &v15);
    v24 = v18;
    v25 = v19;
    v23[3] = &off_1E8172AE8;
    v20 = &off_1E81751C0;
    sub_1C6143384(v23[1]);
  }
  else
  {
    ((void (*)(uint64_t (***)()))v12[5])(&v12);
  }
  if (v33)
  {
    v29 = &off_1E81751C0;
    sub_1C6143384(v31);
  }
LABEL_7:
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = *(_DWORD *)(v4 + 20);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 + 8) + 48))(v4 + 8, HIDWORD(v14));
  v6 = *(_DWORD *)(v4 + 20);
  v8 = *(_QWORD *)(v4 + 48);
  v7 = v4 + 48;
  v9 = *(_BYTE *)(v7 + 9) == 0;
  (*(void (**)(uint64_t, _QWORD))(v8 + 48))(v7, BYTE1(v18));
  if (v5 == v6)
    v10 = v9 ^ (*(_BYTE *)(v7 + 9) != 0);
  else
    v10 = 0;
  v12 = &off_1E81751C0;
  sub_1C6143384(v16[0]);
  return v10;
}

uint64_t *sub_1C569D5E0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C569D624(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C569D680(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::AbstractAttribute *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[9];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a2;
  v10 = *a2;
  v11 = v13;
  v12 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)&v11, (uint64_t)(a2 + 1));
    v14 = v10;
    v15 = &v17;
    v16 = 0;
    if ((_DWORD)v12)
      sub_1C614CA14((uint64_t)&v15, (uint64_t)&v11);
  }
  else
  {
    v14 = v3;
    v15 = &v17;
    v16 = 0;
  }
  v17 = sub_1C628D358((uint64_t)&v14, **(_DWORD **)a1);
  v18 = v4;
  if (v15 != &v17)
    free(v15);
  if (sub_1C6283CA4(&v17))
  {
    v7 = sub_1C5688C4C(*(_QWORD *)(a1 + 8), v17, v18, *(_QWORD *)(a1 + 16), 0, 0, 1);
    v8 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v7 + 48))(v7);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 72))
    {
      sub_1C628D8C0((uint64_t)v13, (_QWORD *)v9, v8);
      v13[0] = &off_1E81751C0;
      sub_1C6143384((_QWORD *)v13[4]);
    }
    else
    {
      sub_1C628D9FC(*(_QWORD *)(a1 + 24), v8);
    }
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  }
  else
  {
    v5 = 0;
  }
  if (v11 != v13)
    free(v11);
  return v5;
}

void sub_1C569D7D4(_QWORD **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;

  if (a1[2])
  {
    v6 = *a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = a1 + 1;
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v20 = sub_1C4FCE18C((uint64_t)v9);
      if (a2 == a3)
      {
        v21 = v9;
      }
      else
      {
        v22 = a2;
        do
        {
          v21 = v20;
          v23 = v22[4];
          v9[4] = v23;
          v9[5] = v22[5];
          v24 = *v8;
          v25 = a1 + 1;
          v26 = a1 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                v25 = (uint64_t **)v24;
                if (v23 >= v24[4])
                  break;
                v24 = (uint64_t *)*v24;
                v26 = v25;
                if (!*v25)
                  goto LABEL_32;
              }
              v24 = (uint64_t *)v24[1];
            }
            while (v24);
            v26 = v25 + 1;
          }
LABEL_32:
          *v9 = 0;
          v9[1] = 0;
          v9[2] = (uint64_t)v25;
          *v26 = v9;
          v27 = (_QWORD *)**a1;
          if (v27)
          {
            *a1 = v27;
            v9 = *v26;
          }
          sub_1C4768E74(a1[1], v9);
          a1[2] = (_QWORD *)((char *)a1[2] + 1);
          if (v20)
            v20 = sub_1C4FCE18C((uint64_t)v20);
          else
            v20 = 0;
          v28 = (_QWORD *)v22[1];
          if (v28)
          {
            do
            {
              a2 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v22[2];
              v19 = *a2 == (_QWORD)v22;
              v22 = a2;
            }
            while (!v19);
          }
          if (!v21)
            break;
          v22 = a2;
          v9 = v21;
        }
        while (a2 != a3);
      }
      sub_1C6143384(v21);
      if (v20)
      {
        do
        {
          v29 = v20;
          v20 = (uint64_t *)v20[2];
        }
        while (v20);
        sub_1C6143384(v29);
      }
    }
  }
  if (a2 != a3)
  {
    v10 = a1 + 1;
    do
    {
      v11 = (uint64_t *)operator new(0x30uLL);
      v12 = v11;
      *((_OWORD *)v11 + 2) = *((_OWORD *)a2 + 2);
      v13 = *v10;
      v14 = a1 + 1;
      v15 = a1 + 1;
      if (*v10)
      {
        do
        {
          while (1)
          {
            v14 = (uint64_t **)v13;
            if (v11[4] >= v13[4])
              break;
            v13 = (uint64_t *)*v13;
            v15 = v14;
            if (!*v14)
              goto LABEL_14;
          }
          v13 = (uint64_t *)v13[1];
        }
        while (v13);
        v15 = v14 + 1;
      }
LABEL_14:
      *v11 = 0;
      v11[1] = 0;
      v11[2] = (uint64_t)v14;
      *v15 = v11;
      v16 = (_QWORD *)**a1;
      if (v16)
      {
        *a1 = v16;
        v12 = *v15;
      }
      sub_1C4768E74(a1[1], v12);
      a1[2] = (_QWORD *)((char *)a1[2] + 1);
      v17 = (_QWORD *)a2[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)a2[2];
          v19 = *v18 == (_QWORD)a2;
          a2 = v18;
        }
        while (!v19);
      }
      a2 = v18;
    }
    while (v18 != a3);
  }
}

uint64_t sub_1C569DA34(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 64));
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C569DA80(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 64));
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C569DADC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3118);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3118))
      __cxa_guard_release(&qword_1EF8F3118);
  }
}

uint64_t sub_1C569DB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t (**v12)();
  uint64_t (**v13)();
  unint64_t v14;
  _QWORD **v15;
  _QWORD *v16[2];
  uint64_t (**v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)();
  uint64_t (**v21)();
  unint64_t v22;
  _QWORD *v23[4];
  __int16 v24;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t (**v27)();
  unsigned int v28;
  _QWORD *v29;
  unsigned __int8 v30;
  char v31;
  uint64_t v32;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v14 = 0xFFFFFFFF00000000;
  v12 = &off_1E81751C0;
  v13 = &off_1E8175200;
  v15 = v16;
  v16[0] = 0;
  v16[1] = 0;
  v17 = &off_1E8172AE8;
  v18 = 256;
  v19 = 0;
  v32 = 0;
  LOBYTE(v27) = 0;
  v31 = 0;
  v26[2] = a1;
  v26[3] = &v27;
  v26[0] = &v32;
  v26[1] = a2;
  if ((llvm::Attributor::checkForAllReturnedValues(a2, (uint64_t)sub_1C569DD8C, (uint64_t)v26, a1) & 1) != 0)
  {
    if (!v31)
      goto LABEL_7;
    ((void (*)(uint64_t (***)(), _QWORD))v13[6])(&v13, v28);
    ((void (*)(uint64_t (***)(), _QWORD))v17[6])(&v17, v30);
    v21 = &off_1E8175200;
    v22 = v14;
    v20 = &off_1E81751C0;
    sub_1C569D01C((uint64_t)v23, &v15);
    v24 = v18;
    v25 = v19;
    v23[3] = &off_1E8172AE8;
    v20 = &off_1E81751C0;
    sub_1C6143384(v23[1]);
  }
  else
  {
    ((void (*)(uint64_t (***)()))v12[5])(&v12);
  }
  if (v31)
  {
    v27 = &off_1E81751C0;
    sub_1C6143384(v29);
  }
LABEL_7:
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = *(_DWORD *)(v4 + 20);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v4 + 8) + 48))(v4 + 8, HIDWORD(v14));
  v6 = *(_DWORD *)(v4 + 20);
  v8 = *(_QWORD *)(v4 + 48);
  v7 = v4 + 48;
  v9 = *(_BYTE *)(v7 + 9) == 0;
  (*(void (**)(uint64_t, _QWORD))(v8 + 48))(v7, BYTE1(v18));
  if (v5 == v6)
    v10 = v9 ^ (*(_BYTE *)(v7 + 9) != 0);
  else
    v10 = 0;
  v12 = &off_1E81751C0;
  sub_1C6143384(v16[0]);
  return v10;
}

uint64_t *sub_1C569DCEC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C569DD30(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C569DD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  llvm::AbstractAttribute *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[9];

  v3 = **(_QWORD **)a1;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 21)
  {
    if (v4 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v5 = v4 - 33;
      v6 = v5 > 0x33;
      v7 = (1 << v5) & 0x8000000000041;
      if (!v6 && v7 != 0)
      {
        v3 = 0;
        a2 |= 1uLL;
      }
    }
  }
  v9 = sub_1C5688C4C(*(_QWORD *)(a1 + 8), a2, v3, *(_QWORD *)(a1 + 16), 0, 0, 1);
  v10 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v9 + 48))(v9);
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 72))
  {
    sub_1C628D8C0((uint64_t)v13, (_QWORD *)v11, v10);
    v13[0] = &off_1E81751C0;
    sub_1C6143384((_QWORD *)v13[4]);
  }
  else
  {
    sub_1C628D9FC(*(_QWORD *)(a1 + 24), v10);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C569DE70(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 64));
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C569DEBC(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 64));
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C569DF18()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3120);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3120))
      __cxa_guard_release(&qword_1EF8F3120);
  }
}

uint64_t sub_1C569DF58(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v6;
  llvm::AbstractAttribute *v8;
  uint64_t v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v6 = sub_1C5676C10(v4);
  if (!v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v8 = sub_1C5688C4C(a2, v6 | 1, 0, a1, 0, 0, 1);
  v9 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v8 + 48))(v8);
  return llvm::clampStateAndIndicateChange<llvm::DerefState>(v5, v9);
}

uint64_t *sub_1C569DFF0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C569E034(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C569E090(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 64));
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C569E0DC(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 64));
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C569E138()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3128);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3128))
      __cxa_guard_release(&qword_1EF8F3128);
  }
}

uint64_t *sub_1C569E178(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C569E1BC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81751C0;
  sub_1C6143384(*(_QWORD **)(a1 + 32));
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C569E218(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C569E24C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C569E290(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  unint64_t *v5;
  int8x16_t v6;
  uint64_t v7;
  unint64_t v8;
  int8x16_t v9;
  llvm::Value *v10;
  char v11;
  int8x16_t v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  llvm::GlobalValue *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *i;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  char *j;
  int64x2_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t (**v41)();
  int64x2_t v42;
  uint64_t **v43;
  _QWORD v44[2];
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  _BYTE v51[32];
  uint64_t *v52;
  uint64_t v53;
  _QWORD v54[6];

  v54[4] = *MEMORY[0x1E0C80C00];
  v49 = v51;
  v50 = 0x400000000;
  v4 = (llvm::IRPosition *)(a1 + 16);
  LODWORD(v44[0]) = 74;
  llvm::IRPosition::getAttrs((llvm::IRPosition *)(a1 + 16), (int *)v44, 1, (uint64_t)&v49, 0, 0);
  if ((_DWORD)v50)
  {
    v5 = (unint64_t *)v49;
    v6 = *(int8x16_t *)(a1 + 40);
    v7 = 8 * v50;
    do
    {
      v8 = *v5;
      if (*v5)
        v8 = *(_QWORD *)(v8 + 16);
      v9 = (int8x16_t)vdupq_n_s64(v8);
      v6 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v6, (uint64x2_t)v9), v6, v9);
      ++v5;
      v7 -= 8;
    }
    while (v7);
    *(int8x16_t *)(a1 + 40) = v6;
  }
  v10 = (llvm::Value *)sub_1C6284150(v4);
  llvm::Value::getPointerAlignment(v10, *(const llvm::DataLayout **)(*(_QWORD *)(a2 + 88) + 120));
  v12 = (int8x16_t)vdupq_n_s64(1 << v11);
  *(int8x16_t *)(a1 + 40) = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)(a1 + 40), (uint64x2_t)v12), *(int8x16_t *)(a1 + 40), v12);
  v13 = sub_1C6283CA4(v4);
  if (v13 > 6 || ((1 << v13) & 0x54) == 0)
    goto LABEL_19;
  v14 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v14 = *(_QWORD *)(v14 + 24);
  v15 = *(unsigned __int8 *)(v14 + 16);
  if (v15 == 21)
  {
    v16 = (_QWORD *)(v14 + 24);
LABEL_16:
    if (!*v16)
      goto LABEL_17;
    goto LABEL_18;
  }
  if (*(_BYTE *)(v14 + 16))
  {
    if (v15 < 0x1C)
    {
LABEL_17:
      (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
      goto LABEL_20;
    }
    v16 = (_QWORD *)(*(_QWORD *)(v14 + 40) + 56);
    goto LABEL_16;
  }
LABEL_18:
  v17 = (llvm::GlobalValue *)sub_1C5676C10(v4);
  if (!sub_1C62873F8(a2, v17))
    goto LABEL_17;
LABEL_19:
  v18 = sub_1C5676CEC(v4);
  if (v18)
  {
    v19 = v18;
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v44[0] = 0;
    v44[1] = 0;
    v45 = 0;
    v47 = 0;
    v48 = 0;
    v46 = 0;
    for (i = *(uint64_t **)(sub_1C6284150(v4) + 8); i; i = (uint64_t *)i[1])
    {
      v52 = i;
      sub_1C542EB4C(v44, &v52);
    }
    v22 = *(_QWORD *)(a2 + 88) + 136;
    sub_1C569F8EC(a1, a2, v22, v19, v44, v20);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20) & 1) == 0)
    {
      v52 = v54;
      v53 = 0x400000000;
      v43 = &v52;
      sub_1C5694C5C(v22, v19, (unsigned int (*)(uint64_t))sub_1C569FCF4, (uint64_t)&v43);
      v23 = v52;
      if ((_DWORD)v53)
      {
        v24 = &v52[v53];
        v38 = vdupq_n_s64(0x100000000uLL);
        do
        {
          v25 = *v23;
          v41 = &off_1E81756C8;
          v42 = v38;
          v26 = *(_DWORD *)(v25 + 20);
          if ((v26 & 0x40000000) != 0)
          {
            v28 = *(_QWORD *)(v25 - 8);
            v27 = v26 & 0x7FFFFFF;
          }
          else
          {
            v27 = v26 & 0x7FFFFFF;
            v28 = v25 - 32 * v27;
          }
          v29 = (_DWORD)v27 == 3;
          if (v27 == v29)
          {
            v30 = 0x100000000;
          }
          else
          {
            v31 = (uint64_t *)(v28 + 32 * v27);
            v32 = (uint64_t *)(v28 + 32 * v29);
            do
            {
              v33 = *v32;
              v40 = xmmword_1C8660210;
              v39 = &off_1E81756C8;
              v34 = &v47[-v46];
              v35 = *(_QWORD *)(v33 + 48);
              if (v35)
                v36 = v35 - 24;
              else
                v36 = 0;
              sub_1C569F8EC(a1, a2, v22, v36, v44, (uint64_t)&v39);
              for (j = &v34[v46]; v47 != j; j = sub_1C628D264((uint64_t)v44, j))
                ;
              ((void (*)(uint64_t, uint64_t, uint64_t))v41[9])((uint64_t)&v41, *((uint64_t *)&v40 + 1), v40);
              v32 += 4;
            }
            while (v32 != v31);
            v30 = v42.i64[0];
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 56))(v20, v30);
          ++v23;
        }
        while (v23 != v24);
        v23 = v52;
      }
      if (v23 != v54)
        free(v23);
    }
    sub_1C6176BF8(v44);
  }
LABEL_20:
  if (v49 != v51)
    free(v49);
}

void sub_1C569E668(uint64_t a1@<X0>, char *a2@<X8>)
{
  std::string *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string __p;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  if (*(_QWORD *)(a1 + 48))
  {
    std::to_string(&v14, *(_QWORD *)(a1 + 40));
    v4 = std::string::insert(&v14, 0, "align<");
    v5 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = std::string::append(&v15, "-");
    v7 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, *(_QWORD *)(a1 + 48));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    v10 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v17, ">");
    *(std::string *)a2 = *v12;
    v12->__r_.__value_.__r.__words[0] = 0;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  else
  {
    a2[23] = 13;
    strcpy(a2, "unknown-align");
  }
}

uint64_t sub_1C569E7E4(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  llvm::Value *v9;
  char v10;
  BOOL v11;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  int v21;
  __guard *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    v13 = (unsigned __int8 *)&unk_1ED809B28;
    v7 = 1;
    do
    {
      v14 = *(_QWORD *)(v6 + 24);
      v15 = *(unsigned __int8 *)(v14 + 16);
      if (v14 && v15 == 61)
      {
        if (*(_QWORD *)(v14 - 32) == v5
          && (unint64_t)(1 << ((unint64_t)*(unsigned __int16 *)(v14 + 18) >> 1)) < *(_QWORD *)(a1 + 48))
        {
          v16 = atomic_load((unsigned __int8 *)&qword_1ED809B20);
          if ((v16 & 1) == 0)
          {
            v23 = *(_QWORD *)(v6 + 24);
            v25 = v5;
            v20 = v13;
            v21 = __cxa_guard_acquire(&qword_1ED809B20);
            v13 = v20;
            v14 = v23;
            v5 = v25;
            if (v21)
            {
              __cxa_guard_release(&qword_1ED809B20);
              v14 = v23;
              v5 = v25;
              v13 = v20;
            }
          }
          v7 = 0;
          *(_WORD *)(v14 + 18) = *(_WORD *)(v14 + 18) & 0xFF81 | (2 * (63 - __clz(*(_QWORD *)(a1 + 48))));
        }
      }
      else if (v14)
      {
        if (v15 == 60 && *(_QWORD *)(v14 - 32) == v5)
        {
          v17 = *(unsigned __int16 *)(v14 + 18);
          v18 = *(_QWORD *)(a1 + 48);
          if (1 << (v17 >> 1) < v18)
          {
            *(_WORD *)(v14 + 18) = v17 & 0xFF81 | (2 * __clz(v18)) ^ 0x7E;
            v19 = atomic_load(v13);
            if ((v19 & 1) != 0)
            {
              v7 = 0;
            }
            else
            {
              v24 = v6;
              v26 = v5;
              v22 = (__guard *)v13;
              if (__cxa_guard_acquire((__guard *)v13))
              {
                __cxa_guard_release(v22);
                v13 = (unsigned __int8 *)v22;
                v7 = 0;
                v5 = v26;
              }
              else
              {
                v7 = 0;
                v5 = v26;
                v13 = (unsigned __int8 *)v22;
              }
              v6 = v24;
            }
          }
        }
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6);
  }
  else
  {
    v7 = 1;
  }
  v8 = sub_1C628C768(a1, a2);
  v9 = (llvm::Value *)sub_1C6284150(v4);
  llvm::Value::getPointerAlignment(v9, *(const llvm::DataLayout **)(*(_QWORD *)(a2 + 88) + 120));
  if (v8)
    v11 = 1;
  else
    v11 = (unint64_t)(1 << v10) >= *(_QWORD *)(a1 + 48);
  if (v11)
    return v7;
  else
    return 0;
}

void sub_1C569EA04()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3130);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3130))
      __cxa_guard_release(&qword_1EF8F3130);
  }
}

uint64_t sub_1C569EA44(uint64_t a1, llvm::Attributor *a2)
{
  llvm::Attributor *v2;
  llvm::AbstractAttribute *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t i;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  llvm::Argument *v26;
  int v27;
  char v28;
  int v29;
  unsigned int v30;
  _BOOL4 v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v37;
  unsigned int v38;
  unint64_t AssumedSimplified;
  char v40;
  uint64_t v41;
  int64_t *v42;
  uint64_t v43;
  int64_t *v44;
  unsigned int v45;
  int64_t v46;
  char *v47;
  llvm::UndefValue *AssumedConstant;
  char v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  __int128 v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  llvm::AbstractAttribute *v74;
  uint64_t v75;
  uint64_t v76;
  llvm::Value *v77;
  uint64_t v78;
  unsigned __int8 v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  llvm::AbstractAttribute **v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int64_t v108;
  char v109;
  int8x16_t v110;
  char v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v115;
  _BYTE *v116;
  int64x2_t v117;
  unint64_t v118;
  uint64_t v119;
  llvm::DataLayout *v120;
  llvm::AA *v121;
  BOOL v122;
  uint64_t (**v123)();
  int8x16_t v124;
  char v125;
  unint64_t v126[2];
  _QWORD v127[2];
  uint64_t v128;
  int v129;
  uint64_t v130;
  int64x2_t v131;
  int64x2_t v132;
  void *v133;
  uint64_t v134;
  _BYTE v135[32];
  uint64_t v136;
  _OWORD v137[2];
  int64_t *v138;
  uint64_t v139;
  _BYTE v140[32];
  char *v141;
  unsigned int v142;
  unsigned int v143;
  _QWORD v144[32];
  void *v145[2];
  _QWORD v146[33];
  _QWORD *v147[2];
  _QWORD v148[9];
  uint64_t *v149;
  uint64_t v150;
  _QWORD v151[14];

  v2 = a2;
  v3 = (llvm::AbstractAttribute *)a1;
  v151[12] = *MEMORY[0x1E0C80C00];
  v120 = *(llvm::DataLayout **)(*((_QWORD *)a2 + 11) + 120);
  v124 = (int8x16_t)xmmword_1C8660210;
  v123 = &off_1E81756C8;
  v122 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = sub_1C5676CEC((_DWORD *)(a1 + 16));
  v127[0] = v4;
  v127[1] = v5;
  v148[0] = 1;
  for (i = 1; i != 9; i += 2)
    v148[i] = -4096;
  v149 = v151;
  v150 = 0x400000000;
  v8 = sub_1C6284150((llvm::IRPosition *)v127);
  v9 = 0;
  v145[0] = v146;
  v145[1] = (void *)0x1000000000;
  v147[1] = 0;
  v147[0] = 0;
  v146[32] = v147;
  v141 = (char *)v144;
  v143 = 16;
  v144[0] = v8;
  v144[1] = v6;
  v118 = v8;
  v117 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v10 = 1;
  v119 = (uint64_t)v3;
  v121 = v2;
  do
  {
    v11 = &v141[16 * v10];
    v13 = *((_QWORD *)v11 - 2);
    v12 = *((_QWORD *)v11 - 1);
    v142 = v10 - 1;
    v126[0] = v13;
    v126[1] = v12;
    if ((sub_1C568F35C((uint64_t)v145, v126) & 0x100000000) == 0)
    {
      v14 = v9;
      goto LABEL_185;
    }
    if ((int)v9 >= 16)
    {
LABEL_188:
      v111 = 0;
      goto LABEL_189;
    }
    v14 = (v9 + 1);
    if (*(_BYTE *)(*(_QWORD *)v13 + 8) == 15)
    {
      v15 = llvm::Value::stripPointerCasts((llvm::Value *)v13);
      goto LABEL_9;
    }
    v19 = *(unsigned __int8 *)(v13 + 16);
    if (v19 < 0x1C)
      goto LABEL_24;
    v20 = v19 - 33;
    v21 = v20 > 0x33;
    v22 = (1 << v20) & 0x8000000000041;
    if (v21 || v22 == 0)
      goto LABEL_24;
    v24 = *(_QWORD *)(v13 - 32);
    if (!v24 || *(_BYTE *)(v24 + 16) || *(_QWORD *)(v24 + 24) != *(_QWORD *)(v13 + 72))
      goto LABEL_24;
    if ((*(_WORD *)(v24 + 18) & 1) == 0)
    {
      v68 = *(_QWORD *)(v24 + 88);
LABEL_98:
      v69 = v68;
      goto LABEL_99;
    }
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(v13 - 32));
    v68 = *(_QWORD *)(v24 + 88);
    if ((*(_WORD *)(v24 + 18) & 1) == 0)
      goto LABEL_98;
    llvm::Function::BuildLazyArguments((llvm::Function *)v24);
    v69 = *(_QWORD *)(v24 + 88);
LABEL_99:
    v70 = v69 + 40 * *(_QWORD *)(v24 + 96);
    while (1)
    {
      if (v68 == v70)
        goto LABEL_24;
      v71 = *(_QWORD *)(*(_QWORD *)(v68 + 24) + 112);
      if (v71)
      {
        v72 = *(unsigned int *)(v68 + 32);
        if ((v72 + 2) < *(_DWORD *)(v71 + 8))
        {
          v73 = *(_QWORD *)(v71 + 8 * (v72 + 2) + 40);
          if (v73)
          {
            if ((*(_BYTE *)(v73 + 17) & 0x40) != 0)
              break;
          }
        }
      }
      v68 += 40;
    }
    v15 = *(llvm::Value **)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) + 32 * v72);
LABEL_9:
    if (v15)
      v16 = v15 == (llvm::Value *)v13;
    else
      v16 = 1;
    if (!v16)
      goto LABEL_13;
LABEL_24:
    v25 = *(unsigned __int8 *)(v13 + 16);
    switch(v25)
    {
      case 85:
        v32 = *(_QWORD *)(v13 - 96);
        v33 = *(unsigned __int8 *)(v32 + 16);
        if (v33 != 21)
        {
          if (v33 < 0x1C)
          {
            if (!*(_BYTE *)(v32 + 16))
              v32 |= 2uLL;
          }
          else
          {
            v34 = v33 - 33;
            v21 = v34 > 0x33;
            v35 = (1 << v34) & 0x8000000000041;
            if (!v21 && v35 != 0)
              v32 |= 1uLL;
          }
        }
        v136 = v32;
        *(_QWORD *)&v137[0] = 0;
        AssumedConstant = llvm::Attributor::getAssumedConstant(v2, (const llvm::IRPosition *)&v136, v3, &v122);
        if (!v49)
          goto LABEL_185;
        if (!AssumedConstant)
          goto LABEL_76;
        v50 = *((unsigned __int8 *)AssumedConstant + 16);
        if ((v50 - 11) < 2)
          goto LABEL_185;
        if (v50 != 16)
        {
LABEL_76:
          v53 = *(_QWORD *)(v13 - 64);
          v54 = v142;
          if (v142 >= (unint64_t)v143)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v144, v142 + 1, 16);
            v54 = v142;
          }
          v55 = &v141[16 * v54];
          *(_QWORD *)v55 = v53;
          *((_QWORD *)v55 + 1) = v12;
          v56 = v142 + 1;
          v142 = v56;
          v57 = *(_QWORD *)(v13 - 32);
          if (v56 >= v143)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v144, v56 + 1, 16);
            LODWORD(v56) = v142;
          }
          v18 = &v141[16 * v56];
          *(_QWORD *)v18 = v57;
          goto LABEL_95;
        }
        v51 = *((_DWORD *)AssumedConstant + 8);
        if (v51 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AssumedConstant + 24)) != v51)
            goto LABEL_75;
        }
        else if (*((_QWORD *)AssumedConstant + 3))
        {
LABEL_75:
          v52 = *(_QWORD *)(v13 - 64);
LABEL_92:
          v67 = v142;
          if (v142 >= (unint64_t)v143)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v144, v142 + 1, 16);
            v67 = v142;
          }
          v18 = &v141[16 * v67];
          *(_QWORD *)v18 = v52;
          goto LABEL_95;
        }
        v52 = *(_QWORD *)(v13 - 32);
        goto LABEL_92;
      case 83:
        v60 = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 56);
        v128 = v60;
        v129 = 0;
        sub_1C6281EE8((uint64_t)&v136, (uint64_t)v148, &v128, &v129);
        v61 = v136;
        if (BYTE8(v137[0]))
        {
          v131.i32[3] = 0;
          *(__int32 *)((char *)&v131.i32[2] + 1) = 0;
          v130 = v60;
          v131.i64[0] = 0;
          v131.i8[8] = 0;
          v62 = v149;
          if (v150 >= HIDWORD(v150))
          {
            v107 = v150 + 1;
            if (v149 <= &v130 && &v149[3 * v150] > &v130)
            {
              v108 = (char *)&v130 - (char *)v149;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v149, (uint64_t)v151, v107, 24);
              v62 = v149;
              v63 = (uint64_t *)((char *)v149 + v108);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v149, (uint64_t)v151, v107, 24);
              v63 = &v130;
              v62 = v149;
            }
          }
          else
          {
            v63 = &v130;
          }
          v64 = &v62[3 * v150];
          v65 = *(_OWORD *)v63;
          v64[2] = v63[2];
          *(_OWORD *)v64 = v65;
          v66 = v150;
          LODWORD(v150) = v150 + 1;
          *(_DWORD *)(v61 + 8) = v66;
        }
        else
        {
          v66 = *(_DWORD *)(v136 + 8);
        }
        v83 = v149;
        v84 = &v149[3 * v66];
        v86 = v84[1];
        v85 = (llvm::AbstractAttribute **)(v84 + 1);
        if (!v86)
          *v85 = sub_1C5677D4C((uint64_t)v2, v60, 0, v119, 2, 0, 1);
        v87 = *(_DWORD *)(v13 + 20) & 0x7FFFFFF;
        if ((_DWORD)v87)
        {
          v88 = 0;
          v89 = 0;
          v90 = &v83[3 * v66 + 2];
          v91 = 8 * v87;
          do
          {
            v92 = *(_DWORD *)(v13 + 20);
            if ((v92 & 0x40000000) != 0)
              v93 = *(_QWORD *)(v13 - 8);
            else
              v93 = v13 - 32 * (v92 & 0x7FFFFFF);
            v94 = *(_QWORD *)(v93 + 32 * *(unsigned int *)(v13 + 60) + v89);
            if ((*(unsigned int (**)(llvm::AbstractAttribute *, uint64_t, _QWORD))(*(_QWORD *)*v85 + 168))(*v85, v94, *(_QWORD *)(v13 + 40)))
            {
              *(_BYTE *)v90 = 1;
              v95 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)*v85 + 4) + 24))((uint64_t)*v85 + 32);
              v122 |= v95 ^ 1;
            }
            else
            {
              v96 = *(_DWORD *)(v13 + 20);
              if ((v96 & 0x40000000) != 0)
                v97 = *(_QWORD *)(v13 - 8);
              else
                v97 = v13 - 32 * (v96 & 0x7FFFFFF);
              v98 = *(_QWORD *)(v94 + 40);
              if (v98 == v94 + 40)
              {
                v100 = 0;
              }
              else
              {
                if (v98)
                  v99 = v98 - 24;
                else
                  v99 = 0;
                if (*(unsigned __int8 *)(v99 + 16) - 29 >= 0xB)
                  v100 = 0;
                else
                  v100 = v99;
              }
              v101 = *(_QWORD *)(v97 + v88);
              v102 = v142;
              if (v142 >= (unint64_t)v143)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v144, v142 + 1, 16);
                v102 = v142;
              }
              v103 = &v141[16 * v102];
              *(_QWORD *)v103 = v101;
              *((_QWORD *)v103 + 1) = v100;
              ++v142;
            }
            v89 += 8;
            v88 += 32;
          }
          while (v91 != v89);
          v3 = (llvm::AbstractAttribute *)v119;
          v2 = v121;
        }
        else
        {
          v3 = (llvm::AbstractAttribute *)v119;
        }
        goto LABEL_185;
      case 21:
        v26 = (llvm::Argument *)v13;
        break;
      default:
        v26 = 0;
        break;
    }
    v128 = (uint64_t)v26;
    if (v26 && (llvm::Argument::hasPassPointeeByValueCopyAttr(v26) & 1) == 0)
    {
      v136 = (uint64_t)v137 + 8;
      *(_QWORD *)&v137[0] = 0x300000000;
      v125 = 0;
      v130 = (uint64_t)&v128;
      v131.i64[0] = (uint64_t)&v136;
      v27 = llvm::Attributor::checkForAllCallSites((uint64_t)v2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C569FD7C, (uint64_t)&v130, *(_QWORD *)(v128 + 24), 1, (uint64_t)v3, &v125);
      v28 = v27;
      v29 = 0;
      if (v27)
      {
        sub_1C612E234((unsigned int *)&v141, (_BYTE *)v136, (_BYTE *)(v136 + 16 * LODWORD(v137[0])));
        v29 = 3;
      }
      if ((_OWORD *)v136 != (_OWORD *)((char *)v137 + 8))
        free((void *)v136);
      if ((v28 & 1) != 0)
        goto LABEL_183;
    }
    v30 = *(unsigned __int8 *)(v13 + 16);
    if (v30 < 0x15)
      goto LABEL_37;
    v37 = v13;
    if (v30 >= 0x1C)
    {
      v38 = v30 - 33;
      v37 = v13;
      if (v38 <= 0x33)
      {
        v37 = v13;
        if (((1 << v38) & 0x8000000000041) != 0)
          v37 = v13 | 1;
      }
    }
    v136 = v37;
    *(_QWORD *)&v137[0] = 0;
    AssumedSimplified = llvm::Attributor::getAssumedSimplified(v2, (const llvm::IRPosition *)&v136, v3, &v122);
    if (!v40)
      goto LABEL_185;
    v15 = (llvm::Value *)AssumedSimplified;
    if (AssumedSimplified && v13 != AssumedSimplified)
    {
LABEL_13:
      v17 = v142;
      if (v142 >= (unint64_t)v143)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v144, v142 + 1, 16);
        v17 = v142;
      }
      v18 = &v141[16 * v17];
      *(_QWORD *)v18 = v15;
LABEL_95:
      *((_QWORD *)v18 + 1) = v12;
      ++v142;
      goto LABEL_185;
    }
    v30 = *(unsigned __int8 *)(v13 + 16);
    if (v30 != 60)
      goto LABEL_37;
    LOBYTE(v128) = 0;
    if (*(_QWORD *)(v13 - 32) == v118)
    {
      v30 = 60;
      goto LABEL_37;
    }
    v136 = 1;
    v137[0] = v117;
    v137[1] = v117;
    v138 = (int64_t *)v140;
    v139 = 0x400000000;
    v130 = 1;
    v131 = v117;
    v132 = v117;
    v133 = v135;
    v134 = 0x400000000;
    LODWORD(v41) = 1;
    if (!llvm::AA::getPotentiallyLoadedValues(v2, v13, &v136, &v130, v3, (BOOL *)&v128, 1))
    {
      v29 = 0;
      goto LABEL_162;
    }
    if (!(_DWORD)v139)
    {
      LODWORD(v41) = 0;
      v29 = 3;
      goto LABEL_162;
    }
    v42 = v138;
    v43 = 8 * v139;
    do
    {
      LODWORD(v41) = 1;
      if (!llvm::AA::isDynamicallyUnique(v121, v3, *v42, (const llvm::Value *)1))
      {
        v29 = 0;
LABEL_161:
        v2 = v121;
        goto LABEL_162;
      }
      ++v42;
      v43 -= 8;
    }
    while (v43);
    if (!(_DWORD)v139)
    {
      LODWORD(v41) = 0;
      v29 = 3;
      goto LABEL_161;
    }
    v44 = v138;
    v45 = v142;
    v41 = 8 * v139;
    v2 = v121;
    do
    {
      v46 = *v44;
      if (v45 >= v143)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v141, (uint64_t)v144, v45 + 1, 16);
        v45 = v142;
      }
      v47 = &v141[16 * v45];
      *(_QWORD *)v47 = v46;
      *((_QWORD *)v47 + 1) = v12;
      v45 = ++v142;
      ++v44;
      v41 -= 8;
    }
    while (v41);
    v29 = 3;
LABEL_162:
    if (v133 != v135)
      free(v133);
    if ((v130 & 1) == 0)
      MEMORY[0x1CAA32FB4](v131.i64[0], 8);
    if (v138 != (int64_t *)v140)
      free(v138);
    if ((v136 & 1) == 0)
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v137[0], 8);
      if (!(_DWORD)v41)
        goto LABEL_183;
LABEL_170:
      v30 = *(unsigned __int8 *)(v13 + 16);
LABEL_37:
      if (v30 <= 0x13 && ((1 << v30) & 0x81800) != 0)
      {
        v31 = 1;
LABEL_182:
        v29 = !v31;
        goto LABEL_183;
      }
      v58 = v13;
      if (v30 != 21)
      {
        if (v30 < 0x1C)
        {
          if (v30)
            v58 = v13;
          else
            v58 = v13 | 2;
        }
        else
        {
          v59 = v30 - 33;
          v58 = v13;
          if (v59 <= 0x33)
          {
            v58 = v13;
            if (((1 << v59) & 0x8000000000041) != 0)
              v58 = v13 | 1;
          }
        }
      }
      v74 = sub_1C5687DC4((uint64_t)v2, v58, 0, (uint64_t)v3, 0, 0, 1);
      if ((int)v9 > 0 || v74 != v3)
      {
        v82 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v74 + 48))(v74);
        ((void (*)(uint64_t, unint64_t))v123[6])((uint64_t)&v123, *(_QWORD *)(v82 + 16));
LABEL_181:
        v31 = ((BOOL (*)(uint64_t))v123[2])((uint64_t)&v123);
        goto LABEL_182;
      }
      LODWORD(v137[0]) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v120, *(_QWORD *)v13);
      if (LODWORD(v137[0]) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v136, 0, 0);
      else
        v136 = 0;
      v76 = llvm::Value::stripAndAccumulateConstantOffsets(v13, v120, (const void **)&v136, 1, 0, 0, v75);
      v77 = (llvm::Value *)v76;
      if (LODWORD(v137[0]) > 0x40)
      {
        v78 = *(_QWORD *)v136;
        MEMORY[0x1CAA32F9C]();
        if (v77)
          goto LABEL_116;
      }
      else
      {
        v78 = v136 << -(uint64_t)LODWORD(v137[0]) >> -(uint64_t)LODWORD(v137[0]);
        if (v76)
        {
LABEL_116:
          llvm::Value::getPointerAlignment(v77, v120);
          if ((int)v78 >= 0)
            v80 = v78;
          else
            v80 = -(int)v78;
          if (v79 <= 0x1Fu)
          {
            v104 = 1 << v79;
            do
            {
              v81 = v104;
              LODWORD(v104) = v80 % v104;
              v80 = v81;
            }
            while ((_DWORD)v104);
          }
          else
          {
            v81 = v80;
          }
          v105 = 1 << ~__clz(v81);
          if (v81)
            LODWORD(v106) = v105;
          else
            LODWORD(v106) = 0;
          goto LABEL_180;
        }
      }
      llvm::Value::getPointerAlignment((llvm::Value *)v13, v120);
      v106 = 1 << v109;
LABEL_180:
      v110 = (int8x16_t)vdupq_n_s64(v106);
      v124 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v124, (uint64x2_t)v110), v124, v110);
      ((void (*)(uint64_t))v123[5])((uint64_t)&v123);
      goto LABEL_181;
    }
    if ((_DWORD)v41)
      goto LABEL_170;
LABEL_183:
    if (v29 != 3 && v29)
      goto LABEL_188;
LABEL_185:
    v10 = v142;
    v9 = v14;
  }
  while (v142);
  if ((_DWORD)v150)
  {
    v115 = 24 * v150;
    v116 = v149 + 2;
    do
    {
      if (*v116)
        llvm::Attributor::recordDependence((uint64_t)v2, *((_QWORD *)v116 - 1), (uint64_t)v3, 1);
      v116 += 24;
      v115 -= 24;
    }
    while (v115);
  }
  v111 = 1;
LABEL_189:
  if (v141 != (char *)v144)
    free(v141);
  sub_1C6143384(v147[0]);
  if (v145[0] != v146)
    free(v145[0]);
  if (v149 != v151)
    free(v149);
  if ((v148[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v148[1], 8);
  if ((v111 & 1) == 0)
    return (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 4) + 40))((_QWORD *)v3 + 4);
  v112 = (_QWORD *)(*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v3 + 40))(v3);
  v113 = v112[2];
  (*(void (**)(_QWORD *, uint64_t))(*v112 + 48))(v112, v124.i64[1]);
  return v113 == v112[2];
}

unint64_t sub_1C569F794(unint64_t result, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 48);
  if (v3 >= 2)
  {
    result = llvm::Attribute::get(a2, 74, 1 << (__clz(v3) ^ 0x3Fu));
    v5 = result;
    v6 = *(unsigned int *)(a3 + 8);
    if (v6 >= *(_DWORD *)(a3 + 12))
    {
      result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v6 + 1, 8);
      *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v5;
      LODWORD(v6) = *(_DWORD *)(a3 + 8);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = result;
    }
    *(_DWORD *)(a3 + 8) = v6 + 1;
  }
  return result;
}

uint64_t *sub_1C569F820(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C569F838(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C569F880(uint64_t result, unint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  if (v2 >= a2)
    v2 = a2;
  if (v2 <= *(_QWORD *)(result + 8))
    v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 16) = v2;
  return result;
}

int8x16_t sub_1C569F89C(uint64_t a1, unint64_t a2)
{
  int8x16_t v2;
  int8x16_t result;

  v2 = (int8x16_t)vdupq_n_s64(a2);
  result = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)(a1 + 8), (uint64x2_t)v2), *(int8x16_t *)(a1 + 8), v2);
  *(int8x16_t *)(a1 + 8) = result;
  return result;
}

int8x16_t sub_1C569F8B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64x2_t v3;
  int8x16_t result;

  v3.i64[0] = a3;
  v3.i64[1] = a2;
  result = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)(a1 + 8), v3), *(int8x16_t *)(a1 + 8), (int8x16_t)v3);
  *(int8x16_t *)(a1 + 8) = result;
  return result;
}

int8x16_t sub_1C569F8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64x2_t v3;
  int8x16_t result;

  v3.i64[0] = a3;
  v3.i64[1] = a2;
  result = vbslq_s8((int8x16_t)vcgtq_u64(v3, *(uint64x2_t *)(a1 + 8)), *(int8x16_t *)(a1 + 8), (int8x16_t)v3);
  *(int8x16_t *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C569F8EC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int8x16_t v33;
  llvm::DataLayout *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unsigned __int8 v45;
  unint64_t v46;
  _QWORD v47[2];
  int v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51[2];
  int v52;
  __int128 v53;
  __int128 v54;
  const void *v55;
  unsigned int IndexTypeSizeInBits;

  v11 = sub_1C61AA84C(a3, a4);
  v51[0] = 0;
  v51[1] = 0;
  v52 = 0;
  sub_1C4DFE328((uint64_t)v51, v11);
  v12 = *(_OWORD *)(v11 + 40);
  v53 = *(_OWORD *)(v11 + 24);
  v54 = v12;
  v47[0] = 0;
  v47[1] = 0;
  v48 = 0;
  sub_1C4DFE328((uint64_t)v47, a3 + 176);
  v49 = *(_OWORD *)(a3 + 200);
  v50 = *(_OWORD *)(a3 + 216);
  v13 = a5[3];
  if (a5[4] != v13)
  {
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)(v13 + 8 * v14);
      v17 = *(_QWORD *)(v16 + 24);
      if (v17)
        v18 = *(unsigned __int8 *)(v17 + 16) >= 0x1Cu;
      else
        v18 = 0;
      if (!v18 || !sub_1C62844FC(a3, *(_QWORD *)(v16 + 24), v51, v47))
        goto LABEL_7;
      v19 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
      v20 = *(unsigned __int8 *)(v17 + 16);
      if ((v20 - 66) > 0xC)
        break;
      if (v20 != 75)
        goto LABEL_39;
LABEL_7:
      v13 = a5[3];
      v14 = ++v15;
      if (v15 >= (unint64_t)((a5[4] - v13) >> 3))
        goto LABEL_69;
    }
    v21 = 0;
    LOBYTE(v22) = 0;
    if (*(unsigned __int8 *)(v17 + 16) > 0x3Du)
    {
      if (v20 == 62)
      {
        v30 = *(_DWORD *)(v17 + 20) & 0x7FFFFFF;
        if ((_DWORD)v30 != 1)
        {
          v31 = 1;
          while (*(_BYTE *)(*(_QWORD *)(v17 - 32 * v30 + 32 * v31) + 16) == 16)
          {
            if ((_DWORD)v30 == ++v31)
              goto LABEL_39;
          }
          goto LABEL_7;
        }
LABEL_39:
        while (1)
        {
          v17 = *(_QWORD *)(v17 + 8);
          if (!v17)
            break;
          v55 = (const void *)v17;
          sub_1C542EB4C(a5, &v55);
        }
        goto LABEL_7;
      }
      v46 = v19;
      if (v20 != 84)
        goto LABEL_28;
    }
    else
    {
      v46 = v19;
      if (v20 != 33 && v20 != 39)
        goto LABEL_28;
    }
    v23 = *(_DWORD *)(v17 + 20);
    if (v23 < 0 && (v40 = v17 - 32 * (v23 & 0x7FFFFFF), v41 = *(_QWORD *)(v40 - 8), (v41 & 0xFFFFFFFF0) != 0))
    {
      v42 = (unint64_t)(v16 - v40) >> 5;
      v43 = *(_DWORD *)(v40 - v41) <= v42 && *(_DWORD *)(v40 - 12) > v42;
      LODWORD(v32) = 0;
      if (v43 || v17 - 32 == v16)
        goto LABEL_44;
      v24 = -(uint64_t)(v23 & 0x7FFFFFF);
    }
    else
    {
      if (v17 - 32 == v16)
      {
LABEL_43:
        LODWORD(v32) = 0;
LABEL_44:
        v33 = (int8x16_t)vdupq_n_s64(v32);
        *(int8x16_t *)(a6 + 8) = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)(a6 + 8), (uint64x2_t)v33), *(int8x16_t *)(a6 + 8), v33);
        goto LABEL_7;
      }
      v24 = -(uint64_t)(v23 & 0x7FFFFFF);
    }
    v25 = v17 + 32 * v24;
    v26 = v25;
    if ((v23 & 0x40000000) != 0)
      v26 = *(_QWORD *)(v17 - 8);
    v27 = *((_QWORD *)sub_1C5687DC4(a2, (v26 + ((v16 - v25) & 0x1FFFFFFFE0)) | 3, 0, a1, 2, 0, 1) + 5);
    v28 = __clz(v27) ^ 0x3F | 0x100;
    if (v27)
      LODWORD(v22) = v28;
    else
      LODWORD(v22) = 0;
    v21 = v22 >> 8;
    v20 = *(unsigned __int8 *)(v17 + 16);
LABEL_28:
    v29 = *(uint64_t **)v16;
    if ((v20 == 60 || v20 == 61) && *(uint64_t **)(v17 - 32) == v29)
    {
      v22 = ((unint64_t)*(unsigned __int16 *)(v17 + 18) >> 1) & 0x3F;
    }
    else if (!v21)
    {
      goto LABEL_43;
    }
    if (!(*(_QWORD *)(a1 + 40) >> v22))
    {
      v45 = v22;
      v34 = *(llvm::DataLayout **)(*(_QWORD *)(a2 + 88) + 120);
      IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v34, *v29);
      if (IndexTypeSizeInBits > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v55, 0, 0);
      else
        v55 = 0;
      v36 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v29, v34, &v55, 1, 0, 0, v35);
      if (IndexTypeSizeInBits > 0x40)
      {
        v37 = *(_QWORD *)v55;
        MEMORY[0x1CAA32F9C]();
      }
      else
      {
        v37 = (uint64_t)((_QWORD)v55 << -(char)IndexTypeSizeInBits) >> -(char)IndexTypeSizeInBits;
      }
      v32 = 1 << v45;
      if (v36 && v36 == v46)
      {
        if ((int)v37 >= 0)
          v38 = v37;
        else
          v38 = -(int)v37;
        if (v45 <= 0x1FuLL)
        {
          do
          {
            v39 = v32;
            LODWORD(v32) = v38 % v32;
            v38 = v39;
          }
          while ((_DWORD)v32);
        }
        else
        {
          v39 = v38;
        }
        v32 = 1 << ~__clz(v39);
        if (!v39)
          LODWORD(v32) = 0;
      }
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_69:
  MEMORY[0x1CAA32FB4](v47[0], 8);
  return MEMORY[0x1CAA32FB4](v51[0], 8);
}

uint64_t sub_1C569FCF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a2 && *(_BYTE *)(a2 + 16) == 30 && (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
  {
    v2 = *a1;
    v3 = *(unsigned int *)(*a1 + 8);
    if (v3 >= *(_DWORD *)(*a1 + 12))
    {
      v5 = a2;
      v6 = *a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2, v2 + 16, v3 + 1, 8);
      a2 = v5;
      v2 = v6;
      LODWORD(v3) = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v3) = a2;
    ++*(_DWORD *)(v2 + 8);
  }
  return 1;
}

BOOL sub_1C569FD7C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  void *v10[2];
  uint64_t v11;

  v9 = *(_QWORD *)a2;
  v10[0] = &v11;
  v10[1] = 0;
  if (*(_DWORD *)(a2 + 16))
    sub_1C614C900((uint64_t)v10, a2 + 8);
  v3 = sub_1C6284A2C(&v9, *(_DWORD *)(*(_QWORD *)*a1 + 32));
  if (v3)
  {
    v4 = a1[1];
    v5 = v9;
    v6 = *(unsigned int *)(v4 + 8);
    if (v6 >= *(_DWORD *)(v4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v4 + 16, v6 + 1, 16);
      LODWORD(v6) = *(_DWORD *)(v4 + 8);
    }
    v7 = (uint64_t *)(*(_QWORD *)v4 + 16 * v6);
    *v7 = v3;
    v7[1] = v5;
    ++*(_DWORD *)(v4 + 8);
  }
  if (v10[0] != &v11)
    free(v10[0]);
  return v3 != 0;
}

_QWORD *sub_1C569FE4C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C569FE80(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C569FEC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t AssociatedArgument;
  uint64_t v6;

  v4 = *(uint64_t **)(a2 + 88);
  AssociatedArgument = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 16));
  v6 = sub_1C6285788(v4, *(const llvm::Function **)(AssociatedArgument + 24));
  if (*(unsigned __int8 *)(v6 + 104) | *(unsigned __int8 *)(v6 + 105))
    return 1;
  else
    return sub_1C569E7E4(a1, a2);
}

void sub_1C569FF30()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3138);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3138))
      __cxa_guard_release(&qword_1EF8F3138);
  }
}

BOOL sub_1C569FF70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v9;
  _QWORD v10[4];
  int v11;
  char v12;
  unint64_t v13;
  char v14;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v12 = 0;
  v14 = 0;
  v11 = sub_1C628686C((llvm::IRPosition *)(a1 + 16), 0);
  v10[0] = &v11;
  v10[1] = a2;
  v10[2] = a1;
  v10[3] = &v12;
  v4 = 1;
  if (llvm::Attributor::checkForAllCallSites(a2, sub_1C56A00B8, (uint64_t)v10, a1, 1, &v9))
  {
    if (v14)
    {
      v5 = v13;
      if (v13 >= 0x100000000)
        v5 = 0x100000000;
      if (v5 <= 1)
        v4 = 1;
      else
        v4 = v5;
    }
    else
    {
      v4 = 0x100000000;
    }
  }
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = v6[2];
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 48))(v6, v4);
  return v7 == v6[2];
}

uint64_t *sub_1C56A0058(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A0070(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56A00B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v10 = *a2;
  v11 = &v13;
  v12 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)&v11, (uint64_t)(a2 + 1));
    v13 = v10;
    v14 = &v16;
    v15 = 0;
    if ((_DWORD)v12)
      sub_1C614CA14((uint64_t)&v14, (uint64_t)&v11);
  }
  else
  {
    v13 = v3;
    v14 = &v16;
    v15 = 0;
  }
  v16 = sub_1C628D358((uint64_t)&v13, **(_DWORD **)a1);
  v17 = v4;
  if (v14 != &v16)
    free(v14);
  if (sub_1C6283CA4(&v16))
  {
    v5 = sub_1C5687DC4(*(_QWORD *)(a1 + 8), v16, v17, *(_QWORD *)(a1 + 16), 0, 0, 1);
    v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 24))
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 72))(v7, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 8));
    }
    else
    {
      *(_QWORD *)v7 = off_1E8175728;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(v6 + 8);
      *(_QWORD *)v7 = &off_1E81756C8;
      *(_BYTE *)(v7 + 24) = 1;
    }
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  }
  else
  {
    v8 = 0;
  }
  if (v11 != &v13)
    free(v11);
  return v8;
}

_QWORD *sub_1C56A021C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56A0250(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56A0294(_QWORD *a1, uint64_t a2)
{
  unint64_t result;

  sub_1C569E290((uint64_t)a1, a2);
  result = sub_1C5676C10((llvm::IRPosition *)(a1 + 2));
  if (!result)
    goto LABEL_8;
  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
LABEL_8:
      a1[6] = a1[5];
  }
  else if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    goto LABEL_8;
  }
  return result;
}

void sub_1C56A0300()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3140);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3140))
      __cxa_guard_release(&qword_1EF8F3140);
  }
}

BOOL sub_1C56A0340(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[4];
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v13 = 0;
  v10 = 0;
  v12 = 0;
  v9[0] = &v13;
  v9[1] = a2;
  v9[2] = a1;
  v9[3] = &v10;
  if (llvm::Attributor::checkForAllReturnedValues(a2, (uint64_t)sub_1C56A0478, (uint64_t)v9, a1))
  {
    if (v12)
    {
      v4 = v11;
      if (v11 >= 0x100000000)
        v4 = 0x100000000;
      if (v4 <= 1)
        v5 = 1;
      else
        v5 = v4;
    }
    else
    {
      v5 = 0x100000000;
    }
  }
  else
  {
    v5 = 1;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = v6[2];
  (*(void (**)(_QWORD *, uint64_t))(*v6 + 48))(v6, v5);
  return v7 == v6[2];
}

uint64_t *sub_1C56A0418(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A0430(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56A0478(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  llvm::AbstractAttribute *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = **(_QWORD **)a1;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 21)
  {
    if (v4 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v5 = v4 - 33;
      v6 = v5 > 0x33;
      v7 = (1 << v5) & 0x8000000000041;
      if (!v6 && v7 != 0)
      {
        v3 = 0;
        a2 |= 1uLL;
      }
    }
  }
  v9 = sub_1C5687DC4(*(_QWORD *)(a1 + 8), a2, v3, *(_QWORD *)(a1 + 16), 0, 0, 1);
  v10 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v9 + 48))(v9);
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 24))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 72))(v11, *(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 8));
  }
  else
  {
    *(_QWORD *)v11 = off_1E8175728;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(v10 + 8);
    *(_QWORD *)v11 = &off_1E81756C8;
    *(_BYTE *)(v11 + 24) = 1;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *sub_1C56A0560(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56A0594(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56A05D8(_QWORD *a1, uint64_t a2)
{
  unint64_t result;

  sub_1C569E290((uint64_t)a1, a2);
  result = sub_1C5676C10((llvm::IRPosition *)(a1 + 2));
  if (!result)
    goto LABEL_8;
  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
LABEL_8:
      a1[6] = a1[5];
  }
  else if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    goto LABEL_8;
  }
  return result;
}

void sub_1C56A0644()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3148);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3148))
      __cxa_guard_release(&qword_1EF8F3148);
  }
}

uint64_t sub_1C56A0684(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  _QWORD *v5;
  unint64_t v6;
  llvm::AbstractAttribute *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v6 = sub_1C5676C10(v4);
  if (!v6)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 40))(v5);
  v7 = sub_1C5687DC4(a2, v6 | 1, 0, a1, 0, 0, 1);
  v8 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v7 + 48))(v7);
  v9 = v5[2];
  (*(void (**)(_QWORD *, _QWORD))(*v5 + 48))(v5, *(_QWORD *)(v8 + 16));
  return v9 == v5[2];
}

uint64_t *sub_1C56A0738(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A0750(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56A0798(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56A07CC(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56A0810(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  unint64_t AssociatedArgument;
  unsigned int v6;
  llvm::Value *v7;
  char v8;
  uint64_t v10;

  v4 = (llvm::IRPosition *)(a1 + 16);
  AssociatedArgument = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 16));
  if (AssociatedArgument)
  {
    v10 = sub_1C6285788(*(uint64_t **)(a2 + 88), *(const llvm::Function **)(AssociatedArgument + 24));
    if (*(unsigned __int8 *)(v10 + 104) | *(unsigned __int8 *)(v10 + 105))
      return 1;
  }
  v6 = sub_1C569E7E4(a1, a2);
  v7 = (llvm::Value *)sub_1C6284150(v4);
  llvm::Value::getPointerAlignment(v7, *(const llvm::DataLayout **)(*(_QWORD *)(a2 + 88) + 120));
  if ((unint64_t)(1 << v8) >= *(_QWORD *)(a1 + 48))
    return 1;
  else
    return v6;
}

void sub_1C56A08A8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3150);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3150))
      __cxa_guard_release(&qword_1EF8F3150);
  }
}

uint64_t sub_1C56A08E8(uint64_t a1, llvm::Attributor *a2)
{
  uint64_t v4;
  unint64_t AssociatedArgument;
  const double *v6;
  int8x16_t v7;

  v4 = sub_1C569EA44(a1, a2);
  AssociatedArgument = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 16));
  if (AssociatedArgument)
  {
    v6 = (const double *)((char *)sub_1C5687DC4((uint64_t)a2, AssociatedArgument, 0, a1, 2, 0, 1) + 40);
    v7 = (int8x16_t)vld1q_dup_f64(v6);
    *(int8x16_t *)(a1 + 40) = vbslq_s8((int8x16_t)vcgtq_u64(*(uint64x2_t *)(a1 + 40), (uint64x2_t)v7), *(int8x16_t *)(a1 + 40), v7);
  }
  return v4;
}

uint64_t *sub_1C56A0960(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A0978(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56A09C0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56A09F4(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56A0A38(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  uint64_t (**v10)(uint64_t);
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  uint64_t v30;
  __int32 v31;

  result = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  v3 = result;
  v4 = *(unsigned __int8 *)(result + 16);
  if (v4 <= 0x14)
  {
    v6 = sub_1C53775E8(result, (uint64_t (*)(uint64_t))sub_1C5381FC0);
    v8 = *(_QWORD *)(a1 + 32);
    v7 = a1 + 32;
    v9 = (uint64_t (**)(uint64_t))(v8 + 32);
    v10 = (uint64_t (**)(uint64_t))(v8 + 40);
    if (!v6)
      v10 = v9;
    return (*v10)(v7);
  }
  if (v4 < 0x1C)
    return result;
  switch(v4)
  {
    case 'T':
      v5 = 0;
      break;
    case '\'':
      v5 = (*(_DWORD *)(result + 80) + 1);
      break;
    case '!':
      v5 = 2;
      break;
    default:
      return result;
  }
  v11 = *(_DWORD *)(result + 20);
  if (v11 < 0 && (v20 = result - 32 * (v11 & 0x7FFFFFF), v21 = *(_QWORD *)(v20 - 8), (v21 & 0xFFFFFFFF0) != 0))
  {
    v13 = -(uint64_t)(v11 & 0x7FFFFFF);
    v12 = *(_DWORD *)(v20 - 12) - *(_DWORD *)(v20 - v21);
  }
  else
  {
    v12 = 0;
    v13 = -(uint64_t)(v11 & 0x7FFFFFF);
  }
  v14 = result - 32 * v5 + 32 * -v12;
  v15 = result + 32 * v13;
  if (((v14 - v15 - 32) & 0x1FFFFFFFE0) == 0)
  {
    v16 = v4 - 33;
    if (v16 <= 0x33)
    {
      if (((1 << v16) & 0x8001D0000010) != 0)
        return result;
      if (((1 << v16) & 0x8000000000041) != 0)
      {
        v18 = *(_QWORD *)(result + 64);
        if (!v18 || (*(_BYTE *)(v18 + 17) & 0x30) == 0)
        {
          if (v11 < 0)
          {
            v24 = *(_QWORD *)(v15 - 8);
            v23 = v15 - 8;
            v22 = v24;
            if (v24)
            {
              v25 = -v22;
              do
              {
                v26 = *(_DWORD *)(*(_QWORD *)(v23 + v25) + 8);
                v27 = v26 > 7;
                v28 = (1 << v26) & 0x83;
                if (v27 || v28 == 0)
                  return result;
                v25 += 16;
              }
              while (v25);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(result, 45) & 1) == 0)
          {
            result = llvm::CallBase::hasFnAttrOnCalledFunction(v3, 44);
            if (!(_DWORD)result)
              return result;
          }
        }
      }
      else if (v16 == 27 && (*(_WORD *)(result + 18) & 0x301) != 0)
      {
        return result;
      }
    }
    result = llvm::Instruction::mayThrow((llvm::Instruction *)v3);
    if ((result & 1) != 0)
      return result;
    result = llvm::Instruction::willReturn((llvm::Instruction *)v3);
    if (!(_DWORD)result)
      return result;
    v17 = *(unsigned __int8 *)(v3 + 16) - 33;
    if (v17 > 0x37)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
    if (((1 << (*(_BYTE *)(v3 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (((1 << (*(_BYTE *)(v3 + 16) - 33)) & 0x808001C8000010) != 0
        || v17 == 28 && (*(_WORD *)(v3 + 18) & 0x301) != 0)
      {
        return result;
      }
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
    }
    v19 = *(_QWORD *)(v3 + 64);
    if (v19 && ((*(_BYTE *)(v19 + 20) & 4) != 0 || (*(_BYTE *)(v19 + 17) & 0x10) != 0))
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
    v31 = 7;
    result = sub_1C53E4BBC(v3, &v31, 1uLL);
    if ((result & 1) == 0
      || (v30 = *(_QWORD *)(v3 - 32)) != 0
      && !*(_BYTE *)(v30 + 16)
      && *(_QWORD *)(v30 + 24) == *(_QWORD *)(v3 + 72)
      && *(_DWORD *)(v30 + 36) == 7)
    {
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v3, 66) & 1) != 0)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
      result = llvm::CallBase::hasFnAttrOnCalledFunction(v3, 44);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
    }
  }
  return result;
}

void *sub_1C56A0D28@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "<unique [fAa]>";
  else
    v3 = "<unknown>";
  if (*(_BYTE *)(a1 + 41))
    v4 = 14;
  else
    v4 = 9;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

uint64_t sub_1C56A0D84(_QWORD *a1, llvm::Attributor *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[2];

  v4 = sub_1C6284150((llvm::IRPosition *)(a1 + 2));
  v5 = v4;
  v6 = *(unsigned __int8 *)(v4 + 16);
  if (v6 > 0x1B)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 56);
    if (v7)
      goto LABEL_6;
  }
  else if (v6 == 21)
  {
    v7 = *(_QWORD *)(v4 + 24);
    if ((*(_DWORD *)(v7 + 32) & 0xFu) - 7 >= 2)
      return 1;
LABEL_6:
    v8 = 1;
    if (!*((_BYTE *)sub_1C568100C((uint64_t)a2, v7, 0, (uint64_t)a1, 1, 0, 1) + 41))
    {
      v11[0] = a2;
      v11[1] = a1;
      v10[0] = a2;
      v10[1] = a1;
      if ((llvm::Attributor::checkForAllUses(a2, (unsigned int (*)(uint64_t, uint64_t *, uint64_t *))sub_1C56A0F04, (uint64_t)v11, a1, v5, 1, 1, 1, (unsigned int (*)(uint64_t, uint64_t *, uint64_t))sub_1C56A10B8, (uint64_t)v10) & 1) == 0)return (*(uint64_t (**)(_QWORD *))(a1[4] + 40))(a1 + 4);
    }
    return v8;
  }
  return (*(uint64_t (**)(_QWORD *))(a1[4] + 32))(a1 + 4);
}

uint64_t *sub_1C56A0EA4(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A0EBC(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C56A0F04(uint64_t *a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v3 = a2[3];
  v4 = *(unsigned __int8 *)(v3 + 16);
  v6 = v4 != 62 && v3 != 0 && v4 >= 0x1C;
  if (!v6 || v4 - 66 < 0xD || *(_BYTE *)(v3 + 16) == 85 || *(_BYTE *)(v3 + 16) == 83)
  {
    v7 = 1;
    *a3 = 1;
    return v7;
  }
  v9 = *(unsigned __int8 *)(v3 + 16);
  v10 = v4 - 81;
  if (v9 == 60 || v10 < 2)
    return 1;
  v12 = a1[1];
  if (*(unsigned __int8 *)(v3 + 16) > 0x3Cu)
  {
    if (v9 != 84)
      return v9 == 61 && *(_QWORD *)(v3 - 64) != *a2;
  }
  else if (v9 != 33 && v9 != 39)
  {
    return 0;
  }
  v13 = *(_QWORD *)(v3 - 32);
  if (!v13
    || *(_BYTE *)(v13 + 16)
    || *(_QWORD *)(v13 + 24) != *(_QWORD *)(v3 + 72)
    || (*(_DWORD *)(v13 + 32) & 0xFu) - 7 > 1)
  {
    return 1;
  }
  v14 = *(_DWORD *)(v3 + 20);
  v15 = v3 - 32 * (v14 & 0x7FFFFFF);
  if (v15 > (unint64_t)a2)
    return 0;
  v16 = *(unsigned __int8 *)(v3 + 16);
  if (v16 == 84)
    v17 = 0;
  else
    v17 = v16 == 39 ? (*(_DWORD *)(v3 + 80) + 1) : 2;
  if (v14 < 0 && (v21 = *(_QWORD *)(v15 - 8), (v21 & 0xFFFFFFFF0) != 0))
    v18 = (*(_DWORD *)(v15 - 12) - *(_DWORD *)(v15 - v21));
  else
    v18 = 0;
  if (v3 - 32 * v17 - 32 * v18 - 32 <= (unint64_t)a2)
    return 0;
  v19 = *a1;
  v20 = (unint64_t)a2 - v15;
  if ((v14 & 0x40000000) != 0)
    v15 = *(_QWORD *)(v3 - 8);
  v7 = 1;
  if (!*((_BYTE *)sub_1C56838A0(v19, (v15 + (v20 & 0x1FFFFFFFE0)) | 3, 0, v12, 1, 0, 1) + 41))
    return 0;
  return v7;
}

uint64_t sub_1C56A10B8(llvm::AA **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::Attributor *v5;
  llvm::Value *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  int v11;
  _BYTE v13[28];

  v2 = 0;
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16) == 61)
    {
      v5 = a1[1];
      v6 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v3 - 32));
      if (*((_BYTE *)v6 + 16) != 59
        || (v2 = 1, !llvm::AA::isDynamicallyUnique(*a1, v5, (int64_t)v6, (const llvm::Value *)1)))
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 56);
        v8 = **(_QWORD **)(*((_QWORD *)*a1 + 11) + 440);
        if (v8)
          v9 = *(_QWORD *)(v7 + 40) == 0;
        else
          v9 = 1;
        if (v9)
          v10 = 0;
        else
          v10 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v8, &llvm::TargetLibraryAnalysis::Key, v7)+ 8);
        if (byte_1ED82E438)
          v11 = 59;
        else
          v11 = 63;
        sub_1C4EBF808((uint64_t)v6, v11, v10, v13);
        if (!v13[24])
          return 0;
        v2 = 1;
        if (!llvm::AA::isDynamicallyUnique(*a1, v5, (int64_t)v6, (const llvm::Value *)1))
          return 0;
      }
    }
  }
  return v2;
}

_QWORD *sub_1C56A11CC(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56A1200(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t *sub_1C56A1244(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A125C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56A12A4(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56A12D8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t *sub_1C56A131C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A1334(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56A137C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56A13B0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56A13F4(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;

  result = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 16));
  if (result)
  {
    v5 = sub_1C56838A0(a2, result, 0, a1, 0, 0, 1);
    v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
    v8 = *(_QWORD *)(a1 + 32);
    v7 = a1 + 32;
    v9 = *(_BYTE *)(v7 + 9) == 0;
    (*(void (**)(uint64_t, _QWORD))(v8 + 48))(v7, *(unsigned __int8 *)(v6 + 9));
    return v9 ^ (*(_BYTE *)(v7 + 9) != 0);
  }
  else
  {
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
  }
  return result;
}

uint64_t *sub_1C56A1488(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A14A0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56A14E8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56A151C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56A1560(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  unint64_t v9;
  unsigned int v10;
  unint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v17 = 22;
  if (llvm::IRPosition::hasAttr((llvm::IRPosition *)(a1 + 16), &v17, 1, 1, 0))
    goto LABEL_2;
  v9 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v9 = *(_QWORD *)(v9 + 24);
  v10 = *(unsigned __int8 *)(v9 + 16);
  if (!*(_BYTE *)(v9 + 16))
    goto LABEL_14;
  if (v10 == 21)
  {
    v11 = (unint64_t *)(v9 + 24);
  }
  else
  {
    if (v10 < 0x1C)
    {
      v9 = 0;
      goto LABEL_14;
    }
    v11 = (unint64_t *)(*(_QWORD *)(v9 + 40) + 56);
  }
  v9 = *v11;
LABEL_14:
  v12 = sub_1C6283CA4(v4);
  if (v12 <= 6 && ((1 << v12) & 0x54) != 0 && (!v9 || !sub_1C62873F8(a2, (llvm::GlobalValue *)v9)))
  {
    v13 = *(_QWORD *)(a1 + 32);
    v5 = a1 + 32;
    v7 = *(uint64_t (**)(uint64_t))(v13 + 40);
    return v7(v5);
  }
  if (*(_BYTE *)(sub_1C6284150(v4) + 16) == 19)
  {
    v14 = sub_1C6284150(v4);
    v15 = *(_DWORD *)(*(_QWORD *)v14 + 8);
    if ((v15 & 0xFE) == 0x12)
      v15 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v14 + 16) + 8);
    if (v15 <= 0xFF)
    {
LABEL_2:
      v6 = *(_QWORD *)(a1 + 32);
      v5 = a1 + 32;
      v7 = *(uint64_t (**)(uint64_t))(v6 + 32);
      return v7(v5);
    }
  }
  if ((sub_1C6283CA4(v4) & 0xFFFFFFFE) == 6)
    v9 = sub_1C5676C10(v4);
  v16 = a1 + 32;
  if (v9)
    return sub_1C56A1D28((unint64_t)v4, v9, v16);
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(a1 + 32);
}

char *sub_1C56A16E4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;

  v3 = *((unsigned __int16 *)result + 20);
  if ((~v3 & 7) != 0)
  {
    v4 = *((unsigned __int16 *)result + 21);
    if ((~v4 & 7) != 0)
    {
      if ((~v3 & 3) != 0)
      {
        if ((~v4 & 3) != 0)
        {
          *(_BYTE *)(a2 + 23) = 16;
          strcpy((char *)a2, "assumed-captured");
        }
        else
        {
          result = (char *)operator new(0x28uLL);
          *(_QWORD *)a2 = result;
          *(_OWORD *)(a2 + 8) = xmmword_1C85FC090;
          strcpy(result, "assumed not-captured-maybe-returned");
        }
      }
      else
      {
        result = (char *)operator new(0x28uLL);
        *(_QWORD *)a2 = result;
        *(_OWORD *)(a2 + 8) = xmmword_1C85F4B50;
        strcpy(result, "known not-captured-maybe-returned");
      }
    }
    else
    {
      *(_BYTE *)(a2 + 23) = 20;
      strcpy((char *)a2, "assumed not-captured");
    }
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 18;
    strcpy((char *)a2, "known not-captured");
  }
  return result;
}

void sub_1C56A1810()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3158);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3158))
      __cxa_guard_release(&qword_1EF8F3158);
  }
}

uint64_t sub_1C56A1850(uint64_t a1, llvm::Attributor *a2)
{
  llvm::IRPosition *v4;
  unint64_t AssociatedArgument;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t *v10;
  int v11;
  char v12;
  __int16 v13;
  llvm::AbstractAttribute *v14;
  llvm::AbstractAttribute *v15;
  int v16;
  llvm::AbstractAttribute *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  llvm::AbstractAttribute *v32;
  int v33;
  __int16 v34;
  _QWORD v35[4];
  _QWORD v36[2];
  char v37;
  uint64_t (**v38)();
  int v39;
  unint64_t v40;
  uint64_t v41;

  v4 = (llvm::IRPosition *)(a1 + 16);
  if ((sub_1C6283CA4((_QWORD *)(a1 + 16)) & 0xFFFFFFFE) == 6)
  {
    AssociatedArgument = llvm::IRPosition::getAssociatedArgument(v4);
    if (!AssociatedArgument)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  }
  else
  {
    AssociatedArgument = sub_1C6284150(v4);
  }
  v7 = AssociatedArgument;
  if ((sub_1C6283CA4(v4) & 0xFFFFFFFE) == 6)
  {
    v8 = sub_1C5676C10(v4);
    goto LABEL_16;
  }
  v8 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (*(_BYTE *)(v8 + 16))
  {
    if (v9 == 21)
    {
      v10 = (unint64_t *)(v8 + 24);
LABEL_14:
      v8 = *v10;
      goto LABEL_16;
    }
    if (v9 >= 0x1C)
    {
      v10 = (unint64_t *)(*(_QWORD *)(v8 + 40) + 56);
      goto LABEL_14;
    }
    v8 = 0;
  }
LABEL_16:
  v40 = v8;
  v41 = 0;
  v39 = 458752;
  v38 = &off_1E8175F90;
  v37 = 0;
  v11 = sub_1C5675BDC((uint64_t)a2, (uint64_t *)&v40, a1, 0, &v37);
  v12 = v11;
  if (v11)
  {
    v39 = 458753;
    if (v37)
    {
      *(_WORD *)(a1 + 42) |= 1u;
      *(_WORD *)(a1 + 40) |= 1u;
    }
    v13 = 5;
  }
  else
  {
    v13 = 4;
  }
  v34 = v13;
  v14 = sub_1C56860B4((uint64_t)a2, v40, v41, a1, 1, 0, 1);
  if (!*((_BYTE *)v14 + 41))
    goto LABEL_40;
  v15 = v14;
  v16 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)(v8 + 24) + 16) + 8);
  if (v16 == 7)
  {
    v17 = 0;
LABEL_33:
    v25 = v34;
    goto LABEL_34;
  }
  v17 = sub_1C5684904((uint64_t)a2, v40, v41, a1, 1, 0, 1);
  v18 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v17 + 136))(v17);
  if (v18 == v19)
    goto LABEL_33;
  v20 = v18;
  v21 = v19;
  v32 = v17;
  v33 = v16;
  v22 = 0;
  do
  {
    v24 = *(unsigned __int8 *)(*(_QWORD *)v20 + 16);
    if (v24 > 0x14)
    {
      if (v24 != 21)
        goto LABEL_40;
      v23 = *(_QWORD *)v20;
      if (v23 == llvm::IRPosition::getAssociatedArgument(v4))
        goto LABEL_40;
    }
    else
    {
      if ((v22 & 1) != 0)
        goto LABEL_40;
      v22 = 1;
    }
    v20 += 96;
  }
  while (v20 != v21);
  v16 = v33;
  v25 = v34;
  v17 = v32;
LABEL_34:
  HIWORD(v39) = 7;
  LOWORD(v39) = v25;
  if ((v12 & 1) != 0)
    return 1;
  if (*((_BYTE *)v15 + 40))
  {
    if (v16 == 7
      || (v26 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v17 + 48))(v17),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26)))
    {
      *(_WORD *)(a1 + 42) |= 4u;
      v27 = *(_WORD *)(a1 + 40);
      *(_WORD *)(a1 + 40) = v27 | 4;
      if ((v27 & 1) != 0)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
    }
  }
LABEL_40:
  v36[0] = a2;
  v36[1] = a1;
  v35[0] = v36;
  v35[1] = a1;
  v35[2] = a2;
  v35[3] = &v38;
  if ((llvm::Attributor::checkForAllUses(a2, (unsigned int (*)(uint64_t, uint64_t *, uint64_t *))sub_1C56A1E88, (uint64_t)v35, (_QWORD *)a1, v7, 0, 1, 1, 0, v31) & 1) == 0)return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v29 = *(unsigned __int16 *)(v28 + 10);
  v30 = (unsigned __int16)(HIWORD(v39) & v29) | *(unsigned __int16 *)(v28 + 8);
  *(_WORD *)(v28 + 10) = HIWORD(v39) & v29 | *(_WORD *)(v28 + 8);
  if ((~*(unsigned __int16 *)(a1 + 42) & 3) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  else
    return v29 == v30;
}

unint64_t sub_1C56A1BC0(unint64_t result, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  if ((~*(unsigned __int16 *)(result + 42) & 3) == 0)
  {
    v5 = result;
    result = sub_1C6283CA4((_QWORD *)(result + 16));
    if ((result & 0xFFFFFFFE) == 6)
    {
      if ((~*(unsigned __int16 *)(v5 + 42) & 7) == 0)
      {
        result = llvm::Attribute::get(a2, 22, 0);
        v6 = result;
        v7 = *(unsigned int *)(a3 + 8);
        v8 = (_DWORD *)(a3 + 8);
        if (v7 < *(_DWORD *)(a3 + 12))
        {
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = result;
LABEL_10:
          *v8 = v7 + 1;
          return result;
        }
        goto LABEL_11;
      }
      if (byte_1ED809C38)
      {
        result = (unint64_t)llvm::Attribute::get(a2, "no-capture-maybe-returned", 0x19uLL, 0, 0);
        v6 = result;
        v7 = *(unsigned int *)(a3 + 8);
        v8 = (_DWORD *)(a3 + 8);
        if (v7 < *(_DWORD *)(a3 + 12))
        {
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v7) = result;
          goto LABEL_10;
        }
LABEL_11:
        result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v7 + 1, 8);
        *(_QWORD *)(*(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 8)) = v6;
        LODWORD(v7) = *(_DWORD *)(a3 + 8);
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t *sub_1C56A1CC8(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A1CE0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56A1D28(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v5 = *(_QWORD *)(a2 + 112);
  if (!v5)
    goto LABEL_13;
  if ((*(_BYTE *)(v5 + 17) & 0x30) != 0)
  {
    if ((*(_BYTE *)(v5 + 16) & 0x20) != 0 && *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 16) + 8) == 7)
    {
      v6 = *(_WORD *)(a3 + 10);
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  if ((*(_BYTE *)(v5 + 17) & 0x20) != 0)
  {
LABEL_9:
    *(_WORD *)(a3 + 10) |= 1u;
    *(_WORD *)(a3 + 8) |= 1u;
  }
  if ((*(_BYTE *)(v5 + 16) & 0x20) != 0 && *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 16) + 8) == 7)
  {
    *(_WORD *)(a3 + 10) |= 4u;
    *(_WORD *)(a3 + 8) |= 4u;
  }
LABEL_13:
  result = sub_1C628686C((llvm::IRPosition *)result, 1);
  v8 = *(_QWORD *)(a2 + 112);
  if (v8 && (*(_BYTE *)(v8 + 16) & 0x20) != 0 && (result & 0x80000000) == 0 && *(_DWORD *)(a2 + 96))
  {
    v9 = 0;
    while (1)
    {
      if ((v9 + 2) < *(_DWORD *)(v8 + 8))
      {
        v10 = *(_QWORD *)(v8 + 40 + 8 * (v9 + 2));
        if (v10)
        {
          if ((*(_BYTE *)(v10 + 17) & 0x40) != 0)
            break;
        }
      }
      if (*(_DWORD *)(a2 + 96) == ++v9)
        return result;
    }
    if ((_DWORD)result != (_DWORD)v9)
    {
      v11 = *(_BYTE *)(v8 + 17);
      v6 = *(_WORD *)(a3 + 10);
      if ((v11 & 0x30) == 0)
      {
        *(_WORD *)(a3 + 10) = v6 | 4;
        v7 = *(_WORD *)(a3 + 8) | 4;
        goto LABEL_7;
      }
LABEL_6:
      *(_WORD *)(a3 + 10) = v6 | 7;
      v7 = *(_WORD *)(a3 + 8) | 7;
LABEL_7:
      *(_WORD *)(a3 + 8) = v7;
      return result;
    }
    *(_WORD *)(a3 + 10) = *(_WORD *)(a3 + 10) & 0xFFFB | *(_WORD *)(a3 + 8);
  }
  return result;
}

BOOL sub_1C56A1E88(uint64_t *a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  int v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;

  v6 = a1[1];
  v7 = llvm::DetermineUseCaptureKind(a2, (uint64_t (*)(uint64_t, llvm::Value *, uint64_t))sub_1C56A20C0, *a1);
  if (!v7)
    return 1;
  if (v7 == 2)
  {
    result = 1;
    *a3 = 1;
    return result;
  }
  v9 = a1[2];
  v10 = a1[3];
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(unsigned __int8 *)(v11 + 16);
  if (v12 <= 0x3C)
  {
    if (v12 != 29)
    {
      if (v12 != 33 && v12 != 39)
        goto LABEL_26;
      goto LABEL_14;
    }
    v21 = *(_QWORD *)(v11 + 40);
    v22 = *(_QWORD *)(v6 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)(v6 + 16) & 3) == 0)
      v22 = *(_QWORD *)(v22 + 24);
    v23 = *(_QWORD *)(v21 + 56);
    v24 = *(unsigned __int8 *)(v22 + 16);
    if (*(_BYTE *)(v22 + 16))
    {
      if (v24 == 21)
      {
        v25 = (unint64_t *)(v22 + 24);
      }
      else
      {
        if (v24 < 0x1C)
        {
          v22 = 0;
          goto LABEL_38;
        }
        v25 = (unint64_t *)(*(_QWORD *)(v22 + 40) + 56);
      }
      v22 = *v25;
    }
LABEL_38:
    v26 = *(unsigned __int16 *)(v10 + 10);
    if (v23 == v22)
      v27 = v26 & 0xFFFFFFFB;
    else
      v27 = v26 & 0xFFF8;
    v20 = v27 | *(unsigned __int16 *)(v10 + 8);
    goto LABEL_42;
  }
  if (v12 == 61)
  {
    v13 = *(_WORD *)(v10 + 10) & 0xFFFE;
    goto LABEL_33;
  }
  if (v12 != 84)
  {
    if (v12 != 75)
    {
LABEL_26:
      v20 = *(unsigned __int16 *)(v10 + 8);
      *(_WORD *)(v10 + 10) = *(_WORD *)(v10 + 10) & 0xFFF8 | v20;
      return (~v20 & 3) == 0;
    }
LABEL_13:
    v13 = *(_WORD *)(v10 + 10) & 0xFFF8;
LABEL_33:
    v20 = v13 | *(unsigned __int16 *)(v10 + 8);
LABEL_42:
    *(_WORD *)(v10 + 10) = v20;
    return (~v20 & 3) == 0;
  }
LABEL_14:
  v14 = *(_DWORD *)(v11 + 20);
  v15 = v11 - 32 * (v14 & 0x7FFFFFF);
  if (v15 > a2)
    goto LABEL_26;
  if (v12 == 84)
    v16 = 0;
  else
    v16 = v12 == 39 ? (*(_DWORD *)(v11 + 80) + 1) : 2;
  if (v14 < 0 && (v28 = *(_QWORD *)(v15 - 8), (v28 & 0xFFFFFFFF0) != 0))
    v17 = (*(_DWORD *)(v15 - 12) - *(_DWORD *)(v15 - v28));
  else
    v17 = 0;
  if (v11 - 32 * v16 - 32 * v17 - 32 <= a2)
    goto LABEL_26;
  v18 = a2 - v15;
  if ((v14 & 0x40000000) != 0)
    v15 = *(_QWORD *)(v11 - 8);
  v19 = *((unsigned __int16 *)sub_1C5689124(v9, (v15 + (v18 & 0x1FFFFFFFE0)) | 3, 0, v6, 0, 0, 1) + 21);
  if ((~v19 & 7) != 0)
  {
    if ((~v19 & 3) == 0)
    {
      *a3 = 1;
      goto LABEL_25;
    }
    goto LABEL_13;
  }
LABEL_25:
  v20 = *(unsigned __int16 *)(v10 + 10);
  return (~v20 & 3) == 0;
}

BOOL sub_1C56A20C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 21)
  {
    if (v5 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v6 = v5 - 33;
      v7 = v6 > 0x33;
      v8 = (1 << v6) & 0x8000000000041;
      if (!v7 && v8 != 0)
        a2 |= 1uLL;
    }
  }
  return *((_DWORD *)sub_1C5688C4C(v2, a2, 0, v3, 1, 0, 1) + 13) != 0;
}

_QWORD *sub_1C56A213C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56A2170(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56A21B4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3160);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3160))
      __cxa_guard_release(&qword_1EF8F3160);
  }
}

uint64_t *sub_1C56A21F4(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A220C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56A2254(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56A2288(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56A22CC(uint64_t a1)
{
  unint64_t v1;
  unint64_t *v2;

  v1 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v1 = *(_QWORD *)(v1 + 24);
  if (*(_BYTE *)(v1 + 16))
  {
    if (*(_BYTE *)(v1 + 16) == 21)
      v2 = (unint64_t *)(v1 + 24);
    else
      v2 = (unint64_t *)(*(_QWORD *)(v1 + 40) + 56);
    v1 = *v2;
  }
  return sub_1C56A1D28(a1 + 16, v1, a1 + 32);
}

void sub_1C56A2318()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3168);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3168))
      __cxa_guard_release(&qword_1EF8F3168);
  }
}

uint64_t *sub_1C56A2358(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A2370(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56A23B8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56A23EC(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56A2430(_WORD *a1, uint64_t a2)
{
  unint64_t AssociatedArgument;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;

  AssociatedArgument = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 8));
  if (AssociatedArgument)
  {
    if (*(_BYTE *)(*(_QWORD *)AssociatedArgument + 8) == 15)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(AssociatedArgument + 24) + 112);
      if (v5)
      {
        v6 = *(_DWORD *)(AssociatedArgument + 32) + 2;
        if (v6 < *(_DWORD *)(v5 + 8))
        {
          v8 = *(_QWORD *)(v5 + 8 * v6 + 40);
          if (v8)
          {
            if ((*(_BYTE *)(v8 + 20) & 0x20) != 0)
              a1[20] = a1[21];
          }
        }
      }
    }
  }
  return sub_1C56A1560((uint64_t)a1, a2);
}

void sub_1C56A24B4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3170);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3170))
      __cxa_guard_release(&qword_1EF8F3170);
  }
}

unint64_t sub_1C56A24F4(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 16));
  if (result)
  {
    v5 = sub_1C5689124(a2, result, 0, a1, 0, 0, 1);
    v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
    v8 = *(_QWORD *)(a1 + 32);
    v7 = a1 + 32;
    v9 = *(unsigned __int16 *)(v7 + 10);
    (*(void (**)(uint64_t, _QWORD))(v8 + 48))(v7, *(unsigned __int16 *)(v6 + 10));
    return v9 == *(unsigned __int16 *)(v7 + 10);
  }
  else
  {
    *(_WORD *)(a1 + 42) = *(_WORD *)(a1 + 40);
  }
  return result;
}

uint64_t *sub_1C56A257C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A2594(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56A25DC(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 32) = &off_1E8176448;
  if (*(_DWORD *)(a1 + 104) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  }
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C56A26D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 32) = &off_1E8176448;
  if (*(_DWORD *)(a1 + 104) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 96);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56A27D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t **v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;

  sub_1C56A5E98(a1, a2);
  v3 = a1 + 32;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 24))(a1 + 32);
  if ((result & 1) != 0)
    return result;
  result = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  v5 = result;
  v6 = *(unsigned __int8 *)(result + 16);
  if (v6 == 16)
  {
    v9 = *(unsigned int *)(result + 32);
    if (v9 > 0x40)
    {
      v12 = ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8;
      v13 = (void *)operator new[]();
      memcpy(v13, *(const void **)(v5 + 24), v12);
      v35 = v9;
      v34 = (uint64_t)v13;
      v39 = v9;
      v10 = (void *)operator new[]();
      memcpy(v10, v13, v12);
    }
    else
    {
      v10 = *(void **)(result + 24);
      v35 = *(_DWORD *)(result + 32);
      v34 = (uint64_t)v10;
      v39 = v9;
    }
LABEL_23:
    v38 = (uint64_t)v10;
    llvm::APInt::operator+=((uint64_t)&v38, 1uLL);
    v37 = v39;
    v36 = v38;
    sub_1C628DF84(v3, (unsigned int *)&v34);
    if (v37 >= 0x41 && v36)
      MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
    if (v35 >= 0x41 && v34)
      MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  }
  if (v6 - 11 <= 1)
  {
    v11 = *(_DWORD *)(a1 + 40);
    v33 = v11;
    if (v11 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v32, 0, 0);
      v29 = v33;
      v35 = v29;
      v10 = (void *)v32;
      v34 = v32;
      v33 = 0;
      v39 = v29;
      if (v29 > 0x40)
      {
        v30 = ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8;
        v31 = (void *)operator new[]();
        memcpy(v31, v10, v30);
        v10 = v31;
      }
    }
    else
    {
      v10 = 0;
      v32 = 0;
      v35 = v11;
      v34 = 0;
      v33 = 0;
      v39 = v11;
    }
    goto LABEL_23;
  }
  if (v6 < 0x1C)
    goto LABEL_44;
  v7 = v6 - 33 > 0x33 || ((1 << (v6 - 33)) & 0x8000000000041) == 0;
  if (!v7 || v6 - 41 < 0x12 || v6 - 81 < 2 || v6 - 66 < 0xD)
    return result;
  if (v6 != 60)
  {
LABEL_44:
    if (v6 == 83 || v6 == 85)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(a1 + 32);
  }
  v8 = *(_DWORD *)(result + 20);
  if (*(_QWORD *)(result + 48))
  {
    if ((v8 & 0x20000000) == 0)
    {
LABEL_43:
      v6 = *(unsigned __int8 *)(v5 + 16);
      goto LABEL_44;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(a1 + 32);
  }
  v14 = ***(_QWORD ***)result;
  v34 = result;
  v15 = *(_DWORD *)(v14 + 2496);
  if (v15)
  {
    v16 = *(_QWORD *)(v14 + 2480);
    v17 = v15 - 1;
    v18 = v17 & ((result >> 4) ^ (result >> 9));
    result = v16 + 40 * v18;
    v19 = *(uint64_t ***)result;
    if (*(_QWORD *)result == v5)
      goto LABEL_37;
    v20 = 0;
    v21 = 1;
    while (v19 != (uint64_t **)-4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v19 == (uint64_t **)-8192;
      if (v22)
        v20 = (_QWORD *)result;
      v23 = v18 + v21++;
      v18 = v23 & v17;
      result = v16 + 40 * v18;
      v19 = *(uint64_t ***)result;
      if (*(_QWORD *)result == v5)
        goto LABEL_37;
    }
    if (v20)
      v27 = v20;
    else
      v27 = (_QWORD *)result;
  }
  else
  {
    v27 = 0;
  }
  result = (uint64_t)sub_1C541AB24(v14 + 2480, (uint64_t)&v34, &v34, v27);
  v28 = v34;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = v28;
  *(_QWORD *)(result + 8) = result + 24;
  *(_QWORD *)(result + 16) = 0x100000000;
LABEL_37:
  v24 = *(unsigned int *)(result + 16);
  if (!(_DWORD)v24)
    goto LABEL_43;
  v25 = (uint64_t *)(*(_QWORD *)(result + 8) + 8);
  v26 = 16 * v24;
  while (*((_DWORD *)v25 - 2) != 4)
  {
    v25 += 2;
    v26 -= 16;
    if (!v26)
      goto LABEL_43;
  }
  result = *v25;
  if (!*v25)
    goto LABEL_43;
  llvm::getConstantRangeFromMetadata(result, (uint64_t)&v34);
  result = sub_1C628DF00(a1 + 32, (llvm::ConstantRange *)&v34);
  if (v37 >= 0x41)
  {
    result = v36;
    if (v36)
      result = MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
  }
  if (v35 >= 0x41)
  {
    result = v34;
    if (v34)
      return MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
  }
  return result;
}

void sub_1C56A2C0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  size_t v8;
  size_t v9;
  void *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  void (**v14)(llvm::raw_ostream *__hidden);
  int v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  uint64_t v20;
  int v21;
  void **v22;
  void *v23[2];
  uint64_t v24;

  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  v15 = 0;
  v19 = 0;
  v20 = 0;
  v14 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v22 = v23;
  v21 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v14, "range(", 6uLL);
  sub_1C5E21910((llvm::raw_ostream *)&v14, *(unsigned int *)(a1 + 40), 0, 0, 0);
  if ((unint64_t)(v17 - v18) > 1)
  {
    *(_WORD *)v18 = 15401;
    v18 += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v14, ")<", 2uLL);
  }
  v11 = *(_DWORD *)(a1 + 88);
  if (v11 > 0x40)
  {
    v10 = (void *)operator new[]();
    memcpy(v10, *(const void **)(a1 + 80), (((unint64_t)v11 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v10 = *(void **)(a1 + 80);
  }
  v13 = *(_DWORD *)(a1 + 104);
  if (v13 > 0x40)
  {
    v12 = (void *)operator new[]();
    memcpy(v12, *(const void **)(a1 + 96), (((unint64_t)v13 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v12 = *(void **)(a1 + 96);
  }
  llvm::ConstantRange::print((llvm::ConstantRange *)&v10, (llvm::raw_ostream *)&v14);
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  if (v11 >= 0x41 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  v4 = v18;
  if ((unint64_t)(v17 - v18) > 2)
  {
    v18[2] = 32;
    *v4 = 12064;
    v18 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v14, " / ", 3uLL);
  }
  v5 = *(unsigned int *)(a1 + 56);
  v11 = v5;
  if (v5 > 0x40)
  {
    v8 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    v10 = (void *)operator new[]();
    memcpy(v10, *(const void **)(a1 + 48), v8);
  }
  else
  {
    v10 = *(void **)(a1 + 48);
  }
  v6 = *(unsigned int *)(a1 + 72);
  v13 = v6;
  if (v6 > 0x40)
  {
    v9 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
    v12 = (void *)operator new[]();
    memcpy(v12, *(const void **)(a1 + 64), v9);
  }
  else
  {
    v12 = *(void **)(a1 + 64);
  }
  llvm::ConstantRange::print((llvm::ConstantRange *)&v10, (llvm::raw_ostream *)&v14);
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  if (v11 >= 0x41 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  if (v17 == v18)
    llvm::raw_ostream::write((llvm::raw_ostream *)&v14, ">", 1uLL);
  else
    *v18++ = 62;
  if (*((char *)v22 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v22, (unint64_t)v22[1]);
  }
  else
  {
    v7 = *(_OWORD *)v22;
    *(_QWORD *)(a2 + 16) = v22[2];
    *(_OWORD *)a2 = v7;
  }
  v14 = off_1E81A6E70;
  if (v21 == 1 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8077774924);
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
}

uint64_t sub_1C56A2FE8(uint64_t a1)
{
  llvm::IRPosition *v1;
  const llvm::APInt *Impl;
  uint64_t ***v3;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  BOOL v7;
  char v8;
  unsigned int v9;
  char v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t ****v18;
  uint64_t ***v19;
  uint64_t ****v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  BOOL v37;
  llvm::ConstantInt **v38;
  uint64_t *v39;
  llvm::Value **v40;
  llvm::Value *v41;
  const llvm::APInt *v42;
  llvm::Value **v43;
  llvm::Value *v44;
  uint64_t v45;
  uint64_t ****v48;
  uint64_t ***v49;
  _QWORD *v50;
  int v51;
  int64_t v52;
  BOOL v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  void *__s1;
  unsigned int v63;
  void *__s2;
  unsigned int v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v1 = (llvm::IRPosition *)(a1 + 16);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 112))(&__s1);
  v3 = (uint64_t ***)sub_1C6284150(v1);
  v4 = v63;
  if (v63 >= 0x41)
  {
    v50 = __s1;
    if (!memcmp(__s1, __s2, (((unint64_t)v63 + 63) >> 3) & 0x3FFFFFF8))
    {
      v51 = 0;
      v52 = (unint64_t)(v4 + 63) >> 6;
      do
      {
        v53 = v52-- < 1;
        if (v53)
          break;
        v54 = v50[v52];
        v51 += __clz(v54);
      }
      while (!v54);
      v55 = v4 | 0xFFFFFFC0;
      if ((v4 & 0x3F) == 0)
        v55 = 0;
      if (v51 + v55 == (_DWORD)v4)
        goto LABEL_76;
    }
    LODWORD(v67) = v4;
    v66 = (void *)operator new[]();
    memcpy(v66, __s1, (((unint64_t)v67 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    if (!((unint64_t)__s2 | (unint64_t)__s1))
      goto LABEL_76;
    LODWORD(v67) = v63;
    v66 = __s1;
  }
  llvm::APInt::operator+=((uint64_t)&v66, 1uLL);
  v5 = v67;
  v6 = v66;
  LODWORD(v67) = 0;
  if (v65 > 0x40)
    v7 = memcmp(__s2, v66, (((unint64_t)v65 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v7 = __s2 == v66;
  v8 = v7;
  if (v5 >= 0x41)
  {
    if (v6)
    {
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
      if (v67 >= 0x41)
      {
        if (v66)
          MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
      }
    }
  }
  v9 = *((unsigned __int8 *)v3 + 16);
  if (v9 < 0x1C)
    v10 = 1;
  else
    v10 = v8;
  if ((v10 & 1) != 0 || v9 != 84 && v9 != 60)
    goto LABEL_76;
  v11 = *((_DWORD *)v3 + 5);
  if (v3[6])
  {
    if ((v11 & 0x20000000) == 0)
      goto LABEL_40;
LABEL_25:
    v13 = ***v3;
    v66 = v3;
    v14 = *(_DWORD *)(v13 + 2496);
    if (v14)
    {
      v15 = *(_QWORD *)(v13 + 2480);
      v16 = v14 - 1;
      v17 = v16 & ((v3 >> 4) ^ (v3 >> 9));
      v18 = (uint64_t ****)(v15 + 40 * v17);
      v19 = *v18;
      if (*v18 == v3)
        goto LABEL_35;
      v20 = 0;
      v21 = 1;
      while (v19 != (uint64_t ***)-4096)
      {
        if (v20)
          v22 = 0;
        else
          v22 = v19 == (uint64_t ***)-8192;
        if (v22)
          v20 = v18;
        v23 = v17 + v21++;
        v17 = v23 & v16;
        v18 = (uint64_t ****)(v15 + 40 * v17);
        v19 = *v18;
        if (*v18 == v3)
          goto LABEL_35;
      }
      if (v20)
        v48 = v20;
      else
        v48 = v18;
    }
    else
    {
      v48 = 0;
    }
    v18 = (uint64_t ****)sub_1C541AB24(v13 + 2480, (uint64_t)&v66, (uint64_t *)&v66, v48);
    v49 = (uint64_t ***)v66;
    v18[3] = 0;
    v18[4] = 0;
    *v18 = v49;
    v18[1] = (uint64_t ***)(v18 + 3);
    v18[2] = (uint64_t ***)0x100000000;
LABEL_35:
    v24 = *((unsigned int *)v18 + 4);
    if ((_DWORD)v24)
    {
      v25 = v18[1] + 1;
      v26 = 16 * v24;
      while (*((_DWORD *)v25 - 2) != 4)
      {
        v27 = 0;
        v25 += 2;
        v26 -= 16;
        if (!v26)
          goto LABEL_41;
      }
      v27 = *v25;
LABEL_41:
      v28 = v63;
      if (v63 > 0x40)
      {
        if (!memcmp(__s1, __s2, (((unint64_t)v63 + 63) >> 3) & 0x3FFFFFF8)
          && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1) == v28)
        {
          goto LABEL_76;
        }
      }
      else if (__s1 == __s2 && (!v63 || __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v63)))
      {
        goto LABEL_76;
      }
      if (!v27)
      {
LABEL_63:
        v12 = v28;
        if (v28 < 0x41)
          goto LABEL_64;
        goto LABEL_101;
      }
      v29 = *(unsigned int *)(v27 + 8);
      if (v29 > 2)
        goto LABEL_76;
      v30 = (_QWORD *)(v27 - 8 * v29);
      v31 = *(_QWORD *)(*v30 + 128);
      v32 = *(_QWORD *)(v30[1] + 128);
      v33 = *(unsigned int *)(v31 + 32);
      if (v33 > 0x40)
      {
        v34 = (void *)operator new[]();
        memcpy(v34, *(const void **)(v31 + 24), ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v34 = *(void **)(v31 + 24);
      }
      v35 = *(unsigned int *)(v32 + 32);
      if (v35 > 0x40)
      {
        v36 = (void *)operator new[]();
        memcpy(v36, *(const void **)(v32 + 24), ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v36 = *(void **)(v32 + 24);
      }
      LODWORD(v67) = v33;
      v66 = v34;
      v69 = v35;
      v68 = v36;
      if (!llvm::ConstantRange::contains((llvm::ConstantRange *)&v66, (const llvm::ConstantRange *)&__s1))
      {
        if (v35 >= 0x41 && v36 != 0)
        {
          MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
          LODWORD(v33) = (_DWORD)v67;
        }
        if (v33 >= 0x41 && v66)
          MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
        goto LABEL_76;
      }
      if (v33 > 0x40)
      {
        if (!memcmp(v34, __s1, ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8))
          goto LABEL_58;
      }
      else if (v34 == __s1)
      {
LABEL_58:
        if (v35 <= 0x40)
        {
          v37 = v36 == __s2;
          goto LABEL_60;
        }
        v37 = memcmp(v36, __s2, ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8) == 0;
        goto LABEL_124;
      }
      v37 = 0;
      if (v35 < 0x41)
      {
LABEL_60:
        if (v33 >= 0x41 && v66)
          MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
        if (v37)
          goto LABEL_76;
        v28 = v63;
        goto LABEL_63;
      }
LABEL_124:
      if (v36)
      {
        MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
        LODWORD(v33) = (_DWORD)v67;
      }
      goto LABEL_60;
    }
LABEL_40:
    v27 = 0;
    goto LABEL_41;
  }
  if ((v11 & 0x20000000) != 0)
    goto LABEL_25;
  v12 = v63;
  if (v63 <= 0x40)
  {
    if (__s1 == __s2 && (!v63 || __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v63)))
      goto LABEL_76;
LABEL_64:
    if ((unint64_t)__s2 | (unint64_t)__s1)
      goto LABEL_65;
LABEL_76:
    v45 = 1;
    goto LABEL_77;
  }
  if (!memcmp(__s1, __s2, (((unint64_t)v63 + 63) >> 3) & 0x3FFFFFF8)
    && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1) == v12)
  {
    goto LABEL_76;
  }
LABEL_101:
  v56 = v12 + 63;
  v57 = __s1;
  if (!memcmp(__s1, __s2, (v56 >> 3) & 0x3FFFFFF8))
  {
    v58 = 0;
    v59 = v56 >> 6;
    do
    {
      v53 = v59-- < 1;
      if (v53)
        break;
      v60 = v57[v59];
      v58 += __clz(v60);
    }
    while (!v60);
    v61 = v12 | 0xFFFFFFC0;
    if ((v12 & 0x3F) == 0)
      v61 = 0;
    if (v58 + v61 == v12)
      goto LABEL_76;
  }
LABEL_65:
  v38 = (llvm::ConstantInt **)*v3;
  v39 = **v3;
  v40 = llvm::ConstantInt::get((llvm::ConstantInt **)*v3, (llvm::Type *)&__s1, Impl);
  v66 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v40, v41);
  v43 = llvm::ConstantInt::get(v38, (llvm::Type *)&__s2, v42);
  v67 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v43, v44);
  Impl = (const llvm::APInt *)llvm::MDTuple::getImpl(v39, &v66, 2, 0, 1);
  if (Impl || v3[6] || (*((_BYTE *)v3 + 23) & 0x20) != 0)
    llvm::Value::setMetadata((llvm::Value *)v3, 4, Impl);
  v45 = 0;
LABEL_77:
  if (v65 >= 0x41 && __s2)
    MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17, Impl);
  if (v63 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17, Impl);
  return v45;
}

void sub_1C56A371C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3178);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3178))
      __cxa_guard_release(&qword_1EF8F3178);
  }
}

uint64_t sub_1C56A375C(uint64_t a1, llvm::Attributor *a2)
{
  uint64_t v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t i;
  unint64_t v10;
  int v11;
  char *v12;
  unsigned int v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v26;
  int v27;
  llvm::Argument *v28;
  int v29;
  char v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  llvm::UndefValue *AssumedConstant;
  char v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t AssumedSimplified;
  char v57;
  uint64_t v58;
  _BOOL4 v59;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t *v65;
  __int128 v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t *v80;
  unint64_t *v81;
  llvm::AbstractAttribute **v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t v113;
  char v114;
  int64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  llvm::AbstractAttribute *v119;
  unint64_t v120;
  char v121;
  int64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  void *v150;
  BOOL v151;
  char v152;
  size_t v154;
  size_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  llvm::AbstractAttribute *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  llvm::AbstractAttribute *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  llvm::AbstractAttribute *v168;
  uint64_t v169;
  int v170;
  llvm::AbstractAttribute *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  llvm::AbstractAttribute *v176;
  uint64_t v177;
  BOOL v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  int64_t v182;
  unint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  _BOOL4 v188;
  int v190;
  int64_t v191;
  unint64_t v192;
  int v193;
  _QWORD *v194;
  int v195;
  int64_t v196;
  unint64_t v197;
  int v198;
  int64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v203;
  _BYTE *v204;
  uint64_t v205;
  int v206;
  size_t v207;
  uint64_t v208;
  unint64_t __n;
  void **v210;
  int v211[2];
  _QWORD *v212;
  unint64_t *v213;
  char *__s2;
  _DWORD *v215;
  llvm::Attributor *v216;
  unsigned int *v217;
  int64x2_t v218;
  char *v219;
  int v220[2];
  uint64_t v221;
  llvm::AbstractAttribute *v222;
  uint64_t *v223;
  uint64_t *v224;
  void *__s1;
  void *v226;
  BOOL v227;
  uint64_t (**v228)();
  unsigned int v229;
  void *__src;
  unsigned int v231;
  void *v232;
  unsigned int v233;
  void *v234;
  unsigned int v235;
  void *v236;
  unsigned int v237;
  unint64_t v238[2];
  _QWORD v239[2];
  void *v240;
  unsigned int v241;
  unint64_t v242;
  unsigned int v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  unsigned int v247;
  BOOL v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  int v254;
  unint64_t v255;
  int64x2_t v256;
  int64x2_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int64x2_t v262;
  int64x2_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  unsigned int v268;
  unsigned int v269;
  _QWORD v270[32];
  void *v271[2];
  _QWORD v272[33];
  _QWORD *v273[2];
  _QWORD v274[9];
  unint64_t *v275;
  uint64_t v276;
  _QWORD v277[14];

  v3 = a1;
  v277[12] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 40);
  v228 = &off_1E8176448;
  v229 = v4;
  v231 = v4;
  if (v4 < 0x41)
  {
    v233 = v4;
    __src = 0;
    v232 = 0;
    v5 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v4);
    if (!v4)
      v5 = 0;
    v234 = v5;
    v235 = v4;
    v237 = v4;
    goto LABEL_5;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
  v233 = v231;
  if (v231 >= 0x41)
  {
    v207 = (((unint64_t)v231 + 63) >> 3) & 0x3FFFFFF8;
    v232 = (void *)operator new[]();
    memcpy(v232, __src, v207);
  }
  else
  {
    v232 = __src;
  }
  v235 = v4;
  llvm::APInt::initSlowCase((llvm::APInt *)&v234, -1, 1);
  v237 = v235;
  if (v235 <= 0x40)
  {
LABEL_5:
    v236 = v234;
    goto LABEL_6;
  }
  v236 = (void *)operator new[]();
  memcpy(v236, v234, (((unint64_t)v237 + 63) >> 3) & 0x3FFFFFF8);
LABEL_6:
  v227 = 0;
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = sub_1C5676CEC((_DWORD *)(v3 + 16));
  v239[0] = v6;
  v239[1] = v7;
  v274[0] = 1;
  v210 = (void **)&v275;
  for (i = 1; i != 9; i += 2)
    v274[i] = -4096;
  *(_QWORD *)v211 = v3 + 32;
  v213 = v277;
  v275 = v277;
  v276 = 0x400000000;
  v10 = sub_1C6284150((llvm::IRPosition *)v239);
  v11 = 0;
  v212 = v272;
  v271[0] = v272;
  v271[1] = (void *)0x1000000000;
  v273[1] = 0;
  v273[0] = 0;
  v272[32] = v273;
  __s2 = (char *)v270;
  v267 = (char *)v270;
  v269 = 16;
  *(_QWORD *)v220 = v10;
  v270[0] = v10;
  v270[1] = v8;
  v217 = &v250;
  v215 = (__int32 *)((char *)&v256.i32[2] + 1);
  v12 = &v262.i8[8];
  v223 = &v260;
  v224 = &v266;
  v218 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v13 = 1;
  v222 = (llvm::AbstractAttribute *)v3;
  v216 = a2;
  v219 = &v262.i8[8];
  do
  {
    v14 = &v267[16 * v13];
    v16 = *((_QWORD *)v14 - 2);
    v15 = *((_QWORD *)v14 - 1);
    v268 = v13 - 1;
    v238[0] = v16;
    v238[1] = v15;
    if ((sub_1C568F35C((uint64_t)v271, v238) & 0x100000000) == 0)
      goto LABEL_120;
    if (v11 >= 16)
      goto LABEL_431;
    ++v11;
    if (*(_BYTE *)(*(_QWORD *)v16 + 8) == 15)
    {
      v17 = llvm::Value::stripPointerCasts((llvm::Value *)v16);
      goto LABEL_13;
    }
    v21 = *(unsigned __int8 *)(v16 + 16);
    if (v21 < 0x1C)
      goto LABEL_28;
    v22 = v21 - 33;
    v23 = v22 > 0x33;
    v24 = (1 << v22) & 0x8000000000041;
    if (v23 || v24 == 0)
      goto LABEL_28;
    v26 = *(_QWORD *)(v16 - 32);
    if (!v26 || *(_BYTE *)(v26 + 16) || *(_QWORD *)(v26 + 24) != *(_QWORD *)(v16 + 72))
      goto LABEL_28;
    if ((*(_WORD *)(v26 + 18) & 1) == 0)
    {
      v69 = *(_QWORD *)(v26 + 88);
LABEL_124:
      v70 = v69;
      goto LABEL_125;
    }
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(v16 - 32));
    v69 = *(_QWORD *)(v26 + 88);
    if ((*(_WORD *)(v26 + 18) & 1) == 0)
      goto LABEL_124;
    llvm::Function::BuildLazyArguments((llvm::Function *)v26);
    v70 = *(_QWORD *)(v26 + 88);
LABEL_125:
    v71 = v70 + 40 * *(_QWORD *)(v26 + 96);
    while (1)
    {
      if (v69 == v71)
        goto LABEL_28;
      v72 = *(_QWORD *)(*(_QWORD *)(v69 + 24) + 112);
      if (v72)
      {
        v73 = *(unsigned int *)(v69 + 32);
        if ((v73 + 2) < *(_DWORD *)(v72 + 8))
        {
          v74 = *(_QWORD *)(v72 + 8 * (v73 + 2) + 40);
          if (v74)
          {
            if ((*(_BYTE *)(v74 + 17) & 0x40) != 0)
              break;
          }
        }
      }
      v69 += 40;
    }
    v17 = *(llvm::Value **)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32 * v73);
LABEL_13:
    if (v17)
      v18 = v17 == (llvm::Value *)v16;
    else
      v18 = 1;
    if (!v18)
    {
      v19 = v268;
      if (v268 >= (unint64_t)v269)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v267, (uint64_t)__s2, v268 + 1, 16);
        v19 = v268;
      }
      v20 = &v267[16 * v19];
      *(_QWORD *)v20 = v17;
      goto LABEL_119;
    }
LABEL_28:
    v27 = *(unsigned __int8 *)(v16 + 16);
    if (v27 != 85)
    {
      if (v27 == 83)
      {
        v61 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 56);
        v249 = v61;
        v250 = 0;
        sub_1C6281EE8((uint64_t)&v261, (uint64_t)v274, &v249, v217);
        v62 = v261;
        HIDWORD(v221) = v11;
        if (v262.i8[8])
        {
          *(_DWORD *)((char *)v215 + 3) = 0;
          *v215 = 0;
          v255 = v61;
          v256.i64[0] = 0;
          v256.i8[8] = 0;
          v63 = v275;
          if (v276 >= HIDWORD(v276))
          {
            v179 = v276 + 1;
            if (v275 <= &v255 && &v275[3 * v276] > &v255)
            {
              v199 = (char *)&v255 - (char *)v275;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v210, (uint64_t)v213, v179, 24);
              v63 = v275;
              v64 = (unint64_t *)((char *)v275 + v199);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v210, (uint64_t)v213, v179, 24);
              v64 = &v255;
              v63 = v275;
            }
          }
          else
          {
            v64 = &v255;
          }
          v65 = &v63[3 * v276];
          v66 = *(_OWORD *)v64;
          v65[2] = v64[2];
          *(_OWORD *)v65 = v66;
          v67 = v276;
          LODWORD(v276) = v276 + 1;
          *(_DWORD *)(v62 + 8) = v67;
        }
        else
        {
          v67 = *(_DWORD *)(v261 + 8);
        }
        v80 = v275;
        v81 = &v275[3 * v67];
        v83 = v81[1];
        v82 = (llvm::AbstractAttribute **)(v81 + 1);
        if (!v83)
          *v82 = sub_1C5677D4C((uint64_t)a2, v61, 0, (uint64_t)v222, 2, 0, 1);
        v84 = *(_DWORD *)(v16 + 20) & 0x7FFFFFF;
        if ((_DWORD)v84)
        {
          v85 = 0;
          v86 = 0;
          v87 = &v80[3 * v67 + 2];
          v88 = 8 * v84;
          do
          {
            v89 = *(_DWORD *)(v16 + 20);
            if ((v89 & 0x40000000) != 0)
              v90 = *(_QWORD *)(v16 - 8);
            else
              v90 = v16 - 32 * (v89 & 0x7FFFFFF);
            v91 = *(_QWORD *)(v90 + 32 * *(unsigned int *)(v16 + 60) + v86);
            if ((*(unsigned int (**)(llvm::AbstractAttribute *, uint64_t, _QWORD))(*(_QWORD *)*v82 + 168))(*v82, v91, *(_QWORD *)(v16 + 40)))
            {
              *(_BYTE *)v87 = 1;
              v92 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)*v82 + 4) + 24))((uint64_t)*v82 + 32);
              v227 |= v92 ^ 1;
            }
            else
            {
              v93 = *(_DWORD *)(v16 + 20);
              if ((v93 & 0x40000000) != 0)
                v94 = *(_QWORD *)(v16 - 8);
              else
                v94 = v16 - 32 * (v93 & 0x7FFFFFF);
              v95 = *(_QWORD *)(v91 + 40);
              if (v95 == v91 + 40)
              {
                v97 = 0;
              }
              else
              {
                if (v95)
                  v96 = v95 - 24;
                else
                  v96 = 0;
                if (*(unsigned __int8 *)(v96 + 16) - 29 >= 0xB)
                  v97 = 0;
                else
                  v97 = v96;
              }
              v98 = *(_QWORD *)(v94 + v85);
              v99 = v268;
              if (v268 >= (unint64_t)v269)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v267, (uint64_t)__s2, v268 + 1, 16);
                v99 = v268;
              }
              v100 = &v267[16 * v99];
              *(_QWORD *)v100 = v98;
              *((_QWORD *)v100 + 1) = v97;
              ++v268;
            }
            v86 += 8;
            v85 += 32;
          }
          while (v88 != v86);
        }
        v3 = (uint64_t)v222;
        v11 = HIDWORD(v221);
        v12 = v219;
        goto LABEL_120;
      }
      if (v27 == 21)
        v28 = (llvm::Argument *)v16;
      else
        v28 = 0;
      v249 = (uint64_t)v28;
      if (v28 && (llvm::Argument::hasPassPointeeByValueCopyAttr(v28) & 1) == 0)
      {
        v261 = (uint64_t)v12;
        v262.i64[0] = 0x300000000;
        LOBYTE(v244) = 0;
        v255 = (unint64_t)&v249;
        v256.i64[0] = (uint64_t)&v261;
        v29 = llvm::Attributor::checkForAllCallSites((uint64_t)a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C56A66CC, (uint64_t)&v255, *(_QWORD *)(v249 + 24), 1, v3, &v244);
        v30 = v29;
        v31 = 0;
        if (v29)
        {
          sub_1C612E234((unsigned int *)&v267, (_BYTE *)v261, (_BYTE *)(v261 + 16 * v262.u32[0]));
          v31 = 3;
        }
        if ((char *)v261 != v12)
          free((void *)v261);
        if ((v30 & 1) != 0)
          goto LABEL_100;
      }
      v32 = *(unsigned __int8 *)(v16 + 16);
      if (v32 != 60)
      {
LABEL_87:
        if (v32 < 0x1C)
        {
          LOBYTE(v255) = 0;
          v54 = *(_QWORD *)(v3 + 24);
          if (!v32)
            v16 |= 2uLL;
LABEL_95:
          v261 = v16;
          v262.i64[0] = v54;
          AssumedSimplified = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v261, (const llvm::AbstractAttribute *)v3, (BOOL *)&v255);
          if (v57)
          {
            v58 = AssumedSimplified;
            if (AssumedSimplified)
            {
              v101 = *(_QWORD *)(v3 + 24);
              v102 = *(unsigned __int8 *)(AssumedSimplified + 16);
              if (v102 != 21)
              {
                if (v102 < 0x1C)
                {
                  if (!*(_BYTE *)(AssumedSimplified + 16))
                    v58 = AssumedSimplified | 2;
                }
                else
                {
                  v103 = v102 - 33;
                  if (v103 <= 0x33 && ((1 << v103) & 0x8000000000041) != 0)
                  {
                    v101 = 0;
                    v58 = AssumedSimplified | 1;
                  }
                }
              }
              v119 = sub_1C5695480((uint64_t)a2, v58, v101, v3, 0);
              (*(void (**)(uint64_t *__return_ptr, llvm::AbstractAttribute *, llvm::Attributor *, unint64_t))(*(_QWORD *)v119 + 112))(&v261, v119, a2, v15);
              sub_1C628DF84((uint64_t)&v228, (unsigned int *)&v261);
              if (v263.i32[0] >= 0x41u && v262.i64[1])
                MEMORY[0x1CAA32F9C](v262.i64[1], 0x1000C8000313F17);
              if (v262.i32[0] >= 0x41u && v261)
                MEMORY[0x1CAA32F9C](v261, 0x1000C8000313F17);
              v59 = ((BOOL (*)(uint64_t))v228[2])((uint64_t)&v228);
            }
            else
            {
              v59 = 0;
            }
          }
          else
          {
            v59 = 1;
          }
LABEL_99:
          v31 = !v59;
          goto LABEL_100;
        }
        v55 = v32 - 33;
        if (v32 - 33 <= 0x33 && ((1 << v55) & 0x8000000000041) != 0)
        {
          LOBYTE(v255) = 0;
          v54 = *(_QWORD *)(v3 + 24);
          if (v55 <= 0x33 && ((1 << v55) & 0x8000000000041) != 0)
          {
            v54 = 0;
            v16 |= 1uLL;
          }
          goto LABEL_95;
        }
        v261 = (uint64_t)v12;
        v262.i64[0] = 0x400000000;
        if (v32 - 59 >= 0xFFFFFFEE)
        {
          v75 = *(_QWORD *)(v16 - 64);
          v76 = *(_QWORD *)(v16 - 32);
          LOBYTE(v240) = 0;
          v77 = *(_QWORD *)(v3 + 24);
          v78 = *(unsigned __int8 *)(v75 + 16);
          if (v78 != 21)
          {
            if (v78 < 0x1C)
            {
              if (!*(_BYTE *)(v75 + 16))
                v75 |= 2uLL;
            }
            else
            {
              v79 = v78 - 33;
              if (v79 <= 0x33 && ((1 << v79) & 0x8000000000041) != 0)
              {
                v77 = 0;
                v75 |= 1uLL;
              }
            }
          }
          v255 = v75;
          v256.i64[0] = v77;
          v113 = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v255, (const llvm::AbstractAttribute *)v3, (BOOL *)&v240);
          if (v114)
          {
            v115 = v113;
            if (!v113)
              goto LABEL_279;
            v116 = *((_QWORD *)v222 + 3);
            v117 = *(unsigned __int8 *)(v76 + 16);
            if (v117 != 21)
            {
              if (v117 < 0x1C)
              {
                if (!*(_BYTE *)(v76 + 16))
                  v76 |= 2uLL;
              }
              else
              {
                v118 = v117 - 33;
                if (v118 <= 0x33 && ((1 << v118) & 0x8000000000041) != 0)
                {
                  v116 = 0;
                  v76 |= 1uLL;
                }
              }
            }
            v255 = v76;
            v256.i64[0] = v116;
            v126 = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v255, v222, (BOOL *)&v240);
            if (v127)
            {
              v128 = v126;
              if (v126 && *(_BYTE *)(*(_QWORD *)v115 + 8) == 13 && *(_BYTE *)(*(_QWORD *)v126 + 8) == 13)
              {
                v129 = *((_QWORD *)v222 + 3);
                v130 = *(unsigned __int8 *)(v115 + 16);
                if (v130 != 21)
                {
                  if (v130 < 0x1C)
                  {
                    if (!*(_BYTE *)(v115 + 16))
                      v115 |= 2uLL;
                  }
                  else
                  {
                    v131 = v130 - 33;
                    if (v131 <= 0x33 && ((1 << v131) & 0x8000000000041) != 0)
                    {
                      v129 = 0;
                      v115 |= 1uLL;
                    }
                  }
                }
                v171 = sub_1C5695480((uint64_t)a2, v115, v129, (uint64_t)v222, 0);
                v172 = v262.u32[0];
                if (v262.u32[0] >= (unint64_t)v262.u32[1])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v261, (uint64_t)v12, v262.u32[0] + 1, 8);
                  v172 = v262.u32[0];
                }
                *(_QWORD *)(v261 + 8 * v172) = v171;
                ++v262.i32[0];
                (*(void (**)(unint64_t *__return_ptr, llvm::AbstractAttribute *, llvm::Attributor *, unint64_t))(*(_QWORD *)v171 + 112))(&v255, v171, a2, v15);
                v3 = (uint64_t)v222;
                v173 = *((_QWORD *)v222 + 3);
                v174 = *(unsigned __int8 *)(v128 + 16);
                if (v174 != 21)
                {
                  if (v174 < 0x1C)
                  {
                    if (!*(_BYTE *)(v128 + 16))
                      v128 |= 2uLL;
                  }
                  else
                  {
                    v175 = v174 - 33;
                    if (v175 <= 0x33 && ((1 << v175) & 0x8000000000041) != 0)
                    {
                      v173 = 0;
                      v128 |= 1uLL;
                    }
                  }
                }
                v176 = sub_1C5695480((uint64_t)a2, v128, v173, (uint64_t)v222, 0);
                v177 = v262.u32[0];
                if (v262.u32[0] >= (unint64_t)v262.u32[1])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v261, (uint64_t)v12, v262.u32[0] + 1, 8);
                  v177 = v262.u32[0];
                }
                *(_QWORD *)(v261 + 8 * v177) = v176;
                ++v262.i32[0];
                (*(void (**)(uint64_t *__return_ptr, llvm::AbstractAttribute *, llvm::Attributor *, unint64_t))(*(_QWORD *)v176 + 112))(&v249, v176, a2, v15);
                llvm::ConstantRange::binaryOp((llvm::ConstantRange *)&v249, (unsigned int *)&v255, *(unsigned __int8 *)(v16 + 16) - 28, (llvm::ConstantRange *)&v244);
                sub_1C628DF84((uint64_t)&v228, (unsigned int *)&v244);
LABEL_338:
                v178 = ((BOOL (*)(uint64_t))v228[2])((uint64_t)&v228);
                if (v247 >= 0x41 && v246)
                  MEMORY[0x1CAA32F9C](v246, 0x1000C8000313F17);
                if (v245 >= 0x41 && v244)
                  MEMORY[0x1CAA32F9C](v244, 0x1000C8000313F17);
                if (v252 >= 0x41 && v251)
                  MEMORY[0x1CAA32F9C](v251, 0x1000C8000313F17);
                if (v250 >= 0x41 && v249)
                  MEMORY[0x1CAA32F9C](v249, 0x1000C8000313F17);
                if (v257.i32[0] >= 0x41u && v256.i64[1])
                  MEMORY[0x1CAA32F9C](v256.i64[1], 0x1000C8000313F17);
                if (v256.i32[0] >= 0x41u && v255)
                  MEMORY[0x1CAA32F9C](v255, 0x1000C8000313F17);
                if (!v178)
                {
LABEL_345:
                  v59 = 0;
                  v12 = v219;
LABEL_280:
                  if ((char *)v261 != v12)
                    free((void *)v261);
                  goto LABEL_99;
                }
                goto LABEL_235;
              }
              goto LABEL_279;
            }
          }
        }
        else
        {
          if (v32 - 83 < 0xFFFFFFFE)
          {
            if (v32 - 79 < 0xFFFFFFF3)
            {
              ((void (*)(uint64_t))v228[5])((uint64_t)&v228);
LABEL_220:
              v59 = 0;
              goto LABEL_280;
            }
            v109 = *(_QWORD *)(v16 - 32);
            LOBYTE(v244) = 0;
            v110 = *(_QWORD *)(v3 + 24);
            v111 = *(unsigned __int8 *)(v109 + 16);
            if (v111 != 21)
            {
              if (v111 < 0x1C)
              {
                if (!*(_BYTE *)(v109 + 16))
                  v109 |= 2uLL;
              }
              else
              {
                v112 = v111 - 33;
                if (v112 <= 0x33 && ((1 << v112) & 0x8000000000041) != 0)
                {
                  v110 = 0;
                  v109 |= 1uLL;
                }
              }
            }
            v255 = v109;
            v256.i64[0] = v110;
            v132 = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v255, (const llvm::AbstractAttribute *)v3, (BOOL *)&v244);
            if (v133)
            {
              v134 = v132;
              if (!v132 || *(_BYTE *)(*(_QWORD *)v132 + 8) != 13)
                goto LABEL_220;
              v156 = *(_QWORD *)(v3 + 24);
              v157 = *(unsigned __int8 *)(v132 + 16);
              if (v157 != 21)
              {
                if (v157 < 0x1C)
                {
                  if (!*(_BYTE *)(v132 + 16))
                    v134 = v132 | 2;
                }
                else
                {
                  v158 = v157 - 33;
                  if (v158 <= 0x33 && ((1 << v158) & 0x8000000000041) != 0)
                  {
                    v156 = 0;
                    v134 = v132 | 1;
                  }
                }
              }
              v168 = sub_1C5695480((uint64_t)a2, v134, v156, v3, 0);
              v169 = v262.u32[0];
              if (v262.u32[0] >= (unint64_t)v262.u32[1])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v261, (uint64_t)v12, v262.u32[0] + 1, 8);
                v169 = v262.u32[0];
              }
              *(_QWORD *)(v261 + 8 * v169) = v168;
              ++v262.i32[0];
              v250 = *((_DWORD *)v168 + 14);
              if (v250 > 0x40)
              {
                v249 = operator new[]();
                memcpy((void *)v249, *((const void **)v168 + 6), (((unint64_t)v250 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v249 = *((_QWORD *)v168 + 6);
              }
              v252 = *((_DWORD *)v168 + 18);
              if (v252 > 0x40)
              {
                v251 = operator new[]();
                memcpy((void *)v251, *((const void **)v168 + 8), (((unint64_t)v252 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v251 = *((_QWORD *)v168 + 8);
              }
              v170 = *(unsigned __int8 *)(v16 + 16) - 28;
              (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
              llvm::ConstantRange::castOp((uint64_t)&v249, v170);
              sub_1C628DF84((uint64_t)&v228, (unsigned int *)&v255);
              if (v257.i32[0] >= 0x41u && v256.i64[1])
                MEMORY[0x1CAA32F9C](v256.i64[1], 0x1000C8000313F17);
              if (v256.i32[0] >= 0x41u && v255)
                MEMORY[0x1CAA32F9C](v255, 0x1000C8000313F17);
              if (v252 >= 0x41 && v251)
                MEMORY[0x1CAA32F9C](v251, 0x1000C8000313F17);
              if (v250 >= 0x41 && v249)
                MEMORY[0x1CAA32F9C](v249, 0x1000C8000313F17);
              if (!((BOOL (*)(uint64_t))v228[2])((uint64_t)&v228))
                goto LABEL_345;
            }
            goto LABEL_235;
          }
          v104 = *(_QWORD *)(v16 - 64);
          v105 = *(_QWORD *)(v16 - 32);
          v248 = 0;
          v106 = *(_QWORD *)(v3 + 24);
          v107 = *(unsigned __int8 *)(v104 + 16);
          if (v107 != 21)
          {
            if (v107 < 0x1C)
            {
              if (!*(_BYTE *)(v104 + 16))
                v104 |= 2uLL;
            }
            else
            {
              v108 = v107 - 33;
              if (v108 <= 0x33 && ((1 << v108) & 0x8000000000041) != 0)
              {
                v106 = 0;
                v104 |= 1uLL;
              }
            }
          }
          v255 = v104;
          v256.i64[0] = v106;
          v120 = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v255, (const llvm::AbstractAttribute *)v3, &v248);
          if (v121)
          {
            v122 = v120;
            if (!v120)
              goto LABEL_279;
            v123 = *((_QWORD *)v222 + 3);
            v124 = *(unsigned __int8 *)(v105 + 16);
            if (v124 != 21)
            {
              if (v124 < 0x1C)
              {
                if (!*(_BYTE *)(v105 + 16))
                  v105 |= 2uLL;
              }
              else
              {
                v125 = v124 - 33;
                if (v125 <= 0x33 && ((1 << v125) & 0x8000000000041) != 0)
                {
                  v123 = 0;
                  v105 |= 1uLL;
                }
              }
            }
            v255 = v105;
            v256.i64[0] = v123;
            v135 = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v255, v222, &v248);
            if (v136)
            {
              v137 = v135;
              if (v135 && *(_BYTE *)(*(_QWORD *)v122 + 8) == 13 && *(_BYTE *)(*(_QWORD *)v135 + 8) == 13)
              {
                v138 = *((_QWORD *)v222 + 3);
                v139 = *(unsigned __int8 *)(v122 + 16);
                if (v139 != 21)
                {
                  if (v139 < 0x1C)
                  {
                    if (!*(_BYTE *)(v122 + 16))
                      v122 |= 2uLL;
                  }
                  else
                  {
                    v140 = v139 - 33;
                    if (v140 <= 0x33 && ((1 << v140) & 0x8000000000041) != 0)
                    {
                      v138 = 0;
                      v122 |= 1uLL;
                    }
                  }
                }
                v159 = sub_1C5695480((uint64_t)a2, v122, v138, (uint64_t)v222, 0);
                v160 = v262.u32[0];
                if (v262.u32[0] >= (unint64_t)v262.u32[1])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v261, (uint64_t)v12, v262.u32[0] + 1, 8);
                  v160 = v262.u32[0];
                }
                *(_QWORD *)(v261 + 8 * v160) = v159;
                ++v262.i32[0];
                v161 = *((_QWORD *)v222 + 3);
                v162 = *(unsigned __int8 *)(v137 + 16);
                if (v162 != 21)
                {
                  if (v162 < 0x1C)
                  {
                    if (!*(_BYTE *)(v137 + 16))
                      v137 |= 2uLL;
                  }
                  else
                  {
                    v163 = v162 - 33;
                    if (v163 <= 0x33 && ((1 << v163) & 0x8000000000041) != 0)
                    {
                      v161 = 0;
                      v137 |= 1uLL;
                    }
                  }
                }
                v164 = sub_1C5695480((uint64_t)a2, v137, v161, (uint64_t)v222, 0);
                v165 = v262.u32[0];
                if (v262.u32[0] >= (unint64_t)v262.u32[1])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v261, (uint64_t)v12, v262.u32[0] + 1, 8);
                  v165 = v262.u32[0];
                }
                *(_QWORD *)(v261 + 8 * v165) = v164;
                ++v262.i32[0];
                (*(void (**)(unint64_t *__return_ptr, llvm::AbstractAttribute *, llvm::Attributor *, unint64_t))(*(_QWORD *)v159 + 112))(&v255, v159, a2, v15);
                (*(void (**)(uint64_t *__return_ptr, llvm::AbstractAttribute *, llvm::Attributor *, unint64_t))(*(_QWORD *)v164 + 112))(&v249, v164, a2, v15);
                v166 = v256.u32[0];
                if (v256.i32[0] >= 0x41u)
                {
                  v180 = v255;
                  v3 = (uint64_t)v222;
                  if (!memcmp((const void *)v255, (const void *)v256.i64[1], (((unint64_t)v256.u32[0] + 63) >> 3) & 0x3FFFFFF8))
                  {
                    v181 = 0;
                    v182 = (unint64_t)(v166 + 63) >> 6;
                    do
                    {
                      v23 = v182-- < 1;
                      if (v23)
                        break;
                      v183 = *(_QWORD *)(v180 + 8 * v182);
                      v181 += __clz(v183);
                    }
                    while (!v183);
                    v184 = v166 | 0xFFFFFFC0;
                    if ((v166 & 0x3F) == 0)
                      v184 = 0;
                    v3 = (uint64_t)v222;
                    a2 = v216;
                    if (v181 + v184 == (_DWORD)v166)
                      goto LABEL_304;
                  }
                }
                else
                {
                  v3 = (uint64_t)v222;
                  if (!(v256.i64[1] | v255))
                    goto LABEL_304;
                }
                v167 = v250;
                if (v250 >= 0x41)
                {
                  v185 = v249;
                  if (!memcmp((const void *)v249, (const void *)v251, (((unint64_t)v250 + 63) >> 3) & 0x3FFFFFF8))
                  {
                    v190 = 0;
                    v191 = (unint64_t)(v167 + 63) >> 6;
                    do
                    {
                      v23 = v191-- < 1;
                      if (v23)
                        break;
                      v192 = *(_QWORD *)(v185 + 8 * v191);
                      v190 += __clz(v192);
                    }
                    while (!v192);
                    v193 = v167 | 0xFFFFFFC0;
                    if ((v167 & 0x3F) == 0)
                      v193 = 0;
                    v3 = (uint64_t)v222;
                    a2 = v216;
                    if (v190 + v193 == (_DWORD)v167)
                      goto LABEL_304;
                  }
                }
                else if (!(v251 | v249))
                {
LABEL_304:
                  if (v252 >= 0x41 && v251)
                    MEMORY[0x1CAA32F9C](v251, 0x1000C8000313F17);
                  if (v250 >= 0x41 && v249)
                    MEMORY[0x1CAA32F9C](v249, 0x1000C8000313F17);
                  if (v257.i32[0] >= 0x41u && v256.i64[1])
                    MEMORY[0x1CAA32F9C](v256.i64[1], 0x1000C8000313F17);
                  if (v256.i32[0] >= 0x41u && v255)
                    MEMORY[0x1CAA32F9C](v255, 0x1000C8000313F17);
                  goto LABEL_235;
                }
                llvm::ConstantRange::makeAllowedICmpRegion(*(_WORD *)(v16 + 18) & 0x3F, (uint64_t)&v249, (uint64_t)&v244, v208, __n, v210, v211[0], v212, (int)v213, __s2, (int)v215, v216, (int)v217, v218.i64[0], v218.i32[2], (uint64_t)v219, v220[0], v221, (int)v222,
                  (uint64_t)v223,
                  (int)v224,
                  __s1,
                  (int)v226);
                llvm::ConstantRange::intersectWith((uint64_t)&v244, (llvm::ConstantRange *)&v255, 0, (uint64_t)&v240);
                v186 = v241;
                if (v241 > 0x40)
                {
                  v194 = v240;
                  v187 = v242;
                  if (!memcmp(v240, (const void *)v242, (((unint64_t)v241 + 63) >> 3) & 0x3FFFFFF8))
                  {
                    v195 = 0;
                    v196 = (unint64_t)(v186 + 63) >> 6;
                    do
                    {
                      v23 = v196-- < 1;
                      if (v23)
                        break;
                      v197 = v194[v196];
                      v195 += __clz(v197);
                    }
                    while (!v197);
                    v198 = v186 | 0xFFFFFFC0;
                    if ((v186 & 0x3F) == 0)
                      v198 = 0;
                    v188 = v195 + v198 == v186;
                  }
                  else
                  {
                    v188 = 0;
                  }
                  v3 = (uint64_t)v222;
                  a2 = v216;
                }
                else
                {
                  v187 = v242;
                  v188 = (v242 | (unint64_t)v240) == 0;
                }
                if (v243 >= 0x41 && v187 != 0)
                {
                  MEMORY[0x1CAA32F9C](v187, 0x1000C8000313F17);
                  LODWORD(v186) = v241;
                }
                if (v186 >= 0x41 && v240)
                  MEMORY[0x1CAA32F9C](v240, 0x1000C8000313F17);
                if (llvm::ConstantRange::icmp((int)&v255, *(_WORD *)(v16 + 18) & 0x3F, (int)&v249))
                {
                  v241 = 1;
                  v240 = (void *)1;
                  v254 = 1;
                  v253 = 1;
                }
                else
                {
                  if (!v188)
                  {
                    v241 = 1;
                    v240 = (void *)1;
                    v243 = 1;
                    v242 = 1;
LABEL_376:
                    sub_1C628DF84((uint64_t)&v228, (unsigned int *)&v240);
                    if (v243 >= 0x41 && v242)
                      MEMORY[0x1CAA32F9C](v242, 0x1000C8000313F17);
                    if (v241 >= 0x41 && v240)
                      MEMORY[0x1CAA32F9C](v240, 0x1000C8000313F17);
                    goto LABEL_338;
                  }
                  v241 = 1;
                  v240 = 0;
                  v254 = 1;
                  v253 = 0;
                }
                llvm::APInt::operator+=((uint64_t)&v253, 1uLL);
                v243 = v254;
                v242 = v253;
                goto LABEL_376;
              }
LABEL_279:
              v59 = 0;
              v3 = (uint64_t)v222;
              goto LABEL_280;
            }
          }
        }
        v3 = (uint64_t)v222;
LABEL_235:
        if (!v262.i32[0])
        {
LABEL_278:
          v59 = ((BOOL (*)(uint64_t))v228[2])((uint64_t)&v228);
          a2 = v216;
          v12 = v219;
          goto LABEL_280;
        }
        v141 = (_QWORD *)v261;
        v142 = 8 * v262.u32[0];
        HIDWORD(v221) = v11;
        while (*v141 != v3)
        {
LABEL_263:
          ++v141;
          v142 -= 8;
          if (!v142)
            goto LABEL_278;
        }
        v143 = v231;
        if (v231 > 0x40)
        {
          v154 = (((unint64_t)v231 + 63) >> 3) & 0x3FFFFFF8;
          v226 = (void *)operator new[]();
          memcpy(v226, __src, v154);
        }
        else
        {
          v226 = __src;
        }
        v144 = v233;
        if (v233 > 0x40)
        {
          v155 = (((unint64_t)v233 + 63) >> 3) & 0x3FFFFFF8;
          __s1 = (void *)operator new[]();
          memcpy(__s1, v232, v155);
        }
        else
        {
          __s1 = v232;
        }
        v145 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
        v146 = v145;
        v147 = *(unsigned int *)(v145 + 24);
        if (v147 > 0x40)
        {
          v148 = (void *)operator new[]();
          memcpy(v148, *(const void **)(v146 + 16), ((unint64_t)(v147 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v148 = *(void **)(v145 + 16);
        }
        v149 = *(unsigned int *)(v146 + 40);
        if (v149 > 0x40)
        {
          __n = ((unint64_t)(v149 + 63) >> 3) & 0x3FFFFFF8;
          v150 = (void *)operator new[]();
          memcpy(v150, *(const void **)(v146 + 32), __n);
        }
        else
        {
          v150 = *(void **)(v146 + 32);
        }
        if (v143 > 0x40)
        {
          if (!memcmp(v226, v148, ((unint64_t)(v143 + 63) >> 3) & 0x3FFFFFF8))
            goto LABEL_248;
        }
        else if (v226 == v148)
        {
LABEL_248:
          if (v144 > 0x40)
            v151 = memcmp(__s1, v150, ((unint64_t)(v144 + 63) >> 3) & 0x3FFFFFF8) == 0;
          else
            v151 = __s1 == v150;
          v152 = v151;
          goto LABEL_253;
        }
        v152 = 0;
LABEL_253:
        if (v149 >= 0x41 && v150 != 0)
          MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
        if (v147 >= 0x41 && v148)
          MEMORY[0x1CAA32F9C](v148, 0x1000C8000313F17);
        v3 = (uint64_t)v222;
        if (v144 >= 0x41 && __s1)
          MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
        v11 = HIDWORD(v221);
        if (v143 >= 0x41 && v226)
          MEMORY[0x1CAA32F9C](v226, 0x1000C8000313F17);
        if ((v152 & 1) == 0)
          ((void (*)(uint64_t))v228[5])((uint64_t)&v228);
        goto LABEL_263;
      }
      LOBYTE(v249) = 0;
      if (*(_QWORD *)(v16 - 32) == *(_QWORD *)v220)
      {
        v32 = 60;
        goto LABEL_87;
      }
      v261 = 1;
      v262 = v218;
      v263 = v218;
      v264 = v224;
      v265 = 0x400000000;
      v255 = 1;
      v256 = v218;
      v257 = v218;
      v258 = v223;
      v259 = 0x400000000;
      LODWORD(v33) = 1;
      if (llvm::AA::getPotentiallyLoadedValues(a2, v16, &v261, &v255, (const llvm::AbstractAttribute *)v3, (BOOL *)&v249, 1))
      {
        if (!(_DWORD)v265)
        {
LABEL_76:
          LODWORD(v33) = 0;
LABEL_77:
          v31 = 3;
LABEL_78:
          if (v258 != v223)
            free(v258);
          if ((v255 & 1) == 0)
            MEMORY[0x1CAA32FB4](v256.i64[0], 8);
          if (v264 != v224)
            free(v264);
          if ((v261 & 1) != 0)
          {
            if ((_DWORD)v33)
            {
LABEL_86:
              v32 = *(unsigned __int8 *)(v16 + 16);
              v12 = v219;
              goto LABEL_87;
            }
          }
          else
          {
            MEMORY[0x1CAA32FB4](v262.i64[0], 8);
            if ((_DWORD)v33)
              goto LABEL_86;
          }
          v12 = v219;
LABEL_100:
          if (v31 != 3 && v31 != 0)
          {
LABEL_431:
            v200 = 0;
            goto LABEL_432;
          }
          goto LABEL_120;
        }
        v34 = v264;
        v35 = 8 * v265;
        while (1)
        {
          LODWORD(v33) = 1;
          if (!llvm::AA::isDynamicallyUnique(a2, (llvm::Attributor *)v3, *v34, (const llvm::Value *)1))
            break;
          ++v34;
          v35 -= 8;
          if (!v35)
          {
            if (!(_DWORD)v265)
              goto LABEL_76;
            v36 = v264;
            v37 = v268;
            v33 = 8 * v265;
            do
            {
              v38 = *v36;
              if (v37 >= v269)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v267, (uint64_t)__s2, v37 + 1, 16);
                v37 = v268;
              }
              v39 = &v267[16 * v37];
              *(_QWORD *)v39 = v38;
              *((_QWORD *)v39 + 1) = v15;
              v37 = ++v268;
              ++v36;
              v33 -= 8;
            }
            while (v33);
            goto LABEL_77;
          }
        }
      }
      v31 = 0;
      goto LABEL_78;
    }
    v40 = *(_QWORD *)(v16 - 96);
    v41 = *(unsigned __int8 *)(v40 + 16);
    if (v41 != 21)
    {
      if (v41 < 0x1C)
      {
        if (!*(_BYTE *)(v40 + 16))
          v40 |= 2uLL;
      }
      else
      {
        v42 = v41 - 33;
        v23 = v42 > 0x33;
        v43 = (1 << v42) & 0x8000000000041;
        if (!v23 && v43 != 0)
          v40 |= 1uLL;
      }
    }
    v261 = v40;
    v262.i64[0] = 0;
    AssumedConstant = llvm::Attributor::getAssumedConstant(a2, (const llvm::IRPosition *)&v261, (const llvm::AbstractAttribute *)v3, &v227);
    if (v46)
    {
      if (!AssumedConstant)
        goto LABEL_69;
      v47 = *((unsigned __int8 *)AssumedConstant + 16);
      if ((v47 - 11) < 2)
        goto LABEL_120;
      if (v47 == 16)
      {
        v48 = *((_DWORD *)AssumedConstant + 8);
        if (v48 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AssumedConstant + 24)) == v48)
            goto LABEL_114;
LABEL_68:
          v49 = *(_QWORD *)(v16 - 64);
        }
        else
        {
          if (*((_QWORD *)AssumedConstant + 3))
            goto LABEL_68;
LABEL_114:
          v49 = *(_QWORD *)(v16 - 32);
        }
        v68 = v268;
        if (v268 >= (unint64_t)v269)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v267, (uint64_t)__s2, v268 + 1, 16);
          v68 = v268;
        }
        v20 = &v267[16 * v68];
      }
      else
      {
LABEL_69:
        v50 = *(_QWORD *)(v16 - 64);
        v51 = v268;
        if (v268 >= (unint64_t)v269)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v267, (uint64_t)__s2, v268 + 1, 16);
          v51 = v268;
        }
        v52 = &v267[16 * v51];
        *(_QWORD *)v52 = v50;
        *((_QWORD *)v52 + 1) = v15;
        v53 = v268 + 1;
        v268 = v53;
        v49 = *(_QWORD *)(v16 - 32);
        if (v53 >= v269)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v267, (uint64_t)__s2, v53 + 1, 16);
          LODWORD(v53) = v268;
        }
        v20 = &v267[16 * v53];
      }
      *(_QWORD *)v20 = v49;
LABEL_119:
      *((_QWORD *)v20 + 1) = v15;
      ++v268;
    }
LABEL_120:
    v13 = v268;
  }
  while (v268);
  if ((_DWORD)v276)
  {
    v203 = 24 * v276;
    v204 = v275 + 2;
    do
    {
      if (*v204)
        llvm::Attributor::recordDependence((uint64_t)a2, *((_QWORD *)v204 - 1), v3, 1);
      v204 += 24;
      v203 -= 24;
    }
    while (v203);
  }
  v200 = 1;
LABEL_432:
  if (v267 != __s2)
    free(v267);
  sub_1C6143384(v273[0]);
  if (v271[0] != v212)
    free(v271[0]);
  if (v275 != v213)
    free(v275);
  if ((v274[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v274[1], 8);
  if (v200)
  {
    v205 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    if (sub_1C628DFEC(v205, (uint64_t)&v228))
    {
      v201 = 1;
      goto LABEL_442;
    }
    v206 = *(_DWORD *)(v3 + 112);
    *(_DWORD *)(v3 + 112) = v206 + 1;
    if (v206 < 5)
    {
      v201 = 0;
      goto LABEL_442;
    }
  }
  v201 = (*(uint64_t (**)(int *))(**(_QWORD **)v211 + 40))(*(int **)v211);
LABEL_442:
  v228 = &off_1E8176448;
  if (v237 >= 0x41 && v236)
    MEMORY[0x1CAA32F9C](v236, 0x1000C8000313F17);
  if (v235 >= 0x41 && v234)
    MEMORY[0x1CAA32F9C](v234, 0x1000C8000313F17);
  if (v233 >= 0x41 && v232)
    MEMORY[0x1CAA32F9C](v232, 0x1000C8000313F17);
  if (v231 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v201;
}

uint64_t sub_1C56A55A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const llvm::Instruction *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  size_t v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;

  result = sub_1C56A679C(a1, a2, a3);
  if ((result & 1) != 0)
  {
    sub_1C56A6488((llvm::APInt *)&v31, a1, *(_QWORD *)(a2 + 88), a3);
    sub_1C56A6008((llvm::APInt *)&v27, a1, a2, (uint64_t)a3);
    v9 = *(unsigned int *)(a1 + 56);
    v20 = v9;
    if (v9 > 0x40)
    {
      v13 = ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8;
      v19 = (void *)operator new[]();
      memcpy(v19, *(const void **)(a1 + 48), v13);
    }
    else
    {
      v19 = *(void **)(a1 + 48);
    }
    v10 = *(unsigned int *)(a1 + 72);
    v22 = v10;
    if (v10 > 0x40)
    {
      v14 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
      v21 = (void *)operator new[]();
      memcpy(v21, *(const void **)(a1 + 64), v14);
    }
    else
    {
      v21 = *(void **)(a1 + 64);
    }
    llvm::ConstantRange::intersectWith((uint64_t)&v19, (llvm::ConstantRange *)&v27, 0, (uint64_t)&v23);
    result = llvm::ConstantRange::intersectWith((uint64_t)&v23, (llvm::ConstantRange *)&v31, 0, a4);
    if (v26 >= 0x41)
    {
      result = v25;
      if (v25)
        result = MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
    }
    if (v24 >= 0x41)
    {
      result = v23;
      if (v23)
        result = MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
    }
    if (v22 >= 0x41)
    {
      result = (uint64_t)v21;
      if (v21)
        result = MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    }
    if (v20 >= 0x41)
    {
      result = (uint64_t)v19;
      if (v19)
        result = MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
    }
    if (v30 >= 0x41)
    {
      result = v29;
      if (v29)
        result = MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    }
    if (v28 >= 0x41)
    {
      result = v27;
      if (v27)
        result = MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
    }
    if (v34 >= 0x41)
    {
      result = v33;
      if (v33)
        result = MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    }
    if (v32 >= 0x41)
    {
      result = v31;
      if (v31)
        return MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
    }
  }
  else
  {
    v11 = *(unsigned int *)(a1 + 56);
    *(_DWORD *)(a4 + 8) = v11;
    if (v11 > 0x40)
    {
      v15 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
      v16 = (void *)operator new[]();
      *(_QWORD *)a4 = v16;
      result = (uint64_t)memcpy(v16, *(const void **)(a1 + 48), v15);
    }
    else
    {
      *(_QWORD *)a4 = *(_QWORD *)(a1 + 48);
    }
    v12 = *(unsigned int *)(a1 + 72);
    *(_DWORD *)(a4 + 24) = v12;
    if (v12 > 0x40)
    {
      v17 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
      v18 = (void *)operator new[]();
      *(_QWORD *)(a4 + 16) = v18;
      return (uint64_t)memcpy(v18, *(const void **)(a1 + 64), v17);
    }
    else
    {
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 64);
    }
  }
  return result;
}

uint64_t sub_1C56A58E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const llvm::Instruction *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  size_t v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;

  result = sub_1C56A679C(a1, a2, a3);
  if ((result & 1) != 0)
  {
    sub_1C56A6488((llvm::APInt *)&v31, a1, *(_QWORD *)(a2 + 88), a3);
    sub_1C56A6008((llvm::APInt *)&v27, a1, a2, (uint64_t)a3);
    v9 = *(unsigned int *)(a1 + 88);
    v20 = v9;
    if (v9 > 0x40)
    {
      v13 = ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8;
      v19 = (void *)operator new[]();
      memcpy(v19, *(const void **)(a1 + 80), v13);
    }
    else
    {
      v19 = *(void **)(a1 + 80);
    }
    v10 = *(unsigned int *)(a1 + 104);
    v22 = v10;
    if (v10 > 0x40)
    {
      v14 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
      v21 = (void *)operator new[]();
      memcpy(v21, *(const void **)(a1 + 96), v14);
    }
    else
    {
      v21 = *(void **)(a1 + 96);
    }
    llvm::ConstantRange::intersectWith((uint64_t)&v19, (llvm::ConstantRange *)&v27, 0, (uint64_t)&v23);
    result = llvm::ConstantRange::intersectWith((uint64_t)&v23, (llvm::ConstantRange *)&v31, 0, a4);
    if (v26 >= 0x41)
    {
      result = v25;
      if (v25)
        result = MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
    }
    if (v24 >= 0x41)
    {
      result = v23;
      if (v23)
        result = MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
    }
    if (v22 >= 0x41)
    {
      result = (uint64_t)v21;
      if (v21)
        result = MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    }
    if (v20 >= 0x41)
    {
      result = (uint64_t)v19;
      if (v19)
        result = MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
    }
    if (v30 >= 0x41)
    {
      result = v29;
      if (v29)
        result = MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    }
    if (v28 >= 0x41)
    {
      result = v27;
      if (v27)
        result = MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
    }
    if (v34 >= 0x41)
    {
      result = v33;
      if (v33)
        result = MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    }
    if (v32 >= 0x41)
    {
      result = v31;
      if (v31)
        return MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
    }
  }
  else
  {
    v11 = *(unsigned int *)(a1 + 88);
    *(_DWORD *)(a4 + 8) = v11;
    if (v11 > 0x40)
    {
      v15 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
      v16 = (void *)operator new[]();
      *(_QWORD *)a4 = v16;
      result = (uint64_t)memcpy(v16, *(const void **)(a1 + 80), v15);
    }
    else
    {
      *(_QWORD *)a4 = *(_QWORD *)(a1 + 80);
    }
    v12 = *(unsigned int *)(a1 + 104);
    *(_DWORD *)(a4 + 24) = v12;
    if (v12 > 0x40)
    {
      v17 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
      v18 = (void *)operator new[]();
      *(_QWORD *)(a4 + 16) = v18;
      return (uint64_t)memcpy(v18, *(const void **)(a1 + 96), v17);
    }
    else
    {
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 96);
    }
  }
  return result;
}

uint64_t *sub_1C56A5C20(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E8176448;
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 40) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  }
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A5D0C(uint64_t a1)
{
  sub_1C56A26D0(a1 - 32);
}

uint64_t sub_1C56A5D14(uint64_t a1, llvm::IRPosition *a2)
{
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  void *v9;
  unsigned int v10;
  void *v11;

  v4 = *(unsigned int *)(sub_1C62846C0(a2) + 8);
  v5 = *(_OWORD *)a2;
  v6 = v4 >> 8;
  *(_QWORD *)a1 = &unk_1E8172918;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = &off_1E8176448;
  *(_DWORD *)(a1 + 40) = v4 >> 8;
  *(_DWORD *)(a1 + 56) = v4 >> 8;
  if (v4 >> 8 >= 0x41)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)(a1 + 48), 0, 0);
    v10 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)(a1 + 72) = v10;
    if (v10 >= 0x41)
    {
      v11 = (void *)operator new[]();
      *(_QWORD *)(a1 + 64) = v11;
      memcpy(v11, *(const void **)(a1 + 48), (((unint64_t)*(unsigned int *)(a1 + 72) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 48);
    }
    *(_DWORD *)(a1 + 88) = v6;
    llvm::APInt::initSlowCase((llvm::APInt *)(a1 + 80), -1, 1);
    LODWORD(v6) = *(_DWORD *)(a1 + 88);
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 88) = v6;
    if (v4 <= 0xFF)
      v7 = 0;
    else
      v7 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v4);
    *(_QWORD *)(a1 + 80) = v7;
  }
  *(_DWORD *)(a1 + 104) = v6;
  if (v6 > 0x40)
  {
    v9 = (void *)operator new[]();
    *(_QWORD *)(a1 + 96) = v9;
    memcpy(v9, *(const void **)(a1 + 80), (((unint64_t)*(unsigned int *)(a1 + 104) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 80);
  }
  *(_QWORD *)a1 = off_1E8176378;
  *(_QWORD *)(a1 + 32) = &unk_1E8176408;
  return a1;
}

unint64_t *sub_1C56A5E98(uint64_t a1, uint64_t *a2)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t *result;
  unint64_t v7;
  llvm::Instruction *v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t *v11;
  unsigned int v12;

  v4 = (_DWORD *)(a1 + 16);
  v9 = 0;
  v5 = a1 + 32;
  if (sub_1C62883D4(a2, (uint64_t *)(a1 + 16), &v9))
    return (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(a1 + 32);
  v7 = sub_1C5676CEC(v4);
  sub_1C56A6008((llvm::APInt *)&v9, a1, (uint64_t)a2, v7);
  sub_1C628DF00(a1 + 32, (llvm::ConstantRange *)&v9);
  if (v12 >= 0x41 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  if (v10 >= 0x41 && v9)
    MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
  v8 = (llvm::Instruction *)sub_1C5676CEC(v4);
  sub_1C56A6488((llvm::APInt *)&v9, a1, a2[11], v8);
  result = (unint64_t *)sub_1C628DF00(a1 + 32, (llvm::ConstantRange *)&v9);
  if (v12 >= 0x41)
  {
    result = v11;
    if (v11)
      result = (unint64_t *)MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  }
  if (v10 >= 0x41)
  {
    result = v9;
    if (v9)
      return (unint64_t *)MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
  }
  return result;
}

void sub_1C56A6008(llvm::APInt *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  llvm::IRPosition *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t ResultImpl;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  const llvm::SCEV *SCEVIter;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  const llvm::Loop *v52;
  uint64_t RangeRef;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  const void *v61;
  size_t v62;
  size_t v63;
  unint64_t v64;

  v9 = (llvm::IRPosition *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  v10 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  v11 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v8 & 3) == 3)
    v11 = *(_QWORD *)(v10 + 24);
  v12 = *(unsigned __int8 *)(v11 + 16);
  if (*(_BYTE *)(v11 + 16))
  {
    if (v12 == 21)
    {
      v13 = (_QWORD *)(v11 + 24);
    }
    else
    {
      if (v12 < 0x1C)
        goto LABEL_53;
      v13 = (_QWORD *)(*(_QWORD *)(v11 + 40) + 56);
    }
    if (!*v13)
      goto LABEL_53;
  }
  v14 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_QWORD *)(a2 + 16) & 3) == 3)
    v14 = *(_QWORD *)(v10 + 24);
  if (*(_BYTE *)(v14 + 16))
  {
    if (*(_BYTE *)(v14 + 16) == 21)
      v15 = (unint64_t *)(v14 + 24);
    else
      v15 = (unint64_t *)(*(_QWORD *)(v14 + 40) + 56);
    v14 = *v15;
  }
  v16 = **(_QWORD **)(*(_QWORD *)(a3 + 88) + 440);
  if (v16)
    v17 = *(_QWORD *)(v14 + 40) == 0;
  else
    v17 = 1;
  if (v17)
  {
    v18 = 0;
  }
  else
  {
    v18 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v16, &llvm::ScalarEvolutionAnalysis::Key, v14) + 8;
    v8 = *(_QWORD *)v9;
    v10 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFFCLL;
  }
  v19 = v10;
  if ((v8 & 3) == 3)
    v19 = *(_QWORD *)(v10 + 24);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (*(_BYTE *)(v19 + 16))
  {
    if (v20 == 21)
    {
      v21 = (_QWORD *)(v19 + 24);
    }
    else
    {
      if (v20 < 0x1C)
        goto LABEL_53;
      v21 = (_QWORD *)(*(_QWORD *)(v19 + 40) + 56);
    }
    if (!*v21)
      goto LABEL_53;
  }
  v22 = *(_QWORD *)(a3 + 88);
  v23 = v10;
  if ((v8 & 3) == 3)
    v23 = *(_QWORD *)(v10 + 24);
  if (*(_BYTE *)(v23 + 16))
  {
    if (*(_BYTE *)(v23 + 16) == 21)
      v24 = (uint64_t *)(v23 + 24);
    else
      v24 = (uint64_t *)(*(_QWORD *)(v23 + 40) + 56);
    v23 = *v24;
  }
  v25 = **(_QWORD **)(v22 + 440);
  if (v25)
    v26 = *(_QWORD *)(v23 + 40) == 0;
  else
    v26 = 1;
  if (v26)
  {
    v27 = 0;
  }
  else
  {
    v27 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v25, &llvm::ScalarEvolutionAnalysis::Key, v23) + 8;
    v22 = *(_QWORD *)(a3 + 88);
    v8 = *(_QWORD *)v9;
    v10 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFFCLL;
  }
  if ((~(_BYTE)v8 & 3) == 0)
    v10 = *(_QWORD *)(v10 + 24);
  if (*(_BYTE *)(v10 + 16))
  {
    if (*(_BYTE *)(v10 + 16) == 21)
      v28 = (unint64_t *)(v10 + 24);
    else
      v28 = (unint64_t *)(*(_QWORD *)(v10 + 40) + 56);
    v10 = *v28;
  }
  v29 = **(_QWORD **)(v22 + 440);
  if (!v29)
    goto LABEL_53;
  if (!*(_QWORD *)(v10 + 40))
    goto LABEL_53;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(v29, &llvm::LoopAnalysis::Key, v10);
  if (!v27)
    goto LABEL_53;
  v34 = ResultImpl;
  v35 = sub_1C6284150(v9);
  v36 = *(_QWORD *)(v27 + 104);
  v37 = *(_DWORD *)(v27 + 120);
  if (!v37)
    goto LABEL_65;
  v38 = ((v35 >> 4) ^ (v35 >> 9)) & (v37 - 1);
  v39 = v36 + 48 * v38;
  v40 = *(_QWORD *)(v39 + 24);
  if (v40 != v35)
  {
    v41 = 1;
    while (v40 != -4096)
    {
      v42 = v38 + v41++;
      v38 = v42 & (v37 - 1);
      v39 = v36 + 48 * v38;
      v40 = *(_QWORD *)(v39 + 24);
      if (v40 == v35)
        goto LABEL_66;
    }
LABEL_65:
    v39 = v36 + 48 * v37;
  }
LABEL_66:
  if (v39 == v36 + 48 * v37 || (SCEVIter = *(const llvm::SCEV **)(v39 + 40)) == 0)
    SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v27, v35);
  if (a4)
  {
    v44 = *(_DWORD *)(v34 + 24);
    if (v44)
    {
      v45 = *(_QWORD *)(a4 + 40);
      v46 = *(_QWORD *)(v34 + 8);
      v47 = v44 - 1;
      v48 = ((v45 >> 4) ^ (v45 >> 9)) & (v44 - 1);
      v49 = *(_QWORD *)(v46 + 16 * v48);
      if (v45 == v49)
      {
LABEL_75:
        v52 = *(const llvm::Loop **)(v46 + 16 * v48 + 8);
LABEL_77:
        SCEVIter = llvm::ScalarEvolution::getSCEVAtScope((llvm::ScalarEvolution *)v27, SCEVIter, v52);
        goto LABEL_78;
      }
      v50 = 1;
      while (v49 != -4096)
      {
        v51 = v48 + v50++;
        v48 = v51 & v47;
        v49 = *(_QWORD *)(v46 + 16 * v48);
        if (v45 == v49)
          goto LABEL_75;
      }
    }
    v52 = 0;
    goto LABEL_77;
  }
LABEL_78:
  if (v18 && SCEVIter)
  {
    RangeRef = llvm::ScalarEvolution::getRangeRef(v18, (uint64_t)SCEVIter, 0, 0);
    v54 = RangeRef;
    v55 = *(unsigned int *)(RangeRef + 8);
    *((_DWORD *)this + 2) = v55;
    if (v55 > 0x40)
    {
      v63 = ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8;
      v56 = (void *)operator new[]();
      memcpy(v56, *(const void **)v54, v63);
    }
    else
    {
      v56 = *(void **)RangeRef;
    }
    *(_QWORD *)this = v56;
    v57 = *(unsigned int *)(v54 + 24);
    *((_DWORD *)this + 6) = v57;
    if (v57 <= 0x40)
    {
      v33 = *(_QWORD *)(v54 + 16);
      goto LABEL_58;
    }
    v64 = ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8;
    v60 = (void *)operator new[]();
    *((_QWORD *)this + 2) = v60;
    v61 = *(const void **)(v54 + 16);
    v62 = v64;
    goto LABEL_86;
  }
LABEL_53:
  v31 = *(_DWORD *)(a2 + 40);
  *((_DWORD *)this + 2) = v31;
  if (v31 <= 0x40)
  {
    v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v31;
    if (!v31)
      v32 = 0;
    *(_QWORD *)this = v32;
    *((_DWORD *)this + 6) = v31;
    goto LABEL_57;
  }
  llvm::APInt::initSlowCase(this, -1, 1);
  v58 = *((unsigned int *)this + 2);
  *((_DWORD *)this + 6) = v58;
  if (v58 <= 0x40)
  {
LABEL_57:
    v33 = *(_QWORD *)this;
LABEL_58:
    *((_QWORD *)this + 2) = v33;
    return;
  }
  v59 = ((unint64_t)(v58 + 63) >> 3) & 0x3FFFFFF8;
  v60 = (void *)operator new[]();
  *((_QWORD *)this + 2) = v60;
  v61 = *(const void **)this;
  v62 = v59;
LABEL_86:
  memcpy(v60, v61, v62);
}

void sub_1C56A6488(llvm::APInt *this, uint64_t a2, uint64_t a3, llvm::Instruction *a4)
{
  llvm::IRPosition *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t ResultImpl;
  unsigned int v17;
  unint64_t v18;
  llvm::LazyValueInfo *v19;
  llvm::Value *v20;
  uint64_t v21;
  size_t v22;
  void *v23;

  v7 = (llvm::IRPosition *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 16) & 3;
  v9 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  v10 = v9;
  if (v8 == 3)
    v10 = *(_QWORD *)(v9 + 24);
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (*(_BYTE *)(v10 + 16))
  {
    if (v11 == 21)
    {
      v12 = (_QWORD *)(v10 + 24);
    }
    else
    {
      if (v11 < 0x1C)
        goto LABEL_21;
      v12 = (_QWORD *)(*(_QWORD *)(v10 + 40) + 56);
    }
    if (!*v12)
      goto LABEL_21;
  }
  if (v8 == 3)
    v9 = *(_QWORD *)(v9 + 24);
  if (*(_BYTE *)(v9 + 16))
  {
    if (*(_BYTE *)(v9 + 16) == 21)
      v13 = (unint64_t *)(v9 + 24);
    else
      v13 = (unint64_t *)(*(_QWORD *)(v9 + 40) + 56);
    v9 = *v13;
  }
  v14 = **(_QWORD **)(a3 + 440);
  if (v14)
    v15 = *(_QWORD *)(v9 + 40) == 0;
  else
    v15 = 1;
  if (!v15)
  {
    ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(v14, &llvm::LazyValueAnalysis::Key, v9);
    if (a4)
    {
      v19 = (llvm::LazyValueInfo *)(ResultImpl + 8);
      v20 = (llvm::Value *)sub_1C6284150(v7);
      llvm::LazyValueInfo::getConstantRange(v19, v20, a4, 1, this);
      return;
    }
  }
LABEL_21:
  v17 = *(_DWORD *)(a2 + 40);
  *((_DWORD *)this + 2) = v17;
  if (v17 <= 0x40)
  {
    v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
    if (!v17)
      v18 = 0;
    *(_QWORD *)this = v18;
    *((_DWORD *)this + 6) = v17;
    goto LABEL_25;
  }
  llvm::APInt::initSlowCase(this, -1, 1);
  v21 = *((unsigned int *)this + 2);
  *((_DWORD *)this + 6) = v21;
  if (v21 <= 0x40)
  {
LABEL_25:
    *((_QWORD *)this + 2) = *(_QWORD *)this;
    return;
  }
  v22 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
  v23 = (void *)operator new[]();
  *((_QWORD *)this + 2) = v23;
  memcpy(v23, *(const void **)this, v22);
}

BOOL sub_1C56A6624(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  const void **v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 > 0x40)
  {
    v7 = a2;
    v8 = a1;
    v6 = memcmp(*(const void **)a1, *a2, ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8);
    a2 = v7;
    a1 = v8;
    if (!v6)
      goto LABEL_3;
    return 0;
  }
  if (*(const void **)a1 != *a2)
    return 0;
LABEL_3:
  v3 = *(unsigned int *)(a1 + 24);
  if (v3 > 0x40)
    return memcmp(*(const void **)(a1 + 16), a2[2], ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    return *(_QWORD *)(a1 + 16) == (_QWORD)a2[2];
}

BOOL sub_1C56A66CC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  void *v10[2];
  uint64_t v11;

  v9 = *(_QWORD *)a2;
  v10[0] = &v11;
  v10[1] = 0;
  if (*(_DWORD *)(a2 + 16))
    sub_1C614C900((uint64_t)v10, a2 + 8);
  v3 = sub_1C6284A2C(&v9, *(_DWORD *)(*(_QWORD *)*a1 + 32));
  if (v3)
  {
    v4 = a1[1];
    v5 = v9;
    v6 = *(unsigned int *)(v4 + 8);
    if (v6 >= *(_DWORD *)(v4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v4 + 16, v6 + 1, 16);
      LODWORD(v6) = *(_DWORD *)(v4 + 8);
    }
    v7 = (uint64_t *)(*(_QWORD *)v4 + 16 * v6);
    *v7 = v3;
    v7[1] = v5;
    ++*(_DWORD *)(v4 + 8);
  }
  if (v10[0] != &v11)
    free(v10[0]);
  return v3 != 0;
}

BOOL sub_1C56A679C(uint64_t a1, uint64_t a2, const llvm::Instruction *a3)
{
  llvm::IRPosition *v5;
  unint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unint64_t v10;
  const llvm::Value *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t ResultImpl;

  if (!a3)
    return 0;
  v5 = (llvm::IRPosition *)(a1 + 16);
  if ((const llvm::Instruction *)sub_1C5676CEC((_DWORD *)(a1 + 16)) == a3)
    return 0;
  v7 = sub_1C6284150(v5);
  v8 = *(unsigned __int8 *)(v7 + 16);
  if (v8 >= 0x15)
  {
    if (v8 >= 0x1C)
    {
      v9 = (_QWORD *)(*(_QWORD *)(v7 + 40) + 56);
    }
    else
    {
      if (v8 != 21)
        return 0;
      v9 = (_QWORD *)(v7 + 24);
    }
    if (*v9 == *(_QWORD *)(*((_QWORD *)a3 + 5) + 56))
      goto LABEL_10;
    return 0;
  }
LABEL_10:
  v10 = sub_1C6284150(v5);
  if (*(unsigned __int8 *)(v10 + 16) < 0x1Cu)
    return 1;
  v11 = (const llvm::Value *)v10;
  v12 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 56);
  v13 = **(_QWORD **)(*(_QWORD *)(a2 + 88) + 440);
  if (v13)
    v14 = *(_QWORD *)(v12 + 40) == 0;
  else
    v14 = 1;
  if (v14)
    return 0;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(v13, &llvm::DominatorTreeAnalysis::Key, v12);
  return llvm::DominatorTree::dominates((llvm::DominatorTree *)(ResultImpl + 8), v11, a3);
}

uint64_t sub_1C56A6894(uint64_t result, const void **a2)
{
  const void **v2;
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(result + 8) > 0x40u || *((_DWORD *)a2 + 2) > 0x40u)
  {
    if ((const void **)result != a2)
    {
      v2 = a2;
      v3 = result;
      llvm::APInt::reallocate(result, *((_DWORD *)a2 + 2));
      result = v3;
      v4 = *(unsigned int *)(v3 + 8);
      if (v4 <= 0x40)
      {
        a2 = v2;
        *(_QWORD *)v3 = *v2;
      }
      else
      {
        memcpy(*(void **)v3, *v2, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
        a2 = v2;
        result = v3;
      }
    }
  }
  else
  {
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  }
  if (*(_DWORD *)(result + 24) > 0x40u || *((_DWORD *)a2 + 6) > 0x40u)
  {
    if ((const void **)result != a2)
    {
      v5 = a2;
      v6 = (void **)(result + 16);
      v7 = result;
      llvm::APInt::reallocate(result + 16, *((_DWORD *)a2 + 6));
      v8 = *(unsigned int *)(v7 + 24);
      if (v8 <= 0x40)
        *v6 = (void *)v5[2];
      else
        memcpy(*v6, v5[2], ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
      return v7;
    }
  }
  else
  {
    *(_QWORD *)(result + 16) = a2[2];
    *(_DWORD *)(result + 24) = *((_DWORD *)a2 + 6);
  }
  return result;
}

uint64_t sub_1C56A69C8(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 32) = &off_1E8176448;
  if (*(_DWORD *)(a1 + 104) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  }
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C56A6ABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 32) = &off_1E8176448;
  if (*(_DWORD *)(a1 + 104) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 96);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

unint64_t *sub_1C56A6BC0(unint64_t *result, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  unint64_t *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  v2 = result;
  v3 = result[2] & 3;
  v4 = result[2] & 0xFFFFFFFFFFFFFFFCLL;
  v5 = v4;
  if (v3 == 3)
    v5 = *(_QWORD *)(v4 + 24);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (!*(_BYTE *)(v5 + 16))
    goto LABEL_9;
  if (v6 == 21)
  {
    v7 = (_QWORD *)(v5 + 24);
  }
  else
  {
    if (v6 < 0x1C)
      goto LABEL_27;
    v7 = (_QWORD *)(*(_QWORD *)(v5 + 40) + 56);
  }
  if (*v7)
  {
LABEL_9:
    if (v3 == 3)
      v4 = *(_QWORD *)(v4 + 24);
    v8 = *(unsigned __int8 *)(v4 + 16);
    if (!*(_BYTE *)(v4 + 16))
    {
LABEL_25:
      if (*(_QWORD *)(v4 + 72) == v4 + 72 && (*(_BYTE *)(v4 + 34) & 0x80) == 0)
        goto LABEL_27;
      return sub_1C56A5E98((uint64_t)result, a2);
    }
    if (v8 == 21)
    {
      v9 = (unint64_t *)(v4 + 24);
    }
    else
    {
      if (v8 <= 0x1B)
      {
        v4 = 0;
        v10 = MEMORY[0x10];
        goto LABEL_24;
      }
      v9 = (unint64_t *)(*(_QWORD *)(v4 + 40) + 56);
    }
    v4 = *v9;
    v10 = *(unsigned __int8 *)(v4 + 16);
    if (v4)
      v11 = v10 == 3;
    else
      v11 = 0;
    if (!v11)
    {
LABEL_24:
      if (v10)
        return sub_1C56A5E98((uint64_t)result, a2);
      goto LABEL_25;
    }
    if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) != 0)
      return sub_1C56A5E98((uint64_t)result, a2);
  }
LABEL_27:
  v12 = *((_DWORD *)result + 22);
  if (*((_DWORD *)result + 14) > 0x40u || v12 > 0x40)
  {
    result = (unint64_t *)llvm::APInt::reallocate((uint64_t)(result + 6), v12);
    v14 = *((unsigned int *)v2 + 14);
    if (v14 <= 0x40)
      v2[6] = v2[10];
    else
      result = (unint64_t *)memcpy((void *)v2[6], (const void *)v2[10], ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    result[6] = result[10];
    *((_DWORD *)result + 14) = v12;
  }
  v13 = *((_DWORD *)v2 + 26);
  if (*((_DWORD *)v2 + 18) > 0x40u || v13 > 0x40)
  {
    result = (unint64_t *)llvm::APInt::reallocate((uint64_t)(v2 + 8), v13);
    v15 = *((unsigned int *)v2 + 18);
    if (v15 <= 0x40)
      v2[8] = v2[12];
    else
      return (unint64_t *)memcpy((void *)v2[8], (const void *)v2[12], ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v2[8] = v2[12];
    *((_DWORD *)v2 + 18) = v13;
  }
  return result;
}

void sub_1C56A6D7C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3180);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3180))
      __cxa_guard_release(&qword_1EF8F3180);
  }
}

BOOL sub_1C56A6DBC(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t (**v5)();
  void *v6;
  llvm::IRPosition *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  llvm::AbstractAttribute *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  size_t v17;
  unsigned int v18;
  uint64_t (**v19)();
  uint64_t (**v20)();
  void *v21;
  void *v22;
  size_t v23;
  void *v24;
  uint64_t (**v25)();
  unsigned int v26;
  uint64_t (**v27)();
  unsigned int v28;
  uint64_t (**v29)();
  unsigned int v30;
  void *__src;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  uint64_t (**v35)();
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  _QWORD v45[4];
  int v46;
  uint64_t (**v47)();
  unsigned int v48;
  uint64_t (**v49)();
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  char v57;

  v4 = *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1) + 8);
  v48 = v4;
  if (v4 <= 0x40)
  {
    v5 = 0;
    v47 = 0;
LABEL_3:
    v49 = v5;
    v25 = &off_1E8176448;
    v26 = v4;
    v28 = v4;
    v27 = v5;
    v29 = v5;
    v30 = v4;
    v32 = v4;
    if (v4)
      v6 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v4);
    else
      v6 = 0;
    v34 = v4;
    __src = v6;
    v33 = v6;
    goto LABEL_6;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v47, 0, 0);
  v4 = v48;
  if (v48 <= 0x40)
  {
    v5 = v47;
    goto LABEL_3;
  }
  v17 = (((unint64_t)v48 + 63) >> 3) & 0x3FFFFFF8;
  v18 = v48;
  v19 = (uint64_t (**)())operator new[]();
  v49 = v19;
  v20 = v47;
  memcpy(v19, v47, v17);
  v25 = &off_1E8176448;
  v26 = v18;
  v28 = v18;
  v21 = (void *)operator new[]();
  memcpy(v21, v20, v17);
  v27 = (uint64_t (**)())v21;
  v30 = v18;
  v22 = (void *)operator new[]();
  memcpy(v22, v19, v17);
  v29 = (uint64_t (**)())v22;
  v32 = v18;
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  v34 = v32;
  if (v32 < 0x41)
  {
    v24 = __src;
  }
  else
  {
    v23 = (((unint64_t)v32 + 63) >> 3) & 0x3FFFFFF8;
    v24 = (void *)operator new[]();
    memcpy(v24, __src, v23);
  }
  v33 = v24;
  MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  if (v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
LABEL_6:
  v7 = (llvm::IRPosition *)(a1 + 2);
  v8 = a1[3];
  if (v8)
  {
    v9 = sub_1C628686C(v7, 0);
    v10 = *(_DWORD *)(v8 + 20);
    if ((v10 & 0x40000000) != 0)
      v11 = *(_QWORD *)(v8 - 8);
    else
      v11 = v8 - 32 * (v10 & 0x7FFFFFF);
    v12 = sub_1C5695480(a2, (v11 + 32 * v9) | 3, 0, (uint64_t)a1, 0);
    v13 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v12 + 48))(v12);
    sub_1C628E08C((uint64_t)&v47, (uint64_t)&v25, v13);
  }
  else
  {
    LOBYTE(v47) = 0;
    v57 = 0;
    v46 = sub_1C628686C(v7, 0);
    v45[0] = &v46;
    v45[1] = a2;
    v45[2] = a1;
    v45[3] = &v47;
    if ((llvm::Attributor::checkForAllCallSites(a2, sub_1C56A73F4, (uint64_t)v45, (uint64_t)a1, 1, &v44) & 1) != 0)
    {
      if (!v57)
        goto LABEL_26;
      sub_1C628E08C((uint64_t)&v35, (uint64_t)&v25, (uint64_t)&v47);
      v35 = &off_1E8176448;
      if (v43 >= 0x41 && v42)
        MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
      if (v41 >= 0x41 && v40)
        MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
      if (v39 >= 0x41 && v38)
        MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
      if (v37 >= 0x41 && v36)
        MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
    }
    else
    {
      ((void (*)(uint64_t))v25[5])((uint64_t)&v25);
    }
    if (!v57)
      goto LABEL_26;
  }
  v47 = &off_1E8176448;
  if (v56 >= 0x41 && v55)
    MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
  if (v54 >= 0x41 && v53)
    MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
  if (v52 >= 0x41 && v51)
    MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
  if (v50 >= 0x41 && v49)
    MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
LABEL_26:
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  v15 = sub_1C628DFEC(v14, (uint64_t)&v25);
  v25 = &off_1E8176448;
  if (v34 >= 0x41 && v33)
    MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
  if (v32 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v30 >= 0x41 && v29)
    MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
  if (v28 >= 0x41 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  return v15;
}

uint64_t *sub_1C56A7300(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E8176448;
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 40) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  }
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A73EC(uint64_t a1)
{
  sub_1C56A6ABC(a1 - 32);
}

uint64_t sub_1C56A73F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::AbstractAttribute *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *a2;
  v10 = *a2;
  v11 = v13;
  v12 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)&v11, (uint64_t)(a2 + 1));
    v22 = v10;
    v23 = &v25;
    v24 = 0;
    if ((_DWORD)v12)
      sub_1C614CA14((uint64_t)&v23, (uint64_t)&v11);
  }
  else
  {
    v22 = v3;
    v23 = &v25;
    v24 = 0;
  }
  v25 = sub_1C628D358((uint64_t)&v22, **(_DWORD **)a1);
  v26 = v4;
  if (v23 != &v25)
    free(v23);
  if (sub_1C6283CA4(&v25))
  {
    v7 = sub_1C5695480(*(_QWORD *)(a1 + 8), v25, v26, *(_QWORD *)(a1 + 16), 0);
    v8 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v7 + 48))(v7);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 80))
    {
      sub_1C628E100((uint64_t)v13, v9, v8);
      v13[0] = &off_1E8176448;
      if (v21 >= 0x41 && v20)
        MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
      if (v19 >= 0x41 && v18)
        MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
      if (v17 >= 0x41 && v16)
        MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
      if (v15 >= 0x41 && v14)
        MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
    }
    else
    {
      sub_1C628E218(*(_QWORD *)(a1 + 24), v8);
    }
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  }
  else
  {
    v5 = 0;
  }
  if (v11 != v13)
    free(v11);
  return v5;
}

uint64_t sub_1C56A75E8(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 32) = &off_1E8176448;
  if (*(_DWORD *)(a1 + 104) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  }
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C56A76DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 32) = &off_1E8176448;
  if (*(_DWORD *)(a1 + 104) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 96);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56A77E4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3188);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3188))
      __cxa_guard_release(&qword_1EF8F3188);
  }
}

BOOL sub_1C56A7824(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t (**v5)();
  void *v6;
  uint64_t v7;
  _BOOL8 v8;
  size_t v10;
  unsigned int v11;
  void *v12;
  uint64_t (**v13)();
  void *v14;
  void *v15;
  size_t v16;
  void *v17;
  uint64_t (**v18)();
  unsigned int v19;
  uint64_t (**v20)();
  unsigned int v21;
  uint64_t (**v22)();
  unsigned int v23;
  void *__src;
  unsigned int v25;
  void *v26;
  unsigned int v27;
  uint64_t (**v28)();
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD v37[4];
  uint64_t (**v38)();
  unsigned int v39;
  uint64_t (**v40)();
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  uint64_t v49;

  v4 = *(_DWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1) + 8);
  v39 = v4;
  if (v4 <= 0x40)
  {
    v5 = 0;
LABEL_3:
    v40 = v5;
    v18 = &off_1E8176448;
    v19 = v4;
    v21 = v4;
    v20 = v5;
    v22 = v5;
    v23 = v4;
    v25 = v4;
    if (v4)
      v6 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v4);
    else
      v6 = 0;
    v27 = v4;
    __src = v6;
    v26 = v6;
    goto LABEL_6;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v38, 0, 0);
  v4 = v39;
  if (v39 <= 0x40)
  {
    v5 = v38;
    goto LABEL_3;
  }
  v10 = (((unint64_t)v39 + 63) >> 3) & 0x3FFFFFF8;
  v11 = v39;
  v12 = (void *)operator new[]();
  v13 = v38;
  memcpy(v12, v38, v10);
  v18 = &off_1E8176448;
  v19 = v11;
  v21 = v11;
  v14 = (void *)operator new[]();
  memcpy(v14, v13, v10);
  v20 = (uint64_t (**)())v14;
  v23 = v11;
  v15 = (void *)operator new[]();
  memcpy(v15, v12, v10);
  v22 = (uint64_t (**)())v15;
  v25 = v11;
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
  v27 = v25;
  if (v25 < 0x41)
  {
    v17 = __src;
  }
  else
  {
    v16 = (((unint64_t)v25 + 63) >> 3) & 0x3FFFFFF8;
    v17 = (void *)operator new[]();
    memcpy(v17, __src, v16);
  }
  v26 = v17;
  MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  if (v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
LABEL_6:
  v49 = a1[3];
  LOBYTE(v38) = 0;
  v48 = 0;
  v37[0] = &v49;
  v37[1] = a2;
  v37[2] = a1;
  v37[3] = &v38;
  if ((llvm::Attributor::checkForAllReturnedValues(a2, (uint64_t)sub_1C56A7DDC, (uint64_t)v37, (uint64_t)a1) & 1) != 0)
  {
    if (!v48)
      goto LABEL_20;
    sub_1C628E08C((uint64_t)&v28, (uint64_t)&v18, (uint64_t)&v38);
    v28 = &off_1E8176448;
    if (v36 >= 0x41 && v35)
      MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
    if (v34 >= 0x41 && v33)
      MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
    if (v32 >= 0x41 && v31)
      MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
    if (v30 >= 0x41 && v29)
      MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
  }
  else
  {
    ((void (*)(uint64_t))v18[5])((uint64_t)&v18);
  }
  if (v48)
  {
    v38 = &off_1E8176448;
    if (v47 >= 0x41 && v46)
      MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
    if (v45 >= 0x41 && v44)
      MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
    if (v43 >= 0x41 && v42)
      MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
    if (v41 >= 0x41 && v40)
      MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
  }
LABEL_20:
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  v8 = sub_1C628DFEC(v7, (uint64_t)&v18);
  v18 = &off_1E8176448;
  if (v27 >= 0x41 && v26)
    MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  if (v25 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v23 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  if (v21 >= 0x41 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  return v8;
}

uint64_t *sub_1C56A7CE8(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E8176448;
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 40) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  }
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A7DD4(uint64_t a1)
{
  sub_1C56A76DC(a1 - 32);
}

uint64_t sub_1C56A7DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  llvm::AbstractAttribute *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v13)();
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;

  v3 = **(_QWORD **)a1;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 21)
  {
    if (v4 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v5 = v4 - 33;
      v6 = v5 > 0x33;
      v7 = (1 << v5) & 0x8000000000041;
      if (!v6 && v7 != 0)
      {
        v3 = 0;
        a2 |= 1uLL;
      }
    }
  }
  v9 = sub_1C5695480(*(_QWORD *)(a1 + 8), a2, v3, *(_QWORD *)(a1 + 16), 0);
  v10 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v9 + 48))(v9);
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 80))
  {
    sub_1C628E100((uint64_t)&v13, v11, v10);
    v13 = &off_1E8176448;
    if (v21 >= 0x41 && v20)
      MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
    if (v19 >= 0x41 && v18)
      MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
    if (v17 >= 0x41 && v16)
      MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
    if (v15 >= 0x41 && v14)
      MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  else
  {
    sub_1C628E218(*(_QWORD *)(a1 + 24), v10);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C56A7F60(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 32) = &off_1E8176448;
  if (*(_DWORD *)(a1 + 104) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  }
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C56A8054(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 32) = &off_1E8176448;
  if (*(_DWORD *)(a1 + 104) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 96);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

unint64_t *sub_1C56A8158(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;

  v4 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  if (*(_BYTE *)(v4 + 16) != 84 || (*(_BYTE *)(v4 + 23) & 0x20) == 0)
    return sub_1C56A5E98(a1, a2);
  v5 = ***(_QWORD ***)v4;
  v22 = v4;
  v6 = *(_DWORD *)(v5 + 2496);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 2480);
    v8 = v6 - 1;
    v9 = (v6 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    v10 = (_QWORD *)(v7 + 40 * v9);
    v11 = *v10;
    if (*v10 == v4)
      goto LABEL_13;
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (_QWORD *)(v7 + 40 * (v15 & v8));
      v11 = *v10;
      if (*v10 == v4)
        goto LABEL_13;
    }
    if (v12)
      v20 = v12;
    else
      v20 = v10;
  }
  else
  {
    v20 = 0;
  }
  v10 = sub_1C541AB24(v5 + 2480, (uint64_t)&v22, (uint64_t *)&v22, v20);
  v21 = v22;
  v10[3] = 0;
  v10[4] = 0;
  *v10 = v21;
  v10[1] = v10 + 3;
  v10[2] = 0x100000000;
LABEL_13:
  v16 = *((unsigned int *)v10 + 4);
  if ((_DWORD)v16)
  {
    v17 = (uint64_t *)(v10[1] + 8);
    v18 = 16 * v16;
    while (*((_DWORD *)v17 - 2) != 4)
    {
      v17 += 2;
      v18 -= 16;
      if (!v18)
        return sub_1C56A5E98(a1, a2);
    }
    if (*v17)
    {
      llvm::getConstantRangeFromMetadata(*v17, (uint64_t)&v22);
      sub_1C628DF00(a1 + 32, (llvm::ConstantRange *)&v22);
      if (v25 >= 0x41 && v24)
        MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
      if (v23 >= 0x41 && v22)
        MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
    }
  }
  return sub_1C56A5E98(a1, a2);
}

void sub_1C56A831C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3190);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3190))
      __cxa_guard_release(&qword_1EF8F3190);
  }
}

uint64_t sub_1C56A835C(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  llvm::AbstractAttribute *v9;
  uint64_t v10;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v6 = sub_1C5676C10(v4);
  if (!v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v8 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  v9 = sub_1C5695480(a2, v6 | 1, v8, a1, 0);
  v10 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v9 + 48))(v9);
  return sub_1C628DFEC(v5, v10);
}

uint64_t *sub_1C56A8400(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E8176448;
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 40) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  }
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A84EC(uint64_t a1)
{
  sub_1C56A8054(a1 - 32);
}

uint64_t sub_1C56A84F4(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 32) = &off_1E8176448;
  if (*(_DWORD *)(a1 + 104) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  }
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C56A85E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 32) = &off_1E8176448;
  if (*(_DWORD *)(a1 + 104) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 96);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56A86EC()
{
  return 1;
}

void sub_1C56A86F4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3198);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3198))
      __cxa_guard_release(&qword_1EF8F3198);
  }
}

uint64_t *sub_1C56A8734(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E8176448;
  if (*(_DWORD *)(a1 + 72) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 56) >= 0x41u)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 40) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  }
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A8820(uint64_t a1)
{
  sub_1C56A85E8(a1 - 32);
}

uint64_t sub_1C56A8828(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &off_1E8176888;
  v2 = a1 + 56;
  sub_1C618E390((char **)(a1 + 192));
  sub_1C628E3CC(v2);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C56A8880(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &off_1E8176888;
  v2 = a1 + 56;
  sub_1C618E390((char **)(a1 + 192));
  sub_1C628E3CC(v2);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56A88E8(uint64_t a1, uint64_t *a2)
{
  llvm::IRPosition *v3;
  unint64_t result;
  unsigned int v5;
  uint64_t v6;
  BOOL v8;
  unsigned int v10;
  unint64_t *v11;

  v3 = (llvm::IRPosition *)(a1 + 16);
  v11 = 0;
  if (sub_1C62883D4(a2, (uint64_t *)(a1 + 16), &v11))
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 24))(a1 + 32);
  if ((result & 1) == 0)
  {
    result = sub_1C6284150(v3);
    v5 = *(unsigned __int8 *)(result + 16);
    if (v5 == 16)
    {
      sub_1C628E404(a1 + 32, (llvm *)(result + 24));
    }
    else
    {
      if (v5 - 11 > 1)
      {
        v8 = v5 > 0x1B && v5 - 41 < 0x12;
        if (v5 == 81 || v8)
          return result;
        if (v5 - 66 < 0xD && v5 > 0x1B)
          return result;
        v6 = 5;
        v10 = v5 - 60;
        if (v10 <= 0x19 && ((1 << v10) & 0x2800001) != 0)
          return result;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 8 * v6))(a1 + 32);
      }
      *(_BYTE *)(a1 + 336) = *(_DWORD *)(a1 + 200) == 0;
    }
    v6 = 4;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 8 * v6))(a1 + 32);
  }
  return result;
}

void sub_1C56A8A08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  void (**v5)(llvm::raw_ostream *__hidden);
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v5 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v13 = v14;
  v12 = 0;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  llvm::operator<<((llvm::raw_ostream *)&v5, v3);
  if (*((char *)v13 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v13, (unint64_t)v13[1]);
  }
  else
  {
    v4 = *(_OWORD *)v13;
    *(_QWORD *)(a2 + 16) = v13[2];
    *(_OWORD *)a2 = v4;
  }
  v5 = off_1E81A6E70;
  if (v12 == 1 && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8077774924);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_1C56A8AF4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F31A0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F31A0))
      __cxa_guard_release(&qword_1EF8F31A0);
  }
}

uint64_t sub_1C56A8B34(uint64_t a1, llvm::Attributor *a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unint64_t v11;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v56;
  char v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  llvm::AbstractAttribute *v61;
  unint64_t AssumedSimplified;
  char v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v72;
  char v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v89;
  char v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v94;
  char v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v107;
  char v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  llvm::AbstractAttribute *v113;
  uint64_t v114;
  unsigned int v115;
  llvm::APInt *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  llvm::AbstractAttribute *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  llvm::UndefValue *AssumedConstant;
  char v125;
  char v126;
  llvm::Constant *v127;
  llvm::AbstractAttribute *v128;
  llvm::AbstractAttribute *v129;
  unsigned int v130;
  unsigned int v131;
  llvm::AbstractAttribute *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  char v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  unsigned int v143;
  llvm::AbstractAttribute *v144;
  unsigned int v145;
  unsigned int v146;
  llvm::AbstractAttribute *v147;
  const void **v148;
  uint64_t v149;
  const void **v150;
  uint64_t v151;
  llvm::APInt *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  char v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  char v163;
  BOOL v164;
  int v165;
  uint64_t v166;
  char v167;
  uint64_t v169;
  uint64_t v170;
  llvm::APInt *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  BOOL v177[8];
  unsigned int v178;
  BOOL v179;
  void *v180;
  uint64_t v181;
  uint64_t (**v182)();
  uint64_t (**v183)();
  __int16 v184;
  _QWORD v185[17];
  char *v186[18];
  char v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v4 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 >= 0x1C)
    v6 = v4;
  else
    v6 = 0;
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v5 >= 0x1C && v7 == 81)
  {
    v184 = *(_WORD *)(a1 + 48);
    v182 = &off_1E8176888;
    v183 = &off_1E8172AE8;
    sub_1C628E6B8(v185, (_DWORD *)(a1 + 56));
    v187 = *(_BYTE *)(a1 + 336);
    v14 = *(_QWORD *)(v6 - 64);
    v15 = *(_QWORD *)(v6 - 32);
    v179 = 0;
    v16 = *(_QWORD *)(a1 + 24);
    v17 = *(unsigned __int8 *)(v14 + 16);
    if (v17 != 21)
    {
      if (v17 < 0x1C)
      {
        if (!*(_BYTE *)(v14 + 16))
          v14 |= 2uLL;
      }
      else
      {
        v18 = v17 - 33;
        v19 = v18 > 0x33;
        v20 = (1 << v18) & 0x8000000000041;
        if (!v19 && v20 != 0)
        {
          v16 = 0;
          v14 |= 1uLL;
        }
      }
    }
    v180 = (void *)v14;
    v181 = v16;
    AssumedSimplified = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v180, (const llvm::AbstractAttribute *)a1, &v179);
    if (!v63)
      goto LABEL_90;
    v65 = AssumedSimplified;
    v66 = a1 + 32;
    if (!AssumedSimplified)
      goto LABEL_232;
    v67 = *(_QWORD *)(a1 + 24);
    v68 = *(unsigned __int8 *)(v15 + 16);
    if (v68 != 21)
    {
      if (v68 < 0x1C)
      {
        if (!*(_BYTE *)(v15 + 16))
          v15 |= 2uLL;
      }
      else
      {
        v69 = v68 - 33;
        v19 = v69 > 0x33;
        v70 = (1 << v69) & 0x8000000000041;
        if (!v19 && v70 != 0)
        {
          v67 = 0;
          v15 |= 1uLL;
        }
      }
    }
    v180 = (void *)v15;
    v181 = v67;
    v94 = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v180, (const llvm::AbstractAttribute *)a1, &v179);
    if (!v95)
    {
LABEL_90:
      v64 = 1;
LABEL_233:
      v182 = &off_1E8176888;
      goto LABEL_287;
    }
    v96 = v94;
    if (!v94 || *(_BYTE *)(*(_QWORD *)v65 + 8) != 13 || *(_BYTE *)(*(_QWORD *)v94 + 8) != 13)
      goto LABEL_232;
    v97 = *(unsigned __int8 *)(v65 + 16);
    if (v97 != 21)
    {
      if (v97 < 0x1C)
      {
        if (!*(_BYTE *)(v65 + 16))
          v65 |= 2uLL;
      }
      else
      {
        v98 = v97 - 33;
        if (v98 <= 0x33 && ((1 << v98) & 0x8000000000041) != 0)
          v65 |= 1uLL;
      }
    }
    v120 = sub_1C56AA6B8((uint64_t)a2, v65, 0, a1, 0);
    if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)v120 + 4) + 16))((uint64_t)v120 + 32) & 1) == 0)
      goto LABEL_232;
    v121 = *(unsigned __int8 *)(v96 + 16);
    v122 = v96;
    if (v121 != 21)
    {
      if (v121 < 0x1C)
      {
        if (*(_BYTE *)(v96 + 16))
          v122 = v96;
        else
          v122 = v96 | 2;
      }
      else
      {
        v123 = v121 - 33;
        v122 = v96;
        if (v123 <= 0x33)
        {
          v122 = v96;
          if (((1 << v123) & 0x8000000000041) != 0)
            v122 = v96 | 1;
        }
      }
    }
    v132 = sub_1C56AA6B8((uint64_t)a2, v122, 0, a1, 0);
    if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)v132 + 4) + 16))((uint64_t)v132 + 32) & 1) == 0)
    {
LABEL_232:
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 40))(a1 + 32);
      goto LABEL_233;
    }
    LODWORD(v181) = *(_DWORD *)(*(_QWORD *)v96 + 8) >> 8;
    if (v181 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v180, 0, 0);
    else
      v180 = 0;
    if (*((_BYTE *)v120 + 336) && *((_BYTE *)v132 + 336))
    {
      *(_BYTE *)(a1 + 336) = *(_DWORD *)(a1 + 200) == 0;
LABEL_228:
      v133 = sub_1C628E5F8((uint64_t)&v182, v66);
LABEL_229:
      v64 = v133;
      if (v181 >= 0x41 && v180)
        MEMORY[0x1CAA32F9C](v180, 0x1000C8000313F17);
      goto LABEL_233;
    }
    if (*((_BYTE *)v120 + 336))
    {
      v157 = *((unsigned int *)v132 + 50);
      if ((_DWORD)v157)
      {
        v158 = 0;
        v159 = 0;
        v160 = *((_QWORD *)v132 + 24);
        v161 = *(_WORD *)(v6 + 18) & 0x3F;
        v162 = 16 * v157;
        do
        {
          llvm::ICmpInst::compare((uint64_t)&v180, v160, v161);
          v158 |= v163;
          v159 |= v163 ^ 1;
          if (v158)
            v164 = v159 == 0;
          else
            v164 = 1;
          if (!v164)
            goto LABEL_320;
          v160 += 16;
          v162 -= 16;
        }
        while (v162);
LABEL_312:
        v137 = v159 & 1;
        if ((v158 & 1) == 0)
          goto LABEL_316;
LABEL_313:
        v178 = 1;
        *(_QWORD *)v177 = 1;
        sub_1C628E404(v66, (llvm *)v177);
        if (v178 >= 0x41 && *(_QWORD *)v177)
          MEMORY[0x1CAA32F9C](*(_QWORD *)v177, 0x1000C8000313F17);
LABEL_316:
        if ((v137 & 1) != 0)
        {
          v178 = 1;
          *(_QWORD *)v177 = 0;
          sub_1C628E404(v66, (llvm *)v177);
          if (v178 >= 0x41)
          {
            if (*(_QWORD *)v177)
              MEMORY[0x1CAA32F9C](*(_QWORD *)v177, 0x1000C8000313F17);
          }
        }
      }
      goto LABEL_228;
    }
    v134 = *((_QWORD *)v120 + 24);
    v135 = *((unsigned int *)v120 + 50);
    if (*((_BYTE *)v132 + 336))
    {
      if (!(_DWORD)v135)
        goto LABEL_228;
      v158 = 0;
      v159 = 0;
      v165 = *(_WORD *)(v6 + 18) & 0x3F;
      v166 = 16 * v135;
      while (1)
      {
        llvm::ICmpInst::compare(v134, (uint64_t)&v180, v165);
        v158 |= v167;
        v159 |= v167 ^ 1;
        if (v158 && v159 != 0)
          break;
        v134 += 16;
        v166 -= 16;
        if (!v166)
          goto LABEL_312;
      }
    }
    else
    {
      if (!(_DWORD)v135)
        goto LABEL_228;
      v136 = 0;
      v137 = 0;
      v174 = *((_QWORD *)v132 + 24);
      v175 = v134 + 16 * v135;
      v176 = *((unsigned int *)v132 + 50);
      while (!(_DWORD)v176)
      {
LABEL_243:
        v134 += 16;
        if (v134 == v175)
        {
          if ((v136 & 1) == 0)
            goto LABEL_316;
          goto LABEL_313;
        }
      }
      v138 = *(_WORD *)(v6 + 18) & 0x3F;
      v140 = 16 * v176;
      v139 = v174;
      while (1)
      {
        llvm::ICmpInst::compare(v134, v139, v138);
        v136 |= v141;
        v137 |= v141 ^ 1;
        if ((v136 & 1) != 0 && (v137 & 1) != 0)
          break;
        v139 += 16;
        v140 -= 16;
        if (!v140)
          goto LABEL_243;
      }
    }
LABEL_320:
    v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66);
    goto LABEL_229;
  }
  if (v7 == 85)
    v8 = v6;
  else
    v8 = 0;
  if (v5 >= 0x1C && v7 == 85)
  {
    v184 = *(_WORD *)(a1 + 48);
    v182 = &off_1E8176888;
    v183 = &off_1E8172AE8;
    sub_1C628E6B8(v185, (_DWORD *)(a1 + 56));
    v187 = *(_BYTE *)(a1 + 336);
    v22 = *(_QWORD *)(v8 - 64);
    v23 = *(_QWORD *)(v8 - 32);
    v177[0] = 0;
    v24 = *(_QWORD *)(a1 + 24);
    v25 = *(unsigned __int8 *)(v22 + 16);
    if (v25 != 21)
    {
      if (v25 < 0x1C)
      {
        if (!*(_BYTE *)(v22 + 16))
          v22 |= 2uLL;
      }
      else
      {
        v26 = v25 - 33;
        v19 = v26 > 0x33;
        v27 = (1 << v26) & 0x8000000000041;
        if (!v19 && v27 != 0)
        {
          v24 = 0;
          v22 |= 1uLL;
        }
      }
    }
    v180 = (void *)v22;
    v181 = v24;
    v72 = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v180, (const llvm::AbstractAttribute *)a1, v177);
    if (!v73)
      goto LABEL_160;
    v74 = v72;
    v75 = a1 + 32;
    if (!v72)
      goto LABEL_284;
    v76 = *(_QWORD *)(a1 + 24);
    v77 = *(unsigned __int8 *)(v23 + 16);
    if (v77 != 21)
    {
      if (v77 < 0x1C)
      {
        if (!*(_BYTE *)(v23 + 16))
          v23 |= 2uLL;
      }
      else
      {
        v78 = v77 - 33;
        v19 = v78 > 0x33;
        v79 = (1 << v78) & 0x8000000000041;
        if (!v19 && v79 != 0)
        {
          v76 = 0;
          v23 |= 1uLL;
        }
      }
    }
    v180 = (void *)v23;
    v181 = v76;
    v99 = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v180, (const llvm::AbstractAttribute *)a1, v177);
    if (!v100)
      goto LABEL_160;
    v101 = v99;
    if (!v99 || *(_BYTE *)(*(_QWORD *)v74 + 8) != 13 || *(_BYTE *)(*(_QWORD *)v99 + 8) != 13)
      goto LABEL_284;
    v102 = *(_QWORD *)(v8 - 96);
    v103 = *(unsigned __int8 *)(v102 + 16);
    if (v103 != 21)
    {
      if (v103 < 0x1C)
      {
        if (!*(_BYTE *)(v102 + 16))
          v102 |= 2uLL;
      }
      else
      {
        v104 = v103 - 33;
        v19 = v104 > 0x33;
        v105 = (1 << v104) & 0x8000000000041;
        if (!v19 && v105 != 0)
          v102 |= 1uLL;
      }
    }
    v180 = (void *)v102;
    v181 = 0;
    AssumedConstant = llvm::Attributor::getAssumedConstant(a2, (const llvm::IRPosition *)&v180, (const llvm::AbstractAttribute *)a1, v177);
    v125 = 0;
    if (v126)
    {
      v127 = AssumedConstant;
      if (AssumedConstant)
      {
        if (llvm::Constant::isOneValue(AssumedConstant))
        {
          v125 = 1;
        }
        else
        {
          if ((llvm::Constant::isZeroValue(v127) & 1) != 0)
          {
            v128 = 0;
            goto LABEL_256;
          }
          v125 = 0;
        }
      }
    }
    v142 = *(unsigned __int8 *)(v74 + 16);
    if (v142 != 21)
    {
      if (v142 < 0x1C)
      {
        if (!*(_BYTE *)(v74 + 16))
          v74 |= 2uLL;
      }
      else
      {
        v143 = v142 - 33;
        if (v143 <= 0x33 && ((1 << v143) & 0x8000000000041) != 0)
          v74 |= 1uLL;
      }
    }
    v128 = sub_1C56AA6B8((uint64_t)a2, v74, 0, a1, 0);
    if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)v128 + 4) + 16))((uint64_t)v128 + 32) & 1) == 0)
      goto LABEL_284;
    v144 = v128;
    if ((v125 & 1) != 0)
      goto LABEL_282;
LABEL_256:
    v145 = *(unsigned __int8 *)(v101 + 16);
    if (v145 != 21)
    {
      if (v145 < 0x1C)
      {
        if (!*(_BYTE *)(v101 + 16))
          v101 |= 2uLL;
      }
      else
      {
        v146 = v145 - 33;
        if (v146 <= 0x33 && ((1 << v146) & 0x8000000000041) != 0)
          v101 |= 1uLL;
      }
    }
    v144 = sub_1C56AA6B8((uint64_t)a2, v101, 0, a1, 0);
    if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)v144 + 4) + 16))((uint64_t)v144 + 32) & 1) != 0)
    {
      if (v128)
      {
        if (!*((_BYTE *)v128 + 336) || !*((_BYTE *)v144 + 336))
        {
          sub_1C628E8DC(a1 + 32, (uint64_t)v128 + 32);
          v155 = a1 + 32;
          v154 = (uint64_t)v144 + 32;
          goto LABEL_302;
        }
LABEL_291:
        *(_BYTE *)(a1 + 336) = *(_DWORD *)(a1 + 200) == 0;
LABEL_303:
        v156 = sub_1C628E5F8((uint64_t)&v182, a1 + 32);
        goto LABEL_285;
      }
LABEL_282:
      if (!*((_BYTE *)v144 + 336))
      {
        v154 = (uint64_t)v144 + 32;
        v155 = a1 + 32;
LABEL_302:
        sub_1C628E8DC(v155, v154);
        goto LABEL_303;
      }
      goto LABEL_291;
    }
LABEL_284:
    v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 40))(v75);
LABEL_285:
    v64 = v156;
    goto LABEL_286;
  }
  if ((v7 - 79) >= 0xFFFFFFF3)
    v9 = (unsigned __int8 *)v6;
  else
    v9 = 0;
  if (v5 >= 0x1C && (v7 - 79) >= 0xFFFFFFF3)
  {
    v29 = a1 + 32;
    v184 = *(_WORD *)(a1 + 48);
    v182 = &off_1E8176888;
    v183 = &off_1E8172AE8;
    sub_1C628E6B8(v185, (_DWORD *)(a1 + 56));
    v187 = *(_BYTE *)(a1 + 336);
    if (!llvm::CastInst::isIntegerCast((llvm::CastInst *)v9))
      goto LABEL_189;
    v30 = *(_DWORD *)(*(_QWORD *)v9 + 8);
    v31 = *((_QWORD *)v9 - 4);
    v177[0] = 0;
    v32 = *(_QWORD *)(a1 + 24);
    v33 = *(unsigned __int8 *)(v31 + 16);
    if (v33 != 21)
    {
      if (v33 < 0x1C)
      {
        if (!*(_BYTE *)(v31 + 16))
          v31 |= 2uLL;
      }
      else
      {
        v34 = v33 - 33;
        v19 = v34 > 0x33;
        v35 = (1 << v34) & 0x8000000000041;
        if (!v19 && v35 != 0)
        {
          v32 = 0;
          v31 |= 1uLL;
        }
      }
    }
    v180 = (void *)v31;
    v181 = v32;
    v89 = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v180, (const llvm::AbstractAttribute *)a1, v177);
    if (!v90)
    {
      v64 = 1;
LABEL_191:
      v182 = &off_1E8176888;
LABEL_287:
      sub_1C618E390(v186);
      goto LABEL_288;
    }
    v91 = v89;
    if (!v89)
      goto LABEL_189;
    v92 = *(unsigned __int8 *)(v89 + 16);
    if (v92 != 21)
    {
      if (v92 < 0x1C)
      {
        if (!*(_BYTE *)(v89 + 16))
          v91 = v89 | 2;
      }
      else
      {
        v93 = v92 - 33;
        if (v93 <= 0x33 && ((1 << v93) & 0x8000000000041) != 0)
          v91 = v89 | 1;
      }
    }
    v113 = sub_1C56AA6B8((uint64_t)a2, v91, 0, a1, 0);
    if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)v113 + 4) + 16))((uint64_t)v113 + 32) & 1) != 0)
    {
      if (*((_BYTE *)v113 + 336))
      {
        *(_BYTE *)(a1 + 336) = *(_DWORD *)(a1 + 200) == 0;
      }
      else
      {
        v114 = *((unsigned int *)v113 + 50);
        if ((_DWORD)v114)
        {
          v115 = v30 >> 8;
          v116 = (llvm::APInt *)*((_QWORD *)v113 + 24);
          v117 = 16 * v114;
          do
          {
            v118 = v9[16];
            if (v118 > 0x43)
            {
              if (v118 == 68)
              {
                llvm::APInt::sext(v116, v115, (llvm::APInt *)&v180);
              }
              else
              {
                LODWORD(v181) = *((_DWORD *)v116 + 2);
                if (v181 > 0x40)
                {
                  v180 = (void *)operator new[]();
                  memcpy(v180, *(const void **)v116, (((unint64_t)v181 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v180 = *(void **)v116;
                }
              }
            }
            else if (v118 == 66)
            {
              llvm::APInt::trunc(v116, v115, (llvm::APInt *)&v180);
            }
            else
            {
              llvm::APInt::zext(v116, v115, (uint64_t)&v180);
            }
            sub_1C628E404(v29, (llvm *)&v180);
            if (v181 >= 0x41 && v180)
              MEMORY[0x1CAA32F9C](v180, 0x1000C8000313F17);
            v116 = (llvm::APInt *)((char *)v116 + 16);
            v117 -= 16;
          }
          while (v117);
        }
      }
      v119 = sub_1C628E5F8((uint64_t)&v182, v29);
    }
    else
    {
LABEL_189:
      v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(a1 + 32);
    }
    v64 = v119;
    goto LABEL_191;
  }
  if ((v7 - 59) >= 0xFFFFFFEE)
    v11 = v6;
  else
    v11 = 0;
  if (v5 >= 0x1C && (v7 - 59) >= 0xFFFFFFEE)
  {
    v184 = *(_WORD *)(a1 + 48);
    v182 = &off_1E8176888;
    v183 = &off_1E8172AE8;
    sub_1C628E6B8(v185, (_DWORD *)(a1 + 56));
    v187 = *(_BYTE *)(a1 + 336);
    v37 = *(_QWORD *)(v11 - 64);
    v38 = *(_QWORD *)(v11 - 32);
    v177[0] = 0;
    v39 = *(_QWORD *)(a1 + 24);
    v40 = *(unsigned __int8 *)(v37 + 16);
    if (v40 != 21)
    {
      if (v40 < 0x1C)
      {
        if (!*(_BYTE *)(v37 + 16))
          v37 |= 2uLL;
      }
      else
      {
        v41 = v40 - 33;
        v19 = v41 > 0x33;
        v42 = (1 << v41) & 0x8000000000041;
        if (!v19 && v42 != 0)
        {
          v39 = 0;
          v37 |= 1uLL;
        }
      }
    }
    v180 = (void *)v37;
    v181 = v39;
    v81 = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v180, (const llvm::AbstractAttribute *)a1, v177);
    if (!v82)
      goto LABEL_160;
    v83 = v81;
    v75 = a1 + 32;
    if (v81)
    {
      v84 = *(_QWORD *)(a1 + 24);
      v85 = *(unsigned __int8 *)(v38 + 16);
      if (v85 != 21)
      {
        if (v85 < 0x1C)
        {
          if (!*(_BYTE *)(v38 + 16))
            v38 |= 2uLL;
        }
        else
        {
          v86 = v85 - 33;
          v19 = v86 > 0x33;
          v87 = (1 << v86) & 0x8000000000041;
          if (!v19 && v87 != 0)
          {
            v84 = 0;
            v38 |= 1uLL;
          }
        }
      }
      v180 = (void *)v38;
      v181 = v84;
      v107 = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v180, (const llvm::AbstractAttribute *)a1, v177);
      if (!v108)
      {
LABEL_160:
        v64 = 1;
LABEL_286:
        v182 = &off_1E8176888;
        goto LABEL_287;
      }
      v109 = v107;
      if (v107 && *(_BYTE *)(*(_QWORD *)v83 + 8) == 13 && *(_BYTE *)(*(_QWORD *)v107 + 8) == 13)
      {
        v110 = *(unsigned __int8 *)(v83 + 16);
        v111 = v83;
        if (v110 != 21)
        {
          if (v110 < 0x1C)
          {
            if (*(_BYTE *)(v83 + 16))
              v111 = v83;
            else
              v111 = v83 | 2;
          }
          else
          {
            v112 = v110 - 33;
            v111 = v83;
            if (v112 <= 0x33)
            {
              v111 = v83;
              if (((1 << v112) & 0x8000000000041) != 0)
                v111 = v83 | 1;
            }
          }
        }
        v129 = sub_1C56AA6B8((uint64_t)a2, v111, 0, a1, 0);
        if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)v129 + 4) + 16))((uint64_t)v129 + 32) & 1) != 0)
        {
          v130 = *(unsigned __int8 *)(v109 + 16);
          if (v130 != 21)
          {
            if (v130 < 0x1C)
            {
              if (!*(_BYTE *)(v109 + 16))
                v109 |= 2uLL;
            }
            else
            {
              v131 = v130 - 33;
              if (v131 <= 0x33 && ((1 << v131) & 0x8000000000041) != 0)
                v109 |= 1uLL;
            }
          }
          v147 = sub_1C56AA6B8((uint64_t)a2, v109, 0, a1, 0);
          if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)v147 + 4) + 16))((uint64_t)v147 + 32) & 1) != 0)
          {
            LODWORD(v181) = *(_DWORD *)(*(_QWORD *)v83 + 8) >> 8;
            if (v181 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v180, 0, 0);
            else
              v180 = 0;
            if (*((_BYTE *)v129 + 336) && *((_BYTE *)v147 + 336))
            {
              if ((sub_1C56AAAA0(a1, *(_BYTE *)(v11 + 16), (const void **)&v180, (llvm::APInt *)&v180) & 1) == 0)
              {
LABEL_322:
                v169 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 40))(a1 + 32);
LABEL_323:
                v64 = v169;
                if (v181 >= 0x41 && v180)
                  MEMORY[0x1CAA32F9C](v180, 0x1000C8000313F17);
                goto LABEL_286;
              }
            }
            else if (*((_BYTE *)v129 + 336))
            {
              v170 = *((unsigned int *)v147 + 50);
              if ((_DWORD)v170)
              {
                v171 = (llvm::APInt *)*((_QWORD *)v147 + 24);
                v172 = 16 * v170;
                while ((sub_1C56AAAA0(a1, *(_BYTE *)(v11 + 16), (const void **)&v180, v171) & 1) != 0)
                {
                  v171 = (llvm::APInt *)((char *)v171 + 16);
                  v172 -= 16;
                  if (!v172)
                    goto LABEL_335;
                }
                goto LABEL_322;
              }
            }
            else
            {
              v148 = (const void **)*((_QWORD *)v129 + 24);
              v149 = *((unsigned int *)v129 + 50);
              if (*((_BYTE *)v147 + 336))
              {
                if ((_DWORD)v149)
                {
                  v173 = 16 * v149;
                  while ((sub_1C56AAAA0(a1, *(_BYTE *)(v11 + 16), v148, (llvm::APInt *)&v180) & 1) != 0)
                  {
                    v148 += 2;
                    v173 -= 16;
                    if (!v173)
                      goto LABEL_335;
                  }
                  goto LABEL_322;
                }
              }
              else if ((_DWORD)v149)
              {
                v150 = &v148[2 * v149];
                while (1)
                {
                  v151 = *((unsigned int *)v147 + 50);
                  if ((_DWORD)v151)
                    break;
LABEL_276:
                  v148 += 2;
                  if (v148 == v150)
                    goto LABEL_335;
                }
                v152 = (llvm::APInt *)*((_QWORD *)v147 + 24);
                v153 = 16 * v151;
                while ((sub_1C56AAAA0(a1, *(_BYTE *)(v11 + 16), v148, v152) & 1) != 0)
                {
                  v152 = (llvm::APInt *)((char *)v152 + 16);
                  v153 -= 16;
                  if (!v153)
                    goto LABEL_276;
                }
                goto LABEL_322;
              }
            }
LABEL_335:
            v169 = sub_1C628E5F8((uint64_t)&v182, a1 + 32);
            goto LABEL_323;
          }
        }
      }
    }
    goto LABEL_284;
  }
  if (v5 < 0x1C || v7 != 83)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  v184 = *(_WORD *)(a1 + 48);
  v182 = &off_1E8176888;
  v183 = &off_1E8172AE8;
  sub_1C628E6B8(v185, (_DWORD *)(a1 + 56));
  v187 = *(_BYTE *)(a1 + 336);
  v44 = *(_DWORD *)(v6 + 20) & 0x7FFFFFF;
  if (!(_DWORD)v44)
  {
LABEL_58:
    v45 = sub_1C628E5F8((uint64_t)&v182, a1 + 32);
    goto LABEL_111;
  }
  v46 = 0;
  v47 = 32 * v44;
  while (1)
  {
    v48 = *(_DWORD *)(v6 + 20);
    if ((v48 & 0x40000000) != 0)
      v49 = *(_QWORD *)(v6 - 8);
    else
      v49 = v6 - 32 * (v48 & 0x7FFFFFF);
    v50 = *(_QWORD *)(v49 + v46);
    v177[0] = 0;
    v51 = *(_QWORD *)(a1 + 24);
    v52 = *(unsigned __int8 *)(v50 + 16);
    if (v52 != 21)
    {
      if (v52 < 0x1C)
      {
        if (!*(_BYTE *)(v50 + 16))
          v50 |= 2uLL;
      }
      else
      {
        v53 = v52 - 33;
        v19 = v53 > 0x33;
        v54 = (1 << v53) & 0x8000000000041;
        if (!v19 && v54 != 0)
        {
          v51 = 0;
          v50 |= 1uLL;
        }
      }
    }
    v180 = (void *)v50;
    v181 = v51;
    v56 = llvm::Attributor::getAssumedSimplified(a2, (const llvm::IRPosition *)&v180, (const llvm::AbstractAttribute *)a1, v177);
    if (!v57)
      goto LABEL_84;
    v58 = v56;
    if (!v56)
      break;
    v59 = *(unsigned __int8 *)(v56 + 16);
    if (v59 != 21)
    {
      if (v59 < 0x1C)
      {
        if (!*(_BYTE *)(v56 + 16))
          v58 = v56 | 2;
      }
      else
      {
        v60 = v59 - 33;
        if (v60 <= 0x33 && ((1 << v60) & 0x8000000000041) != 0)
          v58 = v56 | 1;
      }
    }
    v61 = sub_1C56AA6B8((uint64_t)a2, v58, 0, a1, 0);
    if (!(*(unsigned int (**)(uint64_t))(*((_QWORD *)v61 + 4) + 16))((uint64_t)v61 + 32))
      break;
    if (*((_BYTE *)v61 + 336))
      *(_BYTE *)(a1 + 336) = *(_DWORD *)(a1 + 200) == 0;
    else
      sub_1C628E8DC(a1 + 32, (uint64_t)v61 + 32);
LABEL_84:
    v46 += 32;
    if (v47 == v46)
      goto LABEL_58;
  }
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
LABEL_111:
  v64 = v45;
  v182 = &off_1E8176888;
  sub_1C618E390(v186);
LABEL_288:
  sub_1C628E3CC((uint64_t)v185);
  return v64;
}

uint64_t *sub_1C56A9D18(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E8176888;
  v2 = a1 + 24;
  sub_1C618E390((char **)(a1 + 160));
  sub_1C628E3CC(v2);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56A9D68(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8176888;
  sub_1C618E390((char **)(a1 + 160));
  sub_1C628E3CC(a1 + 24);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56A9DCC(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t *v4;

  v4 = 0;
  result = sub_1C62883D4(a2, (uint64_t *)(a1 + 16), &v4);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  return result;
}

uint64_t sub_1C56A9E1C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;

  if ((*(_BYTE *)result & 1) != 0)
  {
    v2 = result + 8;
    v1 = 8;
  }
  else
  {
    v1 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v1)
      return result;
    v2 = *(_QWORD *)(result + 8);
  }
  v3 = 16 * v1;
  v4 = (_DWORD *)(v2 + 8);
  do
  {
    if (*v4 >= 0x41u)
    {
      result = *((_QWORD *)v4 - 1);
      if (result)
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
    v4 += 4;
    v3 -= 16;
  }
  while (v3);
  return result;
}

uint64_t sub_1C56A9E90(uint64_t a1, llvm *this, _QWORD *a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  const void *v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t result;
  _QWORD *v17;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v17 = a3;
    v5 = 8;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v13 = 0;
      result = 0;
      goto LABEL_22;
    }
    v17 = a3;
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = llvm::hash_value(this, this);
  v7 = 0;
  v8 = v5 - 1;
  v9 = *((unsigned int *)this + 2);
  v10 = *(const void **)this;
  for (i = 1; ; ++i)
  {
    v12 = v6 & v8;
    v13 = v4 + 16 * (v6 & v8);
    v14 = *(_DWORD *)(v13 + 8);
    if ((_DWORD)v9 == v14)
    {
      if (v9 > 0x40)
      {
        if (!memcmp(v10, *(const void **)v13, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8))
        {
LABEL_18:
          result = 1;
          goto LABEL_21;
        }
      }
      else if (v10 == *(const void **)v13)
      {
        goto LABEL_18;
      }
    }
    if (v14)
    {
      v15 = 0;
      goto LABEL_13;
    }
    if (!*(_QWORD *)v13)
      break;
    v15 = *(_QWORD *)v13 == 1;
LABEL_13:
    if (v15 && v7 == 0)
      v7 = v4 + 16 * v12;
    v6 = v12 + i;
  }
  result = 0;
  if (v7)
    v13 = v7;
LABEL_21:
  a3 = v17;
LABEL_22:
  *a3 = v13;
  return result;
}

uint64_t sub_1C56A9FC4(_DWORD *a1, llvm *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 8;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_11;
  }
  if (v6 + ~v5 - a1[1] <= v6 >> 3)
  {
LABEL_11:
    sub_1C56AA084((uint64_t)a1, v6);
    v8 = 0;
    sub_1C56A9E90((uint64_t)a1, a2, &v8);
    a3 = v8;
  }
  *a1 += 2;
  if (*(_DWORD *)(a3 + 8) || *(_QWORD *)a3)
    --a1[1];
  return a3;
}

int *sub_1C56AA084(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  llvm *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v14 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C56AA200((int *)a1, v6, (llvm *)((char *)v6 + 16 * v7));
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = (llvm *)v15;
  do
  {
    v10 = a1 + v8;
    v11 = *(_DWORD *)(a1 + v8 + 16);
    if (v11 || *(_QWORD *)(v10 + 8) >= 2uLL)
    {
      *((_DWORD *)v9 + 2) = v11;
      *(_QWORD *)v9 = *(_QWORD *)(v10 + 8);
      v9 = (llvm *)((char *)v9 + 16);
      *(_DWORD *)(v10 + 16) = 0;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  return sub_1C56AA200((int *)a1, (llvm *)v15, v9);
}

int *sub_1C56AA200(int *result, llvm *this, llvm *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  int *v8;
  int *v9;
  int **v10;
  int **v11;

  v5 = result;
  v6 = *result;
  *(_QWORD *)result = *result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = result + 2;
    v9 = result + 34;
  }
  else
  {
    v7 = result[4];
    if (!(_DWORD)v7)
      goto LABEL_16;
    v8 = (int *)*((_QWORD *)result + 1);
    v9 = &v8[4 * v7];
  }
  do
  {
    v8[2] = 0;
    *(_QWORD *)v8 = 0;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_16:
  while (this != a3)
  {
    if (*((_DWORD *)this + 2) || *(_QWORD *)this >= 2uLL)
    {
      v11 = 0;
      result = (int *)sub_1C56A9E90((uint64_t)v5, this, &v11);
      v10 = v11;
      if (*((_DWORD *)v11 + 2) >= 0x41u)
      {
        result = *v11;
        if (*v11)
          result = (int *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      }
      *v10 = *(int **)this;
      *((_DWORD *)v10 + 2) = *((_DWORD *)this + 2);
      *((_DWORD *)this + 2) = 0;
      *v5 += 2;
      if (*((_DWORD *)this + 2) >= 0x41u)
      {
        result = *(int **)this;
        if (*(_QWORD *)this)
          result = (int *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      }
    }
    this = (llvm *)((char *)this + 16);
  }
  return result;
}

_DWORD *sub_1C56AA31C(_DWORD *result, _DWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const void **v11;
  unsigned int v12;
  void *v13;

  v3 = result;
  v4 = 0;
  v5 = 0;
  v6 = *a2 & 0xFFFFFFFE | *result & 1;
  *result = v6;
  result[1] = a2[1];
  v7 = result + 2;
  v8 = a2 + 2;
  if ((v6 & 1) != 0)
    goto LABEL_4;
  while (v5 < v3[4])
  {
    v9 = (_QWORD *)*v7;
    while (1)
    {
      v10 = v8;
      if ((*(_BYTE *)a2 & 1) == 0)
        v10 = (_QWORD *)*v8;
      v11 = (const void **)&v10[v4];
      v12 = v10[v4 + 1];
      LODWORD(v9[v4 + 1]) = v12;
      if (v12 > 0x40)
      {
        v13 = (void *)operator new[]();
        v9[v4] = v13;
        result = memcpy(v13, *v11, (((unint64_t)LODWORD(v9[v4 + 1]) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v9[v4] = *v11;
      }
      ++v5;
      v4 += 2;
      if ((*v3 & 1) == 0)
        break;
LABEL_4:
      v9 = v7;
      if (v5 >= 8)
        return result;
    }
  }
  return result;
}

uint64_t sub_1C56AA42C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void *v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  void **i;
  uint64_t v20;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        sub_1C56AA5F0(*(_QWORD *)a2, *(_QWORD *)a2 + 16 * v4, *(void ***)a1);
        v10 = v9;
        v11 = *(void ***)a1;
        v5 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v11 = *(void ***)a1;
        v10 = *(void ***)a1;
      }
      for (i = &v11[2 * v5]; i != v10; i -= 2)
      {
        if (*((_DWORD *)i - 2) >= 0x41u)
        {
          v20 = (uint64_t)*(i - 2);
          if (v20)
            MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
        }
      }
      goto LABEL_22;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        sub_1C56AA5F0(*(_QWORD *)a2, *(_QWORD *)a2 + 16 * v5, *(void ***)a1);
        goto LABEL_16;
      }
    }
    else
    {
      if ((_DWORD)v5)
      {
        v6 = *(void ***)a1;
        v7 = 2 * v5;
        do
        {
          if (LODWORD(v6[v7 - 1]) >= 0x41)
          {
            v8 = v6[v7 - 2];
            if (v8)
              MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
          }
          v7 -= 2;
        }
        while (v7 * 8);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C4DF5FEC(a1, v4);
    }
    v5 = 0;
LABEL_16:
    v12 = *(unsigned int *)(a2 + 8);
    if (v5 != v12)
    {
      v13 = *(_QWORD *)a2 + 16 * v5;
      v14 = (unsigned int *)(*(_QWORD *)a1 + 16 * v5 + 8);
      v15 = 16 * v12 - 16 * v5;
      do
      {
        v16 = *(_DWORD *)(v13 + 8);
        *v14 = v16;
        if (v16 > 0x40)
        {
          v17 = (void *)operator new[]();
          *((_QWORD *)v14 - 1) = v17;
          memcpy(v17, *(const void **)v13, (((unint64_t)*v14 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *((_QWORD *)v14 - 1) = *(_QWORD *)v13;
        }
        v13 += 16;
        v14 += 4;
        v15 -= 16;
      }
      while (v15);
    }
LABEL_22:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1C56AA5F0(uint64_t a1, uint64_t a2, void **this)
{
  uint64_t v4;
  uint64_t v6;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      if (*((_DWORD *)this + 2) > 0x40u || *(_DWORD *)(v4 + 8) > 0x40u)
      {
        if ((void **)v4 != this)
        {
          llvm::APInt::reallocate((uint64_t)this, *(_DWORD *)(v4 + 8));
          v6 = *((unsigned int *)this + 2);
          if (v6 <= 0x40)
            *this = *(void **)v4;
          else
            memcpy(*this, *(const void **)v4, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
      else
      {
        *this = *(void **)v4;
        *((_DWORD *)this + 2) = *(_DWORD *)(v4 + 8);
      }
      v4 += 16;
      this += 2;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

llvm::AbstractAttribute *sub_1C56AA6B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  llvm::Attributor *v9;
  llvm::AbstractAttribute *v10;
  uint64_t v11;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t *v17;
  uint64_t v18;
  _BOOL4 v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  void *p_p;
  void **v27;
  uint64_t *v28;
  const void *v29;
  size_t v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  void *v35[2];
  char v36;
  __int128 v37;
  void *__p;
  __int128 v39;

  if (byte_1ED831CE0)
    v8 = a3;
  else
    v8 = 0;
  *(_QWORD *)&v37 = a2;
  *((_QWORD *)&v37 + 1) = v8;
  __p = &llvm::AAPotentialConstantValues::ID;
  v39 = v37;
  v35[0] = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&__p, (uint64_t **)v35) & 1) != 0)
  {
    v10 = (llvm::AbstractAttribute *)*((_QWORD *)v35[0] + 3);
    if (v10)
    {
      if (!a4 || a5 == 2)
        return v10;
      goto LABEL_8;
    }
  }
  v10 = (llvm::AbstractAttribute *)llvm::AAPotentialConstantValues::createForPosition((llvm::AAPotentialConstantValues *)&v37, (const llvm::IRPosition *)a1, v9);
  sub_1C628E7D8(a1, (uint64_t)v10);
  v13 = *(uint64_t **)(a1 + 5480);
  if (v13)
  {
    __p = &llvm::AAPotentialConstantValues::ID;
    v35[0] = 0;
    v14 = sub_1C614F7B0(v13, &__p, v35) ^ 1;
  }
  else
  {
    v14 = 0;
  }
  v15 = v37 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v37 & 3) == 0)
    v15 = *(_QWORD *)(v15 + 24);
  v16 = *(unsigned __int8 *)(v15 + 16);
  if (!*(_BYTE *)(v15 + 16))
  {
LABEL_21:
    v18 = *(_QWORD *)(v15 + 112);
    if (v18 && ((*(_BYTE *)(v18 + 14) & 2) != 0 || (*(_BYTE *)(v18 + 17) & 8) != 0))
    {
      v19 = 1;
    }
    else if (*(_BYTE *)(a1 + 5464))
    {
      v19 = 0;
    }
    else
    {
      v21 = *(_QWORD **)(a1 + 88);
      v22 = sub_1C477672C((uint64_t)v21, v15);
      v23 = v21[1];
      v24 = 16;
      if (v23 == *v21)
        v24 = 20;
      v19 = v22 == (_QWORD *)(v23 + 8 * *(unsigned int *)((char *)v21 + v24));
    }
    v20 = 0;
    if (v19 | v14)
      goto LABEL_60;
    goto LABEL_34;
  }
  if (v16 == 21)
  {
    v17 = (unint64_t *)(v15 + 24);
  }
  else
  {
    if (v16 < 0x1C)
    {
      v15 = 0;
      goto LABEL_28;
    }
    v17 = (unint64_t *)(*(_QWORD *)(v15 + 40) + 56);
  }
  v15 = *v17;
  if (*v17)
    goto LABEL_21;
LABEL_28:
  v20 = 1;
  if ((v14 & 1) != 0)
    goto LABEL_60;
LABEL_34:
  if (*(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
  {
LABEL_60:
    v32 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v10 + 40))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    return v10;
  }
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v10 + 72))(v35, v10);
  if (v36 >= 0)
    v25 = v36 & 0x7F;
  else
    v25 = (size_t)v35[1];
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v25 + 12);
  if (v39 < 0)
    p_p = __p;
  if (v25)
  {
    if (v36 >= 0)
      v27 = v35;
    else
      v27 = (void **)v35[0];
    memmove(p_p, v27, v25);
  }
  strcpy((char *)p_p + v25, "::initialize");
  v28 = (uint64_t *)off_1EF8EEB50();
  if (*v28)
  {
    if (v39 >= 0)
      v29 = &__p;
    else
      v29 = __p;
    if (v39 >= 0)
      v30 = HIBYTE(v39) & 0x7F;
    else
      v30 = v39;
    llvm::timeTraceProfilerBegin(v29, v30, (uint64_t)"", 0);
  }
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  if (v36 < 0)
    operator delete(v35[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v10 + 24))(v10, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v28)
  {
    sub_1C6392DC0(*v28);
    if ((v20 & 1) != 0)
      goto LABEL_59;
  }
  else if ((v20 & 1) != 0)
  {
    goto LABEL_59;
  }
  v33 = *(uint64_t **)(a1 + 80);
  __p = (void *)v15;
  v35[0] = 0;
  if ((sub_1C614F7B0(v33, &__p, v35) & 1) == 0)
  {
    v34 = *(uint64_t **)(a1 + 80);
    __p = (void *)sub_1C5676C10((llvm::IRPosition *)&v37);
    v35[0] = 0;
    if ((sub_1C614F7B0(v34, &__p, v35) & 1) == 0)
      goto LABEL_60;
  }
LABEL_59:
  v31 = *(_DWORD *)(a1 + 4368);
  if (v31 == 2)
    goto LABEL_60;
  *(_DWORD *)(a1 + 4368) = 1;
  llvm::Attributor::updateAA((llvm::Attributor *)a1, v10);
  *(_DWORD *)(a1 + 4368) = v31;
  if (!a4)
    return v10;
LABEL_8:
  v11 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v10 + 40))(v10);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
    llvm::Attributor::recordDependence(a1, (uint64_t)v10, a4, a5);
  return v10;
}

uint64_t sub_1C56AAAA0(uint64_t a1, char a2, const void **this, llvm::APInt *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BOOL4 v42;
  unint64_t v43;
  unsigned int v44;
  void *v45;
  unsigned int v46;
  size_t v47;
  uint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v62;
  unsigned int v63;

  switch(a2)
  {
    case ')':
      v17 = *((unsigned int *)this + 2);
      if (v17 < 0x41)
      {
        v18 = (unint64_t)*this + *(_QWORD *)a4;
        goto LABEL_31;
      }
      v27 = (void *)operator new[]();
      memcpy(v27, *this, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
      v28 = 0;
      v29 = *(uint64_t **)a4;
      v30 = (unint64_t)(v17 + 63) >> 6;
      v31 = (unint64_t *)v27;
      v32 = v30;
      do
      {
        v33 = *v29++;
        v34 = v33 + *v31;
        v35 = v34 + 1 <= *v31;
        if (v28)
        {
          ++v34;
          v28 = v35;
        }
        else
        {
          v28 = v34 < *v31;
        }
        *v31++ = v34;
        --v32;
      }
      while (v32);
      goto LABEL_61;
    case '+':
      v17 = *((unsigned int *)this + 2);
      if (v17 < 0x41)
      {
        v18 = (unint64_t)*this - *(_QWORD *)a4;
LABEL_31:
        v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
        if (!(_DWORD)v17)
          v19 = 0;
        goto LABEL_44;
      }
      v27 = (void *)operator new[]();
      memcpy(v27, *this, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
      v36 = 0;
      v37 = *(unint64_t **)a4;
      v30 = (unint64_t)(v17 + 63) >> 6;
      v38 = (unint64_t *)v27;
      v39 = v30;
      do
      {
        v40 = *v37++;
        v41 = *v38 - v40;
        v42 = *v38 < v40;
        v43 = *v38 + ~v40;
        if (v36)
        {
          v36 = v43 >= *v38;
        }
        else
        {
          v43 = v41;
          v36 = v42;
        }
        *v38++ = v43;
        --v39;
      }
      while (v39);
LABEL_61:
      *((_QWORD *)v27 + (v30 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
      goto LABEL_75;
    case '-':
      llvm::APInt::operator*((uint64_t)this, a4, (uint64_t)&v62);
      goto LABEL_76;
    case '/':
      v7 = *((_DWORD *)a4 + 2);
      if (v7 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(a4) == v7)
          goto LABEL_24;
      }
      else if (!*(_QWORD *)a4)
      {
        goto LABEL_24;
      }
      llvm::APInt::udiv((llvm::APInt *)this, a4, (llvm::APInt *)&v62);
      goto LABEL_76;
    case '0':
      v10 = *((_DWORD *)a4 + 2);
      if (v10 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(a4) == v10)
          goto LABEL_24;
      }
      else if (!*(_QWORD *)a4)
      {
        goto LABEL_24;
      }
      llvm::APInt::sdiv((llvm::APInt *)this, (const void **)a4, (llvm::APInt *)&v62);
      goto LABEL_76;
    case '2':
      v11 = *((_DWORD *)a4 + 2);
      if (v11 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(a4) == v11)
          goto LABEL_24;
      }
      else if (!*(_QWORD *)a4)
      {
        goto LABEL_24;
      }
      llvm::APInt::urem((llvm::APInt *)this, a4, (llvm::APInt *)&v62);
      goto LABEL_76;
    case '3':
      v12 = *((_DWORD *)a4 + 2);
      if (v12 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(a4) != v12)
          goto LABEL_49;
LABEL_24:
        v15 = *((unsigned int *)this + 2);
        v63 = v15;
        if (v15 > 0x40)
        {
          v16 = ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8;
          v62 = operator new[]();
          memcpy((void *)v62, *this, v16);
        }
        else
        {
          v62 = (uint64_t)*this;
        }
        goto LABEL_77;
      }
      if (!*(_QWORD *)a4)
        goto LABEL_24;
LABEL_49:
      llvm::APInt::srem((llvm::APInt *)this, (const void **)a4, (llvm::APInt *)&v62);
LABEL_76:
      sub_1C628E404(a1 + 32, (llvm *)&v62);
LABEL_77:
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
      v14 = (void *)v62;
      if (v63 >= 0x41 && v62 != 0)
LABEL_81:
        MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
      return v9;
    case '5':
      v20 = *((unsigned int *)this + 2);
      v63 = v20;
      if (v20 > 0x40)
      {
        v21 = (void *)operator new[]();
        memcpy(v21, *this, ((v20 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v21 = (void *)*this;
      }
      v62 = (uint64_t)v21;
      v44 = sub_1C47EE5B8((uint64_t ***)a4, v20);
      sub_1C4888094((uint64_t)&v62, v44);
      goto LABEL_76;
    case '6':
      v22 = *((unsigned int *)this + 2);
      v63 = v22;
      if (v22 > 0x40)
      {
        v45 = (void *)operator new[]();
        memcpy(v45, *this, ((v22 + 63) >> 3) & 0x3FFFFFF8);
        v62 = (uint64_t)v45;
        v46 = sub_1C47EE5B8((uint64_t ***)a4, v22);
        llvm::APInt::tcShiftRight((llvm::APInt *)v45, (unint64_t *)((v22 + 63) >> 6), v46);
      }
      else
      {
        v23 = (unint64_t)*this;
        v24 = sub_1C47EE5B8((uint64_t ***)a4, v22);
        if ((_DWORD)v22 == v24)
          v62 = 0;
        else
          v62 = v23 >> v24;
      }
      goto LABEL_76;
    case '7':
      v25 = *((unsigned int *)this + 2);
      v63 = v25;
      if (v25 > 0x40)
      {
        v47 = ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8;
        v26 = (void *)operator new[]();
        memcpy(v26, *this, v47);
      }
      else
      {
        v26 = (void *)*this;
      }
      v62 = (uint64_t)v26;
      llvm::APInt::ashrInPlace((llvm::APInt *)&v62, (uint64_t ***)a4);
      goto LABEL_76;
    case '8':
      v17 = *((unsigned int *)this + 2);
      if (v17 > 0x40)
      {
        v27 = (void *)operator new[]();
        memcpy(v27, *this, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
        v48 = *(uint64_t **)a4;
        v49 = (unint64_t)(v17 + 63) >> 6;
        v50 = v27;
        do
        {
          v51 = *v48++;
          *v50++ &= v51;
          --v49;
        }
        while (v49);
      }
      else
      {
        v18 = (unint64_t)*this;
        v19 = *(_QWORD *)a4;
LABEL_44:
        v27 = (void *)(v19 & v18);
      }
LABEL_75:
      v63 = v17;
      v62 = (uint64_t)v27;
      goto LABEL_76;
    case '9':
      v17 = *((unsigned int *)this + 2);
      if (v17 > 0x40)
      {
        v27 = (void *)operator new[]();
        memcpy(v27, *this, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
        v52 = *(uint64_t **)a4;
        v53 = (unint64_t)(v17 + 63) >> 6;
        v54 = v27;
        do
        {
          v55 = *v52++;
          *v54++ |= v55;
          --v53;
        }
        while (v53);
      }
      else
      {
        v27 = (void *)(*(_QWORD *)a4 | (unint64_t)*this);
      }
      goto LABEL_75;
    case ':':
      v17 = *((unsigned int *)this + 2);
      if (v17 > 0x40)
      {
        v27 = (void *)operator new[]();
        memcpy(v27, *this, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
        v56 = *(uint64_t **)a4;
        v57 = (unint64_t)(v17 + 63) >> 6;
        v58 = v27;
        do
        {
          v59 = *v56++;
          *v58++ ^= v59;
          --v57;
        }
        while (v57);
      }
      else
      {
        v27 = (void *)(*(_QWORD *)a4 ^ (unint64_t)*this);
      }
      goto LABEL_75;
    default:
      v8 = *((unsigned int *)this + 2);
      v63 = v8;
      if (v8 < 0x41)
        return 0;
      v13 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
      v14 = (void *)operator new[]();
      v62 = (uint64_t)v14;
      memcpy(v14, *this, v13);
      v9 = 0;
      goto LABEL_81;
  }
}

uint64_t sub_1C56AB148(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &off_1E8176888;
  v2 = a1 + 56;
  sub_1C618E390((char **)(a1 + 192));
  sub_1C628E3CC(v2);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C56AB1A0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &off_1E8176888;
  v2 = a1 + 56;
  sub_1C618E390((char **)(a1 + 192));
  sub_1C628E3CC(v2);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56AB208(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  unint64_t *v9;
  int v10;
  BOOL v11;
  unint64_t *v12;

  v2 = result;
  v3 = *(_QWORD *)(result + 16) & 3;
  v4 = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = v4;
  if (v3 == 3)
    v5 = *(_QWORD *)(v4 + 24);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (*(_BYTE *)(v5 + 16))
  {
    if (v6 == 21)
    {
      v7 = (_QWORD *)(v5 + 24);
    }
    else
    {
      if (v6 < 0x1C)
        goto LABEL_27;
      v7 = (_QWORD *)(*(_QWORD *)(v5 + 40) + 56);
    }
    if (!*v7)
      goto LABEL_27;
  }
  if (v3 == 3)
    v4 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(v4 + 16);
  if (*(_BYTE *)(v4 + 16))
  {
    if (v8 == 21)
    {
      v9 = (unint64_t *)(v4 + 24);
    }
    else
    {
      if (v8 <= 0x1B)
      {
        v4 = 0;
        v10 = MEMORY[0x10];
        goto LABEL_24;
      }
      v9 = (unint64_t *)(*(_QWORD *)(v4 + 40) + 56);
    }
    v4 = *v9;
    v10 = *(unsigned __int8 *)(v4 + 16);
    if (v4)
      v11 = v10 == 3;
    else
      v11 = 0;
    if (!v11)
    {
LABEL_24:
      if (v10)
        goto LABEL_29;
      goto LABEL_25;
    }
    if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) != 0)
      goto LABEL_29;
LABEL_27:
    *(_BYTE *)(result + 49) = *(_BYTE *)(result + 48);
    return result;
  }
LABEL_25:
  if (*(_QWORD *)(v4 + 72) == v4 + 72 && (*(_BYTE *)(v4 + 34) & 0x80) == 0)
    goto LABEL_27;
LABEL_29:
  v12 = 0;
  result = sub_1C62883D4(a2, (uint64_t *)(result + 16), &v12);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 32) + 40))(v2 + 32);
  return result;
}

void sub_1C56AB330()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F31A8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F31A8))
      __cxa_guard_release(&qword_1EF8F31A8);
  }
}

uint64_t sub_1C56AB370(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t v7;
  char v9;
  _QWORD v10[4];
  int v11;
  uint64_t (**v12)();
  uint64_t (**v13)();
  __int16 v14;
  _QWORD v15[17];
  char *v16[2];
  uint64_t v17;
  char v18;
  uint64_t (**v19)();
  uint64_t (**v20)();
  __int16 v21;
  _QWORD v22[17];
  char *v23;
  char v24;
  _QWORD v25[2];
  unsigned __int8 v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v4 = 0;
  v14 = 256;
  v12 = &off_1E8176888;
  v13 = &off_1E8172AE8;
  v15[0] = 1;
  do
  {
    v5 = &(&v12)[v4];
    *((_DWORD *)v5 + 10) = 0;
    v5[4] = 0;
    v4 += 2;
  }
  while (v4 != 16);
  v16[0] = (char *)&v17;
  v16[1] = (char *)0x800000000;
  v18 = 0;
  LOBYTE(v25[0]) = 0;
  v29 = 0;
  v11 = sub_1C628686C((llvm::IRPosition *)(a1 + 16), 0);
  v10[0] = &v11;
  v10[1] = a2;
  v10[2] = a1;
  v10[3] = v25;
  if ((llvm::Attributor::checkForAllCallSites(a2, sub_1C56AB630, (uint64_t)v10, a1, 1, &v9) & 1) != 0)
  {
    if (!v29)
      goto LABEL_9;
    ((void (*)(uint64_t (***)(), _QWORD))v13[6])(&v13, v26);
    sub_1C628E8DC((uint64_t)&v12, (uint64_t)v25);
    v21 = v14;
    v19 = &off_1E8176888;
    v20 = &off_1E8172AE8;
    sub_1C628E6B8(v22, v15);
    v24 = v18;
    v19 = &off_1E8176888;
    sub_1C618E390(&v23);
    sub_1C628E3CC((uint64_t)v22);
  }
  else
  {
    ((void (*)(uint64_t (***)()))v12[5])(&v12);
  }
  if (v29)
  {
    v25[0] = &off_1E8176888;
    sub_1C618E390(&v28);
    sub_1C628E3CC((uint64_t)&v27);
  }
LABEL_9:
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = sub_1C628E9B4(v6, (uint64_t)&v12);
  v12 = &off_1E8176888;
  sub_1C618E390(v16);
  sub_1C628E3CC((uint64_t)v15);
  return v7;
}

uint64_t *sub_1C56AB57C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E8176888;
  v2 = a1 + 24;
  sub_1C618E390((char **)(a1 + 160));
  sub_1C628E3CC(v2);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56AB5CC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8176888;
  sub_1C618E390((char **)(a1 + 160));
  sub_1C628E3CC(a1 + 24);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56AB630(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::AbstractAttribute *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)();
  uint64_t v19;
  char *v20[20];

  v20[19] = *(char **)MEMORY[0x1E0C80C00];
  v3 = *a2;
  v10 = *a2;
  v11 = &v13;
  v12 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)&v11, (uint64_t)(a2 + 1));
    v13 = v10;
    v14 = &v16;
    v15 = 0;
    if ((_DWORD)v12)
      sub_1C614CA14((uint64_t)&v14, (uint64_t)&v11);
  }
  else
  {
    v13 = v3;
    v14 = &v16;
    v15 = 0;
  }
  v16 = sub_1C628D358((uint64_t)&v13, **(_DWORD **)a1);
  v17 = v4;
  if (v14 != &v16)
    free(v14);
  if (sub_1C6283CA4(&v16))
  {
    v7 = sub_1C56AA6B8(*(_QWORD *)(a1 + 8), v16, v17, *(_QWORD *)(a1 + 16), 0);
    v8 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v7 + 48))(v7);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 312))
    {
      sub_1C628EAE0((uint64_t)&v18, v9, v8);
      v18 = &off_1E8176888;
      sub_1C618E390(v20);
      sub_1C628E3CC((uint64_t)&v19);
    }
    else
    {
      sub_1C628EB60(*(_QWORD *)(a1 + 24), v8);
    }
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  }
  else
  {
    v5 = 0;
  }
  if (v11 != &v13)
    free(v11);
  return v5;
}

uint64_t sub_1C56AB7C0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &off_1E8176888;
  v2 = a1 + 56;
  sub_1C618E390((char **)(a1 + 192));
  sub_1C628E3CC(v2);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C56AB818(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &off_1E8176888;
  v2 = a1 + 56;
  sub_1C618E390((char **)(a1 + 192));
  sub_1C628E3CC(v2);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56AB880()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F31B0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F31B0))
      __cxa_guard_release(&qword_1EF8F31B0);
  }
}

uint64_t sub_1C56AB8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t (**v12)();
  __int16 v13;
  _QWORD v14[17];
  char *v15[2];
  uint64_t v16;
  char v17;
  uint64_t (**v18)();
  uint64_t (**v19)();
  __int16 v20;
  _QWORD v21[17];
  char *v22;
  char v23;
  _QWORD v24[2];
  unsigned __int8 v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v4 = 0;
  v13 = 256;
  v11 = &off_1E8176888;
  v12 = &off_1E8172AE8;
  v14[0] = 1;
  do
  {
    v5 = &(&v11)[v4];
    *((_DWORD *)v5 + 10) = 0;
    v5[4] = 0;
    v4 += 2;
  }
  while (v4 != 16);
  v15[0] = (char *)&v16;
  v15[1] = (char *)0x800000000;
  v17 = 0;
  LOBYTE(v24[0]) = 0;
  v28 = 0;
  v9[0] = &v10;
  v9[1] = a2;
  v9[2] = a1;
  v9[3] = v24;
  v10 = 0;
  if ((llvm::Attributor::checkForAllReturnedValues(a2, (uint64_t)sub_1C56ABB64, (uint64_t)v9, a1) & 1) != 0)
  {
    if (!v28)
      goto LABEL_9;
    ((void (*)(uint64_t (***)(), _QWORD))v12[6])(&v12, v25);
    sub_1C628E8DC((uint64_t)&v11, (uint64_t)v24);
    v20 = v13;
    v18 = &off_1E8176888;
    v19 = &off_1E8172AE8;
    sub_1C628E6B8(v21, v14);
    v23 = v17;
    v18 = &off_1E8176888;
    sub_1C618E390(&v22);
    sub_1C628E3CC((uint64_t)v21);
  }
  else
  {
    ((void (*)(uint64_t (***)()))v11[5])(&v11);
  }
  if (v28)
  {
    v24[0] = &off_1E8176888;
    sub_1C618E390(&v27);
    sub_1C628E3CC((uint64_t)&v26);
  }
LABEL_9:
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = sub_1C628E9B4(v6, (uint64_t)&v11);
  v11 = &off_1E8176888;
  sub_1C618E390(v15);
  sub_1C628E3CC((uint64_t)v14);
  return v7;
}

uint64_t *sub_1C56ABAB0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E8176888;
  v2 = a1 + 24;
  sub_1C618E390((char **)(a1 + 160));
  sub_1C628E3CC(v2);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56ABB00(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8176888;
  sub_1C618E390((char **)(a1 + 160));
  sub_1C628E3CC(a1 + 24);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56ABB64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  llvm::AbstractAttribute *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v13)();
  uint64_t v14;
  char *v15[20];

  v15[19] = *(char **)MEMORY[0x1E0C80C00];
  v3 = **(_QWORD **)a1;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 21)
  {
    if (v4 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v5 = v4 - 33;
      v6 = v5 > 0x33;
      v7 = (1 << v5) & 0x8000000000041;
      if (!v6 && v7 != 0)
      {
        v3 = 0;
        a2 |= 1uLL;
      }
    }
  }
  v9 = sub_1C56AA6B8(*(_QWORD *)(a1 + 8), a2, v3, *(_QWORD *)(a1 + 16), 0);
  v10 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v9 + 48))(v9);
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 312))
  {
    sub_1C628EAE0((uint64_t)&v13, v11, v10);
    v13 = &off_1E8176888;
    sub_1C618E390(v15);
    sub_1C628E3CC((uint64_t)&v14);
  }
  else
  {
    sub_1C628EB60(*(_QWORD *)(a1 + 24), v10);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C56ABC84(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &off_1E8176888;
  v2 = a1 + 56;
  sub_1C618E390((char **)(a1 + 192));
  sub_1C628E3CC(v2);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C56ABCDC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &off_1E8176888;
  v2 = a1 + 56;
  sub_1C618E390((char **)(a1 + 192));
  sub_1C628E3CC(v2);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56ABD44()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F31B8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F31B8))
      __cxa_guard_release(&qword_1EF8F31B8);
  }
}

uint64_t sub_1C56ABD84(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v6;
  llvm::AbstractAttribute *v8;
  uint64_t v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v6 = sub_1C5676C10(v4);
  if (!v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  v8 = sub_1C56AA6B8(a2, v6 | 1, 0, a1, 0);
  v9 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v8 + 48))(v8);
  return sub_1C628E9B4(v5, v9);
}

uint64_t *sub_1C56ABE14(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E8176888;
  v2 = a1 + 24;
  sub_1C618E390((char **)(a1 + 160));
  sub_1C628E3CC(v2);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56ABE64(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8176888;
  sub_1C618E390((char **)(a1 + 160));
  sub_1C628E3CC(a1 + 24);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56ABEC8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &off_1E8176888;
  v2 = a1 + 56;
  sub_1C618E390((char **)(a1 + 192));
  sub_1C628E3CC(v2);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C56ABF20(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &off_1E8176888;
  v2 = a1 + 56;
  sub_1C618E390((char **)(a1 + 192));
  sub_1C628E3CC(v2);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56ABF88(uint64_t a1, uint64_t *a2)
{
  llvm::IRPosition *v3;
  unint64_t result;
  int v5;
  unint64_t *v6;

  v3 = (llvm::IRPosition *)(a1 + 16);
  v6 = 0;
  if (sub_1C62883D4(a2, (uint64_t *)(a1 + 16), &v6))
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 24))(a1 + 32);
  if ((result & 1) == 0)
  {
    result = sub_1C6284150(v3);
    v5 = *(unsigned __int8 *)(result + 16);
    if (v5 == 16)
    {
      sub_1C628E404(a1 + 32, (llvm *)(result + 24));
    }
    else
    {
      if ((v5 - 11) > 1)
        return result;
      *(_BYTE *)(a1 + 336) = *(_DWORD *)(a1 + 200) == 0;
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
  }
  return result;
}

void sub_1C56AC04C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F31C0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F31C0))
      __cxa_guard_release(&qword_1EF8F31C0);
  }
}

uint64_t sub_1C56AC08C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  llvm::AbstractAttribute *v10;
  uint64_t v11;
  _QWORD v13[2];
  __int16 v14;
  _QWORD v15[17];
  char *v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  v14 = *(_WORD *)(a1 + 48);
  v13[0] = &off_1E8176888;
  v13[1] = &off_1E8172AE8;
  sub_1C628E6B8(v15, (_DWORD *)(a1 + 56));
  v17 = *(_BYTE *)(a1 + 336);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 != 21)
  {
    if (v5 < 0x1C)
    {
      if (!*(_BYTE *)(v4 + 16))
        v4 |= 2uLL;
    }
    else
    {
      v6 = v5 - 33;
      v7 = v6 > 0x33;
      v8 = (1 << v6) & 0x8000000000041;
      if (!v7 && v8 != 0)
        v4 |= 1uLL;
    }
  }
  v10 = sub_1C56AA6B8(a2, v4, 0, a1, 0);
  sub_1C628E8DC(a1 + 32, (uint64_t)v10 + 32);
  v11 = sub_1C628E5F8((uint64_t)v13, a1 + 32);
  v13[0] = &off_1E8176888;
  sub_1C618E390(&v16);
  sub_1C628E3CC((uint64_t)v15);
  return v11;
}

uint64_t *sub_1C56AC1D8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E8176888;
  v2 = a1 + 24;
  sub_1C618E390((char **)(a1 + 160));
  sub_1C628E3CC(v2);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56AC228(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8176888;
  sub_1C618E390((char **)(a1 + 160));
  sub_1C628E3CC(a1 + 24);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56AC28C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56AC2C0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56AC304(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *j;
  uint64_t v26;
  uint64_t (**v27)();
  __int16 v28;
  uint64_t (**v29)();
  __int16 v30;
  void **v31;
  _QWORD v32[2];
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[6];

  v39[4] = *MEMORY[0x1E0C80C00];
  sub_1C56AC824((uint64_t)a1, a2);
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 40))(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  if ((result & 1) == 0)
  {
    result = sub_1C5676CEC(a1 + 4);
    if (result)
    {
      v6 = result;
      v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 40))(a1);
      v32[0] = 0;
      v32[1] = 0;
      v33 = 0;
      v35 = 0;
      v36 = 0;
      v34 = 0;
      for (i = *(_QWORD **)(sub_1C6284150((llvm::IRPosition *)(a1 + 4)) + 8); i; i = (_QWORD *)i[1])
      {
        v37 = i;
        sub_1C542EB4C(v32, &v37);
      }
      v9 = *(_QWORD *)(a2 + 88) + 136;
      sub_1C56AC8FC((uint64_t)a1, a2, v9, v6, v32, v7);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) & 1) == 0)
      {
        v37 = v39;
        v38 = 0x400000000;
        v31 = &v37;
        sub_1C5694C5C(v9, v6, (unsigned int (*)(uint64_t))sub_1C56ACB48, (uint64_t)&v31);
        v10 = (char *)v37;
        if ((_DWORD)v38)
        {
          v26 = v7;
          v11 = (char *)v37 + 8 * v38;
          do
          {
            v12 = *(_QWORD *)v10;
            v29 = &off_1E8172AE8;
            v30 = 257;
            v13 = *(_DWORD *)(v12 + 20);
            if ((v13 & 0x40000000) != 0)
            {
              v15 = *(_QWORD *)(v12 - 8);
              v14 = v13 & 0x7FFFFFF;
            }
            else
            {
              v14 = v13 & 0x7FFFFFF;
              v15 = v12 - 32 * v14;
            }
            v16 = (_DWORD)v14 == 3;
            if (v14 == v16)
            {
              v17 = 1;
            }
            else
            {
              v18 = v11;
              v19 = (uint64_t *)(v15 + 32 * v14);
              v20 = (uint64_t *)(v15 + 32 * v16);
              do
              {
                v21 = *v20;
                v28 = 256;
                v27 = &off_1E8172AE8;
                v22 = &v35[-v34];
                v23 = *(_QWORD *)(v21 + 48);
                if (v23)
                  v24 = v23 - 24;
                else
                  v24 = 0;
                sub_1C56AC8FC((uint64_t)a1, a2, v9, v24, v32, (uint64_t)&v27);
                for (j = &v22[v34]; v35 != j; j = sub_1C628D264((uint64_t)v32, j))
                  ;
                ((void (*)(uint64_t, char, char))v29[9])((uint64_t)&v29, SHIBYTE(v28), v28);
                v20 += 4;
              }
              while (v20 != v19);
              v17 = v30;
              v11 = v18;
              v7 = v26;
            }
            (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v7 + 56))(v7, v17 != 0);
            v10 += 8;
          }
          while (v10 != v11);
          v10 = (char *)v37;
        }
        if (v10 != (char *)v39)
          free(v10);
      }
      return (unint64_t)sub_1C6176BF8(v32);
    }
  }
  return result;
}

void *sub_1C56AC5B8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "noundef";
  else
    v3 = "may-undef-or-poison";
  if (*(_BYTE *)(a1 + 41))
    v4 = 7;
  else
    v4 = 19;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

uint64_t sub_1C56AC610(const llvm::AbstractAttribute *a1, llvm::Attributor *a2)
{
  const llvm::IRPosition *v4;
  uint64_t v5;
  char v6;
  BOOL v8;

  v8 = 0;
  v4 = (const llvm::AbstractAttribute *)((char *)a1 + 16);
  v5 = 1;
  if ((llvm::Attributor::isAssumedDead((uint64_t)a2, (uint64_t)a1 + 16, 0, 0, &v8, 0, 1) & 1) == 0)
  {
    llvm::Attributor::getAssumedSimplified(a2, v4, a1, &v8);
    if (v6)
      return sub_1C628C768((uint64_t)a1, (uint64_t)a2);
  }
  return v5;
}

void sub_1C56AC6A4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F31C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F31C8))
      __cxa_guard_release(&qword_1EF8F31C8);
  }
}

uint64_t sub_1C56AC6E4(uint64_t *a1, llvm::Attributor *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _BOOL4 v8;
  BOOL v10;
  uint64_t (**v11)();
  __int16 v12;
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a1;
  v12 = 256;
  v11 = &off_1E8172AE8;
  v10 = 0;
  v4 = a1[2];
  v5 = a1[3];
  v6 = sub_1C5676CEC((_DWORD *)a1 + 4);
  if ((sub_1C56958F0(a2, v4, v5, (const llvm::AbstractAttribute *)a1, (uint64_t)&v11, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, BOOL))sub_1C56ACBD0, (uint64_t)v13, v6, &v10) & 1) == 0)return (*(uint64_t (**)(uint64_t *))(a1[4] + 40))(a1 + 4);
  v7 = (_BYTE *)(*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
  v8 = v7[9] == 0;
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v7 + 48))(v7, HIBYTE(v12));
  return v8 ^ (v7[9] != 0);
}

uint64_t *sub_1C56AC7C4(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56AC7DC(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56AC824(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  unint64_t v6;
  int v7;
  uint64_t ***v8;
  int v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v9 = 36;
  if (llvm::IRPosition::hasAttr((llvm::IRPosition *)(a1 + 16), &v9, 1, 0, 0))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
  v6 = sub_1C6284150(v4);
  v7 = *(unsigned __int8 *)(v6 + 16);
  if ((v7 - 11) <= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  if (v7 == 95)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
  v8 = (uint64_t ***)v6;
  if (sub_1C6283CA4(v4) != 2 && sub_1C4F8BE80(v8, 0, 0, 0, 0, 0))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
  else
    return sub_1C628ECB0(a1, a2);
}

uint64_t sub_1C56AC8FC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t ***v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t i;
  uint64_t v35;
  _QWORD v36[2];
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40[2];
  int v41;
  __int128 v42;
  __int128 v43;

  v10 = sub_1C61AA84C(a3, a4);
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  sub_1C4DFE328((uint64_t)v40, v10);
  v11 = *(_OWORD *)(v10 + 40);
  v42 = *(_OWORD *)(v10 + 24);
  v43 = v11;
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  sub_1C4DFE328((uint64_t)v36, a3 + 176);
  v38 = *(_OWORD *)(a3 + 200);
  v39 = *(_OWORD *)(a3 + 216);
  v12 = a5[3];
  if (a5[4] != v12)
  {
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = *(_QWORD *)(v12 + 8 * v13);
      v16 = *(_QWORD *)(v15 + 24);
      if (v16)
        v17 = *(unsigned __int8 *)(v16 + 16) >= 0x1Cu;
      else
        v17 = 0;
      if (!v17 || !sub_1C62844FC(a3, *(_QWORD *)(v15 + 24), v40, v36))
        goto LABEL_7;
      v18 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
      if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
        v18 = *(_QWORD *)(v18 + 24);
      v19 = *(uint64_t ****)v15;
      v20 = *(_QWORD *)(a2 + 88);
      v21 = *(unsigned __int8 *)(v18 + 16);
      if (*(_BYTE *)(v18 + 16))
      {
        if (v21 == 21)
        {
          v22 = (unint64_t *)(v18 + 24);
        }
        else
        {
          if (v21 < 0x1C)
            break;
          v22 = (unint64_t *)(*(_QWORD *)(v18 + 40) + 56);
        }
        v18 = *v22;
        if (!*v22)
          break;
      }
      v23 = **(_QWORD **)(v20 + 440);
      v24 = *(_QWORD *)(v18 + 40);
      if (v23)
        v25 = v24 == 0;
      else
        v25 = 1;
      if (v25)
      {
        v26 = 0;
      }
      else
      {
        v26 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v23, &llvm::DominatorTreeAnalysis::Key, v18) + 8;
        v23 = **(_QWORD **)(v20 + 440);
        v24 = *(_QWORD *)(v18 + 40);
      }
      if (v23)
        v27 = v24 == 0;
      else
        v27 = 1;
      if (v27)
        goto LABEL_30;
      v28 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v23, &llvm::AssumptionAnalysis::Key, v18) + 8;
LABEL_31:
      v29 = sub_1C4F8BE80(v19, v28, v16, v26, 0, 0);
      *(_BYTE *)(a6 + 8) |= v29;
      *(_BYTE *)(a6 + 9) |= v29;
      v30 = *(unsigned __int8 *)(v16 + 16);
      if (v30 == 62 || (v30 - 66) <= 0xC)
      {
        for (i = *(_QWORD *)(v16 + 8); i; i = *(_QWORD *)(i + 8))
        {
          v35 = i;
          sub_1C542EB4C(a5, &v35);
        }
      }
LABEL_7:
      v12 = a5[3];
      v13 = ++v14;
      if (v14 >= (unint64_t)((a5[4] - v12) >> 3))
        goto LABEL_38;
    }
    v26 = 0;
LABEL_30:
    v28 = 0;
    goto LABEL_31;
  }
LABEL_38:
  MEMORY[0x1CAA32FB4](v36[0], 8);
  return MEMORY[0x1CAA32FB4](v40[0], 8);
}

uint64_t sub_1C56ACB48(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a2 && *(_BYTE *)(a2 + 16) == 30 && (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
  {
    v2 = *a1;
    v3 = *(unsigned int *)(*a1 + 8);
    if (v3 >= *(_DWORD *)(*a1 + 12))
    {
      v5 = a2;
      v6 = *a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2, v2 + 16, v3 + 1, 8);
      a2 = v5;
      v2 = v6;
      LODWORD(v3) = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v2 + 8 * v3) = a2;
    ++*(_DWORD *)(v2 + 8);
  }
  return 1;
}

uint64_t sub_1C56ACBD0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  llvm::AbstractAttribute *v15;
  uint64_t v16;

  v7 = *a1;
  v8 = a1[1];
  v10 = *(unsigned __int8 *)(a2 + 16);
  if (v10 != 21)
  {
    if (v10 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v11 = v10 - 33;
      v12 = v11 > 0x33;
      v13 = (1 << v11) & 0x8000000000041;
      if (!v12 && v13 != 0)
        a2 |= 1uLL;
    }
  }
  v15 = sub_1C56878EC(v7, a2, 0, v8, 0, 0, 1);
  if ((a5 & 1) != 0 || (llvm::AbstractAttribute *)v8 != v15)
  {
    v16 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v15 + 48))(v15);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 48))(a4, *(unsigned __int8 *)(v16 + 9));
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 40))(a4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
}

_QWORD *sub_1C56ACCA8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56ACCDC(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56ACD20()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F31D0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F31D0))
      __cxa_guard_release(&qword_1EF8F31D0);
  }
}

uint64_t sub_1C56ACD60(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _BYTE *v6;
  _BOOL4 v7;
  char v9;
  _QWORD v10[4];
  int v11;
  _BYTE v12[16];
  char v13;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v12[0] = 0;
  v13 = 0;
  v11 = sub_1C628686C((llvm::IRPosition *)(a1 + 16), 0);
  v10[0] = &v11;
  v10[1] = a2;
  v10[2] = a1;
  v10[3] = v12;
  v4 = llvm::Attributor::checkForAllCallSites(a2, sub_1C56ACEA4, (uint64_t)v10, a1, 1, &v9);
  v5 = 0;
  if (v4)
  {
    if (v13)
      v5 = v12[9];
    else
      v5 = 1;
  }
  v6 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = v6[9] == 0;
  (*(void (**)(_BYTE *, BOOL))(*(_QWORD *)v6 + 48))(v6, v5 != 0);
  return v7 ^ (v6[9] != 0);
}

uint64_t *sub_1C56ACE44(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56ACE5C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56ACEA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v10 = *a2;
  v11 = &v13;
  v12 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)&v11, (uint64_t)(a2 + 1));
    v13 = v10;
    v14 = &v16;
    v15 = 0;
    if ((_DWORD)v12)
      sub_1C614CA14((uint64_t)&v14, (uint64_t)&v11);
  }
  else
  {
    v13 = v3;
    v14 = &v16;
    v15 = 0;
  }
  v16 = sub_1C628D358((uint64_t)&v13, **(_DWORD **)a1);
  v17 = v4;
  if (v14 != &v16)
    free(v14);
  if (sub_1C6283CA4(&v16))
  {
    v5 = sub_1C56878EC(*(_QWORD *)(a1 + 8), v16, v17, *(_QWORD *)(a1 + 16), 0, 0, 1);
    v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 16))
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 72))(v7, *(unsigned __int8 *)(v6 + 9), *(unsigned __int8 *)(v6 + 8));
    }
    else
    {
      *(_QWORD *)v7 = &unk_1E81792E0;
      *(_WORD *)(v7 + 8) = *(_WORD *)(v6 + 8);
      *(_QWORD *)v7 = &off_1E8172AE8;
      *(_BYTE *)(v7 + 16) = 1;
    }
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  }
  else
  {
    v8 = 0;
  }
  if (v11 != &v13)
    free(v11);
  return v8;
}

_QWORD *sub_1C56AD010(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56AD044(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56AD088()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F31D8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F31D8))
      __cxa_guard_release(&qword_1EF8F31D8);
  }
}

uint64_t sub_1C56AD0C8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _BYTE *v6;
  _BOOL4 v7;
  _QWORD v9[4];
  _BYTE v10[16];
  char v11;
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v12 = 0;
  v10[0] = 0;
  v11 = 0;
  v9[0] = &v12;
  v9[1] = a2;
  v9[2] = a1;
  v9[3] = v10;
  v4 = llvm::Attributor::checkForAllReturnedValues(a2, (uint64_t)sub_1C56AD1F8, (uint64_t)v9, a1);
  v5 = 0;
  if (v4)
  {
    if (v11)
      v5 = v10[9];
    else
      v5 = 1;
  }
  v6 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = v6[9] == 0;
  (*(void (**)(_BYTE *, BOOL))(*(_QWORD *)v6 + 48))(v6, v5 != 0);
  return v7 ^ (v6[9] != 0);
}

uint64_t *sub_1C56AD198(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56AD1B0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56AD1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  llvm::AbstractAttribute *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = **(_QWORD **)a1;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 21)
  {
    if (v4 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v5 = v4 - 33;
      v6 = v5 > 0x33;
      v7 = (1 << v5) & 0x8000000000041;
      if (!v6 && v7 != 0)
      {
        v3 = 0;
        a2 |= 1uLL;
      }
    }
  }
  v9 = sub_1C56878EC(*(_QWORD *)(a1 + 8), a2, v3, *(_QWORD *)(a1 + 16), 0, 0, 1);
  v10 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v9 + 48))(v9);
  v11 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v11 + 16))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 72))(v11, *(unsigned __int8 *)(v10 + 9), *(unsigned __int8 *)(v10 + 8));
  }
  else
  {
    *(_QWORD *)v11 = &unk_1E81792E0;
    *(_WORD *)(v11 + 8) = *(_WORD *)(v10 + 8);
    *(_QWORD *)v11 = &off_1E8172AE8;
    *(_BYTE *)(v11 + 16) = 1;
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *sub_1C56AD2E8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56AD31C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56AD360()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F31E0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F31E0))
      __cxa_guard_release(&qword_1EF8F31E0);
  }
}

uint64_t sub_1C56AD3A0(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  _BYTE *v5;
  unint64_t v6;
  llvm::AbstractAttribute *v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v6 = sub_1C5676C10(v4);
  if (!v6)
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v5 + 40))(v5);
  v7 = sub_1C56878EC(a2, v6 | 1, 0, a1, 0, 0, 1);
  v8 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v7 + 48))(v7);
  v9 = v5[9] == 0;
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)v5 + 48))(v5, *(unsigned __int8 *)(v8 + 9));
  return v9 ^ (v5[9] != 0);
}

uint64_t *sub_1C56AD460(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56AD478(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56AD4C0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56AD4F4(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56AD538()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F31E8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F31E8))
      __cxa_guard_release(&qword_1EF8F31E8);
  }
}

uint64_t *sub_1C56AD578(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56AD590(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56AD5D8(_QWORD *a1)
{
  sub_1C628EE50((uint64_t)(a1 + 4));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56AD618(_QWORD *a1)
{
  sub_1C628EE50((uint64_t)(a1 + 4));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56AD66C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  BOOL v13;
  void **v14;
  void *v15;
  void *v16;
  std::string *v17;
  std::string v18;
  std::string v19;
  std::string v20;
  void *__p[2];
  std::string::size_type v22;
  std::string v23;

  *((_BYTE *)&v23.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v23, "PointerInfo ");
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  if (v4)
  {
    *((_BYTE *)&v19.__r_.__value_.__s + 23) = 1;
    LOWORD(v19.__r_.__value_.__l.__data_) = 35;
    std::to_string(&v18, *(_DWORD *)(a1 + 48));
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &v18;
    else
      v5 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v18.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v18.__r_.__value_.__l.__size_;
    v7 = std::string::append(&v19, (const std::string::value_type *)v5, size);
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v20, " bins");
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v22 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = HIBYTE(v22);
    v12 = (uint64_t)__p[0];
  }
  else
  {
    v11 = 9;
    HIBYTE(v22) = 9;
    strcpy((char *)__p, "<invalid>");
    v12 = 0x64696C61766E693CLL;
  }
  v13 = v11 < 0;
  if (v11 >= 0)
    v14 = __p;
  else
    v14 = (void **)v12;
  v15 = (void *)(v11 & 0x7F);
  if (v13)
    v16 = __p[1];
  else
    v16 = v15;
  v17 = std::string::append(&v23, (const std::string::value_type *)v14, (std::string::size_type)v16);
  *a2 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v22) < 0)
  {
    operator delete(__p[0]);
    if (!v4)
      goto LABEL_26;
  }
  else if (!v4)
  {
    goto LABEL_26;
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
LABEL_26:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

uint64_t sub_1C56AD830()
{
  return 1;
}

uint64_t sub_1C56AD83C(_QWORD *a1, llvm::Attributor *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18[8];
  uint64_t v19;
  _QWORD *v20;
  _QWORD v21[2];
  int v22;
  unsigned int v23;

  v23 = 1;
  v4 = sub_1C6284150((llvm::IRPosition *)(a1 + 2));
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 120);
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v18[0] = v4;
  *sub_1C56AE1B0((uint64_t)v21, v18) = 0;
  v20 = v21;
  v6 = a1[2] & 3;
  v7 = a1[2] & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v7;
  if (v6 == 3)
    v8 = *(_QWORD *)(v7 + 24);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (*(_BYTE *)(v8 + 16))
  {
    if (v9 == 21)
    {
      v10 = (_QWORD *)(v8 + 24);
    }
    else
    {
      if (v9 < 0x1C)
        goto LABEL_21;
      v10 = (_QWORD *)(*(_QWORD *)(v8 + 40) + 56);
    }
    if (!*v10)
      goto LABEL_21;
  }
  if (v6 == 3)
    v7 = *(_QWORD *)(v7 + 24);
  if (*(_BYTE *)(v7 + 16))
  {
    if (*(_BYTE *)(v7 + 16) == 21)
      v11 = (unint64_t *)(v7 + 24);
    else
      v11 = (unint64_t *)(*(_QWORD *)(v7 + 40) + 56);
    v7 = *v11;
  }
  v12 = **(_QWORD **)(*((_QWORD *)a2 + 11) + 440);
  if (v12)
    v13 = *(_QWORD *)(v7 + 40) == 0;
  else
    v13 = 1;
  if (!v13)
  {
    v14 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v12, &llvm::TargetLibraryAnalysis::Key, v7) + 8;
    goto LABEL_22;
  }
LABEL_21:
  v14 = 0;
LABEL_22:
  v19 = v14;
  v18[0] = (uint64_t)&v20;
  v18[1] = (uint64_t)v21;
  v18[2] = v5;
  v18[3] = v4;
  v18[6] = (uint64_t)&v23;
  v18[7] = (uint64_t)&v19;
  v17 = v21;
  v18[4] = (uint64_t)a1;
  v18[5] = (uint64_t)a2;
  if ((llvm::Attributor::checkForAllUses(a2, (unsigned int (*)(uint64_t, uint64_t *, uint64_t *))sub_1C56AE218, (uint64_t)v18, a1, v4, 1, 1, 1, (unsigned int (*)(uint64_t, uint64_t *, uint64_t))sub_1C56AED8C, (uint64_t)&v17) & 1) != 0)v15 = v23;
  else
    v15 = (*(uint64_t (**)(_QWORD *))(a1[4] + 40))(a1 + 4);
  MEMORY[0x1CAA32FB4](v21[0], 8);
  return v15;
}

uint64_t sub_1C56AD9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _BOOL8), uint64_t a5)
{
  return sub_1C56AEE8C(a1 + 32, a2, a3, a4, a5);
}

uint64_t sub_1C56AD9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int (*a5)(uint64_t, const llvm::Value **, _QWORD), uint64_t a6)
{
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  llvm::AbstractAttribute *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  llvm::DominatorTree *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _BOOL4 v35;
  __int128 *v36;
  void (**v37)(__int128 *);
  unsigned int v38;
  const llvm::Value ***v39;
  char *v40;
  BOOL v41;
  const llvm::Value **v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  const llvm::Instruction **v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  BOOL v57;
  void (**v58)(void);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  llvm::DominatorTree *v67;
  BOOL v68;
  char v69;
  char v70;
  char **v71;
  char *v72;
  uint64_t *v73;
  char v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  int v79;
  _BYTE v80[64];
  uint64_t v81[4];
  __int16 v82;
  __int128 __p;
  BOOL *v84;
  __int128 *p_p;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  llvm::DominatorTree **v89;
  uint64_t v90;
  char ***v91;
  char **v92;
  void **v93;
  _QWORD v94[3];
  _QWORD *v95;
  const llvm::Value ***v96;
  uint64_t v97;
  _QWORD v98[18];

  v98[16] = *MEMORY[0x1E0C80C00];
  v76 = v80;
  v77 = v80;
  v78 = 8;
  v79 = 0;
  v96 = (const llvm::Value ***)v98;
  v97 = 0x800000000;
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 40) + 56);
  v13 = sub_1C56833C8(a2, v12, 0, a3, 1, 0, 1);
  __p = (unint64_t)v12;
  v75 = sub_1C56AF02C(a2, &__p, a3, 1, 0);
  v74 = *((_BYTE *)v13 + 41);
  v72 = &v74;
  v73 = &v75;
  v71 = &v72;
  v14 = sub_1C568100C(a2, v12, 0, a3, 1, 0, 1);
  LOBYTE(v15) = 0;
  v16 = *(unsigned __int8 *)(a4 + 16);
  v17 = (v16 - 33);
  if (v17 <= 0x37)
  {
    if (((1 << (v16 - 33)) & 0x8000000000041) == 0)
    {
      if (((1 << (v16 - 33)) & 0x808001C8000010) == 0)
      {
        if (v17 != 28)
          goto LABEL_19;
        LOBYTE(v15) = (*(_WORD *)(a4 + 18) & 0x301) != 0;
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    v18 = *(_QWORD *)(a4 + 64);
    if (v18 && ((*(_BYTE *)(v18 + 20) & 4) != 0 || (*(_BYTE *)(v18 + 17) & 0x10) != 0))
      goto LABEL_12;
    LODWORD(__p) = 7;
    if (sub_1C53E4BBC(a4, (__int32 *)&__p, 1uLL))
    {
      v19 = *(_QWORD *)(a4 - 32);
      if (!v19 || *(_BYTE *)(v19 + 16) || *(_QWORD *)(v19 + 24) != *(_QWORD *)(a4 + 72) || *(_DWORD *)(v19 + 36) != 7)
      {
LABEL_17:
        LOBYTE(v15) = 1;
        goto LABEL_18;
      }
    }
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(a4, 66) & 1) != 0)
LABEL_12:
      LOBYTE(v15) = 0;
    else
      v15 = llvm::CallBase::hasFnAttrOnCalledFunction(a4, 44) ^ 1;
LABEL_18:
    v16 = *(unsigned __int8 *)(a4 + 16);
  }
LABEL_19:
  v20 = 0;
  v70 = v15;
  v21 = (v16 - 33);
  if (v21 <= 0x37)
  {
    if (((1 << v21) & 0x8000000000041) != 0)
    {
      v22 = *(_QWORD *)(a4 + 64);
      if (!v22 || (*(_BYTE *)(v22 + 17) & 0x30) == 0)
      {
        v23 = *(_DWORD *)(a4 + 20);
        if (v23 < 0)
        {
          v60 = a4 - 32 * (v23 & 0x7FFFFFF);
          v63 = *(_QWORD *)(v60 - 8);
          v61 = v60 - 8;
          v62 = v63;
          if (v63)
          {
            v64 = -v62;
            while (1)
            {
              v65 = *(_DWORD *)(*(_QWORD *)(v61 + v64) + 8);
              if (v65 >= 2 && v65 != 7)
                break;
              v64 += 16;
              if (!v64)
                goto LABEL_27;
            }
LABEL_23:
            v20 = 1;
            goto LABEL_30;
          }
        }
LABEL_27:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a4, 45) & 1) == 0)
        {
          v20 = llvm::CallBase::hasFnAttrOnCalledFunction(a4, 44) ^ 1;
          goto LABEL_30;
        }
      }
      v20 = 0;
      goto LABEL_30;
    }
    if (v21 == 27)
    {
      v20 = (*(_WORD *)(a4 + 18) & 0x301) != 0;
      goto LABEL_30;
    }
    if (((1 << v21) & 0x808001D0000010) != 0)
      goto LABEL_23;
  }
LABEL_30:
  v69 = v20;
  v24 = *v72 || *v73 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v73 + 112))(*v73, a4) & 1) != 0;
  v68 = v24;
  v25 = v15 ^ 1;
  if (!*((_BYTE *)v14 + 40))
    v25 = 1;
  if ((v25 & 1) != 0
    || ((v26 = **(_QWORD **)(*(_QWORD *)(a2 + 88) + 440)) != 0 ? (v27 = *(_QWORD *)(v12 + 40) == 0) : (v27 = 1), v27))
  {
    v28 = 0;
  }
  else
  {
    v28 = (llvm::DominatorTree *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v26, &llvm::DominatorTreeAnalysis::Key, v12)+ 8);
  }
  v67 = v28;
  v95 = 0;
  v29 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  if (*(_BYTE *)(v29 + 16) == 59)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(v29 + 40) + 56);
    if (!*((_BYTE *)sub_1C568100C(a2, v30, 0, a1, 1, 0, 1) + 41))
      goto LABEL_63;
    *(_QWORD *)&__p = &off_1E8177160;
    *((_QWORD *)&__p + 1) = v30;
  }
  else
  {
    v31 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
    if (*(unsigned __int8 *)(v31 + 16) > 3u)
      goto LABEL_63;
    v32 = v31;
    v33 = *(_QWORD *)(v31 + 40) + 216;
    v82 = 260;
    v81[0] = v33;
    llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v81);
    if ((_DWORD)p_p == 25 || (_DWORD)p_p == 30 || (p_p & 0xFFFFFFFE) == 0x2C)
    {
      v34 = *(_DWORD *)(*(_QWORD *)v32 + 8);
      if ((v34 & 0xFE) == 0x12)
        v34 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v32 + 16) + 8);
      v35 = (v34 >> 8) - 3 < 3;
    }
    else
    {
      v35 = 0;
    }
    if (SHIBYTE(v84) < 0)
      operator delete((void *)__p);
    if (!v35)
      goto LABEL_63;
    *(_QWORD *)&__p = &off_1E81771A8;
  }
  p_p = &__p;
  sub_1C48C35D8(&__p, v94);
  v36 = p_p;
  if (p_p == &__p)
  {
    v37 = (void (**)(__int128 *))(__p + 32);
    v36 = &__p;
  }
  else
  {
    if (!p_p)
      goto LABEL_63;
    v37 = (void (**)(__int128 *))(*(_QWORD *)p_p + 40);
  }
  (*v37)(v36);
LABEL_63:
  *(_QWORD *)&__p = &v70;
  *((_QWORD *)&__p + 1) = &v69;
  v84 = &v68;
  p_p = (__int128 *)a2;
  v86 = a4;
  v87 = a3;
  v88 = v94;
  v89 = &v67;
  v90 = v12;
  v91 = &v71;
  v92 = &v76;
  v93 = (void **)&v96;
  if (!sub_1C628F574(a1 + 32, a4, (uint64_t (*)(uint64_t, uint64_t, _BOOL8))sub_1C56AF380, (uint64_t)&__p))
  {
    v53 = 0;
    goto LABEL_107;
  }
  if (v68)
  {
    v38 = v97;
    if ((_DWORD)v97)
    {
      v39 = v96;
      v40 = (char *)&v96[2 * v97];
      while (1)
      {
        if (v67)
          v41 = dword_1ED809E78 >= v38;
        else
          v41 = 0;
        if (v41)
        {
          v42 = *v39;
          if (**v71
            || (v49 = *(_QWORD *)v71[1]) != 0
            && (*(unsigned int (**)(uint64_t, const llvm::Value *))(*(_QWORD *)v49 + 112))(v49, *v42))
          {
            v43 = (char *)sub_1C477672C((uint64_t)&v76, (uint64_t)v42);
            v44 = v77;
            v45 = v77 == v76 ? (uint64_t *)((char *)&v78 + 4) : &v78;
            v46 = *(unsigned int *)v45;
            v47 = &v77[8 * v46];
            if (v43 != v47)
            {
              if ((_DWORD)v46)
              {
                v48 = 8 * v46;
                while (*(_QWORD *)v44 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  v44 += 8;
                  v48 -= 8;
                  if (!v48)
                    goto LABEL_93;
                }
              }
              if (v44 != v47)
              {
                v50 = *(const llvm::Instruction ***)v44;
LABEL_87:
                if (v50 != v42 && llvm::DominatorTree::dominates(v67, *v42, *v50))
                  goto LABEL_94;
                v51 = (unint64_t *)(v44 + 8);
                while (v51 != (unint64_t *)v47)
                {
                  v52 = *v51++;
                  v50 = (const llvm::Instruction **)v52;
                  if (v52 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    v44 = (char *)(v51 - 1);
                    goto LABEL_87;
                  }
                }
              }
            }
          }
        }
LABEL_93:
        if (!a5(a6, *v39, *((unsigned __int8 *)v39 + 8)))
        {
          v53 = 0;
          goto LABEL_107;
        }
LABEL_94:
        v39 += 2;
        if (v39 == (const llvm::Value ***)v40)
        {
          v53 = 1;
          goto LABEL_107;
        }
      }
    }
LABEL_105:
    v53 = 1;
    goto LABEL_107;
  }
  if (!(_DWORD)v97)
    goto LABEL_105;
  v54 = (char *)v96;
  v55 = (char *)&v96[2 * v97];
  do
  {
    v56 = ((uint64_t (*)(uint64_t, _QWORD, _QWORD))a5)(a6, *(_QWORD *)v54, v54[8]);
    v54 += 16;
    if ((_DWORD)v56)
      v57 = v54 == v55;
    else
      v57 = 1;
  }
  while (!v57);
  v53 = v56;
LABEL_107:
  if (v95 == v94)
  {
    v58 = (void (**)(void))(v94[0] + 32);
  }
  else
  {
    if (!v95)
      goto LABEL_112;
    v58 = (void (**)(void))(*v95 + 40);
  }
  (*v58)();
LABEL_112:
  if (v96 != v98)
    free(v96);
  if (v77 != v76)
    free(v77);
  return v53;
}

uint64_t *sub_1C56AE138(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1C628EE50(a1);
  *(_QWORD *)(v1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(v1 - 24));
}

void sub_1C56AE160(uint64_t a1)
{
  sub_1C628EE50(a1);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56AE1B0(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5305ED0(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0xFFFFFFFF80000000;
  }
  return v5 + 1;
}

uint64_t sub_1C56AE218(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  const llvm::AbstractAttribute *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  BOOL v9;
  _BOOL4 v12;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  llvm::UndefValue **v38;
  _QWORD *v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  llvm::Attributor *v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  BOOL v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t *v54;
  int v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  llvm::AbstractAttribute *v61;
  llvm::Attributor *v62;
  uint64_t *v63;
  int v64;
  int *v65;
  int v66;
  uint64_t *v67;
  llvm::DataLayout *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  int64_t v75;
  unint64_t v76;
  int v77;
  uint64_t *v78;
  unint64_t AssumedSimplified;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86[8];
  void *v87;
  uint64_t v88;
  _QWORD v89[9];

  v89[8] = *MEMORY[0x1E0C80C00];
  v5 = *(const llvm::AbstractAttribute **)(a1 + 32);
  v6 = *(_QWORD *)a2;
  v85 = *(_QWORD *)a2;
  v7 = *(_QWORD **)(a2 + 24);
  v8 = *((unsigned __int8 *)v7 + 16);
  if (v7)
    v9 = v8 == 5;
  else
    v9 = 0;
  if (v9)
  {
    v17 = *((unsigned __int16 *)v7 + 9);
    if ((v17 - 38) <= 0xC)
    {
LABEL_24:
      v18 = *(uint64_t **)a1;
      v19 = *sub_1C56AE1B0(*(_QWORD *)(a1 + 8), &v85);
      v87 = v7;
      *sub_1C56AE1B0(*v18, (uint64_t *)&v87) = v19;
      goto LABEL_36;
    }
    if ((v17 - 53) < 2)
      return 1;
    if (v17 != 34)
      return 0;
    goto LABEL_28;
  }
  if (v8 == 62 || v8 == 5 && *((_WORD *)v7 + 9) == 34)
  {
LABEL_28:
    v21 = *(_QWORD *)(a1 + 8);
    v87 = *(void **)(a2 + 24);
    v22 = sub_1C56AE1B0(v21, (uint64_t *)&v87);
    v23 = sub_1C56AE1B0(*(_QWORD *)(a1 + 8), &v85);
    *v22 = *v23;
    v24 = *v23;
    if (*v23 == 0xFFFFFFFF80000000)
    {
LABEL_35:
      *v22 = 0xFFFFFFFF80000000;
      goto LABEL_36;
    }
    v25 = v23;
    v26 = *((_DWORD *)v7 + 5);
    if ((v26 & 0x40000000) != 0)
    {
      v28 = (_QWORD *)*(v7 - 1);
      v27 = v26 & 0x7FFFFFF;
    }
    else
    {
      v27 = v26 & 0x7FFFFFF;
      v28 = &v7[-4 * v27];
    }
    v29 = v28 + 4;
    v30 = 32 * v27 - 32;
    v31 = v30;
    while (v31)
    {
      v32 = *v29;
      v29 += 4;
      v31 -= 32;
      if (*(_BYTE *)(v32 + 16) != 16)
        goto LABEL_35;
    }
    v87 = v89;
    v88 = 0x800000000;
    if ((v26 & 0x40000000) != 0)
      v34 = (_QWORD *)*(v7 - 1);
    else
      v34 = &v7[-4 * v27];
    if (v27 == 1)
    {
      v37 = 0;
      v38 = (llvm::UndefValue **)v89;
    }
    else
    {
      LODWORD(v37) = 0;
      v39 = v34 + 4;
      do
      {
        v40 = *v39;
        if (*v39)
          v41 = *(_BYTE *)(*v39 + 16) == 16;
        else
          v41 = 0;
        if (!v41)
        {
          v20 = 0;
          goto LABEL_72;
        }
        if (v37 >= HIDWORD(v88))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, (uint64_t)v89, v37 + 1, 8);
          LODWORD(v37) = v88;
        }
        *((_QWORD *)v87 + v37) = v40;
        v37 = (v88 + 1);
        LODWORD(v88) = v88 + 1;
        v39 += 4;
        v30 -= 32;
      }
      while (v30);
      v24 = *v25;
      v38 = (llvm::UndefValue **)v87;
    }
    v49 = *((_BYTE *)v7 + 16) != 62 || v7 == 0;
    v50 = 8;
    if (v49)
      v50 = 3;
    *v22 = llvm::DataLayout::getIndexedOffsetInType(*(llvm::DataLayout **)(a1 + 16), v7[v50], v38, v37) + v24;
    v20 = 1;
    *a3 = 1;
LABEL_72:
    if (v87 != v89)
      free(v87);
    return v20;
  }
  v12 = v8 > 0x1B && v8 - 66 < 0xD;
  if (v8 == 85 || v12)
    goto LABEL_24;
  if (v8 == 83)
  {
    v14 = *(_QWORD *)(a1 + 8);
    v87 = *(void **)(a2 + 24);
    v15 = sub_1C56AE1B0(v14, (uint64_t *)&v87);
    v16 = sub_1C56AE1B0(*(_QWORD *)(a1 + 8), &v85);
    if (*v15 != *v16)
    {
      if (*v16 == 0xFFFFFFFF80000000)
      {
        *v15 = 0xFFFFFFFF80000000;
LABEL_36:
        v20 = 1;
        *a3 = 1;
        return v20;
      }
      v67 = v16;
      v68 = *(llvm::DataLayout **)(a1 + 16);
      v69 = *(_DWORD *)(*(_QWORD *)v6 + 8);
      if ((v69 & 0xFE) == 0x12)
        v69 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8);
      LODWORD(v88) = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(*(llvm::DataLayout **)(a1 + 16), v69 >> 8) + 12);
      if (v88 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v87, 0, 0);
        v68 = *(llvm::DataLayout **)(a1 + 16);
      }
      else
      {
        v87 = 0;
      }
      v71 = *(_QWORD *)(a1 + 24);
      v20 = 1;
      if (v71 == llvm::Value::stripAndAccumulateConstantOffsets(v6, v68, (const void **)&v87, 1, 0, 0, v70))
      {
        v72 = *v67;
        if (v88 >= 0x41)
        {
          v74 = 0;
          v73 = v87;
          v75 = ((unint64_t)v88 + 63) >> 6;
          do
          {
            v46 = v75-- < 1;
            if (v46)
              break;
            v76 = *((_QWORD *)v87 + v75);
            v74 += __clz(v76);
          }
          while (!v76);
          v20 = 0;
          v77 = v88 | 0xFFFFFFC0;
          if ((v88 & 0x3F) == 0)
            v77 = 0;
          if ((v88 - v74 - v77) > 0x40)
            goto LABEL_101;
        }
        else
        {
          v73 = &v87;
        }
        if (*v73 != v72)
        {
          v20 = 0;
          goto LABEL_101;
        }
        v78 = *(uint64_t **)a1;
        *(_QWORD *)v86 = v7;
        *sub_1C56AE1B0(*v78, (uint64_t *)v86) = v72;
        v20 = 1;
      }
      else
      {
        *v15 = 0xFFFFFFFF80000000;
      }
      *a3 = 1;
LABEL_101:
      if (v88 >= 0x41 && v87)
        MEMORY[0x1CAA32F9C](v87, 0x1000C8000313F17);
      return v20;
    }
    return 1;
  }
  if (v7 && v8 == 60)
  {
    v35 = *(_QWORD *)(a1 + 40);
    v36 = sub_1C56AE1B0(*(_QWORD *)(a1 + 8), &v85);
    v20 = 1;
    sub_1C56AE8D8((uint64_t)v5, v35, (uint64_t)v7, 0, 1, 1, *v36, *(_BOOL4 **)(a1 + 48), *v7);
    return v20;
  }
  if (v7 && v8 == 61)
  {
    v42 = *(v7 - 8);
    if (v42 != v6)
    {
      v86[0] = 0;
      v43 = *(llvm::Attributor **)(a1 + 40);
      v44 = *(unsigned __int8 *)(v42 + 16);
      if (v44 != 21)
      {
        if (v44 < 0x1C)
        {
          if (!*(_BYTE *)(v42 + 16))
            v42 |= 2uLL;
        }
        else
        {
          v45 = v44 - 33;
          v46 = v45 > 0x33;
          v47 = (1 << v45) & 0x8000000000041;
          if (!v46 && v47 != 0)
            v42 |= 1uLL;
        }
      }
      v87 = (void *)v42;
      v88 = 0;
      AssumedSimplified = llvm::Attributor::getAssumedSimplified(v43, (const llvm::IRPosition *)&v87, v5, v86);
      v81 = v80;
      v82 = *(_QWORD *)(a1 + 40);
      v83 = sub_1C56AE1B0(*(_QWORD *)(a1 + 8), &v85);
      sub_1C56AE8D8((uint64_t)v5, v82, (uint64_t)v7, AssumedSimplified, v81, 2, *v83, *(_BOOL4 **)(a1 + 48), *(_QWORD *)*(v7 - 8));
      return 1;
    }
    return 0;
  }
  if (v8 < 0x1C)
    return 0;
  v51 = v8 - 33;
  v46 = v51 > 0x33;
  v52 = (1 << v51) & 0x8000000000041;
  if (v46 || v52 == 0)
    return 0;
  if (llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(a2 + 24)))
    return 1;
  v54 = **(uint64_t ***)(a1 + 56);
  if (v54)
  {
    if (llvm::isFreeCall((uint64_t)v7, v54))
      return 1;
  }
  v55 = *((_DWORD *)v7 + 5);
  v56 = &v7[-4 * (v55 & 0x7FFFFFF)];
  if ((unint64_t)v56 > a2)
    return 0;
  v57 = *((unsigned __int8 *)v7 + 16);
  if (v57 == 84)
    v58 = 0;
  else
    v58 = v57 == 39 ? (*((_DWORD *)v7 + 20) + 1) : 2;
  if (v55 < 0 && (v84 = *(v56 - 1), (v84 & 0xFFFFFFFF0) != 0))
    v59 = (*((_DWORD *)v56 - 3) - *(_DWORD *)((char *)v56 - v84));
  else
    v59 = 0;
  if ((unint64_t)&v7[-4 * v58 - 4 + -4 * v59] <= a2)
    return 0;
  v60 = a2 - (_QWORD)v56;
  if ((v55 & 0x40000000) != 0)
    v56 = (_QWORD *)*(v7 - 1);
  v20 = 1;
  v61 = sub_1C5683D78(*(_QWORD *)(a1 + 40), ((unint64_t)v56 + (v60 & 0x1FFFFFFFE0)) | 3, 0, (uint64_t)v5, 0, 0, 1);
  v62 = *(llvm::Attributor **)(a1 + 40);
  v63 = sub_1C56AE1B0(*(_QWORD *)(a1 + 8), &v85);
  v64 = sub_1C56AE9AC(v5, v62, (uint64_t)v61, *v63, (uint64_t)v7);
  v65 = *(int **)(a1 + 48);
  v66 = *v65;
  if (!v64)
    v66 = 0;
  *v65 = v66;
  return v20;
}

BOOL sub_1C56AE8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, _BOOL4 *a8, uint64_t a9)
{
  int v11;
  unint64_t v17;
  uint64_t v20;
  int v21;
  _BOOL4 v22;
  _BOOL8 result;
  _BOOL4 v24;

  v11 = a6;
  v17 = 0xFFFFFFFF80000000;
  if (a7 != 0xFFFFFFFF80000000 && a9 != 0)
  {
    sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 120), a9);
    v11 = a6;
    if (v21 != 1)
      v17 = (unint64_t)(v20 + 7) >> 3;
  }
  v22 = *a8;
  result = sub_1C628EFB4(a1 + 32, a2, a7, v17, a3, a4, a5, v11, a9, 0, 0);
  v24 = v22 && result;
  *a8 = v24;
  return result;
}

uint64_t sub_1C56AE9AC(const llvm::AbstractAttribute *a1, llvm::Attributor *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t AssociatedArgument;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  int v39;
  BOOL v40;
  int64x2_t v41;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10)
    || ((*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 4) + 16))((_QWORD *)a1 + 4) & 1) == 0)
  {
    return (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 4) + 40))((_QWORD *)a1 + 4);
  }
  AssociatedArgument = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a3 + 16));
  if (*(_BYTE *)(*(_QWORD *)AssociatedArgument + 8) == 15
    && (v13 = *(_QWORD *)(*(_QWORD *)(AssociatedArgument + 24) + 112)) != 0
    && (v14 = *(_DWORD *)(AssociatedArgument + 32) + 2, v14 < *(_DWORD *)(v13 + 8))
    && (v34 = *(_QWORD *)(v13 + 8 * v14 + 40)) != 0)
  {
    v15 = (*(unsigned __int8 *)(v34 + 20) >> 5) & 1;
  }
  else
  {
    v15 = 0;
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
  v17 = sub_1C628EF14(v16 + 8);
  v36 = *(_QWORD *)(v16 + 8) + 24 * *(unsigned int *)(v16 + 24);
  if ((_QWORD *)v36 != v17)
  {
    v19 = v17;
    v20 = v18;
    v35 = a4;
    v21 = 1;
    while (1)
    {
      v41 = vdupq_n_s64(0xFFFFFFFF80000000);
      *(_QWORD *)&v38 = 0xFFFFFFFF80000000;
      *((_QWORD *)&v38 + 1) = 0xFFFFFFFF80000000;
      if (a4 != 0xFFFFFFFF80000000)
      {
        *(_QWORD *)&v38 = *v19 + a4;
        *((_QWORD *)&v38 + 1) = v19[1];
        v41 = (int64x2_t)v38;
      }
      v22 = sub_1C628F1DC((uint64_t)a1 + 40, v41.i64);
      v23 = (unsigned int *)v19[2];
      v24 = v23[2];
      if ((_DWORD)v24)
        break;
LABEL_23:
      v19 += 3;
      if (v19 == v20)
      {
        v19 = v20;
        a4 = v35;
      }
      else
      {
        a4 = v35;
        while (1)
        {
          v31 = v19[1];
          if ((*v19 != 0x7FFFFFFFFFFFFFFFLL || v31 != 0x7FFFFFFFFFFFFFFFLL)
            && (*v19 != 0x8000000000000000 || v31 != 0x8000000000000000))
          {
            break;
          }
          v19 += 3;
          if (v19 == v20)
          {
            v19 = v20;
            break;
          }
        }
      }
      if (v19 == (_QWORD *)v36)
        return v21;
    }
    v37 = v22[2];
    v25 = 48 * v24;
    v26 = (uint64_t *)(*(_QWORD *)v23 + 40);
    while (v15)
    {
      if ((*(_BYTE *)(v26 - 1) & 1) != 0)
      {
        v39 = v21;
        v27 = 1;
LABEL_20:
        v40 = 0;
        v28 = llvm::Attributor::translateArgumentToCallSiteContent(a2, (llvm::Argument *)*(v26 - 3), *(v26 - 2), a5, a1, &v40);
        v30 = sub_1C628EFB4((uint64_t)a1 + 32, (uint64_t)a2, v38, *((uint64_t *)&v38 + 1), a5, v28, v29, *(_DWORD *)(v26 - 1) & v27, *v26, *(v26 - 4), v37);
        if (v39)
          v21 = v30;
        else
          v21 = 0;
      }
      v26 += 6;
      v25 -= 48;
      if (!v25)
        goto LABEL_23;
    }
    v39 = v21;
    v27 = 3;
    goto LABEL_20;
  }
  return 1;
}

_OWORD *sub_1C56AEC5C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C628F3F0(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1C56AED24(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 48 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C628F4CC(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C628F4CC(a1, v5);
    }
  }
  return a2;
}

BOOL sub_1C56AED8C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a1;
  v7 = *(_DWORD *)(v6 + 16);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = ((*a3 >> 4) ^ (*a3 >> 9)) & v8;
    v10 = *(_QWORD *)(*(_QWORD *)v6 + 16 * v9);
    if (v10 == *a3)
    {
LABEL_3:
      v19 = *a3;
      v11 = sub_1C56AE1B0(v6, &v19);
      v12 = *a1;
      v18 = *a2;
      return *v11 == *sub_1C56AE1B0(v12, &v18);
    }
    v14 = 1;
    while (v10 != -4096)
    {
      v15 = v9 + v14++;
      v9 = v15 & v8;
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 16 * v9);
      if (v10 == *a3)
        goto LABEL_3;
    }
  }
  v19 = *a2;
  v16 = sub_1C56AE1B0(v6, &v19);
  v17 = *a1;
  v18 = *a3;
  *sub_1C56AE1B0(v17, &v18) = *v16;
  return 1;
}

uint64_t sub_1C56AEE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, _BOOL8), uint64_t a5)
{
  uint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL8 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v30;
  BOOL v31;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)result)
  {
    v11 = sub_1C628EF14(a1 + 8);
    v30 = *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 24);
    if ((uint64_t *)v30 == v11)
    {
      return 1;
    }
    else
    {
      v13 = v11;
      v14 = v12;
      v15 = a2 == 0xFFFFFFFF80000000;
      if (a3 == 0xFFFFFFFF80000000)
        v15 = 1;
      v31 = v15;
      while (1)
      {
        v16 = *v13;
        v17 = v13[1];
        if (v31
          || (v16 != 0xFFFFFFFF80000000 ? (v18 = v17 == 0xFFFFFFFF80000000) : (v18 = 1),
              v18 || (v17 + v16 > a2 ? (v19 = v16 < a2 + a3) : (v19 = 0), v19)))
        {
          v20 = a2 == v16 && a3 == v17;
          v21 = a2 != 0xFFFFFFFF80000000;
          if (!v20)
            v21 = 0;
          v22 = a3 != 0xFFFFFFFF80000000 && (unint64_t)v21;
          v23 = (uint64_t *)v13[2];
          v24 = *((unsigned int *)v23 + 2);
          if ((_DWORD)v24)
            break;
        }
LABEL_28:
        v13 += 3;
        if (v13 == v14)
        {
LABEL_39:
          v13 = v14;
        }
        else
        {
          while (1)
          {
            v27 = v13[1];
            if ((*v13 != 0x7FFFFFFFFFFFFFFFLL || v27 != 0x7FFFFFFFFFFFFFFFLL)
              && (*v13 != 0x8000000000000000 || v27 != 0x8000000000000000))
            {
              break;
            }
            v13 += 3;
            if (v13 == v14)
              goto LABEL_39;
          }
        }
        result = 1;
        if (v13 == (uint64_t *)v30)
          return result;
      }
      v25 = *v23;
      v26 = 48 * v24;
      while ((a4(a5, v25, v22) & 1) != 0)
      {
        v25 += 48;
        v26 -= 48;
        if (!v26)
          goto LABEL_28;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C56AF02C(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &llvm::AAExecutionDomain::ID;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

void sub_1C56AF11C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56AF130(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8177160;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56AF164(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8177160;
  a2[1] = v2;
  return result;
}

BOOL sub_1C56AF180(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) != a2;
}

void sub_1C56AF194()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56AF1A8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81771A8;
  return result;
}

void sub_1C56AF1CC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81771A8;
}

uint64_t sub_1C56AF1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int i;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a2 + 112);
  if (v2)
  {
    if (*(_DWORD *)(v2 + 8))
    {
      v3 = *(_QWORD *)(v2 + 40);
      if (v3)
      {
        v4 = *(_DWORD *)(v3 + 40);
        if (v4)
        {
          v5 = *(_QWORD *)(v3 + 24);
          v6 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          v7 = &unk_1ED7EA000;
          if ((v6 & 1) == 0)
          {
            v20 = v5;
            v19 = v4;
            v17 = __cxa_guard_acquire(&qword_1ED7EAC88);
            v7 = &unk_1ED7EA000;
            v4 = v19;
            v5 = v20;
            if (v17)
            {
              v18 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v18 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v18;
              __cxa_guard_release(&qword_1ED7EAC88);
              v7 = (_QWORD *)&unk_1ED7EA000;
              v4 = v19;
              v5 = v20;
            }
          }
          v8 = 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69 * (v7[400] ^ 0x31FF6452CLL)) ^ ((0x9DDFEA08EB382D69 * (v7[400] ^ 0x31FF6452CLL)) >> 47) ^ v7[400] ^ 0x6C656E72);
          v9 = -348639895 * ((v8 >> 47) ^ v8);
          v10 = v4 - 1;
          for (i = 1; ; ++i)
          {
            v12 = v9 & v10;
            v13 = (uint64_t *)(v5 + 24 * v12);
            v14 = *v13;
            if (*v13 == -1)
            {
              if ("kernel" == (char *)-1)
                return 0;
            }
            else if (v14 == -2)
            {
              if ("kernel" == (char *)-2)
                return 0;
            }
            else if (v13[1] == 6 && *(_DWORD *)v14 == 1852990827 && *(_WORD *)(v14 + 4) == 27749)
            {
              return 0;
            }
            if (v14 == -1)
              return 1;
            v9 = i + v12;
          }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1C56AF380(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(void);
  void (*v21)(void);
  llvm::DominatorTree *v22;
  const llvm::Value *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!**(_BYTE **)a1 || (v6 = a2[8], (v6 & 2) == 0))
  {
    if (!**(_BYTE **)(a1 + 8))
      return 1;
    v6 = a2[8];
    if ((v6 & 1) == 0)
      return 1;
  }
  if (!**(_BYTE **)(a1 + 16))
    goto LABEL_37;
  if ((v6 & 2) == 0)
  {
    if ((v6 & 1) == 0)
      return 1;
LABEL_8:
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD **)(a1 + 48);
    v12 = (_QWORD *)v10[3];
    if (v12)
    {
      if (v12 == v10)
      {
        v31 = v30;
        (*(void (**)(_QWORD *, _QWORD *))(*v10 + 24))(v10, v30);
      }
      else
      {
        v31 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v12 + 16))(v10[3]);
      }
    }
    else
    {
      v31 = 0;
    }
    v19 = llvm::AA::isPotentiallyReachable(v7, v8, v9, v11, v30) ^ 1;
    if (v31 == v30)
    {
      v20 = *(void (**)(void))(v30[0] + 32);
    }
    else
    {
      if (!v31)
        goto LABEL_27;
      v20 = *(void (**)(void))(*v31 + 40);
    }
    v20();
LABEL_27:
    if ((v6 & 2) == 0)
      goto LABEL_33;
    goto LABEL_28;
  }
  v13 = *(_QWORD *)a2;
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(v16 + 24);
  if (v18)
  {
    if (v18 == v16)
    {
      v33 = v32;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v16 + 24) + 24))(*(_QWORD *)(v16 + 24), v32);
    }
    else
    {
      v33 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    }
  }
  else
  {
    v33 = 0;
  }
  if ((llvm::AA::isPotentiallyReachable(v14, v13, v15, v17, v32) & 1) != 0)
  {
    v19 = 0;
  }
  else
  {
    if ((a2[8] & 1) != 0)
      goto LABEL_8;
    v19 = 1;
  }
LABEL_28:
  if (v33 == v32)
  {
    v21 = *(void (**)(void))(v32[0] + 32);
    goto LABEL_32;
  }
  if (v33)
  {
    v21 = *(void (**)(void))(*v33 + 40);
LABEL_32:
    v21();
  }
LABEL_33:
  if ((v19 & 1) != 0)
    return 1;
  v22 = **(llvm::DominatorTree ***)(a1 + 56);
  if (!v22)
    goto LABEL_37;
  if (!a3)
    goto LABEL_37;
  v23 = *(const llvm::Value **)a2;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 56) != *(_QWORD *)(a1 + 64))
    goto LABEL_37;
  v28 = **(_QWORD **)(a1 + 72);
  if (**(_BYTE **)v28)
    goto LABEL_42;
  v29 = **(_QWORD **)(v28 + 8);
  if (v29 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 112))(v29))
  {
    v23 = *(const llvm::Value **)a2;
    v22 = **(llvm::DominatorTree ***)(a1 + 56);
LABEL_42:
    if (llvm::DominatorTree::dominates(v22, v23, *(const llvm::Instruction **)(a1 + 32)))
      sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a1 + 80), (uint64_t)a2);
  }
LABEL_37:
  v24 = *(_QWORD *)(a1 + 88);
  v25 = *(unsigned int *)(v24 + 8);
  if (v25 >= *(_DWORD *)(v24 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v24, v24 + 16, v25 + 1, 16);
    LODWORD(v25) = *(_DWORD *)(v24 + 8);
  }
  v26 = (_QWORD *)(*(_QWORD *)v24 + 16 * v25);
  *v26 = a2;
  v26[1] = a3;
  ++*(_DWORD *)(v24 + 8);
  return 1;
}

_QWORD *sub_1C56AF664(_QWORD *a1)
{
  sub_1C628EE50((uint64_t)(a1 + 4));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56AF6A4(_QWORD *a1)
{
  sub_1C628EE50((uint64_t)(a1 + 4));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56AF6F4(uint64_t result)
{
  unint64_t v1;
  unsigned int v2;
  unint64_t *v3;
  int v4;
  BOOL v5;

  v1 = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(result + 16) & 3) == 0)
    v1 = *(_QWORD *)(v1 + 24);
  v2 = *(unsigned __int8 *)(v1 + 16);
  if (!*(_BYTE *)(v1 + 16))
  {
LABEL_17:
    if (*(_QWORD *)(v1 + 72) == v1 + 72 && (*(_BYTE *)(v1 + 34) & 0x80) == 0)
      goto LABEL_19;
    return result;
  }
  if (v2 == 21)
  {
    v3 = (unint64_t *)(v1 + 24);
  }
  else
  {
    if (v2 <= 0x1B)
    {
      v1 = 0;
      v4 = MEMORY[0x10];
      goto LABEL_16;
    }
    v3 = (unint64_t *)(*(_QWORD *)(v1 + 40) + 56);
  }
  v1 = *v3;
  v4 = *(unsigned __int8 *)(v1 + 16);
  if (v1)
    v5 = v4 == 3;
  else
    v5 = 0;
  if (!v5)
  {
LABEL_16:
    if (v4)
      return result;
    goto LABEL_17;
  }
  if ((*(_DWORD *)(v1 + 20) & 0x7FFFFFF) == 0)
LABEL_19:
    *(_BYTE *)(result + 73) = *(_BYTE *)(result + 72);
  return result;
}

uint64_t *sub_1C56AF790(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1C628EE50(a1);
  *(_QWORD *)(v1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(v1 - 24));
}

void sub_1C56AF7B8(uint64_t a1)
{
  sub_1C628EE50(a1);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56AF804(_QWORD *a1)
{
  sub_1C628EE50((uint64_t)(a1 + 4));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56AF844(_QWORD *a1)
{
  sub_1C628EE50((uint64_t)(a1 + 4));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56AF898(uint64_t a1)
{
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a1 + 72);
  return 0;
}

uint64_t *sub_1C56AF8A8(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1C628EE50(a1);
  *(_QWORD *)(v1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(v1 - 24));
}

void sub_1C56AF8D0(uint64_t a1)
{
  sub_1C628EE50(a1);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56AF91C(_QWORD *a1)
{
  sub_1C628EE50((uint64_t)(a1 + 4));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56AF95C(_QWORD *a1)
{
  sub_1C628EE50((uint64_t)(a1 + 4));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t *sub_1C56AF9B0(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1C628EE50(a1);
  *(_QWORD *)(v1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(v1 - 24));
}

void sub_1C56AF9D8(uint64_t a1)
{
  sub_1C628EE50(a1);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56AFA24(_QWORD *a1)
{
  sub_1C628EE50((uint64_t)(a1 + 4));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56AFA64(_QWORD *a1)
{
  sub_1C628EE50((uint64_t)(a1 + 4));
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56AFAB8(uint64_t a1, llvm::Attributor *a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t AssociatedArgument;
  llvm::AbstractAttribute *v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unsigned int v14;
  int v15;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = sub_1C5676CEC((_DWORD *)(a1 + 16));
  if (!v5 || (v6 = v5, !sub_1C4DE85D0(v5)))
  {
    AssociatedArgument = llvm::IRPosition::getAssociatedArgument(v4);
    if (AssociatedArgument)
    {
      v8 = sub_1C5683D78((uint64_t)a2, AssociatedArgument, 0, a1, 0, 0, 1);
      v9 = sub_1C5676CEC(v4);
      return sub_1C56AE9AC((const llvm::AbstractAttribute *)a1, a2, (uint64_t)v8, 0, v9);
    }
    goto LABEL_15;
  }
  v11 = *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 64);
  if (v11)
    v12 = *(_BYTE *)(v11 + 16) == 16;
  else
    v12 = 0;
  if (v12)
  {
    v14 = *(_DWORD *)(v11 + 32);
    if (v14 > 0x40)
      v13 = **(_QWORD **)(v11 + 24);
    else
      v13 = (uint64_t)(*(_QWORD *)(v11 + 24) << -(char)v14) >> -(char)v14;
  }
  else
  {
    v13 = 0xFFFFFFFF80000000;
  }
  sub_1C6284150(v4);
  v15 = sub_1C628686C(v4, 0);
  if (v15 == 1)
    return sub_1C628EFB4(a1 + 32, (uint64_t)a2, 0, v13, v6, 0, 1, 1, 0, 0, 0);
  if (v15)
  {
LABEL_15:
    *(_BYTE *)(a1 + 73) = *(_BYTE *)(a1 + 72);
    return 0;
  }
  return sub_1C628EFB4(a1 + 32, (uint64_t)a2, 0, v13, v6, 0, 1, 2, 0, 0, 0);
}

uint64_t *sub_1C56AFC48(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1C628EE50(a1);
  *(_QWORD *)(v1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(v1 - 24));
}

void sub_1C56AFC70(uint64_t a1)
{
  sub_1C628EE50(a1);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56AFCBC(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56AFCF0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56AFD34(uint64_t a1)
{
  uint64_t v1;

  if (!*(_BYTE *)(a1 + 72))
    *(_BYTE *)(a1 + 72) = 1;
  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 64) = 0;
  return (*(uint64_t (**)(void))(v1 + 32))();
}

size_t sub_1C56AFD54@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const char *v4;
  size_t result;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = a1 + 32;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3))
      v4 = "simplified";
    else
      v4 = "maybe-simple";
  }
  else
  {
    v4 = "not-simple";
  }
  result = strlen(v4);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
      goto LABEL_14;
  }
  result = (size_t)memcpy(a2, v4, v6);
LABEL_14:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

BOOL sub_1C56AFE38(uint64_t a1, const llvm::Instruction **a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::ConstantExpr *v14;

  v4 = *(_QWORD *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 8);
  if (v4)
  {
    v5 = 1;
    while (1)
    {
      v6 = *(_QWORD *)(v4 + 24);
      v7 = *(unsigned __int8 *)(v6 + 16);
      if (v6)
        v8 = v7 >= 0x1C;
      else
        v8 = 0;
      if (!v8)
        goto LABEL_7;
      if (v7 != 83)
        goto LABEL_19;
      v9 = *(_DWORD *)(v6 + 20);
      v10 = (v9 & 0x40000000) != 0 ? *(_QWORD *)(v6 - 8) : v6 - 32 * (v9 & 0x7FFFFFF);
      v11 = *(_QWORD *)(v10 + 32 * *(unsigned int *)(v6 + 60) + 8
                                                                * ((unint64_t)(v4 - v10) >> 5));
      v12 = *(_QWORD *)(v11 + 40);
      if (v12 == v11 + 40)
      {
LABEL_7:
        v6 = 0;
      }
      else
      {
        if (v12)
          v13 = v12 - 24;
        else
          v13 = 0;
        if (*(unsigned __int8 *)(v13 + 16) - 29 >= 0xB)
          v6 = 0;
        else
          v6 = v13;
      }
LABEL_19:
      v14 = sub_1C56B00F0(a1, a2, (llvm::Type *)v6);
      if (v14)
      {
        if (sub_1C628F700((uint64_t)a2, v4, v14))
          v5 = 0;
      }
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        return v5 != 0;
    }
  }
  return 1;
}

void sub_1C56AFF34()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F31F0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F31F0))
      __cxa_guard_release(&qword_1EF8F31F0);
  }
}

uint64_t sub_1C56AFF78(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_1C56AFF84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  if (!*(_BYTE *)(a1 + 72))
    *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 64) = v2;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a1 + 56);
  return 0;
}

uint64_t *sub_1C56AFFC8(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56AFFE0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B0028(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1C6284150((llvm::IRPosition *)(a1 - 16));
  if (!*(_BYTE *)(a1 + 40))
    *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
  return 0;
}

uint64_t sub_1C56B006C(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t result;
  unint64_t *v6;

  v4 = a1 + 2;
  if (*(_BYTE *)(*(_QWORD *)sub_1C6284150((llvm::IRPosition *)(a1 + 2)) + 8) == 7)
    (*(void (**)(uint64_t *))(*a1 + 120))(a1);
  v6 = 0;
  result = sub_1C62883D4(a2, v4, &v6);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  return result;
}

llvm::ConstantExpr *sub_1C56B00F0(uint64_t a1, const llvm::Instruction **a2, llvm::Type *a3)
{
  llvm::ConstantExpr *v3;
  llvm::UndefValue *v7;
  llvm::UndefValue *v9;
  llvm::Type *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  llvm::PoisonValue *v14;
  llvm::ConstantExpr *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int32x2_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  int32x2_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  int v44;
  llvm::PoisonValue *v45;
  _QWORD v46[2];
  unsigned int v47;
  uint64_t v48[3];
  char v49;

  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(llvm::UndefValue **)(a1 + 64);
    if (!v7)
      return 0;
  }
  else
  {
    v9 = (llvm::UndefValue *)sub_1C62846C0((llvm::IRPosition *)(a1 + 16));
    v7 = llvm::UndefValue::get(v9, v10);
    if (!v7)
      return 0;
  }
  if (v7 == (llvm::UndefValue *)sub_1C6284150((llvm::IRPosition *)(a1 + 16)))
    return 0;
  v47 = 128;
  v11 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v12 = 0;
  v46[0] = v11;
  v46[1] = 0;
  do
  {
    v13 = &v11[v12];
    *((_QWORD *)v13 + 2) = 0;
    *((_QWORD *)v13 + 3) = -4096;
    *(_QWORD *)v13 = &unk_1E814DA10;
    *((_QWORD *)v13 + 1) = 2;
    v12 += 64;
    *((_QWORD *)v13 + 4) = 0;
  }
  while (v12 != 0x2000);
  LOBYTE(v48[0]) = 0;
  v49 = 0;
  v14 = (llvm::PoisonValue *)sub_1C62846C0((llvm::IRPosition *)(a1 + 16));
  v15 = sub_1C56B0454(a2, (const llvm::AbstractAttribute *)a1, (uint64_t)v7, v14, a3, 1, (uint64_t)v46);
  if (v15)
  {
    v45 = (llvm::PoisonValue *)sub_1C62846C0((llvm::IRPosition *)(a1 + 16));
    v3 = sub_1C56B0454(a2, (const llvm::AbstractAttribute *)a1, (uint64_t)v7, v45, a3, 0, (uint64_t)v46);
  }
  if (v49)
  {
    sub_1C4E43068((uint64_t)v48);
    MEMORY[0x1CAA32FB4](v48[0], 8);
    v49 = 0;
  }
  v16 = (_QWORD *)v46[0];
  if (v47)
  {
    v17 = v46[0] + ((unint64_t)v47 << 6);
    do
    {
      v18 = v16[3];
      if ((v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v19 = v16[7];
        if (v19)
        {
          if (v19 != -8192 && v19 != -4096)
          {
            v20 = v16[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v20 = v16[6];
            v21 = (unint64_t *)v16[6];
            if (v21)
            {
              *v21 = *v21 & 7 | v20;
            }
            else
            {
              v22 = v16[7];
              v23 = ***(int32x2_t ****)v22;
              v24 = (unint64_t)v23[303];
              if (v24 <= v20)
              {
                v25 = v23[305].u32[0];
                if (v24 + 16 * v25 > v20)
                {
                  v26 = v25 - 1;
                  LODWORD(v27) = v26 & ((v22 >> 4) ^ (v22 >> 9));
                  v28 = (uint64_t *)(v24 + 16 * v27);
                  v29 = *v28;
                  if (v22 == *v28)
                  {
LABEL_27:
                    *v28 = -8192;
                    v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
                    v22 = v16[7];
                  }
                  else
                  {
                    v30 = 1;
                    while (v29 != -4096)
                    {
                      v31 = v27 + v30++;
                      v27 = v31 & v26;
                      v29 = *(_QWORD *)(v24 + 16 * v27);
                      if (v22 == v29)
                      {
                        v28 = (uint64_t *)(v24 + 16 * v27);
                        goto LABEL_27;
                      }
                    }
                  }
                  *(_BYTE *)(v22 + 17) &= ~1u;
                }
              }
            }
            v18 = v16[3];
          }
        }
      }
      if (v18 != -4096 && v18 != -8192 && v18 != 0)
      {
        v33 = v16[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v33 = v16[2];
        v34 = (unint64_t *)v16[2];
        if (v34)
        {
          *v34 = *v34 & 7 | v33;
        }
        else
        {
          v35 = v16[3];
          v36 = ***(int32x2_t ****)v35;
          v37 = (unint64_t)v36[303];
          if (v37 <= v33)
          {
            v38 = v36[305].u32[0];
            if (v37 + 16 * v38 > v33)
            {
              v39 = v38 - 1;
              LODWORD(v40) = v39 & ((v35 >> 4) ^ (v35 >> 9));
              v41 = (uint64_t *)(v37 + 16 * v40);
              v42 = *v41;
              if (v35 == *v41)
              {
LABEL_46:
                *v41 = -8192;
                v36[304] = vadd_s32(v36[304], (int32x2_t)0x1FFFFFFFFLL);
                v35 = v16[3];
              }
              else
              {
                v43 = 1;
                while (v42 != -4096)
                {
                  v44 = v40 + v43++;
                  v40 = v44 & v39;
                  v42 = *(_QWORD *)(v37 + 16 * v40);
                  if (v35 == v42)
                  {
                    v41 = (uint64_t *)(v37 + 16 * v40);
                    goto LABEL_46;
                  }
                }
              }
              *(_BYTE *)(v35 + 17) &= ~1u;
            }
          }
        }
      }
      v16 += 8;
    }
    while (v16 != (_QWORD *)v17);
    v16 = (_QWORD *)v46[0];
  }
  MEMORY[0x1CAA32FB4](v16, 8);
  if (!v15)
    return 0;
  return v3;
}

llvm::ConstantExpr *sub_1C56B0454(const llvm::Instruction **a1, const llvm::AbstractAttribute *a2, uint64_t a3, llvm::PoisonValue *a4, llvm::Type *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  llvm::ConstantExpr *result;
  unint64_t v24;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int32x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t AssumedSimplified;
  llvm::Type *v44;
  llvm::InformationCache *v45;
  int v46;
  llvm::AA *v47;
  unsigned int v48;
  uint64_t v49;
  int isSafeToSpeculativelyExecute;
  int v51;
  uint64_t v52;
  int32x2_t *****v53;
  int32x2_t ****v54;
  llvm::ConstantExpr *v55;
  _QWORD *v56;
  unint64_t v57;
  int32x2_t ****v58;
  int32x2_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int32x2_t *****v64;
  int32x2_t ****v65;
  int v66;
  int v67;
  llvm::ConstantExpr *v68;
  unint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  int32x2_t *v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  int32x2_t ****v85;
  int32x2_t *v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  int32x2_t *****v91;
  int32x2_t ****v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  llvm::LLVMContext *v99;
  llvm::LLVMContext *v100;
  uint64_t v101;
  uint64_t v102;
  llvm::ValueSymbolTable *v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  int32x2_t *v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  int32x2_t *****v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int32x2_t ****v123;
  _QWORD v124[4];

  v11 = a3;
  v14 = *(_QWORD *)a7;
  v15 = *(unsigned int *)(a7 + 16);
  if ((_DWORD)v15)
  {
    v16 = ((_DWORD)v15 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v17 = (_QWORD *)(v14 + (v16 << 6));
    v18 = v17[3];
    if (v18 == a3)
      goto LABEL_8;
    v19 = 1;
    while (v18 != -4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & (v15 - 1);
      v17 = (_QWORD *)(v14 + (v16 << 6));
      v18 = v17[3];
      if (v18 == a3)
        goto LABEL_8;
    }
  }
  v17 = (_QWORD *)(v14 + (v15 << 6));
LABEL_8:
  v120 = 6;
  if (v17 == (_QWORD *)(v14 + (v15 << 6)))
  {
    v21 = 0;
    result = 0;
    v121 = 0;
    v122 = 0;
  }
  else
  {
    v21 = 0;
    result = (llvm::ConstantExpr *)v17[7];
    v121 = 0;
    v122 = (uint64_t)result;
    if (result != (llvm::ConstantExpr *)-8192 && result != (llvm::ConstantExpr *)-4096 && result != 0)
    {
      v24 = v17[5] & 0xFFFFFFFFFFFFFFF8;
      v121 = *(_QWORD *)v24;
      *(_QWORD *)v24 = &v120;
      v120 = v24 | 6;
      v21 = v121;
      if (v121)
        *(_QWORD *)v121 = *(_QWORD *)v121 & 7 | (unint64_t)&v121;
      result = (llvm::ConstantExpr *)v122;
    }
  }
  if (result != (llvm::ConstantExpr *)-8192 && result != (llvm::ConstantExpr *)-4096 && result != 0)
  {
    v32 = v120 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v120 & 0xFFFFFFFFFFFFFFF8) = v21;
    if (v121)
    {
      *(_QWORD *)v121 = *(_QWORD *)v121 & 7 | v32;
    }
    else
    {
      v33 = v122;
      v34 = ***(int32x2_t ****)v122;
      v35 = (unint64_t)v34[303];
      if (v35 <= v32)
      {
        v36 = v34[305].u32[0];
        if (v35 + 16 * v36 > v32)
        {
          v37 = v36 - 1;
          LODWORD(v38) = v37 & ((v122 >> 4) ^ (v122 >> 9));
          v39 = (uint64_t *)(v35 + 16 * v38);
          v40 = *v39;
          if (v122 == *v39)
          {
LABEL_41:
            *v39 = -8192;
            v34[304] = vadd_s32(v34[304], (int32x2_t)0x1FFFFFFFFLL);
            v33 = v122;
          }
          else
          {
            v41 = 1;
            while (v40 != -4096)
            {
              v42 = v38 + v41++;
              v38 = v42 & v37;
              v40 = *(_QWORD *)(v35 + 16 * v38);
              if (v122 == v40)
              {
                v39 = (uint64_t *)(v35 + 16 * v38);
                goto LABEL_41;
              }
            }
          }
          *(_BYTE *)(v33 + 17) &= ~1u;
        }
      }
    }
  }
  if (!result)
  {
    v118 = 0;
    v26 = *(unsigned __int8 *)(a3 + 16);
    if (v26 != 21)
    {
      if (v26 < 0x1C)
      {
        if (!*(_BYTE *)(a3 + 16))
        {
          v31 = a3 | 2;
LABEL_45:
          v120 = v31;
          v121 = 0;
          AssumedSimplified = llvm::Attributor::getAssumedSimplified((llvm::Attributor *)a1, (const llvm::IRPosition *)&v120, a2, &v118);
          if (!(_BYTE)v44)
            return (llvm::ConstantExpr *)llvm::PoisonValue::get(a4, v44);
          if (AssumedSimplified)
            v11 = AssumedSimplified;
          if (v11 && *(unsigned __int8 *)(v11 + 16) <= 0x14u)
          {
            v120 = (uint64_t)v124;
            v121 = (unint64_t)v124;
            v122 = 4;
            LODWORD(v123) = 0;
            v46 = sub_1C53774DC(v11, (llvm::SmallPtrSetImplBase *)&v120);
            if (v121 == v120)
            {
              if (v46)
                goto LABEL_52;
            }
            else
            {
              free((void *)v121);
              if (v46)
                goto LABEL_52;
            }
            return (llvm::ConstantExpr *)v11;
          }
LABEL_52:
          if (a5 && llvm::AA::isValidAtPosition((llvm::AA *)v11, a5, a1[11], v45))
          {
            v47 = (llvm::AA *)v11;
            return sub_1C56B0EB8(v47, a4, a5, a6);
          }
          v48 = *(unsigned __int8 *)(v11 + 16);
          if (v48 < 0x1C)
            return 0;
          if ((_DWORD)a6)
          {
            v49 = v48 - 33;
            if (v49 <= 0x37)
            {
              if (((1 << v49) & 0x8000000000041) != 0)
              {
                v101 = *(_QWORD *)(v11 + 64);
                if (!v101 || (*(_BYTE *)(v101 + 20) & 4) == 0 && (*(_BYTE *)(v101 + 17) & 0x10) == 0)
                {
                  LODWORD(v120) = 7;
                  if (sub_1C53E4BBC(v11, (__int32 *)&v120, 1uLL))
                  {
                    v116 = *(_QWORD *)(v11 - 32);
                    if (!v116
                      || *(_BYTE *)(v116 + 16)
                      || *(_QWORD *)(v116 + 24) != *(_QWORD *)(v11 + 72)
                      || *(_DWORD *)(v116 + 36) != 7)
                    {
                      return 0;
                    }
                  }
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction(v11, 66) & 1) == 0
                    && !llvm::CallBase::hasFnAttrOnCalledFunction(v11, 44))
                  {
                    return 0;
                  }
                }
              }
              else if (((1 << v49) & 0x808001C8000010) != 0 || v49 == 28 && (*(_WORD *)(v11 + 18) & 0x301) != 0)
              {
                return 0;
              }
            }
            isSafeToSpeculativelyExecute = llvm::isSafeToSpeculativelyExecute(v11, (unint64_t *)a5, 0, 0);
            result = 0;
            if (!isSafeToSpeculativelyExecute)
              return result;
          }
          v51 = *(_DWORD *)(v11 + 20);
          if ((v51 & 0x40000000) != 0)
          {
            v53 = *(int32x2_t ******)(v11 - 8);
            v52 = v51 & 0x7FFFFFF;
          }
          else
          {
            v52 = v51 & 0x7FFFFFF;
            v53 = (int32x2_t *****)(v11 - 32 * v52);
          }
          if (v52)
          {
            v117 = &v53[4 * v52];
            do
            {
              v54 = *v53;
              result = (llvm::ConstantExpr *)sub_1C56B0454(a1, a2, *v53, a4, a5, a6, a7);
              if (!result)
                return result;
              if ((a6 & 1) == 0)
              {
                v55 = result;
                v121 = 2;
                v122 = 0;
                v123 = v54;
                if (v54 != (int32x2_t ****)-8192 && v54 != (int32x2_t ****)-4096 && v54)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v121);
                v120 = (uint64_t)&unk_1E814DA10;
                v124[0] = a7;
                v56 = sub_1C52E2ED8(a7, &v120);
                if (v123 != (int32x2_t ****)-8192 && v123 != (int32x2_t ****)-4096 && v123)
                {
                  v57 = v121 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v121 & 0xFFFFFFFFFFFFFFF8) = v122;
                  if (v122)
                  {
                    *(_QWORD *)v122 = *(_QWORD *)v122 & 7 | v57;
                  }
                  else
                  {
                    v58 = v123;
                    v59 = ***v123;
                    v60 = (unint64_t)v59[303];
                    if (v60 <= v57)
                    {
                      v61 = v59[305].u32[0];
                      if (v60 + 16 * v61 > v57)
                      {
                        v62 = v61 - 1;
                        LODWORD(v63) = v62 & ((v123 >> 4) ^ (v123 >> 9));
                        v64 = (int32x2_t *****)(v60 + 16 * v63);
                        v65 = *v64;
                        if (v123 == *v64)
                        {
LABEL_88:
                          *v64 = (int32x2_t ****)-8192;
                          v59[304] = vadd_s32(v59[304], (int32x2_t)0x1FFFFFFFFLL);
                          v58 = v123;
                        }
                        else
                        {
                          v66 = 1;
                          while (v65 != (int32x2_t ****)-4096)
                          {
                            v67 = v63 + v66++;
                            v63 = v67 & v62;
                            v65 = *(int32x2_t *****)(v60 + 16 * v63);
                            if (v123 == v65)
                            {
                              v64 = (int32x2_t *****)(v60 + 16 * v63);
                              goto LABEL_88;
                            }
                          }
                        }
                        *((_BYTE *)v58 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v68 = (llvm::ConstantExpr *)v56[7];
                if (v68 != v55)
                {
                  if (v68 && v68 != (llvm::ConstantExpr *)-8192 && v68 != (llvm::ConstantExpr *)-4096)
                  {
                    v69 = v56[5] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v69 = v56[6];
                    v70 = (unint64_t *)v56[6];
                    if (v70)
                    {
                      *v70 = *v70 & 7 | v69;
                    }
                    else
                    {
                      v71 = v56[7];
                      v72 = ***(int32x2_t ****)v71;
                      v73 = (unint64_t)v72[303];
                      if (v73 <= v69)
                      {
                        v74 = v72[305].u32[0];
                        if (v73 + 16 * v74 > v69)
                        {
                          v75 = v74 - 1;
                          LODWORD(v76) = v75 & ((v71 >> 4) ^ (v71 >> 9));
                          v77 = (uint64_t *)(v73 + 16 * v76);
                          v78 = *v77;
                          if (v71 == *v77)
                          {
LABEL_108:
                            *v77 = -8192;
                            v72[304] = vadd_s32(v72[304], (int32x2_t)0x1FFFFFFFFLL);
                            v71 = v56[7];
                          }
                          else
                          {
                            v79 = 1;
                            while (v78 != -4096)
                            {
                              v80 = v76 + v79++;
                              v76 = v80 & v75;
                              v78 = *(_QWORD *)(v73 + 16 * v76);
                              if (v71 == v78)
                              {
                                v77 = (uint64_t *)(v73 + 16 * v76);
                                goto LABEL_108;
                              }
                            }
                          }
                          *(_BYTE *)(v71 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v56[7] = v55;
                  if (v55 != (llvm::ConstantExpr *)-8192 && v55 != (llvm::ConstantExpr *)-4096)
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v56 + 5));
                }
              }
              v53 += 4;
            }
            while (v53 != v117);
          }
          if ((a6 & 1) != 0)
          {
            v81 = v11;
            if (!v11)
              return 0;
          }
          else
          {
            llvm::Instruction::clone((llvm::Instruction *)v11);
            v81 = v82;
            v121 = 2;
            v122 = 0;
            v123 = (int32x2_t ****)v11;
            if (v11 != -8192 && v11 != -4096 && v11)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v121);
            v120 = (uint64_t)&unk_1E814DA10;
            v124[0] = a7;
            v83 = sub_1C52E2ED8(a7, &v120);
            if (v123 != (int32x2_t ****)-8192 && v123 != (int32x2_t ****)-4096 && v123)
            {
              v84 = v121 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v121 & 0xFFFFFFFFFFFFFFF8) = v122;
              if (v122)
              {
                *(_QWORD *)v122 = *(_QWORD *)v122 & 7 | v84;
              }
              else
              {
                v85 = v123;
                v86 = ***v123;
                v87 = (unint64_t)v86[303];
                if (v87 <= v84)
                {
                  v88 = v86[305].u32[0];
                  if (v87 + 16 * v88 > v84)
                  {
                    v89 = v88 - 1;
                    LODWORD(v90) = v89 & ((v123 >> 4) ^ (v123 >> 9));
                    v91 = (int32x2_t *****)(v87 + 16 * v90);
                    v92 = *v91;
                    if (v123 == *v91)
                    {
LABEL_129:
                      *v91 = (int32x2_t ****)-8192;
                      v86[304] = vadd_s32(v86[304], (int32x2_t)0x1FFFFFFFFLL);
                      v85 = v123;
                    }
                    else
                    {
                      v93 = 1;
                      while (v92 != (int32x2_t ****)-4096)
                      {
                        v94 = v90 + v93++;
                        v90 = v94 & v89;
                        v92 = *(int32x2_t *****)(v87 + 16 * v90);
                        if (v123 == v92)
                        {
                          v91 = (int32x2_t *****)(v87 + 16 * v90);
                          goto LABEL_129;
                        }
                      }
                    }
                    *((_BYTE *)v85 + 17) &= ~1u;
                  }
                }
              }
            }
            v95 = v83[7];
            if (v95 != v81)
            {
              if (v95 && v95 != -8192 && v95 != -4096)
              {
                v104 = v83[5] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v104 = v83[6];
                v105 = (unint64_t *)v83[6];
                if (v105)
                {
                  *v105 = *v105 & 7 | v104;
                }
                else
                {
                  v106 = v83[7];
                  v107 = ***(int32x2_t ****)v106;
                  v108 = (unint64_t)v107[303];
                  if (v108 <= v104)
                  {
                    v109 = v107[305].u32[0];
                    if (v108 + 16 * v109 > v104)
                    {
                      v110 = v109 - 1;
                      LODWORD(v111) = v110 & ((v106 >> 4) ^ (v106 >> 9));
                      v112 = (uint64_t *)(v108 + 16 * v111);
                      v113 = *v112;
                      if (v106 == *v112)
                      {
LABEL_162:
                        *v112 = -8192;
                        v107[304] = vadd_s32(v107[304], (int32x2_t)0x1FFFFFFFFLL);
                        v106 = v83[7];
                      }
                      else
                      {
                        v114 = 1;
                        while (v113 != -4096)
                        {
                          v115 = v111 + v114++;
                          v111 = v115 & v110;
                          v113 = *(_QWORD *)(v108 + 16 * v111);
                          if (v106 == v113)
                          {
                            v112 = (uint64_t *)(v108 + 16 * v111);
                            goto LABEL_162;
                          }
                        }
                      }
                      *(_BYTE *)(v106 + 17) &= ~1u;
                    }
                  }
                }
              }
              v83[7] = v81;
              if (v81 != -8192 && v81 != -4096 && v81)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v83 + 5));
            }
            v96 = *((_QWORD *)a5 + 5);
            *(_QWORD *)(v81 + 40) = v96;
            *(_WORD *)(v96 + 18) &= ~0x8000u;
            if ((*(_BYTE *)(v81 + 23) & 0x10) != 0)
            {
              v102 = *(_QWORD *)(v96 + 56);
              if (v102)
              {
                v103 = *(llvm::ValueSymbolTable **)(v102 + 104);
                if (v103)
                  llvm::ValueSymbolTable::reinsertValue(v103, (llvm::Value *)v81);
              }
            }
            v97 = *((_QWORD *)a5 + 3);
            *(_QWORD *)(v81 + 32) = (char *)a5 + 24;
            *(_QWORD *)(v81 + 24) = v97;
            *(_QWORD *)(v97 + 8) = v81 + 24;
            *((_QWORD *)a5 + 3) = v81 + 24;
            v98 = operator new();
            *(_DWORD *)v98 = 0;
            *(_QWORD *)(v98 + 8) = 0;
            *(_DWORD *)(v98 + 16) = 0;
            *(_QWORD *)(v98 + 40) = a7;
            *(_QWORD *)(v98 + 24) = v98 + 40;
            *(_QWORD *)(v98 + 48) = 0;
            *(_QWORD *)(v98 + 32) = 0x200000001;
            *(_QWORD *)(v98 + 72) = v98 + 88;
            *(_QWORD *)(v98 + 80) = 0x400000000;
            *(_QWORD *)(v98 + 184) = v98 + 200;
            *(_QWORD *)(v98 + 192) = 0x100000000;
            *(_QWORD *)(v98 + 216) = v98 + 232;
            *(_QWORD *)(v98 + 224) = 0x1000000000;
            v119 = v98;
            v120 = v98;
            sub_1C5FD706C(v98, (uint64_t ***)v81);
            sub_1C5FD3718(&v120, v99);
            llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v119, v100);
          }
          v47 = (llvm::AA *)v81;
          return sub_1C56B0EB8(v47, a4, a5, a6);
        }
      }
      else
      {
        v27 = v26 - 33;
        v28 = v27 > 0x33;
        v29 = (1 << v27) & 0x8000000000041;
        if (!v28 && v29 != 0)
        {
          v31 = a3 | 1;
          goto LABEL_45;
        }
      }
    }
    v31 = a3;
    goto LABEL_45;
  }
  return result;
}

llvm::ConstantExpr *sub_1C56B0EB8(llvm::AA *a1, llvm::Value *a2, llvm::Type *a3, char a4)
{
  llvm::AA *v7;
  llvm::ConstantExpr *result;
  _BYTE v9[32];
  __int16 v10;

  v7 = a1;
  result = llvm::AA::getWithType(a1, a2, a3);
  if (!result)
  {
    if (a3 && llvm::Type::canLosslesslyBitCastTo(*(llvm::Type **)v7, a2))
    {
      if ((a4 & 1) == 0)
      {
        v10 = 257;
        return llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(v7, (uint64_t)a2, (uint64_t)v9, (uint64_t)a3);
      }
      return v7;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C56B0F3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;

  v12 = *a2;
  v13 = 0;
  sub_1C628F788(a1, &v12, &v13, (uint64_t)&v10);
  v4 = v10;
  if (v11)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 528);
    if (v6 >= *(_DWORD *)(a1 + 532))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 520, a1 + 536, v6 + 1, 16);
      LODWORD(v6) = *(_DWORD *)(a1 + 528);
    }
    v7 = (_QWORD *)(*(_QWORD *)(a1 + 520) + 16 * v6);
    *v7 = v5;
    v7[1] = 0;
    v8 = *(_DWORD *)(a1 + 528);
    *(_DWORD *)(a1 + 528) = v8 + 1;
    *(_DWORD *)(v4 + 8) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v10 + 8);
  }
  return *(_QWORD *)(a1 + 520) + 16 * v8 + 8;
}

uint64_t sub_1C56B0FF8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[512];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C628F9B8(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C628F9B8(a1, (uint64_t)v14, (uint64_t)v9);
}

_QWORD *sub_1C56B117C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B11B0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56B11F4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F31F8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F31F8))
      __cxa_guard_release(&qword_1EF8F31F8);
  }
}

uint64_t *sub_1C56B1234(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B124C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56B1294(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B12C8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B130C(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v4;

  result = sub_1C56B006C(a1, a2);
  v4 = a1[2] & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*((_DWORD *)a1 + 4) & 3) == 0)
    v4 = *(_QWORD *)(v4 + 24);
  if (*(unsigned __int8 *)(v4 + 16) <= 0x14u)
    return (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  return result;
}

void sub_1C56B1368()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3200);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3200))
      __cxa_guard_release(&qword_1EF8F3200);
  }
}

uint64_t sub_1C56B13A8(uint64_t a1, llvm::Attributor *a2)
{
  uint64_t v4;
  int v5;
  _DWORD *v6;
  unint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t v24;
  int64x2_t v25;
  int64x2_t v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[32];
  uint64_t v30;
  int64x2_t v31;
  int64x2_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[6];

  v35[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(unsigned __int8 *)(a1 + 72);
  v6 = (_DWORD *)(a1 + 16);
  v7 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  v8 = *(unsigned __int8 *)(v7 + 16);
  if (v8 == 60)
    v9 = (uint64_t *)v7;
  else
    v9 = 0;
  if (v8 == 60)
  {
    v14 = *((_QWORD *)a2 + 11);
    v30 = v7;
    v24 = 0;
    if (sub_1C614F7B0((uint64_t *)(v14 + 392), &v30, &v24))
    {
      v15 = v24;
      v16 = *(_QWORD *)(v14 + 392);
      v17 = *(unsigned int *)(v14 + 408);
    }
    else
    {
      v16 = *(_QWORD *)(v14 + 392);
      v17 = *(unsigned int *)(v14 + 408);
      v15 = v16 + 8 * v17;
    }
    if (v15 != v16 + 8 * v17)
    {
      v30 = 1;
      v31 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v32 = v31;
      v33 = v35;
      v34 = 0x400000000;
      v24 = 1;
      v25 = v31;
      v26 = v31;
      v27 = v29;
      v28 = 0x400000000;
      v23 = 0;
      v18 = 1;
      if (llvm::AA::getPotentiallyLoadedValues(a2, (uint64_t)v9, &v30, &v24, (const llvm::AbstractAttribute *)a1, &v23, 1)&& (_DWORD)v28)
      {
        v9 = (uint64_t *)v27;
        v19 = 8 * v28;
        while (1)
        {
          v20 = *v9;
          if (*v9)
          {
            if (*(_BYTE *)(v20 + 16) == 61)
            {
              v21 = *(_DWORD *)(v20 + 20);
              if ((v21 & 0x40000000) != 0)
                v22 = *(uint64_t **)(v20 - 8);
              else
                v22 = (uint64_t *)(v20 - 32 * (v21 & 0x7FFFFFF));
              if (!llvm::Attributor::isAssumedDead((uint64_t)a2, v22, a1, 0, &v23, 0, 1))
              {
LABEL_29:
                v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
                v18 = 0;
                break;
              }
            }
            else if ((llvm::Attributor::isAssumedDead((uint64_t)a2, v20, a1, 0, &v23, 0, 1) & 1) == 0)
            {
              goto LABEL_29;
            }
          }
          ++v9;
          v19 -= 8;
          if (!v19)
          {
            v18 = 1;
            break;
          }
        }
      }
      if (v27 != v29)
        free(v27);
      if ((v24 & 1) == 0)
        MEMORY[0x1CAA32FB4](v25.i64[0], 8);
      if (v33 != v35)
        free(v33);
      if ((v30 & 1) != 0)
      {
        if (!v18)
          return (uint64_t)v9;
      }
      else
      {
        MEMORY[0x1CAA32FB4](v31.i64[0], 8);
        if (!v18)
          return (uint64_t)v9;
      }
    }
  }
  v30 = (uint64_t)a2;
  v31.i64[0] = a1;
  LOBYTE(v24) = 0;
  v23 = 0;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = sub_1C5676CEC(v6);
  if ((sub_1C5692D04(a2, v10, v11, (const llvm::AbstractAttribute *)a1, (uint64_t)&v24, (uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, BOOL))sub_1C56B180C, (uint64_t)&v30, v12, &v23) & 1) == 0&& (sub_1C56B1718(a1, (uint64_t)a2) & 1) == 0)
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  }
  if (v5 && *(_BYTE *)(a1 + 72))
    return v4 == *(_QWORD *)(a1 + 64);
  return (v5 == 0) ^ (*(_BYTE *)(a1 + 72) != 0);
}

uint64_t *sub_1C56B16B8(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B16D0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B1718(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  llvm::AbstractAttribute *v5;
  llvm::Value **v6;
  char v7;
  uint64_t v8;
  char v9;

  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(_BYTE *)(*(_QWORD *)sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 8) == 13)
  {
    v5 = sub_1C5695480(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1, 2);
    v6 = sub_1C628FA84((uint64_t)v5);
    if (!v7)
    {
LABEL_3:
      *(_BYTE *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 72) = 0;
LABEL_12:
      v8 = 1;
      llvm::Attributor::recordDependence(a2, (uint64_t)v5, a1, 1);
      return v8;
    }
    if (v6)
      goto LABEL_16;
  }
  if (*(_BYTE *)(*(_QWORD *)sub_1C6284150(v4) + 8) == 13)
  {
    v5 = sub_1C56AA6B8(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1, 2);
    v6 = sub_1C628FB0C((uint64_t)v5);
    if (!v9)
      goto LABEL_3;
    if (v6)
    {
LABEL_16:
      if (!*(_BYTE *)(a1 + 72))
        *(_BYTE *)(a1 + 72) = 1;
      *(_QWORD *)(a1 + 64) = v6;
      goto LABEL_12;
    }
  }
  return 0;
}

BOOL sub_1C56B180C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v17;
  llvm *v18;
  llvm::Attributor *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  llvm::Attributor *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  llvm::Attributor *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v46;
  unint64_t v47;
  llvm::Type *v48;
  llvm::DSOLocalEquivalent **v49;
  char v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t AssumedSimplified;
  char v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  llvm::UndefValue *v70;
  llvm::ConstantExpr *v71;
  uint64_t v72;
  BOOL v73;
  unint64_t v74;
  const llvm::APInt *v75;
  char v76;
  uint64_t *v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  llvm::ConstantInt *v87;
  unsigned int v88;
  unint64_t v89;
  llvm::ValueHandleBase *v90;
  llvm::ConstantExpr *v91;
  uint64_t v92;
  BOOL v93;
  int v94;
  llvm::AbstractAttribute *v96;
  const llvm::APInt *v97;
  _BOOL8 v98;
  llvm::ConstantInt *v99;
  unsigned int v100;
  unint64_t v101;
  llvm::ValueHandleBase *v102;
  llvm::ConstantExpr *v103;
  uint64_t v104;
  BOOL v105;
  llvm *v106;
  llvm::UndefValue *v107;
  char v108;
  BOOL v109[8];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  llvm *v113;
  __int16 v114;
  BOOL v115;
  void *v116;
  uint64_t v117;
  _QWORD v118[10];

  v6 = a2;
  v118[8] = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = a1[1];
  v11 = *(_QWORD *)(v9 + 24);
  v12 = *(unsigned __int8 *)(a2 + 16);
  if (v12 != 21)
  {
    if (v12 < 0x1C)
    {
      if (!*(_BYTE *)(a2 + 16))
        a2 |= 2uLL;
    }
    else
    {
      v13 = v12 - 33;
      v14 = v13 > 0x33;
      v15 = (1 << v13) & 0x8000000000041;
      if (!v14 && v15 != 0)
      {
        v11 = 0;
        a2 |= 1uLL;
      }
    }
  }
  if ((llvm::AbstractAttribute *)v9 != sub_1C5677180(v8, a2, v11, v9, 0, 0, 1) || (a5 & 1) != 0)
  {
    v24 = (llvm::Attributor *)*a1;
    v25 = *(_QWORD *)(v9 + 24);
    v26 = *(unsigned __int8 *)(v6 + 16);
    if (v26 != 21)
    {
      if (v26 < 0x1C)
      {
        if (!*(_BYTE *)(v6 + 16))
          v6 |= 2uLL;
      }
      else
      {
        v27 = v26 - 33;
        if (v27 <= 0x33 && ((1 << v27) & 0x8000000000041) != 0)
        {
          v25 = 0;
          v6 |= 1uLL;
        }
      }
    }
    v116 = (void *)v6;
    v117 = v25;
    return sub_1C56B1FD4(v9, v24, (const llvm::AbstractAttribute *)v9, (llvm::IRPosition *)&v116);
  }
  v17 = *(unsigned __int8 *)(v6 + 16);
  if (v17 <= 0x1B)
    v18 = 0;
  else
    v18 = (llvm *)v6;
  if (v17 < 0x1C)
    return 0;
  if (v17 - 83 < 0xFFFFFFFE)
    goto LABEL_17;
  v28 = *(_QWORD *)(v6 - 64);
  v29 = (llvm::Attributor *)*a1;
  v30 = *(_QWORD *)(v6 - 32);
  v109[0] = 0;
  v31 = *(_QWORD *)(v9 + 24);
  v32 = *(unsigned __int8 *)(v28 + 16);
  if (v32 != 21)
  {
    if (v32 < 0x1C)
    {
      if (!*(_BYTE *)(v28 + 16))
        v28 |= 2uLL;
    }
    else
    {
      v33 = v32 - 33;
      v14 = v33 > 0x33;
      v34 = (1 << v33) & 0x8000000000041;
      if (!v14 && v34 != 0)
      {
        v31 = 0;
        v28 |= 1uLL;
      }
    }
  }
  v116 = (void *)v28;
  v117 = v31;
  AssumedSimplified = llvm::Attributor::getAssumedSimplified(v29, (const llvm::IRPosition *)&v116, (const llvm::AbstractAttribute *)v9, v109);
  if (!v59)
    return 1;
  v60 = AssumedSimplified;
  if (!AssumedSimplified)
    goto LABEL_17;
  v61 = *(_QWORD *)(v9 + 24);
  v62 = *(unsigned __int8 *)(v30 + 16);
  if (v62 != 21)
  {
    if (v62 < 0x1C)
    {
      if (!*(_BYTE *)(v30 + 16))
        v30 |= 2uLL;
    }
    else
    {
      v63 = v62 - 33;
      if (v63 <= 0x33 && ((1 << v63) & 0x8000000000041) != 0)
      {
        v61 = 0;
        v30 |= 1uLL;
      }
    }
  }
  v116 = (void *)v30;
  v117 = v61;
  v74 = llvm::Attributor::getAssumedSimplified(v29, (const llvm::IRPosition *)&v116, (const llvm::AbstractAttribute *)v9, v109);
  if (!v76)
    return 1;
  if (!v74)
    goto LABEL_17;
  v77 = **(uint64_t ***)v6;
  if (v60 == v74)
  {
    v84 = *(_WORD *)(v6 + 18) & 0x3F;
    if (v84 - 32 < 0xA || v84 <= 0xF && ((1 << v84) & 0xAA55) != 0)
    {
      v85 = *v77;
      v86 = v84 <= 0x29 && ((1 << v84) & 0x2A90000AA00) != 0;
      v87 = *(llvm::ConstantInt **)(v85 + 1888);
      v88 = *(_DWORD *)(v85 + 1896);
      LODWORD(v117) = v88 >> 8;
      if (v88 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v116, v86, 0);
      }
      else
      {
        if (v88 <= 0xFF)
          v89 = 0;
        else
          v89 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v88);
        v116 = (void *)(v89 & v86);
      }
      v90 = llvm::ConstantInt::get(v87, (llvm::LLVMContext *)&v116, v75);
      if (v117 >= 0x41 && v116)
        MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
      v116 = v90;
      LOBYTE(v117) = 1;
      v91 = llvm::AA::combineOptionalValuesInAAValueLatice((unsigned __int8 *)(v9 + 64), (uint64_t)&v116, *(llvm::Value **)v90);
      *(_QWORD *)(v9 + 64) = v91;
      *(_QWORD *)(v9 + 72) = v92;
      if ((_BYTE)v92)
        v93 = v91 == 0;
      else
        v93 = 0;
      v94 = !v93;
      if (v94 == 1 && !v109[0])
        goto LABEL_153;
LABEL_131:
      if ((v94 & 1) != 0)
        return 1;
      goto LABEL_17;
    }
  }
  if (*(_BYTE *)(v6 + 16) == 81 && (*(_WORD *)(v6 + 18) & 0x3E) == 0x20)
  {
    v78 = *(unsigned __int8 *)(v60 + 16);
    if (v78 == 19 || *(_BYTE *)(v74 + 16) == 19)
    {
      v79 = *(_QWORD *)(v6 - 64 + 32 * (v78 == 19));
      v80 = *(unsigned __int8 *)(v79 + 16);
      if (v80 != 21)
      {
        if (v80 < 0x1C)
        {
          if (!*(_BYTE *)(v79 + 16))
            v79 |= 2uLL;
        }
        else
        {
          v81 = v80 - 33;
          v14 = v81 > 0x33;
          v82 = (1 << v81) & 0x8000000000041;
          if (!v14 && v82 != 0)
            v79 |= 1uLL;
        }
      }
      v96 = sub_1C568829C((uint64_t)v29, v79, 0, v9, 0, 0, 1);
      if (*((_BYTE *)v96 + 41))
      {
        v109[0] |= *((_BYTE *)v96 + 40) ^ 1;
        v98 = (*(_WORD *)(v6 + 18) & 0x3F) == 33;
        v99 = *(llvm::ConstantInt **)(*v77 + 1888);
        v100 = *(_DWORD *)(*v77 + 1896);
        LODWORD(v117) = v100 >> 8;
        if (v100 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v116, v98, 0);
        }
        else
        {
          if (v100 <= 0xFF)
            v101 = 0;
          else
            v101 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v100);
          v116 = (void *)(v101 & v98);
        }
        v102 = llvm::ConstantInt::get(v99, (llvm::LLVMContext *)&v116, v97);
        if (v117 >= 0x41 && v116)
          MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
        v116 = v102;
        LOBYTE(v117) = 1;
        v103 = llvm::AA::combineOptionalValuesInAAValueLatice((unsigned __int8 *)(v9 + 64), (uint64_t)&v116, *(llvm::Value **)v102);
        *(_QWORD *)(v9 + 64) = v103;
        *(_QWORD *)(v9 + 72) = v104;
        if ((_BYTE)v104)
          v105 = v103 == 0;
        else
          v105 = 0;
        LOBYTE(v94) = !v105;
        if (!v105 && !v109[0])
        {
LABEL_153:
          (*(void (**)(uint64_t))(*(_QWORD *)(v9 + 32) + 32))(v9 + 32);
          return 1;
        }
        goto LABEL_131;
      }
    }
  }
LABEL_17:
  v19 = (llvm::Attributor *)*a1;
  v115 = 0;
  v20 = *(_DWORD *)(v6 + 20) & 0x7FFFFFF;
  v116 = v118;
  v117 = 0x800000000;
  sub_1C4848C0C((unsigned int *)&v116, v20, 0);
  v21 = *(_DWORD *)(v6 + 20);
  if ((v21 & 0x40000000) != 0)
  {
    v23 = *(uint64_t **)(v6 - 8);
    v22 = v21 & 0x7FFFFFF;
    if (!v22)
    {
LABEL_89:
      v52 = 0;
      goto LABEL_90;
    }
  }
  else
  {
    v22 = v21 & 0x7FFFFFF;
    v23 = (uint64_t *)(v6 - 32 * v22);
    if (!v22)
      goto LABEL_89;
  }
  v106 = v18;
  v37 = 0;
  v38 = 0;
  v39 = 32 * v22;
  do
  {
    v40 = *v23;
    v41 = *(_QWORD *)(v9 + 24);
    v42 = *(unsigned __int8 *)(*v23 + 16);
    if (v42 == 21)
      goto LABEL_45;
    if (v42 >= 0x1C)
    {
      v43 = v42 - 33;
      v14 = v43 > 0x33;
      v44 = (1 << v43) & 0x8000000000041;
      if (!v14 && v44 != 0)
      {
        v41 = 0;
        v46 = v40 | 1;
        goto LABEL_46;
      }
LABEL_45:
      v46 = *v23;
      goto LABEL_46;
    }
    if (*(_BYTE *)(*v23 + 16))
      goto LABEL_45;
    v46 = v40 | 2;
LABEL_46:
    *(_QWORD *)v109 = v46;
    v110 = v41;
    v47 = llvm::Attributor::getAssumedSimplified(v19, (const llvm::IRPosition *)v109, (const llvm::AbstractAttribute *)v9, &v115);
    if (!v50)
    {
      v52 = 1;
      goto LABEL_90;
    }
    if (v47)
      v51 = v47;
    else
      v51 = v40;
    *(_QWORD *)((char *)v116 + v37) = v51;
    v38 |= *(_QWORD *)((char *)v116 + v37) != v40;
    v23 += 4;
    v37 += 8;
    v39 -= 32;
  }
  while (v39);
  if ((v38 & 1) == 0)
    goto LABEL_89;
  v53 = *((_QWORD *)v19 + 11);
  v54 = *(_QWORD *)(*((_QWORD *)v106 + 5) + 56);
  v55 = **(_QWORD **)(v53 + 440);
  v56 = *(_QWORD *)(v54 + 40);
  if (!v55 || v56 == 0)
  {
    v64 = 0;
  }
  else
  {
    v64 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v55, &llvm::DominatorTreeAnalysis::Key, *(_QWORD *)(*((_QWORD *)v106 + 5) + 56))+ 8;
    v56 = *(_QWORD *)(v54 + 40);
    v55 = **(_QWORD **)(*((_QWORD *)v19 + 11) + 440);
  }
  if (!v55 || v56 == 0)
  {
    v66 = 0;
  }
  else
  {
    v66 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v55, &llvm::TargetLibraryAnalysis::Key, v54) + 8;
    v56 = *(_QWORD *)(v54 + 40);
  }
  v67 = **(_QWORD **)(v53 + 440);
  v68 = !v67 || v56 == 0;
  v69 = v68 ? 0 : llvm::AnalysisManager<llvm::Function>::getResultImpl(v67, &llvm::AssumptionAnalysis::Key, v54) + 8;
  *(_QWORD *)v109 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v106 + 5) + 56) + 40) + 272;
  v110 = v66;
  v111 = v64;
  v112 = v69;
  v113 = v106;
  v114 = 257;
  v70 = llvm::SimplifyInstructionWithOperands(v106, (uint64_t)v116, v117, (uint64_t)v109, v48, v49);
  if (!v70)
    goto LABEL_89;
  v107 = v70;
  v108 = 1;
  v71 = llvm::AA::combineOptionalValuesInAAValueLatice((unsigned __int8 *)(v9 + 64), (uint64_t)&v107, *(llvm::Value **)v106);
  *(_QWORD *)(v9 + 64) = v71;
  *(_QWORD *)(v9 + 72) = v72;
  if ((_BYTE)v72)
    v73 = v71 == 0;
  else
    v73 = 0;
  v52 = !v73;
LABEL_90:
  if (v116 != v118)
    free(v116);
  return (v52 & 1) != 0;
}

BOOL sub_1C56B1FD4(uint64_t a1, llvm::Attributor *a2, const llvm::AbstractAttribute *a3, llvm::IRPosition *a4)
{
  uint64_t v8;
  llvm::ConstantExpr *v9;
  uint64_t v10;
  BOOL v11;
  BOOL v13;
  _QWORD v14[2];

  v13 = 0;
  sub_1C6284150(a4);
  v14[0] = llvm::Attributor::getAssumedSimplified(a2, a4, a3, &v13);
  v14[1] = v8;
  v9 = llvm::AA::combineOptionalValuesInAAValueLatice((unsigned __int8 *)(a1 + 64), (uint64_t)v14, *(llvm::Value **)(a1 + 40));
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  if ((_BYTE)v10)
    v11 = v9 == 0;
  else
    v11 = 0;
  return !v11;
}

_QWORD *sub_1C56B2050(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B2084(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56B20C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  unint64_t *v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  unint64_t result;
  __int128 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  sub_1C56B006C((uint64_t *)a1, a2);
  v3 = *(_QWORD *)(a1 + 16) & 3;
  v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = v4;
  if (v3 == 3)
    v5 = *(_QWORD *)(v4 + 24);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (*(_BYTE *)(v5 + 16))
  {
    if (v6 == 21)
    {
      v7 = (_QWORD *)(v5 + 24);
    }
    else
    {
      if (v6 < 0x1C)
        goto LABEL_27;
      v7 = (_QWORD *)(*(_QWORD *)(v5 + 40) + 56);
    }
    if (!*v7)
      goto LABEL_27;
  }
  if (v3 == 3)
    v4 = *(_QWORD *)(v4 + 24);
  v8 = *(unsigned __int8 *)(v4 + 16);
  if (!*(_BYTE *)(v4 + 16))
    goto LABEL_25;
  if (v8 == 21)
  {
    v9 = (unint64_t *)(v4 + 24);
  }
  else
  {
    if (v8 <= 0x1B)
    {
      v4 = 0;
      v10 = MEMORY[0x10];
      goto LABEL_24;
    }
    v9 = (unint64_t *)(*(_QWORD *)(v4 + 40) + 56);
  }
  v4 = *v9;
  v10 = *(unsigned __int8 *)(v4 + 16);
  if (v4)
    v11 = v10 == 3;
  else
    v11 = 0;
  if (!v11)
  {
LABEL_24:
    if (v10)
      goto LABEL_30;
LABEL_25:
    if (*(_QWORD *)(v4 + 72) != v4 + 72 || (*(_BYTE *)(v4 + 34) & 0x80) != 0)
      goto LABEL_30;
    goto LABEL_27;
  }
  if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) != 0)
    goto LABEL_30;
LABEL_27:
  v12 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  if (!*(_BYTE *)(a1 + 72))
    *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 64) = v12;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a1 + 56);
LABEL_30:
  v15 = 69;
  v14 = xmmword_1C86601A4;
  result = llvm::IRPosition::hasAttr((llvm::IRPosition *)(a1 + 16), (int *)&v14, 5, 1, 0);
  if ((_DWORD)result)
  {
    result = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 72))
      *(_BYTE *)(a1 + 72) = 1;
    *(_QWORD *)(a1 + 64) = result;
    *(_BYTE *)(a1 + 57) = *(_BYTE *)(a1 + 56);
  }
  return result;
}

void sub_1C56B226C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3208);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3208))
      __cxa_guard_release(&qword_1EF8F3208);
  }
}

BOOL sub_1C56B22AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t AssociatedArgument;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BOOL8 result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20[2];

  v4 = (uint64_t *)(a1 + 16);
  AssociatedArgument = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 16));
  v6 = AssociatedArgument;
  if (*(_BYTE *)(*(_QWORD *)AssociatedArgument + 8) == 15)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(AssociatedArgument + 24) + 112);
    if (v7)
    {
      v8 = *(_DWORD *)(AssociatedArgument + 32) + 2;
      if (v8 < *(_DWORD *)(v7 + 8))
      {
        v15 = *(_QWORD *)(v7 + 8 * v8 + 40);
        if (v15)
        {
          if ((*(_BYTE *)(v15 + 20) & 0x20) != 0 && (sub_1C5675BDC(a2, v4, a1, 0, v20) & 1) == 0)
            goto LABEL_24;
        }
      }
    }
  }
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(unsigned __int8 *)(a1 + 72);
  v20[0] = a1;
  v20[1] = a2;
  v11 = *(_QWORD *)(a1 + 24);
  if (!v11)
    goto LABEL_19;
  v12 = *(_QWORD *)(v11 - 32);
  if (!v12 || *(_BYTE *)(v12 + 16) || *(_QWORD *)(v12 + 24) != *(_QWORD *)(v11 + 72))
    v12 = 0;
  if (v12 == *(_QWORD *)(v6 + 24))
  {
    llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v17, (const llvm::Use *)(v11 - 32));
    v13 = sub_1C56B24D0(v20, &v17);
    if (v18 != &v19)
      free(v18);
    if ((v13 & 1) != 0)
      goto LABEL_14;
  }
  else
  {
LABEL_19:
    if ((llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C56B25D8, (uint64_t)v20, a1, 1, (_BYTE *)&v19 + 7) & 1) != 0)goto LABEL_14;
  }
  if ((sub_1C56B1718(a1, a2) & 1) != 0)
  {
LABEL_14:
    if (v10 && *(_BYTE *)(a1 + 72))
      return v9 == *(_QWORD *)(a1 + 64);
    else
      return (v10 == 0) ^ (*(_BYTE *)(a1 + 72) != 0);
  }
LABEL_24:
  v16 = sub_1C6284150((llvm::IRPosition *)v4);
  if (!*(_BYTE *)(a1 + 72))
    *(_BYTE *)(a1 + 72) = 1;
  result = 0;
  *(_QWORD *)(a1 + 64) = v16;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a1 + 56);
  return result;
}

uint64_t *sub_1C56B2470(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B2488(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B24D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t result;
  llvm::UndefValue *AssumedConstant;
  char v8;
  llvm::UndefValue *v9;
  llvm::ConstantExpr *v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  void *v15[2];
  _QWORD v16[2];
  _QWORD v17[2];

  v3 = *a1;
  v14 = *a2;
  v15[0] = v16;
  v15[1] = 0;
  if (*((_DWORD *)a2 + 4))
    sub_1C614CA14((uint64_t)v15, (uint64_t)(a2 + 1));
  v4 = sub_1C628686C((llvm::IRPosition *)(v3 + 16), 0);
  v16[0] = sub_1C628D358((uint64_t)&v14, v4);
  v16[1] = v5;
  if (v15[0] != v16)
    free(v15[0]);
  result = sub_1C6283CA4(v16);
  if ((_DWORD)result)
  {
    v13 = 0;
    AssumedConstant = llvm::Attributor::getAssumedConstant((llvm::Attributor *)a1[1], (const llvm::IRPosition *)v16, (const llvm::AbstractAttribute *)v3, &v13);
    if (v8)
    {
      v9 = AssumedConstant;
      if (AssumedConstant)
      {
        result = llvm::AA::isDynamicallyUnique((llvm::AA *)a1[1], (llvm::Attributor *)v3, (int64_t)AssumedConstant, (const llvm::Value *)1);
        if ((_DWORD)result)
        {
          v17[0] = v9;
          v17[1] = 1;
          v10 = llvm::AA::combineOptionalValuesInAAValueLatice((unsigned __int8 *)(v3 + 64), (uint64_t)v17, *(llvm::Value **)(v3 + 40));
          *(_QWORD *)(v3 + 64) = v10;
          *(_QWORD *)(v3 + 72) = v11;
          if ((_BYTE)v11)
            v12 = v10 == 0;
          else
            v12 = 0;
          return !v12;
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C56B25D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  void *v6[2];
  uint64_t v7;

  v5 = *(_QWORD *)a2;
  v6[0] = &v7;
  v6[1] = 0;
  if (*(_DWORD *)(a2 + 16))
    sub_1C614C900((uint64_t)v6, a2 + 8);
  v3 = sub_1C56B24D0(a1, &v5);
  if (v6[0] != &v7)
    free(v6[0]);
  return v3;
}

_QWORD *sub_1C56B264C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B2680(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B26C4()
{
  return 1;
}

void sub_1C56B26CC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3210);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3210))
      __cxa_guard_release(&qword_1EF8F3210);
  }
}

uint64_t sub_1C56B270C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v8;
  int *v9[2];
  char v10;
  _QWORD v11[2];

  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(unsigned __int8 *)(a1 + 72);
  v11[0] = a1;
  v11[1] = a2;
  v8 = 1;
  v9[0] = &v8;
  v9[1] = (int *)1;
  v6 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if ((llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C56B288C, (uint64_t)v11, v6, a1, v9, &v10, 0, 0) & 1) == 0&& (sub_1C56B1718(a1, a2) & 1) == 0)
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  }
  if (v5 && *(_BYTE *)(a1 + 72))
    return v4 == *(_QWORD *)(a1 + 64);
  return (v5 == 0) ^ (*(_BYTE *)(a1 + 72) != 0);
}

uint64_t sub_1C56B27F0(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32))
    return *(_QWORD *)(a1 + 64);
  else
    return 0;
}

uint64_t *sub_1C56B282C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B2844(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C56B288C(const llvm::AbstractAttribute **a1, uint64_t a2)
{
  const llvm::AbstractAttribute *v4;
  llvm::Attributor *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v14[2];

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v7 = *((_QWORD *)v4 + 3);
  v8 = *(unsigned __int8 *)(v6 + 16);
  if (v8 != 21)
  {
    if (v8 < 0x1C)
    {
      if (!*(_BYTE *)(v6 + 16))
        v6 |= 2uLL;
    }
    else
    {
      v9 = v8 - 33;
      v10 = v9 > 0x33;
      v11 = (1 << v9) & 0x8000000000041;
      if (!v10 && v11 != 0)
      {
        v7 = 0;
        v6 |= 1uLL;
      }
    }
  }
  v14[0] = v6;
  v14[1] = v7;
  return sub_1C56B1FD4((uint64_t)v4, v5, v4, (llvm::IRPosition *)v14);
}

_QWORD *sub_1C56B2924(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B2958(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56B299C(uint64_t *a1, uint64_t *a2)
{
  const llvm::AbstractAttribute *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v3 = (const llvm::AbstractAttribute *)a1;
  sub_1C56B006C(a1, a2);
  v4 = sub_1C5676C10((const llvm::AbstractAttribute *)((char *)v3 + 16));
  if (!v4)
  {
    (*(void (**)(const llvm::AbstractAttribute *))(*(_QWORD *)v3 + 120))(v3);
    return;
  }
  v5 = v4;
  if ((*(_WORD *)(v4 + 18) & 1) == 0)
  {
    v6 = *(_QWORD *)(v4 + 88);
LABEL_4:
    v7 = v6;
    goto LABEL_5;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)v4);
  v6 = *(_QWORD *)(v5 + 88);
  if ((*(_WORD *)(v5 + 18) & 1) == 0)
    goto LABEL_4;
  llvm::Function::BuildLazyArguments((llvm::Function *)v5);
  v7 = *(_QWORD *)(v5 + 88);
LABEL_5:
  v8 = v7 + 40 * *(_QWORD *)(v5 + 96);
  while (v6 != v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 112);
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 32) + 2;
      if (v10 < *(_DWORD *)(v9 + 8))
      {
        v11 = *(_QWORD *)(v9 + 8 * v10 + 40);
        if (v11)
        {
          if ((*(_BYTE *)(v11 + 17) & 0x40) != 0)
          {
            v12 = sub_1C5676CEC((_DWORD *)v3 + 4);
            v13 = *(_DWORD *)(v12 + 20);
            if ((v13 & 0x40000000) != 0)
              v14 = *(_QWORD *)(v12 - 8);
            else
              v14 = v12 - 32 * (v13 & 0x7FFFFFF);
            v18[0] = (v14 + 32 * *(unsigned int *)(v6 + 32)) | 3;
            v18[1] = 0;
            if (sub_1C6283CA4(v18) == 7)
            {
              v15 = sub_1C56B1FD4((uint64_t)v3, (llvm::Attributor *)a2, v3, (llvm::IRPosition *)v18);
              v16 = 32;
              if (!v15)
                v16 = 0;
              v3 = (const llvm::AbstractAttribute *)((char *)v3 + v16);
              v17 = 15;
              if (v15)
                v17 = 4;
            }
            else
            {
              v17 = 15;
            }
            (*(void (**)(const llvm::AbstractAttribute *))(*(_QWORD *)v3 + 8 * v17))(v3);
            return;
          }
        }
      }
    }
    v6 += 40;
  }
}

void sub_1C56B2B1C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3218);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3218))
      __cxa_guard_release(&qword_1EF8F3218);
  }
}

uint64_t sub_1C56B2B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  llvm::AbstractAttribute *v7;
  _QWORD v9[2];

  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(unsigned __int8 *)(a1 + 72);
  v6 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  v7 = sub_1C5684904(a2, v6, 0, a1, 0, 0, 1);
  v9[0] = a2;
  v9[1] = a1;
  if (((*(uint64_t (**)(llvm::AbstractAttribute *, BOOL (*)(uint64_t, llvm::Argument *), _QWORD *))(*(_QWORD *)v7 + 120))(v7, sub_1C56B2C90, v9) & 1) == 0&& (sub_1C56B1718(a1, a2) & 1) == 0)
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  }
  if (v5 && *(_BYTE *)(a1 + 72))
    return v4 == *(_QWORD *)(a1 + 64);
  return (v5 == 0) ^ (*(_BYTE *)(a1 + 72) != 0);
}

uint64_t *sub_1C56B2C30(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B2C48(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C56B2C90(uint64_t a1, llvm::Argument *a2)
{
  uint64_t v3;
  llvm::Attributor *v4;
  unint64_t v5;
  uint64_t v6;
  llvm::Value *v7;
  llvm::ConstantExpr *v8;
  uint64_t v9;
  BOOL v10;
  _QWORD v12[2];
  BOOL v13;

  v13 = 0;
  v4 = *(llvm::Attributor **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = sub_1C5676CEC((_DWORD *)(v3 + 16));
  v12[0] = llvm::Attributor::translateArgumentToCallSiteContent(v4, a2, 1, v5, (const llvm::AbstractAttribute *)v3, &v13);
  v12[1] = v6;
  v7 = (llvm::Value *)sub_1C62846C0((llvm::IRPosition *)(v3 + 16));
  v8 = llvm::AA::combineOptionalValuesInAAValueLatice((unsigned __int8 *)(v3 + 64), (uint64_t)v12, v7);
  *(_QWORD *)(v3 + 64) = v8;
  *(_QWORD *)(v3 + 72) = v9;
  if ((_BYTE)v9)
    v10 = v8 == 0;
  else
    v10 = 0;
  return !v10;
}

_QWORD *sub_1C56B2D1C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B2D50(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B2D94(uint64_t a1, const llvm::Instruction **a2)
{
  llvm::IRPosition *v4;
  llvm::Type *v5;
  llvm::ConstantExpr *v6;
  llvm::Value *v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = (llvm::Type *)sub_1C5676CEC((_DWORD *)(a1 + 16));
  v6 = sub_1C56B00F0(a1, a2, v5);
  if (!v6)
    return 1;
  v8 = v6;
  v9 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)v4 & 3) == 0)
    v9 = *(_QWORD *)(v9 + 24);
  v10 = sub_1C628686C(v4, 0);
  v11 = *(_DWORD *)(v9 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = *(_QWORD *)(v9 - 8);
  else
    v12 = v9 - 32 * (v11 & 0x7FFFFFF);
  return sub_1C628F700((uint64_t)a2, v12 + 32 * v10, v8) ^ 1;
}

void sub_1C56B2E3C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3220);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3220))
      __cxa_guard_release(&qword_1EF8F3220);
  }
}

uint64_t *sub_1C56B2E7C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B2E94(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C56B2EDC(uint64_t a1, _OWORD *a2)
{
  double result;
  int64x2_t v3;

  *(_OWORD *)(a1 + 16) = *a2;
  *(_WORD *)(a1 + 40) = 768;
  *(_QWORD *)a1 = off_1E8177AE0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = &unk_1E8177BA0;
  *(_QWORD *)&result = 1;
  *(_QWORD *)(a1 + 48) = 1;
  v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 56) = v3;
  *(int64x2_t *)(a1 + 72) = v3;
  *(int64x2_t *)(a1 + 88) = v3;
  *(int64x2_t *)(a1 + 104) = v3;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x800000000;
  *(_QWORD *)(a1 + 200) = 1;
  *(int64x2_t *)(a1 + 208) = v3;
  *(int64x2_t *)(a1 + 224) = v3;
  *(int64x2_t *)(a1 + 240) = v3;
  *(int64x2_t *)(a1 + 256) = v3;
  *(_QWORD *)(a1 + 272) = a1 + 288;
  *(_QWORD *)(a1 + 280) = 0x800000000;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  return result;
}

uint64_t sub_1C56B2F64(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_1E8177AE0;
  *(_QWORD *)(a1 + 32) = &unk_1E8177BA0;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 376), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 352), 8);
  v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288))
    free(v2);
  if ((*(_BYTE *)(a1 + 200) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 208), 8);
  v3 = *(void **)(a1 + 120);
  if (v3 != (void *)(a1 + 136))
    free(v3);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C56B3018(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_1E8177AE0;
  *(_QWORD *)(a1 + 32) = &unk_1E8177BA0;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 376), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 352), 8);
  v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288))
    free(v2);
  if ((*(_BYTE *)(a1 + 200) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 208), 8);
  v3 = *(void **)(a1 + 120);
  if (v3 != (void *)(a1 + 136))
    free(v3);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B30DC(uint64_t a1, llvm::Attributor *a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v4 = *(_QWORD *)(v4 + 24);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (!*(_BYTE *)(v4 + 16))
  {
LABEL_13:
    if (*(_QWORD *)(v4 + 72) == v4 + 72 && (*(_BYTE *)(v4 + 34) & 0x80) == 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
    goto LABEL_17;
  }
  if (v5 == 21)
  {
    v6 = (unint64_t *)(v4 + 24);
  }
  else
  {
    if (v5 < 0x1C)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
    v6 = (unint64_t *)(*(_QWORD *)(v4 + 40) + 56);
  }
  v4 = *v6;
  if (!*v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  if (!*(_BYTE *)(v4 + 16))
    goto LABEL_13;
  if (*(_BYTE *)(v4 + 16) == 3 && (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
LABEL_17:
  v8 = (uint64_t *)*((_QWORD *)a2 + 10);
  if (v8[3] != v8[4])
  {
    v15 = 0;
    v16 = v4;
    if ((sub_1C614F7B0(v8, &v16, &v15) & 1) == 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  }
  v9 = *(_QWORD *)(v4 + 80);
  if (v9)
    v10 = v9 - 24;
  else
    v10 = 0;
  v11 = *(_QWORD *)(v10 + 48);
  if (v11)
    v12 = v11 - 24;
  else
    v12 = 0;
  v16 = v12;
  sub_1C628FC98(a1 + 48, (uint64_t *)&v16);
  v13 = *(_QWORD *)(v4 + 80);
  if (v13)
    v14 = v13 - 24;
  else
    v14 = 0;
  return sub_1C56B4644(a1, a2, v14);
}

void sub_1C56B3214(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *p_p;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string __p;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;

  std::to_string(&v34, *(_DWORD *)(a1 + 384));
  v4 = std::string::insert(&v34, 0, "Live[#BB ");
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v35, "/");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (*(_BYTE *)(v8 + 16))
  {
    if (v9 == 21)
    {
      v10 = (unint64_t *)(v8 + 24);
    }
    else
    {
      if (v9 < 0x1C)
      {
        v8 = 0;
        goto LABEL_10;
      }
      v10 = (unint64_t *)(*(_QWORD *)(v8 + 40) + 56);
    }
    v8 = *v10;
  }
LABEL_10:
  v11 = v8 + 72;
  v12 = -1;
  v13 = v11;
  do
  {
    v13 = *(_QWORD *)(v13 + 8);
    ++v12;
  }
  while (v13 != v11);
  std::to_string(&v33, v12);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v33;
  else
    v14 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v33.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v36, (const std::string::value_type *)v14, size);
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v37, "][#TBEP ");
  v19 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v32, *(unsigned int *)(a1 + 128));
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v32;
  else
    v20 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = *((_BYTE *)&v32.__r_.__value_.__s + 23) & 0x7F;
  else
    v21 = v32.__r_.__value_.__l.__size_;
  v22 = std::string::append(&v38, (const std::string::value_type *)v20, v21);
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v39, "][#KDE ");
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(unsigned int *)(a1 + 280));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v27 = __p.__r_.__value_.__l.__size_;
  v28 = std::string::append(&v40, (const std::string::value_type *)p_p, v27);
  v29 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v30 = std::string::append(&v41, "]");
  *a2 = *v30;
  v30->__r_.__value_.__r.__words[0] = 0;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
}

uint64_t sub_1C56B3514(uint64_t a1, const llvm::Function *a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned __int8 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v4 = *(_QWORD *)(v4 + 24);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (*(_BYTE *)(v4 + 16))
  {
    if (v5 == 21)
    {
      v6 = (unint64_t *)(v4 + 24);
LABEL_8:
      v4 = *v6;
      goto LABEL_10;
    }
    if (v5 >= 0x1C)
    {
      v6 = (unint64_t *)(*(_QWORD *)(v4 + 40) + 56);
      goto LABEL_8;
    }
    v4 = 0;
  }
LABEL_10:
  if (*(_DWORD *)(a1 + 384))
  {
    v7 = (*(_WORD *)(v4 + 18) & 8) != 0 && !llvm::canSimplifyInvokeNoUnwind((llvm *)v4, a2);
    v8 = *(unsigned int *)(a1 + 128);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(a1 + 120);
      v10 = 8 * v8;
      do
      {
        sub_1C628FC98(a1 + 200, v9++);
        v10 -= 8;
      }
      while (v10);
    }
    v11 = *(unsigned int *)(a1 + 280);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(a1 + 272);
      v13 = 8 * v11;
      v14 = 1;
      while (1)
      {
        v15 = *v12;
        v16 = *(unsigned __int8 *)(*v12 + 16) - 33;
        v17 = v16 > 0x33;
        v18 = (1 << v16) & 0x8000000000041;
        if (v17 || v18 == 0)
          goto LABEL_25;
        if (*((_BYTE *)sub_1C5686A64((uint64_t)a2, *v12, 0, a1, 1, 1, 1) + 41))
        {
          if (*(_BYTE *)(v15 + 16) != 33)
          {
            v20 = *(_QWORD *)(v15 + 32);
            if (v20)
              v21 = v20 == *(_QWORD *)(v15 + 40) + 40;
            else
              v21 = 1;
            if (v21)
              v22 = 0;
            else
              v22 = v20 - 24;
            sub_1C62900AC((uint64_t)a2, v22);
            goto LABEL_36;
          }
        }
        else if (v7 || *(_BYTE *)(v15 + 16) != 33)
        {
          goto LABEL_25;
        }
        sub_1C6290034((uint64_t)a2, v15);
LABEL_36:
        v14 = 0;
LABEL_25:
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_38;
      }
    }
    v14 = 1;
LABEL_38:
    v23 = atomic_load((unsigned __int8 *)&qword_1EF8F3228);
    if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_1EF8F3228))
      __cxa_guard_release(&qword_1EF8F3228);
    v24 = v4 + 72;
    v25 = *(_QWORD *)(v4 + 80);
    if (v25 != v24)
    {
      v26 = (uint64_t *)(a1 + 376);
      v27 = (uint64_t)a2 + 4624;
      do
      {
        if (v25)
          v28 = v25 - 24;
        else
          v28 = 0;
        v30 = 0;
        v31 = v28;
        if ((sub_1C614F7B0(v26, &v31, &v30) & 1) == 0)
        {
          v31 = v28;
          sub_1C50878C8(v27, &v31);
          v14 = 0;
        }
        v25 = *(_QWORD *)(v25 + 8);
      }
      while (v25 != v24);
    }
  }
  else
  {
    sub_1C628FF5C((unsigned __int8 *)a2, (llvm::Value *)v4);
    return 0;
  }
  return v14;
}

uint64_t sub_1C56B3774(uint64_t a1, llvm::Attributor *a2)
{
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  _BOOL4 v33;
  const llvm::Function *v34;
  _BOOL4 v35;
  llvm *v36;
  char v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  char v50;
  int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int i;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v102;
  BOOL v103[8];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  void *v109;
  uint64_t v110;
  _BYTE v111[64];
  uint64_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[64];
  _QWORD *v120;
  uint64_t v121;
  _QWORD v122[10];

  v122[8] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE **)(a1 + 120);
  v5 = a1 + 48;
  v102 = a1 + 120;
  v6 = &v4[8 * *(unsigned int *)(a1 + 128)];
  v120 = v122;
  v121 = 0x800000000;
  result = (uint64_t)sub_1C618A450((unsigned int *)&v120, v4, v6);
  v112 = 1;
  v113 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v114 = v113;
  v115 = v113;
  v116 = v113;
  v117 = v119;
  v118 = 0x800000000;
  v109 = v111;
  v110 = 0x800000000;
  v8 = v121;
  if (!(_DWORD)v121)
  {
    if (*(_DWORD *)(a1 + 128))
      goto LABEL_239;
    v9 = 1;
    goto LABEL_211;
  }
  v9 = 1;
  do
  {
    v105 = 0;
    v10 = v120[v8 - 1];
    LODWORD(v121) = v8 - 1;
    v11 = *(unsigned __int8 *)(v10 + 16);
    if ((v11 - 29) >= 0xB)
    {
      do
      {
        if (v11 - 33 <= 0x33
          && ((1 << (v11 - 33)) & 0x8000000000041) != 0)
        {
          break;
        }
        v15 = *(_QWORD *)(v10 + 32);
        v16 = *(_QWORD *)(v10 + 40) + 40;
        v10 = v15 - 24;
        v17 = !v15 || v15 == v16;
        v18 = v17 ? 0 : v15 - 24;
        v11 = *(unsigned __int8 *)(v18 + 16);
      }
      while ((v11 - 29) > 0xA);
    }
    v105 = v10;
    LODWORD(v110) = 0;
    if (v11 <= 0x20u)
    {
      if (v11 == 30)
      {
        v103[0] = 0;
        if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) != 3)
        {
          v43 = *(_QWORD *)(*(_QWORD *)(v10 - 32) + 48);
          if (v43)
            v44 = v43 - 24;
          else
            v44 = 0;
          if (HIDWORD(v110))
          {
            v45 = 0;
            goto LABEL_156;
          }
          v90 = 1;
          goto LABEL_188;
        }
        v27 = *(_QWORD *)(v10 - 96);
        v28 = *(unsigned __int8 *)(v27 + 16);
        if (v28 != 21)
        {
          if (v28 < 0x1C)
          {
            if (!*(_BYTE *)(v27 + 16))
              v27 |= 2uLL;
          }
          else
          {
            v29 = v28 - 33;
            v30 = v29 > 0x33;
            v31 = (1 << v29) & 0x8000000000041;
            if (!v30 && v31 != 0)
              v27 |= 1uLL;
          }
        }
        v106 = v27;
        v107 = 0;
        result = (uint64_t)llvm::Attributor::getAssumedConstant(a2, (const llvm::IRPosition *)&v106, (const llvm::AbstractAttribute *)a1, v103);
        if (v67)
        {
          if (result)
          {
            v68 = *(unsigned __int8 *)(result + 16);
            if ((v68 - 11) < 2)
              goto LABEL_157;
            if (v68 == 16)
            {
              v69 = (_QWORD *)(result + 24);
              if (*(_DWORD *)(result + 32) >= 0x41u)
                v69 = (_QWORD *)*v69;
              v70 = *(_QWORD *)(v10 - 32 * (1 - *(_DWORD *)v69) - 32);
              goto LABEL_152;
            }
          }
          v71 = *(_QWORD *)(*(_QWORD *)(v10 - 32) + 48);
          if (v71)
            v72 = v71 - 24;
          else
            v72 = 0;
          v73 = v110;
          if (v110 >= (unint64_t)HIDWORD(v110))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v110 + 1, 8);
            v73 = v110;
          }
          *((_QWORD *)v109 + v73) = v72;
          v74 = (v110 + 1);
          LODWORD(v110) = v110 + 1;
          v75 = *(_QWORD *)(*(_QWORD *)(v10 - 64) + 48);
          if (v75)
            v76 = v75 - 24;
          else
            v76 = 0;
          if (v74 >= HIDWORD(v110))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v74 + 1, 8);
            LODWORD(v74) = v110;
          }
          *((_QWORD *)v109 + v74) = v76;
          LODWORD(v110) = v110 + 1;
          goto LABEL_158;
        }
        goto LABEL_157;
      }
      if (v11 != 31)
        goto LABEL_27;
      v103[0] = 0;
      v12 = *(_DWORD *)(v10 + 20);
      if ((v12 & 0x40000000) != 0)
        v13 = *(uint64_t **)(v10 - 8);
      else
        v13 = (uint64_t *)(v10 - 32 * (v12 & 0x7FFFFFF));
      v38 = *v13;
      v39 = *(unsigned __int8 *)(v38 + 16);
      if (v39 != 21)
      {
        if (v39 < 0x1C)
        {
          if (!*(_BYTE *)(v38 + 16))
            v38 |= 2uLL;
        }
        else
        {
          v40 = v39 - 33;
          v30 = v40 > 0x33;
          v41 = (1 << v40) & 0x8000000000041;
          if (!v30 && v41 != 0)
            v38 |= 1uLL;
        }
      }
      v106 = v38;
      v107 = 0;
      result = (uint64_t)llvm::Attributor::getAssumedConstant(a2, (const llvm::IRPosition *)&v106, (const llvm::AbstractAttribute *)a1, v103);
      if (v50)
      {
        if (result)
        {
          v51 = *(unsigned __int8 *)(result + 16);
          if ((v51 - 11) < 2)
            goto LABEL_157;
          if (v51 == 16)
          {
            v52 = *(_DWORD *)(v10 + 20);
            v53 = (v52 >> 1) & 0x3FFFFFF;
            v54 = (v53 - 1);
            if (v53 == 1)
            {
LABEL_92:
              if ((v52 & 0x40000000) != 0)
                v58 = *(_QWORD *)(v10 - 8);
              else
                v58 = v10 - 32 * (v52 & 0x7FFFFFF);
              v70 = *(_QWORD *)(v58 + 32);
              goto LABEL_152;
            }
            v55 = 0;
            v56 = v10 - 32 * (v52 & 0x7FFFFFF);
            v57 = 2 * v54;
            while (1)
            {
              if ((v52 & 0x40000000) != 0)
              {
                if (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 32 * (((_DWORD)v55 + 2) & 0xFFFFFFFE)) == result)
                {
                  v56 = *(_QWORD *)(v10 - 8);
LABEL_149:
                  v80 = (v55 + 3);
                  if (v55 == 0x1FFFFFFFCLL)
                    v80 = 1;
                  v70 = *(_QWORD *)(v56 + 32 * v80);
LABEL_152:
                  v81 = *(_QWORD *)(v70 + 48);
                  if (v81)
                    v44 = v81 - 24;
                  else
                    v44 = 0;
                  v45 = v110;
                  if (v110 < (unint64_t)HIDWORD(v110))
                  {
LABEL_156:
                    *((_QWORD *)v109 + v45) = v44;
                    LODWORD(v110) = v110 + 1;
                    goto LABEL_157;
                  }
                  v90 = v110 + 1;
LABEL_188:
                  result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v90, 8);
                  v45 = v110;
                  goto LABEL_156;
                }
              }
              else if (*(_QWORD *)(v56 + 32 * (((_DWORD)v55 + 2) & 0xFFFFFFFE)) == result)
              {
                goto LABEL_149;
              }
              v55 += 2;
              if (v57 == v55)
                goto LABEL_92;
            }
          }
        }
        v59 = *(_QWORD *)(v10 + 40);
        v60 = *(_QWORD *)(v59 + 40);
        if (v60 == v59 + 40)
          goto LABEL_157;
        if (v60)
          v61 = v60 - 24;
        else
          v61 = 0;
        if (*(_BYTE *)(v61 + 16) == 30)
        {
          if ((*(_DWORD *)(v61 + 20) & 0x7FFFFFF) == 3)
            v62 = 2;
          else
            v62 = 1;
LABEL_102:
          for (i = 0; i != v62; ++i)
          {
            result = llvm::Instruction::getSuccessor((llvm::Instruction *)v61, i);
            v64 = *(_QWORD *)(result + 48);
            if (v64)
              v65 = v64 - 24;
            else
              v65 = 0;
            v66 = v110;
            if (v110 >= (unint64_t)HIDWORD(v110))
            {
              result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v110 + 1, 8);
              v66 = v110;
            }
            *((_QWORD *)v109 + v66) = v65;
            LODWORD(v110) = v110 + 1;
          }
          goto LABEL_157;
        }
        v62 = 2;
        switch(*(_BYTE *)(v61 + 16))
        {
          case 0x1E:
            goto LABEL_240;
          case 0x1F:
            v62 = (*(_DWORD *)(v61 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 0x20:
          case 0x26:
            v62 = (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) - 1;
            break;
          case 0x21:
            goto LABEL_102;
          case 0x24:
            v62 = *(_WORD *)(v61 + 18) & 1;
            break;
          case 0x25:
            v62 = 1;
            goto LABEL_102;
          case 0x27:
            v62 = *(_DWORD *)(v61 + 80) + 1;
            break;
          default:
            goto LABEL_157;
        }
        if (v62)
          goto LABEL_102;
      }
LABEL_157:
      if (v103[0])
        goto LABEL_183;
      goto LABEL_158;
    }
    if (v11 == 33)
    {
      v33 = sub_1C56B48B0((uint64_t)a2, v10, a1, (uint64_t)&v109);
      v35 = v33;
      v36 = *(llvm **)(*(_QWORD *)(v10 + 40) + 56);
      if ((*((_WORD *)v36 + 9) & 8) != 0)
      {
        result = llvm::canSimplifyInvokeNoUnwind(v36, v34);
        if ((result & 1) == 0)
        {
          v77 = *(_QWORD *)(*(_QWORD *)(v10 - 64) + 48);
          if (v77)
            v78 = v77 - 24;
          else
            v78 = 0;
          v79 = v110;
          if (v110 >= (unint64_t)HIDWORD(v110))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v110 + 1, 8);
            v79 = v110;
          }
          *((_QWORD *)v109 + v79) = v78;
          v49 = v110 + 1;
          LODWORD(v110) = v110 + 1;
          if (v35)
            goto LABEL_183;
          goto LABEL_77;
        }
      }
      result = (uint64_t)sub_1C56860B4((uint64_t)a2, v10, 0, a1, 1, 1, 1);
      if (!*(_BYTE *)(result + 41))
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v10 - 64) + 48);
        if (v46)
          v47 = v46 - 24;
        else
          v47 = 0;
        v48 = v110;
        if (v110 >= (unint64_t)HIDWORD(v110))
        {
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v110 + 1, 8);
          v48 = v110;
        }
        *((_QWORD *)v109 + v48) = v47;
        v49 = v110 + 1;
        LODWORD(v110) = v110 + 1;
        if (v35)
        {
LABEL_183:
          result = sub_1C628FC98((uint64_t)&v112, &v105);
          goto LABEL_164;
        }
LABEL_77:
        if (!v49)
          goto LABEL_180;
        goto LABEL_159;
      }
      if (*(_BYTE *)(result + 40))
        v37 = v35;
      else
        v37 = 1;
      if ((v37 & 1) != 0)
        goto LABEL_183;
    }
    else
    {
      if (v11 != 84)
      {
LABEL_27:
        v19 = *(_QWORD *)(v10 + 40);
        v20 = *(_QWORD *)(v19 + 40);
        if (v20 != v19 + 40)
        {
          if (v20)
            v21 = v20 - 24;
          else
            v21 = 0;
          if (*(_BYTE *)(v21 + 16) != 30)
          {
            v22 = 2;
            switch(*(_BYTE *)(v21 + 16))
            {
              case 0x1E:
LABEL_240:
                __break(1u);
                return result;
              case 0x1F:
                v22 = (*(_DWORD *)(v21 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_132;
              case 0x20:
              case 0x26:
                v22 = (*(_DWORD *)(v21 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_132;
              case 0x21:
                goto LABEL_35;
              case 0x24:
                v22 = *(_WORD *)(v21 + 18) & 1;
                goto LABEL_132;
              case 0x25:
                v22 = 1;
                goto LABEL_35;
              case 0x27:
                v22 = *(_DWORD *)(v21 + 80) + 1;
LABEL_132:
                if (!v22)
                  goto LABEL_158;
                goto LABEL_35;
              default:
                goto LABEL_158;
            }
          }
          if ((*(_DWORD *)(v21 + 20) & 0x7FFFFFF) == 3)
            v22 = 2;
          else
            v22 = 1;
LABEL_35:
          for (j = 0; j != v22; ++j)
          {
            result = llvm::Instruction::getSuccessor((llvm::Instruction *)v21, j);
            v24 = *(_QWORD *)(result + 48);
            if (v24)
              v25 = v24 - 24;
            else
              v25 = 0;
            v26 = v110;
            if (v110 >= (unint64_t)HIDWORD(v110))
            {
              result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v110 + 1, 8);
              v26 = v110;
            }
            *((_QWORD *)v109 + v26) = v25;
            LODWORD(v110) = v110 + 1;
          }
        }
        goto LABEL_158;
      }
      result = sub_1C56B48B0((uint64_t)a2, v10, a1, (uint64_t)&v109);
      if ((result & 1) != 0)
        goto LABEL_183;
    }
LABEL_158:
    v49 = v110;
    if (!(_DWORD)v110)
      goto LABEL_180;
LABEL_159:
    v82 = *(unsigned __int8 *)(v105 + 16);
    v83 = v82 - 29;
    if (v82 != 30)
    {
      v84 = 0;
      switch(v83)
      {
        case 0:
        case 5:
        case 6:
          goto LABEL_163;
        case 1:
          goto LABEL_240;
        case 2:
          v84 = (*(_DWORD *)(v105 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_163;
        case 3:
        case 9:
          v84 = (*(_DWORD *)(v105 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_163;
        case 4:
          v84 = 2;
          goto LABEL_163;
        case 7:
          v84 = *(_WORD *)(v105 + 18) & 1;
          goto LABEL_163;
        case 8:
          v84 = 1;
          goto LABEL_163;
        case 10:
          v84 = *(_DWORD *)(v105 + 80) + 1;
          goto LABEL_163;
        default:
          goto LABEL_164;
      }
    }
    if ((*(_DWORD *)(v105 + 20) & 0x7FFFFFF) == 3)
      v84 = 2;
    else
      v84 = 1;
LABEL_163:
    if (v49 < v84)
    {
LABEL_180:
      result = sub_1C628FC98(a1 + 200, &v105);
      if ((_DWORD)result)
        v9 = 0;
      else
        v9 = v9;
    }
LABEL_164:
    if ((_DWORD)v110)
    {
      v85 = (uint64_t *)v109;
      v86 = 8 * v110;
      do
      {
        v87 = *v85;
        if (*(unsigned __int8 *)(v105 + 16) - 29 >= 0xB
          || (v89 = *(_QWORD *)(v87 + 40),
              *(_QWORD *)v103 = *(_QWORD *)(v105 + 40),
              v104 = v89,
              sub_1C6178BCC((uint64_t)&v106, a1 + 352, (uint64_t *)v103),
              v108 ? (v9 = 0) : (v9 = v9),
              result = sub_1C56B4644(a1, a2, *(_QWORD *)(v87 + 40)),
              (_DWORD)result))
        {
          v88 = v121;
          if (v121 >= (unint64_t)HIDWORD(v121))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v120, (uint64_t)v122, v121 + 1, 8);
            v88 = v121;
          }
          v120[v88] = v87;
          LODWORD(v121) = v121 + 1;
        }
        ++v85;
        v86 -= 8;
      }
      while (v86);
    }
    v8 = v121;
  }
  while ((_DWORD)v121);
  if ((_DWORD)v118 != *(_DWORD *)(a1 + 128))
    goto LABEL_239;
  if ((_DWORD)v118)
  {
    v91 = (uint64_t *)v117;
    v92 = 8 * v118;
    while (1)
    {
      v106 = *v91;
      *(_QWORD *)v103 = 0;
      if ((sub_1C61A6880(v5, &v106, v103) & 1) == 0)
        break;
      ++v91;
      v92 -= 8;
      if (!v92)
        goto LABEL_207;
    }
LABEL_239:
    sub_1C6290124(v5, (unsigned int *)&v112);
    sub_1C614D378(v102, (uint64_t)&v117);
    v9 = 0;
  }
LABEL_207:
  if (!*(_DWORD *)(a1 + 128))
  {
LABEL_211:
    v93 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
      v93 = *(_QWORD *)(v93 + 24);
    v94 = *(unsigned __int8 *)(v93 + 16);
    if (*(_BYTE *)(v93 + 16))
    {
      if (v94 == 21)
      {
        v95 = (unint64_t *)(v93 + 24);
        goto LABEL_219;
      }
      if (v94 >= 0x1C)
      {
        v95 = (unint64_t *)(*(_QWORD *)(v93 + 40) + 56);
LABEL_219:
        v93 = *v95;
      }
      else
      {
        v93 = 0;
      }
    }
    v96 = v93 + 72;
    v97 = -1;
    v98 = v96;
    do
    {
      v98 = *(_QWORD *)(v98 + 8);
      ++v97;
    }
    while (v98 != v96);
    if (*(_DWORD *)(a1 + 384) == v97)
    {
      if (*(_DWORD *)(a1 + 280))
      {
        v99 = *(unsigned __int8 *)(**(_QWORD **)(a1 + 272) + 16);
        v100 = (v99 - 29);
        if (v100 <= 0xA && v99 != 30)
          __asm { BR              X13 }
      }
      else
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
      }
    }
  }
  if (v109 != v111)
    free(v109);
  if (v117 != v119)
    free(v117);
  if ((v112 & 1) == 0)
    MEMORY[0x1CAA32FB4](v113.i64[0], 8);
  if (v120 != v122)
    free(v120);
  return v9;
}

uint64_t sub_1C56B430C()
{
  return 0;
}

uint64_t sub_1C56B4314()
{
  return 0;
}

uint64_t sub_1C56B431C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 41))
    return 0;
  v3 = 0;
  v4 = a2;
  return sub_1C614F7B0((uint64_t *)(a1 + 376), &v4, &v3) ^ 1;
}

uint64_t sub_1C56B435C(_BYTE *a1)
{
  if (a1[40])
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 128))(a1);
  else
    return 0;
}

uint64_t sub_1C56B4378(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (!*(_BYTE *)(a1 + 41))
    return 0;
  v5 = *(_QWORD **)(a2 + 40);
  v10 = 0;
  v11 = v5;
  if (sub_1C614F7B0((uint64_t *)(a1 + 376), &v11, &v10))
  {
    v6 = (_QWORD *)(a2 + 24);
    if (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 48) == a2 + 24)
      return 0;
    v7 = (_QWORD *)*v6;
    if (!*v6)
      return 0;
    v8 = a1 + 200;
    v9 = a1 + 48;
    while (1)
    {
      v10 = 0;
      v11 = v7 - 3;
      if ((sub_1C61A6880(v8, &v11, &v10) & 1) != 0)
        break;
      v10 = 0;
      v11 = v7 - 3;
      if ((sub_1C61A6880(v9, &v11, &v10) & 1) != 0)
        break;
      if (*(_QWORD **)(v7[2] + 48) == v7)
        return 0;
      result = 0;
      v7 = (_QWORD *)*v7;
      if (!v7)
        return result;
    }
  }
  return 1;
}

uint64_t sub_1C56B4450(_BYTE *a1)
{
  if (a1[40])
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 144))(a1);
  else
    return 0;
}

uint64_t sub_1C56B446C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  if ((_DWORD)result)
    return sub_1C6178C5C(*(_QWORD *)(a1 + 352), *(_DWORD *)(a1 + 368), a2, a3, &v7) ^ 1;
  return result;
}

uint64_t *sub_1C56B44D0(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)(a1 - 32) = off_1E8177AE0;
  *(_QWORD *)a1 = &unk_1E8177BA0;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 344), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 320), 8);
  v2 = *(void **)(a1 + 240);
  if (v2 != (void *)(a1 + 256))
    free(v2);
  if ((*(_BYTE *)(a1 + 168) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 176), 8);
  v3 = *(void **)(a1 + 88);
  if (v3 != (void *)(a1 + 104))
    free(v3);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B457C(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)(a1 - 32) = off_1E8177AE0;
  *(_QWORD *)a1 = &unk_1E8177BA0;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 344), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 320), 8);
  v2 = *(void **)(a1 + 240);
  if (v2 != (void *)(a1 + 256))
    free(v2);
  if ((*(_BYTE *)(a1 + 168) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 176), 8);
  v3 = *(void **)(a1 + 88);
  if (v3 != (void *)(a1 + 104))
    free(v3);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C56B4644(uint64_t a1, llvm::Attributor *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v16;
  _BYTE v17[16];
  unsigned __int8 v18;

  v16 = a3;
  sub_1C614F72C(a1 + 376, &v16, (uint64_t)v17);
  v5 = v18;
  if (v18)
  {
    v6 = a3 + 40;
    for (i = *(_QWORD *)(a3 + 48); i != v6; i = *(_QWORD *)(i + 8))
    {
      v8 = i - 24;
      if (!i)
        v8 = 0;
      v9 = *(unsigned __int8 *)(v8 + 16) - 33;
      v10 = v9 > 0x33;
      v11 = (1 << v9) & 0x8000000000041;
      if (!v10 && v11 != 0)
      {
        v13 = *(_QWORD *)(i - 56);
        if (v13)
        {
          if (!*(_BYTE *)(v13 + 16)
            && *(_QWORD *)(v13 + 24) == *(_QWORD *)(i + 48)
            && (*(_DWORD *)(v13 + 32) & 0xFu) - 9 >= 0xFFFFFFFE
            && *((_BYTE *)a2 + 5467) != 0)
          {
            llvm::Attributor::identifyDefaultAbstractAttributes(a2, v13);
          }
        }
      }
    }
  }
  return v5 != 0;
}

uint64_t sub_1C56B4748(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C628FE98(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C628FE98(a1, v14, v8);
}

BOOL sub_1C56B48B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::AbstractAttribute *v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;

  v6 = sub_1C5686A64(a1, a2, 0, a3, 1, 1, 1);
  if (*((_BYTE *)v6 + 41))
    return *((_BYTE *)v6 + 40) == 0;
  if (*(unsigned __int8 *)(a2 + 16) - 29 > 0xA)
  {
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40) + 40;
    v13 = v11 - 24;
    v15 = v11 == v12 || v11 == 0;
    v16 = *(unsigned int *)(a4 + 8);
    if (v16 >= *(_DWORD *)(a4 + 12))
    {
      v18 = v15;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v16 + 1, 8);
      v15 = v18;
      LODWORD(v16) = *(_DWORD *)(a4 + 8);
    }
    result = 0;
    if (v15)
      v17 = 0;
    else
      v17 = v13;
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v16) = v17;
  }
  else
  {
    v8 = *(_QWORD *)(llvm::Instruction::getSuccessor((llvm::Instruction *)a2, 0) + 48);
    if (v8)
      v9 = v8 - 24;
    else
      v9 = 0;
    v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    result = 0;
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v10) = v9;
  }
  ++*(_DWORD *)(a4 + 8);
  return result;
}

uint64_t sub_1C56B49D4(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_1E8177AE0;
  *(_QWORD *)(a1 + 32) = &unk_1E8177BA0;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 376), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 352), 8);
  v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288))
    free(v2);
  if ((*(_BYTE *)(a1 + 200) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 208), 8);
  v3 = *(void **)(a1 + 120);
  if (v3 != (void *)(a1 + 136))
    free(v3);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C56B4A88(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_1E8177AE0;
  *(_QWORD *)(a1 + 32) = &unk_1E8177BA0;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 376), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 352), 8);
  v2 = *(void **)(a1 + 272);
  if (v2 != (void *)(a1 + 288))
    free(v2);
  if ((*(_BYTE *)(a1 + 200) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 208), 8);
  v3 = *(void **)(a1 + 120);
  if (v3 != (void *)(a1 + 136))
    free(v3);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B4B54(uint64_t a1)
{
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
  return 0;
}

uint64_t *sub_1C56B4B64(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)(a1 - 32) = off_1E8177AE0;
  *(_QWORD *)a1 = &unk_1E8177BA0;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 344), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 320), 8);
  v2 = *(void **)(a1 + 240);
  if (v2 != (void *)(a1 + 256))
    free(v2);
  if ((*(_BYTE *)(a1 + 168) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 176), 8);
  v3 = *(void **)(a1 + 88);
  if (v3 != (void *)(a1 + 104))
    free(v3);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B4C10(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)(a1 - 32) = off_1E8177AE0;
  *(_QWORD *)a1 = &unk_1E8177BA0;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 344), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 320), 8);
  v2 = *(void **)(a1 + 240);
  if (v2 != (void *)(a1 + 256))
    free(v2);
  if ((*(_BYTE *)(a1 + 168) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 176), 8);
  v3 = *(void **)(a1 + 88);
  if (v3 != (void *)(a1 + 104))
    free(v3);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56B4CD8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B4D0C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B4D50(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;

  sub_1C56B5330((uint64_t *)a1, a2);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 <= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  v5 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  v6 = v5;
  v7 = *(unsigned __int8 *)(v5 + 16);
  if (v7 <= 0x1B)
    v8 = 0;
  else
    v8 = v5;
  result = sub_1C56B5430(a1, a2, v8);
  if ((result & 1) == 0)
  {
    if (v7 < 0x1C || *(_BYTE *)(v6 + 16) != 61)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 41) & 0xFE | *(_BYTE *)(a1 + 40);
  }
  return result;
}

uint64_t sub_1C56B4E04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  const char *v5;

  if (*(_BYTE *)(sub_1C6284150((llvm::IRPosition *)(a1 + 2)) + 16) == 61
    && (result = (*(uint64_t (**)(_QWORD *))(a1[4] + 16))(a1 + 4), (_DWORD)result))
  {
    *(_BYTE *)(a2 + 23) = 18;
    strcpy((char *)a2, "assumed-dead-store");
  }
  else
  {
    result = (*(uint64_t (**)(_QWORD *))(*a1 + 112))(a1);
    v5 = "assumed-live";
    if ((_DWORD)result)
      v5 = "assumed-dead";
    *(_BYTE *)(a2 + 23) = 12;
    *(_QWORD *)a2 = *(_QWORD *)v5;
    *(_DWORD *)(a2 + 8) = *((_DWORD *)v5 + 2);
    *(_BYTE *)(a2 + 12) = 0;
  }
  return result;
}

uint64_t sub_1C56B4EB8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  int v8;

  v4 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 < 0x1C)
    return 1;
  v7 = v4;
  if (v5 == 61 || (v8 = sub_1C56B5430(a1, a2, v4), result = 1, v8) && *(_BYTE *)(v7 + 16) != 33)
  {
    sub_1C6290278(a2, v7);
    return 0;
  }
  return result;
}

void sub_1C56B4F40()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3230);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3230))
      __cxa_guard_release(&qword_1EF8F3230);
  }
}

uint64_t sub_1C56B4F80(_QWORD *a1, uint64_t **a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int PotentialCopiesOfStoredValue;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  int isAssumedDead;
  char v18;
  uint64_t v19;
  unint64_t v21;
  BOOL v22;
  _QWORD v23[2];
  uint64_t v24;
  int64x2_t v25;
  int64x2_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 2);
  v5 = sub_1C6284150((llvm::IRPosition *)(a1 + 2));
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 <= 0x1B)
    v7 = 0;
  else
    v7 = v5;
  if (v6 != 61)
  {
    if ((sub_1C56B5430((uint64_t)a1, (uint64_t)a2, v7) & 1) == 0)
      return (*(uint64_t (**)(_QWORD *))(a1[4] + 40))(a1 + 4);
    v21 = sub_1C6284150(v4);
    if ((sub_1C56B580C((llvm::AbstractAttribute *)a1, a2, v21) & 1) == 0)
      return (*(uint64_t (**)(_QWORD *))(a1[4] + 40))(a1 + 4);
    return 1;
  }
  if ((*(_WORD *)(v5 + 18) & 1) == 0)
  {
    v22 = 0;
    v24 = 1;
    v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v26 = v25;
    v27 = v29;
    v28 = 0x400000000;
    PotentialCopiesOfStoredValue = llvm::AA::getPotentialCopiesOfStoredValue((llvm::Attributor *)a2, v7, &v24, (const llvm::AbstractAttribute *)a1, &v22, 0);
    v9 = (char *)v27;
    if (PotentialCopiesOfStoredValue)
    {
      if ((_DWORD)v28)
      {
        v10 = 8 * v28 - 8;
        do
        {
          v11 = *(_QWORD *)v9;
          v12 = *(unsigned __int8 *)(*(_QWORD *)v9 + 16);
          if (v12 != 21)
          {
            if (v12 < 0x1C)
            {
              if (!*(_BYTE *)(*(_QWORD *)v9 + 16))
                v11 |= 2uLL;
            }
            else
            {
              v13 = v12 - 33;
              v14 = v13 > 0x33;
              v15 = (1 << v13) & 0x8000000000041;
              if (!v14 && v15 != 0)
                v11 |= 1uLL;
            }
          }
          v23[0] = v11;
          v23[1] = 0;
          isAssumedDead = llvm::Attributor::isAssumedDead((uint64_t)a2, (uint64_t)v23, (uint64_t)a1, 0, &v22, 0, 1);
          v18 = isAssumedDead;
          if (!isAssumedDead)
            break;
          v9 += 8;
          v19 = v10;
          v10 -= 8;
        }
        while (v19);
        v9 = (char *)v27;
      }
      else
      {
        v18 = 1;
      }
    }
    else
    {
      v18 = 0;
    }
    if (v9 != (char *)v29)
      free(v9);
    if ((v24 & 1) != 0)
    {
      if ((v18 & 1) != 0)
        return 1;
    }
    else
    {
      MEMORY[0x1CAA32FB4](v25.i64[0], 8);
      if ((v18 & 1) != 0)
        return 1;
    }
  }
  return (*(uint64_t (**)(_QWORD *))(a1[4] + 40))(a1 + 4);
}

BOOL sub_1C56B51D4(uint64_t a1)
{
  return (~*(unsigned __int8 *)(a1 + 41) & 3) == 0;
}

BOOL sub_1C56B51E8(uint64_t a1)
{
  return (~*(unsigned __int8 *)(a1 + 40) & 3) == 0;
}

uint64_t sub_1C56B51FC()
{
  return 0;
}

uint64_t sub_1C56B5204()
{
  return 0;
}

uint64_t sub_1C56B520C(_DWORD *a1, uint64_t a2)
{
  if (sub_1C5676CEC(a1 + 4) == a2)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 112))(a1);
  else
    return 0;
}

uint64_t sub_1C56B5258(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  return result;
}

BOOL sub_1C56B529C(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 41) & 2) != 0 && *(_BYTE *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) == 61;
}

uint64_t *sub_1C56B52D0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B52E8(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t *sub_1C56B5330(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = result;
  v3 = result[2] & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*((_DWORD *)result + 4) & 3) == 0)
    v3 = *(_QWORD *)(v3 + 24);
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (!*(_BYTE *)(v3 + 16))
    goto LABEL_9;
  if (v4 == 21)
  {
    v5 = (unint64_t *)(v3 + 24);
  }
  else
  {
    if (v4 < 0x1C)
      return result;
    v5 = (unint64_t *)(*(_QWORD *)(v3 + 40) + 56);
  }
  v3 = *v5;
  if (v3)
  {
LABEL_9:
    result = *(uint64_t **)(a2 + 80);
    if (result[3] != result[4])
    {
      v6 = 0;
      v7 = v3;
      result = (uint64_t *)sub_1C614F7B0(result, &v7, &v6);
      if ((result & 1) == 0)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(v2[4] + 40))(v2 + 4);
    }
  }
  return result;
}

uint64_t sub_1C56B53D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  const char *v4;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v4 = "assumed-live";
  if ((_DWORD)result)
    v4 = "assumed-dead";
  *(_BYTE *)(a2 + 23) = 12;
  *(_QWORD *)a2 = *(_QWORD *)v4;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)v4 + 2);
  *(_BYTE *)(a2 + 12) = 0;
  return result;
}

uint64_t sub_1C56B5430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v7;
  uint64_t v8;
  llvm::AbstractAttribute *v9;
  char v10;
  uint64_t v11[2];

  if (!a3)
    return 1;
  if ((llvm::wouldInstructionBeTriviallyDead(a3, 0) & 1) != 0)
    return 1;
  v7 = *(unsigned __int8 *)(a3 + 16);
  if (v7 != 33 && v7 != 39)
  {
    if (v7 != 84)
      return 0;
    v8 = *(_QWORD *)(a3 - 32);
    if (v8)
    {
      if (!*(_BYTE *)(v8 + 16) && *(_QWORD *)(v8 + 24) == *(_QWORD *)(a3 + 72) && (*(_BYTE *)(v8 + 33) & 0x20) != 0)
        return 0;
    }
  }
  v11[0] = a3;
  v11[1] = 0;
  v9 = sub_1C56860B4(a2, a3, 0, a1, 2, 1, 1);
  if (!*((_BYTE *)v9 + 41))
    return 0;
  if (!*((_BYTE *)v9 + 40))
    llvm::Attributor::recordDependence(a2, (uint64_t)v9, a1, 1);
  return sub_1C5675BDC(a2, v11, a1, 0, &v10);
}

unint64_t sub_1C56B5538(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  int32x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30[25];

  v30[24] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 8)
    {
      v29 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v29;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C62904CC((int *)a1, v6, &v6[3 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v30;
  v10 = (_QWORD *)(a1 + 8);
  do
  {
    v11 = v10[2];
    if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = 4;
      v9[1] = 0;
      v9[2] = v11;
      if (v11)
      {
        v12 = *v10 & 0xFFFFFFFFFFFFFFF8;
        v9[1] = *(_QWORD *)v12;
        *(_QWORD *)v12 = v9;
        *v9 = v12 | 4;
        v13 = (unint64_t *)v9[1];
        if (v13)
          *v13 = *v13 & 7 | (unint64_t)(v9 + 1);
      }
      v9 += 3;
      v11 = v10[2];
    }
    if (v11 != -8192 && v11 != -4096 && v11 != 0)
    {
      v15 = *v10 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v15 = v10[1];
      v16 = (unint64_t *)v10[1];
      if (v16)
      {
        *v16 = *v16 & 7 | v15;
      }
      else
      {
        v17 = v10[2];
        v18 = ***(int32x2_t ****)v17;
        v19 = (unint64_t)v18[303];
        if (v19 <= v15)
        {
          v20 = v18[305].u32[0];
          if (v19 + 16 * v20 > v15)
          {
            v21 = v20 - 1;
            LODWORD(v22) = v21 & ((v17 >> 4) ^ (v17 >> 9));
            v23 = (uint64_t *)(v19 + 16 * v22);
            v24 = *v23;
            if (v17 == *v23)
            {
LABEL_30:
              *v23 = -8192;
              v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
              v17 = v10[2];
            }
            else
            {
              v25 = 1;
              while (v24 != -4096)
              {
                v26 = v22 + v25++;
                v22 = v26 & v21;
                v24 = *(_QWORD *)(v19 + 16 * v22);
                if (v17 == v24)
                {
                  v23 = (uint64_t *)(v19 + 16 * v22);
                  goto LABEL_30;
                }
              }
            }
            *(_BYTE *)(v17 + 17) &= ~1u;
          }
        }
      }
    }
    ++v8;
    v10 = (_QWORD *)(a1 + 8 + 24 * v8);
  }
  while (v8 != 8);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v27 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v27;
  }
  return sub_1C62904CC((int *)a1, v30, v9);
}

uint64_t sub_1C56B580C(llvm::AbstractAttribute *a1, uint64_t **this, uint64_t a3)
{
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  llvm::UndefValue *AssumedConstant;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16[8];
  _QWORD v17[2];

  if (*(_BYTE *)(*(_QWORD *)a3 + 8) == 7 || *(_QWORD *)(a3 + 8) == 0)
    return 1;
  v8 = *(unsigned __int8 *)(a3 + 16);
  if (v8 < 0x15)
    return llvm::Attributor::checkForAllUses((llvm::Attributor *)this, (unsigned int (*)(uint64_t, uint64_t *, uint64_t *))sub_1C56B594C, (uint64_t)v17, a1, a3, 0, 0, 0, 0, v15);
  if (v8 < 0x1C)
  {
LABEL_11:
    v16[0] = 0;
    if (v8 == 21)
      goto LABEL_20;
    if (v8 < 0x1C)
    {
      if (!v8)
      {
        v9 = a3 | 2;
LABEL_21:
        v17[0] = v9;
        v17[1] = 0;
        AssumedConstant = llvm::Attributor::getAssumedConstant((llvm::Attributor *)this, (const llvm::IRPosition *)v17, a1, v16);
        if (v13 && !AssumedConstant)
          return llvm::Attributor::checkForAllUses((llvm::Attributor *)this, (unsigned int (*)(uint64_t, uint64_t *, uint64_t *))sub_1C56B594C, (uint64_t)v17, a1, a3, 0, 0, 0, 0, v15);
        return 1;
      }
      goto LABEL_20;
    }
LABEL_17:
    v11 = v8 - 33;
    if (v11 <= 0x33 && ((1 << v11) & 0x8000000000041) != 0)
    {
      v9 = a3 | 1;
      goto LABEL_21;
    }
LABEL_20:
    v9 = a3;
    goto LABEL_21;
  }
  v10 = this[10];
  if (v10[3] == v10[4])
  {
    v16[0] = 0;
    goto LABEL_17;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 56);
  *(_QWORD *)v16 = 0;
  v17[0] = v14;
  result = sub_1C614F7B0(v10, v17, v16);
  if ((_DWORD)result)
  {
    v8 = *(unsigned __int8 *)(a3 + 16);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1C56B594C()
{
  return 0;
}

_QWORD *sub_1C56B5954(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B5988(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B59CC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t *v5;
  uint64_t result;

  sub_1C56B4D50(a1, a2);
  v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v4 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v4 + 16))
  {
    if (*(_BYTE *)(v4 + 16) == 21)
      v5 = (unint64_t *)(v4 + 24);
    else
      v5 = (unint64_t *)(*(_QWORD *)(v4 + 40) + 56);
    v4 = *v5;
  }
  result = sub_1C62873F8(a2, (llvm::GlobalValue *)v4);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  return result;
}

uint64_t sub_1C56B5A50(uint64_t a1, uint64_t a2)
{
  unint64_t AssociatedArgument;
  char v5;
  void (**v6)(void);
  void (**v7)(void);
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  AssociatedArgument = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 16));
  if (!llvm::Attributor::isValidFunctionSignatureRewrite(a2, AssociatedArgument))
    return 1;
  v11 = 0;
  v9 = 0;
  v5 = llvm::Attributor::registerFunctionSignatureRewrite(a2, AssociatedArgument, 0, 0, (uint64_t)v10, (uint64_t)v8);
  if (v9 == v8)
  {
    v6 = (void (**)(void))(v8[0] + 32);
  }
  else
  {
    if (!v9)
      goto LABEL_9;
    v6 = (void (**)(void))(*v9 + 40);
  }
  (*v6)();
LABEL_9:
  if (v11 == v10)
  {
    v7 = (void (**)(void))(v10[0] + 32);
  }
  else
  {
    if (!v11)
      return (v5 & 1) == 0;
    v7 = (void (**)(void))(*v11 + 40);
  }
  (*v7)();
  return (v5 & 1) == 0;
}

void sub_1C56B5B6C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3238);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3238))
      __cxa_guard_release(&qword_1EF8F3238);
  }
}

uint64_t *sub_1C56B5BAC(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B5BC4(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56B5C0C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B5C40(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C56B5C84(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  llvm::Type *v6;
  llvm::UndefValue *v7;
  unint64_t v8;
  int v10;
  int *v11[2];
  char v12;
  _QWORD v13[3];
  char v14;

  v14 = 0;
  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  v7 = llvm::UndefValue::get(**(llvm::UndefValue ***)(*(_QWORD *)(v5 + 24) + 16), v6);
  v13[0] = &v14;
  v13[1] = a2;
  v13[2] = v7;
  v10 = 1;
  v11[0] = &v10;
  v11[1] = (int *)1;
  v8 = sub_1C5676C10(v4);
  llvm::Attributor::checkForAllInstructions(a2, sub_1C56B5E8C, (uint64_t)v13, v8, a1, v11, &v12, 0, 0);
  return v14 == 0;
}

void sub_1C56B5D34()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3240);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3240))
      __cxa_guard_release(&qword_1EF8F3240);
  }
}

uint64_t sub_1C56B5D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v7;
  int *v8;
  uint64_t v9;
  char v10;
  char v11;

  v4 = 1;
  v7 = 1;
  v8 = &v7;
  v9 = 1;
  v5 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C56B5EF8, (uint64_t)&v10, v5, a1, &v8, &v11, 0, 0);
  v8 = (int *)a1;
  v9 = a2;
  if ((llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C56B5F00, (uint64_t)&v8, a1, 1, &v11) & 1) == 0)return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  return v4;
}

uint64_t *sub_1C56B5E2C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B5E44(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B5E8C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v7;

  v3 = *(_DWORD *)(a2 + 20);
  v4 = a2 - 32 * (v3 & 0x7FFFFFF);
  if (*(unsigned __int8 *)(*(_QWORD *)v4 + 16) - 11 >= 2)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if ((v3 & 0x40000000) != 0)
      v4 = *(_QWORD *)(a2 - 8);
    **(_BYTE **)a1 |= sub_1C628F700(v7, v4, *(llvm::Value **)(a1 + 16));
  }
  return 1;
}

uint64_t sub_1C56B5EF8()
{
  return 1;
}

uint64_t sub_1C56B5F00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)a2;
  v6 = *(_QWORD *)a2;
  v7 = &v9;
  v8 = 0;
  if (*(_DWORD *)(a2 + 16))
  {
    sub_1C614C900((uint64_t)&v7, a2 + 8);
    if (!(_DWORD)v8)
    {
      v3 = v6;
      if (v6)
        goto LABEL_3;
    }
  }
  else if (v3)
  {
LABEL_3:
    v4 = sub_1C56B580C(*(llvm::AbstractAttribute **)a1, *(uint64_t ***)(a1 + 8), v3);
    goto LABEL_6;
  }
  v4 = 0;
LABEL_6:
  if (v7 != &v9)
    free(v7);
  return v4;
}

_QWORD *sub_1C56B5F8C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B5FC0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B6004(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  sub_1C56B4D50(a1, a2);
  if (*(unsigned __int8 *)(sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 16) - 11 <= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  v5 = sub_1C5676CEC((_DWORD *)(a1 + 16));
  result = sub_1C56B5430(a1, a2, v5);
  *(_BYTE *)(a1 + 42) = result;
  return result;
}

size_t sub_1C56B6084@<X0>(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  size_t result;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 112))(a1) & 1) != 0)
  {
    v4 = "assumed-dead";
  }
  else if (a1[41])
  {
    v4 = "assumed-dead-users";
  }
  else
  {
    v4 = "assumed-live";
  }
  result = strlen(v4);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
      goto LABEL_14;
  }
  result = (size_t)memcpy(a2, v4, v6);
LABEL_14:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

void sub_1C56B6158(uint64_t a1)
{
  unsigned __int8 v1;
  __guard *v2;
  unsigned __int8 v3;

  if (*(_BYTE *)(a1 + 42))
  {
    v1 = atomic_load(byte_1ED809B30);
    if ((v1 & 1) != 0)
      return;
    v2 = (__guard *)byte_1ED809B30;
  }
  else
  {
    v3 = atomic_load(byte_1ED809B38);
    if ((v3 & 1) != 0)
      return;
    v2 = (__guard *)byte_1ED809B38;
  }
  if (__cxa_guard_acquire(v2))
    __cxa_guard_release(v2);
}

uint64_t sub_1C56B61C8(uint64_t a1, uint64_t **a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (*(_BYTE *)(a1 + 42) && (v4 = sub_1C5676CEC((_DWORD *)(a1 + 16)), (sub_1C56B5430(a1, (uint64_t)a2, v4) & 1) == 0))
  {
    v5 = 0;
    *(_BYTE *)(a1 + 42) = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  if ((sub_1C56B580C((llvm::AbstractAttribute *)a1, a2, v6) & 1) != 0)
    return v5;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
}

BOOL sub_1C56B6260(uint64_t a1)
{
  return (~*(unsigned __int8 *)(a1 + 41) & 3) == 0 && *(_BYTE *)(a1 + 42) != 0;
}

uint64_t *sub_1C56B6288(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B62A0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56B62E8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B631C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56B6360(uint64_t *a1, uint64_t a2)
{
  unint64_t result;

  sub_1C56B5330(a1, a2);
  result = sub_1C6284150((llvm::IRPosition *)(a1 + 2));
  if (*(unsigned __int8 *)(result + 16) - 11 <= 1)
    return (*(uint64_t (**)(uint64_t *))(a1[4] + 40))(a1 + 4);
  return result;
}

uint64_t sub_1C56B63B0(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  llvm::Type *v7;
  int v8;
  unint64_t v9;
  llvm::UndefValue ***v10;
  llvm::UndefValue *v11;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = (llvm::IRPosition *)(a1 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v4 & 3) == 0)
    v5 = *(_QWORD *)(v5 + 24);
  v6 = sub_1C628686C(v3, 0);
  v8 = *(_DWORD *)(v5 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(_QWORD *)(v5 - 8);
  else
    v9 = v5 - 32 * (v8 & 0x7FFFFFF);
  v10 = (llvm::UndefValue ***)(v9 + 32 * v6);
  v11 = llvm::UndefValue::get(**v10, v7);
  return sub_1C628F700(a2, (uint64_t)v10, v11) ^ 1;
}

void sub_1C56B642C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3248);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3248))
      __cxa_guard_release(&qword_1EF8F3248);
  }
}

uint64_t sub_1C56B646C(_QWORD *a1, uint64_t a2)
{
  unint64_t AssociatedArgument;
  llvm::AbstractAttribute *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  AssociatedArgument = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 2));
  if (!AssociatedArgument)
    return (*(uint64_t (**)(_QWORD *))(a1[4] + 40))(a1 + 4);
  v5 = sub_1C5677D4C(a2, AssociatedArgument, 0, (uint64_t)a1, 0, 0, 1);
  v6 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  v7 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
  LODWORD(v5) = v6[9];
  (*(void (**)(unsigned __int8 *, _QWORD))(*(_QWORD *)v6 + 48))(v6, *(unsigned __int8 *)(v7 + 9));
  return (_DWORD)v5 == v6[9];
}

uint64_t *sub_1C56B651C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B6534(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56B657C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B65B0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56B65F4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "nofree";
  else
    v3 = "may-free";
  if (*(_BYTE *)(a1 + 41))
    v4 = 6;
  else
    v4 = 8;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

void sub_1C56B664C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3250);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3250))
      __cxa_guard_release(&qword_1EF8F3250);
  }
}

uint64_t sub_1C56B668C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char v6;
  _QWORD v7[2];
  int *v8[2];
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7[0] = a2;
  v7[1] = a1;
  v9 = 0xB00000005;
  v10 = 56;
  v8[0] = (int *)&v9;
  v8[1] = (int *)3;
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if ((llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C56B67C0, (uint64_t)v7, v4, a1, v8, &v6, 0, 0) & 1) != 0)return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
}

uint64_t *sub_1C56B6760(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B6778(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C56B67C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[1];
  v5 = *(_QWORD *)(a2 + 64);
  return v5 && (*(_BYTE *)(v5 + 15) & 2) != 0
      || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 25) & 1) != 0
      || *((_BYTE *)sub_1C568658C(*a1, a2, 0, v4, 0, 0, 1) + 41) != 0;
}

_QWORD *sub_1C56B6840(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B6874(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56B68B8(_BYTE *a1, uint64_t a2)
{
  unint64_t result;

  sub_1C6290574((uint64_t)a1, a2);
  result = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if (!result)
    goto LABEL_8;
  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
LABEL_8:
      a1[41] = a1[40];
  }
  else if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    goto LABEL_8;
  }
  return result;
}

void sub_1C56B6924()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3258);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3258))
      __cxa_guard_release(&qword_1EF8F3258);
  }
}

uint64_t sub_1C56B6964(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  v5 = sub_1C568658C(a2, v4, 0, v3, 0, 0, 1);
  v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
  v7 = *(_QWORD *)(v3 + 32);
  v3 += 32;
  LODWORD(a2) = *(_BYTE *)(v3 + 9) == 0;
  (*(void (**)(uint64_t, _QWORD))(v7 + 48))(v3, *(unsigned __int8 *)(v6 + 9));
  return a2 ^ (*(_BYTE *)(v3 + 9) != 0);
}

uint64_t *sub_1C56B69E8(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B6A00(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56B6A48(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B6A7C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56B6AC0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3260);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3260))
      __cxa_guard_release(&qword_1EF8F3260);
  }
}

uint64_t sub_1C56B6B00(_QWORD *a1, llvm::Attributor *a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v4 = (llvm::IRPosition *)(a1 + 2);
  v5 = sub_1C628D68C((llvm::IRPosition *)(a1 + 2));
  v6 = 1;
  if (!*((_BYTE *)sub_1C568658C((uint64_t)a2, v5, v7, (uint64_t)a1, 1, 0, 1) + 41))
  {
    v9 = sub_1C6284150(v4);
    v11[0] = a2;
    v11[1] = a1;
    if ((llvm::Attributor::checkForAllUses(a2, (unsigned int (*)(uint64_t, uint64_t *, uint64_t *))sub_1C56B6C28, (uint64_t)v11, a1, v9, 0, 1, 1, 0, v10) & 1) == 0)return (*(uint64_t (**)(_QWORD *))(a1[4] + 40))(a1 + 4);
  }
  return v6;
}

uint64_t *sub_1C56B6BC8(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B6BE0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C56B6C28(uint64_t *a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v3 = a1[1];
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 > 0x3D)
  {
    switch(*(_BYTE *)(v4 + 16))
    {
      case 'M':
      case 'S':
      case 'U':
        break;
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
        return 0;
      case 'T':
        goto LABEL_10;
      default:
        if (v5 != 62)
          return 0;
        break;
    }
    result = 1;
    *a3 = 1;
  }
  else
  {
    if (*(unsigned __int8 *)(v4 + 16) > 0x3Bu || v5 == 29)
      return 1;
    if (v5 != 33 && v5 != 39)
      return 0;
LABEL_10:
    v7 = *(_DWORD *)(v4 + 20);
    if (v7 < 0)
    {
      v14 = v4 - 32 * (v7 & 0x7FFFFFF);
      v15 = *(_QWORD *)(v14 - 8);
      if ((v15 & 0xFFFFFFFF0) != 0)
      {
        v16 = (a2 - v14) >> 5;
        if (*(_DWORD *)(v14 - v15) <= v16 && *(_DWORD *)(v14 - 12) > v16)
          return 0;
      }
    }
    v8 = v4 - 32 * (v7 & 0x7FFFFFF);
    if (v8 > a2)
      return 1;
    if (v5 == 84)
      v9 = 0;
    else
      v9 = v5 == 39 ? (*(_DWORD *)(v4 + 80) + 1) : 2;
    if (v7 < 0 && (v17 = *(_QWORD *)(v8 - 8), (v17 & 0xFFFFFFFF0) != 0))
      v10 = (*(_DWORD *)(v8 - 12) - *(_DWORD *)(v8 - v17));
    else
      v10 = 0;
    if (v4 - 32 * v9 - 32 * v10 - 32 <= a2)
      return 1;
    v11 = a2 - v8;
    v12 = *a1;
    if ((v7 & 0x40000000) != 0)
      v8 = *(_QWORD *)(v4 - 8);
    return *((_BYTE *)sub_1C568658C(v12, (v8 + (v11 & 0x1FFFFFFFE0)) | 3, 0, v3, 0, 0, 1) + 41) != 0;
  }
  return result;
}

_QWORD *sub_1C56B6DA4(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B6DD8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56B6E1C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3268);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3268))
      __cxa_guard_release(&qword_1EF8F3268);
  }
}

uint64_t *sub_1C56B6E5C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B6E74(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56B6EBC(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B6EF0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B6F34()
{
  return 1;
}

void sub_1C56B6F3C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3270);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3270))
      __cxa_guard_release(&qword_1EF8F3270);
  }
}

uint64_t *sub_1C56B6F7C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B6F94(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56B6FDC(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B7010(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56B7054()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3278);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3278))
      __cxa_guard_release(&qword_1EF8F3278);
  }
}

unint64_t sub_1C56B7094(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;

  result = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 16));
  if (result)
  {
    v5 = sub_1C568658C(a2, result, 0, a1, 0, 0, 1);
    v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
    v8 = *(_QWORD *)(a1 + 32);
    v7 = a1 + 32;
    v9 = *(_BYTE *)(v7 + 9) == 0;
    (*(void (**)(uint64_t, _QWORD))(v8 + 48))(v7, *(unsigned __int8 *)(v6 + 9));
    return v9 ^ (*(_BYTE *)(v7 + 9) != 0);
  }
  else
  {
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
  }
  return result;
}

uint64_t *sub_1C56B7128(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B7140(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56B7188(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = a1[9];
  v3 = a1[10];
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 8);
    v5 = *(void **)(v4 + 48);
    if (v5 != (void *)(v4 + 64))
      free(v5);
    if ((*(_BYTE *)(v4 + 24) & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)(v4 + 32), 8);
    v2 += 16;
  }
  v6 = (_QWORD *)a1[15];
  v7 = (_QWORD *)a1[16];
  if (v6 != v7)
  {
    do
    {
      v8 = v6[1];
      v9 = *(void **)(v8 + 40);
      if (v9 != (void *)(v8 + 56))
        free(v9);
      if ((*(_BYTE *)(v8 + 16) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v8 + 24), 8);
      v6 += 2;
    }
    while (v6 != v7);
    v6 = (_QWORD *)a1[15];
  }
  if (v6)
  {
    a1[16] = v6;
    operator delete(v6);
  }
  MEMORY[0x1CAA32FB4](a1[12], 8);
  v10 = (void *)a1[9];
  if (v10)
  {
    a1[10] = v10;
    operator delete(v10);
  }
  MEMORY[0x1CAA32FB4](a1[6], 8);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B7288(_QWORD *a1)
{
  sub_1C56B7188(a1);
  JUMPOUT(0x1CAA32FC0);
}

int **sub_1C56B72AC(llvm::IRPosition *this, uint64_t *a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  int **result;
  uint64_t (**v20)(void);
  char v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26[3];
  int **v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)((char *)this + 16);
  v5 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*((_DWORD *)this + 4) & 3) == 0)
    v5 = *(_QWORD *)(v5 + 24);
  if (*(_BYTE *)(v5 + 16))
  {
    if (*(_BYTE *)(v5 + 16) == 21)
      v6 = (unint64_t *)(v5 + 24);
    else
      v6 = (unint64_t *)(*(_QWORD *)(v5 + 40) + 56);
    v5 = *v6;
  }
  v7 = **(_QWORD **)(a2[11] + 440);
  if (v7)
    v8 = *(_QWORD *)(v5 + 40) == 0;
  else
    v8 = 1;
  if (v8)
    v9 = 0;
  else
    v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v7, &llvm::TargetLibraryAnalysis::Key, v5) + 8;
  v22[2] = a2;
  v23 = v9;
  v22[0] = &v23;
  v22[1] = this;
  v24 = 0xB00000005;
  LODWORD(v25) = 56;
  v26[0] = (int *)&v24;
  v26[1] = (int *)3;
  v10 = sub_1C5676C10(v4);
  llvm::Attributor::checkForAllInstructions((uint64_t)a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C56B8980, (uint64_t)v22, v10, (uint64_t)this, v26, &v21, 0, 1);
  v26[0] = (int *)&off_1E8178920;
  v27 = v26;
  v11 = (uint64_t *)*((_QWORD *)this + 9);
  v12 = (uint64_t *)*((_QWORD *)this + 10);
  while (v11 != v12)
  {
    v13 = *v11;
    v11 += 2;
    v24 = v13 | 1;
    v25 = 0;
    v14 = sub_1C62908E4(a2, &v24);
    sub_1C6290848((uint64_t)(v14 + 2), (uint64_t)v26);
  }
  v16 = (uint64_t *)*((_QWORD *)this + 15);
  v15 = (uint64_t *)*((_QWORD *)this + 16);
  while (v16 != v15)
  {
    v17 = *v16;
    v16 += 2;
    v24 = v17 | 1;
    v25 = 0;
    v18 = sub_1C62908E4(a2, &v24);
    sub_1C6290848((uint64_t)(v18 + 2), (uint64_t)v26);
  }
  result = v27;
  if (v27 == v26)
  {
    v20 = (uint64_t (**)(void))(v26[0] + 8);
  }
  else
  {
    if (!v27)
      return result;
    v20 = (uint64_t (**)(void))(*v27 + 10);
  }
  return (int **)(*v20)();
}

void sub_1C56B7494(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  std::string __p;
  std::string v15;
  std::string v16;
  std::string v17;

  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if (v3 == v4)
  {
    v6 = 0;
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(v3 + 8) + 12) == 2)
        ++v6;
      else
        ++v5;
      v3 += 16;
    }
    while (v3 != v4);
  }
  std::to_string(&v15, v5);
  v7 = std::string::insert(&v15, 0, "[H2S] Mallocs Good/Bad: ");
  v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v16, "/");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v6);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v17, (const std::string::value_type *)p_p, size);
  *a2 = *v13;
  v13->__r_.__value_.__r.__words[0] = 0;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

uint64_t sub_1C56B75E8(uint64_t *a1, llvm::Attributor *a2)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t (*v19)(_QWORD, _QWORD);
  uint64_t v20;
  llvm::OptimizationRemarkEmitter *v21;
  llvm::OptimizationRemarkEmitter *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  unint64_t v32;
  void **v33;
  char *v34;
  unint64_t v35;
  void **v36;
  char *v37;
  unint64_t v38;
  void **v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned __int8 v45;
  uint64_t v46;
  const char *v47;
  char *v48;
  unint64_t v49;
  void **v50;
  unint64_t v51;
  void **v52;
  uint64_t v53;
  const llvm::APInt *v54;
  llvm::ConstantInt **v55;
  llvm::ValueHandleBase *v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned __int16 v59;
  BOOL v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned __int8 v68;
  llvm::Type *v69;
  _DWORD *v70;
  llvm::Value *PointerBitCastOrAddrSpaceCast;
  llvm::PointerType *v72;
  uint64_t v73;
  uint64_t v74;
  llvm::UndefValue *InitialValueOfAllocation;
  uint64_t v76;
  llvm::BasicBlock *v77;
  llvm::BasicBlock *v78;
  _DWORD *v79;
  llvm::BasicBlock *v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  llvm::OptimizationRemarkEmitter *v87;
  llvm::OptimizationRemarkEmitter *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  int v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  unsigned int v97;
  char v98;
  uint64_t v99;
  void *v100;
  __int16 v101;
  _QWORD v102[3];
  char v103;
  char v104;
  void *v105;
  uint64_t v106;
  _QWORD v107[9];
  _BYTE v108[24];
  _BYTE *v109;
  uint64_t v110[4];
  void *v111;
  void *v112;
  void *v113;
  const void *v114[10];
  char *v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t (**v118)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  unsigned int v119;
  char v120;
  uint64_t v121;
  _QWORD v122[5];
  char v123;
  char v124;
  char *v125;
  uint64_t v126;
  _BYTE v127[260];
  int v128;
  uint64_t v129;
  uint64_t v130;

  v130 = *MEMORY[0x1E0C80C00];
  v3 = a1[2] & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*((_DWORD *)a1 + 4) & 3) == 0)
    v3 = *(_QWORD *)(v3 + 24);
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (*(_BYTE *)(v3 + 16))
  {
    if (v4 == 21)
    {
      v5 = (unint64_t *)(v3 + 24);
LABEL_8:
      v3 = *v5;
      goto LABEL_10;
    }
    if (v4 >= 0x1C)
    {
      v5 = (unint64_t *)(*(_QWORD *)(v3 + 40) + 56);
      goto LABEL_8;
    }
    v3 = 0;
  }
LABEL_10:
  v6 = **(_QWORD **)(*((_QWORD *)a2 + 11) + 440);
  if (v6)
    v7 = *(_QWORD *)(v3 + 40) == 0;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v6, &llvm::TargetLibraryAnalysis::Key, v3) + 8);
  v10 = a1[9];
  v9 = a1[10];
  if (v10 != v9)
  {
    result = 1;
    v91 = v8;
    while (1)
    {
      v12 = *(uint64_t **)(v10 + 8);
      if (*((_DWORD *)v12 + 3) != 2)
        break;
LABEL_19:
      v10 += 16;
      if (v10 == v9)
        return result;
    }
    v13 = *((unsigned int *)v12 + 14);
    if ((_DWORD)v13)
    {
      v14 = (uint64_t *)v12[6];
      v15 = 8 * v13;
      do
      {
        v16 = *v14++;
        sub_1C6290278((uint64_t)a2, v16);
        v15 -= 8;
      }
      while (v15);
    }
    if (*((_DWORD *)v12 + 2) == 91)
      v17 = 6;
    else
      v17 = 11;
    if (*((_DWORD *)v12 + 2) == 91)
      v18 = "OMP110";
    else
      v18 = "HeapToStack";
    v19 = (uint64_t (*)(_QWORD, _QWORD))*((_QWORD *)a2 + 687);
    if (v19)
    {
      v20 = *v12;
      v21 = (llvm::OptimizationRemarkEmitter *)v19(*((_QWORD *)a2 + 688), *(_QWORD *)(*(_QWORD *)(*v12 + 40) + 56));
      v22 = v21;
      if (*(_WORD *)v18 == 19791 && v18[2] == 80)
      {
        v24 = ****(_QWORD ****)v21;
        if (!*(_QWORD *)(v24 + 128)
          && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 72) + 48))(*(_QWORD *)(v24 + 72)))
        {
          goto LABEL_98;
        }
        v87 = v22;
        v25 = *((_QWORD *)a2 + 689);
        v26 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 56);
        llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v122, (const llvm::DebugLoc *)(v20 + 48));
        v27 = *(_QWORD *)(v20 + 40);
        v119 = 9;
        v120 = 2;
        v121 = v26;
        v122[2] = v25;
        v8 = v91;
        v122[3] = v18;
        v122[4] = v17;
        v123 = 0;
        v124 = 0;
        v125 = v127;
        v126 = 0x400000000;
        v127[256] = 0;
        v128 = -1;
        v129 = v27;
        v118 = &off_1E814E500;
        v93 = 0;
        v28 = sub_1C4ECD910(v91, *v12, &v93);
        v29 = 52;
        if ((v28 & (v93 == 91)) != 0)
          v29 = 40;
        v30 = "Moving memory allocation from the heap to the stack.";
        if ((v28 & (v93 == 91)) != 0)
          v30 = "Moving globalized variable to the stack.";
        v94 = v30;
        v95 = v29;
        sub_1C53B17B4((uint64_t)&v125, (const void **)&v94);
        sub_1C61998EC((uint64_t)&v96, (uint64_t)&v118);
        v94 = " [";
        v95 = 2;
        v96 = &off_1E814E500;
        sub_1C53B17B4((uint64_t)&v105, (const void **)&v94);
        v94 = v18;
        v95 = v17;
        sub_1C53B17B4((uint64_t)&v105, (const void **)&v94);
        v94 = "]";
        v95 = 1;
        sub_1C53B17B4((uint64_t)&v105, (const void **)&v94);
        sub_1C61998EC((uint64_t)v114, (uint64_t)&v96);
        v114[0] = &off_1E814E500;
        v96 = &off_1E814E790;
        v31 = (char *)v105;
        if ((_DWORD)v106)
        {
          v32 = (unint64_t)v106 << 6;
          do
          {
            v33 = (void **)&v31[v32];
            if (v31[v32 - 17] < 0)
              operator delete(*(v33 - 5));
            if (*((char *)v33 - 41) < 0)
              operator delete(*(v33 - 8));
            v32 -= 64;
          }
          while (v32);
          v31 = (char *)v105;
        }
        if (v31 != (char *)v107)
          free(v31);
        v118 = &off_1E814E790;
        v34 = v125;
        if ((_DWORD)v126)
        {
          v35 = (unint64_t)v126 << 6;
          do
          {
            v36 = (void **)&v34[v35];
            if (v34[v35 - 17] < 0)
              operator delete(*(v36 - 5));
            if (*((char *)v36 - 41) < 0)
              operator delete(*(v36 - 8));
            v35 -= 64;
          }
          while (v35);
          v34 = v125;
        }
        if (v34 != v127)
          free(v34);
        llvm::OptimizationRemarkEmitter::emit(v87, (llvm::DiagnosticInfoOptimizationBase *)v114);
        v114[0] = &off_1E814E790;
        v37 = v115;
        if (v116)
        {
          v38 = (unint64_t)v116 << 6;
          do
          {
            v39 = (void **)&v37[v38];
            if (v37[v38 - 17] < 0)
              operator delete(*(v39 - 5));
            if (*((char *)v39 - 41) < 0)
              operator delete(*(v39 - 8));
            v38 -= 64;
          }
          while (v38);
          v37 = v115;
        }
        v40 = (char *)&v117;
      }
      else
      {
        v41 = ****(_QWORD ****)v21;
        if (!*(_QWORD *)(v41 + 128)
          && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v41 + 72) + 48))(*(_QWORD *)(v41 + 72)))
        {
          goto LABEL_98;
        }
        v88 = v22;
        v42 = *((_QWORD *)a2 + 689);
        v43 = *(_QWORD *)(*(_QWORD *)(v20 + 40) + 56);
        llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v100, (const llvm::DebugLoc *)(v20 + 48));
        v44 = *(void **)(v20 + 40);
        v97 = 9;
        v98 = 2;
        v99 = v43;
        v8 = v91;
        v102[0] = v42;
        v102[1] = v18;
        v102[2] = v17;
        v103 = 0;
        v104 = 0;
        v105 = v107;
        v106 = 0x400000000;
        LOBYTE(v112) = 0;
        HIDWORD(v112) = -1;
        v113 = v44;
        v96 = &off_1E814E500;
        LODWORD(v94) = 0;
        v45 = sub_1C4ECD910(v91, *v12, (int *)&v94);
        v46 = 52;
        if ((v45 & ((_DWORD)v94 == 91)) != 0)
          v46 = 40;
        v47 = "Moving memory allocation from the heap to the stack.";
        if ((v45 & ((_DWORD)v94 == 91)) != 0)
          v47 = "Moving globalized variable to the stack.";
        v114[0] = v47;
        v114[1] = (const void *)v46;
        sub_1C53B17B4((uint64_t)&v105, v114);
        sub_1C61998EC((uint64_t)&v118, (uint64_t)&v96);
        v118 = &off_1E814E500;
        v96 = &off_1E814E790;
        v48 = (char *)v105;
        if ((_DWORD)v106)
        {
          v49 = (unint64_t)v106 << 6;
          do
          {
            v50 = (void **)&v48[v49];
            if (v48[v49 - 17] < 0)
              operator delete(*(v50 - 5));
            if (*((char *)v50 - 41) < 0)
              operator delete(*(v50 - 8));
            v49 -= 64;
          }
          while (v49);
          v48 = (char *)v105;
        }
        if (v48 != (char *)v107)
          free(v48);
        llvm::OptimizationRemarkEmitter::emit(v88, (llvm::DiagnosticInfoOptimizationBase *)&v118);
        v118 = &off_1E814E790;
        v37 = v125;
        if ((_DWORD)v126)
        {
          v51 = (unint64_t)v126 << 6;
          do
          {
            v52 = (void **)&v37[v51];
            if (v37[v51 - 17] < 0)
              operator delete(*(v52 - 5));
            if (*((char *)v52 - 41) < 0)
              operator delete(*(v52 - 8));
            v51 -= 64;
          }
          while (v51);
          v37 = v125;
        }
        v40 = v127;
      }
      if (v37 != v40)
        free(v37);
    }
LABEL_98:
    v53 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 120);
    sub_1C56B8EA8((uint64_t)&v118, a1[2], (uint64_t)a2, (uint64_t)a1, v12);
    v55 = *(llvm::ConstantInt ***)*v12;
    if ((_BYTE)v121)
    {
      v56 = llvm::ConstantInt::get(*v55, (llvm::LLVMContext *)&v118, v54);
      goto LABEL_109;
    }
    llvm::ObjectSizeOffsetEvaluator::ObjectSizeOffsetEvaluator((uint64_t)&v96, v53, (uint64_t)v8, (uint64_t)*v55, v89 & 0xFFFFFFFFFF000000, 0);
    v56 = llvm::ObjectSizeOffsetEvaluator::compute((llvm::ObjectSizeOffsetEvaluator *)&v96, (llvm::Type **)*v12);
    if (v113 != v112)
      free(v113);
    if (v111 != (void *)v110[3])
      free(v111);
    sub_1C4EC4314(v110);
    v107[8] = &off_1E8167568;
    v57 = v109;
    v89 &= 0xFFFFFFFFFF000000;
    if (v109 == v108)
    {
      v57 = v108;
      v58 = 4;
    }
    else
    {
      if (!v109)
      {
LABEL_106:
        if (v100 != v102)
          free(v100);
LABEL_109:
        v59 = sub_1C543FD8C(*v12);
        if ((_BYTE)v59)
          v60 = v59 >= 0x100u;
        else
          v60 = 0;
        if (v60)
          v61 = v59;
        else
          v61 = 0;
        v62 = *v12;
        sub_1C4EBF808(*v12, 63, v8, &v96);
        if (!(_BYTE)v100 || (v99 & 0x80000000) != 0)
        {
          LODWORD(v94) = 0;
          if (!llvm::AttributeList::hasAttrSomewhere((uint64_t *)(v62 + 64), 1, (int *)&v94))
          {
            v63 = *(_QWORD *)(v62 - 32);
            if (!v63
              || *(_BYTE *)(v63 + 16)
              || *(_QWORD *)(v63 + 24) != *(_QWORD *)(v62 + 72)
              || (v114[0] = *(const void **)(v63 + 112),
                  !llvm::AttributeList::hasAttrSomewhere((uint64_t *)v114, 1, (int *)&v94)))
            {
LABEL_136:
              v69 = (llvm::Type *)*(unsigned int *)(v53 + 4);
              v70 = operator new(0x68uLL);
              PointerBitCastOrAddrSpaceCast = (llvm::Value *)(v70 + 8);
              v70[13] = v70[13] & 0x38000000 | 1;
              *(_QWORD *)v70 = 0;
              *((_QWORD *)v70 + 1) = 0;
              *((_QWORD *)v70 + 2) = 0;
              *((_QWORD *)v70 + 3) = v70 + 8;
              v72 = (llvm::PointerType *)(***(_QWORD ***)v3 + 1912);
              v101 = 257;
              llvm::AllocaInst::AllocaInst((uint64_t)(v70 + 8), v72, v69, v56, v61, (uint64_t)&v96, *v12);
              v73 = *v12;
              v74 = *(_QWORD *)*v12;
              if (*((_QWORD *)v70 + 4) != v74)
              {
                v96 = "malloc_cast";
                v101 = 259;
                PointerBitCastOrAddrSpaceCast = llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(PointerBitCastOrAddrSpaceCast, v74, (uint64_t)&v96, *v12);
                v73 = *v12;
              }
              v8 = v91;
              InitialValueOfAllocation = llvm::getInitialValueOfAllocation(v73, v91, (llvm::UndefValue *)(***(_QWORD ***)v3 + 1912));
              sub_1C6290C00((uint64_t)a2, *v12, PointerBitCastOrAddrSpaceCast, 1);
              v76 = *v12;
              if (*v12 && *(_BYTE *)(v76 + 16) == 33)
              {
                v77 = *(llvm::BasicBlock **)(v76 - 96);
                v78 = *(llvm::BasicBlock **)(v76 + 40);
                v79 = operator new(0x60uLL);
                v79[13] = v79[13] & 0x38000000 | 1;
                *(_QWORD *)v79 = 0;
                *((_QWORD *)v79 + 1) = 0;
                *((_QWORD *)v79 + 2) = 0;
                *((_QWORD *)v79 + 3) = v79 + 8;
                v80 = v77;
                v8 = v91;
                llvm::BranchInst::BranchInst((llvm::BranchInst *)(v79 + 8), v80, v78);
                v76 = *v12;
              }
              sub_1C6290278((uint64_t)a2, v76);
              if (*((unsigned __int8 *)InitialValueOfAllocation + 16) - 11 >= 2)
              {
                v81 = *((_QWORD *)PointerBitCastOrAddrSpaceCast + 4);
                v82 = !v81 || v81 == *((_QWORD *)PointerBitCastOrAddrSpaceCast + 5) + 40;
                v83 = v82 ? 0 : v81 - 24;
                sub_1C4773D54((uint64_t)&v96, v83, 0, 0, 0);
                v90 &= 0xFFFFFFFFFFFF0000;
                llvm::IRBuilderBase::CreateMemSet((uint64_t)&v96, PointerBitCastOrAddrSpaceCast, (uint64_t)InitialValueOfAllocation, (uint64_t *)v56, 0, 0, 0, 0, 0);
                if (v96 != &v99)
                  free(v96);
              }
              if ((_BYTE)v121 && v119 >= 0x41)
              {
                if (v118)
                  MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
              }
              result = 0;
              goto LABEL_19;
            }
          }
          v84 = v62 - 32 * (*(_DWORD *)(v62 + 20) & 0x7FFFFFF);
          v85 = 32 * ((_DWORD)v94 - 1);
        }
        else
        {
          v84 = v62 - 32 * (*(_DWORD *)(v62 + 20) & 0x7FFFFFF);
          v85 = 32 * v99;
        }
        v86 = *(_QWORD *)(v84 + v85);
        if (v86)
        {
          sub_1C56B8FCC((uint64_t)&v96, a2, (const llvm::AbstractAttribute *)a1, v86);
          v64 = (unint64_t *)&v96;
          if (v97 >= 0x41)
            v64 = (unint64_t *)v96;
          v65 = *v64;
          v66 = __clz(v65) ^ 0x13F;
          if (v65)
            v67 = v66;
          else
            v67 = 0;
          if ((v67 & 0x3F) <= v61)
            v68 = v61;
          else
            v68 = v67;
          if (v67 >= 0x100)
            v61 = v68;
          if (v97 >= 0x41 && (_BYTE)v99 && v96)
            MEMORY[0x1CAA32F9C]();
        }
        goto LABEL_136;
      }
      v58 = 5;
    }
    (*(void (**)(void))(*v57 + 8 * v58))();
    goto LABEL_106;
  }
  return 1;
}

void sub_1C56B8110()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3280);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3280))
      __cxa_guard_release(&qword_1EF8F3280);
  }
}

uint64_t sub_1C56B8150(uint64_t a1, llvm::Attributor *a2)
{
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  unsigned int v21;
  void *v22;
  _QWORD *v23;
  int v24;
  void *v25;
  int64_t v26;
  BOOL v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint8x8_t v32;
  int v33;
  int64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  llvm::AbstractAttribute *v66;
  BOOL v67;
  uint64_t v69;
  int v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  llvm::Attributor *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v3 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v3 + 16))
  {
    if (*(_BYTE *)(v3 + 16) == 21)
      v4 = (unint64_t *)(v3 + 24);
    else
      v4 = (unint64_t *)(*(_QWORD *)(v3 + 40) + 56);
    v3 = *v4;
  }
  v5 = **(_QWORD **)(*((_QWORD *)a2 + 11) + 440);
  if (v5)
    v6 = *(_QWORD *)(v3 + 40) == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v5, &llvm::TargetLibraryAnalysis::Key, v3) + 8);
  v66 = sub_1C5677D4C((uint64_t)a2, v3, 0, a1, 2, 0, 1);
  v8 = *((_QWORD *)a2 + 11);
  v9 = *(_DWORD *)(v8 + 592);
  v11 = v9 != 25 && v9 != 30 && (v9 & 0xFFFFFFFE) != 44;
  v67 = v11;
  v13 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  if (v13 != v12)
  {
    v14 = 0;
    v65 = v8 + 136;
    v15 = 1;
    while (1)
    {
      v16 = *(_QWORD *)(v13 + 8);
      if (*(_DWORD *)(v16 + 12) != 2)
        break;
LABEL_79:
      v13 += 16;
      if (v13 == v12)
        return v15;
    }
    v17 = *(_QWORD *)v16;
    sub_1C4EBF808(*(_QWORD *)v16, 63, v7, &v71);
    if (!(_BYTE)v74 || (v73 & 0x80000000) != 0)
    {
      v70 = 0;
      if (!llvm::AttributeList::hasAttrSomewhere((uint64_t *)(v17 + 64), 1, &v70))
      {
        v18 = *(_QWORD *)(v17 - 32);
        if (!v18)
          goto LABEL_34;
        if (*(_BYTE *)(v18 + 16))
          goto LABEL_34;
        if (*(_QWORD *)(v18 + 24) != *(_QWORD *)(v17 + 72))
          goto LABEL_34;
        v69 = *(_QWORD *)(v18 + 112);
        if (!llvm::AttributeList::hasAttrSomewhere(&v69, 1, &v70))
          goto LABEL_34;
      }
      v59 = v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF);
      v60 = 32 * (v70 - 1);
    }
    else
    {
      v59 = v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF);
      v60 = 32 * v73;
    }
    v61 = *(_QWORD *)(v59 + v60);
    if (!v61)
      goto LABEL_34;
    sub_1C56B8FCC((uint64_t)&v71, a2, (const llvm::AbstractAttribute *)a1, v61);
    if (!(_BYTE)v73)
      goto LABEL_78;
    if (v72 < 0x41)
    {
      if ((unint64_t)v71 > 0x100000000)
        goto LABEL_78;
      v19 = (uint8x8_t)vcnt_s8((int8x8_t)v71);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.u32[0] != 1)
        goto LABEL_78;
LABEL_34:
      v20 = v15;
      if (dword_1ED809CF8 == -1)
        goto LABEL_67;
      sub_1C56B8EA8((uint64_t)&v71, *(_QWORD *)(a1 + 16), (uint64_t)a2, a1, (uint64_t *)v16);
      if (!(_BYTE)v73)
        goto LABEL_78;
      v21 = v72;
      v22 = v71;
      if (v72 < 0x41)
      {
        v23 = &v71;
        goto LABEL_57;
      }
      v33 = 0;
      v34 = ((unint64_t)v72 + 63) >> 6;
      do
      {
        v27 = v34-- < 1;
        if (v27)
          break;
        v35 = *((_QWORD *)v71 + v34);
        v33 += __clz(v35);
      }
      while (!v35);
      v36 = v72 | 0xFFFFFFC0;
      if ((v72 & 0x3F) == 0)
        v36 = 0;
      v37 = v72 - v33 - v36;
      v23 = v71;
      if (v37 > 0x40)
      {
LABEL_58:
        v20 = 0;
        v38 = 0;
        *(_DWORD *)(v16 + 12) = 2;
      }
      else
      {
LABEL_57:
        if (*v23 > (unint64_t)dword_1ED809CF8)
          goto LABEL_58;
        v38 = 1;
      }
      if (v21 >= 0x41 && v22)
        MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
      if (v38)
      {
LABEL_67:
        v39 = *(_DWORD *)(v16 + 12);
        if (v39 == 1)
          goto LABEL_73;
        if (!v39)
        {
          LOBYTE(v69) = 1;
          v71 = &v69;
          v72 = a1;
          v73 = v16;
          v74 = a2;
          if (!llvm::Attributor::checkForAllUses(a2, (unsigned int (*)(uint64_t, uint64_t *, uint64_t *))sub_1C56B9200, (uint64_t)&v71, (_QWORD *)a1, *(_QWORD *)v16, 0, 1, 1, 0, v63)|| !(_BYTE)v69)
          {
            *(_DWORD *)(v16 + 12) = 1;
LABEL_73:
            if (v67
              || *((_BYTE *)sub_1C56833C8((uint64_t)a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1, 1, 0, 1) + 41))
            {
              v15 = v20;
              if (!v14)
              {
                v40 = *(_QWORD *)(a1 + 120);
                v41 = *(_QWORD *)(a1 + 128);
                while (v40 != v41)
                {
                  v42 = *(_BYTE **)(v40 + 8);
                  if (!v42[8])
                  {
                    LOBYTE(v70) = 0;
                    if ((llvm::Attributor::isAssumedDead((uint64_t)a2, *(_QWORD *)v42, a1, v66, &v70, 1, 1) & 1) == 0)
                    {
                      v64 = v7;
                      v71 = &v73;
                      v72 = 0x800000000;
                      if ((llvm::AA::getAssumedUnderlyingObjects(a2, *(_QWORD *)(*(_QWORD *)v42 - 32 * (*(_DWORD *)(*(_QWORD *)v42 + 20) & 0x7FFFFFF)), (uint64_t)&v71, (const llvm::AbstractAttribute *)a1, *(_QWORD *)v42, (BOOL *)&v70, 2) & 1) != 0)
                      {
                        if ((_DWORD)v72)
                        {
                          v43 = (uint64_t *)v71;
                          v44 = 8 * v72;
                          do
                          {
                            v45 = *v43;
                            v46 = *(unsigned __int8 *)(*v43 + 16);
                            if (v46 > 0x13 || ((1 << v46) & 0x81800) == 0)
                            {
                              if (v46 < 0x1C
                                || ((v48 = v46 - 33, v27 = v48 > 0x33, v49 = (1 << v48) & 0x8000000000041, !v27)
                                  ? (v50 = v49 == 0)
                                  : (v50 = 1),
                                    v50))
                              {
                                v42[8] = 1;
                              }
                              else
                              {
                                v69 = *v43;
                                if (sub_1C56B989C(a1 + 48, v45))
                                  sub_1C6290E10((uint64_t)(v42 + 16), &v69);
                                else
                                  v42[8] = 1;
                              }
                            }
                            ++v43;
                            v44 -= 8;
                          }
                          while (v44);
                        }
                      }
                      else
                      {
                        v42[8] = 1;
                      }
                      if (v71 != &v73)
                        free(v71);
                      v7 = v64;
                      v15 = v20;
                    }
                  }
                  v40 += 16;
                }
              }
              if (*(_DWORD *)(v16 + 56) == 1)
              {
                v51 = **(_QWORD **)(v16 + 48);
                v71 = 0;
                if (sub_1C6144BDC(*(_QWORD *)(a1 + 96), *(_DWORD *)(a1 + 112), v51, &v71))
                {
                  v52 = (unsigned int *)v71;
                  v53 = *(_QWORD *)(a1 + 96);
                  v54 = *(unsigned int *)(a1 + 112);
                }
                else
                {
                  v53 = *(_QWORD *)(a1 + 96);
                  v54 = *(unsigned int *)(a1 + 112);
                  v52 = (unsigned int *)(v53 + 16 * v54);
                }
                if (v52 != (unsigned int *)(v53 + 16 * v54)
                  && (v55 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 16 * v52[2] + 8)) != 0
                  && !*(_BYTE *)(v55 + 8)
                  && *(_DWORD *)(v55 + 48) <= 1u
                  && (v56 = **(_QWORD **)(v55 + 40), v56 == *(_QWORD *)v16))
                {
                  if (*(_BYTE *)(v56 + 16) != 33)
                  {
                    v57 = *(_QWORD *)(v56 + 32);
                    if (v57)
                      v58 = v57 == *(_QWORD *)(v56 + 40) + 40;
                    else
                      v58 = 1;
                    if (v58)
                      v56 = 0;
                    else
                      v56 = v57 - 24;
                  }
                  v14 = 1;
                  if ((sub_1C6291174(v65, v51, v56) & 1) != 0)
                    goto LABEL_79;
                }
                else
                {
                  v14 = 1;
                }
              }
              else
              {
                v14 = 1;
              }
            }
LABEL_78:
            v15 = 0;
            *(_DWORD *)(v16 + 12) = 2;
            goto LABEL_79;
          }
        }
      }
      v15 = v20;
      goto LABEL_79;
    }
    v24 = 0;
    v25 = v71;
    v26 = ((unint64_t)v72 + 63) >> 6;
    do
    {
      v27 = v26-- < 1;
      if (v27)
        break;
      v28 = *((_QWORD *)v71 + v26);
      v24 += __clz(v28);
    }
    while (!v28);
    v29 = v72 | 0xFFFFFFC0;
    if ((v72 & 0x3F) == 0)
      v29 = 0;
    if ((v72 - v24 - v29) <= 0x40)
    {
      if (*(_QWORD *)v71 <= 0x100000000uLL)
      {
        v30 = 0;
        v31 = 0;
        do
        {
          v32 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v71 + 8 * v30));
          v32.i16[0] = vaddlv_u8(v32);
          v31 += v32.i32[0];
          ++v30;
        }
        while (((unint64_t)v72 + 63) >> 6 != v30);
        if (v31 == 1)
        {
          MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
          goto LABEL_34;
        }
      }
      *(_DWORD *)(v16 + 12) = 2;
    }
    else
    {
      *(_DWORD *)(v16 + 12) = 2;
      if (!v25)
        goto LABEL_61;
    }
    MEMORY[0x1CAA32F9C]();
LABEL_61:
    v15 = 0;
    goto LABEL_79;
  }
  return 1;
}

uint64_t sub_1C56B8898(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 41))
    return 0;
  result = sub_1C56B989C(a1 + 48, a2);
  if (result)
    return *(_DWORD *)(result + 12) != 2;
  return result;
}

uint64_t sub_1C56B88D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;

  if (!*(_BYTE *)(a1 + 41))
    return 0;
  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  if (v2 == v3)
    return 0;
  while (1)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if (*(_DWORD *)(v5 + 12) != 2 && (sub_1C6290F4C(v5 + 24, a2, &v7) & 1) != 0)
      break;
    v2 += 16;
    if (v2 == v3)
      return 0;
  }
  return 1;
}

_QWORD *sub_1C56B8950(uint64_t a1)
{
  return sub_1C56B7188((_QWORD *)(a1 - 32));
}

void sub_1C56B8958(uint64_t a1)
{
  sub_1C56B7188((_QWORD *)(a1 - 32));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56B8980(uint64_t ***a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t **v8;
  int v9;
  int v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  _QWORD v43[2];
  char v44;
  char v45;

  v2 = *(unsigned __int8 *)(a2 + 16) - 33;
  v3 = v2 > 0x33;
  v4 = (1 << v2) & 0x8000000000041;
  if (v3 || v4 == 0)
    return 1;
  v8 = a1[1];
  if (llvm::isFreeCall(a2, **a1))
  {
    v12 = sub_1C484358C((uint64_t)a1[2][3], 64, 3);
    *(_QWORD *)v12 = a2;
    *(_BYTE *)(v12 + 8) = 0;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_QWORD *)(v12 + 16) = 1;
    *(_QWORD *)(v12 + 24) = -4096;
    *(_QWORD *)(v12 + 40) = v12 + 56;
    *(_DWORD *)(v12 + 52) = 1;
    v41 = a2;
    v42 = 0;
    sub_1C6144658((uint64_t)v43, (uint64_t)(v8 + 12), &v41, &v42);
    v13 = v43[0];
    if (v44)
    {
      v15 = v8[16];
      v14 = (unint64_t)v8[17];
      if ((unint64_t)v15 >= v14)
      {
        v24 = v8[15];
        v25 = ((char *)v15 - (char *)v24) >> 4;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 60)
          goto LABEL_59;
        v27 = v14 - (_QWORD)v24;
        if (v27 >> 3 > v26)
          v26 = v27 >> 3;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
          v28 = 0xFFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          if (v28 >> 60)
            goto LABEL_60;
          v29 = (char *)operator new(16 * v28);
        }
        else
        {
          v29 = 0;
        }
        v30 = (uint64_t *)&v29[16 * v25];
        *v30 = a2;
        v30[1] = 0;
        v16 = v30 + 2;
        if (v15 != v24)
        {
          do
          {
            *((_OWORD *)v30 - 1) = *((_OWORD *)v15 - 1);
            v30 -= 2;
            v15 -= 2;
          }
          while (v15 != v24);
          v15 = v8[15];
        }
        v8[15] = v30;
        v8[16] = v16;
        v8[17] = (uint64_t *)&v29[16 * v28];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v15 = a2;
        v15[1] = 0;
        v16 = v15 + 2;
      }
      v8[16] = v16;
      v23 = v8[15];
      v22 = ((unint64_t)((char *)v16 - (char *)v23) >> 4) - 1;
      *(_DWORD *)(v13 + 8) = v22;
    }
    else
    {
      v22 = *(_DWORD *)(v43[0] + 8);
      v23 = v8[15];
    }
    v23[2 * v22 + 1] = v12;
    return 1;
  }
  if (byte_1ED82E438)
    v9 = 59;
  else
    v9 = 63;
  sub_1C4EBF808(a2, v9, **a1, v43);
  if (v45)
  {
    v10 = byte_1ED82E438 ? 43 : 47;
    sub_1C4EBF808(a2, v10, **a1, v43);
    if (v45)
    {
      if (llvm::getInitialValueOfAllocation(a2, **a1, (llvm::UndefValue *)(****(_QWORD ****)(a2 + 40) + 1912)))
      {
        v17 = sub_1C484358C((uint64_t)a1[2][3], 72, 3);
        *(_QWORD *)v17 = a2;
        *(_QWORD *)(v17 + 8) = 469;
        *(_BYTE *)(v17 + 16) = 0;
        *(_OWORD *)(v17 + 40) = 0u;
        *(_OWORD *)(v17 + 56) = 0u;
        *(_QWORD *)(v17 + 24) = 1;
        *(_QWORD *)(v17 + 32) = -4096;
        *(_QWORD *)(v17 + 48) = v17 + 64;
        *(_DWORD *)(v17 + 60) = 1;
        v41 = a2;
        v42 = 0;
        sub_1C6144658((uint64_t)v43, (uint64_t)(v8 + 6), &v41, &v42);
        v18 = v43[0];
        if (!v44)
        {
          v31 = *(_DWORD *)(v43[0] + 8);
          v32 = v8[9];
          goto LABEL_57;
        }
        v20 = v8[10];
        v19 = (unint64_t)v8[11];
        if ((unint64_t)v20 < v19)
        {
          *v20 = a2;
          v20[1] = 0;
          v21 = v20 + 2;
LABEL_56:
          v8[10] = v21;
          v32 = v8[9];
          v31 = ((unint64_t)((char *)v21 - (char *)v32) >> 4) - 1;
          *(_DWORD *)(v18 + 8) = v31;
LABEL_57:
          v32[2 * v31 + 1] = v17;
          v40 = **a1;
          if (v40)
            sub_1C4ECD910(v40, a2, (int *)(v17 + 8));
          return 1;
        }
        v33 = v8[9];
        v34 = ((char *)v20 - (char *)v33) >> 4;
        v35 = v34 + 1;
        if (!((unint64_t)(v34 + 1) >> 60))
        {
          v36 = v19 - (_QWORD)v33;
          if (v36 >> 3 > v35)
            v35 = v36 >> 3;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
            v37 = 0xFFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (!v37)
          {
            v38 = 0;
            goto LABEL_51;
          }
          if (!(v37 >> 60))
          {
            v38 = (char *)operator new(16 * v37);
LABEL_51:
            v39 = (uint64_t *)&v38[16 * v34];
            *v39 = a2;
            v39[1] = 0;
            v21 = v39 + 2;
            if (v20 != v33)
            {
              do
              {
                *((_OWORD *)v39 - 1) = *((_OWORD *)v20 - 1);
                v39 -= 2;
                v20 -= 2;
              }
              while (v20 != v33);
              v20 = v8[9];
            }
            v8[9] = v39;
            v8[10] = v21;
            v8[11] = (uint64_t *)&v38[16 * v37];
            if (v20)
              operator delete(v20);
            goto LABEL_56;
          }
LABEL_60:
          sub_1C4764EE4();
        }
LABEL_59:
        abort();
      }
    }
  }
  return 1;
}

void sub_1C56B8D8C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56B8DA0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8178920;
  return result;
}

void sub_1C56B8DC4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8178920;
}

uint64_t sub_1C56B8DDC()
{
  return 0;
}

_OWORD *sub_1C56B8DE8(uint64_t a1, int a2)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6290A14((char **)a1, (uint64_t)v4, (uint64_t)&v4[64 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = llvm::IRPosition::EmptyKey;
    v12 = v10 << 6;
    do
    {
      *result = v11;
      result += 4;
      v12 -= 64;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_1C56B8EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (**v16)(void);
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)a2 & 3) == 0)
    v9 = *(_QWORD *)(v9 + 24);
  if (*(_BYTE *)(v9 + 16))
  {
    if (*(_BYTE *)(v9 + 16) == 21)
      v10 = (unint64_t *)(v9 + 24);
    else
      v10 = (unint64_t *)(*(_QWORD *)(v9 + 40) + 56);
    v9 = *v10;
  }
  v11 = **(_QWORD **)(*(_QWORD *)(a3 + 88) + 440);
  if (v11)
    v12 = *(_QWORD *)(v9 + 40) == 0;
  else
    v12 = 1;
  if (v12)
    v13 = 0;
  else
    v13 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v11, &llvm::TargetLibraryAnalysis::Key, v9)
                    + 8);
  v14 = *a5;
  v17[0] = &off_1E8178968;
  v17[1] = a3;
  v17[2] = a4;
  v18 = v17;
  llvm::getAllocSize(v14, v13, (uint64_t)v17, a1);
  result = (uint64_t)v18;
  if (v18 == v17)
  {
    v16 = (uint64_t (**)(void))(v17[0] + 32);
  }
  else
  {
    if (!v18)
      return result;
    v16 = (uint64_t (**)(void))(*v18 + 40);
  }
  return (*v16)();
}

const void **sub_1C56B8FCC(uint64_t a1, llvm::Attributor *this, const llvm::AbstractAttribute *a3, uint64_t a4)
{
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  const void **result;
  char v11;
  const void **v12;
  uint64_t v13;
  char v14;
  size_t v15;
  void *v16;
  BOOL v17;
  _QWORD v18[2];

  v17 = 0;
  v5 = *(unsigned __int8 *)(a4 + 16);
  if (v5 != 21)
  {
    if (v5 < 0x1C)
    {
      if (!*(_BYTE *)(a4 + 16))
        a4 |= 2uLL;
    }
    else
    {
      v6 = v5 - 33;
      v7 = v6 > 0x33;
      v8 = (1 << v6) & 0x8000000000041;
      if (!v7 && v8 != 0)
        a4 |= 1uLL;
    }
  }
  v18[0] = a4;
  v18[1] = 0;
  result = (const void **)llvm::Attributor::getAssumedConstant(this, (const llvm::IRPosition *)v18, a3, &v17);
  if (!v11)
  {
    *(_DWORD *)(a1 + 8) = 64;
    *(_QWORD *)a1 = 0;
LABEL_18:
    v14 = 1;
    goto LABEL_19;
  }
  v12 = result;
  if (result && *((_BYTE *)result + 16) == 16)
  {
    v13 = *((unsigned int *)result + 8);
    *(_DWORD *)(a1 + 8) = v13;
    if (v13 > 0x40)
    {
      v15 = ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8;
      v16 = (void *)operator new[]();
      *(_QWORD *)a1 = v16;
      result = (const void **)memcpy(v16, v12[3], v15);
    }
    else
    {
      *(_QWORD *)a1 = result[3];
    }
    goto LABEL_18;
  }
  v14 = 0;
  *(_BYTE *)a1 = 0;
LABEL_19:
  *(_BYTE *)(a1 + 16) = v14;
  return result;
}

void sub_1C56B90F0()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C56B9104(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8178968;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C56B913C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8178968;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::UndefValue *sub_1C56B915C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  llvm::Attributor *v4;
  const llvm::AbstractAttribute *v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  llvm::UndefValue *result;
  char v13;
  BOOL v14;
  BOOL v15;
  _QWORD v16[2];

  v3 = *a2;
  v15 = 0;
  v4 = *(llvm::Attributor **)(a1 + 8);
  v5 = *(const llvm::AbstractAttribute **)(a1 + 16);
  v6 = *(unsigned __int8 *)(v3 + 16);
  if (v6 == 21)
    goto LABEL_9;
  if (v6 >= 0x1C)
  {
    v7 = v6 - 33;
    v8 = v7 > 0x33;
    v9 = (1 << v7) & 0x8000000000041;
    if (!v8 && v9 != 0)
    {
      v11 = v3 | 1;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (*(_BYTE *)(v3 + 16))
  {
LABEL_9:
    v11 = v3;
    goto LABEL_10;
  }
  v11 = v3 | 2;
LABEL_10:
  v16[0] = v11;
  v16[1] = 0;
  result = llvm::Attributor::getAssumedConstant(v4, (const llvm::IRPosition *)v16, v5, &v15);
  if (result)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (v14)
    return (llvm::UndefValue *)v3;
  return result;
}

uint64_t sub_1C56B9200(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  llvm::AbstractAttribute *v23;
  int v24;
  uint64_t v25;
  llvm::AbstractAttribute *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t (*v29)(_QWORD, _QWORD);
  llvm::OptimizationRemarkEmitter *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  void **v37;
  char *v38;
  unint64_t v39;
  void **v40;
  char *v41;
  unint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t (**v51)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v52;
  char v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  char v59;
  char v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[260];
  int v64;
  uint64_t v65;
  _OWORD v66[5];
  void *v67;
  unsigned int v68;
  _QWORD v69[35];

  v69[34] = *MEMORY[0x1E0C80C00];
  v3 = a2[3];
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 != 60)
  {
    if (v4 == 61)
    {
      if (*(_QWORD *)(v3 - 64) == *a2)
LABEL_4:
        **(_BYTE **)a1 = 0;
    }
    else
    {
      if ((v4 - 33) > 0x33 || ((1 << (v4 - 33)) & 0x8000000000041) == 0)
      {
        v16 = v4 - 62;
        if (v16 <= 0x17 && ((1 << v16) & 0xA08001) != 0)
        {
          *a3 = 1;
          return 1;
        }
        goto LABEL_4;
      }
      v8 = *(_QWORD *)(a1 + 8);
      v45 = a2[3];
      v9 = *(_DWORD *)(v3 + 20);
      v10 = v3 - 32 * (v9 & 0x7FFFFFF);
      if (v10 <= (unint64_t)a2)
      {
        if (v4 == 84)
          v11 = 0;
        else
          v11 = v4 == 39 ? (*(_DWORD *)(v3 + 80) + 1) : 2;
        if (v9 < 0 && (v44 = *(_QWORD *)(v10 - 8), (v44 & 0xFFFFFFFF0) != 0))
          v12 = (*(_DWORD *)(v10 - 12) - *(_DWORD *)(v10 - v44));
        else
          v12 = 0;
        if (v3 - 32 * v11 - 32 * v12 - 32 > (unint64_t)a2
          && !llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v3))
        {
          *(_QWORD *)&v66[0] = 0;
          if (sub_1C6144BDC(*(_QWORD *)(v8 + 96), *(_DWORD *)(v8 + 112), v3, v66))
          {
            v13 = *(_QWORD *)&v66[0];
            v14 = *(_QWORD *)(v8 + 96);
            v15 = *(unsigned int *)(v8 + 112);
          }
          else
          {
            v14 = *(_QWORD *)(v8 + 96);
            v15 = *(unsigned int *)(v8 + 112);
            v13 = v14 + 16 * v15;
          }
          if (v13 != v14 + 16 * v15)
          {
            sub_1C6290E10(*(_QWORD *)(a1 + 16) + 24, &v45);
            return 1;
          }
          v19 = *(_DWORD *)(v3 + 20);
          v20 = v3 - 32 * (v19 & 0x7FFFFFF);
          v21 = (unint64_t)a2 - v20;
          if ((v19 & 0x40000000) != 0)
            v20 = *(_QWORD *)(v3 - 8);
          v22 = (v21 >> 5);
          v23 = sub_1C5689124(*(_QWORD *)(a1 + 24), (v20 + 32 * v22) | 3, 0, v8, 1, 0, 1);
          v24 = *(_DWORD *)(v3 + 20);
          v25 = (v24 & 0x40000000) != 0 ? *(_QWORD *)(v3 - 8) : v3 - 32 * (v24 & 0x7FFFFFF);
          v26 = sub_1C568658C(*(_QWORD *)(a1 + 24), (v25 + 32 * v22) | 3, 0, v8, 1, 0, 1);
          v27 = *(_QWORD *)(a1 + 16);
          if ((~*((unsigned __int16 *)v23 + 21) & 7) != 0 || !*((_BYTE *)v26 + 41) && *(_DWORD *)(v27 + 8) != 91)
          {
            *(_BYTE *)(v27 + 16) |= *((_BYTE *)v26 + 41) == 0;
            if (**(_BYTE **)a1)
            {
              if (*(_DWORD *)(v27 + 8) == 91)
              {
                v28 = *(_QWORD **)(a1 + 24);
                v29 = (uint64_t (*)(_QWORD, _QWORD))v28[687];
                if (v29)
                {
                  v30 = (llvm::OptimizationRemarkEmitter *)v29(v28[688], *(_QWORD *)(*(_QWORD *)(v3 + 40) + 56));
                  v31 = ****(_QWORD ****)v30;
                  if (*(_QWORD *)(v31 + 128)
                    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v31 + 72) + 48))(*(_QWORD *)(v31 + 72)))
                  {
                    v32 = v28[689];
                    v33 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 56);
                    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v66, (const llvm::DebugLoc *)(v3 + 48));
                    v34 = *(_QWORD *)(v3 + 40);
                    v52 = 10;
                    v53 = 2;
                    v55 = v66[0];
                    v54 = v33;
                    v56 = v32;
                    v57 = "OMP113";
                    v58 = 6;
                    v59 = 0;
                    v60 = 0;
                    v61 = v63;
                    v62 = 0x400000000;
                    v63[256] = 0;
                    v64 = -1;
                    v65 = v34;
                    v51 = &off_1E814E538;
                    *(_QWORD *)&v66[0] = "Could not move globalized variable to the stack. Variable is potentially captur"
                    *((_QWORD *)&v66[0] + 1) = 149;
                    sub_1C53B17B4((uint64_t)&v61, (const void **)v66);
                    sub_1C61998EC((uint64_t)v66, (uint64_t)&v51);
                    *(_QWORD *)&v66[0] = &off_1E814E538;
                    v46 = " [";
                    v47 = 2;
                    sub_1C53B17B4((uint64_t)&v67, (const void **)&v46);
                    v46 = "OMP113";
                    v47 = 6;
                    sub_1C53B17B4((uint64_t)&v67, (const void **)&v46);
                    v46 = "]";
                    v47 = 1;
                    sub_1C53B17B4((uint64_t)&v67, (const void **)&v46);
                    sub_1C61998EC((uint64_t)&v46, (uint64_t)v66);
                    v46 = (const char *)&off_1E814E538;
                    *(_QWORD *)&v66[0] = &off_1E814E790;
                    v35 = (char *)v67;
                    if (v68)
                    {
                      v36 = (unint64_t)v68 << 6;
                      do
                      {
                        v37 = (void **)&v35[v36];
                        if (v35[v36 - 17] < 0)
                          operator delete(*(v37 - 5));
                        if (*((char *)v37 - 41) < 0)
                          operator delete(*(v37 - 8));
                        v36 -= 64;
                      }
                      while (v36);
                      v35 = (char *)v67;
                    }
                    if (v35 != (char *)v69)
                      free(v35);
                    v51 = &off_1E814E790;
                    v38 = (char *)v61;
                    if ((_DWORD)v62)
                    {
                      v39 = (unint64_t)v62 << 6;
                      do
                      {
                        v40 = (void **)&v38[v39];
                        if (v38[v39 - 17] < 0)
                          operator delete(*(v40 - 5));
                        if (*((char *)v40 - 41) < 0)
                          operator delete(*(v40 - 8));
                        v39 -= 64;
                      }
                      while (v39);
                      v38 = (char *)v61;
                    }
                    if (v38 != v63)
                      free(v38);
                    llvm::OptimizationRemarkEmitter::emit(v30, (llvm::DiagnosticInfoOptimizationBase *)&v46);
                    v46 = (const char *)&off_1E814E790;
                    v41 = (char *)v48;
                    if (v49)
                    {
                      v42 = (unint64_t)v49 << 6;
                      do
                      {
                        v43 = (void **)&v41[v42];
                        if (v41[v42 - 17] < 0)
                          operator delete(*(v43 - 5));
                        if (*((char *)v43 - 41) < 0)
                          operator delete(*(v43 - 8));
                        v42 -= 64;
                      }
                      while (v42);
                      v41 = (char *)v48;
                    }
                    if (v41 != (char *)&v50)
                      free(v41);
                  }
                }
              }
            }
            goto LABEL_4;
          }
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1C56B9744(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 >= 2)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (a2 > 1)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 = v6 | 1;
    }
    sub_1C62910B4(a1, v7, &v7[v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = &v13;
  if ((*(_QWORD *)(a1 + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    v13 = *(_QWORD *)(a1 + 8);
    v9 = &v14;
  }
  if (a2 >= 2)
  {
    *(_DWORD *)a1 = v6 & 0xFFFFFFFE;
    v10 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v10;
  }
  return sub_1C62910B4(a1, &v13, v9);
}

uint64_t sub_1C56B989C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
    v3 = *(_QWORD *)a1 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v3 + 8) + 8);
}

_QWORD *sub_1C56B991C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B9950(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56B9994(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "reachable");
}

void sub_1C56B99B8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3288);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3288))
      __cxa_guard_release(&qword_1EF8F3288);
  }
}

uint64_t sub_1C56B99F8()
{
  return 1;
}

uint64_t *sub_1C56B9A00(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56B9A18(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56B9A60(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_1E8178B80;
  a1[4] = &unk_1E8178C10;
  v2 = (void *)a1[19];
  if (v2 != (void *)a1[18])
    free(v2);
  v3 = (void *)a1[7];
  if (v3 != (void *)a1[6])
    free(v3);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56B9AD0(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = off_1E8178B80;
  a1[4] = &unk_1E8178C10;
  v2 = (void *)a1[19];
  if (v2 != (void *)a1[18])
    free(v2);
  v3 = (void *)a1[7];
  if (v3 != (void *)a1[6])
    free(v3);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56B9B50@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *result;

  if (*(_BYTE *)(a1 + 41))
    v3 = "undefined-behavior";
  else
    v3 = "no-ub";
  if (*(_BYTE *)(a1 + 41))
    v4 = 18;
  else
    v4 = 5;
  a2[23] = v4;
  result = memcpy(a2, v3, v4);
  a2[v4] = 0;
  return result;
}

uint64_t sub_1C56B9BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *i;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  if (*(_DWORD *)(a1 + 68) == *(_DWORD *)(a1 + 72))
    return 1;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = 64;
  if (v4 == *(_QWORD *)(a1 + 48))
    v5 = 68;
  v6 = *(unsigned int *)(a1 + v5);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    for (i = *(uint64_t **)(a1 + 56); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v7 -= 8;
      if (!v7)
        return 0;
    }
  }
  else
  {
    i = *(uint64_t **)(a1 + 56);
  }
  v9 = (_QWORD *)(v4 + 8 * v6);
  if (i != v9)
  {
    v10 = *i;
LABEL_13:
    sub_1C62900AC(a2, v10);
    v11 = (unint64_t *)(i + 1);
    while (v11 != v9)
    {
      v12 = *v11++;
      v10 = v12;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = (uint64_t *)(v11 - 1);
        goto LABEL_13;
      }
    }
  }
  return 0;
}

void sub_1C56B9C60()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EF8F3290);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EF8F3290))
      __cxa_guard_release(&qword_1EF8F3290);
  }
}

BOOL sub_1C56B9CA0(_DWORD *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  llvm::IRPosition *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  int v16;
  unsigned int v17;
  unint64_t *v18;
  unint64_t v19;
  int v21;
  char v22;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = a1[17];
  v5 = a1[18];
  v6 = a1[41];
  v7 = a1[42];
  v26[0] = a1;
  v26[1] = a2;
  v25[0] = a1;
  v25[1] = a2;
  v24[0] = a1;
  v24[1] = a2;
  v23[0] = a1;
  v23[1] = a2;
  v27 = &v29;
  v28 = 4;
  v8 = (llvm::IRPosition *)(a1 + 4);
  v29 = xmmword_1C8660220;
  v9 = sub_1C5676C10((llvm::IRPosition *)(a1 + 4));
  llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C56BA150, (uint64_t)v26, v9, (uint64_t)a1, (int **)&v27, &v22, 1u, 0);
  LODWORD(v29) = 2;
  v27 = &v29;
  v28 = 1;
  v10 = sub_1C5676C10(v8);
  llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C56BA484, (uint64_t)v25, v10, (uint64_t)a1, (int **)&v27, &v22, 1u, 0);
  *(_QWORD *)&v29 = 0xB00000005;
  DWORD2(v29) = 56;
  v27 = &v29;
  v28 = 3;
  v11 = sub_1C5676C10(v8);
  llvm::Attributor::checkForAllInstructions(a2, sub_1C56BA550, (uint64_t)v24, v11, (uint64_t)a1, (int **)&v27, &v22, 0, 0);
  v12 = *((_QWORD *)a1 + 2) & 3;
  v13 = *((_QWORD *)a1 + 2) & 0xFFFFFFFFFFFFFFFCLL;
  v14 = v13;
  if (v12 == 3)
    v14 = *(_QWORD *)(v13 + 24);
  if (*(_BYTE *)(v14 + 16))
  {
    if (*(_BYTE *)(v14 + 16) == 21)
      v15 = (unint64_t *)(v14 + 24);
    else
      v15 = (unint64_t *)(*(_QWORD *)(v14 + 40) + 56);
    v14 = *v15;
  }
  v16 = v6 - v7;
  if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v14 + 24) + 16) + 8) != 7)
  {
    if (v12 == 3)
      v13 = *(_QWORD *)(v13 + 24);
    v17 = *(unsigned __int8 *)(v13 + 16);
    if (!*(_BYTE *)(v13 + 16))
      goto LABEL_18;
    if (v17 == 21)
    {
      v18 = (unint64_t *)(v13 + 24);
    }
    else
    {
      if (v17 < 0x1C)
      {
        v13 = 0;
        goto LABEL_18;
      }
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 40) + 56);
    }
    v13 = *v18;
LABEL_18:
    v27 = (__int128 *)(v13 | 1);
    v28 = 0;
    if ((llvm::Attributor::isAssumedDead(a2, (uint64_t)&v27, (uint64_t)a1, 0, &v22, 0, 1) & 1) == 0
      && *((_BYTE *)sub_1C56878EC(a2, (uint64_t)v27, v28, (uint64_t)a1, 2, 0, 1) + 40))
    {
      v21 = 1;
      *(_QWORD *)&v29 = &v21;
      *((_QWORD *)&v29 + 1) = 1;
      v19 = sub_1C5676C10(v8);
      llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C56BA80C, (uint64_t)v23, v19, (uint64_t)a1, (int **)&v29, &v22, 1u, 0);
    }
  }
  return v16 == a1[41] - a1[42] && v4 - v5 == a1[17] - a1[18];
}

BOOL sub_1C56B9F7C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  result = 0;
  v4 = *(unsigned __int8 *)(a2 + 16) - 30;
  if (v4 <= 0x23)
  {
    if (((1 << v4) & 0xCC0000000) == 0)
    {
      if (*(_BYTE *)(a2 + 16) != 30)
        return result;
      if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 1)
        return 0;
    }
    v5 = sub_1C477672C(a1 + 144, a2);
    v6 = *(_QWORD *)(a1 + 152);
    v7 = 160;
    if (v6 == *(_QWORD *)(a1 + 144))
      v7 = 164;
    return v5 == (_QWORD *)(v6 + 8 * *(unsigned int *)(a1 + v7));
  }
  return result;
}

BOOL sub_1C56BA00C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1C477672C(a1 + 48, a2);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = 64;
  if (v4 == *(_QWORD *)(a1 + 48))
    v5 = 68;
  return v3 != (_QWORD *)(v4 + 8 * *(unsigned int *)(a1 + v5));
}

uint64_t *sub_1C56BA054(_QWORD *a1)
{
  void *v2;
  void *v3;

  *(a1 - 4) = off_1E8178B80;
  *a1 = &unk_1E8178C10;
  v2 = (void *)a1[15];
  if (v2 != (void *)a1[14])
    free(v2);
  v3 = (void *)a1[3];
  if (v3 != (void *)a1[2])
    free(v3);
  *(a1 - 4) = &unk_1E8172998;
  return sub_1C6286C70(a1 - 3);
}

void sub_1C56BA0BC(_QWORD *a1)
{
  void *v2;
  void *v3;

  *(a1 - 4) = off_1E8178B80;
  *a1 = &unk_1E8178C10;
  v2 = (void *)a1[15];
  if (v2 != (void *)a1[14])
    free(v2);
  v3 = (void *)a1[3];
  if (v3 != (void *)a1[2])
    free(v3);
  *(a1 - 4) = &unk_1E8172998;
  sub_1C6286C70(a1 - 3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56BA150(uint64_t a1, llvm::Instruction *this)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::SmallPtrSetImplBase *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  int v22;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  int v31;

  v4 = *(_QWORD **)a1;
  if (llvm::Instruction::isVolatile(this))
  {
    v5 = *((unsigned __int8 *)this + 16) - 33;
    if (v5 <= 0x37)
    {
      if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x8000000000041) != 0)
      {
        v21 = *((_QWORD *)this + 8);
        if (!v21 || (*(_BYTE *)(v21 + 17) & 0x30) == 0)
        {
          v22 = *((_DWORD *)this + 5);
          if (v22 < 0)
          {
            v24 = (char *)this - 32 * (v22 & 0x7FFFFFF);
            v27 = *((_QWORD *)v24 - 1);
            v25 = v24 - 8;
            v26 = v27;
            if (v27)
            {
              v28 = -v26;
              do
              {
                v29 = *(_DWORD *)(*(_QWORD *)&v25[v28] + 8);
                v30 = v29 > 7;
                v31 = (1 << v29) & 0x83;
                if (v30 || v31 == 0)
                  return 1;
                v28 += 16;
              }
              while (v28);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
          {
            return 1;
          }
        }
      }
      else if (v5 == 27)
      {
        if ((*((_WORD *)this + 9) & 0x301) != 0)
          return 1;
      }
      else if (((1 << (*((_BYTE *)this + 16) - 33)) & 0x808001D0000010) != 0)
      {
        return 1;
      }
    }
  }
  v6 = sub_1C477672C((uint64_t)(v4 + 18), (uint64_t)this);
  v7 = v4[19];
  v8 = 160;
  if (v7 == v4[18])
    v8 = 164;
  if (v6 == (_QWORD *)(v7 + 8 * *(unsigned int *)((char *)v4 + v8)))
  {
    v9 = (llvm::SmallPtrSetImplBase *)(v4 + 6);
    v10 = sub_1C477672C((uint64_t)(v4 + 6), (uint64_t)this);
    v11 = v4[7];
    v12 = 64;
    if (v11 == v4[6])
      v12 = 68;
    if (v10 == (_QWORD *)(v11 + 8 * *(unsigned int *)((char *)v4 + v12)))
    {
      v13 = (_BYTE *)sub_1C56BA394((llvm::AbstractAttribute *)v4, *(llvm::Attributor **)(a1 + 8), *((_QWORD *)this + 4 * qword_1C86601D8[*((char *)this + 16) - 60]), (uint64_t)this);
      if (v14 && v13 != 0)
      {
        if (v13[16] == 19)
        {
          v16 = *(_QWORD *)(*((_QWORD *)this + 5) + 56);
          v17 = *(_DWORD *)(*(_QWORD *)v13 + 8);
          if ((v17 & 0xFE) == 0x12)
            v17 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v13 + 16) + 8);
          if (v16 && (v18 = *(_QWORD *)(v16 + 112)) != 0)
          {
            v19 = *(_BYTE *)(v18 + 17) & 1;
            if (v17 <= 0xFF && v19 == 0)
              goto LABEL_26;
          }
          else if (v17 < 0x100)
          {
            goto LABEL_26;
          }
        }
        v9 = (llvm::SmallPtrSetImplBase *)(v4 + 18);
LABEL_26:
        sub_1C4774094(v9, (uint64_t)this);
      }
    }
  }
  return 1;
}

unint64_t sub_1C56BA394(llvm::AbstractAttribute *a1, llvm::Attributor *this, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t AssumedSimplified;
  char v14;
  _QWORD v16[2];
  BOOL v17;

  v5 = a3;
  v17 = 0;
  v7 = *(unsigned __int8 *)(a3 + 16);
  if (v7 == 21)
    goto LABEL_9;
  if (v7 >= 0x1C)
  {
    v8 = v7 - 33;
    v9 = v8 > 0x33;
    v10 = (1 << v8) & 0x8000000000041;
    if (!v9 && v10 != 0)
    {
      v12 = a3 | 1;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (*(_BYTE *)(a3 + 16))
  {
LABEL_9:
    v12 = a3;
    goto LABEL_10;
  }
  v12 = a3 | 2;
LABEL_10:
  v16[0] = v12;
  v16[1] = 0;
  AssumedSimplified = llvm::Attributor::getAssumedSimplified(this, (const llvm::IRPosition *)v16, a1, &v17);
  if (v17)
    goto LABEL_11;
  if (v14)
  {
    v5 = AssumedSimplified;
    if (!AssumedSimplified)
      return v5;
LABEL_11:
    if (*(unsigned __int8 *)(v5 + 16) - 11 > 1)
      return v5;
  }
  sub_1C4774094((llvm::AbstractAttribute *)((char *)a1 + 48), a4);
  return 0;
}

uint64_t sub_1C56BA484(llvm::Attributor **a1, uint64_t a2)
{
  llvm::AbstractAttribute *v4;
  llvm::SmallPtrSetImplBase *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;

  v4 = *a1;
  v5 = (llvm::Attributor *)((char *)*a1 + 144);
  v6 = sub_1C477672C((uint64_t)v5, a2);
  v7 = *((_QWORD *)v4 + 19);
  v8 = 160;
  if (v7 == *((_QWORD *)v4 + 18))
    v8 = 164;
  if (v6 == (_QWORD *)(v7 + 8 * *(unsigned int *)((char *)v4 + v8)))
  {
    v9 = sub_1C477672C((uint64_t)v4 + 48, a2);
    v10 = *((_QWORD *)v4 + 7);
    v11 = 64;
    if (v10 == *((_QWORD *)v4 + 6))
      v11 = 68;
    if (v9 == (_QWORD *)(v10 + 8 * *(unsigned int *)((char *)v4 + v11)) && (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 1)
    {
      v12 = sub_1C56BA394(v4, a1[1], *(_QWORD *)(a2 - 96), a2);
      if (v13)
      {
        if (v12)
          sub_1C4774094(v5, a2);
      }
    }
  }
  return 1;
}

uint64_t sub_1C56BA550(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  llvm::Attributor *v30;
  unint64_t AssumedSimplified;
  char v32;
  int v33;
  uint64_t *v34;
  _QWORD v35[2];
  BOOL v36;

  v4 = *(_QWORD **)a1;
  v5 = sub_1C477672C(*(_QWORD *)a1 + 144, a2);
  v6 = v4[19];
  v7 = 160;
  if (v6 == v4[18])
    v7 = 164;
  if (v5 == (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)v4 + v7)))
  {
    v8 = sub_1C477672C((uint64_t)(v4 + 6), a2);
    v9 = v4[7];
    v10 = 64;
    if (v9 == v4[6])
      v10 = 68;
    if (v8 == (_QWORD *)(v9 + 8 * *(unsigned int *)((char *)v4 + v10)))
    {
      v12 = *(_QWORD *)(a2 - 32);
      if (v12)
      {
        if (!*(_BYTE *)(v12 + 16) && *(_QWORD *)(v12 + 24) == *(_QWORD *)(a2 + 72))
        {
          v13 = 0;
          v14 = 0;
          v34 = (uint64_t *)(a2 - 8);
          while (1)
          {
            v15 = *(unsigned __int8 *)(a2 + 16);
            if (v15 == 84)
            {
              v16 = 0;
            }
            else if (v15 == 39)
            {
              v16 = (*(_DWORD *)(a2 + 80) + 1);
            }
            else
            {
              v16 = 2;
            }
            v17 = *(_DWORD *)(a2 + 20);
            if (v17 < 0 && (v34[-4 * (v17 & 0x7FFFFFF)] & 0xFFFFFFFF0) != 0)
            {
              v19 = -(uint64_t)(v17 & 0x7FFFFFF);
              v18 = *(_DWORD *)(a2 - 32 * (v17 & 0x7FFFFFF) - 12)
                  - *(_DWORD *)(a2 - 32 * (v17 & 0x7FFFFFF) - *(_QWORD *)(a2 - 32 * (v17 & 0x7FFFFFF) - 8));
            }
            else
            {
              v18 = 0;
              v19 = -(uint64_t)(v17 & 0x7FFFFFF);
            }
            v20 = a2 - 32 - 32 * v16 + 32 * -v18;
            v21 = a2 + 32 * v19;
            if (v14 >= ((unint64_t)(v20 - v21) >> 5) || *(_QWORD *)(v12 + 96) <= v14)
              return 1;
            v22 = *(_QWORD *)(a2 + 32 * v19 + v13);
            if (v22)
            {
              if ((v17 & 0x40000000) != 0)
                v21 = *v34;
              v23 = (v13 + v21) | 3;
              if (*((_BYTE *)sub_1C56878EC(*(_QWORD *)(a1 + 8), v23, 0, (uint64_t)v4, 2, 0, 1) + 40))
                break;
            }
LABEL_40:
            ++v14;
            v13 += 32;
          }
          v36 = 0;
          v24 = *(unsigned __int8 *)(v22 + 16);
          if (v24 != 21)
          {
            if (v24 < 0x1C)
            {
              if (!*(_BYTE *)(v22 + 16))
              {
                v29 = v22 | 2;
LABEL_31:
                v30 = *(llvm::Attributor **)(a1 + 8);
                v35[0] = v29;
                v35[1] = 0;
                AssumedSimplified = llvm::Attributor::getAssumedSimplified(v30, (const llvm::IRPosition *)v35, (const llvm::AbstractAttribute *)v4, &v36);
                if (!v36)
                {
                  if (v32 && !AssumedSimplified)
                    return 1;
                  if (!v32
                    || (v33 = *(unsigned __int8 *)(AssumedSimplified + 16), (v33 - 11) < 2)
                    || v33 == 19
                    && *(_BYTE *)(*(_QWORD *)v22 + 8) == 15
                    && *((_BYTE *)sub_1C568829C(*(_QWORD *)(a1 + 8), v23, 0, (uint64_t)v4, 2, 0, 1) + 40))
                  {
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)(v4 + 6), a2);
                  }
                }
                goto LABEL_40;
              }
            }
            else
            {
              v25 = v24 - 33;
              v26 = v25 > 0x33;
              v27 = (1 << v25) & 0x8000000000041;
              if (!v26 && v27 != 0)
              {
                v29 = v22 | 1;
                goto LABEL_31;
              }
            }
          }
          v29 = v22;
          goto LABEL_31;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1C56BA80C(llvm::AbstractAttribute **a1, uint64_t a2)
{
  llvm::AbstractAttribute *v4;
  unint64_t v5;
  char v6;
  BOOL v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t *v10;

  v4 = *a1;
  v5 = sub_1C56BA394(*a1, a1[1], *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), a2);
  if (v6)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7 || *(_BYTE *)(v5 + 16) != 19)
    return 1;
  v8 = *((_QWORD *)v4 + 2) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*((_DWORD *)v4 + 4) & 3) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (*(_BYTE *)(v8 + 16))
  {
    if (v9 == 21)
    {
      v10 = (unint64_t *)(v8 + 24);
LABEL_13:
      v8 = *v10;
      goto LABEL_15;
    }
    if (v9 >= 0x1C)
    {
      v10 = (unint64_t *)(*(_QWORD *)(v8 + 40) + 56);
      goto LABEL_13;
    }
    v8 = 0;
  }
LABEL_15:
  if (*((_BYTE *)sub_1C568829C((uint64_t)a1[1], v8 | 1, 0, (uint64_t)v4, 2, 0, 1) + 40))
    sub_1C4774094((llvm::AbstractAttribute *)((char *)v4 + 48), a2);
  return 1;
}

_QWORD *sub_1C56BA8F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *a1 = &off_1E8178C70;
  a1[4] = &unk_1E8178D10;
  v2 = a1[22];
  if (v2)
  {
    v3 = a1[23];
    v4 = (void *)a1[22];
    if (v3 != v2)
    {
      do
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v3 - 32), 8);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v3 - 56), 8);
        v3 -= 64;
      }
      while (v3 != v2);
      v4 = (void *)a1[22];
    }
    a1[23] = v2;
    operator delete(v4);
  }
  MEMORY[0x1CAA32FB4](a1[19], 8);
  v5 = a1[16];
  if (v5)
  {
    v6 = a1[17];
    v7 = (void *)a1[16];
    if (v6 != v5)
    {
      do
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v6 - 32), 8);
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v6 - 56), 8);
        v6 -= 64;
      }
      while (v6 != v5);
      v7 = (void *)a1[16];
    }
    a1[17] = v5;
    operator delete(v7);
  }
  MEMORY[0x1CAA32FB4](a1[13], 8);
  MEMORY[0x1CAA32FB4](a1[9], 8);
  MEMORY[0x1CAA32FB4](a1[6], 8);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56BAA10(_QWORD *a1)
{
  sub_1C56BA8F4(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56BAA34(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v3;
  std::string *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string __p;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  v3 = (*(_DWORD *)(a1 + 80) + *(_DWORD *)(a1 + 56));
  std::to_string(&v14, *(_DWORD *)(a1 + 56));
  v4 = std::string::insert(&v14, 0, "FunctionReachability [");
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v15, ",");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v17, "]");
  *a2 = *v12;
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

uint64_t sub_1C56BAB94(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  uint64_t *v6;
  int32x2_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  llvm::AbstractAttribute *v12;
  int32x2_t *v13;
  int32x2_t *v14;
  llvm::AbstractAttribute *v15;
  int32x2_t v16;
  unint64_t v17;
  int32x2_t *v18;
  unsigned int v19;
  char v21;
  _QWORD v22[5];
  int *v23[2];
  void *v24;
  uint64_t v25;
  _BYTE v26[48];
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  v24 = sub_1C5692210(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1, 0);
  v5 = sub_1C56BB590((int32x2_t *)(a1 + 48), a2, a1, &v24, 1);
  v7 = *(int32x2_t **)(a1 + 128);
  v6 = *(uint64_t **)(a1 + 136);
  if (v7 != (int32x2_t *)v6)
  {
    v8 = *(uint64_t **)(a1 + 128);
    do
    {
      v9 = *v8;
      v8 += 8;
      v24 = sub_1C5692210(a2, v9, 0, a1, 0);
      v10 = sub_1C56BB590(v7 + 1, a2, a1, &v24, 1);
      if ((_DWORD)v5)
        v5 = v10;
      else
        v5 = 0;
      v7 = (int32x2_t *)v8;
    }
    while (v8 != v6);
  }
  if (*(_QWORD *)(a1 + 176) != *(_QWORD *)(a1 + 184))
  {
    v11 = sub_1C5676C10(v4);
    v12 = sub_1C56814E4(a2, v11, 0, a1, 0, 0, 1);
    v13 = *(int32x2_t **)(a1 + 176);
    v14 = *(int32x2_t **)(a1 + 184);
    if (v13 != v14)
    {
      v15 = v12;
      do
      {
        v23[1] = (int *)3;
        v24 = v26;
        v25 = 0x600000000;
        v16 = *v13;
        v22[0] = v15;
        v22[1] = a2;
        v22[2] = v16;
        v22[3] = a1;
        v22[4] = &v24;
        v27 = 0xB00000005;
        v28 = 56;
        v23[0] = (int *)&v27;
        v17 = sub_1C5676C10(v4);
        if ((llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C56BB95C, (uint64_t)v22, v17, a1, v23, &v21, 1u, 0) & 1) == 0)v13[7].i8[0] = 1;
        v18 = v13 + 1;
        v19 = sub_1C56BB590(v18, a2, a1, v24, v25);
        if ((_DWORD)v5)
          v5 = v19;
        else
          v5 = 0;
        if (v24 != v26)
          free(v24);
        v13 = v18 + 7;
      }
      while (v13 != v14);
    }
  }
  return v5;
}

uint64_t sub_1C56BADC4(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32))
    return 1;
  v7[0] = sub_1C5692210(a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1, 0);
  return sub_1C56BBA28((int32x2_t *)(a1 + 48), a2, a1, v7, 1, a3);
}

uint64_t sub_1C56BAE74(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  llvm::AbstractAttribute *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  _QWORD v30[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(_QWORD *))(a1[4] + 16))(a1 + 4))
    return 1;
  v9 = sub_1C5692210(a2, a3, 0, (uint64_t)a1, 0);
  v28 = a3;
  v29 = 0;
  sub_1C6144658((uint64_t)v30, (uint64_t)(a1 + 13), &v28, &v29);
  v10 = v30[0];
  if (v31)
  {
    v12 = (uint64_t *)a1[17];
    v11 = a1[18];
    if ((unint64_t)v12 >= v11)
    {
      v16 = (uint64_t *)a1[16];
      v17 = ((char *)v12 - (char *)v16) >> 6;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 58)
        abort();
      v19 = v11 - (_QWORD)v16;
      if (v19 >> 5 > v18)
        v18 = v19 >> 5;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFC0)
        v20 = 0x3FFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20 >> 58)
        sub_1C4764EE4();
      v21 = (char *)operator new(v20 << 6);
      v22 = &v21[64 * v17];
      v22[56] = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = 0;
      *(_QWORD *)v22 = a3;
      v23 = &v21[64 * v20];
      v13 = v22 + 64;
      *((_DWORD *)v22 + 6) = 0;
      *((_QWORD *)v22 + 4) = 0;
      *((_QWORD *)v22 + 5) = 0;
      *((_DWORD *)v22 + 12) = 0;
      if (v12 == v16)
      {
        a1[16] = v22;
        a1[17] = v13;
        a1[18] = v23;
      }
      else
      {
        v24 = 0;
        do
        {
          v25 = &v12[v24];
          v26 = &v22[v24 * 8];
          *((_QWORD *)v26 - 8) = v12[v24 - 8];
          *((_QWORD *)v26 - 7) = v12[v24 - 7];
          *(v25 - 7) = 0;
          *((_DWORD *)v26 - 12) = v12[v24 - 6];
          *((_DWORD *)v25 - 12) = 0;
          *((_DWORD *)v26 - 11) = *((_DWORD *)&v12[v24 - 5] - 1);
          *((_DWORD *)v25 - 11) = 0;
          *((_DWORD *)v26 - 10) = v12[v24 - 5];
          *((_DWORD *)v25 - 10) = 0;
          *((_QWORD *)v26 - 4) = v12[v24 - 4];
          *(v25 - 4) = 0;
          *((_DWORD *)v26 - 6) = v12[v24 - 3];
          *((_DWORD *)v25 - 6) = 0;
          *((_DWORD *)v26 - 5) = *((_DWORD *)&v12[v24 - 2] - 1);
          *((_DWORD *)v25 - 5) = 0;
          *((_DWORD *)v26 - 4) = v12[v24 - 2];
          *((_DWORD *)v25 - 4) = 0;
          *(v26 - 8) = v12[v24 - 1];
          v24 -= 8;
        }
        while (&v12[v24] != v16);
        v12 = (uint64_t *)a1[16];
        v27 = (uint64_t *)a1[17];
        a1[16] = &v22[v24 * 8];
        a1[17] = v13;
        for (a1[18] = v23; v27 != v12; v27 -= 8)
        {
          MEMORY[0x1CAA32FB4](*(v27 - 4), 8);
          MEMORY[0x1CAA32FB4](*(v27 - 7), 8);
        }
      }
      if (v12)
        operator delete(v12);
    }
    else
    {
      *((_BYTE *)v12 + 56) = 0;
      v13 = v12 + 8;
      v12[1] = 0;
      v12[2] = 0;
      *v12 = a3;
      *((_DWORD *)v12 + 6) = 0;
      v12[4] = 0;
      v12[5] = 0;
      *((_DWORD *)v12 + 12) = 0;
    }
    a1[17] = v13;
    MEMORY[0x1CAA32FB4](0, 8);
    MEMORY[0x1CAA32FB4](0, 8);
    MEMORY[0x1CAA32FB4](0, 8);
    MEMORY[0x1CAA32FB4](0, 8);
    v15 = a1[16];
    v14 = ((unint64_t)(a1[17] - v15) >> 6) - 1;
    *(_DWORD *)(v10 + 8) = v14;
  }
  else
  {
    v14 = *(_DWORD *)(v30[0] + 8);
    v15 = a1[16];
  }
  v30[0] = v9;
  return sub_1C56BBA28((int32x2_t *)(v15 + ((unint64_t)v14 << 6) + 8), a2, (uint64_t)a1, v30, 1, a4);
}

uint64_t sub_1C56BB158(_QWORD *a1, uint64_t a2, int *a3, void *a4, int a5)
{
  uint64_t isPotentiallyReachable;
  void (*v12)(void);
  unint64_t v13;
  unint64_t v14;
  char i;
  uint64_t v16;
  unint64_t v17;
  int **v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  int **v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int **v31;
  char *v32;
  int **v33;
  char v34;
  char v35;
  _QWORD v36[2];
  int *v37;
  _QWORD *v38;
  void **v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[48];
  _QWORD v45[3];
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(_QWORD *))(a1[4] + 16))(a1 + 4))
    return 1;
  if (a5)
  {
    v46 = 0;
    isPotentiallyReachable = llvm::AA::isPotentiallyReachable(a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a1, v45);
    if (v46 == v45)
    {
      v12 = *(void (**)(void))(v45[0] + 32);
    }
    else
    {
      if (!v46)
        return isPotentiallyReachable;
      v12 = *(void (**)(void))(*v46 + 40);
    }
    v12();
    return isPotentiallyReachable;
  }
  v13 = sub_1C5676C10((llvm::IRPosition *)(a1 + 2));
  v43 = 0x600000000;
  v36[0] = sub_1C56814E4(a2, v13, 0, (uint64_t)a1, 0, 0, 1);
  v36[1] = a2;
  v37 = a3;
  v38 = a1;
  v39 = &v42;
  v47 = 0xB00000005;
  v48 = 56;
  v40 = &v47;
  v41 = 3;
  v42 = v44;
  v14 = sub_1C5676C10((llvm::IRPosition *)(a1 + 2));
  i = llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C56BB95C, (uint64_t)v36, v14, (uint64_t)a1, (int **)&v40, &v35, 1u, 0);
  v40 = (uint64_t *)a3;
  LODWORD(v41) = 0;
  sub_1C62912CC((uint64_t)(a1 + 19), (uint64_t *)&v40, &v41, (uint64_t)v36);
  v16 = v36[0];
  if ((_BYTE)v37)
  {
    v18 = (int **)a1[23];
    v17 = a1[24];
    if ((unint64_t)v18 >= v17)
    {
      v34 = i;
      v22 = (int **)a1[22];
      v23 = ((char *)v18 - (char *)v22) >> 6;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 58)
        abort();
      v25 = v17 - (_QWORD)v22;
      if (v25 >> 5 > v24)
        v24 = v25 >> 5;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFC0)
        v26 = 0x3FFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26 >> 58)
        sub_1C4764EE4();
      v27 = (char *)operator new(v26 << 6);
      v28 = &v27[64 * v23];
      v28[56] = 0;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = 0;
      *(_QWORD *)v28 = a3;
      v29 = &v27[64 * v26];
      v19 = v28 + 64;
      *((_DWORD *)v28 + 6) = 0;
      *((_QWORD *)v28 + 4) = 0;
      *((_QWORD *)v28 + 5) = 0;
      *((_DWORD *)v28 + 12) = 0;
      if (v18 == v22)
      {
        a1[22] = v28;
        a1[23] = v19;
        a1[24] = v29;
        i = v34;
      }
      else
      {
        v30 = 0;
        do
        {
          v31 = &v18[v30];
          v32 = &v28[v30 * 8];
          *((_QWORD *)v32 - 8) = v18[v30 - 8];
          *((_QWORD *)v32 - 7) = v18[v30 - 7];
          *(v31 - 7) = 0;
          *((_DWORD *)v32 - 12) = v18[v30 - 6];
          *((_DWORD *)v31 - 12) = 0;
          *((_DWORD *)v32 - 11) = *((_DWORD *)&v18[v30 - 5] - 1);
          *((_DWORD *)v31 - 11) = 0;
          *((_DWORD *)v32 - 10) = v18[v30 - 5];
          *((_DWORD *)v31 - 10) = 0;
          *((_QWORD *)v32 - 4) = v18[v30 - 4];
          *(v31 - 4) = 0;
          *((_DWORD *)v32 - 6) = v18[v30 - 3];
          *((_DWORD *)v31 - 6) = 0;
          *((_DWORD *)v32 - 5) = *((_DWORD *)&v18[v30 - 2] - 1);
          *((_DWORD *)v31 - 5) = 0;
          *((_DWORD *)v32 - 4) = v18[v30 - 2];
          *((_DWORD *)v31 - 4) = 0;
          *(v32 - 8) = (char)v18[v30 - 1];
          v30 -= 8;
        }
        while (&v18[v30] != v22);
        v18 = (int **)a1[22];
        v33 = (int **)a1[23];
        a1[22] = &v28[v30 * 8];
        a1[23] = v19;
        a1[24] = v29;
        for (i = v34; v33 != v18; v33 -= 8)
        {
          MEMORY[0x1CAA32FB4](*(v33 - 4), 8);
          MEMORY[0x1CAA32FB4](*(v33 - 7), 8);
        }
      }
      if (v18)
        operator delete(v18);
    }
    else
    {
      *((_BYTE *)v18 + 56) = 0;
      v19 = v18 + 8;
      v18[1] = 0;
      v18[2] = 0;
      *v18 = a3;
      *((_DWORD *)v18 + 6) = 0;
      v18[4] = 0;
      v18[5] = 0;
      *((_DWORD *)v18 + 12) = 0;
    }
    a1[23] = v19;
    MEMORY[0x1CAA32FB4](0, 8);
    MEMORY[0x1CAA32FB4](0, 8);
    MEMORY[0x1CAA32FB4](0, 8);
    MEMORY[0x1CAA32FB4](0, 8);
    v21 = a1[22];
    v20 = ((unint64_t)(a1[23] - v21) >> 6) - 1;
    *(_DWORD *)(v16 + 8) = v20;
  }
  else
  {
    v20 = *(_DWORD *)(v36[0] + 8);
    v21 = a1[22];
  }
  if ((i & 1) == 0)
    *(_BYTE *)(v21 + ((unint64_t)v20 << 6) + 56) = 1;
  isPotentiallyReachable = sub_1C56BBA28((int32x2_t *)(v21 + ((unint64_t)v20 << 6) + 8), a2, (uint64_t)a1, v42, v43, a4);
  if (v42 != v44)
    free(v42);
  return isPotentiallyReachable;
}

uint64_t sub_1C56BB558(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 96);
}

_QWORD *sub_1C56BB560(uint64_t a1)
{
  return sub_1C56BA8F4((_QWORD *)(a1 - 32));
}

void sub_1C56BB568(uint64_t a1)
{
  sub_1C56BA8F4((_QWORD *)(a1 - 32));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56BB590(int32x2_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  int32x2_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **v18;
  _QWORD *v19;
  uint64_t v20;

  if (a5)
  {
    v10 = 8 * a5;
    v11 = a4;
    while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v11 + 120))(*v11))
    {
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_5;
    }
    v17 = a1[6].u8[0];
    a1[6].i8[0] = 1;
  }
  else
  {
LABEL_5:
    v12 = a1[3];
    v13 = a1[5].u32[0];
    v14 = (void **)(*(_QWORD *)&v12 + 8 * v13);
    if (a1[4].i32[0])
    {
      if ((_DWORD)v13)
      {
        v15 = 8 * v13;
        v16 = (void **)a1[3];
        while (((unint64_t)*v16 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v16;
          v15 -= 8;
          if (!v15)
            goto LABEL_10;
        }
      }
      else
      {
        v16 = (void **)a1[3];
      }
    }
    else
    {
LABEL_10:
      v16 = (void **)(*(_QWORD *)&v12 + 8 * v13);
    }
    v18 = (void **)(*(_QWORD *)&v12 + 8 * v13);
    v17 = 1;
    if (v16 != v18)
    {
      do
      {
        v19 = v14;
        if (v16 + 1 != v14)
        {
          v19 = v16 + 1;
          while ((*v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            if (++v19 == v14)
            {
              v19 = v14;
              break;
            }
          }
        }
        v20 = (uint64_t)*v16;
        if (sub_1C56BB6E4(a2, a3, a4, a5, *v16))
        {
          sub_1C56BB8E8(a1, v20);
          v17 = 0;
        }
        v16 = (void **)v19;
      }
      while (v19 != v18);
    }
  }
  return v17;
}

uint64_t sub_1C56BB6E4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, void *a5)
{
  _QWORD *v6;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::AbstractAttribute *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[9];

  v27[8] = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v6 = a3;
    v9 = 8 * a4;
    v10 = a3;
    v11 = &a3[a4];
    do
    {
      v12 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 112))(*v10);
      v24 = 0;
      v25 = a5;
      if ((sub_1C614F7B0(v12, &v25, &v24) & 1) != 0)
        return 1;
      ++v10;
      v9 -= 8;
    }
    while (v9);
    v25 = v27;
    v26 = 0x800000000;
    while (2)
    {
      v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 112))(*v6);
      v14 = *(uint64_t **)(v13 + 24);
      v15 = *(uint64_t **)(v13 + 32);
      while (v14 != v15)
      {
        v16 = *(_QWORD *)(*v14 + 112);
        if (!v16 || (*(_BYTE *)(v16 + 14) & 0x20) == 0)
        {
          v17 = sub_1C5681BD0(a1, *v14, 0, a2, 2, 0, 1);
          v18 = v26;
          if (v26 >= (unint64_t)HIDWORD(v26))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v26 + 1, 8);
            v18 = v26;
          }
          *((_QWORD *)v25 + v18) = v17;
          LODWORD(v26) = v26 + 1;
          if (((*(uint64_t (**)(llvm::AbstractAttribute *, uint64_t, void *))(*(_QWORD *)v17 + 112))(v17, a1, a5) & 1) != 0)
          {
            v22 = 1;
            goto LABEL_21;
          }
        }
        ++v14;
      }
      if (++v6 != v11)
        continue;
      break;
    }
    if ((_DWORD)v26)
    {
      v19 = (uint64_t *)v25;
      v20 = 8 * v26;
      do
      {
        v21 = *v19++;
        llvm::Attributor::recordDependence(a1, v21, a2, 0);
        v20 -= 8;
      }
      while (v20);
    }
    v22 = 0;
  }
  else
  {
    v22 = 0;
    v25 = v27;
    v26 = 0x800000000;
  }
LABEL_21:
  if (v25 != v27)
    free(v25);
  return v22;
}

int32x2_t sub_1C56BB8E8(int32x2_t *a1, uint64_t a2)
{
  int32x2_t result;
  uint64_t v5;
  _QWORD v6[3];

  v5 = a2;
  sub_1C6289210(a1, &v5, (uint64_t)v6);
  v5 = a2;
  v6[0] = 0;
  if (sub_1C4A06ED8((uint64_t)&a1[3], &v5, v6))
  {
    *(_QWORD *)v6[0] = -8192;
    result = vadd_s32(a1[4], (int32x2_t)0x1FFFFFFFFLL);
    a1[4] = result;
  }
  return result;
}

uint64_t sub_1C56BB95C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::AbstractAttribute *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 48))(*a1);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7)
    || sub_1C56819BC(*(_QWORD *)(v5 + 88), v4, a2))
  {
    v8 = sub_1C5692210(a1[1], a2, 0, v6, 0);
    v9 = a1[4];
    v10 = *(unsigned int *)(v9 + 8);
    if (v10 >= *(_DWORD *)(v9 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v9 + 16, v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(v9 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
    ++*(_DWORD *)(v9 + 8);
  }
  return 1;
}

uint64_t sub_1C56BBA28(int32x2_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, void *a6)
{
  uint64_t result;
  void *v13;
  uint64_t v14[3];

  if (a1[6].i8[0])
    return 1;
  v13 = 0;
  v14[0] = (uint64_t)a6;
  if ((sub_1C4A06ED8((uint64_t)a1, v14, &v13) & 1) != 0)
    return 1;
  v13 = 0;
  v14[0] = (uint64_t)a6;
  if ((sub_1C4A06ED8((uint64_t)&a1[3], v14, &v13) & 1) != 0)
    return 0;
  v14[0] = a3;
  sub_1C6284D9C(a2 + 5184, v14);
  v13 = a6;
  sub_1C6289210(&a1[3], &v13, (uint64_t)v14);
  result = sub_1C56BB6E4(a2, a3, a4, a5, a6);
  if ((_DWORD)result)
  {
    sub_1C56BB8E8(a1, (uint64_t)a6);
    return 1;
  }
  return result;
}

_QWORD *sub_1C56BBB14(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56BBB48(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56BBB8C(_BYTE *a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;

  a1[41] = a1[41] & 3 | a1[40];
  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  sub_1C56BC0B0(v4, v5, 0);
  return sub_1C628CA08((uint64_t)a1, a2);
}

uint64_t sub_1C56BBBF0@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  int v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(result + 41);
  if ((~v2 & 3) == 0)
  {
    a2[23] = 8;
    v3 = 0x656E6F6E64616572;
LABEL_7:
    *(_QWORD *)a2 = v3;
    a2[8] = 0;
    return result;
  }
  if ((v2 & 2) != 0)
  {
    a2[23] = 8;
    v3 = 0x796C6E6F64616572;
    goto LABEL_7;
  }
  if ((v2 & 1) != 0)
  {
    a2[23] = 9;
    strcpy(a2, "writeonly");
  }
  else
  {
    a2[23] = 14;
    strcpy(a2, "may-read/write");
  }
  return result;
}

uint64_t sub_1C56BBC94(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v4 = *(_QWORD *)(v4 + 24);
  if ((~*(unsigned __int8 *)(a1 + 41) & 3) == 0)
  {
    *(_QWORD *)(v4 + 112) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v4 + 112), **(uint64_t ***)v4, -1, 3);
    *(_QWORD *)(v4 + 112) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v4 + 112), **(uint64_t ***)v4, -1, 11);
    *(_QWORD *)(v4 + 112) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v4 + 112), **(uint64_t ***)v4, -1, 12);
  }
  return sub_1C56BBF4C(a1, a2);
}

void sub_1C56BBD44(uint64_t a1)
{
  int v1;
  unsigned __int8 v2;
  __guard *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v1 = *(unsigned __int8 *)(a1 + 41);
  if ((~v1 & 3) == 0)
  {
    v2 = atomic_load(byte_1ED809B40);
    if ((v2 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809B40;
    goto LABEL_11;
  }
  if ((v1 & 2) != 0)
  {
    v5 = atomic_load(byte_1ED809B48);
    if ((v5 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809B48;
    goto LABEL_11;
  }
  if ((v1 & 1) != 0)
  {
    v4 = atomic_load(byte_1ED809B50);
    if ((v4 & 1) == 0)
    {
      v3 = (__guard *)byte_1ED809B50;
LABEL_11:
      if (__cxa_guard_acquire(v3))
        __cxa_guard_release(v3);
    }
  }
}

BOOL sub_1C56BBDE0(uint64_t a1, uint64_t a2)
{
  int v3;
  _BOOL8 result;
  char v5;
  _QWORD v6[2];

  v3 = *(unsigned __int8 *)(a1 + 41);
  v6[0] = a2;
  v6[1] = a1;
  if ((llvm::Attributor::checkForAllReadWriteInstructions(a2, (unsigned int (*)(uint64_t, uint64_t))sub_1C56BC3D8, (uint64_t)v6, a1, &v5) & 1) != 0)return v3 == *(unsigned __int8 *)(a1 + 41);
  result = 0;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
  return result;
}

unint64_t sub_1C56BBE4C(unint64_t result, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unsigned int v8;

  v4 = *(unsigned __int8 *)(result + 41);
  if ((~v4 & 3) != 0)
  {
    if ((v4 & 2) != 0)
    {
      v5 = a2;
      v6 = 45;
    }
    else
    {
      if ((v4 & 1) == 0)
        return result;
      v5 = a2;
      v6 = 66;
    }
  }
  else
  {
    v5 = a2;
    v6 = 44;
  }
  result = llvm::Attribute::get(v5, v6, 0);
  v7 = result;
  v8 = *(_DWORD *)(a3 + 8);
  if (v8 >= *(_DWORD *)(a3 + 12))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v8 + 1, 8);
    v8 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v7;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t *sub_1C56BBEEC(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56BBF04(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56BBF4C(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  LODWORD(v12) = 44;
  v5 = 1;
  if (!llvm::IRPosition::hasAttr((llvm::IRPosition *)(a1 + 16), (int *)&v12, 1, 1, 0))
  {
    v12 = v14;
    v13 = 0x400000000;
    v6 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)v4 & 3) == 0)
      v6 = *(_QWORD *)(v6 + 24);
    (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 112))(a1, **(_QWORD **)v6, &v12);
    if ((_DWORD)v13)
    {
      v7 = (uint64_t *)v12;
      v8 = 8 * v13;
      while (1)
      {
        v9 = *v7;
        if (*v7)
          LODWORD(v9) = *(_DWORD *)(v9 + 12);
        v11 = v9;
        if (!llvm::IRPosition::hasAttr(v4, &v11, 1, 1, 0))
          break;
        ++v7;
        v8 -= 8;
        if (!v8)
          goto LABEL_10;
      }
      sub_1C5690138(v4, dword_1C8660198, 3);
      v5 = sub_1C628C768(a1, a2);
    }
    else
    {
LABEL_10:
      v5 = 1;
    }
    if (v12 != v14)
      free(v12);
  }
  return v5;
}

void sub_1C56BC0B0(llvm::IRPosition *a1, uint64_t a2, char a3)
{
  char *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  __int32 v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  v31 = v33;
  v32 = 0x200000000;
  llvm::IRPosition::getAttrs(a1, dword_1C8660198, 3, (uint64_t)&v31, a3, 0);
  if ((_DWORD)v32)
  {
    v5 = (char *)v31;
    v6 = *(unsigned __int8 *)(a2 + 9);
    v7 = 8 * v32;
    v8 = *(unsigned __int8 *)(a2 + 8);
    do
    {
      v9 = *(_DWORD *)(*(_QWORD *)v5 + 12);
      if (v9 == 44)
      {
        v10 = 3;
      }
      else if (v9 == 66)
      {
        v10 = 1;
      }
      else
      {
        v10 = 2;
      }
      v6 |= v10;
      *(_BYTE *)(a2 + 9) = v6;
      v8 |= v10;
      *(_BYTE *)(a2 + 8) = v8;
      v5 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = ~*(_DWORD *)a1;
  v12 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  if ((v11 & 3) == 0)
    v12 = *(_QWORD *)(v12 + 24);
  v13 = *(unsigned __int8 *)(v12 + 16);
  if (v12)
    v14 = v13 >= 0x1C;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_27;
  v15 = v13 - 33;
  if (v15 > 0x37)
    goto LABEL_20;
  if (((1 << (v13 - 33)) & 0x8000000000041) != 0)
  {
    v17 = *(_QWORD *)(v12 + 64);
    if (!v17 || (*(_BYTE *)(v17 + 20) & 4) == 0 && (*(_BYTE *)(v17 + 17) & 0x10) == 0)
    {
      v30 = 7;
      if (sub_1C53E4BBC(v12, &v30, 1uLL))
      {
        v20 = *(_QWORD *)(v12 - 32);
        if (!v20
          || *(_BYTE *)(v20 + 16)
          || *(_QWORD *)(v20 + 24) != *(_QWORD *)(v12 + 72)
          || *(_DWORD *)(v20 + 36) != 7)
        {
          goto LABEL_21;
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v12, 66) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction(v12, 44))
      {
        goto LABEL_21;
      }
    }
    goto LABEL_20;
  }
  if (((1 << (v13 - 33)) & 0x808001C8000010) != 0)
    goto LABEL_22;
  if (v15 != 28 || (*(_WORD *)(v12 + 18) & 0x301) == 0)
  {
LABEL_20:
    *(_BYTE *)(a2 + 9) |= 1u;
    *(_BYTE *)(a2 + 8) |= 1u;
  }
LABEL_21:
  v13 = *(unsigned __int8 *)(v12 + 16);
LABEL_22:
  v16 = v13 - 33;
  if (v16 > 0x37)
    goto LABEL_26;
  if (((1 << v16) & 0x8000000000041) == 0)
  {
    if (v16 == 27)
    {
      if ((*(_WORD *)(v12 + 18) & 0x301) != 0)
        goto LABEL_27;
    }
    else if (((1 << v16) & 0x808001D0000010) != 0)
    {
      goto LABEL_27;
    }
LABEL_26:
    *(_BYTE *)(a2 + 9) |= 2u;
    *(_BYTE *)(a2 + 8) |= 2u;
    goto LABEL_27;
  }
  v18 = *(_QWORD *)(v12 + 64);
  if (v18 && (*(_BYTE *)(v18 + 17) & 0x30) != 0)
    goto LABEL_26;
  v19 = *(_DWORD *)(v12 + 20);
  if ((v19 & 0x80000000) == 0
    || (v21 = v12 - 32 * (v19 & 0x7FFFFFF), v24 = *(_QWORD *)(v21 - 8), v22 = v21 - 8, (v23 = v24) == 0))
  {
LABEL_40:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v12, 45) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction(v12, 44))
    {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  v25 = -v23;
  while (1)
  {
    v26 = *(_DWORD *)(*(_QWORD *)(v22 + v25) + 8);
    v27 = v26 > 7;
    v28 = (1 << v26) & 0x83;
    if (v27 || v28 == 0)
      break;
    v25 += 16;
    if (!v25)
      goto LABEL_40;
  }
LABEL_27:
  if (v31 != v33)
    free(v31);
}

BOOL sub_1C56BC3D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::AbstractAttribute *v5;
  int v6;
  unsigned int v7;
  int v9;
  uint64_t v10;
  int v11;
  int hasFnAttrOnCalledFunction;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;

  v2 = a1[1];
  v3 = *(unsigned __int8 *)(a2 + 16) - 33;
  if (v3 > 0x37)
    goto LABEL_7;
  if (((1 << (*(_BYTE *)(a2 + 16) - 33)) & 0x8000000000041) == 0)
  {
    if (((1 << (*(_BYTE *)(a2 + 16) - 33)) & 0x808001C8000010) != 0)
      goto LABEL_11;
    if (v3 != 28)
    {
LABEL_7:
      v7 = *(unsigned __int8 *)(v2 + 41);
LABEL_8:
      v6 = *(unsigned __int8 *)(v2 + 40);
      return v7 != v6;
    }
    if ((*(_WORD *)(a2 + 18) & 0x301) != 0)
    {
LABEL_11:
      v9 = *(unsigned __int8 *)(v2 + 40);
      v7 = *(_BYTE *)(v2 + 41) & 0xFE | v9;
      *(_BYTE *)(v2 + 41) = *(_BYTE *)(v2 + 41) & 0xFE | v9;
      if (((1 << v3) & 0x8000000000041) != 0)
      {
        v10 = *(_QWORD *)(a2 + 64);
        if (v10 && (*(_BYTE *)(v10 + 17) & 0x30) != 0)
          goto LABEL_7;
        v11 = *(_DWORD *)(a2 + 20);
        if ((v11 & 0x80000000) == 0
          || (v13 = a2 - 32 * (v11 & 0x7FFFFFF), v16 = *(_QWORD *)(v13 - 8), v14 = v13 - 8, (v15 = v16) == 0))
        {
LABEL_19:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) != 0)
            goto LABEL_7;
          hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44);
          v7 = *(unsigned __int8 *)(v2 + 41);
          if (hasFnAttrOnCalledFunction)
            goto LABEL_8;
          goto LABEL_31;
        }
        v17 = -v15;
        while (1)
        {
          v18 = *(_DWORD *)(*(_QWORD *)(v14 + v17) + 8);
          v19 = v18 > 7;
          v20 = (1 << v18) & 0x83;
          if (v19 || v20 == 0)
            break;
          v17 += 16;
          if (!v17)
            goto LABEL_19;
        }
      }
      else if (((1 << v3) & 0x808001D0000010) == 0)
      {
        if (v3 != 27)
          goto LABEL_7;
        if ((*(_WORD *)(a2 + 18) & 0x301) == 0)
          goto LABEL_8;
LABEL_31:
        v6 = *(unsigned __int8 *)(v2 + 40);
        v7 = v6 | v7 & 0xFFFFFFFD;
        goto LABEL_4;
      }
    }
    v7 = *(unsigned __int8 *)(v2 + 41);
    goto LABEL_31;
  }
  v5 = sub_1C5680B34(*a1, a2, 0, v2, 0, 0, 1);
  v6 = *(unsigned __int8 *)(v2 + 40);
  v7 = (*(_BYTE *)(v2 + 41) & *((_BYTE *)v5 + 41)) | v6;
LABEL_4:
  *(_BYTE *)(v2 + 41) = v7;
  return v7 != v6;
}

_QWORD *sub_1C56BC5B0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56BC5E4(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56BC628(_BYTE *a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t result;

  a1[41] = a1[41] & 3 | a1[40];
  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  sub_1C56BC0B0(v4, v5, 0);
  sub_1C628CA08((uint64_t)a1, a2);
  result = sub_1C5676C10(v4);
  if (!result)
    goto LABEL_8;
  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
LABEL_8:
      a1[41] = a1[40];
  }
  else if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    goto LABEL_8;
  }
  return result;
}

void sub_1C56BC6DC(uint64_t a1)
{
  int v1;
  unsigned __int8 v2;
  __guard *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v1 = *(unsigned __int8 *)(a1 + 41);
  if ((~v1 & 3) == 0)
  {
    v2 = atomic_load(byte_1ED809B58);
    if ((v2 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809B58;
    goto LABEL_11;
  }
  if ((v1 & 2) != 0)
  {
    v5 = atomic_load(byte_1ED809B60);
    if ((v5 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809B60;
    goto LABEL_11;
  }
  if ((v1 & 1) != 0)
  {
    v4 = atomic_load(byte_1ED809B68);
    if ((v4 & 1) == 0)
    {
      v3 = (__guard *)byte_1ED809B68;
LABEL_11:
      if (__cxa_guard_acquire(v3))
        __cxa_guard_release(v3);
    }
  }
}

BOOL sub_1C56BC778(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  v5 = sub_1C5680B34(a2, v4, 0, v3, 0, 0, 1);
  v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
  v7 = *(_QWORD *)(v3 + 32);
  v3 += 32;
  LODWORD(a2) = *(unsigned __int8 *)(v3 + 9);
  (*(void (**)(uint64_t, _QWORD))(v7 + 48))(v3, *(unsigned __int8 *)(v6 + 9));
  return (_DWORD)a2 == *(unsigned __int8 *)(v3 + 9);
}

uint64_t *sub_1C56BC7F0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56BC808(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56BC850(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56BC884(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56BC8C8(uint64_t a1)
{
  int v1;
  unsigned __int8 v2;
  __guard *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v1 = *(unsigned __int8 *)(a1 + 41);
  if ((~v1 & 3) == 0)
  {
    v2 = atomic_load(byte_1ED809B70);
    if ((v2 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809B70;
    goto LABEL_11;
  }
  if ((v1 & 2) != 0)
  {
    v5 = atomic_load(byte_1ED809B78);
    if ((v5 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809B78;
    goto LABEL_11;
  }
  if ((v1 & 1) != 0)
  {
    v4 = atomic_load(byte_1ED809B80);
    if ((v4 & 1) == 0)
    {
      v3 = (__guard *)byte_1ED809B80;
LABEL_11:
      if (__cxa_guard_acquire(v3))
        __cxa_guard_release(v3);
    }
  }
}

uint64_t sub_1C56BC964(_QWORD *a1, llvm::Attributor *a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedArgument;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  char v14;
  char v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];

  v4 = (llvm::IRPosition *)(a1 + 2);
  v5 = sub_1C628D68C((llvm::IRPosition *)(a1 + 2));
  v7 = v6;
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  AssociatedArgument = llvm::IRPosition::getAssociatedArgument(v4);
  if (AssociatedArgument
    && *(_BYTE *)(*(_QWORD *)AssociatedArgument + 8) == 15
    && (v10 = *(_QWORD *)(*(_QWORD *)(AssociatedArgument + 24) + 112)) != 0
    && (v11 = *(_DWORD *)(AssociatedArgument + 32) + 2, v11 < *(_DWORD *)(v10 + 8))
    && (v19 = *(_QWORD *)(v10 + 8 * v11 + 40)) != 0
    && (*(_BYTE *)(v19 + 20) & 0x20) != 0)
  {
    v14 = 0;
    v16 = *(unsigned __int8 *)(v8 + 9);
  }
  else
  {
    v12 = 1;
    v13 = sub_1C5680B34((uint64_t)a2, v5, v7, (uint64_t)a1, 1, 0, 1);
    v14 = *((_BYTE *)v13 + 41);
    v15 = *((_BYTE *)v13 + 40);
    v16 = (*(_BYTE *)(v8 + 9) | v15);
    *(_BYTE *)(v8 + 9) |= v15;
    *(_BYTE *)(v8 + 8) |= v15;
    if ((v16 & ~*((unsigned __int8 *)v13 + 41)) == 0)
      return v12;
  }
  if ((~*((unsigned __int16 *)sub_1C5689124((uint64_t)a2, a1[2], a1[3], (uint64_t)a1, 1, 0, 1) + 21) & 3) != 0)
  {
    *(_BYTE *)(v8 + 9) = *(_BYTE *)(v8 + 9) & v14 | *(_BYTE *)(v8 + 8);
  }
  else
  {
    v21[0] = a1;
    v21[1] = a2;
    v18 = sub_1C6284150(v4);
    if ((llvm::Attributor::checkForAllUses(a2, (unsigned int (*)(uint64_t, uint64_t *, uint64_t *))sub_1C56BCB80, (uint64_t)v21, a1, v18, 0, 1, 1, 0, v20) & 1) == 0)return (*(uint64_t (**)(_QWORD *))(a1[4] + 40))(a1 + 4);
  }
  return v16 == *((unsigned __int8 *)a1 + 41);
}

uint64_t *sub_1C56BCB20(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56BCB38(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56BCB80(uint64_t *a1, _QWORD *a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  BOOL v10;
  char v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v53;
  __int32 v54;
  __int32 v55;

  v6 = *a1;
  v7 = a2[3];
  if (sub_1C4D9F8B4(v7) || sub_1C509DDB0(v7))
    return 1;
  v9 = *(unsigned __int8 *)(v7 + 16);
  v10 = 1;
  if (v9 <= 0x3B)
  {
    if (v9 != 33 && v9 != 39)
      goto LABEL_23;
    goto LABEL_12;
  }
  if (v9 == 84)
  {
LABEL_12:
    v12 = *(_DWORD *)(v7 + 20);
    v13 = v7 - 32 * (v12 & 0x7FFFFFF);
    if (v13 <= (unint64_t)a2
      && (v9 != 84 ? (v9 != 39 ? (v14 = 2) : (v14 = (*(_DWORD *)(v7 + 80) + 1))) : (v14 = 0),
          (v12 & 0x80000000) == 0 || (v31 = *(_QWORD *)(v13 - 8), (v31 & 0xFFFFFFFF0) == 0)
        ? (v15 = 0)
        : (v15 = (*(_DWORD *)(v13 - 12) - *(_DWORD *)(v13 - v31))),
          v7 - 32 * v14 - 32 * v15 - 32 > (unint64_t)a2 && *(_BYTE *)(*(_QWORD *)*a2 + 8) == 15))
    {
      v16 = (unint64_t)a2 - v13;
      if ((v12 & 0x40000000) != 0)
        v13 = *(_QWORD *)(v7 - 8);
      v10 = (~*((unsigned __int16 *)sub_1C5689124(a1[1], (v13 + (v16 & 0x1FFFFFFFE0)) | 3, 0, v6, 1, 0, 1) + 21) & 7) != 0;
      v9 = *(unsigned __int8 *)(v7 + 16);
    }
    else
    {
      v10 = 1;
    }
    goto LABEL_23;
  }
  if (v9 == 60)
  {
    *a3 = 0;
    goto LABEL_11;
  }
LABEL_23:
  *a3 = v10;
  v17 = v9 - 33;
  if (v17 <= 0x37)
  {
    if (((1 << v17) & 0x8000000000041) != 0)
    {
      v18 = *(_QWORD *)(v7 + 64);
      if (!v18 || (*(_BYTE *)(v18 + 20) & 4) == 0 && (*(_BYTE *)(v18 + 17) & 0x10) == 0)
      {
        v54 = 7;
        if (sub_1C53E4BBC(v7, &v54, 1uLL))
        {
          v32 = *(_QWORD *)(v7 - 32);
          if (!v32
            || *(_BYTE *)(v32 + 16)
            || *(_QWORD *)(v32 + 24) != *(_QWORD *)(v7 + 72)
            || *(_DWORD *)(v32 + 36) != 7)
          {
            goto LABEL_48;
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v7, 66) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction(v7, 44))
        {
          goto LABEL_48;
        }
      }
    }
    else if (v17 == 28)
    {
      if ((*(_WORD *)(v7 + 18) & 0x301) != 0)
      {
LABEL_48:
        v19 = *(unsigned __int8 *)(v7 + 16);
        goto LABEL_49;
      }
    }
    else if (((1 << v17) & 0x808001C8000010) != 0)
    {
      goto LABEL_48;
    }
  }
  v19 = *(unsigned __int8 *)(v7 + 16);
  v20 = (v19 - 33);
  if (v20 > 0x37)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 24))(v6 + 32) ^ 1;
  if (((1 << (v19 - 33)) & 0x8000000000041) != 0)
  {
    v21 = *(_QWORD *)(v7 + 64);
    if (v21 && (*(_BYTE *)(v21 + 17) & 0x30) != 0)
      return (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 24))(v6 + 32) ^ 1;
    v22 = *(_DWORD *)(v7 + 20);
    if (v22 < 0 && (v36 = v7 - 32 * (v22 & 0x7FFFFFF), v39 = *(_QWORD *)(v36 - 8), v37 = v36 - 8, (v38 = v39) != 0))
    {
      v40 = -v38;
      while (1)
      {
        v41 = *(_DWORD *)(*(_QWORD *)(v37 + v40) + 8);
        v42 = v41 > 7;
        v43 = (1 << v41) & 0x83;
        if (v42 || v43 == 0)
          break;
        v40 += 16;
        if (!v40)
          goto LABEL_42;
      }
    }
    else
    {
LABEL_42:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v7, 45) & 1) != 0
        || (llvm::CallBase::hasFnAttrOnCalledFunction(v7, 44) & 1) != 0)
      {
        return (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 24))(v6 + 32) ^ 1;
      }
    }
    goto LABEL_48;
  }
  if (v20 == 27)
  {
    if ((*(_WORD *)(v7 + 18) & 0x301) == 0)
      return (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 24))(v6 + 32) ^ 1;
    goto LABEL_48;
  }
  if (((1 << (v19 - 33)) & 0x808001D0000010) == 0)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 24))(v6 + 32) ^ 1;
LABEL_49:
  if (v19 <= 59)
  {
    if (v19 != 33 && v19 != 39)
    {
      if (v19 != 37)
        goto LABEL_82;
      goto LABEL_81;
    }
    goto LABEL_57;
  }
  if ((v19 - 61) > 0x1B)
    goto LABEL_73;
  if (v19 == 61)
  {
    if (*(_QWORD *)(v7 - 32) == *a2)
      goto LABEL_94;
LABEL_71:
    (*(void (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 40))(v6 + 32);
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 24))(v6 + 32) ^ 1;
  }
  if (v19 != 84)
  {
    if (((1 << (v19 - 61)) & 0x808001C) != 0)
      goto LABEL_81;
LABEL_73:
    if (v19 != 60)
      goto LABEL_82;
LABEL_11:
    v11 = *(_BYTE *)(v6 + 41) & 0xFE;
LABEL_95:
    *(_BYTE *)(v6 + 41) = v11 | *(_BYTE *)(v6 + 40);
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 24))(v6 + 32) ^ 1;
  }
LABEL_57:
  v23 = *(_DWORD *)(v7 + 20);
  if (v23 < 0)
  {
    v33 = v7 - 32 * (v23 & 0x7FFFFFF);
    v34 = *(_QWORD *)(v33 - 8);
    if ((v34 & 0xFFFFFFFF0) != 0)
    {
      v35 = ((unint64_t)a2 - v33) >> 5;
      if (*(_DWORD *)(v33 - v34) <= v35 && *(_DWORD *)(v33 - 12) > v35)
        goto LABEL_71;
    }
  }
  if ((_QWORD *)(v7 - 32) != a2)
  {
    if (*(_BYTE *)(*(_QWORD *)*a2 + 8) == 15)
    {
      v24 = v7 - 32 * (v23 & 0x7FFFFFF);
      v25 = (unint64_t)a2 - v24;
      if ((v23 & 0x40000000) != 0)
        v24 = *(_QWORD *)(v7 - 8);
      v7 = (v24 + (v25 & 0x1FFFFFFFE0)) | 3;
    }
    v11 = *(_BYTE *)(v6 + 41) & *((_BYTE *)sub_1C5680B34(a1[1], v7, 0, v6, 1, 0, 1) + 41);
    goto LABEL_95;
  }
  *(_BYTE *)(v6 + 41) = *(_BYTE *)(v6 + 41) & 0xFE | *(_BYTE *)(v6 + 40);
  v26 = (v19 - 33);
  if (v26 <= 0x33)
  {
    if (((1 << v26) & 0x8000000000041) == 0)
    {
      if (((1 << v26) & 0x8001C8000010) == 0 && (v26 != 28 || (*(_WORD *)(v7 + 18) & 0x301) == 0))
        goto LABEL_82;
LABEL_81:
      *(_BYTE *)(v6 + 41) = *(_BYTE *)(v6 + 41) & 0xFE | *(_BYTE *)(v6 + 40);
      goto LABEL_82;
    }
    v27 = *(_QWORD *)(v7 + 64);
    if (!v27 || (*(_BYTE *)(v27 + 20) & 4) == 0 && (*(_BYTE *)(v27 + 17) & 0x10) == 0)
    {
      v55 = 7;
      if (sub_1C53E4BBC(v7, &v55, 1uLL))
      {
        v53 = *a2;
        if (!*a2 || *(_BYTE *)(v53 + 16) || *(_QWORD *)(v53 + 24) != *(_QWORD *)(v7 + 72) || *(_DWORD *)(v53 + 36) != 7)
          goto LABEL_81;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v7, 66) & 1) == 0
        && (llvm::CallBase::hasFnAttrOnCalledFunction(v7, 44) & 1) == 0)
      {
        goto LABEL_81;
      }
    }
  }
LABEL_82:
  v28 = *(unsigned __int8 *)(v7 + 16) - 33;
  if (v28 > 0x37)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 24))(v6 + 32) ^ 1;
  if (((1 << (*(_BYTE *)(v7 + 16) - 33)) & 0x8000000000041) != 0)
  {
    v29 = *(_QWORD *)(v7 + 64);
    if (v29 && (*(_BYTE *)(v29 + 17) & 0x30) != 0)
      return (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 24))(v6 + 32) ^ 1;
    v30 = *(_DWORD *)(v7 + 20);
    if (v30 < 0 && (v45 = v7 - 32 * (v30 & 0x7FFFFFF), v48 = *(_QWORD *)(v45 - 8), v46 = v45 - 8, (v47 = v48) != 0))
    {
      v49 = -v47;
      while (1)
      {
        v50 = *(_DWORD *)(*(_QWORD *)(v46 + v49) + 8);
        v42 = v50 > 7;
        v51 = (1 << v50) & 0x83;
        if (v42 || v51 == 0)
          break;
        v49 += 16;
        if (!v49)
          goto LABEL_90;
      }
    }
    else
    {
LABEL_90:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v7, 45) & 1) != 0
        || (llvm::CallBase::hasFnAttrOnCalledFunction(v7, 44) & 1) != 0)
      {
        return (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 24))(v6 + 32) ^ 1;
      }
    }
    goto LABEL_94;
  }
  if (v28 == 27)
  {
    if ((*(_WORD *)(v7 + 18) & 0x301) == 0)
      return (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 24))(v6 + 32) ^ 1;
LABEL_94:
    v11 = *(_BYTE *)(v6 + 41) & 0xFD;
    goto LABEL_95;
  }
  if (((1 << (*(_BYTE *)(v7 + 16) - 33)) & 0x808001D0000010) != 0)
    goto LABEL_94;
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v6 + 32) + 24))(v6 + 32) ^ 1;
}

_QWORD *sub_1C56BD22C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56BD260(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56BD2A4(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  char hasAttr;
  uint64_t v6;
  unint64_t AssociatedArgument;
  uint64_t result;
  int v9;

  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 41) & 3 | *(_BYTE *)(a1 + 40);
  v4 = (llvm::IRPosition *)(a1 + 16);
  v9 = 69;
  hasAttr = llvm::IRPosition::hasAttr((llvm::IRPosition *)(a1 + 16), &v9, 1, 1, 0);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_1C56BC0B0(v4, v6, hasAttr);
  AssociatedArgument = llvm::IRPosition::getAssociatedArgument(v4);
  if (!AssociatedArgument)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  result = sub_1C62873F8(a2, *(llvm::GlobalValue **)(AssociatedArgument + 24));
  if ((result & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  return result;
}

uint64_t sub_1C56BD360(_BYTE *a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  char v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRPosition *)(a1 + 16);
  if (*(_BYTE *)(*(_QWORD *)sub_1C6284150((llvm::IRPosition *)(a1 + 16)) + 8) != 15)
    return 1;
  v7[0] = 0x4800000047;
  if (llvm::IRPosition::hasAttr(v4, (int *)v7, 2, 0, 0))
  {
    v6 = a1[40];
    a1[40] = v6 & 0xFD;
    a1[41] = (a1[41] | v6) & 0xFD;
  }
  return sub_1C56BBF4C((uint64_t)a1, a2);
}

void sub_1C56BD430(uint64_t a1)
{
  int v1;
  unsigned __int8 v2;
  __guard *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v1 = *(unsigned __int8 *)(a1 + 41);
  if ((~v1 & 3) == 0)
  {
    v2 = atomic_load(byte_1ED809B88);
    if ((v2 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809B88;
    goto LABEL_11;
  }
  if ((v1 & 2) != 0)
  {
    v5 = atomic_load(byte_1ED809B90);
    if ((v5 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809B90;
    goto LABEL_11;
  }
  if ((v1 & 1) != 0)
  {
    v4 = atomic_load(byte_1ED809B98);
    if ((v4 & 1) == 0)
    {
      v3 = (__guard *)byte_1ED809B98;
LABEL_11:
      if (__cxa_guard_acquire(v3))
        __cxa_guard_release(v3);
    }
  }
}

uint64_t *sub_1C56BD4CC(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56BD4E4(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56BD52C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56BD560(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56BD5A4(_BYTE *a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  uint64_t v5;
  unint64_t result;

  a1[41] = a1[41] & 3 | a1[40];
  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  sub_1C56BC0B0(v4, v5, 0);
  sub_1C628CA08((uint64_t)a1, a2);
  result = sub_1C5676C10(v4);
  if (!result)
    goto LABEL_8;
  if (*(_BYTE *)(result + 16))
  {
    if (*(_BYTE *)(result + 16) == 3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
LABEL_8:
      a1[41] = a1[40];
  }
  else if (*(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_1C56BD658()
{
  return 1;
}

uint64_t *sub_1C56BD664(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56BD67C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56BD6C4(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C56BD6F8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C56BD73C(_BYTE *a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  unint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  char v10;

  v4 = (llvm::IRPosition *)(a1 + 16);
  result = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 16));
  if (!result)
    goto LABEL_8;
  if (*(_BYTE *)(*(_QWORD *)result + 8) == 15)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(result + 24) + 112);
    if (v6)
    {
      v7 = *(_DWORD *)(result + 32) + 2;
      if (v7 < *(_DWORD *)(v6 + 8))
      {
        v8 = *(_QWORD *)(v6 + 8 * v7 + 40);
        if (v8)
        {
          if ((*(_BYTE *)(v8 + 20) & 0x20) != 0)
          {
            v9 = a1[41];
            v10 = a1[40];
            a1[40] = v10 & 0xFC | 2;
            a1[41] = (v10 | v9) & 0xFC | 2;
          }
        }
      }
    }
  }
  sub_1C56BD2A4((uint64_t)a1, a2);
  result = sub_1C5676C10(v4);
  if (result && *(_BYTE *)(result + 16) == 3)
  {
    if ((*(_DWORD *)(result + 20) & 0x7FFFFFF) == 0)
LABEL_8:
      a1[41] = a1[40];
  }
  else if (!*(_BYTE *)(result + 16) && *(_QWORD *)(result + 72) == result + 72 && (*(_BYTE *)(result + 34) & 0x80) == 0)
  {
    goto LABEL_8;
  }
  return result;
}

void sub_1C56BD838(uint64_t a1)
{
  int v1;
  unsigned __int8 v2;
  __guard *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v1 = *(unsigned __int8 *)(a1 + 41);
  if ((~v1 & 3) == 0)
  {
    v2 = atomic_load(byte_1ED809BA0);
    if ((v2 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809BA0;
    goto LABEL_11;
  }
  if ((v1 & 2) != 0)
  {
    v5 = atomic_load(byte_1ED809BA8);
    if ((v5 & 1) != 0)
      return;
    v3 = (__guard *)byte_1ED809BA8;
    goto LABEL_11;
  }
  if ((v1 & 1) != 0)
  {
    v4 = atomic_load(byte_1ED809BB0);
    if ((v4 & 1) == 0)
    {
      v3 = (__guard *)byte_1ED809BB0;
LABEL_11:
      if (__cxa_guard_acquire(v3))
        __cxa_guard_release(v3);
    }
  }
}

BOOL sub_1C56BD8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t AssociatedArgument;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a1;
  AssociatedArgument = llvm::IRPosition::getAssociatedArgument((llvm::IRPosition *)(a1 + 16));
  v5 = sub_1C5680B34(a2, AssociatedArgument, 0, v3, 0, 0, 1);
  v6 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 48))(v5);
  v7 = *(_QWORD *)(v3 + 32);
  v3 += 32;
  LODWORD(a2) = *(unsigned __int8 *)(v3 + 9);
  (*(void (**)(uint64_t, _QWORD))(v7 + 48))(v3, *(unsigned __int8 *)(v6 + 9));
  return (_DWORD)a2 == *(unsigned __int8 *)(v3 + 9);
}

uint64_t *sub_1C56BD94C(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C56BD964(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C56BD9AC(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  void *v10[2];
  uint64_t v11;

  v9 = *(_QWORD *)a2;
  v10[0] = &v11;
  v10[1] = 0;
  if (*(_DWORD *)(a2 + 16))
    sub_1C614C900((uint64_t)v10, a2 + 8);
  v3 = sub_1C6284A2C(&v9, *(_DWORD *)(*(_QWORD *)*a1 + 32));
  if (v3)
  {
    v4 = a1[1];
    v5 = v9;
    v6 = *(unsigned int *)(v4 + 8);
    if (v6 >= *(_DWORD *)(v4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v4 + 16, v6 + 1, 16);
      LODWORD(v6) = *(_DWORD *)(v4 + 8);
    }
    v7 = (uint64_t *)(*(_QWORD *)v4 + 16 * v6);
    *v7 = v3;
    v7[1] = v5;
    ++*(_DWORD *)(v4 + 8);
  }
  if (v10[0] != &v11)
    free(v10[0]);
  return v3 != 0;
}

void sub_1C56BDA7C(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  _QWORD *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  size_t v11;
  size_t v12;
  const char *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  BOOL v24;
  llvm::raw_ostream *v25;
  _WORD *v26;
  const char *v27;
  int v28;
  llvm::raw_ostream *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  _WORD *v33;
  llvm::raw_ostream *v34;
  std::string *p_p;
  size_t size;
  uint64_t v37;
  void *v38;
  std::string *v39;
  size_t v40;
  llvm::raw_ostream *v41;
  uint64_t *v42;
  _WORD *v43;
  unint64_t v44;
  const char *v45;
  size_t v46;
  llvm::raw_ostream *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  std::string __p;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  int v63;
  void **v64;
  void *v65[2];
  uint64_t v66;
  void *v67[2];
  char v68;

  v68 = 0;
  LOBYTE(v67[0]) = 0;
  v4 = *(llvm::raw_ostream **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v5) > 4)
  {
    *(_BYTE *)(v5 + 4) = 101;
    *(_DWORD *)v5 = 1685016073;
    *((_QWORD *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v4, a2, 3, 0, 0);
  v6 = (_QWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v6 > 7uLL)
  {
    *v6 = 0x3D65706168735B20;
    *((_QWORD *)v4 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v4, " [shape=", 8uLL);
  }
  v7 = *(llvm::raw_ostream **)a1;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 24) - v8;
  if (*(_BYTE *)(a1 + 16))
  {
    if (v9 <= 4)
    {
      v10 = "none,";
      v11 = 5;
LABEL_10:
      llvm::raw_ostream::write(v7, v10, v11);
      goto LABEL_11;
    }
    *(_BYTE *)(v8 + 4) = 44;
    *(_DWORD *)v8 = 1701736302;
    v56 = *((_QWORD *)v7 + 4) + 5;
  }
  else
  {
    if (v9 <= 6)
    {
      v10 = "record,";
      v11 = 7;
      goto LABEL_10;
    }
    *(_DWORD *)(v8 + 3) = 744780399;
    *(_DWORD *)v8 = 1868785010;
    v56 = *((_QWORD *)v7 + 4) + 7;
  }
  *((_QWORD *)v7 + 4) = v56;
LABEL_11:
  if (v68 >= 0)
    v12 = v68 & 0x7F;
  else
    v12 = (size_t)v67[1];
  if (v12)
  {
    if (v68 >= 0)
      v13 = (const char *)v67;
    else
      v13 = (const char *)v67[0];
    v14 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v13, v12);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if (*((_BYTE **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, ",", 1uLL);
    }
    else
    {
      *v15 = 44;
      ++*((_QWORD *)v14 + 4);
    }
  }
  v16 = *(llvm::raw_ostream **)a1;
  v17 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 15724;
    *(_DWORD *)v17 = 1700946284;
    *((_QWORD *)v16 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v16, "label=", 6uLL);
  }
  if (*(_BYTE *)(a1 + 16))
  {
    v18 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
    v19 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2);
    if (v18 == v19)
    {
      v22 = 0;
      v23 = 0;
    }
    else
    {
      v20 = 0;
      v21 = v18 + 8;
      do
      {
        v22 = v20 + 1;
        v23 = v21 != v19;
        if (v21 == v19)
          break;
        v21 += 8;
        v24 = v20++ == 63;
      }
      while (!v24);
    }
    if (v22 <= 1)
      v28 = 1;
    else
      v28 = v22;
    v29 = *(llvm::raw_ostream **)a1;
    v30 = *(void **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v30 > 0x30uLL)
    {
      qmemcpy(v30, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
      v31 = (void *)(*((_QWORD *)v29 + 4) + 49);
      *((_QWORD *)v29 + 4) = v31;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
      v31 = (void *)*((_QWORD *)v29 + 4);
    }
    v32 = (v28 + v23);
    if (*((_QWORD *)v29 + 3) - (_QWORD)v31 > 0x2EuLL)
    {
      qmemcpy(v31, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
      *((_QWORD *)v29 + 4) += 47;
    }
    else
    {
      llvm::raw_ostream::write(v29, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
    }
    sub_1C5E21910(v29, v32, 0, 0, 0);
    v33 = (_WORD *)*((_QWORD *)v29 + 4);
    if (*((_QWORD *)v29 + 3) - (_QWORD)v33 <= 1uLL)
    {
      v27 = "\">";
      v25 = v29;
      goto LABEL_41;
    }
    *v33 = 15906;
    *((_QWORD *)v29 + 4) += 2;
  }
  else
  {
    v25 = *(llvm::raw_ostream **)a1;
    v26 = *(_WORD **)(*(_QWORD *)a1 + 32);
    if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v26 <= 1uLL)
    {
      v27 = "\"{";
LABEL_41:
      llvm::raw_ostream::write(v25, v27, 2uLL);
      goto LABEL_42;
    }
    *v26 = 31522;
    *((_QWORD *)v25 + 4) += 2;
  }
LABEL_42:
  v34 = *(llvm::raw_ostream **)a1;
  if (*(_BYTE *)(a1 + 16))
  {
    sub_1C56BE1E8(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v34, (const char *)p_p, size);
    v37 = *((_QWORD *)v34 + 4);
    if ((unint64_t)(*((_QWORD *)v34 + 3) - v37) > 4)
    {
      *(_BYTE *)(v37 + 4) = 62;
      *(_DWORD *)v37 = 1685335868;
      *((_QWORD *)v34 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v34, "</td>", 5uLL);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_63:
      operator delete(v38);
    }
  }
  else
  {
    sub_1C56BE1E8(v65, a2);
    llvm::DOT::EscapeString((char *)v65, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = &__p;
    else
      v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v40 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v34, (const char *)v39, v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66) < 0)
    {
      v38 = v65[0];
      goto LABEL_63;
    }
  }
  v65[0] = 0;
  v65[1] = 0;
  v66 = 0;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  v61 = 0;
  v62 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  v64 = v65;
  v63 = 0;
  v59 = 0;
  v60 = 0;
  __p.__r_.__value_.__r.__words[2] = 0;
  (*(void (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (*(_BYTE *)(a1 + 16))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "</tr><tr>", 9uLL);
    v41 = *(llvm::raw_ostream **)a1;
    v42 = (uint64_t *)(*(_QWORD *)a1 + 32);
    v43 = (_WORD *)*v42;
    v44 = *(_QWORD *)(*(_QWORD *)a1 + 24) - *v42;
    if (*(_BYTE *)(a1 + 16))
    {
      if (v44 <= 0xD)
      {
        v45 = "</tr></table>>";
        v46 = 14;
LABEL_71:
        llvm::raw_ostream::write(v41, v45, v46);
        goto LABEL_72;
      }
      qmemcpy(v43, "</tr></table>>", 14);
      v57 = *v42 + 14;
      goto LABEL_105;
    }
  }
  else
  {
    v41 = *(llvm::raw_ostream **)a1;
    v42 = (uint64_t *)(*(_QWORD *)a1 + 32);
    v43 = (_WORD *)*v42;
    v44 = *(_QWORD *)(*(_QWORD *)a1 + 24) - *v42;
  }
  if (v44 <= 1)
  {
    v45 = "}\"";
    v46 = 2;
    goto LABEL_71;
  }
  *v43 = 8829;
  v57 = *v42 + 2;
LABEL_105:
  *v42 = v57;
LABEL_72:
  v47 = *(llvm::raw_ostream **)a1;
  v48 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v48) > 2)
  {
    *(_BYTE *)(v48 + 2) = 10;
    *(_WORD *)v48 = 15197;
    *((_QWORD *)v47 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v47, "];\n", 3uLL);
  }
  v49 = (uint64_t *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 16))(a2);
  v51 = v50;
  v52 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (v49 != (uint64_t *)v52)
  {
    v53 = 0;
    do
    {
      if (**(llvm::AbstractAttribute ***)(a1 + 8) != (llvm::AbstractAttribute *)((char *)sub_1C5692210(v51, v49[v53], 0, 0, 2)+ 48))sub_1C56BE310((llvm::raw_ostream **)a1, a2, &v49[v53], v51);
      v54 = v53 * 8 + 8;
      if (&v49[v53 + 1] == (uint64_t *)v52)
        break;
      v24 = (_DWORD)(v53 * 8) == 504;
      ++v53;
    }
    while (!v24);
    v49 = (uint64_t *)((char *)v49 + v54);
  }
  if (v49 != (uint64_t *)v52)
  {
    v55 = v49;
    do
    {
      if (**(llvm::AbstractAttribute ***)(a1 + 8) != (llvm::AbstractAttribute *)((char *)sub_1C5692210(v51, *v49, 0, 0, 2)+ 48))sub_1C56BE310((llvm::raw_ostream **)a1, a2, v55, v51);
      ++v49;
      ++v55;
    }
    while (v49 != (uint64_t *)v52);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v63 == 1 && __p.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[2], 0x1000C8077774924);
  if (SHIBYTE(v66) < 0)
    operator delete(v65[0]);
  if (v68 < 0)
    operator delete(v67[0]);
}

unint64_t sub_1C56BE1E8(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t *v13;
  size_t v14;
  const void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;

  v3 = a2 - 48;
  if (!a2)
    v3 = 0;
  result = sub_1C5676C10((llvm::IRPosition *)(v3 + 16));
  if ((*(_BYTE *)(result + 23) & 0x10) == 0)
  {
    v14 = 0;
    a1[23] = 0;
    goto LABEL_19;
  }
  v5 = ***(_QWORD ***)result;
  v6 = *(_QWORD *)(v5 + 152);
  v7 = *(unsigned int *)(v5 + 168);
  if (!(_DWORD)v7)
    goto LABEL_10;
  LODWORD(v8) = (v7 - 1) & ((result >> 4) ^ (result >> 9));
  v9 = (uint64_t *)(v6 + 16 * v8);
  v10 = *v9;
  if (*v9 != result)
  {
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(_QWORD *)(v6 + 16 * v8);
      if (v10 == result)
      {
        v9 = (uint64_t *)(v6 + 16 * v8);
        goto LABEL_11;
      }
    }
LABEL_10:
    v9 = (uint64_t *)(v6 + 16 * v7);
  }
LABEL_11:
  v13 = (unint64_t *)v9[1];
  v16 = *v13;
  v15 = v13 + 2;
  v14 = v16;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    *((_QWORD *)a1 + 1) = v14;
    *((_QWORD *)a1 + 2) = v18 | 0x8000000000000000;
    *(_QWORD *)a1 = v19;
    a1 = v19;
  }
  else
  {
    a1[23] = v14;
    if (!v14)
      goto LABEL_19;
  }
  result = (unint64_t)memmove(a1, v15, v14);
LABEL_19:
  a1[v14] = 0;
  return result;
}

void sub_1C56BE310(llvm::raw_ostream **a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  llvm::AbstractAttribute *v6;
  void *__p;
  char v8;

  v6 = sub_1C5692210(a4, *a3, 0, 0, 2);
  v8 = 0;
  LOBYTE(__p) = 0;
  sub_1C617C7A0(a1, a2, (unint64_t)v6 + 48, (uint64_t)&__p);
  if (v8 < 0)
    operator delete(__p);
}

uint64_t sub_1C56BE37C()
{
  int v1;
  int *v2;
  int v3;
  int *v4;
  __n128 v5;

  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Manifest Attributor internal string attributes.";
  v5.n128_u64[1] = 47;
  LOBYTE(v3) = 0;
  v4 = &v3;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED809BB8, "attributor-manifest-internal", &v2, &v5, (_BYTE **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED809BB8, &dword_1C475E000);
  LODWORD(v4) = 128;
  v5.n128_u64[0] = (unint64_t)&v4;
  LODWORD(v2) = 1;
  sub_1C6291388((int **)&v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED809C78, &dword_1C475E000);
  v3 = 1;
  v5.n128_u64[0] = (unint64_t)"Maximum number of potential values to be tracked for each position.";
  v5.n128_u64[1] = 67;
  v4 = &llvm::PotentialValuesState<llvm::APInt>::MaxPotentialValues;
  v1 = 7;
  v2 = &v1;
  sub_1C6291454(&v3, (__int128 *)&v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4E9AEF0, &qword_1ED809D38, &dword_1C475E000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Maximum number of interfering accesses to check before assuming all might interfere.";
  v5.n128_u64[1] = 84;
  v3 = 6;
  v4 = &v3;
  sub_1C62915A8(&v2, (__int128 *)&v5, &v4);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED809DF8, &dword_1C475E000);
}

uint64_t sub_1C56BE4DC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F3298;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8179340;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831E28);
  if (v3 != -1)
  {
    v7[0] = sub_1C56BE604;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831E28, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::initializeBarrierNoopPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E28);
  if (v2 != -1)
  {
    v5[0] = sub_1C56BE604;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E28, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56BE604(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "A No-Op Barrier Pass";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "barrier";
  *(_QWORD *)(v2 + 24) = 7;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F3298;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56BE6C4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C56BE698(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56BE6BC()
{
  return 0;
}

uint64_t sub_1C56BE6C4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56BE4DC(v0);
}

void llvm::initializeBlockExtractorLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E30);
  if (v2 != -1)
  {
    v5[0] = sub_1C56BE74C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E30, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56BE74C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Extract basic blocks from module";
  *(_QWORD *)(v2 + 8) = 32;
  *(_QWORD *)(v2 + 16) = "extract-blocks";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7138;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56BF694;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createBlockExtractorPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56BE804(v1);
}

uint64_t sub_1C56BE804(uint64_t a1)
{
  void *v3[2];
  uint64_t v4;

  v3[0] = &v4;
  v3[1] = 0;
  sub_1C56BE894(a1, (uint64_t)v3, 0);
  if (v3[0] != &v4)
    free(v3[0]);
  return a1;
}

uint64_t llvm::createBlockExtractorPass(uint64_t a1, char a2)
{
  uint64_t v4;

  v4 = operator new();
  return sub_1C56BE894(v4, a1, a2);
}

uint64_t sub_1C56BE894(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  void *v12[2];
  _QWORD v13[16];
  char *v14;
  uint64_t v15;
  _QWORD v16[73];

  v16[72] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F7138;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81793E0;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  v4 = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0x400000000;
  *(_BYTE *)(a1 + 624) = a3;
  *(_QWORD *)(a1 + 632) = a1 + 648;
  *(_QWORD *)(a1 + 640) = 0x400000000;
  v14 = (char *)v16;
  v15 = 0x400000000;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      v12[0] = v13;
      v13[0] = v8;
      v12[1] = (void *)0x1000000001;
      v9 = sub_1C55A2D24((uint64_t)&v14, (unint64_t)v12, 1);
      v10 = &v14[144 * v15];
      *(_QWORD *)v10 = v10 + 16;
      *((_QWORD *)v10 + 1) = 0x1000000000;
      if (*(_DWORD *)(v9 + 8))
        sub_1C49EEBE4((uint64_t)v10, v9);
      LODWORD(v15) = v15 + 1;
      if (v12[0] != v13)
        free(v12[0]);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  sub_1C56BEA10(v4, (uint64_t *)&v14);
  sub_1C627AFCC(&v14);
  return a1;
}

void sub_1C56BEA10(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  size_t v17;
  const void *v18;
  __int128 *p_dst;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  void **v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  char *v35;
  char *v36;
  unint64_t *v37;
  __int128 __dst;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void *__p[2];
  unint64_t v44;
  char *v45;
  uint64_t v46;
  _BYTE v47[96];
  void *v48;
  uint64_t v49;
  _BYTE v50[64];
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  void *v54;
  uint64_t v55;
  _WORD v56[128];
  uint64_t v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v3 = *((_DWORD *)a2 + 2);
  if (v3)
  {
    v4 = *a2;
    v5 = *a2 + 144 * v3;
    do
    {
      v54 = v56;
      v55 = 0x1000000000;
      v6 = *(const void **)v4;
      v7 = *(unsigned int *)(v4 + 8);
      if (v7 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, *(unsigned int *)(v4 + 8), 8);
        v8 = v55;
        v9 = v54;
      }
      else
      {
        if (!(_DWORD)v7)
        {
          v10 = 0;
          goto LABEL_7;
        }
        v8 = 0;
        v9 = v56;
      }
      memcpy(&v9[4 * v8], v6, 8 * v7);
      v10 = v55;
LABEL_7:
      LODWORD(v55) = v10 + v7;
      sub_1C62918EC(a1, (uint64_t)&v54);
      if (v54 != v56)
        free(v54);
      v4 += 144;
    }
    while (v4 != v5);
  }
  v11 = qword_1ED80A000;
  if (byte_1ED80A00F >= 0)
    v11 = byte_1ED80A00F & 0x7F;
  if (!v11)
    return;
  v56[8] = 260;
  v54 = &qword_1ED809FF8;
  sub_1C5E1F6CC((unsigned __int8 *)&v54, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v57);
  if ((v58 & 1) != 0)
  {
    v12 = v57;
    if ((_DWORD)v57)
    {
      v36 = "BlockExtractor couldn't load the file.";
LABEL_71:
      llvm::report_fatal_error((llvm *)v36, (const char *)1);
    }
  }
  else
  {
    std::system_category();
    v12 = v57;
  }
  v54 = v56;
  v55 = 0x1000000000;
  v13 = *(void **)(v12 + 8);
  v14 = (void *)(*(_QWORD *)(v12 + 16) - (_QWORD)v13);
  __p[0] = v13;
  __p[1] = v14;
  llvm::StringRef::split((char *)__p, (uint64_t)&v54, 10, -1, 0);
  v15 = (char *)v54;
  if (!(_DWORD)v55)
    goto LABEL_63;
  v37 = (unint64_t *)(a1 + 600);
  v16 = (char *)v54 + 16 * v55;
  do
  {
    v51 = v53;
    v52 = 0x400000000;
    llvm::StringRef::split(v15, (uint64_t)&v51, 32, -1, 0);
    if (!(_DWORD)v52)
      goto LABEL_22;
    if ((_DWORD)v52 != 2)
    {
      v36 = "Invalid line format, expecting lines like: 'funcname bb1[;bb2..]'";
      goto LABEL_71;
    }
    v48 = v50;
    v49 = 0x400000000;
    llvm::StringRef::split((char *)v51 + 16, (uint64_t)&v48, 59, -1, 0);
    if (!(_DWORD)v49)
    {
      v36 = "Missing bbs name";
      goto LABEL_71;
    }
    v17 = *((_QWORD *)v51 + 1);
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v18 = *(const void **)v51;
    if (v17 >= 0x17)
    {
      v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v20 = v17 | 7;
      v21 = v20 + 1;
      p_dst = (__int128 *)operator new(v20 + 1);
      *((_QWORD *)&__dst + 1) = v17;
      v39 = v21 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
LABEL_35:
      memmove(p_dst, v18, v17);
      goto LABEL_36;
    }
    HIBYTE(v39) = *((_QWORD *)v51 + 1);
    p_dst = &__dst;
    if (v17)
      goto LABEL_35;
LABEL_36:
    *((_BYTE *)p_dst + v17) = 0;
    v40 = (char *)&v42;
    v41 = 0x400000000;
    sub_1C6291A80((uint64_t)&v40, (uint64_t)v48, (uint64_t)v48 + 16 * v49);
    if (SHIBYTE(v39) < 0)
    {
      sub_1C47EBC30(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)__p = __dst;
      v44 = v39;
    }
    v45 = v47;
    v46 = 0x400000000;
    v22 = v41;
    if ((_DWORD)v41)
    {
      if (v41 > 4)
      {
        sub_1C618A5D0((uint64_t)&v45, v41);
        if (!(_DWORD)v41)
        {
LABEL_46:
          LODWORD(v46) = v22;
          goto LABEL_47;
        }
        v23 = v40;
        v24 = &v40[24 * v41];
        v25 = v45;
      }
      else
      {
        v23 = v40;
        v24 = &v40[24 * v41];
        v25 = v47;
      }
      do
      {
        if (v23[23] < 0)
        {
          sub_1C47EBC30(v25, *(void **)v23, *((_QWORD *)v23 + 1));
        }
        else
        {
          v26 = *(_OWORD *)v23;
          *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
          *(_OWORD *)v25 = v26;
        }
        v23 += 24;
        v25 += 24;
      }
      while (v23 != v24);
      goto LABEL_46;
    }
LABEL_47:
    v27 = *(unsigned int *)(a1 + 608);
    v28 = *(_QWORD *)(a1 + 600);
    if (v27 >= *(_DWORD *)(a1 + 612))
    {
      v33 = v27 + 1;
      v34 = v28 + 136 * v27 > (unint64_t)__p;
      if (v28 <= (unint64_t)__p && v34)
      {
        v35 = (char *)__p - v28;
        sub_1C6291A14((uint64_t)v37, v33);
        v28 = *v37;
        v29 = (void **)&v35[*v37];
        goto LABEL_49;
      }
      sub_1C6291A14((uint64_t)v37, v33);
      v28 = *v37;
    }
    v29 = __p;
LABEL_49:
    v30 = v28 + 136 * *(unsigned int *)(a1 + 608);
    v31 = *(_OWORD *)v29;
    *(_QWORD *)(v30 + 16) = v29[2];
    *(_OWORD *)v30 = v31;
    v29[1] = 0;
    v29[2] = 0;
    *v29 = 0;
    *(_QWORD *)(v30 + 24) = v30 + 40;
    v32 = v30 + 24;
    *(_QWORD *)(v32 + 8) = 0x400000000;
    if (*((_DWORD *)v29 + 8))
      sub_1C56BF82C(v32, (uint64_t)(v29 + 3));
    ++*(_DWORD *)(a1 + 608);
    sub_1C4E01820(&v45);
    if (SHIBYTE(v44) < 0)
      operator delete(__p[0]);
    sub_1C4E01820(&v40);
    if (SHIBYTE(v39) < 0)
      operator delete((void *)__dst);
    if (v48 != v50)
      free(v48);
LABEL_22:
    if (v51 != v53)
      free(v51);
    v15 += 16;
  }
  while (v15 != v16);
  v15 = (char *)v54;
LABEL_63:
  if (v15 != (char *)v56)
    free(v15);
  if ((v58 & 1) == 0)
  {
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  }
}

uint64_t sub_1C56BEF58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  BOOL v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  const void **v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  const void *v22;
  size_t v23;
  size_t v24;
  uint64_t ***v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ****v30;
  uint64_t ***v31;
  int v32;
  int v33;
  uint64_t ***v34;
  char *v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  char v41;
  uint64_t **v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v53;
  char *v54;
  unsigned int v55;
  llvm::Function *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *i;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  unsigned int v69;
  BOOL v70;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v78;
  uint64_t v79;
  llvm::Function **v80;
  uint64_t v81;
  llvm::Function *v82;
  uint64_t j;
  llvm::GlobalValue *v84;
  int v85;
  uint64_t v87;
  const void **v88;
  __int128 v91;
  char v92;
  uint64_t v93[7];
  uint64_t v94[8];
  void *v95;
  uint64_t v96;
  void *v97;
  char v98;
  uint64_t v99;
  void *__p;
  void *v101;
  _BYTE v102[192];
  void *v103;
  uint64_t v104;
  _BYTE v105[256];
  llvm::Function **v106;
  uint64_t v107;
  _QWORD v108[6];

  v108[4] = *MEMORY[0x1E0C80C00];
  v106 = (llvm::Function **)v108;
  v107 = 0x400000000;
  v2 = a2 + 24;
  v3 = *(_QWORD *)(a2 + 32);
  if (v3 != a2 + 24)
  {
    v55 = 0;
    do
    {
      if (v3)
        v56 = (llvm::Function *)(v3 - 56);
      else
        v56 = 0;
      v57 = (_QWORD *)*((_QWORD *)v56 + 10);
      if (v57 != (_QWORD *)((char *)v56 + 72))
      {
        do
        {
          v58 = v57 - 3;
          if (!v57)
            v58 = 0;
          v59 = v58 + 5;
          for (i = (_QWORD *)v58[6]; i != v59; i = (_QWORD *)i[1])
          {
            if (i)
              v61 = i - 3;
            else
              v61 = 0;
            if (*((_BYTE *)v61 + 16) == 33)
            {
              v62 = v61[5];
              v93[0] = v62;
              v63 = *(v61 - 8);
              v64 = *(_QWORD *)(v63 + 8);
              if (v64)
              {
                while (1)
                {
                  v65 = *(_QWORD *)(v64 + 24);
                  v66 = *(unsigned __int8 *)(v65 + 16);
                  v67 = v65 && v66 >= 0x1C;
                  if (v67 && v66 - 29 <= 0xA)
                    break;
                  v64 = *(_QWORD *)(v64 + 8);
                  if (!v64)
                    goto LABEL_101;
                }
LABEL_110:
                v72 = *(_QWORD *)(v65 + 40);
                v73 = (uint64_t *)(v72 + 48);
                do
                {
                  v74 = *v73;
                  v75 = v74 - 24;
                  if (!v74)
                    v75 = 0;
                  v76 = *(unsigned __int8 *)(v75 + 16);
                  v73 = (uint64_t *)(v74 + 8);
                }
                while (v76 == 83);
                if (v76 != 94 || v72 == v62)
                  goto LABEL_154;
                v78 = *(_QWORD *)(v62 + 40);
                if (v78)
                  v79 = v78 - 24;
                else
                  v79 = 0;
                if (*(unsigned __int8 *)(v79 + 16) - 29 >= 0xB)
                  v79 = 0;
                if (*(_BYTE *)(v79 + 16) != 33)
                {
LABEL_154:
                  while (1)
                  {
                    v64 = *(_QWORD *)(v64 + 8);
                    if (!v64)
                      break;
                    v65 = *(_QWORD *)(v64 + 24);
                    v69 = *(unsigned __int8 *)(v65 + 16);
                    if (v65)
                      v70 = v69 >= 0x1C;
                    else
                      v70 = 0;
                    if (v70 && v69 - 29 < 0xB)
                      goto LABEL_110;
                  }
                }
                else
                {
                  v103 = v105;
                  v104 = 0x200000000;
                  sub_1C5EBEB94((uint64_t **)v63, v93, 1, ".1", ".2", (uint64_t)&v103, 0, 0, 0, 0, 0);
                  if (v103 != v105)
                    free(v103);
                }
              }
            }
LABEL_101:
            ;
          }
          v57 = (_QWORD *)v57[1];
        }
        while (v57 != (_QWORD *)((char *)v56 + 72));
        v55 = v107;
      }
      if (v55 >= HIDWORD(v107))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v55 + 1, 8);
        v55 = v107;
      }
      v106[v55] = v56;
      v55 = v107 + 1;
      LODWORD(v107) = v107 + 1;
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  v4 = a1;
  v5 = *(unsigned int *)(a1 + 8);
  sub_1C6291B64(a1, *(unsigned int *)(a1 + 608) + v5);
  v6 = *(_DWORD *)(a1 + 608);
  if (!v6)
    goto LABEL_43;
  v7 = *(_QWORD *)(a1 + 600);
  v8 = v7 + 136 * v6;
  do
  {
    v9 = *(_BYTE *)(v7 + 23);
    v10 = v9 < 0;
    if (v9 >= 0)
      v11 = (unsigned __int8 *)v7;
    else
      v11 = *(unsigned __int8 **)v7;
    v12 = v9 & 0x7F;
    if (v10)
      v13 = *(_QWORD *)(v7 + 8);
    else
      v13 = v12;
    v14 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), v11, v13);
    if (!v14 || (v15 = v14, *(_BYTE *)(v14 + 16)))
    {
      v54 = "Invalid function name specified in the input file";
      goto LABEL_77;
    }
    v87 = v8;
    v16 = *(_DWORD *)(v7 + 32);
    if (!v16)
      goto LABEL_42;
    v17 = *(const void ***)(v7 + 24);
    v18 = v14 + 72;
    v88 = &v17[3 * v16];
    do
    {
      v19 = *(_QWORD *)(v15 + 80);
      if (v19 == v18)
      {
LABEL_151:
        v54 = "Invalid block name specified in the input file";
LABEL_77:
        llvm::report_fatal_error((llvm *)v54, (const char *)1);
      }
      v20 = *((_BYTE *)v17 + 23);
      v21 = v20 < 0;
      if (v20 >= 0)
        v22 = v17;
      else
        v22 = *v17;
      v23 = v20 & 0x7F;
      if (v21)
        v24 = (size_t)v17[1];
      else
        v24 = v23;
      while (1)
      {
        if (v19)
          v25 = (uint64_t ***)(v19 - 24);
        else
          v25 = 0;
        if ((*((_BYTE *)v25 + 23) & 0x10) == 0)
        {
          v36 = 0;
          v35 = &byte_1C871356D;
          goto LABEL_33;
        }
        v26 = ***v25;
        v27 = *(_QWORD *)(v26 + 152);
        v28 = *(unsigned int *)(v26 + 168);
        if (!(_DWORD)v28)
          goto LABEL_31;
        LODWORD(v29) = (v28 - 1) & ((v25 >> 4) ^ (v25 >> 9));
        v30 = (uint64_t ****)(v27 + 16 * v29);
        v31 = *v30;
        if (*v30 != v25)
        {
          v32 = 1;
          while (v31 != (uint64_t ***)-4096)
          {
            v33 = v29 + v32++;
            v29 = v33 & (v28 - 1);
            v31 = *(uint64_t ****)(v27 + 16 * v29);
            if (v31 == v25)
            {
              v30 = (uint64_t ****)(v27 + 16 * v29);
              goto LABEL_32;
            }
          }
LABEL_31:
          v30 = (uint64_t ****)(v27 + 16 * v28);
        }
LABEL_32:
        v34 = v30[1];
        v37 = *v34;
        v35 = (char *)(v34 + 2);
        v36 = v37;
LABEL_33:
        if (v36 == (uint64_t **)v24 && (!v24 || !memcmp(v35, v22, v24)))
          break;
        v19 = *(_QWORD *)(v19 + 8);
        if (v19 == v18)
          goto LABEL_151;
      }
      v4 = a1;
      v38 = *(_QWORD *)a1 + 144 * v5;
      v39 = *(unsigned int *)(v38 + 8);
      if (v39 >= *(unsigned int *)(v38 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)a1 + 144 * v5, v38 + 16, v39 + 1, 8);
        v39 = *(unsigned int *)(v38 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v38 + 8 * v39) = v25;
      ++*(_DWORD *)(v38 + 8);
      v17 += 3;
    }
    while (v17 != v88);
LABEL_42:
    LODWORD(v5) = v5 + 1;
    v7 += 136;
    v8 = v87;
  }
  while (v7 != v87);
LABEL_43:
  v40 = *(_DWORD *)(v4 + 8);
  if (!v40)
  {
    v41 = 0;
    goto LABEL_133;
  }
  v41 = 0;
  v42 = *(uint64_t ***)v4;
  v43 = *(_QWORD *)v4 + 144 * v40;
  while (2)
  {
    v103 = v105;
    v104 = 0x2000000000;
    v44 = *v42;
    v45 = *((unsigned int *)v42 + 2);
    if (!(_DWORD)v45)
      goto LABEL_66;
    LODWORD(v46) = 0;
    v47 = 8 * v45;
    while (2)
    {
      v48 = *v44;
      if (*(_QWORD *)(*(_QWORD *)(*v44 + 56) + 40) != a2)
      {
        v54 = "Invalid basic block";
        goto LABEL_77;
      }
      if (v46 >= HIDWORD(v104))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, (uint64_t)v105, v46 + 1, 8);
        LODWORD(v46) = v104;
      }
      *((_QWORD *)v103 + v46) = v48;
      v46 = (v104 + 1);
      LODWORD(v104) = v104 + 1;
      v49 = *(_QWORD *)(v48 + 40);
      if (v49 != v48 + 40)
      {
        v50 = v49 - 24;
        if (!v49)
          v50 = 0;
        v51 = *(unsigned __int8 *)(v50 + 16) - 40;
        if (v51 < 0xFFFFFFF5)
          v50 = 0;
        if (v49)
        {
          if (*(_BYTE *)(v50 + 16) == 33 && v51 >= 0xFFFFFFF5)
          {
            v53 = *(_QWORD *)(v50 - 64);
            if (v46 >= HIDWORD(v104))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, (uint64_t)v105, v46 + 1, 8);
              LODWORD(v46) = v104;
            }
            *((_QWORD *)v103 + v46) = v53;
            LODWORD(v46) = v104 + 1;
            LODWORD(v104) = v104 + 1;
          }
        }
      }
      ++v44;
      v47 -= 8;
      if (v47)
        continue;
      break;
    }
    v44 = *v42;
    v41 = 1;
LABEL_66:
    llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)v102, *(llvm::Function **)(*v44 + 56));
    v92 = 0;
    LOBYTE(v91) = 0;
    llvm::CodeExtractor::CodeExtractor((uint64_t)v93, (uint64_t *)v103, v104, 0, 0, 0, 0, 0, 0, 0, 0, &v91);
    llvm::CodeExtractor::extractCodeRegion((llvm::CodeExtractor *)v93, (const llvm::CodeExtractorAnalysisCache *)v102);
    if (__p)
    {
      v101 = __p;
      operator delete(__p);
    }
    MEMORY[0x1CAA32FB4](v99, 8);
    if (v98 < 0)
      operator delete(v97);
    if (v95 != &v96)
      free(v95);
    sub_1C5408A20(v94);
    sub_1C626D3D0((uint64_t)v102);
    if (v103 != v105)
      free(v103);
    v42 += 18;
    if (v42 != (uint64_t **)v43)
      continue;
    break;
  }
LABEL_133:
  if (*(unsigned __int8 *)(a1 + 592) | byte_1ED809F38)
  {
    if ((_DWORD)v107)
    {
      v80 = v106;
      v81 = 8 * v107;
      do
      {
        v82 = *v80++;
        sub_1C6291B14(v82);
        v81 -= 8;
      }
      while (v81);
    }
    for (j = *(_QWORD *)(a2 + 32); j != v2; j = *(_QWORD *)(j + 8))
    {
      if (j)
        v84 = (llvm::GlobalValue *)(j - 56);
      else
        v84 = 0;
      v85 = *((_DWORD *)v84 + 8);
      *((_DWORD *)v84 + 8) = v85 & 0xFFFFFFF0;
      if ((v85 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v84) & 1) == 0)
        *((_DWORD *)v84 + 8) |= 0x4000u;
    }
    v41 = 1;
  }
  if (v106 != v108)
    free(v106);
  return v41 & 1;
}

uint64_t sub_1C56BF694()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56BE804(v0);
}

void sub_1C56BF6BC(char **a1)
{
  char **v2;

  *a1 = (char *)&off_1E81793E0;
  v2 = a1 + 4;
  sub_1C56BFA64(a1 + 79);
  sub_1C627AFCC(v2);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C56BF6FC(char **a1)
{
  char **v2;

  *a1 = (char *)&off_1E81793E0;
  v2 = a1 + 4;
  sub_1C56BFA64(a1 + 79);
  sub_1C627AFCC(v2);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56BF750(uint64_t a1, uint64_t a2)
{
  return sub_1C56BEF58(a1 + 32, a2);
}

void sub_1C56BF758(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1;
    v5 = *a1 + 136 * v2;
    v6 = (_QWORD *)(a2 + 24);
    v7 = v4 + 24;
    do
    {
      v8 = *(_OWORD *)(v7 - 24);
      *(v6 - 1) = *(_QWORD *)(v7 - 8);
      *(_OWORD *)(v6 - 3) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *v6 = v6 + 2;
      v6[1] = 0x400000000;
      if (*(_DWORD *)(v7 + 8))
        v6 = (_QWORD *)sub_1C56BF82C((uint64_t)v6, v7);
      v9 = v7 - 24;
      v6 += 17;
      v7 += 136;
    }
    while (v9 + 136 != v5);
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      v12 = 136 * v10;
      do
      {
        sub_1C4E01820((char **)(v11 + v12 - 112));
        if (*(char *)(v11 + v12 - 113) < 0)
          operator delete(*(void **)(v11 + v12 - 136));
        v12 -= 136;
      }
      while (v12);
    }
  }
}

uint64_t sub_1C56BF82C(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(__int128 **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v6 = *(char **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = 24 * v7;
        do
        {
          if (v6[v8 - 1] < 0)
            operator delete(*(void **)&v6[v8 - 24]);
          v8 -= 24;
        }
        while (v8);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v9 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
LABEL_12:
      *v9 = 0;
      return a1;
    }
    v9 = (_DWORD *)(a2 + 8);
    v11 = *(unsigned int *)(a2 + 8);
    v12 = *(unsigned int *)(a1 + 8);
    if (v12 >= v11)
    {
      v13 = *(_QWORD *)a1;
      if ((_DWORD)v11)
      {
        sub_1C5057CC0(v4, (__int128 *)((char *)v4 + 24 * v11), v13);
        v15 = v14;
        v13 = *(_QWORD *)a1;
        LODWORD(v12) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v15 = *(_QWORD *)a1;
      }
      for (i = v13 + 24 * v12; i != v15; i -= 24)
      {
        if (*(char *)(i - 1) < 0)
          operator delete(*(void **)(i - 24));
      }
      *(_DWORD *)(a1 + 8) = v11;
      v17 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v17)
      {
        v18 = *(__int128 **)a2;
        v19 = 24 * v17;
        do
        {
          if (*((char *)v18 + v19 - 1) < 0)
            operator delete(*(void **)((char *)v18 + v19 - 24));
          v19 -= 24;
        }
        while (v19);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) < v11)
    {
      if ((_DWORD)v12)
      {
        v20 = *(_QWORD *)a1;
        v21 = 24 * v12;
        do
        {
          if (*(char *)(v20 + v21 - 1) < 0)
            operator delete(*(void **)(v20 + v21 - 24));
          v21 -= 24;
        }
        while (v21);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C618A5D0(a1, v11);
    }
    else if ((_DWORD)v12)
    {
      sub_1C5057CC0(v4, (__int128 *)((char *)v4 + 24 * v12), *(_QWORD *)a1);
LABEL_39:
      v22 = *(__int128 **)a2;
      v23 = *(unsigned int *)(a2 + 8);
      if (v12 != v23)
      {
        v24 = *(_QWORD *)a1 + 24 * v12;
        v25 = (char *)v22 + 24 * v12;
        v26 = 24 * v23 - 24 * v12;
        do
        {
          v27 = *(_OWORD *)v25;
          *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
          *(_OWORD *)v24 = v27;
          v24 += 24;
          *((_QWORD *)v25 + 1) = 0;
          *((_QWORD *)v25 + 2) = 0;
          *(_QWORD *)v25 = 0;
          v25 += 24;
          v26 -= 24;
        }
        while (v26);
        v22 = *(__int128 **)a2;
      }
      *(_DWORD *)(a1 + 8) = v11;
      v28 = *v9;
      if ((_DWORD)v28)
      {
        v29 = 24 * v28;
        do
        {
          if (*((char *)v22 + v29 - 1) < 0)
            operator delete(*(void **)((char *)v22 + v29 - 24));
          v29 -= 24;
        }
        while (v29);
      }
      goto LABEL_12;
    }
    v12 = 0;
    goto LABEL_39;
  }
  return a1;
}

char **sub_1C56BFA64(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 136 * v3;
    do
    {
      sub_1C4E01820((char **)&v2[v4 - 112]);
      if (v2[v4 - 113] < 0)
        operator delete(*(void **)&v2[v4 - 136]);
      v4 -= 136;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C56BFADC()
{
  uint64_t v0;
  int v2;
  __int128 v3;

  v0 = sub_1C47AD050((uint64_t)&qword_1ED809F78, 0, 0);
  qword_1ED809FF8 = 0;
  qword_1ED80A000 = 0;
  qword_1ED80A020 = 0;
  unk_1ED80A028 = 0;
  qword_1ED80A018 = 0;
  byte_1ED80A030 = 0;
  unk_1ED80A008 = 0;
  unk_1ED80A010 = &unk_1E819E950;
  qword_1ED809F78 = (uint64_t)&unk_1E819E480;
  qword_1ED80A038 = (uint64_t)&unk_1E819E970;
  qword_1ED80A040[0] = &off_1E7FA8CB8;
  qword_1ED80A058 = (uint64_t)qword_1ED80A040;
  llvm::cl::Option::setArgStr(v0, "extract-blocks-file", 0x13uLL);
  qword_1ED809FA8 = (uint64_t)"filename";
  unk_1ED809FB0 = 8;
  qword_1ED809F98 = (uint64_t)"A file containing list of basic blocks to extract";
  unk_1ED809FA0 = 49;
  word_1ED809F82 = word_1ED809F82 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED809F78);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED809F78, &dword_1C475E000);
  *(_QWORD *)&v3 = "Erase the existing functions";
  *((_QWORD *)&v3 + 1) = 28;
  v2 = 1;
  sub_1C6291C40((uint64_t)&unk_1ED809EB8, "extract-blocks-erase-funcs", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED809EB8, &dword_1C475E000);
}

uint64_t sub_1C56BFC18(uint64_t a1)
{
  llvm::Function *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  char *v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)();
  void (**v32)();
  int64_t v33;
  int v34;
  void (**v35)();
  char *v36;
  unint64_t *v38;
  unint64_t v39;
  llvm::MDNode *v40;
  int v41;
  unsigned int v42;
  uint64_t *v44;
  void (**v45)();
  int v46;
  void *v47;
  void *v48;
  uint64_t v49;
  int v50;
  void *v51;
  void *v52;
  uint64_t v53;
  int v54;
  void *__p;
  void *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  uint64_t v60;
  int v61;
  _BYTE v62[256];
  void (***v63)();
  uint64_t v64[2];
  int v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  _BYTE v70[128];
  void *v71;
  uint64_t v72;
  _BYTE v73[512];
  void *v74;
  uint64_t v75;
  _BYTE v76[512];
  _QWORD **v77;
  _QWORD *v78[4];

  v78[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v46 = 0;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v50 = 0;
  v52 = 0;
  v53 = 0;
  v51 = 0;
  v54 = 0;
  v56 = 0;
  v57 = 0;
  __p = 0;
  sub_1C4DE4490(&v47, 0, 0, 0);
  v50 = 2;
  sub_1C4DE4490(&v51, 0, 0, 0);
  v54 = 3;
  sub_1C4DE4490(&__p, 0, 0, 0);
  v3 = 0;
  v4 = 0;
  v45 = (void (**)())&off_1E8179480;
  v58 = (unint64_t *)v62;
  v59 = (unint64_t *)v62;
  v60 = 32;
  v61 = 0;
  v64[0] = 0;
  v64[1] = 0;
  v63 = &v45;
  v65 = 0;
  v66 = v70;
  v67 = v70;
  v68 = 16;
  v69 = 0;
  v71 = v73;
  v72 = 0x4000000000;
  v74 = v76;
  v75 = 0x4000000000;
  v78[1] = 0;
  v78[0] = 0;
  v77 = v78;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 != a1 + 24)
  {
    while (1)
    {
      if (v5)
        v6 = v5 - 56;
      else
        v6 = 0;
      if (v5 && *(_BYTE *)(v6 + 16) == 3)
      {
        if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_12;
      }
      else if (*(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 72) != v6 + 72 || (*(_BYTE *)(v6 + 34) & 0x80) != 0)
      {
LABEL_12:
        if ((llvm::canTrackArgumentsInterprocedurally((llvm *)v6, v2) & 1) == 0)
        {
          v7 = *(_QWORD *)(v6 + 80);
          if (v7)
            v8 = v7 - 24;
          else
            v8 = 0;
          sub_1C56C0320((uint64_t)&v63, v8);
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == a1 + 24)
      {
        v4 = v75;
        v3 = v72;
        break;
      }
    }
  }
  if (v4 | v3)
  {
    do
    {
      if (v3)
      {
        do
        {
          v9 = *((_QWORD *)v71 + --v3);
          LODWORD(v72) = v3;
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            do
            {
              v11 = *(_QWORD *)(v10 + 24);
              if (v11)
                v12 = *(unsigned __int8 *)(v11 + 16) >= 0x1Cu;
              else
                v12 = 0;
              if (v12)
              {
                v13 = (char *)sub_1C477672C((uint64_t)&v66, *(_QWORD *)(v11 + 40));
                v14 = v67 == v66 ? (uint64_t *)((char *)&v68 + 4) : &v68;
                if (v13 != &v67[8 * *(unsigned int *)v14])
                  sub_1C56C1FFC(&v63, v11);
              }
              v10 = *(_QWORD *)(v10 + 8);
            }
            while (v10);
            v3 = v72;
          }
        }
        while (v3);
        v4 = v75;
      }
      if (!v4)
        break;
      do
      {
        v15 = *((_QWORD *)v74 + --v4);
        LODWORD(v75) = v4;
        v16 = v15 + 40;
        v17 = *(_QWORD *)(v15 + 48);
        if (v17 != v15 + 40)
        {
          do
          {
            if (v17)
              v18 = v17 - 24;
            else
              v18 = 0;
            sub_1C56C1FFC(&v63, v18);
            v17 = *(_QWORD *)(v17 + 8);
          }
          while (v17 != v16);
          v4 = v75;
        }
      }
      while (v4);
      v3 = v72;
    }
    while ((_DWORD)v72);
  }
  v44 = *(uint64_t **)a1;
  if (v59 == v58)
    v19 = (uint64_t *)((char *)&v60 + 4);
  else
    v19 = &v60;
  v20 = *(unsigned int *)v19;
  if (!(_DWORD)v20)
  {
    v21 = v59;
LABEL_50:
    v22 = (char *)&v59[v20];
    if (v21 == (unint64_t *)v22)
    {
      v23 = 0;
      goto LABEL_85;
    }
    v23 = 0;
    v25 = *v21;
    while (1)
    {
      if (!v65)
        goto LABEL_60;
      v26 = *(_QWORD *)(v25 - 32);
      v27 = v26 & 0xFFFFFFFFFFFFFFF9;
      v28 = (v65 - 1) & ((v26 >> 9) ^ v26 & 0xFFFFFFF9);
      v29 = v64[0] + 40 * v28;
      v30 = *(_QWORD *)v29;
      if (v27 != *(_QWORD *)v29)
        break;
LABEL_59:
      if (v28 == v65)
        goto LABEL_60;
      v32 = *(void (***)())(v29 + 16);
      v35 = *(void (***)())(v29 + 24);
      v33 = (char *)v35 - (char *)v32;
      if (v35 != v32)
      {
        if (v33 < 0)
LABEL_100:
          abort();
        v34 = *(_DWORD *)(v29 + 8);
        goto LABEL_66;
      }
LABEL_72:
      v38 = v21 + 1;
      do
      {
        if (v38 == (unint64_t *)v22)
          goto LABEL_85;
        v39 = *v38++;
        v25 = v39;
      }
      while (v39 > 0xFFFFFFFFFFFFFFFDLL);
      v21 = v38 - 1;
    }
    v41 = 1;
    while (v30 != -2)
    {
      v42 = v28 + v41++;
      v28 = v42 & (v65 - 1);
      v29 = v64[0] + 40 * v28;
      v30 = *(_QWORD *)v29;
      if (v27 == *(_QWORD *)v29)
        goto LABEL_59;
    }
LABEL_60:
    v32 = v63[10];
    v31 = v63[11];
    v33 = (char *)v31 - (char *)v32;
    if (v31 != v32)
    {
      if (v33 < 0)
        goto LABEL_100;
      v34 = *((_DWORD *)v63 + 18);
LABEL_66:
      v36 = (char *)operator new(v33);
      memmove(v36, v32, v33);
      if (v34 == 1 && v36 != &v36[8 * (v33 >> 3)])
      {
        v40 = (llvm::MDNode *)llvm::MDBuilder::createCallees(&v44, (llvm::Value *)v36, (8 * (v33 >> 3)) >> 3);
        if (v40 || *(_QWORD *)(v25 + 48) || (*(_BYTE *)(v25 + 23) & 0x20) != 0)
          llvm::Value::setMetadata((llvm::Value *)v25, 23, v40);
        v23 = 1;
      }
      operator delete(v36);
      goto LABEL_72;
    }
    goto LABEL_72;
  }
  v24 = 8 * v20;
  v21 = v59;
  do
  {
    if (*v21 < 0xFFFFFFFFFFFFFFFELL)
      goto LABEL_50;
    ++v21;
    v24 -= 8;
  }
  while (v24);
  v23 = 0;
LABEL_85:
  sub_1C61247C0((uint64_t)&v77, v78[0]);
  if (v74 != v76)
    free(v74);
  if (v71 != v73)
    free(v71);
  if (v67 != v66)
    free(v67);
  sub_1C56C2C78(v64);
  v45 = (void (**)())&off_1E8179480;
  if (v59 != v58)
    free(v59);
  v45 = off_1E81794E0;
  if (__p)
  {
    v56 = __p;
    operator delete(__p);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  return v23 & 1;
}

void llvm::initializeCalledValuePropagationLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E38);
  if (v2 != -1)
  {
    v5[0] = sub_1C56C01CC;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E38, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56C01CC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Called Value Propagation";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "called-value-propagation";
  *(_QWORD *)(v2 + 24) = 24;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32A0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56C3550;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C56C0258(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32A0;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8179540;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831E38);
  if (v3 != -1)
  {
    v7[0] = sub_1C56C01CC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831E38, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void *sub_1C56C0320(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  uint64_t v6;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  if (v5)
  {
    v6 = *(unsigned int *)(a1 + 728);
    if (v6 >= *(_DWORD *)(a1 + 732))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 720, a1 + 736, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 728);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 720) + 8 * v6) = a2;
    ++*(_DWORD *)(a1 + 728);
  }
  return result;
}

_QWORD *sub_1C56C0390(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E8179480;
  v2 = (void *)a1[14];
  if (v2 != (void *)a1[13])
    free(v2);
  *a1 = off_1E81794E0;
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1C56C040C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E8179480;
  v2 = (void *)a1[14];
  if (v2 != (void *)a1[13])
    free(v2);
  *a1 = off_1E81794E0;
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56C0498()
{
  return 0;
}

_QWORD *sub_1C56C04A0@<X0>(uint64_t a1@<X0>, llvm::Function *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int v5;
  unint64_t v6;
  llvm **v7;
  unsigned int v9;
  _QWORD *v10;
  const void *v11;
  uint64_t v12;

  v5 = (a2 >> 1) & 3;
  if (v5 - 1 >= 2)
  {
    if (!v5)
    {
      v7 = (llvm **)((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8);
      v9 = *(unsigned __int8 *)(((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      if (v9 >= 0x1C)
        goto LABEL_15;
      if (v7 && v9 == 21)
      {
        if (llvm::canTrackArgumentsInterprocedurally(v7[3], a2))
          goto LABEL_15;
      }
      else if (v7 && v9 <= 0x14)
      {
        return sub_1C56C18C0(a3, a1, (llvm::Value *)v7);
      }
    }
LABEL_18:
    *(_DWORD *)a3 = *(_DWORD *)(a1 + 40);
    a3[2] = 0;
    a3[3] = 0;
    a3[1] = 0;
    v10 = a3 + 1;
    v11 = *(const void **)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    return sub_1C4DFE394(v10, v11, v12, (v12 - (uint64_t)v11) >> 3);
  }
  v6 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFF8;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_BYTE *)(v6 + 16) == 3)
  {
    if (llvm::canTrackGlobalVariableInterprocedurally((llvm *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8), a2))
    {
      v7 = *(llvm ***)(v6 - 32);
      return sub_1C56C18C0(a3, a1, (llvm::Value *)v7);
    }
    goto LABEL_18;
  }
  if (!v6 || !llvm::canTrackReturnsInterprocedurally((llvm *)((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8), a2))
    goto LABEL_18;
LABEL_15:
  *(_DWORD *)a3 = *(_DWORD *)(a1 + 8);
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  v10 = a3 + 1;
  v11 = *(const void **)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  return sub_1C4DFE394(v10, v11, v12, (v12 - (uint64_t)v11) >> 3);
}

uint64_t sub_1C56C0598()
{
  return 0;
}

void sub_1C56C05A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  const void *v15;
  size_t v16;
  char *v17;
  char *v18;
  const void *v19;
  size_t v20;
  _BOOL4 v21;
  _QWORD *v22;
  const void *v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  _BYTE *v27;
  size_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  const void *v32;
  size_t v33;
  _BOOL4 v34;
  uint64_t ****v35;
  uint64_t ****v36;
  uint64_t ****v37;
  uint64_t ****v38;
  char *v39;
  uint64_t ****v40;
  char *v41;
  unint64_t v42;
  uint64_t ***v43;
  uint64_t ***v44;
  char *v45;
  _BOOL4 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t ****v59;
  uint64_t ***v60;
  char *v61;
  uint64_t ****v62;
  uint64_t ***v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t ****v72;
  uint64_t ***v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t ****v81;
  uint64_t ***v82;
  char *v83;
  char *v84;
  char *v85;
  const void *v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t ****v90;

  v6 = a1;
  v8 = *(_DWORD *)(a1 + 40);
  v9 = *(_BYTE **)(a1 + 48);
  v10 = *(_BYTE **)(a1 + 56);
  v11 = v10 - v9;
  v12 = (v10 - v9) >> 3;
  if (v10 == v9)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    if ((v11 & 0x8000000000000000) != 0)
      goto LABEL_143;
    v13 = (char *)operator new(v10 - v9);
    memmove(v13, v9, v10 - v9);
    v14 = &v13[8 * v12];
  }
  if (*(_DWORD *)a2 != v8
    || (v15 = *(const void **)(a2 + 8), v16 = *(_QWORD *)(a2 + 16) - (_QWORD)v15, v16 != v14 - v13)
    || memcmp(v15, v13, v16))
  {
    if (v10 == v9)
    {
      v17 = 0;
      v18 = 0;
    }
    else
    {
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_143;
      v17 = (char *)operator new(v10 - v9);
      memmove(v17, v9, v11);
      v18 = &v17[8 * v12];
    }
    if (*(_DWORD *)a3 == v8
      && (v19 = *(const void **)(a3 + 8), v20 = *(_QWORD *)(a3 + 16) - (_QWORD)v19, v20 == v18 - v17))
    {
      v21 = memcmp(v19, v17, v20) == 0;
      if (!v17)
      {
LABEL_18:
        if (!v13)
          goto LABEL_20;
        goto LABEL_19;
      }
    }
    else
    {
      v21 = 0;
      if (!v17)
        goto LABEL_18;
    }
    operator delete(v17);
    goto LABEL_18;
  }
  v21 = 1;
  if (v13)
LABEL_19:
    operator delete(v13);
LABEL_20:
  if (v21)
  {
    *(_DWORD *)a4 = *(_DWORD *)(v6 + 40);
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v22 = (_QWORD *)(a4 + 8);
    v23 = *(const void **)(v6 + 48);
    v24 = *(_QWORD *)(v6 + 56);
LABEL_34:
    sub_1C4DFE394(v22, v23, v24, (v24 - (uint64_t)v23) >> 3);
    return;
  }
  v25 = *(_DWORD *)(v6 + 8);
  v26 = *(_BYTE **)(v6 + 16);
  v27 = *(_BYTE **)(v6 + 24);
  v28 = v27 - v26;
  v29 = (v27 - v26) >> 3;
  if (v27 == v26)
  {
    v31 = 0;
    v30 = 0;
  }
  else
  {
    if ((v28 & 0x8000000000000000) != 0)
      goto LABEL_143;
    v30 = (char *)operator new(v27 - v26);
    memmove(v30, v26, v27 - v26);
    v31 = &v30[8 * v29];
  }
  if (*(_DWORD *)a2 != v25
    || (v32 = *(const void **)(a2 + 8), v33 = *(_QWORD *)(a2 + 16) - (_QWORD)v32, v33 != v31 - v30)
    || memcmp(v32, v30, v33))
  {
    v34 = 0;
    goto LABEL_30;
  }
  if (v27 == v26)
  {
    v85 = 0;
    v84 = 0;
    goto LABEL_137;
  }
  if ((v28 & 0x8000000000000000) != 0)
LABEL_143:
    abort();
  v84 = (char *)operator new(v27 - v26);
  memmove(v84, v26, v28);
  v85 = &v84[8 * v29];
LABEL_137:
  v34 = *(_DWORD *)a3 == v25
     && (v86 = *(const void **)(a3 + 8), v87 = *(_QWORD *)(a3 + 16) - (_QWORD)v86, v87 == v85 - v84)
     && memcmp(v86, v84, v87) == 0;
  if (v84)
    operator delete(v84);
LABEL_30:
  if (v30)
    operator delete(v30);
  if (v34)
  {
    *(_DWORD *)a4 = *(_DWORD *)(v6 + 8);
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v22 = (_QWORD *)(a4 + 8);
    v23 = *(const void **)(v6 + 16);
    v24 = *(_QWORD *)(v6 + 24);
    goto LABEL_34;
  }
  v88 = a4;
  v35 = *(uint64_t *****)(a2 + 8);
  v36 = *(uint64_t *****)(a2 + 16);
  v38 = *(uint64_t *****)(a3 + 8);
  v37 = *(uint64_t *****)(a3 + 16);
  v90 = v37;
  if (v35 == v36)
  {
    v41 = 0;
    v45 = 0;
    v39 = 0;
LABEL_82:
    if (v38 == v37)
    {
      v65 = v45;
    }
    else
    {
      do
      {
        if (v45 >= v41)
        {
          v66 = (v45 - v39) >> 3;
          v67 = v66 + 1;
          if ((unint64_t)(v66 + 1) >> 61)
            goto LABEL_143;
          v68 = v41 - v39;
          v69 = (v41 - v39) >> 2;
          if (v69 > v67)
            v67 = v69;
          if (v68 >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v70 = v67;
          if (v70)
          {
            if (v70 >> 61)
              goto LABEL_144;
            v71 = (char *)operator new(8 * v70);
          }
          else
          {
            v71 = 0;
          }
          v72 = (uint64_t ****)&v71[8 * v66];
          *v72 = *v38;
          v65 = (char *)(v72 + 1);
          if (v45 == v39)
          {
            v37 = v90;
          }
          else
          {
            v37 = v90;
            do
            {
              v73 = (uint64_t ***)*((_QWORD *)v45 - 1);
              v45 -= 8;
              *--v72 = v73;
            }
            while (v45 != v39);
          }
          v41 = &v71[8 * v70];
          if (v39)
          {
            v74 = &v71[8 * v70];
            operator delete(v39);
            v41 = v74;
          }
          v39 = (char *)v72;
        }
        else
        {
          *(_QWORD *)v45 = *v38;
          v65 = v45 + 8;
        }
        ++v38;
        v45 = v65;
      }
      while (v38 != v37);
    }
  }
  else
  {
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v89 = v6;
    while (v38 != v37)
    {
      v42 = (unint64_t)v41;
      v43 = *v38;
      v44 = *v35;
      if (sub_1C56C196C(*v38, *v35))
      {
        v41 = (char *)v42;
        if ((unint64_t)v40 >= v42)
        {
          v47 = ((char *)v40 - v39) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
            goto LABEL_143;
          v49 = v41 - v39;
          v50 = (v41 - v39) >> 2;
          if (v50 > v48)
            v48 = v50;
          if (v49 >= 0x7FFFFFFFFFFFFFF8)
            v51 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v51 = v48;
          if (v51)
          {
            if (v51 >> 61)
              goto LABEL_144;
            v52 = (char *)operator new(8 * v51);
            v43 = *v38;
          }
          else
          {
            v52 = 0;
          }
          v59 = (uint64_t ****)&v52[8 * v47];
          *v59 = v43;
          v45 = (char *)(v59 + 1);
          while (v40 != (uint64_t ****)v39)
          {
            v60 = *--v40;
            *--v59 = v60;
          }
          v41 = &v52[8 * v51];
          if (v39)
          {
            v61 = &v52[8 * v51];
            operator delete(v39);
            v41 = v61;
          }
          v39 = (char *)v59;
          v37 = v90;
        }
        else
        {
          *v40 = v43;
          v45 = (char *)(v40 + 1);
        }
        ++v38;
      }
      else
      {
        v46 = sub_1C56C196C(v44, v43);
        v41 = (char *)v42;
        if ((unint64_t)v40 >= v42)
        {
          v53 = ((char *)v40 - v39) >> 3;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 61)
            goto LABEL_143;
          v55 = v41 - v39;
          v56 = (v41 - v39) >> 2;
          if (v56 > v54)
            v54 = v56;
          if (v55 >= 0x7FFFFFFFFFFFFFF8)
            v57 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v57 = v54;
          if (v57)
          {
            if (v57 >> 61)
LABEL_144:
              sub_1C4764EE4();
            v58 = (char *)operator new(8 * v57);
            v44 = *v35;
          }
          else
          {
            v58 = 0;
          }
          v62 = (uint64_t ****)&v58[8 * v53];
          *v62 = v44;
          v45 = (char *)(v62 + 1);
          while (v40 != (uint64_t ****)v39)
          {
            v63 = *--v40;
            *--v62 = v63;
          }
          v41 = &v58[8 * v57];
          if (v39)
          {
            v64 = &v58[8 * v57];
            operator delete(v39);
            v41 = v64;
          }
          v39 = (char *)v62;
          v6 = v89;
          v37 = v90;
        }
        else
        {
          *v40 = v44;
          v45 = (char *)(v40 + 1);
        }
        v38 += !v46;
        ++v35;
      }
      v40 = (uint64_t ****)v45;
      if (v35 == v36)
        goto LABEL_82;
    }
    if (v35 == v36)
    {
      v65 = (char *)v40;
    }
    else
    {
      do
      {
        if (v40 >= (uint64_t ****)v41)
        {
          v75 = ((char *)v40 - v39) >> 3;
          v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 61)
            goto LABEL_143;
          v77 = v41 - v39;
          v78 = (v41 - v39) >> 2;
          if (v78 > v76)
            v76 = v78;
          if (v77 >= 0x7FFFFFFFFFFFFFF8)
            v79 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v79 = v76;
          if (v79)
          {
            if (v79 >> 61)
              goto LABEL_144;
            v80 = (char *)operator new(8 * v79);
          }
          else
          {
            v80 = 0;
          }
          v81 = (uint64_t ****)&v80[8 * v75];
          *v81 = *v35;
          v65 = (char *)(v81 + 1);
          while (v40 != (uint64_t ****)v39)
          {
            v82 = *--v40;
            *--v81 = v82;
          }
          v41 = &v80[8 * v79];
          if (v39)
          {
            v83 = &v80[8 * v79];
            operator delete(v39);
            v41 = v83;
          }
          v39 = (char *)v81;
        }
        else
        {
          *v40 = *v35;
          v65 = (char *)(v40 + 1);
        }
        ++v35;
        v40 = (uint64_t ****)v65;
      }
      while (v35 != v36);
    }
  }
  if (dword_1ED80A0E0 >= (unint64_t)((v65 - v39) >> 3))
  {
    *(_DWORD *)v88 = 1;
    *(_QWORD *)(v88 + 8) = v39;
    *(_QWORD *)(v88 + 16) = v65;
    *(_QWORD *)(v88 + 24) = v41;
  }
  else
  {
    *(_DWORD *)v88 = *(_DWORD *)(v6 + 40);
    *(_QWORD *)(v88 + 16) = 0;
    *(_QWORD *)(v88 + 24) = 0;
    *(_QWORD *)(v88 + 8) = 0;
    sub_1C4DFE394((_QWORD *)(v88 + 8), *(const void **)(v6 + 48), *(_QWORD *)(v6 + 56), (uint64_t)(*(_QWORD *)(v6 + 56) - *(_QWORD *)(v6 + 48)) >> 3);
    if (v39)
      operator delete(v39);
  }
}

void sub_1C56C0C4C(uint64_t a1, _DWORD *a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  int64_t v31;
  unint64_t *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char v49[8];
  void *v50;
  void *v51;
  _DWORD *v52;
  void *v53;
  void *v54;
  _DWORD *v55;
  char v56[8];
  void *__p;
  void *v58;
  char v59[8];
  void *v60;
  void *v61;
  _DWORD *v62;
  __int128 v63;
  uint64_t v64;

  v8 = *((unsigned __int8 *)a2 + 16);
  if (v8 <= 0x3C)
  {
    if (v8 != 29)
    {
      if (v8 != 33)
      {
        if (v8 == 60)
        {
          v52 = a2;
          v9 = *((_QWORD *)a2 - 4);
          if (v9 && *(_BYTE *)(v9 + 16) == 3)
          {
            v10 = v9 & 0xFFFFFFFFFFFFFFF9 | 4;
            sub_1C56C1BB8((uint64_t)v59, a4, (unint64_t)a2);
            v11 = a4;
            v12 = v10;
            goto LABEL_44;
          }
          v14 = *(_DWORD *)(a1 + 40);
          v30 = *(_BYTE **)(a1 + 48);
          v29 = *(_BYTE **)(a1 + 56);
          v31 = v29 - v30;
          if (v29 == v30)
          {
            v18 = 0;
            v19 = 0;
            goto LABEL_52;
          }
          if ((v31 & 0x8000000000000000) == 0)
          {
            v18 = (char *)operator new(v29 - v30);
            v19 = &v18[8 * (v31 >> 3)];
            memmove(v18, v30, v31);
LABEL_52:
            v32 = (unint64_t *)&v52;
            goto LABEL_53;
          }
LABEL_82:
          abort();
        }
        goto LABEL_28;
      }
      goto LABEL_11;
    }
    v20 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 56);
    if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v20 + 24) + 16) + 8) == 7)
      return;
    v21 = a2[5] & 0x7FFFFFF;
    if ((_DWORD)v21)
      v22 = *(_QWORD *)&a2[-8 * v21] & 0xFFFFFFFFFFFFFFF9;
    else
      v22 = 0;
    v25 = v20 & 0xFFFFFFFFFFFFFFF9 | 2;
    goto LABEL_42;
  }
  if (v8 == 61)
  {
    v23 = *((_QWORD *)a2 - 4);
    if (v23)
      v24 = *(_BYTE *)(v23 + 16) == 3;
    else
      v24 = 0;
    if (!v24)
      return;
    v22 = *((_QWORD *)a2 - 8) & 0xFFFFFFFFFFFFFFF9;
    v25 = v23 & 0xFFFFFFFFFFFFFFF9 | 4;
LABEL_42:
    v52 = (_DWORD *)v25;
    goto LABEL_43;
  }
  if (v8 == 85)
  {
    v52 = a2;
    v22 = *((_QWORD *)a2 - 8) & 0xFFFFFFFFFFFFFFF9;
    v25 = *((_QWORD *)a2 - 4) & 0xFFFFFFFFFFFFFFF9;
LABEL_43:
    sub_1C56C1BB8((uint64_t)v59, a4, v22);
    v11 = a4;
    v12 = v25;
LABEL_44:
    sub_1C56C1BB8((uint64_t)v56, v11, v12);
    (*(void (**)(_DWORD **__return_ptr, uint64_t, char *, char *))(*(_QWORD *)a1 + 40))(&v62, a1, v59, v56);
    v33 = sub_1C56C1AD4(a3, (unint64_t *)&v52);
    *(_DWORD *)v33 = (_DWORD)v62;
    v34 = *(void **)(v33 + 8);
    if (v34)
    {
      *(_QWORD *)(v33 + 16) = v34;
      operator delete(v34);
      *(_QWORD *)(v33 + 8) = 0;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = 0;
    }
    *(_OWORD *)(v33 + 8) = v63;
    *(_QWORD *)(v33 + 24) = v64;
    v63 = 0uLL;
    v64 = 0;
    if (__p)
    {
      v58 = __p;
      operator delete(__p);
    }
    v35 = v60;
    if (v60)
    {
      v61 = v60;
LABEL_50:
      operator delete(v35);
      return;
    }
    return;
  }
  if (v8 != 84)
  {
LABEL_28:
    if (!*((_QWORD *)a2 + 1))
      return;
    v62 = a2;
    v14 = *(_DWORD *)(a1 + 40);
    v27 = *(_BYTE **)(a1 + 48);
    v26 = *(_BYTE **)(a1 + 56);
    v28 = v26 - v27;
    if (v26 == v27)
    {
      v18 = 0;
      v19 = 0;
    }
    else
    {
      if (v28 < 0)
        goto LABEL_82;
      v18 = (char *)operator new(v26 - v27);
      v19 = &v18[8 * (v28 >> 3)];
      memmove(v18, v27, v28);
    }
    v32 = (unint64_t *)&v62;
LABEL_53:
    v36 = sub_1C56C1AD4(a3, v32);
    *(_DWORD *)v36 = v14;
    v37 = *(void **)(v36 + 8);
    if (v37)
    {
      *(_QWORD *)(v36 + 16) = v37;
      operator delete(v37);
    }
    *(_QWORD *)(v36 + 8) = v18;
    *(_QWORD *)(v36 + 16) = v19;
    *(_QWORD *)(v36 + 24) = v19;
    return;
  }
LABEL_11:
  v13 = *((_QWORD *)a2 - 4);
  if (!v13 || *(_BYTE *)(v13 + 16) || *(_QWORD *)(v13 + 24) != *((_QWORD *)a2 + 9))
  {
    v55 = a2;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 104), (uint64_t)a2);
LABEL_15:
    if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 7)
      return;
    v14 = *(_DWORD *)(a1 + 40);
    v16 = *(_BYTE **)(a1 + 48);
    v15 = *(_BYTE **)(a1 + 56);
    v17 = v15 - v16;
    if (v15 == v16)
    {
      v18 = 0;
      v19 = 0;
    }
    else
    {
      if (v17 < 0)
        goto LABEL_82;
      v18 = (char *)operator new(v15 - v16);
      v19 = &v18[8 * (v17 >> 3)];
      memmove(v18, v16, v17);
    }
    v32 = (unint64_t *)&v55;
    goto LABEL_53;
  }
  v55 = a2;
  if (!llvm::canTrackReturnsInterprocedurally((llvm *)v13, (llvm::Function *)a2))
    goto LABEL_15;
  v38 = *(_QWORD *)(v13 + 80);
  if (v38)
    v39 = v38 - 24;
  else
    v39 = 0;
  sub_1C56C0320((uint64_t)a4, v39);
  if ((*(_WORD *)(v13 + 18) & 1) == 0)
  {
    v40 = *(_QWORD *)(v13 + 88);
LABEL_63:
    v41 = v40;
    goto LABEL_64;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)v13);
  v40 = *(_QWORD *)(v13 + 88);
  if ((*(_WORD *)(v13 + 18) & 1) == 0)
    goto LABEL_63;
  llvm::Function::BuildLazyArguments((llvm::Function *)v13);
  v41 = *(_QWORD *)(v13 + 88);
LABEL_64:
  v48 = v41 + 40 * *(_QWORD *)(v13 + 96);
  if (v40 != v48)
  {
    v42 = v40;
    do
    {
      v52 = (_DWORD *)(v42 & 0xFFFFFFFFFFFFFFF9);
      v43 = *(_QWORD *)&a2[8 * *(unsigned int *)(v40 + 32) + -8 * (a2[5] & 0x7FFFFFF)] & 0xFFFFFFFFFFFFFFF9;
      sub_1C56C1BB8((uint64_t)v59, a4, v42 & 0xFFFFFFFFFFFFFFF9);
      sub_1C56C1BB8((uint64_t)v56, a4, v43);
      (*(void (**)(_DWORD **__return_ptr, uint64_t, char *, char *))(*(_QWORD *)a1 + 40))(&v62, a1, v59, v56);
      v44 = sub_1C56C1AD4(a3, (unint64_t *)&v52);
      *(_DWORD *)v44 = (_DWORD)v62;
      v45 = *(void **)(v44 + 8);
      if (v45)
      {
        *(_QWORD *)(v44 + 16) = v45;
        operator delete(v45);
        *(_QWORD *)(v44 + 8) = 0;
        *(_QWORD *)(v44 + 16) = 0;
        *(_QWORD *)(v44 + 24) = 0;
      }
      *(_OWORD *)(v44 + 8) = v63;
      *(_QWORD *)(v44 + 24) = v64;
      v63 = 0uLL;
      v64 = 0;
      if (__p)
      {
        v58 = __p;
        operator delete(__p);
      }
      if (v60)
      {
        v61 = v60;
        operator delete(v60);
      }
      v40 += 40;
      v42 += 40;
    }
    while (v40 != v48);
  }
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 7)
  {
    sub_1C56C1BB8((uint64_t)&v52, a4, (unint64_t)a2);
    sub_1C56C1BB8((uint64_t)v49, a4, v13 & 0xFFFFFFFFFFFFFFF9 | 2);
    (*(void (**)(_DWORD **__return_ptr, uint64_t, _DWORD **, char *))(*(_QWORD *)a1 + 40))(&v62, a1, &v52, v49);
    v46 = sub_1C56C1AD4(a3, (unint64_t *)&v55);
    *(_DWORD *)v46 = (_DWORD)v62;
    v47 = *(void **)(v46 + 8);
    if (v47)
    {
      *(_QWORD *)(v46 + 16) = v47;
      operator delete(v47);
      *(_QWORD *)(v46 + 8) = 0;
      *(_QWORD *)(v46 + 16) = 0;
      *(_QWORD *)(v46 + 24) = 0;
    }
    *(_OWORD *)(v46 + 8) = v63;
    *(_QWORD *)(v46 + 24) = v64;
    v63 = 0uLL;
    v64 = 0;
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    v35 = v53;
    if (v53)
    {
      v54 = v53;
      goto LABEL_50;
    }
  }
}

void sub_1C56C11D0(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  const void *v12;
  size_t v13;
  _BOOL4 v14;
  uint64_t v15;
  const char *v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  const void *v23;
  size_t v24;
  _BOOL4 v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  int64_t v29;
  char *v30;
  char *v31;
  const void *v32;
  size_t v33;
  _BOOL4 v34;
  unint64_t v35;
  int v36;
  const char *v37;

  v6 = *(_DWORD *)(a1 + 8);
  v8 = *(_BYTE **)(a1 + 16);
  v7 = *(_BYTE **)(a1 + 24);
  v9 = v7 - v8;
  if (v7 == v8)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v9 < 0)
      goto LABEL_48;
    v10 = (char *)operator new(v7 - v8);
    memmove(v10, v8, v9);
    v11 = &v10[8 * (v9 >> 3)];
  }
  if (*(_DWORD *)a2 != v6
    || (v12 = *(const void **)(a2 + 8), v13 = *(_QWORD *)(a2 + 16) - (_QWORD)v12, v13 != v11 - v10))
  {
    v14 = 0;
    if (!v10)
      goto LABEL_11;
    goto LABEL_10;
  }
  v14 = memcmp(v12, v10, v13) == 0;
  if (v10)
LABEL_10:
    operator delete(v10);
LABEL_11:
  if (v14)
  {
    v15 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v15) <= 0xA)
    {
      v16 = "Undefined  ";
LABEL_42:
      llvm::raw_ostream::write(a3, v16, 0xBuLL);
      return;
    }
    v36 = 538993765;
    v37 = "Undefined  ";
    goto LABEL_47;
  }
  v17 = *(_DWORD *)(a1 + 40);
  v19 = *(_BYTE **)(a1 + 48);
  v18 = *(_BYTE **)(a1 + 56);
  v20 = v18 - v19;
  if (v18 == v19)
  {
    v22 = 0;
    v21 = 0;
  }
  else
  {
    if (v20 < 0)
      goto LABEL_48;
    v21 = (char *)operator new(v18 - v19);
    memmove(v21, v19, v20);
    v22 = &v21[8 * (v20 >> 3)];
  }
  if (*(_DWORD *)a2 != v17
    || (v23 = *(const void **)(a2 + 8), v24 = *(_QWORD *)(a2 + 16) - (_QWORD)v23, v24 != v22 - v21))
  {
    v25 = 0;
    if (!v21)
      goto LABEL_24;
    goto LABEL_23;
  }
  v25 = memcmp(v23, v21, v24) == 0;
  if (v21)
LABEL_23:
    operator delete(v21);
LABEL_24:
  if (!v25)
  {
    v26 = *(_DWORD *)(a1 + 72);
    v28 = *(_BYTE **)(a1 + 80);
    v27 = *(_BYTE **)(a1 + 88);
    v29 = v27 - v28;
    if (v27 == v28)
    {
      v31 = 0;
      v30 = 0;
      goto LABEL_31;
    }
    if ((v29 & 0x8000000000000000) == 0)
    {
      v30 = (char *)operator new(v27 - v28);
      memmove(v30, v28, v29);
      v31 = &v30[8 * (v29 >> 3)];
LABEL_31:
      if (*(_DWORD *)a2 == v26
        && (v32 = *(const void **)(a2 + 8), v33 = *(_QWORD *)(a2 + 16) - (_QWORD)v32, v33 == v31 - v30))
      {
        v34 = memcmp(v32, v30, v33) == 0;
        if (!v30)
        {
LABEL_37:
          v15 = *((_QWORD *)a3 + 4);
          v35 = *((_QWORD *)a3 + 3) - v15;
          if (v34)
          {
            if (v35 <= 0xA)
            {
              v16 = "Untracked  ";
              goto LABEL_42;
            }
            v36 = 538993765;
            v37 = "Untracked  ";
          }
          else
          {
            if (v35 <= 0xA)
            {
              v16 = "FunctionSet";
              goto LABEL_42;
            }
            v36 = 1952797550;
            v37 = "FunctionSet";
          }
          goto LABEL_47;
        }
      }
      else
      {
        v34 = 0;
        if (!v30)
          goto LABEL_37;
      }
      operator delete(v30);
      goto LABEL_37;
    }
LABEL_48:
    abort();
  }
  v15 = *((_QWORD *)a3 + 4);
  if ((unint64_t)(*((_QWORD *)a3 + 3) - v15) <= 0xA)
  {
    v16 = "Overdefined";
    goto LABEL_42;
  }
  v36 = 1684369001;
  v37 = "Overdefined";
LABEL_47:
  *(_DWORD *)(v15 + 7) = v36;
  *(_QWORD *)v15 = *(_QWORD *)v37;
  *((_QWORD *)a3 + 4) += 11;
}

void sub_1C56C1498(int a1, uint64_t a2, llvm::raw_ostream *a3)
{
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value **v13;
  llvm::Value *v14;
  int v15;
  int v16;
  size_t *v17;
  const void *v18;
  size_t v19;
  size_t v20;
  void *v21;
  int v22;

  v5 = (a2 >> 1) & 3;
  if (v5 == 2)
  {
    v6 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v6) <= 5)
    {
      v7 = "<mem> ";
      goto LABEL_10;
    }
    *(_WORD *)(v6 + 4) = 8254;
    v22 = 1835363644;
  }
  else if (v5 == 1)
  {
    v6 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v6) <= 5)
    {
      v7 = "<ret> ";
      goto LABEL_10;
    }
    *(_WORD *)(v6 + 4) = 8254;
    v22 = 1952805436;
  }
  else
  {
    if (v5)
      goto LABEL_11;
    v6 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v6) <= 5)
    {
      v7 = "<reg> ";
LABEL_10:
      llvm::raw_ostream::write(a3, v7, 6uLL);
      goto LABEL_11;
    }
    *(_WORD *)(v6 + 4) = 8254;
    v22 = 1734701628;
  }
  *(_DWORD *)v6 = v22;
  *((_QWORD *)a3 + 4) += 6;
LABEL_11:
  v8 = (llvm::Value *)(a2 & 0xFFFFFFFFFFFFFFF8);
  if (*(_BYTE *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16))
  {
    llvm::Value::print(v8, a3, 0);
    return;
  }
  if ((*((_BYTE *)v8 + 23) & 0x10) != 0)
  {
    v9 = ***(_QWORD ***)v8;
    v10 = *(_QWORD *)(v9 + 152);
    v11 = *(unsigned int *)(v9 + 168);
    if ((_DWORD)v11)
    {
      LODWORD(v12) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v13 = (llvm::Value **)(v10 + 16 * v12);
      v14 = *v13;
      if (*v13 == v8)
        goto LABEL_21;
      v15 = 1;
      while (v14 != (llvm::Value *)-4096)
      {
        v16 = v12 + v15++;
        v12 = v16 & (v11 - 1);
        v14 = *(llvm::Value **)(v10 + 16 * v12);
        if (v14 == v8)
        {
          v13 = (llvm::Value **)(v10 + 16 * v12);
          goto LABEL_21;
        }
      }
    }
    v13 = (llvm::Value **)(v10 + 16 * v11);
LABEL_21:
    v17 = (size_t *)v13[1];
    v20 = *v17;
    v18 = v17 + 2;
    v19 = v20;
    v21 = (void *)*((_QWORD *)a3 + 4);
    if (v20 <= *((_QWORD *)a3 + 3) - (_QWORD)v21)
    {
      if (v19)
      {
        memcpy(v21, v18, v19);
        *((_QWORD *)a3 + 4) += v19;
      }
    }
    else
    {
      llvm::raw_ostream::write(a3, (const char *)v18, v19);
    }
  }
}

uint64_t sub_1C56C1650()
{
  return 0;
}

_QWORD *sub_1C56C1660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return sub_1C4DFE394((_QWORD *)(a2 + 8), *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
}

_QWORD *sub_1C56C1684@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return sub_1C4DFE394((_QWORD *)(a2 + 8), *(const void **)(a1 + 48), *(_QWORD *)(a1 + 56), (uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3);
}

llvm::raw_ostream *sub_1C56C16A8(llvm::raw_ostream *result, int *a2, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  const void *v12;
  void *v13;
  const char *v14;
  llvm::raw_ostream *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;

  v5 = result;
  v6 = *a2;
  if (*a2 == *((_DWORD *)result + 2))
  {
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 1);
    v7 = *((_QWORD *)a2 + 2) - (_QWORD)result;
    v8 = (const void *)*((_QWORD *)v5 + 2);
    if (v7 == *((_QWORD *)v5 + 3) - (_QWORD)v8)
    {
      result = (llvm::raw_ostream *)memcmp(result, v8, v7);
      if (!(_DWORD)result)
      {
        v17 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 8)
        {
          v14 = "undefined";
LABEL_19:
          v15 = this;
          v16 = 9;
          return llvm::raw_ostream::write(v15, v14, v16);
        }
        v20 = "undefined";
LABEL_25:
        *(_BYTE *)(v17 + 8) = 100;
        *(_QWORD *)v17 = *(_QWORD *)v20;
        v19 = *((_QWORD *)this + 4) + 9;
        goto LABEL_21;
      }
    }
  }
  if (v6 != *((_DWORD *)v5 + 10)
    || (result = (llvm::raw_ostream *)*((_QWORD *)a2 + 1),
        v9 = *((_QWORD *)a2 + 2) - (_QWORD)result,
        v10 = (const void *)*((_QWORD *)v5 + 6),
        v9 != *((_QWORD *)v5 + 7) - (_QWORD)v10)
    || (result = (llvm::raw_ostream *)memcmp(result, v10, v9), (_DWORD)result))
  {
    if (v6 != *((_DWORD *)v5 + 18)
      || (result = (llvm::raw_ostream *)*((_QWORD *)a2 + 1),
          v11 = *((_QWORD *)a2 + 2) - (_QWORD)result,
          v12 = (const void *)*((_QWORD *)v5 + 10),
          v11 != *((_QWORD *)v5 + 11) - (_QWORD)v12)
      || (result = (llvm::raw_ostream *)memcmp(result, v12, v11), (_DWORD)result))
    {
      v13 = (void *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v13 <= 0x14uLL)
      {
        v14 = "unknown lattice value";
        v15 = this;
        v16 = 21;
        return llvm::raw_ostream::write(v15, v14, v16);
      }
      qmemcpy(v13, "unknown lattice value", 21);
      v19 = *((_QWORD *)this + 4) + 21;
      goto LABEL_21;
    }
    v17 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v17) <= 8)
    {
      v14 = "untracked";
      goto LABEL_19;
    }
    v20 = "untracked";
    goto LABEL_25;
  }
  v18 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v18) <= 0xA)
  {
    v14 = "overdefined";
    v15 = this;
    v16 = 11;
    return llvm::raw_ostream::write(v15, v14, v16);
  }
  *(_DWORD *)(v18 + 7) = 1684369001;
  *(_QWORD *)v18 = *(_QWORD *)"overdefined";
  v19 = *((_QWORD *)this + 4) + 11;
LABEL_21:
  *((_QWORD *)this + 4) = v19;
  return result;
}

double sub_1C56C1870(int a1, int a2, llvm::raw_ostream *this)
{
  uint64_t v3;
  double result;

  v3 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v3) > 0x12)
  {
    *(_DWORD *)(v3 + 15) = 2036689696;
    result = *(double *)"unknown lattice key";
    *(_OWORD *)v3 = *(_OWORD *)"unknown lattice key";
    *((_QWORD *)this + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(this, "unknown lattice key", 0x13uLL);
  }
  return result;
}

_QWORD *sub_1C56C18C0(_QWORD *result, uint64_t a2, llvm::Value *this)
{
  _QWORD *v3;
  llvm::Value *v5;
  llvm::Value *v6;
  _QWORD *v7;

  v3 = result;
  if (*((_BYTE *)this + 16) == 19)
  {
    *(_DWORD *)result = 1;
    result[2] = 0;
    result[3] = 0;
    result[1] = 0;
  }
  else
  {
    v5 = llvm::Value::stripPointerCasts(this);
    if (!v5 || (v6 = v5, *((_BYTE *)v5 + 16)))
    {
      *(_DWORD *)v3 = *(_DWORD *)(a2 + 40);
      v3[2] = 0;
      v3[3] = 0;
      v3[1] = 0;
      return sub_1C4DFE394(v3 + 1, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
    }
    else
    {
      v7 = operator new(8uLL);
      v3[1] = v7;
      *v7 = v6;
      result = v7 + 1;
      *(_DWORD *)v3 = 1;
      v3[2] = result;
      v3[3] = result;
    }
  }
  return result;
}

BOOL sub_1C56C196C(uint64_t ***a1, uint64_t ***a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ****v6;
  uint64_t ***v7;
  int v8;
  int v9;
  uint64_t ***v10;
  char *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ****v18;
  uint64_t ***v19;
  int v20;
  int v21;
  uint64_t ***v22;
  char *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  int v27;
  int v28;

  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v2 = ***a1;
    v3 = *(_QWORD *)(v2 + 152);
    v4 = *(unsigned int *)(v2 + 168);
    if ((_DWORD)v4)
    {
      LODWORD(v5) = (v4 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v6 = (uint64_t ****)(v3 + 16 * v5);
      v7 = *v6;
      if (*v6 == a1)
      {
LABEL_9:
        v10 = v6[1];
        v13 = (size_t)*v10;
        v11 = (char *)(v10 + 2);
        v12 = v13;
        goto LABEL_10;
      }
      v8 = 1;
      while (v7 != (uint64_t ***)-4096)
      {
        v9 = v5 + v8++;
        v5 = v9 & (v4 - 1);
        v7 = *(uint64_t ****)(v3 + 16 * v5);
        if (v7 == a1)
        {
          v6 = (uint64_t ****)(v3 + 16 * v5);
          goto LABEL_9;
        }
      }
    }
    v6 = (uint64_t ****)(v3 + 16 * v4);
    goto LABEL_9;
  }
  v12 = 0;
  v11 = &byte_1C871356D;
LABEL_10:
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v14 = ***a2;
    v15 = *(_QWORD *)(v14 + 152);
    v16 = *(unsigned int *)(v14 + 168);
    if ((_DWORD)v16)
    {
      LODWORD(v17) = (v16 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v18 = (uint64_t ****)(v15 + 16 * v17);
      v19 = *v18;
      if (*v18 == a2)
      {
LABEL_18:
        v22 = v18[1];
        v25 = (size_t)*v22;
        v23 = (char *)(v22 + 2);
        v24 = v25;
        goto LABEL_19;
      }
      v20 = 1;
      while (v19 != (uint64_t ***)-4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(uint64_t ****)(v15 + 16 * v17);
        if (v19 == a2)
        {
          v18 = (uint64_t ****)(v15 + 16 * v17);
          goto LABEL_18;
        }
      }
    }
    v18 = (uint64_t ****)(v15 + 16 * v16);
    goto LABEL_18;
  }
  v24 = 0;
  v23 = &byte_1C871356D;
LABEL_19:
  if (v24 >= v12)
    v26 = v12;
  else
    v26 = v24;
  if (v26 && (v27 = memcmp(v11, v23, v26)) != 0)
  {
    v28 = (v27 >> 31) | 1;
  }
  else
  {
    if (v12 < v24)
      v28 = -1;
    else
      v28 = 1;
    if (v12 == v24)
      v28 = 0;
  }
  return v28 == -1;
}

uint64_t sub_1C56C1AD4(uint64_t a1, unint64_t *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v9;

  v9 = 0;
  v4 = sub_1C56C1DF8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v5 = v9;
  if ((v4 & 1) != 0)
    return v5 + 8;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C56C1E90(a1, v7);
    v9 = 0;
    sub_1C56C1DF8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v5 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v5 != -2)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v5 = *a2;
  *(_DWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  return v5 + 8;
}

void sub_1C56C1BB8(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  const void *v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  void *v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  unint64_t v28;

  v28 = a3;
  v7 = (uint64_t)(a2 + 1);
  v6 = a2[1];
  v25 = 0;
  v8 = sub_1C56C1DF8(v6, *((_DWORD *)a2 + 6), a3, &v25);
  v9 = v25;
  if (v8)
    v10 = v25 == *(_QWORD *)v7 + 40 * *(unsigned int *)(v7 + 16);
  else
    v10 = 1;
  if (!v10)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v25 + 8);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v12 = (_QWORD *)(a1 + 8);
    v13 = *(const void **)(v9 + 16);
    v14 = *(_QWORD *)(v9 + 24);
LABEL_8:
    sub_1C4DFE394(v12, v13, v14, (v14 - (uint64_t)v13) >> 3);
    return;
  }
  if ((*(unsigned int (**)(_QWORD, unint64_t))(*(_QWORD *)*a2 + 16))(*a2, a3))
  {
    v11 = *a2;
    *(_DWORD *)a1 = *(_DWORD *)(*a2 + 72);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v12 = (_QWORD *)(a1 + 8);
    v13 = *(const void **)(v11 + 80);
    v14 = *(_QWORD *)(v11 + 88);
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a2 + 24))(&v25, *a2, a3);
  v15 = *(_DWORD *)(*a2 + 72);
  v17 = *(_BYTE **)(*a2 + 80);
  v16 = *(_BYTE **)(*a2 + 88);
  v18 = v16 - v17;
  if (v16 == v17)
  {
    v19 = 0;
    v20 = 0;
  }
  else
  {
    if (v18 < 0)
      abort();
    v19 = (char *)operator new(v16 - v17);
    memmove(v19, v17, v18);
    v20 = &v19[8 * (v18 >> 3)];
  }
  if ((_DWORD)v25 != v15 || (char *)__p[1] - (char *)__p[0] != v20 - v19)
  {
    v21 = 0;
    if (!v19)
      goto LABEL_19;
    goto LABEL_18;
  }
  v21 = memcmp(__p[0], v19, (char *)__p[1] - (char *)__p[0]) == 0;
  if (v19)
LABEL_18:
    operator delete(v19);
LABEL_19:
  if (v21)
  {
    *(_DWORD *)a1 = v25;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 24) = v27;
  }
  else
  {
    v22 = sub_1C56C1AD4(v7, &v28);
    v23 = v25;
    *(_DWORD *)v22 = v25;
    v24 = *(void **)(v22 + 8);
    if (v24)
    {
      *(_QWORD *)(v22 + 16) = v24;
      operator delete(v24);
      *(_QWORD *)(v22 + 8) = 0;
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)(v22 + 24) = 0;
      v23 = *(_DWORD *)v22;
    }
    *(_OWORD *)(v22 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(v22 + 24) = v27;
    __p[0] = 0;
    __p[1] = 0;
    v27 = 0;
    *(_DWORD *)a1 = v23;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    sub_1C4DFE394((_QWORD *)(a1 + 8), *(const void **)(v22 + 8), *(_QWORD *)(v22 + 16), (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

uint64_t sub_1C56C1DF8(uint64_t a1, int a2, unint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (a2 - 1) & ((a3 >> 9) ^ a3);
    v6 = (_QWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -2)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -16;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C56C1E90(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -2;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = 40 * v3;
      v14 = v4 + 16;
      do
      {
        v15 = *(_QWORD *)(v14 - 16);
        if (v15 != -16 && v15 != -2)
        {
          v20 = 0;
          sub_1C56C1DF8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v20);
          v17 = v20;
          *v20 = v15;
          *((_DWORD *)v17 + 2) = *(_DWORD *)(v14 - 8);
          v17[3] = 0;
          v17[4] = 0;
          v17[2] = 0;
          *((_OWORD *)v17 + 1) = *(_OWORD *)v14;
          v17[4] = *(_QWORD *)(v14 + 16);
          ++v12;
          *(_QWORD *)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          *(_DWORD *)(a1 + 8) = v12;
        }
        v14 += 40;
        v13 -= 40;
      }
      while (v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 40 * v18;
    do
    {
      *result = -2;
      result += 5;
      v19 -= 40;
    }
    while (v19);
  }
  return result;
}

void sub_1C56C1FFC(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Successor;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13[2];
  int v14;
  __int128 v15;
  void *v16;
  __int128 v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 16) == 83)
  {
    sub_1C56C23A0(a1, a2);
  }
  else
  {
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
    (*(void (**)(void))(*(_QWORD *)*a1 + 48))();
    if (*(unsigned __int8 *)(a2 + 16) - 29 < 0xB)
    {
      v16 = v18;
      v17 = xmmword_1C6612EE0;
      sub_1C56C2CF0(a1, a2, &v16);
      v4 = v17;
      if ((_DWORD)v17)
      {
        v5 = 0;
        v6 = *(_QWORD *)(a2 + 40);
        do
        {
          if (*((_BYTE *)v16 + v5))
          {
            Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)a2, v5);
            *(_QWORD *)&v15 = v6;
            *((_QWORD *)&v15 + 1) = Successor;
            if ((sub_1C6291D5C((uint64_t)(a1 + 156), (unint64_t *)&v15, &v15) & 1) != 0)
            {
              v8 = sub_1C477672C((uint64_t)(a1 + 4), Successor);
              v9 = a1[5];
              v10 = 48;
              if (v9 == a1[4])
                v10 = 52;
              if (v8 == (_QWORD *)(v9 + 8 * *(unsigned int *)((char *)a1 + v10)))
              {
                sub_1C56C0320((uint64_t)a1, Successor);
              }
              else
              {
                for (i = *(_QWORD *)(Successor + 48); ; i = *(_QWORD *)(i + 8))
                {
                  v12 = i ? i - 24 : 0;
                  if (*(_BYTE *)(v12 + 16) != 83)
                    break;
                  sub_1C56C23A0(a1, i - 24);
                }
              }
            }
          }
          ++v5;
        }
        while (v5 != v4);
      }
      if (v16 != v18)
        free(v16);
    }
    sub_1C56C2C78(v13);
  }
}

void sub_1C56C23A0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  char *v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  int v29;
  _BYTE *v30;
  _BYTE *v31;
  int64_t v32;
  char *v33;
  char *v34;
  const void *v35;
  size_t v36;
  _BOOL4 v37;
  unint64_t v38;
  char *v39;
  unsigned int v41;
  unint64_t i;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  __int128 v57;
  int64_t v58;
  uint64_t v59;
  char *v60;
  const void *v61;
  int64_t v62;
  char *v63;
  BOOL v64;
  char v65;
  const void *v66;
  int64_t v67;
  char *v68;
  char *v69;
  size_t __n;
  int v71;
  char *__s2;
  int v73;
  int v74;
  void *v75;
  char *v76;
  char *v77;
  int v78;
  void *v79;
  void *v80;
  char *v81;
  int v82;
  void *v83;
  void *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  void *__p;
  char *v91;
  char *v92;
  int v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  __int128 v100;
  _QWORD v101[4];

  v101[2] = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1))
  {
    v99 = 0;
    *(_QWORD *)&v100 = 0;
    DWORD2(v100) = 0;
    (*(void (**)(_QWORD, unint64_t, char **, _QWORD *))(*(_QWORD *)*a1 + 48))(*a1, a2, &v99, a1);
    v4 = &v99[40 * DWORD2(v100)];
    if ((_DWORD)v100)
    {
      if (DWORD2(v100))
      {
        v5 = 40 * DWORD2(v100);
        v6 = v99;
        while (*(_QWORD *)v6 == -2 || *(_QWORD *)v6 == -16)
        {
          v6 += 40;
          v5 -= 40;
          if (!v5)
            goto LABEL_11;
        }
      }
      else
      {
        v6 = v99;
      }
    }
    else
    {
LABEL_11:
      v6 = &v99[40 * DWORD2(v100)];
    }
    v28 = &v99[40 * DWORD2(v100)];
    if (v6 == v28)
    {
LABEL_65:
      sub_1C56C2C78((uint64_t *)&v99);
      return;
    }
    while (1)
    {
      v29 = *(_DWORD *)(*a1 + 72);
      v31 = *(_BYTE **)(*a1 + 80);
      v30 = *(_BYTE **)(*a1 + 88);
      v32 = v30 - v31;
      if (v30 == v31)
      {
        v33 = 0;
        v34 = 0;
      }
      else
      {
        if (v32 < 0)
          goto LABEL_133;
        v33 = (char *)operator new(v30 - v31);
        memmove(v33, v31, v32);
        v34 = &v33[8 * (v32 >> 3)];
      }
      if (*((_DWORD *)v6 + 2) != v29)
        break;
      v35 = (const void *)*((_QWORD *)v6 + 2);
      v36 = *((_QWORD *)v6 + 3) - (_QWORD)v35;
      if (v36 != v34 - v33)
        break;
      v37 = memcmp(v35, v33, v36) != 0;
      if (v33)
        goto LABEL_51;
LABEL_52:
      if (v37)
      {
        v38 = *(_QWORD *)v6;
        v96 = *((_DWORD *)v6 + 2);
        v98 = 0;
        v97 = 0uLL;
        v97 = *((_OWORD *)v6 + 1);
        v98 = *((_QWORD *)v6 + 4);
        *((_QWORD *)v6 + 3) = 0;
        *((_QWORD *)v6 + 4) = 0;
        *((_QWORD *)v6 + 2) = 0;
        sub_1C56C2B74((uint64_t)a1, v38, (uint64_t)&v96);
        if ((_QWORD)v97)
        {
          *((_QWORD *)&v97 + 1) = v97;
          operator delete((void *)v97);
        }
      }
      v39 = v6 + 40;
      v6 = v4;
      if (v39 != v4)
      {
        v6 = v39;
        while (*(_QWORD *)v6 == -2 || *(_QWORD *)v6 == -16)
        {
          v6 += 40;
          if (v6 == v4)
          {
            v6 = v4;
            break;
          }
        }
      }
      if (v6 == v28)
        goto LABEL_65;
    }
    v37 = 1;
    if (!v33)
      goto LABEL_52;
LABEL_51:
    operator delete(v33);
    goto LABEL_52;
  }
  sub_1C56C1BB8((uint64_t)&v93, a1, a2);
  v8 = *a1;
  v73 = *(_DWORD *)(*a1 + 40);
  v10 = *(_BYTE **)(*a1 + 48);
  v9 = *(_BYTE **)(*a1 + 56);
  v11 = v9 - v10;
  if (v9 == v10)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v11 < 0)
      goto LABEL_133;
    v12 = (char *)operator new(v9 - v10);
    memmove(v12, v10, v11);
    v13 = &v12[8 * (v11 >> 3)];
  }
  v14 = v93;
  if (v93 == v73
    && *((_QWORD *)&v94 + 1) - (_QWORD)v94 == v13 - v12
    && !memcmp((const void *)v94, v12, *((_QWORD *)&v94 + 1) - v94))
  {
    goto LABEL_36;
  }
  __s2 = v12;
  v15 = *(_DWORD *)(v8 + 72);
  v17 = *(_BYTE **)(v8 + 80);
  v16 = *(_BYTE **)(v8 + 88);
  v18 = v16 - v17;
  if (v16 == v17)
  {
    v20 = 0;
    v19 = 0;
  }
  else
  {
    if (v18 < 0)
      goto LABEL_133;
    v19 = (char *)operator new(v16 - v17);
    memmove(v19, v17, v18);
    v20 = &v19[8 * (v18 >> 3)];
  }
  if (v14 == v15)
  {
    v12 = __s2;
    if (*((_QWORD *)&v94 + 1) - (_QWORD)v94 == v20 - v19)
    {
      v21 = memcmp((const void *)v94, v19, *((_QWORD *)&v94 + 1) - v94) == 0;
      if (!v19)
        goto LABEL_29;
    }
    else
    {
      v21 = 0;
      if (!v19)
        goto LABEL_29;
    }
    goto LABEL_28;
  }
  v21 = 0;
  v12 = __s2;
  if (v19)
LABEL_28:
    operator delete(v19);
LABEL_29:
  if (v21)
    goto LABEL_36;
  v22 = *(_DWORD *)(a2 + 20);
  v23 = v22 & 0x7FFFFFF;
  if ((v22 & 0x7FFFFFFu) > 0x40)
  {
    v89 = v73;
    v91 = 0;
    v92 = 0;
    __p = 0;
    v24 = v13 - v12;
    if (v13 != v12)
    {
      if (v24 < 0)
        goto LABEL_133;
      v25 = (char *)operator new(v13 - v12);
      v26 = &v25[8 * (v24 >> 3)];
      __p = v25;
      v92 = v26;
      memcpy(v25, v12, v13 - v12);
      v91 = v26;
    }
    sub_1C56C2B74((uint64_t)a1, a2, (uint64_t)&v89);
    v27 = __p;
    if (!__p)
      goto LABEL_36;
LABEL_35:
    operator delete(v27);
    goto LABEL_36;
  }
  if (!v23)
    goto LABEL_128;
  v41 = 0;
  __n = v13 - __s2;
  v71 = v22 & 0x7FFFFFF;
  if ((v22 & 0x40000000) != 0)
    goto LABEL_72;
LABEL_71:
  for (i = a2 - 32 * (v22 & 0x7FFFFFF); ; i = *(_QWORD *)(a2 - 8))
  {
    v43 = *(_QWORD *)(i + 32 * *(unsigned int *)(a2 + 60) + 8 * v41);
    v44 = *(_QWORD *)(a2 + 40);
    v99 = (char *)v101;
    v100 = xmmword_1C6612EE0;
    v45 = *(_QWORD *)(v43 + 40);
    if (v45)
      v46 = v45 - 24;
    else
      v46 = 0;
    if (*(unsigned __int8 *)(v46 + 16) - 29 >= 0xB)
      v47 = 0;
    else
      v47 = v46;
    sub_1C56C2CF0(a1, v47, &v99);
    v48 = *(unsigned __int8 *)(v47 + 16);
    if (v48 != 30)
      __asm { BR              X10 }
    v49 = (*(_DWORD *)(v47 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
    v50 = 0;
    v51 = v49;
    while (llvm::Instruction::getSuccessor((llvm::Instruction *)v47, v50) != v44 || !v99[v50])
    {
      if (v51 == ++v50)
      {
        v52 = 1;
        goto LABEL_89;
      }
    }
    v52 = 0;
LABEL_89:
    if (v99 != (char *)v101)
      free(v99);
    if ((v52 & 1) != 0)
      break;
    v53 = *(_DWORD *)(a2 + 20);
    if ((v53 & 0x40000000) != 0)
      v54 = *(_QWORD *)(a2 - 8);
    else
      v54 = a2 - 32 * (v53 & 0x7FFFFFF);
    sub_1C56C1BB8((uint64_t)&v99, a1, *(_QWORD *)(v54 + 32 * v41) & 0xFFFFFFFFFFFFFFF9);
    v55 = (int)v99;
    v56 = v93;
    v57 = v94;
    if ((_DWORD)v99 == v93)
    {
      v58 = *((_QWORD *)&v94 + 1) - v94;
      if (*((_QWORD *)&v100 + 1) - (_QWORD)v100 == *((_QWORD *)&v94 + 1) - (_QWORD)v94
        && !memcmp((const void *)v100, (const void *)v94, *((_QWORD *)&v94 + 1) - v94))
      {
        v23 = v71;
        goto LABEL_115;
      }
    }
    else
    {
      v58 = *((_QWORD *)&v94 + 1) - v94;
    }
    v59 = *a1;
    v82 = v56;
    v84 = 0;
    v85 = 0;
    v83 = 0;
    if (*((_QWORD *)&v57 + 1) != (_QWORD)v57)
    {
      if (v58 < 0)
        goto LABEL_133;
      v83 = operator new(v58);
      v84 = v83;
      v60 = (char *)v83 + 8 * (v58 >> 3);
      v85 = v60;
      memmove(v83, (const void *)v57, v58);
      v84 = v60;
    }
    v78 = v55;
    v80 = 0;
    v81 = 0;
    v79 = 0;
    v61 = (const void *)v100;
    v62 = *((_QWORD *)&v100 + 1) - v100;
    v23 = v71;
    if (*((_QWORD *)&v100 + 1) != (_QWORD)v100)
    {
      if (v62 < 0)
        goto LABEL_133;
      v79 = operator new(*((_QWORD *)&v100 + 1) - v100);
      v80 = v79;
      v63 = (char *)v79 + 8 * (v62 >> 3);
      v81 = v63;
      memmove(v79, v61, v62);
      v80 = v63;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, int *))(*(_QWORD *)v59 + 40))(&v86, v59, &v82, &v78);
    v93 = v86;
    if ((_QWORD)v94)
    {
      *((_QWORD *)&v94 + 1) = v94;
      operator delete((void *)v94);
    }
    v94 = v87;
    v95 = v88;
    v88 = 0;
    v87 = 0uLL;
    if (v79)
    {
      v80 = v79;
      operator delete(v79);
    }
    if (v83)
    {
      v84 = v83;
      operator delete(v83);
    }
    v55 = v93;
LABEL_115:
    v64 = v55 == v73 && *((_QWORD *)&v94 + 1) - (_QWORD)v94 == __n && memcmp((const void *)v94, __s2, __n) == 0;
    if ((_QWORD)v100)
    {
      *((_QWORD *)&v100 + 1) = v100;
      operator delete((void *)v100);
    }
    v65 = ++v41 == v23 || v64;
    if ((v65 & 1) != 0)
      goto LABEL_128;
LABEL_125:
    v22 = *(_DWORD *)(a2 + 20);
    if ((v22 & 0x40000000) == 0)
      goto LABEL_71;
LABEL_72:
    ;
  }
  if (++v41 != v23)
    goto LABEL_125;
LABEL_128:
  v74 = v93;
  v76 = 0;
  v77 = 0;
  v75 = 0;
  v66 = (const void *)v94;
  v67 = *((_QWORD *)&v94 + 1) - v94;
  v12 = __s2;
  if (*((_QWORD *)&v94 + 1) != (_QWORD)v94)
  {
    if ((v67 & 0x8000000000000000) == 0)
    {
      v68 = (char *)operator new(*((_QWORD *)&v94 + 1) - v94);
      v69 = &v68[8 * (v67 >> 3)];
      v75 = v68;
      v77 = v69;
      memmove(v68, v66, v67);
      v76 = v69;
      goto LABEL_131;
    }
LABEL_133:
    abort();
  }
LABEL_131:
  sub_1C56C2B74((uint64_t)a1, a2, (uint64_t)&v74);
  v27 = v75;
  if (v75)
    goto LABEL_35;
LABEL_36:
  if (v12)
    operator delete(v12);
  if ((_QWORD)v94)
  {
    *((_QWORD *)&v94 + 1) = v94;
    operator delete((void *)v94);
  }
}

void sub_1C56C2B74(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  const void *v8;
  size_t v9;
  const void *v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v14 = a2;
  v15 = 0;
  v6 = a1 + 8;
  if (sub_1C56C1DF8(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 24), a2, &v15))
    v7 = v15 == *(_QWORD *)v6 + 40 * *(unsigned int *)(v6 + 16);
  else
    v7 = 1;
  if (v7
    || *(_DWORD *)(v15 + 8) != *(_DWORD *)a3
    || (v8 = *(const void **)(v15 + 16),
        v9 = *(_QWORD *)(v15 + 24) - (_QWORD)v8,
        v10 = *(const void **)(a3 + 8),
        v9 != *(_QWORD *)(a3 + 16) - (_QWORD)v10)
    || memcmp(v8, v10, v9))
  {
    v11 = (_DWORD *)sub_1C56C1AD4(v6, &v14);
    *v11 = *(_DWORD *)a3;
    sub_1C6184574((uint64_t)(v11 + 2), (__n128 *)(a3 + 8));
    v12 = a2 & 0xFFFFFFFFFFFFFFF8;
    if (v12)
    {
      v13 = *(unsigned int *)(a1 + 200);
      if (v13 >= *(_DWORD *)(a1 + 204))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 192, a1 + 208, v13 + 1, 8);
        LODWORD(v13) = *(_DWORD *)(a1 + 200);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * v13) = v12;
      ++*(_DWORD *)(a1 + 200);
    }
  }
}

uint64_t *sub_1C56C2C78(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v8;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    v5 = (_QWORD *)(v3 + 24);
    do
    {
      v6 = *(v5 - 3);
      if (v6 != -16 && v6 != -2)
      {
        v8 = (void *)*(v5 - 1);
        if (v8)
        {
          *v5 = v8;
          operator delete(v8);
        }
      }
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

void sub_1C56C2CF0(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  int v19;
  _BYTE *v20;
  _BYTE *v21;
  int64_t v22;
  char *v23;
  char *v24;
  _BOOL4 v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  int64_t v29;
  char *v30;
  char *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Constant *v35;
  __int128 v36;
  int v37;
  void *__p;
  __int128 v39;
  int v40;
  void *v41;
  __int128 v42;

  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 != 30)
    __asm { BR              X12 }
  if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
    v7 = 2;
  else
    v7 = 1;
  v8 = v7;
  v9 = a3[1];
  if (v9 != v7)
  {
    if (v9 <= v7)
    {
      if (a3[2] < (unint64_t)v7)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v7, 1);
        v9 = a3[1];
      }
      if (v8 != v9)
        bzero((void *)(*a3 + v9), v8 - v9);
    }
    a3[1] = v8;
    v6 = *(unsigned __int8 *)(a2 + 16);
  }
  if (v6 != 30)
    __asm { BR              X11 }
  if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 1)
  {
    *(_BYTE *)*a3 = 1;
    return;
  }
  sub_1C56C1BB8((uint64_t)&v40, a1, *(_QWORD *)(a2 - 96) & 0xFFFFFFFFFFFFFFF9);
  v10 = v40;
  v11 = v41;
  v36 = v42;
  v12 = *a1;
  v13 = *(_DWORD *)(*a1 + 40);
  v15 = *(_BYTE **)(*a1 + 48);
  v14 = *(_BYTE **)(*a1 + 56);
  v16 = v14 - v15;
  if (v14 == v15)
  {
    v17 = 0;
    v18 = 0;
  }
  else
  {
    if (v16 < 0)
      goto LABEL_65;
    v17 = (char *)operator new(v14 - v15);
    memmove(v17, v15, v16);
    v18 = &v17[8 * (v16 >> 3)];
  }
  if (v10 != v13 || (_QWORD)v36 - (_QWORD)v11 != v18 - v17 || memcmp(v11, v17, v36 - (_QWORD)v11))
  {
    v19 = *(_DWORD *)(v12 + 72);
    v21 = *(_BYTE **)(v12 + 80);
    v20 = *(_BYTE **)(v12 + 88);
    v22 = v20 - v21;
    if (v20 == v21)
    {
      v23 = 0;
      v24 = 0;
    }
    else
    {
      if (v22 < 0)
        goto LABEL_65;
      v23 = (char *)operator new(v20 - v21);
      memmove(v23, v21, v22);
      v24 = &v23[8 * (v22 >> 3)];
    }
    if (v10 == v19 && (_QWORD)v36 - (_QWORD)v11 == v24 - v23)
    {
      v25 = memcmp(v11, v23, v36 - (_QWORD)v11) == 0;
      if (!v23)
      {
LABEL_32:
        if (!v17)
          goto LABEL_34;
        goto LABEL_33;
      }
    }
    else
    {
      v25 = 0;
      if (!v23)
        goto LABEL_32;
    }
    operator delete(v23);
    goto LABEL_32;
  }
  v25 = 1;
  if (v17)
LABEL_33:
    operator delete(v17);
LABEL_34:
  if (v25)
  {
    *(_WORD *)*a3 = 257;
    goto LABEL_47;
  }
  v26 = *(_DWORD *)(*a1 + 8);
  v28 = *(_BYTE **)(*a1 + 16);
  v27 = *(_BYTE **)(*a1 + 24);
  v29 = v27 - v28;
  if (v27 == v28)
  {
    v30 = 0;
    v31 = 0;
    goto LABEL_40;
  }
  if (v29 < 0)
LABEL_65:
    abort();
  v30 = (char *)operator new(v27 - v28);
  memmove(v30, v28, v29);
  v31 = &v30[8 * (v29 >> 3)];
LABEL_40:
  if (v10 != v26 || (_QWORD)v36 - (_QWORD)v11 != v31 - v30)
  {
    v32 = 0;
    if (!v30)
      goto LABEL_46;
    goto LABEL_45;
  }
  v32 = memcmp(v11, v30, v36 - (_QWORD)v11) == 0;
  if (v30)
LABEL_45:
    operator delete(v30);
LABEL_46:
  if (v32)
  {
LABEL_47:
    if (v11)
      operator delete(v11);
    return;
  }
  v33 = *a1;
  v37 = v10;
  __p = v11;
  v39 = v36;
  v34 = (*(uint64_t (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v33 + 72))(v33, &v37, **(_QWORD **)(a2 - 96));
  if (v34)
  {
    if (*(unsigned __int8 *)(v34 + 16) >= 0x15u)
      v35 = 0;
    else
      v35 = (llvm::Constant *)v34;
  }
  else
  {
    v35 = 0;
  }
  if (__p)
  {
    *(_QWORD *)&v39 = __p;
    operator delete(__p);
  }
  if (v35 && *((_BYTE *)v35 + 16) == 16)
    *(_BYTE *)(*a3 + llvm::Constant::isNullValue(v35)) = 1;
  else
    *(_WORD *)*a3 = 257;
}

void sub_1C56C3480()
{
  JUMPOUT(0x1C56C2D3CLL);
}

void sub_1C56C3490()
{
  JUMPOUT(0x1C56C2D3CLL);
}

void sub_1C56C3498()
{
  JUMPOUT(0x1C56C2D3CLL);
}

void sub_1C56C34A4()
{
  JUMPOUT(0x1C56C2D3CLL);
}

void sub_1C56C34AC()
{
  JUMPOUT(0x1C56C2D3CLL);
}

void sub_1C56C34B8()
{
  JUMPOUT(0x1C56C3028);
}

void sub_1C56C34C8()
{
  JUMPOUT(0x1C56C3028);
}

void sub_1C56C34D4()
{
  JUMPOUT(0x1C56C3028);
}

void sub_1C56C34E0()
{
  JUMPOUT(0x1C56C3290);
}

void sub_1C56C34F0()
{
  JUMPOUT(0x1C56C3290);
}

void sub_1C56C34F8()
{
  JUMPOUT(0x1C56C3290);
}

void sub_1C56C3504()
{
  JUMPOUT(0x1C56C3290);
}

void sub_1C56C350C()
{
  JUMPOUT(0x1C56C3290);
}

void sub_1C56C3518()
{
  JUMPOUT(0x1C56C3408);
}

void sub_1C56C3528()
{
  JUMPOUT(0x1C56C3408);
}

void sub_1C56C3530()
{
  JUMPOUT(0x1C56C3408);
}

void sub_1C56C353C()
{
  JUMPOUT(0x1C56C3408);
}

void sub_1C56C3544()
{
  JUMPOUT(0x1C56C3408);
}

uint64_t sub_1C56C3550()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56C0258(v0);
}

void sub_1C56C357C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C56C35A0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C56C35AC(llvm::ModulePass *a1, uint64_t **a2)
{
  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  else
    return sub_1C56BFC18((uint64_t)a2);
}

uint64_t sub_1C56C35E4()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 4;
  v3 = &v2;
  *(_QWORD *)&v1 = "The maximum number of functions to track per lattice value";
  *((_QWORD *)&v1 + 1) = 58;
  sub_1C61798D0((uint64_t)&unk_1ED80A060, "cvp-max-functions-per-value", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED80A060, &dword_1C475E000);
}

BOOL sub_1C56C3668(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  const llvm::GlobalVariable **v32;
  const llvm::GlobalVariable *v33;
  const llvm::GlobalVariable *v34;
  unsigned int v35;
  char PreferredAlign;
  __int16 v37;
  char v38;
  int v39;
  int v40;
  llvm::MDNode **v41;
  uint64_t v42;
  llvm::MDNode *v43;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  _BYTE v53[64];
  void *v54;
  uint64_t v55;
  _BYTE v56[512];
  llvm::MDNode **v57;
  uint64_t v58;
  _QWORD v59[3];

  v1 = a1;
  v59[1] = *MEMORY[0x1E0C80C00];
  v49 = v53;
  v50 = v53;
  v51 = 8;
  v52 = 0;
  v2 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), "llvm.used", 9uLL);
  if (!v2 || *(_BYTE *)(v2 + 16) != 3 || (*(_DWORD *)(v2 + 32) & 0xFu) - 7 <= 1)
    v2 = 0;
  sub_1C56C3D5C((_QWORD *)v2, (llvm::SmallPtrSetImplBase *)&v49);
  v3 = sub_1C4FB7E80(*(uint64_t **)(v1 + 112), "llvm.compiler.used", 0x12uLL);
  if (!v3 || *(_BYTE *)(v3 + 16) != 3 || (*(_DWORD *)(v3 + 32) & 0xFu) - 7 <= 1)
    v3 = 0;
  sub_1C56C3D5C((_QWORD *)v3, (llvm::SmallPtrSetImplBase *)&v49);
  v4 = 0;
  v47[0] = 0;
  v47[1] = 0;
  v48 = 0;
  v54 = v56;
  v55 = 0x2000000000;
  v5 = v1 + 8;
  v6 = 0;
  v45 = v1;
  while (2)
  {
    v7 = *(_QWORD *)(v1 + 16);
    if (v7 == v5)
      goto LABEL_50;
    do
    {
      v8 = v7 - 56;
      v13 = v7 == 0;
      v7 = *(_QWORD *)(v7 + 8);
      if (v13)
        v9 = 0;
      else
        v9 = v8;
      llvm::Constant::removeDeadConstantUsers(v9);
      if (!*(_QWORD *)(v9 + 8) && (*(_DWORD *)(v9 + 32) & 0xFu) - 7 <= 1)
      {
        llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v9);
        ++v6;
        continue;
      }
      if (!sub_1C56C3DC4((llvm::GlobalValue *)v9, &v49))
      {
        v10 = *(_DWORD *)(v9 + 32) & 0xF;
        v11 = v10 > 0xA;
        v12 = (1 << v10) & 0x63C;
        v13 = v11 || v12 == 0;
        if (v13 && !sub_1C56C3F0C((_BYTE *)v9))
        {
          v57 = 0;
          v57 = *(llvm::MDNode ***)(v9 - 32);
          v14 = sub_1C6180A54((uint64_t)v47, (uint64_t *)&v57);
          v15 = v14[1];
          if (v15)
          {
            v16 = *(_DWORD *)(v9 + 32);
            v17 = (*(_DWORD *)(v15 + 32) & 0xF) - 7;
            if ((v16 & 0xFu) - 7 < 2)
            {
              if (v17 > 1)
                continue;
LABEL_26:
              if ((v16 & 0xC0) != 0x80)
                continue;
              goto LABEL_27;
            }
            if (v17 >= 2)
              goto LABEL_26;
          }
LABEL_27:
          v14[1] = v9;
        }
      }
    }
    while (v7 != v5);
    v18 = *(_QWORD *)(v1 + 16);
    while (v18 != v5)
    {
      v19 = v18 - 56;
      v13 = v18 == 0;
      v18 = *(_QWORD *)(v18 + 8);
      if (v13)
        v20 = 0;
      else
        v20 = v19;
      if (!sub_1C56C3DC4((llvm::GlobalValue *)v20, &v49))
      {
        v21 = *(_DWORD *)(v20 + 32);
        if ((v21 & 0xFu) - 7 <= 1)
        {
          if (v48)
          {
            v22 = *(_QWORD *)(v20 - 32);
            v23 = ((v22 >> 4) ^ (v22 >> 9)) & (v48 - 1);
            v24 = *(_QWORD *)(v47[0] + 16 * v23);
            if (v22 == v24)
            {
LABEL_36:
              if ((_DWORD)v23 != v48)
              {
                v25 = *(_QWORD *)(v47[0] + 16 * v23 + 8);
                if (v25 != v20
                  && ((v21 & 0xC0) == 0x80 || (*(_DWORD *)(v25 + 32) & 0xC0) == 0x80)
                  && !sub_1C56C3F0C((_BYTE *)v20))
                {
                  if ((*(_DWORD *)(v20 + 32) & 0xC0) != 0x80)
                    *(_DWORD *)(v25 + 32) &= 0xFFFFFF3F;
                  v26 = v55;
                  if (v55 >= (unint64_t)HIDWORD(v55))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 16);
                    v26 = v55;
                  }
                  v27 = (char *)v54 + 16 * v26;
                  *v27 = v20;
                  v27[1] = v25;
                  LODWORD(v55) = v55 + 1;
                }
              }
            }
            else
            {
              v28 = 1;
              while (v24 != -4096)
              {
                v29 = v23 + v28++;
                v23 = v29 & (v48 - 1);
                v24 = *(_QWORD *)(v47[0] + 16 * v23);
                if (v22 == v24)
                  goto LABEL_36;
              }
            }
          }
        }
      }
    }
LABEL_50:
    v30 = v55;
    if ((_DWORD)v55)
    {
      v46 = v4;
      v31 = 0;
      do
      {
        v32 = (const llvm::GlobalVariable **)((char *)v54 + 16 * v31);
        v33 = *v32;
        v34 = v32[1];
        v35 = *((_DWORD *)*v32 + 8);
        if ((v35 & 0x3F0000) != 0 || (*((_BYTE *)v34 + 34) & 0x3F) != 0)
        {
          PreferredAlign = llvm::DataLayout::getPreferredAlign((llvm::DataLayout *)(*((_QWORD *)v33 + 5) + 272), v33);
          v37 = *((_WORD *)v34 + 17);
          v38 = llvm::DataLayout::getPreferredAlign((llvm::DataLayout *)(*((_QWORD *)v34 + 5) + 272), v34);
          if ((v37 & 0x3F) != 0)
            LOBYTE(v39) = (v37 & 0x3F) - 1;
          else
            LOBYTE(v39) = v38;
          v40 = (HIWORD(v35) & 0x3F) - 1;
          if ((v35 & 0x3F0000) == 0)
            LOBYTE(v40) = PreferredAlign;
          if (v40 <= v39)
            v39 = v39;
          else
            v39 = v40;
          *((_DWORD *)v34 + 8) = ((v39 << 16) + 0x10000) | *((_DWORD *)v34 + 8) & 0xFFC0FFFF;
        }
        v57 = (llvm::MDNode **)v59;
        v58 = 0x100000000;
        llvm::GlobalVariable::getDebugInfo((unsigned int *)v33, (uint64_t)&v57);
        v41 = v57;
        if ((_DWORD)v58)
        {
          v42 = 8 * v58;
          do
          {
            v43 = *v41++;
            llvm::Value::addMetadata(v34, 0, v43);
            v42 -= 8;
          }
          while (v42);
          v41 = v57;
        }
        if (v41 != v59)
          free(v41);
        llvm::Value::doRAUW(v33, v34, (llvm::Value *)1);
        llvm::GlobalVariable::eraseFromParent(v33);
        ++v31;
      }
      while (v31 != v30);
      v4 = v46;
      v6 += (v30 - 1) + 1;
      v1 = v45;
    }
    if (v6 != v4)
    {
      LODWORD(v55) = 0;
      sub_1C61446F0((unsigned int *)v47);
      v4 = v6;
      continue;
    }
    break;
  }
  if (v54 != v56)
    free(v54);
  MEMORY[0x1CAA32FB4](v47[0], 8);
  if (v50 != v49)
    free(v50);
  return v4 != 0;
}

void llvm::initializeConstantMergeLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E40);
  if (v2 != -1)
  {
    v5[0] = sub_1C56C3C04;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E40, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56C3C04(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Merge Duplicate Global Constants";
  *(_QWORD *)(v2 + 8) = 32;
  *(_QWORD *)(v2 + 16) = "constmerge";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32A1;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56C3FC4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C56C3C94(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32A1;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81795E0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831E40);
  if (v3 != -1)
  {
    v7[0] = sub_1C56C3C04;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831E40, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *sub_1C56C3D5C(_QWORD *result, llvm::SmallPtrSetImplBase *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  llvm::Value *v7;

  if (result)
  {
    v2 = *(result - 4);
    v3 = *(_DWORD *)(v2 + 20);
    v4 = v3 & 0x7FFFFFF;
    if ((v3 & 0x7FFFFFF) != 0)
    {
      v6 = *(result - 4);
      do
      {
        v7 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v6 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)));
        result = sub_1C4774094(a2, (uint64_t)v7);
        v6 += 32;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

BOOL sub_1C56C3DC4(llvm::GlobalValue *this, _QWORD *a2)
{
  llvm::GlobalValue *Section;
  uint64_t v5;
  llvm::Module *v6;
  _BOOL8 result;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;

  if ((*((_BYTE *)this + 80) & 1) == 0)
    return 1;
  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3)
    {
      if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
        return 1;
      Section = llvm::GlobalValue::getSection(this);
      if (v5 == 12
        && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
        && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
      {
        return 1;
      }
    }
  }
  else if (*((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72)
         && (*((_BYTE *)this + 34) & 0x80) == 0)
  {
    return 1;
  }
  if ((*((_DWORD *)this + 8) & 0xFu) - 5 < 4 || (result = 1, ((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x614) == 0))
  {
    v6 = (llvm::Module *)*((_QWORD *)this + 5);
    if (v6 && llvm::Module::getSemanticInterposition(v6) && (*((_BYTE *)this + 33) & 0x40) == 0
      || (*((_BYTE *)this + 80) & 2) != 0
      || *(_DWORD *)(*(_QWORD *)this + 8) > 0xFFu
      || (*((_DWORD *)this + 8) & 0x401C00) != 0)
    {
      return 1;
    }
    v8 = sub_1C477672C((uint64_t)a2, (uint64_t)this);
    v9 = a2[1];
    if (v9 == *a2)
      v10 = (unsigned int *)a2 + 5;
    else
      v10 = (unsigned int *)(a2 + 2);
    return v8 != (_QWORD *)(v9 + 8 * *v10);
  }
  return result;
}

BOOL sub_1C56C3F0C(_BYTE *a1)
{
  uint64_t v1;
  int *v2;
  int v3;
  _BOOL8 v4;
  BOOL v5;
  void *v7;
  uint64_t v8;
  _QWORD v9[9];

  v9[8] = *MEMORY[0x1E0C80C00];
  v7 = v9;
  v8 = 0x400000000;
  llvm::Value::getAllMetadata(a1, (uint64_t)&v7);
  if ((_DWORD)v8)
  {
    v1 = 16 * v8 - 16;
    v2 = (int *)v7;
    do
    {
      v3 = *v2;
      v2 += 4;
      v4 = v3 != 0;
      if (v3)
        v5 = 1;
      else
        v5 = v1 == 0;
      v1 -= 16;
    }
    while (!v5);
  }
  else
  {
    v4 = 0;
  }
  if (v7 != v9)
    free(v7);
  return v4;
}

uint64_t sub_1C56C3FC4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56C3C94(v0);
}

void sub_1C56C3FF0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C56C4014(llvm::ModulePass *a1, uint64_t **a2)
{
  return (llvm::ModulePass::skipModule(a1, a2) & 1) == 0 && sub_1C56C3668((uint64_t)a2);
}

void llvm::initializeCrossDSOCFIPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E48);
  if (v2 != -1)
  {
    v5[0] = sub_1C56C40AC;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E48, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56C40AC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Cross-DSO CFI";
  *(_QWORD *)(v2 + 8) = 13;
  *(_QWORD *)(v2 + 16) = "cross-dso-cfi";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32A2;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56C5078;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createCrossDSOCFIPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56C4160(v1);
}

uint64_t sub_1C56C4160(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32A2;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8179680;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831E48);
  if (v3 != -1)
  {
    v7[0] = sub_1C56C40AC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831E48, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

BOOL sub_1C56C4228(uint64_t a1, uint64_t a2)
{
  uint64_t ModuleFlag;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int *v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t NamedMetadata;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  unint64_t v23;
  unint64_t j;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ***v35;
  uint64_t **v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t **v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t v51;
  char *v52;
  char *v53;
  llvm::Value *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unsigned __int8 *v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  unsigned __int8 **v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  char *v69;
  char *v70;
  unsigned __int8 **v71;
  int v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  llvm::ConstantInt *v76;
  unsigned int v77;
  unint64_t v78;
  llvm::ValueHandleBase *v79;
  uint64_t **v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t Declaration;
  llvm::Value *v85;
  uint64_t v86;
  uint64_t **v87;
  unsigned __int8 *v88;
  uint64_t *v89;
  llvm::Value *v90;
  _DWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  llvm::Value *v94;
  _QWORD *v95;
  char *v96;
  char *v97;
  unsigned __int8 **v98;
  int v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  llvm::MDNode *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  llvm::BasicBlock *v110;
  void *v111;
  llvm::BasicBlock *v112;
  uint64_t v113;
  llvm::SwitchInst *v114;
  llvm::SwitchInst *v115;
  void *__p;
  char v117;
  unsigned int v118;
  _QWORD v119[2];
  int v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  _QWORD v124[4];
  __int16 v125;
  uint64_t v126[2];
  void *v127;
  uint64_t v128;
  _BYTE v129[16];
  __int16 v130;
  uint64_t **v131;
  _QWORD **v132;
  uint64_t v133;
  void **v134;
  void **v135;
  uint64_t v136;
  int v137;
  __int16 v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *v143;
  void *v144;
  uint64_t v145;
  _BYTE v146[32];
  uint64_t **v147;
  _QWORD **v148;
  uint64_t v149;
  void **v150;
  void **v151;
  uint64_t v152;
  int v153;
  __int16 v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  void *v159;
  void *v160[2];
  _BYTE v161[16];
  __int16 v162;
  llvm::BasicBlock *v163;
  uint64_t v164;
  uint64_t v165;
  void **v166;
  void **v167;
  uint64_t v168;
  int v169;
  __int16 v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int16 v180;
  uint64_t **v181;
  _QWORD **v182;
  uint64_t v183;
  void **v184;
  void **v185;
  uint64_t v186;
  int v187;
  __int16 v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  void *v193;
  char *v194;
  uint64_t v195;
  _QWORD v196[4];

  v196[2] = *MEMORY[0x1E0C80C00];
  v160[0] = *(void **)a2;
  v176 = (void *)0x1000FFFFFLL;
  *(_QWORD *)(a1 + 32) = llvm::MDBuilder::createBranchWeights((uint64_t **)v160, (uint64_t)&v176, 2);
  ModuleFlag = llvm::Module::getModuleFlag(a2, "Cross-DSO CFI", 0xDuLL);
  if (!ModuleFlag)
    return ModuleFlag != 0;
  v108 = a1;
  v119[0] = 0;
  v119[1] = 0;
  v120 = 0;
  v122 = 0;
  v123 = 0;
  v121 = 0;
  v104 = ModuleFlag;
  v194 = (char *)v196;
  v195 = 0x200000000;
  v6 = (void *)(a2 + 24);
  v7 = *(void **)(a2 + 32);
  v8 = a2 + 8;
  v9 = *(_QWORD *)(a2 + 16);
  v176 = v7;
  v177 = v9;
  v178 = a2 + 24;
  v179 = a2 + 8;
  while (1)
  {
    if (v7 == v6 && v9 == v8)
    {
      v10 = (void *)v178 == v6 && v179 == v8;
      if (v10)
        break;
    }
    v11 = 0;
    do
    {
      v12 = (unsigned int *)(*(uint64_t (**)(void **))((char *)&off_1E8179710 + v11))(&v176);
      v11 += 16;
    }
    while (!v12);
    LODWORD(v195) = 0;
    llvm::Value::getMetadata(v12, 19, (uint64_t)&v194);
    if ((_DWORD)v195)
    {
      v13 = v194;
      v14 = 8 * v195;
      do
      {
        v15 = *(unsigned __int8 **)(*(_QWORD *)v13 - 8 * *(unsigned int *)(*(_QWORD *)v13 + 8) + 8);
        if (*v15 - 3 >= 0xFFFFFFFE)
        {
          v16 = *((_QWORD *)v15 + 16);
          if (v16)
          {
            if (*(_BYTE *)(v16 + 16) == 16 && *(_DWORD *)(v16 + 32) == 64)
            {
              v160[0] = *(void **)(v16 + 24);
              sub_1C4EEA990(v119, (uint64_t *)v160);
            }
          }
        }
        v13 += 8;
        v14 -= 8;
      }
      while (v14);
    }
    v17 = 0;
    do
    {
      if (((*(uint64_t (**)(void **))((char *)&off_1E8179730 + v17))(&v176) & 1) != 0)
        break;
      v10 = v17 == 16;
      v17 += 16;
    }
    while (!v10);
    v7 = v176;
    v9 = v177;
  }
  v176 = "cfi.functions";
  v180 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a2, (uint64_t)&v176);
  if (NamedMetadata)
  {
    v19 = NamedMetadata;
    v20 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v20)
    {
      for (i = 0; i != v20; ++i)
      {
        v22 = *(_QWORD *)(**(_QWORD **)(v19 + 48) + 8 * i);
        v23 = *(unsigned int *)(v22 + 8);
        if (v23 >= 3)
        {
          for (j = 2; j < v23; ++j)
          {
            v25 = *(_QWORD *)(v22 - 8 * v23 + 8 * j);
            v26 = *(unsigned __int8 **)(v25 - 8 * *(unsigned int *)(v25 + 8) + 8);
            if (*v26 - 3 >= 0xFFFFFFFE)
            {
              v27 = *((_QWORD *)v26 + 16);
              if (v27)
              {
                if (*(_BYTE *)(v27 + 16) == 16 && *(_DWORD *)(v27 + 32) == 64)
                {
                  v176 = *(void **)(v27 + 24);
                  sub_1C4EEA990(v119, (uint64_t *)&v176);
                  v23 = *(unsigned int *)(v22 + 8);
                }
              }
            }
          }
        }
      }
    }
  }
  v28 = *(uint64_t **)a2;
  v29 = **(_QWORD **)a2;
  v30 = (uint64_t **)(v29 + 1576);
  v31 = v29 + 1984;
  v32 = llvm::PointerType::get((llvm::PointerType *)(v29 + 1912), 0);
  v33 = llvm::PointerType::get((llvm::PointerType *)(*v28 + 1912), 0);
  v34 = sub_1C6291F2C(a2, v30, v31, v32, v33);
  sub_1C6291B14((llvm::Function *)v34);
  *(_DWORD *)(v34 + 32) = *(_DWORD *)(v34 + 32) & 0xFFC0FFFF | 0xD0000;
  v180 = 260;
  v176 = (void *)(a2 + 216);
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v176);
  if (v118 <= 0x28 && ((1 << v118) & 0x18000000006) != 0)
    *(_QWORD *)(v34 + 112) = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v34 + 112), **(uint64_t ***)v34, -1, "target-features", 0xFuLL, "+thumb-mode", 0xBuLL);
  if ((*(_WORD *)(v34 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v34);
  v35 = *(uint64_t ****)(v34 + 88);
  v113 = (uint64_t)(v35 + 5);
  v176 = "CallSiteTypeId";
  v180 = 259;
  llvm::Value::setName(v35, (uint64_t)&v176);
  v114 = (llvm::SwitchInst *)v35;
  v111 = v35 + 10;
  v176 = "Addr";
  v180 = 259;
  llvm::Value::setName(v35 + 5, (uint64_t)&v176);
  v176 = "CFICheckFailData";
  v180 = 259;
  llvm::Value::setName(v35 + 10, (uint64_t)&v176);
  v176 = "entry";
  v180 = 259;
  v36 = (uint64_t **)operator new();
  *v36 = (uint64_t *)(*v28 + 1600);
  v36[1] = 0;
  v37 = *((_DWORD *)v36 + 5) & 0xC0000000;
  *((_DWORD *)v36 + 4) = 22;
  *((_DWORD *)v36 + 5) = v37;
  v36[3] = 0;
  v36[4] = 0;
  v36[5] = (uint64_t *)(v36 + 5);
  v36[6] = (uint64_t *)(v36 + 5);
  v36[7] = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v34 + 72, v36);
  v38 = *(uint64_t **)(v34 + 72);
  v36[4] = (uint64_t *)(v34 + 72);
  v36[3] = v38;
  v38[1] = (uint64_t)(v36 + 3);
  *(_QWORD *)(v34 + 72) = v36 + 3;
  llvm::Value::setName((uint64_t ***)v36, (uint64_t)&v176);
  v176 = "exit";
  v180 = 259;
  v39 = operator new();
  *(_QWORD *)v39 = *v28 + 1600;
  *(_QWORD *)(v39 + 8) = 0;
  v40 = (_QWORD *)(v39 + 8);
  v41 = *(_DWORD *)(v39 + 20) & 0xC0000000;
  *(_DWORD *)(v39 + 16) = 22;
  *(_DWORD *)(v39 + 20) = v41;
  *(_QWORD *)(v39 + 24) = 0;
  *(_QWORD *)(v39 + 32) = 0;
  *(_QWORD *)(v39 + 40) = v39 + 40;
  v105 = v39 + 40;
  *(_QWORD *)(v39 + 48) = v39 + 40;
  *(_QWORD *)(v39 + 56) = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v34 + 72, (_QWORD *)v39);
  v42 = *(_QWORD *)(v34 + 72);
  *(_QWORD *)(v39 + 32) = v34 + 72;
  *(_QWORD *)(v39 + 24) = v42;
  *(_QWORD *)(v42 + 8) = v39 + 24;
  *(_QWORD *)(v34 + 72) = v39 + 24;
  llvm::Value::setName((uint64_t ***)v39, (uint64_t)&v176);
  v176 = "fail";
  v180 = 259;
  v43 = (uint64_t **)operator new();
  *v43 = (uint64_t *)(*v28 + 1600);
  v43[1] = 0;
  v44 = *((_DWORD *)v43 + 5) & 0xC0000000;
  *((_DWORD *)v43 + 4) = 22;
  *((_DWORD *)v43 + 5) = v44;
  v43[3] = 0;
  v43[4] = 0;
  v43[5] = (uint64_t *)(v43 + 5);
  v43[6] = (uint64_t *)(v43 + 5);
  v43[7] = 0;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v34 + 72, v43);
  v45 = *(uint64_t **)(v34 + 72);
  v107 = (uint64_t *)(v34 + 72);
  v43[4] = (uint64_t *)(v34 + 72);
  v43[3] = v45;
  v45[1] = (uint64_t)(v43 + 3);
  *(_QWORD *)(v34 + 72) = v43 + 3;
  llvm::Value::setName((uint64_t ***)v43, (uint64_t)&v176);
  v46 = **v43;
  v176 = &v178;
  v177 = 0x200000000;
  v183 = v46;
  v184 = &v192;
  v185 = &v193;
  v186 = 0;
  v187 = 0;
  v188 = 512;
  v189 = 7;
  v191 = 0;
  v190 = 0;
  v192 = &unk_1E8167888;
  v193 = &unk_1E8167A08;
  v110 = (llvm::BasicBlock *)v43;
  v181 = v43;
  v182 = v43 + 5;
  v47 = (uint64_t **)(*v28 + 1576);
  v48 = llvm::PointerType::get((llvm::PointerType *)(*v28 + 1912), 0);
  v49 = llvm::PointerType::get((llvm::PointerType *)(*v28 + 1912), 0);
  v109 = (uint64_t *)a2;
  v50 = (uint64_t **)sub_1C6291FE0(a2, "__cfi_check_fail", 0x10uLL, 0, v47, v48, v49);
  v144 = v111;
  v145 = v113;
  v162 = 257;
  sub_1C4774778((uint64_t *)&v176, v50, v51, (uint64_t *)&v144, 2, (uint64_t)v160, 0);
  v52 = (char *)operator new(0x60uLL);
  v53 = v52;
  *((_DWORD *)v52 + 13) = *((_DWORD *)v52 + 13) & 0x38000000 | 1;
  *(_QWORD *)v52 = 0;
  *((_QWORD *)v52 + 2) = 0;
  *((_QWORD *)v52 + 1) = 0;
  *((_QWORD *)v52 + 4) = ***(_QWORD ***)v39 + 1576;
  v54 = (llvm::Value *)(v52 + 32);
  *((_QWORD *)v52 + 3) = v52 + 32;
  *((_QWORD *)v52 + 5) = 0;
  v52[48] = 30;
  v52[49] = 0;
  *((_WORD *)v52 + 25) = 0;
  *((_DWORD *)v52 + 13) = 1;
  *((_DWORD *)v52 + 22) = 0;
  *(_OWORD *)(v52 + 72) = 0u;
  *(_OWORD *)(v52 + 56) = 0u;
  v55 = *(_QWORD *)(v39 + 8);
  v112 = (llvm::BasicBlock *)v39;
  *(_QWORD *)v52 = v39;
  *((_QWORD *)v52 + 1) = v55;
  if (v55)
    *(_QWORD *)(v55 + 16) = v52 + 8;
  *((_QWORD *)v52 + 2) = v40;
  *v40 = v52;
  v162 = 257;
  (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v185 + 2))(v185, v54, v160, v181, v182);
  if ((_DWORD)v177)
  {
    v62 = (char *)v176;
    v63 = (char *)v176 + 16 * v177;
    v64 = (unsigned __int8 **)(v53 + 80);
    do
    {
      v65 = *(_DWORD *)v62;
      v66 = (unsigned __int8 *)*((_QWORD *)v62 + 1);
      if (v66)
      {
        if (!v65)
        {
          v144 = (void *)*((_QWORD *)v62 + 1);
          llvm::MetadataTracking::track((uint64_t)&v144, v66, 2);
          v67 = *v64;
          if (!*v64)
          {
LABEL_70:
            v68 = (unsigned __int8 *)v144;
            *v64 = (unsigned __int8 *)v144;
            if (v68)
              llvm::MetadataTracking::retrack((uint64_t)&v144, v68, (uint64_t)(v53 + 80));
            goto LABEL_67;
          }
LABEL_64:
          llvm::MetadataTracking::untrack((uint64_t)(v53 + 80), v67);
          goto LABEL_70;
        }
      }
      else
      {
        v67 = *v64;
        if (!*v64 && (v53[55] & 0x20) == 0)
          goto LABEL_67;
        if (!v65)
        {
          v144 = 0;
          if (!v67)
            goto LABEL_70;
          goto LABEL_64;
        }
      }
      llvm::Value::setMetadata(v54, *(_DWORD *)v62, (llvm::MDNode *)v66);
LABEL_67:
      v62 += 16;
    }
    while (v62 != v63);
  }
  v56 = **(_QWORD **)v112;
  v160[0] = v161;
  v160[1] = (void *)0x200000000;
  v165 = v56;
  v166 = &v174;
  v167 = &v175;
  v168 = 0;
  v169 = 0;
  v170 = 512;
  v171 = 7;
  v173 = 0;
  v172 = 0;
  v174 = &unk_1E8167888;
  v175 = &unk_1E8167A08;
  v163 = v112;
  v164 = v105;
  LLVMBuildRetVoid_0((uint64_t *)v160);
  v57 = **v36;
  v144 = v146;
  v145 = 0x200000000;
  v149 = v57;
  v150 = &v158;
  v151 = &v159;
  v152 = 0;
  v153 = 0;
  v154 = 512;
  v155 = 7;
  v157 = 0;
  v156 = 0;
  v158 = &unk_1E8167888;
  v159 = &unk_1E8167A08;
  v58 = (char *)v122 - (char *)v121;
  v147 = v36;
  v148 = v36 + 5;
  v59 = (char *)operator new(0x48uLL);
  *(_QWORD *)v59 = 0;
  *((_QWORD *)v59 + 1) = ***(_QWORD ***)v114 + 1576;
  *((_QWORD *)v59 + 2) = 0;
  v59[24] = 31;
  v59[25] = 0;
  *((_WORD *)v59 + 13) = 0;
  *((_DWORD *)v59 + 7) = 0x40000000;
  *((_OWORD *)v59 + 2) = 0u;
  *((_OWORD *)v59 + 3) = 0u;
  *((_DWORD *)v59 + 16) = 0;
  llvm::SwitchInst::init((uint64_t)(v59 + 8), (uint64_t)v114, (uint64_t)v43, ((v58 >> 2) & 0xFFFFFFFE) + 2);
  v130 = 257;
  v115 = (llvm::SwitchInst *)(v59 + 8);
  (*((void (**)(void **, char *, void **, uint64_t **, _QWORD **))*v151 + 2))(v151, v59 + 8, &v127, v147, v148);
  if ((_DWORD)v145)
  {
    v69 = (char *)v144;
    v70 = (char *)v144 + 16 * v145;
    v71 = (unsigned __int8 **)(v59 + 56);
    do
    {
      v72 = *(_DWORD *)v69;
      v60 = (unsigned __int8 *)*((_QWORD *)v69 + 1);
      if (v60)
      {
        if (!v72)
        {
          v124[0] = *((_QWORD *)v69 + 1);
          llvm::MetadataTracking::track((uint64_t)v124, v60, 2);
          v73 = *v71;
          if (!*v71)
          {
LABEL_84:
            v74 = (unsigned __int8 *)v124[0];
            *v71 = (unsigned __int8 *)v124[0];
            if (v74)
              llvm::MetadataTracking::retrack((uint64_t)v124, v74, (uint64_t)(v59 + 56));
            goto LABEL_81;
          }
LABEL_78:
          llvm::MetadataTracking::untrack((uint64_t)(v59 + 56), v73);
          goto LABEL_84;
        }
      }
      else
      {
        v73 = *v71;
        if (!*v71 && (v59[31] & 0x20) == 0)
          goto LABEL_81;
        if (!v72)
        {
          v124[0] = 0;
          if (!v73)
            goto LABEL_84;
          goto LABEL_78;
        }
      }
      llvm::Value::setMetadata(v115, *(_DWORD *)v69, (llvm::MDNode *)v60);
LABEL_81:
      v69 += 16;
    }
    while (v69 != v70);
  }
  v61 = v121;
  v106 = v122;
  if (v121 != v122)
  {
    while (1)
    {
      v75 = *v61;
      v76 = *(llvm::ConstantInt **)(*v28 + 1984);
      v77 = *(_DWORD *)(*v28 + 1992);
      LODWORD(v128) = v77 >> 8;
      if (v77 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v127, v75, 0);
      }
      else
      {
        if (v77 <= 0xFF)
          v78 = 0;
        else
          v78 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v77);
        v127 = (void *)(v78 & v75);
      }
      v79 = llvm::ConstantInt::get(v76, (llvm::LLVMContext *)&v127, (const llvm::APInt *)v60);
      if (v128 >= 0x41 && v127)
        MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
      v127 = "test";
      v130 = 259;
      v80 = (uint64_t **)operator new();
      *v80 = (uint64_t *)(*v28 + 1600);
      v80[1] = 0;
      v81 = *((_DWORD *)v80 + 5) & 0xC0000000;
      *((_DWORD *)v80 + 4) = 22;
      *((_DWORD *)v80 + 5) = v81;
      v80[3] = 0;
      v80[4] = 0;
      v80[5] = (uint64_t *)(v80 + 5);
      v80[6] = (uint64_t *)(v80 + 5);
      v80[7] = 0;
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v107, v80);
      v82 = (uint64_t *)*v107;
      v80[4] = v107;
      v80[3] = v82;
      v82[1] = (uint64_t)(v80 + 3);
      *v107 = (uint64_t)(v80 + 3);
      llvm::Value::setName((uint64_t ***)v80, (uint64_t)&v127);
      v83 = **v80;
      v127 = v129;
      v128 = 0x200000000;
      v133 = v83;
      v134 = &v142;
      v135 = &v143;
      v136 = 0;
      v137 = 0;
      v138 = 512;
      v139 = 7;
      v140 = 0;
      v141 = 0;
      v142 = &unk_1E8167888;
      v143 = &unk_1E8167A08;
      v131 = v80;
      v132 = v80 + 5;
      Declaration = llvm::Intrinsic::getDeclaration(v109, 299, 0, 0);
      v86 = Declaration;
      v87 = Declaration ? *(uint64_t ***)(Declaration + 24) : 0;
      v126[0] = v113;
      v88 = (unsigned __int8 *)llvm::ValueAsMetadata::get(v79, v85);
      v89 = v28;
      v126[1] = llvm::MetadataAsValue::get(v28, v88);
      v125 = 257;
      v90 = (llvm::Value *)sub_1C4774778((uint64_t *)&v127, v87, v86, v126, 2, (uint64_t)v124, 0);
      v91 = operator new(0xA0uLL);
      v92 = v91;
      v93 = 0;
      v94 = (llvm::Value *)(v91 + 24);
      v91[29] = v91[29] & 0x38000000 | 3;
      do
      {
        v95 = &v91[v93];
        *v95 = 0;
        v95[1] = 0;
        v95[2] = 0;
        v95[3] = v94;
        v93 += 8;
      }
      while (v93 != 24);
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v91 + 24), v112, v110, v90, 0);
      v125 = 257;
      (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v135 + 2))(v135, v94, v124, v131, v132);
      if ((_DWORD)v128)
        break;
LABEL_112:
      v103 = *(llvm::MDNode **)(v108 + 32);
      if (v103 || *((_QWORD *)v92 + 18) || (*((_BYTE *)v92 + 119) & 0x20) != 0)
        llvm::Value::setMetadata(v94, 2, v103);
      llvm::SwitchInst::addCase(v115, v79, (llvm::BasicBlock *)v80);
      v28 = v89;
      if (v127 != v129)
        free(v127);
      if (++v61 == v106)
        goto LABEL_47;
    }
    v96 = (char *)v127;
    v97 = (char *)v127 + 16 * v128;
    v98 = (unsigned __int8 **)(v92 + 36);
    while (1)
    {
      v99 = *(_DWORD *)v96;
      v100 = (unsigned __int8 *)*((_QWORD *)v96 + 1);
      if (v100)
      {
        if (!v99)
        {
          v126[0] = *((_QWORD *)v96 + 1);
          llvm::MetadataTracking::track((uint64_t)v126, v100, 2);
          v101 = *v98;
          if (!*v98)
          {
LABEL_110:
            v102 = (unsigned __int8 *)v126[0];
            *v98 = (unsigned __int8 *)v126[0];
            if (v102)
              llvm::MetadataTracking::retrack((uint64_t)v126, v102, (uint64_t)(v92 + 36));
            goto LABEL_107;
          }
LABEL_104:
          llvm::MetadataTracking::untrack((uint64_t)(v92 + 36), v101);
          goto LABEL_110;
        }
      }
      else
      {
        v101 = *v98;
        if (!*v98 && (*((_BYTE *)v92 + 119) & 0x20) == 0)
          goto LABEL_107;
        if (!v99)
        {
          v126[0] = 0;
          if (!v101)
            goto LABEL_110;
          goto LABEL_104;
        }
      }
      llvm::Value::setMetadata(v94, *(_DWORD *)v96, (llvm::MDNode *)v100);
LABEL_107:
      v96 += 16;
      if (v96 == v97)
        goto LABEL_112;
    }
  }
LABEL_47:
  if (v144 != v146)
    free(v144);
  if (v160[0] != v161)
    free(v160[0]);
  if (v176 != &v178)
    free(v176);
  if (v117 < 0)
    operator delete(__p);
  if (v194 != (char *)v196)
    free(v194);
  sub_1C6176BF8(v119);
  ModuleFlag = v104;
  return ModuleFlag != 0;
}

uint64_t sub_1C56C5078()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56C4160(v0);
}

void sub_1C56C50A0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56C50C4(_QWORD *a1)
{
  if (*a1 == a1[2] || *a1 == 0)
    return 0;
  else
    return *a1 - 56;
}

uint64_t sub_1C56C50E0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == *(_QWORD *)(a1 + 24) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

BOOL sub_1C56C50FC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[2];
  if (*a1 != v2)
    *a1 = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL sub_1C56C5120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

void llvm::initializeDAEPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E50);
  if (v2 != -1)
  {
    v5[0] = sub_1C56C51A4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E50, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56C51A4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Dead Argument Elimination";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "deadargelim";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32A3;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56C8FFC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeDAHPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E58);
  if (v2 != -1)
  {
    v5[0] = sub_1C56C5294;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E58, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56C5294(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Dead Argument Hacking (BUGPOINT USE ONLY; DO NOT USE)";
  *(_QWORD *)(v2 + 8) = 53;
  *(_QWORD *)(v2 + 16) = "deadarghaX0r";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32A4;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56C9024;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C56C5324(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32A3;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8179760;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831E50);
  if (v3 != -1)
  {
    v7[0] = sub_1C56C51A4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831E50, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::createDeadArgHackingPass(llvm *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F32A4;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E8179808;
  return result;
}

uint64_t llvm::DeadArgumentEliminationPass::DeleteDeadVarargs(llvm::DeadArgumentEliminationPass *this, llvm::Function *a2)
{
  char hasAddressTaken;
  uint64_t result;
  uint64_t v5;
  _QWORD *i;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *j;
  _QWORD *v10;
  int v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ***v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  const void *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  llvm::Type *v26;
  _DWORD *v27;
  llvm::GlobalObject *v28;
  llvm::PointerType *v29;
  _DWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  llvm::ValueSymbolTable *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _QWORD *v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  uint64_t v45;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  char *v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  llvm::ValueSymbolTable *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  llvm::ValueAsMetadata *v121;
  llvm::ValueAsMetadata *v122;
  llvm::ValueAsMetadata *v123;
  llvm::Value *v124;
  llvm::MDNode **v125;
  llvm::MDNode **v126;
  llvm::UndefValue *v127;
  uint64_t *__p;
  uint64_t *v129;
  size_t __n;
  llvm::Function *v131;
  llvm::GlobalObject *v132;
  _DWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  char *v138;
  uint64_t v139;
  char v140;
  _QWORD v141[4];
  __int16 v142;
  void *__src;
  uint64_t v144;
  _WORD v145[32];
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if (*((llvm::Function **)a2 + 9) == (llvm::Function *)((char *)a2 + 72) && (*((_BYTE *)a2 + 34) & 0x80) == 0)
  {
    return 0;
  }
  if ((*((_DWORD *)a2 + 8) & 0xFu) - 7 > 1)
    return 0;
  hasAddressTaken = llvm::Function::hasAddressTaken(a2, 0, 0, 1, 0, 0);
  result = 0;
  if ((hasAddressTaken & 1) != 0)
    return result;
  v5 = *((_QWORD *)a2 + 14);
  if (v5)
  {
    if ((*(_BYTE *)(v5 + 14) & 2) != 0)
      return 0;
  }
  for (i = (_QWORD *)*((_QWORD *)a2 + 10); i != (_QWORD *)((char *)a2 + 72); i = (_QWORD *)i[1])
  {
    if (i)
      v7 = i - 3;
    else
      v7 = 0;
    v8 = v7 + 5;
    for (j = (_QWORD *)v7[6]; j != v8; j = (_QWORD *)j[1])
    {
      v10 = j - 3;
      if (!j)
        v10 = 0;
      v11 = *((unsigned __int8 *)v10 + 16);
      v12 = v11 == 84;
      if (v11 == 84)
        v13 = v10;
      else
        v13 = 0;
      if (j)
      {
        if (v12)
        {
          if ((*((_WORD *)v13 + 9) & 3) == 2)
            return 0;
          v14 = *(v13 - 4);
          if (v14)
          {
            if (!*(_BYTE *)(v14 + 16)
              && *(_QWORD *)(v14 + 24) == v13[9]
              && (*(_BYTE *)(v14 + 33) & 0x20) != 0
              && *(_DWORD *)(*(v10 - 4) + 36) == 315)
            {
              return 0;
            }
          }
        }
      }
    }
  }
  v15 = *((_QWORD *)a2 + 3);
  v16 = *(uint64_t ****)(v15 + 16);
  v17 = *(unsigned int *)(v15 + 12);
  v129 = (uint64_t *)((char *)a2 + 72);
  if (8 * v17 == 8)
  {
    v19 = 0;
    v22 = 0;
  }
  else
  {
    if (!(_DWORD)v17)
LABEL_171:
      abort();
    v18 = (uint64_t *)operator new(8 * v17 - 8);
    v19 = v18;
    if ((_DWORD)v17 != 1)
    {
      v20 = v16 + 1;
      v21 = v18;
      memmove(v18, v20, 8 * v17 - 8);
      v19 = v21;
    }
    v22 = &v19[(8 * v17 - 8) >> 3];
    v16 = *(uint64_t ****)(v15 + 16);
  }
  v23 = (char *)v22 - (char *)v19;
  __p = v19;
  v24 = llvm::FunctionType::get(*v16, v19, v22 - v19, 0);
  v25 = *((_DWORD *)a2 + 8) & 0xF;
  v26 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8);
  v145[8] = 257;
  v27 = operator new(0x80uLL);
  v28 = (llvm::GlobalObject *)(v27 + 2);
  v27[7] = v27[7] & 0x38000000 | 0x40000000;
  *(_QWORD *)v27 = 0;
  v29 = (llvm::PointerType *)v24;
  v30 = v27;
  v31 = llvm::Function::Function((uint64_t *)v27 + 1, v29, v25, v26, (uint64_t)&__src, 0);
  llvm::Function::copyAttributesFrom((llvm::Function *)v31, a2);
  llvm::GlobalObject::setComdat(v28, *((llvm::Comdat **)a2 + 6));
  v32 = *((_QWORD *)a2 + 5);
  *((_QWORD *)v30 + 6) = v32;
  if ((*((_BYTE *)v30 + 31) & 0x10) != 0)
  {
    v33 = *(llvm::ValueSymbolTable **)(v32 + 112);
    if (v33)
      llvm::ValueSymbolTable::reinsertValue(v33, v28);
  }
  v34 = *((_QWORD *)a2 + 7);
  *((_QWORD *)v30 + 8) = v34;
  *((_QWORD *)v30 + 9) = (char *)a2 + 56;
  *(_QWORD *)(v34 + 8) = v30 + 16;
  *((_QWORD *)a2 + 7) = v30 + 16;
  llvm::Value::takeName(v28, a2);
  v131 = a2;
  v35 = *((_QWORD *)a2 + 1);
  v133 = v30;
  if (v35)
  {
    v36 = v30;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = (v23 >> 3);
    v137 = (uint64_t *)(v36 + 4);
    __n = v23 & 0x7FFFFFFF8;
    v132 = v28;
    while (1)
    {
      v41 = *(_QWORD *)(v35 + 24);
      v35 = *(_QWORD *)(v35 + 8);
      v42 = *(unsigned __int8 *)(v41 + 16);
      if (v42 >= 0x1C)
      {
        v43 = v42 - 33;
        v44 = v43 > 0x33;
        v45 = (1 << v43) & 0x8000000000041;
        if (!v44 && v45 != 0)
          break;
      }
LABEL_127:
      if (!v35)
        goto LABEL_149;
    }
    v47 = (uint64_t *)(v41 - 32 * (*(_DWORD *)(v41 + 20) & 0x7FFFFFF));
    v139 = v35;
    if (v40 <= (v39 - (uint64_t)v37) >> 3)
    {
      v54 = (v38 - (_BYTE *)v37) >> 3;
      v138 = (char *)v39;
      if (v54 < v40)
      {
        if (v38 == (_BYTE *)v37)
        {
          v38 = v37;
        }
        else
        {
          v55 = 32 * v54;
          v56 = v37;
          v57 = (uint64_t *)(v41 - 32 * (*(_DWORD *)(v41 + 20) & 0x7FFFFFF));
          do
          {
            v58 = *v57;
            v57 += 4;
            *v56++ = v58;
            v55 -= 32;
          }
          while (v55);
        }
        v63 = v38;
        if (v54 != v40)
        {
          v64 = &v47[4 * v54];
          v63 = v38;
          v65 = v38;
          v66 = 32 * v40 - 32 * v54;
          do
          {
            v67 = *v64;
            v64 += 4;
            *v65++ = v67;
            v63 += 8;
            v66 -= 32;
          }
          while (v66);
        }
        v51 = v63 - v38;
        goto LABEL_81;
      }
      if (v40)
      {
        v59 = 32 * v40;
        v60 = (char *)v37;
        v61 = v37;
        do
        {
          v62 = *v47;
          v47 += 4;
          *v61++ = v62;
          v60 += 8;
          v59 -= 32;
        }
        while (v59);
      }
      else
      {
        v60 = (char *)v37;
      }
      v51 = v60 - (char *)v37;
    }
    else
    {
      if (v37)
      {
        operator delete(v37);
        v39 = 0;
      }
      v48 = v39 >> 2;
      if (v39 >> 2 <= v40)
        v48 = v40;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v48;
      if (v49 >> 61)
        goto LABEL_171;
      v50 = (char *)operator new(8 * v49);
      v37 = v50;
      v51 = 0;
      v52 = 32 * v40;
      do
      {
        v53 = *v47;
        v47 += 4;
        *(_QWORD *)&v50[v51] = v53;
        v51 += 8;
        v52 -= 32;
      }
      while (v52);
      v138 = &v50[8 * v49];
    }
    v38 = v37;
LABEL_81:
    v68 = *(_QWORD *)(v41 + 64);
    if (v68)
    {
      __src = v145;
      v144 = 0x800000000;
      v69 = __n;
      if (__n)
      {
        v69 = 0;
        v70 = 0;
        do
        {
          if ((v70 + 2) < *(_DWORD *)(v68 + 8))
            v71 = *(_QWORD *)(v68 + 40 + 8 * (v70 + 2));
          else
            v71 = 0;
          if (v69 >= HIDWORD(v144))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v145, v69 + 1, 8);
            v69 = v144;
          }
          *((_QWORD *)__src + v69) = v71;
          v69 = v144 + 1;
          LODWORD(v144) = v144 + 1;
          ++v70;
        }
        while (v40 != v70);
      }
      v72 = *(_DWORD *)(v68 + 8);
      if (v72)
      {
        v73 = *(_QWORD *)(v68 + 40);
        if (v72 == 1)
          v74 = 0;
        else
          v74 = *(_QWORD *)(v68 + 48);
      }
      else
      {
        v73 = 0;
        v74 = 0;
      }
      v75 = llvm::AttributeList::get(**(uint64_t ***)v131, v73, v74, __src, v69);
      if (__src != v145)
        free(__src);
    }
    else
    {
      v75 = 0;
    }
    __src = v145;
    v144 = 0x100000000;
    v76 = *(_DWORD *)(v41 + 20);
    if (v76 < 0)
    {
      v107 = *(_QWORD *)(v41 - 32 * (v76 & 0x7FFFFFF) - 8);
      if ((v107 & 0xFFFFFFFF0) != 0)
      {
        v108 = (v107 >> 4);
        v109 = v41;
        do
        {
          v110 = *(_DWORD *)(v41 + 20) & 0x7FFFFFF;
          v111 = v41 - 32 * v110;
          v112 = (unsigned int *)(v109 - (*(_QWORD *)(v111 - 8) + 32 * v110));
          v113 = *v112;
          v114 = v112[1];
          v115 = *((_QWORD *)v112 - 1);
          v141[0] = v111 + 32 * v113;
          v141[1] = v114 - v113;
          v141[2] = v115;
          sub_1C623D924((uint64_t)&__src, (uint64_t)v141);
          v109 += 16;
          --v108;
        }
        while (v108);
      }
    }
    v77 = &v38[v51];
    v78 = *((_QWORD *)v133 + 4);
    if (*(_BYTE *)(v41 + 16) == 33)
    {
      v101 = *(_QWORD *)(v41 - 96);
      v102 = *(_QWORD *)(v41 - 64);
      v142 = 257;
      v87 = sub_1C61CC1B8(v78, (uint64_t)v28, v101, v102, v37, (v77 - (char *)v37) >> 3, (uint64_t)__src, v144, (uint64_t)v141, (llvm::Instruction *)v41);
      v94 = *((_WORD *)v87 + 9);
    }
    else
    {
      v79 = v144;
      v142 = 257;
      v136 = v78;
      if ((_DWORD)v144)
      {
        v81 = 0;
        v116 = 48 * v144;
        v80 = (char *)__src;
        v117 = (char *)__src + 32;
        do
        {
          v81 += (*v117 - *(v117 - 1)) >> 3;
          v117 += 6;
          v116 -= 48;
        }
        while (v116);
      }
      else
      {
        v80 = (char *)__src;
        v81 = 0;
      }
      v134 = v77 - (char *)v37;
      v135 = (unint64_t)(v77 - (char *)v37) >> 3;
      v82 = (v81 + v135 + 1);
      v83 = (16 * v144);
      if ((_DWORD)v83)
        v84 = (16 * (_DWORD)v144) | 8u;
      else
        v84 = 0;
      v85 = (char *)operator new(v84 + 32 * v82 + 80);
      v86 = &v85[v84];
      v87 = &v85[32 * v82 + v84];
      *((_DWORD *)v87 + 5) = v82 & 0x7FFFFFF | (((_DWORD)v83 != 0) << 31) | *((_DWORD *)v87 + 5) & 0x38000000;
      if ((_DWORD)v82)
      {
        do
        {
          *(_QWORD *)v86 = 0;
          *((_QWORD *)v86 + 1) = 0;
          *((_QWORD *)v86 + 2) = 0;
          *((_QWORD *)v86 + 3) = v87;
          v86 += 32;
        }
        while (v86 != v87);
      }
      v88 = v136;
      if ((_DWORD)v83)
        *(_QWORD *)&v85[v83] = v83;
      v89 = (uint64_t)v80;
      v90 = 0;
      if ((_DWORD)v79)
      {
        v118 = 48 * v79;
        v119 = v80 + 32;
        do
        {
          v90 += (*v119 - *(v119 - 1)) >> 3;
          v119 += 6;
          v118 -= 48;
        }
        while (v118);
      }
      *(_QWORD *)v87 = **(_QWORD **)(v136 + 16);
      *((_QWORD *)v87 + 1) = 0;
      v91 = *((_DWORD *)v87 + 5) & 0xC0000000 | (v90 + v135 + 1) & 0x7FFFFFF;
      *((_DWORD *)v87 + 4) = 84;
      *((_DWORD *)v87 + 5) = v91;
      *(_OWORD *)(v87 + 24) = 0u;
      v92 = v87 + 24;
      *(_OWORD *)(v87 + 40) = 0u;
      *((_DWORD *)v87 + 14) = 0;
      if (v41)
      {
        v103 = *(_QWORD *)(v41 + 40);
        *((_QWORD *)v87 + 5) = v103;
        *(_WORD *)(v103 + 18) &= ~0x8000u;
        if ((v87[23] & 0x10) != 0)
        {
          v105 = *(_QWORD *)(v103 + 56);
          if (v105)
          {
            v106 = *(llvm::ValueSymbolTable **)(v105 + 104);
            if (v106)
            {
              llvm::ValueSymbolTable::reinsertValue(v106, (llvm::Value *)v87);
              v88 = v136;
            }
          }
        }
        v104 = *(_QWORD *)(v41 + 24);
        *((_QWORD *)v87 + 3) = v104;
        *((_QWORD *)v87 + 4) = v41 + 24;
        *(_QWORD *)(v104 + 8) = v92;
        *(_QWORD *)(v41 + 24) = v92;
        v91 = *((_DWORD *)v87 + 5);
      }
      *((_QWORD *)v87 + 8) = 0;
      *((_QWORD *)v87 + 9) = v88;
      sub_1C5382FD4((uint64_t)&v140, v37, &v37[v134 >> 3], (uint64_t)&v87[-32 * (v91 & 0x7FFFFFF)]);
      if (*((_QWORD *)v87 - 4))
      {
        **((_QWORD **)v87 - 2) = *((_QWORD *)v87 - 3);
        v120 = *((_QWORD *)v87 - 3);
        if (v120)
          *(_QWORD *)(v120 + 16) = *((_QWORD *)v87 - 2);
      }
      v93 = *v137;
      *((_QWORD *)v87 - 3) = *v137;
      v28 = v132;
      *((_QWORD *)v87 - 4) = v132;
      if (v93)
        *(_QWORD *)(v93 + 16) = v87 - 24;
      *((_QWORD *)v87 - 2) = v137;
      *v137 = (uint64_t)(v87 - 32);
      llvm::CallBase::populateBundleOperandInfos((uint64_t)v87, v89, v79, v135);
      llvm::Value::setName((uint64_t ***)v87, (uint64_t)v141);
      v94 = *((_WORD *)v87 + 9) & 0xFFFC | *(_WORD *)(v41 + 18) & 3;
      *((_WORD *)v87 + 9) = v94;
    }
    *((_WORD *)v87 + 9) = *(_WORD *)(v41 + 18) & 0xFFC | v94 & 0xF003;
    *((_QWORD *)v87 + 8) = v75;
    v141[0] = 2;
    llvm::Instruction::copyMetadata((uint64_t)v87, v41, (int *)v141, 2);
    if (*(_QWORD *)(v41 + 8))
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v41, (llvm::Value *)v87, (llvm::Value *)1);
    llvm::Value::takeName((llvm::Value *)v87, (llvm::Value *)v41);
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v41 + 40) + 40, (uint64_t ***)v41);
    v95 = *(_QWORD *)(v41 + 24);
    v96 = *(_QWORD **)(v41 + 32);
    *v96 = v95;
    *(_QWORD *)(v95 + 8) = v96;
    *(_QWORD *)(v41 + 24) = 0;
    *(_QWORD *)(v41 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v41);
    v97 = (char *)__src;
    if ((_DWORD)v144)
    {
      v98 = 48 * v144;
      do
      {
        v99 = &v97[v98];
        v100 = *(void **)&v97[v98 - 24];
        if (v100)
        {
          *((_QWORD *)v99 - 2) = v100;
          operator delete(v100);
        }
        if (*(v99 - 25) < 0)
          operator delete(*((void **)v99 - 6));
        v98 -= 48;
      }
      while (v98);
      v97 = (char *)__src;
    }
    v39 = (uint64_t)v138;
    v35 = v139;
    if (v97 != (char *)v145)
      free(v97);
    v38 = v37;
    goto LABEL_127;
  }
  v37 = 0;
LABEL_149:
  sub_1C566A128((uint64_t)(v133 + 20), *((uint64_t **)v133 + 11), v129);
  if ((*((_WORD *)v131 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(v131);
    v121 = (llvm::ValueAsMetadata *)*((_QWORD *)v131 + 11);
    if ((*((_WORD *)v131 + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(v131);
      v122 = (llvm::ValueAsMetadata *)*((_QWORD *)v131 + 11);
      goto LABEL_154;
    }
  }
  else
  {
    v121 = (llvm::ValueAsMetadata *)*((_QWORD *)v131 + 11);
  }
  v122 = v121;
LABEL_154:
  v123 = (llvm::ValueAsMetadata *)((char *)v122 + 40 * *((_QWORD *)v131 + 12));
  if ((*((_WORD *)v133 + 13) & 1) != 0)
    llvm::Function::BuildLazyArguments(v28);
  if (v121 != v123)
  {
    v124 = (llvm::Value *)*((_QWORD *)v133 + 12);
    do
    {
      llvm::Value::doRAUW(v121, v124, (llvm::Value *)1);
      llvm::Value::takeName(v124, v121);
      v121 = (llvm::ValueAsMetadata *)((char *)v121 + 40);
      v124 = (llvm::Value *)((char *)v124 + 40);
    }
    while (v121 != v123);
  }
  __src = v145;
  v144 = 0x100000000;
  llvm::Value::getAllMetadata(v131, (uint64_t)&__src);
  if ((_DWORD)v144)
  {
    v125 = (llvm::MDNode **)__src;
    v126 = (llvm::MDNode **)((char *)__src + 16 * v144);
    do
    {
      llvm::Value::addMetadata(v28, *(_DWORD *)v125, v125[1]);
      v125 += 2;
    }
    while (v125 != v126);
  }
  v127 = v28;
  if (*(_QWORD *)v28 != *(_QWORD *)v131)
    v127 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v28, *(llvm::Constant **)v131, 0);
  llvm::Value::doRAUW(v131, v127, (llvm::Value *)1);
  llvm::Constant::removeDeadConstantUsers((uint64_t)v28);
  llvm::Function::eraseFromParent(v131);
  if (__src != v145)
    free(__src);
  if (v37)
    operator delete(v37);
  if (__p)
    operator delete(__p);
  return 1;
}

uint64_t llvm::DeadArgumentEliminationPass::RemoveDeadArgumentsFromCallers(llvm::DeadArgumentEliminationPass *this, llvm::Function *a2)
{
  int v4;
  char v5;
  llvm::GlobalValue *Section;
  int v7;
  llvm::Module *v8;
  _BOOL4 SemanticInterposition;
  _QWORD *i;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  llvm::UndefValue *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::UndefValue *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v48;
  _QWORD **v49;
  _QWORD *v50[3];
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[5];

  v54[4] = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a2 + 16))
  {
    if (v4 == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      goto LABEL_86;
  }
  else if (*((llvm::Function **)a2 + 9) == (llvm::Function *)((char *)a2 + 72) && (*((_BYTE *)a2 + 34) & 0x80) == 0)
  {
    goto LABEL_86;
  }
  v5 = 0;
  if (((1 << (*((_DWORD *)a2 + 8) & 0xF)) & 0x7D5) != 0)
  {
    if (v4 == 3)
    {
      Section = llvm::GlobalValue::getSection(a2);
      if (a2 == (llvm::Function *)12
        && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
        && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
      {
        goto LABEL_86;
      }
    }
    v7 = *((_DWORD *)a2 + 8);
    if ((v7 & 0xFu) - 5 < 4 || (v5 = 0, ((1 << (v7 & 0xF)) & 0x614) == 0))
    {
      v8 = (llvm::Module *)*((_QWORD *)a2 + 5);
      if (v8)
      {
        SemanticInterposition = llvm::Module::getSemanticInterposition(v8);
        v7 = *((_DWORD *)a2 + 8);
        if (SemanticInterposition && (v7 & 0x4000) == 0)
          goto LABEL_86;
      }
      if ((v7 & 0xFu) - 7 <= 1)
      {
        for (i = (_QWORD *)*((_QWORD *)this + 7); i; i = (_QWORD *)*i)
        {
          v11 = i[4];
          if (v11 <= (unint64_t)a2)
          {
            if (v11 >= (unint64_t)a2)
              goto LABEL_20;
            ++i;
          }
        }
        if (*(_DWORD *)(*((_QWORD *)a2 + 3) + 8) < 0x100u)
          goto LABEL_86;
      }
LABEL_20:
      v12 = *((_QWORD *)a2 + 14);
      if (v12 && (*(_BYTE *)(v12 + 14) & 2) != 0 || !*((_QWORD *)a2 + 1))
      {
LABEL_86:
        v5 = 0;
        return v5 & 1;
      }
      v52 = v54;
      v53 = 0x800000000;
      v50[0] = 0;
      v50[1] = 0;
      v49 = v50;
      v48 = xmmword_1C85FC8D0;
      if ((*((_BYTE *)a2 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(a2);
        v13 = *((_QWORD *)a2 + 11);
        if ((*((_WORD *)a2 + 9) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments(a2);
          v14 = *((_QWORD *)a2 + 11);
          goto LABEL_26;
        }
      }
      else
      {
        v13 = *((_QWORD *)a2 + 11);
      }
      v14 = v13;
LABEL_26:
      v15 = v14 + 40 * *((_QWORD *)a2 + 12);
      if (v13 == v15)
      {
        v5 = 0;
      }
      else
      {
        v5 = 0;
        do
        {
          v16 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 112);
          if (!v16
            || (v17 = *(_DWORD *)(v13 + 32) + 2, v17 >= *(_DWORD *)(v16 + 8))
            || (v21 = *(_QWORD *)(v16 + 8 * v17 + 40)) == 0
            || (*(char *)(v21 + 19) & 0x80000000) == 0)
          {
            if (!*(_QWORD *)(v13 + 8)
              && (llvm::Argument::hasPassPointeeByValueCopyAttr((llvm::Argument *)v13) & 1) == 0)
            {
              if ((*(_BYTE *)(v13 + 23) & 8) != 0)
              {
                v18 = llvm::UndefValue::get(*(llvm::UndefValue **)v13, a2);
                v5 = 1;
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, v18, (llvm::Value *)1);
              }
              v19 = *(_DWORD *)(v13 + 32);
              v20 = v53;
              if (v53 >= (unint64_t)HIDWORD(v53))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v53 + 1, 4);
                v20 = v53;
              }
              *((_DWORD *)v52 + v20) = v19;
              LODWORD(v53) = v53 + 1;
              llvm::Function::removeParamAttrs((uint64_t)a2, *(_DWORD *)(v13 + 32), (uint64_t)&v48);
            }
          }
          v13 += 40;
        }
        while (v13 != v15);
      }
      if ((_DWORD)v53)
      {
        for (j = *((_QWORD *)a2 + 1); j; j = *(_QWORD *)(j + 8))
        {
          v23 = *(_QWORD *)(j + 24);
          v24 = *(unsigned __int8 *)(v23 + 16);
          if (v24 >= 0x1C)
          {
            v25 = v24 - 33;
            v26 = v25 > 0x33;
            v27 = (1 << v25) & 0x8000000000041;
            v28 = v26 || v27 == 0;
            if (!v28 && v23 - 32 == j && *(_QWORD *)(v23 + 72) == *((_QWORD *)a2 + 3) && (_DWORD)v53)
            {
              v29 = 0;
              v30 = (uint64_t *)(v23 + 64);
              v31 = 4 * v53;
              do
              {
                v32 = *(unsigned int *)((char *)v52 + v29);
                v33 = llvm::UndefValue::get(**(llvm::UndefValue ***)(v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) + 32 * v32), a2);
                v34 = v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF);
                v35 = v34 + 32 * v32;
                if (*(_QWORD *)v35)
                {
                  **(_QWORD **)(v35 + 16) = *(_QWORD *)(v35 + 8);
                  v36 = *(_QWORD *)(v35 + 8);
                  if (v36)
                    *(_QWORD *)(v36 + 16) = *(_QWORD *)(v35 + 16);
                }
                *(_QWORD *)v35 = v33;
                if (v33)
                {
                  v39 = *((_QWORD *)v33 + 1);
                  v37 = (_QWORD *)((char *)v33 + 8);
                  v38 = v39;
                  v40 = v34 + 32 * v32;
                  *(_QWORD *)(v40 + 8) = v39;
                  if (v39)
                    *(_QWORD *)(v38 + 16) = v40 + 8;
                  *(_QWORD *)(v40 + 16) = v37;
                  *v37 = v35;
                }
                v41 = **(uint64_t ***)v23;
                v42 = *(_QWORD *)(v23 + 64);
                if (v42 && (v32 + 2) < *(_DWORD *)(v42 + 8))
                  v43 = *(_QWORD *)(v42 + 8 * (v32 + 2) + 40);
                else
                  v43 = 0;
                v51 = v43;
                v44 = llvm::AttributeSet::removeAttributes(&v51, v41, (uint64_t)&v48);
                if (v43 == v44)
                  v45 = *v30;
                else
                  v45 = llvm::AttributeList::setAttributesAtIndex((_QWORD *)(v23 + 64), v41, (int)v32 + 1, v44);
                *v30 = v45;
                v29 += 4;
              }
              while (v31 != v29);
              v5 = 1;
            }
          }
        }
      }
      else
      {
        v5 = 0;
      }
      sub_1C5010E9C((uint64_t)&v49, v50[0]);
      if (v52 != v54)
        free(v52);
    }
  }
  return v5 & 1;
}

uint64_t llvm::DeadArgumentEliminationPass::MarkIfNotLive(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *i;
  unint64_t v8;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12[2];

  v12[0] = a2;
  v12[1] = a3;
  for (i = *(_QWORD **)(a1 + 56); i; i = (_QWORD *)*i)
  {
    v8 = i[4];
    if (v8 <= a2)
    {
      if (v8 >= a2)
        return 0;
      ++i;
    }
  }
  if (sub_1C56C9234(*(_QWORD *)(a1 + 32), v12))
    return 0;
  v10 = *(unsigned int *)(a4 + 8);
  if (v10 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a4 + 8);
  }
  v11 = (unint64_t *)(*(_QWORD *)a4 + 16 * v10);
  *v11 = a2;
  v11[1] = a3;
  ++*(_DWORD *)(a4 + 8);
  return 1;
}

uint64_t llvm::DeadArgumentEliminationPass::IsLive(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD **)(a1 + 56);
  if (!v2)
    return sub_1C56C9234(*(_QWORD *)(a1 + 32), a2) != 0;
  v3 = *a2;
  while (1)
  {
    v4 = v2[4];
    if (v3 >= v4)
      break;
LABEL_6:
    v2 = (_QWORD *)*v2;
    if (!v2)
      return sub_1C56C9234(*(_QWORD *)(a1 + 32), a2) != 0;
  }
  if (v4 < v3)
  {
    ++v2;
    goto LABEL_6;
  }
  return 1;
}

uint64_t llvm::DeadArgumentEliminationPass::SurveyUse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v4 = a4;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(unsigned __int8 *)(v7 + 16);
  if (v7)
    v9 = v8 == 29;
  else
    v9 = 0;
  if (v9)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 56);
    if ((_DWORD)a4 == -1)
    {
      v25 = 0;
      v13 = 1;
      while (1)
      {
        v26 = **(_QWORD **)(*(_QWORD *)(v14 + 24) + 16);
        v27 = *(unsigned __int8 *)(v26 + 8);
        if (v27 == 7)
        {
          v28 = 0;
        }
        else if (v27 == 17)
        {
          v28 = *(unsigned int *)(v26 + 32);
        }
        else
        {
          v28 = v27 == 16 ? *(unsigned int *)(v26 + 12) : 1;
        }
        if (v25 >= v28)
          break;
        v29 = llvm::DeadArgumentEliminationPass::MarkIfNotLive(a1, v14, v25, a3);
        if ((_DWORD)v13)
          v13 = v29;
        else
          v13 = 0;
        ++v25;
      }
      return v13;
    }
    v15 = a4;
    return llvm::DeadArgumentEliminationPass::MarkIfNotLive(a1, v14, v15, a3);
  }
  if (!v7 || v8 != 93)
  {
    if (v8 < 0x1C)
      return 0;
    v17 = v8 - 33;
    v18 = v17 > 0x33;
    v19 = (1 << v17) & 0x8000000000041;
    if (v18 || v19 == 0)
      return 0;
    v14 = *(_QWORD *)(v7 - 32);
    if (!v14)
      return 0;
    if (*(_BYTE *)(v14 + 16))
      return 0;
    v21 = *(_QWORD *)(v14 + 24);
    if (v21 != *(_QWORD *)(v7 + 72))
      return 0;
    v22 = *(_DWORD *)(v7 + 20);
    v23 = -(uint64_t)(v22 & 0x7FFFFFF);
    if (v22 < 0)
    {
      v30 = v7 - 32 * (v22 & 0x7FFFFFF);
      v31 = *(_QWORD *)(v30 - 8);
      if ((v31 & 0xFFFFFFFF0) != 0)
      {
        v32 = (unint64_t)(a2 - v30) >> 5;
        if (*(_DWORD *)(v30 - v31) <= v32 && *(_DWORD *)(v30 - 12) > v32)
          return 0;
      }
    }
    v24 = a2 - (v7 + 32 * v23);
    if (*(_DWORD *)(v21 + 12) - 1 <= (v24 >> 5))
      return 0;
    v15 = (v24 >> 5) | 0x100000000;
    return llvm::DeadArgumentEliminationPass::MarkIfNotLive(a1, v14, v15, a3);
  }
  v10 = *(_DWORD *)(v7 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD *)(v7 - 8);
  else
    v11 = v7 - 32 * (v10 & 0x7FFFFFF);
  if (((a2 - v11) & 0x1FFFFFFFE0) != 0)
    v4 = **(unsigned int **)(v7 + 64);
  v12 = *(_QWORD *)(v7 + 8);
  if (v12)
  {
    while (llvm::DeadArgumentEliminationPass::SurveyUse(a1, v12, a3, v4))
    {
      v12 = *(_QWORD *)(v12 + 8);
      if (!v12)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t llvm::DeadArgumentEliminationPass::SurveyUses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
    return 1;
  while (1)
  {
    result = llvm::DeadArgumentEliminationPass::SurveyUse(a1, v3, a3, 0xFFFFFFFFLL);
    if (!(_DWORD)result)
      break;
    v3 = *(_QWORD *)(v3 + 8);
    if (!v3)
      return 1;
  }
  return result;
}

void llvm::DeadArgumentEliminationPass::SurveyFunction(llvm::DeadArgumentEliminationPass *this, const llvm::Function *a2)
{
  _BYTE *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned __int8 v20;
  uint64_t v21;
  llvm::BasicBlock *v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  unint64_t v69;
  llvm::Function *v70;
  _BOOL4 v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  _BYTE *v75;
  unsigned int v76;
  __int128 v77;
  __int128 __src;
  _BYTE v79[80];
  void *v80;
  unint64_t v81;
  _BYTE v82[480];
  void *v83[2];
  _QWORD v84[5];

  v84[3] = *MEMORY[0x1E0C80C00];
  v4 = (_BYTE *)*((_QWORD *)a2 + 14);
  if (v4 && ((char)v4[32] < 0 || (v4[33] & 1) != 0 || (v4[14] & 2) != 0))
  {
    llvm::DeadArgumentEliminationPass::MarkLive(this, a2);
    return;
  }
  v5 = **(_QWORD **)(*((_QWORD *)a2 + 3) + 16);
  v6 = *(unsigned __int8 *)(v5 + 8);
  switch(v6)
  {
    case 7:
      v7 = 0;
      break;
    case 17:
      v7 = *(_DWORD *)(v5 + 32);
      break;
    case 16:
      v7 = *(_DWORD *)(v5 + 12);
      break;
    default:
      v7 = 1;
      break;
  }
  v8 = v7;
  v9 = v84;
  v83[0] = v84;
  v83[1] = (void *)0x500000000;
  sub_1C56C7108((char *)v83, v7, 1);
  *(_QWORD *)&__src = v79;
  *((_QWORD *)&__src + 1) = 0x500000000;
  v80 = v82;
  v81 = 0x500000000;
  if (v7 < 6)
  {
    if (v7)
    {
      v15 = v82;
      v16 = v7;
      do
      {
        *v15 = v15 + 2;
        v15[1] = 0x500000000;
        if (DWORD2(__src))
          v15 = (_QWORD *)sub_1C619EBD0((uint64_t)v15, (uint64_t)&__src);
        v15 += 12;
        --v16;
      }
      while (v16);
    }
    LODWORD(v81) = v7;
  }
  else
  {
    v10 = v7;
    *(_QWORD *)&v77 = 0;
    v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v80, v7, 96, (unint64_t *)&v77);
    v12 = 0;
    v13 = 96 * v7;
    do
    {
      v14 = &v11[v12];
      *(_QWORD *)v14 = &v11[v12 + 16];
      *((_QWORD *)v14 + 1) = 0x500000000;
      if (DWORD2(__src))
        sub_1C619EBD0((uint64_t)v14, (uint64_t)&__src);
      v12 += 96;
    }
    while (v13 != v12);
    v17 = (char *)v80;
    if ((_DWORD)v81)
    {
      v66 = 96 * v81;
      do
      {
        v67 = *(char **)&v17[v66 - 96];
        if (&v17[v66 - 80] != v67)
          free(v67);
        v66 -= 96;
      }
      while (v66);
      v17 = (char *)v80;
    }
    v18 = v77;
    if (v17 != v82)
      free(v17);
    v80 = v11;
    v81 = __PAIR64__(v18, v10);
    v7 = v10;
  }
  if ((_BYTE *)__src != v79)
    free((void *)__src);
  v19 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (v19 == (_QWORD *)((char *)a2 + 72))
  {
    v20 = 0;
LABEL_53:
    v28 = *((_DWORD *)a2 + 8);
    if ((v28 & 0xFu) - 7 >= 2 && ((v28 & 0x2000) != 0 || !*((_BYTE *)this + 72)))
      goto LABEL_111;
    v68 = v84;
    v70 = a2;
    v29 = *((_QWORD *)a2 + 1);
    if (v29)
    {
      v72 = 0;
      v30 = 0;
      v75 = v79;
      v31 = 4 * v8;
      v69 = v8;
      v74 = v7;
      while (1)
      {
        v73 = v29;
        v32 = *(_QWORD *)(v29 + 24);
        v33 = *(unsigned __int8 *)(v32 + 16);
        if (v33 < 0x1C)
          break;
        v34 = v33 - 33 > 0x33 || ((1 << (v33 - 33)) & 0x8000000000041) == 0;
        if (v34 || v32 - 32 != v73 || *(_QWORD *)(v32 + 72) != *((_QWORD *)v70 + 3))
          break;
        v71 = v33 == 84 && (*(_WORD *)(v32 + 18) & 3) == 2;
        v76 = v7;
        if (v30 != v7)
        {
          v35 = *(_DWORD *)(v32 + 20);
          if (v35 < 0)
          {
            v51 = v8;
            v52 = *(_QWORD *)(v32 - 32 * (v35 & 0x7FFFFFF) - 8);
            if ((v52 & 0xFFFFFFFF0) != 0)
            {
              v53 = (v52 >> 4);
              v54 = v32 - 8;
              do
              {
                if (*(_DWORD *)(*(_QWORD *)(v54
                                           - (*(_QWORD *)(v32 - 8 - 32 * (*(_DWORD *)(v32 + 20) & 0x7FFFFFF))
                                            + 32 * (*(_DWORD *)(v32 + 20) & 0x7FFFFFF)))
                               + 8) == 6)
                {
                  sub_1C56C7108((char *)v83, v51, 0);
                  v30 = v74;
                }
                v54 += 16;
                --v53;
                v8 = v51;
              }
              while (v53);
            }
          }
          v36 = *(_QWORD *)(v32 + 8);
          v76 = v30;
          if (v36)
          {
            while (1)
            {
              v37 = *(_QWORD *)(v36 + 24);
              if (v37 && *(_BYTE *)(v37 + 16) == 92)
              {
                v38 = **(unsigned int **)(v37 + 64);
                v39 = v83[0];
                if (*((_DWORD *)v83[0] + v38))
                {
                  v40 = *(_QWORD *)(v37 + 8);
                  if (v40)
                  {
                    v41 = (char *)v80 + 96 * v38;
                    while (llvm::DeadArgumentEliminationPass::SurveyUse((uint64_t)this, v40, (uint64_t)v41, 0xFFFFFFFFLL))
                    {
                      v40 = *(_QWORD *)(v40 + 8);
                      if (!v40)
                      {
                        v42 = 1;
                        goto LABEL_98;
                      }
                    }
                    v42 = 0;
LABEL_98:
                    v39 = v83[0];
                  }
                  else
                  {
                    v42 = 1;
                  }
                  v39[v38] = v42;
                  v76 += v42 ^ 1;
                }
                goto LABEL_100;
              }
              *(_QWORD *)&__src = v75;
              *((_QWORD *)&__src + 1) = 0x500000000;
              v43 = llvm::DeadArgumentEliminationPass::SurveyUse((uint64_t)this, v36, (uint64_t)&__src, 0xFFFFFFFFLL);
              if (v43)
                break;
              sub_1C56C7108((char *)v83, v8, 0);
              v76 = v74;
LABEL_92:
              if ((_BYTE *)__src != v75)
                free((void *)__src);
              if (!v43)
                goto LABEL_101;
LABEL_100:
              v36 = *(_QWORD *)(v36 + 8);
              if (!v36)
                goto LABEL_101;
            }
            if (!v74)
              goto LABEL_92;
            v44 = 0;
            v45 = 0;
            while (2)
            {
              if (*(_DWORD *)((char *)v83[0] + v45))
              {
                v46 = (char *)v80 + v44;
                v47 = (const void *)__src;
                v48 = DWORD2(__src);
                v49 = *(unsigned int *)((char *)v80 + v44 + 8);
                v50 = v49 + DWORD2(__src);
                if (v50 > *(unsigned int *)((char *)v80 + v44 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v80 + v44, (uint64_t)(v46 + 16), v50, 16);
                  LODWORD(v49) = *((_DWORD *)v46 + 2);
                  if ((_DWORD)v48)
                  {
LABEL_85:
                    memcpy((void *)(*(_QWORD *)v46 + 16 * v49), v47, 16 * v48);
                    LODWORD(v49) = *((_DWORD *)v46 + 2);
                  }
                }
                else if (DWORD2(__src))
                {
                  goto LABEL_85;
                }
                *((_DWORD *)v46 + 2) = v49 + v48;
              }
              v45 += 4;
              v44 += 96;
              if (v31 == v45)
              {
                v8 = v69;
                goto LABEL_92;
              }
              continue;
            }
          }
        }
LABEL_101:
        v72 |= v71;
        v29 = *(_QWORD *)(v73 + 8);
        v30 = v76;
        v7 = v74;
        if (!v29)
          goto LABEL_113;
      }
      llvm::DeadArgumentEliminationPass::MarkLive(this, v70);
LABEL_132:
      v9 = v68;
      goto LABEL_133;
    }
    v72 = 0;
LABEL_113:
    if (v7)
    {
      v55 = 0;
      v56 = 0;
      do
      {
        *(_QWORD *)&__src = v70;
        *((_QWORD *)&__src + 1) = v56;
        llvm::DeadArgumentEliminationPass::MarkValue((uint64_t *)this, &__src, *((_DWORD *)v83[0] + v56++), (uint64_t)v80 + v55);
        v55 += 96;
      }
      while (v8 != v56);
    }
    *(_QWORD *)&__src = v79;
    *((_QWORD *)&__src + 1) = 0x500000000;
    if ((*((_BYTE *)v70 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(v70);
      v57 = *((_QWORD *)v70 + 11);
      if ((*((_WORD *)v70 + 9) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(v70);
        v58 = *((_QWORD *)v70 + 11);
        goto LABEL_121;
      }
    }
    else
    {
      v57 = *((_QWORD *)v70 + 11);
    }
    v58 = v57;
LABEL_121:
    v59 = v58 + 40 * *((_QWORD *)v70 + 12);
    if (v57 == v59)
    {
LABEL_130:
      if ((_BYTE *)__src != v79)
        free((void *)__src);
      goto LABEL_132;
    }
    v60 = 0;
    while (1)
    {
      if (!((*(_DWORD *)(*((_QWORD *)v70 + 3) + 8) > 0xFFu) | (v72 | v20) & 1))
      {
        v62 = *(_QWORD *)(v57 + 8);
        if (!v62)
        {
LABEL_128:
          v61 = 1;
          goto LABEL_129;
        }
        while (llvm::DeadArgumentEliminationPass::SurveyUse((uint64_t)this, v62, (uint64_t)&__src, 0xFFFFFFFFLL))
        {
          v62 = *(_QWORD *)(v62 + 8);
          if (!v62)
            goto LABEL_128;
        }
      }
      v61 = 0;
LABEL_129:
      *(_QWORD *)&v77 = v70;
      *((_QWORD *)&v77 + 1) = v60 | 0x100000000;
      llvm::DeadArgumentEliminationPass::MarkValue((uint64_t *)this, &v77, v61, (uint64_t)&__src);
      DWORD2(__src) = 0;
      v57 += 40;
      ++v60;
      if (v57 == v59)
        goto LABEL_130;
    }
  }
  v20 = 0;
  v21 = *((_QWORD *)a2 + 3);
  while (1)
  {
    v22 = v19 ? (llvm::BasicBlock *)(v19 - 3) : 0;
    v23 = (_QWORD *)*((_QWORD *)v22 + 5);
    if (v23 != (_QWORD *)((char *)v22 + 40))
    {
      v24 = v23 - 3;
      if (!v23)
        v24 = 0;
      v25 = *((unsigned __int8 *)v24 + 16) - 40;
      if (v25 < 0xFFFFFFF5)
        v24 = 0;
      if (v23)
      {
        if (*((_BYTE *)v24 + 16) == 29 && v25 >= 0xFFFFFFF5)
        {
          v27 = *((_DWORD *)v24 + 5) & 0x7FFFFFF;
          if ((_DWORD)v27)
          {
            if (*(_QWORD *)v24[-4 * v27] != **(_QWORD **)(v21 + 16))
              break;
          }
        }
      }
    }
    v20 |= llvm::BasicBlock::getTerminatingMustTailCall(v22) != 0;
    v19 = (_QWORD *)v19[1];
    if (v19 == (_QWORD *)((char *)a2 + 72))
      goto LABEL_53;
  }
LABEL_111:
  llvm::DeadArgumentEliminationPass::MarkLive(this, a2);
LABEL_133:
  v63 = (char *)v80;
  if ((_DWORD)v81)
  {
    v64 = 96 * v81;
    do
    {
      v65 = *(char **)&v63[v64 - 96];
      if (&v63[v64 - 80] != v65)
        free(v65);
      v64 -= 96;
    }
    while (v64);
    v63 = (char *)v80;
  }
  if (v63 != v82)
    free(v63);
  if (v83[0] != v9)
    free(v83[0]);
}

void llvm::DeadArgumentEliminationPass::MarkLive(llvm::DeadArgumentEliminationPass *this, const llvm::Function *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  const llvm::Function *v18;
  uint64_t v19;

  v5 = (uint64_t **)((char *)this + 56);
  v4 = (uint64_t *)*((_QWORD *)this + 7);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if (v7 <= (unint64_t)a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= (unint64_t)a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)((char *)this + 56);
LABEL_9:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = (uint64_t)a2;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = **((_QWORD **)this + 6);
    if (v9)
    {
      *((_QWORD *)this + 6) = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    sub_1C4768E74(*((uint64_t **)this + 7), v10);
    ++*((_QWORD *)this + 8);
  }
  v11 = *((unsigned int *)a2 + 24);
  if (*((_DWORD *)a2 + 24))
  {
    v12 = 0;
    do
    {
      v18 = a2;
      v19 = v12 | 0x100000000;
      llvm::DeadArgumentEliminationPass::PropagateLiveness((uint64_t **)this, (uint64_t *)&v18);
      ++v12;
    }
    while (v11 != v12);
  }
  v13 = **(_QWORD **)(*((_QWORD *)a2 + 3) + 16);
  v14 = *(unsigned __int8 *)(v13 + 8);
  if (v14 != 7)
  {
    if (v14 == 17)
    {
      v15 = *(_DWORD *)(v13 + 32);
      if (!v15)
        return;
    }
    else if (v14 == 16)
    {
      v15 = *(_DWORD *)(v13 + 12);
      if (!v15)
        return;
    }
    else
    {
      v15 = 1;
    }
    v16 = 0;
    v17 = v15;
    do
    {
      v18 = a2;
      v19 = v16;
      llvm::DeadArgumentEliminationPass::PropagateLiveness((uint64_t **)this, (uint64_t *)&v18);
      ++v16;
    }
    while (v17 != v16);
  }
}

char *sub_1C56C7108(char *result, unint64_t a2, int a3)
{
  _DWORD **v5;
  _DWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;

  v5 = (_DWORD **)result;
  if (*((unsigned int *)result + 3) >= a2)
  {
    v9 = *(_DWORD **)result;
    v8 = result + 8;
    v10 = *((unsigned int *)result + 2);
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = *((unsigned int *)result + 2);
    if (v11)
    {
      v12 = *(_DWORD **)result;
      do
      {
        *v12++ = a3;
        --v11;
      }
      while (v11);
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = &v9[v10];
      do
        *v14++ = a3;
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    *((_DWORD *)result + 2) = 0;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), a2, 4);
    v6 = *v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
    v8 = v5 + 1;
  }
  *v8 = a2;
  return result;
}

uint64_t *llvm::DeadArgumentEliminationPass::MarkValue(uint64_t *result, __int128 *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t **v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;

  v5 = (uint64_t)result;
  if (!a3)
    return (uint64_t *)llvm::DeadArgumentEliminationPass::MarkLive(v5, (uint64_t)a2);
  if (a3 == 1)
  {
    v6 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)a4;
      v8 = *(_QWORD *)a4 + 16 * v6;
      v9 = (uint64_t **)(result + 1);
      while (1)
      {
        v10 = *(_QWORD **)(v5 + 56);
        if (v10)
        {
          v11 = *v7;
          do
          {
            v12 = v10[4];
            if (v11 >= v12)
            {
              if (v12 >= v11)
                return (uint64_t *)llvm::DeadArgumentEliminationPass::MarkLive(v5, (uint64_t)a2);
              ++v10;
            }
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        if (sub_1C56C9234(*(_QWORD *)(v5 + 32), v7))
          return (uint64_t *)llvm::DeadArgumentEliminationPass::MarkLive(v5, (uint64_t)a2);
        v24 = *(_OWORD *)v7;
        v13 = (uint64_t *)operator new(0x40uLL);
        v14 = v13;
        v15 = *a2;
        *((_OWORD *)v13 + 2) = v24;
        *((_OWORD *)v13 + 3) = v15;
        v16 = *v9;
        v17 = (uint64_t **)(v5 + 8);
        v18 = (uint64_t **)(v5 + 8);
        if (*v9)
        {
          v19 = v13[4];
          v20 = *((_DWORD *)v13 + 10);
          do
          {
            while (1)
            {
              v17 = (uint64_t **)v16;
              v21 = v16[4];
              if (v19 >= v21)
              {
                if (v21 < v19)
                  break;
                v22 = *((_DWORD *)v16 + 10);
                if (v20 >= v22
                  && (v22 < v20 || *((unsigned __int8 *)v13 + 44) >= *((unsigned __int8 *)v16 + 44)))
                {
                  break;
                }
              }
              v16 = (uint64_t *)*v16;
              v18 = v17;
              if (!*v17)
                goto LABEL_22;
            }
            v16 = (uint64_t *)v16[1];
          }
          while (v16);
          v18 = v17 + 1;
        }
LABEL_22:
        *v13 = 0;
        v13[1] = 0;
        v13[2] = (uint64_t)v17;
        *v18 = v13;
        v23 = **(_QWORD **)v5;
        if (v23)
        {
          *(_QWORD *)v5 = v23;
          v14 = *v18;
        }
        result = sub_1C4768E74(*(uint64_t **)(v5 + 8), v14);
        ++*(_QWORD *)(v5 + 16);
        v7 += 2;
        if (v7 == (uint64_t *)v8)
          return result;
      }
    }
  }
  return result;
}

uint64_t llvm::DeadArgumentEliminationPass::MarkLive(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  _OWORD *v16;
  uint64_t v17;

  v3 = result;
  v4 = *(_QWORD **)(result + 56);
  if (v4)
  {
    v5 = *(_QWORD *)a2;
    do
    {
      v6 = v4[4];
      if (v5 >= v6)
      {
        if (v6 >= v5)
          return result;
        ++v4;
      }
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  v8 = (_QWORD *)(result + 32);
  v7 = *(_QWORD *)(result + 32);
  result = sub_1C56C9234(v7, (uint64_t *)a2);
  if (!result)
  {
    if (!v7)
    {
      v12 = (_QWORD *)(v3 + 32);
      goto LABEL_22;
    }
    v9 = *(_QWORD *)a2;
    v10 = *(_DWORD *)(a2 + 8);
    v11 = *(unsigned __int8 *)(a2 + 12);
    while (1)
    {
      while (1)
      {
        v12 = (_QWORD *)v7;
        v13 = *(_QWORD *)(v7 + 32);
        if (v9 >= v13)
          break;
LABEL_12:
        v7 = *(_QWORD *)v7;
        v8 = v12;
        if (!*v12)
          goto LABEL_22;
      }
      if (v13 >= v9)
      {
        v14 = *(_DWORD *)(v7 + 40);
        if (v10 < v14)
          goto LABEL_12;
        if (v14 >= v10)
        {
          v15 = *(unsigned __int8 *)(v7 + 44);
          if (v11 < v15)
            goto LABEL_12;
          if (v15 >= v11)
            return llvm::DeadArgumentEliminationPass::PropagateLiveness(v3, a2);
        }
      }
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
      {
        v8 = v12 + 1;
LABEL_22:
        v16 = operator new(0x30uLL);
        v16[2] = *(_OWORD *)a2;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v12;
        *v8 = v16;
        v17 = **(_QWORD **)(v3 + 24);
        if (v17)
        {
          *(_QWORD *)(v3 + 24) = v17;
          v16 = (_OWORD *)*v8;
        }
        sub_1C4768E74(*(uint64_t **)(v3 + 32), (uint64_t *)v16);
        ++*(_QWORD *)(v3 + 40);
        return llvm::DeadArgumentEliminationPass::PropagateLiveness(v3, a2);
      }
    }
  }
  return result;
}

void llvm::DeadArgumentEliminationPass::PropagateLiveness(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v3 = (uint64_t *)(a1 + 1);
  v2 = (uint64_t)a1[1];
  if (v2)
  {
    v6 = *a2;
    v7 = *((_DWORD *)a2 + 2);
    v8 = (uint64_t *)(a1 + 1);
    do
    {
      v9 = *(_QWORD *)(v2 + 32);
      if (v9 < v6
        || v6 >= v9
        && ((v10 = *(_DWORD *)(v2 + 40), v10 < v7)
         || v7 >= v10 && *(unsigned __int8 *)(v2 + 44) < *((unsigned __int8 *)a2 + 12)))
      {
        v2 += 8;
      }
      else
      {
        v8 = (uint64_t *)v2;
      }
      v2 = *(_QWORD *)v2;
    }
    while (v2);
    if (v8 != v3)
    {
      v11 = v8;
      while (v11[4] == *a2
           && *((_DWORD *)v11 + 10) == *((_DWORD *)a2 + 2)
           && *((unsigned __int8 *)v11 + 44) == *((unsigned __int8 *)a2 + 12))
      {
        llvm::DeadArgumentEliminationPass::MarkLive((uint64_t)a1, (uint64_t)(v11 + 6));
        v12 = (uint64_t *)v11[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (uint64_t *)v11[2];
            v14 = *v13 == (_QWORD)v11;
            v11 = v13;
          }
          while (!v14);
        }
        v11 = v13;
        if (v13 == v3)
          goto LABEL_24;
      }
      v3 = v11;
    }
LABEL_24:
    if (v3 != v8)
    {
      do
      {
        v15 = (uint64_t *)v8[1];
        v16 = v8;
        if (v15)
        {
          do
          {
            v17 = v15;
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v17 = (uint64_t *)v16[2];
            v14 = *v17 == (_QWORD)v16;
            v16 = v17;
          }
          while (!v14);
        }
        if (*a1 == v8)
          *a1 = v17;
        v18 = a1[1];
        a1[2] = (uint64_t *)((char *)a1[2] - 1);
        sub_1C485B6E0(v18, v8);
        operator delete(v8);
        v8 = v17;
      }
      while (v3 != v17);
    }
  }
}

uint64_t llvm::DeadArgumentEliminationPass::RemoveDeadStuffFromFunction(llvm::DeadArgumentEliminationPass *this, llvm::Function *a2)
{
  _QWORD *i;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unsigned int v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  const char ***v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  void *v35;
  char *v36;
  void *v37;
  void *v38;
  char *v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  llvm::UndefValue **v43;
  BOOL v44;
  llvm::UndefValue **v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  llvm::UndefValue *v51;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t Sorted;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  llvm::PointerType *v61;
  char v62;
  llvm::Type *v63;
  char *v64;
  llvm::Value *v65;
  uint64_t *v66;
  const char **v67;
  llvm::ValueSymbolTable *v68;
  const char **v69;
  const char **v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  llvm::ValueAsMetadata *v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t j;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t ***v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  char *v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  int v135;
  int v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int16 v142;
  llvm::Type *v143;
  const llvm::Twine *v144;
  llvm::UndefValue *v145;
  llvm::UndefValue *v146;
  llvm::ValueAsMetadata *v147;
  llvm::Value *v148;
  uint64_t v149;
  unsigned int m;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  llvm::ValueSymbolTable *v163;
  llvm *v164;
  llvm::BasicBlock *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t k;
  uint64_t v169;
  unsigned int v170;
  BOOL v171;
  uint64_t v172;
  char *v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  llvm::ValueAsMetadata *v179;
  uint64_t v180;
  char *v181;
  unsigned int *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  char *v191;
  llvm::Type *v192;
  llvm::ValueAsMetadata *v193;
  llvm::ValueAsMetadata *v194;
  uint64_t v195;
  char *v196;
  llvm::ValueAsMetadata *v197;
  int v198;
  llvm::Value *v199;
  llvm::UndefValue *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  llvm::Type *v211;
  llvm::Value *v212;
  uint64_t *v213;
  unsigned int n;
  uint64_t v215;
  char *v216;
  llvm::LLVMContext *v217;
  _BOOL8 v218;
  size_t v219;
  _QWORD *v220;
  _QWORD *v221;
  unsigned __int8 *v222;
  unsigned __int8 *v223;
  unsigned __int8 **v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  uint64_t v227;
  _QWORD *v228;
  llvm::MDNode **v229;
  llvm::MDNode **v230;
  _BOOL4 v232;
  llvm::ValueAsMetadata **v233;
  uint64_t *v234;
  char *v235;
  char *v236;
  llvm::Value *v237;
  llvm::PointerType *v238;
  uint64_t v239;
  llvm::UndefValue **__p;
  uint64_t *v241;
  uint64_t v242;
  char *v243;
  llvm::UndefValue *v244;
  llvm::UndefValue *v245;
  llvm::DeadArgumentEliminationPass *v246;
  uint64_t v247;
  char *v248;
  int v249;
  llvm::ValueAsMetadata *v250;
  llvm::ValueAsMetadata *v251;
  llvm::Function *v252;
  unsigned __int8 *v253;
  _QWORD v254[4];
  __int16 v255;
  unsigned int v256;
  unsigned int v257;
  void *v258;
  void *v259;
  uint64_t v260;
  _QWORD *v261;
  __int16 v262;
  void *v263;
  uint64_t v264;
  _BYTE v265[48];
  const char *v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  __int16 v270;
  const char *v271;
  void *v272;
  uint64_t v273;
  _BYTE v274[64];
  void *v275[2];
  _BYTE v276[24];
  _BYTE *v277;
  __int128 v278;
  _BYTE v279[16];
  _QWORD *v280;
  uint64_t v281;
  _QWORD v282[10];

  v282[8] = *MEMORY[0x1E0C80C00];
  for (i = (_QWORD *)*((_QWORD *)this + 7); i; i = (_QWORD *)*i)
  {
    v5 = i[4];
    if (v5 <= (unint64_t)a2)
    {
      if (v5 >= (unint64_t)a2)
        return 0;
      ++i;
    }
  }
  v6 = *((_QWORD *)a2 + 3);
  v280 = v282;
  v281 = 0x800000000;
  v250 = (llvm::ValueAsMetadata *)*((_QWORD *)a2 + 14);
  v239 = v6;
  v7 = (*(_DWORD *)(v6 + 12) - 1);
  v277 = v279;
  v278 = xmmword_1C85FA040;
  sub_1C49B9F28(&v277, v7, 0);
  if ((*((_WORD *)a2 + 9) & 1) == 0)
  {
    v8 = (_QWORD *)*((_QWORD *)a2 + 11);
    v233 = (llvm::ValueAsMetadata **)((char *)a2 + 88);
LABEL_9:
    v9 = v8;
    goto LABEL_12;
  }
  llvm::Function::BuildLazyArguments(a2);
  v8 = (_QWORD *)*((_QWORD *)a2 + 11);
  v233 = (llvm::ValueAsMetadata **)((char *)a2 + 88);
  if ((*((_WORD *)a2 + 9) & 1) == 0)
    goto LABEL_9;
  llvm::Function::BuildLazyArguments(a2);
  v9 = (_QWORD *)*((_QWORD *)a2 + 11);
LABEL_12:
  v252 = a2;
  v11 = &v9[5 * *((_QWORD *)a2 + 12)];
  v246 = this;
  if (v8 == v11)
  {
    v16 = 0;
    v21 = 0;
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = (uint64_t **)((char *)this + 24);
    v248 = (char *)v250 + 40;
    do
    {
      v18 = v16;
      v19 = v13;
      v258 = v252;
      v259 = (void *)(v13 | 0x100000000);
      if (sub_1C56C929C(v17, (unint64_t *)&v258))
      {
        v20 = *v8;
        if (v15 >= v14)
        {
          v22 = (v15 - v18) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
LABEL_372:
            abort();
          v24 = v18;
          if ((v14 - v18) >> 2 > v23)
            v23 = (v14 - v18) >> 2;
          if ((unint64_t)(v14 - v18) >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            if (v25 >> 61)
LABEL_373:
              sub_1C4764EE4();
            v26 = (char *)operator new(8 * v25);
            v24 = v18;
          }
          else
          {
            v26 = 0;
          }
          v18 = &v26[8 * v22];
          *(_QWORD *)v18 = v20;
          v21 = v18 + 8;
          if (v15 != v24)
          {
            do
            {
              v27 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v18 - 1) = v27;
              v18 -= 8;
            }
            while (v15 != v24);
            v15 = v24;
          }
          v14 = &v26[8 * v25];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v15 = v20;
          v21 = v15 + 8;
        }
        v277[v19] = 1;
        v28 = v19 + 2;
        if (v250 && v28 < *((_DWORD *)v250 + 2))
          v29 = *(_QWORD *)&v248[8 * v28];
        else
          v29 = 0;
        v16 = v18;
        v30 = v281;
        if (v281 >= (unint64_t)HIDWORD(v281))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v280, (uint64_t)v282, v281 + 1, 8);
          v16 = v18;
          v30 = v281;
        }
        v280[v30] = v29;
        LODWORD(v281) = v281 + 1;
        LOBYTE(v30) = (_BYTE)v250;
        if (v250)
        {
          if (v28 < *((_DWORD *)v250 + 2))
          {
            v30 = *(_QWORD *)&v248[8 * v28];
            if (v30)
              LODWORD(v30) = (*(unsigned __int8 *)(v30 + 17) >> 6) & 1;
          }
          else
          {
            LOBYTE(v30) = 0;
          }
        }
        v12 |= v30;
        v15 = v21;
      }
      else
      {
        v21 = v15;
        v16 = v18;
      }
      v13 = v19 + 1;
      v8 += 5;
    }
    while (v8 != v11);
  }
  v244 = **(llvm::UndefValue ***)(v239 + 16);
  v31 = (const char ***)v252;
  v32 = **(_QWORD **)(*((_QWORD *)v252 + 3) + 16);
  v33 = *(unsigned __int8 *)(v32 + 8);
  v234 = (uint64_t *)v16;
  switch(v33)
  {
    case 7:
      v34 = 0;
      break;
    case 17:
      v34 = *(_DWORD *)(v32 + 32);
      break;
    case 16:
      v34 = *(_DWORD *)(v32 + 12);
      break;
    default:
      v34 = 1;
      break;
  }
  v35 = (void *)v34;
  v275[0] = v276;
  v275[1] = (void *)0x500000000;
  sub_1C4893E04((char *)v275, v34, -1);
  v249 = (int)v35;
  if ((*((_BYTE *)v244 + 8) == 7) | v12 & 1)
  {
    v36 = 0;
    __p = 0;
    v245 = v244;
    goto LABEL_108;
  }
  v37 = v35;
  if ((_DWORD)v35)
  {
    v38 = 0;
    __p = 0;
    v36 = 0;
    v39 = 0;
    while (1)
    {
      v258 = v31;
      v259 = v38;
      if (sub_1C56C929C((uint64_t **)v246 + 3, (unint64_t *)&v258))
        break;
LABEL_92:
      v38 = (char *)v38 + 1;
      if (v38 == v37)
        goto LABEL_95;
    }
    v40 = *(_QWORD *)v31[3][2];
    v41 = *(unsigned __int8 *)(v40 + 8);
    if (v40)
      v42 = v41 == 16;
    else
      v42 = 0;
    v43 = (llvm::UndefValue **)v36;
    if (v42)
    {
      v46 = (uint64_t *)(*(_QWORD *)(v40 + 16) + 8 * (_QWORD)v38);
      v45 = __p;
    }
    else
    {
      if (v40)
        v44 = v41 == 17;
      else
        v44 = 0;
      v45 = __p;
      if (!v44)
        goto LABEL_72;
      v46 = (uint64_t *)(v40 + 24);
    }
    v40 = *v46;
LABEL_72:
    if (v36 >= v39)
    {
      v47 = (v36 - (char *)v45) >> 3;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        goto LABEL_372;
      if ((v39 - (char *)v45) >> 2 > v48)
        v48 = (v39 - (char *)v45) >> 2;
      if ((unint64_t)(v39 - (char *)v45) >= 0x7FFFFFFFFFFFFFF8)
        v49 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v49 = v48;
      if (v49)
      {
        if (v49 >> 61)
          goto LABEL_373;
        v50 = (char *)operator new(8 * v49);
        v43 = (llvm::UndefValue **)v36;
      }
      else
      {
        v50 = 0;
      }
      v45 = (llvm::UndefValue **)&v50[8 * v47];
      *v45 = (llvm::UndefValue *)v40;
      v36 = (char *)(v45 + 1);
      if (v43 == __p)
      {
        v31 = (const char ***)v252;
      }
      else
      {
        v31 = (const char ***)v252;
        do
        {
          v51 = *--v43;
          *--v45 = v51;
        }
        while (v43 != __p);
      }
      v39 = &v50[8 * v49];
      if (__p)
        operator delete(__p);
    }
    else
    {
      *(_QWORD *)v36 = v40;
      v36 += 8;
      v31 = (const char ***)v252;
    }
    __p = v45;
    *((_DWORD *)v275[0] + (_QWORD)v38) = ((unint64_t)(v36 - (char *)v45) >> 3) - 1;
    v37 = v35;
    goto LABEL_92;
  }
  v36 = 0;
  __p = 0;
LABEL_95:
  if ((unint64_t)(v36 - (char *)__p) <= 8)
  {
    if (v36 - (char *)__p == 8)
    {
      v245 = *__p;
    }
    else if (__p == (llvm::UndefValue **)v36)
    {
      v245 = (llvm::UndefValue *)(*(_QWORD *)**v31 + 1576);
      __p = (llvm::UndefValue **)v36;
    }
    else
    {
      v245 = 0;
    }
  }
  else
  {
    if (*((_DWORD *)v244 + 2) != 16 || v244 == 0)
      llvm::ArrayType::get(*__p, (llvm::Type *)((v36 - (char *)__p) >> 3));
    else
      v53 = llvm::StructType::get(*(uint64_t **)v244, (uint64_t)__p, (v36 - (char *)__p) >> 3, (*((_DWORD *)v244 + 2) >> 9) & 1);
    v245 = (llvm::UndefValue *)v53;
  }
LABEL_108:
  v236 = v36;
  if (v250 && *((_DWORD *)v250 + 2) > 1u)
  {
    v195 = *((_QWORD *)v250 + 6);
    v271 = **v31;
    v272 = v274;
    v273 = 0x800000000;
    if (v195)
    {
      v54 = (char *)(v195 + 48);
      v55 = (char *)(v195 + 48 + 8 * *(unsigned int *)(v195 + 8));
    }
    else
    {
      v54 = 0;
      v55 = 0;
    }
  }
  else
  {
    v54 = 0;
    v55 = 0;
    v271 = **v31;
    v272 = v274;
    v273 = 0x800000000;
  }
  sub_1C53321EC((unsigned int *)&v272, (uint64_t)v274, v54, v55);
  if (*((_BYTE *)v245 + 8) == 7)
  {
    llvm::AttributeFuncs::typeIncompatible((uint64_t)v245, 3, (uint64_t *)&v258);
    llvm::AttrBuilder::remove((uint64_t)&v271, (uint64_t)&v258);
    sub_1C5010E9C((uint64_t)&v260, v261);
  }
  Sorted = llvm::AttributeSetNode::getSorted((uint64_t *)**v31, (uint64_t *)v272, v273);
  if (v250 && *((_DWORD *)v250 + 2))
    v57 = (void *)*((_QWORD *)v250 + 5);
  else
    v57 = 0;
  v258 = v57;
  v58 = llvm::AttributeSet::removeAttribute((uint64_t *)&v258, (uint64_t *)**v31, 75);
  v59 = llvm::AttributeList::get((uint64_t *)**v31, v58, Sorted, v280, v281);
  v60 = llvm::FunctionType::get((uint64_t **)v245, v234, (v21 - (char *)v234) >> 3, *(_DWORD *)(v239 + 8) > 0xFFu);
  v10 = v60 != v239;
  if (v60 == v239)
    goto LABEL_358;
  v61 = (llvm::PointerType *)v60;
  v232 = v60 != v239;
  v62 = (_DWORD)v31[4] & 0xF;
  v63 = (llvm::Type *)(*((_DWORD *)*v31 + 2) >> 8);
  v262 = 257;
  v64 = (char *)operator new(0x80uLL);
  v65 = (llvm::Value *)(v64 + 8);
  *((_DWORD *)v64 + 7) = *((_DWORD *)v64 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v64 = 0;
  v238 = v61;
  v66 = llvm::Function::Function((uint64_t *)v64 + 1, v61, v62, v63, (uint64_t)&v258, 0);
  llvm::Function::copyAttributesFrom((llvm::Function *)v66, (const llvm::Function *)v31);
  llvm::GlobalObject::setComdat((llvm::GlobalObject *)(v64 + 8), (llvm::Comdat *)v31[6]);
  *((_QWORD *)v64 + 15) = v59;
  v67 = v31[5];
  *((_QWORD *)v64 + 6) = v67;
  if ((v64[31] & 0x10) != 0)
  {
    v68 = (llvm::ValueSymbolTable *)v67[14];
    if (v68)
      llvm::ValueSymbolTable::reinsertValue(v68, v65);
  }
  v69 = v31[7];
  *((_QWORD *)v64 + 8) = v69;
  *((_QWORD *)v64 + 9) = v31 + 7;
  v69[1] = v64 + 64;
  v31[7] = (const char **)(v64 + 64);
  llvm::Value::takeName(v65, (llvm::Value *)v31);
  v70 = v31[1];
  v237 = (llvm::Value *)(v64 + 8);
  v235 = v64;
  v71 = 0;
  if (v70)
  {
    v243 = 0;
    v241 = (uint64_t *)(v64 + 16);
    do
    {
      v72 = (char *)v70[3];
      LODWORD(v281) = 0;
      v73 = *((_QWORD *)v72 + 8);
      if (v73 && *(_DWORD *)(v73 + 8) > 1u)
      {
        v158 = *(_QWORD *)(v73 + 48);
        v266 = **v31;
        v267 = &v269;
        v268 = 0x800000000;
        if (v158)
        {
          v74 = (char *)(v158 + 48);
          v75 = (char *)(v158 + 48 + 8 * *(unsigned int *)(v158 + 8));
        }
        else
        {
          v74 = 0;
          v75 = 0;
        }
      }
      else
      {
        v74 = 0;
        v75 = 0;
        v266 = **v31;
        v267 = &v269;
        v268 = 0x800000000;
      }
      sub_1C53321EC((unsigned int *)&v267, (uint64_t)&v269, v74, v75);
      llvm::AttributeFuncs::typeIncompatible((uint64_t)v245, 3, (uint64_t *)&v258);
      llvm::AttrBuilder::remove((uint64_t)&v266, (uint64_t)&v258);
      sub_1C5010E9C((uint64_t)&v260, v261);
      v242 = llvm::AttributeSetNode::getSorted((uint64_t *)**v31, (uint64_t *)v267, v268);
      v251 = (llvm::ValueAsMetadata *)v72;
      v76 = &v72[-32 * (*((_DWORD *)v72 + 5) & 0x7FFFFFF)];
      v77 = *(_DWORD *)(v239 + 12);
      v78 = (v77 - 1);
      if (v77 != 1)
      {
        v79 = 0;
        v80 = v71;
        v81 = v243;
        while (!v277[v79])
        {
          v83 = v80;
LABEL_154:
          v76 += 32;
          ++v79;
          v80 = v83;
          if (v79 == v78)
            goto LABEL_165;
        }
        v82 = *(_QWORD *)v76;
        if (v80 >= v81)
        {
          v84 = (v80 - v71) >> 3;
          v85 = v84 + 1;
          if ((unint64_t)(v84 + 1) >> 61)
            goto LABEL_372;
          v86 = v81 - v71;
          v87 = (v81 - v71) >> 2;
          if (v87 > v85)
            v85 = v87;
          if (v86 >= 0x7FFFFFFFFFFFFFF8)
            v88 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v88 = v85;
          if (v88)
          {
            if (v88 >> 61)
              goto LABEL_373;
            v89 = (char *)operator new(8 * v88);
          }
          else
          {
            v89 = 0;
          }
          v90 = &v89[8 * v84];
          *(_QWORD *)v90 = v82;
          v83 = v90 + 8;
          while (v80 != v71)
          {
            v91 = *((_QWORD *)v80 - 1);
            v80 -= 8;
            *((_QWORD *)v90 - 1) = v91;
            v90 -= 8;
          }
          v81 = &v89[8 * v88];
          if (v71)
          {
            v92 = &v89[8 * v88];
            operator delete(v71);
            v81 = v92;
          }
          v71 = v90;
          if (!v73)
            goto LABEL_150;
        }
        else
        {
          *(_QWORD *)v80 = v82;
          v83 = v80 + 8;
          if (!v73)
            goto LABEL_150;
        }
        if ((v79 + 2) < *(_DWORD *)(v73 + 8))
        {
          v93 = *(_QWORD *)(v73 + 40 + 8 * (v79 + 2));
          if (v245 != v244 && v93 && (*(_BYTE *)(v93 + 17) & 0x40) != 0)
          {
            v95 = v81;
            v258 = **(void ***)v252;
            v96 = (uint64_t *)v258;
            v259 = &v261;
            v260 = 0x800000000;
            sub_1C53321EC((unsigned int *)&v259, (uint64_t)&v261, (char *)(v93 + 48), (char *)(v93 + 48 + 8 * *(unsigned int *)(v93 + 8)));
            llvm::AttrBuilder::removeAttribute((uint64_t)&v258, 46);
            v97 = llvm::AttributeSetNode::getSorted(v96, (uint64_t *)v259, v260);
            v98 = v281;
            if (v281 >= (unint64_t)HIDWORD(v281))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v280, (uint64_t)v282, v281 + 1, 8);
              v98 = v281;
            }
            v280[v98] = v97;
            LODWORD(v281) = v281 + 1;
            if (v259 != &v261)
              free(v259);
            v81 = v95;
            goto LABEL_154;
          }
          goto LABEL_151;
        }
LABEL_150:
        v93 = 0;
LABEL_151:
        v94 = v281;
        if (v281 >= (unint64_t)HIDWORD(v281))
        {
          v99 = v81;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v280, (uint64_t)v282, v281 + 1, 8);
          v81 = v99;
          v94 = v281;
        }
        v280[v94] = v93;
        LODWORD(v281) = v281 + 1;
        goto LABEL_154;
      }
      v83 = v71;
      v81 = v243;
LABEL_165:
      v100 = v251;
      v101 = *((unsigned __int8 *)v251 + 16);
      if (v101 == 84)
      {
        v102 = 0;
      }
      else if (v101 == 39)
      {
        v100 = v251;
        v102 = (*((_DWORD *)v251 + 20) + 1);
      }
      else
      {
        v102 = 2;
        v100 = v251;
      }
      v103 = *((_DWORD *)v100 + 5);
      if (v103 < 0)
      {
        v174 = v81;
        v175 = (char *)v100 - 32 * (v103 & 0x7FFFFFF);
        v176 = *((_QWORD *)v175 - 1);
        if ((v176 & 0xFFFFFFFF0) != 0)
          v104 = (*((_DWORD *)v175 - 3) - *(_DWORD *)&v175[-v176]);
        else
          v104 = 0;
        v81 = v174;
        v100 = v251;
      }
      else
      {
        v104 = 0;
      }
      for (j = (uint64_t)v100 + -32 * v104 + -32 * v102 - 32; v76 != (char *)j; LODWORD(v78) = v78 + 1)
      {
        v106 = *(_QWORD *)v76;
        if (v83 >= v81)
        {
          v107 = (v83 - v71) >> 3;
          v108 = v107 + 1;
          if ((unint64_t)(v107 + 1) >> 61)
            goto LABEL_372;
          v109 = v81 - v71;
          v110 = (v81 - v71) >> 2;
          if (v110 > v108)
            v108 = v110;
          if (v109 >= 0x7FFFFFFFFFFFFFF8)
            v111 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v111 = v108;
          if (v111)
          {
            if (v111 >> 61)
              goto LABEL_373;
            v112 = (char *)operator new(8 * v111);
          }
          else
          {
            v112 = 0;
          }
          v113 = &v112[8 * v107];
          *(_QWORD *)v113 = v106;
          v114 = v113 + 8;
          while (v83 != v71)
          {
            v115 = *((_QWORD *)v83 - 1);
            v83 -= 8;
            *((_QWORD *)v113 - 1) = v115;
            v113 -= 8;
          }
          v81 = &v112[8 * v111];
          if (v71)
          {
            v116 = &v112[8 * v111];
            operator delete(v71);
            v81 = v116;
          }
          v71 = v113;
          v83 = v114;
          if (!v73)
            goto LABEL_190;
        }
        else
        {
          *(_QWORD *)v83 = v106;
          v83 += 8;
          if (!v73)
            goto LABEL_190;
        }
        if ((v78 + 2) < *(_DWORD *)(v73 + 8))
        {
          v117 = *(_QWORD *)(v73 + 40 + 8 * (v78 + 2));
          goto LABEL_191;
        }
LABEL_190:
        v117 = 0;
LABEL_191:
        v118 = v281;
        if (v281 >= (unint64_t)HIDWORD(v281))
        {
          v119 = v81;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v280, (uint64_t)v282, v281 + 1, 8);
          v81 = v119;
          v118 = v281;
        }
        v280[v118] = v117;
        LODWORD(v281) = v281 + 1;
        v76 += 32;
      }
      v243 = v81;
      if (v73)
      {
        v120 = (uint64_t ***)v252;
        if (*(_DWORD *)(v73 + 8))
          v121 = *(void **)(v73 + 40);
        else
          v121 = 0;
      }
      else
      {
        v121 = 0;
        v120 = (uint64_t ***)v252;
      }
      v258 = v121;
      v122 = llvm::AttributeSet::removeAttribute((uint64_t *)&v258, **v120, 75);
      v123 = llvm::AttributeList::get(**v120, v122, v242, v280, v281);
      v263 = v265;
      v264 = 0x100000000;
      v124 = *((_DWORD *)v251 + 5);
      if (v124 < 0)
      {
        v177 = *((_QWORD *)v251 - 4 * (v124 & 0x7FFFFFF) - 1);
        if ((v177 & 0xFFFFFFFF0) != 0)
        {
          v178 = (v177 >> 4);
          v179 = v251;
          do
          {
            v180 = *((_DWORD *)v251 + 5) & 0x7FFFFFF;
            v181 = (char *)v251 - 32 * v180;
            v182 = (unsigned int *)((char *)v179 - *((_QWORD *)v181 - 1) + -32 * v180);
            v183 = *v182;
            v184 = v182[1];
            v185 = *((_QWORD *)v182 - 1);
            v258 = &v181[32 * v183];
            v259 = (void *)(v184 - v183);
            v260 = v185;
            sub_1C623D924((uint64_t)&v263, (uint64_t)&v258);
            v179 = (llvm::ValueAsMetadata *)((char *)v179 + 16);
            --v178;
          }
          while (v178);
        }
      }
      if (*((_BYTE *)v251 + 16) == 33)
      {
        v141 = (uint64_t)v251;
        v159 = *((_QWORD *)v235 + 4);
        v160 = *((_QWORD *)v251 - 12);
        v161 = *((_QWORD *)v251 - 8);
        v262 = 257;
        v65 = v237;
        v134 = sub_1C62920D8(v159, (uint64_t)v237, v160, v161, (uint64_t *)v71, (v83 - v71) >> 3, (uint64_t)v263, v264, (uint64_t)&v258, *((llvm::BasicBlock **)v251 + 5));
        v142 = *((_WORD *)v134 + 9);
      }
      else
      {
        v125 = (char *)v263;
        v126 = v264;
        v262 = 257;
        v247 = v123;
        v127 = 0;
        if ((_DWORD)v264)
        {
          v186 = 48 * v264;
          v187 = (char *)v263 + 32;
          do
          {
            v127 += (*v187 - *(v187 - 1)) >> 3;
            v187 += 6;
            v186 -= 48;
          }
          while (v186);
        }
        v128 = (unint64_t)(v83 - v71) >> 3;
        v129 = (v127 + v128 + 1);
        v130 = (16 * v264);
        if ((_DWORD)v130)
          v131 = (16 * (_DWORD)v264) | 8u;
        else
          v131 = 0;
        v132 = (char *)operator new(v131 + 32 * v129 + 80);
        v133 = &v132[v131];
        v134 = &v132[32 * v129 + v131];
        *((_DWORD *)v134 + 5) = v129 & 0x7FFFFFF | (((_DWORD)v130 != 0) << 31) | *((_DWORD *)v134 + 5) & 0x38000000;
        if ((_DWORD)v129)
        {
          do
          {
            *(_QWORD *)v133 = 0;
            *((_QWORD *)v133 + 1) = 0;
            *((_QWORD *)v133 + 2) = 0;
            *((_QWORD *)v133 + 3) = v134;
            v133 += 32;
          }
          while (v133 != v134);
        }
        if ((_DWORD)v130)
          *(_QWORD *)&v132[v130] = v130;
        v135 = 0;
        if ((_DWORD)v126)
        {
          v188 = 48 * v126;
          v189 = v125 + 32;
          do
          {
            v135 += (*v189 - *(v189 - 1)) >> 3;
            v189 += 6;
            v188 -= 48;
          }
          while (v188);
        }
        *(_QWORD *)v134 = **((_QWORD **)v238 + 2);
        *((_QWORD *)v134 + 1) = 0;
        v136 = *((_DWORD *)v134 + 5) & 0xC0000000 | (v135 + v128 + 1) & 0x7FFFFFF;
        *((_DWORD *)v134 + 4) = 84;
        *((_DWORD *)v134 + 5) = v136;
        *(_OWORD *)(v134 + 24) = 0u;
        v137 = v134 + 24;
        *(_OWORD *)(v134 + 40) = 0u;
        *((_DWORD *)v134 + 14) = 0;
        v138 = *((_QWORD *)v251 + 5);
        *((_QWORD *)v134 + 5) = v138;
        *(_WORD *)(v138 + 18) &= ~0x8000u;
        if ((v134[23] & 0x10) != 0)
        {
          v162 = *(_QWORD *)(v138 + 56);
          if (v162)
          {
            v163 = *(llvm::ValueSymbolTable **)(v162 + 104);
            if (v163)
              llvm::ValueSymbolTable::reinsertValue(v163, (llvm::Value *)v134);
          }
        }
        v139 = *((_QWORD *)v251 + 3);
        *((_QWORD *)v134 + 3) = v139;
        *((_QWORD *)v134 + 4) = (char *)v251 + 24;
        *(_QWORD *)(v139 + 8) = v137;
        *((_QWORD *)v251 + 3) = v137;
        *((_QWORD *)v134 + 8) = 0;
        *((_QWORD *)v134 + 9) = v238;
        sub_1C5382FD4((uint64_t)v254, (uint64_t *)v71, (uint64_t *)&v71[8 * ((v83 - v71) >> 3)], (uint64_t)&v134[-32 * (*((_DWORD *)v134 + 5) & 0x7FFFFFF)]);
        v65 = v237;
        if (*((_QWORD *)v134 - 4))
        {
          **((_QWORD **)v134 - 2) = *((_QWORD *)v134 - 3);
          v190 = *((_QWORD *)v134 - 3);
          if (v190)
            *(_QWORD *)(v190 + 16) = *((_QWORD *)v134 - 2);
        }
        v140 = *v241;
        *((_QWORD *)v134 - 3) = *v241;
        *((_QWORD *)v134 - 4) = v237;
        if (v140)
          *(_QWORD *)(v140 + 16) = v134 - 24;
        *((_QWORD *)v134 - 2) = v241;
        *v241 = (uint64_t)(v134 - 32);
        llvm::CallBase::populateBundleOperandInfos((uint64_t)v134, (uint64_t)v125, v126, v128);
        llvm::Value::setName((uint64_t ***)v134, (uint64_t)&v258);
        v141 = (uint64_t)v251;
        v142 = *((_WORD *)v134 + 9) & 0xFFFC | *((_WORD *)v251 + 9) & 3;
        *((_WORD *)v134 + 9) = v142;
        v123 = v247;
      }
      *((_WORD *)v134 + 9) = *(_WORD *)(v141 + 18) & 0xFFC | v142 & 0xF003;
      *((_QWORD *)v134 + 8) = v123;
      v258 = (void *)2;
      llvm::Instruction::copyMetadata((uint64_t)v134, v141, (int *)&v258, 2);
      LODWORD(v281) = 0;
      if (*(_QWORD *)(v141 + 8) || (*(_BYTE *)(v141 + 23) & 8) != 0)
      {
        v145 = *(llvm::UndefValue **)v141;
        if (*(_QWORD *)v134 == *(_QWORD *)v141)
        {
          v147 = (llvm::ValueAsMetadata *)v141;
          v148 = (llvm::Value *)v134;
        }
        else
        {
          if (*(_BYTE *)(*(_QWORD *)v134 + 8) == 7)
          {
            if (*((_BYTE *)v145 + 8) != 10)
            {
              v146 = llvm::UndefValue::get(v145, v143);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v141, v146, (llvm::Value *)1);
            }
            goto LABEL_235;
          }
          if (*(_BYTE *)(v141 + 16) == 33)
          {
            v164 = (llvm *)*((_QWORD *)v134 + 5);
            v165 = (llvm::BasicBlock *)*((_QWORD *)v251 - 12);
            v262 = 257;
            v166 = llvm::SplitEdge(v164, v165, 0, 0, 0, (llvm::MemorySSAUpdater *)&v258, v144);
            v167 = v166 + 40;
            for (k = *(_QWORD *)(v166 + 48); k != v167; k = *(_QWORD *)(k + 8))
            {
              v169 = k - 24;
              if (!k)
                v169 = 0;
              if (*(_BYTE *)(v169 + 16) != 83)
              {
                v170 = *(unsigned __int8 *)(k - 8) - 38;
                v171 = v170 > 0x38;
                v172 = (1 << v170) & 0x100060000000001;
                if (v171 || v172 == 0)
                  v167 = k;
                else
                  v167 = *(_QWORD *)(k + 8);
                break;
              }
            }
            if (v167)
              v141 = v167 - 24;
            else
              v141 = 0;
          }
          v149 = (uint64_t)llvm::UndefValue::get(v244, v143);
          v257 = 0;
          if (v249)
          {
            for (m = 0; m != v249; v257 = m)
            {
              if (*((_DWORD *)v275[0] + m) != -1)
              {
                sub_1C5673D1C((uint64_t)&v258, v141, 0, 0, 0);
                v151 = (uint64_t)v134;
                if ((unint64_t)(v236 - (char *)__p) >= 9)
                {
                  v256 = *((_DWORD *)v275[0] + v257);
                  v254[0] = "newret";
                  v255 = 259;
                  v151 = sub_1C506DBC4((uint64_t)&v258, (uint64_t *)v134, &v256, 1, (uint64_t)v254);
                }
                v254[0] = "oldret";
                v255 = 259;
                v149 = sub_1C506D788((uint64_t)&v258, v149, v151, &v257, 1, (uint64_t)v254);
                if (v258 != &v260)
                  free(v258);
                m = v257;
              }
              ++m;
            }
          }
          v141 = (uint64_t)v251;
          v147 = v251;
          v148 = (llvm::Value *)v149;
        }
        llvm::Value::doRAUW(v147, v148, (llvm::Value *)1);
        llvm::Value::takeName((llvm::Value *)v134, (llvm::Value *)v141);
      }
LABEL_235:
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v141 + 40) + 40, (uint64_t ***)v141);
      v152 = *(_QWORD *)(v141 + 24);
      v153 = *(_QWORD **)(v141 + 32);
      *v153 = v152;
      *(_QWORD *)(v152 + 8) = v153;
      *(_QWORD *)(v141 + 24) = 0;
      *(_QWORD *)(v141 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v141);
      v154 = (char *)v263;
      if ((_DWORD)v264)
      {
        v155 = 48 * v264;
        v31 = (const char ***)v252;
        do
        {
          v156 = &v154[v155];
          v157 = *(void **)&v154[v155 - 24];
          if (v157)
          {
            *((_QWORD *)v156 - 2) = v157;
            operator delete(v157);
          }
          if (*(v156 - 25) < 0)
            operator delete(*((void **)v156 - 6));
          v155 -= 48;
        }
        while (v155);
        v154 = (char *)v263;
      }
      else
      {
        v31 = (const char ***)v252;
      }
      if (v154 != v265)
        free(v154);
      if (v267 != &v269)
        free(v267);
      v70 = v31[1];
    }
    while (v70);
  }
  v191 = v235 + 80;
  sub_1C566A128((uint64_t)(v235 + 80), *((uint64_t **)v235 + 11), (uint64_t *)v31 + 9);
  if ((*((_WORD *)v31 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v31);
    v193 = (llvm::ValueAsMetadata *)v31[11];
    if ((*((_WORD *)v31 + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v31);
      v194 = (llvm::ValueAsMetadata *)v31[11];
      goto LABEL_299;
    }
  }
  else
  {
    v193 = *v233;
  }
  v194 = v193;
LABEL_299:
  v196 = v236;
  v197 = (llvm::ValueAsMetadata *)((char *)v194 + 40 * (_QWORD)v31[12]);
  if ((*((_WORD *)v235 + 13) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(v65);
    v196 = v236;
  }
  if (v193 != v197)
  {
    v198 = 0;
    v199 = (llvm::Value *)*((_QWORD *)v235 + 12);
    do
    {
      if (v277[v198])
      {
        llvm::Value::doRAUW(v193, v199, (llvm::Value *)1);
        llvm::Value::takeName(v199, v193);
        v196 = v236;
        v199 = (llvm::Value *)((char *)v199 + 40);
      }
      else if (*(_BYTE *)(*(_QWORD *)v193 + 8) != 10)
      {
        v200 = llvm::UndefValue::get(*(llvm::UndefValue **)v193, v192);
        llvm::Value::doRAUW(v193, v200, (llvm::Value *)1);
        v196 = v236;
      }
      v193 = (llvm::ValueAsMetadata *)((char *)v193 + 40);
      ++v198;
    }
    while (v193 != v197);
  }
  if (*(_QWORD *)v31[3][2] != **(_QWORD **)(*((_QWORD *)v235 + 4) + 16))
  {
    v201 = *((_QWORD *)v235 + 11);
    if ((char *)v201 != v191)
    {
      v202 = v196 - (char *)__p;
      do
      {
        if (v201)
          v203 = v201 - 24;
        else
          v203 = 0;
        v206 = *(_QWORD *)(v203 + 40);
        v205 = v203 + 40;
        v204 = v206;
        if (v206 != v205)
        {
          v207 = v204 ? v204 - 24 : 0;
          v208 = *(unsigned __int8 *)(v207 + 16) - 40;
          v209 = v208 >= 0xFFFFFFF5 ? v207 : 0;
          if (v204)
          {
            if (*(_BYTE *)(v209 + 16) == 29 && v208 >= 0xFFFFFFF5)
            {
              sub_1C5673D1C((uint64_t)&v258, v209, 0, 0, 0);
              v212 = 0;
              if (*(_BYTE *)(**((_QWORD **)v238 + 2) + 8) != 7)
              {
                v213 = *(uint64_t **)(v209 - 32 * (*(_DWORD *)(v209 + 20) & 0x7FFFFFF));
                v212 = llvm::UndefValue::get(v245, v211);
                LODWORD(v263) = 0;
                if (v249)
                {
                  for (n = 0; n != v249; LODWORD(v263) = n)
                  {
                    if (*((_DWORD *)v275[0] + n) != -1)
                    {
                      v266 = "oldret";
                      v270 = 259;
                      v215 = sub_1C506DBC4((uint64_t)&v258, v213, (unsigned int *)&v263, 1, (uint64_t)&v266);
                      n = v263;
                      if (v202 < 9)
                      {
                        v212 = (llvm::Value *)v215;
                      }
                      else
                      {
                        LODWORD(v254[0]) = *((_DWORD *)v275[0] + v263);
                        v266 = "newret";
                        v270 = 259;
                        v212 = (llvm::Value *)sub_1C506D788((uint64_t)&v258, (uint64_t)v212, v215, v254, 1, (uint64_t)&v266);
                        n = v263;
                      }
                    }
                    ++n;
                  }
                }
                v31 = (const char ***)v252;
              }
              v216 = v191;
              v217 = (llvm::LLVMContext *)**v31;
              v218 = v212 != 0;
              if (v212)
                v219 = 96;
              else
                v219 = 64;
              v220 = operator new(v219);
              v221 = &v220[4 * v218];
              *((_DWORD *)v221 + 5) = *((_DWORD *)v221 + 5) & 0x38000000 | v218;
              if (v212)
              {
                do
                {
                  *v220 = 0;
                  v220[1] = 0;
                  v220[2] = 0;
                  v220[3] = v221;
                  v220 += 4;
                }
                while (v220 != v221);
              }
              llvm::ReturnInst::ReturnInst((llvm::ReturnInst *)v221, v217, v212, (llvm::Instruction *)v209);
              v222 = *(unsigned __int8 **)(v209 + 48);
              v253 = v222;
              if (v222)
                llvm::MetadataTracking::track((uint64_t)&v253, v222, 2);
              v225 = (unsigned __int8 *)v221[6];
              v224 = (unsigned __int8 **)(v221 + 6);
              v223 = v225;
              v191 = v216;
              if (v225)
                llvm::MetadataTracking::untrack((uint64_t)v224, v223);
              v226 = v253;
              *v224 = v253;
              if (v226)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v253, v226, (uint64_t)v224);
                v253 = 0;
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v205, (uint64_t ***)v209);
              v227 = *(_QWORD *)(v209 + 24);
              v228 = *(_QWORD **)(v209 + 32);
              *v228 = v227;
              *(_QWORD *)(v227 + 8) = v228;
              *(_QWORD *)(v209 + 24) = 0;
              *(_QWORD *)(v209 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v209);
              if (v258 != &v260)
                free(v258);
              v31 = (const char ***)v252;
            }
          }
        }
        v201 = *(_QWORD *)(v201 + 8);
      }
      while ((char *)v201 != v191);
    }
  }
  v258 = &v260;
  v259 = (void *)0x100000000;
  llvm::Value::getAllMetadata(v31, (uint64_t)&v258);
  if ((_DWORD)v259)
  {
    v229 = (llvm::MDNode **)v258;
    v230 = (llvm::MDNode **)((char *)v258 + 16 * v259);
    do
    {
      llvm::Value::addMetadata(v237, *(_DWORD *)v229, v229[1]);
      v229 += 2;
    }
    while (v229 != v230);
  }
  llvm::Function::eraseFromParent((llvm::Function *)v31);
  v10 = v232;
  if (v258 != &v260)
    free(v258);
  if (v71)
    operator delete(v71);
LABEL_358:
  if (v272 != v274)
    free(v272);
  if (__p)
    operator delete(__p);
  if (v275[0] != v276)
    free(v275[0]);
  if (v277 != v279)
    free(v277);
  if (v280 != v282)
    free(v280);
  if (v234)
    operator delete(v234);
  return v10;
}

double llvm::DeadArgumentEliminationPass::run@<D0>(llvm::DeadArgumentEliminationPass *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::DeadArgumentEliminationPass *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  llvm::Function *v10;
  const llvm::Function *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Function *v14;
  uint64_t i;
  llvm::Function *v16;
  double result;
  uint64_t v18;

  v4 = this;
  v6 = a2 + 24;
  v7 = *(_QWORD *)(a2 + 32);
  if (v7 == a2 + 24)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8);
      if (v7)
        v10 = (llvm::Function *)(v7 - 56);
      else
        v10 = 0;
      if (*(_DWORD *)(*((_QWORD *)v10 + 3) + 8) >= 0x100u)
      {
        v18 = *(_QWORD *)(v7 + 8);
        this = (llvm::DeadArgumentEliminationPass *)llvm::DeadArgumentEliminationPass::DeleteDeadVarargs(this, v10);
        v9 = v18;
        v8 |= this;
      }
      v7 = v9;
    }
    while (v9 != v6);
    v7 = *(_QWORD *)(a2 + 32);
  }
  if (v7 != v6)
  {
    do
    {
      if (v7)
        v11 = (const llvm::Function *)(v7 - 56);
      else
        v11 = 0;
      llvm::DeadArgumentEliminationPass::SurveyFunction(v4, v11);
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
    v12 = *(_QWORD *)(a2 + 32);
    if (v12 != v6)
    {
      do
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v12)
          v14 = (llvm::Function *)(v12 - 56);
        else
          v14 = 0;
        v8 |= llvm::DeadArgumentEliminationPass::RemoveDeadStuffFromFunction(v4, v14);
        v12 = v13;
      }
      while (v13 != v6);
      for (i = *(_QWORD *)(a2 + 32); i != v6; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v16 = (llvm::Function *)(i - 56);
        else
          v16 = 0;
        v8 |= llvm::DeadArgumentEliminationPass::RemoveDeadArgumentsFromCallers(v4, v16);
      }
    }
  }
  if ((v8 & 1) != 0)
  {
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)&result = 2;
    *(_QWORD *)(a3 + 16) = 2;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_DWORD *)(a3 + 64) = 2;
  }
  else
  {
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = a3 + 80;
    *(_QWORD *)(a3 + 56) = a3 + 80;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  return result;
}

uint64_t sub_1C56C8FFC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56C5324(v0);
}

uint64_t sub_1C56C9024()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F32A4;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E8179808;
  return result;
}

void sub_1C56C9070(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C56C9094(llvm::ModulePass *a1, uint64_t **a2)
{
  _BOOL8 v4;
  char v5;
  char *v6;
  _BYTE *v7;
  char *v9;
  char *v10;
  _BYTE v11[40];
  void *v12;
  int v13;
  int v14;
  uint64_t v15[2];
  int v16;
  uint64_t v17[2];
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD **v22;
  _QWORD *v23[2];
  _QWORD **v24;
  _QWORD *v25[2];
  _QWORD **v26;
  _QWORD *v27[2];
  char v28;

  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  v5 = (*(uint64_t (**)(llvm::ModulePass *))(*(_QWORD *)a1 + 144))(a1);
  v22 = v23;
  v23[0] = 0;
  v25[0] = 0;
  v25[1] = 0;
  v23[1] = 0;
  v24 = v25;
  v27[0] = 0;
  v27[1] = 0;
  v26 = v27;
  v28 = v5;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  llvm::DeadArgumentEliminationPass::run((llvm::DeadArgumentEliminationPass *)&v22, (uint64_t)a2, (uint64_t)&v9);
  if (v13 == v14)
  {
    v6 = (char *)sub_1C477672C((uint64_t)&v9, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    if (v10 == v9)
      v7 = &v11[4];
    else
      v7 = v11;
    v4 = v6 == &v10[8 * *(unsigned int *)v7];
  }
  else
  {
    v4 = 1;
  }
  if (v12 != *(void **)&v11[32])
    free(v12);
  if (v10 != v9)
    free(v10);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v17);
  sub_1C4D8B52C(v15);
  sub_1C47655E8((uint64_t)&v26, v27[0]);
  sub_1C47655E8((uint64_t)&v24, v25[0]);
  sub_1C47655E8((uint64_t)&v22, v23[0]);
  return v4;
}

uint64_t sub_1C56C91FC()
{
  return 0;
}

void sub_1C56C9208(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56C922C()
{
  return 1;
}

uint64_t sub_1C56C9234(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  if (result)
  {
    v2 = result;
    v3 = *a2;
    v4 = *((_DWORD *)a2 + 2);
    result = 1;
    v5 = *((unsigned __int8 *)a2 + 12);
    while (1)
    {
      v6 = *(_QWORD *)(v2 + 32);
      if (v3 >= v6)
      {
        if (v6 < v3)
          goto LABEL_9;
        v7 = *(_DWORD *)(v2 + 40);
        if (v4 >= v7)
        {
          if (v7 < v4)
            goto LABEL_9;
          v8 = *(unsigned __int8 *)(v2 + 44);
          if (v5 >= v8)
            break;
        }
      }
LABEL_10:
      v2 = *(_QWORD *)v2;
      if (!v2)
        return 0;
    }
    if (v8 >= v5)
      return result;
LABEL_9:
    v2 += 8;
    goto LABEL_10;
  }
  return result;
}

uint64_t *sub_1C56C929C(uint64_t **a1, unint64_t *a2)
{
  uint64_t *result;
  uint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;

  v4 = (uint64_t *)(a1 + 1);
  result = a1[1];
  if (result)
  {
    v5 = *a2;
    v6 = *((_DWORD *)a2 + 2);
    v7 = result;
    v8 = v4;
    v9 = *((unsigned __int8 *)a2 + 12);
    do
    {
      v10 = v7[4];
      if (v10 >= v5
        && (v5 < v10 || (v11 = *((_DWORD *)v7 + 10), v11 >= v6) && (v6 < v11 || *((unsigned __int8 *)v7 + 44) >= v9)))
      {
        v8 = v7;
      }
      else
      {
        ++v7;
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
    if (v8 == v4)
      return 0;
    v12 = v8[4];
    if (v5 < v12)
      return 0;
    if (v12 >= v5 && ((v13 = *((_DWORD *)v8 + 10), v6 < v13) || v13 >= v6 && v9 < *((unsigned __int8 *)v8 + 44)))
    {
      return 0;
    }
    else
    {
      v14 = (uint64_t *)v8[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        v16 = v8;
        do
        {
          v15 = (uint64_t *)v16[2];
          v17 = *v15 == (_QWORD)v16;
          v16 = v15;
        }
        while (!v17);
      }
      if (*a1 == v8)
        *a1 = v15;
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_1C485B6E0(result, v8);
      operator delete(v8);
      return (uint64_t *)1;
    }
  }
  return result;
}

uint64_t sub_1C56C93C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  int32x2_t ****v7;
  const llvm::Constant *v8;
  int v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  int v13;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != a1 + 8)
  {
    v4 = 0;
    while (1)
    {
      v5 = v3 ? v3 - 56 : 0;
      v6 = *(_DWORD *)(v5 + 32);
      if ((v6 & 0xF) == 1)
        break;
LABEL_20:
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v2)
        goto LABEL_23;
    }
    if (v3 && *(_BYTE *)(v5 + 16) == 3)
    {
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 0)
      {
LABEL_16:
        llvm::Constant::removeDeadConstantUsers(v5);
        v9 = *(_DWORD *)(v5 + 32);
        *(_DWORD *)(v5 + 32) = v9 & 0xFFFFFFF0;
        if ((v9 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v5) & 1) == 0)
          *(_DWORD *)(v5 + 32) |= 0x4000u;
        v4 = 1;
        goto LABEL_20;
      }
    }
    else if (!*(_BYTE *)(v5 + 16) && (v6 & 0x800000) == 0 && *(_QWORD *)(v5 + 72) == v5 + 72)
    {
      goto LABEL_16;
    }
    v7 = *(int32x2_t *****)(v5 - 32);
    llvm::GlobalVariable::setInitializer(v5, 0);
    if (llvm::isSafeToDestroyConstant((llvm *)v7, v8))
      llvm::Constant::destroyConstant(v7);
    goto LABEL_16;
  }
  v4 = 0;
LABEL_23:
  v10 = a1 + 24;
  for (i = *(_QWORD *)(a1 + 32); i != v10; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v12 = i - 56;
    else
      v12 = 0;
    v13 = *(_DWORD *)(v12 + 32);
    if ((v13 & 0xF) == 1)
    {
      if (i && *(_BYTE *)(v12 + 16) == 3)
      {
        if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_38;
      }
      else if (*(_BYTE *)(v12 + 16) || (v13 & 0x800000) != 0 || *(_QWORD *)(v12 + 72) != v12 + 72)
      {
LABEL_38:
        sub_1C6291B14((llvm::Function *)v12);
      }
      llvm::Constant::removeDeadConstantUsers(v12);
      v4 = 1;
      continue;
    }
  }
  return v4 & 1;
}

void llvm::initializeEliminateAvailableExternallyLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E60);
  if (v2 != -1)
  {
    v5[0] = sub_1C56C95B4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E60, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56C95B4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Eliminate Available Externally Globals";
  *(_QWORD *)(v2 + 8) = 38;
  *(_QWORD *)(v2 + 16) = "elim-avail-extern";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32A5;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56C970C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C56C9644(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32A5;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81798B0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831E60);
  if (v3 != -1)
  {
    v7[0] = sub_1C56C95B4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831E60, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C56C970C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56C9644(v0);
}

void sub_1C56C9738(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56C975C(llvm::ModulePass *a1, uint64_t **a2)
{
  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  else
    return sub_1C56C93C4((uint64_t)a2);
}

uint64_t llvm::createGVExtractionPass(uint64_t a1, char a2, char a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _BYTE v22[31];

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = &unk_1EF8F32A6;
  *(_DWORD *)(v4 + 24) = 4;
  *(_QWORD *)v4 = &off_1E8179950;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = (_QWORD *)(v4 + 56);
  v6 = *(_QWORD **)a1;
  v7 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  for (*(_QWORD *)(v4 + 72) = 0; v6 != v7; ++v6)
  {
    sub_1C56CA114(v4 + 32, v6, (uint64_t)v22);
    if (v22[16])
    {
      v9 = *(_QWORD **)(v4 + 64);
      v8 = *(_QWORD *)(v4 + 72);
      if ((unint64_t)v9 >= v8)
      {
        v11 = (_QWORD *)*v5;
        v12 = ((uint64_t)v9 - *v5) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          abort();
        v14 = v8 - (_QWORD)v11;
        if (v14 >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          if (v15 >> 61)
            sub_1C4764EE4();
          v16 = (char *)operator new(8 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[8 * v12];
        *(_QWORD *)v17 = *v6;
        v10 = v17 + 8;
        if (v9 != v11)
        {
          do
          {
            v18 = *--v9;
            *((_QWORD *)v17 - 1) = v18;
            v17 -= 8;
          }
          while (v9 != v11);
          v9 = (_QWORD *)*v5;
        }
        *(_QWORD *)(v4 + 56) = v17;
        *(_QWORD *)(v4 + 64) = v10;
        *(_QWORD *)(v4 + 72) = &v16[8 * v15];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *v9 = *v6;
        v10 = v9 + 1;
      }
      *(_QWORD *)(v4 + 64) = v10;
    }
  }
  *(_BYTE *)(v4 + 80) = a2;
  *(_BYTE *)(v4 + 81) = a3;
  return v4;
}

void sub_1C56C993C(llvm::Pass *a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E8179950;
  v2 = (void *)*((_QWORD *)a1 + 7);
  if (v2)
  {
    *((_QWORD *)a1 + 8) = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);
}

void sub_1C56C9984(llvm::Pass *a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E8179950;
  v2 = (void *)*((_QWORD *)a1 + 7);
  if (v2)
  {
    *((_QWORD *)a1 + 8) = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56C99E0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t i;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::Value *v48;
  int v49;
  int v50;
  llvm::PointerType *v51;
  _QWORD **v52;
  _QWORD *v53;
  _DWORD *v55;
  llvm::Value *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  llvm::Value **v61;
  llvm::Value *v62;
  int v63;
  int v64;
  uint64_t **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Value **v70;
  llvm::Value *v71;
  int v72;
  int v73;
  llvm::Value *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  llvm::Value *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  llvm::Type *v82;
  uint64_t *v83;
  llvm::Value *v84;
  int v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  _QWORD ***v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  int v98;
  _QWORD ***v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;

  v4 = llvm::ModulePass::skipModule((llvm::ModulePass *)a1, (uint64_t **)a2);
  v5 = v4;
  if ((v4 & 1) == 0)
  {
    v98 = v4;
    if (!*(_BYTE *)(a1 + 80))
      LLVMSetModuleInlineAsm2_0(a2, "", 0);
    for (i = *(_QWORD *)(a2 + 16); i != a2 + 8; i = *(_QWORD *)(i + 8))
    {
      v7 = *(unsigned __int8 *)(a1 + 80);
      if (i)
        v8 = i - 56;
      else
        v8 = 0;
      v99 = (_QWORD ***)v8;
      v102 = 0;
      if (v7 == sub_1C56CA514((uint64_t *)(a1 + 32), &v99, &v102))
      {
        if (i && *(_BYTE *)(v8 + 16) == 3)
        {
          if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 0)
            goto LABEL_18;
        }
        else if (!*(_BYTE *)(v8 + 16) && *(_QWORD *)(v8 + 72) == v8 + 72 && (*(_BYTE *)(v8 + 34) & 0x80) == 0)
        {
          goto LABEL_18;
        }
        if ((*(_BYTE *)(v8 + 80) & 1) == 0 || !*(_BYTE *)(a1 + 81))
        {
          v17 = 1;
          goto LABEL_37;
        }
      }
LABEL_18:
      if ((*(_DWORD *)(v8 + 32) & 0xF) == 1)
        continue;
      if ((*(_BYTE *)(v8 + 23) & 0x10) == 0)
        goto LABEL_36;
      v9 = ***(_QWORD ***)v8;
      v10 = *(_QWORD *)(v9 + 152);
      v11 = *(unsigned int *)(v9 + 168);
      if (!(_DWORD)v11)
        goto LABEL_27;
      LODWORD(v12) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v13 = (uint64_t *)(v10 + 16 * v12);
      v14 = *v13;
      if (*v13 != v8)
      {
        v15 = 1;
        while (v14 != -4096)
        {
          v16 = v12 + v15++;
          v12 = v16 & (v11 - 1);
          v14 = *(_QWORD *)(v10 + 16 * v12);
          if (v14 == v8)
          {
            v13 = (uint64_t *)(v10 + 16 * v12);
            goto LABEL_28;
          }
        }
LABEL_27:
        v13 = (uint64_t *)(v10 + 16 * v11);
      }
LABEL_28:
      v18 = v13[1];
      if (*(_QWORD *)v18 == 17)
      {
        v19 = *(_QWORD *)(v18 + 16);
        v20 = *(_QWORD *)(v18 + 24);
        v21 = *(unsigned __int8 *)(v18 + 32);
        v22 = v19 == 0x6F6C672E6D766C6CLL && v20 == 0x726F74635F6C6162;
        if (v22 && v21 == 115)
          continue;
      }
LABEL_36:
      v17 = 0;
LABEL_37:
      if ((*(_BYTE *)(v8 + 34) & 0x40) == 0)
        goto LABEL_45;
      v24 = ***(_QWORD ***)v8;
      v99 = (_QWORD ***)v8;
      v25 = *(_DWORD *)(v24 + 2520);
      if (!v25)
      {
        v40 = 0;
LABEL_63:
        v29 = sub_1C53D65B8(v24 + 2504, (uint64_t)&v99, (uint64_t *)&v99, v40);
        v41 = (uint64_t)v99;
        v29[1] = 0;
        v29[2] = 0;
        *v29 = v41;
        goto LABEL_40;
      }
      v26 = *(_QWORD *)(v24 + 2504);
      v27 = v25 - 1;
      v28 = v27 & ((v8 >> 4) ^ (v8 >> 9));
      v29 = (_QWORD *)(v26 + 24 * v28);
      v30 = *v29;
      if (*v29 != v8)
      {
        v36 = 0;
        v37 = 1;
        while (v30 != -4096)
        {
          if (v36)
            v38 = 0;
          else
            v38 = v30 == -8192;
          if (v38)
            v36 = v29;
          v39 = v28 + v37++;
          v28 = v39 & v27;
          v29 = (_QWORD *)(v26 + 24 * v28);
          v30 = *v29;
          if (*v29 == v8)
            goto LABEL_40;
        }
        if (v36)
          v40 = v36;
        else
          v40 = v29;
        goto LABEL_63;
      }
LABEL_40:
      if (v29[2] == 12)
      {
        v31 = (uint64_t *)v29[1];
        v32 = *v31;
        v33 = *((_DWORD *)v31 + 2);
        if (v32 == 0x7274702E6D766C6CLL && v33 == 1752462689)
          continue;
      }
LABEL_45:
      sub_1C56CA440(v8, v17);
      if (v17)
      {
        llvm::GlobalVariable::setInitializer(v8, 0);
        v35 = *(_QWORD *)(v8 + 48);
        if (v35)
          llvm::Comdat::removeUser(v35, v8);
        *(_QWORD *)(v8 + 48) = 0;
      }
    }
    v42 = *(_QWORD *)(a2 + 32);
    v5 = v98;
    if (v42 != a2 + 24)
    {
      while (1)
      {
        v43 = *(unsigned __int8 *)(a1 + 80);
        v44 = v42 ? v42 - 56 : 0;
        v99 = (_QWORD ***)v44;
        v102 = 0;
        if (v43 != sub_1C56CA514((uint64_t *)(a1 + 32), &v99, &v102))
          break;
        if (v42 && *(_BYTE *)(v44 + 16) == 3)
        {
          if ((*(_DWORD *)(v44 + 20) & 0x7FFFFFF) == 0)
            break;
        }
        else if (!*(_BYTE *)(v44 + 16) && *(_QWORD *)(v44 + 72) == v44 + 72 && (*(_BYTE *)(v44 + 34) & 0x80) == 0)
        {
          break;
        }
        sub_1C56CA440(v44, 1);
        sub_1C6291B14((llvm::Function *)v44);
        v45 = *(_QWORD *)(v44 + 48);
        if (v45)
          llvm::Comdat::removeUser(v45, v44);
        *(_QWORD *)(v44 + 48) = 0;
LABEL_79:
        v42 = *(_QWORD *)(v42 + 8);
        if (v42 == a2 + 24)
          goto LABEL_84;
      }
      if ((*(_DWORD *)(v44 + 32) & 0xF) != 1)
        sub_1C56CA440(v44, 0);
      goto LABEL_79;
    }
LABEL_84:
    v46 = *(_QWORD *)(a2 + 48);
    if (v46 != a2 + 40)
    {
      while (1)
      {
        v47 = *(_QWORD *)(v46 + 8);
        v48 = v46 ? (llvm::Value *)(v46 - 48) : 0;
        v49 = *(unsigned __int8 *)(a1 + 80);
        v99 = (_QWORD ***)v48;
        v102 = 0;
        v50 = sub_1C56CA514((uint64_t *)(a1 + 32), &v99, &v102);
        sub_1C56CA440((uint64_t)v48, v49 == v50);
        if (v49 == v50)
          break;
LABEL_89:
        v46 = v47;
        if (v47 == a2 + 40)
          return v5 ^ 1u;
      }
      v51 = (llvm::PointerType *)*((_QWORD *)v48 + 3);
      llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList(*((_QWORD *)v48 + 5) + 40, v48);
      v52 = (_QWORD **)*((_QWORD *)v48 + 6);
      v53 = (_QWORD *)*((_QWORD *)v48 + 7);
      *v53 = v52;
      v52[1] = v53;
      *((_QWORD *)v48 + 6) = 0;
      *((_QWORD *)v48 + 7) = 0;
      if (*((_BYTE *)v51 + 8) == 14 && v51 != 0)
      {
        v65 = *(uint64_t ***)v48;
        if ((*((_BYTE *)v48 + 23) & 0x10) == 0)
        {
          v79 = 0;
          v80 = &byte_1C871356D;
          goto LABEL_115;
        }
        v66 = **v65;
        v67 = *(_QWORD *)(v66 + 152);
        v68 = *(unsigned int *)(v66 + 168);
        if ((_DWORD)v68)
        {
          LODWORD(v69) = (v68 - 1) & ((v48 >> 4) ^ (v48 >> 9));
          v70 = (llvm::Value **)(v67 + 16 * v69);
          v71 = *v70;
          if (*v70 == v48)
          {
LABEL_114:
            v78 = v70[1];
            v81 = *(_QWORD *)v78;
            v80 = (char *)v78 + 16;
            v79 = v81;
LABEL_115:
            v82 = (llvm::Type *)(*((_DWORD *)v65 + 2) >> 8);
            v101 = 261;
            v99 = (_QWORD ***)v80;
            v100 = v79;
            v83 = (uint64_t *)operator new(0x80uLL);
            v56 = (llvm::Value *)(v83 + 1);
            *((_DWORD *)v83 + 7) = *((_DWORD *)v83 + 7) & 0x38000000 | 0x40000000;
            *v83 = 0;
            llvm::Function::Function(v83 + 1, v51, 0, v82, (uint64_t)&v99, a2);
            v5 = v98;
            goto LABEL_116;
          }
          v72 = 1;
          while (v71 != (llvm::Value *)-4096)
          {
            v73 = v69 + v72++;
            v69 = v73 & (v68 - 1);
            v71 = *(llvm::Value **)(v67 + 16 * v69);
            if (v71 == v48)
            {
              v70 = (llvm::Value **)(v67 + 16 * v69);
              goto LABEL_114;
            }
          }
        }
        v70 = (llvm::Value **)(v67 + 16 * v68);
        goto LABEL_114;
      }
      v55 = operator new(0x78uLL);
      v56 = (llvm::Value *)(v55 + 8);
      v55[13] = v55[13] & 0x38000000 | 1;
      *(_QWORD *)v55 = 0;
      *((_QWORD *)v55 + 1) = 0;
      *((_QWORD *)v55 + 2) = 0;
      *((_QWORD *)v55 + 3) = v55 + 8;
      if ((*((_BYTE *)v48 + 23) & 0x10) == 0)
      {
        v75 = 0;
        v76 = &byte_1C871356D;
        goto LABEL_112;
      }
      v57 = ***(_QWORD ***)v48;
      v58 = *(_QWORD *)(v57 + 152);
      v59 = *(unsigned int *)(v57 + 168);
      if ((_DWORD)v59)
      {
        LODWORD(v60) = (v59 - 1) & ((v48 >> 4) ^ (v48 >> 9));
        v61 = (llvm::Value **)(v58 + 16 * v60);
        v62 = *v61;
        if (*v61 == v48)
        {
LABEL_111:
          v74 = v61[1];
          v77 = *(_QWORD *)v74;
          v76 = (char *)v74 + 16;
          v75 = v77;
LABEL_112:
          v101 = 261;
          v99 = (_QWORD ***)v76;
          v100 = v75;
          llvm::GlobalVariable::GlobalVariable((uint64_t)(v55 + 8), a2, v51, 0, 0, 0, (uint64_t)&v99, 0, 0, 0, 0);
LABEL_116:
          llvm::Value::doRAUW(v48, v56, (llvm::Value *)1);
          llvm::Constant::removeDeadConstantUsers((uint64_t)v48);
          llvm::Value::~Value(v48, v84);
          v85 = *((_DWORD *)v48 + 5);
          if ((v85 & 0x40000000) != 0)
          {
            v92 = (char *)*((_QWORD *)v48 - 1);
            v91 = (_QWORD ***)((char *)v48 - 8);
            v90 = v92;
            v93 = v85 & 0x7FFFFFF;
            if ((_DWORD)v93)
            {
              v94 = 32 * v93;
              do
              {
                v95 = &v90[v94];
                if (*(_QWORD *)&v90[v94 - 32])
                {
                  **((_QWORD **)v95 - 2) = *((_QWORD *)v95 - 3);
                  v96 = *((_QWORD *)v95 - 3);
                  if (v96)
                    *(_QWORD *)(v96 + 16) = *((_QWORD *)v95 - 2);
                }
                v94 -= 32;
              }
              while (v94);
            }
            operator delete(v90);
            v87 = v91;
          }
          else
          {
            v86 = v85 & 0x7FFFFFF;
            v87 = (_QWORD *)((char *)v48 - 32 * v86);
            if ((_DWORD)v86)
            {
              v88 = (_QWORD *)(v46 - 80);
              do
              {
                if (*v88)
                {
                  *(_QWORD *)v88[2] = v88[1];
                  v89 = v88[1];
                  if (v89)
                    *(_QWORD *)(v89 + 16) = v88[2];
                }
                v22 = v88 == v87;
                v88 -= 4;
              }
              while (!v22);
            }
            if (v85 < 0)
              v87 = (_QWORD *)((char *)v87 - *(v87 - 1) - 8);
          }
          operator delete(v87);
          goto LABEL_89;
        }
        v63 = 1;
        while (v62 != (llvm::Value *)-4096)
        {
          v64 = v60 + v63++;
          v60 = v64 & (v59 - 1);
          v62 = *(llvm::Value **)(v58 + 16 * v60);
          if (v62 == v48)
          {
            v61 = (llvm::Value **)(v58 + 16 * v60);
            goto LABEL_111;
          }
        }
      }
      v61 = (llvm::Value **)(v58 + 16 * v59);
      goto LABEL_111;
    }
  }
  return v5 ^ 1u;
}

uint64_t sub_1C56CA114@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C56CA198((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C56CA234(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C56CA198(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_14;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_14:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C56CA234(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C56CA2E4(a1, v7);
  v9 = 0;
  sub_1C56CA198((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C56CA2E4(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C56CA39C(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C56CA39C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C56CA198((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C56CA440(uint64_t this, int a2)
{
  llvm::GlobalValue *v2;
  int v3;
  unsigned int v4;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;

  v2 = (llvm::GlobalValue *)this;
  v3 = *(_DWORD *)(this + 32);
  v4 = (v3 & 0xF) - 7;
  if (v4 >= 2 && a2 == 0)
  {
    if ((v3 & 0xE) == 2)
    {
      v8 = v3 & 0xFFFFFFF0;
      v9 = *(_DWORD *)(this + 32) & 0x30;
      v10 = (*(_DWORD *)(this + 32) & 0xF) == 2 ? v8 | 4 : v8 | 5;
      *(_DWORD *)(this + 32) = v10;
      if (v9)
        goto LABEL_16;
    }
  }
  else
  {
    *(_DWORD *)(this + 32) = v3 & 0xFFFFFFF0;
    if ((v3 & 0x30) != 0)
    {
      this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this);
      if ((this & 1) == 0)
        *((_DWORD *)v2 + 8) |= 0x4000u;
    }
    if (v4 <= 1)
    {
      v6 = *((_DWORD *)v2 + 8);
      v7 = v6 & 0xFFFFFFCF | 0x10;
      *((_DWORD *)v2 + 8) = v7;
      if ((v6 & 0xFu) - 7 < 2)
      {
LABEL_18:
        *((_DWORD *)v2 + 8) = v7 | 0x4000;
        return this;
      }
LABEL_16:
      this = llvm::GlobalValue::hasExternalWeakLinkage(v2);
      if ((this & 1) != 0)
        return this;
      v7 = *((_DWORD *)v2 + 8);
      goto LABEL_18;
    }
  }
  return this;
}

uint64_t sub_1C56CA514(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

unint64_t sub_1C56CA5B0(unint64_t result)
{
  uint64_t ***v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  char v6;
  BOOL v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  uint64_t ***v26;
  char *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  BOOL v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t ****v49;
  uint64_t ***v50;
  int v51;
  int v52;
  uint64_t ***v53;
  char *v54;
  uint64_t **v55;
  uint64_t **v56;
  unsigned int v57;
  char *v58;
  unint64_t v59;
  char v60;

  v1 = (uint64_t ***)result;
  v2 = qword_1ED80A1A0;
  v3 = unk_1ED80A1A8;
  v57 = result >> 4;
  if (qword_1ED80A1A0 != unk_1ED80A1A8)
  {
    v4 = v57 ^ (result >> 9);
    v5 = (_QWORD *)(result + 112);
    while (1)
    {
      v6 = *(_BYTE *)(v2 + 23);
      v7 = v6 < 0;
      if (v6 >= 0)
        v8 = (char *)v2;
      else
        v8 = *(char **)v2;
      v9 = v6 & 0x7F;
      if (v7)
        v10 = *(_QWORD *)(v2 + 8);
      else
        v10 = v9;
      v58 = v8;
      v59 = v10;
      v60 = 58;
      result = llvm::StringRef::find((uint64_t *)&v58, &v60, 1uLL, 0);
      if (v10 >= result)
        v11 = result;
      else
        v11 = v10;
      if (v10 >= result + 1)
        v12 = result + 1;
      else
        v12 = v10;
      v13 = &v8[v12];
      v14 = v10 - v12;
      if (result == -1)
        v15 = 0;
      else
        v15 = v14;
      if (result == -1)
        v16 = 0;
      else
        v16 = (uint64_t)v13;
      if (result == -1)
        v17 = v10;
      else
        v17 = v11;
      if ((*((_BYTE *)v1 + 23) & 0x10) == 0)
      {
        v28 = 0;
        v27 = &byte_1C871356D;
        goto LABEL_33;
      }
      v18 = ***v1;
      v19 = *(_QWORD *)(v18 + 152);
      v20 = *(unsigned int *)(v18 + 168);
      if (!(_DWORD)v20)
        goto LABEL_31;
      LODWORD(v21) = (v20 - 1) & v4;
      v22 = (uint64_t ****)(v19 + 16 * v21);
      v23 = *v22;
      if (*v22 != v1)
        break;
LABEL_32:
      v26 = v22[1];
      v29 = *v26;
      v27 = (char *)(v26 + 2);
      v28 = v29;
LABEL_33:
      if ((uint64_t **)v17 == v28)
      {
        if (!v17 || (result = memcmp(v8, v27, v17), !(_DWORD)result))
        {
          result = llvm::Attribute::getAttrKindFromName(v16, v15);
          if ((_DWORD)result)
          {
            if (!*v5 || ((*(unsigned __int8 *)(*v5 + (int)result / 8 + 12) >> (result & 7)) & 1) == 0)
            {
              result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v1 + 14, **v1, -1, result);
              v1[14] = (uint64_t **)result;
            }
          }
        }
      }
      v2 += 24;
      if (v2 == v3)
        goto LABEL_43;
    }
    v24 = 1;
    while (v23 != (uint64_t ***)-4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v23 = *(uint64_t ****)(v19 + 16 * v21);
      if (v23 == v1)
      {
        v22 = (uint64_t ****)(v19 + 16 * v21);
        goto LABEL_32;
      }
    }
LABEL_31:
    v22 = (uint64_t ****)(v19 + 16 * v20);
    goto LABEL_32;
  }
LABEL_43:
  v30 = qword_1ED80A278;
  v31 = unk_1ED80A280;
  if (qword_1ED80A278 != unk_1ED80A280)
  {
    v32 = v1 + 14;
    while (1)
    {
      v33 = *(_BYTE *)(v30 + 23);
      v34 = v33 < 0;
      v35 = v33 >= 0 ? (char *)v30 : *(char **)v30;
      v36 = v33 & 0x7F;
      v37 = v34 ? *(_QWORD *)(v30 + 8) : v36;
      v58 = v35;
      v59 = v37;
      v60 = 58;
      result = llvm::StringRef::find((uint64_t *)&v58, &v60, 1uLL, 0);
      v38 = v37 >= result ? result : v37;
      v39 = v37 >= result + 1 ? result + 1 : v37;
      v40 = &v35[v39];
      v41 = v37 - v39;
      v42 = result == -1 ? 0 : v41;
      v43 = result == -1 ? 0 : (uint64_t)v40;
      v44 = result == -1 ? v37 : v38;
      if ((*((_BYTE *)v1 + 23) & 0x10) != 0)
        break;
      v55 = 0;
      v54 = &byte_1C871356D;
LABEL_75:
      if ((uint64_t **)v44 == v55)
      {
        if (!v44 || (result = memcmp(v35, v54, v44), !(_DWORD)result))
        {
          result = llvm::Attribute::getAttrKindFromName(v43, v42);
          if ((_DWORD)result
            && *v32
            && ((*(unsigned __int8 *)(*v32 + (int)result / 8 + 12) >> (result & 7)) & 1) != 0)
          {
            result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)v1 + 14, **v1, -1, result);
            v1[14] = (uint64_t **)result;
          }
        }
      }
      v30 += 24;
      if (v30 == v31)
        return result;
    }
    v45 = ***v1;
    v46 = *(_QWORD *)(v45 + 152);
    v47 = *(unsigned int *)(v45 + 168);
    if ((_DWORD)v47)
    {
      LODWORD(v48) = (v47 - 1) & (v57 ^ (v1 >> 9));
      v49 = (uint64_t ****)(v46 + 16 * v48);
      v50 = *v49;
      if (*v49 == v1)
      {
LABEL_74:
        v53 = v49[1];
        v56 = *v53;
        v54 = (char *)(v53 + 2);
        v55 = v56;
        goto LABEL_75;
      }
      v51 = 1;
      while (v50 != (uint64_t ***)-4096)
      {
        v52 = v48 + v51++;
        v48 = v52 & (v47 - 1);
        v50 = *(uint64_t ****)(v46 + 16 * v48);
        if (v50 == v1)
        {
          v49 = (uint64_t ****)(v46 + 16 * v48);
          goto LABEL_74;
        }
      }
    }
    v49 = (uint64_t ****)(v46 + 16 * v47);
    goto LABEL_74;
  }
  return result;
}

void llvm::initializeForceFunctionAttrsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E68);
  if (v2 != -1)
  {
    v5[0] = sub_1C56CA974;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E68, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56CA974(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Force set function attributes";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "forceattrs";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32A8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56CAACC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C56CAA04(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32A8;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81799F0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831E68);
  if (v3 != -1)
  {
    v7[0] = sub_1C56CA974;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831E68, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C56CAACC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56CAA04(v0);
}

void sub_1C56CAAF8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56CAB1C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unint64_t v6;

  v2 = qword_1ED80A1A0 == unk_1ED80A1A8 && qword_1ED80A278 == unk_1ED80A280;
  v3 = !v2;
  if (!v2)
  {
    v4 = a2 + 24;
    for (i = *(_QWORD *)(a2 + 32); i != v4; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v6 = i - 56;
      else
        v6 = 0;
      sub_1C56CA5B0(v6);
    }
  }
  return v3;
}

uint64_t sub_1C56CAB88()
{
  __int128 v1;
  int v2;

  v2 = 1;
  *(_QWORD *)&v1 = "Add an attribute to a function. This should be a pair of 'function-name:attribute-name', for example "
                   "-force-attribute=foo:noinline. This option can be specified multiple times.";
  *((_QWORD *)&v1 + 1) = 176;
  sub_1C6292348(&v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C50A4924, &qword_1ED80A120, &dword_1C475E000);
  v2 = 1;
  *(_QWORD *)&v1 = "Remove an attribute from a function. This should be a pair of 'function-name:attribute-name', for exa"
                   "mple -force-remove-attribute=foo:noinline. This option can be specified multiple times.";
  *((_QWORD *)&v1 + 1) = 188;
  sub_1C6292400(&v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C50A4924, &qword_1ED80A1F8, &dword_1C475E000);
}

uint64_t llvm::computeFunctionBodyMemoryAccess(llvm *this, llvm::Function *a2, llvm::AAResults *a3)
{
  uint64_t v3;
  uint64_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  void *v10[2];
  _OWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  memset(v11, 0, sizeof(v11));
  v5 = 1;
  v6 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v7 = v6;
  v8 = v6;
  v9 = v6;
  v10[0] = v11;
  v10[1] = (void *)0x800000000;
  v3 = sub_1C56CAD08((uint64_t)this, 1, (uint64_t)a2, (uint64_t)&v5);
  if (v10[0] != v11)
    free(v10[0]);
  if ((v5 & 1) == 0)
    MEMORY[0x1CAA32FB4](v6.i64[0], 8);
  return v3;
}

uint64_t sub_1C56CAD08(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  int v26;
  llvm *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  llvm *v31;
  int v32;
  int v34;
  llvm *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t **v48;
  uint64_t v49;
  uint64_t v50;
  llvm *v51;
  uint64_t v52;
  int v53;
  int v54;
  _BOOL4 v56;
  llvm *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  int v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  unsigned int v89;
  uint64_t v91;
  uint64_t v92;
  _OWORD v93[2];
  llvm *v94;
  uint64_t v95;
  _OWORD v96[2];

  v8 = *(_QWORD **)(a3 + 8);
  v9 = *(_QWORD **)(a3 + 16);
  v10 = 63;
  while (v8 != v9)
  {
    v10 = (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 56))(*v8, a1) & v10;
    if ((_DWORD)v10 == 4)
      return v10;
    ++v8;
  }
  if (!a2)
    return v10;
  v11 = a1 + 72;
  for (i = *(_QWORD *)(a1 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v11)
    {
      v92 = 0;
      LOBYTE(v15) = 0;
      goto LABEL_183;
    }
    v13 = i - 24;
    if (!i)
      v13 = 0;
    v14 = *(_QWORD *)(v13 + 48);
    if (v14 != v13 + 40)
      break;
  }
  v92 = 0;
  v15 = 0;
  v91 = a4;
  while (1)
  {
    v16 = v14 - 24;
    if (v14)
      v17 = v14 - 24;
    else
      v17 = 0;
    v18 = *(unsigned __int8 *)(v17 + 16);
    v19 = (v18 - 33);
    if (v19 > 0x33 || ((1 << (v18 - 33)) & 0x8000000000041) == 0)
    {
      if (v14 && v18 == 60)
      {
        v27 = *(llvm **)(v17 - 32);
        sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 56) + 40) + 272, *(_QWORD *)v17);
        if (v29 == 1)
          v30 = -2;
        else
          v30 = (unint64_t)(v28 + 7) >> 3;
        llvm::Instruction::getAAMetadata((uint64_t ***)v17, v96);
        v94 = v27;
        v95 = v30;
        if ((*(_BYTE *)(v17 + 18) & 1) == 0)
        {
          if ((llvm::AAResults::pointsToConstantMemory(a3, (uint64_t)&v94, 1) & 1) != 0)
            goto LABEL_150;
          v27 = v94;
        }
        v31 = v27;
LABEL_40:
        v32 = *((unsigned __int8 *)llvm::getUnderlyingObject(v31, (const llvm::Value *)6) + 16);
        v34 = v32 != 21 && v32 != 59;
        goto LABEL_64;
      }
      if (v14 && v18 == 61)
      {
        v35 = *(llvm **)(v17 - 32);
        sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 56) + 40) + 272, **(_QWORD **)(v17 - 64));
        if (v37 == 1)
          v38 = -2;
        else
          v38 = (unint64_t)(v36 + 7) >> 3;
        llvm::Instruction::getAAMetadata((uint64_t ***)v17, v96);
        v94 = v35;
        v95 = v38;
        if ((*(_BYTE *)(v17 + 18) & 1) == 0)
        {
          if ((llvm::AAResults::pointsToConstantMemory(a3, (uint64_t)&v94, 1) & 1) != 0)
            goto LABEL_150;
          v35 = v94;
        }
        v39 = *((unsigned __int8 *)llvm::getUnderlyingObject(v35, (const llvm::Value *)6) + 16);
        v40 = v39 == 21 || v39 == 59;
        goto LABEL_61;
      }
      if (v14 && v18 == 88)
      {
        v57 = *(llvm **)(v17 - 32);
        llvm::Instruction::getAAMetadata((uint64_t ***)v17, v96);
        v94 = v57;
        v95 = -2;
        if ((llvm::AAResults::pointsToConstantMemory(a3, (uint64_t)&v94, 1) & 1) != 0)
          goto LABEL_150;
        v31 = v94;
        goto LABEL_40;
      }
      if (v19 <= 0x37)
      {
        if (((1 << (v18 - 33)) & 0x8000000000001) == 0)
        {
          if (((1 << (v18 - 33)) & 0x808001C8000010) == 0
            && (v19 != 28 || (*(_WORD *)(v17 + 18) & 0x301) == 0))
          {
            goto LABEL_97;
          }
LABEL_125:
          v34 = 1;
LABEL_64:
          v41 = *(unsigned __int8 *)(v17 + 16);
          goto LABEL_65;
        }
        v64 = *(_QWORD *)(v17 + 64);
        if (!v64 || (*(_BYTE *)(v64 + 20) & 4) == 0 && (*(_BYTE *)(v64 + 17) & 0x10) == 0)
        {
          LODWORD(v94) = 7;
          if (sub_1C53E4BBC(v17, (__int32 *)&v94, 1uLL))
          {
            v80 = *(_QWORD *)(v17 - 32);
            if (!v80 || *(_BYTE *)(v80 + 16) || *(_QWORD *)(v80 + 24) != *(_QWORD *)(v17 + 72))
            {
LABEL_181:
              v34 = 1;
              goto LABEL_64;
            }
            if (*(_DWORD *)(v80 + 36) != 7)
              goto LABEL_125;
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v17, 66) & 1) == 0
            && !llvm::CallBase::hasFnAttrOnCalledFunction(v17, 44))
          {
            goto LABEL_125;
          }
        }
      }
LABEL_97:
      v34 = 0;
      v41 = *(unsigned __int8 *)(v17 + 16);
      v58 = (v41 - 33);
      if (v58 > 0x37)
        goto LABEL_65;
      if (((1 << (v41 - 33)) & 0x8000000000041) == 0)
      {
        if (v58 == 27)
        {
          v40 = (*(_WORD *)(v17 + 18) & 0x301) == 0;
LABEL_61:
          v34 = !v40;
          goto LABEL_64;
        }
        if (((1 << (v41 - 33)) & 0x808001D0000010) != 0)
          goto LABEL_125;
LABEL_65:
        v42 = 0;
        v43 = (v41 - 33);
        if (v43 > 0x37)
          goto LABEL_108;
        if (((1 << v43) & 0x8000000000041) == 0)
        {
          if (v43 == 27)
            v42 = (*(_WORD *)(v17 + 18) & 0x301) != 0;
          else
            v42 = ((1 << v43) & 0x808001D0000010) != 0;
          goto LABEL_108;
        }
        v59 = *(_QWORD *)(v17 + 64);
        if (!v59 || (*(_BYTE *)(v59 + 17) & 0x30) == 0)
        {
          v60 = *(_DWORD *)(v17 + 20);
          if (v60 < 0)
          {
            v71 = v17 - 32 * (v60 & 0x7FFFFFF);
            v74 = *(_QWORD *)(v71 - 8);
            v72 = v71 - 8;
            v73 = v74;
            if (v74)
            {
              v75 = -v73;
              while (1)
              {
                v76 = *(_DWORD *)(*(_QWORD *)(v72 + v75) + 8);
                v77 = v76 > 7;
                v78 = (1 << v76) & 0x83;
                if (v77 || v78 == 0)
                  break;
                v75 += 16;
                if (!v75)
                  goto LABEL_105;
              }
              v42 = 1;
LABEL_108:
              v61 = 0;
              v62 = *(unsigned __int8 *)(v17 + 16) - 33;
              if (v62 <= 0x37)
              {
                if (((1 << (*(_BYTE *)(v17 + 16) - 33)) & 0x8000000000041) == 0)
                {
                  if (((1 << (*(_BYTE *)(v17 + 16) - 33)) & 0x808001C8000010) == 0)
                  {
                    if (v62 == 28)
                      v61 = (*(_WORD *)(v17 + 18) & 0x301) != 0;
                    goto LABEL_149;
                  }
                  goto LABEL_148;
                }
                v63 = *(_QWORD *)(v17 + 64);
                if (v63 && ((*(_BYTE *)(v63 + 20) & 4) != 0 || (*(_BYTE *)(v63 + 17) & 0x10) != 0))
                  goto LABEL_132;
                LODWORD(v94) = 7;
                if (sub_1C53E4BBC(v17, (__int32 *)&v94, 1uLL))
                {
                  v68 = *(_QWORD *)(v17 - 32);
                  if (!v68
                    || *(_BYTE *)(v68 + 16)
                    || *(_QWORD *)(v68 + 24) != *(_QWORD *)(v17 + 72)
                    || *(_DWORD *)(v68 + 36) != 7)
                  {
LABEL_148:
                    v61 = 1;
                    goto LABEL_149;
                  }
                }
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v17, 66) & 1) != 0)
LABEL_132:
                  v61 = 0;
                else
                  v61 = llvm::CallBase::hasFnAttrOnCalledFunction(v17, 44) ^ 1;
              }
LABEL_149:
              LODWORD(v92) = v92 | v34;
              v15 |= v42;
              HIDWORD(v92) |= v61;
              goto LABEL_150;
            }
          }
LABEL_105:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v17, 45) & 1) == 0)
          {
            v42 = llvm::CallBase::hasFnAttrOnCalledFunction(v17, 44) ^ 1;
            goto LABEL_108;
          }
        }
        v42 = 0;
        goto LABEL_108;
      }
      v65 = *(_QWORD *)(v17 + 64);
      if (!v65 || (*(_BYTE *)(v65 + 17) & 0x30) == 0)
      {
        v66 = *(_DWORD *)(v17 + 20);
        if (v66 < 0)
        {
          v81 = v17 - 32 * (v66 & 0x7FFFFFF);
          v84 = *(_QWORD *)(v81 - 8);
          v82 = v81 - 8;
          v83 = v84;
          if (v84)
          {
            v85 = -v83;
            do
            {
              v86 = *(_DWORD *)(*(_QWORD *)(v82 + v85) + 8);
              v77 = v86 > 7;
              v87 = (1 << v86) & 0x83;
              if (v77 || v87 == 0)
                goto LABEL_181;
              v85 += 16;
            }
            while (v85);
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v17, 45) & 1) == 0)
        {
          v34 = llvm::CallBase::hasFnAttrOnCalledFunction(v17, 44) ^ 1;
          goto LABEL_64;
        }
      }
      v34 = 0;
      goto LABEL_64;
    }
    v21 = *(_DWORD *)(v14 - 4);
    if (v21 < 0 && (*(_QWORD *)(v16 - 32 * (v21 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0
      || (v22 = *(_QWORD *)(v14 - 56)) == 0
      || *(_BYTE *)(v22 + 16)
      || *(_QWORD *)(v22 + 24) != *(_QWORD *)(v14 + 48)
      || (v94 = *(llvm **)(v14 - 56), *(_QWORD *)&v93[0] = 0, (sub_1C5684DE8(v91, &v94, v93) & 1) == 0))
    {
      v24 = *(_QWORD **)(a3 + 8);
      v23 = *(_QWORD **)(a3 + 16);
      if (v24 == v23)
      {
        v26 = 63;
        LOBYTE(v25) = 63;
LABEL_47:
        if (!sub_1C509DDB0(v17))
        {
          if ((v25 & 0x30) != 0)
          {
            v15 |= (v26 & 2) >> 1;
            HIDWORD(v92) |= v26;
            LODWORD(v92) = 1;
          }
          else
          {
            v44 = *(unsigned __int8 *)(v14 - 8);
            if (v44 == 84)
            {
              v45 = 0;
            }
            else if (v44 == 39)
            {
              v45 = (*(_DWORD *)(v14 + 56) + 1);
            }
            else
            {
              v45 = 2;
            }
            v46 = *(_DWORD *)(v14 - 4);
            v47 = v46 & 0x7FFFFFF;
            v48 = (uint64_t **)(v16 - 32 * v47);
            if (v46 < 0 && (v67 = (uint64_t)*(v48 - 1), (v67 & 0xFFFFFFFF0) != 0))
              v49 = (*((_DWORD *)v48 - 3) - *(_DWORD *)((char *)v48 - v67));
            else
              v49 = 0;
            if (v48 != (uint64_t **)(v16 - 32 * v45 - 32 * v49 - 32))
            {
              v50 = 32 * v47 - 32 * v45 - 32 * v49 - 32;
              do
              {
                v51 = (llvm *)*v48;
                v52 = **v48;
                if ((*(_DWORD *)(v52 + 8) & 0xFE) == 0x12)
                  v53 = *(unsigned __int8 *)(**(_QWORD **)(v52 + 16) + 8);
                else
                  v53 = *(_DWORD *)(v52 + 8);
                if (v53 == 15)
                {
                  llvm::Instruction::getAAMetadata((uint64_t ***)v17, v93);
                  v94 = v51;
                  v95 = -1;
                  v96[0] = v93[0];
                  v96[1] = v93[1];
                  if ((llvm::AAResults::pointsToConstantMemory(a3, (uint64_t)&v94, 1) & 1) == 0)
                  {
                    v54 = *((unsigned __int8 *)llvm::getUnderlyingObject(v94, (const llvm::Value *)6) + 16);
                    v56 = v54 != 21 && v54 != 59;
                    v15 |= (v26 & 2) >> 1;
                    LODWORD(v92) = v92 | v56;
                    HIDWORD(v92) |= v26;
                  }
                }
                v48 += 4;
                v50 -= 32;
              }
              while (v50);
            }
          }
        }
      }
      else
      {
        v25 = 63;
        while (1)
        {
          v25 &= (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v24 + 48))(*v24, v14 - 24);
          if (v25 == 4)
            break;
          if (++v24 == v23)
          {
            if ((v25 & 3) == 0)
              break;
            v26 = v25;
            goto LABEL_47;
          }
        }
      }
    }
LABEL_150:
    v14 = *(_QWORD *)(v14 + 8);
    v69 = i - 24;
    if (!i)
      v69 = 0;
    if (v14 == v69 + 40)
      break;
LABEL_157:
    if (i == v11)
      goto LABEL_183;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v11)
      break;
    v70 = i - 24;
    if (!i)
      v70 = 0;
    v14 = *(_QWORD *)(v70 + 48);
    if (v14 != v70 + 40)
      goto LABEL_157;
  }
LABEL_183:
  if ((v15 & 1) == 0 && (v92 & 0x100000000) == 0)
    return 4;
  if ((v92 & 1) != 0)
    v89 = 56;
  else
    v89 = 8;
  if ((v15 & 1) != 0)
    v89 |= 6u;
  if ((v92 & 0x100000000) != 0)
    return v89 | 5;
  else
    return v89;
}

BOOL llvm::thinLTOPropagateFunctionAttrs(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  _BOOL8 v3;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  int64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  char *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD v32[7];
  _BYTE *v33;
  _BYTE *v34;
  _QWORD v35[2];
  int v36;

  if (byte_1ED80A590)
    return 0;
  v35[0] = 0;
  v35[1] = 0;
  v36 = 0;
  v31 = a1;
  sub_1C4F7678C(&v31, (uint64_t)v32);
  v7 = v33;
  v8 = v34;
  if (v33 == v34)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = v8 - v7;
      if (v8 - v7 < 0)
        abort();
      v12 = (char *)operator new(v8 - v7);
      memmove(v12, v7, v8 - v7);
      if (v8 == v7)
      {
        v10 = 1;
      }
      else
      {
        v13 = &v12[v11];
        if (v11 == 8)
          v14 = 68;
        else
          v14 = 64;
        v15 = (uint64_t *)v12;
        while (1)
        {
          v16 = sub_1C56CC5F0(*v15, (uint64_t)v35, a2, a3);
          if (!v16)
            break;
          if ((*(_BYTE *)(v16 + 68) & 0x80) != 0)
            v14 &= ~0x40u;
          v17 = *(uint64_t **)(v16 + 80);
          v18 = *(_QWORD *)(v16 + 88) - (_QWORD)v17;
          if (v18)
          {
            v19 = 16 * (v18 >> 4) - 16;
            do
            {
              v20 = sub_1C56CC5F0(*v17, (uint64_t)v35, a2, a3);
              if (!v20)
                goto LABEL_47;
              v21 = *(_DWORD *)(v20 + 68);
              v22 = v14 & 0xFFFFFFFB;
              if ((v21 & 4) != 0)
                v22 = v14;
              if ((v21 & 0x40) != 0)
                v14 = v22;
              else
                v14 = v22 & 0xFFFFFFBF;
              v17 += 2;
              v23 = (v14 & 0x44) == 0 || v19 == 0;
              v19 -= 16;
            }
            while (!v23);
          }
          if (++v15 == (uint64_t *)v13)
          {
            if ((v14 & 0x44) != 0)
            {
              v24 = v12;
              do
              {
                v25 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
                v26 = *(uint64_t **)(v25 + 24);
                v27 = *(_QWORD *)(v25 + 32) - (_QWORD)v26;
                if (v27)
                {
                  v28 = 8 * (v27 >> 3);
                  do
                  {
                    v29 = *v26;
                    if (*v26)
                      v30 = *(_DWORD *)(*v26 + 8) == 1;
                    else
                      v30 = 0;
                    if (v30)
                    {
                      if ((v14 & 4) != 0)
                        *(_WORD *)(v29 + 68) |= 4u;
                      if ((v14 & 0x40) != 0)
                        *(_WORD *)(v29 + 68) |= 0x40u;
                    }
                    ++v26;
                    v28 -= 8;
                  }
                  while (v28);
                }
                v24 += 8;
                v10 = 1;
              }
              while (v24 != v13);
            }
            break;
          }
        }
      }
LABEL_47:
      operator delete(v12);
      sub_1C4F76FF0(v32);
      v7 = v33;
      v8 = v34;
    }
    while (v33 != v34);
    v9 = v35[0];
  }
  sub_1C617D7D4(v32);
  v3 = v10 != 0;
  MEMORY[0x1CAA32FB4](v9, 8);
  return v3;
}

void llvm::PostOrderFunctionAttrsPass::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t ResultImpl;
  int v19;
  int v20;
  llvm::GlobalValue *Section;
  uint64_t v22;
  llvm::Module *v23;
  _BOOL4 v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Function *v34;
  llvm **v35;
  uint64_t v36;
  llvm *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  _BYTE v61[64];
  __int128 v62;
  _QWORD **v63;
  _QWORD *v64[3];
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  int v71;
  _BYTE v72[16];
  unsigned int *v73;
  unsigned int *v74;
  uint64_t v75;
  void *v76;
  unsigned int v77;
  _BYTE v78[72];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v56 = *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a2, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, a1, a3)+ 8);
  v65 = v67;
  v66 = 0x800000000;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = 8 * v6;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
      if (v7 >= HIDWORD(v66))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v7 + 1, 8);
        v7 = v66;
      }
      *((_QWORD *)v65 + v7) = v10;
      v7 = v66 + 1;
      LODWORD(v66) = v66 + 1;
      v8 += 8;
      v9 -= 8;
    }
    while (v9);
    v11 = (uint64_t *)v65;
  }
  else
  {
    v7 = 0;
    v11 = (uint64_t *)v67;
  }
  sub_1C56CD028((uint64_t)&v68, v11, v7);
  v57 = (uint64_t *)v61;
  v58 = (uint64_t *)v61;
  v59 = 8;
  v60 = 0;
  if (!v77)
    goto LABEL_70;
  v54 = a4;
  sub_1C56CD384((llvm::GlobalValue **)v76, v77, (llvm::SmallPtrSetImplBase *)&v57);
  if (!v77)
    goto LABEL_62;
  v12 = 0;
  v13 = 0;
  v14 = (uint64_t *)v76;
  v15 = 8 * v77;
  LOBYTE(v16) = 1;
  do
  {
    v17 = *v14;
    ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(v56, &llvm::AAManager::Key, *v14);
    v19 = *(unsigned __int8 *)(v17 + 16);
    if (*(_BYTE *)(v17 + 16))
    {
      if (v19 == 3 && (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_17;
    }
    else if (*(_QWORD *)(v17 + 72) == v17 + 72 && (*(_BYTE *)(v17 + 34) & 0x80) == 0)
    {
LABEL_17:
      v20 = 0;
      goto LABEL_26;
    }
    v20 = 0;
    if (((1 << (*(_DWORD *)(v17 + 32) & 0xF)) & 0x7D5) != 0)
    {
      if (v19 == 3
        && (Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v17), v22 == 12)
        && (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
          ? (v26 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
          : (v26 = 0),
            v26))
      {
        v24 = 1;
      }
      else if ((*(_DWORD *)(v17 + 32) & 0xFu) - 5 < 4 || (v24 = 1, ((1 << (*(_DWORD *)(v17 + 32) & 0xF)) & 0x614) == 0))
      {
        v23 = *(llvm::Module **)(v17 + 40);
        v24 = v23 && llvm::Module::getSemanticInterposition(v23) && (*(_BYTE *)(v17 + 33) & 0x40) == 0;
      }
      v20 = !v24;
    }
LABEL_26:
    v25 = sub_1C56CAD08(v17, v20, ResultImpl + 8, (uint64_t)&v68);
    if (v25 != 4)
    {
      v12 |= v25;
      v13 |= (v25 & 2) >> 1;
      v16 = v16 & ((v25 & 0x30) == 0);
      if ((v12 & 1) != 0 && (v13 & 1) != 0 && !v16)
        goto LABEL_62;
    }
    ++v14;
    v15 -= 8;
  }
  while (v15);
  if (v77)
  {
    v27 = (uint64_t *)v76;
    v28 = v13 | v12;
    if ((v13 & 1) != 0)
      v29 = 66;
    else
      v29 = 44;
    if ((v12 & 1) != 0)
      v29 = 45;
    v55 = v29;
    v30 = 8 * v77;
    do
    {
      v31 = *v27;
      if ((v16 & 1) != 0)
      {
        v32 = *(_QWORD *)(v31 + 112);
        if (v32)
          LODWORD(v32) = (*(unsigned __int8 *)(v32 + 12) >> 3) & 1;
        if (((v32 ^ 1) & v28) == 1)
        {
          *(_QWORD *)(v31 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v31 + 112), **(uint64_t ***)v31, -1, 3);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v57, v31);
        }
      }
      if ((v12 & v13 & 1) == 0)
      {
        v33 = *(_QWORD *)(v31 + 112);
        if (!v33
          || (*(_BYTE *)(v33 + 17) & 0x10) == 0
          && (v12 & ((*(_BYTE *)(v33 + 17) & 0x20) >> 5) & 1) == 0
          && (v13 & ((*(_BYTE *)(v33 + 20) & 4) >> 2) & 1) == 0)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v57, v31);
          v64[0] = 0;
          v64[1] = 0;
          v63 = v64;
          v62 = xmmword_1C8660290;
          if ((v28 & 1) == 0)
            *(_QWORD *)&v62 = 0x300000001808;
          llvm::Function::removeFnAttrs(v31, (uint64_t)&v62);
          *(_QWORD *)(v31 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v31 + 112), **(uint64_t ***)v31, -1, v55);
          sub_1C5010E9C((uint64_t)&v63, v64[0]);
        }
      }
      ++v27;
      v30 -= 8;
    }
    while (v30);
  }
LABEL_62:
  sub_1C56CD658((uint64_t)&v68, (llvm::SmallPtrSetImplBase *)&v57);
  sub_1C56CE1F8(&v68, (llvm::SmallPtrSetImplBase *)&v57);
  sub_1C56CE5C0((llvm::GlobalValue **)v76, v77, (llvm::SmallPtrSetImplBase *)&v57);
  sub_1C56CEA10((llvm::GlobalValue **)v76, v77, (llvm::SmallPtrSetImplBase *)&v57);
  if (!v78[64])
  {
    sub_1C56CED08((uint64_t)&v68, (llvm::SmallPtrSetImplBase *)&v57);
    sub_1C56CF204((uint64_t)&v68, (llvm::SmallPtrSetImplBase *)&v57);
    sub_1C56CF78C((uint64_t)&v68, (llvm::SmallPtrSetImplBase *)&v57);
    sub_1C56CFC24((uint64_t)v76, v77, (llvm::SmallPtrSetImplBase *)&v57);
  }
  sub_1C56D00D8((uint64_t)&v68, (llvm::SmallPtrSetImplBase *)&v57);
  a4 = v54;
  if (v77)
  {
    v35 = (llvm **)v76;
    v36 = 8 * v77;
    do
    {
      v37 = *v35;
      if (*v35 && llvm::inferAttributesFromOthers(*v35, v34))
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v57, (uint64_t)v37);
      ++v35;
      v36 -= 8;
    }
    while (v36);
  }
LABEL_70:
  if (v76 != v78)
    free(v76);
  if ((v68 & 1) == 0)
    MEMORY[0x1CAA32FB4](v69, 8);
  if (HIDWORD(v59) == v60)
  {
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  else
  {
    v68 = v72;
    v69 = v72;
    v70 = 2;
    v71 = 0;
    v73 = &v77;
    v74 = &v77;
    v75 = 2;
    LODWORD(v76) = 0;
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)&v68, (uint64_t)&llvm::CFGAnalyses::SetKey);
    if (v58 == v57)
      v38 = (uint64_t *)((char *)&v59 + 4);
    else
      v38 = &v59;
    v39 = *(unsigned int *)v38;
    if ((_DWORD)v39)
    {
      v40 = 8 * v39;
      v41 = v58;
      while ((unint64_t)*v41 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v41;
        v40 -= 8;
        if (!v40)
          goto LABEL_104;
      }
    }
    else
    {
      v41 = v58;
    }
    v42 = (char *)&v58[v39];
    if (v41 != (uint64_t *)v42)
    {
      v43 = *v41;
LABEL_87:
      llvm::AnalysisManager<llvm::Function>::invalidate(v56, v43, (uint64_t)&v68);
      for (i = *(_QWORD *)(v43 + 8); i; i = *(_QWORD *)(i + 8))
      {
        v45 = *(_QWORD *)(i + 24);
        v46 = *(unsigned __int8 *)(v45 + 16);
        if (v46 >= 0x1C)
        {
          v47 = v46 - 33;
          v48 = v47 > 0x33;
          v49 = (1 << v47) & 0x8000000000041;
          if (!v48 && v49 != 0)
          {
            v51 = *(_QWORD *)(v45 - 32);
            if (!v51 || *(_BYTE *)(v51 + 16) || *(_QWORD *)(v51 + 24) != *(_QWORD *)(v45 + 72))
              v51 = 0;
            if (v51 == v43)
              llvm::AnalysisManager<llvm::Function>::invalidate(v56, *(_QWORD *)(*(_QWORD *)(v45 + 40) + 56), (uint64_t)&v68);
          }
        }
      }
      v52 = (unint64_t *)(v41 + 1);
      while (v52 != (unint64_t *)v42)
      {
        v53 = *v52++;
        v43 = v53;
        if (v53 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v41 = (uint64_t *)(v52 - 1);
          goto LABEL_87;
        }
      }
    }
LABEL_104:
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    sub_1C4DDB144(a4, (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key);
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
    if (v74 != v73)
      free(v74);
    if (v69 != v68)
      free(v69);
  }
  if (v58 != v57)
    free(v58);
  if (v65 != v67)
    free(v65);
}

void llvm::initializePostOrderFunctionAttrsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E70);
  if (v2 != -1)
  {
    v5[0] = sub_1C56CBFD8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E70, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56CBFD8(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeCallGraphWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Deduce function attributes";
  *(_QWORD *)(v3 + 8) = 26;
  *(_QWORD *)(v3 + 16) = "function-attrs";
  *(_QWORD *)(v3 + 24) = 14;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F32B0;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C56CC9E8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C56CC074(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32B0;
  *(_DWORD *)(a1 + 24) = 3;
  *(_QWORD *)a1 = &off_1E8179A90;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831E70);
  if (v3 != -1)
  {
    v7[0] = sub_1C56CBFD8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831E70, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::initializeReversePostOrderFunctionAttrsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E78);
  if (v2 != -1)
  {
    v5[0] = sub_1C56CC19C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E78, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56CC19C(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeCallGraphWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Deduce function attributes in RPO";
  *(_QWORD *)(v3 + 8) = 33;
  *(_QWORD *)(v3 + 16) = "rpo-function-attrs";
  *(_QWORD *)(v3 + 24) = 18;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F32B1;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C56D3888;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C56CC230(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32B1;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8179EE0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831E78);
  if (v3 != -1)
  {
    v7[0] = sub_1C56CC19C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831E78, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::ReversePostOrderFunctionAttrsPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  char v5;

  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::CallGraphAnalysis::Key, a1);
  v5 = sub_1C56CC380(*(_QWORD *)(ResultImpl + 88));
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v5 & 1) != 0)
    return sub_1C4DDB144(a3, (uint64_t)&llvm::CallGraphAnalysis::Key);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C56CC380(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25[2];
  void *v26[2];
  __int128 v27;
  void *__p[2];
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[17];

  v32[16] = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = v32;
  v31 = 0x1000000000;
  LODWORD(v21) = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v27 = 0u;
  *(_OWORD *)__p = 0u;
  sub_1C4DE3A20((int *)&v21, a1);
  while (1)
  {
    sub_1C4DE3CBC(&v21);
    v1 = v26[1];
    if (v26[1] == (void *)v27)
      break;
    if ((_QWORD)v27 - (unint64_t)v26[1] == 8)
    {
      v2 = *(_QWORD *)(*(_QWORD *)v26[1] + 8);
      if (v2)
      {
        if (*(_BYTE *)(v2 + 16))
        {
          if (*(_BYTE *)(v2 + 16) != 3 || (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) != 0)
            goto LABEL_11;
        }
        else if (*(_QWORD *)(v2 + 72) != v2 + 72 || (*(_BYTE *)(v2 + 34) & 0x80) != 0)
        {
LABEL_11:
          v3 = *(_QWORD *)(v2 + 112);
          if ((!v3 || (*(_BYTE *)(v3 + 15) & 0x40) == 0) && (*(_DWORD *)(v2 + 32) & 0xF) == 7)
          {
            v4 = v31;
            if (v31 >= (unint64_t)HIDWORD(v31))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v31 + 1, 8);
              v4 = v31;
            }
            *((_QWORD *)v30 + v4) = v2;
            LODWORD(v31) = v31 + 1;
          }
        }
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    v1 = v26[1];
  }
  if (v1)
  {
    *(_QWORD *)&v27 = v1;
    operator delete(v1);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  MEMORY[0x1CAA32FB4](v22, 8);
  v5 = (char *)v30;
  if ((_DWORD)v31)
  {
    v6 = 0;
    v7 = (char *)v30 + 8 * v31;
    do
    {
      v9 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      v8 = v9;
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        while (1)
        {
          v11 = *(_QWORD *)(v10 + 24);
          v12 = *(unsigned __int8 *)(v11 + 16);
          if (!v11 || v12 < 0x1C)
            break;
          v14 = v12 - 33;
          v15 = v14 > 0x33;
          v16 = (1 << v14) & 0x8000000000041;
          if (v15 || v16 == 0)
            break;
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 56) + 112);
          if (!v18 || (*(_BYTE *)(v18 + 15) & 0x40) == 0)
            break;
          v10 = *(_QWORD *)(v10 + 8);
          if (!v10)
            goto LABEL_38;
        }
        v19 = 0;
      }
      else
      {
LABEL_38:
        *(_QWORD *)(v8 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v8 + 112), **(uint64_t ***)v8, -1, 30);
        v19 = 1;
      }
      v6 |= v19;
    }
    while (v7 != v5);
    v5 = (char *)v30;
  }
  else
  {
    v6 = 0;
  }
  if (v5 != (char *)v32)
    free(v5);
  return v6 & 1;
}

uint64_t sub_1C56CC5F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD), uint64_t a4)
{
  int v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  v8 = sub_1C56CC73C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a1, &v22);
  v9 = sub_1C56CC7D8(a2, &v21);
  if (v8)
    return v9[1];
  v9[1] = 0;
  v10 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v11 = (uint64_t *)v10[3];
  v12 = v10[4] - (_QWORD)v11;
  if (!v12)
    goto LABEL_24;
  v13 = 0;
  v14 = 8 * (v12 >> 3);
  do
  {
    v15 = v13;
    v16 = *v11;
    v17 = *(_WORD *)(*v11 + 12);
    if ((v17 & 0x80) == 0)
      goto LABEL_16;
    v18 = *(_DWORD *)(v16 + 8);
    v13 = *v11;
    if (!v18)
    {
      v13 = *(_QWORD *)(v16 + 72);
      v18 = *(_DWORD *)(v13 + 8);
    }
    if (v18 != 1 || (*(_BYTE *)(v13 + 69) & 1) != 0)
      return 0;
    v19 = v17 & 0xF;
    if ((v19 - 7) > 1)
    {
      if ((v19 - 2) >= 4)
      {
        if (!v19)
        {
LABEL_21:
          if (v15)
            v13 = v15;
          goto LABEL_23;
        }
      }
      else if ((a3(a4, *v10) & 1) != 0)
      {
        goto LABEL_21;
      }
LABEL_16:
      v13 = v15;
      goto LABEL_17;
    }
    if (v15)
      return 0;
LABEL_17:
    ++v11;
    v14 -= 8;
  }
  while (v14);
  if (!v13)
    goto LABEL_24;
LABEL_23:
  sub_1C56CC7D8(a2, &v21)[1] = v13;
LABEL_24:
  v9 = sub_1C56CC7D8(a2, &v21);
  return v9[1];
}

uint64_t sub_1C56CC73C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (a2 - 1) & a3 & 0xFFFFFFF8;
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6 & 0xFFFFFFFFFFFFFFF8;
    if ((a3 & 0xFFFFFFFFFFFFFFF8) == v7)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -16;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6 & 0xFFFFFFFFFFFFFFF8;
        v8 = 1;
        if ((a3 & 0xFFFFFFFFFFFFFFF8) == v7)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t *sub_1C56CC7D8(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C56CC73C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C56CC8B4(a1, v7);
    v8 = 0;
    sub_1C56CC73C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if ((~*result & 0xFFFFFFFFFFFFFFF8) != 0)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

_QWORD *sub_1C56CC8B4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -8;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((~*v13 & 0xFFFFFFFFFFFFFFF0) != 0)
        {
          v19 = 0;
          sub_1C56CC73C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          v16 = v13[1];
          *v19 = *v13;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    do
    {
      *result = -8;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

uint64_t sub_1C56CC9E8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56CC074(v0);
}

void sub_1C56CCA14(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56CCA38(llvm::CallGraphSCCPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage *v4;

  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  llvm::getAAResultsAnalysisUsage(this, v4);
  return llvm::CallGraphSCCPass::getAnalysisUsage(a1, this);
}

BOOL sub_1C56CCA98(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  llvm::Function *v10;
  int v11;
  int v12;
  llvm::Pass **v13;
  uint64_t v14;
  int v15;
  llvm::Pass *v16;
  uint64_t v17;
  int v18;
  int v19;
  llvm::GlobalValue *Section;
  uint64_t v21;
  llvm::Module *v22;
  _BOOL4 v23;
  int v24;
  BOOL v25;
  uint64_t *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Function *v33;
  llvm **v34;
  uint64_t v35;
  llvm *v36;
  int v37;
  int v38;
  int v40;
  uint64_t v41;
  char v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  char v47;
  _BYTE v48[56];
  char v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  int v53;
  _BYTE v54[64];
  __int128 v55;
  _QWORD **v56;
  _QWORD *v57[3];
  void *v58;
  uint64_t v59;
  _BYTE v60[64];
  int v61;
  uint64_t v62;
  llvm::GlobalValue **v63;
  unsigned int v64;
  _BYTE v65[72];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if ((llvm::CallGraphSCCPass::skipSCC(a1, (uint64_t ****)a2) & 1) != 0)
    return 0;
  v41 = a1;
  v42 = 0;
  v47 = 0;
  v48[0] = 0;
  v49 = 0;
  v58 = v60;
  v59 = 0x800000000;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  if (v5 == v6)
  {
    v7 = 0;
    v9 = (uint64_t *)v60;
  }
  else
  {
    LODWORD(v7) = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      if (v7 >= HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v7 + 1, 8);
        LODWORD(v7) = v59;
      }
      *((_QWORD *)v58 + v7) = v8;
      v7 = (v59 + 1);
      LODWORD(v59) = v59 + 1;
      v5 += 8;
    }
    while (v5 != v6);
    v9 = (uint64_t *)v58;
  }
  sub_1C56CD028((uint64_t)&v61, v9, v7);
  v50 = v54;
  v51 = v54;
  v52 = 8;
  v53 = 0;
  if (!v64)
    goto LABEL_72;
  sub_1C56CD384(v63, v64, (llvm::SmallPtrSetImplBase *)&v50);
  if (!v64)
    goto LABEL_64;
  v11 = 0;
  v12 = 0;
  v13 = v63;
  v14 = 8 * v64;
  LOBYTE(v15) = 1;
  do
  {
    v16 = *v13;
    v17 = sub_1C567475C((uint64_t)&v41, *v13, v10);
    v18 = *((unsigned __int8 *)v16 + 16);
    if (*((_BYTE *)v16 + 16))
    {
      if (v18 == 3 && (*((_DWORD *)v16 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_19;
    }
    else if (*((llvm::Pass **)v16 + 9) == (llvm::Pass *)((char *)v16 + 72) && (*((_BYTE *)v16 + 34) & 0x80) == 0)
    {
LABEL_19:
      v19 = 0;
      goto LABEL_28;
    }
    v19 = 0;
    if (((1 << (*((_DWORD *)v16 + 8) & 0xF)) & 0x7D5) != 0)
    {
      if (v18 == 3
        && (Section = llvm::GlobalValue::getSection(v16), v21 == 12)
        && (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
          ? (v25 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
          : (v25 = 0),
            v25))
      {
        v23 = 1;
      }
      else if ((*((_DWORD *)v16 + 8) & 0xFu) - 5 < 4 || (v23 = 1, ((1 << (*((_DWORD *)v16 + 8) & 0xF)) & 0x614) == 0))
      {
        v22 = (llvm::Module *)*((_QWORD *)v16 + 5);
        v23 = v22 && llvm::Module::getSemanticInterposition(v22) && (*((_BYTE *)v16 + 33) & 0x40) == 0;
      }
      v19 = !v23;
    }
LABEL_28:
    v24 = sub_1C56CAD08((uint64_t)v16, v19, v17, (uint64_t)&v61);
    if (v24 != 4)
    {
      v11 |= v24;
      v12 |= (v24 & 2) >> 1;
      v15 = v15 & ((v24 & 0x30) == 0);
      if ((v11 & 1) != 0 && (v12 & 1) != 0 && !v15)
        goto LABEL_64;
    }
    ++v13;
    v14 -= 8;
  }
  while (v14);
  if (v64)
  {
    v26 = (uint64_t *)v63;
    v27 = v12 | v11;
    if ((v12 & 1) != 0)
      v28 = 66;
    else
      v28 = 44;
    if ((v11 & 1) != 0)
      v28 = 45;
    v40 = v28;
    v29 = 8 * v64;
    do
    {
      v30 = *v26;
      if ((v15 & 1) != 0)
      {
        v31 = *(_QWORD *)(v30 + 112);
        if (v31)
          LODWORD(v31) = (*(unsigned __int8 *)(v31 + 12) >> 3) & 1;
        if (((v31 ^ 1) & v27) == 1)
        {
          *(_QWORD *)(v30 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v30 + 112), **(uint64_t ***)v30, -1, 3);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v50, v30);
        }
      }
      if ((v11 & v12 & 1) == 0)
      {
        v32 = *(_QWORD *)(v30 + 112);
        if (!v32
          || (*(_BYTE *)(v32 + 17) & 0x10) == 0
          && (v11 & ((*(_BYTE *)(v32 + 17) & 0x20) >> 5) & 1) == 0
          && (v12 & ((*(_BYTE *)(v32 + 20) & 4) >> 2) & 1) == 0)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v50, v30);
          v57[0] = 0;
          v57[1] = 0;
          v56 = v57;
          v55 = xmmword_1C8660290;
          if ((v27 & 1) == 0)
            *(_QWORD *)&v55 = 0x300000001808;
          llvm::Function::removeFnAttrs(v30, (uint64_t)&v55);
          *(_QWORD *)(v30 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v30 + 112), **(uint64_t ***)v30, -1, v40);
          sub_1C5010E9C((uint64_t)&v56, v57[0]);
        }
      }
      ++v26;
      v29 -= 8;
    }
    while (v29);
  }
LABEL_64:
  sub_1C56CD658((uint64_t)&v61, (llvm::SmallPtrSetImplBase *)&v50);
  sub_1C56CE1F8(&v61, (llvm::SmallPtrSetImplBase *)&v50);
  sub_1C56CE5C0(v63, v64, (llvm::SmallPtrSetImplBase *)&v50);
  sub_1C56CEA10(v63, v64, (llvm::SmallPtrSetImplBase *)&v50);
  if (!v65[64])
  {
    sub_1C56CED08((uint64_t)&v61, (llvm::SmallPtrSetImplBase *)&v50);
    sub_1C56CF204((uint64_t)&v61, (llvm::SmallPtrSetImplBase *)&v50);
    sub_1C56CF78C((uint64_t)&v61, (llvm::SmallPtrSetImplBase *)&v50);
    sub_1C56CFC24((uint64_t)v63, v64, (llvm::SmallPtrSetImplBase *)&v50);
  }
  sub_1C56D00D8((uint64_t)&v61, (llvm::SmallPtrSetImplBase *)&v50);
  if (v64)
  {
    v34 = v63;
    v35 = 8 * v64;
    do
    {
      v36 = *v34;
      if (*v34 && llvm::inferAttributesFromOthers(*v34, v33))
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v50, (uint64_t)v36);
      ++v34;
      v35 -= 8;
    }
    while (v35);
  }
LABEL_72:
  if (v63 != (llvm::GlobalValue **)v65)
    free(v63);
  if ((v61 & 1) == 0)
    MEMORY[0x1CAA32FB4](v62, 8);
  v37 = HIDWORD(v52);
  v38 = v53;
  if (v51 != v50)
    free(v51);
  if (v58 != v60)
    free(v58);
  v4 = v37 != v38;
  if (v49)
  {
    llvm::AAResults::~AAResults((llvm::AAResults *)v48);
    v49 = 0;
  }
  if (v47)
  {
    if (v46 != v45)
      free(v46);
    if (v44 != v43)
      free(v44);
  }
  return v4;
}

void sub_1C56CD028(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int64x2_t v3;
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v22;
  uint64_t j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  *(_QWORD *)a1 = 1;
  v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 8) = v3;
  *(int64x2_t *)(a1 + 24) = v3;
  *(int64x2_t *)(a1 + 40) = v3;
  *(int64x2_t *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x800000000;
  *(_BYTE *)(a1 + 152) = 0;
  if (a3)
  {
    v4 = a2;
    v6 = &a2[a3];
    while (1)
    {
      v7 = *v4;
      v37 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 112);
        if (!v8)
          goto LABEL_29;
        if ((*(_BYTE *)(v8 + 17) & 8) == 0 && (*(_BYTE *)(v8 + 14) & 2) == 0)
          break;
      }
LABEL_28:
      *(_BYTE *)(a1 + 152) = 1;
LABEL_31:
      if (++v4 == v6)
        return;
    }
    if (*(_DWORD *)(v8 + 8))
    {
      v9 = *(_QWORD *)(v8 + 40);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 + 40);
        if (v10)
        {
          v11 = *(_QWORD *)(v9 + 24);
          v12 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
          {
            v36 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v36 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v36;
            __cxa_guard_release(&qword_1ED7EAC88);
          }
          v13 = __ROR8__(qword_1ED7EAC80 ^ 0x7A48DC6FE7EA5090, 30);
          v14 = 0x9DDFEA08EB382D69
              * ((qword_1ED7EAC80 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                            * ((v13 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80
                                                                                             - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v13 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80 - 0x2D69957673248ED7))));
          v15 = -348639895 * ((v14 >> 47) ^ v14);
          for (i = 1; ; ++i)
          {
            v17 = v15 & (v10 - 1);
            v18 = (uint64_t *)(v11 + 24 * v17);
            v19 = *v18;
            if (*v18 == -1)
            {
              if ("coroutine.presplit" == (char *)-1)
                goto LABEL_28;
            }
            else if (v19 == -2)
            {
              if ("coroutine.presplit" == (char *)-2)
                goto LABEL_28;
            }
            else if (v18[1] == 18)
            {
              v20 = *(_QWORD *)v19 == 0x6E6974756F726F63 && *(_QWORD *)(v19 + 8) == 0x6C70736572702E65;
              if (v20 && *(_WORD *)(v19 + 16) == 29801)
                goto LABEL_28;
            }
            if (v19 == -1)
              break;
            v15 = i + v17;
          }
        }
      }
    }
LABEL_29:
    if (!*(_BYTE *)(a1 + 152))
    {
      v22 = v37 + 72;
      for (j = *(_QWORD *)(v37 + 80); j != v22; j = *(_QWORD *)(j + 8))
      {
        v24 = j - 24;
        if (!j)
          v24 = 0;
        v25 = v24 + 40;
        v26 = *(_QWORD *)(v24 + 48);
        if (v26 != v25)
        {
          while (1)
          {
            v27 = v26 - 24;
            if (!v26)
              v27 = 0;
            v28 = *(unsigned __int8 *)(v27 + 16) - 33;
            v29 = v28 > 0x33;
            v30 = (1 << v28) & 0x8000000000041;
            if (!v29 && v30 != 0)
            {
              v32 = *(_QWORD *)(v26 - 56);
              if (!v32 || *(_BYTE *)(v32 + 16) || *(_QWORD *)(v32 + 24) != *(_QWORD *)(v26 + 48))
                break;
            }
            v26 = *(_QWORD *)(v26 + 8);
            v33 = j - 24;
            if (!j)
              v33 = 0;
            v34 = v33 + 40;
            while (v26 == v34)
            {
              j = *(_QWORD *)(j + 8);
              if (j == v22)
                goto LABEL_30;
              v35 = j - 24;
              if (!j)
                v35 = 0;
              v34 = v35 + 40;
              v26 = *(_QWORD *)(v35 + 48);
            }
            if (j == v22)
              goto LABEL_30;
          }
          *(_BYTE *)(a1 + 152) = 1;
          break;
        }
      }
    }
LABEL_30:
    sub_1C567A2A0(a1, &v37);
    goto LABEL_31;
  }
}

void sub_1C56CD384(llvm::GlobalValue **a1, int a2, llvm::SmallPtrSetImplBase *a3)
{
  llvm::GlobalValue **v4;
  llvm::GlobalValue **v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  llvm::GlobalValue *Section;
  uint64_t v10;
  llvm::Module *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v26;
  llvm::Value *v27;
  uint64_t v28;
  BOOL v29;

  if (a2)
  {
    v4 = a1;
    v5 = &a1[a2];
    do
    {
      v6 = (uint64_t)*v4;
      v7 = *((unsigned __int8 *)*v4 + 16);
      if (*v4)
        v8 = v7 == 3;
      else
        v8 = 0;
      if (v8)
      {
        if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_58;
      }
      else if (!*((_BYTE *)*v4 + 16) && *(_QWORD *)(v6 + 72) == v6 + 72 && (*(_BYTE *)(v6 + 34) & 0x80) == 0)
      {
        goto LABEL_58;
      }
      if (((1 << (*(_DWORD *)(v6 + 32) & 0xF)) & 0x7D5) != 0)
      {
        if (v7 != 3
          || (Section = llvm::GlobalValue::getSection(*v4), v10 != 12)
          || (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
            ? (v29 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
            : (v29 = 0),
              !v29))
        {
          if ((*(_DWORD *)(v6 + 32) & 0xFu) - 5 < 4 || ((1 << (*(_DWORD *)(v6 + 32) & 0xF)) & 0x614) == 0)
          {
            v11 = *(llvm::Module **)(v6 + 40);
            if ((!v11 || !llvm::Module::getSemanticInterposition(v11) || (*(_BYTE *)(v6 + 33) & 0x40) != 0)
              && *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v6 + 24) + 16) + 8) != 7)
            {
              if ((*(_WORD *)(v6 + 18) & 1) == 0)
              {
                v12 = *(_QWORD *)(v6 + 88);
                goto LABEL_21;
              }
              llvm::Function::BuildLazyArguments((llvm::Function *)v6);
              v12 = *(_QWORD *)(v6 + 88);
              if ((*(_WORD *)(v6 + 18) & 1) != 0)
              {
                llvm::Function::BuildLazyArguments((llvm::Function *)v6);
                v13 = *(_QWORD *)(v6 + 88);
              }
              else
              {
LABEL_21:
                v13 = v12;
              }
              v14 = v13 + 40 * *(_QWORD *)(v6 + 96);
              while (v12 != v14)
              {
                v15 = *(_QWORD *)(*(_QWORD *)(v12 + 24) + 112);
                if (v15)
                {
                  v16 = *(_DWORD *)(v12 + 32) + 2;
                  if (v16 < *(_DWORD *)(v15 + 8))
                  {
                    v17 = *(_QWORD *)(v15 + 8 * v16 + 40);
                    if (v17)
                    {
                      if ((*(_BYTE *)(v17 + 17) & 0x40) != 0)
                        goto LABEL_58;
                    }
                  }
                }
                v12 += 40;
              }
              v18 = *(_QWORD *)(v6 + 80);
              if (v18 != v6 + 72)
              {
                v19 = 0;
                while (1)
                {
                  v20 = v19;
                  v21 = v18 - 24;
                  if (!v18)
                    v21 = 0;
                  v22 = *(_QWORD *)(v21 + 40);
                  if (v22 != v21 + 40)
                  {
                    v23 = v22 - 24;
                    if (!v22)
                      v23 = 0;
                    v24 = *(unsigned __int8 *)(v23 + 16) - 40;
                    if (v24 < 0xFFFFFFF5)
                      v23 = 0;
                    if (v22)
                    {
                      if (*(_BYTE *)(v23 + 16) == 29 && v24 >= 0xFFFFFFF5)
                      {
                        v26 = *(_DWORD *)(v23 + 20) & 0x7FFFFFF;
                        v27 = (_DWORD)v26 ? *(llvm::Value **)(v23 - 32 * v26) : 0;
                        v19 = llvm::Value::stripPointerCasts(v27);
                        if (*((_BYTE *)v19 + 16) != 21)
                          break;
                        if (*(_QWORD *)v19 != **(_QWORD **)(*(_QWORD *)(v6 + 24) + 16))
                          break;
                        if (v20)
                        {
                          v8 = v20 == v19;
                          v19 = v20;
                          if (!v8)
                            break;
                        }
                      }
                    }
                  }
                  v18 = *(_QWORD *)(v18 + 8);
                  if (v18 == v6 + 72)
                  {
                    if (v19)
                    {
                      v28 = *((_QWORD *)v19 + 3);
                      *(_QWORD *)(v28 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v28 + 112), **(uint64_t ***)v28, *((_DWORD *)v19 + 8) + 1, 46);
                      sub_1C4774094(a3, v6);
                    }
                    break;
                  }
                }
              }
            }
          }
        }
      }
LABEL_58:
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_1C56CD658(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  llvm::SmallPtrSetImplBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  llvm::GlobalValue *Section;
  uint64_t v10;
  llvm::Module *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  BOOL v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  llvm::Value *PersonalityFn;
  const llvm::Value *v53;
  uint64_t v54;
  llvm::Argument *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  char *v60;
  unint64_t *v61;
  char *v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  llvm::Argument *v69;
  llvm::Argument *v70;
  uint64_t v71;
  BOOL v72;
  uint64_t **v73;
  llvm::Argument ***v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  llvm::Argument ***v80;
  char hasNoCaptureAttr;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t **v84;
  uint64_t v85;
  llvm::Argument ***v86;
  uint64_t v87;
  llvm::Argument *v88;
  char *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t **v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  llvm::Argument ***v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  char v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  char *v111;
  char *v112;
  uint64_t v113;
  int v114;
  _BYTE v115[64];
  void **v116;
  void **v117;
  void *v118;
  uint64_t v119;
  void *v120[2];
  __int128 v121;
  __int128 v122;
  void *__p[2];
  uint64_t v124;
  uint64_t *v125;
  _QWORD *v126[2];
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD v130[6];

  v2 = a2;
  v130[4] = *MEMORY[0x1E0C80C00];
  v125 = (uint64_t *)v126;
  v126[0] = 0;
  v127 = 0;
  v128 = v130;
  v129 = 0x400000000;
  v126[1] = 0;
  v3 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v3)
  {
    v4 = a1;
    v5 = *(uint64_t **)(a1 + 72);
    v108 = &v5[v3];
    do
    {
      v109 = v5;
      v6 = *v5;
      v7 = *(unsigned __int8 *)(*v5 + 16);
      if (*v5)
        v8 = v7 == 3;
      else
        v8 = 0;
      if (v8)
      {
        if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_146;
      }
      else if (!*(_BYTE *)(*v5 + 16) && *(_QWORD *)(v6 + 72) == v6 + 72 && (*(_BYTE *)(v6 + 34) & 0x80) == 0)
      {
        goto LABEL_146;
      }
      if (((1 << (*(_DWORD *)(v6 + 32) & 0xF)) & 0x7D5) != 0)
      {
        if (v7 != 3
          || (Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v6), v10 != 12)
          || (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
            ? (v72 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
            : (v72 = 0),
              !v72))
        {
          if ((*(_DWORD *)(v6 + 32) & 0xFu) - 5 < 4 || ((1 << (*(_DWORD *)(v6 + 32) & 0xF)) & 0x614) == 0)
          {
            v11 = *(llvm::Module **)(v6 + 40);
            if (!v11 || !llvm::Module::getSemanticInterposition(v11) || (*(_BYTE *)(v6 + 33) & 0x40) != 0)
            {
              if (byte_1ED80A350)
              {
                v12 = *(_QWORD *)(v6 + 80);
                v13 = v12 ? v12 - 24 : 0;
                v14 = v13 + 40;
                v15 = *(_QWORD *)(v13 + 48);
                if (v15 != v13 + 40)
                {
                  v106 = 0;
                  do
                  {
                    if (v15)
                      v16 = v15 - 24;
                    else
                      v16 = 0;
                    v17 = *(unsigned __int8 *)(v16 + 16);
                    if ((v17 - 33) <= 0x33
                      && ((1 << (v17 - 33)) & 0x8000000000041) != 0)
                    {
                      v19 = *(_QWORD *)(v15 - 56);
                      if (v19 && !*(_BYTE *)(v19 + 16) && *(_QWORD *)(v19 + 24) == *(_QWORD *)(v15 + 48))
                      {
                        if ((*(_WORD *)(v19 + 18) & 1) == 0)
                        {
                          v20 = *(_QWORD *)(v19 + 88);
                          goto LABEL_44;
                        }
                        llvm::Function::BuildLazyArguments(*(llvm::Function **)(v15 - 56));
                        v20 = *(_QWORD *)(v19 + 88);
                        if ((*(_WORD *)(v19 + 18) & 1) != 0)
                        {
                          llvm::Function::BuildLazyArguments((llvm::Function *)v19);
                          v21 = *(_QWORD *)(v19 + 88);
                        }
                        else
                        {
LABEL_44:
                          v21 = v20;
                        }
                        v22 = v21 + 40 * *(_QWORD *)(v19 + 96);
                        while (2)
                        {
                          if (v20 == v22)
                            goto LABEL_34;
                          v23 = *(_DWORD *)(*(_QWORD *)v20 + 8);
                          if (v23 != 15)
                            goto LABEL_50;
                          v24 = *(_QWORD *)(v20 + 24);
                          v25 = *(_QWORD *)(v24 + 112);
                          if (!v25)
                            goto LABEL_50;
                          v26 = *(unsigned int *)(v20 + 32);
                          if ((v26 + 2) >= *(_DWORD *)(v25 + 8))
                            goto LABEL_50;
                          v27 = *(_QWORD *)(v25 + 8 * (v26 + 2) + 40);
                          if (!v27)
                            goto LABEL_50;
                          v28 = *(char *)(v27 + 16);
                          if (v28 < 0 && (v28 & 0x10) != 0)
                            goto LABEL_69;
                          if ((*(_BYTE *)(v27 + 21) & 0x10) == 0)
                            goto LABEL_50;
                          v29 = (_QWORD *)(v27 + 48);
                          v30 = 8 * *(unsigned int *)(v27 + 8) - 8 * *(unsigned int *)(v27 + 32);
                          if (v30)
                          {
                            v31 = v30 >> 3;
                            do
                            {
                              v32 = v31 >> 1;
                              v33 = &v29[v31 >> 1];
                              v34 = *v33;
                              if (*v33)
                                LODWORD(v34) = *(_DWORD *)(v34 + 12);
                              v35 = v33 + 1;
                              v31 += ~v32;
                              if ((int)v34 < 76)
                                v29 = v35;
                              else
                                v31 = v32;
                            }
                            while (v31);
                          }
                          if (!*(_QWORD *)(*v29 + 16))
                            goto LABEL_50;
                          if ((v23 & 0xFE) == 0x12)
                          {
                            v23 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v20 + 16) + 8);
                            if (!v24)
                              goto LABEL_66;
LABEL_65:
                            if ((*(_BYTE *)(v25 + 17) & 1) == 0)
                              goto LABEL_66;
                            goto LABEL_50;
                          }
                          if (v24)
                            goto LABEL_65;
LABEL_66:
                          if (v23 > 0xFF)
                            goto LABEL_50;
LABEL_69:
                          v36 = *(uint64_t **)(v15 - 24 - 32 * (*(_DWORD *)(v15 - 4) & 0x7FFFFFF) + 32 * v26);
                          if (v36)
                            v37 = *((_BYTE *)v36 + 16) == 21;
                          else
                            v37 = 0;
                          if (!v37)
                            goto LABEL_50;
                          v38 = *v36;
                          v39 = *(_DWORD *)(*v36 + 8);
                          v40 = v36[3];
                          v41 = *((_DWORD *)v36 + 8);
                          if (v39 != 15
                            || (v42 = *(_QWORD *)(v40 + 112)) == 0
                            || (v41 + 2) >= *(_DWORD *)(v42 + 8)
                            || (v43 = *(_QWORD *)(v42 + 8 * (v41 + 2) + 40)) == 0)
                          {
LABEL_77:
                            *(_QWORD *)(v40 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v40 + 112), **(uint64_t ***)v40, v41 + 1, 39);
                            v106 = 1;
                            goto LABEL_50;
                          }
                          if (*(char *)(v43 + 16) < 0)
                            goto LABEL_50;
                          v44 = v40;
                          if ((*(_BYTE *)(v43 + 21) & 0x10) != 0)
                          {
                            v45 = (_QWORD *)(v43 + 48);
                            v46 = 8 * *(unsigned int *)(v43 + 8) - 8 * *(unsigned int *)(v43 + 32);
                            if (v46)
                            {
                              v47 = v46 >> 3;
                              do
                              {
                                v48 = v47 >> 1;
                                v49 = &v45[v47 >> 1];
                                v50 = *v49;
                                if (*v49)
                                  LODWORD(v50) = *(_DWORD *)(v50 + 12);
                                v51 = v49 + 1;
                                v47 += ~v48;
                                if ((int)v50 < 76)
                                  v45 = v51;
                                else
                                  v47 = v48;
                              }
                              while (v47);
                            }
                            if (*(_QWORD *)(*v45 + 16))
                            {
                              if ((v39 & 0xFE) != 0x12)
                              {
                                if (v44)
                                  goto LABEL_93;
LABEL_100:
                                if (v39 >= 0x100)
                                {
                                  v40 = 0;
                                  goto LABEL_77;
                                }
LABEL_50:
                                v20 += 40;
                                continue;
                              }
                              v39 = *(_DWORD *)(**(_QWORD **)(v38 + 16) + 8);
                              if (!v44)
                                goto LABEL_100;
LABEL_93:
                              if ((*(_BYTE *)(v42 + 17) & 1) == 0)
                              {
                                v40 = v44;
                                if (v39 > 0xFF)
                                  goto LABEL_77;
                                goto LABEL_50;
                              }
                            }
                          }
                          break;
                        }
                        v40 = v44;
                        goto LABEL_77;
                      }
LABEL_34:
                      v17 = *(unsigned __int8 *)(v16 + 16);
                    }
                    v2 = a2;
                    if (v17 == 29 || v17 == 35)
                      break;
                    if (v17 == 80)
                    {
                      PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(_QWORD *)(v16 + 40) + 56));
                      if (llvm::classifyEHPersonality(PersonalityFn, v53) != 10)
                        break;
                    }
                    else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v16) & 1) != 0
                           || (llvm::Instruction::willReturn((llvm::Instruction *)v16) & 1) == 0)
                    {
                      break;
                    }
                    v15 = *(_QWORD *)(v15 + 8);
                  }
                  while (v15 != v14);
                  if ((v106 & 1) != 0)
                    sub_1C4774094(a2, v6);
                }
              }
              v54 = *(_QWORD *)(v6 + 112);
              if (!v54
                || (*(_BYTE *)(v54 + 17) & 0x30) == 0
                || (*(_BYTE *)(v54 + 16) & 0x20) == 0
                || *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v6 + 24) + 16) + 8) != 7)
              {
                if ((*(_WORD *)(v6 + 18) & 1) != 0)
                {
                  llvm::Function::BuildLazyArguments((llvm::Function *)v6);
                  v56 = *(_QWORD *)(v6 + 88);
                  if ((*(_WORD *)(v6 + 18) & 1) != 0)
                    llvm::Function::BuildLazyArguments((llvm::Function *)v6);
                  v57 = *(_QWORD *)(v6 + 88);
                }
                else
                {
                  v56 = *(_QWORD *)(v6 + 88);
                  v57 = v56;
                }
                v58 = v57 + 40 * *(_QWORD *)(v6 + 96);
                while (2)
                {
                  if (v56 == v58)
                    goto LABEL_146;
                  if (*(_BYTE *)(*(_QWORD *)v56 + 8) == 15)
                  {
                    if ((llvm::Argument::hasNoCaptureAttr((llvm::Argument *)v56) & 1) != 0)
                      goto LABEL_125;
                    v116 = (void **)&off_1E8179B40;
                    LOBYTE(v117) = 0;
                    v118 = v120;
                    v119 = 0x400000000;
                    *(_QWORD *)&v122 = v4;
                    llvm::PointerMayBeCaptured((llvm *)v56, (const llvm::Value *)&v116, 0);
                    if ((_BYTE)v117)
                    {
LABEL_123:
                      v116 = (void **)&off_1E8179B40;
                      if (v118 != v120)
                        free(v118);
                      goto LABEL_125;
                    }
                    if (!(_DWORD)v119)
                    {
                      v68 = *(_QWORD *)(v56 + 24);
                      *(_QWORD *)(v68 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v68 + 112), **(uint64_t ***)v68, *(_DWORD *)(v56 + 32) + 1, 22);
                      sub_1C4774094(v2, v6);
                      goto LABEL_123;
                    }
                    v60 = sub_1C56D03C4(&v125, v56);
                    v61 = (unint64_t *)v118;
                    if ((_DWORD)v119)
                    {
                      v62 = v60;
                      v63 = 0;
                      v107 = (uint64_t)(v60 + 8);
                      v104 = (uint64_t)(v60 + 24);
                      v64 = 8 * v119;
                      do
                      {
                        v65 = *v61;
                        v66 = sub_1C56D03C4(&v125, *v61);
                        v67 = *((unsigned int *)v62 + 4);
                        if (v67 >= *((unsigned int *)v62 + 5))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod(v107, v104, v67 + 1, 8);
                          v67 = *((unsigned int *)v62 + 4);
                        }
                        *(_QWORD *)(*((_QWORD *)v62 + 1) + 8 * v67) = v66;
                        ++*((_DWORD *)v62 + 4);
                        v63 |= v65 != v56;
                        ++v61;
                        v64 -= 8;
                      }
                      while (v64);
                      v61 = (unint64_t *)v118;
                      v2 = a2;
                      v4 = a1;
                    }
                    else
                    {
                      v63 = 0;
                    }
                    v116 = (void **)&off_1E8179B40;
                    if (v61 != (unint64_t *)v120)
                      free(v61);
                    if ((v63 & 1) == 0)
                    {
LABEL_125:
                      if ((llvm::Argument::onlyReadsMemory((llvm::Argument *)v56) & 1) == 0)
                      {
                        v116 = v120;
                        v117 = v120;
                        v118 = (void *)8;
                        LODWORD(v119) = 0;
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v116, v56);
                        v59 = sub_1C56D052C((llvm::Argument *)v56, &v116);
                        if (v59 && sub_1C56D0BD8(v56, v59))
                          sub_1C4774094(v2, v6);
                        if (v117 != v116)
                          free(v117);
                      }
                    }
                  }
                  v56 += 40;
                  continue;
                }
              }
              if ((*(_WORD *)(v6 + 18) & 1) == 0)
              {
                v55 = *(llvm::Argument **)(v6 + 88);
                goto LABEL_149;
              }
              llvm::Function::BuildLazyArguments((llvm::Function *)v6);
              v55 = *(llvm::Argument **)(v6 + 88);
              if ((*(_WORD *)(v6 + 18) & 1) != 0)
              {
                llvm::Function::BuildLazyArguments((llvm::Function *)v6);
                v69 = *(llvm::Argument **)(v6 + 88);
              }
              else
              {
LABEL_149:
                v69 = v55;
              }
              v70 = (llvm::Argument *)((char *)v69 + 40 * *(_QWORD *)(v6 + 96));
              while (v55 != v70)
              {
                if (*(_BYTE *)(*(_QWORD *)v55 + 8) == 15 && (llvm::Argument::hasNoCaptureAttr(v55) & 1) == 0)
                {
                  v71 = *((_QWORD *)v55 + 3);
                  *(_QWORD *)(v71 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v71 + 112), **(uint64_t ***)v71, *((_DWORD *)v55 + 8) + 1, 22);
                  sub_1C4774094(v2, v6);
                }
                v55 = (llvm::Argument *)((char *)v55 + 40);
              }
            }
          }
        }
      }
LABEL_146:
      v5 = v109 + 1;
    }
    while (v109 + 1 != v108);
  }
  LODWORD(v116) = 0;
  v117 = 0;
  v118 = 0;
  LODWORD(v119) = 0;
  *(_OWORD *)v120 = 0u;
  v121 = 0u;
  v122 = 0u;
  *(_OWORD *)__p = 0u;
  v124 = 0;
  sub_1C56D0EE4((int *)&v116, (uint64_t)&v127);
  sub_1C56D10F4((uint64_t)&v116);
  v73 = (uint64_t **)*((_QWORD *)&v121 + 1);
  v74 = (llvm::Argument ***)v122;
  if (*((_QWORD *)&v121 + 1) != (_QWORD)v122)
  {
    while (1)
    {
      v75 = (char *)v74 - (char *)v73;
      if ((char *)v74 - (char *)v73 != 8)
        break;
      v76 = *v73;
      v77 = **v73;
      if (v77 && *((_DWORD *)v76 + 4) == 1 && *(uint64_t **)v76[1] == v76)
      {
        v78 = *(_QWORD *)(v77 + 24);
        *(_QWORD *)(v78 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v78 + 112), **(uint64_t ***)v78, *(_DWORD *)(v77 + 32) + 1, 22);
        sub_1C4774094(v2, *(_QWORD *)(v77 + 24));
        v111 = v115;
        v112 = v115;
        v113 = 8;
        v114 = 0;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v111, v77);
        v79 = sub_1C56D052C((llvm::Argument *)v77, &v111);
        if (v79)
          sub_1C56D0BD8(v77, v79);
LABEL_210:
        if (v112 != v111)
          free(v112);
      }
LABEL_212:
      sub_1C56D10F4((uint64_t)&v116);
      v73 = (uint64_t **)*((_QWORD *)&v121 + 1);
      v74 = (llvm::Argument ***)v122;
      if (*((_QWORD *)&v121 + 1) == (_QWORD)v122)
        goto LABEL_213;
    }
    v80 = (llvm::Argument ***)v73;
    if (v73 == (uint64_t **)v74)
    {
      v111 = v115;
      v112 = v115;
      v113 = 8;
      v114 = 0;
LABEL_193:
      if ((v75 & 0x7FFFFFFF8) != 0)
      {
        v91 = (v75 >> 3);
        v92 = v73;
        v93 = v91;
        do
        {
          v94 = *v92++;
          v95 = *v94;
          v96 = *(_QWORD *)(*v94 + 24);
          *(_QWORD *)(v96 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v96 + 112), **(uint64_t ***)v96, *(_DWORD *)(*v94 + 32) + 1, 22);
          sub_1C4774094(v2, *(_QWORD *)(v95 + 24));
          --v93;
        }
        while (v93);
        v97 = v91 - 1;
        v98 = 44;
        v99 = (llvm::Argument ***)v73;
        do
        {
          v100 = sub_1C56D052C(**v99, &v111);
          if ((_DWORD)v98 == (_DWORD)v100)
          {
            v101 = v98;
          }
          else
          {
            v101 = v100;
            if ((_DWORD)v98 != 44)
            {
              if ((_DWORD)v100 == 44)
                v101 = v98;
              else
                v101 = 0;
            }
          }
          if (v97-- == 0)
            break;
          ++v99;
          v98 = v101;
        }
        while ((_DWORD)v101);
        if ((_DWORD)v101)
        {
          do
          {
            v103 = **v73;
            if (sub_1C56D0BD8(v103, v101))
              sub_1C4774094(v2, *(_QWORD *)(v103 + 24));
            ++v73;
            --v91;
          }
          while (v91);
        }
      }
    }
    else
    {
      do
      {
        while (*((_DWORD *)*v80 + 4))
        {
          if (++v80 == v74)
            goto LABEL_179;
        }
        hasNoCaptureAttr = llvm::Argument::hasNoCaptureAttr(**v80++);
      }
      while (v80 != v74 && (hasNoCaptureAttr & 1) != 0);
      if ((hasNoCaptureAttr & 1) == 0)
        goto LABEL_212;
LABEL_179:
      v111 = v115;
      v112 = v115;
      v113 = 8;
      v82 = v73;
      v114 = 0;
      do
      {
        v83 = *v82++;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v111, *v83);
      }
      while (v82 != (uint64_t **)v74);
      v84 = v73;
      while (1)
      {
        v85 = *((unsigned int *)*v84 + 4);
        if ((_DWORD)v85)
          break;
LABEL_190:
        if (++v84 == (uint64_t **)v74)
          goto LABEL_193;
      }
      v86 = (llvm::Argument ***)(*v84)[1];
      v87 = 8 * v85;
      while (1)
      {
        v88 = **v86;
        if ((llvm::Argument::hasNoCaptureAttr(v88) & 1) == 0)
        {
          v89 = (char *)sub_1C477672C((uint64_t)&v111, (uint64_t)v88);
          v90 = v112 == v111 ? (uint64_t *)((char *)&v113 + 4) : &v113;
          if (v89 == &v112[8 * *(unsigned int *)v90])
            break;
        }
        ++v86;
        v87 -= 8;
        if (!v87)
          goto LABEL_190;
      }
    }
    goto LABEL_210;
  }
LABEL_213:
  if (__p[0])
    operator delete(__p[0]);
  if (v73)
    operator delete(v73);
  if (v120[0])
    operator delete(v120[0]);
  MEMORY[0x1CAA32FB4](v117, 8);
  if (v128 != v130)
    free(v128);
  sub_1C56D1550(v126[0]);
}

void sub_1C56CE1F8(_DWORD *a1, llvm::SmallPtrSetImplBase *a2)
{
  int64x2_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void (**v11)(void);
  void (**v12)(void);
  void (**v13)(void);
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  _QWORD v34[3];
  uint64_t *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _BYTE v38[24];
  _BYTE *v39;
  _BYTE v40[24];
  _BYTE *v41;
  _BYTE v42[24];
  _BYTE *v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[53];

  v46[52] = *MEMORY[0x1E0C80C00];
  v44 = v46;
  v45 = 0x400000000;
  v36[0] = &off_1E8179B80;
  v37 = v36;
  v26 = 1;
  v27 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v28 = v27;
  v29 = v27;
  v30 = v27;
  v23 = v27;
  sub_1C56D2698(&v26, a1);
  v31 = v33;
  v32 = 0x800000000;
  if (a1[20])
    sub_1C61B2738((uint64_t)&v31, (uint64_t)(a1 + 18));
  v35 = 0;
  v4 = (int64x2_t *)operator new(0xA0uLL);
  v4->i64[0] = (uint64_t)off_1E8179BC8;
  v4->i64[1] = 1;
  v4[1] = v23;
  v4[2] = v23;
  v4[3] = v23;
  v4[4] = v23;
  sub_1C56D2698(&v4->i32[2], &v26);
  v4[5].i64[0] = (uint64_t)v4[6].i64;
  v4[5].i64[1] = 0x800000000;
  if ((_DWORD)v32)
    sub_1C61B2738((uint64_t)v4[5].i64, (uint64_t)&v31);
  v35 = (uint64_t *)v4;
  v24[0] = &off_1E8179C10;
  v25 = v24;
  sub_1C56D159C((uint64_t)v38, 6, (uint64_t)v36, (uint64_t)v34, (uint64_t)v24, 0);
  sub_1C56D2230((uint64_t)&v44, (unint64_t)v38);
  v5 = v43;
  if (v43 == v42)
  {
    v6 = 4;
    v5 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_10:
  v7 = v41;
  if (v41 == v40)
  {
    v8 = 4;
    v7 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
  v9 = v39;
  if (v39 == v38)
  {
    v10 = 4;
    v9 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_20;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_20:
  if (v25 == v24)
  {
    v11 = (void (**)(void))(v24[0] + 32);
  }
  else
  {
    if (!v25)
      goto LABEL_25;
    v11 = (void (**)(void))(*v25 + 40);
  }
  (*v11)();
LABEL_25:
  if (v35 == v34)
  {
    v12 = (void (**)(void))(v34[0] + 32);
  }
  else
  {
    if (!v35)
      goto LABEL_30;
    v12 = (void (**)(void))(*v35 + 40);
  }
  (*v12)();
LABEL_30:
  if (v31 != v33)
    free(v31);
  if ((v26 & 1) == 0)
    MEMORY[0x1CAA32FB4](v27.i64[0], 8);
  if (v37 == v36)
  {
    v13 = (void (**)(void))(v36[0] + 32);
    goto LABEL_38;
  }
  if (v37)
  {
    v13 = (void (**)(void))(*v37 + 40);
LABEL_38:
    (*v13)();
  }
  sub_1C56D16B0((uint64_t)&v44, (uint64_t)a1, a2);
  v14 = (char *)v44;
  if (!(_DWORD)v45)
    goto LABEL_58;
  v15 = 104 * v45;
  do
  {
    v16 = &v14[v15];
    v17 = *(char **)&v14[v15 - 16];
    if (&v14[v15 - 40] == v17)
    {
      v17 = &v14[v15 - 40];
      v18 = 4;
    }
    else
    {
      if (!v17)
        goto LABEL_46;
      v18 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_46:
    v19 = *(char **)&v14[v15 - 48];
    if (&v14[v15 - 72] == v19)
    {
      v19 = &v14[v15 - 72];
      v20 = 4;
    }
    else
    {
      if (!v19)
        goto LABEL_51;
      v20 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_51:
    v21 = *(char **)&v14[v15 - 80];
    if (v16 - 104 == v21)
    {
      v21 = v16 - 104;
      v22 = 4;
    }
    else
    {
      if (!v21)
        goto LABEL_56;
      v22 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_56:
    v15 -= 104;
  }
  while (v15);
  v14 = (char *)v44;
LABEL_58:
  if (v14 != (char *)v46)
    free(v14);
}

void sub_1C56CE5C0(llvm::GlobalValue **a1, int a2, llvm::SmallPtrSetImplBase *a3)
{
  llvm::GlobalValue **v3;
  llvm::GlobalValue **v4;
  llvm::GlobalValue *v5;
  int v6;
  llvm::GlobalValue *Section;
  uint64_t v8;
  llvm::Module *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *j;
  _QWORD *v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  unsigned int i;
  uint64_t Successor;
  char v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  _BYTE v41[128];
  void *v42;
  uint64_t v43;
  _QWORD v44[18];

  v44[16] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = a1;
    v4 = &a1[a2];
    do
    {
      v5 = *v3;
      if (*v3)
      {
        v6 = *((unsigned __int8 *)v5 + 16);
        if (*((_BYTE *)v5 + 16))
        {
          if (v6 != 3 || (*((_DWORD *)v5 + 5) & 0x7FFFFFF) != 0)
            goto LABEL_10;
        }
        else if (*((llvm::GlobalValue **)v5 + 9) != (llvm::GlobalValue *)((char *)v5 + 72)
               || (*((_BYTE *)v5 + 34) & 0x80) != 0)
        {
LABEL_10:
          if (((1 << (*((_DWORD *)v5 + 8) & 0xF)) & 0x7D5) != 0)
          {
            if (v6 != 3
              || (Section = llvm::GlobalValue::getSection(*v3), v8 != 12)
              || (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
                ? (v35 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
                : (v35 = 0),
                  !v35))
            {
              if ((*((_DWORD *)v5 + 8) & 0xFu) - 5 < 4 || ((1 << (*((_DWORD *)v5 + 8) & 0xF)) & 0x614) == 0)
              {
                v9 = (llvm::Module *)*((_QWORD *)v5 + 5);
                if (!v9 || !llvm::Module::getSemanticInterposition(v9) || (*((_BYTE *)v5 + 33) & 0x40) != 0)
                {
                  v10 = *((_QWORD *)v5 + 14);
                  if (!v10 || (*(_BYTE *)(v10 + 14) & 2) == 0 && (*(_BYTE *)(v10 + 16) & 1) == 0)
                  {
                    v42 = v44;
                    v43 = 0x1000000000;
                    v37 = v41;
                    v38 = v41;
                    v39 = 16;
                    v40 = 0;
                    v11 = *((_QWORD *)v5 + 10);
                    if (v11)
                      v12 = v11 - 24;
                    else
                      v12 = 0;
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v37, v12);
                    v13 = *((_QWORD *)v5 + 10);
                    if (v13)
                      v14 = v13 - 24;
                    else
                      v14 = 0;
                    v15 = v43;
                    if (v43 >= (unint64_t)HIDWORD(v43))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v43 + 1, 8);
                      v15 = v43;
                    }
                    *((_QWORD *)v42 + v15) = v14;
                    v16 = v43 + 1;
                    while (1)
                    {
                      v17 = *((_QWORD *)v42 + v16 - 1);
                      LODWORD(v43) = v16 - 1;
                      v19 = (_QWORD *)(v17 + 40);
                      v18 = *(_QWORD **)(v17 + 40);
                      v20 = v18 - 3;
                      if (!v18)
                        v20 = 0;
                      if (*((unsigned __int8 *)v20 + 16) - 29 >= 0xB)
                        v20 = 0;
                      if (*((_BYTE *)v20 + 16) == 29)
                        break;
LABEL_47:
                      if (v18 != v19)
                      {
                        if (v18)
                          v28 = v18 - 3;
                        else
                          v28 = 0;
                        if (*((_BYTE *)v28 + 16) != 30)
                        {
                          v29 = 2;
                          switch(*((_BYTE *)v28 + 16))
                          {
                            case 0x1E:
                              __break(1u);
                              return;
                            case 0x1F:
                              v29 = (*((_DWORD *)v28 + 5) >> 1) & 0x3FFFFFF;
                              goto LABEL_66;
                            case 0x20:
                            case 0x26:
                              v29 = (*((_DWORD *)v28 + 5) & 0x7FFFFFF) - 1;
                              goto LABEL_66;
                            case 0x21:
                              goto LABEL_55;
                            case 0x24:
                              v29 = *((_WORD *)v28 + 9) & 1;
                              goto LABEL_66;
                            case 0x25:
                              v29 = 1;
                              goto LABEL_55;
                            case 0x27:
                              v29 = *((_DWORD *)v28 + 20) + 1;
LABEL_66:
                              if (!v29)
                                goto LABEL_63;
                              goto LABEL_55;
                            default:
                              goto LABEL_63;
                          }
                        }
                        if ((*((_DWORD *)v28 + 5) & 0x7FFFFFF) == 3)
                          v29 = 2;
                        else
                          v29 = 1;
LABEL_55:
                        for (i = 0; i != v29; ++i)
                        {
                          Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v28, i);
                          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v37, Successor);
                          if (v32)
                          {
                            v33 = v43;
                            if (v43 >= (unint64_t)HIDWORD(v43))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v43 + 1, 8);
                              v33 = v43;
                            }
                            *((_QWORD *)v42 + v33) = Successor;
                            LODWORD(v43) = v43 + 1;
                          }
                        }
                      }
LABEL_63:
                      v16 = v43;
                      if (!(_DWORD)v43)
                      {
                        v34 = 0;
                        goto LABEL_73;
                      }
                    }
                    for (j = *(_QWORD **)(v17 + 48); j != v19; j = (_QWORD *)j[1])
                    {
                      if (j)
                        v22 = j - 3;
                      else
                        v22 = 0;
                      v23 = *((unsigned __int8 *)v22 + 16) - 33;
                      v24 = v23 > 0x33;
                      v25 = (1 << v23) & 0x8000000000041;
                      if (!v24
                        && v25 != 0
                        && ((v27 = j[5]) != 0 && (*(_BYTE *)(v27 + 16) & 1) != 0
                         || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(j - 3), 32) & 1) != 0))
                      {
                        v18 = (_QWORD *)*v19;
                        goto LABEL_47;
                      }
                    }
                    v34 = 1;
LABEL_73:
                    if (v38 != v37)
                      free(v38);
                    if (v42 != v44)
                      free(v42);
                    if ((v34 & 1) == 0)
                    {
                      *((_QWORD *)v5 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5 + 14, **(uint64_t ***)v5, -1, 32);
                      sub_1C4774094(a3, (uint64_t)v5);
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_1C56CEA10(llvm::GlobalValue **a1, int a2, llvm::SmallPtrSetImplBase *a3)
{
  llvm::GlobalValue **v3;
  llvm::GlobalValue **v4;
  llvm::GlobalValue *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  llvm::GlobalValue *Section;
  uint64_t v10;
  llvm::Module *v11;
  _BYTE *v12;
  int v13;
  char *v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  llvm::Instruction *v18;
  uint64_t v19;
  uint64_t v20;
  void *v23;
  uint64_t v24;
  _QWORD v25[7];

  v25[6] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = a1;
    v4 = &a1[a2];
    do
    {
      v5 = *v3;
      if (!*v3)
        goto LABEL_54;
      v7 = (_QWORD *)((char *)v5 + 112);
      v6 = *((_QWORD *)v5 + 14);
      if (v6)
      {
        if ((*(_BYTE *)(v6 + 20) & 2) != 0)
          goto LABEL_54;
      }
      v8 = *((unsigned __int8 *)v5 + 16);
      if (*((_BYTE *)v5 + 16))
      {
        if (v8 == 3 && (*((_DWORD *)v5 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_54;
      }
      else if (*((llvm::GlobalValue **)v5 + 9) == (llvm::GlobalValue *)((char *)v5 + 72)
             && (*((_BYTE *)v5 + 34) & 0x80) == 0)
      {
        goto LABEL_54;
      }
      if (((1 << (*((_DWORD *)v5 + 8) & 0xF)) & 0x7D5) == 0)
        goto LABEL_54;
      if (v8 == 3)
      {
        Section = llvm::GlobalValue::getSection(*v3);
        if (v10 == 12
          && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
          && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
        {
          goto LABEL_54;
        }
      }
      if ((*((_DWORD *)v5 + 8) & 0xFu) - 5 >= 4 && ((1 << (*((_DWORD *)v5 + 8) & 0xF)) & 0x614) != 0)
        goto LABEL_54;
      v11 = (llvm::Module *)*((_QWORD *)v5 + 5);
      if (v11)
      {
        if (llvm::Module::getSemanticInterposition(v11) && (*((_BYTE *)v5 + 33) & 0x40) == 0)
          goto LABEL_54;
      }
      v12 = (_BYTE *)*v7;
      if (!*v7 || (v12[14] & 1) == 0 && (v12[20] & 2) == 0 || (v12[17] & 0x30) == 0)
      {
        if (*((_BYTE *)v5 + 16))
        {
          if (*((_BYTE *)v5 + 16) == 3 && (*((_DWORD *)v5 + 5) & 0x7FFFFFF) == 0)
            goto LABEL_54;
        }
        else if (*((llvm::GlobalValue **)v5 + 9) == (llvm::GlobalValue *)((char *)v5 + 72)
               && (*((_BYTE *)v5 + 34) & 0x80) == 0)
        {
          goto LABEL_54;
        }
        v23 = v25;
        v24 = 0x300000000;
        llvm::FindFunctionBackedges((uint64_t)v5, (uint64_t)&v23);
        if ((_DWORD)v24)
        {
          v13 = 0;
        }
        else
        {
          v14 = (char *)v5 + 72;
          for (i = *((_QWORD *)v5 + 10); ; i = *(_QWORD *)(i + 8))
          {
            if ((char *)i == v14)
            {
LABEL_49:
              v13 = 1;
              goto LABEL_50;
            }
            v16 = i - 24;
            if (!i)
              v16 = 0;
            v17 = *(_QWORD *)(v16 + 48);
            if (v17 != v16 + 40)
              break;
          }
          do
          {
            v18 = v17 ? (llvm::Instruction *)(v17 - 24) : 0;
            v13 = llvm::Instruction::willReturn(v18);
            if (!v13)
              break;
            v17 = *(_QWORD *)(v17 + 8);
            v19 = i - 24;
            if (!i)
              v19 = 0;
            if (v17 == v19 + 40)
            {
              do
              {
                i = *(_QWORD *)(i + 8);
                if ((char *)i == v14)
                  goto LABEL_49;
                v20 = i - 24;
                if (!i)
                  v20 = 0;
                v17 = *(_QWORD *)(v20 + 48);
              }
              while (v17 == v20 + 40);
            }
          }
          while ((char *)i != v14);
        }
LABEL_50:
        if (v23 != v25)
          free(v23);
        if (!v13)
          goto LABEL_54;
      }
      *((_QWORD *)v5 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v5 + 14, **(uint64_t ***)v5, -1, 65);
      sub_1C4774094(a3, (uint64_t)v5);
LABEL_54:
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_1C56CED08(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  uint64_t v2;
  llvm::GlobalValue **v5;
  llvm::GlobalValue **v6;
  llvm::GlobalValue *v7;
  uint64_t v8;
  int v9;
  llvm::GlobalValue *Section;
  uint64_t v11;
  llvm::Module *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  BOOL v26;
  char isNullValue;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64x2_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  void *v54;
  uint64_t v55;
  _QWORD v56[10];

  v56[8] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a1 + 80);
  if (!(_DWORD)v2)
    return;
  v5 = *(llvm::GlobalValue ***)(a1 + 72);
  v6 = &v5[v2];
  v46 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
LABEL_3:
  v7 = *v5;
  v8 = *((_QWORD *)*v5 + 14);
  if (v8)
  {
    if (*(_DWORD *)(v8 + 8) >= 2u)
    {
      v38 = *(_QWORD *)(v8 + 48);
      if (v38)
      {
        if ((*(_BYTE *)(v38 + 14) & 8) != 0)
          goto LABEL_86;
      }
    }
  }
  v9 = *((unsigned __int8 *)v7 + 16);
  if (*((_BYTE *)v7 + 16))
  {
    if (v9 == 3 && (*((_DWORD *)v7 + 5) & 0x7FFFFFF) == 0)
      return;
  }
  else if (*((llvm::GlobalValue **)v7 + 9) == (llvm::GlobalValue *)((char *)v7 + 72)
         && (*((_BYTE *)v7 + 34) & 0x80) == 0)
  {
    return;
  }
  if (((1 << (*((_DWORD *)v7 + 8) & 0xF)) & 0x7D5) != 0)
  {
    if (v9 != 3
      || (Section = llvm::GlobalValue::getSection(*v5), v11 != 12)
      || (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
        ? (v39 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
        : (v39 = 0),
          !v39))
    {
      if ((*((_DWORD *)v7 + 8) & 0xFu) - 5 < 4 || ((1 << (*((_DWORD *)v7 + 8) & 0xF)) & 0x614) == 0)
      {
        v12 = (llvm::Module *)*((_QWORD *)v7 + 5);
        if (!v12 || !llvm::Module::getSemanticInterposition(v12) || (*((_BYTE *)v7 + 33) & 0x40) != 0)
        {
          if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)v7 + 3) + 16) + 8) != 15)
            goto LABEL_86;
          v49 = 1;
          v50 = v46;
          v51 = v46;
          v52 = v46;
          v53 = v46;
          v54 = v56;
          v55 = 0x800000000;
          v13 = (char *)v7 + 72;
          v14 = *((_QWORD *)v7 + 10);
          if ((char *)v14 == v13)
            goto LABEL_80;
          do
          {
            v15 = v14 - 24;
            if (!v14)
              v15 = 0;
            v16 = *(_QWORD *)(v15 + 40);
            if (v16 != v15 + 40)
            {
              v17 = v16 - 24;
              if (!v16)
                v17 = 0;
              v18 = *(unsigned __int8 *)(v17 + 16) - 40;
              if (v18 < 0xFFFFFFF5)
                v17 = 0;
              if (v16)
              {
                if (*(_BYTE *)(v17 + 16) == 29 && v18 >= 0xFFFFFFF5)
                {
                  v20 = *(_DWORD *)(v17 + 20) & 0x7FFFFFF;
                  if ((_DWORD)v20)
                    v21 = *(_QWORD *)(v17 - 32 * v20);
                  else
                    v21 = 0;
                  v48 = v21;
                  sub_1C56D2D50((uint64_t)&v49, &v48);
                }
              }
            }
            v14 = *(_QWORD *)(v14 + 8);
          }
          while ((char *)v14 != v13);
          if (!(_DWORD)v55)
          {
LABEL_80:
            v28 = 1;
            goto LABEL_82;
          }
          v22 = 0;
          while (1)
          {
            v23 = *((_QWORD *)v54 + v22);
            v24 = *(unsigned __int8 *)(v23 + 16);
            if (v23)
              v25 = v24 > 0x14;
            else
              v25 = 1;
            if (v25)
            {
              if (v24 == 21)
                goto LABEL_81;
              if (v23)
                v26 = v24 >= 0x1C;
              else
                v26 = 0;
              if (v26)
              {
                v28 = 0;
                if (*(unsigned __int8 *)(v23 + 16) > 0x4Cu)
                {
                  switch(*(_BYTE *)(v23 + 16))
                  {
                    case 'M':
                    case 'N':
                      goto LABEL_62;
                    case 'S':
                      v29 = *(_DWORD *)(v23 + 20);
                      if ((v29 & 0x40000000) != 0)
                      {
                        v31 = *(uint64_t **)(v23 - 8);
                        v30 = v29 & 0x7FFFFFF;
                        if (!v30)
                          goto LABEL_74;
                      }
                      else
                      {
                        v30 = v29 & 0x7FFFFFF;
                        v31 = (uint64_t *)(v23 - 32 * v30);
                        if (!v30)
                          goto LABEL_74;
                      }
                      v36 = 32 * v30;
                      do
                      {
                        v48 = 0;
                        v37 = *v31;
                        v31 += 4;
                        v48 = v37;
                        sub_1C56D2D50((uint64_t)&v49, &v48);
                        v36 -= 32;
                      }
                      while (v36);
                      break;
                    case 'T':
                      goto LABEL_64;
                    case 'U':
                      v48 = *(_QWORD *)(v23 - 64);
                      sub_1C56D2D50((uint64_t)&v49, &v48);
                      v35 = *(_QWORD *)(v23 - 32);
                      goto LABEL_73;
                    default:
                      goto LABEL_82;
                  }
                  goto LABEL_74;
                }
                switch(v24)
                {
                  case '!':
LABEL_64:
                    if ((sub_1C4D91DD8(*((_QWORD *)v54 + v22), 19) & 1) == 0)
                    {
                      v34 = *(_QWORD *)(v23 - 32);
                      if (!v34
                        || *(_BYTE *)(v34 + 16)
                        || *(_QWORD *)(v34 + 24) != *(_QWORD *)(v23 + 72)
                        || (v47 = 0, v48 = v34, !sub_1C5684DE8(a1, &v48, &v47)))
                      {
LABEL_81:
                        v28 = 0;
LABEL_82:
                        if (v54 != v56)
                          free(v54);
                        if ((v49 & 1) != 0)
                        {
                          if (v28)
                            goto LABEL_86;
                          return;
                        }
                        MEMORY[0x1CAA32FB4](v50.i64[0], 8);
                        if (!v28)
                          return;
LABEL_86:
                        if (++v5 == v6)
                        {
                          v40 = *(unsigned int *)(a1 + 80);
                          if ((_DWORD)v40)
                          {
                            v41 = *(uint64_t **)(a1 + 72);
                            v42 = 8 * v40;
                            do
                            {
                              v43 = *v41;
                              v44 = *(_QWORD *)(*v41 + 112);
                              if ((!v44
                                 || *(_DWORD *)(v44 + 8) < 2u
                                 || (v45 = *(_QWORD *)(v44 + 48)) == 0
                                 || (*(_BYTE *)(v45 + 14) & 8) == 0)
                                && *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v43 + 24) + 16) + 8) == 15)
                              {
                                *(_QWORD *)(v43 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(*v41 + 112), **(uint64_t ***)v43, 0, 19);
                                sub_1C4774094(a2, v43);
                              }
                              ++v41;
                              v42 -= 8;
                            }
                            while (v42);
                          }
                          return;
                        }
                        goto LABEL_3;
                      }
                    }
                    break;
                  case ';':
                    break;
                  case '>':
LABEL_62:
                    v32 = *(_DWORD *)(v23 + 20);
                    if ((v32 & 0x40000000) != 0)
                      v33 = *(uint64_t **)(v23 - 8);
                    else
                      v33 = (uint64_t *)(v23 - 32 * (v32 & 0x7FFFFFF));
                    v35 = *v33;
LABEL_73:
                    v48 = v35;
                    sub_1C56D2D50((uint64_t)&v49, &v48);
                    goto LABEL_74;
                  default:
                    goto LABEL_82;
                }
              }
              if (llvm::PointerMayBeCaptured((llvm *)v23, 0, 0, 0))
                goto LABEL_81;
            }
            else
            {
              isNullValue = llvm::Constant::isNullValue(*((llvm::Constant **)v54 + v22));
              if ((isNullValue & 1) == 0 && *(unsigned __int8 *)(v23 + 16) - 11 >= 2)
                goto LABEL_81;
            }
LABEL_74:
            if ((_DWORD)v55 == ++v22)
              goto LABEL_80;
          }
        }
      }
    }
  }
}

void sub_1C56CF204(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  uint64_t v2;
  llvm::SmallPtrSetImplBase *v3;
  llvm::GlobalValue **v4;
  llvm::GlobalValue **v5;
  llvm::GlobalValue *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  llvm::GlobalValue *Section;
  uint64_t v11;
  llvm::Module *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int64x2_t v48;
  llvm::GlobalValue **v49;
  uint64_t v51;
  uint64_t v52[5];
  char v53;
  uint64_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[10];

  v61[8] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a1 + 80);
  if (!(_DWORD)v2)
    return;
  v3 = a2;
  v4 = *(llvm::GlobalValue ***)(a1 + 72);
  v5 = &v4[v2];
  v48 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v46 = 1;
  v49 = v5;
  do
  {
    while (1)
    {
      v6 = *v4;
      v8 = (uint64_t *)((char *)*v4 + 112);
      v7 = *v8;
      if (*v8)
      {
        if (*(_DWORD *)(v7 + 8) >= 2u)
        {
          v38 = *(_QWORD *)(v7 + 48);
          if (v38)
          {
            if (*(char *)(v38 + 16) < 0)
              break;
          }
        }
      }
      v9 = *((unsigned __int8 *)v6 + 16);
      if (*((_BYTE *)v6 + 16))
      {
        if (v9 == 3 && (*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 0)
          return;
      }
      else if (*((llvm::GlobalValue **)v6 + 9) == (llvm::GlobalValue *)((char *)v6 + 72)
             && (*((_BYTE *)v6 + 34) & 0x80) == 0)
      {
        return;
      }
      if (((1 << (*((_DWORD *)v6 + 8) & 0xF)) & 0x7D5) == 0)
        return;
      if (v9 == 3)
      {
        Section = llvm::GlobalValue::getSection(*v4);
        if (v11 == 12
          && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
          && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
        {
          return;
        }
      }
      if ((*((_DWORD *)v6 + 8) & 0xFu) - 5 >= 4 && ((1 << (*((_DWORD *)v6 + 8) & 0xF)) & 0x614) != 0)
        return;
      v12 = (llvm::Module *)*((_QWORD *)v6 + 5);
      if (v12)
      {
        if (llvm::Module::getSemanticInterposition(v12) && (*((_BYTE *)v6 + 33) & 0x40) == 0)
          return;
      }
      if (*(_BYTE *)(**(_QWORD **)(*((_QWORD *)v6 + 3) + 16) + 8) != 15)
        break;
      v54 = 1;
      v55 = v48;
      v56 = v48;
      v57 = v48;
      v58 = v48;
      v59 = v61;
      v60 = 0x800000000;
      v13 = (_QWORD *)*((_QWORD *)v6 + 10);
      if (v13 != (_QWORD *)((char *)v6 + 72))
      {
        do
        {
          v14 = v13 - 3;
          if (!v13)
            v14 = 0;
          v15 = (_QWORD *)v14[5];
          if (v15 != v14 + 5)
          {
            v16 = v15 - 3;
            if (!v15)
              v16 = 0;
            v17 = *((unsigned __int8 *)v16 + 16) - 40;
            if (v17 < 0xFFFFFFF5)
              v16 = 0;
            if (v15)
            {
              if (*((_BYTE *)v16 + 16) == 29 && v17 >= 0xFFFFFFF5)
              {
                v19 = *((_DWORD *)v16 + 5) & 0x7FFFFFF;
                if ((_DWORD)v19)
                  v20 = v16[-4 * v19];
                else
                  v20 = 0;
                v52[0] = v20;
                sub_1C56D2D50((uint64_t)&v54, v52);
              }
            }
          }
          v13 = (_QWORD *)v13[1];
        }
        while (v13 != (_QWORD *)((char *)v6 + 72));
        if ((_DWORD)v60)
        {
          v21 = 0;
          v22 = 0;
          v23 = *((_QWORD *)v6 + 5) + 272;
          while (1)
          {
            v24 = *((_QWORD *)v59 + v21);
            if (v24)
              v25 = *(unsigned __int8 *)(v24 + 16) >= 0x1Cu;
            else
              v25 = 0;
            if (!v25 || (v26 = *((_QWORD *)v59 + v21), !*(_QWORD *)(v24 + 40)))
              v26 = 0;
            v52[0] = v23;
            v52[1] = 0;
            v52[2] = v26;
            v52[3] = 0;
            v52[4] = 0;
            v53 = 1;
            if ((sub_1C4F84D74(v24, 0, (uint64_t)v52) & 1) == 0)
            {
              v27 = *(unsigned __int8 *)(v24 + 16);
              if (v24)
                v28 = v27 >= 0x1C;
              else
                v28 = 0;
              if (!v28)
              {
LABEL_84:
                v29 = 0;
                goto LABEL_76;
              }
              v29 = 0;
              switch(*(_BYTE *)(v24 + 16))
              {
                case 'M':
                case 'N':
                  goto LABEL_61;
                case 'O':
                case 'P':
                case 'Q':
                case 'R':
                  goto LABEL_76;
                case 'S':
                  v30 = *(_DWORD *)(v24 + 20) & 0x7FFFFFF;
                  if ((_DWORD)v30)
                  {
                    v31 = 0;
                    v32 = 32 * v30;
                    do
                    {
                      v33 = *(_DWORD *)(v24 + 20);
                      if ((v33 & 0x40000000) != 0)
                        v34 = *(_QWORD *)(v24 - 8);
                      else
                        v34 = v24 - 32 * (v33 & 0x7FFFFFF);
                      v52[0] = *(_QWORD *)(v34 + v31);
                      sub_1C56D2D50((uint64_t)&v54, v52);
                      v31 += 32;
                    }
                    while (v32 != v31);
                    v3 = a2;
                  }
                  break;
                case 'T':
                  goto LABEL_63;
                case 'U':
                  v52[0] = *(_QWORD *)(v24 - 64);
                  sub_1C56D2D50((uint64_t)&v54, v52);
                  v52[0] = *(_QWORD *)(v24 - 32);
                  sub_1C56D2D50((uint64_t)&v54, v52);
                  break;
                default:
                  if (v27 == 33)
                  {
LABEL_63:
                    v37 = *(_QWORD *)(v24 - 32);
                    if (!v37)
                      goto LABEL_84;
                    if (*(_BYTE *)(v37 + 16))
                      goto LABEL_84;
                    if (*(_QWORD *)(v37 + 24) != *(_QWORD *)(v24 + 72))
                      goto LABEL_84;
                    v51 = 0;
                    v52[0] = v37;
                    if (!sub_1C5684DE8(a1, v52, &v51))
                      goto LABEL_84;
                    v22 = 1;
                  }
                  else
                  {
                    if (v27 != 62)
                      goto LABEL_76;
LABEL_61:
                    v35 = *(_DWORD *)(v24 + 20);
                    if ((v35 & 0x40000000) != 0)
                      v36 = *(uint64_t **)(v24 - 8);
                    else
                      v36 = (uint64_t *)(v24 - 32 * (v35 & 0x7FFFFFF));
                    v52[0] = *v36;
                    sub_1C56D2D50((uint64_t)&v54, v52);
                  }
                  break;
              }
            }
            if ((_DWORD)v60 == ++v21)
              goto LABEL_75;
          }
        }
      }
      v22 = 0;
LABEL_75:
      v29 = 1;
LABEL_76:
      if (v59 != v61)
        free(v59);
      v5 = v49;
      if ((v54 & 1) != 0)
      {
        if (v29)
          goto LABEL_80;
      }
      else
      {
        MEMORY[0x1CAA32FB4](v55.i64[0], 8);
        if (v29)
        {
LABEL_80:
          if (!v22)
          {
            *((_QWORD *)v6 + 14) = llvm::AttributeList::addAttributeAtIndex(v8, **(uint64_t ***)v6, 0, 39);
            sub_1C4774094(v3, (uint64_t)v6);
          }
          break;
        }
      }
      v46 = 0;
      if (++v4 == v49)
        return;
    }
    ++v4;
  }
  while (v4 != v5);
  if ((v46 & 1) != 0)
  {
    v40 = *(unsigned int *)(a1 + 80);
    if ((_DWORD)v40)
    {
      v41 = *(uint64_t **)(a1 + 72);
      v42 = 8 * v40;
      do
      {
        v43 = *v41;
        v44 = *(_QWORD *)(*v41 + 112);
        if ((!v44
           || *(_DWORD *)(v44 + 8) < 2u
           || (v45 = *(_QWORD *)(v44 + 48)) == 0
           || (*(char *)(v45 + 16) & 0x80000000) == 0)
          && *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v43 + 24) + 16) + 8) == 15)
        {
          *(_QWORD *)(v43 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(*v41 + 112), **(uint64_t ***)v43, 0, 39);
          sub_1C4774094(v3, v43);
        }
        ++v41;
        v42 -= 8;
      }
      while (v42);
    }
  }
}

void sub_1C56CF78C(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void (**v10)(void);
  void (**v11)(void);
  void (**v12)(void);
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void (**v19)(void);
  void (**v20)(void);
  void (**v21)(void);
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _BYTE v37[24];
  _BYTE *v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  _BYTE v53[24];
  _BYTE *v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[53];

  v57[52] = *MEMORY[0x1E0C80C00];
  v55 = v57;
  v56 = 0x400000000;
  if (byte_1ED80A410)
    goto LABEL_32;
  v48 = v47;
  v45[0] = &off_1E8179CA0;
  v45[1] = a1;
  v46 = v45;
  v47[0] = &off_1E8179C58;
  v43[0] = &off_1E8179CE8;
  v44 = v43;
  sub_1C56D159C((uint64_t)v49, 37, (uint64_t)v47, (uint64_t)v45, (uint64_t)v43, 1);
  sub_1C56D2230((uint64_t)&v55, (unint64_t)v49);
  v4 = v54;
  if (v54 == v53)
  {
    v5 = 4;
    v4 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_7;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_7:
  v6 = v52;
  if (v52 == v51)
  {
    v7 = 4;
    v6 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_12;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
  v8 = v50;
  if (v50 == v49)
  {
    v9 = 4;
    v8 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_17;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
  if (v44 == v43)
  {
    v10 = (void (**)(void))(v43[0] + 32);
  }
  else
  {
    if (!v44)
      goto LABEL_22;
    v10 = (void (**)(void))(*v44 + 40);
  }
  (*v10)();
LABEL_22:
  if (v46 == v45)
  {
    v11 = (void (**)(void))(v45[0] + 32);
    goto LABEL_26;
  }
  if (v46)
  {
    v11 = (void (**)(void))(*v46 + 40);
LABEL_26:
    (*v11)();
  }
  if (v48 == v47)
  {
    v12 = (void (**)(void))(v47[0] + 32);
  }
  else
  {
    if (!v48)
      goto LABEL_32;
    v12 = (void (**)(void))(*v48 + 40);
  }
  (*v12)();
LABEL_32:
  if (byte_1ED80A4D0)
    goto LABEL_63;
  v36 = v35;
  v33[0] = &off_1E8179D78;
  v33[1] = a1;
  v34 = v33;
  v35[0] = &off_1E8179D30;
  v31[0] = &off_1E8179DC0;
  v32 = v31;
  sub_1C56D159C((uint64_t)v37, 25, (uint64_t)v35, (uint64_t)v33, (uint64_t)v31, 1);
  sub_1C56D2230((uint64_t)&v55, (unint64_t)v37);
  v13 = v42;
  if (v42 == v41)
  {
    v14 = 4;
    v13 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_38;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_38:
  v15 = v40;
  if (v40 == v39)
  {
    v16 = 4;
    v15 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_43;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_43:
  v17 = v38;
  if (v38 == v37)
  {
    v18 = 4;
    v17 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_48;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_48:
  if (v32 == v31)
  {
    v19 = (void (**)(void))(v31[0] + 32);
  }
  else
  {
    if (!v32)
      goto LABEL_53;
    v19 = (void (**)(void))(*v32 + 40);
  }
  (*v19)();
LABEL_53:
  if (v34 == v33)
  {
    v20 = (void (**)(void))(v33[0] + 32);
    goto LABEL_57;
  }
  if (v34)
  {
    v20 = (void (**)(void))(*v34 + 40);
LABEL_57:
    (*v20)();
  }
  if (v36 == v35)
  {
    v21 = (void (**)(void))(v35[0] + 32);
    goto LABEL_62;
  }
  if (v36)
  {
    v21 = (void (**)(void))(*v36 + 40);
LABEL_62:
    (*v21)();
  }
LABEL_63:
  sub_1C56D16B0((uint64_t)&v55, a1, a2);
  v22 = (char *)v55;
  if (!(_DWORD)v56)
    goto LABEL_82;
  v23 = 104 * v56;
  do
  {
    v24 = &v22[v23];
    v25 = *(char **)&v22[v23 - 16];
    if (&v22[v23 - 40] == v25)
    {
      v25 = &v22[v23 - 40];
      v26 = 4;
    }
    else
    {
      if (!v25)
        goto LABEL_70;
      v26 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_70:
    v27 = *(char **)&v22[v23 - 48];
    if (&v22[v23 - 72] == v27)
    {
      v27 = &v22[v23 - 72];
      v28 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_75;
      v28 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_75:
    v29 = *(char **)&v22[v23 - 80];
    if (v24 - 104 == v29)
    {
      v29 = v24 - 104;
      v30 = 4;
    }
    else
    {
      if (!v29)
        goto LABEL_80;
      v30 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_80:
    v23 -= 104;
  }
  while (v23);
  v22 = (char *)v55;
LABEL_82:
  if (v22 != (char *)v57)
    free(v22);
}

uint64_t sub_1C56CFC24(uint64_t result, int a2, llvm::SmallPtrSetImplBase *a3)
{
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  llvm::BasicBlock *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  _BYTE v36[24];
  _BYTE *v37;
  __int128 v38;
  _BYTE v39[24];
  _BYTE *v40;
  __int128 v41;
  _QWORD v42[3];
  _QWORD *v43;
  __int128 v44;
  _QWORD v45[3];
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a2 == 1)
  {
    v3 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v5 = *(unsigned __int8 *)(v3 + 16);
      if (*(_BYTE *)(v3 + 16))
      {
        if (v5 == 3 && (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) == 0)
          return result;
      }
      else if (*(_QWORD *)(v3 + 72) == v3 + 72 && (*(_BYTE *)(v3 + 34) & 0x80) == 0)
      {
        return result;
      }
      if (((1 << (*(_DWORD *)(v3 + 32) & 0xF)) & 0x7D5) != 0)
      {
        if (v5 != 3
          || (result = (uint64_t)llvm::GlobalValue::getSection(*(llvm::GlobalValue **)result), v6 != 12)
          || (*(_QWORD *)result == *(_QWORD *)"llvm.ptrauth"
            ? (v34 = *(unsigned int *)(result + 8) == (unint64_t)*(unsigned int *)"auth")
            : (v34 = 0),
              !v34))
        {
          if ((*(_DWORD *)(v3 + 32) & 0xFu) - 5 < 4 || ((1 << (*(_DWORD *)(v3 + 32) & 0xF)) & 0x614) == 0)
          {
            result = *(_QWORD *)(v3 + 40);
            if (!result
              || (result = llvm::Module::getSemanticInterposition((llvm::Module *)result), !(_DWORD)result)
              || (*(_BYTE *)(v3 + 33) & 0x40) != 0)
            {
              v7 = *(_QWORD *)(v3 + 112);
              if (!v7 || (*(_BYTE *)(v7 + 15) & 0x40) == 0)
              {
                v8 = *(_QWORD *)(v3 + 80);
                if (v8 == v3 + 72)
                {
LABEL_75:
                  *(_QWORD *)(v3 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v3 + 112), **(uint64_t ***)v3, -1, 30);
                  return (uint64_t)sub_1C4774094(a3, v3);
                }
                v9 = v39;
                v10 = v42;
                v11 = v36;
                v12 = v45;
                while (2)
                {
                  if (v8)
                    v13 = (llvm::BasicBlock *)(v8 - 24);
                  else
                    v13 = 0;
                  llvm::BasicBlock::instructionsWithoutDebug(v13, 1, (uint64_t)&v41);
                  v38 = v41;
                  if (v43)
                  {
                    if (v43 == v42)
                    {
                      v40 = v39;
                      (*(void (**)(_QWORD *, _BYTE *))(v42[0] + 24))(v42, v39);
                    }
                    else
                    {
                      v40 = (_BYTE *)(*(uint64_t (**)(void))(*v43 + 16))();
                    }
                  }
                  else
                  {
                    v40 = 0;
                  }
                  v35 = v44;
                  result = (uint64_t)v46;
                  if (v46)
                  {
                    if (v46 == v45)
                    {
                      v37 = v36;
                      result = (*(uint64_t (**)(_QWORD *, _BYTE *))(v45[0] + 24))(v45, v36);
                    }
                    else
                    {
                      result = (*(uint64_t (**)(void))(*v46 + 16))();
                      v37 = (_BYTE *)result;
                    }
                  }
                  else
                  {
                    v37 = 0;
                  }
LABEL_32:
                  v14 = v38;
                  while (v14 != v35)
                  {
                    v15 = v14 - 24;
                    if (!v14)
                      v15 = 0;
                    v16 = *(unsigned __int8 *)(v15 + 16) - 33;
                    v17 = v16 > 0x33;
                    v18 = (1 << v16) & 0x8000000000041;
                    if (!v17 && v18 != 0)
                    {
                      v20 = *(_QWORD *)(v14 - 56);
                      if (!v20
                        || *(_BYTE *)(v20 + 16)
                        || v20 == v3
                        || *(_QWORD *)(v20 + 24) != *(_QWORD *)(v14 + 48)
                        || (v21 = *(_QWORD *)(v20 + 112)) == 0
                        || (*(_BYTE *)(v21 + 15) & 0x40) == 0)
                      {
                        if (v37 == v36)
                        {
                          v30 = 4;
LABEL_77:
                          result = (*(uint64_t (**)(_QWORD *))(*v11 + 8 * v30))(v11);
                        }
                        else if (v37)
                        {
                          v30 = 5;
                          v11 = v37;
                          goto LABEL_77;
                        }
                        if (v40 == v39)
                        {
                          v31 = 4;
LABEL_82:
                          result = (*(uint64_t (**)(_QWORD *))(*v9 + 8 * v31))(v9);
                        }
                        else if (v40)
                        {
                          v31 = 5;
                          v9 = v40;
                          goto LABEL_82;
                        }
                        if (v46 == v45)
                        {
                          v32 = 4;
                          goto LABEL_85;
                        }
                        if (v46)
                        {
                          v32 = 5;
                          v12 = v46;
LABEL_85:
                          result = (*(uint64_t (**)(_QWORD *))(*v12 + 8 * v32))(v12);
                        }
                        if (v43 == v42)
                        {
                          v33 = 4;
                          return (*(uint64_t (**)(_QWORD *))(*v10 + 8 * v33))(v10);
                        }
                        if (v43)
                        {
                          v33 = 5;
                          v10 = v43;
                          return (*(uint64_t (**)(_QWORD *))(*v10 + 8 * v33))(v10);
                        }
                        return result;
                      }
                    }
                    while (1)
                    {
                      v14 = *(_QWORD *)(v38 + 8);
                      *(_QWORD *)&v38 = v14;
                      if (v14 == *((_QWORD *)&v38 + 1))
                        break;
                      if (!v40)
                        sub_1C485C2F0();
                      result = (*(uint64_t (**)(void))(*(_QWORD *)v40 + 48))();
                      if ((_DWORD)result)
                        goto LABEL_32;
                    }
                  }
                  v22 = v37;
                  if (v37 == v36)
                  {
                    v22 = v36;
                    v23 = 4;
                  }
                  else
                  {
                    if (!v37)
                      goto LABEL_55;
                    v23 = 5;
                  }
                  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_55:
                  v24 = v40;
                  if (v40 == v39)
                  {
                    v24 = v39;
                    v25 = 4;
                  }
                  else
                  {
                    if (!v40)
                      goto LABEL_60;
                    v25 = 5;
                  }
                  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_60:
                  v26 = v46;
                  if (v46 == v45)
                  {
                    v26 = v45;
                    v27 = 4;
                  }
                  else
                  {
                    if (!v46)
                    {
LABEL_63:
                      v28 = v43;
                      if (v43 == v42)
                      {
                        v28 = v42;
                        v29 = 4;
                      }
                      else
                      {
                        if (!v43)
                        {
LABEL_66:
                          v8 = *(_QWORD *)(v8 + 8);
                          if (v8 != v3 + 72)
                            continue;
                          goto LABEL_75;
                        }
                        v29 = 5;
                      }
                      (*(void (**)(void))(*v28 + 8 * v29))();
                      goto LABEL_66;
                    }
                    v27 = 5;
                  }
                  break;
                }
                (*(void (**)(void))(*v26 + 8 * v27))();
                goto LABEL_63;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1C56D00D8(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void (**v10)(void);
  void (**v11)(void);
  void (**v12)(void);
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[53];

  v36[52] = *MEMORY[0x1E0C80C00];
  v34 = v36;
  v35 = 0x400000000;
  v27 = v26;
  v24[0] = &off_1E8179E50;
  v24[1] = a1;
  v25 = v24;
  v26[0] = &off_1E8179E08;
  v22[0] = &off_1E8179E98;
  v23 = v22;
  sub_1C56D159C((uint64_t)v28, 35, (uint64_t)v26, (uint64_t)v24, (uint64_t)v22, 1);
  sub_1C56D2230((uint64_t)&v34, (unint64_t)v28);
  v4 = v33;
  if (v33 == v32)
  {
    v5 = 4;
    v4 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v31;
  if (v31 == v30)
  {
    v7 = 4;
    v6 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = v29;
  if (v29 == v28)
  {
    v9 = 4;
    v8 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  if (v23 == v22)
  {
    v10 = (void (**)(void))(v22[0] + 32);
  }
  else
  {
    if (!v23)
      goto LABEL_21;
    v10 = (void (**)(void))(*v23 + 40);
  }
  (*v10)();
LABEL_21:
  if (v25 == v24)
  {
    v11 = (void (**)(void))(v24[0] + 32);
  }
  else
  {
    if (!v25)
      goto LABEL_26;
    v11 = (void (**)(void))(*v25 + 40);
  }
  (*v11)();
LABEL_26:
  if (v27 == v26)
  {
    v12 = (void (**)(void))(v26[0] + 32);
    goto LABEL_30;
  }
  if (v27)
  {
    v12 = (void (**)(void))(*v27 + 40);
LABEL_30:
    (*v12)();
  }
  sub_1C56D16B0((uint64_t)&v34, a1, a2);
  v13 = (char *)v34;
  if (!(_DWORD)v35)
    goto LABEL_50;
  v14 = 104 * v35;
  do
  {
    v15 = &v13[v14];
    v16 = *(char **)&v13[v14 - 16];
    if (&v13[v14 - 40] == v16)
    {
      v16 = &v13[v14 - 40];
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_38;
      v17 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_38:
    v18 = *(char **)&v13[v14 - 48];
    if (&v13[v14 - 72] == v18)
    {
      v18 = &v13[v14 - 72];
      v19 = 4;
    }
    else
    {
      if (!v18)
        goto LABEL_43;
      v19 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_43:
    v20 = *(char **)&v13[v14 - 80];
    if (v15 - 104 == v20)
    {
      v20 = v15 - 104;
      v21 = 4;
    }
    else
    {
      if (!v20)
        goto LABEL_48;
      v21 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_48:
    v14 -= 104;
  }
  while (v14);
  v13 = (char *)v34;
LABEL_50:
  if (v13 != (char *)v36)
    free(v13);
}

char *sub_1C56D03C4(uint64_t **a1, unint64_t a2)
{
  char *v4;
  uint64_t **v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;

  v5 = a1 + 1;
  v4 = (char *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = *((_QWORD *)v4 + 4);
        if (v7 <= a2)
          break;
        v4 = *(char **)v6;
        v5 = (uint64_t **)v6;
        if (!*(_QWORD *)v6)
          goto LABEL_9;
      }
      if (v7 >= a2)
        break;
      v4 = (char *)*((_QWORD *)v6 + 1);
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = (char *)(a1 + 1);
LABEL_9:
    v8 = v6;
    v6 = (char *)operator new(0x60uLL);
    *((_QWORD *)v6 + 4) = a2;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_QWORD *)v6 + 11) = 0;
    *(_OWORD *)(v6 + 72) = 0u;
    *((_QWORD *)v6 + 6) = v6 + 64;
    *((_DWORD *)v6 + 15) = 4;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v8;
    *v5 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    sub_1C4768E74(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  *((_QWORD *)v6 + 5) = a2;
  v11 = v6 + 40;
  v12 = *((unsigned int *)a1 + 10);
  if (v12 >= *((_DWORD *)a1 + 11))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 4), (uint64_t)(a1 + 6), v12 + 1, 8);
    LODWORD(v12) = *((_DWORD *)a1 + 10);
  }
  a1[4][v12] = (uint64_t)v11;
  ++*((_DWORD *)a1 + 10);
  return v11;
}

_QWORD *sub_1C56D04EC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8179B40;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C56D052C(llvm::Argument *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t i;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  _BYTE v61[260];
  __int32 v62;
  void *v63;
  uint64_t v64;
  _QWORD v65[34];

  v65[32] = *MEMORY[0x1E0C80C00];
  v63 = v65;
  v64 = 0x2000000000;
  v57 = v61;
  v58 = v61;
  v59 = 32;
  v60 = 0;
  v4 = 0;
  if (!llvm::Argument::hasInAllocaAttr(a1))
  {
    if ((llvm::Argument::hasPreallocatedAttr(a1) & 1) != 0)
    {
LABEL_3:
      v4 = 0;
      goto LABEL_129;
    }
    v5 = *((_QWORD *)a1 + 1);
    if (v5)
    {
      do
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v57, v5);
        v6 = v64;
        if (v64 >= (unint64_t)HIDWORD(v64))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v64 + 1, 8);
          v6 = v64;
        }
        *((_QWORD *)v63 + v6) = v5;
        v7 = v64 + 1;
        LODWORD(v64) = v64 + 1;
        v5 = *(_QWORD *)(v5 + 8);
      }
      while (v5);
    }
    else
    {
      v7 = v64;
    }
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      while (1)
      {
        if ((v9 & 1) != 0 && (v8 & 1) != 0)
          goto LABEL_3;
        v4 = 0;
        v10 = (_QWORD *)*((_QWORD *)v63 + --v7);
        LODWORD(v64) = v7;
        v11 = v10[3];
        v12 = *(unsigned __int8 *)(v11 + 16);
        if (v12 <= 0x3C)
        {
          if (v12 != 29)
          {
            if (v12 == 33)
              goto LABEL_29;
            if (v12 != 60)
              goto LABEL_129;
            if ((*(_WORD *)(v11 + 18) & 1) != 0)
              goto LABEL_3;
            goto LABEL_78;
          }
        }
        else
        {
          if (v12 - 62 > 0x17)
            goto LABEL_39;
          if (((1 << (v12 - 62)) & 0xA18001) != 0)
          {
            while (1)
            {
              v11 = *(_QWORD *)(v11 + 8);
              if (!v11)
                break;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v57, v11);
              if (v13)
              {
                v14 = v64;
                if (v64 >= (unint64_t)HIDWORD(v64))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v64 + 1, 8);
                  v14 = v64;
                }
                *((_QWORD *)v63 + v14) = v11;
                LODWORD(v64) = v64 + 1;
              }
            }
            goto LABEL_79;
          }
          if (v12 != 81)
          {
            if (v12 == 84)
            {
LABEL_29:
              v15 = (uint64_t *)(v11 - 32);
              if ((_QWORD *)(v11 - 32) == v10)
                goto LABEL_78;
              v16 = (unint64_t)&v10[4 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)] - v11;
              v17 = v16 >> 5;
              if ((sub_1C4D91D40(v10[3], v16 >> 5, 22) & 1) == 0)
              {
                v18 = *(_QWORD *)(v11 + 64);
                if (!v18 || (*(_BYTE *)(v18 + 17) & 0x30) == 0)
                {
                  v19 = *(_DWORD *)(v11 + 20);
                  if (v19 < 0)
                  {
                    v36 = v11 - 32 * (v19 & 0x7FFFFFF);
                    v39 = *(_QWORD *)(v36 - 8);
                    v37 = v36 - 8;
                    v38 = v39;
                    if (v39)
                    {
                      v40 = -v38;
                      do
                      {
                        v41 = *(_DWORD *)(*(_QWORD *)(v37 + v40) + 8);
                        v42 = v41 > 7;
                        v43 = (1 << v41) & 0x83;
                        if (v42 || v43 == 0)
                          goto LABEL_3;
                        v40 += 16;
                      }
                      while (v40);
                    }
                  }
                  if ((llvm::CallBase::hasFnAttrOnCalledFunction(v11, 45) & 1) == 0
                    && !llvm::CallBase::hasFnAttrOnCalledFunction(v11, 44))
                  {
                    goto LABEL_3;
                  }
                }
                if (*(_BYTE *)(*(_QWORD *)v11 + 8) != 7)
                {
                  for (i = *(_QWORD *)(v11 + 8); i; i = *(_QWORD *)(i + 8))
                  {
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v57, i);
                    if (v21)
                    {
                      v22 = v64;
                      if (v64 >= (unint64_t)HIDWORD(v64))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v64 + 1, 8);
                        v22 = v64;
                      }
                      *((_QWORD *)v63 + v22) = i;
                      LODWORD(v64) = v64 + 1;
                    }
                  }
                }
              }
              v23 = *(_QWORD *)(v11 + 64);
              if (v23 && (*(_BYTE *)(v23 + 17) & 0x10) != 0)
                goto LABEL_79;
              v62 = 7;
              if (!sub_1C53E4BBC(v11, &v62, 1uLL))
              {
LABEL_51:
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v11, 44) & 1) == 0)
                {
                  v24 = *v15;
                  goto LABEL_53;
                }
LABEL_79:
                v7 = v64;
                goto LABEL_80;
              }
              v24 = *v15;
              if (*v15 && !*(_BYTE *)(v24 + 16) && *(_QWORD *)(v24 + 24) == *(_QWORD *)(v11 + 72))
              {
                if (*(_DWORD *)(v24 + 36) == 7)
                  goto LABEL_51;
LABEL_54:
                if (!*(_BYTE *)(v24 + 16) && *(_QWORD *)(v24 + 24) == *(_QWORD *)(v11 + 72))
                {
                  v25 = *(_DWORD *)(v11 + 20);
                  v26 = v11 - 32 * (v25 & 0x7FFFFFF);
                  if (v26 <= (unint64_t)v10)
                  {
                    v27 = *(unsigned __int8 *)(v11 + 16);
                    if (v27 == 84)
                      v28 = 0;
                    else
                      v28 = v27 == 39 ? (*(_DWORD *)(v11 + 80) + 1) : 2;
                    if (v25 < 0 && (v54 = *(_QWORD *)(v26 - 8), (v54 & 0xFFFFFFFF0) != 0))
                      v29 = (*(_DWORD *)(v26 - 12) - *(_DWORD *)(v26 - v54));
                    else
                      v29 = 0;
                    if (v11 - 32 * v28 - 32 * v29 - 32 > (unint64_t)v10
                      && *(_QWORD *)(v24 + 96) > (unint64_t)v17)
                    {
                      if ((*(_WORD *)(v24 + 18) & 1) != 0)
                        llvm::Function::BuildLazyArguments((llvm::Function *)v24);
                      v30 = sub_1C477672C((uint64_t)a2, *(_QWORD *)(v24 + 88) + 40 * (v16 >> 5));
                      v31 = a2[1];
                      v32 = v31 == *a2 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
                      if (v30 != (_QWORD *)(v31 + 8 * *v32))
                        goto LABEL_79;
                    }
                  }
                }
              }
              else
              {
LABEL_53:
                if (v24)
                  goto LABEL_54;
              }
              if ((sub_1C4D91D40(v11, v16 >> 5, 44) & 1) != 0)
                goto LABEL_79;
              v33 = *(_QWORD *)(v11 + 64);
              if (v33)
              {
                if ((*(_BYTE *)(v33 + 17) & 0x30) != 0)
                  goto LABEL_78;
              }
              v34 = *(_DWORD *)(v11 + 20);
              if ((v34 & 0x80000000) == 0
                || (v45 = v11 - 32 * (v34 & 0x7FFFFFF), v48 = *(_QWORD *)(v45 - 8), v46 = v45 - 8, (v47 = v48) == 0))
              {
LABEL_74:
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v11, 45) & 1) == 0
                  && (llvm::CallBase::hasFnAttrOnCalledFunction(v11, 44) & 1) == 0)
                {
                  goto LABEL_76;
                }
                goto LABEL_78;
              }
              v49 = -v47;
              while (1)
              {
                v50 = *(_DWORD *)(*(_QWORD *)(v46 + v49) + 8);
                v42 = v50 > 7;
                v51 = (1 << v50) & 0x83;
                if (v42 || v51 == 0)
                  break;
                v49 += 16;
                if (!v49)
                  goto LABEL_74;
              }
LABEL_76:
              if ((sub_1C4D91D40(v11, v17, 45) & 1) != 0 || (sub_1C4D91D40(v11, v17, 44) & 1) != 0)
              {
LABEL_78:
                v8 = 1;
                goto LABEL_79;
              }
              v35 = *(_QWORD *)(v11 + 64);
              if (!v35 || (*(_BYTE *)(v35 + 20) & 4) == 0)
              {
                if ((v62 = 7, sub_1C53E4BBC(v11, &v62, 1uLL))
                  && ((v53 = *v15) == 0
                   || *(_BYTE *)(v53 + 16)
                   || *(_QWORD *)(v53 + 24) != *(_QWORD *)(v11 + 72)
                   || *(_DWORD *)(v53 + 36) != 7)
                  || (llvm::CallBase::hasFnAttrOnCalledFunction(v11, 66) & 1) == 0)
                {
                  if ((sub_1C4D91D40(v11, v17, 66) & 1) == 0)
                    goto LABEL_3;
                }
              }
            }
            else
            {
LABEL_39:
              if (v12 != 61)
                goto LABEL_129;
              if (*(_QWORD *)(v11 - 64) == *v10 || (*(_WORD *)(v11 + 18) & 1) != 0)
                goto LABEL_3;
            }
            v9 = 1;
            goto LABEL_79;
          }
        }
LABEL_80:
        if (!v7)
        {
          if ((v9 & 1) != 0)
            v55 = 66;
          else
            v55 = 44;
          if ((v8 & 1) != 0)
            v55 = 45;
          if ((v9 & v8 & 1) != 0)
            v4 = 0;
          else
            v4 = v55;
          goto LABEL_129;
        }
      }
    }
    v4 = 44;
  }
LABEL_129:
  if (v58 != v57)
    free(v58);
  if (v63 != v65)
    free(v63);
  return v4;
}

uint64_t sub_1C56D0BD8(uint64_t a1, int a2)
{
  int hasAttribute;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  hasAttribute = llvm::Argument::hasAttribute(a1, a2);
  if ((hasAttribute & 1) == 0)
  {
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v5 + 112) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v5 + 112), **(uint64_t ***)v5, *(_DWORD *)(a1 + 32) + 1, 66);
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v6 + 112) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v6 + 112), **(uint64_t ***)v6, *(_DWORD *)(a1 + 32) + 1, 45);
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v7 + 112) = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v7 + 112), **(uint64_t ***)v7, *(_DWORD *)(a1 + 32) + 1, 44);
    v8 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v8 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v8 + 112), **(uint64_t ***)v8, *(_DWORD *)(a1 + 32) + 1, a2);
  }
  return hasAttribute ^ 1u;
}

void sub_1C56D0CA0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8179B40;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56D0CF0(uint64_t result)
{
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_1C56D0CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  llvm::Module *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 < 0x1C)
    goto LABEL_29;
  v5 = v4 - 33;
  v6 = v5 > 0x33;
  v7 = (1 << v5) & 0x8000000000041;
  if (v6 || v7 == 0)
    goto LABEL_29;
  v9 = *(_QWORD *)(v3 - 32);
  if (!v9 || *(_BYTE *)(v9 + 16) || *(_QWORD *)(v9 + 24) != *(_QWORD *)(v3 + 72))
    goto LABEL_29;
  v10 = *(_DWORD *)(v9 + 32);
  if (*(_QWORD *)(v9 + 72) == v9 + 72 && (v10 & 0x800000) == 0)
    goto LABEL_29;
  if (((1 << (v10 & 0xF)) & 0x63E) != 0)
    goto LABEL_29;
  v13 = *(llvm::Module **)(v9 + 40);
  if (v13)
  {
    if (llvm::Module::getSemanticInterposition(v13) && (*(_BYTE *)(v9 + 33) & 0x40) == 0)
      goto LABEL_29;
  }
  v14 = *(_QWORD *)(a1 + 64);
  v26 = 0;
  v27 = v9;
  if ((sub_1C5684DE8(v14, &v27, &v26) & 1) == 0
    || ((v15 = *(_DWORD *)(v3 + 20),
         v16 = v3 - 32 * (v15 & 0x7FFFFFF),
         v17 = (unint64_t)(a2 - v16) >> 5,
         v18 = *(unsigned __int8 *)(v3 + 16),
         v18 != 84)
      ? (v18 != 39
       ? (v19 = 2)
       : (v19 = (*(_DWORD *)(v3 + 80) + 1)))
      : (v19 = 0),
        (v15 & 0x80000000) == 0 || (v25 = *(_QWORD *)(v16 - 8), (v25 & 0xFFFFFFFF0) == 0)
      ? (v20 = 0)
      : (v20 = *(_DWORD *)(v16 - 12) - *(_DWORD *)(v16 - v25)),
        v17 >= ((v3 - 32 * v19 + 32 * (unint64_t)-v20 - v16 - 32) >> 5)
     || *(_QWORD *)(v9 + 96) <= (unint64_t)v17))
  {
LABEL_29:
    result = 1;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    v21 = (unint64_t)(a2 - v16) >> 5;
    if ((*(_WORD *)(v9 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v9);
    v22 = *(_QWORD *)(v9 + 88) + 40 * v21;
    v23 = *(unsigned int *)(a1 + 24);
    if (v23 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, a1 + 32, v23 + 1, 8);
      LODWORD(v23) = *(_DWORD *)(a1 + 24);
    }
    result = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v23) = v22;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void sub_1C56D0EE4(int *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;

  v29 = a2;
  v4 = *a1 + 1;
  *a1 = v4;
  *(_DWORD *)sub_1C56D136C((uint64_t)(a1 + 2), &v29) = v4;
  v6 = (uint64_t *)*((_QWORD *)a1 + 5);
  v5 = *((_QWORD *)a1 + 6);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (_QWORD *)*((_QWORD *)a1 + 4);
    v9 = v6 - v8;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      goto LABEL_36;
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        goto LABEL_37;
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = (uint64_t *)&v13[8 * v9];
    *v14 = a2;
    v7 = v14 + 1;
    if (v6 != v8)
    {
      do
      {
        v15 = *--v6;
        *--v14 = v15;
      }
      while (v6 != v8);
      v6 = (uint64_t *)*((_QWORD *)a1 + 4);
    }
    *((_QWORD *)a1 + 4) = v14;
    *((_QWORD *)a1 + 5) = v7;
    *((_QWORD *)a1 + 6) = &v13[8 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = a2;
    v7 = v6 + 1;
  }
  *((_QWORD *)a1 + 5) = v7;
  v16 = v29;
  v17 = *(_QWORD *)(v29 + 8);
  v18 = *a1;
  v20 = (char *)*((_QWORD *)a1 + 11);
  v19 = *((_QWORD *)a1 + 12);
  if ((unint64_t)v20 < v19)
  {
    *(_QWORD *)v20 = v29;
    *((_QWORD *)v20 + 1) = v17;
    v21 = v20 + 24;
    *((_DWORD *)v20 + 4) = v18;
    goto LABEL_35;
  }
  v22 = (_BYTE *)*((_QWORD *)a1 + 10);
  v23 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v22) >> 3) + 1;
  if (v23 > 0xAAAAAAAAAAAAAAALL)
LABEL_36:
    abort();
  v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v22) >> 3);
  if (2 * v24 > v23)
    v23 = 2 * v24;
  if (v24 >= 0x555555555555555)
    v25 = 0xAAAAAAAAAAAAAAALL;
  else
    v25 = v23;
  if (!v25)
  {
    v26 = 0;
    goto LABEL_30;
  }
  if (v25 > 0xAAAAAAAAAAAAAAALL)
LABEL_37:
    sub_1C4764EE4();
  v26 = (char *)operator new(24 * v25);
LABEL_30:
  v27 = &v26[8 * ((v20 - v22) >> 3)];
  *(_QWORD *)v27 = v16;
  *((_QWORD *)v27 + 1) = v17;
  *((_DWORD *)v27 + 4) = v18;
  v21 = v27 + 24;
  if (v20 != v22)
  {
    do
    {
      v28 = *(_OWORD *)(v20 - 24);
      *((_DWORD *)v27 - 2) = *((_DWORD *)v20 - 2);
      *(_OWORD *)(v27 - 24) = v28;
      v27 -= 24;
      v20 -= 24;
    }
    while (v20 != v22);
    v20 = (char *)*((_QWORD *)a1 + 10);
  }
  *((_QWORD *)a1 + 10) = v27;
  *((_QWORD *)a1 + 11) = v21;
  *((_QWORD *)a1 + 12) = &v26[24 * v25];
  if (v20)
    operator delete(v20);
LABEL_35:
  *((_QWORD *)a1 + 11) = v21;
}

uint64_t sub_1C56D10F4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(result + 64) = *(_QWORD *)(result + 56);
  v2 = *(_QWORD *)(result + 80);
  v1 = *(_QWORD *)(result + 88);
  if (v2 != v1)
  {
    v3 = result;
    v4 = result + 8;
    while (1)
    {
      v5 = *(_QWORD *)(v1 - 24);
      v6 = *(uint64_t **)(v1 - 16);
      if (v6 != (uint64_t *)(*(_QWORD *)(v5 + 8) + 8 * *(unsigned int *)(v5 + 16)))
      {
        while (1)
        {
          *(_QWORD *)(v1 - 16) = v6 + 1;
          v7 = *v6;
          v8 = *(_QWORD *)(v3 + 8);
          v9 = *(unsigned int *)(v3 + 24);
          if (!(_DWORD)v9)
            goto LABEL_10;
          LODWORD(v10) = ((v7 >> 4) ^ (v7 >> 9)) & (v9 - 1);
          v11 = (uint64_t *)(v8 + 16 * v10);
          v12 = *v11;
          if (*v11 != v7)
            break;
LABEL_11:
          if (v11 == (uint64_t *)(v8 + 16 * v9))
          {
            sub_1C56D0EE4((int *)v3, v7);
            v1 = *(_QWORD *)(v3 + 88);
          }
          else
          {
            v15 = *((_DWORD *)v11 + 2);
            if (*(_DWORD *)(v1 - 8) > v15)
              *(_DWORD *)(v1 - 8) = v15;
          }
          v5 = *(_QWORD *)(v1 - 24);
          v6 = *(uint64_t **)(v1 - 16);
          if (v6 == (uint64_t *)(*(_QWORD *)(v5 + 8) + 8 * *(unsigned int *)(v5 + 16)))
          {
            v2 = *(_QWORD *)(v3 + 80);
            goto LABEL_17;
          }
        }
        v13 = 1;
        while (v12 != -4096)
        {
          v14 = v10 + v13++;
          v10 = v14 & (v9 - 1);
          v12 = *(_QWORD *)(v8 + 16 * v10);
          if (v12 == v7)
          {
            v11 = (uint64_t *)(v8 + 16 * v10);
            goto LABEL_11;
          }
        }
LABEL_10:
        v11 = (uint64_t *)(v8 + 16 * v9);
        goto LABEL_11;
      }
LABEL_17:
      v29 = v5;
      v16 = *(_DWORD *)(v1 - 8);
      *(_QWORD *)(v3 + 88) = v1 - 24;
      if (v2 != v1 - 24 && *(_DWORD *)(v1 - 32) > v16)
        *(_DWORD *)(v1 - 32) = v16;
      result = sub_1C56D136C(v4, &v29);
      if (v16 == *(_DWORD *)result)
        break;
      v2 = *(_QWORD *)(v3 + 80);
      v1 = *(_QWORD *)(v3 + 88);
      if (v2 == v1)
        return result;
    }
    v17 = *(_QWORD **)(v3 + 64);
    do
    {
      v18 = *(_QWORD *)(v3 + 40);
      v19 = *(_QWORD *)(v3 + 72);
      if ((unint64_t)v17 >= v19)
      {
        v21 = *(_QWORD **)(v3 + 56);
        v22 = v17 - v21;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61)
          abort();
        v24 = v19 - (_QWORD)v21;
        if (v24 >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 >> 61)
            sub_1C4764EE4();
          v26 = (char *)operator new(8 * v25);
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[8 * v22];
        *(_QWORD *)v27 = *(_QWORD *)(v18 - 8);
        v20 = v27 + 8;
        if (v17 != v21)
        {
          do
          {
            v28 = *--v17;
            *((_QWORD *)v27 - 1) = v28;
            v27 -= 8;
          }
          while (v17 != v21);
          v17 = *(_QWORD **)(v3 + 56);
        }
        *(_QWORD *)(v3 + 56) = v27;
        *(_QWORD *)(v3 + 64) = v20;
        *(_QWORD *)(v3 + 72) = &v26[8 * v25];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v17 = *(_QWORD *)(v18 - 8);
        v20 = v17 + 1;
      }
      *(_QWORD *)(v3 + 64) = v20;
      *(_QWORD *)(v3 + 40) -= 8;
      result = sub_1C56D136C(v4, v20 - 1);
      *(_DWORD *)result = -1;
      v17 = *(_QWORD **)(v3 + 64);
    }
    while (*(v17 - 1) != v29);
  }
  return result;
}

uint64_t sub_1C56D136C(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v24 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v24);
  v5 = v24;
  if ((v4 & 1) != 0)
    return v5 + 8;
  v25 = v24;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    v8 = 2 * v7;
    goto LABEL_9;
  }
  v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    v10 = *(_QWORD *)a1;
    v11 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40)
      v14 = v13 + 1;
    else
      v14 = 64;
    *(_DWORD *)(a1 + 16) = v14;
    v15 = operator new(16 * v14, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v15;
    if (v10)
    {
      *(_QWORD *)(a1 + 8) = 0;
      v16 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v16)
      {
        v17 = 16 * v16;
        do
        {
          *v15 = -4096;
          v15 += 2;
          v17 -= 16;
        }
        while (v17);
      }
      if ((_DWORD)v7)
      {
        v18 = (_DWORD *)(v10 + 8);
        v19 = 16 * v7;
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v26 = 0;
            sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v26);
            v21 = v26;
            *v26 = v20;
            *((_DWORD *)v21 + 2) = *v18;
            ++*(_DWORD *)(a1 + 8);
          }
          v18 += 4;
          v19 -= 16;
        }
        while (v19);
      }
      MEMORY[0x1CAA32FB4](v10, 8);
      v15 = *(_QWORD **)a1;
      LODWORD(v22) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      v22 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v22)
      {
        v23 = 0;
        do
        {
          v15[v23] = -4096;
          v23 += 2;
        }
        while (2 * v22 != v23);
      }
    }
    sub_1C49F21C0((uint64_t)v15, v22, *a2, &v25);
    v6 = *(_DWORD *)(a1 + 8);
    v5 = v25;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*(_QWORD *)v5 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v5 = *a2;
  *(_DWORD *)(v5 + 8) = 0;
  return v5 + 8;
}

void sub_1C56D1550(_QWORD *a1)
{
  _QWORD *v2;

  if (a1)
  {
    sub_1C56D1550(*a1);
    sub_1C56D1550(a1[1]);
    v2 = (_QWORD *)a1[6];
    if (v2 != a1 + 8)
      free(v2);
    operator delete(a1);
  }
}

uint64_t sub_1C56D159C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = *(_QWORD *)(a3 + 24);
  if (v11)
  {
    if (v11 == a3)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  v12 = *(_QWORD *)(a4 + 24);
  if (v12)
  {
    if (v12 == a4)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  v13 = *(_QWORD *)(a5 + 24);
  if (v13)
  {
    if (v13 == a5)
    {
      *(_QWORD *)(a1 + 88) = a1 + 64;
      (*(void (**)(_QWORD))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_DWORD *)(a1 + 96) = a2;
  *(_BYTE *)(a1 + 100) = a6;
  return a1;
}

void sub_1C56D16B0(uint64_t a1, uint64_t a2, llvm::SmallPtrSetImplBase *a3)
{
  int v4;
  unint64_t v6;
  unsigned int v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _BYTE *v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  llvm::GlobalValue *Section;
  uint64_t v36;
  llvm::Module *v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  llvm::GlobalValue *v42;
  uint64_t v43;
  llvm::Module *v44;
  char v45;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *i;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char v78;
  char *v79;
  uint64_t v80;
  char v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  _BYTE *v112;
  _QWORD *v113;
  llvm::SmallPtrSetImplBase *v114;
  _QWORD *v115;
  char *v116;
  _QWORD *v117;
  void *v118;
  uint64_t v119;
  _BYTE v120[416];
  void *v121;
  uint64_t v122;
  _QWORD v123[54];

  v111 = a2;
  v4 = 0;
  v123[52] = *MEMORY[0x1E0C80C00];
  v110 = (char *)v123;
  v121 = v123;
  v122 = 0x400000000;
  if (&v121 == (void **)a1)
    goto LABEL_25;
  v6 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v6)
    goto LABEL_25;
  if (v6 <= 4)
  {
    v9 = *(_BYTE **)a1;
    v10 = *(_QWORD *)a1 + 104 * v6;
    v8 = v110;
LABEL_7:
    v11 = 0;
    do
    {
      v12 = &v8[v11];
      v13 = &v9[v11];
      v14 = *(char **)&v9[v11 + 24];
      if (v14)
      {
        if (v13 == v14)
        {
          *(_QWORD *)&v8[v11 + 24] = v12;
          (*(void (**)(_QWORD))(**((_QWORD **)v13 + 3) + 24))(*((_QWORD *)v13 + 3));
        }
        else
        {
          *(_QWORD *)&v8[v11 + 24] = (*(uint64_t (**)(char *, char *))(*(_QWORD *)v14 + 16))(v14, v12);
        }
      }
      else
      {
        *((_QWORD *)v12 + 3) = 0;
      }
      v15 = &v8[v11];
      v16 = &v9[v11];
      v17 = *(char **)&v9[v11 + 56];
      if (v17)
      {
        if (v16 + 32 == v17)
        {
          *(_QWORD *)&v8[v11 + 56] = v15 + 32;
          (*(void (**)(_QWORD))(**((_QWORD **)v16 + 7) + 24))(*((_QWORD *)v16 + 7));
        }
        else
        {
          *(_QWORD *)&v8[v11 + 56] = (*(uint64_t (**)(char *))(*(_QWORD *)v17 + 16))(v17);
        }
      }
      else
      {
        *((_QWORD *)v15 + 7) = 0;
      }
      v18 = &v8[v11];
      v19 = &v9[v11];
      v20 = *(char **)&v9[v11 + 88];
      if (v20)
      {
        if (v19 + 64 == v20)
        {
          *(_QWORD *)&v8[v11 + 88] = v18 + 64;
          (*(void (**)(_QWORD))(**((_QWORD **)v19 + 11) + 24))(*((_QWORD *)v19 + 11));
        }
        else
        {
          *(_QWORD *)&v8[v11 + 88] = (*(uint64_t (**)(char *))(*(_QWORD *)v20 + 16))(v20);
        }
      }
      else
      {
        *((_QWORD *)v18 + 11) = 0;
      }
      v21 = &v8[v11];
      v22 = *(_DWORD *)&v9[v11 + 96];
      v21[100] = v9[v11 + 100];
      *((_DWORD *)v21 + 24) = v22;
      v11 += 104;
    }
    while (&v9[v11] != (_BYTE *)v10);
    goto LABEL_24;
  }
  sub_1C56D23F4((uint64_t)&v121, v6);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (char *)v121;
    v9 = *(_BYTE **)a1;
    v10 = *(_QWORD *)a1 + 104 * v7;
    goto LABEL_7;
  }
LABEL_24:
  LODWORD(v122) = v6;
  v4 = v6;
LABEL_25:
  v23 = *(unsigned int *)(v111 + 80);
  if ((_DWORD)v23)
  {
    v24 = *(_QWORD **)(v111 + 72);
    v25 = &v24[v23];
    v26 = v120;
    v113 = v25;
    v114 = a3;
    v112 = v120;
    while (1)
    {
      v27 = v122;
      v28 = (char *)v121;
      if (!(_DWORD)v122)
        goto LABEL_213;
      v29 = 0;
      v30 = *v24;
      v31 = (char *)v121 + 104 * v122;
      v32 = 104 * v122;
      v117 = (_QWORD *)(*v24 + 72);
      while (1)
      {
        v33 = *(_QWORD *)&v28[v29 + 24];
        if (!v33)
          goto LABEL_216;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 48))(v33, v30) & 1) != 0)
          goto LABEL_43;
        v34 = *(unsigned __int8 *)(v30 + 16);
        if (!v30 || v34 != 3)
          break;
        if ((*(_DWORD *)(v30 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_60;
LABEL_36:
        if (v28[v29 + 100])
          goto LABEL_37;
LABEL_43:
        v29 += 104;
        if (v32 == v29)
          goto LABEL_95;
      }
      if (*(_BYTE *)(v30 + 16))
        goto LABEL_36;
      if ((_QWORD *)*v117 == v117 && (*(_BYTE *)(v30 + 34) & 0x80) == 0)
        goto LABEL_60;
      if (!v28[v29 + 100])
        goto LABEL_43;
      if ((_QWORD *)*v117 == v117 && (*(_BYTE *)(v30 + 34) & 0x80) == 0)
        goto LABEL_60;
LABEL_37:
      if (((1 << (*(_DWORD *)(v30 + 32) & 0xF)) & 0x7D5) != 0)
      {
        if (v34 != 3
          || (Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v30), v36 != 12)
          || (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
            ? (v38 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
            : (v38 = 0),
              !v38))
        {
          if ((*(_DWORD *)(v30 + 32) & 0xFu) - 5 < 4 || ((1 << (*(_DWORD *)(v30 + 32) & 0xF)) & 0x614) == 0)
          {
            v37 = *(llvm::Module **)(v30 + 40);
            if (!v37 || !llvm::Module::getSemanticInterposition(v37) || (*(_BYTE *)(v30 + 33) & 0x40) != 0)
              goto LABEL_43;
          }
        }
      }
LABEL_60:
      v31 = &v28[v29];
      if (104 * v27 - 104 != v29)
      {
        v39 = 104 * v27 - 104;
        do
        {
          v40 = *(_QWORD *)&v28[v29 + 128];
          if (!v40)
            goto LABEL_216;
          if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 48))(v40, v30) & 1) == 0)
          {
            v41 = *(unsigned __int8 *)(v30 + 16);
            if (v30 && v41 == 3)
            {
              if ((*(_DWORD *)(v30 + 20) & 0x7FFFFFF) == 0)
                goto LABEL_77;
            }
            else if (!*(_BYTE *)(v30 + 16))
            {
              if ((_QWORD *)*v117 == v117 && (*(_BYTE *)(v30 + 34) & 0x80) == 0)
                goto LABEL_77;
              if (!v28[v29 + 204])
                goto LABEL_76;
              if ((_QWORD *)*v117 == v117 && (*(_BYTE *)(v30 + 34) & 0x80) == 0)
                goto LABEL_77;
LABEL_70:
              if (((1 << (*(_DWORD *)(v30 + 32) & 0xF)) & 0x7D5) == 0)
                goto LABEL_77;
              if (v41 == 3)
              {
                v42 = llvm::GlobalValue::getSection((llvm::GlobalValue *)v30);
                if (v43 == 12
                  && *(_QWORD *)v42 == *(_QWORD *)"llvm.ptrauth"
                  && *((_DWORD *)v42 + 2) == (unint64_t)*(unsigned int *)"auth")
                {
                  goto LABEL_77;
                }
              }
              if ((*(_DWORD *)(v30 + 32) & 0xFu) - 5 >= 4 && ((1 << (*(_DWORD *)(v30 + 32) & 0xF)) & 0x614) != 0)
                goto LABEL_77;
              v44 = *(llvm::Module **)(v30 + 40);
              if (v44)
              {
                if (llvm::Module::getSemanticInterposition(v44) && (*(_BYTE *)(v30 + 33) & 0x40) == 0)
                  goto LABEL_77;
              }
              goto LABEL_76;
            }
            if (v28[v29 + 204])
              goto LABEL_70;
          }
LABEL_76:
          sub_1C48AAFD8(v31, (uint64_t)&v28[v29 + 104]);
          sub_1C48AAFD8((_QWORD *)v31 + 4, (uint64_t)&v28[v29 + 136]);
          sub_1C48AAFD8((_QWORD *)v31 + 8, (uint64_t)&v28[v29 + 168]);
          v45 = v28[v29 + 204];
          *((_DWORD *)v31 + 24) = *(_DWORD *)&v28[v29 + 200];
          v31[100] = v45;
          v31 += 104;
LABEL_77:
          v29 += 104;
        }
        while (v39 != v29);
      }
LABEL_95:
      sub_1C56D2BCC((uint64_t *)&v121, (uint64_t)v31, (uint64_t)v121 + 104 * v122);
      v118 = v26;
      v119 = 0x400000000;
      if (!(_DWORD)v122)
        goto LABEL_178;
      v47 = v121;
      v48 = 104 * v122;
      do
      {
        v49 = v47[3];
        if (!v49)
          goto LABEL_216;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 48))(v49, v30) & 1) == 0)
          sub_1C56D2230((uint64_t)&v118, (unint64_t)v47);
        v47 += 13;
        v48 -= 104;
      }
      while (v48);
      v50 = v119;
      if (!(_DWORD)v119)
        goto LABEL_178;
      v115 = v24;
      for (i = *(_QWORD **)(v30 + 80); ; i = (_QWORD *)i[1])
      {
        if (i == v117)
          goto LABEL_161;
        v52 = i - 3;
        if (!i)
          v52 = 0;
        v53 = (_QWORD *)v52[6];
        if (v53 != v52 + 5)
          break;
      }
      while (1)
      {
        v54 = 0;
        if (v53)
          v55 = v53 - 3;
        else
          v55 = 0;
        v56 = (char *)v118;
        v57 = (char *)v118 + 104 * v50;
        while (1)
        {
          v58 = *(_QWORD *)&v56[v54 + 56];
          if (!v58)
            goto LABEL_216;
          if ((*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v58 + 48))(v58, v55))
            break;
          v54 += 104;
          if (104 * v50 == v54)
          {
            v59 = (uint64_t)v57;
            goto LABEL_150;
          }
        }
        v60 = v121;
        v61 = v122;
        v62 = (uint64_t)&v56[v54];
        if ((_DWORD)v122)
        {
          v63 = 0;
          v64 = 104 * v122;
          v65 = v64 - 104;
          while (1)
          {
            v66 = (char *)v121 + v63;
            if (*(_DWORD *)((char *)v121 + v63 + 96) == *(_DWORD *)(v62 + 96))
              break;
            v63 += 104;
            v65 -= 104;
            if (v64 == v63)
            {
              v66 = (char *)v121 + 104 * v122;
              goto LABEL_128;
            }
          }
          if (v64 - 104 != v63)
          {
            v109 = v50;
            v116 = v57;
            v67 = (uint64_t)(v66 + 104);
            do
            {
              if (*(_DWORD *)(v67 + 96) != *(_DWORD *)(v62 + 96))
              {
                sub_1C48AAFD8(v66, v67);
                sub_1C48AAFD8((_QWORD *)v66 + 4, v67 + 32);
                sub_1C48AAFD8((_QWORD *)v66 + 8, v67 + 64);
                v68 = *(_BYTE *)(v67 + 100);
                *((_DWORD *)v66 + 24) = *(_DWORD *)(v67 + 96);
                v66[100] = v68;
                v66 += 104;
              }
              v67 += 104;
              v65 -= 104;
            }
            while (v65);
            v60 = v121;
            v61 = v122;
            v57 = v116;
            v50 = v109;
          }
        }
        else
        {
          v61 = 0;
          v66 = (char *)v121;
        }
LABEL_128:
        sub_1C56D2BCC((uint64_t *)&v121, (uint64_t)v66, (uint64_t)v60 + 104 * v61);
        if (104 * v50 - 104 != v54)
        {
          v69 = v62 + 104;
          v59 = v62;
          v116 = v57;
          while (1)
          {
            v70 = v62;
            v71 = *(_QWORD *)(v62 + 160);
            if (!v71)
              break;
            v62 = v69;
            if ((*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v71 + 48))(v71, v55))
            {
              v72 = (char *)v121;
              v73 = v122;
              if ((_DWORD)v122)
              {
                v74 = 0;
                v75 = 104 * v122;
                v76 = v75 - 104;
                while (1)
                {
                  v77 = (char *)v121 + v74;
                  if (*(_DWORD *)((char *)v121 + v74 + 96) == *(_DWORD *)(v70 + 200))
                    break;
                  v74 += 104;
                  v76 -= 104;
                  if (v75 == v74)
                  {
                    v77 = (char *)v121 + 104 * v122;
                    goto LABEL_145;
                  }
                }
                if (v75 - 104 != v74)
                {
                  v80 = (uint64_t)(v77 + 104);
                  do
                  {
                    if (*(_DWORD *)(v80 + 96) != *(_DWORD *)(v70 + 200))
                    {
                      sub_1C48AAFD8(v77, v80);
                      sub_1C48AAFD8((_QWORD *)v77 + 4, v80 + 32);
                      sub_1C48AAFD8((_QWORD *)v77 + 8, v80 + 64);
                      v81 = *(_BYTE *)(v80 + 100);
                      *((_DWORD *)v77 + 24) = *(_DWORD *)(v80 + 96);
                      v77[100] = v81;
                      v77 += 104;
                    }
                    v80 += 104;
                    v76 -= 104;
                  }
                  while (v76);
                  v72 = (char *)v121;
                  v73 = v122;
                  v57 = v116;
                }
LABEL_145:
                v79 = &v72[104 * v73];
                v72 = v77;
              }
              else
              {
                v79 = (char *)v121;
              }
              sub_1C56D2BCC((uint64_t *)&v121, (uint64_t)v72, (uint64_t)v79);
            }
            else
            {
              sub_1C48AAFD8((_QWORD *)v59, v62);
              sub_1C48AAFD8((_QWORD *)(v59 + 32), v70 + 136);
              sub_1C48AAFD8((_QWORD *)(v59 + 64), v70 + 168);
              v78 = *(_BYTE *)(v70 + 204);
              *(_DWORD *)(v59 + 96) = *(_DWORD *)(v70 + 200);
              *(_BYTE *)(v59 + 100) = v78;
              v59 += 104;
            }
            v69 = v62 + 104;
            if ((char *)(v62 + 104) == v57)
              goto LABEL_150;
          }
LABEL_216:
          sub_1C485C2F0();
        }
        v59 = v62;
LABEL_150:
        sub_1C56D2BCC((uint64_t *)&v118, v59, (uint64_t)v118 + 104 * v119);
        v50 = v119;
        if (!(_DWORD)v119)
          break;
        v53 = (_QWORD *)v53[1];
        v82 = i - 3;
        if (!i)
          v82 = 0;
        if (v53 == v82 + 5)
        {
          v83 = v117;
          while (1)
          {
            i = (_QWORD *)i[1];
            if (i == v117)
              break;
            v84 = i - 3;
            if (!i)
              v84 = 0;
            v53 = (_QWORD *)v84[6];
            if (v53 != v84 + 5)
              goto LABEL_160;
          }
LABEL_161:
          v85 = (char *)v118;
          v86 = 104 * v50;
          a3 = v114;
          v24 = v115;
          v26 = v112;
          v25 = v113;
          while (2)
          {
            v87 = &v85[v86];
            v88 = *(char **)&v85[v86 - 16];
            if (&v85[v86 - 40] == v88)
            {
              v88 = &v85[v86 - 40];
              v89 = 4;
LABEL_166:
              (*(void (**)(void))(*(_QWORD *)v88 + 8 * v89))();
            }
            else if (v88)
            {
              v89 = 5;
              goto LABEL_166;
            }
            v90 = *(char **)&v85[v86 - 48];
            if (&v85[v86 - 72] == v90)
            {
              v90 = &v85[v86 - 72];
              v91 = 4;
LABEL_171:
              (*(void (**)(void))(*(_QWORD *)v90 + 8 * v91))();
            }
            else if (v90)
            {
              v91 = 5;
              goto LABEL_171;
            }
            v92 = *(char **)&v85[v86 - 80];
            if (v87 - 104 == v92)
            {
              v92 = v87 - 104;
              v93 = 4;
LABEL_176:
              (*(void (**)(void))(*(_QWORD *)v92 + 8 * v93))();
            }
            else if (v92)
            {
              v93 = 5;
              goto LABEL_176;
            }
            v86 -= 104;
            if (!v86)
              goto LABEL_178;
            continue;
          }
        }
        v83 = v117;
LABEL_160:
        if (i == v83)
          goto LABEL_161;
      }
      a3 = v114;
      v24 = v115;
      v26 = v112;
      v25 = v113;
LABEL_178:
      if (v118 != v26)
        free(v118);
      if (++v24 == v25)
      {
        v4 = v122;
        break;
      }
    }
  }
  if (v4)
  {
    v94 = *(unsigned int *)(v111 + 80);
    if ((_DWORD)v94)
    {
      v95 = *(uint64_t **)(v111 + 72);
      v96 = &v95[v94];
      while (!(_DWORD)v122)
      {
LABEL_193:
        if (++v95 == v96)
          goto LABEL_194;
      }
      v97 = *v95;
      v98 = 104 * v122;
      v99 = (char *)v121 + 88;
      while (1)
      {
        v100 = *(v99 - 8);
        if (!v100)
          goto LABEL_216;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 48))(v100, v97) & 1) == 0)
        {
          sub_1C4774094(a3, v97);
          if (!*v99)
            goto LABEL_216;
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v99 + 48))(*v99, v97);
        }
        v99 += 13;
        v98 -= 104;
        if (!v98)
          goto LABEL_193;
      }
    }
  }
LABEL_194:
  v28 = (char *)v121;
  if (!(_DWORD)v122)
    goto LABEL_213;
  v101 = 104 * v122;
  do
  {
    v102 = &v28[v101];
    v103 = *(char **)&v28[v101 - 16];
    if (&v28[v101 - 40] == v103)
    {
      v103 = &v28[v101 - 40];
      v104 = 4;
    }
    else
    {
      if (!v103)
        goto LABEL_201;
      v104 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v103 + 8 * v104))();
LABEL_201:
    v105 = *(char **)&v28[v101 - 48];
    if (&v28[v101 - 72] == v105)
    {
      v105 = &v28[v101 - 72];
      v106 = 4;
    }
    else
    {
      if (!v105)
        goto LABEL_206;
      v106 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v105 + 8 * v106))();
LABEL_206:
    v107 = *(char **)&v28[v101 - 80];
    if (v102 - 104 == v107)
    {
      v107 = v102 - 104;
      v108 = 4;
    }
    else
    {
      if (!v107)
        goto LABEL_211;
      v108 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v107 + 8 * v108))();
LABEL_211:
    v101 -= 104;
  }
  while (v101);
  v28 = (char *)v121;
LABEL_213:
  if (v28 != v110)
    free(v28);
}

uint64_t sub_1C56D2230(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v13 = v4 + 1;
    v14 = v5 + 104 * v4;
    if (v5 <= a2 && v14 > a2)
    {
      v16 = a2 - v5;
      sub_1C56D23F4(a1, v13);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v16;
    }
    else
    {
      sub_1C56D23F4(a1, v13);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(_DWORD *)(a1 + 8);
  v7 = v5 + 104 * v6;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8)
  {
    if (v8 == a2)
    {
      *(_QWORD *)(v7 + 24) = v7;
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v5 + 104 * v6);
    }
    else
    {
      *(_QWORD *)(v7 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  else
  {
    *(_QWORD *)(v7 + 24) = 0;
  }
  v9 = *(_QWORD *)(a2 + 56);
  if (v9)
  {
    if (v9 == a2 + 32)
    {
      *(_QWORD *)(v5 + 104 * v6 + 56) = v5 + 104 * v6 + 32;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56));
    }
    else
    {
      *(_QWORD *)(v5 + 104 * v6 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
  }
  else
  {
    *(_QWORD *)(v5 + 104 * v6 + 56) = 0;
  }
  result = *(_QWORD *)(a2 + 88);
  if (result)
  {
    if (result == a2 + 64)
    {
      *(_QWORD *)(v5 + 104 * v6 + 88) = v5 + 104 * v6 + 64;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 88) + 24))(*(_QWORD *)(a2 + 88));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      *(_QWORD *)(v5 + 104 * v6 + 88) = result;
    }
  }
  else
  {
    *(_QWORD *)(v5 + 104 * v6 + 88) = 0;
  }
  v11 = v5 + 104 * v6;
  v12 = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(v11 + 100) = *(_BYTE *)(a2 + 100);
  *(_DWORD *)(v11 + 96) = v12;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1C56D23F4(uint64_t a1, unint64_t a2)
{
  char *v3;
  _BYTE *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;

  v29 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 104, &v29);
  v4 = *(_BYTE **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = 0;
    v7 = 104 * v5;
    do
    {
      v8 = &v4[v6];
      v9 = &v3[v6];
      v10 = *(char **)&v4[v6 + 24];
      if (v10)
      {
        if (v8 == v10)
        {
          *((_QWORD *)v9 + 3) = v9;
          (*(void (**)(_QWORD))(**((_QWORD **)v8 + 3) + 24))(*((_QWORD *)v8 + 3));
        }
        else
        {
          *((_QWORD *)v9 + 3) = v10;
          *((_QWORD *)v8 + 3) = 0;
        }
      }
      else
      {
        *((_QWORD *)v9 + 3) = 0;
      }
      v11 = &v3[v6];
      v12 = &v4[v6];
      v13 = *(char **)&v4[v6 + 56];
      if (v13)
      {
        if (v12 + 32 == v13)
        {
          *((_QWORD *)v11 + 7) = v11 + 32;
          (*(void (**)(_QWORD))(**((_QWORD **)v12 + 7) + 24))(*((_QWORD *)v12 + 7));
        }
        else
        {
          *((_QWORD *)v11 + 7) = v13;
          *((_QWORD *)v12 + 7) = 0;
        }
      }
      else
      {
        *((_QWORD *)v11 + 7) = 0;
      }
      v14 = &v3[v6];
      v15 = &v4[v6];
      v16 = *(char **)&v4[v6 + 88];
      if (v16)
      {
        if (v15 + 64 == v16)
        {
          *((_QWORD *)v14 + 11) = v14 + 64;
          (*(void (**)(_QWORD))(**((_QWORD **)v15 + 11) + 24))(*((_QWORD *)v15 + 11));
        }
        else
        {
          *((_QWORD *)v14 + 11) = v16;
          *((_QWORD *)v15 + 11) = 0;
        }
      }
      else
      {
        *((_QWORD *)v14 + 11) = 0;
      }
      v17 = &v3[v6];
      v18 = *(_DWORD *)&v4[v6 + 96];
      v17[100] = v4[v6 + 100];
      *((_DWORD *)v17 + 24) = v18;
      v6 += 104;
    }
    while (v7 != v6);
    v4 = *(_BYTE **)a1;
    v19 = *(_DWORD *)(a1 + 8);
    if (v19)
    {
      v20 = 104 * v19;
      while (1)
      {
        v21 = &v4[v20];
        v22 = *(_QWORD **)&v4[v20 - 16];
        if (&v4[v20 - 40] == (_BYTE *)v22)
        {
          v22 = &v4[v20 - 40];
          v23 = 4;
        }
        else
        {
          if (!v22)
            goto LABEL_26;
          v23 = 5;
        }
        (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_26:
        v24 = *(_QWORD **)&v4[v20 - 48];
        if (&v4[v20 - 72] == (_BYTE *)v24)
        {
          v24 = &v4[v20 - 72];
          v25 = 4;
        }
        else
        {
          if (!v24)
            goto LABEL_31;
          v25 = 5;
        }
        (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_31:
        v26 = *(char **)&v4[v20 - 80];
        if (v21 - 104 == v26)
        {
          v26 = v21 - 104;
          v27 = 4;
          goto LABEL_35;
        }
        if (v26)
        {
          v27 = 5;
LABEL_35:
          (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
        }
        v20 -= 104;
        if (!v20)
        {
          v4 = *(_BYTE **)a1;
          break;
        }
      }
    }
  }
  v28 = v29;
  if (v4 != (_BYTE *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v28;
}

void sub_1C56D2628()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56D263C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8179B80;
  return result;
}

void sub_1C56D2660(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8179B80;
}

BOOL sub_1C56D2678(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 112);
  return !v2 || (*(_BYTE *)(v2 + 12) & 0x40) == 0;
}

void *sub_1C56D2698(_DWORD *a1, _DWORD *a2)
{
  int v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  size_t v7;
  uint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;

  v2 = *a1;
  if ((*a1 & 1) == 0)
  {
    v13 = a2;
    v14 = a1;
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 8);
    a2 = v13;
    a1 = v14;
    v2 = *v14;
  }
  *a1 = v2 | 1;
  if ((*a2 & 1) != 0 || a2[4] <= 8u)
  {
    v3 = 0;
    *a1 = *a2 | 1;
    a1[1] = a2[1];
    v4 = a1 + 2;
  }
  else
  {
    *a1 = v2 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v9 = 8;
    else
      v9 = a2[4];
    v10 = a1;
    v11 = a2;
    *((_QWORD *)a1 + 1) = operator new(8 * v9, (std::align_val_t)8uLL);
    v4 = v10 + 2;
    *((_QWORD *)v10 + 2) = v9;
    v12 = *v10;
    *v10 = *v11 & 0xFFFFFFFE | *v10 & 1;
    a2 = v11;
    a1 = v10;
    v10[1] = v11[1];
    if ((v12 & 1) != 0)
    {
      v3 = 0;
    }
    else
    {
      v4 = (_QWORD *)*v4;
      v3 = 1;
    }
  }
  v6 = *(_BYTE *)a2;
  v5 = a2 + 2;
  if ((v6 & 1) == 0)
    v5 = (_QWORD *)*v5;
  if (v3)
    v7 = 8 * a1[4];
  else
    v7 = 64;
  return memcpy(v4, v5, v7);
}

uint64_t sub_1C56D27BC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E8179BC8;
  v2 = *(void **)(a1 + 80);
  if (v2 != (void *)(a1 + 96))
    free(v2);
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  return a1;
}

void sub_1C56D2814(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E8179BC8;
  v2 = *(void **)(a1 + 80);
  if (v2 != (void *)(a1 + 96))
    free(v2);
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  JUMPOUT(0x1CAA32FC0);
}

int64x2_t *sub_1C56D287C(uint64_t a1)
{
  int64x2_t *v2;
  int64x2_t v3;

  v2 = (int64x2_t *)operator new(0xA0uLL);
  v2->i64[1] = 1;
  v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v2->i64[0] = (uint64_t)off_1E8179BC8;
  v2[1] = v3;
  v2[2] = v3;
  v2[3] = v3;
  v2[4] = v3;
  sub_1C56D2698(&v2->i32[2], (_DWORD *)(a1 + 8));
  v2[5].i64[0] = (uint64_t)v2[6].i64;
  v2[5].i64[1] = 0x800000000;
  if (*(_DWORD *)(a1 + 88))
    sub_1C61B2738((uint64_t)v2[5].i64, a1 + 80);
  return v2;
}

void *sub_1C56D2900(uint64_t a1, int64x2_t *a2)
{
  int64x2_t v4;
  void *result;
  uint64_t i64;

  a2->i64[1] = 1;
  v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  a2->i64[0] = (uint64_t)off_1E8179BC8;
  a2[1] = v4;
  a2[2] = v4;
  a2[3] = v4;
  a2[4] = v4;
  result = sub_1C56D2698(&a2->i32[2], (_DWORD *)(a1 + 8));
  a2[5].i64[0] = (uint64_t)a2[6].i64;
  i64 = (uint64_t)a2[5].i64;
  *(_QWORD *)(i64 + 8) = 0x800000000;
  if (*(_DWORD *)(a1 + 88))
    return (void *)sub_1C61B2738(i64, a1 + 80);
  return result;
}

void sub_1C56D2984(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2 != (void *)(a1 + 96))
    free(v2);
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    JUMPOUT(0x1CAA32FB4);
}

void sub_1C56D29D0(_QWORD *__p)
{
  _QWORD *v2;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  if ((__p[1] & 1) == 0)
    MEMORY[0x1CAA32FB4](__p[2], 8);
  operator delete(__p);
}

uint64_t sub_1C56D2A1C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a2 + 16) - 33;
  v3 = v2 > 0x33;
  v4 = (1 << v2) & 0x8000000000041;
  if (v3 || v4 == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 64);
  if (v8 && (*(_BYTE *)(v8 + 12) & 0x40) != 0
    || (result = llvm::CallBase::hasFnAttrOnCalledFunction(a2, 6), (_DWORD)result))
  {
    v10 = *(_QWORD *)(a2 - 32);
    if (!v10 || *(_BYTE *)(v10 + 16) || *(_QWORD *)(v10 + 24) != *(_QWORD *)(a2 + 72))
      v10 = 0;
    v11 = sub_1C56D2AE0(a1 + 8, v10);
    if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    {
      v12 = a1 + 16;
      v13 = 8;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(unsigned int *)(a1 + 24);
    }
    return v12 + 8 * v13 == v11;
  }
  return result;
}

uint64_t sub_1C56D2AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = a2;
  if (sub_1C5684DE8(a1, &v7, &v6))
    return v6;
  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(unsigned int *)(a1 + 16);
  }
  return v3 + 8 * v4;
}

void sub_1C56D2B44()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56D2B58()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8179C10;
  return result;
}

void sub_1C56D2B7C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8179C10;
}

uint64_t sub_1C56D2B94(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a2 + 112), **(uint64_t ***)a2, -1, 6);
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

uint64_t sub_1C56D2BCC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  v5 = *a1;
  v6 = *((_DWORD *)a1 + 2);
  v7 = *a1 + 104 * v6;
  if (v7 == a3)
  {
    v12 = a2;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = a2 + v9;
      sub_1C48AAFD8((_QWORD *)(a2 + v9), a3 + v9);
      sub_1C48AAFD8((_QWORD *)(a2 + v9 + 32), a3 + v9 + 32);
      sub_1C48AAFD8((_QWORD *)(a2 + v9 + 64), a3 + v9 + 64);
      v11 = *(_BYTE *)(a3 + v9 + 100);
      *(_DWORD *)(v10 + 96) = *(_DWORD *)(a3 + v9 + 96);
      *(_BYTE *)(v10 + 100) = v11;
      v9 += 104;
    }
    while (a3 + v9 != v7);
    v5 = *a1;
    v6 = *((_DWORD *)a1 + 2);
    v12 = a2 + v9;
  }
  v13 = v5 + 104 * v6;
  if (v13 != v12)
  {
    while (1)
    {
      v14 = *(_QWORD **)(v13 - 16);
      if ((_QWORD *)(v13 - 40) == v14)
      {
        v14 = (_QWORD *)(v13 - 40);
        v15 = 4;
      }
      else
      {
        if (!v14)
          goto LABEL_12;
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_12:
      v16 = *(_QWORD **)(v13 - 48);
      if ((_QWORD *)(v13 - 72) == v16)
      {
        v16 = (_QWORD *)(v13 - 72);
        v17 = 4;
      }
      else
      {
        if (!v16)
          goto LABEL_17;
        v17 = 5;
      }
      (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_17:
      v18 = v13 - 104;
      v19 = *(_QWORD **)(v13 - 80);
      if ((_QWORD *)(v13 - 104) == v19)
      {
        v19 = (_QWORD *)(v13 - 104);
        v20 = 4;
        goto LABEL_21;
      }
      if (v19)
      {
        v20 = 5;
LABEL_21:
        (*(void (**)(void))(*v19 + 8 * v20))();
      }
      v13 -= 104;
      if (v18 == v12)
      {
        v5 = *a1;
        break;
      }
    }
  }
  *((_DWORD *)a1 + 2) = -991146299 * ((unint64_t)(v12 - v5) >> 3);
  return a2;
}

BOOL sub_1C56D2D50(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 v9;

  sub_1C56D2DDC(a1, a2, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 80);
    if (v6 >= *(_DWORD *)(a1 + 84))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 80);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 80);
  }
  return v4 != 0;
}

_QWORD *sub_1C56D2DDC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C509FC04(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 8;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = 0;
    v10 = v12 + 8 * v13;
  }
  else
  {
    result = sub_1C56D2E94((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 8;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = v8 + 8 * v9;
    v11 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

_QWORD *sub_1C56D2E94(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C56D2F54((uint64_t)a1, v7);
  v9 = 0;
  sub_1C509FC04((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C56D2F54(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C56D30BC(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C56D30BC(a1, v14, v8);
}

uint64_t sub_1C56D30BC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C509FC04((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1C56D317C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56D3190()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8179C58;
  return result;
}

void sub_1C56D31B4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8179C58;
}

uint64_t sub_1C56D31CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 112);
  if (v2)
    return (*(unsigned __int8 *)(v2 + 16) >> 5) & 1;
  else
    return 0;
}

void sub_1C56D31EC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56D3200(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8179CA0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56D3234(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8179CA0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C56D3250(uint64_t a1, llvm::Instruction *this)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  result = llvm::Instruction::mayThrow(this);
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 16) == 84
      && (v5 = *((_QWORD *)this - 4)) != 0
      && !*(_BYTE *)(v5 + 16)
      && *(_QWORD *)(v5 + 24) == *((_QWORD *)this + 9))
    {
      v6 = sub_1C56D2AE0(v3, v5);
      v7 = v3 + 8;
      if ((*(_BYTE *)v3 & 1) != 0)
      {
        v8 = 8;
      }
      else
      {
        v7 = *(_QWORD *)(v3 + 8);
        v8 = *(unsigned int *)(v3 + 16);
      }
      return v7 + 8 * v8 == v6;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1C56D32E4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56D32F8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8179CE8;
  return result;
}

void sub_1C56D331C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8179CE8;
}

uint64_t sub_1C56D3334(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a2 + 112), **(uint64_t ***)a2, -1, 37);
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

void sub_1C56D3370()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56D3384()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8179D30;
  return result;
}

void sub_1C56D33A8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8179D30;
}

uint64_t sub_1C56D33C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 112);
  if (!v2)
    return 0;
  if ((*(_BYTE *)(v2 + 17) & 0x30) != 0)
    return 1;
  return (*(unsigned __int8 *)(v2 + 15) >> 1) & 1;
}

void sub_1C56D33F4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56D3408(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8179D78;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56D343C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8179D78;
  a2[1] = v2;
  return result;
}

BOOL sub_1C56D3458(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a2 + 16) - 33;
  v3 = v2 > 0x33;
  v4 = (1 << v2) & 0x8000000000041;
  v5 = v3 || v4 == 0;
  result = 0;
  if (!v5)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a2 + 64);
    if ((!v8 || (*(_BYTE *)(v8 + 15) & 2) == 0) && (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 25) & 1) == 0)
    {
      v10 = *(_QWORD *)(a2 - 32);
      if (!v10 || *(_BYTE *)(v10 + 16) || *(_QWORD *)(v10 + 24) != *(_QWORD *)(a2 + 72))
        return 1;
      v11 = sub_1C56D2AE0(v7, v10);
      v12 = v7 + 8;
      if ((*(_BYTE *)v7 & 1) != 0)
      {
        v13 = 8;
      }
      else
      {
        v12 = *(_QWORD *)(v7 + 8);
        v13 = *(unsigned int *)(v7 + 16);
      }
      if (v12 + 8 * v13 == v11)
        return 1;
    }
  }
  return result;
}

void sub_1C56D3524()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56D3538()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8179DC0;
  return result;
}

void sub_1C56D355C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8179DC0;
}

uint64_t sub_1C56D3574(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a2 + 112), **(uint64_t ***)a2, -1, 25);
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

void sub_1C56D35B0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56D35C4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8179E08;
  return result;
}

void sub_1C56D35E8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8179E08;
}

uint64_t sub_1C56D3600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 112);
  if (v2)
    return (*(unsigned __int8 *)(v2 + 16) >> 3) & 1;
  else
    return 0;
}

void sub_1C56D3620()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56D3634(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8179E50;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56D3668(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8179E50;
  a2[1] = v2;
  return result;
}

BOOL sub_1C56D3684(uint64_t a1, llvm::Instruction *this)
{
  uint64_t v3;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  llvm::APInt *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 8);
  if ((llvm::Instruction::isVolatile(this) & 1) != 0)
    return 1;
  v5 = *((unsigned __int8 *)this + 16);
  if (v5 == 60)
  {
LABEL_4:
    if ((*((_WORD *)this + 9) & 0x380) != 0)
    {
      v6 = (*((_WORD *)this + 9) & 0x301) == 0;
      return !v6;
    }
    return 0;
  }
  if (*((unsigned __int8 *)this + 16) <= 0x3Eu)
  {
    if (v5 == 61)
      goto LABEL_4;
    if (v5 != 33 && v5 != 39)
      return 0;
LABEL_11:
    v7 = *((_QWORD *)this + 8);
    if (v7 && (*(_BYTE *)(v7 + 16) & 8) != 0 || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 35) & 1) != 0)
      return 0;
    if (sub_1C4DE85D0((uint64_t)this))
    {
      v8 = ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
      v9 = (llvm::APInt *)(v8 + 24);
      v10 = *(_DWORD *)(v8 + 32);
      if (v10 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v9) == v10)
          return 0;
      }
      else if (!*(_QWORD *)v9)
      {
        return 0;
      }
    }
    v11 = *((_QWORD *)this - 4);
    if (!v11 || *(_BYTE *)(v11 + 16) || *(_QWORD *)(v11 + 24) != *((_QWORD *)this + 9))
      return 1;
    v12 = sub_1C56D2AE0(v3, v11);
    v13 = v3 + 8;
    if ((*(_BYTE *)v3 & 1) != 0)
    {
      v14 = 8;
    }
    else
    {
      v13 = *(_QWORD *)(v3 + 8);
      v14 = *(unsigned int *)(v3 + 16);
    }
    return v13 + 8 * v14 == v12;
  }
  if (v5 == 84)
    goto LABEL_11;
  if (v5 != 63)
    return (v5 - 64) < 2;
  v6 = *((_BYTE *)this + 60) == 0;
  return !v6;
}

void sub_1C56D3800()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56D3814()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8179E98;
  return result;
}

void sub_1C56D3838(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8179E98;
}

uint64_t sub_1C56D3850(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a2 + 112), **(uint64_t ***)a2, -1, 35);
  *(_QWORD *)(a2 + 112) = result;
  return result;
}

uint64_t sub_1C56D3888()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56CC230(v0);
}

void sub_1C56D38B4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56D38D8(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::CallGraphWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::CallGraphWrapperPass::ID);
}

uint64_t sub_1C56D3920(llvm::ModulePass *a1, uint64_t **a2)
{
  void **v4;
  void *v5;
  uint64_t v6;

  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  v4 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::CallGraphWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::CallGraphWrapperPass::ID);
  return sub_1C56CC380(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 80));
}

uint64_t sub_1C56D3990()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 1;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Try to propagate nonnull argument attributes from callsites to caller functions.";
  v1.n128_u64[1] = 80;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80A2D0, "enable-nonnull-arg-prop", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80A2D0, &dword_1C475E000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Stop inferring nounwind attribute during function-attrs pass";
  v1.n128_u64[1] = 60;
  sub_1C61B2D38((uint64_t)&unk_1ED80A390, "disable-nounwind-inference", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80A390, &dword_1C475E000);
  LODWORD(v4) = 1;
  v1.n128_u64[0] = (unint64_t)"Stop inferring nofree attribute during function-attrs pass";
  v1.n128_u64[1] = 58;
  sub_1C61B2D38((uint64_t)&unk_1ED80A450, "disable-nofree-inference", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80A450, &dword_1C475E000);
  v3 = 1;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Don't propagate function-attrs in thinLTO";
  v1.n128_u64[1] = 41;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80A510, "disable-thinlto-funcattrs", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80A510, &dword_1C475E000);
}

void llvm::ComputeCrossModuleImport(uint64_t a1, uint64_t a2, llvm::StringMapImpl *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *j;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  _QWORD *v66;
  uint64_t v68;
  unsigned int v69;
  _QWORD *v70;
  unint64_t v71;
  unsigned int v72;
  _BYTE v73[31];

  v6 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6)
  {
    for (i = *(uint64_t **)a2; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)a2;
  }
  v9 = *(_QWORD *)a2 + 8 * v6;
  if (i != (uint64_t *)v9)
  {
    v10 = *i;
    do
    {
      v11 = sub_1C56D84B0(a3, (unsigned __int8 *)(v10 + 32), *(_QWORD *)v10);
      sub_1C56D3F8C(v10 + 8, a1, (const void *)(v10 + 32), *(_QWORD *)v10, *v11 + 8, a4);
      do
      {
        v12 = i[1];
        ++i;
        v10 = v12;
        if (v12)
          v13 = v10 == -8;
        else
          v13 = 1;
      }
      while (v13);
    }
    while (i != (uint64_t *)v9);
  }
  v14 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v14)
  {
    for (j = *(_QWORD **)a4; !*j || *j == -8; ++j)
      ;
  }
  else
  {
    j = *(_QWORD **)a4;
  }
  v64 = *(_QWORD *)a4 + 8 * v14;
  if (j != (_QWORD *)v64)
  {
    v17 = *j;
    do
    {
      v70 = 0;
      v71 = 0;
      v72 = 0;
      sub_1C56D46A4((uint64_t)&v68, (uint64_t *)a2, (unsigned __int8 *)(v17 + 32), *(_QWORD *)v17);
      v20 = *(_QWORD **)(v17 + 8);
      v19 = v17 + 8;
      v18 = v20;
      v21 = *(unsigned int *)(v19 + 16);
      v22 = &v20[v21];
      v66 = j;
      if (*(_DWORD *)(v19 + 8))
      {
        if (*(_DWORD *)(v19 + 16))
        {
          v23 = 8 * v21;
          v24 = v18;
          while ((~*v24 & 0xFFFFFFFFFFFFFFF0) == 0)
          {
            ++v24;
            v23 -= 8;
            if (!v23)
              goto LABEL_34;
          }
        }
        else
        {
          v24 = v18;
        }
      }
      else
      {
LABEL_34:
        v24 = v22;
      }
      v25 = &v18[v21];
      if (v24 != v25)
      {
        v26 = v68;
        v27 = v69;
        do
        {
          v28 = sub_1C5470560(v26, v27, *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF8))[1];
          v29 = *(_DWORD *)(v28 + 8);
          if (v28)
            v30 = v29 == 0;
          else
            v30 = 0;
          if (v30)
          {
            v28 = *(_QWORD *)(v28 + 72);
            v29 = *(_DWORD *)(v28 + 8);
          }
          if (v29 == 2)
          {
            if (!*(_BYTE *)(a1 + 129) || (*(_BYTE *)(v28 + 72) & 2) == 0)
            {
              v31 = *(_QWORD **)(v28 + 40);
              v32 = *(_QWORD *)(v28 + 48) - (_QWORD)v31;
              if (v32)
              {
                v33 = 8 * (v32 >> 3);
                do
                {
                  sub_1C61A75D0((uint64_t)&v70, v31++, (uint64_t)v73);
                  v33 -= 8;
                }
                while (v33);
              }
            }
          }
          else
          {
            v34 = v27;
            v35 = v26;
            v36 = *(_QWORD **)(v28 + 80);
            v37 = *(_QWORD *)(v28 + 88) - (_QWORD)v36;
            if (v37)
            {
              v38 = 16 * (v37 >> 4);
              do
              {
                sub_1C61A75D0((uint64_t)&v70, v36, (uint64_t)v73);
                v36 += 2;
                v38 -= 16;
              }
              while (v38);
            }
            v39 = *(_QWORD **)(v28 + 40);
            v40 = *(_QWORD *)(v28 + 48) - (_QWORD)v39;
            v26 = v35;
            v27 = v34;
            if (v40)
            {
              v41 = 8 * (v40 >> 3);
              do
              {
                sub_1C61A75D0((uint64_t)&v70, v39++, (uint64_t)v73);
                v41 -= 8;
              }
              while (v41);
            }
          }
          v42 = v24 + 1;
          v24 = v22;
          if (v42 != v22)
          {
            v24 = v42;
            while ((~*v24 & 0xFFFFFFFFFFFFFFF0) == 0)
            {
              if (++v24 == v22)
              {
                v24 = v22;
                break;
              }
            }
          }
        }
        while (v24 != v25);
      }
      v43 = v70;
      v44 = v71;
      v45 = v72;
      v46 = &v70[v72];
      if ((_DWORD)v71)
      {
        v47 = 37;
        j = v66;
        if (v72)
        {
          v48 = 8 * v72;
          v49 = v70;
          while ((~*v49 & 0xFFFFFFFFFFFFFFF0) == 0)
          {
            ++v49;
            v48 -= 8;
            if (!v48)
            {
              v49 = &v70[v72];
              break;
            }
          }
        }
        else
        {
          v49 = v70;
        }
      }
      else
      {
        v49 = &v70[v72];
        v47 = 37;
        j = v66;
      }
      v50 = &v70[v72];
      if (v49 != v50)
      {
        v51 = HIDWORD(v71);
        v52 = v68;
        v53 = v69;
        v54 = v69 - 1;
        do
        {
          if (v53)
          {
            v55 = *(_QWORD *)(*v49 & 0xFFFFFFFFFFFFFFF8);
            v56 = (37 * v55) & v54;
            v57 = *(_QWORD *)(v52 + 16 * v56);
            if (v55 == v57)
              goto LABEL_75;
            v58 = 1;
            while (v57 != -1)
            {
              v59 = v56 + v58++;
              v56 = v59 & v54;
              v57 = *(_QWORD *)(v52 + 16 * v56);
              if (v55 == v57)
              {
LABEL_75:
                while (++v49 != v46)
                {
                  if ((~*v49 & 0xFFFFFFFFFFFFFFF0) != 0)
                    goto LABEL_89;
                }
                v49 = v46;
                goto LABEL_89;
              }
            }
          }
          v60 = v46;
          if (v49 + 1 != v46)
          {
            v60 = v49 + 1;
            while ((~*v60 & 0xFFFFFFFFFFFFFFF0) == 0)
            {
              if (++v60 == v46)
              {
                v60 = v46;
                break;
              }
            }
          }
          *v49 = -16;
          v71 = __PAIR64__(++v51, --v44);
          v49 = v60;
LABEL_89:
          ;
        }
        while (v49 != v50);
      }
      if (v44)
      {
        if (v45)
        {
          v61 = 8 * v45;
          while ((~*v43 & 0xFFFFFFFFFFFFFFF0) == 0)
          {
            ++v43;
            v61 -= 8;
            if (!v61)
              goto LABEL_100;
          }
        }
LABEL_99:
        if (v43 != v50)
        {
          sub_1C61A75D0(v19, v43, (uint64_t)v73);
          while (++v43 != v50)
          {
            if ((~*v43 & 0xFFFFFFFFFFFFFFF0) != 0)
              goto LABEL_99;
          }
        }
      }
LABEL_100:
      MEMORY[0x1CAA32FB4](v68, 8, v47);
      MEMORY[0x1CAA32FB4](v70, 8);
      do
      {
        v62 = j[1];
        ++j;
        v17 = v62;
        if (v62)
          v63 = v17 == -8;
        else
          v63 = 1;
      }
      while (v63);
    }
    while (j != (_QWORD *)v64);
  }
}

void sub_1C56D3F8C(uint64_t a1, uint64_t a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int i;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  llvm *v30;
  llvm *v31;
  void *v32;
  llvm::raw_ostream *v33;
  unint64_t *v34;
  unsigned int v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  llvm *v47;
  llvm::raw_ostream *v48;
  llvm::raw_ostream *v49;
  uint64_t v50;
  const char *v51;
  size_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  llvm::raw_ostream *v56;
  int v57;
  void *v58;
  const char *v59;
  size_t v60;
  void *v61;
  _BYTE *v62;
  unint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[258];

  v10 = a1;
  v69[256] = *MEMORY[0x1E0C80C00];
  v67 = v69;
  v68 = 0x8000000000;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v11 = *(unsigned int *)(a1 + 16);
  v12 = *(_QWORD *)a1 + 16 * v11;
  if (*(_DWORD *)(a1 + 8))
  {
    if ((_DWORD)v11)
    {
      v13 = 16 * v11;
      v14 = *(unint64_t **)a1;
      while (*v14 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v14 += 2;
        v13 -= 16;
        if (!v13)
          goto LABEL_6;
      }
    }
    else
    {
      v14 = *(unint64_t **)a1;
    }
  }
  else
  {
LABEL_6:
    v14 = (unint64_t *)(*(_QWORD *)a1 + 16 * v11);
  }
  v15 = *(_QWORD *)a1 + 16 * v11;
  if (v14 != (unint64_t *)v15)
  {
    do
    {
      a1 = v14[1];
      if (!*(_BYTE *)(a2 + 128) || (*(_WORD *)(a1 + 12) & 0x80) != 0)
      {
        v16 = *(_DWORD *)(a1 + 8);
        if (a1)
          v17 = v16 == 0;
        else
          v17 = 0;
        if (v17)
        {
          a1 = *(_QWORD *)(a1 + 72);
          v16 = *(_DWORD *)(a1 + 8);
        }
        if (v16 == 1)
          sub_1C56D7138(a1, a2, dword_1ED80A658, v10, (uint64_t)&v67, a5, a6, (uint64_t)&v64);
      }
      v18 = v14 + 2;
      while (v18 != (unint64_t *)v12)
      {
        v19 = *v18;
        v18 += 2;
        if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v14 = v18 - 2;
          goto LABEL_24;
        }
      }
      v14 = (unint64_t *)v12;
LABEL_24:
      ;
    }
    while (v14 != (unint64_t *)v15);
    for (i = v68; (_DWORD)v68; i = v68)
    {
      v21 = (char *)v67 + 16 * i;
      v22 = *((_QWORD *)v21 - 2);
      v23 = *((_QWORD *)v21 - 1);
      LODWORD(v68) = i - 1;
      if (v22)
        v24 = *(_DWORD *)(v22 + 8) == 1;
      else
        v24 = 0;
      if (v24)
        sub_1C56D7138(v22, a2, v23, v10, (uint64_t)&v67, a5, a6, (uint64_t)&v64);
      else
        a1 = sub_1C56D7B7C(v22, a2, v10, (uint64_t)&v67, a5, a6);
    }
  }
  if (byte_1ED80AD18)
  {
    v30 = llvm::dbgs((llvm *)a1);
    v31 = v30;
    v32 = (void *)*((_QWORD *)v30 + 4);
    if (*((_QWORD *)v30 + 3) - (_QWORD)v32 > 0x1AuLL)
    {
      qmemcpy(v32, "Missed imports into module ", 27);
      v33 = (llvm::raw_ostream *)(*((_QWORD *)v30 + 4) + 27);
      *((_QWORD *)v31 + 4) = v33;
    }
    else
    {
      llvm::raw_ostream::write(v30, "Missed imports into module ", 0x1BuLL);
      v33 = (llvm::raw_ostream *)*((_QWORD *)v31 + 4);
    }
    if (a4 <= *((_QWORD *)v31 + 3) - (_QWORD)v33)
    {
      if (a4)
      {
        memcpy(v33, a3, a4);
        v33 = (llvm::raw_ostream *)(*((_QWORD *)v31 + 4) + a4);
        *((_QWORD *)v31 + 4) = v33;
      }
    }
    else
    {
      llvm::raw_ostream::write(v31, (const char *)a3, a4);
      v33 = (llvm::raw_ostream *)*((_QWORD *)v31 + 4);
    }
    if (*((llvm::raw_ostream **)v31 + 3) == v33)
    {
      v33 = llvm::raw_ostream::write(v31, "\n", 1uLL);
    }
    else
    {
      *(_BYTE *)v33 = 10;
      ++*((_QWORD *)v31 + 4);
    }
    v26 = v64;
    v25 = v66;
    v34 = &v64[4 * v66];
    v35 = v66;
    v36 = v34;
    if ((_DWORD)v65)
    {
      if (v66)
      {
        v37 = 32 * v66;
        v36 = v64;
        while (*v36 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v36 += 4;
          v37 -= 32;
          if (!v37)
          {
            v35 = v66;
            v36 = &v64[4 * v66];
            goto LABEL_60;
          }
        }
        v35 = v66;
      }
      else
      {
        v35 = 0;
        v36 = v64;
      }
    }
LABEL_60:
    v38 = &v64[4 * v35];
    while (1)
    {
LABEL_61:
      if (v36 == v38)
        goto LABEL_35;
      if (!v36[2])
        break;
LABEL_63:
      v39 = v36 + 4;
      while (v39 != v34)
      {
        v40 = *v39;
        v39 += 4;
        if (v40 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v36 = v39 - 4;
          goto LABEL_61;
        }
      }
      v36 = v34;
    }
    v41 = *(_QWORD *)v36[3] & 0xFFFFFFFFFFFFFFF8;
    v42 = *(uint64_t **)(v41 + 24);
    if (*(uint64_t **)(v41 + 32) == v42)
    {
      v43 = 0;
    }
    else
    {
      v44 = *v42;
      v45 = *(_DWORD *)(v44 + 8);
      if (v44)
        v46 = v45 == 0;
      else
        v46 = 0;
      if (v46)
      {
        v44 = *(_QWORD *)(v44 + 72);
        v45 = *(_DWORD *)(v44 + 8);
      }
      if (v45 == 1)
        v43 = v44;
      else
        v43 = 0;
    }
    v47 = llvm::dbgs(v33);
    v48 = sub_1C62927A4(v47, (_QWORD *)v36[3]);
    v49 = v48;
    v50 = *((_QWORD *)v48 + 4);
    if ((unint64_t)(*((_QWORD *)v48 + 3) - v50) > 0xA)
    {
      *(_DWORD *)(v50 + 7) = 540876910;
      *(_QWORD *)v50 = *(_QWORD *)": Reason = ";
      *((_QWORD *)v48 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v48, ": Reason = ", 0xBuLL);
    }
    v51 = off_1E817A0C8[*(int *)(v36[3] + 12)];
    v52 = strlen(v51);
    v53 = (void *)*((_QWORD *)v49 + 4);
    if (v52 <= *((_QWORD *)v49 + 3) - (_QWORD)v53)
    {
      if (v52)
      {
        memcpy(v53, v51, v52);
        v53 = (void *)(*((_QWORD *)v49 + 4) + v52);
        *((_QWORD *)v49 + 4) = v53;
      }
    }
    else
    {
      llvm::raw_ostream::write(v49, v51, v52);
      v53 = (void *)*((_QWORD *)v49 + 4);
    }
    if (*((_QWORD *)v49 + 3) - (_QWORD)v53 > 0xDuLL)
    {
      qmemcpy(v53, ", Threshold = ", 14);
      *((_QWORD *)v49 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v49, ", Threshold = ", 0xEuLL);
    }
    sub_1C5E21910(v49, *((unsigned int *)v36 + 2), 0, 0, 0);
    v54 = *((_QWORD *)v49 + 4);
    if ((unint64_t)(*((_QWORD *)v49 + 3) - v54) > 8)
    {
      *(_BYTE *)(v54 + 8) = 32;
      *(_QWORD *)v54 = *(_QWORD *)", Size = ";
      *((_QWORD *)v49 + 4) += 9;
      if (v43)
      {
LABEL_87:
        v55 = *(int *)(v43 + 64);
        if ((v55 & 0x80000000) == 0)
        {
          v56 = v49;
          v57 = 0;
LABEL_96:
          sub_1C5E21910(v56, v55, 0, 0, v57);
          v58 = (void *)*((_QWORD *)v49 + 4);
          if (*((_QWORD *)v49 + 3) - (_QWORD)v58 > 0xEuLL)
          {
            qmemcpy(v58, ", MaxHotness = ", 15);
            *((_QWORD *)v49 + 4) += 15;
          }
          else
          {
            llvm::raw_ostream::write(v49, ", MaxHotness = ", 0xFuLL);
          }
          v59 = off_1E817A0A0[*(char *)(v36[3] + 8)];
          v60 = strlen(v59);
          v61 = (void *)*((_QWORD *)v49 + 4);
          if (v60 <= *((_QWORD *)v49 + 3) - (_QWORD)v61)
          {
            if (v60)
            {
              memcpy(v61, v59, v60);
              v61 = (void *)(*((_QWORD *)v49 + 4) + v60);
              *((_QWORD *)v49 + 4) = v61;
            }
          }
          else
          {
            llvm::raw_ostream::write(v49, v59, v60);
            v61 = (void *)*((_QWORD *)v49 + 4);
          }
          if (*((_QWORD *)v49 + 3) - (_QWORD)v61 > 0xCuLL)
          {
            qmemcpy(v61, ", Attempts = ", 13);
            *((_QWORD *)v49 + 4) += 13;
          }
          else
          {
            llvm::raw_ostream::write(v49, ", Attempts = ", 0xDuLL);
          }
          v33 = sub_1C5E21910(v49, *(unsigned int *)(v36[3] + 16), 0, 0, 0);
          v62 = (_BYTE *)*((_QWORD *)v49 + 4);
          if (*((_BYTE **)v49 + 3) == v62)
          {
            v33 = llvm::raw_ostream::write(v49, "\n", 1uLL);
          }
          else
          {
            *v62 = 10;
            ++*((_QWORD *)v49 + 4);
          }
          goto LABEL_63;
        }
LABEL_95:
        v55 = -(uint64_t)v55;
        v56 = v49;
        v57 = 1;
        goto LABEL_96;
      }
    }
    else
    {
      llvm::raw_ostream::write(v49, ", Size = ", 9uLL);
      if (v43)
        goto LABEL_87;
    }
    v55 = -1;
    goto LABEL_95;
  }
  v25 = v66;
  v26 = v64;
LABEL_35:
  if (v25)
  {
    v27 = 32 * v25;
    v28 = (uint64_t *)(v26 + 3);
    do
    {
      if ((unint64_t)*(v28 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v29 = *v28;
        *v28 = 0;
        if (v29)
          MEMORY[0x1CAA32FC0](v29, 0x1000C40669B30A5);
      }
      v28 += 4;
      v27 -= 32;
    }
    while (v27);
  }
  MEMORY[0x1CAA32FB4](v26, 8);
  if (v67 != v69)
    free(v67);
}

uint64_t sub_1C56D46A4(uint64_t result, uint64_t *a2, unsigned __int8 *__s1, size_t __n)
{
  uint64_t v4;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;

  v22 = result;
  v4 = *((unsigned int *)a2 + 2);
  if (!(_DWORD)v4)
    goto LABEL_15;
  v8 = 0;
  if (__n)
  {
    v9 = __n;
    v10 = __s1;
    do
    {
      v11 = *v10++;
      v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  v12 = *a2;
  v13 = *a2 + 8 * v4 + 8;
  v14 = 1;
  v15 = v8;
  while (1)
  {
    v16 = v15 & (v4 - 1);
    v17 = *(_QWORD **)(v12 + 8 * v16);
    if (v17 != (_QWORD *)-8)
    {
      if (!v17)
        goto LABEL_15;
      if (*(_DWORD *)(v13 + 4 * v16) == v8 && __n == *v17)
      {
        if (!__n)
          break;
        result = memcmp(__s1, (char *)v17 + *((unsigned int *)a2 + 5), __n);
        if (!(_DWORD)result)
          break;
      }
    }
    v15 = v14 + v16;
    ++v14;
  }
  if ((_DWORD)v16 == -1 || (int)v16 == v4)
  {
LABEL_15:
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = 0;
    *(_DWORD *)(v22 + 16) = 0;
  }
  else
  {
    v18 = *(_QWORD *)(v12 + 8 * (int)v16);
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = 0;
    result = MEMORY[0x1CAA32FB4](0, 8);
    v19 = *(unsigned int *)(v18 + 24);
    *(_DWORD *)(v22 + 16) = v19;
    if ((_DWORD)v19)
    {
      v20 = 16 * v19;
      v21 = operator new(16 * v19, (std::align_val_t)8uLL);
      *(_QWORD *)v22 = v21;
      *(_QWORD *)(v22 + 8) = *(_QWORD *)(v18 + 16);
      return (uint64_t)memcpy(v21, *(const void **)(v18 + 8), v20);
    }
    else
    {
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
    }
  }
  return result;
}

uint64_t llvm::ComputeCrossModuleImportForModuleFromIndex(uint64_t __s2, size_t __n, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  const void *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  unint64_t v17;

  v4 = a3 + 1;
  v5 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v8 = (const void *)__s2;
    do
    {
      v9 = (uint64_t *)v5[7];
      if (v9 != (uint64_t *)v5[8])
      {
        v17 = v5[4];
        v10 = *v9;
        v11 = *(unsigned __int8 **)(v10 + 24);
        v12 = *(_QWORD *)(v10 + 32);
        if (v12 != __n || __n && (__s2 = memcmp(*(const void **)(v10 + 24), v8, __n), (_DWORD)__s2))
        {
          v16 = sub_1C6293494(a4, v11, v12);
          __s2 = (uint64_t)sub_1C55BE078(*v16 + 8, &v17, &v17);
        }
      }
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v15 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v15);
      }
      v5 = v14;
    }
    while (v14 != v4);
  }
  return __s2;
}

uint64_t updateValueInfoForIndirectCalls(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(unint64_t **)(a2 + 80);
  v3 = *(unint64_t **)(a2 + 88);
  if (v2 != v3)
  {
    v5 = *(_QWORD **)(result + 8);
    result += 8;
    v4 = v5;
    v6 = *(_QWORD **)(result + 104);
    v7 = *(unsigned __int8 *)(result + 125);
    do
    {
      v8 = (unint64_t *)(*v2 & 0xFFFFFFFFFFFFFFF8);
      if (v8[4] == v8[3] && v6)
      {
        v9 = *v8;
        v10 = v6;
        v11 = (_QWORD *)(result + 104);
        do
        {
          v12 = v10[4];
          v13 = v12 >= v9;
          if (v12 >= v9)
            v14 = v10;
          else
            v14 = v10 + 1;
          if (v13)
            v11 = v10;
          v10 = (_QWORD *)*v14;
        }
        while (*v14);
        if (v11 != (_QWORD *)(result + 104) && v11[4] <= v9)
        {
          v15 = v11[5];
          if (v15)
          {
            if (!v4)
              goto LABEL_29;
            v16 = v4;
            v17 = (_QWORD *)result;
            do
            {
              v18 = v16[4];
              v19 = v18 >= v15;
              if (v18 >= v15)
                v20 = v16;
              else
                v20 = v16 + 1;
              if (v19)
                v17 = v16;
              v16 = (_QWORD *)*v20;
            }
            while (*v20);
            if (v17 == (_QWORD *)result || v17[4] > v15)
LABEL_29:
              v17 = (_QWORD *)result;
            v21 = (uint64_t)(v17 + 4);
            if (v17 == (_QWORD *)result)
              v21 = 0;
            v22 = v21 & 0xFFFFFFFFFFFFFFF8;
            v23 = *(_QWORD *)(v22 + 24);
            v24 = *(_QWORD *)(v22 + 32) - v23;
            if (v24)
            {
              v25 = 8 * (v24 >> 3);
              while (*(_DWORD *)(*(_QWORD *)v23 + 8) != 2)
              {
                v23 += 8;
                v25 -= 8;
                if (!v25)
                  goto LABEL_36;
              }
            }
            else
            {
LABEL_36:
              *v2 = v22 | v7;
            }
          }
        }
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
  return result;
}

_QWORD *llvm::updateIndirectCalls(_QWORD *this, llvm::ModuleSummaryIndex *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = this + 1;
  v3 = (_QWORD *)*this;
  if ((_QWORD *)*this != this + 1)
  {
    v4 = (uint64_t)this;
    do
    {
      v5 = (uint64_t *)v3[7];
      v6 = (uint64_t *)v3[8];
      while (v5 != v6)
      {
        if (*v5)
          v7 = *(_DWORD *)(*v5 + 8) == 1;
        else
          v7 = 0;
        if (v7)
          this = (_QWORD *)updateValueInfoForIndirectCalls(v4, *v5);
        ++v5;
      }
      v8 = (_QWORD *)v3[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v3[2];
          v7 = *v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v7);
      }
      v3 = v9;
    }
    while (v9 != v2);
  }
  return this;
}

void llvm::computeDeadSymbolsAndUpdateIndirectCalls(llvm **this, llvm::ModuleSummaryIndex *a2, void (*a3)(uint64_t, _QWORD), uint64_t a4)
{
  int v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  llvm *v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  llvm *v36;
  llvm *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  BOOL v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  int v64;
  void (*v65)(uint64_t, _QWORD);
  uint64_t v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[129];

  v69[128] = *MEMORY[0x1E0C80C00];
  v65 = a3;
  v66 = a4;
  if (byte_1ED80ADD8 && (v6 = *((_DWORD *)a2 + 2)) != 0)
  {
    v64 = 0;
    v67 = v69;
    v68 = 0x8000000000;
    v7 = (2 * v6);
    if (v7 < 0x81
      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, (uint64_t)v69, v7, 8), *((_DWORD *)a2 + 2)))
    {
      v8 = *(unint64_t **)a2;
      v9 = *((unsigned int *)a2 + 4);
      v10 = *(_QWORD *)a2 + 8 * v9;
      if ((_DWORD)v9)
      {
        v11 = 0;
        while (v8[v11] >= 0xFFFFFFFFFFFFFFFELL)
        {
          if (v9 == ++v11)
          {
            v12 = (unint64_t *)(*(_QWORD *)a2 + 8 * v9);
            goto LABEL_14;
          }
        }
        v12 = &v8[v11];
      }
      else
      {
        v12 = *(unint64_t **)a2;
      }
    }
    else
    {
      v8 = *(unint64_t **)a2;
      v9 = *((unsigned int *)a2 + 4);
      v12 = (unint64_t *)(*(_QWORD *)a2 + 8 * v9);
      v10 = (uint64_t)v12;
    }
LABEL_14:
    v13 = &v8[v9];
    if (v12 != v13)
    {
      v14 = (char *)(this + 1);
      do
      {
        v15 = *(_QWORD **)v14;
        if (!*(_QWORD *)v14)
          goto LABEL_27;
        v16 = *v12;
        v17 = (char *)(this + 1);
        do
        {
          v18 = v15[4];
          v19 = v18 >= v16;
          if (v18 >= v16)
            v20 = v15;
          else
            v20 = v15 + 1;
          if (v19)
            v17 = (char *)v15;
          v15 = (_QWORD *)*v20;
        }
        while (*v20);
        if (v17 == v14 || *((_QWORD *)v17 + 4) > v16)
LABEL_27:
          v17 = (char *)(this + 1);
        if (v17 == v14)
          v21 = 0;
        else
          v21 = (unint64_t)(v17 + 32);
        v22 = v21 & 0xFFFFFFFFFFFFFFF8;
        if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v23 = *(uint64_t **)(v22 + 24);
          v24 = *(_QWORD *)(v22 + 32) - (_QWORD)v23;
          if (v24)
          {
            v25 = 8 * (v24 >> 3);
            do
            {
              v26 = *v23++;
              *(_WORD *)(v26 + 12) |= 0x80u;
              v25 -= 8;
            }
            while (v25);
          }
        }
        v27 = v12 + 1;
        while (v27 != (unint64_t *)v10)
        {
          v28 = *v27++;
          if (v28 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v12 = v27 - 1;
            goto LABEL_40;
          }
        }
        v12 = (unint64_t *)v10;
LABEL_40:
        ;
      }
      while (v12 != v13);
    }
    v29 = *this;
    if (*this != (llvm *)(this + 1))
    {
      do
      {
        v30 = (uint64_t *)*((_QWORD *)v29 + 7);
        v31 = (uint64_t *)*((_QWORD *)v29 + 8);
        if (v30 != v31)
        {
          v32 = *((unsigned __int8 *)this + 133) | ((unint64_t)v29 + 32);
          while (1)
          {
            v33 = *v30;
            if (*v30)
              v34 = *(_DWORD *)(*v30 + 8) == 1;
            else
              v34 = 0;
            if (v34)
            {
              updateValueInfoForIndirectCalls((uint64_t)this, v33);
              v33 = *v30;
            }
            if ((*(_WORD *)(v33 + 12) & 0x80) != 0)
              break;
            if (++v30 == v31)
              goto LABEL_56;
          }
          v35 = v68;
          if (v68 >= (unint64_t)HIDWORD(v68))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, (uint64_t)v69, v68 + 1, 8);
            v35 = v68;
          }
          *((_QWORD *)v67 + v35) = v32;
          LODWORD(v68) = v68 + 1;
          ++v64;
        }
LABEL_56:
        v36 = (llvm *)*((_QWORD *)v29 + 1);
        if (v36)
        {
          do
          {
            v37 = v36;
            v36 = *(llvm **)v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (llvm *)*((_QWORD *)v29 + 2);
            v34 = *(_QWORD *)v37 == (_QWORD)v29;
            v29 = v37;
          }
          while (!v34);
        }
        v29 = v37;
      }
      while (v37 != (llvm *)(this + 1));
    }
    v63[0] = &v65;
    v63[1] = &v64;
    v63[2] = &v67;
    v38 = v68;
    while (v38)
    {
      v39 = *((_QWORD *)v67 + --v38);
      LODWORD(v68) = v38;
      v39 &= 0xFFFFFFFFFFFFFFF8;
      v40 = *(_QWORD *)(v39 + 24);
      v41 = *(_QWORD *)(v39 + 32);
      if (v41 != v40)
      {
        do
        {
          v42 = *(_QWORD **)v40;
          v43 = *(_DWORD *)(*(_QWORD *)v40 + 8);
          if (*(_QWORD *)v40)
            v44 = v43 == 0;
          else
            v44 = 0;
          if (v44)
          {
            v53 = v42[8];
            v54 = (_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF8);
            v55 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFFF8) + 24);
            v56 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFFF8) + 32) - v55;
            if (v56)
            {
              v57 = 8 * (v56 >> 3);
              while ((*(_WORD *)(*(_QWORD *)v55 + 12) & 0x80) == 0)
              {
                v55 += 8;
                v57 -= 8;
                if (!v57)
                  goto LABEL_81;
              }
            }
            else
            {
LABEL_81:
              v65(v66, *v54);
              v58 = (uint64_t *)v54[3];
              v59 = v54[4] - (_QWORD)v58;
              if (v59)
              {
                v60 = 8 * (v59 >> 3);
                do
                {
                  v61 = *v58++;
                  *(_WORD *)(v61 + 12) |= 0x80u;
                  v60 -= 8;
                }
                while (v60);
              }
              ++v64;
              v62 = v68;
              if (v68 >= (unint64_t)HIDWORD(v68))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, (uint64_t)v69, v68 + 1, 8);
                v62 = v68;
              }
              *((_QWORD *)v67 + v62) = v53;
              LODWORD(v68) = v68 + 1;
            }
          }
          else
          {
            v45 = (uint64_t *)v42[5];
            v46 = v42[6] - (_QWORD)v45;
            if (v46)
            {
              v47 = 8 * (v46 >> 3);
              do
              {
                v48 = *v45++;
                sub_1C56D4F60(v63, v48);
                v47 -= 8;
              }
              while (v47);
              v42 = *(_QWORD **)v40;
              v43 = *(_DWORD *)(*(_QWORD *)v40 + 8);
            }
            if (v43 == 1)
            {
              v49 = (uint64_t *)v42[10];
              v50 = v42[11] - (_QWORD)v49;
              if (v50)
              {
                v51 = 16 * (v50 >> 4);
                do
                {
                  v52 = *v49;
                  v49 += 2;
                  sub_1C56D4F60(v63, v52);
                  v51 -= 16;
                }
                while (v51);
              }
            }
          }
          v40 += 8;
        }
        while (v40 != v41);
        v38 = v68;
      }
    }
    *((_BYTE *)this + 128) = 1;
    if (v67 != v69)
      free(v67);
  }
  else
  {
    llvm::updateIndirectCalls(this, a2);
  }
}

_QWORD *sub_1C56D4F60(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v4 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32) - v5;
  if (v6)
  {
    v7 = 8 * (v6 >> 3);
    do
    {
      if ((*(_WORD *)(*(_QWORD *)v5 + 12) & 0x80) != 0)
        return result;
      v5 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))*result)(*(_QWORD *)(*result + 8), *v4);
  v8 = (uint64_t *)v4[3];
  v9 = (_QWORD *)v4[4];
  v10 = v9 - v8;
  if ((_DWORD)result != 1)
    goto LABEL_16;
  if (v9 != v8)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8 * v10;
    v14 = v4[3];
    while (1)
    {
      result = (_QWORD *)v11;
      v11 = 1;
      v15 = 1 << (*(_WORD *)(*(_QWORD *)v14 + 12) & 0xF);
      if ((v15 & 0x1C1) != 0)
      {
        v11 = v12;
      }
      else if ((v15 & 0x614) == 0)
      {
        goto LABEL_13;
      }
      v12 = v11;
      v11 = (uint64_t)result;
LABEL_13:
      v14 += 8;
      v13 -= 8;
      if (!v13)
      {
        if ((v11 & v12 & 1) != 0)
          llvm::report_fatal_error((llvm *)"Interposable and available_externally/linkonce_odr/weak_odr symbol", (const char *)1);
        if ((v11 & 1) != 0)
        {
LABEL_16:
          if (v9 != v8)
          {
            v16 = 8 * v10;
            do
            {
              v17 = *v8++;
              *(_WORD *)(v17 + 12) |= 0x80u;
              v16 -= 8;
            }
            while (v16);
          }
          v18 = (_DWORD *)v3[1];
          v19 = v3[2];
          ++*v18;
          v20 = *(unsigned int *)(v19 + 8);
          if (v20 >= *(_DWORD *)(v19 + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod(v19, v19 + 16, v20 + 1, 8);
            LODWORD(v20) = *(_DWORD *)(v19 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = a2;
          ++*(_DWORD *)(v19 + 8);
        }
        return result;
      }
    }
  }
  return result;
}

void llvm::computeDeadSymbolsWithConstProp(llvm **a1, llvm::ModuleSummaryIndex *a2, void (*a3)(uint64_t, _QWORD), uint64_t a4, int a5)
{
  llvm::computeDeadSymbolsAndUpdateIndirectCalls(a1, a2, a3, a4);
  if (a5)
    llvm::ModuleSummaryIndex::propagateAttributes(a1, (uint64_t)a2);
}

uint64_t llvm::gatherImportedSummariesForModule(unsigned __int8 *__s1, size_t __n, uint64_t *a3, uint64_t a4, uint64_t **a5)
{
  void *v10;
  size_t v11;
  size_t v12;
  uint64_t **v13;
  uint64_t result;
  uint64_t v15;
  size_t **i;
  uint64_t v18;
  size_t *v19;
  size_t v20;
  void **p_dst;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  size_t *v30;
  BOOL v31;
  void *__p[2];
  unint64_t v33;
  uint64_t *__dst;
  uint64_t *v35;
  unint64_t v36;

  sub_1C56D46A4((uint64_t)&__dst, a3, __s1, __n);
  if (__n > 0x7FFFFFFFFFFFFFF7)
LABEL_42:
    abort();
  if (__n >= 0x17)
  {
    v11 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v11 = __n | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    __p[1] = (void *)__n;
    v33 = v12 | 0x8000000000000000;
    __p[0] = v10;
    goto LABEL_8;
  }
  HIBYTE(v33) = __n;
  v10 = __p;
  if (__n)
LABEL_8:
    memmove(v10, __s1, __n);
  *((_BYTE *)v10 + __n) = 0;
  v13 = sub_1C56D86B4(a5, (const void **)__p, (uint64_t)__p);
  MEMORY[0x1CAA32FB4](v13[7], 8);
  v13[7] = __dst;
  __dst = 0;
  v13[8] = v35;
  *((_DWORD *)v13 + 18) = v36;
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  result = MEMORY[0x1CAA32FB4](0, 8);
  v15 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v15)
  {
    for (i = *(size_t ***)a4; !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(size_t ***)a4;
  }
  v18 = *(_QWORD *)a4 + 8 * v15;
  if (i != (size_t **)v18)
  {
    v19 = *i;
    do
    {
      v20 = *v19;
      if (*v19 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_42;
      if (v20 >= 0x17)
      {
        v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v22 = v20 | 7;
        v23 = v22 + 1;
        p_dst = (void **)operator new(v22 + 1);
        v35 = (uint64_t *)v20;
        v36 = v23 | 0x8000000000000000;
        __dst = (uint64_t *)p_dst;
      }
      else
      {
        HIBYTE(v36) = *v19;
        p_dst = (void **)&__dst;
        if (!v20)
          goto LABEL_30;
      }
      memmove(p_dst, v19 + 6, v20);
LABEL_30:
      *((_BYTE *)p_dst + v20) = 0;
      v24 = sub_1C56D86B4(a5, (const void **)&__dst, (uint64_t)&__dst);
      if (SHIBYTE(v36) < 0)
        operator delete(__dst);
      sub_1C56D46A4((uint64_t)&__dst, a3, (unsigned __int8 *)v19 + 48, *v19);
      v25 = (_QWORD *)v19[3];
      v26 = (uint64_t)__dst;
      if (v25)
      {
        v27 = (uint64_t)(v24 + 7);
        v28 = v36;
        do
        {
          v29 = sub_1C5470560(v26, v28, v25[2])[1];
          sub_1C5422F44(v27, v25 + 2)[1] = v29;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      result = MEMORY[0x1CAA32FB4](v26, 8);
      do
      {
        v30 = i[1];
        ++i;
        v19 = v30;
        if (v30)
          v31 = v19 + 1 == 0;
        else
          v31 = 1;
      }
      while (v31);
    }
    while (i != (size_t **)v18);
  }
  return result;
}

unint64_t llvm::EmitImportsFiles(const void *a1, size_t a2, _BYTE *a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD v22[4];
  _BYTE *v23;
  _QWORD v24[2];

  LODWORD(v24[0]) = 0;
  v24[1] = std::system_category();
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v22, a3, a4, (uint64_t)v24, 0);
  if (LODWORD(v24[0]))
  {
    v10 = v24[0] & 0xFFFFFFFF00000000;
    v11 = LODWORD(v24[0]);
  }
  else
  {
    v14 = (_QWORD *)*a5;
    v12 = a5 + 1;
    v13 = v14;
    if (v14 != v12)
    {
      do
      {
        v15 = *((_BYTE *)v13 + 55);
        if (v15 >= 0)
          v16 = (const char *)(v13 + 4);
        else
          v16 = (const char *)v13[4];
        if (v15 >= 0)
          v17 = v15 & 0x7F;
        else
          v17 = v13[5];
        if (v17 != a2 || a2 && memcmp(v16, a1, a2))
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v22, v16, v17);
          if ((_BYTE *)v22[3] == v23)
            llvm::raw_ostream::write((llvm::raw_ostream *)v22, "\n", 1uLL);
          else
            *v23++ = 10;
        }
        v18 = (_QWORD *)v13[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v13[2];
            v20 = *v19 == (_QWORD)v13;
            v13 = v19;
          }
          while (!v20);
        }
        v13 = v19;
      }
      while (v19 != v12);
    }
    std::system_category();
    v11 = 0;
    v10 = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v22);
  return v10 | v11;
}

uint64_t llvm::convertToDeclaration(llvm *this, llvm::GlobalValue *a2)
{
  llvm::PointerType *v3;
  llvm::Type *v4;
  uint64_t v5;
  uint64_t *v6;
  llvm::Value *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  llvm **v13;
  llvm *v14;
  llvm *v15;
  uint64_t v16;
  int v17;
  int v19;
  int v20;
  int32x2_t **v21;
  int32x2_t *v22;
  __int32 v23;
  int32x2_t v24;
  __int32 v25;
  unsigned int v26;
  uint64_t v27;
  llvm *v28;
  int v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  _DWORD *v39;
  uint64_t v40;
  llvm::PointerType *v41;
  llvm **v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  llvm **v46;
  uint64_t v47;
  uint64_t v48[4];
  __int16 v49;

  if (*((_BYTE *)this + 16) == 3)
  {
    if ((*((_BYTE *)this + 34) & 0x40) == 0)
    {
LABEL_13:
      llvm::GlobalVariable::setInitializer((uint64_t)this, 0);
      v19 = *((_DWORD *)this + 8);
      *((_DWORD *)this + 8) = v19 & 0xFFFFFFF0;
      if ((v19 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(this) & 1) == 0)
        *((_DWORD *)this + 8) |= 0x4000u;
LABEL_16:
      v20 = *((_DWORD *)this + 5);
      if ((v20 & 0x20000000) != 0)
      {
        v21 = **(int32x2_t ****)this;
        v22 = *v21;
        v23 = (*v21)[312].i32[0];
        if (v23)
        {
          v24 = v22[310];
          v25 = v23 - 1;
          v26 = v25 & ((this >> 4) ^ (this >> 9));
          v27 = *(_QWORD *)&v24 + 40 * v26;
          v28 = *(llvm **)v27;
          if (*(llvm **)v27 == this)
          {
LABEL_22:
            v31 = *(char **)(v27 + 8);
            v32 = *(unsigned int *)(v27 + 16);
            if ((_DWORD)v32)
            {
              v33 = v31 - 8;
              v34 = 16 * v32;
              do
              {
                v35 = *(unsigned __int8 **)&v33[v34];
                if (v35)
                  llvm::MetadataTracking::untrack((uint64_t)&v33[v34], v35);
                v34 -= 16;
              }
              while (v34);
              v31 = *(char **)(v27 + 8);
            }
            if (v31 != (char *)(v27 + 24))
              free(v31);
            *(_QWORD *)v27 = -8192;
            v22[311] = vadd_s32(v22[311], (int32x2_t)0x1FFFFFFFFLL);
            v20 = *((_DWORD *)this + 5);
          }
          else
          {
            v29 = 1;
            while (v28 != (llvm *)-4096)
            {
              v30 = v26 + v29++;
              v26 = v30 & v25;
              v27 = *(_QWORD *)&v24 + 40 * v26;
              v28 = *(llvm **)v27;
              if (*(llvm **)v27 == this)
                goto LABEL_22;
            }
          }
        }
        *((_DWORD *)this + 5) = v20 & 0xDFFFFFFF;
      }
      v36 = *((_QWORD *)this + 6);
      if (v36)
        llvm::Comdat::removeUser(v36, (uint64_t)this);
      *((_QWORD *)this + 6) = 0;
      v37 = *((_DWORD *)this + 8);
      if ((v37 & 0xFu) - 7 < 2)
        return 1;
      if ((v37 & 0x30) != 0)
      {
        if (!llvm::GlobalValue::hasExternalWeakLinkage(this))
          return 1;
        v37 = *((_DWORD *)this + 8);
      }
      *((_DWORD *)this + 8) = v37 & 0xFFFFBFFF;
      return 1;
    }
    v8 = ***(_QWORD ***)this;
    v48[0] = (uint64_t)this;
    v9 = *(_DWORD *)(v8 + 2520);
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 2504);
      v11 = v9 - 1;
      v12 = v11 & ((this >> 4) ^ (this >> 9));
      v13 = (llvm **)(v10 + 24 * v12);
      v14 = *v13;
      if (*v13 == this)
      {
LABEL_8:
        if (v13[2] == (llvm *)12)
        {
          v15 = v13[1];
          v16 = *(_QWORD *)v15;
          v17 = *((_DWORD *)v15 + 2);
          if (v16 == 0x7274702E6D766C6CLL && v17 == 1752462689)
            llvm::report_fatal_error((llvm *)"can't convert llvm.ptrauth to declaration!", (const char *)1);
        }
        goto LABEL_13;
      }
      v42 = 0;
      v43 = 1;
      while (v14 != (llvm *)-4096)
      {
        if (v42)
          v44 = 0;
        else
          v44 = v14 == (llvm *)-8192;
        if (v44)
          v42 = v13;
        v45 = v12 + v43++;
        v12 = v45 & v11;
        v13 = (llvm **)(v10 + 24 * v12);
        v14 = *v13;
        if (*v13 == this)
          goto LABEL_8;
      }
      if (v42)
        v46 = v42;
      else
        v46 = v13;
    }
    else
    {
      v46 = 0;
    }
    v13 = (llvm **)sub_1C53D65B8(v8 + 2504, (uint64_t)v48, v48, v46);
    v47 = v48[0];
    v13[1] = 0;
    v13[2] = 0;
    *v13 = (llvm *)v47;
    goto LABEL_8;
  }
  if (!*((_BYTE *)this + 16))
  {
    sub_1C6291B14(this);
    goto LABEL_16;
  }
  v3 = (llvm::PointerType *)*((_QWORD *)this + 3);
  if (*((_BYTE *)v3 + 8) == 14)
  {
    v4 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)this + 8) >> 8);
    v49 = 257;
    v5 = *((_QWORD *)this + 5);
    v6 = (uint64_t *)operator new(0x80uLL);
    v7 = (llvm::Value *)(v6 + 1);
    *((_DWORD *)v6 + 7) = *((_DWORD *)v6 + 7) & 0x38000000 | 0x40000000;
    *v6 = 0;
    llvm::Function::Function(v6 + 1, v3, 0, v4, (uint64_t)v48, v5);
  }
  else
  {
    v39 = operator new(0x78uLL);
    v7 = (llvm::Value *)(v39 + 8);
    v39[13] = v39[13] & 0x38000000 | 1;
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = 0;
    *((_QWORD *)v39 + 3) = v39 + 8;
    v40 = *((_QWORD *)this + 5);
    v41 = (llvm::PointerType *)*((_QWORD *)this + 3);
    v49 = 257;
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v39 + 8), v40, v41, 0, 0, 0, (uint64_t)v48, 0, (*((_DWORD *)this + 8) >> 10) & 7, ((unint64_t)*(unsigned int *)(*(_QWORD *)this + 8) >> 8) | 0x100000000, 0);
  }
  llvm::Value::takeName(v7, this);
  llvm::Value::doRAUW(this, v7, (llvm::Value *)1);
  return 0;
}

uint64_t sub_1C56D58D0(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  llvm::GlobalValue *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;

  v6 = *(_QWORD **)a1;
  v7 = sub_1C4EE9DE0((llvm::GlobalValue *)a2);
  result = (uint64_t)sub_1C5470560(*v6, *((_DWORD *)v6 + 4), v7);
  if (**(_QWORD **)a1 + 16 * *(unsigned int *)(*(_QWORD *)a1 + 16) != result)
  {
    v10 = result;
    if (a3)
    {
      v11 = *(_QWORD *)(result + 8);
      v12 = v11 && *(_DWORD *)(v11 + 8) == 1;
      if (v12 && *(_BYTE *)(a2 + 16) == 0)
      {
        v14 = *(_DWORD *)(v11 + 68);
        if ((v14 & 1) != 0)
        {
          result = a2 + 112;
          v15 = *(_QWORD *)(a2 + 112);
          if (!v15 || (*(_BYTE *)(v15 + 17) & 0x10) == 0)
          {
            result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)result, **(uint64_t ***)a2, -1, 44);
            *(_QWORD *)(a2 + 112) = result;
            v14 = *(_DWORD *)(v11 + 68);
          }
        }
        if ((v14 & 2) != 0)
        {
          result = a2 + 112;
          v16 = *(_QWORD *)(a2 + 112);
          if (!v16 || (*(_BYTE *)(v16 + 17) & 0x30) == 0)
          {
            result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)result, **(uint64_t ***)a2, -1, 45);
            *(_QWORD *)(a2 + 112) = result;
            v14 = *(_DWORD *)(v11 + 68);
          }
        }
        if ((v14 & 4) != 0)
        {
          result = a2 + 112;
          v17 = *(_QWORD *)(a2 + 112);
          if (!v17 || (*(_BYTE *)(v17 + 15) & 0x40) == 0)
          {
            result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)result, **(uint64_t ***)a2, -1, 30);
            *(_QWORD *)(a2 + 112) = result;
            v14 = *(_DWORD *)(v11 + 68);
          }
        }
        if ((v14 & 0x40) != 0)
        {
          result = a2 + 112;
          v18 = *(_QWORD *)(a2 + 112);
          if (!v18 || (*(_BYTE *)(v18 + 16) & 0x20) == 0)
          {
            result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)result, **(uint64_t ***)a2, -1, 37);
            *(_QWORD *)(a2 + 112) = result;
          }
        }
      }
    }
    v19 = *(_DWORD *)(a2 + 32);
    if ((v19 & 0xF) - 7 >= 2)
    {
      v20 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 8) + 12);
      v21 = v20 & 0xF;
      if ((v21 - 7) >= 2)
      {
        if (*(_BYTE *)(a2 + 16))
        {
          if (*(_BYTE *)(a2 + 16) == 3 && (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 0)
            return result;
        }
        else if ((v19 & 0x800000) == 0 && *(_QWORD *)(a2 + 72) == a2 + 72)
        {
          return result;
        }
        v22 = (v20 >> 4) & 3;
        if (v22)
        {
          *(_DWORD *)(a2 + 32) = v19 & 0xFFFFFFCF | (16 * (v22 & 3));
          result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2);
          v19 = *(_DWORD *)(a2 + 32);
          if ((result & 1) == 0)
          {
            v19 |= 0x4000u;
            *(_DWORD *)(a2 + 32) = v19;
          }
        }
        v23 = v19 & 0xF;
        if (v23 != v21)
        {
          if (v21 == 5)
          {
            if ((*(_WORD *)(*(_QWORD *)(v10 + 8) + 12) & 0x200) != 0)
            {
              v19 = v19 & 0xFFFFFFCF | 0x10;
              *(_DWORD *)(a2 + 32) = v19;
              if ((v23 - 7) < 2
                || (result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2),
                    v19 = *(_DWORD *)(a2 + 32),
                    (result & 1) == 0))
              {
                v19 |= 0x4000u;
              }
            }
          }
          else if (v21 == 1 && ((1 << v23) & 0x1EB) == 0)
          {
            result = llvm::convertToDeclaration((llvm *)a2, v9);
            goto LABEL_48;
          }
          *(_DWORD *)(a2 + 32) = v19 & 0xFFFFFFF0 | v21;
          if ((v19 & 0x30) != 0)
          {
            result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2);
            if ((result & 1) == 0)
              *(_DWORD *)(a2 + 32) |= 0x4000u;
          }
LABEL_48:
          v24 = *(unsigned __int8 *)(a2 + 16);
          if (v24 <= 3 && v24 != 1)
          {
            v25 = *(_DWORD *)(a2 + 32);
            if ((v25 & 0xF) != 1)
            {
              if (*(_BYTE *)(a2 + 16))
              {
                if (v24 != 3 || (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 0)
                  return result;
              }
              else if ((v25 & 0x800000) != 0 || *(_QWORD *)(a2 + 72) != a2 + 72)
              {
                return result;
              }
            }
            result = *(_QWORD *)(a2 + 48);
            if (result)
            {
              result = (uint64_t)llvm::Comdat::removeUser(result, a2);
              *(_QWORD *)(a2 + 48) = 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C56D5BC8(llvm::Module *a1, _QWORD *a2, llvm::CallGraph *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void (**v10)(_QWORD *);
  _QWORD v12[3];
  _QWORD *v13;
  _BYTE v14[8];
  _BYTE v15[24];
  _BYTE *v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)a2[3];
  if (!v5)
  {
    v13 = 0;
    v14[0] = 0;
    v6 = v15;
    goto LABEL_14;
  }
  if (v5 == a2)
  {
    v13 = v12;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v12);
    v5 = v13;
    v14[0] = 0;
    v6 = v15;
    if (v13)
      goto LABEL_4;
LABEL_14:
    v16 = 0;
    goto LABEL_6;
  }
  v13 = (_QWORD *)a2[3];
  a2[3] = 0;
  v14[0] = 0;
  v6 = v15;
LABEL_4:
  if (v5 == v12)
  {
    v16 = v15;
    (*(void (**)(_QWORD *, _BYTE *))(v12[0] + 24))(v12, v15);
  }
  else
  {
    v16 = v5;
    v13 = 0;
  }
LABEL_6:
  v17[0] = 0;
  v17[1] = 0;
  v17[2] = 0x800000000;
  v7 = llvm::InternalizePass::internalizeModule((llvm::InternalizePass *)v14, a1, a3);
  sub_1C4F02264((uint64_t)v17);
  if (v16 == v15)
  {
    v8 = 4;
LABEL_8:
    (*(void (**)(_QWORD *))(*v6 + 8 * v8))(v6);
    goto LABEL_9;
  }
  if (v16)
  {
    v8 = 5;
    v6 = v16;
    goto LABEL_8;
  }
LABEL_9:
  v9 = v13;
  if (v13 == v12)
  {
    v10 = (void (**)(_QWORD *))(v12[0] + 32);
    v9 = v12;
  }
  else
  {
    if (!v13)
      return v7;
    v10 = (void (**)(_QWORD *))(*v13 + 40);
  }
  (*v10)(v9);
  return v7;
}

_QWORD *llvm::FunctionImporter::importFunctions@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t **i;
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  size_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  unsigned int v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int j;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Module *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t k;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  char v43;
  BOOL v44;
  unsigned __int8 *v45;
  size_t v46;
  size_t v47;
  llvm::MDNode *Impl;
  uint64_t m;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::Module **AliaseeObject;
  llvm::Function *v54;
  char *v55;
  unint64_t v56;
  _QWORD *v57;
  char *v58;
  char *v59;
  int v60;
  unsigned int v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  llvm::UndefValue *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  int32x2_t *v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  int v84;
  unint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  int32x2_t *v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t *v98;
  char v99;
  BOOL v100;
  unsigned __int8 *v101;
  size_t v102;
  size_t v103;
  llvm::MDNode *v104;
  char hasExternalWeakLinkage;
  int v106;
  uint64_t *v107;
  uint64_t **v108;
  llvm *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  llvm *v114;
  llvm *v115;
  char v116;
  BOOL v117;
  const char *v118;
  size_t v119;
  size_t v120;
  llvm::raw_ostream *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  int v129;
  int v130;
  size_t *v131;
  const void *v132;
  size_t v133;
  size_t v134;
  _WORD *v135;
  char v136;
  BOOL v137;
  const char *v138;
  size_t v139;
  size_t v140;
  _BYTE *v141;
  llvm::Module *v142;
  uint64_t n;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 **v148;
  int v150;
  uint64_t v152;
  uint64_t v155;
  void *__s1;
  char *v157;
  std::string v158;
  std::string *v159;
  __int16 v160;
  __int128 v161;
  uint64_t v162;
  llvm::Module *v163;
  char *v164;
  _QWORD v165[2];
  int v166;
  void *__p;
  uint64_t *v168;
  uint64_t v169;
  uint64_t **v170;
  uint64_t *v171;
  uint64_t v172;
  llvm::LLVMContextImpl ***v173;
  uint64_t v174[6];
  uint64_t v175;
  unsigned int v176;
  uint64_t v177[4];
  __int16 v178;
  uint64_t v179;
  char v180;
  __int128 v181;
  unsigned int v182;
  uint64_t v183[3];
  char v184;
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  llvm::IRMover::IRMover((llvm::IRMover *)&v173, (llvm::Module *)a2);
  v171 = 0;
  v172 = 0;
  v170 = &v171;
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5)
  {
    for (i = *(uint64_t ***)a3; ; ++i)
    {
      v7 = !*i || *i + 1 == 0;
      if (!v7)
        break;
    }
  }
  else
  {
    i = *(uint64_t ***)a3;
  }
  v8 = *(_QWORD *)a3 + 8 * v5;
  if (i != (uint64_t **)v8)
  {
    v9 = *i;
    do
    {
      v10 = *v9;
      *(_QWORD *)&v181 = v9 + 6;
      *((_QWORD *)&v181 + 1) = v10;
      v11 = sub_1C54232F8((uint64_t)&v170, v165, (uint64_t)&v181);
      if (!*v11)
      {
        v12 = v11;
        v13 = operator new(0x30uLL);
        v13[2] = v181;
        v14 = v165[0];
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = v14;
        *v12 = v13;
        if (*v170)
        {
          v170 = (uint64_t **)*v170;
          v13 = (_OWORD *)*v12;
        }
        sub_1C4768E74(v171, (uint64_t *)v13);
        ++v172;
      }
      do
      {
        v15 = i[1];
        ++i;
        v9 = v15;
        if (v15)
          v16 = v9 + 1 == 0;
        else
          v16 = 1;
      }
      while (v16);
    }
    while (i != (uint64_t **)v8);
    v17 = (uint64_t *)v170;
    if (v170 != &v171)
    {
      v150 = 0;
      v18 = &qword_1ED80A000;
      v152 = a3;
      while (1)
      {
        v19 = v17[5];
        __s1 = (void *)v17[4];
        v20 = *(unsigned int *)(a3 + 8);
        if ((_DWORD)v20)
        {
          v21 = 0;
          if (v19)
          {
            v22 = v17[5];
            v23 = (unsigned __int8 *)v17[4];
            do
            {
              v24 = *v23++;
              v21 = 33 * v21 + v24;
              --v22;
            }
            while (v22);
          }
          v25 = v20 - 1;
          v26 = *(uint64_t ***)a3;
          v155 = *(unsigned int *)(a3 + 8);
          v27 = *(_QWORD *)a3 + 8 * v20 + 8;
          v28 = *(unsigned int *)(a3 + 20);
          v29 = 1;
          for (j = v21; ; j = v31 + v29++)
          {
            v31 = j & v25;
            v32 = v26[v31];
            if (v32 != (uint64_t *)-8)
            {
              if (!v32)
              {
                a3 = v152;
                v18 = &qword_1ED80A000;
                goto LABEL_36;
              }
              if (*(_DWORD *)(v27 + 4 * v31) == v21 && v19 == *v32 && (!v19 || !memcmp(__s1, (char *)v32 + v28, v19)))
              {
                a3 = v152;
                v18 = &qword_1ED80A000;
                if ((_DWORD)v31 != -1)
                {
                  v33 = (int)v31;
                  goto LABEL_37;
                }
LABEL_36:
                v33 = v155;
                goto LABEL_37;
              }
            }
          }
        }
        v33 = 0;
        v26 = *(uint64_t ***)a3;
LABEL_37:
        *(_QWORD *)&v181 = __s1;
        *((_QWORD *)&v181 + 1) = v19;
        v34 = *(_QWORD *)(a1 + 32);
        if (!v34)
          sub_1C485C2F0();
        (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v34 + 48))(&v179, v34, &v181);
        v36 = v179;
        v179 = 0;
        if ((v180 & 1) != 0)
        {
          *(_BYTE *)(a4 + 8) |= 1u;
          *(_QWORD *)a4 = v36;
          sub_1C4FF9CA4((uint64_t)&v179);
          goto LABEL_224;
        }
        v37 = *(_QWORD *)(v36 + 160);
        if (!v37)
          break;
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v37 + 32))(&v181);
        v110 = v181;
        if (!(_QWORD)v181)
          break;
        *(_BYTE *)(a4 + 8) |= 1u;
        *(_QWORD *)a4 = v110;
        v106 = 1;
LABEL_147:
        llvm::Module::~Module((llvm::Module *)v36);
        MEMORY[0x1CAA32FC0]();
LABEL_148:
        sub_1C4FF9CA4((uint64_t)&v179);
        if (v106)
          goto LABEL_224;
        v107 = (uint64_t *)v17[1];
        if (v107)
        {
          do
          {
            v108 = (uint64_t **)v107;
            v107 = (uint64_t *)*v107;
          }
          while (v107);
        }
        else
        {
          do
          {
            v108 = (uint64_t **)v17[2];
            v7 = *v108 == v17;
            v17 = (uint64_t *)v108;
          }
          while (!v7);
        }
        v17 = (uint64_t *)v108;
        if (v108 == &v171)
          goto LABEL_207;
      }
      v38 = v26[v33] + 1;
      v165[0] = 0;
      v165[1] = 0;
      v166 = 0;
      v168 = 0;
      v169 = 0;
      __p = 0;
      for (k = *(_QWORD *)(v36 + 32); k != v36 + 24; k = *(_QWORD *)(k + 8))
      {
        if (k)
          v40 = k - 56;
        else
          v40 = 0;
        if ((*(_BYTE *)(v40 + 23) & 0x10) != 0)
        {
          *(_QWORD *)&v181 = 0;
          *(_QWORD *)&v181 = sub_1C4EE9DE0((llvm::GlobalValue *)v40);
          if (sub_1C55BDFB8(v38, (unint64_t *)&v181))
          {
            llvm::Module::materialize(*(llvm::Module **)(v40 + 40), (llvm::GlobalValue *)v40, v177);
            v41 = v177[0];
            if (v177[0])
            {
LABEL_143:
              *(_BYTE *)(a4 + 8) |= 1u;
              *(_QWORD *)a4 = v41;
              v106 = 1;
              goto LABEL_144;
            }
            if (*((_BYTE *)v18 + 3736))
            {
              v42 = *(uint64_t **)a2;
              v43 = *(_BYTE *)(v36 + 215);
              v44 = v43 < 0;
              if (v43 >= 0)
                v45 = (unsigned __int8 *)(v36 + 192);
              else
                v45 = *(unsigned __int8 **)(v36 + 192);
              v46 = v43 & 0x7F;
              if (v44)
                v47 = *(_QWORD *)(v36 + 200);
              else
                v47 = v46;
              v177[0] = (uint64_t)llvm::MDString::get(*(uint64_t **)a2, v45, v47);
              Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v42, v177, 1, 0, 1);
              llvm::Value::setMetadata(v40, "thinlto_src_module", 0x12uLL, Impl);
            }
            v177[0] = v40;
            sub_1C56D6B88(v165, v177);
          }
        }
      }
      for (m = *(_QWORD *)(v36 + 16); m != v36 + 8; m = *(_QWORD *)(m + 8))
      {
        if (m)
          v50 = m - 56;
        else
          v50 = 0;
        if ((*(_BYTE *)(v50 + 23) & 0x10) != 0)
        {
          *(_QWORD *)&v181 = 0;
          *(_QWORD *)&v181 = sub_1C4EE9DE0((llvm::GlobalValue *)v50);
          if (sub_1C55BDFB8(v38, (unint64_t *)&v181))
          {
            llvm::Module::materialize(*(llvm::Module **)(v50 + 40), (llvm::GlobalValue *)v50, v177);
            v41 = v177[0];
            if (v177[0])
              goto LABEL_143;
            v177[0] = v50;
            sub_1C56D6B88(v165, v177);
          }
        }
      }
      v51 = *(_QWORD *)(v36 + 48);
      if (v51 != v36 + 40)
      {
        while (1)
        {
          v52 = v51 ? v51 - 48 : 0;
          if ((*(_BYTE *)(v52 + 23) & 0x10) != 0)
          {
            v177[0] = 0;
            v177[0] = sub_1C4EE9DE0((llvm::GlobalValue *)v52);
            if (sub_1C55BDFB8(v38, (unint64_t *)v177))
              break;
          }
LABEL_129:
          v51 = *(_QWORD *)(v51 + 8);
          if (v51 == v36 + 40)
            goto LABEL_158;
        }
        llvm::Module::materialize(*(llvm::Module **)(v52 + 40), (llvm::GlobalValue *)v52, &v181);
        v41 = v181;
        if ((_QWORD)v181)
          goto LABEL_143;
        AliaseeObject = (llvm::Module **)llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v52);
        llvm::Module::materialize(AliaseeObject[5], (llvm::GlobalValue *)AliaseeObject, &v181);
        v41 = v181;
        if ((_QWORD)v181)
          goto LABEL_143;
        v54 = (llvm::Function *)llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)v52);
        v182 = 128;
        v55 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
        v181 = (unint64_t)v55;
        if (v182)
        {
          v56 = (unint64_t)v182 << 6;
          v57 = v55 + 16;
          do
          {
            *v57 = 0;
            v57[1] = -4096;
            *(v57 - 2) = &unk_1E814DA10;
            *(v57 - 1) = 2;
            v57[2] = 0;
            v57 += 8;
            v56 -= 64;
          }
          while (v56);
        }
        LOBYTE(v183[0]) = 0;
        v184 = 0;
        v58 = llvm::CloneFunction(v54, (uint64_t)&v181, 0);
        v59 = v58;
        v60 = *(_DWORD *)(v52 + 32);
        v61 = (v60 & 0xF) - 7;
        v62 = *((_DWORD *)v58 + 8);
        v63 = v61 >= 2;
        if (v61 >= 2)
          v64 = *((_DWORD *)v58 + 8);
        else
          v64 = v62 & 0xFFFFFFC0;
        v65 = v64 & 0xFFFFFFF0 | v60 & 0xF;
        *((_DWORD *)v58 + 8) = v65;
        if (!v63
          || (v62 & 0x30) != 0
          && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v58),
              v65 = *((_DWORD *)v59 + 8),
              (hasExternalWeakLinkage & 1) == 0))
        {
          v65 |= 0x4000u;
          *((_DWORD *)v59 + 8) = v65;
        }
        v66 = *(_DWORD *)(v52 + 32) & 0x30;
        v67 = v66 | v65 & 0xFFFFFFCF;
        *((_DWORD *)v59 + 8) = v67;
        if ((v65 & 0xF) - 7 >= 2)
        {
          if (!v66 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v59) & 1) != 0)
            goto LABEL_87;
          v67 = *((_DWORD *)v59 + 8);
        }
        *((_DWORD *)v59 + 8) = v67 | 0x4000;
LABEL_87:
        v68 = (llvm::UndefValue *)v59;
        if (*(_QWORD *)v59 != *(_QWORD *)v52)
          v68 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v59, *(llvm::Constant **)v52, 0);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v52, v68, (llvm::Value *)1);
        llvm::Value::takeName((llvm::Value *)v59, (llvm::Value *)v52);
        if (v184)
        {
          sub_1C4E43068((uint64_t)v183);
          MEMORY[0x1CAA32FB4](v183[0], 8);
          v184 = 0;
        }
        v69 = (_QWORD *)v181;
        if (v182)
        {
          v70 = (_QWORD *)(v181 + ((unint64_t)v182 << 6));
          do
          {
            v71 = v69[3];
            if ((v71 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v72 = v69[7];
              if (v72)
              {
                if (v72 != -8192 && v72 != -4096)
                {
                  v73 = v69[5] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v73 = v69[6];
                  v74 = (unint64_t *)v69[6];
                  if (v74)
                  {
                    *v74 = *v74 & 7 | v73;
                  }
                  else
                  {
                    v75 = v69[7];
                    v76 = ***(int32x2_t ****)v75;
                    v77 = (unint64_t)v76[303];
                    if (v77 <= v73)
                    {
                      v78 = v76[305].u32[0];
                      if (v77 + 16 * v78 > v73)
                      {
                        v79 = v78 - 1;
                        LODWORD(v80) = v79 & ((v75 >> 4) ^ (v75 >> 9));
                        v81 = (uint64_t *)(v77 + 16 * v80);
                        v82 = *v81;
                        if (v75 == *v81)
                        {
LABEL_105:
                          *v81 = -8192;
                          v76[304] = vadd_s32(v76[304], (int32x2_t)0x1FFFFFFFFLL);
                          v75 = v69[7];
                        }
                        else
                        {
                          v83 = 1;
                          while (v82 != -4096)
                          {
                            v84 = v80 + v83++;
                            v80 = v84 & v79;
                            v82 = *(_QWORD *)(v77 + 16 * v80);
                            if (v75 == v82)
                            {
                              v81 = (uint64_t *)(v77 + 16 * v80);
                              goto LABEL_105;
                            }
                          }
                        }
                        *(_BYTE *)(v75 + 17) &= ~1u;
                      }
                    }
                  }
                  v71 = v69[3];
                }
              }
            }
            if (v71 != -4096 && v71 != -8192 && v71 != 0)
            {
              v86 = v69[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v86 = v69[2];
              v87 = (unint64_t *)v69[2];
              if (v87)
              {
                *v87 = *v87 & 7 | v86;
              }
              else
              {
                v88 = v69[3];
                v89 = ***(int32x2_t ****)v88;
                v90 = (unint64_t)v89[303];
                if (v90 <= v86)
                {
                  v91 = v89[305].u32[0];
                  if (v90 + 16 * v91 > v86)
                  {
                    v92 = v91 - 1;
                    LODWORD(v93) = v92 & ((v88 >> 4) ^ (v88 >> 9));
                    v94 = (uint64_t *)(v90 + 16 * v93);
                    v95 = *v94;
                    if (v88 == *v94)
                    {
LABEL_124:
                      *v94 = -8192;
                      v89[304] = vadd_s32(v89[304], (int32x2_t)0x1FFFFFFFFLL);
                      v88 = v69[3];
                    }
                    else
                    {
                      v96 = 1;
                      while (v95 != -4096)
                      {
                        v97 = v93 + v96++;
                        v93 = v97 & v92;
                        v95 = *(_QWORD *)(v90 + 16 * v93);
                        if (v88 == v95)
                        {
                          v94 = (uint64_t *)(v90 + 16 * v93);
                          goto LABEL_124;
                        }
                      }
                    }
                    *(_BYTE *)(v88 + 17) &= ~1u;
                  }
                }
              }
            }
            v69 += 8;
          }
          while (v69 != v70);
          v69 = (_QWORD *)v181;
        }
        MEMORY[0x1CAA32FB4](v69, 8);
        if (*((_BYTE *)v18 + 3736))
        {
          v98 = *(uint64_t **)a2;
          v99 = *(_BYTE *)(v36 + 215);
          v100 = v99 < 0;
          if (v99 >= 0)
            v101 = (unsigned __int8 *)(v36 + 192);
          else
            v101 = *(unsigned __int8 **)(v36 + 192);
          v102 = v99 & 0x7F;
          if (v100)
            v103 = *(_QWORD *)(v36 + 200);
          else
            v103 = v102;
          *(_QWORD *)&v181 = llvm::MDString::get(*(uint64_t **)a2, v101, v103);
          v104 = (llvm::MDNode *)llvm::MDTuple::getImpl(v98, &v181, 1, 0, 1);
          llvm::Value::setMetadata((uint64_t)v59, "thinlto_src_module", 0x12uLL, v104);
        }
        *(_QWORD *)&v181 = v59;
        sub_1C56D6B88(v165, &v181);
        goto LABEL_129;
      }
LABEL_158:
      llvm::UpgradeDebugInfo((llvm *)v36, v35);
      llvm::Module::setPartialSampleProfileRatio((llvm::LLVMContext **)v36, *(const llvm::ModuleSummaryIndex **)a1);
      v109 = (llvm *)llvm::renameModuleForThinLTO(v36, *(_QWORD *)a1, *(_BYTE *)(a1 + 40), (uint64_t)v165);
      if ((_DWORD)v109)
      {
        *(_BYTE *)(a4 + 8) &= ~1u;
        v106 = 1;
        *(_BYTE *)a4 = 1;
        goto LABEL_144;
      }
      v112 = (uint64_t *)__p;
      v111 = v168;
      if (!byte_1ED80AC58)
        goto LABEL_201;
      if (__p == v168)
      {
        v111 = (uint64_t *)__p;
LABEL_201:
        v162 = 0;
        v163 = (llvm::Module *)v36;
        llvm::IRMover::move(&v173, &v163, v112, v111 - v112, &v161, 1, (uint64_t *)&v164);
        sub_1C5052E10(&v161);
        v142 = v163;
        v163 = 0;
        if (v142)
        {
          llvm::Module::~Module(v142);
          MEMORY[0x1CAA32FC0]();
        }
        if (v164)
        {
          v177[0] = (uint64_t)"Function Import: link error: ";
          v178 = 259;
          v157 = v164;
          v164 = 0;
          sub_1C61D2548(&v157, &v158);
          v160 = 260;
          v159 = &v158;
          sub_1C6131AAC(v177, (uint64_t *)&v159, (uint64_t)&v181);
          llvm::report_fatal_error((uint64_t)&v181, 1);
        }
        v36 = 0;
        v106 = 0;
        v150 += (unint64_t)((char *)v168 - (_BYTE *)__p) >> 3;
LABEL_144:
        if (__p)
        {
          v168 = (uint64_t *)__p;
          operator delete(__p);
        }
        MEMORY[0x1CAA32FB4](v165[0], 8);
        if (!v36)
          goto LABEL_148;
        goto LABEL_147;
      }
      while (1)
      {
        v113 = *v112;
        v114 = llvm::dbgs(v109);
        v115 = v114;
        v116 = *(_BYTE *)(a2 + 215);
        v117 = v116 < 0;
        if (v116 >= 0)
          v118 = (const char *)(a2 + 192);
        else
          v118 = *(const char **)(a2 + 192);
        v119 = v116 & 0x7F;
        if (v117)
          v120 = *(_QWORD *)(a2 + 200);
        else
          v120 = v119;
        v121 = llvm::raw_ostream::write(v114, v118, v120);
        v122 = *((_QWORD *)v121 + 4);
        if ((unint64_t)(*((_QWORD *)v121 + 3) - v122) > 8)
        {
          *(_BYTE *)(v122 + 8) = 32;
          *(_QWORD *)v122 = *(_QWORD *)": Import ";
          *((_QWORD *)v115 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v115, ": Import ", 9uLL);
        }
        if ((*(_BYTE *)(v113 + 23) & 0x10) == 0)
          goto LABEL_182;
        v123 = ***(_QWORD ***)v113;
        v124 = *(_QWORD *)(v123 + 152);
        v125 = *(unsigned int *)(v123 + 168);
        if (!(_DWORD)v125)
          goto LABEL_179;
        LODWORD(v126) = (v125 - 1) & ((v113 >> 4) ^ (v113 >> 9));
        v127 = (uint64_t *)(v124 + 16 * v126);
        v128 = *v127;
        if (*v127 != v113)
          break;
LABEL_180:
        v131 = (size_t *)v127[1];
        v134 = *v131;
        v132 = v131 + 2;
        v133 = v134;
        v135 = (_WORD *)*((_QWORD *)v115 + 4);
        if (v134 <= *((_QWORD *)v115 + 3) - (_QWORD)v135)
        {
          if (v133)
          {
            memcpy(v135, v132, v133);
            v135 = (_WORD *)(*((_QWORD *)v115 + 4) + v133);
            *((_QWORD *)v115 + 4) = v135;
          }
          goto LABEL_185;
        }
        llvm::raw_ostream::write(v115, (const char *)v132, v133);
LABEL_182:
        v135 = (_WORD *)*((_QWORD *)v115 + 4);
LABEL_185:
        if (*((_QWORD *)v115 + 3) - (_QWORD)v135 > 5uLL)
        {
          v135[2] = 8301;
          *(_DWORD *)v135 = 1869768224;
          *((_QWORD *)v115 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v115, " from ", 6uLL);
        }
        v136 = *(_BYTE *)(v36 + 215);
        v137 = v136 < 0;
        if (v136 >= 0)
          v138 = (const char *)(v36 + 192);
        else
          v138 = *(const char **)(v36 + 192);
        v139 = v136 & 0x7F;
        if (v137)
          v140 = *(_QWORD *)(v36 + 200);
        else
          v140 = v139;
        v109 = llvm::raw_ostream::write(v115, v138, v140);
        v141 = (_BYTE *)*((_QWORD *)v115 + 4);
        if (*((_BYTE **)v115 + 3) == v141)
        {
          v109 = llvm::raw_ostream::write(v115, "\n", 1uLL);
        }
        else
        {
          *v141 = 10;
          ++*((_QWORD *)v115 + 4);
        }
        if (++v112 == v111)
        {
          v112 = (uint64_t *)__p;
          v111 = v168;
          goto LABEL_201;
        }
      }
      v129 = 1;
      while (v128 != -4096)
      {
        v130 = v126 + v129++;
        v126 = v130 & (v125 - 1);
        v128 = *(_QWORD *)(v124 + 16 * v126);
        if (v128 == v113)
        {
          v127 = (uint64_t *)(v124 + 16 * v126);
          goto LABEL_180;
        }
      }
LABEL_179:
      v127 = (uint64_t *)(v124 + 16 * v125);
      goto LABEL_180;
    }
  }
  v150 = 0;
LABEL_207:
  for (n = *(_QWORD *)(a2 + 16); n != a2 + 8; n = *(_QWORD *)(n + 8))
  {
    if (n)
      v144 = n - 56;
    else
      v144 = 0;
    if (n && *(_BYTE *)(v144 + 16) == 3)
    {
      if ((*(_DWORD *)(v144 + 20) & 0x7FFFFFF) != 0)
        goto LABEL_218;
    }
    else if (*(_BYTE *)(v144 + 16) || *(_QWORD *)(v144 + 72) != v144 + 72 || (*(_BYTE *)(v144 + 34) & 0x80) != 0)
    {
LABEL_218:
      v145 = *(_QWORD *)(v144 + 72);
      if (v145)
      {
        *(_QWORD *)&v181 = "thinlto-internalize";
        *((_QWORD *)&v181 + 1) = 19;
        v165[0] = 0;
        if (sub_1C5331A1C((uint64_t *)(v145 + 24), (uint64_t)&v181, v165))
          *(_DWORD *)(v144 + 32) = *(_DWORD *)(v144 + 32) & 0xFFFFBFC0 | 0x4007;
      }
    }
  }
  *(_BYTE *)(a4 + 8) &= ~1u;
  *(_BYTE *)a4 = v150 != 0;
LABEL_224:
  sub_1C47655E8((uint64_t)&v170, v171);
  v146 = v175;
  if (v176)
  {
    v147 = 16 * v176;
    v148 = (unsigned __int8 **)(v175 + 8);
    do
    {
      if (((unint64_t)*(v148 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v148)
        llvm::MetadataTracking::untrack((uint64_t)v148, *v148);
      v148 += 2;
      v147 -= 16;
    }
    while (v147);
    v146 = v175;
  }
  MEMORY[0x1CAA32FB4](v146, 8);
  return sub_1C56D815C(v174);
}

BOOL sub_1C56D6B88(_QWORD *a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 v18;

  sub_1C56CA114((uint64_t)a1, a2, (uint64_t)&v17);
  v4 = v18;
  if (v18)
  {
    v6 = (_QWORD *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (_QWORD *)a1[3];
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = *a2;
      v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          v15 = *--v6;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        v6 = (_QWORD *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

BOOL sub_1C56D6CA4(uint64_t a1)
{
  const char **v1;
  const char **v3;
  llvm *v4;
  _QWORD *v5;
  char v6;
  void *v7;
  size_t v8;
  _QWORD *v9;
  llvm::raw_ostream *v10;
  std::string *v11;
  uint64_t v12;
  _BOOL8 v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  void *v23;
  llvm *v24;
  llvm::raw_ostream *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v30;
  __int16 v31;
  uint64_t v32;
  std::string v33;
  __int128 *v34;
  __int16 v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[4];
  __int128 v40;
  uint64_t v41;
  _OWORD *v42;
  char v43;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (byte_1ED80B02F >= 0)
    v1 = (const char **)(byte_1ED80B02F & 0x7F);
  else
    v1 = (const char **)qword_1ED80B020;
  if (!v1)
    llvm::report_fatal_error((llvm *)"error: -function-import requires -summary-file\n", (const char *)1);
  if (byte_1ED80B02F >= 0)
    v3 = (const char **)&qword_1ED80B018;
  else
    v3 = (const char **)qword_1ED80B018;
  llvm::getModuleSummaryIndexForFile(v3, v1, 0, (uint64_t)&v44);
  if ((v45 & 1) == 0)
  {
    v5 = v44;
    v44 = 0;
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = 0uLL;
    v33.__r_.__value_.__r.__words[2] = 0x3000000000;
    v6 = *(_BYTE *)(a1 + 191);
    if (v6 >= 0)
      v7 = (void *)(a1 + 168);
    else
      v7 = *(void **)(a1 + 168);
    if (v6 >= 0)
      v8 = v6 & 0x7F;
    else
      v8 = *(_QWORD *)(a1 + 176);
    if (byte_1ED80AF58)
      llvm::ComputeCrossModuleImportForModuleFromIndex((uint64_t)v7, v8, v5, (uint64_t)&v33);
    else
      llvm::ComputeCrossModuleImportForModule(v7, v8, (uint64_t)v5, (uint64_t)&v33);
    v14 = (_QWORD *)*v5;
    if ((_QWORD *)*v5 != v5 + 1)
    {
      do
      {
        v15 = v14[7];
        v16 = v14[8];
        while (v15 != v16)
        {
          v17 = *(_WORD *)(*(_QWORD *)v15 + 12);
          if ((v17 & 0xFu) - 7 <= 1)
            *(_WORD *)(*(_QWORD *)v15 + 12) = v17 & 0xFFF0;
          v15 += 8;
        }
        v18 = (_QWORD *)v14[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v14[2];
            v20 = *v19 == (_QWORD)v14;
            v14 = v19;
          }
          while (!v20);
        }
        v14 = v19;
      }
      while (v19 != v5 + 1);
    }
    v21 = llvm::renameModuleForThinLTO(a1, (uint64_t)v5, 0, 0);
    if ((v21 & 1) != 0)
    {
      v22 = (llvm::raw_ostream *)llvm::errs((llvm *)v21);
      v23 = (void *)*((_QWORD *)v22 + 4);
      if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 0x15uLL)
      {
        v13 = 0;
        qmemcpy(v23, "Error renaming module\n", 22);
        *((_QWORD *)v22 + 4) += 22;
      }
      else
      {
        llvm::raw_ostream::write(v22, "Error renaming module\n", 0x16uLL);
        v13 = 0;
      }
      goto LABEL_50;
    }
    v39[0] = &off_1E8179F80;
    v39[1] = a1;
    v39[3] = v39;
    *(_QWORD *)&v40 = v5;
    *((_QWORD *)&v40 + 1) = &off_1E8179F80;
    v42 = (__int128 *)((char *)&v40 + 8);
    v41 = a1;
    v43 = 0;
    v24 = (llvm *)llvm::FunctionImporter::importFunctions((uint64_t)&v40, a1, (uint64_t)&v33, (uint64_t)&v37);
    if ((v38 & 1) != 0)
    {
      v32 = v37;
      v25 = (llvm::raw_ostream *)llvm::errs(v24);
      v30 = "Error importing module: ";
      v31 = 259;
      llvm::logAllUnhandledErrors(&v32, v25, (uint64_t)&v30);
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      v13 = 0;
    }
    else
    {
      v13 = (_BYTE)v37 != 0;
    }
    v26 = v42;
    if (v42 == (__int128 *)((char *)&v40 + 8))
    {
      v27 = 4;
      v26 = (_QWORD *)&v40 + 1;
    }
    else
    {
      if (!v42)
      {
LABEL_50:
        sub_1C6292A0C((uint64_t)&v33);
        v28 = sub_1C61A8910((uint64_t)v5);
        MEMORY[0x1CAA32FC0](v28, 0x10B0C4007EAB999);
        goto LABEL_51;
      }
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
    goto LABEL_50;
  }
  v9 = v44;
  v44 = 0;
  v36 = v9;
  v10 = (llvm::raw_ostream *)llvm::errs(v4);
  std::operator+<char>();
  v11 = std::string::append(&v33, "': ");
  v12 = v11->__r_.__value_.__r.__words[2];
  v40 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v41 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v35 = 260;
  v34 = &v40;
  llvm::logAllUnhandledErrors(&v36, v10, (uint64_t)&v34);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (v36)
    (*(void (**)(_QWORD *))(*v36 + 8))(v36);
  v13 = 0;
LABEL_51:
  sub_1C6292A90((uint64_t)&v44);
  return v13;
}

void llvm::initializeFunctionImportLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E80);
  if (v2 != -1)
  {
    v5[0] = sub_1C56D70A8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E80, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56D70A8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Summary Based Function Import";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "function-import";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32B8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56D83F8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C56D7138(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v13;
  uint64_t *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  float v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  _BOOL4 v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  size_t v53;
  int v54;
  int v55;
  uint64_t v56;
  __int16 v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  size_t v70;
  uint64_t *v71;
  int v72;
  BOOL v73;
  int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  BOOL v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  size_t **v87;
  BOOL v88;
  int v89;
  BOOL v90;
  int v91;
  char *v92;
  unint64_t v93;
  char *v94;
  size_t v95;
  uint64_t ***v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t ****v101;
  uint64_t ***v102;
  int v103;
  int v104;
  std::string::size_type v105;
  const std::string::value_type *v106;
  char v107;
  uint64_t ***v108;
  size_t v109;
  void **p_dst;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  const std::string::value_type *v114;
  std::string::size_type v115;
  std::string::size_type v116;
  std::string *v117;
  std::string::size_type v118;
  std::string *v119;
  std::string::size_type v120;
  std::string *v121;
  std::string::size_type v122;
  const std::error_category *v123;
  uint64_t v124;
  llvm *v125;
  llvm::raw_ostream *v126;
  uint64_t v127;
  _BOOL4 v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int *v138;
  int v139;
  void *__s2;
  unsigned int v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t *v144;
  const char *v145;
  __int16 v146;
  uint64_t v147;
  void **__dst;
  size_t v149;
  unint64_t v150;
  std::string v151;
  std::string v152;
  __int128 v153;
  std::string::size_type v154;
  uint64_t v155;
  std::string v156;
  __int16 v157;

  v9 = a5;
  v10 = a4;
  sub_1C56D7B7C(a1, a2, a4, a5, a6, a7);
  v14 = *(uint64_t **)(a1 + 80);
  v13 = *(uint64_t **)(a1 + 88);
  v132 = a1;
  if (v13 == v14)
    return;
  v131 = (_DWORD *)(v9 + 8);
  v127 = v9 + 16;
  v15 = (float)a3;
  v136 = v9;
  v137 = a8;
  v134 = *(uint64_t **)(a1 + 88);
  v135 = v10;
  while (1)
  {
    v16 = *v14;
    v155 = *v14;
    if ((dword_1ED80A718 & 0x80000000) == 0 && dword_1ED80A5D0[0] >= dword_1ED80A718)
      goto LABEL_75;
    v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
    v18 = *(_DWORD *)(v10 + 16);
    if (v18)
    {
      v19 = v18 - 1;
      v20 = v19 & (37 * v17);
      v21 = *(_QWORD *)(*(_QWORD *)v10 + 16 * v20);
      if (v17 == v21)
        goto LABEL_75;
      v22 = 1;
      while (v21 != -1)
      {
        v23 = v20 + v22++;
        v20 = v23 & v19;
        v21 = *(_QWORD *)(*(_QWORD *)v10 + 16 * v20);
        if (v17 == v21)
          goto LABEL_75;
      }
    }
    v24 = *((_DWORD *)v14 + 2);
    v25 = v24 & 7;
    if (v25 == 1)
    {
      v26 = dword_1ED80AB98;
    }
    else if (v25 == 4)
    {
      v26 = dword_1ED80AAD8;
    }
    else
    {
      *(float *)&v26 = 1.0;
      if (v25 == 3)
        v26 = dword_1ED80AA18;
    }
    v27 = *(float *)&v26 * v15;
    v28 = v27;
    v29 = *(_DWORD *)(a8 + 16);
    if (!v29)
    {
      v45 = 0;
      goto LABEL_28;
    }
    v30 = (v29 - 1) & (37 * (_DWORD)v17);
    v31 = *(_QWORD *)a8 + 32 * v30;
    v32 = *(_QWORD *)v31;
    if (v17 != *(_QWORD *)v31)
      break;
LABEL_19:
    v34 = *(_DWORD *)(v31 + 8);
    v33 = v31 + 8;
    v35 = (_QWORD *)(v33 + 8);
    v36 = *(_QWORD *)(v33 + 8);
    v37 = (v24 & 7) == 3;
    v38 = (float)v34;
    if (v36)
    {
      if (v27 > v38)
      {
        *(_DWORD *)v33 = v28;
        goto LABEL_22;
      }
      goto LABEL_75;
    }
    v49 = (uint64_t *)(v33 + 16);
    if (v27 > v38)
    {
      v48 = 1;
      goto LABEL_36;
    }
    if (byte_1ED80AD18)
    {
      v44 = (_DWORD *)(*v49 + 16);
      LODWORD(v41) = *v44;
      goto LABEL_74;
    }
LABEL_75:
    v14 += 2;
    if (v14 == v13)
      return;
  }
  v45 = 0;
  v72 = 1;
  while (v32 != -1)
  {
    if (v45)
      v73 = 0;
    else
      v73 = v32 == -2;
    if (v73)
      v45 = (_QWORD *)v31;
    v74 = v30 + v72++;
    v30 = v74 & (v29 - 1);
    v31 = *(_QWORD *)a8 + 32 * v30;
    v32 = *(_QWORD *)v31;
    if (v17 == *(_QWORD *)v31)
      goto LABEL_19;
  }
  if (!v45)
    v45 = (_QWORD *)v31;
LABEL_28:
  v46 = *(_DWORD *)(a8 + 8);
  if (4 * v46 + 4 >= 3 * v29)
  {
    v75 = v27;
    sub_1C56D7DA4((uint64_t *)a8, 2 * v29);
    v76 = *(_DWORD *)(a8 + 16) - 1;
    v77 = v76 & (37 * v17);
    v78 = (_QWORD *)(*(_QWORD *)a8 + 32 * v77);
    v79 = *v78;
    if (v17 != *v78)
    {
      v80 = 0;
      v81 = 1;
      do
      {
        if (v79 == -1)
        {
          v88 = v80 == 0;
          goto LABEL_119;
        }
        if (v80)
          v82 = 0;
        else
          v82 = v79 == -2;
        if (v82)
          v80 = v78;
        v83 = v77 + v81++;
        v77 = v83 & v76;
        v78 = (_QWORD *)(*(_QWORD *)a8 + 32 * v77);
        v79 = *v78;
      }
      while (v17 != *v78);
LABEL_117:
      v47 = v17;
      a8 = v137;
      goto LABEL_106;
    }
LABEL_105:
    v47 = v17;
LABEL_106:
    v28 = v75;
    v45 = v78;
    goto LABEL_31;
  }
  if (v29 + ~v46 - *(_DWORD *)(a8 + 12) <= v29 >> 3)
  {
    v75 = v27;
    sub_1C56D7DA4((uint64_t *)a8, v29);
    v84 = *(_DWORD *)(a8 + 16) - 1;
    v85 = v84 & (37 * v17);
    v78 = (_QWORD *)(*(_QWORD *)a8 + 32 * v85);
    v86 = *v78;
    if (v17 != *v78)
    {
      v80 = 0;
      v89 = 1;
      while (v86 != -1)
      {
        if (v80)
          v90 = 0;
        else
          v90 = v86 == -2;
        if (v90)
          v80 = v78;
        v91 = v85 + v89++;
        v85 = v91 & v84;
        v78 = (_QWORD *)(*(_QWORD *)a8 + 32 * v85);
        v86 = *v78;
        if (v17 == *v78)
          goto LABEL_117;
      }
      v88 = v80 == 0;
LABEL_119:
      if (v88)
        v45 = v78;
      else
        v45 = v80;
      a8 = v137;
      v28 = v75;
      goto LABEL_30;
    }
    goto LABEL_105;
  }
LABEL_30:
  v47 = *v45;
LABEL_31:
  ++*(_DWORD *)(a8 + 8);
  if (v47 != -1)
    --*(_DWORD *)(a8 + 12);
  v48 = 0;
  *v45 = v17;
  *((_DWORD *)v45 + 2) = v28;
  v33 = (uint64_t)(v45 + 1);
  v45[2] = 0;
  v35 = v45 + 2;
  v45[3] = 0;
  v49 = v45 + 3;
  v37 = (v14[1] & 7) == 3;
LABEL_36:
  v138 = (unsigned int *)v33;
  v144 = v49;
  v51 = *(uint64_t **)((v155 & 0xFFFFFFFFFFFFFFF8) + 24);
  v50 = *(uint64_t **)((v155 & 0xFFFFFFFFFFFFFFF8) + 32);
  v52 = (char *)v50 - (char *)v51;
  if (v50 != v51)
  {
    v130 = v37;
    v53 = *(_QWORD *)(v132 + 32);
    __s2 = *(void **)(v132 + 24);
    v54 = *(unsigned __int8 *)(a2 + 128);
    v55 = byte_1ED80A7D8;
    v56 = 8 * (v52 >> 3);
    v142 = (char *)v50 - (char *)v51;
    v143 = v35;
    v141 = v28;
    v139 = byte_1ED80A7D8;
    while (1)
    {
      v36 = *v51;
      v57 = *(_WORD *)(*v51 + 12);
      if (!v54 || (v57 & 0x80) != 0)
      {
        v59 = v57 & 0xF;
        v58 = 4;
        if (((1 << (v57 & 0xF)) & 0x1EB) != 0)
        {
          v60 = *(_DWORD *)(v36 + 8);
          v61 = *v51;
          if (!v60)
          {
            v61 = *(_QWORD *)(v36 + 72);
            v57 = *(_WORD *)(v61 + 12);
            v59 = v57 & 0xF;
          }
          if ((unint64_t)v52 >= 9
            && (v59 - 7) <= 1
            && (*(_QWORD *)(v61 + 32) != v53
             || v53
             && (v62 = memcmp(*(const void **)(v61 + 24), __s2, v53), v55 = v139,
                                                                      v52 = v142,
                                                                      v35 = v143,
                                                                      v28 = v141,
                                                                      v62)))
          {
            v58 = 5;
          }
          else if (*(_DWORD *)(v61 + 64) <= v28 || (*(_BYTE *)(v61 + 68) & 0x20) != 0 || v55)
          {
            if ((v57 & 0x40) != 0)
            {
              v58 = 6;
            }
            else
            {
              if ((*(_BYTE *)(v61 + 68) & 0x10) == 0 || v55)
              {
                *v35 = v36;
                if (!v60)
                  v36 = *(_QWORD *)(v36 + 72);
                *v35 = v36;
                v69 = *(unsigned __int8 **)(v36 + 24);
                v70 = *(_QWORD *)(v36 + 32);
                v71 = sub_1C6293494(a6, v69, v70);
                sub_1C56D7F60(*v71 + 8, *(_QWORD *)(v155 & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(v155 & 0xFFFFFFFFFFFFFFF8));
                if (a7)
                {
                  v87 = sub_1C6292894(a7, v69, v70);
                  sub_1C61A75D0((uint64_t)(*v87 + 1), &v155, (uint64_t)&v156);
                }
                v9 = v136;
                a8 = v137;
                v13 = v134;
                v10 = v135;
                v37 = v130;
LABEL_22:
                v39 = 146;
                if (v37)
                  v39 = 194;
                v40 = *(float *)&dword_1ED80A5D0[v39 + 32] * v15;
                ++dword_1ED80A5D0[0];
                v41 = *(unsigned int *)(v9 + 8);
                v42 = v40;
                if (v41 >= *(_DWORD *)(v9 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v127, v41 + 1, 16);
                  v41 = *(_QWORD *)v9 + 16 * *(unsigned int *)(v9 + 8);
                  *(_QWORD *)v41 = v36;
                  *(_QWORD *)(v41 + 8) = v42;
                  LODWORD(v41) = *(_DWORD *)(v9 + 8);
                }
                else
                {
                  v43 = *(_QWORD *)v9 + 16 * v41;
                  *(_QWORD *)v43 = v36;
                  *(_DWORD *)(v43 + 8) = v42;
                }
                v44 = v131;
LABEL_74:
                *v44 = v41 + 1;
                goto LABEL_75;
              }
              v58 = 7;
            }
          }
          else
          {
            v58 = 3;
          }
        }
      }
      else
      {
        v58 = 2;
      }
      ++v51;
      v56 -= 8;
      if (!v56)
        goto LABEL_62;
    }
  }
  v58 = 0;
LABEL_62:
  *v35 = 0;
  v9 = v136;
  if (v48)
  {
    a8 = v137;
    *v138 = v28;
    v13 = v134;
    v10 = v135;
    if (byte_1ED80AD18)
    {
      v63 = *v144;
      v64 = *(_DWORD *)(*v144 + 16) + 1;
      *(_DWORD *)(v63 + 12) = v58;
      *(_DWORD *)(v63 + 16) = v64;
      v65 = v14[1] & 7;
      if (*(unsigned __int8 *)(v63 + 8) > v65)
        LOBYTE(v65) = *(_BYTE *)(v63 + 8);
      *(_BYTE *)(v63 + 8) = v65;
    }
  }
  else
  {
    a8 = v137;
    v13 = v134;
    v10 = v135;
    if (byte_1ED80AD18)
    {
      v66 = v14[1] & 7;
      v67 = operator new();
      *(_QWORD *)v67 = v155;
      *(_BYTE *)(v67 + 8) = v66;
      *(_DWORD *)(v67 + 12) = v58;
      *(_DWORD *)(v67 + 16) = 1;
      v68 = *v144;
      *v144 = v67;
      if (v68)
        MEMORY[0x1CAA32FC0](v68, 0x1000C40669B30A5);
    }
  }
  if (!byte_1ED80A7D8)
    goto LABEL_75;
  v92 = (char *)operator new(0x20uLL);
  v151.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
  *(_OWORD *)&v151.__r_.__value_.__r.__words[1] = xmmword_1C64638E0;
  strcpy(v92, "Failed to import function ");
  v93 = v155 & 0xFFFFFFFFFFFFFFF8;
  if ((v155 & 1) != 0)
  {
    v96 = *(uint64_t ****)(v93 + 8);
    if ((*((_BYTE *)v96 + 23) & 0x10) == 0)
    {
      v95 = 0;
      v94 = &byte_1C871356D;
LABEL_136:
      if (v95 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v95 >= 0x17)
      {
        v111 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v95 | 7) != 0x17)
          v111 = v95 | 7;
        v112 = v111 + 1;
        p_dst = (void **)operator new(v111 + 1);
        v149 = v95;
        v150 = v112 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v150) = v95;
        p_dst = (void **)&__dst;
        if (!v95)
          goto LABEL_144;
      }
      memmove(p_dst, v94, v95);
LABEL_144:
      *((_BYTE *)p_dst + v95) = 0;
      v107 = HIBYTE(v150);
      v106 = (const std::string::value_type *)__dst;
      v105 = v149;
      goto LABEL_145;
    }
    v97 = ***v96;
    v98 = *(_QWORD *)(v97 + 152);
    v99 = *(unsigned int *)(v97 + 168);
    if ((_DWORD)v99)
    {
      LODWORD(v100) = (v99 - 1) & ((v96 >> 4) ^ (v96 >> 9));
      v101 = (uint64_t ****)(v98 + 16 * v100);
      v102 = *v101;
      if (*v101 == v96)
      {
LABEL_135:
        v108 = v101[1];
        v109 = (size_t)*v108;
        v94 = (char *)(v108 + 2);
        v95 = v109;
        goto LABEL_136;
      }
      v103 = 1;
      while (v102 != (uint64_t ***)-4096)
      {
        v104 = v100 + v103++;
        v100 = v104 & (v99 - 1);
        v102 = *(uint64_t ****)(v98 + 16 * v100);
        if (v102 == v96)
        {
          v101 = (uint64_t ****)(v98 + 16 * v100);
          goto LABEL_135;
        }
      }
    }
    v101 = (uint64_t ****)(v98 + 16 * v99);
    goto LABEL_135;
  }
  v94 = *(char **)(v93 + 8);
  if (v94)
  {
    v95 = *(_QWORD *)(v93 + 16);
    goto LABEL_136;
  }
  v105 = 0;
  v106 = 0;
  v107 = 0;
  __dst = 0;
  v149 = 0;
  v150 = 0;
LABEL_145:
  v113 = v107 < 0;
  if (v107 >= 0)
    v114 = (const std::string::value_type *)&__dst;
  else
    v114 = v106;
  v115 = v107 & 0x7F;
  if (v113)
    v116 = v105;
  else
    v116 = v115;
  v117 = std::string::append(&v151, v114, v116);
  v118 = v117->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v152.__r_.__value_.__l.__data_ = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v152.__r_.__value_.__r.__words[2] = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  v119 = std::string::append(&v152, " due to ");
  v120 = v119->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v156.__r_.__value_.__l.__data_ = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
  v156.__r_.__value_.__r.__words[2] = v120;
  v119->__r_.__value_.__l.__size_ = 0;
  v119->__r_.__value_.__r.__words[2] = 0;
  v119->__r_.__value_.__r.__words[0] = 0;
  v121 = std::string::append(&v156, off_1E817A0C8[v58]);
  v122 = v121->__r_.__value_.__r.__words[2];
  v153 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
  v154 = v122;
  v121->__r_.__value_.__l.__size_ = 0;
  v121->__r_.__value_.__r.__words[2] = 0;
  v121->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v156.__r_.__value_.__l.__data_);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v152.__r_.__value_.__l.__data_);
  if (SHIBYTE(v150) < 0)
    operator delete(__dst);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  v123 = std::generic_category();
  v124 = operator new();
  v157 = 260;
  v156.__r_.__value_.__r.__words[0] = (std::string::size_type)&v153;
  *(_QWORD *)v124 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v156, (_QWORD *)(v124 + 8));
  *(_QWORD *)(v124 + 32) = 45;
  *(_QWORD *)(v124 + 40) = v123;
  *(_BYTE *)(v124 + 48) = 1;
  v147 = v124;
  v126 = (llvm::raw_ostream *)llvm::errs(v125);
  v145 = "Error importing module: ";
  v146 = 259;
  llvm::logAllUnhandledErrors(&v147, v126, (uint64_t)&v145);
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  if (SHIBYTE(v154) < 0)
    operator delete((void *)v153);
}

uint64_t sub_1C56D7B7C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  size_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t **v25;
  uint64_t v26;
  uint64_t v30;
  _BYTE v31[31];

  v30 = result;
  v7 = *(_QWORD **)(result + 40);
  v6 = *(_QWORD **)(result + 48);
  if (v6 == v7)
    return result;
  v26 = a4 + 16;
  do
  {
    v10 = (uint64_t *)(*v7 & 0xFFFFFFFFFFFFFFF8);
    v11 = *(_QWORD *)a3;
    v12 = *(unsigned int *)(a3 + 16);
    result = (uint64_t)sub_1C5470560(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), *v10);
    v14 = (uint64_t *)v10[3];
    v13 = (uint64_t *)v10[4];
    v15 = (char *)v13 - (char *)v14;
    if (v11 + 16 * v12 != result
      && ((unint64_t)v15 < 9 || ((1 << (*(_WORD *)(*(_QWORD *)(result + 8) + 12) & 0xF)) & 0x1EB) != 0)
      || v13 == v14)
    {
      goto LABEL_15;
    }
    v17 = *(const void **)(v30 + 24);
    v16 = *(_QWORD *)(v30 + 32);
    v18 = 8 * (v15 >> 3);
    while (1)
    {
      v19 = *v14;
      if (*(_DWORD *)(*v14 + 8) != 2)
        goto LABEL_14;
      result = llvm::ModuleSummaryIndex::canImportGlobalVar(a2, *v14, 1);
      if (!(_DWORD)result)
        goto LABEL_14;
      v20 = *(unsigned __int8 **)(v19 + 24);
      if ((*(_WORD *)(v19 + 12) & 0xFu) - 7 > 1)
        break;
      if (*(_QWORD *)(v19 + 32) == v16)
      {
        if (!v16)
          goto LABEL_18;
        result = memcmp(*(const void **)(v19 + 24), v17, v16);
        if (!(_DWORD)result)
          goto LABEL_18;
      }
LABEL_14:
      ++v14;
      v18 -= 8;
      if (!v18)
        goto LABEL_15;
    }
    v16 = *(_QWORD *)(v19 + 32);
LABEL_18:
    v21 = sub_1C6293494(a5, v20, v16);
    result = sub_1C56D7F60(*v21 + 8, *(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF8));
    if ((result & 1) != 0)
    {
      if (a6)
      {
        v25 = sub_1C6292894(a6, *(unsigned __int8 **)(*v14 + 24), *(_QWORD *)(*v14 + 32));
        result = sub_1C61A75D0((uint64_t)(*v25 + 1), v7, (uint64_t)v31);
      }
      v22 = *v14;
      if (!*(_BYTE *)(a2 + 129) || (*(_BYTE *)(v22 + 72) & 2) == 0)
      {
        v23 = *(unsigned int *)(a4 + 8);
        if (v23 >= *(_DWORD *)(a4 + 12))
        {
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v26, v23 + 1, 16);
          v23 = *(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 8);
          *(_QWORD *)v23 = v22;
          *(_QWORD *)(v23 + 8) = 0;
          LODWORD(v23) = *(_DWORD *)(a4 + 8);
        }
        else
        {
          v24 = *(_QWORD *)a4 + 16 * v23;
          *(_QWORD *)v24 = v22;
          *(_DWORD *)(v24 + 8) = 0;
        }
        *(_DWORD *)(a4 + 8) = v23 + 1;
      }
    }
LABEL_15:
    ++v7;
  }
  while (v7 != v6);
  return result;
}

_QWORD *sub_1C56D7DA4(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      v13 = &v4[4 * v3];
      do
      {
        v14 = *v12;
        if ((unint64_t)*v12 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & (37 * v14);
          v17 = *a1 + 32 * v16;
          v18 = *(_QWORD *)v17;
          if (v14 != *(_QWORD *)v17)
          {
            v21 = 0;
            v22 = 1;
            while (v18 != -1)
            {
              if (v21)
                v23 = 0;
              else
                v23 = v18 == -2;
              if (v23)
                v21 = v17;
              v24 = v16 + v22++;
              v16 = v24 & v15;
              v17 = *a1 + 32 * v16;
              v18 = *(_QWORD *)v17;
              if (v14 == *(_QWORD *)v17)
                goto LABEL_12;
            }
            if (v21)
              v17 = v21;
          }
LABEL_12:
          *(_QWORD *)v17 = v14;
          *(_DWORD *)(v17 + 8) = *((_DWORD *)v12 + 2);
          *(_QWORD *)(v17 + 16) = v12[2];
          v19 = v12[3];
          v12[3] = 0;
          *(_QWORD *)(v17 + 24) = v19;
          ++*((_DWORD *)a1 + 2);
          v20 = v12[3];
          v12[3] = 0;
          if (v20)
            MEMORY[0x1CAA32FC0](v20, 0x1000C40669B30A5);
        }
        v12 += 4;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v25 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v25)
  {
    v26 = 32 * v25;
    do
    {
      *result = -1;
      result += 4;
      v26 -= 32;
    }
    while (v26);
  }
  return result;
}

uint64_t sub_1C56D7F60(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return 0;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = a2;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_1C542C2D4(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2)
        v3 = a2 % v7;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v21 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

_QWORD *sub_1C56D815C(_QWORD *a1)
{
  sub_1C6292990((uint64_t)(a1 + 3));
  MEMORY[0x1CAA32FB4](a1[3], 8);
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

void sub_1C56D81A0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56D81B4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8179F80;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56D81E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8179F80;
  a2[1] = v2;
  return result;
}

void sub_1C56D8204(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v4;
  const void *v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  size_t v12;
  llvm *v13;
  llvm::raw_ostream *v14;
  llvm::LLVMContextImpl ***v15;
  void **__dst;
  size_t v17;
  int64_t v18;
  __int128 v19;
  void *v20[2];
  __int128 v21;
  int v22;
  void *v23[2];
  void *v24[2];
  __int128 v25;
  void *__p[2];
  uint64_t v27;
  char *v28[2];
  _QWORD v29[22];

  v29[21] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v17 = v4;
    v18 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v18) = *(_QWORD *)(a2 + 8);
  p_dst = (void **)&__dst;
  if (v4)
LABEL_8:
    memmove(p_dst, v6, v4);
  *((_BYTE *)p_dst + v4) = 0;
  v10 = **(_QWORD **)(a1 + 8);
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  *(_OWORD *)__p = 0u;
  v27 = 0;
  v28[0] = (char *)v29;
  if (v18 >= 0)
    v11 = (void **)&__dst;
  else
    v11 = __dst;
  v22 = 0;
  if (v18 >= 0)
    v12 = HIBYTE(v18) & 0x7F;
  else
    v12 = v17;
  v28[1] = (char *)0x400000000;
  llvm::getLazyIRFileModule(v11, v12, (uint64_t)&v19, v10, 1, &v15);
  if (!v15)
  {
    v14 = (llvm::raw_ostream *)llvm::errs(v13);
    llvm::SMDiagnostic::print((llvm::SMDiagnostic *)&v19, "function-import", v14, 1, 1);
    llvm::report_fatal_error((llvm *)"Abort", (const char *)1);
  }
  sub_1C4FAD100(v28);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v25) < 0)
    operator delete(v24[1]);
  if (SHIBYTE(v24[0]) < 0)
    operator delete(v23[0]);
  if (SBYTE7(v21) < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(__dst);
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v15;
}

uint64_t sub_1C56D83F8()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F32B8;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E8179FC8;
  return result;
}

void sub_1C56D8444(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C56D8468()
{
  return "Function Importing";
}

BOOL sub_1C56D8478(llvm::ModulePass *a1, uint64_t **a2)
{
  return (llvm::ModulePass::skipModule(a1, a2) & 1) == 0 && sub_1C56D6CA4((uint64_t)a2);
}

_QWORD *sub_1C56D84B0(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *i;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v25;

  v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v25[16] = 2;
    *(_QWORD *)a1 = v25;
    v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)a1;
  v11 = v5 - 1;
  v12 = *(_QWORD *)a1 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_20:
  i = (_QWORD *)(v10 + 8 * v16);
  if (v17 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return i;
  }
  v20 = operator new(__n + 41, (std::align_val_t)8uLL);
  v21 = v20;
  v22 = (char *)(v20 + 5);
  if (__n)
    memcpy(v20 + 5, a2, __n);
  v22[__n] = 0;
  *v21 = __n;
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = 0x3000000000;
  *i = v21;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

uint64_t **sub_1C56D86B4(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  size_t v21;
  int v22;
  _BOOL4 v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((unsigned __int8 *)v11 + 23);
        if ((v14 & 0x80u) == 0)
          v15 = v11;
        else
          v15 = v12;
        v16 = v11[1];
        if ((v14 & 0x80u) == 0)
          v17 = v14 & 0x7F;
        else
          v17 = v11[1];
        if (v17 >= v8)
          v18 = v8;
        else
          v18 = v17;
        v19 = memcmp(v9, v15, v18);
        v20 = v8 < v17;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_33;
      }
      if ((v14 & 0x80u) != 0)
        v14 = v16;
      if (v8 >= v14)
        v21 = v14;
      else
        v21 = v8;
      v22 = memcmp(v15, v9, v21);
      v23 = v14 < v8;
      if (v22)
        v23 = v22 < 0;
      if (!v23)
        break;
      v5 = v10[1];
      if (!v5)
      {
        v6 = v10 + 1;
        goto LABEL_33;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_33:
    v24 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x50uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    v25 = *(uint64_t **)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v10[7] = 0;
    v10[8] = 0;
    v10[6] = v25;
    *((_DWORD *)v10 + 18) = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v24;
    *v6 = (uint64_t *)v10;
    v26 = (uint64_t *)**a1;
    v27 = (uint64_t *)v10;
    if (v26)
    {
      *a1 = v26;
      v27 = *v6;
    }
    sub_1C4768E74(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

void sub_1C56D883C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C56D8850(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E817A068;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C56D8888(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817A068;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C56D88A8(uint64_t a1, llvm::GlobalValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::GlobalValue **v11;
  llvm::GlobalValue *v12;
  int v13;
  int v14;
  llvm::GlobalValue *v15;
  char *v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  char v25;
  void *v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  int *p_p;
  size_t size;
  uint64_t v32;
  std::string __p;
  uint64_t v35[2];
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = sub_1C4EE9DE0(a2);
  v6 = sub_1C5470560(*(_QWORD *)v4, *(_DWORD *)(v4 + 16), v5);
  if ((uint64_t *)(**(_QWORD **)(a1 + 8) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 16)) != v6)
    return (*(_WORD *)(v6[1] + 12) & 0xFu) - 9 < 0xFFFFFFFE;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v17 = 0;
    v16 = &byte_1C871356D;
    goto LABEL_11;
  }
  v7 = ***(_QWORD ***)a2;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if (!(_DWORD)v9)
    goto LABEL_9;
  LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (llvm::GlobalValue **)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 != a2)
  {
    v13 = 1;
    while (v12 != (llvm::GlobalValue *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(llvm::GlobalValue **)(v8 + 16 * v10);
      if (v12 == a2)
      {
        v11 = (llvm::GlobalValue **)(v8 + 16 * v10);
        goto LABEL_10;
      }
    }
LABEL_9:
    v11 = (llvm::GlobalValue **)(v8 + 16 * v9);
  }
LABEL_10:
  v15 = v11[1];
  v18 = *(_QWORD *)v15;
  v16 = (char *)v15 + 16;
  v17 = v18;
LABEL_11:
  *(_QWORD *)&v36 = v16;
  *((_QWORD *)&v36 + 1) = v17;
  v19 = llvm::StringRef::rfind((uint64_t *)&v36, ".llvm.", 6uLL);
  if (v17 >= v19)
    v20 = v19;
  else
    v20 = v17;
  if (v19 != -1)
    v17 = v20;
  v21 = *(_QWORD *)(a1 + 16);
  v24 = *(void **)(v21 + 192);
  v22 = v21 + 192;
  v23 = v24;
  v25 = *(_BYTE *)(v22 + 23);
  if (v25 >= 0)
    v26 = (void *)v22;
  else
    v26 = v23;
  v27 = *(_QWORD *)(v22 + 8);
  if (v25 >= 0)
    v28 = v25 & 0x7F;
  else
    v28 = v27;
  llvm::GlobalValue::getGlobalIdentifier(v26, v28, v16, v17, 7, &__p);
  v29 = *(_QWORD *)(a1 + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (int *)&__p;
  else
    p_p = (int *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v36 = xmmword_1C85F4BB0;
  v37 = 0;
  llvm::MD5::update((int *)&v36, p_p, size);
  llvm::MD5::final((int *)&v36, (int *)v35);
  v6 = sub_1C5470560(*(_QWORD *)v29, *(_DWORD *)(v29 + 16), v35[0]);
  v32 = *(_QWORD *)(a1 + 8);
  if ((uint64_t *)(*(_QWORD *)v32 + 16 * *(unsigned int *)(v32 + 16)) == v6)
  {
    v36 = xmmword_1C85F4BB0;
    v37 = 0;
    llvm::MD5::update((int *)&v36, (int *)v16, v17);
    llvm::MD5::final((int *)&v36, (int *)v35);
    v6 = sub_1C5470560(*(_QWORD *)v32, *(_DWORD *)(v32 + 16), v35[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return (*(_WORD *)(v6[1] + 12) & 0xFu) - 9 < 0xFFFFFFFE;
}

uint64_t sub_1C56D8B0C()
{
  uint64_t v0;
  uint64_t v2;
  __n128 v3;
  int v4;
  uint64_t *v5;
  __n128 v6;

  LODWORD(v2) = 100;
  v4 = 1;
  v5 = &v2;
  v6.n128_u64[0] = (unint64_t)"N";
  v6.n128_u64[1] = 1;
  v3.n128_u64[0] = (unint64_t)"Only import functions with less than N instructions";
  v3.n128_u64[1] = 51;
  sub_1C6292AF0((int **)&v5, &v4, (__int128 *)&v6, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED80A5D8, &dword_1C475E000);
  LODWORD(v2) = -1;
  v5 = &v2;
  v6.n128_u64[0] = (unint64_t)"N";
  v4 = 1;
  v6.n128_u64[1] = 1;
  v3.n128_u64[0] = (unint64_t)"Only import first N functions if N>=0 (default -1)";
  v3.n128_u64[1] = 50;
  sub_1C6292C38((int **)&v5, &v4, (__int128 *)&v6, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED80A698, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)&v2;
  LODWORD(v5) = 1;
  v6.n128_u64[0] = (unint64_t)"Import functions with noinline attribute";
  v6.n128_u64[1] = 40;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80A758, "force-import-all", &v3, &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80A758, &dword_1C475E000);
  v2 = 0x3FE6666666666666;
  v4 = 1;
  v5 = &v2;
  v6.n128_u64[0] = (unint64_t)"x";
  v6.n128_u64[1] = 1;
                                     "before processing newly imported functions";
  v3.n128_u64[1] = 125;
  sub_1C6292D7C((double **)&v5, &v4, (__int128 *)&v6, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4EBA468, &qword_1ED80A818, &dword_1C475E000);
  v5 = &v2;
  v6.n128_u64[0] = (unint64_t)"x";
  v4 = 1;
  v6.n128_u64[1] = 1;
  v2 = 0x3FF0000000000000;
                                     "threshold by this factor before processing newly imported functions";
  v3.n128_u64[1] = 150;
  sub_1C6292EC8((double **)&v5, &v4, (__int128 *)&v6, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4EBA468, &qword_1ED80A8D8, &dword_1C475E000);
  v5 = &v2;
  v6.n128_u64[0] = (unint64_t)"x";
  v4 = 1;
  v6.n128_u64[1] = 1;
  v2 = 0x4024000000000000;
  v3.n128_u64[1] = 61;
  sub_1C6293014((double **)&v5, &v4, (__int128 *)&v6, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4EBA468, &qword_1ED80A998, &dword_1C475E000);
  v5 = &v2;
  v6.n128_u64[0] = (unint64_t)"x";
  v4 = 1;
  v6.n128_u64[1] = 1;
  v2 = 0x4059000000000000;
  v3.n128_u64[1] = 66;
  sub_1C6293160((double **)&v5, &v4, (__int128 *)&v6, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4EBA468, &qword_1ED80AA58, &dword_1C475E000);
  LODWORD(v2) = 0;
  v5 = &v2;
  v6.n128_u64[0] = (unint64_t)"N";
  v4 = 1;
  v6.n128_u64[1] = 1;
  v3.n128_u64[1] = 62;
  sub_1C62932AC((int **)&v5, &v4, (__int128 *)&v6, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4EBA468, &qword_1ED80AB18, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)&v2;
  LODWORD(v5) = 1;
  v6.n128_u64[0] = (unint64_t)"Print imported functions";
  v6.n128_u64[1] = 24;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80ABD8, "print-imports", &v3, &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80ABD8, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)&v2;
  LODWORD(v5) = 1;
  v6.n128_u64[0] = (unint64_t)"Print information for functions rejected for importing";
  v6.n128_u64[1] = 54;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80AC98, "print-import-failures", &v3, &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80AC98, &dword_1C475E000);
  LOBYTE(v2) = 1;
  v3.n128_u64[0] = (unint64_t)&v2;
  LODWORD(v5) = 1;
  v6.n128_u64[0] = (unint64_t)"Compute dead symbols";
  v6.n128_u64[1] = 20;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80AD58, "compute-dead", &v3, &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80AD58, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)&v2;
  LODWORD(v5) = 1;
  v6.n128_u64[0] = (unint64_t)"Enable import metadata like 'thinlto_src_module'";
  v6.n128_u64[1] = 48;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80AE18, "enable-import-metadata", &v3, &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80AE18, &dword_1C475E000);
  v0 = sub_1C47AD050((uint64_t)qword_1ED80AF98, 0, 0);
  qword_1ED80B020 = 0;
  qword_1ED80B018 = 0;
  unk_1ED80B028 = 0;
  qword_1ED80B038 = 0;
  qword_1ED80B048 = 0;
  qword_1ED80B040 = 0;
  qword_1ED80B030 = (uint64_t)&unk_1E819E950;
  byte_1ED80B050 = 0;
  qword_1ED80AF98[0] = (uint64_t)&unk_1E819E480;
  qword_1ED80B058 = (uint64_t)&unk_1E819E970;
  qword_1ED80B060 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED80B078 = (uint64_t)&qword_1ED80B060;
  llvm::cl::Option::setArgStr(v0, "summary-file", 0xCuLL);
  qword_1ED80AFB8 = (uint64_t)"The summary file to use for function importing.";
  qword_1ED80AFC0 = 47;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED80AF98);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, qword_1ED80AF98, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Import all external functions in index.";
  v6.n128_u64[1] = 39;
  sub_1C62933F8((__int128 *)&v6);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED80AED8, &dword_1C475E000);
}

BOOL llvm::runFunctionSpecialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(llvm::PredicateInfo **__return_ptr, uint64_t, uint64_t);
  void (*v9)(llvm::PredicateInfo **__return_ptr, uint64_t, uint64_t);
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void (**v22)(_QWORD *);
  _QWORD *v23;
  void (**v24)(_QWORD *);
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  void (**v30)(_QWORD *);
  _QWORD *v31;
  void (**v32)(_QWORD *);
  _QWORD *v33;
  void (**v34)(_QWORD *);
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *i;
  llvm *v38;
  llvm::GlobalVariable *v39;
  llvm::SCCPInstVisitor *v40;
  unint64_t *v41;
  char *v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  const llvm::Function *v47;
  uint64_t j;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm::Function *v52;
  llvm::PredicateInfo *v53;
  uint64_t v54;
  llvm::BasicBlock *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  llvm::Function **v60;
  uint64_t v61;
  llvm::Function *v62;
  int v63;
  _BOOL8 v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t k;
  uint64_t v69;
  llvm::SCCPInstVisitor *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  const llvm::Function *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  llvm::AssumptionCache *v94;
  uint64_t v95;
  llvm::BasicBlock *v96;
  _QWORD *v97;
  unsigned int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  BOOL v105;
  int v106;
  BOOL v107;
  uint64_t m;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  uint64_t v122;
  _QWORD *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  int v127;
  char *v128;
  char *v129;
  int v130;
  char *v131;
  uint64_t v132;
  int v133;
  char *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  llvm::Value *v145;
  llvm::Function *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  BOOL v152;
  int64_t v153;
  unint64_t v154;
  uint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  int v159;
  char *v160;
  uint64_t v161;
  int v162;
  _BOOL4 v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  char *v167;
  unint64_t v168;
  char *v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  int v173;
  llvm::Function *v174;
  char *v175;
  char *v176;
  unint64_t v177;
  _QWORD *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t *v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v197;
  unint64_t v198;
  uint64_t v199;
  int32x2_t *v200;
  unint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  int v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  BOOL v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t *v226;
  uint64_t v227;
  int32x2_t *v228;
  unint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  int v235;
  int v236;
  unint64_t v238;
  unint64_t *v239;
  uint64_t v240;
  int32x2_t *v241;
  unint64_t v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  int v248;
  int v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t v252;
  int v253;
  BOOL v254;
  llvm::GlobalValue *Section;
  uint64_t v256;
  llvm::Module *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  llvm::BasicBlock *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  BOOL v265;
  char v266;
  llvm::Function **v267;
  uint64_t v268;
  llvm::Function *v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t n;
  uint64_t v274;
  llvm::SCCPInstVisitor *v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  llvm::Value *v283;
  uint64_t ii;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  llvm::Value *v294;
  llvm::Constant *v295;
  const llvm::Function *v296;
  llvm::Value *v297;
  uint64_t v298;
  int v299;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  BOOL v305;
  _DWORD *v306;
  llvm::UndefValue *v307;
  llvm::PointerType *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  llvm::SCCPInstVisitor *v316;
  uint64_t v317;
  uint64_t jj;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  _BYTE *v325;
  _BYTE *v326;
  uint64_t *v327;
  uint64_t v328;
  llvm::Function **v329;
  uint64_t v330;
  llvm::Function **v331;
  llvm::Function *v332;
  unint64_t *v333;
  unint64_t v334;
  _QWORD *v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t v339;
  int v342;
  unsigned int v343;
  void *v344;
  uint64_t v345;
  llvm::Function *v346;
  int v347;
  char v348;
  uint64_t v349;
  uint64_t *v350;
  llvm::BasicBlock *v351;
  char *v352;
  char *v353;
  int v354;
  uint64_t v355;
  uint64_t *v356;
  llvm::Value *v357;
  llvm::Value *v358;
  llvm::Value *v359;
  uint64_t *v360;
  llvm::PredicateInfo *v361[3];
  llvm::SCCPInstVisitor *v362;
  char *v363;
  int v364;
  _BYTE v365[40];
  int v366[4];
  unsigned __int8 v367;
  void *v368;
  uint64_t v369;
  _BYTE v370[64];
  void *v371;
  uint64_t v372;
  _BYTE v373[128];
  _QWORD v374[3];
  _QWORD *v375;
  _QWORD v376[3];
  _QWORD *v377;
  _QWORD v378[3];
  _QWORD *v379;
  _BOOL8 *v380;
  _BYTE v381[24];
  _BYTE *v382;
  _BYTE v383[24];
  _BYTE *v384;
  _BYTE v385[24];
  _BYTE *v386;
  _BYTE *v387;
  void *v388;
  uint64_t v389;
  int v390;
  _BYTE v391[32];
  _BYTE *v392;
  void *__b;
  uint64_t v394;
  int v395;
  _BYTE v396[32];
  void *v397;
  uint64_t v398;
  _BYTE v399[48];
  uint64_t v400[2];
  unsigned int v401;
  int v402;
  _QWORD v403[3];
  _QWORD *v404;
  _QWORD v405[3];
  _QWORD *v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  void *v411;
  uint64_t v412;
  __int128 v413;
  __int128 v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  _QWORD v418[6];
  _QWORD v419[3];
  __int128 v420;
  void *v421;
  uint64_t v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  void *v432;
  uint64_t v433;
  _BYTE v434[128];
  void *v435;
  void *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  int v440;
  uint64_t v441;
  uint64_t v442;
  char *v443;
  uint64_t v444;
  _QWORD v445[170];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = v5;
  v16 = v15;
  v360 = (uint64_t *)v4;
  v445[168] = *MEMORY[0x1E0C80C00];
  v17 = (_QWORD *)v5[3];
  if (v17)
  {
    if (v17 == v5)
    {
      v404 = v403;
      (*(void (**)(_QWORD *, _QWORD *))(*v5 + 24))(v5, v403);
      v18 = v404;
    }
    else
    {
      v18 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
      v404 = v18;
    }
    v406 = 0;
    if (v18)
    {
      v19 = operator new(0x28uLL);
      v20 = v19;
      *v19 = &off_1E817A118;
      if (v18 == v403)
      {
        v19[4] = v19 + 1;
        (*(void (**)(_QWORD *))(v403[0] + 24))(v403);
      }
      else
      {
        v19[4] = v18;
        v404 = 0;
      }
      v406 = v20;
    }
  }
  else
  {
    v404 = 0;
    v406 = 0;
  }
  llvm::SCCPSolver::SCCPSolver((uint64_t *)&v362, v16, v405, *v360);
  v21 = v406;
  if (v406 == v405)
  {
    v22 = (void (**)(_QWORD *))(v405[0] + 32);
    v21 = v405;
  }
  else
  {
    if (!v406)
      goto LABEL_16;
    v22 = (void (**)(_QWORD *))(*v406 + 40);
  }
  (*v22)(v21);
LABEL_16:
  v23 = v404;
  if (v404 == v403)
  {
    v24 = (void (**)(_QWORD *))(v403[0] + 32);
    v23 = v403;
  }
  else
  {
    if (!v404)
      goto LABEL_21;
    v24 = (void (**)(_QWORD *))(*v404 + 40);
  }
  (*v24)(v23);
LABEL_21:
  v25 = (_QWORD *)v11[3];
  if (v25)
  {
    if (v25 == v11)
    {
      v379 = v378;
      (*(void (**)(_QWORD *, _QWORD *))(*v11 + 24))(v11, v378);
    }
    else
    {
      v379 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v25 + 16))(v25);
    }
  }
  else
  {
    v379 = 0;
  }
  v26 = (_QWORD *)v13[3];
  if (v26)
  {
    if (v26 == v13)
    {
      v377 = v376;
      (*(void (**)(_QWORD *, _QWORD *))(*v13 + 24))(v13, v376);
    }
    else
    {
      v377 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v26 + 16))(v26);
    }
  }
  else
  {
    v377 = 0;
  }
  v27 = (_QWORD *)v14[3];
  if (v27)
  {
    if (v27 == v14)
    {
      v375 = v374;
      (*(void (**)(_QWORD *, _QWORD *))(*v14 + 24))(v14, v374);
    }
    else
    {
      v375 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v27 + 16))(v27);
    }
  }
  else
  {
    v375 = 0;
  }
  v380 = (_BOOL8 *)&v362;
  v28 = v381;
  if (v379)
  {
    if (v379 == v378)
    {
      v382 = v381;
      (*(void (**)(_QWORD *, _BYTE *))(v378[0] + 24))(v378, v381);
    }
    else
    {
      v382 = (_BYTE *)(*(uint64_t (**)(void))(*v379 + 16))();
    }
  }
  else
  {
    v382 = 0;
  }
  if (v377)
  {
    if (v377 == v376)
    {
      v384 = v383;
      (*(void (**)(_QWORD *))(v376[0] + 24))(v376);
    }
    else
    {
      v384 = (_BYTE *)(*(uint64_t (**)(void))(*v377 + 16))();
    }
  }
  else
  {
    v384 = 0;
  }
  if (v375)
  {
    if (v375 == v374)
    {
      v386 = v385;
      (*(void (**)(_QWORD *))(v374[0] + 24))(v374);
    }
    else
    {
      v386 = (_BYTE *)(*(uint64_t (**)(void))(*v375 + 16))();
    }
  }
  else
  {
    v386 = 0;
  }
  v387 = v391;
  v388 = v391;
  v389 = 4;
  v390 = 0;
  v392 = v396;
  __b = v396;
  v394 = 4;
  v395 = 0;
  v397 = v399;
  v398 = 0x600000000;
  v402 = 0;
  v400[1] = 0;
  v400[0] = 0;
  v401 = 0;
  v29 = v375;
  if (v375 == v374)
  {
    v30 = (void (**)(_QWORD *))(v374[0] + 32);
    v29 = v374;
  }
  else
  {
    if (!v375)
      goto LABEL_56;
    v30 = (void (**)(_QWORD *))(*v375 + 40);
  }
  (*v30)(v29);
LABEL_56:
  v31 = v377;
  if (v377 == v376)
  {
    v32 = (void (**)(_QWORD *))(v376[0] + 32);
    v31 = v376;
  }
  else
  {
    if (!v377)
      goto LABEL_61;
    v32 = (void (**)(_QWORD *))(*v377 + 40);
  }
  (*v32)(v31);
LABEL_61:
  v33 = v379;
  if (v379 == v378)
  {
    v34 = (void (**)(_QWORD *))(v378[0] + 32);
    v33 = v378;
  }
  else
  {
    if (!v379)
      goto LABEL_66;
    v34 = (void (**)(_QWORD *))(*v379 + 40);
  }
  (*v34)(v33);
LABEL_66:
  v35 = v360 + 3;
  v36 = (uint64_t *)v360[4];
  if (v36 != v360 + 3)
  {
    do
    {
      if (v36)
        v50 = (uint64_t)(v36 - 7);
      else
        v50 = 0;
      if (v36 && *(_BYTE *)(v50 + 16) == 3)
      {
        if ((*(_DWORD *)(v50 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_106;
      }
      else if (!*(_BYTE *)(v50 + 16) && *(_QWORD *)(v50 + 72) == v50 + 72 && (*(_BYTE *)(v50 + 34) & 0x80) == 0)
      {
        goto LABEL_106;
      }
      v51 = *(_QWORD *)(v50 + 112);
      if (v51 && (*(_BYTE *)(v51 + 15) & 1) != 0)
        goto LABEL_106;
      v9(v361, v7, v50);
      llvm::SCCPSolver::addAnalysis((uint64_t *)&v362, v50, (uint64_t)v361);
      v53 = v361[0];
      v361[0] = 0;
      if (v53)
      {
        llvm::PredicateInfo::~PredicateInfo(v53);
        MEMORY[0x1CAA32FC0]();
      }
      if (!llvm::canTrackArgumentsInterprocedurally((llvm *)v50, v52))
      {
        v54 = *(_QWORD *)(v50 + 80);
        if (v54)
          v55 = (llvm::BasicBlock *)(v54 - 24);
        else
          v55 = 0;
        llvm::SCCPInstVisitor::markBlockExecutable(v362, v55);
        if ((*(_WORD *)(v50 + 18) & 1) == 0)
        {
          v56 = *(_QWORD *)(v50 + 88);
          goto LABEL_113;
        }
        llvm::Function::BuildLazyArguments((llvm::Function *)v50);
        v56 = *(_QWORD *)(v50 + 88);
        if ((*(_WORD *)(v50 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v50);
          v57 = *(_QWORD *)(v50 + 88);
        }
        else
        {
LABEL_113:
          v57 = v56;
        }
        v58 = v57 + 40 * *(_QWORD *)(v50 + 96);
        while (v56 != v58)
        {
          sub_1C5F70CDC((_BOOL8)v362, v56);
          v56 += 40;
        }
        goto LABEL_106;
      }
      sub_1C4774094((llvm::SCCPInstVisitor *)((char *)v362 + 624), v50);
LABEL_106:
      v36 = (uint64_t *)v36[1];
    }
    while (v36 != v35);
  }
  for (i = (uint64_t *)v360[2]; i != v360 + 1; i = (uint64_t *)i[1])
  {
    if (i)
      v38 = (llvm *)(i - 7);
    else
      v38 = 0;
    llvm::Constant::removeDeadConstantUsers((uint64_t)v38);
    if (llvm::canTrackGlobalVariableInterprocedurally(v38, v39))
      sub_1C5F7BE40(v362, (uint64_t)v38);
  }
  v40 = v362;
  v41 = (unint64_t *)*((_QWORD *)v362 + 79);
  if (v41 == *((unint64_t **)v362 + 78))
    v42 = (char *)v362 + 644;
  else
    v42 = (char *)v362 + 640;
  v43 = *(unsigned int *)v42;
  v44 = &v41[v43];
  if ((_DWORD)v43)
  {
    v45 = 8 * v43;
    while (*v41 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v41;
      v45 -= 8;
      if (!v45)
      {
        v41 = v44;
        break;
      }
    }
  }
  v371 = v373;
  v372 = 0x1000000000;
  sub_1C618F808((unsigned int *)&v371, v41, v44, v44);
  if (*((_DWORD *)v40 + 161) == *((_DWORD *)v40 + 162))
  {
    for (j = v360[4]; (uint64_t *)j != v35; j = *(_QWORD *)(j + 8))
    {
      if (j)
        v49 = j - 56;
      else
        v49 = 0;
      sub_1C56DB494(v49);
    }
    v64 = 0;
    goto LABEL_580;
  }
  do
  {
    llvm::SCCPInstVisitor::solve(v362, v46, v47);
    if (!(_DWORD)v372)
      goto LABEL_126;
    v59 = 0;
    v60 = (llvm::Function **)v371;
    v61 = 8 * v372;
    do
    {
      v62 = *v60++;
      if (llvm::SCCPInstVisitor::resolvedUndefsIn(v362, v62))
        v59 = 1;
      v61 -= 8;
    }
    while (v61);
  }
  while ((v59 & 1) != 0);
  if (!(_DWORD)v372)
  {
LABEL_126:
    LOBYTE(v63) = 0;
    goto LABEL_145;
  }
  v63 = 0;
  v65 = (char *)v371;
  v66 = (char *)v371 + 8 * v372;
  do
  {
    v67 = *(_QWORD *)v65 + 72;
    for (k = *(_QWORD *)(*(_QWORD *)v65 + 80); k != v67; k = *(_QWORD *)(k + 8))
    {
      if (k)
        v69 = k - 24;
      else
        v69 = 0;
      v70 = v362;
      v71 = sub_1C477672C((uint64_t)v362 + 40, v69);
      v72 = *((_QWORD *)v70 + 6);
      if (v72 == *((_QWORD *)v70 + 5))
        v73 = 60;
      else
        v73 = 56;
      if (v71 != (_QWORD *)(v72 + 8 * *(unsigned int *)((char *)v70 + v73)))
      {
        v74 = v69 + 40;
        v75 = *(_QWORD *)(v69 + 48);
        if (v75 != v69 + 40)
        {
          do
          {
            v76 = *(_QWORD *)(v75 + 8);
            if (v75)
              v77 = v75 - 24;
            else
              v77 = 0;
            v63 |= sub_1C56DB594((uint64_t **)&v380, v77);
            v75 = v76;
          }
          while (v76 != v74);
        }
      }
    }
    v65 += 8;
  }
  while (v65 != v66);
LABEL_145:
  v368 = v370;
  v369 = 0x800000000;
  if (dword_1ED80B1C0 && (_DWORD)v372)
  {
    v78 = (uint64_t *)v371;
    v79 = (uint64_t *)((char *)v371 + 8 * v372);
    v347 = 1;
    do
    {
      v348 = 0;
      v350 = v79;
      do
      {
        v80 = *v78;
        v81 = sub_1C477672C((uint64_t)&v387, *v78);
        if (v388 == v387)
          v84 = (uint64_t *)((char *)&v389 + 4);
        else
          v84 = &v389;
        if (v81 != (_QWORD *)((char *)v388 + 8 * *(unsigned int *)v84))
          goto LABEL_153;
        v85 = *(_QWORD *)(v80 + 112);
        if (v85)
        {
          if ((*(_BYTE *)(v85 + 17) & 4) != 0 || *(char *)(v85 + 13) < 0)
            goto LABEL_153;
        }
        v86 = *(_QWORD *)(v80 + 80);
        if (v86)
          v87 = v86 - 24;
        else
          v87 = 0;
        v88 = *v380;
        v89 = sub_1C477672C(*v380 + 40, v87);
        v90 = *(_QWORD *)(v88 + 48);
        v91 = 56;
        if (v90 == *(_QWORD *)(v88 + 40))
          v91 = 60;
        if (v89 == (_QWORD *)(v90 + 8 * *(unsigned int *)(v88 + v91)))
          goto LABEL_153;
        v92 = *(_QWORD *)(v80 + 112);
        if (v92)
        {
          if ((*(_BYTE *)(v92 + 12) & 4) != 0)
            goto LABEL_153;
        }
        HIBYTE(v436) = 0;
        *(_WORD *)((char *)&v436 + 5) = 0;
        v435 = (void *)v80;
        LODWORD(v436) = 0;
        BYTE4(v436) = 0;
        v438 = 0;
        v439 = 0;
        v437 = 0;
        v440 = 0;
        v441 = 0;
        v442 = 0;
        sub_1C62935A0((uint64_t)&v410, (uint64_t)v400, (uint64_t *)&v435, (uint64_t)&v436);
        MEMORY[0x1CAA32FB4](v438, 8);
        MEMORY[0x1CAA32FB4](0, 8);
        v93 = v410;
        if ((_BYTE)v412)
        {
          v435 = &v439;
          v436 = &v439;
          v437 = 32;
          LODWORD(v438) = 0;
          if (!v382)
            goto LABEL_635;
          v94 = (llvm::AssumptionCache *)(*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v382 + 48))(v382, v80);
          llvm::CodeMetrics::collectEphemeralValues(v80, v94, (llvm::SmallPtrSetImplBase *)&v435);
          v95 = *(_QWORD *)(v80 + 80);
          if (v95 != v80 + 72)
          {
            while (v384)
            {
              if (v95)
                v96 = (llvm::BasicBlock *)(v95 - 24);
              else
                v96 = 0;
              v97 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v384 + 48))();
              llvm::CodeMetrics::analyzeBasicBlock((uint64_t)(v93 + 8), v96, v97, &v435, 0);
              v95 = *(_QWORD *)(v95 + 8);
              if (v95 == v80 + 72)
                goto LABEL_174;
            }
LABEL_635:
            sub_1C485C2F0();
          }
LABEL_174:
          if (v436 != v435)
            free(v436);
        }
        if (v93[10])
          goto LABEL_153;
        v98 = *((_DWORD *)v93 + 4);
        if (!byte_1ED80B100 && v98 < dword_1ED80B340)
          goto LABEL_153;
        v99 = v402;
        v407 = (char *)&v409;
        v100 = 5 * v98;
        v408 = 0x800000000;
        v101 = 8;
        v435 = (void *)1;
        do
        {
          *(void **)((char *)&v435 + v101) = (void *)-4096;
          v101 += 16;
        }
        while (v101 != 136);
        v443 = (char *)v445;
        v444 = 0x800000000;
        if ((*(_BYTE *)(v80 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v80);
          v102 = *(_QWORD *)(v80 + 88);
          if ((*(_WORD *)(v80 + 18) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v80);
            v103 = *(_QWORD *)(v80 + 88);
            goto LABEL_184;
          }
        }
        else
        {
          v102 = *(_QWORD *)(v80 + 88);
        }
        v103 = v102;
LABEL_184:
        v355 = v103 + 40 * *(_QWORD *)(v80 + 96);
        v346 = (llvm::Function *)v80;
        if (v102 != v355)
        {
          v349 = -(uint64_t)(v100 + v100 * v99);
          while (1)
          {
            v432 = v434;
            v433 = 0x800000000;
            if ((*(_DWORD *)(*(_QWORD *)v102 + 8) & 0xFE) == 0x12
              || ((v104 = *(_DWORD *)(*(_QWORD *)v102 + 8),
                   v105 = v104 > 0x15,
                   v106 = (1 << v104) & 0x20AC7F,
                   !v105)
                ? (v107 = v106 == 0)
                : (v107 = 1),
                  !v107))
            {
              if (*(_QWORD *)(v102 + 8) && *((_BYTE *)sub_1C5F7EFFC((uint64_t *)(*v380 + 136), v102) + 8) == 6)
              {
                for (m = *(_QWORD *)(*(_QWORD *)(v102 + 24) + 8); m; m = *(_QWORD *)(m + 8))
                {
                  v109 = *(_QWORD *)(m + 24);
                  v110 = *(unsigned __int8 *)(v109 + 16);
                  if (v110 == 84 || v110 == 33)
                  {
                    v111 = *(_QWORD *)(v109 + 64);
                    if ((!v111 || (*(char *)(v111 + 13) & 0x80000000) == 0)
                      && (llvm::CallBase::hasFnAttrOnCalledFunction(*(_QWORD *)(m + 24), 15) & 1) == 0)
                    {
                      v112 = *v380;
                      v113 = sub_1C477672C(*v380 + 40, *(_QWORD *)(v109 + 40));
                      v114 = *(_QWORD *)(v112 + 48);
                      v115 = 56;
                      if (v114 == *(_QWORD *)(v112 + 40))
                        v115 = 60;
                      if (v113 != (_QWORD *)(v114 + 8 * *(unsigned int *)(v112 + v115)))
                      {
                        v116 = *(_QWORD *)(v109
                                         - 32 * (*(_DWORD *)(v109 + 20) & 0x7FFFFFF)
                                         + 32 * *(unsigned int *)(v102 + 32));
                        v117 = *(unsigned __int8 *)(v116 + 16);
                        switch(v117)
                        {
                          case 3u:
                            if ((*(_BYTE *)(v116 + 80) & 1) == 0 && !byte_1ED80B4C0)
                              goto LABEL_224;
                            if ((*(_DWORD *)(*(_QWORD *)(v116 + 24) + 8) & 0xFE) != 0x12)
                            {
                              v118 = *(_DWORD *)(*(_QWORD *)(v116 + 24) + 8);
                              v105 = v118 > 0x15;
                              v119 = (1 << v118) & 0x20AC7F;
                              if (v105 || v119 == 0)
                                goto LABEL_224;
                            }
                            break;
                          case 5u:
                            if (*(_BYTE *)(*(_QWORD *)(v116 - 32 * (*(_DWORD *)(v116 + 20) & 0x7FFFFFF)) + 16))
                              goto LABEL_224;
                            break;
                          case 0xCu:
                            goto LABEL_224;
                          default:
                            if (v117 > 0x14)
                              continue;
                            break;
                        }
                        if (*((_BYTE *)sub_1C5F7EFFC((uint64_t *)(*v380 + 136), *(_QWORD *)(v109- 32 * (*(_DWORD *)(v109 + 20) & 0x7FFFFFF)+ 32 * *(unsigned int *)(v102 + 32)))+ 8) == 2|| byte_1ED80B580 != 0)
                        {
                          v122 = v433;
                          if (v433 >= (unint64_t)HIDWORD(v433))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v432, (uint64_t)v434, v433 + 1, 16);
                            v122 = v433;
                          }
                          v123 = (char *)v432 + 16 * v122;
                          *v123 = v109;
                          v123[1] = v116;
                          LODWORD(v433) = v433 + 1;
                        }
                      }
                    }
                  }
                }
LABEL_224:
                if ((_DWORD)v433)
                  break;
              }
            }
LABEL_290:
            if (v432 != v434)
              free(v432);
            v102 += 40;
            if (v102 == v355)
              goto LABEL_293;
          }
          v124 = (char *)v432;
          v352 = (char *)v432 + 16 * v433;
          while (1)
          {
            v125 = *(char **)v124;
            v357 = (llvm::Value *)*((_QWORD *)v124 + 1);
            v430 = 0u;
            v431 = 0u;
            v428 = 0u;
            v429 = 0u;
            v426 = 0u;
            v427 = 0u;
            v424 = 0u;
            v425 = 0u;
            v423 = 0u;
            v421 = &v423;
            v422 = 0x800000000;
            v410 = v125;
            v411 = &v413;
            v412 = 0x800000000;
            v420 = 0u;
            v363 = v125;
            v364 = 0;
            sub_1C62938FC((uint64_t)v366, (uint64_t)&v435, (uint64_t *)&v363, &v364);
            v126 = *(_QWORD *)v366;
            v127 = v367;
            if (v367)
            {
              v128 = v443;
              if (v444 >= HIDWORD(v444))
              {
                v156 = v444 + 1;
                if (v443 <= (char *)&v410 && &v443[168 * v444] > (char *)&v410)
                {
                  v157 = (char *)&v410 - v443;
                  sub_1C56DC0F8((uint64_t)&v443, v156);
                  v128 = v443;
                  v129 = &v443[v157];
                }
                else
                {
                  sub_1C56DC0F8((uint64_t)&v443, v156);
                  v129 = (char *)&v410;
                  v128 = v443;
                }
              }
              else
              {
                v129 = (char *)&v410;
              }
              v130 = v444;
              v131 = &v128[168 * v444];
              *(_QWORD *)v131 = *(_QWORD *)v129;
              *((_QWORD *)v131 + 2) = 0x800000000;
              *((_QWORD *)v131 + 1) = v131 + 24;
              v132 = (uint64_t)(v131 + 8);
              if (*((_DWORD *)v129 + 4))
                sub_1C6180FA8(v132, (uint64_t)(v129 + 8));
              *(_OWORD *)&v128[168 * v130 + 152] = *(_OWORD *)(v129 + 152);
              v133 = v444;
              LODWORD(v444) = v444 + 1;
              *(_DWORD *)(v126 + 8) = v133;
              v134 = &v443[168 * v444 - 168];
              v79 = v350;
            }
            else
            {
              v134 = &v443[168 * *(unsigned int *)(*(_QWORD *)v366 + 8)];
            }
            if (v411 != &v413)
              free(v411);
            if (v421 != &v423)
              free(v421);
            v135 = byte_1ED80B100;
            if (v127)
            {
              v136 = v349;
              if (byte_1ED80B100)
                v136 = 1;
              *((_QWORD *)v134 + 19) = v136;
              *((_DWORD *)v134 + 40) = 0;
            }
            if (!v135)
            {
              v137 = *(_QWORD *)(v102 + 24);
              v421 = &v423;
              v422 = 0x100000000;
              DWORD1(v426) = 0;
              *((_QWORD *)&v423 + 1) = 0;
              *(_QWORD *)&v424 = 0;
              DWORD2(v424) = 0;
              LOBYTE(v426) = 0;
              *(_QWORD *)&v425 = 0;
              *((_QWORD *)&v425 + 1) = v137;
              sub_1C53BA620((uint64_t)&v421, 0);
              v411 = 0;
              v410 = 0;
              LODWORD(v412) = 0;
              v413 = 0u;
              v414 = 0u;
              v415 = 0;
              v416 = v418;
              v417 = 0x400000000;
              v418[5] = 0;
              v419[0] = 0;
              v418[4] = v419;
              v419[1] = 1;
              llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)&v410, (uint64_t)&v421);
              if (!v384)
                goto LABEL_635;
              v138 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v384 + 48))(v384, v137);
              v139 = *(_QWORD *)(v102 + 8);
              if (v139)
              {
                v140 = (_QWORD *)v138;
                v141 = 0;
                v142 = 0;
                do
                {
                  v143 = sub_1C56DC20C(*(_QWORD *)(v139 + 24), v140, (uint64_t *)&v410);
                  if (v144 == 1)
                    v141 = 1;
                  if (__OFADD__(v142, v143))
                    v142 = ((uint64_t)(v142 + v143) >> 63) ^ 0x8000000000000000;
                  else
                    v142 += v143;
                  v139 = *(_QWORD *)(v139 + 8);
                }
                while (v139);
              }
              else
              {
                v142 = 0;
                v141 = 0;
              }
              v145 = llvm::Value::stripPointerCasts(v357);
              if (v145)
              {
                v146 = v145;
                if (!*((_BYTE *)v145 + 16))
                {
                  if (!v384)
                    goto LABEL_635;
                  v351 = (llvm::BasicBlock *)(*(uint64_t (**)(_BYTE *, llvm::Value *))(*(_QWORD *)v384 + 48))(v384, v145);
                  v147 = *(_QWORD *)(v102 + 8);
                  if (v147)
                  {
                    v354 = 0;
                    while (1)
                    {
                      v148 = *(_QWORD *)(v147 + 24);
                      v149 = *(unsigned __int8 *)(v148 + 16);
                      if ((v149 == 84 || v149 == 33) && *(_QWORD *)(v148 - 32) == v102)
                        break;
LABEL_268:
                      v147 = *(_QWORD *)(v147 + 8);
                      if (!v147)
                        goto LABEL_271;
                    }
                    llvm::getInlineParams(dword_1ED82D9C0, (uint64_t)v366);
                    v366[0] += 100;
                    llvm::getInlineCost(v148, v146, v366, v351, (uint64_t)sub_1C4E5E070, (uint64_t)v381, (uint64_t (*)(uint64_t, llvm *))sub_1C6293B48, (uint64_t)v385, (uint64_t)&v363, 0, v345, 0, 0);
                    if ((_DWORD)v363 == 0x80000000)
                    {
                      v150 = v366[0];
                      goto LABEL_265;
                    }
                    if (((_DWORD)v363 + 0x7FFFFFFF) <= 0xFFFFFFFD)
                    {
                      v150 = (HIDWORD(v363) - (_DWORD)v363) & ~((HIDWORD(v363) - (int)v363) >> 31);
LABEL_265:
                      v354 += v150;
                    }
                    if (v365[32])
                      sub_1C61996A0((uint64_t)v365);
                    goto LABEL_268;
                  }
                  v354 = 0;
LABEL_271:
                  if (__OFADD__(v142, v354))
                    v142 = ((uint64_t)(v142 + v354) >> 63) ^ 0x8000000000000000;
                  else
                    v142 += v354;
                  v79 = v350;
                }
              }
              llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(&v410);
              sub_1C4DC4E38((uint64_t *)&v423 + 1);
              if (v421 != &v423)
                free(v421);
              if (v141 == 1)
                *((_DWORD *)v134 + 40) = 1;
              v151 = *((_QWORD *)v134 + 19);
              v152 = __OFADD__(v151, v142);
              v153 = v151 + v142;
              if (v152)
                v153 = (v153 >> 63) ^ 0x8000000000000000;
              *((_QWORD *)v134 + 19) = v153;
            }
            v154 = *((unsigned int *)v134 + 4);
            if (v154 >= *((unsigned int *)v134 + 5))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v134 + 8), (uint64_t)(v134 + 24), v154 + 1, 16);
              v154 = *((unsigned int *)v134 + 4);
            }
            v155 = (uint64_t *)(*((_QWORD *)v134 + 1) + 16 * v154);
            *v155 = v102;
            v155[1] = (uint64_t)v357;
            ++*((_DWORD *)v134 + 4);
            v124 += 16;
            if (v124 == v352)
              goto LABEL_290;
          }
        }
LABEL_293:
        v158 = v443;
        if ((_DWORD)v444)
        {
          v161 = 168 * v444;
          v160 = v443;
          do
          {
            v162 = *((_DWORD *)v158 + 40);
            v163 = *((_QWORD *)v158 + 19) < 1;
            if (v162)
              v163 = v162 < 1;
            if (v163)
            {
              v164 = *(_QWORD *)v158;
              v410 = 0;
              if (sub_1C617D1A8((uint64_t)&v435, v164, &v410))
              {
                *(_QWORD *)v410 = -8192;
                LODWORD(v435) = (_DWORD)v435 - 2;
                ++HIDWORD(v435);
              }
            }
            else
            {
              if (v158 != v160)
              {
                *(_QWORD *)v160 = *(_QWORD *)v158;
                sub_1C6180FA8((uint64_t)(v160 + 8), (uint64_t)(v158 + 8));
                v165 = *((_QWORD *)v158 + 19);
                *((_DWORD *)v160 + 40) = *((_DWORD *)v158 + 40);
                *((_QWORD *)v160 + 19) = v165;
                v166 = 1022611261 * ((unint64_t)(v160 - v443) >> 3);
                *((_DWORD *)sub_1C6293B6C(&v435, (uint64_t *)v160) + 2) = v166;
              }
              v160 += 168;
            }
            v158 += 168;
            v161 -= 168;
          }
          while (v161);
          v158 = v443;
          v159 = v444;
        }
        else
        {
          v159 = 0;
          v160 = v443;
        }
        sub_1C56DBE98((uint64_t *)&v443, (uint64_t)v160, (uint64_t)&v158[168 * v159]);
        sub_1C6293BD0(&v435);
        v410 = (char *)&v412;
        v411 = (void *)0x800000000;
        if ((_DWORD)v444)
          sub_1C56DBB94((uint64_t)&v410, (uint64_t *)&v443);
        sub_1C56DBB94((uint64_t)&v407, (uint64_t *)&v410);
        sub_1C56DBA68(&v410);
        v167 = v407;
        v168 = v408;
        v169 = &v407[168 * v408];
        if ((_DWORD)v408)
        {
          v170 = v408;
          while (1)
          {
            v171 = (uint64_t *)operator new(168 * v170, MEMORY[0x1E0DE4E10]);
            if (v171)
              break;
            v105 = v170 > 1;
            v170 >>= 1;
            if (!v105)
              goto LABEL_312;
          }
          v172 = v171;
          sub_1C56DC554((uint64_t)v167, v169, v168, v171, v170);
          operator delete(v172);
        }
        else
        {
LABEL_312:
          sub_1C56DC554((uint64_t)v167, v169, v168, 0, 0);
        }
        v173 = v408;
        v35 = v360 + 3;
        v174 = v346;
        if (v408 > dword_1ED80B280)
        {
          sub_1C56DBE98((uint64_t *)&v407, (uint64_t)&v407[168 * dword_1ED80B280], (uint64_t)&v407[168 * v408]);
          v173 = v408;
        }
        sub_1C56DBA68(&v443);
        if ((v435 & 1) == 0)
          MEMORY[0x1CAA32FB4](v436, 8);
        if (v173)
        {
          if ((_DWORD)v408)
          {
            v358 = (llvm::Value *)v407;
            v175 = &v407[168 * v408];
            v353 = v175;
            do
            {
              LODWORD(v412) = 128;
              v176 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
              v410 = v176;
              v411 = 0;
              if ((_DWORD)v412)
              {
                v177 = (unint64_t)v412 << 6;
                v178 = v176 + 16;
                do
                {
                  *v178 = 0;
                  v178[1] = -4096;
                  *(v178 - 2) = &unk_1E814DA10;
                  *(v178 - 1) = 2;
                  v178[2] = 0;
                  v178 += 8;
                  v177 -= 64;
                }
                while (v177);
              }
              LOBYTE(v413) = 0;
              BYTE8(v414) = 0;
              v179 = llvm::CloneFunction(v174, (uint64_t)&v410, 0);
              sub_1C56DB494((uint64_t)v179);
              v180 = *(_QWORD *)(**((_QWORD **)v358 + 1) + 24);
              v435 = &v437;
              v436 = (void *)0x800000000;
              v181 = *(_QWORD *)(v180 + 8);
              if (v181)
              {
                v182 = 0;
                do
                {
                  v183 = *(_QWORD *)(v181 + 24);
                  v184 = *(unsigned __int8 *)(v183 + 16);
                  if (v184 == 84 || v184 == 33)
                  {
                    v185 = *(_QWORD *)(v183 - 32);
                    if (v185
                      && !*(_BYTE *)(v185 + 16)
                      && v185 == v180
                      && *(_QWORD *)(v185 + 24) == *(_QWORD *)(v183 + 72))
                    {
                      if (v182 >= HIDWORD(v436))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v435, (uint64_t)&v437, v182 + 1, 8);
                        v182 = v436;
                      }
                      *((_QWORD *)v435 + v182) = v183;
                      v182 = (_DWORD)v436 + 1;
                      LODWORD(v436) = (_DWORD)v436 + 1;
                    }
                  }
                  v181 = *(_QWORD *)(v181 + 8);
                }
                while (v181);
                v187 = (uint64_t *)v435;
                if (v182)
                {
                  v356 = (uint64_t *)((char *)v435 + 8 * v182);
                  v188 = v179 + 8;
                  while (1)
                  {
                    v189 = *v187;
                    v190 = (_QWORD *)*((_QWORD *)v358 + 1);
                    v191 = *((unsigned int *)v358 + 4);
                    if (*(char **)(*(_QWORD *)(*v187 + 40) + 56) == v179)
                    {
                      v193 = &v190[2 * v191];
                      if (*((_DWORD *)v358 + 4))
                      {
                        while (1)
                        {
                          v194 = *v190;
                          v195 = *(_QWORD *)(v189
                                           - 32 * (*(_DWORD *)(v189 + 20) & 0x7FFFFFF)
                                           + 32 * *(unsigned int *)(*v190 + 32));
                          v422 = 2;
                          *(_QWORD *)&v423 = 0;
                          *((_QWORD *)&v423 + 1) = v194;
                          if (v194 != -8192 && v194 != -4096 && v194 != 0)
                            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v422);
                          v421 = &unk_1E814DA10;
                          *(_QWORD *)&v424 = &v410;
                          v197 = sub_1C52E2ED8((uint64_t)&v410, &v421);
                          if (*((_QWORD *)&v423 + 1) != -8192
                            && *((_QWORD *)&v423 + 1) != -4096
                            && *((_QWORD *)&v423 + 1))
                          {
                            v198 = v422 & 0xFFFFFFFFFFFFFFF8;
                            *(_QWORD *)(v422 & 0xFFFFFFFFFFFFFFF8) = v423;
                            if ((_QWORD)v423)
                            {
                              *(_QWORD *)v423 = *(_QWORD *)v423 & 7 | v198;
                            }
                            else
                            {
                              v199 = *((_QWORD *)&v423 + 1);
                              v200 = (int32x2_t *)****((_QWORD ****)&v423 + 1);
                              v201 = (unint64_t)v200[303];
                              if (v201 <= v198)
                              {
                                v202 = v200[305].u32[0];
                                if (v201 + 16 * v202 > v198)
                                {
                                  v203 = v202 - 1;
                                  LODWORD(v204) = v203 & ((DWORD2(v423) >> 4) ^ (DWORD2(v423) >> 9));
                                  v205 = (uint64_t *)(v201 + 16 * v204);
                                  v206 = *v205;
                                  if (*((_QWORD *)&v423 + 1) == *v205)
                                  {
LABEL_365:
                                    *v205 = -8192;
                                    v200[304] = vadd_s32(v200[304], (int32x2_t)0x1FFFFFFFFLL);
                                    v199 = *((_QWORD *)&v423 + 1);
                                  }
                                  else
                                  {
                                    v207 = 1;
                                    while (v206 != -4096)
                                    {
                                      v208 = v204 + v207++;
                                      v204 = v208 & v203;
                                      v206 = *(_QWORD *)(v201 + 16 * v204);
                                      if (*((_QWORD *)&v423 + 1) == v206)
                                      {
                                        v205 = (uint64_t *)(v201 + 16 * v204);
                                        goto LABEL_365;
                                      }
                                    }
                                  }
                                  *(_BYTE *)(v199 + 17) &= ~1u;
                                }
                              }
                            }
                          }
                          if (v195 != v197[7])
                            break;
                          v190 += 2;
                          if (v190 == v193)
                            goto LABEL_372;
                        }
                        v190 = (_QWORD *)*((_QWORD *)v358 + 1);
                        v191 = *((unsigned int *)v358 + 4);
                        if (*((_DWORD *)v358 + 4))
                        {
LABEL_343:
                          v192 = &v190[2 * v191];
                          while (*(_QWORD *)(v189
                                            - 32 * (*(_DWORD *)(v189 + 20) & 0x7FFFFFF)
                                            + 32 * *(unsigned int *)(*v190 + 32)) == v190[1])
                          {
                            v190 += 2;
                            if (v190 == v192)
                              goto LABEL_372;
                          }
                          goto LABEL_378;
                        }
                      }
                    }
                    else if (*((_DWORD *)v358 + 4))
                    {
                      goto LABEL_343;
                    }
LABEL_372:
                    v209 = *(_QWORD *)(v189 - 32);
                    *(_QWORD *)(v189 + 72) = *((_QWORD *)v179 + 3);
                    if (v209)
                    {
                      **(_QWORD **)(v189 - 16) = *(_QWORD *)(v189 - 24);
                      v210 = *(_QWORD *)(v189 - 24);
                      if (v210)
                        *(_QWORD *)(v210 + 16) = *(_QWORD *)(v189 - 16);
                    }
                    *(_QWORD *)(v189 - 32) = v179;
                    v211 = *((_QWORD *)v179 + 1);
                    *(_QWORD *)(v189 - 24) = v211;
                    if (v211)
                      *(_QWORD *)(v211 + 16) = v189 - 24;
                    *(_QWORD *)(v189 - 16) = v188;
                    *v188 = v189 - 32;
                    sub_1C5F70CDC(*v380, v189);
LABEL_378:
                    if (++v187 == v356)
                    {
                      v187 = (uint64_t *)v435;
                      v79 = v350;
                      v174 = v346;
                      break;
                    }
                  }
                }
                v175 = v353;
                if (v187 != &v437)
                  free(v187);
              }
              llvm::SCCPInstVisitor::markArgInFuncSpecialization(*v380, (llvm::Function *)v179, (_QWORD **)v358 + 1);
              v212 = v369;
              if (v369 >= (unint64_t)HIDWORD(v369))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v368, (uint64_t)v370, v369 + 1, 8);
                v212 = v369;
              }
              *((_QWORD *)v368 + v212) = v179;
              LODWORD(v369) = v369 + 1;
              ++v402;
              v213 = *((_QWORD *)v174 + 1);
              v35 = v360 + 3;
              if (!v213)
                goto LABEL_395;
              v214 = 0;
              v215 = *((_QWORD *)v174 + 1);
              do
              {
                v215 = *(_QWORD *)(v215 + 8);
                --v214;
              }
              while (v215);
              if (v214)
              {
                while (1)
                {
                  v216 = *(_QWORD *)(v213 + 24);
                  v217 = *(unsigned __int8 *)(v216 + 16);
                  if (v217 < 0x1C)
                    break;
                  v218 = v217 - 33;
                  v105 = v218 > 0x33;
                  v219 = (1 << v218) & 0x8000000000041;
                  v220 = v105 || v219 == 0;
                  if (v220 || *(llvm::Function **)(*(_QWORD *)(v216 + 40) + 56) != v174)
                    break;
                  v213 = *(_QWORD *)(v213 + 8);
                  if (!v213)
                    goto LABEL_395;
                }
              }
              else
              {
LABEL_395:
                sub_1C63B5E20((_QWORD *)*v380, (uint64_t)v174);
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v392, (uint64_t)v174);
              }
              if (BYTE8(v414))
              {
                sub_1C4E43068((uint64_t)&v413);
                MEMORY[0x1CAA32FB4](v413, 8);
                BYTE8(v414) = 0;
              }
              v221 = v410;
              if ((_DWORD)v412)
              {
                v222 = &v410[64 * (unint64_t)v412];
                do
                {
                  v223 = *((_QWORD *)v221 + 3);
                  if ((v223 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  {
                    v224 = *((_QWORD *)v221 + 7);
                    if (v224)
                    {
                      if (v224 != -8192 && v224 != -4096)
                      {
                        v225 = *((_QWORD *)v221 + 5) & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v225 = *((_QWORD *)v221 + 6);
                        v226 = (unint64_t *)*((_QWORD *)v221 + 6);
                        if (v226)
                        {
                          *v226 = *v226 & 7 | v225;
                        }
                        else
                        {
                          v227 = *((_QWORD *)v221 + 7);
                          v228 = ***(int32x2_t ****)v227;
                          v229 = (unint64_t)v228[303];
                          if (v229 <= v225)
                          {
                            v230 = v228[305].u32[0];
                            if (v229 + 16 * v230 > v225)
                            {
                              v231 = v230 - 1;
                              LODWORD(v232) = v231 & ((v227 >> 4) ^ (v227 >> 9));
                              v233 = (uint64_t *)(v229 + 16 * v232);
                              v234 = *v233;
                              if (v227 == *v233)
                              {
LABEL_412:
                                *v233 = -8192;
                                v228[304] = vadd_s32(v228[304], (int32x2_t)0x1FFFFFFFFLL);
                                v227 = *((_QWORD *)v221 + 7);
                              }
                              else
                              {
                                v235 = 1;
                                while (v234 != -4096)
                                {
                                  v236 = v232 + v235++;
                                  v232 = v236 & v231;
                                  v234 = *(_QWORD *)(v229 + 16 * v232);
                                  if (v227 == v234)
                                  {
                                    v233 = (uint64_t *)(v229 + 16 * v232);
                                    goto LABEL_412;
                                  }
                                }
                              }
                              *(_BYTE *)(v227 + 17) &= ~1u;
                            }
                          }
                        }
                        v223 = *((_QWORD *)v221 + 3);
                      }
                    }
                  }
                  if (v223 != -4096 && v223 != -8192 && v223 != 0)
                  {
                    v238 = *((_QWORD *)v221 + 1) & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v238 = *((_QWORD *)v221 + 2);
                    v239 = (unint64_t *)*((_QWORD *)v221 + 2);
                    if (v239)
                    {
                      *v239 = *v239 & 7 | v238;
                    }
                    else
                    {
                      v240 = *((_QWORD *)v221 + 3);
                      v241 = ***(int32x2_t ****)v240;
                      v242 = (unint64_t)v241[303];
                      if (v242 <= v238)
                      {
                        v243 = v241[305].u32[0];
                        if (v242 + 16 * v243 > v238)
                        {
                          v244 = v243 - 1;
                          LODWORD(v245) = v244 & ((v240 >> 4) ^ (v240 >> 9));
                          v246 = (uint64_t *)(v242 + 16 * v245);
                          v247 = *v246;
                          if (v240 == *v246)
                          {
LABEL_431:
                            *v246 = -8192;
                            v241[304] = vadd_s32(v241[304], (int32x2_t)0x1FFFFFFFFLL);
                            v240 = *((_QWORD *)v221 + 3);
                          }
                          else
                          {
                            v248 = 1;
                            while (v247 != -4096)
                            {
                              v249 = v245 + v248++;
                              v245 = v249 & v244;
                              v247 = *(_QWORD *)(v242 + 16 * v245);
                              if (v240 == v247)
                              {
                                v246 = (uint64_t *)(v242 + 16 * v245);
                                goto LABEL_431;
                              }
                            }
                          }
                          *(_BYTE *)(v240 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v221 += 64;
                }
                while (v221 != v222);
                v221 = v410;
              }
              MEMORY[0x1CAA32FB4](v221, 8);
              v358 = (llvm::Value *)((char *)v358 + 168);
            }
            while (v358 != (llvm::Value *)v175);
          }
          v348 = 1;
        }
        sub_1C56DBA68(&v407);
LABEL_153:
        ++v78;
      }
      while (v78 != v79);
      if ((_DWORD)v369)
      {
        v250 = (uint64_t *)v368;
        v251 = (uint64_t *)((char *)v368 + 8 * v369);
        do
        {
          v252 = *v250;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v387, *v250);
          v253 = *(unsigned __int8 *)(v252 + 16);
          if (v252)
            v254 = v253 == 3;
          else
            v254 = 0;
          if (v254)
          {
            if ((*(_DWORD *)(v252 + 20) & 0x7FFFFFF) == 0)
              goto LABEL_459;
          }
          else if (!*(_BYTE *)(v252 + 16) && *(_QWORD *)(v252 + 72) == v252 + 72 && (*(_BYTE *)(v252 + 34) & 0x80) == 0)
          {
            goto LABEL_459;
          }
          if (((1 << (*(_DWORD *)(v252 + 32) & 0xF)) & 0x7D5) != 0)
          {
            if (v253 != 3
              || (Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v252), v256 != 12)
              || (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
                ? (v265 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
                : (v265 = 0),
                  !v265))
            {
              if ((*(_DWORD *)(v252 + 32) & 0xFu) - 5 < 4 || ((1 << (*(_DWORD *)(v252 + 32) & 0xF)) & 0x614) == 0)
              {
                v257 = *(llvm::Module **)(v252 + 40);
                if (!v257 || !llvm::Module::getSemanticInterposition(v257) || (*(_BYTE *)(v252 + 33) & 0x40) != 0)
                {
                  v258 = *(_QWORD *)(v252 + 112);
                  if (!v258 || (*(_BYTE *)(v258 + 14) & 2) == 0)
                    sub_1C5F7BED4(*v380, v252);
                }
              }
            }
          }
LABEL_459:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(*v380 + 624), v252);
          v259 = v372;
          if (v372 >= (unint64_t)HIDWORD(v372))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v371, (uint64_t)v373, v372 + 1, 8);
            v259 = v372;
          }
          *((_QWORD *)v371 + v259) = v252;
          LODWORD(v372) = v372 + 1;
          v260 = *(_QWORD *)(v252 + 80);
          if (v260)
            v261 = (llvm::BasicBlock *)(v260 - 24);
          else
            v261 = 0;
          llvm::SCCPInstVisitor::markBlockExecutable((llvm::SCCPInstVisitor *)*v380, v261);
          if ((*(_WORD *)(v252 + 18) & 1) == 0)
          {
            v262 = *(_QWORD *)(v252 + 88);
LABEL_466:
            v263 = v262;
            goto LABEL_467;
          }
          llvm::Function::BuildLazyArguments((llvm::Function *)v252);
          v262 = *(_QWORD *)(v252 + 88);
          if ((*(_WORD *)(v252 + 18) & 1) == 0)
            goto LABEL_466;
          llvm::Function::BuildLazyArguments((llvm::Function *)v252);
          v263 = *(_QWORD *)(v252 + 88);
LABEL_467:
          v264 = v263 + 40 * *(_QWORD *)(v252 + 96);
          while (v262 != v264)
          {
            if (*(_QWORD *)(v262 + 8))
              sub_1C56DB594((uint64_t **)&v380, v262);
            v262 += 40;
          }
          ++v250;
        }
        while (v250 != v251);
      }
      if ((v348 & 1) == 0)
        break;
      while (1)
      {
        llvm::SCCPInstVisitor::solve(v362, v82, v83);
        if (!(_DWORD)v369)
          break;
        v266 = 0;
        v267 = (llvm::Function **)v368;
        v268 = 8 * v369;
        do
        {
          v269 = *v267++;
          if (llvm::SCCPInstVisitor::resolvedUndefsIn(v362, v269))
            v266 = 1;
          v268 -= 8;
        }
        while (v268);
        if ((v266 & 1) == 0)
        {
          if ((_DWORD)v369)
          {
            v270 = (char *)v368;
            v271 = (char *)v368 + 8 * v369;
            do
            {
              v272 = *(_QWORD *)v270 + 72;
              for (n = *(_QWORD *)(*(_QWORD *)v270 + 80); n != v272; n = *(_QWORD *)(n + 8))
              {
                if (n)
                  v274 = n - 24;
                else
                  v274 = 0;
                v275 = v362;
                v276 = sub_1C477672C((uint64_t)v362 + 40, v274);
                v277 = *((_QWORD *)v275 + 6);
                if (v277 == *((_QWORD *)v275 + 5))
                  v278 = 60;
                else
                  v278 = 56;
                if (v276 != (_QWORD *)(v277 + 8 * *(unsigned int *)((char *)v275 + v278)))
                {
                  v279 = v274 + 40;
                  v280 = *(_QWORD *)(v274 + 48);
                  if (v280 != v274 + 40)
                  {
                    do
                    {
                      v281 = *(_QWORD *)(v280 + 8);
                      if (v280)
                        v282 = v280 - 24;
                      else
                        v282 = 0;
                      sub_1C56DB594((uint64_t **)&v380, v282);
                      v280 = v281;
                    }
                    while (v281 != v279);
                  }
                }
              }
              v270 += 8;
            }
            while (v270 != v271);
          }
          break;
        }
      }
      if ((_DWORD)v372)
      {
        v283 = (llvm::Value *)v371;
        v359 = (llvm::Value *)((char *)v371 + 8 * v372);
        do
        {
          for (ii = *(_QWORD *)(*(_QWORD *)v283 + 8); ii; ii = *(_QWORD *)(ii + 8))
          {
            v285 = *(_QWORD *)(ii + 24);
            if (v285 && *(_BYTE *)(v285 + 16) == 84)
            {
              v286 = *(_DWORD *)(v285 + 20);
              v287 = v285 - 32 * (v286 & 0x7FFFFFF);
              if (v286 < 0 && (v317 = *(_QWORD *)(v287 - 8), (v317 & 0xFFFFFFFF0) != 0))
                v288 = (*(_DWORD *)(v287 - 12) - *(_DWORD *)(v287 - v317));
              else
                v288 = 0;
              v289 = v285 - 32 * v288 - 32;
              if (v287 != v289)
              {
                v290 = 0;
                do
                {
                  v291 = v285 - 32 * (*(_DWORD *)(v285 + 20) & 0x7FFFFFF);
                  v292 = (unint64_t)(v287 - v291) >> 5;
                  v293 = v292;
                  v294 = *(llvm::Value **)(v291 + 32 * v292);
                  v295 = *(llvm::Constant **)v294;
                  if (((sub_1C4D91D40(v285, v292, 45) & 1) != 0 || sub_1C4D91D40(v285, v292, 44))
                    && *((_BYTE *)v295 + 8) == 15)
                  {
                    v297 = llvm::Value::stripPointerCasts(v294);
                    v298 = (uint64_t)v297;
                    v299 = *((unsigned __int8 *)v297 + 16);
                    if (v297 && v299 == 16)
                      goto LABEL_549;
                    if (v299 == 59 && *(_BYTE *)(*((_QWORD *)v297 + 8) + 8) == 13)
                    {
                      v301 = *((_QWORD *)v297 + 1);
                      if (v301)
                      {
                        v298 = 0;
                        do
                        {
                          v302 = *(_QWORD *)(v301 + 24);
                          if (v302 != v285)
                          {
                            v303 = *(unsigned __int8 *)(v302 + 16);
                            if (v302 && v303 == 77)
                            {
                              v304 = *(_QWORD *)(v302 + 8);
                              if (!v304 || *(_QWORD *)(v304 + 8) || *(_QWORD *)(v304 + 24) != v285)
                                goto LABEL_560;
                            }
                            else
                            {
                              if (!v302)
                                goto LABEL_560;
                              v305 = v303 == 61 && v298 == 0;
                              if (!v305 || (*(_WORD *)(v302 + 18) & 1) != 0)
                                goto LABEL_560;
                              v298 = *(_QWORD *)(v302 - 64);
                            }
                          }
                          v301 = *(_QWORD *)(v301 + 8);
                        }
                        while (v301);
                        if (v298 && *(unsigned __int8 *)(v298 + 16) <= 0x14u)
                        {
LABEL_549:
                          v306 = operator new(0x78uLL);
                          v307 = (llvm::UndefValue *)(v306 + 8);
                          v306[13] = v306[13] & 0x38000000 | 1;
                          *(_QWORD *)v306 = 0;
                          *((_QWORD *)v306 + 1) = 0;
                          *((_QWORD *)v306 + 2) = 0;
                          *((_QWORD *)v306 + 3) = v306 + 8;
                          v308 = *(llvm::PointerType **)v298;
                          v435 = "funcspec.arg";
                          LOWORD(v439) = 259;
                          llvm::GlobalVariable::GlobalVariable((uint64_t)(v306 + 8), (uint64_t)v360, v308, 1, 7, v298, (uint64_t)&v435, 0, 0, 0, 0);
                          if (v295 != *(llvm::Constant **)v298 && *(llvm::Constant **)v307 != v295)
                            v307 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v307, v295, 0);
                          v309 = v285 - 32 * (*(_DWORD *)(v285 + 20) & 0x7FFFFFF);
                          v310 = v309 + 32 * v293;
                          if (*(_QWORD *)v310)
                          {
                            **(_QWORD **)(v310 + 16) = *(_QWORD *)(v310 + 8);
                            v311 = *(_QWORD *)(v310 + 8);
                            if (v311)
                              *(_QWORD *)(v311 + 16) = *(_QWORD *)(v310 + 16);
                          }
                          *(_QWORD *)v310 = v307;
                          if (v307)
                          {
                            v314 = *((_QWORD *)v307 + 1);
                            v313 = (uint64_t *)((char *)v307 + 8);
                            v312 = v314;
                            v315 = v309 + 32 * v293;
                            *(_QWORD *)(v315 + 8) = v314;
                            if (v314)
                              *(_QWORD *)(v312 + 16) = v315 + 8;
                            *(_QWORD *)(v315 + 16) = v313;
                            *v313 = v310;
                          }
                          v290 = 1;
                        }
                      }
                    }
                  }
LABEL_560:
                  v287 += 32;
                }
                while (v287 != v289);
                if ((v290 & 1) != 0)
                {
                  v316 = v362;
                  llvm::SCCPInstVisitor::handleCallResult(v362, (llvm::CallBase *)v285, v296);
                  llvm::SCCPInstVisitor::handleCallArguments(v316, (llvm::CallBase *)v285);
                }
              }
            }
          }
          v283 = (llvm::Value *)((char *)v283 + 8);
        }
        while (v283 != v359);
      }
      LODWORD(v369) = 0;
      if (dword_1ED80B1C0 == v347)
      {
        LOBYTE(v63) = 1;
        v35 = v360 + 3;
        break;
      }
      ++v347;
      v78 = (uint64_t *)v371;
      v79 = (uint64_t *)((char *)v371 + 8 * v372);
      LOBYTE(v63) = 1;
      v35 = v360 + 3;
    }
    while ((_DWORD)v372);
  }
  for (jj = v360[4]; (uint64_t *)jj != v35; jj = *(_QWORD *)(jj + 8))
  {
    if (jj)
      v319 = jj - 56;
    else
      v319 = 0;
    sub_1C56DB494(v319);
  }
  v64 = v63 != 0;
  v28 = v381;
  if (v368 != v370)
    free(v368);
LABEL_580:
  if (v371 != v373)
    free(v371);
  if ((_DWORD)v398)
  {
    v320 = (uint64_t *)v397;
    v321 = 8 * v398;
    do
    {
      v322 = *v320++;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v322 + 40) + 40, (uint64_t ***)v322);
      v323 = *(_QWORD *)(v322 + 24);
      v324 = *(_QWORD **)(v322 + 32);
      *v324 = v323;
      *(_QWORD *)(v323 + 8) = v324;
      *(_QWORD *)(v322 + 24) = 0;
      *(_QWORD *)(v322 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v322);
      v321 -= 8;
    }
    while (v321);
  }
  LODWORD(v398) = 0;
  v325 = __b;
  v326 = v392;
  v327 = &v394;
  if (__b == v392)
    v327 = (uint64_t *)((char *)&v394 + 4);
  v328 = *(unsigned int *)v327;
  v329 = (llvm::Function **)__b;
  if ((_DWORD)v328)
  {
    v330 = 0;
    while (*(_QWORD *)((char *)__b + v330) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v330 += 8;
      if (8 * v328 == v330)
        goto LABEL_600;
    }
    v329 = (llvm::Function **)((char *)__b + v330);
  }
  v331 = (llvm::Function **)((char *)__b + 8 * v328);
  if (v329 != v331)
  {
    v332 = *v329;
LABEL_595:
    llvm::Function::eraseFromParent(v332);
    v333 = (unint64_t *)(v329 + 1);
    while (v333 != (unint64_t *)v331)
    {
      v334 = *v333++;
      v332 = (llvm::Function *)v334;
      if (v334 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v329 = (llvm::Function **)(v333 - 1);
        goto LABEL_595;
      }
    }
    v325 = __b;
    v326 = v392;
  }
LABEL_600:
  if (v325 == v326)
    goto LABEL_601;
  if (v394 < 0x21 || 4 * (HIDWORD(v394) - v395) >= v394)
  {
    memset(v325, 255, 8 * v394);
LABEL_601:
    v395 = 0;
    HIDWORD(v394) = 0;
    goto LABEL_602;
  }
  free(v325);
  v342 = 1 << (33 - __clz(HIDWORD(v394) - v395 - 1));
  v105 = (HIDWORD(v394) - v395) > 0x10;
  v395 = 0;
  if (v105)
    v343 = v342;
  else
    v343 = 32;
  v394 = v343;
  v344 = malloc_type_malloc(8 * v343, 0x4065EBACuLL);
  if (!v344)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  __b = v344;
  memset(v344, 255, 8 * v394);
LABEL_602:
  sub_1C6293C48(v400[0], v401);
  MEMORY[0x1CAA32FB4](v400[0], 8);
  if (v397 != v399)
    free(v397);
  if (__b != v392)
    free(__b);
  if (v388 != v387)
    free(v388);
  v335 = v385;
  if (v386 == v385)
  {
    v336 = 4;
  }
  else
  {
    if (!v386)
      goto LABEL_613;
    v336 = 5;
    v335 = v386;
  }
  (*(void (**)(void))(*v335 + 8 * v336))();
LABEL_613:
  v337 = v383;
  if (v384 == v383)
  {
    v338 = 4;
  }
  else
  {
    if (!v384)
      goto LABEL_618;
    v338 = 5;
    v337 = v384;
  }
  (*(void (**)(void))(*v337 + 8 * v338))();
LABEL_618:
  if (v382 == v381)
  {
    v339 = 4;
    goto LABEL_622;
  }
  if (v382)
  {
    v339 = 5;
    v28 = v382;
LABEL_622:
    (*(void (**)(_QWORD *))(*v28 + 8 * v339))(v28);
  }
  llvm::SCCPSolver::~SCCPSolver((llvm::SCCPSolver *)&v362);
  return v64;
}

void sub_1C56DB494(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = a1 + 72;
  for (i = *(_QWORD *)(a1 + 80); i != v1; i = *(_QWORD *)(i + 8))
  {
    v3 = i - 24;
    if (!i)
      v3 = 0;
    v4 = v3 + 40;
    v5 = *(_QWORD *)(v3 + 48);
    if (v5 != v4)
    {
      do
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v5)
          v7 = v5 - 24;
        else
          v7 = 0;
        if (*(_BYTE *)(v7 + 16) == 84)
        {
          v8 = *(_QWORD *)(v7 - 32);
          if (v8)
          {
            if (!*(_BYTE *)(v8 + 16)
              && *(_QWORD *)(v8 + 24) == *(_QWORD *)(v7 + 72)
              && (*(_BYTE *)(v8 + 33) & 0x20) != 0
              && *(_DWORD *)(*(_QWORD *)(v5 - 56) + 36) == 281)
            {
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, *(llvm::Value **)(v5 - 24 - 32 * (*(_DWORD *)(v5 - 4) & 0x7FFFFFF)), (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v7 + 40) + 40, (uint64_t ***)v7);
              v9 = *(_QWORD *)(v7 + 24);
              v10 = *(_QWORD **)(v7 + 32);
              *v10 = v9;
              *(_QWORD *)(v9 + 8) = v10;
              *(_QWORD *)(v7 + 24) = 0;
              *(_QWORD *)(v7 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v7);
            }
          }
        }
        v5 = v6;
      }
      while (v6 != v4);
    }
  }
}

uint64_t sub_1C56DB594(uint64_t **a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v12;
  llvm::Type *v13;
  uint64_t *v14;
  __int16 v15;
  __int16 *v16;
  int v17;
  llvm::ValueHandleBase *Constant;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  unsigned int v28;
  void *v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  llvm::Value *v33;
  uint64_t i;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int32x2_t *v46;
  size_t v47;
  int v48;
  const void *v49;
  void *v50;
  int v51;
  void *v52;
  uint64_t v53;
  void *__s2;
  uint64_t v55;
  _QWORD v56[7];

  v56[6] = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
  {
    v4 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    v5 = v4 > 0x15;
    v6 = (1 << v4) & 0x20AC7F;
    if (v5 || v6 == 0)
      return 0;
  }
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 >= 0x1C)
  {
    v9 = v8 - 33;
    v5 = v9 > 0x33;
    v10 = (1 << v9) & 0x8000000000041;
    if (!v5 && v10 != 0)
      return 0;
  }
  if (!*(_QWORD *)(a2 + 8))
    return 0;
  v12 = sub_1C5F7EFFC((uint64_t *)(**a1 + 136), a2);
  v14 = v12;
  v16 = (__int16 *)(v12 + 1);
  v15 = *((_WORD *)v12 + 4);
  v17 = v15;
  if ((v15 & 0xFE) != 0 && v15 != 2)
  {
    if ((v15 & 0xFE) == 4)
    {
      v20 = *((unsigned int *)v12 + 6);
      LODWORD(v55) = v20;
      if (v20 > 0x40)
      {
        v47 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
        v21 = (void *)operator new[]();
        memcpy(v21, (const void *)v14[2], v47);
      }
      else
      {
        v21 = (void *)v12[2];
      }
      __s2 = v21;
      llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
      v22 = v55;
      v23 = __s2;
      LODWORD(v55) = 0;
      v24 = *((unsigned int *)v14 + 10);
      if (v24 > 0x40)
      {
        v52 = __s2;
        v48 = memcmp((const void *)v14[4], __s2, ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8);
        v23 = v52;
        v25 = v48 == 0;
      }
      else
      {
        v25 = v14[4] == (_QWORD)__s2;
      }
      v26 = v25;
      if (v22 >= 0x41)
      {
        if (v23)
        {
          MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
          if (v55 >= 0x41)
          {
            if (__s2)
              MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          }
        }
      }
      if (v26)
      {
        v15 = *v16;
        v17 = *v16;
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  if (v17 == 2)
    goto LABEL_19;
  if ((v15 & 0xFE) != 4)
    goto LABEL_42;
  LODWORD(v55) = *((_DWORD *)v14 + 6);
  if (v55 > 0x40)
  {
    __s2 = (void *)operator new[]();
    memcpy(__s2, (const void *)v14[2], (((unint64_t)v55 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __s2 = (void *)v14[2];
  }
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v28 = v55;
  v29 = __s2;
  LODWORD(v55) = 0;
  v30 = *((unsigned int *)v14 + 10);
  if (v30 > 0x40)
  {
    v49 = (const void *)v14[4];
    v50 = __s2;
    v51 = memcmp(v49, __s2, ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8);
    v29 = v50;
    v31 = v51 == 0;
  }
  else
  {
    v31 = v14[4] == (_QWORD)__s2;
  }
  v32 = v31;
  if (v28 >= 0x41)
  {
    if (v29)
    {
      MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
      if (v55 >= 0x41)
      {
        if (__s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
  }
  if (v32)
LABEL_19:
    Constant = llvm::SCCPInstVisitor::getConstant(**a1, (uint64_t)v16);
  else
LABEL_42:
    Constant = llvm::UndefValue::get(*(llvm::UndefValue **)a2, v13);
  v33 = Constant;
  __s2 = v56;
  v55 = 0x600000000;
  for (i = *(_QWORD *)(a2 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v35 = *(_QWORD *)(i + 24);
    if (v35)
      v36 = *(unsigned __int8 *)(v35 + 16) >= 0x1Cu;
    else
      v36 = 0;
    if (v36)
    {
      v37 = **a1;
      v38 = sub_1C477672C(v37 + 40, *(_QWORD *)(v35 + 40));
      v39 = *(_QWORD *)(v37 + 48);
      v40 = v39 == *(_QWORD *)(v37 + 40) ? 60 : 56;
      if (v38 != (_QWORD *)(v39 + 8 * *(unsigned int *)(v37 + v40)))
      {
        v41 = v55;
        if (v55 >= (unint64_t)HIDWORD(v55))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s2, (uint64_t)v56, v55 + 1, 8);
          v41 = v55;
        }
        *((_QWORD *)__s2 + v41) = v35;
        LODWORD(v55) = v55 + 1;
      }
    }
  }
  llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, v33, (llvm::Value *)1);
  if ((_DWORD)v55)
  {
    v42 = (uint64_t *)__s2;
    v43 = 8 * v55;
    do
    {
      v44 = *v42++;
      sub_1C5F7D304(**a1, v44);
      v43 -= 8;
    }
    while (v43);
  }
  if (*(unsigned __int8 *)(a2 + 16) >= 0x1Cu
    && llvm::Instruction::isSafeToRemove((llvm::Instruction *)a2))
  {
    v45 = *((unsigned int *)a1 + 60);
    if (v45 >= *((_DWORD *)a1 + 61))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 29), (uint64_t)(a1 + 31), v45 + 1, 8);
      LODWORD(v45) = *((_DWORD *)a1 + 60);
    }
    a1[29][v45] = a2;
    ++*((_DWORD *)a1 + 60);
    v46 = (int32x2_t *)**a1;
    v53 = a2;
    sub_1C5F7EF30(v46 + 17, &v53);
  }
  if (__s2 != v56)
    free(__s2);
  return 1;
}

char **sub_1C56DBA68(char **a1)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  if (v3)
  {
    v4 = 168 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 160];
      if (&v2[v4 - 144] != v5)
        free(v5);
      v4 -= 168;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

_QWORD *sub_1C56DBADC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62937F4(a1, v4, v4 + (v3 << 6));
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = v10 << 6;
    do
    {
      *result = -4096;
      result += 8;
      v11 -= 64;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C56DBB94(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  char *i;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(char **)a1;
      v7 = *(_DWORD *)(a1 + 8);
      if (v7)
      {
        v8 = 168 * v7;
        do
        {
          v9 = *(char **)&v6[v8 - 160];
          if (&v6[v8 - 144] != v9)
            free(v9);
          v8 -= 168;
        }
        while (v8);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *a2;
      v10 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
LABEL_12:
      *v10 = 0;
      return a1;
    }
    v10 = a2 + 1;
    v12 = *((unsigned int *)a2 + 2);
    v13 = *(unsigned int *)(a1 + 8);
    if (v13 >= v12)
    {
      v17 = *(char **)a1;
      if ((_DWORD)v12)
      {
        v18 = v4 + 168 * v12;
        v19 = v4 + 8;
        do
        {
          *(_QWORD *)v17 = *(_QWORD *)(v19 - 8);
          sub_1C6180FA8((uint64_t)(v17 + 8), v19);
          v20 = *(_QWORD *)(v19 + 144);
          *((_DWORD *)v17 + 40) = *(_DWORD *)(v19 + 152);
          *((_QWORD *)v17 + 19) = v20;
          v17 += 168;
          v21 = v19 + 160;
          v19 += 168;
        }
        while (v21 != v18);
        v22 = v17;
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        v17 = *(char **)a1;
      }
      else
      {
        v22 = *(char **)a1;
      }
      for (i = &v17[168 * v13]; i != v22; i -= 168)
      {
        v40 = (char *)*((_QWORD *)i - 20);
        if (i - 144 != v40)
          free(v40);
      }
      *(_DWORD *)(a1 + 8) = v12;
      v41 = *((_DWORD *)a2 + 2);
      if (v41)
      {
        v42 = *a2;
        v43 = 168 * v41;
        do
        {
          v44 = *(void **)(v42 + v43 - 160);
          if ((void *)(v42 + v43 - 144) != v44)
            free(v44);
          v43 -= 168;
        }
        while (v43);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v12)
    {
      if ((_DWORD)v13)
      {
        v23 = v4 + 168 * v13;
        v24 = *(_QWORD *)a1 + 8;
        v25 = v4 + 8;
        do
        {
          *(_QWORD *)(v24 - 8) = *(_QWORD *)(v25 - 8);
          v26 = sub_1C6180FA8(v24, v25);
          v27 = *(_QWORD *)(v25 + 144);
          *(_DWORD *)(v26 + 152) = *(_DWORD *)(v25 + 152);
          *(_QWORD *)(v26 + 144) = v27;
          v24 = v26 + 168;
          v28 = v25 + 160;
          v25 += 168;
        }
        while (v28 != v23);
        goto LABEL_31;
      }
    }
    else
    {
      if ((_DWORD)v13)
      {
        v14 = *(char **)a1;
        v15 = 168 * v13;
        do
        {
          v16 = *(char **)&v14[v15 - 160];
          if (&v14[v15 - 144] != v16)
            free(v16);
          v15 -= 168;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C56DC0F8(a1, v12);
    }
    v13 = 0;
LABEL_31:
    v29 = *a2;
    v30 = *((unsigned int *)a2 + 2);
    if (v13 != v30)
    {
      v31 = v29 + 168 * v30;
      v32 = 168 * v13 + 8;
      v33 = (_QWORD *)(*(_QWORD *)a1 + v32);
      v34 = v29 + v32;
      do
      {
        v35 = v34 - 8;
        v36 = v33 + 2;
        *(v33 - 1) = *(_QWORD *)(v34 - 8);
        *v33 = v33 + 2;
        v33[1] = 0x800000000;
        if (*(_DWORD *)(v34 + 8))
          v33 = (_QWORD *)sub_1C6180FA8((uint64_t)v33, v34);
        *((_OWORD *)v36 + 8) = *(_OWORD *)(v34 + 144);
        v33 += 21;
        v34 += 168;
      }
      while (v35 + 168 != v31);
      v29 = *a2;
    }
    *(_DWORD *)(a1 + 8) = v12;
    if (*v10)
    {
      v37 = 168 * *v10;
      do
      {
        v38 = *(void **)(v29 + v37 - 160);
        if ((void *)(v29 + v37 - 144) != v38)
          free(v38);
        v37 -= 168;
      }
      while (v37);
    }
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_1C56DBE98(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v5 = *a1;
  v6 = *((_DWORD *)a1 + 2);
  v7 = *a1 + 168 * v6;
  if (v7 == a3)
  {
    v9 = a2;
  }
  else
  {
    v8 = a3 + 8;
    v9 = a2;
    do
    {
      *(_QWORD *)v9 = *(_QWORD *)(v8 - 8);
      sub_1C6180FA8(v9 + 8, v8);
      v10 = *(_QWORD *)(v8 + 144);
      *(_DWORD *)(v9 + 160) = *(_DWORD *)(v8 + 152);
      *(_QWORD *)(v9 + 152) = v10;
      v9 += 168;
      v11 = v8 + 160;
      v8 += 168;
    }
    while (v11 != v7);
    v5 = *a1;
    v6 = *((_DWORD *)a1 + 2);
  }
  v12 = v5 + 168 * v6;
  if (v12 != v9)
  {
    do
    {
      v13 = *(void **)(v12 - 160);
      if ((void *)(v12 - 144) != v13)
        free(v13);
      v12 -= 168;
    }
    while (v12 != v9);
    v5 = *a1;
  }
  *((_DWORD *)a1 + 2) = 1022611261 * ((unint64_t)(v9 - v5) >> 3);
  return a2;
}

uint64_t sub_1C56DBF80(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6293A80(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6293A80(a1, (uint64_t)v14, (uint64_t)v9);
}

void sub_1C56DC0F8(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  int v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;

  v16 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 168, &v16);
  v4 = v3;
  v5 = *(char **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    v7 = &v5[168 * v6];
    v8 = v3 + 8;
    v9 = (uint64_t)(v5 + 8);
    do
    {
      v10 = v9 - 8;
      v11 = v8 + 2;
      *(v8 - 1) = *(_QWORD *)(v9 - 8);
      *v8 = v8 + 2;
      v8[1] = 0x800000000;
      if (*(_DWORD *)(v9 + 8))
        v8 = (_QWORD *)sub_1C6180FA8((uint64_t)v8, v9);
      *((_OWORD *)v11 + 8) = *(_OWORD *)(v9 + 144);
      v8 += 21;
      v9 += 168;
    }
    while ((char *)(v10 + 168) != v7);
    v5 = *(char **)a1;
    v12 = *(_DWORD *)(a1 + 8);
    if (v12)
    {
      v13 = 168 * v12;
      do
      {
        v14 = *(char **)&v5[v13 - 160];
        if (&v5[v13 - 144] != v14)
          free(v14);
        v13 -= 168;
      }
      while (v13);
      v5 = *(char **)a1;
    }
  }
  v15 = v16;
  if (v5 != (char *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v15;
}

unint64_t sub_1C56DC20C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  int v6;
  unint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t result;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[5];

  v41[4] = *MEMORY[0x1E0C80C00];
  if (!a1 || *(unsigned __int8 *)(a1 + 16) <= 0x1Bu)
  {
    result = 0;
    LODWORD(v38) = 0;
    return result;
  }
  v6 = *(_DWORD *)(a1 + 20);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = *(uint64_t **)(a1 - 8);
    v7 = v6 & 0x7FFFFFF;
  }
  else
  {
    v7 = v6 & 0x7FFFFFF;
    v8 = (uint64_t *)(a1 - 32 * v7);
  }
  v39 = v41;
  v40 = 0x400000000;
  if (v7 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v7, 8);
    v9 = v40;
    v11 = v39;
    v10 = v40;
  }
  else
  {
    v9 = 0;
    if (!v7)
    {
      v15 = v41;
      goto LABEL_13;
    }
    v10 = 0;
    v11 = v41;
  }
  v12 = 32 * v7;
  v13 = &v11[v10];
  do
  {
    v14 = *v8;
    v8 += 4;
    *v13++ = v14;
    v12 -= 32;
  }
  while (v12);
  v15 = v39;
LABEL_13:
  LODWORD(v40) = v9 + v7;
  v17 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*a2 + 72))(*a2, a1, v15);
  v20 = v19;
  if (v39 != v41)
    free(v39);
  v37 = v17;
  v38 = v20;
  v21 = *(unsigned __int8 *)(a1 + 16) - 33;
  if (v21 > 0x37)
    goto LABEL_19;
  if (((1 << (*(_BYTE *)(a1 + 16) - 33)) & 0x8000000000041) != 0)
  {
    v35 = *(_QWORD *)(a1 + 64);
    if (!v35 || (*(_BYTE *)(v35 + 20) & 4) == 0 && (*(_BYTE *)(v35 + 17) & 0x10) == 0)
    {
      LODWORD(v39) = 7;
      if (sub_1C53E4BBC(a1, (__int32 *)&v39, 1uLL))
      {
        v36 = *(_QWORD *)(a1 - 32);
        if (!v36 || *(_BYTE *)(v36 + 16) || *(_QWORD *)(v36 + 24) != *(_QWORD *)(a1 + 72) || *(_DWORD *)(v36 + 36) != 7)
          goto LABEL_20;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 66) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44))
      {
        goto LABEL_20;
      }
    }
LABEL_19:
    if (*(unsigned __int8 *)(a1 + 16) - 66 > 0xC)
      goto LABEL_27;
    goto LABEL_20;
  }
  if (((1 << (*(_BYTE *)(a1 + 16) - 33)) & 0x808001C8000010) == 0
    && (v21 != 28 || (*(_WORD *)(a1 + 18) & 0x301) == 0))
  {
    goto LABEL_19;
  }
LABEL_20:
  for (i = *(_QWORD *)(a1 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v23 = sub_1C56DC20C(*(_QWORD *)(i + 24), a2, a3);
    if (v24 == 1)
      LODWORD(v38) = 1;
    if (__OFADD__(v17, v23))
      v17 = ((uint64_t)(v17 + v23) >> 63) ^ 0x8000000000000000;
    else
      v17 += v23;
    v37 = v17;
  }
LABEL_27:
  v25 = *((_DWORD *)a3 + 4);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 40);
    v27 = *a3;
    v28 = v25 - 1;
    v29 = ((v26 >> 4) ^ (v26 >> 9)) & (v25 - 1);
    v30 = *(_QWORD *)(*a3 + 16 * v29);
    if (v26 == v30)
    {
LABEL_32:
      v33 = *(_QWORD **)(v27 + 16 * v29 + 8);
      if (v33)
      {
        v34 = 0;
        do
        {
          v33 = (_QWORD *)*v33;
          ++v34;
        }
        while (v33);
        goto LABEL_37;
      }
    }
    else
    {
      v31 = 1;
      while (v30 != -4096)
      {
        v32 = v29 + v31++;
        v29 = v32 & v28;
        v30 = *(_QWORD *)(v27 + 16 * v29);
        if (v26 == v30)
          goto LABEL_32;
      }
    }
  }
  v34 = 0;
LABEL_37:
  LODWORD(v18) = dword_1ED80B400;
  v39 = (void *)(uint64_t)pow((double)v18, (double)v34);
  LODWORD(v40) = 0;
  sub_1C4848B64((uint64_t)&v37, (uint64_t)&v39);
  return v37;
}

void sub_1C56DC554(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  int v7;
  int v8;
  BOOL v9;
  _BOOL4 v10;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  void *v59[2];
  _BYTE v60[128];
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v7 = *(_DWORD *)(a1 + 160);
      v8 = *((_DWORD *)a2 - 2);
      v9 = v7 == v8;
      v10 = v7 < v8;
      if (v9)
        v10 = *(_QWORD *)(a1 + 152) < *(a2 - 2);
      if (v10)
        sub_1C56DC9C0((uint64_t *)a1, a2 - 21);
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((_QWORD *)a1 != a2)
      {
        v17 = (_QWORD *)(a1 + 168);
        if ((_QWORD *)(a1 + 168) != a2)
        {
          v18 = 0;
          v19 = (_QWORD *)a1;
          do
          {
            v20 = v17;
            v21 = *((_DWORD *)v19 + 40);
            v22 = *((_DWORD *)v19 + 82);
            v9 = v21 == v22;
            v23 = v21 < v22;
            if (v9)
              v23 = v19[19] < v19[40];
            if (v23)
            {
              v58 = *v20;
              v59[0] = v60;
              v59[1] = (void *)0x800000000;
              if (*((_DWORD *)v19 + 46))
                sub_1C6180FA8((uint64_t)v59, (uint64_t)(v19 + 22));
              v61 = *((_OWORD *)v19 + 20);
              v24 = v18;
              while (1)
              {
                v25 = a1 + v24;
                *(_QWORD *)(a1 + v24 + 168) = *(_QWORD *)(a1 + v24);
                v26 = a1 + v24 + 8;
                sub_1C6180FA8(a1 + v24 + 176, v26);
                *(_QWORD *)(v25 + 320) = *(_QWORD *)(v25 + 152);
                *(_DWORD *)(v25 + 328) = *(_DWORD *)(v25 + 160);
                if (!v24)
                  break;
                v27 = *(_DWORD *)(v25 - 8);
                v9 = v27 == DWORD2(v61);
                v28 = v27 < SDWORD2(v61);
                if (v9)
                  v28 = *(_QWORD *)(v25 - 16) < (uint64_t)v61;
                v24 -= 168;
                if (!v28)
                {
                  v29 = (_QWORD *)(a1 + v24 + 168);
                  goto LABEL_27;
                }
              }
              v29 = (_QWORD *)a1;
LABEL_27:
              *v29 = v58;
              sub_1C6180FA8(v26, (uint64_t)v59);
              *(_QWORD *)(v25 + 152) = v61;
              *(_DWORD *)(v25 + 160) = DWORD2(v61);
              if (v59[0] != v60)
                free(v59[0]);
            }
            v17 = v20 + 21;
            v18 += 168;
            v19 = v20;
          }
          while (v20 + 21 != a2);
        }
      }
    }
    else
    {
      v14 = a3 >> 1;
      v15 = (_QWORD *)(a1 + 168 * (a3 >> 1));
      v16 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C56DCAB8(a1, v15, v16, (uint64_t)a4);
        v30 = (uint64_t)&a4[21 * v14];
        sub_1C56DCAB8(a1 + 168 * (a3 >> 1), a2, a3 - (a3 >> 1), v30);
        v31 = &a4[21 * a3];
        v32 = a1 + 152;
        v33 = v30;
        v34 = a4;
        while ((uint64_t *)v33 != v31)
        {
          v35 = v33 + 152;
          v36 = v34 + 19;
          v37 = *((_DWORD *)v34 + 40);
          v38 = *(_DWORD *)(v33 + 160);
          v39 = v34[19] < *(_QWORD *)(v33 + 152);
          if (v37 != v38)
            v39 = v37 < v38;
          v40 = v32 - 144;
          if (v39)
          {
            v41 = v33 + 8;
            v42 = *(_QWORD *)v33;
            v33 += 168;
            *(_QWORD *)(v32 - 152) = v42;
            sub_1C6180FA8(v40, v41);
            v43 = *(_QWORD *)v35;
            v44 = *(_DWORD *)(v35 + 8);
          }
          else
          {
            v45 = (uint64_t)(v34 + 1);
            v46 = *v34;
            v34 += 21;
            *(_QWORD *)(v32 - 152) = v46;
            sub_1C6180FA8(v40, v45);
            v43 = *v36;
            v44 = *((_DWORD *)v36 + 2);
          }
          *(_DWORD *)(v32 + 8) = v44;
          *(_QWORD *)v32 = v43;
          v32 += 168;
          if (v34 == (uint64_t *)v30)
          {
            if ((uint64_t *)v33 != v31)
            {
              v47 = 0;
              do
              {
                v48 = v33 + v47;
                v49 = v32 + v47;
                *(_QWORD *)(v32 + v47 - 152) = *(_QWORD *)(v33 + v47);
                sub_1C6180FA8(v32 + v47 - 144, v33 + v47 + 8);
                v50 = *(_QWORD *)(v33 + v47 + 152);
                *(_DWORD *)(v49 + 8) = *(_DWORD *)(v33 + v47 + 160);
                *(_QWORD *)v49 = v50;
                v47 += 168;
              }
              while ((uint64_t *)(v48 + 168) != v31);
            }
            goto LABEL_44;
          }
        }
        if (v34 != (uint64_t *)v30)
        {
          v51 = 0;
          do
          {
            v52 = v32 + v51 * 8;
            v53 = &v34[v51];
            *(_QWORD *)(v32 + v51 * 8 - 152) = v34[v51];
            sub_1C6180FA8(v32 + v51 * 8 - 144, (uint64_t)&v34[v51 + 1]);
            v54 = v34[v51 + 19];
            *(_DWORD *)(v52 + 8) = v34[v51 + 20];
            *(_QWORD *)v52 = v54;
            v51 += 21;
          }
          while (v53 + 21 != (uint64_t *)v30);
        }
LABEL_44:
        if (a4)
        {
          v55 = a3;
          v56 = a4 + 3;
          do
          {
            v57 = (uint64_t *)*(v56 - 2);
            if (v56 != v57)
              free(v57);
            v56 += 21;
            --v55;
          }
          while (v55);
        }
      }
      else
      {
        sub_1C56DC554(a1, v15, v16, a4, a5);
        sub_1C56DC554(a1 + 168 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
        sub_1C56DCFB0((uint64_t *)a1, (uint64_t *)(a1 + 168 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5);
      }
    }
  }
}

void sub_1C56DC9C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9[2];
  _BYTE v10[128];
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  v5 = (uint64_t)(a2 + 1);
  v6 = (uint64_t)(a1 + 1);
  v9[0] = v10;
  v9[1] = (void *)0x800000000;
  if (*((_DWORD *)a1 + 4))
    sub_1C6180FA8((uint64_t)v9, v6);
  v11 = *(_OWORD *)(a1 + 19);
  sub_1C6180FA8(v6, v5);
  v7 = a2[19];
  *((_DWORD *)a1 + 40) = *((_DWORD *)a2 + 40);
  a1[19] = v7;
  sub_1C6180FA8(v5, (uint64_t)v9);
  v8 = v9[0];
  a2[19] = v11;
  *((_DWORD *)a2 + 40) = DWORD2(v11);
  if (v8 != v10)
    free(v8);
}

uint64_t sub_1C56DCAB8(uint64_t result, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _QWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  int v23;
  int v24;
  BOOL v25;
  _BOOL4 v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  _QWORD *v39;
  int v40;
  int v41;
  _BOOL4 v42;
  _OWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;

  if (a3)
  {
    v7 = (_QWORD *)result;
    if (a3 == 2)
    {
      v8 = (__int128 *)(a2 - 2);
      v9 = (__int128 *)(result + 152);
      v10 = *(_DWORD *)(result + 160);
      v11 = *((_DWORD *)a2 - 2);
      v12 = v10 < v11;
      if (v10 == v11)
        v12 = *(_QWORD *)(result + 152) < *(a2 - 2);
      v13 = a4 + 8;
      v14 = a4 + 24;
      if (v12)
      {
        *(_QWORD *)a4 = *(a2 - 21);
        *(_QWORD *)(a4 + 8) = v14;
        *(_QWORD *)(a4 + 16) = 0x800000000;
        if (*((_DWORD *)a2 - 38))
          sub_1C6180FA8(v13, (uint64_t)(a2 - 20));
        v15 = *v8;
        *(_QWORD *)(a4 + 176) = a4 + 192;
        result = a4 + 176;
        *(_OWORD *)(a4 + 152) = v15;
        *(_QWORD *)(a4 + 168) = *v7;
        *(_QWORD *)(a4 + 184) = 0x800000000;
        if (*((_DWORD *)v7 + 4))
          result = sub_1C6180FA8(result, (uint64_t)(v7 + 1));
        v16 = *v9;
      }
      else
      {
        *(_QWORD *)a4 = *v7;
        *(_QWORD *)(a4 + 8) = v14;
        *(_QWORD *)(a4 + 16) = 0x800000000;
        if (*((_DWORD *)v7 + 4))
          sub_1C6180FA8(v13, (uint64_t)(v7 + 1));
        v35 = *v9;
        *(_QWORD *)(a4 + 176) = a4 + 192;
        result = a4 + 176;
        *(_OWORD *)(a4 + 152) = v35;
        *(_QWORD *)(a4 + 168) = *(a2 - 21);
        *(_QWORD *)(a4 + 184) = 0x800000000;
        if (*((_DWORD *)a2 - 38))
          result = sub_1C6180FA8(result, (uint64_t)(a2 - 20));
        v16 = *v8;
      }
      *(_OWORD *)(a4 + 320) = v16;
    }
    else if (a3 == 1)
    {
      *(_QWORD *)a4 = *(_QWORD *)result;
      *(_QWORD *)(a4 + 8) = a4 + 24;
      result = a4 + 8;
      *(_QWORD *)(a4 + 16) = 0x800000000;
      if (*((_DWORD *)v7 + 4))
        result = sub_1C6180FA8(result, (uint64_t)(v7 + 1));
      *(_OWORD *)(a4 + 152) = *(_OWORD *)(v7 + 19);
    }
    else if ((uint64_t)a3 > 8)
    {
      v36 = 168 * (a3 >> 1);
      v37 = result + v36;
      sub_1C56DC554(result, result + v36, a3 >> 1, a4, a3 >> 1);
      result = sub_1C56DC554(&v7[(unint64_t)v36 / 8], a2, a3 - (a3 >> 1), a4 + v36, a3 - (a3 >> 1));
      v38 = (_OWORD *)(a4 + 152);
      v39 = &v7[(unint64_t)v36 / 8];
      while (v39 != a2)
      {
        v40 = *((_DWORD *)v7 + 40);
        v41 = *((_DWORD *)v39 + 40);
        v42 = v40 < v41;
        if (v40 == v41)
          v42 = v7[19] < v39[19];
        result = (uint64_t)(v38 - 9);
        v43 = v38 - 8;
        if (v42)
        {
          *((_QWORD *)v38 - 19) = *v39;
          *((_QWORD *)v38 - 18) = v43;
          *((_QWORD *)v38 - 17) = 0x800000000;
          if (*((_DWORD *)v39 + 4))
            result = sub_1C6180FA8(result, (uint64_t)(v39 + 1));
          *v38 = *(_OWORD *)(v39 + 19);
          v39 += 21;
        }
        else
        {
          *((_QWORD *)v38 - 19) = *v7;
          *((_QWORD *)v38 - 18) = v43;
          *((_QWORD *)v38 - 17) = 0x800000000;
          if (*((_DWORD *)v7 + 4))
            result = sub_1C6180FA8(result, (uint64_t)(v7 + 1));
          *v38 = *(_OWORD *)(v7 + 19);
          v7 += 21;
        }
        v38 = (_OWORD *)((char *)v38 + 168);
        if (v7 == (_QWORD *)v37)
        {
          if (v39 != a2)
          {
            v47 = 0;
            do
            {
              v48 = &v39[v47];
              v49 = v39[v47];
              *(_QWORD *)((char *)v38 + v47 * 8 - 144) = (char *)v38 + v47 * 8 - 128;
              result = (uint64_t)v38 + v47 * 8 - 144;
              *(_QWORD *)(result - 8) = v49;
              *(_QWORD *)(result + 8) = 0x800000000;
              if (LODWORD(v39[v47 + 2]))
                result = sub_1C6180FA8(result, (uint64_t)(v48 + 1));
              *(_OWORD *)((char *)v38 + v47 * 8) = *(_OWORD *)(v48 + 19);
              v47 += 21;
            }
            while (v48 + 21 != a2);
          }
          return result;
        }
      }
      if (v7 != (_QWORD *)v37)
      {
        v44 = 0;
        do
        {
          v45 = &v7[v44];
          v46 = v7[v44];
          *(_QWORD *)((char *)v38 + v44 * 8 - 144) = (char *)v38 + v44 * 8 - 128;
          result = (uint64_t)v38 + v44 * 8 - 144;
          *(_QWORD *)(result - 8) = v46;
          *(_QWORD *)(result + 8) = 0x800000000;
          if (LODWORD(v7[v44 + 2]))
            result = sub_1C6180FA8(result, (uint64_t)(v45 + 1));
          *(_OWORD *)((char *)v38 + v44 * 8) = *(_OWORD *)(v45 + 19);
          v44 += 21;
        }
        while (v45 + 21 != (_QWORD *)v37);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      *(_QWORD *)a4 = *(_QWORD *)result;
      *(_QWORD *)(a4 + 8) = a4 + 24;
      result = a4 + 8;
      *(_QWORD *)(a4 + 16) = 0x800000000;
      if (*((_DWORD *)v7 + 4))
        result = sub_1C6180FA8(result, (uint64_t)(v7 + 1));
      *(_OWORD *)(a4 + 152) = *(_OWORD *)(v7 + 19);
      v17 = v7 + 21;
      if (v7 + 21 != a2)
      {
        v18 = 0;
        v19 = (_OWORD *)a4;
        do
        {
          v20 = v17;
          v21 = (_OWORD *)((char *)v19 + 152);
          v22 = v7 + 40;
          v23 = *((_DWORD *)v19 + 40);
          v24 = *((_DWORD *)v7 + 82);
          v25 = v23 == v24;
          v26 = v23 < v24;
          if (v25)
            v26 = *((_QWORD *)v19 + 19) < v7[40];
          result = (uint64_t)(v19 + 11);
          v27 = v19 + 12;
          if (v26)
          {
            *((_QWORD *)v19 + 21) = *(_QWORD *)v19;
            *((_QWORD *)v19 + 22) = v27;
            *((_QWORD *)v19 + 23) = 0x800000000;
            if (*((_DWORD *)v19 + 4))
              sub_1C6180FA8(result, (uint64_t)v19 + 8);
            v19[20] = *v21;
            v28 = a4;
            if (v19 != (_OWORD *)a4)
            {
              v29 = v18;
              while (1)
              {
                v28 = a4 + v29;
                v30 = *(_DWORD *)(a4 + v29 - 8);
                v31 = *((_DWORD *)v7 + 82);
                v32 = *(_QWORD *)(a4 + v29 - 16) < v7[40];
                v25 = v30 == v31;
                v33 = v30 < v31;
                if (!v25)
                  v32 = v33;
                if (!v32)
                  break;
                *(_QWORD *)v28 = *(_QWORD *)(v28 - 168);
                sub_1C6180FA8(v28 + 8, v28 - 160);
                *(_QWORD *)(v28 + 152) = *(_QWORD *)(a4 + v29 - 16);
                *(_DWORD *)(v28 + 160) = *(_DWORD *)(a4 + v29 - 8);
                v29 -= 168;
                if (!v29)
                {
                  v28 = a4;
                  break;
                }
              }
            }
            *(_QWORD *)v28 = *v20;
            result = sub_1C6180FA8(v28 + 8, (uint64_t)(v7 + 22));
            v34 = *v22;
            *(_DWORD *)(v28 + 160) = *((_DWORD *)v7 + 82);
            *(_QWORD *)(v28 + 152) = v34;
          }
          else
          {
            *((_QWORD *)v19 + 21) = *v20;
            *((_QWORD *)v19 + 22) = v27;
            *((_QWORD *)v19 + 23) = 0x800000000;
            if (*((_DWORD *)v7 + 46))
              result = sub_1C6180FA8(result, (uint64_t)(v7 + 22));
            v19[20] = *(_OWORD *)v22;
          }
          v19 = v21 + 1;
          v17 = v20 + 21;
          v18 += 168;
          v7 = v20;
        }
        while (v20 + 21 != a2);
      }
    }
  }
  return result;
}

void sub_1C56DCFB0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  _BOOL4 v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  int v40;
  _BOOL4 v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *i;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  int v66;
  int v67;
  _BOOL4 v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  int v79;
  int v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;

  if (a5)
  {
    v7 = a5;
    v103 = a6;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return;
      v11 = 0;
      v12 = *((_DWORD *)a2 + 40);
      v13 = -a4;
      while (1)
      {
        v14 = &a1[v11];
        v15 = a1[v11 + 20];
        v16 = v15 == v12;
        v17 = v15 < v12;
        if (v16)
          v17 = a1[v11 + 19] < a2[19];
        if (v17)
          break;
        v11 += 21;
        if (__CFADD__(v13++, 1))
          return;
      }
      v19 = -v13;
      if (-v13 >= v7)
      {
        if (v13 == -1)
        {
          sub_1C56DC9C0(&a1[v11], a2);
          return;
        }
        if (v13 > 0)
          v19 = 1 - v13;
        v33 = v19 >> 1;
        if (a3 == a2)
        {
          v32 = a2;
        }
        else
        {
          v34 = 0xCF3CF3CF3CF3CF3DLL * (a3 - a2);
          v35 = &a1[21 * v33 + v11];
          v36 = *((_DWORD *)v35 + 40);
          v37 = v35[19];
          v32 = a2;
          do
          {
            v38 = v34 >> 1;
            v39 = &v32[21 * (v34 >> 1)];
            v40 = *((_DWORD *)v39 + 40);
            v16 = v36 == v40;
            v41 = v36 < v40;
            if (v16)
              v41 = v37 < v39[19];
            v42 = v39 + 21;
            v34 += ~(v34 >> 1);
            if (v41)
              v32 = v42;
            else
              v34 = v38;
          }
          while (v34);
        }
        v22 = &a1[21 * v33 + v11];
        v21 = 0xCF3CF3CF3CF3CF3DLL * (v32 - a2);
      }
      else
      {
        if (v7 >= 0)
          v20 = v7;
        else
          v20 = v7 + 1;
        v21 = v20 >> 1;
        v22 = a2;
        if (v14 != a2)
        {
          v23 = 0xCF3CF3CF3CF3CF3DLL * (((char *)a2 - (char *)a1 - v11 * 8) >> 3);
          v24 = &a2[21 * v21];
          v25 = *((_DWORD *)v24 + 40);
          v26 = v24[19];
          v22 = &a1[v11];
          do
          {
            v27 = v23 >> 1;
            v28 = &v22[21 * (v23 >> 1)];
            v29 = *((_DWORD *)v28 + 40);
            v16 = v29 == v25;
            v30 = v29 < v25;
            if (v16)
              v30 = v28[19] < v26;
            v31 = v28 + 21;
            v23 += ~(v23 >> 1);
            if (v30)
              v23 = v27;
            else
              v22 = v31;
          }
          while (v23);
        }
        v32 = &a2[21 * v21];
        v33 = 0xCF3CF3CF3CF3CF3DLL * (((char *)v22 - (char *)a1 - v11 * 8) >> 3);
      }
      v43 = v32;
      if (v22 != a2)
      {
        v43 = v22;
        if (a2 != v32)
        {
          v99 = v21;
          v100 = v33;
          v101 = a7;
          v102 = a3;
          sub_1C56DC9C0(v22, a2);
          v43 = v22 + 21;
          for (i = a2 + 21; i != v32; i += 21)
          {
            if (v43 == a2)
              a2 = i;
            sub_1C56DC9C0(v43, i);
            v43 += 21;
          }
          if (v43 == a2)
          {
            v43 = a2;
          }
          else
          {
            v45 = v43;
            v46 = a2;
            do
            {
              while (1)
              {
                sub_1C56DC9C0(v45, a2);
                v45 += 21;
                a2 += 21;
                if (a2 == v32)
                  break;
                if (v45 == v46)
                  v46 = a2;
              }
              a2 = v46;
            }
            while (v45 != v46);
          }
          a3 = v102;
          a6 = v103;
          v33 = v100;
          a7 = v101;
          v21 = v99;
        }
      }
      a4 = -v33 - v13;
      v47 = v7 - v21;
      if (v33 + v21 >= v7 - (v33 + v21) - v13)
      {
        v50 = v33;
        v51 = -v33 - v13;
        v52 = v21;
        v49 = a7;
        sub_1C56DCFB0(v43, v32, a3, v51, v47, a6);
        v32 = v22;
        v47 = v52;
        a4 = v50;
        a3 = v43;
      }
      else
      {
        v48 = a3;
        v49 = a7;
        sub_1C56DCFB0(v14, v22, v43, v33, v21, a6);
        a3 = v48;
        v14 = v43;
      }
      a2 = v32;
      v7 = v47;
      a1 = v14;
      a6 = v103;
      a7 = v49;
      if (!v47)
        return;
    }
    if (a4 <= v7)
    {
      if (a1 == a2)
        return;
      v59 = 0;
      v54 = 0;
      do
      {
        v60 = &a6[v59];
        v61 = &a1[v59];
        *v60 = a1[v59];
        a6[v59 + 1] = (uint64_t)&a6[v59 + 3];
        v60[2] = 0x800000000;
        if (LODWORD(a1[v59 + 2]))
        {
          v62 = a3;
          sub_1C6180FA8((uint64_t)&a6[v59 + 1], (uint64_t)(v61 + 1));
          a3 = v62;
          a6 = v103;
        }
        *(_OWORD *)(v60 + 19) = *(_OWORD *)(v61 + 19);
        ++v54;
        v59 += 21;
      }
      while (v61 + 21 != a2);
      if (v59 * 8)
      {
        v73 = &a6[v59];
        v74 = (uint64_t)&a6[v59 - 21];
        v75 = a6;
        while (a2 != a3)
        {
          v76 = a3;
          v77 = a2 + 19;
          v78 = v75 + 19;
          v79 = *((_DWORD *)v75 + 40);
          v80 = *((_DWORD *)a2 + 40);
          v81 = v75[19] < a2[19];
          if (v79 != v80)
            v81 = v79 < v80;
          v82 = (uint64_t)(a1 + 1);
          if (v81)
          {
            v83 = (uint64_t)(a2 + 1);
            v84 = *a2;
            a2 += 21;
            *a1 = v84;
            sub_1C6180FA8(v82, v83);
            v85 = *v77;
            v86 = *((_DWORD *)v77 + 2);
          }
          else
          {
            v87 = (uint64_t)(v75 + 1);
            v88 = *v75;
            v75 += 21;
            *a1 = v88;
            sub_1C6180FA8(v82, v87);
            v85 = *v78;
            v86 = *((_DWORD *)v78 + 2);
          }
          *((_DWORD *)a1 + 40) = v86;
          a1[19] = v85;
          a1 += 21;
          a6 = v103;
          a3 = v76;
          if (v73 == v75)
            goto LABEL_104;
        }
        if (v73 != v75)
        {
          v93 = 0;
          do
          {
            v94 = &a1[v93];
            v95 = &v75[v93];
            a1[v93] = v75[v93];
            sub_1C6180FA8((uint64_t)&a1[v93 + 1], (uint64_t)&v75[v93 + 1]);
            v96 = v75[v93 + 19];
            *((_DWORD *)v94 + 40) = v75[v93 + 20];
            v94[19] = v96;
            v93 += 21;
          }
          while ((uint64_t *)v74 != v95);
          a6 = v103;
        }
      }
    }
    else
    {
      if (a2 == a3)
        return;
      v53 = 0;
      v54 = 0;
      do
      {
        v55 = &a6[v53];
        v56 = &a2[v53];
        *v55 = a2[v53];
        v57 = (uint64_t)&a6[v53 + 3];
        v55[2] = 0x800000000;
        v55[1] = v57;
        if (LODWORD(a2[v53 + 2]))
        {
          v58 = a3;
          sub_1C6180FA8((uint64_t)&a6[v53 + 1], (uint64_t)(v56 + 1));
          a3 = v58;
          a6 = v103;
        }
        *(_OWORD *)(v57 + 128) = *(_OWORD *)(v56 + 19);
        ++v54;
        v53 += 21;
      }
      while (v56 + 21 != a3);
      if (v53 * 8)
      {
        v63 = &a6[v53];
        while (a2 != a1)
        {
          v64 = v63 - 2;
          v65 = a2 - 2;
          v66 = *((_DWORD *)a2 - 2);
          v67 = *((_DWORD *)v63 - 2);
          v68 = *(a2 - 2) < *(v63 - 2);
          if (v66 != v67)
            v68 = v66 < v67;
          if (v68)
          {
            v69 = a2;
            a2 -= 21;
          }
          else
          {
            v69 = v63;
            v63 -= 21;
            v65 = v64;
          }
          v70 = a3 - 21;
          v71 = a3 - 2;
          *(a3 - 21) = *(v69 - 21);
          sub_1C6180FA8((uint64_t)(a3 - 20), (uint64_t)(v69 - 20));
          v72 = *v65;
          *((_DWORD *)v71 + 2) = *((_DWORD *)v65 + 2);
          *v71 = v72;
          a3 = v70;
          a6 = v103;
          if (v63 == v103)
            goto LABEL_104;
        }
        if (v63 != a6)
        {
          v89 = 0;
          do
          {
            v90 = &a3[v89];
            a3[v89 - 21] = v63[v89 - 21];
            v91 = a3;
            sub_1C6180FA8((uint64_t)&a3[v89 - 20], (uint64_t)&v63[v89 - 20]);
            a3 = v91;
            a6 = v103;
            v92 = v63[v89 - 2];
            *((_DWORD *)v90 - 2) = v63[v89 - 1];
            *(v90 - 2) = v92;
            v89 -= 21;
          }
          while (&v63[v89] != v103);
        }
      }
    }
LABEL_104:
    if (a6 && v54)
    {
      v97 = a6 + 3;
      do
      {
        v98 = (_QWORD *)*(v97 - 2);
        if (v97 != v98)
          free(v98);
        v97 += 21;
        --v54;
      }
      while (v54);
    }
  }
}

__n128 sub_1C56DD638(char **a1, _WORD *a2, __n128 *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80B500, "function-specialization-for-literal-constant", 0x2CuLL);
  v6 = *a1;
  byte_1ED80B580 = **a1;
  byte_1ED80B591 = 1;
  byte_1ED80B590 = *v6;
  word_1ED80B50A = (32 * (*a2 & 3)) | word_1ED80B50A & 0xFF9F;
  result = *a3;
  xmmword_1ED80B520 = (__int128)*a3;
  return result;
}

uint64_t sub_1C56DD6BC()
{
  int v1;
  __n128 v2;
  int v3;
  int *v4;

  LOBYTE(v1) = 0;
  v4 = &v1;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Force function specialization for every call site with a constant argument";
  v2.n128_u64[1] = 74;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80B080, "force-function-specialization", (_BYTE **)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80B080, &dword_1C475E000);
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"The maximum number of iterations function specialization is run";
  v2.n128_u64[1] = 63;
  v1 = 1;
  v4 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED80B140, "func-specialization-max-iters", &v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED80B140, &dword_1C475E000);
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"The maximum number of clones allowed for a single function specialization";
  v2.n128_u64[1] = 73;
  v1 = 3;
  v4 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED80B200, "func-specialization-max-clones", &v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED80B200, &dword_1C475E000);
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Don't specialize functions that have less than this theshold number of instructions";
  v2.n128_u64[1] = 83;
  v1 = 100;
  v4 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED80B2C0, "func-specialization-size-threshold", &v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED80B2C0, &dword_1C475E000);
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Average loop iteration count cost";
  v2.n128_u64[1] = 33;
  v1 = 10;
  v4 = &v1;
  sub_1C6147F28((uint64_t)&algn_1ED80B344[60], "func-specialization-avg-iters-cost", &v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &algn_1ED80B344[60], &dword_1C475E000);
  LOBYTE(v1) = 0;
  v4 = &v1;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Enable function specialization on the address of global values";
  v2.n128_u64[1] = 62;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80B440, "func-specialization-on-address", (_BYTE **)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80B440, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v4 = &v1;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Enable specialization of functions that take a literal constant as an argument.";
  v2.n128_u64[1] = 79;
  sub_1C6293C94((char **)&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED80B500, &dword_1C475E000);
}

void llvm::initializeGlobalDCELegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E88);
  if (v2 != -1)
  {
    v5[0] = sub_1C56DD988;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E88, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56DD988(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Dead Global Elimination";
  *(_QWORD *)(v2 + 8) = 23;
  *(_QWORD *)(v2 + 16) = "globaldce";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32C0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56E0564;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C56DDA18(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32C0;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817A160;
  *(_QWORD *)(a1 + 32) = a1 + 64;
  *(_QWORD *)(a1 + 40) = a1 + 64;
  *(_QWORD *)(a1 + 48) = 32;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_DWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831E88);
  if (v3 != -1)
  {
    v7[0] = sub_1C56DD988;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831E88, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::GlobalDCEPass::ComputeDependencies(uint64_t a1, unint64_t a2, llvm::SmallPtrSetImplBase *a3)
{
  unint64_t v3;
  unint64_t v5;
  unsigned int v7;
  llvm::SmallPtrSetImplBase *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *k;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void **v28;
  _QWORD *v29;
  unint64_t v30;
  float v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  int8x8_t prime;
  void *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t i;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *j;
  _QWORD *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;

  v5 = a2;
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v7 >= 0x1C)
  {
    a2 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
    v8 = a3;
LABEL_7:
    sub_1C4774094(v8, a2);
    return;
  }
  if (a2 && v7 <= 3)
  {
    v8 = a3;
    goto LABEL_7;
  }
  if (!a2 || v7 > 0x14)
    return;
  v9 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v10 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v9 >> 47) ^ v9);
  v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  v12 = *(_QWORD *)(a1 + 320);
  if (!v12)
  {
LABEL_57:
    v29 = operator new(0x78uLL);
    *v29 = 0;
    v29[1] = v11;
    v29[2] = v5;
    v29[3] = v29 + 7;
    v29[4] = v29 + 7;
    v29[5] = 8;
    *((_DWORD *)v29 + 12) = 0;
    v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 336) + 1);
    v32 = *(float *)(a1 + 344);
    if (v12 && (float)(v32 * (float)v12) >= v31)
    {
LABEL_103:
      v49 = *(_QWORD *)(a1 + 312);
      v50 = *(_QWORD **)(v49 + 8 * v3);
      if (v50)
      {
        *v29 = *v50;
      }
      else
      {
        *v29 = *(_QWORD *)(a1 + 328);
        *(_QWORD *)(a1 + 328) = v29;
        *(_QWORD *)(v49 + 8 * v3) = a1 + 328;
        if (!*v29)
          goto LABEL_112;
        v51 = *(_QWORD *)(*v29 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v51 >= v12)
            v51 %= v12;
        }
        else
        {
          v51 &= v12 - 1;
        }
        v50 = (_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v51);
      }
      *v50 = v29;
LABEL_112:
      ++*(_QWORD *)(a1 + 336);
LABEL_113:
      for (i = *(_QWORD *)(v5 + 8); i; i = *(_QWORD *)(i + 8))
        llvm::GlobalDCEPass::ComputeDependencies(a1, *(_QWORD *)(i + 24), v29 + 3);
      v53 = v29[4];
      v54 = 40;
      if (v53 == v29[3])
        v54 = 44;
      v55 = *(unsigned int *)((char *)v29 + v54);
      if ((_DWORD)v55)
      {
        v56 = 8 * v55;
        for (j = (uint64_t *)v29[4]; (unint64_t)*j >= 0xFFFFFFFFFFFFFFFELL; ++j)
        {
          v56 -= 8;
          if (!v56)
            return;
        }
      }
      else
      {
        j = (uint64_t *)v29[4];
      }
      v58 = (_QWORD *)(v53 + 8 * v55);
      if (j != v58)
      {
        v59 = *j;
LABEL_125:
        sub_1C4774094(a3, v59);
        v60 = (unint64_t *)(j + 1);
        while (v60 != v58)
        {
          v61 = *v60++;
          v59 = v61;
          if (v61 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            j = (uint64_t *)(v60 - 1);
            goto LABEL_125;
          }
        }
      }
      return;
    }
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v31 / v32);
    if (v34 <= v35)
      prime = (int8x8_t)v35;
    else
      prime = (int8x8_t)v34;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v12 = *(_QWORD *)(a1 + 320);
    }
    if (*(_QWORD *)&prime > v12)
      goto LABEL_69;
    if (*(_QWORD *)&prime < v12)
    {
      v43 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 336) / *(float *)(a1 + 344));
      if (v12 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (*(_QWORD *)&prime <= v43)
        prime = (int8x8_t)v43;
      if (*(_QWORD *)&prime >= v12)
      {
        v12 = *(_QWORD *)(a1 + 320);
      }
      else
      {
        if (prime)
        {
LABEL_69:
          if (*(_QWORD *)&prime >> 61)
            sub_1C4764EE4();
          v37 = operator new(8 * *(_QWORD *)&prime);
          v38 = *(void **)(a1 + 312);
          *(_QWORD *)(a1 + 312) = v37;
          if (v38)
            operator delete(v38);
          v39 = 0;
          *(int8x8_t *)(a1 + 320) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v39++) = 0;
          while (*(_QWORD *)&prime != v39);
          v40 = *(_QWORD **)(a1 + 328);
          if (v40)
          {
            v41 = v40[1];
            v42 = (uint8x8_t)vcnt_s8(prime);
            v42.i16[0] = vaddlv_u8(v42);
            if (v42.u32[0] > 1uLL)
            {
              if (v41 >= *(_QWORD *)&prime)
                v41 %= *(_QWORD *)&prime;
            }
            else
            {
              v41 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v41) = a1 + 328;
            v46 = (_QWORD *)*v40;
            if (*v40)
            {
              do
              {
                v47 = v46[1];
                if (v42.u32[0] > 1uLL)
                {
                  if (v47 >= *(_QWORD *)&prime)
                    v47 %= *(_QWORD *)&prime;
                }
                else
                {
                  v47 &= *(_QWORD *)&prime - 1;
                }
                if (v47 != v41)
                {
                  v48 = *(_QWORD *)(a1 + 312);
                  if (!*(_QWORD *)(v48 + 8 * v47))
                  {
                    *(_QWORD *)(v48 + 8 * v47) = v40;
                    goto LABEL_94;
                  }
                  *v40 = *v46;
                  *v46 = **(_QWORD **)(*(_QWORD *)(a1 + 312) + 8 * v47);
                  **(_QWORD **)(*(_QWORD *)(a1 + 312) + 8 * v47) = v46;
                  v46 = v40;
                }
                v47 = v41;
LABEL_94:
                v40 = v46;
                v46 = (_QWORD *)*v46;
                v41 = v47;
              }
              while (v46);
            }
          }
          v12 = (unint64_t)prime;
          goto LABEL_98;
        }
        v62 = *(void **)(a1 + 312);
        *(_QWORD *)(a1 + 312) = 0;
        if (v62)
          operator delete(v62);
        v12 = 0;
        *(_QWORD *)(a1 + 320) = 0;
      }
    }
LABEL_98:
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v3 = v11 % v12;
      else
        v3 = v11;
    }
    else
    {
      v3 = (v12 - 1) & v11;
    }
    goto LABEL_103;
  }
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] <= 1uLL)
  {
    v14 = (v12 - 1) & v11;
  }
  else
  {
    v14 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
    if (v11 >= v12)
      v14 = v11 % v12;
  }
  v15 = *(_QWORD *)(a1 + 312);
  v16 = *(_QWORD **)(v15 + 8 * v14);
  if (!v16 || (v17 = (_QWORD *)*v16) == 0)
  {
LABEL_40:
    if (v13.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
      if (v11 >= v12)
        v3 = v11 % v12;
    }
    else
    {
      v3 = (v12 - 1) & v11;
    }
    v28 = *(void ***)(v15 + 8 * v3);
    if (v28)
    {
      v29 = *v28;
      if (*v28)
      {
        while (1)
        {
          v30 = v29[1];
          if (v30 == v11)
          {
            if (v29[2] == a2)
              goto LABEL_113;
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v30 >= v12)
                v30 %= v12;
            }
            else
            {
              v30 &= v12 - 1;
            }
            if (v30 != v3)
              goto LABEL_57;
          }
          v29 = (_QWORD *)*v29;
          if (!v29)
            goto LABEL_57;
        }
      }
    }
    goto LABEL_57;
  }
  while (1)
  {
    v18 = v17[1];
    if (v18 == v11)
      break;
    if (v13.u32[0] <= 1uLL)
    {
      v18 &= v12 - 1;
    }
    else if (v18 >= v12)
    {
      v18 %= v12;
    }
    if (v18 != v14)
      goto LABEL_40;
LABEL_23:
    v17 = (_QWORD *)*v17;
    if (!v17)
      goto LABEL_40;
  }
  if (v17[2] != a2)
    goto LABEL_23;
  v19 = v17[4];
  v20 = 40;
  if (v19 == v17[3])
    v20 = 44;
  v21 = *(unsigned int *)((char *)v17 + v20);
  if ((_DWORD)v21)
  {
    v22 = 8 * v21;
    for (k = (uint64_t *)v17[4]; (unint64_t)*k >= 0xFFFFFFFFFFFFFFFELL; ++k)
    {
      v22 -= 8;
      if (!v22)
        return;
    }
  }
  else
  {
    k = (uint64_t *)v17[4];
  }
  v24 = (_QWORD *)(v19 + 8 * v21);
  if (k != v24)
  {
    v25 = *k;
LABEL_36:
    sub_1C4774094(a3, v25);
    v26 = (unint64_t *)(k + 1);
    while (v26 != v24)
    {
      v27 = *v26++;
      v25 = v27;
      if (v27 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        k = (uint64_t *)(v26 - 1);
        goto LABEL_36;
      }
    }
  }
}

void llvm::GlobalDCEPass::UpdateGVDependencies(llvm::GlobalDCEPass *this, llvm::GlobalValue *a2)
{
  uint64_t i;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  _BYTE v37[64];

  v33 = (uint64_t *)v37;
  v34 = (uint64_t *)v37;
  v35 = 8;
  v36 = 0;
  for (i = *((_QWORD *)a2 + 1); i; i = *(_QWORD *)(i + 8))
    llvm::GlobalDCEPass::ComputeDependencies((uint64_t)this, *(_QWORD *)(i + 24), (llvm::SmallPtrSetImplBase *)&v33);
  v5 = sub_1C477672C((uint64_t)&v33, (uint64_t)a2);
  v7 = v33;
  v6 = v34;
  v9 = v35;
  v8 = HIDWORD(v35);
  if (v34 == v33)
    v10 = HIDWORD(v35);
  else
    v10 = v35;
  if (v5 != &v34[v10])
  {
    *v5 = -2;
    v8 = HIDWORD(v35);
    ++v36;
    v7 = v33;
    v6 = v34;
    v9 = v35;
  }
  if (v6 == v7)
    v11 = v8;
  else
    v11 = v9;
  v12 = v6;
  if ((_DWORD)v11)
  {
    v13 = 0;
    while ((unint64_t)v6[v13] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v11 == ++v13)
        goto LABEL_35;
    }
    v12 = &v6[v13];
  }
  v14 = &v6[v11];
  if (v12 != v14)
  {
LABEL_18:
    v32 = 0;
    v15 = *v12;
    v32 = *v12;
    v16 = *((_DWORD *)this + 108);
    if (v16)
    {
      v30 = v14;
      v31 = v12;
      v20 = *((_QWORD *)this + 52);
      v21 = v16 - 1;
      v22 = ((v15 >> 4) ^ (v15 >> 9)) & v21;
      v23 = *(_QWORD *)(v20 + 104 * v22);
      if (v23 == v15)
      {
LABEL_25:
        v24 = sub_1C62944C0((uint64_t)this + 416, &v32);
        v25 = sub_1C477672C((uint64_t)(v24 + 1), (uint64_t)a2);
        v26 = v24[2];
        if (v26 == v24[1])
          v27 = (unsigned int *)v24 + 7;
        else
          v27 = (unsigned int *)(v24 + 3);
        v14 = v30;
        v12 = v31;
        if (v25 != (_QWORD *)(v26 + 8 * *v27))
        {
LABEL_20:
          v18 = (unint64_t *)(v12 + 1);
          while (v18 != (unint64_t *)v14)
          {
            v19 = *v18++;
            if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v12 = (uint64_t *)(v18 - 1);
              goto LABEL_18;
            }
          }
          v7 = v33;
          v6 = v34;
          goto LABEL_35;
        }
      }
      else
      {
        v28 = 1;
        while (1)
        {
          v14 = v30;
          v12 = v31;
          if (v23 == -4096)
            break;
          v29 = v22 + v28++;
          v22 = v29 & v21;
          v23 = *(_QWORD *)(v20 + 104 * v22);
          if (v23 == v15)
            goto LABEL_25;
        }
      }
    }
    v17 = sub_1C56E0DB4((uint64_t)this + 288, &v32);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(v17 + 1), (uint64_t)a2);
    goto LABEL_20;
  }
LABEL_35:
  if (v6 != v7)
    free(v6);
}

_QWORD *llvm::GlobalDCEPass::MarkLive(llvm::SmallPtrSetImplBase *a1, uint64_t a2, uint64_t a3)
{
  llvm::GlobalAlias *v4;
  _QWORD *result;
  char v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = (llvm::GlobalAlias *)a2;
  result = sub_1C4774094(a1, a2);
  if (v7)
  {
    if (a3)
    {
      v8 = *(unsigned int *)(a3 + 8);
      if (v8 >= *(_DWORD *)(a3 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v8 + 1, 8);
        LODWORD(v8) = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    v9 = *((unsigned __int8 *)v4 + 16);
    if (v9 != 2)
    {
      if (v9 != 1
        || (result = (_QWORD *)llvm::GlobalAlias::getAliaseeObject(v4), (v4 = (llvm::GlobalAlias *)result) != 0))
      {
        v12 = *((_QWORD *)v4 + 6);
        if (v12)
        {
          result = sub_1C629475C((_QWORD *)a1 + 44, &v12);
          if (result)
          {
            v10 = result;
            v11 = result;
            do
              v11 = (_QWORD *)*v11;
            while (v11 && v11[2] == v12);
            if (v11 != result)
            {
              do
              {
                result = (_QWORD *)llvm::GlobalDCEPass::MarkLive(a1, v10[3], a3);
                v10 = (_QWORD *)*v10;
              }
              while (v10 != v11);
            }
          }
        }
      }
    }
  }
  return result;
}

void llvm::GlobalDCEPass::PropagateLivenessInGlobalValues(llvm::GlobalDCEPass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[9];

  v35[8] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  v3 = 16;
  if (v2 == *(_QWORD *)this)
    v3 = 20;
  v4 = *(unsigned int *)((char *)this + v3);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = (unint64_t *)*((_QWORD *)this + 1);
    while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v7 = 0;
        v8 = 0;
        v33 = v35;
        HIDWORD(v34) = 8;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (unint64_t *)*((_QWORD *)this + 1);
  }
  v21 = (unint64_t *)(v2 + 8 * v4);
  v33 = v35;
  v34 = 0x800000000;
  if (v6 == v21)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v22 = 0;
    v23 = v6;
LABEL_31:
    v8 = v22 + 1;
    v24 = v23 + 1;
    while (v24 != v21)
    {
      v25 = *v24++;
      if (v25 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v23 = v24 - 1;
        ++v22;
        goto LABEL_31;
      }
    }
    if (v22 >= 8)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v22 + 1, 8);
      v7 = v34;
      v27 = v33;
      v26 = v34;
    }
    else
    {
      v7 = 0;
      v26 = 0;
      v27 = v35;
    }
    v28 = &v27[v26];
    v29 = *v6;
LABEL_38:
    *v28 = v29;
    v30 = v6 + 1;
    while (v30 != v21)
    {
      v31 = *v30++;
      v29 = v31;
      if (v31 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        ++v28;
        v6 = v30 - 1;
        goto LABEL_38;
      }
    }
  }
LABEL_8:
  v9 = v7 + v8;
  LODWORD(v34) = v9;
  if (v9)
  {
    do
    {
      v10 = *((_QWORD *)v33 + v9 - 1);
      LODWORD(v34) = v9 - 1;
      v32 = v10;
      v11 = sub_1C56E0DB4((uint64_t)this + 288, &v32);
      v12 = v11[2];
      if (v12 == v11[1])
        v13 = (unsigned int *)v11 + 7;
      else
        v13 = (unsigned int *)(v11 + 3);
      v14 = *v13;
      if ((_DWORD)v14)
      {
        v15 = 8 * v14;
        v16 = (uint64_t *)v11[2];
        while ((unint64_t)*v16 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v16;
          v15 -= 8;
          if (!v15)
            goto LABEL_24;
        }
      }
      else
      {
        v16 = (uint64_t *)v11[2];
      }
      v17 = (_QWORD *)(v12 + 8 * v14);
      if (v16 != v17)
      {
        v18 = *v16;
LABEL_20:
        llvm::GlobalDCEPass::MarkLive(this, v18, (uint64_t)&v33);
        v19 = (unint64_t *)(v16 + 1);
        while (v19 != v17)
        {
          v20 = *v19++;
          v18 = v20;
          if (v20 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v16 = (uint64_t *)(v19 - 1);
            goto LABEL_20;
          }
        }
      }
LABEL_24:
      v9 = v34;
    }
    while ((_DWORD)v34);
  }
  if (v33 != v35)
    free(v33);
}

void llvm::GlobalDCEPass::ScanVTables(llvm::GlobalDCEPass *this, llvm::Module *a2)
{
  llvm::Module *v2;
  uint64_t ModuleFlag;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t *v24;
  uint64_t v25;
  int VCallVisibility;
  _BOOL4 v27;
  uint64_t *VTableOffsetRange;
  unint64_t v29;
  llvm::SmallPtrSetImplBase *v30;
  char *v31;
  llvm::Module *v32;
  _BOOL4 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  _BYTE v37[64];
  char *v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[4];

  v2 = a2;
  v41[2] = *MEMORY[0x1E0C80C00];
  v39 = v41;
  v40 = 0x200000000;
  ModuleFlag = llvm::Module::getModuleFlag((uint64_t)a2, "LTOPostLink", 0xBuLL);
  if (ModuleFlag)
  {
    v5 = *(_QWORD *)(ModuleFlag + 128);
    v6 = (_QWORD *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u)
      v6 = (_QWORD *)*v6;
    v33 = *v6 != 0;
  }
  else
  {
    v33 = 0;
  }
  v7 = (char *)v2 + 8;
  v8 = (char *)*((_QWORD *)v2 + 2);
  if (v8 != (char *)v2 + 8)
  {
    v9 = (char *)this + 392;
    v31 = (char *)this + 416;
    v32 = v2;
    do
    {
      if (v8)
        v10 = (unint64_t)(v8 - 56);
      else
        v10 = 0;
      LODWORD(v40) = 0;
      llvm::Value::getMetadata((unsigned int *)v10, 19, (uint64_t)&v39);
      if (v8 && *(_BYTE *)(v10 + 16) == 3)
      {
        if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_18;
      }
      else if (*(_BYTE *)(v10 + 16) || *(_QWORD *)(v10 + 72) != v10 + 72 || (*(_BYTE *)(v10 + 34) & 0x80) != 0)
      {
LABEL_18:
        if ((_DWORD)v40)
        {
          v11 = (char *)v39;
          v12 = (char *)v39 + 8 * v40;
          do
          {
            v13 = *(_QWORD *)(*(_QWORD *)v11 - 8 * *(unsigned int *)(*(_QWORD *)v11 + 8));
            v38 = *(char **)(*(_QWORD *)v11 - 8 * *(unsigned int *)(*(_QWORD *)v11 + 8) + 8);
            v14 = *(_QWORD *)(v13 + 128);
            v15 = (unint64_t *)(v14 + 24);
            if (*(_DWORD *)(v14 + 32) >= 0x41u)
              v15 = (unint64_t *)*v15;
            v16 = *v15;
            v17 = sub_1C629484C((uint64_t)v9, (uint64_t *)&v38);
            v18 = v17;
            *(_QWORD *)&v34 = v10;
            *((_QWORD *)&v34 + 1) = v16;
            if (v17[13])
            {
              sub_1C6294AE8((uint64_t)(v17 + 11), v10, v16, &v34);
            }
            else
            {
              v19 = v17[1];
              v20 = *((unsigned int *)v17 + 4);
              if (!(_DWORD)v20)
                goto LABEL_33;
              v21 = 16 * v20;
              v22 = (_QWORD *)(v19 + 8);
              while (*(v22 - 1) != v10 || *v22 != v16)
              {
                v22 += 2;
                v21 -= 16;
                if (!v21)
                  goto LABEL_32;
              }
              if (v21)
                goto LABEL_36;
LABEL_32:
              if (v20 > 3)
              {
                do
                {
                  v25 = v18[1] + 16 * v20;
                  sub_1C6294AE8((uint64_t)(v18 + 11), *(_QWORD *)(v25 - 16), *(_QWORD *)(v25 - 8), (_OWORD *)(v25 - 16));
                  LODWORD(v20) = *((_DWORD *)v18 + 4) - 1;
                  *((_DWORD *)v18 + 4) = v20;
                }
                while ((_DWORD)v20);
                sub_1C6294AE8((uint64_t)(v18 + 11), v10, v16, &v34);
                v2 = v32;
              }
              else
              {
LABEL_33:
                if (v20 >= *((_DWORD *)v17 + 5))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v17 + 1), (uint64_t)(v17 + 3), v20 + 1, 16);
                  v19 = v18[1];
                  v20 = *((unsigned int *)v18 + 4);
                }
                v24 = (unint64_t *)(v19 + 16 * v20);
                *v24 = v10;
                v24[1] = v16;
                ++*((_DWORD *)v18 + 4);
              }
            }
LABEL_36:
            v11 += 8;
          }
          while (v11 != v12);
          if (v8)
          {
            VCallVisibility = llvm::GlobalObject::getVCallVisibility((llvm::GlobalObject *)(v8 - 56));
            v27 = v33;
            if (VCallVisibility != 1)
              v27 = 0;
            if (VCallVisibility == 2 || v27)
            {
              VTableOffsetRange = llvm::GlobalObject::getVTableOffsetRange((llvm::GlobalObject *)(v8 - 56));
              *(_QWORD *)&v34 = v37;
              *((_QWORD *)&v34 + 1) = v37;
              v35 = 8;
              v36 = 0;
              sub_1C56DEA24((uint64_t)v2, *((_QWORD *)v8 - 11), (unint64_t)VTableOffsetRange, v29, (llvm::SmallPtrSetImplBase *)&v34, 0);
              v38 = v8 - 56;
              v30 = (llvm::SmallPtrSetImplBase *)(sub_1C62944C0((uint64_t)v31, (uint64_t *)&v38) + 1);
              if (&v34 != (__int128 *)v30)
                llvm::SmallPtrSetImplBase::CopyFrom(v30, (const llvm::SmallPtrSetImplBase *)&v34);
              if (*((_QWORD *)&v34 + 1) != (_QWORD)v34)
                free(*((void **)&v34 + 1));
            }
          }
        }
      }
      v8 = (char *)*((_QWORD *)v8 + 1);
    }
    while (v8 != v7);
  }
  if (v39 != v41)
    free(v39);
}

void sub_1C56DEA24(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, llvm::SmallPtrSetImplBase *a5, unint64_t a6)
{
  unint64_t v6;
  unsigned int v10;
  char *v11;
  char v12;
  uint64_t **v13;
  llvm::StructLayout *StructLayout;
  uint64_t v15;
  llvm::StructLayout *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  char *v26;
  unint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  char v34;
  const char *v35;
  uint64_t v36;
  _BOOL8 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v6 = a6;
  v10 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v10 <= 3)
  {
    if (a3 <= a6 && a6 < a4)
    {
      if (!*(_BYTE *)(a2 + 16)
        || (v11 = llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)a2, (const llvm::Value *)a2), v12)
        && !*((_BYTE *)llvm::Value::stripPointerCasts(*(llvm::Value **)(*((_QWORD *)v11 - 4)
                                                                      - 32
                                                                      * (*(_DWORD *)(*((_QWORD *)v11 - 4) + 20) & 0x7FFFFFF)))
            + 16))
      {
        sub_1C4774094(a5, a2);
      }
    }
  }
  else if (a2 && v10 == 9)
  {
    v13 = *(uint64_t ***)a2;
    StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)(a1 + 272), *(llvm::StructType **)a2);
    v15 = *((unsigned int *)v13 + 3);
    if ((_DWORD)v15)
    {
      v16 = StructLayout;
      v17 = 0;
      v18 = v13[2];
      v19 = &v18[v15];
      v20 = (char *)StructLayout + 16;
      do
      {
        v21 = *(_QWORD *)&v20[8 * v17];
        v22 = v20;
        v23 = *((_DWORD *)v16 + 3) & 0x7FFFFFFF;
        if ((_DWORD)v23)
        {
          v22 = v20;
          do
          {
            v24 = v23 >> 1;
            v25 = (unint64_t *)&v22[8 * (v23 >> 1)];
            v27 = *v25;
            v26 = (char *)(v25 + 1);
            v23 += ~(v23 >> 1);
            if (v27 > v21)
              v23 = v24;
            else
              v22 = v26;
          }
          while (v23);
        }
        sub_1C56DEA24(a1, *(_QWORD *)(a2- 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)+ 32 * ((unint64_t)(v22 - v20 - 8) >> 3)), a3, a4, a5, v21 + v6);
        ++v18;
        ++v17;
      }
      while (v18 != v19);
    }
  }
  else if (a2 && v10 == 8)
  {
    v28 = *(uint64_t ***)a2;
    v29 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    sub_1C4768AD0(a1 + 272, v29);
    v31 = v30;
    v33 = v32 == 1;
    llvm::DataLayout::getAlignment(a1 + 272, v29);
    v36 = *((unsigned int *)v28 + 8);
    if (v36)
    {
      v37 = v33;
      v38 = ((1 << v34) + ((unint64_t)(v31 + 7) >> 3) - 1) & -(1 << v34);
      v39 = a2;
      do
      {
        v40 = *(_QWORD *)(v39 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v37)
        sub_1C56DEA24(a1, v40, a3, a4, a5, v6);
        v6 += v38;
        v39 += 32;
        --v36;
      }
      while (v36);
    }
  }
  else
  {
    v41 = *(_DWORD *)(a2 + 20);
    if ((v41 & 0x40000000) != 0)
    {
      v43 = *(uint64_t **)(a2 - 8);
      v42 = v41 & 0x7FFFFFF;
      if (!v42)
        return;
    }
    else
    {
      v42 = v41 & 0x7FFFFFF;
      v43 = (uint64_t *)(a2 - 32 * v42);
      if (!v42)
        return;
    }
    v44 = 32 * v42;
    do
    {
      v45 = *v43;
      v43 += 4;
      sub_1C56DEA24(a1, v45, a3, a4, a5, v6);
      v44 -= 32;
    }
    while (v44);
  }
}

void llvm::GlobalDCEPass::ScanVTableLoad(llvm::GlobalDCEPass *this, llvm::Function *a2, llvm::Metadata *a3, uint64_t a4)
{
  _QWORD *v7;
  llvm::Constant *v8;
  uint64_t v9;
  llvm::Module **v10;
  uint64_t v11;
  llvm::Module **v12;
  char *v13;
  char *v14;
  llvm::Module **v15;
  llvm::Module *v16;
  llvm *PointerAtOffset;
  llvm::Module *v18;
  llvm::Module **v19;
  llvm::Value *v20;
  const llvm::Value *v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  _QWORD *v25;
  llvm::Function *v26;
  llvm::Metadata *v27;

  v27 = a3;
  v7 = sub_1C629484C((uint64_t)this + 392, (uint64_t *)&v27);
  v9 = v7[13];
  if (v9)
    v10 = (llvm::Module **)v7[11];
  else
    v10 = (llvm::Module **)v7[1];
  v11 = v7[1] + 16 * *((unsigned int *)v7 + 4);
  v12 = (llvm::Module **)(v7 + 12);
  v13 = (char *)this + 288;
  v14 = (char *)this + 416;
  while (1)
  {
    if (v9)
    {
      if (v10 == v12)
        return;
      goto LABEL_9;
    }
    if (v10 == (llvm::Module **)v11)
      break;
LABEL_9:
    v15 = v10 + 4;
    if (!v9)
      v15 = v10;
    v16 = *v15;
    PointerAtOffset = llvm::getPointerAtOffset(*((llvm **)*v15 - 4), (unint64_t)v15[1] + a4, *((_QWORD *)a2 + 5), *v15, v8);
    if (PointerAtOffset
      && ((v20 = llvm::Value::stripPointerCasts(PointerAtOffset), (v22 = (uint64_t)v20) != 0)
        ? (v23 = *((_BYTE *)v20 + 16) == 0)
        : (v23 = 0),
          v23 || (llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)v20, v21), v24) && *(unsigned __int8 *)(v22 + 16) < 4u))
    {
      v26 = a2;
      v25 = sub_1C56E0DB4((uint64_t)v13, (uint64_t *)&v26);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(v25 + 1), v22);
      if (v9)
        goto LABEL_13;
LABEL_26:
      v10 += 2;
    }
    else
    {
      sub_1C6293FC0((uint64_t)v14, (uint64_t)v16);
      if (!v9)
        goto LABEL_26;
LABEL_13:
      v18 = v10[1];
      v19 = v10;
      if (v18)
      {
        do
        {
          v10 = (llvm::Module **)v18;
          v18 = *(llvm::Module **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v10 = (llvm::Module **)v19[2];
          v23 = *v10 == (llvm::Module *)v19;
          v19 = v10;
        }
        while (!v23);
      }
    }
  }
}

void sub_1C56DEE2C(llvm::GlobalDCEPass *this, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  llvm::Metadata *v10;
  BOOL v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  llvm::Metadata *v21;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 + 8);
    if (v2)
    {
      v4 = (char *)this + 392;
      v5 = (char *)this + 416;
      do
      {
        v6 = *(_QWORD *)(v2 + 24);
        if (v6 && *(_BYTE *)(v6 + 16) == 84)
        {
          v7 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
          v8 = *(_QWORD *)(v7 + 32);
          v9 = *(unsigned __int8 *)(v8 + 16);
          v10 = *(llvm::Metadata **)(*(_QWORD *)(v7 + 64) + 24);
          v21 = v10;
          if (v8)
            v11 = v9 == 16;
          else
            v11 = 0;
          if (v11)
          {
            v12 = (uint64_t *)(v8 + 24);
            if (*(_DWORD *)(v8 + 32) >= 0x41u)
              v12 = (uint64_t *)*v12;
            llvm::GlobalDCEPass::ScanVTableLoad(this, *(llvm::Function **)(*(_QWORD *)(v6 + 40) + 56), v10, *v12);
          }
          else
          {
            v13 = sub_1C629484C((uint64_t)v4, (uint64_t *)&v21);
            v14 = v13[13];
            if (v14)
              v15 = (uint64_t *)v13[11];
            else
              v15 = (uint64_t *)v13[1];
            v16 = v13[1] + 16 * *((unsigned int *)v13 + 4);
            v17 = v13 + 12;
            while (1)
            {
              while (v14)
              {
                if (v15 == v17)
                  goto LABEL_14;
                sub_1C6293FC0((uint64_t)v5, v15[4]);
                v18 = (uint64_t *)v15[1];
                v19 = v15;
                if (v18)
                {
                  do
                  {
                    v15 = v18;
                    v18 = (uint64_t *)*v18;
                  }
                  while (v18);
                }
                else
                {
                  do
                  {
                    v15 = (uint64_t *)v19[2];
                    v11 = *v15 == (_QWORD)v19;
                    v19 = v15;
                  }
                  while (!v11);
                }
              }
              if (v15 == (uint64_t *)v16)
                break;
              v20 = *v15;
              v15 += 2;
              sub_1C6293FC0((uint64_t)v5, v20);
            }
          }
        }
LABEL_14:
        v2 = *(_QWORD *)(v2 + 8);
      }
      while (v2);
    }
  }
}

void llvm::GlobalDCEPass::AddVirtualFunctionDependencies(llvm::GlobalDCEPass *this, llvm::Module *a2)
{
  uint64_t ModuleFlag;
  uint64_t v5;
  _QWORD *v6;

  if (byte_1ED80B640)
  {
    ModuleFlag = llvm::Module::getModuleFlag((uint64_t)a2, "Virtual Function Elim", 0x15uLL);
    if (ModuleFlag)
    {
      if (*(_BYTE *)ModuleFlag == 1)
      {
        v5 = *(_QWORD *)(ModuleFlag + 128);
        if (*(_BYTE *)(v5 + 16) == 16)
        {
          v6 = (_QWORD *)(v5 + 24);
          if (*(_DWORD *)(v5 + 32) >= 0x41u)
            v6 = (_QWORD *)*v6;
          if (*v6)
          {
            llvm::GlobalDCEPass::ScanVTables(this, a2);
            if (*((_DWORD *)this + 106))
              llvm::GlobalDCEPass::ScanTypeCheckedLoadIntrinsics(this, a2);
          }
        }
      }
    }
  }
}

uint64_t llvm::GlobalDCEPass::TargetFromConditionalUsedIfLive(llvm::GlobalDCEPass *this, llvm::MDNode *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[64];

  v2 = (_QWORD *)((char *)a2 - 8 * *((unsigned int *)a2 + 2));
  if (!*v2)
    return 0;
  v3 = *(_QWORD *)(*v2 + 128);
  if (!v3)
    return 0;
  v6 = (unsigned __int8 *)v2[2];
  if (v6 && *v6 - 4 < 0x1F)
  {
    v7 = (uint64_t *)v40;
    v36 = (uint64_t *)v40;
    v37 = (uint64_t *)v40;
    v38 = 8;
    v39 = 0;
    v8 = *((unsigned int *)v6 + 2);
    if (!(_DWORD)v8)
    {
      v15 = 0;
      v16 = 8;
      v14 = (uint64_t *)v40;
      goto LABEL_18;
    }
    v9 = -8 * v8;
    do
    {
      v10 = *(_QWORD *)&v6[v9];
      if (v10)
      {
        v11 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v10 + 128));
        if (!v11 || *((unsigned __int8 *)v11 + 16) - 13 <= 0xFFFFFFFD)
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v36, (uint64_t)v11);
      }
      v9 += 8;
    }
    while (v9);
  }
  else
  {
    v36 = (uint64_t *)v40;
    v37 = (uint64_t *)v40;
    v38 = 8;
    v39 = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v36, 0);
  }
  v7 = v36;
  v14 = v37;
  v16 = v38;
  v15 = HIDWORD(v38);
LABEL_18:
  v17 = v15 != v39;
  if (v14 == v7)
    v18 = v15;
  else
    v18 = v16;
  v19 = v14;
  if ((_DWORD)v18)
  {
    v20 = 8 * v18;
    v19 = v14;
    while ((unint64_t)*v19 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v19;
      v20 -= 8;
      if (!v20)
        goto LABEL_35;
    }
  }
  v21 = &v14[v18];
  if (v19 == v21)
  {
LABEL_35:
    v22 = 0;
  }
  else
  {
    v22 = 0;
    v23 = *v19;
LABEL_28:
    v24 = sub_1C477672C((uint64_t)this, v23);
    v25 = *((_QWORD *)this + 1);
    if (v25 == *(_QWORD *)this)
      v26 = 20;
    else
      v26 = 16;
    v27 = v24 != (_QWORD *)(v25 + 8 * *(unsigned int *)((char *)this + v26));
    v17 &= v27;
    v22 |= v27;
    v28 = (unint64_t *)(v19 + 1);
    while (v28 != (unint64_t *)v21)
    {
      v29 = *v28++;
      v23 = v29;
      if (v29 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v19 = (uint64_t *)(v28 - 1);
        goto LABEL_28;
      }
    }
  }
  v30 = *(_QWORD *)(((_QWORD *)a2 - *((unsigned int *)a2 + 2))[1] + 128);
  v31 = *(_DWORD *)(v30 + 32);
  if (v31 > 0x40)
    v32 = **(_QWORD **)(v30 + 24);
  else
    v32 = (uint64_t)(*(_QWORD *)(v30 + 24) << -(char)v31) >> -(char)v31;
  if (v17)
    v33 = v3;
  else
    v33 = 0;
  if ((v22 & 1) != 0)
    v34 = v3;
  else
    v34 = 0;
  if (v32)
    v13 = v33;
  else
    v13 = v34;
  if (v37 != v36)
    free(v37);
  return v13;
}

void llvm::GlobalDCEPass::run(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t Comdat;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  uint64_t v28;
  uint64_t j;
  llvm::GlobalValue *v30;
  unsigned int v31;
  int v32;
  _QWORD *k;
  llvm::GlobalValue *v35;
  unsigned int v36;
  int v37;
  llvm::Function *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  int32x2_t ****v60;
  const llvm::Constant *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  llvm **v111;
  llvm *v112;
  llvm::PointerType *v113;
  llvm::Value *v114;
  llvm::ConstantPointerNull ***v115;
  llvm::ConstantPointerNull **v116;
  llvm::Value *v117;
  llvm::GlobalValue **v118;
  llvm::GlobalValue *v119;
  llvm::GlobalValue **v120;
  llvm::GlobalValue *v121;
  void *v122;
  _QWORD *v123;
  _QWORD *v124;
  void *v125;
  uint64_t v126;
  uint64_t m;
  unsigned int v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  void *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  llvm::GlobalVariable *v139;
  uint64_t NamedMetadata;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  llvm::Value **v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  void *v155;
  uint64_t v156;
  llvm::Value *v157;
  _QWORD *v158;
  uint64_t *v159;
  _QWORD *v160;
  uint64_t v161;
  int v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  unsigned int v166;
  int v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t n;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  _QWORD *v178;
  uint64_t v179;
  void *v180;
  int v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  unsigned int v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t *v201;
  uint64_t *v202;
  llvm **v203;
  llvm::Module *v204;
  BOOL __p;
  uint64_t *__pa;
  _BYTE *v207;
  _BYTE *v208;
  uint64_t v209;
  int v210;
  _BYTE v211[64];
  __int128 v212;
  uint64_t v213;
  char *v214;
  _WORD v215[36];

  v5 = llvm::optimizeGlobalCtorsList(a2, (uint64_t (*)(uint64_t))sub_1C6294B88, (uint64_t)sub_1C56E04B0);
  v6 = a2 + 24;
  v204 = (llvm::Module *)a2;
  for (i = *(_QWORD *)(a2 + 32); i != v6; i = *(_QWORD *)(i + 8))
  {
    v8 = i - 56;
    if (!i)
      v8 = 0;
    if (*(_QWORD *)(v8 + 48))
    {
      *(_QWORD *)&v212 = *(_QWORD *)(v8 + 48);
      *((_QWORD *)&v212 + 1) = v8;
      sub_1C6294B94((_QWORD *)(a1 + 352), &v212);
    }
  }
  v9 = (char *)v204 + 8;
  v10 = (char *)*((_QWORD *)v204 + 2);
  if (v10 != (char *)v204 + 8)
  {
    do
    {
      v11 = v10 - 56;
      if (!v10)
        v11 = 0;
      if (*((_QWORD *)v11 + 6))
      {
        *(_QWORD *)&v212 = *((_QWORD *)v11 + 6);
        *((_QWORD *)&v212 + 1) = v11;
        sub_1C6294B94((_QWORD *)(a1 + 352), &v212);
      }
      v10 = (char *)*((_QWORD *)v10 + 1);
    }
    while (v10 != v9);
  }
  v12 = (char *)v204 + 40;
  v13 = (char *)*((_QWORD *)v204 + 6);
  if (v13 != (char *)v204 + 40)
  {
    do
    {
      if (v13)
        v14 = (uint64_t)(v13 - 48);
      else
        v14 = 0;
      Comdat = llvm::GlobalValue::getComdat(v14);
      if (Comdat)
      {
        *(_QWORD *)&v212 = Comdat;
        *((_QWORD *)&v212 + 1) = v14;
        sub_1C6294B94((_QWORD *)(a1 + 352), &v212);
      }
      v13 = (char *)*((_QWORD *)v13 + 1);
    }
    while (v13 != v12);
  }
  llvm::GlobalDCEPass::AddVirtualFunctionDependencies((llvm::GlobalDCEPass *)a1, v204);
  v16 = sub_1C4FB7E80(*((uint64_t **)v204 + 14), "llvm.used", 9uLL);
  v199 = v5;
  if (v16
    && (v139 = (llvm::GlobalVariable *)v16, *(_BYTE *)(v16 + 16) == 3)
    && (*(_DWORD *)(v16 + 32) & 0xFu) - 7 >= 2
    && (*(_QWORD *)&v212 = "llvm.used.conditional",
        v215[0] = 259,
        (NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)v204, (uint64_t)&v212)) != 0)
    && (v141 = NamedMetadata, v142 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8), (_DWORD)v142))
  {
    v143 = 0;
    *(_QWORD *)&v212 = v215;
    *((_QWORD *)&v212 + 1) = v215;
    v213 = 8;
    LODWORD(v214) = 0;
    v144 = 8 * v142;
    do
    {
      v145 = *(_QWORD *)(**(_QWORD **)(v141 + 48) + v143);
      v146 = *(_QWORD *)(v145 - 8 * *(unsigned int *)(v145 + 8));
      if (v146)
      {
        v147 = *(_QWORD *)(v146 + 128);
        if (v147)
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v212, v147);
      }
      v143 += 8;
    }
    while (v144 != v143);
    __p = HIDWORD(v213) != (_DWORD)v214;
    if (HIDWORD(v213) != (_DWORD)v214)
    {
      v207 = v211;
      v208 = v211;
      v209 = 8;
      v210 = 0;
      v148 = *((_QWORD *)v139 - 4);
      v149 = *(_DWORD *)(v148 + 20);
      if ((v149 & 0x40000000) != 0)
      {
        v151 = *(llvm::Value ***)(v148 - 8);
        v150 = v149 & 0x7FFFFFF;
      }
      else
      {
        v150 = v149 & 0x7FFFFFF;
        v151 = (llvm::Value **)(v148 - 32 * v150);
      }
      if (v150)
      {
        v156 = 32 * v150;
        do
        {
          v157 = llvm::Value::stripPointerCasts(*v151);
          v158 = sub_1C477672C((uint64_t)&v212, (uint64_t)v157);
          if (*((_QWORD *)&v212 + 1) == (_QWORD)v212)
            v159 = (uint64_t *)((char *)&v213 + 4);
          else
            v159 = &v213;
          if (v158 == (_QWORD *)(*((_QWORD *)&v212 + 1) + 8 * *(unsigned int *)v159))
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v207, (uint64_t)v157);
          v151 += 4;
          v156 -= 32;
        }
        while (v156);
      }
      llvm::setUsedInitializer(v139, (uint64_t)&v207);
      if (v208 != v207)
        free(v208);
    }
    if (*((_QWORD *)&v212 + 1) != (_QWORD)v212)
      free(*((void **)&v212 + 1));
  }
  else
  {
    __p = 0;
  }
  v17 = *((_QWORD *)v204 + 4);
  v18 = (char *)*((_QWORD *)v204 + 2);
  *(_QWORD *)&v212 = v17;
  *((_QWORD *)&v212 + 1) = v18;
  v213 = v6;
  v214 = (char *)v204 + 8;
  while (1)
  {
    if (v17 == v6 && v18 == v9)
    {
      v19 = v213 == v6 && v214 == v9;
      if (v19)
        break;
    }
    v20 = 0;
    do
    {
      v21 = (*(uint64_t (**)(__int128 *))((char *)&off_1E817A268 + v20))(&v212);
      if (v21)
        v22 = 1;
      else
        v22 = v20 == 16;
      v20 += 16;
    }
    while (!v22);
    v23 = v21;
    llvm::Constant::removeDeadConstantUsers(v21);
    if (*(_BYTE *)(v23 + 16))
    {
      if (*(_BYTE *)(v23 + 16) == 3 && (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_46;
    }
    else if (*(_QWORD *)(v23 + 72) == v23 + 72 && (*(_BYTE *)(v23 + 34) & 0x80) == 0)
    {
      goto LABEL_46;
    }
    v24 = *(_DWORD *)(v23 + 32) & 0xF;
    v25 = v24 > 8;
    v26 = (1 << v24) & 0x18E;
    if (v25 || v26 == 0)
      llvm::GlobalDCEPass::MarkLive((llvm::SmallPtrSetImplBase *)a1, v23, 0);
LABEL_46:
    llvm::GlobalDCEPass::UpdateGVDependencies((llvm::GlobalDCEPass *)a1, (llvm::GlobalValue *)v23);
    v28 = 0;
    do
    {
      if (((*(uint64_t (**)(__int128 *))((char *)&off_1E817A248 + v28))(&v212) & 1) != 0)
        break;
      v19 = v28 == 16;
      v28 += 16;
    }
    while (!v19);
    v18 = (char *)*((_QWORD *)&v212 + 1);
    v17 = v212;
  }
  for (j = *((_QWORD *)v204 + 6); (char *)j != v12; j = *(_QWORD *)(j + 8))
  {
    if (j)
      v30 = (llvm::GlobalValue *)(j - 48);
    else
      v30 = 0;
    llvm::Constant::removeDeadConstantUsers((uint64_t)v30);
    v31 = *((_DWORD *)v30 + 8) & 0xF;
    v25 = v31 > 8;
    v32 = (1 << v31) & 0x18E;
    if (v25 || v32 == 0)
      llvm::GlobalDCEPass::MarkLive((llvm::SmallPtrSetImplBase *)a1, (uint64_t)v30, 0);
    llvm::GlobalDCEPass::UpdateGVDependencies((llvm::GlobalDCEPass *)a1, v30);
  }
  for (k = (_QWORD *)*((_QWORD *)v204 + 8); k != (_QWORD *)((char *)v204 + 56); k = (_QWORD *)k[1])
  {
    if (k)
      v35 = (llvm::GlobalValue *)(k - 7);
    else
      v35 = 0;
    llvm::Constant::removeDeadConstantUsers((uint64_t)v35);
    v36 = *((_DWORD *)v35 + 8) & 0xF;
    v25 = v36 > 8;
    v37 = (1 << v36) & 0x18E;
    if (v25 || v37 == 0)
      llvm::GlobalDCEPass::MarkLive((llvm::SmallPtrSetImplBase *)a1, (uint64_t)v35, 0);
    llvm::GlobalDCEPass::UpdateGVDependencies((llvm::GlobalDCEPass *)a1, v35);
  }
  if (__p)
    llvm::GlobalDCEPass::PropagateLivenessToConditionallyUsed((llvm::GlobalDCEPass *)a1, v204);
  llvm::GlobalDCEPass::PropagateLivenessInGlobalValues((llvm::GlobalDCEPass *)a1);
  v40 = *((_QWORD *)v204 + 2);
  if ((char *)v40 != v9)
  {
    v41 = 0;
    v42 = 0;
    v43 = 0;
    while (1)
    {
      if (v40)
        v44 = v40 - 56;
      else
        v44 = 0;
      v45 = sub_1C477672C(a1, v44);
      v46 = *(_QWORD *)(a1 + 8);
      v47 = 20;
      if (v46 != *(_QWORD *)a1)
        v47 = 16;
      if (v45 != (_QWORD *)(v46 + 8 * *(unsigned int *)(a1 + v47)))
        goto LABEL_109;
      if (v42 >= v41)
      {
        v48 = v43;
        v49 = v42 - v43;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61)
LABEL_315:
          abort();
        v51 = v48;
        v52 = (char *)v41 - (char *)v48;
        v53 = ((char *)v41 - (char *)v48) >> 2;
        if (v53 > v50)
          v50 = v53;
        if (v52 >= 0x7FFFFFFFFFFFFFF8)
          v54 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v54 = v50;
        if (v54)
        {
          if (v54 >> 61)
LABEL_316:
            sub_1C4764EE4();
          v55 = (char *)operator new(8 * v54);
        }
        else
        {
          v55 = 0;
        }
        v56 = (uint64_t *)&v55[8 * v49];
        *v56 = v44;
        v57 = v56 + 1;
        if (v42 != v51)
        {
          do
          {
            v58 = *--v42;
            *--v56 = v58;
          }
          while (v42 != v51);
          v42 = v51;
        }
        v43 = v56;
        v41 = (uint64_t *)&v55[8 * v54];
        if (v42)
          operator delete(v42);
        v42 = v57;
        v12 = (char *)v204 + 40;
      }
      else
      {
        *v42++ = v44;
      }
      if (v40 && *(_BYTE *)(v44 + 16) == 3)
      {
        if ((*(_DWORD *)(v44 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_106;
      }
      else if (*(_BYTE *)(v44 + 16) || *(_QWORD *)(v44 + 72) != v44 + 72 || (*(_BYTE *)(v44 + 34) & 0x80) != 0)
      {
LABEL_106:
        v59 = v42;
        v60 = *(int32x2_t *****)(v44 - 32);
        llvm::GlobalVariable::setInitializer(v44, 0);
        if (llvm::isSafeToDestroyConstant((llvm *)v60, v61))
          llvm::Constant::destroyConstant(v60);
        v42 = v59;
      }
LABEL_109:
      v40 = *(_QWORD *)(v40 + 8);
      v62 = v42;
      if ((char *)v40 == v9)
        goto LABEL_112;
    }
  }
  v43 = 0;
  v62 = 0;
LABEL_112:
  v201 = v62;
  v202 = v43;
  v63 = *((_QWORD *)v204 + 4);
  if (v63 != v6)
  {
    v64 = 0;
    v65 = 0;
    v66 = 0;
    while (1)
    {
      if (v63)
        v67 = v63 - 56;
      else
        v67 = 0;
      v68 = sub_1C477672C(a1, v67);
      v69 = *(_QWORD *)(a1 + 8);
      v70 = 16;
      if (v69 == *(_QWORD *)a1)
        v70 = 20;
      if (v68 == (_QWORD *)(v69 + 8 * *(unsigned int *)(a1 + v70)))
      {
        if (v65 >= v66)
        {
          v72 = v65 - v64;
          v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 61)
            goto LABEL_315;
          if (((char *)v66 - (char *)v64) >> 2 > v73)
            v73 = ((char *)v66 - (char *)v64) >> 2;
          if ((unint64_t)((char *)v66 - (char *)v64) >= 0x7FFFFFFFFFFFFFF8)
            v74 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v74 = v73;
          if (v74)
          {
            if (v74 >> 61)
              goto LABEL_316;
            v75 = (char *)operator new(8 * v74);
          }
          else
          {
            v75 = 0;
          }
          v76 = (uint64_t *)&v75[8 * v72];
          *v76 = v67;
          v71 = v76 + 1;
          while (v65 != v64)
          {
            v77 = *--v65;
            *--v76 = v77;
          }
          v66 = (uint64_t *)&v75[8 * v74];
          if (v64)
            operator delete(v64);
          v64 = v76;
        }
        else
        {
          *v65 = v67;
          v71 = v65 + 1;
        }
        if (!v63 || *(_BYTE *)(v67 + 16) != 3)
        {
          if (!*(_BYTE *)(v67 + 16) && *(_QWORD *)(v67 + 72) == v67 + 72 && (*(_BYTE *)(v67 + 34) & 0x80) == 0)
            goto LABEL_147;
LABEL_146:
          sub_1C6291B14((llvm::Function *)v67);
          goto LABEL_147;
        }
        if ((*(_DWORD *)(v67 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_146;
      }
      else
      {
        v71 = v65;
      }
LABEL_147:
      v63 = *(_QWORD *)(v63 + 8);
      v65 = v71;
      if (v63 == v6)
        goto LABEL_150;
    }
  }
  v71 = 0;
  v64 = 0;
LABEL_150:
  v203 = (llvm **)v64;
  v78 = *((_QWORD *)v204 + 6);
  if ((char *)v78 == v12)
  {
    v86 = 0;
    __pa = 0;
    v81 = (char *)v204 + 56;
  }
  else
  {
    __pa = 0;
    v79 = 0;
    v80 = 0;
    v81 = (char *)v204 + 56;
    do
    {
      if (v78)
        v82 = v78 - 48;
      else
        v82 = 0;
      v83 = sub_1C477672C(a1, v82);
      v84 = *(_QWORD *)(a1 + 8);
      v85 = 20;
      if (v84 != *(_QWORD *)a1)
        v85 = 16;
      if (v83 == (_QWORD *)(v84 + 8 * *(unsigned int *)(a1 + v85)))
      {
        if (v79 >= v80)
        {
          v87 = v79 - __pa;
          v88 = v87 + 1;
          if ((unint64_t)(v87 + 1) >> 61)
            goto LABEL_315;
          if (((char *)v80 - (char *)__pa) >> 2 > v88)
            v88 = ((char *)v80 - (char *)__pa) >> 2;
          if ((unint64_t)((char *)v80 - (char *)__pa) >= 0x7FFFFFFFFFFFFFF8)
            v89 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v89 = v88;
          if (v89)
          {
            if (v89 >> 61)
              goto LABEL_316;
            v90 = (char *)operator new(8 * v89);
          }
          else
          {
            v90 = 0;
          }
          v91 = (uint64_t *)&v90[8 * v87];
          *v91 = v82;
          v86 = v91 + 1;
          while (v79 != __pa)
          {
            v92 = *--v79;
            *--v91 = v92;
          }
          v80 = (uint64_t *)&v90[8 * v89];
          if (__pa)
            operator delete(__pa);
          __pa = v91;
          v81 = (char *)v204 + 56;
        }
        else
        {
          *v79 = v82;
          v86 = v79 + 1;
        }
        if (*(_QWORD *)(v82 - 32))
        {
          **(_QWORD **)(v82 - 16) = *(_QWORD *)(v82 - 24);
          v93 = *(_QWORD *)(v82 - 24);
          if (v93)
            *(_QWORD *)(v93 + 16) = *(_QWORD *)(v82 - 16);
        }
        *(_QWORD *)(v82 - 32) = 0;
        v79 = v86;
      }
      else
      {
        v86 = v79;
      }
      v78 = *(_QWORD *)(v78 + 8);
    }
    while ((char *)v78 != v12);
  }
  v94 = *((_QWORD *)v204 + 8);
  if ((char *)v94 == v81)
  {
    v102 = 0;
    v95 = 0;
  }
  else
  {
    v95 = 0;
    v96 = 0;
    v97 = 0;
    do
    {
      if (v94)
        v98 = v94 - 56;
      else
        v98 = 0;
      v99 = sub_1C477672C(a1, v98);
      v100 = *(_QWORD *)(a1 + 8);
      v101 = 16;
      if (v100 == *(_QWORD *)a1)
        v101 = 20;
      if (v99 == (_QWORD *)(v100 + 8 * *(unsigned int *)(a1 + v101)))
      {
        if (v96 >= v97)
        {
          v103 = v96 - v95;
          v104 = v103 + 1;
          if ((unint64_t)(v103 + 1) >> 61)
            goto LABEL_315;
          if (((char *)v97 - (char *)v95) >> 2 > v104)
            v104 = ((char *)v97 - (char *)v95) >> 2;
          if ((unint64_t)((char *)v97 - (char *)v95) >= 0x7FFFFFFFFFFFFFF8)
            v105 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v105 = v104;
          if (v105)
          {
            if (v105 >> 61)
              goto LABEL_316;
            v106 = (char *)operator new(8 * v105);
          }
          else
          {
            v106 = 0;
          }
          v107 = (uint64_t *)&v106[8 * v103];
          *v107 = v98;
          v102 = v107 + 1;
          while (v96 != v95)
          {
            v108 = *--v96;
            *--v107 = v108;
          }
          v97 = (uint64_t *)&v106[8 * v105];
          if (v95)
            operator delete(v95);
          v95 = v107;
          v81 = (char *)v204 + 56;
        }
        else
        {
          *v96 = v98;
          v102 = v96 + 1;
        }
        if (*(_QWORD *)(v98 - 32))
        {
          **(_QWORD **)(v98 - 16) = *(_QWORD *)(v98 - 24);
          v109 = *(_QWORD *)(v98 - 24);
          if (v109)
            *(_QWORD *)(v109 + 16) = *(_QWORD *)(v98 - 16);
        }
        *(_QWORD *)(v98 - 32) = 0;
        v96 = v102;
      }
      else
      {
        v102 = v96;
      }
      v94 = *(_QWORD *)(v94 + 8);
    }
    while ((char *)v94 != v81);
  }
  v110 = v199;
  if (v203 != (llvm **)v71)
  {
    v111 = v203;
    do
    {
      v112 = *v111;
      if (*((_QWORD *)*v111 + 1))
      {
        llvm::replaceRelativePointerUsersWithZero(*v111, v39);
        v114 = (llvm::Value *)llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)v112, v113);
        llvm::Value::doRAUW(v112, v114, 0);
      }
      llvm::Constant::removeDeadConstantUsers((uint64_t)v112);
      llvm::GlobalValue::eraseFromParent(v112);
      ++v111;
    }
    while (v111 != (llvm **)v71);
    v110 = 1;
  }
  v115 = (llvm::ConstantPointerNull ***)v202;
  if (v202 != v201)
  {
    do
    {
      v116 = *v115;
      if ((*v115)[1])
      {
        v117 = (llvm::Value *)llvm::ConstantPointerNull::get(*v116, v39);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v116, v117, 0);
      }
      llvm::Constant::removeDeadConstantUsers((uint64_t)v116);
      llvm::GlobalValue::eraseFromParent((llvm::GlobalValue *)v116);
      ++v115;
    }
    while (v115 != (llvm::ConstantPointerNull ***)v201);
    v110 = 1;
  }
  if (__pa != v86)
  {
    v118 = (llvm::GlobalValue **)__pa;
    do
    {
      v119 = *v118++;
      llvm::Constant::removeDeadConstantUsers((uint64_t)v119);
      llvm::GlobalValue::eraseFromParent(v119);
    }
    while (v118 != (llvm::GlobalValue **)v86);
    v110 = 1;
  }
  if (v95 != v102)
  {
    v120 = (llvm::GlobalValue **)v95;
    do
    {
      v121 = *v120++;
      llvm::Constant::removeDeadConstantUsers((uint64_t)v121);
      llvm::GlobalValue::eraseFromParent(v121);
    }
    while (v120 != (llvm::GlobalValue **)v102);
    v110 = 1;
  }
  v122 = *(void **)(a1 + 8);
  if (v122 == *(void **)a1)
    goto LABEL_238;
  v137 = *(unsigned int *)(a1 + 16);
  if (v137 < 0x21 || 4 * (*(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24)) >= v137)
  {
    memset(v122, 255, 8 * v137);
LABEL_238:
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_239;
  }
  free(v122);
  v152 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
  v153 = 1 << (33 - __clz(v152 - 1));
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (v152 <= 0x10)
    v154 = 32;
  else
    v154 = v153;
  *(_DWORD *)(a1 + 16) = v154;
  v155 = malloc_type_malloc(8 * v154, 0x4065EBACuLL);
  if (!v155)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 8) = v155;
  memset(v155, 255, 8 * *(unsigned int *)(a1 + 16));
LABEL_239:
  if (*(_QWORD *)(a1 + 336))
  {
    v123 = *(_QWORD **)(a1 + 328);
    if (v123)
    {
      do
      {
        v124 = (_QWORD *)*v123;
        v125 = (void *)v123[4];
        if (v125 != (void *)v123[3])
          free(v125);
        operator delete(v123);
        v123 = v124;
      }
      while (v124);
    }
    *(_QWORD *)(a1 + 328) = 0;
    v126 = *(_QWORD *)(a1 + 320);
    if (v126)
    {
      for (m = 0; m != v126; ++m)
        *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * m) = 0;
    }
    *(_QWORD *)(a1 + 336) = 0;
  }
  v128 = *(_DWORD *)(a1 + 296);
  if (v128 || *(_DWORD *)(a1 + 300))
  {
    v129 = (_QWORD *)(a1 + 288);
    v130 = *(unsigned int *)(a1 + 304);
    if (v130 > 4 * v128 && v130 >= 0x41)
    {
      sub_1C4F5D3C0((unsigned int *)(a1 + 288));
      if (v128)
      {
        v181 = 1 << (33 - __clz(v128 - 1));
        if (v181 <= 64)
          v128 = 64;
        else
          v128 = v181;
      }
      if (v128 == *(_DWORD *)(a1 + 304))
      {
        *(_QWORD *)(a1 + 296) = 0;
        if (v128)
        {
          v182 = *(_QWORD **)(a1 + 288);
          v183 = 72 * v128;
          do
          {
            *v182 = -4096;
            v182 += 9;
            v183 -= 72;
          }
          while (v183);
        }
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v129, 8);
        if (v128)
        {
          v194 = (4 * v128 / 3 + 1) | ((unint64_t)(4 * v128 / 3 + 1) >> 1);
          v195 = v194 | (v194 >> 2) | ((v194 | (v194 >> 2)) >> 4);
          LODWORD(v195) = (((v195 | (v195 >> 8)) >> 16) | v195 | (v195 >> 8)) + 1;
          *(_DWORD *)(a1 + 304) = v195;
          v196 = operator new(72 * v195, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 288) = v196;
          *(_QWORD *)(a1 + 296) = 0;
          v197 = *(unsigned int *)(a1 + 304);
          if ((_DWORD)v197)
          {
            v198 = 72 * v197;
            do
            {
              *v196 = -4096;
              v196 += 9;
              v198 -= 72;
            }
            while (v198);
          }
        }
        else
        {
          *v129 = 0;
          *(_QWORD *)(a1 + 296) = 0;
          *(_DWORD *)(a1 + 304) = 0;
        }
      }
    }
    else
    {
      if ((_DWORD)v130)
      {
        v131 = (_QWORD *)*v129;
        v132 = 72 * v130;
        do
        {
          if (*v131 != -4096)
          {
            if (*v131 != -8192)
            {
              v133 = (void *)v131[2];
              if (v133 != (void *)v131[1])
                free(v133);
            }
            *v131 = -4096;
          }
          v131 += 9;
          v132 -= 72;
        }
        while (v132);
      }
      *(_QWORD *)(a1 + 296) = 0;
    }
  }
  if (*(_QWORD *)(a1 + 376))
  {
    v170 = *(_QWORD **)(a1 + 368);
    if (v170)
    {
      do
      {
        v171 = (_QWORD *)*v170;
        operator delete(v170);
        v170 = v171;
      }
      while (v171);
    }
    *(_QWORD *)(a1 + 368) = 0;
    v172 = *(_QWORD *)(a1 + 360);
    if (v172)
    {
      for (n = 0; n != v172; ++n)
        *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * n) = 0;
    }
    *(_QWORD *)(a1 + 376) = 0;
  }
  v134 = *(_DWORD *)(a1 + 400);
  if (v134 || *(_DWORD *)(a1 + 404))
  {
    v160 = (_QWORD *)(a1 + 392);
    v161 = *(unsigned int *)(a1 + 408);
    if (v161 > 4 * v134 && v161 >= 0x41)
    {
      sub_1C56E0888(a1 + 392);
      if (v134)
      {
        v162 = 1 << (33 - __clz(v134 - 1));
        if (v162 <= 64)
          v134 = 64;
        else
          v134 = v162;
      }
      if (v134 == *(_DWORD *)(a1 + 408))
      {
        *(_QWORD *)(a1 + 400) = 0;
        if (v134)
        {
          v163 = *(_QWORD **)(a1 + 392);
          v164 = 112 * v134;
          do
          {
            *v163 = -4096;
            v163 += 14;
            v164 -= 112;
          }
          while (v164);
        }
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v160, 8);
        if (v134)
        {
          v184 = (4 * v134 / 3 + 1) | ((unint64_t)(4 * v134 / 3 + 1) >> 1);
          v185 = v184 | (v184 >> 2) | ((v184 | (v184 >> 2)) >> 4);
          LODWORD(v185) = (((v185 | (v185 >> 8)) >> 16) | v185 | (v185 >> 8)) + 1;
          *(_DWORD *)(a1 + 408) = v185;
          v186 = operator new(112 * v185, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 392) = v186;
          *(_QWORD *)(a1 + 400) = 0;
          v187 = *(unsigned int *)(a1 + 408);
          if ((_DWORD)v187)
          {
            v188 = 112 * v187;
            do
            {
              *v186 = -4096;
              v186 += 14;
              v188 -= 112;
            }
            while (v188);
          }
        }
        else
        {
          *v160 = 0;
          *(_QWORD *)(a1 + 400) = 0;
          *(_DWORD *)(a1 + 408) = 0;
        }
      }
      goto LABEL_263;
    }
    if (!(_DWORD)v161)
    {
LABEL_353:
      *(_QWORD *)(a1 + 400) = 0;
      goto LABEL_263;
    }
    v174 = *v160 + 88;
    v175 = 112 * v161;
    while (1)
    {
      v176 = *(_QWORD *)(v174 - 88);
      if (v176 == -8192)
        goto LABEL_351;
      if (v176 != -4096)
        break;
LABEL_352:
      v174 += 112;
      v175 -= 112;
      if (!v175)
        goto LABEL_353;
    }
    sub_1C47655E8(v174, *(_QWORD **)(v174 + 8));
    v177 = *(void **)(v174 - 80);
    if ((void *)(v174 - 64) != v177)
      free(v177);
LABEL_351:
    *(_QWORD *)(v174 - 88) = -4096;
    goto LABEL_352;
  }
LABEL_263:
  v135 = *(_DWORD *)(a1 + 424);
  if (!v135 && !*(_DWORD *)(a1 + 428))
    goto LABEL_265;
  v165 = (_QWORD *)(a1 + 416);
  v166 = *(_DWORD *)(a1 + 432);
  if (v166 <= 4 * v135 || v166 < 0x41)
  {
    if (!v166)
    {
LABEL_362:
      *(_QWORD *)(a1 + 424) = 0;
      goto LABEL_265;
    }
    v178 = (_QWORD *)*v165;
    v179 = 104 * v166;
    while (1)
    {
      if (*v178 == -8192)
        goto LABEL_360;
      if (*v178 != -4096)
        break;
LABEL_361:
      v178 += 13;
      v179 -= 104;
      if (!v179)
        goto LABEL_362;
    }
    v180 = (void *)v178[2];
    if (v180 != (void *)v178[1])
      free(v180);
LABEL_360:
    *v178 = -4096;
    goto LABEL_361;
  }
  sub_1C56E0824((_DWORD *)(a1 + 416));
  if (v135)
  {
    v167 = 1 << (33 - __clz(v135 - 1));
    if (v167 <= 64)
      v135 = 64;
    else
      v135 = v167;
  }
  if (v135 == *(_DWORD *)(a1 + 432))
  {
    *(_QWORD *)(a1 + 424) = 0;
    if (v135)
    {
      v168 = *(_QWORD **)(a1 + 416);
      v169 = 104 * v135;
      do
      {
        *v168 = -4096;
        v168 += 13;
        v169 -= 104;
      }
      while (v169);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*v165, 8);
    if (v135)
    {
      v189 = (4 * v135 / 3 + 1) | ((unint64_t)(4 * v135 / 3 + 1) >> 1);
      v190 = v189 | (v189 >> 2) | ((v189 | (v189 >> 2)) >> 4);
      LODWORD(v190) = (((v190 | (v190 >> 8)) >> 16) | v190 | (v190 >> 8)) + 1;
      *(_DWORD *)(a1 + 432) = v190;
      v191 = operator new(104 * v190, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 416) = v191;
      *(_QWORD *)(a1 + 424) = 0;
      v192 = *(_DWORD *)(a1 + 432);
      if (v192)
      {
        v193 = 104 * v192;
        do
        {
          *v191 = -4096;
          v191 += 13;
          v193 -= 104;
        }
        while (v193);
      }
    }
    else
    {
      *v165 = 0;
      *(_QWORD *)(a1 + 424) = 0;
      *(_DWORD *)(a1 + 432) = 0;
    }
  }
LABEL_265:
  v136 = a3 + 80;
  if (v110)
  {
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_QWORD *)(a3 + 48) = v136;
    *(_QWORD *)(a3 + 56) = v136;
    *(_DWORD *)(a3 + 64) = 2;
  }
  else
  {
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = v136;
    *(_QWORD *)(a3 + 56) = v136;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  if (v95)
    operator delete(v95);
  if (__pa)
    operator delete(__pa);
  if (v203)
    operator delete(v203);
  if (v202)
    operator delete(v202);
}

BOOL sub_1C56E04B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
    v2 = v1 - 24;
  else
    v2 = 0;
  v3 = v2 + 40;
  for (i = *(_QWORD *)(v2 + 48); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v3)
      return 0;
    v5 = i ? i - 24 : 0;
    if (!sub_1C4D99D08(v5) && !sub_1C509DDB0(v5))
      break;
  }
  result = 0;
  v7 = *(unsigned __int8 *)(v5 + 16);
  if (v7 == 29)
    v8 = v5;
  else
    v8 = 0;
  if (i && v7 == 29)
  {
    v9 = *(_DWORD *)(v8 + 20) & 0x7FFFFFF;
    return !(_DWORD)v9 || *(_QWORD *)(v8 - 32 * v9) == 0;
  }
  return result;
}

uint64_t sub_1C56E0564()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56DDA18(v0);
}

void sub_1C56E058C(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817A160;
  sub_1C56E07A8((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
}

void sub_1C56E05BC(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817A160;
  sub_1C56E07A8((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C56E0600(llvm::ModulePass *a1, uint64_t **a2)
{
  _BOOL8 v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  char *v12;
  char *v13;
  _BYTE v14[40];
  void *v15;
  int v16;
  int v17;
  uint64_t v18[2];
  int v19;
  uint64_t v20[2];
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25[2];
  int v26;
  uint64_t v27[2];
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  v27[0] = 0;
  v27[1] = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v12 = (char *)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key;
  v5 = sub_1C56E09C8(v18, &v12);
  if (!v5[1])
  {
    v6 = v5;
    v7 = (_QWORD *)operator new();
    *v7 = &unk_1E817A200;
    v7[1] = v25;
    v8 = v6[1];
    v6[1] = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  llvm::GlobalDCEPass::run((uint64_t)a1 + 32, (uint64_t)a2, (uint64_t)&v12);
  if (v16 == v17)
  {
    v9 = (char *)sub_1C477672C((uint64_t)&v12, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    if (v13 == v12)
      v10 = &v14[4];
    else
      v10 = v14;
    v4 = v9 == &v13[8 * *(unsigned int *)v10];
  }
  else
  {
    v4 = 1;
  }
  if (v15 != *(void **)&v14[32])
    free(v15);
  if (v13 != v12)
    free(v13);
  MEMORY[0x1CAA32FB4](v22, 8);
  sub_1C4D8B440(v20);
  sub_1C4D8B52C(v18);
  MEMORY[0x1CAA32FB4](v29, 8);
  sub_1C4D8B440(v27);
  sub_1C4D8B52C(v25);
  return v4;
}

uint64_t sub_1C56E07A8(uint64_t a1)
{
  void *v2;

  sub_1C56E0824((_DWORD *)(a1 + 416));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 416), 8);
  sub_1C56E0888(a1 + 392);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 392), 8);
  sub_1C56E08FC(a1 + 352);
  sub_1C56E0964(a1 + 312);
  sub_1C4F5D3C0((unsigned int *)(a1 + 288));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 288), 8);
  v2 = *(void **)(a1 + 8);
  if (v2 != *(void **)a1)
    free(v2);
  return a1;
}

void sub_1C56E0824(_DWORD *a1)
{
  unsigned int v1;
  uint64_t v2;
  void **v3;

  v1 = a1[4];
  if (v1)
  {
    v2 = 104 * v1;
    v3 = (void **)(*(_QWORD *)a1 + 16);
    do
    {
      if (((unint64_t)*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v3 != *(v3 - 1))
        free(*v3);
      v3 += 13;
      v2 -= 104;
    }
    while (v2);
  }
}

void sub_1C56E0888(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 112 * v1;
    v3 = *(_QWORD *)a1 + 88;
    do
    {
      if ((*(_QWORD *)(v3 - 88) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        sub_1C47655E8(v3, *(_QWORD **)(v3 + 8));
        v4 = *(void **)(v3 - 80);
        if ((void *)(v3 - 64) != v4)
          free(v4);
      }
      v3 += 112;
      v2 -= 112;
    }
    while (v2);
  }
}

uint64_t sub_1C56E08FC(uint64_t result)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD **)(result + 16);
  if (v1)
  {
    do
    {
      v4 = result;
      v3 = (_QWORD *)*v1;
      operator delete(v1);
      result = v4;
      v1 = v3;
    }
    while (v3);
  }
  v2 = *(void **)result;
  *(_QWORD *)result = 0;
  if (v2)
  {
    v5 = result;
    operator delete(v2);
    return v5;
  }
  return result;
}

uint64_t sub_1C56E0964(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[4];
      if (v4 != (void *)v2[3])
        free(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

_QWORD *sub_1C56E09C8(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C47A82D8((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C56E0A24(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C56E0A24(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C56E0AD4((uint64_t)a1, v7);
  v9 = 0;
  sub_1C47A82D8((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C56E0AD4(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6294244(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C56E0B8C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)operator new();
  *result = &unk_1E817A230;
  result[1] = v3;
  *a2 = result;
  return result;
}

void sub_1C56E0BD8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_1E817A230;
  v1 = a1[1];
  if (v1)
  {
    sub_1C4EA4BEC((_DWORD *)(v1 + 48));
    sub_1C5428BE0((_DWORD *)(v1 + 24));
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56E0C30(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4)
{
  return llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::invalidate((uint64_t *)(a1 + 8), a2, a3, a4);
}

char *sub_1C56E0C38()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InnerAnalysisManagerProxy<FunctionAnalysisManager, Module>]";
  v10[1] = 114;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x72)
    v1 = 114;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_8[v1];
  v3 = 114 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

_QWORD *sub_1C56E0CF0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(104 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C629468C(a1, v4, &v4[13 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 104 * v10;
    do
    {
      *result = -4096;
      result += 13;
      v11 -= 104;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C56E0DB4(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C56E0E30(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C56E0EC8(a1, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 5;
    v5[2] = v5 + 5;
    v5[3] = 4;
    *((_DWORD *)v5 + 8) = 0;
  }
  return v5;
}

uint64_t sub_1C56E0E30(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 72 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 72 * (v11 & v4));
        v7 = *v6;
        v12 = 1;
        if (*v6 == a3)
          goto LABEL_13;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_13:
  *a4 = v6;
  return v12;
}

_QWORD *sub_1C56E0EC8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C56E0F7C(a1, v6);
  v8 = 0;
  sub_1C56E0E30(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C56E0F7C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C56E1040(a1, v4, v4 + 72 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

void sub_1C56E1040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 72 * v6;
    do
    {
      *v7 = -4096;
      v7 += 9;
      v8 -= 72;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        sub_1C56E0E30(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v15);
        v10 = v15;
        v11 = v15 + 5;
        *v15 = *(_QWORD *)v4;
        v10[1] = v11;
        v12 = *(void **)(v4 + 8);
        v13 = *(void **)(v4 + 16);
        if (v13 == v12)
        {
          v10[2] = v11;
          v14 = *(unsigned int *)(v4 + 28);
          v12 = *(void **)(v4 + 16);
          if ((_DWORD)v14)
          {
            memmove(v11, v12, 8 * v14);
            v13 = *(void **)(v4 + 8);
            v12 = *(void **)(v4 + 16);
          }
        }
        else
        {
          v10[2] = v13;
          *(_QWORD *)(v4 + 16) = v12;
          v13 = v12;
        }
        v10[3] = *(_QWORD *)(v4 + 24);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(v4 + 32);
        *(_QWORD *)(v4 + 24) = 4;
        *(_DWORD *)(v4 + 32) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (v12 != v13)
          free(v12);
      }
      v4 += 72;
    }
    while (v4 != a3);
  }
}

_QWORD *sub_1C56E1168(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(112 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6294998(a1, v4, v4 + 112 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 112 * v10;
    do
    {
      *result = -4096;
      result += 14;
      v11 -= 112;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C56E122C()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;
  int v5;

  v5 = 1;
  v3 = 1;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable virtual function elimination";
  v1.n128_u64[1] = 35;
  sub_1C6294378(&v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED80B5C0, &dword_1C475E000);
}

uint64_t llvm::GlobalOptPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (void *)(a1 + 272);
  v10 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a1)+ 8);
  v11 = v10;
  v8 = v10;
  v9 = v10;
  result = sub_1C56E13A8(a1, v5, (llvm::Constant *)sub_1C56EB37C, (uint64_t)&v10, (uint64_t (*)(uint64_t, _QWORD))sub_1C56EB3A4, (uint64_t)&v9, (uint64_t (*)(_QWORD, _QWORD))sub_1C56EB3CC, (uint64_t)&v8, (uint64_t (*)(uint64_t))sub_1C56EB3F4, (uint64_t)&v11);
  v7 = a3 + 80;
  if ((result & 1) != 0)
  {
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)(a3 + 88) = 0;
    *(_OWORD *)(a3 + 72) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_QWORD *)(a3 + 48) = v7;
    *(_QWORD *)(a3 + 56) = v7;
    *(_DWORD *)(a3 + 64) = 2;
  }
  else
  {
    *(_QWORD *)a3 = a3 + 32;
    *(_QWORD *)(a3 + 8) = a3 + 32;
    *(_QWORD *)(a3 + 16) = 2;
    *(_DWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 48) = v7;
    *(_QWORD *)(a3 + 56) = v7;
    *(_QWORD *)(a3 + 64) = 2;
    *(_DWORD *)(a3 + 72) = 0;
    return (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  return result;
}

uint64_t sub_1C56E13A8(uint64_t a1, void *a2, llvm::Constant *a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD), uint64_t a6, uint64_t (*a7)(_QWORD, _QWORD), uint64_t a8, uint64_t (*a9)(uint64_t), uint64_t a10)
{
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  uint64_t k;
  uint64_t v28;
  uint64_t Comdat;
  unsigned int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t m;
  uint64_t v39;
  uint64_t v40;
  uint64_t n;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  llvm::MemorySSAUpdater *v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _QWORD *v70;
  uint64_t ii;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  char *v90;
  uint64_t jj;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _QWORD *v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  _QWORD *v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  uint64_t Declaration;
  uint64_t **v112;
  void *v113;
  uint64_t NextNonDebugInstruction;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t v119;
  _BYTE *v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  _QWORD *v126;
  _BYTE *v127;
  int v128;
  _BYTE *v129;
  uint64_t ***v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  unsigned __int8 *v134;
  uint64_t **v135;
  uint64_t **v136;
  unsigned int v137;
  uint64_t AttributeAtIndex;
  uint64_t v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t ****v148;
  uint64_t ***v149;
  int v150;
  int v151;
  uint64_t ***v152;
  uint64_t **v153;
  unsigned __int8 *v154;
  uint64_t **v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  void *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v180;
  unsigned int v181;
  uint64_t *v182;
  void *v183;
  uint64_t v184;
  int v185;
  llvm::Constant *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  llvm::UndefValue *v192;
  llvm::UndefValue *v193;
  uint64_t *v194;
  void *v195;
  uint64_t v196;
  uint64_t *v197;
  void *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  unint64_t *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t *v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  int v215;
  llvm::UndefValue *v216;
  llvm::Value *v217;
  BOOL v218;
  llvm::Value *v219;
  int v220;
  uint64_t v221;
  BOOL v222;
  _QWORD *v223;
  uint64_t *v224;
  llvm::Value *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t *v228;
  _QWORD *v229;
  uint64_t *v230;
  int v231;
  uint64_t v232;
  int v233;
  int v234;
  BOOL v235;
  char v236;
  uint64_t v237;
  llvm::Value *v238;
  llvm::Value *v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  uint64_t *v243;
  int v244;
  unsigned int v245;
  int v246;
  BOOL v247;
  unsigned int v248;
  unsigned int v249;
  int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  _QWORD *v254;
  uint64_t *v255;
  _QWORD *v256;
  uint64_t *v257;
  char v258;
  char hasExternalWeakLinkage;
  int v260;
  uint64_t v261;
  llvm::Constant *v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  unsigned __int8 *v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  int v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  unsigned int v285;
  _BYTE *v286;
  _QWORD *v287;
  char *v288;
  size_t v289;
  size_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  llvm::Value *v296;
  BOOL v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t kk;
  uint64_t v302;
  llvm::Type *v303;
  llvm::Value **NullValue;
  uint64_t v305;
  _QWORD *v306;
  _QWORD *v308;
  _QWORD *v309;
  llvm::PointerType *v310;
  llvm::Instruction *v311;
  char v313;
  uint64_t v314;
  llvm::Constant *v315;
  llvm::Type *v316;
  char *v320;
  int v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  char *__p;
  int __pa;
  uint64_t v329;
  _BYTE *v330;
  _BYTE *v331;
  uint64_t v332;
  int v333;
  _BYTE v334[64];
  llvm::Constant *v335;
  uint64_t v336;
  unsigned __int8 *v337;
  uint64_t **v338;
  uint64_t v339;
  __int16 v340;
  void *v341;
  uint64_t v342;
  _BYTE v343[16];
  void *v344[2];
  _BYTE v345[16];
  void *__dst;
  void *v347;
  uint64_t v348;
  int v349;
  _BYTE v350[16];
  uint64_t v351;
  uint64_t v352;
  void *v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  __int16 v358;
  char v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  llvm::GlobalVariable *v363;
  llvm::GlobalVariable *v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  _BYTE v369[32];
  _QWORD *v370;
  uint64_t v371;
  _QWORD v372[6];

  v313 = 0;
  v372[4] = *MEMORY[0x1E0C80C00];
  v10 = v334;
  v335 = a3;
  v336 = a4;
  v11 = a1 + 8;
  v12 = a1 + 24;
  v329 = a1 + 40;
  v330 = v334;
  v331 = v334;
  v332 = 8;
  v333 = 0;
  v316 = (llvm::Type *)(a1 + 272);
  v13 = v334;
  v323 = v11;
  v324 = v12;
  while (1)
  {
    if (v13 != v10)
    {
      if (v332 >= 0x21 && 4 * (HIDWORD(v332) - v333) < v332)
      {
        free(v13);
        v284 = 1 << (33 - __clz(HIDWORD(v332) - v333 - 1));
        v218 = (HIDWORD(v332) - v333) > 0x10;
        v333 = 0;
        if (v218)
          v285 = v284;
        else
          v285 = 32;
        v332 = v285;
        v286 = malloc_type_malloc(8 * v285, 0x4065EBACuLL);
        if (!v286)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v331 = v286;
        memset(v286, 255, 8 * v332);
        goto LABEL_4;
      }
      memset(v13, 255, 8 * v332);
    }
    v333 = 0;
    HIDWORD(v332) = 0;
LABEL_4:
    for (i = *(_QWORD *)(a1 + 16); i != v11; i = *(_QWORD *)(i + 8))
    {
      v15 = i - 56;
      if (!i)
        v15 = 0;
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
      {
        v17 = *(_DWORD *)(v15 + 32) & 0xF;
        v218 = v17 > 8;
        v18 = (1 << v17) & 0x18E;
        v19 = v218 || v18 == 0;
        if (v19 || *(_QWORD *)(v15 + 8))
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v330, v16);
      }
    }
    for (j = *(_QWORD *)(a1 + 32); j != v12; j = *(_QWORD *)(j + 8))
    {
      v21 = j - 56;
      if (!j)
        v21 = 0;
      v22 = *(_QWORD *)(v21 + 48);
      if (v22)
      {
        v23 = *(_DWORD *)(v21 + 32);
        if ((v23 & 0xE) != 2
          && ((v24 = v23 & 0xF, v218 = v24 > 8, v25 = (1 << v24) & 0x182, !v218) ? (v26 = v25 == 0) : (v26 = 1), v26))
        {
LABEL_27:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v330, v22);
        }
        else
        {
          while (1)
          {
            v21 = *(_QWORD *)(v21 + 8);
            if (!v21)
              break;
            if (*(_BYTE *)(*(_QWORD *)(v21 + 24) + 16) != 4)
              goto LABEL_27;
          }
        }
      }
    }
    for (k = *(_QWORD *)(a1 + 48); k != v329; k = *(_QWORD *)(k + 8))
    {
      if (k)
        v28 = k - 48;
      else
        v28 = 0;
      Comdat = llvm::GlobalValue::getComdat(v28);
      if (Comdat)
      {
        v30 = *(_DWORD *)(v28 + 32) & 0xF;
        v218 = v30 > 8;
        v31 = (1 << v30) & 0x18E;
        v32 = v218 || v31 == 0;
        if (v32 || *(_QWORD *)(v28 + 8))
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v330, Comdat);
      }
    }
    v33 = *(_QWORD *)(a1 + 32);
    if (v33 == v12)
    {
      v321 = 0;
    }
    else
    {
      v320 = 0;
      v34 = 0;
      v35 = 0;
      v314 = v336;
      v315 = v335;
      do
      {
        v36 = v33 - 56;
        v19 = v33 == 0;
        v33 = *(_QWORD *)(v33 + 8);
        if (v19)
          v37 = 0;
        else
          v37 = v36;
        for (m = *(_QWORD *)(v37 + 80); m != v37 + 72; m = *(_QWORD *)(m + 8))
        {
          v39 = m - 24;
          if (!m)
            v39 = 0;
          v40 = v39 + 40;
          for (n = *(_QWORD *)(v39 + 48); n != v40; n = *(_QWORD *)(n + 8))
          {
            v42 = n - 24;
            if (!n)
              v42 = 0;
            v43 = *(unsigned __int8 *)(v42 + 16);
            if (v43 == 84)
              v44 = v42;
            else
              v44 = 0;
            if (n)
            {
              if (v43 == 84)
              {
                v45 = *(_QWORD *)(v44 - 32);
                if (*(_BYTE *)(v45 + 16) != 24)
                {
                  if (*(_BYTE *)(v45 + 16))
                    goto LABEL_76;
                  v46 = *(_QWORD *)(v45 + 24);
                  if (v46 != *(_QWORD *)(v44 + 72))
                    goto LABEL_76;
                  if ((*(_DWORD *)(v45 + 32) & 0xFu) - 7 > 1)
                    goto LABEL_76;
                  if (!*(_DWORD *)(v45 + 36))
                  {
                    if (!sub_1C56E74C8(*(_QWORD *)(v44 - 32)))
                      goto LABEL_76;
                    if (*(_DWORD *)(v46 + 8) > 0xFFu)
                      goto LABEL_76;
                    if ((llvm::Function::hasAddressTaken((llvm::Function *)v45, 0, 0, 1, 0, 0) & 1) != 0)
                      goto LABEL_76;
                    v47 = (uint64_t *)a7(a8, v37);
                    if (!sub_1C56E7570(v44, v47))
                      goto LABEL_76;
                  }
                }
              }
            }
          }
        }
        if (v35 >= v320)
        {
          v49 = (v35 - v34) >> 3;
          v50 = v49 + 1;
          v48 = v324;
          if ((unint64_t)(v49 + 1) >> 61)
            abort();
          if ((v320 - v34) >> 2 > v50)
            v50 = (v320 - v34) >> 2;
          if ((unint64_t)(v320 - v34) >= 0x7FFFFFFFFFFFFFF8)
            v51 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v51 = v50;
          if (v51)
          {
            v11 = v323;
            if (v51 >> 61)
              sub_1C4764EE4();
            v52 = (char *)operator new(8 * v51);
          }
          else
          {
            v52 = 0;
            v11 = v323;
          }
          v53 = &v52[8 * v49];
          *(_QWORD *)v53 = v37;
          v54 = v53 + 8;
          while (v35 != v34)
          {
            v55 = *((_QWORD *)v35 - 1);
            v35 -= 8;
            *((_QWORD *)v53 - 1) = v55;
            v53 -= 8;
          }
          v320 = &v52[8 * v51];
          if (v34)
            operator delete(v34);
          v35 = v54;
          v34 = v53;
        }
        else
        {
          *(_QWORD *)v35 = v37;
          v35 += 8;
LABEL_76:
          v11 = v323;
          v48 = v324;
        }
      }
      while (v33 != v48);
      v56 = *(_QWORD *)(a1 + 32);
      if (v56 != v48)
      {
        v321 = 0;
        while (1)
        {
          v57 = *(_QWORD *)(v56 + 8);
          if (v56)
            v58 = v56 - 56;
          else
            v58 = 0;
          v59 = *(_QWORD *)(v58 + 112);
          if (v59 && (*(_BYTE *)(v59 + 14) & 2) != 0)
            goto LABEL_186;
          v60 = *(_DWORD *)(v58 + 20);
          if ((v60 & 0x10000000) == 0)
          {
            if (v56 && *(_BYTE *)(v58 + 16) == 3)
            {
              if ((v60 & 0x7FFFFFF) == 0)
                goto LABEL_111;
            }
            else if (!*(_BYTE *)(v58 + 16) && *(_QWORD *)(v58 + 72) == v58 + 72 && (*(_BYTE *)(v58 + 34) & 0x80) == 0)
            {
              goto LABEL_111;
            }
            if ((*(_DWORD *)(v58 + 32) & 0xFu) - 7 >= 2)
              *(_DWORD *)(v58 + 32) = *(_DWORD *)(v58 + 32) & 0xFFFFBFC0 | 0x4007;
          }
LABEL_111:
          if ((sub_1C56E3434(v58, &v330) & 1) == 0)
          {
            if (v56 && *(_BYTE *)(v58 + 16) == 3)
            {
              if ((*(_DWORD *)(v58 + 20) & 0x7FFFFFF) == 0)
                goto LABEL_116;
LABEL_120:
              v62 = v321;
              if (llvm::removeUnreachableBlocks((llvm *)v58, 0, 0, v61))
              {
                v63 = ((uint64_t (*)(uint64_t, uint64_t))a9)(a10, v58);
                *(_QWORD *)(v63 + 56) = v58;
                sub_1C53BA620(v63, 0);
                v62 = 1;
              }
            }
            else
            {
              if (*(_BYTE *)(v58 + 16) || *(_QWORD *)(v58 + 72) != v58 + 72 || (*(_BYTE *)(v58 + 34) & 0x80) != 0)
                goto LABEL_120;
LABEL_116:
              v62 = v321;
            }
            v64 = v62 | sub_1C56E35D8(v58, a5, a6, v315, v314, a9, a10);
            if ((*(_DWORD *)(v58 + 32) & 0xFu) - 7 > 1)
              goto LABEL_143;
            v65 = *(_QWORD *)(v58 + 112);
            if (!v65)
              goto LABEL_135;
            if (*(char *)(v65 + 32) < 0
              && (llvm::Function::hasAddressTaken((llvm::Function *)v58, 0, 0, 1, 0, 0) & 1) == 0)
            {
              v66 = *(_QWORD *)(v58 + 8);
              if (v66)
              {
                while (1)
                {
                  v67 = *(_QWORD *)(v66 + 24);
                  if (*(_BYTE *)(v67 + 16) == 84 && (*(_WORD *)(v67 + 18) & 3) == 2)
                    break;
                  v66 = *(_QWORD *)(v66 + 8);
                  if (!v66)
                    goto LABEL_130;
                }
              }
              else
              {
LABEL_130:
                sub_1C56E7450(v58, 71);
                v64 = 1;
              }
            }
            v68 = *(_QWORD *)(v58 + 112);
            if (!v68 || (*(_BYTE *)(v68 + 33) & 1) == 0)
            {
LABEL_135:
              if (sub_1C56E74C8(v58)
                && *(_DWORD *)(*(_QWORD *)(v58 + 24) + 8) <= 0xFFu
                && (llvm::Function::hasAddressTaken((llvm::Function *)v58, 0, 0, 1, 0, 0) & 1) == 0)
              {
                v69 = v64;
                v70 = (_QWORD *)a5(a6, v58);
                if (byte_1ED80B700)
                {
LABEL_137:
                  *(_WORD *)(v58 + 18) = *(_WORD *)(v58 + 18) & 0xC00F | 0x90;
                  for (ii = *(_QWORD *)(v58 + 8); ii; ii = *(_QWORD *)(ii + 8))
                  {
                    v72 = *(_QWORD *)(ii + 24);
                    if (*(_BYTE *)(v72 + 16) != 4)
                      *(_WORD *)(v72 + 18) = *(_WORD *)(v72 + 18) & 0xF003 | 0x24;
                  }
                  v64 = 1;
                }
                else
                {
                  if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v70 + 520))(*v70, v58))
                  {
                    v86 = *(_QWORD *)(v58 + 8);
                    if (v86)
                    {
                      while (1)
                      {
                        v87 = *(_QWORD *)(v86 + 24);
                        if (*(_BYTE *)(v87 + 16) != 4)
                        {
                          v88 = *(_QWORD *)(*(_QWORD *)(v87 + 40) + 56);
                          v89 = (uint64_t *)a7(a8, v88);
                          if (!sub_1C56E7570(v87, v89))
                            break;
                          v90 = v35;
                          if (v34 != v35)
                          {
                            v90 = v34;
                            while (*(_QWORD *)v90 != v88)
                            {
                              v90 += 8;
                              if (v90 == v35)
                              {
                                v90 = v35;
                                break;
                              }
                            }
                          }
                          if (v90 == v35)
                            break;
                        }
                        v86 = *(_QWORD *)(v86 + 8);
                        if (!v86)
                          goto LABEL_137;
                      }
                    }
                  }
                  v64 = v69;
                }
              }
              if (sub_1C56E74C8(v58)
                && *(_DWORD *)(*(_QWORD *)(v58 + 24) + 8) <= 0xFFu
                && (llvm::Function::hasAddressTaken((llvm::Function *)v58, 0, 0, 1, 0, 0) & 1) == 0)
              {
                *(_WORD *)(v58 + 18) = *(_WORD *)(v58 + 18) & 0xC00F | 0x80;
                for (jj = *(_QWORD *)(v58 + 8); jj; jj = *(_QWORD *)(jj + 8))
                {
                  v92 = *(_QWORD *)(jj + 24);
                  if (*(_BYTE *)(v92 + 16) != 4)
                    *(_WORD *)(v92 + 18) = *(_WORD *)(v92 + 18) & 0xF003 | 0x20;
                }
                v64 = 1;
              }
              v93 = *(_QWORD *)(v58 + 112);
              v321 = v64;
              if (!v93
                || (*(_BYTE *)(v93 + 26) & 4) == 0
                || (llvm::Function::hasAddressTaken((llvm::Function *)v58, 0, 0, 1, 0, 0) & 1) != 0)
              {
                goto LABEL_186;
              }
              sub_1C56E7450(v58, 18);
              goto LABEL_112;
            }
            if ((llvm::Function::hasAddressTaken((llvm::Function *)v58, 0, 0, 1, 0, 0) & 1) != 0)
            {
LABEL_143:
              v321 = v64;
              goto LABEL_186;
            }
            v73 = *(_QWORD *)(v58 + 8);
            if (v73)
            {
              v74 = *(_QWORD *)(v58 + 8);
              do
              {
                v75 = *(_QWORD *)(v74 + 24);
                if (*(_BYTE *)(v75 + 16) == 84 && (*(_WORD *)(v75 + 18) & 3) == 2)
                  goto LABEL_143;
                v74 = *(_QWORD *)(v74 + 8);
              }
              while (v74);
              while (v73)
              {
                if (*(_BYTE *)(*(_QWORD *)(v73 + 24) + 16) == 33)
                  goto LABEL_143;
                v73 = *(_QWORD *)(v73 + 8);
              }
            }
            sub_1C56E7450(v58, 72);
            v322 = *(uint64_t **)(v58 + 40);
            v76 = (void *)*v322;
            __dst = &v348;
            v347 = (void *)0x200000000;
            v353 = v76;
            v354 = &v362;
            v355 = (uint64_t)&v363;
            v356 = 0;
            v357 = 0;
            v358 = 512;
            v359 = 7;
            v351 = 0;
            v352 = 0;
            v360 = 0;
            v361 = 0;
            v362 = &unk_1E8167888;
            v363 = (llvm::GlobalVariable *)&unk_1E8167A08;
            v77 = *(_QWORD *)(v58 + 8);
            v370 = v372;
            v371 = 0x400000000;
            if (v77)
            {
              v78 = -1;
              v79 = v77;
              do
              {
                v79 = *(_QWORD *)(v79 + 8);
                ++v78;
              }
              while (v79);
              v80 = v78 + 1;
              if (v78 >= 4)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v370, (uint64_t)v372, v78 + 1, 8);
                v81 = v371;
                v83 = v370;
                v82 = v371;
              }
              else
              {
                v81 = 0;
                v82 = 0;
                v83 = v372;
              }
              v84 = &v83[v81];
              do
              {
                *v84++ = *(_QWORD *)(v77 + 24);
                v77 = *(_QWORD *)(v77 + 8);
              }
              while (v77);
              v85 = v370;
            }
            else
            {
              v82 = 0;
              v80 = 0;
              v85 = v372;
            }
            v94 = v82 + v80;
            LODWORD(v371) = v94;
            if (v94)
            {
              v95 = &v85[v94];
              v308 = v95;
              __p = v34;
              while (2)
              {
                v96 = *v85;
                v97 = *(unsigned __int8 *)(*v85 + 16);
                if (v97 >= 0x1C)
                {
                  v98 = v97 - 33;
                  v218 = v98 > 0x33;
                  v99 = (1 << v98) & 0x8000000000041;
                  if (!v218 && v99 != 0)
                  {
                    v365 = &v367;
                    v366 = 0x100000000;
                    v101 = *(_DWORD *)(v96 + 20);
                    if (v101 < 0)
                    {
                      v162 = *(_QWORD *)(v96 - 32 * (v101 & 0x7FFFFFF) - 8);
                      if ((v162 & 0xFFFFFFFF0) == 0)
                        goto LABEL_276;
                      v163 = (v162 >> 4);
                      v164 = v96;
                      do
                      {
                        v165 = *(_DWORD *)(v96 + 20) & 0x7FFFFFF;
                        v166 = v96 - 32 * v165;
                        v167 = (unsigned int *)(v164 - (*(_QWORD *)(v166 - 8) + 32 * v165));
                        v168 = *v167;
                        v169 = v167[1];
                        v170 = *((_QWORD *)v167 - 1);
                        v337 = (unsigned __int8 *)(v166 + 32 * v168);
                        v338 = v169 - v168;
                        v339 = v170;
                        sub_1C623D924((uint64_t)&v365, (uint64_t)&v337);
                        v164 += 16;
                        --v163;
                      }
                      while (v163);
                      if ((_DWORD)v366)
                      {
                        v171 = (uint64_t)v365;
                        v172 = 48 * v366;
                        while (1)
                        {
                          v173 = *(_BYTE *)(v171 + 23);
                          v174 = v173;
                          v175 = v173 & 0x7F;
                          if (v174 < 0)
                            v175 = *(_QWORD *)(v171 + 8);
                          if (v175 == 12)
                          {
                            v176 = v174 >= 0 ? v171 : *(_QWORD *)v171;
                            v177 = *(_QWORD *)v176;
                            v178 = *(_DWORD *)(v176 + 8);
                            if (v177 == 0x636F6C6C61657270 && v178 == 1684370529)
                              break;
                          }
                          v102 = 0;
                          v171 += 48;
                          v172 -= 48;
                          v11 = v323;
                          v48 = v324;
                          if (!v172)
                            goto LABEL_202;
                        }
                        v180 = **(_QWORD **)(v171 + 24);
                        sub_1C534EB68((uint64_t)&v337, (__int128 *)(v171 + 48), (__int128 *)&v365[6 * v366], v171);
                        v181 = v366 - 1;
                        LODWORD(v366) = v181;
                        v182 = &v365[6 * v181];
                        v183 = (void *)v182[3];
                        if (v183)
                        {
                          v365[6 * v181 + 4] = (uint64_t)v183;
                          operator delete(v183);
                        }
                        if (*((char *)v182 + 23) < 0)
                          operator delete((void *)*v182);
                        v11 = v323;
                        v48 = v324;
                        v102 = v180;
                      }
                      else
                      {
LABEL_276:
                        v102 = 0;
                        v11 = v323;
                        v48 = v324;
                      }
                    }
                    else
                    {
                      v102 = 0;
                    }
LABEL_202:
                    v103 = *(_QWORD *)(v102 - 32 * (*(_DWORD *)(v102 + 20) & 0x7FFFFFF));
                    v104 = (unint64_t *)(v103 + 24);
                    if (*(_DWORD *)(v103 + 32) >= 0x41u)
                      v104 = (unint64_t *)*v104;
                    v105 = *v104;
                    v106 = llvm::CallBase::Create((uint64_t ***)v96, (uint64_t)v365, v366, (llvm::Instruction *)v96);
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v96, (llvm::Value *)v106, (llvm::Value *)1);
                    llvm::Value::takeName((llvm::Value *)v106, (llvm::Value *)v96);
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v96 + 40) + 40, (uint64_t ***)v96);
                    v107 = *(_QWORD *)(v96 + 24);
                    v108 = *(_QWORD **)(v96 + 32);
                    *v108 = v107;
                    *(_QWORD *)(v107 + 8) = v108;
                    *(_QWORD *)(v96 + 24) = 0;
                    *(_QWORD *)(v96 + 32) = 0;
                    llvm::Value::deleteValue((llvm::Value *)v96);
                    v109 = 0;
                    v351 = *(_QWORD *)(v102 + 40);
                    v309 = (_QWORD *)(v102 + 24);
                    v352 = v102 + 24;
                    v110 = *(unsigned __int8 **)(v102 + 48);
                    v337 = v110;
                    if (v110)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v337, v110, 2);
                      v109 = v337;
                    }
                    sub_1C4774EF4((uint64_t)&__dst, 0, (uint64_t)v109);
                    if (v337)
                      llvm::MetadataTracking::untrack((uint64_t)&v337, v337);
                    Declaration = llvm::Intrinsic::getDeclaration(v322, 288, 0, 0);
                    if (Declaration)
                      v112 = *(uint64_t ***)(Declaration + 24);
                    else
                      v112 = 0;
                    v340 = 257;
                    v113 = (void *)sub_1C4774778((uint64_t *)&__dst, v112, Declaration, 0, 0, (uint64_t)&v337, 0);
                    NextNonDebugInstruction = llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)v106, 0);
                    v115 = 0;
                    v351 = *(_QWORD *)(NextNonDebugInstruction + 40);
                    v352 = NextNonDebugInstruction + 24;
                    v116 = *(unsigned __int8 **)(NextNonDebugInstruction + 48);
                    v337 = v116;
                    if (v116)
                    {
                      llvm::MetadataTracking::track((uint64_t)&v337, v116, 2);
                      v115 = v337;
                    }
                    sub_1C4774EF4((uint64_t)&__dst, 0, (uint64_t)v115);
                    if (v337)
                      llvm::MetadataTracking::untrack((uint64_t)&v337, v337);
                    v117 = llvm::Intrinsic::getDeclaration(v322, 287, 0, 0);
                    if (v117)
                      v118 = *(uint64_t ***)(v117 + 24);
                    else
                      v118 = 0;
                    v344[0] = v113;
                    v340 = 257;
                    sub_1C4774778((uint64_t *)&__dst, v118, v117, (uint64_t *)v344, 1, (uint64_t)&v337, 0);
                    v344[0] = v345;
                    v344[1] = (void *)0x200000000;
                    sub_1C4848C0C((unsigned int *)v344, v105, 0);
                    v311 = (llvm::Instruction *)v102;
                    v119 = *(_QWORD *)(v102 + 8);
                    v120 = v343;
                    v341 = v343;
                    v342 = 0x200000000;
                    if (v119)
                    {
                      v121 = -1;
                      v122 = v119;
                      do
                      {
                        v122 = *(_QWORD *)(v122 + 8);
                        ++v121;
                      }
                      while (v122);
                      v123 = v121 + 1;
                      if (v121 >= 2)
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v341, (uint64_t)v343, v121 + 1, 8);
                        v124 = v342;
                        v120 = v341;
                        v125 = v342;
                      }
                      else
                      {
                        v124 = 0;
                        v125 = 0;
                      }
                      v126 = &v120[8 * v124];
                      do
                      {
                        *v126++ = *(_QWORD *)(v119 + 24);
                        v119 = *(_QWORD *)(v119 + 8);
                      }
                      while (v119);
                      v127 = v341;
                    }
                    else
                    {
                      v125 = 0;
                      v123 = 0;
                      v127 = v343;
                    }
                    v128 = v125 + v123;
                    LODWORD(v342) = v128;
                    if (v128)
                    {
                      v129 = &v127[8 * v128];
                      while (2)
                      {
                        v130 = *(uint64_t ****)v127;
                        v131 = *(_QWORD *)(*(_QWORD *)v127
                                         - 32 * (*(_DWORD *)(*(_QWORD *)v127 + 20) & 0x7FFFFFF)
                                         + 32);
                        v132 = (_QWORD *)(v131 + 24);
                        if (*(_DWORD *)(v131 + 32) >= 0x41u)
                          v132 = (_QWORD *)*v132;
                        v133 = (_QWORD *)*v132;
                        v134 = (unsigned __int8 *)*((_QWORD *)v344[0] + *v132);
                        if (v134)
                          goto LABEL_232;
                        v137 = *((_DWORD *)*v130 + 2);
                        if ((v137 & 0xFE) == 0x12)
                          v137 = *(_DWORD *)(*(*v130)[2] + 8);
                        v337 = (unsigned __int8 *)v130[8];
                        AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)&v337, -1, 72);
                        if (AttributeAtIndex
                          || (AttributeAtIndex = llvm::CallBase::getFnAttrOnCalledFunction<llvm::Attribute::AttrKind>((uint64_t)v130, 72)) != 0)
                        {
                          v310 = *(llvm::PointerType **)(AttributeAtIndex + 16);
                        }
                        else
                        {
                          v310 = 0;
                        }
                        v139 = llvm::Instruction::getNextNonDebugInstruction(v311, 0);
                        v351 = *(_QWORD *)(v139 + 40);
                        v352 = v139 + 24;
                        v140 = *(unsigned __int8 **)(v139 + 48);
                        v337 = v140;
                        if (v140)
                        {
                          llvm::MetadataTracking::track((uint64_t)&v337, v140, 2);
                          v141 = v337;
                        }
                        else
                        {
                          v141 = 0;
                        }
                        sub_1C4774EF4((uint64_t)&__dst, 0, (uint64_t)v141);
                        if (v337)
                          llvm::MetadataTracking::untrack((uint64_t)&v337, v337);
                        v337 = "paarg";
                        v340 = 259;
                        v142 = (unsigned __int8 *)sub_1C627CF40((uint64_t)&__dst, v310, (llvm::Type *)(v137 >> 8), 0, (uint64_t)&v337);
                        v143 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)*v322 + 1912), 0);
                        if ((*((_BYTE *)v130 + 23) & 0x10) != 0)
                        {
                          v144 = ***v130;
                          v145 = *(_QWORD *)(v144 + 152);
                          v146 = *(unsigned int *)(v144 + 168);
                          if (!(_DWORD)v146)
                            goto LABEL_251;
                          LODWORD(v147) = (v146 - 1) & ((v130 >> 4) ^ (v130 >> 9));
                          v148 = (uint64_t ****)(v145 + 16 * v147);
                          v149 = *v148;
                          if (*v148 != v130)
                          {
                            v150 = 1;
                            while (v149 != (uint64_t ***)-4096)
                            {
                              v151 = v147 + v150++;
                              v147 = v151 & (v146 - 1);
                              v149 = *(uint64_t ****)(v145 + 16 * v147);
                              if (v149 == v130)
                              {
                                v148 = (uint64_t ****)(v145 + 16 * v147);
                                goto LABEL_252;
                              }
                            }
LABEL_251:
                            v148 = (uint64_t ****)(v145 + 16 * v146);
                          }
LABEL_252:
                          v152 = v148[1];
                          v155 = *v152;
                          v154 = (unsigned __int8 *)(v152 + 2);
                          v153 = v155;
                        }
                        else
                        {
                          v153 = 0;
                          v154 = (unsigned __int8 *)&byte_1C871356D;
                        }
                        v340 = 261;
                        v337 = v154;
                        v338 = (uint64_t)v153;
                        v134 = sub_1C4773E38((uint64_t *)&__dst, 49, v142, v143, (uint64_t)&v337);
                        *((_QWORD *)v344[0] + (_QWORD)v133) = v134;
LABEL_232:
                        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v130, (llvm::Value *)v134, (llvm::Value *)1);
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v130[5] + 5), v130);
                        v135 = v130[3];
                        v136 = v130[4];
                        *v136 = (uint64_t *)v135;
                        v135[1] = (uint64_t *)v136;
                        v130[3] = 0;
                        v130[4] = 0;
                        llvm::Value::deleteValue((llvm::Value *)v130);
                        v127 += 8;
                        if (v127 == v129)
                          break;
                        continue;
                      }
                    }
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v311 + 5) + 40, (uint64_t ***)v311);
                    v156 = *((_QWORD *)v311 + 3);
                    v157 = (_QWORD *)*((_QWORD *)v311 + 4);
                    *v157 = v156;
                    *(_QWORD *)(v156 + 8) = v157;
                    *v309 = 0;
                    v309[1] = 0;
                    llvm::Value::deleteValue(v311);
                    if (v341 != v343)
                      free(v341);
                    v34 = __p;
                    if (v344[0] != v345)
                      free(v344[0]);
                    v158 = v365;
                    if ((_DWORD)v366)
                    {
                      v159 = 6 * v366;
                      do
                      {
                        v160 = &v158[v159];
                        v161 = (void *)v158[v159 - 3];
                        if (v161)
                        {
                          *(v160 - 2) = (uint64_t)v161;
                          operator delete(v161);
                        }
                        if (*((char *)v160 - 25) < 0)
                          operator delete((void *)*(v160 - 6));
                        v159 -= 6;
                      }
                      while (v159 * 8);
                      v158 = v365;
                    }
                    if (v158 != &v367)
                      free(v158);
                    v95 = v308;
                  }
                }
                if (++v85 != v95)
                  continue;
                break;
              }
              v85 = v370;
            }
            if (v85 != v372)
              free(v85);
            if (__dst != &v348)
              free(__dst);
          }
LABEL_112:
          v321 = 1;
LABEL_186:
          v56 = v57;
          if (v57 == v48)
            goto LABEL_302;
        }
      }
      v321 = 0;
LABEL_302:
      if (v34)
        operator delete(v34);
    }
    __dst = a2;
    v347 = &v335;
    __pa = llvm::optimizeGlobalCtorsList(a1, (uint64_t (*)(uint64_t))sub_1C56E9B98, (uint64_t)&__dst);
    v184 = *(_QWORD *)(a1 + 16);
    if (v184 != v11)
    {
      v185 = 0;
      v186 = v335;
      v187 = v336;
      while (1)
      {
        v188 = *(_QWORD *)(v184 + 8);
        if (v184)
          v189 = v184 - 56;
        else
          v189 = 0;
        v190 = *(_DWORD *)(v189 + 20);
        v191 = *(unsigned __int8 *)(v189 + 16);
        if ((v190 & 0x10000000) == 0)
        {
          if (!v184 || v191 != 3)
          {
            if (!*(_BYTE *)(v189 + 16) && *(_QWORD *)(v189 + 72) == v189 + 72 && (*(_BYTE *)(v189 + 34) & 0x80) == 0)
              goto LABEL_324;
LABEL_317:
            if ((*(_DWORD *)(v189 + 32) & 0xFu) - 7 >= 2)
              *(_DWORD *)(v189 + 32) = *(_DWORD *)(v189 + 32) & 0xFFFFBFC0 | 0x4007;
            goto LABEL_319;
          }
          if ((v190 & 0x7FFFFFF) != 0)
            goto LABEL_317;
          v191 = 3;
        }
LABEL_319:
        if (v184 && v191 == 3)
        {
          if ((v190 & 0x7FFFFFF) != 0)
            goto LABEL_326;
          goto LABEL_329;
        }
        if (v191)
          goto LABEL_326;
LABEL_324:
        if (*(_QWORD *)(v189 + 72) != v189 + 72 || (*(_BYTE *)(v189 + 34) & 0x80) != 0)
        {
LABEL_326:
          v192 = *(llvm::UndefValue **)(v189 - 32);
          if (v192)
          {
            v193 = llvm::ConstantFoldConstant(*(_QWORD *)(v189 - 32), v316, 0);
            if (v193 != v192)
              llvm::GlobalVariable::setInitializer(v189, v193);
          }
        }
LABEL_329:
        if ((sub_1C56E3434(v189, &v330) & 1) != 0)
          v185 = 1;
        else
          v185 |= sub_1C56E35D8(v189, a5, a6, v186, v187, a9, a10);
        v184 = v188;
        if (v188 == v11)
          goto LABEL_335;
      }
    }
    v185 = 0;
LABEL_335:
    __dst = v350;
    v347 = v350;
    v348 = 4;
    v349 = 0;
    v353 = &v357;
    v354 = &v357;
    v355 = 4;
    LODWORD(v356) = 0;
    v370 = v372;
    v371 = 0x400000000;
    v363 = (llvm::GlobalVariable *)llvm::collectUsedGlobalVariables(a1, (uint64_t)&v370, 0);
    v194 = v370;
    v365 = (uint64_t *)v369;
    v366 = (uint64_t)v369;
    v367 = 4;
    v368 = 0;
    if ((_DWORD)v371)
    {
      v280 = 8 * v371;
      do
      {
        v281 = *v194++;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v365, v281);
        v280 -= 8;
      }
      while (v280);
    }
    if (v347 != __dst)
      free(v347);
    v195 = v365;
    v196 = v366;
    if ((uint64_t *)v366 == v365)
    {
      v347 = __dst;
      if (HIDWORD(v367))
      {
        memmove(__dst, (const void *)v366, 8 * HIDWORD(v367));
        v196 = (uint64_t)v365;
      }
      v195 = (void *)v366;
    }
    else
    {
      v347 = (void *)v366;
      v366 = (uint64_t)v365;
      v196 = (uint64_t)v365;
    }
    v348 = v367;
    v349 = v368;
    v367 = 4;
    v368 = 0;
    if (v195 != (void *)v196)
      free(v195);
    LODWORD(v371) = 0;
    v364 = (llvm::GlobalVariable *)llvm::collectUsedGlobalVariables(a1, (uint64_t)&v370, 1);
    v197 = v370;
    v365 = (uint64_t *)v369;
    v366 = (uint64_t)v369;
    v367 = 4;
    v368 = 0;
    if ((_DWORD)v371)
    {
      v282 = 8 * v371;
      do
      {
        v283 = *v197++;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v365, v283);
        v282 -= 8;
      }
      while (v282);
    }
    if (v354 != v353)
      free(v354);
    v198 = v365;
    v199 = v366;
    if ((uint64_t *)v366 == v365)
    {
      v354 = v353;
      if (HIDWORD(v367))
      {
        memmove(v353, (const void *)v366, 8 * HIDWORD(v367));
        v199 = (uint64_t)v365;
      }
      v198 = (void *)v366;
    }
    else
    {
      v354 = (void *)v366;
      v366 = (uint64_t)v365;
      v199 = (uint64_t)v365;
    }
    v355 = v367;
    LODWORD(v356) = v368;
    v367 = 4;
    v368 = 0;
    if (v198 != (void *)v199)
      free(v198);
    if (v370 != v372)
      free(v370);
    if (v347 == __dst)
      v200 = (uint64_t *)((char *)&v348 + 4);
    else
      v200 = &v348;
    v201 = *(unsigned int *)v200;
    if ((_DWORD)v201)
    {
      v202 = 8 * v201;
      v203 = (uint64_t *)v347;
      while ((unint64_t)*v203 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v203;
        v202 -= 8;
        if (!v202)
          goto LABEL_375;
      }
    }
    else
    {
      v203 = (uint64_t *)v347;
    }
    v204 = (unint64_t *)((char *)v347 + 8 * v201);
    if (v203 != (uint64_t *)v204)
    {
      v205 = *v203;
LABEL_366:
      v206 = sub_1C477672C((uint64_t)&v353, v205);
      if (v354 == v353)
        v207 = (uint64_t *)((char *)&v355 + 4);
      else
        v207 = &v355;
      if (v206 != (_QWORD *)((char *)v354 + 8 * *(unsigned int *)v207))
      {
        *v206 = -2;
        LODWORD(v356) = v356 + 1;
      }
      v208 = (unint64_t *)(v203 + 1);
      while (v208 != v204)
      {
        v209 = *v208++;
        v205 = v209;
        if (v209 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v203 = (uint64_t *)(v208 - 1);
          goto LABEL_366;
        }
      }
    }
LABEL_375:
    v210 = *(_QWORD *)(a1 + 48);
    if (v210 != v329)
    {
      v211 = 0;
      while (1)
      {
        v212 = *(_QWORD *)(v210 + 8);
        if (v210)
          v213 = v210 - 48;
        else
          v213 = 0;
        v214 = *(_DWORD *)(v213 + 20);
        if ((v214 & 0x10000000) == 0)
        {
          if (v210 && *(_BYTE *)(v213 + 16) == 3)
          {
            if ((v214 & 0x7FFFFFF) == 0)
              goto LABEL_390;
          }
          else if (!*(_BYTE *)(v213 + 16) && *(_QWORD *)(v213 + 72) == v213 + 72 && (*(_BYTE *)(v213 + 34) & 0x80) == 0)
          {
            goto LABEL_390;
          }
          if ((*(_DWORD *)(v213 + 32) & 0xFu) - 7 >= 2)
            *(_DWORD *)(v213 + 32) = *(_DWORD *)(v213 + 32) & 0xFFFFBFC0 | 0x4007;
        }
LABEL_390:
        if ((sub_1C56E3434(v213, &v330) & 1) != 0)
          goto LABEL_391;
        v215 = *(_DWORD *)(v213 + 32);
        if (((1 << (v215 & 0xF)) & 0x1EB) == 0
          || (v215 & 0x4000) == 0
          && (*(_DWORD *)(v213 + 32) & 0xFu) - 7 >= 2
          && ((v215 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v213) & 1) != 0))
        {
          goto LABEL_438;
        }
        v216 = *(llvm::UndefValue **)(v213 - 32);
        v217 = llvm::Value::stripPointerCasts(v216);
        v218 = !v217 || *((unsigned __int8 *)v217 + 16) > 3u;
        if (v218)
          goto LABEL_438;
        v219 = v217;
        v220 = *((_DWORD *)v217 + 8);
        if (((1 << (v220 & 0xF)) & 0x1EB) == 0
          || (v220 & 0x4000) == 0
          && (*((_DWORD *)v217 + 8) & 0xFu) - 7 >= 2
          && ((v220 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(v217) & 1) != 0))
        {
          goto LABEL_438;
        }
        llvm::Constant::removeDeadConstantUsers((uint64_t)v219);
        v221 = *(_QWORD *)(v213 + 8);
        if (v221)
        {
          if (*(_QWORD *)(v221 + 8))
          {
            v222 = 1;
            goto LABEL_414;
          }
          v223 = sub_1C477672C((uint64_t)&__dst, v213);
          if (v347 == __dst)
            v224 = (uint64_t *)((char *)&v348 + 4);
          else
            v224 = &v348;
          if (v223 == (_QWORD *)((char *)v347 + 8 * *(unsigned int *)v224))
          {
            v242 = sub_1C477672C((uint64_t)&v353, v213);
            if (v354 == v353)
              v243 = (uint64_t *)((char *)&v355 + 4);
            else
              v243 = &v355;
            v222 = v242 == (_QWORD *)((char *)v354 + 8 * *(unsigned int *)v243);
            goto LABEL_414;
          }
        }
        v222 = 0;
LABEL_414:
        if (sub_1C56EA660(v213, &__dst)
          && (v225 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v213 - 32)),
              (*((_DWORD *)v225 + 8) & 0xFu) - 7 <= 1))
        {
          v226 = (uint64_t)v225;
          v227 = sub_1C477672C((uint64_t)&__dst, (uint64_t)v225);
          if (v347 == __dst)
            v228 = (uint64_t *)((char *)&v348 + 4);
          else
            v228 = &v348;
          if (v227 == (_QWORD *)((char *)v347 + 8 * *(unsigned int *)v228)
            && ((v229 = sub_1C477672C((uint64_t)&v353, v226), v354 != v353)
              ? (v230 = &v355)
              : (v230 = (uint64_t *)((char *)&v355 + 4)),
                v229 == (_QWORD *)((char *)v354 + 8 * *(unsigned int *)v230)))
          {
            v231 = 2;
          }
          else
          {
            v231 = 3;
          }
          v232 = *(_QWORD *)(v226 + 8);
          if (v232)
          {
            v233 = v231 - 1;
            do
            {
              v234 = v233;
              v235 = v233 == 0;
              if (!v233)
                break;
              v232 = *(_QWORD *)(v232 + 8);
              --v233;
            }
            while (v232);
            if (v234)
              v236 = 1;
            else
              v236 = v222;
            if ((v236 & 1) == 0)
              goto LABEL_438;
          }
          else
          {
            v235 = 0;
          }
          if (*(_QWORD *)v216 != *(_QWORD *)v213)
            v216 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v216, *(llvm::Constant **)v213, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v213, v216, (llvm::Value *)1);
          if (!v235)
          {
            llvm::Value::takeName(v219, (llvm::Value *)v213);
            v244 = *(_DWORD *)(v213 + 32);
            v245 = (v244 & 0xF) - 7;
            v246 = *((_DWORD *)v219 + 8);
            v247 = v245 >= 2;
            if (v245 >= 2)
              v248 = *((_DWORD *)v219 + 8);
            else
              v248 = v246 & 0xFFFFFFC0;
            v249 = v248 & 0xFFFFFFF0 | v244 & 0xF;
            *((_DWORD *)v219 + 8) = v249;
            if (!v247
              || (v246 & 0x30) != 0
              && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v219),
                  v249 = *((_DWORD *)v219 + 8),
                  (hasExternalWeakLinkage & 1) == 0))
            {
              v249 |= 0x4000u;
              *((_DWORD *)v219 + 8) = v249;
            }
            v250 = v249 & 0xF;
            v251 = v249 & 0xFFFFBFFF | (((*(_DWORD *)(v213 + 32) >> 14) & 1) << 14);
            *((_DWORD *)v219 + 8) = v251;
            v252 = *(_DWORD *)(v213 + 32) & 0x30;
            v253 = v251 & 0xFFFFFFCF | v252;
            *((_DWORD *)v219 + 8) = v253;
            if ((v250 - 7) < 2
              || v252
              && (v258 = llvm::GlobalValue::hasExternalWeakLinkage(v219), v253 = *((_DWORD *)v219 + 8), (v258 & 1) == 0))
            {
              v253 |= 0x4000u;
              *((_DWORD *)v219 + 8) = v253;
            }
            *((_DWORD *)v219 + 8) = v253 & 0xFFFFFCFF | (((*(_DWORD *)(v213 + 32) >> 8) & 3) << 8);
            v254 = sub_1C477672C((uint64_t)&__dst, v213);
            if (v347 == __dst)
              v255 = (uint64_t *)((char *)&v348 + 4);
            else
              v255 = &v348;
            if (v254 != (_QWORD *)((char *)v347 + 8 * *(unsigned int *)v255))
            {
              *v254 = -2;
              ++v349;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&__dst, (uint64_t)v219);
            }
            v256 = sub_1C477672C((uint64_t)&v353, v213);
            if (v354 == v353)
              v257 = (uint64_t *)((char *)&v355 + 4);
            else
              v257 = &v355;
            if (v256 != (_QWORD *)((char *)v354 + 8 * *(unsigned int *)v257))
            {
              *v256 = -2;
              LODWORD(v356) = v356 + 1;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v353, (uint64_t)v219);
            }
LABEL_445:
            v237 = v213 + 48;
            if (!v210)
              v237 = 0;
            v238 = (llvm::Value *)(v237 - 48);
            if (v210)
              v239 = v238;
            else
              v239 = 0;
            llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList(v329, v239);
            v240 = *((_QWORD *)v239 + 6);
            v241 = (_QWORD *)*((_QWORD *)v239 + 7);
            *v241 = v240;
            *(_QWORD *)(v240 + 8) = v241;
            *((_QWORD *)v239 + 6) = 0;
            *((_QWORD *)v239 + 7) = 0;
            sub_1C6239D9C(v239);
            goto LABEL_391;
          }
        }
        else
        {
          if (!v222)
            goto LABEL_438;
          if (*(_QWORD *)v216 != *(_QWORD *)v213)
            v216 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v216, *(llvm::Constant **)v213, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v213, v216, (llvm::Value *)1);
        }
        if (!sub_1C56EA660(v213, &__dst))
          goto LABEL_445;
LABEL_391:
        v211 = 1;
LABEL_438:
        v210 = v212;
        if (v212 == v329)
          goto LABEL_479;
      }
    }
    v211 = 0;
LABEL_479:
    if (v363)
      sub_1C56EA6FC(v363, (uint64_t)&__dst);
    v12 = v324;
    if (v364)
      sub_1C56EA6FC(v364, (uint64_t)&v353);
    if (v354 != v353)
      free(v354);
    if (v347 != __dst)
      free(v347);
    v260 = v321 | __pa | v185 | v211;
    v261 = *(_QWORD *)(a1 + 32);
    if (v261 == v324)
      goto LABEL_494;
    v262 = v335;
    v263 = v336;
    v264 = v261 ? v261 - 56 : 0;
    v265 = (_QWORD *)((uint64_t (*)(uint64_t, uint64_t))v335)(v336, v264);
    LODWORD(__dst) = 76;
    if ((*(_BYTE *)(v265[1] + 9) & 0x10) != 0)
      goto LABEL_494;
    if ((*(_BYTE *)(*v265 + 19) & 3) == 0)
      goto LABEL_494;
    v266 = (unsigned __int8 *)sub_1C56EAC88(v265, 0x4Cu);
    v268 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), v266, v267);
    if (!v268)
      goto LABEL_494;
    v270 = v268;
    if (*(_BYTE *)(v268 + 16))
      goto LABEL_494;
    v271 = (uint64_t *)((uint64_t (*)(uint64_t, uint64_t))v262)(v263, v268);
    if ((*(_BYTE *)(v270 + 33) & 0x20) != 0)
      goto LABEL_494;
    if ((*(_BYTE *)(v270 + 23) & 0x10) == 0)
    {
      v289 = 0;
      v288 = &byte_1C871356D;
      goto LABEL_526;
    }
    v272 = ***(_QWORD ***)v270;
    v273 = *(_QWORD *)(v272 + 152);
    v274 = *(unsigned int *)(v272 + 168);
    if (!(_DWORD)v274)
      goto LABEL_524;
    LODWORD(v275) = (v274 - 1) & ((v270 >> 4) ^ (v270 >> 9));
    v276 = (uint64_t *)(v273 + 16 * v275);
    v277 = *v276;
    if (*v276 != v270)
    {
      v278 = 1;
      while (v277 != -4096)
      {
        v279 = v275 + v278++;
        v275 = v279 & (v274 - 1);
        v277 = *(_QWORD *)(v273 + 16 * v275);
        if (v277 == v270)
        {
          v276 = (uint64_t *)(v273 + 16 * v275);
          goto LABEL_525;
        }
      }
LABEL_524:
      v276 = (uint64_t *)(v273 + 16 * v274);
    }
LABEL_525:
    v287 = (_QWORD *)v276[1];
    v290 = *v287;
    v288 = (char *)(v287 + 2);
    v289 = v290;
LABEL_526:
    v291 = *v271;
    if (llvm::TargetLibraryInfoImpl::getLibFunc((int)v271, v288, v289, &__dst))
    {
      v292 = (int)__dst;
      if (llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v291, *(_QWORD *)(v270 + 24), (int)__dst))
      {
        if (v292 == 76)
          break;
      }
    }
LABEL_494:
    if ((v260 & 1) == 0)
      goto LABEL_557;
LABEL_495:
    v313 = 1;
    v10 = v330;
    v13 = v331;
  }
  v293 = *(_QWORD *)(v270 + 8);
  if (v293)
  {
    v294 = 0;
    do
    {
      v295 = *(_QWORD *)(v293 + 24);
      v293 = *(_QWORD *)(v293 + 8);
      if (v295 && *(_BYTE *)(v295 + 16) == 84)
      {
        v296 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v295 - 32 * (*(_DWORD *)(v295 + 20) & 0x7FFFFFF)));
        v297 = v296 && *((_BYTE *)v296 + 16) == 0;
        if (v297
          && (*((llvm::Value **)v296 + 9) != (llvm::Value *)((char *)v296 + 72) || (*((_BYTE *)v296 + 34) & 0x80) != 0))
        {
          v298 = *((_QWORD *)v296 + 10);
          if (v298)
            v299 = v298 - 24;
          else
            v299 = 0;
          v300 = v299 + 40;
          for (kk = *(_QWORD *)(v299 + 48); kk != v300; kk = *(_QWORD *)(kk + 8))
          {
            if (kk)
              v302 = kk - 24;
            else
              v302 = 0;
            if (!sub_1C4D99D08(v302) && !sub_1C509DDB0(v302))
            {
              if (*(_BYTE *)(v302 + 16) == 29)
              {
                NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v295, v303);
                v294 = 1;
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v295, (llvm::Value *)NullValue, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v295 + 40) + 40, (uint64_t ***)v295);
                v305 = *(_QWORD *)(v295 + 24);
                v306 = *(_QWORD **)(v295 + 32);
                *v306 = v305;
                *(_QWORD *)(v305 + 8) = v306;
                *(_QWORD *)(v295 + 24) = 0;
                *(_QWORD *)(v295 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v295);
              }
              break;
            }
          }
        }
      }
    }
    while (v293);
  }
  else
  {
    v294 = 0;
  }
  v11 = v323;
  v12 = v324;
  if (((v260 | v294) & 1) != 0)
    goto LABEL_495;
LABEL_557:
  if (v331 != v330)
    free(v331);
  return v313 & 1;
}

void llvm::initializeGlobalOptLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E90);
  if (v2 != -1)
  {
    v5[0] = sub_1C56E32C0;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E90, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56E32C0(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, v2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Global Variable Optimizer";
  *(_QWORD *)(v3 + 8) = 25;
  *(_QWORD *)(v3 + 16) = "globalopt";
  *(_QWORD *)(v3 + 24) = 9;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F32C8;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C56EADA8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C56E336C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32C8;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817A298;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831E90);
  if (v3 != -1)
  {
    v7[0] = sub_1C56E32C0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831E90, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C56E3434(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v6;
  uint64_t AliaseeObject;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  int v15;
  unsigned int v16;

  llvm::Constant::removeDeadConstantUsers(a1);
  v4 = *(_DWORD *)(a1 + 32);
  if ((v4 & 0xFu) > 8 || ((1 << (v4 & 0xF)) & 0x18E) == 0)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      if (*(_BYTE *)(a1 + 16) != 3 || (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) != 0)
        return 0;
    }
    else
    {
      result = 0;
      if ((v4 & 0x800000) != 0 || *(_QWORD *)(a1 + 72) != a1 + 72)
        return result;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 == 2)
    goto LABEL_41;
  AliaseeObject = a1;
  if (v6 != 1 || (AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)a1)) != 0)
  {
    v8 = *(_QWORD *)(AliaseeObject + 48);
    if (v8 && (*(_DWORD *)(a1 + 32) & 0xFu) - 7 >= 2)
    {
      v9 = sub_1C477672C((uint64_t)a2, v8);
      v10 = a2[1];
      v11 = v10 == *a2 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
      if (v9 != (_QWORD *)(v10 + 8 * *v11))
        return 0;
    }
  }
  if (*(_BYTE *)(a1 + 16))
  {
LABEL_41:
    if (*(_QWORD *)(a1 + 8))
      return 0;
    goto LABEL_32;
  }
  if (*(_QWORD *)(a1 + 72) == a1 + 72)
  {
    v15 = *(_DWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 8);
    v14 = v13 == 0;
    if ((v15 & 0x800000) == 0 && !v13)
    {
LABEL_32:
      llvm::GlobalValue::eraseFromParent((llvm::GlobalValue *)a1);
      return 1;
    }
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = v13 == 0;
    v15 = *(_DWORD *)(a1 + 32);
  }
  if ((v15 & 0xE) == 2 || (result = 0, v16 = v15 & 0xF, v16 <= 8) && ((1 << v16) & 0x182) != 0)
  {
    if (!v14)
    {
      while (*(_BYTE *)(*(_QWORD *)(v13 + 24) + 16) == 4)
      {
        v13 = *(_QWORD *)(v13 + 8);
        if (!v13)
          goto LABEL_32;
      }
      return 0;
    }
    goto LABEL_32;
  }
  return result;
}

uint64_t sub_1C56E35D8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3, llvm::Constant *a4, uint64_t a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  const llvm::Constant *v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  llvm::Constant *v32;
  const llvm::APInt *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  _BOOL4 v41;
  _BOOL4 v42;
  unsigned int v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _QWORD *v52;
  llvm::Constant *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  _BOOL4 v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  _BOOL4 v69;
  int v70;
  char *v71;
  llvm *v72;
  uint64_t v73;
  llvm::PointerType *v74;
  char v75;
  unsigned int v76;
  llvm::Value *v77;
  llvm::UndefValue *v78;
  llvm::GlobalVariable *v79;
  llvm::Value *v81;
  llvm::Constant *v82;
  uint64_t v83;
  unsigned int v84;
  _BOOL4 v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  int v92;
  char v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unsigned int v99;
  BOOL v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  const llvm::APInt *v105;
  uint64_t v106;
  void **v107;
  int v108;
  uint64_t v109;
  void **v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  int v136;
  uint64_t *v137;
  int v138;
  int64_t v139;
  unint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  const llvm::Constant *v144;
  unsigned int v145;
  unsigned int v146;
  _QWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  int v150;
  BOOL v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  _QWORD *v157;
  int v158;
  BOOL v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  BOOL v165;
  unsigned int v166;
  _QWORD *v167;
  uint64_t v168;
  unint64_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  BOOL v180;
  const char *v181;
  char v182;
  char v183;
  uint64_t v184;
  uint64_t *v185;
  const llvm::Value **v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  llvm::PointerType *v196;
  _DWORD *v197;
  llvm::Value *v198;
  llvm::Instruction *v199;
  llvm::Type *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  llvm::Constant **v205;
  llvm::Constant *v206;
  int v207;
  int v208;
  llvm::Constant *v209;
  char *v210;
  void *v211;
  void *v212;
  _DWORD *v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t **v217;
  uint64_t **v218;
  uint64_t *v219;
  llvm::Instruction **v220;
  uint64_t v221;
  llvm::Instruction *v222;
  char *AsInstruction;
  int v224;
  uint64_t v225;
  unsigned int v226;
  BOOL v227;
  uint64_t v229;
  uint64_t v230;
  int v231;
  const llvm::APInt *v232;
  char *v233;
  llvm::Value *v234;
  llvm::Constant *v235;
  uint64_t *v236;
  uint64_t v237;
  llvm::PointerType *v238;
  llvm::ValueHandleBase *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  llvm::Constant **v244;
  llvm::Constant *v245;
  int v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  int v251;
  BOOL v252;
  const char *v253;
  const llvm::DataLayout *v254;
  char v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  uint64_t v259;
  uint64_t *v260;
  int v261;
  llvm::UndefValue *InitialValueOfAllocation;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  char v269;
  BOOL v270;
  uint64_t v271;
  int v272;
  unint64_t *v273;
  llvm::Type **v274;
  unint64_t v275;
  llvm::Constant ***v276;
  void *v277;
  llvm::UndefValue *v278;
  void *v279;
  unsigned int v280;
  _QWORD *v281;
  uint64_t v282;
  _QWORD *v283;
  int v284;
  BOOL v285;
  unsigned int v286;
  _QWORD *v287;
  _QWORD *v288;
  unint64_t *v289;
  unint64_t v290;
  char v291;
  char v292;
  const char *v293;
  unint64_t v294;
  char *v295;
  unint64_t v296;
  _DWORD *v297;
  void *v298;
  uint64_t v299;
  unsigned int v300;
  _QWORD *v301;
  void *v302;
  _QWORD *v303;
  int v304;
  uint64_t v305;
  BOOL v306;
  unsigned int v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t **v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  llvm::Constant **v316;
  llvm::Constant *v317;
  int v318;
  int v319;
  llvm::Constant *v320;
  char *v321;
  char *v322;
  char *v323;
  llvm::GlobalObject *v324;
  unsigned int v325;
  _QWORD *v326;
  void *v327;
  _QWORD *v328;
  int v329;
  BOOL v330;
  unsigned int v331;
  _QWORD *v332;
  _QWORD *v333;
  unsigned int v334;
  unsigned __int8 v335;
  const char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  llvm::MDNode *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v346;
  _QWORD *v347;
  llvm::MDNode *Impl;
  char v349;
  uint64_t v350;
  _QWORD *v351;
  llvm::MDNode *v352;
  uint64_t v353;
  uint64_t v354;
  char v355;
  uint64_t v356;
  unsigned int v357;
  uint64_t v358;
  unsigned int v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  char v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  unsigned int v370;
  _QWORD *v371;
  uint64_t v372;
  _QWORD *v373;
  int v374;
  BOOL v375;
  unsigned int v376;
  _QWORD *v377;
  int v378;
  unint64_t *v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  uint64_t *v383;
  unint64_t v384;
  int32x2_t ****v385;
  int32x2_t *v386;
  unint64_t v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t v390;
  int32x2_t *****v391;
  int32x2_t ****v392;
  int v393;
  int v394;
  unsigned int v395;
  uint64_t v396;
  _QWORD *v398;
  uint64_t v399;
  uint64_t *v400;
  unsigned __int8 v401;
  unsigned __int8 v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t **v405;
  uint64_t v406;
  void (**v407)(void);
  _QWORD *v408;
  _QWORD *v409;
  uint64_t v410;
  llvm::Constant *v411;
  char *v412;
  void *v413;
  void *v414;
  llvm::GlobalObject *v415;
  uint64_t v416;
  llvm::ValueSymbolTable *v417;
  uint64_t v418;
  const llvm::APInt *v419;
  unint64_t *v420;
  unsigned int v421;
  int v422;
  unsigned int v423;
  BOOL v424;
  llvm::MDNode **v425;
  uint64_t v426;
  llvm::MDNode *v427;
  uint64_t v428;
  uint64_t ***v429;
  uint64_t v430;
  _BOOL8 v432;
  uint64_t v433;
  llvm::ConstantInt *v434;
  unint64_t v435;
  unint64_t v436;
  llvm::ValueHandleBase *v437;
  _DWORD *v438;
  _DWORD *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t ****v445;
  uint64_t ***v446;
  int v447;
  int v448;
  _DWORD *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t *v454;
  uint64_t v455;
  int v456;
  int v457;
  int v458;
  llvm::ValueHandleBase **v459;
  uint64_t ***v460;
  uint64_t **v461;
  char *v462;
  uint64_t **v463;
  uint64_t v464;
  char *v465;
  unsigned __int8 **v466;
  uint64_t **v467;
  uint64_t **v468;
  unsigned __int8 *v469;
  void **v470;
  unsigned __int8 *v471;
  unsigned __int8 *v472;
  unsigned __int8 *v473;
  unsigned __int8 **v474;
  unsigned __int8 *v475;
  _QWORD *v476;
  void *v477;
  char *v478;
  void *v479;
  uint64_t v480;
  char *v481;
  unsigned __int8 *v482;
  unsigned __int8 *v483;
  uint64_t *v484;
  unsigned __int8 *v485;
  unsigned __int8 *v486;
  uint64_t **v487;
  uint64_t **v488;
  _QWORD *v489;
  _QWORD *v490;
  int v491;
  uint64_t v492;
  _QWORD *v493;
  unsigned int v494;
  char *v495;
  uint64_t v496;
  uint64_t *v497;
  uint64_t v498;
  _QWORD *v499;
  const char *v500;
  unint64_t v501;
  llvm::MDNode *v502;
  llvm::MDNode *v503;
  llvm::ConstantInt *v504;
  unsigned int v505;
  uint64_t v506;
  char v507;
  uint64_t v508;
  uint64_t v509;
  unsigned int v510;
  uint64_t v512;
  int v513;
  llvm::UndefValue *v514;
  llvm::UndefValue *v515;
  char *v516;
  llvm::Value *v517;
  uint64_t v518;
  llvm::Type *v519;
  llvm::UndefValue *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  llvm::Constant **v525;
  llvm::Constant *v526;
  int v527;
  int v528;
  llvm::Constant *v529;
  char *v530;
  void *v531;
  void *v532;
  uint64_t v533;
  BOOL v534;
  uint64_t v535;
  const llvm::APInt *v536;
  llvm::ConstantInt *v537;
  unsigned int v538;
  unint64_t v539;
  uint64_t *v540;
  uint64_t v541;
  llvm::Value *v542;
  uint64_t *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  _DWORD *v547;
  uint64_t v548;
  uint64_t v549;
  _QWORD *v550;
  char *v551;
  const llvm::APInt *v552;
  llvm::GlobalVariable *v553;
  uint64_t *v554;
  uint64_t v555;
  llvm::PointerType *v556;
  llvm::ValueHandleBase *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  llvm::Constant **v562;
  llvm::Constant *v563;
  int v564;
  int v565;
  llvm::Constant *v566;
  char *v567;
  void *v568;
  void *v569;
  unsigned int v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  BOOL v574;
  uint64_t v575;
  void **v576;
  uint64_t *v577;
  uint64_t v578;
  _DWORD *v579;
  uint64_t v580;
  const llvm::APInt *v581;
  llvm::ValueHandleBase *Bool;
  uint64_t v583;
  _DWORD *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  llvm::GlobalVariable **v589;
  llvm::GlobalVariable *v590;
  int v591;
  int v592;
  llvm::UndefValue *v593;
  uint64_t v594;
  uint64_t v595;
  _QWORD *v596;
  uint64_t v597;
  llvm::GlobalVariable *v598;
  void *v599;
  char *v600;
  void *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  _QWORD *v605;
  uint64_t v606;
  uint64_t v607;
  _QWORD *v608;
  uint64_t v609;
  uint64_t v610;
  llvm::Value *v611;
  int v612;
  unsigned int v613;
  uint64_t v614;
  char *v615;
  uint64_t v616;
  _QWORD *v617;
  uint64_t *v618;
  uint64_t v619;
  uint64_t v620;
  unint64_t *v621;
  char *v622;
  unint64_t v623;
  uint64_t v624;
  uint64_t v625;
  BOOL v626;
  llvm::UndefValue *v627;
  uint64_t v628;
  _QWORD *v629;
  unint64_t *v630;
  unint64_t v631;
  _QWORD *v632;
  uint64_t v633;
  llvm::ConstantInt *v634;
  unint64_t v635;
  uint64_t v636;
  char *v637;
  llvm::DIExpression *v638;
  llvm *v639;
  llvm *v640;
  llvm *v641;
  unint64_t *v642;
  _BOOL4 v643;
  unint64_t v644;
  _QWORD *v645;
  unint64_t v646;
  uint64_t **v647;
  _BOOL4 v648;
  _QWORD *v649;
  _QWORD *v650;
  _QWORD *v651;
  _BOOL4 v652;
  _QWORD *v653;
  _BOOL4 v654;
  char *v655;
  uint64_t v656;
  unsigned int v657;
  unint64_t *v658;
  char *v659;
  unsigned int v660;
  unsigned int v661;
  unsigned int v662[2];
  unsigned int v663[2];
  unsigned int v664[2];
  unint64_t *v665;
  uint64_t v666;
  llvm::PointerType *v667;
  unint64_t v668;
  unsigned int v669[2];
  uint64_t *v670;
  const llvm::APInt *v671;
  llvm::Type *v672;
  const llvm::APInt *v673;
  const llvm::APInt *v674;
  _QWORD *v675;
  int v676;
  llvm::APInt *v677;
  llvm::APInt *v678;
  llvm::APInt *v679;
  llvm::APInt *v680;
  llvm::DataLayout *v681;
  llvm::APInt *v682;
  llvm::Constant *v683;
  llvm::Constant *v684;
  llvm::Constant *v685;
  void *__p;
  void *__pa;
  uint64_t __pb;
  int __pc;
  char *__pd;
  llvm::Constant *v691;
  llvm::Constant *v692;
  uint64_t *v693;
  llvm::Constant *v694;
  _DWORD v695[7];
  int v696;
  uint64_t v697;
  unint64_t v698;
  unint64_t *v699;
  int32x2_t ****v700;
  uint64_t v701;
  char *v702;
  uint64_t v703;
  int v704;
  _WORD v705[64];
  _QWORD *v706;
  uint64_t v707;
  unsigned int v708;
  _QWORD v709[2];
  int v710;
  _QWORD *v711;
  uint64_t v712;
  unsigned int v713;
  unsigned __int8 *v714[3];
  unsigned __int8 **v715;
  void *v716;
  void *v717;
  uint64_t v718;
  uint64_t v719;
  _QWORD v720[2];
  __int128 v721;
  _QWORD *v722;
  uint64_t v723;
  void *v724;
  uint64_t v725;
  _BYTE v726[128];
  void *v727;
  uint64_t v728;
  _QWORD v729[34];

  v729[32] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v14 = ***(_QWORD ***)a1;
    v15 = *(_QWORD *)(v14 + 152);
    v16 = *(unsigned int *)(v14 + 168);
    if ((_DWORD)v16)
    {
      LODWORD(v17) = (v16 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v18 = (uint64_t *)(v15 + 16 * v17);
      v19 = *v18;
      if (*v18 == a1)
      {
LABEL_9:
        v22 = v18[1];
        if (*(_QWORD *)v22 >= 5uLL)
        {
          v23 = *(_DWORD *)(v22 + 16);
          v24 = *(unsigned __int8 *)(v22 + 20);
          v25 = v23 == 1836477548 && v24 == 46;
          if (v25)
            return 0;
        }
        goto LABEL_14;
      }
      v20 = 1;
      while (v19 != -4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v16 - 1);
        v19 = *(_QWORD *)(v15 + 16 * v17);
        if (v19 == a1)
        {
          v18 = (uint64_t *)(v15 + 16 * v17);
          goto LABEL_9;
        }
      }
    }
    v18 = (uint64_t *)(v15 + 16 * v16);
    goto LABEL_9;
  }
LABEL_14:
  LOWORD(v695[0]) = 0;
  v696 = 0;
  memset(&v695[1], 0, 21);
  v716 = v720;
  v717 = v720;
  v718 = 16;
  LODWORD(v719) = 0;
  v27 = sub_1C5EFF444(a1, (uint64_t)v695, (llvm::SmallPtrSetImplBase *)&v716);
  if (v717 == v716)
  {
    if ((v27 & 1) != 0)
      return 0;
  }
  else
  {
    free(v717);
    if ((v27 & 1) != 0)
      return 0;
  }
  v28 = 0;
  v29 = *(_DWORD *)(a1 + 32);
  if (!LOBYTE(v695[0]) && (*(_DWORD *)(a1 + 32) & 0xC0) != 0x80)
  {
    if ((*(_DWORD *)(a1 + 32) & 0xFu) - 7 >= 2)
      v30 = 1;
    else
      v30 = 2;
    if (v30 == v29 >> 6)
    {
      v28 = 0;
    }
    else
    {
      v29 = v29 & 0xFFFFFF3F | (v30 << 6);
      *(_DWORD *)(a1 + 32) = v29;
      v28 = 1;
    }
  }
  if ((v29 & 0xF) - 7 > 1)
    return v28;
  v31 = *(unsigned __int8 *)(a1 + 16);
  v32 = v31 == 3 ? (llvm::Constant *)a1 : 0;
  if (v31 != 3 || (*(_BYTE *)(a1 + 80) & 1) != 0 || (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0)
    return v28;
  v691 = a4;
  v33 = (const llvm::APInt *)(*(_QWORD *)(a1 + 40) + 272);
  if (!LOBYTE(v695[6]))
  {
    v26 = *(const llvm::Constant **)&v695[4];
    if (*(_QWORD *)&v695[4])
    {
      if ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 8) & 0xFE) == 0x12
        || (v35 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8), v35 <= 0x15) && ((1 << v35) & 0x20AC7F) != 0)
      {
        if ((*(_BYTE *)(a1 + 80) & 2) == 0 && *(_DWORD *)(*(_QWORD *)a1 + 8) <= 0xFFu)
        {
          v36 = *(_QWORD *)(a1 + 8);
          if (v36)
          {
            v37 = *(_QWORD *)(a1 + 8);
            do
            {
              v38 = *(_QWORD *)(v37 + 24);
              v39 = *(unsigned __int8 *)(v38 + 16);
              if (v39 <= 0x1B)
              {
                if (v39 != 5)
                  goto LABEL_34;
                while (1)
                {
                  v38 = *(_QWORD *)(v38 + 8);
                  if (!v38)
                    break;
                  if (*(unsigned __int8 *)(*(_QWORD *)(v38 + 24) + 16) <= 0x1Bu)
                    goto LABEL_34;
                }
              }
              v37 = *(_QWORD *)(v37 + 8);
            }
            while (v37);
          }
          v96 = *(_QWORD *)(*(_QWORD *)&v695[4] + 112);
          if (v96)
          {
            if ((*(_BYTE *)(v96 + 15) & 0x40) != 0)
            {
              __pa = (void *)a5;
              v716 = &v718;
              v717 = (void *)0x400000000;
              v97 = v729;
              v727 = v729;
              v728 = 0x400000000;
              v684 = v32;
              if (v36)
              {
                while (1)
                {
                  v98 = *(_QWORD *)(v36 + 24);
                  v99 = *(unsigned __int8 *)(v98 + 16);
                  v100 = v98 && v99 > 0x1B;
                  if (!v100)
                    break;
                  switch(v99)
                  {
                    case '<':
                      v109 = v717;
                      v110 = &v716;
                      if (v717 >= (unint64_t)HIDWORD(v717))
                      {
                        v651 = v97;
                        v680 = v26;
                        v112 = v36;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v716, (uint64_t)&v718, v717 + 1, 8);
                        v36 = v112;
                        v26 = v680;
                        v97 = v651;
                        v109 = v717;
                      }
                      break;
                    case '=':
                      v109 = v728;
                      v110 = &v727;
                      if (v728 >= (unint64_t)HIDWORD(v728))
                      {
                        v111 = v97;
                        v679 = v26;
                        *(_QWORD *)v664 = v36;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v727, (uint64_t)v97, v728 + 1, 8);
                        v36 = *(_QWORD *)v664;
                        v26 = v679;
                        v97 = v111;
                        v109 = v728;
                      }
                      break;
                    case 'M':
LABEL_130:
                      v102 = *(_QWORD *)(v98 + 8);
                      if (v102)
                      {
                        while (1)
                        {
                          v103 = *(_QWORD *)(v102 + 24);
                          v104 = *(unsigned __int8 *)(v103 + 16);
                          if (v103 && v104 == 60)
                          {
                            v105 = v33;
                            v106 = v717;
                            v107 = &v716;
                            if (v717 >= (unint64_t)HIDWORD(v717))
                            {
                              v649 = v97;
                              v677 = v26;
                              *(_QWORD *)v662 = v36;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v716, (uint64_t)&v718, v717 + 1, 8);
                              v36 = *(_QWORD *)v662;
                              v26 = v677;
                              v97 = v649;
                              v106 = v717;
                            }
                          }
                          else
                          {
                            v108 = 0;
                            if (!v103 || v104 != 61)
                              goto LABEL_313;
                            v105 = v33;
                            v106 = v728;
                            v107 = &v727;
                            if (v728 >= (unint64_t)HIDWORD(v728))
                            {
                              v650 = v97;
                              v678 = v26;
                              *(_QWORD *)v663 = v36;
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v727, (uint64_t)v97, v728 + 1, 8);
                              v36 = *(_QWORD *)v663;
                              v26 = v678;
                              v97 = v650;
                              v106 = v728;
                            }
                          }
                          *((_QWORD *)*v107 + v106) = v103;
                          ++*((_DWORD *)v107 + 2);
                          v102 = *(_QWORD *)(v102 + 8);
                          v33 = v105;
                          if (!v102)
                            goto LABEL_147;
                        }
                      }
                      goto LABEL_147;
                    default:
                      goto LABEL_307;
                  }
                  *((_QWORD *)*v110 + v109) = v98;
                  ++*((_DWORD *)v110 + 2);
LABEL_147:
                  v36 = *(_QWORD *)(v36 + 8);
                  if (!v36)
                    goto LABEL_291;
                }
                if (v98)
                  v101 = v99 == 5;
                else
                  v101 = 0;
                if (!v101 || *(_WORD *)(v98 + 18) != 49)
                {
LABEL_307:
                  v108 = 0;
                  goto LABEL_313;
                }
                goto LABEL_130;
              }
LABEL_291:
              v653 = v97;
              v682 = (llvm::APInt *)a6(a7);
              if (v728 * (unint64_t)v717 <= 0x64)
              {
                if ((_DWORD)v717)
                {
                  v647 = (uint64_t **)v716;
                  v640 = (llvm *)((char *)v716 + 8 * v717);
                  v674 = v33;
                  v184 = (uint64_t)v33;
                  while (1)
                  {
                    v643 = v728 != 0;
                    if (!(_DWORD)v728)
                      break;
                    v185 = *v647;
                    v666 = **v647;
                    v186 = (const llvm::Value **)v727;
                    v187 = 8 * v728;
                    while (1)
                    {
                      v188 = **((_QWORD **)*v186 - 8);
                      if (llvm::DominatorTree::dominates(v682, *v186, (const llvm::Instruction *)v185))
                      {
                        sub_1C4768AD0(v184, v666);
                        v190 = (unint64_t)(v189 + 7) >> 3;
                        sub_1C4768AD0(v184, v188);
                        if (v190 <= (unint64_t)(v191 + 7) >> 3)
                          break;
                      }
                      ++v186;
                      v187 -= 8;
                      if (!v187)
                        goto LABEL_306;
                    }
                    v97 = v653;
                    ++v647;
                    v33 = v674;
                    v108 = v643;
                    if (v647 == (uint64_t **)v640)
                      goto LABEL_313;
                  }
LABEL_306:
                  v108 = 0;
                  v33 = v674;
                }
                else
                {
                  v108 = 1;
                }
              }
              else
              {
                v108 = 0;
              }
              v97 = v653;
LABEL_313:
              if (v727 != v97)
                free(v727);
              v32 = v684;
              a5 = (uint64_t)__pa;
              if (v716 != &v718)
                free(v716);
              if (v108)
              {
                v192 = *(_QWORD *)(a1 + 40);
                v193 = *(_QWORD *)(*(_QWORD *)&v695[4] + 80);
                if (v193)
                  v194 = v193 - 24;
                else
                  v194 = 0;
                v195 = *(_QWORD *)(v194 + 48);
                v196 = *(llvm::PointerType **)(a1 + 24);
                v197 = operator new(0x68uLL);
                v198 = (llvm::Value *)(v197 + 8);
                v197[13] = v197[13] & 0x38000000 | 1;
                *(_QWORD *)v197 = 0;
                *((_QWORD *)v197 + 1) = 0;
                *((_QWORD *)v197 + 2) = 0;
                *((_QWORD *)v197 + 3) = v197 + 8;
                if (v195)
                  v199 = (llvm::Instruction *)(v195 - 24);
                else
                  v199 = 0;
                v200 = (llvm::Type *)*(unsigned int *)(v192 + 276);
                if ((*((_BYTE *)v684 + 23) & 0x10) == 0)
                {
                  v211 = 0;
                  v210 = &byte_1C871356D;
                  goto LABEL_333;
                }
                v201 = ***(_QWORD ***)v684;
                v202 = *(_QWORD *)(v201 + 152);
                v203 = *(unsigned int *)(v201 + 168);
                if ((_DWORD)v203)
                {
                  LODWORD(v204) = (v203 - 1) & ((v684 >> 4) ^ (v684 >> 9));
                  v205 = (llvm::Constant **)(v202 + 16 * v204);
                  v206 = *v205;
                  if (*v205 == v684)
                  {
LABEL_332:
                    v209 = v205[1];
                    v212 = *(void **)v209;
                    v210 = (char *)v209 + 16;
                    v211 = v212;
LABEL_333:
                    LOWORD(v720[0]) = 261;
                    v716 = v210;
                    v717 = v211;
                    llvm::AllocaInst::AllocaInst((uint64_t)(v197 + 8), v196, v200, 0, (uint64_t)&v716, (uint64_t)v199);
                    if (*(unsigned __int8 *)(*((_QWORD *)v684 - 4) + 16) - 11 >= 2)
                    {
                      v213 = operator new(0x80uLL);
                      v213[21] = v213[21] & 0x38000000 | 2;
                      *(_QWORD *)v213 = 0;
                      *((_QWORD *)v213 + 1) = 0;
                      *((_QWORD *)v213 + 2) = 0;
                      *((_QWORD *)v213 + 3) = v213 + 16;
                      *((_QWORD *)v213 + 4) = 0;
                      *((_QWORD *)v213 + 5) = 0;
                      *((_QWORD *)v213 + 6) = 0;
                      *((_QWORD *)v213 + 7) = v213 + 16;
                      llvm::StoreInst::StoreInst((llvm::StoreInst *)(v213 + 16), *((llvm::Value **)v684 - 4), v198, 0, v199);
                    }
                    v716 = &v718;
                    v717 = (void *)0x400000000;
                    v214 = *(_QWORD *)(a1 + 8);
                    if (v214)
                    {
                      v215 = 0;
                      do
                      {
                        v216 = *(_QWORD *)(v214 + 24);
                        if (*(_BYTE *)(v216 + 16) == 5)
                        {
                          if (v215 >= HIDWORD(v717))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v716, (uint64_t)&v718, v215 + 1, 8);
                            v215 = v717;
                          }
                          *((_QWORD *)v716 + v215) = v216;
                          v215 = (_DWORD)v717 + 1;
                          LODWORD(v717) = (_DWORD)v717 + 1;
                        }
                        v214 = *(_QWORD *)(v214 + 8);
                      }
                      while (v214);
                      v217 = (uint64_t **)v716;
                      v727 = v729;
                      HIDWORD(v728) = 4;
                      if (v215)
                      {
                        v692 = v198;
                        v218 = (uint64_t **)((char *)v716 + 8 * v215);
                        do
                        {
                          v219 = *v217;
                          LODWORD(v728) = 0;
                          sub_1C567207C((unsigned int *)&v727, (uint64_t)v727, v219[1], 0);
                          if ((_DWORD)v728)
                          {
                            v220 = (llvm::Instruction **)v727;
                            v221 = 8 * v728;
                            do
                            {
                              v222 = *v220++;
                              AsInstruction = llvm::ConstantExpr::getAsInstruction((llvm::ConstantExpr *)v219, v222);
                              llvm::User::replaceUsesOfWith(v222, (llvm::Value *)v219, (llvm::Value *)AsInstruction);
                              v221 -= 8;
                            }
                            while (v221);
                          }
                          llvm::Constant::destroyConstant((int32x2_t ****)v219);
                          ++v217;
                        }
                        while (v217 != v218);
                        v198 = v692;
                        if (v727 != v729)
                          free(v727);
                      }
                    }
                    if (v716 != &v718)
                      free(v716);
                    v41 = 1;
                    llvm::Value::doRAUW(v684, v198, (llvm::Value *)1);
                    llvm::GlobalVariable::eraseFromParent(v684);
                    return v28 | v41;
                  }
                  v207 = 1;
                  while (v206 != (llvm::Constant *)-4096)
                  {
                    v208 = v204 + v207++;
                    v204 = v208 & (v203 - 1);
                    v206 = *(llvm::Constant **)(v202 + 16 * v204);
                    if (v206 == v684)
                    {
                      v205 = (llvm::Constant **)(v202 + 16 * v204);
                      goto LABEL_332;
                    }
                  }
                }
                v205 = (llvm::Constant **)(v202 + 16 * v203);
                goto LABEL_332;
              }
            }
          }
        }
      }
    }
  }
LABEL_34:
  if (!BYTE1(v695[0]))
  {
    if (sub_1C56E7610((uint64_t)v32))
      v40 = sub_1C56E7800((uint64_t)v32, (uint64_t)v691, a5);
    else
      v40 = sub_1C56E7DA0(v32, v33);
    v41 = v40;
    if (*((_QWORD *)v32 + 1))
      return v28 | v41;
    goto LABEL_87;
  }
  __p = (void *)a5;
  if (v695[1] > 1)
  {
    v41 = 0;
    goto LABEL_62;
  }
  if (v696)
  {
    v34 = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 80) |= 1u;
    v34 = 1;
  }
  v42 = sub_1C56E7DA0(v32, v33);
  if (!*((_QWORD *)v32 + 1))
  {
LABEL_87:
    v79 = v32;
    goto LABEL_88;
  }
  v41 = (v34 | v42) != 0;
LABEL_62:
  if ((*(_DWORD *)(**((_QWORD **)v32 - 4) + 8) & 0xFE) == 0x12)
    goto LABEL_67;
  v43 = *(_DWORD *)(**((_QWORD **)v32 - 4) + 8);
  v100 = v43 > 0x15;
  v44 = (1 << v43) & 0x20AC7F;
  if (!v100 && v44 != 0)
    goto LABEL_67;
  v681 = (llvm::DataLayout *)(*(_QWORD *)(a1 + 40) + 272);
  v711 = 0;
  v712 = 0;
  v713 = 0;
  v727 = v729;
  v728 = 0x1000000000;
  v716 = v720;
  v717 = v720;
  v718 = 16;
  LODWORD(v719) = 0;
  v685 = v32;
  while (1)
  {
    v32 = (llvm::Constant *)*((_QWORD *)v32 + 1);
    if (!v32)
      break;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v716, (uint64_t)v32);
    if ((_BYTE)v26)
    {
      v113 = v728;
      if (v728 >= (unint64_t)HIDWORD(v728))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v727, (uint64_t)v729, v728 + 1, 8);
        v113 = v728;
      }
      *((_QWORD *)v727 + v113) = v32;
      LODWORD(v728) = v728 + 1;
    }
  }
  v652 = v41;
  v114 = 0;
  v657 = 0;
  v645 = 0;
  do
  {
    v115 = v728;
    if (!(_DWORD)v728)
      break;
    v116 = *((_QWORD *)v727 + v728 - 1);
    LODWORD(v728) = v728 - 1;
    v117 = *(_QWORD *)(v116 + 24);
    v118 = *(unsigned __int8 *)(v117 + 16);
    if (v118 - 77 >= 2)
    {
      if (v118 == 62)
        goto LABEL_168;
      if (v118 != 5)
      {
LABEL_174:
        v127 = v117 == 0;
        if (v117 && v118 == 60)
        {
          v128 = *(uint64_t **)(v117 - 32);
          if (!v128)
            break;
          goto LABEL_184;
        }
        if (v117 && v118 == 61)
        {
          v128 = *(uint64_t **)(v117 - 32);
          if (!v128)
            break;
          v129 = *(_DWORD *)(v117 + 20);
          v130 = (v129 & 0x40000000) != 0 ? *(_QWORD *)(v117 - 8) : v117 - 32 * (v129 & 0x7FFFFFF);
          if (((v116 - v130) & 0x1FFFFFFFE0) == 0)
            break;
LABEL_184:
          LODWORD(v702) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v681, *v128);
          if (v702 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v701, 0, 0);
          else
            v701 = 0;
          v132 = 1;
          v133 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v128, v681, (const void **)&v701, 1, 0, 0, v131);
          v134 = v702;
          if ((llvm::Constant *)v133 != v685)
          {
            v135 = v114;
            goto LABEL_228;
          }
          v135 = v114;
          if (v702 > 0x40)
          {
            v138 = 0;
            v139 = ((unint64_t)v702 + 63) >> 6;
            v137 = (uint64_t *)v701;
            do
            {
              v100 = v139-- < 1;
              if (v100)
                break;
              v140 = *(_QWORD *)(v701 + 8 * v139);
              v138 += __clz(v140);
            }
            while (!v140);
            v141 = v702 | 0xFFFFFFC0;
            if ((v702 & 0x3F) == 0)
              v141 = 0;
            v136 = v138 + v141;
          }
          else
          {
            v136 = (_DWORD)v702 + __clz(v701) - 64;
            v137 = &v701;
          }
          if (((_DWORD)v702 - v136) > 0x3F)
          {
            v132 = 1;
            goto LABEL_228;
          }
          if (*(_BYTE *)(v117 + 16) != 60)
            v117 = *(_QWORD *)(v117 - 64);
          v142 = *(_QWORD *)v117;
          v143 = *v137;
          v144 = (const llvm::Constant *)v657;
          if (!v657)
          {
            v147 = 0;
            goto LABEL_219;
          }
          v145 = v657 - 1;
          v146 = (v657 - 1) & (37 * v143);
          v147 = &v645[2 * v146];
          v148 = *v147;
          if (v143 != *v147)
          {
            v149 = 0;
            v150 = 1;
            while (v148 != -1)
            {
              if (v149)
                v151 = 0;
              else
                v151 = v148 == -2;
              if (v151)
                v149 = v147;
              v152 = v146 + v150++;
              v146 = v152 & v145;
              v147 = &v645[2 * (v152 & v145)];
              v148 = *v147;
              if (v143 == *v147)
              {
                v135 = v114;
                goto LABEL_225;
              }
            }
            if (v149)
              v147 = v149;
            v144 = (const llvm::Constant *)v657;
            LODWORD(v135) = v114;
LABEL_219:
            v26 = v144;
            if (4 * (int)v135 + 4 >= (3 * (_DWORD)v144))
            {
              sub_1C53061CC((uint64_t)&v711, 2 * (_DWORD)v144);
              v657 = v713;
              v154 = v713 - 1;
              v155 = (v713 - 1) & (37 * v143);
              v645 = v711;
              v147 = &v711[2 * v155];
              v156 = *v147;
              if (v143 == *v147)
                goto LABEL_247;
              v157 = 0;
              v158 = 1;
              while (v156 != -1)
              {
                if (v157)
                  v159 = 0;
                else
                  v159 = v156 == -2;
                if (v159)
                  v157 = v147;
                v160 = v155 + v158++;
                v155 = v160 & v154;
                v147 = &v711[2 * (v160 & v154)];
                v156 = *v147;
                if (v143 == *v147)
                  goto LABEL_247;
              }
            }
            else
            {
              if ((int)v144 + ~(_DWORD)v135 - HIDWORD(v712) > v144 >> 3)
                goto LABEL_221;
              sub_1C53061CC((uint64_t)&v711, (int)v144);
              v657 = v713;
              v161 = v713 - 1;
              v162 = (v713 - 1) & (37 * v143);
              v645 = v711;
              v147 = &v711[2 * v162];
              v163 = *v147;
              if (v143 == *v147)
              {
LABEL_247:
                v153 = v143;
                goto LABEL_222;
              }
              v157 = 0;
              v164 = 1;
              while (v163 != -1)
              {
                if (v157)
                  v165 = 0;
                else
                  v165 = v163 == -2;
                if (v165)
                  v157 = v147;
                v166 = v162 + v164++;
                v162 = v166 & v161;
                v147 = &v711[2 * (v166 & v161)];
                v163 = *v147;
                if (v143 == *v147)
                  goto LABEL_247;
              }
            }
            if (v157)
              v147 = v157;
            v26 = (const llvm::Constant *)v657;
LABEL_221:
            v657 = v26;
            v153 = *v147;
LABEL_222:
            v135 = (v712 + 1);
            LODWORD(v712) = v712 + 1;
            if (v153 != -1)
              --HIDWORD(v712);
            *v147 = v143;
            v147[1] = v142;
            v134 = v702;
          }
LABEL_225:
          if (v142 == v147[1])
            v132 = 2;
          else
            v132 = 1;
LABEL_228:
          v114 = v135;
          if (v134 >= 0x41 && v701)
            MEMORY[0x1CAA32F9C](v701, 0x1000C8000313F17);
          continue;
        }
        goto LABEL_191;
      }
      v119 = *(unsigned __int16 *)(v117 + 18);
      if ((v119 - 49) >= 2)
      {
        if (v119 != 34)
        {
          v127 = 0;
LABEL_191:
          if (v118 > 0x14 || v127 || !llvm::isSafeToDestroyConstant(*(llvm **)(v116 + 24), v26))
            break;
          goto LABEL_194;
        }
LABEL_168:
        v121 = *(_DWORD *)(v117 + 20);
        if ((v121 & 0x40000000) != 0)
        {
          v123 = *(_QWORD *)(v117 - 8);
          v122 = v121 & 0x7FFFFFF;
        }
        else
        {
          v122 = v121 & 0x7FFFFFF;
          v123 = v117 - 32 * v122;
        }
        v124 = (uint64_t *)(v123 + 32);
        v125 = 32 * v122 - 32;
        while (v125)
        {
          v126 = *v124;
          v124 += 4;
          v125 -= 32;
          if (*(_BYTE *)(v126 + 16) != 16)
            goto LABEL_174;
        }
      }
    }
    while (1)
    {
      v117 = *(_QWORD *)(v117 + 8);
      if (!v117)
        break;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v716, v117);
      if ((_BYTE)v26)
      {
        v120 = v728;
        if (v728 >= (unint64_t)HIDWORD(v728))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v727, (uint64_t)v729, v728 + 1, 8);
          v120 = v728;
        }
        *((_QWORD *)v727 + v120) = v117;
        LODWORD(v728) = v728 + 1;
      }
    }
LABEL_194:
    v132 = 2;
  }
  while (v132 == 2);
  if (v717 != v716)
    free(v717);
  v32 = v685;
  if (v727 != v729)
    free(v727);
  if (!v115 && (_DWORD)v712)
  {
    if ((_DWORD)v712 != 1)
      goto LABEL_275;
    v167 = v711;
    if (v713)
    {
      v168 = 16 * v713;
      while (*v167 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v167 += 2;
        v168 -= 16;
        if (!v168)
        {
          v167 = &v711[2 * v713];
          break;
        }
      }
    }
    v32 = v685;
    if (v167[1] != *((_QWORD *)v685 + 3))
    {
LABEL_275:
      if (v712 < 0x11 || *(_BYTE *)(**((_QWORD **)v32 - 4) + 8) == 16)
      {
        v639 = (llvm *)*((_QWORD *)v32 - 4);
        v673 = v33;
        v727 = v729;
        v728 = 0x1000000000;
        v642 = v711;
        v646 = v713;
        v658 = &v711[2 * v713];
        v169 = v711;
        if (v713)
        {
          v169 = v711;
          v170 = 16 * v713;
          while (*v169 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v169 += 2;
            v170 -= 16;
            if (!v170)
            {
              v169 = &v711[2 * v713];
              break;
            }
          }
        }
        sub_1C56E8A50((uint64_t)&v727, v169, v658, v658);
        v171 = 126 - 2 * __clz(v728);
        if ((_DWORD)v728)
          v172 = v171;
        else
          v172 = 0;
        sub_1C56E8B48((unint64_t *)v727, (unint64_t *)v727 + 2 * v728, v172, 1);
        if ((_DWORD)v728)
        {
          v173 = 0;
          v174 = (unint64_t *)v727;
          v665 = (unint64_t *)((char *)v727 + 16 * v728);
          while (1)
          {
            v175 = *v174;
            if (*v174 < v173)
              goto LABEL_389;
            v176 = v174[1];
            sub_1C4768AD0((uint64_t)v681, v176);
            v178 = v177;
            v180 = v179 == 1;
            llvm::DataLayout::getAlignment((uint64_t)v681, v176);
            v183 = v182;
            if (v180)
            v173 = (((1 << v183) + ((unint64_t)(v178 + 7) >> 3) - 1) & -(1 << v183)) + v175;
            v174 += 2;
            if (v174 == v665)
              goto LABEL_386;
          }
        }
        v173 = 0;
LABEL_386:
        v248 = *((_QWORD *)v685 + 3);
        sub_1C4768AD0((uint64_t)v681, v248);
        v250 = (unint64_t)(v249 + 7) >> 3;
        v252 = v251 == 1;
        llvm::DataLayout::getAlignment((uint64_t)v681, v248);
        v256 = ((1 << v255) + v250 - 1) & -(1 << v255);
        if (v252)
        if (v173 > v256)
        {
LABEL_389:
          v257 = 0;
          goto LABEL_644;
        }
        v709[0] = 0;
        v709[1] = 0;
        v710 = 0;
        if ((_DWORD)v646)
        {
          v258 = v642;
          v259 = 16 * v646;
          while (*v258 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v258 += 2;
            v259 -= 16;
            if (!v259)
            {
              v258 = v658;
              break;
            }
          }
        }
        else
        {
          v646 = 0;
          v258 = v642;
        }
        v273 = &v642[2 * v646];
        v274 = (llvm::Type **)v639;
        v275 = (unint64_t)v658;
        if (v258 != v273)
        {
          while (2)
          {
            v277 = (void *)*v258;
            v276 = (llvm::Constant ***)v258[1];
            LODWORD(v717) = 64;
            v716 = v277;
            v278 = llvm::ConstantFoldLoadFromConst(v274, v276, (const void **)&v716, v681, v254);
            if (v717 >= 0x41 && v716)
              MEMORY[0x1CAA32F9C](v716, 0x1000C8000313F17);
            if (!v278)
            {
              v257 = 0;
              goto LABEL_643;
            }
            v279 = (void *)*v258;
            v716 = (void *)*v258;
            v717 = v278;
            if (v710)
            {
              v280 = (v710 - 1) & (37 * (_DWORD)v279);
              v281 = (_QWORD *)(v709[0] + 16 * v280);
              v282 = *v281;
              if (v279 != (void *)*v281)
              {
                v283 = 0;
                v284 = 1;
                while (v282 != -1)
                {
                  if (v283)
                    v285 = 0;
                  else
                    v285 = v282 == -2;
                  if (v285)
                    v283 = v281;
                  v286 = v280 + v284++;
                  v280 = v286 & (v710 - 1);
                  v281 = (_QWORD *)(v709[0] + 16 * v280);
                  v282 = *v281;
                  v274 = (llvm::Type **)v639;
                  v275 = (unint64_t)v658;
                  if (v279 == (void *)*v281)
                    goto LABEL_449;
                }
                if (v283)
                  v287 = v283;
                else
                  v287 = v281;
                v274 = (llvm::Type **)v639;
                v275 = (unint64_t)v658;
LABEL_448:
                v288 = sub_1C548D6F8((uint64_t)v709, (uint64_t *)&v716, v287);
                *v288 = v279;
                v288[1] = v278;
              }
LABEL_449:
              v289 = v258 + 2;
              while (v289 != (unint64_t *)v275)
              {
                v290 = *v289;
                v289 += 2;
                if (v290 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v258 = v289 - 2;
                  goto LABEL_454;
                }
              }
              v258 = (unint64_t *)v275;
LABEL_454:
              if (v258 == v273)
                goto LABEL_460;
              continue;
            }
            break;
          }
          v287 = 0;
          goto LABEL_448;
        }
LABEL_460:
        if ((*((_WORD *)v685 + 17) & 0x3F) != 0)
        {
          v291 = (*((_WORD *)v685 + 17) & 0x3F) - 1;
        }
        else
        {
          llvm::DataLayout::getAlignment((uint64_t)v681, *((_QWORD *)v685 + 3));
          v291 = v292;
        }
        sub_1C4768AD0((uint64_t)v681, *((_QWORD *)v685 + 3));
        v635 = v294;
        if ((_DWORD)v293 == 1)
        v706 = 0;
        v707 = 0;
        v708 = 0;
        if ((_DWORD)v728)
        {
          v275 = 0;
          v295 = (char *)v727;
          v636 = 1 << v291;
          v637 = (char *)v727 + 16 * v728;
          do
          {
            v296 = *(_QWORD *)v295;
            v659 = v295;
            v667 = (llvm::PointerType *)*((_QWORD *)v295 + 1);
            v724 = *(void **)v295;
            v297 = operator new(0x78uLL);
            v298 = v297 + 8;
            v297[13] = v297[13] & 0x38000000 | 1;
            *(_QWORD *)v297 = 0;
            *((_QWORD *)v297 + 1) = 0;
            *((_QWORD *)v297 + 2) = 0;
            *((_QWORD *)v297 + 3) = v297 + 8;
            v299 = *(_QWORD *)(a1 + 40);
            v641 = (llvm *)(v297 + 8);
            if (v710)
            {
              v300 = (v710 - 1) & (37 * v296);
              v301 = (_QWORD *)(v709[0] + 16 * v300);
              v302 = (void *)*v301;
              if (v296 == *v301)
                goto LABEL_481;
              v303 = 0;
              v304 = 1;
              while (1)
              {
                v305 = *(_QWORD *)(a1 + 40);
                if (v302 == (void *)-1)
                  break;
                if (v303)
                  v306 = 0;
                else
                  v306 = v302 == (void *)-2;
                if (v306)
                  v303 = v301;
                v307 = v300 + v304++;
                v300 = v307 & (v710 - 1);
                v301 = (_QWORD *)(v709[0] + 16 * v300);
                v302 = (void *)*v301;
                v298 = v297 + 8;
                if (v296 == *v301)
                  goto LABEL_481;
              }
              if (v303)
                v308 = v303;
              else
                v308 = v301;
              v298 = v297 + 8;
            }
            else
            {
              v305 = *(_QWORD *)(a1 + 40);
              v308 = 0;
            }
            v301 = sub_1C548D6F8((uint64_t)v709, (uint64_t *)&v724, v308);
            *v301 = v296;
            v301[1] = 0;
            v299 = v305;
LABEL_481:
            v309 = v301[1];
            v310 = *(uint64_t ***)v685;
            if ((*((_BYTE *)v685 + 23) & 0x10) != 0)
            {
              v311 = **v310;
              v312 = *(_QWORD *)(v311 + 152);
              v313 = *(unsigned int *)(v311 + 168);
              v314 = v646;
              if (!(_DWORD)v313)
                goto LABEL_488;
              LODWORD(v315) = (v313 - 1) & ((v685 >> 4) ^ (v685 >> 9));
              v316 = (llvm::Constant **)(v312 + 16 * v315);
              v317 = *v316;
              if (*v316 != v685)
              {
                v318 = 1;
                while (v317 != (llvm::Constant *)-4096)
                {
                  v319 = v315 + v318++;
                  v315 = v319 & (v313 - 1);
                  v317 = *(llvm::Constant **)(v312 + 16 * v315);
                  if (v317 == v685)
                  {
                    v316 = (llvm::Constant **)(v312 + 16 * v315);
                    goto LABEL_489;
                  }
                }
LABEL_488:
                v316 = (llvm::Constant **)(v312 + 16 * v313);
              }
LABEL_489:
              v320 = v316[1];
              v323 = *(char **)v320;
              v322 = (char *)v320 + 16;
              v321 = v323;
              goto LABEL_490;
            }
            v321 = 0;
            v322 = &byte_1C871356D;
            v314 = v646;
LABEL_490:
            v705[0] = 773;
            v701 = (uint64_t)v322;
            v702 = v321;
            v703 = (uint64_t)".";
            v716 = &v701;
            v646 = v314 & 0xFFFFFFFF00000000 | v275;
            v718 = v646;
            LOWORD(v720[0]) = 2050;
            v324 = (llvm::GlobalObject *)llvm::GlobalVariable::GlobalVariable((uint64_t)v298, v299, v667, 0, 7, v309, (uint64_t)&v716, (uint64_t)v685, (*((_DWORD *)v685 + 8) >> 10) & 7, ((unint64_t)*((unsigned int *)v310 + 2) >> 8) | 0x100000000, 0);
            llvm::GlobalObject::copyAttributesFrom(v324, v685);
            *((_BYTE *)v297 + 112) = v297[28] & 0xFD | *((_BYTE *)v685 + 80) & 2;
            *((_QWORD *)v297 + 13) = *((_QWORD *)v685 + 9);
            v716 = (void *)v296;
            v717 = v298;
            if (v708)
            {
              v325 = (v708 - 1) & (37 * v296);
              v326 = &v706[2 * v325];
              v327 = (void *)*v326;
              if (v296 == *v326)
                goto LABEL_503;
              v328 = 0;
              v329 = 1;
              while (v327 != (void *)-1)
              {
                if (v328)
                  v330 = 0;
                else
                  v330 = v327 == (void *)-2;
                if (v330)
                  v328 = v326;
                v331 = v325 + v329++;
                v325 = v331 & (v708 - 1);
                v326 = &v706[2 * v325];
                v327 = (void *)*v326;
                if (v296 == *v326)
                  goto LABEL_503;
              }
              if (v328)
                v332 = v328;
              else
                v332 = v326;
              v298 = v297 + 8;
            }
            else
            {
              v332 = 0;
            }
            v333 = sub_1C548D6F8((uint64_t)&v706, (uint64_t *)&v716, v332);
            *v333 = v296;
            v333[1] = v298;
LABEL_503:
            v334 = (63 - __clz((v296 | v636) & -(uint64_t)(v296 | v636)));
            llvm::DataLayout::getAlignment((uint64_t)v681, (uint64_t)v667);
            if (v334 > v335)
              v297[16] = v297[16] & 0xFFC0FFFF | ((v334 << 16) + 0x10000);
            v668 = sub_1C53E2F94((uint64_t)v681, (uint64_t)v667);
            if ((_DWORD)v336 == 1)
            v716 = &v718;
            v717 = (void *)0x100000000;
            llvm::GlobalVariable::getDebugInfo((unsigned int *)v685, (uint64_t)&v716);
            if ((_DWORD)v717)
            {
              v337 = (char *)v716;
              v638 = (llvm::DIExpression *)(8 * v296);
              v644 = v668 + 8 * v296;
              v338 = 8 * v717;
              while (1)
              {
                v339 = *(_QWORD *)v337;
                v340 = (uint64_t *)(*(_QWORD *)v337 - 8 * *(unsigned int *)(*(_QWORD *)v337 + 8));
                v341 = *v340;
                v342 = (llvm::MDNode *)v340[1];
                v701 = 0;
                if (llvm::DIExpression::extractIfOffset(v342, &v701))
                {
                  if ((v701 & 0x8000000000000000) == 0)
                  {
                    v343 = 8 * v701;
                    if (8 * v701 < v644)
                    {
                      v344 = *(_QWORD *)(*(_QWORD *)(v341 - 8 * *(unsigned int *)(v341 + 8) + 24) + 32);
                      if (!v344 || v344 + v343 > (unint64_t)v638)
                        break;
                    }
                  }
                }
LABEL_528:
                v337 += 8;
                v338 -= 8;
                if (!v338)
                  goto LABEL_529;
              }
              if ((llvm::DIExpression *)v343 == v638 && v344 == v668)
              {
                v346 = *((_QWORD *)v342 + 2);
                v347 = (_QWORD *)(v346 & 0xFFFFFFFFFFFFFFF8);
                if ((v346 & 4) != 0)
                  v347 = (_QWORD *)*v347;
                Impl = llvm::DIExpression::getImpl(v347, 0, 0, 0, 1);
                goto LABEL_524;
              }
              if (v668 < v635)
              {
                Impl = llvm::DIExpression::createFragmentExpression(v342, v638, v668);
                if (!v349)
                  goto LABEL_529;
LABEL_524:
                v342 = Impl;
              }
              v350 = *(_QWORD *)(v339 + 16);
              v351 = (_QWORD *)(v350 & 0xFFFFFFFFFFFFFFF8);
              if ((v350 & 4) != 0)
                v351 = (_QWORD *)*v351;
              v352 = llvm::DIGlobalVariableExpression::getImpl(v351, v341, (uint64_t)v342, 0, 1);
              llvm::Value::addMetadata(v641, 0, v352);
              goto LABEL_528;
            }
LABEL_529:
            if (v716 != &v718)
              free(v716);
            ++v275;
            v295 = v659 + 16;
          }
          while (v659 + 16 != v637);
        }
        v724 = v726;
        v725 = 0x1000000000;
        v701 = (uint64_t)v705;
        v702 = (char *)v705;
        v703 = 16;
        v704 = 0;
        v716 = &v718;
        v717 = (void *)0x1000000000;
        v353 = *((_QWORD *)v685 + 1);
        if (v353)
        {
          do
          {
            v354 = *(_QWORD *)(v353 + 24);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, v354);
            if (v355)
            {
              v356 = v725;
              if (v725 >= (unint64_t)HIDWORD(v725))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v724, (uint64_t)v726, v725 + 1, 8);
                v356 = v725;
              }
              *((_QWORD *)v724 + v356) = v354;
              LODWORD(v725) = v725 + 1;
            }
            v353 = *(_QWORD *)(v353 + 8);
          }
          while (v353);
          v357 = v725;
          if ((_DWORD)v725)
          {
            while (1)
            {
              v358 = *((_QWORD *)v724 + --v357);
              LODWORD(v725) = v357;
              v359 = *(unsigned __int8 *)(v358 + 16);
              if (v359 - 60 <= 0x12)
              {
                v360 = 1 << (v359 - 60);
                if ((v360 & 0x60004) != 0)
                  goto LABEL_551;
                if ((v360 & 3) != 0)
                  break;
              }
              if (v359 == 5)
              {
                v395 = *(unsigned __int16 *)(v358 + 18);
                v100 = v395 > 0x32;
                v396 = (1 << v395) & 0x6000400000000;
                if (!v100 && v396 != 0)
                {
LABEL_551:
                  v361 = *(_QWORD *)(v358 + 8);
                  if (v361)
                  {
                    do
                    {
                      v362 = *(_QWORD *)(v361 + 24);
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, v362);
                      if (v363)
                      {
                        v364 = v725;
                        if (v725 >= (unint64_t)HIDWORD(v725))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v724, (uint64_t)v726, v725 + 1, 8);
                          v364 = v725;
                        }
                        *((_QWORD *)v724 + v364) = v362;
                        LODWORD(v725) = v725 + 1;
                      }
                      v361 = *(_QWORD *)(v361 + 8);
                    }
                    while (v361);
                    v359 = *(unsigned __int8 *)(v358 + 16);
                  }
                  if (v359 >= 0x1C)
                  {
                    v698 = 6;
                    v699 = 0;
                    v700 = (int32x2_t ****)v358;
                    if (v358 != -8192 && v358 != -4096 && v358)
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v698);
                    v377 = (_QWORD *)sub_1C5087E70((unsigned int *)&v716, (unint64_t)&v698, 1);
                    v378 = (int)v717;
                    v379 = (unint64_t *)((char *)v716 + 24 * v717);
                    *v379 = 6;
                    v379[1] = 0;
                    v380 = (unint64_t)(v379 + 1);
                    v381 = v377[2];
                    v379[2] = v381;
                    if (v381 != -8192 && v381 != -4096)
                    {
                      if (v381)
                      {
                        v382 = *v377 & 0xFFFFFFFFFFFFFFF8;
                        v379[1] = *(_QWORD *)v382;
                        *(_QWORD *)v382 = v379;
                        *v379 = v382 | 6;
                        v383 = (uint64_t *)v379[1];
                        if (v383)
                          *v383 = *v383 & 7 | v380;
                      }
                    }
                    LODWORD(v717) = v378 + 1;
                    if (v700 != (int32x2_t ****)-8192 && v700 != (int32x2_t ****)-4096 && v700)
                    {
                      v384 = v698 & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)(v698 & 0xFFFFFFFFFFFFFFF8) = v699;
                      if (v699)
                      {
                        *v699 = *v699 & 7 | v384;
                      }
                      else
                      {
                        v385 = v700;
                        v386 = ***v700;
                        v387 = (unint64_t)v386[303];
                        if (v387 <= v384)
                        {
                          v388 = v386[305].u32[0];
                          if (v387 + 16 * v388 > v384)
                          {
                            v389 = v388 - 1;
                            LODWORD(v390) = v389 & ((v700 >> 4) ^ (v700 >> 9));
                            v391 = (int32x2_t *****)(v387 + 16 * v390);
                            v392 = *v391;
                            if (v700 == *v391)
                            {
LABEL_596:
                              *v391 = (int32x2_t ****)-8192;
                              v386[304] = vadd_s32(v386[304], (int32x2_t)0x1FFFFFFFFLL);
                              v385 = v700;
                            }
                            else
                            {
                              v393 = 1;
                              while (v392 != (int32x2_t ****)-4096)
                              {
                                v394 = v390 + v393++;
                                v390 = v394 & v389;
                                v392 = *(int32x2_t *****)(v387 + 16 * v390);
                                if (v700 == v392)
                                {
                                  v391 = (int32x2_t *****)(v387 + 16 * v390);
                                  goto LABEL_596;
                                }
                              }
                            }
                            *((_BYTE *)v385 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                  }
                }
LABEL_620:
                v357 = v725;
              }
              if (!v357)
                goto LABEL_627;
            }
            v365 = (uint64_t *)(v358 - 32);
            v366 = *(uint64_t **)(v358 - 32);
            if (!v366)
              goto LABEL_620;
            LODWORD(v699) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v681, *v366);
            if (v699 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v698, 0, 0);
            else
              v698 = 0;
            llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v366, v681, (const void **)&v698, 1, 0, 0, v367);
            v368 = (uint64_t *)&v698;
            if (v699 >= 0x41)
              v368 = (uint64_t *)v698;
            v369 = *v368;
            v697 = *v368;
            if (v708)
            {
              v370 = (v708 - 1) & (37 * v369);
              v371 = &v706[2 * v370];
              v372 = *v371;
              if (v369 == *v371)
              {
LABEL_607:
                v399 = v371[1];
                v400 = (uint64_t *)v358;
                if (*(_BYTE *)(v358 + 16) != 60)
                  v400 = *(uint64_t **)(v358 - 64);
                llvm::DataLayout::getAlignment((uint64_t)v681, *v400);
                v275 = v275 & 0xFFFFFFFFFFFF0000 | v401 | 0x100;
                v402 = llvm::getOrEnforceKnownAlignment(v399, v401 | 0x100u, (unsigned __int8 *)v681, v358, 0, 0);
                if (*(_QWORD *)(v358 - 32))
                {
                  **(_QWORD **)(v358 - 16) = *(_QWORD *)(v358 - 24);
                  v403 = *(_QWORD *)(v358 - 24);
                  if (v403)
                    *(_QWORD *)(v403 + 16) = *(_QWORD *)(v358 - 16);
                }
                *v365 = v399;
                if (v399)
                {
                  v406 = *(_QWORD *)(v399 + 8);
                  v405 = (uint64_t **)(v399 + 8);
                  v404 = v406;
                  *(_QWORD *)(v358 - 24) = v406;
                  if (v406)
                    *(_QWORD *)(v404 + 16) = v358 - 24;
                  *(_QWORD *)(v358 - 16) = v405;
                  *v405 = v365;
                }
                *(_WORD *)(v358 + 18) = *(_WORD *)(v358 + 18) & 0xFF81 | (2 * v402);
                if (v699 >= 0x41 && v698)
                  MEMORY[0x1CAA32F9C](v698, 0x1000C8000313F17);
                goto LABEL_620;
              }
              v373 = 0;
              v374 = 1;
              while (v372 != -1)
              {
                if (v373)
                  v375 = 0;
                else
                  v375 = v372 == -2;
                if (v375)
                  v373 = v371;
                v376 = v370 + v374++;
                v370 = v376 & (v708 - 1);
                v371 = &v706[2 * v370];
                v372 = *v371;
                if (v369 == *v371)
                  goto LABEL_607;
              }
              if (v373)
                v398 = v373;
              else
                v398 = v371;
            }
            else
            {
              v398 = 0;
            }
            v371 = sub_1C548D6F8((uint64_t)&v706, &v697, v398);
            *v371 = v369;
            v371[1] = 0;
            goto LABEL_607;
          }
        }
LABEL_627:
        v715 = 0;
        llvm::RecursivelyDeleteTriviallyDeadInstructions((unsigned int *)&v716, 0, 0, (uint64_t)v714);
        if (v715 == v714)
        {
          v407 = (void (**)(void))(v714[0] + 32);
        }
        else
        {
          if (!v715)
          {
LABEL_632:
            llvm::Constant::removeDeadConstantUsers((uint64_t)v685);
            llvm::GlobalVariable::eraseFromParent(v685);
            v408 = v706;
            if ((_DWORD)v707)
            {
              v409 = v706;
              if (v708)
              {
                v410 = 16 * v708;
                v409 = v706;
                while (*v409 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  v409 += 2;
                  v410 -= 16;
                  if (!v410)
                    goto LABEL_637;
                }
              }
            }
            else
            {
LABEL_637:
              v409 = &v706[2 * v708];
            }
            v257 = v409[1];
            sub_1C50880D4((char **)&v716);
            if (v702 != (char *)v701)
              free(v702);
            if (v724 != v726)
              free(v724);
            MEMORY[0x1CAA32FB4](v408, 8);
LABEL_643:
            MEMORY[0x1CAA32FB4](v709[0], 8);
LABEL_644:
            if (v727 != v729)
              free(v727);
            MEMORY[0x1CAA32FB4](v711, 8);
            v32 = v685;
            v33 = v673;
            v41 = v652;
            if (v257)
              goto LABEL_89;
            goto LABEL_67;
          }
          v407 = (void (**)(void))(*v715 + 40);
        }
        (*v407)();
        goto LABEL_632;
      }
    }
  }
  MEMORY[0x1CAA32FB4](v711, 8);
  v41 = v652;
LABEL_67:
  if (v695[1] != 2)
    return v28 | v41;
  v46 = *(_QWORD *)&v695[2];
  if (!*(_QWORD *)&v695[2])
    return v28 | v41;
  v683 = v32;
  v47 = *(_QWORD *)(*(_QWORD *)&v695[2] - 64);
  if (!v47)
    return v28 | v41;
  v48 = *(unsigned __int8 *)(v47 + 16);
  if (v48 >= 0x15)
    v49 = 0;
  else
    v49 = *(_QWORD *)(*(_QWORD *)&v695[2] - 64);
  v50 = (uint64_t)__p;
  if (v48 <= 0x14)
  {
    v660 = *(unsigned __int8 *)(v47 + 16);
    v716 = v720;
    v717 = v720;
    v718 = 4;
    LODWORD(v719) = 0;
    v51 = sub_1C53774DC(v47, (llvm::SmallPtrSetImplBase *)&v716);
    if (v717 == v716)
    {
      if ((v51 & 1) != 0)
        return v28 | v41;
    }
    else
    {
      free(v717);
      if ((v51 & 1) != 0)
        return v28 | v41;
    }
    v46 = *(_QWORD *)&v695[2];
    v48 = v660;
  }
  v656 = v49;
  v52 = (_QWORD *)a2(a3, *(_QWORD *)(*(_QWORD *)(v46 + 40) + 56));
  v53 = v683;
  v676 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v52 + 144))(*v52, *(_DWORD *)(*(_QWORD *)v683 + 8) >> 8);
  if (v48 <= 0x14 && *(unsigned __int8 *)(*((_QWORD *)v683 - 4) + 16) - 11 <= 1)
  {
    v54 = *(_QWORD *)v47;
    sub_1C4768AD0((uint64_t)v33, *(_QWORD *)v47);
    v56 = (unint64_t)(v55 + 7) >> 3;
    v648 = v41;
    v58 = v57 == 1;
    v671 = v33;
    llvm::DataLayout::getAlignment((uint64_t)v33, v54);
    v60 = ((1 << v59) + v56 - 1) & -(1 << v59);
    v61 = *((_QWORD *)v683 + 3);
    sub_1C4768AD0((uint64_t)v33, v61);
    v63 = v58 ^ (v62 == 1);
    v65 = v48;
    v66 = (unint64_t)(v64 + 7) >> 3;
    llvm::DataLayout::getAlignment((uint64_t)v33, v61);
    v68 = (1 << v67) + v66;
    v48 = v65;
    v25 = v60 == ((v68 - 1) & -(1 << v67));
    v50 = (uint64_t)__p;
    v69 = v25;
    v70 = v69 & ~v63;
    v41 = v648;
    if ((v70 & v676) == 1)
    {
      if (*(_QWORD *)v47 == *((_QWORD *)v683 + 3))
      {
        llvm::GlobalVariable::setInitializer((uint64_t)v683, (llvm::Constant *)v47);
        v72 = (llvm *)a1;
      }
      else
      {
        v71 = (char *)operator new(0x78uLL);
        v72 = (llvm *)(v71 + 32);
        *((_DWORD *)v71 + 13) = *((_DWORD *)v71 + 13) & 0x38000000 | 1;
        *(_QWORD *)v71 = 0;
        *((_QWORD *)v71 + 1) = 0;
        *((_QWORD *)v71 + 2) = 0;
        *((_QWORD *)v71 + 3) = v71 + 32;
        v73 = *(_QWORD *)(a1 + 40);
        v74 = *(llvm::PointerType **)v47;
        v75 = *(_BYTE *)(a1 + 80) & 1;
        v76 = *((_DWORD *)v683 + 8);
        LOWORD(v720[0]) = 257;
        v77 = (llvm::Value *)llvm::GlobalVariable::GlobalVariable((uint64_t)(v71 + 32), v73, v74, v75, v76 & 0xF, v47, (uint64_t)&v716, (uint64_t)v683, (v76 >> 10) & 7, ((unint64_t)*(unsigned int *)(*(_QWORD *)v683 + 8) >> 8) | 0x100000000, 0);
        llvm::Value::takeName(v77, v683);
        llvm::GlobalObject::copyAttributesFrom((llvm::GlobalObject *)(v71 + 32), v683);
        v71[112] = v71[112] & 0xFD | *((_BYTE *)v683 + 80) & 2;
        *((_QWORD *)v71 + 13) = *((_QWORD *)v683 + 9);
        v78 = (llvm::UndefValue *)(v71 + 32);
        if (*((_QWORD *)v71 + 4) != *(_QWORD *)v683)
          v78 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v72, *(llvm::Constant **)v683, 0);
        llvm::Value::doRAUW(v683, v78, (llvm::Value *)1);
        llvm::GlobalVariable::eraseFromParent(v683);
        v33 = v671;
      }
      sub_1C56E7DA0(v72, v33);
      if (*((_QWORD *)v72 + 1))
        goto LABEL_89;
      v79 = v72;
LABEL_88:
      llvm::GlobalVariable::eraseFromParent(v79);
      goto LABEL_89;
    }
  }
  v724 = v691;
  v725 = v50;
  v81 = llvm::Value::stripPointerCasts((llvm::Value *)v47);
  v82 = (llvm::Constant *)*((_QWORD *)v683 - 4);
  if (*(_BYTE *)(*(_QWORD *)v82 + 8) != 15
    || !llvm::Constant::isNullValue(v82)
    || *(_BYTE *)(*(_QWORD *)v81 + 8) != 15)
  {
    goto LABEL_356;
  }
  v83 = **((_QWORD **)v683 - 4);
  v84 = *(_DWORD *)(v83 + 8);
  if ((v84 & 0xFE) == 0x12)
    v84 = *(_DWORD *)(**(_QWORD **)(v83 + 16) + 8);
  if (v84 > 0xFF)
    goto LABEL_356;
  v672 = v33;
  v661 = v48;
  if (*((unsigned __int8 *)v81 + 16) > 0x14u)
  {
    if (!llvm::isAllocationFn((uint64_t)v81, (uint64_t (*)(uint64_t, uint64_t))sub_1C6294D98, (uint64_t)&v724)
      || *((_BYTE *)v81 + 16) != 84)
    {
      goto LABEL_356;
    }
    v260 = (uint64_t *)((uint64_t (*)(uint64_t, _QWORD))v724)(v725, *(_QWORD *)(*((_QWORD *)v81 + 5) + 56));
    v261 = byte_1ED82E438 ? 43 : 47;
    v693 = v260;
    sub_1C4EBF808((uint64_t)v81, v261, v260, &v716);
    if (!(_BYTE)v719)
      goto LABEL_356;
    InitialValueOfAllocation = llvm::getInitialValueOfAllocation((uint64_t)v81, v693, (llvm::UndefValue *)(****(_QWORD ****)(*((_QWORD *)v81 + 5) + 56) + 1912));
    if (!InitialValueOfAllocation)
      goto LABEL_356;
    v263 = (uint64_t)InitialValueOfAllocation;
    v654 = v41;
    v714[0] = 0;
    if (!llvm::getObjectSize(v81, v714, v33, (llvm::DataLayout *)v693, 0, 0))
      goto LABEL_804;
    __pb = (uint64_t)v714[0];
    if (v714[0] > (unsigned __int8 *)0x7FF)
      goto LABEL_804;
    v727 = v729;
    HIDWORD(v728) = 4;
    v729[0] = v683;
    v264 = 1;
    while (1)
    {
      v265 = *((_QWORD *)v727 + --v264);
      LODWORD(v728) = v264;
      v266 = *(_QWORD *)(v265 + 8);
      if (v266)
      {
        do
        {
          v267 = *(_QWORD *)(v266 + 24);
          v268 = *(unsigned __int8 *)(v267 + 16);
          if (v267 && v268 == 60)
          {
            v716 = v720;
            v717 = v720;
            v718 = 8;
            LODWORD(v719) = 0;
            v269 = sub_1C56E99CC(v267, (llvm::SmallPtrSetImplBase *)&v716);
            if (v717 != v716)
              free(v717);
            if ((v269 & 1) == 0)
            {
LABEL_766:
              v272 = 0;
              goto LABEL_767;
            }
          }
          else if (v267 && v268 == 61)
          {
            if (*(_QWORD *)(v267 - 32) != v265)
              goto LABEL_766;
          }
          else
          {
            if (v267)
              v270 = v268 == 5;
            else
              v270 = 0;
            if (!v270 || llvm::Value::stripPointerCasts(*(llvm::Value **)(v266 + 24)) != v683)
              goto LABEL_766;
            v271 = v728;
            if (v728 >= (unint64_t)HIDWORD(v728))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v727, (uint64_t)v729, v728 + 1, 8);
              v271 = v728;
            }
            *((_QWORD *)v727 + v271) = v267;
            LODWORD(v728) = v728 + 1;
          }
          v266 = *(_QWORD *)(v266 + 8);
        }
        while (v266);
        v264 = v728;
      }
      if (!v264)
      {
        v272 = 1;
LABEL_767:
        if (v727 != v729)
          free(v727);
        if (!v272)
          goto LABEL_804;
        v716 = v720;
        v717 = v720;
        v718 = 4;
        LODWORD(v719) = 0;
        v727 = v729;
        HIDWORD(v728) = 4;
        v729[0] = v81;
        v505 = 1;
        while (1)
        {
          v506 = *((_QWORD *)v727 + v505 - 1);
          LODWORD(v728) = v505 - 1;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v716, v506);
          if (v507)
          {
            v508 = *(_QWORD *)(v506 + 8);
            if (v508)
              break;
          }
LABEL_789:
          v505 = v728;
          if (!(_DWORD)v728)
          {
            v513 = 1;
            goto LABEL_792;
          }
        }
        while (1)
        {
          v509 = *(_QWORD *)(v508 + 24);
          v510 = *(unsigned __int8 *)(v509 + 16);
          if (v510 != 60 && (v510 < 0x1C || v510 - 81 >= 2))
          {
            if (v510 == 77 || v510 == 62)
            {
              v512 = v728;
              if (v728 >= (unint64_t)HIDWORD(v728))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v727, (uint64_t)v729, v728 + 1, 8);
                v512 = v728;
              }
              *((_QWORD *)v727 + v512) = v509;
              LODWORD(v728) = v728 + 1;
            }
            else if (v510 != 61
                   || *(_QWORD *)(v509 - 64) == v506
                   && llvm::Value::stripPointerCasts(*(llvm::Value **)(v509 - 32)) != v683)
            {
              v513 = 0;
LABEL_792:
              if (v727 != v729)
                free(v727);
              if (v717 != v716)
                free(v717);
              if (v513)
              {
                llvm::ArrayType::get((llvm::ArrayType *)(***(_QWORD ***)v683 + 1912), (llvm::Type *)__pb);
                v515 = v514;
                v516 = (char *)operator new(0x78uLL);
                v517 = (llvm::Value *)(v516 + 32);
                *((_DWORD *)v516 + 13) = *((_DWORD *)v516 + 13) & 0x38000000 | 1;
                *(_QWORD *)v516 = 0;
                *((_QWORD *)v516 + 1) = 0;
                *((_QWORD *)v516 + 2) = 0;
                *((_QWORD *)v516 + 3) = v516 + 32;
                v518 = *(_QWORD *)(a1 + 40);
                v520 = llvm::UndefValue::get(v515, v519);
                if ((*((_BYTE *)v683 + 23) & 0x10) != 0)
                {
                  v521 = ***(_QWORD ***)v683;
                  v522 = *(_QWORD *)(v521 + 152);
                  v523 = *(unsigned int *)(v521 + 168);
                  if ((_DWORD)v523)
                  {
                    LODWORD(v524) = (v523 - 1) & ((v683 >> 4) ^ (v683 >> 9));
                    v525 = (llvm::Constant **)(v522 + 16 * v524);
                    v526 = *v525;
                    if (*v525 != v683)
                    {
                      v527 = 1;
                      do
                      {
                        if (v526 == (llvm::Constant *)-4096)
                          goto LABEL_805;
                        v528 = v524 + v527++;
                        v524 = v528 & (v523 - 1);
                        v526 = *(llvm::Constant **)(v522 + 16 * v524);
                      }
                      while (v526 != v683);
                      v525 = (llvm::Constant **)(v522 + 16 * v524);
                    }
                  }
                  else
                  {
LABEL_805:
                    v525 = (llvm::Constant **)(v522 + 16 * v523);
                  }
                  v529 = v525[1];
                  v532 = *(void **)v529;
                  v530 = (char *)v529 + 16;
                  v531 = v532;
                }
                else
                {
                  v531 = 0;
                  v530 = &byte_1C871356D;
                }
                LOWORD(v720[0]) = 773;
                v716 = v530;
                v717 = v531;
                v718 = (uint64_t)".body";
                llvm::GlobalVariable::GlobalVariable((uint64_t)v517, v518, v515, 0, 7, (uint64_t)v520, (uint64_t)&v716, 0, (*((_DWORD *)v683 + 8) >> 10) & 7, 0, 0);
                if (*(unsigned __int8 *)(v263 + 16) - 11 >= 2)
                {
                  v533 = *((_QWORD *)v81 + 4);
                  if (v533)
                    v534 = v533 == *((_QWORD *)v81 + 5) + 40;
                  else
                    v534 = 1;
                  if (v534)
                    v535 = 0;
                  else
                    v535 = v533 - 24;
                  sub_1C4773D54((uint64_t)&v716, v535, 0, 0, 0);
                  v537 = *(llvm::ConstantInt **)(*v722 + 1984);
                  v538 = *(_DWORD *)(*v722 + 1992);
                  LODWORD(v728) = v538 >> 8;
                  if (v538 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v727, __pb, 0);
                  }
                  else
                  {
                    if (v538 <= 0xFF)
                      v539 = 0;
                    else
                      v539 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v538);
                    v727 = (void *)(v539 & __pb);
                  }
                  v540 = (uint64_t *)llvm::ConstantInt::get(v537, (llvm::LLVMContext *)&v727, v536);
                  if (v728 >= 0x41 && v727)
                    MEMORY[0x1CAA32F9C](v727, 0x1000C8000313F17);
                  llvm::IRBuilderBase::CreateMemSet((uint64_t)&v716, v517, v263, v540, 0, 0, 0, 0, 0);
                  if (v716 != &v718)
                    free(v716);
                }
                v541 = *((_QWORD *)v81 + 1);
                if (v541)
                {
                  v542 = 0;
                  v543 = (uint64_t *)(v516 + 40);
                  do
                  {
                    v544 = *(_QWORD *)(v541 + 24);
                    if (v544 && *(_BYTE *)(v544 + 16) == 77)
                    {
                      if (*(_QWORD *)v544 == *(_QWORD *)v517)
                      {
                        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v544, v517, (llvm::Value *)1);
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v544 + 40) + 40, (uint64_t ***)v544);
                        v549 = *(_QWORD *)(v544 + 24);
                        v550 = *(_QWORD **)(v544 + 32);
                        *v550 = v549;
                        *(_QWORD *)(v549 + 8) = v550;
                        *(_QWORD *)(v544 + 24) = 0;
                        *(_QWORD *)(v544 + 32) = 0;
                        llvm::Value::deleteValue((llvm::Value *)v544);
                      }
                      else
                      {
                        if (*(_QWORD *)(v544 - 32))
                        {
                          **(_QWORD **)(v544 - 16) = *(_QWORD *)(v544 - 24);
                          v545 = *(_QWORD *)(v544 - 24);
                          if (v545)
                            *(_QWORD *)(v545 + 16) = *(_QWORD *)(v544 - 16);
                        }
                        *(_QWORD *)(v544 - 32) = v517;
                        v546 = *v543;
                        *(_QWORD *)(v544 - 24) = *v543;
                        if (v546)
                          *(_QWORD *)(v546 + 16) = v544 - 24;
                        *(_QWORD *)(v544 - 16) = v543;
                        *v543 = v544 - 32;
                      }
                    }
                    else
                    {
                      if (!v542)
                      {
                        v547 = operator new(0x60uLL);
                        v542 = (llvm::Value *)(v547 + 8);
                        v547[13] = v547[13] & 0x38000000 | 1;
                        *(_QWORD *)v547 = 0;
                        *((_QWORD *)v547 + 1) = 0;
                        *((_QWORD *)v547 + 2) = 0;
                        *((_QWORD *)v547 + 3) = v547 + 8;
                        v548 = *(_QWORD *)v81;
                        v716 = "newgv";
                        LOWORD(v720[0]) = 259;
                        llvm::BitCastInst::BitCastInst((uint64_t)(v547 + 8), (uint64_t)v517, v548, (uint64_t)&v716, (uint64_t)v81);
                      }
                      llvm::User::replaceUsesOfWith((llvm::User *)v544, v81, v542);
                    }
                    v541 = *((_QWORD *)v81 + 1);
                  }
                  while (v541);
                }
                v701 = (uint64_t)v705;
                v702 = (char *)v705;
                v703 = 1;
                v704 = 0;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, (uint64_t)v517);
                v551 = (char *)operator new(0x78uLL);
                v553 = (llvm::GlobalVariable *)(v551 + 32);
                *((_DWORD *)v551 + 13) = *((_DWORD *)v551 + 13) & 0x38000000 | 1;
                *((_QWORD *)v551 + 3) = v551 + 32;
                v655 = v551 + 24;
                *((_QWORD *)v551 + 1) = 0;
                *((_QWORD *)v551 + 2) = 0;
                *(_QWORD *)v551 = 0;
                __pd = v551;
                v554 = **(uint64_t ***)v683;
                v555 = *v554;
                v556 = (llvm::PointerType *)(*v554 + 1888);
                v557 = *(llvm::ValueHandleBase **)(*v554 + 1568);
                if (!v557)
                {
                  v634 = *(llvm::ConstantInt **)(v555 + 1888);
                  LODWORD(v717) = *(_DWORD *)(v555 + 1896) >> 8;
                  if (v717 > 0x40)
                    llvm::APInt::initSlowCase((llvm::APInt *)&v716, 0, 0);
                  else
                    v716 = 0;
                  v557 = llvm::ConstantInt::get(v634, (llvm::LLVMContext *)&v716, v552);
                  if (v717 >= 0x41 && v716)
                    MEMORY[0x1CAA32F9C](v716, 0x1000C8000313F17);
                  *(_QWORD *)(v555 + 1568) = v557;
                }
                if ((*((_BYTE *)v683 + 23) & 0x10) != 0)
                {
                  v558 = ***(_QWORD ***)v683;
                  v559 = *(_QWORD *)(v558 + 152);
                  v560 = *(unsigned int *)(v558 + 168);
                  if ((_DWORD)v560)
                  {
                    LODWORD(v561) = (v560 - 1) & ((v683 >> 4) ^ (v683 >> 9));
                    v562 = (llvm::Constant **)(v559 + 16 * v561);
                    v563 = *v562;
                    if (*v562 != v683)
                    {
                      v564 = 1;
                      do
                      {
                        if (v563 == (llvm::Constant *)-4096)
                          goto LABEL_846;
                        v565 = v561 + v564++;
                        v561 = v565 & (v560 - 1);
                        v563 = *(llvm::Constant **)(v559 + 16 * v561);
                      }
                      while (v563 != v683);
                      v562 = (llvm::Constant **)(v559 + 16 * v561);
                    }
                  }
                  else
                  {
LABEL_846:
                    v562 = (llvm::Constant **)(v559 + 16 * v560);
                  }
                  v566 = v562[1];
                  v569 = *(void **)v566;
                  v567 = (char *)v566 + 16;
                  v568 = v569;
                }
                else
                {
                  v568 = 0;
                  v567 = &byte_1C871356D;
                }
                LOWORD(v720[0]) = 773;
                v716 = v567;
                v717 = v568;
                v718 = (uint64_t)".init";
                llvm::GlobalVariable::GlobalVariable((uint64_t)v553, v556, 0, 7, (uint64_t)v557, (uint64_t)&v716, (*((_DWORD *)v683 + 8) >> 10) & 7, 0, 0);
                v727 = v729;
                v728 = 0x400000000;
                v716 = &v718;
                HIDWORD(v717) = 4;
                v718 = (uint64_t)v683;
                v570 = 1;
                do
                {
                  v571 = *((_QWORD *)v716 + --v570);
                  LODWORD(v717) = v570;
                  v572 = *(_QWORD *)(v571 + 8);
                  if (v572)
                  {
                    do
                    {
                      v573 = *(_QWORD *)(v572 + 24);
                      if (v573)
                        v574 = *(_BYTE *)(v573 + 16) == 5;
                      else
                        v574 = 0;
                      if (v574)
                      {
                        v575 = v717;
                        v576 = &v716;
                        if (v717 >= (unint64_t)HIDWORD(v717))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v716, (uint64_t)&v718, v717 + 1, 8);
                          v575 = v717;
                        }
                      }
                      else
                      {
                        v575 = v728;
                        v576 = &v727;
                        if (v728 >= (unint64_t)HIDWORD(v728))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v727, (uint64_t)v729, v728 + 1, 8);
                          v575 = v728;
                        }
                      }
                      *((_QWORD *)*v576 + v575) = v573;
                      ++*((_DWORD *)v576 + 2);
                      v572 = *(_QWORD *)(v572 + 8);
                    }
                    while (v572);
                    v570 = v717;
                  }
                }
                while (v570);
                if (v716 != &v718)
                  free(v716);
                if ((_DWORD)v728)
                {
                  v577 = (uint64_t *)v727;
                  v670 = (uint64_t *)((char *)v727 + 8 * v728);
                  do
                  {
                    v578 = *v577;
                    if (*v577 && *(_BYTE *)(v578 + 16) == 61)
                    {
                      v579 = operator new(0x80uLL);
                      v580 = (uint64_t)(v579 + 16);
                      v579[21] = v579[21] & 0x38000000 | 2;
                      *(_QWORD *)v579 = 0;
                      *((_QWORD *)v579 + 1) = 0;
                      *((_QWORD *)v579 + 2) = 0;
                      *((_QWORD *)v579 + 3) = v579 + 16;
                      *((_QWORD *)v579 + 4) = 0;
                      *((_QWORD *)v579 + 5) = 0;
                      *((_QWORD *)v579 + 6) = 0;
                      *((_QWORD *)v579 + 7) = v579 + 16;
                      Bool = llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)v683, (llvm::LLVMContext *)(*(_BYTE *)(*(_QWORD *)(v578 - 64) + 16) != 19), v581);
                      llvm::StoreInst::StoreInst(v580, (uint64_t)Bool, (uint64_t)v553, 0, 0, (*(_WORD *)(v578 + 18) >> 7) & 7, *(_BYTE *)(v578 + 60), v578);
                    }
                    else
                    {
                      while (1)
                      {
                        v603 = *(_QWORD *)(v578 + 8);
                        if (!v603)
                          break;
                        v583 = *(_QWORD *)(v603 + 24);
                        if (v583 && *(_BYTE *)(v583 + 16) == 81)
                        {
                          v584 = operator new(0x60uLL);
                          v584[13] = v584[13] & 0x38000000 | 1;
                          *(_QWORD *)v584 = 0;
                          *((_QWORD *)v584 + 1) = 0;
                          *((_QWORD *)v584 + 2) = 0;
                          *((_QWORD *)v584 + 3) = v584 + 8;
                          if ((__pd[55] & 0x10) != 0)
                          {
                            v585 = ***(_QWORD ***)v553;
                            v586 = *(_QWORD *)(v585 + 152);
                            v587 = *(unsigned int *)(v585 + 168);
                            if ((_DWORD)v587)
                            {
                              LODWORD(v588) = (v587 - 1) & ((v553 >> 4) ^ (v553 >> 9));
                              v589 = (llvm::GlobalVariable **)(v586 + 16 * v588);
                              v590 = *v589;
                              if (*v589 != v553)
                              {
                                v591 = 1;
                                do
                                {
                                  if (v590 == (llvm::GlobalVariable *)-4096)
                                    goto LABEL_887;
                                  v592 = v588 + v591++;
                                  v588 = v592 & (v587 - 1);
                                  v590 = *(llvm::GlobalVariable **)(v586 + 16 * v588);
                                }
                                while (v590 != v553);
                                v589 = (llvm::GlobalVariable **)(v586 + 16 * v588);
                              }
                            }
                            else
                            {
LABEL_887:
                              v589 = (llvm::GlobalVariable **)(v586 + 16 * v587);
                            }
                            v598 = v589[1];
                            v601 = *(void **)v598;
                            v600 = (char *)v598 + 16;
                            v599 = v601;
                          }
                          else
                          {
                            v599 = 0;
                            v600 = &byte_1C871356D;
                          }
                          v602 = *((_QWORD *)__pd + 7);
                          LOWORD(v720[0]) = 773;
                          v716 = v600;
                          v717 = v599;
                          v718 = (uint64_t)".val";
                          llvm::LoadInst::LoadInst((uint64_t)(v584 + 8), v602, (uint64_t)v553, (uint64_t)&v716, 0, 0, (*(_WORD *)(v578 + 18) >> 7) & 7, *(_BYTE *)(v578 + 60), v578);
                          __asm { BR              X9 }
                        }
                        v593 = v517;
                        if (*(_QWORD *)v517 != *(_QWORD *)v578)
                          v593 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v517, *(llvm::Constant **)v578, 0);
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v701, (uint64_t)v593);
                        if (*(_QWORD *)v603)
                        {
                          **(_QWORD **)(v603 + 16) = *(_QWORD *)(v603 + 8);
                          v594 = *(_QWORD *)(v603 + 8);
                          if (v594)
                            *(_QWORD *)(v594 + 16) = *(_QWORD *)(v603 + 16);
                        }
                        *(_QWORD *)v603 = v593;
                        if (v593)
                        {
                          v597 = *((_QWORD *)v593 + 1);
                          v596 = (_QWORD *)((char *)v593 + 8);
                          v595 = v597;
                          *(_QWORD *)(v603 + 8) = v597;
                          if (v597)
                            *(_QWORD *)(v595 + 16) = v603 + 8;
                          *(_QWORD *)(v603 + 16) = v596;
                          *v596 = v603;
                        }
                      }
                    }
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v578 + 40) + 40, (uint64_t ***)v578);
                    v604 = *(_QWORD *)(v578 + 24);
                    v605 = *(_QWORD **)(v578 + 32);
                    *v605 = v604;
                    *(_QWORD *)(v604 + 8) = v605;
                    *(_QWORD *)(v578 + 24) = 0;
                    *(_QWORD *)(v578 + 32) = 0;
                    llvm::Value::deleteValue((llvm::Value *)v578);
                    ++v577;
                  }
                  while (v577 != v670);
                }
                while (1)
                {
                  v609 = *((_QWORD *)__pd + 5);
                  if (!v609)
                    break;
                  v606 = *(_QWORD *)(v609 + 24);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v606 + 40) + 40, (uint64_t ***)v606);
                  v607 = *(_QWORD *)(v606 + 24);
                  v608 = *(_QWORD **)(v606 + 32);
                  *v608 = v607;
                  *(_QWORD *)(v607 + 8) = v608;
                  *(_QWORD *)(v606 + 24) = 0;
                  *(_QWORD *)(v606 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v606);
                }
                llvm::GlobalVariable::dropAllReferences(v553);
                v610 = *((_QWORD *)__pd + 10);
                if (v610)
                  llvm::Comdat::removeUser(v610, (uint64_t)v553);
                *((_QWORD *)__pd + 10) = 0;
                llvm::Constant::removeDeadConstantUsers((uint64_t)v553);
                llvm::Value::~Value(v553, v611);
                v612 = *((_DWORD *)__pd + 13);
                v613 = v612 & 0xF8000000 | 1;
                *((_DWORD *)__pd + 13) = v613;
                if ((v612 & 0x40000000) != 0)
                {
                  v632 = *(_QWORD **)v655;
                  if (**(_QWORD **)v655)
                  {
                    *(_QWORD *)v632[2] = v632[1];
                    v633 = v632[1];
                    if (v633)
                      *(_QWORD *)(v633 + 16) = v632[2];
                  }
                  operator delete(v632);
                  v615 = v655;
                }
                else
                {
                  if (*(_QWORD *)__pd)
                  {
                    **((_QWORD **)__pd + 2) = *((_QWORD *)__pd + 1);
                    v614 = *((_QWORD *)__pd + 1);
                    if (v614)
                      *(_QWORD *)(v614 + 16) = *((_QWORD *)__pd + 2);
                  }
                  if ((v613 & 0x80000000) != 0)
                    v615 = &__pd[-*((_QWORD *)__pd - 1) - 8];
                  else
                    v615 = __pd;
                }
                operator delete(v615);
                llvm::GlobalVariable::eraseFromParent(v683);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v81 + 5) + 40, (uint64_t ***)v81);
                v616 = *((_QWORD *)v81 + 3);
                v617 = (_QWORD *)*((_QWORD *)v81 + 4);
                *v617 = v616;
                *(_QWORD *)(v616 + 8) = v617;
                *((_QWORD *)v81 + 3) = 0;
                *((_QWORD *)v81 + 4) = 0;
                llvm::Value::deleteValue(v81);
                if (v702 == (char *)v701)
                  v618 = (uint64_t *)((char *)&v703 + 4);
                else
                  v618 = &v703;
                v619 = *(unsigned int *)v618;
                if ((_DWORD)v619)
                {
                  v620 = 8 * v619;
                  v621 = (unint64_t *)v702;
                  while (*v621 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v621;
                    v620 -= 8;
                    if (!v620)
                      goto LABEL_934;
                  }
                }
                else
                {
                  v621 = (unint64_t *)v702;
                }
                v622 = &v702[8 * v619];
                if (v621 != (unint64_t *)v622)
                {
                  v623 = *v621;
                  while (1)
                  {
                    v624 = *(_QWORD *)(v623 + 8);
                    while (v624)
                    {
                      v625 = *(_QWORD *)(v624 + 24);
                      v624 = *(_QWORD *)(v624 + 8);
                      if (v625)
                        v626 = *(unsigned __int8 *)(v625 + 16) >= 0x1Cu;
                      else
                        v626 = 0;
                      if (v626)
                      {
                        v627 = llvm::ConstantFoldInstruction(v625, v672, (llvm::DSOLocalEquivalent **)v693);
                        if (v627)
                        {
                          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v625, v627, (llvm::Value *)1);
                          for (; v624; v624 = *(_QWORD *)(v624 + 8))
                          {
                            if (*(_QWORD *)(v624 + 24) != v625)
                              break;
                          }
                          if (!*(_QWORD *)(v625 + 8) && llvm::wouldInstructionBeTriviallyDead(v625, v693))
                          {
                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v625 + 40) + 40, (uint64_t ***)v625);
                            v628 = *(_QWORD *)(v625 + 24);
                            v629 = *(_QWORD **)(v625 + 32);
                            *v629 = v628;
                            *(_QWORD *)(v628 + 8) = v629;
                            *(_QWORD *)(v625 + 24) = 0;
                            *(_QWORD *)(v625 + 32) = 0;
                            llvm::Value::deleteValue((llvm::Value *)v625);
                          }
                        }
                      }
                    }
                    v630 = v621 + 1;
                    do
                    {
                      if (v630 == (unint64_t *)v622)
                        goto LABEL_934;
                      v631 = *v630++;
                      v623 = v631;
                    }
                    while (v631 > 0xFFFFFFFFFFFFFFFDLL);
                    v621 = v630 - 1;
                  }
                }
LABEL_934:
                if (v727 != v729)
                  free(v727);
                v490 = (_QWORD *)v701;
                v489 = v702;
LABEL_738:
                if (v489 != v490)
                  free(v489);
                goto LABEL_89;
              }
LABEL_804:
              v53 = v683;
              v41 = v654;
              v48 = v661;
LABEL_356:
              if (v48 > 0x14 || v696)
                return v28 | v41;
              v224 = v676;
              if (*(unsigned __int8 *)(*((_QWORD *)v53 - 4) + 16) - 13 < 0xFFFFFFFE)
                v224 = 1;
              if (v224 != 1)
                return v28 | v41;
              v225 = *((_QWORD *)v53 + 3);
              if (v225 == ***(_QWORD ***)v53 + 1888)
                return v28 | v41;
              v226 = *(_DWORD *)(v225 + 8);
              v227 = (*(_DWORD *)(v225 + 8) & 0xFE) != 0x12 && v226 >= 7;
              if (!v227 || v226 == 15)
                return v28 | v41;
              v229 = *((_QWORD *)v53 + 1);
              if (v229)
              {
                v53 = v683;
                while (1)
                {
                  v230 = *(_QWORD *)(v229 + 24);
                  v231 = *(unsigned __int8 *)(v230 + 16);
                  if ((v231 & 0xFE) != 0x3C)
                    break;
                  if (v231 != 60)
                    v230 = *(_QWORD *)(v230 - 64);
                  if (*(_QWORD *)v230 != v225)
                    break;
                  v229 = *(_QWORD *)(v229 + 8);
                  if (!v229)
                    goto LABEL_376;
                }
                return v28 | v41;
              }
LABEL_376:
              v233 = (char *)operator new(0x78uLL);
              v234 = (llvm::Value *)(v233 + 32);
              *((_DWORD *)v233 + 13) = *((_DWORD *)v233 + 13) & 0x38000000 | 1;
              *(_QWORD *)v233 = 0;
              *((_QWORD *)v233 + 1) = 0;
              *((_QWORD *)v233 + 2) = 0;
              *((_QWORD *)v233 + 3) = v233 + 32;
              v235 = *(llvm::Constant **)v53;
              v236 = **(uint64_t ***)v53;
              v237 = *v236;
              v238 = (llvm::PointerType *)(*v236 + 1888);
              v239 = *(llvm::ValueHandleBase **)(*v236 + 1568);
              if (!v239)
              {
                v504 = *(llvm::ConstantInt **)(v237 + 1888);
                LODWORD(v717) = *(_DWORD *)(v237 + 1896) >> 8;
                if (v717 > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&v716, 0, 0);
                else
                  v716 = 0;
                v239 = llvm::ConstantInt::get(v504, (llvm::LLVMContext *)&v716, v232);
                if (v717 >= 0x41 && v716)
                  MEMORY[0x1CAA32F9C](v716, 0x1000C8000313F17);
                *(_QWORD *)(v237 + 1568) = v239;
                v235 = *(llvm::Constant **)v683;
              }
              if ((*((_BYTE *)v683 + 23) & 0x10) != 0)
              {
                v240 = **(_QWORD **)v235;
                v241 = *(_QWORD *)(v240 + 152);
                v242 = *(unsigned int *)(v240 + 168);
                if (!(_DWORD)v242)
                  goto LABEL_648;
                LODWORD(v243) = (v242 - 1) & ((v683 >> 4) ^ (v683 >> 9));
                v244 = (llvm::Constant **)(v241 + 16 * v243);
                v245 = *v244;
                if (*v244 != v683)
                {
                  v246 = 1;
                  while (v245 != (llvm::Constant *)-4096)
                  {
                    v247 = v243 + v246++;
                    v243 = v247 & (v242 - 1);
                    v245 = *(llvm::Constant **)(v241 + 16 * v243);
                    if (v245 == v683)
                    {
                      v244 = (llvm::Constant **)(v241 + 16 * v243);
                      goto LABEL_649;
                    }
                  }
LABEL_648:
                  v244 = (llvm::Constant **)(v241 + 16 * v242);
                }
LABEL_649:
                v411 = v244[1];
                v414 = *(void **)v411;
                v412 = (char *)v411 + 16;
                v413 = v414;
              }
              else
              {
                v413 = 0;
                v412 = &byte_1C871356D;
              }
              LOWORD(v720[0]) = 773;
              v716 = v412;
              v717 = v413;
              v718 = (uint64_t)".b";
              v415 = (llvm::GlobalObject *)llvm::GlobalVariable::GlobalVariable((uint64_t)v234, v238, 0, 7, (uint64_t)v239, (uint64_t)&v716, (*((_DWORD *)v683 + 8) >> 10) & 7, (llvm::Type *)(*((_DWORD *)v235 + 2) >> 8), 0);
              llvm::GlobalObject::copyAttributesFrom(v415, v683);
              v233[112] = v233[112] & 0xFD | *((_BYTE *)v683 + 80) & 2;
              *((_QWORD *)v233 + 13) = *((_QWORD *)v683 + 9);
              v416 = *(_QWORD *)(a1 + 40);
              *((_QWORD *)v233 + 9) = v416;
              if ((v233[55] & 0x10) != 0)
              {
                v417 = *(llvm::ValueSymbolTable **)(v416 + 112);
                if (v417)
                  llvm::ValueSymbolTable::reinsertValue(v417, v234);
              }
              v418 = *((_QWORD *)v683 + 7);
              *((_QWORD *)v233 + 11) = v418;
              *((_QWORD *)v233 + 12) = (char *)v683 + 56;
              *(_QWORD *)(v418 + 8) = v233 + 88;
              *((_QWORD *)v683 + 7) = v233 + 88;
              v694 = (llvm::Constant *)*((_QWORD *)v683 - 4);
              v727 = v729;
              v728 = 0x100000000;
              llvm::GlobalVariable::getDebugInfo((unsigned int *)v683, (uint64_t)&v727);
              __pc = 0;
              if (v656 && *(_BYTE *)(v656 + 16) == 16)
              {
                v420 = (unint64_t *)(v656 + 24);
                v421 = *(_DWORD *)(v656 + 32);
                if (v421 > 0x40)
                  v422 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v656 + 24));
                else
                  v422 = v421 + __clz(*v420) - 64;
                if (v421 - v422 > 0x40)
                {
                  __pc = 0;
                }
                else
                {
                  if (llvm::Constant::isNullValue(v694))
                  {
                    v423 = *(_DWORD *)(v656 + 32);
                    if (v423 > 0x40)
                      v424 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v420) == v423 - 1;
                    else
                      v424 = *v420 == 1;
                    v491 = v424;
                    __pc = v491;
                  }
                  else
                  {
                    __pc = 0;
                  }
                  v492 = *((_QWORD *)v683 - 4);
                  if (v492 && *(_BYTE *)(v492 + 16) == 16)
                  {
                    v493 = (_QWORD *)(v492 + 24);
                    v494 = *(_DWORD *)(v492 + 32);
                    if (v494 < 0x41)
                      goto LABEL_751;
                    if (v494 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v492 + 24)) <= 0x40)
                    {
                      v493 = (_QWORD *)*v493;
LABEL_751:
                      if (*(_DWORD *)(v656 + 32) >= 0x41u)
                        v420 = (unint64_t *)*v420;
                      if ((_DWORD)v728)
                      {
                        *(_QWORD *)v669 = *v420 - *v493;
                        v675 = (_QWORD *)*v493;
                        v495 = (char *)v727;
                        v496 = 8 * v728;
                        do
                        {
                          v497 = (uint64_t *)(*(_QWORD *)v495 - 8 * *(unsigned int *)(*(_QWORD *)v495 + 8));
                          v498 = *v497;
                          v499 = (_QWORD *)v497[1];
                          v501 = sub_1C53E2F94(*(_QWORD *)(a1 + 40) + 272, *((_QWORD *)v233 + 7));
                          if ((_DWORD)v500 == 1)
                          v716 = &v718;
                          v718 = 148;
                          v719 = (v501 >> 3);
                          v720[0] = 16;
                          v720[1] = *(_QWORD *)v669;
                          v721 = xmmword_1C86602D0;
                          v722 = v675;
                          v723 = 34;
                          v717 = (void *)0xC00000008;
                          v502 = llvm::DIExpression::prependOpcodes(v499, (unsigned int *)&v716, 1, 0);
                          v503 = llvm::DIGlobalVariableExpression::getImpl(**(_QWORD ***)v234, v498, (uint64_t)v502, 0, 1);
                          llvm::Value::addMetadata(v234, 0, v503);
                          if (v716 != &v718)
                            free(v716);
                          v495 += 8;
                          v496 -= 8;
                        }
                        while (v496);
                      }
LABEL_666:
                      v428 = *((_QWORD *)v683 + 1);
                      if (!v428)
                      {
LABEL_737:
                        llvm::Value::takeName(v234, v683);
                        llvm::GlobalVariable::eraseFromParent(v683);
                        v489 = v727;
                        v490 = v729;
                        goto LABEL_738;
                      }
                      while (2)
                      {
                        v429 = *(uint64_t ****)(v428 + 24);
                        if (v429 && *((_BYTE *)v429 + 16) == 61)
                        {
                          v430 = (uint64_t)*(v429 - 8);
                          if (v430 == v656 || v430 == (_QWORD)v694)
                          {
                            v432 = v430 == v656;
                            v433 = ***(_QWORD ***)v683;
                            v434 = *(llvm::ConstantInt **)(v433 + 1888);
                            v435 = *(unsigned int *)(v433 + 1896);
                            LODWORD(v717) = v435 >> 8;
                            if (v435 >> 8 > 0x40)
                            {
                              llvm::APInt::initSlowCase((llvm::APInt *)&v716, v432, 0);
                            }
                            else
                            {
                              if (v435 <= 0xFF)
                                v436 = 0;
                              else
                                v436 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v435);
                              v716 = (void *)(v436 & v432);
                            }
                            v437 = llvm::ConstantInt::get(v434, (llvm::LLVMContext *)&v716, v419);
                            if (v717 >= 0x41 && v716)
                              MEMORY[0x1CAA32F9C](v716, 0x1000C8000313F17);
                          }
                          else if (v430 && *(_BYTE *)(v430 + 16) == 60)
                          {
                            v449 = operator new(0x60uLL);
                            v437 = (llvm::ValueHandleBase *)(v449 + 8);
                            v449[13] = v449[13] & 0x38000000 | 1;
                            *(_QWORD *)v449 = 0;
                            *((_QWORD *)v449 + 1) = 0;
                            *((_QWORD *)v449 + 2) = 0;
                            *((_QWORD *)v449 + 3) = v449 + 8;
                            if ((*(_BYTE *)(v430 + 23) & 0x10) != 0)
                            {
                              v450 = ***(_QWORD ***)v430;
                              v451 = *(_QWORD *)(v450 + 152);
                              v452 = *(unsigned int *)(v450 + 168);
                              if (!(_DWORD)v452)
                                goto LABEL_721;
                              LODWORD(v453) = (v452 - 1) & ((v430 >> 4) ^ (v430 >> 9));
                              v454 = (uint64_t *)(v451 + 16 * v453);
                              v455 = *v454;
                              if (*v454 != v430)
                              {
                                v456 = 1;
                                while (v455 != -4096)
                                {
                                  v457 = v453 + v456++;
                                  v453 = v457 & (v452 - 1);
                                  v455 = *(_QWORD *)(v451 + 16 * v453);
                                  if (v455 == v430)
                                  {
                                    v454 = (uint64_t *)(v451 + 16 * v453);
                                    goto LABEL_722;
                                  }
                                }
LABEL_721:
                                v454 = (uint64_t *)(v451 + 16 * v452);
                              }
LABEL_722:
                              v476 = (_QWORD *)v454[1];
                              v479 = (void *)*v476;
                              v478 = (char *)(v476 + 2);
                              v477 = v479;
                            }
                            else
                            {
                              v477 = 0;
                              v478 = &byte_1C871356D;
                            }
                            v480 = *((_QWORD *)v233 + 7);
                            LOWORD(v720[0]) = 773;
                            v716 = v478;
                            v717 = v477;
                            v718 = (uint64_t)".b";
                            llvm::LoadInst::LoadInst((uint64_t)(v449 + 8), v480, (uint64_t)v234, (uint64_t)&v716, 0, 0, (*(_WORD *)(v430 + 18) >> 7) & 7, *(_BYTE *)(v430 + 60), v430);
                          }
                          else
                          {
                            v458 = *(_DWORD *)(v430 + 20);
                            if ((v458 & 0x40000000) != 0)
                              v459 = *(llvm::ValueHandleBase ***)(v430 - 8);
                            else
                              v459 = (llvm::ValueHandleBase **)(v430 - 32 * (v458 & 0x7FFFFFF));
                            v437 = *v459;
                          }
                          v481 = (char *)operator new(0x80uLL);
                          *((_DWORD *)v481 + 21) = *((_DWORD *)v481 + 21) & 0x38000000 | 2;
                          *(_QWORD *)v481 = 0;
                          *((_QWORD *)v481 + 1) = 0;
                          *((_QWORD *)v481 + 2) = 0;
                          *((_QWORD *)v481 + 3) = v481 + 64;
                          *((_QWORD *)v481 + 4) = 0;
                          *((_QWORD *)v481 + 5) = 0;
                          *((_QWORD *)v481 + 6) = 0;
                          *((_QWORD *)v481 + 7) = v481 + 64;
                          llvm::StoreInst::StoreInst((uint64_t)(v481 + 64), (uint64_t)v437, (uint64_t)v234, 0, 0, (*((_WORD *)v429 + 9) >> 7) & 7, *((_BYTE *)v429 + 60), (uint64_t)v429);
                          v482 = (unsigned __int8 *)v429[6];
                          v701 = (uint64_t)v482;
                          if (v482)
                            llvm::MetadataTracking::track((uint64_t)&v701, v482, 2);
                          v485 = (unsigned __int8 *)*((_QWORD *)v481 + 14);
                          v484 = (uint64_t *)(v481 + 112);
                          v483 = v485;
                          if (v485)
                            llvm::MetadataTracking::untrack((uint64_t)v484, v483);
                          v486 = (unsigned __int8 *)v701;
                          *v484 = v701;
                          if (v486)
                          {
                            llvm::MetadataTracking::retrack((uint64_t)&v701, v486, (uint64_t)v484);
                            v701 = 0;
                          }
LABEL_730:
                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v429[5] + 5), v429);
                          v487 = v429[3];
                          v488 = v429[4];
                          *v488 = (uint64_t *)v487;
                          v487[1] = (uint64_t *)v488;
                          v429[3] = 0;
                          v429[4] = 0;
                          llvm::Value::deleteValue((llvm::Value *)v429);
                          v428 = *((_QWORD *)v683 + 1);
                          if (!v428)
                            goto LABEL_737;
                          continue;
                        }
                        break;
                      }
                      v438 = operator new(0x60uLL);
                      v439 = v438;
                      v440 = (uint64_t)(v438 + 8);
                      v438[13] = v438[13] & 0x38000000 | 1;
                      *(_QWORD *)v438 = 0;
                      *((_QWORD *)v438 + 1) = 0;
                      *((_QWORD *)v438 + 2) = 0;
                      *((_QWORD *)v438 + 3) = v438 + 8;
                      if ((*((_BYTE *)v429 + 23) & 0x10) != 0)
                      {
                        v441 = ***v429;
                        v442 = *(_QWORD *)(v441 + 152);
                        v443 = *(unsigned int *)(v441 + 168);
                        if (!(_DWORD)v443)
                          goto LABEL_700;
                        LODWORD(v444) = (v443 - 1) & ((v429 >> 4) ^ (v429 >> 9));
                        v445 = (uint64_t ****)(v442 + 16 * v444);
                        v446 = *v445;
                        if (*v445 != v429)
                        {
                          v447 = 1;
                          while (v446 != (uint64_t ***)-4096)
                          {
                            v448 = v444 + v447++;
                            v444 = v448 & (v443 - 1);
                            v446 = *(uint64_t ****)(v442 + 16 * v444);
                            if (v446 == v429)
                            {
                              v445 = (uint64_t ****)(v442 + 16 * v444);
                              goto LABEL_701;
                            }
                          }
LABEL_700:
                          v445 = (uint64_t ****)(v442 + 16 * v443);
                        }
LABEL_701:
                        v460 = v445[1];
                        v463 = *v460;
                        v462 = (char *)(v460 + 2);
                        v461 = v463;
                      }
                      else
                      {
                        v461 = 0;
                        v462 = &byte_1C871356D;
                      }
                      v464 = *((_QWORD *)v233 + 7);
                      LOWORD(v720[0]) = 773;
                      v716 = v462;
                      v717 = v461;
                      v718 = (uint64_t)".b";
                      llvm::LoadInst::LoadInst((uint64_t)(v438 + 8), v464, (uint64_t)v234, (uint64_t)&v716, 0, 0, (*((_WORD *)v429 + 9) >> 7) & 7, *((_BYTE *)v429 + 60), (uint64_t)v429);
                      if (__pc)
                      {
                        v465 = (char *)operator new(0x60uLL);
                        v466 = (unsigned __int8 **)(v465 + 32);
                        *((_DWORD *)v465 + 13) = *((_DWORD *)v465 + 13) & 0x38000000 | 1;
                        *(_QWORD *)v465 = 0;
                        *((_QWORD *)v465 + 1) = 0;
                        *((_QWORD *)v465 + 2) = 0;
                        *((_QWORD *)v465 + 3) = v465 + 32;
                        v467 = *v429;
                        LOWORD(v720[0]) = 257;
                        llvm::ZExtInst::ZExtInst((uint64_t)(v465 + 32), v440, (uint64_t)v467, (uint64_t)&v716, (uint64_t)v429);
                      }
                      else
                      {
                        LOWORD(v720[0]) = 257;
                        v466 = (unsigned __int8 **)sub_1C4FC8748(v440, (uint64_t *)v656, (uint64_t)v694, (uint64_t)&v716, (uint64_t)v429, 0);
                      }
                      llvm::Value::takeName((llvm::Value *)v466, (llvm::Value *)v429);
                      v468 = v429[6];
                      v724 = v468;
                      if (v468)
                        llvm::MetadataTracking::track((uint64_t)&v724, (unsigned __int8 *)v468, 2);
                      v471 = (unsigned __int8 *)*((_QWORD *)v439 + 10);
                      v470 = (void **)(v439 + 20);
                      v469 = v471;
                      if (v471)
                        llvm::MetadataTracking::untrack((uint64_t)v470, v469);
                      v472 = (unsigned __int8 *)v724;
                      *v470 = v724;
                      if (v472)
                      {
                        llvm::MetadataTracking::retrack((uint64_t)&v724, v472, (uint64_t)v470);
                        v724 = 0;
                      }
                      v473 = (unsigned __int8 *)v429[6];
                      v714[0] = v473;
                      if (v473)
                        llvm::MetadataTracking::track((uint64_t)v714, v473, 2);
                      v474 = v466 + 6;
                      if (v714 == v466 + 6)
                      {
                        if (v714[0])
                          llvm::MetadataTracking::untrack((uint64_t)v714, v714[0]);
                      }
                      else
                      {
                        if (*v474)
                          llvm::MetadataTracking::untrack((uint64_t)(v466 + 6), *v474);
                        v475 = v714[0];
                        *v474 = v714[0];
                        if (v475)
                        {
                          llvm::MetadataTracking::retrack((uint64_t)v714, v475, (uint64_t)(v466 + 6));
                          v714[0] = 0;
                        }
                      }
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v429, (llvm::Value *)v466, (llvm::Value *)1);
                      goto LABEL_730;
                    }
                  }
                }
              }
              if ((_DWORD)v728)
              {
                v425 = (llvm::MDNode **)v727;
                v426 = 8 * v728;
                do
                {
                  v427 = *v425++;
                  llvm::Value::addMetadata(v234, 0, v427);
                  v426 -= 8;
                }
                while (v426);
              }
              goto LABEL_666;
            }
          }
          v508 = *(_QWORD *)(v508 + 8);
          if (!v508)
            goto LABEL_789;
        }
      }
    }
  }
  v85 = v41;
  if (v83 != *(_QWORD *)v81)
    v81 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v81, (llvm::Constant *)v83, 0);
  v86 = v724;
  v87 = v725;
  v88 = *((_QWORD *)v683 + 1);
  if (!v88)
  {
    v89 = 0;
    goto LABEL_309;
  }
  v89 = 0;
  v90 = 1;
  do
  {
    while (1)
    {
      v91 = *(_QWORD *)(v88 + 24);
      v88 = *(_QWORD *)(v88 + 8);
      v92 = *(unsigned __int8 *)(v91 + 16);
      if (!v91 || v92 != 60)
      {
        v90 &= v92 == 61;
        goto LABEL_110;
      }
      v93 = sub_1C56E953C(v91, (uint64_t *)v81);
      if (!*(_QWORD *)(v91 + 8))
        break;
      v90 = 0;
      v89 |= v93;
      if (!v88)
        goto LABEL_355;
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v91 + 40) + 40, (uint64_t ***)v91);
    v94 = *(_QWORD *)(v91 + 24);
    v95 = *(_QWORD **)(v91 + 32);
    *v95 = v94;
    *(_QWORD *)(v94 + 8) = v95;
    *(_QWORD *)(v91 + 24) = 0;
    *(_QWORD *)(v91 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v91);
    v89 = 1;
LABEL_110:
    ;
  }
  while (v88);
  if ((v90 & 1) == 0)
    goto LABEL_355;
LABEL_309:
  if (sub_1C56E7610((uint64_t)v683))
  {
    v89 |= sub_1C56E7800((uint64_t)v683, (uint64_t)v86, v87);
  }
  else
  {
    sub_1C56E7DA0(v683, v672);
    v89 = 1;
  }
  if (!*((_QWORD *)v683 + 1))
  {
    v79 = v683;
    goto LABEL_88;
  }
LABEL_355:
  v53 = v683;
  v41 = v85;
  v48 = v661;
  if ((v89 & 1) == 0)
    goto LABEL_356;
LABEL_89:
  v41 = 1;
  return v28 | v41;
}

uint64_t sub_1C56E7450(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t i;
  uint64_t v6;

  result = sub_1C56E9B2C(**(uint64_t ***)a1, *(_QWORD *)(a1 + 112), a2);
  *(_QWORD *)(a1 + 112) = result;
  for (i = *(_QWORD *)(a1 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v6 = *(_QWORD *)(i + 24);
    if (*(_BYTE *)(v6 + 16) != 4)
    {
      result = sub_1C56E9B2C(**(uint64_t ***)a1, *(_QWORD *)(v6 + 64), a2);
      *(_QWORD *)(v6 + 64) = result;
    }
  }
  return result;
}

BOOL sub_1C56E74C8(uint64_t a1)
{
  int v1;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::BasicBlock *v7;
  uint64_t v8;
  _BOOL8 result;

  v1 = (*(unsigned __int16 *)(a1 + 18) >> 4) & 0x3FF;
  if (v1 != 70 && v1 != 0)
    return 0;
  for (i = *(_QWORD *)(a1 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 24);
    if (*(_BYTE *)(v4 + 16) == 84 && (*(_WORD *)(v4 + 18) & 3) == 2)
      return 0;
  }
  v5 = a1 + 72;
  v6 = *(_QWORD *)(a1 + 80);
  if (v6 == a1 + 72)
    return 1;
  do
  {
    if (v6)
      v7 = (llvm::BasicBlock *)(v6 - 24);
    else
      v7 = 0;
    v8 = llvm::BasicBlock::getTerminatingMustTailCall(v7);
    result = v8 == 0;
    if (v8)
      break;
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6 != v5);
  return result;
}

BOOL sub_1C56E7570(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t BlockFreq;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;

  v4 = (unint64_t)(((((unint64_t)dword_1ED80B7C0 << 31) | 0x30)
                         * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
  BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(a2, *(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 80);
  if (v6)
    v7 = v6 - 24;
  else
    v7 = 0;
  v8 = llvm::BlockFrequencyInfo::getBlockFreq(a2, v7);
  v10 = v4;
  return BlockFreq < llvm::BranchProbability::scale((llvm::BranchProbability *)&v10, v8);
}

BOOL sub_1C56E7610(uint64_t a1)
{
  _BOOL8 v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v15;
  int v16;
  unsigned int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 32) & 0xF) == 8)
    return 0;
  v15 = v18;
  v17 = 4;
  v18[0] = *(_QWORD *)(a1 + 24);
  v2 = 20;
  LODWORD(v3) = 1;
  while (2)
  {
    v4 = v15;
    v5 = *((_QWORD *)v15 + v3 - 1);
    v3 = (v3 - 1);
    v16 = v3;
    v6 = *(_DWORD *)(v5 + 8);
    v7 = 0;
    switch((char)v6)
    {
      case 15:
        goto LABEL_25;
      case 16:
        if ((v6 & 0x100) == 0)
          goto LABEL_24;
        v8 = *(unsigned int *)(v5 + 12);
        if (!(_DWORD)v8)
          goto LABEL_21;
        v9 = *(uint64_t **)(v5 + 16);
        v10 = 8 * v8;
        do
        {
          v11 = *v9;
          v12 = *(_DWORD *)(*v9 + 8);
          if (v12 - 16 < 2)
            goto LABEL_13;
          if (v12 == 15)
            goto LABEL_24;
          if ((v12 & 0xFE) == 0x12)
          {
LABEL_13:
            if (v3 >= v17)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v18, v3 + 1, 8);
              LODWORD(v3) = v16;
            }
            *((_QWORD *)v15 + v3) = v11;
            LODWORD(v3) = ++v16;
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
        goto LABEL_21;
      case 17:
        v13 = *(_QWORD *)(v5 + 24);
        if (v3 >= v17)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v18, v3 + 1, 8);
          v4 = v15;
          LODWORD(v3) = v16;
        }
        v4[v3] = v13;
        LODWORD(v3) = ++v16;
        goto LABEL_21;
      case 18:
      case 19:
        if (*(_BYTE *)(*(_QWORD *)(v5 + 24) + 8) != 15)
          goto LABEL_21;
LABEL_24:
        v7 = 0;
        goto LABEL_25;
      default:
LABEL_21:
        v7 = --v2 != 0;
        if (v2 && (_DWORD)v3)
          continue;
LABEL_25:
        v1 = !v7;
        if (v15 != v18)
          free(v15);
        break;
    }
    return v1;
  }
}

uint64_t sub_1C56E7800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const llvm::Constant *v16;
  llvm::Value *v17;
  BOOL v18;
  llvm::Value *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t *v56;
  unsigned int v57;
  uint64_t v59;
  _QWORD *v60;
  __int128 v62;
  __int128 v63;
  void *v64;
  uint64_t v65;
  _QWORD v66[66];

  v66[64] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v62 = a2;
  *((_QWORD *)&v62 + 1) = a3;
  v64 = v66;
  v65 = 0x2000000000;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
  {
    v7 = 0;
    goto LABEL_102;
  }
  v7 = 0;
  do
  {
    v8 = *(_QWORD *)(v3 + 24);
    v3 = *(_QWORD *)(v3 + 8);
    if (v8 && *(_BYTE *)(v8 + 16) == 61)
    {
      v9 = *(_QWORD *)(v8 - 64);
      goto LABEL_8;
    }
    if (sub_1C5392540(v8))
    {
      v9 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
LABEL_8:
      v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 <= 0x14)
        goto LABEL_9;
      if (v10 >= 0x1C)
      {
        v13 = *(_QWORD *)(v9 + 8);
        if (v13)
        {
          if (!*(_QWORD *)(v13 + 8))
          {
            v14 = v65;
            if (v65 >= (unint64_t)HIDWORD(v65))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v65 + 1, 16);
              v14 = v65;
            }
            v15 = (char *)v64 + 16 * v14;
            *(_QWORD *)v15 = v9;
LABEL_17:
            *((_QWORD *)v15 + 1) = v8;
            LODWORD(v65) = v65 + 1;
            continue;
          }
        }
      }
      continue;
    }
    if (sub_1C56E895C(v8))
    {
      v17 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      if (v17)
        v18 = *((_BYTE *)v17 + 16) == 3;
      else
        v18 = 0;
      if (v18 && (*((_BYTE *)v17 + 80) & 1) != 0)
      {
LABEL_9:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v8 + 40) + 40, (uint64_t ***)v8);
        v11 = *(_QWORD *)(v8 + 24);
        v12 = *(_QWORD **)(v8 + 32);
        *v12 = v11;
        *(_QWORD *)(v11 + 8) = v12;
        *(_QWORD *)(v8 + 24) = 0;
        *(_QWORD *)(v8 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v8);
LABEL_10:
        v7 = 1;
        continue;
      }
      v19 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32));
      if (v19)
        v20 = *((unsigned __int8 *)v19 + 16) >= 0x1Cu;
      else
        v20 = 0;
      if (v20)
      {
        v21 = *((_QWORD *)v19 + 1);
        if (v21)
        {
          if (!*(_QWORD *)(v21 + 8))
          {
            v22 = v65;
            if (v65 >= (unint64_t)HIDWORD(v65))
            {
              v24 = v19;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v65 + 1, 16);
              v19 = v24;
              v22 = v65;
            }
            v15 = (char *)v64 + 16 * v22;
            *(_QWORD *)v15 = v19;
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(v8 + 16);
      if (v8 && v23 == 5)
      {
        if (!*(_QWORD *)(v8 + 8))
        {
          llvm::Constant::destroyConstant((int32x2_t ****)v8);
          goto LABEL_10;
        }
      }
      else if (v8 && v23 <= 0x14 && (llvm::isSafeToDestroyConstant((llvm *)v8, v16) & 1) != 0)
      {
        llvm::Constant::destroyConstant((int32x2_t ****)v8);
        LODWORD(v65) = 0;
        sub_1C56E7800(a1, a2, a3);
        v7 = 1;
        goto LABEL_102;
      }
    }
  }
  while (v3);
  v25 = v65;
  if ((_DWORD)v65)
  {
    v26 = 0;
    do
    {
      v27 = v64;
      v28 = *((_QWORD *)v64 + 2 * v26);
      v63 = v62;
      v30 = (_BYTE *)(v28 + 16);
      v29 = *(unsigned __int8 *)(v28 + 16);
      if (v29 < 0x15)
      {
LABEL_86:
        v48 = v27[2 * v26 + 1];
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v48 + 40) + 40, (uint64_t ***)v48);
        v49 = *(_QWORD *)(v48 + 24);
        v50 = *(_QWORD **)(v48 + 32);
        *v50 = v49;
        *(_QWORD *)(v49 + 8) = v50;
        *(_QWORD *)(v48 + 24) = 0;
        *(_QWORD *)(v48 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v48);
        v51 = *((_QWORD *)v64 + 2 * v26);
        if (!llvm::isAllocationFn(v51, (uint64_t (*)(uint64_t, uint64_t))sub_1C6294D98, (uint64_t)&v62))
        {
          while (1)
          {
            v55 = *(_DWORD *)(v51 + 20);
            v56 = (v55 & 0x40000000) != 0 ? *(uint64_t **)(v51 - 8) : (uint64_t *)(v51 - 32 * (v55 & 0x7FFFFFF));
            v52 = *v56;
            v57 = *(unsigned __int8 *)(*v56 + 16);
            if (!v52 || v57 < 0x1C)
              break;
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v51 + 40) + 40, (uint64_t ***)v51);
            v59 = *(_QWORD *)(v51 + 24);
            v60 = *(_QWORD **)(v51 + 32);
            *v60 = v59;
            *(_QWORD *)(v59 + 8) = v60;
            *(_QWORD *)(v51 + 24) = 0;
            *(_QWORD *)(v51 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v51);
            v51 = v52;
            if (llvm::isAllocationFn(v52, (uint64_t (*)(uint64_t, uint64_t))sub_1C6294D98, (uint64_t)&v62))
              goto LABEL_88;
          }
        }
        v52 = v51;
LABEL_88:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v52 + 40) + 40, (uint64_t ***)v52);
        v53 = *(_QWORD *)(v52 + 24);
        v54 = *(_QWORD **)(v52 + 32);
        *v54 = v53;
        *(_QWORD *)(v53 + 8) = v54;
        *(_QWORD *)(v52 + 24) = 0;
        *(_QWORD *)(v52 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v52);
        v7 = 1;
      }
      else
      {
        while (1)
        {
          v31 = *(_QWORD *)(v28 + 8);
          if (!v31 || *(_QWORD *)(v31 + 8) || v29 <= 0x3C && ((1 << v29) & 0x1000000200200000) != 0)
            break;
          if (llvm::isAllocationFn(v28, (uint64_t (*)(uint64_t, uint64_t))sub_1C6294D98, (uint64_t)&v63))
            goto LABEL_85;
          v32 = *(unsigned __int8 *)(v28 + 16) - 33;
          if (v32 <= 0x37)
          {
            if (((1 << (*(_BYTE *)(v28 + 16) - 33)) & 0x808001D0000010) != 0)
              break;
            if (((1 << (*(_BYTE *)(v28 + 16) - 33)) & 0x8000000000041) != 0)
            {
              v37 = *(_QWORD *)(v28 + 64);
              if (!v37 || (*(_BYTE *)(v37 + 17) & 0x30) == 0)
              {
                v38 = *(_DWORD *)(v28 + 20);
                if (v38 < 0)
                {
                  v39 = v28 - 32 * (v38 & 0x7FFFFFF);
                  v42 = *(_QWORD *)(v39 - 8);
                  v40 = v39 - 8;
                  v41 = v42;
                  if (v42)
                  {
                    v43 = -v41;
                    do
                    {
                      v44 = *(_DWORD *)(*(_QWORD *)(v40 + v43) + 8);
                      v45 = v44 > 7;
                      v46 = (1 << v44) & 0x83;
                      if (v45 || v46 == 0)
                        goto LABEL_89;
                      v43 += 16;
                    }
                    while (v43);
                  }
                }
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v28, 45) & 1) == 0
                  && !llvm::CallBase::hasFnAttrOnCalledFunction(v28, 44))
                {
                  break;
                }
              }
            }
            else if (v32 == 27 && (*(_WORD *)(v28 + 18) & 0x301) != 0)
            {
              break;
            }
          }
          if ((llvm::Instruction::mayThrow((llvm::Instruction *)v28) & 1) != 0
            || !llvm::Instruction::willReturn((llvm::Instruction *)v28))
          {
            break;
          }
          v33 = *(_DWORD *)(v28 + 20);
          v34 = v33 & 0x7FFFFFF;
          if (*v30 == 62)
          {
            if ((_DWORD)v34 != 1)
            {
              v35 = 1;
              while (*(_BYTE *)(*(_QWORD *)(v28 - 32 * v34 + 32 * v35) + 16) == 16)
              {
                if ((_DWORD)v34 == ++v35)
                  goto LABEL_64;
              }
              break;
            }
          }
          else if ((_DWORD)v34 != 1)
          {
            break;
          }
LABEL_64:
          if ((v33 & 0x40000000) != 0)
            v36 = *(uint64_t **)(v28 - 8);
          else
            v36 = (uint64_t *)(v28 - 32 * v34);
          v28 = *v36;
          v30 = (_BYTE *)(*v36 + 16);
          v29 = *v30;
          if (v29 <= 0x14)
          {
LABEL_85:
            v27 = v64;
            goto LABEL_86;
          }
        }
      }
LABEL_89:
      ++v26;
    }
    while (v26 != v25);
  }
LABEL_102:
  if (v64 != v66)
    free(v64);
  return v7 & 1;
}

BOOL sub_1C56E7DA0(llvm *a1, const llvm::APInt *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  llvm::Type *v15;
  int v16;
  int v17;
  llvm::PoisonValue *v18;
  int v19;
  llvm::Type *v20;
  llvm::Type *v21;
  uint64_t *v22;
  uint64_t v23;
  const llvm::DataLayout *v24;
  llvm::UndefValue *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int32x2_t ****v36;
  BOOL v37;
  _QWORD *v38;
  int v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  int32x2_t ****v47;
  int32x2_t *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int32x2_t *****v53;
  int32x2_t ****v54;
  int v55;
  int v56;
  uint64_t v57;
  int32x2_t ****v58;
  BOOL v59;
  _QWORD *v60;
  int v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  int32x2_t ****v69;
  int32x2_t *v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  int32x2_t *****v75;
  int32x2_t ****v76;
  int v77;
  int v78;
  uint64_t v79;
  int32x2_t ****v80;
  BOOL v81;
  _QWORD *v82;
  int v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  int32x2_t ****v91;
  int32x2_t *v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  int32x2_t *****v97;
  int32x2_t ****v98;
  int v99;
  int v100;
  uint64_t v101;
  _QWORD *v102;
  llvm::Value *AllOnesValue;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int32x2_t ****v108;
  BOOL v109;
  _QWORD *v110;
  int v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  int32x2_t ****v119;
  int32x2_t *v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  int32x2_t *****v125;
  int32x2_t ****v126;
  int v127;
  int v128;
  uint64_t v129;
  _QWORD *v130;
  unsigned int v131;
  BOOL v132;
  void (**v133)(void);
  const void *v135;
  unsigned int IndexTypeSizeInBits;
  _BYTE *v137;
  _BYTE *v138;
  uint64_t v139;
  int v140;
  _BYTE v141[64];
  uint64_t v142;
  unint64_t *v143;
  int32x2_t ****v144;
  _QWORD v145[3];
  _QWORD *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD v152[10];

  v152[8] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 - 4);
  v5 = *((_QWORD *)a1 + 1);
  v150 = v152;
  v151 = 0x800000000;
  if (v5)
  {
    v6 = 0;
    v7 = v5;
    do
    {
      ++v6;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
    if (v6 - 1 >= 8)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v6, 8);
      v8 = v151;
      v10 = v150;
      v9 = v151;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = v152;
    }
    v11 = &v10[v8];
    do
    {
      *v11++ = *(_QWORD *)(v5 + 24);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
    v12 = v9 + v6;
  }
  else
  {
    v12 = 0;
  }
  LODWORD(v151) = v12;
  v137 = v141;
  v138 = v141;
  v139 = 8;
  v140 = 0;
  v147 = (char *)&v149;
  v148 = 0x200000000;
  v13 = 0;
  if (v12)
  {
    while (1)
    {
      v14 = v150[v12 - 1];
      LODWORD(v151) = v12 - 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v137, v14);
      if ((_BYTE)v15)
        break;
LABEL_181:
      v12 = v151;
      if (!(_DWORD)v151)
        goto LABEL_192;
    }
    v16 = *(unsigned __int8 *)(v14 + 16);
    if (v16 != 77)
    {
      if (v16 != 5)
      {
LABEL_16:
        if (v16 > 60)
        {
          if (v16 == 61)
          {
            v29 = *(_DWORD *)(v14 + 20);
            if ((v29 & 0x40000000) != 0)
            {
              v31 = *(_QWORD *)(v14 - 8);
              v30 = v29 & 0x7FFFFFF;
              if (!v30)
                goto LABEL_180;
            }
            else
            {
              v30 = v29 & 0x7FFFFFF;
              v31 = v14 - 32 * v30;
              if (!v30)
                goto LABEL_180;
            }
            v35 = v31 + 32 * v30;
            do
            {
              v36 = *(int32x2_t *****)v31;
              if (*(_QWORD *)v31)
                v37 = *(unsigned __int8 *)(*(_QWORD *)v31 + 16) >= 0x1Cu;
              else
                v37 = 0;
              if (v37)
              {
                v142 = 6;
                v143 = 0;
                v144 = v36;
                if (((unint64_t)v36 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v142);
                v38 = (_QWORD *)sub_1C5087E70((unsigned int *)&v147, (unint64_t)&v142, 1);
                v39 = v148;
                v40 = &v147[24 * v148];
                *(_QWORD *)v40 = 6;
                *((_QWORD *)v40 + 1) = 0;
                v41 = (unint64_t)(v40 + 8);
                v42 = v38[2];
                *((_QWORD *)v40 + 2) = v42;
                if (v42 != -8192 && v42 != -4096 && v42 != 0)
                {
                  v44 = *v38 & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)v40 + 1) = *(_QWORD *)v44;
                  *(_QWORD *)v44 = v40;
                  *(_QWORD *)v40 = v44 | 6;
                  v45 = (uint64_t *)*((_QWORD *)v40 + 1);
                  if (v45)
                    *v45 = *v45 & 7 | v41;
                }
                LODWORD(v148) = v39 + 1;
                if (v144 != (int32x2_t ****)-8192 && v144 != (int32x2_t ****)-4096 && v144)
                {
                  v46 = v142 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v142 & 0xFFFFFFFFFFFFFFF8) = v143;
                  if (v143)
                  {
                    *v143 = *v143 & 7 | v46;
                  }
                  else
                  {
                    v47 = v144;
                    v48 = ***v144;
                    v49 = (unint64_t)v48[303];
                    if (v49 <= v46)
                    {
                      v50 = v48[305].u32[0];
                      if (v49 + 16 * v50 > v46)
                      {
                        v51 = v50 - 1;
                        LODWORD(v52) = v51 & ((v144 >> 4) ^ (v144 >> 9));
                        v53 = (int32x2_t *****)(v49 + 16 * v52);
                        v54 = *v53;
                        if (v144 == *v53)
                        {
LABEL_74:
                          *v53 = (int32x2_t ****)-8192;
                          v48[304] = vadd_s32(v48[304], (int32x2_t)0x1FFFFFFFFLL);
                          v47 = v144;
                        }
                        else
                        {
                          v55 = 1;
                          while (v54 != (int32x2_t ****)-4096)
                          {
                            v56 = v52 + v55++;
                            v52 = v56 & v51;
                            v54 = *(int32x2_t *****)(v49 + 16 * v52);
                            if (v144 == v54)
                            {
                              v53 = (int32x2_t *****)(v49 + 16 * v52);
                              goto LABEL_74;
                            }
                          }
                        }
                        *((_BYTE *)v47 + 17) &= ~1u;
                      }
                    }
                  }
                }
              }
              v31 += 32;
            }
            while (v31 != v35);
            goto LABEL_180;
          }
          if (v16 != 62 && v16 != 78)
            goto LABEL_41;
          goto LABEL_40;
        }
        if (v16 != 5)
        {
          if (v16 == 60)
          {
            v18 = *(llvm::PoisonValue **)v14;
            v19 = *(unsigned __int8 *)(v4 + 16);
            if (v19 == 12)
            {
              AllOnesValue = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v14, v15);
            }
            else if ((v19 - 11) <= 1)
            {
              AllOnesValue = llvm::UndefValue::get(*(llvm::UndefValue **)v14, v15);
            }
            else if (!llvm::Constant::isNullValue((llvm::Constant *)v4)
                   || (*((_DWORD *)v18 + 2) & 0xFE) == 0xA)
            {
              if (!llvm::Constant::isAllOnesValue((llvm::Constant *)v4)
                || ((*((_DWORD *)v18 + 2) & 0xFE) == 0x12
                  ? (v131 = *(unsigned __int8 *)(**((_QWORD **)v18 + 2) + 8))
                  : (v131 = *((_DWORD *)v18 + 2)),
                    v131 != 13 && v131 > 6))
              {
LABEL_27:
                v22 = *(uint64_t **)(v14 - 32);
                IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a2, *v22);
                if (IndexTypeSizeInBits > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&v135, 0, 0);
                else
                  v135 = 0;
                if ((llvm *)llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v22, a2, &v135, 1, 0, 0, v23) == a1)
                {
                  v25 = llvm::ConstantFoldLoadFromConst((llvm::Type **)v4, (llvm::Constant ***)v18, &v135, a2, v24);
                  if (v25)
                  {
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v14, v25, (llvm::Value *)1);
                    v26 = *(_DWORD *)(v14 + 20);
                    if ((v26 & 0x40000000) != 0)
                    {
                      v28 = *(_QWORD *)(v14 - 8);
                      v27 = v26 & 0x7FFFFFF;
                      if (!v27)
                        goto LABEL_139;
                    }
                    else
                    {
                      v27 = v26 & 0x7FFFFFF;
                      v28 = v14 - 32 * v27;
                      if (!v27)
                        goto LABEL_139;
                    }
                    v79 = v28 + 32 * v27;
                    do
                    {
                      v80 = *(int32x2_t *****)v28;
                      if (*(_QWORD *)v28)
                        v81 = *(unsigned __int8 *)(*(_QWORD *)v28 + 16) >= 0x1Cu;
                      else
                        v81 = 0;
                      if (v81)
                      {
                        v142 = 6;
                        v143 = 0;
                        v144 = v80;
                        if (((unint64_t)v80 | 0x1000) != 0xFFFFFFFFFFFFF000)
                          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v142);
                        v82 = (_QWORD *)sub_1C5087E70((unsigned int *)&v147, (unint64_t)&v142, 1);
                        v83 = v148;
                        v84 = &v147[24 * v148];
                        *(_QWORD *)v84 = 6;
                        *((_QWORD *)v84 + 1) = 0;
                        v85 = (unint64_t)(v84 + 8);
                        v86 = v82[2];
                        *((_QWORD *)v84 + 2) = v86;
                        if (v86 != -8192 && v86 != -4096 && v86 != 0)
                        {
                          v88 = *v82 & 0xFFFFFFFFFFFFFFF8;
                          *((_QWORD *)v84 + 1) = *(_QWORD *)v88;
                          *(_QWORD *)v88 = v84;
                          *(_QWORD *)v84 = v88 | 6;
                          v89 = (uint64_t *)*((_QWORD *)v84 + 1);
                          if (v89)
                            *v89 = *v89 & 7 | v85;
                        }
                        LODWORD(v148) = v83 + 1;
                        if (v144 != (int32x2_t ****)-8192 && v144 != (int32x2_t ****)-4096 && v144)
                        {
                          v90 = v142 & 0xFFFFFFFFFFFFFFF8;
                          *(_QWORD *)(v142 & 0xFFFFFFFFFFFFFFF8) = v143;
                          if (v143)
                          {
                            *v143 = *v143 & 7 | v90;
                          }
                          else
                          {
                            v91 = v144;
                            v92 = ***v144;
                            v93 = (unint64_t)v92[303];
                            if (v93 <= v90)
                            {
                              v94 = v92[305].u32[0];
                              if (v93 + 16 * v94 > v90)
                              {
                                v95 = v94 - 1;
                                LODWORD(v96) = v95 & ((v144 >> 4) ^ (v144 >> 9));
                                v97 = (int32x2_t *****)(v93 + 16 * v96);
                                v98 = *v97;
                                if (v144 == *v97)
                                {
LABEL_135:
                                  *v97 = (int32x2_t ****)-8192;
                                  v92[304] = vadd_s32(v92[304], (int32x2_t)0x1FFFFFFFFLL);
                                  v91 = v144;
                                }
                                else
                                {
                                  v99 = 1;
                                  while (v98 != (int32x2_t ****)-4096)
                                  {
                                    v100 = v96 + v99++;
                                    v96 = v100 & v95;
                                    v98 = *(int32x2_t *****)(v93 + 16 * v96);
                                    if (v144 == v98)
                                    {
                                      v97 = (int32x2_t *****)(v93 + 16 * v96);
                                      goto LABEL_135;
                                    }
                                  }
                                }
                                *((_BYTE *)v91 + 17) &= ~1u;
                              }
                            }
                          }
                        }
                      }
                      v28 += 32;
                    }
                    while (v28 != v79);
LABEL_139:
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v14 + 40) + 40, (uint64_t ***)v14);
                    v101 = *(_QWORD *)(v14 + 24);
                    v102 = *(_QWORD **)(v14 + 32);
                    *v102 = v101;
                    *(_QWORD *)(v101 + 8) = v102;
                    *(_QWORD *)(v14 + 24) = 0;
                    *(_QWORD *)(v14 + 32) = 0;
                    llvm::Value::deleteValue((llvm::Value *)v14);
                    v13 = 1;
                  }
                }
                if (IndexTypeSizeInBits >= 0x41 && v135)
                  MEMORY[0x1CAA32F9C](v135, 0x1000C8000313F17);
                goto LABEL_181;
              }
              AllOnesValue = llvm::Constant::getAllOnesValue(v18, v21);
            }
            else
            {
              AllOnesValue = (llvm::Value *)llvm::Constant::getNullValue(v18, v20);
            }
            if (!AllOnesValue)
              goto LABEL_27;
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v14, AllOnesValue, (llvm::Value *)1);
            v104 = *(_DWORD *)(v14 + 20);
            if ((v104 & 0x40000000) != 0)
            {
              v106 = *(_QWORD *)(v14 - 8);
              v105 = v104 & 0x7FFFFFF;
            }
            else
            {
              v105 = v104 & 0x7FFFFFF;
              v106 = v14 - 32 * v105;
            }
            if (v105)
            {
              v107 = v106 + 32 * v105;
              do
              {
                v108 = *(int32x2_t *****)v106;
                if (*(_QWORD *)v106)
                  v109 = *(unsigned __int8 *)(*(_QWORD *)v106 + 16) >= 0x1Cu;
                else
                  v109 = 0;
                if (v109)
                {
                  v142 = 6;
                  v143 = 0;
                  v144 = v108;
                  if (((unint64_t)v108 | 0x1000) != 0xFFFFFFFFFFFFF000)
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v142);
                  v110 = (_QWORD *)sub_1C5087E70((unsigned int *)&v147, (unint64_t)&v142, 1);
                  v111 = v148;
                  v112 = &v147[24 * v148];
                  *(_QWORD *)v112 = 6;
                  *((_QWORD *)v112 + 1) = 0;
                  v113 = (unint64_t)(v112 + 8);
                  v114 = v110[2];
                  *((_QWORD *)v112 + 2) = v114;
                  if (v114 != -8192 && v114 != -4096 && v114 != 0)
                  {
                    v116 = *v110 & 0xFFFFFFFFFFFFFFF8;
                    *((_QWORD *)v112 + 1) = *(_QWORD *)v116;
                    *(_QWORD *)v116 = v112;
                    *(_QWORD *)v112 = v116 | 6;
                    v117 = (uint64_t *)*((_QWORD *)v112 + 1);
                    if (v117)
                      *v117 = *v117 & 7 | v113;
                  }
                  LODWORD(v148) = v111 + 1;
                  if (v144 != (int32x2_t ****)-8192 && v144 != (int32x2_t ****)-4096 && v144)
                  {
                    v118 = v142 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v142 & 0xFFFFFFFFFFFFFFF8) = v143;
                    if (v143)
                    {
                      *v143 = *v143 & 7 | v118;
                    }
                    else
                    {
                      v119 = v144;
                      v120 = ***v144;
                      v121 = (unint64_t)v120[303];
                      if (v121 <= v118)
                      {
                        v122 = v120[305].u32[0];
                        if (v121 + 16 * v122 > v118)
                        {
                          v123 = v122 - 1;
                          LODWORD(v124) = v123 & ((v144 >> 4) ^ (v144 >> 9));
                          v125 = (int32x2_t *****)(v121 + 16 * v124);
                          v126 = *v125;
                          if (v144 == *v125)
                          {
LABEL_176:
                            *v125 = (int32x2_t ****)-8192;
                            v120[304] = vadd_s32(v120[304], (int32x2_t)0x1FFFFFFFFLL);
                            v119 = v144;
                          }
                          else
                          {
                            v127 = 1;
                            while (v126 != (int32x2_t ****)-4096)
                            {
                              v128 = v124 + v127++;
                              v124 = v128 & v123;
                              v126 = *(int32x2_t *****)(v121 + 16 * v124);
                              if (v144 == v126)
                              {
                                v125 = (int32x2_t *****)(v121 + 16 * v124);
                                goto LABEL_176;
                              }
                            }
                          }
                          *((_BYTE *)v119 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                }
                v106 += 32;
              }
              while (v106 != v107);
            }
            goto LABEL_180;
          }
LABEL_41:
          if (!sub_1C4DE85D0(v14)
            || llvm::getUnderlyingObject(*(llvm **)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF)), (const llvm::Value *)6) != a1)
          {
            goto LABEL_181;
          }
          v32 = *(_DWORD *)(v14 + 20);
          if ((v32 & 0x40000000) == 0)
          {
            v33 = v32 & 0x7FFFFFF;
            v34 = v14 - 32 * v33;
            if (!v33)
              goto LABEL_180;
LABEL_78:
            v57 = v34 + 32 * v33;
            do
            {
              v58 = *(int32x2_t *****)v34;
              if (*(_QWORD *)v34)
                v59 = *(unsigned __int8 *)(*(_QWORD *)v34 + 16) >= 0x1Cu;
              else
                v59 = 0;
              if (v59)
              {
                v142 = 6;
                v143 = 0;
                v144 = v58;
                if (((unint64_t)v58 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v142);
                v60 = (_QWORD *)sub_1C5087E70((unsigned int *)&v147, (unint64_t)&v142, 1);
                v61 = v148;
                v62 = &v147[24 * v148];
                *(_QWORD *)v62 = 6;
                *((_QWORD *)v62 + 1) = 0;
                v63 = (unint64_t)(v62 + 8);
                v64 = v60[2];
                *((_QWORD *)v62 + 2) = v64;
                if (v64 != -8192 && v64 != -4096 && v64 != 0)
                {
                  v66 = *v60 & 0xFFFFFFFFFFFFFFF8;
                  *((_QWORD *)v62 + 1) = *(_QWORD *)v66;
                  *(_QWORD *)v66 = v62;
                  *(_QWORD *)v62 = v66 | 6;
                  v67 = (uint64_t *)*((_QWORD *)v62 + 1);
                  if (v67)
                    *v67 = *v67 & 7 | v63;
                }
                LODWORD(v148) = v61 + 1;
                if (v144 != (int32x2_t ****)-8192 && v144 != (int32x2_t ****)-4096 && v144)
                {
                  v68 = v142 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v142 & 0xFFFFFFFFFFFFFFF8) = v143;
                  if (v143)
                  {
                    *v143 = *v143 & 7 | v68;
                  }
                  else
                  {
                    v69 = v144;
                    v70 = ***v144;
                    v71 = (unint64_t)v70[303];
                    if (v71 <= v68)
                    {
                      v72 = v70[305].u32[0];
                      if (v71 + 16 * v72 > v68)
                      {
                        v73 = v72 - 1;
                        LODWORD(v74) = v73 & ((v144 >> 4) ^ (v144 >> 9));
                        v75 = (int32x2_t *****)(v71 + 16 * v74);
                        v76 = *v75;
                        if (v144 == *v75)
                        {
LABEL_105:
                          *v75 = (int32x2_t ****)-8192;
                          v70[304] = vadd_s32(v70[304], (int32x2_t)0x1FFFFFFFFLL);
                          v69 = v144;
                        }
                        else
                        {
                          v77 = 1;
                          while (v76 != (int32x2_t ****)-4096)
                          {
                            v78 = v74 + v77++;
                            v74 = v78 & v73;
                            v76 = *(int32x2_t *****)(v71 + 16 * v74);
                            if (v144 == v76)
                            {
                              v75 = (int32x2_t *****)(v71 + 16 * v74);
                              goto LABEL_105;
                            }
                          }
                        }
                        *((_BYTE *)v69 + 17) &= ~1u;
                      }
                    }
                  }
                }
              }
              v34 += 32;
            }
            while (v34 != v57);
            goto LABEL_180;
          }
          v34 = *(_QWORD *)(v14 - 8);
          v33 = v32 & 0x7FFFFFF;
          if (v33)
            goto LABEL_78;
LABEL_180:
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v14 + 40) + 40, (uint64_t ***)v14);
          v129 = *(_QWORD *)(v14 + 24);
          v130 = *(_QWORD **)(v14 + 32);
          *v130 = v129;
          *(_QWORD *)(v129 + 8) = v130;
          *(_QWORD *)(v14 + 24) = 0;
          *(_QWORD *)(v14 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v14);
          v13 = 1;
          goto LABEL_181;
        }
        v17 = *(unsigned __int16 *)(v14 + 18);
LABEL_38:
        if (v17 != 34 && v17 != 50)
          goto LABEL_41;
LABEL_40:
        sub_1C4F5E908((unsigned int *)&v150, (uint64_t)&v150[v151], *(_QWORD *)(v14 + 8), 0);
        goto LABEL_181;
      }
      v17 = *(unsigned __int16 *)(v14 + 18);
      if (v17 != 49)
        goto LABEL_38;
    }
    sub_1C4F5E908((unsigned int *)&v150, (uint64_t)&v150[v151], *(_QWORD *)(v14 + 8), 0);
    v16 = *(unsigned __int8 *)(v14 + 16);
    goto LABEL_16;
  }
LABEL_192:
  v146 = 0;
  v132 = llvm::RecursivelyDeleteTriviallyDeadInstructionsPermissive((unsigned int *)&v147, 0, 0, v145);
  if (v146 == v145)
  {
    v133 = (void (**)(void))(v145[0] + 32);
  }
  else
  {
    if (!v146)
      goto LABEL_197;
    v133 = (void (**)(void))(*v146 + 40);
  }
  (*v133)();
LABEL_197:
  llvm::Constant::removeDeadConstantUsers((uint64_t)a1);
  sub_1C56E89BC(&v147);
  if (v138 != v137)
    free(v138);
  if (v150 != v152)
    free(v150);
  return (v13 | v132) != 0;
}

uint64_t sub_1C56E895C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  if (*(_BYTE *)(a1 + 16) == 84
    && (v1 = *(_QWORD *)(a1 - 32)) != 0
    && !*(_BYTE *)(v1 + 16)
    && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
    && (*(_BYTE *)(v1 + 33) & 0x20) != 0
    && (v2 = *(_DWORD *)(v1 + 36) - 194, v2 <= 3))
  {
    return (0xDu >> (v2 & 0xF)) & 1;
  }
  else
  {
    return 0;
  }
}

char **sub_1C56E89BC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    do
    {
      v6 = *(_QWORD *)&v2[v5 - 8];
      if (v6 && v6 != -8192 && v6 != -4096)
      {
        v7 = v2;
        v8 = v5;
        llvm::ValueHandleBase::RemoveFromUseList(&v2[v5 - 24]);
        v2 = v7;
        v5 = v8;
      }
      v5 -= 24;
    }
    while (v5);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C56E8A50(uint64_t result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  int v15;
  uint64_t v16;

  if (a2 == a4)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      ++v4;
      v6 = v5 + 2;
      while (v6 != a3)
      {
        v7 = *v6;
        v6 += 2;
        if (v7 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v5 = v6 - 2;
          goto LABEL_8;
        }
      }
      v5 = a3;
LABEL_8:
      ;
    }
    while (v5 != a4);
  }
  v8 = *(unsigned int *)(result + 8);
  if (v4 + v8 > (unint64_t)*(unsigned int *)(result + 12))
  {
    v15 = v4;
    v16 = result;
    v13 = a3;
    v14 = a2;
    v12 = a4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v4 + v8, 16);
    LODWORD(v4) = v15;
    result = v16;
    a3 = v13;
    a2 = v14;
    a4 = v12;
    v8 = *(unsigned int *)(v16 + 8);
  }
  if (a2 != a4)
  {
    v9 = (_OWORD *)(*(_QWORD *)result + 16 * v8);
    do
    {
      *v9 = *(_OWORD *)a2;
      v10 = a2 + 2;
      while (v10 != a3)
      {
        v11 = *v10;
        v10 += 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          a2 = v10 - 2;
          goto LABEL_18;
        }
      }
      a2 = a3;
LABEL_18:
      ++v9;
    }
    while (a2 != a4);
    LODWORD(v8) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v8 + v4;
  return result;
}

unint64_t *sub_1C56E8B48(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  BOOL v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t *v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  BOOL v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t *v110;
  unint64_t v111;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v44 = *(a2 - 2);
        v45 = *v8;
        if (v44 < *v8)
        {
          v46 = v8[1];
          v47 = *(a2 - 1);
          *v8 = v44;
          v8[1] = v47;
          *(a2 - 2) = v45;
          *(a2 - 1) = v46;
        }
        return result;
      case 3:
        return sub_1C56E9224(v8, v8 + 2, a2 - 2);
      case 4:
        return sub_1C56E94A0(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = sub_1C56E94A0(v8, v8 + 2, v8 + 4, v8 + 6);
        v48 = *(a2 - 2);
        v49 = v8[6];
        if (v48 < v49)
        {
          v8[6] = v48;
          *(a2 - 2) = v49;
          v50 = v8[6];
          v51 = v8[7];
          v8[7] = *(a2 - 1);
          *(a2 - 1) = v51;
          v52 = v8[4];
          if (v50 < v52)
          {
            v53 = v8[5];
            v54 = v8[7];
            v8[4] = v50;
            v8[5] = v54;
            v8[6] = v52;
            v8[7] = v53;
            v55 = v8[2];
            if (v50 < v55)
            {
              v56 = v8[3];
              v8[2] = v50;
              v8[3] = v54;
              v8[4] = v55;
              v8[5] = v56;
              v57 = *v8;
              if (v50 < *v8)
              {
                v58 = v8[1];
                *v8 = v50;
                v8[1] = v54;
                v8[2] = v57;
                v8[3] = v58;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v59 = v8 + 2;
          v61 = v8 == a2 || v59 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v61)
            {
              v62 = 0;
              v63 = v8;
              do
              {
                v64 = v59;
                v65 = v63[2];
                v66 = *v63;
                if (v65 < *v63)
                {
                  v67 = v63[3];
                  v68 = v62;
                  while (1)
                  {
                    v69 = (char *)v8 + v68;
                    v70 = *(unint64_t *)((char *)v8 + v68 + 8);
                    *((_QWORD *)v69 + 2) = v66;
                    *((_QWORD *)v69 + 3) = v70;
                    if (!v68)
                      break;
                    v66 = *((_QWORD *)v69 - 2);
                    v68 -= 16;
                    if (v65 >= v66)
                    {
                      v71 = (unint64_t *)((char *)v8 + v68 + 16);
                      goto LABEL_79;
                    }
                  }
                  v71 = v8;
LABEL_79:
                  *v71 = v65;
                  v71[1] = v67;
                }
                v59 = v64 + 2;
                v62 += 16;
                v63 = v64;
              }
              while (v64 + 2 != a2);
            }
          }
          else if (!v61)
          {
            v104 = v8 + 3;
            do
            {
              v105 = v59;
              v106 = v7[2];
              v107 = *v7;
              if (v106 < *v7)
              {
                v108 = v7[3];
                v109 = v104;
                do
                {
                  v110 = v109;
                  *(v109 - 1) = v107;
                  v111 = *(v109 - 2);
                  v109 -= 2;
                  *v110 = v111;
                  v107 = *(v110 - 5);
                }
                while (v106 < v107);
                *(v109 - 1) = v106;
                *v109 = v108;
              }
              v59 = v105 + 2;
              v104 += 2;
              v7 = v105;
            }
            while (v105 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v72 = (unint64_t)(v10 - 2) >> 1;
            v73 = v72;
            do
            {
              v74 = v73;
              if (v72 >= v73)
              {
                v75 = (2 * v73) | 1;
                v76 = &v8[2 * v75];
                if (2 * v74 + 2 >= v10)
                {
                  v77 = *v76;
                }
                else
                {
                  v77 = v76[2];
                  v78 = *v76 >= v77;
                  if (*v76 > v77)
                    v77 = *v76;
                  if (!v78)
                  {
                    v76 += 2;
                    v75 = 2 * v74 + 2;
                  }
                }
                v79 = &v8[2 * v74];
                v80 = *v79;
                if (v77 >= *v79)
                {
                  v81 = v79[1];
                  do
                  {
                    v82 = v79;
                    v79 = v76;
                    v83 = v76[1];
                    *v82 = v77;
                    v82[1] = v83;
                    if (v72 < v75)
                      break;
                    v84 = (2 * v75) | 1;
                    v76 = &v8[2 * v84];
                    v75 = 2 * v75 + 2;
                    if (v75 >= v10)
                    {
                      v77 = *v76;
                      v75 = v84;
                    }
                    else
                    {
                      v77 = *v76;
                      result = v76 + 2;
                      v85 = v76[2];
                      if (*v76 <= v85)
                        v77 = v76[2];
                      if (*v76 >= v85)
                        v75 = v84;
                      else
                        v76 += 2;
                    }
                  }
                  while (v77 >= v80);
                  *v79 = v80;
                  v79[1] = v81;
                }
              }
              v73 = v74 - 1;
            }
            while (v74);
            do
            {
              v86 = 0;
              v87 = *v8;
              v88 = v8[1];
              v89 = v8;
              do
              {
                v90 = &v89[2 * v86 + 2];
                v91 = (2 * v86) | 1;
                v86 = 2 * v86 + 2;
                if (v86 >= v10)
                {
                  v92 = *v90;
                  v86 = v91;
                }
                else
                {
                  v92 = *v90;
                  result = (unint64_t *)v90[2];
                  if (*v90 <= (unint64_t)result)
                    v92 = v90[2];
                  if (*v90 >= (unint64_t)result)
                    v86 = v91;
                  else
                    v90 += 2;
                }
                v93 = v90[1];
                *v89 = v92;
                v89[1] = v93;
                v89 = v90;
              }
              while (v86 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v90 == a2 - 2)
              {
                *v90 = v87;
                v90[1] = v88;
              }
              else
              {
                v94 = *(a2 - 1);
                *v90 = *(a2 - 2);
                v90[1] = v94;
                *(a2 - 2) = v87;
                *(a2 - 1) = v88;
                v95 = (char *)v90 - (char *)v8 + 16;
                if (v95 >= 17)
                {
                  v96 = (((unint64_t)v95 >> 4) - 2) >> 1;
                  v97 = &v8[2 * v96];
                  v98 = *v97;
                  v99 = *v90;
                  if (*v97 < *v90)
                  {
                    v100 = v90[1];
                    do
                    {
                      v101 = v90;
                      v90 = v97;
                      v102 = v97[1];
                      *v101 = v98;
                      v101[1] = v102;
                      if (!v96)
                        break;
                      v96 = (v96 - 1) >> 1;
                      v97 = &v8[2 * v96];
                      v98 = *v97;
                    }
                    while (*v97 < v99);
                    *v90 = v99;
                    v90[1] = v100;
                  }
                }
              }
              a2 -= 2;
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[2 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_1C56E9224(&v7[2 * ((unint64_t)v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_1C56E9224(v7, &v7[2 * ((unint64_t)v10 >> 1)], a2 - 2);
          sub_1C56E9224(v7 + 2, v12 - 2, a2 - 4);
          sub_1C56E9224(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = sub_1C56E9224(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *v7;
          v14 = v7[1];
          v15 = v12[1];
          *v7 = *v12;
          v7[1] = v15;
          *v12 = v13;
          v12[1] = v14;
        }
        --a3;
        v16 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 2) >= v16)
        {
          if (v16 >= *(a2 - 2))
          {
            v33 = v7 + 2;
            do
            {
              v8 = v33;
              if (v33 >= a2)
                break;
              v33 += 2;
            }
            while (v16 >= *v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v32 = v8[2];
              v8 += 2;
            }
            while (v16 >= v32);
          }
          v34 = a2;
          if (v8 < a2)
          {
            v34 = a2;
            do
            {
              v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v16 < v35);
          }
          v36 = v7[1];
          if (v8 < v34)
          {
            v37 = *v8;
            v38 = *v34;
            do
            {
              v39 = v8[1];
              v40 = v34[1];
              *v8 = v38;
              v8[1] = v40;
              *v34 = v37;
              v34[1] = v39;
              do
              {
                v41 = v8[2];
                v8 += 2;
                v37 = v41;
              }
              while (v16 >= v41);
              do
              {
                v42 = *(v34 - 2);
                v34 -= 2;
                v38 = v42;
              }
              while (v16 < v42);
            }
            while (v8 < v34);
          }
          if (v8 - 2 != v7)
          {
            v43 = *(v8 - 1);
            *v7 = *(v8 - 2);
            v7[1] = v43;
          }
          a4 = 0;
          *(v8 - 2) = v16;
          *(v8 - 1) = v36;
          continue;
        }
        v17 = 0;
        v18 = v7[1];
        do
        {
          v19 = v7[v17 + 2];
          v17 += 2;
        }
        while (v19 < v16);
        v20 = &v7[v17];
        v21 = a2;
        if (v17 == 2)
        {
          v21 = a2;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (v23 >= v16);
        }
        else
        {
          do
          {
            v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (v22 >= v16);
        }
        if (v20 >= v21)
        {
          v8 = &v7[v17];
        }
        else
        {
          v24 = *v21;
          v8 = &v7[v17];
          v25 = v21;
          do
          {
            v26 = v8[1];
            v27 = v25[1];
            *v8 = v24;
            v8[1] = v27;
            *v25 = v19;
            v25[1] = v26;
            do
            {
              v28 = v8[2];
              v8 += 2;
              v19 = v28;
            }
            while (v28 < v16);
            do
            {
              v29 = *(v25 - 2);
              v25 -= 2;
              v24 = v29;
            }
            while (v29 >= v16);
          }
          while (v8 < v25);
        }
        if (v8 - 2 != v7)
        {
          v30 = *(v8 - 1);
          *v7 = *(v8 - 2);
          v7[1] = v30;
        }
        *(v8 - 2) = v16;
        *(v8 - 1) = v18;
        if (v20 < v21)
        {
LABEL_32:
          result = (unint64_t *)sub_1C56E8B48(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = sub_1C56E92C0(v7, v8 - 2);
        result = (unint64_t *)sub_1C56E92C0(v8, a2);
        if (!(_DWORD)result)
        {
          if (v31)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 2;
        if (!v31)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t *sub_1C56E9224(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v8 = *a2;
      v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      v10 = *result;
      if (v8 < *result)
      {
        v11 = result[1];
        v12 = a2[1];
        *result = v8;
        result[1] = v12;
        *a2 = v10;
        a2[1] = v11;
      }
    }
  }
  else if (v5 >= v3)
  {
    v13 = result[1];
    v14 = a2[1];
    *result = v3;
    result[1] = v14;
    *a2 = v4;
    a2[1] = v13;
    if (*a3 < v4)
    {
      v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      *a3 = v4;
      a3[1] = v13;
    }
  }
  else
  {
    v6 = result[1];
    v7 = a3[1];
    *result = v5;
    result[1] = v7;
    *a3 = v4;
    a3[1] = v6;
  }
  return result;
}

BOOL sub_1C56E92C0(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        v8 = a1[1];
        v9 = *(a2 - 1);
        *a1 = v6;
        a1[1] = v9;
        *(a2 - 2) = v7;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_1C56E9224(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1C56E94A0(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1C56E94A0(a1, a1 + 2, a1 + 4, a1 + 6);
      v21 = *(a2 - 2);
      v22 = a1[6];
      if (v21 < v22)
      {
        a1[6] = v21;
        *(a2 - 2) = v22;
        v23 = a1[6];
        v24 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v24;
        v25 = a1[4];
        if (v23 < v25)
        {
          v26 = a1[5];
          v27 = a1[7];
          a1[4] = v23;
          a1[5] = v27;
          a1[6] = v25;
          a1[7] = v26;
          v28 = a1[2];
          if (v23 < v28)
          {
            v29 = a1[3];
            a1[2] = v23;
            a1[3] = v27;
            a1[4] = v28;
            a1[5] = v29;
            v30 = *a1;
            if (v23 < *a1)
            {
              v31 = a1[1];
              *a1 = v23;
              a1[1] = v27;
              a1[2] = v30;
              a1[3] = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 4;
      sub_1C56E9224(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = *v10;
    if (*v11 < *v10)
    {
      v16 = v11[1];
      v17 = v12;
      while (1)
      {
        v18 = (unint64_t *)((char *)a1 + v17);
        v19 = *(unint64_t *)((char *)a1 + v17 + 40);
        v18[6] = v15;
        v18[7] = v19;
        if (v17 == -32)
          break;
        v15 = v18[2];
        v17 -= 16;
        if (v14 >= v15)
        {
          v20 = (unint64_t *)((char *)a1 + v17 + 48);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v14;
      v20[1] = v16;
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

unint64_t *sub_1C56E94A0(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  result = sub_1C56E9224(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a3;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a2;
    if (v10 < *a2)
    {
      *a2 = v10;
      *a3 = v12;
      v13 = *a2;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a1;
      if (v13 < *a1)
      {
        v16 = a1[1];
        v17 = a2[1];
        *a1 = v13;
        a1[1] = v17;
        *a2 = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t sub_1C56E953C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v5;
  uint64_t ***v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t ***v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ***v27;
  uint64_t v28;
  uint64_t **v29;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t ***v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t Cast;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t ElementPtr;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void *v50;
  uint64_t v51;
  _QWORD v52[9];

  v52[8] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v5 = 0;
    v6 = (uint64_t ***)(a2 + 1);
    while (1)
    {
      v7 = *(_QWORD *)(v2 + 24);
      v2 = *(_QWORD *)(v2 + 8);
      v8 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 56);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 112);
        if (v9)
        {
          if ((*(_BYTE *)(v9 + 17) & 1) != 0)
            goto LABEL_79;
        }
      }
      v10 = *(unsigned __int8 *)(v7 + 16);
      if (v10 <= 0x3C)
        break;
      if (v10 != 61)
      {
        if (v10 != 84)
          goto LABEL_42;
LABEL_17:
        v14 = (uint64_t **)(v7 - 32);
        if (*(_QWORD *)(v7 - 32) == a1)
        {
          v15 = (uint64_t ***)(v7 - 24);
          **(_QWORD **)(v7 - 16) = *(_QWORD *)(v7 - 24);
          v16 = *(_QWORD *)(v7 - 24);
          if (v16)
            *(_QWORD *)(v16 + 16) = *(_QWORD *)(v7 - 16);
          *v14 = a2;
          if (a2)
          {
            v17 = *v6;
            *v15 = *v6;
            if (v17)
              v17[2] = (uint64_t *)v15;
            *(_QWORD *)(v7 - 16) = v6;
            *v6 = v14;
          }
          if (v10 == 84)
            v18 = 0;
          else
            v18 = 2;
          v19 = *(_DWORD *)(v7 + 20);
          if (v19 < 0 && (v47 = v7 - 32 * (v19 & 0x7FFFFFF), v48 = *(_QWORD *)(v47 - 8), (v48 & 0xFFFFFFFF0) != 0))
          {
            v21 = -(uint64_t)(v19 & 0x7FFFFFF);
            v20 = (*(_DWORD *)(v47 - 12) - *(_DWORD *)(v47 - v48));
          }
          else
          {
            v20 = 0;
            v21 = -(uint64_t)(v19 & 0x7FFFFFF);
          }
          v22 = -32 * v18 - 32 * v20 - 32 * v21 - 32;
          if ((v22 & 0x1FFFFFFFE0) != 0)
          {
            v23 = 0;
            v24 = -(uint64_t)(v22 >> 5);
            v25 = v7;
            do
            {
              v26 = v25 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
              if (*(_QWORD *)v26 == a1)
              {
                v27 = (uint64_t ***)(v26 + 8);
                **(_QWORD **)(v26 + 16) = *(_QWORD *)(v26 + 8);
                v28 = *(_QWORD *)(v26 + 8);
                if (v28)
                  *(_QWORD *)(v28 + 16) = *(_QWORD *)(v26 + 16);
                *(_QWORD *)v26 = a2;
                if (a2)
                {
                  v29 = *v6;
                  *v27 = *v6;
                  if (v29)
                    v29[2] = (uint64_t *)v27;
                  *(_QWORD *)(v26 + 16) = v6;
                  *v6 = (uint64_t **)v26;
                }
                v23 = 1;
              }
              v25 += 32;
            }
            while (!__CFADD__(v24++, 1));
            if ((v23 & 1) != 0)
              v2 = *(_QWORD *)(a1 + 8);
          }
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      v11 = (uint64_t **)(v7 - 32);
      if (*(_QWORD *)(v7 - 32) == a1)
      {
        v37 = (uint64_t ***)(v7 - 24);
        **(_QWORD **)(v7 - 16) = *(_QWORD *)(v7 - 24);
        v38 = *(_QWORD *)(v7 - 24);
        if (v38)
          *(_QWORD *)(v38 + 16) = *(_QWORD *)(v7 - 16);
        *v11 = a2;
        if (a2)
        {
          v39 = *v6;
          *v37 = *v6;
          if (v39)
            v39[2] = (uint64_t *)v37;
LABEL_62:
          *(_QWORD *)(v7 - 16) = v6;
          *v6 = v11;
        }
LABEL_63:
        v5 = 1;
      }
LABEL_64:
      if (!v2)
        return v5 & 1;
    }
    if (v10 != 33)
    {
      if (v10 == 60)
      {
        v11 = (uint64_t **)(v7 - 32);
        if (*(_QWORD *)(v7 - 32))
        {
          **(_QWORD **)(v7 - 16) = *(_QWORD *)(v7 - 24);
          v12 = *(_QWORD *)(v7 - 24);
          if (v12)
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v7 - 16);
        }
        *v11 = a2;
        if (a2)
        {
          v13 = *v6;
          *(_QWORD *)(v7 - 24) = *v6;
          if (v13)
            v13[2] = (uint64_t *)(v7 - 24);
          goto LABEL_62;
        }
      }
      else
      {
LABEL_42:
        if (v10 - 79 < 0xFFFFFFF3)
        {
          if (v10 == 62)
          {
            v50 = v52;
            v51 = 0x800000000;
            v31 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
            v32 = v31 - 1;
            if (v32 >= 9)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v32, 8);
              v31 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
            }
            if (v7 - 32 * v31 + 32 != v7)
            {
              v33 = 32 - 32 * v31;
              do
              {
                v34 = *(_QWORD *)(v7 + v33);
                if (v34)
                  v35 = *(unsigned __int8 *)(v34 + 16) > 0x14u;
                else
                  v35 = 1;
                if (v35)
                  break;
                v36 = v51;
                if (v51 >= (unint64_t)HIDWORD(v51))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v51 + 1, 8);
                  v36 = v51;
                }
                *((_QWORD *)v50 + v36) = v34;
                LODWORD(v51) = v51 + 1;
                v33 += 32;
              }
              while (v33);
              v31 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
            }
            if ((_DWORD)v51 == v31 - 1)
            {
              ElementPtr = llvm::ConstantExpr::getGetElementPtr(*(llvm::GetElementPtrInst **)(v7 + 64), a2, (llvm::Value *)v50, v51, 0, 0, 0);
              v5 |= sub_1C56E953C(v7, ElementPtr);
            }
            if (!*(_QWORD *)(v7 + 8))
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v7 + 40) + 40, (uint64_t ***)v7);
              v45 = *(_QWORD *)(v7 + 24);
              v46 = *(_QWORD **)(v7 + 32);
              *v46 = v45;
              *(_QWORD *)(v45 + 8) = v46;
              *(_QWORD *)(v7 + 24) = 0;
              *(_QWORD *)(v7 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v7);
              v5 = 1;
            }
            if (v50 != v52)
              free(v50);
          }
          goto LABEL_64;
        }
        Cast = llvm::ConstantExpr::getCast(v10 - 28);
        v41 = sub_1C56E953C(v7, Cast);
        if (*(_QWORD *)(v7 + 8))
        {
          v5 |= v41;
          goto LABEL_64;
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v7 + 40) + 40, (uint64_t ***)v7);
        v42 = *(_QWORD *)(v7 + 24);
        v43 = *(_QWORD **)(v7 + 32);
        *v43 = v42;
        *(_QWORD *)(v42 + 8) = v43;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v7);
      }
      goto LABEL_63;
    }
    goto LABEL_17;
  }
LABEL_79:
  LOBYTE(v5) = 0;
  return v5 & 1;
}

uint64_t sub_1C56E99CC(uint64_t a1, llvm::SmallPtrSetImplBase *a2)
{
  uint64_t i;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  _QWORD *v12;

  for (i = *(_QWORD *)(a1 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD *)(i + 24);
    v6 = *(unsigned __int8 *)(v5 + 16);
    if (v5)
      v7 = v6 >= 0x1C;
    else
      v7 = 0;
    if (v7)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 56);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 112);
        if (v9)
        {
          if ((*(_BYTE *)(v9 + 17) & 1) != 0)
            return 0;
        }
      }
    }
    if (v6 != 60)
    {
      if (v5 && v6 == 61)
      {
        if (*(_QWORD *)(v5 - 64) == a1)
          return 0;
        continue;
      }
      if (v5 && v6 == 84 || v5 && v6 == 33)
      {
        if (*(_QWORD *)(v5 - 32) != a1)
          return 0;
        continue;
      }
      if (v5 && v6 == 77 || v5 && v6 == 62)
        goto LABEL_28;
      if (v5 && v6 == 83)
      {
        sub_1C4774094(a2, *(_QWORD *)(i + 24));
        if (!v10)
          continue;
LABEL_28:
        if ((sub_1C56E99CC(v5, a2) & 1) == 0)
          return 0;
        continue;
      }
      if (v6 != 81 || (*(_WORD *)(v5 + 18) & 0x3Eu) - 38 < 4)
        return 0;
      v11 = *(_DWORD *)(v5 + 20);
      v12 = (v11 & 0x40000000) != 0 ? *(_QWORD **)(v5 - 8) : (_QWORD *)(v5 - 32 * (v11 & 0x7FFFFFF));
      if (*(_BYTE *)(*v12 + 16) != 60 || *(_BYTE *)(v12[4] + 16) != 19)
        return 0;
    }
  }
  return 1;
}

uint64_t sub_1C56E9B2C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v7;
  uint64_t v8;

  v4 = a2;
  v8 = a2;
  v7 = 0;
  if (llvm::AttributeList::hasAttrSomewhere(&v8, a3, &v7))
    return llvm::AttributeList::removeAttributeAtIndex(&v8, a1, v7, a3);
  return v4;
}

uint64_t sub_1C56E9B98(uint64_t a1, llvm::Function *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::Type *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  char *v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  llvm::Constant **v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _BYTE v34[96];
  uint64_t *v35;
  int v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t *v39;
  _BYTE v40[200];

  *(_QWORD *)&v40[192] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a1;
  v4 = (**(uint64_t (***)(_QWORD))(a1 + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  sub_1C56E9E60((uint64_t)v34, v3, v4);
  v33 = 0;
  v30 = &v32;
  v31 = 0;
  v6 = llvm::Evaluator::EvaluateFunction((uint64_t)v34, a2, &v33, &v30);
  if (v30 != &v32)
    free(v30);
  if ((_DWORD)v6)
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v7 = &v35[2 * v37];
    if (v36)
    {
      if (v37)
      {
        v8 = 16 * v37;
        v9 = v35;
        while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v9 += 2;
          v8 -= 16;
          if (!v8)
            goto LABEL_9;
        }
      }
      else
      {
        v9 = v35;
      }
    }
    else
    {
LABEL_9:
      v9 = &v35[2 * v37];
    }
    v10 = &v35[2 * v37];
    if (v9 == v10)
    {
      v16 = 0;
      v14 = 0;
      v15 = 0;
      v18 = 0;
    }
    else
    {
      do
      {
        v11 = v9[1];
        v12 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 4) != 0 || !v12)
          v12 = (unint64_t)llvm::Evaluator::MutableAggregate::toConstant((llvm::Evaluator::MutableAggregate *)(v11 & 0xFFFFFFFFFFFFFFF8));
        sub_1C6180A54((uint64_t)&v30, v9)[1] = v12;
        v13 = v9 + 2;
        v9 = v7;
        if (v13 != v7)
        {
          v9 = v13;
          while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v9 += 2;
            if (v9 == v7)
            {
              v9 = v7;
              break;
            }
          }
        }
      }
      while (v9 != v10);
      v14 = (char *)v30;
      v15 = v32;
      v16 = (char *)v30 + 16 * v32;
      if ((_DWORD)v31)
      {
        if (v32)
        {
          v17 = 0;
          while ((*(_QWORD *)((char *)v30 + v17) | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v17 += 16;
            if (16 * v32 == v17)
              goto LABEL_26;
          }
          v18 = (llvm::Constant **)((char *)v30 + v17);
        }
        else
        {
          v18 = (llvm::Constant **)v30;
        }
      }
      else
      {
LABEL_26:
        v18 = (llvm::Constant **)((char *)v30 + 16 * v32);
      }
    }
    v19 = &v14[16 * v15];
LABEL_31:
    while (v18 != (llvm::Constant **)v19)
    {
      llvm::GlobalVariable::setInitializer((uint64_t)*v18, v18[1]);
      v20 = (char *)(v18 + 2);
      v18 = (llvm::Constant **)v16;
      if (v20 != v16)
      {
        v18 = (llvm::Constant **)v20;
        while (((unint64_t)*v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v18 += 2;
          if (v18 == (llvm::Constant **)v16)
          {
            v18 = (llvm::Constant **)v16;
            goto LABEL_31;
          }
        }
      }
    }
    if (v39 == v38)
      v21 = &v40[4];
    else
      v21 = v40;
    v22 = *(unsigned int *)v21;
    if ((_DWORD)v22)
    {
      v23 = 8 * v22;
      v24 = v39;
      while (*v24 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v24;
        v23 -= 8;
        if (!v23)
          goto LABEL_52;
      }
    }
    else
    {
      v24 = v39;
    }
    v25 = &v39[v22];
    if (v24 != v25)
    {
      v26 = *v24;
LABEL_48:
      *(_BYTE *)(v26 + 80) |= 1u;
      v27 = v24 + 1;
      while (v27 != v25)
      {
        v28 = *v27++;
        v26 = v28;
        if (v28 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v24 = v27 - 1;
          goto LABEL_48;
        }
      }
    }
LABEL_52:
    MEMORY[0x1CAA32FB4](v14, 8);
  }
  sub_1C56EA284((uint64_t)v34, v5);
  return v6;
}

uint64_t sub_1C56E9E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x400000000;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x2000000000;
  *(_QWORD *)(a1 + 392) = a1 + 424;
  *(_QWORD *)(a1 + 400) = a1 + 424;
  *(_QWORD *)(a1 + 408) = 8;
  *(_DWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 488) = a1 + 520;
  *(_QWORD *)(a1 + 496) = a1 + 520;
  *(_QWORD *)(a1 + 504) = 8;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 584) = a2;
  *(_QWORD *)(a1 + 592) = a3;
  sub_1C56E9EF0((_QWORD *)a1);
  return a1;
}

uint64_t sub_1C56E9EF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;

  v2 = a1[2];
  v3 = a1[1];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 170 * ((v2 - v3) >> 3) - 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = v6 + v5;
  if (v4 == v6 + v5)
  {
    sub_1C56E9FBC((uint64_t)a1);
    v3 = a1[1];
    v5 = a1[4];
    v6 = a1[5];
    v7 = v5 + v6;
  }
  v8 = *(_QWORD *)(v3 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  v9 = v6 + 1;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = 0;
  a1[5] = v9;
  v10 = v9 + v5;
  v11 = (_QWORD *)(v3 + 8 * (v10 / 0xAA));
  v12 = v10 % 0xAA;
  if (v12)
    v13 = *v11 + 24 * v12;
  else
    v13 = *(v11 - 1) + 4080;
  return v13 - 24;
}

void sub_1C56E9FBC(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_33:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v29 = 1;
      else
        v29 = (v6 - v10) >> 2;
      if (!(v29 >> 61))
      {
        v30 = (char *)operator new(8 * v29);
        v31 = &v30[8 * (v29 >> 2)];
        v32 = &v30[8 * v29];
        v34 = v6 - v7;
        v33 = v6 == v7;
        v6 = v31;
        if (!v33)
        {
          v6 = &v31[v34 & 0xFFFFFFFFFFFFFFF8];
          v35 = 8 * (v34 >> 3);
          v36 = &v30[8 * (v29 >> 2)];
          do
          {
            v37 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v36 = v37;
            v36 += 8;
            v35 -= 8;
          }
          while (v35);
        }
        goto LABEL_31;
      }
LABEL_47:
      sub_1C4764EE4();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_33;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = v18 - *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 24);
  v21 = v20 - *(_QWORD *)a1;
  if (v19 < v21)
  {
    if (v20 != v18)
    {
      *(_QWORD *)&v46 = operator new(0xFF0uLL);
      sub_1C61351F0(a1, &v46);
      return;
    }
    *(_QWORD *)&v46 = operator new(0xFF0uLL);
    sub_1C6135314((void **)a1, &v46);
    v38 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v39 = *v38;
    v7 = (char *)(v38 + 1);
    v8 = v39;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_33;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v40 = 1;
      else
        v40 = (v6 - v10) >> 2;
      if (!(v40 >> 61))
      {
        v30 = (char *)operator new(8 * v40);
        v31 = &v30[8 * (v40 >> 2)];
        v32 = &v30[8 * v40];
        v41 = v6 - v7;
        v33 = v6 == v7;
        v6 = v31;
        if (!v33)
        {
          v6 = &v31[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = 8 * (v41 >> 3);
          v43 = &v30[8 * (v40 >> 2)];
          do
          {
            v44 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v44;
            v43 += 8;
            v42 -= 8;
          }
          while (v42);
        }
LABEL_31:
        *(_QWORD *)a1 = v30;
        *(_QWORD *)(a1 + 8) = v31;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v32;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_33;
      }
      goto LABEL_47;
    }
    goto LABEL_5;
  }
  if (v20 == *(_QWORD *)a1)
    v22 = 1;
  else
    v22 = v21 >> 2;
  v48 = a1 + 24;
  if (v22 >> 61)
    goto LABEL_47;
  *(_QWORD *)&v46 = operator new(8 * v22);
  *((_QWORD *)&v46 + 1) = v46 + v19;
  *(_QWORD *)&v47 = v46 + v19;
  *((_QWORD *)&v47 + 1) = v46 + 8 * v22;
  v45 = operator new(0xFF0uLL);
  sub_1C61A2C78((uint64_t)&v46, &v45);
  v23 = *(char **)(a1 + 16);
  if (v23 == *(char **)(a1 + 8))
  {
    v24 = *(char **)(a1 + 16);
  }
  else
  {
    do
    {
      v23 -= 8;
      sub_1C6135314((void **)&v46, v23);
    }
    while (v23 != *(char **)(a1 + 8));
    v24 = *(char **)(a1 + 16);
  }
  v25 = *(char **)a1;
  v26 = v46;
  v27 = v47;
  *(_QWORD *)&v46 = *(_QWORD *)a1;
  *((_QWORD *)&v46 + 1) = v23;
  v28 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a1 = v26;
  *(_OWORD *)(a1 + 16) = v27;
  *(_QWORD *)&v47 = v24;
  *((_QWORD *)&v47 + 1) = v28;
  if (v24 != v23)
    *(_QWORD *)&v47 = &v24[(v23 - v24 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v25)
    operator delete(v25);
}

uint64_t sub_1C56EA284(uint64_t a1, llvm::Type *a2)
{
  void **v3;
  llvm::Constant ***v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Constant **v7;
  llvm::Value **NullValue;
  void *v9;
  void *v10;
  void *v11;

  v3 = (void **)(a1 + 120);
  v4 = *(llvm::Constant ****)(a1 + 120);
  v5 = *(unsigned int *)(a1 + 128);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    do
    {
      v7 = *v4;
      if ((*v4)[1])
      {
        NullValue = llvm::Constant::getNullValue(*v7, a2);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, (llvm::Value *)NullValue, (llvm::Value *)1);
      }
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
  v9 = *(void **)(a1 + 496);
  if (v9 != *(void **)(a1 + 488))
    free(v9);
  v10 = *(void **)(a1 + 400);
  if (v10 != *(void **)(a1 + 392))
    free(v10);
  sub_1C56EA33C(v3);
  sub_1C56EA48C((uint64_t *)(a1 + 96));
  v11 = *(void **)(a1 + 48);
  if (v11 != (void *)(a1 + 64))
    free(v11);
  return sub_1C56EA4F8(a1);
}

void **sub_1C56EA33C(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void **v5;
  void **v6;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v6 = result;
    v3 = 8 * v2;
    v4 = (char *)(v1 - 1);
    do
    {
      sub_1C56EA3B4((uint64_t *)&v4[v3], 0);
      v3 -= 8;
    }
    while (v3);
    result = v6;
    v1 = (void **)*v6;
  }
  if (v1 != result + 2)
  {
    v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

void sub_1C56EA3B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::Value *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    llvm::GlobalVariable::dropAllReferences((llvm::GlobalVariable *)v2);
    v3 = *(_QWORD *)(v2 + 48);
    if (v3)
      llvm::Comdat::removeUser(v3, v2);
    *(_QWORD *)(v2 + 48) = 0;
    llvm::Constant::removeDeadConstantUsers(v2);
    llvm::Value::~Value((llvm::Value *)v2, v4);
    v5 = *(_DWORD *)(v2 + 20);
    v6 = v5 & 0xF8000000 | 1;
    *(_DWORD *)(v2 + 20) = v6;
    if ((v5 & 0x40000000) != 0)
    {
      v11 = *(_QWORD **)(v2 - 8);
      v10 = (void *)(v2 - 8);
      v9 = v11;
      if (*v11)
      {
        *(_QWORD *)v9[2] = v9[1];
        v12 = v9[1];
        if (v12)
          *(_QWORD *)(v12 + 16) = v9[2];
      }
      operator delete(v9);
      v7 = v10;
    }
    else
    {
      v7 = (void *)(v2 - 32);
      if (*(_QWORD *)(v2 - 32))
      {
        **(_QWORD **)(v2 - 16) = *(_QWORD *)(v2 - 24);
        v8 = *(_QWORD *)(v2 - 24);
        if (v8)
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(v2 - 16);
      }
      if ((v6 & 0x80000000) != 0)
        v7 = (void *)(v2 - 40 - *(_QWORD *)(v2 - 40));
    }
    operator delete(v7);
  }
}

uint64_t *sub_1C56EA48C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (_QWORD *)(v3 + 8);
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        llvm::Evaluator::MutableValue::clear(v5);
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t sub_1C56EA4F8(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0xAA];
    v7 = (char *)*v6 + 24 * (v5 % 0xAA);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v5) % 0xAA);
    if (v7 != (char *)v8)
    {
      do
      {
        v9 = *(_QWORD *)v7;
        v7 += 24;
        MEMORY[0x1CAA32FB4](v9, 8);
        if (v7 - (_BYTE *)*v6 == 4080)
        {
          v10 = (char *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (char *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
    goto LABEL_14;
  }
  if (v12 == 2)
  {
    v13 = 170;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_1C56EA660(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;

  if ((*(_DWORD *)(a1 + 32) & 0xFu) - 7 > 1)
    return 1;
  v4 = sub_1C477672C((uint64_t)a2, a1);
  v5 = a2[1];
  v6 = v5 == *a2 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
  if (v4 != (_QWORD *)(v5 + 8 * *v6))
    return 1;
  v8 = sub_1C477672C((uint64_t)(a2 + 8), a1);
  v9 = a2[9];
  if (v9 == a2[8])
    v10 = (unsigned int *)a2 + 21;
  else
    v10 = (unsigned int *)(a2 + 10);
  return v8 != (_QWORD *)(v9 + 8 * *v10);
}

void sub_1C56EA6FC(llvm::GlobalVariable *this, uint64_t a2)
{
  llvm::Type *v4;
  llvm::Constant *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  llvm::UndefValue *v12;
  llvm::UndefValue *PointerBitCastOrAddrSpaceCast;
  uint64_t v14;
  size_t v15;
  unint64_t *v16;
  unint64_t v17;
  llvm::PoisonValue *v18;
  llvm::PoisonValue *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _DWORD *v23;
  char *v24;
  llvm::Value **v25;
  llvm::Value *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  int v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53[4];
  __int16 v54;
  void *__base;
  uint64_t v56;
  _QWORD v57[9];

  v57[8] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 20) == *(_DWORD *)(a2 + 24))
  {
    llvm::GlobalVariable::eraseFromParent(this);
    return;
  }
  v5 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)this + 1912), 0);
  __base = v57;
  v56 = 0x800000000;
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 == *(_QWORD *)a2)
    v7 = (unsigned int *)(a2 + 20);
  else
    v7 = (unsigned int *)(a2 + 16);
  v8 = *v7;
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = *(unint64_t **)(a2 + 8);
    while (*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_20;
    }
  }
  else
  {
    v10 = *(unint64_t **)(a2 + 8);
  }
  v11 = (unint64_t *)(v6 + 8 * v8);
  if (v10 == v11)
  {
LABEL_20:
    LODWORD(v15) = 0;
  }
  else
  {
    v12 = (llvm::UndefValue *)*v10;
LABEL_14:
    PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(v12, v5, v4);
    v14 = v56;
    if (v56 >= (unint64_t)HIDWORD(v56))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v57, v56 + 1, 8);
      v14 = v56;
    }
    *((_QWORD *)__base + v14) = PointerBitCastOrAddrSpaceCast;
    v15 = (v56 + 1);
    LODWORD(v56) = v56 + 1;
    v16 = v10 + 1;
    while (v16 != v11)
    {
      v17 = *v16++;
      v12 = (llvm::UndefValue *)v17;
      if (v17 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v10 = v16 - 1;
        goto LABEL_14;
      }
    }
    if (v15 >= 2)
    {
      qsort(__base, v15, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C56EAB0C);
      LODWORD(v15) = v56;
    }
  }
  llvm::ArrayType::get(v5, (llvm::Type *)v15);
  v19 = v18;
  v20 = *((_QWORD *)this + 5);
  llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(v20 + 8, (uint64_t ***)this);
  v21 = *((_QWORD *)this + 7);
  v22 = (_QWORD *)*((_QWORD *)this + 8);
  *v22 = v21;
  *(_QWORD *)(v21 + 8) = v22;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v23 = operator new(0x78uLL);
  v24 = (char *)(v23 + 8);
  v23[13] = v23[13] & 0x38000000 | 1;
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *((_QWORD *)v23 + 3) = v23 + 8;
  v25 = llvm::ConstantArray::get(v19, (llvm::Type *)__base, v56);
  v54 = 257;
  v26 = (llvm::Value *)llvm::GlobalVariable::GlobalVariable((uint64_t)(v23 + 8), v20, v19, 0, 6, (uint64_t)v25, (uint64_t)v53, 0, 0, 0, 0);
  llvm::Value::takeName(v26, this);
  v27 = llvm::UniqueStringSaver::save(***((_QWORD ***)v23 + 4) + 2136, "llvm.metadata", 0xDuLL);
  v29 = v28;
  v30 = ***((_QWORD ***)v23 + 4);
  v53[0] = (uint64_t)(v23 + 8);
  v31 = *(_DWORD *)(v30 + 2520);
  if (!v31)
  {
    v47 = 0;
LABEL_48:
    v35 = sub_1C53D65B8(v30 + 2504, (uint64_t)v53, v53, v47);
    v48 = v53[0];
    v35[1] = 0;
    v35[2] = 0;
    *v35 = v48;
    goto LABEL_25;
  }
  v32 = *(_QWORD *)(v30 + 2504);
  v33 = v31 - 1;
  v34 = v33 & ((v24 >> 4) ^ (v24 >> 9));
  v35 = (_QWORD *)(v32 + 24 * v34);
  v36 = *v35;
  if ((char *)*v35 != v24)
  {
    v43 = 0;
    v44 = 1;
    while (v36 != -4096)
    {
      if (v43)
        v45 = 0;
      else
        v45 = v36 == -8192;
      if (v45)
        v43 = v35;
      v46 = v34 + v44++;
      v34 = v46 & v33;
      v35 = (_QWORD *)(v32 + 24 * v34);
      v36 = *v35;
      if ((char *)*v35 == v24)
        goto LABEL_25;
    }
    if (v43)
      v47 = v43;
    else
      v47 = v35;
    goto LABEL_48;
  }
LABEL_25:
  v35[1] = v27;
  v35[2] = v29;
  v23[16] = v23[16] & 0xFFBFFFFF | ((v29 != 0) << 22);
  llvm::GlobalVariable::dropAllReferences(this);
  v37 = *((_QWORD *)this + 6);
  if (v37)
    llvm::Comdat::removeUser(v37, (uint64_t)this);
  *((_QWORD *)this + 6) = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);
  llvm::Value::~Value(this, v38);
  v39 = *((_DWORD *)this + 5);
  v40 = v39 & 0xF8000000 | 1;
  *((_DWORD *)this + 5) = v40;
  if ((v39 & 0x40000000) != 0)
  {
    v51 = (_QWORD *)*((_QWORD *)this - 1);
    v50 = (char *)this - 8;
    v49 = v51;
    if (*v51)
    {
      *(_QWORD *)v49[2] = v49[1];
      v52 = v49[1];
      if (v52)
        *(_QWORD *)(v52 + 16) = v49[2];
    }
    operator delete(v49);
    v41 = v50;
  }
  else
  {
    v41 = (char *)this - 32;
    if (*((_QWORD *)this - 4))
    {
      **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
      v42 = *((_QWORD *)this - 3);
      if (v42)
        *(_QWORD *)(v42 + 16) = *((_QWORD *)this - 2);
    }
    if ((v40 & 0x80000000) != 0)
      v41 = (char *)this - *((_QWORD *)this - 5) - 40;
  }
  operator delete(v41);
  if (__base != v57)
    free(__base);
}

uint64_t sub_1C56EAB0C(llvm::Value **a1, llvm::Value **a2)
{
  llvm::Value *v3;
  llvm::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value **v9;
  llvm::Value *v10;
  int v11;
  int v12;
  llvm::Value *v13;
  char *v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value **v21;
  llvm::Value *v22;
  int v23;
  int v24;
  llvm::Value *v25;
  char *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  int v30;
  unsigned int v32;

  v3 = llvm::Value::stripPointerCasts(*a1);
  v4 = llvm::Value::stripPointerCasts(*a2);
  if ((*((_BYTE *)v3 + 23) & 0x10) != 0)
  {
    v5 = ***(_QWORD ***)v3;
    v6 = *(_QWORD *)(v5 + 152);
    v7 = *(unsigned int *)(v5 + 168);
    if ((_DWORD)v7)
    {
      LODWORD(v8) = (v7 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v9 = (llvm::Value **)(v6 + 16 * v8);
      v10 = *v9;
      if (*v9 == v3)
      {
LABEL_9:
        v13 = v9[1];
        v16 = *(_QWORD *)v13;
        v14 = (char *)v13 + 16;
        v15 = v16;
        goto LABEL_10;
      }
      v11 = 1;
      while (v10 != (llvm::Value *)-4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v7 - 1);
        v10 = *(llvm::Value **)(v6 + 16 * v8);
        if (v10 == v3)
        {
          v9 = (llvm::Value **)(v6 + 16 * v8);
          goto LABEL_9;
        }
      }
    }
    v9 = (llvm::Value **)(v6 + 16 * v7);
    goto LABEL_9;
  }
  v15 = 0;
  v14 = &byte_1C871356D;
LABEL_10:
  if ((*((_BYTE *)v4 + 23) & 0x10) != 0)
  {
    v17 = ***(_QWORD ***)v4;
    v18 = *(_QWORD *)(v17 + 152);
    v19 = *(unsigned int *)(v17 + 168);
    if ((_DWORD)v19)
    {
      LODWORD(v20) = (v19 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v21 = (llvm::Value **)(v18 + 16 * v20);
      v22 = *v21;
      if (*v21 == v4)
      {
LABEL_18:
        v25 = v21[1];
        v28 = *(_QWORD *)v25;
        v26 = (char *)v25 + 16;
        v27 = v28;
        goto LABEL_19;
      }
      v23 = 1;
      while (v22 != (llvm::Value *)-4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v19 - 1);
        v22 = *(llvm::Value **)(v18 + 16 * v20);
        if (v22 == v4)
        {
          v21 = (llvm::Value **)(v18 + 16 * v20);
          goto LABEL_18;
        }
      }
    }
    v21 = (llvm::Value **)(v18 + 16 * v19);
    goto LABEL_18;
  }
  v27 = 0;
  v26 = &byte_1C871356D;
LABEL_19:
  if (v27 >= v15)
    v29 = v15;
  else
    v29 = v27;
  if (v29)
  {
    v30 = memcmp(v14, v26, v29);
    if (v30)
      return (v30 >> 31) | 1u;
  }
  if (v15 < v27)
    v32 = -1;
  else
    v32 = 1;
  if (v15 == v27)
    return 0;
  else
    return v32;
}

char *sub_1C56EAC88(_QWORD *a1, unsigned int a2)
{
  uint64_t *v3;
  int *v4;
  unsigned int v5;

  if (((*(_QWORD *)(a1[1] + 8 * (a2 >> 6)) >> a2) & 1) != 0
    || ((*(unsigned __int8 *)(*a1 + ((unint64_t)a2 >> 2)) >> (2 * (a2 & 3))) & 3) == 0)
  {
    return 0;
  }
  if (((*(unsigned __int8 *)(*a1 + ((unint64_t)a2 >> 2)) >> (2 * (a2 & 3))) & 3) == 3)
    return (&llvm::TargetLibraryInfoImpl::StandardNames)[2 * a2];
  v3 = (uint64_t *)(*a1 + 120);
  v5 = a2;
  v4 = sub_1C56EAD34(v3, &v5);
  if (*((char *)v4 + 31) >= 0)
    return (char *)(v4 + 2);
  else
    return (char *)*((_QWORD *)v4 + 1);
}

int *sub_1C56EAD34(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *result;
  int v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    v4 = (37 * *a2) & (v3 - 1);
    result = (int *)(v2 + 32 * v4);
    v6 = *result;
    if (*a2 == *result)
      return result;
    v7 = 1;
    while (v6 != -1)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_DWORD *)(v2 + 32 * v4);
      if (*a2 == v6)
        return (int *)(v2 + 32 * v4);
    }
  }
  return (int *)(v2 + 32 * v3);
}

uint64_t sub_1C56EADA8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56E336C(v0);
}

void sub_1C56EADD4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56EADF8(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
}

uint64_t sub_1C56EAE5C(llvm::ModulePass *a1, uint64_t **a2)
{
  llvm::ModulePass *v5;
  llvm::ModulePass *v6;
  llvm::ModulePass *v7;
  llvm::ModulePass *v8;

  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  v8 = a1;
  v6 = a1;
  v7 = a1;
  v5 = a1;
  return sub_1C56E13A8((uint64_t)a2, a2 + 34, (llvm::Constant *)sub_1C56EAEE0, (uint64_t)&v7, (uint64_t (*)(uint64_t, _QWORD))sub_1C56EB130, (uint64_t)&v6, (uint64_t (*)(_QWORD, _QWORD))sub_1C56EB250, (uint64_t)&v5, sub_1C56EB2A4, (uint64_t)&v8);
}

uint64_t sub_1C56EAEE0(uint64_t a1, uint64_t a2)
{
  char **v3;
  char *v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *__src;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = **(char ****)(*(_QWORD *)a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  llvm::TargetLibraryAnalysis::run(v5 + 32, a2, (uint64_t)&v21);
  *(_QWORD *)(v5 + 240) = v21;
  if (*(_BYTE *)(v5 + 320))
  {
    if ((uint64_t *)(v5 + 240) == &v21)
    {
LABEL_16:
      *(_DWORD *)(v5 + 312) = v25;
      goto LABEL_17;
    }
    v6 = (void **)(v5 + 248);
    v7 = v23;
    v8 = *(unsigned int *)(v5 + 256);
    if (v8 >= v23)
    {
      if (v23)
        memmove(*v6, __src, 8 * v23);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v5 + 260) < v23)
    {
      *(_DWORD *)(v5 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v7, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*v6, __src, 8 * v8);
      goto LABEL_13;
    }
    v8 = 0;
LABEL_13:
    if (v8 != v23)
      memcpy((char *)*v6 + 8 * v8, (char *)__src + 8 * v8, 8 * v23 - 8 * v8);
LABEL_15:
    *(_DWORD *)(v5 + 256) = v7;
    goto LABEL_16;
  }
  v10 = (void *)(v5 + 264);
  *(_QWORD *)(v5 + 248) = v5 + 264;
  v11 = (void **)(v5 + 248);
  *(_QWORD *)(v5 + 256) = 0x600000000;
  v12 = v23;
  if (v23 && v11 != &__src)
  {
    if (v23 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v23, 8);
      v13 = v23;
      if (!v23)
      {
LABEL_27:
        *(_DWORD *)(v5 + 256) = v12;
        goto LABEL_28;
      }
      v10 = *v11;
    }
    else
    {
      v13 = v23;
    }
    memcpy(v10, __src, 8 * v13);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 312) = v25;
  *(_BYTE *)(v5 + 320) = 1;
LABEL_17:
  if (__src != &v24)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v16);
  sub_1C4D8B52C(v14);
  return v5 + 240;
}

uint64_t *sub_1C56EB130(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13[2];
  int v14;
  _QWORD v15[2];
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v4 = **(char ****)(*(_QWORD *)a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::TargetTransformInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v7 = *(_QWORD *)(v6 + 56);
  if (!v7)
  {
    sub_1C485C2F0();
    goto LABEL_10;
  }
  v2 = v15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(&v12, v7, a2);
  a2 = (uint64_t *)(v6 + 64);
  v8 = v12;
  if (!*(_BYTE *)(v6 + 72))
  {
    *(_QWORD *)(v6 + 64) = v12;
    *(_BYTE *)(v6 + 72) = 1;
    goto LABEL_7;
  }
  v12 = 0;
  v9 = *a2;
  *a2 = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v12;
    v12 = 0;
    if (v10)
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_7:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(v13);
  return a2;
}

uint64_t sub_1C56EB250(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32;
}

uint64_t sub_1C56EB2A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::DominatorTreeWrapperPass::ID)
       + 32;
}

__n128 sub_1C56EB2F8(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80B680, "enable-coldcc-stress-test", 0x19uLL);
  result = *a1;
  xmmword_1ED80B6A0 = (__int128)*a1;
  v7 = *a2;
  byte_1ED80B700 = **a2;
  byte_1ED80B711 = 1;
  byte_1ED80B710 = *v7;
  word_1ED80B68A = (32 * (*a3 & 3)) | word_1ED80B68A & 0xFF9F;
  return result;
}

uint64_t sub_1C56EB37C(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::TargetLibraryAnalysis::Key, a2) + 8;
}

uint64_t sub_1C56EB3A4(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::TargetIRAnalysis::Key, a2) + 8;
}

uint64_t sub_1C56EB3CC(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::BlockFrequencyAnalysis::Key, a2) + 8;
}

uint64_t sub_1C56EB3F4(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::DominatorTreeAnalysis::Key, a2) + 8;
}

uint64_t sub_1C56EB41C()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;
  int v5;

  v1.n128_u64[0] = (unint64_t)"Enable stress test of coldcc by adding calling conv to all internal functions.";
  v1.n128_u64[1] = 78;
  LOBYTE(v3) = 0;
  v4 = &v3;
  v5 = 1;
  sub_1C6294DA0(&v1, (char **)&v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED80B680, &dword_1C475E000);
  v5 = 1;
  v2 = 1;
  v3 = 2;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Maximum block frequency, expressed as a percentage of caller's entry frequency, for"
                                     " a call site to be considered cold for enablingcoldcc";
  v1.n128_u64[1] = 136;
  sub_1C6294E44(&v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED80B740, &dword_1C475E000);
}

void llvm::initializeGlobalSplitPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831E98);
  if (v2 != -1)
  {
    v5[0] = sub_1C56EB544;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831E98, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56EB544(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Global splitter";
  *(_QWORD *)(v2 + 8) = 15;
  *(_QWORD *)(v2 + 16) = "globalsplit";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7140;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56EC114;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createGlobalSplitPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56EB5FC(v1);
}

uint64_t sub_1C56EB5FC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F7140;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817A338;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831E98);
  if (v3 != -1)
  {
    v7[0] = sub_1C56EB544;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831E98, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C56EB6C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  llvm::APInt *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  llvm::Type *v26;
  const llvm::APInt *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  char *v31;
  char *v32;
  _DWORD *v33;
  llvm::Value *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int **v39;
  unsigned int *v40;
  int v41;
  int v42;
  unsigned int *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::PointerType **v48;
  llvm::PointerType *v49;
  char v50;
  char *v51;
  unint64_t v52;
  BOOL v53;
  char v54;
  _QWORD **v55;
  char *v56;
  llvm::StructLayout *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char *v65;
  uint64_t *v67;
  uint64_t v68;
  llvm::ConstantInt *v69;
  unsigned int v70;
  unint64_t v71;
  llvm::Value *v72;
  llvm::ValueHandleBase *v73;
  llvm::MDNode *Impl;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  _QWORD *v80;
  _QWORD ***v81;
  _QWORD *v82;
  int v83;
  BOOL v84;
  unsigned int v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  void *v90;
  unsigned int VCallVisibility;
  int v92;
  _QWORD **v93;
  unint64_t v94;
  _QWORD *v95;
  int v96;
  _QWORD *v97;
  uint64_t v98;
  unsigned int *v99;
  unint64_t v100;
  llvm::ConstantInt *v101;
  llvm::ValueHandleBase *v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  llvm::Value *ElementPtr;
  unsigned int v108;
  _QWORD *v109;
  uint64_t v110;
  llvm::UndefValue *v111;
  char *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  char *v117;
  llvm::StructLayout *StructLayout;
  char *v119;
  unsigned int v120;
  uint64_t v121;
  char *v122;
  char *v123;
  int v124;
  void *__p[2];
  char v126;
  int v127;
  __int16 v128;
  void *v129;
  uint64_t v130;
  __int128 v131;
  __int16 v132;
  int v133;
  __int16 v134;
  _QWORD *v135;
  uint64_t v136;
  const char *v137;
  __int16 v138;
  _OWORD *v139;
  uint64_t v140;
  _OWORD v141[2];
  char v142;
  _BYTE v143[19];

  *(_QWORD *)&v143[3] = *MEMORY[0x1E0C80C00];
  v2 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), "llvm.type.test", 0xEuLL);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 16))
      v3 = 0;
    else
      v3 = v2;
  }
  else
  {
    v3 = 0;
  }
  v4 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), "llvm.type.checked.load", 0x16uLL);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 16))
      v5 = 0;
    else
      v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), "llvm.type.checked.load.relative", 0x1FuLL);
  if (v6)
  {
    if (*(_BYTE *)(v6 + 16))
      v7 = 0;
    else
      v7 = v6;
    if (!v3)
    {
LABEL_8:
      if ((!v5 || !*(_QWORD *)(v5 + 8)) && (!v7 || !*(_QWORD *)(v7 + 8)))
        goto LABEL_154;
      goto LABEL_12;
    }
  }
  else
  {
    v7 = 0;
    if (!v3)
      goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 + 8))
    goto LABEL_8;
LABEL_12:
  v8 = a1 + 8;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 != a1 + 8)
  {
    v10 = 0;
    v11 = v143;
    v116 = a1 + 8;
    while (1)
    {
      v12 = (unsigned int *)(v9 - 56);
      v84 = v9 == 0;
      v9 = *(_QWORD *)(v9 + 8);
      if (v84)
        v13 = 0;
      else
        v13 = v12;
      if ((v13[8] & 0xF) - 7 <= 1)
      {
        v14 = *((_QWORD *)v13 - 4);
        if (v14)
        {
          if (*(_BYTE *)(v14 + 16) == 9)
          {
            v15 = (_QWORD **)*((_QWORD *)v13 + 1);
            if (!v15)
            {
LABEL_37:
              v114 = v9;
              v115 = v10;
              v139 = v141;
              v140 = 0x200000000;
              llvm::Value::getMetadata(v13, 19, (uint64_t)&v139);
              StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)(*((_QWORD *)v13 + 5) + 272), *(llvm::StructType **)v14);
              v28 = ***(_QWORD ***)v13;
              v29 = *(_DWORD *)(v14 + 20);
              v30 = v29 & 0x7FFFFFF;
              if ((v29 & 0x7FFFFFF) == 0)
              {
                v32 = 0;
                v31 = 0;
LABEL_118:
                v93 = (_QWORD **)*((_QWORD *)v13 + 1);
                if (v93)
                {
                  v123 = v31;
                  v94 = (v32 - v31) >> 3;
                  do
                  {
                    v95 = v93[3];
                    v96 = *((_DWORD *)v95 + 5);
                    if ((v96 & 0x40000000) != 0)
                      v97 = (_QWORD *)*(v95 - 1);
                    else
                      v97 = &v95[-4 * (v96 & 0x7FFFFFF)];
                    v98 = v97[8];
                    v99 = (unsigned int *)(v98 + 24);
                    if (*(_DWORD *)(v98 + 32) >= 0x41u)
                      v99 = *(unsigned int **)v99;
                    v100 = *v99;
                    if (v100 < v94)
                    {
                      v129 = &v131;
                      v130 = 0x400000000;
                      v101 = *(llvm::ConstantInt **)(v28 + 1960);
                      LODWORD(v136) = *(_DWORD *)(v28 + 1968) >> 8;
                      if (v136 > 0x40)
                        llvm::APInt::initSlowCase((llvm::APInt *)&v135, 0, 0);
                      else
                        v135 = 0;
                      v102 = llvm::ConstantInt::get(v101, (llvm::LLVMContext *)&v135, v27);
                      if (v136 >= 0x41 && v135)
                        MEMORY[0x1CAA32F9C](v135, 0x1000C8000313F17);
                      v103 = v130;
                      if (v130 >= (unint64_t)HIDWORD(v130))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, (uint64_t)&v131, v130 + 1, 8);
                        v103 = v130;
                      }
                      *((_QWORD *)v129 + v103) = v102;
                      v104 = v130 + 1;
                      LODWORD(v130) = v130 + 1;
                      v105 = *((_DWORD *)v95 + 5);
                      v106 = v105 & 0x7FFFFFF;
                      if ((v105 & 0x7FFFFFF) != 3)
                      {
                        v108 = 3;
                        do
                        {
                          if ((v105 & 0x40000000) != 0)
                            v109 = (_QWORD *)*(v95 - 1);
                          else
                            v109 = &v95[-4 * v106];
                          v110 = v109[4 * v108];
                          if (v104 >= HIDWORD(v130))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, (uint64_t)&v131, v104 + 1, 8);
                            v104 = v130;
                          }
                          *((_QWORD *)v129 + v104) = v110;
                          v104 = v130 + 1;
                          LODWORD(v130) = v130 + 1;
                          ++v108;
                          v105 = *((_DWORD *)v95 + 5);
                          v106 = v105 & 0x7FFFFFF;
                        }
                        while (v108 != (v105 & 0x7FFFFFF));
                      }
                      ElementPtr = (llvm::Value *)llvm::ConstantExpr::getGetElementPtr(**(llvm::GetElementPtrInst ***)(*(_QWORD *)&v123[8 * v100] - 32), *(uint64_t **)&v123[8 * v100], (llvm::Value *)v129, v104, (*((_BYTE *)v95 + 17) & 2) != 0, 0, 0);
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v95, ElementPtr, (llvm::Value *)1);
                      if (v129 != &v131)
                        free(v129);
                    }
                    v93 = (_QWORD **)v93[1];
                  }
                  while (v93);
                  v31 = v123;
                  if (*((_QWORD *)v13 + 1))
                  {
                    v111 = llvm::UndefValue::get(*(llvm::UndefValue **)v13, v26);
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, v111, (llvm::Value *)1);
                  }
                }
                llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v13);
                if (v31)
                  operator delete(v31);
                if (v139 != v141)
                  free(v139);
                v92 = 1;
                LODWORD(v10) = v115;
                v8 = v116;
                v9 = v114;
                goto LABEL_115;
              }
              v31 = (char *)operator new(8 * v30);
              bzero(v31, 8 * v30);
              v32 = &v31[8 * v30];
              if ((*(_DWORD *)(v14 + 20) & 0x7FFFFFF) == 0)
                goto LABEL_118;
              v113 = &v31[8 * v30];
              LODWORD(v30) = 0;
              v117 = (char *)StructLayout + 16;
              v120 = (v13 >> 4) ^ (v13 >> 9);
              v119 = v11;
              v121 = v14;
              v122 = v31;
              while (2)
              {
                v33 = operator new(0x78uLL);
                v34 = (llvm::Value *)(v33 + 8);
                v33[13] = v33[13] & 0x38000000 | 1;
                *(_QWORD *)v33 = 0;
                *((_QWORD *)v33 + 1) = 0;
                *((_QWORD *)v33 + 2) = 0;
                *((_QWORD *)v33 + 3) = v33 + 8;
                if ((*((_BYTE *)v13 + 23) & 0x10) != 0)
                {
                  v35 = ***(_QWORD ***)v13;
                  v36 = *(_QWORD *)(v35 + 152);
                  v37 = *(unsigned int *)(v35 + 168);
                  if (!(_DWORD)v37)
                    goto LABEL_47;
                  LODWORD(v38) = (v37 - 1) & v120;
                  v39 = (unsigned int **)(v36 + 16 * v38);
                  v40 = *v39;
                  if (*v39 != v13)
                  {
                    v41 = 1;
                    while (v40 != (unsigned int *)-4096)
                    {
                      v42 = v38 + v41++;
                      v38 = v42 & (v37 - 1);
                      v40 = *(unsigned int **)(v36 + 16 * v38);
                      if (v40 == v13)
                      {
                        v39 = (unsigned int **)(v36 + 16 * v38);
                        goto LABEL_48;
                      }
                    }
LABEL_47:
                    v39 = (unsigned int **)(v36 + 16 * v37);
                  }
LABEL_48:
                  v43 = v39[1];
                  v46 = *(_QWORD *)v43;
                  v45 = (char *)(v43 + 4);
                  v44 = v46;
                }
                else
                {
                  v44 = 0;
                  v45 = &byte_1C871356D;
                }
                v47 = *((_QWORD *)v13 + 5);
                v48 = *(llvm::PointerType ***)(v14
                                             - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF)
                                             + 32 * v30);
                v49 = *v48;
                v50 = *((_BYTE *)v13 + 80);
                v138 = 773;
                v30 = v30;
                v135 = v45;
                v136 = v44;
                v137 = ".";
                v51 = v11;
                v52 = v30;
                if ((_DWORD)v30)
                {
                  do
                  {
                    *--v51 = (v52 % 0xA) | 0x30;
                    v53 = v52 > 9;
                    v52 /= 0xAuLL;
                  }
                  while (v53);
                }
                else
                {
                  v142 = 48;
                  v51 = &v142;
                }
                sub_1C4E61270(__p, v51, v11, v11 - v51);
                v54 = v138;
                if (v138 == 1)
                {
                  v129 = __p;
                  v131 = v141[1];
                  v132 = 260;
                  v133 = v127;
                  v134 = v128;
                }
                else if ((_BYTE)v138)
                {
                  if (HIBYTE(v138) != 1)
                    v54 = 2;
                  v55 = &v135;
                  if (HIBYTE(v138) == 1)
                    v55 = (_QWORD **)v135;
                  v129 = v55;
                  v130 = v136;
                  *(_QWORD *)&v131 = __p;
                  LOBYTE(v132) = v54;
                  HIBYTE(v132) = 4;
                }
                else
                {
                  v132 = 256;
                }
                llvm::GlobalVariable::GlobalVariable((uint64_t)v34, v47, v49, v50 & 1, 8, (uint64_t)v48, (uint64_t)&v129, 0, 0, 0, 0);
                if (v126 < 0)
                  operator delete(__p[0]);
                *(_QWORD *)&v31[8 * v30] = v34;
                v124 = v30 + 1;
                if ((_DWORD)v140)
                {
                  v56 = (char *)v139;
                  v57 = StructLayout;
                  if ((_DWORD)v30 != (*(_DWORD *)(v121 + 20) & 0x7FFFFFF) - 1)
                    v57 = (llvm::StructLayout *)&v117[8 * v124];
                  v58 = *(unsigned int *)v57;
                  v59 = *(unsigned int *)&v117[8 * v30];
                  v60 = 8 * v140;
                  do
                  {
                    v61 = *(_QWORD *)v56;
                    v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v56 - 8 * *(unsigned int *)(*(_QWORD *)v56 + 8)) + 128);
                    v63 = (_QWORD *)(v62 + 24);
                    if (*(_DWORD *)(v62 + 32) >= 0x41u)
                      v63 = (_QWORD *)*v63;
                    v64 = (_QWORD *)*v63;
                    v65 = (char *)v64 - 1;
                    if (!v64)
                      v65 = 0;
                    if ((unint64_t)v65 >= v59 && (unint64_t)v65 < v58)
                    {
                      v67 = **(uint64_t ***)v13;
                      v68 = (uint64_t)v64 - v59;
                      v69 = *(llvm::ConstantInt **)(v28 + 1960);
                      v70 = *(_DWORD *)(v28 + 1968);
                      LODWORD(v130) = v70 >> 8;
                      if (v70 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v129, v68, 0);
                      }
                      else
                      {
                        if (v70 <= 0xFF)
                          v71 = 0;
                        else
                          v71 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v70);
                        v129 = (void *)(v71 & v68);
                      }
                      v73 = llvm::ConstantInt::get(v69, (llvm::LLVMContext *)&v129, v27);
                      if (v130 >= 0x41 && v129)
                        MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
                      v135 = llvm::ValueAsMetadata::get(v73, v72);
                      v136 = *(_QWORD *)(v61 - 8 * *(unsigned int *)(v61 + 8) + 8);
                      Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v67, &v135, 2, 0, 1);
                      llvm::Value::addMetadata(v34, 19, Impl);
                    }
                    v56 += 8;
                    v60 -= 8;
                  }
                  while (v60);
                }
                v11 = v119;
                v14 = v121;
                LODWORD(v30) = v124;
                if ((*((_BYTE *)v13 + 23) & 0x20) != 0)
                {
                  v75 = ***(_QWORD ***)v13;
                  v129 = v13;
                  v76 = *(_DWORD *)(v75 + 2496);
                  if (!v76)
                  {
                    v89 = 0;
                    goto LABEL_111;
                  }
                  v77 = *(_QWORD *)(v75 + 2480);
                  v78 = v76 - 1;
                  v79 = v78 & v120;
                  v80 = (_QWORD *)(v77 + 40 * (v78 & v120));
                  v81 = (_QWORD ***)*v80;
                  if ((unsigned int *)*v80 != v13)
                  {
                    v82 = 0;
                    v83 = 1;
                    while (v81 != (_QWORD ***)-4096)
                    {
                      if (v82)
                        v84 = 0;
                      else
                        v84 = v81 == (_QWORD ***)-8192;
                      if (v84)
                        v82 = v80;
                      v85 = v79 + v83++;
                      v79 = v85 & v78;
                      v80 = (_QWORD *)(v77 + 40 * v79);
                      v81 = (_QWORD ***)*v80;
                      if ((unsigned int *)*v80 == v13)
                        goto LABEL_99;
                    }
                    if (v82)
                      v89 = v82;
                    else
                      v89 = v80;
LABEL_111:
                    v80 = sub_1C541AB24(v75 + 2480, (uint64_t)&v129, (uint64_t *)&v129, v89);
                    v90 = v129;
                    v80[4] = 0;
                    v80[3] = 0;
                    *v80 = v90;
                    v80[1] = v80 + 3;
                    v80[2] = 0x100000000;
                  }
LABEL_99:
                  v86 = *((unsigned int *)v80 + 4);
                  if ((_DWORD)v86)
                  {
                    v87 = (_QWORD *)(v80[1] + 8);
                    v88 = 16 * v86;
                    while (*((_DWORD *)v87 - 2) != 28)
                    {
                      v87 += 2;
                      v88 -= 16;
                      if (!v88)
                        goto LABEL_106;
                    }
                    if (*v87)
                    {
                      VCallVisibility = llvm::GlobalObject::getVCallVisibility((llvm::GlobalObject *)v13);
                      llvm::GlobalObject::setVCallVisibilityMetadata(v34, VCallVisibility);
                    }
                  }
                }
LABEL_106:
                v31 = v122;
                if (v124 == (*(_DWORD *)(v121 + 20) & 0x7FFFFFF))
                {
                  v32 = v113;
                  goto LABEL_118;
                }
                continue;
              }
            }
            while (1)
            {
              v16 = v15[3];
              if (*((_BYTE *)v16 + 16) != 5 || *((_WORD *)v16 + 9) != 34 || (*((_BYTE *)v16 + 17) & 0xFC) != 8)
                break;
              v17 = *((_DWORD *)v16 + 5);
              v18 = (v17 & 0x40000000) != 0 ? (_QWORD *)*(v16 - 1) : &v16[-4 * (v17 & 0x7FFFFFF)];
              v19 = v18[4];
              if (*(_BYTE *)(v19 + 16) != 16)
                break;
              v20 = (llvm::APInt *)(v19 + 24);
              v21 = *(_DWORD *)(v19 + 32);
              if (v21 > 0x40)
              {
                v22 = v10;
                v23 = v9;
                v24 = llvm::APInt::countLeadingZerosSlowCase(v20);
                v9 = v23;
                v8 = v116;
                v10 = v22;
                if (v24 != v21)
                  break;
              }
              else if (*(_QWORD *)v20)
              {
                break;
              }
              v25 = (v17 & 0x40000000) != 0 ? (_QWORD *)*(v16 - 1) : &v16[-4 * (v17 & 0x7FFFFFF)];
              if (*(_BYTE *)(v25[8] + 16) != 16)
                break;
              v15 = (_QWORD **)v15[1];
              if (!v15)
                goto LABEL_37;
            }
          }
        }
      }
      v92 = 0;
LABEL_115:
      v10 = v10 | v92;
      if (v9 == v8)
        return v10 & 1;
    }
  }
LABEL_154:
  LOBYTE(v10) = 0;
  return v10 & 1;
}

uint64_t sub_1C56EC114()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56EB5FC(v0);
}

void sub_1C56EC140(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C56EC164(llvm::ModulePass *a1, uint64_t **a2)
{
  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  else
    return sub_1C56EB6C4((uint64_t)a2);
}

BOOL llvm::HotColdSplitting::isFunctionCold(llvm::ProfileSummaryInfo **this, const llvm::Function *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 14);
  return v2 && (*(_BYTE *)(v2 + 12) & 0x20) != 0
      || (*((_WORD *)a2 + 9) & 0x3FF0) == 0x90
      || llvm::ProfileSummaryInfo::isFunctionEntryCold(*this, a2);
}

BOOL llvm::HotColdSplitting::shouldOutlineFrom(llvm::HotColdSplitting *this, const llvm::Function *a2)
{
  _BYTE *v2;
  char v4;

  v2 = (_BYTE *)*((_QWORD *)a2 + 14);
  if (!v2)
    return 1;
  if ((v2[12] & 4) != 0)
    return 0;
  if ((v2[15] & 8) != 0)
    return 0;
  if ((v2[16] & 1) != 0)
    return 0;
  v4 = v2[18];
  if ((v4 & 0x4C) != 0)
    return 0;
  return (v4 & 0x20) == 0;
}

llvm::BasicBlock **llvm::HotColdSplitting::extractColdRegion(int a1, unsigned int *a2, const llvm::CodeExtractorAnalysisCache *a3, uint64_t a4, uint64_t a5, _QWORD *a6, llvm::OptimizationRemarkEmitter *a7, uint64_t a8, unsigned int __val)
{
  uint64_t *v9;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t v15;
  std::string *v16;
  llvm::BasicBlock **v17;
  uint64_t v18;
  uint64_t v19;
  llvm::OptimizationRemarkEmitter *v20;
  llvm::BasicBlock **v21;
  llvm::BasicBlock *v22;
  llvm::BasicBlock **v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _BYTE *v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  std::string::__raw *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char *v50;
  char v51;
  llvm::BasicBlock **v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unsigned int *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  llvm::BasicBlock **v61;
  uint64_t v62;
  int v63;
  char *size;
  unsigned int v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  char *v69;
  int v70;
  unint64_t v71;
  uint64_t i;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  llvm::BasicBlock *v80;
  uint64_t v81;
  llvm::BasicBlock **v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  unsigned int v90;
  uint64_t CodeRegion;
  uint64_t v93;
  size_t v94;
  llvm::OptimizationRemarkEmitter *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  unsigned int v101;
  llvm::BasicBlock ***v102;
  llvm::BasicBlock **v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  llvm::BasicBlock ***v110;
  llvm::BasicBlock **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  std::string::size_type v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  void **v121;
  char *v122;
  unint64_t v123;
  void **v124;
  llvm::BasicBlock ***v125;
  int v126;
  BOOL v127;
  unsigned int v128;
  llvm::BasicBlock ***v129;
  std::string::size_type v130;
  llvm::BasicBlock ***v131;
  int v132;
  BOOL v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  std::string::size_type v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  unint64_t v141;
  void **v142;
  char *v143;
  unint64_t v144;
  void **v145;
  llvm::BasicBlock ***v146;
  std::string::size_type v147;
  int v148;
  llvm::OptimizationRemarkEmitter *v151;
  _BYTE *v152;
  _BYTE *v153;
  _BYTE *v154;
  _BYTE *v155;
  unsigned int *v156;
  llvm::BasicBlock **v157;
  llvm::BasicBlock **v158;
  uint64_t v160[2];
  int v161;
  void *v162;
  void *v163;
  uint64_t v164;
  _QWORD v165[2];
  int v166;
  void *v167;
  _BYTE *v168;
  uint64_t v169;
  _QWORD v170[2];
  int v171;
  void *v172;
  _BYTE *v173;
  uint64_t v174;
  std::string __p;
  _BYTE v176[56];
  uint64_t v177[8];
  void *v178;
  uint64_t v179;
  void *v180;
  char v181;
  uint64_t v182;
  void *v183;
  void *v184;
  void *v185[2];
  _BYTE v186[8];
  void *v187;
  _BYTE *v188;
  void *v189[2];
  _BYTE v190[64];
  void *v191;
  unsigned int v192;
  _BYTE v193[272];
  void *v194[2];
  uint64_t v195;
  void *v196;
  uint64_t v197;
  std::string v198;
  __int128 v199;
  std::string *v200;
  __int128 v201;
  uint64_t v202;
  char v203;
  void *v204;
  uint64_t v205;
  _BYTE v206[256];
  char v207;
  int v208;
  uint64_t v209;
  uint64_t v210;

  v13 = a2;
  v210 = *MEMORY[0x1E0C80C00];
  v14 = *(uint64_t **)a2;
  v15 = a2[2];
  std::to_string(&v198, __val);
  v16 = std::string::insert(&v198, 0, "cold.");
  __p = *v16;
  v16->__r_.__value_.__r.__words[0] = 0;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  llvm::CodeExtractor::CodeExtractor((uint64_t)v176, v14, v15, a4, 0, 0, 0, a8, 0, 0, 0, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v198.__r_.__value_.__l.__data_);
  v151 = a7;
  v170[0] = 0;
  v170[1] = 0;
  v171 = 0;
  v173 = 0;
  v174 = 0;
  v172 = 0;
  v165[0] = 0;
  v165[1] = 0;
  v166 = 0;
  v168 = 0;
  v169 = 0;
  v167 = 0;
  v160[0] = 0;
  v160[1] = 0;
  v161 = 0;
  v163 = 0;
  v164 = 0;
  v162 = 0;
  llvm::CodeExtractor::findInputsOutputs((uint64_t)v176, v170, v165, v160);
  v17 = *(llvm::BasicBlock ***)v13;
  v18 = v13[2];
  v156 = v13;
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = 0;
    v21 = (llvm::BasicBlock **)&v195;
    v9 = (uint64_t *)&v198.__r_.__value_.__r.__words[2];
    v13 = (unsigned int *)v186;
    v157 = &v17[v18];
    while (1)
    {
      v22 = *v17;
      llvm::BasicBlock::instructionsWithoutDebug(*v17, 1, (uint64_t)&v198);
      *(_OWORD *)v194 = *(_OWORD *)&v198.__r_.__value_.__l.__data_;
      if (v200)
      {
        if (v200 == (std::string *)&v198.__r_.__value_.__r.__words[2])
        {
          v197 = (uint64_t)v21;
          (*(void (**)(std::string::size_type *, llvm::BasicBlock **))(v198.__r_.__value_.__r.__words[2] + 24))(&v198.__r_.__value_.__r.__words[2], v21);
        }
        else
        {
          v197 = (*(uint64_t (**)(void))(v200->__r_.__value_.__r.__words[0] + 16))();
        }
      }
      else
      {
        v197 = 0;
      }
      *(_OWORD *)v185 = v201;
      if (v205)
      {
        if ((uint64_t *)v205 == &v202)
        {
          v188 = v186;
          (*(void (**)(uint64_t *, _BYTE *))(v202 + 24))(&v202, v186);
        }
        else
        {
          v188 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v205 + 16))();
        }
      }
      else
      {
        v188 = 0;
      }
      v23 = v21;
      v24 = v194[0];
      if (v194[0] == v185[0])
        goto LABEL_56;
      v25 = (_QWORD *)((char *)v22 + 40);
      do
      {
        if (v24)
          v26 = (uint64_t)v24 - 24;
        else
          v26 = 0;
        v27 = (_QWORD *)*v25;
        if ((_QWORD *)*v25 == v25)
        {
          v28 = 0;
        }
        else
        {
          if (v27)
            v28 = v27 - 3;
          else
            v28 = 0;
          if (*((unsigned __int8 *)v28 + 16) - 29 >= 0xB)
            v28 = 0;
        }
        if ((_QWORD *)v26 != v28)
        {
          v29 = *(_DWORD *)(v26 + 20);
          if ((v29 & 0x40000000) != 0)
          {
            v9 = *(uint64_t **)(v26 - 8);
            v30 = v29 & 0x7FFFFFF;
          }
          else
          {
            v30 = v29 & 0x7FFFFFF;
            v9 = (uint64_t *)(v26 - 32 * v30);
          }
          v189[0] = v190;
          v189[1] = (void *)0x400000000;
          if (v30 < 5)
          {
            v31 = 0;
            if (v30)
            {
              v32 = 0;
              v33 = v190;
LABEL_36:
              v34 = 32 * v30;
              v35 = (uint64_t *)&v33[8 * v32];
              do
              {
                v36 = *v9;
                v9 += 4;
                *v35++ = v36;
                v34 -= 32;
              }
              while (v34);
              v37 = v189[0];
            }
            else
            {
              v37 = v190;
            }
            LODWORD(v189[1]) = v31 + v30;
            v26 = (*(uint64_t (**)(_QWORD, uint64_t, _BYTE *))(*(_QWORD *)*a6 + 72))(*a6, v26, v37);
            v39 = v38;
            if (v189[0] != v190)
              free(v189[0]);
            if (v39 == 1)
              v19 = 1;
            else
              v19 = v19;
            if (__OFADD__(v20, v26))
              v20 = (llvm::OptimizationRemarkEmitter *)((((uint64_t)v20 + v26) >> 63) ^ 0x8000000000000000);
            else
              v20 = (llvm::OptimizationRemarkEmitter *)((char *)v20 + v26);
            goto LABEL_48;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v189, (uint64_t)v190, v30, 8);
          v31 = (int)v189[1];
          v33 = v189[0];
          v32 = LODWORD(v189[1]);
          goto LABEL_36;
        }
        do
        {
LABEL_48:
          v24 = (void *)*((_QWORD *)v194[0] + 1);
          v194[0] = v24;
          if (v24 == v194[1])
            goto LABEL_52;
          if (!v197)
          {
            sub_1C485C2F0();
            goto LABEL_253;
          }
        }
        while (!(*(unsigned int (**)(void))(*(_QWORD *)v197 + 48))());
        v24 = v194[0];
LABEL_52:
        ;
      }
      while (v24 != v185[0]);
LABEL_56:
      v40 = v188;
      if (v188 == v186)
      {
        v40 = v186;
        v41 = 4;
        v21 = v23;
        v9 = (uint64_t *)&v198.__r_.__value_.__r.__words[2];
LABEL_60:
        (*(void (**)(void))(*v40 + 8 * v41))();
      }
      else
      {
        v21 = v23;
        v9 = (uint64_t *)&v198.__r_.__value_.__r.__words[2];
        if (v188)
        {
          v41 = 5;
          goto LABEL_60;
        }
      }
      v42 = (_QWORD *)v197;
      if ((llvm::BasicBlock **)v197 == v21)
      {
        v42 = v21;
        v43 = 4;
LABEL_65:
        (*(void (**)(void))(*v42 + 8 * v43))();
      }
      else if (v197)
      {
        v43 = 5;
        goto LABEL_65;
      }
      v44 = (uint64_t *)v205;
      if ((uint64_t *)v205 == &v202)
      {
        v44 = &v202;
        v45 = 4;
        goto LABEL_68;
      }
      if (v205)
      {
        v45 = 5;
LABEL_68:
        (*(void (**)(void))(*v44 + 8 * v45))();
      }
      v46 = (std::string::__raw *)v200;
      if (v200 == (std::string *)&v198.__r_.__value_.__r.__words[2])
      {
        v46 = (std::string::__raw *)&v198.__r_.__value_.__r.__words[2];
        v47 = 4;
        goto LABEL_71;
      }
      if (v200)
      {
        v47 = 5;
LABEL_71:
        (*(void (**)(void))(v46->__words[0] + 8 * v47))();
      }
      if (++v17 == v157)
      {
        v13 = v156;
        v17 = *(llvm::BasicBlock ***)v156;
        LODWORD(v18) = v156[2];
        goto LABEL_79;
      }
    }
  }
  v20 = 0;
  v19 = 0;
LABEL_79:
  v48 = dword_1ED80B940;
  if (dword_1ED80B940 >= 1)
  {
    v49 = v18;
    v152 = v172;
    v153 = v167;
    v154 = v173;
    v50 = (char *)&v199 + 8;
    v198.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199 + 8;
    v198.__r_.__value_.__l.__size_ = (std::string::size_type)&v199 + 8;
    v198.__r_.__value_.__r.__words[2] = 2;
    LODWORD(v199) = 0;
    v23 = &v17[v18];
    v155 = v168;
    if ((_DWORD)v18)
    {
      v148 = dword_1ED80B940;
      v51 = 1;
      v52 = v17;
      while (1)
      {
        v53 = *((_QWORD *)*v52 + 5);
        v158 = v52;
        if ((llvm::BasicBlock *)v53 == (llvm::BasicBlock *)((char *)*v52 + 40))
          break;
        if (v53)
          v54 = v53 - 24;
        else
          v54 = 0;
        v55 = *(unsigned __int8 *)(v54 + 16);
        if (v55 == 30)
        {
          if ((*(_DWORD *)(v54 + 20) & 0x7FFFFFF) == 3)
            v56 = 2;
          else
            v56 = 1;
LABEL_91:
          v13 = 0;
          v9 = (uint64_t *)(v54 - 32);
          v57 = (unsigned int *)v56;
          do
          {
            v58 = *(unsigned __int8 *)(v54 + 16);
            if (v58 != 30)
              __asm { BR              X10 }
            v59 = v9[-4 * (_QWORD)v13];
            v60 = 8 * v49;
            v61 = v17;
            while (*v61 != (llvm::BasicBlock *)v59)
            {
              ++v61;
              v60 -= 8;
              if (!v60)
              {
                v61 = &v17[v49];
                break;
              }
            }
            if (v49 == v61 - v17)
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v198, v59);
              v51 = 0;
            }
            v13 = (unsigned int *)((char *)v13 + 1);
          }
          while (v13 != v57);
          goto LABEL_109;
        }
        v56 = 2;
        switch(*(_BYTE *)(v54 + 16))
        {
          case 0x1E:
            __break(1u);
            goto LABEL_300;
          case 0x1F:
            v63 = (*(_DWORD *)(v54 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 0x20:
          case 0x26:
            v63 = (*(_DWORD *)(v54 + 20) & 0x7FFFFFF) - 1;
            break;
          case 0x21:
            goto LABEL_91;
          case 0x24:
            v63 = *(_WORD *)(v54 + 18) & 1;
            break;
          case 0x25:
            v56 = 1;
            goto LABEL_91;
          case 0x27:
            v63 = *(_DWORD *)(v54 + 80) + 1;
            break;
          default:
            goto LABEL_103;
        }
        if (!v63)
          goto LABEL_103;
        if (v55 != 31)
          __asm { BR              X10 }
        v56 = (*(_DWORD *)(v54 + 20) >> 1) & 0x3FFFFFF;
        if (v56)
          goto LABEL_91;
LABEL_109:
        v52 = v158 + 1;
        if (v158 + 1 == v23)
        {
          size = (char *)v198.__r_.__value_.__l.__size_;
          v50 = (char *)v198.__r_.__value_.__r.__words[0];
          v65 = HIDWORD(v198.__r_.__value_.__r.__words[2]);
          LODWORD(v66) = v198.__r_.__value_.__r.__words[2];
          v13 = v156;
          v48 = v148;
          goto LABEL_122;
        }
      }
      v53 = (uint64_t)*v52 + 40;
LABEL_103:
      if (v53)
        v62 = v53 - 24;
      else
        v62 = 0;
      if (*(unsigned __int8 *)(v62 + 16) - 29 >= 0xB)
        v62 = 0;
      v51 &= *(_BYTE *)(v62 + 16) == 35;
      goto LABEL_109;
    }
    v65 = 0;
    LODWORD(v66) = 2;
    size = (char *)&v199 + 8;
    v51 = 1;
LABEL_122:
    if (size == v50)
      v66 = v65;
    else
      v66 = v66;
    v67 = (unint64_t *)size;
    if ((_DWORD)v66)
    {
      v68 = 8 * v66;
      v67 = (unint64_t *)size;
      while (*v67 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v67;
        v68 -= 8;
        if (!v68)
          goto LABEL_160;
      }
    }
    v69 = &size[8 * v66];
    if (v67 == (unint64_t *)v69)
    {
LABEL_160:
      v70 = 0;
    }
    else
    {
      v70 = 0;
      v71 = *v67;
LABEL_132:
      if (*(_QWORD *)(v71 + 40) != v71 + 40)
      {
        for (i = *(_QWORD *)(v71 + 48); ; i = *(_QWORD *)(v73 + 32))
        {
          v73 = i - 24;
          if (i)
            v74 = i - 24;
          else
            v74 = 0;
          if (!i || *(_BYTE *)(v74 + 16) != 83)
            break;
          v75 = *(_DWORD *)(i - 4);
          v76 = v75 & 0x7FFFFFF;
          if ((v75 & 0x7FFFFFF) == 0)
            continue;
          v77 = 0;
          v78 = 0;
          while (1)
          {
            v79 = v73 - 32 * v76;
            if ((v75 & 0x40000000) != 0)
              v79 = *(_QWORD *)(v73 - 8);
            if ((_DWORD)v49)
            {
              v80 = *(llvm::BasicBlock **)(v79 + 32 * *(unsigned int *)(v73 + 60) + 8 * v77);
              v81 = 8 * v49;
              v82 = v17;
              while (*v82 != v80)
              {
                ++v82;
                v81 -= 8;
                if (!v81)
                {
                  v82 = &v17[v49];
                  break;
                }
              }
            }
            else
            {
              v82 = v17;
            }
            if (v49 == v82 - v17)
              goto LABEL_152;
            if (v78 >= 1)
              break;
            v78 = 1;
LABEL_152:
            if (++v77 == v76)
              goto LABEL_155;
          }
          ++v70;
LABEL_155:
          ;
        }
      }
      v83 = v67 + 1;
      while (v83 != (unint64_t *)v69)
      {
        v84 = *v83++;
        v71 = v84;
        if (v84 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v67 = v83 - 1;
          goto LABEL_132;
        }
      }
    }
    v85 = v70 + ((unint64_t)(v155 - v153) >> 3);
    v86 = v85 + ((unint64_t)(v154 - v152) >> 3);
    if (v86 <= dword_1ED80BAC0)
    {
      v87 = 3 * v85;
      if ((v51 & 1) != 0)
        v88 = v49;
      else
        v88 = 0;
      v89 = v48 - v88 + v87 + 2 * v86;
      v90 = v65 - v199;
      if (v90 >= 2)
        v48 = v89 + v90 - 1;
      else
        v48 = v89;
    }
    else
    {
      v48 = 0x7FFFFFFF;
    }
    if (size != v50)
      free(size);
  }
  v17 = 0;
  if (!(_DWORD)v19 && (uint64_t)v20 > v48)
  {
    v19 = (uint64_t)&v198;
    v23 = *(llvm::BasicBlock ***)(**(_QWORD **)v13 + 56);
    CodeRegion = llvm::CodeExtractor::extractCodeRegion((llvm::CodeExtractor *)v176, a3);
    if (!CodeRegion)
    {
      v95 = v151;
      v96 = ****(_QWORD ****)v151;
      if (*(_QWORD *)(v96 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v96 + 72) + 48))(*(_QWORD *)(v96 + 72)))
      {
        v135 = *(_QWORD *)(**(_QWORD **)v13 + 48);
        if (v135)
          v136 = v135 - 24;
        else
          v136 = 0;
        v137 = *(_QWORD *)(*(_QWORD *)(v136 + 40) + 56);
        llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v189, (const llvm::DebugLoc *)(v136 + 48));
        v138 = *(_QWORD *)(v136 + 40);
        LODWORD(v198.__r_.__value_.__r.__words[1]) = 10;
        v198.__r_.__value_.__s.__data_[12] = 2;
        v199 = *(_OWORD *)v189;
        v198.__r_.__value_.__r.__words[2] = v137;
        v200 = (std::string *)"hotcoldsplit";
        *(_QWORD *)&v201 = "ExtractFailed";
        *((_QWORD *)&v201 + 1) = 13;
        LOBYTE(v202) = 0;
        v203 = 0;
        v204 = v206;
        v205 = 0x400000000;
        v207 = 0;
        v208 = -1;
        v209 = v138;
        v198.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E538;
        v189[0] = "Failed to extract region at block ";
        v189[1] = (void *)34;
        sub_1C53B17B4((uint64_t)&v204, (const void **)v189);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v194, "Block", 5uLL, **(_BYTE ***)v13);
        v139 = sub_1C47E3888((uint64_t)&v198, (uint64_t)v194);
        sub_1C61998EC((uint64_t)v189, v139);
        v189[0] = &off_1E814E538;
        if (SHIBYTE(v197) < 0)
          operator delete(v196);
        if (SHIBYTE(v195) < 0)
          operator delete(v194[0]);
        v198.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E790;
        v140 = (char *)v204;
        if ((_DWORD)v205)
        {
          v141 = (unint64_t)v205 << 6;
          do
          {
            v142 = (void **)&v140[v141];
            if (v140[v141 - 17] < 0)
              operator delete(*(v142 - 5));
            if (*((char *)v142 - 41) < 0)
              operator delete(*(v142 - 8));
            v141 -= 64;
          }
          while (v141);
          v140 = (char *)v204;
          v95 = v151;
        }
        if (v140 != v206)
          free(v140);
        llvm::OptimizationRemarkEmitter::emit(v95, (llvm::DiagnosticInfoOptimizationBase *)v189);
        v189[0] = &off_1E814E790;
        v143 = (char *)v191;
        if (v192)
        {
          v144 = (unint64_t)v192 << 6;
          do
          {
            v145 = (void **)&v143[v144];
            if (v143[v144 - 17] < 0)
              operator delete(*(v145 - 5));
            if (*((char *)v145 - 41) < 0)
              operator delete(*(v145 - 8));
            v144 -= 64;
          }
          while (v144);
          v143 = (char *)v191;
        }
        if (v143 != v193)
          free(v143);
      }
      v17 = 0;
      goto LABEL_173;
    }
    v17 = (llvm::BasicBlock **)CodeRegion;
    v93 = *(_QWORD *)(*(_QWORD *)(CodeRegion + 8) + 24);
    v20 = v151;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 520))(*a6, CodeRegion))
    {
      *((_WORD *)v17 + 9) = *((_WORD *)v17 + 9) & 0xC00F | 0x90;
      *(_WORD *)(v93 + 18) = *(_WORD *)(v93 + 18) & 0xF003 | 0x24;
    }
    *(_QWORD *)(v93 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v93 + 64), **(uint64_t ***)v93, -1, 27);
    if (byte_1ED80BA00)
    {
      if (byte_1ED80BB97 >= 0)
        v94 = byte_1ED80BB97 & 0x7F;
      else
        v94 = qword_1ED80BB88;
      if (byte_1ED80BB97 >= 0)
        v9 = &qword_1ED80BB80;
      else
        v9 = (uint64_t *)qword_1ED80BB80;
LABEL_203:
      if ((*((_BYTE *)v17 + 34) & 0x40) != 0 || v94)
      {
        if (v94)
        {
          v9 = (uint64_t *)llvm::UniqueStringSaver::save(**(_QWORD **)*v17 + 2136, v9, v94);
          v26 = v104;
        }
        else
        {
LABEL_300:
          v26 = 0;
        }
        v105 = **(_QWORD **)*v17;
        v198.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
        v106 = *(_DWORD *)(v105 + 2520);
        if (v106)
        {
          v107 = *(_QWORD *)(v105 + 2504);
          v108 = v106 - 1;
          v109 = v108 & ((v17 >> 4) ^ (v17 >> 9));
          v110 = (llvm::BasicBlock ***)(v107 + 24 * v109);
          v111 = *v110;
          if (*v110 == v17)
          {
LABEL_209:
            v110[1] = (llvm::BasicBlock **)v9;
            v110[2] = (llvm::BasicBlock **)v26;
            *((_DWORD *)v17 + 8) = (_DWORD)v17[4] & 0xFFBFFFFF | ((v26 != 0) << 22);
            goto LABEL_210;
          }
          v125 = 0;
          v126 = 1;
          while (v111 != (llvm::BasicBlock **)-4096)
          {
            if (v125)
              v127 = 0;
            else
              v127 = v111 == (llvm::BasicBlock **)-8192;
            if (v127)
              v125 = v110;
            v128 = v109 + v126++;
            v109 = v128 & v108;
            v110 = (llvm::BasicBlock ***)(v107 + 24 * v109);
            v111 = *v110;
            if (*v110 == v17)
              goto LABEL_209;
          }
LABEL_253:
          if (v125)
            v129 = v125;
          else
            v129 = v110;
        }
        else
        {
          v129 = 0;
        }
        v110 = (llvm::BasicBlock ***)sub_1C53D65B8(v105 + 2504, (uint64_t)&v198, (uint64_t *)&v198, v129);
        v130 = v198.__r_.__value_.__r.__words[0];
        v110[1] = 0;
        v110[2] = 0;
        *v110 = (llvm::BasicBlock **)v130;
        goto LABEL_209;
      }
LABEL_210:
      sub_1C56ED398((uint64_t)v17, a5 != 0);
      v112 = ****(_QWORD ****)v20;
      if (*(_QWORD *)(v112 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v112 + 72) + 48))(*(_QWORD *)(v112 + 72)))
      {
        v113 = *(_QWORD *)(**(_QWORD **)v13 + 48);
        if (v113)
          v114 = v113 - 24;
        else
          v114 = 0;
        v115 = *(_QWORD *)(*(_QWORD *)(v114 + 40) + 56);
        llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v189, (const llvm::DebugLoc *)(v114 + 48));
        v116 = *(_QWORD *)(v114 + 40);
        LODWORD(v198.__r_.__value_.__r.__words[1]) = 9;
        v198.__r_.__value_.__s.__data_[12] = 2;
        *(_OWORD *)(v19 + 24) = *(_OWORD *)v189;
        v198.__r_.__value_.__r.__words[2] = v115;
        v200 = (std::string *)"hotcoldsplit";
        *(_QWORD *)&v201 = "HotColdSplit";
        *((_QWORD *)&v201 + 1) = 12;
        LOBYTE(v202) = 0;
        v203 = 0;
        v204 = v206;
        v205 = 0x400000000;
        v207 = 0;
        v208 = -1;
        v209 = v116;
        v198.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E500;
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v194, "Original", 8uLL, v23);
        v117 = sub_1C47E3888((uint64_t)&v198, (uint64_t)v194);
        v189[0] = " split cold code into ";
        v189[1] = (void *)22;
        sub_1C53B17B4(v117 + 80, (const void **)v189);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v185, "Split", 5uLL, v17);
        v118 = sub_1C47E3888(v117, (uint64_t)v185);
        sub_1C61998EC((uint64_t)v189, v118);
        v189[0] = &off_1E814E500;
        if (SHIBYTE(v188) < 0)
          operator delete(v187);
        if ((v186[7] & 0x80000000) != 0)
          operator delete(v185[0]);
        if (SHIBYTE(v197) < 0)
          operator delete(v196);
        if (SHIBYTE(v195) < 0)
          operator delete(v194[0]);
        v198.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E790;
        v119 = (char *)v204;
        if ((_DWORD)v205)
        {
          v120 = (unint64_t)v205 << 6;
          do
          {
            v121 = (void **)&v119[v120];
            if (v119[v120 - 17] < 0)
              operator delete(*(v121 - 5));
            if (*((char *)v121 - 41) < 0)
              operator delete(*(v121 - 8));
            v120 -= 64;
          }
          while (v120);
          v119 = (char *)v204;
          v20 = v151;
        }
        if (v119 != v206)
          free(v119);
        llvm::OptimizationRemarkEmitter::emit(v20, (llvm::DiagnosticInfoOptimizationBase *)v189);
        v189[0] = &off_1E814E790;
        v122 = (char *)v191;
        if (v192)
        {
          v123 = (unint64_t)v192 << 6;
          do
          {
            v124 = (void **)&v122[v123];
            if (v122[v123 - 17] < 0)
              operator delete(*(v124 - 5));
            if (*((char *)v124 - 41) < 0)
              operator delete(*(v124 - 8));
            v123 -= 64;
          }
          while (v123);
          v122 = (char *)v191;
        }
        if (v122 != v193)
          free(v122);
      }
      goto LABEL_173;
    }
    if ((*((_BYTE *)v23 + 34) & 0x40) == 0)
      goto LABEL_210;
    v97 = **(_QWORD **)*v23;
    v198.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v98 = *(_DWORD *)(v97 + 2520);
    if (v98)
    {
      v99 = *(_QWORD *)(v97 + 2504);
      v100 = v98 - 1;
      v101 = v100 & ((v23 >> 4) ^ (v23 >> 9));
      v102 = (llvm::BasicBlock ***)(v99 + 24 * v101);
      v103 = *v102;
      if (*v102 == v23)
      {
LABEL_202:
        v9 = (uint64_t *)v102[1];
        v94 = (size_t)v102[2];
        goto LABEL_203;
      }
      v131 = 0;
      v132 = 1;
      while (v103 != (llvm::BasicBlock **)-4096)
      {
        if (v131)
          v133 = 0;
        else
          v133 = v103 == (llvm::BasicBlock **)-8192;
        if (v133)
          v131 = v102;
        v134 = v101 + v132++;
        v101 = v134 & v100;
        v102 = (llvm::BasicBlock ***)(v99 + 24 * v101);
        v103 = *v102;
        if (*v102 == v23)
          goto LABEL_202;
      }
      if (v131)
        v146 = v131;
      else
        v146 = v102;
    }
    else
    {
      v146 = 0;
    }
    v102 = (llvm::BasicBlock ***)sub_1C53D65B8(v97 + 2504, (uint64_t)&v198, (uint64_t *)&v198, v146);
    v147 = v198.__r_.__value_.__r.__words[0];
    v102[1] = 0;
    v102[2] = 0;
    *v102 = (llvm::BasicBlock **)v147;
    goto LABEL_202;
  }
LABEL_173:
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  MEMORY[0x1CAA32FB4](v160[0], 8);
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  MEMORY[0x1CAA32FB4](v165[0], 8);
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
  MEMORY[0x1CAA32FB4](v170[0], 8);
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  MEMORY[0x1CAA32FB4](v182, 8);
  if (v181 < 0)
    operator delete(v180);
  if (v178 != &v179)
    free(v178);
  sub_1C5408A20(v177);
  return v17;
}

uint64_t sub_1C56ED398(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;

  v5 = (uint64_t *)(a1 + 112);
  v4 = *(_QWORD *)(a1 + 112);
  if (v4 && (*(_BYTE *)(v4 + 12) & 0x20) != 0)
  {
    result = 0;
LABEL_6:
    if (*(char *)(v4 + 13) < 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v6 = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, -1, 5);
  *(_QWORD *)(a1 + 112) = v6;
  if (v6)
  {
    v4 = v6;
    result = 1;
    goto LABEL_6;
  }
LABEL_7:
  *(_QWORD *)(a1 + 112) = llvm::AttributeList::addAttributeAtIndex(v5, **(uint64_t ***)a1, -1, 15);
  result = 1;
LABEL_8:
  if (a2)
  {
    llvm::Function::setEntryCount((uint64_t ***)a1, 0, 0, 0);
    return 1;
  }
  return result;
}

char *llvm::HotColdSplitting::outlineColdRegions(llvm::HotColdSplitting *this, llvm::Function *a2, int a3)
{
  llvm::Function *v4;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *result;
  uint64_t *v12;
  uint64_t (*v13)(_QWORD, llvm::Function *);
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unsigned int v47;
  _QWORD *v48;
  _BYTE *v49;
  void *v50;
  void *v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  BOOL v65;
  unsigned int v66;
  unsigned int v67;
  char *v68;
  void *v69;
  char *v70;
  char *v71;
  llvm::HotColdSplitting *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t **v86;
  char *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int v93;
  uint64_t v94;
  llvm::HotColdSplitting *v95;
  _BYTE *v96;
  _BYTE *v97;
  int64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  __int128 v110;
  _BYTE *v111;
  _BYTE *v112;
  _DWORD *v113;
  _DWORD *v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  _BYTE *v120;
  char *v121;
  char *v122;
  int v123;
  BOOL v124;
  uint64_t v125;
  _BOOL4 v126;
  _QWORD *v127;
  uint64_t *v128;
  BOOL v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  BOOL v135;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  int v144;
  unsigned int __val;
  unsigned int v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  void **v151;
  uint64_t v152;
  int v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  _DWORD *v160;
  char *v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  _BYTE *v168;
  char *v169;
  llvm::BasicBlock **ColdRegion;
  _BOOL4 v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  llvm::OptimizationRemarkEmitter *v177;
  _QWORD *v178;
  uint64_t **v179;
  char v180;
  int v181;
  unsigned int v182;
  _BYTE *v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  void *v189;
  void *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  int v194[2];
  void *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  int v201;
  _BYTE v202[32];
  _DWORD *v203;
  _DWORD *v204;
  uint64_t v205;
  _DWORD v206[16];
  uint64_t v207;
  void *v208;
  _BYTE *v209;
  unint64_t v210;
  void *v211;
  _BYTE *v212;
  _DWORD v213[4];
  _BYTE v214[64];
  void *v215;
  char *v216;
  uint64_t v217;
  void *v218;
  void *__src;
  uint64_t v220;
  int v221;
  void *__p;
  _BYTE *v223;
  _BYTE *v224;
  void *v225;
  uint64_t v226;
  int v227;
  _BYTE v228[32];
  llvm::Function *v229;
  void *v230;
  int v231;
  int v232;
  int v233;
  _BYTE v234[64];
  void *v235;
  char *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  _QWORD v240[10];

  v4 = a2;
  v240[8] = *MEMORY[0x1E0C80C00];
  v198 = v202;
  v199 = v202;
  v200 = 4;
  v201 = 0;
  v238 = v240;
  v239 = 0x200000000;
  v229 = a2;
  v196 = 0;
  v197 = 0;
  v195 = 0;
  sub_1C5643D14((char **)&v195, (uint64_t)&v229);
  v179 = 0;
  v193 = 0;
  *(_QWORD *)v194 = 0;
  if (a3)
    v179 = (uint64_t **)(*((uint64_t (**)(_QWORD, llvm::Function *))this + 1))(*((_QWORD *)this + 2), v4);
  v178 = (_QWORD *)(*((uint64_t (**)(_QWORD, llvm::Function *))this + 3))(*((_QWORD *)this + 4), v4);
  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 24);
  if (!v6)
    sub_1C485C2F0();
  v177 = (llvm::OptimizationRemarkEmitter *)(*(uint64_t (**)(uint64_t, llvm::Function *))(*(_QWORD *)v6 + 48))(v6, v4);
  v176 = (*((uint64_t (**)(_QWORD, llvm::Function *))this + 6))(*((_QWORD *)this + 7), v4);
  v7 = (char *)v195;
  v8 = v196;
  if (v196 == v195)
    goto LABEL_283;
  v185 = (uint64_t)v4;
  while (2)
  {
    v10 = *((_QWORD *)v8 - 1);
    v8 -= 8;
    v9 = (_QWORD *)v10;
    result = (char *)sub_1C477672C((uint64_t)&v198, v10);
    if (v199 == v198)
      v12 = (uint64_t *)((char *)&v200 + 4);
    else
      v12 = &v200;
    if (result != &v199[8 * *(unsigned int *)v12])
      goto LABEL_10;
    if (!v179
      || (v13 = *(uint64_t (**)(_QWORD, llvm::Function *))this,
          result = (char *)llvm::BlockFrequencyInfo::getBlockProfileCount(v179, (const llvm::BasicBlock *)v9, 0),
          !v14)
      || !*((_BYTE *)v13 + 40)
      || *((_QWORD *)v13 + 4) < (unint64_t)result)
    {
      if (!byte_1ED80B880)
        goto LABEL_10;
      v15 = (_QWORD *)v9[6];
      v16 = v15 - 3;
      if (!v15)
        v16 = 0;
      v17 = *((unsigned __int8 *)v16 + 16);
      v18 = v9[6];
      if (v17 == 83)
      {
        v18 = v9[6];
        do
        {
          v18 = *(_QWORD *)(v18 + 8);
          v19 = v18 - 24;
          if (!v18)
            v19 = 0;
        }
        while (*(_BYTE *)(v19 + 16) == 83);
      }
      v20 = *(unsigned __int8 *)(v18 - 8) - 38;
      v65 = v20 > 0x38;
      v21 = (1 << v20) & 0x100060000000001;
      if (v65 || v21 == 0)
      {
        v23 = v9 + 5;
        v24 = v9[5];
        if (v24)
          v25 = v24 - 24;
        else
          v25 = 0;
        if (*(unsigned __int8 *)(v25 + 16) - 29 >= 0xB)
          v25 = 0;
        if (*(_BYTE *)(v25 + 16) != 34)
        {
          while (1)
          {
            v26 = v15 ? (uint64_t)(v15 - 3) : 0;
            v27 = *(unsigned __int8 *)(v26 + 16) - 33;
            v65 = v27 > 0x33;
            v28 = (1 << v27) & 0x8000000000041;
            if (!v65 && v28 != 0)
            {
              if ((v30 = v15[5]) != 0 && (*(_BYTE *)(v30 + 12) & 0x20) != 0
                || (result = (char *)llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v15 - 3), 5), (_DWORD)result))
              {
                if (!v15[3] && (*((_BYTE *)v15 - 1) & 0x20) == 0)
                  break;
                result = (char *)llvm::Instruction::getMetadataImpl((uint64_t ***)v15 - 3, "nosanitize", 0xAuLL);
                if (!result)
                  break;
              }
            }
            v15 = (_QWORD *)v15[1];
            if (v15 == v23)
            {
              v31 = (_QWORD *)*v23;
              if ((_QWORD *)*v23 != v23)
              {
                v32 = v31 - 3;
                if (!v31)
                  v32 = 0;
                if (*((_BYTE *)v32 + 16) != 30)
                {
                  switch(*((_BYTE *)v32 + 16))
                  {
                    case 0x1E:
                      __break(1u);
                      return result;
                    case 0x1F:
                      v131 = (*((_DWORD *)v32 + 5) >> 1) & 0x3FFFFFF;
                      goto LABEL_256;
                    case 0x20:
                    case 0x26:
                      v131 = (*((_DWORD *)v32 + 5) & 0x7FFFFFF) - 1;
                      goto LABEL_256;
                    case 0x21:
                    case 0x25:
                      goto LABEL_10;
                    case 0x24:
                      v131 = *((_WORD *)v32 + 9) & 1;
                      goto LABEL_256;
                    case 0x27:
                      v131 = *((_DWORD *)v32 + 20) + 1;
LABEL_256:
                      if (!v131)
                        goto LABEL_54;
                      goto LABEL_10;
                    default:
LABEL_54:
                      if (*((unsigned __int8 *)v32 + 16) - 29 >= 0xB)
                        v32 = 0;
                      v33 = *((unsigned __int8 *)v32 + 16);
                      if (v33 != 29)
                      {
                        v23 = (_QWORD *)*v23;
                        if (v33 != 32)
                          goto LABEL_58;
                      }
                      goto LABEL_10;
                  }
                }
                goto LABEL_10;
              }
LABEL_58:
              v34 = v23 - 3;
              if (!v23)
                v34 = 0;
              if (*((unsigned __int8 *)v34 + 16) - 29 >= 0xB)
                v35 = 0;
              else
                v35 = v34;
              if (*(_QWORD **)(v35[5] + 48) != v35 + 3)
              {
                v36 = v35[3];
                if (v36)
                {
                  if (*(_BYTE *)(v36 - 8) == 84)
                  {
                    v37 = *(_QWORD *)(v36 + 40);
                    if (v37)
                    {
                      if ((*(_BYTE *)(v37 + 16) & 1) != 0)
                        goto LABEL_10;
                    }
                    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v36 - 24, 32) & 1) != 0)
                      goto LABEL_10;
                  }
                }
              }
              break;
            }
          }
        }
      }
    }
    if (!*(_QWORD *)v194)
    {
      v38 = operator new();
      *(_QWORD *)v38 = v38 + 16;
      *(_QWORD *)(v38 + 8) = 0x100000000;
      *(_DWORD *)(v38 + 68) = 0;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0;
      *(_DWORD *)(v38 + 40) = 0;
      *(_BYTE *)(v38 + 64) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = v4;
      sub_1C53BA620(v38, 0);
      v229 = 0;
      v39 = *(_QWORD *)v194;
      *(_QWORD *)v194 = v38;
      if (v39)
      {
        sub_1C4DC4DE4((uint64_t)v194, v39);
        v40 = (uint64_t)v229;
        v229 = 0;
        if (v40)
          sub_1C4DC4DE4((uint64_t)&v229, v40);
      }
    }
    v41 = v193;
    if (!v193)
    {
      v42 = operator new();
      *(_QWORD *)v42 = v42 + 16;
      *(_QWORD *)(v42 + 8) = 0x400000000;
      *(_DWORD *)(v42 + 92) = 0;
      *(_QWORD *)(v42 + 48) = 0;
      *(_QWORD *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      *(_BYTE *)(v42 + 88) = 0;
      *(_QWORD *)(v42 + 72) = 0;
      *(_QWORD *)(v42 + 80) = v4;
      sub_1C53BA93C(v42, 0);
      v229 = 0;
      v43 = v193;
      v193 = v42;
      if (v43)
      {
        sub_1C4DC4E98((uint64_t)&v193, v43);
        v44 = (uint64_t)v229;
        v229 = 0;
        if (v44)
          sub_1C4DC4E98((uint64_t)&v229, v44);
      }
      v41 = v193;
    }
    v45 = *(_QWORD *)v194;
    v191 = 0;
    v192 = 0;
    v190 = 0;
    v224 = v228;
    v225 = v228;
    v226 = 4;
    v227 = 0;
    sub_1C56EEA7C((char **)&v190);
    v46 = v191;
    v47 = sub_1C56EEBF8((uint64_t)v9);
    if (v47)
      v48 = v9;
    else
      v48 = 0;
    v187 = v46;
    *((_QWORD *)v46 - 2) = v48;
    sub_1C62951F0((uint64_t)&v218, (uint64_t)v9);
    sub_1C56EEDD8((llvm::SmallPtrSetImplBase *)&v218);
    v49 = v234;
    v229 = (llvm::Function *)v234;
    v50 = __src;
    if (__src == v218)
    {
      v230 = v234;
      v51 = __src;
    }
    else
    {
      v137 = v220;
      v49 = malloc_type_malloc(8 * v220, 0x4065EBACuLL);
      if (!v49)
      {
        if (v137)
          goto LABEL_282;
        v49 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!v49)
          goto LABEL_282;
      }
      v230 = v49;
      v51 = v218;
      v50 = __src;
    }
    v52 = HIDWORD(v220);
    v231 = v220;
    if (v50 == v51)
      v53 = HIDWORD(v220);
    else
      v53 = v220;
    if (v53)
    {
      memmove(v49, v50, 8 * v53);
      v52 = HIDWORD(v220);
    }
    v232 = v52;
    v233 = v221;
    v236 = 0;
    v237 = 0;
    v235 = 0;
    sub_1C4D6CDA0(&v235, __p, v223, 0xAAAAAAAAAAAAAAABLL * ((v223 - (_BYTE *)__p) >> 3));
    if (__p)
    {
      v223 = __p;
      operator delete(__p);
    }
    if (__src != v218)
      free(__src);
    v54 = (uint64_t)(v187 - 32);
    sub_1C6295278((const void **)&v218);
    v182 = v47;
    while (1)
    {
      if (v236 - (_BYTE *)v235 != v223 - (_BYTE *)__p)
        goto LABEL_107;
      if (v235 == v236)
        break;
      v55 = (char *)__p + 8;
      v56 = (char *)v235 + 8;
      while (1)
      {
        v57 = v56 - 8;
        if (*((_QWORD *)v56 - 1) != *((_QWORD *)v55 - 1))
          break;
        v58 = v55[8];
        if (v56[8])
          v59 = v58 == 0;
        else
          v59 = 1;
        if (v59)
        {
          if ((v56[8] == 0) == (v58 != 0))
            break;
        }
        else if (*(_QWORD *)v56 != *(_QWORD *)v55)
        {
          break;
        }
        v55 += 24;
        v56 += 24;
        if (v57 + 24 == v236)
          goto LABEL_170;
      }
LABEL_107:
      v60 = *((_QWORD *)v236 - 3);
      if (!llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(v41, (uint64_t)v9, v60))
        goto LABEL_120;
      v61 = *(_QWORD *)(v60 + 8);
      if (!v61)
      {
LABEL_128:
        v68 = v187;
        *(v187 - 8) = 1;
        if (__p)
        {
          v223 = __p;
          operator delete(__p);
        }
        v69 = __src;
        v4 = (llvm::Function *)v185;
        if (__src == v218)
          goto LABEL_132;
LABEL_131:
        free(v69);
        goto LABEL_132;
      }
      while (1)
      {
        v62 = *(_QWORD *)(v61 + 24);
        v63 = *(unsigned __int8 *)(v62 + 16);
        v64 = v62 && v63 >= 0x1C;
        v65 = !v64 || v63 - 29 > 0xA;
        if (!v65)
          break;
        v61 = *(_QWORD *)(v61 + 8);
        if (!v61)
          goto LABEL_128;
      }
      if (sub_1C56EEBF8(v60))
      {
        v173 = v54;
        v66 = -1431655765 * ((unint64_t)(v236 - (_BYTE *)v235) >> 3);
        if (sub_1C56EEBF8(v60))
          v67 = v66;
        else
          v67 = 0;
        v172 = v67;
        if (v67 > v182)
        {
          *((_QWORD *)v187 - 2) = v60;
          v182 = v66;
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v224, v60);
        v54 = v173;
        sub_1C62953B0(v173, v60, v172);
LABEL_121:
        sub_1C56EEDD8((llvm::SmallPtrSetImplBase *)&v229);
      }
      else
      {
LABEL_120:
        v236 -= 24;
        if (v235 != v236)
          goto LABEL_121;
      }
    }
LABEL_170:
    v175 = v7;
    if (sub_1C56EEBF8((uint64_t)v9))
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v224, (uint64_t)v9);
      sub_1C62953B0(v54, (uint64_t)v9, v47);
      v132 = v9[1];
      v4 = (llvm::Function *)v185;
      if (!v132)
      {
LABEL_268:
        v68 = v187;
        *(v187 - 8) = 1;
        goto LABEL_249;
      }
      while (1)
      {
        v133 = *(_QWORD *)(v132 + 24);
        v134 = *(unsigned __int8 *)(v133 + 16);
        v135 = v133 && v134 >= 0x1C;
        if (v135 && v134 - 29 < 0xB)
          break;
        v132 = *(_QWORD *)(v132 + 8);
        if (!v132)
          goto LABEL_268;
      }
    }
    else
    {
      sub_1C56EEA7C((char **)&v190);
      v182 = 0;
      v187 = v191;
      v54 = (uint64_t)(v191 - 32);
    }
    v94 = v54;
    v95 = this;
    v203 = &v206[2];
    v204 = &v206[2];
    v205 = 8;
    v206[0] = 0;
    v209 = 0;
    v210 = 0;
    v208 = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v203, (uint64_t)v9);
    v96 = v209;
    if ((unint64_t)v209 < v210)
    {
      *(_QWORD *)v209 = v9;
      v96[8] = 0;
      v111 = v96 + 32;
      v96[24] = 0;
    }
    else
    {
      v97 = v208;
      v98 = (v209 - (_BYTE *)v208) >> 5;
      v99 = v98 + 1;
      if ((unint64_t)(v98 + 1) >> 59)
        abort();
      v100 = v45;
      v101 = v210 - (_QWORD)v208;
      if ((uint64_t)(v210 - (_QWORD)v208) >> 4 > v99)
        v99 = v101 >> 4;
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFE0)
        v102 = 0x7FFFFFFFFFFFFFFLL;
      else
        v102 = v99;
      if (v102)
      {
        if (v102 >> 59)
          sub_1C4764EE4();
        v103 = (char *)operator new(32 * v102);
      }
      else
      {
        v103 = 0;
      }
      v108 = &v103[32 * v98];
      *(_QWORD *)v108 = v9;
      v108[8] = 0;
      v108[24] = 0;
      v109 = v108;
      this = v95;
      if (v96 != v97)
      {
        do
        {
          v110 = *((_OWORD *)v96 - 1);
          *((_OWORD *)v109 - 2) = *((_OWORD *)v96 - 2);
          *((_OWORD *)v109 - 1) = v110;
          v109 -= 32;
          v96 -= 32;
        }
        while (v96 != v97);
        v96 = v208;
      }
      v111 = v108 + 32;
      v208 = v109;
      v209 = v108 + 32;
      v210 = (unint64_t)&v103[32 * v102];
      if (v96)
        operator delete(v96);
      v45 = v100;
    }
    v209 = v111;
    sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v203);
    v112 = v214;
    v211 = v214;
    v113 = v204;
    if (v204 == v203)
    {
      v212 = v214;
      v114 = v204;
      goto LABEL_203;
    }
    v138 = v205;
    v112 = malloc_type_malloc(8 * v205, 0x4065EBACuLL);
    if (!v112)
    {
      if (v138 || (v112 = malloc_type_malloc(1uLL, 0x4065EBACuLL), this = v95, !v112))
LABEL_282:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v212 = v112;
    v114 = v203;
    v113 = v204;
LABEL_203:
    v115 = HIDWORD(v205);
    v213[0] = v205;
    if (v113 == v114)
      v116 = HIDWORD(v205);
    else
      v116 = v205;
    v7 = v175;
    v117 = v94;
    if (v116)
    {
      memmove(v112, v113, 8 * v116);
      v115 = HIDWORD(v205);
    }
    v213[1] = v115;
    v213[2] = v206[0];
    v216 = 0;
    v217 = 0;
    v215 = 0;
    sub_1C4E19D7C(&v215, v208, v209, (v209 - (_BYTE *)v208) >> 5);
    v4 = (llvm::Function *)v185;
    if (v208)
    {
      v209 = v208;
      operator delete(v208);
    }
    if (v204 != v203)
      free(v204);
    v118 = 0;
    v119 = 0;
    v207 = 0;
    memset(v206, 0, sizeof(v206));
    v203 = &v206[2];
    v204 = &v206[2];
    v205 = 8;
    v209 = 0;
    v210 = 0;
    v208 = 0;
    while (2)
    {
      if (v216 - (_BYTE *)v215 != v119 - v118)
      {
LABEL_227:
        v125 = *((_QWORD *)v216 - 4);
        v126 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v45, (uint64_t)v9, v125);
        v127 = sub_1C477672C((uint64_t)&v224, v125);
        if (v225 == v224)
          v128 = (uint64_t *)((char *)&v226 + 4);
        else
          v128 = &v226;
        v129 = v127 != (_QWORD *)((char *)v225 + 8 * *(unsigned int *)v128) || !v126;
        if (!v129 && sub_1C56EEBF8(v125))
        {
          v130 = sub_1C56EEBF8(v125);
          if (v182 < v130)
          {
            *(_QWORD *)(v117 + 16) = v125;
            v182 = 1;
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v224, v125);
          sub_1C62953B0(v117, v125, v130);
        }
        else
        {
          v216 -= 32;
          if (v215 == v216)
          {
LABEL_237:
            v118 = v208;
            v119 = v209;
            continue;
          }
        }
        sub_1C4EFD8A4((llvm::SmallPtrSetImplBase *)&v211);
        goto LABEL_237;
      }
      break;
    }
    if (v215 != v216)
    {
      v120 = v118 + 16;
      v121 = (char *)v215 + 16;
      do
      {
        v122 = v121 - 16;
        if (*((_QWORD *)v121 - 2) != *((_QWORD *)v120 - 2))
          goto LABEL_227;
        v123 = v120[8];
        if (v121[8])
          v124 = v123 == 0;
        else
          v124 = 1;
        if (v124)
        {
          if ((v121[8] == 0) == (v123 != 0))
            goto LABEL_227;
        }
        else if (*(_DWORD *)v121 != *(_DWORD *)v120)
        {
          goto LABEL_227;
        }
        v120 += 32;
        v121 += 32;
      }
      while (v122 + 32 != v216);
    }
    if (v118)
    {
      v209 = v118;
      operator delete(v118);
    }
    v68 = v187;
    if (v204 != v203)
      free(v204);
    if (v215)
    {
      v216 = (char *)v215;
      operator delete(v215);
    }
    if (v212 != v211)
      free(v212);
LABEL_249:
    if (__p)
    {
      v223 = __p;
      operator delete(__p);
    }
    v69 = __src;
    if (__src != v218)
      goto LABEL_131;
LABEL_132:
    if (v235)
    {
      v236 = (char *)v235;
      operator delete(v235);
    }
    if (v230 != v229)
      free(v230);
    if (v225 != v224)
      free(v225);
    v70 = (char *)v190;
    if (v190 == v68)
    {
      if (v68)
        operator delete(v68);
      goto LABEL_10;
    }
    v71 = v7;
    v72 = this;
    v73 = (char *)v190;
LABEL_140:
    v74 = (uint64_t *)(v73 + 16);
    if (!*((_QWORD *)v73 + 2))
    {
LABEL_151:
      v73 += 32;
      if (v73 == v68)
      {
        if (v70)
        {
          v104 = 1;
LABEL_188:
          this = v72;
          v105 = v68 - 16;
          v7 = v71;
          v4 = (llvm::Function *)v185;
          do
          {
            v106 = (char *)*((_QWORD *)v105 - 2);
            if (v105 != v106)
              free(v106);
            v107 = v105 - 16;
            v105 -= 32;
          }
          while (v107 != v70);
          operator delete(v70);
          if ((v104 & 1) == 0)
            goto LABEL_285;
        }
        else
        {
          this = v72;
          v7 = v71;
          v4 = (llvm::Function *)v185;
        }
LABEL_10:
        if (v8 == v7)
        {
LABEL_283:
          if ((_DWORD)v239)
          {
            llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)&v229, v4);
            v144 = 0;
            __val = 1;
            v146 = v239;
            do
            {
              v147 = v238;
              v148 = &v238[4 * v146];
              v218 = &v220;
              __src = 0;
              if (*((_DWORD *)v148 - 6))
              {
                sub_1C56EEC88((uint64_t)&v218, v148 - 4);
                v146 = v239;
                v147 = v238;
              }
              v149 = *(v148 - 2);
              LOBYTE(v221) = *((_BYTE *)v148 - 8);
              v220 = v149;
              v150 = v146 - 1;
              LODWORD(v239) = v150;
              v151 = (void **)&v147[4 * v150];
              if (*v151 != v151 + 2)
                free(*v151);
              v152 = v220;
              do
              {
                v184 = __val;
                v189 = *(void **)v194;
                v211 = v213;
                v212 = 0;
                v153 = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, 1uLL, 8);
                *((_QWORD *)v211 + v212) = v152;
                LODWORD(v212) = (_DWORD)v212 + 1;
                v154 = (char *)v218;
                v155 = (char *)v218 + 16 * __src;
                if ((_DWORD)__src)
                {
                  v181 = v144;
                  v156 = 0;
                  v157 = 0;
                  v158 = 0;
                  v186 = 16 * __src;
                  v159 = v186 - 16;
                  v160 = (char *)v218 + 24;
                  while (1)
                  {
                    v161 = &v154[v156];
                    v162 = *(_QWORD *)&v154[v156];
                    if (v162 == v220)
                      goto LABEL_321;
                    v163 = *((_DWORD *)v161 + 2);
                    v153 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)v189, v220, *(_QWORD *)&v154[v156]);
                    if ((v153 & 1) != 0)
                      break;
                    if (v163 > v158)
                    {
                      v158 = v163;
                      v157 = v162;
                    }
                    v156 += 16;
                    v159 -= 16;
                    v160 += 4;
                    if (v186 == v156)
                    {
                      v161 = v155;
                      goto LABEL_334;
                    }
                  }
                  if (v162 != v220)
                  {
                    v164 = v212;
                    if (v212 >= (unint64_t)HIDWORD(v212))
                    {
                      v153 = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, v212 + 1, 8);
                      v164 = v212;
                    }
                    *((_QWORD *)v211 + v164) = v162;
                    LODWORD(v212) = (_DWORD)v212 + 1;
                  }
LABEL_321:
                  if (v186 - 16 == v156)
                  {
LABEL_334:
                    v144 = v181;
                    goto LABEL_335;
                  }
                  v144 = v181;
                  do
                  {
                    v165 = *((_QWORD *)v160 - 1);
                    if (v165 != v220)
                    {
                      v166 = *v160;
                      v153 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)v189, v220, *((_QWORD *)v160 - 1));
                      if ((v153 & 1) != 0)
                      {
                        if (v165 != v220)
                        {
                          v167 = v212;
                          if (v212 >= (unint64_t)HIDWORD(v212))
                          {
                            v153 = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v211, (uint64_t)v213, v212 + 1, 8);
                            v167 = v212;
                          }
                          *((_QWORD *)v211 + v167) = v165;
                          LODWORD(v212) = (_DWORD)v212 + 1;
                        }
                      }
                      else
                      {
                        if (v166 > v158)
                        {
                          v158 = v166;
                          v157 = v165;
                        }
                        *(_QWORD *)v161 = *((_QWORD *)v160 - 1);
                        *((_DWORD *)v161 + 2) = *v160;
                        v161 += 16;
                      }
                    }
                    v160 += 4;
                    v159 -= 16;
                  }
                  while (v159);
                }
                else
                {
                  v157 = 0;
                  v161 = (char *)v218;
                }
LABEL_335:
                v168 = v218;
                v169 = (char *)v218 + 16 * __src;
                if (v155 == v169)
                {
                  __val = v184;
                }
                else
                {
                  __val = v184;
                  do
                  {
                    *(_QWORD *)v161 = *(_QWORD *)v155;
                    *((_DWORD *)v161 + 2) = *((_DWORD *)v155 + 2);
                    v161 += 16;
                    v155 += 16;
                  }
                  while (v155 != v169);
                }
                LODWORD(__src) = (unint64_t)(v161 - v168) >> 4;
                v220 = v157;
                ColdRegion = llvm::HotColdSplitting::extractColdRegion(v153, (unsigned int *)&v211, (const llvm::CodeExtractorAnalysisCache *)&v229, *(uint64_t *)v194, (uint64_t)v179, v178, v177, v176, __val);
                v171 = ColdRegion != 0;
                if (ColdRegion)
                  ++__val;
                if (v211 != v213)
                  free(v211);
                v144 |= v171;
                v152 = v220;
              }
              while (v220);
              if (v218 != &v220)
                free(v218);
              v146 = v239;
            }
            while ((_DWORD)v239);
            v180 = v144;
            sub_1C626D3D0((uint64_t)&v229);
          }
          else
          {
            v180 = 0;
          }
          goto LABEL_285;
        }
        continue;
      }
      goto LABEL_140;
    }
    break;
  }
  if (!v73[24])
  {
    v75 = *((unsigned int *)v73 + 2);
    if ((_DWORD)v75)
    {
      v76 = *(uint64_t **)v73;
      v77 = 16 * v75;
      while (1)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v198, *v76);
        if (!v78)
          break;
        v76 += 2;
        v77 -= 16;
        if (!v77)
          goto LABEL_146;
      }
    }
    else
    {
LABEL_146:
      if (v239 >= HIDWORD(v239))
      {
        v229 = 0;
        v183 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v238, 0, 32, (unint64_t *)&v229);
        v82 = (uint64_t)&v183[32 * v239];
        *(_QWORD *)v82 = v82 + 16;
        *(_QWORD *)(v82 + 8) = 0;
        if (*((_DWORD *)v73 + 2))
          v82 = sub_1C56EEC88(v82, (uint64_t *)v73);
        v83 = *v74;
        *(_BYTE *)(v82 + 24) = v73[24];
        *(_QWORD *)(v82 + 16) = v83;
        v84 = (char *)v238;
        if ((_DWORD)v239)
        {
          v188 = v68;
          v85 = 0;
          v174 = 32 * v239;
          do
          {
            v86 = (uint64_t **)&v183[v85];
            v87 = v84;
            v88 = (uint64_t *)&v84[v85];
            v89 = (uint64_t *)&v183[v85 + 16];
            *v86 = v89;
            v86[1] = 0;
            if (*((_DWORD *)v88 + 2))
              sub_1C56EEC88((uint64_t)v86, v88);
            v90 = v88[2];
            v183[v85 + 24] = *((_BYTE *)v88 + 24);
            *v89 = v90;
            v85 += 32;
            v84 = v87;
          }
          while (v174 != v85);
          v84 = (char *)v238;
          if ((_DWORD)v239)
          {
            v91 = 32 * v239;
            v68 = v188;
            do
            {
              v92 = *(char **)&v84[v91 - 32];
              if (&v84[v91 - 16] != v92)
                free(v92);
              v91 -= 32;
            }
            while (v91);
            v84 = (char *)v238;
          }
          else
          {
            v68 = v188;
          }
        }
        v93 = (int)v229;
        if (v84 != (char *)v240)
          free(v84);
        v238 = v183;
        v81 = v239 + 1;
        HIDWORD(v239) = v93;
      }
      else
      {
        v79 = (uint64_t)&v238[4 * v239];
        *(_QWORD *)v79 = v79 + 16;
        *(_QWORD *)(v79 + 8) = 0;
        if (*((_DWORD *)v73 + 2))
          v79 = sub_1C56EEC88(v79, (uint64_t *)v73);
        v80 = *v74;
        *(_BYTE *)(v79 + 24) = v73[24];
        *(_QWORD *)(v79 + 16) = v80;
        v81 = v239 + 1;
      }
      LODWORD(v239) = v81;
    }
    goto LABEL_151;
  }
  v180 = sub_1C56ED398(v185, 0);
  if (v70)
  {
    v104 = 0;
    goto LABEL_188;
  }
LABEL_285:
  v139 = v193;
  v193 = 0;
  if (v139)
    sub_1C4DC4E98((uint64_t)&v193, v139);
  v140 = *(_QWORD *)v194;
  *(_QWORD *)v194 = 0;
  if (v140)
    sub_1C4DC4DE4((uint64_t)v194, v140);
  if (v195)
  {
    v196 = (char *)v195;
    operator delete(v195);
  }
  v141 = (char *)v238;
  if ((_DWORD)v239)
  {
    v142 = 32 * v239;
    do
    {
      v143 = *(char **)&v141[v142 - 32];
      if (&v141[v142 - 16] != v143)
        free(v143);
      v142 -= 32;
    }
    while (v142);
    v141 = (char *)v238;
  }
  if (v141 != (char *)v240)
    free(v141);
  if (v199 != v198)
    free(v199);
  return (char *)(v180 & 1);
}

